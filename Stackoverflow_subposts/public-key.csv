post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p><strong>the user have not generated a ssh public/private key pair set before ?</strong></p>

<p>This info is working on theChaw but can be applied to all other git repositories which support SSH pubkey authentications. (See <a href=""https://github.com/sitaramc/gitolite"" rel=""noreferrer"">gitolite</a>, gitlab or github for example.)</p>

<blockquote>
  <p>First start by setting up your own public/private key pair set. This
  can use either DSA or RSA, so basically any key you setup will work.
  On most systems you can use ssh-keygen.</p>
  
  <ul>
  <li>First you'll want to cd into your .ssh directory. Open up the terminal and run:
  
  <blockquote>
    <p><code>cd ~/.ssh &amp;&amp; ssh-keygen</code></p>
  </blockquote></li>
  <li>Next you need to copy this to your clipboard.
  
  <ul>
  <li>On OS X run: <code>cat id_rsa.pub | pbcopy</code> </li>
  <li>On Linux run: <code>cat id_rsa.pub | xclip</code></li>
  <li>On Windows (via Cygwin/Git Bash) run: <code>cat id_rsa.pub | clip</code></li>
  </ul></li>
  <li>Add your key to your account via the website.</li>
  <li>Finally setup your .gitconfig.
  
  <ul>
  <li><code>git config --global user.name ""bob""</code></li>
  <li><code>git config --global user.email bob@...</code>
  (don't forget to restart your command line to make sure the config is reloaded)</li>
  </ul></li>
  </ul>
  
  <p>Thats it you should be good to clone and checkout.</p>
</blockquote>

<p>Further information can be found on <a href=""https://help.github.com/articles/generating-ssh-keys"" rel=""noreferrer"">https://help.github.com/articles/generating-ssh-keys</a> (thanks to @Lee Whitney)
 -</p>

<p><strong>the user have generated a ssh public/private key pair set before ?</strong></p>

<ul>
<li>check which key have been authorized on your github or gitlab account settings</li>
<li>tells which corresponding private key must be associated from your local computer</li>
</ul>

<p><code>eval $(ssh-agent -s)</code></p>

<p>tell where the keys are located </p>

<p><code>ssh-add ~/.ssh/id_rsa</code></p>
","881060","<git><ssh><ssh-keys><public-key>","576","697","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>More extensive troubleshooting and even  automated fixing can be done with: </p>

<pre><code>ssh -vT git@github.com
</code></pre>

<p>Source: <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""noreferrer"">https://help.github.com/articles/error-permission-denied-publickey/</a></p>
","881060","<git><ssh><ssh-keys><public-key>","576","204","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>The basic GIT instructions did not make a reference to the SSH key stuff. Following some of the links above, I found a git help page that explains, step-by-step, exactly how to do this for various operating systems (the link will detect your OS and redirect, accordingly):</p>

<p><a href=""http://help.github.com/set-up-git-redirect/"">http://help.github.com/set-up-git-redirect/</a></p>

<p>It walks through everything needed for GITHub and also gives detailed explanations such as ""why add a passphrase when creating an RSA key."" I figured I'd post it, in case it helps someone else...</p>
","881060","<git><ssh><ssh-keys><public-key>","576","5","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>Use the ssh link from Github but make sure to not append it with ssh just use what the ssh tab on git hub gives you to clone your repo.</p>
","881060","<git><ssh><ssh-keys><public-key>","576","0","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>On Windows, make sure all your apps agree on HOME.  Msys will surprisingly NOT do it for you. I had to set an environment variable because ssh and git couldn't seem to agree on where my .ssh directory was.</p>
","881060","<git><ssh><ssh-keys><public-key>","576","5","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>Note that (at least for some projects) <strong>you must have a github account with an ssh key</strong>.</p>

<p>Look at the keys listed in your authentication agent (<em>ssh-add -l</em>)<br/>
  (if you don't see any, add one of your existing keys with ssh-add /path/to/your/key (eg: <em>ssh-add ~/.ssh/id_rsa</em>))<br/>
  (if you don't have any keys, first create one. See: <a href=""http://rcsg-gsir.imsb-dsgi.nrc-cnrc.gc.ca/documents/internet/node31.html"" rel=""noreferrer"">http://rcsg-gsir.imsb-dsgi.nrc-cnrc.gc.ca/documents/internet/node31.html</a> or just google ssh-keygen)</p>

<p><strong>To verify that you have a key associated with your github account</strong>:</p>

<p>Go to: <a href=""https://github.com/settings/ssh"" rel=""noreferrer"">https://github.com/settings/ssh</a></p>

<p>You should see at least one key with a hash key matching one of the hashes you saw when you typed <em>ssh-add -l</em> just a minute ago.</p>

<p>If you don't, add one, then try again.</p>
","881060","<git><ssh><ssh-keys><public-key>","576","19","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>This error can happen when you are accessing the SSH URL (Read/Write) instead of Git Read-Only URL but you have no write access to that repo.</p>

<p>Sometimes you just want to clone your own repo, e.g. deploy to a server. In this case you actually only need READ-ONLY access. But since that's <em>your own</em> repo, GitHub may display SSH URL if that's your preference. In this situation, if your remote host's public key is not in your GitHub SSH Keys, your access will be denied, <strong>which is expected to happen</strong>.</p>

<p>An equivalent case is when you try cloning someone else's repo to which you have no write access with SSH URL.</p>

<p>In a word, <strong>if your intent is to clone-only a repo, use HTTPS URL</strong> (<code>https://github.com/{user_name}/{project_name}.git</code>) instead of SSH URL (<code>git@github.com:{user_name}/{project_name}.git</code>), which avoids (unnecessary) public key validation.</p>

<hr>

<p>Update: GitHub is displaying HTTPS as the default protocol now and this move can probably reduce possible misuse of SSH URLs.</p>
","881060","<git><ssh><ssh-keys><public-key>","576","151","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>I was getting a similar <strong>Permission denied (publickey) error</strong> when trying to run a makefile.</p>

<p>As an alternative to the SSH steps above, you can Install the native GitHub for Mac application.</p>

<p>Click <strong>Download GitHub for Mac</strong> from - <a href=""https://help.github.com/articles/set-up-git#platform-mac"" rel=""nofollow"">https://help.github.com/articles/set-up-git#platform-mac</a></p>

<p>Once you complete setup with your git hub account (I also installed the git hub command line tools but unsure if this step is required or not) then I received an email -</p>

<p><strong>[GitHub] A new public key was added to your account</strong></p>

<p>and my error was fixed.</p>
","881060","<git><ssh><ssh-keys><public-key>","576","1","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p><strong>One of the easiest way</strong>    </p>

<p>go to terminal-</p>

<pre><code>  git push &lt;Git Remote path&gt; --all
</code></pre>
","881060","<git><ssh><ssh-keys><public-key>","576","4","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>I had a slight different situation, I was logged on to a remote server and was using git on the server, when I ran any git command I got the same message</p>

<pre><code>   Permission denied (publickey).
   fatal: The remote end hung up unexpectedly
</code></pre>

<p>The way I fixed it was by changing the file /etc/ssh_config on my Mac. 
from</p>

<pre><code>ForwardAgent no 
</code></pre>

<p>to </p>

<pre><code>ForwardAgent yes
</code></pre>
","881060","<git><ssh><ssh-keys><public-key>","576","13","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>Are you in a <a href=""https://github.com/gitextensions/gitextensions/issues/2293#issuecomment-38010146"" rel=""noreferrer"">corporate environment</a>?  Is it possible that your system variables have recently changed?  Per <a href=""https://stackoverflow.com/questions/20226147/where-does-github-for-windows-keep-its-ssh-key"">this</a> SO answer, ssh keys live at <code>%HOMEDRIVE%%HOMEPATH%\.ssh\id_rsa.pub</code>.  So if <code>%HOMEDRIVE%</code> recently changed, git doesn't know where to look for your key, and thus all of the authentication stuff.  </p>

<p>Try running <code>ssh -vT git@github.com</code>.  Take note of where the <code>identity file</code> is located.  For me, that was pointing <em>not</em> to my normal <code>\Users\MyLogin</code> but rather to a network drive, because of a change to environment variables pushed at the network level.</p>

<p>The solution?  Since my new <code>%HOMEDRIVE%</code> has the same permissions as my local files, I just moved my .ssh folder there, and called it a day.</p>
","881060","<git><ssh><ssh-keys><public-key>","576","5","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>In addition to Rufinus' reply, the shortcut to copy your ssh key to the clipboard in <strong>Windows</strong> is:</p>

<ul>
<li><code>type id_rsa.pub | clip</code></li>
</ul>

<p>Refs:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/11235362/which-windows-shell-command-will-print-a-file-content-on-the-standard-output-li"">Print to standard output</a></li>
<li><a href=""http://www.labnol.org/software/copy-command-output-to-clipboard/2506/"" rel=""nofollow noreferrer"">Copy command line output to clipboard</a></li>
</ul>
","881060","<git><ssh><ssh-keys><public-key>","576","3","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>I was getting the same error. My problem was mixing in sudo.  </p>

<p>I couldn't create the directory I was cloning into automatically without prefixing the git clone command with sudo.  When I did that, however, my ssh keys where not being properly referenced.  </p>

<p>To fix it, I set permissions via chmod on the parent directory I wanted to contain my clone so I could write to it.  Then I ran git clone WITHOUT a sudo prefix.  It then worked!  I changed the permissions back after that. Done.</p>
","881060","<git><ssh><ssh-keys><public-key>","576","1","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>The github help <a href=""https://help.github.com/articles/generating-ssh-keys/"">link</a> helped me sort out this problem. Looks like the ssh key was not added to the ssh-agent. This is what i ended up doing. </p>

<p><em>Command 1:</em></p>

<p>Ensure ssh-agent is enabled. The command starts the ssh-agent in the background:</p>

<pre><code>eval ""$(ssh-agent -s)""
</code></pre>

<p><em>Command 2:</em></p>

<p>Add your SSH key to the ssh-agent:</p>

<pre><code>ssh-add ~/.ssh/id_rsa
</code></pre>
","881060","<git><ssh><ssh-keys><public-key>","576","95","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>I have just experienced this issue while setting my current project, and none of the above solution works. so i tried looking what's really happening on the debug list using the command ssh -vT git@github.com. I notice that my private key filename is not on the list. so renaming the private key filename to 'id_rsa' do the job. hope this could help.</p>
","881060","<git><ssh><ssh-keys><public-key>","576","2","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>I was getting this error because I generated the ssh keys with the wrong email. I was able to connect using ssh, but not using git. The solution was to regenerate the keys using the main email address of my github account.</p>
","881060","<git><ssh><ssh-keys><public-key>","576","1","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>It worked for me.</p>

<p>Your public key is saved to the id_rsa.pub;file and is the key you upload to your account. You can save this key to the clipboard by running this:</p>

<blockquote>
  <p>pbcopy &lt; ~/.ssh/id_rsa.pub</p>
</blockquote>

<ul>
<li>copy the SSH key to the clipboard, return to the web portal.</li>
<li>In the SSH Key field, paste your SSH key.</li>
<li>In the Name field, provide a name for the key.</li>
<li>save .</li>
</ul>
","881060","<git><ssh><ssh-keys><public-key>","576","1","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>It worked for me</p>

<pre><code>ssh -i [your id_rsa path] -T github@github.com
</code></pre>
","881060","<git><ssh><ssh-keys><public-key>","576","1","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>Guys this is how it worked for me:</p>

<p>1- Open terminal and go to user [See attached image]</p>

<p>2- Open .ssh folder and make sure it doesn't have any file like id_rsa or id_rsa.pub otherwise sometimes it wont properly rewrite files</p>

<p>3 - git --version [Check for git installation and version]</p>

<p>4- git config --global user.email ""your email id""</p>

<p>5- git config --global user.name ""your name""</p>

<p>6- git config --list [make sure you have set your name &amp; email]</p>

<p>7- cd ~/.ssh</p>

<p>8- ssh-keygen, it prompts for saving file, allow it</p>

<p>9- cat ~/.ssh/id_rsa.pub  [Access your public key &amp; copy the key to gerrit settings]</p>

<p><strong>Note</strong>: You should not be using the sudo command with Git. If you have a very good reason you must use sudo, then ensure you are using it with every command (it's probably just better to use su to get a shell as root at that point). If you generate SSH keys without sudo and then try to use a command like sudo git push, you won't be using the same keys that you generated</p>

<p><a href=""https://i.stack.imgur.com/ZVElb.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/ZVElb.png"" alt=""enter image description here""></a></p>

<p><a href=""https://i.stack.imgur.com/eO8bK.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/eO8bK.png"" alt=""enter image description here""></a></p>
","881060","<git><ssh><ssh-keys><public-key>","576","5","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>If you have more than one key you may need to do 
<code>ssh-add private-keyfile</code></p>
","881060","<git><ssh><ssh-keys><public-key>","576","3","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>I met the same issue because of I was thought the difference between <strong>SSH</strong> and <strong>HTTPS</strong> is </p>

<p><code>https://github.com/USERNAME/REPOSITORY.git</code></p>

<p><code>ssh://github.com/USERNAME/REPOSITORY.git</code></p>

<p>So I changed from <strong>HTTPS</strong> to <strong>SSH</strong> just by changing <code>https://</code> to <code>ssh://</code> nothing on the end of the url was changed.</p>

<p>But the truth is:</p>

<pre><code>https://github.com/USERNAME/REPOSITORY.git

git@github.com:USERNAME/REPOSITORY.git
</code></pre>

<p>Which means I changed <code>ssh://github.com/USERNAME/REPOSITORY.git</code> to <code>git@github.com:USERNAME/REPOSITORY.git</code> it works.</p>

<p>Stupid error but hope helps someone!</p>
","881060","<git><ssh><ssh-keys><public-key>","576","12","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>Its pretty straight forward. Type the below command </p>

<pre><code>ssh-keygen -t rsa -b 4096 -C ""youremailid@yourdomain.com""
</code></pre>

<p>Generate the SSH key. Open the file and copy the contents. Go to GitHub setting page , and click on SSH key . Click on Add new SSH key, and paste the contents here. That's it :) You shouldn't see the issue again.</p>
","881060","<git><ssh><ssh-keys><public-key>","576","2","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>The easiest solution to this, when you are trying to push to a repository with a different username is:</p>

<pre><code> git remote set-url origin https://USERNAME@github.com/USERNAME/PROJECTNAME.git
</code></pre>
","881060","<git><ssh><ssh-keys><public-key>","576","1","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>This works for me:</p>

<pre><code>ssh-add ~/.ssh/id_rsa
</code></pre>
","881060","<git><ssh><ssh-keys><public-key>","576","22","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>I was struggling with same problem that's what i did and i was able clone the repo. I followed these procedure for <strong>iMac</strong>.</p>

<p><strong>First Step : Checking if we already have the public SSH key.</strong></p>

<ol>
<li>Open Terminal.</li>
<li>Enter <code>ls -al ~/.ssh</code> to see if existing SSH keys are present:</li>
</ol>

<p>Check the directory listing to see if you already have a public SSH key.Default public are one of the following d_dsa.pub,id_ecdsa.pub,id_ed25519.pub,id_rsa.pub</p>

<p>If you don't find then go to step 2 otherwise follow step 3</p>

<p><strong>Step 2 : Generating public SSH key</strong></p>

<ol>
<li>Open Terminal.</li>
<li>Enter followong command with you valid email address that you use for github <code>ssh-keygen -t rsa -b 4096 -C ""your_email@example.com""</code></li>
<li>You will see following in terminal <code>Generating public/private rsa key pair</code>. When it prompts to<code>""Enter a file in which to save the key,""</code> press Enter. This accepts the default file location. When it prompts to <code>Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]</code> Just press enter again.
At the prompt, type a secure passphrase.</li>
<li><code>Enter passphrase (empty for no passphrase): [Type a passphrase]</code> press enter if you don't want to <code>Enter same passphrase again: [Type passphrase again]</code> press enter again</li>
</ol>

<p>This will generate <code>id_rsa.pub</code> </p>

<p><strong>Step 3: Adding your SSH key to the ssh-agent</strong></p>

<ol>
<li>Interminal type <code>eval ""$(ssh-agent -s)""</code></li>
<li>Add your SSH key to the ssh-agent. If you are using an existing SSH
key rather than generating a new SSH key, you'll need to replace
id_rsa in the command with the name of your existing private key
file. Enter this command <code>$ ssh-add -K ~/.ssh/id_rsa</code></li>
</ol>

<p>Now copy the SSH key and also add it to you github account </p>

<ol>
<li>In terminal enter this command with your ssh file name <code>pbcopy &lt;
~/.ssh/id_rsa.pub</code> This will copy the file to your clipboard
Now open you github account Go to <strong>Settings > SSH and GPG keys > New SSH key</strong> Enter title and paste the key from clipboard and save it. Voila you're done. </li>
</ol>
","881060","<git><ssh><ssh-keys><public-key>","576","12","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>I was able to get over this issue by following below steps in my ubuntu system. As i was experimenting with passwordless ssh to the system.</p>

<p>sudo vi /etc/ssh/sshd_config</p>

<p>1) Commented below : 
   #Change to no to disable tunnelled clear text passwords
   #PasswordAuthentication yes
    PasswordAuthentication no ----> commented this. </p>

<p>2) Then restarted the sshd daemon as below.</p>

<p>service sshd restart</p>
","881060","<git><ssh><ssh-keys><public-key>","576","0","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>Steps for Mac:</p>

<ol>
<li>Switch user ( sudo su - jenkins)</li>
<li>Generate key ( ssh-keygen -t rsa -b 4096 -C ""username"") . Username
is one with which you are using with jenkins.</li>
<li>Copy generated public key (cat ~/.ssh/id_rsa.pub).</li>
<li>Paste the key to git account. (Settings -> SSH and CPG keys -> New
ssh keys -> Enter name of the key (can be any) and paste the key to
description).</li>
</ol>
","881060","<git><ssh><ssh-keys><public-key>","576","0","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>This strange error, in my case was a symptom of <code>gnome-keyring-daemon</code> incorrectly naming the key to which it required a password.</p>

<p>I follow the steps outlined here, and entered the password via the terminal. The error, aka the confounding GUI interface, was resolved.
See: <a href=""https://askubuntu.com/questions/3045/how-to-disable-gnome-keyring"">https://askubuntu.com/questions/3045/how-to-disable-gnome-keyring</a></p>
","881060","<git><ssh><ssh-keys><public-key>","576","1","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>Yea seriously if you using git just follow the documentation. Theres a hell of alot of Documentation written on this. You cant go wrong if you follow it.
Just start over if you have to. Link :
<code>https://help.github.com/articles/connecting-to-github-with-ssh/</code></p>
","881060","<git><ssh><ssh-keys><public-key>","576","-4","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>In my case, I have reinstalled ubuntu and the user name is changed from previous. In this case the the generated ssh key also differs from the previous one.</p>

<p>The issue solved by just copy the current ssh public key, in the repository. The key will be available in your user's <code>/home/.ssh/id_rsa.pub</code></p>
","881060","<git><ssh><ssh-keys><public-key>","576","1","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>In my MAC I solved this with:</p>

<pre><code>cp ~/.ssh/github_rsa ~/.ssh/id_rsa
</code></pre>

<p>For some reason my git stopped to find the private key in the <code>github_rsa</code> file. This happened in a specific repo. I mean that in other repositories git kept working normally.</p>

<p>I think it's a bug.</p>

<p>I could find this behavior running <code>ssh -vT git@github.com</code></p>
","881060","<git><ssh><ssh-keys><public-key>","576","1","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<pre><code>$ cd ~
$ cd .ssh
$ chmod 400 id_rsa
</code></pre>
","881060","<git><ssh><ssh-keys><public-key>","576","0","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>Let me share my experience too, </p>

<p>I was trying to clone some project from the Gerrit repo where I got my public keys in account settings.</p>

<p>On the first attempt to make <code>git clone</code> I got the following error:</p>

<pre><code>Unable to negotiate with XX.XX.XX.XX port XXX: no matching key exchange
method found. Their offer: diffie-hellman-group1-sha1
</code></pre>

<p>I figured out that I need to pass the SSH option <code>-oKexAlgorithms=+diffie-hellman-group1-sha1</code> somehow to <code>git clone</code>.</p>

<p>Hopefully <code>GIT_SSH_COMMAND</code> environment variable did the job:</p>

<pre><code>export GIT_SSH_COMMAND=""ssh -oKexAlgorithms=+diffie-hellman-group1-sha1""
</code></pre>

<p>But <code>git clone</code> still didn't start to work.. Now it throws the (on topic):</p>

<pre><code>Permission denied (publickey).
</code></pre>

<p>I got already SSH keys and didn't want to regenerate them. I checked plain SSH connection to the host and it was ok:</p>

<pre><code>****    Welcome to Gerrit Code Review    ****

  Hi XXXXX, you have successfully connected over SSH.

  Unfortunately, interactive shells are disabled.
  To clone a hosted Git repository, use:

  git clone ssh://xxxxx@xx.xx.xx:xxx/REPOSITORY_NAME.git
</code></pre>

<p>I was confused a bit. I started again and turned on the debug for SSH via <code>-vvv</code> option. And I saw the following:</p>

<pre><code>debug1: read_passphrase: can't open /dev/tty: No such device or address
</code></pre>

<p>Possibly, it was an overhead for the <code>GIT_SSH_COMMAND</code> env variable - my key was secured with passphrase (and I entered it when I was checking the login to the git repo host).</p>

<p>So, I decided to get rid of the phasphrase then. A simple command helped me:</p>

<pre><code>ssh-keygen -p
</code></pre>

<p>Then I entered my passphrase for the ""old passphrase"" and just hit <kbd>ENTER</kbd> twice on the ""new passphare"" to leave it empty i.e. with no passphrase at all and to confirm my choice.</p>

<p>After that I got the freshly cloned repo on my local disk.</p>
","881060","<git><ssh><ssh-keys><public-key>","576","0","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>Got same error report.</p>

<p>Fixed with using HTTP instead. Since I don't want set ""SSH keys"" for a test PC.</p>

<p>Change URL to HTTP when clone:</p>

<pre><code>git clone https://github.com/USERNAME/REPOSITORY.git
</code></pre>

<p><strong>My problem is a little bit different</strong>: I have URL set when adding a existing local repo to remote, by using:</p>

<pre><code>git remote add origin ssh://github.com/USERNAME/REPOSITORY.git
</code></pre>

<p>To fix it, reset URL to HTTP:</p>

<pre><code>git remote set-url origin https://github.com/USERNAME/REPOSITORY.git
</code></pre>

<p>BTW, you may check your URL using command:</p>

<pre><code>git remote -v
origin  https://github.com/USERNAME/REPOSITORY.git (fetch)
origin  https://github.com/USERNAME/REPOSITORY.git (push)
</code></pre>

<p>Hope this will help some one like me. :D</p>
","881060","<git><ssh><ssh-keys><public-key>","576","21","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>I hit this error because I needed to give my present working directory permissions 700:</p>

<pre><code>chmod -R 700 /home/ec2-user/
</code></pre>
","881060","<git><ssh><ssh-keys><public-key>","576","2","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>Execute the terminal as admin.</p>

<p>If the terminal can't see your .ssh it will return that error.</p>
","881060","<git><ssh><ssh-keys><public-key>","576","0","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"2643502","How to solve Permission denied (publickey) error when using Git?","<p>I'm on Mac Snow Leopard and I just installed <code>git</code>.</p>

<p>I just tried </p>

<pre><code>git clone git@thechaw.com:cakebook.git
</code></pre>

<p>but that gives me this error:</p>

<pre><code>Initialized empty Git repository in `/Users/username/Documents/cakebook/.git/`
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>What am I missing?<br>
I've also tried doing <code>ssh-keygen</code> with no passphase but still same error.</p>
","<p>First of all, I recommend checking some standard things like:</p>

<ul>
<li><strong>login as the correct user</strong> in your system,</li>
<li>have the <strong>right private key in the right location</strong> in your system,</li>
<li>try to connect with the correct <strong>username</strong>, <strong>hostname</strong>, and <strong>port</strong>,</li>
<li>have <strong>the public key in the right location (and for the right user)</strong> in the external server,</li>
<li><strong>restarted the ssh service</strong> at your computer:</li>
</ul>

<pre>
service ssh restart
</pre>

<p>It was enough for me.</p>
","881060","<git><ssh><ssh-keys><public-key>","576","0","37","2019-08-22 20:30:29","2643584","2","220","4802075","","2018-11-19 09:57:18","2010-04-15 07:46:34",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>Listing a public key in .ssh/authorized_keys is necessary but not sufficient for sshd (server) to accept it.  If your private key is passphrase-protected, you'll need to give ssh (client) the passphrase every time.  Or you can use ssh-agent, or a gnome equivalent.</p>

<p>Your UPDATE'd trace is consistent with a passphrase-protected private key.  See ssh-agent, or ssh-keygen -p.</p>
","544065","<ssh><public-key><authorized-keys>","425","7","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>You need to verify the permissions of the <code>authorized_keys</code> file and the folder / parent folders in which it is located.</p>

<pre><code>chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
</code></pre>

<p>For more information see <a href=""https://web.archive.org/web/20140327182105/http://www.openssh.org/faq.html#3.14"" rel=""noreferrer"">this page</a>.</p>

<p>You may also need to change/verify the permissions of your home directory to remove write access for the group and others.</p>

<pre><code>chmod go-w ~
</code></pre>
","544065","<ssh><public-key><authorized-keys>","425","1036","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>Beware that SELinux can trigger this error as well, even if all permissions seem to be OK. Disabling it did the trick for me (insert usual disclaimers about disabling it).</p>
","544065","<ssh><public-key><authorized-keys>","425","7","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>SELinux can also cause authorized_keys not to work. Especially for root in CentOS 6 and 7. No need to disable it though. Once you've verified your permissions are correct, you can fix this like so:</p>

<pre><code>chmod 700 /root/.ssh
chmod 600 /root/.ssh/authorized_keys
restorecon -R -v /root/.ssh
</code></pre>
","544065","<ssh><public-key><authorized-keys>","425","148","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>Try ""ssh-add"" which worked for me.</p>
","544065","<ssh><public-key><authorized-keys>","425","3","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>Also be sure your home directory is not writeable by others</p>

<pre><code>chmod g-w,o-w /home/USERNAME
</code></pre>

<p>Answer is stolen from <a href=""https://superuser.com/questions/215504/permissions-on-private-key-in-ssh-folder/527397#527397?newreg=aaa3c1de0863490a8139c8a4363c07bd#answer-527397"">here</a> </p>
","544065","<ssh><public-key><authorized-keys>","425","35","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>Write command:</p>

<pre><code>chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
</code></pre>

<p>After you do this, make sure your dir is like that:</p>

<pre><code>drwx------ 2 lab lab 4.0K Mar 13 08:33 .
drwx------ 8 lab lab 4.0K Mar 13 08:07 ..
-rw------- 1 lab lab  436 Mar 13 08:33 authorized_keys
-rw------- 1 lab lab 1.7K Mar 13 07:35 id_rsa
-rw-r--r-- 1 lab lab  413 Mar 13 07:35 id_rsa.pub
</code></pre>
","544065","<ssh><public-key><authorized-keys>","425","4","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>setting <strong>ssh authorized_keys</strong> seem to be simple but hides some traps I'm trying to figure</p>

<p>-- SERVER --</p>

<p>in <strong>/etc/ssh/sshd_config</strong> set  <code>passwordAuthentication yes</code> to let server temporary accept password authentication</p>

<p>-- CLIENT -- </p>

<blockquote>
  <p>consider  <a href=""https://www.cygwin.com/"" rel=""noreferrer"">cygwin</a> as linux emulation and install &amp; run openssh</p>
</blockquote>

<p><strong>1.</strong>  generate private and public keys (client side)
<code># ssh-keygen</code></p>

<p>here pressing just ENTER you get <strong><em>DEFAULT</em></strong>
2 files ""<strong>id_rsa</strong>"" and ""<strong>id_rsa.pub</strong>"" in <strong>~/.ssh/</strong> but if you give a <strong>name_for_the_key</strong> the generated files are saved in your <strong>pwd</strong> </p>

<p><strong>2.</strong> place the <strong>your_key.pub</strong> to target machine <code>ssh-copy-id user_name@host_name</code></p>

<p>if  you didn't create default key this is the first step to go wrong 
... you should use</p>

<p><code>ssh-copy-id -i path/to/key_name.pub user_name@host_name</code></p>

<p><strong>3.</strong> logging <code>ssh user_name@host_name</code> will  work only for default id_rsa so here is 2nd trap for you need to <code>ssh -i path/to/key_name user@host</code></p>

<p>(use <strong>ssh -v ...</strong> option to see what is happening)</p>

<p>If <strong>server still asks for password</strong> then  you gave smth.  to <strong>Enter passphrase:</strong> when you've  created keys ( so it's normal)  </p>

<p>if ssh is not listening default port 22 must use <code>ssh -p port_nr</code> </p>

<p>-- SERVER -----</p>

<p><strong>4.</strong>  modify  <strong>/etc/ssh/sshd_config</strong> to have</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile  %h/.ssh/authorized_keys
</code></pre>

<p>(uncoment if case)</p>

<p>This tells ssh to accept authorized_keys and look in user home directory for key_name sting written  in .ssh/authorized_keys file</p>

<p><strong>5</strong>  set permissions in target machine</p>

<pre><code>chmod 755 ~/.ssh
chmod 600 ~/.ssh/authorized_keys
</code></pre>

<p>Also turn off pass auth </p>

<p><code>passwordAuthentication no</code> </p>

<p>to close the gate to all ssh root/admin/....@your_domain  attempts</p>

<p><strong>6</strong> ensure ownership and group ownership of all non-root home directories are appropriate.</p>

<pre><code>chown -R ~ usernamehere
chgrp -R ~/.ssh/ user 
</code></pre>

<p>===============================================</p>

<p><strong>7.</strong> consider the excelent  <a href=""http://www.fail2ban.org"" rel=""noreferrer"">http://www.fail2ban.org</a></p>

<p><strong>8.</strong> extra
<a href=""https://stackoverflow.com/a/40619202/953374"">ssh TUNNEL</a> to access a MySQL (bind = 127.0.0.1) sever</p>
","544065","<ssh><public-key><authorized-keys>","425","95","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>the desperate may also make sure they don't have extra newlines in the authorized_keys file due to copying id_rsa.pub text out of a confused terminal.</p>
","544065","<ssh><public-key><authorized-keys>","425","9","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>The thing that did the trick for me finally was to make sure that the <strong>owner/group</strong> were not root but user:</p>

<pre><code>chown -R ~/.ssh/ user
chgrp -R ~/.ssh/ user 
</code></pre>
","544065","<ssh><public-key><authorized-keys>","425","5","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>Make sure that the target user has a password set. Run <code>passwd username</code> to set one. This was required for me even if password SSH login was disabled.</p>
","544065","<ssh><public-key><authorized-keys>","425","2","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>on that note, make sure you sshd config has -;</p>

<pre><code>PermitRootLogin without-password
</code></pre>

<p>set as the above, then restart sshd(/etc/init.d/sshd restart)</p>

<p>log-out and  try log-in in again!</p>

<p>default I believe is -;</p>

<pre><code>PermitRootLogin no
</code></pre>
","544065","<ssh><public-key><authorized-keys>","425","0","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>I issued <code>sudo chmod 700 ~/.ssh</code> and <code>chmod 600 ~/.ssh/authorized_keys</code> and <code>chmod go-w $HOME $HOME/.ssh</code> from above and it fixed my problem on a CentOS7 box that I had messed up the permissions on while trying to get samba shares working.  Thanks</p>
","544065","<ssh><public-key><authorized-keys>","425","1","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>It seems like a permission problem. Usually it happens if the permission of some file/directory is not correctly set up. In most case they are <code>~/.ssh</code> and <code>~/.ssh/*</code>. In my case they are <code>/home/xxx</code>.</p>

<p>You can changing the log level of sshd by modifying <code>/etc/ssh/sshd_config</code>(search <code>LogLevel</code>, set it to <code>DEBUG</code>), then check the output in <code>/var/log/auth.log</code> to see what happened exactly.</p>
","544065","<ssh><public-key><authorized-keys>","425","1","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>this solves my problem</p>

<blockquote>
  <blockquote>
    <p>ssh-agent bash</p>
    
    <p>ssh-add</p>
  </blockquote>
</blockquote>
","544065","<ssh><public-key><authorized-keys>","425","2","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>user is your username</p>

<pre><code>mkdir -p /home/user/.ssh
ssh-keygen -t rsa
touch /home/user/.ssh/authorized_keys
touch /home/user/.ssh/known_hosts
chown -R user:user /home/user/.ssh
chmod 700 /home/user/.ssh
chmod 600 /home/user/.ssh/id*
chmod 644 /home/user/.ssh/id*.pub
chmod 644 /home/user/.ssh/authorized_keys
chmod 644 /home/user/.ssh/known_hosts
</code></pre>
","544065","<ssh><public-key><authorized-keys>","425","7","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>In my case it's because the user's group is not set in AllowGroups of config file /etc/ssh/sshd_config. After adding it everything works fine. </p>
","544065","<ssh><public-key><authorized-keys>","425","0","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>My problem was a modified AuthorizedKeysFile, when the automation to populate /etc/ssh/authorized_keys had not yet been run.</p>

<pre><code>$sudo grep AuthorizedKeysFile /etc/ssh/sshd_config
#AuthorizedKeysFile .ssh/authorized_keys
AuthorizedKeysFile  /etc/ssh/authorized_keys/%u
</code></pre>
","544065","<ssh><public-key><authorized-keys>","425","1","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>Another tip to remember. Since v7.0 OpenSSH <a href=""https://www.gentoo.org/support/news-items/2015-08-13-openssh-weak-keys.html"" rel=""nofollow"">disables</a> DSS/DSA ssh keys by default due to their inherit weakness. So if you have OpenSSH v7.0+, make sure your key is not <code>ssh-dss</code>.</p>

<blockquote>
  <p>If you are stuck with DSA keys, you can re-enable support locally by
  updating your <code>sshd_config</code> and <code>~/.ssh/config</code> files with lines like so: <code>PubkeyAcceptedKeyTypes=+ssh-dss</code></p>
</blockquote>
","544065","<ssh><public-key><authorized-keys>","425","3","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>I have the home directory in a non-standard location and in <code>sshd</code> logs I have this line:</p>

<pre><code>Could not open authorized keys '/data/home/user1/.ssh/authorized_keys': Permission denied
</code></pre>

<p>even if all permissions were just fine (see the other answers).</p>

<p>I have found a solution here: <a href=""http://arstechnica.com/civis/viewtopic.php?p=25813191&amp;sid=0876f069ec2aa5fdcd691a2e2e7242c2#p25813191"" rel=""nofollow noreferrer"">http://arstechnica.com/civis/viewtopic.php?p=25813191&amp;sid=0876f069ec2aa5fdcd691a2e2e7242c2#p25813191</a></p>

<p>In my particular case:</p>

<ul>
<li><p>added a new line in <code>/etc/selinux/targeted/contexts/files/file_contexts.homedirs</code>:</p>

<ul>
<li><p>this is the original line for regular home directories:</p>

<p><code>/home/[^/]*/\.ssh(/.*)? unconfined_u:object_r:ssh_home_t:s0</code></p></li>
<li><p>this is my new line:</p>

<p><code>/data/home/[^/]*/\.ssh(/.*)? unconfined_u:object_r:ssh_home_t:s0</code></p></li>
</ul></li>
<li><p>followed by a <code>restorecon -r /data/</code> and a <code>sshd</code> restart</p></li>
</ul>
","544065","<ssh><public-key><authorized-keys>","425","0","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>Another issue you have to take care. If your generated file is not default 
<code>id_rsa</code>  and  <code>id_rsa.pub</code></p>

<p>You have to create .ssh/config file and define manually which id file you are going to use with the connection.</p>

<p>Example is here:</p>

<pre><code>host remote_host_name
hostname 172.xx.xx.xx
user my_user
IdentityFile /home/my_user/.ssh/my_user_custom.pub
</code></pre>
","544065","<ssh><public-key><authorized-keys>","425","2","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>In my case I needed to put my <code>authorized_keys</code> file in <code>.openssh</code>. </p>

<p>This location is specified in <code>/etc/ssh/sshd_config</code> under the option <code>AuthorizedKeysFile  %h/.ssh/authorized_keys</code>.</p>
","544065","<ssh><public-key><authorized-keys>","425","3","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>Make sure you've copied the whole public key to <code>authorized_keys</code>; the <code>ssh rsa</code> prefix is necessary for the key to work.</p>
","544065","<ssh><public-key><authorized-keys>","425","1","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>Just look on <strong>/var/log/auth.log</strong> on the <strong>server</strong>. Setting additional verbosity with <strong>-vv</strong> on the client side won't help, because the server is unlikely to offer too much information to a possible attacker. </p>
","544065","<ssh><public-key><authorized-keys>","425","1","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>you need to verify the properties of the files.
to assign the required property use:</p>

<pre><code>$ chmod 600 ~/.ssh/sshKey
$ chmod 644 ~/.ssh/sshKey.pub
</code></pre>
","544065","<ssh><public-key><authorized-keys>","425","1","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>I had this problem and none of the other answers solved it, although of course the other answers <em>are</em> correct.</p>

<p>In my case, turned out that the <code>/root</code> directory itself (not e.g. <code>/root/.ssh</code>) had the wrong permissions.  I needed:</p>

<pre><code>chown root.root /root
chmod 700 /root
</code></pre>

<p>Of course, those permissions should be something like that (maybe <code>chmod 770</code>) regardless.  However, it specifically prevented <code>sshd</code> from working, even though <code>/root/.ssh</code> and <code>/root/.ssh/authorized_keys</code> both had correct permissions and owners.</p>
","544065","<ssh><public-key><authorized-keys>","425","0","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>Look at <code>/var/log/auth.log</code> on the server for <code>sshd</code> auth errors.</p>

<p>If all else fails, then run the <code>sshd</code> server in debug mode:</p>

<pre><code>sudo /usr/sbin/sshd -ddd -p 2200
</code></pre>

<p>Then connect from the the client:</p>

<pre><code>ssh user@host -p 2200
</code></pre>

<p>In my case I found the error section at the end:</p>

<pre><code>    debug1: userauth_pubkey: test whether pkalg/pkblob are acceptable for RSA SHA256:6bL+waAtghY5BOaY9i+pIX9wHJHvY4r/mOh2YaL9RvQ [preauth]
==&gt; debug2: userauth_pubkey: disabled because of invalid user [preauth]
    debug2: userauth_pubkey: authenticated 0 pkalg ssh-rsa [preauth]
    debug3: userauth_finish: failure partial=0 next methods=""publickey,password"" [preauth]
    debug3: send packet: type 51 [preauth]
    debug3: receive packet: type 50 [preauth]
</code></pre>

<p>With this info I realized that my <code>sshd_config</code> was restricting logins to members of the <code>ssh</code> group. The following command fixed this permission error:</p>

<pre><code>sudo usermod -a -G ssh NEW_USER
</code></pre>
","544065","<ssh><public-key><authorized-keys>","425","0","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"6377009","Adding public key to ~/.ssh/authorized_keys does not log me in automatically","<p>I added the public ssh key to the authorized_keys file.  <code>ssh localhost</code> should log me in without asking for the password.  </p>

<p>I did that and tried typing <code>ssh localhost</code>, but it still asks me to type in the password. Is there any other setting that I have to go through to make it work?</p>

<p>I have followed instruction for changing permissions:</p>

<p>Below is the result if I do <code>ssh -v localhost</code></p>

<pre><code>debug1: Reading configuration data /home/john/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to localhost [127.0.0.1] port 22.
debug1: Connection established.
debug1: identity file /home/john/.ssh/identity type 1
debug1: identity file /home/john/.ssh/id_rsa type -1
debug1: identity file /home/john/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.7p1 Debian-8ubuntu3
debug1: match: OpenSSH_4.7p1 Debian-8ubuntu3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'localhost' is known and matches the RSA host key.
debug1: Found key in /home/john/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering public key: /home/john/.ssh/identity
debug1: Server accepts key: pkalg ssh-rsa blen 149
debug1: PEM_read_PrivateKey failed
debug1: read PEM private key done: type &lt;unknown&gt;
</code></pre>

<p>Then it asks for passphase after the above log.  Why isn't it logging me in without a password?</p>
","<p>I had this problem when I added the group of the login user to another user.
Let's say there is an ssh-login user called userA and a non-ssh-login user userB. userA has the group userA as well. I modified userB to have the group userA as well. The lead to the the described behaviour, so that userA was not able to login without a prompt.
After I removed the group userA from userB, the login without prompt worked again.</p>
","544065","<ssh><public-key><authorized-keys>","425","0","28","2019-05-27 16:52:22","6377073","1","154","445131","","2013-11-26 19:16:44","2011-06-16 18:50:49",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>I had to add my public key to github. <a href=""https://help.github.com/articles/generating-ssh-keys"" rel=""noreferrer"">https://help.github.com/articles/generating-ssh-keys</a></p>
","310113","<git><github><public-key>","197","124","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>A good one if you have installed git on your computer:</p>

<p><a href=""http://help.github.com/mac-set-up-git/"" rel=""nofollow"">http://help.github.com/mac-set-up-git/</a></p>
","310113","<git><github><public-key>","197","2","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>In my case, I had to setup the public key for another user, as I already had one for my main user. once I switched users and performed the commands in the link above I was able to perform the setup for my test server without a problem.</p>
","310113","<git><github><public-key>","197","6","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p><strong>Yes, It's a public key Problem.</strong>
I'm a <strong>windows</strong> user,and the page below help me resolve this problem.</p>

<blockquote>
  <p><a href=""http://help.github.com/win-set-up-git/"" rel=""noreferrer"">http://help.github.com/win-set-up-git/</a></p>
</blockquote>

<p>more precisely this link should be helpful </p>

<blockquote>
  <p><a href=""https://help.github.com/articles/error-permission-denied-publickey"" rel=""noreferrer"">https://help.github.com/articles/error-permission-denied-publickey</a></p>
</blockquote>
","310113","<git><github><public-key>","197","28","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>Type the following command using your username and repository name:</p>

<pre><code>git clone https://github.com/{user name}/{repo name}
</code></pre>

<p>in Ubuntu this works perfectly.</p>
","310113","<git><github><public-key>","197","18","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>I also have this problem today.
The solution is setting your ""ssh key"".
Click the url below, follow the steps, then you will sovle it.</p>

<p><a href=""http://github.com/guides/providing-your-ssh-key"" rel=""nofollow"">http://github.com/guides/providing-your-ssh-key</a></p>
","310113","<git><github><public-key>","197","-2","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>You need to set up SSH keys.</p>

<p><a href=""https://help.github.com/articles/generating-ssh-keys"" rel=""nofollow"">This GitHub page</a> explains how to generate keys.</p>

<p>If you have an existing key, you copy <code>$HOME/.ssh/id_rsa.pub</code> and paste it into <a href=""https://github.com/settings/ssh"" rel=""nofollow"">the GitHub SSH settings page</a>.</p>
","310113","<git><github><public-key>","197","-1","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>I had this problem, but none of the solutions above worked. I could clone and fetch but couldn't push. Eventually, I figured out the problem was in the <code>url</code> in my <code>.git/config</code>, it should be:</p>

<pre><code>git@github.com:&lt;username&gt;/&lt;project&gt;
</code></pre>

<p>(not <code>ssh://github.com/&lt;username&gt;/&lt;project&gt;.git</code> or <code>https://github.com/&lt;username&gt;/&lt;project&gt;.git</code>).</p>
","310113","<git><github><public-key>","197","5","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>I got a solution after a long time in tutorials.</p>

<p>I followed the github tutorial on this link -> <a href=""https://help.github.com/articles/error-permission-denied-publickey"" rel=""noreferrer"">https://help.github.com/articles/error-permission-denied-publickey</a> and I was able to connect in every step.
But when I was trying to <strong>git push -u origin master</strong> I got this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal: Could not read from remote
  repository.</p>
  
  <p>Please make sure you have the correct access rights</p>
</blockquote>

<p><strong>Thats how I`ve fixed it!!</strong>
Go to the project directory using the Terminal and check it out</p>

<pre><code>$git remote -v
</code></pre>

<p>You will get something like this:</p>

<pre><code>origin  ssh://git@github.com/yourGithubUserName/yourRepo.git (fetch)
origin  ssh://git@github.com/yourGithubUserName/yourRepo.git (push)
</code></pre>

<p>If you are using anything different then <strong>git@github.com</strong>, open the config file on git directory by typing the command:</p>

<pre><code>vi .git/config
</code></pre>

<p>And configure the line</p>

<pre><code>[remote ""origin""]

url = ssh://git@github.com/yourGithubUserName/yourRepo.git

fetch = +refs/heads/*:refs/remotes/origin/
</code></pre>
","310113","<git><github><public-key>","197","16","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>I tried the solutions mentioned but still failed.
I found the solution that finally worked for me <a href=""http://kirk.vangorkom.org/github-permission-denied-publickey-error-work/"" rel=""nofollow"">here</a> - removing then re-adding the remote link</p>
","310113","<git><github><public-key>","197","-3","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>Adding public key is the solution.For generating ssh keys: <a href=""https://help.github.com/articles/generating-ssh-keys"" rel=""nofollow"">https://help.github.com/articles/generating-ssh-keys</a>  has step by step instructions.</p>

<p>However, the problem can persist if key is not generated in the correct way.
I found this to be a useful link too: <a href=""https://help.github.com/articles/error-permission-denied-publickey"" rel=""nofollow"">https://help.github.com/articles/error-permission-denied-publickey</a></p>

<p>In my case the problem was that I was generating the ssh-key without using sudo but when using git commands I needed to use sudo.
This comment in the above link ""If you generate SSH keys without sudo, then when you try to use a command like sudo git push, you won't be using the SSH key you generated."" helped me.</p>

<p>So, the solution was that I had to use sudo with both key generating commands and git commands.
Or for others, when they don't need sudo anywhere, do not use it in any of the two steps. (key generating and git commands).</p>
","310113","<git><github><public-key>","197","1","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>A quick way to fix this if you're using a Mac is to sign out of the OSX app and log back in.</p>
","310113","<git><github><public-key>","197","-1","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>For me the problem was the execution of clone via sudo.</p>

<p>If you clone to a directory where you have user permission ( /home/user/git) it will work fine.</p>

<p>(Explanation: Running a command as superuser will not work with the same public key as running a command as user. Therefore Github refused the connection.) </p>

<p>This solution requires a SSH key already to be set up: <a href=""https://help.github.com/articles/generating-ssh-keys"" rel=""noreferrer"">https://help.github.com/articles/generating-ssh-keys</a></p>
","310113","<git><github><public-key>","197","24","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>I faced a similar issue when running SSH or Git Clone in Windows. Following findings helps to solve my problem:</p>

<ul>
<li>When you run “rhc setup” or other ssh methods to generate ssh key, it will create the private key file id_rsa in .ssh folder in your home folder, default is C:\User\UserID</li>
<li>Git for windows has its own .ssh folder in its installation directory. When you run git/ssh, it will look for private key file id_rsa in this folder</li>
<li>Solved the problem by copying id_rsa from the home folder .ssh folder to the .ssh folder in the git installation directory</li>
</ul>

<p>Also, I think there  a way to “tell” git to use the default .ssh folder in home folder but still need to figure out how. </p>
","310113","<git><github><public-key>","197","1","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>after you created the RSA key pair, you must to add it to SSH using:</p>

<pre><code>ssh-add ~/.ssh/id_rsa
</code></pre>

<p>or wherever you created your rsa key pair.</p>
","310113","<git><github><public-key>","197","28","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>Given that none of the answers here worked for me, I finally tracked down my issue connecting to Bitbucket (or Github, doesn't matter in this case) with ssh -vT git@bitbucket.org.</p>

<p>In my case, the failure was due to using a DSA key instead of RSA, and apparently my SSH client no longer allows that.</p>

<blockquote>
  <p>debug1: Skipping ssh-dss key /c/Users/USER/.ssh/id_dsa for not in PubkeyAcceptedKeyTypes</p>
</blockquote>

<p>The solution was to add this to .ssh/config:</p>

<pre><code>Host *
    PubkeyAcceptedKeyTypes +ssh-dss
</code></pre>

<p>This elegantly appends the ssh-dss key type to all existing accepted public key types and after this was done, git can now ssh into Bitbucket no problem.</p>
","310113","<git><github><public-key>","197","5","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>My issue was that I was trying to give my ssh key a <strong>SPECIFIC NAME</strong> every time I entered <code>ssh-keygen</code> on my mac terminal. </p>

<p>I solved the issue by just leaving the name that ""ssh-keygen"" generates = <code>id_rsa</code>. You'll end up with 2 keys in your .ssh folder on a mac, <code>id_rsa</code>, which is your private key, and the <code>id_rsa.pub</code>, which is your public key. Then I copied and saved the code from <code>id_rsa.pub</code> into my GitHub account settings, and that was it. Problem solved.</p>
","310113","<git><github><public-key>","197","3","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>I had the same issue on windows. I switched from SSH to HTTPS and ran a Git PUSH.</p>

<pre><code>git push -u origin master
Username for 'https://github.com': &lt;Github login email&gt;
Password for &lt;Github login&gt;: xxx
</code></pre>

<p>Successful! hope this helps.</p>
","310113","<git><github><public-key>","197","-4","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>For me, it worked like this: </p>

<p>In GitHub I changed the <code>ssh</code> link to <code>https</code>, and then gave the following commands:</p>

<pre><code>$ git init
$ git remote add origin https:...
$ git add .
$ git commit -m ""first commit""
$ git push origin master
</code></pre>
","310113","<git><github><public-key>","197","0","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>My problem was that it didn't work with a passphrase on my private key.</p>

<p>Hope that helps someone.</p>
","310113","<git><github><public-key>","197","-1","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>Use ubuntu on windows store</p>

<blockquote>
  <p>windows subsystem for linux</p>
</blockquote>

<p>, your git push will work across different accounts.</p>
","310113","<git><github><public-key>","197","0","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>If you are using a linux machine then check,</p>

<ul>
<li>do you have Openssh installed</li>
<li>if you do, then do you have an existing public key otherwise you'll have to generate one.</li>
<li>is your public key added to your github account.</li>
</ul>

<p>Generating new SSH keys and adding them to my Github account solved my problem.
You can look into this page for more details. <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""nofollow noreferrer"">GitHelp</a>.</p>
","310113","<git><github><public-key>","197","0","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"3617113","GitHub: Permission denied (publickey). fatal: The remote end hung up unexpectedly","<p>I have followed these instructions below to upload a project. </p>

<p>Global setup:</p>

<pre><code> Download and install Git
  git config --global user.name ""Your Name""
  git config --global user.email tirenga@gmail.com
  Add your public key


Next steps:

  mkdir tirengarfio
  cd tirengarfio
  git init
  touch README
  git add README
  git commit -m 'first commit'
  git remote add origin git@github.com:tirenga/tirenga.git
  git push origin master
</code></pre>

<p>But I get this error:</p>

<blockquote>
  <p>Permission denied (publickey). fatal:
  The remote end hung up unexpectedly</p>
</blockquote>
","<p>You can try change your type connection to branch from ssh to https.</p>

<ol>
<li><code>nano project_path/.git/config</code></li>
<li>Replace <code>git@github.com:username/repository.git</code> to <code>https://username@github.com/username/repository_name.git</code></li>
<li>Save file <code>ctrl</code> + <code>o</code></li>
</ol>

<p>After that you can try <code>git pull</code> without publickey</p>
","310113","<git><github><public-key>","197","0","23","2018-10-24 20:20:52","25884909","0","53","248959","","2016-10-24 15:26:36","2010-09-01 10:31:44",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<p>Check the permissions on the .pem file...openssh usually doesn't like world-readable private keys, and will fail (iir, scp doesn't do a great job of providing this feedback to the user).</p>

<p>Can you simply ssh with that key to your AWS host?</p>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","0","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<p>You should be on you local machine to try the above scp command.</p>

<p>On your local machine try:</p>

<pre><code>scp -i ~/Downloads/myAmazonKey.pem ~/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","12","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<p>I would use:</p>

<p><code>scp -i ""path to .pem file"" ""file to be copeide from local machine"" username@amazoninstance: 'destination folder to copy file on remote machine'</code></p>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","-1","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<p>Try specifying the user to be <code>ec2-user</code>, e.g.</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz ec2-user@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>See <a href=""http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html"">Connecting to Linux/UNIX Instances Using SSH</a>.</p>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","347","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<p>second directory is your target destination, don't use server name there. In other words, you don't need to mention machine name for the machine you're currently in.</p>

<pre><code>scp -i /path/to/your/.pemkey -r /copy/from/path user@server:/copy/to/path
</code></pre>

<p>-r if it's a directory.</p>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","28","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<p>Your key must not be publicly viewable for SSH to work. Use this command if needed:</p>

<pre><code>chmod 400 yourPublicKeyFile.pem
</code></pre>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","17","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<pre><code>scp -i ~/path to pem file/file.pem -r(for directory) /PATH OF LOCAL/localfile user@hostname:PATH OF SERVER/serverdirectory
</code></pre>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","5","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<p>First you should change the mode of <code>.pem</code> file from read and write mode to read only mode. This can be done just by a single command in terminal <code>sudo chmod 400 your_public_key.pem</code></p>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","0","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<p>I had exactly same problem, my solution was to</p>

<p><code>scp -i /path/pem -r /path/file/ ec2-user@public aws dns name:</code> (leave it blank here) </p>

<p>once you done this part, get into ssh server and mv file to desired location</p>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","6","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<p>I tried all the suggestions mentioned above and nothing worked. I terminated the current instance, launched another one and repeated the same exact process. This time no problems. Sometimes it might be the remote ami's fault. </p>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","0","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<p>The process of using SCP to copy files from a local machine to an AWS EC2 Linux instance is covered step-by-step (including the points mentioned below) in <a href=""https://youtu.be/GFTsU_XRXEg"" rel=""nofollow noreferrer"">this video</a>.</p>

<p>To correct this particular issue with using SCP:</p>

<ol>
<li><p>You need to specify the correct Linux user. From <a href=""http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html"" rel=""nofollow noreferrer"">Amazon</a>:</p>

<ul>
<li>For Amazon Linux, the user name is ec2-user. </li>
<li>For RHEL, the user name is ec2-user or root. </li>
<li>For Ubuntu, the user name is ubuntu or root. </li>
<li>For Centos, the user name is centos. </li>
<li>For Fedora, the user name is ec2-user. </li>
<li>For SUSE, the user name is ec2-user or root. </li>
<li>Otherwise, if ec2-user and root don't work, check with your AMI provider. </li>
</ul></li>
<li><p>Your private key must not be publicly visible. Run the following command so that only the root user can read the file.</p>

<pre><code>chmod 400 /path/to/yourKeyFile.pem
</code></pre></li>
</ol>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","1","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<p>Here are the details of what works for an <strong>EC2</strong> instance:</p>

<pre><code>scp -i /path/to/whatever.pem /users/me/path-to-file ec2-user@ec2-55-55-555-555.compute-1.amazonaws.com:~
</code></pre>

<p>Few notes for beginning:</p>

<ol>
<li>Note the spaces between the three parameters given after the <code>-i</code></li>
<li><code>scp</code> stands for secure copy protocol. Knowing the words makes it easier to remember the command.</li>
<li><code>-i</code> dictates that you need to give the <code>.pem</code> file as the next param. If there is no <code>-i</code>, than you do not need a <code>.pem</code>.</li>
<li>Note the <code>:~</code> at the end of the destination for the EC2 instance. </li>
</ol>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","8","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<p>Below SCP format works for me</p>

<pre><code>scp -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com:~/SampleFile.txt ~/SampleFile2.txt
</code></pre>

<p><strong>SampleFile.txt</strong>: It will be the path from your root directory(In my case, /home/ubuntu). in my case the file which I wanted to download was at /var/www</p>

<p><strong>SampleFile2.txt</strong>: It will be path of your machine's root path(In my case, /home/MyPCUserName)</p>

<p><strong>So, I have to write below command</strong></p>

<pre><code>scp -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com:~/../../var/www/Filename.zip ~/Downloads
</code></pre>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","2","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"11388014","Using scp to copy a file to Amazon EC2 instance?","<p>I am trying to use my Mac Terminal to scp a file from Downloads (phpMyAdmin I downloaded online) to my Amazon EC2 instance. </p>

<p>The command I used was:</p>

<pre><code>scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>The error I got: 
<strong>Warning: Identity file myAmazonKey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Both my myAmazonkey.pem and phpMyAdmin-3.4.5-all-languages.tar.gz are in Downloads, so then I tried </p>

<pre><code>scp -i /Users/Hello_Kitty22/Downloads/myAmazonKey.pem /Users/Hello_Kitty22/Downloads/phpMyAdmin-3.4.5-all-languages.tar.gz  hk22@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
</code></pre>

<p>and the error I got:
<strong>Warning: Identity file /User/Hello_Kitty22/Downloads/myAmazonkey.pem not accessible: No such file or directory.
Permission denied (publickey).
lost connection</strong></p>

<p>Can anyone please tell me how to fix my problem?</p>

<p>p.s. there is a similar post: <a href=""https://stackoverflow.com/questions/6558080/scp-secure-copy-to-ec2-instance-without-password"">scp (secure copy) to ec2 instance without password</a>
but it doesn't answer my question. </p>
","<p><strong>Send file from Local to Server:</strong></p>

<blockquote>
  <p>scp -i .ssh/awsinstance.pem my_local_file
  ubuntu@XX.XXX.XXX.XXX:/home/ubuntu</p>
</blockquote>

<p><strong>Download file from Server to Local:</strong></p>

<blockquote>
  <p>scp -i .ssh/awsinstance.pem 
  ubuntu@XX.XXX.XXX.XXX:/home/ubuntu/server_file .</p>
</blockquote>
","258003","<amazon-ec2><terminal><copy><scp><public-key>","180","2","14","2019-03-14 10:33:39","13925773","1","77","-1","","2017-05-23 11:47:26","2012-07-09 01:02:53",""
"1556056","Permission denied (publickey,keyboard-interactive)","<p>I tried to connect to planetlab node using ssh. It throws me error like Permission denied (publickey,keyboard-interactive). What does this mean?
Here is the verbose of the exception.</p>

<pre><code>&gt; OpenSSH_5.1p1 Debian-5ubuntu1, OpenSSL
&gt; 0.9.8g 19 Oct 2007 debug1: Reading configuration data /etc/ssh/ssh_config
&gt; debug1: Applying options for * debug2:
&gt; ssh_connect: needpriv 0 debug1:
&gt; Connecting to planetlab1.csee.usf.edu
&gt; [131.247.2.241] port 22. debug1:
&gt; Connection established. debug1:
&gt; permanently_set_uid: 0/0 debug3: Not a
&gt; RSA1 key file /home/keven/.ssh/id_rsa.
&gt; debug2: key_type_from_name: unknown
&gt; key type '-----BEGIN' debug3:
&gt; key_read: missing keytype debug2:
&gt; key_type_from_name: unknown key type
&gt; 'Proc-Type:' debug3: key_read: missing
&gt; keytype debug2: key_type_from_name:
&gt; unknown key type 'DEK-Info:' debug3:
&gt; key_read: missing keytype debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug2:
&gt; key_type_from_name: unknown key type
&gt; '-----END' debug3: key_read: missing
&gt; keytype debug1: identity file
&gt; /home/keven/.ssh/id_rsa type 1 debug1:
&gt; Checking blacklist file
&gt; /usr/share/ssh/blacklist.RSA-2048
&gt; debug1: Checking blacklist file
&gt; /etc/ssh/blacklist.RSA-2048 debug1:
&gt; Remote protocol version 2.0, remote
&gt; software version OpenSSH_4.7 debug1:
&gt; match: OpenSSH_4.7 pat OpenSSH_4*
&gt; debug1: Enabling compatibility mode
&gt; for protocol 2.0 debug1: Local version
&gt; string SSH-2.0-OpenSSH_5.1p1
&gt; Debian-5ubuntu1 debug2: fd 3 setting
&gt; O_NONBLOCK debug1: SSH2_MSG_KEXINIT
&gt; sent debug1: SSH2_MSG_KEXINIT received
&gt; debug2: kex_parse_kexinit:
&gt; diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
&gt; debug2: kex_parse_kexinit:
&gt; ssh-rsa,ssh-dss debug2:
&gt; kex_parse_kexinit:
&gt; aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
&gt; debug2: kex_parse_kexinit:
&gt; aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
&gt; debug2: kex_parse_kexinit:
&gt; hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
&gt; debug2: kex_parse_kexinit:
&gt; hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
&gt; debug2: kex_parse_kexinit:
&gt; none,zlib@openssh.com,zlib debug2:
&gt; kex_parse_kexinit:
&gt; none,zlib@openssh.com,zlib debug2:
&gt; kex_parse_kexinit:  debug2:
&gt; kex_parse_kexinit:  debug2:
&gt; kex_parse_kexinit: first_kex_follows 0
&gt; debug2: kex_parse_kexinit: reserved 0 
&gt; debug2: kex_parse_kexinit:
&gt; diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
&gt; debug2: kex_parse_kexinit:
&gt; ssh-rsa,ssh-dss debug2:
&gt; kex_parse_kexinit:
&gt; aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
&gt; debug2: kex_parse_kexinit:
&gt; aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
&gt; debug2: kex_parse_kexinit:
&gt; hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
&gt; debug2: kex_parse_kexinit:
&gt; hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
&gt; debug2: kex_parse_kexinit:
&gt; none,zlib@openssh.com debug2:
&gt; kex_parse_kexinit:
&gt; none,zlib@openssh.com debug2:
&gt; kex_parse_kexinit:  debug2:
&gt; kex_parse_kexinit:  debug2:
&gt; kex_parse_kexinit: first_kex_follows 0
&gt; debug2: kex_parse_kexinit: reserved 0 
&gt; debug2: mac_setup: found hmac-md5
&gt; debug1: kex: server-&gt;client aes128-cbc
&gt; hmac-md5 none debug2: mac_setup: found
&gt; hmac-md5 debug1: kex: client-&gt;server
&gt; aes128-cbc hmac-md5 none debug1:
&gt; SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192)
&gt; sent debug1: expecting
&gt; SSH2_MSG_KEX_DH_GEX_GROUP debug2:
&gt; dh_gen_key: priv key bits set: 128/256
&gt; debug2: bits set: 508/1024 debug1:
&gt; SSH2_MSG_KEX_DH_GEX_INIT sent debug1:
&gt; expecting SSH2_MSG_KEX_DH_GEX_REPLY
&gt; debug3: check_host_in_hostfile:
&gt; filename /root/.ssh/known_hosts
&gt; debug3: check_host_in_hostfile: match
&gt; line 1 debug3: check_host_in_hostfile:
&gt; filename /root/.ssh/known_hosts
&gt; debug3: check_host_in_hostfile: match
&gt; line 2 debug1: Host
&gt; 'planetlab1.csee.usf.edu' is known and
&gt; matches the RSA host key. debug1:
&gt; Found key in /root/.ssh/known_hosts:1
&gt; debug2: bits set: 535/1024 debug1:
&gt; ssh_rsa_verify: signature correct
&gt; debug2: kex_derive_keys debug2:
&gt; set_newkeys: mode 1 debug1:
&gt; SSH2_MSG_NEWKEYS sent debug1:
&gt; expecting SSH2_MSG_NEWKEYS debug2:
&gt; set_newkeys: mode 0 debug1:
&gt; SSH2_MSG_NEWKEYS received debug1:
&gt; SSH2_MSG_SERVICE_REQUEST sent debug2:
&gt; service_accept: ssh-userauth debug1:
&gt; SSH2_MSG_SERVICE_ACCEPT received
&gt; debug2: key: /home/keven/.ssh/id_rsa
&gt; (0xb80c9878) debug1: Authentications
&gt; that can continue:
&gt; publickey,keyboard-interactive debug3:
&gt; start over, passed a different list
&gt; publickey,keyboard-interactive debug3:
&gt; preferred
&gt; gssapi-keyex,gssapi-with-mic,gssapi,publickey,keyboard-interactive,password
&gt; debug3: authmethod_lookup publickey
&gt; debug3: remaining preferred:
&gt; keyboard-interactive,password debug3:
&gt; authmethod_is_enabled publickey
&gt; debug1: Next authentication method:
&gt; publickey debug1: Offering public key:
&gt; /home/keven/.ssh/id_rsa debug3:
&gt; send_pubkey_test debug2: we sent a
&gt; publickey packet, wait for reply
&gt; debug1: Authentications that can
&gt; continue:
&gt; publickey,keyboard-interactive debug2:
&gt; we did not send a packet, disable
&gt; method debug3: authmethod_lookup
&gt; keyboard-interactive debug3: remaining
&gt; preferred: password debug3:
&gt; authmethod_is_enabled
&gt; keyboard-interactive debug1: Next
&gt; authentication method:
&gt; keyboard-interactive debug2:
&gt; userauth_kbdint debug2: we sent a
&gt; keyboard-interactive packet, wait for
&gt; reply debug1: Authentications that can
&gt; continue:
&gt; publickey,keyboard-interactive debug3:
&gt; userauth_kbdint: disable: no
&gt; info_req_seen debug2: we did not send
&gt; a packet, disable method debug1: No
&gt; more authentication methods to try.
&gt; Permission denied
&gt; (publickey,keyboard-interactive).
</code></pre>
","<p>The server first tries to authenticate you by public key. That doesn't work (I guess you haven't set one up), so it then falls back to 'keyboard-interactive'. It should then ask you for a password, which presumably you're not getting right. Did you see a password prompt?</p>
","257113","<permissions><ssh><public-key>","52","7","3","2013-01-16 03:47:17","","4","15","","","","2009-10-12 18:10:53","2011-08-16 01:45:59"
"1556056","Permission denied (publickey,keyboard-interactive)","<p>I tried to connect to planetlab node using ssh. It throws me error like Permission denied (publickey,keyboard-interactive). What does this mean?
Here is the verbose of the exception.</p>

<pre><code>&gt; OpenSSH_5.1p1 Debian-5ubuntu1, OpenSSL
&gt; 0.9.8g 19 Oct 2007 debug1: Reading configuration data /etc/ssh/ssh_config
&gt; debug1: Applying options for * debug2:
&gt; ssh_connect: needpriv 0 debug1:
&gt; Connecting to planetlab1.csee.usf.edu
&gt; [131.247.2.241] port 22. debug1:
&gt; Connection established. debug1:
&gt; permanently_set_uid: 0/0 debug3: Not a
&gt; RSA1 key file /home/keven/.ssh/id_rsa.
&gt; debug2: key_type_from_name: unknown
&gt; key type '-----BEGIN' debug3:
&gt; key_read: missing keytype debug2:
&gt; key_type_from_name: unknown key type
&gt; 'Proc-Type:' debug3: key_read: missing
&gt; keytype debug2: key_type_from_name:
&gt; unknown key type 'DEK-Info:' debug3:
&gt; key_read: missing keytype debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug2:
&gt; key_type_from_name: unknown key type
&gt; '-----END' debug3: key_read: missing
&gt; keytype debug1: identity file
&gt; /home/keven/.ssh/id_rsa type 1 debug1:
&gt; Checking blacklist file
&gt; /usr/share/ssh/blacklist.RSA-2048
&gt; debug1: Checking blacklist file
&gt; /etc/ssh/blacklist.RSA-2048 debug1:
&gt; Remote protocol version 2.0, remote
&gt; software version OpenSSH_4.7 debug1:
&gt; match: OpenSSH_4.7 pat OpenSSH_4*
&gt; debug1: Enabling compatibility mode
&gt; for protocol 2.0 debug1: Local version
&gt; string SSH-2.0-OpenSSH_5.1p1
&gt; Debian-5ubuntu1 debug2: fd 3 setting
&gt; O_NONBLOCK debug1: SSH2_MSG_KEXINIT
&gt; sent debug1: SSH2_MSG_KEXINIT received
&gt; debug2: kex_parse_kexinit:
&gt; diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
&gt; debug2: kex_parse_kexinit:
&gt; ssh-rsa,ssh-dss debug2:
&gt; kex_parse_kexinit:
&gt; aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
&gt; debug2: kex_parse_kexinit:
&gt; aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
&gt; debug2: kex_parse_kexinit:
&gt; hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
&gt; debug2: kex_parse_kexinit:
&gt; hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
&gt; debug2: kex_parse_kexinit:
&gt; none,zlib@openssh.com,zlib debug2:
&gt; kex_parse_kexinit:
&gt; none,zlib@openssh.com,zlib debug2:
&gt; kex_parse_kexinit:  debug2:
&gt; kex_parse_kexinit:  debug2:
&gt; kex_parse_kexinit: first_kex_follows 0
&gt; debug2: kex_parse_kexinit: reserved 0 
&gt; debug2: kex_parse_kexinit:
&gt; diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
&gt; debug2: kex_parse_kexinit:
&gt; ssh-rsa,ssh-dss debug2:
&gt; kex_parse_kexinit:
&gt; aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
&gt; debug2: kex_parse_kexinit:
&gt; aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
&gt; debug2: kex_parse_kexinit:
&gt; hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
&gt; debug2: kex_parse_kexinit:
&gt; hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
&gt; debug2: kex_parse_kexinit:
&gt; none,zlib@openssh.com debug2:
&gt; kex_parse_kexinit:
&gt; none,zlib@openssh.com debug2:
&gt; kex_parse_kexinit:  debug2:
&gt; kex_parse_kexinit:  debug2:
&gt; kex_parse_kexinit: first_kex_follows 0
&gt; debug2: kex_parse_kexinit: reserved 0 
&gt; debug2: mac_setup: found hmac-md5
&gt; debug1: kex: server-&gt;client aes128-cbc
&gt; hmac-md5 none debug2: mac_setup: found
&gt; hmac-md5 debug1: kex: client-&gt;server
&gt; aes128-cbc hmac-md5 none debug1:
&gt; SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192)
&gt; sent debug1: expecting
&gt; SSH2_MSG_KEX_DH_GEX_GROUP debug2:
&gt; dh_gen_key: priv key bits set: 128/256
&gt; debug2: bits set: 508/1024 debug1:
&gt; SSH2_MSG_KEX_DH_GEX_INIT sent debug1:
&gt; expecting SSH2_MSG_KEX_DH_GEX_REPLY
&gt; debug3: check_host_in_hostfile:
&gt; filename /root/.ssh/known_hosts
&gt; debug3: check_host_in_hostfile: match
&gt; line 1 debug3: check_host_in_hostfile:
&gt; filename /root/.ssh/known_hosts
&gt; debug3: check_host_in_hostfile: match
&gt; line 2 debug1: Host
&gt; 'planetlab1.csee.usf.edu' is known and
&gt; matches the RSA host key. debug1:
&gt; Found key in /root/.ssh/known_hosts:1
&gt; debug2: bits set: 535/1024 debug1:
&gt; ssh_rsa_verify: signature correct
&gt; debug2: kex_derive_keys debug2:
&gt; set_newkeys: mode 1 debug1:
&gt; SSH2_MSG_NEWKEYS sent debug1:
&gt; expecting SSH2_MSG_NEWKEYS debug2:
&gt; set_newkeys: mode 0 debug1:
&gt; SSH2_MSG_NEWKEYS received debug1:
&gt; SSH2_MSG_SERVICE_REQUEST sent debug2:
&gt; service_accept: ssh-userauth debug1:
&gt; SSH2_MSG_SERVICE_ACCEPT received
&gt; debug2: key: /home/keven/.ssh/id_rsa
&gt; (0xb80c9878) debug1: Authentications
&gt; that can continue:
&gt; publickey,keyboard-interactive debug3:
&gt; start over, passed a different list
&gt; publickey,keyboard-interactive debug3:
&gt; preferred
&gt; gssapi-keyex,gssapi-with-mic,gssapi,publickey,keyboard-interactive,password
&gt; debug3: authmethod_lookup publickey
&gt; debug3: remaining preferred:
&gt; keyboard-interactive,password debug3:
&gt; authmethod_is_enabled publickey
&gt; debug1: Next authentication method:
&gt; publickey debug1: Offering public key:
&gt; /home/keven/.ssh/id_rsa debug3:
&gt; send_pubkey_test debug2: we sent a
&gt; publickey packet, wait for reply
&gt; debug1: Authentications that can
&gt; continue:
&gt; publickey,keyboard-interactive debug2:
&gt; we did not send a packet, disable
&gt; method debug3: authmethod_lookup
&gt; keyboard-interactive debug3: remaining
&gt; preferred: password debug3:
&gt; authmethod_is_enabled
&gt; keyboard-interactive debug1: Next
&gt; authentication method:
&gt; keyboard-interactive debug2:
&gt; userauth_kbdint debug2: we sent a
&gt; keyboard-interactive packet, wait for
&gt; reply debug1: Authentications that can
&gt; continue:
&gt; publickey,keyboard-interactive debug3:
&gt; userauth_kbdint: disable: no
&gt; info_req_seen debug2: we did not send
&gt; a packet, disable method debug1: No
&gt; more authentication methods to try.
&gt; Permission denied
&gt; (publickey,keyboard-interactive).
</code></pre>
","<p>You need to change the <code>sshd_config</code> file in the remote server (probably in <code>/etc/ssh/sshd_config</code>).</p>

<p>Change</p>

<pre><code>PasswordAuthentication no
</code></pre>

<p>to </p>

<pre><code>PasswordAuthentication yes
</code></pre>

<p>And then restart the <code>sshd</code> daemon.</p>
","257113","<permissions><ssh><public-key>","52","25","3","2013-01-16 03:47:17","","4","15","","","","2009-10-12 18:10:53","2011-08-16 01:45:59"
"1556056","Permission denied (publickey,keyboard-interactive)","<p>I tried to connect to planetlab node using ssh. It throws me error like Permission denied (publickey,keyboard-interactive). What does this mean?
Here is the verbose of the exception.</p>

<pre><code>&gt; OpenSSH_5.1p1 Debian-5ubuntu1, OpenSSL
&gt; 0.9.8g 19 Oct 2007 debug1: Reading configuration data /etc/ssh/ssh_config
&gt; debug1: Applying options for * debug2:
&gt; ssh_connect: needpriv 0 debug1:
&gt; Connecting to planetlab1.csee.usf.edu
&gt; [131.247.2.241] port 22. debug1:
&gt; Connection established. debug1:
&gt; permanently_set_uid: 0/0 debug3: Not a
&gt; RSA1 key file /home/keven/.ssh/id_rsa.
&gt; debug2: key_type_from_name: unknown
&gt; key type '-----BEGIN' debug3:
&gt; key_read: missing keytype debug2:
&gt; key_type_from_name: unknown key type
&gt; 'Proc-Type:' debug3: key_read: missing
&gt; keytype debug2: key_type_from_name:
&gt; unknown key type 'DEK-Info:' debug3:
&gt; key_read: missing keytype debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug3:
&gt; key_read: missing whitespace debug2:
&gt; key_type_from_name: unknown key type
&gt; '-----END' debug3: key_read: missing
&gt; keytype debug1: identity file
&gt; /home/keven/.ssh/id_rsa type 1 debug1:
&gt; Checking blacklist file
&gt; /usr/share/ssh/blacklist.RSA-2048
&gt; debug1: Checking blacklist file
&gt; /etc/ssh/blacklist.RSA-2048 debug1:
&gt; Remote protocol version 2.0, remote
&gt; software version OpenSSH_4.7 debug1:
&gt; match: OpenSSH_4.7 pat OpenSSH_4*
&gt; debug1: Enabling compatibility mode
&gt; for protocol 2.0 debug1: Local version
&gt; string SSH-2.0-OpenSSH_5.1p1
&gt; Debian-5ubuntu1 debug2: fd 3 setting
&gt; O_NONBLOCK debug1: SSH2_MSG_KEXINIT
&gt; sent debug1: SSH2_MSG_KEXINIT received
&gt; debug2: kex_parse_kexinit:
&gt; diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
&gt; debug2: kex_parse_kexinit:
&gt; ssh-rsa,ssh-dss debug2:
&gt; kex_parse_kexinit:
&gt; aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
&gt; debug2: kex_parse_kexinit:
&gt; aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
&gt; debug2: kex_parse_kexinit:
&gt; hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
&gt; debug2: kex_parse_kexinit:
&gt; hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
&gt; debug2: kex_parse_kexinit:
&gt; none,zlib@openssh.com,zlib debug2:
&gt; kex_parse_kexinit:
&gt; none,zlib@openssh.com,zlib debug2:
&gt; kex_parse_kexinit:  debug2:
&gt; kex_parse_kexinit:  debug2:
&gt; kex_parse_kexinit: first_kex_follows 0
&gt; debug2: kex_parse_kexinit: reserved 0 
&gt; debug2: kex_parse_kexinit:
&gt; diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
&gt; debug2: kex_parse_kexinit:
&gt; ssh-rsa,ssh-dss debug2:
&gt; kex_parse_kexinit:
&gt; aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
&gt; debug2: kex_parse_kexinit:
&gt; aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
&gt; debug2: kex_parse_kexinit:
&gt; hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
&gt; debug2: kex_parse_kexinit:
&gt; hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
&gt; debug2: kex_parse_kexinit:
&gt; none,zlib@openssh.com debug2:
&gt; kex_parse_kexinit:
&gt; none,zlib@openssh.com debug2:
&gt; kex_parse_kexinit:  debug2:
&gt; kex_parse_kexinit:  debug2:
&gt; kex_parse_kexinit: first_kex_follows 0
&gt; debug2: kex_parse_kexinit: reserved 0 
&gt; debug2: mac_setup: found hmac-md5
&gt; debug1: kex: server-&gt;client aes128-cbc
&gt; hmac-md5 none debug2: mac_setup: found
&gt; hmac-md5 debug1: kex: client-&gt;server
&gt; aes128-cbc hmac-md5 none debug1:
&gt; SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192)
&gt; sent debug1: expecting
&gt; SSH2_MSG_KEX_DH_GEX_GROUP debug2:
&gt; dh_gen_key: priv key bits set: 128/256
&gt; debug2: bits set: 508/1024 debug1:
&gt; SSH2_MSG_KEX_DH_GEX_INIT sent debug1:
&gt; expecting SSH2_MSG_KEX_DH_GEX_REPLY
&gt; debug3: check_host_in_hostfile:
&gt; filename /root/.ssh/known_hosts
&gt; debug3: check_host_in_hostfile: match
&gt; line 1 debug3: check_host_in_hostfile:
&gt; filename /root/.ssh/known_hosts
&gt; debug3: check_host_in_hostfile: match
&gt; line 2 debug1: Host
&gt; 'planetlab1.csee.usf.edu' is known and
&gt; matches the RSA host key. debug1:
&gt; Found key in /root/.ssh/known_hosts:1
&gt; debug2: bits set: 535/1024 debug1:
&gt; ssh_rsa_verify: signature correct
&gt; debug2: kex_derive_keys debug2:
&gt; set_newkeys: mode 1 debug1:
&gt; SSH2_MSG_NEWKEYS sent debug1:
&gt; expecting SSH2_MSG_NEWKEYS debug2:
&gt; set_newkeys: mode 0 debug1:
&gt; SSH2_MSG_NEWKEYS received debug1:
&gt; SSH2_MSG_SERVICE_REQUEST sent debug2:
&gt; service_accept: ssh-userauth debug1:
&gt; SSH2_MSG_SERVICE_ACCEPT received
&gt; debug2: key: /home/keven/.ssh/id_rsa
&gt; (0xb80c9878) debug1: Authentications
&gt; that can continue:
&gt; publickey,keyboard-interactive debug3:
&gt; start over, passed a different list
&gt; publickey,keyboard-interactive debug3:
&gt; preferred
&gt; gssapi-keyex,gssapi-with-mic,gssapi,publickey,keyboard-interactive,password
&gt; debug3: authmethod_lookup publickey
&gt; debug3: remaining preferred:
&gt; keyboard-interactive,password debug3:
&gt; authmethod_is_enabled publickey
&gt; debug1: Next authentication method:
&gt; publickey debug1: Offering public key:
&gt; /home/keven/.ssh/id_rsa debug3:
&gt; send_pubkey_test debug2: we sent a
&gt; publickey packet, wait for reply
&gt; debug1: Authentications that can
&gt; continue:
&gt; publickey,keyboard-interactive debug2:
&gt; we did not send a packet, disable
&gt; method debug3: authmethod_lookup
&gt; keyboard-interactive debug3: remaining
&gt; preferred: password debug3:
&gt; authmethod_is_enabled
&gt; keyboard-interactive debug1: Next
&gt; authentication method:
&gt; keyboard-interactive debug2:
&gt; userauth_kbdint debug2: we sent a
&gt; keyboard-interactive packet, wait for
&gt; reply debug1: Authentications that can
&gt; continue:
&gt; publickey,keyboard-interactive debug3:
&gt; userauth_kbdint: disable: no
&gt; info_req_seen debug2: we did not send
&gt; a packet, disable method debug1: No
&gt; more authentication methods to try.
&gt; Permission denied
&gt; (publickey,keyboard-interactive).
</code></pre>
","<p>You may want to double check the authorized_keys file permissions:</p>

<pre><code>$ chmod 600 ~/.ssh/authorized_keys
</code></pre>

<p>Newer SSH server versions are very picky on this respect.</p>
","257113","<permissions><ssh><public-key>","52","27","3","2013-01-16 03:47:17","","4","15","","","","2009-10-12 18:10:53","2011-08-16 01:45:59"
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>It sounds like your <code>~/.ssh/authorized_keys</code> file is not set up correctly.  Verify that:</p>

<ul>
<li>It is in the correct path.</li>
<li>The permissions of the file are 0600.</li>
<li>The permissions of <code>~/.ssh</code> are 0700.</li>
</ul>
","215194","<git><heroku><deployment><public-key>","847","1","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>You have to upload your public key to Heroku:</p>

<pre><code>heroku keys:add ~/.ssh/id_rsa.pub
</code></pre>

<p>If you don't have a public key, Heroku will prompt you to add one automatically which works seamlessly. Just use: </p>

<pre><code>heroku keys:add
</code></pre>

<p>To clear all your previous keys do :</p>

<pre><code>heroku keys:clear
</code></pre>

<p>To display all your existing keys do :</p>

<pre><code>heroku keys
</code></pre>

<p>EDIT:</p>

<p>The above did not seem to work for me. I had messed around with the <code>HOME</code> environment variable and so SSH was searching for keys in the wrong directory.</p>

<p>To ensure that SSH checks for the key in the correct directory do :</p>

<pre><code>ssh -vT git@heroku.com
</code></pre>

<p>Which will display the following ( Sample ) lines</p>

<pre><code>OpenSSH_4.6p1, OpenSSL 0.9.8e 23 Feb 2007
debug1: Connecting to heroku.com [50.19.85.156] port 22.
debug1: Connection established.
debug1: identity file /c/Wrong/Directory/.ssh/identity type -1
debug1: identity file /c/Wrong/Directory/.ssh/id_rsa type -1
debug1: identity file /c/Wrong/Directory/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version Twisted
debug1: no match: Twisted
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.6
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Host 'heroku.com' is known and matches the RSA host key.
debug1: Found key in /c/Wrong/Directory/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /c/Wrong/Directory/.ssh/identity
debug1: Trying private key: /c/Wrong/Directory/.ssh/id_rsa
debug1: Trying private key: /c/Wrong/Directory/.ssh/id_dsa
debug1: No more authentication methods to try.
</code></pre>

<p><strong><code>Permission denied (publickey).</code></strong></p>

<p>From the above you could observe that ssh looks for the keys in the <code>/c/Wrong/Directory/.ssh</code> directory which is not where we have the public keys that we just added to heroku ( using <code>heroku keys:add ~/.ssh/id_rsa.pub</code> ) ( <strong>Please note that in windows OS <code>~</code> refers to the <code>HOME</code> path which in win 7 / 8 is <code>C:\Users\UserName</code></strong> )</p>

<p>To view your current home directory do : <code>echo $HOME</code> or <code>echo %HOME%</code> ( Windows )</p>

<p>To set your <code>HOME</code> directory correctly ( by correctly I mean the parent directory of <code>.ssh</code> directory, so that ssh could look for keys in the correct directory ) refer these links :</p>

<ol>
<li><p><a href=""https://unix.stackexchange.com/questions/21598/how-do-i-set-a-user-environment-variable-permanently-not-session"">SO Answer on how to set Unix environment variable permanently</a></p></li>
<li><p><a href=""https://stackoverflow.com/questions/2840871/ssh-is-looking-in-the-wrong-place-for-the-public-private-key-pair-on-windows"">SO Question regarding ssh looking for keys in the wrong directory and a solution for the same.</a></p></li>
</ol>
","215194","<git><heroku><deployment><public-key>","847","1470","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>Here is the link that explains how to manage your ssh keys : <a href=""http://devcenter.heroku.com/articles/keys#adding_keys_to_heroku"" rel=""noreferrer"">http://devcenter.heroku.com/articles/keys#adding_keys_to_heroku</a></p>
","215194","<git><heroku><deployment><public-key>","847","61","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>The above given answer DOES work, but found out I needed to do some extra steps before it worked.</p>

<ol>
<li>I removed all id_rsa* files and generated a new SSH using <a href=""http://help.github.com/mac-set-up-git/"" rel=""nofollow"">this</a> guide.</li>
<li>Then, I destroyed the heroku app. Removed the ~/.heroku/credentials file.</li>
<li>'heroku create' command (and since the credentials file is removed, it will prompt you for your email/password.</li>
<li>FINALLY type 'heroku keys:add' and it will upload the default ~/.ssh/id_rsa.pub file.</li>
<li>It works! Well.... YMMV but I really do hope this can be some help as I struggled the whole day trying to figure this out! Haha </li>
</ol>
","215194","<git><heroku><deployment><public-key>","847","2","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>I had the same issue, the steps below worked for me,  </p>

<pre><code>-&gt;heroku login
</code></pre>

<p>abc@gmail.com &amp; password</p>

<pre><code>-&gt;cd C:\Users\yourusername\.ssh    (OR for cygwin shell -&gt;cd ~/.ssh)
</code></pre>

<p><code>-&gt;ssh-keygen -t rsa -f id_rsa</code></p>

<p>if asks any passphrase don't use blank, fill with a passphrase,but not forget it.</p>

<p>After generating the key you need to add it, like so</p>

<pre><code>$ ssh-add
</code></pre>

<p>and it to heroku</p>

<pre><code>-&gt;heroku keys:add ""id_rsa.pub""
</code></pre>

<p>change directory to workspace, than</p>

<pre><code>-&gt;git clone git@heroku.com:stark-dawn-1234.git -o heroku
</code></pre>

<p>use passphrase that you set above.</p>

<hr>

<p>Actually i also remove files below, but not sure that they are imp, </p>

<p>C:\Users\yourusername.heroku\credientals and C:\Users\yourusername.ssh\known_hosts</p>
","215194","<git><heroku><deployment><public-key>","847","146","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>If you are a windows user the other solutions here probably won't solve your problem.</p>

<p>I use Windows 7 64-Bit + Git-1.7.7.1-preview20111027 and the solution was to copy my keys from <code>C:\users\user\.ssh</code> to <code>C:\Program Files (x86)\Git\.ssh</code>. That's where this git client looks for the keys when pushing to heroku. </p>

<p>I hope this helps.</p>
","215194","<git><heroku><deployment><public-key>","847","31","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>On Windows 7,64 bit,the above solution (Onur Turhan's)  worked for me with slight changes as below</p>

<pre><code>C:\Users\MyName &gt; heroku login
</code></pre>

<p>Enter email/password</p>

<pre><code>C:\Users\MyName &gt;ssh-keygen -t rsa -f id_rsa
</code></pre>

<p>This generated two files(id_rsa and id_rsa.pub) in my c:\Users\MyName directory (Not in .ssh directory)</p>

<pre><code>heroku keys:add id_rsa.pub
git clone git@heroku.com:some-heiku-xxxx.git -o heroku
</code></pre>

<p>I guess adding the correct ""id_rsa.pub"" file is the most important.After generating the public key using keygen just verify that you are adding correct key by looking at the time-stamp when it was created.</p>
","215194","<git><heroku><deployment><public-key>","847","6","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>I killed myself for 3 days trying every possible combination to try to get this to work -- I finally tried making a <strong>DSA</strong> key instead and it worked. </p>

<p>Try DSA instead of RSA if it's not working for you. </p>

<p>(I'm using Ubuntu 11.10, ruby 1.8.7, heroku 2.15.1)</p>
","215194","<git><heroku><deployment><public-key>","847","7","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>I would just to like to add that the directory is not necessarily C:\Users\[username]\.ssh. It is the directory in which you created your public key in.</p>

<p>For instance my home directory in Windows was changed to C:\[username]. Your home directory in a .ssh sub-folder is the best and most likely place you may have created your keys. You can check your home directory in Windows with the command:</p>

<pre><code>    echo %HOMEPATH%
</code></pre>
","215194","<git><heroku><deployment><public-key>","847","0","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>This problem was messing with me for a few days.</p>

<p>This  might help.</p>

<p>1) Find out what keys you have in Heroku now.</p>

<pre><code>$ heroku keys
=== 1 key for joe@example.com
ssh-dss AAAAB8NzaC...DVj3R4Ww== joe@workstation.local
</code></pre>

<p>2) Build a ~/.ssh/config file:</p>

<pre><code>$ sudo vim ~/.ssh/config
</code></pre>

<p>Edit with this info</p>

<pre><code>Host heroku.com
Hostname heroku.com 
Port 22 
IdentitiesOnly yes 
IdentityFile ~/.ssh/ssh-dss # location and name of your private key
TCPKeepAlive yes 
User joe@workstation.local
</code></pre>
","215194","<git><heroku><deployment><public-key>","847","90","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>This was the solution for me:</p>

<pre><code>ssh-add ~/.ssh/my_heroku_key_rsa
</code></pre>
","215194","<git><heroku><deployment><public-key>","847","29","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>I had the same problem cause i had no public keys, so i did:</p>

<pre><code>heroku keys:clear
heroku keys:add
</code></pre>

<p>That will generate a public key and then it works well</p>
","215194","<git><heroku><deployment><public-key>","847","35","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>If you want to use ""sudo"", example:</p>

<pre><code>sudo git clone git@heroku.com......... -o heroku
</code></pre>

<p>you should also generate ssh key for your root user.</p>

<pre><code>sudo su
cd /root/.ssh  
ssh-keygen -t rsa
....
heroku keys:add id_rsa.pub
</code></pre>

<p>and it'll work.</p>

<p>if you don't use root user, generate ssh key in your user directory instead.</p>

<pre><code>cd /home/user/.ssh
</code></pre>

<p>Sorry if my sentences messed up...</p>
","215194","<git><heroku><deployment><public-key>","847","0","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>If you've already uploaded the key then try to remove the key and then re-upload 
it with a new key.</p>

<pre><code> heroku keys:remove //removes the existing key
 ssh-keygen -t rsa //generates a new key in ~/.ssh folder
 heroku keys:add    //uploads the new key, if no arguments r passed then the key generated                              
                    //in default directroy i.e., ~/.ssh/id_rsa is uploaded
 git push heroku
</code></pre>

<p>this should work.</p>
","215194","<git><heroku><deployment><public-key>","847","11","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>To share my experience :</p>

<p>Git (my own install) was looking for the key named 'id_rsa'.</p>

<p>So I tried to <strong>rename my keys to 'id_rsa' and 'id_rsa.pub'</strong> and it worked.</p>

<p>Btw, I'm sure there is an other way to do it but I didn't look deeper yet.</p>
","215194","<git><heroku><deployment><public-key>","847","15","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>I had to do:</p>

<pre><code>$ ssh-keygen -t rsa  
$ heroku keys:add  
</code></pre>

<p>Then it worked:</p>

<pre><code>$ git push heroku master  
</code></pre>
","215194","<git><heroku><deployment><public-key>","847","1","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>One single command works:</p>

<pre><code>heroku keys:add
</code></pre>

<p>It will make one if it doesn't exist.</p>
","215194","<git><heroku><deployment><public-key>","847","5","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>I had this problem when TortoiseGIT was installed on my machine. After changing the environment variable <code>GIT_SSH</code> from </p>

<pre><code>""c:\Program Files\TortoiseGit\bin\TortoisePlink.exe""
</code></pre>

<p>to </p>

<pre><code>""c:\Program Files (x86)\Git\bin\ssh.exe""
</code></pre>

<p>and following this tutorial with <code>ssh-keygen</code> and <code>keys:add</code>, it works!</p>
","215194","<git><heroku><deployment><public-key>","847","5","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>Check your .ssh config for heroku. Go to the .ssh folder and open the config file</p>

<pre><code>cd ~/.ssh
subl config
</code></pre>

<p>The 'subl' is for Sublime Text, but you can use whatever editor you wish. Look for the line ""IdentityFile"" and make sure it has the non public key listed:</p>

<pre><code>IdentityFile ""/Users/ircmullaney/.ssh/my_ssh""
</code></pre>

<p>not</p>

<pre><code>IdentityFile ""/Users/ircmullaney/.ssh/my_ssh.pub""
</code></pre>

<p>That did it for me. I'm not sure why mine had the public version in the config file, but it did and it was throwing the error: </p>

<pre><code>Permissions 0644 for '/Users/ircmullaney/.ssh/my_ssh.pub' are too open.
</code></pre>
","215194","<git><heroku><deployment><public-key>","847","1","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>Pushing was working for me and then stopped suddenly.</p>

<p>If the heroku api is experiencing downtime, you will get this error when you try to push.  </p>

<p>Check:</p>

<p><a href=""https://status.heroku.com/"" rel=""nofollow"">https://status.heroku.com/</a></p>

<p>before freaking out too hard.</p>
","215194","<git><heroku><deployment><public-key>","847","4","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>I was still having problems after trying all of these ideas.  This was my problem: </p>

<p>My remote heroku repository was funked.  I refreshed it as follows:</p>

<pre><code>git remote -v
</code></pre>

<p>Then remove the heroku one that is wrong:</p>

<pre><code>git remote rm heroku
</code></pre>

<p>Then add the new one</p>

<pre><code>git remote add heroku git@heroku.com:sitename.git
</code></pre>

<p>You can get the sitename from your Heroku settings page for your app.  Good Luck!</p>
","215194","<git><heroku><deployment><public-key>","847","1","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>The problem I faced was on Windows and invariably whenever I run the ""heroku keys:add"" it selected the github keys. So here are the steps I followed to resolve the issue</p>

<ol>
<li>went to the .ssh directory under ""Document and Settings"" folder and deleted the git hub keys</li>
<li>run the command
heroku keys:add</li>
</ol>

<p>The above command asked me to generate a new keys and following was the output
    Could not find an existing public key.
    Would you like to generate one? [Yn] Y
    Generating new SSH public key.
    Uploading SSH public key C:/Documents and Settings/Admin/.ssh/id_rsa.pub... done
    !    The 'heroku' gem has been deprecated and replaced with the Heroku Toolbelt,    download and install from <a href=""https://toolbelt.heroku.com"" rel=""nofollow"">https://toolbelt.heroku.com</a>.</p>

<ol>
<li>rerun the command
heroku keys:add</li>
</ol>

<p>The above command will not give the following output
    Found existing public key: C:/Documents and Settings/Admin/.ssh/id_rsa.pub
    Uploading SSH public key C:/Documents and Settings/Admin/.ssh/id_rsa.pub... done</p>

<ol>
<li>Now use the git push heroku master</li>
</ol>

<p>for me using the above steps solved the issue and was able to deploy the application on the cloud.</p>
","215194","<git><heroku><deployment><public-key>","847","1","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>Try repairing permissions in Disk Utility (Mac OS X). Helped me</p>
","215194","<git><heroku><deployment><public-key>","847","0","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>I was experiencing the same problem; following these steps should help:</p>

<ol>
<li>First, log in: heroku login </li>
<li>Clear all keys: heroku keys:clear</li>
<li>Delete all files in local folder ( all <code>.pub</code> files and <code>know_host</code>) in <code>.ssh/ folder</code></li>
<li>Log in again : heroku login - u will prompt with no key, so follow the onscreen instructions.</li>
</ol>
","215194","<git><heroku><deployment><public-key>","847","1","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>At first make sure hidden files are visible in your Mac.
If not do:</p>

<ul>
<li>Open terminal and type in <code>defaults write com.apple.Finder
AppleShowAllFiles TRUE</code></li>
<li><code>killall Finder</code></li>
</ul>

<p>Next steps:</p>

<ul>
<li>Going to <code>Users/user_name/.ssh/</code> removed all the files.</li>
<li>Opening terminal type in <code>ssh-keygen -t dsa</code></li>
<li>Then <code>heroku keys:add ~/.ssh/id_dsa.pub</code></li>
</ul>

<p>N.B. I did it in Mac OSX 10.7.2 Lion. Though the procedure should be same in others too.</p>
","215194","<git><heroku><deployment><public-key>","847","0","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>I have this issue as well. I am using Mac OSX. The way I fixed that was to login as admin</p>

<blockquote>
  <p>sudo su</p>
  
  <p>password</p>
</blockquote>
","215194","<git><heroku><deployment><public-key>","847","0","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>Solution of dmajkic help me at last:</p>

<p>For Windows users it may means: git client coudn’t find your keys.
Check keys in c:\Users\UserName.ssh\ and! environment variable HOME=c:\Users\UserName\</p>
","215194","<git><heroku><deployment><public-key>","847","0","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>Sequence to follow</p>

<pre><code>$ heroku login
$ ssh-keygen -t rsa
$ heroku keys:add
</code></pre>

<p>When executing second statement it would ask for input, just press <em>Enter</em>(return) three times and a key will be added.</p>
","215194","<git><heroku><deployment><public-key>","847","3","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>Here is what worked for me. The heroku site is not being added to your known hosts. Go to window-other- show view-git-git repositories. From there clone the repository. Once you clone it, delete the repository that was just created and then import it from the file menu. Do this since when you clone the repository, it does not add it to the explorer view. Now you should have the git repository and the explorer view.</p>
","215194","<git><heroku><deployment><public-key>","847","0","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>when pushing using </p>

<pre><code>git push heroku production:master 
</code></pre>

<p>your public key under home directory ~/.ssh/id_rsa is used</p>

<p>To fix this </p>

<p>you should login as a different user may be root</p>

<pre><code>sudo su 
</code></pre>

<p>then start fresh by issuing the following commands</p>

<pre><code>heroku keys:clear //removes existing keys
ssh-keygen -t rsa //generates a new key in ~/.ssh folder (set a password)
heroku keys:add   //uploads the new key, ~/.ssh/id_rsa is uploaded                      
git push heroku production:master
</code></pre>
","215194","<git><heroku><deployment><public-key>","847","0","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>For all those who tried everything mentioned above on Windows 7 and still it didn't work, here is what I've done:
- open GitBash.exe from the Git directory C:\Program Files (x86)\Git\ (don't open a command prompt, this won't work).
- add the following as mentioned <a href=""https://stackoverflow.com/a/8874946/915591"">above</a>, but you have to delete the #</p>

<pre><code>Host heroku.com
Hostname heroku.com 
Port 22 
IdentitiesOnly yes 
IdentityFile ~/.ssh/ssh-dss
TCPKeepAlive yes 
User joe@workstation.local
</code></pre>

<p>now run <strong>git push heroku master</strong> and it should work.</p>
","215194","<git><heroku><deployment><public-key>","847","2","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p><strong>If the other answers didn't worked for you. Try this!</strong></p>

<p>Sometimes all you need is to push again. It happen to me today due to slow internet connection(when you are downloading or using p2p).</p>

<p>Please see screenshot below: </p>

<p><img src=""https://i.stack.imgur.com/PvLnt.png"" alt=""enter image description here""></p>
","215194","<git><heroku><deployment><public-key>","847","0","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>Instead of dealing with SSH keys, you can also try Heroku's new  <a href=""https://devcenter.heroku.com/articles/http-git"" rel=""nofollow"">beta HTTP Git</a> support. It just uses your API token and runs on port 443, so no SSH keys or port 22 to mess with.</p>

<p>To use HTTP Git, first make sure Toolbelt is updated and that your credentials are current:</p>

<pre><code>$ heroku update
$ heroku login
</code></pre>

<p>(this is important because Heroku HTTP Git authenticates in a slightly different way than the rest of Toolbelt)</p>

<p>During the beta, you get HTTP by passing the <code>--http-git</code> flag to the relevant <code>heroku apps:create</code>, <code>heroku git:clone</code> and <code>heroku git:remote</code> commands. To create a new app and have it be configured with a HTTP Git remote, run this:</p>

<pre><code>$ heroku apps:create --http-git
</code></pre>

<p>To change an existing app from SSH to HTTP Git, simply run this command from the app’s directory on your machine:</p>

<pre><code>$ heroku git:remote --http-git
Git remote heroku updated
</code></pre>

<p>Check out the <a href=""https://devcenter.heroku.com/articles/http-git"" rel=""nofollow"">Dev Center documentation for details on how set up HTTP Git for Heroku</a>.</p>
","215194","<git><heroku><deployment><public-key>","847","0","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"4269922","Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly","<p>I'm attempting to deploy my code to heroku with the following command line:</p>

<pre><code>git push heroku master
</code></pre>

<p>but get the following error:</p>

<pre><code>Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>I have already uploaded my public SSH key, but it still comes up with this error.</p>
","<p>I reinstalled heroku toolbelt and it worked.</p>
","215194","<git><heroku><deployment><public-key>","847","0","34","2016-11-27 00:02:51","6059231","5","277","385378","","2012-01-14 17:48:10","2010-11-24 17:51:13",""
"2292495","What is the difference between a cer, pvk, and pfx file?","<p>What is the difference between a cer, pvk, and pfx file? Also, which files do I keep and which am I expected to give to my counter-parties?</p>
","<p>I actually came across something like this not too long ago... <a href=""http://social.msdn.microsoft.com/Forums/en-US/csharpgeneral/thread/2da87a2a-c857-4a6b-a21a-d2a556af55bb"" rel=""noreferrer"">check it out over on msdn</a>  (see the first answer)</p>

<p>in summary:</p>

<blockquote>
  <p>.cer - certificate stored in the X.509 standard format. This certificate contains information about the certificate's owner... along with public and private keys.</p>
  
  <p>.pvk - files are used to store private keys for code signing. You can also create a certificate based on .pvk private key file.</p>
  
  <p>.pfx - stands for personal exchange format. It is used to exchange public and private objects in a single file.  A pfx file can be created from .cer file.  Can also be used to create a <a href=""http://msdn.microsoft.com/en-us/library/aa906334.aspx"" rel=""noreferrer"">Software Publisher Certificate</a>. </p>
</blockquote>

<p>I summarized the info from the page based on the suggestion from the comments.</p>
","174906","<security><public-key>","188","19","4","2017-12-14 10:46:47","2292591","1","58","38398","","2016-09-01 18:02:00","2010-02-18 21:54:31",""
"2292495","What is the difference between a cer, pvk, and pfx file?","<p>What is the difference between a cer, pvk, and pfx file? Also, which files do I keep and which am I expected to give to my counter-parties?</p>
","<p>Windows uses .cer extension for an X.509 certificate. These can be in ""binary"" (ASN.1 DER), or it can be encoded with Base-64 and have a header and footer applied (PEM); Windows will recognize either. To verify the integrity of a certificate, you have to check its signature using the issuer's public key... which is, in turn, another certificate.</p>

<p>Windows uses .pfx for a PKCS #12 file. This file can contain a variety of cryptographic information, including certificates, certificate chains, root authority certificates, and private keys. Its contents can be cryptographically protected (with passwords) to keep private keys private and preserve the integrity of root certificates.</p>

<p>Windows uses .pvk for a private key file. <strike>I'm not sure what standard (if any) Windows follows for these. Hopefully they are PKCS #8 encoded keys.</strike> <a href=""https://stackoverflow.com/users/525725/"">Emmanuel Bourg</a> reports that these are a proprietary format. Some <a href=""https://web.archive.org/web/20170531040754/http://www.drh-consultancy.demon.co.uk/pvk.html"" rel=""noreferrer"">documentation</a> is available.</p>

<p>You should never disclose your private key. These are contained in .pfx and .pvk files. </p>

<p>Generally, you only exchange your certificate (.cer) and the certificates of any intermediate issuers (i.e., the certificates of all of your CAs, except the root CA) with other parties. </p>
","174906","<security><public-key>","188","131","4","2017-12-14 10:46:47","2292591","1","58","38398","","2016-09-01 18:02:00","2010-02-18 21:54:31",""
"2292495","What is the difference between a cer, pvk, and pfx file?","<p>What is the difference between a cer, pvk, and pfx file? Also, which files do I keep and which am I expected to give to my counter-parties?</p>
","<p>In Windows platform, these file types are used for certificate information. Normally used for SSL certificate and Public Key Infrastructure (X.509).</p>

<ul>
<li><strong>CER files:</strong>
CER file is used to store X.509 certificate. Normally used for SSL certification to verify and identify web servers security. The file contains information about certificate owner and public key. A CER file can be in binary (ASN.1 DER) or encoded with Base-64 with header and footer included (PEM), Windows will recognize either of these layout.</li>
<li><strong>PVK files:</strong>
Stands for Private Key. Windows uses PVK files to store private keys for code signing in various Microsoft products. PVK is proprietary format.</li>
<li><strong>PFX files</strong>
Personal Exchange Format, is a PKCS12 file. This contains a variety of cryptographic information, such as certificates, root authority certificates, certificate chains and private keys. It’s cryptographically protected with passwords to keep private keys private and preserve the integrity of the root certificates. The PFX file is also used in various Microsoft products, such as IIS.</li>
</ul>

<p>for more information visit:<a href=""http://stack247.wordpress.com/2013/04/22/certificate-files-cer-x-pvk-x-pfx/"" rel=""noreferrer"">Certificate Files: .Cer x .Pvk x .Pfx
</a></p>
","174906","<security><public-key>","188","53","4","2017-12-14 10:46:47","2292591","1","58","38398","","2016-09-01 18:02:00","2010-02-18 21:54:31",""
"2292495","What is the difference between a cer, pvk, and pfx file?","<p>What is the difference between a cer, pvk, and pfx file? Also, which files do I keep and which am I expected to give to my counter-parties?</p>
","<p>Here are my personal, super-condensed notes, as far as this subject pertains to me currently, for anyone who's interested:</p>

<ul>
<li>Both <strong><a href=""https://en.wikipedia.org/wiki/PKCS_12"" rel=""noreferrer"">PKCS12</a></strong> and <strong><a href=""https://en.wikipedia.org/wiki/Privacy-enhanced_Electronic_Mail"" rel=""noreferrer"">PEM</a></strong> can store entire cert chains: <a href=""https://en.wikipedia.org/wiki/Public-key_cryptography"" rel=""noreferrer"">public keys, private keys</a>, and <a href=""https://en.wikipedia.org/wiki/Certificate_authority"" rel=""noreferrer"">root (CA) certs</a>.</li>
<li><strong>.pfx</strong> == <strong>.p12</strong> == ""<strong><a href=""https://en.wikipedia.org/wiki/PKCS_12"" rel=""noreferrer"">PKCS12</a></strong>""

<ul>
<li>fully encrypted</li>
</ul></li>
<li><strong>.pem</strong> == <strong>.cer</strong> == <strong>.cert</strong> == ""<strong><a href=""https://en.wikipedia.org/wiki/Privacy-enhanced_Electronic_Mail"" rel=""noreferrer"">PEM</a></strong>""

<ul>
<li><a href=""https://en.wikipedia.org/wiki/Base64"" rel=""noreferrer"">base-64</a> (string) encoded <a href=""https://en.wikipedia.org/wiki/X.509"" rel=""noreferrer"">X509 cert</a> (binary) with a header and footer

<ul>
<li><a href=""https://en.wikipedia.org/wiki/Base64"" rel=""noreferrer"">base-64</a> is basically just a string of ""A-Za-z0-9+/"" used to represent 0-63, 6 bits of binary at a time, in sequence, sometimes with 1 or 2 ""="" characters at the very end when there are leftovers (""="" being ""filler/junk/ignore/throw away"" characters)</li>
<li>the header and footer is something like ""-----BEGIN CERTIFICATE-----"" and ""-----END CERTIFICATE-----"" or ""-----BEGIN ENCRYPTED PRIVATE KEY-----"" and ""-----END ENCRYPTED PRIVATE KEY-----""</li>
</ul></li>
<li>Windows recognizes .cer and .cert as cert files</li>
</ul></li>
<li><strong>.jks</strong> == ""<strong><a href=""http://docs.oracle.com/javase/8/docs/api/java/security/KeyStore.html"" rel=""noreferrer"">Java Key Store</a></strong>""

<ul>
<li>just a Java-specific file format which the API uses

<ul>
<li>.p12 and .pfx files can also be used with the JKS API</li>
</ul></li>
</ul></li>
<li>""<strong>Trust Stores</strong>"" contain public, trusted, <a href=""https://en.wikipedia.org/wiki/Certificate_authority"" rel=""noreferrer"">root (CA) certs</a>, whereas
""<strong>Identity/Key Stores</strong>"" contain private, identity certs; file-wise,
however, they are the same.</li>
</ul>
","174906","<security><public-key>","188","26","4","2017-12-14 10:46:47","2292591","1","58","38398","","2016-09-01 18:02:00","2010-02-18 21:54:31",""
"3045033","Getting the PublicKeyToken of .Net assemblies","<p>What is the simplest way to find the Public-Key-Token of an assembly?</p>

<p>The simplest way I can think of would be a simple right-click, get public key, but this functionality isn't there, maybe there is a Visual Studio Extension for that?</p>

<p>I'm using Visual Studio 2010, if an extension is available.</p>
","<p>Open a command prompt and type one of the following lines according to your Visual Studio version and Operating System Architecture :</p>

<p><strong>VS 2008 on 32bit Windows</strong> :</p>

<pre><code>""%ProgramFiles%\Microsoft SDKs\Windows\v6.0A\bin\sn.exe"" -T &lt;assemblyname&gt;
</code></pre>

<p><strong>VS 2008 on 64bit Windows :</strong></p>

<pre><code>""%ProgramFiles(x86)%\Microsoft SDKs\Windows\v6.0A\bin\sn.exe"" -T &lt;assemblyname&gt;
</code></pre>

<p><strong>VS 2010 on 32bit Windows :</strong> </p>

<pre><code>""%ProgramFiles%\Microsoft SDKs\Windows\v7.0A\bin\sn.exe"" -T &lt;assemblyname&gt;
</code></pre>

<p><strong>VS 2010 on 64bit Windows :</strong> </p>

<pre><code>""%ProgramFiles(x86)%\Microsoft SDKs\Windows\v7.0A\bin\sn.exe"" -T &lt;assemblyname&gt;
</code></pre>

<p><strong>VS 2012 on 32bit Windows :</strong></p>

<pre><code>""%ProgramFiles%\Microsoft SDKs\Windows\v8.0A\bin\NETFX 4.0 Tools\sn.exe"" -T &lt;assemblyname&gt;
</code></pre>

<p><strong>VS 2012 on 64bit Windows :</strong></p>

<pre><code>""%ProgramFiles(x86)%\Microsoft SDKs\Windows\v8.0A\bin\NETFX 4.0 Tools\sn.exe"" -T &lt;assemblyname&gt;
</code></pre>

<p><strong>VS 2015 on 64bit Windows :</strong></p>

<pre><code>""%ProgramFiles(x86)%\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools\sn.exe"" -T &lt;assemblyname&gt;
</code></pre>

<p>Note that for the versions VS2012+, sn.exe application isn't anymore in bin but in a sub-folder. Also, note that for 64bit you need to specify (x86) folder.</p>

<p>If you prefer to use Visual Studio command prompt, just type :</p>

<pre><code>sn -T &lt;assembly&gt; 
</code></pre>

<p>where <code>&lt;assemblyname&gt;</code> is a full file path to the assembly you're interested in, surrounded by quotes if it has spaces.</p>

<p>You can add this as an external tool in VS, as shown here:<br>
<a href=""http://blogs.msdn.com/b/miah/archive/2008/02/19/visual-studio-tip-get-public-key-token-for-a-stong-named-assembly.aspx"" rel=""noreferrer"">http://blogs.msdn.com/b/miah/archive/2008/02/19/visual-studio-tip-get-public-key-token-for-a-stong-named-assembly.aspx</a></p>
","138732","<.net><visual-studio><visual-studio-2010><public-key>","153","212","13","2019-10-17 13:52:10","3045089","2","41","4519059","","2018-08-29 08:03:00","2010-06-15 12:23:55",""
"3045033","Getting the PublicKeyToken of .Net assemblies","<p>What is the simplest way to find the Public-Key-Token of an assembly?</p>

<p>The simplest way I can think of would be a simple right-click, get public key, but this functionality isn't there, maybe there is a Visual Studio Extension for that?</p>

<p>I'm using Visual Studio 2010, if an extension is available.</p>
","<p>If you have included the assembly in your project, you can do :</p>

<pre><code>            var assemblies =
                AppDomain.CurrentDomain.GetAssemblies();


            foreach (var assem in assemblies)
            {
                    Console.WriteLine(assem.FullName);
            }
</code></pre>
","138732","<.net><visual-studio><visual-studio-2010><public-key>","153","13","13","2019-10-17 13:52:10","3045089","2","41","4519059","","2018-08-29 08:03:00","2010-06-15 12:23:55",""
"3045033","Getting the PublicKeyToken of .Net assemblies","<p>What is the simplest way to find the Public-Key-Token of an assembly?</p>

<p>The simplest way I can think of would be a simple right-click, get public key, but this functionality isn't there, maybe there is a Visual Studio Extension for that?</p>

<p>I'm using Visual Studio 2010, if an extension is available.</p>
","<p>1) The command is <code>C:\Program Files\Microsoft SDKs\Windows\v6.0A\bin\sn -T {your.dll}</code></p>

<p>In the above example, the Microsoft SDK resides in C:\Program Files\Microsoft SDKs\Windows\v6.0A. Your environment may differ.</p>

<p>2) To get the public key token of any of your project, you can add sn.exe as part of your External Tools in Visual Studio. The steps are shown in <a href=""http://msdn.microsoft.com/en-us/library/ee539398.aspx"" rel=""noreferrer"">this Microsoft link: How to: Create a Tool to Get the Public Key of an Assembly</a></p>
","138732","<.net><visual-studio><visual-studio-2010><public-key>","153","5","13","2019-10-17 13:52:10","3045089","2","41","4519059","","2018-08-29 08:03:00","2010-06-15 12:23:55",""
"3045033","Getting the PublicKeyToken of .Net assemblies","<p>What is the simplest way to find the Public-Key-Token of an assembly?</p>

<p>The simplest way I can think of would be a simple right-click, get public key, but this functionality isn't there, maybe there is a Visual Studio Extension for that?</p>

<p>I'm using Visual Studio 2010, if an extension is available.</p>
","<p>another option:</p>

<p>if you use PowerShell, you can find out like:</p>

<pre><code>PS C:\Users\Pravat&gt; ([system.reflection.assembly]::loadfile(""C:\Program Files (x86)\MySQL\Connector NET 6.6.5\Assemblies\v4.0\MySql.Data.dll"")).FullName
</code></pre>

<p>like</p>

<pre><code>PS C:\Users\Pravat&gt; ([system.reflection.assembly]::loadfile(""dll full path"")).FullName
</code></pre>

<p>and will appear like</p>

<blockquote>
  <p>MySql.Data, Version=6.6.5.0, Culture=neutral,
  PublicKeyToken=c5687fc88969c44d</p>
</blockquote>
","138732","<.net><visual-studio><visual-studio-2010><public-key>","153","79","13","2019-10-17 13:52:10","3045089","2","41","4519059","","2018-08-29 08:03:00","2010-06-15 12:23:55",""
"3045033","Getting the PublicKeyToken of .Net assemblies","<p>What is the simplest way to find the Public-Key-Token of an assembly?</p>

<p>The simplest way I can think of would be a simple right-click, get public key, but this functionality isn't there, maybe there is a Visual Studio Extension for that?</p>

<p>I'm using Visual Studio 2010, if an extension is available.</p>
","<p>If the library is included in the VS project, you can check <code>.cproj</code> file, e.g.:</p>

<pre><code>&lt;ItemGroup&gt;
    &lt;Reference Include=""Microsoft.Dynamic, Version=1.1.0.20, Culture=neutral, PublicKeyToken=7f709c5b713576e1, processorArchitecture=MSIL""&gt;
...
</code></pre>
","138732","<.net><visual-studio><visual-studio-2010><public-key>","153","42","13","2019-10-17 13:52:10","3045089","2","41","4519059","","2018-08-29 08:03:00","2010-06-15 12:23:55",""
"3045033","Getting the PublicKeyToken of .Net assemblies","<p>What is the simplest way to find the Public-Key-Token of an assembly?</p>

<p>The simplest way I can think of would be a simple right-click, get public key, but this functionality isn't there, maybe there is a Visual Studio Extension for that?</p>

<p>I'm using Visual Studio 2010, if an extension is available.</p>
","<p>You can add this as an external tool to Visual Studio like so:</p>

<p><strong>Title:</strong></p>

<pre><code>Get PublicKeyToken
</code></pre>

<p><strong>Command:</strong></p>

<pre><code>c:\Program Files (x86)\Microsoft SDKs\Windows\v8.1A\bin\NETFX 4.5.1 Tools\sn.exe
</code></pre>

<p><em>(Path may differ between versions)</em></p>

<p><strong>Arguments:</strong></p>

<pre><code>-T ""$(TargetPath)""
</code></pre>

<p>And check the ""<strong>Use Output window</strong>"" option.</p>
","138732","<.net><visual-studio><visual-studio-2010><public-key>","153","9","13","2019-10-17 13:52:10","3045089","2","41","4519059","","2018-08-29 08:03:00","2010-06-15 12:23:55",""
"3045033","Getting the PublicKeyToken of .Net assemblies","<p>What is the simplest way to find the Public-Key-Token of an assembly?</p>

<p>The simplest way I can think of would be a simple right-click, get public key, but this functionality isn't there, maybe there is a Visual Studio Extension for that?</p>

<p>I'm using Visual Studio 2010, if an extension is available.</p>
","<p>You can get this easily via c#</p>

<pre><code>private static string GetPublicKeyTokenFromAssembly(Assembly assembly)
{
    var bytes = assembly.GetName().GetPublicKeyToken();
    if (bytes == null || bytes.Length == 0)
        return ""None"";

    var publicKeyToken = string.Empty;
    for (int i = 0; i &lt; bytes.GetLength(0); i++)
        publicKeyToken += string.Format(""{0:x2}"", bytes[i]);

    return publicKeyToken;
}
</code></pre>
","138732","<.net><visual-studio><visual-studio-2010><public-key>","153","13","13","2019-10-17 13:52:10","3045089","2","41","4519059","","2018-08-29 08:03:00","2010-06-15 12:23:55",""
"3045033","Getting the PublicKeyToken of .Net assemblies","<p>What is the simplest way to find the Public-Key-Token of an assembly?</p>

<p>The simplest way I can think of would be a simple right-click, get public key, but this functionality isn't there, maybe there is a Visual Studio Extension for that?</p>

<p>I'm using Visual Studio 2010, if an extension is available.</p>
","<p>You can use the Ildasm.exe (IL Disassembler) to examine the assembly's metadata, which contains the fully qualified name.</p>

<p>Following MSDN:
<a href=""https://msdn.microsoft.com/en-us/library/2exyydhb(v=vs.110).aspx"" rel=""nofollow"">https://msdn.microsoft.com/en-us/library/2exyydhb(v=vs.110).aspx</a></p>
","138732","<.net><visual-studio><visual-studio-2010><public-key>","153","0","13","2019-10-17 13:52:10","3045089","2","41","4519059","","2018-08-29 08:03:00","2010-06-15 12:23:55",""
"3045033","Getting the PublicKeyToken of .Net assemblies","<p>What is the simplest way to find the Public-Key-Token of an assembly?</p>

<p>The simplest way I can think of would be a simple right-click, get public key, but this functionality isn't there, maybe there is a Visual Studio Extension for that?</p>

<p>I'm using Visual Studio 2010, if an extension is available.</p>
","<p>An alternate method would be if you have decompiler, just look it up in there, they usually provide the public key. I have looked at .Net Reflector, Telerik Just Decompile and ILSpy just decompile they seem to have the public key token displayed.</p>
","138732","<.net><visual-studio><visual-studio-2010><public-key>","153","1","13","2019-10-17 13:52:10","3045089","2","41","4519059","","2018-08-29 08:03:00","2010-06-15 12:23:55",""
"3045033","Getting the PublicKeyToken of .Net assemblies","<p>What is the simplest way to find the Public-Key-Token of an assembly?</p>

<p>The simplest way I can think of would be a simple right-click, get public key, but this functionality isn't there, maybe there is a Visual Studio Extension for that?</p>

<p>I'm using Visual Studio 2010, if an extension is available.</p>
","<p>The simplest way for me is to use <a href=""http://ilspy.net/"" rel=""noreferrer"">ILSpy</a>.</p>

<p>When you drag &amp; drop the assembly on its window and select the dropped assembly on the the left, you can see the public key token on the right side of the window.</p>

<p>(I also think that the newer versions will also display the public key of the signature, if you ever need that one... See here: <a href=""https://github.com/icsharpcode/ILSpy/issues/610#issuecomment-111189234"" rel=""noreferrer"">https://github.com/icsharpcode/ILSpy/issues/610#issuecomment-111189234</a>. Good stuff! ;))</p>
","138732","<.net><visual-studio><visual-studio-2010><public-key>","153","8","13","2019-10-17 13:52:10","3045089","2","41","4519059","","2018-08-29 08:03:00","2010-06-15 12:23:55",""
"3045033","Getting the PublicKeyToken of .Net assemblies","<p>What is the simplest way to find the Public-Key-Token of an assembly?</p>

<p>The simplest way I can think of would be a simple right-click, get public key, but this functionality isn't there, maybe there is a Visual Studio Extension for that?</p>

<p>I'm using Visual Studio 2010, if an extension is available.</p>
","<p>As an alternative, you can also use <code>linq</code> like this - </p>

<pre><code>    string key = string.Join ("""",assembly
                                .GetName()
                                .GetPublicKeyToken()
                                .Select (b =&gt; b.ToString (""x2"")));
</code></pre>
","138732","<.net><visual-studio><visual-studio-2010><public-key>","153","4","13","2019-10-17 13:52:10","3045089","2","41","4519059","","2018-08-29 08:03:00","2010-06-15 12:23:55",""
"3045033","Getting the PublicKeyToken of .Net assemblies","<p>What is the simplest way to find the Public-Key-Token of an assembly?</p>

<p>The simplest way I can think of would be a simple right-click, get public key, but this functionality isn't there, maybe there is a Visual Studio Extension for that?</p>

<p>I'm using Visual Studio 2010, if an extension is available.</p>
","<p>In case someone was looking for the assembly <em>Public Key</em> (like me), not the <em>Public Key Token</em> - using sn.exe works great, except you have to use <strong>-Tp</strong> switch, which will return both the Public Key and Public Key Token - more at <a href=""https://msdn.microsoft.com/en-us/library/office/ee539398(v=office.14).aspx"" rel=""nofollow noreferrer"">https://msdn.microsoft.com/en-us/library/office/ee539398(v=office.14).aspx</a> .</p>
","138732","<.net><visual-studio><visual-studio-2010><public-key>","153","3","13","2019-10-17 13:52:10","3045089","2","41","4519059","","2018-08-29 08:03:00","2010-06-15 12:23:55",""
"3045033","Getting the PublicKeyToken of .Net assemblies","<p>What is the simplest way to find the Public-Key-Token of an assembly?</p>

<p>The simplest way I can think of would be a simple right-click, get public key, but this functionality isn't there, maybe there is a Visual Studio Extension for that?</p>

<p>I'm using Visual Studio 2010, if an extension is available.</p>
","<p>Another options is to use the open source tool <a href=""https://github.com/NuGetPackageExplorer/NuGetPackageExplorer/"" rel=""nofollow noreferrer"">NuGet Package Explorer</a> for this.</p>

<p>From a Nuget package (.nupkg) you could check the PublicKeyToken, or drag the binary (.dll) in the tool. For the latter select first ""File -> new""</p>

<p><a href=""https://i.stack.imgur.com/kQvEo.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/kQvEo.png"" alt=""enter image description here""></a></p>
","138732","<.net><visual-studio><visual-studio-2010><public-key>","153","0","13","2019-10-17 13:52:10","3045089","2","41","4519059","","2018-08-29 08:03:00","2010-06-15 12:23:55",""
"42863913","key_load_public: invalid format","<p>I used PuTTY Key Generator to generate a 4096 bit RSA-2 key with a passphrase.</p>

<p>I save the .ppk and an openSSL format public key. The putty format public key doesn't work.</p>

<p>In any case, my error is as follows:</p>

<pre><code>$ ssh -T git@github.com
key_load_public: invalid format
Enter passphrase for key '/c/Users/Dan/.ssh/id_rsa':
Hi Dan! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<p>What's the issue?</p>

<p>I use Pageant to load the keys and i use Git Bash to try the ssh connection. I've also loaded the key into GitHub, not sure what i'm doing wrong.</p>

<p>I've tried adding a new line and not adding a new line in GitHub</p>
","<p>It seems that <code>ssh</code> cannot read your public key. But that doesn't matter.</p>

<p>You upload your <em>public key</em> to github, but you authenticate using your <em>private key</em>. See e.g. the FILES section in <code>ssh(1)</code>.</p>
","122812","<git><github><ssh><public-key>","63","5","5","2018-10-01 05:44:54","44391850","3","34","","","","2017-03-17 17:37:28",""
"42863913","key_load_public: invalid format","<p>I used PuTTY Key Generator to generate a 4096 bit RSA-2 key with a passphrase.</p>

<p>I save the .ppk and an openSSL format public key. The putty format public key doesn't work.</p>

<p>In any case, my error is as follows:</p>

<pre><code>$ ssh -T git@github.com
key_load_public: invalid format
Enter passphrase for key '/c/Users/Dan/.ssh/id_rsa':
Hi Dan! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<p>What's the issue?</p>

<p>I use Pageant to load the keys and i use Git Bash to try the ssh connection. I've also loaded the key into GitHub, not sure what i'm doing wrong.</p>

<p>I've tried adding a new line and not adding a new line in GitHub</p>
","<p>As <a href=""https://stackoverflow.com/a/42864089/3068190"">Roland</a> mentioned in their answer, it's a warning that the <code>ssh-agent</code> doesn't understand the format of the public key and even then, the public key will not be used locally.</p>

<p>However, I can also elaborate and answer why the warning is there. It simply boils down to the fact that the <em>PuTTY Key Generator</em> generates <strong>two different public key formats</strong> depending on what you do in the program.</p>

<p><strong>Note:</strong> Throughout my explanation, the key files I will be using/generating will be named <code>id_rsa</code> with their appropriate extensions. Furthermore, for copy-paste convenience, the parent folder of the keys will be assumed to be <code>~/.ssh/</code>. Adjust these details to suit your needs as desired.</p>

<h2>The Formats</h2>

<p><a href=""https://the.earth.li/~sgtatham/putty/0.69/htmldoc/Chapter8.html#puttygen-savepub"" rel=""noreferrer"">Link to the relevant PuTTY documentation</a></p>

<h3>SSH-2</h3>

<p>When you <strong>save</strong> a key using the <em>PuTTY Key Generator</em> using the ""Save public key"" button, it will be saved in the format defined by <a href=""https://tools.ietf.org/html/rfc4716#section-3"" rel=""noreferrer"">RFC 4716</a>.</p>

<p>Example:</p>

<pre><code>---- BEGIN SSH2 PUBLIC KEY ----
Comment: ""github-example-key""
AAAAB3NzaC1yc2EAAAABJQAAAQEAhl/CNy9wI1GVdiHAJQV0CkHnMEqW7+Si9WYF
i2fSBrsGcmqeb5EwgnhmTcPgtM5ptGBjUZR84nxjZ8SPmnLDiDyHDPIsmwLBHxcp
pY0fhRSGtWL5fT8DGm9EfXaO1QN8c31VU/IkD8niWA6NmHNE1qEqpph3DznVzIm3
oMrongEjGw7sDP48ZTZp2saYVAKEEuGC1YYcQ1g20yESzo7aP70ZeHmQqI9nTyEA
ip3mL20+qHNsHfW8hJAchaUN8CwNQABJaOozYijiIUgdbtSTMRDYPi7fjhgB3bA9
tBjh7cOyuU/c4M4D6o2mAVYdLAWMBkSoLG8Oel6TCcfpO/nElw==
---- END SSH2 PUBLIC KEY ----
</code></pre>

<h3>OpenSSH</h3>

<p>Contrary to popular belief, this format doesn't get saved by the generator. However it is generated and shown in the text box titled ""Public key for pasting into OpenSSH authorized_keys file"". To save it as a file, you have to manually copy it from the text box and paste it into a new text file.</p>

<p>For the key shown above, this would be:</p>

<pre><code>ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAhl/CNy9wI1GVdiHAJQV0CkHnMEqW7+Si9WYFi2fSBrsGcmqeb5EwgnhmTcPgtM5ptGBjUZR84nxjZ8SPmnLDiDyHDPIsmwLBHxcppY0fhRSGtWL5fT8DGm9EfXaO1QN8c31VU/IkD8niWA6NmHNE1qEqpph3DznVzIm3oMrongEjGw7sDP48ZTZp2saYVAKEEuGC1YYcQ1g20yESzo7aP70ZeHmQqI9nTyEAip3mL20+qHNsHfW8hJAchaUN8CwNQABJaOozYijiIUgdbtSTMRDYPi7fjhgB3bA9tBjh7cOyuU/c4M4D6o2mAVYdLAWMBkSoLG8Oel6TCcfpO/nElw== github-example-key
</code></pre>

<p>The format of the key is simply <code>ssh-rsa &lt;signature&gt; &lt;comment&gt;</code> and can be created by rearranging the SSH-2 formatted file.</p>

<h2>Regenerating Public Keys</h2>

<p>If you are making use of <code>ssh-agent</code>, you will likely also have access to <code>ssh-keygen</code>.</p>

<p>If you have your OpenSSH Private Key (<code>id_rsa</code> file), you can generate the OpenSSH Public Key File using:</p>

<pre><code>ssh-keygen -f ~/.ssh/id_rsa -y &gt; ~/.ssh/id_rsa.pub
</code></pre>

<p>If you only have the PUTTY Private Key (<code>id_rsa.ppk</code> file), you will need to convert it first.</p>

<ol>
<li>Open the <em>PuTTY Key Generator</em></li>
<li>On the menu bar, click ""File"" > ""Load private key""</li>
<li>Select your <code>id_rsa.ppk</code> file</li>
<li>On the menu bar, click ""Conversions"" > ""Export OpenSSH key""</li>
<li>Save the file as <code>id_rsa</code> (without an extension)</li>
</ol>

<p>Now that you have an OpenSSH Private Key, you can use the <code>ssh-keygen</code> tool as above to perform manipulations on the key.</p>

<h2>Bonus: The PKCS#1 PEM-encoded Public Key Format</h2>

<p>To be honest, I don't know what this key is used for as I haven't needed it. But I have it in my notes I've collated over the years and I'll include it here for wholesome goodness. The file will look like this:</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCAKCAQEAhl/CNy9wI1GVdiHAJQV0CkHnMEqW7+Si9WYFi2fSBrsGcmqeb5Ew
gnhmTcPgtM5ptGBjUZR84nxjZ8SPmnLDiDyHDPIsmwLBHxcppY0fhRSGtWL5fT8D
Gm9EfXaO1QN8c31VU/IkD8niWA6NmHNE1qEqpph3DznVzIm3oMrongEjGw7sDP48
ZTZp2saYVAKEEuGC1YYcQ1g20yESzo7aP70ZeHmQqI9nTyEAip3mL20+qHNsHfW8
hJAchaUN8CwNQABJaOozYijiIUgdbtSTMRDYPi7fjhgB3bA9tBjh7cOyuU/c4M4D
6o2mAVYdLAWMBkSoLG8Oel6TCcfpO/nElwIBJQ==
-----END RSA PUBLIC KEY-----
</code></pre>

<p>This file can be generated using an OpenSSH Private Key (as generated in ""Regenerating Public Keys"" above) using:</p>

<pre><code>ssh-keygen -f ~/.ssh/id_rsa -y -e -m pem &gt; ~/.ssh/id_rsa.pem
</code></pre>

<p>Alternatively, you can use an OpenSSH Public Key using:</p>

<pre><code>ssh-keygen -f ~/.ssh/id_rsa.pub -e -m pem &gt; ~/.ssh/id_rsa.pem
</code></pre>

<h2>References:</h2>

<ul>
<li><a href=""https://askubuntu.com/a/700172/618994"">""key_load_public: invalid format..."" on AskUbuntu</a></li>
<li><a href=""https://tools.ietf.org/html/rfc4716#section-3"" rel=""noreferrer"">The Secure Shell (SSH) Public Key File Format</a></li>
<li><a href=""http://blog.oddbit.com/2011/05/08/converting-openssh-public-keys/"" rel=""noreferrer"">Converting OpenSSH public keys</a></li>
</ul>
","122812","<git><github><ssh><public-key>","63","120","5","2018-10-01 05:44:54","44391850","3","34","","","","2017-03-17 17:37:28",""
"42863913","key_load_public: invalid format","<p>I used PuTTY Key Generator to generate a 4096 bit RSA-2 key with a passphrase.</p>

<p>I save the .ppk and an openSSL format public key. The putty format public key doesn't work.</p>

<p>In any case, my error is as follows:</p>

<pre><code>$ ssh -T git@github.com
key_load_public: invalid format
Enter passphrase for key '/c/Users/Dan/.ssh/id_rsa':
Hi Dan! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<p>What's the issue?</p>

<p>I use Pageant to load the keys and i use Git Bash to try the ssh connection. I've also loaded the key into GitHub, not sure what i'm doing wrong.</p>

<p>I've tried adding a new line and not adding a new line in GitHub</p>
","<p>In the case you copy your public key with clipboard and paste it, it may happen the public key string can be broken which contains new-line.</p>

<p>Make sure your public key string formed as one line.</p>
","122812","<git><github><ssh><public-key>","63","4","5","2018-10-01 05:44:54","44391850","3","34","","","","2017-03-17 17:37:28",""
"42863913","key_load_public: invalid format","<p>I used PuTTY Key Generator to generate a 4096 bit RSA-2 key with a passphrase.</p>

<p>I save the .ppk and an openSSL format public key. The putty format public key doesn't work.</p>

<p>In any case, my error is as follows:</p>

<pre><code>$ ssh -T git@github.com
key_load_public: invalid format
Enter passphrase for key '/c/Users/Dan/.ssh/id_rsa':
Hi Dan! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<p>What's the issue?</p>

<p>I use Pageant to load the keys and i use Git Bash to try the ssh connection. I've also loaded the key into GitHub, not sure what i'm doing wrong.</p>

<p>I've tried adding a new line and not adding a new line in GitHub</p>
","<p>Instead of directly saving the private key Go to Conversions and Export SSh Key.
Had the same issue and this worked for me</p>
","122812","<git><github><ssh><public-key>","63","2","5","2018-10-01 05:44:54","44391850","3","34","","","","2017-03-17 17:37:28",""
"42863913","key_load_public: invalid format","<p>I used PuTTY Key Generator to generate a 4096 bit RSA-2 key with a passphrase.</p>

<p>I save the .ppk and an openSSL format public key. The putty format public key doesn't work.</p>

<p>In any case, my error is as follows:</p>

<pre><code>$ ssh -T git@github.com
key_load_public: invalid format
Enter passphrase for key '/c/Users/Dan/.ssh/id_rsa':
Hi Dan! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<p>What's the issue?</p>

<p>I use Pageant to load the keys and i use Git Bash to try the ssh connection. I've also loaded the key into GitHub, not sure what i'm doing wrong.</p>

<p>I've tried adding a new line and not adding a new line in GitHub</p>
","<p>I had the same warning. It was a very old key. I regenerated a key on the current OpenSSH 7, and the error was gone. </p>
","122812","<git><github><ssh><public-key>","63","0","5","2018-10-01 05:44:54","44391850","3","34","","","","2017-03-17 17:37:28",""
"26505980","Github permission denied: ssh add agent has no identities","<p>This is my first time accessing github and I'm not experienced using console. I'm on a Macbook (using Bash). When I try to access github, I get this:</p>

<pre><code>git clone git@github.com:dhulihan/league-of-legends-data-scraper.git
Cloning into 'league-of-legends-data-scraper'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I've tried following the instructions on Github page about <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""noreferrer"">Permission denied</a>
When I use ssh -vT git@github.com, I get the following:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to github.com [192.30.252.129] port 22.
debug1: Connection established.
debug1: identity file /Users/XXXX/.ssh/id_rsa type -1
debug1: identity file /Users/XXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version libssh-0.6.0
debug1: no match: libssh-0.6.0
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-sha1 none
debug1: kex: client-&gt;server aes128-ctr hmac-sha1 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/XXXX/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/XXXX/.ssh/id_rsa
debug1: Trying private key: /Users/XXXX/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Next, eval ""$(ssh-agent -s)"" returns ""Agent pid 2314""
However, ssh-add -l returns ""The agent has no identities.""</p>

<p>And that's where I'm stuck. I've tried googling this problem and searching here on SO. I've tried accessing files in the ssh directory, but there are none. Just a folder called Knownusers.</p>

<p>Can someone help me with this issue?</p>
","<p>Full details in this <a href=""https://askubuntu.com/questions/363404/ssh-add-command-does-not-add-my-identity-to-ssh-agent"">answer</a>. </p>

<p>In summary, when <code>ssh-add -l</code> returns <code>The agent has no identities</code> it means that keys used by <code>ssh</code> (stored in files such as ~/.ssh/id_rsa, ~/.ssh/id_dsa, etc) are either missing, they are not known to the authentication agent (<code>ssh-agent</code>), or their permissions are set incorrectly (e.g., world writable).</p>

<p>If your keys are missing (i.e., you have not generated any keys), use 'ssh-keygen' (e.g., <code>ssh-keygen -t rsa</code>) to generate them, then use <code>ssh-add</code> to add them.</p>

<p>If keys exist but are not known to <code>ssh-agent</code> (e.g., they may be in a non-standard folder) use 'ssh-add' (e.g., <code>ssh-add /path/to/my-ssh-folder/id_rsa</code>) to add them.</p>

<p>See this <a href=""https://stackoverflow.com/questions/17846529/could-not-open-a-connection-to-your-authentication-agent"">answer</a> if you are having trouble with <code>ssh-add</code> or <code>ssh-agent</code>.</p>
","105839","<bash><github><ssh><permission-denied><public-key>","123","151","12","2019-09-13 18:09:00","","4","39","","","","2014-10-22 11:02:11",""
"26505980","Github permission denied: ssh add agent has no identities","<p>This is my first time accessing github and I'm not experienced using console. I'm on a Macbook (using Bash). When I try to access github, I get this:</p>

<pre><code>git clone git@github.com:dhulihan/league-of-legends-data-scraper.git
Cloning into 'league-of-legends-data-scraper'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I've tried following the instructions on Github page about <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""noreferrer"">Permission denied</a>
When I use ssh -vT git@github.com, I get the following:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to github.com [192.30.252.129] port 22.
debug1: Connection established.
debug1: identity file /Users/XXXX/.ssh/id_rsa type -1
debug1: identity file /Users/XXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version libssh-0.6.0
debug1: no match: libssh-0.6.0
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-sha1 none
debug1: kex: client-&gt;server aes128-ctr hmac-sha1 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/XXXX/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/XXXX/.ssh/id_rsa
debug1: Trying private key: /Users/XXXX/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Next, eval ""$(ssh-agent -s)"" returns ""Agent pid 2314""
However, ssh-add -l returns ""The agent has no identities.""</p>

<p>And that's where I'm stuck. I've tried googling this problem and searching here on SO. I've tried accessing files in the ssh directory, but there are none. Just a folder called Knownusers.</p>

<p>Can someone help me with this issue?</p>
","<p>try this:</p>

<pre><code>ssh-add ~/.ssh/id_rsa
</code></pre>

<p>worked for me</p>
","105839","<bash><github><ssh><permission-denied><public-key>","123","93","12","2019-09-13 18:09:00","","4","39","","","","2014-10-22 11:02:11",""
"26505980","Github permission denied: ssh add agent has no identities","<p>This is my first time accessing github and I'm not experienced using console. I'm on a Macbook (using Bash). When I try to access github, I get this:</p>

<pre><code>git clone git@github.com:dhulihan/league-of-legends-data-scraper.git
Cloning into 'league-of-legends-data-scraper'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I've tried following the instructions on Github page about <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""noreferrer"">Permission denied</a>
When I use ssh -vT git@github.com, I get the following:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to github.com [192.30.252.129] port 22.
debug1: Connection established.
debug1: identity file /Users/XXXX/.ssh/id_rsa type -1
debug1: identity file /Users/XXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version libssh-0.6.0
debug1: no match: libssh-0.6.0
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-sha1 none
debug1: kex: client-&gt;server aes128-ctr hmac-sha1 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/XXXX/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/XXXX/.ssh/id_rsa
debug1: Trying private key: /Users/XXXX/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Next, eval ""$(ssh-agent -s)"" returns ""Agent pid 2314""
However, ssh-add -l returns ""The agent has no identities.""</p>

<p>And that's where I'm stuck. I've tried googling this problem and searching here on SO. I've tried accessing files in the ssh directory, but there are none. Just a folder called Knownusers.</p>

<p>Can someone help me with this issue?</p>
","<p>I have been stucked a while on the same problem, which I eventually resolved.</p>

<p><strong>My problem</strong>: I could not execute any push. I could check &amp; see my remote (using <code>git remote -v</code>), but when I executed <code>git push origin master</code>, it returned : <code>Permission denied (publickey). fatal: Could not read from remote repository.</code> and so.</p>

<p><strong>How I solved it :</strong></p>

<ul>
<li><strong>I generated a key</strong> using <code>ssh-keygen -t rsa</code>. Entering a name for the key file (when asked) was useless.</li>
<li>I could then <strong>add the key (to git)</strong>: <code>ssh-add /Users/federico/.ssh/id_rsa</code> , which successfully returned <code>Identity added: /Users/myname/.ssh/id_rsa (/Users/myname/.ssh/id_rsa)</code></li>
<li><strong>I added the SSH key to github</strong> <a href=""https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/"" rel=""noreferrer"">using this help page</a>. </li>
<li>Having tried all the commands in Github's 'Permission denied publickey' help page, only the <code>ssh-add -l</code> command worked / seemed useful (after having ran the previous steps), it successfully returned my key. <a href=""https://help.github.com/articles/error-permission-denied-publickey/#verify-the-public-key-is-attached-to-your-account"" rel=""noreferrer"">The last step</a> shows you where to check your public key on your GitHub page. And this command will help you check all your keys : <code>ls -al ~/.ssh</code>.</li>
</ul>

<p>Then the push command eventually worked !</p>

<p>I hope this will help !
Best luck to all.</p>
","105839","<bash><github><ssh><permission-denied><public-key>","123","12","12","2019-09-13 18:09:00","","4","39","","","","2014-10-22 11:02:11",""
"26505980","Github permission denied: ssh add agent has no identities","<p>This is my first time accessing github and I'm not experienced using console. I'm on a Macbook (using Bash). When I try to access github, I get this:</p>

<pre><code>git clone git@github.com:dhulihan/league-of-legends-data-scraper.git
Cloning into 'league-of-legends-data-scraper'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I've tried following the instructions on Github page about <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""noreferrer"">Permission denied</a>
When I use ssh -vT git@github.com, I get the following:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to github.com [192.30.252.129] port 22.
debug1: Connection established.
debug1: identity file /Users/XXXX/.ssh/id_rsa type -1
debug1: identity file /Users/XXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version libssh-0.6.0
debug1: no match: libssh-0.6.0
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-sha1 none
debug1: kex: client-&gt;server aes128-ctr hmac-sha1 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/XXXX/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/XXXX/.ssh/id_rsa
debug1: Trying private key: /Users/XXXX/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Next, eval ""$(ssh-agent -s)"" returns ""Agent pid 2314""
However, ssh-add -l returns ""The agent has no identities.""</p>

<p>And that's where I'm stuck. I've tried googling this problem and searching here on SO. I've tried accessing files in the ssh directory, but there are none. Just a folder called Knownusers.</p>

<p>Can someone help me with this issue?</p>
","<p><strong>THE 2019 ANSWER for macOS Sierra &amp; High Sierra &amp; Catalina:</strong> </p>

<p><em>PS: most of the other answers will have you to create a new ssh key ... but you don't need to do that :)</em> </p>

<p><em>As described in detail on <a href=""https://openradar.appspot.com/27348363"" rel=""noreferrer"">https://openradar.appspot.com/27348363</a>, macOS/OS X till Yosemite used to remember SSH keys added by command <code>ssh-add -K &lt;key&gt;</code></em></p>

<p><strong>So here are the 4 steps i had to take in order for it to work:</strong> </p>

<p><strong>1:</strong> <code>ssh-add ~/.ssh/PATH_TO_YOUR_SSH_PRIVATE_KEY (e.g. ~/.ssh/id_rsa)</code></p>

<p><strong>2:</strong> Add the following in <code>~/.ssh/config</code></p>

<pre><code>Host * 
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile PATH_TO_YOUR_SSH_PRIVATE_KEY (e.g. ~/.ssh/id_rsa)
</code></pre>

<p><strong>3:</strong> make sure to remove any gitconfig entry that use osxkeychain helper:</p>

<pre><code> https://github.com/gregory/dotfiles/commit/e38000527fb1a82b577f2dcf685aeefd3b78a609#diff-6cb0f77b38346e0fed47293bdc6430c6L48
</code></pre>

<p><strong>4:</strong> restart your terminal for it to take effect.</p>
","105839","<bash><github><ssh><permission-denied><public-key>","123","33","12","2019-09-13 18:09:00","","4","39","","","","2014-10-22 11:02:11",""
"26505980","Github permission denied: ssh add agent has no identities","<p>This is my first time accessing github and I'm not experienced using console. I'm on a Macbook (using Bash). When I try to access github, I get this:</p>

<pre><code>git clone git@github.com:dhulihan/league-of-legends-data-scraper.git
Cloning into 'league-of-legends-data-scraper'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I've tried following the instructions on Github page about <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""noreferrer"">Permission denied</a>
When I use ssh -vT git@github.com, I get the following:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to github.com [192.30.252.129] port 22.
debug1: Connection established.
debug1: identity file /Users/XXXX/.ssh/id_rsa type -1
debug1: identity file /Users/XXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version libssh-0.6.0
debug1: no match: libssh-0.6.0
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-sha1 none
debug1: kex: client-&gt;server aes128-ctr hmac-sha1 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/XXXX/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/XXXX/.ssh/id_rsa
debug1: Trying private key: /Users/XXXX/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Next, eval ""$(ssh-agent -s)"" returns ""Agent pid 2314""
However, ssh-add -l returns ""The agent has no identities.""</p>

<p>And that's where I'm stuck. I've tried googling this problem and searching here on SO. I've tried accessing files in the ssh directory, but there are none. Just a folder called Knownusers.</p>

<p>Can someone help me with this issue?</p>
","<p>Run the following commands:</p>

<pre><code>ssh-keygen -t rsa
ssh-add /Users/*yourUserNameHere*/.ssh/id_rsa** 
pbcopy &lt; ~/.ssh/id_rsa.pub**
</code></pre>

<p>Go to your Github account : <a href=""https://github.com/settings/profile"" rel=""noreferrer"">https://github.com/settings/profile</a></p>

<p>1) Click : SSH and GPG keys</p>

<p>2) New SSH Key and Past it there</p>

<p>3) Add SSH Key </p>

<p>Done!</p>
","105839","<bash><github><ssh><permission-denied><public-key>","123","7","12","2019-09-13 18:09:00","","4","39","","","","2014-10-22 11:02:11",""
"26505980","Github permission denied: ssh add agent has no identities","<p>This is my first time accessing github and I'm not experienced using console. I'm on a Macbook (using Bash). When I try to access github, I get this:</p>

<pre><code>git clone git@github.com:dhulihan/league-of-legends-data-scraper.git
Cloning into 'league-of-legends-data-scraper'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I've tried following the instructions on Github page about <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""noreferrer"">Permission denied</a>
When I use ssh -vT git@github.com, I get the following:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to github.com [192.30.252.129] port 22.
debug1: Connection established.
debug1: identity file /Users/XXXX/.ssh/id_rsa type -1
debug1: identity file /Users/XXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version libssh-0.6.0
debug1: no match: libssh-0.6.0
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-sha1 none
debug1: kex: client-&gt;server aes128-ctr hmac-sha1 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/XXXX/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/XXXX/.ssh/id_rsa
debug1: Trying private key: /Users/XXXX/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Next, eval ""$(ssh-agent -s)"" returns ""Agent pid 2314""
However, ssh-add -l returns ""The agent has no identities.""</p>

<p>And that's where I'm stuck. I've tried googling this problem and searching here on SO. I've tried accessing files in the ssh directory, but there are none. Just a folder called Knownusers.</p>

<p>Can someone help me with this issue?</p>
","<p>first of all you need to go in your ssh directory<br>
for this type following command in your terminal in mac or whatever you use in window    </p>

<pre><code>cd ~/.ssh
</code></pre>

<p>now it is in the ssh<br>
here you can find all you ssh key/files related to your all projects. now, type the following command to show you if any ssh key available    </p>

<pre><code>ls
</code></pre>

<p>this will show you all available ssh, in my case there were two<br>
now, you will need to start an agent to add a ssh in it. For this type following command    </p>

<pre><code>eval ""$(ssh-agent -s)""
</code></pre>

<p>now last but not least you will add a ssh in this agent type following command    </p>

<pre><code>ssh-add ~/.ssh/your-ssh
</code></pre>

<p>replace </p>

<blockquote>
  <p>replace your-ssh with your ssh file name which you got a list form second step <code>ls command</code></p>
</blockquote>
","105839","<bash><github><ssh><permission-denied><public-key>","123","5","12","2019-09-13 18:09:00","","4","39","","","","2014-10-22 11:02:11",""
"26505980","Github permission denied: ssh add agent has no identities","<p>This is my first time accessing github and I'm not experienced using console. I'm on a Macbook (using Bash). When I try to access github, I get this:</p>

<pre><code>git clone git@github.com:dhulihan/league-of-legends-data-scraper.git
Cloning into 'league-of-legends-data-scraper'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I've tried following the instructions on Github page about <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""noreferrer"">Permission denied</a>
When I use ssh -vT git@github.com, I get the following:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to github.com [192.30.252.129] port 22.
debug1: Connection established.
debug1: identity file /Users/XXXX/.ssh/id_rsa type -1
debug1: identity file /Users/XXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version libssh-0.6.0
debug1: no match: libssh-0.6.0
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-sha1 none
debug1: kex: client-&gt;server aes128-ctr hmac-sha1 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/XXXX/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/XXXX/.ssh/id_rsa
debug1: Trying private key: /Users/XXXX/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Next, eval ""$(ssh-agent -s)"" returns ""Agent pid 2314""
However, ssh-add -l returns ""The agent has no identities.""</p>

<p>And that's where I'm stuck. I've tried googling this problem and searching here on SO. I've tried accessing files in the ssh directory, but there are none. Just a folder called Knownusers.</p>

<p>Can someone help me with this issue?</p>
","<p>This could cause for any new terminal, the agent id is different.
You need to add the Private key for the agent</p>

<pre><code>$ ssh-add &lt;path to your private key&gt;
</code></pre>
","105839","<bash><github><ssh><permission-denied><public-key>","123","5","12","2019-09-13 18:09:00","","4","39","","","","2014-10-22 11:02:11",""
"26505980","Github permission denied: ssh add agent has no identities","<p>This is my first time accessing github and I'm not experienced using console. I'm on a Macbook (using Bash). When I try to access github, I get this:</p>

<pre><code>git clone git@github.com:dhulihan/league-of-legends-data-scraper.git
Cloning into 'league-of-legends-data-scraper'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I've tried following the instructions on Github page about <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""noreferrer"">Permission denied</a>
When I use ssh -vT git@github.com, I get the following:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to github.com [192.30.252.129] port 22.
debug1: Connection established.
debug1: identity file /Users/XXXX/.ssh/id_rsa type -1
debug1: identity file /Users/XXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version libssh-0.6.0
debug1: no match: libssh-0.6.0
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-sha1 none
debug1: kex: client-&gt;server aes128-ctr hmac-sha1 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/XXXX/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/XXXX/.ssh/id_rsa
debug1: Trying private key: /Users/XXXX/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Next, eval ""$(ssh-agent -s)"" returns ""Agent pid 2314""
However, ssh-add -l returns ""The agent has no identities.""</p>

<p>And that's where I'm stuck. I've tried googling this problem and searching here on SO. I've tried accessing files in the ssh directory, but there are none. Just a folder called Knownusers.</p>

<p>Can someone help me with this issue?</p>
","<p>One additional element that I realized is that typically .ssh folder is created in your root folder in Mac OS X /Users/. If you try to use ssh -vT git@github.com from another folder it will give you an error even if you had added the correct key.</p>

<p>You need to add the key again (ssh-add 'correct path to id_rsa') from the current folder to authenticate successfully (assuming that you have already uploaded the key to your profile in Git)</p>
","105839","<bash><github><ssh><permission-denied><public-key>","123","1","12","2019-09-13 18:09:00","","4","39","","","","2014-10-22 11:02:11",""
"26505980","Github permission denied: ssh add agent has no identities","<p>This is my first time accessing github and I'm not experienced using console. I'm on a Macbook (using Bash). When I try to access github, I get this:</p>

<pre><code>git clone git@github.com:dhulihan/league-of-legends-data-scraper.git
Cloning into 'league-of-legends-data-scraper'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I've tried following the instructions on Github page about <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""noreferrer"">Permission denied</a>
When I use ssh -vT git@github.com, I get the following:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to github.com [192.30.252.129] port 22.
debug1: Connection established.
debug1: identity file /Users/XXXX/.ssh/id_rsa type -1
debug1: identity file /Users/XXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version libssh-0.6.0
debug1: no match: libssh-0.6.0
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-sha1 none
debug1: kex: client-&gt;server aes128-ctr hmac-sha1 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/XXXX/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/XXXX/.ssh/id_rsa
debug1: Trying private key: /Users/XXXX/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Next, eval ""$(ssh-agent -s)"" returns ""Agent pid 2314""
However, ssh-add -l returns ""The agent has no identities.""</p>

<p>And that's where I'm stuck. I've tried googling this problem and searching here on SO. I've tried accessing files in the ssh directory, but there are none. Just a folder called Knownusers.</p>

<p>Can someone help me with this issue?</p>
","<p>After struggling for long I was finally able to resolve this issue on Windows, For me the User env variable GIT_SSH was set to point to </p>

<blockquote>
  <p>""C:\Program Files(x86)\WinScp\PuTTY\plink.exe""</p>
</blockquote>

<p>which was installed along with WinScp. I changed the pointing to use default <strong>ssh.exe</strong> which comes with <a href=""https://git-scm.com/downloads"" rel=""nofollow noreferrer"">git-scm</a> ""C:\Program Files\Git\usr\bin\ssh.exe""</p>
","105839","<bash><github><ssh><permission-denied><public-key>","123","0","12","2019-09-13 18:09:00","","4","39","","","","2014-10-22 11:02:11",""
"26505980","Github permission denied: ssh add agent has no identities","<p>This is my first time accessing github and I'm not experienced using console. I'm on a Macbook (using Bash). When I try to access github, I get this:</p>

<pre><code>git clone git@github.com:dhulihan/league-of-legends-data-scraper.git
Cloning into 'league-of-legends-data-scraper'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I've tried following the instructions on Github page about <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""noreferrer"">Permission denied</a>
When I use ssh -vT git@github.com, I get the following:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to github.com [192.30.252.129] port 22.
debug1: Connection established.
debug1: identity file /Users/XXXX/.ssh/id_rsa type -1
debug1: identity file /Users/XXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version libssh-0.6.0
debug1: no match: libssh-0.6.0
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-sha1 none
debug1: kex: client-&gt;server aes128-ctr hmac-sha1 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/XXXX/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/XXXX/.ssh/id_rsa
debug1: Trying private key: /Users/XXXX/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Next, eval ""$(ssh-agent -s)"" returns ""Agent pid 2314""
However, ssh-add -l returns ""The agent has no identities.""</p>

<p>And that's where I'm stuck. I've tried googling this problem and searching here on SO. I've tried accessing files in the ssh directory, but there are none. Just a folder called Knownusers.</p>

<p>Can someone help me with this issue?</p>
","<p>Steps for BitBucket:</p>

<p>if you dont want to generate new key, <strong>SKIP ssh-keygen</strong></p>

<pre><code>ssh-keygen -t rsa 
</code></pre>

<p>Copy the public key to clipboard:</p>

<pre><code>clip &lt; ~/.ssh/id_rsa.pub
</code></pre>

<p>Login to Bit Bucket:
Go to View Profile -> Settings -> SSH Keys (In Security tab)
Click Add Key, 
Paste the key in the box, add a descriptive title</p>

<p>Go back to Git Bash :</p>

<pre><code>ssh-add -l
</code></pre>

<p>You should get : </p>

<pre><code>2048 SHA256:5zabdekjjjaalajafjLIa3Gl/k832A /c/Users/username/.ssh/id_rsa (RSA)
</code></pre>

<p>Now: <code>git pull</code> should work</p>
","105839","<bash><github><ssh><permission-denied><public-key>","123","0","12","2019-09-13 18:09:00","","4","39","","","","2014-10-22 11:02:11",""
"26505980","Github permission denied: ssh add agent has no identities","<p>This is my first time accessing github and I'm not experienced using console. I'm on a Macbook (using Bash). When I try to access github, I get this:</p>

<pre><code>git clone git@github.com:dhulihan/league-of-legends-data-scraper.git
Cloning into 'league-of-legends-data-scraper'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I've tried following the instructions on Github page about <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""noreferrer"">Permission denied</a>
When I use ssh -vT git@github.com, I get the following:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to github.com [192.30.252.129] port 22.
debug1: Connection established.
debug1: identity file /Users/XXXX/.ssh/id_rsa type -1
debug1: identity file /Users/XXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version libssh-0.6.0
debug1: no match: libssh-0.6.0
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-sha1 none
debug1: kex: client-&gt;server aes128-ctr hmac-sha1 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/XXXX/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/XXXX/.ssh/id_rsa
debug1: Trying private key: /Users/XXXX/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Next, eval ""$(ssh-agent -s)"" returns ""Agent pid 2314""
However, ssh-add -l returns ""The agent has no identities.""</p>

<p>And that's where I'm stuck. I've tried googling this problem and searching here on SO. I've tried accessing files in the ssh directory, but there are none. Just a folder called Knownusers.</p>

<p>Can someone help me with this issue?</p>
","<p>This worked for me:<br>
<code>chmod 700 .ssh 
 chmod 600 .ssh/id_rsa 
 chmod 644 .ssh/id_rsa.pub</code></p>

<p>Then, type this:
<code>ssh-add ~/.ssh/id_rsa</code></p>
","105839","<bash><github><ssh><permission-denied><public-key>","123","1","12","2019-09-13 18:09:00","","4","39","","","","2014-10-22 11:02:11",""
"26505980","Github permission denied: ssh add agent has no identities","<p>This is my first time accessing github and I'm not experienced using console. I'm on a Macbook (using Bash). When I try to access github, I get this:</p>

<pre><code>git clone git@github.com:dhulihan/league-of-legends-data-scraper.git
Cloning into 'league-of-legends-data-scraper'...
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I've tried following the instructions on Github page about <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""noreferrer"">Permission denied</a>
When I use ssh -vT git@github.com, I get the following:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to github.com [192.30.252.129] port 22.
debug1: Connection established.
debug1: identity file /Users/XXXX/.ssh/id_rsa type -1
debug1: identity file /Users/XXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version libssh-0.6.0
debug1: no match: libssh-0.6.0
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-sha1 none
debug1: kex: client-&gt;server aes128-ctr hmac-sha1 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Server host key: RSA 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/XXXX/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/XXXX/.ssh/id_rsa
debug1: Trying private key: /Users/XXXX/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Next, eval ""$(ssh-agent -s)"" returns ""Agent pid 2314""
However, ssh-add -l returns ""The agent has no identities.""</p>

<p>And that's where I'm stuck. I've tried googling this problem and searching here on SO. I've tried accessing files in the ssh directory, but there are none. Just a folder called Knownusers.</p>

<p>Can someone help me with this issue?</p>
","<p>I had this issue after restoring a hard drive from a backup. </p>

<p><strong>My problem:</strong> 
I could check &amp; see my remote (using git remote -v), but when I executed git push origin master, it returned : Permission denied (publickey). fatal: Could not read from remote repository. </p>

<p>I already had an SSH folder and SSH keys, and adding them via Terminal (<code>ssh-add /path/to/my-ssh-folder/id_rsa</code>) successfully added my identity, but I still couldn't push and still got the same error.  Generating a new key was a bad idea for me, because it was tied to other very secure permissions on AWS.</p>

<p>It turned out the link between the key and my Github profile had broken.</p>

<p><strong>Solution:</strong> 
Re-adding the key to Github in Profile > Settings > SSH and GPG keys resolved the issue. </p>

<p><strong>Also:</strong>
My account had 2-factor authentication set up. When this is the case, if Terminal requests credentials, use your username - but NOT your Github password.  For 2-factor authentication, you need to use your authentication code (for me, this was generated by Authy on my phone, and I had to copy it into Terminal for the pw).</p>
","105839","<bash><github><ssh><permission-denied><public-key>","123","0","12","2019-09-13 18:09:00","","4","39","","","","2014-10-22 11:02:11",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>I just thought I'd share that I found the answer to my own question.</p>

<p>Writing out my problem made it even more clear to me, and I further investigated into where I thought my problem lay: the ssh key</p>

<p>Turns out I was right. The issue wasn't with the key itself, but rather that I had not added it to my local Mac's list of known ssh keys. So even though my Heroku account had the correct key uploaded, my Mac could not authenticate with it because it could not find that key on my computer. The solution?</p>

<pre><code>ssh-add ~/.ssh/id_rsa
#and, to confirm it's been added to the known list of keys
ssh-add -l
</code></pre>

<p>I would like to give credit to <a href=""https://help.github.com/articles/error-permission-denied-publickey"" rel=""noreferrer"">https://help.github.com/articles/error-permission-denied-publickey</a> for being a good reference.</p>
","99922","<git><heroku><ssh><repository><public-key>","139","122","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>I know this has already been answered. But I would like to add my solution as it may helpful for others in the future..</p>

<p>A common key error is: <code>Permission denied (publickey)</code>. You can fix this by using <code>keys:add</code> to notify Heroku of your new key.</p>

<p>In short follow these steps: <a href=""https://devcenter.heroku.com/articles/keys"">https://devcenter.heroku.com/articles/keys</a></p>

<p><strong>First you have to create a key if you don't have one:</strong></p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p><strong>Second you have to add the key to Heroku:</strong></p>

<pre><code>heroku keys:add
</code></pre>
","99922","<git><heroku><ssh><repository><public-key>","139","279","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>I had the exact same error (on windows 7) and the cause was different.  I solved it in a different way so I thought I'd add the cause and solution here for others.  </p>

<p>Even though the error seemed to point to heroku really the error was saying <code>""Heroku can't get to the git repository""</code>.  I swore I had the same keys on all the servers because I created it and uploaded it to one after the other at the same time.  </p>

<p>After spending almost a day on this I realized that because git was only showing me the fingerprint and not the actual key. I couldn't verify that it's key matched the one on my HD or heroku.  I looked in the known hosts file and guess what... it shows the keys for each server and I was able to clearly see that the git and heroku public keys did not match.</p>

<p>1) I deleted all the files in my key folder, the key from github using their website, and the key from heroku using git bash and the command <code>heroku keys:clear</code></p>

<p>2) Followed github's instructions <a href=""https://help.github.com/articles/generating-ssh-keys"">here</a> to generate a new key pair and upload the public key to git</p>

<p>3) using <code>git bash-</code> <code>heroku keys:add</code>
to upload the same key to heroku.  </p>

<p>Now <code>git push heroku master</code> works.</p>

<p>what a nightmare, hope this helped somebody.</p>

<p>Bryan</p>
","99922","<git><heroku><ssh><repository><public-key>","139","31","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>The problem I was having is that I was only using https for my GitHub account. I needed to make sure that my GitHub account was setup for ssh access and that GitHub and heroku were both using the same public keys. These are the steps I took:</p>

<ol>
<li><p>Navigate to the ~/.ssh directory and delete the id_rsa and id_rsa.pub if they are there. I started with new keys, though it might not be necessary.</p>

<pre><code>$ cd ~/.ssh
$ rm id_rsa id_rsa.pub
</code></pre></li>
<li>Follow the steps on gitHub to <a href=""https://help.github.com/articles/generating-ssh-keys"">generate ssh keys</a></li>
<li><p>Login to heroku, create a new site and add your public keys:</p>

<pre><code>$ heroku login
...
$ heroku create
$ heroku keys:add
$ git push heroku master
</code></pre></li>
</ol>
","99922","<git><heroku><ssh><repository><public-key>","139","17","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>Had a similar issue, and tried lots of things.  Ultimately what worked for me, was to have Gnu on Windows installed (<a href=""https://github.com/bmatzelle/gow/releases"" rel=""nofollow"">https://github.com/bmatzelle/gow/releases</a>) , and ensure that it was using the ssh tool inside that directory and not the one with Git. Once installed test with (ensure if its in your environment PATH that it preceds Git\bin)</p>

<pre><code>C:\Git\htest2&gt;which ssh
C:\Program Files (x86)\Gow\bin\ssh.BAT
</code></pre>

<p>I used putty and pageant as described here:<a href=""http://rubyonrailswin.wordpress.com/2010/03/08/getting-git-to-work-on-heroku-on-windows-using-putty-plink-pageant/"" rel=""nofollow"">http://rubyonrailswin.wordpress.com/2010/03/08/getting-git-to-work-on-heroku-on-windows-using-putty-plink-pageant/</a></p>

<p>Once the keys had been sent to heroku  (heroku keys:add c:\Users\Person.ssh\id_rsa.pub), use</p>

<pre><code>ssh -v &lt;username&gt;@heroku.com 
</code></pre>

<p>and ensure that your stack is showing use of Putty - ie a working stack:</p>

<pre><code>Looking up host ""heroku.com""
Connecting to 50.19.85.132 port 22
Server version: SSH-2.0-Twisted
Using SSH protocol version 2
**We claim version: SSH-2.0-PuTTY_Release_0.62**
Using Diffie-Hellman with standard group ""group1""
Doing Diffie-Hellman key exchange with hash SHA-1
Host key fingerprint is:
ssh-rsa 2048 8b:48:5e:67:0e:c9:16:47:32:f2:87:0c:1f:c8:60:ad
Initialised AES-256 SDCTR client-&gt;server encryption
Initialised HMAC-SHA1 client-&gt;server MAC algorithm
Initialised AES-256 SDCTR server-&gt;client encryption
Initialised HMAC-SHA1 server-&gt;client MAC algorithm
Pageant is running. Requesting keys.
Pageant has 1 SSH-2 keys
Using username ""*--ommitted for security--*"".
**Trying Pageant key #0**
Authenticating with public key ""rsa-key-20140401"" from agent
Sending Pageant's response
Access granted
Opened channel for session
Server refused to allocate pty
Server refused to start a shell/command
FATAL ERROR: Server refused to start a shell/command
</code></pre>

<p>One that was running previously and failed:</p>

<pre><code>C:\Git\htest2&gt;ssh -v &lt;username&gt;@gmail.com@heroku.com
OpenSSH_4.6p1, OpenSSL 0.9.8e 23 Feb 2007
debug1: Connecting to heroku.com [50.19.85.156] port 22.
debug1: Connection established.
debug1: identity file /c/Users/Person/.ssh/identity type -1
debug1: identity file /c/Users/Person/.ssh/id_rsa type 1
debug1: identity file /c/Users/Person/.ssh/id_dsa type -1
debug1: Remote protocol version 2.0, remote software version Twisted
debug1: no match: Twisted
debug1: Enabling compatibility mode for protocol 2.0
**debug1: Local version string SSH-2.0-OpenSSH_4.6**
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug1: Host 'heroku.com' is known and matches the RSA host key.
debug1: Found key in /c/Users/Person/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /c/Users/Person/.ssh/identity
debug1: Offering public key: /c/Users/Person/.ssh/id_rsa
debug1: Server accepts key: pkalg ssh-rsa blen 277
debug1: Trying private key: /c/Users/Person/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>
","99922","<git><heroku><ssh><repository><public-key>","139","2","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>My way on Windows 8</p>

<ol>
<li><p>Add a directory with ssh-keygen to the system PATH variable, usually C:\Program Files (x86)\Git\bin</p></li>
<li><p>Open CMD, go to C:\Users\Me\</p></li>
<li><p>Generate SSH key <code>ssh-keygen -t rsa</code></p>

<p>Enter file in which to save the key (//.ssh/id_rsa): .ssh/id_rsa
(change a default incorrect path to .ssh/somegoodname_rsa)</p></li>
<li><p><a href=""https://devcenter.heroku.com/articles/keys"" rel=""nofollow"">Add the key to Heroku</a> <code>heroku keys:add</code></p>

<p>Select a created key from a list</p></li>
<li><p>Go to your app directory, write some beautiful code</p></li>
<li><p>Init a git repo <code>git init</code> <code>git add .</code> <code>git commit -m 'chore(release): v0.0.1</code></p></li>
<li><p><a href=""https://devcenter.heroku.com/articles/getting-started-with-nodejs#deploy-your-application-to-heroku"" rel=""nofollow"">Create Heroku application</a> <code>heroku create</code></p></li>
<li><p>Deploy your app <code>git push heroku master</code></p></li>
<li><p>Open your app <code>heroku open</code></p></li>
</ol>
","99922","<git><heroku><ssh><repository><public-key>","139","3","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>I had the same issue. And I tried to reset my keys as everyone said, but it still didn't worked. For was because I renamed the app.</p>

<p>So what I did was to reset my keys and also rename app from console. Check this question for more information: <a href=""https://stackoverflow.com/questions/6447081/heroku-push-app-problem"">Heroku push app problem</a></p>
","99922","<git><heroku><ssh><repository><public-key>","139","0","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>I use this method to solve this problem
Maybe you can try it</p>

<p>""Enable ssh-agent""</p>

<ol>
<li>Download git</li>
</ol>

<p><a href=""http://git-scm.com/"" rel=""nofollow"">http://git-scm.com/</a></p>

<ol>
<li><p>Install it</p></li>
<li><p>Enable ssh-agent</p></li>
</ol>

<p>C:\Program Files\Git\cmd</p>

<p>start-ssh-agent</p>

<p>The message disapper after I agent enabled
Hope this will help you</p>
","99922","<git><heroku><ssh><repository><public-key>","139","1","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>you need to create a new ssh key by typing the following
- ssh-keygen -t rsa</p>

<p>Then you need to add:
- heroku keys:add</p>

<p>Then if you type
- heroku open</p>

<p>The problem has been solved.</p>

<p>It worked for me anyway, you could give it a try...</p>
","99922","<git><heroku><ssh><repository><public-key>","139","2","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>SO So So simple solution , go to c:/Users/user_name/.ssh/ and delete all pub / private key pairs , this way heroku will generate keys for you.</p>
","99922","<git><heroku><ssh><repository><public-key>","139","0","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>i had the same case on linux ubuntu and just fixed it, it seems that OS was confused between the /root/.ssh/ and home/user/.ssh/ dir, what i did was:</p>

<ol>
<li>removed all keys from root and home/user .shh directory.</li>
<li><a href=""https://help.github.com/articles/generating-ssh-keys"" rel=""noreferrer"">generated a new key</a> make sure to pay attention to the path of creation (/home/you/.ssh/id_rsa) or (/root/.ssh/id_rsa)</li>
<li>check heroku keys <code>heroku keys</code></li>
<li>if keys in there clear <code>heroku keys:clear</code></li>
<li><code>heroku keys:add</code> now in here if heroku couldn't find a key and asked to generate one right no, and this mean you have the same issue as mine, do the add command like this <code>heroku keys:add /root/.ssh/id_rsa.pub</code> the path that you'll add will be the one that you got in step 2.</li>
<li>try <code>git push heroku master</code> now</li>
</ol>
","99922","<git><heroku><ssh><repository><public-key>","139","6","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>I had a similar heroku ssh error that I could not resolve.  </p>

<p>As a workaround, I used the new heroku http-git feature (http transport for ""heroku"" remote instead of ssh).  Details here: <a href=""https://devcenter.heroku.com/articles/http-git"" rel=""nofollow"">https://devcenter.heroku.com/articles/http-git</a></p>

<p>(Short version: if you have a project already setup the standard way, run heroku git:remote --http-init to change ""heroku"" remote to http.)</p>

<p>A good quick work around if you don't have time to fix/troubleshoot an ssh issue.</p>
","99922","<git><heroku><ssh><repository><public-key>","139","0","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>I got the same error, and because I have 4 ssh-keys, so I tried follow:</p>

<pre><code>ssh-keygen -t rsa
heroku keys:add
</code></pre>

<p>then, four options show:</p>

<pre><code>1) github_rsa.pub
2) id_boot2docker.pub
3) id_rsa.pub
4) sshkey.pub
</code></pre>

<p>I choose 3), the newest one</p>

<p>Then, I fix the error.</p>
","99922","<git><heroku><ssh><repository><public-key>","139","2","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"17626944","Heroku 'Permission denied (publickey) fatal: Could not read from remote repository' woes","<p>I've searched around for many hours on end looking to a solution to my seemingly easy-to-fix problem. It's not that my search turned up nothing, it's that my search turned up so many different solutions -none of which have worked.</p>

<p>Anyways, I am simply unable to push, pull, or fetch from my Heroku repository from my Mac. Every attempt gives me (as if it's mocking me) the following error:</p>

<blockquote>
  <p>'Permission denied (publickey). fatal: Could not read from remote
  repository.'</p>
</blockquote>

<p>I've tried (and re-tried) to fix it in many different ways. As I've said, I've spent a good chunk of the last two days searching around for an answer. Here are some of the things I've tried:</p>

<ul>
<li>heroku keys:clear followed by heroku keys:add</li>
<li>Regenerating an ssh key on my own with 'ssh-keygen -t rsa'</li>
<li>Clearing out my .ssh directory, followed by heroku keys:clear, followed by generating an ssh key</li>
<li>Deleting my app on heroku and recreating one (fortunately not much was on there)</li>
</ul>

<p>I can fetch from my GitHub repository fine, so I know it's not network connectivity (pinging heroku also works). </p>

<p>As a makeshift solution (that I hope doesn't turn into a permanent one), I've logged in to my Ubuntu Amazon AWS ec2 instance. Pulling and pushing to and from Heroku works perfectly. For this reason, I still feel as if the problem lies with the ssh key on my Mac. Both keys show up under my Heroku account. Does the email address at the end of the key matter?</p>

<p>EDIT: I can push and pull from GitHub fine (I'm not using ssh, however), so why not Heroku?</p>

<p>At this point I'm willing to try anything. Thanks!</p>
","<p>I'd like to add another solution since I didn't see it here.  My problem was that heroku was linking to the wrong url (since I kept playing around with url names).  Editing the remote url solved my problem:</p>

<pre><code>git remote set-url heroku &lt;heroku-url-here&gt;
</code></pre>
","99922","<git><heroku><ssh><repository><public-key>","139","1","14","2016-06-13 16:35:09","17631730","3","63","2345415","","2013-07-13 15:25:27","2013-07-13 04:21:53",""
"7260","How do I setup Public-Key Authentication?","<p>How do I setup Public-Key Authentication for SSH?</p>
","<p>For windows <a href=""http://the.earth.li/~sgtatham/putty/0.53b/htmldoc/Chapter8.html"" rel=""noreferrer"">this</a> is a good introduction and guide</p>

<p>Here are some good ssh-agents for systems other than linux.</p>

<ul>
<li>Windows - <a href=""http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html"" rel=""noreferrer"">pageant</a></li>
<li>OS X - <a href=""http://www.askbjoernhansen.com/2005/01/07/sshkeychain_ssh.html"" rel=""noreferrer"">SSHKeychain</a></li>
</ul>
","95560","<linux><ssh><private-key><public-key>","59","5","2","2017-03-28 21:33:55","9095","0","23","2838606","","2017-03-28 21:33:55","2008-08-10 17:50:11","2013-05-03 17:43:56"
"7260","How do I setup Public-Key Authentication?","<p>How do I setup Public-Key Authentication for SSH?</p>
","<p>If you have SSH installed, you should be able to run..</p>

<pre><code>ssh-keygen
</code></pre>

<p>Then go through the steps, you'll have two files, <code>id_rsa</code> and <code>id_rsa.pub</code> (the first is your private key, the second is your public key - the one you copy to remote machines)</p>

<p>Then, connect to the remote machine you want to login to, to the file <code>~/.ssh/authorized_keys</code> add the contents of your that <code>id_rsa.pub</code> file.</p>

<p>Oh, and <code>chmod 600</code> all the <code>id_rsa*</code> files (both locally and remote), so no other users can read them:</p>

<pre><code>chmod 600 ~/.ssh/id_rsa*
</code></pre>

<p>Similarly, ensure the remote <code>~/.ssh/authorized_keys</code> file is <code>chmod 600</code> also:</p>

<pre><code>chmod 600 ~/.ssh/authorized_keys
</code></pre>

<p>Then, when you do <code>ssh remote.machine</code>, it should ask you for the key's password, not the remote machine.</p>

<hr>

<p>To make it nicer to use, you can use <code>ssh-agent</code> to hold the decrypted keys in memory - this means you don't have to type your keypair's password every single time. To launch the agent, you run (including the back-tick quotes, which eval the output of the <code>ssh-agent</code> command)</p>

<pre><code>`ssh-agent`
</code></pre>

<p>On some distros, ssh-agent is started automatically. If you run <code>echo $SSH_AUTH_SOCK</code> and it shows a path (probably in /tmp/) it's already setup, so you can skip the previous command.</p>

<p>Then to add your key, you do</p>

<pre><code>ssh-add ~/.ssh/id_rsa
</code></pre>

<p>and enter your passphrase. It's stored until you remove it (using the <code>ssh-add -D</code> command, which removes all keys from the agent)</p>
","95560","<linux><ssh><private-key><public-key>","59","101","2","2017-03-28 21:33:55","9095","0","23","2838606","","2017-03-28 21:33:55","2008-08-10 17:50:11","2013-05-03 17:43:56"
"3116907","RSA: Get exponent and modulus given a public key","<p>I need to encrypt some data using RSA in JavaScript. All of the libraries around ask for an exponent and a modulus, yet I get a single <code>public.key</code> file from my opponent. </p>

<p>How do you retrieve the public <code>exponent</code> and <code>modulus</code> part from an RSA file?</p>
","<p>It depends on the tools you can use. I doubt there is a JavaScript too that could do it directly within the browser. It also depends if it's a one-off (always the same key) or whether you need to script it.</p>

<h2>Command-line / OpenSSL</h2>

<p>If you want to use something like OpenSSL on a unix command line, you can do something as follows.
I'm assuming you public.key file contains something like this:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmBAjFv+29CaiQqYZIw4P
J0q5Qz2gS7kbGleS3ai8Xbhu5n8PLomldxbRz0RpdCuxqd1yvaicqpDKe/TT09sR
mL1h8Sx3Qa3EQmqI0TcEEqk27Ak0DTFxuVrq7c5hHB5fbJ4o7iEq5MYfdSl4pZax
UxdNv4jRElymdap8/iOo3SU1RsaK6y7kox1/tm2cfWZZhMlRFYJnpoXpyNYrp+Yo
CNKxmZJnMsS698kaFjDlyznLlihwMroY0mQvdD7dCeBoVlfPUGPAlamwWyqtIU+9
5xVkSp3kxcNcNb/mePSKQIPafQ1sAmBKPwycA/1I5nLzDVuQa95ZWMn0JkphtFIh
HQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>Then, the commands would be:</p>

<pre><code>PUBKEY=`grep -v -- ----- public.key | tr -d '\n'`
</code></pre>

<p>Then, you can look into the ASN.1 structure:</p>

<pre><code>echo $PUBKEY | base64 -d | openssl asn1parse -inform DER -i
</code></pre>

<p>This should give you something like this:</p>

<pre><code>    0:d=0  hl=4 l= 290 cons: SEQUENCE          
    4:d=1  hl=2 l=  13 cons:  SEQUENCE          
    6:d=2  hl=2 l=   9 prim:   OBJECT            :rsaEncryption
   17:d=2  hl=2 l=   0 prim:   NULL              
   19:d=1  hl=4 l= 271 prim:  BIT STRING 
</code></pre>

<p>The modulus and public exponent are in the last BIT STRING, offset 19, so use <code>-strparse</code>:</p>

<pre><code> echo $PUBKEY | base64 -d | openssl asn1parse -inform DER -i -strparse 19
</code></pre>

<p>This will give you the modulus and the public exponent, in hexadecimal (the two INTEGERs):</p>

<pre><code>    0:d=0  hl=4 l= 266 cons: SEQUENCE          
    4:d=1  hl=4 l= 257 prim:  INTEGER           :98102316FFB6F426A242A619230E0F274AB9433DA04BB91B1A5792DDA8BC5DB86EE67F0F2E89A57716D1CF4469742BB1A9DD72BDA89CAA90CA7BF4D3D3DB1198BD61F12C7741ADC4426A88D1370412A936EC09340D3171B95AEAEDCE611C1E5F6C9E28EE212AE4C61F752978A596B153174DBF88D1125CA675AA7CFE23A8DD253546C68AEB2EE4A31D7FB66D9C7D665984C951158267A685E9C8D62BA7E62808D2B199926732C4BAF7C91A1630E5CB39CB96287032BA18D2642F743EDD09E0685657CF5063C095A9B05B2AAD214FBDE715644A9DE4C5C35C35BFE678F48A4083DA7D0D6C02604A3F0C9C03FD48E672F30D5B906BDE5958C9F4264A61B452211D
  265:d=1  hl=2 l=   3 prim:  INTEGER           :010001
</code></pre>

<p>That's probably fine if it's always the same key, but this is probably not very convenient to put in a script.</p>

<p>Alternatively (and this might be easier to put into a script),</p>

<pre><code>openssl rsa -pubin -inform PEM -text -noout &lt; public.key
</code></pre>

<p>will return this:</p>

<pre><code>Modulus (2048 bit):
    00:98:10:23:16:ff:b6:f4:26:a2:42:a6:19:23:0e:
    0f:27:4a:b9:43:3d:a0:4b:b9:1b:1a:57:92:dd:a8:
    bc:5d:b8:6e:e6:7f:0f:2e:89:a5:77:16:d1:cf:44:
    69:74:2b:b1:a9:dd:72:bd:a8:9c:aa:90:ca:7b:f4:
    d3:d3:db:11:98:bd:61:f1:2c:77:41:ad:c4:42:6a:
    88:d1:37:04:12:a9:36:ec:09:34:0d:31:71:b9:5a:
    ea:ed:ce:61:1c:1e:5f:6c:9e:28:ee:21:2a:e4:c6:
    1f:75:29:78:a5:96:b1:53:17:4d:bf:88:d1:12:5c:
    a6:75:aa:7c:fe:23:a8:dd:25:35:46:c6:8a:eb:2e:
    e4:a3:1d:7f:b6:6d:9c:7d:66:59:84:c9:51:15:82:
    67:a6:85:e9:c8:d6:2b:a7:e6:28:08:d2:b1:99:92:
    67:32:c4:ba:f7:c9:1a:16:30:e5:cb:39:cb:96:28:
    70:32:ba:18:d2:64:2f:74:3e:dd:09:e0:68:56:57:
    cf:50:63:c0:95:a9:b0:5b:2a:ad:21:4f:bd:e7:15:
    64:4a:9d:e4:c5:c3:5c:35:bf:e6:78:f4:8a:40:83:
    da:7d:0d:6c:02:60:4a:3f:0c:9c:03:fd:48:e6:72:
    f3:0d:5b:90:6b:de:59:58:c9:f4:26:4a:61:b4:52:
    21:1d
Exponent: 65537 (0x10001)
</code></pre>

<h2>Java</h2>

<p>It depends on the input format. If it's an X.509 certificate in a keystore, use <code>(RSAPublicKey)cert.getPublicKey()</code>: this object has two getters for the modulus and the exponent.</p>

<p>If it's in the format as above, you might want to use <a href=""http://www.bouncycastle.org/"" rel=""noreferrer"">BouncyCastle</a> and its <code>PEMReader</code> to read it. I haven't tried the following code, but this would look more or less like this:</p>

<pre><code>PEMReader pemReader = new PEMReader(new FileReader(""file.pem""));
Object obj = pemReader.readObject();
pemReader.close();
if (obj instanceof X509Certificate) {
   // Just in case your file contains in fact an X.509 certificate,
   // useless otherwise.
   obj = ((X509Certificate)obj).getPublicKey();
}
if (obj instanceof RSAPublicKey) {
   // ... use the getters to get the BigIntegers.
}
</code></pre>

<p>(You can use BouncyCastle similarly in C# too.)</p>
","93641","<openssl><rsa><public-key>","49","98","5","2018-10-02 22:56:13","3117100","0","36","31751","","2013-08-08 11:33:41","2010-06-25 09:23:27",""
"3116907","RSA: Get exponent and modulus given a public key","<p>I need to encrypt some data using RSA in JavaScript. All of the libraries around ask for an exponent and a modulus, yet I get a single <code>public.key</code> file from my opponent. </p>

<p>How do you retrieve the public <code>exponent</code> and <code>modulus</code> part from an RSA file?</p>
","<p>Beware the leading 00 that can appear in the modulus when using: </p>

<pre><code>openssl rsa -pubin -inform PEM -text -noout &lt; public.key
</code></pre>

<p>The example modulus contains 257 bytes rather than 256 bytes because of that 00, which is included because the 9 in 98 looks like a negative signed number.</p>
","93641","<openssl><rsa><public-key>","49","28","5","2018-10-02 22:56:13","3117100","0","36","31751","","2013-08-08 11:33:41","2010-06-25 09:23:27",""
"3116907","RSA: Get exponent and modulus given a public key","<p>I need to encrypt some data using RSA in JavaScript. All of the libraries around ask for an exponent and a modulus, yet I get a single <code>public.key</code> file from my opponent. </p>

<p>How do you retrieve the public <code>exponent</code> and <code>modulus</code> part from an RSA file?</p>
","<p>If you need to parse ASN.1 objects in script, there's a library for that: <a href=""https://github.com/lapo-luchini/asn1js"" rel=""nofollow"">https://github.com/lapo-luchini/asn1js</a></p>

<p>For doing the math, I found jsbn convenient: <a href=""http://www-cs-students.stanford.edu/~tjw/jsbn/"" rel=""nofollow"">http://www-cs-students.stanford.edu/~tjw/jsbn/</a></p>

<p>Walking the ASN.1 structure and extracting the exp/mod/subject/etc. is up to you -- I never got that far!</p>
","93641","<openssl><rsa><public-key>","49","1","5","2018-10-02 22:56:13","3117100","0","36","31751","","2013-08-08 11:33:41","2010-06-25 09:23:27",""
"3116907","RSA: Get exponent and modulus given a public key","<p>I need to encrypt some data using RSA in JavaScript. All of the libraries around ask for an exponent and a modulus, yet I get a single <code>public.key</code> file from my opponent. </p>

<p>How do you retrieve the public <code>exponent</code> and <code>modulus</code> part from an RSA file?</p>
","<p>Mostly for my own reference, here's how you get it from a private key generated by ssh-keygen</p>

<pre><code>openssl rsa -text -noout -in ~/.ssh/id_rsa
</code></pre>

<p>Of course, this only works with the private key.</p>
","93641","<openssl><rsa><public-key>","49","-1","5","2018-10-02 22:56:13","3117100","0","36","31751","","2013-08-08 11:33:41","2010-06-25 09:23:27",""
"3116907","RSA: Get exponent and modulus given a public key","<p>I need to encrypt some data using RSA in JavaScript. All of the libraries around ask for an exponent and a modulus, yet I get a single <code>public.key</code> file from my opponent. </p>

<p>How do you retrieve the public <code>exponent</code> and <code>modulus</code> part from an RSA file?</p>
","<p>Apart from the above answers, we can use <code>asn1parse</code> to get the values</p>

<pre><code>$ openssl asn1parse -i -in pub0.der -inform DER -offset 24
0:d=0  hl=4 l= 266 cons: SEQUENCE
4:d=1  hl=4 l= 257 prim:  INTEGER           :C9131430CCE9C42F659623BDC73A783029A23E4BA3FAF74FE3CF452F9DA9DAF29D6F46556E423FB02610BC4F84E19F87333EAD0BB3B390A3EFA7FB392E935065D80A27589A21CA051FA226195216D8A39F151BD0334965551744566AD3DAEB53EBA27783AE08BAAACA406C27ED8BE614518C8CD7D14BBE7AFEBE1D8D03374DAE7B7564CF1182A7B3BA115CD9416AB899C5803388EE66FA3676750A77AC870EDA027DC95E57B9B4E864A3C98F1BA99A4726C085178EA8FC6C549BE5EDF970CCB8D8F9AEDEE3F5CFDE574327D05ED04060B2525FB6711F1D78254FF59089199892A9ECC7D4E4950E0CD2246E1E613889722D73DB56B24E57F3943E11520776BC4F
265:d=1  hl=2 l= 3 prim:  INTEGER           :010001
</code></pre>

<p>Now, to get to this offset,we try the default asn1parse</p>

<pre><code>$ openssl asn1parse -i -in pub0.der -inform DER
 0:d=0  hl=4 l= 290 cons: SEQUENCE
 4:d=1  hl=2 l=  13 cons:  SEQUENCE
 6:d=2  hl=2 l=   9 prim:   OBJECT            :rsaEncryption
17:d=2  hl=2 l=   0 prim:   NULL
19:d=1  hl=4 l= 271 prim:  BIT STRING
</code></pre>

<p>We need to get to the BIT String part, so we add the sizes</p>

<p><code>depth_0_header(4) + depth_1_full_size(2 + 13) + Container_1_EOC_bit + BIT_STRING_header(4) = 24</code></p>

<p>This can be better visialized at: <a href=""https://lapo.it/asn1js/#MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyRMUMMzpxC9lliO9xzp4MCmiPkuj-vdP489FL52p2vKdb0ZVbkI_sCYQvE-E4Z-HMz6tC7OzkKPvp_s5LpNQZdgKJ1iaIcoFH6ImGVIW2KOfFRvQM0llVRdEVmrT2utT66J3g64IuqrKQGwn7YvmFFGMjNfRS756_r4djQM3Ta57dWTPEYKns7oRXNlBariZxYAziO5m-jZ2dQp3rIcO2gJ9yV5XubToZKPJjxupmkcmwIUXjqj8bFSb5e35cMy42Pmu3uP1z95XQyfQXtBAYLJSX7ZxHx14JU_1kIkZmJKp7MfU5JUODNIkbh5hOIlyLXPbVrJOV_OUPhFSB3a8TwIDAQAB"" rel=""nofollow noreferrer"">ASN.1 Parser</a>, if you hover at tags, you will see the offsets</p>

<p>Another amazing resource: <a href=""https://docs.microsoft.com/en-gb/windows/desktop/SecCertEnroll/about-sequence"" rel=""nofollow noreferrer"">Microsoft's ASN.1 Docs</a></p>
","93641","<openssl><rsa><public-key>","49","0","5","2018-10-02 22:56:13","3117100","0","36","31751","","2013-08-08 11:33:41","2010-06-25 09:23:27",""
"8382847","How to ssh connect through python Paramiko with ppk public key","<p>i'm using <a href=""http://www.lag.net/paramiko/"" rel=""noreferrer"">Paramiko</a> to connect through ssh to a server.</p>

<p>Basic authentication works well, but i can't understand how to connect with public key.</p>

<p>When i connect with putty, the server tell me this:</p>

<pre><code>Using username ""root"".
Authenticating with public key ""rsa-key@ddddd.com""
Passphrase for key ""rsa-key@ddddd.com"": [i've inserted the passphrase here]
Last login: Mon Dec  5 09:25:18 2011 from ...
</code></pre>

<p>I connect to it with this ppk file:</p>

<pre><code>PuTTY-User-Key-File-2: ssh-rsa
Encryption: aes256-cbc
Comment: rsa-key@dddd.com
Public-Lines: 4
[4 lines key]
Private-Lines: 8
[8 lines key]
Private-MAC: [hash]
</code></pre>

<p>With basic auth the error i get (from the log) is:</p>

<pre><code>DEB [20111205-09:48:44.328] thr=1   paramiko.transport: userauth is OK
DEB [20111205-09:48:44.927] thr=1   paramiko.transport: Authentication type (password) not permitted.
DEB [20111205-09:48:44.927] thr=1   paramiko.transport: Allowed methods: ['publickey', 'gssapi-with-mic']
</code></pre>

<p>I've tried to include that ppk file and set to auth_public_key, but didn't work.</p>

<p>Can you help me?</p>
","<p>Ok @Adam and @Kimvais were right, paramiko cannot parse .ppk files.</p>

<p>So the way to go (thanks to @JimB too) is to convert .ppk file to openssh private key format; this can be achieved using <a href=""http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html"" rel=""noreferrer"">Puttygen</a> as described <a href=""https://stackoverflow.com/questions/2224066/how-to-convert-ssh-keypairs-generated-using-puttygenwindows-into-key-pairs-use"">here</a>.</p>

<p>Then it's very simple getting connected with it:</p>

<pre><code>import paramiko
ssh = paramiko.SSHClient()

ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

ssh.connect('&lt;hostname&gt;', username='&lt;username&gt;', password='&lt;password&gt;', key_filename='&lt;path/to/openssh-private-key-file&gt;')

stdin, stdout, stderr = ssh.exec_command('ls')
print stdout.readlines()
ssh.close()
</code></pre>
","88278","<python><ssh><putty><paramiko><public-key>","52","68","3","2019-02-06 05:21:59","8417181","5","14","850848","","2018-08-29 08:59:33","2011-12-05 08:51:51",""
"8382847","How to ssh connect through python Paramiko with ppk public key","<p>i'm using <a href=""http://www.lag.net/paramiko/"" rel=""noreferrer"">Paramiko</a> to connect through ssh to a server.</p>

<p>Basic authentication works well, but i can't understand how to connect with public key.</p>

<p>When i connect with putty, the server tell me this:</p>

<pre><code>Using username ""root"".
Authenticating with public key ""rsa-key@ddddd.com""
Passphrase for key ""rsa-key@ddddd.com"": [i've inserted the passphrase here]
Last login: Mon Dec  5 09:25:18 2011 from ...
</code></pre>

<p>I connect to it with this ppk file:</p>

<pre><code>PuTTY-User-Key-File-2: ssh-rsa
Encryption: aes256-cbc
Comment: rsa-key@dddd.com
Public-Lines: 4
[4 lines key]
Private-Lines: 8
[8 lines key]
Private-MAC: [hash]
</code></pre>

<p>With basic auth the error i get (from the log) is:</p>

<pre><code>DEB [20111205-09:48:44.328] thr=1   paramiko.transport: userauth is OK
DEB [20111205-09:48:44.927] thr=1   paramiko.transport: Authentication type (password) not permitted.
DEB [20111205-09:48:44.927] thr=1   paramiko.transport: Allowed methods: ['publickey', 'gssapi-with-mic']
</code></pre>

<p>I've tried to include that ppk file and set to auth_public_key, but didn't work.</p>

<p>Can you help me?</p>
","<p>To create a valid DSA format private key supported by Paramiko in Puttygen. </p>

<p>Click on Conversions then Export OpenSSH Key</p>

<p><img src=""https://i.stack.imgur.com/yKTkp.png"" alt=""enter image description here""></p>
","88278","<python><ssh><putty><paramiko><public-key>","52","5","3","2019-02-06 05:21:59","8417181","5","14","850848","","2018-08-29 08:59:33","2011-12-05 08:51:51",""
"8382847","How to ssh connect through python Paramiko with ppk public key","<p>i'm using <a href=""http://www.lag.net/paramiko/"" rel=""noreferrer"">Paramiko</a> to connect through ssh to a server.</p>

<p>Basic authentication works well, but i can't understand how to connect with public key.</p>

<p>When i connect with putty, the server tell me this:</p>

<pre><code>Using username ""root"".
Authenticating with public key ""rsa-key@ddddd.com""
Passphrase for key ""rsa-key@ddddd.com"": [i've inserted the passphrase here]
Last login: Mon Dec  5 09:25:18 2011 from ...
</code></pre>

<p>I connect to it with this ppk file:</p>

<pre><code>PuTTY-User-Key-File-2: ssh-rsa
Encryption: aes256-cbc
Comment: rsa-key@dddd.com
Public-Lines: 4
[4 lines key]
Private-Lines: 8
[8 lines key]
Private-MAC: [hash]
</code></pre>

<p>With basic auth the error i get (from the log) is:</p>

<pre><code>DEB [20111205-09:48:44.328] thr=1   paramiko.transport: userauth is OK
DEB [20111205-09:48:44.927] thr=1   paramiko.transport: Authentication type (password) not permitted.
DEB [20111205-09:48:44.927] thr=1   paramiko.transport: Allowed methods: ['publickey', 'gssapi-with-mic']
</code></pre>

<p>I've tried to include that ppk file and set to auth_public_key, but didn't work.</p>

<p>Can you help me?</p>
","<p>For me I doing this:</p>

<pre><code>import paramiko
hostname = 'my hostname or IP' 
myuser   = 'the user to ssh connect'
mySSHK   = '/path/to/sshkey.pub'
sshcon   = paramiko.SSHClient()  # will create the object
sshcon.set_missing_host_key_policy(paramiko.AutoAddPolicy()) # no known_hosts error
sshcon.connect(hostname, username=myuser, key_filename=mySSHK) # no passwd needed
</code></pre>

<p>works for me pretty ok</p>
","88278","<python><ssh><putty><paramiko><public-key>","52","12","3","2019-02-06 05:21:59","8417181","5","14","850848","","2018-08-29 08:59:33","2011-12-05 08:51:51",""
"30075461","How do I add my own public key to Vagrant VM?","<p>I got a problem with adding an ssh key to a Vagrant VM. Basically the setup that I have here works fine. Once the VMs are created, I can access them via <code>vagrant ssh</code>, the user ""vagrant"" exists and there's an ssh key for this user in the <code>authorized_keys</code> file.</p>

<p>What I'd like to do now is: to be able to connect to those VMs via <code>ssh</code> or use <code>scp</code>. So I would only need to add my public key from <code>id_rsa.pub</code> to the <code>authorized_keys</code> - just like I'd do with <code>ssh-copy-id</code>. </p>

<p>Is there a way to tell Vagrant during the setup that my public key should be included? If not (which is likely, according to my google results), is there a way to easily append my public key during the vagrant setup?</p>
","<p>Copying the desired public key would fall squarely into the <a href=""http://docs.vagrantup.com/v2/provisioning/index.html"" rel=""nofollow noreferrer"">provisioning</a> phase. The exact answer depends on what provisioning you fancy to use (shell, Chef, Puppet etc). The most trivial would be a <code>file</code> provisioner for the key, something along this:</p>

<pre class=""lang-rb prettyprint-override""><code>config.vm.provision ""file"", source: ""~/.ssh/id_rsa.pub"", destination: ""~/.ssh/me.pub""
</code></pre>

<p>Well, actually you need to append to authorized_keys. Use the the shell provisioner, like so:</p>

<pre class=""lang-rb prettyprint-override""><code>config.vm.provision ""shell"", inline: &lt;&lt;-SHELL
  cat /home/vagrant/.ssh/id_rsa.pub &gt;&gt; /home/vagrant/.ssh/authorized_keys
SHELL
end
</code></pre>

<p>You can also use a true provisioner, like <a href=""http://docs.vagrantup.com/v2/provisioning/puppet_apply.html"" rel=""nofollow noreferrer"">Puppet</a>. For example see <a href=""http://blog.scottlowe.org/2013/10/21/managing-ssh-authorized-keys-with-puppet/"" rel=""nofollow noreferrer"">Managing SSH Authorized Keys with Puppet</a>.</p>
","70414","<ssh><vagrant><public-key>","65","39","11","2019-09-28 22:45:52","30075596","0","32","117259","","2017-07-10 18:15:06","2015-05-06 11:31:13",""
"30075461","How do I add my own public key to Vagrant VM?","<p>I got a problem with adding an ssh key to a Vagrant VM. Basically the setup that I have here works fine. Once the VMs are created, I can access them via <code>vagrant ssh</code>, the user ""vagrant"" exists and there's an ssh key for this user in the <code>authorized_keys</code> file.</p>

<p>What I'd like to do now is: to be able to connect to those VMs via <code>ssh</code> or use <code>scp</code>. So I would only need to add my public key from <code>id_rsa.pub</code> to the <code>authorized_keys</code> - just like I'd do with <code>ssh-copy-id</code>. </p>

<p>Is there a way to tell Vagrant during the setup that my public key should be included? If not (which is likely, according to my google results), is there a way to easily append my public key during the vagrant setup?</p>
","<p>You can use Ruby's core File module, like so:</p>

<pre class=""lang-rb prettyprint-override""><code>  config.vm.provision ""shell"" do |s|
    ssh_pub_key = File.readlines(""#{Dir.home}/.ssh/id_rsa.pub"").first.strip
    s.inline = &lt;&lt;-SHELL
      echo #{ssh_pub_key} &gt;&gt; /home/vagrant/.ssh/authorized_keys
      echo #{ssh_pub_key} &gt;&gt; /root/.ssh/authorized_keys
    SHELL
  end
</code></pre>

<p>This working example appends <code>~/.ssh/id_rsa.pub</code> to the <code>~/.ssh/authorized_keys</code> of both the vagrant and root user, which will allow you to use your existing SSH key.</p>
","70414","<ssh><vagrant><public-key>","65","64","11","2019-09-28 22:45:52","30075596","0","32","117259","","2017-07-10 18:15:06","2015-05-06 11:31:13",""
"30075461","How do I add my own public key to Vagrant VM?","<p>I got a problem with adding an ssh key to a Vagrant VM. Basically the setup that I have here works fine. Once the VMs are created, I can access them via <code>vagrant ssh</code>, the user ""vagrant"" exists and there's an ssh key for this user in the <code>authorized_keys</code> file.</p>

<p>What I'd like to do now is: to be able to connect to those VMs via <code>ssh</code> or use <code>scp</code>. So I would only need to add my public key from <code>id_rsa.pub</code> to the <code>authorized_keys</code> - just like I'd do with <code>ssh-copy-id</code>. </p>

<p>Is there a way to tell Vagrant during the setup that my public key should be included? If not (which is likely, according to my google results), is there a way to easily append my public key during the vagrant setup?</p>
","<p>There's a more ""elegant"" way of accomplishing what you want to do. You can find the existing private key and use it instead of going through the trouble of adding your public key.</p>

<p>Proceed like this to see the path to existing private key (look below for <em>IdentityFile</em>): </p>

<p>run <pre> vagrant ssh-config </pre></p>

<p>result:</p>

<pre>
$ vagrant ssh-config
Host magento2.vagrant150
  HostName 127.0.0.1
  User vagrant
  Port 3150
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile ""/Users/madismanni/m2/vagrant-magento/.vagrant/machines/magento2.vagrant150/virtualbox/private_key""
  IdentitiesOnly yes
  LogLevel FATAL
</pre>

<p>Then you can use the private key like this, note also the switch for switching off password authentication</p>

<pre>
ssh -i /Users/madismanni/m2/vagrant-magento/.vagrant/machines/magento2.vagrant150/virtualbox/private_key -o PasswordAuthentication=no vagrant@127.0.0.1 -p 3150
</pre>
","70414","<ssh><vagrant><public-key>","65","33","11","2019-09-28 22:45:52","30075596","0","32","117259","","2017-07-10 18:15:06","2015-05-06 11:31:13",""
"30075461","How do I add my own public key to Vagrant VM?","<p>I got a problem with adding an ssh key to a Vagrant VM. Basically the setup that I have here works fine. Once the VMs are created, I can access them via <code>vagrant ssh</code>, the user ""vagrant"" exists and there's an ssh key for this user in the <code>authorized_keys</code> file.</p>

<p>What I'd like to do now is: to be able to connect to those VMs via <code>ssh</code> or use <code>scp</code>. So I would only need to add my public key from <code>id_rsa.pub</code> to the <code>authorized_keys</code> - just like I'd do with <code>ssh-copy-id</code>. </p>

<p>Is there a way to tell Vagrant during the setup that my public key should be included? If not (which is likely, according to my google results), is there a way to easily append my public key during the vagrant setup?</p>
","<p>A shorter and more correct code should be:</p>

<pre class=""lang-rb prettyprint-override""><code>ssh_pub_key = File.readlines(""#{Dir.home}/.ssh/id_rsa.pub"").first.strip
config.vm.provision 'shell', inline: 'mkdir -p /root/.ssh'
config.vm.provision 'shell', inline: ""echo #{ssh_pub_key} &gt;&gt; /root/.ssh/authorized_keys""
config.vm.provision 'shell', inline: ""echo #{ssh_pub_key} &gt;&gt; /home/vagrant/.ssh/authorized_keys"", privileged: false
</code></pre>

<p>Otherwise user's <code>.ssh/authorized_keys</code> will belong to root user.</p>

<p>Still it will add a line at every provision run, but Vagrant is used for testing and a VM usually have short life, so not a big problem.</p>
","70414","<ssh><vagrant><public-key>","65","8","11","2019-09-28 22:45:52","30075596","0","32","117259","","2017-07-10 18:15:06","2015-05-06 11:31:13",""
"30075461","How do I add my own public key to Vagrant VM?","<p>I got a problem with adding an ssh key to a Vagrant VM. Basically the setup that I have here works fine. Once the VMs are created, I can access them via <code>vagrant ssh</code>, the user ""vagrant"" exists and there's an ssh key for this user in the <code>authorized_keys</code> file.</p>

<p>What I'd like to do now is: to be able to connect to those VMs via <code>ssh</code> or use <code>scp</code>. So I would only need to add my public key from <code>id_rsa.pub</code> to the <code>authorized_keys</code> - just like I'd do with <code>ssh-copy-id</code>. </p>

<p>Is there a way to tell Vagrant during the setup that my public key should be included? If not (which is likely, according to my google results), is there a way to easily append my public key during the vagrant setup?</p>
","<p>I end up using code like:</p>

<pre class=""lang-rb prettyprint-override""><code>config.ssh.forward_agent    = true
config.ssh.insert_key       = false
config.ssh.private_key_path =  [""~/.vagrant.d/insecure_private_key"",""~/.ssh/id_rsa""]
config.vm.provision :shell, privileged: false do |s|
  ssh_pub_key = File.readlines(""#{Dir.home}/.ssh/id_rsa.pub"").first.strip
  s.inline = &lt;&lt;-SHELL
     echo #{ssh_pub_key} &gt;&gt; /home/$USER/.ssh/authorized_keys
     sudo bash -c ""echo #{ssh_pub_key} &gt;&gt; /root/.ssh/authorized_keys""
  SHELL
end
</code></pre>

<p>Note that we should not hard code path to <code>/home/vagrant/.ssh/authorized_keys</code> since some vagrant boxes not using the <code>vagrant</code> username.</p>
","70414","<ssh><vagrant><public-key>","65","9","11","2019-09-28 22:45:52","30075596","0","32","117259","","2017-07-10 18:15:06","2015-05-06 11:31:13",""
"30075461","How do I add my own public key to Vagrant VM?","<p>I got a problem with adding an ssh key to a Vagrant VM. Basically the setup that I have here works fine. Once the VMs are created, I can access them via <code>vagrant ssh</code>, the user ""vagrant"" exists and there's an ssh key for this user in the <code>authorized_keys</code> file.</p>

<p>What I'd like to do now is: to be able to connect to those VMs via <code>ssh</code> or use <code>scp</code>. So I would only need to add my public key from <code>id_rsa.pub</code> to the <code>authorized_keys</code> - just like I'd do with <code>ssh-copy-id</code>. </p>

<p>Is there a way to tell Vagrant during the setup that my public key should be included? If not (which is likely, according to my google results), is there a way to easily append my public key during the vagrant setup?</p>
","<p>This is an excellent thread that helped me solve a similar situation as the original poster describes.</p>

<p>While I ultimately used the settings/logic presented in <a href=""https://stackoverflow.com/a/41787792/117259"">smartwjw’s</a> answer, I ran into a hitch since I use the <a href=""https://www.vagrantup.com/docs/other/environmental-variables.html#vagrant_home"" rel=""nofollow noreferrer""><code>VAGRANT_HOME</code></a> environment variable to save the core <code>vagrant.d</code> directory stuff on an external hard drive on one of my development systems.</p>

<p>So here is the adjusted code I am using in my Vagrantfile to accommodate for a <code>VAGRANT_HOME</code> environment variable being set; the “magic” happens in this line <code>vagrant_home_path = ENV[""VAGRANT_HOME""] ||= ""~/.vagrant.d""</code>:</p>

<pre class=""lang-rb prettyprint-override""><code>config.ssh.insert_key = false
config.ssh.forward_agent = true
vagrant_home_path = ENV[""VAGRANT_HOME""] ||= ""~/.vagrant.d""
config.ssh.private_key_path = [""#{vagrant_home_path}/insecure_private_key"", ""~/.ssh/id_rsa""]
config.vm.provision :shell, privileged: false do |shell_action|
  ssh_public_key = File.readlines(""#{Dir.home}/.ssh/id_rsa.pub"").first.strip
  shell_action.inline = &lt;&lt;-SHELL
    echo #{ssh_public_key} &gt;&gt; /home/$USER/.ssh/authorized_keys
  SHELL
end
</code></pre>
","70414","<ssh><vagrant><public-key>","65","1","11","2019-09-28 22:45:52","30075596","0","32","117259","","2017-07-10 18:15:06","2015-05-06 11:31:13",""
"30075461","How do I add my own public key to Vagrant VM?","<p>I got a problem with adding an ssh key to a Vagrant VM. Basically the setup that I have here works fine. Once the VMs are created, I can access them via <code>vagrant ssh</code>, the user ""vagrant"" exists and there's an ssh key for this user in the <code>authorized_keys</code> file.</p>

<p>What I'd like to do now is: to be able to connect to those VMs via <code>ssh</code> or use <code>scp</code>. So I would only need to add my public key from <code>id_rsa.pub</code> to the <code>authorized_keys</code> - just like I'd do with <code>ssh-copy-id</code>. </p>

<p>Is there a way to tell Vagrant during the setup that my public key should be included? If not (which is likely, according to my google results), is there a way to easily append my public key during the vagrant setup?</p>
","<p>Generate a rsa key pair for vagrant authentication <code>ssh-keygen -f ~/.ssh/vagrant</code></p>

<p>You might also want to add the vagrant identity files to your <code>~/.ssh/config</code></p>

<pre><code>IdentityFile ~/.ssh/vagrant
IdentityFile ~/.vagrant.d/insecure_private_key
</code></pre>

<p>For some reason we can't just specify the key we want to insert so we take a
few extra steps to generate a key ourselves. This way we get security and
knowledge of exactly which key we need (+ all vagrant boxes will get the same key)</p>

<p><a href=""https://stackoverflow.com/questions/28471542/cant-ssh-to-vagrant-vms-using-the-insecure-private-key-vagrant-1-7-2"">Can&#39;t ssh to vagrant VMs using the insecure private key (vagrant 1.7.2)</a>
<a href=""https://stackoverflow.com/questions/30075461/how-do-i-add-my-own-public-key-to-vagrant-vm"">How do I add my own public key to Vagrant VM?</a></p>

<pre><code>config.ssh.insert_key = false
config.ssh.private_key_path = ['~/.ssh/vagrant', '~/.vagrant.d/insecure_private_key']
config.vm.provision ""file"", source: ""~/.ssh/vagrant.pub"", destination: ""/home/vagrant/.ssh/vagrant.pub""
config.vm.provision ""shell"", inline: &lt;&lt;-SHELL
cat /home/vagrant/.ssh/vagrant.pub &gt;&gt; /home/vagrant/.ssh/authorized_keys
mkdir -p /root/.ssh
cat /home/vagrant/.ssh/authorized_keys &gt;&gt; /root/.ssh/authorized_keys
</code></pre>

<p>SHELL</p>
","70414","<ssh><vagrant><public-key>","65","-1","11","2019-09-28 22:45:52","30075596","0","32","117259","","2017-07-10 18:15:06","2015-05-06 11:31:13",""
"30075461","How do I add my own public key to Vagrant VM?","<p>I got a problem with adding an ssh key to a Vagrant VM. Basically the setup that I have here works fine. Once the VMs are created, I can access them via <code>vagrant ssh</code>, the user ""vagrant"" exists and there's an ssh key for this user in the <code>authorized_keys</code> file.</p>

<p>What I'd like to do now is: to be able to connect to those VMs via <code>ssh</code> or use <code>scp</code>. So I would only need to add my public key from <code>id_rsa.pub</code> to the <code>authorized_keys</code> - just like I'd do with <code>ssh-copy-id</code>. </p>

<p>Is there a way to tell Vagrant during the setup that my public key should be included? If not (which is likely, according to my google results), is there a way to easily append my public key during the vagrant setup?</p>
","<p>For the inline shell provisioners - it is common for a public key to contains spaces, comments, etc. So make sure to put (escaped) quotes around the var that expands to the public key: </p>

<pre><code>config.vm.provision 'shell', inline: ""echo \""#{ssh_pub_key}\"" &gt;&gt; /home/vagrant/.ssh/authorized_keys"", privileged: false
</code></pre>
","70414","<ssh><vagrant><public-key>","65","1","11","2019-09-28 22:45:52","30075596","0","32","117259","","2017-07-10 18:15:06","2015-05-06 11:31:13",""
"30075461","How do I add my own public key to Vagrant VM?","<p>I got a problem with adding an ssh key to a Vagrant VM. Basically the setup that I have here works fine. Once the VMs are created, I can access them via <code>vagrant ssh</code>, the user ""vagrant"" exists and there's an ssh key for this user in the <code>authorized_keys</code> file.</p>

<p>What I'd like to do now is: to be able to connect to those VMs via <code>ssh</code> or use <code>scp</code>. So I would only need to add my public key from <code>id_rsa.pub</code> to the <code>authorized_keys</code> - just like I'd do with <code>ssh-copy-id</code>. </p>

<p>Is there a way to tell Vagrant during the setup that my public key should be included? If not (which is likely, according to my google results), is there a way to easily append my public key during the vagrant setup?</p>
","<h2>This excellent answer was added by <a href=""https://stackoverflow.com/users/2244868/user76329"">user76329</a> in a <a href=""https://stackoverflow.com/review/suggested-edits/13372986"">rejected Suggested Edit</a></h2>

<p>Expanding on <a href=""https://stackoverflow.com/a/31153912/4836062"">Meow's example</a>, we can copy the local pub/private ssh keys, set permissions, and make the inline script idempotent (runs once and will only repeat if the test condition fails, thus needing provisioning):</p>

<pre class=""lang-rb prettyprint-override""><code>config.vm.provision ""shell"" do |s|
  ssh_prv_key = """"
  ssh_pub_key = """"
  if File.file?(""#{Dir.home}/.ssh/id_rsa"")
    ssh_prv_key = File.read(""#{Dir.home}/.ssh/id_rsa"")
    ssh_pub_key = File.readlines(""#{Dir.home}/.ssh/id_rsa.pub"").first.strip
  else
    puts ""No SSH key found. You will need to remedy this before pushing to the repository.""
  end
  s.inline = &lt;&lt;-SHELL
    if grep -sq ""#{ssh_pub_key}"" /home/vagrant/.ssh/authorized_keys; then
      echo ""SSH keys already provisioned.""
      exit 0;
    fi
    echo ""SSH key provisioning.""
    mkdir -p /home/vagrant/.ssh/
    touch /home/vagrant/.ssh/authorized_keys
    echo #{ssh_pub_key} &gt;&gt; /home/vagrant/.ssh/authorized_keys
    echo #{ssh_pub_key} &gt; /home/vagrant/.ssh/id_rsa.pub
    chmod 644 /home/vagrant/.ssh/id_rsa.pub
    echo ""#{ssh_prv_key}"" &gt; /home/vagrant/.ssh/id_rsa
    chmod 600 /home/vagrant/.ssh/id_rsa
    chown -R vagrant:vagrant /home/vagrant
    exit 0
  SHELL
end
</code></pre>
","70414","<ssh><vagrant><public-key>","65","9","11","2019-09-28 22:45:52","30075596","0","32","117259","","2017-07-10 18:15:06","2015-05-06 11:31:13",""
"30075461","How do I add my own public key to Vagrant VM?","<p>I got a problem with adding an ssh key to a Vagrant VM. Basically the setup that I have here works fine. Once the VMs are created, I can access them via <code>vagrant ssh</code>, the user ""vagrant"" exists and there's an ssh key for this user in the <code>authorized_keys</code> file.</p>

<p>What I'd like to do now is: to be able to connect to those VMs via <code>ssh</code> or use <code>scp</code>. So I would only need to add my public key from <code>id_rsa.pub</code> to the <code>authorized_keys</code> - just like I'd do with <code>ssh-copy-id</code>. </p>

<p>Is there a way to tell Vagrant during the setup that my public key should be included? If not (which is likely, according to my google results), is there a way to easily append my public key during the vagrant setup?</p>
","<p>None of the older posts worked for me although some came close.  I had to make rsa keys with keygen in the terminal and go with custom keys.  In other words defeated from using Vagrant's keys.  </p>

<p>I'm on Mac OS Mojave as of the date of this post.  I've setup two Vagrant boxes in one Vagrantfile.  I'm showing all of the first box so newbies can see the context.  I put the .ssh folder in the same folder as the Vagrant file, otherwise use user9091383 setup.</p>

<p>Credit for this solution goes to <a href=""http://blog.makingdevs.com/2017/07/04/add-public-key-to-vagrant/"" rel=""nofollow noreferrer"">this coder.</a></p>

<pre><code>Vagrant.configure(""2"") do |config|
  config.vm.define ""pfbox"", primary: true do |pfbox|
        pfbox.vm.box = ""ubuntu/xenial64""
        pfbox.vm.network ""forwarded_port"", host: 8084, guest: 80
        pfbox.vm.network ""forwarded_port"", host: 8080, guest: 8080
        pfbox.vm.network ""forwarded_port"", host: 8079, guest: 8079
        pfbox.vm.network ""forwarded_port"", host: 3000, guest: 3000
        pfbox.vm.provision :shell, path: "".provision/bootstrap.sh""
        pfbox.vm.synced_folder ""ubuntu"", ""/home/vagrant""
        pfbox.vm.provision ""file"", source: ""~/.gitconfig"", destination: ""~/.gitconfig""
        pfbox.vm.network ""private_network"", type: ""dhcp""
        pfbox.vm.network ""public_network""
        pfbox.ssh.insert_key = false
        ssh_key_path = "".ssh/""  # This may not be necessary.  I may remove.
        pfbox.vm.provision ""shell"", inline: ""mkdir -p /home/vagrant/.ssh""
        pfbox.ssh.private_key_path = [""~/.vagrant.d/insecure_private_key"", "".ssh/id_rsa""]
        pfbox.vm.provision ""file"", source: "".ssh/id_rsa.pub"", destination: "".ssh/authorized_keys""
        pfbox.vm.box_check_update = ""true""
        pfbox.vm.hostname = ""pfbox""
        # VirtualBox
          config.vm.provider ""virtualbox"" do |vb|
            # vb.gui = true
            vb.name = ""pfbox"" # friendly name for Oracle VM VirtualBox Manager
            vb.memory = 2048 # memory in megabytes 2.0 GB
            vb.cpus = 1 # cpu cores, can't be more than the host actually has.
          end
  end
  config.vm.define ""dbbox"" do |dbbox|
        ...
</code></pre>
","70414","<ssh><vagrant><public-key>","65","1","11","2019-09-28 22:45:52","30075596","0","32","117259","","2017-07-10 18:15:06","2015-05-06 11:31:13",""
"30075461","How do I add my own public key to Vagrant VM?","<p>I got a problem with adding an ssh key to a Vagrant VM. Basically the setup that I have here works fine. Once the VMs are created, I can access them via <code>vagrant ssh</code>, the user ""vagrant"" exists and there's an ssh key for this user in the <code>authorized_keys</code> file.</p>

<p>What I'd like to do now is: to be able to connect to those VMs via <code>ssh</code> or use <code>scp</code>. So I would only need to add my public key from <code>id_rsa.pub</code> to the <code>authorized_keys</code> - just like I'd do with <code>ssh-copy-id</code>. </p>

<p>Is there a way to tell Vagrant during the setup that my public key should be included? If not (which is likely, according to my google results), is there a way to easily append my public key during the vagrant setup?</p>
","<p>Madis Maenni answer is closest to best solution:</p>

<p>just do:</p>

<pre><code>vagrant ssh-config &gt;&gt; ~/.ssh/config
chmod 600 ~/.ssh/config
</code></pre>

<p>then you can just ssh via hostname.</p>

<p>To get list of hostnames configured in ~/.ssh/config</p>

<pre><code>grep -E '^Host ' ~/.ssh/config
</code></pre>

<p>My example:</p>

<pre><code>$ grep -E '^Host' ~/.ssh/config
Host web
Host db
$ ssh web
[vagrant@web ~]$
</code></pre>
","70414","<ssh><vagrant><public-key>","65","-1","11","2019-09-28 22:45:52","30075596","0","32","117259","","2017-07-10 18:15:06","2015-05-06 11:31:13",""
"21518074","Permission denied (publickey,gssapi-keyex,gssapi-with-mic) on openshift","<p>I am having issues with committing changes to my gear. I have tried to run rhc setup, I also deleted my .ssh folder and executed rhc setup again but that also didnt work. </p>

<p>Not sure what changed but it worked couple of hours ago. </p>

<pre><code>&gt;git push -u &lt;GEAR_NAME&gt; master
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.

&gt;git remote add devstage3 -f ssh://&lt;GEAR_ID&gt;@&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com/~/git/&lt;GEAR_DOMAIN&gt;.git/ 
</code></pre>

<p>Also I have tried to start a different gear and commit to it but I am getting the same error:</p>

<pre><code>Updating &lt;GEAR_NAME&gt;
The authenticity of host '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com (&lt;GEAR_IP&gt;)' can't be established.
RSA key fingerprint is &lt;KEY_FINGERPRINT&gt;.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com,&lt;GEAR_IP&gt;' (RSA) to the list of known hosts.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
error: Could not fetch &lt;GEAR_NAME&gt;
</code></pre>
","<p>I would also recommend trying to SSH in first. With SSH use the -vv flag to show more of the connection information. My guess is that SSH is trying to use a different key than what you uploaded to the server</p>
","68258","<git><openshift><git-push><public-key>","24","1","11","2019-08-27 16:25:15","21832369","7","5","237867","","2018-08-28 13:38:35","2014-02-03 00:21:23",""
"21518074","Permission denied (publickey,gssapi-keyex,gssapi-with-mic) on openshift","<p>I am having issues with committing changes to my gear. I have tried to run rhc setup, I also deleted my .ssh folder and executed rhc setup again but that also didnt work. </p>

<p>Not sure what changed but it worked couple of hours ago. </p>

<pre><code>&gt;git push -u &lt;GEAR_NAME&gt; master
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.

&gt;git remote add devstage3 -f ssh://&lt;GEAR_ID&gt;@&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com/~/git/&lt;GEAR_DOMAIN&gt;.git/ 
</code></pre>

<p>Also I have tried to start a different gear and commit to it but I am getting the same error:</p>

<pre><code>Updating &lt;GEAR_NAME&gt;
The authenticity of host '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com (&lt;GEAR_IP&gt;)' can't be established.
RSA key fingerprint is &lt;KEY_FINGERPRINT&gt;.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com,&lt;GEAR_IP&gt;' (RSA) to the list of known hosts.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
error: Could not fetch &lt;GEAR_NAME&gt;
</code></pre>
","<p>Remove the keys: rhc sshkey-remove 
You can also delete them from the management console, by going to <a href=""https://openshift.redhat.com/app/console/settings"">https://openshift.redhat.com/app/console/settings</a></p>

<p>Once done, upload the public key (copy the content of your id_rsa.pub to management console) :
<a href=""https://openshift.redhat.com/app/console/keys/new"">https://openshift.redhat.com/app/console/keys/new</a></p>

<p>Save it. After this try to <code>git clone</code> and it should work for you. </p>
","68258","<git><openshift><git-push><public-key>","24","17","11","2019-08-27 16:25:15","21832369","7","5","237867","","2018-08-28 13:38:35","2014-02-03 00:21:23",""
"21518074","Permission denied (publickey,gssapi-keyex,gssapi-with-mic) on openshift","<p>I am having issues with committing changes to my gear. I have tried to run rhc setup, I also deleted my .ssh folder and executed rhc setup again but that also didnt work. </p>

<p>Not sure what changed but it worked couple of hours ago. </p>

<pre><code>&gt;git push -u &lt;GEAR_NAME&gt; master
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.

&gt;git remote add devstage3 -f ssh://&lt;GEAR_ID&gt;@&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com/~/git/&lt;GEAR_DOMAIN&gt;.git/ 
</code></pre>

<p>Also I have tried to start a different gear and commit to it but I am getting the same error:</p>

<pre><code>Updating &lt;GEAR_NAME&gt;
The authenticity of host '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com (&lt;GEAR_IP&gt;)' can't be established.
RSA key fingerprint is &lt;KEY_FINGERPRINT&gt;.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com,&lt;GEAR_IP&gt;' (RSA) to the list of known hosts.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
error: Could not fetch &lt;GEAR_NAME&gt;
</code></pre>
","<p>I fixed the problem by setting up proxy for ssh: 
<strong>~/.ssh/config</strong></p>

<pre><code>ProxyCommand /bin/connect.exe -H proxy:8080 %h %p

Host rhcloud.com
User myemailasrhclogin@gmail.com
Port 22
Hostname rhcloud.com
IdentityFile ""C:\users\username\.ssh\id_rsa""
TCPKeepAlive yes
IdentitiesOnly yes
</code></pre>

<p><a href=""https://stackoverflow.com/questions/5103083/problem-of-testing-ssh-in-git-behind-proxy-on-window-7"">SSH in git behind proxy on windows 7</a></p>

<p>My initial mistake was to use appname.rhcloud.com as Host or Hostname.  And yes, adding your public key to OpenShift is also necessary.</p>
","68258","<git><openshift><git-push><public-key>","24","0","11","2019-08-27 16:25:15","21832369","7","5","237867","","2018-08-28 13:38:35","2014-02-03 00:21:23",""
"21518074","Permission denied (publickey,gssapi-keyex,gssapi-with-mic) on openshift","<p>I am having issues with committing changes to my gear. I have tried to run rhc setup, I also deleted my .ssh folder and executed rhc setup again but that also didnt work. </p>

<p>Not sure what changed but it worked couple of hours ago. </p>

<pre><code>&gt;git push -u &lt;GEAR_NAME&gt; master
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.

&gt;git remote add devstage3 -f ssh://&lt;GEAR_ID&gt;@&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com/~/git/&lt;GEAR_DOMAIN&gt;.git/ 
</code></pre>

<p>Also I have tried to start a different gear and commit to it but I am getting the same error:</p>

<pre><code>Updating &lt;GEAR_NAME&gt;
The authenticity of host '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com (&lt;GEAR_IP&gt;)' can't be established.
RSA key fingerprint is &lt;KEY_FINGERPRINT&gt;.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com,&lt;GEAR_IP&gt;' (RSA) to the list of known hosts.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
error: Could not fetch &lt;GEAR_NAME&gt;
</code></pre>
","<p>please check if you have changed to another account. </p>

<p>i encountered this problem when my account changed to root.</p>

<p>I am using ubuntu.</p>

<p>I solved this problem by the following cmds</p>

<pre><code>rm ~/.openshift/ -rf
rm ~/.ssh/* -rf
rhc setup
</code></pre>

<p>and i encountered the following error:</p>

<pre><code>chmod: 更改"".git/FETCH_HEAD"" 的权限: 不允许的操作
</code></pre>

<p>solved by :</p>

<pre><code>sudo chmod 777 .git/FETCH_HEAD
</code></pre>

<p>then:</p>

<pre><code>git pull
</code></pre>

<p>got:</p>

<pre><code>Already up-to-date.
</code></pre>

<p>everything goes find.</p>
","68258","<git><openshift><git-push><public-key>","24","1","11","2019-08-27 16:25:15","21832369","7","5","237867","","2018-08-28 13:38:35","2014-02-03 00:21:23",""
"21518074","Permission denied (publickey,gssapi-keyex,gssapi-with-mic) on openshift","<p>I am having issues with committing changes to my gear. I have tried to run rhc setup, I also deleted my .ssh folder and executed rhc setup again but that also didnt work. </p>

<p>Not sure what changed but it worked couple of hours ago. </p>

<pre><code>&gt;git push -u &lt;GEAR_NAME&gt; master
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.

&gt;git remote add devstage3 -f ssh://&lt;GEAR_ID&gt;@&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com/~/git/&lt;GEAR_DOMAIN&gt;.git/ 
</code></pre>

<p>Also I have tried to start a different gear and commit to it but I am getting the same error:</p>

<pre><code>Updating &lt;GEAR_NAME&gt;
The authenticity of host '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com (&lt;GEAR_IP&gt;)' can't be established.
RSA key fingerprint is &lt;KEY_FINGERPRINT&gt;.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com,&lt;GEAR_IP&gt;' (RSA) to the list of known hosts.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
error: Could not fetch &lt;GEAR_NAME&gt;
</code></pre>
","<p>if you are using Windows, you can try the following steps:</p>

<ol>
<li><p>look for your ssh public key
usually you can find it at <code>c:\\users\\YOUR_USERNAME\\.ssh</code></p></li>
<li><p>copy your openshift public key to your git's ssh-key folder</p>

<p>suppose we have git in <code>d:\\git</code></p>

<p>then we need to copy the public key from <code>c:\\users\\YOUR_USERNAME\\.ssh</code> to <code>d:\\git\\.ssh</code></p></li>
<li><p>try if it works</p></li>
</ol>
","68258","<git><openshift><git-push><public-key>","24","22","11","2019-08-27 16:25:15","21832369","7","5","237867","","2018-08-28 13:38:35","2014-02-03 00:21:23",""
"21518074","Permission denied (publickey,gssapi-keyex,gssapi-with-mic) on openshift","<p>I am having issues with committing changes to my gear. I have tried to run rhc setup, I also deleted my .ssh folder and executed rhc setup again but that also didnt work. </p>

<p>Not sure what changed but it worked couple of hours ago. </p>

<pre><code>&gt;git push -u &lt;GEAR_NAME&gt; master
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.

&gt;git remote add devstage3 -f ssh://&lt;GEAR_ID&gt;@&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com/~/git/&lt;GEAR_DOMAIN&gt;.git/ 
</code></pre>

<p>Also I have tried to start a different gear and commit to it but I am getting the same error:</p>

<pre><code>Updating &lt;GEAR_NAME&gt;
The authenticity of host '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com (&lt;GEAR_IP&gt;)' can't be established.
RSA key fingerprint is &lt;KEY_FINGERPRINT&gt;.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com,&lt;GEAR_IP&gt;' (RSA) to the list of known hosts.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
error: Could not fetch &lt;GEAR_NAME&gt;
</code></pre>
","<p>you have to check in ~/.ssh/ if exists a file id_rsa.pub and id_rsa
if not you have to create it using openssh
or if exists a file with extension .pub duplicate it and rename the copy as id_rsa.pub
then do the same with id_rsa.
this work with google compute engine.
I've tried</p>
","68258","<git><openshift><git-push><public-key>","24","1","11","2019-08-27 16:25:15","21832369","7","5","237867","","2018-08-28 13:38:35","2014-02-03 00:21:23",""
"21518074","Permission denied (publickey,gssapi-keyex,gssapi-with-mic) on openshift","<p>I am having issues with committing changes to my gear. I have tried to run rhc setup, I also deleted my .ssh folder and executed rhc setup again but that also didnt work. </p>

<p>Not sure what changed but it worked couple of hours ago. </p>

<pre><code>&gt;git push -u &lt;GEAR_NAME&gt; master
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.

&gt;git remote add devstage3 -f ssh://&lt;GEAR_ID&gt;@&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com/~/git/&lt;GEAR_DOMAIN&gt;.git/ 
</code></pre>

<p>Also I have tried to start a different gear and commit to it but I am getting the same error:</p>

<pre><code>Updating &lt;GEAR_NAME&gt;
The authenticity of host '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com (&lt;GEAR_IP&gt;)' can't be established.
RSA key fingerprint is &lt;KEY_FINGERPRINT&gt;.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com,&lt;GEAR_IP&gt;' (RSA) to the list of known hosts.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
error: Could not fetch &lt;GEAR_NAME&gt;
</code></pre>
","<p>Had the same issue and wasted hours, I'm using centos 7. The following solved my problem.</p>

<p>On linux: </p>

<ol>
<li>""cd /home/your_username/.ssh""</li>
<li>View ""id_rsa.pub"" and copy contents</li>
<li>On openshift create a key from the UI and paste the contents from your ""*.pub"" file</li>
<li>Save your new key</li>
<li>Try reconnecting from your local machine</li>
</ol>

<p>Hope the above helps. Note, on mac it worked from the word go only linux game me errors.</p>
","68258","<git><openshift><git-push><public-key>","24","5","11","2019-08-27 16:25:15","21832369","7","5","237867","","2018-08-28 13:38:35","2014-02-03 00:21:23",""
"21518074","Permission denied (publickey,gssapi-keyex,gssapi-with-mic) on openshift","<p>I am having issues with committing changes to my gear. I have tried to run rhc setup, I also deleted my .ssh folder and executed rhc setup again but that also didnt work. </p>

<p>Not sure what changed but it worked couple of hours ago. </p>

<pre><code>&gt;git push -u &lt;GEAR_NAME&gt; master
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.

&gt;git remote add devstage3 -f ssh://&lt;GEAR_ID&gt;@&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com/~/git/&lt;GEAR_DOMAIN&gt;.git/ 
</code></pre>

<p>Also I have tried to start a different gear and commit to it but I am getting the same error:</p>

<pre><code>Updating &lt;GEAR_NAME&gt;
The authenticity of host '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com (&lt;GEAR_IP&gt;)' can't be established.
RSA key fingerprint is &lt;KEY_FINGERPRINT&gt;.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com,&lt;GEAR_IP&gt;' (RSA) to the list of known hosts.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
error: Could not fetch &lt;GEAR_NAME&gt;
</code></pre>
","<p>what worked for me was to generate the keys using <strong>Git Bash</strong></p>

<pre><code>ssh-keygen -t rsa -b 4096 -C ""your_email@example.com""
</code></pre>

<p>and then add the key to <code>ssh-agent</code> as described here </p>

<p><a href=""https://help.github.com/articles/generating-a-new-ssh-key/"">https://help.github.com/articles/generating-a-new-ssh-key/</a></p>
","68258","<git><openshift><git-push><public-key>","24","8","11","2019-08-27 16:25:15","21832369","7","5","237867","","2018-08-28 13:38:35","2014-02-03 00:21:23",""
"21518074","Permission denied (publickey,gssapi-keyex,gssapi-with-mic) on openshift","<p>I am having issues with committing changes to my gear. I have tried to run rhc setup, I also deleted my .ssh folder and executed rhc setup again but that also didnt work. </p>

<p>Not sure what changed but it worked couple of hours ago. </p>

<pre><code>&gt;git push -u &lt;GEAR_NAME&gt; master
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.

&gt;git remote add devstage3 -f ssh://&lt;GEAR_ID&gt;@&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com/~/git/&lt;GEAR_DOMAIN&gt;.git/ 
</code></pre>

<p>Also I have tried to start a different gear and commit to it but I am getting the same error:</p>

<pre><code>Updating &lt;GEAR_NAME&gt;
The authenticity of host '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com (&lt;GEAR_IP&gt;)' can't be established.
RSA key fingerprint is &lt;KEY_FINGERPRINT&gt;.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com,&lt;GEAR_IP&gt;' (RSA) to the list of known hosts.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
error: Could not fetch &lt;GEAR_NAME&gt;
</code></pre>
","<p>Also make sure your ~/.ssh/id_rsa file has proper permissions required by rhc:</p>

<pre><code>chmod 600 ~/.ssh/id_rsa
</code></pre>
","68258","<git><openshift><git-push><public-key>","24","0","11","2019-08-27 16:25:15","21832369","7","5","237867","","2018-08-28 13:38:35","2014-02-03 00:21:23",""
"21518074","Permission denied (publickey,gssapi-keyex,gssapi-with-mic) on openshift","<p>I am having issues with committing changes to my gear. I have tried to run rhc setup, I also deleted my .ssh folder and executed rhc setup again but that also didnt work. </p>

<p>Not sure what changed but it worked couple of hours ago. </p>

<pre><code>&gt;git push -u &lt;GEAR_NAME&gt; master
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.

&gt;git remote add devstage3 -f ssh://&lt;GEAR_ID&gt;@&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com/~/git/&lt;GEAR_DOMAIN&gt;.git/ 
</code></pre>

<p>Also I have tried to start a different gear and commit to it but I am getting the same error:</p>

<pre><code>Updating &lt;GEAR_NAME&gt;
The authenticity of host '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com (&lt;GEAR_IP&gt;)' can't be established.
RSA key fingerprint is &lt;KEY_FINGERPRINT&gt;.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com,&lt;GEAR_IP&gt;' (RSA) to the list of known hosts.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
error: Could not fetch &lt;GEAR_NAME&gt;
</code></pre>
","<p>I had <code>Permission denied (publickey,gssapi-keyex,gssapi-with-mic)</code><br>
when cloning with <code>git clone ssh://&lt;&lt;repo_created_by_openshift&gt;&gt;</code>.  </p>

<p>App was created with Openshift's website, not with <code>rhc app create</code>.<br>
My SSH key was ok, reimporting it to Openshift didn't help, nor did expiring sessions, and so on.<br>
I didn't want to generate a new key.</p>

<p>What finally worked was using:<br>
<code>rhc git-clone -a &lt;app_name&gt;&gt;</code> instead of bare <code>git clone &lt;&lt;repo_address&gt;&gt;</code>.<br>
You may have to expire sessions as well.</p>
","68258","<git><openshift><git-push><public-key>","24","0","11","2019-08-27 16:25:15","21832369","7","5","237867","","2018-08-28 13:38:35","2014-02-03 00:21:23",""
"21518074","Permission denied (publickey,gssapi-keyex,gssapi-with-mic) on openshift","<p>I am having issues with committing changes to my gear. I have tried to run rhc setup, I also deleted my .ssh folder and executed rhc setup again but that also didnt work. </p>

<p>Not sure what changed but it worked couple of hours ago. </p>

<pre><code>&gt;git push -u &lt;GEAR_NAME&gt; master
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.

&gt;git remote add devstage3 -f ssh://&lt;GEAR_ID&gt;@&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com/~/git/&lt;GEAR_DOMAIN&gt;.git/ 
</code></pre>

<p>Also I have tried to start a different gear and commit to it but I am getting the same error:</p>

<pre><code>Updating &lt;GEAR_NAME&gt;
The authenticity of host '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com (&lt;GEAR_IP&gt;)' can't be established.
RSA key fingerprint is &lt;KEY_FINGERPRINT&gt;.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '&lt;GEAR_NAME&gt;-&lt;GEAR-DOMAIN&gt;.rhcloud.com,&lt;GEAR_IP&gt;' (RSA) to the list of known hosts.
Permission denied (publickey,gssapi-keyex,gssapi-with-mic).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
error: Could not fetch &lt;GEAR_NAME&gt;
</code></pre>
","<p>The following answer might be helpful. Add <code>GSSAPIAuthentication no</code> into <code>.ssh/config</code></p>

<pre><code>$ cat .ssh/config
Host *
  ServerAliveInterval 240
  GSSAPIAuthentication no
</code></pre>
","68258","<git><openshift><git-push><public-key>","24","1","11","2019-08-27 16:25:15","21832369","7","5","237867","","2018-08-28 13:38:35","2014-02-03 00:21:23",""
"23591083","How to append authorized_keys on the remote server with id_rsa.pub key","<p>How to append authorized_keys on the remote server with id_rsa.pub key from the local machine with a single command?</p>
","<p>Adding an authorized key could be one-lined this way (use double-quotes so it's interpreted before sent):</p>

<pre><code>ssh user@server ""echo \""`cat ~/.ssh/id_rsa.pub`\"" &gt;&gt; .ssh/authorized_keys""
</code></pre>
","66436","<ssh><public-key><authorized-keys>","31","35","6","2018-12-25 08:52:48","23599377","0","14","3563993","","2014-05-11 10:10:32","2014-05-11 09:43:00",""
"23591083","How to append authorized_keys on the remote server with id_rsa.pub key","<p>How to append authorized_keys on the remote server with id_rsa.pub key from the local machine with a single command?</p>
","<p>This does the trick:</p>

<pre><code>cat ~/.ssh/id_rsa.pub | (ssh user@host ""cat &gt;&gt; ~/.ssh/authorized_keys"")
</code></pre>

<p>Appends the local public key the remote <code>authorized_keys</code> file.</p>
","66436","<ssh><public-key><authorized-keys>","31","27","6","2018-12-25 08:52:48","23599377","0","14","3563993","","2014-05-11 10:10:32","2014-05-11 09:43:00",""
"23591083","How to append authorized_keys on the remote server with id_rsa.pub key","<p>How to append authorized_keys on the remote server with id_rsa.pub key from the local machine with a single command?</p>
","<p>The <code>ssh-copy-id</code> program is the standard way but the key can be appended manually to the <code>~/.ssh/authorized_keys</code> file:</p>

<pre><code>cat ~/.ssh/id_rsa.pub | ssh username@host ""mkdir ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys""
</code></pre>

<p>This does not check if the key already exists and can lead to duplicates.</p>
","66436","<ssh><public-key><authorized-keys>","31","12","6","2018-12-25 08:52:48","23599377","0","14","3563993","","2014-05-11 10:10:32","2014-05-11 09:43:00",""
"23591083","How to append authorized_keys on the remote server with id_rsa.pub key","<p>How to append authorized_keys on the remote server with id_rsa.pub key from the local machine with a single command?</p>
","<p><code>ssh-copy-id user@remote_server</code></p>

<p><a href=""http://linux.die.net/man/1/ssh-copy-id"" rel=""noreferrer"">http://linux.die.net/man/1/ssh-copy-id</a></p>
","66436","<ssh><public-key><authorized-keys>","31","76","6","2018-12-25 08:52:48","23599377","0","14","3563993","","2014-05-11 10:10:32","2014-05-11 09:43:00",""
"23591083","How to append authorized_keys on the remote server with id_rsa.pub key","<p>How to append authorized_keys on the remote server with id_rsa.pub key from the local machine with a single command?</p>
","<p>The most convenient option is the <code>ssh-copy-id</code> command. It can append the public key to <code>~/.ssh/authorized_keys</code>. For example:</p>

<pre><code>ssh-copy-id -f -i id_rsa.pub username@host
</code></pre>

<p>Where:</p>

<ul>
<li><code>-f</code>: force mode -- copy keys without trying to check if they are already installed</li>
<li><code>-i</code>: <code>[identity_file]</code></li>
</ul>
","66436","<ssh><public-key><authorized-keys>","31","3","6","2018-12-25 08:52:48","23599377","0","14","3563993","","2014-05-11 10:10:32","2014-05-11 09:43:00",""
"23591083","How to append authorized_keys on the remote server with id_rsa.pub key","<p>How to append authorized_keys on the remote server with id_rsa.pub key from the local machine with a single command?</p>
","<p>You can avoid some of the quoting with:</p>

<pre><code>ssh user@host tee -a .ssh/authorized_keys &lt; ~/.ssh/id_rsa.pub
</code></pre>
","66436","<ssh><public-key><authorized-keys>","31","0","6","2018-12-25 08:52:48","23599377","0","14","3563993","","2014-05-11 10:10:32","2014-05-11 09:43:00",""
"2868432","Github: readonly access to a private repo","<p>I am developing some private projects on Github, and I would like to add nightly cronjobs to my deployments servers to pull the latest version from github. I am currently doing this by generating keypairs on every deployment server and adding the public key to the github project as 'Deployment key'. </p>

<p>However, I recently found out that these deployment keys actually do have write access to the project. Hence, every of the server administrators could potentially start editing. Furthermore I can add every deployment key to only one repository, whereas I would like to be able to deploy multiple repositories on one and the same deployment server.</p>

<p>Is there a way to provide read-only access for private repositories to selected users on Github?</p>
","<p>I <a href=""https://twitter.com/defunkt/status/1678391086419969"" rel=""noreferrer"">have it on good authority</a> that the (relatively new) <a href=""https://github.com/blog/674-introducing-organizations"" rel=""noreferrer"">""Organizations""</a> feature allows you to add people with read-only access to a private repository.</p>
","65656","<git><github><collaboration><readonly><public-key>","131","67","3","2017-09-07 19:37:09","4126585","1","14","318752","","2010-05-19 18:55:21","2010-05-19 18:49:24",""
"2868432","Github: readonly access to a private repo","<p>I am developing some private projects on Github, and I would like to add nightly cronjobs to my deployments servers to pull the latest version from github. I am currently doing this by generating keypairs on every deployment server and adding the public key to the github project as 'Deployment key'. </p>

<p>However, I recently found out that these deployment keys actually do have write access to the project. Hence, every of the server administrators could potentially start editing. Furthermore I can add every deployment key to only one repository, whereas I would like to be able to deploy multiple repositories on one and the same deployment server.</p>

<p>Is there a way to provide read-only access for private repositories to selected users on Github?</p>
","<p>For anyone else finding this question, know that nowadays you can in fact create read-only deploy keys:</p>

<p><a href=""https://github.com/blog/2024-read-only-deploy-keys"">https://github.com/blog/2024-read-only-deploy-keys</a></p>

<p>You can still create deploy keys with write access, but have to explicitly grant that permission when adding the key.</p>
","65656","<git><github><collaboration><readonly><public-key>","131","34","3","2017-09-07 19:37:09","4126585","1","14","318752","","2010-05-19 18:55:21","2010-05-19 18:49:24",""
"2868432","Github: readonly access to a private repo","<p>I am developing some private projects on Github, and I would like to add nightly cronjobs to my deployments servers to pull the latest version from github. I am currently doing this by generating keypairs on every deployment server and adding the public key to the github project as 'Deployment key'. </p>

<p>However, I recently found out that these deployment keys actually do have write access to the project. Hence, every of the server administrators could potentially start editing. Furthermore I can add every deployment key to only one repository, whereas I would like to be able to deploy multiple repositories on one and the same deployment server.</p>

<p>Is there a way to provide read-only access for private repositories to selected users on Github?</p>
","<p>For Organizations:
I suggest creating a new team specifically for the user. This team can then grant read-only access to the repositories you specify. I hope this helps!</p>
","65656","<git><github><collaboration><readonly><public-key>","131","1","3","2017-09-07 19:37:09","4126585","1","14","318752","","2010-05-19 18:55:21","2010-05-19 18:49:24",""
"11506891","How to load the RSA public key from file in C#","<p>I need to load the following RSA public key from a file for use with the RSACryptoServiceProvider class. How can I do this?</p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN PUBLIC KEY-----
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/syEKqEkMtQL0+d
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX+izR
KbGMRtur2TYklnyVkjeeHfAggo8vWQmWesnOG55vQYHbOOFoJbk0EkwEr5R/PbKm
byXPPN8zwnS5/XXXXXXXXXXXX
-----END PUBLIC KEY-----
</code></pre>

<hr>

<p>This code works with my pub key: <a href=""http://www.jensign.com/opensslkey/"" rel=""noreferrer"">http://www.jensign.com/opensslkey/</a></p>

<p>Here is the code I am using</p>

<pre><code>        static string RSA(string input)
        {
            RSACryptoServiceProvider rsa = DecodeX509PublicKey(Convert.FromBase64String(GetKey()));

            return (Convert.ToBase64String(rsa.Encrypt(Encoding.ASCII.GetBytes(input), false)));
        }

        static string GetKey()
        {
            return File.ReadAllText(""master.pub"").Replace(""-----BEGIN PUBLIC KEY-----"", """").Replace(""-----END PUBLIC KEY-----"", """");
            //.Replace(""\n"", """");
        }

        private static bool CompareBytearrays(byte[] a, byte[] b)
        {
            if (a.Length != b.Length)
                return false;
            int i = 0;
            foreach (byte c in a)
            {
                if (c != b[i])
                    return false;
                i++;
            }
            return true;
        }

        public static RSACryptoServiceProvider DecodeX509PublicKey(byte[] x509key)
        {
            // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = ""1.2.840.113549.1.1.1""
            byte[] SeqOID = { 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00 };
            byte[] seq = new byte[15];
            // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------
            MemoryStream mem = new MemoryStream(x509key);
            BinaryReader binr = new BinaryReader(mem);    //wrap Memory Stream with BinaryReader for easy reading
            byte bt = 0;
            ushort twobytes = 0;

            try
            {

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8230)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                seq = binr.ReadBytes(15);       //read the Sequence OID
                if (!CompareBytearrays(seq, SeqOID))    //make sure Sequence for OID is correct
                    return null;

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8103) //data read as little endian order (actual data order for Bit String is 03 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8203)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                bt = binr.ReadByte();
                if (bt != 0x00)     //expect null byte next
                    return null;

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8230)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                twobytes = binr.ReadUInt16();
                byte lowbyte = 0x00;
                byte highbyte = 0x00;

                if (twobytes == 0x8102) //data read as little endian order (actual data order for Integer is 02 81)
                    lowbyte = binr.ReadByte();  // read next bytes which is bytes in modulus
                else if (twobytes == 0x8202)
                {
                    highbyte = binr.ReadByte(); //advance 2 bytes
                    lowbyte = binr.ReadByte();
                }
                else
                    return null;
                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   //reverse byte order since asn.1 key uses big endian order
                int modsize = BitConverter.ToInt32(modint, 0);

                byte firstbyte = binr.ReadByte();
                binr.BaseStream.Seek(-1, SeekOrigin.Current);

                if (firstbyte == 0x00)
                {   //if first byte (highest order) of modulus is zero, don't include it
                    binr.ReadByte();    //skip this null byte
                    modsize -= 1;   //reduce modulus buffer size by 1
                }

                byte[] modulus = binr.ReadBytes(modsize);   //read the modulus bytes

                if (binr.ReadByte() != 0x02)            //expect an Integer for the exponent data
                    return null;
                int expbytes = (int)binr.ReadByte();        // should only need one byte for actual exponent data (for all useful values)
                byte[] exponent = binr.ReadBytes(expbytes);

                // ------- create RSACryptoServiceProvider instance and initialize with public key -----
                RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
                RSAParameters RSAKeyInfo = new RSAParameters();
                RSAKeyInfo.Modulus = modulus;
                RSAKeyInfo.Exponent = exponent;
                RSA.ImportParameters(RSAKeyInfo);
                return RSA;
            }
            catch (Exception)
            {
                return null;
            }

            finally { binr.Close(); }

        }
</code></pre>

<p>Just call the 'RSA' method with the text you want to encrypt and you're done.</p>
","<p>If you're talking about an X509 certificate:
</p>

<pre><code>FileStream fs = new FileStream(""your_cert_file.crt"", FileMode.Open);
byte[] certBytes = new byte[fs.Length];
fs.Read(certBytes, 0, (Int32)fs.Length);
fs.Close();
System.Security.Cryptography.X509Certificates.X509Certificate x509cert = 
    new X509Certificate(certBytes);
Console.WriteLine(x509cert.GetPublicKey());
Console.WriteLine(x509cert.GetPublicKeyString());
</code></pre>

<p><strong>EDITED after the comment of @hkproj done in ""7/16/2012 15:04:58 Z"":</strong></p>

<p>Looking around here I found ""<a href=""https://stackoverflow.com/a/11367152/1350308"">Reading PEM RSA Public Key Only using Bouncy Castle</a>"".
I guess what you want is this:
</p>

<pre><code>using (StreamReader reader = File.OpenText(@""c:\RSA.txt""))
{
    Org.BouncyCastle.OpenSsl.PemReader pr = 
        new Org.BouncyCastle.OpenSsl.PemReader(reader);
    Org.BouncyCastle.Utilities.IO.Pem.PemObject po = pr.ReadPemObject();

    Console.WriteLine(""PemObject, Type: "" + po.Type);
    Console.WriteLine(""PemObject, Length: "" + po.Content.Length);
}
</code></pre>

<p>However, with your file I get an error: <code>System.IO.IOException : base64 data appears to be truncated</code>.</p>

<p>So changing your file to something like:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/syEKqEkMtQL0+d
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX+izR
KbGMRtur2TYklnyVkjeeHfAggo8vWQmWesnOG55vQYHbOOFoJbk0EkwEr5R/PbKm
byXPPN8zwnS5/XXXXXXXXXXXXZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
-----END PUBLIC KEY-----
</code></pre>

<p>The result is:</p>

<pre><code>PemObject, Type: PUBLIC KEY
PemObject, Length: 192
</code></pre>
","62218","<c#><rsa><encryption-asymmetric><public-key>","30","5","3","2019-08-23 09:39:17","","6","14","739636","","2012-07-16 15:53:43","2012-07-16 14:54:14",""
"11506891","How to load the RSA public key from file in C#","<p>I need to load the following RSA public key from a file for use with the RSACryptoServiceProvider class. How can I do this?</p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN PUBLIC KEY-----
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/syEKqEkMtQL0+d
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX+izR
KbGMRtur2TYklnyVkjeeHfAggo8vWQmWesnOG55vQYHbOOFoJbk0EkwEr5R/PbKm
byXPPN8zwnS5/XXXXXXXXXXXX
-----END PUBLIC KEY-----
</code></pre>

<hr>

<p>This code works with my pub key: <a href=""http://www.jensign.com/opensslkey/"" rel=""noreferrer"">http://www.jensign.com/opensslkey/</a></p>

<p>Here is the code I am using</p>

<pre><code>        static string RSA(string input)
        {
            RSACryptoServiceProvider rsa = DecodeX509PublicKey(Convert.FromBase64String(GetKey()));

            return (Convert.ToBase64String(rsa.Encrypt(Encoding.ASCII.GetBytes(input), false)));
        }

        static string GetKey()
        {
            return File.ReadAllText(""master.pub"").Replace(""-----BEGIN PUBLIC KEY-----"", """").Replace(""-----END PUBLIC KEY-----"", """");
            //.Replace(""\n"", """");
        }

        private static bool CompareBytearrays(byte[] a, byte[] b)
        {
            if (a.Length != b.Length)
                return false;
            int i = 0;
            foreach (byte c in a)
            {
                if (c != b[i])
                    return false;
                i++;
            }
            return true;
        }

        public static RSACryptoServiceProvider DecodeX509PublicKey(byte[] x509key)
        {
            // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = ""1.2.840.113549.1.1.1""
            byte[] SeqOID = { 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00 };
            byte[] seq = new byte[15];
            // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------
            MemoryStream mem = new MemoryStream(x509key);
            BinaryReader binr = new BinaryReader(mem);    //wrap Memory Stream with BinaryReader for easy reading
            byte bt = 0;
            ushort twobytes = 0;

            try
            {

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8230)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                seq = binr.ReadBytes(15);       //read the Sequence OID
                if (!CompareBytearrays(seq, SeqOID))    //make sure Sequence for OID is correct
                    return null;

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8103) //data read as little endian order (actual data order for Bit String is 03 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8203)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                bt = binr.ReadByte();
                if (bt != 0x00)     //expect null byte next
                    return null;

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8230)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                twobytes = binr.ReadUInt16();
                byte lowbyte = 0x00;
                byte highbyte = 0x00;

                if (twobytes == 0x8102) //data read as little endian order (actual data order for Integer is 02 81)
                    lowbyte = binr.ReadByte();  // read next bytes which is bytes in modulus
                else if (twobytes == 0x8202)
                {
                    highbyte = binr.ReadByte(); //advance 2 bytes
                    lowbyte = binr.ReadByte();
                }
                else
                    return null;
                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   //reverse byte order since asn.1 key uses big endian order
                int modsize = BitConverter.ToInt32(modint, 0);

                byte firstbyte = binr.ReadByte();
                binr.BaseStream.Seek(-1, SeekOrigin.Current);

                if (firstbyte == 0x00)
                {   //if first byte (highest order) of modulus is zero, don't include it
                    binr.ReadByte();    //skip this null byte
                    modsize -= 1;   //reduce modulus buffer size by 1
                }

                byte[] modulus = binr.ReadBytes(modsize);   //read the modulus bytes

                if (binr.ReadByte() != 0x02)            //expect an Integer for the exponent data
                    return null;
                int expbytes = (int)binr.ReadByte();        // should only need one byte for actual exponent data (for all useful values)
                byte[] exponent = binr.ReadBytes(expbytes);

                // ------- create RSACryptoServiceProvider instance and initialize with public key -----
                RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
                RSAParameters RSAKeyInfo = new RSAParameters();
                RSAKeyInfo.Modulus = modulus;
                RSAKeyInfo.Exponent = exponent;
                RSA.ImportParameters(RSAKeyInfo);
                return RSA;
            }
            catch (Exception)
            {
                return null;
            }

            finally { binr.Close(); }

        }
</code></pre>

<p>Just call the 'RSA' method with the text you want to encrypt and you're done.</p>
","<p>Are you speaking about certificates stored in file?</p>

<p>If you have an object like:</p>

<pre><code>X509Certificate2 certificate;
</code></pre>

<p>you can use following code:</p>

<pre><code>RSACryptoServiceProvider rsaprovider =
                    (RSACryptoServiceProvider)certificate.PublicKey.Key;
</code></pre>

<p>and then use the class RSACryptoServiceProvider (see <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx</a>).</p>

<p>To load an X509Certificate2 use its constructor (see <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.x509certificate2.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.x509certificate2.aspx</a>).</p>

<p>This program works fine for me:</p>

<pre><code>    static void Main(string[] args)
    {
        try 
        {
            X509Certificate2 certificate = 
                new X509Certificate2(""&lt;PFX Certificate Path"", ""&lt;Certificate-Password&gt;"");
            RSACryptoServiceProvider rsaprovider = (RSACryptoServiceProvider)certificate.PublicKey.Key;
        }
        catch(Exception e)
        {

        }
    }
</code></pre>
","62218","<c#><rsa><encryption-asymmetric><public-key>","30","3","3","2019-08-23 09:39:17","","6","14","739636","","2012-07-16 15:53:43","2012-07-16 14:54:14",""
"11506891","How to load the RSA public key from file in C#","<p>I need to load the following RSA public key from a file for use with the RSACryptoServiceProvider class. How can I do this?</p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN PUBLIC KEY-----
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/syEKqEkMtQL0+d
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX+izR
KbGMRtur2TYklnyVkjeeHfAggo8vWQmWesnOG55vQYHbOOFoJbk0EkwEr5R/PbKm
byXPPN8zwnS5/XXXXXXXXXXXX
-----END PUBLIC KEY-----
</code></pre>

<hr>

<p>This code works with my pub key: <a href=""http://www.jensign.com/opensslkey/"" rel=""noreferrer"">http://www.jensign.com/opensslkey/</a></p>

<p>Here is the code I am using</p>

<pre><code>        static string RSA(string input)
        {
            RSACryptoServiceProvider rsa = DecodeX509PublicKey(Convert.FromBase64String(GetKey()));

            return (Convert.ToBase64String(rsa.Encrypt(Encoding.ASCII.GetBytes(input), false)));
        }

        static string GetKey()
        {
            return File.ReadAllText(""master.pub"").Replace(""-----BEGIN PUBLIC KEY-----"", """").Replace(""-----END PUBLIC KEY-----"", """");
            //.Replace(""\n"", """");
        }

        private static bool CompareBytearrays(byte[] a, byte[] b)
        {
            if (a.Length != b.Length)
                return false;
            int i = 0;
            foreach (byte c in a)
            {
                if (c != b[i])
                    return false;
                i++;
            }
            return true;
        }

        public static RSACryptoServiceProvider DecodeX509PublicKey(byte[] x509key)
        {
            // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = ""1.2.840.113549.1.1.1""
            byte[] SeqOID = { 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00 };
            byte[] seq = new byte[15];
            // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------
            MemoryStream mem = new MemoryStream(x509key);
            BinaryReader binr = new BinaryReader(mem);    //wrap Memory Stream with BinaryReader for easy reading
            byte bt = 0;
            ushort twobytes = 0;

            try
            {

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8230)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                seq = binr.ReadBytes(15);       //read the Sequence OID
                if (!CompareBytearrays(seq, SeqOID))    //make sure Sequence for OID is correct
                    return null;

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8103) //data read as little endian order (actual data order for Bit String is 03 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8203)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                bt = binr.ReadByte();
                if (bt != 0x00)     //expect null byte next
                    return null;

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8230)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                twobytes = binr.ReadUInt16();
                byte lowbyte = 0x00;
                byte highbyte = 0x00;

                if (twobytes == 0x8102) //data read as little endian order (actual data order for Integer is 02 81)
                    lowbyte = binr.ReadByte();  // read next bytes which is bytes in modulus
                else if (twobytes == 0x8202)
                {
                    highbyte = binr.ReadByte(); //advance 2 bytes
                    lowbyte = binr.ReadByte();
                }
                else
                    return null;
                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   //reverse byte order since asn.1 key uses big endian order
                int modsize = BitConverter.ToInt32(modint, 0);

                byte firstbyte = binr.ReadByte();
                binr.BaseStream.Seek(-1, SeekOrigin.Current);

                if (firstbyte == 0x00)
                {   //if first byte (highest order) of modulus is zero, don't include it
                    binr.ReadByte();    //skip this null byte
                    modsize -= 1;   //reduce modulus buffer size by 1
                }

                byte[] modulus = binr.ReadBytes(modsize);   //read the modulus bytes

                if (binr.ReadByte() != 0x02)            //expect an Integer for the exponent data
                    return null;
                int expbytes = (int)binr.ReadByte();        // should only need one byte for actual exponent data (for all useful values)
                byte[] exponent = binr.ReadBytes(expbytes);

                // ------- create RSACryptoServiceProvider instance and initialize with public key -----
                RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
                RSAParameters RSAKeyInfo = new RSAParameters();
                RSAKeyInfo.Modulus = modulus;
                RSAKeyInfo.Exponent = exponent;
                RSA.ImportParameters(RSAKeyInfo);
                return RSA;
            }
            catch (Exception)
            {
                return null;
            }

            finally { binr.Close(); }

        }
</code></pre>

<p>Just call the 'RSA' method with the text you want to encrypt and you're done.</p>
","<p>You can create an <code>RSACryptoServiceProvider</code> from a PEM file using the following class (<code>GetRSAProviderFromPemFile</code> method).</p>

<p><strong>Warning:</strong>
<strong>Don't just copy code from StackOverflow without verification! Especially not crypto code! This code has bugs (see comments). You may want to write and run tests before using this in production (if you really have no better option).</strong> I refuse to edit the code to fix it, as it would be just as unreliable as before without tests and an active maintainer.</p>

<p><strong>Source:</strong>
This code seems to be taken from <code>opensslkey</code> from <a href=""http://jensign.com/dotnet/opensslkey/index.html"" rel=""noreferrer"">this site</a>.
Copyright (c) 2000  JavaScience Consulting, Michel Gallant.
The original package was released under a BSD-like license, so it is probably OK to use it (but you may want to double-check). There is also a <a href=""https://www.nuget.org/packages/opensslkey"" rel=""noreferrer"">NuGet package</a> by the same author.</p>

<p>Here is the copy-pasted source code originally posted to this answer:</p>

<pre><code>RSACryptoServiceProvider provider = PemKeyUtils.GetRSAProviderFromPemFile(  @""public_key.pem"" );


public class PemKeyUtils
{
    const String pemprivheader = ""-----BEGIN RSA PRIVATE KEY-----"";
    const String pemprivfooter = ""-----END RSA PRIVATE KEY-----"";
    const String pempubheader = ""-----BEGIN PUBLIC KEY-----"";
    const String pempubfooter = ""-----END PUBLIC KEY-----"";
    const String pemp8header = ""-----BEGIN PRIVATE KEY-----"";
    const String pemp8footer = ""-----END PRIVATE KEY-----"";
    const String pemp8encheader = ""-----BEGIN ENCRYPTED PRIVATE KEY-----"";
    const String pemp8encfooter = ""-----END ENCRYPTED PRIVATE KEY-----"";

    static bool verbose = false;

    public static RSACryptoServiceProvider GetRSAProviderFromPemFile( String pemfile )
    {
        bool isPrivateKeyFile = true;
        string pemstr = File.ReadAllText( pemfile ).Trim();
        if (pemstr.StartsWith( pempubheader ) &amp;&amp; pemstr.EndsWith( pempubfooter ))
            isPrivateKeyFile = false;

        byte[] pemkey;
        if (isPrivateKeyFile)
            pemkey = DecodeOpenSSLPrivateKey( pemstr );
        else
            pemkey = DecodeOpenSSLPublicKey( pemstr );

        if (pemkey == null)
            return null;

        if (isPrivateKeyFile)
            return DecodeRSAPrivateKey( pemkey );
        else
            return DecodeX509PublicKey( pemkey );

    }



    //--------   Get the binary RSA PUBLIC key   --------
    static byte[] DecodeOpenSSLPublicKey( String instr )
    {
        const String pempubheader = ""-----BEGIN PUBLIC KEY-----"";
        const String pempubfooter = ""-----END PUBLIC KEY-----"";
        String pemstr = instr.Trim();
        byte[] binkey;
        if (!pemstr.StartsWith( pempubheader ) || !pemstr.EndsWith( pempubfooter ))
            return null;
        StringBuilder sb = new StringBuilder( pemstr );
        sb.Replace( pempubheader, """" );  //remove headers/footers, if present
        sb.Replace( pempubfooter, """" );

        String pubstr = sb.ToString().Trim();   //get string after removing leading/trailing whitespace

        try
        {
            binkey = Convert.FromBase64String( pubstr );
        }
        catch (System.FormatException)
        {       //if can't b64 decode, data is not valid
            return null;
        }
        return binkey;
    }

    static RSACryptoServiceProvider DecodeX509PublicKey(byte[] x509Key)
    {
        // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = ""1.2.840.113549.1.1.1""
        byte[] seqOid = { 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00 };
        // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------
        using (var mem = new MemoryStream(x509Key))
        {
            using (var binr = new BinaryReader(mem))    //wrap Memory Stream with BinaryReader for easy reading
            {
                try
                {
                    var twobytes = binr.ReadUInt16();
                    switch (twobytes)
                    {
                        case 0x8130:
                            binr.ReadByte();    //advance 1 byte
                            break;
                        case 0x8230:
                            binr.ReadInt16();   //advance 2 bytes
                            break;
                        default:
                            return null;
                    }

                    var seq = binr.ReadBytes(15);
                    if (!CompareBytearrays(seq, seqOid))  //make sure Sequence for OID is correct
                        return null;

                    twobytes = binr.ReadUInt16();
                    if (twobytes == 0x8103) //data read as little endian order (actual data order for Bit String is 03 81)
                        binr.ReadByte();    //advance 1 byte
                    else if (twobytes == 0x8203)
                        binr.ReadInt16();   //advance 2 bytes
                    else
                        return null;

                    var bt = binr.ReadByte();
                    if (bt != 0x00)     //expect null byte next
                        return null;

                    twobytes = binr.ReadUInt16();
                    if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                        binr.ReadByte();    //advance 1 byte
                    else if (twobytes == 0x8230)
                        binr.ReadInt16();   //advance 2 bytes
                    else
                        return null;

                    twobytes = binr.ReadUInt16();
                    byte lowbyte = 0x00;
                    byte highbyte = 0x00;

                    if (twobytes == 0x8102) //data read as little endian order (actual data order for Integer is 02 81)
                        lowbyte = binr.ReadByte();  // read next bytes which is bytes in modulus
                    else if (twobytes == 0x8202)
                    {
                        highbyte = binr.ReadByte(); //advance 2 bytes
                        lowbyte = binr.ReadByte();
                    }
                    else
                        return null;
                    byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   //reverse byte order since asn.1 key uses big endian order
                    int modsize = BitConverter.ToInt32(modint, 0);

                    byte firstbyte = binr.ReadByte();
                    binr.BaseStream.Seek(-1, SeekOrigin.Current);

                    if (firstbyte == 0x00)
                    {   //if first byte (highest order) of modulus is zero, don't include it
                        binr.ReadByte();    //skip this null byte
                        modsize -= 1;   //reduce modulus buffer size by 1
                    }

                    byte[] modulus = binr.ReadBytes(modsize); //read the modulus bytes

                    if (binr.ReadByte() != 0x02)            //expect an Integer for the exponent data
                        return null;
                    int expbytes = binr.ReadByte();        // should only need one byte for actual exponent data (for all useful values)
                    byte[] exponent = binr.ReadBytes(expbytes);

                    // We don't really need to print anything but if we insist to...
                    //showBytes(""\nExponent"", exponent);
                    //showBytes(""\nModulus"", modulus);

                    // ------- create RSACryptoServiceProvider instance and initialize with public key -----
                    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
                    RSAParameters rsaKeyInfo = new RSAParameters
                    {
                        Modulus = modulus,
                        Exponent = exponent
                    };
                    rsa.ImportParameters(rsaKeyInfo);
                    return rsa;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }
    }

    //------- Parses binary ans.1 RSA private key; returns RSACryptoServiceProvider  ---
    static RSACryptoServiceProvider DecodeRSAPrivateKey( byte[] privkey )
    {
        byte[] MODULUS, E, D, P, Q, DP, DQ, IQ;

        // ---------  Set up stream to decode the asn.1 encoded RSA private key  ------
        MemoryStream mem = new MemoryStream( privkey );
        BinaryReader binr = new BinaryReader( mem );    //wrap Memory Stream with BinaryReader for easy reading
        byte bt = 0;
        ushort twobytes = 0;
        int elems = 0;
        try
        {
            twobytes = binr.ReadUInt16();
            if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                binr.ReadByte();    //advance 1 byte
            else if (twobytes == 0x8230)
                binr.ReadInt16();   //advance 2 bytes
            else
                return null;

            twobytes = binr.ReadUInt16();
            if (twobytes != 0x0102) //version number
                return null;
            bt = binr.ReadByte();
            if (bt != 0x00)
                return null;


            //------  all private key components are Integer sequences ----
            elems = GetIntegerSize( binr );
            MODULUS = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            E = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            D = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            P = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            Q = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            DP = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            DQ = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            IQ = binr.ReadBytes( elems );

            Console.WriteLine( ""showing components .."" );
            if (verbose)
            {
                showBytes( ""\nModulus"", MODULUS );
                showBytes( ""\nExponent"", E );
                showBytes( ""\nD"", D );
                showBytes( ""\nP"", P );
                showBytes( ""\nQ"", Q );
                showBytes( ""\nDP"", DP );
                showBytes( ""\nDQ"", DQ );
                showBytes( ""\nIQ"", IQ );
            }

            // ------- create RSACryptoServiceProvider instance and initialize with public key -----
            RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
            RSAParameters RSAparams = new RSAParameters();
            RSAparams.Modulus = MODULUS;
            RSAparams.Exponent = E;
            RSAparams.D = D;
            RSAparams.P = P;
            RSAparams.Q = Q;
            RSAparams.DP = DP;
            RSAparams.DQ = DQ;
            RSAparams.InverseQ = IQ;
            RSA.ImportParameters( RSAparams );
            return RSA;
        }
        catch (Exception)
        {
            return null;
        }
        finally { binr.Close(); }
    }

    private static int GetIntegerSize( BinaryReader binr )
    {
        byte bt = 0;
        byte lowbyte = 0x00;
        byte highbyte = 0x00;
        int count = 0;
        bt = binr.ReadByte();
        if (bt != 0x02)     //expect integer
            return 0;
        bt = binr.ReadByte();

        if (bt == 0x81)
            count = binr.ReadByte();    // data size in next byte
        else
            if (bt == 0x82)
            {
                highbyte = binr.ReadByte(); // data size in next 2 bytes
                lowbyte = binr.ReadByte();
                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };
                count = BitConverter.ToInt32( modint, 0 );
            }
            else
            {
                count = bt;     // we already have the data size
            }



        while (binr.ReadByte() == 0x00)
        {   //remove high order zeros in data
            count -= 1;
        }
        binr.BaseStream.Seek( -1, SeekOrigin.Current );     //last ReadByte wasn't a removed zero, so back up a byte
        return count;
    }

    //-----  Get the binary RSA PRIVATE key, decrypting if necessary ----
    static byte[] DecodeOpenSSLPrivateKey( String instr )
    {
        const String pemprivheader = ""-----BEGIN RSA PRIVATE KEY-----"";
        const String pemprivfooter = ""-----END RSA PRIVATE KEY-----"";
        String pemstr = instr.Trim();
        byte[] binkey;
        if (!pemstr.StartsWith( pemprivheader ) || !pemstr.EndsWith( pemprivfooter ))
            return null;

        StringBuilder sb = new StringBuilder( pemstr );
        sb.Replace( pemprivheader, """" );  //remove headers/footers, if present
        sb.Replace( pemprivfooter, """" );

        String pvkstr = sb.ToString().Trim();   //get string after removing leading/trailing whitespace

        try
        {        // if there are no PEM encryption info lines, this is an UNencrypted PEM private key
            binkey = Convert.FromBase64String( pvkstr );
            return binkey;
        }
        catch (System.FormatException)
        {       //if can't b64 decode, it must be an encrypted private key
            //Console.WriteLine(""Not an unencrypted OpenSSL PEM private key"");  
        }

        StringReader str = new StringReader( pvkstr );

        //-------- read PEM encryption info. lines and extract salt -----
        if (!str.ReadLine().StartsWith( ""Proc-Type: 4,ENCRYPTED"" ))
            return null;
        String saltline = str.ReadLine();
        if (!saltline.StartsWith( ""DEK-Info: DES-EDE3-CBC,"" ))
            return null;
        String saltstr = saltline.Substring( saltline.IndexOf( "","" ) + 1 ).Trim();
        byte[] salt = new byte[saltstr.Length / 2];
        for (int i = 0; i &lt; salt.Length; i++)
            salt[i] = Convert.ToByte( saltstr.Substring( i * 2, 2 ), 16 );
        if (!(str.ReadLine() == """"))
            return null;

        //------ remaining b64 data is encrypted RSA key ----
        String encryptedstr = str.ReadToEnd();

        try
        {   //should have b64 encrypted RSA key now
            binkey = Convert.FromBase64String( encryptedstr );
        }
        catch (System.FormatException)
        {  // bad b64 data.
            return null;
        }

        //------ Get the 3DES 24 byte key using PDK used by OpenSSL ----

        SecureString despswd = GetSecPswd( ""Enter password to derive 3DES key==&gt;"" );
        //Console.Write(""\nEnter password to derive 3DES key: "");
        //String pswd = Console.ReadLine();
        byte[] deskey = GetOpenSSL3deskey( salt, despswd, 1, 2 );    // count=1 (for OpenSSL implementation); 2 iterations to get at least 24 bytes
        if (deskey == null)
            return null;
        //showBytes(""3DES key"", deskey) ;

        //------ Decrypt the encrypted 3des-encrypted RSA private key ------
        byte[] rsakey = DecryptKey( binkey, deskey, salt ); //OpenSSL uses salt value in PEM header also as 3DES IV
        if (rsakey != null)
            return rsakey;  //we have a decrypted RSA private key
        else
        {
            Console.WriteLine( ""Failed to decrypt RSA private key; probably wrong password."" );
            return null;
        }
    }


    // ----- Decrypt the 3DES encrypted RSA private key ----------

    static byte[] DecryptKey( byte[] cipherData, byte[] desKey, byte[] IV )
    {
        MemoryStream memst = new MemoryStream();
        TripleDES alg = TripleDES.Create();
        alg.Key = desKey;
        alg.IV = IV;
        try
        {
            CryptoStream cs = new CryptoStream( memst, alg.CreateDecryptor(), CryptoStreamMode.Write );
            cs.Write( cipherData, 0, cipherData.Length );
            cs.Close();
        }
        catch (Exception exc)
        {
            Console.WriteLine( exc.Message );
            return null;
        }
        byte[] decryptedData = memst.ToArray();
        return decryptedData;
    }

    //-----   OpenSSL PBKD uses only one hash cycle (count); miter is number of iterations required to build sufficient bytes ---
    static byte[] GetOpenSSL3deskey( byte[] salt, SecureString secpswd, int count, int miter )
    {
        IntPtr unmanagedPswd = IntPtr.Zero;
        int HASHLENGTH = 16;    //MD5 bytes
        byte[] keymaterial = new byte[HASHLENGTH * miter];     //to store contatenated Mi hashed results


        byte[] psbytes = new byte[secpswd.Length];
        unmanagedPswd = Marshal.SecureStringToGlobalAllocAnsi( secpswd );
        Marshal.Copy( unmanagedPswd, psbytes, 0, psbytes.Length );
        Marshal.ZeroFreeGlobalAllocAnsi( unmanagedPswd );

        //UTF8Encoding utf8 = new UTF8Encoding();
        //byte[] psbytes = utf8.GetBytes(pswd);

        // --- contatenate salt and pswd bytes into fixed data array ---
        byte[] data00 = new byte[psbytes.Length + salt.Length];
        Array.Copy( psbytes, data00, psbytes.Length );      //copy the pswd bytes
        Array.Copy( salt, 0, data00, psbytes.Length, salt.Length ); //concatenate the salt bytes

        // ---- do multi-hashing and contatenate results  D1, D2 ...  into keymaterial bytes ----
        MD5 md5 = new MD5CryptoServiceProvider();
        byte[] result = null;
        byte[] hashtarget = new byte[HASHLENGTH + data00.Length];   //fixed length initial hashtarget

        for (int j = 0; j &lt; miter; j++)
        {
            // ----  Now hash consecutively for count times ------
            if (j == 0)
                result = data00;    //initialize 
            else
            {
                Array.Copy( result, hashtarget, result.Length );
                Array.Copy( data00, 0, hashtarget, result.Length, data00.Length );
                result = hashtarget;
                //Console.WriteLine(""Updated new initial hash target:"") ;
                //showBytes(result) ;
            }

            for (int i = 0; i &lt; count; i++)
                result = md5.ComputeHash( result );
            Array.Copy( result, 0, keymaterial, j * HASHLENGTH, result.Length );  //contatenate to keymaterial
        }
        //showBytes(""Final key material"", keymaterial);
        byte[] deskey = new byte[24];
        Array.Copy( keymaterial, deskey, deskey.Length );

        Array.Clear( psbytes, 0, psbytes.Length );
        Array.Clear( data00, 0, data00.Length );
        Array.Clear( result, 0, result.Length );
        Array.Clear( hashtarget, 0, hashtarget.Length );
        Array.Clear( keymaterial, 0, keymaterial.Length );

        return deskey;
    }

    static SecureString GetSecPswd( String prompt )
    {
        SecureString password = new SecureString();

        Console.ForegroundColor = ConsoleColor.Gray;
        Console.Write( prompt );
        Console.ForegroundColor = ConsoleColor.Magenta;

        while (true)
        {
            ConsoleKeyInfo cki = Console.ReadKey( true );
            if (cki.Key == ConsoleKey.Enter)
            {
                Console.ForegroundColor = ConsoleColor.Gray;
                Console.WriteLine();
                return password;
            }
            else if (cki.Key == ConsoleKey.Backspace)
            {
                // remove the last asterisk from the screen...
                if (password.Length &gt; 0)
                {
                    Console.SetCursorPosition( Console.CursorLeft - 1, Console.CursorTop );
                    Console.Write( "" "" );
                    Console.SetCursorPosition( Console.CursorLeft - 1, Console.CursorTop );
                    password.RemoveAt( password.Length - 1 );
                }
            }
            else if (cki.Key == ConsoleKey.Escape)
            {
                Console.ForegroundColor = ConsoleColor.Gray;
                Console.WriteLine();
                return password;
            }
            else if (Char.IsLetterOrDigit( cki.KeyChar ) || Char.IsSymbol( cki.KeyChar ))
            {
                if (password.Length &lt; 20)
                {
                    password.AppendChar( cki.KeyChar );
                    Console.Write( ""*"" );
                }
                else
                {
                    Console.Beep();
                }
            }
            else
            {
                Console.Beep();
            }
        }
    }

    static bool CompareBytearrays( byte[] a, byte[] b )
    {
        if (a.Length != b.Length)
            return false;
        int i = 0;
        foreach (byte c in a)
        {
            if (c != b[i])
                return false;
            i++;
        }
        return true;
    }

    static void showBytes( String info, byte[] data )
    {
        Console.WriteLine( ""{0}  [{1} bytes]"", info, data.Length );
        for (int i = 1; i &lt;= data.Length; i++)
        {
            Console.Write( ""{0:X2}  "", data[i - 1] );
            if (i % 16 == 0)
                Console.WriteLine();
        }
        Console.WriteLine( ""\n\n"" );
    }

}
</code></pre>
","62218","<c#><rsa><encryption-asymmetric><public-key>","30","49","3","2019-08-23 09:39:17","","6","14","739636","","2012-07-16 15:53:43","2012-07-16 14:54:14",""
"18039401","How can I transform between the two styles of public key format, one ""BEGIN RSA PUBLIC KEY"", the other is ""BEGIN PUBLIC KEY""","<p>How can I transform between the two styles of public key format, 
one format is:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
...
-----END PUBLIC KEY-----
</code></pre>

<p>the other format is:</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
...
-----END RSA PUBLIC KEY-----
</code></pre>

<p>for example I generated id_rsa/id_rsa.pub pair using ssh-keygen command,
I calculated the public key from id_rsa using:</p>

<pre><code>openssl rsa -in id_rsa -pubout -out pub2 
</code></pre>

<p>then again I calculated the public key from id_rsa.pub using :</p>

<pre><code>ssh-keygen -f id_rsa.pub -e -m pem &gt; pub1
</code></pre>

<p>the content is pub1 is :</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA61BjmfXGEvWmegnBGSuS+rU9soUg2FnODva32D1AqhwdziwHINFa
D1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBSEVCgJjtHAGZIm5GL/KA86KDp/CwDFMSw
luowcXwDwoyinmeOY9eKyh6aY72xJh7noLBBq1N0bWi1e2i+83txOCg4yV2oVXhB
o8pYEJ8LT3el6Smxol3C1oFMVdwPgc0vTl25XucMcG/ALE/KNY6pqC2AQ6R2ERlV
gPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeulmCpGSynXNcpZ/06+vofGi/2MlpQZNhH
Ao8eayMp6FcvNucIpUndo1X8dKMv3Y26ZQIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<p>and the content of pub2 is :</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA61BjmfXGEvWmegnBGSuS
+rU9soUg2FnODva32D1AqhwdziwHINFaD1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBS
EVCgJjtHAGZIm5GL/KA86KDp/CwDFMSwluowcXwDwoyinmeOY9eKyh6aY72xJh7n
oLBBq1N0bWi1e2i+83txOCg4yV2oVXhBo8pYEJ8LT3el6Smxol3C1oFMVdwPgc0v
Tl25XucMcG/ALE/KNY6pqC2AQ6R2ERlVgPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeu
lmCpGSynXNcpZ/06+vofGi/2MlpQZNhHAo8eayMp6FcvNucIpUndo1X8dKMv3Y26
ZQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>According to my understanding, pub1 and pub2 contain the same public key information, but they are in different format, I wonder how can I transform between the two format? Can anyone show me some concise introduction on the tow formats?</p>
","<p>Using <a href=""http://phpseclib.sourceforge.net/"" rel=""noreferrer"">phpseclib, a pure PHP RSA implementation</a>...</p>

<pre><code>&lt;?php
include('Crypt/RSA.php');

$rsa = new Crypt_RSA();
$rsa-&gt;loadKey('-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA61BjmfXGEvWmegnBGSuS
+rU9soUg2FnODva32D1AqhwdziwHINFaD1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBS
EVCgJjtHAGZIm5GL/KA86KDp/CwDFMSwluowcXwDwoyinmeOY9eKyh6aY72xJh7n
oLBBq1N0bWi1e2i+83txOCg4yV2oVXhBo8pYEJ8LT3el6Smxol3C1oFMVdwPgc0v
Tl25XucMcG/ALE/KNY6pqC2AQ6R2ERlVgPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeu
lmCpGSynXNcpZ/06+vofGi/2MlpQZNhHAo8eayMp6FcvNucIpUndo1X8dKMv3Y26
ZQIDAQAB
-----END PUBLIC KEY-----');
$rsa-&gt;setPublicKey();

echo $rsa-&gt;getPublicKey(CRYPT_RSA_PUBLIC_FORMAT_PKCS1_RAW);
</code></pre>

<p>The base64-encoded stuff appears to match even though the header says BEGIN PUBLIC KEY and not BEGIN RSA PUBLIC KEY. So maybe just use str_replace to fix that and you should be good to go!</p>
","61190","<openssl><x509><ssh-keys><public-key><pkcs#1>","83","10","5","2019-05-28 14:09:15","18062029","1","53","608639","","2015-06-17 05:42:35","2013-08-04 03:17:53",""
"18039401","How can I transform between the two styles of public key format, one ""BEGIN RSA PUBLIC KEY"", the other is ""BEGIN PUBLIC KEY""","<p>How can I transform between the two styles of public key format, 
one format is:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
...
-----END PUBLIC KEY-----
</code></pre>

<p>the other format is:</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
...
-----END RSA PUBLIC KEY-----
</code></pre>

<p>for example I generated id_rsa/id_rsa.pub pair using ssh-keygen command,
I calculated the public key from id_rsa using:</p>

<pre><code>openssl rsa -in id_rsa -pubout -out pub2 
</code></pre>

<p>then again I calculated the public key from id_rsa.pub using :</p>

<pre><code>ssh-keygen -f id_rsa.pub -e -m pem &gt; pub1
</code></pre>

<p>the content is pub1 is :</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA61BjmfXGEvWmegnBGSuS+rU9soUg2FnODva32D1AqhwdziwHINFa
D1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBSEVCgJjtHAGZIm5GL/KA86KDp/CwDFMSw
luowcXwDwoyinmeOY9eKyh6aY72xJh7noLBBq1N0bWi1e2i+83txOCg4yV2oVXhB
o8pYEJ8LT3el6Smxol3C1oFMVdwPgc0vTl25XucMcG/ALE/KNY6pqC2AQ6R2ERlV
gPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeulmCpGSynXNcpZ/06+vofGi/2MlpQZNhH
Ao8eayMp6FcvNucIpUndo1X8dKMv3Y26ZQIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<p>and the content of pub2 is :</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA61BjmfXGEvWmegnBGSuS
+rU9soUg2FnODva32D1AqhwdziwHINFaD1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBS
EVCgJjtHAGZIm5GL/KA86KDp/CwDFMSwluowcXwDwoyinmeOY9eKyh6aY72xJh7n
oLBBq1N0bWi1e2i+83txOCg4yV2oVXhBo8pYEJ8LT3el6Smxol3C1oFMVdwPgc0v
Tl25XucMcG/ALE/KNY6pqC2AQ6R2ERlVgPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeu
lmCpGSynXNcpZ/06+vofGi/2MlpQZNhHAo8eayMp6FcvNucIpUndo1X8dKMv3Y26
ZQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>According to my understanding, pub1 and pub2 contain the same public key information, but they are in different format, I wonder how can I transform between the two format? Can anyone show me some concise introduction on the tow formats?</p>
","<p>The only difference between your pub1 and pub2, besides the header/footer, is this additional string in pub2: <code>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A</code>.   If you remove that, the Base 64 is identical to that in pub1.</p>

<p>The extra string corresponds to the algorithm identifier according to <a href=""https://stackoverflow.com/a/12713287"">this Answer</a>.</p>
","61190","<openssl><x509><ssh-keys><public-key><pkcs#1>","83","6","5","2019-05-28 14:09:15","18062029","1","53","608639","","2015-06-17 05:42:35","2013-08-04 03:17:53",""
"18039401","How can I transform between the two styles of public key format, one ""BEGIN RSA PUBLIC KEY"", the other is ""BEGIN PUBLIC KEY""","<p>How can I transform between the two styles of public key format, 
one format is:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
...
-----END PUBLIC KEY-----
</code></pre>

<p>the other format is:</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
...
-----END RSA PUBLIC KEY-----
</code></pre>

<p>for example I generated id_rsa/id_rsa.pub pair using ssh-keygen command,
I calculated the public key from id_rsa using:</p>

<pre><code>openssl rsa -in id_rsa -pubout -out pub2 
</code></pre>

<p>then again I calculated the public key from id_rsa.pub using :</p>

<pre><code>ssh-keygen -f id_rsa.pub -e -m pem &gt; pub1
</code></pre>

<p>the content is pub1 is :</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA61BjmfXGEvWmegnBGSuS+rU9soUg2FnODva32D1AqhwdziwHINFa
D1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBSEVCgJjtHAGZIm5GL/KA86KDp/CwDFMSw
luowcXwDwoyinmeOY9eKyh6aY72xJh7noLBBq1N0bWi1e2i+83txOCg4yV2oVXhB
o8pYEJ8LT3el6Smxol3C1oFMVdwPgc0vTl25XucMcG/ALE/KNY6pqC2AQ6R2ERlV
gPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeulmCpGSynXNcpZ/06+vofGi/2MlpQZNhH
Ao8eayMp6FcvNucIpUndo1X8dKMv3Y26ZQIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<p>and the content of pub2 is :</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA61BjmfXGEvWmegnBGSuS
+rU9soUg2FnODva32D1AqhwdziwHINFaD1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBS
EVCgJjtHAGZIm5GL/KA86KDp/CwDFMSwluowcXwDwoyinmeOY9eKyh6aY72xJh7n
oLBBq1N0bWi1e2i+83txOCg4yV2oVXhBo8pYEJ8LT3el6Smxol3C1oFMVdwPgc0v
Tl25XucMcG/ALE/KNY6pqC2AQ6R2ERlVgPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeu
lmCpGSynXNcpZ/06+vofGi/2MlpQZNhHAo8eayMp6FcvNucIpUndo1X8dKMv3Y26
ZQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>According to my understanding, pub1 and pub2 contain the same public key information, but they are in different format, I wonder how can I transform between the two format? Can anyone show me some concise introduction on the tow formats?</p>
","<p>I found this website to be a good technical explanation of the different formats: <a href=""https://polarssl.org/kb/cryptography/asn1-key-structures-in-der-and-pem"">https://polarssl.org/kb/cryptography/asn1-key-structures-in-der-and-pem</a></p>

<p>""BEGIN RSA PUBLIC KEY"" is PKCS#1, which can only contain RSA keys.</p>

<p>""BEGIN PUBLIC KEY"" is PKCS#8, which can contain a variety of formats.</p>

<p>If you just want to convert them with the command-line, ""openssl rsa"" is good for this.</p>

<p>To convert from PKCS#8 to PKCS#1:</p>

<pre><code>openssl rsa -pubin -in &lt;filename&gt; -RSAPublicKey_out
</code></pre>

<p>To convert from PKCS#1 to PKCS#8:</p>

<pre><code>openssl rsa -RSAPublicKey_in -in &lt;filename&gt; -pubout
</code></pre>
","61190","<openssl><x509><ssh-keys><public-key><pkcs#1>","83","45","5","2019-05-28 14:09:15","18062029","1","53","608639","","2015-06-17 05:42:35","2013-08-04 03:17:53",""
"18039401","How can I transform between the two styles of public key format, one ""BEGIN RSA PUBLIC KEY"", the other is ""BEGIN PUBLIC KEY""","<p>How can I transform between the two styles of public key format, 
one format is:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
...
-----END PUBLIC KEY-----
</code></pre>

<p>the other format is:</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
...
-----END RSA PUBLIC KEY-----
</code></pre>

<p>for example I generated id_rsa/id_rsa.pub pair using ssh-keygen command,
I calculated the public key from id_rsa using:</p>

<pre><code>openssl rsa -in id_rsa -pubout -out pub2 
</code></pre>

<p>then again I calculated the public key from id_rsa.pub using :</p>

<pre><code>ssh-keygen -f id_rsa.pub -e -m pem &gt; pub1
</code></pre>

<p>the content is pub1 is :</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA61BjmfXGEvWmegnBGSuS+rU9soUg2FnODva32D1AqhwdziwHINFa
D1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBSEVCgJjtHAGZIm5GL/KA86KDp/CwDFMSw
luowcXwDwoyinmeOY9eKyh6aY72xJh7noLBBq1N0bWi1e2i+83txOCg4yV2oVXhB
o8pYEJ8LT3el6Smxol3C1oFMVdwPgc0vTl25XucMcG/ALE/KNY6pqC2AQ6R2ERlV
gPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeulmCpGSynXNcpZ/06+vofGi/2MlpQZNhH
Ao8eayMp6FcvNucIpUndo1X8dKMv3Y26ZQIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<p>and the content of pub2 is :</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA61BjmfXGEvWmegnBGSuS
+rU9soUg2FnODva32D1AqhwdziwHINFaD1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBS
EVCgJjtHAGZIm5GL/KA86KDp/CwDFMSwluowcXwDwoyinmeOY9eKyh6aY72xJh7n
oLBBq1N0bWi1e2i+83txOCg4yV2oVXhBo8pYEJ8LT3el6Smxol3C1oFMVdwPgc0v
Tl25XucMcG/ALE/KNY6pqC2AQ6R2ERlVgPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeu
lmCpGSynXNcpZ/06+vofGi/2MlpQZNhHAo8eayMp6FcvNucIpUndo1X8dKMv3Y26
ZQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>According to my understanding, pub1 and pub2 contain the same public key information, but they are in different format, I wonder how can I transform between the two format? Can anyone show me some concise introduction on the tow formats?</p>
","<p>I wanted to help explain what's going on here. </p>

<p>An RSA <em>""Public Key""</em> consists of two numbers:</p>

<ul>
<li>the modulus (e.g. a 2,048 bit number)</li>
<li>the exponent (usually 65,537)</li>
</ul>

<p>Using your RSA public key as an example, the two numbers are:</p>

<ul>
<li><strong>Modulus</strong>: 297,056,429,939,040,947,991,047,334,197,581,225,628,107,021,573,849,359,042,679,698,093,131,908,015,712,695,688,944,173,317,630,555,849,768,647,118,986,535,684,992,447,654,339,728,777,985,990,170,679,511,111,819,558,063,246,667,855,023,730,127,805,401,069,042,322,764,200,545,883,378,826,983,730,553,730,138,478,384,327,116,513,143,842,816,383,440,639,376,515,039,682,874,046,227,217,032,079,079,790,098,143,158,087,443,017,552,531,393,264,852,461,292,775,129,262,080,851,633,535,934,010,704,122,673,027,067,442,627,059,982,393,297,716,922,243,940,155,855,127,430,302,323,883,824,137,412,883,916,794,359,982,603,439,112,095,116,831,297,809,626,059,569,444,750,808,699,678,211,904,501,083,183,234,323,797,142,810,155,862,553,705,570,600,021,649,944,369,726,123,996,534,870,137,000,784,980,673,984,909,570,977,377,882,585,701</li>
<li><strong>Exponent</strong>: 65,537</li>
</ul>

<p>The question then becomes how do we want to store these numbers in a computer. First we convert both to hexadecimal:</p>

<ul>
<li><strong>Modulus</strong>: EB506399F5C612F5A67A09C1192B92FAB53DB28520D859CE0EF6B7D83D40AA1C1DCE2C0720D15A0F531595CAD81BA5D129F91CC6769719F1435872C4BCD0521150A0263B470066489B918BFCA03CE8A0E9FC2C0314C4B096EA30717C03C28CA29E678E63D78ACA1E9A63BDB1261EE7A0B041AB53746D68B57B68BEF37B71382838C95DA8557841A3CA58109F0B4F77A5E929B1A25DC2D6814C55DC0F81CD2F4E5DB95EE70C706FC02C4FCA358EA9A82D8043A47611195580F89458E3DAB5592DEFE06CDE1E516A6C61ED78C13977AE9660A9192CA75CD72967FD3AFAFA1F1A2FF6325A5064D847028F1E6B2329E8572F36E708A549DDA355FC74A32FDD8DBA65</li>
<li><strong>Exponent</strong>: 010001</li>
</ul>

<h2>RSA invented the first format</h2>

<p>RSA invented a format first:</p>

<pre><code>RSAPublicKey ::= SEQUENCE {
    modulus           INTEGER,  -- n
    publicExponent    INTEGER   -- e
}
</code></pre>

<p>They chose to use the DER flavor of the ASN.1 binary encoding standard to represent the two numbers <a href=""https://tools.ietf.org/html/rfc3447#appendix-A.1.1"" rel=""noreferrer"">[1]</a>:</p>

<pre><code>SEQUENCE (2 elements)
   INTEGER (2048 bit
   INTEGER (24 bit): 010001
</code></pre>

<p>The final binary encoding in ASN.1 is:</p>

<pre><code>30 82 01 0A      ;sequence (0x10A bytes long)
   02 82 01 01   ;integer (0x101 bytes long)
      00 EB506399F5C612F5A67A09C1192B92FAB53DB28520D859CE0EF6B7D83D40AA1C1DCE2C0720D15A0F531595CAD81BA5D129F91CC6769719F1435872C4BCD0521150A0263B470066489B918BFCA03CE8A0E9FC2C0314C4B096EA30717C03C28CA29E678E63D78ACA1E9A63BDB1261EE7A0B041AB53746D68B57B68BEF37B71382838C95DA8557841A3CA58109F0B4F77A5E929B1A25DC2D6814C55DC0F81CD2F4E5DB95EE70C706FC02C4FCA358EA9A82D8043A47611195580F89458E3DAB5592DEFE06CDE1E516A6C61ED78C13977AE9660A9192CA75CD72967FD3AFAFA1F1A2FF6325A5064D847028F1E6B2329E8572F36E708A549DDA355FC74A32FDD8DBA65
   02 03         ;integer (3 bytes long)
      010001
</code></pre>

<p>If you then run all those bytes together and Base64 encode it, you get:</p>

<pre><code>MIIBCgKCAQEA61BjmfXGEvWmegnBGSuS+rU9soUg2FnODva32D1AqhwdziwHINFa
D1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBSEVCgJjtHAGZIm5GL/KA86KDp/CwDFMSw
luowcXwDwoyinmeOY9eKyh6aY72xJh7noLBBq1N0bWi1e2i+83txOCg4yV2oVXhB
o8pYEJ8LT3el6Smxol3C1oFMVdwPgc0vTl25XucMcG/ALE/KNY6pqC2AQ6R2ERlV
gPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeulmCpGSynXNcpZ/06+vofGi/2MlpQZNhH
Ao8eayMp6FcvNucIpUndo1X8dKMv3Y26ZQIDAQAB
</code></pre>

<p>RSA labs then said add a header and trailer:</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA61BjmfXGEvWmegnBGSuS+rU9soUg2FnODva32D1AqhwdziwHINFa
D1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBSEVCgJjtHAGZIm5GL/KA86KDp/CwDFMSw
luowcXwDwoyinmeOY9eKyh6aY72xJh7noLBBq1N0bWi1e2i+83txOCg4yV2oVXhB
o8pYEJ8LT3el6Smxol3C1oFMVdwPgc0vTl25XucMcG/ALE/KNY6pqC2AQ6R2ERlV
gPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeulmCpGSynXNcpZ/06+vofGi/2MlpQZNhH
Ao8eayMp6FcvNucIpUndo1X8dKMv3Y26ZQIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<p>Five hyphens, and the words <code>BEGIN RSA PUBLIC KEY</code>. That is your <strong>PEM DER ASN.1 PKCS#1 RSA Public key</strong></p>

<ul>
<li>PEM: synonym for <em>base64</em></li>
<li>DER: a flavor of ASN.1 encoding</li>
<li>ASN.1: the binary encoding scheme used</li>
<li>PKCS#1: The formal specification that dictates representing a public key as structure that consists of modulus followed by an exponent </li>
<li>RSA public key: the public key algorithm being used</li>
</ul>

<h2>Not just RSA</h2>

<p>After that, other forms of public key cryptography came along:</p>

<ul>
<li>Diffie-Hellman</li>
<li>Ellicptic Curve</li>
</ul>

<p>When it came time to create a standard for how to represent the parameters of <strong>those</strong> encryption algorithms, people adopted a lot of the same ideas that RSA originally defined:</p>

<ul>
<li>use ASN.1 binary encoding</li>
<li>base64 it</li>
<li>wrap it with five hyphens</li>
<li>and the words <code>BEGIN PUBLIC KEY</code></li>
</ul>

<p>But rather than using:</p>

<ul>
<li><code>-----BEGIN RSA PUBLIC KEY-----</code></li>
<li><code>-----BEGIN DH PUBLIC KEY-----</code></li>
<li><code>-----BEGIN EC PUBLIC KEY-----</code></li>
</ul>

<p>They decided instead to include the Object Identifier (OID) of what is to follow. In the case of an RSA public key, that is:</p>

<ul>
<li><strong>RSA PKCS#1</strong>: <code>1.2.840.113549.1.1.1</code></li>
</ul>

<p>So for RSA public key it was essentially:</p>

<pre><code>public struct RSAPublicKey {
   INTEGER modulus,
   INTEGER publicExponent 
}
</code></pre>

<p>Now they created <strong>SubjectPublicKeyInfo</strong> which is basically:</p>

<pre><code>public struct SubjectPublicKeyInfo {
   AlgorithmIdentifier algorithm,
   RSAPublicKey subjectPublicKey
}
</code></pre>

<p>In actual DER ASN.1 definition is:</p>

<pre><code>SubjectPublicKeyInfo  ::=  SEQUENCE  {
    algorithm  ::=  SEQUENCE  {
        algorithm               OBJECT IDENTIFIER, -- 1.2.840.113549.1.1.1 rsaEncryption (PKCS#1 1)
        parameters              ANY DEFINED BY algorithm OPTIONAL  },
    subjectPublicKey     BIT STRING {
        RSAPublicKey ::= SEQUENCE {
            modulus            INTEGER,    -- n
            publicExponent     INTEGER     -- e
        }
}
</code></pre>

<p>That gives you an ASN.1 of:</p>

<pre><code>SEQUENCE (2 elements)
   SEQUENCE (2 elements)
      OBJECT IDENTIFIER 1.2.840.113549.1.1.1
      NULL
   BIT STRING (1 element)
      SEQUENCE (2 elements)
         INTEGER (2048 bit
         INTEGER (24 bit): 010001
</code></pre>

<p>The final binary encoding in ASN.1 is:</p>

<pre><code>30 82 01 22          ;SEQUENCE (0x122 bytes = 290 bytes)
|  30 0D             ;SEQUENCE (0x0d bytes = 13 bytes) 
|  |  06 09          ;OBJECT IDENTIFIER (0x09 = 9 bytes)
|  |  2A 86 48 86   
|  |  F7 0D 01 01 01 ;hex encoding of 1.2.840.113549.1.1
|  |  05 00          ;NULL (0 bytes)
|  03 82 01 0F 00    ;BIT STRING  (0x10f = 271 bytes)
|  |  30 82 01 0A       ;SEQUENCE (0x10a = 266 bytes)
|  |  |  02 82 01 01    ;INTEGER  (0x101 = 257 bytes)
|  |  |  |  00             ;leading zero of INTEGER
|  |  |  |  EB 50 63 99 F5 C6 12 F5  A6 7A 09 C1 19 2B 92 FA 
|  |  |  |  B5 3D B2 85 20 D8 59 CE  0E F6 B7 D8 3D 40 AA 1C 
|  |  |  |  1D CE 2C 07 20 D1 5A 0F  53 15 95 CA D8 1B A5 D1 
|  |  |  |  29 F9 1C C6 76 97 19 F1  43 58 72 C4 BC D0 52 11 
|  |  |  |  50 A0 26 3B 47 00 66 48  9B 91 8B FC A0 3C E8 A0
|  |  |  |  E9 FC 2C 03 14 C4 B0 96  EA 30 71 7C 03 C2 8C A2  
|  |  |  |  9E 67 8E 63 D7 8A CA 1E  9A 63 BD B1 26 1E E7 A0  
|  |  |  |  B0 41 AB 53 74 6D 68 B5  7B 68 BE F3 7B 71 38 28
|  |  |  |  38 C9 5D A8 55 78 41 A3  CA 58 10 9F 0B 4F 77 A5
|  |  |  |  E9 29 B1 A2 5D C2 D6 81  4C 55 DC 0F 81 CD 2F 4E 
|  |  |  |  5D B9 5E E7 0C 70 6F C0  2C 4F CA 35 8E A9 A8 2D 
|  |  |  |  80 43 A4 76 11 19 55 80  F8 94 58 E3 DA B5 59 2D
|  |  |  |  EF E0 6C DE 1E 51 6A 6C  61 ED 78 C1 39 77 AE 96 
|  |  |  |  60 A9 19 2C A7 5C D7 29  67 FD 3A FA FA 1F 1A 2F 
|  |  |  |  F6 32 5A 50 64 D8 47 02  8F 1E 6B 23 29 E8 57 2F 
|  |  |  |  36 E7 08 A5 49 DD A3 55  FC 74 A3 2F DD 8D BA 65
|  |  |  02 03          ;INTEGER (03 = 3 bytes)
|  |  |  |  010001
</code></pre>

<p>And as before, you take all those bytes, Base64 encode them, you end up with your  second example:</p>

<pre><code>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA61BjmfXGEvWmegnBGSuS
+rU9soUg2FnODva32D1AqhwdziwHINFaD1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBS
EVCgJjtHAGZIm5GL/KA86KDp/CwDFMSwluowcXwDwoyinmeOY9eKyh6aY72xJh7n
oLBBq1N0bWi1e2i+83txOCg4yV2oVXhBo8pYEJ8LT3el6Smxol3C1oFMVdwPgc0v
Tl25XucMcG/ALE/KNY6pqC2AQ6R2ERlVgPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeu
lmCpGSynXNcpZ/06+vofGi/2MlpQZNhHAo8eayMp6FcvNucIpUndo1X8dKMv3Y26
ZQIDAQAB   
</code></pre>

<p>Add the slightly different header and trailer, and you get:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA61BjmfXGEvWmegnBGSuS
+rU9soUg2FnODva32D1AqhwdziwHINFaD1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBS
EVCgJjtHAGZIm5GL/KA86KDp/CwDFMSwluowcXwDwoyinmeOY9eKyh6aY72xJh7n
oLBBq1N0bWi1e2i+83txOCg4yV2oVXhBo8pYEJ8LT3el6Smxol3C1oFMVdwPgc0v
Tl25XucMcG/ALE/KNY6pqC2AQ6R2ERlVgPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeu
lmCpGSynXNcpZ/06+vofGi/2MlpQZNhHAo8eayMp6FcvNucIpUndo1X8dKMv3Y26
ZQIDAQAB   
-----END PUBLIC KEY-----
</code></pre>

<p>And this is your <strong>X.509 SubjectPublicKeyInfo/OpenSSL PEM public key</strong> <a href=""http://www.itu.int/rec/T-REC-X.509/en"" rel=""noreferrer"">[2]</a>.</p>

<h2>Do it right, or hack it</h2>

<p>Now that you know that the encoding isn't magic, you can write all the pieces needed to parse out the RSA modulus and exponent. Or you can recognize that the first 24 bytes are just added new stuff on top of the original PKCS#1 standard</p>

<pre><code>30 82 01 22          ;SEQUENCE (0x122 bytes = 290 bytes)
|  30 0D             ;SEQUENCE (0x0d bytes = 13 bytes) 
|  |  06 09          ;OBJECT IDENTIFIER (0x09 = 9 bytes)
|  |  2A 86 48 86   
|  |  F7 0D 01 01 01 ;hex encoding of 1.2.840.113549.1.1
|  |  05 00          ;NULL (0 bytes)
|  03 82 01 0F 00    ;BIT STRING  (0x10f = 271 bytes)
|  |  ...
</code></pre>

<p>And due to an extraordinary coincidence of fortune and good luck:</p>

<blockquote>
  <p>24 bytes happens to correspond <strong>exactly</strong> to 32 base64 encoded characters</p>
</blockquote>

<p>That means if you take your second X.509 public key, and separate the first 32 characters:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
MIIBCgKCAQEA61BjmfXGEvWmegnBGSuS+rU9soUg2FnODva32D1AqhwdziwHINFa
D1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBSEVCgJjtHAGZIm5GL/KA86KDp/CwDFMSw
luowcXwDwoyinmeOY9eKyh6aY72xJh7noLBBq1N0bWi1e2i+83txOCg4yV2oVXhB
o8pYEJ8LT3el6Smxol3C1oFMVdwPgc0vTl25XucMcG/ALE/KNY6pqC2AQ6R2ERlV
gPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeulmCpGSynXNcpZ/06+vofGi/2MlpQZNhH
Ao8eayMp6FcvNucIpUndo1X8dKMv3Y26ZQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>remove the first 32 characters, and change it to <strong>BEGIN RSA PUBLIC KEY</strong>:</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA61BjmfXGEvWmegnBGSuS+rU9soUg2FnODva32D1AqhwdziwHINFa
D1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBSEVCgJjtHAGZIm5GL/KA86KDp/CwDFMSw
luowcXwDwoyinmeOY9eKyh6aY72xJh7noLBBq1N0bWi1e2i+83txOCg4yV2oVXhB
o8pYEJ8LT3el6Smxol3C1oFMVdwPgc0vTl25XucMcG/ALE/KNY6pqC2AQ6R2ERlV
gPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeulmCpGSynXNcpZ/06+vofGi/2MlpQZNhH
Ao8eayMp6FcvNucIpUndo1X8dKMv3Y26ZQIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<p>You have exactly what you wanted. </p>


","61190","<openssl><x509><ssh-keys><public-key><pkcs#1>","83","257","5","2019-05-28 14:09:15","18062029","1","53","608639","","2015-06-17 05:42:35","2013-08-04 03:17:53",""
"18039401","How can I transform between the two styles of public key format, one ""BEGIN RSA PUBLIC KEY"", the other is ""BEGIN PUBLIC KEY""","<p>How can I transform between the two styles of public key format, 
one format is:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
...
-----END PUBLIC KEY-----
</code></pre>

<p>the other format is:</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
...
-----END RSA PUBLIC KEY-----
</code></pre>

<p>for example I generated id_rsa/id_rsa.pub pair using ssh-keygen command,
I calculated the public key from id_rsa using:</p>

<pre><code>openssl rsa -in id_rsa -pubout -out pub2 
</code></pre>

<p>then again I calculated the public key from id_rsa.pub using :</p>

<pre><code>ssh-keygen -f id_rsa.pub -e -m pem &gt; pub1
</code></pre>

<p>the content is pub1 is :</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA61BjmfXGEvWmegnBGSuS+rU9soUg2FnODva32D1AqhwdziwHINFa
D1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBSEVCgJjtHAGZIm5GL/KA86KDp/CwDFMSw
luowcXwDwoyinmeOY9eKyh6aY72xJh7noLBBq1N0bWi1e2i+83txOCg4yV2oVXhB
o8pYEJ8LT3el6Smxol3C1oFMVdwPgc0vTl25XucMcG/ALE/KNY6pqC2AQ6R2ERlV
gPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeulmCpGSynXNcpZ/06+vofGi/2MlpQZNhH
Ao8eayMp6FcvNucIpUndo1X8dKMv3Y26ZQIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<p>and the content of pub2 is :</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA61BjmfXGEvWmegnBGSuS
+rU9soUg2FnODva32D1AqhwdziwHINFaD1MVlcrYG6XRKfkcxnaXGfFDWHLEvNBS
EVCgJjtHAGZIm5GL/KA86KDp/CwDFMSwluowcXwDwoyinmeOY9eKyh6aY72xJh7n
oLBBq1N0bWi1e2i+83txOCg4yV2oVXhBo8pYEJ8LT3el6Smxol3C1oFMVdwPgc0v
Tl25XucMcG/ALE/KNY6pqC2AQ6R2ERlVgPiUWOPatVkt7+Bs3h5Ramxh7XjBOXeu
lmCpGSynXNcpZ/06+vofGi/2MlpQZNhHAo8eayMp6FcvNucIpUndo1X8dKMv3Y26
ZQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>According to my understanding, pub1 and pub2 contain the same public key information, but they are in different format, I wonder how can I transform between the two format? Can anyone show me some concise introduction on the tow formats?</p>
","<p>While the above comments regarding 32 byte headers, OID formats and such are interesting, I personally don't see the same behavior, assuming I'm getting the point. I thought it might be helpful to explore this further in what most might think is excessive detail. Nothing exceeds like excess.</p>

<p>To start, I created an RSA private key, and checked it:</p>

<pre><code>&gt;openssl rsa -in newclient_privatekey.pem  -check
RSA key ok
writing RSA key
-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQCn/OlFk7vLRQ6dBiNQkvjnhm4pOYWo+GeAEmU4N1HPZj1dxv70
4hm80eYc7h12xc7oVcDLBdHByGAGBpQfpjgdPyozC/zSqcuU6iBrvzDTpyG1zhIG
76KrcjdbX6PlKAPO9r/dCRmUijFhVoUlY6ywGknmLBrtZkLkBhchgYnMswIDAQAB
AoGAQaJ5aivspeEXcpahWavzAFLv27+Tz48usUV+stY6arRhqbBEkV19/N5t8EPA
01U6IGDQ8QIXEIW/rtsHKM6DAZhAbakPDJhJRatcMzJ08ryIkP/c3+onkTquiveG
brw7xzn6Xa8ls04aQ6VQR4jxXUjV5bB72pFZnGRoAmS2NiECQQDUoISbmTGjnHM+
kEfunNTXbNmKklwTYhyZaSVsSptnD7CvLWB4qB/g4h2/HjsELag6Z7SlWuYr7tba
H3nBYn35AkEAykFRudMqlBy3XmcGIpjxOD+7huyViPoUpy3ui/Bj3GbqsbEAt9cR
PyOJa1VFa2JqShta1Tdep8LJv1QvgvY7CwJBAML+al5gAXvwEGhB3RXg0fi2JFLG
opZMFbpDCUTkrtu3MeuVC7HbTVDpTSpmSO0uCed2D97NG+USZgsnbnuBHdECQQCw
S3FWPXdetQ0srzaMz61rLzphaDULuZhpBMNqnTYeNmMaUcPjewagd3Rf52rkKFun
juKE+Yd7SXGbYWEskT5zAkAD7tbNwe5ryD2CT71jrY/5uXMR2yg/A4Ry2ocZkQUp
iGflLrHnODvHO5LYLBlSKpjanBceYHJLuMFNZruf7uBM
-----END RSA PRIVATE KEY-----
</code></pre>

<p>(Oh, horrors! I've exposed a private key. Meh...) </p>

<p>I extract and display its public key:</p>

<pre><code>&gt;openssl rsa -in newclient_privatekey.pem -pubout
writing RSA key
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCn/OlFk7vLRQ6dBiNQkvjnhm4p
OYWo+GeAEmU4N1HPZj1dxv704hm80eYc7h12xc7oVcDLBdHByGAGBpQfpjgdPyoz
C/zSqcuU6iBrvzDTpyG1zhIG76KrcjdbX6PlKAPO9r/dCRmUijFhVoUlY6ywGknm
LBrtZkLkBhchgYnMswIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>It so happens there's another public key output parameter (as is mentioned in an earlier comment). I extract and display the public key using that keyword instead:</p>

<pre><code>&gt;openssl rsa -in newclient_privatekey.pem -RSAPublicKey_out
writing RSA key
-----BEGIN RSA PUBLIC KEY-----
MIGJAoGBAKf86UWTu8tFDp0GI1CS+OeGbik5haj4Z4ASZTg3Uc9mPV3G/vTiGbzR
5hzuHXbFzuhVwMsF0cHIYAYGlB+mOB0/KjML/NKpy5TqIGu/MNOnIbXOEgbvoqty
N1tfo+UoA872v90JGZSKMWFWhSVjrLAaSeYsGu1mQuQGFyGBicyzAgMBAAE=
-----END RSA PUBLIC KEY-----
</code></pre>

<p>Well, well. These two public key values aren't the same, though they're derived from the same private key. Or are they the same? I cut and paste the two public key strings into their own files, and then do a modulus check on each:</p>

<pre><code>&gt;openssl rsa -in newclient_publickey.pem -pubin -modulus
Modulus=
A7FCE94593BBCB450E9D06235092F8E7
866E293985A8F867801265383751CF66
3D5DC6FEF4E219BCD1E61CEE1D76C5CE
E855C0CB05D1C1C8600606941FA6381D
3F2A330BFCD2A9CB94EA206BBF30D3A7
21B5CE1206EFA2AB72375B5FA3E52803
CEF6BFDD0919948A316156852563ACB0
1A49E62C1AED6642E40617218189CCB3
writing RSA key
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCn/OlFk7vLRQ6dBiNQkvjnhm4p
OYWo+GeAEmU4N1HPZj1dxv704hm80eYc7h12xc7oVcDLBdHByGAGBpQfpjgdPyoz
C/zSqcuU6iBrvzDTpyG1zhIG76KrcjdbX6PlKAPO9r/dCRmUijFhVoUlY6ywGknm
LBrtZkLkBhchgYnMswIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>The 'pubin' tells rsa that this really <em>is</em> supposed to be a public key, and don't complain that it's not a private key.</p>

<p>Now we take the RSA public key, display the modulus, and transmogrify it into a plain old 'public key' (again, we have to tell it the input is a public key):</p>

<pre><code>&gt;openssl rsa -in newclient_rsapublickey.pem -RSAPublicKey_in -modulus
Modulus=
A7FCE94593BBCB450E9D06235092F8E7
866E293985A8F867801265383751CF66
3D5DC6FEF4E219BCD1E61CEE1D76C5CE
E855C0CB05D1C1C8600606941FA6381D
3F2A330BFCD2A9CB94EA206BBF30D3A7
21B5CE1206EFA2AB72375B5FA3E52803
CEF6BFDD0919948A316156852563ACB0
1A49E62C1AED6642E40617218189CCB3
writing RSA key
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCn/OlFk7vLRQ6dBiNQkvjnhm4p
OYWo+GeAEmU4N1HPZj1dxv704hm80eYc7h12xc7oVcDLBdHByGAGBpQfpjgdPyoz
C/zSqcuU6iBrvzDTpyG1zhIG76KrcjdbX6PlKAPO9r/dCRmUijFhVoUlY6ywGknm
LBrtZkLkBhchgYnMswIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>Same modulus, and same 'public key' value displayed. To make things more interesting (for me, anyway), when we tack on the <strong>RSAPublicKey_out</strong> keyword we get:</p>

<pre><code>&gt;openssl rsa -in newclient_rsapublickey.pem -RSAPublicKey_in -modulus -RSAPublicKey_out
Modulus=
A7FCE94593BBCB450E9D06235092F8E7
866E293985A8F867801265383751CF66
3D5DC6FEF4E219BCD1E61CEE1D76C5CE
E855C0CB05D1C1C8600606941FA6381D
3F2A330BFCD2A9CB94EA206BBF30D3A7
21B5CE1206EFA2AB72375B5FA3E52803
CEF6BFDD0919948A316156852563ACB0
1A49E62C1AED6642E40617218189CCB3
writing RSA key
-----BEGIN RSA PUBLIC KEY-----
MIGJAoGBAKf86UWTu8tFDp0GI1CS+OeGbik5haj4Z4ASZTg3Uc9mPV3G/vTiGbzR
5hzuHXbFzuhVwMsF0cHIYAYGlB+mOB0/KjML/NKpy5TqIGu/MNOnIbXOEgbvoqty
N1tfo+UoA872v90JGZSKMWFWhSVjrLAaSeYsGu1mQuQGFyGBicyzAgMBAAE=
-----END RSA PUBLIC KEY-----
</code></pre>

<p>...and when we transmogrify the plain old 'public key' into an RSA public key:</p>

<pre><code>&gt;openssl rsa -in newclient_publickey.pem -pubin -RSAPublicKey_out
writing RSA key
-----BEGIN RSA PUBLIC KEY-----
MIGJAoGBAKf86UWTu8tFDp0GI1CS+OeGbik5haj4Z4ASZTg3Uc9mPV3G/vTiGbzR
5hzuHXbFzuhVwMsF0cHIYAYGlB+mOB0/KjML/NKpy5TqIGu/MNOnIbXOEgbvoqty
N1tfo+UoA872v90JGZSKMWFWhSVjrLAaSeYsGu1mQuQGFyGBicyzAgMBAAE=
-----END RSA PUBLIC KEY-----
</code></pre>

<p>...marching on relentlessly, and although we just did this a few commands ago, to make the point we flip things around so the transmogrification is from RSA to plain old 'public key':</p>

<pre><code>&gt;openssl rsa -in newclient_rsapublickey.pem -RSAPublicKey_in -pubout
writing RSA key
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCn/OlFk7vLRQ6dBiNQkvjnhm4p
OYWo+GeAEmU4N1HPZj1dxv704hm80eYc7h12xc7oVcDLBdHByGAGBpQfpjgdPyoz
C/zSqcuU6iBrvzDTpyG1zhIG76KrcjdbX6PlKAPO9r/dCRmUijFhVoUlY6ywGknm
LBrtZkLkBhchgYnMswIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>...which takes us right back where we started. What have we learned?</p>

<p>Summary: the keys internally are the same, they just look different. An earlier comment pointed out the RSA key format was defined in PKCS#1, and the plain old 'public key' format was defined in PKCS#8. However, editing one form doesn't turn it into the other. Hopefully I've now beaten this distinction to death.</p>

<p>In case there's still a spark of life left, though, let's flog this a bit more and reference the certificate that was originally generated with the RSA private key so long ago, examining its public key and modulus:</p>

<pre><code>&gt;openssl x509 -in newclient_cert.pem -pubkey -noout -modulus
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCn/OlFk7vLRQ6dBiNQkvjnhm4p
OYWo+GeAEmU4N1HPZj1dxv704hm80eYc7h12xc7oVcDLBdHByGAGBpQfpjgdPyoz
C/zSqcuU6iBrvzDTpyG1zhIG76KrcjdbX6PlKAPO9r/dCRmUijFhVoUlY6ywGknm
LBrtZkLkBhchgYnMswIDAQAB
-----END PUBLIC KEY-----
Modulus=
A7FCE94593BBCB450E9D06235092F8E7
866E293985A8F867801265383751CF66
3D5DC6FEF4E219BCD1E61CEE1D76C5CE
E855C0CB05D1C1C8600606941FA6381D
3F2A330BFCD2A9CB94EA206BBF30D3A7
21B5CE1206EFA2AB72375B5FA3E52803
CEF6BFDD0919948A316156852563ACB0
1A49E62C1AED6642E40617218189CCB3
</code></pre>

<p>...and they all lived happily ever after: the certificate has the same modulus value as the RSA public key, RSA private key, and plain old 'public key'. The certificate contains the same plain old 'public key' value that we saw earlier, although it was signed with a file marked as an RSA private key. It's safe to say there's a consensus.</p>

<p>There's no 'RSAPublicKey_out' equivalent keyword in the X509 quadrant of the OpenSSL galaxy, so we can't try that, although the modulus value is described as the ""RSA key modulus"" which I suppose is as close as we'll get. </p>

<p>How this would all look with a DSA-signed certificate, I don't know.</p>

<p>I realize this doesn't answer the original question, but perhaps it provides some useful background. If not, my apologies. At the very least, things not to do and assumptions not to make.</p>

<p>No doubt one has noted the slightly irritating repetition of ""writing RSA key"", when it's not doing any such thing. I assume what's meant is that the rsa module recognizes the plain old public key as a true RSA key, and that's why it keeps harping on ""RSA key"" (plus it is the rsa module, after all). If I recall properly, the generic EVP_PKEY structure has a union for all the key types, with each key type having its own special set of values (the helpfully named g, w, q, and other consonants).</p>

<p>In conclusion, I note there was a complaint regarding programming &amp; development; now, every OpenSSL command obviously has corresponding code, and if one wishes to explore all the wonders that is OpenSSL programming today, the command line would seem a reasonable place to start. In this particular case (as I'm using a recent cygwin at the moment) one might start by reviewing \openssl-1.0.2f\apps\rsa.c and (given one has a high tolerance for macros) \openssl-1.0.2f\crypto\pem\pem_all.c</p>
","61190","<openssl><x509><ssh-keys><public-key><pkcs#1>","83","10","5","2019-05-28 14:09:15","18062029","1","53","608639","","2015-06-17 05:42:35","2013-08-04 03:17:53",""
"18257185","How does a public key verify a signature?","<p>I am trying to get a better grapple on how public/private keys work. I understand that a sender may add a digital signature to a document using his/her private key to essentially obtain a hash of the document, but what I do not understand is how the public key can be used to verify that signature. </p>

<p>My understanding was that public keys encrypt, private keys decrypt... can anyone help me understand? </p>
","<p>Your understanding of ""public keys encrypt, private keys decrypt"" is correct...  for data/message ENCRYPTION.  For digital signatures, it is the reverse.  With a digital signature, you are trying to prove that the document signed by you came from you.  To do that, you need to use something that only YOU have:  your private key.</p>

<p>A digital signature in its simplest description is a hash (SHA1, MD5, etc.) of the data (file, message, etc.) that is subsequently encrypted with the signer's private key.  Since that is something only the signer has (or should have) that is where the trust comes from.  EVERYONE has (or should have) access to the signer's public key.   </p>

<p>So, to validate a digital signature, the recipient </p>

<ol>
<li>Calculates a hash of the same data (file, message, etc.),</li>
<li>Decrypts the digital signature using the sender's PUBLIC key, and </li>
<li>Compares the 2 hash values.    </li>
</ol>

<p>If they match, the signature is considered valid.  If they don't match, it either means that a different key was used to sign it, or that the data has been altered (either intentionally or unintentionally).</p>

<p>Hope that helps!</p>
","59332","<digital-signature><public-key-encryption><private-key><public-key><pki>","139","175","4","2019-07-18 08:06:18","","2","57","63550","","2018-08-10 23:12:20","2013-08-15 16:29:20",""
"18257185","How does a public key verify a signature?","<p>I am trying to get a better grapple on how public/private keys work. I understand that a sender may add a digital signature to a document using his/her private key to essentially obtain a hash of the document, but what I do not understand is how the public key can be used to verify that signature. </p>

<p>My understanding was that public keys encrypt, private keys decrypt... can anyone help me understand? </p>
","<p>The keys work inversely:</p>

<blockquote>
  <p>Public key encrypts, private key decrypts (encrypting):</p>
</blockquote>

<pre><code>openssl rsautl -encrypt -inkey public.pem -pubin -in message.txt -out message.ssl
openssl rsautl -decrypt -inkey private.pem       -in message.ssl -out message.txt
</code></pre>

<blockquote>
  <p>Private key encrypts, public key decrypts (signing):</p>
</blockquote>

<pre><code>openssl rsautl -sign -inkey private.pem       -in message.txt -out message.ssl
openssl rsautl       -inkey public.pem -pubin -in message.ssl -out message.txt
</code></pre>

<p>Below is an example script to test this whole flow with <code>openssl</code>.</p>

<pre><code>#!/bin/sh
# Create message to be encrypted
echo ""Creating message file""
echo ""---------------------""
echo ""My secret message"" &gt; message.txt
echo ""done\n""

# Create asymmetric keypair
echo ""Creating asymmetric key pair""
echo ""----------------------------""
openssl genrsa -out private.pem 1024
openssl rsa -in private.pem -out public.pem -pubout
echo ""done\n""

# Encrypt with public &amp; decrypt with private
echo ""Public key encrypts and private key decrypts""
echo ""--------------------------------------------""
openssl rsautl -encrypt -inkey public.pem -pubin -in message.txt         -out message_enc_pub.ssl
openssl rsautl -decrypt -inkey private.pem       -in message_enc_pub.ssl -out message_pub.txt
xxd message_enc_pub.ssl # Print the binary contents of the encrypted message
cat message_pub.txt # Print the decrypted message
echo ""done\n""

# Encrypt with private &amp; decrypt with public
echo ""Private key encrypts and public key decrypts""
echo ""--------------------------------------------""
openssl rsautl -sign    -inkey private.pem -in message.txt          -out message_enc_priv.ssl
openssl rsautl -inkey public.pem -pubin    -in message_enc_priv.ssl -out message_priv.txt
xxd message_enc_priv.ssl
cat message_priv.txt
echo ""done\n""
</code></pre>

<p>This script outputs the following:</p>

<pre><code>Creating message file
---------------------
done

Creating asymmetric key pair
----------------------------
Generating RSA private key, 1024 bit long modulus
...........++++++
....++++++
e is 65537 (0x10001)
writing RSA key
done

Public key encrypts and private key decrypts
--------------------------------------------
00000000: 31c0 f70d 7ed2 088d 9675 801c fb9b 4f95  1...~....u....O.
00000010: c936 8cd0 0cc4 9159 33c4 9625 d752 5b77  .6.....Y3..%.R[w
00000020: 5bfc 988d 19fe d790 b633 191f 50cf 1bf7  [........3..P...
00000030: 34c0 7788 efa2 4967 848f 99e2 a442 91b9  4.w...Ig.....B..
00000040: 5fc7 6c79 40ea d0bc 6cd4 3c9a 488e 9913  _.ly@...l.&lt;.H...
00000050: 387f f7d6 b8e6 5eba 0771 371c c4f0 8c7f  8.....^..q7.....
00000060: 8c87 39a9 0c4c 22ab 13ed c117 c718 92e6  ..9..L"".........
00000070: 3d5b 8534 7187 cc2d 2f94 0743 1fcb d890  =[.4q..-/..C....
My secret message
done

Private key encrypts and public key decrypts
--------------------------------------------
00000000: 6955 cdd0 66e4 3696 76e1 a328 ac67 4ca3  iU..f.6.v..(.gL.
00000010: d6bb 5896 b6fe 68f1 55f1 437a 831c fee9  ..X...h.U.Cz....
00000020: 133a a7e9 005b 3fc5 88f7 5210 cdbb 2cba  .:...[?...R...,.
00000030: 29f1 d52d 3131 a88b 78e5 333e 90cf 3531  )..-11..x.3&gt;..51
00000040: 08c3 3df8 b76e 41f2 a84a c7fb 0c5b c3b2  ..=..nA..J...[..
00000050: 9d3b ed4a b6ad 89bc 9ebc 9154 da48 6f2d  .;.J.......T.Ho-
00000060: 5d8e b686 635f b6a4 8774 a621 5558 7172  ]...c_...t.!UXqr
00000070: fbd3 0c35 df0f 6a16 aa84 f5da 5d5e 5336  ...5..j.....]^S6
My secret message
done
</code></pre>
","59332","<digital-signature><public-key-encryption><private-key><public-key><pki>","139","57","4","2019-07-18 08:06:18","","2","57","63550","","2018-08-10 23:12:20","2013-08-15 16:29:20",""
"18257185","How does a public key verify a signature?","<p>I am trying to get a better grapple on how public/private keys work. I understand that a sender may add a digital signature to a document using his/her private key to essentially obtain a hash of the document, but what I do not understand is how the public key can be used to verify that signature. </p>

<p>My understanding was that public keys encrypt, private keys decrypt... can anyone help me understand? </p>
","<p>Thought I'd provide a supplemental explanation for anyone looking for something more intuitively revealing.</p>

<p>A big part of this confusion arises from naming 'public keys' and 'private keys' as such because how these things actually work is directly at odds with how a 'key' is understood to be.</p>

<p>Take encryption for example. It could be thought of as working like so:</p>

<ul>
<li>The parties that want to be able to read the secret messages each keep a key
hidden (i.e. a private key)</li>
<li>The parties that want to be able to send secret messages all have the ability to obtain an unlocked locked (i.e. a public lock)</li>
<li>Then sending a secret message is as easy as locking it with an unlocked lock, but unlocking it afterwards can only be done with one of the hidden keys.</li>
</ul>

<p>This allows secret messages to be sent between parties, but from an intuitive standpoint here, 'public lock' is a more suitable name than 'public key'.</p>

<p>However, for sending digital signatures the roles are somewhat reversed:</p>

<ul>
<li>The party that wants to sign messages is the only one with access to the unlocked locks (i.e. a private lock)</li>
<li>The parties that want to verify the signature all have the ability to obtain a key (i.e. a public key)</li>
<li>Then what the signer does is create two identical messages: the one that anyone can read and one to accompany it, but which they lock with one of their private locks.</li>
<li><p>Then when the receiver gets the message, they can read it, and then use the public key to unlock the locked message and compare the two messages. If the messages are the same, then they know that:</p>

<ol>
<li><p>The unlocked message wasn't tampered with during travel and,</p></li>
<li><p>The message must have been from the person who has the matching lock to their public key.</p></li>
</ol></li>
<li><p>And finally, this entire system only works if anyone who wants to validate a signer's signature has an authoritative place to go to to get the matching key to the signer's locks. Otherwise, anyone can say ""Hey, here's the key to so-and-so's private lock"", send you a message pretending to be them but lock it with their private lock, you perform all the above steps and believe the message must actually be from the person you thought, but you're fooled because you were mislead as to the true owner of a public key.</p></li>
</ul>

<p>So long as there's a trust-worthy source for retrieving a signer's public key, you'll know who the rightful owner of a public key is, and will be able to validate their signature.</p>
","59332","<digital-signature><public-key-encryption><private-key><public-key><pki>","139","3","4","2019-07-18 08:06:18","","2","57","63550","","2018-08-10 23:12:20","2013-08-15 16:29:20",""
"18257185","How does a public key verify a signature?","<p>I am trying to get a better grapple on how public/private keys work. I understand that a sender may add a digital signature to a document using his/her private key to essentially obtain a hash of the document, but what I do not understand is how the public key can be used to verify that signature. </p>

<p>My understanding was that public keys encrypt, private keys decrypt... can anyone help me understand? </p>
","<p>The public key encrypts and only the private key can decrypt it, and the reverse is true. They both encrypt to different hashes but each key can decrypt the other's encryption. </p>

<p>There are a few different ways to verify that a message came from some expected sender. For example:</p>

<p>The sender sends:</p>

<ol>
<li><p>The message</p></li>
<li><p>The hash of the message encrypted with their private key</p></li>
</ol>

<p>The receiver:</p>

<ol start=""3"">
<li>Decrypts the signature (2) with the public key to obtain a message, supposedly the same message as (1) but we don't know yet. We now have two messages that we need to verify are identical. So to do this, we will encrypt them both with our public key and compare the two hashes. So we will ....</li>
<li>Encrypt the original message (1) with the public key to obtain a hash</li>
<li>Encrypt the decrypted message (3) to get a second hash and compare to (4) to verify that they are identical. </li>
</ol>

<p>If they aren't identical it means either the message was tampered with or it was signed with some other key and not the one we thought...</p>

<p>Another example would be for the sender to use a common hash that the receiver might know to use as well. For example:</p>

<p>The sender sends:</p>

<ol>
<li>A message </li>
<li>Takes a known hash of the message, then encrypts the hash with the private key</li>
</ol>

<p>The receiver:</p>

<ol start=""3"">
<li>Decrypts (2) and gets a hash value</li>
<li>Hashes the message (1) with the same hash used by the sender</li>
<li>Compares the two hashes to make sure they match</li>
</ol>

<p>This again ensures the message wasn't tampered with and it is from the expected sender. </p>
","59332","<digital-signature><public-key-encryption><private-key><public-key><pki>","139","9","4","2019-07-18 08:06:18","","2","57","63550","","2018-08-10 23:12:20","2013-08-15 16:29:20",""
"16480846","X.509: Private / Public Key","<p>We're trying to implement some functionality of a Web-Service from one of our partners. Now, the content which is beeing transmitted, should be encrypted with a public key, which we have to provide.</p>

<p>The security-specification says that the public-certificate has to be X.509 standard. Doesn't X.509 rely on the private / public key method? Because I only get one .pem file, containing a private key, and a certificate, but no public key, using the following command:</p>

<pre><code>openssl req -new -x509 -days 365 -nodes -out ./cert.pem -keyout ./cert.pem
</code></pre>

<p>Do I have to modify the command in order to create a private and a public key?</p>
","<p>Public key is stored inside of x.509 certificate.
Certificate binds identity information (common name, address, whatever else) to this public key.</p>
","59142","<openssl><x509><private-key><public-key>","29","12","3","2016-09-07 02:34:01","16481636","0","14","1340599","","2013-05-10 11:45:28","2013-05-10 11:03:56",""
"16480846","X.509: Private / Public Key","<p>We're trying to implement some functionality of a Web-Service from one of our partners. Now, the content which is beeing transmitted, should be encrypted with a public key, which we have to provide.</p>

<p>The security-specification says that the public-certificate has to be X.509 standard. Doesn't X.509 rely on the private / public key method? Because I only get one .pem file, containing a private key, and a certificate, but no public key, using the following command:</p>

<pre><code>openssl req -new -x509 -days 365 -nodes -out ./cert.pem -keyout ./cert.pem
</code></pre>

<p>Do I have to modify the command in order to create a private and a public key?</p>
","<p>The basics command line steps to generate a private and public key using OpenSSL are as follow</p>

<pre><code>openssl genrsa -out private.key 1024
openssl req -new -x509 -key private.key -out publickey.cer -days 365
openssl pkcs12 -export -out public_privatekey.pfx -inkey private.key -in publickey.cer
</code></pre>

<p>Step 1 – generates a private key</p>

<p>Step 2 – creates a X509 certificate (.cer file) containing your public key which you upload when registering your private application (or upgrading to a partner application).</p>

<p>Step 3 – Export your x509 certificate and private key to a pfx file. If your chosen wrapper library uses the .pem file to sign requests then this step is not required.</p>

<p>Hope that helps! <a href=""https://serverfault.com/a/9717/179158"">This answer explains</a> the different file extensions. </p>
","59142","<openssl><x509><private-key><public-key>","29","82","3","2016-09-07 02:34:01","16481636","0","14","1340599","","2013-05-10 11:45:28","2013-05-10 11:03:56",""
"16480846","X.509: Private / Public Key","<p>We're trying to implement some functionality of a Web-Service from one of our partners. Now, the content which is beeing transmitted, should be encrypted with a public key, which we have to provide.</p>

<p>The security-specification says that the public-certificate has to be X.509 standard. Doesn't X.509 rely on the private / public key method? Because I only get one .pem file, containing a private key, and a certificate, but no public key, using the following command:</p>

<pre><code>openssl req -new -x509 -days 365 -nodes -out ./cert.pem -keyout ./cert.pem
</code></pre>

<p>Do I have to modify the command in order to create a private and a public key?</p>
","<p>Create a private-public key pair. </p>

<pre><code>openssl req -x509 -newkey rsa:2048 -keyout private.key -out public.cert -days 365
</code></pre>

<p>Optionally, combine the pair into a single file.</p>

<pre><code>openssl pkcs12 -export -inkey private.key -in public.cert -out certificate.pfx
</code></pre>

<p>This results in the following files. </p>

<pre><code>private.key
certificate.pfx
public.cert
</code></pre>

<p>See also</p>

<ul>
<li><a href=""https://www.openssl.org/docs/manmaster/apps/req.html"" rel=""nofollow noreferrer"">https://www.openssl.org/docs/manmaster/apps/req.html</a></li>
<li><a href=""https://www.openssl.org/docs/manmaster/apps/pkcs12.html"" rel=""nofollow noreferrer"">https://www.openssl.org/docs/manmaster/apps/pkcs12.html</a></li>
<li><a href=""https://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file"">https://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file</a></li>
</ul>
","59142","<openssl><x509><private-key><public-key>","29","3","3","2016-09-07 02:34:01","16481636","0","14","1340599","","2013-05-10 11:45:28","2013-05-10 11:03:56",""
"26711731","Read public key from file in keystore","<p>Hi I want to extract public key from KeyStore using Java code</p>

<p>I am creating a keystore</p>

<pre><code>keytool -genkey -alias mykeystore -keyalg RSA -keystore mykeystore.jks -keysize 2048
</code></pre>

<p>And exporting the public into another file</p>

<pre><code>keytool -export -alias mykeystore -keystore mykeystore.jks -rfc -file publickey.cert
</code></pre>

<p>How can I get the Public Key String from keystore or the publickey.cert file using the Java code?</p>

<p>Thanks.</p>

<p><strong>UPDATE</strong></p>

<pre><code>public static void main(String[] args) {

    try {

        FileInputStream is = new FileInputStream(""/home/myuser/my-keystore/mykeystore.jks"");
        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        String password = ""myuserpass"";
        char[] passwd = password.toCharArray();
        keystore.load(is, passwd);
        String alias = ""mykeystore"";
        Key key = keystore.getKey(alias, passwd);
        if (key instanceof PrivateKey) {
          // Get certificate of public key
          Certificate cert = keystore.getCertificate(alias);
          // Get public key
          PublicKey publicKey = cert.getPublicKey();

          String publicKeyString = Base64.encodeBase64String(publicKey
                    .getEncoded());
          System.out.println(publicKeyString);

        }

    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>Then it is giving like</p>

<pre><code>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiG2FjSuXrraYuh0TyRNiUvVCyaFlb7VY9AFIMSDdcY0JgNF0c4YVQxYxUCbYzmkLZD/rrYMe/8nxkWV0TMz2Y7GnvichjtWHL1ui58uC0+RtFMkYJ+ftwt9qBy9hvb/rVFTsvT5/b6CQXD8a6bFveMUluQZISLCV7i11XYzp81+w6M7+2fJAwezIJnIrgwv1K9YDjWaToaNXe7hnzzy0s8AdkjTk197+hg8dRfbvkr8XAddNsEMPeUA5iY+5VEpRNI925ZT/dxnaABA0z6i4JbVjeLl8r7ySG9R/2w/j2G+/YSRQc9BmRHPa0tBgH7wvQM+WRwD9WmST+5qeBIfH3QIDAQAB
</code></pre>

<p>When I do <code>cat publickey.cert</code>, it shows this</p>

<pre><code>-----BEGIN CERTIFICATE-----
MIIDgTCCAmmgAwIBAgIEf7XoMDANBgkqhkiG9w0BAQsFADBxMQswCQYDVQQGEwJJTjESMBAGA1UE
CBMJS2FybmF0YWthMRIwEAYDVQQHEwlCYW5nYWxvcmUxEjAQBgNVBAoTCU5ldHNjaXR1czESMBAG
A1UECxMJTmV0c2NpdHVzMRIwEAYDVQQDEwlOZXRzY2l0dXMwHhcNMTQxMTAzMDkyNTM3WhcNMTUw
MjAxMDkyNTM3WjBxMQswCQYDVQQGEwJJTjESMBAGA1UECBMJS2FybmF0YWthMRIwEAYDVQQHEwlC
YW5nYWxvcmUxEjAQBgNVBAoTCU5ldHNjaXR1czESMBAGA1UECxMJTmV0c2NpdHVzMRIwEAYDVQQD
EwlOZXRzY2l0dXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCIbYWNK5eutpi6HRPJ
E2JS9ULJoWVvtVj0AUgxIN1xjQmA0XRzhhVDFjFQJtjOaQtkP+utgx7/yfGRZXRMzPZjsae+JyGO
1YcvW6Lny4LT5G0UyRgn5+3C32oHL2G9v+tUVOy9Pn9voJBcPxrpsW94xSW5BkhIsJXuLXVdjOnz
X7Dozv7Z8kDB7MgmciuDC/Ur1gONZpOho1d7uGfPPLSzwB2SNOTX3v6GDx1F9u+SvxcB102wQw95
QDmJj7lUSlE0j3bllP93GdoAEDTPqLgltWN4uXyvvJIb1H/bD+PYb79hJFBz0GZEc9rS0GAfvC9A
z5ZHAP1aZJP7mp4Eh8fdAgMBAAGjITAfMB0GA1UdDgQWBBSvgDYtI/NGP8Y0EvsCHASjmr/PmzAN
BgkqhkiG9w0BAQsFAAOCAQEACefje/dhmzEkBoA6OV934WtGXcBQNcb+9/qBGevUBG1cNJIyJddi
dea2gFUB1rx/WffTrJyiOCApV8wXG+zmGm6YJenKnGG9sIQtOTibhs3ll7UN4S0n9xsD+1y7YD1c
DNm9lI/3aFn1WUwPc3T4+RXE6XqkDB3geIvLUXaFUi+Y59XiLPHvk61kcopCGeoweX5yWVZ2Njp/
UUJIxQ6Ni3GvfPlxCxWtRe1MDAkhfT6/aAUr37lxtupHibzm9EAJdUEmAFHMhxkNCJiRDsasAiQ8
7V5uBI3ucdSwh+gPaW8KoWlJpv5SGlAkwzq0lSrxyq2ukkC6ciPeKhUvWtHaPg==
-----END CERTIFICATE-----
</code></pre>

<p>They keys are different, even in length. Why?</p>
","<p>You can find a solution by just googleling for your question.</p>

<p>Example from java2s.com:</p>

<pre><code>import java.io.FileInputStream;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.Certificate;

public class Main {
  public static void main(String[] argv) throws Exception {
    FileInputStream is = new FileInputStream(""your.keystore"");

    KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
    keystore.load(is, ""my-keystore-password"".toCharArray());

    String alias = ""myalias"";

    Key key = keystore.getKey(alias, ""password"".toCharArray());
    if (key instanceof PrivateKey) {
      // Get certificate of public key
      Certificate cert = keystore.getCertificate(alias);

      // Get public key
      PublicKey publicKey = cert.getPublicKey();

      // Return a key pair
      new KeyPair(publicKey, (PrivateKey) key);
    }
  }
}
</code></pre>

<p>See also:</p>

<ul>
<li><a href=""http://www.java2s.com/Code/Java/Security/RetrievingaKeyPairfromaKeyStore.htm"" rel=""noreferrer"">http://www.java2s.com/Code/Java/Security/RetrievingaKeyPairfromaKeyStore.htm</a></li>
<li><a href=""https://stackoverflow.com/questions/19937890/how-to-retrieve-my-public-and-private-key-from-the-keystore-we-created"">How to retrieve my public and private key from the keystore we created</a></li>
</ul>

<p><strong>UPDATE:</strong></p>

<p>See comments for additional information to the problem.</p>
","53816","<java><keystore><public-key>","15","14","6","2017-09-27 02:03:10","","0","9","2189617","","2014-11-03 10:30:46","2014-11-03 09:57:27",""
"26711731","Read public key from file in keystore","<p>Hi I want to extract public key from KeyStore using Java code</p>

<p>I am creating a keystore</p>

<pre><code>keytool -genkey -alias mykeystore -keyalg RSA -keystore mykeystore.jks -keysize 2048
</code></pre>

<p>And exporting the public into another file</p>

<pre><code>keytool -export -alias mykeystore -keystore mykeystore.jks -rfc -file publickey.cert
</code></pre>

<p>How can I get the Public Key String from keystore or the publickey.cert file using the Java code?</p>

<p>Thanks.</p>

<p><strong>UPDATE</strong></p>

<pre><code>public static void main(String[] args) {

    try {

        FileInputStream is = new FileInputStream(""/home/myuser/my-keystore/mykeystore.jks"");
        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        String password = ""myuserpass"";
        char[] passwd = password.toCharArray();
        keystore.load(is, passwd);
        String alias = ""mykeystore"";
        Key key = keystore.getKey(alias, passwd);
        if (key instanceof PrivateKey) {
          // Get certificate of public key
          Certificate cert = keystore.getCertificate(alias);
          // Get public key
          PublicKey publicKey = cert.getPublicKey();

          String publicKeyString = Base64.encodeBase64String(publicKey
                    .getEncoded());
          System.out.println(publicKeyString);

        }

    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>Then it is giving like</p>

<pre><code>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiG2FjSuXrraYuh0TyRNiUvVCyaFlb7VY9AFIMSDdcY0JgNF0c4YVQxYxUCbYzmkLZD/rrYMe/8nxkWV0TMz2Y7GnvichjtWHL1ui58uC0+RtFMkYJ+ftwt9qBy9hvb/rVFTsvT5/b6CQXD8a6bFveMUluQZISLCV7i11XYzp81+w6M7+2fJAwezIJnIrgwv1K9YDjWaToaNXe7hnzzy0s8AdkjTk197+hg8dRfbvkr8XAddNsEMPeUA5iY+5VEpRNI925ZT/dxnaABA0z6i4JbVjeLl8r7ySG9R/2w/j2G+/YSRQc9BmRHPa0tBgH7wvQM+WRwD9WmST+5qeBIfH3QIDAQAB
</code></pre>

<p>When I do <code>cat publickey.cert</code>, it shows this</p>

<pre><code>-----BEGIN CERTIFICATE-----
MIIDgTCCAmmgAwIBAgIEf7XoMDANBgkqhkiG9w0BAQsFADBxMQswCQYDVQQGEwJJTjESMBAGA1UE
CBMJS2FybmF0YWthMRIwEAYDVQQHEwlCYW5nYWxvcmUxEjAQBgNVBAoTCU5ldHNjaXR1czESMBAG
A1UECxMJTmV0c2NpdHVzMRIwEAYDVQQDEwlOZXRzY2l0dXMwHhcNMTQxMTAzMDkyNTM3WhcNMTUw
MjAxMDkyNTM3WjBxMQswCQYDVQQGEwJJTjESMBAGA1UECBMJS2FybmF0YWthMRIwEAYDVQQHEwlC
YW5nYWxvcmUxEjAQBgNVBAoTCU5ldHNjaXR1czESMBAGA1UECxMJTmV0c2NpdHVzMRIwEAYDVQQD
EwlOZXRzY2l0dXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCIbYWNK5eutpi6HRPJ
E2JS9ULJoWVvtVj0AUgxIN1xjQmA0XRzhhVDFjFQJtjOaQtkP+utgx7/yfGRZXRMzPZjsae+JyGO
1YcvW6Lny4LT5G0UyRgn5+3C32oHL2G9v+tUVOy9Pn9voJBcPxrpsW94xSW5BkhIsJXuLXVdjOnz
X7Dozv7Z8kDB7MgmciuDC/Ur1gONZpOho1d7uGfPPLSzwB2SNOTX3v6GDx1F9u+SvxcB102wQw95
QDmJj7lUSlE0j3bllP93GdoAEDTPqLgltWN4uXyvvJIb1H/bD+PYb79hJFBz0GZEc9rS0GAfvC9A
z5ZHAP1aZJP7mp4Eh8fdAgMBAAGjITAfMB0GA1UdDgQWBBSvgDYtI/NGP8Y0EvsCHASjmr/PmzAN
BgkqhkiG9w0BAQsFAAOCAQEACefje/dhmzEkBoA6OV934WtGXcBQNcb+9/qBGevUBG1cNJIyJddi
dea2gFUB1rx/WffTrJyiOCApV8wXG+zmGm6YJenKnGG9sIQtOTibhs3ll7UN4S0n9xsD+1y7YD1c
DNm9lI/3aFn1WUwPc3T4+RXE6XqkDB3geIvLUXaFUi+Y59XiLPHvk61kcopCGeoweX5yWVZ2Njp/
UUJIxQ6Ni3GvfPlxCxWtRe1MDAkhfT6/aAUr37lxtupHibzm9EAJdUEmAFHMhxkNCJiRDsasAiQ8
7V5uBI3ucdSwh+gPaW8KoWlJpv5SGlAkwzq0lSrxyq2ukkC6ciPeKhUvWtHaPg==
-----END CERTIFICATE-----
</code></pre>

<p>They keys are different, even in length. Why?</p>
","<p>Once you have successfully exported , you can get it from the key store,</p>

<p>through <code>KeyPair(publicKey, (PrivateKey) key)</code></p>

<p>An example ,</p>

<pre><code>   FileInputStream is = new FileInputStream(""publickey.cert"");
    KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
    keystore.load(is, ""my-keystore-password"".toCharArray());
    String alias = ""myalias"";
    Key key = keystore.getKey(alias, ""password"".toCharArray());
    if (key instanceof PrivateKey) {
      // Get certificate of public key
      Certificate cert = keystore.getCertificate(alias);
      // Get public key
      PublicKey publicKey = cert.getPublicKey();

      // Return a key pair
      new KeyPair(publicKey, (PrivateKey) key);
    }
  } 
</code></pre>

<p>will return the new <em>key,value</em> pair.</p>

<p>Also read the similar thread here <a href=""https://security.stackexchange.com/questions/3779/how-can-i-export-my-private-key-from-a-java-keytool-keystore"">Get Private Key from Keystore</a></p>
","53816","<java><keystore><public-key>","15","0","6","2017-09-27 02:03:10","","0","9","2189617","","2014-11-03 10:30:46","2014-11-03 09:57:27",""
"26711731","Read public key from file in keystore","<p>Hi I want to extract public key from KeyStore using Java code</p>

<p>I am creating a keystore</p>

<pre><code>keytool -genkey -alias mykeystore -keyalg RSA -keystore mykeystore.jks -keysize 2048
</code></pre>

<p>And exporting the public into another file</p>

<pre><code>keytool -export -alias mykeystore -keystore mykeystore.jks -rfc -file publickey.cert
</code></pre>

<p>How can I get the Public Key String from keystore or the publickey.cert file using the Java code?</p>

<p>Thanks.</p>

<p><strong>UPDATE</strong></p>

<pre><code>public static void main(String[] args) {

    try {

        FileInputStream is = new FileInputStream(""/home/myuser/my-keystore/mykeystore.jks"");
        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        String password = ""myuserpass"";
        char[] passwd = password.toCharArray();
        keystore.load(is, passwd);
        String alias = ""mykeystore"";
        Key key = keystore.getKey(alias, passwd);
        if (key instanceof PrivateKey) {
          // Get certificate of public key
          Certificate cert = keystore.getCertificate(alias);
          // Get public key
          PublicKey publicKey = cert.getPublicKey();

          String publicKeyString = Base64.encodeBase64String(publicKey
                    .getEncoded());
          System.out.println(publicKeyString);

        }

    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>Then it is giving like</p>

<pre><code>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiG2FjSuXrraYuh0TyRNiUvVCyaFlb7VY9AFIMSDdcY0JgNF0c4YVQxYxUCbYzmkLZD/rrYMe/8nxkWV0TMz2Y7GnvichjtWHL1ui58uC0+RtFMkYJ+ftwt9qBy9hvb/rVFTsvT5/b6CQXD8a6bFveMUluQZISLCV7i11XYzp81+w6M7+2fJAwezIJnIrgwv1K9YDjWaToaNXe7hnzzy0s8AdkjTk197+hg8dRfbvkr8XAddNsEMPeUA5iY+5VEpRNI925ZT/dxnaABA0z6i4JbVjeLl8r7ySG9R/2w/j2G+/YSRQc9BmRHPa0tBgH7wvQM+WRwD9WmST+5qeBIfH3QIDAQAB
</code></pre>

<p>When I do <code>cat publickey.cert</code>, it shows this</p>

<pre><code>-----BEGIN CERTIFICATE-----
MIIDgTCCAmmgAwIBAgIEf7XoMDANBgkqhkiG9w0BAQsFADBxMQswCQYDVQQGEwJJTjESMBAGA1UE
CBMJS2FybmF0YWthMRIwEAYDVQQHEwlCYW5nYWxvcmUxEjAQBgNVBAoTCU5ldHNjaXR1czESMBAG
A1UECxMJTmV0c2NpdHVzMRIwEAYDVQQDEwlOZXRzY2l0dXMwHhcNMTQxMTAzMDkyNTM3WhcNMTUw
MjAxMDkyNTM3WjBxMQswCQYDVQQGEwJJTjESMBAGA1UECBMJS2FybmF0YWthMRIwEAYDVQQHEwlC
YW5nYWxvcmUxEjAQBgNVBAoTCU5ldHNjaXR1czESMBAGA1UECxMJTmV0c2NpdHVzMRIwEAYDVQQD
EwlOZXRzY2l0dXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCIbYWNK5eutpi6HRPJ
E2JS9ULJoWVvtVj0AUgxIN1xjQmA0XRzhhVDFjFQJtjOaQtkP+utgx7/yfGRZXRMzPZjsae+JyGO
1YcvW6Lny4LT5G0UyRgn5+3C32oHL2G9v+tUVOy9Pn9voJBcPxrpsW94xSW5BkhIsJXuLXVdjOnz
X7Dozv7Z8kDB7MgmciuDC/Ur1gONZpOho1d7uGfPPLSzwB2SNOTX3v6GDx1F9u+SvxcB102wQw95
QDmJj7lUSlE0j3bllP93GdoAEDTPqLgltWN4uXyvvJIb1H/bD+PYb79hJFBz0GZEc9rS0GAfvC9A
z5ZHAP1aZJP7mp4Eh8fdAgMBAAGjITAfMB0GA1UdDgQWBBSvgDYtI/NGP8Y0EvsCHASjmr/PmzAN
BgkqhkiG9w0BAQsFAAOCAQEACefje/dhmzEkBoA6OV934WtGXcBQNcb+9/qBGevUBG1cNJIyJddi
dea2gFUB1rx/WffTrJyiOCApV8wXG+zmGm6YJenKnGG9sIQtOTibhs3ll7UN4S0n9xsD+1y7YD1c
DNm9lI/3aFn1WUwPc3T4+RXE6XqkDB3geIvLUXaFUi+Y59XiLPHvk61kcopCGeoweX5yWVZ2Njp/
UUJIxQ6Ni3GvfPlxCxWtRe1MDAkhfT6/aAUr37lxtupHibzm9EAJdUEmAFHMhxkNCJiRDsasAiQ8
7V5uBI3ucdSwh+gPaW8KoWlJpv5SGlAkwzq0lSrxyq2ukkC6ciPeKhUvWtHaPg==
-----END CERTIFICATE-----
</code></pre>

<p>They keys are different, even in length. Why?</p>
","<p>If it's just the public key string that you want, it's easier to get the <code>publickey.cert</code> file, as it is a plain text file. Assuming that you have the full path of the file (like ""/home/users/iprogrammer/publickey.cert"" or ""D:\MyDocuments\publickey.cert"" )  you do something like:</p>

<pre><code>public String getPublicKeyString( Path path ) throws IOException {
    byte[] fileBytes = Files.readAllBytes(Paths.get(path));
    return new String( fileBytes, ""US-ASCII"" );
}
</code></pre>

<p>This will give you the whole file, including the <code>-----BEGIN CERTIFICATE-----</code> and <code>-----END CERTIFICATE-----</code>.</p>

<p>Once you have the whole file, you can use the BouncyCastle library to open it:</p>

<pre><code>    PEMParser pemParser = new PEMParser(new StringReader(certPEMData));
    Object parsedObj = pemParser.readObject();
    System.out.println(""PemParser returned: "" + parsedObj);
    if (parsedObj instanceof X509CertificateHolder)
    {
        X509CertificateHolder x509CertificateHolder = (X509CertificateHolder) parsedObj;
        return x509CertificateHolder.getSubjectPublicKeyInfo().getPublicKeyData().getString();
    }
    else
    {
        throw new RuntimeException(""The parsed object was not an X509CertificateHolder."");
    }
</code></pre>
","53816","<java><keystore><public-key>","15","4","6","2017-09-27 02:03:10","","0","9","2189617","","2014-11-03 10:30:46","2014-11-03 09:57:27",""
"26711731","Read public key from file in keystore","<p>Hi I want to extract public key from KeyStore using Java code</p>

<p>I am creating a keystore</p>

<pre><code>keytool -genkey -alias mykeystore -keyalg RSA -keystore mykeystore.jks -keysize 2048
</code></pre>

<p>And exporting the public into another file</p>

<pre><code>keytool -export -alias mykeystore -keystore mykeystore.jks -rfc -file publickey.cert
</code></pre>

<p>How can I get the Public Key String from keystore or the publickey.cert file using the Java code?</p>

<p>Thanks.</p>

<p><strong>UPDATE</strong></p>

<pre><code>public static void main(String[] args) {

    try {

        FileInputStream is = new FileInputStream(""/home/myuser/my-keystore/mykeystore.jks"");
        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        String password = ""myuserpass"";
        char[] passwd = password.toCharArray();
        keystore.load(is, passwd);
        String alias = ""mykeystore"";
        Key key = keystore.getKey(alias, passwd);
        if (key instanceof PrivateKey) {
          // Get certificate of public key
          Certificate cert = keystore.getCertificate(alias);
          // Get public key
          PublicKey publicKey = cert.getPublicKey();

          String publicKeyString = Base64.encodeBase64String(publicKey
                    .getEncoded());
          System.out.println(publicKeyString);

        }

    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>Then it is giving like</p>

<pre><code>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiG2FjSuXrraYuh0TyRNiUvVCyaFlb7VY9AFIMSDdcY0JgNF0c4YVQxYxUCbYzmkLZD/rrYMe/8nxkWV0TMz2Y7GnvichjtWHL1ui58uC0+RtFMkYJ+ftwt9qBy9hvb/rVFTsvT5/b6CQXD8a6bFveMUluQZISLCV7i11XYzp81+w6M7+2fJAwezIJnIrgwv1K9YDjWaToaNXe7hnzzy0s8AdkjTk197+hg8dRfbvkr8XAddNsEMPeUA5iY+5VEpRNI925ZT/dxnaABA0z6i4JbVjeLl8r7ySG9R/2w/j2G+/YSRQc9BmRHPa0tBgH7wvQM+WRwD9WmST+5qeBIfH3QIDAQAB
</code></pre>

<p>When I do <code>cat publickey.cert</code>, it shows this</p>

<pre><code>-----BEGIN CERTIFICATE-----
MIIDgTCCAmmgAwIBAgIEf7XoMDANBgkqhkiG9w0BAQsFADBxMQswCQYDVQQGEwJJTjESMBAGA1UE
CBMJS2FybmF0YWthMRIwEAYDVQQHEwlCYW5nYWxvcmUxEjAQBgNVBAoTCU5ldHNjaXR1czESMBAG
A1UECxMJTmV0c2NpdHVzMRIwEAYDVQQDEwlOZXRzY2l0dXMwHhcNMTQxMTAzMDkyNTM3WhcNMTUw
MjAxMDkyNTM3WjBxMQswCQYDVQQGEwJJTjESMBAGA1UECBMJS2FybmF0YWthMRIwEAYDVQQHEwlC
YW5nYWxvcmUxEjAQBgNVBAoTCU5ldHNjaXR1czESMBAGA1UECxMJTmV0c2NpdHVzMRIwEAYDVQQD
EwlOZXRzY2l0dXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCIbYWNK5eutpi6HRPJ
E2JS9ULJoWVvtVj0AUgxIN1xjQmA0XRzhhVDFjFQJtjOaQtkP+utgx7/yfGRZXRMzPZjsae+JyGO
1YcvW6Lny4LT5G0UyRgn5+3C32oHL2G9v+tUVOy9Pn9voJBcPxrpsW94xSW5BkhIsJXuLXVdjOnz
X7Dozv7Z8kDB7MgmciuDC/Ur1gONZpOho1d7uGfPPLSzwB2SNOTX3v6GDx1F9u+SvxcB102wQw95
QDmJj7lUSlE0j3bllP93GdoAEDTPqLgltWN4uXyvvJIb1H/bD+PYb79hJFBz0GZEc9rS0GAfvC9A
z5ZHAP1aZJP7mp4Eh8fdAgMBAAGjITAfMB0GA1UdDgQWBBSvgDYtI/NGP8Y0EvsCHASjmr/PmzAN
BgkqhkiG9w0BAQsFAAOCAQEACefje/dhmzEkBoA6OV934WtGXcBQNcb+9/qBGevUBG1cNJIyJddi
dea2gFUB1rx/WffTrJyiOCApV8wXG+zmGm6YJenKnGG9sIQtOTibhs3ll7UN4S0n9xsD+1y7YD1c
DNm9lI/3aFn1WUwPc3T4+RXE6XqkDB3geIvLUXaFUi+Y59XiLPHvk61kcopCGeoweX5yWVZ2Njp/
UUJIxQ6Ni3GvfPlxCxWtRe1MDAkhfT6/aAUr37lxtupHibzm9EAJdUEmAFHMhxkNCJiRDsasAiQ8
7V5uBI3ucdSwh+gPaW8KoWlJpv5SGlAkwzq0lSrxyq2ukkC6ciPeKhUvWtHaPg==
-----END CERTIFICATE-----
</code></pre>

<p>They keys are different, even in length. Why?</p>
","<p>If you would like the string version of the PublicKey:</p>

<p><code>String publicKeyString value = ""-----BEGIN PUBLIC KEY-----\n""
    + new String(Base64.encode(publicKey.getEncoded()))
    + ""\n-----END PUBLIC KEY-----"";</code></p>
","53816","<java><keystore><public-key>","15","0","6","2017-09-27 02:03:10","","0","9","2189617","","2014-11-03 10:30:46","2014-11-03 09:57:27",""
"26711731","Read public key from file in keystore","<p>Hi I want to extract public key from KeyStore using Java code</p>

<p>I am creating a keystore</p>

<pre><code>keytool -genkey -alias mykeystore -keyalg RSA -keystore mykeystore.jks -keysize 2048
</code></pre>

<p>And exporting the public into another file</p>

<pre><code>keytool -export -alias mykeystore -keystore mykeystore.jks -rfc -file publickey.cert
</code></pre>

<p>How can I get the Public Key String from keystore or the publickey.cert file using the Java code?</p>

<p>Thanks.</p>

<p><strong>UPDATE</strong></p>

<pre><code>public static void main(String[] args) {

    try {

        FileInputStream is = new FileInputStream(""/home/myuser/my-keystore/mykeystore.jks"");
        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        String password = ""myuserpass"";
        char[] passwd = password.toCharArray();
        keystore.load(is, passwd);
        String alias = ""mykeystore"";
        Key key = keystore.getKey(alias, passwd);
        if (key instanceof PrivateKey) {
          // Get certificate of public key
          Certificate cert = keystore.getCertificate(alias);
          // Get public key
          PublicKey publicKey = cert.getPublicKey();

          String publicKeyString = Base64.encodeBase64String(publicKey
                    .getEncoded());
          System.out.println(publicKeyString);

        }

    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>Then it is giving like</p>

<pre><code>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiG2FjSuXrraYuh0TyRNiUvVCyaFlb7VY9AFIMSDdcY0JgNF0c4YVQxYxUCbYzmkLZD/rrYMe/8nxkWV0TMz2Y7GnvichjtWHL1ui58uC0+RtFMkYJ+ftwt9qBy9hvb/rVFTsvT5/b6CQXD8a6bFveMUluQZISLCV7i11XYzp81+w6M7+2fJAwezIJnIrgwv1K9YDjWaToaNXe7hnzzy0s8AdkjTk197+hg8dRfbvkr8XAddNsEMPeUA5iY+5VEpRNI925ZT/dxnaABA0z6i4JbVjeLl8r7ySG9R/2w/j2G+/YSRQc9BmRHPa0tBgH7wvQM+WRwD9WmST+5qeBIfH3QIDAQAB
</code></pre>

<p>When I do <code>cat publickey.cert</code>, it shows this</p>

<pre><code>-----BEGIN CERTIFICATE-----
MIIDgTCCAmmgAwIBAgIEf7XoMDANBgkqhkiG9w0BAQsFADBxMQswCQYDVQQGEwJJTjESMBAGA1UE
CBMJS2FybmF0YWthMRIwEAYDVQQHEwlCYW5nYWxvcmUxEjAQBgNVBAoTCU5ldHNjaXR1czESMBAG
A1UECxMJTmV0c2NpdHVzMRIwEAYDVQQDEwlOZXRzY2l0dXMwHhcNMTQxMTAzMDkyNTM3WhcNMTUw
MjAxMDkyNTM3WjBxMQswCQYDVQQGEwJJTjESMBAGA1UECBMJS2FybmF0YWthMRIwEAYDVQQHEwlC
YW5nYWxvcmUxEjAQBgNVBAoTCU5ldHNjaXR1czESMBAGA1UECxMJTmV0c2NpdHVzMRIwEAYDVQQD
EwlOZXRzY2l0dXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCIbYWNK5eutpi6HRPJ
E2JS9ULJoWVvtVj0AUgxIN1xjQmA0XRzhhVDFjFQJtjOaQtkP+utgx7/yfGRZXRMzPZjsae+JyGO
1YcvW6Lny4LT5G0UyRgn5+3C32oHL2G9v+tUVOy9Pn9voJBcPxrpsW94xSW5BkhIsJXuLXVdjOnz
X7Dozv7Z8kDB7MgmciuDC/Ur1gONZpOho1d7uGfPPLSzwB2SNOTX3v6GDx1F9u+SvxcB102wQw95
QDmJj7lUSlE0j3bllP93GdoAEDTPqLgltWN4uXyvvJIb1H/bD+PYb79hJFBz0GZEc9rS0GAfvC9A
z5ZHAP1aZJP7mp4Eh8fdAgMBAAGjITAfMB0GA1UdDgQWBBSvgDYtI/NGP8Y0EvsCHASjmr/PmzAN
BgkqhkiG9w0BAQsFAAOCAQEACefje/dhmzEkBoA6OV934WtGXcBQNcb+9/qBGevUBG1cNJIyJddi
dea2gFUB1rx/WffTrJyiOCApV8wXG+zmGm6YJenKnGG9sIQtOTibhs3ll7UN4S0n9xsD+1y7YD1c
DNm9lI/3aFn1WUwPc3T4+RXE6XqkDB3geIvLUXaFUi+Y59XiLPHvk61kcopCGeoweX5yWVZ2Njp/
UUJIxQ6Ni3GvfPlxCxWtRe1MDAkhfT6/aAUr37lxtupHibzm9EAJdUEmAFHMhxkNCJiRDsasAiQ8
7V5uBI3ucdSwh+gPaW8KoWlJpv5SGlAkwzq0lSrxyq2ukkC6ciPeKhUvWtHaPg==
-----END CERTIFICATE-----
</code></pre>

<p>They keys are different, even in length. Why?</p>
","<p>The first base 64 contains only the key </p>

<pre><code>Base64.encodeBase64String(publicKey.getEncoded())
</code></pre>

<p>The second base 64 contains the whole public certificate </p>

<pre><code>Base64.encodeBase64String(cert.getEncoded())
</code></pre>
","53816","<java><keystore><public-key>","15","1","6","2017-09-27 02:03:10","","0","9","2189617","","2014-11-03 10:30:46","2014-11-03 09:57:27",""
"26711731","Read public key from file in keystore","<p>Hi I want to extract public key from KeyStore using Java code</p>

<p>I am creating a keystore</p>

<pre><code>keytool -genkey -alias mykeystore -keyalg RSA -keystore mykeystore.jks -keysize 2048
</code></pre>

<p>And exporting the public into another file</p>

<pre><code>keytool -export -alias mykeystore -keystore mykeystore.jks -rfc -file publickey.cert
</code></pre>

<p>How can I get the Public Key String from keystore or the publickey.cert file using the Java code?</p>

<p>Thanks.</p>

<p><strong>UPDATE</strong></p>

<pre><code>public static void main(String[] args) {

    try {

        FileInputStream is = new FileInputStream(""/home/myuser/my-keystore/mykeystore.jks"");
        KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
        String password = ""myuserpass"";
        char[] passwd = password.toCharArray();
        keystore.load(is, passwd);
        String alias = ""mykeystore"";
        Key key = keystore.getKey(alias, passwd);
        if (key instanceof PrivateKey) {
          // Get certificate of public key
          Certificate cert = keystore.getCertificate(alias);
          // Get public key
          PublicKey publicKey = cert.getPublicKey();

          String publicKeyString = Base64.encodeBase64String(publicKey
                    .getEncoded());
          System.out.println(publicKeyString);

        }

    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>Then it is giving like</p>

<pre><code>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiG2FjSuXrraYuh0TyRNiUvVCyaFlb7VY9AFIMSDdcY0JgNF0c4YVQxYxUCbYzmkLZD/rrYMe/8nxkWV0TMz2Y7GnvichjtWHL1ui58uC0+RtFMkYJ+ftwt9qBy9hvb/rVFTsvT5/b6CQXD8a6bFveMUluQZISLCV7i11XYzp81+w6M7+2fJAwezIJnIrgwv1K9YDjWaToaNXe7hnzzy0s8AdkjTk197+hg8dRfbvkr8XAddNsEMPeUA5iY+5VEpRNI925ZT/dxnaABA0z6i4JbVjeLl8r7ySG9R/2w/j2G+/YSRQc9BmRHPa0tBgH7wvQM+WRwD9WmST+5qeBIfH3QIDAQAB
</code></pre>

<p>When I do <code>cat publickey.cert</code>, it shows this</p>

<pre><code>-----BEGIN CERTIFICATE-----
MIIDgTCCAmmgAwIBAgIEf7XoMDANBgkqhkiG9w0BAQsFADBxMQswCQYDVQQGEwJJTjESMBAGA1UE
CBMJS2FybmF0YWthMRIwEAYDVQQHEwlCYW5nYWxvcmUxEjAQBgNVBAoTCU5ldHNjaXR1czESMBAG
A1UECxMJTmV0c2NpdHVzMRIwEAYDVQQDEwlOZXRzY2l0dXMwHhcNMTQxMTAzMDkyNTM3WhcNMTUw
MjAxMDkyNTM3WjBxMQswCQYDVQQGEwJJTjESMBAGA1UECBMJS2FybmF0YWthMRIwEAYDVQQHEwlC
YW5nYWxvcmUxEjAQBgNVBAoTCU5ldHNjaXR1czESMBAGA1UECxMJTmV0c2NpdHVzMRIwEAYDVQQD
EwlOZXRzY2l0dXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCIbYWNK5eutpi6HRPJ
E2JS9ULJoWVvtVj0AUgxIN1xjQmA0XRzhhVDFjFQJtjOaQtkP+utgx7/yfGRZXRMzPZjsae+JyGO
1YcvW6Lny4LT5G0UyRgn5+3C32oHL2G9v+tUVOy9Pn9voJBcPxrpsW94xSW5BkhIsJXuLXVdjOnz
X7Dozv7Z8kDB7MgmciuDC/Ur1gONZpOho1d7uGfPPLSzwB2SNOTX3v6GDx1F9u+SvxcB102wQw95
QDmJj7lUSlE0j3bllP93GdoAEDTPqLgltWN4uXyvvJIb1H/bD+PYb79hJFBz0GZEc9rS0GAfvC9A
z5ZHAP1aZJP7mp4Eh8fdAgMBAAGjITAfMB0GA1UdDgQWBBSvgDYtI/NGP8Y0EvsCHASjmr/PmzAN
BgkqhkiG9w0BAQsFAAOCAQEACefje/dhmzEkBoA6OV934WtGXcBQNcb+9/qBGevUBG1cNJIyJddi
dea2gFUB1rx/WffTrJyiOCApV8wXG+zmGm6YJenKnGG9sIQtOTibhs3ll7UN4S0n9xsD+1y7YD1c
DNm9lI/3aFn1WUwPc3T4+RXE6XqkDB3geIvLUXaFUi+Y59XiLPHvk61kcopCGeoweX5yWVZ2Njp/
UUJIxQ6Ni3GvfPlxCxWtRe1MDAkhfT6/aAUr37lxtupHibzm9EAJdUEmAFHMhxkNCJiRDsasAiQ8
7V5uBI3ucdSwh+gPaW8KoWlJpv5SGlAkwzq0lSrxyq2ukkC6ciPeKhUvWtHaPg==
-----END CERTIFICATE-----
</code></pre>

<p>They keys are different, even in length. Why?</p>
","<p>Try this:</p>

<pre><code>import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Enumeration;
import java.security.PublicKey;
import java.util.Base64;

//=====================

try {
    File file = new File(""C:\\Program Files (x86)\\keyStoreFilehere.kstr"");
    FileInputStream is = new FileInputStream(file);
    KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
    String password = ""password"";
    keystore.load(is, password.toCharArray());
    Enumeration enumeration = keystore.aliases();
    while(enumeration.hasMoreElements()) {
         String alias = (String)enumeration.nextElement();
         Certificate certificate = keystore.getCertificate(alias);
         PublicKey publicKey = keystore.getCertificate(alias).getPublicKey();
         byte[] encodedCertKey = certificate.getEncoded();
         byte[] encodedPublicKey = publicKey.getEncoded();
         String b64PublicKey = Base64.getMimeEncoder().encodeToString(encodedPublicKey);
         String b64CertKey = Base64.getMimeEncoder().encodeToString(encodedCertKey);
         String publicKeyString = ""-----BEGIN CERTIFICATE-----\n""
                            + b64PublicKey
                            + ""\n-----END CERTIFICATE-----"";

         String certKeyString = ""-----BEGIN CERTIFICATE-----\n""
                            + b64CertKey
                            + ""\n-----END CERTIFICATE-----"";
         System.out.println(publicKeyString);
         System.out.println(certKeyString);
    }

 } catch (CertificateException | NoSuchAlgorithmException  | KeyStoreException | IOException e) {
            e.printStackTrace();
 }
</code></pre>
","53816","<java><keystore><public-key>","15","3","6","2017-09-27 02:03:10","","0","9","2189617","","2014-11-03 10:30:46","2014-11-03 09:57:27",""
"4192296","C# How to simply encrypt a text file with a PGP Public Key?","<p>I've researched a bit about how to achieve what I said in the question and found several APIs but most of them look very complicated and since I'm just a noobie in this area I just want a simple method like:</p>

<pre><code>public String Encrypt(String message, PublicKey publicKey)
</code></pre>

<p>Don't know if this can be done? If not then please someone enlighten me another way to achieve this :)</p>

<p>Thank you.</p>

<p>UPDATE:</p>

<p>So far I have only seen that all of the library for OpenPGP encryption require both the public key and private key to do the encrypt while I only want to encrypt with the public key (because I don't have the private key to use it)!</p>
","<p>There's an article on code project <a href=""http://www.codeproject.com/KB/security/sharpprivacy.aspx?df=100&amp;forumid=15716&amp;exp=0&amp;select=573797"" rel=""nofollow"">http://www.codeproject.com/KB/security/sharpprivacy.aspx?df=100&amp;forumid=15716&amp;exp=0&amp;select=573797</a>, that has methods:</p>

<pre><code>public static string EncryptText(string strMessage, PublicKeyRing pkrPublicKeyRing, SecretKeyRing skrSecretKeyRing, bool bSign
private static void DecryptAndVerify(SecretKeyRing skrSecretKeyRing, PublicKeyRing pkrPublicKeyRing, byte[] bData)
</code></pre>

<p>Which may be what you're looking for, or at least point you in the right direction to writing your own.</p>
","43532","<c#><encryption><public-key><pgp><public-key-encryption>","20","4","4","2018-05-30 08:21:54","4202096","0","9","2039695","","2015-12-14 14:03:15","2010-11-16 08:33:22",""
"4192296","C# How to simply encrypt a text file with a PGP Public Key?","<p>I've researched a bit about how to achieve what I said in the question and found several APIs but most of them look very complicated and since I'm just a noobie in this area I just want a simple method like:</p>

<pre><code>public String Encrypt(String message, PublicKey publicKey)
</code></pre>

<p>Don't know if this can be done? If not then please someone enlighten me another way to achieve this :)</p>

<p>Thank you.</p>

<p>UPDATE:</p>

<p>So far I have only seen that all of the library for OpenPGP encryption require both the public key and private key to do the encrypt while I only want to encrypt with the public key (because I don't have the private key to use it)!</p>
","<p>Did you take a look at the bouncycastle pgp? <a href=""http://www.bouncycastle.org/"" rel=""nofollow noreferrer"">http://www.bouncycastle.org/</a></p>

<p>There is a source example here of enrypting a file taken from the BouncyCastle site: <a href=""https://stackoverflow.com/questions/2693769/need-example-for-bouncycastle-pgp-file-encryption-in-c"">Need example for BouncyCastle PGP File encryption in C#</a></p>
","43532","<c#><encryption><public-key><pgp><public-key-encryption>","20","6","4","2018-05-30 08:21:54","4202096","0","9","2039695","","2015-12-14 14:03:15","2010-11-16 08:33:22",""
"4192296","C# How to simply encrypt a text file with a PGP Public Key?","<p>I've researched a bit about how to achieve what I said in the question and found several APIs but most of them look very complicated and since I'm just a noobie in this area I just want a simple method like:</p>

<pre><code>public String Encrypt(String message, PublicKey publicKey)
</code></pre>

<p>Don't know if this can be done? If not then please someone enlighten me another way to achieve this :)</p>

<p>Thank you.</p>

<p>UPDATE:</p>

<p>So far I have only seen that all of the library for OpenPGP encryption require both the public key and private key to do the encrypt while I only want to encrypt with the public key (because I don't have the private key to use it)!</p>
","<p>I found a tutorial <a href=""http://blogs.microsoft.co.il/blogs/kim/archive/2009/01/23/pgp-zip-encrypted-files-with-c.aspx"" rel=""noreferrer"">here</a> but it requires both Secret Key and Public Key to encrypt data. However I've modified the codes a bit to only require public key (no signing, no compress) and thought I should publish it here in case anyone also looking for a solution for this question. Belows is the modified codes, all the credits for the author - Mr. Kim.</p>

<pre><code>public class PgpEncrypt
    {
        private PgpEncryptionKeys m_encryptionKeys;
        private const int BufferSize = 0x10000; 
        /// &lt;summary&gt;
        /// Instantiate a new PgpEncrypt class with initialized PgpEncryptionKeys.
        /// &lt;/summary&gt;
        /// &lt;param name=""encryptionKeys""&gt;&lt;/param&gt;
        /// &lt;exception cref=""ArgumentNullException""&gt;encryptionKeys is null&lt;/exception&gt;
        public PgpEncrypt(PgpEncryptionKeys encryptionKeys)
        {
            if (encryptionKeys == null)
            {
                throw new ArgumentNullException(""encryptionKeys"", ""encryptionKeys is null."");
            }
            m_encryptionKeys = encryptionKeys;
        }
        /// &lt;summary&gt;
        /// Encrypt and sign the file pointed to by unencryptedFileInfo and
        /// write the encrypted content to outputStream.
        /// &lt;/summary&gt;
        /// &lt;param name=""outputStream""&gt;The stream that will contain the
        /// encrypted data when this method returns.&lt;/param&gt;
        /// &lt;param name=""fileName""&gt;FileInfo of the file to encrypt&lt;/param&gt;
        public void Encrypt(Stream outputStream, FileInfo unencryptedFileInfo)
        {
            if (outputStream == null)
            {
                throw new ArgumentNullException(""outputStream"", ""outputStream is null."");
            }
            if (unencryptedFileInfo == null)
            {
                throw new ArgumentNullException(""unencryptedFileInfo"", ""unencryptedFileInfo is null."");
            }
            if (!File.Exists(unencryptedFileInfo.FullName))
            {
                throw new ArgumentException(""File to encrypt not found."");
            }
            using (Stream encryptedOut = ChainEncryptedOut(outputStream))
            {
                using (Stream literalOut = ChainLiteralOut(encryptedOut, unencryptedFileInfo))
                using (FileStream inputFile = unencryptedFileInfo.OpenRead())
                {
                    WriteOutput(literalOut, inputFile);
                }
            }
        }

        private static void WriteOutput(Stream literalOut,
            FileStream inputFile)
        {
            int length = 0;
            byte[] buf = new byte[BufferSize];
            while ((length = inputFile.Read(buf, 0, buf.Length)) &gt; 0)
            {
                literalOut.Write(buf, 0, length);
            }
        }

        private Stream ChainEncryptedOut(Stream outputStream)
        {
            PgpEncryptedDataGenerator encryptedDataGenerator;
            encryptedDataGenerator =
                new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.TripleDes,
                                              new SecureRandom());
            encryptedDataGenerator.AddMethod(m_encryptionKeys.PublicKey);
            return encryptedDataGenerator.Open(outputStream, new byte[BufferSize]);
        }

        private static Stream ChainLiteralOut(Stream encryptedOut, FileInfo file)
        {
            PgpLiteralDataGenerator pgpLiteralDataGenerator = new PgpLiteralDataGenerator();
            return pgpLiteralDataGenerator.Open(encryptedOut, PgpLiteralData.Binary, 

file);
            } 
}
</code></pre>

<p>Of course to run these codes you have to include <a href=""http://www.bouncycastle.org/csharp/"" rel=""noreferrer"">BouncyCastle library</a> in your project.<br>
I've tested encrypting and then decrypting and it runs fine :)</p>
","43532","<c#><encryption><public-key><pgp><public-key-encryption>","20","10","4","2018-05-30 08:21:54","4202096","0","9","2039695","","2015-12-14 14:03:15","2010-11-16 08:33:22",""
"4192296","C# How to simply encrypt a text file with a PGP Public Key?","<p>I've researched a bit about how to achieve what I said in the question and found several APIs but most of them look very complicated and since I'm just a noobie in this area I just want a simple method like:</p>

<pre><code>public String Encrypt(String message, PublicKey publicKey)
</code></pre>

<p>Don't know if this can be done? If not then please someone enlighten me another way to achieve this :)</p>

<p>Thank you.</p>

<p>UPDATE:</p>

<p>So far I have only seen that all of the library for OpenPGP encryption require both the public key and private key to do the encrypt while I only want to encrypt with the public key (because I don't have the private key to use it)!</p>
","<p>Here is perhaps a cleaner approach:</p>

<hr>

<pre><code>        var pkr = asciiPublicKeyToRing(ascfilein);
        if (pkr != null)
        {
            try
            {
                EncryptFile(
                tbUnencryptedFile.Text, tbEncryptedFile.Text, getFirstPublicEncryptionKeyFromRing(pkr), true, true);

                MessageBox.Show(""File Encrypted."");
            }
            catch (Exception ex)
            {
                MessageBox.Show(""Error: "" + ex.Message);
            }
        }
        else
        {
             MessageBox.Show(ascfilein + "" is not a public key."");
        }
</code></pre>

<hr>

<pre><code>    private PgpPublicKeyRing asciiPublicKeyToRing(string ascfilein)
    {
        using (Stream pubFis = File.OpenRead(ascfilein))
        {
            var pubArmoredStream = new ArmoredInputStream(pubFis);

            PgpObjectFactory pgpFact = new PgpObjectFactory(pubArmoredStream);
            Object opgp = pgpFact.NextPgpObject();
            var pkr = opgp as PgpPublicKeyRing;
            return pkr;
        }
    }

    private PgpPublicKey getFirstPublicEncryptionKeyFromRing(PgpPublicKeyRing pkr)
    {
        foreach (PgpPublicKey k in pkr.GetPublicKeys())
        {
            if (k.IsEncryptionKey)
                return k;
        }
        throw new ArgumentException(""Can't find encryption key in key ring."");
    }

    public static void EncryptFile(string inputFile, string outputFile, PgpPublicKey encKey, bool armor,
        bool withIntegrityCheck)
    {
        using (MemoryStream bOut = new MemoryStream())
        {
            PgpCompressedDataGenerator comData = new PgpCompressedDataGenerator(CompressionAlgorithmTag.Zip);
            PgpUtilities.WriteFileToLiteralData(comData.Open(bOut), PgpLiteralData.Binary,
                new FileInfo(inputFile));

            comData.Close();
            PgpEncryptedDataGenerator cPk = new PgpEncryptedDataGenerator(SymmetricKeyAlgorithmTag.Aes256,
                withIntegrityCheck, new SecureRandom());

            cPk.AddMethod(encKey);
            byte[] bytes = bOut.ToArray();

            using (Stream outputStream = File.Create(outputFile))
            {
                if (armor)
                {
                    using (ArmoredOutputStream armoredStream = new ArmoredOutputStream(outputStream))
                    using (Stream cOut = cPk.Open(armoredStream, bytes.Length))
                    {
                        cOut.Write(bytes, 0, bytes.Length);
                    }
                }
                else
                {
                    using (Stream cOut = cPk.Open(outputStream, bytes.Length))
                    {
                        cOut.Write(bytes, 0, bytes.Length);
                    }
                }
            }
        }
    }
</code></pre>
","43532","<c#><encryption><public-key><pgp><public-key-encryption>","20","8","4","2018-05-30 08:21:54","4202096","0","9","2039695","","2015-12-14 14:03:15","2010-11-16 08:33:22",""
"17685645","RSA Encryption Javascript","<p>can anyone please help me with this, i have been instructed to write an application that takes some DATA then Encrypts it with a RSA Public Key and apparently needs to be RSA Encryption(i have never heard or seen this before)? </p>

<p>Which encryption cipher is RSA meant to use as standard?</p>

<pre><code>var key = ""TUlHZE1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTEFEQ0Jod0tCZ1FDbVFiTWc3SWRpeHVmYWEwcDd2ODVLVytmUnVlZ216UUhibnNoWjhmbXlTQW9MMXRFVzAyNEZKVFlSTFZxN0VsV2p1R0U4aHQ3RmJjN1NURWpxZVViWU5xdnRiVWN6UFZYSE5FdStYRUVndGszazlFNXVQWG0wVzRIc3RtK0FhRXcyMmxxb2lFNGlrT1QzZzdPRXNHSVFCMVNlSlRtVTE1eFBBZ3M3SXRjTVFRSUJFUT09"";

var data = ""Xa21dr"";
</code></pre>
","<p>Never mind found the answer myself! </p>

<p>RSA Encryption standard uses PKCS #1</p>

<p>Best library to use is pidCrypt, nothing else worked for me!</p>

<p><a href=""https://sourceforge.net/projects/pidcrypt/"" rel=""noreferrer"">https://sourceforge.net/projects/pidcrypt/</a></p>

<p>the idiots on the other end failed to let me know that that RSA Public Key was meant to be base64 decoded too before encrypting the DATA before sending.</p>
","42260","<javascript><encryption><rsa><public-key>","15","18","2","2018-10-05 08:41:30","17701094","5","5","1521606","","2014-07-26 19:14:18","2013-07-16 19:47:00",""
"17685645","RSA Encryption Javascript","<p>can anyone please help me with this, i have been instructed to write an application that takes some DATA then Encrypts it with a RSA Public Key and apparently needs to be RSA Encryption(i have never heard or seen this before)? </p>

<p>Which encryption cipher is RSA meant to use as standard?</p>

<pre><code>var key = ""TUlHZE1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTEFEQ0Jod0tCZ1FDbVFiTWc3SWRpeHVmYWEwcDd2ODVLVytmUnVlZ216UUhibnNoWjhmbXlTQW9MMXRFVzAyNEZKVFlSTFZxN0VsV2p1R0U4aHQ3RmJjN1NURWpxZVViWU5xdnRiVWN6UFZYSE5FdStYRUVndGszazlFNXVQWG0wVzRIc3RtK0FhRXcyMmxxb2lFNGlrT1QzZzdPRXNHSVFCMVNlSlRtVTE1eFBBZ3M3SXRjTVFRSUJFUT09"";

var data = ""Xa21dr"";
</code></pre>
","<p>You may be interested in trying out forge (it does RSA and more). There are lots of examples on the README:</p>

<p><a href=""https://github.com/digitalbazaar/forge"">https://github.com/digitalbazaar/forge</a></p>
","42260","<javascript><encryption><rsa><public-key>","15","10","2","2018-10-05 08:41:30","17701094","5","5","1521606","","2014-07-26 19:14:18","2013-07-16 19:47:00",""
"26259432","How to check a public RSA key file","<p>Inside a shell script I want verify public RSA file.
All I want to do is that find a way to check this file is a genuine public key file, nothing else.</p>

<p>Can I ask experts here what are the ways I can verify this input file to check this is a genuine public key file , not a regular file. </p>

<p>I will be using this public key file in future to validate an incoming encrypt gzip file but that is out of scope for now.</p>

<p>All I want is validate input file to check its genuine RSA public key file not an ordinary file.please note that I do not have any other files with me (eg : private key) .</p>

<p>e.g.: if the file is <code>‘public.pem’</code> I just want check inside that it’s a genuine RSA public key file not just a file with texts or file is not corrupted .
I’m already checking that file is not zero sized and md5 . </p>

<p>other possible checks I found 
check file got text <code>‘BEGIN PUBLIC KEY’</code> and <code>‘END PUBLIC KEY’</code>
Also found this command in google , Is there a better way to do this using openssl </p>

<pre><code>‘openssl rsa -noout -text -inform PEM -in pubkey.pem -pubin’
</code></pre>

<p>Thanks</p>
","<p>It's possible to use any public key format parser, including <code>openssl</code> or even parse key yourself as the format is not that difficult.</p>

<p>Command line tools set a non-zero exit code, when parsing fails:</p>

<pre><code>openssl rsa -inform PEM -pubin -in pubkey.pem -noout &amp;&gt; /dev/null
if [ $? != 0 ] ; then
    echo ""this was definitely not a RSA public key in PEM format""
    exit 1
fi
</code></pre>

<p>Just to check any public key:</p>

<pre><code>openssl pkey -inform PEM -pubin -in pubkey.pem -noout &amp;&gt; /dev/null
if [ $? != 0 ] ; then
    echo ""this was definitely not a public key in PEM format""
    exit 1
fi
</code></pre>
","42177","<shell><openssl><rsa><public-key><pem>","10","21","2","2019-01-17 13:57:02","26260514","2","4","642653","","2014-10-08 15:19:56","2014-10-08 14:28:10",""
"26259432","How to check a public RSA key file","<p>Inside a shell script I want verify public RSA file.
All I want to do is that find a way to check this file is a genuine public key file, nothing else.</p>

<p>Can I ask experts here what are the ways I can verify this input file to check this is a genuine public key file , not a regular file. </p>

<p>I will be using this public key file in future to validate an incoming encrypt gzip file but that is out of scope for now.</p>

<p>All I want is validate input file to check its genuine RSA public key file not an ordinary file.please note that I do not have any other files with me (eg : private key) .</p>

<p>e.g.: if the file is <code>‘public.pem’</code> I just want check inside that it’s a genuine RSA public key file not just a file with texts or file is not corrupted .
I’m already checking that file is not zero sized and md5 . </p>

<p>other possible checks I found 
check file got text <code>‘BEGIN PUBLIC KEY’</code> and <code>‘END PUBLIC KEY’</code>
Also found this command in google , Is there a better way to do this using openssl </p>

<pre><code>‘openssl rsa -noout -text -inform PEM -in pubkey.pem -pubin’
</code></pre>

<p>Thanks</p>
","<p>The following script should work for all PEM-formatted keys and certs supported by OpenSSL. I have tested it on various valid and invalid ECDSA and RSA keys with matching and non-matching certs.</p>

<p>Save this as verify-cert-key:</p>

<pre><code>#!/usr/bin/env bash
certFile=""${1}""
keyFile=""${2}""
certPubKey=""$(openssl x509 -noout -pubkey -in ""${certFile}"")""
keyPubKey=""$(openssl pkey -pubout -in ""${keyFile}"")""
if [[ ""${certPubKey}"" == ""${keyPubKey}"" ]]
then
  echo ""PASS: key and cert match""
else
  echo ""FAIL: key and cert DO NOT match""
fi
</code></pre>

<p>Make it executable:</p>

<pre><code>chmod +x verify-cert-key
</code></pre>

<p>Run it on a cert and key:</p>

<pre><code>./verify-cert-key server-crt.pem server-key.pem
</code></pre>
","42177","<shell><openssl><rsa><public-key><pem>","10","2","2","2019-01-17 13:57:02","26260514","2","4","642653","","2014-10-08 15:19:56","2014-10-08 14:28:10",""
"12457234","Encrypt in Javascript, decrypt in PHP, using public-key cryptography","<p>I'd like to encrypt in JavaScript, decrypt in PHP, using public-key cryptography. I've been trying to find libraries that can accomplish this, but am having issues.</p>

<p><strike>I am currently looking at <a href=""http://openpgpjs.org/"" rel=""noreferrer"">openpgpjs</a>, but I need support in all browsers, and even the test page has errrors on the only listed as supported browser (Google Chrome).</strike></p>

<p>Notes about the final goal:</p>

<p><strong>The TCP connection is already protected by SSL. The main purpose of this layer of protection is defending against intentional or unintentional webserver logging, crash dumps, etc.</strong></p>

<p>On the PHP side, a temporary private key will be generated (it will expire after a short time). The caller (in Javascript) is responsible for asking for a new public key when it expires. The reason for private key expiration is to prevent logged encrypted data decryption, in case the server which stores the private key is later compromised.</p>

<p>Servers compromised scenario: someone gets his hands on backups for all machines except the database server (and cannot access the database due to firewalling, even if he finds out the user and password). Since the private key which encrypted the logged data no longer exists, there is nothing the attacker can do.</p>
","<p>Check out <a href=""https://github.com/chrisa/node-rsa"" rel=""nofollow noreferrer"">node-rsa</a>.</p>

<p>It's a node.js module</p>

<blockquote>
  <p>This module provides access to RSA public-key routines from OpenSSL.
  Support is limited to RSAES-OAEP and encryption with a public key, decryption with a private key.</p>
</blockquote>

<p>Maybe you can port it to run in the browser.</p>

<p><strong>UPDATE</strong></p>

<p>RSA client side library for javascript: <strong>(pidcrypt has been officially discontinued and the website domain is expired - see @jack's answer which contains the same libraries as pidcrypt contained)</strong>.
<a href=""https://www.pidder.com/pidcrypt/?page=rsa"" rel=""nofollow noreferrer"">https://www.pidder.com/pidcrypt/?page=rsa</a></p>

<p>PHP server side component:
<a href=""http://phpseclib.sourceforge.net/"" rel=""nofollow noreferrer"">http://phpseclib.sourceforge.net/</a></p>

<p>Good luck!</p>
","41192","<javascript><php><rsa><public-key><pgp>","33","24","5","2019-10-23 02:39:10","12575951","1","26","2224584","","2015-12-20 07:04:27","2012-09-17 10:18:16",""
"12457234","Encrypt in Javascript, decrypt in PHP, using public-key cryptography","<p>I'd like to encrypt in JavaScript, decrypt in PHP, using public-key cryptography. I've been trying to find libraries that can accomplish this, but am having issues.</p>

<p><strike>I am currently looking at <a href=""http://openpgpjs.org/"" rel=""noreferrer"">openpgpjs</a>, but I need support in all browsers, and even the test page has errrors on the only listed as supported browser (Google Chrome).</strike></p>

<p>Notes about the final goal:</p>

<p><strong>The TCP connection is already protected by SSL. The main purpose of this layer of protection is defending against intentional or unintentional webserver logging, crash dumps, etc.</strong></p>

<p>On the PHP side, a temporary private key will be generated (it will expire after a short time). The caller (in Javascript) is responsible for asking for a new public key when it expires. The reason for private key expiration is to prevent logged encrypted data decryption, in case the server which stores the private key is later compromised.</p>

<p>Servers compromised scenario: someone gets his hands on backups for all machines except the database server (and cannot access the database due to firewalling, even if he finds out the user and password). Since the private key which encrypted the logged data no longer exists, there is nothing the attacker can do.</p>
","<p>RSA example usage for <a href=""https://www.pidder.com/pidcrypt/?page=rsa"" rel=""nofollow"">pidCrypt</a> (js) and <a href=""http://phpseclib.sourceforge.net/"" rel=""nofollow"">phpseclib</a> (php).</p>

<p><strong>Do not reuse the private key in this working example.</strong></p>

<p><strong>pidCrypt encryption</strong></p>

<pre><code>//From the pidCrypt example sandbox
function certParser(cert) {
    var lines = cert.split('\n');
    var read = false;
    var b64 = false;
    var end = false;
    var flag = '';
    var retObj = {
    };
    retObj.info = '';
    retObj.salt = '';
    retObj.iv;
    retObj.b64 = '';
    retObj.aes = false;
    retObj.mode = '';
    retObj.bits = 0;
    for (var i = 0; i &lt; lines.length; i++) {
        flag = lines[i].substr(0, 9);
        if (i == 1 &amp;&amp; flag != 'Proc-Type' &amp;&amp; flag.indexOf('M') == 0)//unencrypted cert?
        b64 = true;
        switch (flag) {
            case '-----BEGI':
                read = true;
                break;
            case 'Proc-Type':
                if (read)retObj.info = lines[i];
                break;
            case 'DEK-Info:':
                if (read) {
                    var tmp = lines[i].split(',');
                    var dek = tmp[0].split(': ');
                    var aes = dek[1].split('-');
                    retObj.aes = (aes[0] == 'AES') ? true : false;
                    retObj.mode = aes[2];
                    retObj.bits = parseInt(aes[1]);
                    retObj.salt = tmp[1].substr(0, 16);
                    retObj.iv = tmp[1];
                }
                break;
            case '':
                if (read)b64 = true;
                break;
            case '-----END ':
                if (read) {
                    b64 = false;
                    read = false;
                }
                break;
                default : if (read &amp;&amp; b64)retObj.b64 += pidCryptUtil.stripLineFeeds(lines[i]);
        }
    }
    return retObj;
}

var strCreditCardPublicKey=""-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC\/tI7cw+gnUPK2LqWp50XboJ1i\njrLDn+4\/gPOe+pB5kz4VJX2KWwg9iYMG9UJ1M+AeN33qT7xt9ob2dxgtTh7Mug2S\nn1TLz4donuIzxCmW+SZdU1Y+WNDINds194hWsAVhMC1ClMQTfldUGzQnI5sXvZTF\nJWp\/9jheCNLDRIkAnQIDAQAB\n-----END PUBLIC KEY-----\n"";

var objParams=certParser(strCreditCardPublicKey);
var binaryPrivateKey=pidCryptUtil.decodeBase64(objParams.b64);

var rsa=new pidCrypt.RSA();

var asn=pidCrypt.ASN1.decode(pidCryptUtil.toByteArray(key));
var tree=asn.toHexTree();
rsa.setPublicKeyFromASN(tree);

var strHexSensitiveDataEncrypted=rsa.encrypt(""4111111111111111"");

var strBase64SensitiveDataEncrypted=pidCryptUtil.fragment(pidCryptUtil.encodeBase64(pidCryptUtil.convertFromHex(strHexSensitiveDataEncrypted)), 64))

console.log(strBase64SensitiveDataEncrypted);
</code></pre>

<p>.</p>

<p><strong>phpseclib decryption</strong></p>

<pre><code>require_once(""Crypt/RSA.php"");

function decrypt($strBase64CipherText)
{
    //CRYPT_RSA_MODE_INTERNAL is slow
    //CRYPT_RSA_MODE_OPENSSL is fast, but requires openssl to be installed, configured and accessible.
    define(""CRYPT_RSA_MODE"", CRYPT_RSA_MODE_INTERNAL);

    $rsa=new Crypt_RSA();


    //$strPrivateKey=file_get_contents(""private.pem"");
    //This private key is for example purposes
    //DO NOT REUSE
    $strPrivateKey=""-----BEGIN RSA PRIVATE KEY-----
        MIICXQIBAAKBgQDBNHK7R2CCYGqljipbPoj3Pwyz4cF4bL5rsm1t8S30gbEbMnKn
        1gpzteoPlKp7qp0TnsgKab13Fo1d+Yy8u3m7JUd/sBrUa9knY6dpreZ9VTNul8Bs
        p2LNnAXOIA5xwT10PU4uoWOo1v/wn8eMeBS7QsDFOzIm+dptHYorB3DOUQIDAQAB
        AoGBAKgwGyxy702v10b1omO55YuupEU3Yq+NopqoQeCyUnoGKIHvgaYfiwu9sdsM
        ZPiwxnqc/7Eo6Zlw1XGYWu61GTrOC8MqJKswJvzZ0LrO3oEb8IYRaPxvuRn3rrUz
        K7WnPJyQ2FPL+/D81NK6SH1eHZjemb1jV9d8uGb7ifvha5j9AkEA+4/dZV+dZebL
        dRKtyHLfbXaUhJcNmM+04hqN1DUhdLAfnFthoiSDw3i1EFixvPSiBfwuWC6h9mtL
        CeKgySaOkwJBAMSdBhn3C8NHhsJA8ihQbsPa6DyeZN+oitiU33HfuggO3SVIBN/7
        HmnuLibqdxpnDOtJT+9A+1D29TkNENlTWgsCQGjVIC8xtFcV4e2s1gz1ihSE2QmU
        JU9sJ3YeGMK5TXLiPpobHsnCK8LW16WzQIZ879RMrkeDT21wcvnwno6U6c8CQQCl
        dsiVvXUmyOE+Rc4F43r0VRwxN9QI7hy7nL5XZUN4WJoAMBX6Maos2Af7NEM78xHK
        SY59+aAHSW6irr5JR351AkBA+o7OZzHIhvJfaZLUSwTPsRhkdE9mx44rEjXoJsaT
        e8DYZKr84Cbm+OSmlApt/4d6M4YA581Os1eC8kopewpy
        -----END RSA PRIVATE KEY-----
    "";
    $strPrivateKey=preg_replace(""/[ \t]/"", """", $strPrivateKey);//this won't be necessary when loading from PEM


    $rsa-&gt;loadKey($strPrivateKey);

    $binaryCiphertext=base64_decode($strBase64CipherText);

    $rsa-&gt;setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);
    $strBase64DecryptedData=$rsa-&gt;decrypt($binaryCiphertext);

    return base64_decode($strBase64DecryptedData);
}

//The pidCrypt example implementation will output a base64 string of an encrypted base64 string which contains the original data, like this one:
$strBase64CipherText=""JDlK7L/nGodDJodhCj4uMw0/LW329HhO2EvxNXNUuhe+C/PFcJBE7Gp5GWZ835fNekJDbotsUFpLvP187AFAcNEfP7VAH1xLhhlB2a9Uj/z4Hulr4E2EPs6XgvmLBS3MwiHALX2fES5hSKY/sfSUssRH10nBHHO9wBLHw5mRaeg="";

$binaryDecrypted=decrypt($strBase64CipherText);

//should output '4111111111111111'
var_export($binaryDecrypted);
</code></pre>
","41192","<javascript><php><rsa><public-key><pgp>","33","1","5","2019-10-23 02:39:10","12575951","1","26","2224584","","2015-12-20 07:04:27","2012-09-17 10:18:16",""
"12457234","Encrypt in Javascript, decrypt in PHP, using public-key cryptography","<p>I'd like to encrypt in JavaScript, decrypt in PHP, using public-key cryptography. I've been trying to find libraries that can accomplish this, but am having issues.</p>

<p><strike>I am currently looking at <a href=""http://openpgpjs.org/"" rel=""noreferrer"">openpgpjs</a>, but I need support in all browsers, and even the test page has errrors on the only listed as supported browser (Google Chrome).</strike></p>

<p>Notes about the final goal:</p>

<p><strong>The TCP connection is already protected by SSL. The main purpose of this layer of protection is defending against intentional or unintentional webserver logging, crash dumps, etc.</strong></p>

<p>On the PHP side, a temporary private key will be generated (it will expire after a short time). The caller (in Javascript) is responsible for asking for a new public key when it expires. The reason for private key expiration is to prevent logged encrypted data decryption, in case the server which stores the private key is later compromised.</p>

<p>Servers compromised scenario: someone gets his hands on backups for all machines except the database server (and cannot access the database due to firewalling, even if he finds out the user and password). Since the private key which encrypted the logged data no longer exists, there is nothing the attacker can do.</p>
","<p>This is based on the <a href=""http://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm"" rel=""nofollow"">Tiny Encryption Algorithm</a>, which is a symmetric (private key) encryption system. It may nevertheless be of use to you because of its light weight.</p>

<p>This is now at: <a href=""http://babelfish.nl/Projecten/JavascriptPhpEncryption"" rel=""nofollow"">http://babelfish.nl/Projecten/JavascriptPhpEncryption</a> </p>
","41192","<javascript><php><rsa><public-key><pgp>","33","0","5","2019-10-23 02:39:10","12575951","1","26","2224584","","2015-12-20 07:04:27","2012-09-17 10:18:16",""
"12457234","Encrypt in Javascript, decrypt in PHP, using public-key cryptography","<p>I'd like to encrypt in JavaScript, decrypt in PHP, using public-key cryptography. I've been trying to find libraries that can accomplish this, but am having issues.</p>

<p><strike>I am currently looking at <a href=""http://openpgpjs.org/"" rel=""noreferrer"">openpgpjs</a>, but I need support in all browsers, and even the test page has errrors on the only listed as supported browser (Google Chrome).</strike></p>

<p>Notes about the final goal:</p>

<p><strong>The TCP connection is already protected by SSL. The main purpose of this layer of protection is defending against intentional or unintentional webserver logging, crash dumps, etc.</strong></p>

<p>On the PHP side, a temporary private key will be generated (it will expire after a short time). The caller (in Javascript) is responsible for asking for a new public key when it expires. The reason for private key expiration is to prevent logged encrypted data decryption, in case the server which stores the private key is later compromised.</p>

<p>Servers compromised scenario: someone gets his hands on backups for all machines except the database server (and cannot access the database due to firewalling, even if he finds out the user and password). Since the private key which encrypted the logged data no longer exists, there is nothing the attacker can do.</p>
","<p>I've used something similar for my login page; it encrypts login credentials using the given public key information (N, e) which can be decrypted in PHP.</p>

<p>It uses the following files that are part of <a href=""http://www-cs-students.stanford.edu/~tjw/jsbn/"" rel=""noreferrer""><code>JSBN</code></a>:</p>

<ul>
<li><code>jsbn.js</code> - to work with big integers</li>
<li><code>rsa.js</code> - for RSA encryption only (uses jsbn.js)</li>
<li><code>rng.js</code> - basic entropy collector</li>
<li><code>prng4.js</code> - ARC4 RNG backend</li>
</ul>

<p>To encrypt data:</p>

<pre><code>$pk = '-----BEGIN RSA PRIVATE KEY-----
...
-----END RSA PRIVATE KEY-----';
$kh = openssl_pkey_get_private($pk);
$details = openssl_pkey_get_details($kh);

function to_hex($data)
{
    return strtoupper(bin2hex($data));
}

?&gt;
&lt;script&gt;
var rsa = new RSAKey();
rsa.setPublic('&lt;?php echo to_hex($details['rsa']['n']) ?&gt;', '&lt;?php echo to_hex($details['rsa']['e']) ?&gt;');

// encrypt using RSA
var data = rsa.encrypt('hello world');
&lt;/script&gt;
</code></pre>

<p>This is how you would decode the sent data:</p>

<pre><code>$kh = openssl_pkey_get_private($pk);
$details = openssl_pkey_get_details($kh);
// convert data from hexadecimal notation
$data = pack('H*', $data);
if (openssl_private_decrypt($data, $r, $kh)) {
   echo $r;
}
</code></pre>
","41192","<javascript><php><rsa><public-key><pgp>","33","33","5","2019-10-23 02:39:10","12575951","1","26","2224584","","2015-12-20 07:04:27","2012-09-17 10:18:16",""
"12457234","Encrypt in Javascript, decrypt in PHP, using public-key cryptography","<p>I'd like to encrypt in JavaScript, decrypt in PHP, using public-key cryptography. I've been trying to find libraries that can accomplish this, but am having issues.</p>

<p><strike>I am currently looking at <a href=""http://openpgpjs.org/"" rel=""noreferrer"">openpgpjs</a>, but I need support in all browsers, and even the test page has errrors on the only listed as supported browser (Google Chrome).</strike></p>

<p>Notes about the final goal:</p>

<p><strong>The TCP connection is already protected by SSL. The main purpose of this layer of protection is defending against intentional or unintentional webserver logging, crash dumps, etc.</strong></p>

<p>On the PHP side, a temporary private key will be generated (it will expire after a short time). The caller (in Javascript) is responsible for asking for a new public key when it expires. The reason for private key expiration is to prevent logged encrypted data decryption, in case the server which stores the private key is later compromised.</p>

<p>Servers compromised scenario: someone gets his hands on backups for all machines except the database server (and cannot access the database due to firewalling, even if he finds out the user and password). Since the private key which encrypted the logged data no longer exists, there is nothing the attacker can do.</p>
","<p>Be careful with implementing RSA. In fact, you probably shouldn't use RSA at all. (<a href=""https://paragonie.com/blog/2015/09/how-to-safely-implement-cryptography-in-any-application"" rel=""nofollow noreferrer"">Use libsodium instead!</a>)</p>

<p>Even if you're using a library (e.g. PHP's OpenSSL extension directly or, until recently, <a href=""http://framework.zend.com/security/advisory/ZF2015-10"" rel=""nofollow noreferrer""><code>Zend\Crypt</code></a>), there's still plenty that can go wrong. In particular:</p>

<ul>
<li>PKCS1v1.5 padding, which is the <em>default</em> (and in many cases the only supported padding mode), is vulnerable to a class of chosen-ciphertext attacks called a padding oracle. This was first discovered by Daniel Bleichenbacher. <strong>In 1998.</strong></li>
<li>RSA is not suitable for encrypting large messages, so what implementors often do is take a long message, break it up into fixed-size blocks, and encrypt each block separately. Not only is this slow, it's analogous to <a href=""https://blog.filippo.io/the-ecb-penguin"" rel=""nofollow noreferrer"">the dreaded ECB mode</a> for symmetric-key cryptography.</li>
</ul>

<h1>The Best Thing to Do, with Libsodium</h1>

<p>You might want to read <a href=""https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/august/javascript-cryptography-considered-harmful/"" rel=""nofollow noreferrer""><em>JavaScript Cryptography Considered Harmful</em></a> a few times before going down this route. But that said...</p>

<ol>
<li>Use TLSv1.2 with HSTS and HPKP, preferably with ChaCha20-Poly1305 and/or AES-GCM and an ECDSA-P256 certificate (important: when the IETF christens Curve25519 and Ed25519, switch to that instead).</li>
<li>Add <a href=""https://github.com/jedisct1/libsodium.js"" rel=""nofollow noreferrer"">libsodium.js</a> to your project.</li>
<li>Use <code>crypto_box_seal()</code> with a public key to encrypt your messages, client-side.</li>
<li>In PHP, use <a href=""https://paragonie.com/book/pecl-libsodium/read/08-advanced.md#crypto-box-seal"" rel=""nofollow noreferrer""><code>\Sodium\crypto_box_seal_open()</code></a> with the corresponding secret key for the public key to decrypt the message.</li>
</ol>

<h2>I need to use RSA to solve this problem.</h2>

<p><a href=""https://gist.github.com/tqbf/be58d2d39690c3b366ad"" rel=""nofollow noreferrer"">Please don't</a>. Elliptic curve cryptography is faster, simpler, and far easier to implement without side-channels. Most libraries do this for you already. (Libsodium!)</p>

<h2>But I <em>really</em> want to use RSA!</h2>

<p>Fine, follow <a href=""http://www.daemonology.net/blog/2009-06-11-cryptographic-right-answers.html"" rel=""nofollow noreferrer"">these recommendations to the letter</a> and don't come crying to StackOverflow when you make a mistake (like <a href=""http://www.cryptofails.com/post/70059600123/saltstack-rsa-e-d-1"" rel=""nofollow noreferrer"">SaltStack did</a>) that renders your cryptography useless.</p>

<p>One option (which does not come with a complementary JavaScript implementation, and please don't ask for one) that aims to provide simple and easy RSA encryption is <a href=""https://github.com/paragonie/EasyRSA"" rel=""nofollow noreferrer"">paragonie/easyrsa</a>.</p>

<ul>
<li>It avoids the padding oracles by using <a href=""https://security.stackexchange.com/questions/32050/what-specific-padding-weakness-does-oaep-address-in-rsa"">RSA-OAEP with MGF1+SHA256</a> instead of PKCS1v1.5.</li>
<li>It avoids the ECB mode by clever protocol design:</li>
</ul>

<h3>The EasyRSA Encryption Protocol</h3>

<ol>
<li>EasyRSA generates a random 128-bit key for symmetric key cryptography (via AES).</li>
<li>Your plaintext message is encrypted with <a href=""https://github.com/defuse/php-encryption"" rel=""nofollow noreferrer"">defuse/php-encryption</a>.</li>
<li>Your AES key is encrypted with RSA, provided by <a href=""https://github.com/phpseclib/phpseclib"" rel=""nofollow noreferrer"">phpseclib</a>, using the correct mode (mentioned above).</li>
<li>This information is packed together as a simple string (with a checksum).</li>
</ol>

<p>But, really, if you find a valid use case for public key cryptography, you want libsodium instead.</p>

<h2>Bonus: Encryption with JavaScript, Decryption with PHP</h2>

<p>We're going to use <a href=""https://github.com/paragonie/sodium-plus"" rel=""nofollow noreferrer"">sodium-plus</a> to accomplish this goal. (Adopted from <a href=""https://dev.to/paragonie/message-encryption-in-javascript-and-php-cg9"" rel=""nofollow noreferrer"">this post</a>.)</p>

<pre><code>const publicKey = X25519PublicKey.from('fb1a219011c1e0d17699900ef22723e8a2b6e3b52ddbc268d763df4b0c002e73', 'hex');

async function sendEncryptedMessage() {
    let key = await getExampleKey();
    let message = $(""#user-input"").val();
    let encrypted = await sodium.crypto_box_seal(message, publicKey);
    $.post(""/send-message"", {""message"": encrypted.toString('hex')}, function (response) {
        console.log(response);
        $(""#output"").append(""&lt;li&gt;&lt;pre&gt;"" + response.message + ""&lt;/pre&gt;&lt;/li&gt;"");
    });
}
</code></pre>

<p>And then the congruent PHP code:</p>

<pre><code>&lt;?php
declare(strict_types=1);
require 'vendor/autoload.php'; // Composer
header('Content-Type: application/json');
$keypair = sodium_hex2bin(
    '0202040a9fbf98e1e712b0be8f4e46e73e4f72e25edb72e0cdec026b370f4787' .
    'fb1a219011c1e0d17699900ef22723e8a2b6e3b52ddbc268d763df4b0c002e73'
);

$encrypted = $_POST['message'] ?? null;
if (!$encrypted) {
    echo json_encode(
        ['message' =&gt; null, 'error' =&gt; 'no message provided'],
        JSON_PRETTY_PRINT
    );
    exit(1);
}
$plaintext = sodium_crypto_box_seal_open(sodium_hex2bin($encrypted), $keypair);

echo json_encode(
    ['message' =&gt; $plaintext, 'original' =&gt; $encrypted],
    JSON_PRETTY_PRINT
);
</code></pre>
","41192","<javascript><php><rsa><public-key><pgp>","33","13","5","2019-10-23 02:39:10","12575951","1","26","2224584","","2015-12-20 07:04:27","2012-09-17 10:18:16",""
"23609819","ssh connect Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password)","<p>I have a pair of keys to epadmin on machine A. I copied them on machine B in home folder of epadmin via <code>scp</code> in folder .ssh</p>

<p>command for access : ssh epadmin@10.2.11.13</p>

<pre><code>[epadmin@3A1D .ssh]$ ls -la
total 24
drwxrwxr-x 2 epadmin epadmin 4096 May 12 14:41 .
drwx------ 6 epadmin epadmin 4096 May 12 14:40 ..
-rw-r--r-- 1 epadmin epadmin  438 May 12 14:41 config
-rw------- 1 epadmin epadmin 1671 May 12 14:41 id_rsa_auto_epmc
-rw-r--r-- 1 epadmin epadmin  407 May 12 14:41 id_rsa_auto_epmc.pub
-rw-r--r-- 1 epadmin epadmin 2818 May 12 14:41 known_hosts
</code></pre>

<p>Here is a piece of -vvv(Verbose) log</p>

<pre><code>debug1: Next authentication method: publickey
debug1: Trying private key: /home/epadmin/.ssh/identity
debug3: no such identity: /home/epadmin/.ssh/identity
debug1: Trying private key: /home/epadmin/.ssh/id_rsa
debug3: no such identity: /home/epadmin/.ssh/id_rsa
debug1: Trying private key: /home/epadmin/.ssh/id_dsa
debug3: no such identity: /home/epadmin/.ssh/id_dsa
debug2: we did not send a packet, disable method
debug3: authmethod_lookup password
debug3: remaining preferred: ,password
debug3: authmethod_is_enabled password
debug1: Next authentication method: password
debug1: read_passphrase: can't open /dev/tty: No such device or address
debug3: packet_send2: adding 64 (len 52 padlen 12 extra_pad 64)
</code></pre>

<p>I can't login without password</p>

<p>Piece of sshd_config. I have tried to uncomment RSAAut and paste no to password auth. There were no changes</p>

<pre><code># Authentication:
#RSAAuthentication yes
#PubkeyAuthentication yes
#AuthorizedKeysFile     .ssh/authorized_keys
#AuthorizedKeysCommand none
#AuthorizedKeysCommandRunAs nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#RhostsRSAAuthentication no
# similar for protocol version 2
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# RhostsRSAAuthentication and HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication yes
#PermitEmptyPasswords no
PasswordAuthentication yes

# Change to no to disable s/key passwords
#ChallengeResponseAuthentication yes
ChallengeResponseAuthentication no
</code></pre>
","<p>Your question should be on server fault. It's a basic trouble or I should say two :</p>

<ul>
<li>on the server side : when you upload your keys on epadmin in your .ssh directory, you have to rename your id_rsa_auto_epmc.pub file in authorized_keys</li>
<li>on the client side : you use a non-default key name for your private key so you have to specify the path to your key by using -i option : ssh -i ~/id_rsa_auto_epmc</li>
</ul>

<p>No changes is needed to default sshd_config file for key authentification. 
For your question, it should be better to put the ssh command line you use.</p>
","39366","<ssh><rsa><public-key>","1","0","3","2019-08-30 11:00:06","","0","1","1689695","","2018-01-18 11:46:33","2014-05-12 13:01:10",""
"23609819","ssh connect Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password)","<p>I have a pair of keys to epadmin on machine A. I copied them on machine B in home folder of epadmin via <code>scp</code> in folder .ssh</p>

<p>command for access : ssh epadmin@10.2.11.13</p>

<pre><code>[epadmin@3A1D .ssh]$ ls -la
total 24
drwxrwxr-x 2 epadmin epadmin 4096 May 12 14:41 .
drwx------ 6 epadmin epadmin 4096 May 12 14:40 ..
-rw-r--r-- 1 epadmin epadmin  438 May 12 14:41 config
-rw------- 1 epadmin epadmin 1671 May 12 14:41 id_rsa_auto_epmc
-rw-r--r-- 1 epadmin epadmin  407 May 12 14:41 id_rsa_auto_epmc.pub
-rw-r--r-- 1 epadmin epadmin 2818 May 12 14:41 known_hosts
</code></pre>

<p>Here is a piece of -vvv(Verbose) log</p>

<pre><code>debug1: Next authentication method: publickey
debug1: Trying private key: /home/epadmin/.ssh/identity
debug3: no such identity: /home/epadmin/.ssh/identity
debug1: Trying private key: /home/epadmin/.ssh/id_rsa
debug3: no such identity: /home/epadmin/.ssh/id_rsa
debug1: Trying private key: /home/epadmin/.ssh/id_dsa
debug3: no such identity: /home/epadmin/.ssh/id_dsa
debug2: we did not send a packet, disable method
debug3: authmethod_lookup password
debug3: remaining preferred: ,password
debug3: authmethod_is_enabled password
debug1: Next authentication method: password
debug1: read_passphrase: can't open /dev/tty: No such device or address
debug3: packet_send2: adding 64 (len 52 padlen 12 extra_pad 64)
</code></pre>

<p>I can't login without password</p>

<p>Piece of sshd_config. I have tried to uncomment RSAAut and paste no to password auth. There were no changes</p>

<pre><code># Authentication:
#RSAAuthentication yes
#PubkeyAuthentication yes
#AuthorizedKeysFile     .ssh/authorized_keys
#AuthorizedKeysCommand none
#AuthorizedKeysCommandRunAs nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#RhostsRSAAuthentication no
# similar for protocol version 2
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# RhostsRSAAuthentication and HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication yes
#PermitEmptyPasswords no
PasswordAuthentication yes

# Change to no to disable s/key passwords
#ChallengeResponseAuthentication yes
ChallengeResponseAuthentication no
</code></pre>
","<p>Solution in terminal for error</p>

<pre><code>Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).

ssh-keygen -f "" ~/.ssh/known_hosts"" -R xx.xx.xxx.xxx
</code></pre>

<p>xx - ip host</p>
","39366","<ssh><rsa><public-key>","1","0","3","2019-08-30 11:00:06","","0","1","1689695","","2018-01-18 11:46:33","2014-05-12 13:01:10",""
"23609819","ssh connect Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password)","<p>I have a pair of keys to epadmin on machine A. I copied them on machine B in home folder of epadmin via <code>scp</code> in folder .ssh</p>

<p>command for access : ssh epadmin@10.2.11.13</p>

<pre><code>[epadmin@3A1D .ssh]$ ls -la
total 24
drwxrwxr-x 2 epadmin epadmin 4096 May 12 14:41 .
drwx------ 6 epadmin epadmin 4096 May 12 14:40 ..
-rw-r--r-- 1 epadmin epadmin  438 May 12 14:41 config
-rw------- 1 epadmin epadmin 1671 May 12 14:41 id_rsa_auto_epmc
-rw-r--r-- 1 epadmin epadmin  407 May 12 14:41 id_rsa_auto_epmc.pub
-rw-r--r-- 1 epadmin epadmin 2818 May 12 14:41 known_hosts
</code></pre>

<p>Here is a piece of -vvv(Verbose) log</p>

<pre><code>debug1: Next authentication method: publickey
debug1: Trying private key: /home/epadmin/.ssh/identity
debug3: no such identity: /home/epadmin/.ssh/identity
debug1: Trying private key: /home/epadmin/.ssh/id_rsa
debug3: no such identity: /home/epadmin/.ssh/id_rsa
debug1: Trying private key: /home/epadmin/.ssh/id_dsa
debug3: no such identity: /home/epadmin/.ssh/id_dsa
debug2: we did not send a packet, disable method
debug3: authmethod_lookup password
debug3: remaining preferred: ,password
debug3: authmethod_is_enabled password
debug1: Next authentication method: password
debug1: read_passphrase: can't open /dev/tty: No such device or address
debug3: packet_send2: adding 64 (len 52 padlen 12 extra_pad 64)
</code></pre>

<p>I can't login without password</p>

<p>Piece of sshd_config. I have tried to uncomment RSAAut and paste no to password auth. There were no changes</p>

<pre><code># Authentication:
#RSAAuthentication yes
#PubkeyAuthentication yes
#AuthorizedKeysFile     .ssh/authorized_keys
#AuthorizedKeysCommand none
#AuthorizedKeysCommandRunAs nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#RhostsRSAAuthentication no
# similar for protocol version 2
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# RhostsRSAAuthentication and HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication yes
#PermitEmptyPasswords no
PasswordAuthentication yes

# Change to no to disable s/key passwords
#ChallengeResponseAuthentication yes
ChallengeResponseAuthentication no
</code></pre>
","<p>①one your dir .ssh should be 0700 and the .ssh dir and his son documents's author and group is yours</p>

<p>②the authorized_keys should be 0600 or 0644</p>

<p>③maybe you copy the public authorkey content to authorized_keys isn't run, now you can try copy the authorkey to the remote host your dir .ssh and rename authorized_keys , yeah you can try it! poor English my be run</p>
","39366","<ssh><rsa><public-key>","1","0","3","2019-08-30 11:00:06","","0","1","1689695","","2018-01-18 11:46:33","2014-05-12 13:01:10",""
"16212816","Setting up OpenSSH for Windows using public key authentication","<p>I am having issues setting up OpenSSH for Windows, using public key authentication.</p>

<p>I have this working on my local desktop and can ssh with a key from Unix machines or other OpenSSH for Windows machines.</p>

<p>I have replicated the build onto a server, I can get password authentication working fine, but when I use the keys I get the following issue:</p>

<pre><code>debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug3: start over, passed a different list publickey,password,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /cygdrive/c/sshusers/jsadmint2232/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
Connection closed by 127.0.0.1
</code></pre>

<p>So for the purposes of testing, I have been just trying to SSH to localhost, but even when tried remotely I get the same issue.</p>

<p>Even more strange, is that when I have both password &amp; public key enabled in <code>sshd_config</code>, it will only attempt to use keys and then bomb out with the above message and won't even try to use password.</p>

<p>Here are the steps I have taken:</p>

<ol>
<li>Install OpenSSH for Windows</li>
<li>mkgroup -l >>..\etc\group (added local groups)</li>
<li>mkgroup -d >>..\etc\group (added domain groups)</li>
<li>mkpasswd -L -u openssh >>..\passwd (added my local user)</li>
<li>mkpasswd -D -u jsadmint2232 >>..\passwd (added my domain user)</li>
<li>Edited the homedir in passwd to point to c:\sshusers\%USER% - where %USER% is the user name</li>
<li>Enabled password auth, disabled key auth</li>
<li>Created ssh keys for both jsadmint2232 / openssh and ensured that the files were created in homedirs</li>
<li>Added authorized_keys files into .ssh dirs for each user and added keys for incoming connecting users</li>
<li>net stop opensshd / net start opensshd</li>
<li>Test Password auth works both locally and remotely</li>
<li>Updated sshd_config, to enabled key auth - restart opensshd</li>
<li>Test connection and get above error, also doesn't even try password auth?</li>
<li>Updated sshd_config, to disable password auth completely - restart opensshd</li>
<li>Test connection and still get above error</li>
</ol>

<p>It appears the server is killing the connection for some reason?</p>
","<p>I have solved the issue...</p>

<p>It is related to the account that started the service - its was using the Local System account - this was stopping it accessing the pub key and authorized_keys file.</p>

<p>Once I stopped the service and started as the user I was trying to connect into, it worked!</p>

<p>So basically, you need to start with a service account and then external users connect in as that user.</p>
","37697","<windows><ssh><public-key-encryption><openssh><public-key>","26","5","4","2019-10-21 22:23:35","16213584","0","16","1589422","","2016-06-20 04:25:57","2013-04-25 10:51:39",""
"16212816","Setting up OpenSSH for Windows using public key authentication","<p>I am having issues setting up OpenSSH for Windows, using public key authentication.</p>

<p>I have this working on my local desktop and can ssh with a key from Unix machines or other OpenSSH for Windows machines.</p>

<p>I have replicated the build onto a server, I can get password authentication working fine, but when I use the keys I get the following issue:</p>

<pre><code>debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug3: start over, passed a different list publickey,password,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /cygdrive/c/sshusers/jsadmint2232/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
Connection closed by 127.0.0.1
</code></pre>

<p>So for the purposes of testing, I have been just trying to SSH to localhost, but even when tried remotely I get the same issue.</p>

<p>Even more strange, is that when I have both password &amp; public key enabled in <code>sshd_config</code>, it will only attempt to use keys and then bomb out with the above message and won't even try to use password.</p>

<p>Here are the steps I have taken:</p>

<ol>
<li>Install OpenSSH for Windows</li>
<li>mkgroup -l >>..\etc\group (added local groups)</li>
<li>mkgroup -d >>..\etc\group (added domain groups)</li>
<li>mkpasswd -L -u openssh >>..\passwd (added my local user)</li>
<li>mkpasswd -D -u jsadmint2232 >>..\passwd (added my domain user)</li>
<li>Edited the homedir in passwd to point to c:\sshusers\%USER% - where %USER% is the user name</li>
<li>Enabled password auth, disabled key auth</li>
<li>Created ssh keys for both jsadmint2232 / openssh and ensured that the files were created in homedirs</li>
<li>Added authorized_keys files into .ssh dirs for each user and added keys for incoming connecting users</li>
<li>net stop opensshd / net start opensshd</li>
<li>Test Password auth works both locally and remotely</li>
<li>Updated sshd_config, to enabled key auth - restart opensshd</li>
<li>Test connection and get above error, also doesn't even try password auth?</li>
<li>Updated sshd_config, to disable password auth completely - restart opensshd</li>
<li>Test connection and still get above error</li>
</ol>

<p>It appears the server is killing the connection for some reason?</p>
","<p>If you are using mls-software.com's version of OpenSSH here is another note.</p>

<p>If you install using the SSHD_SERVER account and privilege separation you will be able to use public key authentication (per <a href=""http://www.mls-software.com/opensshd-pki.html"" rel=""nofollow"">http://www.mls-software.com/opensshd-pki.html</a>). However if UAC is enable you will not be successful with the install. The user(s) will not be created properly and the service will not be created. Manually trying to get these items up after the fact is very difficult. Simply disabling UAC before installation will allow the installation process to properly create the user(s) and the service. After installation you can re-enable UAC.</p>

<p>When I created the SSHD_SERVER account manually authentication succeed when using password authentication but the client termination the connection with ""/bin/bash: Operation not permitted"". Authentication with public keys was closed by the server (original error posted by Cambolie). </p>
","37697","<windows><ssh><public-key-encryption><openssh><public-key>","26","3","4","2019-10-21 22:23:35","16213584","0","16","1589422","","2016-06-20 04:25:57","2013-04-25 10:51:39",""
"16212816","Setting up OpenSSH for Windows using public key authentication","<p>I am having issues setting up OpenSSH for Windows, using public key authentication.</p>

<p>I have this working on my local desktop and can ssh with a key from Unix machines or other OpenSSH for Windows machines.</p>

<p>I have replicated the build onto a server, I can get password authentication working fine, but when I use the keys I get the following issue:</p>

<pre><code>debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug3: start over, passed a different list publickey,password,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /cygdrive/c/sshusers/jsadmint2232/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
Connection closed by 127.0.0.1
</code></pre>

<p>So for the purposes of testing, I have been just trying to SSH to localhost, but even when tried remotely I get the same issue.</p>

<p>Even more strange, is that when I have both password &amp; public key enabled in <code>sshd_config</code>, it will only attempt to use keys and then bomb out with the above message and won't even try to use password.</p>

<p>Here are the steps I have taken:</p>

<ol>
<li>Install OpenSSH for Windows</li>
<li>mkgroup -l >>..\etc\group (added local groups)</li>
<li>mkgroup -d >>..\etc\group (added domain groups)</li>
<li>mkpasswd -L -u openssh >>..\passwd (added my local user)</li>
<li>mkpasswd -D -u jsadmint2232 >>..\passwd (added my domain user)</li>
<li>Edited the homedir in passwd to point to c:\sshusers\%USER% - where %USER% is the user name</li>
<li>Enabled password auth, disabled key auth</li>
<li>Created ssh keys for both jsadmint2232 / openssh and ensured that the files were created in homedirs</li>
<li>Added authorized_keys files into .ssh dirs for each user and added keys for incoming connecting users</li>
<li>net stop opensshd / net start opensshd</li>
<li>Test Password auth works both locally and remotely</li>
<li>Updated sshd_config, to enabled key auth - restart opensshd</li>
<li>Test connection and get above error, also doesn't even try password auth?</li>
<li>Updated sshd_config, to disable password auth completely - restart opensshd</li>
<li>Test connection and still get above error</li>
</ol>

<p>It appears the server is killing the connection for some reason?</p>
","<p>I solved it by:</p>

<ol>
<li>Installing in SSHD_SERVER + privilege separation mode. I also set privilege separation to ""yes"" in the config manually. This didn't work for me for a lot time, the user didn't get created. Then it worked, I don't know why. I only went to user accounts in control panel to check that UAC is off. I also had /var/empty with full access for everyone.</li>
<li>For C:\openssh\var\empty I've set ""attributes get/set"" permissions to Everyone and myself and ""full"" permissions to .\sshd_server. I also made it the owner.</li>
</ol>
","37697","<windows><ssh><public-key-encryption><openssh><public-key>","26","1","4","2019-10-21 22:23:35","16213584","0","16","1589422","","2016-06-20 04:25:57","2013-04-25 10:51:39",""
"16212816","Setting up OpenSSH for Windows using public key authentication","<p>I am having issues setting up OpenSSH for Windows, using public key authentication.</p>

<p>I have this working on my local desktop and can ssh with a key from Unix machines or other OpenSSH for Windows machines.</p>

<p>I have replicated the build onto a server, I can get password authentication working fine, but when I use the keys I get the following issue:</p>

<pre><code>debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug3: start over, passed a different list publickey,password,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /cygdrive/c/sshusers/jsadmint2232/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
Connection closed by 127.0.0.1
</code></pre>

<p>So for the purposes of testing, I have been just trying to SSH to localhost, but even when tried remotely I get the same issue.</p>

<p>Even more strange, is that when I have both password &amp; public key enabled in <code>sshd_config</code>, it will only attempt to use keys and then bomb out with the above message and won't even try to use password.</p>

<p>Here are the steps I have taken:</p>

<ol>
<li>Install OpenSSH for Windows</li>
<li>mkgroup -l >>..\etc\group (added local groups)</li>
<li>mkgroup -d >>..\etc\group (added domain groups)</li>
<li>mkpasswd -L -u openssh >>..\passwd (added my local user)</li>
<li>mkpasswd -D -u jsadmint2232 >>..\passwd (added my domain user)</li>
<li>Edited the homedir in passwd to point to c:\sshusers\%USER% - where %USER% is the user name</li>
<li>Enabled password auth, disabled key auth</li>
<li>Created ssh keys for both jsadmint2232 / openssh and ensured that the files were created in homedirs</li>
<li>Added authorized_keys files into .ssh dirs for each user and added keys for incoming connecting users</li>
<li>net stop opensshd / net start opensshd</li>
<li>Test Password auth works both locally and remotely</li>
<li>Updated sshd_config, to enabled key auth - restart opensshd</li>
<li>Test connection and get above error, also doesn't even try password auth?</li>
<li>Updated sshd_config, to disable password auth completely - restart opensshd</li>
<li>Test connection and still get above error</li>
</ol>

<p>It appears the server is killing the connection for some reason?</p>
","<p>Following are setup steps for OpenSSH shipped with Windows 10 v.1803 (April 2018 update. See comments to this post, it might not work with 1809).</p>

<p>Server setup (elevated powershell):</p>

<ol>
<li><p>Install OpenSSH server: <code>Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0</code>.</p></li>
<li><p>Start agent and sshd services: <code>Start-Service ssh-agent; Start-Service sshd</code> (this will generate host keys and default configuration automatically in <code>$env:ProgramData\ssh</code>).</p></li>
<li><p>[Optional] Install OpenSSHUtils powershell module: <code>Install-Module -Force OpenSSHUtils</code></p></li>
</ol>

<p>Client setup (non-elevated powershell):</p>

<ol>
<li><p>Generate user key: <code>cd $env:USERPROFILE\.ssh; ssh-keygen.exe</code>, follow prompts, agree to the default suggested file location. This will create 2 files: <code>id_rsa</code> and <code>id_rsa.pub</code>;</p></li>
<li><p>[Optional] add key to authentication agent, so you don't have to enter password each time you use it: <code>ssh-add .\id_rsa</code> (or whatever file was generated);</p></li>
</ol>

<p>Server setup continued (non-elevated powershell):</p>

<ol>
<li>Log in as a user, for which public key auth to be used</li>
<li><code>cd $env:USERPROFILE; mkdir .ssh; cd .ssh; New-Item authorized_keys</code>;</li>
<li>Paste the contents of the <code>id_rsa.pub</code> file from the client to the <code>.ssh\authorized_keys</code> file from the previous step.</li>
<li>Setup permissions properly (important!!!): 

<ol>
<li>Run <code>start .</code> to open explorer with the current folder (<code>$env:USERPROFILE\.ssh</code>);</li>
<li>Right click <code>authorized_keys</code>, go to <code>Properties -&gt; Security -&gt; Advanced</code></li>
<li>Click ""Disable inheritance"";</li>
<li>Choose ""Convert inherited permissions into explicit permissions on this object"" when prompted;</li>
<li>(really, really important) Remove all permissions on file except for the <code>SYSTEM</code> and <em>yourself</em>. There must be <strong>exactly two</strong> permission entries on the file. Some guides suggest running the <code>Repair-AuthorizedKeyPermission $env:USERPROFILE\.ssh\authorized_keys</code> - this will try to add the <code>sshd</code> user to the permission list and it <em>will</em> break the authentication, so, don't do that, or at least do not agree on adding the <code>sshd</code> user). Both <code>SYSTEM</code> and yourself should have full control over the file.</li>
</ol></li>
<li>If your Windows build is 1809 or later, it is required to comment out the following lines in <code>C:\ProgramData\ssh\sshd_config</code> file. Then restart the <code>sshd</code> service.

<pre><code># Match Group administrators                                                    
#       AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys  
</code></pre></li>
</ol>

<p>Client:</p>

<ol>
<li>Run <code>ssh &lt;serverusername&gt;@&lt;serverhostname&gt;</code>. It should work at this point.</li>
</ol>

<p>Tried that with Windows 10 as server and both itself and a Debian Linux as a client.</p>
","37697","<windows><ssh><public-key-encryption><openssh><public-key>","26","73","4","2019-10-21 22:23:35","16213584","0","16","1589422","","2016-06-20 04:25:57","2013-04-25 10:51:39",""
"13539535","Extract public key from certificate in DER format","<p>I have a .cer certificate file, and need to extract the Public Key. I can only extract to PEM format. <strong>The ""outform"" parameter does nothing</strong>.</p>

<pre><code>openssl x509 -inform PEM -in certificate.cer -outform DER -pubkey -noout &gt; publickey.der
</code></pre>

<p>Is it possible to extract in DER format?</p>
","<p>Solved decoding the base64 PEM file:</p>

<pre><code>openssl x509 -in certificate.cer -pubkey -noout | openssl enc -base64 -d &gt; publickey.der
</code></pre>

<p>Any other idea is welcome.</p>
","35851","<openssl><certificate><extract><public-key><der>","16","16","1","2014-09-21 13:35:05","13539850","2","4","608639","","2014-09-21 13:35:05","2012-11-24 08:14:47","2012-11-24 11:41:51"
"9755057","Converting Strings to encryption keys and vice versa java","<p>I'm currently working on a way to convert keys into strings and vice versa. It works for the public key conversions, and converts a private key into a String. For some reason the same code won't convert a String back into a private key, which I just can't figure out. </p>

<p>The converter code is:</p>

<pre><code>import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

@SuppressWarnings(""restriction"")
public  class KeyConvert {


public static PublicKey stringToPublicKey(String s) {

    BASE64Decoder decoder = new BASE64Decoder();

    byte[] c = null;
    KeyFactory keyFact = null;
    PublicKey returnKey = null;

    try {
        c = decoder.decodeBuffer(s);
        keyFact = KeyFactory.getInstance(""DSA"", ""SUN"");
    } catch (Exception e) {
        System.out.println(""Error in Keygen"");
        e.printStackTrace();
    }


    X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(c);
    try {
        returnKey = keyFact.generatePublic(x509KeySpec);
    } catch (Exception e) {

        System.out.println(""Error in Keygen2"");
        e.printStackTrace();

    }

    return returnKey; 

}
public static PrivateKey stringToPrivateKey(String s) {

    BASE64Decoder decoder = new BASE64Decoder();
    byte[] c = null;
    KeyFactory keyFact = null;
    PrivateKey returnKey = null;

    try {

                    c = decoder.decodeBuffer(s);
        keyFact = KeyFactory.getInstance(""DSA"", ""SUN"");
    } catch (Exception e) {

        System.out.println(""Error in first try catch of stringToPrivateKey"");
        e.printStackTrace();
    }


    X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(c);
    try {   //the next line causes the crash
        returnKey = keyFact.generatePrivate(x509KeySpec);
    } catch (Exception e) {

        System.out.println(""Error in stringToPrivateKey"");
        e.printStackTrace();
    }

    return returnKey; 

}

public static String publicKeyToString(PublicKey p) {

    byte[] publicKeyBytes = p.getEncoded();
    BASE64Encoder encoder = new BASE64Encoder();
    return encoder.encode(publicKeyBytes);

}
public static String privateKeyToString(PrivateKey p) {

    byte[] privateKeyBytes = p.getEncoded();
    BASE64Encoder encoder = new BASE64Encoder();
    return encoder.encode(privateKeyBytes);
}
}
</code></pre>

<p>And the driver code I'm using is:</p>

<pre><code>import java.security.PrivateKey;
import java.security.PublicKey;

public class SQLServerTest {
public static void main(String[] args) throws Exception {


    ServerSQLManager s = new ServerSQLManager();
    ServerUser user = new ServerUser(""testUser"", ""pass123"");
    s.getKeys(user);


    PublicKey testKey = user.getPublicKey();
    System.out.println(testKey);
    PrivateKey testKey2 = user.getPrivateKey();
    System.out.println(testKey2);
}
}
</code></pre>

<p>When I run this, I get an inappropriate key specification, can anyone point me in the right direction with this? The console output is:</p>

<pre><code>Error in stringToPrivateKey


java.security.spec.InvalidKeySpecException: Inappropriate key specification
at sun.security.provider.DSAKeyFactory.engineGeneratePrivate(Unknown Source)
at java.security.KeyFactory.generatePrivate(Unknown Source)
at KeyConvert.stringToPrivateKey(KeyConvert.java:61)
at ServerSQLManager.getKeys(ServerSQLManager.java:128)
at SQLServerTest.main(SQLServerTest.java:20)

Sun DSA Public Key
     Parameters:DSA
    p:     fd7f5381 1d751229 52df4a9c 2eece4e7 f611b752 3cef4400 c31e3f80 b6512669
    455d4022 51fb593d 8d58fabf c5f5ba30 f6cb9b55 6cd7813b 801d346f f26660b7
    6b9950a5 a49f9fe8 047b1022 c24fbba9 d7feb7c6 1bf83b57 e7c6a8a6 150f04fb
    83f6d3c5 1ec30235 54135a16 9132f675 f3ae2b61 d72aeff2 2203199d d14801c7
q:     9760508f 15230bcc b292b982 a2eb840b f0581cf5
g:     f7e1a085 d69b3dde cbbcab5c 36b857b9 7994afbb fa3aea82 f9574c0b 3d078267
    5159578e bad4594f e6710710 8180b449 167123e8 4c281613 b7cf0932 8cc8a6e1
    3c167a8b 547c8d28 e0a3ae1e 2bb3a675 916ea37f 0bfa2135 62f1fb62 7a01243b
    cca4f1be a8519089 a883dfe1 5ae59f06 928b665e 807b5525 64014c3b fecf492a

    y:
    5210e849 24d90208 56802887 dfaededf 78d3e6d0 d2e59a1c fb52dde8 96147784
    b2589365 2529414c 8265b61d c1fe6d98 cee0eea3 cce1e366 cd621ca7 41e3a94f
    9c15bfcb eb860d19 21efd574 79bb5b15 8159b1cb e3fc7f76 f85a6fc1 8d65afc6
    7c4fafda 503b01b5 99752ee4 2408ad80 1d983579 b00e2120 6d735874 ccaea1c0

null
</code></pre>

<p>I'm aware I shouldn't be using the sun.misc.* library, and we're looking into the Apache version, but would still like to figure this out (also it will never be production code)</p>

<p>Any advice appreciated.</p>
","<p>Public keys are stored using a X509EncodedKeySpec as you have, but Private keys use the PKCS8EncodedKeySpec. For example like this:</p>

<pre><code>public static PrivateKey loadPrivateKey(String key64) throws GeneralSecurityException {
    byte[] clear = base64Decode(key64);
    PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(clear);
    KeyFactory fact = KeyFactory.getInstance(""DSA"");
    PrivateKey priv = fact.generatePrivate(keySpec);
    Arrays.fill(clear, (byte) 0);
    return priv;
}


public static PublicKey loadPublicKey(String stored) throws GeneralSecurityException {
    byte[] data = base64Decode(stored);
    X509EncodedKeySpec spec = new X509EncodedKeySpec(data);
    KeyFactory fact = KeyFactory.getInstance(""DSA"");
    return fact.generatePublic(spec);
}

public static String savePrivateKey(PrivateKey priv) throws GeneralSecurityException {
    KeyFactory fact = KeyFactory.getInstance(""DSA"");
    PKCS8EncodedKeySpec spec = fact.getKeySpec(priv,
            PKCS8EncodedKeySpec.class);
    byte[] packed = spec.getEncoded();
    String key64 = base64Encode(packed);

    Arrays.fill(packed, (byte) 0);
    return key64;
}


public static String savePublicKey(PublicKey publ) throws GeneralSecurityException {
    KeyFactory fact = KeyFactory.getInstance(""DSA"");
    X509EncodedKeySpec spec = fact.getKeySpec(publ,
            X509EncodedKeySpec.class);
    return base64Encode(spec.getEncoded());
}


public static void main(String[] args) throws Exception {
    KeyPairGenerator gen = KeyPairGenerator.getInstance(""DSA"");
    KeyPair pair = gen.generateKeyPair();

    String pubKey = savePublicKey(pair.getPublic());
    PublicKey pubSaved = loadPublicKey(pubKey);
    System.out.println(pair.getPublic()+""\n""+pubSaved);

    String privKey = savePrivateKey(pair.getPrivate());
    PrivateKey privSaved = loadPrivateKey(privKey);
    System.out.println(pair.getPrivate()+""\n""+privSaved);
}
</code></pre>
","35719","<java><encryption><private-key><public-key>","24","55","1","2017-03-19 13:22:59","9755391","2","13","1816580","","2017-03-19 13:22:59","2012-03-18 00:41:53",""
"7224626","How to sign string with private key","<p>How can I get the signature of a string using <code>SHA1withRSA</code> if I already have the Private Key as <code>byte[]</code> or <code>String</code>?</p>
","<p>I guess what you say is you know the key pair before hand and want to sign/verify with that.</p>

<p>Please see the following code.</p>

<pre><code>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.Signature;

import sun.misc.BASE64Encoder;

public class MainClass {
    public static void main(String[] args) throws Exception {

        KeyPair keyPair = getKeyPair();

        byte[] data = ""test"".getBytes(""UTF8"");

        Signature sig = Signature.getInstance(""SHA1WithRSA"");
        sig.initSign(keyPair.getPrivate());
        sig.update(data);
        byte[] signatureBytes = sig.sign();
        System.out.println(""Signature:"" + new BASE64Encoder().encode(signatureBytes));

        sig.initVerify(keyPair.getPublic());
        sig.update(data);

        System.out.println(sig.verify(signatureBytes));
    }

    private static KeyPair getKeyPair() throws NoSuchAlgorithmException {
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(1024);
        return kpg.genKeyPair();
    }
}
</code></pre>

<p>Here you need to change the method getKeyPair() to supply your known key pair. You may load it from a java key store [JKS].</p>

<p>You can't just have an arbitrary byte array either as your public key or private key. They should be generated in relation.</p>
","34272","<java><digital-signature><private-key><sign><public-key>","17","46","4","2019-10-18 18:17:37","7224852","3","13","878514","","2016-07-22 22:23:38","2011-08-28 23:09:40",""
"7224626","How to sign string with private key","<p>How can I get the signature of a string using <code>SHA1withRSA</code> if I already have the Private Key as <code>byte[]</code> or <code>String</code>?</p>
","<p>You first must create a public key from array of bytes </p>

<pre><code>byte publicKeyBytes[] = .... your public key in bytes ... 
KeyFactory keyFactory = KeyFactory.getInstance(""RSA""); 
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyBytes)); 
PublicKey publicKey = keyFactory.generatePublic(publicKeySpec);
</code></pre>

<p>and after using the publicKey to encrypt</p>

<pre><code>String data = ""... data to be encrypted ...."";
String alg = ""RSA/ECB/PKCS1Padding"";
Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
cipher.init(Cipher.ENCRYPT_MODE, publicKey);
byte encryptedBytes[] = cipher.doFinal(data.getBytes());
</code></pre>

<p>Now only who have the privateKey can read your data</p>

<p>@rczajka: a publicKey is a key. You can use it to sign somethig that only the owner (that have the privateKey) can read.</p>
","34272","<java><digital-signature><private-key><sign><public-key>","17","-1","4","2019-10-18 18:17:37","7224852","3","13","878514","","2016-07-22 22:23:38","2011-08-28 23:09:40",""
"7224626","How to sign string with private key","<p>How can I get the signature of a string using <code>SHA1withRSA</code> if I already have the Private Key as <code>byte[]</code> or <code>String</code>?</p>
","<pre><code>public static String sign(String samlResponseString, String keystoreFile, String keyStorePassword, String privateKeyPassword, String alias)
            throws NoSuchAlgorithmException, UnsupportedEncodingException,
            InvalidKeyException, SignatureException {
        PrivateKey pkey=getPrivateKey(  keystoreFile,   keyStorePassword, privateKeyPassword,   alias);
        String signedString = null;
        Signature signature = Signature.getInstance(""SHA256withRSA"");
        signature.initSign(pkey);
        signature.update(samlResponseString.getBytes());
        byte[] signatureBytes = signature.sign();
        byte[] encryptedByteValue = Base64.encodeBase64(signatureBytes);
        signedString = new String(encryptedByteValue, ""UTF-8"");
        System.out.println(signedString);
        return signedString;
    }
</code></pre>
","34272","<java><digital-signature><private-key><sign><public-key>","17","-1","4","2019-10-18 18:17:37","7224852","3","13","878514","","2016-07-22 22:23:38","2011-08-28 23:09:40",""
"7224626","How to sign string with private key","<p>How can I get the signature of a string using <code>SHA1withRSA</code> if I already have the Private Key as <code>byte[]</code> or <code>String</code>?</p>
","<p>I use <a href=""https://artofcode.wordpress.com/2017/05/26/rsa-signatures-in-java-with-bouncy-castle/"" rel=""nofollow noreferrer"">bouncy-castle</a> to sign data and verify it.</p>

<p>you should add maven dependency: </p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
    &lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;
    &lt;version&gt;1.56&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
    &lt;artifactId&gt;bcpkix-jdk15on&lt;/artifactId&gt;
    &lt;version&gt;1.56&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p><strong>Load RSA private or public key from a disk file into a Java object</strong></p>

<p>First, we need to be able to load RSA private or public key from a disk file into a Java object of a proper class from Bouncy Castle</p>

<pre><code>import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import org.apache.commons.lang3.Validate;
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.crypto.params.AsymmetricKeyParameter;
import org.bouncycastle.crypto.util.PrivateKeyFactory;
import org.bouncycastle.crypto.util.PublicKeyFactory;
import org.bouncycastle.openssl.PEMKeyPair;
import org.bouncycastle.openssl.PEMParser;

public class KeyUtil {

    public static AsymmetricKeyParameter loadPublicKey(InputStream is) {
        SubjectPublicKeyInfo spki = (SubjectPublicKeyInfo) readPemObject(is);
        try {
            return PublicKeyFactory.createKey(spki);
        } catch (IOException ex) {
            throw new RuntimeException(""Cannot create public key object based on input data"", ex);
        }
    }

    public static AsymmetricKeyParameter loadPrivateKey(InputStream is) {
        PEMKeyPair keyPair = (PEMKeyPair) readPemObject(is);
        PrivateKeyInfo pki = keyPair.getPrivateKeyInfo();
        try {
            return PrivateKeyFactory.createKey(pki);
        } catch (IOException ex) {
            throw new RuntimeException(""Cannot create private key object based on input data"", ex);
        }
    }

    private static Object readPemObject(InputStream is) {
        try {
            Validate.notNull(is, ""Input data stream cannot be null"");
            InputStreamReader isr = new InputStreamReader(is, ""UTF-8"");
            PEMParser pemParser = new PEMParser(isr);

            Object obj = pemParser.readObject();
            if (obj == null) {
                throw new Exception(""No PEM object found"");
            }
            return obj;
        } catch (Throwable ex) {
            throw new RuntimeException(""Cannot read PEM object from input data"", ex);
        }
    }
}
</code></pre>

<hr>

<p><strong>Creation of an RSA digital signature</strong></p>

<pre><code>        // GIVEN: InputStream prvKeyInpStream
    AsymmetricKeyParameter privKey = KeyUtil.loadPrivateKey(prvKeyInpStream);

    // GIVEN: byte[] messageBytes = ...
    RSADigestSigner signer = new RSADigestSigner(new SHA512Digest());
    signer.init(true, privKey);
    signer.update(messageBytes, 0, messageBytes.length);

    try {
        byte[] signature = signer.generateSignature();
    } catch (Exception ex) {
        throw new RuntimeException(""Cannot generate RSA signature. "" + ex.getMessage(), ex);
    }
</code></pre>

<hr>

<p><strong>Verification of an RSA digital signature</strong></p>

<pre><code>// GIVEN: InputStream pubKeyInpStream
AsymmetricKeyParameter publKey = KeyUtil.loadPublicKey(pubKeyInpStream);

// GIVEN: byte[] messageBytes
RSADigestSigner signer = new RSADigestSigner(new SHA512Digest());
signer.init(false, publKey);
signer.update(messageBytes, 0, messageBytes.length);

// GIVEN: byte[] signature - see code sample above
boolean isValidSignature = signer.verifySignature(signature);
</code></pre>
","34272","<java><digital-signature><private-key><sign><public-key>","17","0","4","2019-10-18 18:17:37","7224852","3","13","878514","","2016-07-22 22:23:38","2011-08-28 23:09:40",""
"11383898","How to create a X509 certificate using Java?","<p>I want to create a X509 certificate using Java language and then extract public key from it.</p>

<p>I have searched the internet and found many code examples, but all of them have errors (unknown variable or unknown type) or have many warnings that say something like : ""the method ... from type ... is deprecated "" etc.</p>

<p>For example, why the following code doesn't work:</p>

<pre><code>PublicKey pk;
CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
String PKstr = pk.toString();
InputStream PKstream = new ByteArrayInputStream(PKstr.getBytes());
X509Certificate pkcert = (X509Certificate)cf.generateCertificate(PKstream);
</code></pre>

<p><br>
Can anyone show me how to create a certificate using pure Java or Bouncy Castle and then get a public key from that?</p>

<p>Thanks all.</p>
","<p>Yes, with BouncyCastle, creating an X509 cert from 2 public keys (the key for the cert and the one for the CA) is done <a href=""https://github.com/pcarrier/identify/blob/master/src/main/java/identify/X509CertificateFactoryImpl.java"" rel=""noreferrer"">here</a>.</p>

<p>I turn the resulting certificate into PEM <a href=""https://github.com/pcarrier/identify/blob/master/src/main/java/identify/X509Certificate.java"" rel=""noreferrer"">here</a>.</p>
","33864","<java><certificate><x509certificate><public-key>","12","5","2","2016-01-11 16:12:25","","0","4","814702","","2016-01-11 16:12:25","2012-07-08 14:30:50",""
"11383898","How to create a X509 certificate using Java?","<p>I want to create a X509 certificate using Java language and then extract public key from it.</p>

<p>I have searched the internet and found many code examples, but all of them have errors (unknown variable or unknown type) or have many warnings that say something like : ""the method ... from type ... is deprecated "" etc.</p>

<p>For example, why the following code doesn't work:</p>

<pre><code>PublicKey pk;
CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
String PKstr = pk.toString();
InputStream PKstream = new ByteArrayInputStream(PKstr.getBytes());
X509Certificate pkcert = (X509Certificate)cf.generateCertificate(PKstream);
</code></pre>

<p><br>
Can anyone show me how to create a certificate using pure Java or Bouncy Castle and then get a public key from that?</p>

<p>Thanks all.</p>
","<p>You can also generate a certificate using only JDK classes. The disadvantage is that you have to use two classes from the sun.security.x509 package.
The code would be:</p>

<pre><code>KeyStore keyStore = ... // your keystore

// generate the certificate
// first parameter  = Algorithm
// second parameter = signrature algorithm
// third parameter  = the provider to use to generate the keys (may be null or
//                    use the constructor without provider)
CertAndKeyGen certGen = new CertAndKeyGen(""RSA"", ""SHA256WithRSA"", null);
// generate it with 2048 bits
certGen.generate(2048);

// prepare the validity of the certificate
long validSecs = (long) 365 * 24 * 60 * 60; // valid for one year
// add the certificate information, currently only valid for one year.
X509Certificate cert = certGen.getSelfCertificate(
   // enter your details according to your application
   new X500Name(""CN=My Application,O=My Organisation,L=My City,C=DE""), validSecs);

// set the certificate and the key in the keystore
keyStore.setKeyEntry(certAlias, certGen.getPrivateKey(), null, 
                        new X509Certificate[] { cert });
</code></pre>

<p>Retrieve the private key from the key store to encrypt or decrypt data.
Based on the code is from <a href=""http://www.pixelstech.net/article/1408524957-Generate-cetrificate-in-Java----3"" rel=""noreferrer"">http://www.pixelstech.net/article/1408524957-Generate-cetrificate-in-Java----3</a></p>
","33864","<java><certificate><x509certificate><public-key>","12","26","2","2016-01-11 16:12:25","","0","4","814702","","2016-01-11 16:12:25","2012-07-08 14:30:50",""
"12637171","Generate Private and Public key OpenSSL","<p>I have the following commands for OpenSSL to generate Private and Public keys:</p>

<pre><code>openssl genrsa –aes-128-cbc –out priv.pem –passout pass:[privateKeyPass] 2048
</code></pre>

<p>and</p>

<pre><code>openssl req –x509 –new –key priv.pem –passin pass:[privateKeyPass] -days 3650 –out cert.cer
</code></pre>

<p>... but they are not working.  For the first command I get the following error :</p>

<pre><code>usage: genrsa [args] [numbits]
 -des            encrypt the generated key with DES in cbc mode
 -des3           encrypt the generated key with DES in ede cbc mode (168 bit key)
 -seed
                 encrypt PEM output with cbc seed
 -aes128, -aes192, -aes256
                 encrypt PEM output with cbc aes
 -camellia128, -camellia192, -camellia256
                 encrypt PEM output with cbc camellia
 -out file       output the key to 'file
 -passout arg    output file pass phrase source
 -f4             use F4 (0x10001) for the E value
 -3              use 3 for the E value
 -engine e       use engine e, possibly a hardware device.
 -rand file:file:...
                 load the file (or the files in the directory) into
                 the random number generator
</code></pre>

<p>What am I doing wrong?</p>

<p>Edit:
I solved the first command :</p>

<pre><code>openssl genrsa -aes128 -out privkey.pem 2048
</code></pre>

<p>But now I'm getting an error with the second:</p>

<pre><code>unknown option –x509
</code></pre>
","<p>As I can see from the output, you choose wrong algorithm.
Shouldn't you pass <code>-aes128</code> instead of <code>-aes-128-cbc</code>?</p>

<p>From manual I assume that <code>-aes-128-cbc</code> is a proper parameter for <code>openssl enc</code>, but I don't know if it should work for <code>genrsa</code>.</p>
","33020","<openssl><rsa><private-key><public-key>","11","1","2","2019-07-19 07:04:38","12638394","1","2","2066657","","2019-07-19 07:04:38","2012-09-28 09:22:36",""
"12637171","Generate Private and Public key OpenSSL","<p>I have the following commands for OpenSSL to generate Private and Public keys:</p>

<pre><code>openssl genrsa –aes-128-cbc –out priv.pem –passout pass:[privateKeyPass] 2048
</code></pre>

<p>and</p>

<pre><code>openssl req –x509 –new –key priv.pem –passin pass:[privateKeyPass] -days 3650 –out cert.cer
</code></pre>

<p>... but they are not working.  For the first command I get the following error :</p>

<pre><code>usage: genrsa [args] [numbits]
 -des            encrypt the generated key with DES in cbc mode
 -des3           encrypt the generated key with DES in ede cbc mode (168 bit key)
 -seed
                 encrypt PEM output with cbc seed
 -aes128, -aes192, -aes256
                 encrypt PEM output with cbc aes
 -camellia128, -camellia192, -camellia256
                 encrypt PEM output with cbc camellia
 -out file       output the key to 'file
 -passout arg    output file pass phrase source
 -f4             use F4 (0x10001) for the E value
 -3              use 3 for the E value
 -engine e       use engine e, possibly a hardware device.
 -rand file:file:...
                 load the file (or the files in the directory) into
                 the random number generator
</code></pre>

<p>What am I doing wrong?</p>

<p>Edit:
I solved the first command :</p>

<pre><code>openssl genrsa -aes128 -out privkey.pem 2048
</code></pre>

<p>But now I'm getting an error with the second:</p>

<pre><code>unknown option –x509
</code></pre>
","<p>'genrsa' generates just an RSA key.</p>

<p>'req' then uses that key to make a x509 style request.</p>

<p>If you just need a rsa key pair - use genrsa.</p>

<p>If you need a keypair and a signed x509 request you use 'genrsa' and then 'req'.</p>

<p>Optionally 'req' can also generate that key for you (i.e. it encapsulates the 'genrsa' command (and the gendh). </p>

<p>So:</p>

<pre><code> openssl genrsa -aes128 -out privkey.pem 2048
 openssl req -new -x509 -key privkey.pem 
</code></pre>

<p>is almost equivalent to</p>

<pre><code> openssl req -new -x509 -keyout privkey.pem  -newkey rsa:2048
</code></pre>

<p>except that unlike 'genrsa', 'req' does not allow you to specify aes128 as the encryption.</p>

<p>So in a lot of enterprise settings one does it in two steps as to get sufficient control over the key encryption applied.</p>
","33020","<openssl><rsa><private-key><public-key>","11","16","2","2019-07-19 07:04:38","12638394","1","2","2066657","","2019-07-19 07:04:38","2012-09-28 09:22:36",""
"29583969","How do I send someone my SSH public key?","<p>I need to send my SSH Public Key to one of my customers, but I am not quite sure how to do this. I have already created a SSH key pair on my computer, but now I am stuck. </p>
","<p>If you generated a key pair you should have two files <code>id_rsa</code> and <code>id_rsa.pub</code> (note that id_rsa may be replaced by an other name if you specified it) 
You just have to send your customer the file with the .pub extension </p>
","32689","<file><ssh><send><ssh-keys><public-key>","28","15","4","2019-02-25 23:12:24","","1","6","","","","2015-04-11 22:52:10","2019-02-25 23:58:23"
"29583969","How do I send someone my SSH public key?","<p>I need to send my SSH Public Key to one of my customers, but I am not quite sure how to do this. I have already created a SSH key pair on my computer, but now I am stuck. </p>
","<p>It's a public key, so theoretically, the channel you use does not have to be encrypted.</p>

<p>Yet, it has to be a channel that prevents a potential attacker from tampering with the key/message. In the worst case the attacker might replace your public key with his own public key, potentially gaining an access instead of you.</p>

<p>So in practice, the best is to use an encrypted channel anyway. At least make sure that your email client uses an encrypted connection to the mail server; and hope that your mail server dispatches the email further using encrypted connection too.</p>
","32689","<file><ssh><send><ssh-keys><public-key>","28","2","4","2019-02-25 23:12:24","","1","6","","","","2015-04-11 22:52:10","2019-02-25 23:58:23"
"29583969","How do I send someone my SSH public key?","<p>I need to send my SSH Public Key to one of my customers, but I am not quite sure how to do this. I have already created a SSH key pair on my computer, but now I am stuck. </p>
","<p>By default your SSH public key on Unix/Linux/OS X is located in your HOME directory in <code>.ssh/</code> folder in <code>id_rsa.pub</code> file. So you can send that file without any issues, as your private key is in <code>id_rsa</code>, so your credentials are not exposed.</p>

<p>So basically either send <code>~/.ssh/id_rsa.pub</code> file or execute in the terminal:</p>

<pre><code>ssh-add -L
</code></pre>

<p>command and copy the printed line, so you can paste into your e-mail.</p>
","32689","<file><ssh><send><ssh-keys><public-key>","28","1","4","2019-02-25 23:12:24","","1","6","","","","2015-04-11 22:52:10","2019-02-25 23:58:23"
"29583969","How do I send someone my SSH public key?","<p>I need to send my SSH Public Key to one of my customers, but I am not quite sure how to do this. I have already created a SSH key pair on my computer, but now I am stuck. </p>
","<p>This is way late but could be easier then just sending hidden files if you are on a unix based system.</p>

<p>Just do: </p>

<pre><code>pbcopy &lt; ~/.ssh/id_rsa.pub
</code></pre>

<p>This will copy your public key to your clipboard. So basically just do a paste anywhere you want to paste your key for sending it. </p>
","32689","<file><ssh><send><ssh-keys><public-key>","28","10","4","2019-02-25 23:12:24","","1","6","","","","2015-04-11 22:52:10","2019-02-25 23:58:23"
"2231514","Setup SFTP to use public-key authentication","<p>How do you setup server to server SFTP to use public-key authentication instead of user account and password?</p>
","<p>In the client you need to generate its public key and add it to server's authorized key list.</p>

<p>The following are the commands you can use.</p>

<p><strong>On client machine</strong></p>

<pre><code>ssh-keygen -t dsa -f id_dsa
mv id_dsa* ~/.ssh/
scp ~/.ssh/id_dsa.pub USER_NAME@SERVER:~/.ssh/HOST_NAME.key
</code></pre>

<p><strong>On the server</strong></p>

<pre><code>cat ~/.ssh/HOST_NAME.key &gt;&gt; ~/.ssh/authorized_keys2
</code></pre>
","32389","<linux><unix><authentication><sftp><public-key>","10","10","3","2018-08-23 19:31:00","2231626","0","2","","user290","2010-02-09 19:14:52","2010-02-09 18:38:38",""
"2231514","Setup SFTP to use public-key authentication","<p>How do you setup server to server SFTP to use public-key authentication instead of user account and password?</p>
","<p>Remember to</p>

<pre><code>chmod 700 .ssh
</code></pre>

<p>and also</p>

<pre><code>chmod 600 authorized_keys
</code></pre>
","32389","<linux><unix><authentication><sftp><public-key>","10","1","3","2018-08-23 19:31:00","2231626","0","2","","user290","2010-02-09 19:14:52","2010-02-09 18:38:38",""
"2231514","Setup SFTP to use public-key authentication","<p>How do you setup server to server SFTP to use public-key authentication instead of user account and password?</p>
","<p>This is a solution for windows users</p>

<p>I had a similar issue on windows so I used Putty from <a href=""http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html"" rel=""nofollow"">http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html</a></p>

<p>If you need to generate a public key then use:
<a href=""http://the.earth.li/~sgtatham/putty/latest/x86/puttygen.exe"" rel=""nofollow"">http://the.earth.li/~sgtatham/putty/latest/x86/puttygen.exe</a></p>

<p>Then, when you want to automate a batch to download from the FTP server the Pageant in order to load the private key into session
<a href=""http://the.earth.li/~sgtatham/putty/latest/x86/pageant.exe"" rel=""nofollow"">http://the.earth.li/~sgtatham/putty/latest/x86/pageant.exe</a></p>

<p>Then use the PSFTP to connect and perform actions
<a href=""http://the.earth.li/~sgtatham/putty/latest/x86/psftp.exe"" rel=""nofollow"">http://the.earth.li/~sgtatham/putty/latest/x86/psftp.exe</a></p>

<p>So here is sample code for the batch:</p>

<pre><code>!--Loading the key to session--!
@C:\pageant.exe ""C:\privatekey.ppk""
!--Calling the PSFTP.exe with the uaser and sftp address + command list file--!
@C:\psftp user@your.server.address -b C:\sftp_cmd.txt
</code></pre>

<p>Command list file (sftp_cmd.txt) will like like this:</p>

<pre><code>mget ""*.*"" !--downloading every thing
!--more commands can follow here
close
</code></pre>

<p>Now, all you need to to schedule it in scheduled tasks
*I wish it was simple as unix's cron job....</p>
","32389","<linux><unix><authentication><sftp><public-key>","10","1","3","2018-08-23 19:31:00","2231626","0","2","","user290","2010-02-09 19:14:52","2010-02-09 18:38:38",""
"20617660","SSH: ""Bad passphrase"" after generation of public key","<p>When I execute these commands (setting a passphrase, after the first)...</p>

<pre><code>$ ssh-keygen -t dsa
$ chmod 600 my_key
$ chmod 600 my_key.pub
</code></pre>

<p>...and then, to test the passphrase...</p>

<pre><code>$ ssh-add my_key.pub
</code></pre>

<p>...I keep getting:</p>

<pre><code>Bad passphrase, try again for my_key.pub:
Bad passphrase, try again for my_key.pub:
Bad passphrase, try again for my_key.pub:
Bad passphrase, try again for my_key.pub:
...
</code></pre>

<p>What am I doing wrong?</p>
","<p>You're trying to add public key to the agent, that one isn't pass-protected, the private one is. Try adding your private key and it should work.</p>
","29973","<ssh><public-key><passphrase>","21","63","1","2018-02-22 08:10:31","20617939","2","4","","","","2013-12-16 18:03:02",""
"2951011","How to let TortoiseHg (Mercurial) on Windows use the Private Key file generated (by Puttygen)?","<p>I have used Puttygen to create a public and a private key, and then is ready to let TortoiseHg on Windows 7 do a clone by going to </p>

<pre><code>ssh://somebody@code.somewhere.com/somecode
</code></pre>

<p>but there seems to be no where to add the private key to TortoiseHg?  (or even just the mercurial command line)</p>

<p>The file is already some where on hard disk as somefile.ppk   Does someone know how to add it?</p>
","<p>Either add the following to the [ui]-section of the mercurial.ini in your home directory (assuming your key is in ""C:\Users\UserName\mykey.ppk""):</p>

<pre><code>[ui]
ssh = tortoiseplink.exe -ssh -i ""C:\Users\UserName\mykey.ppk""
</code></pre>

<p>or use Pageant, found in the TortoiseHg installation path (e.g. C:\Program Files\TortoiseHg\Pageant.exe). Start it, double click the taskbar-icon that appears, and add the .ppk-file.</p>
","27232","<mercurial><ssh><tortoisehg><public-key>","53","78","2","2019-07-27 22:27:35","2952371","1","21","","","","2010-06-01 15:24:12",""
"2951011","How to let TortoiseHg (Mercurial) on Windows use the Private Key file generated (by Puttygen)?","<p>I have used Puttygen to create a public and a private key, and then is ready to let TortoiseHg on Windows 7 do a clone by going to </p>

<pre><code>ssh://somebody@code.somewhere.com/somecode
</code></pre>

<p>but there seems to be no where to add the private key to TortoiseHg?  (or even just the mercurial command line)</p>

<p>The file is already some where on hard disk as somefile.ppk   Does someone know how to add it?</p>
","<p>need an ssh key generator first</p>

<ol>
<li>cmd: ssh-keygen -t rsa</li>
<li>open PuTTY Key Generator</li>
<li>Conversions >  import key: open the id_rsa file in C:\Users\.ssh   (you may have to create the folder !must run cmd as Admin!)</li>
<li>Save the imported file id_rsa as id_rsa.ppk</li>
<li>Open Pageant.exe in TortoiseHG folder</li>
<li>It will show up in Taskbar</li>
<li>Right click and click add keys</li>
<li>Finally add your new ppk file</li>
</ol>

<p>Oh right copy the contents of id_rsa.pub to hg host</p>
","27232","<mercurial><ssh><tortoisehg><public-key>","53","0","2","2019-07-27 22:27:35","2952371","1","21","","","","2010-06-01 15:24:12",""
"7968656","Why is a cap deploy giving Permission denied (publickey)?","<p>Ok, I'm confused about something... I am able to commit to my github repository just fine, but when I try to do a <code>cap deploy</code> from my local folder to my staging server I get <code>Permission denied (publickey).</code></p>

<p>If I run <code>ssh git@github.com</code> I actually get an error <code>PTY allocation request failed on channel 0</code></p>

<p>So something here is wrong.</p>

<p>If I run <code>ssh -vT git@github.com</code> I get:</p>

<pre><code>OpenSSH_5.6p1, OpenSSL 0.9.8r 8 Feb 2011
debug1: Reading configuration data /Users/myuser/.ssh/config
debug1: Reading configuration data /etc/ssh_config
debug1: Applying options for *
debug1: Connecting to github.com [207.97.227.239] port 22.
debug1: Connection established.
debug1: identity file /Users/myuser/.ssh/id_rsa type 1
debug1: identity file /Users/myuser/.ssh/id_rsa-cert type -1
debug1: identity file /Users/myuser/.ssh/id_dsa type -1
debug1: identity file /Users/myuser/.ssh/id_dsa-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.1p1 Debian-5github2
debug1: match: OpenSSH_5.1p1 Debian-5github2 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.6
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/myuser/.ssh/known_hosts:2
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/myuser/.ssh/github_rsa
debug1: Remote: Forced command: gerve technomad
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Server accepts key: pkalg ssh-rsa blen 279
debug1: Remote: Forced command: gerve technomad
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Authentication succeeded (publickey).
Authenticated to github.com ([207.97.227.239]:22).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: Sending environment.
debug1: Sending env LANG = en_US.UTF-8
debug1: client_input_channel_req: channel 0 rtype exit-status reply 0
debug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0
Hi technomad! You've successfully authenticated, but GitHub does not provide shell access.
debug1: channel 0: free: client-session, nchannels 1
Transferred: sent 2384, received 2888 bytes, in 0.1 seconds
Bytes per second: sent 42630.8, received 51643.3
debug1: Exit status 1
</code></pre>

<p>My keys are in the ~/.ssh folder, so whats the issue, and why am i able to commit to the repository if there is a key issue??</p>

<p><strong>UPDATE:</strong>
I did notice something when I went into my .ssh folder. There is a new keypair that was created when I installed Github for Mac... why couldn't it just use my existing keypair i don't know.</p>
","<p>I would make sure your staging server has ssh access to github. Run the same command ""ssh -vT git@github.com"" via a terminal on your staging server; this will help determine if it is ssh problem on the remote machine.</p>
","26989","<git><ssh><capistrano><ssh-keys><public-key>","40","19","6","2017-06-19 11:18:55","7970865","0","25","173909","","2011-11-01 15:47:07","2011-11-01 15:18:44",""
"7968656","Why is a cap deploy giving Permission denied (publickey)?","<p>Ok, I'm confused about something... I am able to commit to my github repository just fine, but when I try to do a <code>cap deploy</code> from my local folder to my staging server I get <code>Permission denied (publickey).</code></p>

<p>If I run <code>ssh git@github.com</code> I actually get an error <code>PTY allocation request failed on channel 0</code></p>

<p>So something here is wrong.</p>

<p>If I run <code>ssh -vT git@github.com</code> I get:</p>

<pre><code>OpenSSH_5.6p1, OpenSSL 0.9.8r 8 Feb 2011
debug1: Reading configuration data /Users/myuser/.ssh/config
debug1: Reading configuration data /etc/ssh_config
debug1: Applying options for *
debug1: Connecting to github.com [207.97.227.239] port 22.
debug1: Connection established.
debug1: identity file /Users/myuser/.ssh/id_rsa type 1
debug1: identity file /Users/myuser/.ssh/id_rsa-cert type -1
debug1: identity file /Users/myuser/.ssh/id_dsa type -1
debug1: identity file /Users/myuser/.ssh/id_dsa-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.1p1 Debian-5github2
debug1: match: OpenSSH_5.1p1 Debian-5github2 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.6
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/myuser/.ssh/known_hosts:2
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/myuser/.ssh/github_rsa
debug1: Remote: Forced command: gerve technomad
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Server accepts key: pkalg ssh-rsa blen 279
debug1: Remote: Forced command: gerve technomad
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Authentication succeeded (publickey).
Authenticated to github.com ([207.97.227.239]:22).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: Sending environment.
debug1: Sending env LANG = en_US.UTF-8
debug1: client_input_channel_req: channel 0 rtype exit-status reply 0
debug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0
Hi technomad! You've successfully authenticated, but GitHub does not provide shell access.
debug1: channel 0: free: client-session, nchannels 1
Transferred: sent 2384, received 2888 bytes, in 0.1 seconds
Bytes per second: sent 42630.8, received 51643.3
debug1: Exit status 1
</code></pre>

<p>My keys are in the ~/.ssh folder, so whats the issue, and why am i able to commit to the repository if there is a key issue??</p>

<p><strong>UPDATE:</strong>
I did notice something when I went into my .ssh folder. There is a new keypair that was created when I installed Github for Mac... why couldn't it just use my existing keypair i don't know.</p>
","<p>I met with the same problem after installing GitHub for Mac OS X. The application created a new ssh private key in ~/.ssh/github_rsa and added it to the ssh authentication agent.</p>

<p>Check which key the ssh auth agent has cached:</p>

<pre><code>$ ssh-add -l
2048 63:0c:a6:51:63:c1:35:76:5d:02:77:97:39:48:0e:4a /Users/jiangxin/.ssh/github_rsa (RSA)
</code></pre>

<p>Whenever you connect to github.com or another ssh services, this key is used first.</p>

<p>Clear the cached keys from ssh-agent using this command:</p>

<pre><code>$ ssh-add -D
</code></pre>

<p>Now the ssh client should work normally, using the key defined in ~/.ssh/config or ~/.ssh/id_rsa.</p>
","26989","<git><ssh><capistrano><ssh-keys><public-key>","40","2","6","2017-06-19 11:18:55","7970865","0","25","173909","","2011-11-01 15:47:07","2011-11-01 15:18:44",""
"7968656","Why is a cap deploy giving Permission denied (publickey)?","<p>Ok, I'm confused about something... I am able to commit to my github repository just fine, but when I try to do a <code>cap deploy</code> from my local folder to my staging server I get <code>Permission denied (publickey).</code></p>

<p>If I run <code>ssh git@github.com</code> I actually get an error <code>PTY allocation request failed on channel 0</code></p>

<p>So something here is wrong.</p>

<p>If I run <code>ssh -vT git@github.com</code> I get:</p>

<pre><code>OpenSSH_5.6p1, OpenSSL 0.9.8r 8 Feb 2011
debug1: Reading configuration data /Users/myuser/.ssh/config
debug1: Reading configuration data /etc/ssh_config
debug1: Applying options for *
debug1: Connecting to github.com [207.97.227.239] port 22.
debug1: Connection established.
debug1: identity file /Users/myuser/.ssh/id_rsa type 1
debug1: identity file /Users/myuser/.ssh/id_rsa-cert type -1
debug1: identity file /Users/myuser/.ssh/id_dsa type -1
debug1: identity file /Users/myuser/.ssh/id_dsa-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.1p1 Debian-5github2
debug1: match: OpenSSH_5.1p1 Debian-5github2 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.6
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/myuser/.ssh/known_hosts:2
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/myuser/.ssh/github_rsa
debug1: Remote: Forced command: gerve technomad
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Server accepts key: pkalg ssh-rsa blen 279
debug1: Remote: Forced command: gerve technomad
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Authentication succeeded (publickey).
Authenticated to github.com ([207.97.227.239]:22).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: Sending environment.
debug1: Sending env LANG = en_US.UTF-8
debug1: client_input_channel_req: channel 0 rtype exit-status reply 0
debug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0
Hi technomad! You've successfully authenticated, but GitHub does not provide shell access.
debug1: channel 0: free: client-session, nchannels 1
Transferred: sent 2384, received 2888 bytes, in 0.1 seconds
Bytes per second: sent 42630.8, received 51643.3
debug1: Exit status 1
</code></pre>

<p>My keys are in the ~/.ssh folder, so whats the issue, and why am i able to commit to the repository if there is a key issue??</p>

<p><strong>UPDATE:</strong>
I did notice something when I went into my .ssh folder. There is a new keypair that was created when I installed Github for Mac... why couldn't it just use my existing keypair i don't know.</p>
","<p>I had to do the following:</p>

<pre><code>   $ ssh-add -D   #remove existing identities
   $ ssh-agent    #copy the lines &amp; run them
   $ ssh-add      #uses the output from above
</code></pre>
","26989","<git><ssh><capistrano><ssh-keys><public-key>","40","115","6","2017-06-19 11:18:55","7970865","0","25","173909","","2011-11-01 15:47:07","2011-11-01 15:18:44",""
"7968656","Why is a cap deploy giving Permission denied (publickey)?","<p>Ok, I'm confused about something... I am able to commit to my github repository just fine, but when I try to do a <code>cap deploy</code> from my local folder to my staging server I get <code>Permission denied (publickey).</code></p>

<p>If I run <code>ssh git@github.com</code> I actually get an error <code>PTY allocation request failed on channel 0</code></p>

<p>So something here is wrong.</p>

<p>If I run <code>ssh -vT git@github.com</code> I get:</p>

<pre><code>OpenSSH_5.6p1, OpenSSL 0.9.8r 8 Feb 2011
debug1: Reading configuration data /Users/myuser/.ssh/config
debug1: Reading configuration data /etc/ssh_config
debug1: Applying options for *
debug1: Connecting to github.com [207.97.227.239] port 22.
debug1: Connection established.
debug1: identity file /Users/myuser/.ssh/id_rsa type 1
debug1: identity file /Users/myuser/.ssh/id_rsa-cert type -1
debug1: identity file /Users/myuser/.ssh/id_dsa type -1
debug1: identity file /Users/myuser/.ssh/id_dsa-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.1p1 Debian-5github2
debug1: match: OpenSSH_5.1p1 Debian-5github2 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.6
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/myuser/.ssh/known_hosts:2
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/myuser/.ssh/github_rsa
debug1: Remote: Forced command: gerve technomad
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Server accepts key: pkalg ssh-rsa blen 279
debug1: Remote: Forced command: gerve technomad
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Authentication succeeded (publickey).
Authenticated to github.com ([207.97.227.239]:22).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: Sending environment.
debug1: Sending env LANG = en_US.UTF-8
debug1: client_input_channel_req: channel 0 rtype exit-status reply 0
debug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0
Hi technomad! You've successfully authenticated, but GitHub does not provide shell access.
debug1: channel 0: free: client-session, nchannels 1
Transferred: sent 2384, received 2888 bytes, in 0.1 seconds
Bytes per second: sent 42630.8, received 51643.3
debug1: Exit status 1
</code></pre>

<p>My keys are in the ~/.ssh folder, so whats the issue, and why am i able to commit to the repository if there is a key issue??</p>

<p><strong>UPDATE:</strong>
I did notice something when I went into my .ssh folder. There is a new keypair that was created when I installed Github for Mac... why couldn't it just use my existing keypair i don't know.</p>
","<p>The error is because, ssh-add does not know how to talk with the authentication agent.
The problem can be solved by setting SSH_AUTH_SOCK environment variable.</p>

<p>If you run ssh-agent you should get some output like this:</p>

<pre><code>SSH_AUTH_SOCK=/tmp/ssh-agVZL13989/agent.13989; export SSH_AUTH_SOCK;
SSH_AGENT_PID=13990; export SSH_AGENT_PID;
echo Agent pid 13990;SSH_AUTH_SOCK=/tmp/ssh-agVZL13989/agent.13989; export SSH_AUTH_SOCK;
SSH_AGENT_PID=13990; export SSH_AGENT_PID;
echo Agent pid 13990;
</code></pre>

<p>Execute this :</p>

<pre><code>eval $(ssh-agent)
</code></pre>

<p>And then :</p>

<pre><code>ssh-add -D
</code></pre>
","26989","<git><ssh><capistrano><ssh-keys><public-key>","40","0","6","2017-06-19 11:18:55","7970865","0","25","173909","","2011-11-01 15:47:07","2011-11-01 15:18:44",""
"7968656","Why is a cap deploy giving Permission denied (publickey)?","<p>Ok, I'm confused about something... I am able to commit to my github repository just fine, but when I try to do a <code>cap deploy</code> from my local folder to my staging server I get <code>Permission denied (publickey).</code></p>

<p>If I run <code>ssh git@github.com</code> I actually get an error <code>PTY allocation request failed on channel 0</code></p>

<p>So something here is wrong.</p>

<p>If I run <code>ssh -vT git@github.com</code> I get:</p>

<pre><code>OpenSSH_5.6p1, OpenSSL 0.9.8r 8 Feb 2011
debug1: Reading configuration data /Users/myuser/.ssh/config
debug1: Reading configuration data /etc/ssh_config
debug1: Applying options for *
debug1: Connecting to github.com [207.97.227.239] port 22.
debug1: Connection established.
debug1: identity file /Users/myuser/.ssh/id_rsa type 1
debug1: identity file /Users/myuser/.ssh/id_rsa-cert type -1
debug1: identity file /Users/myuser/.ssh/id_dsa type -1
debug1: identity file /Users/myuser/.ssh/id_dsa-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.1p1 Debian-5github2
debug1: match: OpenSSH_5.1p1 Debian-5github2 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.6
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/myuser/.ssh/known_hosts:2
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/myuser/.ssh/github_rsa
debug1: Remote: Forced command: gerve technomad
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Server accepts key: pkalg ssh-rsa blen 279
debug1: Remote: Forced command: gerve technomad
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Authentication succeeded (publickey).
Authenticated to github.com ([207.97.227.239]:22).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: Sending environment.
debug1: Sending env LANG = en_US.UTF-8
debug1: client_input_channel_req: channel 0 rtype exit-status reply 0
debug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0
Hi technomad! You've successfully authenticated, but GitHub does not provide shell access.
debug1: channel 0: free: client-session, nchannels 1
Transferred: sent 2384, received 2888 bytes, in 0.1 seconds
Bytes per second: sent 42630.8, received 51643.3
debug1: Exit status 1
</code></pre>

<p>My keys are in the ~/.ssh folder, so whats the issue, and why am i able to commit to the repository if there is a key issue??</p>

<p><strong>UPDATE:</strong>
I did notice something when I went into my .ssh folder. There is a new keypair that was created when I installed Github for Mac... why couldn't it just use my existing keypair i don't know.</p>
","<p>I get this error sometimes and I just type <code>$ ssh-add -k</code> to add my identity and then it works. Not sure exactly why this works or why the error message doesn't suggest it, but it always comes in to the rescue!</p>
","26989","<git><ssh><capistrano><ssh-keys><public-key>","40","32","6","2017-06-19 11:18:55","7970865","0","25","173909","","2011-11-01 15:47:07","2011-11-01 15:18:44",""
"7968656","Why is a cap deploy giving Permission denied (publickey)?","<p>Ok, I'm confused about something... I am able to commit to my github repository just fine, but when I try to do a <code>cap deploy</code> from my local folder to my staging server I get <code>Permission denied (publickey).</code></p>

<p>If I run <code>ssh git@github.com</code> I actually get an error <code>PTY allocation request failed on channel 0</code></p>

<p>So something here is wrong.</p>

<p>If I run <code>ssh -vT git@github.com</code> I get:</p>

<pre><code>OpenSSH_5.6p1, OpenSSL 0.9.8r 8 Feb 2011
debug1: Reading configuration data /Users/myuser/.ssh/config
debug1: Reading configuration data /etc/ssh_config
debug1: Applying options for *
debug1: Connecting to github.com [207.97.227.239] port 22.
debug1: Connection established.
debug1: identity file /Users/myuser/.ssh/id_rsa type 1
debug1: identity file /Users/myuser/.ssh/id_rsa-cert type -1
debug1: identity file /Users/myuser/.ssh/id_dsa type -1
debug1: identity file /Users/myuser/.ssh/id_dsa-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.1p1 Debian-5github2
debug1: match: OpenSSH_5.1p1 Debian-5github2 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.6
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/myuser/.ssh/known_hosts:2
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/myuser/.ssh/github_rsa
debug1: Remote: Forced command: gerve technomad
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Server accepts key: pkalg ssh-rsa blen 279
debug1: Remote: Forced command: gerve technomad
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Authentication succeeded (publickey).
Authenticated to github.com ([207.97.227.239]:22).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: Sending environment.
debug1: Sending env LANG = en_US.UTF-8
debug1: client_input_channel_req: channel 0 rtype exit-status reply 0
debug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0
Hi technomad! You've successfully authenticated, but GitHub does not provide shell access.
debug1: channel 0: free: client-session, nchannels 1
Transferred: sent 2384, received 2888 bytes, in 0.1 seconds
Bytes per second: sent 42630.8, received 51643.3
debug1: Exit status 1
</code></pre>

<p>My keys are in the ~/.ssh folder, so whats the issue, and why am i able to commit to the repository if there is a key issue??</p>

<p><strong>UPDATE:</strong>
I did notice something when I went into my .ssh folder. There is a new keypair that was created when I installed Github for Mac... why couldn't it just use my existing keypair i don't know.</p>
","<p>If you are using MAC. Maybe your ssh key is not added to authentication agent. Following command will do that</p>

<pre><code>ssh-add path_to_private_key
</code></pre>

<p>for example</p>

<pre><code>ssh-add ~/.ssh/id_rsa
</code></pre>
","26989","<git><ssh><capistrano><ssh-keys><public-key>","40","1","6","2017-06-19 11:18:55","7970865","0","25","173909","","2011-11-01 15:47:07","2011-11-01 15:18:44",""
"25622894","java.security.InvalidKeyException: invalid key format on generating RSA public key","<p>Background:</p>

<p>I have created an applet to extract public key of a certificate extracted from a smart card.
This public key is then stored in database.
The private key of certificate is used to sign data and the public key is then used to verify the signature.
Code for extracting public key from certificate:</p>

<pre><code>private byte[] getPublicKey(KeyStore paramKeyStore)
    throws GeneralSecurityException {
  Enumeration localEnumeration = paramKeyStore.aliases();

  if (localEnumeration.hasMoreElements()) {
    String element = (String) localEnumeration.nextElement();
    Certificate[] arrayOfCertificate =
        paramKeyStore.getCertificateChain(element);
    byte[] publicKeyByteArray =
        arrayOfCertificate[0].getPublicKey().getEncoded();

    return publicKeyByteArray;
  }
  throw new KeyStoreException(""The keystore is empty!"");
}
</code></pre>

<p>This publicKeyByteArray is then storeed in database as BLOB after converting to string using bytes2String method:</p>

<pre><code>private static String bytes2String(byte[] bytes) {
  StringBuilder string = new StringBuilder();
  for (byte b : bytes) {
    String hexString = Integer.toHexString(0x00FF &amp; b);
    string.append(hexString.length() == 1 ? ""0"" + hexString : hexString);
  }
  return string.toString();
}
</code></pre>

<p>The content of the BLOB(key) saved in database is:</p>

<pre><code>30820122300d06092a864886f70d01010105000382010f003082010a02820101009bd307e4fc38adae43b93ba1152a4d6dbf82689336bb4e3af5160d16bf1599fe070f7acbfefd93e866e52043de1620bd57d9a3f244fb4e6ef758d70d19e0be86e1b12595af748fbc00aad9009bd61120d3348079b00af8462de46e254f6d2b092cbc85c7f6194c6c37f8955ef7b9b8937a7e9999541dbbea8c1b2349c712565482dbd573cd9b7ec56a59e7683b4c246620cf0d8148ed38da937f1e4e930eb05d5b4c6054712928fa59870763468c07e71265525e1e40839b51c833579f5742d3c8e0588766e3ed6deef1593b10baad0a2abea34734de1505d37710e1cfaa4225b562b96a6a4e87fecb1d627d4c61916e543eba87054ee9212e8183125cdb49750203010001
</code></pre>

<p>After reading the stored public key byte[] from database, I try to convert it back to Public Key using following code: </p>

<pre><code>Cipher rsa;
rsa = Cipher.getInstance(""RSA"");
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(pkey.getBytes());
PublicKey pk = keyFactory.generatePublic(publicKeySpec);
rsa.init(Cipher.DECRYPT_MODE, pk);
byte[] cipherDecrypt = rsa.doFinal(encryptedText.getBytes());
</code></pre>

<p>but it gives following error:</p>

<pre><code>Caused by: java.security.InvalidKeyException: invalid key format
    at sun.security.x509.X509Key.decode(X509Key.java:387)
    at sun.security.x509.X509Key.decode(X509Key.java:403)
    at sun.security.rsa.RSAPublicKeyImpl.&lt;init&gt;(RSAPublicKeyImpl.java:83)
    at sun.security.rsa.RSAKeyFactory.generatePublic(RSAKeyFactory.java:298)
    at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:201)
</code></pre>

<p>Please suggest the reason and resolution for this issue.</p>
","<p>You must have an error in the way you read the key back from the database. The following code works just fine for me:</p>

<pre><code>String key = ""3082012230...""; // full key omitted for brevity
byte[] derPublicKey = DatatypeConverter.parseHexBinary(key);

KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(derPublicKey);
keyFactory.generatePublic(publicKeySpec);
</code></pre>

<p>I would guess, based on the use of <code>pkey.getBytes()</code>, that you've simply tried to get the bytes from the string rather than hex-decoding it.</p>
","26823","<java><rsa><public-key-encryption><x509><public-key>","3","5","1","2014-09-02 12:25:27","25623417","4","5","474189","","2014-09-02 12:22:58","2014-09-02 11:59:33",""
"338578","Any tutorials on public key encryption in java?","<p>I've been able find information on symmetric encryption and hashing but I've been having quite a bit of trouble finding much information on any sort of public key encryption for java. What I'd like to do is make a very simple proof of concept program that takes a string ( or a file I suppose), encrypts it with a public key and then decrypts it with a private key.</p>

<p>Any tutorial links or examples would be appreciated. I just want to make something demonstrating how you can use public key encryption in Java.</p>
","<p>There are quite a few resources on the web about that. Basically it turns around the KeyPairGenerator class.</p>

<p>See <a href=""http://www.informit.com/articles/article.aspx?p=170967&amp;seqNum=4"" rel=""noreferrer"">http://www.informit.com/articles/article.aspx?p=170967&amp;seqNum=4</a> for an example program.</p>
","26721","<java><public-key><encryption-asymmetric>","16","12","2","2016-05-19 12:53:30","338603","0","4","39057","Loki","2008-12-03 20:34:22","2008-12-03 20:28:18","2016-05-20 19:09:31"
"338578","Any tutorials on public key encryption in java?","<p>I've been able find information on symmetric encryption and hashing but I've been having quite a bit of trouble finding much information on any sort of public key encryption for java. What I'd like to do is make a very simple proof of concept program that takes a string ( or a file I suppose), encrypts it with a public key and then decrypts it with a private key.</p>

<p>Any tutorial links or examples would be appreciated. I just want to make something demonstrating how you can use public key encryption in Java.</p>
","<p>Normally, you use public key encryption to encrypt a symmetric key, in part because public key encryption is very slow. Typically, you'd send the recipient the following, so that they can decrypt your message:</p>

<ol>
<li>The symmetric key, encrypted with the recipient's public key.</li>
<li>Parameters for the algorithms used, usually an initialization vector for the symmetric cipher.</li>
<li>Identifiers for the encryption algorithms used.</li>
<li>The ciphertext&mdash;the actual message, encrypted under the symmetric cipher.</li>
</ol>

<p>I found the sample code in the <a href=""http://java.sun.com/j2se/1.5.0/docs/guide/security/jce/JCERefGuide.html"" rel=""noreferrer"">JCE documentation</a> sufficient to get things working.</p>

<p>The standard format for bundling all of this information up is the Cryptographic Message Syntax, or CMS, which is used by S/MIME in email applications. I recommend using <a href=""http://www.bouncycastle.org/"" rel=""noreferrer"">Bouncy Castle's libraries</a>; they are solid, fairly simple, and actively maintained. The reference documentation is a bit weak, but they do provide code examples.</p>
","26721","<java><public-key><encryption-asymmetric>","16","13","2","2016-05-19 12:53:30","338603","0","4","39057","Loki","2008-12-03 20:34:22","2008-12-03 20:28:18","2016-05-20 19:09:31"
"11346200","Reading PEM RSA Public Key Only using Bouncy Castle","<p>I am trying to use C# to read in a <code>.pem</code> file that contains only a RSA public key.  I do not have access to the private key information, nor does my application require it.  The file <code>myprivatekey.pem</code> file begins with </p>

<p><code>-----BEGIN PUBLIC KEY-----</code>
and ends with 
<code>-----END PUBLIC KEY-----</code>.</p>

<p>My current code is as follows:</p>

<pre><code>    Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair keyPair;

    using (var reader = File.OpenText(@""c:\keys\myprivatekey.pem""))
        keyPair = (Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair)new Org.BouncyCastle.OpenSsl.PemReader(reader).ReadObject();
</code></pre>

<p>However the code throws an <code>InvalidCastException</code> with the message </p>

<blockquote>
  <p>Unable to cast object of type
  'Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters' to type
  'Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair'.</p>
</blockquote>

<p>How can I use Bouncy Castle's <code>PemReader</code> to read only a public key, when no private key information is available?</p>
","<p>The following code will read a public key only given a filename.  The exception handling should be changed for any production code.  This method returns an <code>AsymetricKeyParameter</code>.</p>

<pre><code>public Org.BouncyCastle.Crypto.AsymmetricKeyParameter ReadAsymmetricKeyParameter(string pemFilename)
{
    var fileStream = System.IO.File.OpenText (pemFilename);
    var pemReader = new Org.BouncyCastle.OpenSsl.PemReader (fileStream);
    var KeyParameter = (Org.BouncyCastle.Crypto.AsymmetricKeyParameter)pemReader.ReadObject ();
    return KeyParameter;
}
</code></pre>
","25122","<c#><bouncycastle><public-key><pem>","12","19","5","2019-07-26 22:02:55","11367152","1","10","451590","","2012-07-05 14:22:53","2012-07-05 14:16:27",""
"11346200","Reading PEM RSA Public Key Only using Bouncy Castle","<p>I am trying to use C# to read in a <code>.pem</code> file that contains only a RSA public key.  I do not have access to the private key information, nor does my application require it.  The file <code>myprivatekey.pem</code> file begins with </p>

<p><code>-----BEGIN PUBLIC KEY-----</code>
and ends with 
<code>-----END PUBLIC KEY-----</code>.</p>

<p>My current code is as follows:</p>

<pre><code>    Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair keyPair;

    using (var reader = File.OpenText(@""c:\keys\myprivatekey.pem""))
        keyPair = (Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair)new Org.BouncyCastle.OpenSsl.PemReader(reader).ReadObject();
</code></pre>

<p>However the code throws an <code>InvalidCastException</code> with the message </p>

<blockquote>
  <p>Unable to cast object of type
  'Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters' to type
  'Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair'.</p>
</blockquote>

<p>How can I use Bouncy Castle's <code>PemReader</code> to read only a public key, when no private key information is available?</p>
","<p>In answer to c0d3Junk13, I had the same issue for a PEM private key and it took me all afternoon to find the solution using the C# BouncyCastle Version 1.7 and Visual Studio 2013 Desktop Express. Don't forget to add the project reference to BouncyCastle.Crypto.dll</p>

<pre><code>using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Collections;
using System.IO;
using Org.BouncyCastle.Asn1.X509;
using Org.BouncyCastle.Asn1.Pkcs;
using Org.BouncyCastle.Crypto.Digests;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Crypto.Signers;
using Org.BouncyCastle.X509;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Math.EC;
using Org.BouncyCastle.Utilities.Collections;
using Org.BouncyCastle.Utilities.Encoders;
using Org.BouncyCastle.Crypto; 
using Org.BouncyCastle.Crypto.Engines; 
using Org.BouncyCastle.OpenSsl;

/* 
    For an Active Directory generated pem, strip out everything in pem file before line:
    ""-----BEGIN PRIVATE KEY-----"" and re-save.
*/
string privateKeyFileName = @""C:\CertificateTest\CS\bccrypto-net-1.7-bin\private_key3.pem"";

TextReader reader = File.OpenText(privateKeyFileName);

Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters key;

using (reader = File.OpenText(privateKeyFileName))
{
    key = (Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters)new PemReader(reader).ReadObject();
}

cipher.Init(false, key);

//Decrypting the input bytes

byte[] decipheredBytes = cipher.ProcessBlock(cipheredBytes, 0, cipheredBytes.Length);

MessageBox.Show(Encoding.UTF8.GetString(decipheredBytes));
</code></pre>
","25122","<c#><bouncycastle><public-key><pem>","12","1","5","2019-07-26 22:02:55","11367152","1","10","451590","","2012-07-05 14:22:53","2012-07-05 14:16:27",""
"11346200","Reading PEM RSA Public Key Only using Bouncy Castle","<p>I am trying to use C# to read in a <code>.pem</code> file that contains only a RSA public key.  I do not have access to the private key information, nor does my application require it.  The file <code>myprivatekey.pem</code> file begins with </p>

<p><code>-----BEGIN PUBLIC KEY-----</code>
and ends with 
<code>-----END PUBLIC KEY-----</code>.</p>

<p>My current code is as follows:</p>

<pre><code>    Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair keyPair;

    using (var reader = File.OpenText(@""c:\keys\myprivatekey.pem""))
        keyPair = (Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair)new Org.BouncyCastle.OpenSsl.PemReader(reader).ReadObject();
</code></pre>

<p>However the code throws an <code>InvalidCastException</code> with the message </p>

<blockquote>
  <p>Unable to cast object of type
  'Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters' to type
  'Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair'.</p>
</blockquote>

<p>How can I use Bouncy Castle's <code>PemReader</code> to read only a public key, when no private key information is available?</p>
","<p>Here's a possible solution that reads both public and private PEM files into RSACryptoServiceProvider:</p>

<pre><code>public class PemReaderB
{
    public static RSACryptoServiceProvider GetRSAProviderFromPem(String pemstr)
    {
        CspParameters cspParameters = new CspParameters();
        cspParameters.KeyContainerName = ""MyKeyContainer"";
        RSACryptoServiceProvider rsaKey = new RSACryptoServiceProvider(cspParameters);

        Func&lt;RSACryptoServiceProvider, RsaKeyParameters, RSACryptoServiceProvider&gt; MakePublicRCSP = (RSACryptoServiceProvider rcsp, RsaKeyParameters rkp) =&gt;
        {
            RSAParameters rsaParameters = DotNetUtilities.ToRSAParameters(rkp);
            rcsp.ImportParameters(rsaParameters);
            return rsaKey;
        };

        Func&lt;RSACryptoServiceProvider, RsaPrivateCrtKeyParameters, RSACryptoServiceProvider&gt; MakePrivateRCSP = (RSACryptoServiceProvider rcsp, RsaPrivateCrtKeyParameters rkp) =&gt;
        {
            RSAParameters rsaParameters = DotNetUtilities.ToRSAParameters(rkp);
            rcsp.ImportParameters(rsaParameters);
            return rsaKey;
        };

        PemReader reader = new PemReader(new StringReader(pemstr));
        object kp = reader.ReadObject();

        // If object has Private/Public property, we have a Private PEM
        return (kp.GetType().GetProperty(""Private"") != null) ? MakePrivateRCSP(rsaKey, (RsaPrivateCrtKeyParameters)(((AsymmetricCipherKeyPair)kp).Private)) : MakePublicRCSP(rsaKey, (RsaKeyParameters)kp);
    }

    public static RSACryptoServiceProvider GetRSAProviderFromPemFile(String pemfile)
    {
        return GetRSAProviderFromPem(File.ReadAllText(pemfile).Trim());
    }
}
</code></pre>

<p>Hope this helps someone.</p>
","25122","<c#><bouncycastle><public-key><pem>","12","10","5","2019-07-26 22:02:55","11367152","1","10","451590","","2012-07-05 14:22:53","2012-07-05 14:16:27",""
"11346200","Reading PEM RSA Public Key Only using Bouncy Castle","<p>I am trying to use C# to read in a <code>.pem</code> file that contains only a RSA public key.  I do not have access to the private key information, nor does my application require it.  The file <code>myprivatekey.pem</code> file begins with </p>

<p><code>-----BEGIN PUBLIC KEY-----</code>
and ends with 
<code>-----END PUBLIC KEY-----</code>.</p>

<p>My current code is as follows:</p>

<pre><code>    Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair keyPair;

    using (var reader = File.OpenText(@""c:\keys\myprivatekey.pem""))
        keyPair = (Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair)new Org.BouncyCastle.OpenSsl.PemReader(reader).ReadObject();
</code></pre>

<p>However the code throws an <code>InvalidCastException</code> with the message </p>

<blockquote>
  <p>Unable to cast object of type
  'Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters' to type
  'Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair'.</p>
</blockquote>

<p>How can I use Bouncy Castle's <code>PemReader</code> to read only a public key, when no private key information is available?</p>
","<p>Try the following code: </p>

<pre><code>Using Org.BouncyCastle.Crypto;


string path = HttpContext.Current.Server.MapPath(@""~\key\ABCD.pem"");



AsymmetricCipherKeyPair Key;

TextReader tr = new StreamReader(@path);

 PemReader pr = new PemReader(tr);
        Key = (AsymmetricCipherKeyPair)pr.ReadObject();
        pr.Reader.Close();
        tr.Close();



         AsymmetricKeyParameter keaa = Key.Public;
</code></pre>
","25122","<c#><bouncycastle><public-key><pem>","12","0","5","2019-07-26 22:02:55","11367152","1","10","451590","","2012-07-05 14:22:53","2012-07-05 14:16:27",""
"11346200","Reading PEM RSA Public Key Only using Bouncy Castle","<p>I am trying to use C# to read in a <code>.pem</code> file that contains only a RSA public key.  I do not have access to the private key information, nor does my application require it.  The file <code>myprivatekey.pem</code> file begins with </p>

<p><code>-----BEGIN PUBLIC KEY-----</code>
and ends with 
<code>-----END PUBLIC KEY-----</code>.</p>

<p>My current code is as follows:</p>

<pre><code>    Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair keyPair;

    using (var reader = File.OpenText(@""c:\keys\myprivatekey.pem""))
        keyPair = (Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair)new Org.BouncyCastle.OpenSsl.PemReader(reader).ReadObject();
</code></pre>

<p>However the code throws an <code>InvalidCastException</code> with the message </p>

<blockquote>
  <p>Unable to cast object of type
  'Org.BouncyCastle.Crypto.Parameters.DsaPublicKeyParameters' to type
  'Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair'.</p>
</blockquote>

<p>How can I use Bouncy Castle's <code>PemReader</code> to read only a public key, when no private key information is available?</p>
","<p><strong>EDIT</strong>: 
It looks like this depends on what type of key file you are using. For <strong>ssh-keygen</strong> keys, the private key appears to have a type of <code>AsymmetricCipherKeyPair</code>, but for <strong>openssl</strong> keys, the private key has a type of <code>RsaPrivateCrtKeyParameters</code>.</p>

<hr>

<p>Bryan Jyh Herng Chong's answer no longer appears to work for me (at least with Bouncy Castle version v1.8.5). It appears <code>kp.GetType().GetProperty(""Private"")</code> is no longer set differently for public vs private key PEM objects. It also appears that the object returned using <code>PemReader.ReadObject()</code> is now directly a <code>RsaPrivateCrtKeyParameters</code> object, so there's no longer a need to cast through a <code>AsymmetricCipherKeyPair</code> object first.  </p>

<p>I changed that line to this and it worked like a charm:</p>

<pre><code>return (kp.GetType() == typeof(RsaPrivateCrtKeyParameters)) ? MakePrivateRCSP(rsaKey, (RsaPrivateCrtKeyParameters)kp)) : MakePublicRCSP(rsaKey, (RsaKeyParameters)kp);
</code></pre>
","25122","<c#><bouncycastle><public-key><pem>","12","0","5","2019-07-26 22:02:55","11367152","1","10","451590","","2012-07-05 14:22:53","2012-07-05 14:16:27",""
"26421475","Cannot find id_rsa.pub in the unix server. Can I regenerate it? Id_sra (private key) exists","<p>What I want to do is to copy key to another host.</p>

<pre><code>ssh-copy-id -i ~/.ssh/id_rsa user@host
</code></pre>

<p>I get error:</p>

<p>/usr/bin/ssh-copy-id: ERROR: failed to open ID file '[homedir].ssh/id_rsa.pub':</p>

<p>So there is no public key. So where is it? I tried to use command  </p>

<pre><code>sudo find / -name id_rsa.pub
</code></pre>

<p>but it only found one which I generated experimentally in my test directory. I tried sending the experimental from the test directory, but then it keeps infinitely asking paraphrase and does not send when I keep pasting.</p>

<p>So there is something wrong.</p>

<p>I could regenerate using</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>but then it tries to use ~./.ssh directory</p>

<p>and wants to overwrite private id_rsa key. I am afraid this might brake something.</p>

<p>So how do I get my public key file?</p>
","<p>RSA keys work on pairs. You can generate ssh private and public keys any number of times..it does not break anything. It simply replaces the old one with a newly generated keys. This only requires you to copy the newly generated public key id_rsa.pub to your remote machine's ~/.ssh/authorized_keys file in order for you to access secure shell using rsa keys. </p>

<p>So generate new rsa keys on your home's .ssh directory (your old keys are replaced by new ones) and copy to the remote host's .ssh directory</p>

<pre><code>cd /home/&lt;your_username&gt;/.ssh
ssh-keygen -t rsa
scp ~/.ssh/id_rsa.pub remote_username@host:~/.ssh/authorized_keys
</code></pre>

<p>then </p>

<pre><code>ssh remote_username@host
</code></pre>

<p>Keep passphrase empty while generating your new keys unless you want to enter passphrase every time you try to make a ssh connection. </p>

<p>NOTE: you need to append your public key to authorized_keys file in remote host's ~/.ssh directory if it already exists holding other client's public keys. </p>
","25029","<ssh><public-key>","5","3","2","2016-08-13 02:01:37","26422114","1","2","1194854","","2014-10-17 10:49:24","2014-10-17 09:00:18",""
"26421475","Cannot find id_rsa.pub in the unix server. Can I regenerate it? Id_sra (private key) exists","<p>What I want to do is to copy key to another host.</p>

<pre><code>ssh-copy-id -i ~/.ssh/id_rsa user@host
</code></pre>

<p>I get error:</p>

<p>/usr/bin/ssh-copy-id: ERROR: failed to open ID file '[homedir].ssh/id_rsa.pub':</p>

<p>So there is no public key. So where is it? I tried to use command  </p>

<pre><code>sudo find / -name id_rsa.pub
</code></pre>

<p>but it only found one which I generated experimentally in my test directory. I tried sending the experimental from the test directory, but then it keeps infinitely asking paraphrase and does not send when I keep pasting.</p>

<p>So there is something wrong.</p>

<p>I could regenerate using</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>but then it tries to use ~./.ssh directory</p>

<p>and wants to overwrite private id_rsa key. I am afraid this might brake something.</p>

<p>So how do I get my public key file?</p>
","<p>Just in case someone else comes here looking for an answer to the OP's question... and to directly answer that question (namely, how can you re-generate the .pub key in a situation where it is missing, and you only have the private key)... </p>

<p>Here is the answer:</p>

<h2>Regenerating a .pub key from the private key</h2>

<pre><code>ssh-keygen -y -f ~/.ssh/id_rsa &gt; ~/.ssh/id_rsa.pub
</code></pre>

<p>The <code>-y</code> option is the command teling <code>ssh-keygen</code> to output your public key.</p>

<p>This will re-generate the .pub part of the pair. Just as the OP pointed out, if you simply generate a new pair, and replace the old private key, you will lose access to whatever servers you have already provided your public key to. Sure, you can go through the process of providing a new public key to those servers, but why go through that hassle if it can be easily avoided?</p>
","25029","<ssh><public-key>","5","20","2","2016-08-13 02:01:37","26422114","1","2","1194854","","2014-10-17 10:49:24","2014-10-17 09:00:18",""
"32852906","How to resolve Java UnknownHostKey, while using JSch SFTP library?","<p>I'm running a java program where I transfer a file from one folder to another, using Java SFTP. The problem I'm having is that  I'm getting the following error in  my Java SFTP (using JSch) :</p>

<blockquote>
  <p>C:\Oracle\Middleware\Oracle_Home\oracle_common\jdk\bin\javaw.exe
  -server -classpath C:\JDeveloper\mywork\Java_Hello_World.adf;C:\JDeveloper\mywork\Java_Hello_World\Client\classes;C:\Users\ADMIN\Downloads\jsch-0.1.53.jar
  -Djavax.net.ssl.trustStore=C:\Users\IBM_AD~1\AppData\Local\Temp\trustStore5840796204189742395.jks
  FileTransfer com.jcraft.jsch.JSchException: UnknownHostKey: 127.0.0.1.
  RSA key fingerprint is a2:39:3f:44:88:e9:1f:d7:d1:71:f4:85:98:fb:90:dc
    at com.jcraft.jsch.Session.checkHost(Session.java:797)  at
  com.jcraft.jsch.Session.connect(Session.java:342)     at
  com.jcraft.jsch.Session.connect(Session.java:183)     at
  FileTransfer.main(FileTransfer.java:33) Process exited with exit code
  0.</p>
</blockquote>

<p>The following is my code so far:</p>

<pre><code>FileTransfer fileTransfer = new FileTransfer();              

JSch jsch = new JSch();

try {

    String host = ""127.0.0.1"";
    int port = 22;

    String user = ""user"";
    Session session = jsch.getSession(user, host, port);      
    session = jsch.getSession(""username"", ""127.0.0.1"", 22);
    session.connect();  // bug here , java.net.ConnectException

    ChannelSftp sftp = null;
    sftp = (ChannelSftp)session.openChannel(""sftp"") ; //channel;

    //extra config code
    java.util.Properties config = new java.util.Properties(); 
    config.put(""StrictHostKeyChecking"", ""no"");
    session.setConfig(config);
    // end extra config code

    sftp.rename(""C:\\Users\\ADMIN\\Desktop\\Work\\ConnectOne_Bancorp\\Java_Work\\SFTP_1\\house.bmp"", ""C:\\Users\\ADMIN\\Desktop\\Work\\ConnectOne_Bancorp\\Java_Work\\SFTP_2\\house.bmp"");  
    session.disconnect();

} catch (JSchException e) {
    e.printStackTrace();  
} catch (SftpException e) {
    e.printStackTrace();
} //end-catch
</code></pre>

<p>My Cygwin is set up, and I checked (with <code>netstat -a -b</code> ) that it's running.</p>
","<p>Aside: by ""Cygwin"" I assume you mean sshd or sftpd, because Cygwin itself doesn't do SSH.</p>

<p>Anyway, if you want Jsch client to accept any key from the host, move the <code>.setConfig</code> calls that sets <code>StrictHostKeyChecking no</code> so it is <strong>before</strong> <code>session.connect()</code>. Alternatively you must provide access to a store containing the correct key(s) for your hosts(s) as @Martin explains -- and you should always do that when connecting to anything other than ""localhost"" or possibly a machine certain to be on the same, physically-secure network segment (such as a wired LAN hub within a single room).</p>
","22997","<java><ssh><sftp><jsch><public-key>","13","3","3","2018-12-14 13:57:18","32858953","0","5","850848","","2015-09-30 06:49:18","2015-09-29 20:10:16",""
"32852906","How to resolve Java UnknownHostKey, while using JSch SFTP library?","<p>I'm running a java program where I transfer a file from one folder to another, using Java SFTP. The problem I'm having is that  I'm getting the following error in  my Java SFTP (using JSch) :</p>

<blockquote>
  <p>C:\Oracle\Middleware\Oracle_Home\oracle_common\jdk\bin\javaw.exe
  -server -classpath C:\JDeveloper\mywork\Java_Hello_World.adf;C:\JDeveloper\mywork\Java_Hello_World\Client\classes;C:\Users\ADMIN\Downloads\jsch-0.1.53.jar
  -Djavax.net.ssl.trustStore=C:\Users\IBM_AD~1\AppData\Local\Temp\trustStore5840796204189742395.jks
  FileTransfer com.jcraft.jsch.JSchException: UnknownHostKey: 127.0.0.1.
  RSA key fingerprint is a2:39:3f:44:88:e9:1f:d7:d1:71:f4:85:98:fb:90:dc
    at com.jcraft.jsch.Session.checkHost(Session.java:797)  at
  com.jcraft.jsch.Session.connect(Session.java:342)     at
  com.jcraft.jsch.Session.connect(Session.java:183)     at
  FileTransfer.main(FileTransfer.java:33) Process exited with exit code
  0.</p>
</blockquote>

<p>The following is my code so far:</p>

<pre><code>FileTransfer fileTransfer = new FileTransfer();              

JSch jsch = new JSch();

try {

    String host = ""127.0.0.1"";
    int port = 22;

    String user = ""user"";
    Session session = jsch.getSession(user, host, port);      
    session = jsch.getSession(""username"", ""127.0.0.1"", 22);
    session.connect();  // bug here , java.net.ConnectException

    ChannelSftp sftp = null;
    sftp = (ChannelSftp)session.openChannel(""sftp"") ; //channel;

    //extra config code
    java.util.Properties config = new java.util.Properties(); 
    config.put(""StrictHostKeyChecking"", ""no"");
    session.setConfig(config);
    // end extra config code

    sftp.rename(""C:\\Users\\ADMIN\\Desktop\\Work\\ConnectOne_Bancorp\\Java_Work\\SFTP_1\\house.bmp"", ""C:\\Users\\ADMIN\\Desktop\\Work\\ConnectOne_Bancorp\\Java_Work\\SFTP_2\\house.bmp"");  
    session.disconnect();

} catch (JSchException e) {
    e.printStackTrace();  
} catch (SftpException e) {
    e.printStackTrace();
} //end-catch
</code></pre>

<p>My Cygwin is set up, and I checked (with <code>netstat -a -b</code> ) that it's running.</p>
","<p>You are trying to skip a host key checking by setting <code>StrictHostKeyChecking</code> to <code>no</code>.</p>

<p>But you have to do that before the checking, i.e. before the <code>session.connect()</code>.</p>

<hr>

<p>Anyway, you should never do this, unless you do not care about security. The host key checking is there to protect you from <a href=""https://en.wikipedia.org/wiki/Man-in-the-middle_attack"" rel=""noreferrer"">man-in-the-middle attacks</a>.</p>

<p>Instead, set up an expected host key to let JSch verify it.</p>

<p>For example:</p>

<ul>
<li><p>Call <a href=""https://epaul.github.io/jsch-documentation/javadoc/com/jcraft/jsch/JSch.html#setKnownHosts-java.lang.String-"" rel=""noreferrer""><code>JSch.setKnownHosts</code></a> providing a path to a <code>.ssh/known_hosts</code>-like file.</p>

<p>To generate the <code>.ssh/known_hosts</code>-like file, you can use an <code>ssh-keyscan</code> command from OpenSSH. If you are connecting from a *nix server, you should have the command available, just run</p>

<pre><code>ssh-keyscan example.com &gt; known_hosts
</code></pre>

<p>It will have a format like:</p>

<pre><code>example.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0hVqZOvZ7yWgie9OHdTORJVI5fJJoH1yEGamAd5G3werH0z7e9ybtq1mGUeRkJtea7bzru0ISR0EZ9HIONoGYrDmI7S+BiwpDBUKjva4mAsvzzvsy6Ogy/apkxm6Kbcml8u4wjxaOw3NKzKqeBvR3pc+nQVA+SJUZq8D2XBRd4EDUFXeLzwqwen9G7gSLGB1hJkSuRtGRfOHbLUuCKNR8RV82i3JvlSnAwb3MwN0m3WGdlJA8J+5YAg4e6JgSKrsCObZK7W1R6iuyuH1zA+dtAHyDyYVHB4FnYZPL0hgz2PSb9c+iDEiFcT/lT4/dQ+kRW6DYn66lS8peS8zCJ9CSQ==
</code></pre>

<p>And reference the generated <code>known_hosts</code> file in your JSch code.</p>

<p>If you are on Windows, you can get a Windows build of <code>ssh-keyscan</code> from <a href=""https://github.com/PowerShell/Win32-OpenSSH/releases"" rel=""noreferrer"">Win32-OpenSSH project</a> or Git for Windows.</p></li>
<li><p>Call <code>JSch.getHostKeyRepository().add()</code> to provide the expected host key (e.g. hard-coded, as your other credentials).</p>

<p>See <a href=""https://stackoverflow.com/q/29604333/850848"">Creating JSch HostKey instance from a public key in .pub format</a>.</p></li>
</ul>
","22997","<java><ssh><sftp><jsch><public-key>","13","22","3","2018-12-14 13:57:18","32858953","0","5","850848","","2015-09-30 06:49:18","2015-09-29 20:10:16",""
"32852906","How to resolve Java UnknownHostKey, while using JSch SFTP library?","<p>I'm running a java program where I transfer a file from one folder to another, using Java SFTP. The problem I'm having is that  I'm getting the following error in  my Java SFTP (using JSch) :</p>

<blockquote>
  <p>C:\Oracle\Middleware\Oracle_Home\oracle_common\jdk\bin\javaw.exe
  -server -classpath C:\JDeveloper\mywork\Java_Hello_World.adf;C:\JDeveloper\mywork\Java_Hello_World\Client\classes;C:\Users\ADMIN\Downloads\jsch-0.1.53.jar
  -Djavax.net.ssl.trustStore=C:\Users\IBM_AD~1\AppData\Local\Temp\trustStore5840796204189742395.jks
  FileTransfer com.jcraft.jsch.JSchException: UnknownHostKey: 127.0.0.1.
  RSA key fingerprint is a2:39:3f:44:88:e9:1f:d7:d1:71:f4:85:98:fb:90:dc
    at com.jcraft.jsch.Session.checkHost(Session.java:797)  at
  com.jcraft.jsch.Session.connect(Session.java:342)     at
  com.jcraft.jsch.Session.connect(Session.java:183)     at
  FileTransfer.main(FileTransfer.java:33) Process exited with exit code
  0.</p>
</blockquote>

<p>The following is my code so far:</p>

<pre><code>FileTransfer fileTransfer = new FileTransfer();              

JSch jsch = new JSch();

try {

    String host = ""127.0.0.1"";
    int port = 22;

    String user = ""user"";
    Session session = jsch.getSession(user, host, port);      
    session = jsch.getSession(""username"", ""127.0.0.1"", 22);
    session.connect();  // bug here , java.net.ConnectException

    ChannelSftp sftp = null;
    sftp = (ChannelSftp)session.openChannel(""sftp"") ; //channel;

    //extra config code
    java.util.Properties config = new java.util.Properties(); 
    config.put(""StrictHostKeyChecking"", ""no"");
    session.setConfig(config);
    // end extra config code

    sftp.rename(""C:\\Users\\ADMIN\\Desktop\\Work\\ConnectOne_Bancorp\\Java_Work\\SFTP_1\\house.bmp"", ""C:\\Users\\ADMIN\\Desktop\\Work\\ConnectOne_Bancorp\\Java_Work\\SFTP_2\\house.bmp"");  
    session.disconnect();

} catch (JSchException e) {
    e.printStackTrace();  
} catch (SftpException e) {
    e.printStackTrace();
} //end-catch
</code></pre>

<p>My Cygwin is set up, and I checked (with <code>netstat -a -b</code> ) that it's running.</p>
","<p>jsch version : 0.1.55</p>

<p>my problem solved by running :</p>

<pre><code>ssh-keyscan -t rsa &lt;HOST_NAME&gt; &gt;&gt; ~/.ssh/known_hosts
ssh-keyscan -t rsa &lt;IP_ADDRESS_OF_HOST_NAME&gt; &gt;&gt; ~/.ssh/known_hosts
</code></pre>

<p>**in my case  jsch was  looking  for ip address in known_hosts file</p>

<pre><code>jsch.setKnownHosts(System.getProperty(""user.home"")+""/.ssh/known_hosts"");
</code></pre>
","22997","<java><ssh><sftp><jsch><public-key>","13","5","3","2018-12-14 13:57:18","32858953","0","5","850848","","2015-09-30 06:49:18","2015-09-29 20:10:16",""
"11691462","Verifying a signature with a public key","<p>I have an external service which call me back after some defined event, and sign his request with its private key.</p>

<p>I have stored the public key which look like :</p>

<pre><code>-----BEGIN PUBLIC KEY-----
........................................
-----END PUBLIC KEY-----
</code></pre>

<p>So my work is to check if request's content has not been alterned by verifying signature.</p>

<p>Here is my algorithm :</p>

<pre><code>// 1 - reading public key :
Scanner scanner = new Scanner( new File( keyPath ) );


//            encodedPublicKey.toString( );
StringBuilder sb = new StringBuilder( );
while ( scanner.hasNextLine( ) )
{
    sb.append( scanner.nextLine( ) );
    sb.append( '\n' );
}

byte[] encodedPublicKey = sb.toString( ).getBytes( ""utf-8"" );

// 2 - loading public key in a relevant object :
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec( publicKeyBytes );

KeyFactory keyFactory = KeyFactory.getInstance( ""DSA"" );

PublicKey publicKey = keyFactory.generatePublic( publicKeySpec );

// 3 - verifying content with signature and content :
Signature sig = Signature.getInstance( ""SHA1withDSA"" );
sig.initVerify( publicKey );
sig.update( message.getBytes( ) );
ret = sig.verify( sign.getBytes( ) );
</code></pre>

<p>But for now my algorithm is stoped at ""PublicKey publicKey = keyFactory.generatePublic( publicKeySpec )"" step by this message :</p>

<pre><code>java.security.spec.InvalidKeySpecException: Inappropriate key specification: invalid key format
</code></pre>

<p>So how can I load my key in a way that is accepted by java api ?</p>
","<p>Actually I've found the solution.</p>

<p>The problem was to load in the public key file in the right way.</p>

<p>I'va added bouncycastle library to my dependencies :</p>

<pre><code>&lt;dependency&gt;
  &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
  &lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;
  &lt;version&gt;1.47&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>It provides PemReader which allows to read and load non certificated public keys.</p>

<p>Here is my utility class :</p>

<pre><code>import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;

import org.bouncycastle.util.io.pem.PemReader;
import org.castor.util.Base64Decoder;

import fr.paris.lutece.portal.service.util.AppLogService;


/**
 * Classe d'aide à l'interfacage avec le service paybox.
 *
 * Toutes les informations parameterables sont sous la forme paybox.*
 */
public final class PayboxUtil
{

    /** The Constant CHARSET. */
    private static final String CHARSET = ""utf-8"";

    /** The Constant ENCRYPTION_ALGORITHM. */
    private static final String ENCRYPTION_ALGORITHM = ""RSA"";

    /** The Constant HASH_ENCRIPTION_ALGORITHM. */
    private static final String HASH_ENCRYPTION_ALGORITHM = ""SHA1withRSA"";

    /**
     * constructeur privé pour classe statique.
     */
    private PayboxUtil(  )
    {
    }

    /**
     * Controle si une signature est bien celle du message à l'aide de la clé
     * publique de l'emmeteur?.
     *
     * @param message le message
     * @param sign la signature
     * @param keyPath le chemin vers la clé publique.
     * @return true si la signature est bien celle du message avec la clé privé
     *         attendue.
     */
    public static boolean checkSign( String message, String sign, String keyPath )
    {
        boolean ret = false;

        try
        {
            ret = PayboxUtil.verify( message, sign, PayboxUtil.getKey( keyPath ) );
        }
        catch ( final FileNotFoundException e )
        {
            AppLogService.error( e );
        }
        catch ( final IOException e )
        {
            AppLogService.error( e );
        }
        catch ( final NoSuchAlgorithmException e )
        {
            AppLogService.error( e );
        }
        catch ( final InvalidKeySpecException e )
        {
            AppLogService.error( e );
        }
        catch ( final InvalidKeyException e )
        {
            AppLogService.error( e );
        }
        catch ( final SignatureException e )
        {
            AppLogService.error( e );
        }

        return ret;
    }


    /**
     * Récupère la clé publique à partir du chemin passé en paramètre.
     *
     * @param keyPath le chemin vers la clé.
     * @return la clé publique
     * @throws NoSuchAlgorithmException the no such algorithm exception
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws InvalidKeySpecException the invalid key spec exception
     */
    private static PublicKey getKey( String keyPath )
        throws NoSuchAlgorithmException, IOException, InvalidKeySpecException
    {
        final KeyFactory keyFactory = KeyFactory.getInstance( PayboxUtil.ENCRYPTION_ALGORITHM );
        final PemReader reader = new PemReader( new FileReader( keyPath ) );
        final byte[] pubKey = reader.readPemObject(  ).getContent(  );
        final X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec( pubKey );

        return keyFactory.generatePublic( publicKeySpec );
    }

    /**
     * effectue la vérification du message en fonction de la signature et de la
     * clé.
     *
     * @param message le message
     * @param sign la signature
     * @param publicKey la clé publique.
     * @return true, if successful
     * @throws NoSuchAlgorithmException the no such algorithm exception
     * @throws InvalidKeyException the invalid key exception
     * @throws SignatureException the signature exception
     * @throws UnsupportedEncodingException the unsupported encoding exception
     */
    private static boolean verify( String message, String sign, PublicKey publicKey )
        throws NoSuchAlgorithmException, InvalidKeyException, SignatureException, UnsupportedEncodingException
    {
        final Signature sig = Signature.getInstance( PayboxUtil.HASH_ENCRYPTION_ALGORITHM );
        sig.initVerify( publicKey );
        sig.update( message.getBytes( PayboxUtil.CHARSET ) );

        final byte[] bytes = Base64Decoder.decode( URLDecoder.decode( sign, PayboxUtil.CHARSET ) );

        return sig.verify( bytes );
    }
}
</code></pre>

<p>You just have to pass signed content, signature and key path to checkSign method and it does all the work.</p>
","21445","<java><public-key><verify>","9","7","1","2012-08-01 07:45:25","11754742","3","4","","","","2012-07-27 15:57:31",""
"15018591","Could not generate ssh public key for heroku in Windows 7","<p>While I am trying <code>heroku login</code> through cmd in my machine, it says </p>

<blockquote>
  <p>Could not find existing public key<br>
  Would you like to generate one? [YN]</p>
</blockquote>

<p>After that when I press 'y' and enter it says</p>

<blockquote>
  <p>Generating new ssh public key<br>
  Could not generate key: ""ssh-keygen"" is not recognized as a internal or external command operable program or batch file</p>
</blockquote>

<p>Please help me.</p>
","<p>Heroku toolbelt includes git distribution which includes the required ssh-keygen.exe . I've just found it in C:\Program Files\git\bin . Locate your git folder and add it to your system path as described here: <a href=""https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them"">superuser.com/questions/284342/</a> </p>
","21244","<heroku><ssh><public-key><heroku-toolbelt>","31","34","4","2016-03-01 13:00:40","","2","3","28037","","2013-02-23 04:15:57","2013-02-22 06:58:50",""
"15018591","Could not generate ssh public key for heroku in Windows 7","<p>While I am trying <code>heroku login</code> through cmd in my machine, it says </p>

<blockquote>
  <p>Could not find existing public key<br>
  Would you like to generate one? [YN]</p>
</blockquote>

<p>After that when I press 'y' and enter it says</p>

<blockquote>
  <p>Generating new ssh public key<br>
  Could not generate key: ""ssh-keygen"" is not recognized as a internal or external command operable program or batch file</p>
</blockquote>

<p>Please help me.</p>
","<p>I had the same problem and just solved it. I installed another CMD called Git Bash that you can download for free (<a href=""http://git-scm.com/downloads"" rel=""noreferrer"">http://git-scm.com/downloads</a>) and then repeated the commands in that and it worked!   </p>
","21244","<heroku><ssh><public-key><heroku-toolbelt>","31","16","4","2016-03-01 13:00:40","","2","3","28037","","2013-02-23 04:15:57","2013-02-22 06:58:50",""
"15018591","Could not generate ssh public key for heroku in Windows 7","<p>While I am trying <code>heroku login</code> through cmd in my machine, it says </p>

<blockquote>
  <p>Could not find existing public key<br>
  Would you like to generate one? [YN]</p>
</blockquote>

<p>After that when I press 'y' and enter it says</p>

<blockquote>
  <p>Generating new ssh public key<br>
  Could not generate key: ""ssh-keygen"" is not recognized as a internal or external command operable program or batch file</p>
</blockquote>

<p>Please help me.</p>
","<p>For Win7 64-bit users, the file <code>%HerokuPath%s\bin\ssh-keygen.bat</code> looks like:</p>

<pre><code>@SETLOCAL
@SET HOME=%USERPROFILE%
@""%HerokuPath%\..\Git\bin\ssh-keygen.exe"" %*
</code></pre>

<p>But Heroku installs Git in <code>Program Files (x86)</code>, so if you update the <code>.bat</code> file to:</p>

<pre><code>@SETLOCAL
@SET HOME=%USERPROFILE%
@""C:\Program Files (x86)\Git\bin\ssh-keygen.exe"" %*
</code></pre>

<p>Then you should be able to generate your ssh keys.</p>
","21244","<heroku><ssh><public-key><heroku-toolbelt>","31","1","4","2016-03-01 13:00:40","","2","3","28037","","2013-02-23 04:15:57","2013-02-22 06:58:50",""
"15018591","Could not generate ssh public key for heroku in Windows 7","<p>While I am trying <code>heroku login</code> through cmd in my machine, it says </p>

<blockquote>
  <p>Could not find existing public key<br>
  Would you like to generate one? [YN]</p>
</blockquote>

<p>After that when I press 'y' and enter it says</p>

<blockquote>
  <p>Generating new ssh public key<br>
  Could not generate key: ""ssh-keygen"" is not recognized as a internal or external command operable program or batch file</p>
</blockquote>

<p>Please help me.</p>
","<p>Windows 10-64bit</p>

<p>I had installed git, then heroku toolbelt (which I think reinstalled git)</p>

<p>I had <code>C\Program Files (x86)\Heroku\bin</code> in my Environmental variable (probably generated when I installed heroku toolbelt) and if I looked in that filepath I had an ssh-keygen.bat - so it seemed like I should be able to just run <code>ssh-keygen -t rsa</code> from the command line.</p>

<p>That would be too easy, instead I get:</p>

<pre><code>C:\Program Files (x86)\Git\bin&gt;ssh-keygen -t rsa -f id_rsa
'""C:\Program Files (x86)\Heroku\..\Git\bin\ssh-keygen.exe""' is not recognized as an internal or external command,
operable program or batch file.
</code></pre>

<p><strong>Solution</strong></p>

<p>type <code>bash</code> <strong>in command line</strong> to go into git bash mode then run <code>ssh-keygen -t rsa</code></p>

<p><strong>git bash:</strong></p>

<pre><code>mamwo@DESKTOP-9GVG6K8 MINGW32 /bin
$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/mamwo/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /c/Users/mamwo/.ssh/id_rsa.
Your public key has been saved in /c/Users/mamwo/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:MMMYYYPPPUUUBBBLLIIICCKKEEEEYYYY mamwo@DESKTOP-9GVG6K8
The key's randomart image is:
</code></pre>

<p>Now when I look in C/User/mamwo/.ssh (the best way for me is through pycharms folder - windows sucks) I see my id_rsa and id_rsa.pub</p>

<p>But this 'cannot generate publickeys' issue all started for me because I had an 'I don't have public keys to add' issue when I cloned my repo (from github) to a new computer and found that I could push to github but not heroku.</p>

<p>Now that I have the keys - I have to add them</p>

<pre><code>C:\Users\mamwo\Desktop\mv&gt;git push heroku master
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

C:\Users\mamwo\Desktop\mv&gt;heroku keys
You have no keys.

C:\Users\mamwo\Desktop\mv&gt;heroku keys:add
Found an SSH public key at C:/Users/mamwo/.ssh/id_rsa.pub
Would you like to upload it to Heroku? [Yn]
</code></pre>
","21244","<heroku><ssh><public-key><heroku-toolbelt>","31","0","4","2016-03-01 13:00:40","","2","3","28037","","2013-02-23 04:15:57","2013-02-22 06:58:50",""
"3617293","openssl_pkey_get_public not open public key, ""no start line"" error","<p>When generating public key and then reading it with function <strong>openssl_pkey_get_public</strong> - <strong>$publicKeyResource</strong> = bool(false) and message:
<strong>error:0906D06C:PEM routines:PEM_read_bio:no start line</strong></p>

<pre><code>$privateKey = openssl_pkey_new(array('private_key_bits' =&gt; 2048, 'private_key_type' =&gt; OPENSSL_KEYTYPE_RSA));

$keyDetails = openssl_pkey_get_details($privateKey);

$publicKeyResource = openssl_pkey_get_public($keyDetails['key']);
</code></pre>

<p>What is wrong?</p>

<p>P.S. </p>

<pre><code>privateKey = 

array(3) {
  [""bits""]=&gt;int(2048)

  [""key""]=&gt;
  string(451) ""-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApo5lpSuSQmAOXfqAmexj
IzjdGnd1X1gCKj5ko2DHgcR4XBlj1hbFNs1pzXx+R/UvLXTeF7dNQ+9AgXjEeRa6
71VbNxrUgvb/PHjEANwce7xBsnbu+dcSazyNHzx4ahWyEF4f3HyaJkGrT/Dgzcut
DO+yFAH9u8Hx26cj/8kyrtIHxazemnD+IDHRa3zOjKDmTfoDRKtOMTPVgFAsYBXn
tKcLyamCSBgpwfQwKfUUcYhfY1xD9UMhVXabSSiNQOiTMuOIZUHueO8UCp/tdK6a
LprUDBQ/tVmiV7ZMeZYMjh6XnK7higJ3WZp8RmD4PPeKbtG6j2AuGpbF/ddzD62T
XwIDAQAB
-----END PUBLIC KEY-----
""

  [""type""]=&gt;
  int(0)
}
</code></pre>
","<h2>Reason:</h2>

<p>This error is usually caused by one corrupt character at the beginning of the .crt file. So, the chances are that you have an extra space, an extra character, an extra line, etc. in either the SSL Certificate file (.crt) or the SSL key.</p>
","21139","<php><openssl><rsa><public-key>","8","0","5","2012-10-31 17:39:01","3621240","3","4","233201","","2010-09-01 11:05:54","2010-09-01 11:00:10",""
"3617293","openssl_pkey_get_public not open public key, ""no start line"" error","<p>When generating public key and then reading it with function <strong>openssl_pkey_get_public</strong> - <strong>$publicKeyResource</strong> = bool(false) and message:
<strong>error:0906D06C:PEM routines:PEM_read_bio:no start line</strong></p>

<pre><code>$privateKey = openssl_pkey_new(array('private_key_bits' =&gt; 2048, 'private_key_type' =&gt; OPENSSL_KEYTYPE_RSA));

$keyDetails = openssl_pkey_get_details($privateKey);

$publicKeyResource = openssl_pkey_get_public($keyDetails['key']);
</code></pre>

<p>What is wrong?</p>

<p>P.S. </p>

<pre><code>privateKey = 

array(3) {
  [""bits""]=&gt;int(2048)

  [""key""]=&gt;
  string(451) ""-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApo5lpSuSQmAOXfqAmexj
IzjdGnd1X1gCKj5ko2DHgcR4XBlj1hbFNs1pzXx+R/UvLXTeF7dNQ+9AgXjEeRa6
71VbNxrUgvb/PHjEANwce7xBsnbu+dcSazyNHzx4ahWyEF4f3HyaJkGrT/Dgzcut
DO+yFAH9u8Hx26cj/8kyrtIHxazemnD+IDHRa3zOjKDmTfoDRKtOMTPVgFAsYBXn
tKcLyamCSBgpwfQwKfUUcYhfY1xD9UMhVXabSSiNQOiTMuOIZUHueO8UCp/tdK6a
LprUDBQ/tVmiV7ZMeZYMjh6XnK7higJ3WZp8RmD4PPeKbtG6j2AuGpbF/ddzD62T
XwIDAQAB
-----END PUBLIC KEY-----
""

  [""type""]=&gt;
  int(0)
}
</code></pre>
","<p>You might have an easier time with phpseclib's Crypt_RSA.  eg.</p>

createKey(2048));
echo $publickey;
?>

<p>More info:</p>

<p><a href=""http://phpseclib.sourceforge.net/"" rel=""nofollow noreferrer"">http://phpseclib.sourceforge.net/</a></p>
","21139","<php><openssl><rsa><public-key>","8","3","5","2012-10-31 17:39:01","3621240","3","4","233201","","2010-09-01 11:05:54","2010-09-01 11:00:10",""
"3617293","openssl_pkey_get_public not open public key, ""no start line"" error","<p>When generating public key and then reading it with function <strong>openssl_pkey_get_public</strong> - <strong>$publicKeyResource</strong> = bool(false) and message:
<strong>error:0906D06C:PEM routines:PEM_read_bio:no start line</strong></p>

<pre><code>$privateKey = openssl_pkey_new(array('private_key_bits' =&gt; 2048, 'private_key_type' =&gt; OPENSSL_KEYTYPE_RSA));

$keyDetails = openssl_pkey_get_details($privateKey);

$publicKeyResource = openssl_pkey_get_public($keyDetails['key']);
</code></pre>

<p>What is wrong?</p>

<p>P.S. </p>

<pre><code>privateKey = 

array(3) {
  [""bits""]=&gt;int(2048)

  [""key""]=&gt;
  string(451) ""-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApo5lpSuSQmAOXfqAmexj
IzjdGnd1X1gCKj5ko2DHgcR4XBlj1hbFNs1pzXx+R/UvLXTeF7dNQ+9AgXjEeRa6
71VbNxrUgvb/PHjEANwce7xBsnbu+dcSazyNHzx4ahWyEF4f3HyaJkGrT/Dgzcut
DO+yFAH9u8Hx26cj/8kyrtIHxazemnD+IDHRa3zOjKDmTfoDRKtOMTPVgFAsYBXn
tKcLyamCSBgpwfQwKfUUcYhfY1xD9UMhVXabSSiNQOiTMuOIZUHueO8UCp/tdK6a
LprUDBQ/tVmiV7ZMeZYMjh6XnK7higJ3WZp8RmD4PPeKbtG6j2AuGpbF/ddzD62T
XwIDAQAB
-----END PUBLIC KEY-----
""

  [""type""]=&gt;
  int(0)
}
</code></pre>
","<p>I suspect that this must be a bug in some version of either PHP or OpenSSL, because your posted code works fine for me (with PHP 5.2.6 and OpenSSL 0.9.8g).</p>
","21139","<php><openssl><rsa><public-key>","8","0","5","2012-10-31 17:39:01","3621240","3","4","233201","","2010-09-01 11:05:54","2010-09-01 11:00:10",""
"3617293","openssl_pkey_get_public not open public key, ""no start line"" error","<p>When generating public key and then reading it with function <strong>openssl_pkey_get_public</strong> - <strong>$publicKeyResource</strong> = bool(false) and message:
<strong>error:0906D06C:PEM routines:PEM_read_bio:no start line</strong></p>

<pre><code>$privateKey = openssl_pkey_new(array('private_key_bits' =&gt; 2048, 'private_key_type' =&gt; OPENSSL_KEYTYPE_RSA));

$keyDetails = openssl_pkey_get_details($privateKey);

$publicKeyResource = openssl_pkey_get_public($keyDetails['key']);
</code></pre>

<p>What is wrong?</p>

<p>P.S. </p>

<pre><code>privateKey = 

array(3) {
  [""bits""]=&gt;int(2048)

  [""key""]=&gt;
  string(451) ""-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApo5lpSuSQmAOXfqAmexj
IzjdGnd1X1gCKj5ko2DHgcR4XBlj1hbFNs1pzXx+R/UvLXTeF7dNQ+9AgXjEeRa6
71VbNxrUgvb/PHjEANwce7xBsnbu+dcSazyNHzx4ahWyEF4f3HyaJkGrT/Dgzcut
DO+yFAH9u8Hx26cj/8kyrtIHxazemnD+IDHRa3zOjKDmTfoDRKtOMTPVgFAsYBXn
tKcLyamCSBgpwfQwKfUUcYhfY1xD9UMhVXabSSiNQOiTMuOIZUHueO8UCp/tdK6a
LprUDBQ/tVmiV7ZMeZYMjh6XnK7higJ3WZp8RmD4PPeKbtG6j2AuGpbF/ddzD62T
XwIDAQAB
-----END PUBLIC KEY-----
""

  [""type""]=&gt;
  int(0)
}
</code></pre>
","<p>Same answer as I gave in <a href=""https://stackoverflow.com/questions/3598044/php-openssl-error-returned-but-correct-result/3635877#answer-3635877"">PHP + OpenSSL : error returned, but correct result</a>:
This is apparently caused by <strong>openssl_pkey_get_public()</strong> which wants a certificate containing your public key rather than the public key by itself &ndash; it seems to load the public key but still causes this error. <a href=""https://stackoverflow.com/questions/3598044/php-openssl-error-returned-but-correct-result/3635877#answer-3635877"">See details there.</a></p>
","21139","<php><openssl><rsa><public-key>","8","5","5","2012-10-31 17:39:01","3621240","3","4","233201","","2010-09-01 11:05:54","2010-09-01 11:00:10",""
"3617293","openssl_pkey_get_public not open public key, ""no start line"" error","<p>When generating public key and then reading it with function <strong>openssl_pkey_get_public</strong> - <strong>$publicKeyResource</strong> = bool(false) and message:
<strong>error:0906D06C:PEM routines:PEM_read_bio:no start line</strong></p>

<pre><code>$privateKey = openssl_pkey_new(array('private_key_bits' =&gt; 2048, 'private_key_type' =&gt; OPENSSL_KEYTYPE_RSA));

$keyDetails = openssl_pkey_get_details($privateKey);

$publicKeyResource = openssl_pkey_get_public($keyDetails['key']);
</code></pre>

<p>What is wrong?</p>

<p>P.S. </p>

<pre><code>privateKey = 

array(3) {
  [""bits""]=&gt;int(2048)

  [""key""]=&gt;
  string(451) ""-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApo5lpSuSQmAOXfqAmexj
IzjdGnd1X1gCKj5ko2DHgcR4XBlj1hbFNs1pzXx+R/UvLXTeF7dNQ+9AgXjEeRa6
71VbNxrUgvb/PHjEANwce7xBsnbu+dcSazyNHzx4ahWyEF4f3HyaJkGrT/Dgzcut
DO+yFAH9u8Hx26cj/8kyrtIHxazemnD+IDHRa3zOjKDmTfoDRKtOMTPVgFAsYBXn
tKcLyamCSBgpwfQwKfUUcYhfY1xD9UMhVXabSSiNQOiTMuOIZUHueO8UCp/tdK6a
LprUDBQ/tVmiV7ZMeZYMjh6XnK7higJ3WZp8RmD4PPeKbtG6j2AuGpbF/ddzD62T
XwIDAQAB
-----END PUBLIC KEY-----
""

  [""type""]=&gt;
  int(0)
}
</code></pre>
","<p>Most likely PHP's openSSL rejects key in PEM form. Try RSA form instead</p>
","21139","<php><openssl><rsa><public-key>","8","1","5","2012-10-31 17:39:01","3621240","3","4","233201","","2010-09-01 11:05:54","2010-09-01 11:00:10",""
"10332022","RSA decryption with a public key","<p>I've got some decryption problems in my Android project. </p>

<p>I'm getting a string signed with a private key and I have to verify(decrypt) it with a public key. 
I'd like to get exactly the same result as if I were using a PHP function - openssl_public_decrypt ( <a href=""http://php.net/manual/pl/function.openssl-public-decrypt.php"" rel=""nofollow"">http://php.net/manual/pl/function.openssl-public-decrypt.php</a> )</p>

<p>I have to do this in my Java project, so I can use Java libs (e.g BouncyCastle, or something else, any recommendations? ) </p>

<p>Any ideas how to solve this?</p>

<p>Ok, here's my code.
I'm getting the public key like this</p>

<pre><code>PEMReader reader = new PEMReader(new InputStreamReader(ctx
                .getAssets().open(""pubkey.pem"")));
        Object obj;
        while ((obj = reader.readObject()) != null) {
             if (obj instanceof RSAPublicKey) {
                pubKey = (RSAPublicKey) obj;
                return pubKey;
            }
        }
</code></pre>

<p>And I always get the public key without any problems.</p>

<pre><code>Cipher c = Cipher.getInstance(""RSA/NONE/NoPadding"", ""SC"");
c.init(Cipher.DECRYPT_MODE, pubKey);
byte[] result = c.doFinal(data_to_decrypt.getBytes());
</code></pre>

<p>And as a result(after converting bytes to string) I get <code>022c06571c6a263b389fcd93159cb311abb880bddf51b7c916dd1ae...</code> </p>

<p>where php functions returns 
<code>sd8dsa348acvcx87|00454|OK|15000|CDE</code> and this is a correct output.</p>
","<p>Java has got the Java Cryptography Extension Framework, which is just designed for these things.</p>

<p>BouncyCastle is a Cryptography Provider for this framework. This means, it provides your Java Cryptography Extension with implementations of cryptography algorithms.</p>

<p>You'll find the basic classes for this in the packages <code>java.security</code> and <code>javax.crypto</code></p>

<p>To decrypt your message with a public key you could try the following:</p>

<pre><code>// Use RSA/NONE/NoPadding as algorithm and BouncyCastle as crypto provider
Cipher asymmetricCipher = Cipher.getInstance(""RSA/NONE/NoPadding"", ""BC"");

// asume, that publicKeyBytes contains a byte array representing
// your public key
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyBytes);

KeyFactory keyFactory;
keyFactory = KeyFactory.getInstance(publicKeySpec.getFormat());
Key key = keyFactory.generatePublic(publicKeySpec);

// initialize your cipher
asymmetricCipher.init(Cipher.DECRYPT_MODE, key);
// asuming, cipherText is a byte array containing your encrypted message
byte[] plainText = asymmetricCipher.doFinal(cipherText);
</code></pre>

<p>Please note, that this example is <strong>very</strong> basic and lacks several try catch blocks. Also, you should not use an asymmetric cipher without padding as this makes you vulnerable to replay attacks. You may also encounter issues with the key length. In some Java packages, the maximum allowed key length is restricted. This may be solved by using the unlimited strength policy files.</p>

<p>I hope, this helps you in getting started with the Java cryptography.</p>
","20457","<java><php><android><rsa><public-key>","4","5","1","2012-04-27 15:25:01","10332664","8","5","608839","","2012-04-26 13:42:12","2012-04-26 10:57:33",""
"10579985","How can I get SecKeyRef from DER/PEM file","<p>I need to integrate my iPhone app with a system, and they require to encrypt data by a given public key, there are 3 files in 3 different format .xml .der and .pem, I have researched and found some articles about getting SecKeyRef from DER/PEM, but they are always return nil. Below is my code:</p>

<pre><code>NSString *pkFilePath = [[NSBundle mainBundle] pathForResource:@""PKFile"" ofType:@""der""];
NSData *pkData = [NSData dataWithContentsOfFile:pkFilePath]; 

SecCertificateRef   cert; 
cert = SecCertificateCreateWithData(NULL, (CFDataRef) pkData);
assert(cert != NULL);

OSStatus err;

    if (cert != NULL) {
        err = SecItemAdd(
                         (CFDictionaryRef) [NSDictionary dictionaryWithObjectsAndKeys:
                                            (id) kSecClassCertificate,  kSecClass, 
                                            (id) cert,                  kSecValueRef,
                                            nil
                                            ], 
                         NULL
                         );
        if ( (err == errSecSuccess) || (err == errSecDuplicateItem) ) {
            CFArrayRef certs = CFArrayCreate(kCFAllocatorDefault, (const void **) &amp;cert, 1, NULL); 
            SecPolicyRef policy = SecPolicyCreateBasicX509();
            SecTrustRef trust;
            SecTrustCreateWithCertificates(certs, policy, &amp;trust);
            SecTrustResultType trustResult;
            SecTrustEvaluate(trust, &amp;trustResult);
            if (certs) {
                CFRelease(certs);
            }
            if (trust) {
                CFRelease(trust);
            }
            return SecTrustCopyPublicKey(trust);
        }
    }
return NULL;
</code></pre>

<p>Problem happens at SecCertificateCreateWithData, it always return nil even through read file is ok.
Anybody has done this please help me, thanks!</p>

<p>EDIT: The cert file was MD5 signature.</p>
","<p>I struggled a lot with the same problem and finally found a solution. My problem was that I needed to use both an external private and public key for encrypting/decrypting data in an iOS app and didn't want to use the keychain.
It turns out you also need a signed certificate for the iOS security library to be able to read the key data and of course the files have to be in the correct format.
The procedure is basically as follows:</p>

<p>Say you have a private key in PEM format (with the -----BEGIN RSA PRIVATE KEY----- and -----END RSA PRIVATE KEY----- markers): rsaPrivate.pem </p>

<pre><code>//Create a certificate signing request with the private key
openssl req -new -key rsaPrivate.pem -out rsaCertReq.csr

//Create a self-signed certificate with the private key and signing request
openssl x509 -req -days 3650 -in rsaCertReq.csr -signkey rsaPrivate.pem -out rsaCert.crt

//Convert the certificate to DER format: the certificate contains the public key
openssl x509 -outform der -in rsaCert.crt -out rsaCert.der

//Export the private key and certificate to p12 file
openssl pkcs12 -export -out rsaPrivate.p12 -inkey rsaPrivate.pem -in rsaCert.crt
</code></pre>

<p>Now you have two files which are compatible with the iOS security framework: rsaCert.der (public key) and rsaPrivate.p12 (private key). The code below reads in the public key assuming the file is added to your bundle:</p>

<pre><code>- (SecKeyRef)getPublicKeyRef {

    NSString *resourcePath = [[NSBundle mainBundle] pathForResource:@""rsaCert"" ofType:@""der""];
    NSData *certData = [NSData dataWithContentsOfFile:resourcePath];
    SecCertificateRef cert = SecCertificateCreateWithData(NULL, (CFDataRef)certData);
    SecKeyRef key = NULL;
    SecTrustRef trust = NULL;
    SecPolicyRef policy = NULL;

    if (cert != NULL) {
        policy = SecPolicyCreateBasicX509();
        if (policy) {
            if (SecTrustCreateWithCertificates((CFTypeRef)cert, policy, &amp;trust) == noErr) {
                SecTrustResultType result;
                OSStatus res = SecTrustEvaluate(trust, &amp;result);

                //Check the result of the trust evaluation rather than the result of the API invocation.
                if (result == kSecTrustResultProceed || result == kSecTrustResultUnspecified) {
                    key = SecTrustCopyPublicKey(trust);
                }
            }
        }
    }
    if (policy) CFRelease(policy);
    if (trust) CFRelease(trust);
    if (cert) CFRelease(cert);
    return key;
}
</code></pre>

<p>To read in the private key use the following code:</p>

<pre><code>SecKeyRef getPrivateKeyRef() {
    NSString *resourcePath = [[NSBundle mainBundle] pathForResource:@""rsaPrivate"" ofType:@""p12""];
    NSData *p12Data = [NSData dataWithContentsOfFile:resourcePath];

    NSMutableDictionary * options = [[NSMutableDictionary alloc] init];

    SecKeyRef privateKeyRef = NULL;

    //change to the actual password you used here
    [options setObject:@""password_for_the_key"" forKey:(id)kSecImportExportPassphrase];

    CFArrayRef items = CFArrayCreate(NULL, 0, 0, NULL);

    OSStatus securityError = SecPKCS12Import((CFDataRef) p12Data,
                                             (CFDictionaryRef)options, &amp;items);

    if (securityError == noErr &amp;&amp; CFArrayGetCount(items) &gt; 0) {
        CFDictionaryRef identityDict = CFArrayGetValueAtIndex(items, 0);
        SecIdentityRef identityApp =
        (SecIdentityRef)CFDictionaryGetValue(identityDict,
                                             kSecImportItemIdentity);

        securityError = SecIdentityCopyPrivateKey(identityApp, &amp;privateKeyRef);
        if (securityError != noErr) {
            privateKeyRef = NULL;
        }
    }
    [options release];
    CFRelease(items);
    return privateKeyRef;
}
</code></pre>
","20116","<iphone><rsa><public-key><pem><der>","19","54","3","2019-03-01 10:09:12","17295321","1","20","374885","","2012-05-15 07:04:42","2012-05-14 08:41:23",""
"10579985","How can I get SecKeyRef from DER/PEM file","<p>I need to integrate my iPhone app with a system, and they require to encrypt data by a given public key, there are 3 files in 3 different format .xml .der and .pem, I have researched and found some articles about getting SecKeyRef from DER/PEM, but they are always return nil. Below is my code:</p>

<pre><code>NSString *pkFilePath = [[NSBundle mainBundle] pathForResource:@""PKFile"" ofType:@""der""];
NSData *pkData = [NSData dataWithContentsOfFile:pkFilePath]; 

SecCertificateRef   cert; 
cert = SecCertificateCreateWithData(NULL, (CFDataRef) pkData);
assert(cert != NULL);

OSStatus err;

    if (cert != NULL) {
        err = SecItemAdd(
                         (CFDictionaryRef) [NSDictionary dictionaryWithObjectsAndKeys:
                                            (id) kSecClassCertificate,  kSecClass, 
                                            (id) cert,                  kSecValueRef,
                                            nil
                                            ], 
                         NULL
                         );
        if ( (err == errSecSuccess) || (err == errSecDuplicateItem) ) {
            CFArrayRef certs = CFArrayCreate(kCFAllocatorDefault, (const void **) &amp;cert, 1, NULL); 
            SecPolicyRef policy = SecPolicyCreateBasicX509();
            SecTrustRef trust;
            SecTrustCreateWithCertificates(certs, policy, &amp;trust);
            SecTrustResultType trustResult;
            SecTrustEvaluate(trust, &amp;trustResult);
            if (certs) {
                CFRelease(certs);
            }
            if (trust) {
                CFRelease(trust);
            }
            return SecTrustCopyPublicKey(trust);
        }
    }
return NULL;
</code></pre>

<p>Problem happens at SecCertificateCreateWithData, it always return nil even through read file is ok.
Anybody has done this please help me, thanks!</p>

<p>EDIT: The cert file was MD5 signature.</p>
","

<p>Starting with iOS 10, it is actually possible to import PEM private keys w/o converting them to <em>PKCS#12</em> (which is a very universal container format for everything related to cryptography) and thus also w/o using OpenSSL on command line or statically linking apps with it. On macOS it's even possible since 10.7 using a different function than the ones mentioned here (but so far it doesn't exist for iOS). Exactly the way described below will also work on macOS 10.12 and later, though.</p>

<p>To import a certificate, it's enough to just strip the </p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN CERTIFICATE-----
</code></pre>

<p>and </p>

<pre class=""lang-none prettyprint-override""><code>-----END CERTIFICATE-----
</code></pre>

<p>lines, then run base64 decoding over the data left, the result is a certificate in standard DER format, which can just be fed to <code>SecCertificateCreateWithData()</code> to get a <code>SecCertificateRef</code>. This has always been working, also prior to iOS 10.</p>

<p>To import a private key, a little bit of extra work may be required. If the private key is wrapped with </p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN RSA PRIVATE KEY-----
</code></pre>

<p>then it is very easy. Again, the first and last line needs to be stripped, the remaining data needs to be base64 decoded and the result is a RSA key in <em>PKCS#1</em> format. This format can only hold RSA keys and it is directly readable, just feed the decoded data into <code>SecKeyCreateWithData()</code> to obtain a <code>SecKeyRef</code>. The <code>attributes</code> dictionary just need the following key/value pairs:</p>

<ul>
<li><code>kSecAttrKeyType</code>: <code>kSecAttrKeyTypeRSA</code></li>
<li><code>kSecAttrKeyClass</code>: <code>kSecAttrKeyClassPrivate</code> </li>
<li><code>kSecAttrKeySizeInBits</code>: <code>CFNumberRef</code> with then number of bits in the key (e.g. 1024, 2048, etc.) If not known, this information can actually be read from the raw key data, which is ASN.1 data (it's a bit beyond the scope of this answer, but I will provide some helpful links below about how to parse that format). <em>This value is maybe optional! In my tests it was actually not necessary to set this value; if absent, the API determined the value on its own and it was always set correctly later on.</em></li>
</ul>

<p>In case the private key is wrapped by <code>-----BEGIN PRIVATE KEY-----</code>, then the base64 encoded data is not in <em>PKCS#1</em> format but in <em>PKCS#8</em> format, however, this is a just a more generic container that can also hold non-RSA keys but for RSA keys the inner data of that container is equal to <em>PKCS#1</em>, so one could say for RSA keys <em>PKCS#8</em> is <em>PKCS#1</em> with an extra header and all you need to do is stripping that extra header. Just strip the first 26 bytes of the base64 decoded data and you have <em>PKCS#1</em> again. Yes, it's really that simple.</p>

<p>To learn more about PKCS#x formats in PEM encodings, <a href=""https://tls.mbed.org/kb/cryptography/asn1-key-structures-in-der-and-pem"" rel=""nofollow noreferrer"">have a look at this site</a>. To learn more about ASN.1 format, <a href=""https://www.obj-sys.com/asn1tutorial/node4.html"" rel=""nofollow noreferrer"">here's a good site for that</a>. And if you need a simple, yet powerful and interactive online ASN.1 parser to play around with different formats, one that can directly read PEM data, as well as ASN.1 in base64 and hexdump, <a href=""https://lapo.it/asn1js"" rel=""nofollow noreferrer"">try this site</a>.</p>

<p><strong>Very important:</strong> When adding a private key to keychain, that you created as above, please be aware that such a private key doesn't contain a public key hash, yet a public key hash is important for they keychain API to form an identity (<code>SecIdentityRef</code>), as using the public key hash is how the API finds the correct private key that belongs to an imported certificate (a <code>SecIdentityRef</code> is just a <code>SecKeyRef</code> of a private key and a <code>SecCertificateRef</code> of a cert forming a combined object and it's the public key hash, that binds them together). So when you plan to add the private key to keychain, be sure to set a public key hash manually, otherwise you won't ever be able to get an identity for it and without that you cannot use keychain API for tasks like signing or decrypting data. The public key hash must be stored in an attribute named <code>kSecAttrApplicationLabel</code> (stupid name, I know, but it's really not a label and nothing the user can ever see, check out the documentation). E.g.:</p>

<pre class=""lang-c prettyprint-override""><code>OSStatus error = SecItemAdd(
    (__bridge CFDictionaryRef)@{
        (__bridge NSString *)kSecClass: 
            (__bridge NSString *)kSecClassKey,
        (__bridge NSString *)kSecAttrApplicationLabel: 
             hashOfPublicKey, // hashOfPublicKey is NSData *
#if TARGET_OS_IPHONE
        (__bridge NSString *)kSecValueRef: 
            (__bridge id)privateKeyToAdd, // privateKeyToAdd is SecKeyRef
#else
        (__bridge NSString *)kSecUseItemList: 
              @[(__bridge id)privateKeyToAdd], // privateKeyToAdd is SecKeyRef
              // @[ ... ] wraps it into a NSArray object,
              // as kSecUseItemList expects an array of items
#endif
     },
     &amp;outReference // Can also be NULL,
                   // otherwise reference to added keychain entry
                   // that must be released with CFRelease()
);
</code></pre>
","20116","<iphone><rsa><public-key><pem><der>","19","8","3","2019-03-01 10:09:12","17295321","1","20","374885","","2012-05-15 07:04:42","2012-05-14 08:41:23",""
"10579985","How can I get SecKeyRef from DER/PEM file","<p>I need to integrate my iPhone app with a system, and they require to encrypt data by a given public key, there are 3 files in 3 different format .xml .der and .pem, I have researched and found some articles about getting SecKeyRef from DER/PEM, but they are always return nil. Below is my code:</p>

<pre><code>NSString *pkFilePath = [[NSBundle mainBundle] pathForResource:@""PKFile"" ofType:@""der""];
NSData *pkData = [NSData dataWithContentsOfFile:pkFilePath]; 

SecCertificateRef   cert; 
cert = SecCertificateCreateWithData(NULL, (CFDataRef) pkData);
assert(cert != NULL);

OSStatus err;

    if (cert != NULL) {
        err = SecItemAdd(
                         (CFDictionaryRef) [NSDictionary dictionaryWithObjectsAndKeys:
                                            (id) kSecClassCertificate,  kSecClass, 
                                            (id) cert,                  kSecValueRef,
                                            nil
                                            ], 
                         NULL
                         );
        if ( (err == errSecSuccess) || (err == errSecDuplicateItem) ) {
            CFArrayRef certs = CFArrayCreate(kCFAllocatorDefault, (const void **) &amp;cert, 1, NULL); 
            SecPolicyRef policy = SecPolicyCreateBasicX509();
            SecTrustRef trust;
            SecTrustCreateWithCertificates(certs, policy, &amp;trust);
            SecTrustResultType trustResult;
            SecTrustEvaluate(trust, &amp;trustResult);
            if (certs) {
                CFRelease(certs);
            }
            if (trust) {
                CFRelease(trust);
            }
            return SecTrustCopyPublicKey(trust);
        }
    }
return NULL;
</code></pre>

<p>Problem happens at SecCertificateCreateWithData, it always return nil even through read file is ok.
Anybody has done this please help me, thanks!</p>

<p>EDIT: The cert file was MD5 signature.</p>
","<p>After hours of effort researching online with the help of this post, I finally get it working perfectly. Here is the notes with working Swift code of the most current version. I hope it can help someone!</p>

<ol>
<li><p>Received a certificate in the base64 encoded string sandwiched between header and tail like this (PEM format):</p>

<pre><code>-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
</code></pre></li>
<li><p>strip out the header and the tail, such as  </p>

<pre><code>// remove the header string  
let offset = (""-----BEGIN CERTIFICATE-----"").characters.count  
let index = certStr.index(cerStr.startIndex, offsetBy: offset+1)  
cerStr = cerStr.substring(from: index)  

// remove the tail string 
let tailWord = ""-----END CERTIFICATE-----""   
if let lowerBound = cerStr.range(of: tailWord)?.lowerBound {  
cerStr = cerStr.substring(to: lowerBound)  
}
</code></pre></li>
<li><p>decode base64 string to NSData:</p>

<pre><code>let data = NSData(base64Encoded: cerStr, 
   options:NSData.Base64DecodingOptions.ignoreUnknownCharacters)!  
</code></pre></li>
<li><p>Convert it from NSdata format to SecCertificate:</p>

<pre><code>let cert = SecCertificateCreateWithData(kCFAllocatorDefault, data)
</code></pre></li>
<li><p>Now, this cert can be used to compare with the certificate received from the urlSession trust: </p>

<pre><code>certificateFromUrl = SecTrustGetCertificateAtIndex(...)
if cert == certificate {
}
</code></pre></li>
</ol>
","20116","<iphone><rsa><public-key><pem><der>","19","2","3","2019-03-01 10:09:12","17295321","1","20","374885","","2012-05-15 07:04:42","2012-05-14 08:41:23",""
"14352758","Android In App Billing: securing application public key","<p>From Android In App Billing version 3 (TrivialDrive)sample application coming with sdk</p>

<h3>MainActivity.java</h3>

<pre><code>/* base64EncodedPublicKey should be YOUR APPLICATION'S PUBLIC KEY
 * (that you got from the Google Play developer console). This is not your
 * developer public key, it's the *app-specific* public key.
 *
 * Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key.  The key itself is not secret information, but we don't
 * want to make it easy for an attacker to replace the public key with one
 * of their own and then fake messages from the server.
 */
String base64EncodedPublicKey = ""CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE"";
</code></pre>

<p>Well I am not sure I understand this security measure. I know how to get the application public key (which is already base 64 encoded) from Google Play Developer Console. </p>

<p>What I am not understanding is this part</p>

<pre><code> /* Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key
 */
</code></pre>

<p>As far as I know, this public key is a constant string, which is given from Google during application upload process. </p>

<p>How can we create the same key programmatically using any bit manipulation process? Has someone done it before? Is there any sample code on how to do this?</p>
","<p>You can split it into pieces like this</p>

<pre><code>String piece1 = ""SDFGJKGB4UIH234WE/FRT23RSDF/3DFUISDFVWE"";
String piece2 = ""SDFGJKGB4UIHUISDFVWE"";
String piece3 = ""BDYASGBDNAWGRET24IYE23das4saGBENWKD"";
String piece4 = ""432423SDF23R/+SDDS"";

mHelper = new IabHelper(this, piece1 + piece2 + piece3 + piece4);
</code></pre>

<p>Any kind of manipulations will do.</p>

<p>You can't hide the public key perfectly from the attacker, you just need to manipulate the string to confuse a attacker a little bit</p>

<p>You can add some strings and remove it when it's needed or split it into chunks.</p>
","20075","<android><security><bit-manipulation><in-app-billing><public-key>","61","5","7","2019-04-07 14:18:40","14353659","4","24","640731","","2013-01-16 07:05:18","2013-01-16 06:47:53",""
"14352758","Android In App Billing: securing application public key","<p>From Android In App Billing version 3 (TrivialDrive)sample application coming with sdk</p>

<h3>MainActivity.java</h3>

<pre><code>/* base64EncodedPublicKey should be YOUR APPLICATION'S PUBLIC KEY
 * (that you got from the Google Play developer console). This is not your
 * developer public key, it's the *app-specific* public key.
 *
 * Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key.  The key itself is not secret information, but we don't
 * want to make it easy for an attacker to replace the public key with one
 * of their own and then fake messages from the server.
 */
String base64EncodedPublicKey = ""CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE"";
</code></pre>

<p>Well I am not sure I understand this security measure. I know how to get the application public key (which is already base 64 encoded) from Google Play Developer Console. </p>

<p>What I am not understanding is this part</p>

<pre><code> /* Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key
 */
</code></pre>

<p>As far as I know, this public key is a constant string, which is given from Google during application upload process. </p>

<p>How can we create the same key programmatically using any bit manipulation process? Has someone done it before? Is there any sample code on how to do this?</p>
","<p>Something like this:</p>

<pre><code>String Base64EncodedPublicKey key = ""Ak3jfkd"" + GetMiddleBit() + ""D349824"";
</code></pre>

<p>or </p>

<pre><code>String Base64EncodedPublicKey key = 
         DecrementEachletter(""Bl4kgle"") + GetMiddleBit() + ReverseString(""D349824"");
</code></pre>

<p>or anything that doesn't put the key in base64 plaintext in a single string. Probably also something that doesn't store the key in base64 would be a good idea too, since raw base64 text fragments are pretty easy to spot.</p>

<p>It's not a particularly GOOD way to protect the key. But it protects against a trivial attack where somebody just searches through literal strings in you APK looking for something that looks like a base64-encoded public key. At least you make the #$<em>#</em>$ers work a little bit.</p>

<p>Presumably evil people can do bad things if they identify your public key. Google seems to think so, apparently. I can guess what this step does, but I'm not sure I really want to speculate on that in an open forum, and give anyone any ideas.  You want to do it though.</p>

<p>The basic plot summary would be that you're making it more difficult for somebody to write an application that programmatically de-LVLs an applciation.</p>

<p>One assumes that anyone who's doing this makes a living cracking 20 or 30,000 android apps and republishing them. Chances are, I suppose that they're not going to take the extra ten minutes to add your app to the list of 20,000 Android apps that have already been broken by a program, if they actually have to do a little bit of manual work. Unless you have a top tier application. And then the battle is potentially endless, and probably ultimately futile.</p>

<p>Splitting the key into consecutive chunks (as proposed in another answer) probably isn't good enough. Because the key will end up in consecutive strings in the string constant tables in the APK. Too easy to find that with a program.</p>
","20075","<android><security><bit-manipulation><in-app-billing><public-key>","61","43","7","2019-04-07 14:18:40","14353659","4","24","640731","","2013-01-16 07:05:18","2013-01-16 06:47:53",""
"14352758","Android In App Billing: securing application public key","<p>From Android In App Billing version 3 (TrivialDrive)sample application coming with sdk</p>

<h3>MainActivity.java</h3>

<pre><code>/* base64EncodedPublicKey should be YOUR APPLICATION'S PUBLIC KEY
 * (that you got from the Google Play developer console). This is not your
 * developer public key, it's the *app-specific* public key.
 *
 * Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key.  The key itself is not secret information, but we don't
 * want to make it easy for an attacker to replace the public key with one
 * of their own and then fake messages from the server.
 */
String base64EncodedPublicKey = ""CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE"";
</code></pre>

<p>Well I am not sure I understand this security measure. I know how to get the application public key (which is already base 64 encoded) from Google Play Developer Console. </p>

<p>What I am not understanding is this part</p>

<pre><code> /* Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key
 */
</code></pre>

<p>As far as I know, this public key is a constant string, which is given from Google during application upload process. </p>

<p>How can we create the same key programmatically using any bit manipulation process? Has someone done it before? Is there any sample code on how to do this?</p>
","<p>An alternative is to do some basic transforms on the key.</p>

<pre><code>// Replace this with your encoded key.
String base64EncodedPublicKey = """";

// Get byte sequence to play with.
byte[] bytes = base64EncodedPublicKey.getBytes();

// Swap upper and lower case letters.
for (int i = 0; i &lt; bytes.length; i++) {
    if(bytes[i] &gt;= 'A' &amp;&amp; bytes[i] &lt;= 'Z')
        bytes[i] = (byte)( 'a' + (bytes[i] - 'A'));
    else if(bytes[i] &gt;= 'a' &amp;&amp; bytes[i] &lt;= 'z')
        bytes[i] = (byte)( 'A' + (bytes[i] - 'a'));
}

// Assign back to string.
base64EncodedPublicKey = new String( bytes );
</code></pre>

<p>So the idea would be to put your original key in as <code>base64EncodedPublicKey</code> and run the above code, it would swap lower and uppercase letters and put the result back in <code>base64EncodedPublicKey</code>. You can then copy the result from the debugger and paste it into code as the original <code>base64EncodedPublicKey</code> value. At this point your key will be transformed (upper and lower case switched) and at runtime it'll fix it back to the correct casing, and continue to work.</p>

<p>The above is obviously quite a basic transcode, but you can be more creative, reverse the ordering of A-Z, swap odd and even numbers, swap vowels for even numbers. The issue here is that if I put code in the above snippet that does a bunch of more interesting transcodes, and then everyone copy and pastes that into their projects, a cracker will easily be able to see and use the transcode themselves (from looking at this post)! So you just have to come up with a few transforms yourself.</p>

<p>I've purposely made the above work in both direction (so if you run it twice, you'll get your original value back) as it makes it easy to run the algorithm on your original key. I think it is kind of neat it looks like the real key is sitting there as plain text, a casual cracker may try to switch this and then be confused when it doesn't work.</p>
","20075","<android><security><bit-manipulation><in-app-billing><public-key>","61","13","7","2019-04-07 14:18:40","14353659","4","24","640731","","2013-01-16 07:05:18","2013-01-16 06:47:53",""
"14352758","Android In App Billing: securing application public key","<p>From Android In App Billing version 3 (TrivialDrive)sample application coming with sdk</p>

<h3>MainActivity.java</h3>

<pre><code>/* base64EncodedPublicKey should be YOUR APPLICATION'S PUBLIC KEY
 * (that you got from the Google Play developer console). This is not your
 * developer public key, it's the *app-specific* public key.
 *
 * Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key.  The key itself is not secret information, but we don't
 * want to make it easy for an attacker to replace the public key with one
 * of their own and then fake messages from the server.
 */
String base64EncodedPublicKey = ""CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE"";
</code></pre>

<p>Well I am not sure I understand this security measure. I know how to get the application public key (which is already base 64 encoded) from Google Play Developer Console. </p>

<p>What I am not understanding is this part</p>

<pre><code> /* Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key
 */
</code></pre>

<p>As far as I know, this public key is a constant string, which is given from Google during application upload process. </p>

<p>How can we create the same key programmatically using any bit manipulation process? Has someone done it before? Is there any sample code on how to do this?</p>
","<p>Is someone is really need you private key? I think the whole idea is <strong>replace</strong> it. IMHO any manipulations are useless. The only thing to do by evil person is just initialize variable with correct (his own key) value one line begore google API call.</p>
","20075","<android><security><bit-manipulation><in-app-billing><public-key>","61","-3","7","2019-04-07 14:18:40","14353659","4","24","640731","","2013-01-16 07:05:18","2013-01-16 06:47:53",""
"14352758","Android In App Billing: securing application public key","<p>From Android In App Billing version 3 (TrivialDrive)sample application coming with sdk</p>

<h3>MainActivity.java</h3>

<pre><code>/* base64EncodedPublicKey should be YOUR APPLICATION'S PUBLIC KEY
 * (that you got from the Google Play developer console). This is not your
 * developer public key, it's the *app-specific* public key.
 *
 * Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key.  The key itself is not secret information, but we don't
 * want to make it easy for an attacker to replace the public key with one
 * of their own and then fake messages from the server.
 */
String base64EncodedPublicKey = ""CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE"";
</code></pre>

<p>Well I am not sure I understand this security measure. I know how to get the application public key (which is already base 64 encoded) from Google Play Developer Console. </p>

<p>What I am not understanding is this part</p>

<pre><code> /* Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key
 */
</code></pre>

<p>As far as I know, this public key is a constant string, which is given from Google during application upload process. </p>

<p>How can we create the same key programmatically using any bit manipulation process? Has someone done it before? Is there any sample code on how to do this?</p>
","<p>What I did was to transform the key into a char array, split it in two and then reconstruct it when needed like this:</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_shop);

    char[] base64KeyByteArray = ArrayUtils.addAll(getPublicKeyChunk1(), getPublicKeyChunk2());

    Log.d(TAG, String.valueOf(base64KeyByteArray));
}

private char[] getPublicKeyChunk1() {
    return new char[]{82, 73, 67, 66, 73, 106, 65, 78, 66, 103, 107, 113, 104, 107,
            105, 71, 57, 119, 79, 66, 65, 81, 69, 70, 65, 65, 79, 67, 65, 81, 56, 65, 77, 73,
            73, 66, 67, 103, 75, 67, 65, 81, 69, 65, 121, 55, 81, 76, 122, 67, 105, 80, 65,
            110, 105, 101, 72, 66, 53, 57};
}

private char[] getPublicKeyChunk2() {
    return new char[]{82, 43, 68, 47, 79, 121, 122, 110, 85, 67, 118, 89, 108, 120, 43, 49,
            80, 100, 67, 108, 55, 90, 57, 103, 119, 57, 87, 78, 79, 111, 53, 101, 80, 71,
            117, 74, 104, 82, 87, 97, 100};
}
</code></pre>
","20075","<android><security><bit-manipulation><in-app-billing><public-key>","61","2","7","2019-04-07 14:18:40","14353659","4","24","640731","","2013-01-16 07:05:18","2013-01-16 06:47:53",""
"14352758","Android In App Billing: securing application public key","<p>From Android In App Billing version 3 (TrivialDrive)sample application coming with sdk</p>

<h3>MainActivity.java</h3>

<pre><code>/* base64EncodedPublicKey should be YOUR APPLICATION'S PUBLIC KEY
 * (that you got from the Google Play developer console). This is not your
 * developer public key, it's the *app-specific* public key.
 *
 * Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key.  The key itself is not secret information, but we don't
 * want to make it easy for an attacker to replace the public key with one
 * of their own and then fake messages from the server.
 */
String base64EncodedPublicKey = ""CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE"";
</code></pre>

<p>Well I am not sure I understand this security measure. I know how to get the application public key (which is already base 64 encoded) from Google Play Developer Console. </p>

<p>What I am not understanding is this part</p>

<pre><code> /* Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key
 */
</code></pre>

<p>As far as I know, this public key is a constant string, which is given from Google during application upload process. </p>

<p>How can we create the same key programmatically using any bit manipulation process? Has someone done it before? Is there any sample code on how to do this?</p>
","<h2>Follow 3 simple steps to secure API/Secret key</h2>

<p>We can use Gradle to secure the API key or Secret key. Check my <a href=""https://stackoverflow.com/a/47553410/2024527"">answer</a>.</p>
","20075","<android><security><bit-manipulation><in-app-billing><public-key>","61","0","7","2019-04-07 14:18:40","14353659","4","24","640731","","2013-01-16 07:05:18","2013-01-16 06:47:53",""
"14352758","Android In App Billing: securing application public key","<p>From Android In App Billing version 3 (TrivialDrive)sample application coming with sdk</p>

<h3>MainActivity.java</h3>

<pre><code>/* base64EncodedPublicKey should be YOUR APPLICATION'S PUBLIC KEY
 * (that you got from the Google Play developer console). This is not your
 * developer public key, it's the *app-specific* public key.
 *
 * Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key.  The key itself is not secret information, but we don't
 * want to make it easy for an attacker to replace the public key with one
 * of their own and then fake messages from the server.
 */
String base64EncodedPublicKey = ""CONSTRUCT_YOUR_KEY_AND_PLACE_IT_HERE"";
</code></pre>

<p>Well I am not sure I understand this security measure. I know how to get the application public key (which is already base 64 encoded) from Google Play Developer Console. </p>

<p>What I am not understanding is this part</p>

<pre><code> /* Instead of just storing the entire literal string here embedded in the
 * program,  construct the key at runtime from pieces or
 * use bit manipulation (for example, XOR with some other string) to hide
 * the actual key
 */
</code></pre>

<p>As far as I know, this public key is a constant string, which is given from Google during application upload process. </p>

<p>How can we create the same key programmatically using any bit manipulation process? Has someone done it before? Is there any sample code on how to do this?</p>
","<p>Building on <a href=""https://stackoverflow.com/a/28626982/6563022"">Steven Craft's Answer</a> with help i got from <a href=""https://stackoverflow.com/a/55557274/6563022"">gidds</a></p>

<p>Here's a cleaner code. 
In addition it swaps out digit (0-9) for ascii character (37-46) and vice versa. Written in Kotlin.</p>

<pre><code> val string = ""Hello World 012345679 %&amp;()""
 fun String.swapCase() = map {
        when {
            it.isUpperCase() -&gt; it.toLowerCase()
            it.isLowerCase() -&gt; it.toUpperCase()
            it.isDigit() -&gt; (37 + (it.toInt() - 48)).toChar()
            it.isDefined() -&gt; if (it.toInt() &gt;= 37 &amp;&amp; it.toInt() &lt;= 46) (48 + (it.toInt() - 37)).toChar() else it
            else -&gt; it
        }
    }.joinToString("""")
    println(string.swapCase()) // hELLO wORLD %&amp;'()*+,. 0134
</code></pre>

<p>Use this -> <a href=""https://edge-developer.github.io/BillingGenerator/"" rel=""nofollow noreferrer"">https://edge-developer.github.io/BillingGenerator/</a> to generate all those in a fly</p>
","20075","<android><security><bit-manipulation><in-app-billing><public-key>","61","1","7","2019-04-07 14:18:40","14353659","4","24","640731","","2013-01-16 07:05:18","2013-01-16 06:47:53",""
"21160774","GitHub Error: Key already in use","<p>I have created two GitHub accounts.  One for my work user and one for my personal self.  I needed to do catch up on some work and as such cloned my work repo onto my personal PC.  In order to do simple ""git push origin master"" commits without entering my username and password the whole time I simply want to add my public key from my home pc to the work repo.  However Github gives this error:</p>

<pre><code>Error: Key already use
</code></pre>

<p>After a bit of Googling I came across this <a href=""https://help.github.com/articles/error-key-already-in-use"" rel=""noreferrer"">link</a> which states ""To resolve the issue, remove the key from the other account or repository and add it to your account""  Of course there is a duplicate key as I've added my home public key to github so that I can code on my own personal projects. After all I want to be able to code to my work repo using both my work pc and personal pc.</p>

<p>How can you add multiple ""same"" public keys without Github throwing that error and also why in the world, is that error thrown in the first place?</p>
","<p>You can create one more key pair, say <code>id_rsa_personal.pub</code>, and add it to the Github account.</p>

<p>Next, create/edit the <code>.ssh/config</code> file. </p>

<pre><code># Default GitHub
Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa

Host github-public
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa_public

Host github-personal
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_rsa_personal
</code></pre>

<p>The above file will help you to use more than one Github account. For background info, refer to the answers to <a href=""https://stackoverflow.com/questions/2419566/best-way-to-use-multiple-ssh-private-keys-on-one-client"">this question</a>.</p>

<p>Next, you will need to alter your <code>.git/config</code> remote url to point to:  </p>

<p><code>git@github-personal:&lt;gh_username&gt;/&lt;gh_reponame&gt;.git</code></p>

<p>Rather than the usual: </p>

<p><code>git@github.com:&lt;gh_username&gt;/&lt;gh_reponame&gt;.git</code></p>
","19495","<git><github><ssh><ssh-keys><public-key>","31","44","4","2019-08-26 16:46:26","33642472","5","15","832230","","2016-10-29 19:53:37","2014-01-16 11:40:39",""
"21160774","GitHub Error: Key already in use","<p>I have created two GitHub accounts.  One for my work user and one for my personal self.  I needed to do catch up on some work and as such cloned my work repo onto my personal PC.  In order to do simple ""git push origin master"" commits without entering my username and password the whole time I simply want to add my public key from my home pc to the work repo.  However Github gives this error:</p>

<pre><code>Error: Key already use
</code></pre>

<p>After a bit of Googling I came across this <a href=""https://help.github.com/articles/error-key-already-in-use"" rel=""noreferrer"">link</a> which states ""To resolve the issue, remove the key from the other account or repository and add it to your account""  Of course there is a duplicate key as I've added my home public key to github so that I can code on my own personal projects. After all I want to be able to code to my work repo using both my work pc and personal pc.</p>

<p>How can you add multiple ""same"" public keys without Github throwing that error and also why in the world, is that error thrown in the first place?</p>
","<p>John commented that it didn't work for him.</p>

<p>Perhaps the step you're missing is you need to alter your .git/config remote url to point to <code>git@github-personal/&lt;reponame&gt;.git</code> etc.. rather than the usual <code>git@github.com/&lt;reponame&gt;.git</code></p>
","19495","<git><github><ssh><ssh-keys><public-key>","31","7","4","2019-08-26 16:46:26","33642472","5","15","832230","","2016-10-29 19:53:37","2014-01-16 11:40:39",""
"21160774","GitHub Error: Key already in use","<p>I have created two GitHub accounts.  One for my work user and one for my personal self.  I needed to do catch up on some work and as such cloned my work repo onto my personal PC.  In order to do simple ""git push origin master"" commits without entering my username and password the whole time I simply want to add my public key from my home pc to the work repo.  However Github gives this error:</p>

<pre><code>Error: Key already use
</code></pre>

<p>After a bit of Googling I came across this <a href=""https://help.github.com/articles/error-key-already-in-use"" rel=""noreferrer"">link</a> which states ""To resolve the issue, remove the key from the other account or repository and add it to your account""  Of course there is a duplicate key as I've added my home public key to github so that I can code on my own personal projects. After all I want to be able to code to my work repo using both my work pc and personal pc.</p>

<p>How can you add multiple ""same"" public keys without Github throwing that error and also why in the world, is that error thrown in the first place?</p>
","<p>The key could be already in use on other github projects as deploy key, that's a bit tricky to find but run:</p>

<p><code>ssh -T -ai ~/.ssh/id_rsa git@github.com</code> </p>

<p>to find the used key, delete it and then readd it again in the right user/repo. that was very useful for me</p>

<p>from: <a href=""https://help.github.com/articles/error-key-already-in-use/#finding-where-the-key-has-been-used"" rel=""noreferrer"">https://help.github.com/articles/error-key-already-in-use/#finding-where-the-key-has-been-used</a></p>

<hr>

<p>edit: as pointed out by @mikhail-morgunov, this doesn't works all the time, you should really use this snippet only if the default <code>id_rsa</code> SSH private key is your github's default one</p>

<p>this is a snippet where the key name has been extracted: </p>

<p><code>ssh -T -ai ~/.ssh/KEY_NAME git@github.com</code> </p>

<p>change <code>KEY_NAME</code> with the name of your SSH private key and you will be good to go</p>
","19495","<git><github><ssh><ssh-keys><public-key>","31","26","4","2019-08-26 16:46:26","33642472","5","15","832230","","2016-10-29 19:53:37","2014-01-16 11:40:39",""
"21160774","GitHub Error: Key already in use","<p>I have created two GitHub accounts.  One for my work user and one for my personal self.  I needed to do catch up on some work and as such cloned my work repo onto my personal PC.  In order to do simple ""git push origin master"" commits without entering my username and password the whole time I simply want to add my public key from my home pc to the work repo.  However Github gives this error:</p>

<pre><code>Error: Key already use
</code></pre>

<p>After a bit of Googling I came across this <a href=""https://help.github.com/articles/error-key-already-in-use"" rel=""noreferrer"">link</a> which states ""To resolve the issue, remove the key from the other account or repository and add it to your account""  Of course there is a duplicate key as I've added my home public key to github so that I can code on my own personal projects. After all I want to be able to code to my work repo using both my work pc and personal pc.</p>

<p>How can you add multiple ""same"" public keys without Github throwing that error and also why in the world, is that error thrown in the first place?</p>
","<p>you can use the same ssh key for different github repositories but cannot use the same ssh key for many repositories (i.e,same repository from different logins or from forked) as github will not allow same deploy key more than once for a repository<br></p>

<p>You can create a different key in your machine without disturbing your existing keys like:<code>ssh-keygen -t rsa -C ""your_email@example.com""</code> <br>
Now provide your file name to identify your key for the repository</p>

<pre><code>Enter file in which to save the key (/home/demo/.ssh/id_rsa):/home/demo/.ssh/id_rsa_mykey&lt;br&gt;
</code></pre>

<p>See <a href=""https://developer.github.com/guides/managing-deploy-keys/#deploy-keys"" rel=""nofollow noreferrer"">https://developer.github.com/guides/managing-deploy-keys/#deploy-keys</a> for details.</p>
","19495","<git><github><ssh><ssh-keys><public-key>","31","2","4","2019-08-26 16:46:26","33642472","5","15","832230","","2016-10-29 19:53:37","2014-01-16 11:40:39",""
"11832022","Why are ""large prime numbers"" used in RSA/encryption?","<p>I've learned the theory of public key encryption but I'm missing the connection to the physical world. e.g.</p>

<p>I've been told that good RSA encryption should rely on prime numbers with 300 decimal digits but why? who came up with this number? How long it will take to break such encryption (statistics about different machines).</p>

<p>I've tried Google, but couldn't find what I wanted. anyone?</p>

<p>thanks</p>
","<p>The key of asymmetric cryptography is to have an asymmetric function which allow decrypting message encrypted by the asymmetric key, without allowing to find the other key. In RSA, the function used is based on factorization of prime numbers however it is not the only option (<a href=""http://en.wikipedia.org/wiki/Elliptic_curve_cryptography"">Elliptic curve</a> is another one for example).</p>

<p>So, basically you need two prime numbers for generating a RSA key pair. If you are able to factorize the public key and find these prime numbers, you will then be able to find the private key. <strong>The whole security of RSA is based on the fact that it is not easy to factorize large composite numbers</strong>, that's why the length of the key highly change the robustness of the RSA algorithm.</p>

<p>There are competitions to factorize large prime numbers with calculators each years with nice price. The last step of factorizing RSA key was done <a href=""http://en.wikipedia.org/wiki/RSA_Factoring_Challenge"">in <strong>2009 by factorizing 768 bits</a> keys</strong>. That's why at least 2048 bit keys should be used now.</p>

<p>As usual, <a href=""http://en.wikipedia.org/wiki/RSA_%28algorithm%29"">Wikipedia</a> is a good reference on RSA.</p>
","19453","<encryption><rsa><public-key>","10","11","3","2013-06-24 05:04:33","11832326","1","2","","user166390","2012-08-06 16:16:05","2012-08-06 16:12:22",""
"11832022","Why are ""large prime numbers"" used in RSA/encryption?","<p>I've learned the theory of public key encryption but I'm missing the connection to the physical world. e.g.</p>

<p>I've been told that good RSA encryption should rely on prime numbers with 300 decimal digits but why? who came up with this number? How long it will take to break such encryption (statistics about different machines).</p>

<p>I've tried Google, but couldn't find what I wanted. anyone?</p>

<p>thanks</p>
","<p>RSA uses the idea of one-way math functions, so that it's easy to encrypt and decrypt if you have the key, but hard (as in it takes lots and lots of CPU cycles) to decrypt if you don't have the key. Even before they thought of using prime numbers, mathematicians identified the need for a one-way function.</p>

<p>The first method they hit upon was the idea that if your ""key"" is a prime number, and your message is another number, then you can encrypt by multiplying the two together. Someone with the key can easily divide out the prime number and get the message, but for someone without the prime number, figuring out the prime number key is hard.</p>
","19453","<encryption><rsa><public-key>","10","-2","3","2013-06-24 05:04:33","11832326","1","2","","user166390","2012-08-06 16:16:05","2012-08-06 16:12:22",""
"11832022","Why are ""large prime numbers"" used in RSA/encryption?","<p>I've learned the theory of public key encryption but I'm missing the connection to the physical world. e.g.</p>

<p>I've been told that good RSA encryption should rely on prime numbers with 300 decimal digits but why? who came up with this number? How long it will take to break such encryption (statistics about different machines).</p>

<p>I've tried Google, but couldn't find what I wanted. anyone?</p>

<p>thanks</p>
","<p>All public key algorithms are based on <a href=""http://en.wikipedia.org/wiki/Trapdoor_function"" rel=""nofollow noreferrer"">trapdoor functions</a>, that is, mathematical constructs that are ""easy"" to compute in one way, but ""hard"" to reverse unless you have also some additional information (used as private key) at which point also the reverse becomes ""easy"".</p>

<p>""Easy"" and ""hard"" are just qualitative adjectives that are always more formally defined in terms of <a href=""http://en.wikipedia.org/wiki/Computational_complexity_theory"" rel=""nofollow noreferrer"">computational complexity</a>. ""Hard"" very often refers to computations that cannot be solved in polynomial time <strong>O(n<sup>x</sup>)</strong> for some fixed <strong>x</strong> and where <strong>n</strong> is the input data.</p>

<p>In the case of RSA, the ""easy"" function is the modular exponentiation <em>C = M<sup>e</sup> mod N</em> where the factors of <em>N</em> are kept secret. The ""hard"" problem is to find the <em>e</em>-th root of C (that is, <em>M</em>). Of course, ""hard"" does not mean that it is <em>always</em> hard, but (intuitively) that increasing the size of <em>N</em> by a certain factor increases the complexity by a much larger factor.</p>

<p>The sizes of the modulus which are recommended (2048 bits, or 617 decimal digits) relate to the availability of computation power at present time, so that if you stick to them you are assured that it will be extremely expensive for the attacker to break it. For more details, I should refer you to <a href=""https://crypto.stackexchange.com/questions/1978/how-big-an-rsa-key-is-considered-secure-today/1982#1982"">a brilliant answer on cryptography.SE</a> (go and upvote :-)).</p>

<p>Finally, in order to have a trapdoor, <em>N</em> is built so as to be a composite number. It theory, for improved performance, N may have more than 2 factors, but the general security rule is that all factors must be balanced and have roughly the same size. That means that if you have <em>K</em> factors, and <em>N</em> is <em>B</em> bits long, each factor is roughly <em>B/K</em> bits longs.</p>

<p>This problem to solve is not the same as the <a href=""http://en.wikipedia.org/wiki/Integer_factorization"" rel=""nofollow noreferrer"">integer factorization problem</a> though. The two are related in that if you manage to factor <em>N</em> you can compute the private key by re-doing what the party that generated the key did. Typically, the exponent <em>e</em> being used is very small (3); it cannot be excluded that someday <a href=""http://upload.wikimedia.org/wikipedia/en/thumb/1/16/Drevil_million_dollars.jpg/200px-Drevil_million_dollars.jpg"" rel=""nofollow noreferrer"">somebody</a> devises an algorithm to compute the <em>e</em>-th without factoring <em>N</em>.</p>

<p>EDIT: Corrected the number of decimal digits for the modulus of a 2048 bits RSA key.</p>
","19453","<encryption><rsa><public-key>","10","9","3","2013-06-24 05:04:33","11832326","1","2","","user166390","2012-08-06 16:16:05","2012-08-06 16:12:22",""
"16627069","Public key authentication issues on cygwin","<p>I've been trying ""ssh localhost"" on cygwin (I use WIndows 7), but it keeps asking for the password. </p>

<p>When I did ""ssh -vvv localhost"", I found out that the public key authentications were not happening (or failing). Hence, it was asking for the password.</p>

<pre><code>debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug3: start over, passed a different list publickey,password,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /home/xxxxxxxx/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug1: Authentications that can continue: publickey,password,keyboard-interactive
</code></pre>

<p><strong>I'm not sure if it is unable to read the authorized_keys file, or if there is a timeout issue with this, or did the authentication fail? Is there any way to get more details?</strong></p>

<p>I have done the following steps:</p>

<ul>
<li>ssh-host-config. Answered yes to all.</li>
<li>Generated the RSA key and added it to the authorized_keys file.</li>
<li>net start sshd</li>
<li>ssh localhost</li>
</ul>

<p>These are the permissions:</p>

<pre><code>-rw------- 1 xxxxxxxx mkgroup  402 May 18 16:34 authorized_keys
-rw------- 1 xxxxxxxx mkgroup 1675 May 18 16:33 id_rsa
-rw-r--r-- 1 xxxxxxxx mkgroup  402 May 18 16:33 id_rsa.pub
-rw-r--r-- 1 xxxxxxxx mkgroup  171 May 18 14:33 known_hosts
</code></pre>

<p>There are a couple of issues as well:
 - The group is displayed as mkgroup.
 - The user ""xxxxxxxx"" does not exist in the localhost, I guess. 
   It was not displayed in ""net user sshd"". ""xxxxxxxx"" is a Domain account. 
   Could this be causing the public key authentication issue?</p>

<p>Just to see if there is any difference in the output, I deleted the authorized_keys file and tried. There was no difference in the output. It still sends a packet and proceeds to the next mode of authentication. There is no error message. Is there any other way to get more details (I'm a Cygwin and SSH n00b)? I would like to find it fails while reading the authorized_keys file.</p>
","<p>At the very least you need to</p>

<pre><code>chmod 700 id_rsa
</code></pre>

<p>This is 
<a href=""http://github.com/svnpenn/dotfiles/blob/8ff5263/bootstrap.sh"" rel=""nofollow"">my setup</a>
if it helps</p>

<pre>
-rwx------ 1 Steven None 1675 May 17 12:49 id_rsa
-rwx------ 1 Steven None  399 May 17 12:49 id_rsa.pub
-rwx------ 1 Steven None  803 May 18 01:13 known_hosts
</pre>
","19145","<ssh><cygwin><localhost><public-key>","8","0","5","2018-07-06 17:08:00","","1","2","2382854","","2013-11-17 07:12:20","2013-05-18 17:29:52",""
"16627069","Public key authentication issues on cygwin","<p>I've been trying ""ssh localhost"" on cygwin (I use WIndows 7), but it keeps asking for the password. </p>

<p>When I did ""ssh -vvv localhost"", I found out that the public key authentications were not happening (or failing). Hence, it was asking for the password.</p>

<pre><code>debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug3: start over, passed a different list publickey,password,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /home/xxxxxxxx/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug1: Authentications that can continue: publickey,password,keyboard-interactive
</code></pre>

<p><strong>I'm not sure if it is unable to read the authorized_keys file, or if there is a timeout issue with this, or did the authentication fail? Is there any way to get more details?</strong></p>

<p>I have done the following steps:</p>

<ul>
<li>ssh-host-config. Answered yes to all.</li>
<li>Generated the RSA key and added it to the authorized_keys file.</li>
<li>net start sshd</li>
<li>ssh localhost</li>
</ul>

<p>These are the permissions:</p>

<pre><code>-rw------- 1 xxxxxxxx mkgroup  402 May 18 16:34 authorized_keys
-rw------- 1 xxxxxxxx mkgroup 1675 May 18 16:33 id_rsa
-rw-r--r-- 1 xxxxxxxx mkgroup  402 May 18 16:33 id_rsa.pub
-rw-r--r-- 1 xxxxxxxx mkgroup  171 May 18 14:33 known_hosts
</code></pre>

<p>There are a couple of issues as well:
 - The group is displayed as mkgroup.
 - The user ""xxxxxxxx"" does not exist in the localhost, I guess. 
   It was not displayed in ""net user sshd"". ""xxxxxxxx"" is a Domain account. 
   Could this be causing the public key authentication issue?</p>

<p>Just to see if there is any difference in the output, I deleted the authorized_keys file and tried. There was no difference in the output. It still sends a packet and proceeds to the next mode of authentication. There is no error message. Is there any other way to get more details (I'm a Cygwin and SSH n00b)? I would like to find it fails while reading the authorized_keys file.</p>
","<p>It appears that there are some problems with your cygwin setup, which is why the user/group is not showing up correctly.  You need to run mkgroup to generate your /etc/group, and possibly mkpasswd as well.   I had a similar problem - I had to run mkpasswd to regenerate my /etc/passwd.  After running mkpasswd, I could finally ssh into my localhost.  It's a shame the debug info does not log enough info to easily diagnose the problem.</p>

<p>This page describes more about Windows security in cygwin: <a href=""http://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-setuid-overview"" rel=""nofollow"">http://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-setuid-overview</a></p>
","19145","<ssh><cygwin><localhost><public-key>","8","0","5","2018-07-06 17:08:00","","1","2","2382854","","2013-11-17 07:12:20","2013-05-18 17:29:52",""
"16627069","Public key authentication issues on cygwin","<p>I've been trying ""ssh localhost"" on cygwin (I use WIndows 7), but it keeps asking for the password. </p>

<p>When I did ""ssh -vvv localhost"", I found out that the public key authentications were not happening (or failing). Hence, it was asking for the password.</p>

<pre><code>debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug3: start over, passed a different list publickey,password,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /home/xxxxxxxx/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug1: Authentications that can continue: publickey,password,keyboard-interactive
</code></pre>

<p><strong>I'm not sure if it is unable to read the authorized_keys file, or if there is a timeout issue with this, or did the authentication fail? Is there any way to get more details?</strong></p>

<p>I have done the following steps:</p>

<ul>
<li>ssh-host-config. Answered yes to all.</li>
<li>Generated the RSA key and added it to the authorized_keys file.</li>
<li>net start sshd</li>
<li>ssh localhost</li>
</ul>

<p>These are the permissions:</p>

<pre><code>-rw------- 1 xxxxxxxx mkgroup  402 May 18 16:34 authorized_keys
-rw------- 1 xxxxxxxx mkgroup 1675 May 18 16:33 id_rsa
-rw-r--r-- 1 xxxxxxxx mkgroup  402 May 18 16:33 id_rsa.pub
-rw-r--r-- 1 xxxxxxxx mkgroup  171 May 18 14:33 known_hosts
</code></pre>

<p>There are a couple of issues as well:
 - The group is displayed as mkgroup.
 - The user ""xxxxxxxx"" does not exist in the localhost, I guess. 
   It was not displayed in ""net user sshd"". ""xxxxxxxx"" is a Domain account. 
   Could this be causing the public key authentication issue?</p>

<p>Just to see if there is any difference in the output, I deleted the authorized_keys file and tried. There was no difference in the output. It still sends a packet and proceeds to the next mode of authentication. There is no error message. Is there any other way to get more details (I'm a Cygwin and SSH n00b)? I would like to find it fails while reading the authorized_keys file.</p>
","<p>Quick double-check, did you add your public key or private key to authorized_keys? It needs to be your public key.</p>

<p>I notice that the server is not responding with a ""Server accepts key..."" upon receipt of your pubkey_test and I have seen that when the public key is missing from the authorized_keys file on the server you're connecting to.  You should see:</p>

<pre><code>debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug1: Server accepts key: pkalg ssh-rsa blen 279
</code></pre>

<p>Easiest way to set it up is to use ssh-copy-id to do the work, e.g.,:</p>

<pre><code># ssh-copy-id localhost
</code></pre>

<p>That will create your authorized_keys file with the correct permissions.  When you run this, you will be prompted for your password, because the server doesn't have the key.  Once this command runs successfully, you'll be able to simply ssh to the server using your identity file.  Note that ssh_config defaults the identity file to ~/.ssh/identity, ~/.ssh/id_rsa, ~/.ssh/id_dsa, so if you want to use a different file, you should set up an alias in ~/.ssh/config.</p>

<p>Hope this helps.</p>
","19145","<ssh><cygwin><localhost><public-key>","8","2","5","2018-07-06 17:08:00","","1","2","2382854","","2013-11-17 07:12:20","2013-05-18 17:29:52",""
"16627069","Public key authentication issues on cygwin","<p>I've been trying ""ssh localhost"" on cygwin (I use WIndows 7), but it keeps asking for the password. </p>

<p>When I did ""ssh -vvv localhost"", I found out that the public key authentications were not happening (or failing). Hence, it was asking for the password.</p>

<pre><code>debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug3: start over, passed a different list publickey,password,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /home/xxxxxxxx/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug1: Authentications that can continue: publickey,password,keyboard-interactive
</code></pre>

<p><strong>I'm not sure if it is unable to read the authorized_keys file, or if there is a timeout issue with this, or did the authentication fail? Is there any way to get more details?</strong></p>

<p>I have done the following steps:</p>

<ul>
<li>ssh-host-config. Answered yes to all.</li>
<li>Generated the RSA key and added it to the authorized_keys file.</li>
<li>net start sshd</li>
<li>ssh localhost</li>
</ul>

<p>These are the permissions:</p>

<pre><code>-rw------- 1 xxxxxxxx mkgroup  402 May 18 16:34 authorized_keys
-rw------- 1 xxxxxxxx mkgroup 1675 May 18 16:33 id_rsa
-rw-r--r-- 1 xxxxxxxx mkgroup  402 May 18 16:33 id_rsa.pub
-rw-r--r-- 1 xxxxxxxx mkgroup  171 May 18 14:33 known_hosts
</code></pre>

<p>There are a couple of issues as well:
 - The group is displayed as mkgroup.
 - The user ""xxxxxxxx"" does not exist in the localhost, I guess. 
   It was not displayed in ""net user sshd"". ""xxxxxxxx"" is a Domain account. 
   Could this be causing the public key authentication issue?</p>

<p>Just to see if there is any difference in the output, I deleted the authorized_keys file and tried. There was no difference in the output. It still sends a packet and proceeds to the next mode of authentication. There is no error message. Is there any other way to get more details (I'm a Cygwin and SSH n00b)? I would like to find it fails while reading the authorized_keys file.</p>
","<p>I had a similar problem setting up public key authentication (with similar verbose output from the client), though I was trying to do it from an Ubuntu client to a Cygwin SSHD server, and it was a very old Cygwin environment (version 1.5.12 on Windows 2000!).   I had copied the public key using ssh-copy-id.</p>

<p>In my case, making the authorized_keys files world readable (mode 644) on the Cygwin side appeared to allow public key authentication to succeed.   </p>

<p>From what I've seen, mode 600 is standard, so perhaps this ""fix"" in my case is actually a sign of a problem elsewhere in the Cygwin SSHD setup. But now that pub key authentication is finally working, I probably won't be digging any deeper.</p>
","19145","<ssh><cygwin><localhost><public-key>","8","0","5","2018-07-06 17:08:00","","1","2","2382854","","2013-11-17 07:12:20","2013-05-18 17:29:52",""
"16627069","Public key authentication issues on cygwin","<p>I've been trying ""ssh localhost"" on cygwin (I use WIndows 7), but it keeps asking for the password. </p>

<p>When I did ""ssh -vvv localhost"", I found out that the public key authentications were not happening (or failing). Hence, it was asking for the password.</p>

<pre><code>debug1: Authentications that can continue: publickey,password,keyboard-interactive
debug3: start over, passed a different list publickey,password,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /home/xxxxxxxx/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug1: Authentications that can continue: publickey,password,keyboard-interactive
</code></pre>

<p><strong>I'm not sure if it is unable to read the authorized_keys file, or if there is a timeout issue with this, or did the authentication fail? Is there any way to get more details?</strong></p>

<p>I have done the following steps:</p>

<ul>
<li>ssh-host-config. Answered yes to all.</li>
<li>Generated the RSA key and added it to the authorized_keys file.</li>
<li>net start sshd</li>
<li>ssh localhost</li>
</ul>

<p>These are the permissions:</p>

<pre><code>-rw------- 1 xxxxxxxx mkgroup  402 May 18 16:34 authorized_keys
-rw------- 1 xxxxxxxx mkgroup 1675 May 18 16:33 id_rsa
-rw-r--r-- 1 xxxxxxxx mkgroup  402 May 18 16:33 id_rsa.pub
-rw-r--r-- 1 xxxxxxxx mkgroup  171 May 18 14:33 known_hosts
</code></pre>

<p>There are a couple of issues as well:
 - The group is displayed as mkgroup.
 - The user ""xxxxxxxx"" does not exist in the localhost, I guess. 
   It was not displayed in ""net user sshd"". ""xxxxxxxx"" is a Domain account. 
   Could this be causing the public key authentication issue?</p>

<p>Just to see if there is any difference in the output, I deleted the authorized_keys file and tried. There was no difference in the output. It still sends a packet and proceeds to the next mode of authentication. There is no error message. Is there any other way to get more details (I'm a Cygwin and SSH n00b)? I would like to find it fails while reading the authorized_keys file.</p>
","<p>My problem was that I thought cygwin is OK if its files gets copy and pasted, so if I wanted to clone the installation I just copied and pasted <code>C:\cygiwn64</code> folder somewhere else and ran the <code>.bat</code> file.  </p>

<p>But I was wrong. Every time you copy a file with windows explorer the permission and ownerships gets corrupted in cygwin. So <strong>dont use windows explorer for making changes to any of the cygwin files</strong>, only use the command line apps like <code>cp</code>, <code>mkdir</code>, <code>mv</code>, <code>vim</code>, <code>nano</code> and others.  </p>

<p>Also If you want to create a new installation just use the <code>setup_x86_64.exe</code> file and simply choose a new <code>root</code> directory for it and let the setup install packages and do the rest for you.</p>

<p>This way you make sure that nothing gets corrupted and you wont get surprised by some amazing error messages in the future.</p>
","19145","<ssh><cygwin><localhost><public-key>","8","1","5","2018-07-06 17:08:00","","1","2","2382854","","2013-11-17 07:12:20","2013-05-18 17:29:52",""
"3209665","For RSA, how do i calculate the secret exponent?","<p>For RSA, how do i calculate the secret exponent?</p>

<p>Given p and q the two primes, and phi=(p-1)(q-1), and the public exponent (0x10001), how do i get the secret exponent 'd' ?</p>

<p>I've read that i have to do: <strong>d = e<sup>-1</sup> mod phi</strong> using <a href=""http://en.wikipedia.org/wiki/Modular_multiplicative_inverse"" rel=""noreferrer"">modular inversion</a> and the <a href=""http://en.wikipedia.org/wiki/Euclidean_algorithm"" rel=""noreferrer"">euclidean equation</a> but i cannot understand how the above formula maps to either the <strong>a<sup>-1</sup> &equiv; x mod m</strong> formula on the modular inversion wiki page, or how it maps to the euclidean GCD equation.</p>

<p>Can someone help please, cheers</p>
","<p>You can use the <a href=""http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm"" rel=""noreferrer"">extended Euclidean algorithm</a> to solve for <code>d</code> in the congruence</p>

<pre><code>de = 1 mod phi(m)
</code></pre>

<p>For RSA encryption, <code>e</code> is the encryption key, <code>d</code> is the decryption key,  and encryption
and decryption are both performed by exponentiation mod <code>m</code>.  If you encrypt a message <code>a</code>
with key <code>e</code>, and then decrypt it using key <code>d</code>, you calculate (a<sup>e</sup>)<sup>d</sup> = a<sup>de</sup> mod <code>m</code>.  But
since <code>de = 1 mod phi(m)</code>, <a href=""http://mathworld.wolfram.com/EulersTotientTheorem.html"" rel=""noreferrer"">Euler's totient theorem</a> tells us that a<sup>de</sup> is congruent 
to a<sup>1</sup> mod m -- in other words, you get back the original <code>a</code>.</p>

<p>There are no known efficient ways to obtain the decryption key <code>d</code> knowing only the
encryption key <code>e</code> and the modulus <code>m</code>, without knowing the factorization <code>m = pq</code>, so
RSA encryption is believed to be secure.</p>
","18793","<math><encryption><rsa><public-key><secret-key>","14","17","1","2010-07-09 05:57:27","3209797","3","4","","","","2010-07-09 03:43:24",""
"13425811","Git SSH authentication","<p>I have Debian, Fisheye and Git on my server.
My git repos are managed by Fisheye. There is no authentication at the Fisheye part. All authentication procedures are managed by git.</p>

<p>I would like to use SSH authentication, so that I do not need to provide username and password as I push my changes to the server. I know how to create an rsa key, but where do I copy my public key at the server?</p>
","<p>You need to paste your public key inside <code>~/.ssh/authorized_keys</code>. Create the file if it doesn't exist.</p>
","18064","<git><ssh><public-key-encryption><public-key><atlassian-fisheye>","3","1","2","2018-03-30 09:47:45","13428529","0","3","13750","","2013-02-09 04:37:52","2012-11-16 23:14:37",""
"13425811","Git SSH authentication","<p>I have Debian, Fisheye and Git on my server.
My git repos are managed by Fisheye. There is no authentication at the Fisheye part. All authentication procedures are managed by git.</p>

<p>I would like to use SSH authentication, so that I do not need to provide username and password as I push my changes to the server. I know how to create an rsa key, but where do I copy my public key at the server?</p>
","<p>The key part of the article ""<a href=""http://git-scm.com/book/en/Git-on-the-Server-Setting-Up-the-Server"" rel=""nofollow noreferrer"">Git on the Server - Setting Up the Server</a>"" is:</p>

<blockquote>
  <p>you need to add some developer SSH public keys to the <code>~/.ssh/authorized_keys</code> file for that user.<br>
  Let’s assume you’ve received a few keys by e-mail and saved them to temporary files. Again, the public keys look something like this:</p>
</blockquote>

<pre><code>$ cat /tmp/id_rsa.john.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
dAv8JggJICUvax2T9va5 gsg-keypair
</code></pre>

<p>(Note: make sure the key is displayed on <strong>one</strong> single line)</p>

<blockquote>
  <p>You just append them to your authorized_keys file:</p>
</blockquote>

<pre><code>$ cat /tmp/id_rsa.john.pub &gt;&gt; ~/.ssh/authorized_keys
</code></pre>

<p>If you don't have an <code>authorized_keys</code> file on your server, create it, but make sure to protect it correctly.</p>

<pre><code>server$ mkdir ~/.ssh
server$ chmod 700 ~/.ssh
server$ cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys
server$ chmod 600 ~/.ssh/authorized_keys
server$ rm ~/id_rsa.pub
</code></pre>

<p>See ""<a href=""https://stackoverflow.com/a/3712619/6309"">Creating SSH keys for Gerrit and Hudson</a>"" for a concrete example.</p>

<ul>
<li>Make sure git is in the PATH used by your ssh daemon.</li>
<li>Make sure all parent directories of your <code>~/.ssh</code> are not writable for the group (<code>chmod 755</code> only).</li>
</ul>
","18064","<git><ssh><public-key-encryption><public-key><atlassian-fisheye>","3","6","2","2018-03-30 09:47:45","13428529","0","3","13750","","2013-02-09 04:37:52","2012-11-16 23:14:37",""
"24859305","What is use of config.put(""StrictHostKeyChecking"", ""no"") in JSch","<pre><code>java.util.Properties config = new java.util.Properties();            
config.put(""StrictHostKeyChecking"", ""no"");
session.setConfig(config);
</code></pre>

<p>In above code why we need to set <code>StrictHostKeyChecking</code> value as <code>no</code> while connection to SFTP through JSch API?</p>
","<p>You should NOT set it actually. You lose much of the SSH/SFTP security by doing to.</p>

<p>The option tells the JSch SSH/SFTP library not to verify public key of the SSH/SFTP server. You are vulnerable to <a href=""https://en.wikipedia.org/wiki/Man-in-the-middle_attack"" rel=""nofollow noreferrer"">man-in-the-middle attacks</a>, if you do not verify the public key. Of course, unless you are connecting within a private trusted network (so you do not care for security/encryption).</p>

<p>Read about SSH/SFTP host keys:<br>
<a href=""https://www.symantec.com/connect/articles/ssh-host-key-protection"" rel=""nofollow noreferrer"">https://www.symantec.com/connect/articles/ssh-host-key-protection</a><br>
<a href=""https://winscp.net/eng/docs/ssh_verifying_the_host_key"" rel=""nofollow noreferrer"">https://winscp.net/eng/docs/ssh_verifying_the_host_key</a></p>
","17714","<java><ssh><sftp><jsch><public-key>","8","4","2","2018-11-20 02:02:07","","0","1","850848","","2014-07-21 07:20:51","2014-07-21 07:01:47",""
"24859305","What is use of config.put(""StrictHostKeyChecking"", ""no"") in JSch","<pre><code>java.util.Properties config = new java.util.Properties();            
config.put(""StrictHostKeyChecking"", ""no"");
session.setConfig(config);
</code></pre>

<p>In above code why we need to set <code>StrictHostKeyChecking</code> value as <code>no</code> while connection to SFTP through JSch API?</p>
","<p>StrictHostKeyChecking values: ask | yes | no</p>

<p>default: ask</p>

<p>If this property is set to <strong>yes</strong>, JSch will never automatically add host keys to the <code>$HOME/.ssh/known_hosts</code> file, and refuses to connect to hosts whose host key has changed. This property forces the user to manually add all new hosts.  </p>

<p>If this property is set to <strong>no</strong>, JSch will automatically add new host keys to the user known hosts files. </p>

<p>If this property is set to <strong>ask</strong>, new  host keys will be added to the user known host files only after the user has confirmed that is what they really want to do, and JSch will refuse to connect to hosts whose host key has changed.</p>
","17714","<java><ssh><sftp><jsch><public-key>","8","4","2","2018-11-20 02:02:07","","0","1","850848","","2014-07-21 07:20:51","2014-07-21 07:01:47",""
"4740217","How to databind public property in xaml","<p>All I am trying to do is bind a public property to a textBlock. What am I doing wrong here?</p>

<pre><code>namespace WpfApplication1
{

    public partial class MainWindow : Window
    {

        public string test { get; set; }

        public MainWindow()
        {
            test = ""this is a test"";
            InitializeComponent();
        }
    }
}

&lt;Window x:Class=""WpfApplication1.MainWindow""
    xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""
    xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
    Title=""MainWindow"" Height=""350"" Width=""525""&gt;
&lt;Window.Resources&gt;
    &lt;ObjectDataProvider x:Key=""test""&gt;&lt;/ObjectDataProvider&gt;
&lt;/Window.Resources&gt;
&lt;Grid&gt;
    &lt;TextBlock Height=""23"" HorizontalAlignment=""Left"" Margin=""108,58,0,0"" Name=""textBlock1""  VerticalAlignment=""Top"" Text=""{Binding Source={StaticResource test}}"" /&gt;
&lt;/Grid&gt;
</code></pre>

<p></p>
","<p>At first you need you class to implement <a href=""http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged.aspx"" rel=""noreferrer"">INotifyPropertyChanged</a> or a property to be <a href=""http://msdn.microsoft.com/en-us/library/system.windows.dependencyproperty.aspx"" rel=""noreferrer"">DependencyProperty</a> for changing property value on textbox text change,</p>

<pre><code>namespace WpfApplication1
{
public partial class MainWindow : Window, INotifyPropertyChanged
{
    private string _test 
    public string test 
    { 
        get
        {
           return _test;
        } 
        set
        {
            _test = value;
            OnPropertyChanged(""test"");
        } 
    }

    public MainWindow()
    {
        test = ""this is a test"";
        InitializeComponent();
    }
    public event PropertyChangedEventHandler PropertyChanged;
    private void OnPropertyChanged(String info)
    {
       if (PropertyChanged != null)
       {
           PropertyChanged(this, new PropertyChangedEventArgs(info));
       }
    }
}

}
</code></pre>

<p>Than you can bind to that property by giving name to that window, and using ElementName property like this.</p>

<pre><code>&lt;Window x:Class=""WpfApplication1.MainWindow""
    xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""
    xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
    Title=""MainWindow"" Height=""350"" Width=""525"" Name=""myWindow""&gt;
&lt;Window.Resources&gt;
    &lt;ObjectDataProvider x:Key=""test""&gt;&lt;/ObjectDataProvider&gt;
&lt;/Window.Resources&gt;
&lt;Grid&gt;
    &lt;TextBlock Height=""23"" HorizontalAlignment=""Left"" Margin=""108,58,0,0"" Name=""textBlock1""  VerticalAlignment=""Top"" Text=""{Binding ElementName=myWindow, Path=test}"" /&gt;
&lt;/Grid&gt;
</code></pre>
","17197","<wpf><xaml><public-key>","6","7","3","2013-12-11 22:01:35","4740439","0","2","","","","2011-01-19 20:13:45",""
"4740217","How to databind public property in xaml","<p>All I am trying to do is bind a public property to a textBlock. What am I doing wrong here?</p>

<pre><code>namespace WpfApplication1
{

    public partial class MainWindow : Window
    {

        public string test { get; set; }

        public MainWindow()
        {
            test = ""this is a test"";
            InitializeComponent();
        }
    }
}

&lt;Window x:Class=""WpfApplication1.MainWindow""
    xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""
    xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
    Title=""MainWindow"" Height=""350"" Width=""525""&gt;
&lt;Window.Resources&gt;
    &lt;ObjectDataProvider x:Key=""test""&gt;&lt;/ObjectDataProvider&gt;
&lt;/Window.Resources&gt;
&lt;Grid&gt;
    &lt;TextBlock Height=""23"" HorizontalAlignment=""Left"" Margin=""108,58,0,0"" Name=""textBlock1""  VerticalAlignment=""Top"" Text=""{Binding Source={StaticResource test}}"" /&gt;
&lt;/Grid&gt;
</code></pre>

<p></p>
","<p>You can simply add a datacontext and access your property</p>

<pre><code>public partial class MainWindow : Window,INotifyPropertyChanged
{
    private string _test;
    public string test
    {
        get
        {
            return _test;
        }
        set
        {
            _test = value;
            OnPropertyChanged(""test"");
        }
    }
    public MainWindow()
    {
        test = ""this is a test"";
        InitializeComponent();
        DataContext = this;
    }

    public event PropertyChangedEventHandler PropertyChanged;
    private void OnPropertyChanged(String name)
    {
        if (PropertyChanged != null)
        {
            PropertyChanged(this, new PropertyChangedEventArgs(name));
        }
    }
}
        &lt;TextBlock Height=""23"" HorizontalAlignment=""Left"" Margin=""108,58,0,0"" Name=""textBlock1""  VerticalAlignment=""Top"" Text=""{Binding test}""/&gt;
</code></pre>

<p>Also check this post for details of when to use an ObjectDataProvider</p>

<p><a href=""http://bea.stollnitz.com/blog/?p=22"" rel=""noreferrer"">http://bea.stollnitz.com/blog/?p=22</a></p>
","17197","<wpf><xaml><public-key>","6","12","3","2013-12-11 22:01:35","4740439","0","2","","","","2011-01-19 20:13:45",""
"4740217","How to databind public property in xaml","<p>All I am trying to do is bind a public property to a textBlock. What am I doing wrong here?</p>

<pre><code>namespace WpfApplication1
{

    public partial class MainWindow : Window
    {

        public string test { get; set; }

        public MainWindow()
        {
            test = ""this is a test"";
            InitializeComponent();
        }
    }
}

&lt;Window x:Class=""WpfApplication1.MainWindow""
    xmlns=""http://schemas.microsoft.com/winfx/2006/xaml/presentation""
    xmlns:x=""http://schemas.microsoft.com/winfx/2006/xaml""
    Title=""MainWindow"" Height=""350"" Width=""525""&gt;
&lt;Window.Resources&gt;
    &lt;ObjectDataProvider x:Key=""test""&gt;&lt;/ObjectDataProvider&gt;
&lt;/Window.Resources&gt;
&lt;Grid&gt;
    &lt;TextBlock Height=""23"" HorizontalAlignment=""Left"" Margin=""108,58,0,0"" Name=""textBlock1""  VerticalAlignment=""Top"" Text=""{Binding Source={StaticResource test}}"" /&gt;
&lt;/Grid&gt;
</code></pre>

<p></p>
","<p>You actually don't need to implement INotifyPropertyChanged. However, this will be a one time data binding. </p>

<p>For example in XAML:  </p>

<pre><code>&lt;TextBlock Name=""SomeTextBlock"" Text=""{Binding Path=SomeProp}"" /&gt;
</code></pre>

<p>In Code:</p>

<pre><code>    public string SomeProp { get; set; }
    public MainWindow()
    {
        InitializeComponent();
        SomeProp = ""Test Test Test"";
        SomeTextBlock.DataContext = this;          
    }
</code></pre>
","17197","<wpf><xaml><public-key>","6","0","3","2013-12-11 22:01:35","4740439","0","2","","","","2011-01-19 20:13:45",""
"19604668","Use and utility of .p12 certificate/file","<p>What is the utility of .p12 file/certificate? I am not getting any correct definition when searching the internet:</p>

<ul>
<li><p>In one site I got ""it stores server side certificates along with intermediate certificates and <strong>private key</strong> in one file. Its mostly used in Windows Machine""</p></li>
<li><p>In another site i got ""it binds a organizations <strong>public key</strong> with its name.</p></li>
</ul>

<p>My question is whether its public key or private key which is included in the .p12 certificate.</p>
","<p>The .p12 contains both the private and the public key, and also information about the owner (name, email address, etc. ) all being certified by a third party. With such certificate, a user can identify himself and authenticate himself to any organization trusting the third party.</p>

<p>You should be able to see the content of the p12 file with </p>

<pre><code>openssl pkcs12 -info -in filename.p12
</code></pre>

<p>provided openssl is installed in your system.</p>
","17073","<certificate><private-key><public-key>","14","22","1","2014-02-23 14:16:38","19604713","1","5","321731","","2014-02-23 14:16:38","2013-10-26 08:35:30",""
"17299886","How to get a private key given a certificate file with Java","<p>I want to determine what a public key is given a certificate file(<code>something.cer</code> file), this is my Java code:</p>

<pre><code>public class X509Read {
private static String hex(String  binStr) {
    String newStr = new String();
        try {
            String hexStr = ""0123456789ABCDEF"";
            byte [] p = binStr.getBytes();
            for(int k=0; k &lt; p.length; k++ ){
                int j = ( p[k] &gt;&gt; 4 )&amp;0xF;
                newStr = newStr + hexStr.charAt( j );
                j = p[k]&amp;0xF;
                newStr = newStr + hexStr.charAt( j ) + "" "";
            }   
        } catch (Exception e) {
            System.out.println(""Failed to convert into hex values: "" + e);
        } 
        return newStr;
}
public static void main(String[] args) {
    String CA_Data[]=new String [15];
    String field;
    try{
        InputStream inStream = new FileInputStream(""C:\\123.cer"");
        CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
        X509Certificate cert = 
            (X509Certificate)cf.generateCertificate(inStream);
        field=cert.getType().toString();
        CA_Data[0]=field;
        System.out.println(""Type : ""+field);
        field=Integer.toString(cert.getVersion());
        CA_Data[1]=field;
        System.out.println(""Version : ""+field);
        field=cert.getSubjectX500Principal().toString();
        CA_Data[2]=field;
        System.out.println(""Name : ""+field);
        field=cert.getSerialNumber().toString(16);
        CA_Data[3]=field;
        System.out.println(""SerialNumber : ""+field);
        field=cert.getSubjectAlternativeNames().toString();
        CA_Data[4]=field;
        System.out.println(""SubjectAlternativeNames : ""+field);
        field=cert.getNotBefore().toString();
        CA_Data[5]=field;
        System.out.println(""NotBefore : ""+field);
        field=cert.getNotAfter().toString();
        CA_Data[6]=field;
        System.out.println(""NotAfter : ""+field); 
        field=cert.getIssuerX500Principal().toString();
        CA_Data[7]=field;
        System.out.println(""IssuerDN : ""+field);
        field=cert.getSigAlgName().toString();
        CA_Data[8]=field;
        System.out.println(""SigAlgName : ""+field);
        byte [] tempPub = null;
        String sPub = null;
        RSAPublicKey pubkey = (RSAPublicKey) cert.getPublicKey();
        tempPub = pubkey.getEncoded();
        sPub = new String( tempPub );
        field=cert.getPublicKey().getAlgorithm();
        CA_Data[9]=field;
        System.out.println(""Public Key Algorithm : "" + field);
        field=hex(sPub);
        CA_Data[10]=field;
        System.out.println(""Public key : \n"" + field );        
        inStream.close();   
        }catch(Exception exception){ 
            exception.printStackTrace();
        }
    }
}
</code></pre>

<p>And it get this data: <code>30 EF BF BD 01 22 30 0D 06 09 2A EF BF BD 48 EF BF BD EF BF BD 0D 01 01 01 05 00 03 EF BF BD 01 0F 00 30 EF BF BD 01 0A 02 EF BF BD 01 01 00 CA BF 19 EF BF BD 24 EF BF BD 2F EF BF BD 6A EF BF BD EF BF BD 4C EF BF BD 2C EF BF BD 30 EF BF BD EF BF BD EF BF BD EF BF BD 7D EF BF BD 11 EF BF BD EF BF BD 7E EF BF BD 32 EF BF BD EF BF BD 42 73 EF BF BD EF BF BD 07 EF BF BD 15 EF BF BD 1D EF BF BD 00 39 33 66 4D 56 EF BF BD 67 EF BF BD EF BF BD EF BF BD 19 EF BF BD 17 64 EF BF BD 24 19 EF BF BD EF BF BD EF BF BD 15 EF BF BD EF BF BD C3 8C 3A EF BF BD EF BF BD EF BF BD 05 2D 3D C5 81 EF BF BD EF BF BD 48 71 EF BF BD 43 EF BF BD EF BF BD EF BF BD DE AE 20 EF BF BD EF BF BD 2B EF BF BD 1D D4 AE EF BF BD EF BF BD 25 EF BF BD 39 7B EF BF BD 70 0D 76 EF BF BD EF BF BD 7F 25 18 EF BF BD 22 EF BF BD EF BF BD EF BF BD 27 EF BF BD 0F EF BF BD EF BF BD EF BF BD DA 93 EF BF BD 0A 2C 03 3B EF BF BD 79 30 53 EF BF BD EF BF BD 26 30 EF BF BD 1D 3C 69 4C 20 EF BF BD 36 EF BF BD EF BF BD 41 7F EF BF BD 60 6B 58 EF BF BD EF BF BD EF BF BD 18 EF BF BD EF BF BD 01 6E 64 7F EF BF BD 5F 3B EF BF BD 7B 25 C9 83 43 15 EF BF BD 6F 78 EF BF BD 21 EF BF BD EF BF BD 38 59 EF BF BD EF BF BD EF BF BD EF BF BD 0B EF BF BD EF BF BD DE 9B 37 43 22 6A EF BF BD 15 28 EF BF BD 39 12 54 2B 38 4B EF BF BD 0A 43 67 0B 48 EF BF BD 59 02 60 57 EF BF BD 54 EF BF BD 6A 55 CE 91 EF BF BD 5A EF BF BD 78 76 66 13 EF BF BD 72 27 0A EF BF BD EF BF BD EF BF BD EF BF BD EF BF BD 0B 3E EF BF BD D2 9F EF BF BD 0E 4F EF BF BD EE B6 A5 5B EF BF BD 11 02 03 01 00 01
</code></p>

<p>But the correct public key is (Double-click the *.cer file)</p>

<p><img src=""https://i.stack.imgur.com/bSneI.png"" alt=""enter image description here""></p>

<p><code>30 82 01 0a 02 82 01 01 00 ca bf 19 98 24 af 2f 8c 6a 94 e0 4c 9e 2c 86 30 9a 93 94 c5 7d f7 11 d8 e5 7e 8e 32 9d 90 42 73 99 ef 07 ed 15 a6 1d ff 00 39 33 66 4d 56 ee 67 9d 93 fd 19 f9 17 64 d9 24 19 de e3 d5 15 8a aa c3 8c 3a a7 d6 ec 05 2d 3d c5 81 da d0 48 71 d9 43 f1 e5 82 fc de ae 20 cc e3 2b c5 1d d4 ae eb a3 e3 93 25 e6 39 7b 8d 70 0d 76 b8 c0 7f 25 18 9d 22 b6 d8 ff 27 9e 0f f6 fe c4 da 93 9d 0a 2c 03 3b 80 79 30 53 c9 d0 26 30 9c 1d 3c 69 4c 20 80 36 a8 99 41 7f 99 60 6b 58 b0 84 a3 18 8b b8 01 6e 64 7f bc 5f 3b ce 7b 25 c9 83 43 15 af 6f 78 fa 21 c0 b7 38 59 90 b9 82 e0 0b f1 f6 de 9b 37 43 22 6a fb 15 28 da 39 12 54 2b 38 4b b8 0a 43 67 0b 48 9f 59 02 60 57 e6 89 54 dd 6a 55 ce 91 ad 5a f2 78 76 66 13 86 72 27 0a 94 82 a5 81 be 0b 3e fc d2 9f e0 0e 4f ba ee b6 a5 5b f9 11 02 03 01 00 01</code></p>

<p>I know EF BF BD is a replacement character when I transform the Binary to Hex.</p>

<ol>
<li><p>How do I get the correct public key?</p></li>
<li><p>How to get the private key?</p></li>
</ol>
","<p>To get the public key simply use the methd <code>getPublicKey()</code> from <code>X509Certificate</code>.</p>

<p>The private key cannot be retrieved from the certificate as it is not included.</p>
","16811","<java><certificate><x509certificate><private-key><public-key>","5","5","3","2015-03-17 13:41:47","17300214","1","1","445131","","2015-03-17 13:41:47","2013-06-25 14:21:39",""
"17299886","How to get a private key given a certificate file with Java","<p>I want to determine what a public key is given a certificate file(<code>something.cer</code> file), this is my Java code:</p>

<pre><code>public class X509Read {
private static String hex(String  binStr) {
    String newStr = new String();
        try {
            String hexStr = ""0123456789ABCDEF"";
            byte [] p = binStr.getBytes();
            for(int k=0; k &lt; p.length; k++ ){
                int j = ( p[k] &gt;&gt; 4 )&amp;0xF;
                newStr = newStr + hexStr.charAt( j );
                j = p[k]&amp;0xF;
                newStr = newStr + hexStr.charAt( j ) + "" "";
            }   
        } catch (Exception e) {
            System.out.println(""Failed to convert into hex values: "" + e);
        } 
        return newStr;
}
public static void main(String[] args) {
    String CA_Data[]=new String [15];
    String field;
    try{
        InputStream inStream = new FileInputStream(""C:\\123.cer"");
        CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
        X509Certificate cert = 
            (X509Certificate)cf.generateCertificate(inStream);
        field=cert.getType().toString();
        CA_Data[0]=field;
        System.out.println(""Type : ""+field);
        field=Integer.toString(cert.getVersion());
        CA_Data[1]=field;
        System.out.println(""Version : ""+field);
        field=cert.getSubjectX500Principal().toString();
        CA_Data[2]=field;
        System.out.println(""Name : ""+field);
        field=cert.getSerialNumber().toString(16);
        CA_Data[3]=field;
        System.out.println(""SerialNumber : ""+field);
        field=cert.getSubjectAlternativeNames().toString();
        CA_Data[4]=field;
        System.out.println(""SubjectAlternativeNames : ""+field);
        field=cert.getNotBefore().toString();
        CA_Data[5]=field;
        System.out.println(""NotBefore : ""+field);
        field=cert.getNotAfter().toString();
        CA_Data[6]=field;
        System.out.println(""NotAfter : ""+field); 
        field=cert.getIssuerX500Principal().toString();
        CA_Data[7]=field;
        System.out.println(""IssuerDN : ""+field);
        field=cert.getSigAlgName().toString();
        CA_Data[8]=field;
        System.out.println(""SigAlgName : ""+field);
        byte [] tempPub = null;
        String sPub = null;
        RSAPublicKey pubkey = (RSAPublicKey) cert.getPublicKey();
        tempPub = pubkey.getEncoded();
        sPub = new String( tempPub );
        field=cert.getPublicKey().getAlgorithm();
        CA_Data[9]=field;
        System.out.println(""Public Key Algorithm : "" + field);
        field=hex(sPub);
        CA_Data[10]=field;
        System.out.println(""Public key : \n"" + field );        
        inStream.close();   
        }catch(Exception exception){ 
            exception.printStackTrace();
        }
    }
}
</code></pre>

<p>And it get this data: <code>30 EF BF BD 01 22 30 0D 06 09 2A EF BF BD 48 EF BF BD EF BF BD 0D 01 01 01 05 00 03 EF BF BD 01 0F 00 30 EF BF BD 01 0A 02 EF BF BD 01 01 00 CA BF 19 EF BF BD 24 EF BF BD 2F EF BF BD 6A EF BF BD EF BF BD 4C EF BF BD 2C EF BF BD 30 EF BF BD EF BF BD EF BF BD EF BF BD 7D EF BF BD 11 EF BF BD EF BF BD 7E EF BF BD 32 EF BF BD EF BF BD 42 73 EF BF BD EF BF BD 07 EF BF BD 15 EF BF BD 1D EF BF BD 00 39 33 66 4D 56 EF BF BD 67 EF BF BD EF BF BD EF BF BD 19 EF BF BD 17 64 EF BF BD 24 19 EF BF BD EF BF BD EF BF BD 15 EF BF BD EF BF BD C3 8C 3A EF BF BD EF BF BD EF BF BD 05 2D 3D C5 81 EF BF BD EF BF BD 48 71 EF BF BD 43 EF BF BD EF BF BD EF BF BD DE AE 20 EF BF BD EF BF BD 2B EF BF BD 1D D4 AE EF BF BD EF BF BD 25 EF BF BD 39 7B EF BF BD 70 0D 76 EF BF BD EF BF BD 7F 25 18 EF BF BD 22 EF BF BD EF BF BD EF BF BD 27 EF BF BD 0F EF BF BD EF BF BD EF BF BD DA 93 EF BF BD 0A 2C 03 3B EF BF BD 79 30 53 EF BF BD EF BF BD 26 30 EF BF BD 1D 3C 69 4C 20 EF BF BD 36 EF BF BD EF BF BD 41 7F EF BF BD 60 6B 58 EF BF BD EF BF BD EF BF BD 18 EF BF BD EF BF BD 01 6E 64 7F EF BF BD 5F 3B EF BF BD 7B 25 C9 83 43 15 EF BF BD 6F 78 EF BF BD 21 EF BF BD EF BF BD 38 59 EF BF BD EF BF BD EF BF BD EF BF BD 0B EF BF BD EF BF BD DE 9B 37 43 22 6A EF BF BD 15 28 EF BF BD 39 12 54 2B 38 4B EF BF BD 0A 43 67 0B 48 EF BF BD 59 02 60 57 EF BF BD 54 EF BF BD 6A 55 CE 91 EF BF BD 5A EF BF BD 78 76 66 13 EF BF BD 72 27 0A EF BF BD EF BF BD EF BF BD EF BF BD EF BF BD 0B 3E EF BF BD D2 9F EF BF BD 0E 4F EF BF BD EE B6 A5 5B EF BF BD 11 02 03 01 00 01
</code></p>

<p>But the correct public key is (Double-click the *.cer file)</p>

<p><img src=""https://i.stack.imgur.com/bSneI.png"" alt=""enter image description here""></p>

<p><code>30 82 01 0a 02 82 01 01 00 ca bf 19 98 24 af 2f 8c 6a 94 e0 4c 9e 2c 86 30 9a 93 94 c5 7d f7 11 d8 e5 7e 8e 32 9d 90 42 73 99 ef 07 ed 15 a6 1d ff 00 39 33 66 4d 56 ee 67 9d 93 fd 19 f9 17 64 d9 24 19 de e3 d5 15 8a aa c3 8c 3a a7 d6 ec 05 2d 3d c5 81 da d0 48 71 d9 43 f1 e5 82 fc de ae 20 cc e3 2b c5 1d d4 ae eb a3 e3 93 25 e6 39 7b 8d 70 0d 76 b8 c0 7f 25 18 9d 22 b6 d8 ff 27 9e 0f f6 fe c4 da 93 9d 0a 2c 03 3b 80 79 30 53 c9 d0 26 30 9c 1d 3c 69 4c 20 80 36 a8 99 41 7f 99 60 6b 58 b0 84 a3 18 8b b8 01 6e 64 7f bc 5f 3b ce 7b 25 c9 83 43 15 af 6f 78 fa 21 c0 b7 38 59 90 b9 82 e0 0b f1 f6 de 9b 37 43 22 6a fb 15 28 da 39 12 54 2b 38 4b b8 0a 43 67 0b 48 9f 59 02 60 57 e6 89 54 dd 6a 55 ce 91 ad 5a f2 78 76 66 13 86 72 27 0a 94 82 a5 81 be 0b 3e fc d2 9f e0 0e 4f ba ee b6 a5 5b f9 11 02 03 01 00 01</code></p>

<p>I know EF BF BD is a replacement character when I transform the Binary to Hex.</p>

<ol>
<li><p>How do I get the correct public key?</p></li>
<li><p>How to get the private key?</p></li>
</ol>
","<p>To extend <a href=""https://stackoverflow.com/a/17300024/474189"">Uwe's answer</a>, the reason you see different values is your strange handling of the public key data:</p>

<pre><code>RSAPublicKey pubkey = (RSAPublicKey) cert.getPublicKey();
tempPub = pubkey.getEncoded();
sPub = new String( tempPub );
field=hex(sPub);
System.out.println(""Public key : \n"" + field );
</code></pre>

<p>Here you are creating a string from a stream of bytes (never a good idea) and then hex-encoding the result. No wonder it looks weird! In fact, your <code>hex</code> method looks very strange and probably should be thrown away.</p>

<p>Instead, just try this:</p>

<pre><code>RSAPublicKey pubkey = (RSAPublicKey) cert.getPublicKey();
field = DatatypeConverter.printHexBinary(pubkey.getEncoded());
System.out.println(""Public key : \n"" + field );
</code></pre>

<p>If you are using Java 5 or below, Google for a decent byte-to-hex function as <code>DatatypeConverter</code> is not available.</p>
","16811","<java><certificate><x509certificate><private-key><public-key>","5","3","3","2015-03-17 13:41:47","17300214","1","1","445131","","2015-03-17 13:41:47","2013-06-25 14:21:39",""
"17299886","How to get a private key given a certificate file with Java","<p>I want to determine what a public key is given a certificate file(<code>something.cer</code> file), this is my Java code:</p>

<pre><code>public class X509Read {
private static String hex(String  binStr) {
    String newStr = new String();
        try {
            String hexStr = ""0123456789ABCDEF"";
            byte [] p = binStr.getBytes();
            for(int k=0; k &lt; p.length; k++ ){
                int j = ( p[k] &gt;&gt; 4 )&amp;0xF;
                newStr = newStr + hexStr.charAt( j );
                j = p[k]&amp;0xF;
                newStr = newStr + hexStr.charAt( j ) + "" "";
            }   
        } catch (Exception e) {
            System.out.println(""Failed to convert into hex values: "" + e);
        } 
        return newStr;
}
public static void main(String[] args) {
    String CA_Data[]=new String [15];
    String field;
    try{
        InputStream inStream = new FileInputStream(""C:\\123.cer"");
        CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
        X509Certificate cert = 
            (X509Certificate)cf.generateCertificate(inStream);
        field=cert.getType().toString();
        CA_Data[0]=field;
        System.out.println(""Type : ""+field);
        field=Integer.toString(cert.getVersion());
        CA_Data[1]=field;
        System.out.println(""Version : ""+field);
        field=cert.getSubjectX500Principal().toString();
        CA_Data[2]=field;
        System.out.println(""Name : ""+field);
        field=cert.getSerialNumber().toString(16);
        CA_Data[3]=field;
        System.out.println(""SerialNumber : ""+field);
        field=cert.getSubjectAlternativeNames().toString();
        CA_Data[4]=field;
        System.out.println(""SubjectAlternativeNames : ""+field);
        field=cert.getNotBefore().toString();
        CA_Data[5]=field;
        System.out.println(""NotBefore : ""+field);
        field=cert.getNotAfter().toString();
        CA_Data[6]=field;
        System.out.println(""NotAfter : ""+field); 
        field=cert.getIssuerX500Principal().toString();
        CA_Data[7]=field;
        System.out.println(""IssuerDN : ""+field);
        field=cert.getSigAlgName().toString();
        CA_Data[8]=field;
        System.out.println(""SigAlgName : ""+field);
        byte [] tempPub = null;
        String sPub = null;
        RSAPublicKey pubkey = (RSAPublicKey) cert.getPublicKey();
        tempPub = pubkey.getEncoded();
        sPub = new String( tempPub );
        field=cert.getPublicKey().getAlgorithm();
        CA_Data[9]=field;
        System.out.println(""Public Key Algorithm : "" + field);
        field=hex(sPub);
        CA_Data[10]=field;
        System.out.println(""Public key : \n"" + field );        
        inStream.close();   
        }catch(Exception exception){ 
            exception.printStackTrace();
        }
    }
}
</code></pre>

<p>And it get this data: <code>30 EF BF BD 01 22 30 0D 06 09 2A EF BF BD 48 EF BF BD EF BF BD 0D 01 01 01 05 00 03 EF BF BD 01 0F 00 30 EF BF BD 01 0A 02 EF BF BD 01 01 00 CA BF 19 EF BF BD 24 EF BF BD 2F EF BF BD 6A EF BF BD EF BF BD 4C EF BF BD 2C EF BF BD 30 EF BF BD EF BF BD EF BF BD EF BF BD 7D EF BF BD 11 EF BF BD EF BF BD 7E EF BF BD 32 EF BF BD EF BF BD 42 73 EF BF BD EF BF BD 07 EF BF BD 15 EF BF BD 1D EF BF BD 00 39 33 66 4D 56 EF BF BD 67 EF BF BD EF BF BD EF BF BD 19 EF BF BD 17 64 EF BF BD 24 19 EF BF BD EF BF BD EF BF BD 15 EF BF BD EF BF BD C3 8C 3A EF BF BD EF BF BD EF BF BD 05 2D 3D C5 81 EF BF BD EF BF BD 48 71 EF BF BD 43 EF BF BD EF BF BD EF BF BD DE AE 20 EF BF BD EF BF BD 2B EF BF BD 1D D4 AE EF BF BD EF BF BD 25 EF BF BD 39 7B EF BF BD 70 0D 76 EF BF BD EF BF BD 7F 25 18 EF BF BD 22 EF BF BD EF BF BD EF BF BD 27 EF BF BD 0F EF BF BD EF BF BD EF BF BD DA 93 EF BF BD 0A 2C 03 3B EF BF BD 79 30 53 EF BF BD EF BF BD 26 30 EF BF BD 1D 3C 69 4C 20 EF BF BD 36 EF BF BD EF BF BD 41 7F EF BF BD 60 6B 58 EF BF BD EF BF BD EF BF BD 18 EF BF BD EF BF BD 01 6E 64 7F EF BF BD 5F 3B EF BF BD 7B 25 C9 83 43 15 EF BF BD 6F 78 EF BF BD 21 EF BF BD EF BF BD 38 59 EF BF BD EF BF BD EF BF BD EF BF BD 0B EF BF BD EF BF BD DE 9B 37 43 22 6A EF BF BD 15 28 EF BF BD 39 12 54 2B 38 4B EF BF BD 0A 43 67 0B 48 EF BF BD 59 02 60 57 EF BF BD 54 EF BF BD 6A 55 CE 91 EF BF BD 5A EF BF BD 78 76 66 13 EF BF BD 72 27 0A EF BF BD EF BF BD EF BF BD EF BF BD EF BF BD 0B 3E EF BF BD D2 9F EF BF BD 0E 4F EF BF BD EE B6 A5 5B EF BF BD 11 02 03 01 00 01
</code></p>

<p>But the correct public key is (Double-click the *.cer file)</p>

<p><img src=""https://i.stack.imgur.com/bSneI.png"" alt=""enter image description here""></p>

<p><code>30 82 01 0a 02 82 01 01 00 ca bf 19 98 24 af 2f 8c 6a 94 e0 4c 9e 2c 86 30 9a 93 94 c5 7d f7 11 d8 e5 7e 8e 32 9d 90 42 73 99 ef 07 ed 15 a6 1d ff 00 39 33 66 4d 56 ee 67 9d 93 fd 19 f9 17 64 d9 24 19 de e3 d5 15 8a aa c3 8c 3a a7 d6 ec 05 2d 3d c5 81 da d0 48 71 d9 43 f1 e5 82 fc de ae 20 cc e3 2b c5 1d d4 ae eb a3 e3 93 25 e6 39 7b 8d 70 0d 76 b8 c0 7f 25 18 9d 22 b6 d8 ff 27 9e 0f f6 fe c4 da 93 9d 0a 2c 03 3b 80 79 30 53 c9 d0 26 30 9c 1d 3c 69 4c 20 80 36 a8 99 41 7f 99 60 6b 58 b0 84 a3 18 8b b8 01 6e 64 7f bc 5f 3b ce 7b 25 c9 83 43 15 af 6f 78 fa 21 c0 b7 38 59 90 b9 82 e0 0b f1 f6 de 9b 37 43 22 6a fb 15 28 da 39 12 54 2b 38 4b b8 0a 43 67 0b 48 9f 59 02 60 57 e6 89 54 dd 6a 55 ce 91 ad 5a f2 78 76 66 13 86 72 27 0a 94 82 a5 81 be 0b 3e fc d2 9f e0 0e 4f ba ee b6 a5 5b f9 11 02 03 01 00 01</code></p>

<p>I know EF BF BD is a replacement character when I transform the Binary to Hex.</p>

<ol>
<li><p>How do I get the correct public key?</p></li>
<li><p>How to get the private key?</p></li>
</ol>
","<p>The private key is stored on authentication server, which should not be read by clients.</p>
","16811","<java><certificate><x509certificate><private-key><public-key>","5","0","3","2015-03-17 13:41:47","17300214","1","1","445131","","2015-03-17 13:41:47","2013-06-25 14:21:39",""
"5518576","Make IntelliJ IDEA use public key authentication on Windows","<p>I'm an Eclipse user who's evaluating a switch to IntelliJ IDEA. I'm currently trying out IDEA 10.0.2. My operating system is Windows.</p>

<p>When working with Git over SSH, IDEA always asks me for password. I can't find any option in the settings to make it use public key authentication. As per <a href=""http://blog.grumblesmurf.org/2010/10/using-ssh-private-keys-with-git-and.html"" rel=""noreferrer"">this post</a>, my key is in the <code>%USERPROFILE%\.ssh</code> directory and my <code>HOME</code> variable points to the same directory as <code>USERPROFILE</code>.</p>

<p>I don't know what I'm doing wrong and Googling for more details hasn't produced any results. Does anyone have any idea how to make IDEA use public key authentication?</p>

<p><strong>EDIT</strong>: My key is password-protected.</p>
","<p>If your command line git uses public key auth, the same should work from IDEA. In the IDEA VCS settings switch SSH implementation from <code>IDEA ssh</code> to <code>native</code> so that the same SSH is used as when running command line git.</p>
","15573","<git><ssh><intellij-idea><public-key>","8","18","2","2019-04-29 18:14:22","5518771","0","1","58099","","2011-04-01 21:21:50","2011-04-01 20:37:23",""
"5518576","Make IntelliJ IDEA use public key authentication on Windows","<p>I'm an Eclipse user who's evaluating a switch to IntelliJ IDEA. I'm currently trying out IDEA 10.0.2. My operating system is Windows.</p>

<p>When working with Git over SSH, IDEA always asks me for password. I can't find any option in the settings to make it use public key authentication. As per <a href=""http://blog.grumblesmurf.org/2010/10/using-ssh-private-keys-with-git-and.html"" rel=""noreferrer"">this post</a>, my key is in the <code>%USERPROFILE%\.ssh</code> directory and my <code>HOME</code> variable points to the same directory as <code>USERPROFILE</code>.</p>

<p>I don't know what I'm doing wrong and Googling for more details hasn't produced any results. Does anyone have any idea how to make IDEA use public key authentication?</p>

<p><strong>EDIT</strong>: My key is password-protected.</p>
","<p>In the latest version [as of April 29th, 2019], there is no option for <code>SSH executable</code> to switch SSH implementation. So, I followed the following steps on Windows 10:</p>

<ol>
<li>Create an ssh-keypair (it can be created on Linux and copied onto windows machine)</li>
<li>Copy public SSH key contents to GitHub <code>Settings</code> -> <code>SSH and GPG keys</code> -> <code>New SSH key</code></li>
<li>Copy private key to <code>C:\Users\&lt;your-user-name&gt;\.ssh\</code></li>
</ol>
","15573","<git><ssh><intellij-idea><public-key>","8","2","2","2019-04-29 18:14:22","5518771","0","1","58099","","2011-04-01 21:21:50","2011-04-01 20:37:23",""
"8434428","Get public key from private in Java","<p>I remember do this long time ago with OpenSSL, but I want to know if it's possible and how, I've never used Cryptography on java.</p>
","<p>You cannot generate either key directly from the other. It is mathematically impossible. If you had a key blob that contained <em>both</em> the public and private keys, you could extract either one of them with relative ease.</p>

<p><strong>EDIT, 2017:</strong> Many years and a much better understanding of crypto later, and it's now clear to me that this answer isn't really correct.</p>

<p>To quote Wikipedia:</p>

<blockquote>
  <p>The public key consists of the modulus n and the public (or encryption) exponent e. The private key consists of the modulus n and the private (or decryption) exponent d, which must be kept secret. p, q, and λ(n) must also be kept secret because they can be used to calculate d.</p>
</blockquote>

<p>The public modulus n can be computed as p &times; q. The only thing missing from a raw private key is e, but this value is usually selected as 65537, and if not you can still compute e from d and λ(n).</p>

<p>However, many private key storage formats actually contain the public modulus n alongside the other components, so you can just do a direct extraction of the values.</p>

<p><strong>EDIT, 2018:</strong> Still getting downvotes for this, and rightly so! I'm leaving this answer up so people can see why I was originally wrong, and to remind myself not to be wrong in future.</p>
","15252","<java><public-key><private-key>","13","-7","3","2018-02-19 10:31:27","8434440","1","1","759866","","2014-11-17 13:14:11","2011-12-08 16:41:22",""
"8434428","Get public key from private in Java","<p>I remember do this long time ago with OpenSSL, but I want to know if it's possible and how, I've never used Cryptography on java.</p>
","<p>The assumption is that we are talking about RSA private and Public keys. Then, if you are working from a PEM format file, then first you need to read the private key from the file into a PrivateKey object:</p>

<pre><code>    public PrivateKey readPemRsaPrivateKey(String pemFilename) throws
            java.io.IOException,
            java.security.NoSuchAlgorithmException,
            java.security.spec.InvalidKeySpecException
    {
            String pemString = File2String(pemFilename);

            pemString = pemString.replace(""-----BEGIN RSA PRIVATE KEY-----\n"", """");
            pemString = pemString.replace(""-----END RSA PRIVATE KEY-----"", """");

            byte[] decoded = Base64.decodeBase64(pemString);

            PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decoded);
            KeyFactory kf = KeyFactory.getInstance(""RSA"");

            return kf.generatePrivate(keySpec);
    }
</code></pre>

<p>where File2String is something like:</p>

<pre><code>    private static String File2String(String fileName) throws
            java.io.FileNotFoundException, java.io.IOException
    {
            File file = new File(fileName);

            char[] buffer = null;

            BufferedReader bufferedReader = new BufferedReader(new FileReader(file));

            buffer = new char[(int)file.length()];

            int i = 0;
            int c = bufferedReader.read();

            while (c != -1) {
                    buffer[i++] = (char)c;
                    c = bufferedReader.read();
            }
            return new String(buffer);
    }
</code></pre>

<p>Now you can generate the corresponding PublicKey with code like this:</p>

<pre><code>    import java.security.interfaces.RSAPrivateCrtKey;
    import java.security.spec.RSAPublicKeySpec;
</code></pre>

<p>...</p>

<pre><code>    PrivateKey myPrivateKey = readPemRsaPrivateKey(myPrivateKeyPemFileName);
    RSAPrivateCrtKey privk = (RSAPrivateCrtKey)myPrivateKey;

    RSAPublicKeySpec publicKeySpec = new java.security.spec.RSAPublicKeySpec(privk.getModulus(), privk.getPublicExponent());

    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
    PublicKey myPublicKey = keyFactory.generatePublic(publicKeySpec);
</code></pre>

<p>Credits: <a href=""https://stackoverflow.com/questions/11345346/how-to-get-a-rsa-publickey-by-giving-a-privatekey"">How to get a RSA PublicKey by giving a PrivateKey?</a></p>
","15252","<java><public-key><private-key>","13","28","3","2018-02-19 10:31:27","8434440","1","1","759866","","2014-11-17 13:14:11","2011-12-08 16:41:22",""
"8434428","Get public key from private in Java","<p>I remember do this long time ago with OpenSSL, but I want to know if it's possible and how, I've never used Cryptography on java.</p>
","<p>Please make sure that Eli Rosencruft answer is basically correct, but the order of the modulus and the public exponent are incorrect! This is the correct statement:</p>

<pre><code>RSAPublicKeySpec publicKeySpec = new java.security.spec.RSAPublicKeySpec(privk.getModulus(), privk.getPublicExponent());
</code></pre>
","15252","<java><public-key><private-key>","13","3","3","2018-02-19 10:31:27","8434440","1","1","759866","","2014-11-17 13:14:11","2011-12-08 16:41:22",""
"11047103","How can I get the public key of a webpage?","<p>How can I get the public key of a website like VeriSign and all other websites which use https(secure protocol)?</p>
","<p>It depends on the browser you're using, if you let me know I'll update my answer.</p>

<p><strong>Chrome 55 and above</strong> You can now find this information in Developer Tools. Options (3 dots) -> More Tools -> Developer tools, or press F12, then click the ""Security"" tab and you'll get a ""Security Overview"" with a ""View certificate"" button. As per <a href=""https://superuser.com/questions/1160502/how-to-view-ssl-certificate-details-on-chrome"">another SO post</a> from Chrome 60 you can actually enable the option again if you go to <code>chrome://flags/#show-cert-link</code>.</p>

<p><strong>Chrome 54 and below:</strong> If you're using Chrome then click on the green bar to the left of the 'https:' in the address bar, for the VeriSign website the green bar says <code>Symantec Corperation [US]</code>, this will open a pop up. On the pop up click 'Certificate Information'. This will open another pop up. On this go the 'Details' tab at the top and scroll down to 'Public key' which shows the public key the website is using for it's SSL. In VeriSigns case the public key is a 2048 bit key.</p>

<p><img src=""https://i.stack.imgur.com/HmkUm.png"" alt=""Chromes https""></p>

<p><strong>IE:</strong> the green bar to click on is to the right of the web address. Clicking this brings a similar pop up where you have to click 'View certificates' which then brings up the same pop up as on Chrome where you go to the Details tab and scroll down to 'Public Key'</p>

<p><img src=""https://i.stack.imgur.com/7z8G1.png"" alt=""enter image description here""></p>

<p>This is the pop up that opens after clicking the 'Certificate information' or 'View certificates' links.</p>

<p><img src=""https://i.stack.imgur.com/d6u1I.png"" alt=""enter image description here""></p>
","13989","<public-key-encryption><public-key>","7","6","2","2017-10-06 18:05:26","11058735","0","1","902766","","2012-06-15 23:04:58","2012-06-15 08:26:39",""
"11047103","How can I get the public key of a webpage?","<p>How can I get the public key of a website like VeriSign and all other websites which use https(secure protocol)?</p>
","<p>In Chrome you can get it via developer tools (F12 in windows) or pick it in the menu (Menu -> More Tools -> Developer Tools).</p>

<p>Then all you need to do is to pick the security tab, here are all information you need.</p>

<p><a href=""https://i.stack.imgur.com/dcGDE.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dcGDE.png"" alt=""enter image description here""></a></p>

<p>Just clicking on a secure popup does not work anymore.</p>
","13989","<public-key-encryption><public-key>","7","0","2","2017-10-06 18:05:26","11058735","0","1","902766","","2012-06-15 23:04:58","2012-06-15 08:26:39",""
"17938825","WinSCP .NET library: Connect to SFTP server without specifying SSH host key fingerprint","<p>In the current stable release of WinSCP, it seems that using <code>SshHostKeyFingerprint</code> is mandatory and there are no ways to connect to SFTP server without that in <code>SessionOptions</code>. I can see that the ability to bypass is added to the beta (5.2) but I was wondering whether or not it's possible to connect without this fingerprint.</p>
","<p>First, make sure you understand that you give-up <em>any security</em>, when you try to bypass SSH host key check. You effectively lose a protection against <a href=""https://en.wikipedia.org/wiki/Man-in-the-middle_attack"" rel=""nofollow noreferrer"">man-in-the-middle attacks</a>.</p>

<p>Anyway, you can use use <a href=""https://winscp.net/eng/docs/library_sessionoptions#giveupsecurityandacceptanysshhostkey"" rel=""nofollow noreferrer""><code>SessionOptions.GiveUpSecurityAndAcceptAnySshHostKey</code></a>.</p>

<p><em>It's NOT recommended though.</em> You should always set <code>SessionOptions.SshHostKeyFingerprint</code>.<br>
Learn how to <a href=""https://winscp.net/eng/docs/faq_hostkey"" rel=""nofollow noreferrer"">determine SSH host key fingerprint</a>.</p>
","13950","<ssh><sftp><public-key><winscp><winscp-net>","2","10","1","2018-03-07 05:52:11","17940443","0","2","850848","","2014-05-08 06:54:49","2013-07-30 05:18:59",""
"16158158","What is the public URL for the Github public keys","<p>I heard that there was a public URL for all users on github where you can access their public keys or they can supply that URL of all their public keys. Is this true? If so what is that URL. Does it exist for bitbucket as well?</p>
","<p>You can get with:</p>

<pre><code>curl https://github.com/&lt;username&gt;.keys
</code></pre>

<p>Replace <code>&lt;username&gt;</code> with the actual username of the GitHub user.</p>

<p>This is useful when you set login permission to other servers. Just save its output into <code>~/.ssh/authorized_keys</code>. To append it to the end from the command line:</p>

<pre><code>curl https://github.com/&lt;username&gt;.keys | tee -a ~/.ssh/authorized_keys
</code></pre>

<p>It can also be done using Github API</p>

<pre><code>curl -i https://api.github.com/users/&lt;username&gt;/keys
</code></pre>

<p>For bit bucket you can use the following: (This call requires authentication.)</p>

<pre><code>curl -i https://bitbucket.org/api/1.0/users/&lt;accountname&gt;/ssh-keys
</code></pre>
","13848","<git><github><bitbucket><public-key>","29","63","3","2019-09-29 03:31:39","16158737","0","13","","","","2013-04-22 23:01:56",""
"16158158","What is the public URL for the Github public keys","<p>I heard that there was a public URL for all users on github where you can access their public keys or they can supply that URL of all their public keys. Is this true? If so what is that URL. Does it exist for bitbucket as well?</p>
","<p>GPG public keys are now available at <code>https://github.com/&lt;username&gt;.gpg</code></p>
","13848","<git><github><bitbucket><public-key>","29","9","3","2019-09-29 03:31:39","16158737","0","13","","","","2013-04-22 23:01:56",""
"16158158","What is the public URL for the Github public keys","<p>I heard that there was a public URL for all users on github where you can access their public keys or they can supply that URL of all their public keys. Is this true? If so what is that URL. Does it exist for bitbucket as well?</p>
","<p>Works for gitlab same way too.</p>

<pre><code>https://gitlab.com/&lt;username&gt;.keys
</code></pre>

<p>Works nicely in bash scripts too.</p>

<pre><code>#GitProvider to fetch public keys (gitlab.com,github.com)
GitProvider=""gitlab.com""
GitUsername=""username""
curl https://${GitProvider}/${GitUsername}.keys | tee -a ~/.ssh/authorized_keys
</code></pre>
","13848","<git><github><bitbucket><public-key>","29","1","3","2019-09-29 03:31:39","16158737","0","13","","","","2013-04-22 23:01:56",""
"14423652",".ssh config with amazon ec2 and git","<p>I have a strange problem with cloning a git repository from an amazon ec2 server. It works without any problems on one of my computers running ubuntu 12.04, while on another one using 12.10 it gives me an error: </p>

<pre><code>ssh: Could not resolve hostname ec2server: Name or service not known  
fatal: The remote end hung up unexpectedly
</code></pre>

<p>It's like it is not recognizing my config file. I use the following git command to clone : </p>

<pre><code>sudo git clone ec2server:/var/www/project.git
</code></pre>

<p>or</p>

<pre><code>sudo git clone ec2xxx.compute-1.amazonaws.com:/var/www/project.git
</code></pre>

<p>The two config files are identical on both computers, inside the ~./ssh with the following content:</p>

<pre><code>Host ec2server
   Hostname ec2XXX.compute-1.amazonaws.com
   User ubuntu
   IdentityFile ~/.ssh/mykey.pem
</code></pre>

<p>If I substitute the ec2server with the actual address I get the following error: </p>

<pre><code>Cloning into 'project'...
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>Thanks in advance.</p>
","<p>It usually is a permission issue.<br>
The <code>chmod</code> on the parent directories of your config file might be different between your two computers.<br>
(and I am not talking about just the immediate parent directory <code>.ssh</code>, but also <em>all</em> the parent directories)</p>

<p>See ""<a href=""https://stackoverflow.com/questions/13425811/git-ssh-authentication/13428529#13428529"">Git SSH authentication</a>"", but also know that if any of the parent directories is writable for group or world, ssh won't work.</p>

<hr>

<p>Note also that your second command is not right, and should be:</p>

<pre><code>git clone ubuntu@ec2xxx.compute-1.amazonaws.com/var/www/project.git
</code></pre>

<p><strong>no '<code>:</code>'</strong> (a '<code>:</code>' means using a <code>config</code> file, with an <code>scp</code>-like syntax)</p>

<p>it can only work if you have <code>~/.ssh/id_rsa</code> and <code>~/.ssh/id_rsa.pub</code> though.<br>
If you have mykey.pem, then you <em>need</em> a <code>config</code> file for ssh to know where are your public and private keys, which means only this can work:</p>

<pre><code>git clone ec2server:/var/www/project.git
</code></pre>

<hr>

<p>One other chack (after <a href=""http://ubuntuforums.org/showthread.php?t=1100566"" rel=""noreferrer"">this thread</a> and this <a href=""https://openshift.redhat.com/community/forums/openshift/ssh-connection-closed-by"" rel=""noreferrer"">forum</a>) is to check if there is any DNS/DHCP issue (a bit like in ""<a href=""https://stackoverflow.com/a/5563791/6309"">Working with git behind a dynamic DNS</a>"").</p>

<pre><code>Host ec2server
   Hostname 1xx.xxx.xxx.xxx # ip address of ec2XXX.compute-1.amazonaws.com
   User ubuntu
   IdentityFile ~/.ssh/mykey.pem
</code></pre>
","12760","<git><amazon-ec2><config><public-key>","11","11","2","2018-05-10 01:43:39","14486520","0","3","","","","2013-01-20 10:36:41",""
"14423652",".ssh config with amazon ec2 and git","<p>I have a strange problem with cloning a git repository from an amazon ec2 server. It works without any problems on one of my computers running ubuntu 12.04, while on another one using 12.10 it gives me an error: </p>

<pre><code>ssh: Could not resolve hostname ec2server: Name or service not known  
fatal: The remote end hung up unexpectedly
</code></pre>

<p>It's like it is not recognizing my config file. I use the following git command to clone : </p>

<pre><code>sudo git clone ec2server:/var/www/project.git
</code></pre>

<p>or</p>

<pre><code>sudo git clone ec2xxx.compute-1.amazonaws.com:/var/www/project.git
</code></pre>

<p>The two config files are identical on both computers, inside the ~./ssh with the following content:</p>

<pre><code>Host ec2server
   Hostname ec2XXX.compute-1.amazonaws.com
   User ubuntu
   IdentityFile ~/.ssh/mykey.pem
</code></pre>

<p>If I substitute the ec2server with the actual address I get the following error: </p>

<pre><code>Cloning into 'project'...
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>Thanks in advance.</p>
","<p>Recently I had to re-install the system which held the working configuration and I have not managed to replicate it, so it's not about the linux version (very likely). What I managed to do, is that I managed to use the mentioned original script to clone the repository into my home directory. Here it picked up the name correctly, but if I navigated into /var/www, what I was doing before, it just gave me the same error: could ec2server not found ... . So I figure the problem has to do something with the permissions + commands combination. If anyone can figure it out how to make it work, I will mark he's response as a correct answer, until then I am marking mine as the correct one, since this is the closest to the correct.</p>

<p>UPDATE </p>

<p>I figured it out what was the problem: I had to change the permission on /var/www folder in order to be able to clone into that directory. Now it's 777 ( used only for dev on a local machine).</p>
","12760","<git><amazon-ec2><config><public-key>","11","5","2","2018-05-10 01:43:39","14486520","0","3","","","","2013-01-20 10:36:41",""
"48713210","SSH Permission denied (publickey) DigitalOcean Ubuntu","<p>I can't seem to log in to my droplet on digitalocean.  </p>

<p>When I try <code>ssh root@162.243.134.123</code> I get a <code>Permission denied (publickey).</code> I tried resetting the <code>root</code> password and logging in via the digitalocean droplet console, but it won't take the <code>root</code> login or password that was reset. Nor will it take the other username and password that I set up.  </p>

<p>Everything was working fine yesterday, but when I started work today I ran into the <code>Permission denied</code> issue. So I'm not sure what changed to make this no longer work. I also checked my github keys to see if it hadn't been added, but my local machines key is there and correct. I've also tried adding the key to the droplet with <code>ssh-copy-id admin@162.243.134.123</code>, but got the same error.  </p>

<p>Looking at the keys found when logging into the digitalocean website shows the correct key.</p>
","<p>The issue was on the server-side <code>authorized_keys</code>, but not the <code>~/.ssh/authorized_keys</code>. It was in a separate <code>/home/user/.ssh/authorized_keys</code> file, where I had to add the ssh-keys. Once I did this the issue went away. Not sure how it got removed from that file since I hadn't modified it.
This <a href=""https://www.youtube.com/watch?v=HCXDaGIgjcQ"" rel=""noreferrer"">video</a> helped.</p>
","12629","<ssh><ubuntu-16.04><digital-ocean><public-key>","8","9","1","2018-10-04 19:48:54","48716089","8","3","4561132","","2018-10-04 19:48:54","2018-02-09 19:57:26","2018-05-02 19:51:37"
"2012645","Can you help me get my head around openssl public key encryption with rsa.h in c++?","<p>I am trying to get my head around public key encryption using the openssl implementation of rsa in C++. Can you help? So far these are my thoughts (please do correct if necessary)</p>

<ol>
<li>Alice is connected to Bob over a network</li>
<li>Alice and Bob want secure communications</li>
<li>Alice generates a public / private key pair and sends public key to Bob</li>
<li>Bob receives public key and encrypts a randomly generated symmetric cypher key (e.g. blowfish) with the public key and sends the result to Alice</li>
<li>Alice decrypts the ciphertext with the originally generated private key and obtains the symmetric blowfish key</li>
<li>Alice and Bob now both have knowledge of symmetric blowfish key and can establish a secure communication channel </li>
</ol>

<p>Now, I have looked at the openssl/rsa.h rsa implementation (since I already have practical experience with openssl/blowfish.h), and I see these two functions:</p>

<pre><code>int RSA_public_encrypt(int flen, unsigned char *from,
unsigned char *to, RSA *rsa, int padding);
int RSA_private_decrypt(int flen, unsigned char *from,
 unsigned char *to, RSA *rsa, int padding);
</code></pre>

<p>If Alice is to generate *rsa, how does this yield the rsa key pair? Is there something like rsa_public and rsa_private which are derived from rsa? Does *rsa contain both public and private key and the above function automatically strips out the necessary key depending on whether it requires the public or private part? Should two unique *rsa pointers be generated so that actually, we have the following:</p>

<pre><code>int RSA_public_encrypt(int flen, unsigned char *from,
unsigned char *to, RSA *rsa_public, int padding);
int RSA_private_decrypt(int flen, unsigned char *from,
 unsigned char *to, RSA *rsa_private, int padding);
</code></pre>

<p>Secondly, in what format should the *rsa public key be sent to Bob? Must it be reinterpreted in to a character array and then sent the standard way? I've heard something about certificates -- are they anything to do with it?</p>

<p>Sorry for all the questions,
Best Wishes,
Ben.</p>

<p>EDIT: Coe I am currently employing:</p>

<pre><code>/*
 *  theEncryptor.cpp
 *  
 *
 *  Created by ben on 14/01/2010.
 *  Copyright 2010 __MyCompanyName__. All rights reserved.
 *
 */

#include ""theEncryptor.h""
#include &lt;iostream&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sstream&gt;

theEncryptor::theEncryptor()
{

}

void
theEncryptor::blowfish(unsigned char *data, int data_len, unsigned char* key, int enc)
{

    //  hash the key first! 
    unsigned char obuf[20];
    bzero(obuf,20);
    SHA1((const unsigned char*)key, 64, obuf);

    BF_KEY bfkey;
    int keySize = 16;//strlen((char*)key);
    BF_set_key(&amp;bfkey, keySize, obuf);

    unsigned char ivec[16];
    memset(ivec, 0, 16);

    unsigned char* out=(unsigned char*) malloc(data_len);
    bzero(out,data_len);
    int num = 0;
    BF_cfb64_encrypt(data, out, data_len, &amp;bfkey, ivec, &amp;num, enc);

    //for(int i = 0;i&lt;data_len;i++)data[i]=out[i];

    memcpy(data, out, data_len);
    free(out);  

}

void
theEncryptor::generateRSAKeyPair(int bits)
{
    rsa = RSA_generate_key(bits, 65537, NULL, NULL);
}


int
theEncryptor::publicEncrypt(unsigned char* data, unsigned char* dataEncrypted,int dataLen)
{   
    return RSA_public_encrypt(dataLen, data, dataEncrypted, rsa, RSA_PKCS1_OAEP_PADDING);   
}

int
theEncryptor::privateDecrypt(unsigned char* dataEncrypted,
                             unsigned char* dataDecrypted)
{
    return RSA_private_decrypt(RSA_size(rsa), dataEncrypted, 
                                   dataDecrypted, rsa, RSA_PKCS1_OAEP_PADDING);
}

void 
theEncryptor::receivePublicKeyAndSetRSA(int sock, int bits)
{
    int max_hex_size = (bits / 4) + 1;
    char keybufA[max_hex_size];
    bzero(keybufA,max_hex_size);
    char keybufB[max_hex_size];
    bzero(keybufB,max_hex_size);
    int n = recv(sock,keybufA,max_hex_size,0); 
    n = send(sock,""OK"",2,0);
    n = recv(sock,keybufB,max_hex_size,0); 
    n = send(sock,""OK"",2,0); 
    rsa = RSA_new();
    BN_hex2bn(&amp;rsa-&gt;n, keybufA);
    BN_hex2bn(&amp;rsa-&gt;e, keybufB);
}

void 
theEncryptor::transmitPublicKey(int sock, int bits)
{
    const int max_hex_size = (bits / 4) + 1;
    long size = max_hex_size;
    char keyBufferA[size];
    char keyBufferB[size];
    bzero(keyBufferA,size);
    bzero(keyBufferB,size);
    sprintf(keyBufferA,""%s\r\n"",BN_bn2hex(rsa-&gt;n));
    sprintf(keyBufferB,""%s\r\n"",BN_bn2hex(rsa-&gt;e));
    int n = send(sock,keyBufferA,size,0);
    char recBuf[2];
    n = recv(sock,recBuf,2,0);
    n = send(sock,keyBufferB,size,0);
    n = recv(sock,recBuf,2,0);
}

void
theEncryptor::generateRandomBlowfishKey(unsigned char* key, int bytes)
{
            /*
    srand( (unsigned)time( NULL ) );
    std::ostringstream stm;
    for(int i = 0;i&lt;bytes;i++){
        int randomValue = 65 + rand()% 26;
        stm &lt;&lt; (char)((int)randomValue);
    }
    std::string str(stm.str());
    const char* strs = str.c_str();
    for(int i = 0;bytes;i++)key[i]=strs[i];
            */

    int n = RAND_bytes(key, bytes);

    if(n==0)std::cout&lt;&lt;""Warning key was generated with bad entropy. You should not consider communication to be secure""&lt;&lt;std::endl;

}

theEncryptor::~theEncryptor(){}
</code></pre>
","<p>Actually, no problem, I have just read that basically, the RSA object is a structure that contains both public and private fields. One can extract the public field data and only send that to Bob.</p>

<p>I.e. basically, to extract the public fields from rsa and store each in two different buffers (which are char arrays and can then be sent to Bob), you do:</p>

<pre><code>sprintf(keyBufferA,""%s\r\n"",BN_bn2hex(rsa-&gt;n));
sprintf(keyBufferB,""%s\r\n"",BN_bn2hex(rsa-&gt;e));
</code></pre>

<p>And then Bob, on the receiving end, reconstructs as follows:</p>

<pre><code>rsa = RSA_new();
BN_hex2bn(&amp;rsa-&gt;n, keybufA);
BN_hex2bn(&amp;rsa-&gt;e, keybufB);
</code></pre>

<p>Bob can then use rsa* to publicly encrypt the symmetric cypher key which can then be sent to Alice. Alice can then decrypt with the private key</p>

<p>Ben.</p>
","11783","<c++><openssl><rsa><public-key>","10","0","4","2017-06-09 08:21:25","2054913","3","3","242778","","2010-01-21 14:28:01","2010-01-06 11:46:08",""
"2012645","Can you help me get my head around openssl public key encryption with rsa.h in c++?","<p>I am trying to get my head around public key encryption using the openssl implementation of rsa in C++. Can you help? So far these are my thoughts (please do correct if necessary)</p>

<ol>
<li>Alice is connected to Bob over a network</li>
<li>Alice and Bob want secure communications</li>
<li>Alice generates a public / private key pair and sends public key to Bob</li>
<li>Bob receives public key and encrypts a randomly generated symmetric cypher key (e.g. blowfish) with the public key and sends the result to Alice</li>
<li>Alice decrypts the ciphertext with the originally generated private key and obtains the symmetric blowfish key</li>
<li>Alice and Bob now both have knowledge of symmetric blowfish key and can establish a secure communication channel </li>
</ol>

<p>Now, I have looked at the openssl/rsa.h rsa implementation (since I already have practical experience with openssl/blowfish.h), and I see these two functions:</p>

<pre><code>int RSA_public_encrypt(int flen, unsigned char *from,
unsigned char *to, RSA *rsa, int padding);
int RSA_private_decrypt(int flen, unsigned char *from,
 unsigned char *to, RSA *rsa, int padding);
</code></pre>

<p>If Alice is to generate *rsa, how does this yield the rsa key pair? Is there something like rsa_public and rsa_private which are derived from rsa? Does *rsa contain both public and private key and the above function automatically strips out the necessary key depending on whether it requires the public or private part? Should two unique *rsa pointers be generated so that actually, we have the following:</p>

<pre><code>int RSA_public_encrypt(int flen, unsigned char *from,
unsigned char *to, RSA *rsa_public, int padding);
int RSA_private_decrypt(int flen, unsigned char *from,
 unsigned char *to, RSA *rsa_private, int padding);
</code></pre>

<p>Secondly, in what format should the *rsa public key be sent to Bob? Must it be reinterpreted in to a character array and then sent the standard way? I've heard something about certificates -- are they anything to do with it?</p>

<p>Sorry for all the questions,
Best Wishes,
Ben.</p>

<p>EDIT: Coe I am currently employing:</p>

<pre><code>/*
 *  theEncryptor.cpp
 *  
 *
 *  Created by ben on 14/01/2010.
 *  Copyright 2010 __MyCompanyName__. All rights reserved.
 *
 */

#include ""theEncryptor.h""
#include &lt;iostream&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sstream&gt;

theEncryptor::theEncryptor()
{

}

void
theEncryptor::blowfish(unsigned char *data, int data_len, unsigned char* key, int enc)
{

    //  hash the key first! 
    unsigned char obuf[20];
    bzero(obuf,20);
    SHA1((const unsigned char*)key, 64, obuf);

    BF_KEY bfkey;
    int keySize = 16;//strlen((char*)key);
    BF_set_key(&amp;bfkey, keySize, obuf);

    unsigned char ivec[16];
    memset(ivec, 0, 16);

    unsigned char* out=(unsigned char*) malloc(data_len);
    bzero(out,data_len);
    int num = 0;
    BF_cfb64_encrypt(data, out, data_len, &amp;bfkey, ivec, &amp;num, enc);

    //for(int i = 0;i&lt;data_len;i++)data[i]=out[i];

    memcpy(data, out, data_len);
    free(out);  

}

void
theEncryptor::generateRSAKeyPair(int bits)
{
    rsa = RSA_generate_key(bits, 65537, NULL, NULL);
}


int
theEncryptor::publicEncrypt(unsigned char* data, unsigned char* dataEncrypted,int dataLen)
{   
    return RSA_public_encrypt(dataLen, data, dataEncrypted, rsa, RSA_PKCS1_OAEP_PADDING);   
}

int
theEncryptor::privateDecrypt(unsigned char* dataEncrypted,
                             unsigned char* dataDecrypted)
{
    return RSA_private_decrypt(RSA_size(rsa), dataEncrypted, 
                                   dataDecrypted, rsa, RSA_PKCS1_OAEP_PADDING);
}

void 
theEncryptor::receivePublicKeyAndSetRSA(int sock, int bits)
{
    int max_hex_size = (bits / 4) + 1;
    char keybufA[max_hex_size];
    bzero(keybufA,max_hex_size);
    char keybufB[max_hex_size];
    bzero(keybufB,max_hex_size);
    int n = recv(sock,keybufA,max_hex_size,0); 
    n = send(sock,""OK"",2,0);
    n = recv(sock,keybufB,max_hex_size,0); 
    n = send(sock,""OK"",2,0); 
    rsa = RSA_new();
    BN_hex2bn(&amp;rsa-&gt;n, keybufA);
    BN_hex2bn(&amp;rsa-&gt;e, keybufB);
}

void 
theEncryptor::transmitPublicKey(int sock, int bits)
{
    const int max_hex_size = (bits / 4) + 1;
    long size = max_hex_size;
    char keyBufferA[size];
    char keyBufferB[size];
    bzero(keyBufferA,size);
    bzero(keyBufferB,size);
    sprintf(keyBufferA,""%s\r\n"",BN_bn2hex(rsa-&gt;n));
    sprintf(keyBufferB,""%s\r\n"",BN_bn2hex(rsa-&gt;e));
    int n = send(sock,keyBufferA,size,0);
    char recBuf[2];
    n = recv(sock,recBuf,2,0);
    n = send(sock,keyBufferB,size,0);
    n = recv(sock,recBuf,2,0);
}

void
theEncryptor::generateRandomBlowfishKey(unsigned char* key, int bytes)
{
            /*
    srand( (unsigned)time( NULL ) );
    std::ostringstream stm;
    for(int i = 0;i&lt;bytes;i++){
        int randomValue = 65 + rand()% 26;
        stm &lt;&lt; (char)((int)randomValue);
    }
    std::string str(stm.str());
    const char* strs = str.c_str();
    for(int i = 0;bytes;i++)key[i]=strs[i];
            */

    int n = RAND_bytes(key, bytes);

    if(n==0)std::cout&lt;&lt;""Warning key was generated with bad entropy. You should not consider communication to be secure""&lt;&lt;std::endl;

}

theEncryptor::~theEncryptor(){}
</code></pre>
","<p>You should actually be using the higher-level ""Envelope Encryption"" functions from <code>openssl/evp.h</code>, rather than the low-level RSA functions directly.  These do most of the work for you and mean you don't have to reinvent the wheel.</p>

<p>In this case, you'd use the <code>EVP_SealInit()</code>, <code>EVP_SealUpdate()</code> and <code>EVP_SealFinal()</code> functions.  The corresponding decryption functions are <code>EVP_OpenInit()</code>, <code>EVP_OpenUpdate()</code> and <code>EVP_OpenFinal()</code>.  I would suggest using <code>EVP_aes_128_cbc()</code> as the value of the cipher type parameter.</p>

<p>Once you've got the public key loaded into an <code>RSA *</code> handle, you use <code>EVP_PKEY_assign_RSA()</code> to put it into an <code>EVP_PKEY *</code> handle for the EVP functions.</p>

<p>Once you've got this going, to solve the authentication problem I mentioned in my comment, you'll need to established a trusted authority (""Trent"").  Trent's public key is known to all users (distributed with the application or similar - just load it from a PEM file).  Instead of exchanging bare RSA parameters, Alice and Bob exchange x509 certificates that contain their RSA public keys together with their name, and are signed by Trent.  Alice and Bob then each verify the certificate they recieved from the other (using Trent's public key, which they already know), including checking that the associated name is the right one, before continuing the protocol.  OpenSSL includes functions for loading and verifying certificates in the <code>x509.h</code> header.</p>

<hr>

<p>Here's an example of how to use <code>EVP_Seal*()</code> to encrypt a file given the recipient's public key.  It takes the PEM RSA Public Key file (ie as generated by <code>openssl rsa -pubout</code>) as a command line argument, reads the source data from stdin and writes the encrypted data to stdout.  To decrypt, use <code>EVP_Open*()</code> instead, and <code>PEM_read_RSAPrivateKey()</code> to read a private key rather than public key.</p>

<p>It's not really that hard - and certainly less error prone than messing about generating padding, IVs and so on yourself (the Seal function does both the RSA and AES parts of the deal).  Anyway, the code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#include &lt;openssl/evp.h&gt;
#include &lt;openssl/pem.h&gt;
#include &lt;openssl/rsa.h&gt;
#include &lt;openssl/err.h&gt;

#include &lt;arpa/inet.h&gt; /* For htonl() */

int do_evp_seal(FILE *rsa_pkey_file, FILE *in_file, FILE *out_file)
{
    int retval = 0;
    RSA *rsa_pkey = NULL;
    EVP_PKEY *pkey = EVP_PKEY_new();
    EVP_CIPHER_CTX ctx;
    unsigned char buffer[4096];
    unsigned char buffer_out[4096 + EVP_MAX_IV_LENGTH];
    size_t len;
    int len_out;
    unsigned char *ek;
    int eklen;
    uint32_t eklen_n;
    unsigned char iv[EVP_MAX_IV_LENGTH];

    if (!PEM_read_RSA_PUBKEY(rsa_pkey_file, &amp;rsa_pkey, NULL, NULL))
    {
        fprintf(stderr, ""Error loading RSA Public Key File.\n"");
        ERR_print_errors_fp(stderr);
        retval = 2;
        goto out;
    }

    if (!EVP_PKEY_assign_RSA(pkey, rsa_pkey))
    {
        fprintf(stderr, ""EVP_PKEY_assign_RSA: failed.\n"");
        retval = 3;
        goto out;
    }

    EVP_CIPHER_CTX_init(&amp;ctx);
    ek = malloc(EVP_PKEY_size(pkey));

    if (!EVP_SealInit(&amp;ctx, EVP_aes_128_cbc(), &amp;ek, &amp;eklen, iv, &amp;pkey, 1))
    {
        fprintf(stderr, ""EVP_SealInit: failed.\n"");
        retval = 3;
        goto out_free;
    }

    /* First we write out the encrypted key length, then the encrypted key,
     * then the iv (the IV length is fixed by the cipher we have chosen).
     */

    eklen_n = htonl(eklen);
    if (fwrite(&amp;eklen_n, sizeof eklen_n, 1, out_file) != 1)
    {
        perror(""output file"");
        retval = 5;
        goto out_free;
    }
    if (fwrite(ek, eklen, 1, out_file) != 1)
    {
        perror(""output file"");
        retval = 5;
        goto out_free;
    }
    if (fwrite(iv, EVP_CIPHER_iv_length(EVP_aes_128_cbc()), 1, out_file) != 1)
    {
        perror(""output file"");
        retval = 5;
        goto out_free;
    }

    /* Now we process the input file and write the encrypted data to the
     * output file. */

    while ((len = fread(buffer, 1, sizeof buffer, in_file)) &gt; 0)
    {
        if (!EVP_SealUpdate(&amp;ctx, buffer_out, &amp;len_out, buffer, len))
        {
            fprintf(stderr, ""EVP_SealUpdate: failed.\n"");
            retval = 3;
            goto out_free;
        }

        if (fwrite(buffer_out, len_out, 1, out_file) != 1)
        {
            perror(""output file"");
            retval = 5;
            goto out_free;
        }
    }

    if (ferror(in_file))
    {
        perror(""input file"");
        retval = 4;
        goto out_free;
    }

    if (!EVP_SealFinal(&amp;ctx, buffer_out, &amp;len_out))
    {
        fprintf(stderr, ""EVP_SealFinal: failed.\n"");
        retval = 3;
        goto out_free;
    }

    if (fwrite(buffer_out, len_out, 1, out_file) != 1)
    {
        perror(""output file"");
        retval = 5;
        goto out_free;
    }

    out_free:
    EVP_PKEY_free(pkey);
    free(ek);

    out:
    return retval;
}

int main(int argc, char *argv[])
{
    FILE *rsa_pkey_file;
    int rv;

    if (argc &lt; 2)
    {
        fprintf(stderr, ""Usage: %s &lt;PEM RSA Public Key File&gt;\n"", argv[0]);
        exit(1);
    }

    rsa_pkey_file = fopen(argv[1], ""rb"");
    if (!rsa_pkey_file)
    {
        perror(argv[1]);
        fprintf(stderr, ""Error loading PEM RSA Public Key File.\n"");
        exit(2);
    }

    rv = do_evp_seal(rsa_pkey_file, stdin, stdout);

    fclose(rsa_pkey_file);
    return rv;
}
</code></pre>

<hr>

<p>The code you've posted illustrates nicely why you should use the higher-level functions - you've fallen into a couple of pitfalls:</p>

<ul>
<li><p><code>rand()</code> is emphatically <strong>not</strong> a cryptographically strong random number generator! Generating your symmetric key using <code>rand()</code> is enough to make the entire system completely insecure. (The <code>EVP_*()</code> functions generate the necessary random numbers themselves, using a cryptographically strong RNG, seeded from an appropriate entropy source).</p></li>
<li><p>You are setting the IV for CFB mode to a fixed value (zero).  This negates any advantage of using CFB mode in the first place (allowing attackers to trivially perform block-replacement attacks and worse).  (The <code>EVP_*()</code> functions generate an appropriate IV for you, when required).</p></li>
<li><p><code>RSA_PKCS1_OAEP_PADDING</code> should be used if you're defining a new protocol, rather than interoperating with an existing protocol.</p></li>
</ul>

<hr>

<p>The corresponding decryption code, for posterity:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#include &lt;openssl/evp.h&gt;
#include &lt;openssl/pem.h&gt;
#include &lt;openssl/rsa.h&gt;
#include &lt;openssl/err.h&gt;

#include &lt;arpa/inet.h&gt; /* For htonl() */

int do_evp_unseal(FILE *rsa_pkey_file, FILE *in_file, FILE *out_file)
{
    int retval = 0;
    RSA *rsa_pkey = NULL;
    EVP_PKEY *pkey = EVP_PKEY_new();
    EVP_CIPHER_CTX ctx;
    unsigned char buffer[4096];
    unsigned char buffer_out[4096 + EVP_MAX_IV_LENGTH];
    size_t len;
    int len_out;
    unsigned char *ek;
    unsigned int eklen;
    uint32_t eklen_n;
    unsigned char iv[EVP_MAX_IV_LENGTH];

    if (!PEM_read_RSAPrivateKey(rsa_pkey_file, &amp;rsa_pkey, NULL, NULL))
    {
        fprintf(stderr, ""Error loading RSA Private Key File.\n"");
        ERR_print_errors_fp(stderr);
        retval = 2;
        goto out;
    }

    if (!EVP_PKEY_assign_RSA(pkey, rsa_pkey))
    {
        fprintf(stderr, ""EVP_PKEY_assign_RSA: failed.\n"");
        retval = 3;
        goto out;
    }

    EVP_CIPHER_CTX_init(&amp;ctx);
    ek = malloc(EVP_PKEY_size(pkey));

    /* First need to fetch the encrypted key length, encrypted key and IV */

    if (fread(&amp;eklen_n, sizeof eklen_n, 1, in_file) != 1)
    {
        perror(""input file"");
        retval = 4;
        goto out_free;
    }
    eklen = ntohl(eklen_n);
    if (eklen &gt; EVP_PKEY_size(pkey))
    {
        fprintf(stderr, ""Bad encrypted key length (%u &gt; %d)\n"", eklen,
            EVP_PKEY_size(pkey));
        retval = 4;
        goto out_free;
    }
    if (fread(ek, eklen, 1, in_file) != 1)
    {
        perror(""input file"");
        retval = 4;
        goto out_free;
    }
    if (fread(iv, EVP_CIPHER_iv_length(EVP_aes_128_cbc()), 1, in_file) != 1)
    {
        perror(""input file"");
        retval = 4;
        goto out_free;
    }

    if (!EVP_OpenInit(&amp;ctx, EVP_aes_128_cbc(), ek, eklen, iv, pkey))
    {
        fprintf(stderr, ""EVP_OpenInit: failed.\n"");
        retval = 3;
        goto out_free;
    }

    while ((len = fread(buffer, 1, sizeof buffer, in_file)) &gt; 0)
    {
        if (!EVP_OpenUpdate(&amp;ctx, buffer_out, &amp;len_out, buffer, len))
        {
            fprintf(stderr, ""EVP_OpenUpdate: failed.\n"");
            retval = 3;
            goto out_free;
        }

        if (fwrite(buffer_out, len_out, 1, out_file) != 1)
        {
            perror(""output file"");
            retval = 5;
            goto out_free;
        }
    }

    if (ferror(in_file))
    {
        perror(""input file"");
        retval = 4;
        goto out_free;
    }

    if (!EVP_OpenFinal(&amp;ctx, buffer_out, &amp;len_out))
    {
        fprintf(stderr, ""EVP_OpenFinal: failed.\n"");
        retval = 3;
        goto out_free;
    }

    if (fwrite(buffer_out, len_out, 1, out_file) != 1)
    {
        perror(""output file"");
        retval = 5;
        goto out_free;
    }

    out_free:
    EVP_PKEY_free(pkey);
    free(ek);

    out:
    return retval;
}

int main(int argc, char *argv[])
{
    FILE *rsa_pkey_file;
    int rv;

    if (argc &lt; 2)
    {
        fprintf(stderr, ""Usage: %s &lt;PEM RSA Private Key File&gt;\n"", argv[0]);
        exit(1);
    }

    rsa_pkey_file = fopen(argv[1], ""rb"");
    if (!rsa_pkey_file)
    {
        perror(argv[1]);
        fprintf(stderr, ""Error loading PEM RSA Private Key File.\n"");
        exit(2);
    }

    rv = do_evp_unseal(rsa_pkey_file, stdin, stdout);

    fclose(rsa_pkey_file);
    return rv;
}
</code></pre>
","11783","<c++><openssl><rsa><public-key>","10","27","4","2017-06-09 08:21:25","2054913","3","3","242778","","2010-01-21 14:28:01","2010-01-06 11:46:08",""
"2012645","Can you help me get my head around openssl public key encryption with rsa.h in c++?","<p>I am trying to get my head around public key encryption using the openssl implementation of rsa in C++. Can you help? So far these are my thoughts (please do correct if necessary)</p>

<ol>
<li>Alice is connected to Bob over a network</li>
<li>Alice and Bob want secure communications</li>
<li>Alice generates a public / private key pair and sends public key to Bob</li>
<li>Bob receives public key and encrypts a randomly generated symmetric cypher key (e.g. blowfish) with the public key and sends the result to Alice</li>
<li>Alice decrypts the ciphertext with the originally generated private key and obtains the symmetric blowfish key</li>
<li>Alice and Bob now both have knowledge of symmetric blowfish key and can establish a secure communication channel </li>
</ol>

<p>Now, I have looked at the openssl/rsa.h rsa implementation (since I already have practical experience with openssl/blowfish.h), and I see these two functions:</p>

<pre><code>int RSA_public_encrypt(int flen, unsigned char *from,
unsigned char *to, RSA *rsa, int padding);
int RSA_private_decrypt(int flen, unsigned char *from,
 unsigned char *to, RSA *rsa, int padding);
</code></pre>

<p>If Alice is to generate *rsa, how does this yield the rsa key pair? Is there something like rsa_public and rsa_private which are derived from rsa? Does *rsa contain both public and private key and the above function automatically strips out the necessary key depending on whether it requires the public or private part? Should two unique *rsa pointers be generated so that actually, we have the following:</p>

<pre><code>int RSA_public_encrypt(int flen, unsigned char *from,
unsigned char *to, RSA *rsa_public, int padding);
int RSA_private_decrypt(int flen, unsigned char *from,
 unsigned char *to, RSA *rsa_private, int padding);
</code></pre>

<p>Secondly, in what format should the *rsa public key be sent to Bob? Must it be reinterpreted in to a character array and then sent the standard way? I've heard something about certificates -- are they anything to do with it?</p>

<p>Sorry for all the questions,
Best Wishes,
Ben.</p>

<p>EDIT: Coe I am currently employing:</p>

<pre><code>/*
 *  theEncryptor.cpp
 *  
 *
 *  Created by ben on 14/01/2010.
 *  Copyright 2010 __MyCompanyName__. All rights reserved.
 *
 */

#include ""theEncryptor.h""
#include &lt;iostream&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sstream&gt;

theEncryptor::theEncryptor()
{

}

void
theEncryptor::blowfish(unsigned char *data, int data_len, unsigned char* key, int enc)
{

    //  hash the key first! 
    unsigned char obuf[20];
    bzero(obuf,20);
    SHA1((const unsigned char*)key, 64, obuf);

    BF_KEY bfkey;
    int keySize = 16;//strlen((char*)key);
    BF_set_key(&amp;bfkey, keySize, obuf);

    unsigned char ivec[16];
    memset(ivec, 0, 16);

    unsigned char* out=(unsigned char*) malloc(data_len);
    bzero(out,data_len);
    int num = 0;
    BF_cfb64_encrypt(data, out, data_len, &amp;bfkey, ivec, &amp;num, enc);

    //for(int i = 0;i&lt;data_len;i++)data[i]=out[i];

    memcpy(data, out, data_len);
    free(out);  

}

void
theEncryptor::generateRSAKeyPair(int bits)
{
    rsa = RSA_generate_key(bits, 65537, NULL, NULL);
}


int
theEncryptor::publicEncrypt(unsigned char* data, unsigned char* dataEncrypted,int dataLen)
{   
    return RSA_public_encrypt(dataLen, data, dataEncrypted, rsa, RSA_PKCS1_OAEP_PADDING);   
}

int
theEncryptor::privateDecrypt(unsigned char* dataEncrypted,
                             unsigned char* dataDecrypted)
{
    return RSA_private_decrypt(RSA_size(rsa), dataEncrypted, 
                                   dataDecrypted, rsa, RSA_PKCS1_OAEP_PADDING);
}

void 
theEncryptor::receivePublicKeyAndSetRSA(int sock, int bits)
{
    int max_hex_size = (bits / 4) + 1;
    char keybufA[max_hex_size];
    bzero(keybufA,max_hex_size);
    char keybufB[max_hex_size];
    bzero(keybufB,max_hex_size);
    int n = recv(sock,keybufA,max_hex_size,0); 
    n = send(sock,""OK"",2,0);
    n = recv(sock,keybufB,max_hex_size,0); 
    n = send(sock,""OK"",2,0); 
    rsa = RSA_new();
    BN_hex2bn(&amp;rsa-&gt;n, keybufA);
    BN_hex2bn(&amp;rsa-&gt;e, keybufB);
}

void 
theEncryptor::transmitPublicKey(int sock, int bits)
{
    const int max_hex_size = (bits / 4) + 1;
    long size = max_hex_size;
    char keyBufferA[size];
    char keyBufferB[size];
    bzero(keyBufferA,size);
    bzero(keyBufferB,size);
    sprintf(keyBufferA,""%s\r\n"",BN_bn2hex(rsa-&gt;n));
    sprintf(keyBufferB,""%s\r\n"",BN_bn2hex(rsa-&gt;e));
    int n = send(sock,keyBufferA,size,0);
    char recBuf[2];
    n = recv(sock,recBuf,2,0);
    n = send(sock,keyBufferB,size,0);
    n = recv(sock,recBuf,2,0);
}

void
theEncryptor::generateRandomBlowfishKey(unsigned char* key, int bytes)
{
            /*
    srand( (unsigned)time( NULL ) );
    std::ostringstream stm;
    for(int i = 0;i&lt;bytes;i++){
        int randomValue = 65 + rand()% 26;
        stm &lt;&lt; (char)((int)randomValue);
    }
    std::string str(stm.str());
    const char* strs = str.c_str();
    for(int i = 0;bytes;i++)key[i]=strs[i];
            */

    int n = RAND_bytes(key, bytes);

    if(n==0)std::cout&lt;&lt;""Warning key was generated with bad entropy. You should not consider communication to be secure""&lt;&lt;std::endl;

}

theEncryptor::~theEncryptor(){}
</code></pre>
","<p>I write two <em>examples</em> around CAF's code. They are heavily modifed and uses OpenSSL's <code>BIO</code> container for more abstraction. </p>

<p>One example uses a file as input and the other example uses a string buffer. It uses <code>RSA</code> and <code>DES</code>, however you can easily change it from the code. Compile instructions are inside the code. I needed a working example, I hope someone find this useful. I also commented the code. You can get it from here:</p>

<p>Take <strong>file</strong> as input: 
<a href=""https://github.com/farslan/snippets/blob/master/hybrid_file.c"" rel=""nofollow"">https://github.com/farslan/snippets/blob/master/hybrid_file.c</a></p>

<p>Take <strong>string buffer</strong> as input:
<a href=""https://github.com/farslan/snippets/blob/master/hybrid_data.c"" rel=""nofollow"">https://github.com/farslan/snippets/blob/master/hybrid_data.c</a></p>
","11783","<c++><openssl><rsa><public-key>","10","0","4","2017-06-09 08:21:25","2054913","3","3","242778","","2010-01-21 14:28:01","2010-01-06 11:46:08",""
"2012645","Can you help me get my head around openssl public key encryption with rsa.h in c++?","<p>I am trying to get my head around public key encryption using the openssl implementation of rsa in C++. Can you help? So far these are my thoughts (please do correct if necessary)</p>

<ol>
<li>Alice is connected to Bob over a network</li>
<li>Alice and Bob want secure communications</li>
<li>Alice generates a public / private key pair and sends public key to Bob</li>
<li>Bob receives public key and encrypts a randomly generated symmetric cypher key (e.g. blowfish) with the public key and sends the result to Alice</li>
<li>Alice decrypts the ciphertext with the originally generated private key and obtains the symmetric blowfish key</li>
<li>Alice and Bob now both have knowledge of symmetric blowfish key and can establish a secure communication channel </li>
</ol>

<p>Now, I have looked at the openssl/rsa.h rsa implementation (since I already have practical experience with openssl/blowfish.h), and I see these two functions:</p>

<pre><code>int RSA_public_encrypt(int flen, unsigned char *from,
unsigned char *to, RSA *rsa, int padding);
int RSA_private_decrypt(int flen, unsigned char *from,
 unsigned char *to, RSA *rsa, int padding);
</code></pre>

<p>If Alice is to generate *rsa, how does this yield the rsa key pair? Is there something like rsa_public and rsa_private which are derived from rsa? Does *rsa contain both public and private key and the above function automatically strips out the necessary key depending on whether it requires the public or private part? Should two unique *rsa pointers be generated so that actually, we have the following:</p>

<pre><code>int RSA_public_encrypt(int flen, unsigned char *from,
unsigned char *to, RSA *rsa_public, int padding);
int RSA_private_decrypt(int flen, unsigned char *from,
 unsigned char *to, RSA *rsa_private, int padding);
</code></pre>

<p>Secondly, in what format should the *rsa public key be sent to Bob? Must it be reinterpreted in to a character array and then sent the standard way? I've heard something about certificates -- are they anything to do with it?</p>

<p>Sorry for all the questions,
Best Wishes,
Ben.</p>

<p>EDIT: Coe I am currently employing:</p>

<pre><code>/*
 *  theEncryptor.cpp
 *  
 *
 *  Created by ben on 14/01/2010.
 *  Copyright 2010 __MyCompanyName__. All rights reserved.
 *
 */

#include ""theEncryptor.h""
#include &lt;iostream&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sstream&gt;

theEncryptor::theEncryptor()
{

}

void
theEncryptor::blowfish(unsigned char *data, int data_len, unsigned char* key, int enc)
{

    //  hash the key first! 
    unsigned char obuf[20];
    bzero(obuf,20);
    SHA1((const unsigned char*)key, 64, obuf);

    BF_KEY bfkey;
    int keySize = 16;//strlen((char*)key);
    BF_set_key(&amp;bfkey, keySize, obuf);

    unsigned char ivec[16];
    memset(ivec, 0, 16);

    unsigned char* out=(unsigned char*) malloc(data_len);
    bzero(out,data_len);
    int num = 0;
    BF_cfb64_encrypt(data, out, data_len, &amp;bfkey, ivec, &amp;num, enc);

    //for(int i = 0;i&lt;data_len;i++)data[i]=out[i];

    memcpy(data, out, data_len);
    free(out);  

}

void
theEncryptor::generateRSAKeyPair(int bits)
{
    rsa = RSA_generate_key(bits, 65537, NULL, NULL);
}


int
theEncryptor::publicEncrypt(unsigned char* data, unsigned char* dataEncrypted,int dataLen)
{   
    return RSA_public_encrypt(dataLen, data, dataEncrypted, rsa, RSA_PKCS1_OAEP_PADDING);   
}

int
theEncryptor::privateDecrypt(unsigned char* dataEncrypted,
                             unsigned char* dataDecrypted)
{
    return RSA_private_decrypt(RSA_size(rsa), dataEncrypted, 
                                   dataDecrypted, rsa, RSA_PKCS1_OAEP_PADDING);
}

void 
theEncryptor::receivePublicKeyAndSetRSA(int sock, int bits)
{
    int max_hex_size = (bits / 4) + 1;
    char keybufA[max_hex_size];
    bzero(keybufA,max_hex_size);
    char keybufB[max_hex_size];
    bzero(keybufB,max_hex_size);
    int n = recv(sock,keybufA,max_hex_size,0); 
    n = send(sock,""OK"",2,0);
    n = recv(sock,keybufB,max_hex_size,0); 
    n = send(sock,""OK"",2,0); 
    rsa = RSA_new();
    BN_hex2bn(&amp;rsa-&gt;n, keybufA);
    BN_hex2bn(&amp;rsa-&gt;e, keybufB);
}

void 
theEncryptor::transmitPublicKey(int sock, int bits)
{
    const int max_hex_size = (bits / 4) + 1;
    long size = max_hex_size;
    char keyBufferA[size];
    char keyBufferB[size];
    bzero(keyBufferA,size);
    bzero(keyBufferB,size);
    sprintf(keyBufferA,""%s\r\n"",BN_bn2hex(rsa-&gt;n));
    sprintf(keyBufferB,""%s\r\n"",BN_bn2hex(rsa-&gt;e));
    int n = send(sock,keyBufferA,size,0);
    char recBuf[2];
    n = recv(sock,recBuf,2,0);
    n = send(sock,keyBufferB,size,0);
    n = recv(sock,recBuf,2,0);
}

void
theEncryptor::generateRandomBlowfishKey(unsigned char* key, int bytes)
{
            /*
    srand( (unsigned)time( NULL ) );
    std::ostringstream stm;
    for(int i = 0;i&lt;bytes;i++){
        int randomValue = 65 + rand()% 26;
        stm &lt;&lt; (char)((int)randomValue);
    }
    std::string str(stm.str());
    const char* strs = str.c_str();
    for(int i = 0;bytes;i++)key[i]=strs[i];
            */

    int n = RAND_bytes(key, bytes);

    if(n==0)std::cout&lt;&lt;""Warning key was generated with bad entropy. You should not consider communication to be secure""&lt;&lt;std::endl;

}

theEncryptor::~theEncryptor(){}
</code></pre>
","<p>Thanks @Caf.  Your post helped.  However I got </p>

<p>The program '[7056] Encryption2.exe: Native' has exited with code -1073741811 (0xc000000d) for the line</p>

<pre><code>  PEM_read_RSA_PUBKEY(rsa_pkey_file, &amp;rsa_pkey, NULL, NULL)
</code></pre>

<p>I changed to </p>

<pre><code>BIO *bio;
X509 *certificate;

bio = BIO_new(BIO_s_mem());
BIO_puts(bio, (const char*)data);
certificate = PEM_read_bio_X509(bio, NULL, NULL, NULL);
EVP_PKEY *pubkey = X509_get_pubkey (certificate);
rsa_pkey = EVP_PKEY_get1_RSA(pubkey);
</code></pre>

<p>Where data has the PEM file with only public key.  My challenge was to encrypt in C++ and decrypt in java.  I transmitted the base64 encoded ek of size eklen (i did not use eklen_n) and decrypted to get the AES key using the RSA private key.  Then I decrypted the cipher file using this AES key.  It worked fine.</p>
","11783","<c++><openssl><rsa><public-key>","10","0","4","2017-06-09 08:21:25","2054913","3","3","242778","","2010-01-21 14:28:01","2010-01-06 11:46:08",""
"1595013","iPhone: How to create a SecKeyRef from a public key file (PEM)","<p>In order to send and receive encrypted messages from/to the iPhone I need to read a public key (server's public key) PEM file and create a SecKeyRef (later I could even store it on the keychain in order not to create it again).</p>

<p>This is my current workflow:</p>

<ol>
<li>On the server: Create a P12 file with the user's certificate and private key. Store the user's public key on the server's keychain.</li>
<li>On the iPhone: Retrieve the P12 file from the server, use the password to open it and store the private key on the keychain.</li>
<li>On the iPhone: Retrieve a PEM file with the server's public key from the server. Create a SecKeyRef and store it on the keychain</li>
<li>On the iPhone: use both keys to send/receive encrypted messages to/from the server. </li>
<li>Live happily ever after.</li>
</ol>

<p>I'm having problems with 3, as I cannot create a SecKeyRef from the PEM file data. I cannot find any documentation on how to do it, Did anybody had the same problem? Any hints? As I cannot find any code examples or documentation on this it feels that I'm doing something wrong...</p>

<p>thanks!</p>
","<p>You should be able to interpret a DER encoded pem and get a cert using <code>SecCertificateCreateWithData()</code> from which you can then extract a key;</p>

<pre><code>NSData *myCertData = ....;

SecCertificateRef cert = SecCertificateCreateWithData (kCFAllocatorDefault, myCertData); 
CFArrayRef certs = CFArrayCreate(kCFAllocatorDefault, (const void **) &amp;cert, 1, NULL); 

SecTrustRef trust;
SecTrustCreateWithCertificates(certs, policy, &amp;trust);
SecTrustResultType trustResult;
SecTrustEvaluate(trust, &amp;trustResult);
SecKeyRef pub_key_leaf = SecTrustCopyPublicKey(trust);
</code></pre>
","10976","<iphone><encryption><rsa><public-key>","13","7","1","2014-03-20 16:10:50","1633021","1","15","7277","","2009-10-20 14:42:13","2009-10-20 14:28:58",""
"13845470","Extract Public Key using pyOpenSSL from certificate or other connection information","<p>I'm currently trying to write a python server script which should authenticate the current client based on its public key. Since I'm using twisted, the <a href=""http://twistedmatrix.com/documents/11.0.0/core/howto/ssl.html#auto7"" rel=""nofollow noreferrer"">example in the twisted documenteation</a> got me started.</p>

<p>While I can generate keys, connect and communicate using the example code, I have not yet found a way to get the public key of the client in a usable format. In <a href=""https://stackoverflow.com/questions/10362965/how-to-get-public-key-using-pyopenssl"">this stackexchange question</a> somebody extracts the public key from an <code>OpenSSL.crypto.PKey</code> object but cannot transform it to a readable format. Since in I have access to the <code>PKey</code> object of the x509 certificate in the <code>verifyCallback</code> method or via <code>self.transport.getPeerCertificate()</code> from any method of my Protocol, this would be a good way to go. The (not accepted) answer suggests to try <code>crypto.dump_privatekey(PKey)</code>. Unfortunately, this does not really yield the expected result:
While the <code>BEGIN PRIVATE KEY</code> and <code>BEGIN PRIVATE KEY</code> in the answer could be fixed by an easy text replacement function, the base64 string seems not match the public key. I've extracted the public key with <code>openssl rsa -in client.key -pubout &gt; client.pub</code> as mentioned <a href=""https://stackoverflow.com/questions/10271197/openssl-how-to-extract-public-key"">here</a>. It does not match the result of the <code>dump_privatekey</code> function.</p>

<p>While there still is an <a href=""https://bugs.launchpad.net/pyopenssl/+bug/780089"" rel=""nofollow noreferrer"">open bug towards OpenSSL on launchpad</a>, it is not yet fixed. It was reported 19 Month ago, and there is some recent (October 2012) activity on it, I do not have any hope of a fast fix in the repos.</p>

<p>Do you have any other ideas how I could get the public key in a format comparable to the <code>client.pub</code> file I have mentioned above? Perhaps there is a twisted or OpenSSL connection specific object which holds this information. Please note that I have to store the public key in the protocol object such that I can access it later. </p>

<h2>Why is no Answer accepted?</h2>

<h3>M2Crypto by J.F. Sebastian</h3>

<p>Sorry, that I had not thought of a possibility where I cannot correlate the certificate to the connection. I've added the requirement that I have to store the public key inside the protocol instance. Thus, using <code>peerX509.as_pem()</code> inside the <code>postConnectionCheck</code> function as suggested by J.F. Sebastian does not work. Furthermore, at least in version 0.21.1-2ubuntu3 of python-m2crypto I have to call <code>peerX509.get_rsa().as_pem()</code> to get the right public key. Using <code>peerX509.as_pem(None)</code> (since <code>peerX509.as_pem()</code> still wants a passphrase) yields excactly the same output as <code>crypto.dump_privatekey(PKey)</code> in PyOpenSSL. Maybe there is a bug.</p>

<p>Besides this, the answer showed me a possible way to write another workaround by using the following <code>Echo</code> protocol class:</p>

<pre><code>class Echo(Protocol):
    def dataReceived(self, data):
        """"""As soon as any data is received, write it back.""""""
        if self.transport.checked and not self.pubkeyStored:
            self.pubkeyStored = True
            x509 = m2.ssl_get_peer_cert(self.transport.ssl._ptr())
            if x509 is not None:
                x509 = X509.X509(x509, 1)
                pk = x509.get_pubkey()
                self.pubkey = pk.get_rsa().as_pem()
                print pk.as_pem(None)
            print self.pubkey
        self.transport.write(data)
</code></pre>

<p>As you can see this uses some internal classes which I'd like to prevent. I'm hesitating submitting a small patch which would add a <code>getCert</code> method to the <code>TLSProtocolWrapper</code> class in M2Crypto.SSL.TwistedProtocolWrapper. Even if it was accepted upstream, it would break compatibility of my script with any but the most cut-of-the-edge versions of m2crypto. What would you do?</p>

<h3>External OpenSSL call by me</h3>

<p>Well, its an ugly workaround based on external system commands just which seems to me even worse than accessing non-public attributes.</p>
","<p>The analog of <code>openssl rsa -in client.key -pubout &gt; client.pub</code> command in <a href=""http://chandlerproject.org/Projects/MeTooCrypto"" rel=""nofollow""><code>M2Crypto</code></a> (a more complete openssl wrapper than pyOpenSSL) is:</p>

<pre><code>def save_pub_key(cert, filename):
    cert.get_pubkey().get_rsa().save_pub_key(filename)
</code></pre>

<p>You can use <code>M2Crypto</code> instead of <code>pyOpenSSL</code> with twisted. To add ssl capabilities to the echo server:</p>

<pre><code>from twisted.internet import protocol, reactor

class Echo(protocol.Protocol):
    def dataReceived(self, data):
        self.transport.write(data)

class EchoFactory(protocol.Factory):
    def buildProtocol(self, addr):
        return Echo()
</code></pre>

<p>You could:</p>

<pre><code>import sys
from twisted.python import log

from M2Crypto import SSL, X509
from M2Crypto.SSL import Checker
from M2Crypto.SSL.TwistedProtocolWrapper import listenSSL

log.startLogging(sys.stderr)    
cert = X509.load_cert('client.crt')
check = Checker.Checker(peerCertHash=cert.get_fingerprint('sha1'))

def postConnectionCheck(peerX509, expectedHost):
    log.msg(""client cert in pem format:\n"", peerX509.as_pem())
    save_pub_key(peerX509, 'client.pub')
    return check(peerX509, host=None) # don't check client hostname

class SSLContextFactory:
    def getContext(self):
        ctx = SSL.Context()
        ctx.load_verify_locations(cafile='ca.crt')
        ctx.load_cert(certfile='server.crt', keyfile='server.key',
                      callback=lambda *a,**kw: 'keyfile passphrase')
        ctx.set_verify(SSL.verify_peer | SSL.verify_fail_if_no_peer_cert,
                       depth=9, callback=None)
        return ctx
listenSSL(8000, EchoFactory(), SSLContextFactory(),
          interface='localhost',  reactor=reactor,
          postConnectionCheck=postConnectionCheck)
reactor.run()
</code></pre>

<p>To try it, create self-signed certificates:</p>

<pre><code>$ openssl req -new -x509 -nodes -out server.crt -keyout server.key
# NOTE: server.key is unencrypted!
$ cp {server,client}.crt
$ cp {server,client}.key
$ cp {server,ca}.crt
</code></pre>

<p>and connect to the server:</p>

<pre><code>$ openssl s_client -cert client.crt -key client.key -CAfile ca.crt \
   -verify 9 -connect localhost:8000 -no_ssl2
</code></pre>

<p>The server saves the client's public key to the <code>client.pub</code> file. It is identical to the one created by <code>openssl</code> command:</p>

<pre><code>$ openssl rsa -in client.key -pubout &gt; openssl_client.pub
$ diff -s {openssl_,}client.pub
</code></pre>
","10968","<python><twisted><public-key><pyopenssl>","3","2","4","2017-06-10 10:30:58","","1","0","608639","","2017-06-10 10:30:58","2012-12-12 17:39:29",""
"13845470","Extract Public Key using pyOpenSSL from certificate or other connection information","<p>I'm currently trying to write a python server script which should authenticate the current client based on its public key. Since I'm using twisted, the <a href=""http://twistedmatrix.com/documents/11.0.0/core/howto/ssl.html#auto7"" rel=""nofollow noreferrer"">example in the twisted documenteation</a> got me started.</p>

<p>While I can generate keys, connect and communicate using the example code, I have not yet found a way to get the public key of the client in a usable format. In <a href=""https://stackoverflow.com/questions/10362965/how-to-get-public-key-using-pyopenssl"">this stackexchange question</a> somebody extracts the public key from an <code>OpenSSL.crypto.PKey</code> object but cannot transform it to a readable format. Since in I have access to the <code>PKey</code> object of the x509 certificate in the <code>verifyCallback</code> method or via <code>self.transport.getPeerCertificate()</code> from any method of my Protocol, this would be a good way to go. The (not accepted) answer suggests to try <code>crypto.dump_privatekey(PKey)</code>. Unfortunately, this does not really yield the expected result:
While the <code>BEGIN PRIVATE KEY</code> and <code>BEGIN PRIVATE KEY</code> in the answer could be fixed by an easy text replacement function, the base64 string seems not match the public key. I've extracted the public key with <code>openssl rsa -in client.key -pubout &gt; client.pub</code> as mentioned <a href=""https://stackoverflow.com/questions/10271197/openssl-how-to-extract-public-key"">here</a>. It does not match the result of the <code>dump_privatekey</code> function.</p>

<p>While there still is an <a href=""https://bugs.launchpad.net/pyopenssl/+bug/780089"" rel=""nofollow noreferrer"">open bug towards OpenSSL on launchpad</a>, it is not yet fixed. It was reported 19 Month ago, and there is some recent (October 2012) activity on it, I do not have any hope of a fast fix in the repos.</p>

<p>Do you have any other ideas how I could get the public key in a format comparable to the <code>client.pub</code> file I have mentioned above? Perhaps there is a twisted or OpenSSL connection specific object which holds this information. Please note that I have to store the public key in the protocol object such that I can access it later. </p>

<h2>Why is no Answer accepted?</h2>

<h3>M2Crypto by J.F. Sebastian</h3>

<p>Sorry, that I had not thought of a possibility where I cannot correlate the certificate to the connection. I've added the requirement that I have to store the public key inside the protocol instance. Thus, using <code>peerX509.as_pem()</code> inside the <code>postConnectionCheck</code> function as suggested by J.F. Sebastian does not work. Furthermore, at least in version 0.21.1-2ubuntu3 of python-m2crypto I have to call <code>peerX509.get_rsa().as_pem()</code> to get the right public key. Using <code>peerX509.as_pem(None)</code> (since <code>peerX509.as_pem()</code> still wants a passphrase) yields excactly the same output as <code>crypto.dump_privatekey(PKey)</code> in PyOpenSSL. Maybe there is a bug.</p>

<p>Besides this, the answer showed me a possible way to write another workaround by using the following <code>Echo</code> protocol class:</p>

<pre><code>class Echo(Protocol):
    def dataReceived(self, data):
        """"""As soon as any data is received, write it back.""""""
        if self.transport.checked and not self.pubkeyStored:
            self.pubkeyStored = True
            x509 = m2.ssl_get_peer_cert(self.transport.ssl._ptr())
            if x509 is not None:
                x509 = X509.X509(x509, 1)
                pk = x509.get_pubkey()
                self.pubkey = pk.get_rsa().as_pem()
                print pk.as_pem(None)
            print self.pubkey
        self.transport.write(data)
</code></pre>

<p>As you can see this uses some internal classes which I'd like to prevent. I'm hesitating submitting a small patch which would add a <code>getCert</code> method to the <code>TLSProtocolWrapper</code> class in M2Crypto.SSL.TwistedProtocolWrapper. Even if it was accepted upstream, it would break compatibility of my script with any but the most cut-of-the-edge versions of m2crypto. What would you do?</p>

<h3>External OpenSSL call by me</h3>

<p>Well, its an ugly workaround based on external system commands just which seems to me even worse than accessing non-public attributes.</p>
","<p>One possibility to get the public key is an ugly workaround by piping the pem version of the x509 certificate through an externally called openssl instance:</p>

<pre><code>def extractpublickey(x509):
    x509pem = dump_certificate(FILETYPE_PEM,x509)
    ossl = Popen(['openssl','x509','-pubkey','-noout'] , stdout=PIPE, stderr=PIPE, stdin=PIPE)
    (stdout,_) = ossl.communicate(x509pem)
    res = """"
    if stdout[:26] != (""-----BEGIN PUBLIC KEY-----"") or stdout[-24:] != (""-----END PUBLIC KEY-----""):
        raise AttributeError(""Could not extract key from x509 certificate in PEM mode: %s""%x509pem)
    else:
        res = stdout
    return res

class Echo(Protocol):
    def dataReceived(self, data):
        """"""As soon as any data is received, write it back.""""""
        if self.transport.getPeerCertificate() == None:
            print(""unknown client"")
        else: 
            print extractpublickey(self.transport.getPeerCertificate())
        self.transport.write(data)
</code></pre>
","10968","<python><twisted><public-key><pyopenssl>","3","1","4","2017-06-10 10:30:58","","1","0","608639","","2017-06-10 10:30:58","2012-12-12 17:39:29",""
"13845470","Extract Public Key using pyOpenSSL from certificate or other connection information","<p>I'm currently trying to write a python server script which should authenticate the current client based on its public key. Since I'm using twisted, the <a href=""http://twistedmatrix.com/documents/11.0.0/core/howto/ssl.html#auto7"" rel=""nofollow noreferrer"">example in the twisted documenteation</a> got me started.</p>

<p>While I can generate keys, connect and communicate using the example code, I have not yet found a way to get the public key of the client in a usable format. In <a href=""https://stackoverflow.com/questions/10362965/how-to-get-public-key-using-pyopenssl"">this stackexchange question</a> somebody extracts the public key from an <code>OpenSSL.crypto.PKey</code> object but cannot transform it to a readable format. Since in I have access to the <code>PKey</code> object of the x509 certificate in the <code>verifyCallback</code> method or via <code>self.transport.getPeerCertificate()</code> from any method of my Protocol, this would be a good way to go. The (not accepted) answer suggests to try <code>crypto.dump_privatekey(PKey)</code>. Unfortunately, this does not really yield the expected result:
While the <code>BEGIN PRIVATE KEY</code> and <code>BEGIN PRIVATE KEY</code> in the answer could be fixed by an easy text replacement function, the base64 string seems not match the public key. I've extracted the public key with <code>openssl rsa -in client.key -pubout &gt; client.pub</code> as mentioned <a href=""https://stackoverflow.com/questions/10271197/openssl-how-to-extract-public-key"">here</a>. It does not match the result of the <code>dump_privatekey</code> function.</p>

<p>While there still is an <a href=""https://bugs.launchpad.net/pyopenssl/+bug/780089"" rel=""nofollow noreferrer"">open bug towards OpenSSL on launchpad</a>, it is not yet fixed. It was reported 19 Month ago, and there is some recent (October 2012) activity on it, I do not have any hope of a fast fix in the repos.</p>

<p>Do you have any other ideas how I could get the public key in a format comparable to the <code>client.pub</code> file I have mentioned above? Perhaps there is a twisted or OpenSSL connection specific object which holds this information. Please note that I have to store the public key in the protocol object such that I can access it later. </p>

<h2>Why is no Answer accepted?</h2>

<h3>M2Crypto by J.F. Sebastian</h3>

<p>Sorry, that I had not thought of a possibility where I cannot correlate the certificate to the connection. I've added the requirement that I have to store the public key inside the protocol instance. Thus, using <code>peerX509.as_pem()</code> inside the <code>postConnectionCheck</code> function as suggested by J.F. Sebastian does not work. Furthermore, at least in version 0.21.1-2ubuntu3 of python-m2crypto I have to call <code>peerX509.get_rsa().as_pem()</code> to get the right public key. Using <code>peerX509.as_pem(None)</code> (since <code>peerX509.as_pem()</code> still wants a passphrase) yields excactly the same output as <code>crypto.dump_privatekey(PKey)</code> in PyOpenSSL. Maybe there is a bug.</p>

<p>Besides this, the answer showed me a possible way to write another workaround by using the following <code>Echo</code> protocol class:</p>

<pre><code>class Echo(Protocol):
    def dataReceived(self, data):
        """"""As soon as any data is received, write it back.""""""
        if self.transport.checked and not self.pubkeyStored:
            self.pubkeyStored = True
            x509 = m2.ssl_get_peer_cert(self.transport.ssl._ptr())
            if x509 is not None:
                x509 = X509.X509(x509, 1)
                pk = x509.get_pubkey()
                self.pubkey = pk.get_rsa().as_pem()
                print pk.as_pem(None)
            print self.pubkey
        self.transport.write(data)
</code></pre>

<p>As you can see this uses some internal classes which I'd like to prevent. I'm hesitating submitting a small patch which would add a <code>getCert</code> method to the <code>TLSProtocolWrapper</code> class in M2Crypto.SSL.TwistedProtocolWrapper. Even if it was accepted upstream, it would break compatibility of my script with any but the most cut-of-the-edge versions of m2crypto. What would you do?</p>

<h3>External OpenSSL call by me</h3>

<p>Well, its an ugly workaround based on external system commands just which seems to me even worse than accessing non-public attributes.</p>
","<p>I made it working finally using pyOpenSSL and DerSequence class from Crypto.Util.asn1 (pyasn1 library).</p>

<p>Here is a method from my RSAKey class (pkey is a OpenSSL.crypto.PKey instance)  :</p>

<pre><code>from OpenSSL.crypto import dump_privatekey, FILETYPE_ASN1
from Crypto.PublicKey import RSA
from Crypto.Util.asn1 import DerSequence
from base64 import b64decode, b64encode

...

def fromPKey_PublicKey(self, pkey):
    src = dump_privatekey(FILETYPE_ASN1, pkey)
    pub_der = DerSequence()
    pub_der.decode(src)
    self.key = RSA.construct((long(pub_der._seq[1]), long(pub_der._seq[2])))
</code></pre>

<p>The key here is that first item in pub_der._seq is zero and we dont need it.
Than you can convert RSA key stored in self.key to any format you want:</p>

<pre><code>def toPEM_PublicKey(self):
    pemSeq = DerSequence()
    pemSeq[:] = [ self.key.key.n, self.key.key.e ]
    s = b64encode(pemSeq.encode())
    src = '-----BEGIN RSA PUBLIC KEY-----\n'
    while True:
        src += s[:64] + '\n'
        s = s[64:]
        if s == '':
            break
    src += '-----END RSA PUBLIC KEY-----'
    return src
</code></pre>

<p>I am currently working with CSpace project, it uses ""ncrypt"" library ( this is another OpenSSL wrapper ) wich is not supported anymore and it gives SegFault on Linux. So I decided to replace ncrypt library with pyOpenSSL because I am using it in my project called DataHaven.NET. And getting a public key from the peer certificate in PEM format really was a problem for me. Now it is working just fine.</p>
","10968","<python><twisted><public-key><pyopenssl>","3","0","4","2017-06-10 10:30:58","","1","0","608639","","2017-06-10 10:30:58","2012-12-12 17:39:29",""
"13845470","Extract Public Key using pyOpenSSL from certificate or other connection information","<p>I'm currently trying to write a python server script which should authenticate the current client based on its public key. Since I'm using twisted, the <a href=""http://twistedmatrix.com/documents/11.0.0/core/howto/ssl.html#auto7"" rel=""nofollow noreferrer"">example in the twisted documenteation</a> got me started.</p>

<p>While I can generate keys, connect and communicate using the example code, I have not yet found a way to get the public key of the client in a usable format. In <a href=""https://stackoverflow.com/questions/10362965/how-to-get-public-key-using-pyopenssl"">this stackexchange question</a> somebody extracts the public key from an <code>OpenSSL.crypto.PKey</code> object but cannot transform it to a readable format. Since in I have access to the <code>PKey</code> object of the x509 certificate in the <code>verifyCallback</code> method or via <code>self.transport.getPeerCertificate()</code> from any method of my Protocol, this would be a good way to go. The (not accepted) answer suggests to try <code>crypto.dump_privatekey(PKey)</code>. Unfortunately, this does not really yield the expected result:
While the <code>BEGIN PRIVATE KEY</code> and <code>BEGIN PRIVATE KEY</code> in the answer could be fixed by an easy text replacement function, the base64 string seems not match the public key. I've extracted the public key with <code>openssl rsa -in client.key -pubout &gt; client.pub</code> as mentioned <a href=""https://stackoverflow.com/questions/10271197/openssl-how-to-extract-public-key"">here</a>. It does not match the result of the <code>dump_privatekey</code> function.</p>

<p>While there still is an <a href=""https://bugs.launchpad.net/pyopenssl/+bug/780089"" rel=""nofollow noreferrer"">open bug towards OpenSSL on launchpad</a>, it is not yet fixed. It was reported 19 Month ago, and there is some recent (October 2012) activity on it, I do not have any hope of a fast fix in the repos.</p>

<p>Do you have any other ideas how I could get the public key in a format comparable to the <code>client.pub</code> file I have mentioned above? Perhaps there is a twisted or OpenSSL connection specific object which holds this information. Please note that I have to store the public key in the protocol object such that I can access it later. </p>

<h2>Why is no Answer accepted?</h2>

<h3>M2Crypto by J.F. Sebastian</h3>

<p>Sorry, that I had not thought of a possibility where I cannot correlate the certificate to the connection. I've added the requirement that I have to store the public key inside the protocol instance. Thus, using <code>peerX509.as_pem()</code> inside the <code>postConnectionCheck</code> function as suggested by J.F. Sebastian does not work. Furthermore, at least in version 0.21.1-2ubuntu3 of python-m2crypto I have to call <code>peerX509.get_rsa().as_pem()</code> to get the right public key. Using <code>peerX509.as_pem(None)</code> (since <code>peerX509.as_pem()</code> still wants a passphrase) yields excactly the same output as <code>crypto.dump_privatekey(PKey)</code> in PyOpenSSL. Maybe there is a bug.</p>

<p>Besides this, the answer showed me a possible way to write another workaround by using the following <code>Echo</code> protocol class:</p>

<pre><code>class Echo(Protocol):
    def dataReceived(self, data):
        """"""As soon as any data is received, write it back.""""""
        if self.transport.checked and not self.pubkeyStored:
            self.pubkeyStored = True
            x509 = m2.ssl_get_peer_cert(self.transport.ssl._ptr())
            if x509 is not None:
                x509 = X509.X509(x509, 1)
                pk = x509.get_pubkey()
                self.pubkey = pk.get_rsa().as_pem()
                print pk.as_pem(None)
            print self.pubkey
        self.transport.write(data)
</code></pre>

<p>As you can see this uses some internal classes which I'd like to prevent. I'm hesitating submitting a small patch which would add a <code>getCert</code> method to the <code>TLSProtocolWrapper</code> class in M2Crypto.SSL.TwistedProtocolWrapper. Even if it was accepted upstream, it would break compatibility of my script with any but the most cut-of-the-edge versions of m2crypto. What would you do?</p>

<h3>External OpenSSL call by me</h3>

<p>Well, its an ugly workaround based on external system commands just which seems to me even worse than accessing non-public attributes.</p>
","<p>Some of previous answers produce (apparently?) working PEM public key files, but so far as I've tried, none of them produce the same output that the 'openssl rsa -pubout -in priv.key' does. This is pretty important to my test suite, and after poking around in the (0.15.1) PyOpenSSL code, this works well for both standard PKey objects and the public-key-only PKey objects created by the x509.get_pubkey() method:</p>

<pre><code>from OpenSSL import crypto
from OpenSSL._util import lib as cryptolib


def pem_publickey(pkey):
    """""" Format a public key as a PEM """"""
    bio = crypto._new_mem_buf()
    cryptolib.PEM_write_bio_PUBKEY(bio, pkey._pkey)
    return crypto._bio_to_string(bio)


key = crypto.PKey()
key.generate_key(crypto.TYPE_RSA, 2048)
print pem_publickey(key)
</code></pre>
","10968","<python><twisted><public-key><pyopenssl>","3","6","4","2017-06-10 10:30:58","","1","0","608639","","2017-06-10 10:30:58","2012-12-12 17:39:29",""
"30178936","JSch SFTP security with session.setConfig(""StrictHostKeyChecking"", ""no"");","<p>I use JSch with private key to FTP file </p>

<ol>
<li>jsch.addIdentity(privatekeyfile);</li>
<li>Session session = jsch.getSession( ""user"", ""domain.com"" ,22);    </li>
<li>session.setConfig(""StrictHostKeyChecking"", ""no"");</li>
</ol>

<p>Line 3 is in question. Without this line, JSch does not work.</p>

<p>My question is:
Will line 3 make SFTP transfer insecure?</p>
","<p>Disabling the <code>StrictHostKeyChecking</code> option will make the connection less secure than having the option enabled, because it will let you connect to remote servers without verifying their SSH host keys. If the option is enabled, you will only be able to connect to servers which keys are known to your SSH client. </p>

<p>You will have to decide what that means for your specific use case - are the servers you are connecting on a private, local network or do you connect over the internet? Is this a testing or production environment? </p>

<p>When in doubt, it is better to err on the side of more security. I would recommend enabling <code>StricktHostKeyChecking</code> and using the <a href=""http://epaul.github.io/jsch-documentation/simple.javadoc/com/jcraft/jsch/JSch.html#setKnownHosts(java.lang.String)"" rel=""noreferrer""><code>setKnownHosts</code> method</a> to provide a file which contains the remote host keys.</p>
","10909","<sftp><jsch><public-key><key-pair>","5","8","2","2019-06-25 08:41:32","30182638","0","1","850848","","2015-05-12 05:49:30","2015-05-11 22:53:36",""
"30178936","JSch SFTP security with session.setConfig(""StrictHostKeyChecking"", ""no"");","<p>I use JSch with private key to FTP file </p>

<ol>
<li>jsch.addIdentity(privatekeyfile);</li>
<li>Session session = jsch.getSession( ""user"", ""domain.com"" ,22);    </li>
<li>session.setConfig(""StrictHostKeyChecking"", ""no"");</li>
</ol>

<p>Line 3 is in question. Without this line, JSch does not work.</p>

<p>My question is:
Will line 3 make SFTP transfer insecure?</p>
","<p>Yes, it will make the connection (and the transfer) less secure. Particularly, it makes the connection open to <a href=""https://en.wikipedia.org/wiki/Man-in-the-middle_attack"" rel=""nofollow noreferrer"">Man-in-the-middle attacks</a>.</p>

<p>You should never set the <code>StrictHostKeyChecking</code> to <code>no</code>, unless you do not care about security (such as when connecting within a private network).</p>

<p>It's not true that <em>""Without this line, JSch does not work""</em>. You just have to make your code accept the expected server's host key. Either via the <a href=""https://epaul.github.io/jsch-documentation/javadoc/com/jcraft/jsch/JSch.html#setKnownHosts-java.lang.String-"" rel=""nofollow noreferrer""><code>setKnownHosts</code></a> or the <a href=""https://epaul.github.io/jsch-documentation/javadoc/com/jcraft/jsch/JSch.html#setHostKeyRepository-com.jcraft.jsch.HostKeyRepository-"" rel=""nofollow noreferrer""><code>setHostKeyRepository</code></a> methods.</p>

<p>For examples, see <a href=""https://stackoverflow.com/q/32852906/850848"">How to resolve Java UnknownHostKey, while using JSch SFTP library?</a></p>

<hr>

<p>You can read my article on <a href=""https://winscp.net/eng/docs/ssh_verifying_the_host_key"" rel=""nofollow noreferrer"">verifying the host key</a> to understand its importance. It's about WinSCP SSH/SFTP client, but it's generally true for any SSH client/library.</p>
","10909","<sftp><jsch><public-key><key-pair>","5","3","2","2019-06-25 08:41:32","30182638","0","1","850848","","2015-05-12 05:49:30","2015-05-11 22:53:36",""
"3568012","Convert RSA public key, from XML to PEM (PHP)","<p>How convert RSA public key, from XML to PEM (PHP)?</p>
","<p>There is no standard for storing RSA public keys in XML.  So the manner of conversion will depend on the XML you have.</p>
","10694","<php><xml><rsa><public-key><pem>","2","1","6","2012-08-09 10:53:22","3568204","1","3","","","","2010-08-25 16:16:31",""
"3568012","Convert RSA public key, from XML to PEM (PHP)","<p>How convert RSA public key, from XML to PEM (PHP)?</p>
","<p>Maybe you should have a look <a href=""https://stackoverflow.com/questions/3368137/how-can-i-create-a-cryptrsa-object-from-modulus-exponent-and-private-exponent"">here</a></p>

<p>Extract the two base64-encoded strings, convert and pass to PEAR::Crypt_RSA, then export as text file, then openssl convert?</p>

<p><a href=""http://www.mail-archive.com/openssl-users@openssl.org/msg17007.html"" rel=""nofollow noreferrer"">Check this too</a></p>
","10694","<php><xml><rsa><public-key><pem>","2","-1","6","2012-08-09 10:53:22","3568204","1","3","","","","2010-08-25 16:16:31",""
"3568012","Convert RSA public key, from XML to PEM (PHP)","<p>How convert RSA public key, from XML to PEM (PHP)?</p>
","<p>we know</p>

<blockquote>
  <p>.pem - (Privacy Enhanced Mail) Base64
  encoded DER certificate, enclosed
  between ""-----BEGIN CERTIFICATE-----""
  and ""-----END CERTIFICATE-----""</p>
</blockquote>

<p><a href=""http://en.wikipedia.org/wiki/X.509"" rel=""noreferrer"">X.509</a></p>

<blockquote>
  <p>The SignatureValue element contains
  the Base64 encoded signature result -
  the signature generated with the
  parameters specified in the
  SignatureMethod element - of the
  SignedInfo element after applying the
  algorithm specified by the
  CanonicalizationMethod.</p>
</blockquote>

<p><a href=""http://en.wikipedia.org/wiki/XML_Signature"" rel=""noreferrer"">XML_Signature</a></p>

<p>so we end up with</p>

<pre><code>$xml = simplexml_load_file($xmlFile); // or simplexml_load_string

$pem = ""-----BEGIN CERTIFICATE-----\n"";
$pem .= $xml-&gt;SignatureValue;
$pem .= ""\n-----END CERTIFICATE-----"";

// save to file
</code></pre>

<p>if your xml-file isn't a XML_Signature</p>

<pre><code>$xml = simplexml_load_file($xmlFile); // or simplexml_load_string
$pem = ""-----BEGIN CERTIFICATE-----\n"";
$pem .= $xml-&gt;nodeWithWantedValue; // use base64_encode if needed
$pem .= ""\n-----END CERTIFICATE-----"";
</code></pre>
","10694","<php><xml><rsa><public-key><pem>","2","5","6","2012-08-09 10:53:22","3568204","1","3","","","","2010-08-25 16:16:31",""
"3568012","Convert RSA public key, from XML to PEM (PHP)","<p>How convert RSA public key, from XML to PEM (PHP)?</p>
","<p>I'm assuming that by XML format, you mean <a href=""http://www.w3.org/TR/xmldsig-core/#sec-RSAKeyValue"" rel=""noreferrer"">XML DSig RSAKeyValue</a>, and that by PEM format you mean what OpenSSL exports in between <code>-----BEGIN PUBLIC KEY-----</code> and <code>-----END PUBLIC KEY-----</code>.</p>

<p>You need first to extract the modulus and public exponent from the XML.</p>

<pre><code>   &lt;RSAKeyValue&gt;
     &lt;Modulus&gt;xA7SEU+e0yQH5rm9kbCDN9o3aPIo7HbP7tX6WOocLZAtNfyxSZDU16ksL6W
      jubafOqNEpcwR3RdFsT7bCqnXPBe5ELh5u4VEy19MzxkXRgrMvavzyBpVRgBUwUlV
      5foK5hhmbktQhyNdy/6LpQRhDUDsTvK+g9Ucj47es9AQJ3U=
     &lt;/Modulus&gt;
     &lt;Exponent&gt;AQAB&lt;/Exponent&gt;
   &lt;/RSAKeyValue&gt;
</code></pre>

<p>You can easily convert these into a bit string using <a href=""http://php.net/manual/en/function.base64-decode.php"" rel=""noreferrer""><code>base64_decode</code></a>.</p>

<p>Once this is done, you need to build the <a href=""http://luca.ntop.org/Teaching/Appunti/asn1.html"" rel=""noreferrer"">ASN.1</a> public key structure somehow.</p>

<p>What OpenSSL exports between BEGIN/END PUBLIC KEY is an <a href=""http://www.itu.int/rec/T-REC-X.509-200508-I/en"" rel=""noreferrer"">X.509 SubjectPublicKeyInfo structure</a>.</p>

<pre><code>SubjectPublicKeyInfo ::= SEQUENCE {
   algorithm AlgorithmIdentifier,
   subjectPublicKey BIT STRING }
</code></pre>

<p>The <code>subjectPublicKey</code> is made of a sequnce is described in the <a href=""http://www.rsa.com/rsalabs/node.asp?id=2125"" rel=""noreferrer"">PKCS#1 spec</a>:</p>

<pre><code>RSAPublicKey ::= SEQUENCE {
   modulus INTEGER,
   publicExponent INTEGER
}
</code></pre>

<p>The <code>algorithm</code> (an <code>AlgorithmIdentifier</code>) is also described in the PKCS#1 spec (see section A.1):</p>

<pre><code>rsaEncryption
OBJECT IDENTIFIER ::= { pkcs-1 1 }
</code></pre>

<p>This structure needs to be serialized in DER form, then base64-encoded and then placed between the BEGIN/END delimiters.</p>

<p>I don't know of any PHP library to do the ASN.1/DER encoding unfortunately (the rest is relatively easy, but dealing with ASN.1 tends to be tedious).</p>

<p>The <a href=""http://pear.php.net/package/Crypt_RSA/docs/latest/li_Crypt_RSA.html"" rel=""noreferrer"">PHP/PEAR Crypt_RSA module</a> can construct RSA public keys from modulus and exponent, but its <code>toString()</code> method uses a custom format (just the base64-encoding of the result of PHP <code>serialize</code> on the array structure, which has nothing to do with the ASN.1/DER encoding).</p>
","10694","<php><xml><rsa><public-key><pem>","2","10","6","2012-08-09 10:53:22","3568204","1","3","","","","2010-08-25 16:16:31",""
"3568012","Convert RSA public key, from XML to PEM (PHP)","<p>How convert RSA public key, from XML to PEM (PHP)?</p>
","<p>Here's an <a href=""http://www.frostjedi.com/phpbb/viewtopic.php?f=46&amp;t=18085"" rel=""nofollow"">example</a> of how to read XML RSA keys in PHP:</p>
","10694","<php><xml><rsa><public-key><pem>","2","1","6","2012-08-09 10:53:22","3568204","1","3","","","","2010-08-25 16:16:31",""
"3568012","Convert RSA public key, from XML to PEM (PHP)","<p>How convert RSA public key, from XML to PEM (PHP)?</p>
","<p>Just for completeness, here is a working example of creating the PEM from modulus in python. You could call it in a subprocess from PHP if necessary.</p>

<p>The meat of the solution is:</p>

<pre><code>def big_endian(n):
    s = '%x' % n
    if len(s) &amp; 1:
        s = '0' + s
    return s.decode('hex')

from M2Crypto import RSA

e = E_PREFIX + big_endian(public_exponent)
n = N_PREFIX + big_endian(modulus)

new = RSA.new_pub_key((e,n))
new.save_key('foo.pub')
</code></pre>

<p>Where <code>E_PREFIX</code> and <code>N_PREFIX</code> are constants that (as far as I can tell) depend on the exponent and key length. Here is a quick table I have constructed:</p>

<pre><code>E_PREFIX = '\x00\x00\x00\x01' # 0x3 (3)
E_PREFIX = '\x00\x00\x00\x03' # 0x10001 (65537)

N_PREFIX = '\x00\x00\x00!\x00' # 256-bit
N_PREFIX = '\x00\x00\x00A\x00' # 512-bit (default)
N_PREFIX = '\x00\x00\x00\x81\x00' # 1024-bit
N_PREFIX = '\x00\x00\x01\x01\x00' # 2048-bit
N_PREFIX = '\x00\x00\x02\x01\x00' # 4096-bit
</code></pre>

<p>If someone knows a more general way to compute the prefixes, do tell.</p>
","10694","<php><xml><rsa><public-key><pem>","2","0","6","2012-08-09 10:53:22","3568204","1","3","","","","2010-08-25 16:16:31",""
"1824759","git push heroku master permission denied on VISTA","<p>(Using Vista)I'm trying to clone an app from my GitHub Repository and push it into Heroku. Okay, so I've tried to create an SSH key so many times with this:</p>

<pre><code> `ssh-keygen -t rsa` 
</code></pre>

<p>It seems to go perfectly. I have it on my C:/Users/***/.ssh folder. I now try to clone an app i forked in GitHub. When I try to clone it on the rails_apps directory, I get a message saying</p>

<pre><code> Permission Denied(public key). 
</code></pre>

<p>I found a solution on the net saying that I should run this first:</p>

<pre><code>`ssh-add` 
</code></pre>

<p>So I tried doing that. But it said that:</p>

<p>Could not open a connection to your authentication agent.</p>

<p>Then after some googling I find something about executing the ssh-agent. So I do this:</p>

<pre><code>`ssh-agent bash`
</code></pre>

<p>and the command line changes from my rails_apps directory to this:</p>

<pre><code>`bash3.1$&gt;`
</code></pre>

<p>So I run:</p>

<pre><code>`bash3.1$&gt;ssh-add [path to .ssh folder]`
</code></pre>

<p>and it successfully adds the rsa private key(it doesn't work with id-rsa.pub). I have also pasted the newly generated public key to my GitHub account. </p>

<p>Now when I try to clone:</p>

<pre><code>`bash3.1$&gt;git clone git@github.com:username/myrepo.git`
</code></pre>

<p>It now successfully clones the repo I forked in GitHub. Now that I have the app in my local repo, I try to create a heroku app.</p>

<pre><code>`bash3.1$&gt;cd myrepo`  
`bash3.1$&gt;heroku create myapp`
</code></pre>

<p>And this code runs successfully. Git remote added successfully. Now all I have to do is to push it.</p>

<pre><code>`bash3.1$&gt;git push heroku master`
</code></pre>

<p>BAM! I get the error message again. </p>

<p><code>Permission denied (public key)</code></p>

<p>I am so close into pushing my app to heroku. But it just won't work. Can you help me. What am I doing wrong here? Thanks! :D</p>
","<p>Note: your <a href=""http://support.github.com/discussions/repos/2048-cant-git-push-to-heroku-permission-denied-help"" rel=""nofollow noreferrer"">ticket on GitHub Support</a> prompted the answer:</p>

<blockquote>
  <p>You need to give heroku your key. There should be a command to do it. If you can't find it, you'll have to contact their support.</p>
</blockquote>

<p>For that, see <a href=""https://stackoverflow.com/users/579626/graeme-collins"">Graeme Collins</a>'s <a href=""https://stackoverflow.com/a/4722023/6309"">answer</a> (and also <a href=""https://stackoverflow.com/questions/3481973/heroku-error-permission-denied-public-key"">Heroku error: &quot;Permission denied (public key)&quot;</a> ):</p>

<pre><code>heroku keys:add ~/.ssh/id_rsa.pub
</code></pre>

<p>See <a href=""https://devcenter.heroku.com/articles/keys"" rel=""nofollow noreferrer"">Heroku devcenter</a> for more on that process.<br>
You can then see a list of all keys, including the key’s name, like this:</p>

<pre><code>heroku keys
</code></pre>

<p>Note: that suppose you didn't use sudo to generate your keys, as "" <a href=""https://stackoverflow.com/questions/3591084/git-clone-heroku-ssh-permission-denied"">git clone heroku ssh permission denied</a> "" illustrates (where <code>heroku keys:add</code> doesn't work)</p>

<hr>

<p>More information about your ssh keys in your other <a href=""http://support.github.com/discussions/repos/2046-ssh-key-public-key-denied-please-help-me"" rel=""nofollow noreferrer"">GitHub Support ticket</a>.</p>

<pre><code>debug1: Trying private key: /.ssh/identity
debug1: Trying private key: /.ssh/id_rsa
debug1: Trying private key: /.ssh/id_dsa
</code></pre>

<blockquote>
  <p>I'm not sure why it would be looking at <code>/.ssh</code> and not <code>~/.ssh</code> then.<br>
  Try moving your keypair over to that path.</p>
</blockquote>

<hr>

<p>Shouldn't that be:</p>

<pre><code> git push origin master
</code></pre>

<p>? By default, a reference to the cloned repo is called 'origin', not 'heroku'</p>

<p>What does</p>

<pre><code>git remote -v show
</code></pre>

<p>display?  </p>

<p>It you want, you can reference the distant repo by the heroku name</p>

<pre><code>git remote add heroku git@github.com:git_username/projectname.git
</code></pre>
","10583","<git><ssh><github><heroku><public-key>","9","1","4","2014-08-31 02:31:20","1824966","1","9","","","","2009-12-01 08:29:41",""
"1824759","git push heroku master permission denied on VISTA","<p>(Using Vista)I'm trying to clone an app from my GitHub Repository and push it into Heroku. Okay, so I've tried to create an SSH key so many times with this:</p>

<pre><code> `ssh-keygen -t rsa` 
</code></pre>

<p>It seems to go perfectly. I have it on my C:/Users/***/.ssh folder. I now try to clone an app i forked in GitHub. When I try to clone it on the rails_apps directory, I get a message saying</p>

<pre><code> Permission Denied(public key). 
</code></pre>

<p>I found a solution on the net saying that I should run this first:</p>

<pre><code>`ssh-add` 
</code></pre>

<p>So I tried doing that. But it said that:</p>

<p>Could not open a connection to your authentication agent.</p>

<p>Then after some googling I find something about executing the ssh-agent. So I do this:</p>

<pre><code>`ssh-agent bash`
</code></pre>

<p>and the command line changes from my rails_apps directory to this:</p>

<pre><code>`bash3.1$&gt;`
</code></pre>

<p>So I run:</p>

<pre><code>`bash3.1$&gt;ssh-add [path to .ssh folder]`
</code></pre>

<p>and it successfully adds the rsa private key(it doesn't work with id-rsa.pub). I have also pasted the newly generated public key to my GitHub account. </p>

<p>Now when I try to clone:</p>

<pre><code>`bash3.1$&gt;git clone git@github.com:username/myrepo.git`
</code></pre>

<p>It now successfully clones the repo I forked in GitHub. Now that I have the app in my local repo, I try to create a heroku app.</p>

<pre><code>`bash3.1$&gt;cd myrepo`  
`bash3.1$&gt;heroku create myapp`
</code></pre>

<p>And this code runs successfully. Git remote added successfully. Now all I have to do is to push it.</p>

<pre><code>`bash3.1$&gt;git push heroku master`
</code></pre>

<p>BAM! I get the error message again. </p>

<p><code>Permission denied (public key)</code></p>

<p>I am so close into pushing my app to heroku. But it just won't work. Can you help me. What am I doing wrong here? Thanks! :D</p>
","<p>I had a similar problem.
Running the following command fixed it for me:</p>

<p><code>heroku keys:add ~/.ssh/id_rsa.pub</code></p>

<p>Substitute ""~/.ssh/id_rsa.pub"" with your path to your id_rsa.pub file.</p>
","10583","<git><ssh><github><heroku><public-key>","9","61","4","2014-08-31 02:31:20","1824966","1","9","","","","2009-12-01 08:29:41",""
"1824759","git push heroku master permission denied on VISTA","<p>(Using Vista)I'm trying to clone an app from my GitHub Repository and push it into Heroku. Okay, so I've tried to create an SSH key so many times with this:</p>

<pre><code> `ssh-keygen -t rsa` 
</code></pre>

<p>It seems to go perfectly. I have it on my C:/Users/***/.ssh folder. I now try to clone an app i forked in GitHub. When I try to clone it on the rails_apps directory, I get a message saying</p>

<pre><code> Permission Denied(public key). 
</code></pre>

<p>I found a solution on the net saying that I should run this first:</p>

<pre><code>`ssh-add` 
</code></pre>

<p>So I tried doing that. But it said that:</p>

<p>Could not open a connection to your authentication agent.</p>

<p>Then after some googling I find something about executing the ssh-agent. So I do this:</p>

<pre><code>`ssh-agent bash`
</code></pre>

<p>and the command line changes from my rails_apps directory to this:</p>

<pre><code>`bash3.1$&gt;`
</code></pre>

<p>So I run:</p>

<pre><code>`bash3.1$&gt;ssh-add [path to .ssh folder]`
</code></pre>

<p>and it successfully adds the rsa private key(it doesn't work with id-rsa.pub). I have also pasted the newly generated public key to my GitHub account. </p>

<p>Now when I try to clone:</p>

<pre><code>`bash3.1$&gt;git clone git@github.com:username/myrepo.git`
</code></pre>

<p>It now successfully clones the repo I forked in GitHub. Now that I have the app in my local repo, I try to create a heroku app.</p>

<pre><code>`bash3.1$&gt;cd myrepo`  
`bash3.1$&gt;heroku create myapp`
</code></pre>

<p>And this code runs successfully. Git remote added successfully. Now all I have to do is to push it.</p>

<pre><code>`bash3.1$&gt;git push heroku master`
</code></pre>

<p>BAM! I get the error message again. </p>

<p><code>Permission denied (public key)</code></p>

<p>I am so close into pushing my app to heroku. But it just won't work. Can you help me. What am I doing wrong here? Thanks! :D</p>
","<p>The following line solved the problem for me.</p>

<pre><code>heroku accounts:set youraccount
</code></pre>
","10583","<git><ssh><github><heroku><public-key>","9","1","4","2014-08-31 02:31:20","1824966","1","9","","","","2009-12-01 08:29:41",""
"1824759","git push heroku master permission denied on VISTA","<p>(Using Vista)I'm trying to clone an app from my GitHub Repository and push it into Heroku. Okay, so I've tried to create an SSH key so many times with this:</p>

<pre><code> `ssh-keygen -t rsa` 
</code></pre>

<p>It seems to go perfectly. I have it on my C:/Users/***/.ssh folder. I now try to clone an app i forked in GitHub. When I try to clone it on the rails_apps directory, I get a message saying</p>

<pre><code> Permission Denied(public key). 
</code></pre>

<p>I found a solution on the net saying that I should run this first:</p>

<pre><code>`ssh-add` 
</code></pre>

<p>So I tried doing that. But it said that:</p>

<p>Could not open a connection to your authentication agent.</p>

<p>Then after some googling I find something about executing the ssh-agent. So I do this:</p>

<pre><code>`ssh-agent bash`
</code></pre>

<p>and the command line changes from my rails_apps directory to this:</p>

<pre><code>`bash3.1$&gt;`
</code></pre>

<p>So I run:</p>

<pre><code>`bash3.1$&gt;ssh-add [path to .ssh folder]`
</code></pre>

<p>and it successfully adds the rsa private key(it doesn't work with id-rsa.pub). I have also pasted the newly generated public key to my GitHub account. </p>

<p>Now when I try to clone:</p>

<pre><code>`bash3.1$&gt;git clone git@github.com:username/myrepo.git`
</code></pre>

<p>It now successfully clones the repo I forked in GitHub. Now that I have the app in my local repo, I try to create a heroku app.</p>

<pre><code>`bash3.1$&gt;cd myrepo`  
`bash3.1$&gt;heroku create myapp`
</code></pre>

<p>And this code runs successfully. Git remote added successfully. Now all I have to do is to push it.</p>

<pre><code>`bash3.1$&gt;git push heroku master`
</code></pre>

<p>BAM! I get the error message again. </p>

<p><code>Permission denied (public key)</code></p>

<p>I am so close into pushing my app to heroku. But it just won't work. Can you help me. What am I doing wrong here? Thanks! :D</p>
","<p>You can login first in heroku providing Enail and Password and can follow the following steps to add a local git repository into a heroku application instance.</p>

<ol>
<li>Issue this command at the Git Bash $ ssh-keygen -t rsa (default location and with empty passphrase. You can alternatives too).</li>
<li>Again issue at the bash $ heroku keys:add (It will automatically add the public key from the default location).</li>
<li>Issu this at the bash to check keys. $ heroku keys .</li>
<li>You can add the remote for you app name $ heroku git:remote -a app_name</li>
<li>Now you can push the git repo to the heroku using this command $ heroku push origin master </li>
</ol>
","10583","<git><ssh><github><heroku><public-key>","9","0","4","2014-08-31 02:31:20","1824966","1","9","","","","2009-12-01 08:29:41",""
"6124310","problem reading a publickey file and use the key to encrypt another file","<p>I've been strugling with reading a publickey file which I want to get the key sting in the file and use it to encrypt another file. I'm using RSA PKCS1 v1.5 in encrypting and signing the file with SH1 hashing algorythim but thats not the problem, the problem is that I've been supplied with the publickey file to use when encrypting and I cant seem to win with reading the file and generating a publicKey object.</p>

<p>Here's the code:</p>

<pre><code>void setPublicKey(String file) 
{ 
     try 
     { 
       FileInputStream keyfis = new FileInputStream(file); 
       byte[] encKey = new byte[keyfis.available()]; keyfis.read(encKey);
       keyfis.close();
       X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(encKey);
       KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
// I get an exception on the below line
       publicKey = keyFactory.generatePublic(pubKeySpec);
     } catch (Exception e)
       {
         e.printStackTrace();
       }
}
</code></pre>

<p>Can someone please help!!</p>
","<p>AFAIK X509 encoded keys are binary files encoded using ASN.1. Therefore the question on new-lines at the end does not make any sense. </p>

<p>If you have a text file you have a PEM encoded file and I am currently not sure which KeySpec you have to use in this case. </p>

<p>You may convert the PEM encoded key to a DER encoded key (e.g. using OpenSSL) or you can use <a href=""http://www.bouncycastle.org/"" rel=""nofollow"">BouncyCastle</a> which as support for loading PEM encoded keys. </p>

<p>BTW: Using <code>keyfis.read(encKey);</code> is dangerous as the read method only reads up encKey bytes but don't have to. Better create a DataInputStream from the InputStream and use readFully(encKey):</p>

<pre><code>new DataInputStream(keyfis).readFully(encKey);
</code></pre>
","10557","<java><encryption><public-key>","1","1","2","2011-05-26 12:35:46","","5","2","416864","","2011-05-25 12:24:58","2011-05-25 12:15:39",""
"6124310","problem reading a publickey file and use the key to encrypt another file","<p>I've been strugling with reading a publickey file which I want to get the key sting in the file and use it to encrypt another file. I'm using RSA PKCS1 v1.5 in encrypting and signing the file with SH1 hashing algorythim but thats not the problem, the problem is that I've been supplied with the publickey file to use when encrypting and I cant seem to win with reading the file and generating a publicKey object.</p>

<p>Here's the code:</p>

<pre><code>void setPublicKey(String file) 
{ 
     try 
     { 
       FileInputStream keyfis = new FileInputStream(file); 
       byte[] encKey = new byte[keyfis.available()]; keyfis.read(encKey);
       keyfis.close();
       X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(encKey);
       KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
// I get an exception on the below line
       publicKey = keyFactory.generatePublic(pubKeySpec);
     } catch (Exception e)
       {
         e.printStackTrace();
       }
}
</code></pre>

<p>Can someone please help!!</p>
","<p>Found the solution but not sure yet if its the right solution coz I still have to get the PrivateKey and decrypt the file but for now I was able to encrypt it using the supplied PublicKey as the modulus but I don’t have the exponent and I just used some common number “65537” as the exponent
Which I read that it is not a critical part of the encryption.</p>

<p>I had to change the logic to use the RSAPublicKeySpec (which uses BigInteger and Base64Decoder)instead of X509EncodedKeySpec to set the KeySpec
And continue to use the KeyFactory object to generate the public key.
Now this logic NEEDS the modulus and exponent.</p>

<pre><code>byte[] buffer = new byte[(int) new File(file).length()];
BufferedInputStream f = new BufferedInputStream(new FileInputStream(file));
f.read(buffer);
String modulusBase64 = new String(buffer);
BASE64Decoder b64dec = new BASE64Decoder();
String exponentBase64 = ""65537"";
RSAPublicKeySpec publicKeySpec = new RSAPublicKeySpec(new BigInteger    (1,                      b64dec.decodeBuffer(modulusBase64)), new BigInteger(1,     b64dec.decodeBuffer(exponentBase64)));
KeyFactory publicKeyFactory = KeyFactory.getInstance(""RSA"");
publicKey = publicKeyFactory.generatePublic(publicKeySpec);
</code></pre>

<p>//This is the PublicKey in the file. ""J45t4SWGbFzeNuunHliNDZcLVeFU7lOpyNkX1xX+sVNaVJK8Cr0rSjUkDC8h9n+Zg7m0MVYk0byafPycmzWNDynpvj2go9mXwmUpmcQprX1vexxT5j1XmAaBZFYaJRcPWSVU92pdNh1Sd3USdFjgH0LQ5B3s8F95xdyc/5I5LDKhRobx6c1gUs/rnJfJjAgynrE4AsNsNem+STaZWjeb4J+f5Egy9xTSEl6UWxCClgCwhXopy10cBlH8CucpP0cyckOCIOloJ7mEMRCIpp6HPpYexVmXXSikTXh7aQ7tSlTMwUziIERc/zRpyj1Nk96Y7V8AorLFrn1R4Of66mpAdQ==""</p>
","10557","<java><encryption><public-key>","1","1","2","2011-05-26 12:35:46","","5","2","416864","","2011-05-25 12:24:58","2011-05-25 12:15:39",""
"10825687","Python - Paramiko Getting error ""object has no attribute ""get_fingerprint""","<p>decided to give Python a try for the first time, so sorry if the answer is obvious.</p>

<p>I'm trying to create an ssh connection using paramiko.  I'm using the below code:</p>

<pre><code>#!/home/bin/python2.7

import paramiko
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

ssh.connect(""somehost.com"", username=""myName"", pkey=""/home/myName/.ssh/id_rsa.pub"")
stdin, stdout, stderr = ssh.exec_command(""ls -l"")

print stdout.readlines()
ssh.close()
</code></pre>

<p>Pretty standard stuff, right?  Except I'm getting this error:</p>

<pre><code> ./test.py
Traceback (most recent call last):
File ""./test.py"", line 10, in &lt;module&gt;
ssh.connect(""somehost"", username=""myName"", pkey=""/home/myName/.ssh/id_rsa.pub"")
File ""/home/lib/python2.7/site-packages/paramiko/client.py"", line 327, in connect
self._auth(username, password, pkey, key_filenames, allow_agent, look_for_keys)
File ""/home/lib/python2.7/site-packages/paramiko/client.py"", line 418, in _auth
self._log(DEBUG, 'Trying SSH key %s' % hexlify(pkey.get_fingerprint()))
AttributeError: 'str' object has no attribute 'get_fingerprint'
</code></pre>

<p>What ""str"" object is it referring to?  I thought I merely had to pass it the path to the RSA key but it seems to be wanting some object.</p>
","<p>The <code>pkey</code> parameter should be the actual <strong>private</strong> key, not the name of the file containing the key. Note that pkey should be a PKey object and not a string (e.g. <code>private_key = paramiko.RSAKey.from_private_key_file (private_key_filename)</code> ).
Instead of pkey you could use the <code>key_filename</code> parameter to pass the filename directly.</p>

<p>See the <a href=""http://www.lag.net/paramiko/docs/paramiko.SSHClient-class.html#connect"">documentation</a> for <code>connect</code>.</p>
","10255","<python><ssh><paramiko><public-key>","3","12","2","2017-12-26 06:53:56","10825748","0","","","","","2012-05-30 23:31:20",""
"10825687","Python - Paramiko Getting error ""object has no attribute ""get_fingerprint""","<p>decided to give Python a try for the first time, so sorry if the answer is obvious.</p>

<p>I'm trying to create an ssh connection using paramiko.  I'm using the below code:</p>

<pre><code>#!/home/bin/python2.7

import paramiko
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

ssh.connect(""somehost.com"", username=""myName"", pkey=""/home/myName/.ssh/id_rsa.pub"")
stdin, stdout, stderr = ssh.exec_command(""ls -l"")

print stdout.readlines()
ssh.close()
</code></pre>

<p>Pretty standard stuff, right?  Except I'm getting this error:</p>

<pre><code> ./test.py
Traceback (most recent call last):
File ""./test.py"", line 10, in &lt;module&gt;
ssh.connect(""somehost"", username=""myName"", pkey=""/home/myName/.ssh/id_rsa.pub"")
File ""/home/lib/python2.7/site-packages/paramiko/client.py"", line 327, in connect
self._auth(username, password, pkey, key_filenames, allow_agent, look_for_keys)
File ""/home/lib/python2.7/site-packages/paramiko/client.py"", line 418, in _auth
self._log(DEBUG, 'Trying SSH key %s' % hexlify(pkey.get_fingerprint()))
AttributeError: 'str' object has no attribute 'get_fingerprint'
</code></pre>

<p>What ""str"" object is it referring to?  I thought I merely had to pass it the path to the RSA key but it seems to be wanting some object.</p>
","<p>If you have your private key as a string, you can this on python 3+</p>

<pre><code>from io import StringIO
ssh = paramiko.SSHClient()  

private_key = ""you-private-key-here""
pk = paramiko.RSAKey.from_private_key( private_key ) )

ssh.connect('somehost.com', username='myName', pkey= pk )
</code></pre>

<p>Particularly useful if your private key is stored in an environment variable.</p>
","10255","<python><ssh><paramiko><public-key>","3","1","2","2017-12-26 06:53:56","10825748","0","","","","","2012-05-30 23:31:20",""
"11983999","gerrit setup git repo -- permission denied","<p>I am new to gerrit, and I am now trying to setup gerrit a git project.I am now searching help for resolving a permission denied issue, any help is appreciated, thanks in advance.</p>

<p>I am using gerrit + http + mysql, I am now have following problem:</p>

<ol>
<li><p>As I checked my database, I can not find 'login_type' and 'login_http_head' from ""system_config"" in my database, which is described <a href=""http://gerrit.googlecode.com/svn-history/r243/documentation/2.0/config-sso.html"" rel=""nofollow"">http://gerrit.googlecode.com/svn-history/r243/documentation/2.0/config-sso.html</a></p></li>
<li><p>When I click admin->projects, a prompt said ""missing project all-projects""</p></li>
<li><p>When I checked my accounts from database, there are two empty users (I think it's because I did not set them in the UIweb page)</p></li>
<li><p>I cannot register new accounts from UIweb page, I cannot use command line create new users also.</p></li>
</ol>

<p>Following are my steps for ssh-key and register:</p>

<ol>
<li><p>I used <code>ssh-keygen -t rsa -b 2048</code>  (Searchign from internet, I don't know what does 2048 mean)</p></li>
<li><p>I use <code>git config</code> to config a nickname and email, I registered <code>ssh-key</code> by the UIweb page.</p></li>
<li><p>use <code>ssh -p 29418 admin@localhost gerrit create-project --name example.git</code>
I got a prompt: ""Permission denied (publickkey).""</p></li>
<li><p>After searching from internet, I used <code>ssh -vv -p 29418 admin@localhost gerrit</code></p></li>
</ol>

<p>I got the following output:</p>

<pre><code>gerrit2@bst-esa3-bs:~$ ssh -vv -p 29418 admin@localhost gerrit --help

OpenSSH_5.5p1 Debian-4ubuntu6, OpenSSL 0.9.8o 01 Jun 2010

debug1: Reading configuration data /etc/ssh/ssh_config

debug1: Applying options for *

debug2: ssh_connect: needpriv 0

debug1: Connecting to localhost [::1] port 29418.

debug1: Connection established.

debug2: key_type_from_name: unknown key type '-----BEGIN'

debug2: key_type_from_name: unknown key type '-----END'

debug1: identity file /home/gerrit2/.ssh/id_rsa type 1

debug1: Checking blacklist file /usr/share/ssh/blacklist.RSA-2048

debug1: Checking blacklist file /etc/ssh/blacklist.RSA-2048

debug1: identity file /home/gerrit2/.ssh/id_rsa-cert type -1

debug1: identity file /home/gerrit2/.ssh/id_dsa type -1

debug1: identity file /home/gerrit2/.ssh/id_dsa-cert type -1

debug1: Remote protocol version 2.0, remote software version GerritCodeReview_2.4.2 (SSHD-
CORE-0.5.1-R1095809)

debug1: no match: GerritCodeReview_2.4.2 (SSHD-CORE-0.5.1-R1095809)

debug1: Enabling compatibility mode for protocol 2.0

debug1: Local version string SSH-2.0-OpenSSH_5.5p1 Debian-4ubuntu6

debug2: fd 3 setting O_NONBLOCK

debug1: SSH2_MSG_KEXINIT sent

debug1: SSH2_MSG_KEXINIT received

debug2: kex_parse_kexinit: diffie-hellman-group-exchange-sha256,diffie-hellman-group-
exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1

debug2: kex_parse_kexinit: ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-
rsa,ssh-dss

debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-
cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-
cbc@lysator.liu.se

debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-
cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-
cbc@lysator.liu.se

debug2: kex_parse_kexinit: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-
ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96

debug2: kex_parse_kexinit: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-
ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96

debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib

debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib

debug2: kex_parse_kexinit:

debug2: kex_parse_kexinit:

debug2: kex_parse_kexinit: first_kex_follows 0

debug2: kex_parse_kexinit: reserved 0

debug2: kex_parse_kexinit: diffie-hellman-group14-sha1,diffie-hellman-group1-sha1

debug2: kex_parse_kexinit: ssh-rsa,ssh-dss

debug2: kex_parse_kexinit: aes128-cbc,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc

debug2: kex_parse_kexinit: aes128-cbc,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc

debug2: kex_parse_kexinit: hmac-md5,hmac-sha1,hmac-md5-96,hmac-sha1-96

debug2: kex_parse_kexinit: hmac-md5,hmac-sha1,hmac-md5-96,hmac-sha1-96

debug2: kex_parse_kexinit: none

debug2: kex_parse_kexinit: none

debug2: kex_parse_kexinit:

debug2: kex_parse_kexinit:

debug2: kex_parse_kexinit: first_kex_follows 0

debug2: kex_parse_kexinit: reserved 0

debug2: mac_setup: found hmac-md5

debug1: kex: server-&gt;client aes128-cbc hmac-md5 none

debug2: mac_setup: found hmac-md5

debug1: kex: client-&gt;server aes128-cbc hmac-md5 none

debug2: dh_gen_key: priv key bits set: 138/256

debug2: bits set: 1040/2048

debug1: sending SSH2_MSG_KEXDH_INIT

debug1: expecting SSH2_MSG_KEXDH_REPLY

debug1: Host '[localhost]:29418' is known and matches the RSA host key.

debug1: Found key in /home/gerrit2/.ssh/known_hosts:1

debug2: bits set: 1018/2048

debug1: ssh_rsa_verify: signature correct

debug2: kex_derive_keys

debug2: set_newkeys: mode 1

debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS

debug2: set_newkeys: mode 0

debug1: SSH2_MSG_NEWKEYS received

debug1: Roaming not allowed by server

debug1: SSH2_MSG_SERVICE_REQUEST sent
debug2: service_accept: ssh-userauth

debug1: SSH2_MSG_SERVICE_ACCEPT received

debug2: key: /home/gerrit2/.ssh/id_rsa (0x7f23f313aff0)

debug2: key: /home/gerrit2/.ssh/id_dsa ((nil))

debug1: Authentications that can continue: publickey

debug1: Next authentication method: publickey

debug1: Offering public key: /home/gerrit2/.ssh/id_rsa

debug2: we sent a publickey packet, wait for reply

debug1: Authentications that can continue: publickey

debug1: Trying private key: /home/gerrit2/.ssh/id_dsa

debug2: we did not send a packet, disable method

debug1: No more authentication methods to try.

Permission denied (publickey).
</code></pre>
","<p>Did you upload your ssh key into Gerrit through the web interface?  Are you sure your username in Gerrit is 'admin'?</p>
","10169","<git><permissions><public-key><gerrit><denied>","5","4","2","2018-09-28 15:03:03","11988424","2","","3187556","","2014-12-02 19:51:44","2012-08-16 09:12:20",""
"11983999","gerrit setup git repo -- permission denied","<p>I am new to gerrit, and I am now trying to setup gerrit a git project.I am now searching help for resolving a permission denied issue, any help is appreciated, thanks in advance.</p>

<p>I am using gerrit + http + mysql, I am now have following problem:</p>

<ol>
<li><p>As I checked my database, I can not find 'login_type' and 'login_http_head' from ""system_config"" in my database, which is described <a href=""http://gerrit.googlecode.com/svn-history/r243/documentation/2.0/config-sso.html"" rel=""nofollow"">http://gerrit.googlecode.com/svn-history/r243/documentation/2.0/config-sso.html</a></p></li>
<li><p>When I click admin->projects, a prompt said ""missing project all-projects""</p></li>
<li><p>When I checked my accounts from database, there are two empty users (I think it's because I did not set them in the UIweb page)</p></li>
<li><p>I cannot register new accounts from UIweb page, I cannot use command line create new users also.</p></li>
</ol>

<p>Following are my steps for ssh-key and register:</p>

<ol>
<li><p>I used <code>ssh-keygen -t rsa -b 2048</code>  (Searchign from internet, I don't know what does 2048 mean)</p></li>
<li><p>I use <code>git config</code> to config a nickname and email, I registered <code>ssh-key</code> by the UIweb page.</p></li>
<li><p>use <code>ssh -p 29418 admin@localhost gerrit create-project --name example.git</code>
I got a prompt: ""Permission denied (publickkey).""</p></li>
<li><p>After searching from internet, I used <code>ssh -vv -p 29418 admin@localhost gerrit</code></p></li>
</ol>

<p>I got the following output:</p>

<pre><code>gerrit2@bst-esa3-bs:~$ ssh -vv -p 29418 admin@localhost gerrit --help

OpenSSH_5.5p1 Debian-4ubuntu6, OpenSSL 0.9.8o 01 Jun 2010

debug1: Reading configuration data /etc/ssh/ssh_config

debug1: Applying options for *

debug2: ssh_connect: needpriv 0

debug1: Connecting to localhost [::1] port 29418.

debug1: Connection established.

debug2: key_type_from_name: unknown key type '-----BEGIN'

debug2: key_type_from_name: unknown key type '-----END'

debug1: identity file /home/gerrit2/.ssh/id_rsa type 1

debug1: Checking blacklist file /usr/share/ssh/blacklist.RSA-2048

debug1: Checking blacklist file /etc/ssh/blacklist.RSA-2048

debug1: identity file /home/gerrit2/.ssh/id_rsa-cert type -1

debug1: identity file /home/gerrit2/.ssh/id_dsa type -1

debug1: identity file /home/gerrit2/.ssh/id_dsa-cert type -1

debug1: Remote protocol version 2.0, remote software version GerritCodeReview_2.4.2 (SSHD-
CORE-0.5.1-R1095809)

debug1: no match: GerritCodeReview_2.4.2 (SSHD-CORE-0.5.1-R1095809)

debug1: Enabling compatibility mode for protocol 2.0

debug1: Local version string SSH-2.0-OpenSSH_5.5p1 Debian-4ubuntu6

debug2: fd 3 setting O_NONBLOCK

debug1: SSH2_MSG_KEXINIT sent

debug1: SSH2_MSG_KEXINIT received

debug2: kex_parse_kexinit: diffie-hellman-group-exchange-sha256,diffie-hellman-group-
exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1

debug2: kex_parse_kexinit: ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-
rsa,ssh-dss

debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-
cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-
cbc@lysator.liu.se

debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-
cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-
cbc@lysator.liu.se

debug2: kex_parse_kexinit: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-
ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96

debug2: kex_parse_kexinit: hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160,hmac-
ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96

debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib

debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib

debug2: kex_parse_kexinit:

debug2: kex_parse_kexinit:

debug2: kex_parse_kexinit: first_kex_follows 0

debug2: kex_parse_kexinit: reserved 0

debug2: kex_parse_kexinit: diffie-hellman-group14-sha1,diffie-hellman-group1-sha1

debug2: kex_parse_kexinit: ssh-rsa,ssh-dss

debug2: kex_parse_kexinit: aes128-cbc,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc

debug2: kex_parse_kexinit: aes128-cbc,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc

debug2: kex_parse_kexinit: hmac-md5,hmac-sha1,hmac-md5-96,hmac-sha1-96

debug2: kex_parse_kexinit: hmac-md5,hmac-sha1,hmac-md5-96,hmac-sha1-96

debug2: kex_parse_kexinit: none

debug2: kex_parse_kexinit: none

debug2: kex_parse_kexinit:

debug2: kex_parse_kexinit:

debug2: kex_parse_kexinit: first_kex_follows 0

debug2: kex_parse_kexinit: reserved 0

debug2: mac_setup: found hmac-md5

debug1: kex: server-&gt;client aes128-cbc hmac-md5 none

debug2: mac_setup: found hmac-md5

debug1: kex: client-&gt;server aes128-cbc hmac-md5 none

debug2: dh_gen_key: priv key bits set: 138/256

debug2: bits set: 1040/2048

debug1: sending SSH2_MSG_KEXDH_INIT

debug1: expecting SSH2_MSG_KEXDH_REPLY

debug1: Host '[localhost]:29418' is known and matches the RSA host key.

debug1: Found key in /home/gerrit2/.ssh/known_hosts:1

debug2: bits set: 1018/2048

debug1: ssh_rsa_verify: signature correct

debug2: kex_derive_keys

debug2: set_newkeys: mode 1

debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS

debug2: set_newkeys: mode 0

debug1: SSH2_MSG_NEWKEYS received

debug1: Roaming not allowed by server

debug1: SSH2_MSG_SERVICE_REQUEST sent
debug2: service_accept: ssh-userauth

debug1: SSH2_MSG_SERVICE_ACCEPT received

debug2: key: /home/gerrit2/.ssh/id_rsa (0x7f23f313aff0)

debug2: key: /home/gerrit2/.ssh/id_dsa ((nil))

debug1: Authentications that can continue: publickey

debug1: Next authentication method: publickey

debug1: Offering public key: /home/gerrit2/.ssh/id_rsa

debug2: we sent a publickey packet, wait for reply

debug1: Authentications that can continue: publickey

debug1: Trying private key: /home/gerrit2/.ssh/id_dsa

debug2: we did not send a packet, disable method

debug1: No more authentication methods to try.

Permission denied (publickey).
</code></pre>
","<p>The big gotcha, in my experience, is the ssh config file:
~/.ssh/config</p>

<p>This is where you tell SSH to align your user id with target URL and port.</p>

<pre><code>Host gerrit.domain.com
    User my_user_name
    Port 29418
</code></pre>

<p>I only ever have to do this every few years, so always forget this last step after all the keys are setup and it still doesn't work.</p>
","10169","<git><permissions><public-key><gerrit><denied>","5","1","2","2018-09-28 15:03:03","11988424","2","","3187556","","2014-12-02 19:51:44","2012-08-16 09:12:20",""
"18806962","Simple DER Cert Parsing in python","<p>Which is the best way to parse with python a binary file with X509 Certificate in DER format to extract public key.</p>
","<p>Neither the built-in SSL module of Python nor PyOpenSSL have an API to extract the private key and access its information. M2Crypto is no longer maintained and doesn't work with OpenSSL 1.0 and newer.</p>

<p>PyOpenSSL has a public key class but its features are limited:</p>

<pre><code>&gt;&gt;&gt; with open(""cert.der"", ""rb"") as f:
...     der = f.read()
... 
&gt;&gt;&gt; import OpenSSL.crypto
&gt;&gt;&gt; x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_ASN1, der)
&gt;&gt;&gt; pkey = x509.get_pubkey()
&gt;&gt;&gt; dir(pkey)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'bits', 'check', 'generate_key', 'type']
&gt;&gt;&gt; pkey.bits()
4096L
&gt;&gt;&gt; pkey.type() == OpenSSL.crypto.TYPE_RSA
True
</code></pre>

<p>Python 3.4 may get a X509 type that exposes more information like SPKI.</p>
","10022","<python><ssl-certificate><public-key>","5","8","3","2017-05-15 22:48:14","18808106","0","1","4279","","2015-11-04 15:58:20","2013-09-14 22:21:43",""
"18806962","Simple DER Cert Parsing in python","<p>Which is the best way to parse with python a binary file with X509 Certificate in DER format to extract public key.</p>
","<p>It's been a long time since I asked this question, though due to the number of views, I would like to describe how I managed to make it worked.</p>

<p>By using the OpenSSL API, we can easily print the DER certificate in a pretty readable way. Even though its features are very limited, this is an example.</p>

<pre><code>print OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_TEXT,x509)
</code></pre>

<p>However, I wanted to have control over the keys in a var directly (it was needed to send it to other function), and in order to do that, I made the following function</p>

<pre><code>def parse_asn1_der(derfile):
    from pyasn1_modules import  rfc2437,rfc2459
    from pyasn1.codec.der import decoder
    certType = rfc2459.Certificate(); 
    raw=derfile #the result of open(fname,""rb"").read()
    cert,rest = decoder.decode(raw, asn1Spec=certType)
    RSAKEYSDATA=frombits(cert.getComponentByName(""tbsCertificate"").getComponentByName(""subjectPublicKeyInfo"").getComponentByName(""subjectPublicKey""))
    SignatureCert=frombits(cert.getComponentByName(""signatureValue"")).encode(""hex"")
    rsaType=rfc2437.RSAPublicKey();
    rsadata,rsadata_rest = decoder.decode(RSAKEYSDATA, asn1Spec=rsaType)
    print ""----""
    print ""Certificate Plain Data""
    print ""RSA Modulus: %X"" %rsadata.getComponentByName(""modulus"")
    print ""RSA Public exponent: %X"" %rsadata.getComponentByName(""publicExponent"")
    print ""Signature: %s""%SignatureCert
    return rsadata.getComponentByName(""modulus"")
</code></pre>

<p>Hope it helps anyone looking around.</p>
","10022","<python><ssl-certificate><public-key>","5","2","3","2017-05-15 22:48:14","18808106","0","1","4279","","2015-11-04 15:58:20","2013-09-14 22:21:43",""
"18806962","Simple DER Cert Parsing in python","<p>Which is the best way to parse with python a binary file with X509 Certificate in DER format to extract public key.</p>
","<p>The above answers are somewhat old (as of 2017).</p>

<p>You can use <a href=""https://github.com/wbond/asn1crypto/"" rel=""noreferrer"">asn1crypto</a> to do this in a nicer way:</p>

<pre><code>from asn1crypto.x509 import Certificate

with open(""mycert.der"", ""rb"") as f:
    cert = Certificate.load(f.read())

n = cert.public_key.native[""public_key""][""modulus""]
e = cert.public_key.native[""public_key""][""public_exponent""]

print(""{:#x}"".format(n))    # prints the modulus (hexadecimal)
print(""{:#x}"".format(e))    # same, for the public exponent
</code></pre>

<p>It's relatively new (from what I can see, mid-2015), provides a nicer interface than the libraries already mentioned, and is much faster than <code>pyasn1</code> according to the author.</p>
","10022","<python><ssl-certificate><public-key>","5","10","3","2017-05-15 22:48:14","18808106","0","1","4279","","2015-11-04 15:58:20","2013-09-14 22:21:43",""
"19127079","Difference result by using sign and verify for signature","<p>I tried to use private key to sign the message digest to generate the signature, and then use public key to verify the signature to get message digest. I want to compare with this two message digests, but i got a error about ""java.security.SignatureException: Signature length not correct: got 250 but was expecting 128"".</p>

<p>When i tried to print out Arrays.toString(data2), its all 0.
I also tried to follow the link: <a href=""http://docs.oracle.com/javase/tutorial/security/apisign/vstep4.html"" rel=""nofollow"">Verify the Signature</a></p>

<pre><code> public void firstDigitalSignature() throws IOException, NoSuchAlgorithmException, Throwable
 {

     //*Generate Message Digest1*
     byte[] buffer=null;
     buffer = new byte[(int) inputFile1.length()]; 
     FileInputStream fis = new FileInputStream(inputFile1);
     fis.read(buffer);
     MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256""); 
     messageDigest.update(buffer);
     digestBytes = messageDigest.digest();  
     //convert the byte to hex format method 2
     StringBuffer hexString = new StringBuffer();
     for(int i=0;i&lt;digestBytes.length;i++){
         hexString.append(Integer.toHexString(0xFF &amp; digestBytes[i]));
     }
     System.out.println(""Message Digest-1: ""+hexString.toString()); 

   //*Using private key to encrypt the image-Digital signauture1 *
     Signature signature = Signature.getInstance(""SHA256withRSA"");
     signature.initSign(privateKey);
     signature.update(digestBytes);
     encryptmd= signature.sign();
     StringBuffer hexString2 = new StringBuffer();
     for(int i=0;i&lt;encryptmd.length;i++){
          hexString2.append(Integer.toHexString(0xFF &amp; encryptmd[i]));
          x=hexString2.toString();
          File file = new File(""c://Directroy111"");
          if (!file.exists()) {  
             if (file.mkdir()) {
                 System.out.println(""Doctor is created!"");
             } else {
                 System.out.println(""Failed to create Doctor!"");
             }
      }
         BufferedWriter out = new BufferedWriter(
         new FileWriter(""C:\\Directroy111\\Digital Signature Doctor.txt""));
         out.write(x);
         out.close();
         this.copyImageFiles(sourceFile, destinationDir);
      }
          System.out.println(""Message Digest Encrypted-1: ""+hexString2.toString()+""\n"");
   }


public void firstVerify() throws IOException, NoSuchAlgorithmException, Throwable
{
//Generate Message Digest1 - Decrypt
String verifyfile= ""c:\\Directroy111\\2.jpg"";
File decryptfile= new File(verifyfile);
byte[] buffer2=null;
buffer2 = new byte[(int) decryptfile.length()]; //array type is integer, thats why we use int here
FileInputStream fis2 = new FileInputStream(decryptfile);
fis2.read(buffer2);
MessageDigest messageDigest2 = MessageDigest.getInstance(""SHA-256""); 
messageDigest2.update(buffer2);
byte[] digestBytes2 = messageDigest2.digest();  
StringBuffer hexString22 = new StringBuffer();
for(int i=0;i&lt;digestBytes2.length;i++){
  hexString22.append(Integer.toHexString(0xFF &amp; digestBytes2[i]));
}
System.out.println(""Message Digest(Hash)-1(Decryption): ""+hexString22.toString()); //System.out.println(hexString);

   //*******Decypt*************//
Signature signature = Signature.getInstance(""SHA256withRSA"");
  signature.initVerify(publicKey);
  //FileReader read= new FileReader(""C:\\TEMP1\\Doctor\\Digital Signature Doctor.txt"");
  FileInputStream br2 = new FileInputStream(""C:\\Directroy111\\Digital Signature Doctor.txt"");
 //BufferedInputStream bis=new BufferedInputStream(br2);
  //BufferedReader br = new BufferedReader(new FileReader(br2));
  byte[] data2=new byte[br2.available()];
  System.out.println(Arrays.toString(data2));
  br2.read(data2);
  br2.close();

  FileInputStream datafis=new FileInputStream(""C:\\Directroy111\\Digital Signature Doctor.txt"");
  BufferedInputStream bufin=new BufferedInputStream(datafis);
  byte[] buffer=new byte[1024];

  int len;
  while(bufin.available()!=0){
          len=bufin.read(buffer);
          signature.update(buffer,0,len);
      };
      bufin.close();
      System.out.println(""111111"");
      boolean decryptmd2= signature.verify(data2);
      System.out.println(""signature verifies: "" + decryptmd2);
      if(decryptmd2==false){
       str = String.valueOf(decryptmd2);
      System.out.println(""Message Digest-1(Decryption): ""+str);
      }else{
          System.out.println(""1111"");
      }

          //**Verify*
      if(str.equals(hexString22.toString())){
        System.out.println(""Digital Signature-1 was not modified""+""\n"");
      }else{

        System.out.println(""ERROR!!!  Digital Signature-1 was modified""+""\n"");
      }

} 
</code></pre>
","<p>I see a couple issues here.  First, the actual signing code should be included with your question as well.  Without being able to see the signing code, it's more difficult to debug the problem.  Check if your signing algorithm is the same as your verification algorithm (SHA256withRSA).  </p>

<p>Next, if you're using the <code>SHA256withRSA</code> algorithm, you don't need to calculate a message digest first.  The algorithm will calculate it for you and sign the digest.  You just pass in the entire file to be signed.</p>

<p>In your verification step, you are updating the Signature object with the same file that you are saying is the signature.  Both files are <code>Digital Signature Doctor.txt</code>.  You should update the Signature object with the file to be signed, which I believe from your example is <code>2.jpg</code>.  Then when you call the <code>verify()</code> method, pass in the signature bytes.</p>

<p>Finally, you are misinterpreting the return value of <code>verify()</code>.  It returns a boolean.  It does not return the message digest or the original message.  When your code does <code>String.valueOf(decryptmd2)</code>, the value will either be ""false"" or ""true"".</p>

<p>I'm not sure why you are trying to compare the message digests.  Let's say you are sent a message with a signature signed by a private key corresponding to a public key that you trust.  IF the <code>verify()</code> method returns true, you can be sure that:</p>

<ul>
<li>the message was signed by that person</li>
<li>the message you received is identical to the message that was signed</li>
</ul>

<p>That should be sufficient for what you need.</p>
","9726","<java><encryption><bytearray><digital-signature><public-key>","0","0","2","2019-09-02 02:00:55","","2","5","2141529","","2013-10-02 03:35:18","2013-10-01 22:28:45",""
"19127079","Difference result by using sign and verify for signature","<p>I tried to use private key to sign the message digest to generate the signature, and then use public key to verify the signature to get message digest. I want to compare with this two message digests, but i got a error about ""java.security.SignatureException: Signature length not correct: got 250 but was expecting 128"".</p>

<p>When i tried to print out Arrays.toString(data2), its all 0.
I also tried to follow the link: <a href=""http://docs.oracle.com/javase/tutorial/security/apisign/vstep4.html"" rel=""nofollow"">Verify the Signature</a></p>

<pre><code> public void firstDigitalSignature() throws IOException, NoSuchAlgorithmException, Throwable
 {

     //*Generate Message Digest1*
     byte[] buffer=null;
     buffer = new byte[(int) inputFile1.length()]; 
     FileInputStream fis = new FileInputStream(inputFile1);
     fis.read(buffer);
     MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256""); 
     messageDigest.update(buffer);
     digestBytes = messageDigest.digest();  
     //convert the byte to hex format method 2
     StringBuffer hexString = new StringBuffer();
     for(int i=0;i&lt;digestBytes.length;i++){
         hexString.append(Integer.toHexString(0xFF &amp; digestBytes[i]));
     }
     System.out.println(""Message Digest-1: ""+hexString.toString()); 

   //*Using private key to encrypt the image-Digital signauture1 *
     Signature signature = Signature.getInstance(""SHA256withRSA"");
     signature.initSign(privateKey);
     signature.update(digestBytes);
     encryptmd= signature.sign();
     StringBuffer hexString2 = new StringBuffer();
     for(int i=0;i&lt;encryptmd.length;i++){
          hexString2.append(Integer.toHexString(0xFF &amp; encryptmd[i]));
          x=hexString2.toString();
          File file = new File(""c://Directroy111"");
          if (!file.exists()) {  
             if (file.mkdir()) {
                 System.out.println(""Doctor is created!"");
             } else {
                 System.out.println(""Failed to create Doctor!"");
             }
      }
         BufferedWriter out = new BufferedWriter(
         new FileWriter(""C:\\Directroy111\\Digital Signature Doctor.txt""));
         out.write(x);
         out.close();
         this.copyImageFiles(sourceFile, destinationDir);
      }
          System.out.println(""Message Digest Encrypted-1: ""+hexString2.toString()+""\n"");
   }


public void firstVerify() throws IOException, NoSuchAlgorithmException, Throwable
{
//Generate Message Digest1 - Decrypt
String verifyfile= ""c:\\Directroy111\\2.jpg"";
File decryptfile= new File(verifyfile);
byte[] buffer2=null;
buffer2 = new byte[(int) decryptfile.length()]; //array type is integer, thats why we use int here
FileInputStream fis2 = new FileInputStream(decryptfile);
fis2.read(buffer2);
MessageDigest messageDigest2 = MessageDigest.getInstance(""SHA-256""); 
messageDigest2.update(buffer2);
byte[] digestBytes2 = messageDigest2.digest();  
StringBuffer hexString22 = new StringBuffer();
for(int i=0;i&lt;digestBytes2.length;i++){
  hexString22.append(Integer.toHexString(0xFF &amp; digestBytes2[i]));
}
System.out.println(""Message Digest(Hash)-1(Decryption): ""+hexString22.toString()); //System.out.println(hexString);

   //*******Decypt*************//
Signature signature = Signature.getInstance(""SHA256withRSA"");
  signature.initVerify(publicKey);
  //FileReader read= new FileReader(""C:\\TEMP1\\Doctor\\Digital Signature Doctor.txt"");
  FileInputStream br2 = new FileInputStream(""C:\\Directroy111\\Digital Signature Doctor.txt"");
 //BufferedInputStream bis=new BufferedInputStream(br2);
  //BufferedReader br = new BufferedReader(new FileReader(br2));
  byte[] data2=new byte[br2.available()];
  System.out.println(Arrays.toString(data2));
  br2.read(data2);
  br2.close();

  FileInputStream datafis=new FileInputStream(""C:\\Directroy111\\Digital Signature Doctor.txt"");
  BufferedInputStream bufin=new BufferedInputStream(datafis);
  byte[] buffer=new byte[1024];

  int len;
  while(bufin.available()!=0){
          len=bufin.read(buffer);
          signature.update(buffer,0,len);
      };
      bufin.close();
      System.out.println(""111111"");
      boolean decryptmd2= signature.verify(data2);
      System.out.println(""signature verifies: "" + decryptmd2);
      if(decryptmd2==false){
       str = String.valueOf(decryptmd2);
      System.out.println(""Message Digest-1(Decryption): ""+str);
      }else{
          System.out.println(""1111"");
      }

          //**Verify*
      if(str.equals(hexString22.toString())){
        System.out.println(""Digital Signature-1 was not modified""+""\n"");
      }else{

        System.out.println(""ERROR!!!  Digital Signature-1 was modified""+""\n"");
      }

} 
</code></pre>
","<p>Echoing gtrig's comments, here is a complete example showing signature creation and verification:</p>

<pre><code>import java.io.*;
import java.security.*;

public class RSASignatureExample {

    private static int BUFSIZE = 8192;
    private PrivateKey privateKey;
    private PublicKey publicKey;

    public RSASignatureExample() throws Exception {
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(1024);
        KeyPair kp = kpg.generateKeyPair();
        privateKey = kp.getPrivate();
        publicKey = kp.getPublic();
    }

    private static void processData(File f, Signature s) throws Exception {
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(f), BUFSIZE);
        byte[] buf = new byte[BUFSIZE];
        int numRead;
        while ((numRead = bis.read(buf)) &gt; 0) {
            s.update(buf, 0, numRead);
        }
        bis.close();
    }

    public byte[] sign(File fileToSign) throws Exception {
        Signature signature = Signature.getInstance(""SHA256withRSA"");
        signature.initSign(privateKey);
        processData(fileToSign, signature);
        return signature.sign();
    }

    public boolean verify(File fileToVerify, byte[] signatureBytes) throws Exception {
        Signature signature = Signature.getInstance(""SHA256withRSA"");
        signature.initVerify(publicKey);
        processData(fileToVerify, signature);
        return signature.verify(signatureBytes);
    }

    public static void main(String[] args) throws Exception {
        RSASignatureExample example = new RSASignatureExample();
        File tempFile = File.createTempFile(""rsa"", null);
        FileOutputStream fos = new FileOutputStream(tempFile);
        fos.write(""Hello World"".getBytes(""UTF-8""));
        fos.close();

        // Sign the file

        byte [] signatureBytes = example.sign(tempFile);

        // Verify the signature

        boolean isVerified = example.verify(tempFile, signatureBytes);
        System.out.printf(""Signature verified ?: %b"", isVerified);
    }
}
</code></pre>
","9726","<java><encryption><bytearray><digital-signature><public-key>","0","0","2","2019-09-02 02:00:55","","2","5","2141529","","2013-10-02 03:35:18","2013-10-01 22:28:45",""
"28406888","C# RSA Public Key Output Not Correct","<p>I am currently trying to generate and send a public RSA key using C#. It should be a 2048 bit long key in PEM format. I have successfully done so using OpenSSL command with the following (some output are shortened):</p>

<pre><code>$ openssl genrsa 2048 
Generating RSA private key, 2048 bit long modulus
............................................................+++
............................................................+++
e is 65537 (0x10001)
$ openssl rsa -pubout
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAy1MoBtENHBhYLgwP5Hw/xRGaBPHonApChBPBYD6fiq/QoLXA
RmyMoOjXHsKrrwysYIujXADM2LZ0MlFvPbBulvciWnZwp9CUQPwsZ8xnmBWlHyru
xTxNSvV+E/6+2gMOn3I4bmOSIaLx2Y7nCuaenREvD7Mn0vgFnP7yaN8/9va4q8Lo
...
...
y5jiKQKBgGAe9DlkYvR6Edr/gzd6HaF4btQZf6idGdmsYRYc2EMHdRM2NVqlvyLc
MR6rYEuViqLN5XWK6ITOlTPrgAuU6Rl4ZpRlS1ZrfjiUS6dzD/jtJJvsYByC7ZoU
NxIzB0r1hj0TIoedu6NqfRyJ6Fx09U5W81xx77T1EBSg4OCH7eyl
-----END RSA PRIVATE KEY-----
writing RSA key
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy1MoBtENHBhYLgwP5Hw/
xRGaBPHonApChBPBYD6fiq/QoLXARmyMoOjXHsKrrwysYIujXADM2LZ0MlFvPbBu
lvciWnZwp9CUQPwsZ8xnmBWlHyruxTxNSvV+E/6+2gMOn3I4bmOSIaLx2Y7nCuae
nREvD7Mn0vgFnP7yaN8/9va4q8LoMKlceE5fSYl2QIfC5ZxUtkblbycEWZHLVOkv
+4Iz0ibD8KGo0PaiZl0jmn9yYXFy747xmwVun+Z4czO8Nu+OOVxsQF4hu1pKvTUx
9yHH/vk5Wr0I09VFyt3BT/RkecJbAAWB9/e572T+hhmmJ08wCs29oFa2Cdik9yyE
2QIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>The following code is what I use to generate a public key using C#:</p>

<pre><code>// Variables
CspParameters cspParams = null;
RSACryptoServiceProvider rsaProvider = null;
StreamWriter publicKeyFile = null;
string publicKey = """";

try
{
   // Create a new key pair on target CSP
   cspParams = new CspParameters();
   cspParams.ProviderType = 1; // PROV_RSA_FULL
   cspParams.Flags = CspProviderFlags.CreateEphemeralKey;
   rsaProvider = new RSACryptoServiceProvider(2048, cspParams);

   // Export public key
   result = ExportPublicKeyToPEMFormat(rsaProvider);
}
catch (Exception ex)
{
}
</code></pre>

<p>The <em>ExportPublicKeyToPEMFormat</em> can be found from this thread:
<a href=""https://stackoverflow.com/a/25591659/2383179"">https://stackoverflow.com/a/25591659/2383179</a></p>

<p><strong>My output in C# looks like this:</strong></p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBKwIBAAKCAQEAzMoaInPQ7nAXGWUY2EEtBcPY/Zvfcqf3Uxr7mFrQaxMjdXYi
DVSPh9XBWJlEhQ9ZGyBMpkWwtkrlDw11g/7pj+u7KTa5nH1ZB8vCrY3TC+YnFXPQ
Nv5dCzW0Lz+HD04rir2+K++XQCroy7G68uE9dtkbqa1U7IEWOvejbX+sgzo5ISHA
vCz2DFBInqYNJWfkM8OvLnRYYQ4f8MbmvDEMyaEYPGfQybXAs5eFksqm9pwR0xh4
Oxg/DkDas93lNIf+g00IesHvHuavRm2GX8jAXhrAoZY7nWQZpqS5kwx1kjSwtYEg
Vq4mHcaKIalMAoILSV9ttgqiJ5KVuKIvQJ7wRwIDAQABAgMBAAECAwEAAQIDAQAB
AgMBAAECAwEAAQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p><strong>The correct output using OpenSSL looks like this:</strong></p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy1MoBtENHBhYLgwP5Hw/
xRGaBPHonApChBPBYD6fiq/QoLXARmyMoOjXHsKrrwysYIujXADM2LZ0MlFvPbBu
lvciWnZwp9CUQPwsZ8xnmBWlHyruxTxNSvV+E/6+2gMOn3I4bmOSIaLx2Y7nCuae
nREvD7Mn0vgFnP7yaN8/9va4q8LoMKlceE5fSYl2QIfC5ZxUtkblbycEWZHLVOkv
+4Iz0ibD8KGo0PaiZl0jmn9yYXFy747xmwVun+Z4czO8Nu+OOVxsQF4hu1pKvTUx
9yHH/vk5Wr0I09VFyt3BT/RkecJbAAWB9/e572T+hhmmJ08wCs29oFa2Cdik9yyE
2QIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>Obviously there is something different with the formats between the two public key. </p>

<p><strong>The OpenSSL key always starst with</strong>
""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA"" </p>

<p><strong>My key starts with</strong> 
""MIIBKwIBAAKCAQEA""</p>
","<p>Unfortunately, the code in the answer you referenced isn't really correct - it exports a <em>private</em> key PEM format, but with only the public key fields correctly set, this is not the same as exporting an RSA public key in standard format.</p>

<p>I actually wrote the code in the <a href=""https://stackoverflow.com/a/23739932/381588"">other answer</a> to that question, and at the time wrote a mode for exporting the public key in the standard format, but didn't include it in that answer as it wasn't required. Here it is:</p>

<pre><code>private static void ExportPublicKey(RSACryptoServiceProvider csp, TextWriter outputStream)
{
    var parameters = csp.ExportParameters(false);
    using (var stream = new MemoryStream())
    {
        var writer = new BinaryWriter(stream);
        writer.Write((byte)0x30); // SEQUENCE
        using (var innerStream = new MemoryStream())
        {
            var innerWriter = new BinaryWriter(innerStream);
            innerWriter.Write((byte)0x30); // SEQUENCE
            EncodeLength(innerWriter, 13);
            innerWriter.Write((byte)0x06); // OBJECT IDENTIFIER
            var rsaEncryptionOid = new byte[] { 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01 };
            EncodeLength(innerWriter, rsaEncryptionOid.Length);
            innerWriter.Write(rsaEncryptionOid);
            innerWriter.Write((byte)0x05); // NULL
            EncodeLength(innerWriter, 0);
            innerWriter.Write((byte)0x03); // BIT STRING
            using (var bitStringStream = new MemoryStream())
            {
                var bitStringWriter = new BinaryWriter(bitStringStream);
                bitStringWriter.Write((byte)0x00); // # of unused bits
                bitStringWriter.Write((byte)0x30); // SEQUENCE
                using (var paramsStream = new MemoryStream())
                {
                    var paramsWriter = new BinaryWriter(paramsStream);
                    EncodeIntegerBigEndian(paramsWriter, parameters.Modulus); // Modulus
                    EncodeIntegerBigEndian(paramsWriter, parameters.Exponent); // Exponent
                    var paramsLength = (int)paramsStream.Length;
                    EncodeLength(bitStringWriter, paramsLength);
                    bitStringWriter.Write(paramsStream.GetBuffer(), 0, paramsLength);
                }
                var bitStringLength = (int)bitStringStream.Length;
                EncodeLength(innerWriter, bitStringLength);
                innerWriter.Write(bitStringStream.GetBuffer(), 0, bitStringLength);
            }
            var length = (int)innerStream.Length;
            EncodeLength(writer, length);
            writer.Write(innerStream.GetBuffer(), 0, length);
        }

        var base64 = Convert.ToBase64String(stream.GetBuffer(), 0, (int)stream.Length).ToCharArray();
        outputStream.WriteLine(""-----BEGIN PUBLIC KEY-----"");
        for (var i = 0; i &lt; base64.Length; i += 64)
        {
            outputStream.WriteLine(base64, i, Math.Min(64, base64.Length - i));
        }
        outputStream.WriteLine(""-----END PUBLIC KEY-----"");
    }
}

private static void EncodeLength(BinaryWriter stream, int length)
{
    if (length &lt; 0) throw new ArgumentOutOfRangeException(""length"", ""Length must be non-negative"");
    if (length &lt; 0x80)
    {
        // Short form
        stream.Write((byte)length);
    }
    else
    {
        // Long form
        var temp = length;
        var bytesRequired = 0;
        while (temp &gt; 0)
        {
            temp &gt;&gt;= 8;
            bytesRequired++;
        }
        stream.Write((byte)(bytesRequired | 0x80));
        for (var i = bytesRequired - 1; i &gt;= 0; i--)
        {
            stream.Write((byte)(length &gt;&gt; (8 * i) &amp; 0xff));
        }
    }
}

private static void EncodeIntegerBigEndian(BinaryWriter stream, byte[] value, bool forceUnsigned = true)
{
    stream.Write((byte)0x02); // INTEGER
    var prefixZeros = 0;
    for (var i = 0; i &lt; value.Length; i++)
    {
        if (value[i] != 0) break;
        prefixZeros++;
    }
    if (value.Length - prefixZeros == 0)
    {
        EncodeLength(stream, 1);
        stream.Write((byte)0);
    }
    else
    {
        if (forceUnsigned &amp;&amp; value[prefixZeros] &gt; 0x7f)
        {
            // Add a prefix zero to force unsigned if the MSB is 1
            EncodeLength(stream, value.Length - prefixZeros + 1);
            stream.Write((byte)0);
        }
        else
        {
            EncodeLength(stream, value.Length - prefixZeros);
        }
        for (var i = prefixZeros; i &lt; value.Length; i++)
        {
            stream.Write(value[i]);
        }
    }
}
</code></pre>
","9651","<c#><openssl><rsa><public-key><pem>","24","51","1","2018-08-27 15:52:13","28407693","1","5","-1","","2017-05-23 12:32:13","2015-02-09 09:50:44",""
"7305673","git clone fails for Heroku project","<p>(on Mac)
I'm trying to clone my project from my new computer. I first generated the ssh key pairs:</p>

<pre><code>heroku keys:add /Users/y/.ssh/heroku_rsa.pub
</code></pre>

<p><code>heroku keys</code> shows:</p>

<pre><code>ssh-rsa AAAAB3NzaC...B9DjpXg3fb y@server.local
</code></pre>

<p>When I try to clone my project by <code>git clone git@heroku.com:xyz.git</code></p>

<pre><code>Cloning into xyz...
Warning: Permanently added the RSA host key for IP address '50.19.85.132' to the list of known hosts.
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>This is strange.</p>

<p>EDIT: If I don't rename my pub key file then it works. Somehow heroku doesn't like renaming my keys.. in other words, use the deault <code>id_rsa.pub</code> name.</p>
","<p>It looks like your key is not loaded. Only default named key (id_rsa) loaded by default. Load the heroku key by using ssh-add command:</p>

<pre><code>ssh-add ~/.ssh/heroku_rsa
</code></pre>
","9333","<git><ssh><heroku><public-key>","8","9","3","2014-09-03 15:10:48","7314578","3","11","256405","","2011-09-05 09:32:01","2011-09-05 08:41:54",""
"7305673","git clone fails for Heroku project","<p>(on Mac)
I'm trying to clone my project from my new computer. I first generated the ssh key pairs:</p>

<pre><code>heroku keys:add /Users/y/.ssh/heroku_rsa.pub
</code></pre>

<p><code>heroku keys</code> shows:</p>

<pre><code>ssh-rsa AAAAB3NzaC...B9DjpXg3fb y@server.local
</code></pre>

<p>When I try to clone my project by <code>git clone git@heroku.com:xyz.git</code></p>

<pre><code>Cloning into xyz...
Warning: Permanently added the RSA host key for IP address '50.19.85.132' to the list of known hosts.
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>This is strange.</p>

<p>EDIT: If I don't rename my pub key file then it works. Somehow heroku doesn't like renaming my keys.. in other words, use the deault <code>id_rsa.pub</code> name.</p>
","<p>I had a similar problem.  At first, I did not have a key called id_rsa.pub.  I only had a key for github: github_rsa.pub.  I ran <code>heroku keys</code> and saw that it did recognize that I had a key.  But apparently heroku does not like that github key.  Here's what I did:</p>

<pre><code>$ssh-keygen -t rsa
$heroku keys:clear
$heroku keys:add 
$git clone git@heroku.com:my-app.git -o heroku
</code></pre>

<p>This downloaded all the files for the project successfully.</p>
","9333","<git><ssh><heroku><public-key>","8","15","3","2014-09-03 15:10:48","7314578","3","11","256405","","2011-09-05 09:32:01","2011-09-05 08:41:54",""
"7305673","git clone fails for Heroku project","<p>(on Mac)
I'm trying to clone my project from my new computer. I first generated the ssh key pairs:</p>

<pre><code>heroku keys:add /Users/y/.ssh/heroku_rsa.pub
</code></pre>

<p><code>heroku keys</code> shows:</p>

<pre><code>ssh-rsa AAAAB3NzaC...B9DjpXg3fb y@server.local
</code></pre>

<p>When I try to clone my project by <code>git clone git@heroku.com:xyz.git</code></p>

<pre><code>Cloning into xyz...
Warning: Permanently added the RSA host key for IP address '50.19.85.132' to the list of known hosts.
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>This is strange.</p>

<p>EDIT: If I don't rename my pub key file then it works. Somehow heroku doesn't like renaming my keys.. in other words, use the deault <code>id_rsa.pub</code> name.</p>
","<pre><code>heroku git:clone -a ""your_project_name_on_heroku""
</code></pre>

<p>This simple command  works fine (provided that your ssh key is correctly added before)</p>
","9333","<git><ssh><heroku><public-key>","8","1","3","2014-09-03 15:10:48","7314578","3","11","256405","","2011-09-05 09:32:01","2011-09-05 08:41:54",""
"51228645","How can I encrypt with a RSA private key in python?","<p>Is it possible to encrypt a message with a private key in python using pycryptodome or any other library? I know that you are not supposed to encrypt with the private key and decrypt with the public key, but my purpose is to encrypt with the private one so the receiver could be sure that the message was send by the real author. More than secure encryption I'm looking for some kind of obfuscation. I want to do an app where the message is public but it can only be seen if you have the public key.
I've tried to do this:</p>

<pre><code>from Crypto import Random
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64


def generate_keys():
    modulus_lenght = 256 * 4
    private_key = RSA.generate(modulus_lenght, Random.new().read)
    public_key = private_key.publickey()
    return private_key, public_key

def encrypt_private_key(a_message, private_key):
    encryptor = PKCS1_OAEP.new(private_key)
    encrypted_msg = encryptor.encrypt(a_message)
    encoded_encrypted_msg = base64.b64encode(encrypted_msg)
   return encoded_encrypted_msg

def decrypt_public_key(encoded_encrypted_msg, public_key):
    encryptor = PKCS1_OAEP.new(public_key)
    decoded_encrypted_msg = base64.b64decode(encoded_encrypted_msg)
    decoded_decrypted_msg = encryptor.decrypt(decoded_encrypted_msg)
    return decoded_decrypted_msg

private_key, public_key = generate_keys()

message = ""Hello world""

encoded = encrypt_private_key(message, private_key)
decoded = decrypt_public_key(encoded, public_key)

print decoded
</code></pre>

<p>But it raises the next error: TypeError: This is not a private key.</p>
","<p><strong>Short answer</strong></p>

<ul>
<li>the code that you are using doesn't allow you to do that for security reasons</li>
<li>alternative code below</li>
</ul>

<p><strong>Long answer</strong> </p>

<p>I was curious about your problem and then I started to try to code</p>

<p>After a while I realized that if you run this snippet you will see that it correctly works:</p>

<pre><code>#!/usr/bin/env python

from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64

def generate_keys():
    modulus_length = 1024

    key = RSA.generate(modulus_length)
    #print (key.exportKey())

    pub_key = key.publickey()
    #print (pub_key.exportKey())

    return key, pub_key

def encrypt_private_key(a_message, private_key):
    encryptor = PKCS1_OAEP.new(private_key)
    encrypted_msg = encryptor.encrypt(a_message)
    print(encrypted_msg)
    encoded_encrypted_msg = base64.b64encode(encrypted_msg)
    print(encoded_encrypted_msg)
    return encoded_encrypted_msg

def decrypt_public_key(encoded_encrypted_msg, public_key):
    encryptor = PKCS1_OAEP.new(public_key)
    decoded_encrypted_msg = base64.b64decode(encoded_encrypted_msg)
    print(decoded_encrypted_msg)
    decoded_decrypted_msg = encryptor.decrypt(decoded_encrypted_msg)
    print(decoded_decrypted_msg)
    #return decoded_decrypted_msg

def main():
  private, public = generate_keys()
  print (private)
  message = b'Hello world'
  encoded = encrypt_private_key(message, public)
  decrypt_public_key(encoded, private)

if __name__== ""__main__"":
  main()
</code></pre>

<p>but if you now change two of the final lines [i.e. the role of the keys] into:</p>

<pre><code>    encoded = encrypt_private_key(message, private)
    decrypt_public_key(encoded, public)
</code></pre>

<p>and rerun the program you will get the <code>TypeError: No private key</code></p>

<p>Let me quote from <a href=""https://stackoverflow.com/a/10970540/4092588"">this great answer</a>: </p>

<p>""As it turns out, PyCrypto is only trying to prevent you from mistaking one for the other here, OpenSSL or Ruby OpenSSL allow you for example to do both: public_encrypt/public_decrypt and private_encrypt/private_decrypt</p>

<p>[...]</p>

<p>Additional things need to be taken care of to make the result usable in practice. And that's why there is a dedicated <a href=""https://www.dlitz.net/software/pycrypto/api/current/Crypto.Signature.PKCS1_PSS-module.html"" rel=""noreferrer"">signature package</a> in PyCrypto - this effectively does what you described, but also additionally takes care of the things I mentioned""</p>

<p>Adapting <a href=""https://gist.github.com/dennislwy/0194036234445776d48ad2fb594457d4"" rel=""noreferrer"">this link</a> I came to the following code that should solve your question:</p>

<pre><code># RSA helper class for pycrypto
# Copyright (c) Dennis Lee
# Date 21 Mar 2017

# Description:
# Python helper class to perform RSA encryption, decryption, 
# signing, verifying signatures &amp; keys generation

# Dependencies Packages:
# pycrypto 

# Documentation:
# https://www.dlitz.net/software/pycrypto/api/2.6/

from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA512, SHA384, SHA256, SHA, MD5
from Crypto import Random
from base64 import b64encode, b64decode
import rsa

hash = ""SHA-256""

def newkeys(keysize):
    random_generator = Random.new().read
    key = RSA.generate(keysize, random_generator)
    private, public = key, key.publickey()
    return public, private

def importKey(externKey):
    return RSA.importKey(externKey)

def getpublickey(priv_key):
    return priv_key.publickey()

def encrypt(message, pub_key):
    #RSA encryption protocol according to PKCS#1 OAEP
    cipher = PKCS1_OAEP.new(pub_key)
    return cipher.encrypt(message)

def decrypt(ciphertext, priv_key):
    #RSA encryption protocol according to PKCS#1 OAEP
    cipher = PKCS1_OAEP.new(priv_key)
    return cipher.decrypt(ciphertext)

def sign(message, priv_key, hashAlg=""SHA-256""):
    global hash
    hash = hashAlg
    signer = PKCS1_v1_5.new(priv_key)
    if (hash == ""SHA-512""):
        digest = SHA512.new()
    elif (hash == ""SHA-384""):
        digest = SHA384.new()
    elif (hash == ""SHA-256""):
        digest = SHA256.new()
    elif (hash == ""SHA-1""):
        digest = SHA.new()
    else:
        digest = MD5.new()
    digest.update(message)
    return signer.sign(digest)

def verify(message, signature, pub_key):
    signer = PKCS1_v1_5.new(pub_key)
    if (hash == ""SHA-512""):
        digest = SHA512.new()
    elif (hash == ""SHA-384""):
        digest = SHA384.new()
    elif (hash == ""SHA-256""):
        digest = SHA256.new()
    elif (hash == ""SHA-1""):
        digest = SHA.new()
    else:
        digest = MD5.new()
    digest.update(message)
    return signer.verify(digest, signature)

def main():
    msg1 = b""Hello Tony, I am Jarvis!""
    msg2 = b""Hello Toni, I am Jarvis!""

    keysize = 2048

    (public, private) = rsa.newkeys(keysize)

    # https://docs.python.org/3/library/base64.html
    # encodes the bytes-like object s
    # returns bytes
    encrypted = b64encode(rsa.encrypt(msg1, private))
    # decodes the Base64 encoded bytes-like object or ASCII string s
    # returns the decoded bytes
    decrypted = rsa.decrypt(b64decode(encrypted), private)
    signature = b64encode(rsa.sign(msg1, private, ""SHA-512""))

    verify = rsa.verify(msg1, b64decode(signature), public)

    #print(private.exportKey('PEM'))
    #print(public.exportKey('PEM'))
    print(""Encrypted: "" + encrypted.decode('ascii'))
    print(""Decrypted: '%s'"" % (decrypted))
    print(""Signature: "" + signature.decode('ascii'))
    print(""Verify: %s"" % verify)
    rsa.verify(msg2, b64decode(signature), public)

if __name__== ""__main__"":
    main()
</code></pre>

<p>Final notes: </p>

<ul>
<li>the last <code>print</code>s have <code>ascii</code> because as stated <a href=""https://stackoverflow.com/a/45151058/4092588"">here</a> ""In case of base64 however, all characters are valid ASCII characters""</li>
<li>in this case we are using the same key - the private one - both for encrypting and decrypting, so yes: we would end up to be symmetric but...</li>
<li>but - as stated <a href=""https://stackoverflow.com/a/20059249/4092588"">here</a> - ""The public key is PUBLIC - it's something you would readily share and thus would be easily disseminated. There's no added value in that case compared to using a symmetric cipher and a shared key"" plus ""Conceptually, ""encrypting"" with the private key is more useful for signing a message whereas the ""decryption"" using the public key is used for verifying the message""</li>
<li>the same identical last principle is expressed in <a href=""https://crypto.stackexchange.com/a/2124"">this answer</a> - ""Typically [...] we say sign with the private key and verify with the public key""</li>
</ul>
","8821","<python><rsa><private-key><public-key><encryption-asymmetric>","3","6","1","2018-07-09 07:37:04","51230724","2","3","","","","2018-07-08 03:38:03",""
"26709265","Get public Key from imported certificate in Keystore with Java","<p>I have created and downloaded a certificate from <a href=""https://ap1.salesforce.com/"" rel=""nofollow"">sales force</a>, as per the instructions in <a href=""https://docs.jboss.org/author/display/PLINK/Picketlink+as+SP,+Salesforce+as+IDP"" rel=""nofollow"">PicketLink document</a>.</p>

<p>I downloaded the certificate and its name is <strong><em>mysample.crt</em></strong> and 
I imported the certificate into a keysotre.</p>

<pre><code>keytool -import -file mysample.crt -keystore keystore.jks -alias salesforce-idp
</code></pre>

<p>To check, I exported the public key also</p>

<pre><code>keytool -export -alias salesforce-idp -keystore keystore.jks -rfc -file public.cert
</code></pre>

<p>I have a Java code to get the Public Key, but it is not working. This is my Code</p>

<pre><code>package com.sample.keystore;

import java.io.File;
import java.io.FileInputStream;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;

import org.apache.commons.codec.binary.Base64;

public class ExtractPublicKey {

    public static void main(String[] args) {

        try {
            // Load the keystore
            File file = new File(""/home/user/salesforce-cert/keystore.jks"");
            FileInputStream is = new FileInputStream(file);
            KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
            String alias = ""salesforce-idp"";
            String password = ""user"";
            char[] passwd = password.toCharArray();
            keystore.load(is, passwd);
            KeyPair kp = getKeyPair(keystore, alias, passwd);
            Base64 base64 = new Base64();
            PublicKey pubKey = kp.getPublic();

            String publicKeyString = base64.encodeBase64String(pubKey
                    .getEncoded());

            System.out.println(publicKeyString);
            is.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static KeyPair getKeyPair(KeyStore keystore, String alias, char[] password) throws Exception {
            // Get private key
            Key key = keystore.getKey(alias, password);
            if (key instanceof PrivateKey) {
                // Get certificate of public key
                java.security.cert.Certificate cert = keystore.getCertificate(alias);

                // Get public key
                PublicKey publicKey = cert.getPublicKey();

                // Return a key pair
                return new KeyPair(publicKey, (PrivateKey)key);
            }
        return null;
    }

}
</code></pre>

<p>But when I run the code, I get the following exception</p>

<pre><code>java.lang.NullPointerException
    at com.sample.keystore.ExtractPublicKey.main(ExtractPublicKey.java:28)
</code></pre>

<p>Line 28 refers to <code>PublicKey pubKey = kp.getPublic();</code>. Because the method returns <strong><em>null</em></strong> instead of the Key Pair. Why is that? And how to get the Public Key?</p>

<p><strong>UPDATE 1</strong></p>

<p>I updated the code to</p>

<pre><code>keystore.load(is, passwd);
PublicKey pubKey = keystore.getCertificate(alias).getPublicKey();
String publicKeyString = Base64.encodeBase64String(pubKey.getEncoded());
System.out.println(publicKeyString);
</code></pre>

<p>Then I am getting folowing Key</p>

<pre><code>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlKJTbmfEumDR7nAfBbfAstuUvsgKxizZ1mwGc990dSsmgldIhsrLqpAECdf7vl2q2F8DyXciOopZbJPt/UBmpl6M1TJCQ34UyZaYGI2qid8jSNxFYGApfYPxIBJAk9YOAATqqyAREL+i1mUaFfN8WULFDvz6WsuXOjuxBobqjkg4TUumyyVgZda9ksl3aJmft02AfDMw/GCT8gKPTQb3nZP9BwTo5AQkV5fy0cKZ80G4qD+fiuZJ+8IecgFgXl5agZ0y2Wri8i1OGTGw34SUP2gOO+NUd17YA5AO+ocHlH8yzlXHNH7DPQsLo+Uz8CcXV+eLyzxGTGfuiTw8qsPCCwIDAQAB
</code></pre>

<p>Nut actual key is different. In <em>public,cert</em>, the key is different from what I am getting through Java code.</p>
","<p>What about</p>

<pre><code>keystore.load(is, passwd);
PublicKey pubKey = keystore.getCertificate(alias).getPublicKey();
String publicKeyString = Base64.encodeBase64String(pubKey.getEncoded());
</code></pre>

<p><strong>Edit</strong></p>

<p>After being downvoted, here some more detail how I see it:</p>

<p>The OP provided this link: <a href=""https://docs.jboss.org/author/display/PLINK/Picketlink+as+SP,+Salesforce+as+IDP?_sscc=t"" rel=""nofollow"">https://docs.jboss.org/author/display/PLINK/Picketlink+as+SP,+Salesforce+as+IDP?_sscc=t</a> where it says:</p>

<blockquote>
  <p>After certificate will be generated in Salesforce, you can download it to your computer.</p>
</blockquote>

<p>and</p>

<blockquote>
  <p>This certificate will be used to sign SAMLResponse messages sent from Salesforce IDP.</p>
  
  <p>Type self-signed</p>
</blockquote>

<p>after that, OP is told to import that cert, from which he would now like to retrieve the public key:</p>

<blockquote>
  <p>keytool -import -file salesforce_idp_cert.cer -keystore jbid_test_keystore.jks -alias salesforce-idp</p>
</blockquote>

<p>So it seems obvious that</p>

<ul>
<li>OP does not have the private key for that cert</li>
<li>There is no chain for this cert</li>
</ul>
","8783","<java><keystore><public-key>","2","0","2","2018-12-24 09:01:15","","0","2","2334370","","2014-11-03 08:04:14","2014-11-03 06:58:06",""
"26709265","Get public Key from imported certificate in Keystore with Java","<p>I have created and downloaded a certificate from <a href=""https://ap1.salesforce.com/"" rel=""nofollow"">sales force</a>, as per the instructions in <a href=""https://docs.jboss.org/author/display/PLINK/Picketlink+as+SP,+Salesforce+as+IDP"" rel=""nofollow"">PicketLink document</a>.</p>

<p>I downloaded the certificate and its name is <strong><em>mysample.crt</em></strong> and 
I imported the certificate into a keysotre.</p>

<pre><code>keytool -import -file mysample.crt -keystore keystore.jks -alias salesforce-idp
</code></pre>

<p>To check, I exported the public key also</p>

<pre><code>keytool -export -alias salesforce-idp -keystore keystore.jks -rfc -file public.cert
</code></pre>

<p>I have a Java code to get the Public Key, but it is not working. This is my Code</p>

<pre><code>package com.sample.keystore;

import java.io.File;
import java.io.FileInputStream;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;

import org.apache.commons.codec.binary.Base64;

public class ExtractPublicKey {

    public static void main(String[] args) {

        try {
            // Load the keystore
            File file = new File(""/home/user/salesforce-cert/keystore.jks"");
            FileInputStream is = new FileInputStream(file);
            KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());
            String alias = ""salesforce-idp"";
            String password = ""user"";
            char[] passwd = password.toCharArray();
            keystore.load(is, passwd);
            KeyPair kp = getKeyPair(keystore, alias, passwd);
            Base64 base64 = new Base64();
            PublicKey pubKey = kp.getPublic();

            String publicKeyString = base64.encodeBase64String(pubKey
                    .getEncoded());

            System.out.println(publicKeyString);
            is.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static KeyPair getKeyPair(KeyStore keystore, String alias, char[] password) throws Exception {
            // Get private key
            Key key = keystore.getKey(alias, password);
            if (key instanceof PrivateKey) {
                // Get certificate of public key
                java.security.cert.Certificate cert = keystore.getCertificate(alias);

                // Get public key
                PublicKey publicKey = cert.getPublicKey();

                // Return a key pair
                return new KeyPair(publicKey, (PrivateKey)key);
            }
        return null;
    }

}
</code></pre>

<p>But when I run the code, I get the following exception</p>

<pre><code>java.lang.NullPointerException
    at com.sample.keystore.ExtractPublicKey.main(ExtractPublicKey.java:28)
</code></pre>

<p>Line 28 refers to <code>PublicKey pubKey = kp.getPublic();</code>. Because the method returns <strong><em>null</em></strong> instead of the Key Pair. Why is that? And how to get the Public Key?</p>

<p><strong>UPDATE 1</strong></p>

<p>I updated the code to</p>

<pre><code>keystore.load(is, passwd);
PublicKey pubKey = keystore.getCertificate(alias).getPublicKey();
String publicKeyString = Base64.encodeBase64String(pubKey.getEncoded());
System.out.println(publicKeyString);
</code></pre>

<p>Then I am getting folowing Key</p>

<pre><code>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlKJTbmfEumDR7nAfBbfAstuUvsgKxizZ1mwGc990dSsmgldIhsrLqpAECdf7vl2q2F8DyXciOopZbJPt/UBmpl6M1TJCQ34UyZaYGI2qid8jSNxFYGApfYPxIBJAk9YOAATqqyAREL+i1mUaFfN8WULFDvz6WsuXOjuxBobqjkg4TUumyyVgZda9ksl3aJmft02AfDMw/GCT8gKPTQb3nZP9BwTo5AQkV5fy0cKZ80G4qD+fiuZJ+8IecgFgXl5agZ0y2Wri8i1OGTGw34SUP2gOO+NUd17YA5AO+ocHlH8yzlXHNH7DPQsLo+Uz8CcXV+eLyzxGTGfuiTw8qsPCCwIDAQAB
</code></pre>

<p>Nut actual key is different. In <em>public,cert</em>, the key is different from what I am getting through Java code.</p>
","<p>To get the certificates associated with a private key, you should be calling <code>getCertificateChain()</code>, and using the zeroth element of the returned array. Not <code>getCertificate()</code>.</p>
","8783","<java><keystore><public-key>","2","1","2","2018-12-24 09:01:15","","0","2","2334370","","2014-11-03 08:04:14","2014-11-03 06:58:06",""
"16975842","How to convert an ECDSA key from hex to PEM format","<p>I have a hex string that allegedly contains an EC public key. I need to convert this hex string to PEM format (""key.pem"" in following example) in order to investigate the contents which I plan to do with ""openssl ec -in key.pem -text -noout"". Is this possible? </p>
","<p>I'm assuming by hex, you mean a binary (DER formatted) key?  Or is this hex string in a human readable file with a header beginning with ""-----BEGIN PUBLIC KEY-----""?  If you see that header, it is already in PEM format.</p>

<p>If it's in binary format, try this to convert a binary key to pem:</p>

<pre><code>openssl ec -in key.der -inform DER -pubin -out keyout.pem -outform PEM
</code></pre>

<p>where ""key.der"" is your binary key.</p>

<p>But, you should also be able to investigate the contents without converting to PEM.  Just use:</p>

<pre><code>openssl ec -in key.der -inform DER -pubin -text -noout
</code></pre>
","8601","<openssl><format><public-key><ecdsa>","2","0","2","2013-11-12 04:54:02","","0","1","1883112","","2013-06-07 03:42:23","2013-06-07 03:36:57",""
"16975842","How to convert an ECDSA key from hex to PEM format","<p>I have a hex string that allegedly contains an EC public key. I need to convert this hex string to PEM format (""key.pem"" in following example) in order to investigate the contents which I plan to do with ""openssl ec -in key.pem -text -noout"". Is this possible? </p>
","<p>If you're starting with a hex string, you need to hex decode it to get the DER-encoding first.</p>

<p>The hex string should start with <code>30...</code> which is indicates that it's an ASN.1 sequence.</p>

<p>This shell command will hex decode (using <code>xxd</code>), then use OpenSSL to parse the resulting DER public key:</p>

<pre><code>echo ""30...."" | xxd -r -p - | openssl ec -inform der -pubin -noout -text
</code></pre>

<p>To output a PEM, remove <code>-noout -text</code>, add <code>-pubout -out publickey.pem</code> </p>

<pre><code>echo ""30...."" | xxd -r -p - | openssl ec -inform der -pubin -pubout -out publickey.pem
</code></pre>

<p>If it's actually a private key, just omit <code>-pubin</code> and <code>-pubout</code>.</p>
","8601","<openssl><format><public-key><ecdsa>","2","2","2","2013-11-12 04:54:02","","0","1","1883112","","2013-06-07 03:42:23","2013-06-07 03:36:57",""
"22138138","Accepting SSH host key automatically in WinSCP","<p>Is there a way to automatic accept host keys while making a SSH connection with WinSCP. I am using <code>winscp.com</code> version 4.2. I understand that <code>-hostkey=*</code> is only available since version 5.2.</p>

<p>My current script just waits for the prompt and does not go forward once the host keys are changes. Is there any way to automate?</p>
","<p>The only appropriate solution for you is to upgrade. WinSCP 4.2 is years old and as such it suffers many security flaws.</p>

<p>And obviously, as a side effect, you get the <code>-hostkey=*</code> ""feature"".</p>

<p>The only way to automatically accept host key in versions prior to 5.2 is to use the <a href=""https://winscp.net/eng/docs/scripting#hostkey"" rel=""nofollow noreferrer""><code>-hostkey=&lt;fingerprint&gt;</code></a>. And that's still the only CORRECT and SECURE solution.</p>

<p>For details, see <a href=""https://winscp.net/eng/docs/faq_hostkey"" rel=""nofollow noreferrer"">Where do I get SSH host key fingerprint to authorize the server?</a></p>
","8595","<ssh><ssh-keys><public-key><winscp>","3","2","1","2017-03-10 20:10:04","","1","1","850848","","2014-03-05 13:37:31","2014-03-03 03:26:16",""
"8451205","Create PrivateKey and PublicKey having a byte array encoded in base 64","<p>I have the <code>byte[]</code> with my private key (llave) and a <code>byte[]</code> with my public key (certificado=. </p>

<p>I need to convert these two values in a <code>PrivateKey</code> and <code>PublicKey</code> object (respectively) to use them later for signing digitally an xml document. </p>

<p>I have tried with <code>KeyStore</code> and I couldn't do it. I also tried with <code>KeyFactory</code> with the following code: </p>

<pre><code>import java.io.StringWriter;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Collections;

import javax.xml.crypto.dsig.CanonicalizationMethod;
import javax.xml.crypto.dsig.DigestMethod;
import javax.xml.crypto.dsig.Reference;
import javax.xml.crypto.dsig.SignatureMethod;
import javax.xml.crypto.dsig.SignedInfo;
import javax.xml.crypto.dsig.Transform;
import javax.xml.crypto.dsig.XMLSignature;
import javax.xml.crypto.dsig.XMLSignatureFactory;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import javax.xml.crypto.dsig.keyinfo.KeyInfoFactory;
import javax.xml.crypto.dsig.keyinfo.KeyValue;
import javax.xml.crypto.dsig.spec.C14NMethodParameterSpec;
import javax.xml.crypto.dsig.spec.TransformParameterSpec;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
public class GeneraXMLCancelacion {
public static void main (String [] args) {
    byte[] certificado = args[0].getBytes();
    byte[] llave = args[1].getBytes();
    String uuids = args[2];
    String rfc = args[3];
    String fecha = args[4];

    String [] uuid = uuids.split(""/"");

    //GENERAR XML
    try {
        //Crear un document XML vacío
        DocumentBuilderFactory dbfac = DocumentBuilderFactory.newInstance();
        dbfac.setNamespaceAware(true);
        DocumentBuilder docBuilder;
        docBuilder = dbfac.newDocumentBuilder();
        Document doc = docBuilder.newDocument();
        doc.setXmlVersion(""1.0"");
        doc.setXmlStandalone(true);

        Element cancelacion = doc.createElementNS(""http://cancelacfd.sat.gob.mx"",""Cancelacion"");
        cancelacion.setAttribute(""RfcEmisor"", rfc);
        cancelacion.setAttribute(""Fecha"", fecha);
        doc.appendChild(cancelacion);

        Element folios = doc.createElementNS(""http://cancelacfd.sat.gob.mx"", ""Folios"");
        cancelacion.appendChild(folios);
        for (int i=0; i&lt;uuid.length; i++) {
            Element u = doc.createElementNS(""http://cancelacfd.sat.gob.mx"",""UUID"");
            u.setTextContent(uuid[i]);
            folios.appendChild(u);
        }

        //create a keyfactory - use whichever algorithm and provider
        KeyFactory kf = KeyFactory.getInstance(""DSA"");
        //for private keys use PKCS8EncodedKeySpec; for public keys use X509EncodedKeySpec
        PKCS8EncodedKeySpec ks = new PKCS8EncodedKeySpec(llave);
        PrivateKey privateKey = kf.generatePrivate(ks);
        X509EncodedKeySpec x = new X509EncodedKeySpec(certificado);
        PublicKey publicKey = kf.generatePublic(x);


        DOMSignContext dsc = new DOMSignContext (privateKey, doc.getDocumentElement()); 
        XMLSignatureFactory fac = XMLSignatureFactory.getInstance(""DOM"");

        Reference ref = fac.newReference ("""", fac.newDigestMethod(DigestMethod.SHA1, null), 
                    Collections.singletonList
                    (fac.newTransform(Transform.ENVELOPED,
                    (TransformParameterSpec) null)), null, null);
        KeyInfoFactory kif = fac.getKeyInfoFactory();
        KeyValue kv = kif.newKeyValue(publicKey);
        KeyInfo ki = kif.newKeyInfo(Collections.singletonList(kv)); 

        SignedInfo si = fac.newSignedInfo
                  (fac.newCanonicalizationMethod
                    (CanonicalizationMethod.INCLUSIVE_WITH_COMMENTS,
                      (C14NMethodParameterSpec) null),
                    fac.newSignatureMethod(SignatureMethod.DSA_SHA1, null),
                    Collections.singletonList(ref)); 

        KeyInfoFactory kif2 = fac.getKeyInfoFactory();
        KeyValue kv2 = kif2.newKeyValue(publicKey);
        KeyInfo ki2 = kif.newKeyInfo(Collections.singletonList(kv)); 

        XMLSignature signature = fac.newXMLSignature(si, ki);

        signature.sign(dsc);

        //IMPRIMIR EL DOCUMENTO XML
        TransformerFactory transfac = TransformerFactory.newInstance();
        Transformer trans = transfac.newTransformer();
        trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, ""no"");
        trans.setOutputProperty(OutputKeys.VERSION, ""1.0"");
        trans.setOutputProperty(OutputKeys.INDENT, ""yes"");

        //CREAR STRING DEL ARBOL XML
        StringWriter sw = new StringWriter();
        StreamResult result = new StreamResult(sw);
        DOMSource source = new DOMSource(doc);
        trans.transform(source, result);
        String xmlString = sw.toString();
        System.out.println(xmlString);
    } catch (ParserConfigurationException e) {
        e.printStackTrace();
    } catch (TransformerConfigurationException e) {
        e.printStackTrace();
    } catch (TransformerException e) {
        e.printStackTrace();
    } catch (Exception e) {
        e.printStackTrace();
    }

}
}
</code></pre>

<p>When running the program I get this error:</p>

<pre><code>java.security.spec.InvalidKeySpecException: Inappropriate key specification: invalid key format
at sun.security.provider.DSAKeyFactory.engineGeneratePrivate(Unknown Source)
at java.security.KeyFactory.generatePrivate(Unknown Source)
at vital.cancelaciones.GeneraXMLCancelacion.main(GeneraXMLCancelacion.java:85)
</code></pre>

<p>Line 85 corresponds to:</p>

<blockquote>
  <p>PrivateKey privateKey = kf.generatePrivate(ks);</p>
</blockquote>

<p>If anyone has any better solution, I would appreciate your help.</p>
","<p>I have a similar code that I know works and it is similar to yours:</p>

<pre><code> public KeyPair createKeyPair(byte[] encodedPrivateKey, byte[] encodedPublicKey) {
    try {
        EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(encodedPrivateKey);
        KeyFactory generator = KeyFactory.getInstance(ASYM_ALGORITHM);
        PrivateKey privateKey = generator.generatePrivate(privateKeySpec);

        EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(encodedPublicKey);
        PublicKey publicKey = generator.generatePublic(publicKeySpec);
        return new KeyPair(publicKey, privateKey);
    } catch (Exception e) {
        throw new IllegalArgumentException(""Failed to create KeyPair from provided encoded keys"", e);
    }
}
</code></pre>

<p>I think the byte array for the key is wrong. How do you pass it to the main method?</p>
","7734","<java><encryption><public-key><private-key>","2","6","1","2011-12-09 21:49:58","8452134","11","1","1084509","","2011-12-09 21:37:00","2011-12-09 20:17:01",""
"19640735","Load public key data from file","<p>In my App I generate a public/private key pair and store them for later usage on disk. Loading and re-initialising the private key works fine but for the private key I get a Unknown KeySpec type: java.security.spec.PKCS8EncodedKeySpec - and I have no idea why.</p>

<p>That's how I create and save the keys (code a bit simplified to be easier to read):</p>

<pre><code>KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(4096);
KeyPair keyPair = kpg.generateKeyPair();
privKey =keyPair.getPrivate();
pubKey =keyPair.getPublic();        

DataOutputStream out=new DataOutputStream(ctx.openFileOutput(PRIVKEY_FILE,Context.MODE_PRIVATE));
byte[] data=privKey.getEncoded();
out.write(data);
out.close();

DataOutputStream out=new DataOutputStream(ctx.openFileOutput(PUBKEY_FILE,Context.MODE_PRIVATE));
byte[] data=pubKey.getEncoded();
out.write(data);
out.close();
</code></pre>

<p>Next loading of the private key works fine:</p>

<pre><code>DataInputStream in=new DataInputStream(ctx.openFileInput(PRIVKEY_FILE));
byte[] data=new byte[in.available()];
in.readFully(data);

PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(data);
KeyFactory kf = KeyFactory.getInstance(""RSA"");
privKey = kf.generatePrivate(keySpec);

decryptCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
decryptCipher.init(Cipher.DECRYPT_MODE, privKey);
</code></pre>

<p>Similar code for the public key fails miserably:</p>

<pre><code>DataInputStream in=new DataInputStream(ctx.openFileInput(PUBKEY_FILE));
byte[] data=new byte[in.available()];
in.readFully(data);

PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(data);
KeyFactory kf = KeyFactory.getInstance(""RSA"");
pubKey = kf.generatePublic(keySpec); --&gt; here the exception is thrown

encryptCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
encryptCipher.init(Cipher.ENCRYPT_MODE, pubKey);             
</code></pre>

<p>So what am I doing wrong? What is the proper way of loading a public keys data from disk?</p>

<p>Thanks!</p>
","<p>Public and Private keys are encoded differently. Whilst private keys are encoded in PKCS #8, public keys are not. They are instead encoded in X.509 according to the ASN.1 specifications.</p>

<p>Description from the Key.getFormat() method:</p>

<blockquote>
  <p>Returns the name of the primary encoding format of this key, or null if this key does not support encoding. The primary encoding format is named in terms of the appropriate ASN.1 data format, if an ASN.1 specification for this key exists. For example, the name of the ASN.1 data format for public keys is SubjectPublicKeyInfo, as defined by the X.509 standard; in this case, the returned format is ""X.509"". Similarly, the name of the ASN.1 data format for private keys is PrivateKeyInfo, as defined by the PKCS #8 standard; in this case, the returned format is ""PKCS#8"".</p>
</blockquote>

<p>According to this, instead of reading public keys as PKCS #8, you should read it as X.509.</p>

<p>Consider changing your public key reading code from:</p>

<pre><code>PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(data);
</code></pre>

<p>to:</p>

<pre><code>X509EncodedKeySpec keySpec = new X509EncodedKeySpec(data);
</code></pre>
","7708","<java><android><rsa><public-key>","7","14","1","2013-10-28 17:27:08","19641222","0","5","","","","2013-10-28 16:59:40",""
"1540491","How to communicate AES initialization Vector to client for hybrid cryptosystem","<p>I need to implemented security for client-server communication. I have implemented the following <a href=""http://en.wikipedia.org/wiki/Hybrid_cryptosystem/"" rel=""noreferrer"">hybrid cryptosystem</a></p>

<p>To encrypt a message addressed to Alice in a hybrid cryptosystem, Bob does the following:</p>

<ol>
<li>Obtains Alice's public key.</li>
<li>Generates a fresh symmetric key for the data encapsulation scheme.</li>
<li>Encrypts the message under the data encapsulation scheme, using the symmetric key just generated.</li>
<li>Encrypt the symmetric key under the key encapsulation scheme, using Alice's public key.</li>
<li>Send both of these encryptions to Alice.</li>
</ol>

<p>To decrypt this hybrid ciphertext, Alice does the following:</p>

<ol>
<li>uses her private key to decrypt the symmetric key contained in the key encapsulation segment.</li>
<li>uses this symmetric key to decrypt the message contained in the data encapsulation segment.</li>
</ol>

<p>I am using RSA For a public-key cryptosystem, and AES for symmetric-key cryptosystem. Every thing works fine, but I am not sure how to handle AES initialization vector. Currently, I am concatenating the AES key and initialization vector encrypting it with the public key and sending that to server.</p>

<p>I just wanted to get some opinions about this approach. How this problem is solved by other communication protocols SSL etc.</p>

<p>Thanks.</p>
","<p>I've done the same thing, and I handled it the same way - concatenate the AES key with the IV and encrypt them both.</p>

<p>You could also just send the key and use the key itself to generate an IV - for example by using the first 128 bits of a hash of the key as the IV.  That should be OK security-wise as long as you are generating a new AES key for each session and not re-using the same AES key over and over with the same IV.</p>
","7697","<encryption><rsa><aes><public-key><private-key>","9","2","3","2012-12-31 08:25:56","1540663","0","4","1887603","","2012-12-31 08:25:56","2009-10-08 21:06:38",""
"1540491","How to communicate AES initialization Vector to client for hybrid cryptosystem","<p>I need to implemented security for client-server communication. I have implemented the following <a href=""http://en.wikipedia.org/wiki/Hybrid_cryptosystem/"" rel=""noreferrer"">hybrid cryptosystem</a></p>

<p>To encrypt a message addressed to Alice in a hybrid cryptosystem, Bob does the following:</p>

<ol>
<li>Obtains Alice's public key.</li>
<li>Generates a fresh symmetric key for the data encapsulation scheme.</li>
<li>Encrypts the message under the data encapsulation scheme, using the symmetric key just generated.</li>
<li>Encrypt the symmetric key under the key encapsulation scheme, using Alice's public key.</li>
<li>Send both of these encryptions to Alice.</li>
</ol>

<p>To decrypt this hybrid ciphertext, Alice does the following:</p>

<ol>
<li>uses her private key to decrypt the symmetric key contained in the key encapsulation segment.</li>
<li>uses this symmetric key to decrypt the message contained in the data encapsulation segment.</li>
</ol>

<p>I am using RSA For a public-key cryptosystem, and AES for symmetric-key cryptosystem. Every thing works fine, but I am not sure how to handle AES initialization vector. Currently, I am concatenating the AES key and initialization vector encrypting it with the public key and sending that to server.</p>

<p>I just wanted to get some opinions about this approach. How this problem is solved by other communication protocols SSL etc.</p>

<p>Thanks.</p>
","<p>There is no reason to encrypt the IV - you can send that in the clear.  Just make sure you pick a new one each time (the same way you do the AES key).</p>

<p>That said, it is often convenient to package the AES key and IV together.  Encryption of 16 bytes ain't that expensive.</p>
","7697","<encryption><rsa><aes><public-key><private-key>","9","2","3","2012-12-31 08:25:56","1540663","0","4","1887603","","2012-12-31 08:25:56","2009-10-08 21:06:38",""
"1540491","How to communicate AES initialization Vector to client for hybrid cryptosystem","<p>I need to implemented security for client-server communication. I have implemented the following <a href=""http://en.wikipedia.org/wiki/Hybrid_cryptosystem/"" rel=""noreferrer"">hybrid cryptosystem</a></p>

<p>To encrypt a message addressed to Alice in a hybrid cryptosystem, Bob does the following:</p>

<ol>
<li>Obtains Alice's public key.</li>
<li>Generates a fresh symmetric key for the data encapsulation scheme.</li>
<li>Encrypts the message under the data encapsulation scheme, using the symmetric key just generated.</li>
<li>Encrypt the symmetric key under the key encapsulation scheme, using Alice's public key.</li>
<li>Send both of these encryptions to Alice.</li>
</ol>

<p>To decrypt this hybrid ciphertext, Alice does the following:</p>

<ol>
<li>uses her private key to decrypt the symmetric key contained in the key encapsulation segment.</li>
<li>uses this symmetric key to decrypt the message contained in the data encapsulation segment.</li>
</ol>

<p>I am using RSA For a public-key cryptosystem, and AES for symmetric-key cryptosystem. Every thing works fine, but I am not sure how to handle AES initialization vector. Currently, I am concatenating the AES key and initialization vector encrypting it with the public key and sending that to server.</p>

<p>I just wanted to get some opinions about this approach. How this problem is solved by other communication protocols SSL etc.</p>

<p>Thanks.</p>
","<p>You don't encrypt the IV. Bundle it with the encrypted key and send it (in the clear) to the recipient.</p>

<p>Standards for this do exist. This scheme is called ""KeyTransRecipientInfo"" in CMS (upon which S/MIME is based), and PGP offers a similar mode. TLS also includes the initialization vector as a parameter in the key encryption algorithm identifier, using the same ASN.1 syntax as CMS. A robust, open-source library to perform this operation is available for many, many platforms.</p>

<p>At the very least, studying the CMS specification might help avoid some of the many pitfalls in a home-brew implementation. See <a href=""http://www.ietf.org/rfc/rfc3369.txt"" rel=""noreferrer"">&sect;6.1 and &sect;6.2.1 of RFC 3369.</a></p>
","7697","<encryption><rsa><aes><public-key><private-key>","9","10","3","2012-12-31 08:25:56","1540663","0","4","1887603","","2012-12-31 08:25:56","2009-10-08 21:06:38",""
"28298861","How to automatically authenticate into GitHub from Git Bash using my Public and Private Keys instead of username and password?","<p>Every time when I write</p>

<pre><code>git pull origin master
</code></pre>

<p>or</p>

<pre><code>git push origin master
</code></pre>

<p>or anything else in Git Bash I have to insert my username and password to login into GitHub.</p>

<p>I would like instead to automatically authenticate into GitHub using my Public and Private Keys.</p>

<p>I've already created the keys. They are into my local machine under ~/.ssh. I've attached the public key to my account as well. But I'm always asked for the username and password instead.</p>

<p>What do I still have to do to be able to login direct with the keys?
Many thanks!</p>
","<p>Based on this post <a href=""https://stackoverflow.com/a/15034499"">https://stackoverflow.com/a/15034499</a> we learn that git won't ask for user and password only if the repository is configured to use ssh and NOT https.</p>

<p>We can change this using:
git remote set-url origin git@github.com:user/repo.git</p>
","7650","<git><authentication><github><public-key><git-bash>","4","4","1","2015-03-05 20:53:18","28887503","6","1","","","","2015-02-03 12:22:57",""
"14655079","Git push ""permission denied""","<p>I am attempting to push my code to my github account, however whenever I try, i get this</p>

<pre><code>Pushing to git@github.com:AlphaModder/Space-Dimension-Mod.git
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>Question: how can I avoid that ""Permission Denied""? Is the GitHub remote address a valid one?</p>
","<p>I would recommend using the https address for your remote 'origin':</p>

<pre><code>https://github.com/AlphaModder/Space-Dimension-Mod.git
</code></pre>

<p>That would avoid having to deal with all the intricacies of ssh setup.<br>
Plus, you can <a href=""https://stackoverflow.com/questions/6191985/git-http-securely-remember-credentials/12938677#12938677"">cache your credentials too</a>. </p>

<p>If you do need an ssh address... then see for instance ""<a href=""https://stackoverflow.com/questions/13781035/ssh-github-it-doesnot-work/13781873#13781873"">ssh,github,it does not work</a>"".</p>
","7648","<git><github><push><public-key>","0","6","1","2013-03-20 16:26:09","","1","2","6309","","2013-03-20 16:26:09","2013-02-01 21:09:53",""
"24658090","How do I store and read PGP public keys as strings using Bouncycastle Java?","<p>I have been trying to create, encode, store, retrieve, and decode a Bouncy Castle PGP public key. I get what appears to be the wrong output and an EOFException when I try to read the key back in. The key will be stored in a database as a string.</p>

<p>The original RSA encryption public key is extracted from the key ring as follows:</p>

<pre><code>@SuppressWarnings(""unchecked"")
public PGPPublicKey getPublicKey() {
    PGPPublicKey pk = null;
    Iterator&lt;PGPPublicKey&gt; it = publicKeyRing.getPublicKeys();
    while (pk == null &amp;&amp; it.hasNext()) {
        PGPPublicKey key = it.next();
        if (key.isEncryptionKey()) {
            pk = key;
        }
    }
    return pk;
}
</code></pre>

<p>It is encoded, ASCII armored, and stored as a string as follows:</p>

<pre><code>    PGPPublicKey contactPK = realContact.getPublicKey();
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    ArmoredOutputStream armored = new ArmoredOutputStream(out);
    contactPK.encode(armored);
    armored.close();
    publicKey = new String(out.toByteArray(), Charset.forName(""US-ASCII""));
</code></pre>

<p>This gets me a PGP message block where I would expect a PGP public key block:</p>

<p>-----BEGIN PGP MESSAGE-----\nVersion: BCPG v1.50\n\nuQINBFO8StkCEACQ4vrDnBTDjEvQkGwrAHuJSBZL8tNLxhZ9B74afhObhLVzW6ZB\nT3pk/5XcSPOTvcWd9k1yOKJUabCuF5ixFmMz+niFqUVQTtnl7aqOZ+GrDEzmoYmG\nNQROP0EiA1TWtm2+Ja0FqiJauXytt1sIF/Pr5L47FCjtmZKVoXTP8RVFfGLPB0kT\ndjOz53PaEE3GSValh85w24XIH2/gczURUnjphCX1bRwTFr14SfA9X/rFWqv9SqWQ\nV8OiIWrSiwNd5RLJ9q0B+viDzoxrjmnMJZikxhKiuNVKJCu2ccBdMrbW42iBM2w3\n</p>

<p>... (for brevity)</p>

<p>\n-----END PGP MESSAGE-----</p>

<p>When I try to read the string back in to recreate the public key, I get an EOFException:</p>

<pre><code>// Import the public key.
ByteArrayInputStream in =
        new ByteArrayInputStream(stored.publicKey.getBytes(
                                                    Charset.forName(""US-ASCII"")));
// Needed to read ASCII armored keys
InputStream decoded = PGPUtil.getDecoderStream(in);
BCPGInputStream bcpgIn = new BCPGInputStream(decoded);
RSAPublicBCPGKey bcpgKey = new RSAPublicBCPGKey(bcpgIn);
PublicKeyPacket pkPacket = new PublicKeyPacket(PublicKeyAlgorithmTags.RSA_ENCRYPT,
                                                new Date(), bcpgKey);
publicKey = new PGPPublicKey(pkPacket, new BcKeyFingerprintCalculator());
</code></pre>

<p>The exception occurs when I create the RSAPublicBCPGKey.</p>

<p>I am doing something very wrong, but I can't figure out what it is. Can anyone help?</p>
","<p>Say you already have your pgp public key (ascii armored) in a String str:</p>

<pre><code>    InputStream in=new ByteArrayInputStream(str.getBytes());
    in = org.bouncycastle.openpgp.PGPUtil.getDecoderStream(in);

    JcaPGPPublicKeyRingCollection pgpPub = new JcaPGPPublicKeyRingCollection(in);
    in.close();

    PGPPublicKey key = null;
    Iterator&lt;PGPPublicKeyRing&gt; rIt = pgpPub.getKeyRings();
    while (key == null &amp;&amp; rIt.hasNext())
    {
        PGPPublicKeyRing kRing = rIt.next();
        Iterator&lt;PGPPublicKey&gt; kIt = kRing.getPublicKeys();
        while (key == null &amp;&amp; kIt.hasNext())
        {
            PGPPublicKey k = kIt.next();

            if (k.isEncryptionKey())
            {
                key = k;
            }
        }
    }
    return key;
</code></pre>

<p>Now, your variable key will have your PGPPublicKey.</p>
","7351","<java><bouncycastle><public-key><pgp>","5","5","2","2016-04-10 22:50:45","36535860","0","1","","","","2014-07-09 15:42:20",""
"24658090","How do I store and read PGP public keys as strings using Bouncycastle Java?","<p>I have been trying to create, encode, store, retrieve, and decode a Bouncy Castle PGP public key. I get what appears to be the wrong output and an EOFException when I try to read the key back in. The key will be stored in a database as a string.</p>

<p>The original RSA encryption public key is extracted from the key ring as follows:</p>

<pre><code>@SuppressWarnings(""unchecked"")
public PGPPublicKey getPublicKey() {
    PGPPublicKey pk = null;
    Iterator&lt;PGPPublicKey&gt; it = publicKeyRing.getPublicKeys();
    while (pk == null &amp;&amp; it.hasNext()) {
        PGPPublicKey key = it.next();
        if (key.isEncryptionKey()) {
            pk = key;
        }
    }
    return pk;
}
</code></pre>

<p>It is encoded, ASCII armored, and stored as a string as follows:</p>

<pre><code>    PGPPublicKey contactPK = realContact.getPublicKey();
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    ArmoredOutputStream armored = new ArmoredOutputStream(out);
    contactPK.encode(armored);
    armored.close();
    publicKey = new String(out.toByteArray(), Charset.forName(""US-ASCII""));
</code></pre>

<p>This gets me a PGP message block where I would expect a PGP public key block:</p>

<p>-----BEGIN PGP MESSAGE-----\nVersion: BCPG v1.50\n\nuQINBFO8StkCEACQ4vrDnBTDjEvQkGwrAHuJSBZL8tNLxhZ9B74afhObhLVzW6ZB\nT3pk/5XcSPOTvcWd9k1yOKJUabCuF5ixFmMz+niFqUVQTtnl7aqOZ+GrDEzmoYmG\nNQROP0EiA1TWtm2+Ja0FqiJauXytt1sIF/Pr5L47FCjtmZKVoXTP8RVFfGLPB0kT\ndjOz53PaEE3GSValh85w24XIH2/gczURUnjphCX1bRwTFr14SfA9X/rFWqv9SqWQ\nV8OiIWrSiwNd5RLJ9q0B+viDzoxrjmnMJZikxhKiuNVKJCu2ccBdMrbW42iBM2w3\n</p>

<p>... (for brevity)</p>

<p>\n-----END PGP MESSAGE-----</p>

<p>When I try to read the string back in to recreate the public key, I get an EOFException:</p>

<pre><code>// Import the public key.
ByteArrayInputStream in =
        new ByteArrayInputStream(stored.publicKey.getBytes(
                                                    Charset.forName(""US-ASCII"")));
// Needed to read ASCII armored keys
InputStream decoded = PGPUtil.getDecoderStream(in);
BCPGInputStream bcpgIn = new BCPGInputStream(decoded);
RSAPublicBCPGKey bcpgKey = new RSAPublicBCPGKey(bcpgIn);
PublicKeyPacket pkPacket = new PublicKeyPacket(PublicKeyAlgorithmTags.RSA_ENCRYPT,
                                                new Date(), bcpgKey);
publicKey = new PGPPublicKey(pkPacket, new BcKeyFingerprintCalculator());
</code></pre>

<p>The exception occurs when I create the RSAPublicBCPGKey.</p>

<p>I am doing something very wrong, but I can't figure out what it is. Can anyone help?</p>
","<p>I ran into this issue, and it turned out that the Public Key Ring was actually the public key itself. When I was running the iterator I was actually getting subkeys (which turns into that message block instead of the public key block).  If I'm not explaining that well, check out this <a href=""http://osdir.com/ml/encryption.bouncy-castle.devel/2006-08/msg00054.html"" rel=""nofollow"">explanation</a>.</p>

<p>Assuming <code>realContact</code> is a public key ring that only contains subkeys, you don't actually need to run it through <code>getPublicKey()</code>.</p>
","7351","<java><bouncycastle><public-key><pgp>","5","0","2","2016-04-10 22:50:45","36535860","0","1","","","","2014-07-09 15:42:20",""
"25591844","WinSCP commandline: Hostkey not found in cache error","<p>I am trying to connect to Unix server from WinSCP commandline for the first time. </p>

<p>It closes with the the following error:</p>

<blockquote>
  <p>The server's host key was not found in the cache. You have no guarantee that the
   server is the computer you think it is.</p>
  
  <p>The server's rsa2 key fingerprint is:
  ssh-rsa 1024 42:9e:c7:f4:7f:8b:50:10:6a:06:04:b1:d4:f2:04:6d
  If you trust this host, <strong>press Yes</strong>. To connect without adding host key to the cac
  he, <strong>press No.</strong> To abandon the connection <strong>press Cancel</strong>.</p>
</blockquote>

<p>In the WinSCP commandline, it does not ask for any input (Yes or No). It closes with <em>Authentication failed</em>. If I connect through the WinSCP tool, I'll get the same error. However, I'll be able to press YES. </p>

<p>I also know that If I add <code>-hostkey</code> switch in the command line, I'll be able to connect. But, I don't want pass hostkey in my batch script as I will be connecting to various servers. So, my requirement is to pass ""YES"" input from the commandline in case of this error. Can someone help?</p>
","<p>A host key fingerprint verification is a crucial step in securing your SSH connection. Even if you are using a set of sessions with your script, it does not excuse you. The fingerprint should be part of a set of information you have for each of the sessions (in addition to a hostname, an username and a password).</p>

<p>Skipping the fingerprint verification means that you lose any security and there's no point using an SSH/SFTP anymore.</p>

<p>Anyway, if you do not care about a security, you can use the <a href=""https://winscp.net/eng/docs/scriptcommand_open#hostkey"" rel=""nofollow noreferrer""><code>-hostkey=*</code> switch</a> to unconditionally accept any host key.  </p>

<p>Further references:</p>

<ul>
<li><p><a href=""https://winscp.net/eng/docs/faq_hostkey"" rel=""nofollow noreferrer"">Where do I get SSH host key fingerprint to authorize the server?</a></p></li>
<li><p><a href=""https://winscp.net/eng/docs/ssh_verifying_the_host_key"" rel=""nofollow noreferrer"">Verifying the host key</a></p></li>
</ul>
","7347","<ssh><scripting><public-key><winscp>","3","1","1","2016-11-02 14:18:12","","0","1","850848","","2014-09-01 16:38:34","2014-08-31 12:10:48",""
"5251723","CentOS scp without password not working","<p>I have been trying to connect from one <strong>EC2 instance</strong> to another using ssh public keys and have been having a very tough time.</p>

<p>Here is the scenario: 
I need to have box 2 scp a file from box 1 in a script. This script will need to be able to scp without a password so I need to setup public keys.</p>

<p>On box 2 I ran <code>ssh-keygen –t rsa</code> and generated <code>id_rsa</code> and <code>id_rsa.pub</code>
I copied <code>id_rsa.pub</code> to box 1
I moved <code>id_rsa.pub</code> to .ssh and ran <code>cat id_rsa.pug &gt;&gt; authorized_keys</code>
I changed permissions of all .ssh directory to <em>700</em> on both boxes and the files themselves to <em>600</em>.
I have changed the sshd_config settings on box 1 to:</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
</code></pre>

<p>And then restarted ssh </p>

<pre><code>/sbin/service sshd restart
</code></pre>

<p>When I try to scp or ssh into box1 from box1 I get the error:</p>

<pre><code>Address 67.22.33.1 maps to ec2-67-22-33-1.compute-1.amazonaws.com, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
tomcat@tomcat1.****.com's password:
</code></pre>

<p>Any ideas?</p>

<hr>

<p>I made that change and tried scp to tomcat1 and it failed. Here is the output:</p>

<pre><code>debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to tomcat1.****.com [67.22.33.15] port 22.
debug1: Connection established.
debug1: identity file /home/tomcat/.ssh/identity type -1
debug1: identity file /home/tomcat/.ssh/id_rsa type 1
debug1: identity file /home/tomcat/.ssh/id_dsa type -1
debug1: loaded 3 keys
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.3
debug1: match: OpenSSH_4.3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
The authenticity of host 'tomcat1.****.com (67.22.33.15)' can't be established.
RSA key fingerprint is 5a:3e:fe:be:b8:0e:05:63:bf:ab:c8:4f:e5:91:db:a0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'tomcat1.****.com,67.22.33.15' (RSA) to the list of known hosts.
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Trying private key: /home/tomcat/.ssh/identity
debug1: Offering public key: /home/tomcat/.ssh/id_rsa
debug1: Authentications that can continue: publickey,password
debug1: Trying private key: /home/tomcat/.ssh/id_dsa
debug1: Next authentication method: password
</code></pre>
","<p>Your authorized keys line should be </p>

<pre><code>AuthorizedKeysFile     %h/.ssh/authorized_keys
</code></pre>

<p>The server is looking in the wrong directory for your server.</p>
","7339","<ssh><amazon-web-services><amazon-ec2><centos><public-key>","3","1","7","2017-02-06 18:46:01","","5","2","901946","","2013-04-12 12:07:34","2011-03-09 20:25:55",""
"5251723","CentOS scp without password not working","<p>I have been trying to connect from one <strong>EC2 instance</strong> to another using ssh public keys and have been having a very tough time.</p>

<p>Here is the scenario: 
I need to have box 2 scp a file from box 1 in a script. This script will need to be able to scp without a password so I need to setup public keys.</p>

<p>On box 2 I ran <code>ssh-keygen –t rsa</code> and generated <code>id_rsa</code> and <code>id_rsa.pub</code>
I copied <code>id_rsa.pub</code> to box 1
I moved <code>id_rsa.pub</code> to .ssh and ran <code>cat id_rsa.pug &gt;&gt; authorized_keys</code>
I changed permissions of all .ssh directory to <em>700</em> on both boxes and the files themselves to <em>600</em>.
I have changed the sshd_config settings on box 1 to:</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
</code></pre>

<p>And then restarted ssh </p>

<pre><code>/sbin/service sshd restart
</code></pre>

<p>When I try to scp or ssh into box1 from box1 I get the error:</p>

<pre><code>Address 67.22.33.1 maps to ec2-67-22-33-1.compute-1.amazonaws.com, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
tomcat@tomcat1.****.com's password:
</code></pre>

<p>Any ideas?</p>

<hr>

<p>I made that change and tried scp to tomcat1 and it failed. Here is the output:</p>

<pre><code>debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to tomcat1.****.com [67.22.33.15] port 22.
debug1: Connection established.
debug1: identity file /home/tomcat/.ssh/identity type -1
debug1: identity file /home/tomcat/.ssh/id_rsa type 1
debug1: identity file /home/tomcat/.ssh/id_dsa type -1
debug1: loaded 3 keys
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.3
debug1: match: OpenSSH_4.3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
The authenticity of host 'tomcat1.****.com (67.22.33.15)' can't be established.
RSA key fingerprint is 5a:3e:fe:be:b8:0e:05:63:bf:ab:c8:4f:e5:91:db:a0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'tomcat1.****.com,67.22.33.15' (RSA) to the list of known hosts.
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Trying private key: /home/tomcat/.ssh/identity
debug1: Offering public key: /home/tomcat/.ssh/id_rsa
debug1: Authentications that can continue: publickey,password
debug1: Trying private key: /home/tomcat/.ssh/id_dsa
debug1: Next authentication method: password
</code></pre>
","<p>Try removing box1 IP from ~/.ssh/known_hosts, so it renews. Perhaps ssh disables key authentication due to possible 'man in the middle' attack.</p>

<p>If it won't help, add line 
<code>
GSSAPIAuthentication no
</code>
in your /etc/ssh/ssh_config file.</p>
","7339","<ssh><amazon-web-services><amazon-ec2><centos><public-key>","3","0","7","2017-02-06 18:46:01","","5","2","901946","","2013-04-12 12:07:34","2011-03-09 20:25:55",""
"5251723","CentOS scp without password not working","<p>I have been trying to connect from one <strong>EC2 instance</strong> to another using ssh public keys and have been having a very tough time.</p>

<p>Here is the scenario: 
I need to have box 2 scp a file from box 1 in a script. This script will need to be able to scp without a password so I need to setup public keys.</p>

<p>On box 2 I ran <code>ssh-keygen –t rsa</code> and generated <code>id_rsa</code> and <code>id_rsa.pub</code>
I copied <code>id_rsa.pub</code> to box 1
I moved <code>id_rsa.pub</code> to .ssh and ran <code>cat id_rsa.pug &gt;&gt; authorized_keys</code>
I changed permissions of all .ssh directory to <em>700</em> on both boxes and the files themselves to <em>600</em>.
I have changed the sshd_config settings on box 1 to:</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
</code></pre>

<p>And then restarted ssh </p>

<pre><code>/sbin/service sshd restart
</code></pre>

<p>When I try to scp or ssh into box1 from box1 I get the error:</p>

<pre><code>Address 67.22.33.1 maps to ec2-67-22-33-1.compute-1.amazonaws.com, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
tomcat@tomcat1.****.com's password:
</code></pre>

<p>Any ideas?</p>

<hr>

<p>I made that change and tried scp to tomcat1 and it failed. Here is the output:</p>

<pre><code>debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to tomcat1.****.com [67.22.33.15] port 22.
debug1: Connection established.
debug1: identity file /home/tomcat/.ssh/identity type -1
debug1: identity file /home/tomcat/.ssh/id_rsa type 1
debug1: identity file /home/tomcat/.ssh/id_dsa type -1
debug1: loaded 3 keys
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.3
debug1: match: OpenSSH_4.3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
The authenticity of host 'tomcat1.****.com (67.22.33.15)' can't be established.
RSA key fingerprint is 5a:3e:fe:be:b8:0e:05:63:bf:ab:c8:4f:e5:91:db:a0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'tomcat1.****.com,67.22.33.15' (RSA) to the list of known hosts.
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Trying private key: /home/tomcat/.ssh/identity
debug1: Offering public key: /home/tomcat/.ssh/id_rsa
debug1: Authentications that can continue: publickey,password
debug1: Trying private key: /home/tomcat/.ssh/id_dsa
debug1: Next authentication method: password
</code></pre>
","<p>I think this link will solve your problem and I use it to solve my ssh not login problem. The keypoint is to run
ssh root@node02 'restorecon -R -v /root/.ssh'
this command will fix SE
<a href=""http://blog.firedaemon.com/2011/07/27/passwordless-root-ssh-public-key-authentication-on-centos-6/"" rel=""nofollow"">http://blog.firedaemon.com/2011/07/27/passwordless-root-ssh-public-key-authentication-on-centos-6/</a> </p>
","7339","<ssh><amazon-web-services><amazon-ec2><centos><public-key>","3","0","7","2017-02-06 18:46:01","","5","2","901946","","2013-04-12 12:07:34","2011-03-09 20:25:55",""
"5251723","CentOS scp without password not working","<p>I have been trying to connect from one <strong>EC2 instance</strong> to another using ssh public keys and have been having a very tough time.</p>

<p>Here is the scenario: 
I need to have box 2 scp a file from box 1 in a script. This script will need to be able to scp without a password so I need to setup public keys.</p>

<p>On box 2 I ran <code>ssh-keygen –t rsa</code> and generated <code>id_rsa</code> and <code>id_rsa.pub</code>
I copied <code>id_rsa.pub</code> to box 1
I moved <code>id_rsa.pub</code> to .ssh and ran <code>cat id_rsa.pug &gt;&gt; authorized_keys</code>
I changed permissions of all .ssh directory to <em>700</em> on both boxes and the files themselves to <em>600</em>.
I have changed the sshd_config settings on box 1 to:</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
</code></pre>

<p>And then restarted ssh </p>

<pre><code>/sbin/service sshd restart
</code></pre>

<p>When I try to scp or ssh into box1 from box1 I get the error:</p>

<pre><code>Address 67.22.33.1 maps to ec2-67-22-33-1.compute-1.amazonaws.com, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
tomcat@tomcat1.****.com's password:
</code></pre>

<p>Any ideas?</p>

<hr>

<p>I made that change and tried scp to tomcat1 and it failed. Here is the output:</p>

<pre><code>debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to tomcat1.****.com [67.22.33.15] port 22.
debug1: Connection established.
debug1: identity file /home/tomcat/.ssh/identity type -1
debug1: identity file /home/tomcat/.ssh/id_rsa type 1
debug1: identity file /home/tomcat/.ssh/id_dsa type -1
debug1: loaded 3 keys
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.3
debug1: match: OpenSSH_4.3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
The authenticity of host 'tomcat1.****.com (67.22.33.15)' can't be established.
RSA key fingerprint is 5a:3e:fe:be:b8:0e:05:63:bf:ab:c8:4f:e5:91:db:a0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'tomcat1.****.com,67.22.33.15' (RSA) to the list of known hosts.
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Trying private key: /home/tomcat/.ssh/identity
debug1: Offering public key: /home/tomcat/.ssh/id_rsa
debug1: Authentications that can continue: publickey,password
debug1: Trying private key: /home/tomcat/.ssh/id_dsa
debug1: Next authentication method: password
</code></pre>
","<p><strong>UPDATE - FIXED IT</strong></p>

<pre><code>restorecon -R -v -d /root/.ssh
</code></pre>

<p>This is a known issue with RH where directories get mislabelled and PAM prevends sshd from reading authorized_hosts when run as init script. You'll see the errors if you stumble across <code>/var/log/audit/audit.log</code>. Rare it seems but painful when it happens!</p>

<p>More details at <a href=""https://bugzilla.redhat.com/show_bug.cgi?id=499343"" rel=""nofollow"">https://bugzilla.redhat.com/show_bug.cgi?id=499343</a></p>

<p><strong>ORIGINAL POST</strong></p>

<p>I've just hit what looks like exactly this problem. I had a poorly tuned VirtualBox (I hadn't told vbox to use 64bit) -- which when I cloned and restarted (in vbox RedHat 64-bit mode), started asking me for a password.</p>

<p>The original image was fine -- with identical settings -- so I think the suggestion of being networking-related might be relevant, or else to do with server keys.</p>

<p>The weird thing however is that if on the box, I kill the sshd process which autostarted, then manually run /usr/sbin/sshd as root, I can log in passwordless fine.  <strong>A silly workaround, but usable.</strong></p>

<p>So it is an /etc/init.d/sshd issue.  But I haven't been able to track down what it is ... have tried chucking out most of the stuff in that script but it still prompts for password when invoked as <code>/etc/init.d/sshd start</code> but not when at <code>/usr/sbin/sshd</code>.</p>

<p>Maybe these comments can help, and someone can then help further!?</p>
","7339","<ssh><amazon-web-services><amazon-ec2><centos><public-key>","3","1","7","2017-02-06 18:46:01","","5","2","901946","","2013-04-12 12:07:34","2011-03-09 20:25:55",""
"5251723","CentOS scp without password not working","<p>I have been trying to connect from one <strong>EC2 instance</strong> to another using ssh public keys and have been having a very tough time.</p>

<p>Here is the scenario: 
I need to have box 2 scp a file from box 1 in a script. This script will need to be able to scp without a password so I need to setup public keys.</p>

<p>On box 2 I ran <code>ssh-keygen –t rsa</code> and generated <code>id_rsa</code> and <code>id_rsa.pub</code>
I copied <code>id_rsa.pub</code> to box 1
I moved <code>id_rsa.pub</code> to .ssh and ran <code>cat id_rsa.pug &gt;&gt; authorized_keys</code>
I changed permissions of all .ssh directory to <em>700</em> on both boxes and the files themselves to <em>600</em>.
I have changed the sshd_config settings on box 1 to:</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
</code></pre>

<p>And then restarted ssh </p>

<pre><code>/sbin/service sshd restart
</code></pre>

<p>When I try to scp or ssh into box1 from box1 I get the error:</p>

<pre><code>Address 67.22.33.1 maps to ec2-67-22-33-1.compute-1.amazonaws.com, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
tomcat@tomcat1.****.com's password:
</code></pre>

<p>Any ideas?</p>

<hr>

<p>I made that change and tried scp to tomcat1 and it failed. Here is the output:</p>

<pre><code>debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to tomcat1.****.com [67.22.33.15] port 22.
debug1: Connection established.
debug1: identity file /home/tomcat/.ssh/identity type -1
debug1: identity file /home/tomcat/.ssh/id_rsa type 1
debug1: identity file /home/tomcat/.ssh/id_dsa type -1
debug1: loaded 3 keys
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.3
debug1: match: OpenSSH_4.3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
The authenticity of host 'tomcat1.****.com (67.22.33.15)' can't be established.
RSA key fingerprint is 5a:3e:fe:be:b8:0e:05:63:bf:ab:c8:4f:e5:91:db:a0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'tomcat1.****.com,67.22.33.15' (RSA) to the list of known hosts.
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Trying private key: /home/tomcat/.ssh/identity
debug1: Offering public key: /home/tomcat/.ssh/id_rsa
debug1: Authentications that can continue: publickey,password
debug1: Trying private key: /home/tomcat/.ssh/id_dsa
debug1: Next authentication method: password
</code></pre>
","<p>After following previous steps I had to set the permission to "".."" in the .ssh folder:</p>

<p>Once I had for ~/.ssh:</p>

<p>drwx------ 2 build build 4096 Nov  4 14:35 .</p>

<p>drwx------ 6 build build 4096 Nov  4 14:34 ..</p>

<p>-rw------- 1 build build  400 Nov  4 14:35 authorized_keys</p>

<p>It worked!</p>

<p>Thanks. Damian</p>
","7339","<ssh><amazon-web-services><amazon-ec2><centos><public-key>","3","0","7","2017-02-06 18:46:01","","5","2","901946","","2013-04-12 12:07:34","2011-03-09 20:25:55",""
"5251723","CentOS scp without password not working","<p>I have been trying to connect from one <strong>EC2 instance</strong> to another using ssh public keys and have been having a very tough time.</p>

<p>Here is the scenario: 
I need to have box 2 scp a file from box 1 in a script. This script will need to be able to scp without a password so I need to setup public keys.</p>

<p>On box 2 I ran <code>ssh-keygen –t rsa</code> and generated <code>id_rsa</code> and <code>id_rsa.pub</code>
I copied <code>id_rsa.pub</code> to box 1
I moved <code>id_rsa.pub</code> to .ssh and ran <code>cat id_rsa.pug &gt;&gt; authorized_keys</code>
I changed permissions of all .ssh directory to <em>700</em> on both boxes and the files themselves to <em>600</em>.
I have changed the sshd_config settings on box 1 to:</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
</code></pre>

<p>And then restarted ssh </p>

<pre><code>/sbin/service sshd restart
</code></pre>

<p>When I try to scp or ssh into box1 from box1 I get the error:</p>

<pre><code>Address 67.22.33.1 maps to ec2-67-22-33-1.compute-1.amazonaws.com, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
tomcat@tomcat1.****.com's password:
</code></pre>

<p>Any ideas?</p>

<hr>

<p>I made that change and tried scp to tomcat1 and it failed. Here is the output:</p>

<pre><code>debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to tomcat1.****.com [67.22.33.15] port 22.
debug1: Connection established.
debug1: identity file /home/tomcat/.ssh/identity type -1
debug1: identity file /home/tomcat/.ssh/id_rsa type 1
debug1: identity file /home/tomcat/.ssh/id_dsa type -1
debug1: loaded 3 keys
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.3
debug1: match: OpenSSH_4.3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
The authenticity of host 'tomcat1.****.com (67.22.33.15)' can't be established.
RSA key fingerprint is 5a:3e:fe:be:b8:0e:05:63:bf:ab:c8:4f:e5:91:db:a0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'tomcat1.****.com,67.22.33.15' (RSA) to the list of known hosts.
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Trying private key: /home/tomcat/.ssh/identity
debug1: Offering public key: /home/tomcat/.ssh/id_rsa
debug1: Authentications that can continue: publickey,password
debug1: Trying private key: /home/tomcat/.ssh/id_dsa
debug1: Next authentication method: password
</code></pre>
","<p>I had the exact same problem and have been scratching my head for an entire afternoon.
It turned out to be a small sshd_config file issue.</p>

<p>first, change access mod on <em>.ssh</em> folder of the remote host to user access only. </p>

<pre><code>chmod 700 ~/.ssh
</code></pre>

<p>next, <strong>go to /etc/ssh/sshd_config, change <code>StrictModes yes</code> to <code>StrictModes no</code>. If it's commented out, then specifically add <code>StrictModes no</code> into the file.</strong></p>

<p>That solved the issue.</p>
","7339","<ssh><amazon-web-services><amazon-ec2><centos><public-key>","3","0","7","2017-02-06 18:46:01","","5","2","901946","","2013-04-12 12:07:34","2011-03-09 20:25:55",""
"5251723","CentOS scp without password not working","<p>I have been trying to connect from one <strong>EC2 instance</strong> to another using ssh public keys and have been having a very tough time.</p>

<p>Here is the scenario: 
I need to have box 2 scp a file from box 1 in a script. This script will need to be able to scp without a password so I need to setup public keys.</p>

<p>On box 2 I ran <code>ssh-keygen –t rsa</code> and generated <code>id_rsa</code> and <code>id_rsa.pub</code>
I copied <code>id_rsa.pub</code> to box 1
I moved <code>id_rsa.pub</code> to .ssh and ran <code>cat id_rsa.pug &gt;&gt; authorized_keys</code>
I changed permissions of all .ssh directory to <em>700</em> on both boxes and the files themselves to <em>600</em>.
I have changed the sshd_config settings on box 1 to:</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
</code></pre>

<p>And then restarted ssh </p>

<pre><code>/sbin/service sshd restart
</code></pre>

<p>When I try to scp or ssh into box1 from box1 I get the error:</p>

<pre><code>Address 67.22.33.1 maps to ec2-67-22-33-1.compute-1.amazonaws.com, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!
tomcat@tomcat1.****.com's password:
</code></pre>

<p>Any ideas?</p>

<hr>

<p>I made that change and tried scp to tomcat1 and it failed. Here is the output:</p>

<pre><code>debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to tomcat1.****.com [67.22.33.15] port 22.
debug1: Connection established.
debug1: identity file /home/tomcat/.ssh/identity type -1
debug1: identity file /home/tomcat/.ssh/id_rsa type 1
debug1: identity file /home/tomcat/.ssh/id_dsa type -1
debug1: loaded 3 keys
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.3
debug1: match: OpenSSH_4.3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_4.3
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
The authenticity of host 'tomcat1.****.com (67.22.33.15)' can't be established.
RSA key fingerprint is 5a:3e:fe:be:b8:0e:05:63:bf:ab:c8:4f:e5:91:db:a0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'tomcat1.****.com,67.22.33.15' (RSA) to the list of known hosts.
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Trying private key: /home/tomcat/.ssh/identity
debug1: Offering public key: /home/tomcat/.ssh/id_rsa
debug1: Authentications that can continue: publickey,password
debug1: Trying private key: /home/tomcat/.ssh/id_dsa
debug1: Next authentication method: password
</code></pre>
","<p>And one more thing I just found, I had to edit the .ssh/authorized_keys file to and make hostname fully qualified.   Otherwise, I couldn't use the fully qualified name in the scp/ssh command.  Now both fully qualified (like ""host.company.com"") &amp; the relative name (""host"") work, given that both hosts are in the ""company.com"" domain.  ssh-keygen created the public key file with just the hostname.</p>
","7339","<ssh><amazon-web-services><amazon-ec2><centos><public-key>","3","0","7","2017-02-06 18:46:01","","5","2","901946","","2013-04-12 12:07:34","2011-03-09 20:25:55",""
"6754929","ssh Permission denied (publickey) Bind to port 22 on 0.0.0.0 failed: Address already in use","<p>I'm trying to add a key public key for my dev box which is a vm running ubuntu natty, and I am unable to connect via ssh. I've tried rsa and dsa, as well as these commands:</p>

<pre><code>exec ssh-agent bash
ssh-add ~/.ssh/id_rsa
ssh-add ~/.ssh/id_dsa
SSH_AUTH_SOCK=0
</code></pre>

<p>I also edited my sshd_config file as follows:</p>

<pre><code>ListenAddress 0.0.0.0
AuthorizedKeysFile %h/.ssh/authorized_keys
</code></pre>

<p>I've tried restarting sshd as well as the system, too.</p>

<p>I think I've found the error by running sudo /usr/sbin/sshd -Dd, but I'm not sure how to fix it:</p>

<pre><code>ebug1: sshd version OpenSSH_5.8p1 Debian-1ubuntu3
debug1: read PEM private key done: type RSA
debug1: Checking blacklist file /usr/share/ssh/blacklist.RSA-2048
debug1: Checking blacklist file /etc/ssh/blacklist.RSA-2048
debug1: private host key: #0 type 1 RSA
debug1: read PEM private key done: type DSA
debug1: Checking blacklist file /usr/share/ssh/blacklist.DSA-1024
debug1: Checking blacklist file /etc/ssh/blacklist.DSA-1024
debug1: private host key: #1 type 2 DSA
debug1: rexec_argv[0]='/usr/sbin/sshd'
debug1: rexec_argv[1]='-Dd'
Set /proc/self/oom_score_adj from 0 to -1000
debug1: Bind to port 22 on 0.0.0.0.
Bind to port 22 on 0.0.0.0 failed: Address already in use.
Cannot bind any address.
</code></pre>

<p>Thanks for any help.</p>
","<p>It looks like another process is already running that's bound to port 22. Find out which:</p>

<pre><code>sudo netstat -lnp --inet
</code></pre>

<p>Then kill it and try again.</p>
","7267","<ssh><vmware><public-key><ubuntu-11.04>","0","2","1","2011-07-19 22:38:14","","2","","596781","","2011-07-19 22:37:10","2011-07-19 22:34:54",""
"5210286","git setup for multiple repos on same server","<p>Probably a simple question, but I am at a loss here...</p>

<p>In github one can add a deployment key for each repository which only gives access to that single repository. </p>

<p>But for one client I have two projects managed with git on the same server (project A and project B). If I use the public key for project A, github tells me I cant use it as a deployment key for project B and vice versa. </p>

<p>How can I create another public key and setup git to use one key for project A and the other one for project B?</p>
","<p>The <code>ssh</code> way to do this would be using <code>~/.ssh/config</code>, creating a hostname alias and accessing github with different hostnames for both projects. I have no idea whether there is a <code>git config</code> (or <code>git remote</code>) way too.</p>

<pre><code>Host a.github.com
HostName github.com
User git
IdentityFile ~/.ssh/project-a-id_rsa

Host b.github.com
HostName github.com
User git
IdentityFile ~/.ssh/project-b-id_rsa
</code></pre>

<p>Then use <code>a.github.com:user/project-a.git</code> or <code>b.github.com:user/project-b.git</code> (or similar) as your repository URLs.</p>
","6982","<git><ssh><github><public-key>","20","41","2","2016-10-21 04:20:27","5210781","0","14","600500","","2011-03-06 13:34:20","2011-03-06 11:49:28",""
"5210286","git setup for multiple repos on same server","<p>Probably a simple question, but I am at a loss here...</p>

<p>In github one can add a deployment key for each repository which only gives access to that single repository. </p>

<p>But for one client I have two projects managed with git on the same server (project A and project B). If I use the public key for project A, github tells me I cant use it as a deployment key for project B and vice versa. </p>

<p>How can I create another public key and setup git to use one key for project A and the other one for project B?</p>
","<p>Let's say <code>alice</code> is a github.com user, with 2 or more private repositories <code>repoN</code>.
For this example we'll work with just two repositories named <code>repo1</code> and <code>repo2</code></p>

<p><code>https://github.com/alice/repo1</code></p>

<p><code>https://github.com/alice/repo2</code></p>

<p>You need to be to pull from these repositories without entering a passwords probably on a server, or on multiple servers.
You want to perform <code>git pull origin master</code> for example, and you want this to happen without asking for a password.</p>

<p>You don't like dealing with ssh-agent, you have discovered (or you're discovering now) about <code>~/.ssh/config</code> a file that let's your ssh client know what private key to use depending on Hostname and username, with a simple configuration entry that looks like this:</p>

<pre><code>Host github.com
  HostName github.com
  User git
  IdentityFile /home/alice/.ssh/alice_github.id_rsa
  IdentitiesOnly yes
</code></pre>

<p>So you went ahead and created your <code>(alice_github.id_rsa, alice_github.id_rsa.pub)</code> keypair, you then also went to your repository's <code>.git/config</code> file and you modified the url of your remote <code>origin</code> to be something like this:</p>

<pre><code>[remote ""origin""]
        url = ""ssh://git@github.com/alice/repo1.git""
</code></pre>

<p>And finally you went to the repository <code>Settings &gt; Deploy keys</code> section and added the contents of <code>alice_github.id_rsa.pub</code></p>

<p>At this point you could do your <code>git pull origin master</code> without entering a password without issue.</p>

<h3>but what about the second repository?</h3>

<p>So your instinct will be to grab that key and add it to <code>repo2</code>'s Deploy keys, but github.com will error out and tell you that the key is already being used.</p>

<p>Now you go and generate another key (using <code>ssh-keygen -t rsa -C ""alice@alice.com""</code> without passwords of course), and so that this doesn't become a mess, you will now name your keys like this:</p>

<ul>
<li><code>repo1</code> keypair: <code>(repo1.alice_github.id_rsa, repo1.alice_github.id_rsa.pub)</code></li>
<li><code>repo2</code> keypair: <code>(repo2.alice_github.id_rsa, repo2.alice_github.id_rsa.pub)</code></li>
</ul>

<p>You will now put the new public key on <code>repo2</code>'s Deploy keys configuration at github.com, but now you have an ssh problem to deal with. </p>

<h3>How can ssh tell which key to use if the repositories are hosted on the same <code>github.com</code> domain?</h3>

<p>Your <code>.ssh/config</code> file points to <code>github.com</code> and it doesn't know which key to use when it's time to do the pull.</p>

<p>So I found a trick with github.com. You can tell your ssh client that each repository lives in a different github.com subdomain, in these cases, they will be <code>repo1.github.com</code> and <code>repo2.github.com</code></p>

<p>So first thing is editing the <code>.git/config</code> files on your repo clones, so they look like this instead:</p>

<p>For repo1</p>

<pre><code>[remote ""origin""]
        url = ""ssh://git@repo1.github.com/alice/repo1.git""
</code></pre>

<p>For repo2</p>

<p>[remote ""origin""]
        url = ""ssh://git@repo2.github.com/alice/repo2.git""</p>

<p>And then, on your <code>.ssh/config</code> file, now you will be able to enter a configuration for each subdomain :)</p>

<pre><code>Host repo1.github.com
  HostName github.com
  User git
  IdentityFile /home/alice/.ssh/repo1.alice_github.id_rsa
  IdentitiesOnly yes

Host repo2.github.com
  HostName github.com
  User git
  IdentityFile /home/alice/.ssh/repo2.alice_github.id_rsa
  IdentitiesOnly yes
</code></pre>

<p>Now you are able to <code>git pull origin master</code> without entering any passwords from both repositories.</p>

<p>If you have multiple machines, you could copy the keys to each of the machines and reuse them, but I'd advise doing the leg work to generate 1 key per machine and repo. You will have a lot more keys to handle, but you will be less vulnerable if one gets compromised.</p>
","6982","<git><ssh><github><public-key>","20","2","2","2016-10-21 04:20:27","5210781","0","14","600500","","2011-03-06 13:34:20","2011-03-06 11:49:28",""
"28442505","JSch how to use with PuTTY private key","<p>I'm trying to use JSch with a private key configuration. I've generated a public and private key using PuTTYgen but am unsure what to do with both of the files.</p>

<p>Which key (public/private) needs transferring to the server?</p>
","<ul>
<li><p>First, you need to register your PuTTYgen-generated <strong>public</strong> key on the server. See <a href=""https://the.earth.li/~sgtatham/putty/latest/htmldoc/Chapter8.html#pubkey-gettingready"" rel=""nofollow noreferrer"">Getting ready for public key authentication</a> or (my) <a href=""https://winscp.net/eng/docs/guide_public_key"" rel=""nofollow noreferrer"">Set up SSH public key authentication</a>.</p></li>
<li><p>And finally see <a href=""https://stackoverflow.com/q/4932005/850848"">Can we use JSch for SSH key-based communication?</a> for details on using the <strong>private</strong> key in JSch.</p></li>
</ul>

<hr>

<p>Make sure you use the latest version of JSch, as older versions do not support the .ppk format natively.</p>
","6964","<putty><jsch><private-key><public-key>","2","3","2","2018-09-06 07:25:25","28448391","0","2","850848","","2015-02-11 07:05:24","2015-02-10 21:49:15",""
"28442505","JSch how to use with PuTTY private key","<p>I'm trying to use JSch with a private key configuration. I've generated a public and private key using PuTTYgen but am unsure what to do with both of the files.</p>

<p>Which key (public/private) needs transferring to the server?</p>
","<p>Code Snippet for connection using PuTTy private Key (.ppk)</p>

<pre><code>JSch jsch=new JSch();
jsch.setKnownHosts(""~\.ssh\know_hosts"");
jsch.addIdentity(""~\sshkey.ppk"");
Session session=jsch.getSession(""ec2-user"", ""54.12.11.90"", 22);
session.setConfig(""PreferredAuthentications"", ""publickey"");
session.setConfig(""StrictHostKeyChecking"", ""no"");
session.connect();
Channel channel=session.openChannel(""shell"");
channel.setInputStream(System.in);
channel.setOutputStream(System.out);
channel.connect(3*1000);
</code></pre>

<p>Have used 0.1.54 version of Jsch</p>

<pre><code>        &lt;dependency&gt;
            &lt;groupId&gt;com.jcraft&lt;/groupId&gt;
            &lt;artifactId&gt;jsch&lt;/artifactId&gt;
            &lt;version&gt;0.1.54&lt;/version&gt;
        &lt;/dependency&gt;
</code></pre>
","6964","<putty><jsch><private-key><public-key>","2","1","2","2018-09-06 07:25:25","28448391","0","2","850848","","2015-02-11 07:05:24","2015-02-10 21:49:15",""
"24188707","Suppress the use of host key in SFTP or SCP using WinSCP","<p>I am working on an application in which I am downloading files using WinSCP .NET assembly (version 5.5.0.3839)</p>

<p>My code to download file is given below</p>

<pre><code>public bool ReceiveFile(string ftpFilePath,out String downloadedFileName, String DestinationPath)
{
    bool sendingStatus = false;
    downloadedFileName = string.Empty;
    try
    {
        if (sessionOptions != null)
        {
            using (Session session = new Session())
            {
                // Connect
                bool isSessionOpened = OpenSession(session);
                if (isSessionOpened)
                {
                    // Upload files
                    TransferOptions transferOptions = new TransferOptions();
                    transferOptions.TransferMode = TransferMode.Automatic;

                    TransferOperationResult transferResult;
                    transferResult = session.GetFiles(ftpFilePath, DestinationPath, false, transferOptions);
                    // Throw on any error
                    transferResult.Check();

                    // Print results
                    foreach (TransferEventArgs transfer in transferResult.Transfers)
                    {
                        sendingStatus = true;
                        downloadedFileName = transfer.FileName;
                        //We are breaking here because we are assuming that for one import batch setup only one file will be downloaded
                        break;
                    }
                }
            }
        }
    }
    catch (Exception ex)
    {
    }
    return sendingStatus;
}
</code></pre>

<p>FTP is working fine, but working with SFTP it requires host key.</p>

<p>When I worked with WinSCP application directly it warns for the host key and user is able to copy host key by clicking on ""Copy key"" button.</p>

<p>Host key will be copied to clipboard and we can use this key to download files from SFTP or SCP.</p>

<p>There is also an option that user can suppress the use of host key.</p>

<p>I want to suppress the use of host key programmatically.</p>

<p>Let me know if there required any other information.</p>
","<p>What do you mean by <em>""suppress the use of host key""</em>?</p>

<p>There's no option to suppress use of the host key in WinSCP application. You have an option to accept the host key and remember it, to accept the key without remembering it, and to reject the key (and abandon the connection).<br>
<a href=""https://winscp.net/eng/docs/ssh_verifying_the_host_key"" rel=""nofollow noreferrer"">https://winscp.net/eng/docs/ssh_verifying_the_host_key</a></p>

<p>The WinSCP .NET assembly does not have the first option built-in, as it (by default) does not keep any configuration, so it cannot store the accepted keys anywhere. That's by design. It's your task to set the <a href=""https://winscp.net/eng/docs/library_sessionoptions#sshhostkeyfingerprint"" rel=""nofollow noreferrer""><code>SessionOptions.SshHostKeyFingerprint</code></a>. Either:</p>

<ul>
<li>hard-code the host key fingerprint;</li>
<li>or load it from any configuration your application have (i.e. possibly from the same configuration you load host name or user name); </li>
<li>or <a href=""https://winscp.net/eng/docs/library_example_known_hosts"" rel=""nofollow noreferrer"">implement SSH host key cache (known hosts)</a>.</li>
</ul>

<hr>

<p>Your code does not show implementation of <code>OpenSession</code>, what is a key piece here, so it's not clear what you are trying to do.</p>

<p>If you do not care about the host key (<em>meaning you do not care about security at all</em>), you can make WinSCP accept any host key unconditionally using the <a href=""https://winscp.net/eng/docs/library_sessionoptions#giveupsecurityandacceptanysshhostkey"" rel=""nofollow noreferrer""><code>SessionOption.GiveUpSecurityAndAcceptAnySshHostKey</code></a>.<br>
But that's for use in exceptional situations only, where SSH security is unnecessary overhead. Like when both your application and server are within an isolated network.</p>

<p>See also <a href=""https://stackoverflow.com/q/17938825/850848"">WinSCP .NET library: Connect to SFTP server without specifying SSH host key fingerprint</a>.</p>
","6777","<c#><sftp><public-key><winscp><winscp-net>","2","3","1","2018-08-06 14:57:04","24192015","0","1","850848","","2014-06-12 19:05:07","2014-06-12 15:50:36",""
"33031658","Getting RSA Public Key from Certificate in Golang","<p>I can't find it in the functions that a Certificate has in <a href=""https://golang.org/pkg/crypto/x509/"" rel=""noreferrer"">https://golang.org/pkg/crypto/x509/</a></p>

<p>But, how do I get a Public Key as defined in <a href=""https://golang.org/pkg/crypto/rsa/#PublicKey"" rel=""noreferrer"">https://golang.org/pkg/crypto/rsa/#PublicKey</a> from a Certificate in Go?</p>
","<p>I have struggled my way learning just enough of Go to cobble together this example.</p>

<pre><code>package main

import(
    ""fmt""
    ""encoding/pem""
    ""crypto/x509""
    ""crypto/rsa""
)

func main(){
    const rootPEM = `
-----BEGIN CERTIFICATE-----
MIIEBDCCAuygAwIBAgIDAjppMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT
MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i
YWwgQ0EwHhcNMTMwNDA1MTUxNTU1WhcNMTUwNDA0MTUxNTU1WjBJMQswCQYDVQQG
EwJVUzETMBEGA1UEChMKR29vZ2xlIEluYzElMCMGA1UEAxMcR29vZ2xlIEludGVy
bmV0IEF1dGhvcml0eSBHMjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB
AJwqBHdc2FCROgajguDYUEi8iT/xGXAaiEZ+4I/F8YnOIe5a/mENtzJEiaB0C1NP
VaTOgmKV7utZX8bhBYASxF6UP7xbSDj0U/ck5vuR6RXEz/RTDfRK/J9U3n2+oGtv
h8DQUB8oMANA2ghzUWx//zo8pzcGjr1LEQTrfSTe5vn8MXH7lNVg8y5Kr0LSy+rE
ahqyzFPdFUuLH8gZYR/Nnag+YyuENWllhMgZxUYi+FOVvuOAShDGKuy6lyARxzmZ
EASg8GF6lSWMTlJ14rbtCMoU/M4iarNOz0YDl5cDfsCx3nuvRTPPuj5xt970JSXC
DTWJnZ37DhF5iR43xa+OcmkCAwEAAaOB+zCB+DAfBgNVHSMEGDAWgBTAephojYn7
qwVkDBF9qn1luMrMTjAdBgNVHQ4EFgQUSt0GFhu89mi1dvWBtrtiGrpagS8wEgYD
VR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAQYwOgYDVR0fBDMwMTAvoC2g
K4YpaHR0cDovL2NybC5nZW90cnVzdC5jb20vY3Jscy9ndGdsb2JhbC5jcmwwPQYI
KwYBBQUHAQEEMTAvMC0GCCsGAQUFBzABhiFodHRwOi8vZ3RnbG9iYWwtb2NzcC5n
ZW90cnVzdC5jb20wFwYDVR0gBBAwDjAMBgorBgEEAdZ5AgUBMA0GCSqGSIb3DQEB
BQUAA4IBAQA21waAESetKhSbOHezI6B1WLuxfoNCunLaHtiONgaX4PCVOzf9G0JY
/iLIa704XtE7JW4S615ndkZAkNoUyHgN7ZVm2o6Gb4ChulYylYbc3GrKBIxbf/a/
zG+FA1jDaFETzf3I93k9mTXwVqO94FntT0QJo544evZG0R0SnU++0ED8Vf4GXjza
HFa9llF7b1cq26KqltyMdMKVvvBulRP/F/A8rLIQjcxz++iPAsbw+zOzlTvjwsto
WHPbqCRiOwY1nQ2pM714A5AuTHhdUDqB1O6gyHA43LL5Z/qHQF1hwFGPa4NrzQU6
yuGnBXj8ytqU0CwIPX4WecigUCAkVDNx
-----END CERTIFICATE-----`

    block, _ := pem.Decode([]byte(rootPEM))
    var cert* x509.Certificate
    cert, _ = x509.ParseCertificate(block.Bytes)
    rsaPublicKey := cert.PublicKey.(*rsa.PublicKey)
    fmt.Println(rsaPublicKey.N)
    fmt.Println(rsaPublicKey.E)
}
</code></pre>

<p>Playground snippet with the code above: <a href=""https://play.golang.org/p/pn7CKVVdQF"" rel=""noreferrer"">https://play.golang.org/p/pn7CKVVdQF</a></p>
","6773","<go><rsa><public-key><digital-certificate>","5","10","1","2017-11-07 20:49:02","33088784","0","2","1816580","","2015-10-09 19:46:24","2015-10-09 06:47:57",""
"38134750","How do I get the public key from a PFX certificate using Powershell?","<p>I am trying to extract the public key from a certificate using Powershell. However, whenever I use the Powershell command <code>Get-PfxCertificate</code> it only outputs the Thumbprint of the certificate and not the public key. How can I get it to output the public key?</p>
","<p>To retrieve the public key from a PFX certificate using Powershell, use the following command:</p>

<pre><code>(Get-PfxCertificate -FilePath mycert.pfx).GetPublicKey()
</code></pre>

<p>To convert the public key to a hex string without hyphens you can use this command:</p>

<pre><code>[System.BitConverter]::ToString((Get-PfxCertificate -FilePath mycert.pfx).GetPublicKey()).Replace(""-"", """")
</code></pre>
","6687","<powershell><certificate><public-key><pkcs12>","2","7","2","2019-02-09 17:33:38","38134751","0","","","","","2016-06-30 23:18:36",""
"38134750","How do I get the public key from a PFX certificate using Powershell?","<p>I am trying to extract the public key from a certificate using Powershell. However, whenever I use the Powershell command <code>Get-PfxCertificate</code> it only outputs the Thumbprint of the certificate and not the public key. How can I get it to output the public key?</p>
","<p>Be aware, that <code>Get-PfxCertificate</code> temporarily stores your private key at <code>%ProgramData%\Microsoft\Crypto\RSA\MachineKeys</code>, where <strong>everyone</strong> could read it.</p>

<p>If that is not a desirable behavior, than you should probably use either <code>import</code> method or constructor of the <code>X509Certificate2</code> .NET object with <code>EphemeralKeySet</code> as a key storage flag, which indicates that private key should be created in memory and not persisted on disk when importing a certificate, e.g.:</p>

<pre class=""lang-bsh prettyprint-override""><code>$Cert = New-Object -TypeName System.Security.Cryptography.X509Certificates.X509Certificate2
$FullPathToCert = Resolve-Path -Path .\cert.pfx
$Password = Read-Host 'Password' -AsSecureString
$X509KeyStorageFlag = 32
$Cert.Import($FullPathToCert, $Password, $X509KeyStorageFlag)
$Cert.GetPublicKey()
</code></pre>

<h3>Notes</h3>

<ul>
<li><code>EphemeralKeySet</code> flag supported by <em>.NET Framework 4.7.2</em>, <em>.NET Core 2.0</em> and above;</li>
<li><code>$X509KeyStorageFlag = 32</code> is just a shorthand for the <code>$X509KeyStorageFlag = [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::EphemeralKeySet</code></li>
</ul>

<h3>Further reading</h3>

<ul>
<li><code>X509KeyStorageFlags</code> enumerator spec <a href=""https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509keystorageflags"" rel=""nofollow noreferrer"">https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509keystorageflags</a></li>
<li>Eight tips for working with X.509 certificates in .NET: <a href=""http://paulstovell.com/blog/x509certificate2"" rel=""nofollow noreferrer"">http://paulstovell.com/blog/x509certificate2</a></li>
</ul>
","6687","<powershell><certificate><public-key><pkcs12>","2","0","2","2019-02-09 17:33:38","38134751","0","","","","","2016-06-30 23:18:36",""
"17791589","Write public/private key to the SharedPreferences and use it","<p>I am trying to encrypt and decrypt a text with public/private keys.First of all, I create my keys and store them in sharedpreferences with this code : </p>

<pre><code>SharedPreferences SP;

SharedPreferences.Editor SPE;

KeyPairGenerator keyGen;

KeyPair keypair;

PublicKey publicKey;

PrivateKey privateKey;

keyGen = KeyPairGenerator.getInstance(""RSA""); 

keyGen.initialize(1024);        

keypair = keyGen.genKeyPair();

privateKey = keypair.getPrivate(); 

publicKey = keypair.getPublic();

SPE = SP.edit();

SPE.putString(""PublicKey"", publicKey.toString());

SPE.putString(""PrivateKey"", privateKey.toString());

SPE.commit();
</code></pre>

<p>In my SharedPreferences file, keys are written like this :</p>

<blockquote>
  <p>PublicKey: RSA Public Key</p>
  
  <p>modulus: d07b8f32968cf65301fd710f9d6d036feac01d7b98c92ff979cd324d252cb257ff48d6630b33f0f68bd0ee81c3a83502a0abf0b263dc96c2b86940f7ec19ab1865626383e55cf5a37e25ef4eb6ca88a39f31becb6065434bc2236177aa5b35266fe0379164faea6ef7a92812e7aa3ef5fc488c70ab085f5564f09c0f6e927b49</p>
  
  <p>public exponent: 10001</p>
  
  <p>PrivateKey: RSA Private CRT Key</p>
  
  <p>modulus: d07b8f32968cf65301fd710f9d6d036feac01d7b98c92ff979cd324d252cb257ff48d6630b33f0f68bd0ee81c3a83502a0abf0b263dc96c2b86940f7ec19ab1865626383e55cf5a37e25ef4eb6ca88a39f31becb6065434bc2236177aa5b35266fe0379164faea6ef7a92812e7aa3ef5fc488c70ab085f5564f09c0f6e927b49</p>
  
  <p>public exponent: 10001<br>
  private exponent: 67ebef696c1a3fff0892e8f4bba8477a562e05844298a6cd58a5ac59401a939bc1a8f114d5d4c25c633d766640bd6c0f2f4005ef265022e6553e4220531448702e4bbf4322b9d5cf444d16eea151e5d565412b49208a73d9236607475d201affa21d374e3186f14b651b08565be4725f89fc6797a79c8433c4dd089589284a01</p>
  
  <p>primeP: ee4ad1a56f4ee3b12c198d09b08a92c349f94cc79a6143ca7140fa64c919f2d9c24c29d3b413fdc4039000b6b5feac5a764ce436db4a4a382d8ceecbc768e0d1</p>
  
  <p>primeQ: dff9a761807440b4a5a4fb04ebaa22849f6543f33168bd6e83b3c549b346661124d7879e168c1009e97c01b3fdcd7088eebd9c989b64d7c4b81ea46f9e06d0f9</p>
  
  <p>primeExponentP: 2ce01e371f8d25c819dbfdf9932ba593ed7c6b7f338d99aca8436a644c92fc6f11ee31fa5271695adea8e1d986d09d38b40aaaf7c1b86dddc28645fa4e656be1</p>
  
  <p>primeExponentQ: 21904af9fc82ef5362e3474ea4763978005eef80d92da5fd92b4f4e2a77fec39b378acf50ed1ec715fd0da7c7b9336c2fe6be1b4a8ccc2dcd2ee9c9bb165ba19</p>
  
  <p>crtCoefficient: d8ccccb874ec4c2d464e84829547507e1ebf78e506caa77950b04329957b8713e80553874b825bf5c90b214984b4657b64965867460d87aab135f43930db48ec</p>
</blockquote>

<p>And with this code i am trying to read this keys :</p>

<pre><code>private PublicKey getPublicKey() throws UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeySpecException{

    byte[] keyBytes = Base64.decodeBase64(SP.getString(""PublicKey"", ""default value"").getBytes(""utf-8""));
    X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
    PublicKey key = keyFactory.generatePublic(spec);
    return key;}
</code></pre>

<p>But something goes wrong.It gives InvalidKeySpecException. I thing this cannot read the keys from file.How can i fix this problem? Thank you.</p>
","<p>Ok. I found some solution and change something. This is new class for public/private key storing and getting it again from stored string. This class works for me !</p>

<pre><code>import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import org.bouncycastle.util.encoders.Base64;
import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;

public class KeyGenerator extends Activity{

    SharedPreferences SP;
    SharedPreferences.Editor SPE;
    PublicKey pubKey;
    PrivateKey privKey; 
    Context context;

    public KeyGenerator(Context context){
        this.context = context;
        SP = context.getSharedPreferences(""KeyPair"", MODE_PRIVATE);
    }

    public void generateKeys(){
        try {
            KeyPairGenerator generator;
            generator = KeyPairGenerator.getInstance(""RSA"", ""BC"");
            generator.initialize(256, new SecureRandom());
            KeyPair pair = generator.generateKeyPair();
            pubKey = pair.getPublic();
            privKey = pair.getPrivate();            
            byte[] publicKeyBytes = pubKey.getEncoded();
            String pubKeyStr = new String(Base64.encode(publicKeyBytes));
            byte[] privKeyBytes = privKey.getEncoded();
            String privKeyStr = new String(Base64.encode(privKeyBytes));            
            SPE = SP.edit();
            SPE.putString(""PublicKey"", pubKeyStr);
            SPE.putString(""PrivateKey"", privKeyStr);           
            SPE.commit();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchProviderException e) {
            e.printStackTrace();
        }           
    }
    public PublicKey getPublicKey(){
        String pubKeyStr = SP.getString(""PublicKey"", """");       
        byte[] sigBytes = Base64.decode(pubKeyStr);
        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(sigBytes);
        KeyFactory keyFact = null;
        try {
            keyFact = KeyFactory.getInstance(""RSA"", ""BC"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchProviderException e) {
            e.printStackTrace();
        }
        try {
            return  keyFact.generatePublic(x509KeySpec);
        } catch (InvalidKeySpecException e) {
            e.printStackTrace();
        }
        return null;
    }
    public String getPublicKeyAsString(){
        return SP.getString(""PublicKey"", """");       
    }
    public PrivateKey getPrivateKey(){
        String privKeyStr = SP.getString(""PrivateKey"", """");
        byte[] sigBytes = Base64.decode(privKeyStr);
        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(sigBytes);
        KeyFactory keyFact = null;
        try {
            keyFact = KeyFactory.getInstance(""RSA"", ""BC"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchProviderException e) {
            e.printStackTrace();
        }
        try {
            return  keyFact.generatePrivate(x509KeySpec);
        } catch (InvalidKeySpecException e) {
            e.printStackTrace();
        }
        return null;
    }
    public String getPrivateKeyAsString(){
        return SP.getString(""PrivateKey"", """");      
    }
}
</code></pre>
","6677","<android><sharedpreferences><private-key><public-key>","5","9","2","2014-03-09 17:04:44","18115456","0","3","","","","2013-07-22 15:30:47",""
"17791589","Write public/private key to the SharedPreferences and use it","<p>I am trying to encrypt and decrypt a text with public/private keys.First of all, I create my keys and store them in sharedpreferences with this code : </p>

<pre><code>SharedPreferences SP;

SharedPreferences.Editor SPE;

KeyPairGenerator keyGen;

KeyPair keypair;

PublicKey publicKey;

PrivateKey privateKey;

keyGen = KeyPairGenerator.getInstance(""RSA""); 

keyGen.initialize(1024);        

keypair = keyGen.genKeyPair();

privateKey = keypair.getPrivate(); 

publicKey = keypair.getPublic();

SPE = SP.edit();

SPE.putString(""PublicKey"", publicKey.toString());

SPE.putString(""PrivateKey"", privateKey.toString());

SPE.commit();
</code></pre>

<p>In my SharedPreferences file, keys are written like this :</p>

<blockquote>
  <p>PublicKey: RSA Public Key</p>
  
  <p>modulus: d07b8f32968cf65301fd710f9d6d036feac01d7b98c92ff979cd324d252cb257ff48d6630b33f0f68bd0ee81c3a83502a0abf0b263dc96c2b86940f7ec19ab1865626383e55cf5a37e25ef4eb6ca88a39f31becb6065434bc2236177aa5b35266fe0379164faea6ef7a92812e7aa3ef5fc488c70ab085f5564f09c0f6e927b49</p>
  
  <p>public exponent: 10001</p>
  
  <p>PrivateKey: RSA Private CRT Key</p>
  
  <p>modulus: d07b8f32968cf65301fd710f9d6d036feac01d7b98c92ff979cd324d252cb257ff48d6630b33f0f68bd0ee81c3a83502a0abf0b263dc96c2b86940f7ec19ab1865626383e55cf5a37e25ef4eb6ca88a39f31becb6065434bc2236177aa5b35266fe0379164faea6ef7a92812e7aa3ef5fc488c70ab085f5564f09c0f6e927b49</p>
  
  <p>public exponent: 10001<br>
  private exponent: 67ebef696c1a3fff0892e8f4bba8477a562e05844298a6cd58a5ac59401a939bc1a8f114d5d4c25c633d766640bd6c0f2f4005ef265022e6553e4220531448702e4bbf4322b9d5cf444d16eea151e5d565412b49208a73d9236607475d201affa21d374e3186f14b651b08565be4725f89fc6797a79c8433c4dd089589284a01</p>
  
  <p>primeP: ee4ad1a56f4ee3b12c198d09b08a92c349f94cc79a6143ca7140fa64c919f2d9c24c29d3b413fdc4039000b6b5feac5a764ce436db4a4a382d8ceecbc768e0d1</p>
  
  <p>primeQ: dff9a761807440b4a5a4fb04ebaa22849f6543f33168bd6e83b3c549b346661124d7879e168c1009e97c01b3fdcd7088eebd9c989b64d7c4b81ea46f9e06d0f9</p>
  
  <p>primeExponentP: 2ce01e371f8d25c819dbfdf9932ba593ed7c6b7f338d99aca8436a644c92fc6f11ee31fa5271695adea8e1d986d09d38b40aaaf7c1b86dddc28645fa4e656be1</p>
  
  <p>primeExponentQ: 21904af9fc82ef5362e3474ea4763978005eef80d92da5fd92b4f4e2a77fec39b378acf50ed1ec715fd0da7c7b9336c2fe6be1b4a8ccc2dcd2ee9c9bb165ba19</p>
  
  <p>crtCoefficient: d8ccccb874ec4c2d464e84829547507e1ebf78e506caa77950b04329957b8713e80553874b825bf5c90b214984b4657b64965867460d87aab135f43930db48ec</p>
</blockquote>

<p>And with this code i am trying to read this keys :</p>

<pre><code>private PublicKey getPublicKey() throws UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeySpecException{

    byte[] keyBytes = Base64.decodeBase64(SP.getString(""PublicKey"", ""default value"").getBytes(""utf-8""));
    X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
    PublicKey key = keyFactory.generatePublic(spec);
    return key;}
</code></pre>

<p>But something goes wrong.It gives InvalidKeySpecException. I thing this cannot read the keys from file.How can i fix this problem? Thank you.</p>
","<p>Thanks for the accepted code above (maybe below). However, in my case, the 'getPrivatekey()' throws an InvalidKeySpecException. It says 'Unknown KeySpc type: java.secrity.spec.X509EncodedKeySpec'. The solution I used is to replace X509EncodedKeySpec with PKCS8EncodedKeySpec. Then it works! 
Reference: <a href=""https://stackoverflow.com/a/9755391/2481444"">https://stackoverflow.com/a/9755391/2481444</a></p>
","6677","<android><sharedpreferences><private-key><public-key>","5","4","2","2014-03-09 17:04:44","18115456","0","3","","","","2013-07-22 15:30:47",""
"7580083","SSHJ Example of Public Key Auth from File","<p>Can someone give me an example of using SSHJ for Public Key Authentication? I realise this question is essentially identical to <a href=""https://stackoverflow.com/questions/3686710/sshj-example-of-private-public-key-authentication"">ssh example of private/public key authentication</a>, however the answer by the author <a href=""https://stackoverflow.com/users/126346/shikhar"">https://stackoverflow.com/users/126346/shikhar</a> refers to a google user group that no longer exists, and I am having trouble getting it to work.</p>

<p>Thanks!
Phil</p>
","<p>We built the <a href=""https://github.com/xebialabs/overthere/"" rel=""nofollow noreferrer"">overthere framework</a> on top of SSHJ. Which can connect also connect using key files.
The following piece of code should work, but make sure you add the bouncycastle library to your classpath.</p>

<pre><code>SSHClient client = new SSHClient();
String username = ""johndoe"";
File privateKey = new File(""~/.ssh/id_rsa"");
KeyProvider keys = client.loadKeys(privateKey.getPath());
client.authPublickey(username, keys);
</code></pre>

<p>Hope that helps.</p>
","6594","<java><file><public-key><sshj>","7","7","2","2019-03-14 09:51:42","7581330","0","2","-1","","2017-05-23 12:03:35","2011-09-28 08:05:39",""
"7580083","SSHJ Example of Public Key Auth from File","<p>Can someone give me an example of using SSHJ for Public Key Authentication? I realise this question is essentially identical to <a href=""https://stackoverflow.com/questions/3686710/sshj-example-of-private-public-key-authentication"">ssh example of private/public key authentication</a>, however the answer by the author <a href=""https://stackoverflow.com/users/126346/shikhar"">https://stackoverflow.com/users/126346/shikhar</a> refers to a google user group that no longer exists, and I am having trouble getting it to work.</p>

<p>Thanks!
Phil</p>
","<p>I just had this issue as well. I ended up changing</p>

<pre><code>client.authPublickey(user, ""id_rsa.pub"")
</code></pre>

<p>to</p>

<pre><code>client.authPublickey(user, client.loadKeys(""id_rsa""))
</code></pre>
","6594","<java><file><public-key><sshj>","7","0","2","2019-03-14 09:51:42","7581330","0","2","-1","","2017-05-23 12:03:35","2011-09-28 08:05:39",""
"6742555","how do I remove my public key from github?","<p>I've got a public linked to my profile on github. I put it up a long time ago.
Since the time I put it up, I've lost the private key of the pair.</p>

<p>I have generated a new key pair and put it on my github profile. But I still can't push to github. git gives me errors related to my keys.</p>

<p>I'd like to remove the old public key, but I can't seem to find the option to do so in githubs admin dashboards. I can't find any instructions for how to remove keys. I've emailed them for help, but haven't gotten a reply as of yet.</p>

<p>How can I remove existing keys in my github account?</p>
","<p>To remove an SSH public key, follow the below steps.</p>

<ol>
<li>Login to your GitHub account.</li>
<li>Go to the account Settings.</li>
<li>Follow the link 'SSH keys' at <code>/settings/ssh</code>.</li>
<li>Note your key in a list, represented as an email address (or compare with <code>ssh-add -l</code>).</li>
<li>Simply click on the 'Delete' next to your key.</li>
</ol>

<p>That should do it.  </p>
","6580","<github><public-key>","3","2","1","2017-10-20 08:46:13","","0","","","","","2011-07-19 05:13:02",""
"44305953","How to generate RSA public and private keys using Swift 3?","<p>I create the key pairs of public and private using SecKeyGeneratePair.</p>

<h1>ViewController</h1>

<pre><code>import UIKit
import Security

class ViewController: UIViewController {

    @IBOutlet weak var textFld: UITextField!
    @IBOutlet weak var encryptedTextFld: UITextView!
    @IBOutlet weak var decryptedTextFld: UITextView!

    var statusCode: OSStatus?
    var publicKey: SecKey?
    var privateKey: SecKey?

    override func viewDidLoad() {
        super.viewDidLoad()

        let publicKeyAttr: [NSObject: NSObject] = [kSecAttrIsPermanent:true as NSObject, kSecAttrApplicationTag:""com.xeoscript.app.RsaFromScrach.public"".data(using: String.Encoding.utf8)! as NSObject]
        let privateKeyAttr: [NSObject: NSObject] = [kSecAttrIsPermanent:true as NSObject, kSecAttrApplicationTag:""com.xeoscript.app.RsaFromScrach.private"".data(using: String.Encoding.utf8)! as NSObject]

        var keyPairAttr = [NSObject: NSObject]()
        keyPairAttr[kSecAttrKeyType] = kSecAttrKeyTypeRSA
        keyPairAttr[kSecAttrKeySizeInBits] = 2048 as NSObject
        keyPairAttr[kSecPublicKeyAttrs] = publicKeyAttr as NSObject
        keyPairAttr[kSecPrivateKeyAttrs] = privateKeyAttr as NSObject

        statusCode = SecKeyGeneratePair(keyPairAttr as CFDictionary, &amp;publicKey, &amp;privateKey)

        if statusCode == noErr &amp;&amp; publicKey != nil &amp;&amp; privateKey != nil {
            print(""Key pair generated OK"")
            print(""Public Key: \(publicKey!)"")
            print(""Private Key: \(privateKey!)"")
        } else {
            print(""Error generating key pair: \(String(describing: statusCode))"")
        }

    }

    @IBAction func encryptPressed(_ sender: Any) {

    }

    @IBAction func decryptPressed(_ sender: Any) {

    }
</code></pre>

<p>Then I got the keys like below</p>

<h1>Public Key</h1>

<pre><code>&lt;SecKeyRef algorithm id: 1, key type: RSAPublicKey, version: 4, block size: 2048 bits, exponent: {hex: 10001, decimal: 65537}, modulus: B4854E2DA6BA5EBC96C38BD44078D314E4504D130A03018ACD17D0F6679C3B6C9937B5D932A635AEAC32B9245EC400208C1F79932174EF804468D0DCE40DAF5B544CF9E4BCD7C49BA5D0BF3F8246B89B57A3A910CBB5200DCA6145E3EE216CE9C4A3283F1027AA15F7543BD3BEFF35BE24EE709CF8EB12545970AFFDA38CA11410ECA20A8F428D228ED07BF5399A2F55D93D7C143BAFA59A08E4FF932C3A689FA7F3F166B79A43837028319CB383F716B594F317ED6E20D7A8003190A13BC132D5B13708EDAEA3E2012B16CF37437BB617070D9A6DDFE55884A79BD530E4E654B823A8BBBF0AA777C8E46E94BD83E1C59EC6E1D34E69405640C309515243AA8D, addr: 0x608000420e80&gt;
</code></pre>

<h1>Private Key</h1>

<pre><code>&lt;SecKeyRef algorithm id: 1, key type: RSAPrivateKey, version: 4, block size: 2048 bits, addr: 0x60000003b960&gt;
</code></pre>

<p>But I don't want to generate like above.</p>

<p>I except the keys like below</p>

<h1>Public Key</h1>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA0bipoOhkkvPxcsyOzcqsIUeVe0+iwe8W7N4EbHZMgujRERu1TPpy
UcCO0uuKmm1TU09Kl40rRvDbtgB1YcGV3FPnNp3sOyFVsdyZ5bzxZtyyLrSWtj/n
bLnGwaG9xJSwd2R/pTQLzOLV5KldwD2eUb3Z4Z4e9Z8II7eWgGaCLLqbrtEAa05N
EqARckxrzJ1S3j+59h4AQovF72KI90/kRPryT2OGDiVlJ6CTjn2ZnTYcx65X6Rwf
AeJKHZAGhw96j9tXyS+dJcXy4IBUTi3PXw0aEfhHQr/JsSHuMp/8mrhVJEokXb1C
gKDZgJXujpGhCBdztHBAJxLBQMlODg7srwIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<h1>Private Key</h1>

<pre><code>-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAsfxMagVKY5++61Kot0esyhEOesqyQlZNvWbqMBcOoaOAb3pk
LvwaGJ2YtD12u4yDEKcY5rpX7B/2t8GBHf+74NG47zAutf4Gf6qgQRUmIx2b7i4k
WBt3KIifb/Zfs9KVJLhD4007bg1OtXA4kIhhXiuvhajDjDLOEthogF45CkJe+N67
JnH5hVW5CqBxPyRCrWCFbEHcXs5H515JV/Kz1+JVrB2/M03fW751wptO2GdGwsde
ofqQzY+WUzqUihXigIjAVLFRemky3HpwuhzXUJn6A0ZD4tkk1JLstpSSJdBpH+L2
b9QlOitehxFgRsYmto+idpD1XrS9UyUtmpbTuwIDAQABAoIBAQCYvrAJcJ7lnmtn
Ytm96LoF89tcT+Xpfk1bFR43xSHeYAXSJdQiamIu69joHbNuwuib+vsoz5Sy5L+D
9YHMb/MZvoIaa1w6/VUwbQr4r6C6FCgEoP65ymBZnd5OZL6/ASLTj3tbb6VoDe2V
UkiI6TG+cnlAmJOxFsy5aZVNTQ9gmCMS0+AdpTbDsxTPg3y0EKFXeVRyKjq0lO9m
p3G5yHkFjzWWY6s5XHx27gDTt8eXg/un72Qsz1rh5iUnAoxrga0Oco3Yk9DMvMwz
a1I1Lo5fpB6FbTGX3k24heSnLDFEnlBvsBBg0g/n/qgwoZJ81MgG8Q4kAfeScuCI
sYVnHEBpAoGBAOpnrKEkyhk1rXG4Md+z1/odhqx89mV7mF1ttW4IhFcwpJSMohsG
r27Ic87whkpRxz2Mwj3B5WPGne4UkbvniH46n3jEW7ZIUF+ASVWkjMaGJWtOqSLC
I19Snie9WvpREwaCVuvT2l4IeM1WL5gKotBwa3csZgGYH6gcyW5Ipbo/AoGBAMJh
/+WXbohF4+A989q0jYjRRhKwUJAYeK8/AePrx8MnAXnRd09TiqeGn0Xig/RNZ0RE
96/TC1dTIBIHk5aDMy3vQhhYF0KbwcQWmCOnGo1qNTTaWTa3UitFMWf0hO0HuZtp
RyD1YwhHP0W2tiK2GVjCreqIYASCpYKLq5Qq1K+FAoGARk2h8RLfqn/27UyZaMa/
2DxS0BkKrZVMNXlaGQ5k4uGr+wHS/NgcddWZJk/tdwzf/Q3ilDM7YZmIdIemzfy7
a2CZw9bgyuMVeA85733S2xgQ0QZepBYmFcjptnGMf9chJaqh90krDVjtImjfDXLj
MjEFilC+p2vA0uMPZwxS6HECgYAc5dLUQBoHmlRRTwSEvBjagToopxujAHBYpUZT
qwbMpWzbvl89ZM8VLrdY/V7en+89P/+OnRJvjgUTiRrQ4npmVs59rgLvPRamXzGJ
A1u4MFTuoZNnxgMqOaQprzlfv6lBSHpxlOl/HpByfcJAENBd2LtgRZv4r6+JY9hD
M8bgvQKBgCDTSCLj5c1CYyuJMdrz9L5+xLFmrmL48djhK460ZcmcZ/gP808CyXx/
sDneow+JWt7Jb3p5zyUvvq1aDGNSsn4plB2rg7AqtoHcZYyFFZGI/K/b6JZna1yu
FUYOfcanunabxY1wPQxuvR+AEuufBjB0aKg+qkLCCN1HYQtLs+N8
-----END RSA PRIVATE KEY-----
</code></pre>

<ol>
<li>How to convert the keys generated by SecKeyGeneratePair to <code>-----BEGIN RSA PUBLIC KEY----- ................ -----END RSA PUBLIC KEY-----</code>
format</li>
</ol>
","<p>At first you need to obtain raw bitstreams (data) representing your key pair <a href=""https://stackoverflow.com/a/44205179/3441734"">see how to do it here</a></p>

<p>What you need, is just base64 encoded string representing obtained data, with header and footer as is in your example which is generally known as PEM format</p>

<p>How? Check <code>data.base64EncodedString()</code></p>

<p>Warning!!! Exporting private key is ... sorry for the words ... stupid idea</p>
","6432","<ios><swift><swift3><rsa><public-key>","11","-1","3","2018-01-23 12:07:05","45931021","1","9","5729421","","2017-08-29 03:59:41","2017-06-01 11:11:13",""
"44305953","How to generate RSA public and private keys using Swift 3?","<p>I create the key pairs of public and private using SecKeyGeneratePair.</p>

<h1>ViewController</h1>

<pre><code>import UIKit
import Security

class ViewController: UIViewController {

    @IBOutlet weak var textFld: UITextField!
    @IBOutlet weak var encryptedTextFld: UITextView!
    @IBOutlet weak var decryptedTextFld: UITextView!

    var statusCode: OSStatus?
    var publicKey: SecKey?
    var privateKey: SecKey?

    override func viewDidLoad() {
        super.viewDidLoad()

        let publicKeyAttr: [NSObject: NSObject] = [kSecAttrIsPermanent:true as NSObject, kSecAttrApplicationTag:""com.xeoscript.app.RsaFromScrach.public"".data(using: String.Encoding.utf8)! as NSObject]
        let privateKeyAttr: [NSObject: NSObject] = [kSecAttrIsPermanent:true as NSObject, kSecAttrApplicationTag:""com.xeoscript.app.RsaFromScrach.private"".data(using: String.Encoding.utf8)! as NSObject]

        var keyPairAttr = [NSObject: NSObject]()
        keyPairAttr[kSecAttrKeyType] = kSecAttrKeyTypeRSA
        keyPairAttr[kSecAttrKeySizeInBits] = 2048 as NSObject
        keyPairAttr[kSecPublicKeyAttrs] = publicKeyAttr as NSObject
        keyPairAttr[kSecPrivateKeyAttrs] = privateKeyAttr as NSObject

        statusCode = SecKeyGeneratePair(keyPairAttr as CFDictionary, &amp;publicKey, &amp;privateKey)

        if statusCode == noErr &amp;&amp; publicKey != nil &amp;&amp; privateKey != nil {
            print(""Key pair generated OK"")
            print(""Public Key: \(publicKey!)"")
            print(""Private Key: \(privateKey!)"")
        } else {
            print(""Error generating key pair: \(String(describing: statusCode))"")
        }

    }

    @IBAction func encryptPressed(_ sender: Any) {

    }

    @IBAction func decryptPressed(_ sender: Any) {

    }
</code></pre>

<p>Then I got the keys like below</p>

<h1>Public Key</h1>

<pre><code>&lt;SecKeyRef algorithm id: 1, key type: RSAPublicKey, version: 4, block size: 2048 bits, exponent: {hex: 10001, decimal: 65537}, modulus: B4854E2DA6BA5EBC96C38BD44078D314E4504D130A03018ACD17D0F6679C3B6C9937B5D932A635AEAC32B9245EC400208C1F79932174EF804468D0DCE40DAF5B544CF9E4BCD7C49BA5D0BF3F8246B89B57A3A910CBB5200DCA6145E3EE216CE9C4A3283F1027AA15F7543BD3BEFF35BE24EE709CF8EB12545970AFFDA38CA11410ECA20A8F428D228ED07BF5399A2F55D93D7C143BAFA59A08E4FF932C3A689FA7F3F166B79A43837028319CB383F716B594F317ED6E20D7A8003190A13BC132D5B13708EDAEA3E2012B16CF37437BB617070D9A6DDFE55884A79BD530E4E654B823A8BBBF0AA777C8E46E94BD83E1C59EC6E1D34E69405640C309515243AA8D, addr: 0x608000420e80&gt;
</code></pre>

<h1>Private Key</h1>

<pre><code>&lt;SecKeyRef algorithm id: 1, key type: RSAPrivateKey, version: 4, block size: 2048 bits, addr: 0x60000003b960&gt;
</code></pre>

<p>But I don't want to generate like above.</p>

<p>I except the keys like below</p>

<h1>Public Key</h1>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA0bipoOhkkvPxcsyOzcqsIUeVe0+iwe8W7N4EbHZMgujRERu1TPpy
UcCO0uuKmm1TU09Kl40rRvDbtgB1YcGV3FPnNp3sOyFVsdyZ5bzxZtyyLrSWtj/n
bLnGwaG9xJSwd2R/pTQLzOLV5KldwD2eUb3Z4Z4e9Z8II7eWgGaCLLqbrtEAa05N
EqARckxrzJ1S3j+59h4AQovF72KI90/kRPryT2OGDiVlJ6CTjn2ZnTYcx65X6Rwf
AeJKHZAGhw96j9tXyS+dJcXy4IBUTi3PXw0aEfhHQr/JsSHuMp/8mrhVJEokXb1C
gKDZgJXujpGhCBdztHBAJxLBQMlODg7srwIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<h1>Private Key</h1>

<pre><code>-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAsfxMagVKY5++61Kot0esyhEOesqyQlZNvWbqMBcOoaOAb3pk
LvwaGJ2YtD12u4yDEKcY5rpX7B/2t8GBHf+74NG47zAutf4Gf6qgQRUmIx2b7i4k
WBt3KIifb/Zfs9KVJLhD4007bg1OtXA4kIhhXiuvhajDjDLOEthogF45CkJe+N67
JnH5hVW5CqBxPyRCrWCFbEHcXs5H515JV/Kz1+JVrB2/M03fW751wptO2GdGwsde
ofqQzY+WUzqUihXigIjAVLFRemky3HpwuhzXUJn6A0ZD4tkk1JLstpSSJdBpH+L2
b9QlOitehxFgRsYmto+idpD1XrS9UyUtmpbTuwIDAQABAoIBAQCYvrAJcJ7lnmtn
Ytm96LoF89tcT+Xpfk1bFR43xSHeYAXSJdQiamIu69joHbNuwuib+vsoz5Sy5L+D
9YHMb/MZvoIaa1w6/VUwbQr4r6C6FCgEoP65ymBZnd5OZL6/ASLTj3tbb6VoDe2V
UkiI6TG+cnlAmJOxFsy5aZVNTQ9gmCMS0+AdpTbDsxTPg3y0EKFXeVRyKjq0lO9m
p3G5yHkFjzWWY6s5XHx27gDTt8eXg/un72Qsz1rh5iUnAoxrga0Oco3Yk9DMvMwz
a1I1Lo5fpB6FbTGX3k24heSnLDFEnlBvsBBg0g/n/qgwoZJ81MgG8Q4kAfeScuCI
sYVnHEBpAoGBAOpnrKEkyhk1rXG4Md+z1/odhqx89mV7mF1ttW4IhFcwpJSMohsG
r27Ic87whkpRxz2Mwj3B5WPGne4UkbvniH46n3jEW7ZIUF+ASVWkjMaGJWtOqSLC
I19Snie9WvpREwaCVuvT2l4IeM1WL5gKotBwa3csZgGYH6gcyW5Ipbo/AoGBAMJh
/+WXbohF4+A989q0jYjRRhKwUJAYeK8/AePrx8MnAXnRd09TiqeGn0Xig/RNZ0RE
96/TC1dTIBIHk5aDMy3vQhhYF0KbwcQWmCOnGo1qNTTaWTa3UitFMWf0hO0HuZtp
RyD1YwhHP0W2tiK2GVjCreqIYASCpYKLq5Qq1K+FAoGARk2h8RLfqn/27UyZaMa/
2DxS0BkKrZVMNXlaGQ5k4uGr+wHS/NgcddWZJk/tdwzf/Q3ilDM7YZmIdIemzfy7
a2CZw9bgyuMVeA85733S2xgQ0QZepBYmFcjptnGMf9chJaqh90krDVjtImjfDXLj
MjEFilC+p2vA0uMPZwxS6HECgYAc5dLUQBoHmlRRTwSEvBjagToopxujAHBYpUZT
qwbMpWzbvl89ZM8VLrdY/V7en+89P/+OnRJvjgUTiRrQ4npmVs59rgLvPRamXzGJ
A1u4MFTuoZNnxgMqOaQprzlfv6lBSHpxlOl/HpByfcJAENBd2LtgRZv4r6+JY9hD
M8bgvQKBgCDTSCLj5c1CYyuJMdrz9L5+xLFmrmL48djhK460ZcmcZ/gP808CyXx/
sDneow+JWt7Jb3p5zyUvvq1aDGNSsn4plB2rg7AqtoHcZYyFFZGI/K/b6JZna1yu
FUYOfcanunabxY1wPQxuvR+AEuufBjB0aKg+qkLCCN1HYQtLs+N8
-----END RSA PRIVATE KEY-----
</code></pre>

<ol>
<li>How to convert the keys generated by SecKeyGeneratePair to <code>-----BEGIN RSA PUBLIC KEY----- ................ -----END RSA PUBLIC KEY-----</code>
format</li>
</ol>
","<p>Please try this : </p>

<pre><code>let publicKeyAttr: [NSObject: NSObject] = [
            kSecAttrIsPermanent:true as NSObject,
            kSecAttrApplicationTag:""com.xeoscript.app.RsaFromScrach.public"".data(using: String.Encoding.utf8)! as NSObject,
            kSecClass: kSecClassKey, // added this value
            kSecReturnData: kCFBooleanTrue] // added this value
let privateKeyAttr: [NSObject: NSObject] = [
            kSecAttrIsPermanent:true as NSObject,
            kSecAttrApplicationTag:""com.xeoscript.app.RsaFromScrach.private"".data(using: String.Encoding.utf8)! as NSObject,
            kSecClass: kSecClassKey, // added this value
            kSecReturnData: kCFBooleanTrue] // added this value

var keyPairAttr = [NSObject: NSObject]()
keyPairAttr[kSecAttrKeyType] = kSecAttrKeyTypeRSA
keyPairAttr[kSecAttrKeySizeInBits] = 2048 as NSObject
keyPairAttr[kSecPublicKeyAttrs] = publicKeyAttr as NSObject
keyPairAttr[kSecPrivateKeyAttrs] = privateKeyAttr as NSObject

statusCode = SecKeyGeneratePair(keyPairAttr as CFDictionary, &amp;publicKey, &amp;privateKey)

if statusCode == noErr &amp;&amp; publicKey != nil &amp;&amp; privateKey != nil {
    print(""Key pair generated OK"")
    var resultPublicKey: AnyObject?
    var resultPrivateKey: AnyObject?
    let statusPublicKey = SecItemCopyMatching(publicKeyAttr as CFDictionary, &amp;resultPublicKey)
    let statusPrivateKey = SecItemCopyMatching(privateKeyAttr as CFDictionary, &amp;resultPrivateKey)

    if statusPublicKey == noErr {
        if let publicKey = resultPublicKey as? Data {
            print(""Public Key: \((publicKey.base64EncodedString()))"")
        }
    }

    if statusPrivateKey == noErr {
        if let privateKey = resultPrivateKey as? Data {
            print(""Private Key: \((privateKey.base64EncodedString()))"")
        }
    }
} else {
    print(""Error generating key pair: \(String(describing: statusCode))"")
}
</code></pre>
","6432","<ios><swift><swift3><rsa><public-key>","11","6","3","2018-01-23 12:07:05","45931021","1","9","5729421","","2017-08-29 03:59:41","2017-06-01 11:11:13",""
"44305953","How to generate RSA public and private keys using Swift 3?","<p>I create the key pairs of public and private using SecKeyGeneratePair.</p>

<h1>ViewController</h1>

<pre><code>import UIKit
import Security

class ViewController: UIViewController {

    @IBOutlet weak var textFld: UITextField!
    @IBOutlet weak var encryptedTextFld: UITextView!
    @IBOutlet weak var decryptedTextFld: UITextView!

    var statusCode: OSStatus?
    var publicKey: SecKey?
    var privateKey: SecKey?

    override func viewDidLoad() {
        super.viewDidLoad()

        let publicKeyAttr: [NSObject: NSObject] = [kSecAttrIsPermanent:true as NSObject, kSecAttrApplicationTag:""com.xeoscript.app.RsaFromScrach.public"".data(using: String.Encoding.utf8)! as NSObject]
        let privateKeyAttr: [NSObject: NSObject] = [kSecAttrIsPermanent:true as NSObject, kSecAttrApplicationTag:""com.xeoscript.app.RsaFromScrach.private"".data(using: String.Encoding.utf8)! as NSObject]

        var keyPairAttr = [NSObject: NSObject]()
        keyPairAttr[kSecAttrKeyType] = kSecAttrKeyTypeRSA
        keyPairAttr[kSecAttrKeySizeInBits] = 2048 as NSObject
        keyPairAttr[kSecPublicKeyAttrs] = publicKeyAttr as NSObject
        keyPairAttr[kSecPrivateKeyAttrs] = privateKeyAttr as NSObject

        statusCode = SecKeyGeneratePair(keyPairAttr as CFDictionary, &amp;publicKey, &amp;privateKey)

        if statusCode == noErr &amp;&amp; publicKey != nil &amp;&amp; privateKey != nil {
            print(""Key pair generated OK"")
            print(""Public Key: \(publicKey!)"")
            print(""Private Key: \(privateKey!)"")
        } else {
            print(""Error generating key pair: \(String(describing: statusCode))"")
        }

    }

    @IBAction func encryptPressed(_ sender: Any) {

    }

    @IBAction func decryptPressed(_ sender: Any) {

    }
</code></pre>

<p>Then I got the keys like below</p>

<h1>Public Key</h1>

<pre><code>&lt;SecKeyRef algorithm id: 1, key type: RSAPublicKey, version: 4, block size: 2048 bits, exponent: {hex: 10001, decimal: 65537}, modulus: B4854E2DA6BA5EBC96C38BD44078D314E4504D130A03018ACD17D0F6679C3B6C9937B5D932A635AEAC32B9245EC400208C1F79932174EF804468D0DCE40DAF5B544CF9E4BCD7C49BA5D0BF3F8246B89B57A3A910CBB5200DCA6145E3EE216CE9C4A3283F1027AA15F7543BD3BEFF35BE24EE709CF8EB12545970AFFDA38CA11410ECA20A8F428D228ED07BF5399A2F55D93D7C143BAFA59A08E4FF932C3A689FA7F3F166B79A43837028319CB383F716B594F317ED6E20D7A8003190A13BC132D5B13708EDAEA3E2012B16CF37437BB617070D9A6DDFE55884A79BD530E4E654B823A8BBBF0AA777C8E46E94BD83E1C59EC6E1D34E69405640C309515243AA8D, addr: 0x608000420e80&gt;
</code></pre>

<h1>Private Key</h1>

<pre><code>&lt;SecKeyRef algorithm id: 1, key type: RSAPrivateKey, version: 4, block size: 2048 bits, addr: 0x60000003b960&gt;
</code></pre>

<p>But I don't want to generate like above.</p>

<p>I except the keys like below</p>

<h1>Public Key</h1>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA0bipoOhkkvPxcsyOzcqsIUeVe0+iwe8W7N4EbHZMgujRERu1TPpy
UcCO0uuKmm1TU09Kl40rRvDbtgB1YcGV3FPnNp3sOyFVsdyZ5bzxZtyyLrSWtj/n
bLnGwaG9xJSwd2R/pTQLzOLV5KldwD2eUb3Z4Z4e9Z8II7eWgGaCLLqbrtEAa05N
EqARckxrzJ1S3j+59h4AQovF72KI90/kRPryT2OGDiVlJ6CTjn2ZnTYcx65X6Rwf
AeJKHZAGhw96j9tXyS+dJcXy4IBUTi3PXw0aEfhHQr/JsSHuMp/8mrhVJEokXb1C
gKDZgJXujpGhCBdztHBAJxLBQMlODg7srwIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<h1>Private Key</h1>

<pre><code>-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAsfxMagVKY5++61Kot0esyhEOesqyQlZNvWbqMBcOoaOAb3pk
LvwaGJ2YtD12u4yDEKcY5rpX7B/2t8GBHf+74NG47zAutf4Gf6qgQRUmIx2b7i4k
WBt3KIifb/Zfs9KVJLhD4007bg1OtXA4kIhhXiuvhajDjDLOEthogF45CkJe+N67
JnH5hVW5CqBxPyRCrWCFbEHcXs5H515JV/Kz1+JVrB2/M03fW751wptO2GdGwsde
ofqQzY+WUzqUihXigIjAVLFRemky3HpwuhzXUJn6A0ZD4tkk1JLstpSSJdBpH+L2
b9QlOitehxFgRsYmto+idpD1XrS9UyUtmpbTuwIDAQABAoIBAQCYvrAJcJ7lnmtn
Ytm96LoF89tcT+Xpfk1bFR43xSHeYAXSJdQiamIu69joHbNuwuib+vsoz5Sy5L+D
9YHMb/MZvoIaa1w6/VUwbQr4r6C6FCgEoP65ymBZnd5OZL6/ASLTj3tbb6VoDe2V
UkiI6TG+cnlAmJOxFsy5aZVNTQ9gmCMS0+AdpTbDsxTPg3y0EKFXeVRyKjq0lO9m
p3G5yHkFjzWWY6s5XHx27gDTt8eXg/un72Qsz1rh5iUnAoxrga0Oco3Yk9DMvMwz
a1I1Lo5fpB6FbTGX3k24heSnLDFEnlBvsBBg0g/n/qgwoZJ81MgG8Q4kAfeScuCI
sYVnHEBpAoGBAOpnrKEkyhk1rXG4Md+z1/odhqx89mV7mF1ttW4IhFcwpJSMohsG
r27Ic87whkpRxz2Mwj3B5WPGne4UkbvniH46n3jEW7ZIUF+ASVWkjMaGJWtOqSLC
I19Snie9WvpREwaCVuvT2l4IeM1WL5gKotBwa3csZgGYH6gcyW5Ipbo/AoGBAMJh
/+WXbohF4+A989q0jYjRRhKwUJAYeK8/AePrx8MnAXnRd09TiqeGn0Xig/RNZ0RE
96/TC1dTIBIHk5aDMy3vQhhYF0KbwcQWmCOnGo1qNTTaWTa3UitFMWf0hO0HuZtp
RyD1YwhHP0W2tiK2GVjCreqIYASCpYKLq5Qq1K+FAoGARk2h8RLfqn/27UyZaMa/
2DxS0BkKrZVMNXlaGQ5k4uGr+wHS/NgcddWZJk/tdwzf/Q3ilDM7YZmIdIemzfy7
a2CZw9bgyuMVeA85733S2xgQ0QZepBYmFcjptnGMf9chJaqh90krDVjtImjfDXLj
MjEFilC+p2vA0uMPZwxS6HECgYAc5dLUQBoHmlRRTwSEvBjagToopxujAHBYpUZT
qwbMpWzbvl89ZM8VLrdY/V7en+89P/+OnRJvjgUTiRrQ4npmVs59rgLvPRamXzGJ
A1u4MFTuoZNnxgMqOaQprzlfv6lBSHpxlOl/HpByfcJAENBd2LtgRZv4r6+JY9hD
M8bgvQKBgCDTSCLj5c1CYyuJMdrz9L5+xLFmrmL48djhK460ZcmcZ/gP808CyXx/
sDneow+JWt7Jb3p5zyUvvq1aDGNSsn4plB2rg7AqtoHcZYyFFZGI/K/b6JZna1yu
FUYOfcanunabxY1wPQxuvR+AEuufBjB0aKg+qkLCCN1HYQtLs+N8
-----END RSA PRIVATE KEY-----
</code></pre>

<ol>
<li>How to convert the keys generated by SecKeyGeneratePair to <code>-----BEGIN RSA PUBLIC KEY----- ................ -----END RSA PUBLIC KEY-----</code>
format</li>
</ol>
","<p>You need to convert public/private key pair for external representation using <code>SecKeyCopyExternalRepresentation</code> method and then convert your Data into base64 encoded string which is just PEM format, using <code>base64EncodedString(options: )</code> method. <a href=""https://stackoverflow.com/a/45916908/5251507"">Refer the code here</a></p>
","6432","<ios><swift><swift3><rsa><public-key>","11","0","3","2018-01-23 12:07:05","45931021","1","9","5729421","","2017-08-29 03:59:41","2017-06-01 11:11:13",""
"3396657","Ruby - hosting private gems","<p>By any chance, is there any place it's possible to host private ruby gems?
So I could allow it to be pulled only for specific places by using public key or something like that?</p>

<p>Thanks</p>
","<p>There is a few options for you...</p>

<h3>GEM SERVER</h3>

<p>Install the gem on any server you want to distribute it from. Then run <code>gem server</code> on the machine. This will start up a small gem server that can be queried by anyone. Then just add the new gem source to the client machines. <code>gem sources -a &lt;server&gt;</code>. </p>

<ul>
<li>Pros: Extremely easy to setup. Can be launched on any port.</li>
<li>Cons: Doesn't offer key based authentication.</li>
</ul>

<h3>GITOSIS</h3>

<p>Setup a gitosis server and store the gem source code on there. Then just pull from the repo and build the gem when you need to update it. Yes it is an extra couple of steps to build and install the gem, however you will get key based authentication for better security.</p>

<ul>
<li>Pros: Offers key based authentication</li>
<li>Cons: Have to pull the source, build, then install the gem on each update. You also have to actually setup the gitosis server.</li>
</ul>

<h3>GITHUB</h3>

<p>Exact same thing as gitosis, but you have to pay to make it private. This requires no setup if you can afford it.</p>

<ul>
<li>Pros: Offers key based authentication</li>
<li>Cons: Have to pull the source, build, then install the gem on each update. Costs a little money.</li>
</ul>

<p>Unfortunately, none of the major gem services do exactly what you need. Github stopped building gems, and RubyGems doesn't offer any private gem hosting. Hopefully one of the tools above will work well enough for you. Personally I would just go with the gem server option, then lock the machine down by IP, or some other access restriction. I know its not perfect, but it works and is quick/easy to setup.</p>
","6348","<rubygems><hosting><private><public-key>","17","11","3","2012-05-10 04:21:26","5287750","3","2","","","","2010-08-03 12:58:19",""
"3396657","Ruby - hosting private gems","<p>By any chance, is there any place it's possible to host private ruby gems?
So I could allow it to be pulled only for specific places by using public key or something like that?</p>

<p>Thanks</p>
","<p>Check out <a href=""http://tomlea.co.uk/posts/gem-in-a-box/"" rel=""noreferrer"">Gem in a Box</a>.</p>
","6348","<rubygems><hosting><private><public-key>","17","9","3","2012-05-10 04:21:26","5287750","3","2","","","","2010-08-03 12:58:19",""
"3396657","Ruby - hosting private gems","<p>By any chance, is there any place it's possible to host private ruby gems?
So I could allow it to be pulled only for specific places by using public key or something like that?</p>

<p>Thanks</p>
","<p>Take a look at <a href=""http://www.gemfury.com"">Gemfury</a> if you prefer a cloud solution.</p>

<p><em>Disclaimer: I work on this</em></p>
","6348","<rubygems><hosting><private><public-key>","17","6","3","2012-05-10 04:21:26","5287750","3","2","","","","2010-08-03 12:58:19",""
"3972534","DSA: What can a hacker do with *just* a public key?","<p>The shareware registration system I'm currently developing embeds the public DSA key in the executable itself, and the private key resides on a server. (For the sake of discussion let's assume that the server is 100% secure, and there is <em>no way</em> for anybody to get their hands on the private key.)</p>

<p>Whenever the program is purchased, the server generates a license for the user by signing the user's name with the private key. That license is then emailed to the user. Once the user manually enters their name and license into the shareware application it is verified by the public key embedded in the application to be a valid or invalid license.</p>

<p>However, it would be fairly trivial for a determined person with the right ""know-how"" to disassemble the executable and retrieve the public key.</p>

<p>My question here is, what could they do with it? Is a public key, by itself, completely innocuous? Is the public key enough information to reverse engineer a key generator?</p>

<p>Curious minds want to know. Thanks in advance!</p>
","<p>The public key should get them nothing useful. However, if the check is easily found they might be able to simply circumvent it and patch in a test that always succeeds without ever bothering to verify the license against the public key.</p>
","6303","<security><registration><signing><public-key><dsa>","18","24","8","2015-10-27 15:25:31","3972569","1","1","278005","","2010-10-20 05:12:23","2010-10-19 20:34:29",""
"3972534","DSA: What can a hacker do with *just* a public key?","<p>The shareware registration system I'm currently developing embeds the public DSA key in the executable itself, and the private key resides on a server. (For the sake of discussion let's assume that the server is 100% secure, and there is <em>no way</em> for anybody to get their hands on the private key.)</p>

<p>Whenever the program is purchased, the server generates a license for the user by signing the user's name with the private key. That license is then emailed to the user. Once the user manually enters their name and license into the shareware application it is verified by the public key embedded in the application to be a valid or invalid license.</p>

<p>However, it would be fairly trivial for a determined person with the right ""know-how"" to disassemble the executable and retrieve the public key.</p>

<p>My question here is, what could they do with it? Is a public key, by itself, completely innocuous? Is the public key enough information to reverse engineer a key generator?</p>

<p>Curious minds want to know. Thanks in advance!</p>
","<p>Assuming an as-yet-unbroken encryption method is being used, the public key can not be used to determine the private key. It is meant to be <em>truly public</em>; known by anyone.</p>
","6303","<security><registration><signing><public-key><dsa>","18","2","8","2015-10-27 15:25:31","3972569","1","1","278005","","2010-10-20 05:12:23","2010-10-19 20:34:29",""
"3972534","DSA: What can a hacker do with *just* a public key?","<p>The shareware registration system I'm currently developing embeds the public DSA key in the executable itself, and the private key resides on a server. (For the sake of discussion let's assume that the server is 100% secure, and there is <em>no way</em> for anybody to get their hands on the private key.)</p>

<p>Whenever the program is purchased, the server generates a license for the user by signing the user's name with the private key. That license is then emailed to the user. Once the user manually enters their name and license into the shareware application it is verified by the public key embedded in the application to be a valid or invalid license.</p>

<p>However, it would be fairly trivial for a determined person with the right ""know-how"" to disassemble the executable and retrieve the public key.</p>

<p>My question here is, what could they do with it? Is a public key, by itself, completely innocuous? Is the public key enough information to reverse engineer a key generator?</p>

<p>Curious minds want to know. Thanks in advance!</p>
","<p>Just having the public key is not enough information to do anything useful with.</p>

<p>The only thing that could be done is someone could encrypt a message using the public key that could only be decrypted with the private key.  But if the private key is only on the server, this will not do anything.</p>

<p>Any other attack would require trying to calculate the private key, which will not be sped up at all by having the public key.</p>
","6303","<security><registration><signing><public-key><dsa>","18","1","8","2015-10-27 15:25:31","3972569","1","1","278005","","2010-10-20 05:12:23","2010-10-19 20:34:29",""
"3972534","DSA: What can a hacker do with *just* a public key?","<p>The shareware registration system I'm currently developing embeds the public DSA key in the executable itself, and the private key resides on a server. (For the sake of discussion let's assume that the server is 100% secure, and there is <em>no way</em> for anybody to get their hands on the private key.)</p>

<p>Whenever the program is purchased, the server generates a license for the user by signing the user's name with the private key. That license is then emailed to the user. Once the user manually enters their name and license into the shareware application it is verified by the public key embedded in the application to be a valid or invalid license.</p>

<p>However, it would be fairly trivial for a determined person with the right ""know-how"" to disassemble the executable and retrieve the public key.</p>

<p>My question here is, what could they do with it? Is a public key, by itself, completely innocuous? Is the public key enough information to reverse engineer a key generator?</p>

<p>Curious minds want to know. Thanks in advance!</p>
","<p>A public key by itself would let them decrypt any encrypted information sent out by the server. That's it. Going from public key to private key is <em>exceptionally</em> hard; that's how public key cryptography works. (By “exceptionally” I mean that it's designed to be resistant to well-funded government efforts; if it keeps the NSA from cracking you, it'll be sure good enough for stopping Joe Blow.)</p>

<p>Note that it doesn't help with DRM, which it sounds a bit like you're trying to do. DRM is just plain broken by design; if the attacker has the information and the key to unlock it in devices local to him, it's already game over. If you give a key to an attacker, it might as well be public since he's sure not going to be willing to keep it secret…</p>
","6303","<security><registration><signing><public-key><dsa>","18","7","8","2015-10-27 15:25:31","3972569","1","1","278005","","2010-10-20 05:12:23","2010-10-19 20:34:29",""
"3972534","DSA: What can a hacker do with *just* a public key?","<p>The shareware registration system I'm currently developing embeds the public DSA key in the executable itself, and the private key resides on a server. (For the sake of discussion let's assume that the server is 100% secure, and there is <em>no way</em> for anybody to get their hands on the private key.)</p>

<p>Whenever the program is purchased, the server generates a license for the user by signing the user's name with the private key. That license is then emailed to the user. Once the user manually enters their name and license into the shareware application it is verified by the public key embedded in the application to be a valid or invalid license.</p>

<p>However, it would be fairly trivial for a determined person with the right ""know-how"" to disassemble the executable and retrieve the public key.</p>

<p>My question here is, what could they do with it? Is a public key, by itself, completely innocuous? Is the public key enough information to reverse engineer a key generator?</p>

<p>Curious minds want to know. Thanks in advance!</p>
","<p>In asymmetric cryptography it is safe to give your public key to an attacker. However, this value, along with a signature or cipher text produced by a private key can be used in <a href=""http://en.wikipedia.org/wiki/Brute_force_attack"" rel=""nofollow"">Trivial Attack</a> to obtain the corresponding private key. </p>
","6303","<security><registration><signing><public-key><dsa>","18","1","8","2015-10-27 15:25:31","3972569","1","1","278005","","2010-10-20 05:12:23","2010-10-19 20:34:29",""
"3972534","DSA: What can a hacker do with *just* a public key?","<p>The shareware registration system I'm currently developing embeds the public DSA key in the executable itself, and the private key resides on a server. (For the sake of discussion let's assume that the server is 100% secure, and there is <em>no way</em> for anybody to get their hands on the private key.)</p>

<p>Whenever the program is purchased, the server generates a license for the user by signing the user's name with the private key. That license is then emailed to the user. Once the user manually enters their name and license into the shareware application it is verified by the public key embedded in the application to be a valid or invalid license.</p>

<p>However, it would be fairly trivial for a determined person with the right ""know-how"" to disassemble the executable and retrieve the public key.</p>

<p>My question here is, what could they do with it? Is a public key, by itself, completely innocuous? Is the public key enough information to reverse engineer a key generator?</p>

<p>Curious minds want to know. Thanks in advance!</p>
","<p>The point is that this sort of encryption is designed to protect the content of the message and to verify sender authenticity which in this case is clearly known to the user i.e. Name and Vendor etc. Much nicer would be to protect a section of the code with this sort of encryption such that crucial bits of code stays garbled until the proper key is used.</p>

<p>Once the key is used however the user can decrypt and make copies of the software. Fully protected software is fully unusable. Though unrelated <a href=""http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en//pubs/archive/32872.pdf"" rel=""nofollow"">this</a> is an interesting read regarding protecting things.</p>
","6303","<security><registration><signing><public-key><dsa>","18","0","8","2015-10-27 15:25:31","3972569","1","1","278005","","2010-10-20 05:12:23","2010-10-19 20:34:29",""
"3972534","DSA: What can a hacker do with *just* a public key?","<p>The shareware registration system I'm currently developing embeds the public DSA key in the executable itself, and the private key resides on a server. (For the sake of discussion let's assume that the server is 100% secure, and there is <em>no way</em> for anybody to get their hands on the private key.)</p>

<p>Whenever the program is purchased, the server generates a license for the user by signing the user's name with the private key. That license is then emailed to the user. Once the user manually enters their name and license into the shareware application it is verified by the public key embedded in the application to be a valid or invalid license.</p>

<p>However, it would be fairly trivial for a determined person with the right ""know-how"" to disassemble the executable and retrieve the public key.</p>

<p>My question here is, what could they do with it? Is a public key, by itself, completely innocuous? Is the public key enough information to reverse engineer a key generator?</p>

<p>Curious minds want to know. Thanks in advance!</p>
","<p>Public keys are used everywhere -- logon forms, security of banking transactions, client-side authentication etc. So the short answer is that you shouldn't worry, cause lots of other, smarter people have looked at this problem and accepted the distribution of public keys to endpoints.</p>

<p>What can people tell from your public key? They would obviously know a key name and key length. I assume that the key is part of a certificate, which could also contain some details about your company and website URL.</p>

<p>My questions to you are:</p>

<p>1) Why are you worried about a public key in an executable? Any half-decent cracker would just change your executable to bypass the public key check altogether. The fact that the encryption is strong is meaningless when you're giving a binary to the client that can be modified.</p>

<p>2) Are you aware of the mess you may be getting yourself into? There's nothing inherently wrong with using public key encryption to secure a binary, but you may end up with problems as the system develops. Things such as expired keys, key roll-overs and key issuance (I believe this is a tool you're developing to sell) can become a major pain. And, yet, you'll still be stuck with the reality that your bigger challenge is stopping crackers from just rerouting the binary to avoid your security check altogether.</p>
","6303","<security><registration><signing><public-key><dsa>","18","2","8","2015-10-27 15:25:31","3972569","1","1","278005","","2010-10-20 05:12:23","2010-10-19 20:34:29",""
"3972534","DSA: What can a hacker do with *just* a public key?","<p>The shareware registration system I'm currently developing embeds the public DSA key in the executable itself, and the private key resides on a server. (For the sake of discussion let's assume that the server is 100% secure, and there is <em>no way</em> for anybody to get their hands on the private key.)</p>

<p>Whenever the program is purchased, the server generates a license for the user by signing the user's name with the private key. That license is then emailed to the user. Once the user manually enters their name and license into the shareware application it is verified by the public key embedded in the application to be a valid or invalid license.</p>

<p>However, it would be fairly trivial for a determined person with the right ""know-how"" to disassemble the executable and retrieve the public key.</p>

<p>My question here is, what could they do with it? Is a public key, by itself, completely innocuous? Is the public key enough information to reverse engineer a key generator?</p>

<p>Curious minds want to know. Thanks in advance!</p>
","<p>I disagree that the public key is not useful. I generate my own public and private key pair and let us assume that I find the bits of the public key in the executable. I change the the public key to my public key. Now I can sign anything with my private key, the program will accept it.</p>
","6303","<security><registration><signing><public-key><dsa>","18","0","8","2015-10-27 15:25:31","3972569","1","1","278005","","2010-10-20 05:12:23","2010-10-19 20:34:29",""
"4508779","How to read public key from PFX file in java","<p>I am able to read private key from PFX file but not public key. I am using following code to read public key.</p>

<pre><code>InputStream inStream = new FileInputStream(certFile); 
CertificateFactory cf = CertificateFactory.getInstance(""X.509""); 
BufferedInputStream bis = new BufferedInputStream(inStream);
// if (bis.available() &gt; 0) {
java.security.cert.Certificate cert = cf.generateCertificate(bis);
System.out.println(""This part is not getting printed in case of PFX file"");
// }
puk = (PublicKey) cert.getPublicKey();
</code></pre>

<p>This code is working properly when i read from .cer file. Please help</p>
","<p>Use the <a href=""http://download.oracle.com/javase/6/docs/api/java/security/KeyStore.html"" rel=""nofollow""><code>KeyStore</code></a> class and treat the file as a PKCS#12 KeyStore. Use <a href=""http://download.oracle.com/javase/6/docs/api/java/security/KeyStore.html#getInstance%28java.lang.String%29"" rel=""nofollow""><code>KeyStore.getInstance(""PKCS12"")</code></a> to get an instance of a PKCS12 keystore.</p>

<p>The Javadocs for KeyStore contain sample code.</p>
","6239","<java><public-key><digital-certificate><public-key-encryption>","0","3","1","2010-12-28 10:35:02","","1","1","","","","2010-12-22 11:38:53",""
"22100796","How does Android devices get developers' public keys?","<p>The <strong>Android</strong> system requires that all installed applications be digitally signed with a certificate whose private key is held by the application's developer. How specifically does the public key be distributed to client Android devices? Is the public key contained in apk when developers release the app? If so, where is the key stored?</p>

<p>Or does <strong>Android</strong> market,e.g. Google play, hold a list of developer id coupled with corresponding public key and push the right key to client devices when an app is downloaded?</p>

<p>Is there any docs convey this information?</p>

<p>Thanks a lot for any inputs.</p>
","<p>You gotta upload them on the play store before publishing.</p>

<p>It is then checked against the signature of your apk : 
<a href=""http://developer.android.com/google/play/licensing/adding-licensing.html#account-key"" rel=""nofollow"">http://developer.android.com/google/play/licensing/adding-licensing.html#account-key</a></p>

<hr>

<p>If you are talking about the key to verify apps on install : you can use any key to sign an app and install it via adb. <em>But</em>, you will have to use the same key to re-install an app. In that case, keys are not checked against a global repo like with Google Play, they are just checked locally.</p>

<p>For testing, things are a bit different, I believe it's due to interaction of instrumentation runner and the code under test, they have to be run in the same process so, if you install an app's test package with a debug certificate, then you can't install the app using a release certificate, either you install the app with debug certificate as well, or you uninstall the tests.</p>

<p>Some details here : <a href=""http://developer.android.com/tools/publishing/app-signing.html"" rel=""nofollow"">http://developer.android.com/tools/publishing/app-signing.html</a></p>
","6230","<android><certificate><public-key><android-framework>","8","1","4","2014-11-16 17:13:15","22133199","0","","2846106","","2014-02-28 18:16:42","2014-02-28 16:39:29",""
"22100796","How does Android devices get developers' public keys?","<p>The <strong>Android</strong> system requires that all installed applications be digitally signed with a certificate whose private key is held by the application's developer. How specifically does the public key be distributed to client Android devices? Is the public key contained in apk when developers release the app? If so, where is the key stored?</p>

<p>Or does <strong>Android</strong> market,e.g. Google play, hold a list of developer id coupled with corresponding public key and push the right key to client devices when an app is downloaded?</p>

<p>Is there any docs convey this information?</p>

<p>Thanks a lot for any inputs.</p>
","<p>Here is an example, follow steps 1 - 8 in ""Getting a Certificate"".
This isn't just a Google API tutorial, it covers the key signing that you need in that one section i mentioned.<br>
There's a link there also in regards to Debug and Release keys for Android development that provides more info on the Android development site.</p>

<p><a href=""http://www.digitalopium.com/android-google-maps-api-tutorial/"" rel=""nofollow"">LINK:  Android Signing Keys and Google Map API Key</a></p>
","6230","<android><certificate><public-key><android-framework>","8","1","4","2014-11-16 17:13:15","22133199","0","","2846106","","2014-02-28 18:16:42","2014-02-28 16:39:29",""
"22100796","How does Android devices get developers' public keys?","<p>The <strong>Android</strong> system requires that all installed applications be digitally signed with a certificate whose private key is held by the application's developer. How specifically does the public key be distributed to client Android devices? Is the public key contained in apk when developers release the app? If so, where is the key stored?</p>

<p>Or does <strong>Android</strong> market,e.g. Google play, hold a list of developer id coupled with corresponding public key and push the right key to client devices when an app is downloaded?</p>

<p>Is there any docs convey this information?</p>

<p>Thanks a lot for any inputs.</p>
","<p>The public key is distributed within the apk file. If you unarchive an apk file you can find there a special folder called META-INF where all information about the signature is contained. Basically, you need to explore files with extensions *.RSA and *.DSA, which contain signature of the package along with public key.</p>

<p>You can read these two article (<a href=""http://nelenkov.blogspot.it/2013/04/android-code-signing.html"">one</a>, <a href=""http://nelenkov.blogspot.it/2013/05/code-signing-in-androids-security-model.html"">two</a>) to understand the process</p>
","6230","<android><certificate><public-key><android-framework>","8","8","4","2014-11-16 17:13:15","22133199","0","","2846106","","2014-02-28 18:16:42","2014-02-28 16:39:29",""
"22100796","How does Android devices get developers' public keys?","<p>The <strong>Android</strong> system requires that all installed applications be digitally signed with a certificate whose private key is held by the application's developer. How specifically does the public key be distributed to client Android devices? Is the public key contained in apk when developers release the app? If so, where is the key stored?</p>

<p>Or does <strong>Android</strong> market,e.g. Google play, hold a list of developer id coupled with corresponding public key and push the right key to client devices when an app is downloaded?</p>

<p>Is there any docs convey this information?</p>

<p>Thanks a lot for any inputs.</p>
","<p><a href=""http://developer.android.com/google/play/licensing/adding-licensing.html#account-key"" rel=""nofollow"">http://developer.android.com/google/play/licensing/adding-licensing.html#account-key</a> </p>

<p>Some parts of the link will resolve your question
Embed your public key for licensing</p>

<p>For each application, the Google Play service automatically generates a 2048-bit RSA public/private key pair that is used for licensing and in-app billing. The key pair is uniquely associated with the application. Although associated with the application, the key pair is not the same as the key that you use to sign your applications (or derived from it).</p>

<p>The Google Play Developer Console exposes the public key for licensing to any developer signed in to the Developer Console, but it keeps the private key hidden from all users in a secure location. When an application requests a license check for an application published in your account, the licensing server signs the license response using the private key of your application's key pair. When the LVL receives the response, it uses the public key provided by the application to verify the signature of the license response.</p>

<p>To add licensing to an application, you must obtain your application's public key for licensing and copy it into your application. Here's how to find your application's public key for licensing:</p>

<p>Go to the Google Play Developer Console and sign in. Make sure that you sign in to the account from which the application you are licensing is published (or will be published).
In the application details page, locate the Services &amp; APIs link and click it.
In the Services &amp; APIs page, locate the Licensing &amp; In-App Billing section. Your public key for licensing is given in the Your License Key For This Application field.
To add the public key to your application, simply copy/paste the key string from the field into your application as the value of the String variable BASE64_PUBLIC_KEY. When you are copying, make sure that you have selected the entire key string, without omitting any characters.</p>

<p>Here's an example from the LVL sample application:</p>

<pre><code>public class MainActivity extends Activity {
    private static final String BASE64_PUBLIC_KEY = ""MIIBIjANBgkqhkiG ... ""; //truncated for this example
...
}
</code></pre>
","6230","<android><certificate><public-key><android-framework>","8","2","4","2014-11-16 17:13:15","22133199","0","","2846106","","2014-02-28 18:16:42","2014-02-28 16:39:29",""
"1031772","Public key or Diffie-Hellman Key Exchange Algorithm","<p>Consider and client server scenario and you got two options:</p>

<ol>
<li>You can include Server's Public Key
in Client and perform the exchange.</li>
<li>You can use Diffie Hellman
KeyExchange Algorithm to handshake
and then exchange the key.</li>
</ol>

<p>Which one is more secure way?
also if public key will come from store say from Client CA store? would it be more secure instead of binding it in Client app?</p>

<p>The deployment will be done via an installer, verifying the version on each run. </p>
","<p>With (only) DH key exchange, the client has no way to know that it is really the server he is talking to.</p>

<p>So the conversation would be secure from eavesdroppers, but someone could pretend to be the server and compromise the client.</p>
","6134","<c++><wcf><security><client-server><public-key>","0","3","6","2010-02-25 12:14:07","1034366","6","","105533","","2009-06-24 05:25:18","2009-06-23 10:33:55",""
"1031772","Public key or Diffie-Hellman Key Exchange Algorithm","<p>Consider and client server scenario and you got two options:</p>

<ol>
<li>You can include Server's Public Key
in Client and perform the exchange.</li>
<li>You can use Diffie Hellman
KeyExchange Algorithm to handshake
and then exchange the key.</li>
</ol>

<p>Which one is more secure way?
also if public key will come from store say from Client CA store? would it be more secure instead of binding it in Client app?</p>

<p>The deployment will be done via an installer, verifying the version on each run. </p>
","<p>An embedded key can be replaced. Generally speaking, if the client's machine is not secured by non-software means, you cannot prevent hacking of your client by a sufficiently motivated attacker. Even a <a href=""http://en.wikipedia.org/wiki/Trusted_Platform_Module"" rel=""nofollow noreferrer""><code>TPM</code></a> is <a href=""http://en.wikipedia.org/wiki/Cold_boot_attack"" rel=""nofollow noreferrer"">no panacea</a>. The question becomes one of trade-off: attackers' man-hours vs. utility (profit, fame &amp;c) gained. The only really secure way to license a program which does computations is to perform all licensable computations on a server you physically control; <code>https</code> or <code>SSL</code> can be made sufficiently secure by choosing appropriate key lengths, hashing schemes, ciphers &amp;c (a subject of which I know little).</p>

<p>The principle here is actually rather simple: you need to engineer a situation in which it will be in your clients' best interests to protect their passwords/license keys/data/whatever. E.g. if you have a computation server and charge your clients for server time, client keys are proxies to owners' bank accounts.</p>
","6134","<c++><wcf><security><client-server><public-key>","0","1","6","2010-02-25 12:14:07","1034366","6","","105533","","2009-06-24 05:25:18","2009-06-23 10:33:55",""
"1031772","Public key or Diffie-Hellman Key Exchange Algorithm","<p>Consider and client server scenario and you got two options:</p>

<ol>
<li>You can include Server's Public Key
in Client and perform the exchange.</li>
<li>You can use Diffie Hellman
KeyExchange Algorithm to handshake
and then exchange the key.</li>
</ol>

<p>Which one is more secure way?
also if public key will come from store say from Client CA store? would it be more secure instead of binding it in Client app?</p>

<p>The deployment will be done via an installer, verifying the version on each run. </p>
","<p>Don't.</p>

<p>If you need to solve this kind of problem in production code, have an expert do it. There are so many subtle pitfalls in cryptography that chances are you will come a cropper.</p>
","6134","<c++><wcf><security><client-server><public-key>","0","2","6","2010-02-25 12:14:07","1034366","6","","105533","","2009-06-24 05:25:18","2009-06-23 10:33:55",""
"1031772","Public key or Diffie-Hellman Key Exchange Algorithm","<p>Consider and client server scenario and you got two options:</p>

<ol>
<li>You can include Server's Public Key
in Client and perform the exchange.</li>
<li>You can use Diffie Hellman
KeyExchange Algorithm to handshake
and then exchange the key.</li>
</ol>

<p>Which one is more secure way?
also if public key will come from store say from Client CA store? would it be more secure instead of binding it in Client app?</p>

<p>The deployment will be done via an installer, verifying the version on each run. </p>
","<p>As Tobias mentioned above it is better if you don't roll your own protocol.  I would suggest to use an implementation of TLS, or at least model your protocol on TLS.  TLS provides options for both Diffie-Hellman and Certificate based key exchange.</p>

<p>Take a look at: <a href=""http://en.wikipedia.org/wiki/Secure_Sockets_Layer"" rel=""nofollow noreferrer"">http://en.wikipedia.org/wiki/Secure_Sockets_Layer</a></p>
","6134","<c++><wcf><security><client-server><public-key>","0","0","6","2010-02-25 12:14:07","1034366","6","","105533","","2009-06-24 05:25:18","2009-06-23 10:33:55",""
"1031772","Public key or Diffie-Hellman Key Exchange Algorithm","<p>Consider and client server scenario and you got two options:</p>

<ol>
<li>You can include Server's Public Key
in Client and perform the exchange.</li>
<li>You can use Diffie Hellman
KeyExchange Algorithm to handshake
and then exchange the key.</li>
</ol>

<p>Which one is more secure way?
also if public key will come from store say from Client CA store? would it be more secure instead of binding it in Client app?</p>

<p>The deployment will be done via an installer, verifying the version on each run. </p>
","<p>With the public key scenario the client must be generating the key, there is no way you can have any confidence this key is securely generated (someone could get access to the system and change the key generator to always use the same value, increment the previous value by one, whatever, said attacker can then eves drop on your communications for ever more). Public key crypto was not designed for this purpose. </p>

<p>Diffie-Hellman would be better but as Tobias said if you roll your own you'll probably leave an attack.</p>
","6134","<c++><wcf><security><client-server><public-key>","0","1","6","2010-02-25 12:14:07","1034366","6","","105533","","2009-06-24 05:25:18","2009-06-23 10:33:55",""
"1031772","Public key or Diffie-Hellman Key Exchange Algorithm","<p>Consider and client server scenario and you got two options:</p>

<ol>
<li>You can include Server's Public Key
in Client and perform the exchange.</li>
<li>You can use Diffie Hellman
KeyExchange Algorithm to handshake
and then exchange the key.</li>
</ol>

<p>Which one is more secure way?
also if public key will come from store say from Client CA store? would it be more secure instead of binding it in Client app?</p>

<p>The deployment will be done via an installer, verifying the version on each run. </p>
","<p>Well private key algorithms usually offers better performances (by an order of magnitude or more as far as I can remember) then their public key counterpart. In that sense Diffie-Hellman would be more efficient then say RSA for a client-server architecture.</p>

<p>If you have far far more clients then servers, you could implement a public-key algorithm to reduce the exchanges between them.</p>

<p>Still, like many people said, you should consider asking/hiring an expert on the matter as there is many different types of attacks (most of them targeting only the implementation and not the algorithm per se). If you still want to proceed, I can only wish you best of luck and point you to this resources you should <strong>very carefully</strong> read.</p>

<p><a href=""http://www.ietf.org/rfc/rfc2631.txt"" rel=""nofollow noreferrer"">Diffie-Hellman Key agreement method</a></p>
","6134","<c++><wcf><security><client-server><public-key>","0","1","6","2010-02-25 12:14:07","1034366","6","","105533","","2009-06-24 05:25:18","2009-06-23 10:33:55",""
"1258404","Verifying a signature in java using a certificates public key","<p>I'm looking to convert some C# code to the equivalent in Java.</p>

<p>The C# code takes some string content, and a signature (generated using the private key, on a seperate machine) and combined with the public key it verifies the signature matches, providing a level of assurance that the request has not been tampered with.</p>

<pre><code>  public bool VerifySignature(string content, byte[] signatureBytes, AsymmetricAlgorithm publicKey)
  {
        var hash = new MD5CryptoServiceProvider();

        byte[] dataBuffer = Encoding.ASCII.GetBytes(content);

        var cs = new CryptoStream(Stream.Null, hash, CryptoStreamMode.Write);
        cs.Write(dataBuffer, 0, dataBuffer.Length);
        cs.Close();

        var deformatter = new RSAPKCS1SignatureDeformatter(publicKey);
        deformatter.SetHashAlgorithm(""MD5"");

        return deformatter.VerifySignature(hash, signatureBytes);
  }
</code></pre>

<p>The public key itself is an X509 Certificate - constructed from a .cer file, stored as assembly resource i.e.</p>

<pre><code>byte[] data; // data is read from a resource stream.
var publicKey = new X509Certificate2(data, """", X509KeyStorageFlags.MachineKeySet).PublicKey.Key
</code></pre>

<p>What I'm looking to do is emulate this functionality in Java, so I can verify the signature generated by some code in C#... I've started investigating the crypto functionality of Java, but I'm a bit of a java noob.  Here's what I've come up with so far:</p>

<pre><code>byte[] certContents=null;
byte[] signature=null;
String contents = ""abc"";

// load cert
CertificateFactory factory = CertificateFactory.getInstance(""X.509"");
X509Certificate cert = (X509Certificate) factory.generateCertificate(new ByteArrayInputStream(certContents));

// grab public key
RSAPublicKey publicKey = (RSAPublicKey)cert.getPublicKey();

// get sha1 hash for contents        
Mac mac = Mac.getInstance(""HmacSHA1"");
mac.update(contents.getBytes());                
byte[] hash = mac.doFinal();

// get cipher
Cipher cipher = Cipher.getInstance(""RSA"");
cipher.init(Cipher.DECRYPT_MODE, publicKey);

// verify signature of contents matches signature passed to method somehow (and this is where I'm stuck)
</code></pre>

<p>Can anyone provide any insight into how I can verify the signature - or provide links to some resources which might explain the java.crypto and java.security.cert usage better then the run of the mill java docs.</p>
","<p>That C# code looks really confusing to me. It use SHA1CryptoServiceProvider but uses MD5 hash so I can't tell which hashing algorithm it's using. I assume it's MD5.</p>

<p>The signature verification process involves padding so your code wouldn't work. Following is some snippet from my code and you can use it to verify the signature. data is the bytes to sign and sigBytes holds the signature.</p>

<pre><code>String algorithm = ""MD5withRSA"";

// Initialize JCE provider    
Signature verifier = Signature.getInstance(algorithm);

// Do the verification   
boolean result=false;

try {
    verifier.initVerify(cert); // This one checks key usage in the cert
    verifier.update(data);
    result = verifier.verify(sigBytes);
}
catch (Exception e) {
    throw new VerificationException(""Verification error: ""+e, e);
}
</code></pre>
","5777","<c#><java><public-key><encryption-asymmetric>","0","2","1","2011-10-04 10:32:48","1258686","0","4","4843","","2009-08-14 02:41:53","2009-08-11 03:57:05",""
"35583740","Decrypt with the public key using openssl in commandline","<p>I want to 'manually' compare a digest/hash of a message with the decrypted signature value on this digest.</p>

<p>For this, I want to decrypt the signature value (the signed digest) of the message with the public key that belongs to the private key the digest was signed with in the first place. </p>

<p>I have the following items: </p>

<ul>
<li>The digest value in base64 of the message (calculated with SHA256)</li>
<li>The signature value on the digest in base64 that has been signed with the private
key (using SHA256 with RSA Encryption)</li>
<li>The public key in .pem format belonging to the private key</li>
<li>I have the actual message (it is in XML containing multiple signatures on different sections of the document). I already verified the signatures using the XML security library. I'm interested in only decrypting the signature value with the public key.</li>
</ul>

<p>I'm kind of stuck of how I can achieve this using openssl. </p>

<p>I'm trying variations on the commands described <a href=""https://www.openssl.org/docs/manmaster/apps/rsautl.html"" rel=""nofollow noreferrer"">here</a> and <a href=""https://stackoverflow.com/questions/14327517/openssl-rsa-using-a-public-key-to-decrypt"">here</a>, however I'm kind of lost. </p>

<p>I suppose I should convert the signature from base64 value to octet using:</p>

<p><code>base64 --d sigfile &gt; sigfile_octet</code>?</p>

<p>Then I'm using the command:</p>

<p><code>openssl rsautl -inkey pubkey.pem -pubin -in sigfile_octet</code></p>

<p>Does this give me the decrypted signature value in octet? 
What are the next steps I need to perform to compare it with the base64 digest? </p>

<p>p.s. I already verified the signature using <a href=""https://www.aleksey.com/xmlsec/"" rel=""nofollow noreferrer"">Aleksey's XML security library</a>, so I know the digest should match the decrypted signature value.</p>

<p>Your help would be very much appreciated!!</p>

<p>Kind regards,</p>

<p>Diederik</p>
","<p>Use the <code>dgst</code> command, not <code>rsautl</code>:</p>

<pre><code>openssl dgst -verify pubkey.pem -signature sigfile_octet message.txt
</code></pre>

<p>Here, <code>message.txt</code> is the message that you are trying to verify.</p>

<hr>

<p>You can use <code>rsautl</code> to ""decrypt"" the signature, getting access to the raw verification data:</p>

<pre><code>openssl rsautl -verify -inkey pubkey.pem -pubin -in sigfile_octet
</code></pre>

<p>This will yield the signature's DER-encoded ASN.1 structure. That's a sequence containing the algorithm identifier of the hash algorithm that was used, followed by the hash itself. If you want OpenSSL to print human-readable view of this structure, you can add the <code>-asn1parse</code> option to the the <code>rsautl</code> command. That looks something like this: </p>

<pre>
    0:d=0  hl=2 l=  49 cons: SEQUENCE          
    2:d=1  hl=2 l=  13 cons:  SEQUENCE          
    4:d=2  hl=2 l=   9 prim:   OBJECT            :sha256
   15:d=2  hl=2 l=   0 prim:   NULL              
   17:d=1  hl=2 l=  32 prim:  OCTET STRING      
      0000 - c9 8c 24 b6 77 ef f4 48-60 af ea 6f 49 3b ba ec   ..$.w..H`..oI;..
      0010 - 5b b1 c4 cb b2 09 c6 fc-2b bb 47 f6 6f f2 ad 31   [.......+.G.o..1
</pre>

<p>If you want to extract just the hash, instead of using the <code>-asn1parse</code> option, you can pipe it to the <code>asn1parse</code> command, which gives you the ability to extract elements from the structure.</p>

<p>When you say that you have ""the signature value on the digest"", I assume that what you have is a real signature with this structure, and not just the raw hash, which was signed with the private key. If that's not the case, you can post some example output.</p>
","5723","<encryption><command-line><openssl><digital-signature><public-key>","2","2","1","2016-02-24 16:21:51","","0","","-1","","2017-05-23 10:28:05","2016-02-23 17:05:55",""
"39890232","How to decode keys from Keycloak openid-connect cert api","<p>I'm trying to get the key from Keycloak open-id connect certs endpoint that allow me to validate a JWT token. The api to fetch the keys seam to work :</p>

<pre><code>GET http://localhost:8080/auth/realms/my-realm/protocol/openid-connect/certs

{
 ""keys"": [
   {
     ""kid"": ""MfFp7IWWRkFW3Yvhb1eVrtyQQNYqk6BG-6HZFpl_JxI"",
     ""kty"": ""RSA"",
     ""alg"": ""RS256"",
     ""use"": ""sig"",
     ""n"": ""qDWXUhNtfuHNh0lm3o-oTnP5S8ENpzsyi-dGrjSeewxV6GNiKTW5INJ4hDQ7ZWkUFfJJhfhQWJofqgN9rUBQgbRxXuUvEkrzXQiT9AT_8r-2XLMwRV3eV_t-WRIJhVWsm9CHS2gzbqbNP8HFoB_ZaEt2FYegQSoAFC1EXMioarQbFs7wFNEs1sn1di2xAjoy0rFrqf_UcYFNPlUhu7FiyhRrnoctAuQepV3B9_YQpFVoiUqa_p5THcDMaUIFXZmGXNftf1zlepbscaeoCqtiWTZLQHNuYKG4haFuJE4t19YhAZkPiqnatOUJv5ummc6i6CD69Mm9xAzYyMQUEvJuFw"",
     ""e"": ""AQAB""
   }
 ]
}
</code></pre>

<p>but where is the key and how to decode it ?
<code>$.keys[0].n</code> does not look like base64 and I cannot figure out what it is ?
...if someone can tell me how to get the public key from that payload it will be great !</p>
","<p>Looking at <a href=""https://github.com/keycloak/keycloak/blob/master/core/src/main/java/org/keycloak/jose/jwk/JWKParser.java"" rel=""noreferrer"">https://github.com/keycloak/keycloak/blob/master/core/src/main/java/org/keycloak/jose/jwk/JWKParser.java</a> it seams that returned key are pem encoded using :</p>

<ul>
<li><code>modulus</code> </li>
<li><code>exponent</code></li>
</ul>

<p>Look at the mentionned java class to get a public key in java or <a href=""https://github.com/tracker1/node-rsa-pem-from-mod-exp"" rel=""noreferrer"">https://github.com/tracker1/node-rsa-pem-from-mod-exp</a> to get the public key in javascript.</p>
","5695","<jwt><public-key><openid-connect><keycloak>","8","6","2","2018-10-08 08:25:28","39891027","0","3","","","","2016-10-06 07:38:32",""
"39890232","How to decode keys from Keycloak openid-connect cert api","<p>I'm trying to get the key from Keycloak open-id connect certs endpoint that allow me to validate a JWT token. The api to fetch the keys seam to work :</p>

<pre><code>GET http://localhost:8080/auth/realms/my-realm/protocol/openid-connect/certs

{
 ""keys"": [
   {
     ""kid"": ""MfFp7IWWRkFW3Yvhb1eVrtyQQNYqk6BG-6HZFpl_JxI"",
     ""kty"": ""RSA"",
     ""alg"": ""RS256"",
     ""use"": ""sig"",
     ""n"": ""qDWXUhNtfuHNh0lm3o-oTnP5S8ENpzsyi-dGrjSeewxV6GNiKTW5INJ4hDQ7ZWkUFfJJhfhQWJofqgN9rUBQgbRxXuUvEkrzXQiT9AT_8r-2XLMwRV3eV_t-WRIJhVWsm9CHS2gzbqbNP8HFoB_ZaEt2FYegQSoAFC1EXMioarQbFs7wFNEs1sn1di2xAjoy0rFrqf_UcYFNPlUhu7FiyhRrnoctAuQepV3B9_YQpFVoiUqa_p5THcDMaUIFXZmGXNftf1zlepbscaeoCqtiWTZLQHNuYKG4haFuJE4t19YhAZkPiqnatOUJv5ummc6i6CD69Mm9xAzYyMQUEvJuFw"",
     ""e"": ""AQAB""
   }
 ]
}
</code></pre>

<p>but where is the key and how to decode it ?
<code>$.keys[0].n</code> does not look like base64 and I cannot figure out what it is ?
...if someone can tell me how to get the public key from that payload it will be great !</p>
","<p>Type of the key (or keys) is <a href=""https://tools.ietf.org/html/rfc7517"" rel=""nofollow noreferrer"">JSON Web Key (JWK)</a>. List of supported library is on <a href=""https://openid.net/developers/jwt/"" rel=""nofollow noreferrer"">OpenID web page</a>. I am using <a href=""https://bitbucket.org/b_c/jose4j/wiki/Home"" rel=""nofollow noreferrer"">jose.4.j</a> for retrieve keys from Keycloak.</p>
","5695","<jwt><public-key><openid-connect><keycloak>","8","0","2","2018-10-08 08:25:28","39891027","0","3","","","","2016-10-06 07:38:32",""
"2394163","How can I use OpenSSL to encrypt a message using my public key and then decrypt it using my private key?","<p>Here is what I've tried:</p>

<p><strong>Encrypt message w/ my public key</strong></p>

<pre><code>openssl enc -aes-256-cbc -salt -kfile key.pub -in message.txt -out message.enc
</code></pre>

<p><strong>Decrypt message using my private key</strong></p>

<pre><code>openssl enc -d -aes-256-cbc -salt -in message.enc -pass file:mykey.pem 
</code></pre>

<p><strong>Error from decryption</strong></p>

<pre><code>bad decrypt
452:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:evp_enc.c:330:
</code></pre>
","<p>Encrypt:</p>

<pre><code>openssl enc -aes-256-cbc -salt -pass file:password.txt -in message.txt -out message.enc
</code></pre>

<p>Decrypt:</p>

<pre><code>openssl enc -aes-256-cbc -d -salt -pass file:password.txt -in message.enc -out message.dec
</code></pre>

<p>Where the first line of the file <code>password.txt</code> contains your password.</p>
","5655","<encryption><openssl><public-key><private-key>","3","0","4","2018-02-23 11:00:35","","1","5","608639","","2018-02-23 11:00:35","2010-03-06 21:26:45",""
"2394163","How can I use OpenSSL to encrypt a message using my public key and then decrypt it using my private key?","<p>Here is what I've tried:</p>

<p><strong>Encrypt message w/ my public key</strong></p>

<pre><code>openssl enc -aes-256-cbc -salt -kfile key.pub -in message.txt -out message.enc
</code></pre>

<p><strong>Decrypt message using my private key</strong></p>

<pre><code>openssl enc -d -aes-256-cbc -salt -in message.enc -pass file:mykey.pem 
</code></pre>

<p><strong>Error from decryption</strong></p>

<pre><code>bad decrypt
452:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:evp_enc.c:330:
</code></pre>
","<p>This code works: </p>

<pre><code>openssl rsautl -pubin -inkey key.pub -encrypt -in message.txt -out message.enc

openssl rsautl -inkey privkey.pem -decrypt -in message.enc -out message.dec
</code></pre>
","5655","<encryption><openssl><public-key><private-key>","3","4","4","2018-02-23 11:00:35","","1","5","608639","","2018-02-23 11:00:35","2010-03-06 21:26:45",""
"2394163","How can I use OpenSSL to encrypt a message using my public key and then decrypt it using my private key?","<p>Here is what I've tried:</p>

<p><strong>Encrypt message w/ my public key</strong></p>

<pre><code>openssl enc -aes-256-cbc -salt -kfile key.pub -in message.txt -out message.enc
</code></pre>

<p><strong>Decrypt message using my private key</strong></p>

<pre><code>openssl enc -d -aes-256-cbc -salt -in message.enc -pass file:mykey.pem 
</code></pre>

<p><strong>Error from decryption</strong></p>

<pre><code>bad decrypt
452:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:evp_enc.c:330:
</code></pre>
","<p>For use </p>

<blockquote>
  <p>openssl rsautl -pubin -inkey key.pub -encrypt -in message.txt -out message.enc</p>
</blockquote>

<p>You need define option -raw to ignore padding :)</p>

<blockquote>
  <p>openssl rsautl -pubin -inkey key.pub -encrypt -in message.txt -out message.enc -raw</p>
</blockquote>
","5655","<encryption><openssl><public-key><private-key>","3","1","4","2018-02-23 11:00:35","","1","5","608639","","2018-02-23 11:00:35","2010-03-06 21:26:45",""
"2394163","How can I use OpenSSL to encrypt a message using my public key and then decrypt it using my private key?","<p>Here is what I've tried:</p>

<p><strong>Encrypt message w/ my public key</strong></p>

<pre><code>openssl enc -aes-256-cbc -salt -kfile key.pub -in message.txt -out message.enc
</code></pre>

<p><strong>Decrypt message using my private key</strong></p>

<pre><code>openssl enc -d -aes-256-cbc -salt -in message.enc -pass file:mykey.pem 
</code></pre>

<p><strong>Error from decryption</strong></p>

<pre><code>bad decrypt
452:error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:evp_enc.c:330:
</code></pre>
","<p><code>enc - symmetric cipher routines</code> so you should use <code>rsautl</code></p>

<p>Correct solutions:</p>

<p><strong>On sender side</strong></p>

<ol>
<li>Generate passphrase</li>
<li>Encrypt your message using <code>enc</code> with passphrase</li>
<li>Encrypt passphrase using <code>rsautl</code> with public key</li>
<li>Send encoded message and encoded passphrase</li>
</ol>

<p><strong>On receiver side</strong></p>

<ol>
<li>Decrypt passphrase using <code>rsautl</code> with private key</li>
<li>Decrypt message using <code>enc</code> with passphrase</li>
</ol>
","5655","<encryption><openssl><public-key><private-key>","3","1","4","2018-02-23 11:00:35","","1","5","608639","","2018-02-23 11:00:35","2010-03-06 21:26:45",""
"4299795","Why public key algorithms are slow?","<p>I'm studying for a test and I'm still didn't get it why public key algorithms are way slower than symetric algorithms. </p>
","<p>Encryption and keying methods are a very deep and complex topic that only the smartest mathematical minds in the world can fully understand, but there are top-level views that most people can understand.</p>

<p>The primary difference is that symmetric algorithms require a much, much smaller key than asymmetric (PKI) methods. Because symmetric algorithms work on a ""shared secret"" (such as <code>abcd1234</code>) which is transferred inside a trusted communication method (for example, I'm going to call you on the telephone and ask you for the shared secret) then they don't need to be as long as they rely on other methods of security (i.e. I trust you not to tell that to anyone).</p>

<p>PK infrastructure involves sending that ""key"" over the internet, over un-trusted space, and involves using huge prime numbers and massive keys (1024-bit or 2048-bit rather than 128 or 256-bit for example).</p>

<p>A general rule of thumb is that PKI methods are approximately 1,000 times slower than a symmetric key.</p>
","5653","<public-key>","5","2","3","2011-10-21 06:56:10","4300237","2","","","","","2010-11-28 22:17:30",""
"4299795","Why public key algorithms are slow?","<p>I'm studying for a test and I'm still didn't get it why public key algorithms are way slower than symetric algorithms. </p>
","<p><a href=""https://secure.wikimedia.org/wikipedia/en/wiki/Public-key_cryptography#Computational_cost"" rel=""noreferrer"">Public-key cryptography</a> is a form of <a href=""http://www.wordiq.com/definition/Asymmetric_key_algorithm"" rel=""noreferrer"">asymmetric cryptography</a>, in which the difference is the use of an extra cryptographic key.</p>

<p><a href=""https://secure.wikimedia.org/wikipedia/en/wiki/Symmetric_key_algorithm"" rel=""noreferrer"">Symmetric algorithms</a> use a ""shared secret"" in which two systems each use a single cryptographic key to encrypt <em>and</em> decrypt communications.</p>

<p>Public-key cryptography does not use a single shared key, instead it uses mathematical key-pairs: a public and private key.  In this system the communications are encrypted with the public key and is decrypted with the private key.  Here is a better explanation from Wikipedia:</p>

<blockquote>
  <p>The distinguishing technique used in
  public key cryptography is the use of
  asymmetric key algorithms, where the
  key used to encrypt a message is not
  the same as the key used to decrypt
  it. Each user has a pair of
  cryptographic keys—a public encryption
  key and a private decryption key. The
  publicly available encrypting-key is
  widely distributed, while the private
  decrypting-key is known only to the
  recipient. Messages are encrypted with
  the recipient's public key and can
  only be decrypted with the
  corresponding private key. The keys
  are related mathematically, but the
  private key cannot feasibly (ie. in
  actual or projected practice) be
  derived from the public key. The
  discovery of algorithms that could
  produce public/private key pairs
  revolutionized the practice of
  cryptography beginning in the middle
  1970s.</p>
</blockquote>

<p>The computational overhead is then quite obvious:  the public key is available to any system it's exposed to (a public-key system on the internet, for example exposes the public-key to the <em>entire</em> internet).  To compensate, both public and private keys will have to be quite large to ensure a stronger level of encryption.  The result, however, is a much stronger level of encryption, as the private decryption key (so far) cannot be reverse-engineered from the public encryption key.</p>

<p>There is more that can affect the ""speed"" of a <a href=""https://secure.wikimedia.org/wikipedia/en/wiki/Public_key_infrastructure"" rel=""noreferrer"">public-key infrastructure</a> (PKI).  Since one of the issues with this system is trust, most implementations involve a <a href=""https://secure.wikimedia.org/wikipedia/en/wiki/Certificate_authority"" rel=""noreferrer"">certificate authority</a> (CA), which are entities that are trusted to delegate key pairs and validate the keys' ""identity"".</p>

<p>So to summarize:  larger cryptographic key sizes, two cryptographic keys instead of one, and with the introduction of a certificate authority: extra DNS look-ups, and server response times.</p>

<p>It's because of this extra overhead that most implementations benefit from a <a href=""https://secure.wikimedia.org/wikipedia/en/wiki/Hybrid_cryptosystem"" rel=""noreferrer"">hybrid algorithm</a>, where the public and private keys are used to generate a session key (much like a shared secret in symmetrical algorithms) to gain the best of both worlds.  </p>
","5653","<public-key>","5","7","3","2011-10-21 06:56:10","4300237","2","","","","","2010-11-28 22:17:30",""
"4299795","Why public key algorithms are slow?","<p>I'm studying for a test and I'm still didn't get it why public key algorithms are way slower than symetric algorithms. </p>
","<p>Public key algorithms rely on ""trapdoor"" calculations, ones that are computationally expensive to encrypt and computationally intractable to decrypt with the secret key.  If the first step is too easy (which correlates with speed), the second step becomes less hard (more breakable).  Consequently, public key algorithms tend to be resource intensive.</p>

<p>Private key algorithms already have the secret during the encryption phase, so they don't have to do as much work as an algorithm with a public secret.</p>

<p>The above is an over-generalization but should give you a feel for the reasons behind the relative speed differences.  That being said, a private key algorithm can be slow and a public key algorithm may have an efficient implementation.  The devil is in the details :-)</p>
","5653","<public-key>","5","4","3","2011-10-21 06:56:10","4300237","2","","","","","2010-11-28 22:17:30",""
"12303314","Why does FileZilla work without knowing any keys, but WinSCP doesn't?","<p>I got the connection details of a SFTP server, connected to it with FileZilla, and then successfully downloaded a file from that SFTP.</p>

<p>The only details I had was host, port, user and pass.</p>

<p>Now I'm trying to connect to this same server trough WinSCP .NET assembly (C#)</p>

<pre class=""lang-csharp prettyprint-override""><code>using(Session session = new WinSCP.Session()) {
    session.Open(new SessionOptions() { 
        Protocol = Protocol.,
        HostName = ""ftp.*********.be"",
        UserName =""*****"",
        Password =""*****""
    });

    TransferOptions transferOptions = new TransferOptions();
    transferOptions.TransferMode = WinSCP.TransferMode.Binary;
    TransferOperationResult transferResult;
    transferResult = session.GetFiles(""/downld/fileonserver.dbf"",@""c:\testfolder\localfilename.dbf"", false, transferOptions);
</code></pre>

<p>Whatever I try here it keeps asking for a key for SSH, but I don't have that key, I generated a 128 bit RSA key somewhere online and put it in the session options like:  </p>

<pre><code>SshHostKeyFingerprint = ""ssh-rsa 1024 82:09:12:b4:93:92:3a:61:10:90:61:12:b4:XX:XX:XX""
</code></pre>

<p>But this just tells me that key is invalid.</p>

<p>I kind of figured out that I maybe need the public/private SSH key from the server to get this to work but I sadly don't have access to this server.</p>

<p><strong>Since FileZilla can connect to it without me entering any KEYS, why can't my C# program do the same?</strong></p>

<p>I'm not an expert when it comes to security related stuff, so please point me  in the right direction. I found <a href=""https://stackoverflow.com/questions/44089/how-to-extract-sftp-ssh-key-from-key-cache-in-filezilla-ftp-client"">this thread</a> but I don't have access to <code>.ssh</code> folder on the FTP server and I don't really get where they are going with this.</p>
","<p>I solved this by just copying the SSH key returned to my filezilla client into my c# app. I don't know if this is the right thing to do, but at least it got my solution working now.</p>

<p>It was also a SSH-DSS key 2048 key instead of an SSH-RSA 1024 ,that's why messing around with the keys kept failing I guess.</p>
","5603","<sftp><public-key><filezilla><winscp><winscp-net>","3","0","2","2017-02-14 15:19:35","24199323","2","1","-1","","2017-05-23 12:24:26","2012-09-06 15:22:33",""
"12303314","Why does FileZilla work without knowing any keys, but WinSCP doesn't?","<p>I got the connection details of a SFTP server, connected to it with FileZilla, and then successfully downloaded a file from that SFTP.</p>

<p>The only details I had was host, port, user and pass.</p>

<p>Now I'm trying to connect to this same server trough WinSCP .NET assembly (C#)</p>

<pre class=""lang-csharp prettyprint-override""><code>using(Session session = new WinSCP.Session()) {
    session.Open(new SessionOptions() { 
        Protocol = Protocol.,
        HostName = ""ftp.*********.be"",
        UserName =""*****"",
        Password =""*****""
    });

    TransferOptions transferOptions = new TransferOptions();
    transferOptions.TransferMode = WinSCP.TransferMode.Binary;
    TransferOperationResult transferResult;
    transferResult = session.GetFiles(""/downld/fileonserver.dbf"",@""c:\testfolder\localfilename.dbf"", false, transferOptions);
</code></pre>

<p>Whatever I try here it keeps asking for a key for SSH, but I don't have that key, I generated a 128 bit RSA key somewhere online and put it in the session options like:  </p>

<pre><code>SshHostKeyFingerprint = ""ssh-rsa 1024 82:09:12:b4:93:92:3a:61:10:90:61:12:b4:XX:XX:XX""
</code></pre>

<p>But this just tells me that key is invalid.</p>

<p>I kind of figured out that I maybe need the public/private SSH key from the server to get this to work but I sadly don't have access to this server.</p>

<p><strong>Since FileZilla can connect to it without me entering any KEYS, why can't my C# program do the same?</strong></p>

<p>I'm not an expert when it comes to security related stuff, so please point me  in the right direction. I found <a href=""https://stackoverflow.com/questions/44089/how-to-extract-sftp-ssh-key-from-key-cache-in-filezilla-ftp-client"">this thread</a> but I don't have access to <code>.ssh</code> folder on the FTP server and I don't really get where they are going with this.</p>
","<ol>
<li><p>You are confusing the SSH server public host key verification with the client public key authentication. These are two completely different things. This first involves the public key of the server, while the latter involves your account public key.</p>

<p><a href=""https://winscp.net/eng/docs/ssh_keys"" rel=""nofollow noreferrer"">Read about SSH Key Pairs</a> to learn the difference.</p></li>
<li><p>FileZilla <strong>cannot</strong> connect without verifying the server's public host key either. On the first connection it always prompts you to accept the key. Once you do, it optionally caches the key and won't prompt you again, unless the key changes.</p>

<p><img src=""https://i.stack.imgur.com/l198X.png"" alt=""FileZilla host key verification""></p>

<p>You have probably forgotten that you got this prompt before or someone else connected to the server before from your machine.</p>

<p>Any SSH (SFTP) client must do the same. You are losing any security had you not verified your server's host key.</p></li>
<li><p>You should get the host key fingerprint from your server administrator.</p>

<p>If you had not, you can see it on WinSCP <a href=""https://winscp.net/eng/docs/ui_fsinfo"" rel=""nofollow noreferrer"">Server and Protocol information dialog</a>.</p>

<p>For details see WinSCP FAQ <a href=""https://winscp.net/eng/docs/faq_hostkey"" rel=""nofollow noreferrer"">Where do I get SSH host key fingerprint to authorize the server?</a></p></li>
</ol>
","5603","<sftp><public-key><filezilla><winscp><winscp-net>","3","4","2","2017-02-14 15:19:35","24199323","2","1","-1","","2017-05-23 12:24:26","2012-09-06 15:22:33",""
"2993135","Encryption from c# application","<p>SITUATION:
I need to make encryption happen between my remote database and my c# application. I don't know what I'm doing (never done any encryption before) and all the stuff I found on the web was for asp.net and dealt with the web.config file.</p>

<p>SOME RELEVANT DATA:
My connection string contains password info for SQL server authentication, there is a select, and a delete statement. Those three things will need to be encrypted.</p>

<p>I am using SQL Server 2008, Visual Studio 2008, and C#.</p>

<p>I doubt this is relevant but this is taking place inside a windows service. So far, anything SQL related that works in winForms has worked for me in services, so any help that is winForms related is appreciated, too.</p>

<p>WHAT I NEED HELP ON:</p>

<ol>
<li><p>Any references on encryption that aren't restricted to asp.net would be greatly appreciated. :)</p></li>
<li><p>I see the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">MSDN page</a>, and it seems like a decent place to start, but I am a little confused. It seems like this is the way 2 applications would send a file to each other, rather than sending something encrypted to SQL Server? Using this, I don't see how SQL Server would know how to decrypt it?</p></li>
<li><p>Am I way out in left field looking in System.Security.Cryptography? Is there some way to specify encryption within System.Data.SqlClient or am I going to have to resort to messing around making stored procedures on the remote server?</p></li>
</ol>

<p>Thank you in advance!!! :)</p>

<p>SUMMARY:</p>

<p>Thank you all for setting me on the right path, it was difficult to choose just one answer! :)</p>

<p>I've concluded that I need to use SSL, and while I yet have a lot of confusion about the how-tos, I know that this requires a certificate, and that once the certificate is set up, the client can request encryption by asking for ""Encrypt=yes"" in the connection string. Luckily I believe I already have one I can use.</p>

<p>Another thing to note - TDE is the consensus on what is good for encrypting data that is just sitting in the database, while SSL is what to use for transmitting encrypted data.</p>

<p>Here were a couple links I found the most helpful:</p>

<p><a href=""http://blogs.msdn.com/b/sql_protocols/archive/2005/10/04/476705.aspx"" rel=""nofollow noreferrer"">http://blogs.msdn.com/b/sql_protocols/archive/2005/10/04/476705.aspx</a></p>

<p><a href=""http://support.microsoft.com/default.aspx?scid=kb;en-us;316898"" rel=""nofollow noreferrer"">http://support.microsoft.com/default.aspx?scid=kb;en-us;316898</a></p>
","<p><strong>For the encryption between the app and the DB</strong>, your best bet is to use an SSL certificate at the SQL Server level.  Here is a Microsoft KB article on it (for an older version of SQL Server).  <a href=""http://support.microsoft.com/kb/316898"" rel=""nofollow noreferrer"">http://support.microsoft.com/kb/316898</a>  This will protect against sniffers.</p>

<p>We did this with our credit card application form, and it was very straightforward.</p>

<p><a href=""http://search.microsoft.com/results.aspx?mkt=en-US&amp;setlang=en-US&amp;q=enable+encryption+in+SQL+Server"" rel=""nofollow noreferrer"">This Microsoft.com search</a> will help you with newer versions of SQL Server.</p>

<p>And this article will help with SQL Server 2008.  <a href=""http://msdn.microsoft.com/en-us/library/cc278098.aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/cc278098.aspx</a></p>
","5444","<c#><sql><sql-server><encryption><public-key>","4","5","3","2018-11-12 16:20:37","2993338","2","0","224043","","2010-06-08 15:08:43","2010-06-07 21:01:54",""
"2993135","Encryption from c# application","<p>SITUATION:
I need to make encryption happen between my remote database and my c# application. I don't know what I'm doing (never done any encryption before) and all the stuff I found on the web was for asp.net and dealt with the web.config file.</p>

<p>SOME RELEVANT DATA:
My connection string contains password info for SQL server authentication, there is a select, and a delete statement. Those three things will need to be encrypted.</p>

<p>I am using SQL Server 2008, Visual Studio 2008, and C#.</p>

<p>I doubt this is relevant but this is taking place inside a windows service. So far, anything SQL related that works in winForms has worked for me in services, so any help that is winForms related is appreciated, too.</p>

<p>WHAT I NEED HELP ON:</p>

<ol>
<li><p>Any references on encryption that aren't restricted to asp.net would be greatly appreciated. :)</p></li>
<li><p>I see the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">MSDN page</a>, and it seems like a decent place to start, but I am a little confused. It seems like this is the way 2 applications would send a file to each other, rather than sending something encrypted to SQL Server? Using this, I don't see how SQL Server would know how to decrypt it?</p></li>
<li><p>Am I way out in left field looking in System.Security.Cryptography? Is there some way to specify encryption within System.Data.SqlClient or am I going to have to resort to messing around making stored procedures on the remote server?</p></li>
</ol>

<p>Thank you in advance!!! :)</p>

<p>SUMMARY:</p>

<p>Thank you all for setting me on the right path, it was difficult to choose just one answer! :)</p>

<p>I've concluded that I need to use SSL, and while I yet have a lot of confusion about the how-tos, I know that this requires a certificate, and that once the certificate is set up, the client can request encryption by asking for ""Encrypt=yes"" in the connection string. Luckily I believe I already have one I can use.</p>

<p>Another thing to note - TDE is the consensus on what is good for encrypting data that is just sitting in the database, while SSL is what to use for transmitting encrypted data.</p>

<p>Here were a couple links I found the most helpful:</p>

<p><a href=""http://blogs.msdn.com/b/sql_protocols/archive/2005/10/04/476705.aspx"" rel=""nofollow noreferrer"">http://blogs.msdn.com/b/sql_protocols/archive/2005/10/04/476705.aspx</a></p>

<p><a href=""http://support.microsoft.com/default.aspx?scid=kb;en-us;316898"" rel=""nofollow noreferrer"">http://support.microsoft.com/default.aspx?scid=kb;en-us;316898</a></p>
","<p>I'm a little bit confused about your request. Do you need to encrypt the data locally, or do you want to encrypt the connection between your app and the server? Or the data stored in the database tables? Or a combination of those?</p>

<p>Anyways, for the encryption of the connection (which includes authentication), you may want to have a look at the channel encryption feature of SQL Server. <a href=""http://blogs.msdn.com/b/sql_protocols/archive/2005/10/04/476705.aspx"" rel=""nofollow noreferrer"">http://blogs.msdn.com/b/sql_protocols/archive/2005/10/04/476705.aspx</a></p>

<p>For local files or connection strings as well as binary data encryption (which may also be stored in its encrypted form in the DB), looking into the System.Security.Cryptography namespace is the way to go.</p>
","5444","<c#><sql><sql-server><encryption><public-key>","4","1","3","2018-11-12 16:20:37","2993338","2","0","224043","","2010-06-08 15:08:43","2010-06-07 21:01:54",""
"2993135","Encryption from c# application","<p>SITUATION:
I need to make encryption happen between my remote database and my c# application. I don't know what I'm doing (never done any encryption before) and all the stuff I found on the web was for asp.net and dealt with the web.config file.</p>

<p>SOME RELEVANT DATA:
My connection string contains password info for SQL server authentication, there is a select, and a delete statement. Those three things will need to be encrypted.</p>

<p>I am using SQL Server 2008, Visual Studio 2008, and C#.</p>

<p>I doubt this is relevant but this is taking place inside a windows service. So far, anything SQL related that works in winForms has worked for me in services, so any help that is winForms related is appreciated, too.</p>

<p>WHAT I NEED HELP ON:</p>

<ol>
<li><p>Any references on encryption that aren't restricted to asp.net would be greatly appreciated. :)</p></li>
<li><p>I see the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">MSDN page</a>, and it seems like a decent place to start, but I am a little confused. It seems like this is the way 2 applications would send a file to each other, rather than sending something encrypted to SQL Server? Using this, I don't see how SQL Server would know how to decrypt it?</p></li>
<li><p>Am I way out in left field looking in System.Security.Cryptography? Is there some way to specify encryption within System.Data.SqlClient or am I going to have to resort to messing around making stored procedures on the remote server?</p></li>
</ol>

<p>Thank you in advance!!! :)</p>

<p>SUMMARY:</p>

<p>Thank you all for setting me on the right path, it was difficult to choose just one answer! :)</p>

<p>I've concluded that I need to use SSL, and while I yet have a lot of confusion about the how-tos, I know that this requires a certificate, and that once the certificate is set up, the client can request encryption by asking for ""Encrypt=yes"" in the connection string. Luckily I believe I already have one I can use.</p>

<p>Another thing to note - TDE is the consensus on what is good for encrypting data that is just sitting in the database, while SSL is what to use for transmitting encrypted data.</p>

<p>Here were a couple links I found the most helpful:</p>

<p><a href=""http://blogs.msdn.com/b/sql_protocols/archive/2005/10/04/476705.aspx"" rel=""nofollow noreferrer"">http://blogs.msdn.com/b/sql_protocols/archive/2005/10/04/476705.aspx</a></p>

<p><a href=""http://support.microsoft.com/default.aspx?scid=kb;en-us;316898"" rel=""nofollow noreferrer"">http://support.microsoft.com/default.aspx?scid=kb;en-us;316898</a></p>
","<p>What you need is to protect the traffic between your application and the SQL Server. For this, simply follow the steps described in <a href=""http://msdn.microsoft.com/en-us/library/ms189067.aspx"" rel=""nofollow noreferrer"">Encrypting Connections to SQL Server</a>.</p>

<p>Next thing is that if you do store sensitive data, you want to store it encrypted in the database to protect against accidental media loss. The best solution, by far, is to use <a href=""http://msdn.microsoft.com/en-us/library/bb934049.aspx"" rel=""nofollow noreferrer"">Transparent Database Encryption</a>. </p>

<p>Neither of these solutions require any single line of code change in your application. They are both deployment time, administrator controlled settings. Trying to roll your own solution for cryptography will get you nowhere fast. It is extremely easy to screw up royally in cryptography, and you won't even know it. It is much easier - and far better - to satisfy the requirements without changing your application by simply leveraging encryption features provided by SQL (connection TLS, storage TDE).</p>
","5444","<c#><sql><sql-server><encryption><public-key>","4","4","3","2018-11-12 16:20:37","2993338","2","0","224043","","2010-06-08 15:08:43","2010-06-07 21:01:54",""
"9091900","how can i convert pem public key to rsa public key with bouncycastle in c#?","<p>i have a pem <strong>public</strong> key and i want to convert to xml format public key or AsymmetricKeyParameter.</p>

<p>i can convert pem <strong>Private</strong> key to <strong>Public/Private</strong> xml format or asymmetricKeyParameter with PemReader in bouncyCastle in C#.but when use Pem <strong>Public</strong> Key in PemReader , i receive error.     </p>

<p>please help me.<br>
what else solution for my problem?</p>
","<p>Take a look on this entry <a href=""http://social.msdn.microsoft.com/Forums/en-GB/clr/thread/30f6bc31-bd63-4ef9-9cdd-574427913819"" rel=""nofollow"">from Microsoft forums</a> browse down to Bell_Wang reply, it points to some code that makes that conversion for you (<a href=""http://csslab.s3.amazonaws.com/csslabs/Siva/opensslkey.cs"" rel=""nofollow"">code is here</a>)</p>
","5376","<c#><rsa><bouncycastle><public-key><pem>","4","2","2","2013-01-16 23:29:50","","3","1","1170769","","2012-02-04 06:40:01","2012-02-01 06:47:07",""
"9091900","how can i convert pem public key to rsa public key with bouncycastle in c#?","<p>i have a pem <strong>public</strong> key and i want to convert to xml format public key or AsymmetricKeyParameter.</p>

<p>i can convert pem <strong>Private</strong> key to <strong>Public/Private</strong> xml format or asymmetricKeyParameter with PemReader in bouncyCastle in C#.but when use Pem <strong>Public</strong> Key in PemReader , i receive error.     </p>

<p>please help me.<br>
what else solution for my problem?</p>
","<p>This should do what you were looking for using BouncyCastle.</p>

<p>Dependencies:</p>

<pre><code>using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.OpenSsl;
using Org.BouncyCastle.Security;
</code></pre>

<p>The code to convert from PEM to RSA XML format:</p>

<pre><code>StreamReader reader = new StreamReader(""yourPrivateKey.pem"");
PemReader pemReader = new PemReader(reader);
AsymmetricCipherKeyPair keyPair = (AsymmetricCipherKeyPair)pemReader.ReadObject();
AsymmetricKeyParameter privateKey = keyPair.Private;
RSA rsa = DotNetUtilities.ToRSA((RsaPrivateCrtKeyParameters) privateKey);
string xmlRsa = rsa.ToXmlString(true);
Console.WriteLine(xmlRsa);
</code></pre>
","5376","<c#><rsa><bouncycastle><public-key><pem>","4","5","2","2013-01-16 23:29:50","","3","1","1170769","","2012-02-04 06:40:01","2012-02-01 06:47:07",""
"1146274","Generating REALLY big primes","<p>I'm playing around and trying to write an implementation of RSA. The problem is that I'm stuck on generating the massive prime numbers that are involved in generating a key pair. Could someone point me to a fast way to generate huge primes/probable primes?</p>
","<p>Take a look at how <a href=""http://www.truecrypt.org/downloads2"" rel=""nofollow noreferrer"">TrueCrypt</a> does it.  Also, take a look at <a href=""http://mathworld.wolfram.com/Rabin-MillerStrongPseudoprimeTest.html"" rel=""nofollow noreferrer"">Rabin-Miller</a> for testing large pseudoprimes.</p>
","5241","<encryption><rsa><primes><public-key>","11","4","6","2019-02-15 15:08:00","1156611","0","1","49246","","2010-02-06 10:59:15","2009-07-18 00:24:33",""
"1146274","Generating REALLY big primes","<p>I'm playing around and trying to write an implementation of RSA. The problem is that I'm stuck on generating the massive prime numbers that are involved in generating a key pair. Could someone point me to a fast way to generate huge primes/probable primes?</p>
","<p>You didn't mention what language you are using.  Some have a method of doing this built in.  For example, in java this is as easy as calling <a href=""http://java.sun.com/javase/6/docs/api/java/math/BigInteger.html#nextProbablePrime()"" rel=""nofollow noreferrer"">nextProbablePrime()</a> on a BigInteger.</p>
","5241","<encryption><rsa><primes><public-key>","11","2","6","2019-02-15 15:08:00","1156611","0","1","49246","","2010-02-06 10:59:15","2009-07-18 00:24:33",""
"1146274","Generating REALLY big primes","<p>I'm playing around and trying to write an implementation of RSA. The problem is that I'm stuck on generating the massive prime numbers that are involved in generating a key pair. Could someone point me to a fast way to generate huge primes/probable primes?</p>
","<p>The previous answer is incorrect: 2 * 3 * 5 * 7 * 11 * 13 + 1 = 30031 = 509 * 59.</p>

<p>I think the poster is misremembering the (real) proof that there are are an uncountable number of prime numbers.</p>
","5241","<encryption><rsa><primes><public-key>","11","2","6","2019-02-15 15:08:00","1156611","0","1","49246","","2010-02-06 10:59:15","2009-07-18 00:24:33",""
"1146274","Generating REALLY big primes","<p>I'm playing around and trying to write an implementation of RSA. The problem is that I'm stuck on generating the massive prime numbers that are involved in generating a key pair. Could someone point me to a fast way to generate huge primes/probable primes?</p>
","<p>Mono has a BigInteger class that's open source as does java. You could take a look at those. They're probably portable :) g'luck</p>
","5241","<encryption><rsa><primes><public-key>","11","1","6","2019-02-15 15:08:00","1156611","0","1","49246","","2010-02-06 10:59:15","2009-07-18 00:24:33",""
"1146274","Generating REALLY big primes","<p>I'm playing around and trying to write an implementation of RSA. The problem is that I'm stuck on generating the massive prime numbers that are involved in generating a key pair. Could someone point me to a fast way to generate huge primes/probable primes?</p>
","<p>You don't generate prime numbers exactly. You generate a large odd number randomly, then test if that number is prime, if not generate another one randomly.  There are some laws of prime numbers that basically state that your odds of ""hitting"" a prime via random tries is (2/ln n) </p>

<p>For example, if you want a 512-bit random prime number, you will find one in 2/(512*ln(2))
So roughly 1 out of every 177 of the numbers you try will be prime.  </p>

<p>There are multiple ways to test if a number is prime, one good one is the ""Miller-Rabin test"" <a href=""https://stackoverflow.com/a/1146285/106092"">as stated in another answer to this question</a>. </p>

<p>Also, OpenSSL has a nice utility to test for primes:</p>

<pre><code>$ openssl prime 119054759245460753
1A6F7AC39A53511 is not prime
</code></pre>
","5241","<encryption><rsa><primes><public-key>","11","18","6","2019-02-15 15:08:00","1156611","0","1","49246","","2010-02-06 10:59:15","2009-07-18 00:24:33",""
"1146274","Generating REALLY big primes","<p>I'm playing around and trying to write an implementation of RSA. The problem is that I'm stuck on generating the massive prime numbers that are involved in generating a key pair. Could someone point me to a fast way to generate huge primes/probable primes?</p>
","<p>There is an algorithm due to U. Maurer that generates random provable (in contrast to statistically highly-probable) primes that are almost uniformly distributed over the set of all primes of a special size. I have a Python implementation of it that is fairly efficient at:
<a href=""http://s13.zetaboards.com/Crypto/topic/7234475/1/"" rel=""nofollow"">http://s13.zetaboards.com/Crypto/topic/7234475/1/</a></p>
","5241","<encryption><rsa><primes><public-key>","11","1","6","2019-02-15 15:08:00","1156611","0","1","49246","","2010-02-06 10:59:15","2009-07-18 00:24:33",""
"31685734","Convert a X509 Public key to RSA public key","<p>I have a public key in the following format</p>

<p><code>
-----BEGIN PUBLIC KEY-----
xxxxxxxx
-----END PUBLIC KEY-----
</code></p>

<p>I need to convert this into the following format</p>

<p><code>
-----BEGIN RSA PUBLIC KEY-----
xxxxxxxxx
-----END RSA PUBLIC KEY-----
</code></p>

<p>Basically, the issue is that I am working with a third party library which is written in Java.</p>

<ol>
<li><p>The third party library uses Java class ""RSAPublicKeySpec"" to generate an instance of type RSAPublicKey from a String. </p></li>
<li><p>The String that I am supplying to this third party library is taken from a file which is in the following format:</p></li>
</ol>

<p><code>
-----BEGIN PUBLIC KEY-----
xxxxxxxx
-----END PUBLIC KEY-----
</code></p>

<ol start=""3"">
<li>After poking around with the code a bit, I could see that if I use the java class ""X509EncodedKeySpec"" to load this public key, the signature verification portion of my code works perfectly. However, since the code is a third-party library, I don't have an option of changing the class type in their code. I would need to somehow make sure that the input I am supplying to the library is compatible with ""RSAPublicKeySpec"" class so that the public key is loaded correctly.</li>
</ol>
","<p>The ""RSA PUBLIC KEY"" format was used in very early SSLeay, which evolved into OpenSSL, but obsoleted before 2000 I believe, which was very early days for Java and I <em>think</em> before Java had <em>any</em> crypto even the restricted kind then allowed for export from the US. In short, the ""RSA PUBLIC KEY"" format is the RSA-specific format from PKCS#1, whereas ""PUBLIC KEY"" is the X.509 generic structure that handles numerous (and extensible) algorithm. So it would be interesting to know how the developers of your Java library got themselves into this bizarre limitation. But anyway ...</p>

<p>Although this format is long obsolete, <strong>OpenSSL still supports</strong> it. If you have the openssl commandline available (could be on another system which you copy the file/data to and back) just do:</p>

<pre><code>openssl rsa -in publickey.pem -out rsapublickey.pem -pubin -RSAPublicKey_out 
</code></pre>

<p><strong>Argh!</strong> having written the below, now I notice the (more general) dupe at <a href=""https://stackoverflow.com/questions/7611383/generating-rsa-keys-in-pkcs1-format-in-java?rq=1"">Generating RSA keys in PKCS#1 format in Java</a>
(plus several links onward from there) if you use BouncyCastle in Java (or OpenSSL library in C, but you already have the OpenSSL commandline option above).</p>

<p>Anyway, here is an outline of two ways to code in <strong>plain Java</strong> if you prefer that:</p>

<p>0) Both of them <strong>start by converting the input PEM to bytes</strong>. Read the ""----BEGIN"" line and preferably check it's correct; read all following lines (of base64) up to but not including the ""-----END"" line; concatenate and decode the base64 to bytes. Java8 provides <code>java.util.Base64</code>; before that you had to fiddle with ""internal"" classes or add one of several common (but not builtin) libraries like commons-codecs or write it yourself (which isn't that hard). Now choose either step 1 or step 2.</p>

<p>1) <strong>Parse</strong> those bytes as the <a href=""https://en.wikipedia.org/wiki/X.690"" rel=""nofollow noreferrer"">ASN.1 DER</a> encoding of an <a href=""http://tools.ietf.org/html/rfc5280#section-4.1"" rel=""nofollow noreferrer"">X.509 SubjectPublicKeyInfo as shown in RFC 5280</a> including the <a href=""http://tools.ietf.org/html/rfc5280#section-4.1.1.2"" rel=""nofollow noreferrer"">AlgorithmIdentifier</a>. To be exact: skip the tag and length of the outer sequence; skip the tag, length and contents of the AlgorithmIdentifier -- or better extract the contents and check it is a SEQUENCE of an OID for rsaEncryption and NULL (or possibly omitted) params; then skip the tag and length and first byte (unused-bits) for the <strong>BIT STRING</strong> and take the (remaining) <strong>contents</strong> as the encoded key -- which is already the PKCS#1 RSAPublicKey structure you want. Proceed to step 3.</p>

<p>2) <strong>Or</strong> use standard JCE to <strong>read the X.509 format</strong> key: wrap the bytes in an <code>X509EncodedKeySpec</code>, give it to <code>.generatePublic()</code> of a <code>KeyFactory</code> for RSA, and cast the result to <code>RSAPublicKey</code>. Then call <code>.getModulus()</code> and <code>.getPublicExponent()</code> to <strong>get the mathematical values and encode them</strong> in ASN.1 DER with the structure <a href=""http://tools.ietf.org/html/rfc3447#appendix-A.1"" rel=""nofollow noreferrer"">RSAPublicKey defined in PKCS#1 rfc3447</a> (used for PKIX/X.509 in rfc3279 2.2.1). <code>BigInteger.toByteArray()</code> gives exactly the big-endian signed two's-complement form that ASN.1 wants, so this consists of:
get both <code>.toByteArray()</code> values, add tag=INTEGER (0x02) and length prefixes to each one, then add a tag=SEQUENCE-composite (0x30) and length prefix to their concatenation. Then proceed to step 3.</p>

<p>3) Now you have the bytes constituting a PKCS#1 RSAPublicKey, <strong>convert to PEM</strong>: encode to base64; break into lines (at 64 chars) if needed, or always to be safe; and add ""BEGIN"" and ""END"" lines, unless not needed.</p>
","5233","<java><rsa><x509><public-key>","2","6","1","2015-07-29 01:54:37","31689918","0","2","","","","2015-07-28 19:46:57",""
"5455487","How to find plain text from RSA cipher text","<p>I have a RSA cipher text <code>c</code>, the public key <code>(e,n)</code>. (where <code>c = m^e mod n</code>)</p>

<p>Now I also have known the plain text <code>m</code> should be either <code>""1234XXX""</code> or <code>""12345XXX""</code>, where <code>""XXX""</code> is a 3 digit number.</p>

<p>Can I find which one is right without testing all 3 digits number? (I just want to know if the first part is <code>""1234""</code> or <code>""12345""</code>, and I don't care what the <code>XXX</code> is.)</p>
","<p>You can't do that (it's a sort of know-plain-text attack). You can't derive any information on the key nor on the plain text, given an encrypted RSA message.</p>

<p>(Similar plain text messages don't produce similar encrypted messages)</p>

<p>So in your case, where you have the public key, you are still forced to encrypt all possible plain input messages (brute force), to discover the related encrypted messages.</p>
","5220","<rsa><public-key><encryption-asymmetric><encryption>","1","3","2","2017-04-06 11:50:38","5455575","1","","3478852","","2017-04-06 11:50:38","2011-03-28 06:41:16",""
"5455487","How to find plain text from RSA cipher text","<p>I have a RSA cipher text <code>c</code>, the public key <code>(e,n)</code>. (where <code>c = m^e mod n</code>)</p>

<p>Now I also have known the plain text <code>m</code> should be either <code>""1234XXX""</code> or <code>""12345XXX""</code>, where <code>""XXX""</code> is a 3 digit number.</p>

<p>Can I find which one is right without testing all 3 digits number? (I just want to know if the first part is <code>""1234""</code> or <code>""12345""</code>, and I don't care what the <code>XXX</code> is.)</p>
","<p>Actually, if you use RSA <em>properly</em>, then you cannot even guess your 'XXX' by trying the 1000 possibilities. The core operation in RSA is a modular exponentiation, but there is a first step called <em>padding</em> which transforms the data to encrypt into a big integer (modulo <em>n</em>).</p>

<p>The <a href=""https://www.emc.com/emc-plus/rsa-labs/standards-initiatives/pkcs-rsa-cryptography-standard.htm"" rel=""nofollow noreferrer"">PKCS#1 RSA standard</a> specifies two types of padding; both include a bunch of random bytes. A consequence is the following: if you encrypt twice the same message with the same key, you will get two <em>distinct</em> encrypted messages. The point is, precisely, to avoid the situation which you allude to: being able to ""guess"" the encrypted message and verify whether the guess is right or not, with only the public key (which is public, hence assumed to be known by every attacker).</p>

<p>Therefore, to answer your question: <em>if</em> you can find your 'XXX', either by trying only 1000 RSA encryption, or through any kind of clever shortcut, <em>then</em> your RSA is very wrong.</p>
","5220","<rsa><public-key><encryption-asymmetric><encryption>","1","2","2","2017-04-06 11:50:38","5455575","1","","3478852","","2017-04-06 11:50:38","2011-03-28 06:41:16",""
"28569270","How can I know if a .pem file contains public or private key?","<p>I have a .pem file (base64-encoded cryptography information). What OpenSSL command-line should I use to detect whether it contains a public key or a private key?</p>

<p>As explained in <a href=""https://stackoverflow.com/q/7539625/324969"">this StackOverflow question</a>, a .pem can contain both.</p>

<p>Since the contents of the file are juste garbled base64, when sending a .pem certificate to some other machine, I would like to make sure I'm exporting the public key and not giving out my private key.</p>
","<blockquote>
  <p>I have a .pem file (base64-encoded cryptography information). What OpenSSL command-line should I use to detect whether it contains a public key or a private key?</p>
</blockquote>

<p>In general, you have to inspect the the first line of the PEM file to determine what is present.</p>

<p>OpenSSL can detect a subset of available encoded things (for lack of a better term). You can see the list of what OpenSSL can decode by examining <code>&lt;openssl src&gt;/crypto/pem/pem.h</code>. From the file:</p>

<pre><code>#define PEM_STRING_X509_OLD ""X509 CERTIFICATE""
#define PEM_STRING_X509     ""CERTIFICATE""
#define PEM_STRING_X509_PAIR    ""CERTIFICATE PAIR""
#define PEM_STRING_X509_TRUSTED ""TRUSTED CERTIFICATE""
#define PEM_STRING_X509_REQ_OLD ""NEW CERTIFICATE REQUEST""
#define PEM_STRING_X509_REQ ""CERTIFICATE REQUEST""
#define PEM_STRING_X509_CRL ""X509 CRL""
#define PEM_STRING_EVP_PKEY ""ANY PRIVATE KEY""
#define PEM_STRING_PUBLIC   ""PUBLIC KEY""
#define PEM_STRING_RSA      ""RSA PRIVATE KEY""
#define PEM_STRING_RSA_PUBLIC   ""RSA PUBLIC KEY""
#define PEM_STRING_DSA      ""DSA PRIVATE KEY""
#define PEM_STRING_DSA_PUBLIC   ""DSA PUBLIC KEY""
#define PEM_STRING_PKCS7    ""PKCS7""
#define PEM_STRING_PKCS7_SIGNED ""PKCS #7 SIGNED DATA""
#define PEM_STRING_PKCS8    ""ENCRYPTED PRIVATE KEY""
#define PEM_STRING_PKCS8INF ""PRIVATE KEY""
#define PEM_STRING_DHPARAMS ""DH PARAMETERS""
#define PEM_STRING_SSL_SESSION  ""SSL SESSION PARAMETERS""
#define PEM_STRING_DSAPARAMS    ""DSA PARAMETERS""
#define PEM_STRING_ECDSA_PUBLIC ""ECDSA PUBLIC KEY""
#define PEM_STRING_ECPARAMETERS ""EC PARAMETERS""
#define PEM_STRING_ECPRIVATEKEY ""EC PRIVATE KEY""
#define PEM_STRING_PARAMETERS   ""PARAMETERS""
#define PEM_STRING_CMS      ""CMS""
</code></pre>

<p>Some things will be more difficult than others. For example, its obvious what a <code>RSA PUBLIC KEY</code> is, but its not so obvious what a <code>PUBLIC KEY</code> is. In this case, you do one of two things. First, you ASN.1/DER decode the thing and then look ups its OID if available. Second, you try and load into a data structure that you expect the thing to be.</p>

<p>As an example of the second strategy, you would attempt to load a PEM blob into a RSA private key with <code>PEM_read_bio_RSAPrivateKey</code>. If it succeeds, then its a RSA private key. If its fails, then it may be a damaged RSA private key, or it may be an EC private key, or it may not be a PEM blob.</p>

<hr>

<p>In 2006, a request was made to standardize the names of the things with the PKIX working group. It fell on deaf ears within the IETF. See <a href=""http://www.ietf.org/mail-archive/web/pkix/current/msg03563.html"" rel=""nofollow"">PEM file format rfc draft request</a>.</p>
","5105","<openssl><private-key><public-key><pem>","8","4","2","2017-03-03 08:11:21","","0","","-1","","2017-05-23 12:09:14","2015-02-17 19:12:14",""
"28569270","How can I know if a .pem file contains public or private key?","<p>I have a .pem file (base64-encoded cryptography information). What OpenSSL command-line should I use to detect whether it contains a public key or a private key?</p>

<p>As explained in <a href=""https://stackoverflow.com/q/7539625/324969"">this StackOverflow question</a>, a .pem can contain both.</p>

<p>Since the contents of the file are juste garbled base64, when sending a .pem certificate to some other machine, I would like to make sure I'm exporting the public key and not giving out my private key.</p>
","<p>As a practical approximation that should catch most (all?) human mistakes I would recommend just <a href=""https://linux.die.net/man/1/file"" rel=""nofollow noreferrer"">file</a> and <a href=""https://linux.die.net/man/1/grep"" rel=""nofollow noreferrer"">grep</a>:</p>

<pre><code>(file $KEYFILE | grep -i private &gt;/dev/null) &amp;&amp; echo Private || echo Public-or-unknown
</code></pre>

<p>To screen some key material before it goes out:</p>

<pre><code> for f in *; do (file $f | grep -i private &gt;/dev/null) &amp;&amp; file $f; done
</code></pre>

<p>Empty output = hopefully no secrets, can proceed.</p>
","5105","<openssl><private-key><public-key><pem>","8","2","2","2017-03-03 08:11:21","","0","","-1","","2017-05-23 12:09:14","2015-02-17 19:12:14",""
"10055858","Verify user's private key for website login","<p>I'm trying to implement a login system to sign into a website using public key authentication. I'm not sure if this is feasible.</p>

<p>This is what I plan to do:-</p>

<ol>
<li>While signing up, user's public key is saved in the website.</li>
<li>When the user tries to login later, the website asks the user for his corresponding private key.</li>
<li>User is authenticated if the private key matches the public key which the user provided while signing up.</li>
</ol>

<p>I have seen sites like startssl.com asking for user's private key to verify their identity (see the screenshot attached). So what does it takes to implement such a system?</p>

<p><img src=""https://i.stack.imgur.com/I2spO.png"" alt=""Screenshot of website asking for private key""></p>
","<p>Just to clarify the flow</p>

<ol>
<li>The user signs up, using the plain old username and password pair. He is also asked to enter at least one public key (other ones can be added later from a profile administration panel)</li>
<li>The server stores the user's public key and associates it with its user in a certificate</li>
<li>Next time the client makes a request presenting his certificate (this should be handled by the browser, thus happening transparently to the user), the SSL engine on the server side checks if it <em>knows</em> the client and if it does the request is processed and the <em>application</em> code will authenticate and authorize the user since it knows the link between a public key and an user. If the client is <strong>not</strong> identified, the server should redirect to some page to allow signin up or manual login (maybe to add a new public key)</li>
</ol>
","5055","<authentication><web><public-key-encryption><public-key>","14","6","1","2014-08-13 15:35:53","10056208","4","8","","","","2012-04-07 15:47:48",""
"19243829","PHP openssl_public_encrypt “key parameter is not a valid key”","<p>I have my public key in a file named , publickey.key 
and the content of that file is this,</p>

<pre><code>MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtixUGzGpLXgZ7AV1HfmIHV/FEF+fww77FekRc2oLhUOd4HitwCPo76fjtdsQBEt8w9HZ3CXVphaAU2BA6MEZJ3ShVMsdAXb2ZA1C+lu7k1GV9M/BhucTg35HujSK647Sc5MwVLwFsN80dAnGsZF8gwb2TNUzXHwzbAb30T01zuqf8RCM75OwKZFYqzu7FOVrtk/w9mh92MOXG0l7WSqNIctu8Kxka/tEJJIA5nqMGNMocjwprXy66NS7FFy1GY+NnxfFLtODqq0tllc50UCDsnqSvNmj2wcnAcsCzNOoxPPgp7t8S+sQvOzgc5W3CDjIsYEiGD+vzSVNkGiRou577wIDAQAB
</code></pre>

<p>/////// And in my .php file i am following below steps to encrypt my string using this public key</p>

<pre><code>$fp=fopen (""publickey.key"",""r"");
    $publicKey=fread($fp,8192);
    fclose($fp);
$encrypted = '';
$secret='what i want to encrypt';

    if (!openssl_public_encrypt($secret, $encrypted, $publicKey)) 
    {   
        die('Failed to encrypt data');
    }
</code></pre>

<p>but i am getting this error.</p>

<p>Warning: openssl_public_encrypt() [function.openssl-public-encrypt]: key parameter is not a valid public key in......</p>

<p>Is there some thing that i am doing wrong in my code?
Help Please!</p>
","<p>You probably need to add <code>-----BEGIN RSA PUBLIC KEY-----</code> and <code>-----END RSA PUBLIC KEY-----</code> before and after the key blob. And you might need to use chunk_split, too, because <a href=""https://stackoverflow.com/a/13908986/569976"">OpenSSL is pretty picky</a>.</p>

<p>Really, though, I'd recommend using <a href=""http://phpseclib.sourceforge.net/rsa/intro.html"" rel=""nofollow noreferrer"">phpseclib, a pure PHP RSA implementation</a>. It has much more versatile key handling, among other things.</p>
","4950","<php><openssl><public-key>","1","1","1","2013-10-08 19:27:01","","0","","569976","","2013-10-08 19:24:54","2013-10-08 09:23:47",""
"10362965","How to get public key using PyOpenSSL?","<p>I'm tring to create python script, that would take PKCS#12 package and print some information contained in x509 certificate and using for this purpouses PyOpenSSL module. So far i want to fetch from certificate public key. But PKey object doesn't have appropriate method. Where can I move out of here ? Any ideas how to get public key ?</p>

<pre><code>pfx=open('./1.p12','rb').read()
PKCS=crypto.load_pkcs12(pfx)
cert=PKCS.get_certificate()
PKey=cert.get_pubkey()

print PKey
&lt;OpenSSL.crypto.PKey object at 0x012432D8&gt;
</code></pre>

<p>Thanks.</p>
","<p>Would this work?</p>

<pre><code>print PKey
&lt;OpenSSL.crypto.PKey object at 0x012432D8&gt;

from OpenSSL import crypto

crypto.dump_privatekey(PKey)
</code></pre>
","4917","<python><x509><public-key>","6","-2","3","2017-07-18 13:53:47","","2","","","","","2012-04-28 11:11:59",""
"10362965","How to get public key using PyOpenSSL?","<p>I'm tring to create python script, that would take PKCS#12 package and print some information contained in x509 certificate and using for this purpouses PyOpenSSL module. So far i want to fetch from certificate public key. But PKey object doesn't have appropriate method. Where can I move out of here ? Any ideas how to get public key ?</p>

<pre><code>pfx=open('./1.p12','rb').read()
PKCS=crypto.load_pkcs12(pfx)
cert=PKCS.get_certificate()
PKey=cert.get_pubkey()

print PKey
&lt;OpenSSL.crypto.PKey object at 0x012432D8&gt;
</code></pre>

<p>Thanks.</p>
","<p>Instead use:</p>

<pre><code>c.dump_privatekey(c.FILETYPE_TEXT,pubkey)
</code></pre>
","4917","<python><x509><public-key>","6","-2","3","2017-07-18 13:53:47","","2","","","","","2012-04-28 11:11:59",""
"10362965","How to get public key using PyOpenSSL?","<p>I'm tring to create python script, that would take PKCS#12 package and print some information contained in x509 certificate and using for this purpouses PyOpenSSL module. So far i want to fetch from certificate public key. But PKey object doesn't have appropriate method. Where can I move out of here ? Any ideas how to get public key ?</p>

<pre><code>pfx=open('./1.p12','rb').read()
PKCS=crypto.load_pkcs12(pfx)
cert=PKCS.get_certificate()
PKey=cert.get_pubkey()

print PKey
&lt;OpenSSL.crypto.PKey object at 0x012432D8&gt;
</code></pre>

<p>Thanks.</p>
","<p>First you can load the certificate like this</p>

<pre><code>from OpenSSL import crypto

#cert is the encrypted certificate int this format -----BEGIN -----END    
crtObj = crypto.load_certificate(crypto.FILETYPE_PEM, cert)
pubKeyObject = crtObj.get_pubkey()
pubKeyString = crypto.dump_publickey(crypto.FILETYPE_PEM,pubKeyObject)
print pubKeyString
</code></pre>

<p>you will see something like </p>

<pre><code>-----BEGIN PUBLIC KEY----- 
....
....
-----END PUBLIC KEY-----
</code></pre>
","4917","<python><x509><public-key>","6","4","3","2017-07-18 13:53:47","","2","","","","","2012-04-28 11:11:59",""
"36603769","How do I configure ProFTPD as a SFTP-only server with system users, PK auth, and custom umasks?","<p>So, I managed to configure ProFTPD to allow password login for system users. I have two issues: <strong>umask</strong> and <strong>pk auth</strong>.</p>

<pre><code>Include /etc/proftpd/modules.conf

UseIPv6             on
ServerName          ""Debian""
ServerType          standalone
MultilineRFC2228    on
DefaultServer       on
Port                21
PassivePorts        49152 49407
MaxInstances        30
SystemLog           /var/log/proftpd/proftpd.log

&lt;IfModule mod_ctrls.c&gt;
    ControlsEngine      off
    ControlsMaxClients  2
    ControlsLog         /var/log/proftpd/controls.log
    ControlsInterval    5
    ControlsSocket      /var/run/proftpd/proftpd.sock
&lt;/IfModule&gt;

&lt;IfModule mod_ctrls_admin.c&gt;
    AdminControlsEngine off
&lt;/IfModule&gt;

&lt;Global&gt;
    UseFtpUsers         on
    IdentLookups        off
    DeferWelcome        off
    ShowSymlinks        on
    TimeoutNoTransfer   600
    TimeoutStalled      600
    TimeoutIdle         1200
    DisplayLogin        welcome.msg
    DisplayChdir        .message true
    ListOptions         ""-l""
    DenyFilter          \*.*/
    DefaultRoot         ~
    RequireValidShell   off
    User                proftpd
    Group               nogroup
    Umask               007 007
    AllowOverwrite      on
    # AuthOrder           mod_sql.c
    CreateHome          on
    TransferLog         /var/log/proftpd/xferlog

    &lt;IfModule mod_quotatab.c&gt;
        QuotaEngine off
    &lt;/IfModule&gt;

    &lt;IfModule mod_ratio.c&gt;
        Ratios off
    &lt;/IfModule&gt;

    &lt;IfModule mod_delay.c&gt;
        DelayEngine on
    &lt;/IfModule&gt;

    &lt;IfModule mod_xfer.c&gt;
        MaxStoreFileSize    70 Mb
        HiddenStores        on
        DeleteAbortedStores on
    &lt;/IfModule mod_xfer.c&gt;

    &lt;Directory /htdocs/*/&gt;
        Umask 0007
        &lt;Limit MKD XMKD RMD XRMD SITE_CHMOD&gt;
            DenyUser !ftpadmin
        &lt;/Limit&gt;
    &lt;/Directory&gt;
&lt;/Global&gt;

Include /etc/proftpd/sftp.conf
</code></pre>

<p>and <code>sftp.conf</code> is as follows</p>

<pre><code>&lt;IfModule mod_sftp.c&gt;
    &lt;VirtualHost $(hostname)&gt;
        Port 23
        SFTPEngine on
        SFTPAuthorizedUserKeys file:/home/%u/.ssh/authorized_keys
        SFTPHostKey /etc/ssh/ssh_host_dsa_key
        SFTPHostKey /etc/ssh/ssh_host_rsa_key
        SFTPHostKey /etc/ssh/ssh_host_ecdsa_key
        SFTPCompression delayed
        SFTPLog /var/log/proftpd/sftp.log
    &lt;/VirtualHost&gt;
&lt;/IfModule mod_sftp.c&gt;
</code></pre>

<p><strong>[umask]</strong> However, when a user logs in and <code>put</code>s a file, the uploaded file takes the permissions that it had originally (I'm testing using OS X and Linux as clients, so that makes sense). I have not tested the pure FTP solution, but I'd rather provide SFTP.</p>

<p><strong>[pk auth]</strong> When I attempt a PK authentication, the client correctly offers the right key, and says</p>

<pre><code>debug2: we sent a publickey packet, wait for reply
debug1: Server accepts key: pkalg ssh-rsa blen 535
debug2: input_userauth_pk_ok: fp SHA256:Eft1LIOozSylL20lfMc9gUdl3gKtd0zEdeyNtCb1p8Q
</code></pre>

<p>but then concludes with</p>

<pre><code>debug1: Authentications that can continue: password
</code></pre>

<p>which confuses me to no end. On the server side, I have</p>

<pre><code>no account for user 'sftpuser' found
sending userauth failure; remaining userauth methods: password
</code></pre>

<p>which is funny because the user does indeed exist (and can successfully perform a password login). I even converted my OpenSSH key to the RFC4716 format that ProFTPD appears to prefer.</p>

<p>I admit I have a grand total of about 4 hours of experience with ProFTPD, but I've been reading all I could, and the config files make sense to me. This all is running in a Docker container. What am I missing?</p>
","<p>Unlike FTP, SFTP uploads often contain their own permissions <em>as part of the SFTP <code>OPEN</code> request</em>.  To make SFTP uploads behave more like FTP uploads, with regard to ProFTPD configuration (<em>e.g.</em> <code>Umask</code>), you want to configure <code>mod_sftp</code> to <em>ignore</em> the upload permissions using the <code>IgnoreSFTPUploadPerms</code> <a href=""http://www.proftpd.org/docs/contrib/mod_sftp.html#SFTPOptions"" rel=""nofollow""><code>SFTPOptions</code></a>:</p>

<pre><code>&lt;IfModule mod_sftp.c&gt;
  ...
  SFTPOptions IgnoreSFTPUploadPerms
  ...
&lt;/IfModule&gt;
</code></pre>

<p>For the publickey authentication issue, the <code>SFTPLog</code> you configured should have more clues as to what might be the issue.  Perhaps the configured file does not exist, or does not have the necessary permissions?  Keep in mind that <code>~/.ssh/authorized_keys</code> is often used by OpenSSH, <em>and</em> that the format that file is different that what ProFTPD desires.  For that reason, I often use:</p>

<pre><code>SFTPAuthorizedUserKeys file:~/.sftp/authorized_keys
</code></pre>

<p><em>i.e.</em> a <em>different</em> file from what OpenSSH wants, in a different format (RFC 4716), to avoid any possible confusion/collision.</p>

<p>Hope this helps!</p>
","4911","<sftp><public-key><proftpd>","3","2","1","2017-09-09 14:45:52","36610330","3","1","554491","","2017-09-09 14:45:52","2016-04-13 15:59:22",""
"11160652","ssh permission denied (publickey) when trying to access ec2 from different computer","<p>I am trying to access an ec2 instance using a different (mac) computer. In order to do so, I created a new keypair, used chmod 600 to set the permission, and then used ssh-add. When I try to ssh into my ec2 instance, I get ""permission denied (publickey)"". I'm sure my error is something idiotic and simple, but I can't seem to find it, can anyone help me out? </p>
","<p>is your private key on the new computer? </p>

<p>You need to put that on the computer you ssh in with.  I usually keep mine on a flash drive....  I am not running linux atm so i forget the default directory it checks.  Maybe this joggs your memory some.  I think the directory would be like  ~/.id_rsa/   or something?</p>
","4826","<ssh><amazon-ec2><public-key>","0","1","2","2012-06-22 16:56:12","11160762","0","1","","","","2012-06-22 16:48:08",""
"11160652","ssh permission denied (publickey) when trying to access ec2 from different computer","<p>I am trying to access an ec2 instance using a different (mac) computer. In order to do so, I created a new keypair, used chmod 600 to set the permission, and then used ssh-add. When I try to ssh into my ec2 instance, I get ""permission denied (publickey)"". I'm sure my error is something idiotic and simple, but I can't seem to find it, can anyone help me out? </p>
","<p>You need to ensure the <code>~/.ssh/id_rsa.pub</code> (if it's an RSA key) from your Mac is appended to the <code>~/.ssh/authorized_keys</code> file on the target machine.  Normally, if this is a default Amazon API, the user is ""ec2-user"" -- <code>~ec2-user/.ssh/authorized_keys</code></p>

<p><strong>REMEMBER TO APPEND</strong> and not remove other entries in that file -- else, you risk locking yourself out of that machine ... </p>
","4826","<ssh><amazon-ec2><public-key>","0","2","2","2012-06-22 16:56:12","11160762","0","1","","","","2012-06-22 16:48:08",""
"30945722","Converting byte array to publickey ECDSA","<p>I need to use ECDSA algorithm to sign a message and send to receiver in java. Then, receiver should verify sender's signature.</p>

<p>So, for this, receiver has sender's public key but in byte array format after converting <code>java.security.PublicKey</code> to byte array by the command bellow:</p>

<pre><code>byte[] byteArrayPublicKey = publickey.getEncoded();
</code></pre>

<p>The format of public key in ECDSA algorithm (before converting it to byte array) is as follow:</p>

<p>Public Key:</p>

<pre><code>X: 8a83c389e7bb817c17bf2db4ed71055f18342b630221b2a3a1ca752502dc2e21

Y: 3eaf48c9ab1700fe0966a0cde196b85af66bb8f0bacef711c9dca2368f9d8470
</code></pre>

<p>But, the problem is to convert this byte array to usable format to verify the signature that is <code>java.security.PublicKey</code> by receiver. </p>

<p>In general, is there any solution to verify the signature without converting it to byte array? In the other word, the problem is to verify the signature by sender's public key, using any method.</p>
","<blockquote>
  <p>But, the problem is to convert this byte array to usable format to verify the signature that is java.security.PublicKey by receiver.</p>
</blockquote>

<p>You can solve the problem like this way:</p>

<pre><code>public static ECPublicKey genEcPubKey() throws Exception {
    KeyFactory factory = KeyFactory.getInstance(""ECDSA"", ""BC"");
    java.security.PublicKey ecPublicKey = (ECPublicKey) factory
            .generatePublic(new X509EncodedKeySpec(Helper
                    .toByte(ecRemotePubKey))); // Helper.toByte(ecRemotePubKey)) is java.security.PublicKey#getEncoded()
    return (ECPublicKey) ecPublicKey;
}
</code></pre>

<p>Note that, you need <a href=""https://www.bouncycastle.org/latest_releases.html"" rel=""nofollow"">BouncyCastle</a> provider to do that.</p>

<p>But question remains, how you generate the private key?</p>

<pre><code>public KeyPair ecKeyPairGenerator(String curveName) throws Exception {
    KeyPair keyPair;
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(
            ""ECDSA"", ""BC"");
    ECGenParameterSpec ecGenParameterSpec = new ECGenParameterSpec(
            curveName);
    keyPairGenerator.initialize(ecGenParameterSpec, new SecureRandom());
    keyPair = keyPairGenerator.generateKeyPair();
    java.security.PublicKey ecPublicKey = (ECPublicKey) keyPair.getPublic();
    System.out.println(""JAVA EC PublicKey: ""
            + Helper.toHex(ecPublicKey.getEncoded()));

    // write private key into a file. Just for testing purpose
    FileOutputStream fileOutputStream = new FileOutputStream(
            ""ECPrivateKey.key"");
    ObjectOutputStream objectOutputStream = new ObjectOutputStream(
            fileOutputStream);
    objectOutputStream.writeObject(keyPair.getPrivate());
    objectOutputStream.close();
    return keyPair;
}
</code></pre>

<p>I have the full running code for EC sign/verify in <a href=""https://github.com/rakeb/ECPSingVerify"" rel=""nofollow"">github</a>. You can take a look for better understanding.</p>
","4753","<java><key><signature><public-key><ecdsa>","2","3","1","2015-06-20 18:06:40","30947243","1","0","5029509","","2015-06-20 18:06:40","2015-06-19 19:16:43",""
"18983041","publickey-authentication on git/stash for ssh not working","<p>I'm trying to work with git/stash but I'm having a bit of a problem with the publickey-authentication. Here's what happens:</p>

<p><code>hannibal</code> is a user on the stash-server. <code>hannibal</code> has read/write-permission for one repository and an ssh-publickey added to his stash-account. I now create a repository via</p>

<pre><code>git init
</code></pre>

<p>and <code>add</code> &amp; <code>commit</code> a test file <code>test</code>.
Then I want to add the stash-repository as origin</p>

<pre><code>git remote add origin hannibal@stash:7999/path/to/repository.git
</code></pre>

<p>which yields no further output. Now I try to <code>push</code></p>

<pre><code>git push origin master
</code></pre>

<p>which in turn asks me for the password (which is strange, since it should authenticate via publickey). I enter the password and the following error message displays on the screen:</p>

<pre><code>Could not chdir to home directory /home/hannibal: No such file or directory
fatal: '7999/path/to/repository.git' does not appear to be a git repository
fatal: The remote end hung up unexpectedly
</code></pre>

<p>The URL is definitely correct, since it's the one that stash gives me. Also ssh is enabled on the stash-server. What am I missing here?</p>
","<p>The URL for ssh remotes should be prefixed with ssh:// and the username should be git (Stash will find the correct key for your hannibal user automatically). The full form of the URL is:</p>

<pre><code>ssh://git@server:7999/project/repo.git
</code></pre>

<p>For http URLs, you use the username and the http port (7990 by default)</p>
","4752","<git><ssh><public-key><bitbucket-server>","2","6","1","2013-09-25 03:11:08","18995550","2","","1761499","","2013-09-24 13:55:38","2013-09-24 13:30:38",""
"25978461","StrictHostKeyChecking config on PSFTP.EXE","<p>I come accross <code>StrictHostKeyChecking</code> configuration when I needed to setup <code>sftp</code> communication between two servers (e.g. Windows Server ---> Linux Server). As defined <a href=""http://www.computerhope.com/unix/sftp.htm"" rel=""nofollow"">here</a> (use find for string match ""StrictHostKeyChecking""): </p>

<p>If this flag is set to “yes”, ssh will never automatically add host keys to the ~/.ssh/known_hosts file, and refuses to connect to hosts whose host key has changed. This option forces the user to manually add all new hosts. If this flag is set to “no”, ssh will automatically add new host keys to the user known hosts files.</p>

<p>I want to use <code>PSFTP.EXE</code> to transfer files to the Unix server from Windows machine and there is obviously no concept of <code>~/.ssh/known_hosts</code>. My question is then...what is the equivalent for <code>StrictHostKeyChecking</code> for <code>PSFTP.EXE</code>. Is it simple <code>-batch</code> which avoids interactive prompts ?</p>
","<p>By default all PuTTY tools (including <code>psftp</code>) behave as <code>StrictHostKeyChecking=ask</code>.</p>

<p>With <code>-batch</code>, <code>psftp</code> (and <code>pscp</code> and <code>plink</code>) behave as <code>StrictHostKeyChecking=yes</code>. 
If you use this switch and <code>psftp</code> finds that server's host key has changed you will get:</p>

<blockquote>
  <p>WARNING - POTENTIAL SECURITY BREACH! The server's host key does not
  match the one PuTTY has cached in the registry. This means that either
  the server administrator has changed the host key, or you have
  actually connected to another computer pretending to be the server.<br>
  The new ... key fingerprint is:<br>
  ...<br>
  <strong>Connection abandoned.</strong></p>
</blockquote>

<p>While without the switch (the default behavior), you will get an interactive prompt.</p>

<p>Likewise for the host key of a new server.</p>

<p>The <code>psftp</code> (nor any other PuTTY tool) <strong>never</strong> behaves as <code>StrictHostKeyChecking=no</code>.  </p>

<p>Obviously the <code>-batch</code> affects all other prompts too, not just host key prompts (comparing with <code>StrictHostKeyChecking</code>). There are these prompts in <code>psftp</code> (<code>pscp</code> and <code>plink</code>):</p>

<ul>
<li>Username, passphrase, password, password change and keyboard-interactive prompts (connection aborts with <code>-batch</code>)</li>
<li>Insecure algorithm prompt (the same behavior as with host key prompt)</li>
<li>Append to existing log file? (logging is disabled with <code>-batch</code> when log file already exists and <em>Ask user every time</em> option is enabled for <em>What to do if the log file already exists</em>)</li>
</ul>
","4733","<ssh><sftp><putty><public-key>","1","2","1","2014-09-23 11:19:21","25980687","0","1","850848","","2014-09-23 11:19:21","2014-09-22 16:06:49",""
"2796303","Maven won't use public key to deploy","<p>I'm using SSH to deploy my Java artifacts to a server. I have the keys set up so that I can interactively SSH to the server without requiring a password, but when I try to run the ""<code>mvn deploy</code>"" or ""<code>mvn release:perform</code>"" commands, it hangs (at what I assume is the password prompt).</p>

<p>My <code>~/.m2/settings.xml</code> file contains the username for the server (because it is different than my local username) and references the <code>id</code> of the server that requires the different user.</p>
","<p>Are you sure your <code>settings.xml</code> provides everything required? Did you declare your <code>privateKey</code> (and the <code>passphrase</code> if necessary)? Something like this:</p>

<pre><code>&lt;settings xmlns=""http://maven.apache.org/SETTINGS/1.0.0""
  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xsi:schemaLocation=""http://maven.apache.org/SETTINGS/1.0.0
                      http://maven.apache.org/xsd/settings-1.0.0.xsd""&gt;
  ...
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;server001&lt;/id&gt;
      &lt;username&gt;my_login&lt;/username&gt;
      &lt;privateKey&gt;${user.home}/.ssh/id_dsa&lt;/privateKey&gt;
      &lt;passphrase&gt;some_passphrase&lt;/passphrase&gt; &lt;!-- if required --&gt;
      &lt;filePermissions&gt;664&lt;/filePermissions&gt;
      &lt;directoryPermissions&gt;775&lt;/directoryPermissions&gt;
      &lt;configuration&gt;&lt;/configuration&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
  ...
&lt;/settings&gt;
</code></pre>
","4729","<java><maven-2><ssh><public-key>","10","10","2","2010-06-30 23:46:10","2796343","0","2","70604","","2010-05-09 01:52:18","2010-05-09 01:32:55",""
"2796303","Maven won't use public key to deploy","<p>I'm using SSH to deploy my Java artifacts to a server. I have the keys set up so that I can interactively SSH to the server without requiring a password, but when I try to run the ""<code>mvn deploy</code>"" or ""<code>mvn release:perform</code>"" commands, it hangs (at what I assume is the password prompt).</p>

<p>My <code>~/.m2/settings.xml</code> file contains the username for the server (because it is different than my local username) and references the <code>id</code> of the server that requires the different user.</p>
","<p>In your distributionManagement section, try using ""scpexe://"" in your url instead of ""scp://"".</p>

<p>This calls the standard scp program (assuming it is on your path), instead of using the Java implementation of scp that is built into Maven. Standard scp uses ssh-agent (which, in Ubuntu, starts automatically when you log in through GDM) for public-key auth.</p>
","4729","<java><maven-2><ssh><public-key>","10","5","2","2010-06-30 23:46:10","2796343","0","2","70604","","2010-05-09 01:52:18","2010-05-09 01:32:55",""
"4828818","Obtaining public key from SubjectPublicKeyInfo","<p>I'm trying to get the public key from a SubjectPublicKeyInfo.However when I try:</p>

<pre><code>PublicKey publicKey = k.generatePublic(keypsec);

byte[] encoded=publicKey.getEncoded();
SubjectPublicKeyInfo subPkInfo2 = new SubjectPublicKeyInfo(rsaEncryption, encoded);     
RSAPublicKeyStructure  pubKey = new RSAPublicKeyStructure((ASN1Sequence)subPkInfo2.getPublicKey());
</code></pre>

<p>It throws this </p>

<pre><code>java.lang.IllegalArgumentException: illegal object in getInstance: org.bouncycastle.asn1.DERSequence
    at org.bouncycastle.asn1.DERInteger.getInstance(DERInteger.java:37)
    at org.bouncycastle.asn1.x509.RSAPublicKeyStructure.&lt;init&gt;(RSAPublicKeyStructure.java:63)
</code></pre>

<p>Any ideas? I've tried PubliKeyFactory but it simply calls the last line.</p>
","<p>Well I shall answer my own question:</p>

<pre><code>byte[] encoded=publicKey.getEncoded();
SubjectPublicKeyInfo subPkInfo2 = new SubjectPublicKeyInfo(rsaEncryption, encoded); 
</code></pre>

<p>This is wrong. PublicKey is already an ASN1typeSubjectpublicKeyInfo. In order to create a SubjectPublicKeyInfo with this function</p>

<p><code>SubjectPublicKeyInfo(AlgorithmIdentifier algId, byte[] publicKey)</code></p>

<p>you need an Algortihm identifier and THE KEY ITSELF in encoded form. publicKey.getEncoded() is an encoded KEY + THE ALGORITHM IDENTIFIER.</p>

<p>Anyway. If you want to tranfosrm a SATSA public key to a Subject Public Key Info you do this:</p>

<pre><code>byte[] publickeyb=SATSApublickey.getEncoded();
    SubjectPublicKeyInfo subPkInfo = new SubjectPublicKeyInfo((ASN1Sequence)ASN1Object.fromByteArray(publickeyb));
</code></pre>

<p>And if you want to get your public key as RSAkeyparameters from the SubjectPublicKeyInfo </p>

<pre><code>RSAKeyParameters param=(RSAKeyParameters) PublicKeyFactory.createKey(subPkInfo);
</code></pre>
","4704","<java-me><bouncycastle><public-key>","0","4","1","2015-04-10 22:54:41","","0","1","642653","","2015-04-10 22:54:41","2011-01-28 13:37:40",""
"3168415","Most Effective Public Key Encryption Method","<p>There seems to be a lot of hype about asymmetric Public Key encryption. RSA, PGP... etc. You have a set of two keys and distribute one, so that either only you can encrypt the message <em>or</em> only you can decrypt the message. One method provides a way to verify the sender, while the other provides a way to secure the message. (Feel free to correct me if I am wrong.)</p>

<p>Now, I have also been reading about the Diffie-Hellman class of Key-Exchanges. This <em>seems</em> to be more secure as you can verify the sender and secure the message with the keys as each 'conversation' requires a computed 'shared key'.</p>

<p>So, my question is, are there any major disadvantages (besides the setup requirements) to using Diffie-Hellman over a more standard form of public key encryption?</p>

<p>Or, to put it more bluntly. If Diffie-Hellman makes more sense, why isn't <em>it</em> the standard form of encryption?</p>
","<p>The symmetrical encryption is by orders of magnitude faster / less computationally intensive than PKI. Also, there are differences in key size. As the encryption / decryption must happen not only on server side where CPU power and RAM is no problem, on client side you may have mobile device that is much more limited.</p>
","4634","<security><language-agnostic><encryption><performance><public-key>","3","3","7","2010-07-05 04:03:04","3168664","0","1","","","","2010-07-02 18:59:32",""
"3168415","Most Effective Public Key Encryption Method","<p>There seems to be a lot of hype about asymmetric Public Key encryption. RSA, PGP... etc. You have a set of two keys and distribute one, so that either only you can encrypt the message <em>or</em> only you can decrypt the message. One method provides a way to verify the sender, while the other provides a way to secure the message. (Feel free to correct me if I am wrong.)</p>

<p>Now, I have also been reading about the Diffie-Hellman class of Key-Exchanges. This <em>seems</em> to be more secure as you can verify the sender and secure the message with the keys as each 'conversation' requires a computed 'shared key'.</p>

<p>So, my question is, are there any major disadvantages (besides the setup requirements) to using Diffie-Hellman over a more standard form of public key encryption?</p>

<p>Or, to put it more bluntly. If Diffie-Hellman makes more sense, why isn't <em>it</em> the standard form of encryption?</p>
","<p>I might be wrong, but the algorithm described at wikipedia looks to me like a pulic key encryption.</p>

<p>Both parties choose a secret (private key) and share another key, which is related to the private key (this is the public key).</p>

<p>Just in order to provide a somewhat complete picture:
In real world algorithm  Public Key encryption is used to exchange a secret, which then is used to encrypt the main communication with a symmetric algorithm, which is much faster the PK encryption</p>
","4634","<security><language-agnostic><encryption><performance><public-key>","3","0","7","2010-07-05 04:03:04","3168664","0","1","","","","2010-07-02 18:59:32",""
"3168415","Most Effective Public Key Encryption Method","<p>There seems to be a lot of hype about asymmetric Public Key encryption. RSA, PGP... etc. You have a set of two keys and distribute one, so that either only you can encrypt the message <em>or</em> only you can decrypt the message. One method provides a way to verify the sender, while the other provides a way to secure the message. (Feel free to correct me if I am wrong.)</p>

<p>Now, I have also been reading about the Diffie-Hellman class of Key-Exchanges. This <em>seems</em> to be more secure as you can verify the sender and secure the message with the keys as each 'conversation' requires a computed 'shared key'.</p>

<p>So, my question is, are there any major disadvantages (besides the setup requirements) to using Diffie-Hellman over a more standard form of public key encryption?</p>

<p>Or, to put it more bluntly. If Diffie-Hellman makes more sense, why isn't <em>it</em> the standard form of encryption?</p>
","<p>Diffie-Hellman key agreement provides a way of establishing a common secret key which is virtually impossible to determine by <strong>passive</strong> adversaries, i.e. people who only listen to the communications. </p>

<p>However, basic D-H is vulnerable to <a href=""http://en.wikipedia.org/wiki/Man-in-the-middle_attack"" rel=""nofollow noreferrer"">man-in-the-middle</a> attacks. In other words, you can establish a shared secret key, but in the presence of <strong>active</strong> adversaries you don't know with <em>whom</em> you share the key. </p>

<p>That's where the public key cryptography has its place. When you have a <em>genuine</em> public key of someone, you can be sure that the encrypted data can be read only by that person. </p>

<p>Making sure that a given public key really belongs to someone is a separate issue and is solved e.g. by <a href=""http://en.wikipedia.org/wiki/Public_key_infrastructure"" rel=""nofollow noreferrer"">Public Key Infrastructure</a>.</p>
","4634","<security><language-agnostic><encryption><performance><public-key>","3","5","7","2010-07-05 04:03:04","3168664","0","1","","","","2010-07-02 18:59:32",""
"3168415","Most Effective Public Key Encryption Method","<p>There seems to be a lot of hype about asymmetric Public Key encryption. RSA, PGP... etc. You have a set of two keys and distribute one, so that either only you can encrypt the message <em>or</em> only you can decrypt the message. One method provides a way to verify the sender, while the other provides a way to secure the message. (Feel free to correct me if I am wrong.)</p>

<p>Now, I have also been reading about the Diffie-Hellman class of Key-Exchanges. This <em>seems</em> to be more secure as you can verify the sender and secure the message with the keys as each 'conversation' requires a computed 'shared key'.</p>

<p>So, my question is, are there any major disadvantages (besides the setup requirements) to using Diffie-Hellman over a more standard form of public key encryption?</p>

<p>Or, to put it more bluntly. If Diffie-Hellman makes more sense, why isn't <em>it</em> the standard form of encryption?</p>
","<p>The main problem that you have to be aware of with the Diffie-Hellman method of communication is that it is vulnerable to the Man-in-the-Middle attack. </p>

<p>This is not possible with RSA, because only the person who created the public key can decrypt the message, thus you can say with complete confidence that the right person is reading the message.</p>

<p>Diffie Hellman is very useful for secure two way communication with someone, so long as you are not too concerned with who that someone is.</p>
","4634","<security><language-agnostic><encryption><performance><public-key>","3","0","7","2010-07-05 04:03:04","3168664","0","1","","","","2010-07-02 18:59:32",""
"3168415","Most Effective Public Key Encryption Method","<p>There seems to be a lot of hype about asymmetric Public Key encryption. RSA, PGP... etc. You have a set of two keys and distribute one, so that either only you can encrypt the message <em>or</em> only you can decrypt the message. One method provides a way to verify the sender, while the other provides a way to secure the message. (Feel free to correct me if I am wrong.)</p>

<p>Now, I have also been reading about the Diffie-Hellman class of Key-Exchanges. This <em>seems</em> to be more secure as you can verify the sender and secure the message with the keys as each 'conversation' requires a computed 'shared key'.</p>

<p>So, my question is, are there any major disadvantages (besides the setup requirements) to using Diffie-Hellman over a more standard form of public key encryption?</p>

<p>Or, to put it more bluntly. If Diffie-Hellman makes more sense, why isn't <em>it</em> the standard form of encryption?</p>
","<p>The main problem with RSA is that it is slow. In fact, what early versions of PGP did (I'm not sure what modern versions do, possibly it has not changed) was use Diffie-Hellman key exchange to distribute the key to some fast symmetric cipher, and then just use that for the main body of the message. </p>
","4634","<security><language-agnostic><encryption><performance><public-key>","3","0","7","2010-07-05 04:03:04","3168664","0","1","","","","2010-07-02 18:59:32",""
"3168415","Most Effective Public Key Encryption Method","<p>There seems to be a lot of hype about asymmetric Public Key encryption. RSA, PGP... etc. You have a set of two keys and distribute one, so that either only you can encrypt the message <em>or</em> only you can decrypt the message. One method provides a way to verify the sender, while the other provides a way to secure the message. (Feel free to correct me if I am wrong.)</p>

<p>Now, I have also been reading about the Diffie-Hellman class of Key-Exchanges. This <em>seems</em> to be more secure as you can verify the sender and secure the message with the keys as each 'conversation' requires a computed 'shared key'.</p>

<p>So, my question is, are there any major disadvantages (besides the setup requirements) to using Diffie-Hellman over a more standard form of public key encryption?</p>

<p>Or, to put it more bluntly. If Diffie-Hellman makes more sense, why isn't <em>it</em> the standard form of encryption?</p>
","<p>Symmetric and asymmetric ciphers are two completely different things. You cannot directly compare them.</p>

<p>Symmetric ciphers are used to encrypt a message with a shared secret. These are algorithms such as DES, AES, blowfish, etc.</p>

<p>Asymmetric ciphers deal with an other issue, namely key-sharing and signatures. By being able to have a public key, it is possible to distribute that key through a channel that cannot be modified. Others can read the key; as long as they cannot alter it there is no problem.</p>

<p>If others can alter the messages (this is usually the case anywhere) then it becomes more complicated. Then you need to use digital signatures. There is basically a central authority who signs public keys (certificates are also public keys). Everybody has the public keys of the certificate authority pre-installed (usually bundled with the OS) and therefore can verify that certificates are authentic by checking the signature using the authority's public key. This is referred to as a PKI (public key infrastructure) and it is used all over the place. Most prominent example is SSL.</p>

<p>Read up on it.</p>
","4634","<security><language-agnostic><encryption><performance><public-key>","3","3","7","2010-07-05 04:03:04","3168664","0","1","","","","2010-07-02 18:59:32",""
"3168415","Most Effective Public Key Encryption Method","<p>There seems to be a lot of hype about asymmetric Public Key encryption. RSA, PGP... etc. You have a set of two keys and distribute one, so that either only you can encrypt the message <em>or</em> only you can decrypt the message. One method provides a way to verify the sender, while the other provides a way to secure the message. (Feel free to correct me if I am wrong.)</p>

<p>Now, I have also been reading about the Diffie-Hellman class of Key-Exchanges. This <em>seems</em> to be more secure as you can verify the sender and secure the message with the keys as each 'conversation' requires a computed 'shared key'.</p>

<p>So, my question is, are there any major disadvantages (besides the setup requirements) to using Diffie-Hellman over a more standard form of public key encryption?</p>

<p>Or, to put it more bluntly. If Diffie-Hellman makes more sense, why isn't <em>it</em> the standard form of encryption?</p>
","<p>As Krystian says, Diffie-Hellman lets you establish a secure connection, but doesn't let you verify <em>who</em> that secure connection is with.</p>

<p>However, DH can be used in combination with a public key algorithm like RSA.  This allows you to verify the other party's identity (using an RSA signature), and the Diffie-Hellman key exchange brings to the party a property called <em>perfect forward secrecy</em>.  This means that if you and I talk today, and next year somebody steals your RSA private key, they still can't go back and decrypt today's conversation.  A plain RSA key exchange doesn't have this property.</p>
","4634","<security><language-agnostic><encryption><performance><public-key>","3","2","7","2010-07-05 04:03:04","3168664","0","1","","","","2010-07-02 18:59:32",""
"31717506","cannot connect to github via ssh","<p>I have created keys and put my public key into my github account.
Then, in <code>~/.ssh</code> I created the following config file:</p>

<pre><code>Host github
  HostName git@github.com
  IdentityFile ~/.ssh/id_rsa2.pub
</code></pre>

<p>When I do ssh github</p>

<pre><code>ssh: Could not resolve hostname git@github.com: nodename nor servname provided, or not known
</code></pre>

<p>And when I do <code>ssh -T git@github.com</code></p>

<pre><code>Permission denied (publickey).
</code></pre>

<p>What am I doing wrong?
The public key I put in my github account says ""Never used"".</p>

<p>Thank you in advance</p>
","<p>The problem is, you are trying to use the public key for authentication. The private key, is e.g. id_rsa2 while the public key is id_rsa2.pub, at least per default, when generated with ssh-keygen.</p>

<p>As default ssh uses id_rsa for identification, so you have to use:</p>

<pre><code>ssh -i ~/.ssh/id_rsa2 -T git@github.com
</code></pre>

<p>The ssh config should look like this:</p>

<pre><code>Host github.com
HostName github.com
User git
IdentityFile ~/.ssh/id_rsa2
</code></pre>

<p>The <code>Host</code> value is important, because that's what you have to use to use the configuration. You now can use <code>ssh github.com</code>. If you don't change the <code>Host</code> line, you need to use <code>ssh github</code>, but this could break other tools.</p>

<p>Alternatively you could use ssh-agent. In this case you do not need to create the config and just add the key to your ssh-agent and ssh to github.</p>

<pre><code>ssh-add ~/.ssh/id_rsa2
ssh -T git@github.com
</code></pre>
","4593","<github><ssh><public-key>","0","4","1","2015-07-30 10:10:17","31717868","0","1","2196426","","2015-07-30 10:10:17","2015-07-30 07:20:56",""
"27669813","Embedding public key as string in Paramiko Application","<p>I'm trying to create a single file executable in python and using paramiko for my SSH. I need to eliminate external files such as public key files and try to go for embedded strings.</p>

<p>I tried this <a href=""https://stackoverflow.com/questions/15722704/paramiko-creating-a-pkey-from-a-public-key-string""><strong>solution</strong></a> but it's not working for me.. </p>

<p>How do I accomplish this? Thanks.</p>
","<p>The solution you mentioned:</p>

<pre><code>key = paramiko.RSAKey(data=base64.b64decode('AAblablabla...'))
</code></pre>

<p>works fine however it may be inconvenient to store the key in base64 format.</p>

<p>The following code shows how to use the key stored in ""plain-text"" format (as key-files in ~/.ssh directory):</p>

<pre><code>import paramiko
import StringIO

my_key = """"""\
-----BEGIN RSA PRIVATE KEY-----
&lt;your key here&gt;
-----END RSA PRIVATE KEY-----""""""

pkey = paramiko.RSAKey.from_private_key(StringIO.StringIO(my_key))

ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(hostname='host', username='user', pkey=pkey)

...

ssh.close()
</code></pre>
","4573","<python><windows><paramiko><ssh-keys><public-key>","4","9","1","2015-06-24 09:31:01","27676489","0","1","-1","","2017-05-23 10:32:30","2014-12-27 17:42:20",""
"17315251","How do I Store and read PublicKey from data base? I am using postgresql and java","<p>Hi I need to store and read public keys from a postgresql data base and i am using java.</p>

<p>I have this code to store</p>

<pre><code> cbd.ejecutarSeguro(""update persona set llave_publica = ? where cedula = 112345678"", x509EncodedKeySpec.getEncoded());


    public void ejecutarSeguro(String query, byte[] pkBytes) {
        try {
            Connection conn = DriverManager.getConnection(nombreConexion);
            PreparedStatement pstat;

            pstat = conn.prepareStatement(query);
            pstat.setBytes(1, pkBytes);
            pstat.execute();
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }
</code></pre>

<p>To read i use this </p>

<pre><code>String filePublicKey_s = cbd.consultarArray(""Select llave_publica from persona where cedula = 112345678"").get(0).get(0);
        byte[] encodedPublicKey = new byte[(int) filePublicKey.length()];
        //encodedPublicKey = (filePublicKey_s).substring(2).getBytes();
        System.out.println(""Public Key; ""+filePublicKey_s);
        System.out.println(""rescato de la base; ""+(filePublicKey_s).getBytes());// LA que rescato de la base
        fis.read(encodedPublicKey);
        System.out.println(""Public Key; ""+encodedPublicKey);
        fis.close();
</code></pre>

<p>In example I have the public key in a file in my computer... when I compare the output I see this</p>

<pre><code>Public Key: 308201b83082012c06072a8648ce3804013082011f02818100fd7f53811d75122952df4a9c2eece4e7f611b7523cef4400c31e3f80b6512669455d402251fb593d8d58fabfc5f5ba30f6cb9b556cd7813b801d346ff26660b76b9950a5a49f9fe8047b1022c24fbba9d7feb7c61bf83b57e7c6a8a6150f04fb83f6d3c51ec3023554135a169132f675f3ae2b61d72aeff22203199dd14801c70215009760508f15230bccb292b982a2eb840bf0581cf502818100f7e1a085d69b3ddecbbcab5c36b857b97994afbbfa3aea82f9574c0b3d0782675159578ebad4594fe67107108180b449167123e84c281613b7cf09328cc8a6e13c167a8b547c8d28e0a3ae1e2bb3a675916ea37f0bfa213562f1fb627a01243bcca4f1bea8519089a883dfe15ae59f06928b665e807b552564014c3bfecf492a038185000281810096e492622ca7f93f51b96d44f15e69f6711b1eecc308f4b017a0e12b46a722b1b662a072f0cdf61b6853595f66eed2e697a4ba2af60f4eb78a24a169513acc6238dcbf6dc898a271d7f91b4b6ea4d2a5c504ee6970c7cd565d414d14305c786385558f06e47f3d2744fa0d73acdc3ca75e435a3a70dcebb1f997a02e7e96ab30
Public Key; \x308201b83082012c06072a8648ce3804013082011f02818100fd7f53811d75122952df4a9c2eece4e7f611b7523cef4400c31e3f80b6512669455d402251fb593d8d58fabfc5f5ba30f6cb9b556cd7813b801d346ff26660b76b9950a5a49f9fe8047b1022c24fbba9d7feb7c61bf83b57e7c6a8a6150f04fb83f6d3c51ec3023554135a169132f675f3ae2b61d72aeff22203199dd14801c70215009760508f15230bccb292b982a2eb840bf0581cf502818100f7e1a085d69b3ddecbbcab5c36b857b97994afbbfa3aea82f9574c0b3d0782675159578ebad4594fe67107108180b449167123e84c281613b7cf09328cc8a6e13c167a8b547c8d28e0a3ae1e2bb3a675916ea37f0bfa213562f1fb627a01243bcca4f1bea8519089a883dfe15ae59f06928b665e807b552564014c3bfecf492a038185000281810096e492622ca7f93f51b96d44f15e69f6711b1eecc308f4b017a0e12b46a722b1b662a072f0cdf61b6853595f66eed2e697a4ba2af60f4eb78a24a169513acc6238dcbf6dc898a271d7f91b4b6ea4d2a5c504ee6970c7cd565d414d14305c786385558f06e47f3d2744fa0d73acdc3ca75e435a3a70dcebb1f997a02e7e96ab30
From data base; [B@6a162595
From file; [B@53fd8f9
</code></pre>

<p>If I read the PK from the database i read an \x and all the PK change</p>

<p>thanks</p>
","<p>You can store in Blob, you can read the public key file and get java public key object. You can directly store this publickey object in database as blob. First do :</p>

<pre><code> byte [] bytes = publicKey.getEncoded();
</code></pre>

<p>then store bytes in database.
For retrieving public key do as:</p>

<pre><code>public PublicKey blobToPublicKey(final byte[] blob) 
    {
        Object result = null;
        final ByteArrayInputStream bais = new ByteArrayInputStream(blob);
        ObjectInputStream ois;
        try
        {
            ois = new ObjectInputStream(bais);
            result = ois.readObject();
        }
        catch (final IOException e)
        {
           //
        }
        catch (final ClassNotFoundException e)
        {
           //
        }
        return (PublicKey)result;
    }
</code></pre>
","4418","<java><database><postgresql><public-key-encryption><public-key>","0","1","2","2013-06-26 09:22:43","","0","","","","","2013-06-26 08:35:16",""
"17315251","How do I Store and read PublicKey from data base? I am using postgresql and java","<p>Hi I need to store and read public keys from a postgresql data base and i am using java.</p>

<p>I have this code to store</p>

<pre><code> cbd.ejecutarSeguro(""update persona set llave_publica = ? where cedula = 112345678"", x509EncodedKeySpec.getEncoded());


    public void ejecutarSeguro(String query, byte[] pkBytes) {
        try {
            Connection conn = DriverManager.getConnection(nombreConexion);
            PreparedStatement pstat;

            pstat = conn.prepareStatement(query);
            pstat.setBytes(1, pkBytes);
            pstat.execute();
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }
</code></pre>

<p>To read i use this </p>

<pre><code>String filePublicKey_s = cbd.consultarArray(""Select llave_publica from persona where cedula = 112345678"").get(0).get(0);
        byte[] encodedPublicKey = new byte[(int) filePublicKey.length()];
        //encodedPublicKey = (filePublicKey_s).substring(2).getBytes();
        System.out.println(""Public Key; ""+filePublicKey_s);
        System.out.println(""rescato de la base; ""+(filePublicKey_s).getBytes());// LA que rescato de la base
        fis.read(encodedPublicKey);
        System.out.println(""Public Key; ""+encodedPublicKey);
        fis.close();
</code></pre>

<p>In example I have the public key in a file in my computer... when I compare the output I see this</p>

<pre><code>Public Key: 308201b83082012c06072a8648ce3804013082011f02818100fd7f53811d75122952df4a9c2eece4e7f611b7523cef4400c31e3f80b6512669455d402251fb593d8d58fabfc5f5ba30f6cb9b556cd7813b801d346ff26660b76b9950a5a49f9fe8047b1022c24fbba9d7feb7c61bf83b57e7c6a8a6150f04fb83f6d3c51ec3023554135a169132f675f3ae2b61d72aeff22203199dd14801c70215009760508f15230bccb292b982a2eb840bf0581cf502818100f7e1a085d69b3ddecbbcab5c36b857b97994afbbfa3aea82f9574c0b3d0782675159578ebad4594fe67107108180b449167123e84c281613b7cf09328cc8a6e13c167a8b547c8d28e0a3ae1e2bb3a675916ea37f0bfa213562f1fb627a01243bcca4f1bea8519089a883dfe15ae59f06928b665e807b552564014c3bfecf492a038185000281810096e492622ca7f93f51b96d44f15e69f6711b1eecc308f4b017a0e12b46a722b1b662a072f0cdf61b6853595f66eed2e697a4ba2af60f4eb78a24a169513acc6238dcbf6dc898a271d7f91b4b6ea4d2a5c504ee6970c7cd565d414d14305c786385558f06e47f3d2744fa0d73acdc3ca75e435a3a70dcebb1f997a02e7e96ab30
Public Key; \x308201b83082012c06072a8648ce3804013082011f02818100fd7f53811d75122952df4a9c2eece4e7f611b7523cef4400c31e3f80b6512669455d402251fb593d8d58fabfc5f5ba30f6cb9b556cd7813b801d346ff26660b76b9950a5a49f9fe8047b1022c24fbba9d7feb7c61bf83b57e7c6a8a6150f04fb83f6d3c51ec3023554135a169132f675f3ae2b61d72aeff22203199dd14801c70215009760508f15230bccb292b982a2eb840bf0581cf502818100f7e1a085d69b3ddecbbcab5c36b857b97994afbbfa3aea82f9574c0b3d0782675159578ebad4594fe67107108180b449167123e84c281613b7cf09328cc8a6e13c167a8b547c8d28e0a3ae1e2bb3a675916ea37f0bfa213562f1fb627a01243bcca4f1bea8519089a883dfe15ae59f06928b665e807b552564014c3bfecf492a038185000281810096e492622ca7f93f51b96d44f15e69f6711b1eecc308f4b017a0e12b46a722b1b662a072f0cdf61b6853595f66eed2e697a4ba2af60f4eb78a24a169513acc6238dcbf6dc898a271d7f91b4b6ea4d2a5c504ee6970c7cd565d414d14305c786385558f06e47f3d2744fa0d73acdc3ca75e435a3a70dcebb1f997a02e7e96ab30
From data base; [B@6a162595
From file; [B@53fd8f9
</code></pre>

<p>If I read the PK from the database i read an \x and all the PK change</p>

<p>thanks</p>
","<p>Convert the PublicKey into byte array</p>

<pre><code>    byte[] bytes = publicKey.getEncoded();
</code></pre>

<p>write the bytes to a BLOB or BINARY column</p>

<pre><code>...              
PreparedStatement ps = conn.prepareStatement(""update tbl1 set col1=?"");
ps.setBytes(1, bytes);
ps.executeUpdate();
</code></pre>

<p>read it back to a  byte array </p>

<pre><code>...
byte[] bytes = resultSet.getBytes(1);
</code></pre>

<p>convert bytes back to PublicKey</p>

<pre><code>KeyFactory keyFactory = KeyFactory.getInstance(alg);
X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(bytes);
PublicKey pk = keyFactory.generatePublic(publicKeySpec);
</code></pre>
","4418","<java><database><postgresql><public-key-encryption><public-key>","0","4","2","2013-06-26 09:22:43","","0","","","","","2013-06-26 08:35:16",""
"24963710","Read EC public key from .pem file in C","<p>I generated a EC public and private key pair using:</p>

<pre><code>openssl ecparam -name prime256v1 -genkey -noout -out ecprikey.pem
openssl ec -in ecprikey.pem -pubout -out ecpubkey.pem
</code></pre>

<p>I want to read the public key into a byte array in C. How do I go about it? Just read from the file? Or does OpenSSL provide something? THank you!</p>
","<blockquote>
  <p>I want to read the public key into a byte array in C...</p>
</blockquote>

<p>Well, the key on disk is likely PEM encoded. Because its a public key, it probably has the pre- and post- encapsulated boundaries of <code>-----BEGIN PUBLIC KEY-----</code> and <code>-----END PUBLIC KEY-----</code>. You can read it like that using standard library functions.</p>

<p>You can also read the public key with <a href=""http://www.openssl.org/docs/crypto/pem.html"" rel=""nofollow""><code>PEM_read_PUBKEY</code></a>. The function returns a <code>EVP_PKEY*</code>. I believe you can convert the <code>EVP_PKEY*</code> to a <code>EC_KEY*</code> with:</p>

<pre><code>EC_KEY* ecKey = EVP_PKEY_get1_EC_KEY(pKey);
</code></pre>

<p>The <code>get1</code> above means the reference count on the key was bumped (as opposed to <code>get0</code>). Be sure to call <code>EC_KEY_free</code> when done with it.</p>

<p>I'm not sure how you would read the public key into an array given a <code>EVP_PKEY*</code> or <code>EC_KEY*</code>. At minimum, there are two pieces of information: the curve (like <code>secp256k1</code>) and the public element (a point on the curve, which consists of an <code>(x,y)</code> coordinate). If the named curve (i.e., the OID) is <em>not</em> present (i.e., the absence of the <code>OPENSSL_EC_NAMED_CURVE</code> flag), then you have all the domain parameters like <code>p</code>, <code>a</code>, <code>b</code>, <code>G</code>, etc. Perhaps you should look at an ASN.1/DER encoding. I think that's the closet you are going to get.</p>
","4415","<c><openssl><public-key><elliptic-curve>","3","2","1","2014-07-26 17:34:25","","2","2","2344584","","2014-07-25 20:53:31","2014-07-25 20:08:30",""
"28614452","How to export public key from pkcs12 file programmatically","<p>I am having trouble trying to export a public key contained in a pkcs12 file. What I am trying to achieve is the same result than with this command (but programmatically):</p>

<pre><code>keytool -export -alias mycertalias -keystore mykeystore.jks -rfc -file mypublickey.pem 
</code></pre>

<p>I obtain the public key and generate a string with BouncyCastle, but the obtained result doesn't match what I obtain with the command above. Here is my code: </p>

<pre><code>KeyStore keyStore = KeyStore.getInstance(""pkcs12"");
keyStore.load(new FileInputStream(certPath),certPassword.toCharArray());
String alias = ""mycertalias"";
Certificate cert = keyStore.getCertificate(alias);

PublicKey publicKey = cert.getPublicKey();   
StringWriter writer = new StringWriter();
PemWriter pemWriter = new PemWriter(writer);
pemWriter.writeObject(new PemObject(""CERTIFICATE"", publicKey.getEncoded()));
pemWriter.flush();
pemWriter.close();

System.out.println(writer.toString());
</code></pre>

<p>I have tried not using BouncyCastle and directly encoding the string, but I get the same result than before (so it doesn't match either with the result obtained with the keytool command):</p>

<pre><code>Certificate cert = keyStore.getCertificate(alias);
BASE64Encoder encoder = new BASE64Encoder();
PublicKey publicKey = cert.getPublicKey();
System.out.println(new String(encoder.encode(publicKey.getEncoded())));
</code></pre>

<p>Any idea of what am I doing wrong? Thanks for the help in advance.</p>

<p><strong>UPDATE:</strong></p>

<p>As suggested by @dave_thompson_085 what I actually want is to export the whole certificate in PEM format, so the valid code is like this:</p>

<pre><code>//...
Certificate cert = keyStore.getCertificate(alias);
StringWriter writer = new StringWriter();
PemWriter pemWriter = new PemWriter(writer);
pemWriter.writeObject(new PemObject(""CERTIFICATE"", cert.getEncoded()));
//...
</code></pre>

<p>Thanks!</p>
","<p>Your <code>keytool</code> example does a JKS not a P12, but adding <code>-storetype pkcs12</code> would do P12 so I'll assume that's what you meant. More importantly, <code>keytool -exportcert</code> (which officially superseded <code>-export</code> in about 1.5) exports the <strong>whole certificate, not just the public key.</strong> Specifying <code>-rfc</code> does it in PEM format, and omitting <code>-rfc</code> does it in DER format, but either way it's the whole certificate. </p>

<p>Also your second code should not produce the same result; it should produce, perhaps modulo line breaks, the same as the <em>body</em> of the PEM format, but without the dashed BEGIN and END lines. The BEGIN and END lines are part of the PEM format, and without them it's not PEM. And without stating the <em>correct</em> type of the contents, which you don't, it's not correct PEM.</p>

<p>If you really want just the publickey you can do that, but don't expect it to be the same as the certificate because a publickey is not a certificate. Note that there there are very few applications that can use a publickey by itself without the other data in the certificate; the only one that springs to mind is SSH (which supposedly confirms the identity and validity manually), and OpenSSH does not use the ASN1-based ""X509"" (really SPKI) encoding supported by Java JCE but instead its own base64-MPI-based encoding.</p>
","4345","<java><bouncycastle><public-key>","3","3","1","2015-02-19 22:45:09","28616543","3","2","2965435","","2015-02-19 22:45:09","2015-02-19 18:45:56",""
"3446040","What's the use of the Public and Private key for reCAPTCHA?","<p>reCAPTCHA requires a public and a private key before it can be implemented into a website. It also needs the reCAPTCHA keys depending on the website. What's the reason behind this? Does the Public and Private key affect the words displayed in the reCAPTCHA? I know that I can set the Public and Private key to be GLOBAL in which it can be used for other domains <b>but</b> why even need the keys in the first place?</p>
","<p>OK. This is my guess, no guarantee.</p>

<ol>
<li>Your public key is required while generating client-side page.</li>
<li>The client uses this public key to request from recaptcha: an image, a corresponding correct answer and perhaps an id. Of course the answer and the id comes encrypted, using the public key. (So the client cannot know the answer)</li>
<li>User types in the answer, sends it to your server.</li>
<li>You have: {id, answer} encrypted using public key. You send your private key and this encrypted message to recaptcha server.</li>
<li>recaptcha unencrypts the message, revealing the answer and id, and checks if they match.</li>
<li>it tells your server the result of the check.</li>
</ol>

<p>Note:</p>

<ol>
<li>If the user sends a public key of his own to recaptcha, the check won't succeed since your private key does not work with his public key.</li>
<li>The scheme proves that your server is really the one receiving the recaptcha answer.</li>
</ol>
","4301","<recaptcha><public-key><private-key>","5","5","1","2011-02-15 15:33:10","","1","","","","","2010-08-10 04:31:57",""
"44675333","Extract public key from certificate x509","<p>I am looking for a way to extract public key from certificate x509 (PEM format) in javascript like this one:</p>

<pre><code>openssl x509 -in cert.cer -pubkey -noout &gt; pub.txt
</code></pre>
","<p>You need something that can parse ASN.1 structure. You could use <a href=""https://pkijs.org/"" rel=""nofollow noreferrer"">pkijs</a>.</p>

<p>Demo can be found <a href=""https://pkijs.org/examples/X509_cert_complex_example.html"" rel=""nofollow noreferrer"">here</a></p>
","4238","<javascript><x509certificate><public-key><x509certificate2>","1","1","2","2019-07-31 02:21:08","44676892","0","","","user7605325","2017-06-21 16:01:04","2017-06-21 11:52:38",""
"44675333","Extract public key from certificate x509","<p>I am looking for a way to extract public key from certificate x509 (PEM format) in javascript like this one:</p>

<pre><code>openssl x509 -in cert.cer -pubkey -noout &gt; pub.txt
</code></pre>
","<pre><code>var cert = forge.pki.certificateFromPem(pem); 
var pem = 
forge.pki.publicKeyToPem(cert.publicKey)
</code></pre>

<p>Thanks halloulaguesmi. This seems to be working perfectly.</p>
","4238","<javascript><x509certificate><public-key><x509certificate2>","1","0","2","2019-07-31 02:21:08","44676892","0","","","user7605325","2017-06-21 16:01:04","2017-06-21 11:52:38",""
"17817508","Unable to load RSA public key","<p>I'm trying to read RSA public key shown below, but I get an exception at line 6: java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: IOException: algid parse error, not a sequence</p>

<p>My code:</p>

<pre><code>String rsaPublicKey = rsaPublicKeyString.replace(
    ""-----BEGIN RSA PUBLIC KEY-----\n"", """");
rsaPublicKey = rsaPublicKey.replace(""\n-----END RSA PUBLIC KEY-----"", """");
byte[] bytes = EncryptionUtils.decodeBase64(rsaPublicKey);

KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
X509EncodedKeySpec keySpec = new X509EncodedKeySpec(bytes);
pubKey = (RSAPublicKey)keyFactory.generatePublic(keySpec);
</code></pre>

<p>RSA public key:</p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEAwVACPi9w23mF3tBkdZz+zwrzKOaaQdr01vAbU4E1pvkfj4sqDsm6
lyDONS789sVoD/xCS9Y0hkkC3gtL1tSfTlgCMOOul9lcixlEKzwKENj1Yz/s7daS
an9tqw3bfUV/nqgbhGX81v/+7RFAEd+RwFnK7a+XYl9sluzHRyVVaTTveB2GazTw
Efzk2DWgkBluml8OREmvfraX3bkHZJTKX4EQSjBbbdJ2ZXIsRrYOXfaA+xayEGB+
8hdlLmAjbCVfaigxX0CDqWeR1yFL9kwd9P0NsZRPsmoqVwMbMu7mStFai6aIhc3n
Slv8kg9qv1m6XHVQY3PnEw+QQtqSIXklHwIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<p>What am I doing wrong?</p>

<p><b>UPD:</b></p>

<pre><code>public static byte[] decodeBase64(String data) throws EncryptionException {
    try {
        BASE64Decoder decoder = new BASE64Decoder();
        return decoder.decodeBuffer(data);
    } catch (Exception e) {
        throw new EncryptionException(e);
    }
}
</code></pre>
","<p>Your problem is caused because your public key is an <code>RSAPublicKey</code> object rather than a <code>SubjectPublicKeyInfo</code> object (see <a href=""https://stackoverflow.com/a/4739877/474189"">this answer</a> for a good description of the difference). You will need to convert from one to the other before your code will work.</p>

<p>BouncyCastle can do the conversion for you. The following code snippet will work, although I dislike it for two reasons:</p>

<ol>
<li><p>It uses a deprecated class <a href=""http://www.bouncycastle.org/docs/pkixdocs1.5on/org/bouncycastle/openssl/PEMReader.html"" rel=""nofollow noreferrer""><code>PEMReader</code></a>.</p></li>
<li><p>It requires the BouncyCastle provider to be loaded.</p></li>
</ol>

<p>Code:</p>

<pre><code>Security.addProvider(new BouncyCastleProvider());    
PEMReader reader = new PEMReader(new StringReader(rsaPublicKeyString));    
BCRSAPublicKey key = (BCRSAPublicKey) reader.readObject();
bytes[] = key.getEncoded(); // now in SubjectPublicKeyInfo format.

// as before...
</code></pre>

<p>With BouncyCastle, there is always many ways to skin a cat. Perhaps someone can find a more elegant solution than the one above?</p>
","4159","<java><rsa><public-key>","4","1","2","2014-05-19 23:30:49","17828003","1","","2611660","","2013-07-23 19:49:22","2013-07-23 17:54:26",""
"17817508","Unable to load RSA public key","<p>I'm trying to read RSA public key shown below, but I get an exception at line 6: java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: IOException: algid parse error, not a sequence</p>

<p>My code:</p>

<pre><code>String rsaPublicKey = rsaPublicKeyString.replace(
    ""-----BEGIN RSA PUBLIC KEY-----\n"", """");
rsaPublicKey = rsaPublicKey.replace(""\n-----END RSA PUBLIC KEY-----"", """");
byte[] bytes = EncryptionUtils.decodeBase64(rsaPublicKey);

KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
X509EncodedKeySpec keySpec = new X509EncodedKeySpec(bytes);
pubKey = (RSAPublicKey)keyFactory.generatePublic(keySpec);
</code></pre>

<p>RSA public key:</p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEAwVACPi9w23mF3tBkdZz+zwrzKOaaQdr01vAbU4E1pvkfj4sqDsm6
lyDONS789sVoD/xCS9Y0hkkC3gtL1tSfTlgCMOOul9lcixlEKzwKENj1Yz/s7daS
an9tqw3bfUV/nqgbhGX81v/+7RFAEd+RwFnK7a+XYl9sluzHRyVVaTTveB2GazTw
Efzk2DWgkBluml8OREmvfraX3bkHZJTKX4EQSjBbbdJ2ZXIsRrYOXfaA+xayEGB+
8hdlLmAjbCVfaigxX0CDqWeR1yFL9kwd9P0NsZRPsmoqVwMbMu7mStFai6aIhc3n
Slv8kg9qv1m6XHVQY3PnEw+QQtqSIXklHwIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<p>What am I doing wrong?</p>

<p><b>UPD:</b></p>

<pre><code>public static byte[] decodeBase64(String data) throws EncryptionException {
    try {
        BASE64Decoder decoder = new BASE64Decoder();
        return decoder.decodeBuffer(data);
    } catch (Exception e) {
        throw new EncryptionException(e);
    }
}
</code></pre>
","<p>For me, I was missing the OID in the public key. I had to correct that on the iOS side using help from here: <a href=""http://blog.wingsofhermes.org/?p=42"" rel=""nofollow"">http://blog.wingsofhermes.org/?p=42</a></p>

<p>Also, my public key didn't have to be casted to an RSAPublicKey, the standard worked just fine:</p>

<pre><code>X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(publicKeyBytes);
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);
</code></pre>
","4159","<java><rsa><public-key>","4","2","2","2014-05-19 23:30:49","17828003","1","","2611660","","2013-07-23 19:49:22","2013-07-23 17:54:26",""
"10555039","SSH doesn't accept public key, and permissions appear to be correct","<pre><code>me@a1:~/me$ ssh -v ae@1.1.1.1
OpenSSH_5.9p1 Debian-5ubuntu1, OpenSSL 1.0.1 14 Mar 2012
debug1: Connecting to 1.1.1.1 [1.1.1.1] port 22.
debug1: Connection established.
debug1: identity file /home/me/.ssh/id_rsa type 1
debug1: Checking blacklist file /usr/share/ssh/blacklist.RSA-2048
debug1: Checking blacklist file /etc/ssh/blacklist.RSA-2048
debug1: identity file /home/me/.ssh/id_rsa-cert type -1
debug1: identity file /home/me/.ssh/id_dsa type -1
debug1: identity file /home/me/.ssh/id_dsa-cert type -1
debug1: identity file /home/me/.ssh/id_ecdsa type -1
debug1: identity file /home/me/.ssh/id_ecdsa-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_4.3
debug1: match: OpenSSH_4.3 pat OpenSSH_4*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Server host key: RSA 23:2d:18:a3:88:d4:91:34:a4:85:..........
debug1: Host '1.1.1.1' is known and matches the RSA host key.
debug1: Found key in /home/me/.ssh/known_hosts:6
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,gssapi-with-mic,password
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /home/me/.ssh/id_rsa
debug1: Authentications that can continue: publickey,gssapi-with-mic,password
debug1: Trying private key: /home/me/.ssh/id_dsa
debug1: Trying private key: /home/me/.ssh/id_ecdsa
debug1: Next authentication method: password
ae@1.1.1.1's password: 
</code></pre>

<p>and then</p>

<pre><code>me@a1:~/me$ tail /var/log/auth.log
May 11 10:17:01 a1 CRON[21454]: pam_unix(cron:session): session closed for user root
May 11 11:17:01 a1 CRON[22859]: pam_unix(cron:session): session opened for user root by (uid=0)
May 11 11:17:01 a1 CRON[22859]: pam_unix(cron:session): session closed for user root
</code></pre>

<p>Doesn't say anything about permissions. 
SSH works for other hosts - can I conclude from this, that this is an issue with the public key on the server, rather than on my PC?</p>

<p>The only other thing that I can think of is that my username on my PC is ""me"", whereas the username on the remote server is ""ae"".</p>

<p>When it works, for another server, it looks like this:</p>

<pre><code>...
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /home/me/.ssh/id_rsa
debug1: Server accepts key: pkalg ssh-rsa blen 279
debug1: Authentication succeeded (publickey).
Authenticated to 1.1.1.2 ([1.1.1.2]:22).
debug1: channel 0: new [client-session]
debug1: Entering interactive session.
Last login: Mon May  7 21:25:09 2012 from 2.2.2.2
[username@server2 ~]$ 
</code></pre>
","<p>Objectionable server admin had copied the key wrongly. (X_X)</p>
","4100","<ubuntu><ssh><public-key>","0","1","1","2012-05-11 19:22:59","10557406","2","","","","","2012-05-11 16:15:20",""
"19953167","WinSCP authenticate to the server in automation mode, using the public key authentication","<p>I am using WinSCP to automate the copy process to server and the authentication is only with username and password. </p>

<p>Script is:  </p>

<pre><code>open username:password@ipaddress:portno -hostkey=&lt;hostkey&gt;
</code></pre>

<p>Whereas now the authentication mode has to be changed to public key.</p>

<p>Script changed for authenticate through public key:</p>

<pre><code>open username@ipaddress:portno -privatekey=mykey.ppk
</code></pre>

<p>Passphrase for the private key is requested after executing the above script, but is there any way that the passphrase of the private key can be provided in the same command?</p>
","<p>Use the <a href=""https://winscp.net/eng/docs/scriptcommand_open#passphrase"" rel=""nofollow noreferrer""><code>-passphrase</code> switch of the <code>open</code> command</a>.</p>

<p>See also WinSCP FAQ 
<a href=""https://winscp.net/eng/docs/faq_passphrase"" rel=""nofollow noreferrer"">How can I connect without entering private key passphrase each time?</a></p>

<hr>

<p>Also, note, that you still should use the <code>-hostkey</code> switch.</p>

<hr>

<pre><code>open username:password@ipaddress:portno -hostkey=... -privatekey=... -passphrase=...
</code></pre>
","4069","<scripting><public-key><winscp>","3","2","1","2017-02-28 09:28:50","","0","1","850848","","2013-12-12 22:32:20","2013-11-13 11:56:24",""
"3171481","PublicKey vs RSAPublicKeySpec","<p>When I create an RSA keypair should I be be doing</p>

<pre><code>KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(2048);
KeyPair kp = kpg.genKeyPair();
PublicKey publicKey = kp.getPublic();
PrivateKey privateKey = kp.getPrivate();

save(""public.key"",publicKey.getEncoded())
save(""private.key"",privateKey.getEncoded())
</code></pre>

<p>OR</p>

<pre><code>KeyFactory fact = KeyFactory.getInstance(""RSA"");
RSAPublicKeySpec pub = fact.getKeySpec(kp.getPublic(),RSAPublicKeySpec.class);
RSAPrivateKeySpec priv = fact.getKeySpec(kp.getPrivate(),RSAPrivateKeySpec.class);

saveToFile(""public.key"", pub.getModulus(),pub.getPublicExponent());
saveToFile(""private.key"", priv.getModulus(),priv.getPrivateExponent());
</code></pre>

<p>Which is better and what is the difference?</p>
","<p>The getEncoded() methods return encodings for public and private keys that are ""more"" standard and thus more likely to be interoperable with other systems. That is, they use standards such as PKCS#1.</p>

<p>If you are not concerned about interoperability then you should probably use the java KeyStore class for storing keys.</p>
","3977","<java><encryption><public-key>","3","0","2","2010-07-03 14:25:13","3171776","0","2","238704","","2010-07-03 14:07:14","2010-07-03 12:29:41",""
"3171481","PublicKey vs RSAPublicKeySpec","<p>When I create an RSA keypair should I be be doing</p>

<pre><code>KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(2048);
KeyPair kp = kpg.genKeyPair();
PublicKey publicKey = kp.getPublic();
PrivateKey privateKey = kp.getPrivate();

save(""public.key"",publicKey.getEncoded())
save(""private.key"",privateKey.getEncoded())
</code></pre>

<p>OR</p>

<pre><code>KeyFactory fact = KeyFactory.getInstance(""RSA"");
RSAPublicKeySpec pub = fact.getKeySpec(kp.getPublic(),RSAPublicKeySpec.class);
RSAPrivateKeySpec priv = fact.getKeySpec(kp.getPrivate(),RSAPrivateKeySpec.class);

saveToFile(""public.key"", pub.getModulus(),pub.getPublicExponent());
saveToFile(""private.key"", priv.getModulus(),priv.getPrivateExponent());
</code></pre>

<p>Which is better and what is the difference?</p>
","<p>For public keys, it doesn't make much difference. For private keys, getEncoded() returns much more information than the private key.</p>

<p>Here is the ASN.1 schema for RSA Private Key,</p>

<pre><code>-- 
-- Representation of RSA private key with information for the CRT algorithm.
--
RSAPrivateKey ::= SEQUENCE {
    version           Version, 
    modulus           INTEGER,  -- n
    publicExponent    INTEGER,  -- e
    privateExponent   INTEGER,  -- d
    prime1            INTEGER,  -- p
    prime2            INTEGER,  -- q
    exponent1         INTEGER,  -- d mod (p-1)
    exponent2         INTEGER,  -- d mod (q-1) 
    coefficient       INTEGER,  -- (inverse of q) mod p
    otherPrimeInfos   OtherPrimeInfos OPTIONAL 
}

Version ::= INTEGER { two-prime(0), multi(1) }
    (CONSTRAINED BY {-- version must be multi if otherPrimeInfos present --})

OtherPrimeInfos ::= SEQUENCE SIZE(1..MAX) OF OtherPrimeInfo


OtherPrimeInfo ::= SEQUENCE {
    prime             INTEGER,  -- ri
    exponent          INTEGER,  -- di
    coefficient       INTEGER   -- ti
}
</code></pre>

<p>Those extra parameters will speed up private key operations considerably. So you should always use <code>getEncoded()</code>.</p>
","3977","<java><encryption><public-key>","3","4","2","2010-07-03 14:25:13","3171776","0","2","238704","","2010-07-03 14:07:14","2010-07-03 12:29:41",""
"3722610","How do I read the public key from a signed C# exe","<p>I'm signing a dot net exe using </p>

<pre><code>signcode.exe with an spc/pvk combo
</code></pre>

<p>The file needs to read its own Public Key at runtime in order to verify some data. I've gone down a number of different avenues.</p>

<p>I've tried             </p>

<pre><code>X509Certificate executingCert = X509Certificate.CreateFromSignedFile(exe);
</code></pre>

<p>executingCert is then null. I'm guessing signcode isn't creating an X509 signed file, though if there's a switch to change that I'm happy to go that way.</p>

<p><i>edited</i>
Turns out the above does work.... I had my null check backwards (!= != ==) :) </p>

<pre><code>Assembly asm = Assembly.GetExecutingAssembly();
string exe = asm.Location;
X509Certificate executingCert = X509Certificate.CreateFromSignedFile(exe); 

if (executingCert != null)
{
    Console.WriteLine(""Assembly is signed"");
    byte[] assemblyKey = executingCert.GetPublicKey();
}
</code></pre>
","<p>Try something like that:</p>

<pre><code>Assembly.GetEntryAssembly().GetName().GetPublicKey()
</code></pre>

<p>I used GetEntryAssembly in that case, but of course you can call the method on any loaded assembly.</p>
","3937","<c#><public-key><x509><signtool>","7","0","2","2010-09-17 17:41:38","3731122","0","2","30589","","2010-09-17 17:41:38","2010-09-15 23:26:23",""
"3722610","How do I read the public key from a signed C# exe","<p>I'm signing a dot net exe using </p>

<pre><code>signcode.exe with an spc/pvk combo
</code></pre>

<p>The file needs to read its own Public Key at runtime in order to verify some data. I've gone down a number of different avenues.</p>

<p>I've tried             </p>

<pre><code>X509Certificate executingCert = X509Certificate.CreateFromSignedFile(exe);
</code></pre>

<p>executingCert is then null. I'm guessing signcode isn't creating an X509 signed file, though if there's a switch to change that I'm happy to go that way.</p>

<p><i>edited</i>
Turns out the above does work.... I had my null check backwards (!= != ==) :) </p>

<pre><code>Assembly asm = Assembly.GetExecutingAssembly();
string exe = asm.Location;
X509Certificate executingCert = X509Certificate.CreateFromSignedFile(exe); 

if (executingCert != null)
{
    Console.WriteLine(""Assembly is signed"");
    byte[] assemblyKey = executingCert.GetPublicKey();
}
</code></pre>
","<p>SignCode (for .Net 1.0 and 1.1) uses Authenticode signing, which as far as I'm aware, lacks a .Net Framework managed interface. You will likely need to use P/Invoke to call routines in Win32 API such as those found in this <a href=""http://support.microsoft.com/kb/323809/en-us"" rel=""nofollow noreferrer"">KB article: How To Get Information from Authenticode Signed Executables</a>. Likely you'll need to use <a href=""http://msdn.microsoft.com/en-us/library/aa380264(VS.85).aspx"" rel=""nofollow noreferrer"">CryptQueryObject</a> which will get you the
certificate, which you will then likely have to find another routine to pull the public key from.</p>

<p>Check out this related StackOverflow question which has a lot of answers: <a href=""https://stackoverflow.com/questions/1072540/winverifytrust-to-check-for-a-specific-signature"">WinVerifyTrust to check for a specific signature?</a></p>
","3937","<c#><public-key><x509><signtool>","7","3","2","2010-09-17 17:41:38","3731122","0","2","30589","","2010-09-17 17:41:38","2010-09-15 23:26:23",""
"10894120","String to PublicKey in JAVA","<p>I'm write program Digitalsignature with java
now i can send public key and signature to receiver 
But when receiver received my public key and signature</p>

<p>it's Type Of String(Base64) (i need to send String data)</p>

<p>How to revert String(Base64) to PublicKey(Type) again</p>

<pre><code>public verifiSign(String signature,String data)  {
String publickey=""MIG....""


    Signature sig = Signature.getInstance(""SHA1withRSA"");

    sig.initVerify(publickey); //&lt;-- Cannot  use String
    sig.update(data.getBytes());
    boolean verified = sig.verify(asBytes(signature));
    System.out.println(""Verify = "" + verified);



}
</code></pre>

<p>Please help me 
Thank you</p>
","<p>You can use this class to get a byte Array from the String:</p>

<p><a href=""http://www.docjar.com/docs/api/sun/misc/BASE64Decoder.html"" rel=""nofollow"">http://www.docjar.com/docs/api/sun/misc/BASE64Decoder.html</a></p>

<pre><code>import sun.misc.BASE64Decoder;
</code></pre>

<p>From the Byte Array, get a PublicKey Object...
Btw. this code is not supported in the standart sdk, it is sun only, so be careful.</p>
","3925","<java><digital-signature><public-key>","2","0","2","2012-06-05 11:02:03","","1","","15541","","2012-06-05 09:02:58","2012-06-05 08:42:25",""
"10894120","String to PublicKey in JAVA","<p>I'm write program Digitalsignature with java
now i can send public key and signature to receiver 
But when receiver received my public key and signature</p>

<p>it's Type Of String(Base64) (i need to send String data)</p>

<p>How to revert String(Base64) to PublicKey(Type) again</p>

<pre><code>public verifiSign(String signature,String data)  {
String publickey=""MIG....""


    Signature sig = Signature.getInstance(""SHA1withRSA"");

    sig.initVerify(publickey); //&lt;-- Cannot  use String
    sig.update(data.getBytes());
    boolean verified = sig.verify(asBytes(signature));
    System.out.println(""Verify = "" + verified);



}
</code></pre>

<p>Please help me 
Thank you</p>
","<p>You can use this to transform your String (encoded in Base64) in a PublicKey instance :</p>

<p>Note : I don't know how you encode your String in Base64, if you used the apache commons for example, use the ""revert"" method from the same API. For this example I used sun.misc.BASE64Decoder because the String publicKey is encoded with sun.misc.BASE64Encoder.</p>

<pre><code>    /**
 * Verify the origin of the message using signature and encoded message.
 * @param publicKey String - a public key, created with RSA and encoded with sun.misc.BASE64Encoder.
 * @param sign      String - a signature encoded with sun.misc.BASE64Encoder.
 * @param message   String - an encoded message.
 * @return
 * @throws NoSuchAlgorithmException
 * @throws NoSuchPaddingException
 * @throws InvalidKeySpecException
 * @throws InvalidKeyException
 * @throws InvalidAlgorithmParameterException
 * @throws IllegalBlockSizeException
 * @throws BadPaddingException
 * @throws NoSuchProviderException
 * @throws IOException
 * @throws SignatureException 
 * @see sun.misc.BASE64Encoder
 */
public boolean verifyMessageSign(String publicKey, String sign, String message) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, NoSuchProviderException, IOException, SignatureException{

    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");

    //Create the PublicKey object from the String encoded in Base64.
    X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(new BASE64Decoder().decodeBuffer(publicKey));
    PublicKey pub = keyFactory.generatePublic(publicKeySpec);

    Signature sig = Signature.getInstance(""SHA1withRSA"");
    sig.initVerify(pub);
    sig.update(message.getBytes());
    return sig.verify(new BASE64Decoder().decodeBuffer(sign));
}
</code></pre>
","3925","<java><digital-signature><public-key>","2","0","2","2012-06-05 11:02:03","","1","","15541","","2012-06-05 09:02:58","2012-06-05 08:42:25",""
"9429855","RSA in C# public key is same as private key?","<p>I searched a lot online but stuck with doubts in RSA public key and private key cryptography.</p>

<p>When I checked <a href=""http://msdn.microsoft.com/en-us/library/x8z5e11b.aspx"" rel=""nofollow noreferrer"">MSDN</a> site, I tried this</p>

<pre><code> RSACryptoServiceProvider rsaEncryptDecrypt = new RSACryptoServiceProvider();

 byte[] privateKeyByte = rsaEncryptDecrypt.ExportParameters(true).Modulus;
 byte[] publicKeyByte = rsaEncryptDecrypt.ExportParameters(false).Modulus;

 string privateKey = Convert.ToBase64String(privateKeyByte);
 string publicKey = Convert.ToBase64String(publicKeyByte);
</code></pre>

<p>The string public key and private key are <strong>Same</strong>!!!
Is it correct? I mean how can the strings be same? Isn't suppose to be two different keys?</p>

<p>Please correct me if I am wrong. I am confused !</p>

<p>Thank you in advance!</p>

<p><strong>UPDATE</strong></p>

<p>I mistook the parameters, </p>

<p>But then: When I saw</p>

<p><a href=""https://stackoverflow.com/questions/6592990/simple-rsa-encryption-decryption-in-net#answer-6593054%22"">https://stackoverflow.com/questions/6592990/simple-rsa-encryption-decryption-in-net#answer-6593054""</a></p>

<p>How can I get string value? because I have to store it in App.config and access it whenever I want. I mean I need to store the public and private keys both in App.config</p>

<p><strong>UPDATE2</strong></p>

<p>I am sorry, I just used ToXmlString property of RSACryptoServiceProvider's instance.
Got the private key and public key.</p>
","<p>The <code>Modulus</code> is the same for both.</p>

<p>The public key consists of the encryption exponent <code>e</code> and the modulus <code>n</code>.</p>

<p>Traditionally the decryption key consists of the decryption exponent <code>d</code> and the same modulus <code>n</code>. For better performance, it often includes some more numbers, such as the prime factors <code>p</code> and <code>q</code> of <code>n</code>.</p>

<p>To better visualize what a public key includes try <code>ToXmlString(false/true)</code></p>

<p>Public key <code>ToXmlString(false)</code>:</p>

<pre><code>&lt;RSAKeyValue&gt;
    &lt;Modulus&gt;4ZpwnuksQkLuqLczu5eJcS6aIFaPsTwGpS57/P9rviJWI7sweYZnE/eBVtPVKoanhgHxmcHyk4GbyvCnXKSzDw==&lt;/Modulus&gt;
    &lt;Exponent&gt;AQAB&lt;/Exponent&gt;
&lt;/RSAKeyValue&gt;
</code></pre>

<p>Public Key+Private Key <code>ToXmlString(true)</code>:</p>

<pre><code>&lt;RSAKeyValue&gt;
     &lt;Modulus&gt;4ZpwnuksQkLuqLczu5eJcS6aIFaPsTwGpS57/P9rviJWI7sweYZnE/eBVtPVKoanhgHxmcHyk4GbyvCnXKSzDw==&lt;/Modulus&gt;
     &lt;Exponent&gt;AQAB&lt;/Exponent&gt;
     &lt;P&gt;8lLDYv+MEBUdp0eUY3an4mlU7ovmyV6f60RJoXOB9Hs=&lt;/P&gt;
     &lt;Q&gt;7lYYef5/PvPOyrN0HGZPt/RWknfVd4c3Kc6WVEZICX0=&lt;/Q&gt;
     &lt;DP&gt;UI3GufAthWMfmm4nG/Fj2dYeD7aeH66/BpyKxYr6VmU=&lt;/DP&gt;
     &lt;DQ&gt;sBZkFx30nWo8in5zdtgQZfTcUXLAAIOiOf0sDC+w4XE=&lt;/DQ&gt;
     &lt;InverseQ&gt;GBkNq0KZ4ERaEO/oVQoQDONw6ZHixNimR5IJ7cbzKXw=&lt;/InverseQ&gt;
     &lt;D&gt;ErLyUrmQ6Y0SqvlEWHAe/DqYm8WQ82e+RUKtFDM3gvK9ygloqftx6rhn9XvM/ji1JnrDqiuepn5T3D3F+3GVQQ==&lt;/D&gt;
&lt;/RSAKeyValue&gt;
</code></pre>
","3912","<c#><rsa><public-key><private-key>","2","6","3","2012-04-20 15:27:33","9429897","1","1","-1","","2017-05-23 11:44:46","2012-02-24 11:19:06",""
"9429855","RSA in C# public key is same as private key?","<p>I searched a lot online but stuck with doubts in RSA public key and private key cryptography.</p>

<p>When I checked <a href=""http://msdn.microsoft.com/en-us/library/x8z5e11b.aspx"" rel=""nofollow noreferrer"">MSDN</a> site, I tried this</p>

<pre><code> RSACryptoServiceProvider rsaEncryptDecrypt = new RSACryptoServiceProvider();

 byte[] privateKeyByte = rsaEncryptDecrypt.ExportParameters(true).Modulus;
 byte[] publicKeyByte = rsaEncryptDecrypt.ExportParameters(false).Modulus;

 string privateKey = Convert.ToBase64String(privateKeyByte);
 string publicKey = Convert.ToBase64String(publicKeyByte);
</code></pre>

<p>The string public key and private key are <strong>Same</strong>!!!
Is it correct? I mean how can the strings be same? Isn't suppose to be two different keys?</p>

<p>Please correct me if I am wrong. I am confused !</p>

<p>Thank you in advance!</p>

<p><strong>UPDATE</strong></p>

<p>I mistook the parameters, </p>

<p>But then: When I saw</p>

<p><a href=""https://stackoverflow.com/questions/6592990/simple-rsa-encryption-decryption-in-net#answer-6593054%22"">https://stackoverflow.com/questions/6592990/simple-rsa-encryption-decryption-in-net#answer-6593054""</a></p>

<p>How can I get string value? because I have to store it in App.config and access it whenever I want. I mean I need to store the public and private keys both in App.config</p>

<p><strong>UPDATE2</strong></p>

<p>I am sorry, I just used ToXmlString property of RSACryptoServiceProvider's instance.
Got the private key and public key.</p>
","<p>Look at the documentation for <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsaparameters.aspx"" rel=""nofollow""><code>RSAParameters</code></a> - the public key is formed from <code>{e, n}</code> (<code>Exponent</code> and <code>Modulus</code>). The private key is formed from <code>{d, n}</code> (<code>D</code> and <code>Modulus</code>). so when you call <code>ExportParameters(false)</code> you <em>would</em> get the same Modulus as that's part of the <em>public</em> information - but you won't get a value for the <code>D</code> property.</p>
","3912","<c#><rsa><public-key><private-key>","2","1","3","2012-04-20 15:27:33","9429897","1","1","-1","","2017-05-23 11:44:46","2012-02-24 11:19:06",""
"9429855","RSA in C# public key is same as private key?","<p>I searched a lot online but stuck with doubts in RSA public key and private key cryptography.</p>

<p>When I checked <a href=""http://msdn.microsoft.com/en-us/library/x8z5e11b.aspx"" rel=""nofollow noreferrer"">MSDN</a> site, I tried this</p>

<pre><code> RSACryptoServiceProvider rsaEncryptDecrypt = new RSACryptoServiceProvider();

 byte[] privateKeyByte = rsaEncryptDecrypt.ExportParameters(true).Modulus;
 byte[] publicKeyByte = rsaEncryptDecrypt.ExportParameters(false).Modulus;

 string privateKey = Convert.ToBase64String(privateKeyByte);
 string publicKey = Convert.ToBase64String(publicKeyByte);
</code></pre>

<p>The string public key and private key are <strong>Same</strong>!!!
Is it correct? I mean how can the strings be same? Isn't suppose to be two different keys?</p>

<p>Please correct me if I am wrong. I am confused !</p>

<p>Thank you in advance!</p>

<p><strong>UPDATE</strong></p>

<p>I mistook the parameters, </p>

<p>But then: When I saw</p>

<p><a href=""https://stackoverflow.com/questions/6592990/simple-rsa-encryption-decryption-in-net#answer-6593054%22"">https://stackoverflow.com/questions/6592990/simple-rsa-encryption-decryption-in-net#answer-6593054""</a></p>

<p>How can I get string value? because I have to store it in App.config and access it whenever I want. I mean I need to store the public and private keys both in App.config</p>

<p><strong>UPDATE2</strong></p>

<p>I am sorry, I just used ToXmlString property of RSACryptoServiceProvider's instance.
Got the private key and public key.</p>
","<p>Hmm, I guess my comment is a good answer after all:</p>

<p>As you only transformed the modulus part of the keys and this part is there in both privat and public key it's no wonder.</p>

<p>See here: <a href=""http://en.wikipedia.org/wiki/RSA_%28algorithm%29#Key_generation"" rel=""nofollow"">http://en.wikipedia.org/wiki/RSA_%28algorithm%29#Key_generation</a></p>
","3912","<c#><rsa><public-key><private-key>","2","2","3","2012-04-20 15:27:33","9429897","1","1","-1","","2017-05-23 11:44:46","2012-02-24 11:19:06",""
"20032865","Java: Error while converting Public Key from byte array to string and back","<p>I have this strange error which I can't find a solution to fix.</p>

<p>So I generate a public-private key pair, convert it to byte-array and after that recover the original key from that by array. No errors</p>

<pre><code>  {  

     KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
     kpg.initialize(1024);
     KeyPair keyPair = kpg.generateKeyPair();
     PublicKey pub = keyPair.getPublic();
     byte[] pubBytes = pub.getEncoded();

     try
     {
         // to recover the key
        KeyFactory kf = KeyFactory.getInstance(""RSA"");

        PublicKey pub_recovered = kf.generatePublic(new X509EncodedKeySpec(pubBytes));

     }
     catch(Exception e)
     {
         System.out.println(e.getMessage());
     }

     System.out.println(""Finish"");
</code></pre>

<p>After that I repeat the same steps, but before recovering the key, I convert the byte array to string and after that back. In this case I get error.</p>

<pre><code>     KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
     kpg.initialize(1024);
     KeyPair keyPair = kpg.generateKeyPair();
     PublicKey pub = keyPair.getPublic();
     byte[] pubBytes = pub.getEncoded();

     try
     {

         String pub1 = new String(pubBytes, ""UTF-8""); 

         byte[] pub2 = pub1.getBytes(""UTF-8"");

         // to recover the key
        KeyFactory kf = KeyFactory.getInstance(""RSA"");

        PublicKey pub_recovered = kf.generatePublic(new X509EncodedKeySpec(pub2));

     }
     catch(Exception e)
     {
         System.out.println(e.getMessage());
     }
</code></pre>

<p>The error occurs a the line:</p>

<pre><code>PublicKey pub_recovered = kf.generatePublic(new X509EncodedKeySpec(pub2));
</code></pre>

<p>and it says:</p>

<pre><code>java.security.InvalidKeyException: IOException: DerInputStream.getLength(): lengthTag=111, too big.
</code></pre>

<p>Does anyone know how to fix and why in general this happens? The message says invalid key exception, however since it worked i the first case, I am more inclined that something wrong happens during byte conversion. It does not make sense at all.</p>
","<p>A key contains arbitrary bytes. And those bytes don't necessarily represent valid UTF8 characters. So you shouldn't transform them to a String, because that is a lossy conversion. If you really need a String, then use Hex or Base64 encoding.</p>

<p>To make you realize what the error is, let's say that you use ASCII instead of UTF8. ASCII characters go from 0 to 127. All the other 128 byte values don't represent valid characters. So if the key contain any of those values, the transformation to a String loses them. It's basically the same thing with any encoding (except, IIRC, ISO8859-1).</p>
","3910","<java><utf-8><bytearray><public-key><typeconverter>","2","4","2","2017-07-11 04:02:40","","1","","238704","","2013-11-17 16:07:17","2013-11-17 16:02:33",""
"20032865","Java: Error while converting Public Key from byte array to string and back","<p>I have this strange error which I can't find a solution to fix.</p>

<p>So I generate a public-private key pair, convert it to byte-array and after that recover the original key from that by array. No errors</p>

<pre><code>  {  

     KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
     kpg.initialize(1024);
     KeyPair keyPair = kpg.generateKeyPair();
     PublicKey pub = keyPair.getPublic();
     byte[] pubBytes = pub.getEncoded();

     try
     {
         // to recover the key
        KeyFactory kf = KeyFactory.getInstance(""RSA"");

        PublicKey pub_recovered = kf.generatePublic(new X509EncodedKeySpec(pubBytes));

     }
     catch(Exception e)
     {
         System.out.println(e.getMessage());
     }

     System.out.println(""Finish"");
</code></pre>

<p>After that I repeat the same steps, but before recovering the key, I convert the byte array to string and after that back. In this case I get error.</p>

<pre><code>     KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
     kpg.initialize(1024);
     KeyPair keyPair = kpg.generateKeyPair();
     PublicKey pub = keyPair.getPublic();
     byte[] pubBytes = pub.getEncoded();

     try
     {

         String pub1 = new String(pubBytes, ""UTF-8""); 

         byte[] pub2 = pub1.getBytes(""UTF-8"");

         // to recover the key
        KeyFactory kf = KeyFactory.getInstance(""RSA"");

        PublicKey pub_recovered = kf.generatePublic(new X509EncodedKeySpec(pub2));

     }
     catch(Exception e)
     {
         System.out.println(e.getMessage());
     }
</code></pre>

<p>The error occurs a the line:</p>

<pre><code>PublicKey pub_recovered = kf.generatePublic(new X509EncodedKeySpec(pub2));
</code></pre>

<p>and it says:</p>

<pre><code>java.security.InvalidKeyException: IOException: DerInputStream.getLength(): lengthTag=111, too big.
</code></pre>

<p>Does anyone know how to fix and why in general this happens? The message says invalid key exception, however since it worked i the first case, I am more inclined that something wrong happens during byte conversion. It does not make sense at all.</p>
","<p>I encountered a similar problem before， i forgot to import  the configuration file which  contains the key in  project, my configuration file is  conf/XX.properties</p>
","3910","<java><utf-8><bytearray><public-key><typeconverter>","2","0","2","2017-07-11 04:02:40","","1","","238704","","2013-11-17 16:07:17","2013-11-17 16:02:33",""
"6488383","What is the format of public key?","<p>What is the format of public DSA key? And are all certificates are stored in base64?</p>
","<p>There is a great deal of information and references on this page for the specifications.
<a href=""http://en.wikipedia.org/wiki/Digital_Signature_Algorithm"" rel=""nofollow"">http://en.wikipedia.org/wiki/Digital_Signature_Algorithm</a></p>
","3778","<certificate><base64><public-key><pki><asn.1>","2","-2","2","2011-08-04 09:19:27","6488426","1","2","827060","","2011-07-10 03:59:22","2011-06-27 03:40:01",""
"6488383","What is the format of public key?","<p>What is the format of public DSA key? And are all certificates are stored in base64?</p>
","<p>Do you mean the public key format used in a certificate? </p>

<p>Generally, a public key in a certificate is stored in the SubjectPublicKeyInfo field (cf. RFC 5280)</p>

<pre>
SubjectPublicKeyInfo  ::=  SEQUENCE  {
     algorithm            AlgorithmIdentifier,
     subjectPublicKey     BIT STRING  }
</pre>

<p>The specifics for DSA can be found in <a href=""http://tools.ietf.org/html/rfc3370#section-3.1"" rel=""nofollow"">RFC 3370</a>. Usually the parameters of the AlgorithmIdentifier contain an instance of the Dss-Parms giving you p, k, g and the subjectPublicKey BIT STRING contains the public key y encoded as an DER-encoded INTEGER.</p>

<p>Concerning Base64: Strictly speaking certificates are <em>not</em> Base64-encoded but use an extended form of it, the PEM format, a plain text format which is the Base64 encoding of a X.509 certificate (RFC5280) enclosed between the lines </p>

<pre><code>""-----BEGIN CERTIFICATE-----"" 
...
""-----END CERTIFICATE-----"" 
</code></pre>

<p>or </p>

<pre><code>""-----BEGIN X509 CERTIFICATE----"" 
...
""-----END X509 CERTIFICATE----"". 
</code></pre>

<p>The certificate itself is the DER encoding of the ASN.1 structure as described in RFC 5280. See <a href=""http://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf"" rel=""nofollow"">X.690</a> for details of DER (Distinguished Encoding Rules).</p>

<p>Most certificates are stored either in PEM format or directly in their raw DER-encoded form.</p>
","3778","<certificate><base64><public-key><pki><asn.1>","2","4","2","2011-08-04 09:19:27","6488426","1","2","827060","","2011-07-10 03:59:22","2011-06-27 03:40:01",""
"13057948","Python: Paramiko authentication via public key ""not a valid RSA""","<p>I'm attempting to communicate between two Solaris servers via Paramiko.  I can't use my private key for security reasons so am attempting to use id_rsa.pub.  Originally I tried this:</p>

<pre><code>ssh.connect(hostname=host, username=user, key_filename=path-to-key)
</code></pre>

<p>...where ssh is an SSHClient object.  Eventually my googling led me to believe that connect really expects a private key, not public, so I tried the solution <a href=""http://code.activestate.com/recipes/576810-copy-files-over-ssh-using-paramiko/"" rel=""nofollow"">here</a>.  The difference with this one is that it uses transport.auth_publickey to do the authentication, which I hoped would get me around any formatting hangups.  Here's the significant portion:</p>

<pre><code>try:
    ki = paramiko.RSAKey.from_private_key_file(filename=key_file)
except Exception, e:
    print 'Failed loading {0}.  {1}'.format(key_file, e)
    return
</code></pre>

<p>I've checked my key_file and it is definitely pointing at my id_rsa.pub file, which is in OpenSSH format (I think; it starts with ssh-rsa and ends with user@host).  Still, I consistently hit the exception above, with e being, ""not a valid RSA private key file"".  Looking into the code, the closest error I can find to this is in the decoding step from BER.  I don't really know anything about BER or OpenSSH, but google seems to think they're the same thing, or at least compatible.</p>

<p>There are plenty of answers to similar questions here, but nothing that indicates why my solution doesn't work.  I'm not reading some strange format, I'm not confusing the key file with the key itself, etc.</p>

<p>Anyone have success using id_rsa.pub or an equivalent with Paramiko?  Preferably on  *nix.  I'm also open to, ""Hey, idiot!  Why are you using Paramiko when there's something so much easier!""  ...so long as the criticism is constructive.</p>
","<p>You can't use the <strong>public key</strong> when connecting to the server, you have to supply the <strong>private key</strong>, that's how public/private key authentication works! The example you link to also reads the <strong>private key</strong> and uses it to connect.</p>

<p>You could generate a keypair that you only use for paramiko, that way you don't need to expose  the private key you use for e.g. ssh etc. </p>
","3748","<python><rsa><solaris><paramiko><public-key>","3","3","1","2012-10-25 06:22:32","","0","","","","","2012-10-24 21:21:24",""
"13896007","java - get key from byte array","<p>I have a java program that encrypts file content with a random-generated key.
That key is encrpyted with RSA and saved into a text file.</p>

<p>Now, I have a java program that given the file and the keystore where the RSA key is stored, needs to first decrypt the encryped key and then with the key to decrypt the file.</p>

<p>Here's what I have so far:</p>

<pre><code>// Fetch the other public key and decrypt the file encryption key
java.security.cert.Certificate cert2 = keystore.getCertificate(""keyForSeckeyDecrypt"");
Key secKeyPublicKey = cert2.getPublicKey();
Cipher cipher = Cipher.getInstance(secKeyPublicKey.getAlgorithm());
cipher.init(Cipher.DECRYPT_MODE, secKeyPublicKey);
keyFileFis = new FileInputStream(keyFile);
byte[] encryptedKey = new byte[128];
keyFileFis.read(encryptedKey);
byte[] realFileKey = cipher.doFinal(encryptedKey, 0, encryptedKey.length);
Key realKey = //  THE PROBLEM!!!;
keyFileFis.close();
</code></pre>

<p>In short, I get the encrypted key from the key text file and decrypt it, now I have the decrypted key as a byte array, how would I make it a Key variable again?</p>

<p>I've generated the key this way:</p>

<pre><code>Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
Key secKey = keyGen.generateKey();
cipher.init(Cipher.ENCRYPT_MODE, secKey);
</code></pre>

<p>And encrypted it this way:</p>

<pre><code>KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(1024);
KeyPair kp = kpg.genKeyPair();
PrivateKey privateKey = kp.getPrivate();
Cipher keyCipher = Cipher.getInstance(""RSA"");
keyCipher.init(Cipher.ENCRYPT_MODE, privateKey);
byte[] encryptedKey = keyCipher.doFinal(secKey.getEncoded());
FileOutputStream keyStream = new FileOutputStream(""key.txt"");
keyStream.write(encryptedKey);
keyStream.close();
</code></pre>
","<p>I haven't tried it but from clicking through the API <a href=""http://docs.oracle.com/javase/7/docs/api/javax/crypto/spec/SecretKeySpec.html"" rel=""nofollow"">SecretKeySpec</a> could be what you are looking for.</p>

<pre><code>SecretKeySpec(byte[] key, String algorithm)
</code></pre>

<blockquote>
  <p>It can be used to construct a SecretKey from a byte array, without having to go through a (provider-based) SecretKeyFactory.</p>
  
  <p>This class is only useful for raw secret keys that can be represented as a byte array and have no key parameters associated with them, e.g., DES or Triple DES keys.</p>
</blockquote>
","3747","<java><public-key><cryptoapi>","0","1","2","2012-12-16 13:47:08","","4","4","204390","","2012-12-16 13:47:08","2012-12-15 20:40:26",""
"13896007","java - get key from byte array","<p>I have a java program that encrypts file content with a random-generated key.
That key is encrpyted with RSA and saved into a text file.</p>

<p>Now, I have a java program that given the file and the keystore where the RSA key is stored, needs to first decrypt the encryped key and then with the key to decrypt the file.</p>

<p>Here's what I have so far:</p>

<pre><code>// Fetch the other public key and decrypt the file encryption key
java.security.cert.Certificate cert2 = keystore.getCertificate(""keyForSeckeyDecrypt"");
Key secKeyPublicKey = cert2.getPublicKey();
Cipher cipher = Cipher.getInstance(secKeyPublicKey.getAlgorithm());
cipher.init(Cipher.DECRYPT_MODE, secKeyPublicKey);
keyFileFis = new FileInputStream(keyFile);
byte[] encryptedKey = new byte[128];
keyFileFis.read(encryptedKey);
byte[] realFileKey = cipher.doFinal(encryptedKey, 0, encryptedKey.length);
Key realKey = //  THE PROBLEM!!!;
keyFileFis.close();
</code></pre>

<p>In short, I get the encrypted key from the key text file and decrypt it, now I have the decrypted key as a byte array, how would I make it a Key variable again?</p>

<p>I've generated the key this way:</p>

<pre><code>Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
Key secKey = keyGen.generateKey();
cipher.init(Cipher.ENCRYPT_MODE, secKey);
</code></pre>

<p>And encrypted it this way:</p>

<pre><code>KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(1024);
KeyPair kp = kpg.genKeyPair();
PrivateKey privateKey = kp.getPrivate();
Cipher keyCipher = Cipher.getInstance(""RSA"");
keyCipher.init(Cipher.ENCRYPT_MODE, privateKey);
byte[] encryptedKey = keyCipher.doFinal(secKey.getEncoded());
FileOutputStream keyStream = new FileOutputStream(""key.txt"");
keyStream.write(encryptedKey);
keyStream.close();
</code></pre>
","<p>If I get it right, this should work..</p>

<pre><code>Key privateKey = keyStore.getKey(""youralias"", ""password"".toCharArray());
PublicKey publicKey = keyStore.getCertificate(""youralias"").getPublicKey();

KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
Key secKey = keyGen.generateKey();

Cipher keyCipher = Cipher.getInstance(""RSA"");
keyCipher.init(Cipher.ENCRYPT_MODE, privateKey);
byte[] encryptedKey = keyCipher.doFinal(secKey.getEncoded());

// Write &amp; Read to/from file!

Cipher decryptCipher = Cipher.getInstance(""RSA"");
decryptCipher.init(Cipher.DECRYPT_MODE, publicKey);
byte[] decryptedKey = decryptCipher.doFinal(encryptedKey);

boolean equals = Arrays.equals(secKey.getEncoded(), new SecretKeySpec(decryptedKey, ""AES"").getEncoded());
System.out.println(equals?""Successfull!"":""Failed!"");
</code></pre>
","3747","<java><public-key><cryptoapi>","0","0","2","2012-12-16 13:47:08","","4","4","204390","","2012-12-16 13:47:08","2012-12-15 20:40:26",""
"25828537","Android public key decoded from Base64 string throws exception","<p>I'm facing a problem when decoding a string encoded with Base64 to retrieve a public key.</p>

<p>Here is the method I use to decrypt:</p>

<pre><code>public PublicKey decodeKyFrom64(String pub64) {
    try {
        byte[] keyBytes = Base64.decode(pub64.getBytes(""utf-8""),Base64.DEFAULT);
        X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
        KeyFactory keyFactory;
        try {
            keyFactory = KeyFactory.getInstance(""RSA"");
            try {
                PublicKey key = (PublicKey)keyFactory.generatePublic(spec);
                return key;
            } catch (InvalidKeySpecException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        } catch (NoSuchAlgorithmException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
    } catch (UnsupportedEncodingException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
    return null;
}
</code></pre>

<p>And to encrypt: </p>

<pre><code>public String[] genKyForNewUser() {
    KeyPairGenerator kpg;
    KeyPair kp;
    PublicKey publicKey;
    PrivateKey privateKey;
    try {
        kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(1024);
        kp = kpg.genKeyPair();
        publicKey = kp.getPublic();
        privateKey = kp.getPrivate();
        String privKy = Base64.encodeToString(privateKey.getEncoded(), Base64.DEFAULT);
        String pubKy = Base64.encodeToString(publicKey.getEncoded(), Base64.DEFAULT);
        Log.d(""Kript"",""Public: ""+publicKey);
        Log.d(""Kript"",""Private: ""+privateKey);
        Log.d(""Kript"",""PubKy: ""+pubKy);
        Log.d(""Kript"",""PrivKy: ""+privKy);
        String[] kys = {pubKy,privKy};
        return kys;
    } catch (NoSuchAlgorithmException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    return null;
}
</code></pre>

<p>And this is the exception I got:</p>

<pre><code>09-14 00:36:56.293: W/System.err(27217): java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag
09-14 00:36:56.343: W/System.err(27217):    at com.android.org.conscrypt.OpenSSLKey.getPublicKey(OpenSSLKey.java:101)
09-14 00:36:56.343: W/System.err(27217):    at com.android.org.conscrypt.OpenSSLRSAKeyFactory.engineGeneratePublic(OpenSSLRSAKeyFactory.java:47)
09-14 00:36:56.343: W/System.err(27217):    at java.security.KeyFactory.generatePublic(KeyFactory.java:171)
09-14 00:36:56.343: W/System.err(27217):    at com.probes.sm0ke.SmoKript.decodeKyFrom64(SmoKript.java:118)
09-14 00:36:56.343: W/System.err(27217):    at com.probes.sm0ke.GestureChooser.actOnChoose(GestureChooser.java:55)
09-14 00:36:56.343: W/System.err(27217):    at com.probes.sm0ke.GestureChooser.onGesturePerformed(GestureChooser.java:46)
09-14 00:36:56.343: W/System.err(27217):    at android.gesture.GestureOverlayView.fireOnGesturePerformed(GestureOverlayView.java:729)
09-14 00:36:56.343: W/System.err(27217):    at android.gesture.GestureOverlayView.access$400(GestureOverlayView.java:55)
09-14 00:36:56.343: W/System.err(27217):    at android.gesture.GestureOverlayView$FadeOutRunnable.run(GestureOverlayView.java:744)
09-14 00:36:56.353: W/System.err(27217):    at android.os.Handler.handleCallback(Handler.java:733)
09-14 00:36:56.353: W/System.err(27217):    at android.os.Handler.dispatchMessage(Handler.java:95)
09-14 00:36:56.353: W/System.err(27217):    at android.os.Looper.loop(Looper.java:136)
09-14 00:36:56.353: W/System.err(27217):    at android.app.ActivityThread.main(ActivityThread.java:5001)
09-14 00:36:56.353: W/System.err(27217):    at java.lang.reflect.Method.invokeNative(Native Method)
09-14 00:36:56.353: W/System.err(27217):    at java.lang.reflect.Method.invoke(Method.java:515)
09-14 00:36:56.353: W/System.err(27217):    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:785)
09-14 00:36:56.353: W/System.err(27217):    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:601)
09-14 00:36:56.353: W/System.err(27217):    at dalvik.system.NativeStart.main(Native Method)
09-14 00:36:56.353: W/System.err(27217): Caused by: java.lang.RuntimeException: error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag
09-14 00:36:56.353: W/System.err(27217):    at com.android.org.conscrypt.NativeCrypto.d2i_PUBKEY(Native Method)
09-14 00:36:56.353: W/System.err(27217):    at com.android.org.conscrypt.OpenSSLKey.getPublicKey(OpenSSLKey.java:99)
09-14 00:36:56.353: W/System.err(27217):    ... 17 more
</code></pre>

<p>I really don't know why this has happened. I save the Base64 string generated for both private and public key in a SQLite database. Then I retrieve the Base64 string from the database, decode it and try to get the public key. But it doesn't work. Can anyone help me to understand the reason for this exception? When i tried the first time, I passed the generated Base64 string straight to the function to decode it, only to try, and it worked. But if I saved it in the database and then get it to decode, it doesn't work anymore. </p>

<p>Please help me.</p>
","<p>I had the same problem, try to do this:</p>

<pre><code>String pubKey = ""your_modulus"";
String exponent = ""your_exponent"";

byte[] keyBytes = Base64.decode(pubKey,Base64.DEFAULT);
byte[] exponentByte = Base64.decode(exponent,Base64.DEFAULT);

KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");

RSAPublicKeySpec pubKeySpec = new RSAPublicKeySpec(new BigInteger(keyBytes), new BigInteger(exponentByte));
RSAPublicKey publicKey = (RSAPublicKey) keyFactory.generatePublic(pubKeySpec);
</code></pre>

<p>See: <a href=""https://stackoverflow.com/questions/26117881/android-java-rsa-decrypt/26123875#26123875"">Android-Java RSA decrypt</a></p>
","3738","<android><string><encoding><base64><public-key>","0","0","1","2014-09-30 14:56:22","","1","2","463053","","2014-09-14 07:30:50","2014-09-13 22:56:08",""
"3996658","SecTrustCreateWithCertificates crashes on iPad","<p>I am trying to use iOS security framework to securely communicate with my server. I have a certificate file from which I am able to get a public key reference. This is what I doing.</p>

<pre><code> NSString *certPath    = [[NSBundle mainBundle] pathForResource:@""supportwarriors.com"" ofType:@""cer""];
 SecCertificateRef myCertificate = nil;

 NSData *certificateData   = [[NSData alloc] initWithContentsOfFile:certPath]; 
 myCertificate     = SecCertificateCreateWithData(kCFAllocatorDefault, (CFDataRef)certificateData);

 //got certificate ref..Now get public key secKeyRef reference from certificate..
 SecPolicyRef myPolicy   = SecPolicyCreateBasicX509();
 SecTrustRef myTrust;
 OSStatus status     = SecTrustCreateWithCertificates(myCertificate,myPolicy,&amp;myTrust);  

    SecTrustResultType trustResult;
    if (status == noErr) {
        status = SecTrustEvaluate(myTrust, &amp;trustResult);  
    }
 publicKey      = SecTrustCopyPublicKey(myTrust);
</code></pre>

<p>Above piece of code works perfectly on iPhone and I have tested that. I am able to securely communicate with my server. But when I try to run my app on iPad (in 2x mode) the above code getting crashed. After debug, I found out that secTrustCreateWithCertificate is crashing and the crash log is given below.. Certificate I used is same for both iPad and iPhone...The function above secCertificateCreateWithData returning a certificate reference and is not nil...So that is not the cause of crash..What am  I doing wrong.</p>

<pre><code>*** -[NSCFType count]: unrecognized selector sent to instance 0x14af24
*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '***      -[NSCFType count]: unrecognized selector sent to instance 0x14af24'
</code></pre>
","<p>The documentation for <code>SecTrustCreateWithCertificates</code> claims that you can pass either a single certificate OR an array.  The exception you're receiving states that <code>-[NSCFType count]: unrecognized selector sent to instance</code>.  What's happening in iOS 3.2 is that <code>SecTrustCreateWithCertificates</code> is treating the input value like a CFArray without checking first to see if it's a singular <code>SecCertificateRef</code>.  </p>

<p>To get around this, you can do something similar to the following code:</p>

<pre><code>    SecCertificateRef certs[1] = { certificate };
    CFArrayRef array = CFArrayCreate(NULL, (const void **) certs, 1, NULL);
    if(SecTrustCreateWithCertificates(array, x509Policy, &amp;trustChain) == errSecSuccess)
</code></pre>

<p>just remember to <code>CFRelease(array)</code> at the appropriate scope.</p>
","3733","<iphone><security><ipad><certificate><public-key>","5","4","1","2011-02-17 03:17:36","","1","2","23033","","2011-02-17 03:17:36","2010-10-22 12:14:14",""
"9378150","How to get the private key from a separate file?","<p>I have an Apache (xampp/wamp) server that provides a SSL connection on port 443.
It uses two certificate files: server.cert and server.key when the latter conains the private key.</p>

<p>I have another server configured to listen to requests on port 843 (flash policy stuff) and response to a certain request with some text reply written in C# which runs separately.</p>

<p>In order to achieve SSL connectivity, i use a flex object called SecureSocket which allowes that, however, it uses the original servers certificate in order to encrypt the request.</p>

<p>My goal is to teach my 843 C# server to decrypt the sent data and encrypt the reply and for this i'm using the X509Certificate object in C#.</p>

<p>However, since the pub and priv keys are on different files, i'm getting FALSE on the following:</p>

<pre><code>string text = System.IO.File.ReadAllText(@""C:\xampp\apache\conf\ssl.crt\server.crt"");
UTF8Encoding encoding = new System.Text.UTF8Encoding();
byte[] byteCert = encoding.GetBytes(text);
X509Certificate2 uberCert = new X509Certificate2();
uberCert.Import(byteCert);
Console.WriteLine(""Has privateKey:"" + uberCert.HasPrivateKey.ToString());
Console.WriteLine(""PrivateKey: \n"" + uberCert.PrivateKey);
</code></pre>

<p>Obviously, the False on uberCert.HasPrivateKey comes from the fact that the private key is on a different file, so my questions are: </p>

<p>1.How can i read the private key using the X509CErtificate2 object?
2.How can i use the public key in order to decrypt the received message and how to re-encrypt it with the private key (in order to send the encrypted response back) ?</p>

<p>Thanks in advance,</p>

<p>Mike.</p>
","<p>The private key is likely <a href=""http://www.faqs.org/qa/qa-14736.html"" rel=""nofollow"">PEM encoded</a> <a href=""http://www.rsa.com/rsalabs/node.asp?id=2130"" rel=""nofollow"">PKCS#8</a> structure.</p>

<p>The Mono project provides code to read this <a href=""https://github.com/mono/mono/blob/master/mcs/class/Mono.Security/Mono.Security.Cryptography/PKCS8.cs"" rel=""nofollow"">format</a> (among other) in the <a href=""https://github.com/mono/mono/tree/master/mcs/class/Mono.Security"" rel=""nofollow"">Mono.Security.dll</a> assembly. This assembly is purely managed and will work on Windows, Linux or OSX.</p>
","3728","<c#><openssl><private-key><x509certificate2><public-key>","2","0","3","2017-07-17 20:25:30","","0","","41071","","2012-02-21 14:55:50","2012-02-21 13:07:51",""
"9378150","How to get the private key from a separate file?","<p>I have an Apache (xampp/wamp) server that provides a SSL connection on port 443.
It uses two certificate files: server.cert and server.key when the latter conains the private key.</p>

<p>I have another server configured to listen to requests on port 843 (flash policy stuff) and response to a certain request with some text reply written in C# which runs separately.</p>

<p>In order to achieve SSL connectivity, i use a flex object called SecureSocket which allowes that, however, it uses the original servers certificate in order to encrypt the request.</p>

<p>My goal is to teach my 843 C# server to decrypt the sent data and encrypt the reply and for this i'm using the X509Certificate object in C#.</p>

<p>However, since the pub and priv keys are on different files, i'm getting FALSE on the following:</p>

<pre><code>string text = System.IO.File.ReadAllText(@""C:\xampp\apache\conf\ssl.crt\server.crt"");
UTF8Encoding encoding = new System.Text.UTF8Encoding();
byte[] byteCert = encoding.GetBytes(text);
X509Certificate2 uberCert = new X509Certificate2();
uberCert.Import(byteCert);
Console.WriteLine(""Has privateKey:"" + uberCert.HasPrivateKey.ToString());
Console.WriteLine(""PrivateKey: \n"" + uberCert.PrivateKey);
</code></pre>

<p>Obviously, the False on uberCert.HasPrivateKey comes from the fact that the private key is on a different file, so my questions are: </p>

<p>1.How can i read the private key using the X509CErtificate2 object?
2.How can i use the public key in order to decrypt the received message and how to re-encrypt it with the private key (in order to send the encrypted response back) ?</p>

<p>Thanks in advance,</p>

<p>Mike.</p>
","<p>You can't in straight .NET.</p>

<p>You can either use BouncyCastle (see this answer: <a href=""https://stackoverflow.com/questions/243646/how-to-read-a-pem-rsa-private-key-from-net"">How to read a PEM RSA private key from .NET</a>) or use a PKCS12 container instead for the username + password, which you can create using OpenSSL's tools from the PEM files.</p>
","3728","<c#><openssl><private-key><x509certificate2><public-key>","2","0","3","2017-07-17 20:25:30","","0","","41071","","2012-02-21 14:55:50","2012-02-21 13:07:51",""
"9378150","How to get the private key from a separate file?","<p>I have an Apache (xampp/wamp) server that provides a SSL connection on port 443.
It uses two certificate files: server.cert and server.key when the latter conains the private key.</p>

<p>I have another server configured to listen to requests on port 843 (flash policy stuff) and response to a certain request with some text reply written in C# which runs separately.</p>

<p>In order to achieve SSL connectivity, i use a flex object called SecureSocket which allowes that, however, it uses the original servers certificate in order to encrypt the request.</p>

<p>My goal is to teach my 843 C# server to decrypt the sent data and encrypt the reply and for this i'm using the X509Certificate object in C#.</p>

<p>However, since the pub and priv keys are on different files, i'm getting FALSE on the following:</p>

<pre><code>string text = System.IO.File.ReadAllText(@""C:\xampp\apache\conf\ssl.crt\server.crt"");
UTF8Encoding encoding = new System.Text.UTF8Encoding();
byte[] byteCert = encoding.GetBytes(text);
X509Certificate2 uberCert = new X509Certificate2();
uberCert.Import(byteCert);
Console.WriteLine(""Has privateKey:"" + uberCert.HasPrivateKey.ToString());
Console.WriteLine(""PrivateKey: \n"" + uberCert.PrivateKey);
</code></pre>

<p>Obviously, the False on uberCert.HasPrivateKey comes from the fact that the private key is on a different file, so my questions are: </p>

<p>1.How can i read the private key using the X509CErtificate2 object?
2.How can i use the public key in order to decrypt the received message and how to re-encrypt it with the private key (in order to send the encrypted response back) ?</p>

<p>Thanks in advance,</p>

<p>Mike.</p>
","<p>I've created a small helper NuGet package (based on <a href=""http://www.jensign.com/opensslkey/opensslkey.cs"" rel=""nofollow noreferrer"">opensslkey</a>) to create a <strong>X509 certificate based</strong> on <strong>public key</strong> and <strong>private (rsa) key</strong>.</p>

<pre><code>// Generate with: openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout private.key -out certificate_pub.crt
string certificateText = File.ReadAllText(""certificate_pub.crt"");
string privateKeyText = File.ReadAllText(""private.key"");

ICertificateProvider provider = new CertificateFromFileProvider(certificateText, privateKeyText);
X509Certificate2 certificate = provider.Certificate;

// Example: use the PrivateKey from the certificate above for signing a JWT token using Jose.Jwt:
string token = Jose.JWT.Encode(payload, certificate.PrivateKey, JwsAlgorithm.RS256);
</code></pre>

<p>See <a href=""https://www.nuget.org/packages/OpenSSL.X509Certificate2.Provider"" rel=""nofollow noreferrer"">NuGet</a> and <a href=""https://github.com/StefH/OpenSSL-X509Certificate2-Provider"" rel=""nofollow noreferrer"">Github-project</a> for functionality and code-examples.</p>
","3728","<c#><openssl><private-key><x509certificate2><public-key>","2","1","3","2017-07-17 20:25:30","","0","","41071","","2012-02-21 14:55:50","2012-02-21 13:07:51",""
"22981017","java RSA encryption using bouncy castle and python PKCS1-OAEP","<p>For over a week, I've been using <a href=""https://launchkey.com/docs/api/encryption/java/spongycastle#"" rel=""nofollow noreferrer"">this</a> to implement a RSA secured communication with my server that is in python. </p>

<p>However, I can not for the life of me figure out the proper imports for all the jars. </p>

<p>I have included all the jars found on bouncy castles website and still no dice!</p>

<p>I read that they moved stuff around. If this code is old or broken, what other implementation of RSA with pkcs1 padding is put there? </p>

<p><strong>EDIT:</strong></p>

<p>pub key is in a file named key.pub. how do I read that file in to be used as the key</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAv2B0wo+QJ6tCqeyTzhZ3
AtPLgAHEQ/fRYDcR0BkQ+lXEhD277P2fPZwla5AW6szqsjR1olkZEF7IuoI27Hxm
tQHJU0ROhrzstHgK42emz5Ya3BWcm+oq5pLDZnsNDnNlrPncaCT7gHQQJn3YjH8q
aibtB1WCoy7ZJ127QxoKoLfeonBDtt7Qw6P5iXE57IbQ63oLq1EaYUfg8ZpADvJF
b2H3MASJSSDrSDgrtCcKAUYuu3cZw16XShuKCNb5QLsj3tR0QC++7qjM3VcG311K
7gHVjB6zybw+5vX2UWTgZuL6WVtCvRK+WY7nhL3cc5fmXZhkW1Jbx6wLPK3K/JcR
NQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p><strong>EDIT 2: Adding Broken Code based on an answer</strong></p>

<pre><code>package Main;


import org.bouncycastle.util.encoders.Base64;

import javax.crypto.Cipher;
import javax.xml.bind.DatatypeConverter;
import java.io.*;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.Security;
import java.security.spec.X509EncodedKeySpec;

public class EncDecRSA {
    public static byte[] pemToDer(String pemKey) throws GeneralSecurityException {
        String[] parts = pemKey.split(""-----"");
        return DatatypeConverter.parseBase64Binary(parts[parts.length / 2]);
    }

    public static PublicKey derToPublicKey(byte[] asn1key) throws GeneralSecurityException {
        X509EncodedKeySpec spec = new X509EncodedKeySpec(asn1key);
        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"", ""BC"");
        return keyFactory.generatePublic(spec);
    }

    public static byte[] encrypt(PublicKey publicKey, String text) throws GeneralSecurityException {
        Cipher rsa = Cipher.getInstance(""RSA/ECB/OAEPWithSHA1AndMGF1Padding"", ""BC"");//PKCS1-OAEP
        rsa.init(Cipher.ENCRYPT_MODE, publicKey);
        byte[] cipher =  rsa.doFinal(text.getBytes());
        String s = new String(cipher);
        System.out.print(s);
//        return cipher;
//        return Base64.encode(rsa.doFinal(text.getBytes()));
        cipher = Base64.encode(cipher);
        return cipher;

    }

    static String readFile(String path)
            throws IOException
    {
        String line = null;
        BufferedReader br = new BufferedReader(new FileReader(path));
        try {
            StringBuilder sb = new StringBuilder();
            line = br.readLine();

            while (line != null) {
                sb.append(line);
                sb.append(""\n"");
                line = br.readLine();
            }
            return sb.toString();
        } finally {
            br.close();

        }

    }
    public static void main(String[] args) throws IOException, GeneralSecurityException {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

        System.out.println(""Working Directory = "" +
                System.getProperty(""user.dir""));
        String publicKey = readFile(""key.public"");
        byte[] pem = pemToDer(publicKey);
        PublicKey myKey = derToPublicKey(pem);
        String sendMessage = ""{'vid_hash': '917ef7e7be4a84e279b74a257953307f1cff4a2e3d221e363ead528c6b556edb', 'state': 'ballot_response', 'userInfo': {'ssn': '700-33-6870', 'pin': '1234', 'vid': '265jMeges'}}"";
        byte[] encryptedDATA = encrypt(myKey, sendMessage);
        Socket smtpSocket = null;
        DataOutputStream os = null;
        DataInputStream is = null;
        try {
            smtpSocket = new Socket(""192.168.1.124"", 9999);
            os = new DataOutputStream(smtpSocket.getOutputStream());
            is = new DataInputStream(smtpSocket.getInputStream());
        } catch (UnknownHostException e) {
            System.err.println(""Don't know about host: hostname"");
        } catch (IOException e) {
            System.err.println(""Couldn't get I/O for the connection to: hostname"");
        }

        if (smtpSocket != null &amp;&amp; os != null &amp;&amp; is != null) {
            try {
                System.out.println(""sending message"");
                os.writeBytes(encryptedDATA+""\n"");
                os.close();
                is.close();
                smtpSocket.close();
            } catch (UnknownHostException e) {
                System.err.println(""Trying to connect to unknown host: "" + e);
            } catch (IOException e) {
                System.err.println(""IOException:  "" + e);
            }
        }
    }
}
</code></pre>

<p>Which has the following error:</p>

<p><img src=""https://i.stack.imgur.com/fNA4a.png"" alt=""enter image description here""></p>

<p>Here is the bit of python code that does that:</p>

<pre><code>def _decrypt_RSA(self, private_key_loc, package):
    '''
    param: public_key_loc Path to your private key
    param: package String to be decrypted
    return decrypted string
    '''
    from Crypto.PublicKey import RSA 
    from Crypto.Cipher import PKCS1_OAEP 
    from base64 import b64decode 
    key = open('key.private', ""r"").read() 
    rsakey = RSA.importKey(key) 
    rsakey = PKCS1_OAEP.new(rsakey) 

    decrypted = rsakey.decrypt(package)
    # decrypted = rsakey.decrypt(b64decode(package)) 
    return decrypted
</code></pre>

<p><strong>Lastly:</strong></p>

<p>Is this padding scheme with PKCS1-OAEP.</p>

<p>That is a major requirement for this to work.</p>

<p>Note that I have tried it with both base64 encode and without</p>
","<p>This example is for SpongyCastle - Android repackage of BouncyCastle. They differ as you noticed. However, making encryption in Java is as simple as this</p>

<p>Convert Base64 encoded key string to ASN.1 DER encoded byte array</p>

<pre><code>public static byte[] pemToDer(String pemKey) throws GeneralSecurityException {
    String[] parts = pemKey.split(""-----"");
    return DatatypeConverter.parseBase64Binary(parts[parts.length / 2]);
}
</code></pre>

<p>Convert ASN.1 DER encoded public key to PublicKey object</p>

<pre><code>public static PublicKey derToPublicKey(byte[] asn1key) throws GeneralSecurityException {
    X509EncodedKeySpec spec = new X509EncodedKeySpec(asn1key);
    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"", ""BC"");
    return keyFactory.generatePublic(spec);
}
</code></pre>

<p>Encrypt data</p>

<pre><code>public static byte[] encrypt(PublicKey publicKey, String text) throws GeneralSecurityException {
    Cipher rsa = Cipher.getInstance(""RSA/ECB/OAEPWithSHA1AndMGF1Padding"", ""BC"");
    rsa.init(Cipher.ENCRYPT_MODE, publicKey);
    return rsa.doFinal(text.getBytes());
}
</code></pre>

<p>bcprov-jdk15on-150.jar is the only jar needed.</p>
","3709","<java><python><encryption><bouncycastle><public-key>","0","1","1","2014-04-10 21:31:34","22990631","1","3","1048138","","2014-04-10 21:31:34","2014-04-10 07:09:32",""
"6759540","How to create public key for encryption in keychain using ipad app","<p>i need to encrypt text using rsa algorithm for which i need public key.
i want to generate public key inside the app and use it for encryption. i have to generate key of type SecKeyRef. how do i do that? </p>
","<p>I dont know exactly what you want to do, but this might help you, </p>

<p><a href=""https://stackoverflow.com/questions/5942712/ios-creating-seckeyref-from-exponentmodulus"">iOS - Creating SecKeyRef from exponent+modulus</a></p>

<p><a href=""http://developer.apple.com/library/mac/#documentation/Security/Conceptual/keychainServConcepts/iPhoneTasks/iPhoneTasks.html"" rel=""nofollow noreferrer"">Keychain Services Programming Guide</a></p>

<p><a href=""https://stackoverflow.com/questions/3558252/ios-keychain-security"">iOS Keychain Security</a></p>

<p><a href=""http://blog.flirble.org/2011/01/05/rsa-public-key-openssl-ios/"" rel=""nofollow noreferrer"">Using an RSA public key generated by OpenSSL in iOS</a></p>

<p>I hope it will help you</p>
","3704","<iphone><objective-c><ipad><public-key>","1","2","1","2011-07-20 09:41:23","","2","1","730480","","2011-07-20 09:25:55","2011-07-20 09:13:48",""
"15372360","apache sshd public key authentication","<p>I am trying to set up an ssh server using apache mina sshd. I want to use  public key authentication, and basically I want to know how to implement</p>

<pre><code>package org.apache.sshd.server;
import java.security.PublicKey;
import org.apache.sshd.server.session.ServerSession;

public interface PublickeyAuthenticator {

boolean authenticate(String username, PublicKey key, ServerSession session);

}
</code></pre>

<p>I see that what is passed is another public key. So I assume that you are supposed to compare the public key given in the param with the public key that the server has. But I don't know how to do that.</p>

<p>One thing I have found is <a href=""http://maven.apache.org/wagon/xref/org/apache/maven/wagon/providers/ssh/TestPublickeyAuthenticator.html"" rel=""nofollow"">this</a> implementation. which seems pointless, as it seems to compare the modulus of the public key to itself. Assuming that this implementation has a bug, and should be comparing the moduli of each public key, is this enough for authentication - that the moduli agree? Surely if I just fed my publicly available public key to this function, then I would get authenticated? </p>
","<p>I think I found the answer in the source of <code>org.apache.sshd.server.auth.UserAuthPublicKey#auth</code>. This class does the actual auth with the key. I think what confused me is the name of the method - <code>authenticate()</code>. What really happens is as follows:</p>

<ul>
<li><p>The server asks for the public key of the client</p></li>
<li><p>The public key is passed to <code>PublickeyAuthenticator#authenticate</code></p></li>
<li><p>All you are supposed to do in <code>authenticate()</code> is check that this is a public key that you want to allow</p></li>
<li><p>If <code>authenticate()</code> returns true, then <code>UserAuthPublicKey#auth</code> will check that a message has been signed with the private key. If it has then authentication has been validated.</p></li>
</ul>
","3694","<java><authorization><public-key><sshd><mina>","1","8","2","2019-09-03 16:49:48","","0","1","","","","2013-03-12 21:20:09",""
"15372360","apache sshd public key authentication","<p>I am trying to set up an ssh server using apache mina sshd. I want to use  public key authentication, and basically I want to know how to implement</p>

<pre><code>package org.apache.sshd.server;
import java.security.PublicKey;
import org.apache.sshd.server.session.ServerSession;

public interface PublickeyAuthenticator {

boolean authenticate(String username, PublicKey key, ServerSession session);

}
</code></pre>

<p>I see that what is passed is another public key. So I assume that you are supposed to compare the public key given in the param with the public key that the server has. But I don't know how to do that.</p>

<p>One thing I have found is <a href=""http://maven.apache.org/wagon/xref/org/apache/maven/wagon/providers/ssh/TestPublickeyAuthenticator.html"" rel=""nofollow"">this</a> implementation. which seems pointless, as it seems to compare the modulus of the public key to itself. Assuming that this implementation has a bug, and should be comparing the moduli of each public key, is this enough for authentication - that the moduli agree? Surely if I just fed my publicly available public key to this function, then I would get authenticated? </p>
","<p>The below code is an example of how to perform Public Key Authentication using Apache MINA SSHD, the example code creates a SFTP server.</p>

<pre><code>import java.io.File;
import java.io.IOException;
import java.util.Collections;

@Service
public class MySftpServer {

    private Log log = LogFactory.getLog(MySftpServer.class);

    @PostConstruct
    public void startServer() throws IOException {
        start();
    }

    private void start() throws IOException {
        SshServer sshd = SshServer.setUpDefaultServer();
        sshd.setHost(""localhost"");
        sshd.setPort(2222);
        sshd.setKeyPairProvider(new SimpleGeneratorHostKeyProvider(new File(""host.ser"")));
        sshd.setSubsystemFactories(Collections.singletonList(new SftpSubsystemFactory()));
        sshd.setPasswordAuthenticator((username, password, session) -&gt; username.equals(""test"") &amp;&amp; password.equals(""password""));
        sshd.setPublickeyAuthenticator(new AuthorizedKeysAuthenticator(new File(""&lt;Location of authorized_keys file&gt;"")));
        sshd.start();
        log.info(""SFTP server started"");
    }
}
</code></pre>

<p>Similar to what @northshorefiend mentioned in his answer, in this case <code>AuthorizedKeysAuthenticator</code> takes the public key passed to the server and validates it against the authorized_keys file <code>new AuthorizedKeysAuthenticator(new File(""&lt;Location of authorized_keys file&gt;"")</code> . If the specified public key exists in the file, then it passes the authentication.</p>

<p>You can read more details about this <a href=""https://programmingtechie.com/2019/08/18/how-to-implement-an-sftp-server-in-java-spring-boot-using-apache-mina-sshd-part-2-using-public-key-authentication/"" rel=""nofollow noreferrer"">here</a> and <a href=""https://programmingtechie.com/2019/02/23/how-to-implement-an-sftp-server-in-java-spring-boot-using-apache-mina-sshd/"" rel=""nofollow noreferrer"">here</a></p>
","3694","<java><authorization><public-key><sshd><mina>","1","1","2","2019-09-03 16:49:48","","0","1","","","","2013-03-12 21:20:09",""
"2309221","using public/private keys in javascript","<p>I need to send an ajax POST request to my server.</p>

<p>I'll need to make sure that the request originated from the script itself, and not from a user writing the request him/her self.
Is there any secure way to do this? Can the script sign or encode the POST request, later to be decrypted by the server's private key? and can I somehow prevent the user from encrypting using my public key?</p>

<p>I'm not doing this just for filtering purposes - so plain old server-side validation just won't do.</p>
","<p>You can't use public key cryptography in pure JS, because the private key (used for signing data) will be exposed.  Generally speaking, what you're trying to do is impossible.</p>
","3666","<javascript><security><rsa><public-key>","2","-2","4","2010-02-24 22:56:04","2330301","3","","","","","2010-02-22 06:36:28",""
"2309221","using public/private keys in javascript","<p>I need to send an ajax POST request to my server.</p>

<p>I'll need to make sure that the request originated from the script itself, and not from a user writing the request him/her self.
Is there any secure way to do this? Can the script sign or encode the POST request, later to be decrypted by the server's private key? and can I somehow prevent the user from encrypting using my public key?</p>

<p>I'm not doing this just for filtering purposes - so plain old server-side validation just won't do.</p>
","<p>Anything you do in Javascript can be seen and analyzed, as it's happening on the client side. So encrypting information securely client side is pretty much impossible. That leaves the server as the only point where you can and need to do validation.</p>

<p>Also, why would you care if an input comes from your script or is hand-crafted by a user? If the input is valid and allowed as defined by your rules, it shouldn't make any difference.</p>

<hr>

<p>For this kind of situation, when in doubt, you need to see the importance of client/server separation. Your server is your app, it's the one and only critical component that you need to take care of. Every input is generally untrusted, every output must be exactly what you intend to disclose.</p>

<p>The HTML/JS interface you're handing to the user is just a help for the human to communicate with your server, but that doesn't mean it's trustworthy or securable once it has left your server.</p>
","3666","<javascript><security><rsa><public-key>","2","9","4","2010-02-24 22:56:04","2330301","3","","","","","2010-02-22 06:36:28",""
"2309221","using public/private keys in javascript","<p>I need to send an ajax POST request to my server.</p>

<p>I'll need to make sure that the request originated from the script itself, and not from a user writing the request him/her self.
Is there any secure way to do this? Can the script sign or encode the POST request, later to be decrypted by the server's private key? and can I somehow prevent the user from encrypting using my public key?</p>

<p>I'm not doing this just for filtering purposes - so plain old server-side validation just won't do.</p>
","<blockquote>
  <p>I'll need to make sure that the
  request originated from the script
  itself, and not from a user writing
  the request him/her self.</p>
</blockquote>

<p>From the point of view of your server 'the script' and 'a user' are indistinguishable. What you are asking for is fundamentally impossible.</p>
","3666","<javascript><security><rsa><public-key>","2","4","4","2010-02-24 22:56:04","2330301","3","","","","","2010-02-22 06:36:28",""
"2309221","using public/private keys in javascript","<p>I need to send an ajax POST request to my server.</p>

<p>I'll need to make sure that the request originated from the script itself, and not from a user writing the request him/her self.
Is there any secure way to do this? Can the script sign or encode the POST request, later to be decrypted by the server's private key? and can I somehow prevent the user from encrypting using my public key?</p>

<p>I'm not doing this just for filtering purposes - so plain old server-side validation just won't do.</p>
","<p>The other answers are correct: this is fundamentally impossible. Probably the best you can do from a pragmatic point of view is to look into really nasty ways to obfuscate your JavaScript to discourage people who might try to look at it, but you can be assured that someone motivated can work around this without too much effort. <a href=""http://en.wikipedia.org/wiki/Obfuscated_code"" rel=""noreferrer"">http://en.wikipedia.org/wiki/Obfuscated_code</a></p>
","3666","<javascript><security><rsa><public-key>","2","5","4","2010-02-24 22:56:04","2330301","3","","","","","2010-02-22 06:36:28",""
"18363006","Getting Permission denied (publickey) even having my public key on the authorized_keys server file","<p>I accidentally erased my private and public key in my local machine.</p>

<p>So I created a new pair using:</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>and copied the content of the id_rsa.pub into my authorized_keys on the server (I can log in as root and I can see the root public key in the authorized_keys file). </p>

<p>However, I keep getting Permission Denied. I already checked the ~/.ssh and the authorized keys permissions (which are set to 700 and 600 respectively).</p>

<p>Any ideas?</p>

<p>Thanks!</p>

<p>Here you have the log output when I try to connect from my local machine:</p>

<pre><code>Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[16635]: debug1: Forked child 27356.
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: Set /proc/self/oom_score_adj to 0
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: rexec start in 5 out 5 newsock 5 pipe 7 sock 8
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: inetd sockets after dupping: 3, 3
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: Connection from 50.67.165.140 port 60112
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: Client protocol version 2.0; client software version OpenSSH_5.9p1 Debian-5ubuntu1.1
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: match: OpenSSH_5.9p1 Debian-5ubuntu1.1 pat OpenSSH*
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: Enabling compatibility mode for protocol 2.0
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: Local version string SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: permanently_set_uid: 105/65534 [preauth]
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: list_hostkey_types: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256 [preauth]
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_KEXINIT sent [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_KEXINIT received [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: kex: client-&gt;server aes128-ctr hmac-md5 none [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: kex: server-&gt;client aes128-ctr hmac-md5 none [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_NEWKEYS sent [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: expecting SSH2_MSG_NEWKEYS [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_NEWKEYS received [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: KEX done [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: userauth-request for user capistrano service ssh-connection method none [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: attempt 0 failures 0 [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: initializing for ""capistrano""
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: setting PAM_RHOST to ""s0106c8fb26427cda.vc.shawcable.net""
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: setting PAM_TTY to ""ssh""
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: userauth-request for user capistrano service ssh-connection method publickey [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: attempt 1 failures 0 [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: test whether pkalg/pkblob are acceptable [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: Checking blacklist file /usr/share/ssh/blacklist.RSA-2048
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: Checking blacklist file /etc/ssh/blacklist.RSA-2048
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: temporarily_use_uid: 1001/1001 (e=0/0)
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: trying public key file /home/capistrano/.ssh/authorized_keys
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: fd 4 clearing O_NONBLOCK
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: restore_uid: 0/0
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: Failed publickey for capistrano from &lt;ip&gt; port 60112 ssh2
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: Connection closed by &lt;ip&gt; [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: do_cleanup [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: monitor_read_log: child log fd closed
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: do_cleanup
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: cleanup
</code></pre>
","<p>Delete the known_hosts entry for your workstation and try again. I use 644 for authorized_keys.</p>
","3648","<linux><ssh><permission-denied><public-key>","0","0","4","2015-04-02 17:00:14","","0","","","","","2013-08-21 16:33:41",""
"18363006","Getting Permission denied (publickey) even having my public key on the authorized_keys server file","<p>I accidentally erased my private and public key in my local machine.</p>

<p>So I created a new pair using:</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>and copied the content of the id_rsa.pub into my authorized_keys on the server (I can log in as root and I can see the root public key in the authorized_keys file). </p>

<p>However, I keep getting Permission Denied. I already checked the ~/.ssh and the authorized keys permissions (which are set to 700 and 600 respectively).</p>

<p>Any ideas?</p>

<p>Thanks!</p>

<p>Here you have the log output when I try to connect from my local machine:</p>

<pre><code>Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[16635]: debug1: Forked child 27356.
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: Set /proc/self/oom_score_adj to 0
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: rexec start in 5 out 5 newsock 5 pipe 7 sock 8
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: inetd sockets after dupping: 3, 3
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: Connection from 50.67.165.140 port 60112
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: Client protocol version 2.0; client software version OpenSSH_5.9p1 Debian-5ubuntu1.1
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: match: OpenSSH_5.9p1 Debian-5ubuntu1.1 pat OpenSSH*
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: Enabling compatibility mode for protocol 2.0
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: Local version string SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: permanently_set_uid: 105/65534 [preauth]
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: list_hostkey_types: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256 [preauth]
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_KEXINIT sent [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_KEXINIT received [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: kex: client-&gt;server aes128-ctr hmac-md5 none [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: kex: server-&gt;client aes128-ctr hmac-md5 none [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_NEWKEYS sent [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: expecting SSH2_MSG_NEWKEYS [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_NEWKEYS received [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: KEX done [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: userauth-request for user capistrano service ssh-connection method none [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: attempt 0 failures 0 [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: initializing for ""capistrano""
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: setting PAM_RHOST to ""s0106c8fb26427cda.vc.shawcable.net""
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: setting PAM_TTY to ""ssh""
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: userauth-request for user capistrano service ssh-connection method publickey [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: attempt 1 failures 0 [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: test whether pkalg/pkblob are acceptable [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: Checking blacklist file /usr/share/ssh/blacklist.RSA-2048
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: Checking blacklist file /etc/ssh/blacklist.RSA-2048
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: temporarily_use_uid: 1001/1001 (e=0/0)
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: trying public key file /home/capistrano/.ssh/authorized_keys
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: fd 4 clearing O_NONBLOCK
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: restore_uid: 0/0
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: Failed publickey for capistrano from &lt;ip&gt; port 60112 ssh2
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: Connection closed by &lt;ip&gt; [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: do_cleanup [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: monitor_read_log: child log fd closed
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: do_cleanup
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: cleanup
</code></pre>
","<p>Ok so I figure it out... the issue was that I was adding the public key to the authorized_keys file on another user's directory. :S.. Thanks anyway</p>
","3648","<linux><ssh><permission-denied><public-key>","0","-1","4","2015-04-02 17:00:14","","0","","","","","2013-08-21 16:33:41",""
"18363006","Getting Permission denied (publickey) even having my public key on the authorized_keys server file","<p>I accidentally erased my private and public key in my local machine.</p>

<p>So I created a new pair using:</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>and copied the content of the id_rsa.pub into my authorized_keys on the server (I can log in as root and I can see the root public key in the authorized_keys file). </p>

<p>However, I keep getting Permission Denied. I already checked the ~/.ssh and the authorized keys permissions (which are set to 700 and 600 respectively).</p>

<p>Any ideas?</p>

<p>Thanks!</p>

<p>Here you have the log output when I try to connect from my local machine:</p>

<pre><code>Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[16635]: debug1: Forked child 27356.
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: Set /proc/self/oom_score_adj to 0
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: rexec start in 5 out 5 newsock 5 pipe 7 sock 8
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: inetd sockets after dupping: 3, 3
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: Connection from 50.67.165.140 port 60112
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: Client protocol version 2.0; client software version OpenSSH_5.9p1 Debian-5ubuntu1.1
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: match: OpenSSH_5.9p1 Debian-5ubuntu1.1 pat OpenSSH*
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: Enabling compatibility mode for protocol 2.0
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: Local version string SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: permanently_set_uid: 105/65534 [preauth]
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: list_hostkey_types: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256 [preauth]
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_KEXINIT sent [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_KEXINIT received [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: kex: client-&gt;server aes128-ctr hmac-md5 none [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: kex: server-&gt;client aes128-ctr hmac-md5 none [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_NEWKEYS sent [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: expecting SSH2_MSG_NEWKEYS [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_NEWKEYS received [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: KEX done [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: userauth-request for user capistrano service ssh-connection method none [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: attempt 0 failures 0 [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: initializing for ""capistrano""
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: setting PAM_RHOST to ""s0106c8fb26427cda.vc.shawcable.net""
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: setting PAM_TTY to ""ssh""
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: userauth-request for user capistrano service ssh-connection method publickey [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: attempt 1 failures 0 [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: test whether pkalg/pkblob are acceptable [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: Checking blacklist file /usr/share/ssh/blacklist.RSA-2048
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: Checking blacklist file /etc/ssh/blacklist.RSA-2048
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: temporarily_use_uid: 1001/1001 (e=0/0)
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: trying public key file /home/capistrano/.ssh/authorized_keys
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: fd 4 clearing O_NONBLOCK
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: restore_uid: 0/0
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: Failed publickey for capistrano from &lt;ip&gt; port 60112 ssh2
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: Connection closed by &lt;ip&gt; [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: do_cleanup [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: monitor_read_log: child log fd closed
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: do_cleanup
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: cleanup
</code></pre>
","<p>What users and paths are involved?  In the standard openssh setup, the $HOME/.ssh directory of the remote user (the one into which ssh is logging in) is the right location for the authorized_keys file.  However, it is also possible to have the files located elsewhere.</p>

<p>Also, check the file ownership.  The authorized_keys file must be owned by the user logging in.</p>

<p>A check of /var/log/messages or /var/log/secure (""ls -ltr /var/log"" after a failed attempt may help figure out the right log file) may give specifics.</p>

<p>If all else fails, you could strace the sshd process(es) to see exactly which files they are reading.  Not trivial to do, but it does get right to the guts of the operation of the server.</p>
","3648","<linux><ssh><permission-denied><public-key>","0","0","4","2015-04-02 17:00:14","","0","","","","","2013-08-21 16:33:41",""
"18363006","Getting Permission denied (publickey) even having my public key on the authorized_keys server file","<p>I accidentally erased my private and public key in my local machine.</p>

<p>So I created a new pair using:</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>and copied the content of the id_rsa.pub into my authorized_keys on the server (I can log in as root and I can see the root public key in the authorized_keys file). </p>

<p>However, I keep getting Permission Denied. I already checked the ~/.ssh and the authorized keys permissions (which are set to 700 and 600 respectively).</p>

<p>Any ideas?</p>

<p>Thanks!</p>

<p>Here you have the log output when I try to connect from my local machine:</p>

<pre><code>Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[16635]: debug1: Forked child 27356.
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: Set /proc/self/oom_score_adj to 0
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: rexec start in 5 out 5 newsock 5 pipe 7 sock 8
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: inetd sockets after dupping: 3, 3
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: Connection from 50.67.165.140 port 60112
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: Client protocol version 2.0; client software version OpenSSH_5.9p1 Debian-5ubuntu1.1
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: match: OpenSSH_5.9p1 Debian-5ubuntu1.1 pat OpenSSH*
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: Enabling compatibility mode for protocol 2.0
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: Local version string SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: permanently_set_uid: 105/65534 [preauth]
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: list_hostkey_types: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256 [preauth]
Aug 21 16:32:27 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_KEXINIT sent [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_KEXINIT received [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: kex: client-&gt;server aes128-ctr hmac-md5 none [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: kex: server-&gt;client aes128-ctr hmac-md5 none [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_NEWKEYS sent [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: expecting SSH2_MSG_NEWKEYS [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: SSH2_MSG_NEWKEYS received [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: KEX done [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: userauth-request for user capistrano service ssh-connection method none [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: attempt 0 failures 0 [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: initializing for ""capistrano""
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: setting PAM_RHOST to ""s0106c8fb26427cda.vc.shawcable.net""
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: setting PAM_TTY to ""ssh""
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: userauth-request for user capistrano service ssh-connection method publickey [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: attempt 1 failures 0 [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: test whether pkalg/pkblob are acceptable [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: Checking blacklist file /usr/share/ssh/blacklist.RSA-2048
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: Checking blacklist file /etc/ssh/blacklist.RSA-2048
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: temporarily_use_uid: 1001/1001 (e=0/0)
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: trying public key file /home/capistrano/.ssh/authorized_keys
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: fd 4 clearing O_NONBLOCK
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: restore_uid: 0/0
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: Failed publickey for capistrano from &lt;ip&gt; port 60112 ssh2
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: Connection closed by &lt;ip&gt; [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: do_cleanup [preauth]
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: monitor_read_log: child log fd closed
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: do_cleanup
Aug 21 16:32:28 ip-xx-xx-xx-xx sshd[27356]: debug1: PAM: cleanup
</code></pre>
","<p>What works for me is:</p>

<pre><code>chmod 750 /home/user
chmod 700 /home/user/.ssh
chmod 644 /home/user/.ssh/authorized_keys
</code></pre>

<p>If that doesn't work for you, try:</p>

<pre><code>chmod 755 /home/user
</code></pre>
","3648","<linux><ssh><permission-denied><public-key>","0","0","4","2015-04-02 17:00:14","","0","","","","","2013-08-21 16:33:41",""
"14949661","Git clone using public private keys","<p>I have been trying for ages to clone a git repository using public and private keys for authentication instead of password. I generated my keys using puttygen on windows. I cannot log in from windows or from linux. I keep getting the following error:</p>

<blockquote>
  <p>git clone [git repo directory]</p>
  
  <p>Cloning into papers...</p>
  
  <p>Enter passphrase for key '/.ssh/id_dsa':</p>
  
  <p>Permission denied (publickey).</p>
</blockquote>

<p>I first created my private key with a passphrase, but that didn't work, after I resaved the private key without a passphrase (using puttygen) but it still didn't work.</p>

<p>How do I fix this problem? I have been trying to work it out for so long but now am just totally stuck.</p>

<p>Thanks a lot!</p>
","<ol>
<li>You must to know two things: private key can be created is putty and openssh-compatible formats - and these formats are not freely exchangeable (client-side tool can understand putty <strong>or</strong> openssh only), Linux understand only openssh-type keys</li>
<li>You must use on client-side (additional) tool, which provide non-interactive authentication by key on request</li>
</ol>

<p><strong>A consequence of points 1 and 2</strong></p>

<p><strong>Windows-client</strong>: run pageant, load putty's private key into it (enter passphrase for key). <em>Maybe</em> you have to redefine in Git ssh-client from system to plink</p>

<p><strong>Linux-client</strong>: on Windows-host load putty-type private key into puttygen and export into openssh-key. Save this file in Linux-box as <code>/.ssh/id_dsa</code>. Run ssh-agent, enter password once. ssh-agent will use password for key for all requests during session</p>

<p><strong>PS</strong>: Debug your issues with the help of Github ssh-related docs and testing shell</p>
","3554","<git><github><private-key><public-key><git-clone>","2","2","1","2013-04-20 10:12:11","14951999","4","1","960558","","2013-02-19 07:09:39","2013-02-19 04:06:06",""
"22151312","Exit code checking of WinSCP script","<p>I need to securely transmit files to a server using WinSCP as a function in a batch script.</p>

<p>I need WinSCP to use a <code>.ppk</code> file, I already have on the machine to authenticate instead of a password.</p>

<p>Once connected I need to upload files via WinSCP to the server.</p>

<p>If there are any issues/errors while running WinSCP, I need its exit code to be sent back to the script. The idea is; if there is any issues with transmission to show the exit code. I will write an <code>if</code> statement that if the exit code is anything other than zero to quit the program.</p>

<p>Any assistance on how to implement WinSCP into a script with exit code checking would be appreciated.</p>
","<p>There is a .NET API for WinSCP. You can learn more about it at:<br>
<a href=""https://winscp.net/eng/docs/library"" rel=""nofollow noreferrer"">https://winscp.net/eng/docs/library</a></p>

<p>You just need to write a little code to get your job done. Here is an example:<br>
<a href=""https://winscp.net/eng/docs/library#example"" rel=""nofollow noreferrer"">https://winscp.net/eng/docs/library#example</a></p>

<p>To see more browse any of the example of your choice at:<br>
<a href=""https://winscp.net/eng/docs/library_examples"" rel=""nofollow noreferrer"">https://winscp.net/eng/docs/library_examples</a></p>
","3547","<batch-file><private-key><public-key><winscp><errorlevel>","2","0","2","2017-03-06 07:36:43","","0","1","850848","","2014-03-17 08:08:42","2014-03-03 15:57:38",""
"22151312","Exit code checking of WinSCP script","<p>I need to securely transmit files to a server using WinSCP as a function in a batch script.</p>

<p>I need WinSCP to use a <code>.ppk</code> file, I already have on the machine to authenticate instead of a password.</p>

<p>Once connected I need to upload files via WinSCP to the server.</p>

<p>If there are any issues/errors while running WinSCP, I need its exit code to be sent back to the script. The idea is; if there is any issues with transmission to show the exit code. I will write an <code>if</code> statement that if the exit code is anything other than zero to quit the program.</p>

<p>Any assistance on how to implement WinSCP into a script with exit code checking would be appreciated.</p>
","<p>See the official example for <a href=""https://winscp.net/eng/docs/guide_automation#results"" rel=""nofollow noreferrer"">checking WinSCP script results</a>.</p>

<pre><code>winscp.com /script=example.txt
if errorlevel 1 goto error

echo Success
goto end

:error
echo Error!

:end
</code></pre>
","3547","<batch-file><private-key><public-key><winscp><errorlevel>","2","0","2","2017-03-06 07:36:43","","0","1","850848","","2014-03-17 08:08:42","2014-03-03 15:57:38",""
"35821445","Verifying signature of a file using the certificates available in store","<p>I am totally new to security and signature verification and so far I couldn't find a place which explained the basics of signature verification. I need to verify the signature of a file by obtaining the public key from the appropriate certificate available from certificate store. the tutorial in Java (<a href=""https://docs.oracle.com/javase/tutorial/security/apisign/versig.html"" rel=""nofollow"">https://docs.oracle.com/javase/tutorial/security/apisign/versig.html</a>) doesn't teach how to obtain a certificate from the trusted certificate store and verify using that. I went through Bouncy castle WIKI <a href=""http://www.bouncycastle.org/wiki/display/JA1/BC+Version+2+APIs"" rel=""nofollow"">http://www.bouncycastle.org/wiki/display/JA1/BC+Version+2+APIs</a> but its not really explanatory for a beginner. How do I do this? Given a signed file, how can I check for its public key from the certificate store and verify if its the right person who has sent the file? Please advice.</p>
","<p>Because you did not provide what build management you use, I assume it will be Maven.</p>

<p>First, include BouncyCastle in your dependency</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
    &lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;
    &lt;version&gt;1.53&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>After that, you need to make a util class that you will be using for sign or verify the certificate. Something like this:</p>

<pre><code>package your.pack.location;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.bouncycastle.util.encoders.Base64;
import org.bouncycastle.util.io.pem.PemObject;
import org.bouncycastle.util.io.pem.PemReader;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

/**
 * Author: harunalfat
 */
public class SignatureUtils {

    private static final Logger log = LogManager.getLogger(SignatureUtils.class);


    public static String sign(String plainText, PrivateKey privateKey) throws Exception {

        byte[] data = plainText.getBytes(""ISO-8859-1"");

        Signature signature = Signature.getInstance(""SHA1WithRSA"", ""BC"");
        signature.initSign(privateKey);
        signature.update(data);

        return Base64.toBase64String(signature.sign());
    }

    public static boolean verify(String plainText, String signString, PublicKey publicKey) throws Exception{

        byte[] data = plainText.getBytes(""ISO-8859-1"");

        Signature signature = Signature.getInstance(""SHA1WithRSA"", ""BC"");
        signature.initVerify(publicKey);
        signature.update(data);

        byte[] signByte = Base64.decode(signString);
        return signature.verify(signByte);
    }

    private static PemObject getPemObjectFromResource(String fileLocation) throws IOException {

        Resource resource = new ClassPathResource(fileLocation);
        InputStream is = resource.getInputStream();

        PemObject pemObject = new PemReader(new InputStreamReader( is )).readPemObject();
        return pemObject;
    }

    private static X509EncodedKeySpec getPubKeySpec(String fileLocation) throws IOException, NoSuchAlgorithmException {

        PemObject pemObject = getPemObjectFromResource(fileLocation);
        byte[] data = pemObject.getContent();

        X509EncodedKeySpec keySpec = new X509EncodedKeySpec(data);
        return keySpec;
    }

    private static PKCS8EncodedKeySpec getPriKeySpec(String fileLocation) throws IOException, NoSuchAlgorithmException {

        PemObject pemObject = getPemObjectFromResource(fileLocation);
        byte[] data = pemObject.getContent();

        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(data);
        return keySpec;
    }

    public static PublicKey getPublicKey(String fileLocation) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {
        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        KeySpec keySpec = getPubKeySpec(fileLocation);
        return kf.generatePublic(keySpec);
    }

    public static PrivateKey getPrivateKey(String fileLocation) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {
        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        KeySpec keySpec = getPriKeySpec(fileLocation);
        return kf.generatePrivate(keySpec);
    }
}
</code></pre>

<p>And then you will use it like this</p>

<pre><code>package your.another.pack;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.tomcat.util.codec.binary.Base64;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.junit.Test;
import org.mockito.MockitoAnnotations;

import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;

import static org.junit.Assert.assertTrue;

/**
 * Author: harunalfat
 */
public class SignatureUtilsTest {


    private static final Logger log = LogManager.getLogger(SignatureUtilsTest.class);
    private static final String PLAIN = ""attack at dawn"";

    @Test
    public void testSignAndVerify() throws Exception {
        Security.addProvider(new BouncyCastleProvider()); // &lt;-- IMPORTANT!!! This will add BouncyCastle as provider in Java Security
        PrivateKey privateKey = SignatureUtils.getPrivateKey(""key/private2.pem""); // This is located on src/main/resources/key/private2.pem 
        PublicKey publicKey = SignatureUtils.getPublicKey(""key/public2.pem""); // This is located on src/main/resources/key/public2.pem 

    // In this example, I use junit test, so it will be on src/test/resources/...

        log.info(""Private Key  : ""+Base64.encodeBase64String(privateKey.getEncoded()));
        log.info(""Public Key   : ""+Base64.encodeBase64String(publicKey.getEncoded()));

        String sign = SignatureUtils.sign(PLAIN, privateKey);
        log.info(""Plain String : ""+PLAIN);
        log.info(""Sign         : ""+sign);

        boolean result = SignatureUtils.verify(PLAIN,sign, publicKey);
        log.info(""Result       : ""+result);

        assertTrue(result);
    }

}
</code></pre>

<p>Of course, you can change the Signature instance with another Algorithm. In my case I use <code>""SHA1WithRSA""</code>, but you get the point right? </p>

<p>With this, someone will encrypt their data using their private key, and send it to you. After that, you will verify the data using the public key they give.</p>

<p>In example, Bob send to you message about money amount he sent to you (<code>$5000</code>), and sign it using their private key, become encrypted. When the data arrived to you, you know Bob supposed to send $5000, then you verify the encrypted data with text <code>$5000</code> and public key Bob share, but is it really <code>$5000</code> OR <strong>does it comes from Bob?</strong></p>

<p>If the data has been changed, OR when someday you ask for some Money to Bob, but the message tapped by someone else and s/he send you the amount message with private key other than Bob's, you will know.</p>

<p>Feel free to ask :)</p>
","3488","<java><security><bouncycastle><verification><public-key>","0","1","1","2016-03-06 01:55:46","","0","","","","","2016-03-06 00:01:36",""
"13228281","Encrypting a string with PublicKey + Base64 encryption","<p>I have a RSA public key in String format and I want to encrypt a string using the same to Base 64. Here is the code that I am using for this:</p>

<pre><code>function encrypt(String pin){ 
  String key = ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAiOnM5t6w2ZD6dpA4/MzSTAOt0IYpnsmGSAIfIVgGntI+fI4wbvUvMIhaLN3fHrjyuNGFdYw+yuoXYkapajt6VTZJniaatSiq6bwQ7R0UAop6haFSAwjnmReqexJvcKyqUsTfcfFypPpsYRewh/48/jmc/6ND+ugxDd52prkPUrbj+nnO0z3DBoUCpgDMRvW2hWXv6kZ654gp+wIAQnxbdwRMy6FZbrHjkA3tc6U0CHK+KjxAfzWAK+yI+ofskM4qk50J7y9hUZ7lLikqWZWKiqh8xiDk1kgu+FIjVh+fylKpa3gWmPPn0fSpBJjuenc1OQVmZ718a3388DjzFlYOLwIDAQAB"";
  byte[] sigBytes2 = Base64.decode(key, Base64.DEFAULT);
  Log.d(""WS"", ""new key is: "" + key);
  try {
    PublicKey publicKey = KeyFactory.getInstance(""RSA"")
        .generatePublic(new X509EncodedKeySpec(sigBytes2));
    encryptedBase64PIN = encode(publicKey, pin);
    Log.d(""WSA"", ""encoded key is: "" + encryptedBase64PIN);
    // getSecToken();
  } catch (Exception e) {
    e.printStackTrace();
  }
}

public static String encode(Key publicKey, String data)
    throws NoSuchAlgorithmException, NoSuchPaddingException,
    InvalidKeyException, IllegalBlockSizeException, BadPaddingException {

  byte[] byteData = data.getBytes(); // convert string to byte array

  Cipher cipher = Cipher.getInstance(""RSA/ECB/NoPadding"");       
  cipher.init(Cipher.ENCRYPT_MODE, publicKey);      
  byte[] encryptedByteData = cipher.doFinal(byteData);

  String s = Base64.encodeToString(encryptedByteData, Base64.NO_WRAP);
  return s; // convert encrypted byte array to string and return it
}
</code></pre>

<p>When I send the same output to the server, it says ""cannot decrypt the PIN"". Why is this?</p>
","<blockquote>
  <p>When I send the same output to the server, it says ""cannot decrypt the PIN"". Why is this?</p>
</blockquote>

<p>There could be <em>many</em> reasons for this. If you have the code for the server decryption, please add it to your question.</p>

<p>Reasons may include:</p>

<ul>
<li><p>Wrong encryption mode. You've selected <code>RSA/ECB/NoPadding</code> but perhaps the server is expecting something else?</p></li>
<li><p>Base64 encoding - is the server definitely expecting this?</p></li>
<li><p>The message is ""cannot decrypt PIN"". If the <code>data</code> you are encrypting is the PIN are you sure you should be encrypting ASCII bytes?</p></li>
</ul>
","3475","<android><encryption><rsa><public-key>","0","1","1","2012-11-05 09:25:37","13229164","2","6","474189","","2012-11-05 09:20:15","2012-11-05 08:19:18",""
"16295837","Convert ssh-dss key to .pem?","<p>how can I convert an openssh dsa public key to .pem format?</p>

<p>is it possible?</p>

<p>I've used command </p>

<pre><code>  openssl dsa -in u015_test.pub -outform pem &gt; u015_test.pem
</code></pre>

<p>but this is the output: </p>

<pre><code>  read DSA key
  unable to load Private Key
  23392:error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:648:Expecting: ANY PRIVATE KEY
  unable to load Key
</code></pre>

<p>this is how my key appears:</p>

<pre><code> ssh-dss AAAAB3NzaC1kc3MAAACBAMMjZ03z7hOuGYDaPmyBvuNS+LJmhYn1bWzWP8p+1/amuRPdHj68KnRDuaf8MJB3qBZ6xsu97vUjjuRDeEyFLVjsghK9TiKBsxv2Uv+fS4o0OJzP............
</code></pre>
","<p>To convert ssh keys, you should use <code>ssh-keygen</code>:</p>

<pre><code>ssh-keygen -e -m PEM -f u015_test.pub
</code></pre>

<p>or if you want to use the key with openssl:</p>

<pre><code>ssh-keygen -e -m PKCS8 -f u015_test.pub
</code></pre>

<p>To try if it works, use:</p>

<pre><code>ssh-keygen -e -m PKCS8 -f u015_test.pub | openssl dsa -pubin
</code></pre>
","3434","<ssh><sftp><openssh><public-key>","0","2","1","2013-04-30 09:41:14","","0","","1157530","","2013-04-30 09:35:16","2013-04-30 08:53:48",""
"9059912","asymmetric key creation over network","<p>I'm attempting to <a href=""http://msdn.microsoft.com/en-us/library/ms189524.aspx"">add an assembly</a> to a database in SQL2008 using an <a href=""http://msdn.microsoft.com/en-us/library/ms174430.aspx"">asymmetric key</a>.</p>

<p>We're adding the assembly using a hex string (adding assemblies to servers through sql queries only)</p>

<pre><code>USE [master] 
GO

IF NOT EXISTS (SELECT * from sys.asymmetric_keys where name = 'ManagedAsymmetricKey')
 BEGIN
  CREATE ASYMMETRIC KEY ManagedAsymmetricKey FROM FILE = 'C:\Managed.dll'
  CREATE LOGIN CLRLogin FROM ASYMMETRIC KEY ManagedAsymmetricKey
  GRANT UNSAFE ASSEMBLY TO CLRLogin
 END
GO

USE [$dbName]
GO
CREATE ASSEMBLY [Managed]
AUTHORIZATION [dbo]
FROM 0x4D5A....
WITH PERMISSION_SET = UNSAFE
GO
</code></pre>

<p>This will work on a local instance however over the network we receive; 
<code>The certificate, asymmetric key, or private key file does not exist or has invalid format.</code></p>

<p>I may be assuming wrongly that I should be adding the key first, should I be adding the assembly then doing something along the lines of <code>CREATE ASYMMETRIC KEY ManagedAsymmetricKey FROM ASSEMBLY [workingDB].[dbo].[Managed]</code> ?</p>
","<p>The <code>FROM FILE =</code> is always from the perspective of SQL Server.  You would have copy the certificate to a local drive on the database server.</p>
","3414","<sql-server><sql-server-2008><assemblies><public-key>","6","2","2","2019-03-19 01:12:19","","0","","387076","","2019-03-19 01:12:19","2012-01-30 05:51:51",""
"9059912","asymmetric key creation over network","<p>I'm attempting to <a href=""http://msdn.microsoft.com/en-us/library/ms189524.aspx"">add an assembly</a> to a database in SQL2008 using an <a href=""http://msdn.microsoft.com/en-us/library/ms174430.aspx"">asymmetric key</a>.</p>

<p>We're adding the assembly using a hex string (adding assemblies to servers through sql queries only)</p>

<pre><code>USE [master] 
GO

IF NOT EXISTS (SELECT * from sys.asymmetric_keys where name = 'ManagedAsymmetricKey')
 BEGIN
  CREATE ASYMMETRIC KEY ManagedAsymmetricKey FROM FILE = 'C:\Managed.dll'
  CREATE LOGIN CLRLogin FROM ASYMMETRIC KEY ManagedAsymmetricKey
  GRANT UNSAFE ASSEMBLY TO CLRLogin
 END
GO

USE [$dbName]
GO
CREATE ASSEMBLY [Managed]
AUTHORIZATION [dbo]
FROM 0x4D5A....
WITH PERMISSION_SET = UNSAFE
GO
</code></pre>

<p>This will work on a local instance however over the network we receive; 
<code>The certificate, asymmetric key, or private key file does not exist or has invalid format.</code></p>

<p>I may be assuming wrongly that I should be adding the key first, should I be adding the assembly then doing something along the lines of <code>CREATE ASYMMETRIC KEY ManagedAsymmetricKey FROM ASSEMBLY [workingDB].[dbo].[Managed]</code> ?</p>
","<p>You can use the following steps to get it working:</p>

<ul>
<li>run your create assembly statement with SAFE permission_set (even if the assembly needs UNSAFE for execution)</li>
<li>create the asymmetric key from the assembly</li>
<li>drop your assembly</li>
<li>create a login from the asymmetric key</li>
<li><p>grant the login unsafe assembly rights</p>

<pre><code>CREATE ASSEMBLY [Managed]
AUTHORIZATION [dbo]
FROM 0x4D5A....
WITH PERMISSION_SET = SAFE

CREATE ASYMMETRIC KEY ManagedAsymmetricKey FROM ASSEMBLY [Managed]

DROP ASSEMBLY [Managed]

CREATE LOGIN CLRLogin FROM ASYMMETRIC KEY ManagedAsymmetricKey

GRANT UNSAFE ASSEMBLY TO CLRLogin
</code></pre></li>
</ul>
","3414","<sql-server><sql-server-2008><assemblies><public-key>","6","5","2","2019-03-19 01:12:19","","0","","387076","","2019-03-19 01:12:19","2012-01-30 05:51:51",""
"24569920","""Host key wasn't verified!"" when connecting using WinSCP .NET assembly","<p>I'm trying to establish a connection to SFTP server with following code, I'll receive this error message <em>""Host key wasn't verified!""</em>.</p>



<pre class=""lang-csharp prettyprint-override""><code>SessionOptions so = new SessionOptions { 
    Protocol = Protocol.Sftp, 
    HostName = ""xx.xx.xx.xx"", 
    UserName = ""usera"",
    Password = ""user123"",
    SshHostKeyFingerprint = ""2048 78:1d:67:f9:89:f5:ea:8e:28:84:68:04:f6:50:e7:ea""
};

using (Session s = new Session())
{
    s.Open(so);
}
</code></pre>

<p>But if I establish a connection using following code, I'm able to connect.</p>

<pre class=""lang-csharp prettyprint-override""><code>System.Diagnostics.Process winscp = new System.Diagnostics.Process();
winscp.StartInfo.FileName = ""winscp.com"";
winscp.StartInfo.UseShellExecute = false;
winscp.StartInfo.CreateNoWindow = true;
winscp.StartInfo.RedirectStandardOutput = true;
winscp.StartInfo.RedirectStandardInput = true;
winscp.Start();

winscp.StandardInput.WriteLine(""open sftp://usera:user123@xx.xx.xx.xx"");
winscp.StandardInput.Close();
</code></pre>

<p>I'm so curious to know what I have done wrong in the first method?</p>
","<p>Your host key fingerprint format is wrong. You are missing a key type (<code>ssh-rsa</code> or <code>ssh-dss</code>) at least.</p>

<p>See WinSCP FAQ <a href=""https://winscp.net/eng/docs/faq_hostkey"" rel=""nofollow noreferrer"">Where do I get SSH host key fingerprint to authorize the server?</a></p>

<hr>

<p><em>Your code that uses scripting succeeds because you have the fingerprint cached. The .NET assembly never uses fingerprint cache.</em></p>

<p><em>The latest versions of WinSCP <a href=""https://winscp.net/tracker/1186"" rel=""nofollow noreferrer"">issue a more meaningful message when the fingerprint is not matched</a>.</em></p>
","3406","<public-key><winscp><winscp-net>","1","4","1","2018-01-18 10:31:11","24599114","0","1","850848","","2014-07-09 07:06:45","2014-07-04 08:30:40",""
"3588120","Given a Java ssh-rsa PublicKey, how can I build an SSH2 public key?","<p>I'm doing publicKey.getEncoded(), then appending ""ssh-rsa"" to the front, then base64 encoding it. Then I add the SSH2 header/footer. But it won't decode...</p>
","<p>Java public keys are encoded as a standard X.509 SubjectPublicKeyInfo structure.</p>

<p>SSH2 uses its own simple format. Base-64 encode the result of the <code>encode</code> method shown below, and affix the necessary SSH2 header and footer.</p>

<pre><code>public static byte[] encode(RSAPublicKey key)
  throws IOException
{
  ByteArrayOutputStream buf = new ByteArrayOutputStream();
  byte[] name = ""ssh-rsa"".getBytes(""US-ASCII"");
  write(name, buf);
  write(key.getPublicExponent().toByteArray(), buf);
  write(key.getModulus().toByteArray(), buf);
  return buf.toByteArray();
}

private static void write(byte[] str, OutputStream os)
  throws IOException
{
  for (int shift = 24; shift &gt;= 0; shift -= 8)
    os.write((str.length &gt;&gt;&gt; shift) &amp; 0xFF);
  os.write(str);
}
</code></pre>

<p>See <a href=""https://stackoverflow.com/a/19435226/3474"">this answer</a> for converting the other direction, from OpenSSH to Java.</p>
","3306","<java><public-key><ssh-keys>","5","17","1","2013-10-17 19:30:57","3588388","0","5","4913","","2010-08-27 21:38:45","2010-08-27 21:07:58",""
"6726692","C# Verifying data (signed with RSA private key) with public key","<p>using BouncyCastle and with help from a stackoverflow question I got this:</p>

<pre><code>        using System.Net.Sockets;
        using System.Security.Cryptography;
        using Org.BouncyCastle.Crypto.Parameters;
        using Org.BouncyCastle.OpenSsl;
</code></pre>

<p>...</p>

<pre><code>        TcpClient client = new TcpClient(""127.0.0.1"", 1337);
        NetworkStream stream = client.GetStream();

        StreamWriter writer= new StreamWriter(stream);
        StreamReader reader = new StreamReader(stream);

        writer.WriteLine(""hello"");
        writer.AutoFlush = true;

        string response = Convert.FromBase64String(reader.ReadToEnd()).ToString();

        RSACryptoServiceProvider RCP;
        var x = new PemReader(File.OpenText(pubkey));
        var y = (RsaKeyParameters)x.ReadObject();

        RCP = (RSACryptoServiceProvider)RSACryptoServiceProvider.Create();

        var pa = new RSAParameters();
        pa.Modulus = y.Modulus.ToByteArray();
        pa.Exponent = y.Exponent.ToByteArray();

        RCP.ImportParameters(pa);
        byte[] test = RCP.Decrypt(response, true);
</code></pre>

<p>Now, obviously Decrypt will fail, as since I'm trying to decrypt something which was signed (not ""encrypted"") and definately not by the same ""key"". I'm confused since I thought I should use a method like <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.verifydata.aspx"" rel=""nofollow"">VerifyData()</a>, but this returns a bool and takes arguments I'm not sure I have.</p>

<p>What I wish to accomplish is the C# equivalent of <code>openssl rsautl -verify -inkey public.pem -pubin</code>. That is, ""decrypt"" with the pubkey to verify the contents of said message.</p>

<p>Am I on the right track here?</p>

<ul>
<li>Mik</li>
</ul>
","<p>Actually a decrypt of a signature should never fail unless you specified the wrong encoding parameters - a signature is simply the private-key encrypted hash of the data (typically SHA1); the only benefit of using the verify routine is that it decrypts the block and does the hash comparison work for you, if you wanted to be bloody minded you could instead do a decrypt operation with your public key and compare the hash bytes yourself.</p>

<p>I'm not actually sure what <code>response</code> is in the context of your program; you should <em>only</em> be passing the RSA data to it, if you're also feeding it the data that was signed in the first place you are <strong>doing it wrong</strong> - similarly, do check if that function actually accepts a string, in my experience BouncyCastle generally expects a <code>byte[]</code></p>

<p>I'd recommend using <code>SignerUtilities.GetSigner()</code> - it takes a string arg to tell it what sort of signature you're using, I would imagine <code>""SHA1WithRSA""</code> to be right for you.</p>
","3297","<c#><rsa><signature><public-key>","1","0","1","2011-07-17 21:15:01","6726809","1","","","","","2011-07-17 20:51:54",""
"6570125","Java - Authentication with public key and passphrase - j2ssh","<p>How do I connect to server with public key and passphrase (I have the public key and I know the passphrase.
I'm using com.sshtools.j2ssh library but I can't see an option to set passphrase.
The problem is, even though I have the public key, the server keep asking for passphrase.</p>

<p>Thanks.
Ron.</p>
","<p>Check the API of j2ssh for decrypt/encrypt methods. Usually those are used to send for authentication.</p>
","3213","<java><authentication><ssh><public-key><j2ssh>","1","0","3","2014-09-19 01:53:33","6572921","1","1","185655","","2012-01-15 05:30:08","2011-07-04 10:17:41",""
"6570125","Java - Authentication with public key and passphrase - j2ssh","<p>How do I connect to server with public key and passphrase (I have the public key and I know the passphrase.
I'm using com.sshtools.j2ssh library but I can't see an option to set passphrase.
The problem is, even though I have the public key, the server keep asking for passphrase.</p>

<p>Thanks.
Ron.</p>
","<p>When you instantiate the SshPrivateKeyFile you can then call toPrivateKey on that object to create a SshPrivateKey object.  That toPrivateKey method takes a string that is your passphrase.  If you do not have a passphrase, pass an empty string (or a null I believe works also).  Here is a sample.</p>

<pre><code>PublicKeyAuthenticationClient sshClient = new PublicKeyAuthenticationClient();

SshPrivateKeyFile sshPrivKeyFile = SshPrivateKeyFile.parse(new File(keyFile));
SshPrivateKey sshPrivKey = sshPrivKeyFile.toPrivateKey(""passphrase"");
sshClient.setKey(sshPrivKey);
</code></pre>
","3213","<java><authentication><ssh><public-key><j2ssh>","1","3","3","2014-09-19 01:53:33","6572921","1","1","185655","","2012-01-15 05:30:08","2011-07-04 10:17:41",""
"6570125","Java - Authentication with public key and passphrase - j2ssh","<p>How do I connect to server with public key and passphrase (I have the public key and I know the passphrase.
I'm using com.sshtools.j2ssh library but I can't see an option to set passphrase.
The problem is, even though I have the public key, the server keep asking for passphrase.</p>

<p>Thanks.
Ron.</p>
","<p>Are you sure, that server is properly configured? If it's set to key auth no password should be needed except keystore password. Try to connect using putty or something like that.
I also recommend you to try <a href=""http://www.ganymed.ethz.ch/ssh2/"" rel=""nofollow"">Ganymed SSH</a> I have used it in couple of projects and there was no problems with that even using quite advanced features such tunnels, scp, etc.</p>
","3213","<java><authentication><ssh><public-key><j2ssh>","1","0","3","2014-09-19 01:53:33","6572921","1","1","185655","","2012-01-15 05:30:08","2011-07-04 10:17:41",""
"10678622","How to extract public key in proper format using openssl in php?","<p>I have made many attempts using differnt ways, to extract public key in displayable format using openssl in php. 
E.g.</p>

<blockquote>
  <p>print_r(openssl_pkey_get_details(openssl_csr_get_public_key(\path to csr)));</p>
</blockquote>

<pre><code>var_dump(openssl_get_publickey(file_get_contents('\\path to cert'))); 
</code></pre>

<p>and many more. But all I can get is something like this:</p>

<p>-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQClNami19DpcxlYAaZNxHV27r2V gDQbkZhiayaDfcwjYStRaU8Hk1yg76gfhgayssIa6Y7Cek4uH5fV PE6Nj/s9QAkcvpzZDJasdYmj8BGyVwVbRelToMNvXTc eNaH93Dm+OA4TE9yoQIDAQAB </p>

<p>-----END PUBLIC KEY----- </p>

<p>How can I extract it in the format given below:</p>

<p>95 ae 9a 4e db f1 6d 15 55 9f 86 52 28 54 21 3f 
88 1b 21 81 2a 01 e3 35 dd 21 51 44 f4 18 bf 85 
fb f0 6a 9a 9c 15 7f 46 83 b8 1e 05 b7 b9 1a 
9d fd 58 0b fa 45 01 f2 3b 3b bc 1b f6 a3 20 7b 
96 3e f7 5d d6 c2 a7 56 29 02 94 ba 0c 29 da 51</p>

<p>Thank you.</p>
","<p>The public key listed by a browser is just a hexadecimal encoding of the modulus. Within the data structure returned by <code>openssl_pkey_get_details</code> this is represented by <code>n</code>. (If you're curious why, check out the <a href=""http://en.wikipedia.org/wiki/RSA_%28algorithm%29"" rel=""noreferrer"">RSA</a> algorithm.) To get it in PHP just do:</p>

<pre><code>$pkey_details = openssl_pkey_get_details(openssl_pkey_get_public(file_get_contents(""test.pem"")));
echo bin2hex($pkey_details[""rsa""][""n""]);
</code></pre>
","3128","<php><openssl><ssl-certificate><public-key>","2","5","1","2012-10-16 04:00:26","","2","1","168868","","2012-07-26 05:08:00","2012-05-21 01:29:00",""
"1057768","python+encryption: Encrypting session key using public key","<p>I want to encrypt the session key using the public key. How does the PGP software do this?
Can somebody specify the procedure or function of encryption in Python?</p>
","<p>See <a href=""http://ubuntuforums.org/showthread.php?t=687173"" rel=""nofollow noreferrer"">this post</a> for background information about the basic technology. That post is about encryption in general - for information about using gpg from Python, see <a href=""https://stackoverflow.com/questions/1020320/how-to-do-pgp-in-python-generate-keys-encrypt-decrypt/1053752#1053752"">this</a>, for example.</p>
","3109","<python><encryption><public-key>","3","1","3","2009-07-26 13:56:02","","1","2","41619","","2009-06-29 11:35:04","2009-06-29 11:11:15",""
"1057768","python+encryption: Encrypting session key using public key","<p>I want to encrypt the session key using the public key. How does the PGP software do this?
Can somebody specify the procedure or function of encryption in Python?</p>
","<p>There's also the PyCrypto module that looks exactly like what you are looking for: <a href=""http://www.dlitz.net/software/pycrypto/"" rel=""nofollow noreferrer"">http://www.dlitz.net/software/pycrypto/</a> the API docs are here: <a href=""http://www.dlitz.net/software/pycrypto/apidoc/"" rel=""nofollow noreferrer"">http://www.dlitz.net/software/pycrypto/apidoc/</a> and some nice docs with basic examples of encrypting/decrypting here: <a href=""http://www.dlitz.net/software/pycrypto/doc/"" rel=""nofollow noreferrer"">http://www.dlitz.net/software/pycrypto/doc/</a>.</p>

<p>I'll confess I haven't used this module, but it seems like you would establish a session with a public key, then use that to encrypt/decrypt the channel with a Crypto.PublicKey object. Then do the usual activity of generating a session key, communicating that over whatever channel you have. Finally, switch the channel to a Crypto.Cipher object using the session key.</p>

<p>Also, be sure to be very, very careful about how you obtain the value for your session key if security is a real concern, particularly on multiuser or only partially trusted machine.</p>
","3109","<python><encryption><public-key>","3","2","3","2009-07-26 13:56:02","","1","2","41619","","2009-06-29 11:35:04","2009-06-29 11:11:15",""
"1057768","python+encryption: Encrypting session key using public key","<p>I want to encrypt the session key using the public key. How does the PGP software do this?
Can somebody specify the procedure or function of encryption in Python?</p>
","<p>See <a href=""https://stackoverflow.com/questions/90413/what-is-the-best-easiest-to-use-encryption-library-in-python"">What is the best/easiest to use encryption library in python</a>, which mentions a <a href=""https://stackoverflow.com/questions/90413/what-is-the-best-easiest-to-use-encryption-library-in-python/90959#90959"">PGP-compatible 
solution</a>, <a href=""http://www.gnupg.org/related_software/gpgme/index.en.html"" rel=""nofollow noreferrer"">gpgme</a>.</p>

<p>For reasons I ignore, nobody in <a href=""https://stackoverflow.com/questions/1020320/how-to-do-pgp-in-python-generate-keys-encrypt-decrypt/1053752"">How to do PGP in Python (generate keys, encrypt/decrypt)</a> mentioned gpgme...</p>
","3109","<python><encryption><public-key>","3","0","3","2009-07-26 13:56:02","","1","2","41619","","2009-06-29 11:35:04","2009-06-29 11:11:15",""
"2183480","Convert public/private key strings to RSA xmlstring","<p>My partner gave me an RSA public key that looks like this:</p>

<pre>
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCSK+roLfbUYf6PGNIf6Ej8R5EqSTjlRABTu7T0FxR/B6iurI80jktW9+zKu4jFnFJ8oYx24raD3x5KhJZR2VCBEEbtYpPq/5E25v+LIkFbx8sNkMvEACZdAWyeQcEookGfKDER4PGrB35bntcO2SnItTZc8BOI3jAOBXTeBO16NwIDAQAB
</pre>

<p>I know that there are Modulus and Exponent in a public key, I've seen an xml RSA key file; but i don't know how to extract those parts from this plain string.</p>

<p>Would anyone know how to accomplish what I am trying to do?</p>
","<p>That is a base-64 encoded SubjectPublicKeyInfo (see <a href=""http://www.rfc-editor.org/rfc/rfc5280.txt"" rel=""nofollow noreferrer"">RFC 5280</a>), for an RSA public key. It contains, as you noted, an RSA modulus and public exponent.</p>
","3079","<rsa><public-key>","1","1","2","2010-12-27 07:04:56","","0","2","9702","","2010-02-02 15:43:36","2010-02-02 11:08:47",""
"2183480","Convert public/private key strings to RSA xmlstring","<p>My partner gave me an RSA public key that looks like this:</p>

<pre>
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCSK+roLfbUYf6PGNIf6Ej8R5EqSTjlRABTu7T0FxR/B6iurI80jktW9+zKu4jFnFJ8oYx24raD3x5KhJZR2VCBEEbtYpPq/5E25v+LIkFbx8sNkMvEACZdAWyeQcEookGfKDER4PGrB35bntcO2SnItTZc8BOI3jAOBXTeBO16NwIDAQAB
</pre>

<p>I know that there are Modulus and Exponent in a public key, I've seen an xml RSA key file; but i don't know how to extract those parts from this plain string.</p>

<p>Would anyone know how to accomplish what I am trying to do?</p>
","<p>To complete the answer of GregS, assuming that you use Java as a programming language:</p>

<ol>
<li>You should transform the Base64 encoding into binary. There are some Base64 decoders out there, e.g. <a href=""http://iharder.sourceforge.net/current/java/base64/"" rel=""nofollow noreferrer"">this one</a>, which appears to be ""public domain"", thus reusable at will. You could also implement it yourself; it is not hard. <a href=""http://en.wikipedia.org/wiki/Base64"" rel=""nofollow noreferrer"">Wikipedia</a> has the useful links for that.</li>
<li>Decode the binary blob using the <code>SubjectPublicKeyInfo</code> ASN.1 structure. This is not very easy (unless you master ASN.1) but existing code can be used for that. In particular, Java knows how to do that directly.</li>
</ol>

<p>Public key decoding in Java looks like this (assuming the binary blob is in variable <code>blob</code>):</p>

<pre><code>KeyFactory kf = KeyFactory.getInstance(""RSA"");
KeySpec ks = new X509EncodedKeySpec(blob);
RSAPublicKey pk = (RSAPublicKey)kf.generatePublic(ks);
</code></pre>

<p>and from the <code>RSAPublicKey</code> instance, you have the <code>getModulus()</code> and <code>getPublicExponent()</code> methods which are self-explanatory. The relevant classes are in packages <code>java.security</code>, <code>java.security.interfaces</code> and <code>java.security.spec</code>. For your public key, this yields the following:</p>

<pre><code>modulus         = 102645155313298195029358862270152655993457886674545775623230610032728692959011417523892551564448476401788726191516935717690886291325065114613951136136194912439244754958152467056511740824446734443711392654194943771385565670988939260236433577393483222184597978937921816958725758100559250155638540637401770719799
public exponent = 65537
</code></pre>
","3079","<rsa><public-key>","1","1","2","2010-12-27 07:04:56","","0","2","9702","","2010-02-02 15:43:36","2010-02-02 11:08:47",""
"30258946","Remove deployment key from Bitbucket","<p>I am having problems to add my ssh public key to my bitbucket account. It seems that i accidentally added my personal key as a deployment key for my bitbucket team. Now when I am trying to add it as my accounts key, it states that this key is already in usage. How can I delete my teams deployment key that I added accidentally? Do I have to delete the team? It seems I just cant find the option. I already have several public keys connected to my git account that are working.  </p>

<p>I am using this tutorial, theoretically it seems pretty easy to me:</p>

<p><a href=""https://www.youtube.com/watch?v=DPhLLDvDW-8"" rel=""nofollow"">https://www.youtube.com/watch?v=DPhLLDvDW-8</a></p>

<p>I also tried this one from Bitbucket.com:</p>

<p><a href=""https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git"" rel=""nofollow"">https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git</a></p>
","<p>No, deleting the team is unnecessary.</p>

<p>This page seems to have settings for your team SSH keys (fill in your team name)
<a href=""https://bitbucket.org/account/user/your_team_name/ssh-keys/"" rel=""nofollow"">https://bitbucket.org/account/user/your_team_name/ssh-keys/</a></p>

<p>You should be able to delete the key on that page.</p>
","3073","<git><bitbucket><ssh-keys><public-key>","3","1","1","2015-05-17 18:03:58","30290263","0","","","","","2015-05-15 11:56:33",""
"47316981","gcloud: permission denied (public key) when ssh-ing to server","<p>I am trying to set up a new ssh key for a gcloud instance. I followed the instructions here verbatim (<a href=""https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys"" rel=""nofollow noreferrer"">https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys</a>), generating a new key, putting the public rsa-ssh key with my username on the SSH Keys section of the Metadata tab in the Google Cloud Platform interface, and setting the appropriate permissions for my public and private keys with chmod. </p>

<p>I am getting an error which ends as follows, when attempting to ss using the -vvv verbose flag:</p>

<p>...</p>

<p><code>debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/erickofman/.ssh/salsadb
debug3: send_pubkey_test
debug3: send packet: type 50
debug2: we sent a publickey packet, wait for reply
debug3: receive packet: type 51
debug1: Authentications that can continue: publickey
debug2: we did not send a packet, disable method
debug1: No more authentication methods to try.
Permission denied (publickey).</code></p>

<p>I have (with a co-worker) ensured that my public key is contained within the authorized_keys file in the server's .ssh folder. Thinking that perhaps something was just stale, I also tried restarting the ssh server using <code>service sshd restart</code> to no avail.</p>

<p>I also tried setting up ssh using the gcloud tool, same result. </p>

<p>I have the correct role/permissions for the site from what I can tell. </p>

<p>This is what the log looks like on the server side:</p>

<p><code>admin@awesome-website:~$ tail  /var/log/auth.log
Nov 15 20:40:16 awesome-website sshd[18846]: input_userauth_request: invalid user ekofman [preauth]
Nov 15 20:40:17 awesome-website sshd[18846]: Connection closed by 10.100.100.10 port 90001 [preauth]
Nov 15 20:41:17 awesome-website sshd[18848]: Connection closed by 200.200.20.20 port 90002 [preauth]</code></p>

<p>Been banging my head on this for a bit, any help much appreciated!</p>
","<p>Per <a href=""https://unix.stackexchange.com/questions/230909/cant-connect-to-another-user-than-root-through-ssh"">this</a> make sure you're .ssh/authorized_keys in <strong>your user's</strong> directory.</p>

<p>You also want to ensure your .ssh directory and authorized_keys have the proper permissions set. (700 and 600 respectively).</p>

<pre><code>sudo chmod 700 ~/.ssh
sudo chmod 600 ~/.ssh/authorized_keys
</code></pre>
","3046","<authentication><ssh><instance><gcloud><public-key>","2","0","2","2017-11-16 17:33:48","47335883","6","","3534782","","2017-11-16 15:27:07","2017-11-15 20:49:21",""
"47316981","gcloud: permission denied (public key) when ssh-ing to server","<p>I am trying to set up a new ssh key for a gcloud instance. I followed the instructions here verbatim (<a href=""https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys"" rel=""nofollow noreferrer"">https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys</a>), generating a new key, putting the public rsa-ssh key with my username on the SSH Keys section of the Metadata tab in the Google Cloud Platform interface, and setting the appropriate permissions for my public and private keys with chmod. </p>

<p>I am getting an error which ends as follows, when attempting to ss using the -vvv verbose flag:</p>

<p>...</p>

<p><code>debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/erickofman/.ssh/salsadb
debug3: send_pubkey_test
debug3: send packet: type 50
debug2: we sent a publickey packet, wait for reply
debug3: receive packet: type 51
debug1: Authentications that can continue: publickey
debug2: we did not send a packet, disable method
debug1: No more authentication methods to try.
Permission denied (publickey).</code></p>

<p>I have (with a co-worker) ensured that my public key is contained within the authorized_keys file in the server's .ssh folder. Thinking that perhaps something was just stale, I also tried restarting the ssh server using <code>service sshd restart</code> to no avail.</p>

<p>I also tried setting up ssh using the gcloud tool, same result. </p>

<p>I have the correct role/permissions for the site from what I can tell. </p>

<p>This is what the log looks like on the server side:</p>

<p><code>admin@awesome-website:~$ tail  /var/log/auth.log
Nov 15 20:40:16 awesome-website sshd[18846]: input_userauth_request: invalid user ekofman [preauth]
Nov 15 20:40:17 awesome-website sshd[18846]: Connection closed by 10.100.100.10 port 90001 [preauth]
Nov 15 20:41:17 awesome-website sshd[18848]: Connection closed by 200.200.20.20 port 90002 [preauth]</code></p>

<p>Been banging my head on this for a bit, any help much appreciated!</p>
","<p>Whelp, turns out that new ssh keys do not get incorporated unless a full instance restart is effected. <em>Not ssh server restart</em>, but a full instance restart (stop gcloud instance, then start gcloud instance). It doesn't say this in the documentation, good to know for future reference.</p>
","3046","<authentication><ssh><instance><gcloud><public-key>","2","5","2","2017-11-16 17:33:48","47335883","6","","3534782","","2017-11-16 15:27:07","2017-11-15 20:49:21",""
"10993505","SecKeyGetBlockSize or SecKeyRawVerify for Public Key throw EXC_BAD_ACCESS code=2","<p>Upon trying to implement Security.Framework SecKeyRawVerify iOS function from Apple's example, programm halts with bad pointer error (EXC_BAD_ACCESS code=2). Any help or suggestions would be appreciated.</p>

<p>Here is my code:</p>

<pre><code>- (BOOL)verifySignature:(NSData *)plainText signature:(NSData *)sig {
    size_t signedHashBytesSize = 0;

    OSStatus sanityCheck = noErr;
    SecKeyRef publicKeyA = NULL;

    NSMutableDictionary * queryPublicKeyA = [[NSMutableDictionary alloc] init];
    NSData * publicTag = [NSData dataWithBytes:publicKeyAIdentifier length:strlen((const char *)publicKeyAIdentifier)]; // 

    // Set the public key query dictionary.
    [queryPublicKeyA setObject:(id)kSecClassKey forKey:(id)kSecClass];
    [queryPublicKeyA setObject:publicTag forKey:(id)kSecAttrApplicationTag];
    [queryPublicKeyA setObject:(id)kSecAttrKeyTypeRSA forKey:(id)kSecAttrKeyType];
    [queryPublicKeyA setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecReturnData];

    // Get the key bits.
    sanityCheck = SecItemCopyMatching((CFDictionaryRef)queryPublicKeyA, (CFTypeRef *)&amp;publicKeyA);

    if (sanityCheck == noErr) {       
        // Get the size of the assymetric block.
        signedHashBytesSize = SecKeyGetBlockSize(publicKeyA); // Halts here
        sanityCheck = SecKeyRawVerify(publicKeyA, 
                                  kSecPaddingPKCS1SHA1, 
                                  (const uint8_t *)[[self getHashBytes:plainText] bytes],
                                  CC_SHA1_DIGEST_LENGTH,
                                  (const uint8_t *)[sig bytes],
                                  signedHashBytesSize
                                  ); // And here
    }
    if(publicKeyA) CFRelease(publicKeyA);
    if(queryPublicKeyA) [queryPublicKeyA release]; 

    return (sanityCheck == noErr) ? YES : NO;
}
</code></pre>

<p>Link to Apple CryptoExcersize:
<a href=""http://developer.apple.com/library/ios/#samplecode/CryptoExercise/Introduction/Intro.html#//apple_ref/doc/uid/DTS40008019-Intro-DontLinkElementID_2"" rel=""noreferrer"">http://developer.apple.com/library/ios/#samplecode/CryptoExercise/Introduction/Intro.html#//apple_ref/doc/uid/DTS40008019-Intro-DontLinkElementID_2</a></p>
","","3028","<ios><exc-bad-access><public-key><commoncrypto>","5","","0","2012-06-12 09:06:20","","2","1","","","","2012-06-12 09:06:20",""
"23396870","Can I get ssh public key from url in bitbucket?","<p>github provide public ssh key by URL like <code>http://github.com/user.keys</code>.</p>

<p>Is there a way also in bitbucket to obtain public keys via URL?</p>
","<p>Using Bitbucket's REST API version 1, you can get the SSH keys of a user with this endpoint:</p>

<pre><code>https://bitbucket.org/api/1.0/users/#{user}/ssh-keys
</code></pre>

<p>Here is a full reference from the API documents:</p>

<p><a href=""https://confluence.atlassian.com/display/BITBUCKET/ssh-keys+Resource"" rel=""noreferrer"">https://confluence.atlassian.com/display/BITBUCKET/ssh-keys+Resource</a></p>

<p>I'm not sure if they plan to include this in  version 2 of their API, but it should work with other API calls. </p>

<p>You need an account to authenticate your requests. Here is how to use the REST APIs:
<a href=""https://confluence.atlassian.com/display/BITBUCKET/Use+the+Bitbucket+REST+APIs"" rel=""noreferrer"">https://confluence.atlassian.com/display/BITBUCKET/Use+the+Bitbucket+REST+APIs</a></p>
","3026","<github><bitbucket><public-key>","9","4","1","2014-05-01 12:45:23","23407946","7","","","","","2014-04-30 19:51:28",""
"416771","Create a passwordless secondary ssh key for setting up a ssh tunnel","<p>I need to create a script that automatically setup a ssh tunnel. I think that a dedicated ssh key without password is a good start but I couldn't find if this is possible and how to do it. 
This key should have limited privileges (only set the tunnel up) but I need another private key (with a password) for myself.</p>

<p>Thanks !</p>
","<p>Try the</p>

<p><code>ssh-keygen</code></p>

<p>command.</p>
","3009","<ssh><public-key><tunnel>","5","1","3","2013-04-10 12:49:41","416896","0","1","49886","matt b","2011-02-21 15:50:16","2009-01-06 14:40:54",""
"416771","Create a passwordless secondary ssh key for setting up a ssh tunnel","<p>I need to create a script that automatically setup a ssh tunnel. I think that a dedicated ssh key without password is a good start but I couldn't find if this is possible and how to do it. 
This key should have limited privileges (only set the tunnel up) but I need another private key (with a password) for myself.</p>

<p>Thanks !</p>
","<p>Ok, I've found the answer. </p>

<p>First, <code>ssh-keygen -f theNewPrivateKey</code>  otherwise it will overwrite the old private key.
Second, <code>ssh -i theNewPrivateKey me@mycomputer</code> the <code>-i</code> option changes the private key used for the authentication. </p>

<p>Now I can try my script.</p>

<hr>

<p>Edit: how does my new key has limited privileges:</p>

<p>When copying the public key to $HOME/.ssh/authorized_keys2 file of the target computer, I added this: </p>

<pre><code>command=""sleep 99999999999"" ssh-dss AAAAB3NzaC1kc3MA...
(+ the rest of the key)
</code></pre>

<p>Then the only command allowed is to wait forever. 
Since the purpose of creating this key was to create a reverse ssh tunnel this should be fine. 
I then create the tunnel:</p>

<pre><code>ssh -T -R 7878:localhost:22 -i .ssh/mynewkey  me@myhomecomputer
</code></pre>

<p>Finally I can log from my home computer:</p>

<pre><code>ssh myworklogin@localhost -p7878
</code></pre>

<p>I hope that this does not have security issues. If this is a bad thing, please let me know !</p>
","3009","<ssh><public-key><tunnel>","5","8","3","2013-04-10 12:49:41","416896","0","1","49886","matt b","2011-02-21 15:50:16","2009-01-06 14:40:54",""
"416771","Create a passwordless secondary ssh key for setting up a ssh tunnel","<p>I need to create a script that automatically setup a ssh tunnel. I think that a dedicated ssh key without password is a good start but I couldn't find if this is possible and how to do it. 
This key should have limited privileges (only set the tunnel up) but I need another private key (with a password) for myself.</p>

<p>Thanks !</p>
","<p>I had a similar situation where i had to synch a server content automatically without having to proivide the password in my robocopy script. </p>

<p>This <a href=""http://kerneltrap.org/node/8178"" rel=""nofollow"">Link</a> helped me.</p>
","3009","<ssh><public-key><tunnel>","5","0","3","2013-04-10 12:49:41","416896","0","1","49886","matt b","2011-02-21 15:50:16","2009-01-06 14:40:54",""
"43629265","Deriving an ECDSA uncompressed public key from a compressed one","<p>I am currently trying to derive a Bitcoin uncompressed ECDSA public key from a compressed one.</p>

<p>According to this <a href=""http://en.bitcoin.it/wiki/Elliptic_Curve_Digital_Signature_Algorithm"" rel=""noreferrer"">link on the Bitcoin wiki</a>, it is possible to do so... But how?</p>

<p>To give you more details: as of now I have compressed keys (33-bytes-long) gathered on the bitcoin network.</p>

<p>They are of the following format: &lt;1-byte-long prefix>&lt;32-bytes-long X>.
From there, I would like to obtain an uncompressed key (65-bytes-long) whose format is:
&lt;1-byte-long prefix>&lt;32-bytes-long X>&lt;32-bytes-long Y></p>

<p>According to this <a href=""http://en.bitcoin.it/wiki/Secp256k1"" rel=""noreferrer"">other link on the Bitcoin wiki</a>, it should be as easy as solving the equation:</p>

<p>Y^2 = X^3 + 7 </p>

<p>However, I cannot seem to get there. My value for Y is simply far-off. Here is my code (the value for the public key come from the <a href=""http://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses"" rel=""noreferrer"">Bitcoin wiki example</a>):</p>

<pre><code>import binascii
from decimal import *

expected_uncompressed_key_hex = '0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'
expected_y_hex = expected_uncompressed_key_hex[-64:]
expected_y_dec = int(expected_y_hex, 16)
x_hex = expected_uncompressed_key_hex[2:66]
if expected_y_dec % 2 == 0:
    prefix = ""02""
else:
    prefix = ""03""

artificial_compressed_key = prefix + x_hex

getcontext().prec = 500
test_dec = Decimal(int(x_hex, 16))
y_square_dec = test_dec**3 + 7
if prefix == ""02"":
    y_dec = - Decimal(y_square_dec).sqrt()
else:
    y_dec = Decimal(y_square_dec).sqrt()

computed_y_hex = hex(int(y_dec))
computed_uncompressed_key = ""04"" + x + computed_y_hex
</code></pre>

<p>For information, my outputs are:</p>

<pre><code>computed_y_hex = '0X2D29684BD207BF6D809F7D0EB78E4FD61C3C6700E88AB100D1075EFA8F8FD893080F35E6C7AC2E2214F8F4D088342951'
expected_y_hex = '2CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'
</code></pre>

<p>Thank you for your help!</p>
","<p>The field of the elliptic curve is not over the field of real numbers. It's over a finite field modulo some prime. </p>

<p>For Secp256k1 the prime p = 2^256 - 2^32 - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1.</p>

<p>Thus: y^2= (x^3) + 7 (mod p)</p>

<p>There's no direct way to solve the equation, you would need to use Cipolla's algorithm: <a href=""https://en.wikipedia.org/wiki/Cipolla%27s_algorithm"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Cipolla%27s_algorithm</a></p>
","2973","<python><bitcoin><public-key><ecdsa>","9","3","4","2019-03-31 16:39:03","43654055","1","1","","","","2017-04-26 08:49:48",""
"43629265","Deriving an ECDSA uncompressed public key from a compressed one","<p>I am currently trying to derive a Bitcoin uncompressed ECDSA public key from a compressed one.</p>

<p>According to this <a href=""http://en.bitcoin.it/wiki/Elliptic_Curve_Digital_Signature_Algorithm"" rel=""noreferrer"">link on the Bitcoin wiki</a>, it is possible to do so... But how?</p>

<p>To give you more details: as of now I have compressed keys (33-bytes-long) gathered on the bitcoin network.</p>

<p>They are of the following format: &lt;1-byte-long prefix>&lt;32-bytes-long X>.
From there, I would like to obtain an uncompressed key (65-bytes-long) whose format is:
&lt;1-byte-long prefix>&lt;32-bytes-long X>&lt;32-bytes-long Y></p>

<p>According to this <a href=""http://en.bitcoin.it/wiki/Secp256k1"" rel=""noreferrer"">other link on the Bitcoin wiki</a>, it should be as easy as solving the equation:</p>

<p>Y^2 = X^3 + 7 </p>

<p>However, I cannot seem to get there. My value for Y is simply far-off. Here is my code (the value for the public key come from the <a href=""http://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses"" rel=""noreferrer"">Bitcoin wiki example</a>):</p>

<pre><code>import binascii
from decimal import *

expected_uncompressed_key_hex = '0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'
expected_y_hex = expected_uncompressed_key_hex[-64:]
expected_y_dec = int(expected_y_hex, 16)
x_hex = expected_uncompressed_key_hex[2:66]
if expected_y_dec % 2 == 0:
    prefix = ""02""
else:
    prefix = ""03""

artificial_compressed_key = prefix + x_hex

getcontext().prec = 500
test_dec = Decimal(int(x_hex, 16))
y_square_dec = test_dec**3 + 7
if prefix == ""02"":
    y_dec = - Decimal(y_square_dec).sqrt()
else:
    y_dec = Decimal(y_square_dec).sqrt()

computed_y_hex = hex(int(y_dec))
computed_uncompressed_key = ""04"" + x + computed_y_hex
</code></pre>

<p>For information, my outputs are:</p>

<pre><code>computed_y_hex = '0X2D29684BD207BF6D809F7D0EB78E4FD61C3C6700E88AB100D1075EFA8F8FD893080F35E6C7AC2E2214F8F4D088342951'
expected_y_hex = '2CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'
</code></pre>

<p>Thank you for your help!</p>
","<p>You need to calculate in the field <img src=""https://chart.googleapis.com/chart?cht=tx&amp;chl=%5Cmathbb%7BZ%7D_p"" alt=""Z_p"">, which mostly means that you have to reduce your number to the remainder after dividing with p after each calculation. Calculating this is called taking the modulo and is written as <code>% p</code> in python.</p>

<p>Exponentiating in this field can be done more effectively than the naive way of just multiplying and reducing many times. This is called modular exponentiation.  Python's built-in exponentation function pow(n,e,p) can take care of this.</p>

<p>The remaining problem is to find the square root. Luckily secp256k1 is chosen in a special way (<img src=""https://chart.googleapis.com/chart?cht=tx&amp;chl=p%5Cequiv3%5Cpmod+4"" alt=""p%4=3"">), so that taking square roots is easy: A square root of x is <img src=""https://chart.googleapis.com/chart?cht=tx&amp;chl=x%5E%7B%5Cfrac%7Bp%2B1%7D%7B4%7D%7D+%5Cpmod+p"" alt=""x^((p+1)/4)%p"">.</p>

<p>So a simplified version of your code becomes:</p>

<pre><code>import binascii

p_hex = 'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F'
p = int(p_hex, 16)
compressed_key_hex = '0250863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B2352'
x_hex = compressed_key_hex[2:66]
x = int(x_hex, 16)
prefix = compressed_key_hex[0:2]

y_square = (pow(x, 3, p)  + 7) % p
y_square_square_root = pow(y_square, (p+1)/4, p)
if (prefix == ""02"" and y_square_square_root &amp; 1) or (prefix == ""03"" and not y_square_square_root &amp; 1):
    y = (-y_square_square_root) % p
else:
    y = y_square_square_root

computed_y_hex = format(y, '064x')
computed_uncompressed_key = ""04"" + x_hex + computed_y_hex

print computed_uncompressed_key
</code></pre>
","2973","<python><bitcoin><public-key><ecdsa>","9","6","4","2019-03-31 16:39:03","43654055","1","1","","","","2017-04-26 08:49:48",""
"43629265","Deriving an ECDSA uncompressed public key from a compressed one","<p>I am currently trying to derive a Bitcoin uncompressed ECDSA public key from a compressed one.</p>

<p>According to this <a href=""http://en.bitcoin.it/wiki/Elliptic_Curve_Digital_Signature_Algorithm"" rel=""noreferrer"">link on the Bitcoin wiki</a>, it is possible to do so... But how?</p>

<p>To give you more details: as of now I have compressed keys (33-bytes-long) gathered on the bitcoin network.</p>

<p>They are of the following format: &lt;1-byte-long prefix>&lt;32-bytes-long X>.
From there, I would like to obtain an uncompressed key (65-bytes-long) whose format is:
&lt;1-byte-long prefix>&lt;32-bytes-long X>&lt;32-bytes-long Y></p>

<p>According to this <a href=""http://en.bitcoin.it/wiki/Secp256k1"" rel=""noreferrer"">other link on the Bitcoin wiki</a>, it should be as easy as solving the equation:</p>

<p>Y^2 = X^3 + 7 </p>

<p>However, I cannot seem to get there. My value for Y is simply far-off. Here is my code (the value for the public key come from the <a href=""http://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses"" rel=""noreferrer"">Bitcoin wiki example</a>):</p>

<pre><code>import binascii
from decimal import *

expected_uncompressed_key_hex = '0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'
expected_y_hex = expected_uncompressed_key_hex[-64:]
expected_y_dec = int(expected_y_hex, 16)
x_hex = expected_uncompressed_key_hex[2:66]
if expected_y_dec % 2 == 0:
    prefix = ""02""
else:
    prefix = ""03""

artificial_compressed_key = prefix + x_hex

getcontext().prec = 500
test_dec = Decimal(int(x_hex, 16))
y_square_dec = test_dec**3 + 7
if prefix == ""02"":
    y_dec = - Decimal(y_square_dec).sqrt()
else:
    y_dec = Decimal(y_square_dec).sqrt()

computed_y_hex = hex(int(y_dec))
computed_uncompressed_key = ""04"" + x + computed_y_hex
</code></pre>

<p>For information, my outputs are:</p>

<pre><code>computed_y_hex = '0X2D29684BD207BF6D809F7D0EB78E4FD61C3C6700E88AB100D1075EFA8F8FD893080F35E6C7AC2E2214F8F4D088342951'
expected_y_hex = '2CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'
</code></pre>

<p>Thank you for your help!</p>
","<p>Here a sample code without any 3rd party python libs:</p>

<pre><code>def pow_mod(x, y, z):
    ""Calculate (x ** y) % z efficiently.""
    number = 1
    while y:
        if y &amp; 1:
            number = number * x % z
        y &gt;&gt;= 1
        x = x * x % z
    return number

# prime p = 2^256 - 2^32 - 2^9 - 2^8 - 2^7 - 2^6 - 2^4 - 1
p = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f

# bitcoin's compressed public key of private key 55255657523dd1c65a77d3cb53fcd050bf7fc2c11bb0bb6edabdbd41ea51f641
compressed_key = '0314fc03b8df87cd7b872996810db8458d61da8448e531569c8517b469a119d267'

y_parity = int(compressed_key[:2]) - 2
x = int(compressed_key[2:], 16)

a = (pow_mod(x, 3, p) + 7) % p
y = pow_mod(a, (p+1)//4, p)

if y % 2 != y_parity:
    y = -y % p

uncompressed_key = '04{:x}{:x}'.format(x, y)
print(uncompressed_key) 
# should get 0414fc03b8df87cd7b872996810db8458d61da8448e531569c8517b469a119d267be5645686309c6e6736dbd93940707cc9143d3cf29f1b877ff340e2cb2d259cf
</code></pre>

<p>refer to bitcoin talk: <a href=""https://bitcointalk.org/index.php?topic=644919.0"" rel=""nofollow noreferrer"">https://bitcointalk.org/index.php?topic=644919.0</a></p>
","2973","<python><bitcoin><public-key><ecdsa>","9","2","4","2019-03-31 16:39:03","43654055","1","1","","","","2017-04-26 08:49:48",""
"43629265","Deriving an ECDSA uncompressed public key from a compressed one","<p>I am currently trying to derive a Bitcoin uncompressed ECDSA public key from a compressed one.</p>

<p>According to this <a href=""http://en.bitcoin.it/wiki/Elliptic_Curve_Digital_Signature_Algorithm"" rel=""noreferrer"">link on the Bitcoin wiki</a>, it is possible to do so... But how?</p>

<p>To give you more details: as of now I have compressed keys (33-bytes-long) gathered on the bitcoin network.</p>

<p>They are of the following format: &lt;1-byte-long prefix>&lt;32-bytes-long X>.
From there, I would like to obtain an uncompressed key (65-bytes-long) whose format is:
&lt;1-byte-long prefix>&lt;32-bytes-long X>&lt;32-bytes-long Y></p>

<p>According to this <a href=""http://en.bitcoin.it/wiki/Secp256k1"" rel=""noreferrer"">other link on the Bitcoin wiki</a>, it should be as easy as solving the equation:</p>

<p>Y^2 = X^3 + 7 </p>

<p>However, I cannot seem to get there. My value for Y is simply far-off. Here is my code (the value for the public key come from the <a href=""http://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses"" rel=""noreferrer"">Bitcoin wiki example</a>):</p>

<pre><code>import binascii
from decimal import *

expected_uncompressed_key_hex = '0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'
expected_y_hex = expected_uncompressed_key_hex[-64:]
expected_y_dec = int(expected_y_hex, 16)
x_hex = expected_uncompressed_key_hex[2:66]
if expected_y_dec % 2 == 0:
    prefix = ""02""
else:
    prefix = ""03""

artificial_compressed_key = prefix + x_hex

getcontext().prec = 500
test_dec = Decimal(int(x_hex, 16))
y_square_dec = test_dec**3 + 7
if prefix == ""02"":
    y_dec = - Decimal(y_square_dec).sqrt()
else:
    y_dec = Decimal(y_square_dec).sqrt()

computed_y_hex = hex(int(y_dec))
computed_uncompressed_key = ""04"" + x + computed_y_hex
</code></pre>

<p>For information, my outputs are:</p>

<pre><code>computed_y_hex = '0X2D29684BD207BF6D809F7D0EB78E4FD61C3C6700E88AB100D1075EFA8F8FD893080F35E6C7AC2E2214F8F4D088342951'
expected_y_hex = '2CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'
</code></pre>

<p>Thank you for your help!</p>
","<p>I know that this question has been answered and I actually benefited from this answer, so thank you. The problem is that I found these answers 3 times while looking for the same solution in C# and I don't really code in python :). So for anybody trying to solve this here is a C# solution, have fun! :) (It uses BouncyCastle Library).</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using MoreLinq;
using NBitcoin;
using Org.BouncyCastle.Asn1.X9;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Math.EC;

namespace BitcoinPublicKeyDecompression
{
    public class Program
    {
        public static void Main()
        {
            const string cPubKey = ""0250863ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b2352"";
            var uPubKey = cPubKey.ToHexByteArray().BitcoinDecompressPublicKey().ToHexString();
            var expectedUPubKey = new PubKey(cPubKey).Decompress().ToString();

            Console.WriteLine($""Public Key:\n\n{cPubKey}\n\nhas been {(uPubKey == expectedUPubKey ? ""correctly"" : ""incorrectly"")} decompressed to:\n\n{uPubKey}"");

            Console.WriteLine(""\nPress any key to quit..."");
            Console.ReadKey();
        }
    }

    public static class Extensions
    {
        public static readonly byte[] EmptyByteArray = new byte[0];

        public static byte[] BitcoinDecompressPublicKey(this byte[] bPubC)
        {
            var ecPubKey = bPubC.BitcoinCompressedPublicKeyToECPublicKey();
            return ecPubKey.ToBitcoinUncompressedPublicKey();
        }

        public static ECPublicKeyParameters BitcoinCompressedPublicKeyToECPublicKey(this byte[] bPubC)
        {
            var pubKey = bPubC.Skip(1).ToArray();

            var curve = ECNamedCurveTable.GetByName(""secp256k1"");
            var domainParams = new ECDomainParameters(curve.Curve, curve.G, curve.N, curve.H, curve.GetSeed());

            var yParity = new BigInteger(bPubC.Take(1).ToArray()).Subtract(BigInteger.Two);
            var x = new BigInteger(1, pubKey);
            var p = ((FpCurve)curve.Curve).Q;
            var a = x.ModPow(new BigInteger(""3""), p).Add(new BigInteger(""7"")).Mod(p);
            var y = a.ModPow(p.Add(BigInteger.One).FloorDivide(new BigInteger(""4"")), p);

            if (!y.Mod(BigInteger.Two).Equals(yParity))
                y = y.Negate().Mod(p);

            var q = curve.Curve.CreatePoint(x, y);
            return new ECPublicKeyParameters(q, domainParams);
        }

        public static byte[] ToBitcoinUncompressedPublicKey(this AsymmetricKeyParameter ecPublicKey)
        {
            var publicKey = ((ECPublicKeyParameters)ecPublicKey).Q;
            var xs = publicKey.AffineXCoord.ToBigInteger().ToByteArrayUnsigned().PadStart(32);
            var ys = publicKey.AffineYCoord.ToBigInteger().ToByteArrayUnsigned().PadStart(32);
            return new byte[] { 0x04 }.ConcatMany(xs, ys).ToArray();
        }

        public static BigInteger FloorDivide(this BigInteger a, BigInteger b)
        {
            if (a.CompareTo(BigInteger.Zero) &gt; 0 ^ b.CompareTo(BigInteger.Zero) &lt; 0 &amp;&amp; !a.Mod(b).Equals(BigInteger.Zero))
                return a.Divide(b).Subtract(BigInteger.One);

            return a.Divide(b);
        }

        public static byte[] ToHexByteArray(this string str)
        {
            byte[] bytes;
            if (string.IsNullOrEmpty(str))
                bytes = EmptyByteArray;
            else
            {
                var string_length = str.Length;
                var character_index = str.StartsWith(""0x"", StringComparison.Ordinal) ? 2 : 0;
                var number_of_characters = string_length - character_index;
                var add_leading_zero = false;

                if (0 != number_of_characters % 2)
                {
                    add_leading_zero = true;
                    number_of_characters += 1;
                }

                bytes = new byte[number_of_characters / 2];

                var write_index = 0;
                if (add_leading_zero)
                {
                    bytes[write_index++] = CharacterToByte(str[character_index], character_index);
                    character_index += 1;
                }

                for (var read_index = character_index; read_index &lt; str.Length; read_index += 2)
                {
                    var upper = CharacterToByte(str[read_index], read_index, 4);
                    var lower = CharacterToByte(str[read_index + 1], read_index + 1);

                    bytes[write_index++] = (byte)(upper | lower);
                }
            }

            return bytes;
        }

        public static byte CharacterToByte(char character, int index, int shift = 0)
        {
            var value = (byte)character;
            if (0x40 &lt; value &amp;&amp; 0x47 &gt; value || 0x60 &lt; value &amp;&amp; 0x67 &gt; value)
            {
                if (0x40 != (0x40 &amp; value))
                    return value;
                if (0x20 == (0x20 &amp; value))
                    value = (byte)((value + 0xA - 0x61) &lt;&lt; shift);
                else
                    value = (byte)((value + 0xA - 0x41) &lt;&lt; shift);
            }
            else if (0x29 &lt; value &amp;&amp; 0x40 &gt; value)
                value = (byte)((value - 0x30) &lt;&lt; shift);
            else
                throw new InvalidOperationException($""Character '{character}' at index '{index}' is not valid alphanumeric character."");

            return value;
        }

        public static string ToHexString(this byte[] value, bool prefix = false)
        {
            var strPrex = prefix ? ""0x"" : """";
            return strPrex + string.Concat(value.Select(b =&gt; b.ToString(""x2"")).ToArray());
        }

        public static IEnumerable&lt;T&gt; ConcatMany&lt;T&gt;(this IEnumerable&lt;T&gt; enumerable, params IEnumerable&lt;T&gt;[] enums)
        {
            return enumerable.Concat(enums.SelectMany(x =&gt; x));
        }
    } 
}
</code></pre>

<p>Result:</p>

<p><a href=""https://i.stack.imgur.com/AEQ0Y.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AEQ0Y.png"" alt=""enter image description here""></a></p>
","2973","<python><bitcoin><public-key><ecdsa>","9","0","4","2019-03-31 16:39:03","43654055","1","1","","","","2017-04-26 08:49:48",""
"51489637","What are the differences between JWT RS256, RS384, and RS512 algorithms?","<p>I'm using JWT RS256 algorithm in my current project, but I'm wondering what are the differences between algorithms RS256, RS384, and RS512. Can someone explain to me what are the key differences in these algorithms?</p>
","<p>This is the set of algorithms defined for use with JWS in <a href=""https://tools.ietf.org/html/rfc7518#section-3.1"" rel=""noreferrer"">RFC 7518 -JSON Web Algorithms (JWA)</a></p>

<p><a href=""https://i.stack.imgur.com/RR4yw.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/RR4yw.png"" alt=""algorithms""></a></p>

<p>The difference between <code>RS256</code>, <code>RS384</code>, and <code>RS512</code> is the hashing algorithm <code>SHA256</code>, <code>SHA384</code> and <code>SHA512</code></p>
","2956","<security><jwt><private-key><public-key>","7","11","1","2018-07-24 07:10:10","51491458","0","1","7329832","","2018-07-24 07:10:10","2018-07-24 02:33:05",""
"6816694","What is the Android-counterpart of public-private-key-encryption with openssl_seal & openssl_open (both PHP)?","<p>I just began to develop a android-app which needs to communicate with a server/database. On server side I use PHP to collect data or execute queries. I read a lot about security (XSS, SQL injection, etc.). Because I also would like to encrypt data sent between client &amp; server I began to deal with openssl-functions in PHP.</p>

<p>The openssl_seal- and openssl_open-functions seem to be good for this purpose.
I wrote these two functions:</p>

<pre><code>function encryptRnd($data) {
$pubKey = file_get_contents(""public.key"");
$publicKeys = array(openssl_pkey_get_public($pubKey));
$res = openssl_seal($data, $encryptedData, $encryptedKeys, $publicKeys);
return array(""data"" =&gt; base64_encode($encryptedData), ""rndKey"" =&gt; base64_encode($encryptedKeys[0]));}

function decryptRnd($credentials) {
$privateKey = openssl_get_privatekey(file_get_contents(""private.key""));
$result = openssl_open(base64_decode($credentials[""data""]), $decryptedData, base64_decode($credentials[""rndKey""]), $privateKey);
if (!$result) echo ""ERROR during decryption.\n"";
return $decryptedData;}
</code></pre>

<p>""a"" is the data (to encrypt/encrypted) while ""b"" is the random-key produced by openssl_seal and used for the decryption.</p>

<p>The two keyfiles habe been produced on Windows by using </p>

<ul>
<li>""openssl.exe genrsa -out private.key 1024"" for the privateKey file</li>
<li>""openssl.exe rsa -in private.key -out public.pem -outform PEM -pubout"" for the publicKey file</li>
</ul>

<p>Within PHP this all works as expected.</p>

<p><strong>But how to implement the same technique in Android (and I'm a beginner!)?</strong></p>

<p>I searched the web for examples to use in conjunction with openssl_seal on PHP side but didn't find anything working.</p>

<ol>
<li>I would like to be able to encrypt data on Android side and decrypt
it on PHP.</li>
<li>And when the server is sending encrypted data, this shall be decrypted on Android side (with a second public/privateKey pair I assume)</li>
</ol>

<p>I also implemented the example mentioned <a href=""http://schneimi.wordpress.com/2008/11/25/rsa-encryption-between-java-and-php/"" rel=""nofollow"">here</a> but that didn't work (openssl_private_decrypt was always FALSE on PHP side). So that didn't help me whereas it would be only Android=>PHP encryption without the other way round.</p>

<p><strong>In sum: I'm looking for a way to encrypt and decrypt data sended between Android and PHP on each side where only the receiver can decrypt the data. Can somebody give me an example or even a clue?</strong></p>
","<p>The usual way to do this would not be (direct) asymmetric encryption, but using an encrypted (and authenticated) channel to send the data, for example using SSL/TLS.</p>

<p>On the server side, you simply have to configure your web server to also offer HTTPS access.</p>

<p>On the client side, I suppose the easiest would be to use an HTTPS URL to send the data:</p>

<pre><code>URL url = new URL(""https://example.com/myscript.php"");
URLConnection conn = url.openConnection();
conn.setDoOutput(true);
OutputStream out = conn.getOutputStream();

 // write data to stream

out.close();
InputStream in = conn.getInputStream();

// read answer from input stream

in.close();
</code></pre>

<p>I'm not sure on how to configure the accepted server certificates for Android, though.</p>

<p>This will (under the hoods) use the server's RSA key (in its certificate) to authenticate the connection and negotiate a session key for symmetric encryption.</p>
","2904","<php><android><encryption><public-key><private-key>","0","0","2","2011-07-25 16:10:36","","1","","856087","","2011-07-25 13:19:09","2011-07-25 13:13:06",""
"6816694","What is the Android-counterpart of public-private-key-encryption with openssl_seal & openssl_open (both PHP)?","<p>I just began to develop a android-app which needs to communicate with a server/database. On server side I use PHP to collect data or execute queries. I read a lot about security (XSS, SQL injection, etc.). Because I also would like to encrypt data sent between client &amp; server I began to deal with openssl-functions in PHP.</p>

<p>The openssl_seal- and openssl_open-functions seem to be good for this purpose.
I wrote these two functions:</p>

<pre><code>function encryptRnd($data) {
$pubKey = file_get_contents(""public.key"");
$publicKeys = array(openssl_pkey_get_public($pubKey));
$res = openssl_seal($data, $encryptedData, $encryptedKeys, $publicKeys);
return array(""data"" =&gt; base64_encode($encryptedData), ""rndKey"" =&gt; base64_encode($encryptedKeys[0]));}

function decryptRnd($credentials) {
$privateKey = openssl_get_privatekey(file_get_contents(""private.key""));
$result = openssl_open(base64_decode($credentials[""data""]), $decryptedData, base64_decode($credentials[""rndKey""]), $privateKey);
if (!$result) echo ""ERROR during decryption.\n"";
return $decryptedData;}
</code></pre>

<p>""a"" is the data (to encrypt/encrypted) while ""b"" is the random-key produced by openssl_seal and used for the decryption.</p>

<p>The two keyfiles habe been produced on Windows by using </p>

<ul>
<li>""openssl.exe genrsa -out private.key 1024"" for the privateKey file</li>
<li>""openssl.exe rsa -in private.key -out public.pem -outform PEM -pubout"" for the publicKey file</li>
</ul>

<p>Within PHP this all works as expected.</p>

<p><strong>But how to implement the same technique in Android (and I'm a beginner!)?</strong></p>

<p>I searched the web for examples to use in conjunction with openssl_seal on PHP side but didn't find anything working.</p>

<ol>
<li>I would like to be able to encrypt data on Android side and decrypt
it on PHP.</li>
<li>And when the server is sending encrypted data, this shall be decrypted on Android side (with a second public/privateKey pair I assume)</li>
</ol>

<p>I also implemented the example mentioned <a href=""http://schneimi.wordpress.com/2008/11/25/rsa-encryption-between-java-and-php/"" rel=""nofollow"">here</a> but that didn't work (openssl_private_decrypt was always FALSE on PHP side). So that didn't help me whereas it would be only Android=>PHP encryption without the other way round.</p>

<p><strong>In sum: I'm looking for a way to encrypt and decrypt data sended between Android and PHP on each side where only the receiver can decrypt the data. Can somebody give me an example or even a clue?</strong></p>
","<p>If you really want to do the encryption manually, this is possible, too.</p>

<p>The <a href=""http://developer.android.com/reference/javax/crypto/package-summary.html"" rel=""nofollow"">javax.crypto</a> package contains the necessary classes needed here (together with some from <a href=""http://developer.android.com/reference/java/security/package-summary.html"" rel=""nofollow"">java.security</a> and subpackages), primarily the <code>Cipher</code> class.</p>

<p>This page named <a href=""http://www.javamex.com/tutorials/cryptography/rsa_encryption_2.shtml"" rel=""nofollow"">RSA encryption in Java</a> shows an example of doing this.</p>

<p>Instead of loading the public key from a file in serialized format, you could use Java's KeyStore mechanism (and include the keystore in your jar or whatever format is used on Android).</p>
","2904","<php><android><encryption><public-key><private-key>","0","0","2","2011-07-25 16:10:36","","1","","856087","","2011-07-25 13:19:09","2011-07-25 13:13:06",""
"25101874","Clone the repository from Codebase Permission denied (publickey). fatal: Could not read from remote repository","<p>Hi i have this codebase account and i want to clone it to in my certain folder. I already added the SSH public keys in my profile in codebase. When i tried to git clone then certain path of the project this is what it goes</p>

<p>Cloning into 'website'...
Permission denied (publickey).
fatal: Could not read from remote repository.</p>

<p>Please make sure you have the correct access rights
and the repository exists.</p>

<p>can someone help me figured this out why it says Permisssion denied(public key)?? I already added my SSH public key to my profile in my account in codebase.
Any help is muchly appreciated.</p>
","<p>Make sure that:</p>

<ul>
<li><p>your ssh access does work:</p>

<pre><code>ssh -T git@codebasehq.com
</code></pre></li>
</ul>

<p>For that, you need <code>%HOME%\.ssh\id_rsa(.pub)</code> files: those are the default names used by git.</p>

<ul>
<li><p>you are cloning using an url like:</p>

<pre><code>git clone git@codebasehq.com:account/project/repo.git
</code></pre></li>
</ul>
","2898","<git><public-key><codebase>","1","1","1","2014-08-03 06:58:13","25101912","0","1","","","","2014-08-03 05:17:52",""
"48832170","Generate EC public key from byte array private key in native java (7+)","<p>I'm trying to learn some crypto coding and have generated a 32-byte private key currently held in a byte array (<i>byte[] privatekey</i>). I know the public key is generated using the <i>secp256k1</i> named elliptic curve parameters, and a formula where <code>publickey = G * privatekey</code>, where G is some point on the elliptic curve (ECPoint?), but I am unable to transfer that named parameter spec and formula into actual coding of a public key. I know that since java 7, there are classes included in the <code>java.security.*</code> and <code>java.security.spec.*</code> packages to do this in short code, but I can't find a good example showing how to do this without using a third party library.</p>

<p><a href=""https://bitcoin.stackexchange.com/questions/25024/how-do-you-get-a-bitcoin-public-key-from-a-private-key"">This bitcoin stackexchange link has all the theoretical answer and great python and C# code, but nothing in Java</a>.</p>

<p>Edit/Update: I have tried to get what I need with the following code:<p></p>

<pre><code>String secp256k1_G_uncompressed_string = ""0479BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8"";
byte[] secp256k1_G_uncompressed_bytes = DatatypeConverter.parseHexBinary(secp256k1_G_uncompressed_string);
String privatekeystring = ""1184CD2CDD640CA42CFC3A091C51D549B2F016D454B2774019C2B2D2E08529FD"";
byte[] privatekeybytes = DatatypeConverter.parseHexBinary(privatekeystring);
BigInteger secp256k1_G_num = new BigInteger(1, secp256k1_G_uncompressed_bytes);
BigInteger privatekey_num = new BigInteger(1, privatekeybytes);
BigInteger curvepoint = secp256k1_G_num.multiply(privatekey_num);
byte[] publickeybytes = curvepoint.toByteArray();
System.out.println(DatatypeConverter.printHexBinary(privatekeybytes));
System.out.println(DatatypeConverter.printHexBinary(publickeybytes));
</code></pre>

<p>The publickey that should be generated with correct coding is this: </p>

<blockquote>
  <p>04d0988bfa799f7d7ef9ab3de97ef481cd0f75d2367ad456607647edde665d6f6
  fbdd594388756a7beaf73b4822bc22d36e9bda7db82df2b8b623673eefc0b7495</p>
</blockquote>

<p>but the public key that is being generated is this:</p>

<blockquote>
  <p>4E6801418BB6EF9F462F69830F82EB51BB9224219B9D89C8C34FB746297F59779D8B986194181BD7AB99DC7E3086914EA13C4B37E05716CADCA0AE391CE81C4B85E0F09E8628F0F81692B5D08D0D8B9E20615A5D23DE0F591D02C650554BB1D8</p>
</blockquote>
","<p>An elliptic curve point is not an integer. Putting the encoded representation of a point (G) in a <code>BigInteger</code> and trying to use it as an integer is nowhere near correct. Elliptic curve point multiplication is not integer multiplication, and is nowhere near as simple as <code>BigInteger.multiply</code>. And it is written with the scalar on the left, e.g. kG not Gk.</p>

<p>Translating the standard (or at least conventional) algorithms given at the bitcoin Q to Java really should be a reasonably simple exercise for any Java programmer. </p>

<p><a href=""https://stackoverflow.com/questions/15727147/scalar-multiplication-of-point-over-elliptic-curve"">Scalar Multiplication of Point over elliptic Curve</a> contains (in the answer) a correct implementation for P192 aka secp192r1; it can be converted to secp256k1 by replacing p and a with the values from the spec (SEC2 from <a href=""https://www.secg.org"" rel=""nofollow noreferrer"">https://www.secg.org</a> or X9.62 if you have it) or any existing implementation -- including Java (see below) -- and discarding the P192-specific test data. Actually you mostly need to change p; the Koblitz curves were chosen to have a=0. <a href=""https://stackoverflow.com/questions/45133489/elliptic-curve-multiplication-function"">Elliptic Curve Multiplication Function</a> contains a not-quite-correct implementation that is stated to be for secp256k1 but doesn't actually include the constants for any curve.</p>

<blockquote>
  <p>since java 7, there are classes included in the java.security.* and java.security.spec.* packages to do this in short code</p>
</blockquote>

<p>Not really. First, Java crypto isolates the classes you see in <code>java.security</code> and <code>javax.crypto</code> from the implementation code, which is in entirely different classes (mostly (still) under <code>sun.*</code> and <code>com.sun.*</code>) in one or more 'providers' which are separate jars and technically optional; it is possible to remove, add, or change providers without changing the calls in your code, although most people don't. The JCA 'facade' classes for EC crypto were present since java 5 (called 1.5), but no provider implementing EC algorithms was included in the standard build; to use them you had to add a third-party provider. Starting in java 7 a standard SunEC provider IS included. However, JCA (for all algorithms not just EC) keeps private and public keys strictly separate after generation, and in particular it provides no way to access the private-to-public derivation logic that exists internally for EC.</p>

<p>It does include the parameters for several standard curves, including secp256k1, which you could use to avoid the effort of copying them from the spec. There doesn't appear to be a direct way to access this data, but you can do so indirectly by generating a nonce key and discarding it. Alternatively, since you already have a private key you can create the encoding Java uses (PKCS8) and read that in, producing the same curve parameters and also a usable key. In general constructing ASN.1 DER encodings like PKCS8 is fairly complicated, but <em>for EC</em> it is simplified because (1) everybody uses the 'named' form which encodes the curve as a single OID and (2) the standard specifies an encoding of the private value which is fixed in length for a given curve; as a result the PKCS8 encoding for a given EC curve consists of a fixed prefix followed by the private key value. Example snippets:</p>

<pre><code>    KeyPairGenerator kg = KeyPairGenerator.getInstance (""EC"");
    kg.initialize (new ECGenParameterSpec (""secp256k1""));
    ECParameterSpec p = ((ECPublicKey) kg.generateKeyPair().getPublic()).getParams();
    System.out.println (""p=(dec)"" + ((ECFieldFp) p.getCurve().getField()).getP() );
    ECPoint G = p.getGenerator(); 
    System.out.format (""Gx=(hex)%032x%n"", G.getAffineX());
    System.out.format (""Gy=(hex)%032x%n"", G.getAffineY());
    //
    byte[] privatekey_enc = DatatypeConverter.parseHexBinary(
            ""303E020100301006072A8648CE3D020106052B8104000A042730250201010420""+
            ""1184CD2CDD640CA42CFC3A091C51D549B2F016D454B2774019C2B2D2E08529FD"");
    // note fixed prefix for PKCS8-EC-secp256k1 plus your private value
    KeyFactory kf = KeyFactory.getInstance(""EC"");
    PrivateKey k1 = kf.generatePrivate(new PKCS8EncodedKeySpec(privatekey_enc));
    ECParameterSpec p2 = ((ECPrivateKey) k1).getParams();
    System.out.println (""again p=(dec)"" + ((ECFieldFp) p2.getCurve().getField()).getP() );
</code></pre>

<p>which produces output:</p>

<pre><code>p=(dec)115792089237316195423570985008687907853269984665640564039457584007908834671663
Gx=(hex)79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798
Gy=(hex)483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8
again p=(dec)115792089237316195423570985008687907853269984665640564039457584007908834671663
</code></pre>

<p>Note those coordinates for the basepoint G match your expectation. I displayed a mix of decimal and hex just to show the possibilities; this does not affect the actual numbers in the computer.</p>

<p>ADDED in response to comments:</p>

<p>The variables p and p2 are <code>ECParameterSpec</code> objects which contain the parameters of an EC curve (underlying field, curve coefficients, basepoint aka generator, order and cofactor; and internally 'name' although the API doesn't expose it). The values I print labelled 'p' are the result of calling <code>getP</code> which returns <em>one</em> item from the curve parameters, namely the modulus of the underlying prime field, and thus the value you need to use in the calculations shown in the linked post where it does <code>mod(p)</code> and <code>modInverse(p)</code> and <code>modPow(,p)</code>. Since this p (or P) is a parameter of the curve it is the same for all keys on that curve; note the two values I print are the same even though they are from different keys. There are actually two kinds of elliptic curves standardized for cryptography: curves over a prime field, denoted Fp, and curves over an extension field of characteristic two, denoted F2m. secp256k1 is the first kind, that's why the cast to <code>ECFieldFp</code> before calling <code>getP()</code>. </p>

<p>Yes my fixed prefix contains the headers and fields identifying a privatekey (PKCS8) encoding as being for EC and secp256k1 and that prefix is the same for all EC secp256k1 privatekeys. The p values are as described above, and not privatekeys or publickeys. Yes if you had the public point you could combine it with the <code>ECParameterSpec</code> into an <code>ECPublicKeySpec</code> and convert it and use it -- or you could append the point encoding to a similar but different fixed prefix to get an <code>X509EncodedKeySpec</code> which is the encoding Java uses for publickeys and convert <em>that</em> without needing the <code>ECParameterSpec</code> in advance -- but your whole problem, as I understand it, is that you don't have the public point yet and want to derive it, which requires the point multiplication calculation shown in the linked posts. </p>
","2867","<java><public-key><elliptic-curve>","2","1","1","2019-10-10 11:04:45","48841220","1","3","8752062","","2019-10-10 11:04:45","2018-02-16 17:41:16",""
"23318485","Whose key is used to encrypt a HTTPS response?","<p>I have a web server built up relying on HTTPS. So, my server maintains its private key and publish a public key that any clients can use to encrypt their request. Since my server is the only one who has the private key to decrypt any message encryped using server's public key, any request sent this way can be considered secure.</p>

<p>However my question is at the response part. When the server sends the response back to the client, whose public key will the server use to encrypt the response message?</p>

<p>I assume the server will use client's public key to encrypt the response (by default? or upon configuration?). If so, does the server knows the client's public key from the request it sends to the server, or somehow else?</p>

<p><strong>Update:
If I understand it incorrectly, then during future communications how each party knows how to decrypt the message the other one sends? Is some key shared or somehow?</strong></p>

<p>Thanks!</p>
","<p>None.</p>

<p>Public and private key are used to negotiate a symmetric encryption key, that will be used during that session. Asymmetric encryption uses two keys (private and public), symmetric encryption uses only one.</p>

<p>Your server sends its public key to a client, the client validates that key signature (check the CA and all that) then use it to encrypt a randomly selected key that will be used as symmetric encryption key, and send it to the server. Because only the private key can decrypt that message, the message is secure, only the server can decrypt it. Then the server accepts that key selected by the client, and they start to transmit data using symmetric encryption.</p>

<p>Why all this? asymmetric encryption is quite computionally expensive, so it is just used to ensure that client and server can negotiate a secure symmetric key without sending it in plain text. Symmetric encryption is cheap.</p>

<p>Symmetric encryption is also safe, the problem is that both parts must know the key before start, and that is a big issue. By using asymmetric encryption for negotiating the key, this problem is solved.</p>

<p><strong>UPDATE</strong></p>

<p>Well, it seems that @EJP does not agree with my answer, so I tried to find some more documentation that explain the thing in an easy way.</p>

<p><a href=""http://www.techradar.com/news/software/how-ssl-and-tls-works-1047412"" rel=""noreferrer"">http://www.techradar.com/news/software/how-ssl-and-tls-works-1047412</a></p>

<blockquote>
  <p>SSL explained</p>
  
  <p>When you visit a bank's website, the bank's server will automatically
  redirect you to its secure site using the HTTPS protocol before you
  can log in. This results in your browser and the bank's site
  negotiating a secure channel using SSL.</p>
  
  <p>This negotiation goes a little like this (note that I've simplified it
  greatly). The browser sends a message stating what the latest version
  of SSL it can support and a list of symmetric algorithms it can use.
  The web server sends back a message with the version of SSL and the
  algorithm that will be used.</p>
  
  <p>It sends its certificate as well. The client verifies the certificate
  using the known certificates that came with the browser; in other
  words, it checks that it has been signed by a trusted CA and that it
  hasn't expired.</p>
  
  <p>If the certificate is valid, the browser generates a one-time key for
  the session, encrypts it with the server's public key (it's part of
  the certificate), and sends it to the server. The server decrypts the
  key, then uses that key together with the agreed symmetric algorithm
  for the rest of the session.</p>
</blockquote>

<p>I may be confused.</p>
","2854","<ssl><https><public-key-encryption><public-key>","6","5","3","2014-04-28 06:22:29","23333889","0","3","2889276","","2014-04-27 22:45:46","2014-04-27 01:51:40",""
"23318485","Whose key is used to encrypt a HTTPS response?","<p>I have a web server built up relying on HTTPS. So, my server maintains its private key and publish a public key that any clients can use to encrypt their request. Since my server is the only one who has the private key to decrypt any message encryped using server's public key, any request sent this way can be considered secure.</p>

<p>However my question is at the response part. When the server sends the response back to the client, whose public key will the server use to encrypt the response message?</p>

<p>I assume the server will use client's public key to encrypt the response (by default? or upon configuration?). If so, does the server knows the client's public key from the request it sends to the server, or somehow else?</p>

<p><strong>Update:
If I understand it incorrectly, then during future communications how each party knows how to decrypt the message the other one sends? Is some key shared or somehow?</strong></p>

<p>Thanks!</p>
","<blockquote>
  <p>My server maintains its private key and publish a public key</p>
</blockquote>

<p>Yes.</p>

<blockquote>
  <p>that any clients can use to encrypt their request.</p>
</blockquote>

<p>No.</p>

<blockquote>
  <p>Since my server is the only one who has the private key to decrypt any message encryped using server's public key, any request sent this way can be considered secure.</p>
</blockquote>

<p>That's not how it works.</p>

<blockquote>
  <p>However my question is at the response part. When the server sends the response back to the client, whose public key will the server use to encrypt the response message?</p>
</blockquote>

<p>None.</p>

<blockquote>
  <p>I assume the server will use client's public key to encrypt the response (by default? or upon configuration?).</p>
</blockquote>

<p>No. See below. In most SSL connections the server doesn't even know the client's public key,if indeed the client even has one. This only occurs in so-called 'mutual' SSL, Where both peers authenticate to each other.</p>

<blockquote>
  <p>If so, does the server knows the client's public key from the request it sends to the server, or somehow else?</p>
</blockquote>

<p>It only knows the public key if the client sends its certificate, which only happens if the server is configured to request it, which it usually isn't.</p>

<p>HTTPS runs over SSL, which uses a symmetric session key negotiated independently by both peers. It is never transmitted. The server's key is only used to provide a digital signature over its certificate, which the client can verify, which proves that that server owns that certificate. From there on it is all symmetric negotiation and encryption.</p>

<p>Authority: RFC 2246 and successors.</p>
","2854","<ssl><https><public-key-encryption><public-key>","6","2","3","2014-04-28 06:22:29","23333889","0","3","2889276","","2014-04-27 22:45:46","2014-04-27 01:51:40",""
"23318485","Whose key is used to encrypt a HTTPS response?","<p>I have a web server built up relying on HTTPS. So, my server maintains its private key and publish a public key that any clients can use to encrypt their request. Since my server is the only one who has the private key to decrypt any message encryped using server's public key, any request sent this way can be considered secure.</p>

<p>However my question is at the response part. When the server sends the response back to the client, whose public key will the server use to encrypt the response message?</p>

<p>I assume the server will use client's public key to encrypt the response (by default? or upon configuration?). If so, does the server knows the client's public key from the request it sends to the server, or somehow else?</p>

<p><strong>Update:
If I understand it incorrectly, then during future communications how each party knows how to decrypt the message the other one sends? Is some key shared or somehow?</strong></p>

<p>Thanks!</p>
","<p>Public keys are not directly used to encrypt any of the the underlying HTTP traffic on an HTTPS connection; neither the HTTP request nor the HTTP response are encrypted this way.  Rather, during the initial SSL handshake, a session specific symmetric key is negotiated between the client and the server, and it's the symmetric key that is then used to encrypt all traffic on the HTTP connection in both directions.</p>

<p>The specific mechanism by which the symmetric key is negotiated depends on the specific cipher suite that is negotiated between client and server.  This negotiation always involves the server's public key and a value sent by the client; it may also involve items like a client public key or separate connection specific public keys from the server and client.</p>

<p>Additional detail can be found in RFC 5246 starting here:</p>

<p><a href=""http://tools.ietf.org/html/rfc5246#section-7.3"" rel=""noreferrer"">http://tools.ietf.org/html/rfc5246#section-7.3</a></p>
","2854","<ssl><https><public-key-encryption><public-key>","6","11","3","2014-04-28 06:22:29","23333889","0","3","2889276","","2014-04-27 22:45:46","2014-04-27 01:51:40",""
"37473376","SSH into staging machine from docker instance using Bitbucket Pipelines","<p>Using the new Bitbucket Pipelines feature, how can I SSH into my staging box from the docker container it spins up? </p>

<p>The last step in my pipeline is an <code>.sh</code> file that deploys the necessary code on staging, however because my staging box uses public key authentication and doesn't know about the docker container, the SSH connection is being denied.</p>

<p>Anyway of getting around this without using password authentication over SSH (which is causing me issues as well by constantly choosing to authenticate over public key instead.)?</p>
","<p>Bitbucket pipelines can use a Docker image you've created, that has the ssh client setup to run during your builds, as long as it's hosted on a publicly accessible container registry.</p>

<h3>Create a Docker image.</h3>

<p><a href=""https://docs.docker.com/engine/userguide/dockerimages/"" rel=""nofollow noreferrer"">Create a Docker image</a> with your ssh key available somewhere. The image also needs to have the <a href=""https://unix.stackexchange.com/a/94275/22470"">host key for your environment(s) saved</a> under the user the container will run as. This is normally the <code>root</code> user but may be different if you have a <code>USER</code> command in your <code>Dockerfile</code>. </p>

<p>You could copy an already populated <code>known-hosts</code> file in or configure the file dynamically at image build time with:</p>

<pre><code>RUN ssh-keyscan your.staging-host.com
</code></pre>

<h3>Publish the image</h3>

<p>Publish your image to a publicly accessible, but <strong>private</strong> registry. You can <a href=""https://docs.docker.com/registry/deploying/"" rel=""nofollow noreferrer"">host your own</a> or use a service like <a href=""https://hub.docker.com/billing-plans/"" rel=""nofollow noreferrer"">Docker Hub</a>.</p>

<h3>Configure Pipelines</h3>

<p><a href=""https://confluence.atlassian.com/bitbucket/use-docker-images-as-build-environments-in-bitbucket-pipelines-792298897.html"" rel=""nofollow noreferrer"">Configure pipelines to build with your docker image</a>.</p>

<p>If you use Docker Hub</p>

<pre><code>image:
  name: account-name/java:8u66
  username: $USERNAME
  password: $PASSWORD
  email: $EMAIL
</code></pre>

<p>Or Your own external registry</p>

<pre><code>  name: docker.your-company-name.com/account-name/java:8u66
</code></pre>

<h3>Restrict access on your hosts</h3>

<p>You don't want to have ssh keys to access your hosts flying around the world so I would also restrict access for these deploy ssh keys to <a href=""https://unix.stackexchange.com/a/110939/22470"">only run your deploy commands</a>.</p>

<p>The <code>authorized_keys</code> file on your staging host: </p>

<pre><code>command=""/path/to/your/deploy-script"",no-agent-forwarding,no-port-forwarding,no-X11-forwarding ssh-dss AAAAC8ghi9ldw== deploy@bitbucket
</code></pre>

<p>Unfortunately bitbucket <a href=""https://bitbucket.org/site/master/issues/12846/document-pipeline-agent-ips-for-network"" rel=""nofollow noreferrer"">don't publish an IP list to restrict access to</a>   as they use shared infrastructure for pipelines. If they happen to be running on AWS then Amazon do <a href=""https://ip-ranges.amazonaws.com/ip-ranges.json"" rel=""nofollow noreferrer"">publish IP lists</a>. </p>

<pre><code>from=""10.5.0.1"",command="""",no-... etc
</code></pre>

<p>Also remember to date them an expire them from time to time. I know ssh keys don't enforce dates but it's a good idea to do it anyway.</p>
","2841","<authentication><ssh><docker><public-key><bitbucket-pipelines>","8","6","2","2018-05-06 02:02:51","37473702","0","5","188","","2016-06-02 03:44:04","2016-05-27 01:24:58",""
"37473376","SSH into staging machine from docker instance using Bitbucket Pipelines","<p>Using the new Bitbucket Pipelines feature, how can I SSH into my staging box from the docker container it spins up? </p>

<p>The last step in my pipeline is an <code>.sh</code> file that deploys the necessary code on staging, however because my staging box uses public key authentication and doesn't know about the docker container, the SSH connection is being denied.</p>

<p>Anyway of getting around this without using password authentication over SSH (which is causing me issues as well by constantly choosing to authenticate over public key instead.)?</p>
","<p>You can now setup SSH keys under pipeline settings so that you do not need to have a private docker image just to store ssh keys.  It is also extracted from your source code so you don't have it in your repo as well.</p>

<p>Under </p>

<pre><code>Settings -&gt; Pipelines -&gt; SSH keys
</code></pre>

<p>You can either provide a key pair or generate a new one.  The private key will be put in the docker container at <code>~/.ssh/config</code> and provide you a public key you can put in your host to the <code>~/.ssh/authorized_keys</code> file.  The page also requires an ip or name to setup the fingerprint for known hosts when running on docker as well.</p>

<p>Also, Bitbucket has provided IP addresses you can white list if necessary for the docker containers being spun up.  They are <a href=""https://confluence.atlassian.com/bitbucket/what-are-the-bitbucket-cloud-ip-addresses-i-should-use-to-configure-my-corporate-firewall-343343385.html"" rel=""nofollow noreferrer"">currently</a>:</p>

<ul>
<li>34.236.25.177/32</li>
<li>34.232.25.90/32</li>
<li>52.203.14.55/32</li>
<li>52.202.195.162/32</li>
<li>52.204.96.37/32</li>
<li>52.54.90.98/32</li>
<li>34.199.54.113/32</li>
<li>34.232.119.183/32</li>
<li>35.171.175.212/32</li>
</ul>
","2841","<authentication><ssh><docker><public-key><bitbucket-pipelines>","8","2","2","2018-05-06 02:02:51","37473702","0","5","188","","2016-06-02 03:44:04","2016-05-27 01:24:58",""
"29604333","Creating JSch HostKey instance from a public key in .pub format","<p>I am trying to send a file from a Windows machine to a Linux machine using JSch. Because of that I copied the host public key from the Linux machine to my Windows machine and added the key to my <code>HostKeyRepository</code>. But for some reason I get ""invalid key type"" exception. Here is my code:</p>

<pre><code>HostKeyRepository repo = jsch.getHostKeyRepository();
File file = new File(""D:\\Uni\\Arbeit\\ssh_host_rsa_key.pub"");
byte[] HK = Files.readAllBytes(file.toPath());
Session session=jsch.getSession(user, host, 22);
session.setPassword(password);  
HostKey hk = new HostKey(null, HK); 
repo.add(hk, null);
session.connect();
</code></pre>
","<p>The <code>.pub</code> file has format:</p>

<pre class=""lang-none prettyprint-override""><code>&lt;type&gt; &lt;base64-encoded-public-key&gt; &lt;comment&gt;
</code></pre>

<p>What goes to the <a href=""https://epaul.github.io/jsch-documentation/javadoc/com/jcraft/jsch/HostKey.html#HostKey-java.lang.String-byte:A-"" rel=""nofollow noreferrer""><code>HostKey</code> constructor</a> is the public key part only, in a binary form (not base64-encoded).</p>

<p>Use the JSch <code>Util.fromBase64()</code> to convert the <code>base64-encoded-public-key</code> part to <code>byte[]</code>.</p>

<pre><code>static byte[] fromBase64(byte[] buf, int start, int length) 
</code></pre>

<hr>

<p>You can also check the JSch implementation of the <code>known_hosts</code> file parsing in the <code>KnownHosts.setKnownHosts(InputStream input)</code>.</p>

<p>The <code>known_hosts</code> file has a similar format as the <code>.pub</code> file, except that there's an additional <code>hostname</code> part in the front and the <code>comment</code> is usually not included:</p>

<pre class=""lang-none prettyprint-override""><code>&lt;hostname&gt; &lt;type&gt; &lt;base64-encoded-public-key&gt; [comment]
</code></pre>

<p>Note that your implementation does not have to be that complex as theirs, if you know that you are going to parse one specific format of the file.</p>
","2831","<java><jsch><public-key>","1","4","1","2017-02-15 16:57:58","29605457","0","1","850848","","2015-04-13 13:04:08","2015-04-13 11:36:28",""
"23148072","RSA. Java Encryption .NET Decryption","<p>I need implement login to .NET Soap Web Service. This Web Service has method</p>

<pre><code> AuthenticateUser(username, password)
</code></pre>

<p>and password should be encrypted with RSA public key. Below what I am trying to do:</p>

<pre><code> public static final String PUBLIC = ""q/9CujExqL6rsMMO22WWIotoXDCw5KEmGQJqL9UJEfoErwZ9ZCm3OwMTSlAMSfoXEMA04Y1rhfYC3MtU/7dYEoREfsvOPGDBWanTKyMzv2otCfiURyQoghEdkhv3ipQQaaErT7lfBKobJsdqJlvxo4PCOUas2Z6YpoMYgthzTiM="";
    public static final String EXPONENT = ""AQAB"";

    public static PublicKey getPublicKey() throws Exception{
        byte[] modulusBytes = Base64.decode(PUBLIC, 0);
        byte[] exponentBytes = Base64.decode(EXPONENT,    0);

        BigInteger modulus = new BigInteger(1, (modulusBytes) );
        BigInteger exponent = new BigInteger(1, (exponentBytes));

        RSAPublicKeySpec spec = new RSAPublicKeySpec(modulus, exponent);
        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        return kf.generatePublic(spec);
    }

    public static byte[] encrypt(Key publicKey, String s) throws Exception{
        byte[] byteData = s.getBytes(""UTF-8"");
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding""); 
        cipher.init(Cipher.ENCRYPT_MODE, publicKey); 
        byte[] encryptedData = cipher.doFinal(byteData);
        return encryptedData;
    }

    public static String arrayAsString (byte [] array){
        String p = """";
        for (int i = 0; i &lt; array.length; i++) {
            p +=  unsignedToBytes(array[i]);
            if (i &lt; array.length - 1)
                p+= "","";
        }
        return p;
    }

    public static int unsignedToBytes(byte b) {
        return b &amp; 0xFF;
    }

   public static void main(String[] args){
        PublicKey publicKey = getPublicKey();
        byte [] encrypted = encode(publicKey, ""passwordHere"");
        String pass = arrayAsString(encrypted);
        webservice.AuthenticateUser(""testAdmin"", pass); 
   }
</code></pre>

<p>I also have .NET code from Web Service side</p>

<pre><code>    private static string publicKey = ""&lt;RSAKeyValue&gt;&lt;Modulus&gt;q/9CujExqL6rsMMO22WWIotoXDCw5KEmGQJqL9UJEfoErwZ9ZCm3OwMTSlAMSfoXEMA04Y1rhfYC3MtU/7dYEoREfsvOPGDBWanTKyMzv2otCfiURyQoghEdkhv3ipQQaaErT7lfBKobJsdqJlvxo4PCOUas2Z6YpoMYgthzTiM=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;"";
    private static UnicodeEncoding _encoder = new UnicodeEncoding();

    public static string Encrypt(string data)
    {
        var rsa = new RSACryptoServiceProvider();
        rsa.FromXmlString(publicKey);
        var dataToEncrypt = _encoder.GetBytes(data);
        var encryptedByteArray = rsa.Encrypt(dataToEncrypt, false).ToArray();
        var length = encryptedByteArray.Count();
        var item = 0;
        var sb = new StringBuilder();
        foreach (var x in encryptedByteArray)
        {
            item++;
            sb.Append(x);

            if (item &lt; length)
                sb.Append("","");
        }

        return sb.ToString();
    }



    public static string Decrypt(string data)
    {
        var rsa = new RSACryptoServiceProvider();
        var dataArray = data.Split(new char[] { ',' });
        byte[] dataByte = new byte[dataArray.Length];
        for (int i = 0; i &lt; dataArray.Length; i++)
        {
            dataByte[i] = Convert.ToByte(dataArray[i]);
        }

        rsa.FromXmlString(privateKey);
        var decryptedByte = rsa.Decrypt(dataByte, false);
        return _encoder.GetString(decryptedByte);
    }
</code></pre>

<p>Is somebody have any idea what I am doing wrong? Why Web Service always returns me AuthenticateUserResponse{AuthenticateUserResult=false; }</p>
","<p>I think the problem here is may be to do with text encoding, rather than the encryption/decryption process itself. On the Java side, you're encrypting the UTF-8 encoded password, whereas on the .NET side, it's using <code>UnicodeEncoding</code> which is UTF-16. Try using UTF-16 on the Java side before encryption instead.</p>
","2826","<java><.net><encryption><rsa><public-key>","0","1","1","2014-04-21 15:20:16","23200246","2","3","","","","2014-04-18 05:37:44",""
"2149314","Do I need captcha public key and/or private key for localhost?","<p>I am developing locally with PHP on Xampp.</p>

<p>I am trying to use <a href=""http://recaptcha.net/"" rel=""nofollow noreferrer"">recaptcha</a>.</p>

<p>Do I need public and/or private key?</p>

<p>Thanks in advance.</p>
","<p>In order to use reCAPTCHA, you need <a href=""http://recaptcha.net/apidocs/captcha/client.html"" rel=""nofollow noreferrer"">a public/private API key <strong>pair</strong></a>.</p>

<p>Using the <a href=""http://recaptcha.net/plugins/php/"" rel=""nofollow noreferrer"">PHP Library</a>, to display the CAPTCHA:</p>

<pre><code>require_once('recaptchalib.php');
$publickey = ""...""; // you got this from the signup page
echo recaptcha_get_html($publickey);
</code></pre>

<p>and then to verify:</p>

<pre><code>require_once('recaptchalib.php');
$privatekey = ""..."";
$resp = recaptcha_check_answer ($privatekey,
                                $_SERVER[""REMOTE_ADDR""],
                                $_POST[""recaptcha_challenge_field""],
                                $_POST[""recaptcha_response_field""]);
</code></pre>
","2808","<php><recaptcha><public-key><private-key>","1","2","1","2010-01-27 19:29:12","2149331","0","","100754","","2010-01-27 18:25:48","2010-01-27 18:20:35",""
"21499897","git - how to clone my public repo while using my work account?","<p>I have a public repository (for my 'dot files') under my personal github username.</p>

<p>I am now using my work computer which is configured for my work account and I'm trying to clone my personal repo which is public.</p>

<p>When I try and clone I get</p>

<pre><code>$ git clone git@github.com:durrantm/setups-and-dotfiles.git
Cloning into 'setups-and-dotfiles'...
Warning: Permanently added the RSA host key for IP address '192.30.252.130' to the list of known hosts.
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>How can I clone it?  I thought the fact it was public would allow it.  Is it because my git config has my work account that I don't use at all on github? If so, what's the easier way to fix it?  I saw a post about creating a project specific git config but that didn't seem to apply as, catch-22, I can't actually clone the repository in the first place in order to then change it's config!  I guess I could rename my global config, change it, do the clone, bring back the old one, but that all seems like a crazy hack and I'd like to avoid that if possible.</p>
","<p>Could it be a firewall issue? Cloning via SSH requires egress on port 22.</p>
","2781","<git><github><clone><public-key>","1","0","4","2014-03-05 18:23:08","21499996","0","1","405017","","2014-03-05 18:23:08","2014-02-01 15:25:46",""
"21499897","git - how to clone my public repo while using my work account?","<p>I have a public repository (for my 'dot files') under my personal github username.</p>

<p>I am now using my work computer which is configured for my work account and I'm trying to clone my personal repo which is public.</p>

<p>When I try and clone I get</p>

<pre><code>$ git clone git@github.com:durrantm/setups-and-dotfiles.git
Cloning into 'setups-and-dotfiles'...
Warning: Permanently added the RSA host key for IP address '192.30.252.130' to the list of known hosts.
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>How can I clone it?  I thought the fact it was public would allow it.  Is it because my git config has my work account that I don't use at all on github? If so, what's the easier way to fix it?  I saw a post about creating a project specific git config but that didn't seem to apply as, catch-22, I can't actually clone the repository in the first place in order to then change it's config!  I guess I could rename my global config, change it, do the clone, bring back the old one, but that all seems like a crazy hack and I'd like to avoid that if possible.</p>
","<p>Use HTTP instead of SSH to clone:</p>

<pre><code>git clone https://github.com/durrantm/setups-and-dotfiles.git
</code></pre>
","2781","<git><github><clone><public-key>","1","4","4","2014-03-05 18:23:08","21499996","0","1","405017","","2014-03-05 18:23:08","2014-02-01 15:25:46",""
"21499897","git - how to clone my public repo while using my work account?","<p>I have a public repository (for my 'dot files') under my personal github username.</p>

<p>I am now using my work computer which is configured for my work account and I'm trying to clone my personal repo which is public.</p>

<p>When I try and clone I get</p>

<pre><code>$ git clone git@github.com:durrantm/setups-and-dotfiles.git
Cloning into 'setups-and-dotfiles'...
Warning: Permanently added the RSA host key for IP address '192.30.252.130' to the list of known hosts.
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>How can I clone it?  I thought the fact it was public would allow it.  Is it because my git config has my work account that I don't use at all on github? If so, what's the easier way to fix it?  I saw a post about creating a project specific git config but that didn't seem to apply as, catch-22, I can't actually clone the repository in the first place in order to then change it's config!  I guess I could rename my global config, change it, do the clone, bring back the old one, but that all seems like a crazy hack and I'd like to avoid that if possible.</p>
","<p>Protocol issue - I was using the one I usually use for private repo.</p>

<p>If I use the one for a public repository then it works and I don't need to switch accounts.<br>
This is what I was looking for.</p>

<p>Syntax:</p>

<pre><code>$ git clone git://github.com/durrantm/setups-and-dotfiles.git
</code></pre>
","2781","<git><github><clone><public-key>","1","0","4","2014-03-05 18:23:08","21499996","0","1","405017","","2014-03-05 18:23:08","2014-02-01 15:25:46",""
"21499897","git - how to clone my public repo while using my work account?","<p>I have a public repository (for my 'dot files') under my personal github username.</p>

<p>I am now using my work computer which is configured for my work account and I'm trying to clone my personal repo which is public.</p>

<p>When I try and clone I get</p>

<pre><code>$ git clone git@github.com:durrantm/setups-and-dotfiles.git
Cloning into 'setups-and-dotfiles'...
Warning: Permanently added the RSA host key for IP address '192.30.252.130' to the list of known hosts.
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>How can I clone it?  I thought the fact it was public would allow it.  Is it because my git config has my work account that I don't use at all on github? If so, what's the easier way to fix it?  I saw a post about creating a project specific git config but that didn't seem to apply as, catch-22, I can't actually clone the repository in the first place in order to then change it's config!  I guess I could rename my global config, change it, do the clone, bring back the old one, but that all seems like a crazy hack and I'd like to avoid that if possible.</p>
","<p>You have two choices: one is to use https or git instead of SSH to clone your repository. Or the other is to create an SSH key on your work machine add your it to your account. SSH access can't work without without a key, for unauthenticated access you need to one of the other protocols.</p>
","2781","<git><github><clone><public-key>","1","0","4","2014-03-05 18:23:08","21499996","0","1","405017","","2014-03-05 18:23:08","2014-02-01 15:25:46",""
"10970714","Adding Users to Gitolite, Permission Denied","<p>I have a Gitolite server running on EC2 that works pretty well. I've added users before and have no problem adding repositories.</p>

<p>My Macbook Pro can push code to a repository with no problem (it has the <code>RW+</code> permission on the repo). I've also added a second computer to the repository with <code>R</code> permissions so I can clone it.</p>

<p>The issue is, I keep getting ""Permission Denied (public key)"" when trying to clone the repo. When I SSH into the server with Gitolite and look at the user ""git""'s authorized_keys file, I <em>do</em> see the public key of the second computer, so I'm not sure what the problem is-- it looks like it is getting added just fine. The public key of the second computer is also located under <code>keydir</code> with the appropriate name (<code>raspberry.pub</code>)</p>

<p>Here's my gitolite conf, with some info changed to protect privacy:</p>

<pre><code>repo    statistics-app
        RW+     =   andrew
        R       =   raspberry
</code></pre>

<p>Note: ""andrew"" can push code and clone the repo just fine, but the user ""raspberry"" cannot. What's the issue?</p>
","<p>You should have, on your second computer, a <code>~/.ssh/config</code> file with:</p>

<pre><code>host gitolite-raspberry
     user git
     hostname raspberry
     identityfile ~/.ssh/raspberry
</code></pre>

<p>(See, for instance, ""<a href=""https://stackoverflow.com/questions/9630937/can-not-add-user-with-gitolite/9633439#9633439"">Can not add user with Gitolite</a>"")</p>

<p>You need to check if <code>ssh gitolite-raspberry</code> answers you with the Gitolite rights associated with the <code>raspberry</code> ssh account.</p>

<p>If not, <code>ssh -vvv gitolite-raspberry</code> will provide you with clues.</p>

<hr>

<p>The <a href=""https://stackoverflow.com/users/480033/andrew-m"">OP Andrew M</a> reports a right issue:</p>

<blockquote>
  <p><strong>I didn't set the permissions of the folder I was cloning into</strong>, so I ""sudoed"" the git command.<br>
  The root user on the Raspberry Pi wasn't allowed to clone, so it failed.</p>
</blockquote>
","2772","<linux><git><gitolite><public-key>","2","3","1","2012-06-10 18:02:48","10970929","0","","","","","2012-06-10 17:26:03",""
"5586325","c# RSA extract public key from private key","<p>Is there a way to extract public key from private key in c#? Becouse if i do <code>ToXMLString()</code> then i can set if i want public key information saved with the private key. So now im thinking that is there a way to extract public key from private?</p>
","<p>If you can save it, and include the private key, then what you're saving is not just the private key.</p>

<p>However, if you really do have only the private key, then no, you can't ""extract"" the public key from it. If you could do that, you would render most of todays security obsolete.</p>

<p>So basically, I don't believe you have only the private key, you have a key pair, and you should be able to extract the public key from that.</p>

<p>Whether that is easily doable in C# or .NET, I have no idea.</p>
","2771","<c#><rsa><public-key><private-key>","3","0","3","2011-04-07 19:34:29","5586512","2","","655134","","2011-04-07 19:34:29","2011-04-07 19:12:46",""
"5586325","c# RSA extract public key from private key","<p>Is there a way to extract public key from private key in c#? Becouse if i do <code>ToXMLString()</code> then i can set if i want public key information saved with the private key. So now im thinking that is there a way to extract public key from private?</p>
","<p>Take the modulus from the private key, and the public exponent is - most likely - 65537. All Microsoft cryptosystems I've seen so far produce public keys with that exponent. The combination of public exponent and modulus is the public key.</p>
","2771","<c#><rsa><public-key><private-key>","3","1","3","2011-04-07 19:34:29","5586512","2","","655134","","2011-04-07 19:34:29","2011-04-07 19:12:46",""
"5586325","c# RSA extract public key from private key","<p>Is there a way to extract public key from private key in c#? Becouse if i do <code>ToXMLString()</code> then i can set if i want public key information saved with the private key. So now im thinking that is there a way to extract public key from private?</p>
","<p>The normal private key format for RSA includes the public key (the ""public exponent"" is useful for implementation of private key operations in a way which resists timing attacks). Therefore, it is possible to extract the public key from the private key.</p>

<p>(It is theoretically possible to have a ""pure RSA private key"" which does NOT include the public exponent, but it has drawbacks, such as much harder protection against side-channel attacks, and reduced performance. Therefore nobody in their right mind does that. You can assume that when you have the private key you actually have the complete key pair.)</p>

<p>In the C#/.NET standard library, public and private RSA keys can be represented as XML strings (<code>ToXmlString()</code> and <code>FromXmlString()</code>) or a custom <code>RSAParameters</code> structure (<code>ExportParameters()</code> and <code>ImportParameters()</code>). If you can obtain the complete private key then you just have to pick the public fields (modulus and public exponent), which constitute together the public key. Note that <code>RSACryptoServiceProvider</code> may be an interface to an underlying RSA implementation which could refuse to export the private key (but will usually accept to export the public key).</p>
","2771","<c#><rsa><public-key><private-key>","3","2","3","2011-04-07 19:34:29","5586512","2","","655134","","2011-04-07 19:34:29","2011-04-07 19:12:46",""
"25441918","Can't DER encode and BER decode RSA public key","<p>I have problems using Crypto++ to save a RSA public key (that I obtained loading a private key file in PKCS#8 format). When decoding the key, I always get a <code>BERDecodeErr</code> exception.</p>

<p>Here is the code I am using:</p>

<pre class=""lang-cpp prettyprint-override""><code>CryptoPP::RSASSA_PKCS1v15_SHA_Signer   _signer;
CryptoPP::RSASSA_PKCS1v15_SHA_Verifier _verifier;
CryptoPP::ByteQueue                    bytes;

//_signer.AccessPublicKey().Save(bytes); // seem to save private key instead
_signer.AccessKey().DEREncodePublicKey(bytes);

//_verifier.AccessKey().Load(bytes);
//_verifier.AccessKey().BERDecodePublicKey(bytes, 0, 0);
_verifier.AccessPublicKey().Load(bytes);
</code></pre>

<p>I also tried with the instructions commented above, without success.</p>

<p>How do you do to save or open the public key?</p>

<p>The public key looks like this in hex format, is there a tool to check its format / validity (regarding what crypto++ supports) ?</p>

<pre><code>3081890281810097e24f2e95504a397e90fbc56d1b330ab2ab97a0d326007b890e40013f9e1d9bd9
f54b0c0840782ddae19b5b4595d8f8b9ffe0d2120174fcbc39585c5867cd2dfba69f8e540caa2c52
de8f08278a34e9249120500117f0ba756c5bb2be660013160db9f82f75deb7ccf63742a9e945da6c
cf30c2b109b73342daaabd02b872e50203010001
</code></pre>
","<p>I'm not sure I understand your problem completely. But you look like you are on the right track with using either <code>Load</code>/<code>Save</code> or <code>BERDecodePublicKey</code>/<code>DEREncodePublicKey</code>.</p>

<p>Here's how I would approach it given you have a PKCS#8 encoded private key.</p>

<pre class=""lang-cpp prettyprint-override""><code>FileSource privateKey(""&lt;private key&gt;"", true);
RSASSA_PKCS1v15_SHA_Signer signer;    
signer.AccessKey().Load(privateKey);

AutoSeededRandomPool prng;
bool valid = signer.AccessKey().Validate(prng, 3);
...

RSASSA_PKCS1v15_SHA_Verifier verifier(signer);
FileSink publicKey(""&lt;public key&gt;"", true);

verifier.AccessKey().Save(publicKey);
</code></pre>

<p>Then, you can use <a href=""https://www.cs.auckland.ac.nz/~pgut001/"" rel=""nofollow"">Gutmann's <code>dumpasn1</code></a> to print it:</p>

<pre><code>$ dumpasn1 &lt;public key&gt;
...
</code></pre>

<p>I believe you can also convert a private key/signer to a public key/verifier with:</p>

<pre class=""lang-cpp prettyprint-override""><code>RSASSA_PKCS1v15_SHA_Signer signer;
signer.AccessKey().Load(privateKey);

RSASSA_PKCS1v15_SHA_Verifier verifier;
signer.MakePublic(verifier);
</code></pre>

<p>There's also a page on the Crypto++ wiki that talks about it in greater detail: <a href=""http://www.cryptopp.com/wiki/Keys_and_Formats"" rel=""nofollow"">Keys and Formats</a>. And there's a page dedicated to PEM encoding, if interested: <a href=""http://www.cryptopp.com/wiki/PEM_Pack"" rel=""nofollow"">PEM Pack</a>. If you want the PEM encoding, you have to compile the library yourself, though.</p>

<hr>

<p>Here's the code I used with the public key you posted. It had no problems.</p>

<pre class=""lang-cpp prettyprint-override""><code>string key = ""3081890281810097e24f2e95504a397e90fbc56d1b330ab2ab97a0d326007b890e40013f9e1d9bd9 \
    f54b0c0840782ddae19b5b4595d8f8b9ffe0d2120174fcbc39585c5867cd2dfba69f8e540caa2c52 \
    de8f08278a34e9249120500117f0ba756c5bb2be660013160db9f82f75deb7ccf63742a9e945da6c \
    cf30c2b109b73342daaabd02b872e50203010001"";

ByteQueue queue;
StringSource ss(key, true, new HexDecoder(new Redirector(queue)));

RSASSA_PKCS1v15_SHA_Verifier verifier;
verifier.AccessKey().BERDecodePublicKey(queue, false, 0);

AutoSeededRandomPool prng;
bool result = verifier.AccessKey().Validate(prng, 3);
if(!result)
    throw Exception(Exception::OTHER_ERROR, ""Failed to validate public key"");
</code></pre>

<hr>

<p>If you install the <a href=""http://www.cryptopp.com/wiki/PEM_Pack"" rel=""nofollow"">PEM Pack</a> then you can add the following:</p>

<pre class=""lang-cpp prettyprint-override""><code>FileSink sink(""public-key.pem"", true);
PEM_Save(sink, verifier.GetKey());
</code></pre>

<p>That will get you:</p>

<pre class=""lang-bash prettyprint-override""><code>$ cat public-key.pem 
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCX4k8ulVBKOX6Q+8VtGzMKsquX
oNMmAHuJDkABP54dm9n1SwwIQHgt2uGbW0WV2Pi5/+DSEgF0/Lw5WFxYZ80t+6af
jlQMqixS3o8IJ4o06SSRIFABF/C6dWxbsr5mABMWDbn4L3Xet8z2N0Kp6UXabM8w
wrEJtzNC2qq9Arhy5QIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>And:</p>

<pre class=""lang-bash prettyprint-override""><code>$ openssl rsa -in public-key.pem -pubin -text -noout
Public-Key: (1024 bit)
Modulus:
    00:97:e2:4f:2e:95:50:4a:39:7e:90:fb:c5:6d:1b:
    33:0a:b2:ab:97:a0:d3:26:00:7b:89:0e:40:01:3f:
    9e:1d:9b:d9:f5:4b:0c:08:40:78:2d:da:e1:9b:5b:
    45:95:d8:f8:b9:ff:e0:d2:12:01:74:fc:bc:39:58:
    5c:58:67:cd:2d:fb:a6:9f:8e:54:0c:aa:2c:52:de:
    8f:08:27:8a:34:e9:24:91:20:50:01:17:f0:ba:75:
    6c:5b:b2:be:66:00:13:16:0d:b9:f8:2f:75:de:b7:
    cc:f6:37:42:a9:e9:45:da:6c:cf:30:c2:b1:09:b7:
    33:42:da:aa:bd:02:b8:72:e5
Exponent: 65537 (0x10001)
</code></pre>

<hr>

<p>Finally, the difference between:</p>

<ul>
<li><code>verifier.AccessKey()</code>: gets the <code>RSA::Public</code> key, the key is non-const</li>
<li><code>verifier.GetKey()</code>: gets the <code>RSA::Public</code> key, the key is const</li>
</ul>
","2708","<public-key><crypto++><der><ber>","1","1","1","2014-08-23 10:54:40","25460803","2","","608639","","2014-08-23 10:53:59","2014-08-22 07:39:52",""
"1915797","Simple use of RSACryptoServiceProvider KeyPassword fails","<p>I want to protect my RSA private key with a password (who wouldn't) but the following C# fails: </p>

<pre><code>SecureString pw = new SecureString();
pw.AppendChar('x');
CspParameters prms = new CspParameters();
prms.KeyPassword = pw;
RSACryptoServiceProvider crypto = new RSACryptoServiceProvider(prms);
byte[] encrypted = crypto.Encrypt(Encoding.ASCII.GetBytes(""encryptme""), true);
</code></pre>

<p>...with the CryptographicException: ""Invalid type specified"". If I take the KeyPassword assignment out it works fine.</p>

<p>What am I, or Microsoft, doing wrong?</p>
","<p>Setting <code>CspParameters.KeyPassword</code> is equivalent to calling <code>CryptSetProvParam</code> with <code>PP_KEYEXCHANGE_PIN</code> (or <code>PP_SIGNATURE_PIN</code>). This flag is not supported by the default Microsoft crypto-service-provider (it is intended for use with smartcard-based CSPs).</p>

<p>You might want to try setting </p>

<pre><code>prms.Flags = CspProviderFlags.UseUserProtectedKey;
</code></pre>

<p>or alternatively generating a non-persistent key-pair, exporting it and encrypting it with a key derived from a password yourself.</p>
","2706","<c#><.net><encryption><rsa><public-key>","2","1","1","2012-02-27 12:33:45","1917181","0","","","","","2009-12-16 16:21:35",""
"51059782","How to Calculate Fingerprint From SSH RSA Public Key in Java?","<p>As title, How to Calculate Fingerprint From SSH RSA Public Key in Java?
I got an rsaPublicKey object from sample.pub and I calculated the fingerprint by using library Apache Commons Codec
<code>
DigestUtils.sha256Hex(rsaPublicKey.getEncoded());
</code>
But I got a different fingerprint when using ssh-keygen command
<code>
ssh-keygen -E sha256 -lf sample.pub
</code>
sample.pub as below
<code>
ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAsuVPKUpLYSCNVIHD+e6u81IUznkDoiOvn/t56DRcutRc4OrNsZZ+Lmq49T4JCxUSmaT8PeLGS/IC946CNQzFwMh++sVoc19UUkZtRaDgiYn+HkYk8VW4IFI1dKfXomKSbX/lB+ohzLzXLVP2/UJgfBmdaE10k+6b+/Yd8YGXIeS8/Z9zToHPo0ORNSGIolgq3xMXUtfAOK/0KC6IFc/FuvuOSAG1UWup91bcm5GSXv4BWWjgFtOxCLIknYjsDah4qfrP8Olp5eUDhn/65xRcZsmRXoYe1ylhlSjJoPDFWXVs9npwqQmi3JaZtgg7xJxMu1ZcdpYxoj280zM9/6w1Lw==
</code></p>
","<p>Your main problem is that the <strong>XDR-style encoding</strong> used by SSH for publickey, which OpenSSH uses to compute the fingerprint, is not the same as the encoding used by Java crypto, which is an ASN.1 DER format defined by X.509 formally called <code>SubjectPublicKeyInfo</code>. In fact I'm very surprised you were able to read an OpenSSH <code>.pub</code> file in Java; there is no direct way to do so. See numerous existing Qs on this at <a href=""https://stackoverflow.com/questions/46870569/ssh-keygen-and-openssl-gives-two-different-public-keys"">ssh-keygen and openssl gives two different public keys</a> (disclosure: mine) but on a quick check I don't think any of them are Java so you'll need to do something like:</p>

<pre><code>byte[] n = rsapubkey.getModulus().toByteArray(); // Java is 2sC bigendian
byte[] e = rsapubkey.getPublicExponent().toByteArray(); // and so is SSH
byte[] tag = ""ssh-rsa"".getBytes(); // charset very rarely matters here
ByteArrayOutputStream os = new ByteArrayOutputStream();
DataOutputStream do = new DataOutputStream(os);
do.writeInt(tag.length); do.write(tag);
do.writeInt(e.length); do.write(e);
do.writeInt(n.length); do.write(n);
byte[] encoded = os.toByteArray();
// now hash that (you don't really need Apache) 
// assuming SHA256-base64 (see below)
MessageDigest digest = MessageDigest.getInstance(""SHA256"");
byte[] result = digest.digest(encoded);
String output = Base64.getEncoder().encodeToString(result);
</code></pre>

<p>(Aside: Thanks linc01n for catching the bug -- I try to always compile before posting and I'm not sure how I missed this one.) </p>

<p>The second problem is that <strong>OpenSSH</strong> has never displayed SHA256 fingerprints in hex. It originally used <em>MD5</em> fingerprints in hex with colons; in 6.8 it switched by default to <strong>SHA256 in base64</strong> (using the traditional alphabet not the 'URLsafe' one preferred by JSON) although you can still get the older form (in <code>ssh</code> use <code>-oFingerprintHash=md5</code> or the equivalent config setting; in <code>ssh-keygen -l</code> use <code>-E md5</code>). Determine which one(s?) you want and code accordingly.</p>

<p>Or, if you have the <code>.pub</code> file, just read the second space-separated field of the one line, convert from base64 to <code>byte[]</code>, hash that, and display.</p>
","2689","<java><ssh-keys><public-key><java-security><rsa-key-fingerprint>","3","6","1","2018-10-12 22:47:40","51061419","2","1","8180974","","2018-06-27 12:41:09","2018-06-27 09:57:14",""
"21052881","Connect Nitrous.io to Bitbucket Git SSH Public Key","<p>I can't connect my Bitbucket git repos to Nitrous.io. Here is the error I get:</p>

<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights and the repository exists.
</code></pre>

<p>At first I thought you had to have your computer's public key in Nitrous and Bitbucket to connect them, but that doesn't work. What am I missing?</p>
","<p>All you have to do is:</p>

<p>Go to your nitrous box (IDE or Terminal), and run this:</p>

<pre><code>cat ~/.ssh/id_rsa.pub
</code></pre>

<p>which will display the <em>Nitrous</em> SSH public key (not your computer's public key, but the one for that box).</p>

<p>Go to Bitbucket > My Account > SSH Keys and paste the Nitrous key in. Be sure to name it Nitrous or something like that so you know what key it is later. Then your repos will connect just fine.</p>
","2680","<git><ssh><bitbucket><public-key><nitrousio>","9","23","1","2014-01-10 19:33:05","21052882","0","7","","","","2014-01-10 19:33:05",""
"20598126","how to generate public and private key in PEM format","<p>I need to generating a RSA and DSA key pair (public and private key) in PEM format using java.
I want the public and private key files to be opened with this format:</p>

<blockquote>
  <p>-----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAryQICCl6NZ5gDKrnSztO
  3Hy8PEUcuyvg/ikC+VcIo2SFFSf18a3IMYldIugqqqZCs4/4uVW3sbdLs/6PfgdX
  7O9D22ZiFWHPYA2k2N744MNiCD1UE+tJyllUhSblK48bn+v1oZHCM0nYQ2NqUkvS
  j+hwUU3RiWl7x3D2s9wSdNt7XUtW05a/FXehsPSiJfKvHJJnGOX0BgTvkLnkAOTd
  OrUZ/wK69Dzu4IvrN4vs9Nes8vbwPa/ddZEzGR0cQMt0JBkhk9kU/qwqUseP1QRJ
  5I1jR4g8aYPL/ke9K35PxZWuDp3U0UPAZ3PjFAh+5T+fc7gzCs9dPzSHloruU+gl
  FQIDAQAB
  -----END PUBLIC KEY-----</p>
</blockquote>

<p>My public key is already generated before with this format that i do not want it:</p>

<blockquote>
  <p>0Ÿ0   *†H†÷ 0Ÿ0   *†H†÷</p>
</blockquote>

<p>ok, this is my code of key generation:</p>

<pre><code>private static void createKey()
        throws Exception {

            Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            System.out.print(""Password to encrypt the private key: "");
            String password = in.readLine();
            System.out.println(""Generating an RSA keypair..."");

            // Create an RSA key
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""RSA"");
            keyPairGenerator.initialize(1024);
            KeyPair keyPair = keyPairGenerator.genKeyPair();

            System.out.println(""Done generating the keypair.\n"");

            // Now we need to write the public key out to a file
            System.out.print(""Public key filename: "");
            String publicKeyFilename = ""C:/Users/Joe/Desktop/"" + in.readLine();

            // Get the encoded form of the public key so we can
            // use it again in the future. This is X.509 by default.
            byte[] publicKeyBytes = keyPair.getPublic().getEncoded();

            // Write the encoded public key out to the filesystem
            FileOutputStream fos = new FileOutputStream(publicKeyFilename);
            fos.write(publicKeyBytes);
            fos.close();

            // Now we need to do the same thing with the private key,
            // but we need to password encrypt it as well.
            System.out.print(""Private key filename: "");
            String privateKeyFilename = ""C:/Users/Joe/Desktop/"" + in.readLine();

            // Get the encoded form. This is PKCS#8 by default.
            byte[] privateKeyBytes = keyPair.getPrivate().getEncoded();

            // Here we actually encrypt the private key
            byte[] encryptedPrivateKeyBytes =
            passwordEncrypt(password.toCharArray(),privateKeyBytes);

            fos = new FileOutputStream(privateKeyFilename);
            fos.write(encryptedPrivateKeyBytes);
            fos.close();
        }
</code></pre>

<p>thank you for your help..</p>
","<p>Maybe a bit late but there is my solution. Hope it helps others.</p>

<pre><code>byte[] publicKeyBytes = keyPair.getPublic().getEncoded();
</code></pre>

<p>Here you're taking bytes of key and writing directly to file. So you get the appropriate result - DER-encoded file. However PEM is Base64 encoded format with line breaks each 64 symbols and header/footer.</p>

<p>There is code implementing this logic:</p>

<pre><code>String publicKeyContent = Base64.encode(publicKeyBytes);
String publicKeyFormatted = ""-----BEGIN PUBLIC KEY-----"" + System.lineSeparator();
for (final String row: 
        Splitter
            .fixedLength(64)
            .split(publicKeyContent)
    ) 
{
    publicKeyFormatted += row + System.lineSeparator();
}
publicKeyFormatted += ""-----END PUBLIC KEY-----"";
</code></pre>

<p>So publicKeyFormatted will contain PEM-encoded string of public key.</p>

<p>P.S. Splitter is a class provided in Guava lib, but you can split the string with a simple cycle or somehow.</p>
","2647","<java><rsa><public-key><pem><dsa>","3","1","1","2018-05-29 10:55:15","","6","1","3077162","","2013-12-15 18:47:22","2013-12-15 18:32:13",""
"34128055","How to get key fingerprint for SFTP from private key?","<p>As I am working on a .NET C# project which uses WinSCP .NET assembly, for SFTP password less connection. By far I have made an UI where we have to provide SSH key fingerprint, paraphrase, and path of <code>.ppk</code> file.</p>

<p>My question is that, is there any way to get ""SSH key fingerprint"" automatically through code, if the user gives its <code>.ppk</code> file path only? </p>
","<p>The <code>.ppk</code> is a key pair of your account and you specify that using the <a href=""https://winscp.net/eng/docs/library_sessionoptions#sshprivatekeypath"" rel=""nofollow noreferrer""><code>SessionOptions.SshPrivateKeyPath</code></a>.</p>

<p>While the host key for <a href=""https://winscp.net/eng/docs/library_sessionoptions#sshhostkeyfingerprint"" rel=""nofollow noreferrer""><code>SessionOptions.SshHostKeyFingerprint</code></a> is for key pair of the server (= host). It's not a public key of your key pair.</p>

<p>These key pairs have nothing in common. You cannot extract one from another.</p>

<p>For details, see <a href=""https://winscp.net/eng/docs/ssh_keys"" rel=""nofollow noreferrer"">Understanding SSH key pairs</a>.</p>

<p>See also <a href=""https://winscp.net/eng/docs/faq_hostkey"" rel=""nofollow noreferrer"">Where do I get SSH host key fingerprint to authorize the server?</a></p>

<hr>

<p>If you want to allow the user to verify the host key manually, use the <a href=""https://winscp.net/eng/docs/library_session_scanfingerprint"" rel=""nofollow noreferrer""><code>Session.ScanFingerprint</code> method</a> to retrieve the fingerprint for verification. Once verified, assign the verified fingerprint to the <code>SessionOptions.SshHostKeyFingerprint</code>. </p>

<p>For an example, see <a href=""https://winscp.net/eng/docs/library_example_known_hosts"" rel=""nofollow noreferrer"">Implementing SSH host key cache (known hosts)</a>.</p>
","2634","<.net><sftp><public-key><winscp><winscp-net>","2","4","1","2018-06-05 09:42:43","34129601","0","2","850848","","2015-12-07 08:52:52","2015-12-07 06:59:24",""
"12545124","Two private key asymmetric encryption - possible?","<p>I am wondering if there exists some asymmetric encryption algorithm that would work with two different private keys, so that the encrypted message can be decrypted by either one of such private keys?</p>
","<p>There is no such algorithm as far as I know, but there is a common solution. The enciphered text is transferred together with a set of cryptograms of the symmetric key used to encipher the text itself. Each such cryptogram of the key is a result of enciphering the original key with the public key of one of recipients. Thus, all recipients knowing their private keys may decipher the key used to encipher the data and then decipher the message itself. </p>
","2626","<encryption><public-key-encryption><private-key><public-key><encryption-asymmetric>","8","2","4","2014-02-25 14:55:33","12546292","0","2","15168","","2012-09-22 21:19:23","2012-09-22 15:32:24",""
"12545124","Two private key asymmetric encryption - possible?","<p>I am wondering if there exists some asymmetric encryption algorithm that would work with two different private keys, so that the encrypted message can be decrypted by either one of such private keys?</p>
","<p>Typically a hybrid encryptions scheme is used. I.e. the message is encrypted with a symmetric key cryptosytem, then the symmetric keys are encrypted with the public keys of each of the intended receivers. </p>
","2626","<encryption><public-key-encryption><private-key><public-key><encryption-asymmetric>","8","1","4","2014-02-25 14:55:33","12546292","0","2","15168","","2012-09-22 21:19:23","2012-09-22 15:32:24",""
"12545124","Two private key asymmetric encryption - possible?","<p>I am wondering if there exists some asymmetric encryption algorithm that would work with two different private keys, so that the encrypted message can be decrypted by either one of such private keys?</p>
","<p>You could use a symmetric encryption and secret sharing scheme on top of that, ""splitting the key in half"".</p>

<p>More on secret sharing: <a href=""http://en.wikipedia.org/wiki/Secret_sharing"" rel=""nofollow"">http://en.wikipedia.org/wiki/Secret_sharing</a></p>

<p>Steps on how I see it:</p>

<ol>
<li>Encrypt the data using (pseudo) randomly generated key.</li>
<li>Distribute the secret using <a href=""http://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing"" rel=""nofollow"">Shamir's secret sharing</a> which is the key to two shares, where as one share will suffice to get the key.</li>
</ol>

<p>The end result is that one (or more) ""keys"" are required to get the data.</p>
","2626","<encryption><public-key-encryption><private-key><public-key><encryption-asymmetric>","8","3","4","2014-02-25 14:55:33","12546292","0","2","15168","","2012-09-22 21:19:23","2012-09-22 15:32:24",""
"12545124","Two private key asymmetric encryption - possible?","<p>I am wondering if there exists some asymmetric encryption algorithm that would work with two different private keys, so that the encrypted message can be decrypted by either one of such private keys?</p>
","<p>Asymmetric keys are never used for encrypting <em>messages</em> (too slow, has a size limit, etc.), only for encrypting small buffers, like symmetric keys for messages. </p>

<p>When you encrypt a message with an asymm. key, you are in fact encrypting a <em>symmetric</em> key which encrypts the message. </p>

<p>Simply encrypt the same symmetric key with two different asymm. keys and you'd get two different cipherblocks which both contain the same symmetric key for the message, so you can decrypt with either one.</p>
","2626","<encryption><public-key-encryption><private-key><public-key><encryption-asymmetric>","8","11","4","2014-02-25 14:55:33","12546292","0","2","15168","","2012-09-22 21:19:23","2012-09-22 15:32:24",""
"10594080","Failure to verify openssl signatures in PHP","<p>If I use openssl to create a new key pair, use the private key to sign some data, and use the public key to verify the signature... it works.</p>

<pre><code>$ openssl genrsa -out mykey.pem 1024
$ openssl rsa -in mykey.pem -pubout &gt; mypubkey.pem
$ echo 'It could be bunnies' &gt; file.txt
$ openssl rsautl -sign -in file.txt -inkey mykey.pem -out sig.txt
$ openssl rsautl -verify -in sig.txt -inkey mypubkey.pem -pubin
It could be bunnies
</code></pre>

<p>However, if I try to verify the signature using the openssl library in php it fails.</p>

<pre><code>$pubkey = openssl_pkey_get_public(file_get_contents('/var/key/mypubkey.pem')); 
$sig = file_get_contents('/var/key/sig.txt');
$data = file_get_contents('/var/key/file.txt');
$verifyResult = (openssl_verify($data, $sig, $pubkey) == 1);
</code></pre>

<p>Similar story with Crypt_RSA</p>

<pre><code>$pubkey = file_get_contents('/var/test/mypubkey.pem');
$sig = file_get_contents('/var/test/sig.txt');
$data = file_get_contents('/var/test/file.txt');
$rsa = new Crypt_RSA();
$rsa-&gt;loadKey($pubkey);
$rsa-&gt;verify($data, $sig);
$verifyResult = $rsa-&gt;verify($data, $sig);
</code></pre>

<p>How do I get php to play nicely? These examples are simplified but accurate to my needs. In the real world I will only have the data, signature, and public key...</p>
","<p>I was really hoping someone would chime in with a definitive answer on the public key question. Seems like it should work. However, in the meantime, I've switched from a public key to a self-signed certificate. The openssl library in PHP seems happy with extracting an acceptable public key from that. Which means the real problem (verifying signed data) is solved for me. Server clients will now have the data, signature, and x.509 certificate.</p>

<p>Here are the code snippet(s).</p>

<pre><code>$ openssl genrsa -out server.key 4096
$ openssl req -new -key server.key -out server.csr
$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
$ openssl dgst -sha1 -sign server.key -out file.sha1 file.txt
</code></pre>

<p>...</p>

<pre><code>$pubkey = openssl_pkey_get_public(file_get_contents('/var/key/server.crt')); 
$sig = file_get_contents('/var/key/file.sha1');
$data = file_get_contents('/var/key/file.txt');
$verifyResult = (openssl_verify($data, $sig, $pubkey) == 1);
</code></pre>
","2615","<php><openssl><digital-signature><public-key>","2","2","2","2012-05-15 16:04:27","10604644","0","1","","","","2012-05-15 04:17:53",""
"10594080","Failure to verify openssl signatures in PHP","<p>If I use openssl to create a new key pair, use the private key to sign some data, and use the public key to verify the signature... it works.</p>

<pre><code>$ openssl genrsa -out mykey.pem 1024
$ openssl rsa -in mykey.pem -pubout &gt; mypubkey.pem
$ echo 'It could be bunnies' &gt; file.txt
$ openssl rsautl -sign -in file.txt -inkey mykey.pem -out sig.txt
$ openssl rsautl -verify -in sig.txt -inkey mypubkey.pem -pubin
It could be bunnies
</code></pre>

<p>However, if I try to verify the signature using the openssl library in php it fails.</p>

<pre><code>$pubkey = openssl_pkey_get_public(file_get_contents('/var/key/mypubkey.pem')); 
$sig = file_get_contents('/var/key/sig.txt');
$data = file_get_contents('/var/key/file.txt');
$verifyResult = (openssl_verify($data, $sig, $pubkey) == 1);
</code></pre>

<p>Similar story with Crypt_RSA</p>

<pre><code>$pubkey = file_get_contents('/var/test/mypubkey.pem');
$sig = file_get_contents('/var/test/sig.txt');
$data = file_get_contents('/var/test/file.txt');
$rsa = new Crypt_RSA();
$rsa-&gt;loadKey($pubkey);
$rsa-&gt;verify($data, $sig);
$verifyResult = $rsa-&gt;verify($data, $sig);
</code></pre>

<p>How do I get php to play nicely? These examples are simplified but accurate to my needs. In the real world I will only have the data, signature, and public key...</p>
","<p>For phpseclib, try $rsa->setSignatureMode(CRYPT_RSA_SIGNATURE_PKCS1) before calling $rsa->verify().</p>
","2615","<php><openssl><digital-signature><public-key>","2","1","2","2012-05-15 16:04:27","10604644","0","1","","","","2012-05-15 04:17:53",""
"13795615","Keychain Assistant does not create public/private key pair, and my distribution certificates fail codesign verification","<p>My certificates were expiring today (and at this point, it's totally expired), so I set out to renew the certificates. But the problem is, I can't get matching private/public keys for proper code-signing verification with the renewed certificates.  All I've read says keychain will automatically create matching public/private keys, but it's not doing it for me.  I am totally stumped and I don't know what I can do at this point.  Please help.  Here's what I've done so far:</p>

<p>1)  I revoked the certificates from Apple Developer > iOS Provisioning Portal > Certificates > Developer and Distribution tabs.</p>

<p>2)  I launched Keychain Access.app from Applications > Utilities.</p>

<p>3)  I removed all outdated certificates, and eventually removed everything except for Apple Code Signing Certification Authority, Apple Worldwide Developer Relations Certification Authority, Dashboard Advisory and Software Signing.  (By the way, I have no idea what this ""Software Signing"" certificate is for, but it won't be expiring until 2015, I'm reluctant to delete it without knowing what it would do to the system if I deleted it.)</p>

<p>4)  I generated CertificateSigningRequest.certSigningRequest via Keychain Access > Certificate Assistant > Request a Certificate From a Certificate Authority</p>

<p>5)  Got the CertificateSigningRequest.certSigningRequest on desktop.  (At this point, I check the Keychain, and I still don't see my private or public keys.</p>

<p>6)  I submit the CertificateSigningRequest.certSigningRequest at Apple Developer > iOS Provisioning Portal > Certificates > Developer and Distribution tabs.</p>

<p>7)  I download the certificates, install them to keychain, and it looks like my certificates are now renewed for another year.</p>

<p>8)  I renew all provisioning profiles.</p>

<p>9)  I retrieve them to my Xcode.</p>

<p>10)  I generate new distribution build, then I get the warning that ""Application failed codesign verification.  The signature was invalid, contains disallowed entitlements, or it was not signed with an iPhone Distribution Certificate.""</p>

<p>11)  I look at the Keychain again, and I don't see my private or public keys. </p>

<p>12)  Well, I exported p12 file a year ago.  So, okay, I start all over again (i.e., take the steps 1, 2 and 3.)  Then I import the p12 file.  Now I see my private key in my Keychain.</p>

<p>13)  I then resume with step 4 above (i.e., get the CertificateSigningRequest.certSigningRequest via Keychain Access > Certificate Assistant > Request a Certificate From a Certificate Authority)</p>

<p>14)  I continue on with steps 5 through 8.  Just to make sure, I reboot my machine again.  Then I check my Keychain, and public key is still missing, and taking steps 9 and 10 results exactly the same.</p>

<p>What am I doing wrong?  What should I do to fix this problem?  I'd so appreciate any and all help.</p>

<hr>

<p>EDIT:  I'm not entirely sure which steps I took actually ended up fixing this, but I got it working now. Main thing was, deleting everything from keychain and look for possible cause all over the web, and and I did read this thread too:</p>

<p><a href=""http://hints.macworld.com/article.php?story=20060318124936642"" rel=""nofollow"">http://hints.macworld.com/article.php?story=20060318124936642</a></p>

<p>And run these commands:</p>

<p>sudo systemkeychain -vfcC</p>

<p>systemkeychain -vt</p>

<p>I also continued to look for how to repair keychain, run disk utility, repairing any and all permission issues, etc.</p>

<p>And eventually, my keychain access app started working as expected again, and it finally generated both private and public keys.  Ahhhh.  Once it did that, everything else worked fine, doing the steps I took earlier.</p>
","","2586","<keychain><private-key><public-key>","1","","0","2012-12-10 20:13:05","","0","2","1804179","","2012-12-10 20:13:05","2012-12-10 05:39:59",""
"12415613","Generating public and private key pairs in c# and saving public key as plain text","<p>I need to implement encryption between a C# application and a micro controller (pic32mx795). The issue I'm having is generating a public and private key pair I'm using RSACryptoServiceProvider, but I can only get the key attributes and not the complete public key.</p>

<pre><code>RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
RSAParameters RSAKeyInfo = RSA.ExportParameters(false);
</code></pre>

<p>I'm unable to supply the micro controller with the key parameters as it only takes the key (as bytes). There is a library that will be able to do this, but it will only be available sometime in November 2012 (<a href=""http://www.microchipdirect.com/productsearch.aspx?Keywords=SW300055"" rel=""nofollow noreferrer"">SW300055</a>). I am using the SW300052 library to perform encryption on the micro-controller (key size is limited to 256 bits).</p>

<p>I've also tried bouncycastle suggestion in this thread (<a href=""https://stackoverflow.com/questions/6531054/generate-public-private-key-pair-and-show-them-in-textbox-in-asp-net"">generating keys and showing them in a text box)</a>. It saves the keys in a PEM format. From what I understand the keys are saved in a base64 format. I've specified the key length to be 256 bits but when converting the public key back to bytes, it is 62 bytes.</p>

<pre><code>byte[] encodedDataAsBytes = Convert.FromBase64String (publicKeyString);
</code></pre>

<p>I've also looked at Microsoft's Strong Name tool (sn.exe), but the minimum key size it supports is 384 bits.</p>

<p>Is there any way that I can generate a public private key pair and get the public key in plain text/bytes using c# (or with any other tool)? Am I just better off using symmetric key encryption to encrypt a session key?</p>
","<p>You can set up a <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa376539%28v=vs.85%29.aspx"" rel=""nofollow"">certificate server</a> on a windows box and request them directly. You'll need to install MS certificate services.
You can also use <a href=""http://msdn.microsoft.com/en-us/library/bfsktky3.aspx"" rel=""nofollow"">makecert</a> and access the key with <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.publickey.aspx"" rel=""nofollow"">c#</a>.</p>

<p>Or you could <a href=""http://msdn.microsoft.com/en-us/library/5e9ft273.aspx"" rel=""nofollow"">generate the keypair programmatically</a>.</p>
","2586","<encryption><private-key><public-key><plaintext><rsacryptoserviceprovider>","4","0","1","2012-09-14 09:16:42","","0","","-1","","2017-05-23 12:06:07","2012-09-13 22:21:50",""
"4833289","How to setup multiple ssh identities for single hg repository?","<p>I am using ssh publickey authentication for my mercurial repository.  So I have:</p>

<pre><code>[ui]
ssh = ssh -i ~/.ssh/id_rsa -C 
</code></pre>

<p>in my .hgrc.  This works fine and allows me to push/pull to an ssh-authenticated repo.  However, I want to be able to push/pull to another repo that requires a different identity.  How can I configure my .hgrc file so the identity is tied to a particular path.  I guess I'd want something like:</p>

<pre><code>[ui]
one.prefix = someserver.com
one.ssh = ssh -i ~/.ssh/id_rsa -C
two.prefix = otherserver.com
two.ssh = ssh -i ~/.ssh/otherid_rsa -C
</code></pre>
","<p>You do it using ssh's own tool: ssh-agent.</p>

<pre><code>$ eval $(ssh-agent)
$ ssh-add ~/.ssh/id_rsa
$ ssh-add ~/.ssh/otherid_rsa
</code></pre>

<p>Then you don't need ssh identify related anything in your <code>.hgrc</code>'s <code>[ui]</code> section at all.</p>

<p>Alternately you could do:</p>

<pre><code>[ui]
ssh = ssh -i ~/.ssh/id_rsa -i ~/.ssh/otherid_rsa -C
</code></pre>

<p>but ssh-agent is useful in so many way's it's worth putting it your login scripts and calling it a day.</p>
","2547","<mercurial><ssh><public-key>","5","3","2","2014-12-11 20:47:18","","0","4","","","","2011-01-28 21:37:33",""
"4833289","How to setup multiple ssh identities for single hg repository?","<p>I am using ssh publickey authentication for my mercurial repository.  So I have:</p>

<pre><code>[ui]
ssh = ssh -i ~/.ssh/id_rsa -C 
</code></pre>

<p>in my .hgrc.  This works fine and allows me to push/pull to an ssh-authenticated repo.  However, I want to be able to push/pull to another repo that requires a different identity.  How can I configure my .hgrc file so the identity is tied to a particular path.  I guess I'd want something like:</p>

<pre><code>[ui]
one.prefix = someserver.com
one.ssh = ssh -i ~/.ssh/id_rsa -C
two.prefix = otherserver.com
two.ssh = ssh -i ~/.ssh/otherid_rsa -C
</code></pre>
","<p>In your <code>~/.ssh/config</code>, add</p>

<pre><code>Host someserver.com
IdentityFile ~/.ssh/id_rsa

Host otherserver.com
IdentityFile ~/.ssh/otherid_rsa
</code></pre>

<p>and anybody (including <code>hg</code> and interactive use) using <code>ssh</code> to connect to hosts <code>someserver.com</code> or <code>otherserver.com</code> will use the specified identity files.</p>

<p>See <a href=""http://www.openbsd.org/cgi-bin/man.cgi?query=ssh_config&amp;sektion=5"" rel=""noreferrer""><code>ssh_config</code></a> for other options.</p>
","2547","<mercurial><ssh><public-key>","5","8","2","2014-12-11 20:47:18","","0","4","","","","2011-01-28 21:37:33",""
"45464949","PublicKey from PEM file on android, java","<p>Basically I'm trying to verify signature which using openssl looks like this:</p>

<pre><code>openssl dgst -sha256 -verify prime192v1-pub-v1.pem -signature signatureFile.bin &lt; dataFile.bin
</code></pre>

<p>... and in order to do that on android I need to create <code>PublicKey</code> object. The method that I'm using throws <code>java.security.spec.InvalidKeySpecException: Unexpected key type</code> at line <code>kf.generatePublic(new X509EncodedKeySpec(encoded))</code>.</p>

<pre><code>import org.spongycastle.util.encoders.Base64;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;

public class SO {

    public static PublicKey getPublicKeyFromString(String key) throws IOException, GeneralSecurityException {
        String publicKeyPEM = key;
        publicKeyPEM = publicKeyPEM.replace(""-----BEGIN PUBLIC KEY-----\n"", """");
        publicKeyPEM = publicKeyPEM.replace(""-----END PUBLIC KEY-----"", """");
        byte[] encoded = Base64.decode(publicKeyPEM);
        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        return kf.generatePublic(new X509EncodedKeySpec(encoded));
    }

}
</code></pre>

<p>This is how I call the method:</p>

<pre><code>    SO.getPublicKeyFromString(
            ""-----BEGIN PUBLIC KEY-----\n"" +
            ""MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEXMHnQfWiM4oCaLfx296llgz7iaVv\n"" +
            ""avMPppkzVNZAxtlNLhFlXnNWD0Mw9yzP8/Go\n"" +
            ""-----END PUBLIC KEY-----""
    );
</code></pre>

<p>Anyone knows what I'm doing wrong?</p>
","<p>I got it working. The public key is elliptic curve (p192) public key and it should be loaded differently. Having <code>PublicKey</code> I was able to verify signature the same way as using openssl command.</p>

<pre><code>import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.io.Reader;
import java.io.StringReader;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.Security;
import java.security.Signature;
import java.security.spec.X509EncodedKeySpec;

public class SO {

    public PublicKey getPublicKey() throws Exception {
        Security.addProvider(new BouncyCastleProvider());
        Reader rdr = new StringReader(
                ""-----BEGIN PUBLIC KEY-----\n"" +
                        ""MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEXMHnQfWiM4oCaLfx296llgz7iaVv\n"" +
                        ""avMPppkzVNZAxtlNLhFlXnNWD0Mw9yzP8/Go\n"" +
                        ""-----END PUBLIC KEY-----\n""
        ); // or from file etc.

        org.bouncycastle.util.io.pem.PemObject spki = new org.bouncycastle.util.io.pem.PemReader(rdr).readPemObject();
        PublicKey key = KeyFactory.getInstance(""EC"", ""BC"").generatePublic(new X509EncodedKeySpec(spki.getContent()));
        return key;
    }

    public static boolean verify(byte[] data, byte[] signatureBytes, PublicKey publicKey) throws Exception {
        Signature signature = Signature.getInstance(""SHA256withECDSA"", ""BC"");
        signature.initVerify(publicKey);
        signature.update(data);
        return signature.verify(signatureBytes);
    }

}
</code></pre>
","2510","<java><android><openssl><public-key><pem>","1","1","2","2018-05-15 13:39:09","45480406","2","2","","","","2017-08-02 15:25:44",""
"45464949","PublicKey from PEM file on android, java","<p>Basically I'm trying to verify signature which using openssl looks like this:</p>

<pre><code>openssl dgst -sha256 -verify prime192v1-pub-v1.pem -signature signatureFile.bin &lt; dataFile.bin
</code></pre>

<p>... and in order to do that on android I need to create <code>PublicKey</code> object. The method that I'm using throws <code>java.security.spec.InvalidKeySpecException: Unexpected key type</code> at line <code>kf.generatePublic(new X509EncodedKeySpec(encoded))</code>.</p>

<pre><code>import org.spongycastle.util.encoders.Base64;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;

public class SO {

    public static PublicKey getPublicKeyFromString(String key) throws IOException, GeneralSecurityException {
        String publicKeyPEM = key;
        publicKeyPEM = publicKeyPEM.replace(""-----BEGIN PUBLIC KEY-----\n"", """");
        publicKeyPEM = publicKeyPEM.replace(""-----END PUBLIC KEY-----"", """");
        byte[] encoded = Base64.decode(publicKeyPEM);
        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        return kf.generatePublic(new X509EncodedKeySpec(encoded));
    }

}
</code></pre>

<p>This is how I call the method:</p>

<pre><code>    SO.getPublicKeyFromString(
            ""-----BEGIN PUBLIC KEY-----\n"" +
            ""MEkwEwYHKoZIzj0CAQYIKoZIzj0DAQEDMgAEXMHnQfWiM4oCaLfx296llgz7iaVv\n"" +
            ""avMPppkzVNZAxtlNLhFlXnNWD0Mw9yzP8/Go\n"" +
            ""-----END PUBLIC KEY-----""
    );
</code></pre>

<p>Anyone knows what I'm doing wrong?</p>
","<p>I was fighting with this for a while and came up with this solution.  I decided against overloading the security system as I use other elements of android's Encryption system in other areas of my app.</p>

<pre><code>public class EncryptionInterface {

    private static final int bufferSize_ = 32;
    private static final String headerTag = ""-----BEGIN PUBLIC KEY-----"";
    private static final String footerTag = ""-----END PUBLIC KEY-----"";

    /**
     *
     * @param ctx
     * @return
     * @throws Exception
     */
    public static PublicKey getPublicKey(Context ctx) throws Exception {

        PublicKey generatedPublic;

        Security.addProvider(new BouncyCastleProvider());
        String publicKeyString = getKeyFromFile(ctx);

        byte[] decoded = Base64.decode(publicKeyString, Base64.DEFAULT);
        org.spongycastle.asn1.pkcs.RSAPublicKey pkcs1PublicKey = org.spongycastle.asn1.pkcs.RSAPublicKey.getInstance(decoded);
        BigInteger modulus = pkcs1PublicKey.getModulus();
        BigInteger publicExponent = pkcs1PublicKey.getPublicExponent();
        RSAPublicKeySpec keySpec = new RSAPublicKeySpec(modulus, publicExponent);
        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        generatedPublic = kf.generatePublic(keySpec);

        return generatedPublic;

    }

    /**
     * Load the key/PEM from a file and strip the header/footer.
     * @param ctx
     * @throws Exception
     */
    public static String getKeyFromFile(Context ctx) throws Exception
    {
        String certPath = ""publickey.pem"";

        InputStream input = ctx.getAssets().open(certPath);
        byte[] buffer = new byte[bufferSize_];
        int len = 0;
        ByteArrayOutputStream keyBuffer = new ByteArrayOutputStream();
        while ((len = input.read(buffer)) != -1) {
            keyBuffer.write(buffer, 0, len);
        }

        String str = new String(keyBuffer.toByteArray());

        str = str.replace(headerTag, """");
        str = str.replace(footerTag, """");
        return str;
    }
} 
</code></pre>
","2510","<java><android><openssl><public-key><pem>","1","0","2","2018-05-15 13:39:09","45480406","2","2","","","","2017-08-02 15:25:44",""
"35754695","How can I access a server if private key is lost","<p>My hard disk was broken so I've lost my private key. I still have the public key though and I know the passphrase for the private key.</p>

<p>I want to access a server which had my public key in the authorized keys. I tried to login using ssh:</p>

<pre><code>ssh debian@[server_ip]
</code></pre>

<p>but then it asks me for a password. I gave the passphrase but I get </p>

<blockquote>
  <p>""Permission denied, please try again.""</p>
</blockquote>

<p>Is there a way to access the server again?</p>
","<p>Either you should have physical access to the server Or should ask admin to enable password access for you.
Or If its VPS you can generate new pair using web panel of platform provider. 
If you lost the keys means you need to have another method to access and there is always a way for you to get access if you are genuine user of that system.</p>

<p>Hope it helps</p>
","2421","<ssh><private-key><public-key>","2","3","1","2017-01-31 12:56:29","","2","","","","","2016-03-02 17:57:16",""
"19275797","Try to check my connection publickey error (beanstalk ssh keys)","<p>I'll do my first steps with Git. I have a beanstalk-account as well. My IDE is phpstorm.</p>

<p>I installed it on my Mac via the installer => /usr/local/git was installed successfully.
After that I generate a ssh key and copied in my beanstalk account.
<a href=""http://guides.beanstalkapp.com/version-control/git-on-mac.html#installing-git"" rel=""nofollow"">Here's the tutorial</a>.</p>

<pre><code>The authenticity of host 'myaccount.beanstalkapp.com (204.232.132.2)' can't be established.
RSA key fingerprint is 30:9a:97:f3:19:4f:d1:6e:28:76:9e:e7:d1:df:2c:31.
Are you sure you want to continue connecting (yes/no)?
</code></pre>

<p>I typed 'yes' and then ..</p>

<pre><code>Warning: Permanently added 'myaccount.beanstalkapp.com' (RSA) to the list of known hosts.
Permission denied (publickey).
</code></pre>

<p>My public key is in the same folder .ssh/beanstalk.pub</p>

<p>What's my problem?</p>

<p>I try to clone my repository in phpStorm:</p>

<pre><code>git@myaccount.beanstalkapp.com:/phpstorm_git.git
</code></pre>

<p>but it doesn't work.</p>
","<p>You simply type yes and press ENTER, which will add your account's hostname accountname.beanstalkapp.com to a known_hosts file, however as it's eding the known_hosts file in ~/.ssh you will need sudo permissions so just use: <code>sudo git@myaccount.beanstalkapp.com:/phpstorm_git.git</code></p>
","2407","<git><ssh><public-key><elastic-beanstalk>","0","0","3","2017-03-11 07:18:02","","3","","229044","","2013-10-09 17:09:14","2013-10-09 15:06:42",""
"19275797","Try to check my connection publickey error (beanstalk ssh keys)","<p>I'll do my first steps with Git. I have a beanstalk-account as well. My IDE is phpstorm.</p>

<p>I installed it on my Mac via the installer => /usr/local/git was installed successfully.
After that I generate a ssh key and copied in my beanstalk account.
<a href=""http://guides.beanstalkapp.com/version-control/git-on-mac.html#installing-git"" rel=""nofollow"">Here's the tutorial</a>.</p>

<pre><code>The authenticity of host 'myaccount.beanstalkapp.com (204.232.132.2)' can't be established.
RSA key fingerprint is 30:9a:97:f3:19:4f:d1:6e:28:76:9e:e7:d1:df:2c:31.
Are you sure you want to continue connecting (yes/no)?
</code></pre>

<p>I typed 'yes' and then ..</p>

<pre><code>Warning: Permanently added 'myaccount.beanstalkapp.com' (RSA) to the list of known hosts.
Permission denied (publickey).
</code></pre>

<p>My public key is in the same folder .ssh/beanstalk.pub</p>

<p>What's my problem?</p>

<p>I try to clone my repository in phpStorm:</p>

<pre><code>git@myaccount.beanstalkapp.com:/phpstorm_git.git
</code></pre>

<p>but it doesn't work.</p>
","<p>This may be helpful for others landing in the same situation. I had the same issues and this post helped me solve it. </p>

<p><a href=""https://stackoverflow.com/a/20537879/3847469"">https://stackoverflow.com/a/20537879/3847469</a></p>

<p>Basically, I had allowed SSH traffic but my beanstalk instance was not associated with the keypair I had generated. The above post describes how to do that. I was able to login after that.</p>
","2407","<git><ssh><public-key><elastic-beanstalk>","0","1","3","2017-03-11 07:18:02","","3","","229044","","2013-10-09 17:09:14","2013-10-09 15:06:42",""
"19275797","Try to check my connection publickey error (beanstalk ssh keys)","<p>I'll do my first steps with Git. I have a beanstalk-account as well. My IDE is phpstorm.</p>

<p>I installed it on my Mac via the installer => /usr/local/git was installed successfully.
After that I generate a ssh key and copied in my beanstalk account.
<a href=""http://guides.beanstalkapp.com/version-control/git-on-mac.html#installing-git"" rel=""nofollow"">Here's the tutorial</a>.</p>

<pre><code>The authenticity of host 'myaccount.beanstalkapp.com (204.232.132.2)' can't be established.
RSA key fingerprint is 30:9a:97:f3:19:4f:d1:6e:28:76:9e:e7:d1:df:2c:31.
Are you sure you want to continue connecting (yes/no)?
</code></pre>

<p>I typed 'yes' and then ..</p>

<pre><code>Warning: Permanently added 'myaccount.beanstalkapp.com' (RSA) to the list of known hosts.
Permission denied (publickey).
</code></pre>

<p>My public key is in the same folder .ssh/beanstalk.pub</p>

<p>What's my problem?</p>

<p>I try to clone my repository in phpStorm:</p>

<pre><code>git@myaccount.beanstalkapp.com:/phpstorm_git.git
</code></pre>

<p>but it doesn't work.</p>
","<p>Maybe just your host is wrong, into this file, and check you host
<code>
~/.ssh/known_hosts
</code>
<a href=""https://stackoverflow.com/questions/18551556"">Permission denied (publickey) when SSH Access to Amazon EC2 instance</a></p>
","2407","<git><ssh><public-key><elastic-beanstalk>","0","0","3","2017-03-11 07:18:02","","3","","229044","","2013-10-09 17:09:14","2013-10-09 15:06:42",""
"12166756","How to change EC2 Public Key?","<p>I'm trying to change my EC2 public key for myself, the rest of my team who uses AWS, and also for running instances. </p>

<p>So the old key was (for example) 'my_key', and I made a new key called 'my_key2'.</p>

<p>I made the new key, saved the .pem file alongside the old one, so both 'my_key.pem' and 'my_key2.pem' are residing in my ~/.ssh folder. </p>

<p>Now, I'm trying to ssh into other instances to change they authorization_keys to share my public key, but when I try to ssh, I get </p>

<pre><code>amy$ ssh ***-**-**-***-***.foo.com

Permission denied (publickey).
</code></pre>

<p>I tried taking the new 'my_key2' file out of the .ssh folder, and the same problem occurs. I didn't have this problem before I started mucking around. Any tips on getting ssh to recognize my old certificates so that I can get everyone going on the new keys?</p>
","<p>You will need to stop the instance (if EBS-backed instance) in order to change the key pair to be used for the instance.  If not EBS-backed volume you will just need to start another instance from your AMI with the the new key pair.</p>

<p>If you are not able to easily restart the instance or create a new instance, there is this method which purports to being able to change public keys on a running instance, but I haven;t tried it. Really the right way to do it is by stopping/starting or creating new instances.</p>

<p><a href=""http://seabourneinc.com/2011/01/19/change-key-pairs-on-aws-ec2-instance/"" rel=""nofollow"">http://seabourneinc.com/2011/01/19/change-key-pairs-on-aws-ec2-instance/</a></p>
","2390","<ssh><amazon-ec2><amazon-web-services><pem><public-key>","4","4","2","2014-07-28 06:58:41","12166898","0","1","1578925","","2012-09-25 10:55:35","2012-08-28 20:05:54",""
"12166756","How to change EC2 Public Key?","<p>I'm trying to change my EC2 public key for myself, the rest of my team who uses AWS, and also for running instances. </p>

<p>So the old key was (for example) 'my_key', and I made a new key called 'my_key2'.</p>

<p>I made the new key, saved the .pem file alongside the old one, so both 'my_key.pem' and 'my_key2.pem' are residing in my ~/.ssh folder. </p>

<p>Now, I'm trying to ssh into other instances to change they authorization_keys to share my public key, but when I try to ssh, I get </p>

<pre><code>amy$ ssh ***-**-**-***-***.foo.com

Permission denied (publickey).
</code></pre>

<p>I tried taking the new 'my_key2' file out of the .ssh folder, and the same problem occurs. I didn't have this problem before I started mucking around. Any tips on getting ssh to recognize my old certificates so that I can get everyone going on the new keys?</p>
","<p><a href=""http://seabourneinc.com/2011/01/19/change-key-pairs-on-aws-ec2-instance/"" rel=""nofollow"">http://seabourneinc.com/2011/01/19/change-key-pairs-on-aws-ec2-instance/</a>
This solution works. I checked it. 
In simple steps.
login to AWS console, create a new pem key, it will ask you to save it to local, save it.
run the following command.</p>

<p>ssh-keygen -y | tee my_key.pub 
type the path to where you have saved the new pem key file along with the file name.</p>

<p>the above command will display the contents on the screen, copy it, and paste into the 
authorized_keys file of the EC2 instance, save and close. 
now you can use the saved/downloaded new pem key file to access the EC2 instance.</p>
","2390","<ssh><amazon-ec2><amazon-web-services><pem><public-key>","4","0","2","2014-07-28 06:58:41","12166898","0","1","1578925","","2012-09-25 10:55:35","2012-08-28 20:05:54",""
"9819357","GitHub: ssh -T git@github.com -> Permission denied (publickey). [Windows 7]","<p>I have a problem and didn't find anything on stackoverflow or google.
When i run ssh -T git@github.com I get the error Permission denied (publickey).</p>

<p>The helps in the Git Help guide doesn't help.
Can someone help me?</p>

<p>OK i got the solution, maybe someone needs it so here we go:</p>

<p>Ok, i got it finally.</p>

<p>First of all it is to say I am running here the Windows 7 OS in German 64bit! I don't know if this is important.</p>

<p>Well, in this guide: <a href=""http://help.github.com/win-set-up-git/"" rel=""nofollow"">http://help.github.com/win-set-up-git/</a> they say, that the files where create in C:/Users/[PC-Name]/.ssh/</p>

<p>So in this folder there shall be the files id_rsa and id_rsa.pub. When i looked them up, i wasn't able to find even the folder. So where are the necessary files?</p>

<p>I run the search and i find them in: C:\Users[yourpcname]\AppData\Local\VirtualStore\Windows\SysWOW64</p>

<p>I don't know why or how they get there. I never typed in this path.
Ok, so now just copy the files and create the .ssh folder in C:/Users/[PC-Name]/ move to the directory .ssh and paste the two files id_rsa and id_rsa.pub.</p>

<p>Then don't run ssh -T git@github.com
but:</p>

<pre><code>ssh -T git@github.com -i &lt;path-to-id_rsa&gt;
</code></pre>

<p>and rly take care that you use  C:/.../.../ <strong>and NOT</strong> C:\...\...\..</p>

<p>This solved my problem. Maybe you have the same problem.</p>
","<blockquote>
  <p>I wasn't able to find even the folder</p>
</blockquote>

<p>That folder can be any folder you want, as long as you define an <code>HOME</code> user environment variable (which isn't defined by default on Windows Xp or Seven)</p>

<p>If you define <code>HOME</code> to <code>C:\path\to\folder</code>, then <code>id_rsa</code> and <code>id_rsa.pub</code> need to be stored in:</p>

<pre><code> C:\path\to\folder\.ssh
</code></pre>
","2349","<windows-7><permissions><github><public-key>","3","1","2","2012-10-20 12:01:58","","3","","1285473","","2012-03-26 12:09:23","2012-03-22 09:21:08",""
"9819357","GitHub: ssh -T git@github.com -> Permission denied (publickey). [Windows 7]","<p>I have a problem and didn't find anything on stackoverflow or google.
When i run ssh -T git@github.com I get the error Permission denied (publickey).</p>

<p>The helps in the Git Help guide doesn't help.
Can someone help me?</p>

<p>OK i got the solution, maybe someone needs it so here we go:</p>

<p>Ok, i got it finally.</p>

<p>First of all it is to say I am running here the Windows 7 OS in German 64bit! I don't know if this is important.</p>

<p>Well, in this guide: <a href=""http://help.github.com/win-set-up-git/"" rel=""nofollow"">http://help.github.com/win-set-up-git/</a> they say, that the files where create in C:/Users/[PC-Name]/.ssh/</p>

<p>So in this folder there shall be the files id_rsa and id_rsa.pub. When i looked them up, i wasn't able to find even the folder. So where are the necessary files?</p>

<p>I run the search and i find them in: C:\Users[yourpcname]\AppData\Local\VirtualStore\Windows\SysWOW64</p>

<p>I don't know why or how they get there. I never typed in this path.
Ok, so now just copy the files and create the .ssh folder in C:/Users/[PC-Name]/ move to the directory .ssh and paste the two files id_rsa and id_rsa.pub.</p>

<p>Then don't run ssh -T git@github.com
but:</p>

<pre><code>ssh -T git@github.com -i &lt;path-to-id_rsa&gt;
</code></pre>

<p>and rly take care that you use  C:/.../.../ <strong>and NOT</strong> C:\...\...\..</p>

<p>This solved my problem. Maybe you have the same problem.</p>
","<p>Another SO post contains the solution:</p>

<p><a href=""https://stackoverflow.com/a/8081456/1463090"">Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly</a></p>

<p>Try to copy <code>id_rsa</code> and <code>id_rsa.pub</code> into the Git Installation folder.
Something like this: <code>C:\users\user\.ssh</code> to <code>C:\Program Files (x86)\Git\.ssh</code></p>
","2349","<windows-7><permissions><github><public-key>","3","2","2","2012-10-20 12:01:58","","3","","1285473","","2012-03-26 12:09:23","2012-03-22 09:21:08",""
"48992472","How to get the MD5 fingerprint for an RSA public key on Windows?","<p><strong>Preamble:</strong> Working with Android Studio and pushing my ""Hello World"" app to the phone, I was presented with a confirmation dialog like this:</p>

<blockquote>
  <p>Allow USB debugging? </p>
  
  <p>The computer's RSA key fingerprint is:</p>
  
  <p><code>&lt;some_md5_fingerprint&gt;</code></p>
  
  <p>[] Always allow from this computer</p>
  
  <p>CANCEL OK</p>
</blockquote>

<p>Although I was quite sure it was my machine trying to connect, I asked myself how I would confirm that.</p>

<p>This sprang two more <strong>concrete questions:</strong></p>

<ul>
<li>Where is the RSA public key?</li>
<li>How do I get the MD5 fingerprint for an RSA public key?</li>
</ul>

<p>Additionally, I wanted a widely usable answer so the solution should be available to every Windows (win7 in my case) user without requiring installation of software.</p>
","<p>I'm using <code>cmd</code> and its <code>for</code> loop as well as <code>certUtil</code> which should all come pre-installed.</p>

<p>Open <code>cmd</code> by</p>

<ul>
<li>pressing <kbd><img src=""https://i.stack.imgur.com/T0oPO.png"" alt=""Windows Key""></kbd>+<kbd>R</kbd> and typing <code>cmd</code> then confirming, or</li>
<li>opening Windows' Start menu, searching for <code>cmd.exe</code> and executing.</li>
</ul>

<p><strong>TLDR</strong></p>

<pre><code>for /F ""tokens=2"" %a in (id_rsa.pub) DO (echo %a) &gt; tmp.key_base64
certUtil -decode tmp.key_base64 tmp.key_bytes
certUtil -hashfile tmp.key_bytes MD5
</code></pre>

<p><strong>Where is the RSA public key?</strong></p>

<p>Usually the keys are kept in the directory <code>.ssh</code> under the user's home.</p>

<p>(Android Studio stores different(!) keys, <code>adbkey.pub</code>, in the directory <code>.android</code> under the user's home and in its installation directory, here <code>C:\Android\.android</code> - both keys were issued to the phone during the process mentioned in the preamble above.)</p>

<p>After opening the console you should already be in your home directory and only need to change into <code>.ssh</code></p>

<pre><code>C:\Users\%USERNAME%&gt;cd .ssh
</code></pre>

<p>In case you're not in your home directory type</p>

<pre><code>cd \Users\%USERNAME%\.ssh
</code></pre>

<p>and execute.</p>

<p>(For Android Studio change directory to <code>\Users\%USERNAME%\.android</code> or <code>\Android\.android</code> respectively.)</p>

<p><strong>How do I get the MD5 fingerprint for an RSA public key?</strong></p>

<p>For this I needed to know that the actual key in the file is the base64-encoded part, i.e. the <a href=""https://en.wikipedia.org/wiki/Base64#Examples"" rel=""nofollow noreferrer"">long cryptic string of characters</a>. In my cases the <em>key field</em> was always followed by a <em>user-host field</em>, i.e. a string like <code>user@domain.com</code> (also <code>unknown@unknown</code>) and in some cases preceded by a field containing <code>ssh-rsa</code>.</p>

<p>In those latter cases I needed to filter the second field. In windows, apparently, this is done using a <code>for</code> loop. I also send the output to a file for subsequential digestion by <code>certUtil</code>, its output again brought into a file - containing the key no longer base64-encoded but in bytes - which is finally hashed using MD5.</p>

<p>Extracting the key which is in the second field of my <code>id_rsa.pub</code> to a file named <code>tmp.key_base64</code>:</p>

<pre><code>for /F ""tokens=2"" %a in (id_rsa.pub) DO (echo %a) &gt; tmp.key_base64
</code></pre>

<p>(First field for Android Studio's <code>adbkey.pub</code>: <code>""tokens=1""</code>)</p>

<p>Base64-decoding to receive the actual public key in file <code>tmp.key_bytes</code>:</p>

<pre><code>certUtil -decode tmp.key_base64 tmp.key_bytes
</code></pre>

<p>Hash the key using MD5:</p>

<pre><code>certUtil -hashfile tmp.key_bytes MD5
</code></pre>
","2345","<windows><cmd><rsa><md5><public-key>","2","2","1","2018-02-26 16:06:16","48992473","0","","","","","2018-02-26 16:06:16",""
"21132135","how make signature by private key and check it by public key in php","<p>I have a RSA private key and a RSA public key.</p>

<p>both rsa keys are in xml version ( <code>&lt;RSAKeyValue&gt;&lt;Modulus&gt;....</code> );</p>

<p>I need to make a PKCS8 signature from private key and test it by publik key in php</p>

<p>I used this snippet for making signature:</p>

<pre><code>$content = ""test string"";
include('Crypt/RSA.php');
$rsa = new Crypt_RSA();
$rsa-&gt;loadKey(file_get_contents(""private.txt""));
$pem_format = $rsa-&gt;getPrivateKey();
$pvk_res = openssl_get_privatekey($pem_format); 
$sig = '';
openssl_sign($content , $sig, $pvk_res, OPENSSL_ALGO_SHA1);
$signature = base64_encode($sig);
</code></pre>

<p>is this right way for making signature ??</p>

<p>now how use public key to test accuracy of signature ??</p>
","<p>PKCS8 concerns key formats - not signatures.</p>

<p>Also, I see you're using phpseclib to convert the key to pem and then using openssl. Why not just use phpseclib for everything? At that point you could use this example:</p>

<p><a href=""http://phpseclib.sourceforge.net/rsa/examples.html#sign,sign2"" rel=""nofollow"">http://phpseclib.sourceforge.net/rsa/examples.html#sign,sign2</a></p>

<pre><code>&lt;?php
include('Crypt/RSA.php');

$rsa = new Crypt_RSA();
//$rsa-&gt;setPassword('password');
$rsa-&gt;loadKey('...'); // private key

$plaintext = '...';

$rsa-&gt;setSignatureMode(CRYPT_RSA_SIGNATURE_PKCS1);
$signature = $rsa-&gt;sign($plaintext);

$rsa-&gt;loadKey('...'); // public key
echo $rsa-&gt;verify($plaintext, $signature) ? 'verified' : 'unverified';
?&gt;
</code></pre>
","2315","<php><rsa><public-key><phpseclib><pkcs#8>","0","1","1","2014-01-15 19:10:03","21146148","1","1","569976","","2014-01-15 19:06:35","2014-01-15 08:10:06",""
"5564953","What does PackageInfo.signatures return?","<p>Why there are multiple signatures in this value? Are these values the public key of the package?</p>

<p>Can I uniquely identify a package using this signature instead of reading the files under META-INF, or calculating an MD5 on the whole APK file?</p>
","<p>According to @hackbod, this is all the public keys the APK was signed with</p>

<blockquote>
  <p>Despite its name, the contents of PackageInfo.signatures is the public keys your app is signed with.  This absolutely, positively does not change between builds.  This is the pure identify of the developer of the app.</p>
</blockquote>

<p>Reference: <a href=""https://groups.google.com/d/msg/android-developers/fPtdt6zDzns/MDqie6k7qo0J"" rel=""nofollow"">https://groups.google.com/d/msg/android-developers/fPtdt6zDzns/MDqie6k7qo0J</a></p>
","2287","<android><package><apk><public-key>","3","2","1","2014-06-16 08:44:56","","1","2","","","","2011-04-06 10:34:13",""
"15308424","Not able to push to Github, getting ""permission denied (publickey)""","<pre><code>Administrator@SANZVAIO /e/projects/pySan (master)
$ git remote add pySan git@github.com:sanfx/.git

Administrator@SANZVAIO /e/projects/pySan (master)
$ git push -u origin master
The authenticity of host 'github.com (207.97.227.239)' can't be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'github.com,207.97.227.239' (RSA) to the list of know
n hosts.
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>Any other way to push to github? I am using Git Bash on Windows 7.</p>
","<ol>
<li>You repo URL is wrong</li>
<li>You might also have an SSH issue. </li>
</ol>

<p>You should first create an empty repository on GitHub, via <a href=""https://github.com/new"" rel=""nofollow"">the webinterface</a> or the <a href=""http://developer.github.com/v3/repos/#create"" rel=""nofollow"">GitHub API</a></p>

<p>Let's suppose you have just created <code>myrepo</code>, the URL syntax to use is:</p>

<pre><code>git remote add pySan git@github.com:sanfx/myrepo.git
</code></pre>

<p>If you still have SSH errors, either check your public/private keypair, or use https to start out:</p>

<pre><code>git remote set-url pySan https://github.com/sanfx/myrepo.git
</code></pre>
","2244","<git><ssh><public-key><github-for-windows>","-1","2","1","2013-03-09 07:56:47","15308543","4","","474189","","2013-03-09 07:47:13","2013-03-09 07:36:16","2013-03-10 08:00:18"
"9612480","How to store public/private key in MS SQL Server?","<p>Within my code I generate public/private key pairs. I would like to store them to a MSSQL2008 database table. My current table has a column for public key and one for private key, both of which are of type varchar.</p>

<p>Is there a way for me to store the keys as they are, or do/should I convert them to String and store them as varchar?</p>
","<p>Apart from the fact that the idea of storing unencrypted private keys in unsecured storage is questionable, you could use <a href=""http://msdn.microsoft.com/en-us/library/ms188362.aspx"" rel=""nofollow""><code>binary</code> or <code>varbinary</code></a> data type to store the bytes of your keys without converting them to <code>varchar</code>.</p>
","2243","<java><sql-server><sql-server-2008><public-key><private-key>","1","4","1","2012-03-08 03:33:08","9612515","0","","","","","2012-03-08 03:26:22",""
"21945437","Encrypt data in Android with a RSA public.pem file generated in Ruby","<p>sorry to ask a particular question, but I need to generate in java code a 'signature' like the following code line in ruby: </p>

<p><em><code>signature = OpenSSL::PKey::RSA.new(File.read(""PUBLIC_PEM_PATH"")).public_encrypt('SECRET_KEY')</code></em></p>

<p>I have the .pem key file and the SECRET_KEY that's is something like: <em>F6qxlwQTYWRM3gRfgftryKJHKYZiGXdoy5lDm4</em></p>

<p>How can I do this ? </p>

<p>Thanks!</p>

<p><strong>UPDATE 1</strong>
I tried this :</p>

<pre><code>File pubKeyFile = new File(keyFileName);
    DataInputStream inputStream;
    byte[] signature = null;
    try {
        inputStream = new DataInputStream(new FileInputStream(pubKeyFile));
        byte[] pubKeyBytes = new byte[(int)pubKeyFile.length()];
        inputStream.readFully(pubKeyBytes);
        inputStream.close();

        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
        X509EncodedKeySpec pubSpec = new X509EncodedKeySpec(pubKeyBytes);
        RSAPublicKey pubKey = (RSAPublicKey) keyFactory.generatePublic(pubSpec);

        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, pubKey);

        signature = cipher.doFinal(secretKey.getBytes());
    } catch (Exception e) {
        e.printStackTrace();
    }
    return signature;
</code></pre>

<p>And got this error:</p>

<pre><code>java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag
</code></pre>

<p><strong>UPDATE2</strong> 
I managed to load a public key from a .pem file. But now, Im getting an error from the cipher.</p>

<pre><code>public static byte[] getSignature(String keyFileName, byte[] secretKey){
    byte[] signature = null;
    try {
        PublicKey pubKey = readKeyFromFile(keyFileName);
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, pubKey);

        signature = cipher.doFinal(secretKey);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return signature;
}
private static PublicKey readKeyFromFile(String keyFileName) throws IOException {
    InputStream in = new FileInputStream(keyFileName);
    DataInputStream din = new DataInputStream(in);
    try {
        BigInteger m = BigInteger.valueOf(din.readLong());
        BigInteger e = BigInteger.valueOf(din.readLong());
        RSAPublicKeySpec keySpec = new RSAPublicKeySpec(m, e);
        KeyFactory fact = KeyFactory.getInstance(""RSA"");
        RSAPublicKey pubKey = (RSAPublicKey) fact.generatePublic(keySpec);
        return pubKey;
    } catch (Exception e) {
        throw new RuntimeException(""Spurious serialisation error"", e);
    } finally {
        din.close();
    }
}
</code></pre>

<p>The error log:</p>

<pre><code>javax.crypto.IllegalBlockSizeException: input must be under 8 bytes
</code></pre>

<p>Any thoughts??</p>
","<p>Looks like key wrapping (encryption) to me. Use bouncy castle to read the PEM file, then use <code>Cipher.getInstance(""RSA/ECB/PKCS1Padding"")</code> to encrypt the secret key, and base 64 encode the result... You could also try the mode <code>Cipher.WRAP_MODE</code> to see if that works. Note that encryption will always return a different result, the only way to test for compatibility is to decrypt it with the other software.</p>
","2193","<android><ruby><encryption><public-key><pem>","4","1","2","2014-03-07 20:00:32","22259504","4","5","3174309","","2014-03-07 20:00:32","2014-02-21 21:22:25",""
"21945437","Encrypt data in Android with a RSA public.pem file generated in Ruby","<p>sorry to ask a particular question, but I need to generate in java code a 'signature' like the following code line in ruby: </p>

<p><em><code>signature = OpenSSL::PKey::RSA.new(File.read(""PUBLIC_PEM_PATH"")).public_encrypt('SECRET_KEY')</code></em></p>

<p>I have the .pem key file and the SECRET_KEY that's is something like: <em>F6qxlwQTYWRM3gRfgftryKJHKYZiGXdoy5lDm4</em></p>

<p>How can I do this ? </p>

<p>Thanks!</p>

<p><strong>UPDATE 1</strong>
I tried this :</p>

<pre><code>File pubKeyFile = new File(keyFileName);
    DataInputStream inputStream;
    byte[] signature = null;
    try {
        inputStream = new DataInputStream(new FileInputStream(pubKeyFile));
        byte[] pubKeyBytes = new byte[(int)pubKeyFile.length()];
        inputStream.readFully(pubKeyBytes);
        inputStream.close();

        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
        X509EncodedKeySpec pubSpec = new X509EncodedKeySpec(pubKeyBytes);
        RSAPublicKey pubKey = (RSAPublicKey) keyFactory.generatePublic(pubSpec);

        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, pubKey);

        signature = cipher.doFinal(secretKey.getBytes());
    } catch (Exception e) {
        e.printStackTrace();
    }
    return signature;
</code></pre>

<p>And got this error:</p>

<pre><code>java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag
</code></pre>

<p><strong>UPDATE2</strong> 
I managed to load a public key from a .pem file. But now, Im getting an error from the cipher.</p>

<pre><code>public static byte[] getSignature(String keyFileName, byte[] secretKey){
    byte[] signature = null;
    try {
        PublicKey pubKey = readKeyFromFile(keyFileName);
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, pubKey);

        signature = cipher.doFinal(secretKey);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return signature;
}
private static PublicKey readKeyFromFile(String keyFileName) throws IOException {
    InputStream in = new FileInputStream(keyFileName);
    DataInputStream din = new DataInputStream(in);
    try {
        BigInteger m = BigInteger.valueOf(din.readLong());
        BigInteger e = BigInteger.valueOf(din.readLong());
        RSAPublicKeySpec keySpec = new RSAPublicKeySpec(m, e);
        KeyFactory fact = KeyFactory.getInstance(""RSA"");
        RSAPublicKey pubKey = (RSAPublicKey) fact.generatePublic(keySpec);
        return pubKey;
    } catch (Exception e) {
        throw new RuntimeException(""Spurious serialisation error"", e);
    } finally {
        din.close();
    }
}
</code></pre>

<p>The error log:</p>

<pre><code>javax.crypto.IllegalBlockSizeException: input must be under 8 bytes
</code></pre>

<p>Any thoughts??</p>
","<p>So finally, after hours of research I came with a solution and finally could get read my public key from .pem file and generate an instance of this key. Hence, I managed to encrypt the data.</p>

<p>But I had to copy and paste the <em>key content</em> without any special character like '\n' and make a <code>publicKeyString</code> with it</p>

<p>----------BEGIN RSA PUBLIC KEY---------</p>

<p><em>key content</em></p>

<p>----------END RSA PUBLIC KEY---------</p>

<pre><code>static public PublicKey publicKey(String publicKeyString) {
    try {
        byte[] decodedPublicKey = Base64.decode(publicKeyString, 0);
        ASN1InputStream in = new ASN1InputStream(decodedPublicKey);
        ASN1Primitive obj = in.readObject();
        RSAPublicKeyStructure keyStruct = RSAPublicKeyStructure.getInstance(obj);
        RSAPublicKeySpec keySpec = new RSAPublicKeySpec(keyStruct.getModulus(), keyStruct.getPublicExponent());
        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
        return keyFactory.generatePublic(keySpec);
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
    return null;
}
</code></pre>

<p>I failed even when I tried to use PEMReader from bouncy castle. All the problems have something to do with keys generated in Ruby version prior 1.9.3 as described with details <a href=""http://skim.la/2012/01/16/rsa-public-key-interoperability-between-ruby-and-android/"" rel=""noreferrer"">here</a>. </p>

<p>Anyway, thanks a lot for the attention disposed. </p>
","2193","<android><ruby><encryption><public-key><pem>","4","6","2","2014-03-07 20:00:32","22259504","4","5","3174309","","2014-03-07 20:00:32","2014-02-21 21:22:25",""
"1475094","New host key every day using MSFTP and WinSCP","<p>I am tranfering a file from one server to another using ""Core FTP mini-sftp-server"" on source side and WinSCP on destination side (both servers are running Windows).</p>

<p>I am logging in these two machine using local admin account which are same on both servers.
I have been doing this process manually:</p>

<ul>
<li>Start MSFTP server on source</li>
<li>Start WinSCP on destination, connect to source and get the file.</li>
</ul>

<p>Now I want to automate it and i tried the following</p>

<p>Start <code>msftp</code> from command line on source.</p>

<p>On destination in <code>winscp.exe</code> console:</p>

<pre><code>open login:password@IPAdress
get &lt;file&gt; &lt;destination&gt;
close
exit
</code></pre>

<p>The problem with this is if I do it for the first time everyday, it asks me to update the key at the destination side saying:</p>

<blockquote>
  <p>""WARNING POTENTIAL SECURITY BREACH!  The server’s host key does not
  match the one WinSCP has is cache. This means that either the server
  administrator has charged the host key, the server presents different
  key under certain circumstances, or you have actually connected to
  another computer pretending to be the server""</p>
</blockquote>

<p>I have to manually do it (click on <em>Update</em>) at first and then for the following copies, the automation works.</p>

<p>Question:</p>

<p><em>How can I update the key using cmd line while connecting to the server?</em></p>

<p>Can I prevent the source to generate new key daily? Or should I do it?</p>
","<p>You should prevent the source server generating a new key - there is absolutely no reason to do so. The server's public key identifies the server, and so this identity shouldn't be changed.</p>
","2190","<sftp><public-key><winscp>","2","2","2","2017-03-03 08:00:37","1479943","1","3","850848","","2014-04-22 06:28:11","2009-09-25 02:07:42",""
"1475094","New host key every day using MSFTP and WinSCP","<p>I am tranfering a file from one server to another using ""Core FTP mini-sftp-server"" on source side and WinSCP on destination side (both servers are running Windows).</p>

<p>I am logging in these two machine using local admin account which are same on both servers.
I have been doing this process manually:</p>

<ul>
<li>Start MSFTP server on source</li>
<li>Start WinSCP on destination, connect to source and get the file.</li>
</ul>

<p>Now I want to automate it and i tried the following</p>

<p>Start <code>msftp</code> from command line on source.</p>

<p>On destination in <code>winscp.exe</code> console:</p>

<pre><code>open login:password@IPAdress
get &lt;file&gt; &lt;destination&gt;
close
exit
</code></pre>

<p>The problem with this is if I do it for the first time everyday, it asks me to update the key at the destination side saying:</p>

<blockquote>
  <p>""WARNING POTENTIAL SECURITY BREACH!  The server’s host key does not
  match the one WinSCP has is cache. This means that either the server
  administrator has charged the host key, the server presents different
  key under certain circumstances, or you have actually connected to
  another computer pretending to be the server""</p>
</blockquote>

<p>I have to manually do it (click on <em>Update</em>) at first and then for the following copies, the automation works.</p>

<p>Question:</p>

<p><em>How can I update the key using cmd line while connecting to the server?</em></p>

<p>Can I prevent the source to generate new key daily? Or should I do it?</p>
","<p>You are losing any security by connecting to a SSH server that changes public key every day.</p>

<p>Anyway, if that's your only option, recent WinSCP allows accepting any host key automatically using the <a href=""https://winscp.net/eng/docs/scriptcommand_open#hostkey"" rel=""nofollow noreferrer""><code>-hostkey=*</code> switch of the <code>open</code> command</a>:</p>

<pre><code>open -hostkey=*
</code></pre>

<p>You lose any security by doing that, but you are already, so it makes no difference.</p>
","2190","<sftp><public-key><winscp>","2","0","2","2017-03-03 08:00:37","1479943","1","3","850848","","2014-04-22 06:28:11","2009-09-25 02:07:42",""
"5994797","openssl ? Join a public and a private key","<p>Basicly, I have a private PEM key and a public certificate PEM key.
They work when I use them both (but don't work if I only use one of them).</p>

<p>I use and this works:
wget --no-check-certificate --private-key=dev-private.pem --certificate=dev.pem https://???.???.???.???
(This is self-signed certificate signed by java keytool. I have acces to this keystore.)
I also produce a jks and it's work great in browser.</p>

<p>The problem is one of my application I neeed to use a certificate and he only support 1 PEM key (only support certicate with ""-----BEGIN CERTIFICATE-----"" header).
I don't have figure out how to make 1 PEM key containing private and public key.</p>

<p>Did there is some way to join both for make 1 big PEM key ?</p>

<p>They're so many command line for openssl.</p>

<p>Thank you</p>
","<p>Not fully sure what you are asking, but you can just join both the public and private key into a single file and that may be all you need for your application.  Just cut and past the PEM key from each of the current files into a new file.  Then point your application to the new file.  I have used that technique myself for one of my applications.</p>

<p>Hope this helps.</p>

<p>Al</p>
","2135","<certificate><openssl><public-key><private-key><pem>","0","0","1","2011-05-16 13:04:44","","2","","752713","","2011-05-16 12:39:50","2011-05-13 16:15:32",""
"25927076","How to use .crt file for SSH public key authentication","<p>I am developing SFTP WinSCP client using C# (.NET Assembly). In my testing environment I did it by password authentication. Here are my session options:</p>

<pre><code>// Setup session options
SessionOptions sessionOptions = new SessionOptions {
    Protocol = Protocol.Sftp,
    HostName = ""example.com"",
    UserName = ""user"",
    Password = ""mypassword"",
    SshHostKeyFingerprint = ""ssh-rsa 2048 xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx""
};
</code></pre>

<p>But real environment don't have password for the user. Server admin provide Public Key with extension "".crt""</p>

<p>So using this Public Key how can I change my program (<code>SessionOptions</code>)?</p>

<p>Are this details enough to proceed this implementation?</p>

<p>Preview of crt file</p>

<p><img src=""https://i.stack.imgur.com/Ox71P.jpg"" alt=""enter image description here"">  </p>
","<p>From the extension, look and size of the the file you received, I believe it is a public key of the server in form of a certificate.</p>

<p>First, server's public key can be used only to verify that the server you connected to is actually the one you wanted to connect to (i.e. there's no man-in-the-middle attack ongoing).</p>

<p>Second, certificate format of keys is never used with SSH. It's used with TLS/SSL, so for example with FTPS (FTP over TLS/SSL), or HTTPS.</p>

<p>I'd say that there's some great misunderstanding between you and the server admin.</p>

<p>If you want more details, you should better ask on <a href=""https://superuser.com"">SuperUser</a> or <a href=""https://serverfault.com"">ServerFault</a>, as this does not look like a programming question in the end.</p>
","2121","<ssh><sftp><public-key><winscp><winscp-net>","1","1","1","2017-04-13 17:32:46","25929927","6","1","850848","","2014-09-19 08:50:24","2014-09-19 05:39:43",""
"33083932","How to determine fingerprint of imported OpenPGP key in PHP using the GnuPG module?","<p>In php I have a public key, but I do not know fingerprint of this key.
How can I encrypt a text by this public key?</p>

<p>Here is the code:</p>

<pre><code>$gpg = new gnupg();
putenv(""GNUPGHOME=/tmp"");
$pubkey = ""-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v2

mQENBFYH/asBCACeLwizAl/EziNDyVGW3a2td2FVvpoKWoWgmCwQ0A+Ukb+tSK8e
GZLbePb3oMNVOlBWPGSRUMsyugcjD0WhWS8AwRlrNoZyCvu4CZIrP51txhsxfTL6
PJC710vzuhS3Sqk8yMxayTjPzJaf5mHkTo4nd5tWgqmIIxHQW/NabVmTR5hQ+ctN
B/4zwRg3LEg4YGH8SzSgPZZMC6QCJuL1OJuaSwz79zNOzzFEmQ2xHfpkNKfFEvsX
dUdXWA+zz9omDtj2Eau8u7b5L6MR+ydlKo9MFjN55Qzif5h/N0kskQPSuBEffGzD
ToP6Zy9YBSAKscydcvl2yWcfytaCSKDpwrPpABEBAAG0EW15dGVzdCA8YWFAYWEu
YWE+iQE5BBMBCAAjBQJWB/2rAhsDBwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AA
CgkQ/v2Icpyb3SeAsQf7ByN468jN0ZhgrXlN2CvrHG2x4fx1GwhbIMEtNrnvy0rU
ivyKbM8YBs+QY39SuX55upmeVRfQFEiU7Cha+lXZ32hl1fsb/4OG59jGLvcX9Evq
qapyfEKhwO1C+eG1EhLPqpph1vnTOcciRkHtV33fCs0kHhLDOdhD65NX7RzE8XdX
s9GolKGCIrZuDQLKcQoPeD/IJLzom1iP4N46V2uz9ke018XRvnDObBgq5+qiloX1
SlbTwq0UToRIb3ggPiNes3grvyLTJxWqMpAXtHSHBbfwmtznZxYsyIY0JMQNB3UW
mYeu+qwOUpJqsI+bzCWhWOhyHqsA8Gv4TgHIcm/BFLkBDQRWB/2rAQgAuahVrWGv
IAcjrj30P8P0meAPwMbl4wlsYwTY4Qw9bfcPhfzDm4pltm9xXlYKTN3UeaiWhO2z
DeCcIwcxl2Ypa84Gd3aOV1rBDnDr+RPOdZBdkpjjoPRLL15c7QMv2chd70ZIBp9m
BC63J+BcBvMRnLaCi05E9TedIbTGK209+An9aiOIBRMnuhJ2dLNW2hGfVNIg/S00
hj3bJxXllJncNBxwDljPE7JWWtKA6XSUz+j2qBJSQv2koPj/+Fprc+Sa6R+T1kh/
dj8EDweLeweZ2kZojw8g4gzAQPWdf4NEuo+W/Mo6vx+1ALcKqSWW1g/+VTadg+pp
iynkX2f7I3sWMwARAQABiQEfBBgBCAAJBQJWB/2rAhsMAAoJEP79iHKcm90n4JMI
AJn4zNz4agYrV2NLTF5E7YdniGUKmtigN5Omxgil+hSEasLM7GgP+dzx+0DWHojH
tN/g5BJFU/jxy5mAVHsZYgs66KBUeL5TT69llMcTPg39xl338CXpaNDh9HEh+9Fb
/UwLr8dqd7Ld9Psd9f/x9X7irW244u+gUFL1Jvgr9/2XPbcVf5tUWT1YDGgKc7Vx
Etx8C/n+lXLXfmL/woqby2JnB/WgJxkg5ovOxzzzuE8TxKmZ3TqKyvwPdFVlcpw3
l1oTWHQ2Ru6ZdD1vFMaharoRHy+X4bc6PNli7KTBTA+X0iBAWUOqHZD4GdwHTleB
HsuhVwkm5Qv06KmM5g7leVg=
=Mgfi
-----END PGP PUBLIC KEY BLOCK-----
"";


$info = $gpg-&gt;import($pubkey);
print_r($info);
$gpg-&gt;addencryptkey(""96E9C3DC001C10B3AE6236B1FEFD88729C9BDD27"");
$enc = $gpg-&gt;encrypt(""just a test"");

echo $enc;
</code></pre>

<p>I do not know this encryptkey : </p>

<pre><code>$gpg-&gt;addencryptkey(""96E9C3DC001C10B3AE6236B1FEFD88729C9BDD27"");
</code></pre>

<p>How can I get this fingerprint from public key?</p>
","<p>Generally, running <code>gpg --list-keys --with-fingerprint --with-colons</code> piping in the key will yield information on the key. You will get an easily parseable result like</p>

<pre><code>pub:-:2048:1:FEFD88729C9BDD27:2015-09-27:::-:mytest &lt;aa@aa.aa&gt;:
fpr:::::::::96E9C3DC001C10B3AE6236B1FEFD88729C9BDD27:
sub:-:2048:1:22EC13225E681EFA:2015-09-27::::
</code></pre>

<p>The fingerprint is at a fixed column in the second line of the colon-separated output.</p>

<p>But when you're importing the key anyway, have a look at the output given by the code in your question, which already contains the fingerprint in <code>$info</code>:</p>

<pre><code>Array
(
    [imported] =&gt; 1
    [unchanged] =&gt; 0
    [newuserids] =&gt; 0
    [newsubkeys] =&gt; 0
    [secretimported] =&gt; 0
    [secretunchanged] =&gt; 0
    [newsignatures] =&gt; 0
    [skippedkeys] =&gt; 0
    [fingerprint] =&gt; 96E9C3DC001C10B3AE6236B1FEFD88729C9BDD27
)
</code></pre>

<p>Importing a key anyway to receive it's fingerprint is a viable way probably not too expensive, you might even be able to somehow cache the fingerprints for the hashed keys. Calculating the fingerprint on your own is something possible, but would require writing your own OpenPGP parser code which is probably not something you want to do.</p>
","2099","<php><encryption><gnupg><public-key><pgp>","3","3","1","2018-03-14 09:43:59","33086434","0","","695343","","2015-10-12 16:57:34","2015-10-12 14:42:04",""
"26211480","Use JKS keystore for public key authentication with Ganymed SSH","<p>I'm trying to extract a private key from a java keystore and then feed it to Ganymed SSH in order to establish a connection with public key authentication. It is however refusing to connect. </p>

<p>I can successfully connect through Cygwin (<code>ssh -i</code>) with files generated by the following program, but the program itself is unable to get past authentication on the same machine. What am I doing wrong? </p>

<p>I don't get an exception, <a href=""http://www.ganymed.ethz.ch/ssh2/javadoc/ch/ethz/ssh2/Connection.html#authenticateWithPublicKey%28java.lang.String,%20char[],%20java.lang.String%29"" rel=""nofollow"">Connection.authenticateWithPublicKey(String, char[], String)</a> simply returns false, so this should not be a formatting problem. It does not matter if I leave the private key unencrypted, the result is the same. Also, I was able to connect with a program similar to this with files generated by putty-gen and ssh-keygen.</p>

<p>You will need the following to compile (bouncycastle and ganymed):</p>

<ul>
<li><a href=""https://www.bouncycastle.org/download/bcprov-ext-jdk15on-151.jar"" rel=""nofollow"">bcprov</a></li>
<li><a href=""https://www.bouncycastle.org/download/bcpkix-jdk15on-151.jar"" rel=""nofollow"">bcpkix</a></li>
<li><a href=""http://central.maven.org/maven2/ch/ethz/ganymed/ganymed-ssh2/262/ganymed-ssh2-262.jar"" rel=""nofollow"">ganymed-ssh2</a></li>
</ul>

<p>Generate the keystore with:</p>

<pre><code>keytool -genkeypair -keystore keystore.jks -alias myalias -storepass password -keypass password -keyalg RSA -dname CN=myalias,O=example.com -storetype JKS -validity 365 -v
</code></pre>

<p>Code (expects host and port as args and the above keystore in working directory):</p>

<pre class=""lang-java prettyprint-override""><code>import ch.ethz.ssh2.Connection;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.security.GeneralSecurityException;
import java.security.Key;
import java.security.KeyStore;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.cert.Certificate;
import java.security.interfaces.DSAParams;
import java.security.interfaces.DSAPublicKey;
import java.security.interfaces.RSAPublicKey;
import javax.xml.bind.DatatypeConverter;
import org.bouncycastle.openssl.PEMEncryptor;
import org.bouncycastle.openssl.jcajce.JcaPEMWriter;
import org.bouncycastle.openssl.jcajce.JcePEMEncryptorBuilder;

public class KeystoreGanymedSSH {

    public static void main(String[] args)
            throws Exception {
        String keystorePath = ""keystore.jks"";
        char[] password = ""password"".toCharArray();
        String alias = ""myalias"";

        String host = args[0];
        int port = Integer.parseInt(args[1]);

        // keystore init
        KeyStore keystore = KeyStore.getInstance(""JKS"");
        InputStream in;
        try {
            in = new FileInputStream(keystorePath);
        } catch (FileNotFoundException ex) {
            System.out.println(""Generate keystore using this command:"");
            System.out.println(""keytool -genkeypair -keystore keystore.jks""
                    + "" -alias myalias -storepass password -keypass password""
                    + "" -keyalg RSA -dname CN=myalias,O=example.com -storetype""
                    + "" JKS -validity 365 -v"");
            throw ex;
        }
        try {
            keystore.load(in, password);
        } finally {
            in.close();
        }

        // get public key in OpenSSH format
        String authorizedKeysEntry = genAuthorizedKeysEntry(keystore, alias);
        if (authorizedKeysEntry == null) {
            throw new Exception(""could not generate authorized_keys entry"");
        }
        System.out.println(""Public key for pasting into OpenSSH authorized_keys file (always same):"");
        System.out.println(authorizedKeysEntry);
        System.out.println();

        Writer writer;

        // write to file
        writer = new OutputStreamWriter(
                new FileOutputStream(new File(""authorized_keys"")), ""UTF-8"");
        try {
            writer.write(authorizedKeysEntry);
        } finally {
            writer.close();
        }

        // obtain PEM encrypted char[]
        Key key = keystore.getKey(alias, password);
        writer = new CharArrayWriter();
        JcaPEMWriter pw = new JcaPEMWriter(writer);
        SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"");
        PEMEncryptor encryptor = new JcePEMEncryptorBuilder(""DES-EDE3-CBC"")
                .setSecureRandom(random).build(password);
        pw.writeObject(key, encryptor);
        pw.flush();
        char[] privateKey = ((CharArrayWriter)writer).toCharArray();

        System.out.println(""Encrypted private key (changes on each run):"");
        System.out.println(new String(privateKey));
        String name = ""RSA"".equals(key.getAlgorithm()) ? ""id_rsa"" : ""id_dsa"";
        writer = new OutputStreamWriter(
                new FileOutputStream(new File(name)), ""UTF-8"");
        try {
            writer.write(privateKey);
        } finally {
            writer.close();
        }

        // attempt ganymed connection   
        Connection connection = null;
        try {
            System.out.println(""Connecting to "" + host + "":"" + port);
            connection = new Connection(host, port);        
            connection.connect(); // no known_hosts

            if (!connection.isAuthMethodAvailable(alias, ""publickey"")) {
                System.out.println(""Public key auth is not available."");
                return;
            }

            boolean result = connection.authenticateWithPublicKey(
                    alias, privateKey, new String(password));

            System.out.println(result ? ""Authentication success."" : ""Authentication failure."");
        } finally {
            if (connection != null) {
                connection.close();
            }
        }

    }

    private static String genAuthorizedKeysEntry(
            KeyStore keystore, String alias) throws GeneralSecurityException, IOException {
        Certificate[] chain = keystore.getCertificateChain(alias);
        if (chain == null || chain.length &lt;= 0) {
            return null;
        }
        PublicKey publicKey = chain[0].getPublicKey();
        if (""RSA"".equals(publicKey.getAlgorithm())) {
            RSAPublicKey rsaPublicKey = (RSAPublicKey) publicKey;
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            DataOutputStream dos = new DataOutputStream(baos);
            String type = ""ssh-rsa"";
            dos.writeInt(type.getBytes(""UTF-8"").length);
            dos.write(type.getBytes(""UTF-8""));
            byte[] exponent = rsaPublicKey.getPublicExponent().toByteArray();
            dos.writeInt(exponent.length);
            dos.write(exponent);
            byte[] modulus = rsaPublicKey.getModulus().toByteArray();
            dos.writeInt(modulus.length);
            dos.write(modulus);
            String encoded = DatatypeConverter.printBase64Binary(
                    baos.toByteArray());
            return type + "" "" + encoded + "" "" + alias;
        } else if (""DSA"".equals(publicKey.getAlgorithm())) {
            DSAPublicKey dsaPublicKey = (DSAPublicKey) publicKey;
            DSAParams params = dsaPublicKey.getParams();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            DataOutputStream dos = new DataOutputStream(baos);
            String type = ""ssh-dss"";
            dos.writeInt(type.getBytes(""UTF-8"").length);
            dos.write(type.getBytes(""UTF-8""));
            byte[] p = params.getP().toByteArray();
            dos.writeInt(p.length);
            dos.write(p);
            byte[] q = params.getQ().toByteArray();
            dos.writeInt(q.length);
            dos.write(q);
            byte[] g = params.getG().toByteArray();
            dos.writeInt(g.length);
            dos.write(g);
            byte[] y = dsaPublicKey.getY().toByteArray();
            dos.writeInt(y.length);
            dos.write(y);
            String encoded = DatatypeConverter.printBase64Binary(
                    baos.toByteArray());
            return type + "" "" + encoded + "" "" + alias;
        } else {
            return null;
        }
    }
}
</code></pre>

<p>Sample output:</p>

<pre><code>Public key for pasting into OpenSSH authorized_keys file (always same):
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCJLXgRaVdbZNuCsTgUsw2UPGdEA4La8ggQZWkevgAEMrgF+YYT2uN6BYDgD7hzs3ZTLXz2KUQLkMe7xLvimAsg6YXUi46IGEkTSOBFR0yYj+12O2BNbAxOXLIDIMBK5bsDwnuOsFedbeILFU4DaV+igJKO1zHWNbmbmd4RlfrIgH7Blfce8zSVkEdLkqEmydbg4xmj6r+MlzA5HSNZJILivb1XYNnoLjRH1SwUC8Rj6bjgBdNEXLOH0FNpCatHk9R00GaSZjcDZRKNAKnBSEIpw01TKaJlyQUTGqYGjK7UIbbafwMuYKR1rIzkyh4Usxvd3FvMdmKQSUeCnZU296YF myalias

Encrypted private key (changes on each run):
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,86DF7B50D4E319F6

QGngqwq+NXQGee7pEVROnwvIX6cyzo9QjdKtlherLCIYQjD4zagCvCd4vOUmwe0S
g/KaPeq8tanU0KB6m/WfAsgfOAkR+ujIod0hkUoCZp/Jg9LO2Me7ZFDNW/cBqbW0
CifaqDmOVgJ+HnZHJouMZyPf+To8SDdMSJZQ/3Wc2ZQn6BIhEjLzdz0hSVXGz2Gs
wmVYy4oedjB2f+dQliEnwFXBOusRMfqgiPqkdQj38voipqYBmPHUYSity0HGsRlo
KgovSeQhEDPT8GyYVJcKZLV3BUipvNvKJBP613wBZsuCtvhUNNNOfVFeTkD8+7PG
q2YzF3nasOM471EHyj18zPZ+DdPQMDPHtpVFQXJCFlf7xlGVAesPPUFJICXFE5OZ
JRAJC8+7WuT8O974uT9zDLeV5XLJRJK6o8dYXtZBK0YMpZy91b9axYDeVQh+Sfd+
V/T5RQ2osXg72lDBtz6vzeyMGj+Y9PQwZb97tdRW1X/ON4Eiiz/+1SVeDbWilo29
gMSPl4wb379Dvi7Z+b5OTGoF+F1p7Cp48sUEgIP8vPXinoOhBLdy1zq8oNVbo7PS
M5+41PKL4ao8pL9BCOALZpzP2R9LxoHjjL1auaWMzKLECtiEDvgu4GJeTVXvg7sO
yptecswVCF8fY+pV8dTtYU3vUs4UsdC9PG9IhqeRbML9dX7htsgkBmHdYAq5WOS/
RREuU+jyrCnc6kpOhIK/1wMOoIMOBnJ8EJXpMJaZtNwOQr05bOfFvozOEe35JwnP
NElP7CYBIvQrTyfrRxtJE+ntQO+uJbIvxFDY0EoQJX6YPFr0V7rnWy4W1yH0Yv6E
pmwERGYr1lbBIpxjTzTwZ3r845EUEwiwEt3+xfepBh3HUXg/mZYUw4cEz3HbzZDT
tWRPFpsBaicfatzbqvL7Teq1V8baUj1CW0wrANZbHc0FvSzuHMygub2ARgM3QAMj
L5yaITjH8/Tnbew7jPi5kSTXdNUnAJf3M/m6DC7svJtx+1Xwd0tfzp3GHYLaT+Mm
vOu8R5g/JJvBVMTzP8gyI32jDViRuHHwyFOlyJ35IrRCkW8i+aBmG1iT2WANWRai
2ujX4Gc+M2VncUdFR9MoCxUOy/7qKDcGNMpk8sgIi6Pc8SLiodueiWP3W6AXJKvs
u5akyk7jj8zq9+fe85T/cZ8lYe81hd3oA/9b/9cs8sdlhTmYjfUr1FgFHNyFPwdV
QnyayxeAy3xvoYXBBr7JrmWXLDTHghhMBHGHW7imoLNN8QZtTF+pGWzsxNcAVbEz
kmLll9ki0CUIbfufszp/b05OBC2M0EHn9uW61bwbiZfWxhfTlC2zHNHpig6zQhHu
q8n//KgHB5LDctGHoeqlUwoLbt78wd0bAD23GeZ2q1CdB6FYxoMYL8FuVOnxoUh3
fquXzH0wjv3Qm4Rwit+8zSdbD/+QbtJ2c/ZguUy4T3phI5BGzhLh2IDO8T9B6y5B
MmTyFjfZjVj+zU4F0BAIzzLlYTl332ecMj87StoNazqIF5Dj2ZqjUtF46MDeMZjO
tRvpIi8bWBm78rFNC51TZSBcfw714yOxHsPU0PqUMQMCgXawcDkTt2645/+ZZQtk
-----END RSA PRIVATE KEY-----

Connecting to 10.0.3.138:22
Authentication failure.
</code></pre>

<p><strong>Edit01</strong></p>

<p>I've tried this with <a href=""http://www.jcraft.com/jsch/"" rel=""nofollow"">jsch</a> and <a href=""https://github.com/hierynomus/sshj"" rel=""nofollow"">sshj</a> and all of them fail to connect. There has to be something wrong with the above code for private key extraction. What baffles me is that I can connect with <code>ssh -i</code>. Also, if I load the above private key into putty-gen, I get the same authorized_keys string as in output from my program (already present in my remote machine's <code>.ssh/authorized_keys</code>). But if I save it as a ppk file and then try to establish a putty session with it, it doesn't go through either (server refused our key).</p>
","<p><strong>There's noting wrong with the code I posted.</strong> It was just a huge fail on my part. </p>

<p>I used the keystore alias name as a username which <em>did not exist as a user account</em> on the remote linux box. After creating the account, everything works. I was editing the wrong <code>authorized_keys</code> file (on some other account) and expecting it to work through some obscure dark magic known only to leprechauns, unicorns and apparently my brain.</p>

<p>As for why it worked when I did <code>ssh -i</code>... Defaults. Stupid defaults. I did not specify a username at all so it defaulted to the one Cygwin was currently using and it just so happened that it had the same name as the account on the remote where I was editing the <code>authorized_keys</code> file.</p>

<p>Great. Awesome. Just..perfect. I need to go find a bridge to throw myself off from now.</p>

<p>Doing what I do in my code works with ganymed, jsch and sshj (with some small modifications for the other two APIs).</p>
","2027","<java><ssh><keystore><private-key><public-key>","3","4","1","2014-10-06 14:06:35","","0","1","878469","","2014-10-06 12:17:48","2014-10-06 07:19:05",""
"8589330","Java RSA how to generate different public key?","<p>I have a problem with generating public key for RSA in java. I use KeyPairGenerator and I get public, private key, p, q and modulus. It is fine. But everytime public key is a 65537. Is there any posibility to generate different public key each time?</p>

<p>Code:</p>

<pre><code>KeyPair keys;
KeyPairGenerator generator;

try {
    generator = KeyPairGenerator.getInstance(""RSA"");
    generator.initialize(1024);
    keys = generator.genKeyPair();
} catch (NoSuchAlgorithmException ex) {} 
</code></pre>
","<p>The public key can't be simply 65537, since in RSA a public key is a pair (n,e) where n is the modulus and e is the exponent. Typically, the exponent is equal to 65537, and it is the modulus that changes. </p>

<p>So, in order to make sure you are generating different keys every time, check that the modulus is changing.</p>
","2018","<java><rsa><public-key>","1","1","2","2014-02-26 17:51:44","8590214","1","","1193534","","2014-02-26 17:51:44","2011-12-21 11:49:57",""
"8589330","Java RSA how to generate different public key?","<p>I have a problem with generating public key for RSA in java. I use KeyPairGenerator and I get public, private key, p, q and modulus. It is fine. But everytime public key is a 65537. Is there any posibility to generate different public key each time?</p>

<p>Code:</p>

<pre><code>KeyPair keys;
KeyPairGenerator generator;

try {
    generator = KeyPairGenerator.getInstance(""RSA"");
    generator.initialize(1024);
    keys = generator.genKeyPair();
} catch (NoSuchAlgorithmException ex) {} 
</code></pre>
","<p>The value 65537 is the <a href=""http://en.wikipedia.org/wiki/65537_%28number%29"" rel=""nofollow"">commonly used exponent of RSA keys</a>. It is nothing unusual that this value is fixed and has no security implications.</p>

<p>There are a number of known weak exponents known - but this value does not belong to it.</p>
","2018","<java><rsa><public-key>","1","3","2","2014-02-26 17:51:44","8590214","1","","1193534","","2014-02-26 17:51:44","2011-12-21 11:49:57",""
"1999234","Ruby net-ssh: How to authenticate with pubkey using a gateway","<p>I am trying to run a script in several machines I have at work, to gather some information about them, such as which OS they're running, what services run on them, some configurations, etc. I have a machine on which I log before ssh-ing to any of the other machines, because of the public key setup it has. From there, I can ssh into all of the other machines without being asked for my password.</p>

<p>What I want to do is to automate logging onto all of these machines from that one, but the script is running on my local machine. So I just learned about ruby-ssh-gateway and am trying that, but I can't seem to get pubkey authentication to work.</p>

<p>I do something like this:</p>

<pre><code>gateway = Net::SSH::Gateway.new('gatewaymachine', 'username', :password =&gt; 'password')
all_machines.each do |machine|
  gateway.ssh(machine, 'username') do |ssh|
    uname = ssh.exec!('uname -a')
    puts ""machine: #{machine}; OS: #{uname}""
  end
end
</code></pre>

<p>But I get a <code>Net::SSH::AuthenticationFailed</code> exception.</p>

<p>If, instead, I provide the password, like so:</p>

<pre><code>gateway.ssh(machine, 'username', :password =&gt; 'password')
</code></pre>

<p>it does work, but that's not viable, since passwords are not the same across machines.</p>

<p>Does anyone know how I can make this work?</p>

<p>Thanks.</p>
","<p>Are the machines you are talking to behind a NAT firewall?  If not, you don't need ruby-ssh-gateway.</p>

<p>Have you created a public key on the origin box, for the user which runs the program, and given that key to the target user on each target box?</p>

<pre><code>$ ssh-keygen -t dsa    # Only do this once
$ ssh-copy-id -i ~/.ssh/id_dsa.pub user@machine
(enter the password)
</code></pre>

<p>and to make sure the key is working:</p>

<pre><code>$ ssh user@machine      # should not ask for a password
</code></pre>

<p>Once you've done that, it's as simple as using system or backtick to shell out to ssh:</p>

<pre><code>system('ssh machine ""ls -l""')
</code></pre>
","1997","<ruby><authentication><ssh><public-key><net-ssh>","2","2","1","2010-01-04 20:17:45","2001935","0","2","","","","2010-01-04 12:23:38",""
"33079925","AsymmetricKeyParameter as byte[]","<p>I'm trying to do an ECDH key exchange using C# BouncyCastle. 
I have been successful in creating the necessary AsymmetricCipherKeyPair objects and I'm also able to generate the shared key of the other partys public key.</p>

<p>However, to actually exchange the public key, I need it as a byte[] or at least anything I can turn into raw data, since the protocol I'm using to transport the keys between the parties wont take any BouncyCastle object.</p>

<pre><code>   X9ECParameters ecPars = NistNamedCurves.GetByName(""P-521"");
  ECDomainParameters ecDomPars = new ECDomainParameters(ecPars.Curve, ecPars.G, ecPars.N, ecPars.H, ecPars.GetSeed());
  IAsymmetricCipherKeyPairGenerator gen = GeneratorUtilities.GetKeyPairGenerator(""ECDH"");
  gen.Init(new ECKeyGenerationParameters(ecDomPars, new SecureRandom()));

  AsymmetricCipherKeyPair keyPair = gen.GenerateKeyPair();
  IBasicAgreement keyAgreement = AgreementUtilities.GetBasicAgreement(""ECDH"");
  keyAgreement.Init(keyPair.Private);
</code></pre>

<p>So what I'm needing here is the key value of keyPair.Public as a byte[].</p>

<p>I hope you understand where I'm heading and can help me.</p>
","<p>If you have only an ECPublicKeyParameter 'pub' (i.e. from keyPair.Public), you can get the public point encoding:</p>

<pre><code>byte[] data = pub.Q.GetEncoded();
</code></pre>

<p>At the receiving end:</p>

<pre><code>ECCurve curve = ecDomPars.Curve;
ECPoint q = curve.DecodePoint(data);
ECPublicKeyParameter peerPub = new ECPublicKeyParameter(q, ecDomPars);
</code></pre>

<p>It's more typical to exchange certificates, or else you will have no assurance of whom you're ""agreeing"" with.</p>

<p>I'm a bit concerned that you might be ""rolling your own crypto protocol""; if this is for a real application, please consider using an existing protocol, maybe just TLS. </p>
","1992","<c#><bouncycastle><public-key><elliptic-curve><diffie-hellman>","1","1","1","2015-10-19 15:39:47","33218568","0","1","1364007","","2015-10-12 11:29:38","2015-10-12 11:25:46",""
"34324466","Crypto API RSA public key can decrypt data, is not asymmetric as expected","<p>The problem I am encountering is that I am able to decrypt data using the same RSA 2048-bit public key that was used to encrypt the data. It seems to me that this defeats the entire purpose of encrypting the data in the first place, if a public key can decrypt it. The only thing I can consider at this time is that I'm generating symmetric key exchange pairs when I think I'm generating asymmetric pairs.</p>

<p>The end-user purpose of this is to use it later for transmitting user credentials to be authenticated when using an application away from the office, when I am unable to use their cached credentials from their workstations on the domain. I would theoretically be able to then decrypt these credentials using <strong>only</strong> the private key. </p>

<p>I have produced a simple test class and code to reproduce my problem. The steps I'm taking are as follows:</p>

<ol>
<li>Acquire a context to Microsoft Enhanced Cryptographic Provider v1.0</li>
<li>Generate a public / private key pair.</li>
<li>Export the public and private key BLOBs to separate files.</li>
<li>Load up the public key and encrypt some simple text.</li>
<li>Attempt to decrypt the same encrypted text using the public key (I expected it to fail here except for when I'm using the private key - yet both work).</li>
</ol>

<p>TestEncryptDecrypt helper class: TestEncryptDecrypt.h</p>

<pre><code>#pragma once
#include &lt;Windows.h&gt;
#include &lt;wincrypt.h&gt;

class TestEncryptDecrypt
{
public:
    TestEncryptDecrypt()
    {
    }
    ~TestEncryptDecrypt()
    {
        if (hKey != NULL)
            CryptDestroyKey(hKey);

        if (hProvider != NULL)
            CryptReleaseContext(hProvider, 0);
    }

    BOOL InitializeProvider(LPCTSTR pszProvider, DWORD dwProvType)
    {
        if (hProvider != NULL)
        {
            if (!CryptReleaseContext(hProvider, 0))
                return 0;
        }

        return CryptAcquireContext(&amp;hProvider, NULL, pszProvider, dwProvType, 0);
    }

    BOOL Generate2048BitKeys(ALG_ID Algid)
    {
        DWORD dwFlags = (0x800 &lt;&lt; 16) | CRYPT_EXPORTABLE;
        return CryptGenKey(hProvider, Algid, dwFlags, &amp;hKey);
    }

    VOID ExportPrivatePublicKey(LPTSTR lpFileName)
    {
        if (hKey == NULL)
            return;

        DWORD dwDataLen = 0;
        BOOL exportResult = CryptExportKey(hKey, NULL, PRIVATEKEYBLOB, 0, NULL, &amp;dwDataLen);
        LPBYTE lpKeyBlob = (LPBYTE)malloc(dwDataLen);
        exportResult = CryptExportKey(hKey, NULL, PRIVATEKEYBLOB, 0, lpKeyBlob, &amp;dwDataLen);
        WriteBytesFile(lpFileName, lpKeyBlob, dwDataLen);
        free(lpKeyBlob);
    }

    VOID ExportPublicKey(LPTSTR lpFileName)
    {
        if (hKey == NULL)
            return;

        DWORD dwDataLen = 0;
        BOOL exportResult = CryptExportKey(hKey, NULL, PUBLICKEYBLOB, 0, NULL, &amp;dwDataLen);
        LPBYTE lpKeyBlob = (LPBYTE)malloc(dwDataLen);
        exportResult = CryptExportKey(hKey, NULL, PUBLICKEYBLOB, 0, lpKeyBlob, &amp;dwDataLen);
        WriteBytesFile(lpFileName, lpKeyBlob, dwDataLen);
        free(lpKeyBlob);
    }

    BOOL ImportKey(LPTSTR lpFileName)
    {
        if (hProvider == NULL)
            return 0;

        if (hKey != NULL)
            CryptDestroyKey(hKey);

        LPBYTE lpKeyContent = NULL;
        DWORD dwDataLen = 0;
        ReadBytesFile(lpFileName, &amp;lpKeyContent, &amp;dwDataLen);
        BOOL importResult = CryptImportKey(hProvider, lpKeyContent, dwDataLen, 0, 0, &amp;hKey);

        delete[] lpKeyContent;

        return importResult;
    }

    BOOL EncryptDataWriteToFile(LPTSTR lpSimpleDataToEncrypt, LPTSTR lpFileName)
    {
        DWORD SimpleDataToEncryptLength = _tcslen(lpSimpleDataToEncrypt)*sizeof(TCHAR);
        DWORD BufferLength = SimpleDataToEncryptLength * 10;
        BYTE *EncryptedBuffer = new BYTE[BufferLength];
        SecureZeroMemory(EncryptedBuffer, BufferLength);
        CopyMemory(EncryptedBuffer, lpSimpleDataToEncrypt, SimpleDataToEncryptLength);

        BOOL cryptResult = CryptEncrypt(hKey, NULL, TRUE, 0, EncryptedBuffer, &amp;SimpleDataToEncryptLength, BufferLength);
        DWORD dwGetLastError = GetLastError();

        WriteBytesFile(lpFileName, EncryptedBuffer, SimpleDataToEncryptLength);

        delete[] EncryptedBuffer;

        return cryptResult;
    }

    BOOL DecryptDataFromFile(LPBYTE *lpDecryptedData, LPTSTR lpFileName, DWORD *dwDecryptedLen)
    {
        if (hKey == NULL)
            return 0;

        LPBYTE lpEncryptedData = NULL;
        DWORD dwDataLen = 0;
        ReadBytesFile(lpFileName, &amp;lpEncryptedData, &amp;dwDataLen);
        BOOL decryptResult = CryptDecrypt(hKey, NULL, TRUE, 0, lpEncryptedData, &amp;dwDataLen);
        *dwDecryptedLen = dwDataLen;
        //WriteBytesFile(L""decryptedtest.txt"", lpEncryptedData, dwDataLen);
        *lpDecryptedData = new BYTE[dwDataLen + 1];
        SecureZeroMemory(*lpDecryptedData, dwDataLen + 1);
        CopyMemory(*lpDecryptedData, lpEncryptedData, dwDataLen);

        delete[]lpEncryptedData;

        return decryptResult;
    }

    VOID WriteBytesFile(LPTSTR lpFileName, BYTE *content, DWORD dwDataLen)
    {
        HANDLE hFile = CreateFile(lpFileName, GENERIC_READ | GENERIC_WRITE, 0x7, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
        DWORD dwBytesWritten = 0;
        WriteFile(hFile, content, dwDataLen, &amp;dwBytesWritten, NULL);
        CloseHandle(hFile);
    }

private:
    HCRYPTPROV hProvider = NULL;
    HCRYPTKEY hKey = NULL;

    VOID ReadBytesFile(LPTSTR lpFileName, BYTE **content, DWORD *dwDataLen)
    {
        HANDLE hFile = CreateFile(lpFileName, GENERIC_READ, 0x7, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        DWORD dwFileLength = 0;
        DWORD dwBytesToRead = GetFileSize(hFile, NULL);
        DWORD dwBytesRead = 0;

        *content = new BYTE[dwBytesToRead + 1];
        SecureZeroMemory(*content, dwBytesToRead + 1);

        ReadFile(hFile, *content, dwBytesToRead, &amp;dwBytesRead, NULL);

        *dwDataLen = dwBytesRead;

        CloseHandle(hFile);
    }
};
</code></pre>

<p>Test Code: Main .cpp file</p>

<pre><code>#include ""stdafx.h""
#include ""TestEncryptDecrypt.h""
#include &lt;Windows.h&gt;
#include &lt;wincrypt.h&gt;

int main()
{
    TestEncryptDecrypt *edc = new TestEncryptDecrypt();
    //Initialize the provider
    edc-&gt;InitializeProvider(MS_ENHANCED_PROV, PROV_RSA_FULL);

    //Generate a 2048-bit asymmetric key pair
    edc-&gt;Generate2048BitKeys(CALG_RSA_KEYX);

    //Export the private / public key pair
    edc-&gt;ExportPrivatePublicKey(L""privpubkey.txt"");

    //Export only the public key
    edc-&gt;ExportPublicKey(L""pubkey.txt"");

    //Import the public key (destroys the private/public key pair already set)
    edc-&gt;ImportKey(L""pubkey.txt"");

    //Encrypt and write some test data to file
    edc-&gt;EncryptDataWriteToFile(TEXT(""Hello World!ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz""), L""encrypteddata.txt"");

    //Decrypt the data from file using the same public key (this should fail but it doesn't)
    DWORD dwDataLen = 0;
    LPBYTE lpDecryptedData = NULL;
    edc-&gt;DecryptDataFromFile(&amp;lpDecryptedData, L""encrypteddata.txt"", &amp;dwDataLen);

    //Write the supposedly decrypted data to another file
    edc-&gt;WriteBytesFile(L""decrypteddata.txt"", lpDecryptedData, dwDataLen);

    //Clear data
    delete[] lpDecryptedData;
    delete edc;

    return 0;
}
</code></pre>

<p>Unfortunately I don't get the opportunity to work with C++ very often so you may notice some problems. Feel free to constructively criticize.</p>

<p>Does anyone know why I am able to decrypt data using the same public key?
My goal is to be able to irreversibly encrypt something on the client side where it can only be decrypted on the server, where the private key will hide. </p>

<p><strong>Edit:</strong>
I had considered that the hKey wasn't being destroyed properly by the ImportKey method, so I wrote this test case instead (same results - public key can encrypt and decrypt the data):</p>

<pre><code>// CPPTests.cpp : Defines the entry point for the console application.
//

#include ""stdafx.h""
#include ""TestEncryptDecrypt.h""
#include &lt;Windows.h&gt;
#include &lt;wincrypt.h&gt;

int main()
{
    TestEncryptDecrypt *edc = new TestEncryptDecrypt();
    //Initialize the provider
    edc-&gt;InitializeProvider(MS_ENHANCED_PROV, PROV_RSA_FULL);

    //Generate a 2048-bit asymmetric key pair
    edc-&gt;Generate2048BitKeys(CALG_RSA_KEYX);

    //Export the private / public key pair
    edc-&gt;ExportPrivatePublicKey(L""privpubkey.txt"");

    //Export only the public key
    edc-&gt;ExportPublicKey(L""pubkey.txt"");

    //Destroy everything and load up only the public key to write some encrypted data
    delete edc;
    edc = new TestEncryptDecrypt();
    edc-&gt;InitializeProvider(MS_ENHANCED_PROV, PROV_RSA_FULL);
    edc-&gt;ImportKey(L""pubkey.txt"");

    //Encrypt and write some test data to file
    edc-&gt;EncryptDataWriteToFile(TEXT(""Hello World!ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz""), L""encrypteddata.txt"");

    //Destroy everything and load up only the public key to read some encrypted data
    delete edc;
    edc = new TestEncryptDecrypt();
    edc-&gt;InitializeProvider(MS_ENHANCED_PROV, PROV_RSA_FULL);
    edc-&gt;ImportKey(L""pubkey.txt"");

    //Decrypt the data from file using the same public key (this should fail but it doesn't)
    DWORD dwDataLen = 0;
    LPBYTE lpDecryptedData = NULL;
    edc-&gt;DecryptDataFromFile(&amp;lpDecryptedData, L""encrypteddata.txt"", &amp;dwDataLen);

    //Write the supposedly decrypted data to another file
    edc-&gt;WriteBytesFile(L""decrypteddata.txt"", lpDecryptedData, dwDataLen);

    //Clear data
    delete[] lpDecryptedData;
    delete edc;

    return 0;
}
</code></pre>
","<p>The problem is that for some reason Crypto API, using the Microsoft Enhanced Provider w/ RSA, produces symmetrical keys. I am unable to get it to produce asymmetrical keys. The algorithm will, however, work with asymmetrical keys. So this is good news for us. This means to get this to work we only have to generate keys. You could also export these from self signed certificates, use your companies CA, etc.</p>

<p>To solve this I produced a public/private key pair using OpenSSL. I compiled OpenSSL for Windows just for fun then ran the following statements to get myself a pair of unencrypted public/private key files:</p>

<ol>
<li><p>openssl genpkey -out private2.pem -outform PEM -des3 -algorithm RSA -pkeyopt rsa_keygen_bits:2048</p>

<p>or</p>

<p>openssl genrsa -des3 -out private.pem 2048</p></li>
<li><p>openssl rsa -in private.pem -outform PEM -pubout -out public.pem</p></li>
<li>openssl rsa -in private.pem -outform PEM -out private_unencrypted.pem</li>
</ol>

<p>Once I had those I added 2 new functions to my test helper class, ImportPublicKey and ImportPrivateKey. These will only import PEM files without a passphrase. I don't consider that much of a security threat, considering the public is public and the private should hide on a secure server somewhere, perhaps encoded with a hash.</p>

<p>TestEncryptDecrypt.h</p>

<pre><code>#pragma once
#include &lt;Windows.h&gt;
#include &lt;wincrypt.h&gt;

class TestEncryptDecrypt
{
public:
    TestEncryptDecrypt()
    {
    }
    ~TestEncryptDecrypt()
    {
        if (hKey != NULL)
            CryptDestroyKey(hKey);

        if (hProvider != NULL)
            CryptReleaseContext(hProvider, 0);
    }

    BOOL InitializeProvider(LPCTSTR pszProvider, DWORD dwProvType)
    {
        if (hProvider != NULL)
        {
            if (!CryptReleaseContext(hProvider, 0))
                return 0;
        }

        return CryptAcquireContext(&amp;hProvider, NULL, pszProvider, dwProvType, CRYPT_VERIFYCONTEXT);
    }

    BOOL Generate2048BitKeys(ALG_ID Algid)
    {
        DWORD dwFlags = (0x800 &lt;&lt; 16) | CRYPT_EXPORTABLE;
        return CryptGenKey(hProvider, Algid, dwFlags, &amp;hKey);
    }

    VOID ExportPrivatePublicKey(LPTSTR lpFileName)
    {
        if (hKey == NULL)
            return;

        DWORD dwDataLen = 0;
        BOOL exportResult = CryptExportKey(hKey, NULL, PRIVATEKEYBLOB, 0, NULL, &amp;dwDataLen);
        LPBYTE lpKeyBlob = (LPBYTE)malloc(dwDataLen);
        exportResult = CryptExportKey(hKey, NULL, PRIVATEKEYBLOB, 0, lpKeyBlob, &amp;dwDataLen);
        WriteBytesFile(lpFileName, lpKeyBlob, dwDataLen);
        free(lpKeyBlob);
    }

    VOID ExportPublicKey(LPTSTR lpFileName)
    {
        if (hKey == NULL)
            return;

        DWORD dwDataLen = 0;
        BOOL exportResult = CryptExportKey(hKey, NULL, PUBLICKEYBLOB, 0, NULL, &amp;dwDataLen);
        LPBYTE lpKeyBlob = (LPBYTE)malloc(dwDataLen);
        exportResult = CryptExportKey(hKey, NULL, PUBLICKEYBLOB, 0, lpKeyBlob, &amp;dwDataLen);
        WriteBytesFile(lpFileName, lpKeyBlob, dwDataLen);
        free(lpKeyBlob);
    }

    BOOL ImportKey(LPTSTR lpFileName)
    {
        if (hProvider == NULL)
            return 0;

        if (hKey != NULL)
            CryptDestroyKey(hKey);

        LPBYTE lpKeyContent = NULL;
        DWORD dwDataLen = 0;
        ReadBytesFile(lpFileName, &amp;lpKeyContent, &amp;dwDataLen);
        BOOL importResult = CryptImportKey(hProvider, lpKeyContent, dwDataLen, 0, 0, &amp;hKey);

        delete[] lpKeyContent;

        return importResult;
    }

    BOOL ImportPublicKey(LPTSTR lpFileName)
    {
        //If a context doesn't exist acquire one
        if (hProvider == NULL)
        {
            BOOL result = CryptAcquireContext(&amp;hProvider, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);
            if (!result)
                return result;
        }

        if (hKey != NULL)
            CryptDestroyKey(hKey);

        //Load the PEM 
        LPBYTE PublicBytes = NULL;
        DWORD dwDataLen = 0;
        ReadBytesFile(lpFileName, &amp;PublicBytes, &amp;dwDataLen);

        //Convert to Unicode
        int PublicPEMSize = MultiByteToWideChar(CP_ACP, 0, (LPCCH)PublicBytes, -1, NULL, 0);
        TCHAR *PublicPEM = new TCHAR[PublicPEMSize];
        MultiByteToWideChar(CP_ACP, 0, (LPCCH)PublicBytes, -1, PublicPEM, PublicPEMSize);
        delete[]PublicBytes;

        //Convert PEM to DER
        LPBYTE PublicDER = NULL;
        DWORD dwPublicDERLen = 0;

        BOOL result = CryptStringToBinary(PublicPEM, 0, CRYPT_STRING_BASE64HEADER, NULL, &amp;dwPublicDERLen, NULL, NULL);
        if (!result)
            return result;

        PublicDER = new BYTE[dwPublicDERLen];
        result = CryptStringToBinary(PublicPEM, 0, CRYPT_STRING_BASE64HEADER, PublicDER, &amp;dwPublicDERLen, NULL, NULL);
        if (!result)
            return result;

        delete[] PublicPEM;

        //Decode the object into a public key info struct
        CERT_PUBLIC_KEY_INFO *PublicKeyInfo = NULL;
        DWORD dwPublicKeyInfoLen = 0;

        result = CryptDecodeObjectEx(X509_ASN_ENCODING, X509_PUBLIC_KEY_INFO, PublicDER, dwPublicDERLen, CRYPT_ENCODE_ALLOC_FLAG, NULL, &amp;PublicKeyInfo, &amp;dwPublicKeyInfoLen);
        if (!result)
            return result;

        //Import the public key
        result = CryptImportPublicKeyInfo(hProvider, X509_ASN_ENCODING, PublicKeyInfo, &amp;hKey);
        if (!result)
            return result;


        //cleanup
        delete[] PublicDER;
        LocalFree(PublicKeyInfo);

        return result;
    }

    BOOL ImportPrivateKey(LPTSTR lpFileName)
    {
        //If a context doesn't exist acquire one
        if (hProvider == NULL)
        {
            BOOL result = CryptAcquireContext(&amp;hProvider, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);
            if (!result)
                return result;
        }

        if (hKey != NULL)
            CryptDestroyKey(hKey);

        //Load the PEM 
        LPBYTE PrivateBytes = NULL;
        DWORD dwDataLen = 0;
        ReadBytesFile(lpFileName, &amp;PrivateBytes, &amp;dwDataLen);

        //Convert to Unicode
        int PrivatePEMSize = MultiByteToWideChar(CP_ACP, 0, (LPCCH)PrivateBytes, -1, NULL, 0);
        TCHAR *PrivatePEM = new TCHAR[PrivatePEMSize];
        MultiByteToWideChar(CP_ACP, 0, (LPCCH)PrivateBytes, -1, PrivatePEM, PrivatePEMSize);
        delete[]PrivateBytes;

        //Convert PEM to DER
        LPBYTE PrivateDER = NULL;
        DWORD dwPrivateDERLen = 0;

        BOOL result = CryptStringToBinary(PrivatePEM, 0, CRYPT_STRING_BASE64HEADER, NULL, &amp;dwPrivateDERLen, NULL, NULL);
        if (!result)
            return result;

        PrivateDER = new BYTE[dwPrivateDERLen];
        result = CryptStringToBinary(PrivatePEM, 0, CRYPT_STRING_BASE64HEADER, PrivateDER, &amp;dwPrivateDERLen, NULL, NULL);
        if (!result)
            return result;

        delete[] PrivatePEM;

        //Decode the object into a private key info struct
        BYTE *PrivateKeyInfo = NULL;
        DWORD dwPrivateKeyInfoLen = 0;

        result = CryptDecodeObjectEx(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, PKCS_RSA_PRIVATE_KEY, PrivateDER, dwPrivateDERLen, 0, NULL, NULL, &amp;dwPrivateKeyInfoLen);
        if (!result)
            return result;

        PrivateKeyInfo = new BYTE[dwPrivateKeyInfoLen];

        result = CryptDecodeObjectEx(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING, PKCS_RSA_PRIVATE_KEY, PrivateDER, dwPrivateDERLen, 0, NULL, PrivateKeyInfo, &amp;dwPrivateKeyInfoLen);
        if (!result)
            return result;



        //Import the private key
        result = CryptImportKey(hProvider, PrivateKeyInfo, dwPrivateKeyInfoLen, NULL, 0, &amp;hKey);
        if (!result)
            return result;


        //cleanup
        delete[] PrivateDER;
        delete[] PrivateKeyInfo;

        return result;
    }

    BOOL EncryptDataWriteToFile(LPTSTR lpSimpleDataToEncrypt, LPTSTR lpFileName)
    {
        DWORD SimpleDataToEncryptLength = _tcslen(lpSimpleDataToEncrypt)*sizeof(TCHAR);
        DWORD BufferLength = SimpleDataToEncryptLength * 10;
        BYTE *EncryptedBuffer = new BYTE[BufferLength];
        SecureZeroMemory(EncryptedBuffer, BufferLength);
        CopyMemory(EncryptedBuffer, lpSimpleDataToEncrypt, SimpleDataToEncryptLength);

        BOOL cryptResult = CryptEncrypt(hKey, NULL, TRUE, 0, EncryptedBuffer, &amp;SimpleDataToEncryptLength, BufferLength);
        DWORD dwGetLastError = GetLastError();

        WriteBytesFile(lpFileName, EncryptedBuffer, SimpleDataToEncryptLength);

        delete[] EncryptedBuffer;

        return cryptResult;
    }

    BOOL DecryptDataFromFile(LPBYTE *lpDecryptedData, LPTSTR lpFileName, DWORD *dwDecryptedLen)
    {
        if (hKey == NULL)
            return 0;

        LPBYTE lpEncryptedData = NULL;
        DWORD dwDataLen = 0;
        ReadBytesFile(lpFileName, &amp;lpEncryptedData, &amp;dwDataLen);
        BOOL decryptResult = CryptDecrypt(hKey, NULL, TRUE, 0, lpEncryptedData, &amp;dwDataLen);
        *dwDecryptedLen = dwDataLen;
        //WriteBytesFile(L""decryptedtest.txt"", lpEncryptedData, dwDataLen);
        *lpDecryptedData = new BYTE[dwDataLen + 1];
        SecureZeroMemory(*lpDecryptedData, dwDataLen + 1);
        CopyMemory(*lpDecryptedData, lpEncryptedData, dwDataLen);

        delete[]lpEncryptedData;

        return decryptResult;
    }

    VOID WriteBytesFile(LPTSTR lpFileName, BYTE *content, DWORD dwDataLen)
    {
        HANDLE hFile = CreateFile(lpFileName, GENERIC_READ | GENERIC_WRITE, 0x7, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
        DWORD dwBytesWritten = 0;
        WriteFile(hFile, content, dwDataLen, &amp;dwBytesWritten, NULL);
        CloseHandle(hFile);
    }

private:
    HCRYPTPROV hProvider = NULL;
    HCRYPTKEY hKey = NULL;

    VOID ReadBytesFile(LPTSTR lpFileName, BYTE **content, DWORD *dwDataLen)
    {
        HANDLE hFile = CreateFile(lpFileName, GENERIC_READ, 0x7, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        DWORD dwFileLength = 0;
        DWORD dwBytesToRead = GetFileSize(hFile, NULL);
        DWORD dwBytesRead = 0;

        *content = new BYTE[dwBytesToRead + 1];
        SecureZeroMemory(*content, dwBytesToRead + 1);

        ReadFile(hFile, *content, dwBytesToRead, &amp;dwBytesRead, NULL);

        *dwDataLen = dwBytesRead;

        CloseHandle(hFile);
    }
};
</code></pre>

<p>And here's the test, providing proof that it cannot decrypt using the public key but instead the private key .pem:</p>

<pre><code>int main()
{
    TestEncryptDecrypt *edc = new TestEncryptDecrypt();
    edc-&gt;ImportPublicKey(L""public.pem"");
    edc-&gt;EncryptDataWriteToFile(L""Hello world! hahahahah"", L""encrypted.txt"");

    LPBYTE decodedData = NULL; DWORD decodedLen = 0;
    BOOL result = edc-&gt;DecryptDataFromFile(&amp;decodedData, L""encrypted.txt"", &amp;decodedLen);
    if (result == 1)
        OutputDebugString(L""We were able to decrypt from a public key! That's not good."");

    result = edc-&gt;ImportPrivateKey(L""private_unencrypted.pem"");
    result = edc-&gt;DecryptDataFromFile(&amp;decodedData, L""encrypted.txt"", &amp;decodedLen);
    edc-&gt;WriteBytesFile(L""decrypted.txt"", decodedData, decodedLen);
    return 0;
}
</code></pre>
","1975","<c++><encryption><rsa><public-key><cryptoapi>","4","0","2","2019-08-27 08:08:51","44112149","5","1","3870427","","2015-12-17 00:53:42","2015-12-17 00:06:51",""
"34324466","Crypto API RSA public key can decrypt data, is not asymmetric as expected","<p>The problem I am encountering is that I am able to decrypt data using the same RSA 2048-bit public key that was used to encrypt the data. It seems to me that this defeats the entire purpose of encrypting the data in the first place, if a public key can decrypt it. The only thing I can consider at this time is that I'm generating symmetric key exchange pairs when I think I'm generating asymmetric pairs.</p>

<p>The end-user purpose of this is to use it later for transmitting user credentials to be authenticated when using an application away from the office, when I am unable to use their cached credentials from their workstations on the domain. I would theoretically be able to then decrypt these credentials using <strong>only</strong> the private key. </p>

<p>I have produced a simple test class and code to reproduce my problem. The steps I'm taking are as follows:</p>

<ol>
<li>Acquire a context to Microsoft Enhanced Cryptographic Provider v1.0</li>
<li>Generate a public / private key pair.</li>
<li>Export the public and private key BLOBs to separate files.</li>
<li>Load up the public key and encrypt some simple text.</li>
<li>Attempt to decrypt the same encrypted text using the public key (I expected it to fail here except for when I'm using the private key - yet both work).</li>
</ol>

<p>TestEncryptDecrypt helper class: TestEncryptDecrypt.h</p>

<pre><code>#pragma once
#include &lt;Windows.h&gt;
#include &lt;wincrypt.h&gt;

class TestEncryptDecrypt
{
public:
    TestEncryptDecrypt()
    {
    }
    ~TestEncryptDecrypt()
    {
        if (hKey != NULL)
            CryptDestroyKey(hKey);

        if (hProvider != NULL)
            CryptReleaseContext(hProvider, 0);
    }

    BOOL InitializeProvider(LPCTSTR pszProvider, DWORD dwProvType)
    {
        if (hProvider != NULL)
        {
            if (!CryptReleaseContext(hProvider, 0))
                return 0;
        }

        return CryptAcquireContext(&amp;hProvider, NULL, pszProvider, dwProvType, 0);
    }

    BOOL Generate2048BitKeys(ALG_ID Algid)
    {
        DWORD dwFlags = (0x800 &lt;&lt; 16) | CRYPT_EXPORTABLE;
        return CryptGenKey(hProvider, Algid, dwFlags, &amp;hKey);
    }

    VOID ExportPrivatePublicKey(LPTSTR lpFileName)
    {
        if (hKey == NULL)
            return;

        DWORD dwDataLen = 0;
        BOOL exportResult = CryptExportKey(hKey, NULL, PRIVATEKEYBLOB, 0, NULL, &amp;dwDataLen);
        LPBYTE lpKeyBlob = (LPBYTE)malloc(dwDataLen);
        exportResult = CryptExportKey(hKey, NULL, PRIVATEKEYBLOB, 0, lpKeyBlob, &amp;dwDataLen);
        WriteBytesFile(lpFileName, lpKeyBlob, dwDataLen);
        free(lpKeyBlob);
    }

    VOID ExportPublicKey(LPTSTR lpFileName)
    {
        if (hKey == NULL)
            return;

        DWORD dwDataLen = 0;
        BOOL exportResult = CryptExportKey(hKey, NULL, PUBLICKEYBLOB, 0, NULL, &amp;dwDataLen);
        LPBYTE lpKeyBlob = (LPBYTE)malloc(dwDataLen);
        exportResult = CryptExportKey(hKey, NULL, PUBLICKEYBLOB, 0, lpKeyBlob, &amp;dwDataLen);
        WriteBytesFile(lpFileName, lpKeyBlob, dwDataLen);
        free(lpKeyBlob);
    }

    BOOL ImportKey(LPTSTR lpFileName)
    {
        if (hProvider == NULL)
            return 0;

        if (hKey != NULL)
            CryptDestroyKey(hKey);

        LPBYTE lpKeyContent = NULL;
        DWORD dwDataLen = 0;
        ReadBytesFile(lpFileName, &amp;lpKeyContent, &amp;dwDataLen);
        BOOL importResult = CryptImportKey(hProvider, lpKeyContent, dwDataLen, 0, 0, &amp;hKey);

        delete[] lpKeyContent;

        return importResult;
    }

    BOOL EncryptDataWriteToFile(LPTSTR lpSimpleDataToEncrypt, LPTSTR lpFileName)
    {
        DWORD SimpleDataToEncryptLength = _tcslen(lpSimpleDataToEncrypt)*sizeof(TCHAR);
        DWORD BufferLength = SimpleDataToEncryptLength * 10;
        BYTE *EncryptedBuffer = new BYTE[BufferLength];
        SecureZeroMemory(EncryptedBuffer, BufferLength);
        CopyMemory(EncryptedBuffer, lpSimpleDataToEncrypt, SimpleDataToEncryptLength);

        BOOL cryptResult = CryptEncrypt(hKey, NULL, TRUE, 0, EncryptedBuffer, &amp;SimpleDataToEncryptLength, BufferLength);
        DWORD dwGetLastError = GetLastError();

        WriteBytesFile(lpFileName, EncryptedBuffer, SimpleDataToEncryptLength);

        delete[] EncryptedBuffer;

        return cryptResult;
    }

    BOOL DecryptDataFromFile(LPBYTE *lpDecryptedData, LPTSTR lpFileName, DWORD *dwDecryptedLen)
    {
        if (hKey == NULL)
            return 0;

        LPBYTE lpEncryptedData = NULL;
        DWORD dwDataLen = 0;
        ReadBytesFile(lpFileName, &amp;lpEncryptedData, &amp;dwDataLen);
        BOOL decryptResult = CryptDecrypt(hKey, NULL, TRUE, 0, lpEncryptedData, &amp;dwDataLen);
        *dwDecryptedLen = dwDataLen;
        //WriteBytesFile(L""decryptedtest.txt"", lpEncryptedData, dwDataLen);
        *lpDecryptedData = new BYTE[dwDataLen + 1];
        SecureZeroMemory(*lpDecryptedData, dwDataLen + 1);
        CopyMemory(*lpDecryptedData, lpEncryptedData, dwDataLen);

        delete[]lpEncryptedData;

        return decryptResult;
    }

    VOID WriteBytesFile(LPTSTR lpFileName, BYTE *content, DWORD dwDataLen)
    {
        HANDLE hFile = CreateFile(lpFileName, GENERIC_READ | GENERIC_WRITE, 0x7, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
        DWORD dwBytesWritten = 0;
        WriteFile(hFile, content, dwDataLen, &amp;dwBytesWritten, NULL);
        CloseHandle(hFile);
    }

private:
    HCRYPTPROV hProvider = NULL;
    HCRYPTKEY hKey = NULL;

    VOID ReadBytesFile(LPTSTR lpFileName, BYTE **content, DWORD *dwDataLen)
    {
        HANDLE hFile = CreateFile(lpFileName, GENERIC_READ, 0x7, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        DWORD dwFileLength = 0;
        DWORD dwBytesToRead = GetFileSize(hFile, NULL);
        DWORD dwBytesRead = 0;

        *content = new BYTE[dwBytesToRead + 1];
        SecureZeroMemory(*content, dwBytesToRead + 1);

        ReadFile(hFile, *content, dwBytesToRead, &amp;dwBytesRead, NULL);

        *dwDataLen = dwBytesRead;

        CloseHandle(hFile);
    }
};
</code></pre>

<p>Test Code: Main .cpp file</p>

<pre><code>#include ""stdafx.h""
#include ""TestEncryptDecrypt.h""
#include &lt;Windows.h&gt;
#include &lt;wincrypt.h&gt;

int main()
{
    TestEncryptDecrypt *edc = new TestEncryptDecrypt();
    //Initialize the provider
    edc-&gt;InitializeProvider(MS_ENHANCED_PROV, PROV_RSA_FULL);

    //Generate a 2048-bit asymmetric key pair
    edc-&gt;Generate2048BitKeys(CALG_RSA_KEYX);

    //Export the private / public key pair
    edc-&gt;ExportPrivatePublicKey(L""privpubkey.txt"");

    //Export only the public key
    edc-&gt;ExportPublicKey(L""pubkey.txt"");

    //Import the public key (destroys the private/public key pair already set)
    edc-&gt;ImportKey(L""pubkey.txt"");

    //Encrypt and write some test data to file
    edc-&gt;EncryptDataWriteToFile(TEXT(""Hello World!ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz""), L""encrypteddata.txt"");

    //Decrypt the data from file using the same public key (this should fail but it doesn't)
    DWORD dwDataLen = 0;
    LPBYTE lpDecryptedData = NULL;
    edc-&gt;DecryptDataFromFile(&amp;lpDecryptedData, L""encrypteddata.txt"", &amp;dwDataLen);

    //Write the supposedly decrypted data to another file
    edc-&gt;WriteBytesFile(L""decrypteddata.txt"", lpDecryptedData, dwDataLen);

    //Clear data
    delete[] lpDecryptedData;
    delete edc;

    return 0;
}
</code></pre>

<p>Unfortunately I don't get the opportunity to work with C++ very often so you may notice some problems. Feel free to constructively criticize.</p>

<p>Does anyone know why I am able to decrypt data using the same public key?
My goal is to be able to irreversibly encrypt something on the client side where it can only be decrypted on the server, where the private key will hide. </p>

<p><strong>Edit:</strong>
I had considered that the hKey wasn't being destroyed properly by the ImportKey method, so I wrote this test case instead (same results - public key can encrypt and decrypt the data):</p>

<pre><code>// CPPTests.cpp : Defines the entry point for the console application.
//

#include ""stdafx.h""
#include ""TestEncryptDecrypt.h""
#include &lt;Windows.h&gt;
#include &lt;wincrypt.h&gt;

int main()
{
    TestEncryptDecrypt *edc = new TestEncryptDecrypt();
    //Initialize the provider
    edc-&gt;InitializeProvider(MS_ENHANCED_PROV, PROV_RSA_FULL);

    //Generate a 2048-bit asymmetric key pair
    edc-&gt;Generate2048BitKeys(CALG_RSA_KEYX);

    //Export the private / public key pair
    edc-&gt;ExportPrivatePublicKey(L""privpubkey.txt"");

    //Export only the public key
    edc-&gt;ExportPublicKey(L""pubkey.txt"");

    //Destroy everything and load up only the public key to write some encrypted data
    delete edc;
    edc = new TestEncryptDecrypt();
    edc-&gt;InitializeProvider(MS_ENHANCED_PROV, PROV_RSA_FULL);
    edc-&gt;ImportKey(L""pubkey.txt"");

    //Encrypt and write some test data to file
    edc-&gt;EncryptDataWriteToFile(TEXT(""Hello World!ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz""), L""encrypteddata.txt"");

    //Destroy everything and load up only the public key to read some encrypted data
    delete edc;
    edc = new TestEncryptDecrypt();
    edc-&gt;InitializeProvider(MS_ENHANCED_PROV, PROV_RSA_FULL);
    edc-&gt;ImportKey(L""pubkey.txt"");

    //Decrypt the data from file using the same public key (this should fail but it doesn't)
    DWORD dwDataLen = 0;
    LPBYTE lpDecryptedData = NULL;
    edc-&gt;DecryptDataFromFile(&amp;lpDecryptedData, L""encrypteddata.txt"", &amp;dwDataLen);

    //Write the supposedly decrypted data to another file
    edc-&gt;WriteBytesFile(L""decrypteddata.txt"", lpDecryptedData, dwDataLen);

    //Clear data
    delete[] lpDecryptedData;
    delete edc;

    return 0;
}
</code></pre>
","<p><strong>This API is deprecated <a href=""https://docs.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-cryptacquirecontexta"" rel=""nofollow noreferrer"">according to Microsoft</a>, so if you came here looking for a native cryptography API, you may want to look elsewhere.</strong></p>

<p>After some fighting with the same problem I realized where the error was.</p>

<p>In your first code you were acquiring your context with the last flag set to zero:</p>

<pre><code>CryptAcquireContext(&amp;hProvider, NULL, pszProvider, dwProvType, 0);
</code></pre>

<p>But in your solution you changed it into CRYPT_VERIFYCONTEXT.</p>

<pre><code>CryptAcquireContext(&amp;hProvider, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);
</code></pre>

<p>You solved your problem by changing this flag, not by importing the keys from OpenSSL. I am pretty sure that if you test this in your initial code, it will work as expected.</p>

<p>This CRYPT_VERIFYCONTEXT flag is responsible for not allowing a key to achieve persistence in the system, a persistence which turned the public RSA able to encrypt and decrypt.</p>
","1975","<c++><encryption><rsa><public-key><cryptoapi>","4","3","2","2019-08-27 08:08:51","44112149","5","1","3870427","","2015-12-17 00:53:42","2015-12-17 00:06:51",""
"20039195","fail to ssh remote host with error message ""Permission denied (publickey)""","<p>Recently,I meet problem with ssh remote host.</p>

<p>At first,I can ssh the remote host when the ""PasswordAuthentication"" parameter is ""yes"" in the /etc/ssh/sshd_config file.</p>

<p>However,after I changing the ""PasswordAuthentication"" parameter to ""no"" in the /etc/ssh/sshd_config file,I fail to ssh remote host.</p>

<p>I know my problem is about PublicKey,because I have these parameters in my /etc/ssh/sshd_config file:</p>

<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
PermitRootLogin yes
</code></pre>

<p>The result of ""# ssh root@172.17.4.17 -VVV"" looks like that,</p>

<pre><code>debug1: Server host key: RSA 8a:bb:7f:d0:61:69:cc:b2:a1:a0:16:be:52:c1:5c:94
debug3: load_hostkeys: loading entries for host ""172.17.4.17"" from file ""/home/jundu/.ssh/known_hosts""
debug3: load_hostkeys: found key type RSA in file /home/jundu/.ssh/known_hosts:12
debug3: load_hostkeys: loaded 1 keys
debug1: Host '172.17.4.17' is known and matches the RSA host key.
debug1: Found key in /home/jundu/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug2: kex_derive_keys
debug2: set_newkeys: mode 1
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug2: set_newkeys: mode 0
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug2: service_accept: ssh-userauth
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug2: key: /home/jundu/.ssh/id_rsa ((nil))
debug2: key: /home/jundu/.ssh/id_dsa ((nil))
debug2: key: /home/jundu/.ssh/id_ecdsa ((nil))
debug1: Authentications that can continue: publickey
debug3: start over, passed a different list publickey
debug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /home/jundu/.ssh/id_rsa
debug3: no such identity: /home/jundu/.ssh/id_rsa
debug1: Trying private key: /home/jundu/.ssh/id_dsa
debug3: no such identity: /home/jundu/.ssh/id_dsa
debug1: Trying private key: /home/jundu/.ssh/id_ecdsa
debug3: no such identity: /home/jundu/.ssh/id_ecdsa
debug2: we did not send a packet, disable method
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Permission denied (publickey)?I just don't know what does it mean.Can anyone provide me with some suggestions?Thank you in advance!</p>
","<p>In some cases of using ssh, when we meet the issues about <code>Permission denied (publickey)?</code>, it means two things:</p>

<p>1) we are using ssh key-pairs to access remote host.</p>

<p>2) we never let remote host know our local host's public key and don't have a private key to access.</p>

<p>Solutions:</p>

<p>step1: copy a public key to remote host(usually in ~/.ssh/authorized_key)</p>

<p>step2: paste the corresponding private key in local host's ~/.ssh/id_rsa(or id_dsa)</p>
","1961","<public-key><openssh>","2","0","1","2014-02-19 01:41:18","21869245","1","2","2886717","","2014-02-19 01:41:18","2013-11-18 02:39:31",""
"10969374","Erlang - Decoding RSA public Key","<p>Follow-up to <a href=""https://stackoverflow.com/questions/10966256/erlang-importing-gpg-public-key"">this one</a>.</p>

<p>I got the reading/decoding working</p>

<pre><code>1&gt; {ok, F} = file:read_file(""inaimathi.rsapub"").
{ok,&lt;&lt;""-----BEGIN RSA PUBLIC KEY-----\nmQINBE9NBIQBEADMSzN6b0FaPP0rGiLDWKfH4ehN66Z0SAIynXm6lBHjmO69pNsm\niIe4p1X9aXhr""...&gt;&gt;}
2&gt; [Entry] = public_key:pem_decode(F).
[{'RSAPublicKey',&lt;&lt;153,2,13,4,79,77,4,132,1,16,0,204,75,
                   51,122,111,65,90,60,253,43,26,34,195,
                   88,167,...&gt;&gt;,
                 not_encrypted}]
</code></pre>

<p>According to <a href=""http://www.erlang.org/doc/apps/public_key/using_public_key.html#id60385"" rel=""nofollow noreferrer"">the docs</a>, the last thing I have to do in order to get a working public key out of this is run <code>public_key:pem_entry_decode/1</code> on that <code>Entry</code>. However, when I try to do that, I get an eror.</p>

<pre><code>3&gt; public_key:pem_entry_decode(Entry).
** exception error: no match of right hand side value 
                    {error,
                        {asn1,
                            {{badmatch,{error,{asn1,{wrong_tag,{131097,16}}}}},
                             [{'OTP-PUB-KEY',dec_RSAPublicKey,2,
                                  [{file,""OTP-PUB-KEY.erl""},{line,5956}]},
                              {'OTP-PUB-KEY',decode,2,
                                  [{file,""OTP-PUB-KEY.erl""},{line,493}]},
                              {public_key,der_decode,2,
                                  [{file,""public_key.erl""},{line,166}]},
                              {erl_eval,do_apply,6,
                                  [{file,""erl_eval.erl""},{line,576}]},
                              {shell,exprs,7,[{file,""shell.erl""},{line,668}]},
                              {shell,eval_exprs,7,
                                  [{file,""shell.erl""},{line,623}]},
                              {shell,eval_loop,3,
                                  [{file,""shell.erl""},{line,608}]}]}}}
     in function  public_key:der_decode/2 (public_key.erl, line 170)
</code></pre>

<p>What am I doing wrong here?</p>

<p><strong>EDIT:</strong> Didn't think it would matter, but someone asked, so. </p>

<p>I'm running Debian Wheezy on a Core i3 with Erlang installed from a ~2 day old checkout of <a href=""https://github.com/erlang/otp"" rel=""nofollow noreferrer"">this</a>.</p>

<p><code>erl --version</code> says</p>

<pre><code>Erlang R15B02 (erts-5.9.2) [source] [64-bit] [smp:4:4] [async-threads:0] [hipe] [kernel-poll:false]
</code></pre>
","<p>Your code works fine here:</p>

<pre><code>decode() -&gt;
    [application:start(X) || X &lt;- [crypto, public_key, ssl]],
    RawData = [""-----BEGIN PUBLIC KEY-----\n"",
               ""MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDBm8yuHmd0P6scl48DEi+xp47w\n"",
               ""XVZaKWRygGKtA2XkdRuCU99f0Tq07Llcgf8XuR+Wnk+z2CdMMFMzOGhCePblVIAn\n"",
               ""33dcBVlDokpBF7AnTClsaLcixxZw1LIUiaPaBdN7oG8vt3G2caLHRrrkoEnccY+6\n"",
               ""GadfH7iuHdcVsz1mowIDAQAB\n"",
               ""-----END PUBLIC KEY-----""],
    D = iolist_to_binary(RawData),
    [Entry] = public_key:pem_decode(D),
    public_key:pem_entry_decode(Entry).
</code></pre>

<p>Generates output (shortened):</p>

<pre><code> {'RSAPublicKey',135956...,65537}
</code></pre>
","1958","<erlang><rsa><gnupg><public-key>","0","4","1","2012-06-10 20:42:23","10972210","2","","-1","","2017-05-23 12:08:14","2012-06-10 14:13:00",""
"10966256","Erlang - Importing GPG Public Key","<p>I'm trying to do some public-key-related things in Erlang, and they require me to track public keys. According to <a href=""http://www.erlang.org/doc/apps/public_key/using_public_key.html#id61611"" rel=""nofollow"">this page</a>, I should be able to import PEM format keys by using <code>file:read_file/1</code> and <code>public_key:decode_pem/1</code>. The thing is, when I try to import a GPG public key, I don't get a result.</p>

<p>I've got a file called <code>inaimathi.pubkey</code>with the following content:</p>

<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1.4.11 (GNU/Linux)

mQINBE9NBIQBEADMSzN6b0FaPP0rGiLDWKfH4ehN66Z0SAIynXm6lBHjmO69pNsm
iIe4p1X9aXhr7EgEZKdbqevfXW7NuA/oL7Rbt+tzBT5nS2cYSHoZhUC/onVhJxUb
drCR9NsBDZc1wZs+b95K3vWW91wMPYs4tn71DeeNgUVCcZOGofWltI7+etTVVIyG
zMEW4lOiEwBgLee+5u3XyGsBbyhtWnbp8ZMewiXjo14w0UCMEQxvf55NjggAO/vR
C+Czz5FQ7m9AnZwqIZJfaAw+aM81lmcXRZenGZ/H25H6WLq2DrVXnRjEyUvK+juj
K6rTHcot6K4Cgvo3P47uZcze92c4KaI22jTePRB1qov8ygAQw8BPsaZ+cA3AQ2Zv
4hjIyx2Qovs+vb1xWhk9Mgqyt0ToMZ6HNn386ICxaeYR8XY/rhf9ej0PJOS5c9Nx
reeTdrYXeco27kp/x+nDSWzqy0MrSAAD19xCK1w8Eiwc9MmjAAX1yarQzUy/ICey
eY6SaBfdK7x7A1ecUSu7mS7LmGFWB49Tx5u3ENXw9rU2hKbmGbbQsc+xCx5s7ZM1
q0aATJsUO4fsNe+4/9cBXCSP+4P6irX1EfliqaySt0LEr0WYhIgNgYq8PB7yx4Cv
0mOMv8lXBMYZs8NTrMJl2XHfi3egu8Ti14VChCklnWe95sZvKrk9/3BYxwARAQAB
tCtMZW8gWm92aWMgKEluYWltYXRoaSkgPGxlby56b3ZpY0BnbWFpbC5jb20+iQI4
BBMBAgAiBQJPTQSEAhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRDlo9AP
+vpofbYuD/9luGWbbw0ia5EfsDArk+iAs55HdmgjtVrcEqASR92bSbXxUylvM41T
Gd4nrM7Ri9XVgUSj6ZMnvPJihk08dkjWtoz83JQFdyJ9u7vIqs0LU4awrbNQ8l7P
M3fVKOme/vwQQ7kyIWkIYB0bl+CDRnldYGyBbV0lzh25/eVnhE8AsDltHJjhwe17
GVQPQfk/4B9SY0bTuAojZCUpMtI4cSBaI4v+xojewFt9B53oxW/KrLOvCVYUE9m2
TiJrtWcQjYqrlY9Ku203LzIZWbsFt9NEM6I26ewL3Iqn687fLgdkXZ2TuomJEcY+
5UxPIZfdiXqNG/nFLSII3v9kWA/f6ysXn7NTFx594+5KUqwjPke9ZFxi7gmyuRtK
KQyz1P+fRpkHqdP+OdNASDZ66CUaOqJrea6N+HpGIdBgRVfaYezl0wy9QfPe/PV7
ewYlP/nEpXDNpnr4cOvvD52VeoW9oiZEt0UFZ5iWEVepZlJ9uNq1QKkKDGHjBA/n
Mgd/Mc/Bg6sTfs6gtKfiX5MoPhZd/WDonAZyimJMY23Dw31TuIjmEmO1MuNNxj6c
Q2qWCVsQED6GgkPSRMwZ4+6Dh8DsLrt5xQp68I204XnT+ppgkXY/f4ALseRlOXeQ
9TeqeMcq7lO9DVULHLfXELw5/ijN08BBToZBIaBPKKoGhEdWBl9P3bkCDQRPTQSE
ARAAt9MpaK5TzTOzO/IenaHpfu0EoI4ZQSiWD4ZujvyuMEscdPQ4wDRMVwh66FAW
jeRE4O/m1q4rt/qDKqa0VCSGmap9gj7iLZ9+Fu5n3jyentzmoe22ATO7jOITGbW2
+0D56U3jCRRoSsY8ZSqECBLhsKbc7WIBX8yVxvpHYaqTOwM2+CIqDda5vgKeNxzk
cVDgUBnYj1nNpklGCs3494IVQ8aLVo5nOm8J0vY/n/YK5sAf6RlK+MEXCEyMVoiG
V4wo4fGLJXkhky5yL9vW+vmkUslw7mbAFRIC2KLg0CxXaGychsScpDlpmHkcxmsl
riGbEaKe0kMOM4KkXdopoGB66T0sEftL+hJmrAVe3H4iyldh/d5Hf1ez670m4ZZ6
gNdRCv3WJ72mZv4pqFH94NUksHvPrmot0B23ne6y/MqxYLIweIjJkD1ePxqpffMq
Ktkq9ooH7SB2GAMihCWiY/orSi6bt670Y9P3pzrwolErCWxieX8dg3H04z5nA7J3
6mqxQXLQvY6lXZYANOEKmm1qyoDgeBJoJdYUFbHrb83xcxQUqp8zikKneQ0rJfVG
dj38smSNAMqOeQQwZlmKFVwmIu4ozqszgZ2oqWS7q2NJgg64dnQlA60VMebQ0e8d
MMqy41VJ1FF8PCT1GGMsL+H4vdoZ+/wF2bhMQISWqFSVa5EAEQEAAYkCHwQYAQIA
CQUCT00EhAIbDAAKCRDlo9AP+vpofVp4D/9WqB4h9T5kGLBvuGUebjSqBuv6XfUd
q8vrvrMbSiLTLj2Gk58FjXdTPKCAuTkTtiYjMIXR0cF30uGRccM/tOMSp0xQYVT6
ueBhDZHaWaAEr2408j7/+tVg5CaLO/dVVfxpHIJ+8Bf1YmRRMpDm94i8X5j4rxPv
GNaOa6CgqWGlXsqFUw19OqXI5pK+hBH/GEpVPawr8/JLauc24ovt76gLGXDHrmKV
aeryKzy3TWikj3cq8Mdj2mKqNwkn1uu89j3xvxbq6gxX7lGX8pCLS2W6a7PYDaXf
no1/C31//Shn26LD9YfzRhcA/B/uXtEST3eShM5uS2sm+oOpxpiRaBv477K2TLpn
zh82VgwRTDkelpYJG8R8eBXwbBik+WSeIprZ8IrMfzZNs7xwn+z9isB0P3+VObWj
tBYKdMoF1mu40O1I7hsWV9UpJjRw2WrI8WpZMQTInXcaDWomWRgVhQjVhenYf6u2
nVoN3MM47hR7OR6KtcQ59lwlBeLcK9ImFuXjPK1GG9LtHzkKVOTI6p51S6Ug5MPu
7BuJxpxwDiohhVizBk3oZWInpNiXomk7Q6XwQ65mFTB11bX+wn0JIWO7BUWxK+dH
E+8YuCe53OAvNU0BFT8MAe/vB9kMl4N3p/3bJPuzmP4lnAGrLwzBZPkiQTNq8aj8
5NsttvIOclBY5A==
=Zqph
-----END PGP PUBLIC KEY BLOCK-----
</code></pre>

<p>which seems to be in the correct format, but the result I get is</p>

<pre><code>1&gt; {ok, GpgBin} = file:read(""inaimathi.pubkey"").
{ok,&lt;&lt;""-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v1.4.11 (GNU/Linux)\n\nmQINBE9NBIQBEADMSzN6b0FaPP0rGiLDWKf""...&gt;&gt;}
2&gt; public_key:pem_decode(GpgBin).
[]
</code></pre>

<p>Based on the documentation, I'd expect this to return an <code>RSAEntry</code> which I could then decode into a public key. Is there something special I need to do to import public keys through this mechanism? Are GPG keys actually valid PEM files? Am I missing something else?</p>
","<p>ASCII-armored and PEM are very similar. You just need to change the BEGIN/END markers, strip the PGP headers and checksums (the checksum is the last line <code>=Zqph</code>), and add the PEM header. So, you have to change the <code>inaimathi.pubkey</code> to this file:</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
mQINBE9NBIQBEADMSzN6b0FaPP0rGiLDWKfH4ehN66Z0SAIynXm6lBHjmO69pNsm
iIe4p1X9aXhr7EgEZKdbqevfXW7NuA/oL7Rbt+tzBT5nS2cYSHoZhUC/onVhJxUb
drCR9NsBDZc1wZs+b95K3vWW91wMPYs4tn71DeeNgUVCcZOGofWltI7+etTVVIyG
zMEW4lOiEwBgLee+5u3XyGsBbyhtWnbp8ZMewiXjo14w0UCMEQxvf55NjggAO/vR
C+Czz5FQ7m9AnZwqIZJfaAw+aM81lmcXRZenGZ/H25H6WLq2DrVXnRjEyUvK+juj
K6rTHcot6K4Cgvo3P47uZcze92c4KaI22jTePRB1qov8ygAQw8BPsaZ+cA3AQ2Zv
4hjIyx2Qovs+vb1xWhk9Mgqyt0ToMZ6HNn386ICxaeYR8XY/rhf9ej0PJOS5c9Nx
reeTdrYXeco27kp/x+nDSWzqy0MrSAAD19xCK1w8Eiwc9MmjAAX1yarQzUy/ICey
eY6SaBfdK7x7A1ecUSu7mS7LmGFWB49Tx5u3ENXw9rU2hKbmGbbQsc+xCx5s7ZM1
q0aATJsUO4fsNe+4/9cBXCSP+4P6irX1EfliqaySt0LEr0WYhIgNgYq8PB7yx4Cv
0mOMv8lXBMYZs8NTrMJl2XHfi3egu8Ti14VChCklnWe95sZvKrk9/3BYxwARAQAB
tCtMZW8gWm92aWMgKEluYWltYXRoaSkgPGxlby56b3ZpY0BnbWFpbC5jb20+iQI4
BBMBAgAiBQJPTQSEAhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRDlo9AP
+vpofbYuD/9luGWbbw0ia5EfsDArk+iAs55HdmgjtVrcEqASR92bSbXxUylvM41T
Gd4nrM7Ri9XVgUSj6ZMnvPJihk08dkjWtoz83JQFdyJ9u7vIqs0LU4awrbNQ8l7P
M3fVKOme/vwQQ7kyIWkIYB0bl+CDRnldYGyBbV0lzh25/eVnhE8AsDltHJjhwe17
GVQPQfk/4B9SY0bTuAojZCUpMtI4cSBaI4v+xojewFt9B53oxW/KrLOvCVYUE9m2
TiJrtWcQjYqrlY9Ku203LzIZWbsFt9NEM6I26ewL3Iqn687fLgdkXZ2TuomJEcY+
5UxPIZfdiXqNG/nFLSII3v9kWA/f6ysXn7NTFx594+5KUqwjPke9ZFxi7gmyuRtK
KQyz1P+fRpkHqdP+OdNASDZ66CUaOqJrea6N+HpGIdBgRVfaYezl0wy9QfPe/PV7
ewYlP/nEpXDNpnr4cOvvD52VeoW9oiZEt0UFZ5iWEVepZlJ9uNq1QKkKDGHjBA/n
Mgd/Mc/Bg6sTfs6gtKfiX5MoPhZd/WDonAZyimJMY23Dw31TuIjmEmO1MuNNxj6c
Q2qWCVsQED6GgkPSRMwZ4+6Dh8DsLrt5xQp68I204XnT+ppgkXY/f4ALseRlOXeQ
9TeqeMcq7lO9DVULHLfXELw5/ijN08BBToZBIaBPKKoGhEdWBl9P3bkCDQRPTQSE
ARAAt9MpaK5TzTOzO/IenaHpfu0EoI4ZQSiWD4ZujvyuMEscdPQ4wDRMVwh66FAW
jeRE4O/m1q4rt/qDKqa0VCSGmap9gj7iLZ9+Fu5n3jyentzmoe22ATO7jOITGbW2
+0D56U3jCRRoSsY8ZSqECBLhsKbc7WIBX8yVxvpHYaqTOwM2+CIqDda5vgKeNxzk
cVDgUBnYj1nNpklGCs3494IVQ8aLVo5nOm8J0vY/n/YK5sAf6RlK+MEXCEyMVoiG
V4wo4fGLJXkhky5yL9vW+vmkUslw7mbAFRIC2KLg0CxXaGychsScpDlpmHkcxmsl
riGbEaKe0kMOM4KkXdopoGB66T0sEftL+hJmrAVe3H4iyldh/d5Hf1ez670m4ZZ6
gNdRCv3WJ72mZv4pqFH94NUksHvPrmot0B23ne6y/MqxYLIweIjJkD1ePxqpffMq
Ktkq9ooH7SB2GAMihCWiY/orSi6bt670Y9P3pzrwolErCWxieX8dg3H04z5nA7J3
6mqxQXLQvY6lXZYANOEKmm1qyoDgeBJoJdYUFbHrb83xcxQUqp8zikKneQ0rJfVG
dj38smSNAMqOeQQwZlmKFVwmIu4ozqszgZ2oqWS7q2NJgg64dnQlA60VMebQ0e8d
MMqy41VJ1FF8PCT1GGMsL+H4vdoZ+/wF2bhMQISWqFSVa5EAEQEAAYkCHwQYAQIA
CQUCT00EhAIbDAAKCRDlo9AP+vpofVp4D/9WqB4h9T5kGLBvuGUebjSqBuv6XfUd
q8vrvrMbSiLTLj2Gk58FjXdTPKCAuTkTtiYjMIXR0cF30uGRccM/tOMSp0xQYVT6
ueBhDZHaWaAEr2408j7/+tVg5CaLO/dVVfxpHIJ+8Bf1YmRRMpDm94i8X5j4rxPv
GNaOa6CgqWGlXsqFUw19OqXI5pK+hBH/GEpVPawr8/JLauc24ovt76gLGXDHrmKV
aeryKzy3TWikj3cq8Mdj2mKqNwkn1uu89j3xvxbq6gxX7lGX8pCLS2W6a7PYDaXf
no1/C31//Shn26LD9YfzRhcA/B/uXtEST3eShM5uS2sm+oOpxpiRaBv477K2TLpn
zh82VgwRTDkelpYJG8R8eBXwbBik+WSeIprZ8IrMfzZNs7xwn+z9isB0P3+VObWj
tBYKdMoF1mu40O1I7hsWV9UpJjRw2WrI8WpZMQTInXcaDWomWRgVhQjVhenYf6u2
nVoN3MM47hR7OR6KtcQ59lwlBeLcK9ImFuXjPK1GG9LtHzkKVOTI6p51S6Ug5MPu
7BuJxpxwDiohhVizBk3oZWInpNiXomk7Q6XwQ65mFTB11bX+wn0JIWO7BUWxK+dH
E+8YuCe53OAvNU0BFT8MAe/vB9kMl4N3p/3bJPuzmP4lnAGrLwzBZPkiQTNq8aj8
5NsttvIOclBY5A==
-----END RSA PUBLIC KEY-----
</code></pre>
","1939","<erlang><rsa><gnupg><public-key>","2","3","1","2012-06-10 12:03:49","10967742","0","1","190887","","2012-06-10 12:03:49","2012-06-10 03:56:49",""
"45119932","Why does git sign with GPG keys rather than using SSH keys?","<p>What are the differences between SSH and GPG asymmetric keys and why does git support signing with GPG rather than using the SSH agent?</p>
","<p>The very first notion of signing <em>anything</em> in Git was referenced in <a href=""https://github.com/git/git/commit/ec4465adb38d21966acdc9510ff15c0fe4539468"" rel=""nofollow noreferrer"">commit ec4465a, Git v0.99, Apr. 2005</a> (pretty much from the very beginning)</p>



<pre class=""lang-sh prettyprint-override""><code>/**
 * A signature file has a very simple fixed format: three lines
 * of ""object &lt;sha1&gt;"" + ""type &lt;typename&gt;"" + ""tag &lt;tagname&gt;"",
 * followed by some free-form signature that git itself doesn't
 * care about, but that can be verified with gpg or similar.
 **/
</code></pre>

<p>So your question has legs.</p>

<p>The very first signed commit used gpg, but could have used anything else (<a href=""https://github.com/git/git/commit/65f0d0ee4627dd0f0468ceded38677076d78feb5"" rel=""nofollow noreferrer"">commit 65f0d0e</a>):</p>

<pre class=""lang-sh prettyprint-override""><code>#!/bin/sh
object=${2:-$(cat .git/HEAD)}
type=$(cat-file -t $object) || exit 1
( echo -e ""object $object\ntype $type\ntag $1\n""; cat ) &gt; .tmp-tag
rm -f .tmp-tag.asc
gpg -bsa .tmp-tag &amp;&amp; cat .tmp-tag.asc &gt;&gt; .tmp-tag
git-mktag &lt; .tmp-tag
#rm .tmp-tag .tmp-tag.sig
</code></pre>

<p>Technically, you can use <a href=""https://superuser.com/a/390176/141"">gpg in place of ssh</a>. I haven't seen often the reverse though.<br>
But you can use <a href=""https://security.stackexchange.com/a/66482"">an ssh key-pair be used with PGP/GPG</a>.<br>
That means the first validation script might still work (<a href=""https://github.com/git/git/commit/f336e71f86560df3503c1da1f68635a184af28a9"" rel=""nofollow noreferrer"">commit f336e71</a>)... except it expected a PGP comment:</p>

<pre class=""lang-sh prettyprint-override""><code>#!/bin/sh
GIT_DIR=${GIT_DIR:-.git}

tag=$1
[ -f ""$GIT_DIR/refs/tags/$tag"" ] &amp;&amp; tag=$(cat ""$GIT_DIR/refs/tags/$tag"")

git-cat-file tag $tag &gt; .tmp-vtag || exit 1
cat .tmp-vtag | sed '/-----BEGIN PGP/Q' | gpg --verify .tmp-vtag -
rm -f .tmp-vtag
</code></pre>

<p>So, ""Why does git sign with GPG keys rather than using SSH keys?"": it is what GPG is meant to do, as opposed to SSH, <a href=""https://superuser.com/a/308130/141"">which cannot do with openssh alone (it needs openssl)</a>.</p>

<p><a href=""https://stackoverflow.com/questions/45119932/why-does-git-sign-with-gpg-keys-rather-than-using-ssh-keys/45120525#comment77216257_45119932"">As commented</a> by <a href=""https://stackoverflow.com/users/1256452/torek"">torek</a>, using SSH would be theoretically possible, it's just not convenient. </p>

<blockquote>
  <p>In addition, PGP has extra features (not that Git uses them directly—Git itself is just invokes some external software—but things like key revocation are useful in these contexts).</p>
</blockquote>
","1931","<git><digital-signature><ssh-keys><public-key><gpg-signature>","7","11","3","2019-07-22 08:15:27","45120525","4","2","387076","","2019-03-19 00:22:14","2017-07-15 15:38:35",""
"45119932","Why does git sign with GPG keys rather than using SSH keys?","<p>What are the differences between SSH and GPG asymmetric keys and why does git support signing with GPG rather than using the SSH agent?</p>
","<p>One likely reason is that not everybody using git is using ssh.</p>

<p>You can create a git repo and never have it leave your local disk. You can use the git protocol, or http, or https, or network filesystems... none of those things involve ssh, but you can still sign commits, because that happens independent of any network transport or other push/pull sharing of your commits.</p>
","1931","<git><digital-signature><ssh-keys><public-key><gpg-signature>","7","2","3","2019-07-22 08:15:27","45120525","4","2","387076","","2019-03-19 00:22:14","2017-07-15 15:38:35",""
"45119932","Why does git sign with GPG keys rather than using SSH keys?","<p>What are the differences between SSH and GPG asymmetric keys and why does git support signing with GPG rather than using the SSH agent?</p>
","<p>The reason why you should NOT use <code>ssh</code> for signing commits is the one of the common rules of cryptography: You should not use the same keys for different applications/use cases.</p>

<p>In SSH you use a key for authentication, but that is something different then the signing your commits. For this, GPG is much more suited as it is already widely used for signing emails, files and so on.</p>
","1931","<git><digital-signature><ssh-keys><public-key><gpg-signature>","7","2","3","2019-07-22 08:15:27","45120525","4","2","387076","","2019-03-19 00:22:14","2017-07-15 15:38:35",""
"16288158","Trying to implement PublicKey Authentication for SFTP test server using Apache Mina. However Authenticate method is not being called","<p>I am using  Apache Mina SSHD to implement a test SFTPServer. I have been able to get things working for simple Password authentication, however I am not able to configure things for PublicKey Authentication. I have a implemented the PublickeyAuthenticator interface as follows,</p>

<pre><code>public class SimpleKeyAuthenticator implements PublickeyAuthenticator {

    @Override
    public boolean authenticate(String username, PublicKey key, ServerSession session) {
        System.out.println(""In authenticate"");
        return false;
    }

}
</code></pre>

<p>My server implementation is as follows,</p>

<pre><code>...
sshd = SshServer.setUpDefaultServer();


sshd.setPort(2222);
//sshd.setPort(config.getSFTPPort());

//sshd.setKeyPairProvider(new 
sshd.setKeyPairProvider(new PEMGeneratorHostKeyProvider(""hostkey.pem""));
//sshd.setKeyPairProvider(new SimpleGeneratorHostKeyProvider());

sshd.setPublickeyAuthenticator(new SimpleKeyAuthenticator());
sshd.setFileSystemFactory(new SimpleFileSystemFactory());

List&lt;NamedFactory&lt;UserAuth&gt;&gt; userAuthFactories = new ArrayList&lt;NamedFactory&lt;UserAuth&gt;&gt;();
userAuthFactories.add(new UserAuthNone.Factory());
sshd.setUserAuthFactories(userAuthFactories);

sshd.setCommandFactory(new ScpCommandFactory());

List&lt;NamedFactory&lt;Command&gt;&gt; namedFactoryList = new ArrayList&lt;NamedFactory&lt;Command&gt;&gt;();

namedFactoryList.add(new SftpSubsystem.Factory());
sshd.setSubsystemFactories(namedFactoryList);

sshd.setSessionFactory(new SimpleSessionFactory(handler));
try {
    sshd.start();
} catch (Exception e) {
    e.printStackTrace();
}
</code></pre>

<p>However when I try to get a file using my SFTP client everything works. I would expect the authenticate method to fail given that it always returns false. I have tried setting the KeyPairProvider to use both the  PEMGeneratorHostKeyProvider and the SimpleGeneratorHostKeyProvider. I have also set the PublicKeyAuthenticator to use my SimpleKeyAuthenticator class.  Note, when I look at the console output I never see 'In authenticate' so I know that Authenticate is never being called. Could someone please point me to what I have missed? Any help is appreciated.</p>

<p>Regards,
Mark</p>
","<p>// below line will make client login without any validation.</p>

<p>userAuthFactories.add(new UserAuthNone.Factory()); </p>

<p>You should change it like this:</p>

<p>userAuthFactories.add(new UserAuthPublicKey.Factory());</p>
","1929","<sftp><public-key><apache-mina><mina>","5","2","1","2017-07-30 18:45:43","","0","1","2278844","","2017-07-30 18:45:43","2013-04-29 21:01:11",""
"32433832","configuring SSLContext using existing SSL key/certificate pair in java (JSSE API)","<p>I am working on a java-project where I should implement the SSL-protokol on the server-side. Well, this is the first time I will use SSL in my application, so I read a lot about ssl/tls and now I want to implement something in java. I will implement this process using JSSE API:</p>

<p>1) client will connect to me</p>

<p>2) I will make authentification with my pubic key certificate. I means that I will send the client a public key and its corresponding certificate</p>

<p>3) the client encrypt the secret-key using my public key and RSA-algorithm and send it to me</p>

<p>I have already the private key and certificate saved on a keystore on my computer. So I am hesited how to access them from <strong>my java-application</strong>. I do not know, which are the steps to do to acess them, since it is the first time i am dealing with this kind of stuff</p>

<p>I will use an <strong>SSLEngine</strong>. So I should firstly <strong>initialize</strong> an <strong>SSLContext</strong> using this code:</p>

<pre><code>// First initialize the key and trust material.
    KeyStore ksKeys = KeyStore.getInstance(""JKS"");
    ksKeys.load(new FileInputStream(""/.../myKey""), passphrase);
    KeyStore ksTrust = KeyStore.getInstance(""JKS"");
    ksTrust.load(new FileInputStream(""/../myCertificate""), passphrase);

    sslContext = SSLContext.getInstance(""TLS"");
    sslContext.init( kmf.getKeyManagers(), tmf.getTrustManagers(), null);
    // We're ready for the engine.
    SSLEngine engine = sslContext.createSSLengine(hostname, port);

    // Use as client
    engine.setUseClientMode(true);
</code></pre>

<p>I am really new in the crypthography and  this is the first time I programming this stuff. Any Idea?</p>
","<p>At the server, both the public key and its certificate go into the KeyStore, along with the original private key, all under the same alias.</p>

<p>If the certificate is self-signed, you'll need to export it from there into the client's truststore.</p>

<p>You don't need to write code for this. Just set the system properties:</p>

<pre><code>javax.net.ssl.keyStore
javax.net.ssl.keyStorePassword
javax.net.ssl.trustStore
</code></pre>

<p>as appropriate.</p>
","1919","<ssl><public-key-encryption><public-key><jsse>","0","1","2","2015-09-10 12:02:48","32454527","7","2","4825307","","2015-09-10 12:02:48","2015-09-07 08:04:46",""
"32433832","configuring SSLContext using existing SSL key/certificate pair in java (JSSE API)","<p>I am working on a java-project where I should implement the SSL-protokol on the server-side. Well, this is the first time I will use SSL in my application, so I read a lot about ssl/tls and now I want to implement something in java. I will implement this process using JSSE API:</p>

<p>1) client will connect to me</p>

<p>2) I will make authentification with my pubic key certificate. I means that I will send the client a public key and its corresponding certificate</p>

<p>3) the client encrypt the secret-key using my public key and RSA-algorithm and send it to me</p>

<p>I have already the private key and certificate saved on a keystore on my computer. So I am hesited how to access them from <strong>my java-application</strong>. I do not know, which are the steps to do to acess them, since it is the first time i am dealing with this kind of stuff</p>

<p>I will use an <strong>SSLEngine</strong>. So I should firstly <strong>initialize</strong> an <strong>SSLContext</strong> using this code:</p>

<pre><code>// First initialize the key and trust material.
    KeyStore ksKeys = KeyStore.getInstance(""JKS"");
    ksKeys.load(new FileInputStream(""/.../myKey""), passphrase);
    KeyStore ksTrust = KeyStore.getInstance(""JKS"");
    ksTrust.load(new FileInputStream(""/../myCertificate""), passphrase);

    sslContext = SSLContext.getInstance(""TLS"");
    sslContext.init( kmf.getKeyManagers(), tmf.getTrustManagers(), null);
    // We're ready for the engine.
    SSLEngine engine = sslContext.createSSLengine(hostname, port);

    // Use as client
    engine.setUseClientMode(true);
</code></pre>

<p>I am really new in the crypthography and  this is the first time I programming this stuff. Any Idea?</p>
","<p>After being confused, I did a lot of research and I could find the solution. First of all, I will describe the situation then I will give the steps to solve the problem. Like I said in my Post, I had the private key (.key-file)  and the certificate (.cer file) and I need to use them in my java-application (server using ssl-protocol). So the <strong>first step</strong> to do is to create a keystore named.jks-file containing the certificate/key so that I can be able to use them for your java-based-server. To do this step I used the steps described in this link <a href=""http://blog.jgc.org/2011/06/importing-existing-ssl-keycertificate.html"" rel=""nofollow"">http://blog.jgc.org/2011/06/importing-existing-ssl-keycertificate.html</a></p>

<p>Now, how can I use my.jks-file in the above posted code?</p>

<p>Well this is a piece of code how to initialize your SSLEngine:</p>

<pre><code>char [] keyphrase=""xxx"".toCharArray();
char [] passphrase= ""yyy"".toCharArray();

// First initialize the key and trust material.
KeyStore ksKeys = KeyStore.getInstance(""JKS"");
InputStream readStream = new FileInputStream(new File(""/.../file.jks""));
ks.load(readStream, passphrase );
// create an factory for key-managers
KeyManagerFactory   =KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
kmf.init(ks, keyphrase);
SSLContext sslContext = SSLContext.getInstance(""TLS"");
//initialize the ssl-context
sslContext.init(kmf.getKeyManagers(),null,null);
// We're ready for the engine.
SSLEngine engine = sslContext.createSSLEngine(host, port);
// Use as client
engine.setUseClientMode(true);
</code></pre>
","1919","<ssl><public-key-encryption><public-key><jsse>","0","0","2","2015-09-10 12:02:48","32454527","7","2","4825307","","2015-09-10 12:02:48","2015-09-07 08:04:46",""
"27648564","PHP RSA-public key base64 encoding","<p>I am working on a web application and I need to talk to server in encrypted way using RSA public/private key. I have a public key in a text file like this:</p>

<pre><code>¨Ì�sr�java.math.BigIntegerå¸ü©;˚�I�bitCountIbitLengthI�firstNonzeroByteNumI�lowestSetBitI�signum[
�   magnitudet�[Bxr�java.lang.NumberÜ¨ïî‡ã��xpˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛���ur�[B¨Û¯T‡��xp���ØÕ..˛¶⁄
[í'‰∑S~ÆhU‚Ãu|ˆ*Ÿ""E˝x©àÚ†qçÎU¬òü`Oˇ?{q^⁄/O'•à%œÍ¬S� ∏íU$0≥i‹Hï™è&gt;æ∑÷é˜ FVÚµ™ŒR=*ÑπGF%À¨Ëß¥Àüm‡(T¨‘Pq.ã3ˇ∑Ò;ªmÔ˙
C–„¿ç5åÌŒææ°4ån”®Å–MAQ’kÜì∑ÊË°ÂÅíîc»AÈ�
∫ıƒËv:eÚDÑØKv3Áq”cO´HÁzπ…ÅÔ©ˇwlWènö◊aAß° mÍ‡ïöH˚Æ)˛WeŸci·JbÜ q˙H£xsq�~��ˇˇˇˇˇˇˇˇˇˇˇ˛ˇˇˇ˛���uq�~����≠íi5˛¸¥Q‚í(2ûﬁΩL0ΩÅ≤ò`
÷…7¯ú)K´ºÎW2j·°Ø«¨X”gºŸ«lÇ8øÃ√3RÕ·ƒŸÚ¢ﬂ∆,ﬂr’X∆È|˚ì[Nﬂ%≈Búp·≤∑◊gπrõà–À≠˛`»Á†U„«¨ë+e|üæÄ®iLˇ⁄q¨@ä;…gRî&gt;òvû+…U^ËÕdT∫|≠˙N""#zßø⁄+Å2ï¢=Nûe≠D˙§∞7X≥QPZ(Û`Ã-àÙ√ÿ÷Û˘£5[ŒÂ◊�IÄﬁV  bf´ÄÍÚ∫ê!*Ô´õD  »E˛˙úhiô{ì“åCZWœ-åWÊ6‘t·x
</code></pre>

<p>When I try to base64 encode it the result is:</p>

<pre><code>rO0ABXNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRMZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFnbml0dWRldAACW0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7////+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAEAr80ULi7+ptoVW5In5LdTfq5oVeLMdXwO9irZIkX9eKmI8qBxjetVwpifYE8M/z8ee3Fe2i9PJ6WIJQ/PHOrCUwAJA7iSVQEYAyQwF7Np3BRIlaqPPr631o73IEZW8rWqzlI9KoS5R0Yly6zop7TLn23gKFSs1FBxGi6LCjMe/7fxO7tt7/p/AUPQ48CNNYzGCu3Ovr6hNIxuBBzTqIHQTUFR1WuGk7fm6KHlgZIelAsWY8hB6QC6B3/1xALodjpl8kSErwRLdjPncdNjT6sZSOd6ucmBGu+p/3dsV49umtdhQacCocpt6uCVmkgM+64p/ldl2WMSaeFKYoYgcfpIo3hzcQB+AAD///////////////7////+AAAAAXVxAH4ABAAAAQCtDpJpDDX+Bfy0UeIXkigNMp7evQ5MML2Bsphg1sk3+JwpS6u86wdXMmrhoa/HrFjTZ7zZx2yCOL8WzMMzUh3NGuHE2fKi3xrGLN9y1VjGHul8+5NbTt8lxUKccOGytwbXZ7lym4jQEsut/h5gyOcRoFXjHceskStlfJ++gKhpTP/acaxAijvJZ1IRlD6Ydp4ryQNVXujNZFS6fK36TiJ/I3qnvxfaK4EylaISPU6eZa1E+qSwN1gQs1FQWigQ82DMLYj0w9jW8/mjNRpbEs7l1wBJgN5WCWJmqweA6vK6kCEq76ubRAnIRf76nGhpmXuT0oxDEVpXzy2MV+Y21HTheA==
</code></pre>

<p>which always gives me an invalid public key. When I try:</p>

<pre><code>openssl_public_encrypt($data, $encrypted_data, base64_encode($key), OPENSSL_PKCS1_PADDING);
</code></pre>

<p>I know that the public key must start with:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
</code></pre>

<p>and ending with:</p>

<pre><code>-----END PUBLIC KEY-----
</code></pre>

<p>I tried to use:</p>

<pre><code>""-----BEGIN PUBLIC KEY-----\r\n"" . chunk_split(base64_encode($key)) . ""\r\n-----END PUBLIC KEY-----"";
</code></pre>

<p>but it is still not working. Can anyone offer any help?</p>
","<p>You'll need Java code to convert these serialized <code>BigInteger</code> values to a private key and public key. The base64 encoded binary seems to contain two serialized BigInteger objects, the modulus and the private exponent (which is now exposed). To retrieve PEM encoding it's best to rely on Bouncy Castle to do the conversion:</p>

<pre><code>import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;

import org.bouncycastle.openssl.PEMWriter;
import org.bouncycastle.util.encoders.Base64;

public class KeysFromSerializedBigIntegers {

    private static final String FROM_QUESTION = ""rO0ABXNyABRqYXZhLm1hdGguQmlnSW50ZWdlcoz8nx+pO/sdAwAGSQAIYml0Q291bnRJAAliaXRMZW5ndGhJABNmaXJzdE5vbnplcm9CeXRlTnVtSQAMbG93ZXN0U2V0Qml0SQAGc2lnbnVtWwAJbWFnbml0dWRldAACW0J4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHD///////////////7////+AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAEAr80ULi7+ptoVW5In5LdTfq5oVeLMdXwO9irZIkX9eKmI8qBxjetVwpifYE8M/z8ee3Fe2i9PJ6WIJQ/PHOrCUwAJA7iSVQEYAyQwF7Np3BRIlaqPPr631o73IEZW8rWqzlI9KoS5R0Yly6zop7TLn23gKFSs1FBxGi6LCjMe/7fxO7tt7/p/AUPQ48CNNYzGCu3Ovr6hNIxuBBzTqIHQTUFR1WuGk7fm6KHlgZIelAsWY8hB6QC6B3/1xALodjpl8kSErwRLdjPncdNjT6sZSOd6ucmBGu+p/3dsV49umtdhQacCocpt6uCVmkgM+64p/ldl2WMSaeFKYoYgcfpIo3hzcQB+AAD///////////////7////+AAAAAXVxAH4ABAAAAQCtDpJpDDX+Bfy0UeIXkigNMp7evQ5MML2Bsphg1sk3+JwpS6u86wdXMmrhoa/HrFjTZ7zZx2yCOL8WzMMzUh3NGuHE2fKi3xrGLN9y1VjGHul8+5NbTt8lxUKccOGytwbXZ7lym4jQEsut/h5gyOcRoFXjHceskStlfJ++gKhpTP/acaxAijvJZ1IRlD6Ydp4ryQNVXujNZFS6fK36TiJ/I3qnvxfaK4EylaISPU6eZa1E+qSwN1gQs1FQWigQ82DMLYj0w9jW8/mjNRpbEs7l1wBJgN5WCWJmqweA6vK6kCEq76ubRAnIRf76nGhpmXuT0oxDEVpXzy2MV+Y21HTheA=="";

    public static void main(String[] args) throws Exception {
        byte[] binary = Base64.decode(FROM_QUESTION);
        ByteArrayInputStream bais = new ByteArrayInputStream(binary);
        BufferedInputStream bis = new BufferedInputStream(bais, 16);
        ObjectInputStream ois = new ObjectInputStream(bis);

        BigInteger modulus = null;
        BigInteger privExp = null;
        while (true) {
            bis.mark(16);
            if (bis.read() == -1) {
                bis.reset();
                break;
            }
            bis.reset();

            Object o = ois.readObject();
            if (o instanceof BigInteger) {
                BigInteger bi = (BigInteger) o;

                if (modulus == null) {
                    modulus = bi;
                } else if (privExp == null) {
                    privExp = bi;
                }
            }
        }

        KeyFactory rsaKeyFactory = KeyFactory.getInstance(""RSA"");

        RSAPrivateKeySpec rsaPrivateKeySpec = new RSAPrivateKeySpec(modulus,
                privExp);
        PrivateKey privateKey = rsaKeyFactory
                .generatePrivate(rsaPrivateKeySpec);

        BigInteger guessedPubExp = BigInteger.valueOf(0x010001);
        RSAPublicKeySpec rsaPublicKeySpec = new RSAPublicKeySpec(modulus,
                guessedPubExp);
        PublicKey publicKey = rsaKeyFactory.generatePublic(rsaPublicKeySpec);


        PEMWriter pemWriter = new PEMWriter(new PrintWriter(System.out));
        pemWriter.writeObject(privateKey);
        pemWriter.writeObject(publicKey);
        pemWriter.flush();

        test(privateKey, publicKey);
    }

    private static void test(PrivateKey privateKey, PublicKey publicKey)
            throws NoSuchAlgorithmException, InvalidKeyException,
            SignatureException {
        Signature rsa = Signature.getInstance(""SHA512withRSA"");
        rsa.initSign(privateKey);
        byte[] sig = rsa.sign();
        rsa.initVerify(publicKey);
        boolean verified = rsa.verify(sig);
        // prints true for this key pair
        System.out.println(verified);
    }
}
</code></pre>

<p>(note: this doesn't even comply with my own code practices)</p>

<p>Which will result in:</p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN RSA PRIVATE KEY-----
MIICHwIBAAKCAQEAr80ULi7+ptoVW5In5LdTfq5oVeLMdXwO9irZIkX9eKmI8qBx
jetVwpifYE8M/z8ee3Fe2i9PJ6WIJQ/PHOrCUwAJA7iSVQEYAyQwF7Np3BRIlaqP
Pr631o73IEZW8rWqzlI9KoS5R0Yly6zop7TLn23gKFSs1FBxGi6LCjMe/7fxO7tt
7/p/AUPQ48CNNYzGCu3Ovr6hNIxuBBzTqIHQTUFR1WuGk7fm6KHlgZIelAsWY8hB
6QC6B3/1xALodjpl8kSErwRLdjPncdNjT6sZSOd6ucmBGu+p/3dsV49umtdhQacC
ocpt6uCVmkgM+64p/ldl2WMSaeFKYoYgcfpIowIBAAKCAQEArQ6SaQw1/gX8tFHi
F5IoDTKe3r0OTDC9gbKYYNbJN/icKUurvOsHVzJq4aGvx6xY02e82cdsgji/FszD
M1IdzRrhxNnyot8axizfctVYxh7pfPuTW07fJcVCnHDhsrcG12e5cpuI0BLLrf4e
YMjnEaBV4x3HrJErZXyfvoCoaUz/2nGsQIo7yWdSEZQ+mHaeK8kDVV7ozWRUunyt
+k4ifyN6p78X2iuBMpWiEj1OnmWtRPqksDdYELNRUFooEPNgzC2I9MPY1vP5ozUa
WxLO5dcASYDeVgliZqsHgOryupAhKu+rm0QJyEX++pxoaZl7k9KMQxFaV88tjFfm
NtR04QIBAAIBAAIBAAIBAAIBAA==
-----END RSA PRIVATE KEY-----
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr80ULi7+ptoVW5In5LdT
fq5oVeLMdXwO9irZIkX9eKmI8qBxjetVwpifYE8M/z8ee3Fe2i9PJ6WIJQ/PHOrC
UwAJA7iSVQEYAyQwF7Np3BRIlaqPPr631o73IEZW8rWqzlI9KoS5R0Yly6zop7TL
n23gKFSs1FBxGi6LCjMe/7fxO7tt7/p/AUPQ48CNNYzGCu3Ovr6hNIxuBBzTqIHQ
TUFR1WuGk7fm6KHlgZIelAsWY8hB6QC6B3/1xALodjpl8kSErwRLdjPncdNjT6sZ
SOd6ucmBGu+p/3dsV49umtdhQacCocpt6uCVmkgM+64p/ldl2WMSaeFKYoYgcfpI
owIDAQAB
-----END PUBLIC KEY-----
Verification: true
</code></pre>

<p>So there you have it, an RSA key pair of 2048 bit minus the CRT parameters. Note that the other party should at least have used <code>RSAPrivateKey.getEncoded()</code> and <code>RSAPublicKey.getEncoded()</code> instead of object serialization.</p>
","1906","<php><encryption><rsa><public-key>","2","2","1","2014-12-28 12:28:00","27676377","7","","472495","","2014-12-25 15:46:04","2014-12-25 15:33:16",""
"33132480","Android PublicKey to string","<p>I am trying to convert PublicKey to String but I don't know how to do it properly. Following code doesn't give me correct key, so how convert it?  </p>

<pre><code>byte[] publicKeyBytes = userKeys.getPublic().getEncoded();
String pKstring = new String(publicKeyBytes);
</code></pre>
","<p>I find out solution, below code is correct:</p>

<pre><code>byte[] publicKeyBytes = Base64.encode(userKeys.getPublic().getEncoded(),0);
String pubKey = new String(publicKeyBytes);
</code></pre>
","1903","<android><type-conversion><public-key>","3","5","1","2015-10-14 20:28:16","33134975","0","","","","","2015-10-14 18:03:46",""
"34080813","How to set RSACryptoServiceProvider Public Key?","<p>I have a <code>RSA</code> public key stored in a file. The file is plain text and reads as:</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
Mdflkjlkf8u8f84rkrjfgk8r7u8t758tkjfedfkjldfjhfjdfdjfkdjfkdfdfdfs
Ddfldkfdjfkjljfldfdlfhkdhfkdhfkdhfkdhfkjdffdnodhmndhiufdofhodhfd
xWCnQ6QOIwKqRY6lklk09erjbds6erottgkjirt895t5tixaevJlMmrZGLaITW66
xVjbPvdpjMniFiemtwIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<p>I want to feed this public key to an object of <code>RSACryptoServiceProvider</code> and encrypt an arbitrary message using <code>Encrypt</code>. Unfortunately, I couldn't figure out how to set <code>PK</code>. Any help is more than welcome. </p>
","<pre><code>X509Certificate2 cert = new X509Certificate2(""pub_key.crt"");
RSACryptoServiceProvider rsa = (RSACryptoServiceProvider)cert.PublicKey.Key;
</code></pre>

<p>Then use <code>rsa</code> object.</p>
","1889","<c#><encryption><rsa><public-key>","0","1","1","2015-12-04 15:36:41","","0","","4697577","","2015-12-04 13:34:17","2015-12-04 04:14:12",""
"44912790","python verifying a digital signature with a payload and public key string","<p>I have a piece of data [ 'payload' ] which is Base64 encoded.
Then i have a 'signature' which contains the payload's signature.
I have a public key.
The signature algorithm is SHA512withRSA</p>

<p>How can I verify the authenticity of the data in Python ? 
I am using the following code to check, but it doesn't seem to be working</p>

<pre><code>import base64
import hashlib
from Crypto.PublicKey import RSA 
from Crypto.Signature import SHA512
from Crypto.Hash import SHA512 
from base64 import b64decode 

# Public Key
key = ""MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDEpFwIarbm48m6ueG+jhpt2vCGaqXZlwR/HPuL4zH1DQ/eWFbgQtVnrta8QhQz3ywLnbX6s7aecxUzzNJsTtS8VxKAYll4E1lJUqrNdWt8CU+TaUQuFm8vzLoPiYKEXl4bX5rzMQUMqA228gWuYmRFQnpduQTgnYIMO8XVUQXl5wIDAQAB""

# Base64 Encoded payload
payload = ""some_string_payload""
decoded_payload = base64.b64decode(payload)

signature = ""gw5K+WvO43673XBinZOmwgrZ3ttVuZ17/7SBnzqAAD4pgiwzYbZuEwn2lev6FW01f6TL0d9cNH4WtT53bQnTlhLQOZi4mHTTtM64O7MNljSA5zjJTUl77wXK/cJM+/G6R4YgYAnjydXAZjbMKY4Z9kV0qz2spdnS7Je7Q8I1xaU=""
signature_algorithm = ""SHA512withRSA""
keytype = ""RSA""


m = hashlib.sha512()
m.update( key )
m.update( decoded_payload )
print m
m.hexdigest()
print m


keyDER = b64decode(key)
rsakey = RSA.importKey(keyDER)

signer = SHA512.new(rsakey) 

if signer.verify(m, b64decode(signature)):
    print ""Verified""
else:
    print ""Not Verified""
</code></pre>
","<p>The code in the question has a couple of mistakes, in order of appearance:</p>

<ul>
<li>there are two different SHA512 implementations imported;</li>
<li>the payload is clearly not base 64 encoded, normal base 64 doesn't represent text nor does it contain _ characters (base-64-url however does);</li>
<li>the <code>signature_algorithm</code> and <code>keytype</code> variables are not even used;</li>
<li>the <code>key</code> should not be hashed to implement a normal PSS signature scheme;</li>
<li>the result of <code>m.hexdigest()</code> is ignored;</li>
<li>you cannot generate a signature generation class by <code>SHA512.new(rsakey)</code>;</li>
<li>as said, your code doesn't even compile, because SHA512 class cannot sign;</li>
</ul>

<hr>

<p>Instead you can use any other PSS sample code. For instance, use the code <a href=""https://github.com/dlitz/pycrypto/issues/247"" rel=""nofollow noreferrer"">here</a> and notice that it is an issue that I'm pointing at. It's a minimal doc change but nobody seems to want to fix it for half a year.</p>

<pre><code>from Crypto.Signature import PKCS1_PSS
from Crypto.Hash import SHA512
from Crypto.PublicKey import RSA
from Crypto import Random
message = 'To be signed'
key = RSA.importKey(open('privkey.der').read())
h = SHA512.new()
h.update(message)
signer = PKCS1_PSS.new(key)
signature = PKCS1_PSS.sign(h)
</code></pre>

<hr>

<p>Note that PSS can also use a hash <em>internally</em>, you may have to define your own callable code if signature verification fails, more information <a href=""https://www.dlitz.net/software/pycrypto/api/2.6/Crypto.Signature.PKCS1_PSS-module.html#new"" rel=""nofollow noreferrer"">here</a>. Probably best to lookup the default implementation for MGF1 in the code, copy it and then change the hash...</p>
","1887","<python><digital-signature><public-key><signing><verify>","3","0","1","2018-05-12 14:48:33","","3","","1000551","","2017-10-05 12:51:53","2017-07-04 19:13:14",""
"10907502","PHP OpenSSL Error","<p>I am getting the error <code>Warning: openssl_get_publickey() [function.openssl-get-publickey]: Don't know how to get public key from this private key on line 5</code> When trying to get a public key from a private key. Here is my PHP code:</p>

<pre><code>&lt;?php
$privatekeyorig = openssl_pkey_new();
openssl_pkey_export($privatekeyorig,$privatekey);
echo '&lt;b&gt;Private Key:&lt;/b&gt; ' . $privatekey . '&lt;br&gt;';
$publickey = openssl_get_publickey($privatekeyorig);
echo '&lt;b&gt;Public Key:&lt;/b&gt; ' . $publickey . '&lt;br&gt;';
?&gt;
</code></pre>

<p>According to the PHP manual I am doing this correctly. Anyone spot an error? Help would be greatly appreciated!</p>
","<p>Check out the last comment on <a href=""http://php.net/manual/en/function.openssl-pkey-new.php"" rel=""nofollow"">http://php.net/manual/en/function.openssl-pkey-new.php</a></p>

<p>[UPDATE]
From the comment right before the above :) and it works on my system to give you a textual public key:</p>

<pre><code>// Create the keypair
$res=openssl_pkey_new();

// Get private key
openssl_pkey_export($res, $privkey);

// Get public key
$pubkey=openssl_pkey_get_details($res);
$pubkey=$pubkey[""key""];
</code></pre>
","1885","<php><openssl><private-key><public-key>","2","1","2","2012-06-07 00:00:51","10907741","0","","","","","2012-06-06 02:37:05",""
"10907502","PHP OpenSSL Error","<p>I am getting the error <code>Warning: openssl_get_publickey() [function.openssl-get-publickey]: Don't know how to get public key from this private key on line 5</code> When trying to get a public key from a private key. Here is my PHP code:</p>

<pre><code>&lt;?php
$privatekeyorig = openssl_pkey_new();
openssl_pkey_export($privatekeyorig,$privatekey);
echo '&lt;b&gt;Private Key:&lt;/b&gt; ' . $privatekey . '&lt;br&gt;';
$publickey = openssl_get_publickey($privatekeyorig);
echo '&lt;b&gt;Public Key:&lt;/b&gt; ' . $publickey . '&lt;br&gt;';
?&gt;
</code></pre>

<p>According to the PHP manual I am doing this correctly. Anyone spot an error? Help would be greatly appreciated!</p>
","<p>My recommendation would be to use <a href=""http://phpseclib.sourceforge.net/"" rel=""nofollow"">phpseclib, a pure PHP RSA implementation</a>. eg.</p>

<pre><code>&lt;?php
include('Crypt/RSA.php');

$rsa = new Crypt_RSA();
$rsa-&gt;loadKey('...');

$privatekey = $rsa-&gt;getPrivateKey();
$publickey = $rsa-&gt;getPublicKey();
?&gt;
</code></pre>
","1885","<php><openssl><private-key><public-key>","2","2","2","2012-06-07 00:00:51","10907741","0","","","","","2012-06-06 02:37:05",""
"23286485","SSH permission denied (publickey.gssapi-with-mic) windows openssh","<p>I am trying to SSH on my server using key but i am getting below error. I have windows machine. Also, I tried same from Cygwin and it connected!!. But , not able to do from command prompt. Error is below.</p>

<pre><code>C:\Users\Rahul\.ssh&gt;ssh username@example.com
Could not create directory '/home/Rahul/.ssh'.
The authenticity of host 'example.com ' can't be established.
RSA key fingerprint is 67:b6:1e:8a:0f:26:db:75:8e:78:af:16:ae:be:49:c2.
Are you sure you want to continue connecting (yes/no)? yes
Failed to add the host to the list of known hosts (/home/Rahul/.ssh/known_hosts). 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for 'C:/Users/Rahul/.ssh/id_rsa' are too open.
It is recommended that your private key files are NOT accessible by others.
This private key will be ignored.
bad permissions: ignore key: C:/Users/Rahul/.ssh/id_rsa
Enter passphrase for key 'C:/Users/Rahul/.ssh/id_rsa':
Permission denied (publickey,gssapi-with-mic).
</code></pre>

<p>I have done various solution but not able to find solutions. Please help. THanks in advance</p>
","","1883","<windows><ssh><cygwin><public-key><openssh>","1","","0","2014-04-25 07:12:42","","3","","","","","2014-04-25 07:12:42",""
"46525629","SSH failing after Postponed publickey and single attempt","<p>I have a working SSH setup that uses publickey without any issues. Specifically, I'm using SCP -i to copy files to a remote server and it works</p>

<pre><code>scp -i /var/www/key/id_rsa /var/www/backups/example.dat living@example.com:/var/www/backups
</code></pre>

<p>This works fine as a command line when logged in as <strong>root</strong> or <strong>living</strong>.</p>

<p>Here is an example of <strong>WORKING</strong> debug from a /usr/sbin/sshd -d test:</p>

<pre><code>Server listening on :: port 22.
debug1: Server will not fork when running in debugging mode.
debug1: rexec start in 5 out 5 newsock 5 pipe -1 sock 8
debug1: inetd sockets after dupping: 3, 3
Connection from X.X.X.X port 33166 on Y.Y.Y.Y port 22
debug1: Client protocol version 2.0; client software version OpenSSH_6.6.1
debug1: match: OpenSSH_6.6.1 pat OpenSSH_6.6.1* compat 0x04000000
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.6.1
debug1: SELinux support disabled [preauth]
debug1: permanently_set_uid: 74/74 [preauth]
debug1: list_hostkey_types: ssh-rsa,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]
debug1: SSH2_MSG_KEXINIT sent [preauth]
debug1: SSH2_MSG_KEXINIT received [preauth]
debug1: kex: client-&gt;server aes128-ctr hmac-md5-etm@openssh.com none [preauth]
debug1: kex: server-&gt;client aes128-ctr hmac-md5-etm@openssh.com none [preauth]
debug1: kex: curve25519-sha256@libssh.org need=16 dh_need=16 [preauth]
debug1: kex: curve25519-sha256@libssh.org need=16 dh_need=16 [preauth]
debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]
debug1: SSH2_MSG_NEWKEYS sent [preauth]
debug1: expecting SSH2_MSG_NEWKEYS [preauth]
debug1: SSH2_MSG_NEWKEYS received [preauth]
debug1: KEX done [preauth]
debug1: userauth-request for user living service ssh-connection method none [preauth]
debug1: attempt 0 failures 0 [preauth]
debug1: PAM: initializing for ""living""
debug1: PAM: setting PAM_RHOST to ""FQDN_redacted""
debug1: PAM: setting PAM_TTY to ""ssh""
debug1: userauth-request for user living service ssh-connection method publickey [preauth]
debug1: attempt 1 failures 0 [preauth]
debug1: test whether pkalg/pkblob are acceptable [preauth]
debug1: temporarily_use_uid: 1001/1001 (e=0/0)
debug1: trying public key file /home/living/.ssh/authorized_keys
debug1: fd 4 clearing O_NONBLOCK
Found matching RSA key: 5a:c2:98:38:bf:b3:01:13:55:b0:3d:74:61:3f:b1:f3
debug1: restore_uid: 0/0
Postponed publickey for living from X.X.X.X port 33166 ssh2 [preauth]
debug1: userauth-request for user living service ssh-connection method publickey [preauth]
debug1: attempt 2 failures 0 [preauth]
debug1: temporarily_use_uid: 1001/1001 (e=0/0)
debug1: trying public key file /home/living/.ssh/authorized_keys
debug1: fd 4 clearing O_NONBLOCK
Found matching RSA key: 5a:c2:98:38:bf:b3:01:13:55:b0:3d:74:61:3f:b1:f3
debug1: restore_uid: 0/0
debug1: ssh_rsa_verify: signature correct
debug1: do_pam_account: called
Accepted publickey for living from X.X.X.X port 33166 ssh2: RSA 5a:c2:98:38:bf:b3:01:13:55:b0:3d:74:61:3f:b1:f3
debug1: monitor_child_preauth: living has been authenticated by privileged process
debug1: monitor_read_log: child log fd closed
debug1: temporarily_use_uid: 1001/1001 (e=0/0)
debug1: ssh_gssapi_storecreds: Not a GSSAPI mechanism
debug1: restore_uid: 0/0
debug1: SELinux support disabled
debug1: PAM: establishing credentials
User child is on pid 2320
debug1: PAM: establishing credentials
debug1: permanently_set_uid: 1001/1001
debug1: Entering interactive session for SSH2.
</code></pre>

<p>My problem is this: when I run the <strong>same</strong> SCP command within a PERL script, as a backtick bash command, it fails with the following debug.</p>

<pre><code>$x=`scp -i /var/www/keys/living/id_rsa /var/www/$RS-&gt;[$x][3].dat living\@$a:/var/www/`;
</code></pre>

<p>I'm thinking the issue might be resolved if I can figure out why the SCP command run inside PERL is only trying once.</p>

<p>Here is an example of <strong>FAILING</strong> debug from a /usr/sbin/sshd -d test:</p>

<pre><code>Server listening on :: port 22.
debug1: Server will not fork when running in debugging mode.
debug1: rexec start in 5 out 5 newsock 5 pipe -1 sock 8
debug1: inetd sockets after dupping: 3, 3
Connection from X.X.X.X port 33208 on Y.Y.Y.Y port 22
debug1: Client protocol version 2.0; client software version OpenSSH_6.6.1
debug1: match: OpenSSH_6.6.1 pat OpenSSH_6.6.1* compat 0x04000000
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.6.1
debug1: SELinux support disabled [preauth]
debug1: permanently_set_uid: 74/74 [preauth]
debug1: list_hostkey_types: ssh-rsa,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]
debug1: SSH2_MSG_KEXINIT sent [preauth]
debug1: SSH2_MSG_KEXINIT received [preauth]
debug1: kex: client-&gt;server aes128-ctr hmac-md5-etm@openssh.com none [preauth]
debug1: kex: server-&gt;client aes128-ctr hmac-md5-etm@openssh.com none [preauth]
debug1: kex: curve25519-sha256@libssh.org need=16 dh_need=16 [preauth]
debug1: kex: curve25519-sha256@libssh.org need=16 dh_need=16 [preauth]
debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]
debug1: SSH2_MSG_NEWKEYS sent [preauth]
debug1: expecting SSH2_MSG_NEWKEYS [preauth]
debug1: SSH2_MSG_NEWKEYS received [preauth]
debug1: KEX done [preauth]
debug1: userauth-request for user living service ssh-connection method none [preauth]
debug1: attempt 0 failures 0 [preauth]
debug1: PAM: initializing for ""living""
debug1: PAM: setting PAM_RHOST to ""FQDN_redacted""
debug1: PAM: setting PAM_TTY to ""ssh""
debug1: userauth-request for user living service ssh-connection method publickey [preauth]
debug1: attempt 1 failures 0 [preauth]
debug1: test whether pkalg/pkblob are acceptable [preauth]
debug1: temporarily_use_uid: 1001/1001 (e=0/0)
debug1: trying public key file /home/living/.ssh/authorized_keys
debug1: fd 4 clearing O_NONBLOCK
Found matching RSA key: 5a:c2:98:38:bf:b3:01:13:55:b0:3d:74:61:3f:b1:f3
debug1: restore_uid: 0/0
Postponed publickey for living from X.X.X.X port 33208 ssh2 [preauth]
Connection closed by X.X.X.X [preauth]
debug1: do_cleanup [preauth]
debug1: monitor_read_log: child log fd closed
debug1: do_cleanup
debug1: PAM: cleanup
debug1: Killing privsep child 2409
</code></pre>
","<p>The solution to this was that the permissions of the file ""<strong>id_rsa</strong>"" private key was set to <strong>0660</strong> and had to be changed to <strong>0600</strong>.</p>

<p>A noob error that was obscured because the SCP command was being run within PERL
<em>backticks</em> as the child of a PERL fork with these commands:</p>

<pre><code> $|=1;$SIG{CHLD} = ""IGNORE"";
</code></pre>

<p>This causes debug from the child process to not show up in the Apache error_log, and no amount of debug was exposing the issue on either the source or destination servers.</p>
","1880","<bash><perl><ssh><public-key><sshd>","1","0","1","2017-10-02 14:11:59","","6","","2994732","","2017-10-02 13:28:39","2017-10-02 12:39:21",""
"13747212","determine key size from public key (PEM format)","<p>I'm trying to figure out the size of a public key that I received. How can determine the size from the key? I can't find a simple way in the <a href=""http://ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/OpenSSL/X509/Certificate.html"" rel=""nofollow"">documentation</a>.</p>

<p>What I have is the public key itself, which I receive like this:</p>

<pre><code>cert = OpenSSL::X509::Certificate.new(sock.peer_cert)
pkey = cert.public_key
</code></pre>

<p>The public key is in PEM format. So you have the start and end line, and in the middle the actual key. Now the key itself is base64 encoded. If I decode that string and count the bytes I get a size. This size includes some extras like exponent and modulus (Is there more?). What I need to know to determine the bits of the public key is how many bytes modulus and exponent (and if there is more, then that as well) take up.</p>
","<pre><code>key_length_in_bits = pkey.n.num_bytes * 8
</code></pre>

<p>Quoting <a href=""http://en.wikipedia.org/wiki/RSA_%28algorithm%29"" rel=""nofollow"">Wikipedia</a>:</p>

<blockquote>
  <p>[...] n is used as the modulus for both the public and private keys. Its length, usually expressed in bits, is the key length. [...]</p>
</blockquote>
","1838","<ruby><security><size><certificate><public-key>","1","2","1","2012-12-18 12:20:29","13932884","0","","857990","","2012-12-10 15:36:03","2012-12-06 15:43:34",""
"35935581","Generating an RSA KeyPair and extracting modulus and exponent from Public Key in Android","<p>I generated a Public Private Key Pair in Android. Now I need to send my Public Key back to the Server for communicating with RSA Encryption. However, I am communicating with a .NET Server (in C#). Therefore I need to send my Public Key in the following format:</p>

<pre><code>&lt;RSAKeyValue&gt;&lt;Modulus&gt;Modulus In Base 64&lt;/Modulus&gt;&lt;Exponent&gt;Exponent in Base 64&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;
</code></pre>

<p>I generate the key Pair with the following code:</p>

<pre><code>public static void generateKey() {

    try 
    {
        final KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
        keyGen.initialize(1024);
        final KeyPair key = keyGen.generateKeyPair();
        privateKey = key.getPrivate();
        publicKey = key.getPublic();

    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
</code></pre>

<p>How can I extract the modulus and exponent of the PublicKey I just generated?</p>
","<p>There was no native Android method to solve my problem. In order to extract the modulus and exponent of the generated Public Key, I used the following code, which takes an Android Public Key as Input and returns it in the .NET XML Format:</p>

<pre><code>   public static String getPublicKeyAsXml(PublicKey publicKey) throws Exception

     {

        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        RSAPublicKeySpec ks = kf.getKeySpec(publicKey, RSAPublicKeySpec.class);
        BigInteger modulus = ks.getModulus();
        BigInteger exponent = ks.getPublicExponent();
        byte[] modByte = modulus.toByteArray();
        byte[] expByte = exponent.toByteArray();
        modByte = testBytes(modByte);
        expByte = testBytes(expByte);
        String encodedModulus = Base64.encodeToString(modByte, Base64.NO_WRAP);
        String encodedExponent = Base64.encodeToString(expByte, Base64.NO_WRAP);
        String publicKeyAsXML = ""&lt;RSAKeyValue&gt;"" +
                ""&lt;Modulus&gt;"" + encodedModulus + ""&lt;/Modulus&gt;"" +
                ""&lt;Exponent&gt;"" + encodedExponent + ""&lt;/Exponent&gt;"" +
                ""&lt;/RSAKeyValue&gt;"";

        return publicKeyAsXML;
    }
</code></pre>
","1820","<android><rsa><public-key>","0","0","1","2016-06-14 14:30:13","37814810","4","","4556715","","2016-06-14 14:30:13","2016-03-11 08:37:22",""
"3389077","Storage of private and public key in MySQL-DB","<p>Probably somebody asked that already, but I couldn't find any usefull information and I've never done it before.</p>

<p>So here is the problem.</p>

<p>If I'll get a set of key pairs (DSA public and private keys) with different time validity and unique ID, what is the best way to store them in MySQL-DB using Java?</p>

<p>Is it a good idea at all to store them in DB?</p>

<p>Thank you in advance.</p>

<p>Mur</p>

<p>Ps.
another problem, i cann't really imagine, how do the both keys look like? just byte arrays?</p>
","<p>Your best bet is to use blobs when storing them. </p>

<p>The decision of whether or not it's a good idea to store the keys in the database depends on the specifics of your application. I can imagine a secure database dedicated to storing this type of information might work for some situations.</p>
","1806","<java><mysql><public-key><private-key><dsa>","3","0","1","2011-02-08 22:39:06","4939346","0","","220819","","2010-08-02 15:12:13","2010-08-02 15:11:14",""
"13229751","PhpSeclib <-> BouncyCastle RSA","<p>I generated on server side a pair public/private keys using phpseclib like</p>

<pre><code>include 'Crypt/RSA.php';
$rsa = new Crypt_RSA();
$rsa-&gt;setPrivateKeyFormat(CRYPT_RSA_PRIVATE_FORMAT_PKCS1);
$rsa-&gt;setPublicKeyFormat(CRYPT_RSA_PUBLIC_FORMAT_PKCS1);
extract($rsa-&gt;createKey());
echo $privatekey;
echo ""\n\n\n"";
echo $publickey;
</code></pre>

<p>Now I want import on client side Public key using Java Bouncy Castle engine.<br>
Here my Public key</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIGJAoGBAJEGAmaQejDgJaCg/B5+g68arqpMpl6jZ9+p8TBzNRIq+Ygt/n3iqz+pAtltrlRnmqSD
svx0LMluw1wXezQ1pz2tTJTEhg6b69Qui0o//W5UDfle4yOyAHaOs8MD5nubJjXFU8vGiEdektET
jgKqiSr5TBgZoHy+YDWpd4yTemXVAgMBAAE=
-----END PUBLIC KEY-----
</code></pre>

<p>But I can do it. I tried to do it several ways but I always get errors.</p>

<pre><code>AsymmetricKeyParameter publicKey = 
    (AsymmetricKeyParameter) PublicKeyFactory.createKey(b64.decodeBuffer(key));
AsymmetricKeyParameter publicKey = 
    (AsymmetricKeyParameter) PublicKeyFactory.createKey(key.getBytes())
</code></pre>

<p>Also</p>

<pre><code>PEMReader pemReader = new org.bouncycastle.openssl.PEMReader (reader);
PemObject pem = pemReader.readPemObject();
</code></pre>

<p>All these ways generate error. </p>

<p>How should I import Public key using Java Bouncy Castle engine?</p>
","<p>Might be worthwhile to try with the latest Git version of phpseclib.  Quoting from a semi-recent commit:</p>

<p><a href=""https://github.com/phpseclib/phpseclib/commit/2f8d1055ea5a6b06cd7a40eb85661ba688a31320"" rel=""nofollow"">https://github.com/phpseclib/phpseclib/commit/2f8d1055ea5a6b06cd7a40eb85661ba688a31320</a></p>

<p>Quoting from it, the commit ""[makes] Crypt_RSA's public keys compatible with OpenSSL"".</p>
","1805","<php><rsa><bouncycastle><public-key><phpseclib>","1","0","2","2016-09-25 20:43:05","","1","","569976","","2016-09-25 20:43:05","2012-11-05 10:01:02",""
"13229751","PhpSeclib <-> BouncyCastle RSA","<p>I generated on server side a pair public/private keys using phpseclib like</p>

<pre><code>include 'Crypt/RSA.php';
$rsa = new Crypt_RSA();
$rsa-&gt;setPrivateKeyFormat(CRYPT_RSA_PRIVATE_FORMAT_PKCS1);
$rsa-&gt;setPublicKeyFormat(CRYPT_RSA_PUBLIC_FORMAT_PKCS1);
extract($rsa-&gt;createKey());
echo $privatekey;
echo ""\n\n\n"";
echo $publickey;
</code></pre>

<p>Now I want import on client side Public key using Java Bouncy Castle engine.<br>
Here my Public key</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIGJAoGBAJEGAmaQejDgJaCg/B5+g68arqpMpl6jZ9+p8TBzNRIq+Ygt/n3iqz+pAtltrlRnmqSD
svx0LMluw1wXezQ1pz2tTJTEhg6b69Qui0o//W5UDfle4yOyAHaOs8MD5nubJjXFU8vGiEdektET
jgKqiSr5TBgZoHy+YDWpd4yTemXVAgMBAAE=
-----END PUBLIC KEY-----
</code></pre>

<p>But I can do it. I tried to do it several ways but I always get errors.</p>

<pre><code>AsymmetricKeyParameter publicKey = 
    (AsymmetricKeyParameter) PublicKeyFactory.createKey(b64.decodeBuffer(key));
AsymmetricKeyParameter publicKey = 
    (AsymmetricKeyParameter) PublicKeyFactory.createKey(key.getBytes())
</code></pre>

<p>Also</p>

<pre><code>PEMReader pemReader = new org.bouncycastle.openssl.PEMReader (reader);
PemObject pem = pemReader.readPemObject();
</code></pre>

<p>All these ways generate error. </p>

<p>How should I import Public key using Java Bouncy Castle engine?</p>
","<p>I found solution</p>

<pre><code>    key = key.replaceAll(""PUBLIC KEY"", ""RSA PUBLIC KEY"");
    final Reader reader = new StringReader(key);
    PEMReader pemReader = new PEMReader(reader);
    Object obj = pemReader.readObject();
    pemReader.close();
    BCRSAPublicKey bcPublicKey = (BCRSAPublicKey) obj;

    AsymmetricKeyParameter publicKey = (AsymmetricKeyParameter) PublicKeyFactory.createKey(bcPublicKey.getEncoded());

    AsymmetricBlockCipher e = new RSAEngine();
    e = new org.bouncycastle.crypto.encodings.PKCS1Encoding(e);
    e.init(true, publicKey);

    byte[] messageBytes = inputData.getBytes();
    encryptedData = e.processBlock(messageBytes, 0, messageBytes.length);
</code></pre>

<p>Now i can encrypt on Java side and decrypt on Server (PHP) side</p>
","1805","<php><rsa><bouncycastle><public-key><phpseclib>","1","1","2","2016-09-25 20:43:05","","1","","569976","","2016-09-25 20:43:05","2012-11-05 10:01:02",""
"14529600","openssl c++ need to display public key in hex format","<p>I could use some help, I need to display a public key the same way Windows does when double clicking on a certificate (see image).  Thanks.</p>

<p>I can get the public key with either:</p>

<p>RSA *pubKey = X509_get_pubkey( csc->current_cert )->pkey.rsa;</p>

<p>or</p>

<p>EVP_PKEY *pubKey = X509_get_pubkey(csc->current_cert);</p>

<p>If found this snippet somewhere but the values I get are different from what Windows displays:</p>

<pre><code>unsigned char enc_bin[1024] = {0};
int enc_len = 0;
unsigned char dec_bin[1024] = {0};
int dec_len = 0;

enc_len = RSA_size( pubKey );
memset( enc_bin, 1, enc_len );

if( 0 &lt; ( dec_len = RSA_public_decrypt( enc_len, enc_bin, dec_bin, pubKey, RSA_NO_PADDING) ) )
{
    for (int i = 0; i &lt; dec_len; i++)
    {
        CString str;
        if( 0 == i )
            str.Format( L""%02X"", dec_bin[i] );
        else
            str.Format( L"" %02X"", dec_bin[i] );

        PubKey += str;
    }
}
</code></pre>

<p><img src=""https://i.stack.imgur.com/qfehn.png"" alt=""enter image description here""></p>
","<p>I found the answer, thanks for the reply.</p>

<pre><code>ASN1_BIT_STRING *pubKey = X509_get0_pubkey_bitstr(csc-&gt;current_cert); // csc-&gt;current_cert is an X509 struct

for (int i = 0; i &lt; pubKey-&gt;length; i++)
{
    CString str;
    if( 0 == i )
        str.Format( L""%02X"", pubKey-&gt;data[i] );
    else
        str.Format( L"" %02X"", pubKey-&gt;data[i] );

    PubKey += str;
}
</code></pre>
","1797","<c++><openssl><public-key>","1","0","1","2013-01-28 15:32:22","14565410","2","","","","","2013-01-25 20:10:21",""
"28770426","RSA Public Key Conversion with just Modulus","<p>I received an RSA-2048 bit public key (256 bytes) as a file which contains just those 256 bytes. Which function in SSL enables me to load this key as an RSA structure so I can convert it to another format? This is in C code using openssl source.</p>

<p>I think it's the DER format, but I'm not 100% certain.</p>
","<p>I just put this together and it seems to work correctly:</p>

<p><a href=""https://github.com/JonathonReinhart/rawrsa"" rel=""nofollow"">https://github.com/JonathonReinhart/rawrsa</a></p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;libgen.h&gt;
#include &lt;openssl/bn.h&gt;
#include &lt;openssl/rsa.h&gt;
#include &lt;openssl/pem.h&gt;

static const char* appname;

static void print_bn(const char *what, const BIGNUM *bn)
{
#ifdef DEBUG
    char *str = BN_bn2hex(bn);
    printf(""%s (hex): %s\n"", what, str);
    OPENSSL_free(str);
#endif
}

static void usage(void)
{
    fprintf(stderr, ""Usage: %s modulus-file exponent\n"", appname);
}

#define err(fmt, ...)   \
    fprintf(stderr, ""%s: "" fmt, appname, ##__VA_ARGS__)

int main(int argc, char *argv[])
{
    appname = basename(argv[0]);

    if (argc &lt; 3) {
        usage();
        exit(1);
    }

    const char *modfile = argv[1];
    const char *expstr = argv[2];

    /* Read modulus */
    FILE *mf = fopen(modfile, ""rb"");
    if (!mf) {
        err(""Failed to open \""%s\"": %m\n"", modfile);
        return 1;
    }

    unsigned char buf[256];
    if (fread(buf, sizeof(buf), 1, mf) != 1) {
        err(""Failed to read %zu bytes of modulus\n"", sizeof(buf));
        return 1;
    }

    fclose(mf);

    BIGNUM *mod = BN_bin2bn(buf, sizeof(buf), NULL);
    if (!mod) {
        err(""BN_bin2bn() failed\n"");
        return 1;
    }
    print_bn(""Modulus"", mod);


    /* Parse exponent */
    BIGNUM *exp = NULL;
    if (BN_dec2bn(&amp;exp, expstr) == 0) {
        err(""BN_dec2bn() failed\n"");
        return 1;
    }
    print_bn(""Exponent"", exp);

    /* Create RSA key */
    RSA *rsa = RSA_new();
    if (!rsa) {
        err(""RSA_new() failed\n"");
        return 1;
    }
    rsa-&gt;e = exp;
    rsa-&gt;n = mod;

    /* Write PEM-encoded RSA public key to stdout */
    if (!PEM_write_RSAPublicKey(stdout, rsa)) {
        err(""PEM_write_RSAPublicKey() failed\n"");
        return 1;
    }

    return 0;
}
</code></pre>

<p>I use <a href=""https://www.openssl.org/docs/crypto/BN_bin2bn.html"" rel=""nofollow""><code>BN_bin2bn</code></a> to create an OpenSSL bignum from raw binary data from a file. This is where we load your 256-byte modulus.</p>

<p>Then, I use <a href=""https://www.openssl.org/docs/crypto/BN_dec2bn.html"" rel=""nofollow""><code>BN_dec2bn</code></a> to create a bignum from the exponent provided on the command line.</p>

<p>Next, I create an RSA object with <a href=""https://www.openssl.org/docs/crypto/RSA_new.html"" rel=""nofollow""><code>RSA_new</code></a>, and set the public exponent (<code>rsa-&gt;e</code>) and modulus (<code>rsa-&gt;n</code>).</p>

<p>Finally, I write the RSA public key to a PEM file with <a href=""https://www.openssl.org/docs/crypto/PEM_write_RSAPublicKey.html"" rel=""nofollow""><code>PEM_write_RSAPublicKey</code></a>.</p>

<p><strong>Example:</strong></p>

<pre class=""lang-none prettyprint-override""><code>$ scons -Q
gcc -o main.o -c -Wall -Werror -g main.c
gcc -o rawrsa main.o -lcrypto

$ ./rawrsa key.bin 65537
-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEA9cFHSTQ6h1Ls/vx7B+V/84XVlLxUU1dU1mEr9ROAqWrZtfasvx2E
21lbva+AdJ/B4u6fGVhCEMgekXsRB65CqZfwL3DFL6tqam6GvrOyvZgAlQKrA54w
DaKMT8Kfg2I2K9W/HCkCOHczhuHhjFmeiV9BuQgpmcPcNz6UXBwU05d3g6oM/X4m
lEhEsaH4bqo1qsMX6jp6WnsR13GEfsYoYVmHgEbnKJyGpsoRVW6HQXLHvef9XLEJ
v9n7nLdHToya75svxJ3v9JugD3n6PiC48085/FWb9980o4hmG9iW5rehm4Dlui8c
TDnHkQSrvi9WLlZ+S8hdtwDRN/pVVTjgPAIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>
","1792","<c><openssl><rsa><public-key>","4","4","1","2015-07-29 14:41:27","28771644","4","1","608639","","2015-02-28 00:04:24","2015-02-27 17:02:43",""
"51323689","Manually create JWK from (RSA) PublicKey","<p>I need to convert a RSA PublicKey into a valid JWK. Especially the values ""n"" an ""e"" of the JWK are the ones I'm struggling with. The encoding does not seem to be correct, when looking at example JWK's at <a href=""https://tools.ietf.org/html/rfc7517#page-25"" rel=""nofollow noreferrer"">https://tools.ietf.org/html/rfc7517#page-25</a></p>

<p>Currently my code looks basically like this:</p>

<pre><code>private Map&lt;String, Object&gt; generateJWK(PublicKey publicKey){

    RSAPublicKey rsa = (RSAPublicKey) publicKey;

    Map&lt;String, Object&gt; values = new HashMap&lt;&gt;();

    values.put(""kty"", rsa.getAlgorithm()); // getAlgorithm() returns kty not algorithm
    values.put(""kid"", ""someuniqueid"");
    values.put(""n"", Base64.encode(rsa.getModulus().toString()));
    values.put(""e"", Base64.encode(rsa.getPublicExponent().toString()));
    values.put(""alg"", ""RS256"");
    values.put(""use"", ""sig"");

    return values;
}
</code></pre>

<p>The output however does not seem to be correctly encoded or something, <code>e</code> for example looks like this: <code>NjU1Mzc=</code></p>

<p><code>n</code> does not include special characters like <code>-</code>, <code>_</code> and <code>+</code> . :</p>

<pre><code>jMzk1MNT0xTk2NED1xzzgNyQ00IykADzMAM0c0wz0M0MONj2z5TgNzI3yAM0OONYzzMjzwNzDxgAzxDxzMMAjTwNNDYMINMgNQDOEAkIM2jMQzkjUTDUYONNg1A00Tw1Nx4YEzAzjUT1MTNMjDjMM1MNNAjyTMIzxNADDINQANwT5yTDEMjEzNz2z2gOgjDDDNyNDjTzz43ETOYMI35gDjE00MYYM2DzDjDgww53Mwz0ME1NMgOM3MIzYTzMwzOMIQU5MjOzUjMNQNNg50U5NIDNzw2DMMOggNcQQM21TI5NMzDTN5Mj123O33MNNMkyNTNONxMM5wMMc04jTgAUE3MM1zMg4NNMT4MNDMM5yTO2j4jNDEMy1yNANNAzOIEUDzNwzExwTIkNjUjkN54Uz0DT5x0zM51k2MxYkx0zMNzxMkDUDTTQN3gAYODATQDDwMDMjMMcONjxMNTYMT5kgxNkMjNMQU0jzMEwIIMzTzUD4MgYDkDNzcAzN0TN4yNTz11DMxDUjDM2MyDMy4DEINMwT22QxjNNEzNDATy1OM1NNDxYgz5TxDkj3gQ32kIwNNkDO3xczDAENcTMNO0MOjTDwE3g11wNUcgNTwQk30kjjNNzTz4jTj4OOjQNYzMzcMjTQMkyzNNNUQOTOMMkMMMNzwNxDOEkg4xADIT4DNxMz2TENT4yN4z2I2zjyMU3DTOEQN4MIQjNDMU5Y11QkccwMNI0kNzyNjMMN4NMTTNMzMwxMjjDzgAANO1zwjYIEUjM1ADgDNjxTITMNNkIYxzyzzEEDMzDzNjzM4NjNNjc3ITTD0T5jzN=
</code></pre>

<p>Am I assuming right that both values n and e are not properly encoded?
How should I convert the PublicKey to JWK? (Can not use 3rd party libraries)</p>
","<p>JWK uses base64url encoding which is slighly different to base64. Additionally, do not use <code>toString()</code> method on <code>BigInteger</code> values. Get directly the data as byte array</p>

<p>Change</p>

<pre><code>Base64.encode(rsa.getModulus().toString())
Base64.encode(rsa.getPublicExponent().toString())
</code></pre>

<p>To </p>

<pre><code>Base64.getUrlEncoder().encodeToString(rsa.getModulus().toByteArray())
Base64.getUrlEncoder().encodeToString(rsa.getPublicExponent().toByteArray())
</code></pre>
","1761","<java><rsa><public-key><jwk>","4","6","1","2018-07-13 12:48:11","51325478","3","2","","","","2018-07-13 11:04:41",""
"35867880","convert byte array back to Public key","<p>I've a Public key converted to byte array. I want to convert it back to Public key. I followed this <a href=""https://stackoverflow.com/questions/5364338/converted-secret-key-into-bytes-how-to-convert-it-back-to-secrect-key"">link</a> but getting an error :</p>

<p><code>Operation failed: javax.crypto.spec.SecretKeySpec incompatible with java.security.PublicKey</code></p>

<p>Since I know that it is a public key, is there any to convert it to <code>Publickey</code> instead of <code>SecretKey</code>.</p>

<p><strong><em>EDIT</em></strong></p>

<p>I have created a public key using <code>RSAPublicKeySPec</code>. Now there is <strong>no error but the signature verification fails</strong> because when I see the key material of the newly created public key, it is different from what I passed.</p>

<p><strong>Key Material I passed</strong>
<code>3082010a0282010100ab7f161c0042496ccd6c6d4dadb919973435357776003acf54b7af1e440afb80b64a8755f8002cfeba6b184540a2d66086d74648346d75b8d71812b205387c0f6583bc4d7dc7ec114f3b176b7957c422e7d03fc6267fa2a6f89b9bee9e60a1d7c2d833e5a5f4bb0b1434f4e795a41100f8aa214900df8b65089f98135b1c67b701675abdbc7d5721aac9d14a7f081fcec80b64e8a0ecc8295353c795328abf70e1b42e7bb8b7f4e8ac8c810cdb66e3d21126eba8da7d0ca34142cb76f91f013da809e9c1b7ae64c54130fbc21d80e9c2cb06c5c8d7cce8946a9ac99b1c2815c3612a29a82d73a1f99374fe30e54951662a6eda29c6fc411335d5dc7426b0f6050203010001</code></p>

<p><strong>Key Material I got after converting it to public key using  RSAPublicKeySpec</strong>
<code>30820122300D06092A864886F70D01010105000382010F003082010A0282010100AB7F161C0042496CCD6C6D4DADB919973435357776003ACF54B7AF1E440AFB80B64A8755F8002CFEBA6B184540A2D66086D74648346D75B8D71812B205387C0F6583BC4D7DC7EC114F3B176B7957C422E7D03FC6267FA2A6F89B9BEE9E60A1D7C2D833E5A5F4BB0B1434F4E795A41100F8AA214900DF8B65089F98135B1C67B701675ABDBC7D5721AAC9D14A7F081FCEC80B64E8A0ECC8295353C795328ABF70E1B42E7BB8B7F4E8AC8C810CDB66E3D21126EBA8DA7D0CA34142CB76F91F013DA809E9C1B7AE64C54130FBC21D80E9C2CB06C5C8D7CCE8946A9AC99B1C2815C3612A29A82D73A1F99374FE30E54951662A6EDA29C6FC411335D5DC7426B0F6050203010001</code></p>

<p>Clearly, the verification will fail because the key material is wrong! I don't understand why it is getting altered. </p>

<p>But when I directly create a public key using <code>java.security.PublicKey</code> (anonymous inner class), the key material doesn't get altered. But when I pass it to verify, I get <strong>wrong algorithm type</strong> error (I passed RSA as the algorithm) </p>

<p><strong><em>CODE SNIPPET</em></strong></p>

<pre><code>    PublicKey pubKey = new PublicKey() {

        private static final long serialVersionUID = 1L;

        @Override
        public String getFormat() {

            return ""PKCS1"";
        }

        @Override
        public byte[] getEncoded() {

            return keyMat;
        }

        @Override
        public String getAlgorithm() {

            return ""SHA256withRSA""; // tried with ""RSA"", getting same error
        }
    };

    return pubKey;
}
</code></pre>
","<p>Retrieved from <a href=""https://docs.oracle.com/javase/tutorial/security/apisign/vstep2.html"" rel=""nofollow"">Here</a></p>

<pre><code>//Takes your byte array of the key as constructor parameter
X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(myKeyBytes);

//Takes algorithm used to generate keys (DSA, RSA, DiffieHellman, etc.) as 1st parameter
//Takes security provider (SUN, BouncyCastle, etc.) as second parameter
KeyFactory keyFactory = KeyFactory.getInstance(""DSA"", ""SUN"");

//Creates a new PublicKey object
PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);
</code></pre>
","1746","<java><security><byte><public-key>","1","2","1","2016-03-16 06:49:29","","2","","-1","","2017-05-23 11:50:26","2016-03-08 12:49:56",""
"29197633","I don't understand vagrant public key logic","<p>I am doing my box. I want it like vagrant up / vagrant ssh will not ask for anything.</p>

<p>Currently, I am getting this</p>

<pre><code>==&gt; default: Clearing any previously set network interfaces...
==&gt; default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
    default: Adapter 2: hostonly
==&gt; default: Forwarding ports...
    default: 22 =&gt; 2222 (adapter 1)
==&gt; default: Running 'pre-boot' VM customizations...
==&gt; default: Booting VM...
==&gt; default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: Warning: Connection timeout. Retrying...
    default: Warning: Connection timeout. Retrying...
    default: Warning: Remote connection disconnect. Retrying...
    default: Warning: Authentication failure. Retrying...
</code></pre>

<p>I put this (1) key to /home/vagrant/.ssh/authorized_keys</p>

<p>My logic behind this is that I need to put public key to vagrant box which I want to ship and once I execute vagrant up, vagrant client will be able to access that box without the password because I put there its public key.</p>

<p>But this is obviously not good solution and I do not understand what I am doing wrong.</p>

<p>I am able to do vagrant ssh where I put password ""vagrant"" and I am connected however when I look into autorized_key, it is EMPTY! But I am 100% it was not empty when I was going to box it with vagrant package ... </p>

<p>What key I need to put where EXACTLY? I was following this (2) (""Configure SSH Authentication with a Public Key"" section) but it just does not work.</p>

<p>I am using vagrant 1.7.2</p>

<p>(1) <a href=""https://github.com/mitchellh/vagrant/blob/master/keys/vagrant.pub"" rel=""nofollow"">https://github.com/mitchellh/vagrant/blob/master/keys/vagrant.pub</a>
(2) <a href=""http://docs-v1.vagrantup.com/v1/docs/base_boxes.html"" rel=""nofollow"">http://docs-v1.vagrantup.com/v1/docs/base_boxes.html</a></p>
","","1733","<ssh><vagrant><virtualbox><public-key>","3","","0","2015-03-22 17:39:30","","1","","","","","2015-03-22 17:39:30",""
"4202672","Where should I store the Public Key?","<p>My web application have a continuously running service to send a report to a ftp server, the file need to be encrypted by using a Public Key. Thus my question is where should I store the Public Key? I only have one Public Key so using an advanced Key Store seems to be overkill?</p>

<p>Should I just manually create a folder on the server and store it in there?</p>
","<p>If this key is public you can store it anywhere. Folder is ok.</p>
","1727","<c#><security><storage><public-key><keystore>","1","5","3","2010-11-17 08:37:58","4202701","0","1","","","","2010-11-17 08:32:13",""
"4202672","Where should I store the Public Key?","<p>My web application have a continuously running service to send a report to a ftp server, the file need to be encrypted by using a Public Key. Thus my question is where should I store the Public Key? I only have one Public Key so using an advanced Key Store seems to be overkill?</p>

<p>Should I just manually create a folder on the server and store it in there?</p>
","<p>Storage of the public key (or more likely a certificate containing it) isn't the part that matters. What matters is the location of the private key. That should be located in storage which is ideally only accessible by the web application.</p>
","1727","<c#><security><storage><public-key><keystore>","1","5","3","2010-11-17 08:37:58","4202701","0","1","","","","2010-11-17 08:32:13",""
"4202672","Where should I store the Public Key?","<p>My web application have a continuously running service to send a report to a ftp server, the file need to be encrypted by using a Public Key. Thus my question is where should I store the Public Key? I only have one Public Key so using an advanced Key Store seems to be overkill?</p>

<p>Should I just manually create a folder on the server and store it in there?</p>
","<p>A public key can be read by anybody, by definition. Therefore it is not a security issue to have it available for everybody.</p>
","1727","<c#><security><storage><public-key><keystore>","1","6","3","2010-11-17 08:37:58","4202701","0","1","","","","2010-11-17 08:32:13",""
"22624416","how can I identify my SSL public key certificate?","<p>Amazon Cloudfront is giving me errors, either my private key doesn't match my public key certificate or my public key certificate cannot be parsed as it's invalid.</p>

<p>Using Godaddy for my SSL certificate middle man/provider, I got a:</p>

<p>.pem whoose contents beings with ""-----BEGIN RSA PRIVATE KEY-----""</p>

<p>(I'm assuming that's my private key)</p>

<p>Inside Godaddy I am able to download some certs for the SSL, they are:</p>

<p>.crt (type = Security Certificate)
.p7b (type = PKCS #7 Certificate)</p>

<p>Is one of the above my public key? Or is there another way I am supposed to get my public key?</p>
","<p>I have encountered this issue before with bad CSR Request. 
According to GoDaddy:
To install a digital certificate, you must first generate and submit a Certificate Signing Request (CSR) to the Certification Authority (CA). The CSR contains your certificate-application information, including your public key. Use your Web server software to generate the CSR, which will also create your public/private key pair used for encrypting and decrypting secure transactions.</p>

<p><a href=""http://support.godaddy.com/help/article/5343/generating-a-certificate-signing-request"" rel=""nofollow"">http://support.godaddy.com/help/article/5343/generating-a-certificate-signing-request</a></p>

<p>It also states: NOTE: When generating your CSR, <strong>specify a key size of 2048 or higher</strong>.</p>

<p>The key size is sometimes the culprit. Hope it helps.</p>
","1715","<ssl><ssl-certificate><private-key><public-key>","0","0","1","2014-03-25 02:52:46","","3","","","","","2014-03-25 02:31:37",""
"23171562","Permission denied (publickey) but public key exists locally and remotely","<p>I have the following error when I tried to push:</p>

<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists
</code></pre>

<p>I know what it means. However, <code>id_rsa.pub</code> does exist locally and it's copied to bitbucker as well, they are both identical. The repository exists also. </p>

<p>What could the cause?</p>
","<h1>Public Key issues</h1>

<ol>
<li><p>Check that you're putting in the correct remote repository path (i.e. <code>git@github.com:username/reponame</code>).</p></li>
<li><p>Debug the connection with <code>ssh git@somehostname.com -T -vv</code> to get verbose mode. 
Check the output. It will tell you what's going on. If you're still stuck, post it here and we can have a look.</p></li>
<li><p><code>ssh</code> will often complain if your private key <strong>or</strong> its parent directories leading to the private key have <a href=""https://stackoverflow.com/questions/9270734/ssh-permisssions-are-too-open-error"">higher permissions set than they ought to</a>.</p>

<ol>
<li>The key itself should be set with <code>chmod 0600 ~/.ssh/id_rsa</code>, and the <code>~/.ssh</code> directory to 0700 at most.</li>
<li>The <code>~</code> and <code>~/..</code> (parent directory, often <code>/home</code> on Linux and <code>/Users</code> on Mac OS X) should be set to 744 at most.</li>
<li><p>Also check that the group and user permissions are set correctly on the key and its parent directories:</p>

<blockquote>
<pre><code>$ id -un &amp;&amp; id -ug   # check output of this command before using!
username
groupname
$ chown --recursive $(id -un):$(id -gn) ~   
</code></pre>
</blockquote>

<p>This will reset all permissions on your home directory so your current user and group own all files. This may not be what you want. See <code>man chown</code>.</p></li>
</ol></li>
<li><p>You may also want to check the <code>~/.ssh/authorized_keys</code> file on the remote host if you're still having trouble. Its permissions are also a point of failure.</p></li>
</ol>

<hr>

<h1>Repairing OSX directory permissions</h1>

<p>@AlexanderSupertramp, I said the permissions should be <code>744</code> <strong>'at most,'</strong> yes, referring to the requirements for SSH only. But I did not suggest that you should chmod the <code>/home</code> directory to that number. Each operating system has its own requirements for directory permissions, and I could only provide generic instructions since you didn't provide much information about your system. In any case, I am terribly sorry that my answer was not clear.</p>

<p>It is possible that your mac is failing to boot because <code>744</code> is too liberal. But I cannot be sure.  To resolve this you may want to pay a visit to the Genius Bar at an Apple Store or contact an authorized repair technician. You may also be able to fix the directory permissions automatically using built-in tools as follow:</p>

<ol>
<li>Boot into single-user mode by pressing <code>Command+S</code> at the same time as the power button to turn on your mac, as explained in <a href=""http://www.cultofmac.com/240390/use-single-user-mode-to-solve-wonky-mac-os-x-issues-os-x-tips/"" rel=""nofollow noreferrer"">this article</a>.</li>
<li>Launch the OSX Disk Utility from the menu bar, and then use the repair permissions tool as described in this <a href=""http://support.apple.com/kb/ht1452"" rel=""nofollow noreferrer"">Apple KB</a></li>
</ol>
","1710","<linux><ubuntu><github><ssh><public-key>","0","1","1","2014-06-12 18:58:03","23171782","7","","2813589","","2014-04-19 15:07:19","2014-04-19 14:56:59",""
"12157325","Permission denied (publickey) on Amazon EC2","<p><strong>Here is my problem.</strong></p>

<ol>
<li><p>I created a new instance, use the same key pair of another instance. </p></li>
<li><p>SSH to the new instance, running ok. </p></li>
<li><p>I terminate the old instance.</p></li>
</ol>

<p>And when I SSH to my new instance with the key, it got problem.</p>

<pre><code>OpenSSH_5.6p1, OpenSSL 0.9.8r 8 Feb 2011
debug1: Reading configuration data /etc/ssh_config
debug1: Applying options for *
debug1: Connecting to ec2-176-34-8-64.ap-northeast-1.compute.amazonaws.com [176.34.8.64]         port 22.
debug1: Connection established.
debug1: identity file foobar.pem type -1
debug1: identity file foobar.pem-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.3
debug1: match: OpenSSH_5.3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.6
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'ec2-176-34-8-64.ap-northeast-1.compute.amazonaws.com' is known and matches the RSA host key.
debug1: Found key in /Users/xudannie/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/xudannie/.ssh/id_rsa
debug1: Authentications that can continue: publickey
debug1: Trying private key: foobar.pem
debug1: read PEM private key done: type RSA
debug1: Authentications that can continue: publickey
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>So I checked other answers, maybe I should create a new instance and mount this one to add public keys. Is this the only way to solve the problem? </p>

<p>Thanks for help.</p>
","<p>Not sure if you got it sorted or not but permissions on your private key may give that error without any further specification. I´m aware that you in this specific case probably didn´t change the file permissions though.</p>

<p>However, if thats the case, just <code>sudo chmod 600 ~/.ssh/your_private_key</code>
Especially putty in windows enviroments seems to just deny access, linux usually tells you to change the permission.   </p>
","1686","<ssh><amazon-ec2><public-key>","1","1","1","2013-01-22 06:43:14","","3","","","","","2012-08-28 10:24:25",""
"49759326","How to send public key from server to client VIA socket using pickle","<p>I need help sending a public key from the server to client via socket using pickle. I run both just by opening two command prompts so I don't need to send it over a network or etc if it makes a difference. Just not sure how to make the public_key a pickle file and send it over socket. </p>

<p>Server code:</p>

<pre><code>import socket
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Hash import SHA256
from Crypto.Cipher import DES3
random_generator = Random.new().read
import pickle

def main():
    host = '127.0.0.1'
    port = 5000
    s = socket.socket()
    s.bind((host,port))
    s.listen(1)
    c, addr = s.accept()
    print ""Connection from: ""+str(addr)
    while True:
        data = c.recv(1024)
        if not data:
            break
    print ""from connected user: ""+str(data)
    data = str(data)
    #""Step 2 Server says hello and sends the public key certificate.""        
    print ""Start SSL Handshake""
    print""Press Enter to Generate the key pair.""        
    a = raw_input("""")
    key = RSA.generate(1024, random_generator)
    public_key = key.publickey()        &lt;----- need to pickle and send to client
    c.send(data)
</code></pre>

<p>Client code:</p>

<pre><code>import socket
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Hash import SHA256
random_generator = Random.new().readdef main():

host = '127.0.0.1'
port = 5000
s = socket.socket()
s.connect((host,port))
#""Step 1 Client says hello.""
message = raw_input(""-&gt; "")
while message != 'q':
    s.send(message)
    data = s.recv(1024)
    print 'Received the public key from server: (iCrypto.PublicKey.RSA '
    #""Step 3 Client verifies the public key.""  &lt;------------ need to recieve / depickle key here
    message = raw_input(""-&gt; Press enter to verify the public key."")
</code></pre>
","<p>Pickling the output from an open port is asking for trouble (<a href=""https://stackoverflow.com/questions/10302247/understanding-python-pickle-insecurity"">understanding pickle insecurity</a>). Furthermore you're just adding a layer of complexity that isn't needed. <a href=""http://pythonhosted.org/pycrypto/Crypto.PublicKey.RSA._RSAobj-class.html#exportKey"" rel=""nofollow noreferrer""><code>RSA._RSAobj.exportKey</code></a> returns a <code>bytes</code> object which can be sent directly over a socket, and is conveniently also exactly the data type needed for <a href=""http://pythonhosted.org/pycrypto/Crypto.PublicKey.RSA-module.html#importKey"" rel=""nofollow noreferrer""><code>RSA.importKey()</code></a>.</p>

<p>Server:</p>

<pre><code>#conn is your socket
conn.send(key.publickey().exportKey(format='PEM', passphrase=None, pkcs=1)) 
</code></pre>

<p>Client:</p>

<pre><code>#you'll need to decide how to determine N: number of bytes received (should be constant for constant size key)
pub_key = RSA.importKey(conn.recv( N ), passphrase=None) 
</code></pre>
","1677","<python><networking><pickle><public-key>","0","3","1","2018-04-10 18:04:03","49760281","4","","","","","2018-04-10 17:06:20",""
"29392536","JSch scp without known_host file and with StrictHostKeyChecking","<p>I am trying to copy some files from a Windows machine to a Linux machine, which is working fine with JSch so far. I can copy files using <code>StrictHostKeyChecking no</code> or I need to have the <code>known_host</code> file from the Linux machine I copy to. I am using the code for a Java project which should be able to send files automatically to (unknown) Linux machines. I got the username, password, IP and the publickey for the machine. Is there any way to authenticate without the <code>known_host</code> file and via the publickey? Because of security issues I do not want to switch <code>StrictHostKeyChecking</code> to <code>no</code> but then I get ""com.jcraft.jsch.JSchException: UnknownHostKey""</p>

<pre><code>FileInputStream fis = null;
JSch jsch = new JSch();

//jsch.setKnownHosts("""");
jsch.addIdentity(""D:\\Uni\\Arbeit\\remote_id_rsa"");
Session session=jsch.getSession(user, host, 22);
session.setPassword(password);
//session.setConfig(""StrictHostKeyChecking"", ""no"");
session.connect();
</code></pre>
","<p>That does not make sense. Either you know the host public key and you can verify it either using the <code>known_host</code> file or programmatically using:</p>

<pre><code>public void KnownHosts.add(HostKey hostkey, UserInfo userinfo)
</code></pre>

<p>(You can access the instance of <code>KnownHosts</code> using <code>Session.getHostKeyRepository()</code>)</p>

<p>For more details, see <a href=""https://stackoverflow.com/q/32852906/850848"">How to resolve Java UnknownHostKey, while using JSch SFTP library?</a></p>

<hr>

<p>Or you do not know the host public key, and then you cannot create a secure connection (and the <code>StrictHostKeyChecking=no</code> is your only option).</p>

<hr>

<p>See <em>my</em> article about <a href=""https://winscp.net/eng/docs/ssh_verifying_the_host_key"" rel=""nofollow noreferrer"">verifying the host key</a> to understand, what is it about, and its importance. The article is about WinSCP client, but it's valid in general for any SSH client.</p>
","1665","<java><scp><jsch><public-key>","0","0","1","2017-05-09 09:31:29","29394678","2","1","850848","","2015-04-01 15:20:34","2015-04-01 13:48:12",""
"26624562","adding ssh public key to server","<p>I'm trying to push my id_rsa.pub to server so I can ssh into it.</p>

<p>I've run the following command,</p>

<pre><code>cat ~/.ssh/id_rsa.pub | ssh -v -p 12345 myname@123.45.67.8 'cat &gt;&gt; ~/.ssh/authorized_keys'
</code></pre>

<p>which returns the following debugging:</p>

<pre><code>debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to 123.45.67.8 [123.45.67.8] port 12345.
debug1: Connection established.
debug1: identity file /Users/myname/.ssh/id_rsa type 1
debug1: identity file /Users/myname/.ssh/id_rsa-cert type -1
debug1: identity file /Users/myname/.ssh/id_dsa type -1
debug1: identity file /Users/myname/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.9p1 Debian-5ubuntu1.4
debug1: match: OpenSSH_5.9p1 Debian-5ubuntu1.4 pat OpenSSH_5*
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Server host key: RSA [some server host key]
debug1: Host '[123.45.67.8]:12345' is known and matches the RSA host key.
debug1: Found key in /Users/myname/.ssh/known_hosts:6
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/myname/.ssh/github_rsa
debug1: Authentications that can continue: publickey
debug1: Offering RSA public key: /Users/myname/.ssh/id_rsa
debug1: Authentications that can continue: publickey
debug1: Trying private key: /Users/myname/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>I can't figure out what the problem is..
can anybody please help me out?</p>
","<p>Key based authentication will only work if the authorized_keys has
Correct permissions. </p>

<p>Try to do a chmod 600 ~/.ssh/authorized_keys</p>
","1649","<ssh><public-key>","2","3","3","2019-04-04 12:05:14","26624663","0","2","","","","2014-10-29 07:10:36",""
"26624562","adding ssh public key to server","<p>I'm trying to push my id_rsa.pub to server so I can ssh into it.</p>

<p>I've run the following command,</p>

<pre><code>cat ~/.ssh/id_rsa.pub | ssh -v -p 12345 myname@123.45.67.8 'cat &gt;&gt; ~/.ssh/authorized_keys'
</code></pre>

<p>which returns the following debugging:</p>

<pre><code>debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to 123.45.67.8 [123.45.67.8] port 12345.
debug1: Connection established.
debug1: identity file /Users/myname/.ssh/id_rsa type 1
debug1: identity file /Users/myname/.ssh/id_rsa-cert type -1
debug1: identity file /Users/myname/.ssh/id_dsa type -1
debug1: identity file /Users/myname/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.9p1 Debian-5ubuntu1.4
debug1: match: OpenSSH_5.9p1 Debian-5ubuntu1.4 pat OpenSSH_5*
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Server host key: RSA [some server host key]
debug1: Host '[123.45.67.8]:12345' is known and matches the RSA host key.
debug1: Found key in /Users/myname/.ssh/known_hosts:6
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/myname/.ssh/github_rsa
debug1: Authentications that can continue: publickey
debug1: Offering RSA public key: /Users/myname/.ssh/id_rsa
debug1: Authentications that can continue: publickey
debug1: Trying private key: /Users/myname/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>I can't figure out what the problem is..
can anybody please help me out?</p>
","<p>Your command will only work if you can ssh to the server by entering a password. It also requires the dir ~/.ssh to be created on the remote server and lastly (as Jan-Erik Revsbech points out) the permissions on the local and the remote ~/.ssh needs to disallow others reading it.</p>

<p>If you instead use <code>ssh-copy-id remote-server</code> to copy your keys, then both the dir and permissions on the remote system will be set correctly. It will still require you to enter the password the first time, though.</p>
","1649","<ssh><public-key>","2","4","3","2019-04-04 12:05:14","26624663","0","2","","","","2014-10-29 07:10:36",""
"26624562","adding ssh public key to server","<p>I'm trying to push my id_rsa.pub to server so I can ssh into it.</p>

<p>I've run the following command,</p>

<pre><code>cat ~/.ssh/id_rsa.pub | ssh -v -p 12345 myname@123.45.67.8 'cat &gt;&gt; ~/.ssh/authorized_keys'
</code></pre>

<p>which returns the following debugging:</p>

<pre><code>debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: Connecting to 123.45.67.8 [123.45.67.8] port 12345.
debug1: Connection established.
debug1: identity file /Users/myname/.ssh/id_rsa type 1
debug1: identity file /Users/myname/.ssh/id_rsa-cert type -1
debug1: identity file /Users/myname/.ssh/id_dsa type -1
debug1: identity file /Users/myname/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.9p1 Debian-5ubuntu1.4
debug1: match: OpenSSH_5.9p1 Debian-5ubuntu1.4 pat OpenSSH_5*
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Server host key: RSA [some server host key]
debug1: Host '[123.45.67.8]:12345' is known and matches the RSA host key.
debug1: Found key in /Users/myname/.ssh/known_hosts:6
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/myname/.ssh/github_rsa
debug1: Authentications that can continue: publickey
debug1: Offering RSA public key: /Users/myname/.ssh/id_rsa
debug1: Authentications that can continue: publickey
debug1: Trying private key: /Users/myname/.ssh/id_dsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>I can't figure out what the problem is..
can anybody please help me out?</p>
","<p><strong>Make sure to also set the correct owner :)</strong></p>

<p>I tried <code>ssh-copy-id remote-server</code> as suggested by Ole and got an error like this:</p>

<p><em>Cannot write to .ssh/authorized_keys. Permission denied</em></p>

<p>The directory <code>~/.ssh</code> as well as the file <code>authorized_keys</code> were already present on the server and set up with the right permission... but for the wrong user! Here is, what solved it:</p>

<pre><code>chown right-user:right-user .ssh
chown right-user:right-user .ssh/authorized_keys
</code></pre>

<p>I changed the owner of the file and the directory. Then <code>ssh-copy-id</code>  worked. </p>
","1649","<ssh><public-key>","2","0","3","2019-04-04 12:05:14","26624663","0","2","","","","2014-10-29 07:10:36",""
"8055797","Permission Denied Github (push)","<p>Im trying to make github work on my mac snow leopard (10.6)
I'm getting ""Permission denied (publickey)."" when pushing (git push -u origin master).
I've tried everything available on-line and nothing seems to solve my problem.</p>

<p>Could someone help me?</p>

<pre><code>OpenSSH_5.2p1, OpenSSL 0.9.8r 8 Feb 2011
debug1: Reading configuration data /Users/Filipe/.ssh/config
debug1: Applying options for github.com
debug1: Reading configuration data /etc/ssh_config
debug1: Connecting to github.com [207.97.227.239] port 22.
debug1: Connection established.
debug1: identity file id_rsa.pub type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.1p1 Debian-5github2
debug1: match: OpenSSH_5.1p1 Debian-5github2 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.2
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'github.com' is known and matches the RSA host key.
debug1: Found key in /Users/Filipe/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering public key: /Users/Filipe/.ssh/id_rsa
debug1: Authentications that can continue: publickey
debug1: Offering public key: /Users/Filipe/.ssh/id_rsa
debug1: Authentications that can continue: publickey
debug1: Offering public key: /Users/Filipe/.ssh/id_dsa
debug1: Authentications that can continue: publickey
debug1: Offering public key: /Users/Filipe/.ssh/id_dsa
debug1: Authentications that can continue: publickey
debug1: Offering public key: /Users/Filipe/.ssh/id_rsa
debug1: Remote: Forced command: gerve filipeximenes
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Server accepts key: pkalg ssh-rsa blen 277
debug1: Remote: Forced command: gerve filipeximenes
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: Pty allocation disabled.
debug1: Authentication succeeded (publickey).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
Hi filipeximenes! You've successfully authenticated, but GitHub does not provide shell access.
debug1: client_input_channel_req: channel 0 rtype exit-status reply 0
debug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0
debug1: channel 0: free: client-session, nchannels 1
Transferred: sent 3904, received 3016 bytes, in 0.4 seconds
Bytes per second: sent 9975.5, received 7706.5
debug1: Exit status 1
</code></pre>
","<p>Your github repos should look something similar to</p>

<pre><code>origin  git@github.com:filipeximenes/a.git (fetch)
origin  git@github.com:filipeximenes/a.git (push)
</code></pre>

<p>This is easily acquired in the main page of your github repo if you click on ssh.</p>
","1644","<git><ssh><github><push><public-key>","1","1","1","2011-11-08 20:09:48","8056477","2","","","","","2011-11-08 19:12:01",""
"25211749","RSA Encryption using public key in Android for a PHP server","<p>I am trying to encrypt a string using the RSA public key encryption. I have a public key which  is:</p>

<blockquote>
  <p>-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7yyFgPV6Fk8JWngl3MIz\n1U2DMwKPNCRkeQ79g/qwKL0LP5aVkQUUxqYhX0mmQMWnT5t+7Hoc6UUxyjGSkI9o\nv0Q3oTSVtByIQDdySXZWihzjVjn3h98chevZuNNkJ4GNADHj5K/7LOWLpKSQJ2Hj\nIFdVrcKSjy4kiP/UMHgsfq0GWQAtGv8ebcybWuEf8rzTMndxmI96Nmz5PgPK7K75\nXbMgJlOMoMlXDsgmghpGzH8p10r/qHGlYi/COa4PZ7Pvbveg1BoH5LPy/8mLZ+Oa\n9owl10yBIoh9/H5KnijZ0Uq8MH0QdgQXekLC9sRh3uGTe69IQrGXzSv7tHe5fgv6\nnwIDAQAB\n-----END
  PUBLIC KEY-----</p>
</blockquote>

<p>I am using following code to encrypt it :</p>

<pre><code>private String generateRSAEncryptedText(String publicKey) {
        String baseCredentials = email + ""---"" + password;
        try {
            return encryptRSA(context, baseCredentials, publicKey);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private String getPublicKeyStringFromPemFormat(String PEMString, boolean isFilePath) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {

        BufferedReader pemReader = null;
        if (isFilePath) {
            pemReader = new BufferedReader(new InputStreamReader(new FileInputStream(PEMString)));
        } else {
            pemReader = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(PEMString.getBytes(""UTF-8""))));
        }
        StringBuffer content = new StringBuffer();
        String line = null;
        while ((line = pemReader.readLine()) != null) {
            if (line.indexOf(""-----BEGIN PUBLIC KEY-----"") != -1) {
                while ((line = pemReader.readLine()) != null) {
                    if (line.indexOf(""-----END PUBLIC KEY"") != -1) {
                        break;
                    }
                    content.append(line.trim());
                }
                break;
            }
        }
        if (line == null) {
            throw new IOException(""PUBLIC KEY"" + "" not found"");
        }
        Log.i(""PUBLIC KEY: "", ""PEM content = : "" + content.toString());
        return content.toString();
    }

    public String encryptRSA(Context mContext, String message, String publicKeyString) throws Exception {

        String keyString = getPublicKeyStringFromPemFormat(publicKeyString, false);

        // converts the String to a PublicKey instance
        byte[] keyBytes = Base64.decode(keyString.getBytes(""utf-8""), Base64.NO_WRAP);
        X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
        PublicKey key = keyFactory.generatePublic(spec);

        // decrypts the message
        byte[] dectyptedText = null;
        Cipher cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        dectyptedText = cipher.doFinal(Base64.decode(message.getBytes(""utf-8""), Base64.NO_WRAP));
        return Base64.encodeToString(dectyptedText, Base64.NO_WRAP);
    }
</code></pre>

<p>Using this, i am able to generate an encrypted text but the PHP server is not able to decrypt my encrypted text.</p>

<p>Server is working correctly as i am able to the whole exercise using a python script but it is not working for android.</p>

<p>Any idea what i might be doing wrong.. all help is appreciated.</p>

<p>Some other pointer:</p>

<ol>
<li>I get the public key as a string from the server and it can be changed at any time so cant save it in a cert file.</li>
<li>I am using android.util.Base64 class for encoding.</li>
</ol>

<p>Let me know if you need any other information.</p>

<p><strong>Working Python Code:</strong></p>

<pre><code>import requests
import base64

def try_api():
    API_ENDPOINT = 'https://example.com/login.php'
    PUBLIC_KEY = None

    ###get_pulic_key###  
    payload = {'requestType':'getPubkey'}
    r = requests.post(API_ENDPOINT, data=payload, verify=False) 
    mycookies = dict (r.cookies)
    #print mycookies

    res = r.json()
    PUBLIC_KEY = res[1]

    print ""PublicKey\n"", PUBLIC_KEY

    ###get_token###
    credential = prepare_credentials('abc@gmail.com', 'abctest', PUBLIC_KEY)
    print ""Credential\n"", credential

    cred_payload = {'requestType':'credentialLogin', 'credential':credential}
    r = requests.post(API_ENDPOINT, data=cred_payload, cookies=mycookies, verify=False)
    #print r.text
    status, token =r.json()




def prepare_credentials(username, password, public_key):
    """"""
    Given username and password prepare the credentials
    """"""


    basecred = ""%s---%s"" % (username, password)
    #print ""basecred\n"", basecred
    basecred64 = base64.b64encode(basecred)
    #print ""basecred64\n"", basecred64
    basecred64encrypted64 = encrypt_RSA(public_key, basecred64)
    #print ""basecred64encrypted64\n"", basecred64encrypted64
    return basecred64encrypted64


def encrypt_RSA(public_key, message):
    from Crypto.PublicKey import RSA
    from Crypto.Cipher import PKCS1_v1_5
    rsakey = RSA.importKey(public_key)
    rsakey = PKCS1_v1_5.new(rsakey)
    encrypted = rsakey.encrypt(message)
    return base64.b64encode(encrypted)

if __name__=='__main__':
    try_api()
</code></pre>
","","1642","<java><android><encryption><rsa><public-key>","0","","0","2015-04-22 07:35:22","","6","5","152867","","2014-08-10 18:04:03","2014-08-08 20:28:12",""
"14999918","Cannot push to heroku","<p>I have Windows 7 Home Premium with installed:</p>

<pre><code>gem 1.8.24
ruby 1.9.3p385
node 0.8.19
git 1.8.1.msysgit.
heroku/toolbelt/2.35.0 (i386-mingw32) ruby/1.9.3
</code></pre>

<p>I can succefully login to heroku with: <code>heroku login</code>. Even when I clear keys: <code>heroku keys:clear</code> and generate new one <code>heroku keys:add</code> I have result success!</p>

<p>When I login to heroku webpage-> my account I have correctly added key. I'm added to project as collaborator. </p>

<pre><code>git remote add heroku-s git@heroku.com:secret-project.git
</code></pre>

<p>Problem is, when I try to push files to heroku with:</p>

<pre><code>git push heroku-s master
</code></pre>

<p>I get error:</p>

<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>Any suggestions?</p>
","<p>Try to re-generate the public key (<code>id_pub.rsa</code>), then add it again to heroku.</p>

<pre><code>ssh-keygen -t rsa -C ""your_email@youremail.com""
heroku keys:clear
heroku keys:add
</code></pre>
","1641","<heroku><key><public-key>","3","7","2","2017-04-21 03:40:37","15000080","0","2","120615","","2014-01-13 10:22:45","2013-02-21 10:28:28",""
"14999918","Cannot push to heroku","<p>I have Windows 7 Home Premium with installed:</p>

<pre><code>gem 1.8.24
ruby 1.9.3p385
node 0.8.19
git 1.8.1.msysgit.
heroku/toolbelt/2.35.0 (i386-mingw32) ruby/1.9.3
</code></pre>

<p>I can succefully login to heroku with: <code>heroku login</code>. Even when I clear keys: <code>heroku keys:clear</code> and generate new one <code>heroku keys:add</code> I have result success!</p>

<p>When I login to heroku webpage-> my account I have correctly added key. I'm added to project as collaborator. </p>

<pre><code>git remote add heroku-s git@heroku.com:secret-project.git
</code></pre>

<p>Problem is, when I try to push files to heroku with:</p>

<pre><code>git push heroku-s master
</code></pre>

<p>I get error:</p>

<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>Any suggestions?</p>
","<p>For me, the problem was that the key was being generated on my HOMEDRIVE (in my work this is F:/.ssh) but Heroku was looking in C:/Users/MYNAME/.ssh.  Copying the id_rsa files from F:/.ssh to C:/Users/MYNAME/.ssh fixed the problem.</p>

<p>I then ran</p>

<pre><code>heroku.keys:add
</code></pre>

<p>afterwhich I was able to do </p>

<pre><code>git push heroku master
</code></pre>
","1641","<heroku><key><public-key>","3","0","2","2017-04-21 03:40:37","15000080","0","2","120615","","2014-01-13 10:22:45","2013-02-21 10:28:28",""
"29825492","How to generate public and private keys usable for both C and Java?","<p>I am trying to generate PKCS12 public and private keys with OpenSSL on Windows 7 64-bit that can be used by both the Microsoft CryptoAPI in C as well as Java programs.</p>

<p>Here are the steps I have followed:</p>

<p>Downloaded installed Microsoft Visual C++ 2008 Redistributable Package (x64) de:
<a href=""http://www.microsoft.com/en-us/download/details.aspx?id=15336"" rel=""nofollow"">http://www.microsoft.com/en-us/download/details.aspx?id=15336</a></p>

<p>Downloaded installed ""Win64 OpenSSL v1.0.2a Light"" de:
<a href=""http://slproweb.com/products/Win32OpenSSL.html"" rel=""nofollow"">http://slproweb.com/products/Win32OpenSSL.html</a></p>

<p>To encrypt/decrypt files of arbitrary size using asymmetric (public) key cryptography you need to use S/MIME encoding:</p>

<p>1) generate the key pair. This makes a 2048 bit public encryption key/certificate rsakpubcert.key and a matching private decryption key rsakpriv.key. The -days 10000 means keep it valid for a long time (27 years or so). You will be asked (twice) for a PEM passphrase to encrypt the private key. If you do not wish to encrypt it, pass the -nodes option. The public key can be distributed to anyone who wants to send you data. </p>

<pre><code>md C:\OpenSSL-Win64\bin    
cd C:\OpenSSL-Win64\bin    
set OPENSSL_CONF=C:\OpenSSL-Win64\bin\openssl.cfg    
openssl req -x509 -days 10000 -newkey rsa:2048 -keyout c:\opensslkeys\rsakpriv.key -out c:\opensslkeys\rsakpubcert.key

// pass phrase used: mypassword
</code></pre>

<p>2) Create request for self-signed certificate </p>

<pre><code>openssl req -new -key c:\opensslkeys\rsakpriv.key -out c:\opensslkeys\server.csr
</code></pre>

<p>3) Remove password from the private key </p>

<pre><code>openssl rsa -in c:\opensslkeys\rsakpriv.key -out c:\opensslkeys\rsakprivnopassword.key
</code></pre>

<p>4) Self-sign the certificate request (-days is expiration in days)<br>
Important: start the command prompt with ""Run As Administrator"". Otherwise you get the same: unable to write 'random state' error.</p>

<pre><code>cd C:\OpenSSL-Win64\bin    
set OPENSSL_CONF=C:\OpenSSL-Win64\bin\openssl.cfg    
openssl x509 -req -days 365 -in c:\opensslkeys\server.csr -signkey c:\opensslkeys\rsakprivnopassword.key -out c:\opensslkeys\server.crt
</code></pre>

<p>5) Convert output to PKCS#12 format which we can use in code (-keysig parameter allows us to use key-pair for signing) </p>

<pre><code>openssl pkcs12 -export -in c:\opensslkeys\server.crt -inkey c:\opensslkeys\rsakprivnopassword.key -out c:\opensslkeys\mypublicencryptionkey.p12    
// export password used: mypassword
</code></pre>

<p>At this point I can encrypt and decrypt files with openssl with these commands:</p>

<p>To encrypt:</p>

<pre><code>openssl smime -encrypt -binary -aes-256-cbc -in c:\opensslkeys\todo.txt -out c:\opensslkeys\done.txt -outform DER c:\opensslkeys\server.crt
</code></pre>

<p>To decrypt:</p>

<pre><code>openssl smime -decrypt -binary -in c:\opensslkeys\done.txt -inform DER -out c:\opensslkeys\redone.txt -inkey c:\opensslkeys\rsakprivnopassword.key
</code></pre>

<p>However when I try to use the keys in Java the program chokes, saying the key format is wrong. </p>

<p>Any help greatly appreciated! I promise to post the com,plete working answer for others.</p>

<hr>

<p>Complete Java code:</p>

<pre><code>/*
PrivatePublicKey.java   
*/
import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.Certificate;
import javax.crypto.Cipher;
/* for IBM JDK need to replace: */
//import java.util.Base64;
/* with: */
import org.apache.commons.codec.binary.Base64;

public class PrivatePublicKey 
{
    public static void main(String[] args) throws Exception 
    {
        try 
        {
            PublicKeyReader myPublic = new PublicKeyReader();
            PublicKey publicKey = myPublic.get(""./rsakpubcert.key"");

            PrivateKeyReader myPrivate = new PrivateKeyReader();
            PrivateKey privateKey = myPrivate.get(""./rsakprivnopassword.key"");

            // Let's encrypt with private and decrypt with public
            // Encrypt with private key
            String firstString = ""Ishana"";

            Cipher privateEncryptCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
            privateEncryptCipher.init(Cipher.ENCRYPT_MODE, privateKey);

            byte[] encryptedFirstString = privateEncryptCipher.doFinal(firstString.getBytes());
            String encodedEncryptedFirstString = Base64.encodeBase64String(encryptedFirstString);

            System.out.println(""Encoded encrypted String for Ishana: "" + encodedEncryptedFirstString);

            // Decrypt with public key
            // First decode the string
            byte[] decodedEncryptedFirstString = Base64.decodeBase64(encodedEncryptedFirstString);

            Cipher publicDecryptCipher = Cipher
                .getInstance(""RSA/ECB/PKCS1Padding"");
            publicDecryptCipher.init(Cipher.DECRYPT_MODE, publicKey);
            byte[] decryptedFirstStringByte =     publicDecryptCipher.doFinal(decodedEncryptedFirstString);
            System.out.println(""Decrypted String for Ishana: "" + new String(decryptedFirstStringByte));
        }
        catch (Exception e) 
        {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>Edit, added helper code:</p>

<pre><code>import java.io.*;
import java.security.*;
import java.security.spec.*;


public class PublicKeyReader {

  public static PublicKey get(String filename)
throws Exception {

    File f = new File(filename);
    FileInputStream fis = new FileInputStream(f);
    DataInputStream dis = new DataInputStream(fis);
    byte[] keyBytes = new byte[(int)f.length()];
    dis.readFully(keyBytes);
    dis.close();

    X509EncodedKeySpec spec =
      new X509EncodedKeySpec(keyBytes);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    return kf.generatePublic(spec);
  }
}
</code></pre>

<p>and</p>

<pre><code>import java.io.*;
import java.security.*;
import java.security.spec.*;

public class PrivateKeyReader {

  public static PrivateKey get(String filename)
  throws Exception {

    File f = new File(filename);
    FileInputStream fis = new FileInputStream(f);
    DataInputStream dis = new DataInputStream(fis);
    byte[] keyBytes = new byte[(int)f.length()];
    dis.readFully(keyBytes);
    dis.close();

    PKCS8EncodedKeySpec spec =
      new PKCS8EncodedKeySpec(keyBytes);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    return kf.generatePrivate(spec);
  }
}
</code></pre>
","<blockquote>
  <p>How to generate public and private keys usable for both C and Java?</p>
</blockquote>

<p>Generating the key pairs and representing them in memory is different than consuming them in Java or another framework/library, like OpenSSL.</p>

<p>Representing keys in memory is framework/library specific.</p>

<p>Encoding the keys so different frameworks/libraries can consume them is the trick.</p>

<hr>

<blockquote>
  <p>However when I try to use the keys in Java the program chokes, saying the key format is wrong. </p>
</blockquote>

<p>In Java, its usually enough to call <code>getBytes()</code> on the key. The key will be provided in a natural representation. For example calling it on a RSA public key will result in an ASN.1 encoding from PKCS 1.</p>

<p>Other formats you can consider for interoperability are PKCS8 for private keys and PKCS12.</p>

<p>There's also PEM, but its an older format. PEM is OK for public keys, but you should use PKCS8 or PKCS12 for private keys.</p>

<hr>

<p>The private you generated with OpenSSL is probably in encrypted PEM format (you should state the encoding you are using for them). See <a href=""https://www.google.com/search?q=java+read+pem+encoded+key"" rel=""nofollow noreferrer"">java read pem encoded key</a> and <a href=""https://stackoverflow.com/q/2654949"">How to read a password encrypted key with java?</a>. If its DER encoded, then see <a href=""https://www.google.com/search?q=java+read+der+encoded+key"" rel=""nofollow noreferrer"">java read der encoded key</a></p>
","1627","<java><openssl><public-key><public-key-encryption>","1","1","2","2016-09-12 20:29:29","39458338","3","3","3597426","","2015-04-24 10:27:49","2015-04-23 12:37:46",""
"29825492","How to generate public and private keys usable for both C and Java?","<p>I am trying to generate PKCS12 public and private keys with OpenSSL on Windows 7 64-bit that can be used by both the Microsoft CryptoAPI in C as well as Java programs.</p>

<p>Here are the steps I have followed:</p>

<p>Downloaded installed Microsoft Visual C++ 2008 Redistributable Package (x64) de:
<a href=""http://www.microsoft.com/en-us/download/details.aspx?id=15336"" rel=""nofollow"">http://www.microsoft.com/en-us/download/details.aspx?id=15336</a></p>

<p>Downloaded installed ""Win64 OpenSSL v1.0.2a Light"" de:
<a href=""http://slproweb.com/products/Win32OpenSSL.html"" rel=""nofollow"">http://slproweb.com/products/Win32OpenSSL.html</a></p>

<p>To encrypt/decrypt files of arbitrary size using asymmetric (public) key cryptography you need to use S/MIME encoding:</p>

<p>1) generate the key pair. This makes a 2048 bit public encryption key/certificate rsakpubcert.key and a matching private decryption key rsakpriv.key. The -days 10000 means keep it valid for a long time (27 years or so). You will be asked (twice) for a PEM passphrase to encrypt the private key. If you do not wish to encrypt it, pass the -nodes option. The public key can be distributed to anyone who wants to send you data. </p>

<pre><code>md C:\OpenSSL-Win64\bin    
cd C:\OpenSSL-Win64\bin    
set OPENSSL_CONF=C:\OpenSSL-Win64\bin\openssl.cfg    
openssl req -x509 -days 10000 -newkey rsa:2048 -keyout c:\opensslkeys\rsakpriv.key -out c:\opensslkeys\rsakpubcert.key

// pass phrase used: mypassword
</code></pre>

<p>2) Create request for self-signed certificate </p>

<pre><code>openssl req -new -key c:\opensslkeys\rsakpriv.key -out c:\opensslkeys\server.csr
</code></pre>

<p>3) Remove password from the private key </p>

<pre><code>openssl rsa -in c:\opensslkeys\rsakpriv.key -out c:\opensslkeys\rsakprivnopassword.key
</code></pre>

<p>4) Self-sign the certificate request (-days is expiration in days)<br>
Important: start the command prompt with ""Run As Administrator"". Otherwise you get the same: unable to write 'random state' error.</p>

<pre><code>cd C:\OpenSSL-Win64\bin    
set OPENSSL_CONF=C:\OpenSSL-Win64\bin\openssl.cfg    
openssl x509 -req -days 365 -in c:\opensslkeys\server.csr -signkey c:\opensslkeys\rsakprivnopassword.key -out c:\opensslkeys\server.crt
</code></pre>

<p>5) Convert output to PKCS#12 format which we can use in code (-keysig parameter allows us to use key-pair for signing) </p>

<pre><code>openssl pkcs12 -export -in c:\opensslkeys\server.crt -inkey c:\opensslkeys\rsakprivnopassword.key -out c:\opensslkeys\mypublicencryptionkey.p12    
// export password used: mypassword
</code></pre>

<p>At this point I can encrypt and decrypt files with openssl with these commands:</p>

<p>To encrypt:</p>

<pre><code>openssl smime -encrypt -binary -aes-256-cbc -in c:\opensslkeys\todo.txt -out c:\opensslkeys\done.txt -outform DER c:\opensslkeys\server.crt
</code></pre>

<p>To decrypt:</p>

<pre><code>openssl smime -decrypt -binary -in c:\opensslkeys\done.txt -inform DER -out c:\opensslkeys\redone.txt -inkey c:\opensslkeys\rsakprivnopassword.key
</code></pre>

<p>However when I try to use the keys in Java the program chokes, saying the key format is wrong. </p>

<p>Any help greatly appreciated! I promise to post the com,plete working answer for others.</p>

<hr>

<p>Complete Java code:</p>

<pre><code>/*
PrivatePublicKey.java   
*/
import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.Certificate;
import javax.crypto.Cipher;
/* for IBM JDK need to replace: */
//import java.util.Base64;
/* with: */
import org.apache.commons.codec.binary.Base64;

public class PrivatePublicKey 
{
    public static void main(String[] args) throws Exception 
    {
        try 
        {
            PublicKeyReader myPublic = new PublicKeyReader();
            PublicKey publicKey = myPublic.get(""./rsakpubcert.key"");

            PrivateKeyReader myPrivate = new PrivateKeyReader();
            PrivateKey privateKey = myPrivate.get(""./rsakprivnopassword.key"");

            // Let's encrypt with private and decrypt with public
            // Encrypt with private key
            String firstString = ""Ishana"";

            Cipher privateEncryptCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
            privateEncryptCipher.init(Cipher.ENCRYPT_MODE, privateKey);

            byte[] encryptedFirstString = privateEncryptCipher.doFinal(firstString.getBytes());
            String encodedEncryptedFirstString = Base64.encodeBase64String(encryptedFirstString);

            System.out.println(""Encoded encrypted String for Ishana: "" + encodedEncryptedFirstString);

            // Decrypt with public key
            // First decode the string
            byte[] decodedEncryptedFirstString = Base64.decodeBase64(encodedEncryptedFirstString);

            Cipher publicDecryptCipher = Cipher
                .getInstance(""RSA/ECB/PKCS1Padding"");
            publicDecryptCipher.init(Cipher.DECRYPT_MODE, publicKey);
            byte[] decryptedFirstStringByte =     publicDecryptCipher.doFinal(decodedEncryptedFirstString);
            System.out.println(""Decrypted String for Ishana: "" + new String(decryptedFirstStringByte));
        }
        catch (Exception e) 
        {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>Edit, added helper code:</p>

<pre><code>import java.io.*;
import java.security.*;
import java.security.spec.*;


public class PublicKeyReader {

  public static PublicKey get(String filename)
throws Exception {

    File f = new File(filename);
    FileInputStream fis = new FileInputStream(f);
    DataInputStream dis = new DataInputStream(fis);
    byte[] keyBytes = new byte[(int)f.length()];
    dis.readFully(keyBytes);
    dis.close();

    X509EncodedKeySpec spec =
      new X509EncodedKeySpec(keyBytes);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    return kf.generatePublic(spec);
  }
}
</code></pre>

<p>and</p>

<pre><code>import java.io.*;
import java.security.*;
import java.security.spec.*;

public class PrivateKeyReader {

  public static PrivateKey get(String filename)
  throws Exception {

    File f = new File(filename);
    FileInputStream fis = new FileInputStream(f);
    DataInputStream dis = new DataInputStream(fis);
    byte[] keyBytes = new byte[(int)f.length()];
    dis.readFully(keyBytes);
    dis.close();

    PKCS8EncodedKeySpec spec =
      new PKCS8EncodedKeySpec(keyBytes);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    return kf.generatePrivate(spec);
  }
}
</code></pre>
","<p>I was finally able to make this work.</p>

<p>The starting point was: <a href=""http://blogs.msdn.com/b/alejacma/archive/2008/01/28/how-to-generate-key-pairs-encrypt-and-decrypt-data-with-cryptoapi.aspx"" rel=""nofollow"">http://blogs.msdn.com/b/alejacma/archive/2008/01/28/how-to-generate-key-pairs-encrypt-and-decrypt-data-with-cryptoapi.aspx</a></p>

<p>Issues encountered</p>

<p>1)  Microsoft public and private keys used by CryptoAPI use a proprietary binary format (generally referred to as PUBLICKEYBLOB and PRIVATEKEYBLOB) that cannot be used by Java. Conversion of keys is required;</p>

<p>2)  The Crypto API encrypts in little-endian binary format while Java reads bytes in big-endian format. Ref: <a href=""http://www.jensign.com/JavaScience/dotnet/RSAEncrypt/"" rel=""nofollow"">http://www.jensign.com/JavaScience/dotnet/RSAEncrypt/</a>  and <a href=""http://en.wikipedia.org/wiki/Endianness"" rel=""nofollow"">http://en.wikipedia.org/wiki/Endianness</a>
Binary conversion is required;</p>

<p>3)  The Microsoft CryptoAPI pads the message when it encrypts it. This means to decrypt in Java, the exact implementation of the RSA algorithm is required which takes into consideration the padding scheme used.</p>

<p>On the Java decrypt side, I used Cipher.getInstance(""RSA/NONE/PKCS1Padding"");</p>

<p>Hope this is helpful to someone.</p>
","1627","<java><openssl><public-key><public-key-encryption>","1","0","2","2016-09-12 20:29:29","39458338","3","3","3597426","","2015-04-24 10:27:49","2015-04-23 12:37:46",""
"42285185","SSH Public Key Authentication with Libssh2 C++","<p>I am working on a project where I am doing port forwarding to MySQL using libssh2 in C++. I've got it working for username/password authentication but I now want do it using public/private key authentication. The documentation for libssh2 is pretty poor so I am having difficult working out what I need to do. </p>

<p>What I am trying to do is have an Android app post data to my C++ app, where C++ will be given the SSH details along with the auth key and it creates the SSH tunnel. C++ is getting the key fine and then I am doing the following to do the public key authentication. </p>

<pre><code>else if (this-&gt;getAuthMethod() == SupportedAuthMethods::AUTH_PUBLICKEY)
    {

        string test = this-&gt;getSSHPrivateKey();

        boost::replace_all(test, ""\n"", """");

        unsigned char * key = (unsigned char *)test.c_str();

        size_t sizeofkey = strlen((char*)key);
        cout &lt;&lt; key &lt;&lt; endl;
        stringstream logstream;
        logstream &lt;&lt; ""Using public key authentication for SSH Host: "" &lt;&lt; this-&gt;getSSHHostnameOrIPAddress();
        this-&gt;bitsLibrary-&gt;writeToLog(logstream.str(), ""SSHTunnelForwarder"", ""authenticateSSHServer"");
        if (chosenAuthMethod &amp; SupportedAuthMethods::AUTH_PUBLICKEY)
        {
            //int result = 0;
            int result = libssh2_userauth_publickey(this-&gt;session, this-&gt;getUsername().c_str(), key, sizeofkey, SSHTunnelForwarder::publicKeyAuthComplete, 0);
            if (result != 0)
            {
                char * error = NULL;
                int len = 0;
                int errbuf = 0;
                libssh2_session_last_error(this-&gt;session, &amp;error, &amp;len, errbuf);
                this-&gt;bitsLibrary-&gt;writeToLog(std::string(error), ""SSHTunnelForwarder"", ""auth"");
                JSONResponseGenerator jsonResponse;
                jsonResponse.generateJSONResponse(API_AUTH_FAILURE, ""InvalidPublicKey"");
                return jsonResponse.getJSONString();

            }
        }
    }
</code></pre>

<p>I read somewhere that it shouldn't have new lines, that's why I'm replacing the \n for blank characters but with or without this it doesn't make a difference. </p>

<p>The very basic documentation mentions that one of the arguments for <code>libssh2_userauth_publickey</code> is a callback as follows:</p>

<p><code>int name(LIBSSH2_SESSION *session, unsigned char **sig, size_t *sig_len, const unsigned char *data, size_t data_len, void **abstract);</code></p>

<p>but I cannot find any information anywhere as to what this callback is or what it should contain. In my function call to libssh2_userauth_publickey I pass in <code>SSHTunnelForwarder::publicKeyAuthComplete</code> and currently this function just has the following:</p>

<pre><code>int SSHTunnelForwarder::publicKeyAuthComplete(LIBSSH2_SESSION *session, unsigned char **sig, size_t *sig_len,
    const unsigned char *data, size_t data_len, void **abstract)
{
    cout &lt;&lt; ""In SSH Auth Callback"" &lt;&lt; endl;
    return 0;
}
</code></pre>

<p>This method above doesn't get called, although I'm expecting that this isn't even close to being correct. </p>

<p>When I run my code above the result of libssh2_userauth_publickey is 19 and the error that is returned from the <code>get_last_message()</code> method is <code>invalid public key</code>. I know the public key file is fine as I can use it in an SSH app on Android and can successfully authenticate with my server. </p>

<p><strong>UPDATE 1</strong></p>

<p>I've managed to make some progress, I found there is a function called:</p>

<pre><code>libssh2_userauth_publickey_frommemory(LIBSSH2_SESSION *session, const char *username, size_t username_len, const char *publickeyfiledata, size_t publickeyfiledata_len, const char *privatekeyfiledata, size_t privatekeyfiledata_len, const char *passphrase);
</code></pre>

<p>The libssh2 version that I had was from NuGet Package manager and found that the latest version in this is actually quite old, so I've build the latest 1.7.0 version from GitHub inside Visual Studio and relinked my project to this new version. </p>

<p>I have now replaced the original publickey auth function I was using with this version so my code now looks like this instead:</p>

<pre><code>int result = libssh2_userauth_publickey_frommemory(this-&gt;session, username.c_str(), username.length(), nullptr, 0, test.c_str(), sizeofkey, nullptr);
</code></pre>

<p>This function confuses me a little that it wants the public key and the private key, for everything I know about SSH (admittedly not a huge amount) the public key stays on the server, and the user wanting to login only has access to the private key. </p>

<p>I found that someone else was asking this and a patch was done to allow a null pointer for the public key, so I have passed nullptr for the public key and 0 for the public key length. I've also put a nullptr for the certificate passphrase as this hasn't been set. </p>

<p>When I run this code now I now get the error -18 which is <code>invalid username/public key combination</code>. Again though, I know the username and private key file I am using is correct as I can use it in an SSH client application on Android to connect to my SSH server. </p>
","<p>I've found the solution. What I did in update 1 was the actual fix but my server key got changed for some reason not sure why, so when it said that it couldn't link the username with the key it was correct. </p>

<p>The complete fix is as follows:</p>

<p>Don't use the libssh2 from NuGet its very old. I downloaded the latest source from GitHub at <a href=""https://github.com/libssh2/libssh2/releases"" rel=""noreferrer"">https://github.com/libssh2/libssh2/releases</a> and then completed the follwing steps to build libssh2 within Visual Studio. </p>

<ul>
<li>Shove all the .c files in libssh2/src into an empty Win32 C++ (DLL 
or Static Library) project except libgcrypt.c/openssl.c of which you 
only pick the one appropriate to your crypto library. </li>
<li>Add your OpenSSL or libgcrypt include directory to the project include path </li>
<li>Add libssh2/include to the project include path </li>
<li>Add libssh2/win32 to the project include path </li>
<li>Add the appropriate crypto libraries to the project Additonal Libraries list </li>
<li>Build </li>
<li>Job done </li>
</ul>

<p>Steps above taken from <a href=""https://www.libssh2.org/mail/libssh2-devel-archive-2012-09/0029.shtml"" rel=""noreferrer"">https://www.libssh2.org/mail/libssh2-devel-archive-2012-09/0029.shtml</a></p>

<p>The libssh2 was linked to openssl during compilation. </p>

<p>Link your project to the latest build you've just done for libssh2 and use the method </p>

<pre><code>libssh2_userauth_publickey_frommemory(LIBSSH2_SESSION *session, const char *username, size_t username_len, const char *publickeyfiledata, size_t publickeyfiledata_len, const char *privatekeyfiledata, size_t privatekeyfiledata_len, const char *passphrase);
</code></pre>

<p>And that's it. </p>
","1613","<c++><ssh><private-key><public-key><libssh2>","17","6","1","2018-05-01 21:17:17","42333686","0","1","472495","","2018-05-01 21:17:17","2017-02-16 21:39:59",""
"14059579","Reading public Key from an X509 structure in Javascript","<p>Hello I have an encoded public key with a X509 structure and I want to extract modulus and the public exponent from it I'm using the following ASN.1 Decoder <a href=""http://lapo.it/asn1js/"" rel=""nofollow"">http://lapo.it/asn1js/</a>to read the key but I can't see the modulus or the public exponent in the result I get.</p>

<p>This is the key I want to read.</p>

<pre><code>30819e300d06092a864886f70d010101050003818c00308188028180599a96c54ef07f5288a061a56386376fd9e2e0a253cb035f2b0c65c85c99153a848a8247d9e28d8be1dbad5e754e8393e591cc53e5abec2f0a44b4844646cc283123fdd799c50dd5acd1277fd9afeb9c5a12a53b9edfff0ac53d6e94e5f1678c3bd0ccd8d08b18d4a42f845b79b8b19203e24e189801ca396f5732bfe628edeb0203010001
</code></pre>

<p>This is the result I get from the decoder.</p>

<pre><code>SEQUENCE(2 elem)
SEQUENCE(2 elem)
OBJECT IDENTIFIER1.2.840.113549.1.1.1
NULL
BIT STRING(1 elem)
SEQUENCE(2 elem)
INTEGER(1023 bit)
INTEGER65537
</code></pre>

<p>Thanks in advance.</p>

<pre><code>//Example of what I am expecting to find.
    30 819f // SEQUENCE
      30 0d // SEQUENCE
        06 09 2a864886f70d010101 // OBJECT IDENTIFIER of RSA
        05 00 // NULL (parameter)
      03 818d // BIT STRING
        00 // using all following bits
        30 8189 // SEQUENCE
          02 8181 // (signed) INTEGER
            00 // padding (signed INTEGER) followed by the modulus
            95e15f182ec7b6e84786c0ee54e3bb72af0461e6fd859a3625f38dcd3fdec80d
            fcc51a44756ec7cd6c14b430d55670460c5143efadd1ade7380e890e9957d6e6
            b38f35412862cc955e04d1928f21c0d2f7bc48c3855276f0e7c1b45a558e3a01
            3b969cbfaebca42b748e64bff787f86ec5f0adcd94428c4ab8ca6d2b710d785b
          02 03 // (signed) INTEGER
            010001 // public exponent (4th number of Fermat)
</code></pre>
","<p>Assuming you're using asn1js like this,</p>

<pre><code>var hex = Hex.decode(""30819e300d06...""); // key truncated for this example

// decode key
var mykey = ASN1.decode(hex);
</code></pre>

<p>You first need to find where the modulus bytes start as well as modulus length </p>

<pre><code>var modStart = mykey.sub[1].sub[0].sub[0].posContent();
var modLen = mykey.sub[1].sub[0].sub[0].length;
</code></pre>

<p>Now loop over the stream and populate a <code>modbytes</code> array</p>

<pre><code>// read modulus bytes
var modbytes = [];

for(var x = 0; x &lt; modLen; x++) {
    modbytes.push(mykey.stream.enc[x+modStart]);
}

// modbytes now contains array like [89, 154, 150, 197, 78...]
</code></pre>

<p>Since the exponent is an integer, it can be easily read like this</p>

<pre><code>var exponent = mykey.sub[1].sub[0].sub[1].content();
// returns 65537
</code></pre>

<p>You can convert the values to a hex like so,</p>

<pre><code>// in the case of the exponent its simple
exponent.toString(16); // returns ""10001""
</code></pre>

<p>As for the modulus you need to iterate over the modulus bytes and concatenate their hex values</p>

<pre><code>var modulusHex = """";
for(var x = 0; x &lt; modbytes.length; x++) {
    var hexByte = modbytes[x].toString(16);

    // might need padding before appending
    modulusHex += (hexByte.length == 1) ? ""0""+hexByte : hexByte;
}

// modulusHex now contains something like
// 599a96c54ef07f5288a061a5... 
</code></pre>
","1612","<javascript><public-key><x509certificate2>","2","2","1","2012-12-28 00:46:06","","0","0","118","","2012-12-28 00:20:18","2012-12-27 18:41:48",""
"51614552","SSH to Google cloud instance will have ""Permission denied (publickey)""","<p>I have come across the  issue as below when I use ssh login google cloud instance</p>

<pre><code>$ ssh -i DD2 root@35.237.32.84
Permission denied (publickey).
</code></pre>

<p>After some testing, I found that the cause of the error is that public key signature is not consistent with the account for google cloud:</p>

<p>For example :</p>

<pre><code>scuio33@chef-server:~$ 
</code></pre>

<p>here you account is scuio33
then your pub file will be :</p>

<pre><code>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDBpNeFZyXXXehjPuGCkEjb/t
laNQt0fztORSCFFQIoKHkQzi7SNhp48kagyOHDNj6mY1LmVZB/sIj2oCa1AFupoFuBYc/XILP
rTX60fIlnBYkHl+6Kq/TX2hzKv scuio33
</code></pre>

<p>scuio33 will be exactly same as your google account, or there will have the issue  ""Permission denied (publickey)"". Only google cloud has this restriction.</p>

<p>This is not a ""question"". But a hint for ssh to google cloud failure. </p>
","<p>Connecting with an SSH key to a Google Cloud Compute Engine instance is not limited to the users of the project the instance belongs to. You can generate an SSH key and as long as it’s added to the instance and the user exists on the OS, you should be able to SSH. You can connect with other usernames. Make sure that:</p>

<ol>
<li><p>You add the public key to the instance via the Google Cloud Console <a href=""https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys#project-wide"" rel=""nofollow noreferrer"">[1]</a></p></li>
<li><p>Your username exists on the OS of your instance</p></li>
<li><p>If you want to SSH as ""root"", change the configuration in your /etc/ssh/sshd_config file.</p></li>
</ol>
","1610","<ssh><google-cloud-platform><public-key>","0","0","1","2018-08-10 11:07:55","","2","1","","","","2018-07-31 13:27:45",""
"9047943","Cheap SSL vs Expensive SSL","<p>I was wondering what is the different between SSL certificate from verisign,
<a href=""http://www.verisign.com/ssl/buy-ssl-certificates/compare-ssl-certificates/index.html"" rel=""noreferrer"">http://www.verisign.com/ssl/buy-ssl-certificates/compare-ssl-certificates/index.html</a></p>

<p>which is expensive , and a certificate from godady which is cheap though,
<a href=""http://www.godaddy.com/ssl/ssl-certificates.aspx"" rel=""noreferrer"">http://www.godaddy.com/ssl/ssl-certificates.aspx</a></p>

<p>is it like more secure or browser compatible ? they both generate a public/private and certificate keys ?</p>

<p>Thanks 
Alaa </p>
","<p>It's all about trust. Verisign is a more highly-regarded authority than GoDaddy, so they command a higher price. Furthermore, Verisign verify the legitimacy of your organisation, whereas GoDaddy are only verifying your ownership of the domain.</p>
","1590","<encryption><ssl><certificate><public-key><private-key>","8","7","1","2012-01-28 19:41:20","9047989","1","","","","","2012-01-28 19:33:17","2012-01-30 00:25:47"
"30529425","Gradle publish to maven repository with scp and private key","<p>I have a gradle project which I want to upload to a private remote maven repository using SCP with a private key. How to do this?</p>
","<p>In your Gradle build file (build.gradle), add the following:</p>

<pre><code>apply plugin: 'java'
apply plugin: 'maven' // you need this plugin for mavenDeployer support

// here you specify how the dependency is going to be retreived
// for example:
// compile group: 'co.domain', name: 'library', version: '0.1'
group = 'co.domain'
rootProject.name = 'library'
version = '0.1'

task deployJar(type: Jar)

configurations {
    deployerJars
}

dependencies {
    deployerJars ""org.apache.maven.wagon:wagon-ssh:2.9""
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: ""scp://&lt;url-of-your-webserver&gt;/&lt;path-to-maven-directory&gt;"") {
            authentication(userName: ""ssh-username"", privateKey: ""&lt;path-to-private-key-file"")
        }
    }
}
</code></pre>

<p>The repository url could look something like this:</p>

<pre><code>scp://domain.co/var/www/maven/
</code></pre>

<p>And the privateKey path could look something like this:</p>

<pre><code>/home/users/username/.ssh/id_rsa
</code></pre>

<p>For more insights on how to publish artifacts in Gradle, look here: <a href=""https://docs.gradle.org/current/userguide/artifact_management.html"" rel=""nofollow"" title=""Publishing artifacts"">Publishing artifacts</a></p>

<p>And then look here for Maven specifics: <a href=""https://docs.gradle.org/current/userguide/maven_plugin.html"" rel=""nofollow"" title=""The Maven Plugin"">The Maven Plugin</a></p>
","1588","<gradle><scp><public-key><maven-publish>","4","4","1","2015-06-04 11:37:18","30640426","1","2","4078669","","2015-06-04 09:45:44","2015-05-29 12:17:27",""
"33272130","Java - How to fix InvalidKeyException: Wrong algorithm type - RSA","<p>I got a Private JKS file and a Password file for it. I saw the internet, wrote a java program which will print out the private key as a string.</p>

<p>Similarly I got a public key file with .cer extension. Similarly I printed out the contents of this file too as a string</p>

<p>My idea is to write a java program which has 2 methods encrypt and decrypt.I wrote all the stuff. But when I try to use my encrypt and decrypt function i am seeing InvalidKeyException: Wrong algorithm type. I printed out the algorithm from the jks file and I see it as RSA. In the public certificate the algorithm is printed as SHA1withRSA</p>

<p>here are my programs</p>

<pre><code>import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;

import org.apache.commons.codec.binary.Base64;

public class ExtractKeys {

    private static String privateKeyalgorithm = """";
    private static String publicKeyAlgorithm = """";

    public static void main(String args[]) throws Exception {

        String publicCertificate = ""C:\\QA\\keys\\sis.cer"";

        String privateKeyStore = ""C:\\QA\\keys\\sis.jks"";
        String privateKeyStorePassword = ""sis"";
        String alias = ""sis"";
        String aliasPassword = ""sis"";

        ExtractKeys myep = new ExtractKeys();

        myep.printPrivateKey(privateKeyStore, privateKeyStorePassword, alias, aliasPassword);
        myep.printPublicKey(publicCertificate);

    }

    public String printPublicKey(String source) throws Exception {
        X509Certificate cert = null;
        InputStream fis = null;
        ByteArrayInputStream bais = null;
        Base64 encoder = new Base64(64);

        fis = new FileInputStream(source);
        byte value[] = new byte[fis.available()];
        fis.read(value);
        bais = new ByteArrayInputStream(value);
        java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance(""X.509"");
        cert = (X509Certificate) cf.generateCertificate(bais);

        String cert_begin = ""-----BEGIN CERTIFICATE-----\n"";
        String end_cert = ""-----END CERTIFICATE-----"";
        publicKeyAlgorithm = cert.getSigAlgName();
        byte[] derCert = cert.getEncoded();
        String pemCertPre = new String(encoder.encode(derCert));
        String pemCert = cert_begin + pemCertPre + end_cert;
        System.out.println(pemCert);
        System.out.println(publicKeyAlgorithm);
        return pemCert;

    }

    public String printPrivateKey(String fileName, String keystorepass, String aliasName, String aliaspass) throws Exception {

        KeyStore ks = KeyStore.getInstance(""JKS"");
        Base64 encoder = new Base64(64);

        char[] keyStorePassPhrase = keystorepass.toCharArray();

        File certificateFile = new File(fileName);

        ks.load(new FileInputStream(certificateFile), keyStorePassPhrase);

        char[] aliasPassPhrase = aliaspass.toCharArray();

        KeyPair kp = getPrivateKey(ks, aliasName, aliasPassPhrase);

        PrivateKey privKey = kp.getPrivate();

        privateKeyalgorithm = privKey.getAlgorithm();

        String b64 = encoder.encodeAsString(privKey.getEncoded());

        System.out.println(""-----BEGIN PRIVATE KEY-----"");

        System.out.println(b64);

        System.out.println(""-----END PRIVATE KEY-----"");

        System.out.println(privateKeyalgorithm);

        return b64;

    }

    private KeyPair getPrivateKey(KeyStore keystore, String alias, char[] password) {

        try {

            // Get private key

            Key key = keystore.getKey(alias, password);

            if (key instanceof PrivateKey) {

                // Get certificate of public key

                Certificate cert = keystore.getCertificate(alias);

                // Get public key

                PublicKey publicKey = cert.getPublicKey();

                // Return a key pair

                return new KeyPair(publicKey, (PrivateKey) key);

            }

        } catch (UnrecoverableKeyException e) {
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();

        } catch (KeyStoreException e) {
            e.printStackTrace();

        }

        return null;

    }

    public String returnPrivateKeyAlgo() {
        return privateKeyalgorithm;
    }

    public String returnPublicKeyAlgo() {
        return publicKeyAlgorithm;
    }
</code></pre>

<p>The outputs are strings of public key, private key, and their alogorithms</p>

<pre><code>-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCZehr60/61+4ao
8Bigkamzt3RJZcY9ggE4YuQ1ALY8pDXARDQ3OqPohySw4y+Ebrk4y/Rwzm21mhaU
jC33BNSNUetRAgBDU+/nT3/gRZdIeJRfFdiDtl/Ms2LYxo41nYTeGJEqoW3fivI2
cUG/tDKSPjaoGwnz/kVNIsZXJEcZCAfdIg1UH0wBeQ5qLR4rsseE0I7vVAfvDsMl
-----END PRIVATE KEY-----
RSA
-----BEGIN CERTIFICATE-----
MIIGiTCCBXGgAwIBAgIKYMbAHgAAAAUgKzANBgkqhkiG9w0BAQUFADB5MRMwEQYK
CZImiZPyLGQBGRYDY29tMRYwFAYKCZImiZPyLGQBGRYGc2Nod2FiMRYwFAYKCZIm
-----END CERTIFICATE-----
SHA1withRSA
</code></pre>

<p>Now I got the public and private keys as string values. along with their algorithms.</p>

<p>Next I wrote another sample program.I got 2 methods in it. encrypt and decrypt which also accepts these keys.</p>

<p>So ideally i would be passing the public key to encrypt method and the private key to decrypt method</p>

<pre><code>import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;

import **.CryptoService;
import **.CryptoServiceException;


public class CryptoServiceImpl implements CryptoService {

public byte[] encrypt(byte[] data, String key) throws Exception {
        try {
            Cipher cipher = Cipher.getInstance(""RSA"");
            Base64 decoder = new Base64(64);

            // decode the base64 encoded string
            byte[] decodedKey = decoder.decode(key);
            // rebuild key using SecretKeySpec
            final SecretKeySpec originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, ""RSA"");

            cipher.init(Cipher.ENCRYPT_MODE, originalKey);
            final String encryptedString = Base64.encodeBase64String(cipher.doFinal(data));
            return encryptedString.getBytes();
        } catch (Exception e) {
            throw new CryptoServiceException(""Cannot encrypt data using key '"", e);
        }

    }

    public byte[] decrypt(byte[] data, String key) throws Exception {
        try {
            Cipher cipher = Cipher.getInstance(""RSA"");
            Base64 decoder = new Base64(64);

            // decode the base64 encoded string
            byte[] decodedKey = decoder.decode(key);
            // rebuild key using SecretKeySpec
            final SecretKeySpec originalKey = new SecretKeySpec(decodedKey, 0, decodedKey.length, ""RSA"");

            cipher.init(Cipher.DECRYPT_MODE, originalKey);
            final String decryptedString = new String(cipher.doFinal(Base64.decodeBase64(new String(data))));
            return decryptedString.getBytes();
        } catch (Exception e) {
            throw new CryptoServiceException(""Cannot decrypt data using key '"", e);

        }
    }
}
</code></pre>

<p>Now I got a Junit which when executed throws this exception</p>

<pre><code>import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

import junit.framework.Assert;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import **.CryptoServiceImpl;

public class TestCryptoService {

    String privateKeyStore = ""C:\\QA\\keys\\sis.jks"";
    String privateKeyStorePassword = ""sistest"";
    String alias = ""sis"";
    String aliasPassword = ""sistest"";
    static ExtractKeys myep = new ExtractKeys();
    CryptoService service = new CryptoServiceImpl();
    String publicCertificate = ""C:\\QA\\keys\\sis.cer"";;

    @BeforeClass
    public static void setUpBeforeClass() throws Exception {
    }

    @AfterClass
    public static void tearDownAfterClass() throws Exception {
    }

    @Before
    public void setUp() throws Exception {

    }

    @After
    public void tearDown() throws Exception {
    }

@Test
    public void testCryptoServiceForAESWithAsymmetricKeys() throws Exception {

        String publicKey = myep.printPublicKey(publicCertificate);

        byte[] encryptedValue = service.encrypt(new String(""abcd"").getBytes(), publicKey);
        System.out.println(new String(encryptedValue));

        String privateKey = myep.printPrivateKey(privateKeyStore, privateKeyStorePassword, alias, aliasPassword);
        byte[] decryptedValue = service.decrypt(encryptedValue, privateKey);

        System.out.println(new String(decryptedValue));
        Assert.assertEquals(""abcd"", new String(decryptedValue));
    }
}
</code></pre>

<p>and Here's the exception</p>

<pre><code>*.CryptoServiceException: Cannot encrypt data using key '
    at *.impl.CryptoServiceImpl.encrypt(CryptoServiceImpl.java:59)
    at *.TestCryptoService.testCryptoServiceForAESWithAsymmetricKeys(TestCryptoService.java:101)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:95)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:56)
    at java.lang.reflect.Method.invoke(Method.java:620)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
    	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
    	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
    	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
    	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
    	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
    	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
    	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
    	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
    	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
    	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
    	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.security.InvalidKeyException: Wrong algorithm type
    at com.ibm.crypto.provider.RSAKeyFactory.engineTranslateKey(Unknown Source)
    at com.ibm.crypto.provider.RSAKeyFactory.toRSAKey(Unknown Source)
    at com.ibm.crypto.provider.RSACipher.engineGetKeySize(Unknown Source)
    at javax.crypto.Cipher.b(Unknown Source)
    at javax.crypto.Cipher.a(Unknown Source)
    at javax.crypto.Cipher.a(Unknown Source)
    at javax.crypto.Cipher.a(Unknown Source)
    at javax.crypto.Cipher.init(Unknown Source)
    at javax.crypto.Cipher.init(Unknown Source)
    at *.impl.CryptoServiceImpl.encrypt(CryptoServiceImpl.java:55)
    ... 28 more
</code></pre>
","<p>A certificate is not a public key although it contains one; more importantly, either a private key or public key or certificate for a public-key-crypto (aka asymmetric) scheme like RSA is not a symmetric key. Java <code>SecretKeySpec</code> is only for symmetric keys used with symmetric algorithms, like AES. </p>

<p>You need to represent your RSA keys using subtypes of <code>java.security.PrivateKey</code> and <code>java.security.PublicKey</code>. The way you do this is with a <code>KeyFactory</code> for RSA, or a <code>CertificateFactory</code> (as you already did). </p>

<p>For a PKCS#8-encoded private key, which is what you encoded and wrote out, decode it from PEM/base64 to <code>byte[]</code>, then:</p>

<pre><code>PKCS8EncodedKeySpec spec = new PKCSEncodedKeySpec (bytearray);
KeyFactory factory = KeyFactory.getInstance(""RSA"");
PrivateKey privkey = factory.generatePrivate (spec);
// use privkey in a Cipher.getInstance(""RSA"") to decrypt or sign
</code></pre>

<p>For a certificate do basically what you already did: </p>

<pre><code>InputStream is = /* something that returns contents of cert file */;
// you *can* decode from PEM/base64 first, but you don't need to;
// CertificateFactory-X.509 handles both
CertificateFactory cf = CertificateFactory.getInstance (""X.509"");
Certificate cert = cf.generateCertificate (is);
// use cert.getPublicKey() for RSA encrypt or verify
</code></pre>

<p>Aside: sigAlgName for a certificate does NOT tell about the key <em>in</em> the cert. It is entirely possible for a cert signed SHA1withRSA to contain a DSA or ECC key that cannot be used for RSA, and conversely possible for a cert that contains a perfectly good RSA key to be signed with a different RSA variant (like SHA256withRSA) or an entirely different algorithm (like sha1-DSA or sha2-ECDSA).</p>

<p>Also note: you are explicitly importing <code>java.security.cert.Certificate</code>; that's good. JRE also has an older and deprecated <code>java.security.Certificate</code> which you should not use, but if you just say <code>Certificate</code> some IDEs (like mine) may get confused and give you the wrong one.</p>
","1581","<encryption><rsa><public-key><key><java>","1","1","1","2015-10-22 02:47:08","33272576","2","3","","","","2015-10-22 00:03:53",""
"21757387","RSA algorithm in Java : How works getEncoded method on java.security.Key interface?","<p>I would like to be more familiar with the RSA algorithm and I have made small project for that. Actually everithing works fine, I can encrypt and decrypt a message correctly but I don't know if my key generation is performed correctly (my objective is to obtain a public key with a byte array representation that I can export for other parts).</p>

<p>Here comes how my keys are generated:</p>

<pre><code>KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"", ""SUN""); 

random.nextBytes(new byte[128]);

keyGen.initialize(1024, random);

KeyPair keyPair = keyGen.generateKeyPair();

PublicKey pubKey = keyPair.getPublic();
PrivateKey privKey = keyPair.getPrivate();

byte[] publicKeyEncoded  = pubKey.getEncoded();
byte[] privateKeyEncoded = privKey.getEncoded();
</code></pre>

<p>My question is about the getEncoded method, each time my program is executed a new key pair seems to be generated (according my trace) but when I call this method I have still the same value, it seems fixed. The value is changed when the method is called a second times and is changed each times that I call it in my program, but if a new execution is performed, the first value is the same as first value of the previous execution event if the keys differs. </p>

<p>According the documentation it seems that it ""Returns the key in its primary encoding format ..."", I have checked my key format, it is X.509, but there is nothing about the described behavior.</p>

<p>Can you please give me more details about that ?</p>
","<p>I have tested the code snippet you provided in a standalone java program. Every time I call it, a new different key is generated. If your code always generate the same sequence of key it means that the random number generator produces the same sequence of number.</p>

<p>SHA1PRNG is a PRNG, it means that the sequence of number produced depends on a seed. If the PRGN is seeded twice with the same seed, it will produce the same sequence of numbers. The seed is set as follows:</p>

<ul>
<li>by calling <code>setSeed(byte[])</code> on <code>SecureRandom</code></li>
<li>the first <code>next</code>/<code>nextBytes</code> is called <strong>and <code>setSeed</code> has not been previously called</strong> the PRGN is seeded with a secure mechanism provided by the underlying OS.</li>
</ul>

<p>Since the code you posted here does not call <code>setSeed</code>, the <code>SecureRandom</code> object should be properly seeded with some true random value.</p>

<p>My suggestions:</p>

<ol>
<li><p>Are you sure that you do not call <code>setSeed</code> (with the same seed value)? This could explain this behavour. Note also that the key encoding provided by <code>getEncoded()</code> always starts with the same byte sequence <code>30819f300d06092a864886f70d010101050003818d00</code></p></li>
<li><p>Try to use <code>random = new SecureRandom()</code>. It will use the default <code>SecureRandom</code> implementation for your platform (For windows as far as I known it is the SHA1PRNG implementation but Linux and MaxOSX are using another implementation)</p></li>
</ol>
","1565","<java><rsa><public-key><asn.1>","2","1","1","2014-02-13 18:27:04","","1","1","642653","","2014-02-13 16:52:26","2014-02-13 14:45:04",""
"49057905","Calculating d value in RSA","<p>I saw a couple questions about this but most of them were answered in unhelpful way or didn't get a proper answer at all. <br/> I have these variables:</p>

<ul>
<li>p = 31</li>
<li>q = 23</li>
<li>e - public key exponent = 223</li>
<li>phi - (p-1)*(q-1) = 660
<br/></li>
</ul>

<p>Now I need to calculate <code>d</code> variable (which I know is equal 367). The problem is that I don't know how. I found this equation on the internet but it doesn't work (or I can't use it):</p>

<pre><code>e⋅d=1modϕ(n)
</code></pre>

<p>When I see that equation i think that it means this:</p>

<pre><code>d=(1modϕ(n))/e
</code></pre>

<p>But apparently it doesn't because 367 (1modϕ(n))/e = 1%660/223 = 1/223 != 367
<br/> Maybe I don't understand and I did something wrong - that's why I ask.</p>

<p>I did some more research and I found second equation:</p>

<pre><code>d=1/e mod ϕ(n)
or
d=e^-1 mod ϕ(n)
</code></pre>

<p>But in the end it gives the same result:
1/e mod ϕ(n) = 1/223 % 660 = 1/223 != 367</p>

<p>Then I saw some guy saying that to solve that equation you need <a href=""https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm"" rel=""nofollow noreferrer"">extended Euclidean algorithm</a> If anyone knows how to use it to solve that problem then I'd be very thankful if you help me.</p>
","<p>If you want to calculate something like a / b mod p, you can't just divide it and take division remainder from it. Instead, you have to find such b<sup>-1</sup> that b<sup>-1</sup> = 1/b mod p (b<sup>-1</sup> is a modular multiplicative inverse of b mod p). If p is a prime, you can use <a href=""https://en.wikipedia.org/wiki/Fermat%27s_little_theorem"" rel=""nofollow noreferrer"">Fermat's little theorem</a>. It states that for any prime p, a<sup>p</sup> = a mod p &lt;=> a<sup>(p - 2)</sup> = 1/a mod p. So, instead of a / b mod p, you have to compute something like a * b<sup>(p - 2)</sup> mod p. b<sup>(p - 2)</sup> can be computed in O(log(p))
 using <a href=""https://en.wikipedia.org/wiki/Exponentiation_by_squaring"" rel=""nofollow noreferrer"">exponentiation by squaring</a>. If p is not a prime, modular multiplicative inverse exists if and only if GCD(b, p) = 1. Here, we can use <a href=""https://en.wikipedia.org/wiki/Euclidean_algorithm#Extended_Euclidean_algorithm"" rel=""nofollow noreferrer"">extended euclidean algorithm</a> to solve equation bx + py = 1 in logarithmic time. When we have bx + py = 1, we can take it mod p and we have bx = 1 mod p &lt;=> x = 1/b mod p, so x is our b<sup>-1</sup>. If GCD(b, p) ≠ 1, b<sup>-1</sup> mod p doesn't exist.</p>

<p>Using either Fermat's theorem or the euclidean algorithm gives us same result in same time complexity, but the euclidean algorithm can also be used when we want to compute something modulo number that's not a prime (but it has to be coprime with numer want to divide by).</p>
","1565","<rsa><private-key><public-key>","1","0","1","2018-03-02 00:34:16","49058308","1","1","6923127","","2018-03-01 20:18:01","2018-03-01 20:08:48",""
"26599197","Why my RSA 2048 Public Key is 294 bytes long?","<p>If I do this:</p>

<pre><code>KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(2048);
KeyPair kp = kpg.genKeyPair();
Key publicKey = kp.getPublic();
byte [] pubKey = publicKey.getEncoded();
System.out.println(""Size: "" + pubKey.length);
</code></pre>

<p>My output value is 294. Shouldn't RSA 2048 output be 256 bytes long?</p>
","<pre><code>  publicKey.getEncoded();
</code></pre>

<p>This will return an encoded key in a standard format with some overhead (like algorithm identifier).</p>

<p>If you really want the raw key material, you could cast to <code>RSAPublicKey</code> and call <code>getModulus()</code> and <code>getPublicExponent()</code> (gives you <code>BigInteger</code>s).</p>
","1562","<java><rsa><public-key>","4","2","2","2014-10-28 08:48:15","26599237","0","0","2856247","","2014-10-28 00:53:27","2014-10-28 00:47:31",""
"26599197","Why my RSA 2048 Public Key is 294 bytes long?","<p>If I do this:</p>

<pre><code>KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(2048);
KeyPair kp = kpg.genKeyPair();
Key publicKey = kp.getPublic();
byte [] pubKey = publicKey.getEncoded();
System.out.println(""Size: "" + pubKey.length);
</code></pre>

<p>My output value is 294. Shouldn't RSA 2048 output be 256 bytes long?</p>
","<p>An RSA key does not consist of random bytes like for instance an AES key; it consists of numbers. The key size of RSA is defined by the modulus, but it also requires a public exponent (usually the fourth number of Fermat or another small prime). So with <code>getEncoded()</code> both are returned embedded into an ASN.1 DER encoded byte array that is usually present in X5.09 certificates called SubjectPublicKeyInfo.</p>

<p>If you want to extract the key size, use <code>((RSAPublicKey) publicKey).getModulus().bitLength()</code> instead. To have a look at the structure, use <code>openssl asn1parse</code> or use an online decoder such as <a href=""http://lapo.it/asn1js/"" rel=""noreferrer"">this</a>.</p>
","1562","<java><rsa><public-key>","4","6","2","2014-10-28 08:48:15","26599237","0","0","2856247","","2014-10-28 00:53:27","2014-10-28 00:47:31",""
"25619719","svn+ssh with public key on linux: merge fails but co, up, commit works","<p>I have the following problem: I followed the many tutorials one can find on setting up a public key access via svn+ssh to a subversion repository on a linux machine with ssh-only access. It seems to work for checkouts, updates and commits, but if someone tries to merge or uses the ^ operator to copy, it crashes.</p>

<p>Let me give more information in the form of an example: The svn repository is in the folder /home/bob/svn/project of machine mymachine.myhost.com and belongs to user bob (aka: me). I generated a key for alice and added the following line to /home/bob/.ssh/authorized_keys:</p>

<pre><code>command=""/usr/bin/svnserve -t -r /home/bob/svn/project --tunnel-user=Alice"",no-port-forwarding,no-agent-forwarding,no-X11-forwarding,no-pty ssh-rsa &lt;alices key&gt; alice
</code></pre>

<p>Alice was able to checkout the repository using</p>

<pre><code>svn co svn+ssh://bob@mymachine.myhost.com@
</code></pre>

<p>She can commit changes and update. However, if she tries to merge or do svn cp using the ^ operator on her machine as follows:</p>

<pre><code>svn cp ^/trunk/ branches/alicesbranch
</code></pre>

<p>te server does not react and after a while she gets the following message</p>

<pre><code>svn: E210002: Unable to connect to a repository at URL 'svn+ssh://bob@mymachine.myhost.com/trunk/'
svn: E210002: To better debug SSH connection problems, remove the -q option from 'ssh' in the [tunnels] section of your Subversion configuration file.
svn: E210002: Network connection closed unexpectedly
</code></pre>

<p>After some research, I gave up, because in most cases I only get discussions from people where the repository could not be accessed at all. However in my case, I/Alice <strong>do</strong> have access, but not as general as some svn operations Seem to need.</p>

<p>I believe that I did something wrong with the combination of the svnserve command and the path Alice uses to checkout, but I don't know what.</p>

<p>In reality, the server is a machine for which I don't have root access. Also, the network seems to be very shielded from external access: Only ssh is allowed, but as soon as for example the above error occurs, I/Alice cannot login at all on said hostname for a while, probably because the firewall declines access for a while for security reasons because of a failed ssh connection. This is also why I cannot just go ahead and do lots of trial-and-errors with different svnserve commands and different checkout commands, because every error will force me to wait until I can do another trial.</p>

<p>This is why I hope someone here can help me. I hope I gave enough information to pin down the problem.</p>

<p>Sincerly,
Daschm</p>

<p><strong>Edit 1:</strong> Here is svn info Alice would get</p>

<pre><code>Path: .
Working Copy Root Path: /home/alice/mysvnprojects/myprojectwithbob
URL: svn+ssh://bob@mymachine.myhost.com
Relative URL: ^/
Repository Root: svn+ssh://bob@mymachine.myhost.com
Repository UUID: 8f8511ce-d5fa-11e3-abfa-cd5eac3f4aa8
Revision: 121
Node Kind: directory
Schedule: normal
Last Changed Author: Alice
Last Changed Rev: 121
Last Changed Date: 2014-08-22 15:36:56 +0200 (Fri, 22 Aug 2014)
</code></pre>

<p><strong>Edit 2:</strong>
Changing the svnserve command to</p>

<pre><code>command=""/usr/bin/svnserve -t -r /home/bob/svn/ --tunnel-user=Alice""
</code></pre>

<p>and changing the co command accordingly does not solve the problem. Here is the output:</p>

<pre><code>/home/alice/mysvnprojects/myprojectwithbob: svn co svn+ssh://bob@mymachine.myhost.co/project
  [looong list of files]
  Checked out revision 129.
/home/alice/mysvnprojects/myprojectwithbob: ls
  project
/home/alice/mysvnprojects/myprojectwithbob: cd project/
/home/alice/mysvnprojects/myprojectwithbob: svn info
  Path: .
  Working Copy Root Path: /home/alice/mysvnprojects/myprojectwithbob
  URL: svn+ssh://bob@mymachine.myhost.com/project
  Relative URL: ^/
  Repository Root: svn+ssh://bob@mymachine.myhost.com/project
  Repository UUID: 8f8511ce-d5fa-11e3-abfa-cd5eac3f4aa8
  Revision: 129
  Node Kind: directory
  Schedule: normal
  Last Changed Author: Alice
  Last Changed Rev: 129
  Last Changed Date: 2014-09-02 12:33:56 +0200 (Tue, 02 Sep 2014)
/home/alice/mysvnprojects/myprojectwithbob: ls
  branches  trunk
/home/alice/mysvnprojects/myprojectwithbob: svn cp ^/trunk branches/mytestbranch
  svn: E210002: Unable to connect to a repository at URL     'svn+ssh://bob@mymachine.myhost.com/project/trunk'
  svn: E210002: To better debug SSH connection problems, remove the -q option from     'ssh' in the [tunnels] section of your Subversion configuration file.
  svn: E210002: Network connection closed unexpectedly
</code></pre>

<p>If I do </p>

<pre><code>svn cp ^/trunk ^/branches/mytestbranch
</code></pre>

<p>instead, it seems to work! However, I still cannot merge </p>

<pre><code>cd trunk 
svn merge ^/branches/mytestbranch .
</code></pre>

<p>leads to the known error.</p>

<p><strong>Edit 3:</strong></p>

<p>It seems as if everything fails which tries to access anything beyond the root directory.
For example: </p>

<pre><code>svn co svn+ssh://bob@mymachine.myhost.com@
</code></pre>

<p>works, but [assuming the basic setup where ""svnserve -r /home/bob/svn/project"" is used]</p>

<pre><code>svn co svn+ssh://bob@mymachine.myhost.com/trunk
</code></pre>

<p>fails. This seems to be a common denominator to all failing and working cases.</p>
","<p>First you need to create the svn structure, by creating the directories trunk, branches and tags in the root of the project and commit this changes. Otherwise there is obviously no trunk and branches on the server an the <code>^/trunk</code> and <code>^/branches/branch</code> commands fail.</p>

<p>The problem is, you are checking out the whole repository instead of the trunk. You are supposed to work on the trunk or the branch and use <code>svn switch</code> to switch between them. To get it work, try to checkout the project with this command:</p>

<pre><code>svn co svn+ssh://bob@mymachine.myhost.co/project/trunk
</code></pre>

<p>If you now try to merge it should work. The problem is, you are trying to merge the whole repository with the branch, which is actually a subfolder of that repository. So to switch to the Alice branch use:</p>

<pre><code>svn switch ^/branches/mytestbranch
</code></pre>

<p>If you want want merge it back to trunk, switch back to it first by using</p>

<pre><code>svn switch ^/trunk
</code></pre>

<p>And then doing a </p>

<pre><code>svn merge ^/branches/mytestbranch
</code></pre>

<p>Checkout a Tutorial of howto use svn and which workflows are best practice.</p>
","1539","<linux><svn><ssh><public-key><svnserve>","2","0","1","2014-09-03 07:23:11","","6","","3999655","","2014-09-02 15:42:03","2014-09-02 09:07:03",""
"20002230","read public key invalid key format java","<p>I have code:</p>

<pre><code>public PublicKey read_public_key(String path)
                throws IOException, NoSuchAlgorithmException,
                InvalidKeySpecException {

         KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");  
            FileInputStream pubKeyStream = new FileInputStream(path);  
            byte[] pubKeyBytes = new byte[(int)path.length()];
            pubKeyStream.read(pubKeyBytes);   
            pubKeyStream.close();  
            X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(pubKeyBytes);   
            PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);  

            return pubKey;
        }
</code></pre>

<p>But I get <strong>invalid key format</strong> How do I get public key from .pub file? Later I need to: </p>

<pre><code>private static byte[] encrypt(String text, PublicKey key) {
        byte[] cipherText = null;
        try {
          // get an RSA cipher object and print the provider
          final Cipher cipher = Cipher.getInstance(""RSA/None/PKCS1Padding"");
          // encrypt the plain text using the public key
          cipher.init(Cipher.ENCRYPT_MODE, key);
          cipherText = cipher.doFinal(text.getBytes());
        } catch (Exception e) {
          e.printStackTrace();
        }
        return cipherText;
      }
</code></pre>
","","1527","<java><format><public-key>","0","","0","2013-11-15 13:37:48","","12","3","1444413","","2013-11-15 13:37:48","2013-11-15 13:30:24",""
"6460845","Standard way to hash an RSA key?","<p>What's the algorithm for creating hash (sha-1 or MD5) of an RSA public key?  Is there a standard way to do this?  Hash just the modulus, string addition of both and then take a hash?  Is SHA-1 or MD5 usually used?</p>

<p>I want to use it to ensure that I got the right key (have the sender send a hash, and I calculate it myself), and log said hash so I always know which exact key I used when I encrypt the payload.</p>
","<p>Based on the OpenSSH source code, the way that a fingerprint is generated for RSA keys is to convert n and e from the public key to big-endian binary data, concatenate the data and then hash that data with the given hash function.</p>

<p>Portions of the OpenSSH source code follows.  The comments were added to clarify what is happening.</p>

<pre><code>// from key_fingerprint_raw() in key.c
switch (k-&gt;type) {
case KEY_RSA1:
    // figure out how long n and e will be in binary form
    nlen = BN_num_bytes(k-&gt;rsa-&gt;n);
    elen = BN_num_bytes(k-&gt;rsa-&gt;e);
    len = nlen + elen;
    // allocate space for n and e and copy the binary data into blob
    blob = xmalloc(len);
    BN_bn2bin(k-&gt;rsa-&gt;n, blob);
    BN_bn2bin(k-&gt;rsa-&gt;e, blob + nlen);

...

// pick a digest to use
switch (dgst_type) {
case SSH_FP_MD5:
    md = EVP_md5();
    break;
case SSH_FP_SHA1:
    md = EVP_sha1();
    break;

...

// hash the data in blob (n and e)
EVP_DigestInit(&amp;ctx, md);
EVP_DigestUpdate(&amp;ctx, blob, len);
EVP_DigestFinal(&amp;ctx, retval, dgst_raw_length);
</code></pre>

<p>From the <code>BN_bn2bin</code> <a href=""http://www.openssl.org/docs/crypto/BN_bn2bin.html"" rel=""nofollow"">manual page</a>:</p>

<p><code>BN_bn2bin(a, to)</code> converts the absolute value of <code>a</code> into <em>big-endian</em> form and stores it at <code>to</code>. <code>to</code> must point to <code>BN_num_bytes(a)</code> bytes of memory. </p>
","1518","<encryption><hash><rsa><public-key-encryption><public-key>","2","3","1","2011-06-24 07:33:13","6464750","0","","","","","2011-06-23 21:30:32",""
"19272734","SSH connect with Putty/Win7 to OpenSSH/Debian shows Server refused public-key signature despite accepting key","<p>i'm running a server with Debian Linux 3.2.46 and OpenSSH Server 6.0 and secured the login with a 2048 bit RSA key.</p>

<p>Although connecting with OpenSSH Client from another machine works, the connection is refused when using Putty 0.63 on a Windows 7 machine with the following message:</p>

<pre><code>Server refused public-key signature despite accepting key!
</code></pre>

<p>Because the problem applies only to Putty, i think all server configuration is correct. Putty works fine when running the server with Debian 2.6.32 and OpenSSH 5.5.</p>

<p>Here is the content of the auth.log:</p>

<pre><code>matching key found: file /root/.ssh/authorized_keys, line 2
Oct  8 14:53:43 serverx sshd[28964]: Found matching RSA key: XX:XX
Oct  8 14:53:43 serverx sshd[28964]: debug1: restore_uid: 0/0
Oct  8 14:53:43 serverx sshd[28964]: debug3: mm_answer_keyallowed: key 0x7fb3828774c0 is allowed
Oct  8 14:53:43 serverx sshd[28964]: debug3: mm_request_send entering: type 22
Oct  8 14:53:43 serverx sshd[28964]: debug3: mm_key_verify entering [preauth]
Oct  8 14:53:43 serverx sshd[28964]: debug3: mm_request_send entering: type 23 [preauth]
Oct  8 14:53:43 serverx sshd[28964]: debug3: mm_key_verify: waiting for MONITOR_ANS_KEYVERIFY [preauth]
Oct  8 14:53:43 serverx sshd[28964]: debug3: mm_request_receive_expect entering: type 24 [preauth]
Oct  8 14:53:43 serverx sshd[28964]: debug3: mm_request_receive entering [preauth]
Oct  8 14:53:43 serverx sshd[28964]: debug3: mm_request_receive entering
Oct  8 14:53:43 serverx sshd[28964]: debug3: monitor_read: checking request 23
Oct  8 14:53:43 serverx sshd[28964]: error: hash mismatch
Oct  8 14:53:43 serverx sshd[28964]: debug1: ssh_rsa_verify: signature incorrect
Oct  8 14:53:43 serverx sshd[28964]: debug3: mm_answer_keyverify: key 0x7fb382871f80 signature unverified
Oct  8 14:53:43 serverx sshd[28964]: debug3: mm_request_send entering: type 24
</code></pre>

<p>After this happens, server switches to password auth and i'm able to login fine.</p>

<p>My question: Somebody out there who knows whats going wrong or what was changed in OpenSSH? Any suggestions for a fix?</p>
","","1513","<linux><authentication><putty><openssh><public-key>","2","","0","2013-10-09 12:58:18","","2","","","","","2013-10-09 12:58:18",""
"34088357","SSH connection to my container closed by remote host","<p>I try to connect to my bluemix running container but I get this error :</p>

<pre><code>ssh -p 22 login@134.*.*.*
Connection to 134.*.*.* closed by remote host.
Connection to 134.*.*.* closed.
</code></pre>

<p>I hidden ip for security.</p>

<p>During docker container building, I add my ssh public key to /home/login/.ssh/authorized_keys. Then I start my container (with sshd running) and open 22 port. </p>

<p>In local (with docker on my server), I can connect to ssh with my private key to the container. But when I start container on Bluemix, I can't connect to ssh even after attribute public ip address and, of course, publish 22 tcp port.</p>

<p>To run my container that I push to ibm repo, I use ICE cli to run container with a entry point script which start all services (within sshd).</p>

<pre><code>ice run --publish 8572 --publish 8787 --publish 22 --memory 2048 --name boardvisor registry.ng.bluemix.net/org/test:latest  /run.sh
</code></pre>

<p>Then I go to bluexmix web dashboard to attribute public ip address</p>

<p>As I receive a response to sshd server, the container seems work and reachable but I don't understand why I can connect on my docker server but not on bluemix server.</p>

<p>I provide you the ssh verbose connection :</p>

<pre><code>OpenSSH_6.6.1, OpenSSL 1.0.1e-fips 11 Feb 2013
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 56: Applying options for *
debug2: ssh_connect: needpriv 0
debug1: Connecting to 134.168.6.95 [134.168.6.95] port 22.
debug1: Connection established.
debug3: Incorrect RSA1 identifier
debug3: Could not load ""/home/idcware/.ssh/id_rsa"" as a RSA1 public key
debug1: identity file /home/idcware/.ssh/id_rsa type 1
debug1: identity file /home/idcware/.ssh/id_rsa-cert type -1
debug3: Incorrect RSA1 identifier
debug3: Could not load ""/home/idcware/.ssh/id_dsa"" as a RSA1 public key
debug1: identity file /home/idcware/.ssh/id_dsa type -1
debug1: identity file /home/idcware/.ssh/id_dsa-cert type -1
debug1: identity file /home/idcware/.ssh/id_ecdsa type -1
debug1: identity file /home/idcware/.ssh/id_ecdsa-cert type -1
debug1: identity file /home/idcware/.ssh/id_ed25519 type -1
debug1: identity file /home/idcware/.ssh/id_ed25519-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.6.1
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.6.1
debug1: match: OpenSSH_6.6.1 pat OpenSSH_6.6.1* compat 0x04000000
debug2: fd 3 setting O_NONBLOCK
debug3: load_hostkeys: loading entries for host ""134.168.6.95"" from file ""/home/idcware/.ssh/known_hosts""
debug3: load_hostkeys: found key type ECDSA in file /home/idcware/.ssh/known_hosts:3
debug3: load_hostkeys: loaded 1 keys
debug3: order_hostkeyalgs: prefer hostkeyalgs: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-ed25519,ssh-rsa,ssh-dss
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit: first_kex_follows 0
debug2: kex_parse_kexinit: reserved 0
debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ssh-rsa,ecdsa-sha2-nistp256,ssh-ed25519
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib@openssh.com
debug2: kex_parse_kexinit: none,zlib@openssh.com
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit: first_kex_follows 0
debug2: kex_parse_kexinit: reserved 0
debug2: mac_setup: setup hmac-md5-etm@openssh.com
debug1: kex: server-&gt;client aes128-ctr hmac-md5-etm@openssh.com none
debug2: mac_setup: setup hmac-md5-etm@openssh.com
debug1: kex: client-&gt;server aes128-ctr hmac-md5-etm@openssh.com none
debug1: kex: curve25519-sha256@libssh.org need=16 dh_need=16
debug1: kex: curve25519-sha256@libssh.org need=16 dh_need=16
debug1: sending SSH2_MSG_KEX_ECDH_INIT
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ECDSA f8:88:10:d1:91:bd:42:ec:d1:04:e5:00:c6:ab:11:e9
debug3: load_hostkeys: loading entries for host ""134.168.6.95"" from file ""/home/idcware/.ssh/known_hosts""
debug3: load_hostkeys: found key type ECDSA in file /home/idcware/.ssh/known_hosts:3
debug3: load_hostkeys: loaded 1 keys
debug1: Host '134.168.6.95' is known and matches the ECDSA host key.
debug1: Found key in /home/idcware/.ssh/known_hosts:3
debug1: ssh_ecdsa_verify: signature correct
debug2: kex_derive_keys
debug2: set_newkeys: mode 1
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug2: set_newkeys: mode 0
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug2: service_accept: ssh-userauth
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug2: key: /home/idcware/.ssh/id_rsa (0x7fb6e3792fd0),
debug2: key: /home/idcware/.ssh/id_dsa ((nil)),
debug2: key: /home/idcware/.ssh/id_ecdsa ((nil)),
debug2: key: /home/idcware/.ssh/id_ed25519 ((nil)),
debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password
debug3: start over, passed a different list publickey,gssapi-keyex,gssapi-with-mic,password
debug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password
debug3: authmethod_lookup gssapi-keyex
debug3: remaining preferred: gssapi-with-mic,publickey,keyboard-interactive,password
debug3: authmethod_is_enabled gssapi-keyex
debug1: Next authentication method: gssapi-keyex
debug1: No valid Key exchange context
debug2: we did not send a packet, disable method
debug3: authmethod_lookup gssapi-with-mic
debug3: remaining preferred: publickey,keyboard-interactive,password
debug3: authmethod_is_enabled gssapi-with-mic
debug1: Next authentication method: gssapi-with-mic
debug1: Unspecified GSS failure.  Minor code may provide more information
No Kerberos credentials available
debug1: Unspecified GSS failure.  Minor code may provide more information
No Kerberos credentials available
debug1: Unspecified GSS failure.  Minor code may provide more information
debug1: Unspecified GSS failure.  Minor code may provide more information
No Kerberos credentials available
debug2: we did not send a packet, disable method
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /home/idcware/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password
debug1: Trying private key: /home/idcware/.ssh/id_dsa
debug1: key_parse_private2: missing begin marker
debug1: read PEM private key done: type RSA
debug3: sign_and_send_pubkey: RSA 33:a3:84:5c:55:b4:4e:2d:c9:83:19:51:37:c6:5e:27
debug2: we sent a publickey packet, wait for reply
debug1: Authentication succeeded (publickey).
Authenticated to 134.168.6.95 ([134.168.6.95]:22).
debug1: channel 0: new [client-session]
debug3: ssh_session2_open: channel_new: 0
debug2: channel 0: send open
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: channel 0: free: client-session, nchannels 1
debug3: channel 0: status: The following connections are open:
  #0 client-session (t3 r-1 i0/0 o0/0 fd 4/5 cc -1)
Connection to 134.168.6.95 closed by remote host.
Connection to 134.168.6.95 closed.
Transferred: sent 3756, received 2112 bytes, in 0.0 seconds
Bytes per second: sent 278448.9, received 156571.9
debug1: Exit status -1
</code></pre>

<p>For container log, I only have this in consignation from bluemix web dashboard:</p>

<pre><code>Dec 4 14:16:31 instance-0007a14f syslog-ng[11]: Log statistics; processed='src.internal(s_sys#1)=12', stamp='src.internal(s_sys#1)=1449234391', processed='destination(d_mlal)=0', processed='center(received)=12', processed='destination(d_spol)=0', processed='destination(d_mesg)=24', processed='destination(d_mail)=0', processed='destination(d_auth)=61', processed='destination(d_cron)=0', processed='destination(d_bv_info)=0', processed='center(queued)=85', processed='source(s_bv_syslog)=0', processed='src.none()=0', stamp='src.none()=0', processed='destination(d_bv_crit)=0', processed='global(payload_reallocs)=20', processed='global(sdata_updates)=0', processed='destination(d_bv_all)=0', processed='destination(d_bv_err)=0', processed='destination(d_boot)=0', processed='destination(d_kern)=0', processed='global(msg_clones)=0', processed='source(s_sys)=12', processed='destination(d_bv_process)=0'
</code></pre>
","<p>Since the container works and it is reachable but you can't access it only on Bluemix, I suggest you to open a support request directly from your Bluemix console using the support/help widget or sending an email to <strong>support@bluemix.net</strong>: in this way you'll involve IBM Containers support team in checking and fix this issue. They will be able to perform in-depth investigation of your error.</p>

<p>Please provide org and space guids and some details on the image you used.</p>

<p>You can retrieve org and space guids using CF CLI (when you already logged in):</p>

<pre><code>cf org &lt;orgname&gt; --guid
cf space &lt;spacename&gt; --guid
</code></pre>
","1507","<ssh><docker><containers><ibm-cloud><public-key>","1","0","2","2016-01-25 13:45:31","","4","","2618292","","2015-12-04 14:18:14","2015-12-04 12:23:25",""
"34088357","SSH connection to my container closed by remote host","<p>I try to connect to my bluemix running container but I get this error :</p>

<pre><code>ssh -p 22 login@134.*.*.*
Connection to 134.*.*.* closed by remote host.
Connection to 134.*.*.* closed.
</code></pre>

<p>I hidden ip for security.</p>

<p>During docker container building, I add my ssh public key to /home/login/.ssh/authorized_keys. Then I start my container (with sshd running) and open 22 port. </p>

<p>In local (with docker on my server), I can connect to ssh with my private key to the container. But when I start container on Bluemix, I can't connect to ssh even after attribute public ip address and, of course, publish 22 tcp port.</p>

<p>To run my container that I push to ibm repo, I use ICE cli to run container with a entry point script which start all services (within sshd).</p>

<pre><code>ice run --publish 8572 --publish 8787 --publish 22 --memory 2048 --name boardvisor registry.ng.bluemix.net/org/test:latest  /run.sh
</code></pre>

<p>Then I go to bluexmix web dashboard to attribute public ip address</p>

<p>As I receive a response to sshd server, the container seems work and reachable but I don't understand why I can connect on my docker server but not on bluemix server.</p>

<p>I provide you the ssh verbose connection :</p>

<pre><code>OpenSSH_6.6.1, OpenSSL 1.0.1e-fips 11 Feb 2013
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 56: Applying options for *
debug2: ssh_connect: needpriv 0
debug1: Connecting to 134.168.6.95 [134.168.6.95] port 22.
debug1: Connection established.
debug3: Incorrect RSA1 identifier
debug3: Could not load ""/home/idcware/.ssh/id_rsa"" as a RSA1 public key
debug1: identity file /home/idcware/.ssh/id_rsa type 1
debug1: identity file /home/idcware/.ssh/id_rsa-cert type -1
debug3: Incorrect RSA1 identifier
debug3: Could not load ""/home/idcware/.ssh/id_dsa"" as a RSA1 public key
debug1: identity file /home/idcware/.ssh/id_dsa type -1
debug1: identity file /home/idcware/.ssh/id_dsa-cert type -1
debug1: identity file /home/idcware/.ssh/id_ecdsa type -1
debug1: identity file /home/idcware/.ssh/id_ecdsa-cert type -1
debug1: identity file /home/idcware/.ssh/id_ed25519 type -1
debug1: identity file /home/idcware/.ssh/id_ed25519-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.6.1
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.6.1
debug1: match: OpenSSH_6.6.1 pat OpenSSH_6.6.1* compat 0x04000000
debug2: fd 3 setting O_NONBLOCK
debug3: load_hostkeys: loading entries for host ""134.168.6.95"" from file ""/home/idcware/.ssh/known_hosts""
debug3: load_hostkeys: found key type ECDSA in file /home/idcware/.ssh/known_hosts:3
debug3: load_hostkeys: loaded 1 keys
debug3: order_hostkeyalgs: prefer hostkeyalgs: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-ed25519,ssh-rsa,ssh-dss
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit: first_kex_follows 0
debug2: kex_parse_kexinit: reserved 0
debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ssh-rsa,ecdsa-sha2-nistp256,ssh-ed25519
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib@openssh.com
debug2: kex_parse_kexinit: none,zlib@openssh.com
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit: first_kex_follows 0
debug2: kex_parse_kexinit: reserved 0
debug2: mac_setup: setup hmac-md5-etm@openssh.com
debug1: kex: server-&gt;client aes128-ctr hmac-md5-etm@openssh.com none
debug2: mac_setup: setup hmac-md5-etm@openssh.com
debug1: kex: client-&gt;server aes128-ctr hmac-md5-etm@openssh.com none
debug1: kex: curve25519-sha256@libssh.org need=16 dh_need=16
debug1: kex: curve25519-sha256@libssh.org need=16 dh_need=16
debug1: sending SSH2_MSG_KEX_ECDH_INIT
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ECDSA f8:88:10:d1:91:bd:42:ec:d1:04:e5:00:c6:ab:11:e9
debug3: load_hostkeys: loading entries for host ""134.168.6.95"" from file ""/home/idcware/.ssh/known_hosts""
debug3: load_hostkeys: found key type ECDSA in file /home/idcware/.ssh/known_hosts:3
debug3: load_hostkeys: loaded 1 keys
debug1: Host '134.168.6.95' is known and matches the ECDSA host key.
debug1: Found key in /home/idcware/.ssh/known_hosts:3
debug1: ssh_ecdsa_verify: signature correct
debug2: kex_derive_keys
debug2: set_newkeys: mode 1
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug2: set_newkeys: mode 0
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug2: service_accept: ssh-userauth
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug2: key: /home/idcware/.ssh/id_rsa (0x7fb6e3792fd0),
debug2: key: /home/idcware/.ssh/id_dsa ((nil)),
debug2: key: /home/idcware/.ssh/id_ecdsa ((nil)),
debug2: key: /home/idcware/.ssh/id_ed25519 ((nil)),
debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password
debug3: start over, passed a different list publickey,gssapi-keyex,gssapi-with-mic,password
debug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password
debug3: authmethod_lookup gssapi-keyex
debug3: remaining preferred: gssapi-with-mic,publickey,keyboard-interactive,password
debug3: authmethod_is_enabled gssapi-keyex
debug1: Next authentication method: gssapi-keyex
debug1: No valid Key exchange context
debug2: we did not send a packet, disable method
debug3: authmethod_lookup gssapi-with-mic
debug3: remaining preferred: publickey,keyboard-interactive,password
debug3: authmethod_is_enabled gssapi-with-mic
debug1: Next authentication method: gssapi-with-mic
debug1: Unspecified GSS failure.  Minor code may provide more information
No Kerberos credentials available
debug1: Unspecified GSS failure.  Minor code may provide more information
No Kerberos credentials available
debug1: Unspecified GSS failure.  Minor code may provide more information
debug1: Unspecified GSS failure.  Minor code may provide more information
No Kerberos credentials available
debug2: we did not send a packet, disable method
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /home/idcware/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password
debug1: Trying private key: /home/idcware/.ssh/id_dsa
debug1: key_parse_private2: missing begin marker
debug1: read PEM private key done: type RSA
debug3: sign_and_send_pubkey: RSA 33:a3:84:5c:55:b4:4e:2d:c9:83:19:51:37:c6:5e:27
debug2: we sent a publickey packet, wait for reply
debug1: Authentication succeeded (publickey).
Authenticated to 134.168.6.95 ([134.168.6.95]:22).
debug1: channel 0: new [client-session]
debug3: ssh_session2_open: channel_new: 0
debug2: channel 0: send open
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: channel 0: free: client-session, nchannels 1
debug3: channel 0: status: The following connections are open:
  #0 client-session (t3 r-1 i0/0 o0/0 fd 4/5 cc -1)
Connection to 134.168.6.95 closed by remote host.
Connection to 134.168.6.95 closed.
Transferred: sent 3756, received 2112 bytes, in 0.0 seconds
Bytes per second: sent 278448.9, received 156571.9
debug1: Exit status -1
</code></pre>

<p>For container log, I only have this in consignation from bluemix web dashboard:</p>

<pre><code>Dec 4 14:16:31 instance-0007a14f syslog-ng[11]: Log statistics; processed='src.internal(s_sys#1)=12', stamp='src.internal(s_sys#1)=1449234391', processed='destination(d_mlal)=0', processed='center(received)=12', processed='destination(d_spol)=0', processed='destination(d_mesg)=24', processed='destination(d_mail)=0', processed='destination(d_auth)=61', processed='destination(d_cron)=0', processed='destination(d_bv_info)=0', processed='center(queued)=85', processed='source(s_bv_syslog)=0', processed='src.none()=0', stamp='src.none()=0', processed='destination(d_bv_crit)=0', processed='global(payload_reallocs)=20', processed='global(sdata_updates)=0', processed='destination(d_bv_all)=0', processed='destination(d_bv_err)=0', processed='destination(d_boot)=0', processed='destination(d_kern)=0', processed='global(msg_clones)=0', processed='source(s_sys)=12', processed='destination(d_bv_process)=0'
</code></pre>
","<p>One principle in using containers is that a container should not start more than one process, in your case ssh and whatever the container is running.
Also there is another way to access your container with <code>exec</code></p>

<p>Scince Docker 1.3 you can access an runing container with:</p>

<p><code>docker exec COMMAND</code></p>

<p>in practice for bluemix:</p>

<p><code>cf ic exec -it CONTAINER /bin/bash</code></p>

<p>this starts the binary bash with an absolute path (/bin/bash part) and attaches the tty interactively + keeps connection open (-it part).</p>

<p>More infos: <a href=""https://www.ng.bluemix.net/docs/containers/container_cli_reference_cfic.html#container_cli_reference_cfic__exec"" rel=""nofollow"">https://www.ng.bluemix.net/docs/containers/container_cli_reference_cfic.html#container_cli_reference_cfic__exec</a></p>
","1507","<ssh><docker><containers><ibm-cloud><public-key>","1","3","2","2016-01-25 13:45:31","","4","","2618292","","2015-12-04 14:18:14","2015-12-04 12:23:25",""
"27444937","Appending another key generated in PuTTYgen to authorized_keys file","<p>I allowed Amazon to create a key pair for me. It works, I can ssh in.</p>

<p>I used PuTTYgen to create another key pair. </p>

<p>Followed directions from <a href=""https://help.ubuntu.com/community/SSH/OpenSSH/Keys"" rel=""nofollow"">https://help.ubuntu.com/community/SSH/OpenSSH/Keys</a> and <a href=""http://www.cyberciti.biz/tips/linux-multiple-ssh-key-based-authentication.html"" rel=""nofollow"">http://www.cyberciti.biz/tips/linux-multiple-ssh-key-based-authentication.html</a></p>

<ul>
<li>I executed command <code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></li>
<li>restarted the ssh service</li>
</ul>

<p>Resulting <code>authorized_keys</code> looks like this :</p>

<pre><code>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCIm2L1LrZji0ZjS0BFpo+lPresjSzBru2kZYQFwT2fB/6vsC+n1hPmA5peRkubMk5ahGawvqODX4ERYYMkP/imKK95el3Gx9n1zUO58PR2EH7qeRHZYtw1OwivDndTgB3eykJGtwJ80iyKa/H0yI8QdKNeQk91fRe9SntCHO63xfqvZKUjNgDtXhGmRAumCcwdMHU4viWlgIGcj7mARz+JDTD/8s8JbiW7UyUqxKGDwv0TZxxNbvIbUduQ61hkogPPaK9ECRBX5cc0iS44FgG8SbIGUZLt7/eV5tc8pAjQc5pWyZBDewV4E2HbCtHM6MoWtbmMKQjIzSauUnkUCWG/ crave
---- BEGIN SSH2 PUBLIC KEY ----
Comment: ""rsa-key-20141212""
AAAAB3NzaC1yc2EAAAABJQAAAQEA03FN7q5+yoRw3Fp9iJbd70Mc1Cbrc+z8SsFT
DaP27uoJy9eRjizikkIEhJNAU9Ql86S78oJzfiw+DrWVeoMHBMmY6yV/KFHBYlhl
waJp7dk9hwlQyCZRY4iiZT2o+TPcYj0FCk1V/Am8svtlgVNuRfo9G4zmBeRc+Njt
zfTZDmUpN1u70FVNOhGNHq2rSyG+Q8RJO1pX8jg82kXusHxZRMK6LlhBdaWEbr2w
Y8X89Eqg2UjNfkl4cOmx3rvVfK6xHbKoeGPEdDXDKghiflM1GCNwG4khIBDBLXZs
8bYzeTcIKGa3WAN7MoO1tvVKwpMVHR673Ypz3dLpD53WjxNmCw==
---- END SSH2 PUBLIC KEY ----
</code></pre>

<p>The first one still works with the private key generated by Amazon but the second public key doesn't recognize the private key PuTTYgen created.</p>

<p>I get</p>

<blockquote>
  <p>Server refused our key</p>
</blockquote>
","<p>When I follow the (correct) instructions you have pointed to yourself, my <code>id_rsa.pub</code> file follows expected format:</p>

<pre><code>ssh-rsa &lt;key&gt; comment&gt;
</code></pre>

<p>Had you appended a public key in the above format, it would work.</p>

<p>While I believe you actually have not followed the instructions, but saved the public key from PuTTYgen is its own multi-line format (as we can see in your resulting <code>authorized_keys</code>).</p>

<p>OpenSSH server does not understand that format.</p>

<p>Solutions:</p>

<ul>
<li><p>Either really follow the instructions you have pointed to completely (particularly generate the key pair using <code>ssh-keygen</code>)</p></li>
<li><p>Or follow PuTTYgen instructions and copy-paste the public key in OpenSSH format from PuTTYgen box labeled <em>Public key for pasting into OpenSSH authorized_keys file</em>.</p></li>
</ul>
","1488","<ubuntu><ssh><putty><public-key><authorized-keys>","1","2","1","2014-12-15 09:20:25","27446269","0","1","850848","","2014-12-12 14:58:31","2014-12-12 13:42:01","2014-12-27 18:35:06"
"37377207","Unable to ssh localhost on Mac OS El Capitan","<p>I am having some troubles while trying to make a ssh localhost connexion. I want to do this without passphrase, so when I created the public key/private key couple, I typed on the return key when asked for the passphrase, as indicated.
When I try the command</p>

<pre><code>    ssh localhost
</code></pre>

<p>I still get asked for a password. So I thought that the problem could come from some parameter avoiding public keys without passphrase and I created a new publickey/privatekey couple with a passphrase. But still, I get the following message :</p>

<pre><code>    Failing ssh to localhost : Permission denied (publickey,keyboard-interactive).
</code></pre>

<p>For information, I created the key couple with the command :</p>

<pre><code>    ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa
</code></pre>

<p>After having done some researches, I've read that wrong permissions can cause problems, so here is the result of the command ls -lha ~/.ssh/ :</p>

<pre><code>    drwx------   7 matthieu  staff  238B 22 mai 17:50 .
    drwxr-xr-x+ 35 matthieu  staff  1,2K 22 mai 17:52 ..
    -rw-r--r--   1 matthieu  staff  612B 22 mai 17:50 authorized_keys
    -rw-------   1 matthieu  staff  672B 22 mai 17:49 id_dsa
    -rw-r--r--   1 matthieu  staff  612B 22 mai 17:49 id_dsa.pub
    -rw-r--r--   1 matthieu  staff  171B 22 mai 10:00 known_hosts
</code></pre>

<p>I also ran ssh in verbose mode (ssh -vvv localhost) which gives :</p>

<pre><code>OpenSSH_6.9p1, LibreSSL 2.1.8
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 21: Applying options for *
debug2: ssh_connect: needpriv 0
debug1: Connecting to localhost [::1] port 22.
debug1: Connection established.
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_rsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_rsa-cert type -1
debug1: identity file /Users/matthieu/.ssh/id_dsa type 2
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_dsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_ecdsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_ecdsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_ed25519 type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_ed25519-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.9
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.9
debug1: match: OpenSSH_6.9 pat OpenSSH* compat 0x04000000
debug2: fd 5 setting O_NONBLOCK
debug1: Authenticating to localhost:22 as 'matthieu'
debug3: hostkeys_foreach: reading file ""/Users/matthieu/.ssh/known_hosts""
debug3: record_hostkey: found key type ECDSA in file /Users/matthieu/.ssh/known_hosts:1
debug3: load_hostkeys: loaded 1 keys from localhost
debug3: order_hostkeyalgs: prefer hostkeyalgs: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-ed25519,ssh-rsa,ssh-dss
debug2: kex_parse_kexinit: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit: first_kex_follows 0
debug2: kex_parse_kexinit: reserved 0
debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
debug2: kex_parse_kexinit: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ssh-ed25519
debug2: kex_parse_kexinit: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
debug2: kex_parse_kexinit: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
debug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: kex_parse_kexinit: none,zlib@openssh.com
debug2: kex_parse_kexinit: none,zlib@openssh.com
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit: first_kex_follows 0
debug2: kex_parse_kexinit: reserved 0
debug1: kex: server-&gt;client chacha20-poly1305@openssh.com &lt;implicit&gt; none
debug1: kex: client-&gt;server chacha20-poly1305@openssh.com &lt;implicit&gt; none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:A9YQlWJMyCIXIan+dT/wB4qYxQaJP7Z+fovz+88JDEg
debug3: hostkeys_foreach: reading file ""/Users/matthieu/.ssh/known_hosts""
debug3: record_hostkey: found key type ECDSA in file /Users/matthieu/.ssh/known_hosts:1
debug3: load_hostkeys: loaded 1 keys from localhost
debug1: Host 'localhost' is known and matches the ECDSA host key.
debug1: Found key in /Users/matthieu/.ssh/known_hosts:1
debug2: set_newkeys: mode 1
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug2: set_newkeys: mode 0
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug2: service_accept: ssh-userauth
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug2: key: /Users/matthieu/.ssh/id_dsa (0x7fd3f0d13f70),
debug2: key: /Users/matthieu/.ssh/id_rsa (0x0),
debug2: key: /Users/matthieu/.ssh/id_ecdsa (0x0),
debug2: key: /Users/matthieu/.ssh/id_ed25519 (0x0),
debug1: Authentications that can continue: publickey,keyboard-interactive
debug3: start over, passed a different list publickey,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering DSA public key: /Users/matthieu/.ssh/id_dsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug1: Authentications that can continue: publickey,keyboard-interactive
debug1: Trying private key: /Users/matthieu/.ssh/id_rsa
debug3: no such identity: /Users/matthieu/.ssh/id_rsa: No such file or directory
debug1: Trying private key: /Users/matthieu/.ssh/id_ecdsa
debug3: no such identity: /Users/matthieu/.ssh/id_ecdsa: No such file or directory
debug1: Trying private key: /Users/matthieu/.ssh/id_ed25519
debug3: no such identity: /Users/matthieu/.ssh/id_ed25519: No such file or directory
debug2: we did not send a packet, disable method
debug3: authmethod_lookup keyboard-interactive
debug3: remaining preferred: password
debug3: authmethod_is_enabled keyboard-interactive
debug1: Next authentication method: keyboard-interactive
debug2: userauth_kbdint
debug2: we sent a keyboard-interactive packet, wait for reply
debug2: input_userauth_info_req
debug2: input_userauth_info_req: num_prompts 1
Password:
debug1: Authentications that can continue: publickey,keyboard-interactive
debug2: userauth_kbdint
debug2: we sent a keyboard-interactive packet, wait for reply
debug2: input_userauth_info_req
debug2: input_userauth_info_req: num_prompts 1
Password:
debug1: Authentications that can continue: publickey,keyboard-interactive
debug2: userauth_kbdint
debug2: we sent a keyboard-interactive packet, wait for reply
debug2: input_userauth_info_req
debug2: input_userauth_info_req: num_prompts 1
Password:
debug1: Authentications that can continue: publickey,keyboard-interactive
debug2: we did not send a packet, disable method
debug1: No more authentication methods to try.
Permission denied (publickey,keyboard-interactive).
</code></pre>

<p>Having a friend who has got the same laptop as me (last mbp Retina 13""), with whom ssh localhost works fine, I noted that he's got the additional lines at the beginning when executing ssh -vvv localhost :</p>

<pre><code>    OpenSSH_6.9p1, LibreSSL 2.1.8
    debug1: Reading configuration data /etc/ssh/ssh_config
    debug1: /etc/ssh/ssh_config line 21: Applying options for *
    debug1: /etc/ssh/ssh_config line 56: Applying options for *
</code></pre>

<p>For the record, I already checked these pages and tried what's proposed, without success : 
<a href=""https://stackoverflow.com/questions/20617660/ssh-bad-passphrase-after-generation-of-public-key"">SSH: &quot;Bad passphrase&quot; after generation of public key</a>
and 
<a href=""https://stackoverflow.com/questions/15254349/ssh-permission-denied-publickey-keyboard-interactive"">ssh: Permission denied (publickey,keyboard-interactive)</a>
Thanks in advance for any advice, idea or solution</p>
","<p>From manual page for <code>sshd(8)</code>:</p>

<blockquote>
  <p><code>~/.ssh/authorized_keys</code></p>
  
  <p>The content of the file is not highly sensitive, but the recommended permissions are read/write for the user, and not accessible by others.</p>
</blockquote>

<p>You will find in the server log something about not using your <code>authorized_keys</code>, because it has too wide permissions. You should change the permissions to be readable and writable only by you: <code>chmod 600 ~/.ssh.authorized_keys</code></p>
","1483","<rsa><public-key><sshd><dsa>","0","0","3","2018-06-30 04:58:12","","0","","-1","","2017-05-23 12:32:36","2016-05-22 17:11:03",""
"37377207","Unable to ssh localhost on Mac OS El Capitan","<p>I am having some troubles while trying to make a ssh localhost connexion. I want to do this without passphrase, so when I created the public key/private key couple, I typed on the return key when asked for the passphrase, as indicated.
When I try the command</p>

<pre><code>    ssh localhost
</code></pre>

<p>I still get asked for a password. So I thought that the problem could come from some parameter avoiding public keys without passphrase and I created a new publickey/privatekey couple with a passphrase. But still, I get the following message :</p>

<pre><code>    Failing ssh to localhost : Permission denied (publickey,keyboard-interactive).
</code></pre>

<p>For information, I created the key couple with the command :</p>

<pre><code>    ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa
</code></pre>

<p>After having done some researches, I've read that wrong permissions can cause problems, so here is the result of the command ls -lha ~/.ssh/ :</p>

<pre><code>    drwx------   7 matthieu  staff  238B 22 mai 17:50 .
    drwxr-xr-x+ 35 matthieu  staff  1,2K 22 mai 17:52 ..
    -rw-r--r--   1 matthieu  staff  612B 22 mai 17:50 authorized_keys
    -rw-------   1 matthieu  staff  672B 22 mai 17:49 id_dsa
    -rw-r--r--   1 matthieu  staff  612B 22 mai 17:49 id_dsa.pub
    -rw-r--r--   1 matthieu  staff  171B 22 mai 10:00 known_hosts
</code></pre>

<p>I also ran ssh in verbose mode (ssh -vvv localhost) which gives :</p>

<pre><code>OpenSSH_6.9p1, LibreSSL 2.1.8
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 21: Applying options for *
debug2: ssh_connect: needpriv 0
debug1: Connecting to localhost [::1] port 22.
debug1: Connection established.
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_rsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_rsa-cert type -1
debug1: identity file /Users/matthieu/.ssh/id_dsa type 2
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_dsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_ecdsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_ecdsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_ed25519 type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_ed25519-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.9
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.9
debug1: match: OpenSSH_6.9 pat OpenSSH* compat 0x04000000
debug2: fd 5 setting O_NONBLOCK
debug1: Authenticating to localhost:22 as 'matthieu'
debug3: hostkeys_foreach: reading file ""/Users/matthieu/.ssh/known_hosts""
debug3: record_hostkey: found key type ECDSA in file /Users/matthieu/.ssh/known_hosts:1
debug3: load_hostkeys: loaded 1 keys from localhost
debug3: order_hostkeyalgs: prefer hostkeyalgs: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-ed25519,ssh-rsa,ssh-dss
debug2: kex_parse_kexinit: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit: first_kex_follows 0
debug2: kex_parse_kexinit: reserved 0
debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
debug2: kex_parse_kexinit: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ssh-ed25519
debug2: kex_parse_kexinit: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
debug2: kex_parse_kexinit: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
debug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: kex_parse_kexinit: none,zlib@openssh.com
debug2: kex_parse_kexinit: none,zlib@openssh.com
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit: first_kex_follows 0
debug2: kex_parse_kexinit: reserved 0
debug1: kex: server-&gt;client chacha20-poly1305@openssh.com &lt;implicit&gt; none
debug1: kex: client-&gt;server chacha20-poly1305@openssh.com &lt;implicit&gt; none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:A9YQlWJMyCIXIan+dT/wB4qYxQaJP7Z+fovz+88JDEg
debug3: hostkeys_foreach: reading file ""/Users/matthieu/.ssh/known_hosts""
debug3: record_hostkey: found key type ECDSA in file /Users/matthieu/.ssh/known_hosts:1
debug3: load_hostkeys: loaded 1 keys from localhost
debug1: Host 'localhost' is known and matches the ECDSA host key.
debug1: Found key in /Users/matthieu/.ssh/known_hosts:1
debug2: set_newkeys: mode 1
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug2: set_newkeys: mode 0
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug2: service_accept: ssh-userauth
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug2: key: /Users/matthieu/.ssh/id_dsa (0x7fd3f0d13f70),
debug2: key: /Users/matthieu/.ssh/id_rsa (0x0),
debug2: key: /Users/matthieu/.ssh/id_ecdsa (0x0),
debug2: key: /Users/matthieu/.ssh/id_ed25519 (0x0),
debug1: Authentications that can continue: publickey,keyboard-interactive
debug3: start over, passed a different list publickey,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering DSA public key: /Users/matthieu/.ssh/id_dsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug1: Authentications that can continue: publickey,keyboard-interactive
debug1: Trying private key: /Users/matthieu/.ssh/id_rsa
debug3: no such identity: /Users/matthieu/.ssh/id_rsa: No such file or directory
debug1: Trying private key: /Users/matthieu/.ssh/id_ecdsa
debug3: no such identity: /Users/matthieu/.ssh/id_ecdsa: No such file or directory
debug1: Trying private key: /Users/matthieu/.ssh/id_ed25519
debug3: no such identity: /Users/matthieu/.ssh/id_ed25519: No such file or directory
debug2: we did not send a packet, disable method
debug3: authmethod_lookup keyboard-interactive
debug3: remaining preferred: password
debug3: authmethod_is_enabled keyboard-interactive
debug1: Next authentication method: keyboard-interactive
debug2: userauth_kbdint
debug2: we sent a keyboard-interactive packet, wait for reply
debug2: input_userauth_info_req
debug2: input_userauth_info_req: num_prompts 1
Password:
debug1: Authentications that can continue: publickey,keyboard-interactive
debug2: userauth_kbdint
debug2: we sent a keyboard-interactive packet, wait for reply
debug2: input_userauth_info_req
debug2: input_userauth_info_req: num_prompts 1
Password:
debug1: Authentications that can continue: publickey,keyboard-interactive
debug2: userauth_kbdint
debug2: we sent a keyboard-interactive packet, wait for reply
debug2: input_userauth_info_req
debug2: input_userauth_info_req: num_prompts 1
Password:
debug1: Authentications that can continue: publickey,keyboard-interactive
debug2: we did not send a packet, disable method
debug1: No more authentication methods to try.
Permission denied (publickey,keyboard-interactive).
</code></pre>

<p>Having a friend who has got the same laptop as me (last mbp Retina 13""), with whom ssh localhost works fine, I noted that he's got the additional lines at the beginning when executing ssh -vvv localhost :</p>

<pre><code>    OpenSSH_6.9p1, LibreSSL 2.1.8
    debug1: Reading configuration data /etc/ssh/ssh_config
    debug1: /etc/ssh/ssh_config line 21: Applying options for *
    debug1: /etc/ssh/ssh_config line 56: Applying options for *
</code></pre>

<p>For the record, I already checked these pages and tried what's proposed, without success : 
<a href=""https://stackoverflow.com/questions/20617660/ssh-bad-passphrase-after-generation-of-public-key"">SSH: &quot;Bad passphrase&quot; after generation of public key</a>
and 
<a href=""https://stackoverflow.com/questions/15254349/ssh-permission-denied-publickey-keyboard-interactive"">ssh: Permission denied (publickey,keyboard-interactive)</a>
Thanks in advance for any advice, idea or solution</p>
","<p>I had the same problem with a dsa key so instead tried an rsa key and it worked fine. To generate the rsa key, just change the -t flag to '-t rsa'.</p>
","1483","<rsa><public-key><sshd><dsa>","0","0","3","2018-06-30 04:58:12","","0","","-1","","2017-05-23 12:32:36","2016-05-22 17:11:03",""
"37377207","Unable to ssh localhost on Mac OS El Capitan","<p>I am having some troubles while trying to make a ssh localhost connexion. I want to do this without passphrase, so when I created the public key/private key couple, I typed on the return key when asked for the passphrase, as indicated.
When I try the command</p>

<pre><code>    ssh localhost
</code></pre>

<p>I still get asked for a password. So I thought that the problem could come from some parameter avoiding public keys without passphrase and I created a new publickey/privatekey couple with a passphrase. But still, I get the following message :</p>

<pre><code>    Failing ssh to localhost : Permission denied (publickey,keyboard-interactive).
</code></pre>

<p>For information, I created the key couple with the command :</p>

<pre><code>    ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa
</code></pre>

<p>After having done some researches, I've read that wrong permissions can cause problems, so here is the result of the command ls -lha ~/.ssh/ :</p>

<pre><code>    drwx------   7 matthieu  staff  238B 22 mai 17:50 .
    drwxr-xr-x+ 35 matthieu  staff  1,2K 22 mai 17:52 ..
    -rw-r--r--   1 matthieu  staff  612B 22 mai 17:50 authorized_keys
    -rw-------   1 matthieu  staff  672B 22 mai 17:49 id_dsa
    -rw-r--r--   1 matthieu  staff  612B 22 mai 17:49 id_dsa.pub
    -rw-r--r--   1 matthieu  staff  171B 22 mai 10:00 known_hosts
</code></pre>

<p>I also ran ssh in verbose mode (ssh -vvv localhost) which gives :</p>

<pre><code>OpenSSH_6.9p1, LibreSSL 2.1.8
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 21: Applying options for *
debug2: ssh_connect: needpriv 0
debug1: Connecting to localhost [::1] port 22.
debug1: Connection established.
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_rsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_rsa-cert type -1
debug1: identity file /Users/matthieu/.ssh/id_dsa type 2
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_dsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_ecdsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_ecdsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_ed25519 type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/matthieu/.ssh/id_ed25519-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.9
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.9
debug1: match: OpenSSH_6.9 pat OpenSSH* compat 0x04000000
debug2: fd 5 setting O_NONBLOCK
debug1: Authenticating to localhost:22 as 'matthieu'
debug3: hostkeys_foreach: reading file ""/Users/matthieu/.ssh/known_hosts""
debug3: record_hostkey: found key type ECDSA in file /Users/matthieu/.ssh/known_hosts:1
debug3: load_hostkeys: loaded 1 keys from localhost
debug3: order_hostkeyalgs: prefer hostkeyalgs: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-ed25519,ssh-rsa,ssh-dss
debug2: kex_parse_kexinit: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1,hmac-md5-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit: first_kex_follows 0
debug2: kex_parse_kexinit: reserved 0
debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
debug2: kex_parse_kexinit: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ssh-ed25519
debug2: kex_parse_kexinit: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
debug2: kex_parse_kexinit: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
debug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: kex_parse_kexinit: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: kex_parse_kexinit: none,zlib@openssh.com
debug2: kex_parse_kexinit: none,zlib@openssh.com
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit:
debug2: kex_parse_kexinit: first_kex_follows 0
debug2: kex_parse_kexinit: reserved 0
debug1: kex: server-&gt;client chacha20-poly1305@openssh.com &lt;implicit&gt; none
debug1: kex: client-&gt;server chacha20-poly1305@openssh.com &lt;implicit&gt; none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:A9YQlWJMyCIXIan+dT/wB4qYxQaJP7Z+fovz+88JDEg
debug3: hostkeys_foreach: reading file ""/Users/matthieu/.ssh/known_hosts""
debug3: record_hostkey: found key type ECDSA in file /Users/matthieu/.ssh/known_hosts:1
debug3: load_hostkeys: loaded 1 keys from localhost
debug1: Host 'localhost' is known and matches the ECDSA host key.
debug1: Found key in /Users/matthieu/.ssh/known_hosts:1
debug2: set_newkeys: mode 1
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug2: set_newkeys: mode 0
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug2: service_accept: ssh-userauth
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug2: key: /Users/matthieu/.ssh/id_dsa (0x7fd3f0d13f70),
debug2: key: /Users/matthieu/.ssh/id_rsa (0x0),
debug2: key: /Users/matthieu/.ssh/id_ecdsa (0x0),
debug2: key: /Users/matthieu/.ssh/id_ed25519 (0x0),
debug1: Authentications that can continue: publickey,keyboard-interactive
debug3: start over, passed a different list publickey,keyboard-interactive
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering DSA public key: /Users/matthieu/.ssh/id_dsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug1: Authentications that can continue: publickey,keyboard-interactive
debug1: Trying private key: /Users/matthieu/.ssh/id_rsa
debug3: no such identity: /Users/matthieu/.ssh/id_rsa: No such file or directory
debug1: Trying private key: /Users/matthieu/.ssh/id_ecdsa
debug3: no such identity: /Users/matthieu/.ssh/id_ecdsa: No such file or directory
debug1: Trying private key: /Users/matthieu/.ssh/id_ed25519
debug3: no such identity: /Users/matthieu/.ssh/id_ed25519: No such file or directory
debug2: we did not send a packet, disable method
debug3: authmethod_lookup keyboard-interactive
debug3: remaining preferred: password
debug3: authmethod_is_enabled keyboard-interactive
debug1: Next authentication method: keyboard-interactive
debug2: userauth_kbdint
debug2: we sent a keyboard-interactive packet, wait for reply
debug2: input_userauth_info_req
debug2: input_userauth_info_req: num_prompts 1
Password:
debug1: Authentications that can continue: publickey,keyboard-interactive
debug2: userauth_kbdint
debug2: we sent a keyboard-interactive packet, wait for reply
debug2: input_userauth_info_req
debug2: input_userauth_info_req: num_prompts 1
Password:
debug1: Authentications that can continue: publickey,keyboard-interactive
debug2: userauth_kbdint
debug2: we sent a keyboard-interactive packet, wait for reply
debug2: input_userauth_info_req
debug2: input_userauth_info_req: num_prompts 1
Password:
debug1: Authentications that can continue: publickey,keyboard-interactive
debug2: we did not send a packet, disable method
debug1: No more authentication methods to try.
Permission denied (publickey,keyboard-interactive).
</code></pre>

<p>Having a friend who has got the same laptop as me (last mbp Retina 13""), with whom ssh localhost works fine, I noted that he's got the additional lines at the beginning when executing ssh -vvv localhost :</p>

<pre><code>    OpenSSH_6.9p1, LibreSSL 2.1.8
    debug1: Reading configuration data /etc/ssh/ssh_config
    debug1: /etc/ssh/ssh_config line 21: Applying options for *
    debug1: /etc/ssh/ssh_config line 56: Applying options for *
</code></pre>

<p>For the record, I already checked these pages and tried what's proposed, without success : 
<a href=""https://stackoverflow.com/questions/20617660/ssh-bad-passphrase-after-generation-of-public-key"">SSH: &quot;Bad passphrase&quot; after generation of public key</a>
and 
<a href=""https://stackoverflow.com/questions/15254349/ssh-permission-denied-publickey-keyboard-interactive"">ssh: Permission denied (publickey,keyboard-interactive)</a>
Thanks in advance for any advice, idea or solution</p>
","<p>You may try to use specific key for authorization:</p>

<pre><code>ssh localhost -i ~/.ssh/id_dsa
</code></pre>

<p>If succeed, then you can add it to ssh config file at ~/.ssh/config. 
If such a file is not existed, just create on via touch or vi.</p>

<p>The config should be something like below, please revise it accordingly:</p>

<pre><code>Host localhost
    HostName 127.0.0.1
    Port 22
    user matthieu
    IdentityFile  ~/.ssh/id_dsa
</code></pre>

<p>Good luck! </p>
","1483","<rsa><public-key><sshd><dsa>","0","1","3","2018-06-30 04:58:12","","0","","-1","","2017-05-23 12:32:36","2016-05-22 17:11:03",""
"17776186","X.509 Self Signed Certificates","<p>I'm trying to understand more about X.509 Digital Certificates.  There seems to be lots of contradiction around.  I am using <code>Bouncy Castle</code> to generate a key pair, using</p>

<pre class=""lang-cs prettyprint-override""><code>public static void SaveToFile(X509Certificate newCert, AsymmetricCipherKeyPair kp, string filePath, string certAlias, string password)
{
    var newStore = new Pkcs12Store();
    var certEntry = new X509CertificateEntry(newCert);
    newStore.SetCertificateEntry(certAlias, certEntry);
    newStore.SetKeyEntry(certAlias, 
          new AsymmetricKeyEntry(kp.Private), new[] { certEntry });

    using (var certFile = File.Create(filePath))
        newStore.Save(certFile, password.ToCharArray(), new SecureRandom(new CryptoApiRandomGenerator()));
}
</code></pre>

<p>This saves the generated certificate to disk. Some articles tell us there is no need to password protect the certificate as there is no <code>PRIVATE KEY</code> stored in there. Then <a href=""https://stackoverflow.com/questions/5829812/x509-certificate-multi-passwords"">this article</a> says the certificate does indeed contain the <code>PRIVATE KEY</code>.</p>

<p>I guess I have two questions that will hopefully help me understand this:</p>

<ol>
<li>If I generate my keys in this way, should the password be the SAME as the passphrase for the <code>PRIVATE KEY</code>?</li>
<li>Do I distribute the X.509 certificate to prove the <code>PUBLIC KEY</code> is mine (being paired to my name in the certificate) or should the certificate be kept as safe and secret as the <code>PRIVATE KEY</code> and what use is a self-signed certificate?</li>
</ol>
","<p>Certificate is actually the block of information which binds your identity (i.e. your name, email, whatever else) to some public key. It is public so everyone can know that this key belongs to you.
So when you will sign something they will know that actually you signed this. 
The other thing is validating certificate - that's for what trusted root certificates are used.</p>

<p>Private key is your own secret information, and MUST be kept secret.</p>
","1463","<private-key><pki><public-key><x509>","0","0","2","2015-12-15 02:12:34","17818214","0","1","-1","","2017-05-23 10:31:25","2013-07-21 19:45:55",""
"17776186","X.509 Self Signed Certificates","<p>I'm trying to understand more about X.509 Digital Certificates.  There seems to be lots of contradiction around.  I am using <code>Bouncy Castle</code> to generate a key pair, using</p>

<pre class=""lang-cs prettyprint-override""><code>public static void SaveToFile(X509Certificate newCert, AsymmetricCipherKeyPair kp, string filePath, string certAlias, string password)
{
    var newStore = new Pkcs12Store();
    var certEntry = new X509CertificateEntry(newCert);
    newStore.SetCertificateEntry(certAlias, certEntry);
    newStore.SetKeyEntry(certAlias, 
          new AsymmetricKeyEntry(kp.Private), new[] { certEntry });

    using (var certFile = File.Create(filePath))
        newStore.Save(certFile, password.ToCharArray(), new SecureRandom(new CryptoApiRandomGenerator()));
}
</code></pre>

<p>This saves the generated certificate to disk. Some articles tell us there is no need to password protect the certificate as there is no <code>PRIVATE KEY</code> stored in there. Then <a href=""https://stackoverflow.com/questions/5829812/x509-certificate-multi-passwords"">this article</a> says the certificate does indeed contain the <code>PRIVATE KEY</code>.</p>

<p>I guess I have two questions that will hopefully help me understand this:</p>

<ol>
<li>If I generate my keys in this way, should the password be the SAME as the passphrase for the <code>PRIVATE KEY</code>?</li>
<li>Do I distribute the X.509 certificate to prove the <code>PUBLIC KEY</code> is mine (being paired to my name in the certificate) or should the certificate be kept as safe and secret as the <code>PRIVATE KEY</code> and what use is a self-signed certificate?</li>
</ol>
","<p>A PKCS#12 file can contain <strong><em>both</em></strong> the certificate and the private key.  They are, however, stored as separate, distinct objects.  The certificate itself has the <em>public key</em> embedded within it.  Since the certificate only contains the public key, it is considered ""public"" as well.  You can feel free to distribute the certificate, as it does not contain the <strong><em>private key</em></strong>, which should be kept confidential.  This is the basis of the security in asymmetric cryptography.</p>

<p>Because a PKCS#12 file contains <strong><em>both</em></strong> items, it is encrypted with a password to protect the private key within it.  That said, you would <em>use</em> the private key to prove that the <em>certificate</em> you distribute belongs to you.  For example, through the use of a digital signature on a document.</p>

<p>Hope that helps!</p>
","1463","<private-key><pki><public-key><x509>","0","1","2","2015-12-15 02:12:34","17818214","0","1","-1","","2017-05-23 10:31:25","2013-07-21 19:45:55",""
"36024102","Script to generate unique token","<p>I need generate a public key and secret key.</p>

<p>Is the following code would be enough?</p>

<pre><code>&lt;?php

function genToken($salt) {
    $secret = openssl_random_pseudo_bytes(16);

    $apiKey = hash_hmac('sha256', $salt, $secret);
    $apiKey = base64_encode($apiKey);
    $apiKey = str_replace('=', '', $apiKey);

    return $apiKey;
}

$salt = 'UsernameEmail@gmail.com';
echo 'pk_' . genToken($salt);
echo ""\n"";
echo 'sk_' . genToken($salt);
echo ""\n"";
</code></pre>
","<p>Do not use as salt the user email because it can be guessed.Instead of doing it yourself with a risk of error use a library instead.</p>

<p>I suggest you to use this PHP library <a href=""https://github.com/IcyApril/CryptoLib"" rel=""nofollow noreferrer"">https://github.com/IcyApril/CryptoLib</a> (like proposed in this post :<a href=""https://stackoverflow.com/questions/18830839/generating-cryptographically-secure-tokens"">Generating cryptographically secure tokens</a>). This library enables you to generate a random string then to hash it using a salt by exposing very practical methods : </p>

<p>This example (provided by the documentation that you can find here : <a href=""https://cryptolib.ju.je/#intro"" rel=""nofollow noreferrer"">https://cryptolib.ju.je/#intro</a>) generate a salt to hash a token, that you can provide to your user as a key :</p>

<pre><code>&lt;?php
// Require the library
require_once('path/to/cryptolib.php');
// Generate a token of 16 char with the library by calling the randomString method.
$token = CryptoLib::randomString(16);
// Generate a salt with the library by calling the generateSalt method
$salt = CryptoLib::generateSalt();
// Hash the token with the salt that was generated
$hash = CryptoLib::hash($token, $salt);

// Salt and hash are then stored in the database.

// $hash and $salt are gotten later from the database, and the token is provided via a POST variable by the user
$isHashCorrect = CryptoLib::validateHash($hash, $_POST['token']);

// If isHashCorrect is true, the user has provided the correct token.
?&gt;
</code></pre>

<p>I hope it will help you.</p>
","1419","<php><security><token><private-key><public-key>","1","1","1","2016-03-16 00:01:58","","5","1","2109568","","2016-03-15 23:31:23","2016-03-15 23:20:26",""
"46590922","github account SSH key not working","<p>I have a <code>id_keynamex</code>associated with my github account which was added from my local <code>~/.ssh/</code> to <code>https://github.com/settings/keys</code>. This key has no password and is tied to my account as a whole.</p>

<p>I have tracked my project to a repository in my account: <code>origin    git@github.com:MyUser/projectX.git</code>, however whenever I try to commit <code>git push origin master</code> I am requested to type a password for another key in my ssh folder:</p>

<p><code>Enter passphrase for key '/Users/myUser/.ssh/id_rsa':</code></p>

<p>If I already have a generic key for my entire github account, why is git asking me to refer to <code>/Users/myUser/.ssh/id_rsa</code>  instead of <code>/Users/myUser/.ssh/id_keynamex</code>?</p>

<p>EDITED:</p>

<p>I have added the following to the .ssh/config file:</p>

<pre><code>Host github.com
    User           git
    Hostname github.com
    IdentityFile   ~/.ssh/id_keynamex

Host github.com
  Hostname ssh.github.com
  IdentityFile   ~/.ssh/id_keynamex
  Port 443
</code></pre>

<p>However, I am still getting the following issue:</p>

<pre><code>ssh_exchange_identification: Connection closed by remote host
fatal: Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
</code></pre>
","<p>I removed the following from my config file:</p>

<pre><code>Host github.com
  Hostname ssh.github.com
  IdentityFile   ~/.ssh/id_keynamex
  Port 443
</code></pre>

<p>So that I only have one instance of this host and now it appears to work.</p>
","1389","<github><ssh><public-key>","0","0","1","2017-10-05 18:34:35","","3","","590475","","2017-10-05 18:27:36","2017-10-05 16:48:06",""
"51057611","How to use sshkey with subprocess","<p>I'm trying to connect to a router over ssh and write a command to the shell.
I think the connection works, because I get an empty output and not an error message. I know that I have to use a keyfile to connect really on the device. Maybe that's the reason why the output is empty.</p>

<p><strong>This is my code:</strong></p>

<pre><code>mykey = os.path.expanduser('C:\\Users\\taaiaal1\\PycharmProjects\\hal_dmms_application\\dev_ssh')
command = 'pcb_cli -u cwmpd pcb://ipc:[/var/run/IGD] -i \'?\''

ssh = subprocess.Popen([""ssh"", username + '@' + host + ':' + port, command],
                       shell=True,
                       stdout=subprocess.PIPE,
                       stderr=subprocess.PIPE)
result = ssh.stdout.readlines()
print(result)
</code></pre>

<p>Where should I integrate the keyfile?</p>

<p>I feel like checked every page google let me find and even in the subprocess python doc I couldn't find anything. Is this even possible? I'm using Python 3. </p>
","<p>Use the -i flag to specify an identity file. See the <a href=""https://linux.die.net/man/1/ssh"" rel=""nofollow noreferrer"">ssh manual under identity_file</a> </p>

<p>In your example, that would be</p>

<pre><code>ssh = subprocess.Popen([""ssh"",""-i ""+mykey, username + '@' + host + ':' + port, command],
                   shell=True,
                   stdout=subprocess.PIPE,
                   stderr=subprocess.PIPE)
</code></pre>

<p>There are also high level SSH libraries available for Python.</p>
","1386","<python><ssh><subprocess><public-key>","0","0","3","2018-07-02 09:43:49","51058019","1","","","","","2018-06-27 08:04:27",""
"51057611","How to use sshkey with subprocess","<p>I'm trying to connect to a router over ssh and write a command to the shell.
I think the connection works, because I get an empty output and not an error message. I know that I have to use a keyfile to connect really on the device. Maybe that's the reason why the output is empty.</p>

<p><strong>This is my code:</strong></p>

<pre><code>mykey = os.path.expanduser('C:\\Users\\taaiaal1\\PycharmProjects\\hal_dmms_application\\dev_ssh')
command = 'pcb_cli -u cwmpd pcb://ipc:[/var/run/IGD] -i \'?\''

ssh = subprocess.Popen([""ssh"", username + '@' + host + ':' + port, command],
                       shell=True,
                       stdout=subprocess.PIPE,
                       stderr=subprocess.PIPE)
result = ssh.stdout.readlines()
print(result)
</code></pre>

<p>Where should I integrate the keyfile?</p>

<p>I feel like checked every page google let me find and even in the subprocess python doc I couldn't find anything. Is this even possible? I'm using Python 3. </p>
","<p>Try:</p>

<pre><code>ssh = subprocess.Popen([""ssh"", ""-i"", ""/path/to/key"", username + '@' + host + ':' + port, command],
                       shell=True,
                       stdout=subprocess.PIPE,
                       stderr=subprocess.PIPE)
</code></pre>

<p>Popen expects an array of arguments formatted in a certain way.
The easiest way to get a proper arg table is to do it like this:</p>

<pre><code>command = ""ssh -i my.key user@host""
args = command.split(' ')
ssh = subprocess.Popen(args)
</code></pre>
","1386","<python><ssh><subprocess><public-key>","0","0","3","2018-07-02 09:43:49","51058019","1","","","","","2018-06-27 08:04:27",""
"51057611","How to use sshkey with subprocess","<p>I'm trying to connect to a router over ssh and write a command to the shell.
I think the connection works, because I get an empty output and not an error message. I know that I have to use a keyfile to connect really on the device. Maybe that's the reason why the output is empty.</p>

<p><strong>This is my code:</strong></p>

<pre><code>mykey = os.path.expanduser('C:\\Users\\taaiaal1\\PycharmProjects\\hal_dmms_application\\dev_ssh')
command = 'pcb_cli -u cwmpd pcb://ipc:[/var/run/IGD] -i \'?\''

ssh = subprocess.Popen([""ssh"", username + '@' + host + ':' + port, command],
                       shell=True,
                       stdout=subprocess.PIPE,
                       stderr=subprocess.PIPE)
result = ssh.stdout.readlines()
print(result)
</code></pre>

<p>Where should I integrate the keyfile?</p>

<p>I feel like checked every page google let me find and even in the subprocess python doc I couldn't find anything. Is this even possible? I'm using Python 3. </p>
","<p>Some pointers:</p>

<ul>
<li>First of all <strong>port</strong> is not given after <code>:</code>, It it given with <code>-p</code> option</li>
<li>If key is required then you have to specify it using <code>-i</code> option. Make sure permissions on the key are <code>0400</code>.</li>
<li><p>You are giving remote command as a list and also giving <code>shell=True</code> these are in a way mutually exclusive options. If you want use shell=True then you give command as a single string.</p></li>
<li><p>If want to collect output of a remote command simply use <a href=""https://docs.python.org/3/library/subprocess.html#subprocess.check_output"" rel=""nofollow noreferrer"">subprocess.check_output</a>. It uses popen() function inernally but gives you simpler interface. Don't forget try/except around the function as it raises exception if something went wrong with ssh itself or the remote command's exit status is non-zero.</p></li>
</ul>

<p>Your code may look like:</p>

<pre><code>try:
    out = subprocess.check_ouptput([""ssh"", ""-i"", ""&lt;path to your key&gt;"", ""-p"", ""&lt;port number&gt;"", ""{}@{}"".format(user, host), command])
    print(out)
except CalledProcessError as e:
...
</code></pre>

<p>Look at my <a href=""https://github.com/rsjethani/remote-exec/blob/master/remote-exec.py"" rel=""nofollow noreferrer"">implementation</a> of executing remote commands if you want to see some of the good practices for executing remote commands.</p>

<p><strong>PS:</strong> There are two different ways of using subprocess functions: one which require a shell to execute your command for eg if the remote command has a wildcard(ls *.txt) OR your remote command does not require the shell for eg executing <code>uname -a</code>. Please look at the subprocess documentation link above.</p>
","1386","<python><ssh><subprocess><public-key>","0","2","3","2018-07-02 09:43:49","51058019","1","","","","","2018-06-27 08:04:27",""
"22196386","InvalidKeySpecException when using RSAPublicKeySpec","<p>I'm trying to instantiate a <code>java.security.PublicKey</code> by using <code>java.security.spec.RSAPublicKeySpec</code> and <code>java.security.KeyFactory</code>.</p>

<p>But when running the following lines:</p>

<pre><code>RSAPublicKeySpec publicKeySpec = new RSAPublicKeySpec(modulus, publicExponent);
return KeyFactory.getInstance(""RSA"").generatePublic(publicKeySpec);
</code></pre>

<p>I always get an exception from <code>org.bouncycastle</code> package.</p>

<pre><code>java.security.spec.InvalidKeySpecException: key spec not recognised 
at org.bouncycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi.engineGeneratePublic(Unknown Source) 
at org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi.engineGeneratePublic(Unknown Source) 
at java.security.KeyFactory.generatePublic(KeyFactory.java:315)
... (25 more)
</code></pre>

<p>This confuses me since the RSAPublicKeySpec should have any relation to Bouncy Castle crypto library? Can somebody please tell me whats wrong with my code?</p>
","<p>In the JDK documentation for instantiating the <code>KeyFactory</code></p>

<blockquote>
  <p>When you call the <code>KeyFactory.getInstance(String algorithm)</code>. This method
  traverses the list of registered security Providers, starting with the
  most preferred Provider. A new KeyFactory object encapsulating the
  KeyFactorySpi implementation from the first Provider that supports the
  specified algorithm is returned.</p>
</blockquote>

<p>It seems like that in your environment, the <code>bouncy castle crypto</code> is the most preferred provider.</p>

<p>I am not aware of any default <code>Service Provider Interface</code> for <code>KeyFactory</code> in JDK. Although there are many open source implementations available, few of them are <a href=""http://www.opensource.apple.com/source/gcc/gcc-5026/libjava/gnu/java/security/provider/RSAKeyFactory.java"" rel=""nofollow"">RSAKeyFactory</a> &amp; <a href=""http://www.opensource.apple.com/source/gcc/gcc-5026/libjava/gnu/java/security/provider/DSAKeyFactory.java"" rel=""nofollow"">DSAKeyFactory</a></p>

<p>Hey Just found this, there are many default implementations also available in JDK. <a href=""http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html"" rel=""nofollow"">look at this page for JCA</a></p>
","1379","<java><security><rsa><bouncycastle><public-key>","0","0","1","2014-03-05 16:41:40","22203026","2","","1037200","","2014-03-05 16:05:30","2014-03-05 11:27:15",""
"16102529","The key container name 'bsn' does not exist","<p>I'm trying to run the project of bsn-goldparser (<a href=""https://code.google.com/p/bsn-goldparser/"" rel=""nofollow"">https://code.google.com/p/bsn-goldparser/</a>) and I have the next trouble:
Visual Studio shows me the next message : ""Error   2   Cryptographic failure while signing assembly...The key container name 'bsn' does not exist..."" .After hours searching, I have tryed the next:  I have edited all projects files and  I have removed the line bsn. But now, the error is it doesn't found libraries that are already added.  I need know more, but i don't known where I can read about this.
Thanks.</p>
","<p>The answer to this question is here: </p>

<p><a href=""https://stackoverflow.com/questions/6993835/removing-strongly-signed-from-assembly"">removing strongly signed from assembly</a>. </p>

<p>Besides, I have compiled the projects with framework 4.0, because they had been compiled with framework 3.5 client profile.</p>
","1378","<c#><assemblies><grammar><public-key>","0","0","1","2013-04-22 08:06:15","16142196","2","","","","","2013-04-19 10:27:27",""
"21173185","extracting key for authorized_keys key from ssh2 public key in python","<p>I am trying to extract the needed key for the authorized_keys file. It is different than what i get when i open the key file (.pub).  This is my code so far. Whenever I try to run it on a pubfile i get an invalid syntax pointing to SSH2 in the first line of the file. ""---- BEGIN SSH2 PUBLIC KEY ----"" I don't know why this isn't working. Thanks in advance for any help</p>

<pre><code>#!/bin/env python

import fileinput
import subprocess
import sys



def parse_pubkey( pubfile ):
    """"""This routine returns the key-type and key from a public-key file.
    """"""
    try:
        # try to parse the Windows-format file into an OpenSSH-compatible representation
        # by calling the Unix ""ssh-keygen"" utility. This call will fail if the keyfile
        # is already in OpenSSH format
        keystr = subprocess.check_output( 'ssh-keygen -i -f %s 2&gt;/dev/null' % pubfile,    shell=True )

    except subprocess.CalledProcessError:
        # we caught an exception, so the file must already be in OpenSSH format.  Just
        # read in the contents
        keystr = open( pubfile, 'r' ).read()

    # now split the resulting string on whitespace and return the first two fields
    return keystr.split()[0:2]


parse_pubkey(pubfilename.pub)
</code></pre>
","<p>Here's my rewrite of your code, sans comments:</p>

<pre><code>#!/usr/bin/env python

import subprocess
import sys

def parse_pubkey(pubfile):
    """"""Return the key-type and key from a public-key file.
    """"""
    try:
        keystr = subprocess.check_output(
            'ssh-keygen -i -f %s 2&gt;/dev/null' % pubfile,
            shell=True)
    except subprocess.CalledProcessError:
        with open(pubfile) as f:
            keystr = f.read()
    return keystr.split()[0:2]

if __name__ == '__main__':
    pubfilename = sys.argv[1]
    print parse_pubkey(pubfilename)
</code></pre>

<p>Assuming the module was named <code>parsepub.py</code>, it would be executed thus:</p>

<blockquote>
  <p><code>$ python parsepub.py id_rsa.pub</code></p>
</blockquote>
","1376","<python><public-key-encryption><public-key><authorized-keys>","0","1","1","2014-01-17 02:33:19","","3","","","user3204233","2014-01-16 22:34:58","2014-01-16 21:24:25",""
"19496950","Restore passphrase rsa/dsa keys","<p>I've installed new Ubuntu from scratch on my new machine and want to have an access to the remote host using <code>ssh</code>. The problem is that even if I have both public and private keys I forgot the passphrase used whilst creating keys because right after that I've passed it to <code>ssh-agent</code>. But I still have it (the <code>passphrase</code>) stored in the <code>ssh-agent</code> in my laptop. How can I restore the passphrase from <code>ssh-agent</code> if I have <code>root</code> access and both keys?</p>
","<p>As far as I understand it, the passphrase is used to encrypt the private key. ssh-agent doesn't remember the passphrase - it remembers the decrypted private key.</p>

<p>And, as a damienfrancois mentioned, it shouldn't remember it past a reboot.</p>

<p>If you wished to extract the decrypted private keys from <code>ssh-agent</code> itself, you would have to find a tool written to search the memory of the running process and locate keys. One such tool can be found <a href=""http://www.hsc.fr/ressources/breves/passe-partout.html.en"" rel=""nofollow"" title=""in-memory extraction of private keys"">here</a>, but you may well find it very challenging to use.</p>

<p>For a more practical answer, you can just delete your keys from <code>~/.ssh/id*</code>, make new ones that you know the passphrase for, and move on - for a new machine, you probably haven't gotten too reliant on them yet.</p>
","1361","<ssh><rsa><private-key><public-key><passphrase>","0","1","1","2013-10-21 16:53:22","19500361","3","","","","","2013-10-21 14:14:54",""
"17237028","public key not valid php rsa","<p>I tried this simple code :</p>

<pre><code>&lt;?php

$publicKey = openssl_pkey_get_public(""public.pem"");
$plaintext = ""String to encrypt"";

openssl_public_encrypt($plaintext, $encrypted, $publicKey);

echo $encrypted;   //encrypted string

?&gt;
</code></pre>

<p>but I get this error message.</p>

<blockquote>
  <p>Warning: openssl_public_encrypt(): key parameter is not a valid public key in C:\xampp\htdocs\encrypt\encrypt_rsa.php on line 6</p>
</blockquote>
","","1357","<php><encryption><openssl><rsa><public-key>","1","","0","2013-12-30 05:53:31","","4","1","598500","","2013-06-21 14:02:55","2013-06-21 13:51:47",""
"38159990","Generate CSR from private key or Key Store","<p>How can i generate CSR from the Key Store.</p>

<p>I have generated CSR from key pair. Below is my code.</p>

<pre><code>public static PKCS10CertificationRequest generateCSR(KeyPair keyPair, String cn) throws IOException,
        OperatorCreationException {
    String principal = String.format(CN_PATTERN, cn);

    ContentSigner signer = new JCESigner (keyPair.getPrivate(),DEFAULT_SIGNATURE_ALGORITHM);

    PKCS10CertificationRequestBuilder csrBuilder = new JcaPKCS10CertificationRequestBuilder(
            new X500Name(principal), keyPair.getPublic());
    ExtensionsGenerator extensionsGenerator = new ExtensionsGenerator();
    extensionsGenerator.addExtension(Extension.basicConstraints, true, new BasicConstraints(
            true));
    csrBuilder.addAttribute(PKCSObjectIdentifiers.pkcs_9_at_extensionRequest,
            extensionsGenerator.generate());
    Log.e(""csr builder "",""csr ""+csrBuilder.toString());
    PKCS10CertificationRequest csr = csrBuilder.build(signer);

    return csr;
}
</code></pre>

<p>But i cannot generate CSR from Keystore(Private Key).
Is there any way i can generate key pair from Keystore?</p>

<p>Please help me.Thanks in Advance.</p>
","<p>Your code is compatible with Android KeyStore. You just need to generate the <code>KeyPair</code> into the <code>Keystore</code></p>

<p>The KeyStore is available from Android 4.3 (API level 18). There are slight differences between versions</p>

<p><strong>Android >=18 &lt; 23</strong></p>

<pre><code>KeyPairGeneratorSpec spec = new KeyPairGeneratorSpec.Builder(context)
                .setAlias(alias)
                .setSubject(new X500Principal(""CN="" + alias + "", O=Android Authority""))
                .setSerialNumber(BigInteger.ONE)
                .setStartDate(start.getTime())
                .setEndDate(end.getTime())
                .build();

KeyPairGenerator kpg = KeyPairGenerator.getInstance(
                KeyProperties.KEY_ALGORITHM_RSA, ""AndroidKeyStore"");

kpg.initialize(spec);
KeyPair keyPair = kpg.generateKeyPair();
</code></pre>

<p><strong>Android >=23</strong></p>

<pre><code>KeyPairGenerator kpg = KeyPairGenerator.getInstance(
                KeyProperties.KEY_ALGORITHM_RSA, ""AndroidKeyStore"");


kpg.initialize(new KeyGenParameterSpec.Builder(
                alias,
                KeyProperties.PURPOSE_SIGN | KeyProperties.PURPOSE_VERIFY)
                .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512)
                .setSignaturePaddings(KeyProperties.SIGNATURE_PADDING_RSA_PKCS1)
                .build());

KeyPair keyPair = kpg.generateKeyPair();
</code></pre>
","1347","<android><keystore><private-key><public-key><csr>","3","2","2","2016-07-13 00:45:41","38210193","0","","","","","2016-07-02 12:08:31",""
"38159990","Generate CSR from private key or Key Store","<p>How can i generate CSR from the Key Store.</p>

<p>I have generated CSR from key pair. Below is my code.</p>

<pre><code>public static PKCS10CertificationRequest generateCSR(KeyPair keyPair, String cn) throws IOException,
        OperatorCreationException {
    String principal = String.format(CN_PATTERN, cn);

    ContentSigner signer = new JCESigner (keyPair.getPrivate(),DEFAULT_SIGNATURE_ALGORITHM);

    PKCS10CertificationRequestBuilder csrBuilder = new JcaPKCS10CertificationRequestBuilder(
            new X500Name(principal), keyPair.getPublic());
    ExtensionsGenerator extensionsGenerator = new ExtensionsGenerator();
    extensionsGenerator.addExtension(Extension.basicConstraints, true, new BasicConstraints(
            true));
    csrBuilder.addAttribute(PKCSObjectIdentifiers.pkcs_9_at_extensionRequest,
            extensionsGenerator.generate());
    Log.e(""csr builder "",""csr ""+csrBuilder.toString());
    PKCS10CertificationRequest csr = csrBuilder.build(signer);

    return csr;
}
</code></pre>

<p>But i cannot generate CSR from Keystore(Private Key).
Is there any way i can generate key pair from Keystore?</p>

<p>Please help me.Thanks in Advance.</p>
","<p>I presume you're talking about <code>java.security.KeyStore</code>. This abstraction requires that each stored <code>PrivateKey</code> has a corresponding chain of <code>Certificate</code> instances (one or more certificate). This means you should be able to create a <code>KeyPair</code> from a private key entry of <code>KeyStore</code>. For example, if the private key is stored under ""test"":</p>

<pre><code>String alias = ""test"";
KeyStore keyStore = KeyStore.getInstance(...);
keyStore.load(...;);
PrivateKey privateKey = (PrivateKey) keyStore.getKey(alias, null);
PublicKey publicKey = keyStore.getCertificate(alias).getPublicKey();
KeyPair keyPair = new KeyPair(publicKey, privateKey);
generateCsr(keyPair, ...);
</code></pre>
","1347","<android><keystore><private-key><public-key><csr>","3","0","2","2016-07-13 00:45:41","38210193","0","","","","","2016-07-02 12:08:31",""
"27083356","How to get Steam public key?","<p>For this method:</p>

<blockquote>
  <p>ISteamUserAuth</p>
  
  <p>AuthenticateUser</p>
  
  <p>Version: 1</p>
  
  <p>HTTP Method: POST</p>
  
  <p>Parameters:</p>
  
  <p>Name: steamid</p>
  
  <p>Type: uint64</p>
  
  <p>Optional:</p>
  
  <p>Description: Should be the users steamid, unencrypted.</p>
  
  <p>Parameters:</p>
  
  <p>Name: sessionkey</p>
  
  <p>Type: rawbinary</p>
  
  <p>Optional:</p>
  
  <p>Description: Should be a 32 byte random blob of data, which is then
  encrypted with RSA using the Steam system's public key. Randomness is
  important here for security.</p>
  
  <p>Parameters:</p>
  
  <p>Name: encrypted_loginkey</p>
  
  <p>Type: rawbinary</p>
  
  <p>Optional:</p>
  
  <p>Description: Should be the users hashed loginkey, AES encrypted with
  the sessionkey.</p>
</blockquote>

<p>I need 3 parameters. For the second parameter <code>sessionkey</code>, I need to encrypt it using the Steam system's public key. How exactly do I get that?</p>

<p>After some research I figured out that I have to get a public key by using a certificate, and it should look like <a href=""https://github.com/seishun/node-steam/blob/master/lib/public.pub"" rel=""nofollow"">this</a>.</p>

<p>I am using php, and thus I am using this code to retrieve a public key from a certificate:</p>

<pre><code>&lt;?php
$pub_key = openssl_pkey_get_public(file_get_contents('./cert.crt'));
$keyData = openssl_pkey_get_details($pub_key);
file_put_contents('./key.pub', $keyData['key']);
?&gt;
</code></pre>

<p>I am confused as to which certificate do I use. Do I use the certificate of the Steam website? (<code>cert.crt</code> would be the certificate)</p>
","<p>I have the same doubt. I'd not tried it yet, but:</p>

<pre><code>curl -X POST ""http://store.steampowered.com/login/getrsakey/"" 
     -d username=""your_username""
</code></pre>

<p>Gives you a RSA key...</p>
","1347","<php><ssl><encryption><public-key><steam-web-api>","0","0","1","2014-12-18 13:02:38","","0","","","","","2014-11-22 22:41:54",""
"33302144","Python Openssl generate rsa key pair and write to a file","<p>I want to generate a private , public key pair and put them into <strong>private.key</strong> and <strong>public.key</strong> files respectively.
I have the following code.</p>

<pre><code>from OpenSSL import crypto, SSL

def gen_rsa_key_pair():
    k = crypto.PKey()
    k.generate_key(crypto.TYPE_RSA, 1024)
    open(""Priv.key"", ""wt"").write(crypto.dump_privatekey(crypto.FILETYPE_PEM, k))
</code></pre>

<p><code>crypto.dump_publickey()</code> is not available.</p>

<p>How do I dump public key to a file?</p>
","<p>The OpenSSL functions to print the public RSA key do not seem to be exported by the Python OpenSSL wrapper. By accessing the internals of the <code>crypto</code> module, you could still do it yourself (assuming that you have this package installed locally), as this code snippet shows:</p>

<pre><code>&gt;&gt;&gt; bio = crypto._new_mem_buf()
&gt;&gt;&gt; rsa = crypto._lib.EVP_PKEY_get1_RSA(k._pkey)
&gt;&gt;&gt; crypto._lib.PEM_write_bio_RSAPublicKey(bio, rsa)
1
&gt;&gt;&gt; s = crypto._bio_to_string(bio)
&gt;&gt;&gt; print(s)
-----BEGIN RSA PUBLIC KEY-----
MIGJAoGBANF1gYh10F8HTQdM6+bkwAwJ0Md6bMciKbP3qS6KTki3v3m+cM17Szqq
Mp4xxWbvnS2oeotYfn8eaZg0QUTOVDd1F7tuOxVEdvQ9ZEp1aeOCRU3b9QZSmVfg
wJrqDG3f149mNdexI12plwaxyt6odonv6+fEQJrbhrV/nIA8N/EFAgMBAAE=
-----END RSA PUBLIC KEY-----
</code></pre>

<p>This is just for illustration purposes. A proper solution should be added to the <code>crypto</code> module itself, via a new method <code>dump_publickey()</code> or the like.</p>
","1340","<python><file><openssl><rsa><public-key>","1","0","1","2015-10-27 15:46:57","","0","","1816580","","2015-10-23 12:44:55","2015-10-23 12:17:12",""
"8564805","C# WinSCP give user option to accept or reject RSA Key","<p>I'm using WinSCP to transfer some files over to another system, but I'm running into some of problems.  Since I was going to use this C# program on various devices the Keys are not the same, so I would like to print out a message box or something similar to the user giving them the option that you would normally see through WinSCP.com:</p>

<pre class=""lang-none prettyprint-override""><code>winscp&gt; (U)pdate,(A)dd,Can(n)cel,(C)opy Key,(S)kip: Cancel
</code></pre>

<p>Right now I'm displaying the options to the user with <code>winscp.StandardOutput.ReadLine()</code> and giving them a choice what the return with <code>winscp.StandardInput.WriteLine([user choice])</code> but this dosn't seem to work.  I keep getting ""Host Key Wasn't Verified!"".  Any suggestions on how to approach this one?  Thanks.</p>

<p>Edit:
I believe this has something to do with WinSCP not waiting for input.  I changed the echo option to 'on' so I could see my response and my response occures after WinSCP has already rejected the connection.  </p>

<p>My options on WinSCP are currently: batch abort, confirm on, echo on.  </p>

<p>So now I guess is there anyway for WinSCP to wait for my commands from the .exe?</p>
","<p>So far I've got it working via a ""psudo"" first connection.  I know it's not very pretty and people will (and probably should) scream at me for doing it this way.  First off I make an attempted connection to the end device,</p>

<pre><code>winscp.StandardInput.WriteLine(open scp://name:pass@xx.xx.xx.xx);
</code></pre>

<p>But that's just to get the key from the end device since I can scan the outputs from winscp and find a message that happens to show that lovely key.  So then, now knowing my device's RSA key I can then prompt the user: 'You're CPU dosn't know this device... Connect anyways?' [yes/no/cancel].  If they say yes then I can explicitly give winscp the hostkey I'm looking for and connect,</p>

<pre><code>winscp.StandardInput.WriteLine(open scp://name:pass@xx.xx.xx.xx -hostkey: *****);
</code></pre>

<p>Like I said it's not the prettiest, and I'd like to do it with a single connection attempt.  But whatever gets the job done right?  I'm still looking into this for a better option.</p>
","1340","<c#><public-key><winscp>","2","2","1","2014-04-23 13:36:22","8578612","0","","850848","","2014-04-23 13:36:22","2011-12-19 17:05:27",""
"16812938","JAVA AES 256 & Public Key Encryption","<p>One of our customers requires us to encrypt a message return from our web service using AES 256 &amp; Public Key Encryption
Server Side (web service) is java based.
Client side could be java or .Net.</p>

<p>I'm not familiar with any of the encryption methodology and could not find any example that will get me started...</p>

<p>Can this even be implemented AES 256 &amp; Public Key Encryption ?</p>

<p>How does it work (Public Key Encryption) ?</p>

<p>Please direct me to an example that will get me started.</p>
","<p><a href=""http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""nofollow"">AES256</a> is a specific <a href=""https://en.wikipedia.org/wiki/Symmetric-key_algorithm"" rel=""nofollow"">symmetric</a> encryption scheme, which requires the communicating parties to have pre-shared an encryption key. <a href=""http://en.wikipedia.org/wiki/Public-key_cryptography"" rel=""nofollow"">Public-key cryptography</a> on the other hand is an asymmetric encryption principle, where each communicating party has a public key shared with every one and a private key which he keeps a secret. A typical example for the latter would be <a href=""http://en.wikipedia.org/wiki/RSA_%28algorithm%29"" rel=""nofollow"">RSA</a>.</p>

<p>Both symmetric and asymmetric encryption have there pros and cons, you should first figure out what you (or your client) want. Then, when implementing any cryptography always be sure to use common libraries and never (ever) try to implement any cryptography algorithms yourself. Small mistakes in these topics often lead to complete insecurity.</p>
","1336","<java><security><encryption><aes><public-key>","0","2","1","2013-05-29 12:03:29","16813379","3","","","","","2013-05-29 11:42:07","2013-05-31 09:27:10"
"7600617","Public key accepted with SSH, fails with git","<p>I am using gitosis for repository management.  I have two other keys that work perfectly.  I've recently added a third key.</p>

<p>All keys work when I SSH into the machine (I get the error mentioned <a href=""http://www.openflow.org/wk/index.php/Git"" rel=""nofollow"">here</a> as normal, and the server's auth.log says ""Found matching RSA key...""). However, when I run the command:</p>

<pre><code>git clone -b &lt;branch&gt; ssh://gitosis@&lt;server&gt;/&lt;project&gt;
</code></pre>

<p>with the new third key the server's auth.log shows ""Failed publickey for gitosis..."".  The same ""git clone"" command works for the other keys.</p>

<p>The permissions on the .ssh files are set correctly since I am able to SSH into the machine.</p>

<p>Both machines are Ubuntu.</p>

<p>What would cause the ""git clone"" to be rejected, while the SSH is accepted?</p>
","<p>That should mean that you have a ssh config file (<code>~/.ssh/config</code>), with:</p>

<ul>
<li>a section <code>Host &lt;server&gt;</code></li>
<li>a different IdentityFile (ie a public key full path) than the one the <code>gitosis</code> user should have</li>
</ul>
","1317","<git><ssh><public-key>","3","0","1","2011-09-29 18:02:28","","2","","","","","2011-09-29 16:46:36",""
"12809456","Cygwin SSH public key auth UNC network path ""not a directory""","<p>I have a unique problem when accessing a Cygwin based SSH Server through public key (rsa) based authentication.</p>

<p>If I login to the server via password auth:</p>

<pre><code>ssh Administrator@domain.com
</code></pre>

<p>I login just fine and can then either execute:</p>

<pre><code>cd //anotherpc/shareName
</code></pre>

<p>or <code>cd /backup/anotherpc</code> where this is a symlink to the aforementioned network share</p>

<p>This is successful and I can access anything on that share without issue.</p>

<p>The problem arises if i do the same thing above just after logging in using a public key authentication mechanism.</p>

<p>The error output is:</p>

<pre><code>cd //anotherpc/shareName
-bash: cd: //anotherpc/shareName: Not a directory
</code></pre>

<p>Update:</p>

<p>The /etc/sshd_config file has the following commands having removed all commented out lines:</p>

<pre><code>Port 22
StrictModes no
AuthorizedKeysFile  .ssh/authorized_keys
UsePrivilegeSeparation yes
Subsystem   sftp    /usr/sbin/sftp-server
</code></pre>

<p>It is extremely strange.  Any help would be hugely appreciated!</p>

<p>Kind Regards</p>
","<p>If you run this command before trying to access a network share, the required authentication token will be created.</p>

<p>net use '\machineName\shareName' /user:""DOMAIN\Username"" password</p>

<p>For full details see:</p>

<p>See <a href=""http://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-setuid-overview"" rel=""nofollow"">http://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-setuid-overview</a></p>
","1314","<ssh><cygwin><rsync><public-key><unc>","1","1","1","2012-10-20 19:50:40","","7","1","1733176","","2012-10-10 14:51:54","2012-10-09 22:43:04",""
"31793241","Transferring public and private key on mac","<p>How do I transfer both private / public keys from one mac to the other?</p>

<p>I know how to export the private key to .p12 with Keychain Access, and then when I double click it in the destination mac, it's added to Keychain Access.
However, when I export the public key to .pem file, double clicking it in the destination mac just spits out:</p>

<p><code>An error has occurred. Unable to import an item. The contents of this item cannot be retrieved.</code></p>

<p>When I tried <a href=""https://stackoverflow.com/questions/8874164/export-public-key-from-keychain-access"">the solution</a> of <code>security import pub.pem -k login.keychain</code>, it said <code>1 key imported.</code>, but it doesn't show on Keychain Access.</p>

<ul>
<li>Am I missing anything?</li>
<li>Should I not bother with transferring the public key?</li>
<li>Is importing just that private key enough?</li>
<li>Is the only way just <a href=""https://stackoverflow.com/questions/16847081/i-lost-my-public-key-can-i-recover-it-from-a-private-key"">recovering the public key from the private key</a>?</li>
</ul>

<p>Thanks</p>
","<p>According to <a href=""https://superuser.com/questions/704692/cant-import-public-key-into-osx-keychain"">this</a>, it looks like when running the <code>security import...</code> command, it's added to the keychain with the generic name <code>Imported Public Key</code>.</p>

<p>Now you just need to rename it to the relevant one (e.g. like the private key name).</p>
","1313","<macos><certificate><keychain><private-key><public-key>","1","0","1","2015-08-03 17:52:09","","0","","-1","","2017-05-23 12:17:16","2015-08-03 17:27:17",""
"33781497","Exposing the Public Certificate via 'jwks_uri'","<p>What I'm trying to do is, running the Conformance Testing for OpenID Connect using the test suite provided is link [1]</p>

<p>The current requirement we have is, exposing the Public Certificate via jwks.json ('jwks_uri').
We followed the 'jwks_uri'[2] of 'Google OAuth2 cert' and designed following jwks.json file to expose the public certificate of our server.</p>

<pre><code>{
 ""keys"": [
  {
   ""kty"": ""RSA"",
   ""alg"": ""RS256"",
   ""use"": ""sig"",
   ""n"": ""94A7FA15D6F59CF3F4E4412880BD3A2EB0CCCE3386AC0768A5B6BD902A8CE78B969516EF35F0CA4E2D922BF0B3274F35A5949BEF680E510007696C409BFB8F058DB05ED21B1E51D3791E9C2F9C7FC35BC65C706BE4E7723A3ABABB84B0AFD591EDB8E0A8920873FC04EB8723EAF9092D31F5E7452E07ACA1894F3C5A09C53B39"",
   ""e"": ""65537""
  }
 ]
}
</code></pre>

<p>To get the modulus and the exponent values for the Public Key, I have followed post [3]. </p>

<p>After doing all these, when running the test suite, the signature validation fails. What I feel is the ""n"" and ""e"" values we have set are not is proper encoding/encryption. Currently they are entered as hexadecimal. But this is not the format in google cert [2].</p>

<p>Do you know,</p>

<ol>
<li>how to get the modulus and the exponent values for a Public Key, in
proper format ?</li>
<li>what is the format of modulus and exponent values, that we need to set in 'jwks_uri' ?</li>
</ol>

<p>[1] <a href=""http://openid.net/certification/testing/"" rel=""nofollow noreferrer"">http://openid.net/certification/testing/</a> 
[2] <a href=""https://www.googleapis.com/oauth2/v2/certs"" rel=""nofollow noreferrer"">https://www.googleapis.com/oauth2/v2/certs</a>
[3] <a href=""https://stackoverflow.com/questions/3116907/rsa-get-exponent-and-modulus-given-a-public-key"">RSA: Get exponent and modulus given a public key</a></p>
","<p>There is node library that will create this for you: <a href=""https://github.com/dannycoates/pem-jwk"" rel=""nofollow noreferrer"">https://github.com/dannycoates/pem-jwk</a>. </p>

<p>If you have your public key, then you can run:</p>

<pre><code>pem-jwk public.pem &gt; public.jwk
</code></pre>
","1311","<openssl><rsa><public-key>","0","0","1","2016-11-15 21:05:14","","1","","-1","","2017-05-23 12:30:23","2015-11-18 13:35:36",""
"26117881","Android-Java RSA decrypt","<p>i need to create a public key for RSA algorithm from a binary string.</p>

<p>My code is:</p>

<pre><code>String pubKey = ""tihq/Gk3OUs5NzP+XTRKXBwSxHtB0TWn0RREcpXEtp316tyD9DzKaIbdKexb/mRr"";

byte[] keyBytes = Base64.decode(pubKey,Base64.DEFAULT);
//test if is correct: ok
Log.d(""response keyBytes"",new String(Base64.encode(keyBytes,Base64.DEFAULT)));

KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");      
X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);

RSAPublicKey publicKey = (RSAPublicKey) keyFactory.generatePublic(spec);
//PublicKey publicKey = (PublicKey) keyFactory.generatePublic(spec);
</code></pre>

<p>But i have this error:</p>

<pre><code>java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag
</code></pre>
","<p>SOLVED.
The problem is that i have modulus and exponent and so i must to do this:</p>

<pre><code>String pubKey = ""tihq/Gk3OUs5NzP+XTRKXBwSxHtB0TWn0RREcpXEtp316tyD9DzKaIbdKexb/mRr""; //64 caratteri
String exponent = ""AQAB"";

byte[] keyBytes = Base64.decode(pubKey,Base64.DEFAULT);
byte[] exponentByte = Base64.decode(exponent,Base64.DEFAULT);

KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");

RSAPublicKeySpec pubKeySpec = new RSAPublicKeySpec(new BigInteger(keyBytes), new BigInteger(exponentByte));
RSAPublicKey publicKey = (RSAPublicKey) keyFactory.generatePublic(pubKeySpec);
</code></pre>
","1296","<java><android><rsa><public-key>","0","1","1","2014-09-30 14:53:11","26123875","0","1","","","","2014-09-30 09:56:21",""
"11236903","How to decode a self-signed certificate","<p>When creating public-private key pair and certificate, usually we see that the certificate looks like this:</p>

<pre><code>        -----BEGIN CERTIFICATE-----
        XXX
        XXX
        ...
        XXX
        -----END CERTIFICATE-----
</code></pre>

<p>If I understand correctly, the certificate should contain a lot of information like issuer, time, algorithm, public key, etc.</p>

<p>Can anybody tell me how we can a browser decode this certificate? </p>
","<p>Most programming languages will have functions to do this, or you can use the OpenSSL command line utility.</p>

<p>For example, in PHP, you could use the <a href=""http://www.php.net/manual/en/function.openssl-x509-parse.php"" rel=""nofollow"">openssl_x509_parse()</a> function,</p>

<p>Here's a <a href=""http://www.madboa.com/geek/openssl/#cert-exam"" rel=""nofollow"">list of OpenSSL commands</a> for getting certificate info. Most programming languages let you call system commands like openssl.</p>

<p>Here's the linked info incase the page is removed:</p>

<pre><code># Using the -text option will give you the full breadth of information.
openssl x509 -text -in cert.pem

# who issued the cert?
openssl x509 -noout -in cert.pem -issuer

# to whom was it issued?
openssl x509 -noout -in cert.pem -subject

# for what dates is it valid?
openssl x509 -noout -in cert.pem -dates

# the above, all at once
openssl x509 -noout -in cert.pem -issuer -subject -dates

# what is its hash value?
openssl x509 -noout -in cert.pem -hash

# what is its MD5 fingerprint?
openssl x509 -noout -in cert.pem -fingerprint
</code></pre>

<p>And here is the output of the -text full info option when run on the PayPal API public key:</p>

<pre><code>Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 0 (0x0)
        Signature Algorithm: sha1WithRSAEncryption
        Issuer: C=US, ST=CA, L=Mountain View, O=PayPal Inc., OU=live_certs, CN=live_api/emailAddress=re@paypal.com
        Validity
            Not Before: Feb 13 10:13:15 2004 GMT
            Not After : Feb 13 10:13:15 2035 GMT
        Subject: C=US, ST=CA, L=Mountain View, O=PayPal Inc., OU=live_certs, CN=live_api/emailAddress=re@paypal.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
            RSA Public Key: (1024 bit)
                Modulus (1024 bit):
                    00:c1:47:4e:dd:fc:44:cc:4b:5c:9c:8e:d9:29:92:
                    f8:d7:65:ef:64:fb:a0:a2:78:bb:8b:b0:fb:a6:b0:
                    9e:d0:0b:5a:1d:37:3d:ec:26:20:9b:b3:6c:02:d2:
                    72:c4:d2:e2:c6:68:4b:57:ca:72:20:46:a2:1d:75:
                    80:87:c7:cf:29:6f:91:d3:5e:fe:12:65:eb:af:d1:
                    1a:aa:e3:e6:b1:5b:d3:cb:00:00:13:53:cc:34:e2:
                    aa:a3:69:25:e0:6c:62:cf:dc:d9:a8:86:a3:3a:6d:
                    5f:64:65:9c:19:2d:1f:e4:94:36:90:1a:8d:6e:f6:
                    e0:db:f6:5a:f8:62:7f:ab:05
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Subject Key Identifier:
                96:9F:7C:BB:C6:6F:17:BD:59:3F:52:D7:0A:1B:EC:10:D6:64:94:6B
            X509v3 Authority Key Identifier:
                keyid:96:9F:7C:BB:C6:6F:17:BD:59:3F:52:D7:0A:1B:EC:10:D6:64:94:6B
                DirName:/C=US/ST=CA/L=Mountain View/O=PayPal Inc./OU=live_certs/CN=live_api/emailAddress=re@paypal.com
                serial:00

            X509v3 Basic Constraints:
                CA:TRUE
    Signature Algorithm: sha1WithRSAEncryption
        81:5f:3a:56:9a:80:5a:e5:ef:5f:a3:ab:a3:8a:89:d6:d6:15:
        21:3e:43:81:6a:44:eb:dd:80:83:8d:b6:1f:bc:91:22:bf:fd:
        8f:f8:8a:1b:84:e1:89:af:ce:7e:5c:78:4d:d2:fe:20:52:41:
        03:23:ca:f6:fe:b3:64:d6:6d:06:03:c1:ca:75:db:d3:8f:21:
        b0:fd:7a:97:6b:e2:d2:4e:50:d8:92:a2:3c:3b:04:7c:18:46:
        23:e1:e7:c4:b5:c4:69:45:80:71:57:c2:b1:01:6f:77:60:35:
        b3:14:6b:eb:b8:a9:e7:2d:b0:c0:17:a5:51:e7:0f:dc:08:c9:
        f9:87
-----BEGIN CERTIFICATE-----
MIIDgzCCAuygAwIBAgIBADANBgkqhkiG9w0BAQUFADCBjjELMAkGA1UEBhMCVVMx
CzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtQ
YXlQYWwgSW5jLjETMBEGA1UECxQKbGl2ZV9jZXJ0czERMA8GA1UEAxQIbGl2ZV9h
cGkxHDAaBgkqhkiG9w0BCQEWDXJlQHBheXBhbC5jb20wHhcNMDQwMjEzMTAxMzE1
WhcNMzUwMjEzMTAxMzE1WjCBjjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYw
FAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtQYXlQYWwgSW5jLjETMBEG
A1UECxQKbGl2ZV9jZXJ0czERMA8GA1UEAxQIbGl2ZV9hcGkxHDAaBgkqhkiG9w0B
CQEWDXJlQHBheXBhbC5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMFH
Tt38RMxLXJyO2SmS+Ndl72T7oKJ4u4uw+6awntALWh03PewmIJuzbALScsTS4sZo
S1fKciBGoh11gIfHzylvkdNe/hJl66/RGqrj5rFb08sAABNTzDTiqqNpJeBsYs/c
2aiGozptX2RlnBktH+SUNpAajW724Nv2Wvhif6sFAgMBAAGjge4wgeswHQYDVR0O
BBYEFJaffLvGbxe9WT9S1wob7BDWZJRrMIG7BgNVHSMEgbMwgbCAFJaffLvGbxe9
WT9S1wob7BDWZJRroYGUpIGRMIGOMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0Ex
FjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC1BheVBhbCBJbmMuMRMw
EQYDVQQLFApsaXZlX2NlcnRzMREwDwYDVQQDFAhsaXZlX2FwaTEcMBoGCSqGSIb3
DQEJARYNcmVAcGF5cGFsLmNvbYIBADAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEB
BQUAA4GBAIFfOlaagFrl71+jq6OKidbWFSE+Q4FqROvdgIONth+8kSK//Y/4ihuE
4Ymvzn5ceE3S/iBSQQMjyvb+s2TWbQYDwcp129OPIbD9epdr4tJOUNiSojw7BHwY
RiPh58S1xGlFgHFXwrEBb3dgNbMUa+u4qectsMAXpVHnD9wIyfmH
-----END CERTIFICATE-----
</code></pre>
","1287","<certificate><public-key>","2","2","2","2012-07-18 21:15:39","11550472","0","2","","","","2012-06-28 01:17:46",""
"11236903","How to decode a self-signed certificate","<p>When creating public-private key pair and certificate, usually we see that the certificate looks like this:</p>

<pre><code>        -----BEGIN CERTIFICATE-----
        XXX
        XXX
        ...
        XXX
        -----END CERTIFICATE-----
</code></pre>

<p>If I understand correctly, the certificate should contain a lot of information like issuer, time, algorithm, public key, etc.</p>

<p>Can anybody tell me how we can a browser decode this certificate? </p>
","<p>To answer my own question: It is just a Base64 encoding.</p>
","1287","<certificate><public-key>","2","0","2","2012-07-18 21:15:39","11550472","0","2","","","","2012-06-28 01:17:46",""
"28537832","Do I need to seed any random number generator before using EVP_PKEY_keygen of OpenSSL?","<p>On the OpenSSL Wiki page called <a href=""https://wiki.openssl.org/index.php/EVP_Key_and_Parameter_Generation"" rel=""nofollow"">EVP Key and Parameter Generation</a> it states the following:</p>

<blockquote>
  <p>Since these functions use random numbers you should ensure that the random number generator is appropriately seeded</p>
</blockquote>

<p>But nowhere on <a href=""https://www.openssl.org/docs/crypto/EVP_PKEY_keygen.html"" rel=""nofollow"">EVP_PKEY_keygen</a> does it make mention of seeding a random number generator. It only discusses the low-level doc pages for non-EVP functions for generating keys.</p>

<p>I have also searched and everywhere no mention is made of seeding when the EVP functions are used.</p>

<p>So my question is; May I assume that the seeding is done internally for me in the higher-level EVP functions?</p>

<p>If I do need to do it then which functions must I have a look at?</p>
","<blockquote>
  <p>but nowhere on <a href=""https://www.openssl.org/docs/crypto/EVP_PKEY_keygen.html"" rel=""nofollow"">https://www.openssl.org/docs/crypto/EVP_PKEY_keygen.html</a> it makes any mention of seeding a random number generator....</p>
</blockquote>

<p>See the OpenSSL wiki page <a href=""http://wiki.openssl.org/index.php/Random_Numbers"" rel=""nofollow"">Random Numbers</a>. It takes you through it in grueling detail.</p>

<hr>

<blockquote>
  <p>... no mention is made of seeding when the EVP functions are used</p>
</blockquote>

<p>The EVP functions use whatever generator is in use for the library. It could be <code>md_rand</code> or a FIPS AES/CTR generator. There's nothing special to get random numbers for the EVP functions (as opposed to other functions).</p>

<hr>

<blockquote>
  <p>May I assume that the seeding is done internally for me in the higher-level EVP functions?</p>
</blockquote>

<p>Yes, <em>if</em> you did not seed the generator yourself. If you seeded the generator and there's sufficient entropy, then it will not auto-seed itself.</p>

<p>You should avoid allowing the generator to auto-seed itself. See the OpenSSL wiki page <a href=""http://wiki.openssl.org/index.php/Random_Numbers"" rel=""nofollow"">Random Numbers</a> for the details.</p>

<p>There's nothing special about seeding/auto-seeding a generator when using EVP interfaces. Whatever you do applies to everything.</p>

<hr>

<blockquote>
  <p>If I do need to do it then which functions must I have a look at?</p>
</blockquote>

<p>The OpenSSL wiki page <a href=""http://wiki.openssl.org/index.php/Random_Numbers"" rel=""nofollow"">Random Numbers</a> provides more details, but you should do something like:</p>

<pre><code>int rc = RAND_load_file(""/dev/urandom"", 32);
if(rc != 32) {
    /* RAND_load_file failed */
}

/* OK to proceed */
</code></pre>

<p>You want to avoid a direct call to <code>RAND_poll</code>, and you want to avoid auto-seeding (which calls <code>RAND_poll</code> internally).</p>
","1284","<encryption><openssl><public-key-encryption><public-key><encryption-asymmetric>","2","1","1","2015-02-16 21:13:27","28550395","1","","608639","","2015-02-16 21:13:27","2015-02-16 09:05:28",""
"38475718","using tFTPConnection to connect to SFTP using a public key file without passphrase","<p>I am using tFTPConnection to connect to SFTP using a public key file.
But the issue with this component is that I can't leave Password and Key Passphrase blank as it throws error.
But when I tryusing Filezilla, I am able to connect.
Please help.</p>
","<p>If you mean by blank actually not filling the field, this won't work. But you can provide an empty string <code>""""</code> so that an empty string will be transmitted. </p>

<p><em>NOTE:</em> I needed to guess this because there is no picture of the configuration at the point of answering.</p>
","1281","<sftp><talend><public-key><passphrase>","0","1","2","2016-07-23 08:16:34","38480492","2","","","","","2016-07-20 08:06:08",""
"38475718","using tFTPConnection to connect to SFTP using a public key file without passphrase","<p>I am using tFTPConnection to connect to SFTP using a public key file.
But the issue with this component is that I can't leave Password and Key Passphrase blank as it throws error.
But when I tryusing Filezilla, I am able to connect.
Please help.</p>
","<p>you can not pass the blank or empty field while configuration, this will through error for sure. In any case if you have to pass with blank field put "" "" there so that it can be taken as empty string.
Or you can use username and password as talend. 
Try more to describe your job design and configuration for clear view.</p>
","1281","<sftp><talend><public-key><passphrase>","0","1","2","2016-07-23 08:16:34","38480492","2","","","","","2016-07-20 08:06:08",""
"16015659","Getting public key using modulus and exponent","<p>hi to all another problem another question..</p>

<p>I am on a C# project that decrypts encrypted messages. for decrypting i am using openssl. I am able to encrypt a message with private key and decrypt it public key with given below code</p>

<pre><code>CryptoKey key = CryptoKey.FromPrivateKey(prvkey, null);
RSA rsa = key.GetRSA();
byte[] alinan = System.Text.Encoding.UTF8.GetBytes(textBox1.Text);
byte[] sonuc = rsa.PrivateEncrypt(alinan, RSA.Padding.PKCS1);

key = CryptoKey.FromPublicKey(pubkey, null);
rsa = key.GetRSA();
byte[] cozulen = rsa.PublicDecrypt(sonuc, RSA.Padding.None);
</code></pre>

<p>but for my project i dont have public key , i have only modulus and exponent. I dont know how to get the public key by using modulus and exponent. I have done many searchings but i couldnt find any proper answer. Does anybody have an idea ?</p>

<p>Thanks..</p>
","<p>At least on the c++ openssl the process is:</p>

<p>1 - Generate two BigNumbers from the byte array (modulus and exponent)</p>

<p>2 - Create a new (empty) RSA object</p>

<p>3 - Set the n (modulus) and e (public exponent) attributes of the RSA object.</p>

<p>You may be able to replicate this process in any technology (java, java card, etc)</p>
","1280","<c#><openssl><public-key><modulus><exponent>","0","0","1","2013-04-15 23:53:50","16026537","1","","","","","2013-04-15 12:54:05",""
"16068830","Dumping public key from private using libopenssl","<p>Let say I want to have a code doing something like this openssl command in my c++ application. </p>

<pre><code>openssl rsa -in private.pem -pubout -outform der -out ./out.pub
</code></pre>

<p>How can I do that?</p>

<p>I was look for a sample on github and came up with follow scheme.</p>

<pre><code>key  = PEM_read_bio_RSAPrivateKey(bio, NULL, 0, NULL);
len = i2d_RSAPublicKey(key, &amp;bufp);
</code></pre>

<p>It returns different value than I'm getting from command line tool. I suppose there was no conversion from private key to public and it just saves the private key. Could any one tell me the right approach for getting pub key from private using openssl lib. I would also greatly appreciate any links to pub\priv key examples for openssl.</p>
","<p>Finally I've just find proper sources inside openssl itself. Here is exactly what happens during </p>

<blockquote>
  <p>openssl rsa -in private.pem -pubout -outform der -out ./out.pub</p>
</blockquote>

<p>I've dropped lots of checks from original code to make it smaller.</p>

<pre><code>#include &lt;openssl/pem.h&gt;
#include &lt;openssl/x509.h&gt;

EVP_PKEY *load_key(const char *file)
{
    BIO *key=NULL;
    EVP_PKEY *pkey=NULL;

    key=BIO_new(BIO_s_file());
    BIO_read_filename(key,file);
    pkey=PEM_read_bio_PrivateKey(key,NULL,NULL,NULL);

    return pkey;
}

int _tmain(int argc, _TCHAR* argv[])
{
    BIO *out=NULL;
    out=BIO_new(BIO_s_file());
    EVP_PKEY    *pkey;
    RSA *rsa=NULL;

    char *infile = path_to_pem;
    char *outfile = path_to_der;

    pkey = load_key(infile);

    if (pkey != NULL)
        rsa = EVP_PKEY_get1_RSA(pkey);
    EVP_PKEY_free(pkey);

    BIO_write_filename(out,outfile);

    i2d_RSA_PUBKEY_bio(out,rsa);
}
</code></pre>
","1277","<c++><openssl><rsa><private-key><public-key>","1","1","1","2013-04-18 11:10:49","","1","","","","","2013-04-17 19:44:01",""
"35538146","(Erlang) extracting public key from certificate in pem format","<p>I have a certificate in pem format and I want to extract the public key (RSA). I'm already this far:</p>

<pre><code>{ok, PemBin} = file:read_file(""/path/to/certificate.pem"").
[Certificate] = public_key:pem_decode(PemBin).
</code></pre>

<p>Now, I can do the following:</p>

<pre><code>public_key:pem_entry_decode(Certificate).
</code></pre>

<p>This gives me a tuple with all sorts of details on the certificate but I can't see anywhere an entry for the public key. How do I get the public key from this certificate? Should be straight forward but I can't find any function in the public_key-module for that.</p>
","<p><code>public_key:pem_entry_decode(Certificate)</code> returns a <code>Certificate</code> record.  To extract the public key from it, you need to load the record definitions.  In the Erlang shell, type the following:</p>

<pre><code>rr(public_key).
</code></pre>

<p>After loading the record definitions into the shell, return values will contain the field names as well as the field values, which should make things a bit clearer.</p>

<p>In an Erlang module, load the header file like this:</p>

<pre><code>-include_lib(""public_key/include/public_key.hrl"").
</code></pre>

<p>Then you can extract the public key info like this:</p>

<pre><code>DecodedCertificate = public_key:pem_entry_decode(Certificate).
DecodedCertificate#'Certificate'.tbsCertificate#'TBSCertificate'.subjectPublicKeyInfo.
</code></pre>

<p>which returns:</p>

<pre><code>#'SubjectPublicKeyInfo'{
    algorithm = 
        #'AlgorithmIdentifier'{
            algorithm = {1,2,840,113549,1,1,1},
            parameters = &lt;&lt;5,0&gt;&gt;},
    subjectPublicKey = 
        &lt;&lt;48,130,2,10,2,130,2,1,0,195,76,200,181,90,146,51,183,
          39,91,176,28,95,117,241,28,140,...&gt;&gt;}
</code></pre>

<p>Or dig down one level further to get the key itself:</p>

<pre><code>DecodedCertificate#'Certificate'.tbsCertificate
    #'TBSCertificate'.subjectPublicKeyInfo
    #'SubjectPublicKeyInfo'.subjectPublicKey.
&lt;&lt;48,130,2,10,2,130,2,1,0,195,76,200,181,90,146,51,183,39,
  91,176,28,95,117,241,28,140,212,223,132,...&gt;&gt;
</code></pre>
","1272","<erlang><certificate><rsa><public-key><pem>","5","4","2","2017-12-27 19:03:20","35563754","0","1","3990192","","2016-02-21 20:36:15","2016-02-21 15:43:21",""
"35538146","(Erlang) extracting public key from certificate in pem format","<p>I have a certificate in pem format and I want to extract the public key (RSA). I'm already this far:</p>

<pre><code>{ok, PemBin} = file:read_file(""/path/to/certificate.pem"").
[Certificate] = public_key:pem_decode(PemBin).
</code></pre>

<p>Now, I can do the following:</p>

<pre><code>public_key:pem_entry_decode(Certificate).
</code></pre>

<p>This gives me a tuple with all sorts of details on the certificate but I can't see anywhere an entry for the public key. How do I get the public key from this certificate? Should be straight forward but I can't find any function in the public_key-module for that.</p>
","<p>Ok, here is the complete function in a module:</p>

<pre><code>-module(crypto_helper).
-include_lib(""public_key/include/public_key.hrl"").
-export([get_public_key_from_cert/1]).

get_public_key_from_cert(PathToCert) -&gt;
   {ok, PemBin} = file:read_file(PathToCert),
   PemEntries = public_key:pem_decode(PemBin),
   {value, CertEntry} = lists:keysearch(‘Certificate’, 1, PemEntries)
   {_, DerCert, _} = CertEntry,
   Decoded = public_key:pkix_decode_cert(DerCert, otp),
   PublicKey = Decoded#'OTPCertificate'.tbsCertificate#'OTPTBSCertificate'.subjectPublicKeyInfo#'OTPSubjectPublicKeyInfo'.subjectPublicKey,
   PublicKey.
</code></pre>

<p>Now you can use it as follows:</p>

<pre><code>PublicKey = crypto_helper:get_public_key_from_cert(""/usr/admin/myServer/priv/certificate.pem""),
EncryptedMsg = public_key:encrypt_public(&lt;&lt;""Hallo""&gt;&gt;, PublicKey),
</code></pre>
","1272","<erlang><certificate><rsa><public-key><pem>","5","7","2","2017-12-27 19:03:20","35563754","0","1","3990192","","2016-02-21 20:36:15","2016-02-21 15:43:21",""
"28765048","Veryfing fingerprints using SharpSSH while connecting to SFTP Server","<p>I am using <code>Tamir.SharpSSH</code> to make <code>SFTP</code> connections in my <code>.NET</code> code. I have servers' host, port, username, password and servers' fingerprint.</p>

<p>I am able to connect to the server without the fingerprint. Is there any way to match the fingerprint that I have with the servers' before making the connection?</p>

<p>Following is my <code>C#</code> code for the connection:</p>

<pre class=""lang-csharp prettyprint-override""><code>string _ftpURL = ""ftp.com""; //Host URL or address of the SFTP server
string _UserName = ""Login_Id"";      //User Name of the SFTP server
string _Password = ""12345"";   //Password of the SFTP server
int _Port = 22;                  //Port No of the SFTP server (if any)
string _ftpDirectory = ""ReceivedFiles""; //The directory in SFTP server where the files will be uploaded
string LocalDirectory = ""D:\\FilePuller""; //Local directory from where the files will be uploaded

ArrayList UploadedFiles = new ArrayList();

Sftp oSftp = new Sftp(_ftpURL, _UserName, _Password);

oSftp.Connect(_Port);
</code></pre>

<p>Is there anyway I can add a check for Server's fingerprint before connecting to the <code>SFTP</code> Server?</p>
","<p>The SharpSSH is stupid enough not to verify the host keys by default.</p>

<p>You would have to re-implement <code>SshBase.ConnectSession</code> not to set <code>StrictHostKeyChecking</code> to <code>no</code>.</p>

<ul>
<li>And then use <code>JSch.getHostKeyRepository().add()</code> to configure expected host key (or implement <code>HostKeyRepository</code> interface).</li>
<li>Or implement <code>UserInfo</code> interface, particularly the <code>promptYesNo</code> method.</li>
</ul>
","1266","<ssh><sftp><public-key><sharpssh><rsa-key-fingerprint>","0","0","1","2016-07-20 10:02:57","28766168","0","","5017179","","2016-07-20 10:02:57","2015-02-27 12:24:05",""
"42821496","KeyPairGenerator not available","<p>I am creating a program to generate a key pair but i have this error:</p>

<pre><code>Exception in thread ""main"" java.lang.NullPointerException
at generateAESKey.main(generateAESKey.java:43)
</code></pre>

<p>This is currently what I have been working. The </p>

<blockquote>
  <p>key.getEncoded());</p>
</blockquote>

<p>is not being read.</p>

<pre><code>public class generateAESKey {
    public static void main(String[] args) throws Exception {
        generateAESKey generatekey = new generateAESKey();    
        KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
        keyGen.init(256);
        SecretKey skey = keyGen.generateKey();
        byte[] raw = skey.getEncoded();
        FileOutputStream fos2 = new FileOutputStream(""C:\\Users\\win8.1\\Desktop\\AES\\test.txt"");
        fos2.write(raw);
        fos2.close();


        KeyPairGenerator keyGen1 = KeyPairGenerator.getInstance(""RSA"");
        SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"", ""SUN"");
        keyGen1.initialize(1024, random);
        KeyPair generatedKeyPair = keyGen1.genKeyPair();
        savePublicKey(generatedKeyPair.getPublic(), ""C:\\Users\\win8.1\\Desktop\\AES\\public"");
        savePrivateKey(generatedKeyPair.getPrivate(), ""C:\\Users\\win8.1\\Desktop\\AES\\private"");


        PublicKey key = null;

        X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(
        key.getEncoded());
        FileOutputStream fos3 = new FileOutputStream(""C:\\Users\\win8.1\\Desktop\\AES\\public.txt"");
        fos3.write(x509EncodedKeySpec.getEncoded());
        fos3.close();

        PrivateKey key1 = null;
        PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(
        key1.getEncoded());
        FileOutputStream fos4 = new FileOutputStream(""C:\\Users\\win8.1\\Desktop\\AES\\private.txt"");
        fos4.write(pkcs8EncodedKeySpec.getEncoded());
        fos4.close();
        System.out.println(""SAVE"");

    }
        private static void savePrivateKey(PrivateKey private1, String string) {
        // TODO Auto-generated method stub

    }
        private static void savePublicKey(PublicKey public1, String string) {
        // TODO Auto-generated method stub

    }

        public SecretKeySpec getKeySpec() throws IOException, NoSuchAlgorithmException {
            byte[] bytes = new byte[16];
            File f = new File(""aes.key"");
            SecretKey key = null;
            SecretKeySpec spec = null;
            if (f.exists()) {
              new FileInputStream(f).read(bytes);
            } else {
               KeyGenerator kgen = KeyGenerator.getInstance(""AES"");
               kgen.init(256);  //128 kalagay
               key = kgen.generateKey();
               bytes = key.getEncoded();
               new FileOutputStream(f).write(bytes);
            }
            spec = new SecretKeySpec(bytes,""AES"");
            return spec;
          }
}
</code></pre>

<p>Any help will be greatly appreciated. Thanks. </p>

<p>I have already edited it. </p>
","<p>This line is wrong:</p>

<pre><code>KeyPairGenerator keyGen1 = KeyPairGenerator.getInstance(""ALGORITHM"");
</code></pre>

<p>You must supply the name of the algorithm that you want to use, e.g.:</p>

<pre><code>KeyPairGenerator keyGen1 = KeyPairGenerator.getInstance(""RSA"");
</code></pre>
","1250","<java><private-key><public-key>","-4","0","2","2017-03-15 22:26:38","42821724","2","","7026284","","2017-03-15 22:19:39","2017-03-15 22:01:07",""
"42821496","KeyPairGenerator not available","<p>I am creating a program to generate a key pair but i have this error:</p>

<pre><code>Exception in thread ""main"" java.lang.NullPointerException
at generateAESKey.main(generateAESKey.java:43)
</code></pre>

<p>This is currently what I have been working. The </p>

<blockquote>
  <p>key.getEncoded());</p>
</blockquote>

<p>is not being read.</p>

<pre><code>public class generateAESKey {
    public static void main(String[] args) throws Exception {
        generateAESKey generatekey = new generateAESKey();    
        KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
        keyGen.init(256);
        SecretKey skey = keyGen.generateKey();
        byte[] raw = skey.getEncoded();
        FileOutputStream fos2 = new FileOutputStream(""C:\\Users\\win8.1\\Desktop\\AES\\test.txt"");
        fos2.write(raw);
        fos2.close();


        KeyPairGenerator keyGen1 = KeyPairGenerator.getInstance(""RSA"");
        SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"", ""SUN"");
        keyGen1.initialize(1024, random);
        KeyPair generatedKeyPair = keyGen1.genKeyPair();
        savePublicKey(generatedKeyPair.getPublic(), ""C:\\Users\\win8.1\\Desktop\\AES\\public"");
        savePrivateKey(generatedKeyPair.getPrivate(), ""C:\\Users\\win8.1\\Desktop\\AES\\private"");


        PublicKey key = null;

        X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(
        key.getEncoded());
        FileOutputStream fos3 = new FileOutputStream(""C:\\Users\\win8.1\\Desktop\\AES\\public.txt"");
        fos3.write(x509EncodedKeySpec.getEncoded());
        fos3.close();

        PrivateKey key1 = null;
        PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(
        key1.getEncoded());
        FileOutputStream fos4 = new FileOutputStream(""C:\\Users\\win8.1\\Desktop\\AES\\private.txt"");
        fos4.write(pkcs8EncodedKeySpec.getEncoded());
        fos4.close();
        System.out.println(""SAVE"");

    }
        private static void savePrivateKey(PrivateKey private1, String string) {
        // TODO Auto-generated method stub

    }
        private static void savePublicKey(PublicKey public1, String string) {
        // TODO Auto-generated method stub

    }

        public SecretKeySpec getKeySpec() throws IOException, NoSuchAlgorithmException {
            byte[] bytes = new byte[16];
            File f = new File(""aes.key"");
            SecretKey key = null;
            SecretKeySpec spec = null;
            if (f.exists()) {
              new FileInputStream(f).read(bytes);
            } else {
               KeyGenerator kgen = KeyGenerator.getInstance(""AES"");
               kgen.init(256);  //128 kalagay
               key = kgen.generateKey();
               bytes = key.getEncoded();
               new FileOutputStream(f).write(bytes);
            }
            spec = new SecretKeySpec(bytes,""AES"");
            return spec;
          }
}
</code></pre>

<p>Any help will be greatly appreciated. Thanks. </p>

<p>I have already edited it. </p>
","<p><strong>First error</strong>: <code>KeyPairGenerator.getInstance(String algorithm)</code> can only handle the following input <code>String</code>s:</p>

<ul>
<li>DiffieHellman</li>
<li>DSA</li>
<li>RSA</li>
<li>EC</li>
</ul>

<p>For mor infos look <a href=""https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#KeyPairGenerator"" rel=""nofollow noreferrer"">in the docs</a></p>

<p>Possible call 
<code>KeyPairGenerator.getInstance(""RSA"");</code></p>

<p><strong>Second error (nullptr)</strong>:
You have to create a <code>PublicKey</code>! You are doing <code>PublicKey key = null;</code> and then you Fall:</p>

<pre><code>X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(
key.getEncoded());//key is null so nullpointer will occur
</code></pre>

<p>You have to assign a value to your <code>key</code> variable. I assume you want to take your created <code>PublicKey</code> so do:
<code>PublicKey key = generatedKeyPair.getPublic();</code></p>
","1250","<java><private-key><public-key>","-4","1","2","2017-03-15 22:26:38","42821724","2","","7026284","","2017-03-15 22:19:39","2017-03-15 22:01:07",""
"1225720","public key cryptography implementation","<p>I have been using the PHP mcrypt module for encrypting sensitive data at my company. This has been working well. However, I have been requested to create a new master password which should be able to decrypt any data. The problem is that this master password would have to be hardcoded in a script file. Please correct me if I am wrong but the only secure way seems to be to hardcode a public key in the script and use it to encrypt data while keep the private key secure and use it to decrypt only when needed.</p>

<p>mcrypt does not seem to have an implementation for such a scheme. Does anybody know of a library (PHP module or pure PHP) which would do this?</p>
","<p>There's a PECL extension for that. <a href=""http://us2.php.net/manual/en/book.gnupg.php"" rel=""nofollow noreferrer"">http://us2.php.net/manual/en/book.gnupg.php</a></p>

<p>You can also use gnupg command line tool from php, if it doesn't have to be very fast: <a href=""http://devzone.zend.com/article/1265"" rel=""nofollow noreferrer"">http://devzone.zend.com/article/1265</a></p>

<p>I haven't tried either method.</p>
","1246","<php><encryption><public-key><mcrypt>","0","2","4","2018-04-28 09:30:49","1225863","0","","1033581","","2018-04-28 09:30:49","2009-08-04 04:23:57",""
"1225720","public key cryptography implementation","<p>I have been using the PHP mcrypt module for encrypting sensitive data at my company. This has been working well. However, I have been requested to create a new master password which should be able to decrypt any data. The problem is that this master password would have to be hardcoded in a script file. Please correct me if I am wrong but the only secure way seems to be to hardcode a public key in the script and use it to encrypt data while keep the private key secure and use it to decrypt only when needed.</p>

<p>mcrypt does not seem to have an implementation for such a scheme. Does anybody know of a library (PHP module or pure PHP) which would do this?</p>
","<p>Just to be sure of your requirement of this <strong>master password</strong>,  </p>

<ol>
<li>Is it expected to be used only as a '<strong><code>encrypt this</code></strong>' command that will 'seal' something<br>
which can then only be opened by someone knowing the private key in question?  Or,

<ul>
<li>Is it something you expect to open any encryption done in the enterprise?</li>
<li>I just want to be sure your phrasing is not to be interpreted in this second way</li>
<li>your phrase '<strong><code>decrypt any data</code></strong>' sounds dangerous<br>
(and not-feasible/practical with asymmetric key encryption)</li>
</ul></li>
</ol>

<hr>

<p>Update based on the comment. </p>

<ul>
<li>You are planning for <strong>two copies of the data</strong> each encrypted with different keys

<ul>
<li><strong>one copy</strong> is to be encrypted with the <strong>master public</strong> key

<ul>
<li>can be decrypted with anyone having the <strong>master private</strong> key<br>
the master private key must then be secured (public key is not critical)</li>
</ul></li>
<li>the <strong>second copy</strong> is to be encrypted with the <code>Rijndael 256</code> key</li>
</ul></li>
<li>purpose is to allow the master to decrypt the data whenever required<br>
particularly, in the absence of the individual who encrypted it</li>
</ul>

<p>This approach will work for,
easy access of the data by the individual with the Rijndael key,<br>
without need for intervention by the master private key owner.<br>
And, when the master private key owner is trusted with the secrecy of the data.  </p>

<p>Your scheme will need to update the master copy (deleting the older one and re-encrypting a new one) every time the user updates their copy.</p>

<hr>

<p>However, if the <strong>user data is trusted with the master</strong> (as is clearly the case here),  </p>

<ul>
<li><strong>an easier approach</strong> would be to issue the Rijndael key from the master</li>
<li>The master could keep it encrypted with the master-public key itself</li>
<li>The data can then be encrypted with just the issued Rijndael key 

<ul>
<li>it will always be accessible with the master-private key<br>
which can open the user's Rijndael key </li>
</ul></li>
</ul>

<p>If the user needs to sign the data, that can be accomplished separately in the process.<br>
It will save you from keeping double copies and maintaining them.</p>

<hr>

<p><strong>To sign the data</strong>, the user could have a a key pair generated by them.  </p>

<ul>
<li>Before encrypting the data with the Rijndael private-key</li>
<li>the <strong>master-public key</strong> encrypted with the <strong>user-private-key</strong> can be appended to it</li>
<li>the <strong>user-public key</strong> shared with the master (at least)<br>
will be sufficient to authenticate that the user has provided the data</li>
<li>In a worst-case scenario, if the user is unavailable and the key confirmation fails,<br>
the master may be trusted on the authenticity of the data -- which can still be decrypted</li>
</ul>
","1246","<php><encryption><public-key><mcrypt>","0","1","4","2018-04-28 09:30:49","1225863","0","","1033581","","2018-04-28 09:30:49","2009-08-04 04:23:57",""
"1225720","public key cryptography implementation","<p>I have been using the PHP mcrypt module for encrypting sensitive data at my company. This has been working well. However, I have been requested to create a new master password which should be able to decrypt any data. The problem is that this master password would have to be hardcoded in a script file. Please correct me if I am wrong but the only secure way seems to be to hardcode a public key in the script and use it to encrypt data while keep the private key secure and use it to decrypt only when needed.</p>

<p>mcrypt does not seem to have an implementation for such a scheme. Does anybody know of a library (PHP module or pure PHP) which would do this?</p>
","<p>I don't see how that would work.  Any two-way encryption function is only going to decrypt when fed the specific password used to encrypt (unless you're the NSA and you put back doors in the algorithms).  You can't have two passwords decrypt the same file (unless there are hash collisions, but that's not something you can make happen easily).</p>

<p>As far as storing your master password in the program, it would be much better to store it in a separate file the program reads in, so you can use tighter OS-level security on that file.</p>

<p>Keep in mind mcrypt is not public key cryptography.  With public key cryptography, you might be able to do what you want, though.  For instance, with PGP/GPG, you can encrypt a file such that three different users can decrypt it using their private keys, without knowing each other's private keys.  So you can have a virtual user with the master password that can decrypt everything.</p>

<p>Another option would be to hold two copies of all encrypted data; one encrypted with the user's password, and one encrypted with the master password.</p>
","1246","<php><encryption><public-key><mcrypt>","0","1","4","2018-04-28 09:30:49","1225863","0","","1033581","","2018-04-28 09:30:49","2009-08-04 04:23:57",""
"1225720","public key cryptography implementation","<p>I have been using the PHP mcrypt module for encrypting sensitive data at my company. This has been working well. However, I have been requested to create a new master password which should be able to decrypt any data. The problem is that this master password would have to be hardcoded in a script file. Please correct me if I am wrong but the only secure way seems to be to hardcode a public key in the script and use it to encrypt data while keep the private key secure and use it to decrypt only when needed.</p>

<p>mcrypt does not seem to have an implementation for such a scheme. Does anybody know of a library (PHP module or pure PHP) which would do this?</p>
","<p>I suggest taking a look at the PHP OpenSSL bindings, and in particular the <a href=""http://php.net/openssl_public_encrypt"" rel=""nofollow noreferrer"">openssl_public_encrypt()</a> function.  You could indeed embed a master public key into the script, and have the script encrypt each user's AES key with this public key.  Keep the corresponding master private key in the company safe.</p>

<p>Should you need the master decrypt function, you would pull the encrypted user key, decrypt it with the master private key and then decrypt the original data.</p>
","1246","<php><encryption><public-key><mcrypt>","0","2","4","2018-04-28 09:30:49","1225863","0","","1033581","","2018-04-28 09:30:49","2009-08-04 04:23:57",""
"14870236","push public key on multiple server using root account but under different user","<p>I am trying to push some public keys on a whole bunch of servers using the root account but I wanna put those new keys under 'postgres' user.</p>

<p>I'm doing this:</p>

<pre><code>$ cat new_dba_keys.pub | ssh -l root 10.224.1.16 ""su - postgres |cat &gt;&gt; ~/.ssh/authorized_keys""
-bash: line 2: ssh-rsa: command not found
-bash: line 4: ssh-rsa: command not found
</code></pre>

<p>As you can see, it will not work.</p>
","<p>Instead of <code>su - postgres | cat ...</code> you can use <code>su - postgres -c ""cat ...""</code> and will place text in postgre's directory:</p>

<pre><code>cat new_dba_keys.pub | ssh -l root 10.224.1.16 ""su - postgres -c \""cat &gt;&gt; ~/.ssh/authorized_keys\""""
</code></pre>
","1243","<bash><public-key>","0","0","1","2013-02-14 09:42:31","14871100","0","","1983854","","2013-02-14 09:00:10","2013-02-14 07:59:21",""
"9805140","RSA Decryption in iPhone using public key","<p>I have public key and encrypted data and i have to decrypt that data with Public key. As data is being encrypted with RSA in Server side so i have to decrypt with RSA in iPhone. I have googled but didn't got any good solution. I have gone through CryptoExercise provided by Apple but still not able to find out solution.
Pls guys help me to implement this decryption.</p>

<p><strong>EDIT:</strong> Over Server, data is encrypted with Private key.</p>
","<p>First, see Chris Luke's write up of <a href=""http://blog.flirble.org/2011/01/05/rsa-public-key-openssl-ios/"" rel=""nofollow"">how to turn a PKCS1 into iOS's non-standard key form</a>. You can then use the resulting <code>SecKeyRef</code> with <code>SecKeyDecrypt</code>.</p>
","1242","<iphone><rsa><encryption><public-key>","0","0","1","2012-03-21 15:34:06","","4","","1283329","","2012-03-21 13:48:42","2012-03-21 12:59:59",""
"18649507","SSH Tunnel for Python MySQLdb connection with public key","<p>I am trying to use MySQLdb but I didn't find anywhere how to make connection throught a SSH Tunel using a public key. Anybody can please guide me throught this ?</p>

<p>Thank you very much.</p>
","<p>As you said, you need first to create a tunnel, so in your shell do:</p>

<pre><code>ssh -i ~/.ssh/keyfile.pem -L 3306:127.0.0.1:22 &lt;hostIP&gt;
</code></pre>

<p>and change your Python code to something like the following for connecting:</p>

<pre><code>conn = MySQLdb.connect(host='127.0.0.1', port=3306, user='username', passwd='pass', db='DB')
</code></pre>
","1240","<python><ssh><mysql-python><public-key>","1","1","1","2013-09-06 04:48:41","","0","","","","","2013-09-06 03:41:47",""
"31233884","JSEncrypt producing different output for identical message and public key each time","<p>I've got this simple bit of JavaScript:</p>

<pre><code>&lt;html&gt;
  &lt;script type=""text/javascript"" src=""http://cdn.rawgit.com/travist/jsencrypt/v2.1.0/bin/jsencrypt.js""&gt;&lt;/script&gt;
  &lt;script type=""text/javascript""&gt;

    var message = ""This is my message""

    // we create a new JSEncrypt object for rsa encryption
    var rsaEncrypt = new JSEncrypt();

    var publicKey = ""-----BEGIN PUBLIC KEY-----"" +
      ""\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQK"" +
      ""BgQCQDxDFOYJpkCaqeX4CBVNCtBjX\nMZgGMo"" +
      ""lSs2wYrVu1ixr36KpeJcRcYhz+AnyhnUpYkgk"" +
      ""+hEqJtDSNirU5Dk5oVYYi\ngf2uLogV5Tp/ka"" +
      ""K49r9vtxldcHraZIgNQjcdeQUd/viKd/3DvM8"" +
      ""naWR/mTG0nCBE\nrEQkATW/xXynJh/COQIDAQ"" +
      ""AB\n-----END PUBLIC KEY-----""

    rsaEncrypt.setPublicKey(publicKey);

    var encryptedMessage = rsaEncrypt.encrypt(message);

    console.log(encryptedMessage)
  &lt;/script&gt;
&lt;/html&gt;
</code></pre>

<p>That I feel should be producing the same output in the console each time it runs, but it doesn't.</p>

<p>Example outputs:</p>

<pre><code>abqE+YkCMKFWgsazbZpfGvoXLci9FL/wZLYUMR6ZFkolsvJC5MdJgq5yn+AXXy8xlKHDOry6czAaOQOTl2HXdKSfsypc8nqDU8Sx5PuEgMYjvJ/dEyfU6jVuxfH1Qmuk6aOGVHePNfDlC4kSjgp1RXToSP5NqAEi24EuMx3uulI=

OzZM03Pki3o631KOuZ5nyQKu1xXRbLHhrR0WnjE5Ns5SssoiCEwlrS+svtP0cbZaYWZJc+FlZQNFUam4iC233BKnY5Nrr5Ppj14eaBvJ4x3FR8FiLwtyEW7nTzisAS7Ys2RKPjUzmkiOCZHwIpXnUO10KVo8763+JIuDB0cDPS4=
</code></pre>

<p>Can anyone explain this behaviour?</p>
","<p>That is expected.</p>

<p>The RSA cryptosystem works in group modulo some prime number. To ensure that all possible plaintexts are encrypted with the same security, the plaintexts are padded to produce a padded plaintext that is slightly smaller than the modulus. Since the padding is applied before encryption, the ciphertext looks completely different.</p>

<p>JSEncrypt is based on JSBN which in turn implements only <a href=""https://github.com/travist/jsencrypt/blob/v2.1.0/lib/jsbn/rsa.js#L28-L61"" rel=""nofollow"">PKCS#1 v1.5 padding type 2</a> (<a href=""http://tools.ietf.org/html/rfc2313#section-8.1"" rel=""nofollow"">RFC 2313</a>). The second type of this padding introduces random bytes that are removed after decryption because of marker bytes. At least 11 bytes are needed for the padding.</p>

<p>If you want to check the interoperability with other implementations, you need to do a full encryption-decryption cycle and make sure that you get the same plaintext back.</p>

<p>Note that nowadays, PKCS#1 v1.5 padding shouldn't be used anymore and PKCS#1 v.2 OAEP is preferred which is also randomized.</p>
","1238","<javascript><encryption><public-key-encryption><public-key>","0","1","1","2015-07-05 22:19:08","31235018","1","","","","","2015-07-05 18:56:56",""
"8582753","I'm not getting correct data (usually first 16 bytes) when using evp_sealinit/ evp_openinit api. what am i doing wrong here?","<p>What am I doing wrong here? I must be missing something.. </p>

<p>I'm using the EVP_Seal/ EVP_Open API. I've generated the public/private key and the certificate. I'm seeing some wierd things - the first 16bytes  that I'm getting back after decoding are garbage. If my data is small (smaller that 16 bytes), then I'm not getting any output from the EVP_Open functions.</p>

<p>Heres my test program:</p>

<pre><code>    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;string.h&gt;

    #include &lt;openssl/ssl.h&gt;
    #include &lt;openssl/err.h&gt;
    #include &lt;openssl/rsa.h&gt;
    #include &lt;openssl/pem.h&gt;
    #include &lt;openssl/err.h&gt;
    #include &lt;openssl/rand.h&gt;

    #define PORT 6999
    #define HOST ""localhost""

    #define PUBLIC_KEYFILE ""pubkey.pem""
    #define CERT_FILE ""server.crt""

    #define PRIVATE_KEYFILE ""server.key""

    void run_client(void);

    EVP_CIPHER_CTX en_ctx;
    EVP_CIPHER_CTX de_ctx;

    typedef struct {
    int keylen;
    unsigned char key[512];
    unsigned char iv[EVP_MAX_IV_LENGTH];
     } keys_t;

     unsigned char msg[1024];
     unsigned char enc_buf[1024];
     unsigned char de_buf[1024];


     int main(int argc, char **argv)
     {

     // Init malloc, free etc for OpenSSL's CRYPTO_malloc_init();
     ERR_load_BIO_strings();    
     OpenSSL_add_all_algorithms();
     run_client();

     return 0;  

     }

     int encrypt_with_cert(unsigned char **secret_key, int *keylen, 
                           unsigned char **out_iv, 
                   unsigned char *data, int *datalen)
    {
    FILE *fp;
    X509 *x509;
    EVP_PKEY *pkey;

        unsigned char *ek;
        int eklen;
    int retval = 0;
    unsigned char iv[EVP_MAX_IV_LENGTH];
    int i=0;

        RAND_pseudo_bytes(iv, EVP_MAX_IV_LENGTH);

        fp = fopen(CERT_FILE, ""r"");
    if (!fp) {
      fprintf(stderr, ""Cannot open certificate file\n"");
      goto out;
    }

    x509 = PEM_read_X509(fp, NULL, 0, NULL);
    if (x509 == NULL) {
      ERR_print_errors_fp(stderr);
      goto out;
    }
    fclose(fp);

    pkey = X509_extract_key(x509);

    X509_free(x509);

    if (pkey == NULL) {
      ERR_print_errors_fp(stderr);
    }

    EVP_CIPHER_CTX_init(&amp;en_ctx);
    ek = malloc(EVP_PKEY_size(pkey));

    if (!EVP_SealInit(&amp;en_ctx, EVP_aes_256_cbc(), &amp;ek, 
                          &amp;eklen, iv, &amp;pkey, 1)) {
      fprintf(stderr, ""EVP_SealInit failed\n"");
      retval = 3;
      goto out_free;
    }

     int buf_len = 0;
     int tot_len = 0;

     printf(""Encoding string: {%s}, len: %d\n"", data, *datalen);
     memset(enc_buf, 0 , 1024);

     EVP_SealInit(&amp;en_ctx, NULL, NULL, NULL, NULL, NULL, 1);
     EVP_SealUpdate(&amp;en_ctx, enc_buf, &amp;buf_len, data, *datalen);
     tot_len += buf_len;

     EVP_SealFinal(&amp;en_ctx, enc_buf+buf_len, &amp;buf_len);
     tot_len += buf_len;

     *(enc_buf + tot_len) = '\0';
     *datalen = tot_len;

     printf(""Encoded length: %d\n"", tot_len);
     printf(""Encoded message: {"");
     for (i=0; i&lt; tot_len; i++) {
    printf(""%02x"", enc_buf[i]);
     }
     printf(""}\n"");

     goto out;

      out_free:
     EVP_PKEY_free(pkey);
     free(ek);

      out:
    *secret_key = ek;
    *keylen = eklen;
    *out_iv = iv;
    return retval;
    }

    void decrypt_message(unsigned char *secret_key, int keylen, 
                         unsigned char *iv, int buflen)
    {
    FILE *privkey;

    int retval = 0;
    int klen=0;

    int tot_len = 0;
    EVP_PKEY *pkey;
    int i = 0;

    privkey = fopen(PRIVATE_KEYFILE, ""r"");
    if (!privkey) {
      fprintf(stderr, ""Error opening private key\n"");
        }   

    pkey = PEM_read_PrivateKey(privkey, NULL, 0 , NULL);
    if (!pkey) {
      fprintf(stderr, ""Error loading Server's RSA private key\n"");
      retval = 2;
      goto out; 
    }


    if(keylen != EVP_PKEY_size(pkey)) {
       EVP_PKEY_free(pkey);
       fprintf(stderr, ""keylength mismatch!\n"");
       retval = 2;
       goto out;
    }       

    klen = EVP_OpenInit(&amp;de_ctx, EVP_aes_256_cbc(), secret_key, keylen, iv, pkey);
    if (klen == 0) {
      fprintf(stderr, ""EVP_OpenInit failed\n"");
    }

    int de_len = 0;
    tot_len = 0;

    printf(""\n\nNow decoding..\n"");
    printf(""Encoded length: %d\n"", buflen);
    printf(""Encoded message: {"");
    for (i=0; i&lt; buflen; i++) {
      printf(""%02x"", enc_buf[i]);
    }
    printf(""}\n"");


    EVP_OpenInit(&amp;de_ctx, NULL, NULL, keylen, NULL, NULL);
    EVP_OpenUpdate(&amp;de_ctx, de_buf, &amp;de_len, enc_buf, buflen);
    tot_len += de_len;


    EVP_OpenFinal(&amp;de_ctx, de_buf+tot_len, &amp;de_len);
    tot_len += de_len;
    *(de_buf+tot_len) = '\0';


    printf(""Decoded length: %d,  String: %s\n"", tot_len, de_buf);

     out:
    fclose(privkey);
return;
    } 

   void run_client()
   {

    unsigned char *secret_key = NULL;
    int keylen;
    unsigned char *iv = NULL;
    int data_len = 0;
    int retval = 0;

    //strcpy((char *)msg, ""abcdefghijklmnopqrstuvwxyz0123456789"");
    //strcpy((char *)msg, ""this is a secret message\n"");


        strcpy((char *)msg, ""1234567890"");

        data_len = strlen((char *)msg) + 1; 

    retval = encrypt_with_cert(&amp;secret_key, &amp;keylen, &amp;iv, msg, &amp;data_len);
    if (retval != 0) {
    printf(""encrypt with certificate failed! retval = %d\n"", retval);
    }

    decrypt_message(secret_key, keylen, iv, data_len);

    }
</code></pre>

<p>When I run this here's what I get:
        [sample]$ gcc -Wall -g -o openssl_seal -lcrypto openssl_seal.c</p>

<pre><code>    [sample]$ ./openssl_seal
    Encoding string: {1234567890}, len: 11
    Encoded length: 16
    Encoded message: {9753c483d6816b64693f604b2376f0a0}


    Now decoding..
    Encoded length: 16
    Encoded message: {9753c483d6816b64693f604b2376f0a0}
    Decoded length: 0,  String:


   [sample]$ gcc -Wall -g -o openssl_seal -lcrypto openssl_seal.c
   [sample]$ ./openssl_seal
   Encoding string: {abcdefghijklmnopqrstuvwxyz0123456789}, len: 37
   Encoded length: 48
   Encoded message:          {ad264f30fe70cc6f9c8d712073bc72049e7f7515a28c1cf0aeef648d6c4c4bfd717ae2fd21396bb95eb7ec0ce88f7f9d}


   Now decoding..
   Encoded length: 48
   Encoded message: {ad264f30fe70cc6f9c8d712073bc72049e7f7515a28c1cf0aeef648d6c4c4bfd717ae2fd21396bb95eb7ec0ce88f7f9d}
   Decoded length: 37,  String: abcd.VO[vтOqrstuvwxyz0123456789
</code></pre>
","<p>It looks like you are calling <code>EVP_SealInit</code> twice, and ignoring the iv parameter the second time. You should only call this method once, saving the IV parameter and transmitting it to the decryption side. Similarly you should only call <code>EVP_OpenInit</code> once.</p>
","1234","<openssl><rsa><public-key>","0","0","1","2011-12-21 14:17:34","","0","","1108738","","2011-12-20 22:45:49","2011-12-20 22:23:30",""
"10082865","Where to find EcmaPublicKey.snk for a dll?","<p>I am not so familiar to .snk files but I am doing some tricky things (just for testing) </p>

<p>with reflector and a .net framework assembly.</p>

<p>The problem is that I need to sign this assembly (when recompiling) with the <strong>""EcmaPublicKey.snk""</strong> that corresponds to these values:</p>

<pre><code>Public key is 00000000000000000400000000000000
Public key token is b77a5c561934e089
</code></pre>

<p>Because when I remove the strong name from this dll, an error appears in Visual Studio (expecting this: b77a5c561934e089)</p>

<p>Is there a possibility to get that .snk file?</p>

<p>I found this link: 
<a href=""http://blogs.msdn.com/b/shawnfa/archive/2004/06/09/152097.aspx"" rel=""nofollow"">http://blogs.msdn.com/b/shawnfa/archive/2004/06/09/152097.aspx</a></p>

<p>and also this (that is not working):
<a href=""http://msdn.microsoft.com/net/ecma/default.asp"" rel=""nofollow"">http://msdn.microsoft.com/net/ecma/default.asp</a></p>

<p>Please share your experiences or any idea to solve this (if possible) :-)</p>

<p>Thanks in advance.</p>
","","1232","<.net><.net-assembly><reflector><strongname><public-key>","0","","0","2012-04-10 03:46:18","","4","","","","","2012-04-10 03:46:18",""
"28899392","Getting RSAPublicKey From File With Extension pem","<p>I am trying to implement Paybox Payment Gateway integration to my application. After payment Paybox returns me a signature and I have to verify it.</p>

<p>I have test keys provided by Paybox, 'TestK004.prv.pem' and 'TestK004.pub.pem'.</p>

<p>Here is my Test Class:</p>

<pre><code>package com.alpha.shop.component.payment.methods.crc.impl.ww.paybox;

import java.security.interfaces.RSAPublicKey;
import java.security.Signature;
import java.security.KeyFactory;
import java.security.spec.X509EncodedKeySpec;
import java.io.FileInputStream;
import java.io.DataInputStream;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.net.URLCodec;

public class SignVer {

// verification signature RSA des donnees avec cle publique

private static boolean verify( byte[] dataBytes, byte[] sigBytes, String sigAlg, RSAPublicKey pubKey) throws Exception
{
    Signature sig = Signature.getInstance(sigAlg);
    sig.initVerify(pubKey);
    sig.update(dataBytes);
    return sig.verify(sigBytes);
}

// chargement de la cle AU FORMAT der :
// openssl rsa -inform PEM -in pbx_pubkey.pem -outform DER -pubin -out /tmp/pubkey.der

private static RSAPublicKey getPubKey(String pubKeyFile) throws Exception
{
    FileInputStream input = new FileInputStream(pubKeyFile);
    byte[] fileData = new byte[input.available()];
    input.read(fileData);
    input.close();
    String text = new String(fileData, ""UTF-8"");
    byte[] decoded = Base64.decodeBase64(text);
    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
    // extraction cle
    X509EncodedKeySpec pubSpec = new X509EncodedKeySpec(decoded);
    RSAPublicKey pubKey = (RSAPublicKey) keyFactory.generatePublic(pubSpec);
    return pubKey;
 }

 // exemple de verification de la signature

 public static void main(String[] unused) throws Exception {

    String sData = ""Auto=459782&amp;Idtr=201348570&amp;Ref=Ma_commande"";        // donnees signees
    String sSig  = ""df123dsfd3...1f1ffsre+t321rt1t3e="";                 // signature Base64 et URL encodee

    // decodage
    byte[] sigBytes = Base64.decodeBase64( URLCodec.decodeUrl(sSig.getBytes()));

    // lecture de la cle publique
    RSAPublicKey pubK = getPubKey(""C:/Users/Garip/Desktop/Yeni klasör/TestK004.pub.pem"");

    // verification signature
    boolean result = verify(sData.getBytes(), sigBytes, ""SHA1withRSA"", pubK);

    // affichage resultat
    System.out.println(""Resultat de la verification de signature : "" + result);
}
</code></pre>

<p>}</p>

<p>Content of my Public Key is:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
</code></pre>

<p>MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDLzJXB+BM10Ksdtk0rYHboIKPc
o8RXGikLiQQawNXuW4g38uaTbci7xuoH3Cvhngr9OgvKKILKJZiy1FI+NnKT+8gP
28JHzplbqpc2mmVZ5OT4Xe9D5ndnPVdZ1xUxyBlJshcTYqkSPru9eVNza7jwEqPv
DFZBxJoBFScQOJZcpwIDAQAB</p>

<p>-----END PUBLIC KEY-----</p>

<p>When I run it, gives error:</p>

<pre><code>Exception in thread ""main"" java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: invalid key format
at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:205)
at java.security.KeyFactory.generatePublic(KeyFactory.java:334)
at com.alpha.shop.component.payment.methods.crc.impl.ww.paybox.SignVer.getPubKey(SignVer.java:39)
at com.alpha.shop.component.payment.methods.crc.impl.ww.paybox.SignVer.main(SignVer.java:54)Caused by: java.security.InvalidKeyException: invalid key format
at sun.security.x509.X509Key.decode(X509Key.java:387)
at sun.security.x509.X509Key.decode(X509Key.java:403)
at sun.security.rsa.RSAPublicKeyImpl.&lt;init&gt;(RSAPublicKeyImpl.java:84)
at sun.security.rsa.RSAKeyFactory.generatePublic(RSAKeyFactory.java:298)
at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:201)
... 3 more
</code></pre>

<p>It can't generate RSAPublicKey from key file.</p>

<p>How can I correct this code ?</p>
","<p>Java expects your key to be DER-encoded, but you are supplying PEM-encoded data.</p>

<p>Read your file as a string, cut off the headers and base64-decode the contents. Then supply those bytes to the key factory.</p>
","1206","<java-ee><rsa><public-key-encryption><public-key><pem>","0","2","1","2015-03-06 14:27:35","28899764","1","0","2617972","","2015-03-06 14:27:35","2015-03-06 13:04:53",""
"8545101","How to get P and Q from KeyPairGenerator for RSA in Java?","<p>I use KeyPairGenerator class to generate private and public key for RSA algorithm. Next step is to create DigitalSignature for some files. I'm going to use Signature class with public key generated in first step. It is working ok, but I have a problem with getting p and q parameter. How can I get them? I need them to be shown, the same as modulus. When I use .toString() method on private or public key, I can see all these values? Is there any other posibility to get p, q, modulus without parsing this string?</p>

<p>One more thing. Is there any posibility to get only generated key without all this values which are in toString() method?</p>

<p>Thanks a lot!</p>
","<p>You have to cast the result of <code>KeyPair.getPublic()</code> and <code>KeyPair.getPrivate()</code> to <code>RSAPublicKey</code> and <code>RSAPrivateKey</code>.</p>

<p>EDIT:</p>

<p>You can cast <code>KeyPair.getPrivate()</code> to <code>RSAPrivateCrtKey</code> to extract P and Q.</p>
","1200","<java><rsa><public-key><private-key>","2","7","1","2011-12-19 12:18:29","8545164","2","","","","","2011-12-17 13:34:25",""
"41263080","How to extract public-key from PEM certificate in hexadecimal format","<p>I have this script which extracts the certificate public-key but it is not in a hexadecimal format. How can I extract the public-key in hexadecimal format?</p>

<pre><code>import socket, ssl
import OpenSSL
#import binascii

hostname='www.google.com'
port=443

context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
ssl_sock = context.wrap_socket(s, server_hostname=hostname)
ssl_sock.connect((hostname, port))
ssl_sock.close()
print(""ssl connection Done"")

cert = ssl.get_server_certificate((hostname, port))

# OpenSSL
x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, cert)

print (OpenSSL.crypto.dump_publickey(OpenSSL.crypto.FILETYPE_PEM,x509.get_pubkey()))
</code></pre>

<p>This is the output I am getting:</p>

<pre><code>b'-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvLyy8xoWO8b2nSjh746S\nmxOyrntQj/C04DaNCQDkhFFXf2w5ZfChIMk3NmThBmTydm4rl0r7TlqoNfkNc8Xr\n/P+WJtDku8ai2R/usFWPrayZZGtlWd6BpBfI5jVuIaHyStLZw7+IMhtHfQDo1wsw\nmPx0sxmAOqEeoXcX45x5G8LKT1n78r0NX8bjAM0upk5dseg3QCVKNSPgVUueIAM3\nt/5B6GpqL0R2cjp+HadsJAr93l0buBIfGU911k4ntuY3JzYUEbQ7warZT7bBT1FI\nX6J0RpFDaIxiIhS+lHZHziKP5pb+QUGFnakQmglu/L1D+k3Go1WangeL+bEeztEi\nSQIDAQAB\n-----END PUBLIC KEY-----\n'
</code></pre>
","<p>Just do that:</p>

<pre><code>RSA.publickey().exportKey(""DER"")
</code></pre>

<p>This will give you der format that is in binary, then just convert to hex.</p>
","1197","<python><x509><public-key><pem>","0","0","1","2016-12-22 08:09:56","","0","","","","","2016-12-21 12:41:53",""
"9237039","Git clone failing on public key. Is there something I'm missing?","<p>Due to Bundle install choking on libv8 dependency from theRubyRacer, JSON and other gems on a win 7 I'm trying to install and get running with Ubuntu.  Copied over .gitconfig and .ssh/rsa_id and .ssh/rsa_id.pub files, but trying a git clone of a private repo, works on win7 but fails (with same public key) on linux:</p>

<pre><code>james@ubuntu:/documents/projects/$ sudo git clone git@github.com:the_project/back_end
[sudo] password for james: 
Cloning into back_end...
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>vs win7's:</p>

<pre><code>C:\test&gt;git clone git@github.com:the_project/back_end
Cloning into back_end...
Enter passphrase for key '/c/Users/AJames/.shh/id_rsa':
remote: Counting objects: 10034, done.
</code></pre>

<p>any ideas?  Thank you!!</p>
","<p>Using <code>sudo</code> would cause it to try to use <code>root</code>'s SSH key, not your own.</p>

<p>You probably really should either grant yourself access to the directory you're cloning into, or clone into a directory you already have access to.</p>
","1195","<linux><git><ssh><public-key>","1","5","1","2012-02-11 10:25:32","9237065","2","","","","","2012-02-11 01:32:04",""
"1990366","Port knocking and RSA encryption","<p>I am doing on my project and there is about port knocking. I have 3 files that separated in server side and client.
In the server contains : portknocking server as a daemon and configuration file [contains sequence of port that must be satisfied and many other configuration detail]
In the client contains : portknocking client.</p>

<p>Is there possible to encrypt sequence port number in file configuration using RSA..If so,, how to do that??</p>

<p>thank you</p>

<p>PS: I am running daemon at server[it reads file configuration] and then I run program on client and specify sequence port number [if port number sequence is same with configuration file then it is connected]..</p>
","<blockquote>
  <p>Is there possible to encrypt sequence port number in file configuration using RSA.</p>
</blockquote>

<p>Yes.</p>

<blockquote>
  <p>how to do that?? </p>
</blockquote>

<p>You might try a bit of searching for a <a href=""http://www.google.com/search?q=python+rsa+library"" rel=""nofollow noreferrer"">python rsa library</a>.</p>

<p>However, if you're planning on doing this on the client side, then realize in order for the client program to decrypt the data, it will have to have a decryption key. If the client program has the decryption key, then anyone with a text editor also has the decryption key (and the code to decrypt it). </p>

<p>If you <em>really</em> meant <a href=""http://www.dlitz.net/software/pycrypto/apidoc/Crypto.PublicKey.RSA-module.html"" rel=""nofollow noreferrer"">RSA</a> encryption, take a look at <a href=""http://www.dlitz.net/software/pycrypto/"" rel=""nofollow noreferrer"">PyCrypto</a>. </p>
","1194","<python><rsa><public-key>","0","1","1","2011-12-15 10:28:48","","4","","110204","","2011-12-15 10:28:48","2010-01-02 02:09:32",""
"33122320","CentOS 7 Server Log In via SSH not asking for key password","<p>I can imagine this could be a little tricky to answer but hopefully someone might be able to help. I have searched around and couldn't find much on this specific question.</p>

<p>Basically, I'm renting a dedicated server running CentOS 7 and so just trying to configure security. It's been a couple of years since I used any SSH and even then it was basic but I'm fumbling my way through.</p>

<p>I open up the SSH connection with Putty logging in as the root user.
Created a new user, given a password and added it to the wheel group.</p>

<p>Then I have created, on my local machine, a public key using ssh-keygen from git for windows.</p>

<p>I added a password to the key when it asked me, again for verification.</p>

<p>Then I transferred the key over to the new user on the server, ran chmod on it and then altered the SSH daemon to not allow root log in.</p>

<p>I reloaded the sshd and tried a new connection. It doesn't let me log in as root, and it does as the new user, and it seems to have the correct privileges. </p>

<p>The question is, how do I know, when logging on, that it is checking the key and do you have any idea why it isn't asking me for the password for the key?</p>

<p>Any info would be appreciated. </p>

<p>Basically, setting it up, I followed this initial guide : <a href=""https://www.digitalocean.com/community/tutorials/initial-server-setup-with-centos-7"" rel=""nofollow"">https://www.digitalocean.com/community/tutorials/initial-server-setup-with-centos-7</a></p>
","<p>Using <code>ssh -v</code> will give you more information about the negotiation and which keys it's finding and sending to the remote server.</p>

<p>I don't know about the passphrase sorry.</p>
","1190","<linux><ssh><public-key><centos7>","-2","0","1","2015-10-14 10:05:49","","0","","","","","2015-10-14 10:01:05",""
"26714704","RSA_Private_Decrypt fails randomly","<p>I am not a crypto expert, but I wrote encrypt/decrypt methods. I don't know what I am doing wrong here. The <strong>encryptKey</strong> method returns the variable text length every time for the same string, which is may be due to RSA_PKCS1_PADDING which I am using, but for same string of text, the <strong>decryptKey</strong> function fails if the encrypted text length is below some threshold.<br></p>

<pre><code>//----------------------Encryption -----------------------
int Asymmetric::encryptKey(unsigned char *data, int data_len, unsigned char *encrypted)
{
    RSA * rsa = createRSA(1); // Loads the public key
    int result = RSA_public_encrypt(data_len,data,encrypted,rsa,padding);
    return result;
}
//-----------------------Decryption -----------------------
int Asymmetric::decryptKey(unsigned char * enc_data,int data_len, unsigned char *decrypted)
{
    RSA * rsa = createRSA(0); // Loads the private key
    int  result = RSA_private_decrypt(data_len,enc_data,decrypted,rsa,padding);
    return result;
}
</code></pre>

<p>How i can overcome this situation?</p>

<p><strong>Edit</strong>: <br>
This code does not work <br></p>

<pre><code>char *myData = ""Sample Text"";
unsigned char *encrypt = (unsigned char*)malloc(RSA_size(rsaPub));
int result = RSA_public_encrypt(RSA_size(rsaPub)-11 ,(unsigned char*)myData,encrypt,rsaPub,padding);
fprintf(stderr, ""\nEnc Size: %d \n"", strlen((const char*)encrypt));
</code></pre>
","<p>If you perform padding, cipher text should have fixed size equal to RSA public key modulus. If you get different size every time, then there is something with your program.</p>

<p>When you perform encryption <code>data</code> must be less than <code>RSA_size(rsa) - 11</code> and <code>encrypted</code> must point to <code>RSA_size(rsa)</code> bytes of memory.</p>

<p><code>strlen(const char * str)</code> computes length of null-terminated string. <code>encrypt</code> is not the string and is not null terminated, so using <code>strlen</code> is not valid here. Luckily for you PKCS#1 padding contains zero bytes, so you don't get segmentation fault.</p>

<p>On the other hand <code>myData</code> <strong>is</strong> a null terminated string. However, you use <code>RSA_size(rsaPub) - 11</code> as its length, which will result in occasional segmentation faults.</p>
","1180","<c++><openssl><public-key-encryption><private-key><public-key>","1","1","1","2014-11-07 12:46:55","26717866","0","","642653","","2014-11-07 12:46:55","2014-11-03 12:46:50",""
"28012582","Server with ssh public key authentication with libssh","<p>Can someone give an example with server with ssh public key authentication with libssh? I found this <a href=""https://github.com/substack/libssh/blob/master/examples/samplesshd-tty.c"" rel=""nofollow"">https://github.com/substack/libssh/blob/master/examples/samplesshd-tty.c</a>, but it's authentication with password. May be someone seen example like this, but with public key authentication on libssh. Or may be someone can change the code below to get it.</p>

<p>I added this to switch(ssh_message_subtype(message))</p>

<pre><code>                  case SSH_AUTH_METHOD_PUBLICKEY:
                        printf(""User %s wants to auth with key %s\n"",
                               ssh_message_auth_user(message),
                               ssh_message_auth_pubkey(message));
                        if(authenticate_pubkey(session, message)){
                            ssh_message_auth_reply_success(message,0);
                            ssh_message_free(message);
                            return 1;
                        }
                        ssh_message_auth_set_methods(message,
                                                     SSH_AUTH_METHOD_PUBLICKEY);
                        // not authenticated, send default message
                        ssh_message_reply_default(message);
                        break;
</code></pre>

<p>and this</p>

<pre><code>static int authenticate_pubkey(ssh_session session, ssh_message message)
{
    int rc;
    std::string us =  ssh_message_auth_user(message);
    rc = ssh_userauth_publickey_auto(session, ssh_message_auth_user(message), NULL);
    if (rc == SSH_AUTH_ERROR)
    {
        fprintf(stderr, ""Authentication failed: %s\n"",
                ssh_get_error(session));
        return SSH_AUTH_ERROR;
    }
    return rc;
}
</code></pre>
","<p>This is not really hard. However I suggest to write a callback based ssh server. See the samplesshd-cb.c example in the libssh source code.</p>

<p>Public key auth:</p>

<p>First read RFC 4252 section 7. It describes how public key auth works. The callback provides you the public key and tells you if it is a probe of the public key or a login.</p>

<p>So first you have to read the authorized keys. Normally you have a file with all the keys in it. You use ssh_pki_import_pubkey_base64() to read the key and then call ssh_key_cmp() to compare it with the public key sent by the client. Depending if it is a probe you return partial success or auth success if it is a login.</p>
","1174","<ssh><server><public-key><libssh>","1","1","1","2015-01-19 13:19:14","28025568","0","","","","","2015-01-18 17:22:03",""
"16206084","Exception when initializing PublicKey from RSA public key stored as a string (works on laptop, not on server)","<p>I have a application I am working on that deals with handling certificates and I am running into a issue where my code works correct when I run in via JUnit tests locally on my laptop but when I actually deploy the code to my server I am getting a exception.  The exception is happening while creating a PublicKey from a RSA public key stored in a String.  I am hoping someone might be able to point me in a direction to look why it fails on the server but works in the Junit.</p>

<p>My RSA Public Key:</p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvNEz3+TStAAndHTc1qwT
NGvZYyB7DD1FshQf+mbQUGJ9HccOXNn5oHB7fWQjODjlDrYyCs7FclSMTLxA3lHX
98QWeWHL2O8t8qrJQQEUWZITmr/ddiNJOOvMeYF0K5if4m84vjgx/pTwwAVyU0Yo
MMXPnRozO8o7zSyRsH4jixALDugrsveEjLQI/cIEFvNjqlhyfumHyJKywNkMH1oJ
4e/f89FkpeDV694lsLs1jguuLLnvroXYJ5Uzeos+F0Pj1zFDUvhWrjVwxsUfAxS8
5uFGTUm6EEl9XiKwi+mgg8ODrY5dh3uE2yKB2T1Qj8BfK55zB8cYbORSsm6/f6Bi
BwIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>My Junit Code: &lt;- Works from laptop</p>

<pre><code>@Test
public void testkey() throws Exception {
    String pem = ""-----BEGIN PUBLIC KEY-----""+
                ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvNEz3+TStAAndHTc1qwT""+
                ""NGvZYyB7DD1FshQf+mbQUGJ9HccOXNn5oHB7fWQjODjlDrYyCs7FclSMTLxA3lHX""+
                ""98QWeWHL2O8t8qrJQQEUWZITmr/ddiNJOOvMeYF0K5if4m84vjgx/pTwwAVyU0Yo""+
        ""MMXPnRozO8o7zSyRsH4jixALDugrsveEjLQI/cIEFvNjqlhyfumHyJKywNkMH1oJ""+
        ""4e/f89FkpeDV694lsLs1jguuLLnvroXYJ5Uzeos+F0Pj1zFDUvhWrjVwxsUfAxS8""+
        ""5uFGTUm6EEl9XiKwi+mgg8ODrY5dh3uE2yKB2T1Qj8BfK55zB8cYbORSsm6/f6Bi""+
        ""BwIDAQAB""+
        ""-----END PUBLIC KEY-----"";
    PublicKey willNotWork = decodeKey(pem); 
}
</code></pre>

<p>My Actual Code: &lt;- Throws exception when run on server</p>

<pre><code>@Override
public PublicKey getKey() {
    PublicKey pk = null;
     try {
        String crt =  ""-----BEGIN PUBLIC KEY-----""+
                ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvNEz3+TStAAndHTc1qwT""+
                ""NGvZYyB7DD1FshQf+mbQUGJ9HccOXNn5oHB7fWQjODjlDrYyCs7FclSMTLxA3lHX""+
                ""98QWeWHL2O8t8qrJQQEUWZITmr/ddiNJOOvMeYF0K5if4m84vjgx/pTwwAVyU0Yo""+
                ""MMXPnRozO8o7zSyRsH4jixALDugrsveEjLQI/cIEFvNjqlhyfumHyJKywNkMH1oJ""+
        ""4e/f89FkpeDV694lsLs1jguuLLnvroXYJ5Uzeos+F0Pj1zFDUvhWrjVwxsUfAxS8""+
        ""5uFGTUm6EEl9XiKwi+mgg8ODrY5dh3uE2yKB2T1Qj8BfK55zB8cYbORSsm6/f6Bi""+
        ""BwIDAQAB""+
        ""-----END PUBLIC KEY-----"";
        System.out.append(""crt == "" + crt);
        pk = decodeKey(crt);
    }  catch(Exception ex){
        System.out.println(""getKey caught: "" + ex.getMessage()); 
    }  
    return pk;
}
</code></pre>

<p>decodeKey code:</p>

<pre><code>public PublicKey decodeKey(String text) throws CryptographyException {
    String content = text;
    if( text.contains(""-----BEGIN PUBLIC KEY-----"") ) {
      content = text.replace(""-----BEGIN PUBLIC KEY-----"", """").replace(""-----END PUBLIC KEY-----"", """");
    }
    if( text.contains(""-----BEGIN RSA PUBLIC KEY-----"") ) {
      content = text.replace(""-----BEGIN RSA PUBLIC KEY-----"", """").replace(""-----END RSA PUBLIC KEY-----"", """");
    }
    byte[] der = Base64.decodeBase64(content);
    return decodeDerKey(der);
}

public PublicKey decodeDerKey(byte[] publicKeyBytes) throws CryptographyException {
   try {
      KeyFactory factory = KeyFactory.getInstance(""RSA""); 
      PublicKey publicKey  = factory.generatePublic(
                                 new X509EncodedKeySpec(publicKeyBytes)); 
      return publicKey;
    }
    catch(Exception e) {
        throw new CryptographyException(e);
    }
}
</code></pre>

<p>Here's the exception that is thrown when I run my code on the server:</p>

<pre class=""lang-none prettyprint-override""><code>Could not parse certificate: java.io.IOException: DerInputStream.getLength():
lengthTag=111, too big`
</code></pre>

<p>So I am guessing is has to be some sort of difference between my laptop and the server.  I have verified that both are running basically the same version of Java (""1.7.0_17"").  I also checked the provider of the <code>KeyFactory</code> and they are the same as well. So where do I look from here? </p>
","","1162","<java><rsa><public-key>","0","","0","2013-04-29 16:07:21","","5","1","705170","","2013-04-25 17:54:39","2013-04-25 03:52:21",""
"3280929","iPhone SDK 4.0: Get publicKey and privateKey from a certificate / identity profile stored in KeyChain","<p>I am trying to get the public and private Key from a certificate which i have already installed on the iPhone. (It is shown unter Settings -> General -> Profiles)</p>

<p>I need this keys for encryption sensitive data. (RSA Algorithm)</p>

<p>Up to now i have found no way to get access to the keys. 
Is it even possible ?</p>

<p>If not: What is the best possible way to realize my problem otherwise ?</p>

<p>Thank you for all helpful answers.</p>
","<p>1.) You can't get the private key of the profile for the simple reason, that your private key is not stored in the profile, it is only signed with it.</p>

<p>Instead consider getting familiar with the Security.framework. This <a href=""https://stackoverflow.com/questions/788569/rsa-encryption-decryption-in-iphone"">post</a> should give you a start</p>
","1157","<iphone><certificate><rsa><public-key><private-key>","0","0","1","2010-07-19 12:46:24","","0","","","","","2010-07-19 12:15:01",""
"40618715","Setting up TrustKit","<p>I am working on an application that quickly needs to include <code>https</code> for network communication. Our concern over this came about when we noticed we are sending all of our user credentials over the <code>URL</code>. This isn't good because then our usernames and passwords are out there in the open. After a lot of research it seems that pinning the public key of the server's SSL certificate is the way to go. I have decided to use <code>TrustKit</code> to pin the public key of the certificate so we do not have to pin the entire certificate in the application. That way we do not have to keep replacing the certificate overtime it expires, thus not having to build a new IPA or submit to Apple. In order to get this up and running, I need a few questions answered.</p>

<p>So I understand there are three main things I need to get started with <code>TrustKit</code>.</p>

<p><strong>1.</strong> I need to know the <strong>domains</strong> that we are going to be using and include them in our info.plist.</p>

<ul>
<li><strong>QUESTION</strong>: Does the server at this domain need to do any preparation in order to get <code>TrustKit</code> what it needs to handle everything?</li>
</ul>

<p><strong>2.</strong> I need 2 public key <strong>hashes</strong> that also need to be included in the info.plist.</p>

<ul>
<li><strong>QUESTION</strong>: How do I extract the public key hashes from the certificate? From where do I get these hashes?</li>
</ul>

<p><strong>3.</strong> I need to know what public key <strong>algorithm</strong> to use.</p>

<ul>
<li><strong>QUESTION</strong>: What is this? And how do I find out which one to use?</li>
</ul>

<hr>

<p>Once all of this is in place, is there anything else I need to do appwise to be able to make sure <code>TrustKit</code> does it's job longterm?</p>
","<ol>
<li><p>The server itself does not need to do anything special but your ops/infrastructure team does; see 2. and the backup pin.</p></li>
<li><p>TrustKit provides a Python script to generate the hash and algorithm you're looking for : <a href=""https://github.com/datatheorem/TrustKit/blob/master/get_pin_from_certificate.py"" rel=""nofollow noreferrer"">https://github.com/datatheorem/TrustKit/blob/master/get_pin_from_certificate.py</a> . You need use the script on your domain's CA certificate (this will be the first hash), and then on another CA certificate, from which you bought a backup certificate for your domain. This backup pin is needed in case you need to quickly rotate the (first) certificate on your server, without bricking your App. This is explained in more details here: <a href=""https://noncombatant.org/2015/05/01/about-http-public-key-pinning/"" rel=""nofollow noreferrer"">https://noncombatant.org/2015/05/01/about-http-public-key-pinning/</a> .</p></li>
<li><p>The script described in 2. also returns the algorithm. It is the algorithm (RSA, ECDSA) of the public key that's embedded in the server certificate. This is needed by TrustKit because iOS does not provide the APIs to automatically detect the certificate's algorithm.</p></li>
</ol>
","1156","<ios><ssl><public-key><pinning>","2","2","2","2017-05-11 19:27:53","40655653","0","","","","","2016-11-15 20:05:28",""
"40618715","Setting up TrustKit","<p>I am working on an application that quickly needs to include <code>https</code> for network communication. Our concern over this came about when we noticed we are sending all of our user credentials over the <code>URL</code>. This isn't good because then our usernames and passwords are out there in the open. After a lot of research it seems that pinning the public key of the server's SSL certificate is the way to go. I have decided to use <code>TrustKit</code> to pin the public key of the certificate so we do not have to pin the entire certificate in the application. That way we do not have to keep replacing the certificate overtime it expires, thus not having to build a new IPA or submit to Apple. In order to get this up and running, I need a few questions answered.</p>

<p>So I understand there are three main things I need to get started with <code>TrustKit</code>.</p>

<p><strong>1.</strong> I need to know the <strong>domains</strong> that we are going to be using and include them in our info.plist.</p>

<ul>
<li><strong>QUESTION</strong>: Does the server at this domain need to do any preparation in order to get <code>TrustKit</code> what it needs to handle everything?</li>
</ul>

<p><strong>2.</strong> I need 2 public key <strong>hashes</strong> that also need to be included in the info.plist.</p>

<ul>
<li><strong>QUESTION</strong>: How do I extract the public key hashes from the certificate? From where do I get these hashes?</li>
</ul>

<p><strong>3.</strong> I need to know what public key <strong>algorithm</strong> to use.</p>

<ul>
<li><strong>QUESTION</strong>: What is this? And how do I find out which one to use?</li>
</ul>

<hr>

<p>Once all of this is in place, is there anything else I need to do appwise to be able to make sure <code>TrustKit</code> does it's job longterm?</p>
","<p>To get the Algorithm and Hash from certificate (and more information) use</p>

<p><a href=""https://www.ssllabs.com/ssltest/"" rel=""nofollow noreferrer"">https://www.ssllabs.com/ssltest/</a></p>
","1156","<ios><ssl><public-key><pinning>","2","2","2","2017-05-11 19:27:53","40655653","0","","","","","2016-11-15 20:05:28",""
"6370470","Help verifying RSA signed text with Python","<p>Using Java I have created RSA keypairs. Using Java I can use these keys to sign and verify some text. I can also ""export"" these keys in PEM format and load them into a Python test script. Once in the Python script, I can use these keys to sign and verify some text using M2Crypto.</p>

<p>I have not yet been able to verify in Python the signature I created in Java.</p>

<p>Right now I am just trying to get cross-platform signing and verifying to work.</p>

<p>Here is Java snippet:</p>



<pre class=""lang-java prettyprint-override""><code>Signature sig = Signature.getInstance(""MD5WithRSA"");
sig.initSign(key.getPrivate());
sig.update(""This is a message."".getBytes(""UTF8""));
byte[] signatureBytes = sig.sign();     
return Base64.encodeBytes(signatureBytes, Base64.DO_BREAK_LINES);
</code></pre>

<p>Which generates:</p>



<pre class=""lang-none prettyprint-override""><code>PIp4eLhA941xmpdqu7j60731R9oWSNWcHvwoVADKxABGoUE02eDS0qZ4yQD2vYBdRDXXxHV4UjtW
YQwv9nsOzCBWeDQ0vv6W0dLVfTBuk79On7AALuwnTFr8s0y5ZN5RINvPPR60mwONav26ZbPj4ub3
NZqUS/zkqyO8Z8D2zUjk0pqAhWDGbFBaWPQJBPOY9iRt8GlsAUkGfYGeIx9DNU8aiJmQ3NnUHbs4
5NEr3xydbNJjwK96kkNJ9vyKZRfnNd4eW2UllPiwJSRQgefCQfh79ZuiYeQEuk3HMh7Si4iYl7uU
rWCgYFl4fGV1X/k+BSHR4ZZFWGQ3IPfafYHyNw==
</code></pre>

<p>And here is the public key:</p>



<pre class=""lang-none prettyprint-override""><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAg+N7xQHVHU3VHMZ9VGFdUf6ud3rAL8YS
sfWv2zFMnKAjh6XacwDGX6jJR/0/pyDriRGw/uodBDSFvgn9XEM/srMYtbJ1KQ9R9ChDifixF3Hx
yzbzPRvFoEfZnS/63+d1r0wnafz7xx0eDEYE3TgRKTMikwOsuIOFWa7GhA4BvP7ad79bI5ORJdLu
9Je+k+4dbt0xk2t7YopxYmyU+4zhZMxuthJTr69rXgqhgsCRdK6kFIGm3YuJ1WQcci8OVwH+3o7F
XzJHpSTxH57m6PX5lXaywIDCbUauTpBV3w+0vTeGI/2o+U40qhLBkpZT9GSVKxgXl5a0XxrkwTGn
61XZqQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>Then in Python the key is loaded and the signature is attempted to be verified:</p>



<pre class=""lang-python prettyprint-override""><code>from M2Crypto import RSA, EVP
pub_key = RSA.load_pub_key('public_key.pem')
verify_evp = EVP.PKey()
verify_evp.assign_rsa(pub_key)
verify_evp.verify_init()
verify_evp.verify_update(""This is a message."")
if verify_evp.verify_final(sig_string.decode('base64')) == 1:
    print ""Good""
else:
    print ""Bad""
</code></pre>

<p>And this does not verify. I suspect it is some leading or trailing characters or encoding weirdness that I don't understand.</p>

<p>I have no particular attachement to M2Crypto and have played a bit with the gdata.tlslite modules as well.</p>

<p>Please note that the keys are working, and that the text and signature above verify in Java, and the keys (public and private) can be used within Python to sign and verify text. The problem is somewhere in how Java-generated signature and/or the message text is getting into the Python code.</p>

<p>What am I doing wrong?</p>
","<p><code>M2Crypto.EVP</code> defaults to 'sha1' (SHA1) and you're using <code>MD5WithRSA</code>. I think you should switch <code>SHA1WithRSA</code> (MD5 is a <strong>very</strong> weak algorithm).</p>
","1151","<java><python><rsa><public-key><m2crypto>","1","2","1","2011-06-20 19:26:47","6416345","3","","675043","","2011-06-16 10:41:43","2011-06-16 10:35:11",""
"31519507","how to verify the integrity of a Debian CD image?","<p>I want to verify the integrity of the file <code>SHA512SUMS</code> which I downloaded from <a href=""http://cdimage.debian.org/debian-cd/8.1.0/i386/iso-cd/"" rel=""nofollow"">http://cdimage.debian.org/debian-cd/8.1.0/i386/iso-cd/</a> using the detached signature <code>SHA512SUMS.sign</code> . How can I obtain the Debian public key? What is the right keyserver?</p>
","<p>It seems that <code>gpg --keyring /usr/share/keyrings/debian-role-keys.gpg --verify SHA512SUMS.sign SHA512SUMS</code> works</p>
","1148","<security><debian><public-key>","0","0","2","2016-03-05 21:43:23","35820272","2","","","","","2015-07-20 14:46:32",""
"31519507","how to verify the integrity of a Debian CD image?","<p>I want to verify the integrity of the file <code>SHA512SUMS</code> which I downloaded from <a href=""http://cdimage.debian.org/debian-cd/8.1.0/i386/iso-cd/"" rel=""nofollow"">http://cdimage.debian.org/debian-cd/8.1.0/i386/iso-cd/</a> using the detached signature <code>SHA512SUMS.sign</code> . How can I obtain the Debian public key? What is the right keyserver?</p>
","<p>I found that whonix has much clearer instructions for verifying CD images.
<a href=""https://www.whonix.org/wiki/Debian"" rel=""nofollow"">https://www.whonix.org/wiki/Debian</a></p>

<p>Steps:</p>

<ol>
<li>Open the URL path to the directory containing the desired CD image.  This directory will also contain the checksum files.  (eg. <a href=""http://cdimage.debian.org/debian-cd/8.3.0/amd64/iso-cd/"" rel=""nofollow"">http://cdimage.debian.org/debian-cd/8.3.0/amd64/iso-cd/</a> for Debian 8.3.0)</li>
<li>Download your CD image as well as the appropriate checksum and checksum signature.  (eg. SHA512SUMS and SHA512SUMS.sign)</li>
<li>Install the Debian keyring.  (sudo apt-get install debian-keyring)</li>
<li>Verify the checksum signature.  (gpg --no-default-keyring --keyring /usr/share/keyrings/debian-role-keys.gpg --verify SHA512SUMS.sign)  As long as ""gpg: Good signature"" is contained, you can ignore ""This key is not certified with a trusted signature!"" warnings.</li>
<li>Verify the CD image matches the checksum.  (sha512sum -c SHA512SUMS)  This must show ""debian-8.3.0-amd64-netinst.iso: OK"" or the equivalent for the CD image you downloaded.  All other images will have ""no such file"" warnings, that's fine.</li>
</ol>

<p>If (and only if) your CD image checks out as OK, you have successfully verified your image!</p>
","1148","<security><debian><public-key>","0","3","2","2016-03-05 21:43:23","35820272","2","","","","","2015-07-20 14:46:32",""
"26602335","How to get https web site certificate public key","<p>I use <code>SSL_get_peer_certificate()</code>, <code>X509_get_pubkey()</code> API to get web site (www.google.com) https certificate public key, when I dump public key as below:  </p>

<pre><code>00:bb:cb:8a:0e:b6:df:3f:0a:ba:a4:7b:20:9f:e9:
0a:f2:81:04:84:ed:d0:9e:c9:fd:2a:ec:39:9f:11:
56:c3:2e:33:39:8f:da:32:d7:84:54:55:5c:99:2f:
56:61:73:17:2d:26:15:bc:8b:89:12:b8:78:73:17:
1d:c5:32:a2:e3:f1:b5:c4:d8:41:67:41:72:16:74:
81:c8:4f:f3:a8:57:31:cd:69:73:7b:96:41:2d:be:
66:15:f0:eb:f7:33:7c:79:4a:00:40:0e:c6:df:71:
66:1a:a7:12:79:e8:7e:89:c2:04:cc:09:b0:1f:9b:
67:81:ec:5f:26:2d:09:c3:ce:1c:a6:96:e9:0f:de:
6f:aa:b1:07:82:be:a9:18:2e:2b:a5:c5:17:a1:91:
75:7b:0a:86:cc:1d:bc:91:10:1d:5b:3b:fd:49:37:
04:65:5a:c8:4a:41:17:37:63:ab:a1:83:11:58:c8:
24:74:c2:e4:ae:8e:d6:90:98:5a:d7:b7:96:4e:d4:
d8:21:e9:45:43:0b:e0:0b:07:dd:0f:79:47:4a:06:
44:17:97:59:c9:b1:e0:1b:2b:55:d8:bf:3c:07:f1:
be:56:5e:da:53:78:e2:c3:cb:6a:21:f5:83:66:66:
bd:eb:6f:27:da:aa:91:30:93:eb:40:52:e0:24:a5:
4d:b9
</code></pre>

<p>I find which is not same as I see in browser (In Chrome, click padlock in URL address bar, <code>-&gt; Connection -&gt; Certificate information -&gt; Certificate-&gt;Details -&gt; Public Key (field)</code>).  as below</p>

<pre><code>30 82 01 0a 02 82 01 01 00 bb cb 8a 0e b6 df 
3f 0a ba a4 7b 20 9f e9 0a f2 81 04 84 ed d0 
9e c9 fd 2a ec 39 9f 11 56 c3 2e 33 39 8f da 
32 d7 84 54 55 5c 99 2f 56 61 73 17 2d 26 15 
bc 8b 89 12 b8 78 73 17 1d c5 32 a2 e3 f1 b5 
c4 d8 41 67 41 72 16 74 81 c8 4f f3 a8 57 31 
cd 69 73 7b 96 41 2d be 66 15 f0 eb f7 33 7c 
79 4a 00 40 0e c6 df 71 66 1a a7 12 79 e8 7e 
89 c2 04 cc 09 b0 1f 9b 67 81 ec 5f 26 2d 09 
c3 ce 1c a6 96 e9 0f de 6f aa b1 07 82 be a9 
18 2e 2b a5 c5 17 a1 91 75 7b 0a 86 cc 1d bc 
91 10 1d 5b 3b fd 49 37 04 65 5a c8 4a 41 17 
37 63 ab a1 83 11 58 c8 24 74 c2 e4 ae 8e d6 
90 98 5a d7 b7 96 4e d4 d8 21 e9 45 43 0b e0 
0b 07 dd 0f 79 47 4a 06 44 17 97 59 c9 b1 e0 
1b 2b 55 d8 bf 3c 07 f1 be 56 5e da 53 78 e2 
c3 cb 6a 21 f5 83 66 66 bd eb 6f 27 da aa 91 
30 93 eb 40 52 e0 24 a5 4d b9 02 03 01 00 01
</code></pre>

<p>Why these two public key are different?<br>
I am curious about what are these two kind of public key data? </p>

<p><strong>Update:</strong><br>
Update public key field value from Chrome browser.</p>
","<p>Very interesting. I did some investigation in that field. </p>

<p>The very first <strong>cert in chromium chain</strong> you have provided: <code>30 82 01 0a 02 82 01 01 00 b2 56 ae e5 f2 a3 (...)</code> <strong>is not pointing to ""*.google.com""</strong> cert as you expected <strong>but to GeoTrust Global CA Cert</strong> (<a href=""https://www.tbs-certificates.co.uk/FAQ/en/602.html"" rel=""nofollow"">https://www.tbs-certificates.co.uk/FAQ/en/602.html</a>, details here - <a href=""http://geotrust.tbs-certificats.com/GeoTrust_Global_CA.cer"" rel=""nofollow"">http://geotrust.tbs-certificats.com/GeoTrust_Global_CA.cer</a>)</p>

<p>I've extracted pubkey from www.google.com:443 and then converted it to 'modulus' </p>

<pre><code>$ openssl s_client -connect www.google.com:443 | openssl x509 -pubkey -noout
depth=2 C = US, O = GeoTrust Inc., CN = GeoTrust Global CA
verify error:num=20:unable to get local issuer certificate
verify return:0
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu8uKDrbfPwq6pHsgn+kK
8oEEhO3Qnsn9Kuw5nxFWwy4zOY/aMteEVFVcmS9WYXMXLSYVvIuJErh4cxcdxTKi
4/G1xNhBZ0FyFnSByE/zqFcxzWlze5ZBLb5mFfDr9zN8eUoAQA7G33FmGqcSeeh+
icIEzAmwH5tngexfJi0Jw84cppbpD95vqrEHgr6pGC4rpcUXoZF1ewqGzB28kRAd
Wzv9STcEZVrISkEXN2OroYMRWMgkdMLkro7WkJha17eWTtTYIelFQwvgCwfdD3lH
SgZEF5dZybHgGytV2L88B/G+Vl7aU3jiw8tqIfWDZma9628n2qqRMJPrQFLgJKVN
uQIDAQAB
-----END PUBLIC KEY-----

$ openssl rsa -pubin -inform PEM -text -noout &lt; public.key
Public-Key: (2048 bit)
Modulus:
    00:bb:cb:8a:0e:b6:df:3f:0a:ba:a4:7b:20:9f:e9:
    0a:f2:81:04:84:ed:d0:9e:c9:fd:2a:ec:39:9f:11:
    56:c3:2e:33:39:8f:da:32:d7:84:54:55:5c:99:2f:
    56:61:73:17:2d:26:15:bc:8b:89:12:b8:78:73:17:
    1d:c5:32:a2:e3:f1:b5:c4:d8:41:67:41:72:16:74:
    81:c8:4f:f3:a8:57:31:cd:69:73:7b:96:41:2d:be:
    66:15:f0:eb:f7:33:7c:79:4a:00:40:0e:c6:df:71:
    66:1a:a7:12:79:e8:7e:89:c2:04:cc:09:b0:1f:9b:
    67:81:ec:5f:26:2d:09:c3:ce:1c:a6:96:e9:0f:de:
    6f:aa:b1:07:82:be:a9:18:2e:2b:a5:c5:17:a1:91:
    75:7b:0a:86:cc:1d:bc:91:10:1d:5b:3b:fd:49:37:
    04:65:5a:c8:4a:41:17:37:63:ab:a1:83:11:58:c8:
    24:74:c2:e4:ae:8e:d6:90:98:5a:d7:b7:96:4e:d4:
    d8:21:e9:45:43:0b:e0:0b:07:dd:0f:79:47:4a:06:
    44:17:97:59:c9:b1:e0:1b:2b:55:d8:bf:3c:07:f1:
    be:56:5e:da:53:78:e2:c3:cb:6a:21:f5:83:66:66:
    bd:eb:6f:27:da:aa:91:30:93:eb:40:52:e0:24:a5:
    4d:b9
Exponent: 65537 (0x10001)
</code></pre>

<p>Conclusions - good, it looks like we both work on the same pubkey (www.google.com:443)</p>

<p>Then I have created example SSL connection to www.google.com:443 (python/M2Crypt) and listed ""peer cert chain"", here is the output:</p>

<pre><code>Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1227750 (0x12bbe6)
    Signature Algorithm: sha1WithRSAEncryption
        Issuer: C=US, O=Equifax, OU=Equifax Secure Certificate Authority
        Validity
            Not Before: May 21 04:00:00 2002 GMT
            Not After : Aug 21 04:00:00 2018 GMT
        Subject: C=US, O=GeoTrust Inc., CN=GeoTrust Global CA
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:da:cc:18:63:30:fd:f4:17:23:1a:56:7e:5b:df:
                    3c:6c:38:e4:71:b7:78:91:d4:bc:a1:d8:4c:f8:a8:
                    43:b6:03:e9:4d:21:07:08:88:da:58:2f:66:39:29:
                    bd:05:78:8b:9d:38:e8:05:b7:6a:7e:71:a4:e6:c4:
                    60:a6:b0:ef:80:e4:89:28:0f:9e:25:d6:ed:83:f3:
                    ad:a6:91:c7:98:c9:42:18:35:14:9d:ad:98:46:92:
                    2e:4f:ca:f1:87:43:c1:16:95:57:2d:50:ef:89:2d:
                    80:7a:57:ad:f2:ee:5f:6b:d2:00:8d:b9:14:f8:14:
                    15:35:d9:c0:46:a3:7b:72:c8:91:bf:c9:55:2b:cd:
                    d0:97:3e:9c:26:64:cc:df:ce:83:19:71:ca:4e:e6:
                    d4:d5:7b:a9:19:cd:55:de:c8:ec:d2:5e:38:53:e5:
                    5c:4f:8c:2d:fe:50:23:36:fc:66:e6:cb:8e:a4:39:
                    19:00:b7:95:02:39:91:0b:0e:fe:38:2e:d1:1d:05:
                    9a:f6:4d:3e:6f:0f:07:1d:af:2c:1e:8f:60:39:e2:
                    fa:36:53:13:39:d4:5e:26:2b:db:3d:a8:14:bd:32:
                    eb:18:03:28:52:04:71:e5:ab:33:3d:e1:38:bb:07:
                    36:84:62:9c:79:ea:16:30:f4:5f:c0:2b:e8:71:6b:
                    e4:f9
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Authority Key Identifier: 
                keyid:48:E6:68:F9:2B:D2:B2:95:D7:47:D8:23:20:10:4F:33:98:90:9F:D4

            X509v3 Subject Key Identifier: 
                C0:7A:98:68:8D:89:FB:AB:05:64:0C:11:7D:AA:7D:65:B8:CA:CC:4E
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 CRL Distribution Points: 

                Full Name:
                  URI:http://crl.geotrust.com/crls/secureca.crl

            X509v3 Certificate Policies: 
                Policy: X509v3 Any Policy
                  CPS: https://www.geotrust.com/resources/repository

    Signature Algorithm: sha1WithRSAEncryption
         76:e1:12:6e:4e:4b:16:12:86:30:06:b2:81:08:cf:f0:08:c7:
         c7:71:7e:66:ee:c2:ed:d4:3b:1f:ff:f0:f0:c8:4e:d6:43:38:
         b0:b9:30:7d:18:d0:55:83:a2:6a:cb:36:11:9c:e8:48:66:a3:
         6d:7f:b8:13:d4:47:fe:8b:5a:5c:73:fc:ae:d9:1b:32:19:38:
         ab:97:34:14:aa:96:d2:eb:a3:1c:14:08:49:b6:bb:e5:91:ef:
         83:36:eb:1d:56:6f:ca:da:bc:73:63:90:e4:7f:7b:3e:22:cb:
         3d:07:ed:5f:38:74:9c:e3:03:50:4e:a1:af:98:ee:61:f2:84:
         3f:12

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 146038 (0x23a76)
    Signature Algorithm: sha1WithRSAEncryption
        Issuer: C=US, O=GeoTrust Inc., CN=GeoTrust Global CA
        Validity
            Not Before: Apr  5 15:15:55 2013 GMT
            Not After : Dec 31 23:59:59 2016 GMT
        Subject: C=US, O=Google Inc, CN=Google Internet Authority G2
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:9c:2a:04:77:5c:d8:50:91:3a:06:a3:82:e0:d8:
                    50:48:bc:89:3f:f1:19:70:1a:88:46:7e:e0:8f:c5:
                    f1:89:ce:21:ee:5a:fe:61:0d:b7:32:44:89:a0:74:
                    0b:53:4f:55:a4:ce:82:62:95:ee:eb:59:5f:c6:e1:
                    05:80:12:c4:5e:94:3f:bc:5b:48:38:f4:53:f7:24:
                    e6:fb:91:e9:15:c4:cf:f4:53:0d:f4:4a:fc:9f:54:
                    de:7d:be:a0:6b:6f:87:c0:d0:50:1f:28:30:03:40:
                    da:08:73:51:6c:7f:ff:3a:3c:a7:37:06:8e:bd:4b:
                    11:04:eb:7d:24:de:e6:f9:fc:31:71:fb:94:d5:60:
                    f3:2e:4a:af:42:d2:cb:ea:c4:6a:1a:b2:cc:53:dd:
                    15:4b:8b:1f:c8:19:61:1f:cd:9d:a8:3e:63:2b:84:
                    35:69:65:84:c8:19:c5:46:22:f8:53:95:be:e3:80:
                    4a:10:c6:2a:ec:ba:97:20:11:c7:39:99:10:04:a0:
                    f0:61:7a:95:25:8c:4e:52:75:e2:b6:ed:08:ca:14:
                    fc:ce:22:6a:b3:4e:cf:46:03:97:97:03:7e:c0:b1:
                    de:7b:af:45:33:cf:ba:3e:71:b7:de:f4:25:25:c2:
                    0d:35:89:9d:9d:fb:0e:11:79:89:1e:37:c5:af:8e:
                    72:69
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Authority Key Identifier: 
                keyid:C0:7A:98:68:8D:89:FB:AB:05:64:0C:11:7D:AA:7D:65:B8:CA:CC:4E

            X509v3 Subject Key Identifier: 
                4A:DD:06:16:1B:BC:F6:68:B5:76:F5:81:B6:BB:62:1A:BA:5A:81:2F
            X509v3 Basic Constraints: critical
                CA:TRUE, pathlen:0
            X509v3 Key Usage: critical
                Certificate Sign, CRL Sign
            X509v3 CRL Distribution Points: 

                Full Name:
                  URI:http://g.symcb.com/crls/gtglobal.crl

            Authority Information Access: 
                OCSP - URI:http://g.symcd.com

            X509v3 Certificate Policies: 
                Policy: 1.3.6.1.4.1.11129.2.5.1

    Signature Algorithm: sha1WithRSAEncryption
         27:8c:cf:e9:c7:3b:be:c0:6f:e8:96:84:fb:9c:5c:5d:90:e4:
         77:db:8b:32:60:9b:65:d8:85:26:b5:ba:9f:1e:de:64:4e:1f:
         c6:c8:20:5b:09:9f:ab:a9:e0:09:34:45:a2:65:25:37:3d:7f:
         5a:6f:20:cc:f9:fa:f1:1d:8f:10:0c:02:3a:c4:c9:01:76:96:
         be:9b:f9:15:d8:39:d1:c5:03:47:76:b8:8a:8c:31:d6:60:d5:
         e4:8f:db:fa:3c:c6:d5:98:28:f8:1c:8f:17:91:34:cb:cb:52:
         7a:d1:fb:3a:20:e4:e1:86:b1:d8:18:0f:be:d6:87:64:8d:c5:
         0a:25:42:51:ef:b2:38:b8:e0:1d:d0:e1:fc:e6:f4:af:46:ba:
         ef:c0:bf:c5:b4:05:f5:94:75:0c:fe:a2:be:02:ba:ea:86:5b:
         f9:35:b3:66:f5:c5:8d:85:a1:1a:23:77:1a:19:17:54:13:60:
         9f:0b:e1:b4:9c:28:2a:f9:ae:02:34:6d:25:93:9c:82:a8:17:
         7b:f1:85:b0:d3:0f:58:e1:fb:b1:fe:9c:a1:a3:e8:fd:c9:3f:
         f4:d7:71:dc:bd:8c:a4:19:e0:21:23:23:55:13:8f:a4:16:02:
         09:7e:b9:af:ee:db:53:64:bd:71:2f:b9:39:ce:30:b7:b4:bc:
         54:e0:47:07

Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 299822383261939216 (0x4292ede7a09f610)
    Signature Algorithm: sha1WithRSAEncryption
        Issuer: C=US, O=Google Inc, CN=Google Internet Authority G2
        Validity
            Not Before: Oct 15 10:57:54 2014 GMT
            Not After : Jan 13 00:00:00 2015 GMT
        Subject: C=US, ST=California, L=Mountain View, O=Google Inc, CN=www.google.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:bb:cb:8a:0e:b6:df:3f:0a:ba:a4:7b:20:9f:e9:
                    0a:f2:81:04:84:ed:d0:9e:c9:fd:2a:ec:39:9f:11:
                    56:c3:2e:33:39:8f:da:32:d7:84:54:55:5c:99:2f:
                    56:61:73:17:2d:26:15:bc:8b:89:12:b8:78:73:17:
                    1d:c5:32:a2:e3:f1:b5:c4:d8:41:67:41:72:16:74:
                    81:c8:4f:f3:a8:57:31:cd:69:73:7b:96:41:2d:be:
                    66:15:f0:eb:f7:33:7c:79:4a:00:40:0e:c6:df:71:
                    66:1a:a7:12:79:e8:7e:89:c2:04:cc:09:b0:1f:9b:
                    67:81:ec:5f:26:2d:09:c3:ce:1c:a6:96:e9:0f:de:
                    6f:aa:b1:07:82:be:a9:18:2e:2b:a5:c5:17:a1:91:
                    75:7b:0a:86:cc:1d:bc:91:10:1d:5b:3b:fd:49:37:
                    04:65:5a:c8:4a:41:17:37:63:ab:a1:83:11:58:c8:
                    24:74:c2:e4:ae:8e:d6:90:98:5a:d7:b7:96:4e:d4:
                    d8:21:e9:45:43:0b:e0:0b:07:dd:0f:79:47:4a:06:
                    44:17:97:59:c9:b1:e0:1b:2b:55:d8:bf:3c:07:f1:
                    be:56:5e:da:53:78:e2:c3:cb:6a:21:f5:83:66:66:
                    bd:eb:6f:27:da:aa:91:30:93:eb:40:52:e0:24:a5:
                    4d:b9
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Extended Key Usage: 
                TLS Web Server Authentication, TLS Web Client Authentication
            X509v3 Subject Alternative Name: 
                DNS:www.google.com
            Authority Information Access: 
                CA Issuers - URI:http://pki.google.com/GIAG2.crt
                OCSP - URI:http://clients1.google.com/ocsp

            X509v3 Subject Key Identifier: 
                65:C6:9C:EA:E1:99:17:E6:31:43:41:43:C8:9E:EA:94:D8:25:71:2E
            X509v3 Basic Constraints: critical
                CA:FALSE
            X509v3 Authority Key Identifier: 
                keyid:4A:DD:06:16:1B:BC:F6:68:B5:76:F5:81:B6:BB:62:1A:BA:5A:81:2F

            X509v3 Certificate Policies: 
                Policy: 1.3.6.1.4.1.11129.2.5.1

            X509v3 CRL Distribution Points: 

                Full Name:
                  URI:http://pki.google.com/GIAG2.crl

    Signature Algorithm: sha1WithRSAEncryption
         4d:bf:54:df:29:e6:f6:9d:7f:43:f7:91:13:ca:9c:98:41:70:
         ea:89:bc:87:a6:92:dd:e5:c6:46:fd:11:da:15:07:54:bd:e2:
         70:0f:97:f8:6a:b1:1c:d3:81:d5:c8:e6:39:b7:ee:c1:18:0f:
         45:44:68:17:09:8a:76:6a:51:38:ba:27:33:e4:9b:5d:17:03:
         e6:70:72:91:24:b9:84:e7:eb:01:97:21:11:2e:8e:61:ce:57:
         fa:4b:92:ba:7c:62:4a:54:fa:77:8e:4f:a9:3a:7a:a4:45:df:
         95:4a:12:03:ed:9e:e8:73:d1:b0:9b:b4:7f:e6:5f:9b:62:59:
         74:d7:48:06:11:87:1b:c6:b0:e4:83:39:56:e3:75:a4:26:12:
         35:45:66:b8:4f:7b:cb:23:5f:15:2e:b0:10:44:12:67:82:24:
         19:28:85:5b:1e:c6:0c:87:2a:55:64:67:dc:b0:0e:27:87:16:
         e2:aa:72:69:77:a1:fa:d4:d1:75:ec:51:1f:95:e1:5c:a8:9c:
         a4:ad:19:5a:04:f7:42:dd:a7:9d:47:96:40:c6:7f:55:74:54:
         cb:60:79:ca:82:72:d5:7b:b2:3b:28:fb:ef:7c:eb:16:6b:f6:
         cc:4b:1e:0a:ff:79:69:30:c9:19:07:7a:dc:51:26:06:8f:58:
         dc:4e:55:cf
</code></pre>

<p>Conclusions - it looks like my connection is using <code>itermediate</code> CA cert (GeoTrust Global CA (cross), <a href=""https://www.tbs-certificates.co.uk/FAQ/en/615.html"" rel=""nofollow"">https://www.tbs-certificates.co.uk/FAQ/en/615.html</a>)</p>
","1145","<c><ssl><openssl><public-key>","0","1","2","2014-10-30 09:10:39","26648930","2","0","1337961","","2014-10-29 06:44:46","2014-10-28 06:44:25",""
"26602335","How to get https web site certificate public key","<p>I use <code>SSL_get_peer_certificate()</code>, <code>X509_get_pubkey()</code> API to get web site (www.google.com) https certificate public key, when I dump public key as below:  </p>

<pre><code>00:bb:cb:8a:0e:b6:df:3f:0a:ba:a4:7b:20:9f:e9:
0a:f2:81:04:84:ed:d0:9e:c9:fd:2a:ec:39:9f:11:
56:c3:2e:33:39:8f:da:32:d7:84:54:55:5c:99:2f:
56:61:73:17:2d:26:15:bc:8b:89:12:b8:78:73:17:
1d:c5:32:a2:e3:f1:b5:c4:d8:41:67:41:72:16:74:
81:c8:4f:f3:a8:57:31:cd:69:73:7b:96:41:2d:be:
66:15:f0:eb:f7:33:7c:79:4a:00:40:0e:c6:df:71:
66:1a:a7:12:79:e8:7e:89:c2:04:cc:09:b0:1f:9b:
67:81:ec:5f:26:2d:09:c3:ce:1c:a6:96:e9:0f:de:
6f:aa:b1:07:82:be:a9:18:2e:2b:a5:c5:17:a1:91:
75:7b:0a:86:cc:1d:bc:91:10:1d:5b:3b:fd:49:37:
04:65:5a:c8:4a:41:17:37:63:ab:a1:83:11:58:c8:
24:74:c2:e4:ae:8e:d6:90:98:5a:d7:b7:96:4e:d4:
d8:21:e9:45:43:0b:e0:0b:07:dd:0f:79:47:4a:06:
44:17:97:59:c9:b1:e0:1b:2b:55:d8:bf:3c:07:f1:
be:56:5e:da:53:78:e2:c3:cb:6a:21:f5:83:66:66:
bd:eb:6f:27:da:aa:91:30:93:eb:40:52:e0:24:a5:
4d:b9
</code></pre>

<p>I find which is not same as I see in browser (In Chrome, click padlock in URL address bar, <code>-&gt; Connection -&gt; Certificate information -&gt; Certificate-&gt;Details -&gt; Public Key (field)</code>).  as below</p>

<pre><code>30 82 01 0a 02 82 01 01 00 bb cb 8a 0e b6 df 
3f 0a ba a4 7b 20 9f e9 0a f2 81 04 84 ed d0 
9e c9 fd 2a ec 39 9f 11 56 c3 2e 33 39 8f da 
32 d7 84 54 55 5c 99 2f 56 61 73 17 2d 26 15 
bc 8b 89 12 b8 78 73 17 1d c5 32 a2 e3 f1 b5 
c4 d8 41 67 41 72 16 74 81 c8 4f f3 a8 57 31 
cd 69 73 7b 96 41 2d be 66 15 f0 eb f7 33 7c 
79 4a 00 40 0e c6 df 71 66 1a a7 12 79 e8 7e 
89 c2 04 cc 09 b0 1f 9b 67 81 ec 5f 26 2d 09 
c3 ce 1c a6 96 e9 0f de 6f aa b1 07 82 be a9 
18 2e 2b a5 c5 17 a1 91 75 7b 0a 86 cc 1d bc 
91 10 1d 5b 3b fd 49 37 04 65 5a c8 4a 41 17 
37 63 ab a1 83 11 58 c8 24 74 c2 e4 ae 8e d6 
90 98 5a d7 b7 96 4e d4 d8 21 e9 45 43 0b e0 
0b 07 dd 0f 79 47 4a 06 44 17 97 59 c9 b1 e0 
1b 2b 55 d8 bf 3c 07 f1 be 56 5e da 53 78 e2 
c3 cb 6a 21 f5 83 66 66 bd eb 6f 27 da aa 91 
30 93 eb 40 52 e0 24 a5 4d b9 02 03 01 00 01
</code></pre>

<p>Why these two public key are different?<br>
I am curious about what are these two kind of public key data? </p>

<p><strong>Update:</strong><br>
Update public key field value from Chrome browser.</p>
","<p>I think what you may be seeing is that when you get the key from the browser, you're getting the whole ASN.1 raw key (denoted by the <a href=""http://www.cryptopp.com/wiki/Keys_and_Formats#Hex_Encoding_and_Decoding"" rel=""nofollow"">30 82</a>), but you're getting some watered down version from <code>SSL_get_peer_certificate()</code> and/or <code>X509_get_pubkey()</code> that has removed this header and just given you the rest of the key (without the leading<code>30 82 01 0a 02 82 01 01</code> or trailing <code>02 03 01 00 01</code>).  </p>

<p>I tried to look into what exactly <code>x509_get_pubkey()</code> returns, but didn't have much luck, but this is where I would start - researching why you're getting the raw key from the browser, but something truncated from the function.</p>
","1145","<c><ssl><openssl><public-key>","0","1","2","2014-10-30 09:10:39","26648930","2","0","1337961","","2014-10-29 06:44:46","2014-10-28 06:44:25",""
"32098513","how to ssh to a server without password when there is no .ssh on it","<p>I wanted to setup passwordless login from my local machine to this Linux server. When I tried to upload my public key I found that there is no .ssh on the server. So I created one with ssh-keygen on the server. However in the newly generated .ssh directory, there is no authorized_keys or known_hosts. So I made a new authorized_keys and pasted my public key from local machine. However it does not work, still need password for ssh. Can anyone tell me if I am doing it right?</p>

<p>Here is the output of ssh -vvv:</p>

<pre><code>debug1: Authentications that can continue: publickey,gssapi-with-mic,password,keyboard-interactive
debug3: start over, passed a different list publickey,gssapi-with-mic,password,keyboard-interactive
debug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password
debug3: authmethod_lookup gssapi-with-mic
debug3: remaining preferred: publickey,keyboard-interactive,password
debug3: authmethod_is_enabled gssapi-with-mic
debug1: Next authentication method: gssapi-with-mic
debug3: Trying to reverse map address .
debug1: Unspecified GSS failure.  Minor code may provide more information
Credentials cache file '/tmp/krb5cc_198782' not found

debug1: Unspecified GSS failure.  Minor code may provide more information
Credentials cache file '/tmp/krb5cc_198782' not found

debug1: Unspecified GSS failure.  Minor code may provide more information


debug1: Unspecified GSS failure.  Minor code may provide more information
Credentials cache file '/tmp/krb5cc_198782' not found

debug2: we did not send a packet, disable method
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering public key: /rsrch2/rists/djiao/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug3: Wrote 368 bytes for a total of 1477
debug1: Authentications that can continue: publickey,gssapi-with-mic,password,keyboard-interactive
debug1: Trying private key: /rsrch2/rists/djiao/.ssh/id_dsa
debug3: no such identity: /rsrch2/rists/djiao/.ssh/id_dsa
debug2: we did not send a packet, disable method
debug3: authmethod_lookup keyboard-interactive
debug3: remaining preferred: password
debug3: authmethod_is_enabled keyboard-interactive
debug1: Next authentication method: keyboard-interactive
debug2: userauth_kbdint
debug2: we sent a keyboard-interactive packet, wait for reply
debug3: Wrote 96 bytes for a total of 1573
debug2: input_userauth_info_req
debug2: input_userauth_info_req: num_prompts 1
</code></pre>
","<p>Simply create it and copy your key over to it. If you have a key-copy tool then just create the file via </p>

<pre><code>$ touch ~/.ssh/authorized_keys
</code></pre>

<p>before using the tool.</p>

<p>It might help to connect using -vvv for verbosity.</p>

<p>On the client and on the server, check that ~/.ssh has permissions 700.</p>

<p>On the server, check that <code>/etc/ssh/sshd_config</code> has:</p>

<pre><code>AuthorizedKeysFile  .ssh/authorized_keys
PubkeyAuthentication yes
RSAAuthentication yes
</code></pre>
","1138","<ssh><passwords><public-key>","0","1","1","2015-08-19 15:30:41","32098589","7","","4118822","","2015-08-19 15:21:19","2015-08-19 14:35:11",""
"4375450","connecting to server through SSH using public key","<p>I am working on one iPhone application on which we need to use SSH integration. I have demo that can connect server with password, but i can't get how to connect that using public key. </p>

<p>I can connect it via MAC terminal using below command.</p>

<p>ssh -i (KeyFilePath) username@(domainname or IP)</p>

<p>But unfortunately, I can't connect using Xcode.</p>

<p>Thanks,</p>
","<p>You may want to consider first adding the private key (or keys) to the authentication agent. From that point and on, all ssh commands will re-use the cached key:</p>

<pre><code># Add a new key to the authentication agent
$ ssh-add &lt;path to private key&gt;

# List current keys
$ ssh-add -l

# Delete all loaded keys
$ ssh-add -D

# Add a new key and store the passphrase in your keychain
$ ssh-add -K &lt;path to private key1&gt;
$ ssh-add -K &lt;path to private key2&gt;

# After storing the private keys passphrase in the keychain,
# you can load them all, at any time
$ ssh-add -k
</code></pre>

<p>When the authentication agent has a private key loaded, you should be able to use Xcode to connect to (domainname or IP) with no problems.</p>
","1138","<iphone><ssh><public-key>","5","1","1","2010-12-15 13:26:39","4450364","0","1","","user1228","2010-12-08 12:53:56","2010-12-07 10:10:32",""
"333894","OpenSSL and generating CSRs at client side","<p>I need a favour from you. My infrastructure is IIS 6.0 and windows server 2003.</p>

<p>I need to investigate the use of OpenSSL and the construction of media that can be sent to end users, allowing them to generate CSRs, as well as produce documentation to support the signing of the CSR.</p>

<p>What I mean is, I need to send a CD to the end user with a script that can generate a CSR and a private key at their machine basing on my companies Publickey CA.</p>

<ol>
<li><p>client can run an utility sent by me via some cd or DVD (May be an openSSL script) needs to accept some parameters so that end user can supply keyword/password data.</p></li>
<li><p>The script will generate private key and CSR back to my company via some secure way (may be through email, I know it is not safe but some how they send us back CSR)</p></li>
<li><p>We receive the CSR and we sign it and return to the client.</p></li>
</ol>

<p>So I need to document this, so that the end user can understand what he is doing.</p>

<p>So my question is where can I get the script to send to client so that he can generate his own CSR and PrivateKey.</p>
","<p>Take a look at openssl's <a href=""http://www.openssl.org/docs/apps/req.html"" rel=""nofollow noreferrer"">req</a> command. Invoke req in a script, and provide an ssl config file to the -config option. req will query the necessary information from the user, and write the request into a file (which you also specify on the command line).</p>

<p><strong>Edit</strong>: you can download openssl from <a href=""http://www.slproweb.com/products/Win32OpenSSL.html"" rel=""nofollow noreferrer"">http://www.slproweb.com/products/Win32OpenSSL.html</a>
Do read the req man page. </p>
","1116","<openssl><public-key><private-key><csr>","0","0","1","2009-12-19 07:00:08","","0","","18804","John Topley","2009-08-26 15:33:39","2008-12-02 13:20:09",""
"43269399","How to extract public key from certificate in Mac?","<p>I was given a certificate and tried to extract public key out of it.</p>

<p>My certificate is like</p>

<pre><code>-----BEGIN CERTIFICATE----- 
SNFMFGFDGIIG ....
-----END CERTIFICATE-----
</code></pre>

<p>and I saved it as <code>test.cer</code>.</p>

<p>I have looked up online and tried to extract public key.</p>

<p>I tried:</p>

<pre><code>openssl x509 -inform pem -in test.cer -pubkey -noout &gt; publickey.pem
</code></pre>

<p>but I am getting</p>

<pre><code>unable to load certificate
56091:error:0906D06C:PEM routines:PEM_read_bio:no start line:/BuildRoot/Library/Caches/com.apple.xbs/Sources/OpenSSL098/OpenSSL098-59.60.1/src/crypto/pem/pem_lib.c:648:Expecting: TRUSTED CERTIFICATE
</code></pre>

<p>I am not that familiar with the process and was hoping someone here can help me out. Thanks so much!</p>
","","1113","<openssl><certificate><public-key>","0","","0","2017-04-07 04:01:18","","4","","","","","2017-04-07 04:01:18",""
"5964759","Private key, access Gitolite repository for Netbeans on Win XP","<p>Where to put private key to have access to Gitolite repository form Netbeans 7 ?</p>

<p>I have created a Public/Private key pair and did all the Gitolite configurations as described <a href=""http://sitaramc.github.com/gitolite/doc/2-admin.html#_adding_users_and_repos"" rel=""nofollow"">here</a>. However I don't know where to put the keys in order to clone the repository from the server using Netbeans 7 (using Git plugin version 0.2.11.42, which is able to clone the repository directly from Netbeans) ? </p>
","<p>it should be in your home directory of the user you are running as.</p>

<pre><code>~/.ssh/id_rsa
</code></pre>
","1104","<git><netbeans><windows-xp><public-key><gitolite>","2","1","1","2016-12-05 16:13:44","5971384","0","","","","","2011-05-11 13:07:34",""
"25601128","Which is the size of a digital certificate with the private/public keys?","<p>I am involved in a project in which our employees need to sign specific documents using their digital signatures. To do this, each employee will have a RFID card to store their certificate with the private/public keys. My question is related to the size of such certificate. I have been browsing around but I have not been able to find an answer.</p>

<p>Which is the size of a file that contains the digital certificate with both the public and the private signatures?</p>

<p>Many thanks in advance!</p>
","<p>The size of the certificate and a private key depends on algorithm, key length and additional information such as names of the issuer and subject, various URLs (for CRL and OCSP shecks etc) placed to the certificate. So it is reasonable to assume the size of one certificate to be between 2 and 4 Kb (I would reserve at least 4Kb per cert + key).</p>
","1079","<digital-signature><public-key><digital-certificate>","-1","0","1","2014-09-01 10:25:05","25603703","3","","","","","2014-09-01 07:50:37",""
"20029552","Asymmetric encryption for Android using KeyCzar","<p>I want to create an application that encrypts messages for the server with the public key of the server. I thought to use KeyCzar, but if you have better or other good ideas, I will be glad to hear.</p>

<p>My questions:</p>

<ol>
<li>The application has to save the public key. Where should I store it?</li>
<li>How can I encrypt messages with this public key? I didn't find asymmetric encryption functions. (The application will encrypt symmetric key, and the data will be encrypted by the symmetric key)</li>
</ol>

<p>By the way, I must use public key, because messages from the same sender should not be linked by the recipient.</p>

<p>References and examples to such a hybrid encryption, or even just to the use of public key encryption scheme (using KeyCzar or other recommended tools), will be appreciated.</p>
","<p>I'll answer your questions in order:</p>

<ol>
<li><p>Where you store the key is up to you. Maybe you never want to update it. In that case you can store it as a resource or even ""hard coded"". In that case you have to create an update to your application to update it. Public keys are public, so there is no need to keep them safe. On the other hand, you may want to add some code to check if your <em>trust store</em> is not altered. You could also use a Java keystore like JKS, but in that case you need to create a certificate chain. Just sending them to the application is not a good idea; you need a secure path to avoid Man-in-the-Middle attacks.</p></li>
<li><p>Asymmetric encryption with RSA is certainly defined in the PKCS#1 standards (implemented in the Sun provider, using <code>Cipher</code> in Java. There are two schemes defined, the PKCS#1 v1.5 scheme and OAEP. The latter is more safe.</p></li>
</ol>
","1053","<java><android><encryption><public-key><keyczar>","2","2","2","2018-02-11 14:16:51","20051904","0","","1033581","","2018-02-11 14:16:51","2013-11-17 10:19:07",""
"20029552","Asymmetric encryption for Android using KeyCzar","<p>I want to create an application that encrypts messages for the server with the public key of the server. I thought to use KeyCzar, but if you have better or other good ideas, I will be glad to hear.</p>

<p>My questions:</p>

<ol>
<li>The application has to save the public key. Where should I store it?</li>
<li>How can I encrypt messages with this public key? I didn't find asymmetric encryption functions. (The application will encrypt symmetric key, and the data will be encrypted by the symmetric key)</li>
</ol>

<p>By the way, I must use public key, because messages from the same sender should not be linked by the recipient.</p>

<p>References and examples to such a hybrid encryption, or even just to the use of public key encryption scheme (using KeyCzar or other recommended tools), will be appreciated.</p>
","<p>For Keyczar, the hybrid encryption api's are in <a href=""https://code.google.com/p/keyczar/wiki/OperationSessions"" rel=""nofollow"">SessionCrypter</a>.</p>

<p>There is a little more info about it in the <a href=""https://github.com/jbtule/keyczar-dotnet/wiki/Session-Encryption"" rel=""nofollow"">C# version docs</a> and should apply to java for the most part.</p>

<p>Keyczar will store all of it's keys in a keyset on disk, that keyset allows for key rotation by default. But I've seen it modified to load keys from jar resources.</p>
","1053","<java><android><encryption><public-key><keyczar>","2","1","2","2018-02-11 14:16:51","20051904","0","","1033581","","2018-02-11 14:16:51","2013-11-17 10:19:07",""
"47331589","Java JDBC Public Key connection failed with: ""unable to find valid certification path to requested target""","<p>I would like to allow a connection from a java client.</p>

<p>This Java client needs to support multiple public keys for different DB's.</p>

<p>I must do it with a <code>PUBLIC KEY</code> and MUST NOT trust server certificate.</p>

<p>I have searched online but could not find a full solution for this problem, these are some of the links I have read:</p>

<p><a href=""https://stackoverflow.com/questions/5312559/how-do-i-programmatically-create-a-new-keystore"">first</a></p>

<p><a href=""https://docs.oracle.com/cd/E35976_01/server.740/es_admin/src/tadm_ssl_convert_pem_to_jks.html"" rel=""nofollow noreferrer"">second</a></p>

<p><a href=""https://stackoverflow.com/questions/2138940/import-pem-into-java-key-store"">third</a></p>

<p>I have also read this <a href=""https://stackoverflow.com/questions/9619030/resolving-javax-net-ssl-sslhandshakeexception-sun-security-validator-validatore"">link</a> myt question is not duplicate since its a completly different connection type - this is a JDBC connection with conneciton manager and not a general URL connection with SSL.</p>

<p>and many more, all the stack overflow solution I found offered to trust server certificate which means skip the public key verification </p>

<p>This is my code:</p>

<pre><code>String connectionString = ""jdbc:mysql://abcd-efg.rds.amazonaws.com:3306/test?trustServerCertificate=false&amp;useSSL=true&amp;requireSSL=true&amp;verifyServerCertificate=true""


    File f = new File(""C:\\temp\\amazonPublic.pem"");
    CertificateFactory fact = null;
    fact = CertificateFactory.getInstance(""X.509"");
    X509Certificate cer = (X509Certificate) fact.generateCertificate(new FileInputStream(f));
    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
    char[] password = new char[] {'1','2','3','4'};
    ks.load(null, password);
    ks.setCertificateEntry(""alias"", cer);
    FileOutputStream fos = new FileOutputStream(new File(""C:\\temp\\ca.cer""));
    ks.store(fos, password);
    fos.close();
    Properties p = new Properties();
    p.setProperty(""javax.net.ssl.trustStore"",""C:\\temp\\ca.cer"");
    p.setProperty(""javax.net.ssl.trustStorePassword"",""1234"");
    try (java.sql.Connection connection =
            DriverManager.getConnection(connectionString,p)) {

        connection.isValid(1000);
    }
</code></pre>

<p>And this is the error:</p>

<pre><code>Caused by: java.sql.SQLException: Could not connect to yyyyy-zz-prd-xxxxxxxxxxxx-1.rds.amazonaws.com:3306: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    at org.mariadb.jdbc.internal.protocol.AbstractConnectProtocol.handleConnectionPhases(AbstractConnectProtocol.java:706)
    at org.mariadb.jdbc.internal.protocol.AbstractConnectProtocol.connect(AbstractConnectProtocol.java:406)
    at org.mariadb.jdbc.internal.protocol.AbstractConnectProtocol.connectWithoutProxy(AbstractConnectProtocol.java:1022)
    at org.mariadb.jdbc.internal.util.Utils.retrieveProxy(Utils.java:483)
    at org.mariadb.jdbc.Driver.connect(Driver.java:106)
Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387)
    at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292)
    at sun.security.validator.Validator.validate(Validator.java:260)
    at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324)
    at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229)
    at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:124)
    at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1496)
    ... 17 more
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    at sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:141)
    at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:126)
    at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280)
    at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382)
    ... 23 more
</code></pre>

<p>What am I missing in the solution?</p>
","<p>For the sake of Humankind while working with MariaDB driver - debugging it
I find out that: 
The property should be <code>""serverSslCert""</code> or <code>""trustStore""</code>
The prefix of <code>javax.net.ssl</code>  only required when working with <code>System.setProperty</code></p>

<p>So this simple change did the trick.</p>

<pre><code>    Properties p = new Properties();
    p.setProperty(""serverSslCert"",""C:/temp/amazonPublic.pem"");
    p.setProperty(""trustStorePassword"",jdbcDetails.getSensitiveData());
    p.setProperty(""user"",jdbcDetails.username);
    p.setProperty(""password"",jdbcDetails.getSensitiveData());
</code></pre>
","1045","<java><ssl><jdbc><x509certificate><public-key>","0","0","1","2017-11-19 09:40:14","47374907","4","","4961391","","2017-11-19 09:40:14","2017-11-16 13:59:34","2017-11-19 09:33:19"
"25849076","Java public key size","<p>To interoperate with a service, I must encrypt some values using RSA with a key size that seeems smaller than the minimum of 512 bits on Java. Is there any way I can relax that policy?</p>

<pre><code>BigInteger e = new BigInteger(""13082845549543033994073971762152947067"", 10);
BigInteger m = new BigInteger(""229110545576645850236522690668306544921"", 10);

RSAPublicKeySpec spec = new RSAPublicKeySpec(m, e);
KeyFactory keyFac = KeyFactory.getInstance(""RSA"");
PublicKey publicKey = keyFac.generatePublic(spec);

// ^^^^ java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: RSA keys must be at least 512 bits long
</code></pre>
","<p>I have checked your code, and I have following results:</p>

<pre><code>SunPKCS11-NSS RSA public key, 128 bits (id 1, session object)
modulus: 229110545576645850236522690668306544921
public exponent: 13082845549543033994073971762152947067
</code></pre>

<p>Where does exception exactly occur? </p>
","1041","<java><encryption><rsa><public-key>","0","1","2","2014-09-15 13:37:37","25849417","2","","1119282","","2014-09-15 13:27:38","2014-09-15 13:19:02",""
"25849076","Java public key size","<p>To interoperate with a service, I must encrypt some values using RSA with a key size that seeems smaller than the minimum of 512 bits on Java. Is there any way I can relax that policy?</p>

<pre><code>BigInteger e = new BigInteger(""13082845549543033994073971762152947067"", 10);
BigInteger m = new BigInteger(""229110545576645850236522690668306544921"", 10);

RSAPublicKeySpec spec = new RSAPublicKeySpec(m, e);
KeyFactory keyFac = KeyFactory.getInstance(""RSA"");
PublicKey publicKey = keyFac.generatePublic(spec);

// ^^^^ java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: RSA keys must be at least 512 bits long
</code></pre>
","<p>You can use the BouncyCastle provider. Just prepend your code with</p>

<pre><code>java.security.Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
</code></pre>

<p>and change the line</p>

<pre><code>KeyFactory keyFac = KeyFactory.getInstance(""RSA"");
</code></pre>

<p>into</p>

<pre><code>KeyFactory keyFac = KeyFactory.getInstance(""RSA"", ""BC"");
</code></pre>
","1041","<java><encryption><rsa><public-key>","0","0","2","2014-09-15 13:37:37","25849417","2","","1119282","","2014-09-15 13:27:38","2014-09-15 13:19:02",""
"13818567","openSSL: difference between PEM_write_RSAPublicKey and PEM_write_RSA_PUBKEY","<p>In the openssl library I can see two methods to write a public Key to a file:</p>

<pre><code>int PEM_write_RSAPublicKey(FILE *fp, RSA *x);
int PEM_write_RSA_PUBKEY(FILE *fp, RSA *x);
</code></pre>

<p>In the documentation i can see:</p>

<blockquote>
  <p>The RSAPublicKey functions process an RSA public key using an RSA
  structure. The public key is encoded using a PKCS#1 RSAPublicKey
  structure.</p>
  
  <p>The RSA_PUBKEY functions also process an RSA public key using an RSA
  structure. However the public key is encoded using a
  SubjectPublicKeyInfo structure and an error occurs if the public key
  is not RSA</p>
</blockquote>

<p>But i don't understand what is </p>

<blockquote>
  <p>SubjectPublicKeyInfo</p>
</blockquote>

<p>And what are the fundamentals differences between the 2 methods!</p>
","<p>SubjectPublicKeyInfo - ASN1 structure for public keys which is described in rfc 3280(Internet X.509 Public Key Infrastructure). This format in fact contains id of the public key algorithm and the public key itself. And in this case this public key is formatted according to the pkcs1 standard. So X.509 format is more high level format, it describes not just RSA public key but public key in general.</p>
","1037","<c++><openssl><public-key>","4","2","1","2013-09-21 08:13:26","18930422","0","1","","","","2012-12-11 10:43:24",""
"26954085","Desired State Configuration credential private key not acquired","<p>I'm trying to use powershell DSC for a few things. I wanted to have the passed credentials encrypted per the instructions at <a href=""http://technet.microsoft.com/en-us/library/dn781430.aspx"" rel=""nofollow"">http://technet.microsoft.com/en-us/library/dn781430.aspx</a> it all seems to work fine until I run start-DscConfiguration on the target node and i get the error:</p>

<blockquote>
  <p>The private key could not be acquired.
      + CategoryInfo          : NotSpecified: (root/Microsoft/...gurationManager:String) [], CimException
      + FullyQualifiedErrorId : MI RESULT 1
      + PSComputerName        : DmitriyDev</p>
</blockquote>

<p>Going back I checked to see that the mof contains the credentials encrypted and the meta.mof contains the matching thumbprint, etc.</p>

<p>going back to the original article i see the example code:</p>

<blockquote>
<pre><code># Get the certificate that works for encryption 
function Get-LocalEncryptionCertificateThumbprint 
{ 
    (dir Cert:\LocalMachine\my) | %{ 
                    # Verify the certificate is for Encryption and valid 
                    if ($_.PrivateKey.KeyExchangeAlgorithm -and $_.Verify()) 
                    { 
                        return $_.Thumbprint 
                    } 
                } 
}
</code></pre>
</blockquote>

<p>When I test my certificate using this code (on the target node) I see that the PrivateKey of the certificate is null. I'm not sure how the certificate is null. Trying a few things with certutil and the technique mentioned <a href=""http://blogs.technet.com/b/vishalagarwal/archive/2010/03/30/verifying-the-private-key-property-for-a-certificate-in-the-store.aspx"" rel=""nofollow"">http://blogs.technet.com/b/vishalagarwal/archive/2010/03/30/verifying-the-private-key-property-for-a-certificate-in-the-store.aspx</a> it seems that I do indeed have a private key, however Powershell see it only as null.</p>

<p>On the target node, I even exported the public private key manually and reimported them, with no luck as outlined in another dsc tutorial.</p>

<p>I also tried using procmon to see what the problem was on the target node. I see the wmiprvse process and see that it runs as System (as expected), and I checked to make sure that the permissions on the private key allowed for system (all on the target node)</p>

<p>So my question is how do I get my private key to be used by DSC specifically the LCM on the target node? Or how do I diagnose the problem more?</p>
","<p>Okay, i'm not sure exactly <em>why</em> this works, but it does. Using the Computer template seems to work. In terms of work, powershell on the target node can see it's private key from</p>

<blockquote>
  <p>dir cert:\LocalMachine\My | ? PrivateKey -ne $null</p>
</blockquote>

<p>Once that happens it all works as expected. So long story short is don't use the workstation Auth template but the Computer template.</p>
","1028","<powershell><certificate><public-key><dsc>","2","0","2","2015-08-13 04:55:28","31979766","5","","1380278","","2014-11-16 23:33:53","2014-11-16 05:24:10",""
"26954085","Desired State Configuration credential private key not acquired","<p>I'm trying to use powershell DSC for a few things. I wanted to have the passed credentials encrypted per the instructions at <a href=""http://technet.microsoft.com/en-us/library/dn781430.aspx"" rel=""nofollow"">http://technet.microsoft.com/en-us/library/dn781430.aspx</a> it all seems to work fine until I run start-DscConfiguration on the target node and i get the error:</p>

<blockquote>
  <p>The private key could not be acquired.
      + CategoryInfo          : NotSpecified: (root/Microsoft/...gurationManager:String) [], CimException
      + FullyQualifiedErrorId : MI RESULT 1
      + PSComputerName        : DmitriyDev</p>
</blockquote>

<p>Going back I checked to see that the mof contains the credentials encrypted and the meta.mof contains the matching thumbprint, etc.</p>

<p>going back to the original article i see the example code:</p>

<blockquote>
<pre><code># Get the certificate that works for encryption 
function Get-LocalEncryptionCertificateThumbprint 
{ 
    (dir Cert:\LocalMachine\my) | %{ 
                    # Verify the certificate is for Encryption and valid 
                    if ($_.PrivateKey.KeyExchangeAlgorithm -and $_.Verify()) 
                    { 
                        return $_.Thumbprint 
                    } 
                } 
}
</code></pre>
</blockquote>

<p>When I test my certificate using this code (on the target node) I see that the PrivateKey of the certificate is null. I'm not sure how the certificate is null. Trying a few things with certutil and the technique mentioned <a href=""http://blogs.technet.com/b/vishalagarwal/archive/2010/03/30/verifying-the-private-key-property-for-a-certificate-in-the-store.aspx"" rel=""nofollow"">http://blogs.technet.com/b/vishalagarwal/archive/2010/03/30/verifying-the-private-key-property-for-a-certificate-in-the-store.aspx</a> it seems that I do indeed have a private key, however Powershell see it only as null.</p>

<p>On the target node, I even exported the public private key manually and reimported them, with no luck as outlined in another dsc tutorial.</p>

<p>I also tried using procmon to see what the problem was on the target node. I see the wmiprvse process and see that it runs as System (as expected), and I checked to make sure that the permissions on the private key allowed for system (all on the target node)</p>

<p>So my question is how do I get my private key to be used by DSC specifically the LCM on the target node? Or how do I diagnose the problem more?</p>
","<p>I had a similar error when using New-SelfSignedCertificate to create my certificates. For anyone with similar issues, I suspect the problem is related to the storage provider used by New-SelfSignedCertificate (see <a href=""http://blogs.technet.com/b/vishalagarwal/archive/2010/03/30/verifying-the-private-key-property-for-a-certificate-in-the-store.aspx"" rel=""nofollow"">http://blogs.technet.com/b/vishalagarwal/archive/2010/03/30/verifying-the-private-key-property-for-a-certificate-in-the-store.aspx</a>, which talks about a problem with the Microsoft Software Key Storage Provider and .NET classes). There's a powershell script available on <a href=""https://gallery.technet.microsoft.com/scriptcenter/Self-signed-certificate-5920a7c6"" rel=""nofollow"">technet</a> that creates self-signed certificates, and defaults to using a different storage provider, which solved the problem for me.</p>
","1028","<powershell><certificate><public-key><dsc>","2","1","2","2015-08-13 04:55:28","31979766","5","","1380278","","2014-11-16 23:33:53","2014-11-16 05:24:10",""
"2621458","Decrypt file with public key","<p>I have encrypted file and public key. How can I decrypt it from app without installing certificates?</p>

<p>file public.key looks like ""e+ztydr5GG7saZyrIOtSWGQgHlQbuFn1IVlIIggPIWuLUNTOqN0Y...""</p>

<p>Here are some code:</p>

<pre><code>NSString* filePath = [[NSBundle mainBundle] pathForResource:@""public"" ofType:@""key""];  
NSData* publicKeyData = [NSData dataWithContentsOfFile:filePath];  

NSMutableDictionary * queryPublicKey = [[NSMutableDictionary alloc] init];
[queryPublicKey setObject:(id)kSecClassKey forKey:(id)kSecClass];
[queryPublicKey setObject:publicKeyData forKey:(id)kSecAttrApplicationTag];
[queryPublicKey setObject:(id)kSecAttrKeyTypeRSA forKey:(id)kSecAttrKeyType];
[queryPublicKey setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecReturnRef];

OSStatus resultCode = noErr;
SecKeyRef publicKeyReference = NULL;
resultCode = SecItemCopyMatching((CFDictionaryRef)queryPublicKey, (CFTypeRef*)&amp;publicKeyReference);
</code></pre>

<p>However resultCode = -25300 (The specified item could not be found in the keychain). What I'm doing wrong? any suggestions?</p>
","<blockquote>
  <p>file public.key looks like ""e+ztydr5GG7saZyrIOtSWGQgHlQbuFn1IVlIIggPIWuLUNTOqN0Y...""</p>
</blockquote>

<p>That looks very much like a Base64 encoded string, to my eye. You almost certainly need the raw, unencoded bytes to pass to the security APIs. If you're putting this file in your app's bundle, the easiest thing would probably be to decode it beforehand, and store the raw binary in your app.</p>
","1022","<iphone><rsa><public-key>","1","1","2","2010-06-15 02:00:05","","2","","259247","","2010-04-12 14:17:21","2010-04-12 10:59:06",""
"2621458","Decrypt file with public key","<p>I have encrypted file and public key. How can I decrypt it from app without installing certificates?</p>

<p>file public.key looks like ""e+ztydr5GG7saZyrIOtSWGQgHlQbuFn1IVlIIggPIWuLUNTOqN0Y...""</p>

<p>Here are some code:</p>

<pre><code>NSString* filePath = [[NSBundle mainBundle] pathForResource:@""public"" ofType:@""key""];  
NSData* publicKeyData = [NSData dataWithContentsOfFile:filePath];  

NSMutableDictionary * queryPublicKey = [[NSMutableDictionary alloc] init];
[queryPublicKey setObject:(id)kSecClassKey forKey:(id)kSecClass];
[queryPublicKey setObject:publicKeyData forKey:(id)kSecAttrApplicationTag];
[queryPublicKey setObject:(id)kSecAttrKeyTypeRSA forKey:(id)kSecAttrKeyType];
[queryPublicKey setObject:[NSNumber numberWithBool:YES] forKey:(id)kSecReturnRef];

OSStatus resultCode = noErr;
SecKeyRef publicKeyReference = NULL;
resultCode = SecItemCopyMatching((CFDictionaryRef)queryPublicKey, (CFTypeRef*)&amp;publicKeyReference);
</code></pre>

<p>However resultCode = -25300 (The specified item could not be found in the keychain). What I'm doing wrong? any suggestions?</p>
","<p>You can't decrypt a file with a public key, the public key encrypts and the private key decrypts, that is the basic principle of asymmetric algos. Where is the security in an encrypted file if the public key (i.e. the one everyone knows) can decrypt it?</p>
","1022","<iphone><rsa><public-key>","1","-1","2","2010-06-15 02:00:05","","2","","259247","","2010-04-12 14:17:21","2010-04-12 10:59:06",""
"45123969","Load public key to create rsa object for public encryption","<p>I am trying to load a rsa object from a generated public key. I used <code>PEM_write_bio_RSAPublicKey</code> to generate the public key string. Then I used <code>PEM_read_bio_RSA_PUBKEY</code> to load the rsa object from the public key string.  The problem is the rsa object is null.  The generated string looks okay as far as I can tell. Any ideas?</p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEAxIReUspesPy6a4CPBjt/4Jt+H13q9MekMiutzNKdNO1uuwqcdqDX
pKPeTKXyUH6oCyRdUxkk6IVXGlBlxtW7OsxaYWhpfl9z3CCERCEpFmzN++dvlK2v
mckFL66e9q6Y+HwgyP1LJqrszeqlg2d29TCVKfD/UURVNmc/nPPjs9nO+IDhh7+P
NTQ2OqGBq8ghwVL5ZZyW3yVO5OAbRB6pjKBe9+j4B2TGnD5JO9Nu0jlFANZOKFJu
HDVE3XuTvOkuzL2i8Lwp4Myk42tbIgcCe4G58vKFddL651rWhg4hN3fRSx5YtDnQ
r5cgfNBOAww58S8lwXgU8lvzvEoNV+WMgwIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<p>gcc test_public_private_key.c -lcrypto -o test</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;openssl/rsa.h&gt;
#include &lt;openssl/pem.h&gt;
#include &lt;openssl/err.h&gt;

char* get_public_key() {

        RSA* rsa = RSA_new();
        int kbits = 2048;
        BIGNUM* bne = BN_new();
        BN_set_word(bne, RSA_F4);

        int status = RSA_generate_key_ex(rsa, kbits, bne, NULL);
        if(status == 0) {
                fprintf(stderr, ""rsa key generation failed\n"");
        }


        BIO *bio = BIO_new(BIO_s_mem());
        PEM_write_bio_RSAPublicKey(bio, rsa);

        int length = BIO_pending(bio);

        char* pem_key = malloc(length+1);
        memset(pem_key, '\0', length+1);

        BIO_read(bio, pem_key, length);

        return pem_key;

}

int main(int argc, char* argv[]) {

        char* public_key = get_public_key();

        printf(""%s"", public_key);

        BIO* keybio = BIO_new_mem_buf(public_key, -1);

        if (keybio == NULL) {
                fprintf(stderr, ""failed to create key BIO"");
        }

        printf(""keybio: %p\n"", keybio);
        RSA* rsa = PEM_read_bio_RSA_PUBKEY(keybio, NULL, NULL, NULL);
        printf(""rsa result %p\n"", rsa);
        BIO_free(keybio);

        free(public_key);

        return 0;
}
</code></pre>
","<p>I thought it would be good to add that the reason this didn't work is because <code>PEM_read_RSA_PUBKEY</code> expects a <code>SubjectPublicKeyInfo</code> structure, which starts with <code>BEGIN PUBLIC KEY</code>, while <code>PEM_read_RSAPublicKey</code> expects a <code>RSAPublicKey</code> structure, which starts with <code>BEGIN RSA PUBLIC KEY</code>.<br>
<code>PEM_write_bio_RSAPublicKey</code> generated the latter which corresponds to the second function, <code>PEM_read_RSAPublicKey</code>.</p>
","1016","<c><openssl><rsa><public-key><pem>","2","3","1","2017-07-17 01:02:27","45124475","8","2","1687119","","2017-07-17 00:16:34","2017-07-16 00:42:16",""
"2361631","Is there a way to alter a public key in a way that the decryption can still be done with the private key after some alteration?","<p>In an asymetric encryption scheme, I was wondering if it's possible to achieve the following:</p>

<ol>
<li>Bob sends to Alice his public key</li>
<li>Alice alters Bob's public key and encrypt some document with it</li>
<li>Alice sends the encrypted document to Bob</li>
<li>Bob retrieve the document but can't decrypt it with his private key</li>
<li>Later, Alice sends some additional information (probably related to the method she used to alter Bob's public key) to Bob</li>
<li>Bob uses this additional information to modify his private key and successfully decrypt the document</li>
</ol>

<p>Anyone?</p>

<p>I am assuming RSA for the keys generation, encryption and decryption but if it's easier to do with another scheme feel free to comment.</p>
","<p>Hmm, interesting.</p>

<p>You're referring to <a href=""http://en.wikipedia.org/wiki/RSA"" rel=""nofollow noreferrer"">RSA</a>, I assume?</p>

<p>FYI, RSA isn't actually used to encrypt documents. It's used to exchange keys (keys for a symmetric algorithm, like AES).</p>

<p>So what you're really talking about is an approach that changes the keys.</p>

<p>Technically (mathmatically) if you put a different number in, you'll get a different number out. So that's not an issue; changing the public key in some fashion will (assuming you convince your RSA implementation to use it, or prepare an appropriately different number) result in a different symmetric key, thus an undecryptable document by Bob (because he'll expect a different key).</p>

<p>Really, though, I'm not so sure you care about this. It's a fairly useless thing to do. <em>Perhaps</em>, however, you're actually interested in <a href=""http://en.wikipedia.org/wiki/Key_splitting"" rel=""nofollow noreferrer"">Key Splitting</a> (or ""Secret Sharing"" as wikipedia seems to call it).</p>

<p>HTH. I'm by no means an expert.</p>
","1015","<encryption><public-key><encryption-asymmetric><private-key>","3","0","4","2012-12-31 08:24:26","2361775","0","","18564","","2010-03-02 08:47:12","2010-03-02 08:03:12",""
"2361631","Is there a way to alter a public key in a way that the decryption can still be done with the private key after some alteration?","<p>In an asymetric encryption scheme, I was wondering if it's possible to achieve the following:</p>

<ol>
<li>Bob sends to Alice his public key</li>
<li>Alice alters Bob's public key and encrypt some document with it</li>
<li>Alice sends the encrypted document to Bob</li>
<li>Bob retrieve the document but can't decrypt it with his private key</li>
<li>Later, Alice sends some additional information (probably related to the method she used to alter Bob's public key) to Bob</li>
<li>Bob uses this additional information to modify his private key and successfully decrypt the document</li>
</ol>

<p>Anyone?</p>

<p>I am assuming RSA for the keys generation, encryption and decryption but if it's easier to do with another scheme feel free to comment.</p>
","<p>As silky implies in his answer, the way in which RSA is usually used to encrypt a document is in combination with a symmetric algorithm, like AES.  A secure random key is generated for the AES algorithm, the documented is encrypted with that AES key, and the AES key is encrypted with the recipient's public key.  Both parts are supplied to the recipient.</p>

<p>You can adapt this to your situation simply by sending only the document encrypted with the AES key in the first step, and withholding the AES key encrypted with the recipient's public key until the second step.  The first part will be on the order of the original file size, and the second part will be a small, constant size (on the order of the RSA key size).</p>
","1015","<encryption><public-key><encryption-asymmetric><private-key>","3","1","4","2012-12-31 08:24:26","2361775","0","","18564","","2010-03-02 08:47:12","2010-03-02 08:03:12",""
"2361631","Is there a way to alter a public key in a way that the decryption can still be done with the private key after some alteration?","<p>In an asymetric encryption scheme, I was wondering if it's possible to achieve the following:</p>

<ol>
<li>Bob sends to Alice his public key</li>
<li>Alice alters Bob's public key and encrypt some document with it</li>
<li>Alice sends the encrypted document to Bob</li>
<li>Bob retrieve the document but can't decrypt it with his private key</li>
<li>Later, Alice sends some additional information (probably related to the method she used to alter Bob's public key) to Bob</li>
<li>Bob uses this additional information to modify his private key and successfully decrypt the document</li>
</ol>

<p>Anyone?</p>

<p>I am assuming RSA for the keys generation, encryption and decryption but if it's easier to do with another scheme feel free to comment.</p>
","<p>(I assume you talk about RSA.)</p>

<p>Yes it is possible, <strong>but not 100%</strong>.</p>

<p>The public key is a part of the private key. It contains the modulus and the exponent of the key. </p>

<p>You can completely forget changing the modulus, because you would have to generate a new rsa keypair, which is the same problem as the one we are trying to solve.</p>

<p>But it is possible to change the exponent. You can select any (prime) number between 1 and your exponent as the new exponent and <strong>hope</strong> that it is coprime with the totient. Without knowing the totient it's impossible to select always a correct exponent. To find out the totient you would have to know the prime factors of the key, which means that you would have to break the key (have fun!).</p>

<p>So, <strong>it's actually impossible</strong> to have a 100% percent working method to do that, at least not while knowing only the public key.</p>

<p>If you need more information about the theory check <a href=""http://en.wikipedia.org/wiki/Rsa/"" rel=""nofollow noreferrer"">here</a></p>
","1015","<encryption><public-key><encryption-asymmetric><private-key>","3","2","4","2012-12-31 08:24:26","2361775","0","","18564","","2010-03-02 08:47:12","2010-03-02 08:03:12",""
"2361631","Is there a way to alter a public key in a way that the decryption can still be done with the private key after some alteration?","<p>In an asymetric encryption scheme, I was wondering if it's possible to achieve the following:</p>

<ol>
<li>Bob sends to Alice his public key</li>
<li>Alice alters Bob's public key and encrypt some document with it</li>
<li>Alice sends the encrypted document to Bob</li>
<li>Bob retrieve the document but can't decrypt it with his private key</li>
<li>Later, Alice sends some additional information (probably related to the method she used to alter Bob's public key) to Bob</li>
<li>Bob uses this additional information to modify his private key and successfully decrypt the document</li>
</ol>

<p>Anyone?</p>

<p>I am assuming RSA for the keys generation, encryption and decryption but if it's easier to do with another scheme feel free to comment.</p>
","<p>I hope my idea works. </p>

<p>Let us assume that <code>(e,d,n)</code> is a tuple of the RSA public exponent. The RSA private exponent and the RSA modulus <em>n</em> :</p>

<p>Select a prime number, say <em>p</em>,  between 1 and a 256 bit integer.</p>

<p>To <strong>encrypt</strong> a message <em>m</em>, compute the new public exponent as <code>e*p</code> and the ciphertext as: </p>

<p><code>c= m^{e*p} mod n</code>. </p>

<p>To <strong>decrypt</strong>, the receiver should know the prime <em>p</em>, so you send this <em>p</em> later to him, with this he computes </p>

<p>(1) <code>P = p^{-1} mod phi(n)</code></p>

<p>and</p>

<p>(2) <code>m^e=c^{P} mod n</code> </p>

<p>and </p>

<p>finally <code>m=(m^e)^d mod n</code>. This works as the receiver knows phi(n). </p>

<p>By the way, where can we use this? Is there any application you have in mind for this?</p>
","1015","<encryption><public-key><encryption-asymmetric><private-key>","3","2","4","2012-12-31 08:24:26","2361775","0","","18564","","2010-03-02 08:47:12","2010-03-02 08:03:12",""
"37477586","ECC private key is longer than public key","<p>I have generated ECC public and private key using secp192r1 curve. I get 75 for public and 125 for private encoded key array length. Why private key is longer than public key? Why private key is not longer two times than public? Why private key is not 192 bits = 24 bytes because of secp192r1?</p>

<pre><code>Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

ECNamedCurveParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(""secp192r1"");

KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
g.initialize(ecSpec, new SecureRandom());
KeyPair pair = g.generateKeyPair();

System.out.println(pair.getPublic().getEncoded().length);
System.out.println(pair.getPrivate().getEncoded().length);
</code></pre>
","<p>Code fragment below outputs 24 bytes private key:   </p>

<pre><code>Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec(""secp192r1"");

KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"", ""BC"");
g.initialize(spec, new SecureRandom());
KeyPair pair = g.generateKeyPair();
ECPrivateKey ecPrivateKey = (ECPrivateKey)pair.getPrivate();

System.out.println(ecPrivateKey.getS().toByteArray().length);
</code></pre>
","1011","<bouncycastle><private-key><public-key><elliptic-curve><java-security>","0","0","1","2017-10-10 07:37:41","37572497","5","","5962766","","2017-10-10 07:36:24","2016-05-27 07:39:23",""
"18273899","How can i use wget in order to obtain the public key?","<p>Is there any way to use <em>wget</em> directly or tweak the source code or use it with openssl in order to obtain the public key from a certificate and save it to a file?</p>
","<p>Not with wget, but with OpenSSL, you can use the same method as <a href=""https://stackoverflow.com/a/7086830/372643"">in this question for LDAP</a> (except on port 443, if you're interested in HTTPS, presumably).</p>

<p>You can also pipe the output into the <code>openssl x509 -pubkey</code> to get the public key itself.</p>

<p>Something like this should do:</p>

<pre><code>echo -n | openssl s_client -connect www.google.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | openssl x509 -pubkey -noout
</code></pre>
","1011","<c><ssl><openssl><wget><public-key>","1","1","1","2013-08-16 13:08:04","","2","","","","","2013-08-16 12:57:43",""
"26900746","libssh trying to authenticate with public and private keys","<p>I've been trying to use libssh to connect to a server and download files via SFTP. I have a PuTTY private key file containing 6 lines of key for the public key and 12 for the private key yet I can't find any decent help or documentation of taking these keys and using them to authenticate a connection to the server. Does anybody know how to do this?</p>

<p>So far the only options for authentication I can find are what I found in the libssh header file:</p>

<pre class=""lang-c prettyprint-override""><code>LIBSSH_API int ssh_userauth_pubkey(ssh_session session, const char *username, ssh_string publickey, ssh_private_key privatekey);
</code></pre>

<p>However, I don't know how a key from a PuTTY <code>.ppk</code> file can translate into an <code>ssh_string</code> for the public key or a <code>ssh_private_key</code> for the private key.</p>
","<p>Use the <code>ssh_userauth_privatekey_file</code> instead, or see a libssh code for how it is implemented (it calls the <code>ssh_userauth_pubkey</code> internally).</p>

<pre class=""lang-c prettyprint-override""><code>int ssh_userauth_privatekey_file(ssh_session session,
                                 const char *username,
                                 const char *filename,
                                 const char *passphrase);
</code></pre>

<p>You will need to <a href=""https://the.earth.li/~sgtatham/putty/latest/htmldoc/Chapter8.html#puttygen-conversions"" rel=""nofollow noreferrer"">convert your <code>.ppk</code> file to OpenSSH format</a> using PuTTYgen (<em>Conversions > Export OpenSSH key</em>).</p>
","1008","<ssh><sftp><private-key><public-key><libssh>","0","0","2","2017-02-26 18:25:24","26903667","0","1","850848","","2014-11-13 07:44:07","2014-11-13 03:16:37",""
"26900746","libssh trying to authenticate with public and private keys","<p>I've been trying to use libssh to connect to a server and download files via SFTP. I have a PuTTY private key file containing 6 lines of key for the public key and 12 for the private key yet I can't find any decent help or documentation of taking these keys and using them to authenticate a connection to the server. Does anybody know how to do this?</p>

<p>So far the only options for authentication I can find are what I found in the libssh header file:</p>

<pre class=""lang-c prettyprint-override""><code>LIBSSH_API int ssh_userauth_pubkey(ssh_session session, const char *username, ssh_string publickey, ssh_private_key privatekey);
</code></pre>

<p>However, I don't know how a key from a PuTTY <code>.ppk</code> file can translate into an <code>ssh_string</code> for the public key or a <code>ssh_private_key</code> for the private key.</p>
","<p>Please go through the below link, it has the solution for this problem:</p>

<p><a href=""http://social.technet.microsoft.com/wiki/contents/articles/20974.biztalk-server-2010-how-to-use-blogical-sftp-adapter.aspx"" rel=""nofollow"">http://social.technet.microsoft.com/wiki/contents/articles/20974.biztalk-server-2010-how-to-use-blogical-sftp-adapter.aspx</a></p>

<ol>
<li>Just install a Bitwise SSG server.</li>
<li>Go to Manage host.</li>
<li>Import your private key.</li>
<li>Then select the same private key and click on ""export"" option.</li>
<li>Pop-up will ask the format for key to export, click on openSSH format.</li>
<li>Save the new key with extension as .ppk in your local.</li>
<li>Now give this key as input to BizTalk SFTP adapter. It will connect to the SFTP Server.</li>
</ol>
","1008","<ssh><sftp><private-key><public-key><libssh>","0","0","2","2017-02-26 18:25:24","26903667","0","1","850848","","2014-11-13 07:44:07","2014-11-13 03:16:37",""
"18220746","Error when decrypt with Java","<p>I'm having trouble when Iḿ trying to decrypt a document, I'm using Public/Private pair key to do this. I'm using a Token to do this.</p>

<p>This is the error that I'm getting:</p>

<pre><code>java.security.ProviderException: java.security.KeyException: An internal error occurred.

at sun.security.mscapi.RSACipher.doFinal(RSACipher.java:297)
at sun.security.mscapi.RSACipher.engineDoFinal(RSACipher.java:321)
at javax.crypto.Cipher.doFinal(Cipher.java:2087)
at org.bouncycastle.operator.jcajce.JceAsymmetricKeyUnwrapper.generateUnwrappedKey(Unknown Source)
at org.bouncycastle.cms.jcajce.JceKeyTransRecipient.extractSecretKey(Unknown Source)
at org.bouncycastle.cms.jcajce.JceKeyTransEnvelopedRecipient.getRecipientOperator(Unknown Source)
at org.bouncycastle.cms.KeyTransRecipientInformation.getRecipientOperator(Unknown Source)
at org.bouncycastle.cms.RecipientInformation.getContentStream(Unknown Source)
at org.bouncycastle.cms.RecipientInformation.getContent(Unknown Source)
at ec.gov.informatica.firmadigital.cms.CMSEncryption.decrypt(CMSEncryption.java:198)
at ec.mil.gestordocumental.security.test.encryption.DecryptFileWithPublicCertificateToken.mainTest(DecryptFileWithPublicCertificateToken.java:110)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.security.KeyException: An internal error occurred.

at sun.security.mscapi.RSACipher.encryptDecrypt(Native Method)
at sun.security.mscapi.RSACipher.doFinal(RSACipher.java:289)
... 32
</code></pre>

<p>And this is the code I'm using to decrypt:</p>

<pre><code>public static byte[] decrypt(byte[] encrypted, X509Certificate cert, PrivateKey privateKey, Provider provider) {
    try {
        CMSEnvelopedData enveloped = new CMSEnvelopedData(encrypted);

        RecipientInformationStore recipients = enveloped.getRecipientInfos();
        X509CollectionStoreParameters s = new X509CollectionStoreParameters(Collections.singleton(new JcaX509CertificateHolder(cert)));

        X509StoreCertCollection s1 = new X509StoreCertCollection();
        s1.engineInit(s);

        Iterator it = recipients.getRecipients().iterator();

        RecipientInformation recipient = null;

        while (it.hasNext()) {
            recipient = (RecipientInformation) it.next();

            if (recipient instanceof KeyTransRecipientInformation) {
                Collection matches = s1.engineGetMatches(recipient.getRID());

                if (!matches.isEmpty()) {
                      JceKeyTransEnvelopedRecipient ter = null;

                      if (""sun.security.mscapi.RSAPrivateKey"".equals(privateKey.getClass().getCanonicalName() ) ) {
                            ter = new JceKeyTransEnvelopedRecipient(privateKey);
                            ter.setProvider( ""SunMSCAPI"" );
                            ter.setContentProvider(BouncyCastleProvider.PROVIDER_NAME);
                        } else {
                            ter = new JceKeyTransEnvelopedRecipient(privateKey);
                            ter.setProvider(BouncyCastleProvider.PROVIDER_NAME);
                        } 

                    return recipient.getContent(ter);
                }
            } else {
                throw new RuntimeException(""Wrong type of RecipientInformation: "" + recipient.getClass());
            }
            recipient=null;
        }

        if (recipient == null) {
            throw new RuntimeException(""Could not find a matching recipient""); 
        }

    } catch (CMSException e) {
        throw new RuntimeException(e); // FIXME
    } catch (CertificateEncodingException e) {
        throw new RuntimeException(e);
    }
}
</code></pre>

<p>Please help me what it could be.</p>

<p>Thanks a lot.</p>
","<p>I'm having the same problem for decryption, using both MSCAPI and PKCS#11. I found that the P11RSAChiper implemented in SunPKCS11 doesn't regard the wrap/unwrap methods, and it uses encrypt/decrypt for this purpose, which in my case conflicts with underlying layer of security, where the private key is marked just for unwrap by the SmartCard profile.</p>
","990","<java><private-key><encryption><public-key>","0","0","1","2014-04-06 12:05:58","","2","","1313792","","2013-08-14 21:10:22","2013-08-13 23:09:09",""
"11416510",".NET DSACryptoServiceProvider Key Sizes","<p>I want to use a 2048 bit DSA key, and I am using a .NET <code>DSACryptoServiceProvider</code>.  I was having trouble loading the key parameters into a .NET <code>DSAParameters</code> object, so I wrote the following code to output the valid key sizes for a <code>DSACryptoServiceProvider</code>: </p>

<pre><code>DSACryptoServiceProvider sampleDSA = new DSACryptoServiceProvider();
Console.Write(""----- DSA LEGAL KEY SIZES -----\n"");
foreach (KeySizes ks in sampleDSA.LegalKeySizes)
{
  Console.WriteLine(""Min: "" + ks.MinSize.ToString());
  Console.WriteLine(""Max: "" + ks.MaxSize.ToString());
}
</code></pre>

<p>There is only one <code>KeySizes</code> object in the array, and the ouput is as follows:</p>

<pre><code>----- DSA LEGAL KEY SIZES -----
Min: 512
Max: 1024
</code></pre>

<p>Is there any way to have a 2048 bit key using a <code>DSACryptoServiceProvider</code>?  Using a 1024 bit key is not an option.</p>

<p><strong>----EDIT-----</strong></p>

<p>I have enumerated the <code>LegalKeySizes</code> for all .NET <code>CryptoServiceProvider</code> classes that deal with Digital Signatures.  The results are as follows.</p>

<pre><code>System.Security.Cryptography.DSACryptoServiceProvider
Min: 512
Max: 1024

System.Security.Cryptography.RSACryptoServiceProvider
Min: 384
Max: 16384

System.Security.Cryptography.ECDsaCng
Min: 256
Max: 384
Min: 521
Max: 521
</code></pre>

<p>What I meant to ask was: Is there a way to tweak this to use a 2048 bit key using a <code>DSACryptoServiceProvider</code>, or am I locked into the 512-1024 bit range?</p>
","<p>Based on the legal key sizes output you posted, the .NET implementation will not work with more than 1024 bits.</p>

<p>Perhaps some other crypto provider would work?  I've used the Bouncycastle (www.bouncycastle.org) .NET provider before for things that .NET's provider cannot do.</p>
","989","<c#><.net><security><public-key-encryption><public-key>","2","2","2","2016-07-01 01:08:26","11418176","0","1","863553","","2012-07-10 17:01:39","2012-07-10 15:16:46",""
"11416510",".NET DSACryptoServiceProvider Key Sizes","<p>I want to use a 2048 bit DSA key, and I am using a .NET <code>DSACryptoServiceProvider</code>.  I was having trouble loading the key parameters into a .NET <code>DSAParameters</code> object, so I wrote the following code to output the valid key sizes for a <code>DSACryptoServiceProvider</code>: </p>

<pre><code>DSACryptoServiceProvider sampleDSA = new DSACryptoServiceProvider();
Console.Write(""----- DSA LEGAL KEY SIZES -----\n"");
foreach (KeySizes ks in sampleDSA.LegalKeySizes)
{
  Console.WriteLine(""Min: "" + ks.MinSize.ToString());
  Console.WriteLine(""Max: "" + ks.MaxSize.ToString());
}
</code></pre>

<p>There is only one <code>KeySizes</code> object in the array, and the ouput is as follows:</p>

<pre><code>----- DSA LEGAL KEY SIZES -----
Min: 512
Max: 1024
</code></pre>

<p>Is there any way to have a 2048 bit key using a <code>DSACryptoServiceProvider</code>?  Using a 1024 bit key is not an option.</p>

<p><strong>----EDIT-----</strong></p>

<p>I have enumerated the <code>LegalKeySizes</code> for all .NET <code>CryptoServiceProvider</code> classes that deal with Digital Signatures.  The results are as follows.</p>

<pre><code>System.Security.Cryptography.DSACryptoServiceProvider
Min: 512
Max: 1024

System.Security.Cryptography.RSACryptoServiceProvider
Min: 384
Max: 16384

System.Security.Cryptography.ECDsaCng
Min: 256
Max: 384
Min: 521
Max: 521
</code></pre>

<p>What I meant to ask was: Is there a way to tweak this to use a 2048 bit key using a <code>DSACryptoServiceProvider</code>, or am I locked into the 512-1024 bit range?</p>
","<p>.NET 4.6.2 added DSACng, which is a FIPS-186-3 compatible implementation of DSA.  DSACryptoServiceProvider is limited to FIPS-186-1 (which had a 1024-bit key limit).</p>

<p>Other than constructing the object, you should avoid depending on the concrete type, instead just using members on the DSA base class.</p>

<pre><code>using (DSA dsaPublicPrivate = new DSACng(2048))
using (DSA dsaPublic = new DSACng())
{
    dsaPublic.ImportParameters(dsaPublicPrivate.ExportParameters(false));

    byte[] signature = dsaPublicPrivate.SignData(data, HashAlgorithmName.SHA256);
    bool isValid = dsaPublic.VerifyData(data, signature, HashAlgorithmName.SHA256);

    ...
}
</code></pre>
","989","<c#><.net><security><public-key-encryption><public-key>","2","4","2","2016-07-01 01:08:26","11418176","0","1","863553","","2012-07-10 17:01:39","2012-07-10 15:16:46",""
"14278325","python-gnupg: retrieve public key of a signed message","<p>I would like to know the public key of the user that generates an encrypted/signed PGP message.</p>

<p>I looked at the python-gnupg API but I just found how to check that the signature is OK</p>

<pre><code>GPG().verify(data)
</code></pre>

<p>If the signature can be verified, it means that the public key is in the keyring.  How can I found which one it is?</p>
","<p>PGP doesn't store public keys inside of signed/encrypted messages, it stores key identifier (8-byte part of the hash of the public-key fields).
So you should look for something called 'key id' in the documentation.
Here it is:</p>

<p>When a signature is verified, signer information is held in attributes of verified: username, key_id, signature_id, fingerprint, trust_level and trust_text.</p>
","988","<python><pgp><public-key><gnupg>","1","2","2","2013-01-11 12:49:25","14278442","0","1","722332","","2013-01-11 12:45:42","2013-01-11 12:35:16",""
"14278325","python-gnupg: retrieve public key of a signed message","<p>I would like to know the public key of the user that generates an encrypted/signed PGP message.</p>

<p>I looked at the python-gnupg API but I just found how to check that the signature is OK</p>

<pre><code>GPG().verify(data)
</code></pre>

<p>If the signature can be verified, it means that the public key is in the keyring.  How can I found which one it is?</p>
","<p>You want to have a look at the <code>fingerprint</code> attribute of the <code>gnupg.Verify</code> object returned by the <code>verify</code> method.  For example:</p>

<pre><code>&gt;&gt;&gt; gpg = gnupg.GPG()
&gt;&gt;&gt; v = gpg.verify(data)
&gt;&gt;&gt; v.fingerprint
u'3D2822FCA7D73D07F65B1514C9A99684DEDF97D5'
</code></pre>

<p>You can then filter <code>list_keys</code> to find the key in question:</p>

<pre><code>&gt;&gt;&gt; [k for k in gpg.list_keys(v.fingerprint)
     if k['fingerprint'] == v.fingerprint]
</code></pre>
","988","<python><pgp><public-key><gnupg>","1","3","2","2013-01-11 12:49:25","14278442","0","1","722332","","2013-01-11 12:45:42","2013-01-11 12:35:16",""
"22481100","Saving a crypted private key in a cookie","<p>I am currently working on a project with a lot of security and I am having a bit of a problem choosing a technical solution to satisfy my customer need.</p>

<p><strong>First things first, let me explain you the customer need.</strong></p>

<p>For my customer's website, at some point a user needs to generate a <em>private key</em> and <em>public key</em> client side (gui : <em>browser</em>) then send the public key to the server and save the private key (<em>crypted</em> by a user choosen password) locally. The private key needs to be saved because it is used once in a second part of the process (the user needs to enter his password in order to decrypt it), once used we can dispose of the private key.</p>

<p>I have to add that the customer requests backward compatibility to IE7.</p>

<p><strong>First technical choice : Java Applet</strong></p>

<p>The first thing we looked up is to use a Java Applet, generates the keys just fine, but we enconter a problem on Safari Mac OSX, the appet is sandboxed and the user needs to perform a complicated action to disable sandbox mod. Our customer does not want this as it is not user firendly.</p>

<p><strong>Second solution : Saving crypted private key in a cookie</strong></p>

<p>We kept the java applet, but it does not save anything on disk, it is only used to perform cryptographic actions. We passed from the applet a crypted private key to the javascript to save in a cookie. We did it fine and we can retrieve the crypted private key from the cookie store and pass it to the applet to decrypt (with a popup requesting the user to enter his password).</p>

<p><strong>Question</strong>
We know that it is technically doable to save a crypted private key in a cookie, but the question is : is it secured, what kind of risks are we taking saving that private key in a the cookie store of the browser?</p>

<p>It would help me a lot if one of you could help me!</p>

<p>Cheers</p>
","<p>Cookies are sent in each request. This is really really bad because you want the private key to not sent over the network as much as possible.</p>

<p>Assuming you can't have local storage (IE7), the only way I know to store info on the cient side is cookies. I'd say : use local storage as much as possible, and when you can't, store the private key on the server side. At least, you'll be sending it once. it's bad, but less than really really bad ...</p>

<p>Or maybe you could store cookies on a dedicated subdomain that you never use again, but in order to read the cookie, even on the client side with javascript, you need to be on a page of that subdomain, and that means sending the key over the network again everytime you want to use it.</p>

<p>As far as I know.</p>
","972","<security><cookies><applet><private-key><public-key>","4","0","4","2014-06-16 18:04:06","","0","","","","","2014-03-18 13:37:23",""
"22481100","Saving a crypted private key in a cookie","<p>I am currently working on a project with a lot of security and I am having a bit of a problem choosing a technical solution to satisfy my customer need.</p>

<p><strong>First things first, let me explain you the customer need.</strong></p>

<p>For my customer's website, at some point a user needs to generate a <em>private key</em> and <em>public key</em> client side (gui : <em>browser</em>) then send the public key to the server and save the private key (<em>crypted</em> by a user choosen password) locally. The private key needs to be saved because it is used once in a second part of the process (the user needs to enter his password in order to decrypt it), once used we can dispose of the private key.</p>

<p>I have to add that the customer requests backward compatibility to IE7.</p>

<p><strong>First technical choice : Java Applet</strong></p>

<p>The first thing we looked up is to use a Java Applet, generates the keys just fine, but we enconter a problem on Safari Mac OSX, the appet is sandboxed and the user needs to perform a complicated action to disable sandbox mod. Our customer does not want this as it is not user firendly.</p>

<p><strong>Second solution : Saving crypted private key in a cookie</strong></p>

<p>We kept the java applet, but it does not save anything on disk, it is only used to perform cryptographic actions. We passed from the applet a crypted private key to the javascript to save in a cookie. We did it fine and we can retrieve the crypted private key from the cookie store and pass it to the applet to decrypt (with a popup requesting the user to enter his password).</p>

<p><strong>Question</strong>
We know that it is technically doable to save a crypted private key in a cookie, but the question is : is it secured, what kind of risks are we taking saving that private key in a the cookie store of the browser?</p>

<p>It would help me a lot if one of you could help me!</p>

<p>Cheers</p>
","<p>The main problem is  that cookies are only meant for things you are sending to the server. They are not meant for storage and you should not be sending your private key anywhere, ever.</p>

<p>Cookies can be stolen via XSS (always assume you have an XSS vuln in your site) and the attacker can then try to decrypt it.</p>

<p>On the grand scale of things you could do a lot worse. Assuming your crypto is solid, the private key is probably safe, but the big issue is that you shouldn't be using cookies like this. Using Web Storage is probably a far better solution here.</p>
","972","<security><cookies><applet><private-key><public-key>","4","0","4","2014-06-16 18:04:06","","0","","","","","2014-03-18 13:37:23",""
"22481100","Saving a crypted private key in a cookie","<p>I am currently working on a project with a lot of security and I am having a bit of a problem choosing a technical solution to satisfy my customer need.</p>

<p><strong>First things first, let me explain you the customer need.</strong></p>

<p>For my customer's website, at some point a user needs to generate a <em>private key</em> and <em>public key</em> client side (gui : <em>browser</em>) then send the public key to the server and save the private key (<em>crypted</em> by a user choosen password) locally. The private key needs to be saved because it is used once in a second part of the process (the user needs to enter his password in order to decrypt it), once used we can dispose of the private key.</p>

<p>I have to add that the customer requests backward compatibility to IE7.</p>

<p><strong>First technical choice : Java Applet</strong></p>

<p>The first thing we looked up is to use a Java Applet, generates the keys just fine, but we enconter a problem on Safari Mac OSX, the appet is sandboxed and the user needs to perform a complicated action to disable sandbox mod. Our customer does not want this as it is not user firendly.</p>

<p><strong>Second solution : Saving crypted private key in a cookie</strong></p>

<p>We kept the java applet, but it does not save anything on disk, it is only used to perform cryptographic actions. We passed from the applet a crypted private key to the javascript to save in a cookie. We did it fine and we can retrieve the crypted private key from the cookie store and pass it to the applet to decrypt (with a popup requesting the user to enter his password).</p>

<p><strong>Question</strong>
We know that it is technically doable to save a crypted private key in a cookie, but the question is : is it secured, what kind of risks are we taking saving that private key in a the cookie store of the browser?</p>

<p>It would help me a lot if one of you could help me!</p>

<p>Cheers</p>
","<p>I´d say that saving your private key in a cookies isn´t a really good choice since they are not supposed to hold sensitive information due security reasons, and our colleagues already told other reasons.
It´s also important to notice that the user may clear all his cookies at any given time or disable it at all.
The applet would meet better your customer requirements and would let you for example prompt the user to save a keystore file with the private key, this kind file was designed to hold this kind of information.</p>
","972","<security><cookies><applet><private-key><public-key>","4","0","4","2014-06-16 18:04:06","","0","","","","","2014-03-18 13:37:23",""
"22481100","Saving a crypted private key in a cookie","<p>I am currently working on a project with a lot of security and I am having a bit of a problem choosing a technical solution to satisfy my customer need.</p>

<p><strong>First things first, let me explain you the customer need.</strong></p>

<p>For my customer's website, at some point a user needs to generate a <em>private key</em> and <em>public key</em> client side (gui : <em>browser</em>) then send the public key to the server and save the private key (<em>crypted</em> by a user choosen password) locally. The private key needs to be saved because it is used once in a second part of the process (the user needs to enter his password in order to decrypt it), once used we can dispose of the private key.</p>

<p>I have to add that the customer requests backward compatibility to IE7.</p>

<p><strong>First technical choice : Java Applet</strong></p>

<p>The first thing we looked up is to use a Java Applet, generates the keys just fine, but we enconter a problem on Safari Mac OSX, the appet is sandboxed and the user needs to perform a complicated action to disable sandbox mod. Our customer does not want this as it is not user firendly.</p>

<p><strong>Second solution : Saving crypted private key in a cookie</strong></p>

<p>We kept the java applet, but it does not save anything on disk, it is only used to perform cryptographic actions. We passed from the applet a crypted private key to the javascript to save in a cookie. We did it fine and we can retrieve the crypted private key from the cookie store and pass it to the applet to decrypt (with a popup requesting the user to enter his password).</p>

<p><strong>Question</strong>
We know that it is technically doable to save a crypted private key in a cookie, but the question is : is it secured, what kind of risks are we taking saving that private key in a the cookie store of the browser?</p>

<p>It would help me a lot if one of you could help me!</p>

<p>Cheers</p>
","<p>You could use localstorage then just deploy localstorage polyfill for IE7</p>
","972","<security><cookies><applet><private-key><public-key>","4","0","4","2014-06-16 18:04:06","","0","","","","","2014-03-18 13:37:23",""
"33375142","Public Key Pinning not working","<p>Hello I am trying to implement Public-Key-Pinning on my apache server running as a proxy for another web-app, but it won't work (if I enter a wrong hash the page is still displayed instead of an error, which should be shown in Firefox or Chrome). I am sure the header is correct – the hash is correct, I have tested it with Chrome.</p>

<p>My Configdata is</p>

<pre><code>&lt;VirtualHost *:443&gt;
ServerName subdomain.*******.***:443
SSLCertificateFile /etc/apache2/ssl/___.crt
SSLCertificateKeyFile /etc/apache2/ssl/___.key
SSLCertificateChainFile /etc/apache2/ssl/___.ca
Header always set Public-Key-Pins ""pin-sha256=\""****\""; pin-sha256=\""****\"";  max-age=120; includeSubDomains""

    &lt;Proxy *&gt;
       Order deny,allow
       Allow from all
   &lt;/Proxy&gt;

    ProxyPass / ****:****/
    ProxyPassReverse / ****:****/
    &lt;Location /&gt;
        Order allow,deny
        Allow from all
    &lt;/Location&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>At first I only had one hash but I added a second one just in case this would be required. What am I doing wrong?</p>

<p>Note: Of course I have mod_header enabled and loaded.</p>
","<p>Two hashes are required and they must be two independent hashes. I.e. You cannot pin the cert and the intermediate cert that issued that as they are not independent. This is a safety feature to ensure you have a backup incase you need it.</p>

<p>Additionally a policy will only be accepted if it passes so you cannot put in a fake policy and watch it fail because it will never be accepted.</p>

<p>A good tool to check your policy is this one: <a href=""https://report-uri.io/home/pkp_analyse"" rel=""nofollow"">https://report-uri.io/home/pkp_analyse</a>
And also other tools on same site to actually generate your policy:
<a href=""https://report-uri.io/home/pkp_hash"" rel=""nofollow"">https://report-uri.io/home/pkp_hash</a></p>

<p>However you need to be VERY careful with HPKP. It's very easy to block your website and, hope you don't take this the wrong way, it doesn't sound like you fully understand HPKP so I would suggest you read about it some more first.</p>

<p>There is a Public-Key-Pins-Report-Only (which is only available in Chrome at present) , and which allows you to test a policy for a bit (well in Chrome at least) but for that you also need to use the report-uri option (you can also use above site to collect your reports if you don't want to write your own service for this).</p>

<p>I've an active interest in this and, if people don't mind me linking here, I've blogged about it in much more detail here: <a href=""https://www.tunetheweb.com/security/http-security-headers/hpkp/"" rel=""nofollow"">https://www.tunetheweb.com/security/http-security-headers/hpkp/</a>. I think it's potentially a very dangerous option that needs careful consideration before implementing.</p>
","970","<apache><http-headers><public-key><pinning>","2","3","2","2016-06-27 14:22:13","33378799","0","","","","","2015-10-27 17:51:53",""
"33375142","Public Key Pinning not working","<p>Hello I am trying to implement Public-Key-Pinning on my apache server running as a proxy for another web-app, but it won't work (if I enter a wrong hash the page is still displayed instead of an error, which should be shown in Firefox or Chrome). I am sure the header is correct – the hash is correct, I have tested it with Chrome.</p>

<p>My Configdata is</p>

<pre><code>&lt;VirtualHost *:443&gt;
ServerName subdomain.*******.***:443
SSLCertificateFile /etc/apache2/ssl/___.crt
SSLCertificateKeyFile /etc/apache2/ssl/___.key
SSLCertificateChainFile /etc/apache2/ssl/___.ca
Header always set Public-Key-Pins ""pin-sha256=\""****\""; pin-sha256=\""****\"";  max-age=120; includeSubDomains""

    &lt;Proxy *&gt;
       Order deny,allow
       Allow from all
   &lt;/Proxy&gt;

    ProxyPass / ****:****/
    ProxyPassReverse / ****:****/
    &lt;Location /&gt;
        Order allow,deny
        Allow from all
    &lt;/Location&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>At first I only had one hash but I added a second one just in case this would be required. What am I doing wrong?</p>

<p>Note: Of course I have mod_header enabled and loaded.</p>
","<p>It in fact worked... my mistake was the way I tested it.</p>

<p>So here's the most important thing I missed out:</p>

<ol>
<li>You need at least one backup pin</li>
<li>If you test it don't change the hash in the header but either the SSL-Certificate or (better) try changing the hash saved locally. Or thanks for <code>BazzaDP</code> for pointing it out try using <a href=""https://report-uri.io/home/pkp_analyse"" rel=""nofollow"">https://report-uri.io/home/pkp_analyse</a>.</li>
</ol>

<p>Please read BazzaDP's answer if you are new to HPKP and want to get started with it. Mozilla also has some good documentation.</p>
","970","<apache><http-headers><public-key><pinning>","2","0","2","2016-06-27 14:22:13","33378799","0","","","","","2015-10-27 17:51:53",""
"14519752","Python official keyserver","<p>I have just downloaded the Python 2.7.3 64-bit installer from the <a href=""http://www.python.org/getit/"" rel=""nofollow"">Python download page</a> and I would like to verify the signatures. So I need to import the keys and my preferred method is to get them from a trusted key server.</p>

<p>The method suggested in the Python documentation is using <code>gpg</code> from the command line with</p>

<pre><code>gpg --recv-keys EA5BBD71 6A45C816 ED9D77D5 7D9DC8D2 A4135B38 36580288
</code></pre>

<p>However, no key server is indicated and I cannot find any information (even on google) about a key server (<code>--keyserver</code> option) providing these keys. The command as it is does not work: it connects to the default server <code>keys.gnupg.net</code> and exits with errors</p>

<pre><code>gpgkeys: key ... not found on keyserver
</code></pre>

<p>Does anybody know where I can find a keyserver providing the official Python gpg keys?</p>
","<p>That specific key server works for me, with or without a <code>0x</code> prefix:</p>

<pre><code>gpg --keyserver keys.gnupg.net --recv-keys 0xEA5BBD71 0x6A45C816 0xED9D77D5 0x7D9DC8D2 0xA4135B38 0x36580288
</code></pre>

<p>On most keyservers I tried, in fact, the keys are present; my setup uses <code>wwwkeys.pgp.net</code>:</p>

<pre><code>gpg --keyserver wwwkeys.pgp.net --recv-keys EA5BBD71 6A45C816 ED9D77D5 7D9DC8D2 A4135B38 36580288
</code></pre>

<p>Alternatively you'd have to manually download the <a href=""http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x6AF053F07D9DC8D2"" rel=""nofollow"">7D9DC8D2 key (Martin von Löwis)</a>, used for signing the Windows builds and import that manually:</p>

<pre><code>curl -o 7D9DC8D2.txt ""http://keys.gnupg.net/pks/lookup?op=get&amp;search=0x6AF053F07D9DC8D2""
gpg --import 7D9DC8D2.txt
</code></pre>
","968","<python><public-key>","1","1","1","2013-01-25 11:05:26","14520032","2","","","","","2013-01-25 10:21:47",""
"42788509","sftp with public key is not working","<p>Generated RSA public key using ssh-keygen.</p>

<p>Trying to use to connect remote server through sftp :</p>

<pre><code> JSch jsch = new JSch();
        try {

            String publicKey = ""/home/testuser/.ssh/id_rsa.pub"";
            jsch.addIdentity(publicKey);
            session = jsch.getSession(sftpUsername, sftpHostname, sftpPort);
            session.setConfig(""PreferredAuthentications"", ""publickey,keyboard-interactive,password"");
        } catch (JSchException e) {
            logger.error(""Unable to obtain session"", e);
        }
</code></pre>

<p>getting below error :</p>

<pre><code>com.jcraft.jsch.JSchException: invalid privatekey: /home/testuser/.ssh/id_rsa.pub
        at com.jcraft.jsch.IdentityFile.&lt;init&gt;(IdentityFile.java:261)
        at com.jcraft.jsch.IdentityFile.newInstance(IdentityFile.java:135)
        at com.jcraft.jsch.IdentityFile.newInstance(IdentityFile.java:130)
        at com.jcraft.jsch.JSch.addIdentity(JSch.java:206)
        at com.jcraft.jsch.JSch.addIdentity(JSch.java:192)
</code></pre>

<p>Any suggestions ? </p>
","<p>You have:</p>

<pre><code>jsch.addIdentity(publicKey);
</code></pre>

<p>JSch javadoc says:</p>

<blockquote>
  <p><code>public void addIdentity(String prvkey) 
                 throws JSchException;</code></p>
  
  <p>Adds an identity to be used for public-key authentication. Before registering it into identityRepository, it will be deciphered with passphrase.</p>
  
  <p>Parameters:</p>
  
  <ul>
  <li>prvkey - the file name of the private key file. This is also used as the identifying name of the key. The corresponding public key is assumed to be in a file with the same name with suffix .pub.</li>
  </ul>
</blockquote>

<p>You have supplied the public key, when JSch wants the private key.</p>

<p>If you think about it, this makes sense. There's nothing secret about a public key. JSch wants a secret, so it can prove who you are.</p>

<p>Your private key is probably in <code>~/.ssh/id_rsa</code> (without the <code>.pub</code> extension).</p>

<p>You may need to use the two-parameter version of <code>addIdentity</code>, in order to supply a passphrase to decrypt the private key.</p>
","955","<java><sftp><jsch><public-key>","0","2","1","2017-03-14 14:33:01","42788702","0","","","","","2017-03-14 14:19:49",""
"52384809","public key to string and then back to public key java","<p>so i have this piece of code which m trying to do some conversions in so firstly i generate a public key and print it and then convert in byte then to string after then i am converting it back to bytes but when i convert it back to bytes the value changes for the byte so the public key generated isnt the same as the top one as you can see in the output below   </p>

<pre><code>//generating public key     
  PublicKey public_key = CryptographyHelper.ellipticCurveCrypto().getPublic();
  System.out.println(""PUBLIC KEY::"" + public_key);

       //converting public key to byte            
        byte[] byte_pubkey = public_key.getEncoded();
        System.out.println(""\nBYTE KEY::: "" + byte_pubkey);

          //converting byte to String 
        String str_key = Arrays.toString(byte_pubkey);
        System.out.println(""\nSTRING KEY::"" + str_key);

//converting string to Bytes
        byte_pubkey = str_key.getBytes();
        System.out.println(""BYTE KEY::"" + byte_pubkey);

//converting it back to public key
   KeyFactory factory = KeyFactory.getInstance(""ECDSA"", ""BC"");
        public_key = (ECPublicKey) factory.generatePublic(new X509EncodedKeySpec(byte_pubkey));
        System.out.println(""FINAL OUTPUT"" + public_key);
</code></pre>

<p><strong>Output</strong></p>

<pre><code>    PUBLIC KEY::EC Public Key [4d:53:40:86:3f:a8:91:49:b6:27:b5:58:14:b8:8b:f1:ff:8a:78:70]
            X: c8e1028cad7b105814d4a2e0e292f5f7904aad7b6cbc46a5
            Y: 312272321a1ba4ff14caa73b42acb35eb025d9f6fc2ca6b3


BYTE KEY::: [B@1a1d6a08

STRING KEY::[48, 70, 48, 16, 6, 7, 42, -122, 72, -50, 61, 2, 1, 6, 5, 43, -127, 4, 0, 31, 3, 50, 0, 4, -56, -31, 2, -116, -83, 123, 16, 88, 20, -44, -94, -32, -30, -110, -11, -9, -112, 74, -83, 123, 108, -68, 70, -91, 49, 34, 114, 50, 26, 27, -92, -1, 20, -54, -89, 59, 66, -84, -77, 94, -80, 37, -39, -10, -4, 44, -90, -77]
BYTE KEY[B@37d31475
Exception in thread ""main"" java.security.spec.InvalidKeySpecException: encoded key spec not recognized: failed to construct sequence from byte[]: Extra data detected in stream
    at org.bouncycastle.jcajce.provider.asymmetric.util.BaseKeyFactorySpi.engineGeneratePublic(Unknown Source)
    at org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi.engineGeneratePublic(Unknown Source)
    at java.security.KeyFactory.generatePublic(KeyFactory.java:328)
    at blahblah.Driver.main(Driver.java:44)
C:\Users\blahblah\AppData\Local\NetBeans\Cache\8.1\executor-snippets\run.xml:53: Java returned: 1
BUILD FAILED (total time: 1 second)
</code></pre>

<p>i have an error because when i am converting it back to bytes the second time and then when it convert backs to public key it becomes invalid hence the error </p>

<p><strong>Additional Infornmation</strong></p>

<p>but when i just do this it works fine but my goal is to first convert the public key to a string some how then convert that string to type public key and the only way i can do that is by converting the public key which is in string type to a byte type and then converting it back to a public key
i can not convert a string direct to a public key as it wont work </p>
","<p>You need to use <strong>Base64</strong> encoding system while converting to String type.<br>
 <strong>tostring()</strong> method uses JVM default encoding which does not support your characters.</p>

<pre><code>PublicKey public_key = CryptographyHelper.ellipticCurveCrypto().getPublic();     
System.out.println(""PUBLIC KEY::"" + public_key);

//converting public key to byte            
byte[] byte_pubkey = public_key.getEncoded();
System.out.println(""\nBYTE KEY::: "" + byte_pubkey);

//converting byte to String 
String str_key = Base64.getEncoder().encodeToString(byte_pubkey);
// String str_key = new String(byte_pubkey,Charset.);
System.out.println(""\nSTRING KEY::"" + str_key);

//converting string to Bytes
byte_pubkey  = Base64.getDecoder().decode(str_key);
System.out.println(""BYTE KEY::"" + byte_pubkey);


//converting it back to public key
KeyFactory factory = KeyFactory.getInstance(""ECDSA"", ""BC"");
public_key = (ECPublicKey) factory.generatePublic(new X509EncodedKeySpec(byte_pubkey));
System.out.println(""FINAL OUTPUT"" + public_key);
</code></pre>
","954","<java><type-conversion><public-key>","0","3","1","2018-09-18 11:55:20","52386057","2","","","","","2018-09-18 10:45:06",""
"9776829","Can't push, git one repo, one user, two computers","<p>I want to access my github repo from two different computers, using one github account. Everything works fine on the computer that I created the repo on. It's just this second computer that is messed up</p>

<p>I successfully set up a repo on github.  Now I want to clone it on another machine so that I have push/pull access.</p>

<p>I made a public key on the second machine and specified my email as the email associated with github</p>

<pre><code>ssh-keygen -t rsa -C ""MYEMAIL@gmail.com"",
</code></pre>

<p>then copied it to the SSH keys on the github website.</p>

<p>I cloned the repo like this</p>

<pre><code>git clone https://github.com/MYUSERNAME/MYREPO
</code></pre>

<p>Next I edited the ""url = "" line in the .git/config file so that it said </p>

<pre><code>url = ssh://git@github.com/MYUSERNAME/MYREPO
</code></pre>

<p>Both of my computers are configured to have the same user.name, USERNAME and github.user based on my github account settings.  I also configured the API token with the same token on each computer.</p>

<pre><code>git config --global user.name ""FIRST LAST""

git config --global user.email ""MYUSERNAME@gmail.com""

git config --global github.user MYUSERNAME
</code></pre>

<p>Yet, when I try to push, this happens:</p>

<pre><code>&gt;&gt; git push origin master

Permission denied (publickey).&lt;/code&gt;

fatal: The remote end hung up unexpectedly
</code></pre>
","<p>The issue was a naming one, as  <a href=""https://stackoverflow.com/users/1239064/erin"">the OP erin</a> mentions in the comments:</p>

<blockquote>
  <p>I named my public key ""<code>github.pub</code>"" rather than ""<code>id_rsa.pub</code>""</p>
</blockquote>

<p>For ssh to work, using default naming convention is important.<br>
See, for instance:</p>

<ul>
<li>""<a href=""https://stackoverflow.com/questions/2969249/git-clone-with-ssh-issue/2969393#2969393"">git clone with ssh issue</a>""</li>
<li>""<a href=""https://stackoverflow.com/questions/7509462/github-setup-no-address-associated-with-name/7509520#7509520"">GITHUB setup - no address associated with name</a>""</li>
</ul>
","953","<github><push><config><ssh-keys><public-key>","7","3","1","2012-03-19 21:26:32","9778203","3","2","","","","2012-03-19 19:46:57",""
"39105031","java.security.spec.InvalidKeySpecException: java.io.IOException: unexpected end-of-contents marker","<p>I'm trying to convert a <code>.pub</code> file's contents to a <code>PublicKey</code> and then convert the <code>PublicKey</code> back into a <code>String</code> in order to determine if the conversion is working and does not change the key in the process.</p>

<p><strong>id_rsa.pub</strong>:</p>

<pre><code>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0zszKhcZTC8xJidUszmRn4Tr/FxPs04wpCzEstebfTW7Bvqgtt+OdvxoNyYM0LAEnxEF4XhAWcsX7VJJqstZLpDqlKDXFr2d0aVIjksCpZt+ftVRwYHRoERhEOP/UmPFb5rKIkhQbED2kTWg11mW9soc6BhwB3THn/Cyo3t1u2vWjEySgPhKeA3Xzh+5eqV7CUD8V6S7OAT7T9ijf7sRV0R8rwHgTLWJ8+dETnY3L3N0fEaNuaayeNblHqrL53/1+tsBBUF3bAS+1GE6oniSeM/yhtfzf2x+O5MDlVVMbOCC/v+FnfIIEKLA+v1xDSAha7C5cHh82TxToWXsbjqGD me@mail
</code></pre>

<p><strong>Converter.java</strong></p>

<pre><code>public static final synchronized PublicKey base64ToPublicKey(final String algorithm, final String base64) throws GeneralSecurityException, IOException {
        BASE64Decoder decoder = new BASE64Decoder();
        byte[] sigBytes2 = decoder.decodeBuffer(base64);
        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(sigBytes2);
        KeyFactory keyFact = KeyFactory.getInstance(algorithm, ""BC"");
        return keyFact.generatePublic(x509KeySpec);
    }

    public static final synchronized String publicKeyToBase64(final PublicKey publicKey) throws GeneralSecurityException, IOException {
        byte[] publicKeyBytes = publicKey.getEncoded();
        BASE64Encoder encoder = new BASE64Encoder();
        return encoder.encode(publicKeyBytes);
    }
</code></pre>

<p>When I run:</p>

<pre><code>PublicKey test1 = base64ToPublicKey(""RSA"", ""AAAAB3NzaC1yc2EAAAADAQABAAABAQC0zszKhcZTC8xJidUszmRn4Tr/FxPs04wpCzEstebfTW7Bvqgtt+OdvxoNyYM0LAEnxEF4XhAWcsX7VJJqstZLpDqlKDXFr2d0aVIjksCpZt+ftVRwYHRoERhEOP/UmPFb5rKIkhQbED2kTWg11mW9soc6BhwB3THn/Cyo3t1u2vWjEySgPhKeA3Xzh+5eqV7CUD8V6S7OAT7T9ijf7sRV0R8rwHgTLWJ8+dETnY3L3N0fEaNuaayeNblHqrL53/1+tsBBUF3bAS+1GE6oniSeM/yhtfzf2x+O5MDlVVMbOCC/v+FnfIIEKLA+v1xDSAha7C5cHh82TxToWXsbjqGD"");
</code></pre>

<p>I get back:</p>

<pre><code>java.security.spec.InvalidKeySpecException: java.io.IOException: unexpected end-of-contents marker
    at org.bouncycastle.jce.provider.JDKKeyFactory.engineGeneratePublic(Unknown Source)
    at org.bouncycastle.jce.provider.JDKKeyFactory$RSA.engineGeneratePublic(Unknown Source)
    at java.security.KeyFactory.generatePublic(KeyFactory.java:328)
    at base64ToPublicKey(Converter.java:216)
    at main(Converter.java:283)
</code></pre>
","<p><strong>OpenSSH public key files</strong> (<code>id_*.pub</code> also the entries in <code>known_hosts</code> and <code>authorized_keys</code>) for SSH2 use an OpenSSH-specific variant of an SSH-specific format, see <a href=""https://tools.ietf.org/html/rfc4716"" rel=""nofollow noreferrer"">rfc4716</a> which is in turn based on the SSH2 wire format (as linked) <a href=""https://tools.ietf.org/html/rfc4253#section-6.6"" rel=""nofollow noreferrer"">rfc4253 6.6</a>, which is <strong>not the 'X.509' format Java crypto uses</strong>. (OpenSSH file formats for SSH1 were different, but SSH1 is long broken and should not be used.)</p>

<p>To convert this in Java see <a href=""https://stackoverflow.com/questions/19365940/convert-openssh-rsa-key-to-javax-crypto-cipher-compatible-format"">convert openSSH rsa key to javax.crypto.Cipher compatible format</a> .</p>

<p>It's easier to avoid the problem. </p>

<p><strong>Bypass 1:</strong> If you have reasonably recent OpenSSH (6.0 is okay, not sure for earlier), use</p>

<pre><code>ssh-keygen -e -m PKCS8 -f id_rsa.pub &gt;pub.pem # change filename as needed
</code></pre>

<p>to convert to 'X.509' (really SubjectPublicKeyInfo aka SPKI) in PEM form. (Yes they do use the name PKCS8 to mean SPKI; <a href=""https://crypto.stackexchange.com/questions/27913/why-can-ssh-keygen-export-a-public-key-in-pem-pkcs8-format"">it's crazy</a>.) Then read this in Java by discarding the BEGIN and END lines, decode everything in between (less the line breaks) from base64 to <code>byte[]</code>, and put that in <code>X509EncodedKeySpec</code> as you have now. Or if you have OpenSSL you can convert to DER form </p>

<pre><code>openssl rsa -pubin -in pub.pem -out pub.der -outform der # any version
openssl pkey -pubin -in pub.pem -out pub.der -outform der # 1.0.0 up
</code></pre>

<p>and then read the DER file with no change at all into an <code>X509EncodedKeySpec</code>.</p>

<p><strong>Bypass 2:</strong> if you have the <strong>private key</strong>, and it is NOT OpenSSH's 'new' format (optional since 6.5 (edit) and <em>default</em> since 7.8), and you have OpenSSL, get the public key in SPKI (Java-friendly) format with one of</p>

<pre><code>openssl rsa -in id_rsa -pubout -out pub.pem # default PEM
openssl rsa -in id_rsa -pubout -out pub.der -outform der # DER
openssl pkey -in id_rsa -pubout -out pub.pem # default PEM, 1.0.0 up
openssl pkey -in id_rsa -pubout -out pub.der -outform der # DER, 1.0.0
</code></pre>
","946","<java><security><bouncycastle><public-key><key-pair>","0","0","1","2019-05-25 09:20:41","39108799","0","","","","","2016-08-23 15:18:34",""
"33180469","Opening SSH tunnel in C# in background","<p>I have a problem in C# when trying to open a SSH tunnel on <code>127.0.0.1:9999</code>. </p>

<p>This is my <code>Program.cs</code></p>

<pre><code>class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine(""Begin"");

        PlinkTest plink = new PlinkTest();

        String feedback = plink.CreateTunnel(""1.2.3.4"", ""user"", ""user"");

        Console.WriteLine(""THING:"" + feedback);

        Console.Read();
    }
}
</code></pre>

<p>This is my program, <code>PlinkTest.cs</code>:</p>

<pre><code>class PlinkTest
{
    String PATH_TO_PLINK = @""C:\plink\plink.exe"";
    public PlinkTest()
    {
    }

    public string RequestInfo(string remoteHost, string userName, string password, string[] lstCommands)
    {
        m_szFeedback = ""Feedback from: "" + remoteHost + ""\r\n"";

       //  ProcessStartInfo psi = new ProcessStartInfo(""echo y | C:\\plink\\plink.exe"")
        ProcessStartInfo psi = new ProcessStartInfo(""C:\\plink\\plink.exe"")
        {
            Arguments = String.Format(""-ssh -N -D 9999 user@1.2.3.4 -pw user -v""),
            RedirectStandardError = true,
            RedirectStandardOutput = true,
            RedirectStandardInput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        Process p = Process.Start(psi);

        m_objLock = new Object();
        m_blnDoRead = true;

        AsyncReadFeedback(p.StandardOutput); // start the async read of stdout
        AsyncReadFeedback(p.StandardError); // start the async read of stderr

        StreamWriter strw = p.StandardInput;

        foreach (string cmd in lstCommands)
        {
            strw.WriteLine(cmd); // send commands 
        }
        strw.WriteLine(""exit""); // send exit command at the end

        p.WaitForExit(); // block thread until remote operations are done
        return m_szFeedback;
    }


    public string CreateTunnel(string remoteHost, string userName, string password)
    {
        m_szFeedback = ""Feedback from: "" + remoteHost + ""\r\n"";

        //  ProcessStartInfo psi = new ProcessStartInfo(""echo y | C:\\plink\\plink.exe"")
        ProcessStartInfo psi = new ProcessStartInfo(PATH_TO_PLINK)
        {
            Arguments = String.Format(""-ssh -N -D 9999 user@1.2.3.4 -pw user -v""),
            RedirectStandardError = true,
            RedirectStandardOutput = true,
            RedirectStandardInput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        Process p = Process.Start(psi);

        m_objLock = new Object();
        m_blnDoRead = true;

        AsyncReadFeedback(p.StandardOutput); // start the async read of stdout
        AsyncReadFeedback(p.StandardError); // start the async read of stderr

        StreamWriter strw = p.StandardInput;


        // SLEEP HERE 10 SEC

        strw.WriteLine(""exit""); // send exit command at the end

        p.WaitForExit(); // block thread until remote operations are done
        return m_szFeedback;
    }


    private String m_szFeedback; // hold feedback data
    private Object m_objLock; // lock object
    private Boolean m_blnDoRead; // boolean value keeping up the read (may be used to interrupt the reading process)

    public void AsyncReadFeedback(StreamReader strr)
    {
        Thread trdr = new Thread(new ParameterizedThreadStart(__ctReadFeedback));
        trdr.Start(strr);
    }
    private void __ctReadFeedback(Object objStreamReader)
    {
        StreamReader strr = (StreamReader)objStreamReader;
        string line;
        while (!strr.EndOfStream &amp;&amp; m_blnDoRead)
        {
            line = strr.ReadLine();
            // lock the feedback buffer (since we don't want some messy stdout/err mix string in the end)
            lock (m_objLock) { m_szFeedback += line + ""\r\n""; }
        }
    }
}
</code></pre>

<p><strong>FIRST PROBLEM</strong></p>

<p>The first problem I am facing is accepting RSA key automatically, whitch I can do running</p>

<pre class=""lang-none prettyprint-override""><code>echo y |plink.exe -ssh -N -D 9999 user@1.2.3.4 -pw user -v
</code></pre>

<p>but it turns out that I get an error when I use <code>echo y |</code> at <code>Process p = Process.Start(psi);</code> line where <code>psi</code> variable is ok. I know how to put arguments after with <code>Arguments = String.Format(""-ssh -N -D 9999 user@1.2.3.4 -pw user -v""),</code> but i don't know how to put them in front of the command.</p>

<p><strong>SECOND PROBLEM</strong></p>

<p>The second problem is that I don't want to wait for the content because when I am creating the tunnel it says nothing, just waiting. I just want to open a SSH tunnel in background on <code>127.0.0.1:9999</code>, that's all.</p>

<p>What do I have to change?</p>

<p>Thanks.</p>
","<p>Obviously it is not possible to do io redirection with echo in your scenario.</p>

<p>Try to send the <code>y</code> to plink using the <code>strw.WriteLine(...);</code>  you already have in place or create a <code>yes.txt</code> file in which you put a single <code>y</code> and have plink read its content with <code>plink &lt; yes.txt</code>.</p>

<p>A quick scan of <a href=""http://linux.die.net/man/1/plink"" rel=""nofollow"">plinks manual page</a> showed no parameter that enables you to specify an ""all-yes mode"".</p>
","945","<c#><ssh><public-key><ssh-tunnel>","1","-1","3","2017-02-24 07:05:53","","2","2","850848","","2015-10-19 06:26:27","2015-10-16 22:26:57",""
"33180469","Opening SSH tunnel in C# in background","<p>I have a problem in C# when trying to open a SSH tunnel on <code>127.0.0.1:9999</code>. </p>

<p>This is my <code>Program.cs</code></p>

<pre><code>class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine(""Begin"");

        PlinkTest plink = new PlinkTest();

        String feedback = plink.CreateTunnel(""1.2.3.4"", ""user"", ""user"");

        Console.WriteLine(""THING:"" + feedback);

        Console.Read();
    }
}
</code></pre>

<p>This is my program, <code>PlinkTest.cs</code>:</p>

<pre><code>class PlinkTest
{
    String PATH_TO_PLINK = @""C:\plink\plink.exe"";
    public PlinkTest()
    {
    }

    public string RequestInfo(string remoteHost, string userName, string password, string[] lstCommands)
    {
        m_szFeedback = ""Feedback from: "" + remoteHost + ""\r\n"";

       //  ProcessStartInfo psi = new ProcessStartInfo(""echo y | C:\\plink\\plink.exe"")
        ProcessStartInfo psi = new ProcessStartInfo(""C:\\plink\\plink.exe"")
        {
            Arguments = String.Format(""-ssh -N -D 9999 user@1.2.3.4 -pw user -v""),
            RedirectStandardError = true,
            RedirectStandardOutput = true,
            RedirectStandardInput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        Process p = Process.Start(psi);

        m_objLock = new Object();
        m_blnDoRead = true;

        AsyncReadFeedback(p.StandardOutput); // start the async read of stdout
        AsyncReadFeedback(p.StandardError); // start the async read of stderr

        StreamWriter strw = p.StandardInput;

        foreach (string cmd in lstCommands)
        {
            strw.WriteLine(cmd); // send commands 
        }
        strw.WriteLine(""exit""); // send exit command at the end

        p.WaitForExit(); // block thread until remote operations are done
        return m_szFeedback;
    }


    public string CreateTunnel(string remoteHost, string userName, string password)
    {
        m_szFeedback = ""Feedback from: "" + remoteHost + ""\r\n"";

        //  ProcessStartInfo psi = new ProcessStartInfo(""echo y | C:\\plink\\plink.exe"")
        ProcessStartInfo psi = new ProcessStartInfo(PATH_TO_PLINK)
        {
            Arguments = String.Format(""-ssh -N -D 9999 user@1.2.3.4 -pw user -v""),
            RedirectStandardError = true,
            RedirectStandardOutput = true,
            RedirectStandardInput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        Process p = Process.Start(psi);

        m_objLock = new Object();
        m_blnDoRead = true;

        AsyncReadFeedback(p.StandardOutput); // start the async read of stdout
        AsyncReadFeedback(p.StandardError); // start the async read of stderr

        StreamWriter strw = p.StandardInput;


        // SLEEP HERE 10 SEC

        strw.WriteLine(""exit""); // send exit command at the end

        p.WaitForExit(); // block thread until remote operations are done
        return m_szFeedback;
    }


    private String m_szFeedback; // hold feedback data
    private Object m_objLock; // lock object
    private Boolean m_blnDoRead; // boolean value keeping up the read (may be used to interrupt the reading process)

    public void AsyncReadFeedback(StreamReader strr)
    {
        Thread trdr = new Thread(new ParameterizedThreadStart(__ctReadFeedback));
        trdr.Start(strr);
    }
    private void __ctReadFeedback(Object objStreamReader)
    {
        StreamReader strr = (StreamReader)objStreamReader;
        string line;
        while (!strr.EndOfStream &amp;&amp; m_blnDoRead)
        {
            line = strr.ReadLine();
            // lock the feedback buffer (since we don't want some messy stdout/err mix string in the end)
            lock (m_objLock) { m_szFeedback += line + ""\r\n""; }
        }
    }
}
</code></pre>

<p><strong>FIRST PROBLEM</strong></p>

<p>The first problem I am facing is accepting RSA key automatically, whitch I can do running</p>

<pre class=""lang-none prettyprint-override""><code>echo y |plink.exe -ssh -N -D 9999 user@1.2.3.4 -pw user -v
</code></pre>

<p>but it turns out that I get an error when I use <code>echo y |</code> at <code>Process p = Process.Start(psi);</code> line where <code>psi</code> variable is ok. I know how to put arguments after with <code>Arguments = String.Format(""-ssh -N -D 9999 user@1.2.3.4 -pw user -v""),</code> but i don't know how to put them in front of the command.</p>

<p><strong>SECOND PROBLEM</strong></p>

<p>The second problem is that I don't want to wait for the content because when I am creating the tunnel it says nothing, just waiting. I just want to open a SSH tunnel in background on <code>127.0.0.1:9999</code>, that's all.</p>

<p>What do I have to change?</p>

<p>Thanks.</p>
","<ol>
<li><p>To verify an SSH host key, use the <a href=""https://the.earth.li/~sgtatham/putty/latest/htmldoc/Chapter3.html#using-cmdline-hostkey"" rel=""nofollow noreferrer""><code>-hostkey</code> switch</a>. Do not try to skip the host key verification. It's there to protect you from <a href=""https://en.wikipedia.org/wiki/Man-in-the-middle_attack"" rel=""nofollow noreferrer"">man-in-the-middle attacks</a>.</p>

<pre><code>Arguments = String.Format(""-ssh -N -D 9999 user@1.2.3.4 -pw user -v -hostkey aa:bb:cc:dd:...""),
</code></pre>

<p>Anyway, your piping syntax does not work on its own, because it's <code>cmd.exe</code> that understands it only, so you would have to run it like:</p>

<pre><code>ProcessStartInfo psi = new ProcessStartInfo(""cmd.exe"")
{
    Arguments = String.Format(""/C echo y | C:\\plink\\plink.exe -ssh -N -D 9999 user@1.2.3.4 -pw user -v""),
}
</code></pre>

<p>But again, do not do it!</p></li>
<li><blockquote>
  <p>i don't want to wait for the content </p>
</blockquote></li>
</ol>

<p>So, do not wait.</p>

<p>We do not know, what you application purpose is.</p>

<p>If just to open the tunnel, then make it wait (for a key press?) indefinitely, to keep the tunnel open.</p>

<p>If the application is going to use the tunnel, then just carry on with the other tasks, without closing the SSH session.</p>

<hr>

<p>You should better use a native .NET SSH library for the tunnel, then using an external application.</p>

<p>For example the <a href=""https://github.com/sshnet/SSH.NET"" rel=""nofollow noreferrer"">SSH.NET</a>. See <a href=""https://stackoverflow.com/q/2835646/850848"">.NET SSH Port Forwarding</a></p>
","945","<c#><ssh><public-key><ssh-tunnel>","1","1","3","2017-02-24 07:05:53","","2","2","850848","","2015-10-19 06:26:27","2015-10-16 22:26:57",""
"33180469","Opening SSH tunnel in C# in background","<p>I have a problem in C# when trying to open a SSH tunnel on <code>127.0.0.1:9999</code>. </p>

<p>This is my <code>Program.cs</code></p>

<pre><code>class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine(""Begin"");

        PlinkTest plink = new PlinkTest();

        String feedback = plink.CreateTunnel(""1.2.3.4"", ""user"", ""user"");

        Console.WriteLine(""THING:"" + feedback);

        Console.Read();
    }
}
</code></pre>

<p>This is my program, <code>PlinkTest.cs</code>:</p>

<pre><code>class PlinkTest
{
    String PATH_TO_PLINK = @""C:\plink\plink.exe"";
    public PlinkTest()
    {
    }

    public string RequestInfo(string remoteHost, string userName, string password, string[] lstCommands)
    {
        m_szFeedback = ""Feedback from: "" + remoteHost + ""\r\n"";

       //  ProcessStartInfo psi = new ProcessStartInfo(""echo y | C:\\plink\\plink.exe"")
        ProcessStartInfo psi = new ProcessStartInfo(""C:\\plink\\plink.exe"")
        {
            Arguments = String.Format(""-ssh -N -D 9999 user@1.2.3.4 -pw user -v""),
            RedirectStandardError = true,
            RedirectStandardOutput = true,
            RedirectStandardInput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        Process p = Process.Start(psi);

        m_objLock = new Object();
        m_blnDoRead = true;

        AsyncReadFeedback(p.StandardOutput); // start the async read of stdout
        AsyncReadFeedback(p.StandardError); // start the async read of stderr

        StreamWriter strw = p.StandardInput;

        foreach (string cmd in lstCommands)
        {
            strw.WriteLine(cmd); // send commands 
        }
        strw.WriteLine(""exit""); // send exit command at the end

        p.WaitForExit(); // block thread until remote operations are done
        return m_szFeedback;
    }


    public string CreateTunnel(string remoteHost, string userName, string password)
    {
        m_szFeedback = ""Feedback from: "" + remoteHost + ""\r\n"";

        //  ProcessStartInfo psi = new ProcessStartInfo(""echo y | C:\\plink\\plink.exe"")
        ProcessStartInfo psi = new ProcessStartInfo(PATH_TO_PLINK)
        {
            Arguments = String.Format(""-ssh -N -D 9999 user@1.2.3.4 -pw user -v""),
            RedirectStandardError = true,
            RedirectStandardOutput = true,
            RedirectStandardInput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        Process p = Process.Start(psi);

        m_objLock = new Object();
        m_blnDoRead = true;

        AsyncReadFeedback(p.StandardOutput); // start the async read of stdout
        AsyncReadFeedback(p.StandardError); // start the async read of stderr

        StreamWriter strw = p.StandardInput;


        // SLEEP HERE 10 SEC

        strw.WriteLine(""exit""); // send exit command at the end

        p.WaitForExit(); // block thread until remote operations are done
        return m_szFeedback;
    }


    private String m_szFeedback; // hold feedback data
    private Object m_objLock; // lock object
    private Boolean m_blnDoRead; // boolean value keeping up the read (may be used to interrupt the reading process)

    public void AsyncReadFeedback(StreamReader strr)
    {
        Thread trdr = new Thread(new ParameterizedThreadStart(__ctReadFeedback));
        trdr.Start(strr);
    }
    private void __ctReadFeedback(Object objStreamReader)
    {
        StreamReader strr = (StreamReader)objStreamReader;
        string line;
        while (!strr.EndOfStream &amp;&amp; m_blnDoRead)
        {
            line = strr.ReadLine();
            // lock the feedback buffer (since we don't want some messy stdout/err mix string in the end)
            lock (m_objLock) { m_szFeedback += line + ""\r\n""; }
        }
    }
}
</code></pre>

<p><strong>FIRST PROBLEM</strong></p>

<p>The first problem I am facing is accepting RSA key automatically, whitch I can do running</p>

<pre class=""lang-none prettyprint-override""><code>echo y |plink.exe -ssh -N -D 9999 user@1.2.3.4 -pw user -v
</code></pre>

<p>but it turns out that I get an error when I use <code>echo y |</code> at <code>Process p = Process.Start(psi);</code> line where <code>psi</code> variable is ok. I know how to put arguments after with <code>Arguments = String.Format(""-ssh -N -D 9999 user@1.2.3.4 -pw user -v""),</code> but i don't know how to put them in front of the command.</p>

<p><strong>SECOND PROBLEM</strong></p>

<p>The second problem is that I don't want to wait for the content because when I am creating the tunnel it says nothing, just waiting. I just want to open a SSH tunnel in background on <code>127.0.0.1:9999</code>, that's all.</p>

<p>What do I have to change?</p>

<p>Thanks.</p>
","<p>Just execute this code ....it will take cache key...
 string sPlinkPath = @"" """"C:\Program Files (x86)\PuTTY\plink.exe"""" "";</p>

<pre><code>        string sCommandToStoreKeyInCach = ""echo y |""+ sPlinkPath + clsGlobalVariables.sIpAdd + "" -pw XXXX exit"";

        Process GetCpuInfo = new Process();

        // Redirect the output stream of the child process.
        GetCpuInfo.StartInfo.UseShellExecute = false;
        GetCpuInfo.StartInfo.RedirectStandardInput = true;
        GetCpuInfo.StartInfo.RedirectStandardOutput = true;
        GetCpuInfo.StartInfo.RedirectStandardError = true;

        GetCpuInfo.StartInfo.FileName = @""C:\Windows\System32\cmd.exe"";
        GetCpuInfo.StartInfo.Arguments = ""/c "" + sCommandToStoreKeyInCach;

        GetCpuInfo.StartInfo.CreateNoWindow = true;
        GetCpuInfo.Start();

        GetCpuInfo.WaitForExit();
</code></pre>

<p>Tell me if this doesn't...work...</p>
","945","<c#><ssh><public-key><ssh-tunnel>","1","-1","3","2017-02-24 07:05:53","","2","2","850848","","2015-10-19 06:26:27","2015-10-16 22:26:57",""
"48038106","exporting a public key in pem format from x509certificate2 object","<p>I'm new to this subject, and I got confused of the differences between a public key in PEM format vs CER format.</p>

<p>I'm trying to export a public key from a x509certificate2 object in PEM format in c# code.</p>

<p>As far as I understand, the difference between a certificate in cer format vs pem format, is only the header and footer
(if I understand correctly, a certificate in .cer format in base 64 should be someBase64String and in pem format it's the same string including the begin and end header and footer).</p>

<p>but my question is for the public key.
let pubKey be a public key exported in .cer format from an x509certificate2 object,
is the pem format of this key, will be:</p>

<pre><code>------BEGIN PUBLIC KEY-----
pubKey...
------END PUBLIC KEY------
</code></pre>

<p>encoded in base 64?</p>

<p>Thanks :)</p>
","<blockquote>
  <p>for the public key. let pubKey be a public key exported in .cer format from an x509certificate2 object</p>
</blockquote>

<p>Talking about a "".cer format"" only applies when you have the whole certificate; and that's all that an X509Certificate2 will export as. (Well, or a collection of certificates, or a collection of certificates with associated private keys).</p>

<p>Nothing built in to .NET will give you the DER-encoded SubjectPublicKeyInfo block of the certificate, which is what becomes ""PUBLIC KEY"" under a PEM encoding.</p>

<p>You can build the data yourself, if you want.  For RSA it's not too bad, though not entirely pleasant.  The data format is defined in <a href=""https://tools.ietf.org/html/rfc3280#section-4.1"" rel=""nofollow noreferrer"">https://tools.ietf.org/html/rfc3280#section-4.1</a>:</p>

<pre><code>SubjectPublicKeyInfo  ::=  SEQUENCE  {
    algorithm            AlgorithmIdentifier,
    subjectPublicKey     BIT STRING  }

AlgorithmIdentifier  ::=  SEQUENCE  {
    algorithm               OBJECT IDENTIFIER,
    parameters              ANY DEFINED BY algorithm OPTIONAL  }
</code></pre>

<p><a href=""https://tools.ietf.org/html/rfc3279#section-2.3.1"" rel=""nofollow noreferrer"">https://tools.ietf.org/html/rfc3279#section-2.3.1</a> describes how RSA keys, in particular are to be encoded:</p>

<blockquote>
  <p>The rsaEncryption OID is intended to be used in the algorithm field
     of a value of type AlgorithmIdentifier.  The parameters field MUST
     have ASN.1 type NULL for this algorithm identifier.</p>
  
  <p>The RSA public key MUST be encoded using the ASN.1 type RSAPublicKey:</p>

<pre><code>RSAPublicKey ::= SEQUENCE {
    modulus            INTEGER,    -- n
    publicExponent     INTEGER  }  -- e
</code></pre>
</blockquote>

<p>The language behind these structures is ASN.1, defined by <a href=""https://www.itu.int/rec/dologin_pub.asp?lang=e&amp;id=T-REC-X.680-201508-I!!PDF-E&amp;type=items"" rel=""nofollow noreferrer"">ITU X.680</a>, and the way they get encoded to bytes is covered by the Distinguished Encoding Rules (DER) ruleset of <a href=""https://www.itu.int/rec/dologin_pub.asp?lang=e&amp;id=T-REC-X.690-201508-I!!PDF-E&amp;type=items"" rel=""nofollow noreferrer"">ITU X.690</a>.</p>

<p>.NET actually gives you back a lot of these pieces, but you have to assemble them:</p>

<pre><code>private static string BuildPublicKeyPem(X509Certificate2 cert)
{
    byte[] algOid;

    switch (cert.GetKeyAlgorithm())
    {
        case ""1.2.840.113549.1.1.1"":
            algOid = new byte[] { 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01 };
            break;
        default:
            throw new ArgumentOutOfRangeException(nameof(cert), $""Need an OID lookup for {cert.GetKeyAlgorithm()}"");
    }

    byte[] algParams = cert.GetKeyAlgorithmParameters();
    byte[] publicKey = WrapAsBitString(cert.GetPublicKey());

    byte[] algId = BuildSimpleDerSequence(algOid, algParams);
    byte[] spki = BuildSimpleDerSequence(algId, publicKey);

    return PemEncode(spki, ""PUBLIC KEY"");
}

private static string PemEncode(byte[] berData, string pemLabel)
{
    StringBuilder builder = new StringBuilder();
    builder.Append(""-----BEGIN "");
    builder.Append(pemLabel);
    builder.AppendLine(""-----"");
    builder.AppendLine(Convert.ToBase64String(berData, Base64FormattingOptions.InsertLineBreaks));
    builder.Append(""-----END "");
    builder.Append(pemLabel);
    builder.AppendLine(""-----"");

    return builder.ToString();
}

private static byte[] BuildSimpleDerSequence(params byte[][] values)
{
    int totalLength = values.Sum(v =&gt; v.Length);
    byte[] len = EncodeDerLength(totalLength);
    int offset = 1;

    byte[] seq = new byte[totalLength + len.Length + 1];
    seq[0] = 0x30;

    Buffer.BlockCopy(len, 0, seq, offset, len.Length);
    offset += len.Length;

    foreach (byte[] value in values)
    {
        Buffer.BlockCopy(value, 0, seq, offset, value.Length);
        offset += value.Length;
    }

    return seq;
}

private static byte[] WrapAsBitString(byte[] value)
{
    byte[] len = EncodeDerLength(value.Length + 1);
    byte[] bitString = new byte[value.Length + len.Length + 2];
    bitString[0] = 0x03;
    Buffer.BlockCopy(len, 0, bitString, 1, len.Length);
    bitString[len.Length + 1] = 0x00;
    Buffer.BlockCopy(value, 0, bitString, len.Length + 2, value.Length);
    return bitString;
}

private static byte[] EncodeDerLength(int length)
{
    if (length &lt;= 0x7F)
    {
        return new byte[] { (byte)length };
    }

    if (length &lt;= 0xFF)
    {
        return new byte[] { 0x81, (byte)length };
    }

    if (length &lt;= 0xFFFF)
    {
        return new byte[]
        {
            0x82,
            (byte)(length &gt;&gt; 8),
            (byte)length,
        };
    }

    if (length &lt;= 0xFFFFFF)
    {
        return new byte[]
        {
            0x83,
            (byte)(length &gt;&gt; 16),
            (byte)(length &gt;&gt; 8),
            (byte)length,
        };
    }

    return new byte[]
    {
        0x84,
        (byte)(length &gt;&gt; 24),
        (byte)(length &gt;&gt; 16),
        (byte)(length &gt;&gt; 8),
        (byte)length,
    };
}
</code></pre>

<p>DSA and ECDSA keys have more complex values for AlgorithmIdentifier.parameters, but X509Certificate's GetKeyAlgorithmParameters() happens to give them back correctly formatted, so you would just need to write down their OID (string) lookup key and their OID (byte[]) encoded value in the switch statement.</p>

<p>My SEQUENCE and BIT STRING builders can definitely be more efficient (oh, look at all those poor arrays), but this would suffice for something that isn't perf-critical.</p>

<p>To check your results, you can paste the output to <code>openssl rsa -pubin -text -noout</code>, and if it prints anything other than an error you've made a legally encoded ""PUBLIC KEY"" encoding for an RSA key.</p>
","943","<public-key-encryption><public-key><pem><x509certificate2><cer>","1","2","1","2019-06-21 12:08:03","48039170","0","","548020","","2019-06-21 12:08:03","2017-12-30 21:38:02",""
"46208654","Gogs throws a ""Permission denied"" error when I delete public key file from client","<p>I just installed <a href=""https://github.com/gogits/gogs"" rel=""nofollow noreferrer"">Gogs (Go Git Server)</a> on a Raspberry Pi3 using the offical gogs/gogs-rpi docker image, which I run <a href=""https://github.com/gogits/gogs/tree/master/docker"" rel=""nofollow noreferrer"">as suggested</a> :</p>

<pre><code>docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs-rpi
</code></pre>

<p>I used my laptop to register an admin user via the gogs webinterface and added a public key to the account. I can now clone git repositories from the pi to my laptop using this command:</p>

<pre><code>git clone ssh://git@192.168.178.50:10022/peter/my_repo.git
</code></pre>

<p>I enter the key-phrase and it works just fine.</p>

<p>Now the strange part... When I delete the public key file (id_rsa_gogs.pub) from my laptop and run the above command again I will get an 'access denied' error.</p>

<p>Does anyone know what that could be? I already registered the public key in Gogs. Why do I need to have a version of the <em>public</em> key on the client machine? I never heard of a case in which the public key needs to stay with the client.</p>

<p><strong>Udapte</strong></p>

<p>If I rm the .pub keyfile and run <code>ssh -Tv git@192.168.178.50 -p 10022 -i /home/peter/.ssh/id_rsa_gogs</code> I get this:</p>

<pre><code>OpenSSH_7.2p2 Ubuntu-4ubuntu2.2, OpenSSL 1.0.2g  1 Mar 2016
debug1: Reading configuration data /home/peter/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug1: Connecting to 192.168.178.50 [192.168.178.50] port 10022.
debug1: Connection established.
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_rsa_gogs type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_rsa_gogs-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.2
debug1: Remote protocol version 2.0, remote software version OpenSSH_7.4
debug1: match: OpenSSH_7.4 pat OpenSSH* compat 0x04000000
debug1: Authenticating to 192.168.178.50:10022 as 'git'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: algorithm: curve25519-sha256@libssh.org
debug1: kex: host key algorithm: ecdsa-sha2-nistp256
debug1: kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug1: kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:[REMOVED]
debug1: Host '[192.168.178.50]:10022' is known and matches the ECDSA host key.
debug1: Found key in /home/peter/.ssh/known_hosts:18
debug1: rekey after [REMOVED] blocks
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: rekey after [REMOVED] blocks
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_EXT_INFO received
debug1: kex_input_ext_info: server-sig-algs=&lt;ssh-ed25519,ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521&gt;
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,keyboard-interactive
debug1: Next authentication method: publickey
debug1: Trying private key: /home/peter/.ssh/id_rsa_gogs
Enter passphrase for key '/home/peter/.ssh/id_rsa_gogs': 
debug1: Authentication succeeded (publickey).
Authenticated to 192.168.178.50 ([192.168.178.50]:10022).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: pledge: network
debug1: client_input_global_request: rtype hostkeys-00@openssh.com want_reply 0
debug1: Remote: Forced command.
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: PTY allocation disabled.
debug1: Sending environment.
debug1: Sending env LC_TELEPHONE = de_DE.UTF-8
debug1: Sending env LANG = en_US.UTF-8
debug1: Sending env LC_NAME = de_DE.UTF-8
debug1: Sending env LC_MEASUREMENT = de_DE.UTF-8
debug1: Sending env LC_IDENTIFICATION = de_DE.UTF-8
debug1: Sending env LC_MONETARY = de_DE.UTF-8
debug1: Sending env LC_PAPER = de_DE.UTF-8
debug1: Sending env LC_ADDRESS = de_DE.UTF-8
debug1: Sending env LC_NUMERIC = de_DE.UTF-8
Hi there, You've successfully authenticated, but Gogs does not provide shell access.
If this is unexpected, please log in with password and setup Gogs under another user.
debug1: client_input_channel_req: channel 0 rtype exit-status reply 0
debug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0
debug1: channel 0: free: client-session, nchannels 1
Transferred: sent 3268, received 3096 bytes, in 0.2 seconds
Bytes per second: sent 15416.0, received 14604.6
debug1: Exit status 0
</code></pre>

<p>It seems to fail if I run <code>ssh -Tv git@192.168.178.10 -p 10022</code> (No specifying the keyfile directly):</p>

<pre><code>OpenSSH_7.2p2 Ubuntu-4ubuntu2.2, OpenSSL 1.0.2g  1 Mar 2016
debug1: Reading configuration data /home/peter/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug1: Connecting to 192.168.178.50 [192.168.178.50] port 10022.
debug1: Connection established.
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_rsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_rsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_dsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_dsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_ecdsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_ecdsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_ed25519 type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_ed25519-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.2
debug1: Remote protocol version 2.0, remote software version OpenSSH_7.4
debug1: match: OpenSSH_7.4 pat OpenSSH* compat [REMOVED]
debug1: Authenticating to 192.168.178.50:10022 as 'git'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: algorithm: curve25519-sha256@libssh.org
debug1: kex: host key algorithm: ecdsa-sha2-nistp256
debug1: kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug1: kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:[REMOVED]
debug1: Host '[192.168.178.50]:10022' is known and matches the ECDSA host key.
debug1: Found key in /home/peter/.ssh/known_hosts:[REMOVED]
debug1: rekey after [REMOVED] blocks
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: rekey after [REMOVED] blocks
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_EXT_INFO received
debug1: kex_input_ext_info: server-sig-algs=&lt;ssh-ed25519,ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521&gt;
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,keyboard-interactive
debug1: Next authentication method: publickey
debug1: Trying private key: /home/peter/.ssh/id_rsa
debug1: Trying private key: /home/peter/.ssh/id_dsa
debug1: Trying private key: /home/peter/.ssh/id_ecdsa
debug1: Trying private key: /home/peter/.ssh/id_ed25519
debug1: Next authentication method: keyboard-interactive
debug1: Authentications that can continue: publickey,keyboard-interactive
debug1: No more authentication methods to try.
Permission denied (publickey,keyboard-interactive).
</code></pre>

<blockquote>
  <p>Check also if the same issue is seen when registering and using an ssh key without any passphrase.</p>
</blockquote>

<p>The outcome is the same without passphrase.</p>

<p>I don't know if it matters but I have this inside <code>~/.ssh/config</code> for <em>Gogs</em></p>

<pre><code>Host 192.168.178.50:10022
    HostName 192.168.178.50:10022
    IdentityFile ~/.ssh/id_rsa_gogs
    User Peter
</code></pre>
","<p>Try an <code>ssh -Tv git@192.168.178.50 -p 10022 -i /home/peter/.ssh/id_rsa_gogs</code> in order to understand what is actually causing the error.</p>

<p>Check also if the same issue is seen when registering and using an ssh key <em>without</em> any passphrase. (even though <a href=""https://security.stackexchange.com/a/137915"">public keys don't have the passphrase</a>)</p>
","941","<git><ssh><public-key><gogs>","1","1","2","2017-09-14 17:05:15","46224777","0","1","1612318","","2017-09-14 16:45:16","2017-09-14 00:21:47",""
"46208654","Gogs throws a ""Permission denied"" error when I delete public key file from client","<p>I just installed <a href=""https://github.com/gogits/gogs"" rel=""nofollow noreferrer"">Gogs (Go Git Server)</a> on a Raspberry Pi3 using the offical gogs/gogs-rpi docker image, which I run <a href=""https://github.com/gogits/gogs/tree/master/docker"" rel=""nofollow noreferrer"">as suggested</a> :</p>

<pre><code>docker run --name=gogs -p 10022:22 -p 10080:3000 -v /var/gogs:/data gogs/gogs-rpi
</code></pre>

<p>I used my laptop to register an admin user via the gogs webinterface and added a public key to the account. I can now clone git repositories from the pi to my laptop using this command:</p>

<pre><code>git clone ssh://git@192.168.178.50:10022/peter/my_repo.git
</code></pre>

<p>I enter the key-phrase and it works just fine.</p>

<p>Now the strange part... When I delete the public key file (id_rsa_gogs.pub) from my laptop and run the above command again I will get an 'access denied' error.</p>

<p>Does anyone know what that could be? I already registered the public key in Gogs. Why do I need to have a version of the <em>public</em> key on the client machine? I never heard of a case in which the public key needs to stay with the client.</p>

<p><strong>Udapte</strong></p>

<p>If I rm the .pub keyfile and run <code>ssh -Tv git@192.168.178.50 -p 10022 -i /home/peter/.ssh/id_rsa_gogs</code> I get this:</p>

<pre><code>OpenSSH_7.2p2 Ubuntu-4ubuntu2.2, OpenSSL 1.0.2g  1 Mar 2016
debug1: Reading configuration data /home/peter/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug1: Connecting to 192.168.178.50 [192.168.178.50] port 10022.
debug1: Connection established.
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_rsa_gogs type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_rsa_gogs-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.2
debug1: Remote protocol version 2.0, remote software version OpenSSH_7.4
debug1: match: OpenSSH_7.4 pat OpenSSH* compat 0x04000000
debug1: Authenticating to 192.168.178.50:10022 as 'git'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: algorithm: curve25519-sha256@libssh.org
debug1: kex: host key algorithm: ecdsa-sha2-nistp256
debug1: kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug1: kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:[REMOVED]
debug1: Host '[192.168.178.50]:10022' is known and matches the ECDSA host key.
debug1: Found key in /home/peter/.ssh/known_hosts:18
debug1: rekey after [REMOVED] blocks
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: rekey after [REMOVED] blocks
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_EXT_INFO received
debug1: kex_input_ext_info: server-sig-algs=&lt;ssh-ed25519,ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521&gt;
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,keyboard-interactive
debug1: Next authentication method: publickey
debug1: Trying private key: /home/peter/.ssh/id_rsa_gogs
Enter passphrase for key '/home/peter/.ssh/id_rsa_gogs': 
debug1: Authentication succeeded (publickey).
Authenticated to 192.168.178.50 ([192.168.178.50]:10022).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: pledge: network
debug1: client_input_global_request: rtype hostkeys-00@openssh.com want_reply 0
debug1: Remote: Forced command.
debug1: Remote: Port forwarding disabled.
debug1: Remote: X11 forwarding disabled.
debug1: Remote: Agent forwarding disabled.
debug1: Remote: PTY allocation disabled.
debug1: Sending environment.
debug1: Sending env LC_TELEPHONE = de_DE.UTF-8
debug1: Sending env LANG = en_US.UTF-8
debug1: Sending env LC_NAME = de_DE.UTF-8
debug1: Sending env LC_MEASUREMENT = de_DE.UTF-8
debug1: Sending env LC_IDENTIFICATION = de_DE.UTF-8
debug1: Sending env LC_MONETARY = de_DE.UTF-8
debug1: Sending env LC_PAPER = de_DE.UTF-8
debug1: Sending env LC_ADDRESS = de_DE.UTF-8
debug1: Sending env LC_NUMERIC = de_DE.UTF-8
Hi there, You've successfully authenticated, but Gogs does not provide shell access.
If this is unexpected, please log in with password and setup Gogs under another user.
debug1: client_input_channel_req: channel 0 rtype exit-status reply 0
debug1: client_input_channel_req: channel 0 rtype eow@openssh.com reply 0
debug1: channel 0: free: client-session, nchannels 1
Transferred: sent 3268, received 3096 bytes, in 0.2 seconds
Bytes per second: sent 15416.0, received 14604.6
debug1: Exit status 0
</code></pre>

<p>It seems to fail if I run <code>ssh -Tv git@192.168.178.10 -p 10022</code> (No specifying the keyfile directly):</p>

<pre><code>OpenSSH_7.2p2 Ubuntu-4ubuntu2.2, OpenSSL 1.0.2g  1 Mar 2016
debug1: Reading configuration data /home/peter/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug1: Connecting to 192.168.178.50 [192.168.178.50] port 10022.
debug1: Connection established.
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_rsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_rsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_dsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_dsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_ecdsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_ecdsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_ed25519 type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/peter/.ssh/id_ed25519-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.2
debug1: Remote protocol version 2.0, remote software version OpenSSH_7.4
debug1: match: OpenSSH_7.4 pat OpenSSH* compat [REMOVED]
debug1: Authenticating to 192.168.178.50:10022 as 'git'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: algorithm: curve25519-sha256@libssh.org
debug1: kex: host key algorithm: ecdsa-sha2-nistp256
debug1: kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug1: kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:[REMOVED]
debug1: Host '[192.168.178.50]:10022' is known and matches the ECDSA host key.
debug1: Found key in /home/peter/.ssh/known_hosts:[REMOVED]
debug1: rekey after [REMOVED] blocks
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: rekey after [REMOVED] blocks
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_EXT_INFO received
debug1: kex_input_ext_info: server-sig-algs=&lt;ssh-ed25519,ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521&gt;
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,keyboard-interactive
debug1: Next authentication method: publickey
debug1: Trying private key: /home/peter/.ssh/id_rsa
debug1: Trying private key: /home/peter/.ssh/id_dsa
debug1: Trying private key: /home/peter/.ssh/id_ecdsa
debug1: Trying private key: /home/peter/.ssh/id_ed25519
debug1: Next authentication method: keyboard-interactive
debug1: Authentications that can continue: publickey,keyboard-interactive
debug1: No more authentication methods to try.
Permission denied (publickey,keyboard-interactive).
</code></pre>

<blockquote>
  <p>Check also if the same issue is seen when registering and using an ssh key without any passphrase.</p>
</blockquote>

<p>The outcome is the same without passphrase.</p>

<p>I don't know if it matters but I have this inside <code>~/.ssh/config</code> for <em>Gogs</em></p>

<pre><code>Host 192.168.178.50:10022
    HostName 192.168.178.50:10022
    IdentityFile ~/.ssh/id_rsa_gogs
    User Peter
</code></pre>
","<pre><code>Host 192.168.178.50:10022
    HostName 192.168.178.50:10022
    IdentityFile ~/.ssh/id_rsa_gogs
    User Peter
</code></pre>

<p><code>ssh</code> doesn't accept a port number as part of either the <code>Host</code> or <code>Hostname</code> options here. As a result, it's not recognizing that this entry should apply to your connection attempts, and it's not applying the identity file or user.</p>

<p>If you just need to match the IP address, this should work:</p>

<pre><code>Host 192.168.178.50
    Port 10022
    IdentityFile ~/.ssh/id_rsa_gogs
    User Peter
</code></pre>

<p>If you really need to match on the port, this should work:</p>

<pre><code>Match host 192.168.178.50 exec ""test %p = 10022""
    IdentityFile ~/.ssh/id_rsa_gogs
    User Peter
</code></pre>

<p>This runs the <code>test</code> command to test the port value. ""%p"" will be replaced by the port value that ssh would use up to that point (either the default of 22 or the value from the command line). test is also known as [; it's a command-line utility mostly used in shell scripts as part of an if statement.</p>
","941","<git><ssh><public-key><gogs>","1","2","2","2017-09-14 17:05:15","46224777","0","1","1612318","","2017-09-14 16:45:16","2017-09-14 00:21:47",""
"31786440","Creating RFC-4716 specific dsa public-key using openssl","<p>For the purpose of ssh using public key authentication,</p>

<p>DSA-2048 keypair has been generated using openssl and both are stored locally in PEM format.
Now, for configuring in the server side (authorized_keys), public key has to be in the RFC-4716 format.</p>

<p>Usually as a practice, for getting this key, ssh-keygen is typically used with options as,</p>

<pre><code>ssh-keygen -y -f private_key.pem
</code></pre>

<p>which returns the corresponding public key(RFC-4716) that has to be configured in the server side.</p>

<p>Without ssh-keygen, Is there a possibility in openssl itself to generate the RFC-4716 specific public key from the openssl generated public (or) private key?</p>
","","931","<ssh><openssl><public-key><dsa><ssh-keygen>","4","","0","2015-08-03 11:47:44","","0","","","","","2015-08-03 11:47:44",""
"45831490","How to generate a RSA public key with base64 encoded String in swift","<p>web service return a <code>Key(String)</code>. then I <code>encode</code> it to <code>base64</code> <code>encoded</code> string. and then I want to create a <code>RSA</code> public key with this <code>base 64 encoded</code> string. how can I do it without any third party libraries.</p>

<p>this is how I convert the <code>server Response</code> to <code>base 64 encoded string</code></p>

<pre><code>let serverkeyData = serverPublicKey.data(using: String.Encoding.utf8)
        let base64encodedserverkeyString = serverkeyData?.base64EncodedString()
</code></pre>

<p>now I want to generate a <code>RSA</code> public key using this <code>base64</code> encoded string. according to this, using <code>base64encodedserverkeyString</code>. how can I do that.</p>

<blockquote>
  <p>I don't want to use any third party</p>
</blockquote>
","","912","<ios><swift><base64><rsa><public-key>","2","","0","2018-11-13 21:26:54","","2","","","","","2017-08-23 05:44:30",""
"20023635","java public key from .pub","<p>I have public key sent to me. I want to use it in encryption. But key is in .pub format. So its just a plain text, not a certificate. How do I convert this public key to an object like PublicKey key = ....;
In file I see: -----BEGIN PUBLIC KEY-----
MIIBIjANB.........
HwIDAQAB
-----END PUBLIC KEY-----   Later I want to use this code:</p>

<pre><code>enter code here
Private static byte[] encrypt(String text, PublicKey key) {
        byte[] cipherText = null;
        try {
          final Cipher cipher = Cipher.getInstance(""RSA/None/PKCS1Padding"");
          cipher.init(Cipher.ENCRYPT_MODE, key);
          cipherText = cipher.doFinal(text.getBytes());
        } catch (Exception e) {
          e.printStackTrace();
        }
        return cipherText;
      }
</code></pre>

<p>Please someone tell me how to use .pub file to have a public key in program code.</p>
","","909","<java><public-key><plaintext>","2","","0","2013-11-16 20:43:20","","3","3","","","","2013-11-16 20:43:20",""
"24869722","What's the simplest way to distribute an RSA public key with software?","<p>I'm working on some software that exchanges XML documents with a server. The server signs the XML using XMLDSIG and the client should verify the signature before trusting the XML. I'm using <code>RSACryptoServiceProvider</code> to do this. The XML is signed, but not encrypted.</p>

<p>I'm following the basic procedure explained in:<br>
<a href=""http://msdn.microsoft.com/en-us/library/ms229745(v=vs.110).aspx"" rel=""nofollow"">How to Sign XML Documents with Digital Signatures</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/ms229950(v=vs.110).aspx"" rel=""nofollow"">How to Verify the Digital Signatures of XML Documents</a>  </p>

<p>This requires that the client software has the public key available. I want the distribution of the client software to be as simple as possible and I don't want the client to have to deal with certificates. The pair of documents referenced above conveniently skirt around the subject of distributing the public key, simply stating that the user ""needs to have the same key"". I don't particularly want the end user to even be aware that they have a public key, so asking them to mess around with certificates is out of the question. Since the public key is public, what I would like to do is somehow embed it within the client software. As I see it, my options are:</p>

<ul>
<li>Install the public key during the setup process</li>
<li>Somehow embed the public key into the software itself, possibly within the App.config file</li>
</ul>

<p>Is this feasible in practice? What is the simplest way of achieving this that doesn't require any user interaction or awareness?</p>
","<p>Am not sure what problem you're facing without seeing your code but, could <a href=""http://social.msdn.microsoft.com/Forums/en-US/67b50472-b23f-4191-b8f4-e4a696fca5e4/how-to-use-a-public-key-with-rsacryptoserviceprovider-class?forum=csharplanguage"" rel=""nofollow"">this answer from Ji Zhou</a> help?</p>

<pre><code>public static void Main()
 {
     try
     {        //initialze the byte arrays to the public key information.
         byte[] PublicKey = {214,46,220,83,160,73,40,39,201,155,19,202,3,11,191,178,56,
                            74,90,36,248,103,18,144,170,163,145,87,54,61,34,220,222,
                            207,137,149,173,14,92,120,206,222,158,28,40,24,30,16,175,
                            108,128,35,230,118,40,121,113,125,216,130,11,24,90,48,194,
                            240,105,44,76,34,57,249,228,125,80,38,9,136,29,117,207,139,
                            168,181,85,137,126,10,126,242,120,247,121,8,100,12,201,171,
                            38,226,193,180,190,117,177,87,143,242,213,11,44,180,113,93,
                            106,99,179,68,175,211,164,116,64,148,226,254,172,147};

        //Values to store encrypted symmetric keys.
         byte[] EncryptedSymmetricKey;
         byte[] EncryptedSymmetricIV;

        //Create a new instance of RSACryptoServiceProvider.
         RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();

        //Get an instance of RSAParameters from ExportParameters function.
         RSAParameters RSAKeyInfo = RSA.ExportParameters(false);

        //Set RSAKeyInfo to the public key values. 
         RSAKeyInfo.Modulus = PublicKey;
         //Import key parameters into RSA.
         RSA.ImportParameters(RSAKeyInfo);

        //Create a new instance of the RijndaelManaged class.
         RijndaelManaged RM = new RijndaelManaged();

        //Encrypt the symmetric key and IV.
         EncryptedSymmetricKey = RSA.Encrypt(RM.Key, false);
         EncryptedSymmetricIV = RSA.Encrypt(RM.IV, false);

        Console.WriteLine(""RijndaelManaged Key and IV have been encrypted with RSACryptoServiceProvider."");
     }
     catch (CryptographicException e)
     {
         Console.WriteLine(e.Message);
     }
 }
</code></pre>
","908","<c#><rsa><digital-signature><public-key-encryption><public-key>","4","3","2","2014-07-21 16:22:36","24869922","2","1","","","","2014-07-21 16:12:27",""
"24869722","What's the simplest way to distribute an RSA public key with software?","<p>I'm working on some software that exchanges XML documents with a server. The server signs the XML using XMLDSIG and the client should verify the signature before trusting the XML. I'm using <code>RSACryptoServiceProvider</code> to do this. The XML is signed, but not encrypted.</p>

<p>I'm following the basic procedure explained in:<br>
<a href=""http://msdn.microsoft.com/en-us/library/ms229745(v=vs.110).aspx"" rel=""nofollow"">How to Sign XML Documents with Digital Signatures</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/ms229950(v=vs.110).aspx"" rel=""nofollow"">How to Verify the Digital Signatures of XML Documents</a>  </p>

<p>This requires that the client software has the public key available. I want the distribution of the client software to be as simple as possible and I don't want the client to have to deal with certificates. The pair of documents referenced above conveniently skirt around the subject of distributing the public key, simply stating that the user ""needs to have the same key"". I don't particularly want the end user to even be aware that they have a public key, so asking them to mess around with certificates is out of the question. Since the public key is public, what I would like to do is somehow embed it within the client software. As I see it, my options are:</p>

<ul>
<li>Install the public key during the setup process</li>
<li>Somehow embed the public key into the software itself, possibly within the App.config file</li>
</ul>

<p>Is this feasible in practice? What is the simplest way of achieving this that doesn't require any user interaction or awareness?</p>
","<p>You don't have to distribute the certificate. One of common approaches is to include the certificate in the signed document, in the <code>KeyInfo/X509Data</code> node.</p>

<p>The validation can use the embedded certificate easily and the only required infrastructure element at the client side is the certificate thumbprint and subject name. In other words, client validates the document using included certificate and then easily checks the certificate agaist the subject name and thumbprint. In case of a match, there is the assumption that a correct certificate has been provided.</p>

<p>Read more about technical details in one of my blog entries (this is a 3 part tutorial so you can also take a look at all other entries). Anyway, no importing certificates and no including certificates with your software, rather you have two string configuration parameters.</p>

<p>The embedded certificate inside the XmlDsigned document has a const size and usually the overhead is neglectable.</p>

<p><a href=""http://www.wiktorzychla.com/2012/12/interoperable-xml-digital-signatures-c.html"" rel=""nofollow"">http://www.wiktorzychla.com/2012/12/interoperable-xml-digital-signatures-c.html</a></p>

<p><a href=""http://www.wiktorzychla.com/2012/12/interoperable-xml-digital-signatures-c_20.html"" rel=""nofollow"">http://www.wiktorzychla.com/2012/12/interoperable-xml-digital-signatures-c_20.html</a></p>
","908","<c#><rsa><digital-signature><public-key-encryption><public-key>","4","4","2","2014-07-21 16:22:36","24869922","2","1","","","","2014-07-21 16:12:27",""
"16151068","I can't use git to push my source code, It said ""Permission denied (publickey).""","<p>I had created a repository. and I run these command in local computer:</p>

<pre><code>$ git init
$ touch README
$ git add README
$ git commit -m ""first commit""
$ git remote add origin git@github.com/xxxxx/DataStore.git
</code></pre>

<p>All things are working in what it should be. But, when I try to push my source, It caused some problem. 
$ git push origin master
Here pop up a password input dialog. It said: ""Enter password to unlock the private key. An application wants to access the private key 'XXX@gmail.com', but It locked."". And I tried every password, It can't work. If I close this annoying dialog, It said:""Permission denied (publickey).""</p>

<p>I follow this websit: <a href=""https://help.github.com/articles/error-permission-denied-publickey"" rel=""nofollow"">https://help.github.com/articles/error-permission-denied-publickey</a>
    $ ssh-add -l
    The agent has no identities.</p>

<p>What is my mistake? I had search a lot of information, but few people talk about this. 
Please help me, I am almost crazy now ~~ !
<a href=""http://i.stack.imgur.com/GBYHx.png"" rel=""nofollow"">The dialog which let me input password</a></p>
","<p>You have to <a href=""https://help.github.com/articles/generating-ssh-keys"" rel=""nofollow"">generate an SSH key</a> before you can use it.</p>
","908","<git><ssh><public-key>","0","0","1","2013-04-22 16:07:59","16151642","1","","","","","2013-04-22 15:37:45",""
"28706816","Private key length > public key?","<p>I'm working on rsa private and public key / encryption / decryption / etc using openssl module. But a question is still unanswered : why private key are often (are always, i don't know) longer than public key ? </p>

<p>Is there several answer to this ?</p>

<p><img src=""https://i.stack.imgur.com/Q2AHK.png"" alt=""public and private key""></p>

<p>This is my public and private key generated.</p>
","<p>The <em>RSA</em> private key includes the values that are in the <em>RSA</em> public key, and some more values that are <em>private</em>. Futhermore, the values themselves are larger.</p>

<p>The public key contains the modulus and the public exponent <em>e</em> which is short (mostly 3 or 65537). On the other hand the private key contains the private exponent <em>d</em> ≡ <em>e</em><sup>−1</sup> (mod φ(<em>n</em>)). Depending on φ(<em>n</em>), <em>d</em> can be vastly larger than <em>e</em>.</p>

<p>There are other public key algorithms where this is different. Some algorithms based on elliptic curves have a single big integer as the private key (and group description) and the public key has a curve point (and group description) which is larger than the big integer.</p>
","903","<encryption><rsa><private-key><public-key>","0","3","2","2015-02-24 22:10:20","28707061","1","1","608639","","2015-02-24 22:06:46","2015-02-24 21:37:23",""
"28706816","Private key length > public key?","<p>I'm working on rsa private and public key / encryption / decryption / etc using openssl module. But a question is still unanswered : why private key are often (are always, i don't know) longer than public key ? </p>

<p>Is there several answer to this ?</p>

<p><img src=""https://i.stack.imgur.com/Q2AHK.png"" alt=""public and private key""></p>

<p>This is my public and private key generated.</p>
","<blockquote>
  <p>why private key are often (are always, i don't know) longer than public key ? </p>
</blockquote>

<p>The answer is detailed in <a href=""http://en.wikipedia.org/wiki/PKCS_1"" rel=""nofollow"">PKCS 1</a> (and friends like <a href=""http://www.ietf.org/rfc/rfc2437.txt"" rel=""nofollow"">RFC 2437</a>).</p>

<p>The public key is the pair <code>{e, n}</code>, where <code>e</code> is the public exponent and <code>n</code> is the modulus.</p>

<p>One of the private key representations is the triplet <code>{e, d, n}</code>, where <code>e</code> is the public exponent, <code>d</code> is the private exponent and <code>n</code> is the modulus.</p>

<p>The other private key representations the n-tuple<code>{e, d, n, p, q, dp, dq, qi}</code>, where <code>e</code> is the public exponent; <code>d</code> is the private exponent; <code>n</code> is the modulus; and <code>p</code> and <code>q</code> are the factors of <code>n</code>.</p>

<p>And the remaining are for the Chinese Remainder theorem, which allows a speedup in signatures (I believe). <code>dp</code> is p's exponent, a positive integer such that <code>e(dP) ≅ 1 (mod(p-1))</code>; <code>dq</code> is q's exponent, a positive integer such that <code>e(dq) ≅ 1 (mod(q-1))</code>; and <code>qi</code> is CRT coefficient, a positive integer less than <code>p</code> such that <code>q(qInv) ≅ 1 (mod p)</code>.</p>
","903","<encryption><rsa><private-key><public-key>","0","4","2","2015-02-24 22:10:20","28707061","1","1","608639","","2015-02-24 22:06:46","2015-02-24 21:37:23",""
"24562268","C# Convert a PublicKey to string and vice-versa","<p>We are using PublicKeys in C#. We are need to store and retrieve them from a sql database. At the moment I am storing them as a string and I am not able to convert the string back to a public key token. </p>

<p>If you may please help me understand how to do so? Or if there is a better way of implementing the same.</p>

<p>Thanks!</p>
","<p>If you mean converting to and from a X.509v3 certificate, check out the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.publickey%28v=vs.110%29.aspx"" rel=""nofollow"">PublicKey class</a></p>
","897","<c#><public-key>","1","0","2","2014-07-03 20:11:50","","1","","","","","2014-07-03 19:52:40",""
"24562268","C# Convert a PublicKey to string and vice-versa","<p>We are using PublicKeys in C#. We are need to store and retrieve them from a sql database. At the moment I am storing them as a string and I am not able to convert the string back to a public key token. </p>

<p>If you may please help me understand how to do so? Or if there is a better way of implementing the same.</p>

<p>Thanks!</p>
","<p>If you have an x.509 certificate check out the X509Certificate2 class. There is an <code>Import</code> method you can use to load up your key from a <code>string</code> or <code>byte[]</code></p>

<p><a href=""http://msdn.microsoft.com/en-us/library/ms148438%28v=vs.110%29.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/ms148438(v=vs.110).aspx</a></p>
","897","<c#><public-key>","1","0","2","2014-07-03 20:11:50","","1","","","","","2014-07-03 19:52:40",""
"33799540","Deleting key pair in android","<p>I have created the public/private key using the android keystore when enrolling users in my application:</p>

<pre><code>KeyPairGenerator kpg = KeyPairGenerator.getInstance(
                    ""RSA"", ""AndroidKeyStore"");
KeyPair kp=kpg.generateKeyPair();
</code></pre>

<p>How can I delete this key pair when the user enrolls. i cant find any functions to do so. Thanks in advance</p>
","","896","<java><android><keystore><private-key><public-key>","2","","0","2015-11-19 09:14:38","","6","1","","","","2015-11-19 09:14:38",""
"3457890","problem with cloning git repository","<p>I am trying to host a git repository. Googling around found <a href=""http://scie.nti.st/2007/11/14/hosting-git-repositories-the-easy-and-secure-way"" rel=""nofollow noreferrer"">this tutorial</a> regarding hosting git repositories.  But things didn’t go well :(</p>

<p>I am using Ubuntu 10.04.
IP: 192.168.0.131
Openssh running on port 22</p>

<p>It was going good  till setting up gitosis-admin repo. Here is what I did.</p>

<p>I generated public key on this host linux machine and initialzed gitosis with that key.</p>

<pre><code>ssh-keygen –t rsa.
sudo -H -u gituser gitosis-init &lt; ~/.ssh/id_rsa.pub
</code></pre>

<p>Then I tried to clone gitosis-admin repository on linux machine with different forms</p>

<pre><code>git clone gituser@192.168.0.131:gitosis-admin.git 

git clone ssh://gituser@192.168.0.131:22/gitosis-admin.git
</code></pre>

<p>But getting ERROR: </p>

<pre><code>Permission denied (publickey)
fatal: The remote end hung up unexpectedly
</code></pre>

<p>Could you please help me on this? </p>
","<p>The problem is not Gitosis itself, but that your SSH key gets rejected. This can be because it has not been authorized (is not in <em>gituser</em>’s <code>authorized_keys</code> file), because your SSH server is configured not to accept public keys, because your SSH key is weak or because you are not sending one at all.</p>

<p>Have a look at the logs of your SSH server to see whether (and why) your public key is rejected. On Ubuntu, the file should be located at <code>/var/log/auth.log</code>. Look for the word <em>publickey</em> and/or try cloning your repository to see what happens in the log file. You can use something like <code>sudo tail -f /var/log/auth.log</code> to watch new entries as they arrive.</p>
","895","<git><public-key>","0","1","1","2010-08-11 15:18:00","3459924","3","","","","","2010-08-11 11:45:43",""
"18375885","Permission Denied (publickey) AWS","<p>I know this is one FAQ. But I am new to this. I went through all the given solution out there. But nothing seems to solve my problem</p>

<p>Following will explain you better.</p>

<pre><code>ssh -v -i xxxxx-ec2.pem ubuntu@ec2-xx.xx.xx.xx.us-west-2.compute.amazonaws.com
</code></pre>

<p>I am getting</p>

<pre><code>    OpenSSH_6.2p2, OpenSSL 1.0.1e 11 Feb 2013
debug1: Reading configuration data /home/Administrator/.ssh/config
debug1: Connecting to ec2-xx-xxx-x-xx.us-west-2.compute.amazonaws.com [xx.xxx.x.xx] port 22.
debug1: Connection established.
debug1: identity file xxxxx-ec2.pem type -1
debug1: identity file xxxxx-ec2.pem-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.9p1 Debian-5ubuntu1.1
debug1: match: OpenSSH_5.9p1 Debian-5ubuntu1.1 pat OpenSSH_5*
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: sending SSH2_MSG_KEX_ECDH_INIT
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ECDSA a6:6e:d1:d2:ec:73:f5:d7:5f:97:33:b7:6b:ef:ff:02
debug1: Host 'ec2-xx-xxx-x-xx.us-west-2.compute.amazonaws.com' is known and matches the ECDSA host key.
debug1: Found key in /home/Administrator/.ssh/known_hosts:3
debug1: ssh_ecdsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: venkat-ec2.pem
debug1: read PEM private key done: type RSA
debug1: Authentications that can continue: publickey
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p><strong>Actually by mistake I deleted</strong> the <code>xxxxx.pub</code> which was in the home/ubuntu folder when I was trying to rectify the above problem. But I generated a <code>.pub</code> file using </p>

<pre><code>ssh-keygen -y 
</code></pre>

<p>then just pasted the .pub file back into folder <code>/home/ubuntu/</code> via SFTP . Please help me.</p>
","<p>you need to add the new content of the .pub in /home/ubuntu/.ssh/authorized_keys or /home/ubuntu/.ssh/authorized_keys2.</p>

<p>Another way to do that is to use ssh-copy-id</p>
","895","<amazon-web-services><amazon-ec2><cygwin><public-key>","1","0","1","2013-08-22 11:55:08","18379720","0","","1525997","","2013-08-22 09:46:38","2013-08-22 09:01:46",""
"38477845","Java load public key","<p>I have a public key returned like</p>

<pre><code>""kty"" : ""RSA"",
""alg"" : ""RS256"",
""ext"" : false,
""n"": ""vswzzDmrqLSHUu61YDxUhM87hjcVjg42NwpFOyLQK8CyW5YRcr1YUkFRNDbb92MTNW3CsSWJX3DSuilnxf8n3_JW-A9R5JAqwmEygYIXuFcoJ_pb923bph0-ayWPBfD-qwYrELvpiEHBf1QSLJYkRb1wzAlwhCeYJorifu2WhCZoOVVYQAEyNqYF7AVhNImioT8-lhFWGqHp2Jt7-oXtCjVVyyShRHUMYyCRzGj1VGI6AU5DgVebXYD2GJawUhX    -AD2CzsX8lMXeaVu88sBU9XLL1Zb_cOvAC7wTXxcls0taKx-8PiWUWKjSg0-O2ZXbfFROyQpQYHQH0BkO8XRh8w""
""e"" : ""AQAB""
</code></pre>

<p>And, I want to use java to load it, and my code is like</p>

<pre><code>package key;

import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

public class PublicKeyReader {

    public static PublicKey get() throws Exception {
        String key = ""vswzzDmrqLSHUu61YDxUhM87hjcVjg42NwpFOyLQK8CyW5YRcr1YUkFRNDbb92MTNW3CsSWJX3DSuilnxf8n3_JW-A9R5JAqwmEygYIXuFcoJ_pb923bph0-ayWPBfD-qwYrELvpiEHBf1QSLJYkRb1wzAlwhCeYJorifu2WhCZoOVVYQAEyNqYF7AVhNImioT8-lhFWGqHp2Jt7-oXtCjVVyyShRHUMYyCRzGj1VGI6AU5DgVebXYD2GJawUhX-AD2CzsX8lMXeaVu88sBU9XLL1Zb_cOvAC7wTXxcls0taKx-8PiWUWKjSg0-O2ZXbfFROyQpQYHQH0BkO8XRh8w"";

        X509EncodedKeySpec spec = new X509EncodedKeySpec(key.getBytes());
        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        return kf.generatePublic(spec);
    }

    public static void main(String[] args) {
        try {
            new PublicKeyReader().get();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
</code></pre>

<p>and I got exception thrown, says <code>java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: invalid key format</code></p>

<p>How to load it correctly?</p>
","<p>Java only approach (look ma, no libraries):</p>

<pre><code>package nl.owlstead.stackoverflow;

import java.io.File;
import java.math.BigInteger;
import java.nio.file.Files;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.RSAPublicKeySpec;
import java.util.Base64;
import java.util.Base64.Decoder;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LoadRSAKeyFromText {

    public static void main(String[] args) throws Exception {
        // parse the lines to find the modulus n and public exponent e
        List&lt;String&gt; all = Files.readAllLines(new File(args[0]).toPath());
        String nString = null, eString = null;
        for (String line : all) {
            Pattern nPattern = Pattern.compile(""\""n\""\\s*:\\s*\""(.*?)\"",?"");
            Matcher nMatcher = nPattern.matcher(line);
            if (nMatcher.matches()) {
                nString = nMatcher.group(1).replaceAll(""\\s+"", """");
            }

            Pattern ePattern = Pattern.compile(""\""e\""\\s*:\\s*\""(.*?)\"",?"");
            Matcher eMatcher = ePattern.matcher(line);
            if (eMatcher.matches()) {
                eString = eMatcher.group(1);
            }
        }

        // decode base 64 (with _ and -, so URL safe)
        Decoder urlDecoder = Base64.getUrlDecoder();
        byte[] nData = urlDecoder.decode(nString);
        byte[] eData = urlDecoder.decode(eString);

        // convert to *positive* integers
        BigInteger n = new BigInteger(1, nData);
        BigInteger e = new BigInteger(1, eData);

        // create RSA specification and convert to key
        RSAPublicKeySpec keySpec = new RSAPublicKeySpec(n, e);
        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        RSAPublicKey pk = (RSAPublicKey) kf.generatePublic(keySpec);
        System.out.println(pk.getAlgorithm());
    }
}
</code></pre>

<p>Java doesn't know this kind of format so you have to parse it yourself, or find a decoder. I was lazy and programmed it.</p>
","894","<java><rsa><public-key>","1","1","1","2016-07-20 23:44:21","38492575","4","","","","","2016-07-20 09:48:51",""
"18714663","Create a public key on a Heroku server","<p>I'd like to have a public key on a Heroku server. I run </p>

<pre><code>$ heroku run bash
Running `bash` attached to terminal... up, run.2575
~ $ ssh-keygen -t rsa
~ $ ls .ssh/
id_rsa  id_rsa.pub
</code></pre>

<p>Everything is okay now. But when I rerun <code>heroku run bash</code> the <code>.ssh</code> directory disappears. </p>

<p>So the question is: is there any way to create permanent public key?</p>
","<p>Heroku manages access control to all of the server instances.</p>

<p>When you run <code>heroku run bash</code> it's spinning up a new dyno, SSHing into it, and executing bash on that server.  When you log out, that dyno goes away.</p>

<p>You should rely on Heroku for your access control.  You might be able to configure .ssh keys using a custom Heroku buildpack, but there's still no way to connect directly other than through the Heroku app (since they manage what dynos are running and how to connect to them).</p>
","887","<heroku><public-key>","3","2","2","2013-09-12 20:37:38","18724578","0","","","","","2013-09-10 09:01:00",""
"18714663","Create a public key on a Heroku server","<p>I'd like to have a public key on a Heroku server. I run </p>

<pre><code>$ heroku run bash
Running `bash` attached to terminal... up, run.2575
~ $ ssh-keygen -t rsa
~ $ ls .ssh/
id_rsa  id_rsa.pub
</code></pre>

<p>Everything is okay now. But when I rerun <code>heroku run bash</code> the <code>.ssh</code> directory disappears. </p>

<p>So the question is: is there any way to create permanent public key?</p>
","<p>There is a way to store keys outside the Heroku application: generate keys and store it in an environment variable which can be added with:</p>

<pre><code>heroku config:add ENV_VAR_NAME=value
</code></pre>
","887","<heroku><public-key>","3","1","2","2013-09-12 20:37:38","18724578","0","","","","","2013-09-10 09:01:00",""
"7095198","AWS public key denied issue","<p>I read this post:</p>

<p><a href=""https://stackoverflow.com/questions/1454629/aws-ssh-access-permission-denied-publickey-issue"">AWS ssh access &#39;Permission denied (publickey)&#39; issue</a></p>

<p>The information there is relevant, but does not help me solve my issue. I used to be able to login to my linux instance on AWS using ec2-user using the following command:</p>

<p>ssh -i key.pem ec2-user@[address].compute-1.amazonaws.com from my MacBook terminal</p>

<p>over the past few weeks, I'm getting this error now:</p>

<p>""Permission denied (publickey).""</p>

<p>I tried </p>

<p>ssh -v -i key.pem ec2-user@[address].compute-1.amazonaws.com from my MacBook terminal</p>

<p>and I get this output:</p>

<pre><code>OpenSSH_5.2p1, OpenSSL 0.9.8r 8 Feb 2011
debug1: Reading configuration data /etc/ssh_config
debug1: Connecting to [address].compute-1.amazonaws.com [address] port 22.
debug1: Connection established.
debug1: identity file key.pem type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.3
debug1: match: OpenSSH_5.3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.2
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host '[address].compute-1.amazonaws.com' is known and matches the RSA host key.
debug1: Found key in [path]/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: key.pem
debug1: read PEM private key done: type RSA
debug1: Authentications that can continue: publickey
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>Any advice on what's going on? How to get around this?</p>

<p>I have another user account on this instance that I previously created. I am able to login with that, and sudo into the root. I just cannot login with ec2-user anymore. </p>

<p>Thanks!</p>
","<p>You may have to log in as root.  If using a bitnami image, login as 'bitnami'</p>

<p>e.g. <code>ssh -v -i key.pem bitnami@[address].compute-1.amazonaws.com</code> </p>
","876","<amazon-web-services><public-key>","0","1","1","2011-12-26 20:45:47","","3","","-1","","2017-05-23 12:04:18","2011-08-17 15:15:45",""
"31602703","C# Extracting a rsa public key from .cer (2048-bit) certificate and encrypting data using RSA/ECB/PKCS1Padding method","<p>`I have imported the .cer certificate through IIS manager->Server Certificates-> import I want to extract the public key from a .cer certificate <a href=""http://developer.uidai.gov.in/site/sites/default/files/uidai_auth_stage.cer"" rel=""nofollow"">(link)</a> and encrypt a string using the public key(RSA 2048 bit) extracted from the certificate,the method used should be RSA with ECB and PKCS1Padding</p>

<p>edit:added the below code</p>

<pre><code>public static void SettingRSAParameters(){

 X509Certificate cert = X509Certificate.CreateFromCertFile(""D:\\cer.cer"");
byte[] publicKey = cert.GetPublicKey();
int keyLength = publicKey.Length;
byte[] ExponentData = new byte[3];
byte[] ModulusData = new byte[256];

Array.Copy(publicKey, publicKey.Length - ExponentData.Length, ExponentData, 0, ExponentData.Length);
Array.Copy(publicKey, publicKey.Length - ExponentData.Length - 2 - ModulusData.Length, ModulusData, 0, ModulusData.Length);
ExponentData1 = ExponentData;
ModulusData1 = ModulusData;}
</code></pre>

<p>Extracting the modulus and exponent data in this fashion and plugging it in through the below code</p>

<pre><code>static public byte[] Encryption(byte[] Data, RSAParameters RSAKey, bool DoOAEPPadding)
{
    SettingRSAParameters();
    RSAKey.Modulus = ModulusData1;
    RSAKey.Exponent = ExponentData1;

    try
    {
        byte[] encryptedData;
        using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider(2048))
        {

            RSA.ImportParameters(RSAKey);
            encryptedData = RSA.Encrypt(Data, DoOAEPPadding);
            return encryptedData;
        }
    }
    catch (CryptographicException e)
    {
        Console.WriteLine(e.Message);
        return null;
    }
}
</code></pre>

<p>The code doesn't encrypt properly please check if the code is correct and also suggest as where to add the ciphermode ECB</p>
","","871","<c#><encryption><certificate><rsa><public-key>","0","","0","2018-02-16 05:22:08","","4","","5114692","","2015-07-24 07:26:07","2015-07-24 05:16:59",""
"2798233","read java.security.key stored as object inside a file which is in jar","<p>I saved a PublicKey instance in a file using ObjectOutputStream. This file is then stored inside a jar file which is then loaded by JBoss. I'm trying to read this file but it throws me an exception telling that it's not serializable. 
Here is the code :</p>

<p>InputStream input = KeyLoader.class.getClassLoader().getResourceAsStream(resource);
ObjectInputStream objectInputStream = new ObjectInputStream(input);
Object obj = objectInputStream.readObject();
Key output = (Key) obj;
objectInputStream.close();
return output;</p>

<p>which throws me this exception 
An exception occurred: java.io.NotSerializableException</p>
","<p>I'm not sure about serialization/deserialization from within a jar file, but
without being able to see the rest of your code, I can say a few things:</p>

<ol>
<li>make sure that all of the classes that you are trying to serialize/deserialize implement Serializable.</li>
<li>If you can't do number 1, then you might try getting an encoded form of the Key object, such as <code>key.getEcnoded()</code>, which would allow you to do input/output using the bytes of the key.</li>
</ol>

<p><strong>Edit:</strong>
I'm not really familiar with JBoss, but maybe try using JBossObjectInputStream and JBossObjectOutputStream (org.jboss.serial.io). You will also have to add jboss-serialization.jar to your classpath. see <a href=""http://www.jboss.org/serialization"" rel=""nofollow noreferrer"">link</a></p>

<p>also, I've never done this sort of thing before, but if you think the jar file is complicating things, but you should be able to use some of the classes in the <code>java.util.jar</code> package to simplify IO operations with jar files.</p>

<p>I hope this helps in some way.</p>
","869","<jar><public-key>","0","0","1","2010-09-13 03:43:59","","0","","","","","2010-05-09 16:01:47",""
"26290220","How to keep public key static, but rotate the certificate","<p>In this article, <a href=""https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning"" rel=""nofollow"">https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning</a>, it reads:</p>

<p>""Even though Google rotates its certificates, the underlying public keys (within the certificate) remain static.""</p>

<p>If I want to implement this so that I have a static public key, but can rotate the certificate, how do I go about doing this?</p>
","<p>Just keep generating new CSRs from the same keypair.</p>
","862","<security><ssl><ssl-certificate><x509certificate><public-key>","2","4","1","2014-10-10 00:50:45","26290271","0","1","","","","2014-10-10 00:45:11",""
"39115958","Qt: data decryption using private/public key","<p>I want to decrypt data which has been encrypted using a private key. I can load the public key for decryption as follows:</p>

<pre><code>QFile file("":/sample.crt"");
file.open(QIODevice::ReadOnly);
const QByteArray bytes = file.readAll();
file.close();

QSslCertificate ssl(bytes, QSsl::Pem);
//Key: ssl.publicKey();
</code></pre>

<p>But how can I use the key do decrypt the data? I know that there are 3rd party libraries like QCA (<a href=""http://delta.affinix.com/qca/"" rel=""nofollow"">http://delta.affinix.com/qca/</a>) but is it possible to do this with the built-in Qt functions?</p>

<p>Regards,</p>
","<p>I came to the conclusion that Qt does not support this. A good workaround is to use EVP OpenSSL functions: <a href=""https://wiki.openssl.org/index.php/EVP_Authenticated_Encryption_and_Decryption"" rel=""nofollow"">https://wiki.openssl.org/index.php/EVP_Authenticated_Encryption_and_Decryption</a></p>
","862","<c++><encryption><qt5><public-key>","1","0","1","2016-09-22 10:47:50","39636966","1","","608639","","2016-08-24 10:56:54","2016-08-24 06:31:41",""
"18323528","RSA Private and Public Keys have the same cipher text when encrypted with AES 256?","<p>Is it normal that the keypair of RSA (private and public) have the same ciphertext when I encrypt them with AES 256?</p>

<p>In fact I'm using PHP:</p>

<pre><code>&lt;?php


$key=""abc"";

$config = array(
    ""digest_alg"" =&gt; ""sha512"",
    ""private_key_bits"" =&gt; 4096,
    ""private_key_type"" =&gt; OPENSSL_KEYTYPE_RSA,
);

// Create the private and public key
$res = openssl_pkey_new($config);

// Extract the private key from $res to $privKey
openssl_pkey_export($res, $privKey);

// Extract the public key from $res to $pubKey
$pubKey = openssl_pkey_get_details($res);
$pubKey= $pubKey[""key""];


   aes256Key = hash(""SHA256"", $password, true);

// for good entropy (for MCRYPT_RAND)
srand((double) microtime() * 1000000);
// generate random iv
$iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC), MCRYPT_RAND);






   $crypted_priv= rtrim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $privKey, MCRYPT_MODE_CBC, $iv)), ""\0\3"");
   $crypted_pub= rtrim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $pubKey, MCRYPT_MODE_CBC, $iv)), ""\0\3"");



?&gt;
</code></pre>

<p><strong>UPDATE: I replaced ECB with CBC and hope its correct...</strong></p>
","<p>You are not getting the public key with <code>openssl_pkey_get_details()</code>. That structure contains both the public exponent <code>e</code> and private exponent <code>d</code>. It is normal that the private key also contains the public exponent. Most of the time that is a static value (such as 65537, the fourth number of Fermat).</p>

<p>According to the documentation of <code>openssl_pkey_new</code> you can get to the public key using the method <code>openssl_pkey_new()</code>:</p>

<blockquote>
  <p>openssl_pkey_new() generates a new private and public key pair. The public component of the key can be obtained using openssl_pkey_get_public().</p>
</blockquote>

<p>That's not the only thing that goes wrong though:</p>

<ol>
<li>You are not using AES. Rijndael with a <em>block size</em> of 256 is not AES. AES has a block size of 128 bits.</li>
<li>Although <code>mcrypt</code> always expects an IV, ECB mode does not - but read on.</li>
<li>ECB mode is not secure for anything other than random data, you should be using CBC mode to encrypt asymmetric keys (as they almost always contain a structure that may leak information); CBC mode does require a random IV.</li>
<li>You are using the ASCII representation of a string instead of an AES key; you should use a Password Based Key Derivation function such as PBKDF2, bcrypt or scrypt instead. PHP <code>mcrypt</code> is far too forgiving regarding insecure keys.</li>
</ol>

<p>Note that in general I would also advise a padding mode such as PKCS#7. Mcrypt however does not implement any sane padding method, so you would have to implement that yourself.</p>
","860","<encryption><aes><rsa><private-key><public-key>","0","1","2","2013-08-22 04:03:30","","6","","1436172","","2013-08-20 13:16:06","2013-08-19 21:34:30",""
"18323528","RSA Private and Public Keys have the same cipher text when encrypted with AES 256?","<p>Is it normal that the keypair of RSA (private and public) have the same ciphertext when I encrypt them with AES 256?</p>

<p>In fact I'm using PHP:</p>

<pre><code>&lt;?php


$key=""abc"";

$config = array(
    ""digest_alg"" =&gt; ""sha512"",
    ""private_key_bits"" =&gt; 4096,
    ""private_key_type"" =&gt; OPENSSL_KEYTYPE_RSA,
);

// Create the private and public key
$res = openssl_pkey_new($config);

// Extract the private key from $res to $privKey
openssl_pkey_export($res, $privKey);

// Extract the public key from $res to $pubKey
$pubKey = openssl_pkey_get_details($res);
$pubKey= $pubKey[""key""];


   aes256Key = hash(""SHA256"", $password, true);

// for good entropy (for MCRYPT_RAND)
srand((double) microtime() * 1000000);
// generate random iv
$iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC), MCRYPT_RAND);






   $crypted_priv= rtrim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $privKey, MCRYPT_MODE_CBC, $iv)), ""\0\3"");
   $crypted_pub= rtrim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $pubKey, MCRYPT_MODE_CBC, $iv)), ""\0\3"");



?&gt;
</code></pre>

<p><strong>UPDATE: I replaced ECB with CBC and hope its correct...</strong></p>
","<p>There are already formats for storing private keys encrypted. eg.</p>

<pre><code>-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,E3B1C06E0D0C2633

gvmXzl6W7eV1a3N5rQNwBWKY9on3IgxZudS33cip5f88FotsPSDJMvqj6LVw2RxobDjhlOOzqmTb
VrlTnoQ6CogXFZSfiPmixiyyptCUEKJkSiEhYGM5GQm0OoGcLeLbgBb9tRpWh5IlXulKD6XFhx8q
/eGg5a+mSkX1i7kv2+Ih3jHmEKwrnfzhcA29pBF3OQJo+Ks9IYneuk676pHtsIs7CpFKq1tDvD8Q
O7URxnVnHLltaFvIxshqyZu92xbUYZR7YzjXl5+3w4TVgeAHUogEV+H9iZTosD/copUsbQO+78w2
E1D3iDS94wRgx0Tjv4xlwrTpOV38FS5rdL32492DcCRlCYM4VtuwjYeWi5shJg69jCb0EwGRqfAo
xko+lbKWELTuFKwD7n1rc/2fTarbGuf8S2AEggBLZyfXHC/9N84mXLFO2XKq+0WdiEFhQj2Cze+a
9qcSK6tPSrjK1LPlnOOppFgDElZaZ0rxsgjtiWSIAEw/Ad+SIM5u+vqwzF8J317JlsdKoBFDw8mS
MxCMuMksKJ23mgvY+THRIVgH3E7lEDZQzCi1Uy6ldLJcran/6wHwP88pVM2odiHkpnrJGcEBbbIk
qsxJZhFT8aUt/cUEBj3fnP7cxoNLQfTHMPqUTqKBWaVufFzGU9YB1R+XWFULLddwJHnV7gPheBlk
MDapowb+Is77+a9Y2VDsOXEvNpqTY0giiSrckG05IZnrhJ24JnSCwyNd99lm7XKdEGGrjBCMqIyI
Fqox8Ahkv3KWAJPYK1eOCc5d/KwZHlnlFJq7ZYy9u3fEnxQCjOEmeXLkLangKA==
-----END RSA PRIVATE KEY-----
</code></pre>

<p>...or stronger yet...</p>

<pre><code>PuTTY-User-Key-File-2: ssh-rsa
Encryption: aes256-cbc
Comment: phpseclib-generated-key
Public-Lines: 3
AAAAB3NzaC1yc2EAAAADAQABAAAAgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4
eCZ0FPqri0cb2JZfXJ/DgYSF6vUpwmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RK
NUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDy
R4e9T04ZZw==
Private-Lines: 7
llx04QMegql0/nE5RvcJSrGrodxt6ytuv/JX2caeZBUyQwQc2WBNYagLHyHPM9jI
9OUWz59FLhjFXZMDNMoUXxVmjwQpOAaVPYNxxFM9AF6/NXFji64K7huD9n4A+kLn
sHwMLWPR5a/tZA0r05DZNz9ULA3mQu7Hz4EQ8ifu3uTPJuTmL51x6RmudYKysb20
fM8VzC3ukvzzRh0pujUVTr/yQdmciASVFnZlt4xQy+ZEOVUAOfwjd//AFfXTvk6x
7A45rNlU/uicHwLgoY1APvRHCFxw7F+uVW5L4mSX7NNzqBKkZ+1qpQTAfQvIfEIb
444+CXsgIyOpqt6VxJH2u6elAtE1wau3YaFR8Alm8m97rFYzRi3oDP5NZYkTCWSV
EOpSeghXSs7IilJu8I6/sB1w5dakdeBSFkIynrlFXkO0uUw+QJJWjxY8SypzgIuP
DzduF6XsQrCyo6dnIpGQCQ==
Private-MAC: 35134b7434bf828b21404099861d455e660e8740
</code></pre>

<p>You should stick with an already standardized format rather than trying to make your own up.</p>

<p>And why are you encrypting the public key? As the name implies the public key is kinda supposed to be public ;)</p>
","860","<encryption><aes><rsa><private-key><public-key>","0","1","2","2013-08-22 04:03:30","","6","","1436172","","2013-08-20 13:16:06","2013-08-19 21:34:30",""
"10642989","What, if any ""screw it up permanently"" situations are there in the App Store certificate/key-pair code signing process?","<p>My company works with several other companies to handle their iPhone development needs, and in many cases the other companies already have some existing app(s) on the App Store. </p>

<p>We handle the App Store submission for them as well and in the situations where they do already have an existing app, their iOS Dev Center account already has a Distribution certificate created. In which case we have to acquire the key pair that was generated when they (or the third party developer they hired) created the certificate. It's been my understanding this whole time that this is the necessary process in order to work with the App Store. </p>

<p>But as time goes on, I find myself wondering about several things</p>

<ol>
<li><p>What happens when the certificates expire? I know we create new ones but that means that the apps on the App Store are signed with a certificate/keypair different than the one they were created with. Is that significant? Or can I still update existing apps on the App Store even with a new certificate/keypair (from the same iOS Dev Center account)</p></li>
<li><p>What happens if the the keypair is lost for an existing certificate? Let's say the company made an app before but the Macintosh that they used prior was hit by a meteorite. And no backups of course. I'd have to revoke and recreate the certificate - would that mean anything for the existing published app? If I had the source code to that app and had to put out an update, would I be able to? </p></li>
</ol>

<p>Basically I'm asking: are there any ""screw it up permanently"" scenarios involved with iOS development and distribution certificates that would keep you from being able to update existing apps? I know that if you don't backup the keystore in Android development then you're just hosed with regards to publishing updates but is there any way to just completely screw up with iOS development?</p>

<p>And a bonus question: If I can just revoke development certificates and re-issue them without consequence, has it always worked this way? Or have they modified the process? I can see where the ""chain of evidence"" could always be tied to the iOS Dev Center Agent account and that would be the root of things, but is this a new thing?</p>
","<p>A Distribution certificate is used only for submission to iTunes Connect (and Ad Hoc stuff).  Once approved, Apple signs the app with a different non-expiring certificate before putting the app in the App store, so the state of the developer's Distribution certificate no longer matters.  </p>

<p>A downloaded or purchased app will stay running on a customer's device even if the developer's certificates and iOS enrollment expires.  But a developer does have to re-enroll ($99/annum) in time if they want their app to stay visible in the App store.</p>

<p>Typically, Distribution certificates expire annually, maybe a bit more often, new ones can be created, and an updates for existing apps can just be submitted with the newest (and valid) Distribution certificate.</p>

<p>If you lose a key pair, the team leader will have to revoke and the generate new certificates and provisions, and update all their Keychains and Xcode provisioning and possibly project/target settings as well.  Confusion about which certificates and provisions are live and which are dead has caused some developers some serious headaches.</p>
","859","<ios><app-store><certificate><private-key><public-key>","6","7","1","2012-05-17 22:40:53","10644455","1","","","","","2012-05-17 20:26:03",""
"22575610","How to get the certificate Public Key String ""Convert SecKeyRef from to NSString"" iOS, and if this key string similar in all platforms?","<p>I have to make Certificate Pinning in my iOS app and to make that there is 2 options
1- check on certificate as it is
2- check on public key of the certificate only</p>

<p>in my case, my app connect to a backend server all the time and when the user try to login the app should login on another server for some security issue, also this server may be changed according to user type</p>

<p>so my backend server sends to me some urls with server certificate public key string  for each login url server, and I have to check on the similarity of the key when the user login</p>

<p>also this app is done for iOS and Android,</p>

<p>My question can I get the public key (as a string) from the login server certificate to match it the stored one 
Also is that key will be similar to the one on the android?, so the back end server sends only one key for me and android ?</p>
","<p>As I understand,</p>

<ol>
<li><p>There is a certificate stored in your APP.</p>

<p>You can store your public key in keychain and use it.  Use ""SecItemAdd"" to add certificate to your application keychain. Once stored, you should be able to copy the Public key using ""SecItemCopyMatching"" method.</p></li>
<li><p>When the user logs in, The app gets a URL to new certificate.</p></li>
<li><p>If the certificate is different then you need to download and use the new certificate.</p>

<p>For point 2 and 3, either ways we would need the key data to be downloaded. So, download the certificate every time, retrieve the public key. We cannot do a string compare, however it should be possible to do a byte comparison to check for equality. If not equal, replace the certificate with downloaded one using, ""SecItemUpdate"".</p></li>
<li><p>Will this be same on iOS and Android?</p>

<p>I hope the certificates are used for secure transmission/PKI. So, the same public key would work for iOS and android.</p></li>
</ol>
","857","<iphone><objective-c><certificate><public-key><pinning>","5","0","1","2014-05-14 21:22:54","","2","2","","","","2014-03-22 09:08:40",""
"7027877","C# - Security concerns with InternalsVisibleTo attribute","<p>Are there any security concerns with using the InternalsVisibleTo attribute with strong-named assemblies?  I understand that the assembly receiving information this way must have the private key to decrypt the messages, and that within the InternalsVisibleTo attribute you specify the public key in clear text.  Would it be possible for someone to alter the assembly dll and public key in the InternalsVisibleTo attribute to share internal functions to assemblies that weren't originally intended to be shared to?  </p>
","<p>It has nothing to do with encryption.  And a strong name for an InternalsVisibleTo assembly is a hard requirement.  All that it proves is that whomever created the assembly had access to the same secret as you did.  The private key.  With a very strong guarantee that whomever modifies the assembly or tries to create one that impersonates the assembly cannot provide the same proof.  They can't get it signed the same way without having access to that private key.</p>

<p>This is sufficient to guarantee trust.  Provided you guard the private key.</p>
","854","<c#><.net><security><internalsvisibleto><public-key>","2","4","1","2011-08-11 16:59:00","","3","1","","","","2011-08-11 14:42:59",""
"44459497","convert PEM encoded RSA public key to AsymmetricKeyParameter","<p>I am trying o create a method that constructs an <code>AsymmetricKeyParameter</code> from a PEM encoded <strong>public</strong> key.  Unfortunately, <code>pemReader.ReadObject()</code> return null.  </p>

<p>Here's a working solution for a private key: <a href=""https://stackoverflow.com/questions/44447762/convert-pem-encoded-rsa-private-key-to-asymmetrickeyparameter"">convert PEM encoded RSA private key to AsymmetricKeyParameter</a></p>

<p>What is wrong with this method?</p>

<pre><code>static AsymmetricKeyParameter ReadPublicKeyFromPemEncodedString(string pemEncodedKey)
{
    AsymmetricKeyParameter result = null;
    using (var stringReader = new StringReader(pemEncodedKey))
    {
        var pemReader = new PemReader(stringReader);
        var pemObject = pemReader.ReadObject(); // null!
        result = ((AsymmetricCipherKeyPair)pemObject).Public;
    }

    return result;
}
</code></pre>

<p>Here is the PEM-encoded public key I am testing with.  I have tried without the comment and also removing SSH2.</p>

<pre><code>---- BEGIN SSH2 PUBLIC KEY ----
Comment: ""rsa-key-20170608""
AAAAB3NzaC1yc2EAAAABJQAAAQEAk0AmagKx285Ufbri/olc+f3WagL1Ho+DrYdD
SbuU7cJAq+uD9xGvvP9m2JavSP4wO9i9pB/cmCFMPoIj3oGJt1/cnLb/U2juneOw
6Uo0N3F8TXdyXfZNAIPhq/jw0YfIypTFTTvFkKXfTArIwW/bQBW8/dujFR8i5CxP
jRKRDOBEy0PPOLJDD0iUr9GX/h/EO4jQ7B/GszjhPiPx+gJCilaMY+jrSczjxpsK
OXzpZEdT1NqMrzgvIZPHYhQzAiw9vQzov3vezDwKgKcRrUixZ2B8uiEQNn7Wa2Qz
WF3vL+6CGflFNYQcc0leDQBe86baYhCollouP4jfaH9KcMkYYw==
---- END SSH2 PUBLIC KEY ----
</code></pre>
","<p>Bouncy castle just does not understand this format of public key (SSH2) (you can verify this by looking at source code of <code>PemReader</code> if you would like to). Unfortunately I don't know how to convert it to appropriate format in C#, but you can do that with many tools, for example with ssh-keygen (also available in gitbash for windows), or openssl. Your public key will look like this when converted to PEM:</p>

<pre><code>-----BEGIN RSA PUBLIC KEY-----
MIIBCAKCAQEAk0AmagKx285Ufbri/olc+f3WagL1Ho+DrYdDSbuU7cJAq+uD9xGv
vP9m2JavSP4wO9i9pB/cmCFMPoIj3oGJt1/cnLb/U2juneOw6Uo0N3F8TXdyXfZN
AIPhq/jw0YfIypTFTTvFkKXfTArIwW/bQBW8/dujFR8i5CxPjRKRDOBEy0PPOLJD
D0iUr9GX/h/EO4jQ7B/GszjhPiPx+gJCilaMY+jrSczjxpsKOXzpZEdT1NqMrzgv
IZPHYhQzAiw9vQzov3vezDwKgKcRrUixZ2B8uiEQNn7Wa2QzWF3vL+6CGflFNYQc
c0leDQBe86baYhCollouP4jfaH9KcMkYYwIBJQ==
-----END RSA PUBLIC KEY-----
</code></pre>

<p>And it will be correctly handled by your current code, with a little change:</p>

<pre><code>var pemReader = new PemReader(stringReader);
var pemObject = pemReader.ReadObject(); // null!
// it's already AsymmetricKeyParameter
result = ((AsymmetricKeyParameter)pemObject);
</code></pre>
","852","<c#><bouncycastle><public-key><pem>","2","2","1","2017-06-09 14:12:49","44460028","0","","","","","2017-06-09 13:47:48",""
"37503342","Perl Net::SSH2 pubkey authentication issue","<p>I am trying to connect to a remote SSH server using Net::SSH2. Commandline ssh works fine. I can not seem to figure out the correct auth_hostbased parameters, though</p>

<p>This is my code:</p>

<pre><code>use Net::SSH2;

my $ssh = Net::SSH2-&gt;new();
$ssh-&gt;debug(1);
$ssh-&gt;trace(-1);
$ssh-&gt;connect('remotehost.remotedomain.tld') or die;
$ssh-&gt;auth_hostbased('username',
    'ssh-rsa  AAAAB3Nz[..]C0JoaFF9 root@myhost',
    '-----BEGIN RSA PRIVATE KEY-----
    Proc-Type: 4,ENCRYPTED
    DEK-Info: AES-128-CBC,FA97214E87562096A7E480C82DAE5EB4

    XIMKnj9k[..]kpRo5V
    -----END RSA PRIVATE KEY-----',
    'myhost.mydomain.tld',
    'username',
    'keypassword') or die;
</code></pre>

<p>The snippet dies @ $ssh->auth_hostbased with just a 'Net::SSH2::DESTROY object 0xe17de0'. Setting trace does not seem to matter. Replacing die with $ssh->die_with_error throws a 'die_with_error is not a valid Net::SSH2 macro'. Downloading the current 0.53 version of Net:SSH2 did not work as the script no longer compiles: 'Net::SSH2 object version 0.44 does not match bootstrap parameter 0.53'</p>

<p>Any help on the correct parameter format or an alternative module is appreciated.</p>
","<p>Why not using Net::OpenSSH ?
That is a simple ssh wrapper script, i wrote some time ago:</p>

<pre><code>#!/usr/bin/perl

#Simple SSH Remote Executor  using Net::OpenSSH Library

use warnings;
use strict;
use Net::OpenSSH;
# see http://search.cpan.org/~salva/Net-OpenSSH-0.62/lib/Net/OpenSSH.pm#DEBUGGING
$Net::OpenSSH::debug = undef;
use Getopt::Long;


my $timeout = 10;
my ($username,$identity,$hostname,$command) = undef;
my $uid=getpwuid($&lt;);
my $ctl_dir=qq{/tmp/.libnet-puppet-$uid};
my $ctl_mode=0700;

if ( ! -d $ctl_dir ) { mkdir( $ctl_dir,$ctl_mode ) };

open my $stderr_fh, '&gt;&gt;', '/dev/null' or die $!;


sub print_help{
    print qq{\nusage: $0 [options] -h Hostname

        -u username

        -i identity

        -c command

        long options are supported !

  };
        exit (1);
}



GetOptions (""hostname=s"" =&gt; \$hostname, # string
                ""username=s"" =&gt; \$username, # string
                ""identity=s"" =&gt; \$identity, # string
                ""command=s"" =&gt; \$command) # string
or print_help;

if ( not defined $username or not defined $identity or not defined $hostname or not defined $command ) { print_help };

my $port = q{22};
my $user = $username;
my $ssh;

my $cmd = qq{$command};

my $options = {
    host =&gt; $hostname,
           user =&gt; $user,
           port =&gt; $port,
           default_stderr_fh =&gt; $stderr_fh,
       ctl_dir =&gt; $ctl_dir,
       master_opts =&gt; [
                   -o =&gt; ""UserKnownHostsFile=/dev/null"",
                   -o =&gt; ""StrictHostKeyChecking=no"",
                   -o =&gt; qq{IdentityFile=$identity},
               ],
    timeout =&gt; $timeout };

#ALARM Timer timeout handling
$SIG{ALRM} = sub {
  printf( ""%s\n"", qq{invalid-timeout-connecting-to-node-$hostname});
  exit(1);
};

#init alarm timer ;-)
alarm( $timeout );

$ssh = Net::OpenSSH-&gt;new( %{$options} )
           or $ssh-&gt;error and die ""Couldn't establish SSH connection: "". $ssh-&gt;error;

my (@out, $err) = $ssh-&gt;capture2({ timeout =&gt; 10 }, $cmd);

die(""Error: %s\n"", $err) if defined $err;

if ( (scalar(@out)) eq 0 ) {
  printf( ""%s\n"", qq{invalid-empty-string-received-by-node-$hostname});
  exit(1);
}

foreach my $line ( @out ) {
    $line =~ s/^\s{1,}//;
       printf (""%s"",$line);
}
</code></pre>

<p>Install it using cpanm (cpanm Net::OpenSSH) or as debian package ""libnet-openssh-perl"".<br>
See ""man ssh_config"" for available master options.<br>
I think that script will be of great help though.<br>
Rgds. Franz</p>
","845","<perl><ssh><public-key>","5","0","1","2016-11-18 09:12:49","","10","1","1694211","","2016-05-29 12:48:32","2016-05-28 20:10:28",""
"36382913","How to do I convert the PublicKey to OpenSSH authorized_keys format","<p>Here is the code to get the public key. I need to convert the public key to OpenSSH format to add it to the <code>authorized_keys</code> file in Linux. How can I do that?</p>

<pre><code>KeyPairGenerator kpGen = KeyPairGenerator.getInstance(""DSA"", ""BC"");
kpGen.initialize(1024, new SecureRandom());
KeyPair keypair = kpGen.generateKeyPair();
</code></pre>

<p>I did use <code>PEMWriter</code>. But it didn't give the output string in proper format.</p>
","<p><a href=""https://stackoverflow.com/q/3531506/850848#14582408"">@gotoalberto's answer</a> for a different question:</p>

<blockquote>
  <p>If you want reverse the process, i.e. encode a <code>PublicKey</code> Java object
  to a Linux <code>authorized_keys</code> entry format, one can use this code:</p>

<pre><code>/**
 * Encode PublicKey (DSA or RSA encoded) to authorized_keys like string
 *
 * @param publicKey DSA or RSA encoded
 * @param user username for output authorized_keys like string
 * @return authorized_keys like string
 * @throws IOException
 */
public static String encodePublicKey(PublicKey publicKey, String user)
        throws IOException {
    String publicKeyEncoded;
    if(publicKey.getAlgorithm().equals(""RSA"")){
        RSAPublicKey rsaPublicKey = (RSAPublicKey) publicKey;
        ByteArrayOutputStream byteOs = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(byteOs);
        dos.writeInt(""ssh-rsa"".getBytes().length);
        dos.write(""ssh-rsa"".getBytes());
        dos.writeInt(rsaPublicKey.getPublicExponent().toByteArray().length);
        dos.write(rsaPublicKey.getPublicExponent().toByteArray());
        dos.writeInt(rsaPublicKey.getModulus().toByteArray().length);
        dos.write(rsaPublicKey.getModulus().toByteArray());
        publicKeyEncoded = new String(
                Base64.encodeBase64(byteOs.toByteArray()));
        return ""ssh-rsa "" + publicKeyEncoded + "" "" + user;
    }
    else if(publicKey.getAlgorithm().equals(""DSA"")){
        DSAPublicKey dsaPublicKey = (DSAPublicKey) publicKey;
        DSAParams dsaParams = dsaPublicKey.getParams();

        ByteArrayOutputStream byteOs = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(byteOs);
        dos.writeInt(""ssh-dss"".getBytes().length);
        dos.write(""ssh-dss"".getBytes());
        dos.writeInt(dsaParams.getP().toByteArray().length);
        dos.write(dsaParams.getP().toByteArray());
        dos.writeInt(dsaParams.getQ().toByteArray().length);
        dos.write(dsaParams.getQ().toByteArray());
        dos.writeInt(dsaParams.getG().toByteArray().length);
        dos.write(dsaParams.getG().toByteArray());
        dos.writeInt(dsaPublicKey.getY().toByteArray().length);
        dos.write(dsaPublicKey.getY().toByteArray());
        publicKeyEncoded = new String(
                Base64.encodeBase64(byteOs.toByteArray()));
        return ""ssh-dss "" + publicKeyEncoded + "" "" + user;
    }
    else{
        throw new IllegalArgumentException(
                ""Unknown public key encoding: "" + publicKey.getAlgorithm());
    }
}
</code></pre>
</blockquote>

<hr>

<p>The @gotoalberto's code is implemented for RSA and DSA keys only. If you need other keys, you have to add them yourself.</p>
","836","<java><bouncycastle><ssh-keys><public-key><authorized-keys>","1","2","1","2019-08-26 15:11:55","36383069","0","1","850848","","2016-04-03 08:13:37","2016-04-03 07:51:45",""
"30054817","How can I load a RSA public key in C# and use it to encrypt something?","<p>I made a simple script which load the RSA public key to encrypt a string in Python :
(P.S. I'm using <a href=""https://pypi.python.org/pypi/rsa"" rel=""nofollow"">this</a> RSA library)</p>

<pre><code>import rsa
rsa_key = ""81474a6ab9a4b69aad47d8674e1de67130dd004eb532dcce7c1fc874e0b078ad2eeb88ae72066d018ad614e18f8e2d411e6ac0f483fb7b6877fe814583dfea02056f04db34185bc7ecfe31ef2297e5f282575300c3f7497823ace8e6240e6f611cf3b4c8bfabf9e4092dd00dc66d5fa35cdb14f3f0bcff2c6c0c9b4ecc3aea2822583fef359200580e8495a152e7cb7aca4de7da719f""
e = ""10001""
pub_key = rsa.PublicKey(int(rsa_key,16), int(e,16))
crypto = rsa.encrypt(""message"", pub_key).encode(""hex"")
</code></pre>

<p>So how can I do the same thing in C# ?</p>
","<p>You can use the RSACryptoServiceProvider from System.Security.Cryptography.</p>

<pre><code>var rsa = new RSACryptoServiceProvider();
var enc = new ASCIIEncoding();

byte[] data = enc.GetBytes(""message"");
byte[] encrypted = rsa.Encrypt(data, true);
byte[] decrypted = rsa.Decrypt(encrypted, true);

Console.WriteLine(enc.GetString(decrypted));
</code></pre>

<p>For more info and an example setting the public key:
<a href=""https://social.msdn.microsoft.com/Forums/en-US/67b50472-b23f-4191-b8f4-e4a696fca5e4/how-to-use-a-public-key-with-rsacryptoserviceprovider-class?forum=csharplanguage"" rel=""nofollow"">https://social.msdn.microsoft.com/Forums/en-US/67b50472-b23f-4191-b8f4-e4a696fca5e4/how-to-use-a-public-key-with-rsacryptoserviceprovider-class?forum=csharplanguage</a></p>
","832","<c#><python-2.7><rsa><public-key-encryption><public-key>","0","0","1","2015-05-05 14:27:38","","0","","","","","2015-05-05 13:46:46",""
"24944601","git fetch upstream is not allowing my public key on windows","<p>I connected git4windows to my github account and my keys were added to my account. I also see a new key in my .ssh folder. I can push to my repo on github fine from webstorm too.</p>

<p>however I want to rebase of the upstream branch I forked and so I followed this:</p>

<p><a href=""http://robots.thoughtbot.com/keeping-a-github-fork-updated"" rel=""nofollow"">http://robots.thoughtbot.com/keeping-a-github-fork-updated</a></p>

<p>However when I try</p>

<pre><code>git fetch upstream
</code></pre>

<p>I get</p>

<pre><code>A:\foo&gt;git fetch upstream                                      
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>the exact same method worked find on my linux box. Any ideas?</p>

<pre><code>git remote -v                  
origin  https://github.com/foo/bar.git (fetch)
origin  https://github.com/foo/bar.git (push)
upstream        git@github.com:you/bar.git (fetch)
upstream        git@github.com:you/bar.git (push)
</code></pre>
","<p>It looks like your repository is named <code>foo/bar</code> and the upstream repository is named <code>you/bar</code>.</p>

<p>If you are <code>foo</code> but aren't <code>you</code>, you will need <code>you</code> to give you access to the <code>bar</code> repository.</p>

<p>You probably need to use <code>https</code> instead of <code>SSH</code> to fetch the contents of the <code>upstream</code> repository.</p>
","831","<git><webstorm><public-key><github-for-windows>","2","3","1","2014-07-24 22:15:42","24944845","2","","3424361","","2014-07-24 22:15:42","2014-07-24 21:49:43",""
"39471872","JWT RS256: Is it safe to fetch public key over https?","<p>I'm signing JWT's using the RS256 algorithm. To verify those tokens on the client, I somehow need to access the public key.</p>

<p>Are there security concerns (spoofing, ...) when I set up an unprotected API route ('/api/certificate') that returns the certificate containing the public key. And do I need to take any extra security measurements?</p>
","<p>Several concepts are often mixed up, maybe not for you, but let me try to explain a few things in this answer.</p>

<p>Assymetric cryptography obviously needs a public and a private key, both are basically just numbers. The private key is kept secret, the public is, well, public, anybody can have it. When signing stuff, you use the private key to sign and then anybody can verify using the public key that the signature was made by somebody that had the corresponding private key (ie. you).</p>

<p>But the question is then how you distribute your public key, or in your jwt example, how clients get it. As you correctly pointed out in the question, simply downloading the public key over an insecure channel is not good enough as an attacker could replace it with his own, resulting in the attacker being able to sign tokens.</p>

<p>One solution to this could be getting it over https as you proposed, which practically means using a second set of public-private keypair (keys of the webserver) to secure sending the first one. The theoretical question is still the same btw, it's just inherently solved in the background for you: how does the browser know that the public key it receives from the server upon connection actually belongs to the server. There is no secure channel yet between them.</p>

<p>Enter certificates.</p>

<p><strong>A certificate is a document that essentially ties a public key to its owner, and that is excactly what you want.</strong> When a browser connects to a website, the server sends its public key <em>along with its certificate</em>, so that the browser can verify that the public key actually belongs to the server (the domain name in this case) that sent it. How that verifies it is beyond the scope of this post, the point is that the certificate is signed by another public key, the certificate to which may be signed by another public key, etc., and the chain is terminated by a list of so called trusted root certificates already set up for your computer and/or browser by your OS/browser vendor.</p>

<p><strong>And you too should verify the public key with the certificate the same way.</strong> You don't even need the burden of SSL (https) transport for this, verifying that a public key belongs to a particular subject is the main purpose of certificates.</p>

<p>So all you have to do is not just get the public key from the API, but get it along with its certificate. You are probably already doing this, bare public keys are very rarely used. You are most probably already receiving a pfx or cer or crt or whatever from the server. Depending on the technology stack that you are developing on, you can for sure use built in mechanisms to fully verify a certificate and make sure it's valid. Please don't implement your own validation though, as that's tricky business and quite hard to get right. If the certificate passes validation, you can trust that the public key you received from the API is authentic and belongs to whatever it claims to belong to. There may be caveats though (like for example make sure that beyond basic validation, you check a combination of fields from the certificate that others can't have).</p>

<p>As an additional security measure, you can also implement <em>certificate pinning</em> to make it even more secure against certain types of attacks by having a list of fingerprints for valid certificates in the client (less so in a browser client, but still the concept is the same).</p>

<p><strong>Edit</strong> (what fields to check in the certificate after it passed general validation of expiry, etc):</p>

<p>In the general case it depends on who signed the certificate and what kind of certificate it is.</p>

<p>A server certificate signed by a real certificate authority (CA) can only have the server domain as its common name (CN) field, a real CA won't normally sign anything else, and they also won't sign a certificate for yourdomain.com unless you can prove you control yourdomain.com. So in this case it may be enough to check CN after the cert passed validation. You do need to check CN though, as anybody can have a valid certificate from say GlobalSign or Thawte or other trusted CAs, it just costs money. What they can't have is a certificate for yourdomain.com.</p>

<p>If you sign your own certificates, you also won't sign anything for anyone, so in that case it could be enough to check the issuer (that you signed it) and the CN (for whom). If the certificate otherwise passed validation (meaning a trusted root certificate signed it) it should be ok, as an attacker won't normally be able to have his CA certificate as trusted on your computer.</p>

<p>The point in general is that you want to check something that others can't have. It's easier, if you are relying on real CAs, and it's usually best to check the fingerprint.</p>
","831","<security><https><rsa><jwt><public-key>","4","5","1","2016-09-14 08:09:01","39476183","0","2","","","","2016-09-13 13:54:23",""
"17374809","PublicKey issues when deploying the project","<p>I have the following problem when deploying the project: </p>

<p>Warning 8 The value of the 'PublicKey' attribute in 'Microsoft Report Viewer 2012 Runtime' does not match that of file 'C:\Program Files (x86)\Microsoft SDKs\Windows\v8.0A\Bootstrapper\Packages\ReportViewer\ReportViewer.msi'. Aamali Program</p>

<p>Also, it is for the other component: </p>

<p>Warning 6 The value of the 'PublicKey' attribute in 'Microsoft® System CLR Types for SQL Server® 2012 (x86)' does not match that of file 'C:\Program Files (x86)\Microsoft SDKs\Windows\v8.0A\Bootstrapper\Packages\SqlClrTypes_x86\SQLSysClrTypes.msi'. Aamali Program</p>

<p>Problem is that this can not be ignored since it creates problem when installing the software on the other device. Can you please tell how to overcome this problem please? </p>

<p>BR// </p>
","","831","<c#><packaging><public-key>","0","","0","2013-06-28 22:52:16","","7","","","","","2013-06-28 22:52:16",""
"21020900","Amazon EC2 permission(public key )denied","<p>I've been accessing my EC2 instance via SSH.  was able to connect using the original key. What is my problem??</p>

<pre><code>$ ssh -vT 40.17.243.77
OpenSSH_5.9p1 Debian-5ubuntu1.1, OpenSSL 1.0.1 14 Mar 2012
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug1: Connecting to 40.17.243.77 [40.17.243.77] port 22.
debug1: Connection established.
debug1: identity file /home/user/.ssh/id_rsa type 1
debug1: Checking blacklist file /usr/share/ssh/blacklist.RSA-2048
debug1: Checking blacklist file /etc/ssh/blacklist.RSA-2048
debug1: identity file /home/user/.ssh/id_rsa-cert type -1
debug1: identity file /home/user/.ssh/id_dsa type -1
debug1: identity file /home/user/.ssh/id_dsa-cert type -1
debug1: identity file /home/user/.ssh/id_ecdsa type -1
debug1: identity file /home/user/.ssh/id_ecdsa-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.2
debug1: match: OpenSSH_6.2 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.9p1 Debian-5ubuntu1.1
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Server host key: RSA ec:13:8q:9f:90:03:e3:c2:1c:3x:fa:7f:34:f2:7f:88
debug1: Host '40.17.243.77' is known and matches the RSA host key.
debug1: Found key in /home/user/.ssh/known_hosts:12
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: rajesh@anonymous-media.com
debug1: Authentications that can continue: publickey
debug1: Offering RSA public key: /home/user/.ssh/id_rsa
debug1: Authentications that can continue: publickey
debug1: Trying private key: /home/user/.ssh/id_dsa
debug1: Trying private key: /home/user/.ssh/id_ecdsa
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>
","<p>Depending on the instance type, you probably need to specify the user.  For ubuntu, try ubuntu@IP, and for the Amazon Linux it's ec2-user@IP.</p>
","827","<amazon-web-services><ssh><amazon-ec2><ssh-keys><public-key>","0","2","1","2014-01-10 06:31:55","","3","","2541366","","2014-01-10 06:31:55","2014-01-09 12:55:22",""
"22065628","Public Key exchange between iOS and Java","<p>I would like to share a public key generated on an iPhone/iPad with an Java based Server or an Android device. On the Java side (Server or Android) I would like to use <code>java.security</code> and <code>libcommonCrypto</code> (the SecKeyRef stuff) on iOS.</p>

<p>I've got everything working except the public key exchange between these two platforms. By using <code>SecItemCopyMatching</code> I can only export the public key into some format not supported by anything else then Apple. With Java I can load public keys as X509 certificate (through <code>java.security.X509EncodedKeySpec</code>) or as module and exponent (through <code>java.security.RSAPublicKeySpec</code>).</p>

<p>Now I need to know how to export a <code>SecKeyRef</code> as X509 certificate or (what I guess is the easier solution) get the module and exponent from it. And I also need the way backwards.</p>

<p>Here is some sample public key loaded from a <code>SecKeyRef</code> and encoded to BASE64:</p>

<pre><code>MIGJAoGBAMYgXP6rvD/Y8F0VQE0HvxpVnnOxXYl5TDlOfW/leyrCLWGWg9Jp+Tl9dYvK/zWgNpoEfFzMVRpUk9UHcIaDWHW3g0BpS2MVC3Vs/0e2eu6S2WMGHpzqcJB51jJRbnqXQ23nVKC2YE520Po3EvFyTr8MlFJqTCJrovgc7fze4RI5AgMBAAE=
</code></pre>
","<p>The protocol Apples <code>libcommonCrypto</code> is using is described in <a href=""http://tools.ietf.org/html/rfc3447"" rel=""nofollow"">RFC3347</a> and is the modulus and public exponent as a ASN.1 sequence.</p>

<blockquote>
  <p>An RSA public key should be represented with the ASN.1 type RSAPublicKey:</p>

<pre><code>  RSAPublicKey ::= SEQUENCE {
      modulus           INTEGER,  -- n
      publicExponent    INTEGER   -- e
  }
</code></pre>
</blockquote>

<p>Quote from RFC3347, Ver. 2.1, A.1.1</p>
","825","<java><ios><rsa><public-key><commoncrypto>","1","1","1","2014-03-07 16:00:23","22254856","0","","1037200","","2014-02-27 11:30:20","2014-02-27 10:26:38",""
"23328928","OpenSSL commands in Java?","<p>So I made a program based off this tut:
<a href=""http://www.macs.hw.ac.uk/~ml355/lore/pkencryption.htm"" rel=""nofollow"">http://www.macs.hw.ac.uk/~ml355/lore/pkencryption.htm</a></p>

<p>It works perfectly fine, but as you can see at the bottom of the page it requires OpenSSL commands. I used OpenSSL and generated my keys in the correct format to test my program, works perfectly. But I was wondering how I would generate those keys just in Java. I have tried countless times but encryption is so hard to understand for me and to work with. So I have no code to show at the moment, how would I start this or if anyone has a good method for doing so. I don't mind using bouncy castle if it is possible.</p>

<p>TL;DR: I would like to generate a unique Private and Public key in the correct format (PKCS#8, DER) using java (with or without a public library).</p>

<p>Just need these commands in java (not running through OpenSSL):</p>

<p>To generate a private key of length 2048 bits:</p>

<pre><code>openssl genrsa -out private.pem 2048
</code></pre>

<p>To get it into the required (PKCS#8, DER) format:</p>

<pre><code>openssl pkcs8 -topk8 -in private.pem -outform DER -out private.der -nocrypt
</code></pre>

<p>To generate a public key from the private key:</p>

<pre><code>openssl rsa -in private.pem -pubout -outform DER -out public.der
</code></pre>
","<p>Generating an RSA keypair is easy in Java. For example:</p>

<pre><code>import java.security.*;
import java.security.interfaces.*;

public class RSACreate {

    public static void main(String[] args) throws Exception {
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(2048, new SecureRandom());
        KeyPair kp = kpg.generateKeyPair();
        RSAPrivateCrtKey rsaPriv = (RSAPrivateCrtKey) kp.getPrivate();
        RSAPublicKey rsaPub = (RSAPublicKey) kp.getPublic();
    }

}
</code></pre>
","817","<java><encryption><openssl><public-key><pkcs#8>","1","1","1","2014-04-27 23:22:48","","7","","608639","","2014-04-27 21:54:07","2014-04-27 20:59:49",""
"33069089","how to import public key in windows IIS","<p>in unix we put public key under /.ssh/authorized_keys 
but in case of windows, where should I put or import public key?</p>
","","814","<iis><rsa><public-key>","1","","0","2015-10-11 19:20:04","","5","","1816580","","2015-10-11 19:20:04","2015-10-11 19:16:57",""
"14154721","Cloudbees & Github: Error: Key already in use","<p>I would like to push back the results from a build to github and I therefore use the Git publisher plugin. However, when I try to add the SSH public key from Cloudbees as a Deploy Key on Github then Github tells me: 'Key already in use' since it is also part of another repository. </p>

<p>I would like to know why I cannot use the same public key for multiple independent repositories?</p>

<p>[update]
The answers so far indicate that the question is unclear. Cloudbees generates a key pair and uses this on github, I've not found a way to create an alternate pair, so I am stuck with one pair.</p>

<p>I've added the public key to repo A so Cloudbees can pull from repo A. However, I want to use the same build to push to repo B. So it seems logical to add the same (my personal Cloudbees key) to to repo B so cloudbees can push to repo B as well.</p>

<p>However, on Github only a single repo can be using the deploy key:</p>

<blockquote>
  <p>A deploy key is an SSH key that is stored on the server and grants access to a single repo on GitHub. This key is attached directly to the repo instead of to a user account.</p>
</blockquote>

<p>So it is clear that the the public key cannot be attached to more than one repo. However, I can't think of a reason why this is the case?</p>

<p>Anybody?</p>
","<p>Because the key is used to identify the user. It's like you would only use a password to identify the user: if two users have the same password, how do you know which is which?</p>

<p>A key is supposed to be unique to a user.</p>

<p>You can, however, generate multiple keys on the same machine and configure git/ssh to <a href=""http://www.springloops.com/blog/git-config-for-mutiply-ssh-keys/"" rel=""nofollow"">use a specific key</a> instead of the default <code>~/.ssh/id_rsa.pub</code> (or other <code>id_*.pub</code> key).</p>
","813","<deployment><github><public-key><cloudbees>","1","0","2","2013-01-08 09:10:46","","1","","243991","","2013-01-08 09:10:46","2013-01-04 09:48:54",""
"14154721","Cloudbees & Github: Error: Key already in use","<p>I would like to push back the results from a build to github and I therefore use the Git publisher plugin. However, when I try to add the SSH public key from Cloudbees as a Deploy Key on Github then Github tells me: 'Key already in use' since it is also part of another repository. </p>

<p>I would like to know why I cannot use the same public key for multiple independent repositories?</p>

<p>[update]
The answers so far indicate that the question is unclear. Cloudbees generates a key pair and uses this on github, I've not found a way to create an alternate pair, so I am stuck with one pair.</p>

<p>I've added the public key to repo A so Cloudbees can pull from repo A. However, I want to use the same build to push to repo B. So it seems logical to add the same (my personal Cloudbees key) to to repo B so cloudbees can push to repo B as well.</p>

<p>However, on Github only a single repo can be using the deploy key:</p>

<blockquote>
  <p>A deploy key is an SSH key that is stored on the server and grants access to a single repo on GitHub. This key is attached directly to the repo instead of to a user account.</p>
</blockquote>

<p>So it is clear that the the public key cannot be attached to more than one repo. However, I can't think of a reason why this is the case?</p>

<p>Anybody?</p>
","<p>You need to set your ssh key for user, not repository, so you can use it for multiple github repositories. github don't allow using same key on multiple locations</p>
","813","<deployment><github><public-key><cloudbees>","1","1","2","2013-01-08 09:10:46","","1","","243991","","2013-01-08 09:10:46","2013-01-04 09:48:54",""
"53906275","RSA public key created in iOS/Swift and exported as base64 not recognized in Java","<p><em>TL;DR: RSA public key generated in iOS and stored in the keychain, exported as base64 and sent to a java backend, is not recognized.</em></p>

<p>I'm implementing a chat encryption feature in an iOS app, and I'm using symmetric + asymmetric keys to handle it.</p>

<p>Without going too much into details, at backend I use the user's public key to encrypt a symmetric key used to encrypt and decrypt messages.</p>

<p>I created two frameworks, respectively in Swift and in Java (backend) to handle key generation, encryption, decryption, etc. I also have tests for them, so I'm 100% everything works as expected.</p>

<p>However, it looks like the backend is unable to recognize the format of the public key passed from iOS. Using RSA both sides, this is the code I use in Swift to generate the key:</p>

<pre><code>// private key parameters
static let privateKeyParams: [String : Any] = [
        kSecAttrIsPermanent as String: true,
        kSecAttrApplicationTag as String: ""..."" // I have a proper unique tag here
]

// public  key parameters
static let publicKeyParams: [String : Any] = [
        kSecAttrIsPermanent as String: true,
        kSecAttrApplicationTag as String: ""..."" // I have a proper unique tag here
]

// global parameters for our key generation
static let keyCreationParameters: [String : Any] = [
        kSecAttrKeyType as String: kSecAttrKeyTypeRSA,
        kSecAttrKeySizeInBits as String: 2048,
        kSecPublicKeyAttrs as String: publicKeyParams,
        kSecPrivateKeyAttrs as String: privateKeyParams
]

...

var publicKey, privateKey: SecKey?
let status = SecKeyGeneratePair(Constants.keyCreationParameters as CFDictionary, &amp;publicKey, &amp;privateKey)
</code></pre>

<p>I use specular code to read the keys from the keychain.</p>

<p>This is the piece of code I use to export the public key as a base64 string:</p>

<pre><code>extension SecKey {
  func asBase64() throws -&gt; String {
    var dataPtr: CFTypeRef?
    let query: [String:Any] = [
      kSecClass as String: kSecClassKey,
      kSecAttrApplicationTag as String: ""..."", // Same unique tag here
      kSecAttrKeyType as String: kSecAttrKeyTypeRSA,
      kSecReturnData as String: kCFBooleanTrue
    ]
    let result = SecItemCopyMatching(query as CFDictionary, &amp;dataPtr)

    switch (result, dataPtr) {
    case (errSecSuccess, .some(let data)):
      // convert to Base64 string
      let base64PublicKey = data.base64EncodedString(options: [])
      return base64PublicKey
    default:
      throw CryptoError.keyConversionError
    }
  }
}
</code></pre>

<p>At backend level I use this Java code to convert the base64 string to a public key:</p>

<pre><code>public PublicKey publicKeyFrom(String data) throws NoSuchAlgorithmException, InvalidKeySpecException {
    byte[] publicBytes = Base64.decodeBase64(data);
    X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicBytes);
    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
    return keyFactory.generatePublic(keySpec);
}
</code></pre>

<p>But this fails at the last line, with this exception:</p>

<pre><code>java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: IOException: algid parse error, not a sequence
</code></pre>

<p>Doing some manual debugging, I noticed that the format of the public key is different - when I generate a key in iOS and then export as base 64, it looks like this:</p>

<pre><code>MIIBCgKCAQEA4M/bRDdH0f6qFIXxOg13RHka+g4Yv8u9PpPp1IR6pSwrM1aq8B6cyKRwnLe/MOkvODvDfJzvGXGQ01zSTxYWAW1B4uc/NCEemCmZqMosSB/VUJdNxxWtt2hJxpz06hAawqV+6HmweAB2dUn9tDEsQLsNHdwYouOKpyRZGimcF9qRFn1RjR0Q54sUh1tQAj/EwmgY2S2bI5TqtZnZw7X7Waji7wWi6Gz88IkuzLAzB9VBNDeV1cfJFiWsZ/MIixSvhpW3dMNCrJShvBouIG8nS+vykBlbFVRGy3gJr8+OcmIq5vuHVhqrWwHNOs+WR87K/qTFO/CB7MiyiIV1b1x5DQIDAQAB
</code></pre>

<p>for a total of 360 characters, whereas doing the same in Java (still using RSA) it's like:</p>

<pre><code>MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCAAnWO4BXUGP0qM3Op36YXkWNxb4I2pPZuZ7jJtfUO7v+IO1mq43WzNaxLqqLPkTnMrv2ACRDK55vin+leQlL1z0LzVxjtZ9F6pajQo1r7PqBlL5N8bzBFKpagEf0QfyHPw0/0kG9DMnvQ+Im881QyN2zdl33wp5Fi+jRT7cunFQIDAQAB
</code></pre>

<p>with a length of 216 characters.</p>

<p>I'm unable to figure out what's wrong - apparently I wouldn't be surprised if iOS handles keys in a different key, and require special processing in order to talk with other folks.</p>

<p>Any idea?</p>
","<p>Java requires a public key encoded in DER format. Unfortunately iOS does not support this standard format and it is needed an additional conversion (I do not know if this will have improved in the latest versions of swift)</p>

<p>See my answer <a href=""https://stackoverflow.com/a/37736209/6371459"">here</a> You can convert the key using <a href=""https://github.com/DigitalLeaves/CryptoExportImportManager"" rel=""nofollow noreferrer"">CryptoExportImportManager</a></p>

<pre><code>func exportPublicKeyToDER(keyId:String) -&gt; NSData?{

    let publicKey = loadKeyStringFromKeyChainAsNSData(PUBLIC_KEY + keyId)
    let keyType = kSecAttrKeyTypeRSA
    let keySize = 2048
    let exportImportManager = CryptoExportImportManager()
    if let exportableDERKey = exportImportManager.exportPublicKeyToDER(publicKey, keyType: keyType as String, keySize: keySize) {
        return exportableDERKey
    } else {
        return nil
    }
}
</code></pre>
","813","<java><ios><swift><rsa><public-key>","6","3","2","2019-09-07 10:59:48","","0","1","","","","2018-12-23 18:50:04",""
"53906275","RSA public key created in iOS/Swift and exported as base64 not recognized in Java","<p><em>TL;DR: RSA public key generated in iOS and stored in the keychain, exported as base64 and sent to a java backend, is not recognized.</em></p>

<p>I'm implementing a chat encryption feature in an iOS app, and I'm using symmetric + asymmetric keys to handle it.</p>

<p>Without going too much into details, at backend I use the user's public key to encrypt a symmetric key used to encrypt and decrypt messages.</p>

<p>I created two frameworks, respectively in Swift and in Java (backend) to handle key generation, encryption, decryption, etc. I also have tests for them, so I'm 100% everything works as expected.</p>

<p>However, it looks like the backend is unable to recognize the format of the public key passed from iOS. Using RSA both sides, this is the code I use in Swift to generate the key:</p>

<pre><code>// private key parameters
static let privateKeyParams: [String : Any] = [
        kSecAttrIsPermanent as String: true,
        kSecAttrApplicationTag as String: ""..."" // I have a proper unique tag here
]

// public  key parameters
static let publicKeyParams: [String : Any] = [
        kSecAttrIsPermanent as String: true,
        kSecAttrApplicationTag as String: ""..."" // I have a proper unique tag here
]

// global parameters for our key generation
static let keyCreationParameters: [String : Any] = [
        kSecAttrKeyType as String: kSecAttrKeyTypeRSA,
        kSecAttrKeySizeInBits as String: 2048,
        kSecPublicKeyAttrs as String: publicKeyParams,
        kSecPrivateKeyAttrs as String: privateKeyParams
]

...

var publicKey, privateKey: SecKey?
let status = SecKeyGeneratePair(Constants.keyCreationParameters as CFDictionary, &amp;publicKey, &amp;privateKey)
</code></pre>

<p>I use specular code to read the keys from the keychain.</p>

<p>This is the piece of code I use to export the public key as a base64 string:</p>

<pre><code>extension SecKey {
  func asBase64() throws -&gt; String {
    var dataPtr: CFTypeRef?
    let query: [String:Any] = [
      kSecClass as String: kSecClassKey,
      kSecAttrApplicationTag as String: ""..."", // Same unique tag here
      kSecAttrKeyType as String: kSecAttrKeyTypeRSA,
      kSecReturnData as String: kCFBooleanTrue
    ]
    let result = SecItemCopyMatching(query as CFDictionary, &amp;dataPtr)

    switch (result, dataPtr) {
    case (errSecSuccess, .some(let data)):
      // convert to Base64 string
      let base64PublicKey = data.base64EncodedString(options: [])
      return base64PublicKey
    default:
      throw CryptoError.keyConversionError
    }
  }
}
</code></pre>

<p>At backend level I use this Java code to convert the base64 string to a public key:</p>

<pre><code>public PublicKey publicKeyFrom(String data) throws NoSuchAlgorithmException, InvalidKeySpecException {
    byte[] publicBytes = Base64.decodeBase64(data);
    X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicBytes);
    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
    return keyFactory.generatePublic(keySpec);
}
</code></pre>

<p>But this fails at the last line, with this exception:</p>

<pre><code>java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: IOException: algid parse error, not a sequence
</code></pre>

<p>Doing some manual debugging, I noticed that the format of the public key is different - when I generate a key in iOS and then export as base 64, it looks like this:</p>

<pre><code>MIIBCgKCAQEA4M/bRDdH0f6qFIXxOg13RHka+g4Yv8u9PpPp1IR6pSwrM1aq8B6cyKRwnLe/MOkvODvDfJzvGXGQ01zSTxYWAW1B4uc/NCEemCmZqMosSB/VUJdNxxWtt2hJxpz06hAawqV+6HmweAB2dUn9tDEsQLsNHdwYouOKpyRZGimcF9qRFn1RjR0Q54sUh1tQAj/EwmgY2S2bI5TqtZnZw7X7Waji7wWi6Gz88IkuzLAzB9VBNDeV1cfJFiWsZ/MIixSvhpW3dMNCrJShvBouIG8nS+vykBlbFVRGy3gJr8+OcmIq5vuHVhqrWwHNOs+WR87K/qTFO/CB7MiyiIV1b1x5DQIDAQAB
</code></pre>

<p>for a total of 360 characters, whereas doing the same in Java (still using RSA) it's like:</p>

<pre><code>MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCAAnWO4BXUGP0qM3Op36YXkWNxb4I2pPZuZ7jJtfUO7v+IO1mq43WzNaxLqqLPkTnMrv2ACRDK55vin+leQlL1z0LzVxjtZ9F6pajQo1r7PqBlL5N8bzBFKpagEf0QfyHPw0/0kG9DMnvQ+Im881QyN2zdl33wp5Fi+jRT7cunFQIDAQAB
</code></pre>

<p>with a length of 216 characters.</p>

<p>I'm unable to figure out what's wrong - apparently I wouldn't be surprised if iOS handles keys in a different key, and require special processing in order to talk with other folks.</p>

<p>Any idea?</p>
","<p>We ran into the exact same problem when connecting an iOS app to a Java backend. And the <a href=""https://github.com/DigitalLeaves/CryptoExportImportManager"" rel=""nofollow noreferrer"">CryptoExportImportManager</a> mentioned by <em>pedrofb</em> helped us out too, which is awesome. However, the code in the <code>CryptoExportImportManager</code> class is a bit elaborated and might be hard to maintain. This is because a top-down approach is used when adding new components to the DER encoding. As a result, numbers contained by length fields must be calculated ahead (i.e. before the contents to which the length applies has been defined). I therefore created a new class that we now use to convert the DER encoding of an RSA public key:</p>



<pre class=""lang-swift prettyprint-override""><code>class RSAKeyEncoding: NSObject {

  // ASN.1 identifiers
  private let bitStringIdentifier: UInt8 = 0x03
  private let sequenceIdentifier: UInt8 = 0x30

  // ASN.1 AlgorithmIdentfier for RSA encryption: OID 1 2 840 113549 1 1 1 and NULL
  private let algorithmIdentifierForRSAEncryption: [UInt8] = [0x30, 0x0d, 0x06,
    0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00]

  /// Converts the DER encoding of an RSA public key that is either fetched from the
  /// keychain (e.g. by using `SecItemCopyMatching(_:_:)`) or retrieved in another way
  /// (e.g. by using `SecKeyCopyExternalRepresentation(_:_:)`), to a format typically
  /// used by tools and programming languages outside the Apple ecosystem (such as
  /// OpenSSL, Java, PHP and Perl). The DER encoding of an RSA public key created by
  /// iOS is represented with the ASN.1 RSAPublicKey type as defined by PKCS #1.
  /// However, many systems outside the Apple ecosystem expect the DER encoding of a
  /// key to be represented with the ASN.1 SubjectPublicKeyInfo type as defined by
  /// X.509. The two types are related in a way that if the SubjectPublicKeyInfo’s
  /// algorithm field contains the rsaEncryption object identifier as defined by
  /// PKCS #1, the subjectPublicKey field shall contain the DER encoding of an
  /// RSAPublicKey type.
  ///
  /// - Parameter rsaPublicKeyData: A data object containing the DER encoding of an
  ///     RSA public key, which is represented with the ASN.1 RSAPublicKey type.
  /// - Returns: A data object containing the DER encoding of an RSA public key, which
  ///     is represented with the ASN.1 SubjectPublicKeyInfo type.
  func convertToX509EncodedKey(_ rsaPublicKeyData: Data) -&gt; Data {
    var derEncodedKeyBytes = [UInt8](rsaPublicKeyData)

    // Insert ASN.1 BIT STRING bytes at the beginning of the array
    derEncodedKeyBytes.insert(0x00, at: 0)
    derEncodedKeyBytes.insert(contentsOf: lengthField(of: derEncodedKeyBytes), at: 0)
    derEncodedKeyBytes.insert(bitStringIdentifier, at: 0)

    // Insert ASN.1 AlgorithmIdentifier bytes at the beginning of the array
    derEncodedKeyBytes.insert(contentsOf: algorithmIdentifierForRSAEncryption, at: 0)

    // Insert ASN.1 SEQUENCE bytes at the beginning of the array
    derEncodedKeyBytes.insert(contentsOf: lengthField(of: derEncodedKeyBytes), at: 0)
    derEncodedKeyBytes.insert(sequenceIdentifier, at: 0)

    return Data(derEncodedKeyBytes)
  }

  private func lengthField(of valueField: [UInt8]) -&gt; [UInt8] {
    var length = valueField.count

    if length &lt; 128 {
      return [ UInt8(length) ]
    }

    // Number of bytes needed to encode the length
    let lengthBytesCount = Int((log2(Double(length)) / 8) + 1)

    // First byte encodes the number of remaining bytes in this field
    let firstLengthFieldByte = UInt8(128 + lengthBytesCount)

    var lengthField: [UInt8] = []
    for _ in 0..&lt;lengthBytesCount {
      // Take the last 8 bits of length
      let lengthByte = UInt8(length &amp; 0xff)
      // Insert them at the beginning of the array
      lengthField.insert(lengthByte, at: 0)
      // Delete the last 8 bits of length
      length = length &gt;&gt; 8
    }

    // Insert firstLengthFieldByte at the beginning of the array
    lengthField.insert(firstLengthFieldByte, at: 0)

    return lengthField
  }
}
</code></pre>

<h2>Usage</h2>

<p>You could use this class in the function <code>asBase64()</code> like this:</p>

<pre class=""lang-swift prettyprint-override""><code>extension SecKey {
  func asBase64() throws -&gt; String {
    var dataPtr: CFTypeRef?
    let query: [String:Any] = [
      kSecClass as String: kSecClassKey,
      kSecAttrApplicationTag as String: ""..."", // Same unique tag here
      kSecAttrKeyType as String: kSecAttrKeyTypeRSA,
      kSecReturnData as String: kCFBooleanTrue
    ]
    let result = SecItemCopyMatching(query as CFDictionary, &amp;dataPtr)

    switch (result, dataPtr) {
    case (errSecSuccess, .some(let data)):

      // convert to X509 encoded key
      let convertedData = RSAKeyEncoding().convertToX509EncodedKey(data)

      // convert to Base64 string
      let base64PublicKey = convertedData.base64EncodedString(options: [])
      return base64PublicKey
    default:
      throw CryptoError.keyConversionError
    }
  }
}
</code></pre>

<h2>UPDATE - Other Issue</h2>

<p>After using the above class for a while, we stumbled upon another issue. Occasionally, the public key that is fetched from the keychain seems to be invalid because, for some reason, it has grown in size. This behavior matches with findings described in the question (although in our case the Base64 encoded key has grown to a size of 392 characters instead of 360 characters). Unfortunately, we didn’t find the exact cause of this strange behavior, but we found two solutions. The first solution is to specify <code>kSecAttrKeySizeInBits</code> along with <code>kSecAttrEffectiveKeySize</code> when defining the query, like in the below code snippet:</p>

<pre class=""lang-swift prettyprint-override""><code>let keySize = ... // Key size specified when storing the key, for example: 2048

let query: [String: Any] = [
    kSecAttrKeySizeInBits as String: keySize,
    kSecAttrEffectiveKeySize as String: keySize,
    ... // More attributes
]

var dataPtr: CFTypeRef?

let result = SecItemCopyMatching(query as CFDictionary, &amp;dataPtr)
</code></pre>

<p>The second solution is to always delete the old key from the keychain (if any) before adding a new key with the same tag.</p>

<h2>UPDATE - Alternative Solution</h2>

<p>I published <a href=""https://github.com/nextincrement/rsa-public-key-importer-exporter"" rel=""nofollow noreferrer"">this project</a> on GitHub that can be used as an alternative to the above class.</p>

<h2>References</h2>

<p><a href=""http://luca.ntop.org/Teaching/Appunti/asn1.html"" rel=""nofollow noreferrer"">A Layman’s Guide to a Subset of ASN.1, BER, and DER</a></p>

<p><a href=""https://tools.ietf.org/html/rfc5280"" rel=""nofollow noreferrer"">RFC 5280</a> (X.509 v3)</p>

<p><a href=""https://tools.ietf.org/html/rfc8017"" rel=""nofollow noreferrer"">RFC 8017</a> (PKCS #1 v2.2)</p>

<p>Some code I found <a href=""https://github.com/airsidemobile/JOSESwift"" rel=""nofollow noreferrer"">here</a> inspired me when creating the <code>lengthField(...)</code> function.</p>
","813","<java><ios><swift><rsa><public-key>","6","3","2","2019-09-07 10:59:48","","0","1","","","","2018-12-23 18:50:04",""
"44298306","Permission denied (publickey). Could not read from remote repository.","<p>my apologies but i am at a loss. i tried following other instructions to no avail, and hope my post is clear enough that i will get good concise steps how to resolve:</p>

<p>i have a file test1.php in folder x. i have a Git Bash dialog opened in x/test1.php.
here is some meta info; and i run the following commands with these results:</p>

<p>i have git version 2.12.1.windows.1.
i created ssh key, named it id_rsa in .ssh folder:</p>

<pre><code>ssh-add ~/.ssh/id_rsa
</code></pre>

<blockquote>
  <p>results in msg - Identity added in Users/profile/.ssh/id_rsa.</p>
</blockquote>

<pre><code>git push origin
</code></pre>

<blockquote>
  <p>results in msg - current branch master has no upstream branch, do this....
      git push --set-upstream origin master
  results in Permission denied (publickey)...could not read from remote repo.
  furthermore, any attempts to follow through, not working....</p>
</blockquote>

<pre><code>git add test1.php
git commit -m ""commit"" test1.php
git push origin
</code></pre>

<blockquote>
  <p>then i get msg, ""current branch master has no upstream branch...do this:""</p>
</blockquote>

<pre><code>git push --set-upstream origin master
</code></pre>

<blockquote>
  <p>that results in message: Permission denied (publickey). Could not read from remote repository.
  Please make sure you have access rights and the repo exists.</p>
</blockquote>

<p>i generated an ssh private key earlier and added it, seemingly without incident. can you tell what is going wrong? can someone list simple, incremental steps on the natural order of the environment that makes this thing work?</p>

<p>i know there are other posts for this, i have read through them, and tried the collective things recommended. even if you could just point me to a post where things are sequentially laid out i could read that. any help, many thanks!!</p>
","<p>If git remote origin does show you an ssh url like <code>git@aserver:auser/arepo</code>, do test:</p>

<pre><code>ssh -Tv git@aserver
</code></pre>

<p>You will see <em>where</em> ssh is looking for the public/private key. 
It should typically be <code>%USERPROFILE%\.ssh\id_rsa</code></p>

<p>I have added <a href=""https://stackoverflow.com/a/11849103/6309"">other debugging tips here</a> and in <a href=""https://stackoverflow.com/a/922461/6309"">this answer</a>.</p>
","811","<git><permissions><public-key><denied>","1","0","1","2017-06-01 04:45:53","","3","1","","","","2017-06-01 03:58:23",""
"24465538","How to generate a RSA key in Android similar to an OpenSSL PEM_write_PUBKEY generated key","<p>I have a C application, within this application I generate a RSA key pair with the following code (error checking left due to readability):</p>

<pre><code>void generateKeyPair(char* pass) {
    EVP_PKEY *pkey = NULL;
    RSA* r;

    OpenSSL_add_all_algorithms();
    RAND_load_file(""/dev/urandom"", 1024);

    r = RSA_generate_key(KEY_LENGTH, RSA_F4, NULL, NULL);

    pkey = EVP_PKEY_new();
    EVP_PKEY_assign_RSA(pkey, r);

    FILE* fp = fopen(""private.key"", ""w"");
    PEM_write_PrivateKey(fp, pkey, EVP_aes_256_cbc(), NULL, 0, NULL, pass);
    fclose(fp);

    fp = fopen(""public.key"", ""w"");
    PEM_write_PUBKEY(fp, pkey);
    fclose(fp);
}
</code></pre>

<p>I synchronize the public PEM keys through a server between the devices. Now I have to write a compatible Android application though I have to generate the public key in the same format then PEM_write_PUBKEY does.</p>

<p>I know that I should have done the synchronisation in DER format or something but now I can't change the design any more. There is no way around generating the keys in the similar format.</p>

<p>I guess that it is a #PCKS1 base64 encoded key but I am not sure and I don't know how to generate a similar one in Android - Androids standard is #PCKS8. However I would prefer not to include spongy castle in my project if there is a way around.</p>
","<p>You are in luck; it seems you only have to PEM encode your public key as both Java and OpenSSL use the same <code>SubjectPublicKey</code> structure used for X5.09 certificates. You can get to this by running <code>RSAPublicKey.encode()</code>.</p>

<p>Unfortunately I don't know any other library that performs PEM encoding, but I'm sure you can strip out the code from Bouncy or Spongy if required; the Bouncy Castle libraries have a very liberal licensing structure.</p>
","810","<android><openssl><rsa><public-key>","0","0","1","2014-06-28 21:05:46","","1","","2393597","","2014-06-28 09:58:11","2014-06-28 09:43:39",""
"1234965","Find assembly's public key via code","<p>How can I find a .NET assembly's public key via code? </p>

<p>From the command line, I can use sn -Tp <em>assemblyName</em> to find the public key.</p>

<p>What's the equivalent (c# or VB) in code?</p>
","<p>You want to use the <a href=""http://msdn.microsoft.com/en-us/library/system.reflection.assemblyname.getpublickey.aspx"" rel=""nofollow noreferrer""><code>AssemblyName.GetPublicKey()</code></a> method.</p>

<pre><code>using System;
using System.Reflection;

class Program
{
    static void Main()
    {
        Byte[] key = Assembly.GetExecutingAssembly().GetName().GetPublicKey();

        foreach (Byte b in key)
            Console.Write(""{0:x}"", b);
    }
}
</code></pre>
","809","<.net><public-key>","1","4","1","2009-08-05 18:50:33","1234989","0","1","","","","2009-08-05 18:33:55",""
"16987832","Java: Bad Padding Exception in RSA","<p>I am running the following code I am getting a <code>Bad Padding Exception - Data must start with zero</code>. Any ideas?</p>

<p>Here is the code</p>

<pre><code>public class test {
    public static void main(String[] args) throws NoSuchAlgorithmException,
           NoSuchProviderException, InvalidKeyException,
           SignatureException, NoSuchPaddingException,
           IllegalBlockSizeException, BadPaddingException {
        KeyPair k=Utilities.keys(2048);
        PublicKey public_key=Utilities.public_key(k);
        PrivateKey private_key=Utilities.private_key(k);
        String hex1=Lib.stringToHex(""test1/test2/test3"");
        byte[] plaintext=Lib.toByteArray(hex1);
        byte [] cipher=Utilities.Encrypt_RSA(plaintext, public_key); 
        System.out.println(cipher.length); 
          byte[] newArray = new byte[128];
          byte[] newArray2 = new byte[128];
         // System.arraycopy(cipher, 0, newArray, 0, 512);
          for (int i=0;i&lt;cipher.length;i++){
                    if(i&lt;cipher.length/2){

                        newArray[i]=cipher[i];
                    }
                    else if((i&gt;cipher.length/2)&amp;&amp;(i&lt;cipher.length)){
                        newArray2[i-128]=cipher[i];
                    }
           }

         // System.arraycopy(cipher, 512, newArray2, 0, 512);

        byte[] cipher2=Utilities.Encrypt_RSA_Pr(newArray, private_key);
        byte[] cipher3=Utilities.Encrypt_RSA_Pr(newArray2, private_key);

        System.out.println(cipher2.length+"" cipher2"");
        System.out.println(cipher3.length+"" cipher3"");
        byte [] plain1=Utilities.Decrypt_RSA_Pub(cipher2,public_key);
        byte [] plain2=Utilities.Decrypt_RSA_Pub(cipher3,public_key);
        System.out.println(plain1.length);
        System.out.println(plain2.length);
        byte[] finald=new byte[256];
        for(int i=0;i&lt;256;i++){
            if(i&lt;128){
                finald[i]=plain1[i];
            }
            else{
                finald[i]=plain2[i-128];
            }
        }

        for(int i=0;i&lt;plain1.length;i++){
            if(i&gt;=64){
                plain1[i]='\0';
            }
        }

        System.out.println(plain1.length);
      System.out.println(finald.length;
     byte[] plainfinal=Utilities.Decrypt_RSA(finald, private_key);
</code></pre>

<p>Here are the methods that I use for encrypt/decrypt:</p>

<pre><code> public static byte[] Encrypt_RSA(byte[] plaintext,PublicKey key) throws
        InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException,
        IllegalBlockSizeException, BadPaddingException,NoSuchProviderException{
   Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    c.init(Cipher.ENCRYPT_MODE,key);
    byte [] ciphertext = c.doFinal(plaintext);
    return ciphertext;
}

public static byte[] Decrypt_RSA(byte []ciphertext,PrivateKey key) throws
       NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
       IllegalBlockSizeException, BadPaddingException,NoSuchProviderException{
    Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    c.init(Cipher.DECRYPT_MODE,key);
    byte [] plaintext=c.doFinal(ciphertext);
    return plaintext;
}

public static byte[] Encrypt_RSA_Pr(byte[] plaintext,PrivateKey key) throws
       NoSuchAlgorithmException, NoSuchPaddingException,
       IllegalBlockSizeException, BadPaddingException, InvalidKeyException{
    Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    c.init(Cipher.ENCRYPT_MODE,key);
    byte [] ciphertext = c.doFinal(plaintext);
    return ciphertext;
}

 public static byte[] Decrypt_RSA_Pub(byte []ciphertext,PublicKey key) throws
        NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
        IllegalBlockSizeException,BadPaddingException,NoSuchProviderException{
    Cipher c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    c.init(Cipher.DECRYPT_MODE,key);
    byte [] plaintext=c.doFinal(ciphertext);
    return plaintext;
}
</code></pre>
","<p>You meant to split <code>cipher</code> into two halves but you did it wrong. I suspect this line:</p>

<pre><code>else if((i&gt;cipher.length/2)&amp;&amp;(i&lt;cipher.length)){
</code></pre>

<p>should instead be</p>

<pre><code>else if((i&gt;=cipher.length/2)&amp;&amp;(i&lt;cipher.length)){
</code></pre>
","808","<java><encryption><rsa><private-key><public-key>","0","0","1","2013-06-08 10:56:47","","4","3","1711796","","2013-06-07 15:37:57","2013-06-07 15:33:10",""
"12934580","how to insert modulus and exponent of RSA public key into FGInt package(http://submanifold.be/)","<p>I'm newby in RSA cryptographic methods... I need to verify incoming signature from device. The problem is, that I have to use a delphi IDE and delhi doesn't have implemented some RSA libraries. I find on web the FGInt package on this site: <a href=""http://submanifold.be/"" rel=""nofollow"">http://submanifold.be/</a>. I download it(RSA.zip) and I'm in dark - I don't know, how can I put to this code my public key modulus and exponent.</p>

<p>The situation is as follows:
I have signature from device which I need to compare(verify) with calculated message(challenge). I have also an X509 certificate  with embedded public key. I can extract this public key from these certificate. I can also extract modulus and exponent from public key. My problem is, that I don't know, how can I put the obtained modulus and exponent to RSAVerify procedure of FGInt package. The modulus is 128 bytes(I have it as an array of hexa numbers) long and exponent has value of 65537.</p>

<p>Can somebody help with my question, how can be modulus and exponent values inserted into procedure RSAVerify in FGint package?</p>
","<p>If you need RSA functions and you're running on Windows, use the MSCRYPTO API. Info here: <a href=""http://en.wikipedia.org/wiki/Microsoft_CryptoAPI"" rel=""nofollow"">http://en.wikipedia.org/wiki/Microsoft_CryptoAPI</a> and here: <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa380255(v=vs.85).aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/windows/desktop/aa380255(v=vs.85).aspx</a></p>

<p>If you intend to make your application available outside the US, incorporating custom or third party encryption logic into your application will make your app fall into the ""software munitions"" category of US export restrictions. You will have to apply for an export permit, have your code reviewed by US government reps, etc. or risk hefty fines and possibly criminal charges for export violations. </p>

<p>If your app instead links to the MSCRYPTO library, you don't have to do any of that. Microsoft takes care of getting export permits for the MSCRYPTO library shipped with Windows.</p>
","806","<delphi><rsa><public-key>","2","3","2","2012-10-18 07:28:34","","0","1","250725","","2012-10-17 12:44:19","2012-10-17 12:42:48",""
"12934580","how to insert modulus and exponent of RSA public key into FGInt package(http://submanifold.be/)","<p>I'm newby in RSA cryptographic methods... I need to verify incoming signature from device. The problem is, that I have to use a delphi IDE and delhi doesn't have implemented some RSA libraries. I find on web the FGInt package on this site: <a href=""http://submanifold.be/"" rel=""nofollow"">http://submanifold.be/</a>. I download it(RSA.zip) and I'm in dark - I don't know, how can I put to this code my public key modulus and exponent.</p>

<p>The situation is as follows:
I have signature from device which I need to compare(verify) with calculated message(challenge). I have also an X509 certificate  with embedded public key. I can extract this public key from these certificate. I can also extract modulus and exponent from public key. My problem is, that I don't know, how can I put the obtained modulus and exponent to RSAVerify procedure of FGInt package. The modulus is 128 bytes(I have it as an array of hexa numbers) long and exponent has value of 65537.</p>

<p>Can somebody help with my question, how can be modulus and exponent values inserted into procedure RSAVerify in FGint package?</p>
","<p>Thank you for your answer dthorpe... We don't want to risk any problems with Microsoft license privacy or US export restrictions. We are looking for some free available package for delphi. The FGint package seems to be the right solution for us, but we have problem with inserting modulus and exponent into procedure ""RSAVerify"" (part of FGint.pas). Our questions lie in inserting public key values into this procedure...</p>
","806","<delphi><rsa><public-key>","2","0","2","2012-10-18 07:28:34","","0","1","250725","","2012-10-17 12:44:19","2012-10-17 12:42:48",""
"47675696","Extract exactly Public key as ""Decimal"" in PEM format in python","<p>I am trying to reach exact point of in PEM public key's decimal format. Not in Pem.</p>

<p>First of all i get my PEM certificate with using </p>

<pre><code>from socket import socket

import ssl
from OpenSSL import SSL
import string
import traceback
import json
import re

for i in file_content:
    final_list.append(i.strip())


file = open(""SSL_out_put.json"",""w"")
Temp_Priv_Key_list = [] 

counter = 1
for i in final_list[:4047]:
    print counter
    print i
    counter = counter + 1
    try:
        x = ssl.get_server_certificate((i, 443))
        Temp_Priv_Key_list.append({
            'counter' : counter,
            'i' : i,
            'x' : x
            })
        content = json.dumps(Temp_Priv_Key_list, indent=3)
        file.write(content)
        Temp_Priv_Key_list=[]
    except Exception , err:
        pass
        print Exception , err
file.close()
</code></pre>

<p>after that i used ""from pyasn1_modules import pem, rfc2459""
to extract the publick key. This will give binary representation for the public key. after converting decimal i reilze that this is not i want to use. 
Note that in my experiance pyasc1 is not working correctly. </p>

<p>After lots of research i found this code in here to extract public key BUT still in PEM format.</p>

<pre><code>from cryptography import x509
from cryptography.hazmat.backends import default_backend

with open(""cert.pem"", ""rb"") as f:
    cert = f.read()

cert = str(cert)

x509 = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, cert)
key_data = (OpenSSL.crypto.dump_publickey(OpenSSL.crypto.FILETYPE_PEM,x509.get_pubkey()))
print key_data
</code></pre>

<p>Now i have my Publick key as Pem format still. After some other research i found this but only giving this output. Still Can t extract the publick key nither decimal nor binary format.</p>

<pre><code>from Crypto.PublicKey import RSA
from base64 import b64decode
from Crypto.Util import asn1

with open(""public_key.pem"", ""rb"") as f:
   cert = f.read()

#print cert

keyDER = b64decode(cert)
keyPub = RSA.importKey(keyDER)

print keyPub}
</code></pre>

<p>this code  will give you the out put of 
&lt;_RSAobj @0x7f65559da320 n(2048),e></p>

<p>This is my first question. Sorry if i don t asking  proper. My brain is full of all kind of staff with bunch of trash encoding that right now can't understand. Can some one please help me out of this issue.</p>

<p>i found <a href=""http://lapo.it/asn1js/"" rel=""nofollow noreferrer"">http://lapo.it/asn1js/</a> that i exactly need it but i can t use it in python. i may use selenium or scrapy to extract the data what i want. But this will really kill me. There should be a way those modules that i tried : </p>

<p>those modules that i tried on this subject : </p>

<pre><code>from pyasn1_modules import pem, rfc2459
from pyasn1.codec.der import decoder
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
#import pem
import socket, ssl
import OpenSSL
</code></pre>

<p>Btw for who is encountiring this issue with me . pycrypto is not properly woring on windows (although i install VCPython2.7.msi ""you will know what i mean if you ll try it"")i switch it to virtual-ubuntu. thank you.</p>
","<p>Python ssl lib is not powerfull for this issue. So i change the whole thing to OPENSSL on linux terminal.</p>

<pre><code>timeout 3s openssl s_client -servername (site_name) -connect (site_name):443 -no_alt_chains
</code></pre>

<p>this will give you the the PEM what browser will give because of s_client support SNI.</p>

<pre><code>openssl x509 -in outer.pem -text
</code></pre>

<p>whit this one you ll get the all peer of your PEM file. if want to you exactly get the Public key modulus that will give you it as hexadecimal.</p>

<pre><code>openssl x509 -in outer.pem -modulus -noout
</code></pre>

<p>Alitle bit subprocess you can easly get the output files from terminal outputs and with alittle bit regex you will get the all you want. Ty openssl. I hope i can help somebody who read this.</p>
","805","<python><encoding><openssl><public-key><pem>","1","1","1","2017-12-18 08:57:53","","0","","","","","2017-12-06 13:37:52",""
"35784039","store public key in variable php","<p>I have a public key which I would like to store in a variable as string, for example :</p>

<pre><code>$public_key = ""-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDH82E/Dn37torKz/vhAkpji9ZS
HCyfM7JuXCbh70F75Zh2/rEVvz38yNf6f01DNXiSpzO5eTmoXD7Blsb635AOjYbl
X/WljpFbwQ2QUUDlNDAslrqXYlMzht2MCq/pjtGgk0zJx6i+HjFyV7mebeePQY/x
NOzMpmy/Ke3u+SSHRwIDAQAB
-----END PUBLIC KEY-----"";
</code></pre>

<p>I would like to have something like this</p>

<pre><code>$public_key = ""-----BEGIN PUBLIC KEY-----
              MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDH82E/Dn37torKz/vhAkpji9ZS
              HCyfM7JuXCbh70F75Zh2/rEVvz38yNf6f01DNXiSpzO5eTmoXD7Blsb635AOjYbl
              X/WljpFbwQ2QUUDlNDAslrqXYlMzht2MCq/pjtGgk0zJx6i+HjFyV7mebeePQY/x
              NOzMpmy/Ke3u+SSHRwIDAQAB
              -----END PUBLIC KEY-----"";
</code></pre>

<p>For the moment, it fails because the key is no more valid because spaces with indentation</p>

<p>How to deal with break lines and indentation?</p>
","<p>Use the heredoc statement to align the key.</p>

<pre><code>$str = &lt;&lt;&lt;'KEY'
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDH82E/Dn37torKz/vhAkpji9ZS
HCyfM7JuXCbh70F75Zh2/rEVvz38yNf6f01DNXiSpzO5eTmoXD7Blsb635AOjYbl
X/WljpFbwQ2QUUDlNDAslrqXYlMzht2MCq/pjtGgk0zJx6i+HjFyV7mebeePQY/x
NOzMpmy/Ke3u+SSHRwIDAQAB
KEY;
</code></pre>

<p>Or concat strings:</p>

<pre><code>$str = 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDH82E/Dn37torKz/vhAkpji9ZS'.
       'HCyfM7JuXCbh70F75Zh2/rEVvz38yNf6f01DNXiSpzO5eTmoXD7Blsb635AOjYbl'.
       'X/WljpFbwQ2QUUDlNDAslrqXYlMzht2MCq/pjtGgk0zJx6i+HjFyV7mebeePQY/x'.
       'NOzMpmy/Ke3u+SSHRwIDAQAB';
</code></pre>

<p>Other then that, use functions to remove the additional symbols like linebreaks and spaces or.. store the key in a file and use <code>file_get_contents()</code> Secure that file with chmod or store it outside the root directory of your web server.</p>

<p>Alternatively, you can create a file like key.php:</p>

<pre><code>&lt;?php
  return 'yourkey';
?&gt;
</code></pre>

<p>And then you can store it in a var like so:</p>

<pre><code>$var = include 'key.php';
</code></pre>

<p>This way, code pollution is put back to a minimum.</p>
","803","<php><openssl><coding-style><public-key>","3","0","1","2016-03-08 16:52:37","35784281","6","","4058935","","2016-03-03 22:23:14","2016-03-03 22:08:29",""
"55143662","Create a complete Linux virtual machine infrastructure in Azure with Terraform","<p>So I'm very new creating virtual machines and Microsoft Azure. I'm trying to create one in terraform and link to my Azure account. I have been following this documentation: <a href=""https://docs.microsoft.com/en-us/azure/virtual-machines/linux/terraform-create-complete-vm"" rel=""nofollow noreferrer"">https://docs.microsoft.com/en-us/azure/virtual-machines/linux/terraform-create-complete-vm</a>. For some background; my goal is to create the VM, log in via ssh on a vpn and log the logins </p>

<p>Using the sample code they provide however, I get this error: </p>

<pre><code>azurerm_virtual_machine.myterraformvm: compute.VirtualMachinesClient#CreateOrUpdate: Failure sending request: StatusCode=400 -- Original Error: Code=""InvalidParameter"" Message=""The value of parameter linuxConfiguration.ssh.publicKeys.keyData is invalid."" Target=""linuxConfiguration.ssh.publicKeys.keyData""
</code></pre>

<p>This is my code: <code>terraform_azure.tf</code></p>

<pre><code># Configure the Microsoft Azure Provider
provider ""azurerm"" {
  tenant_id       = ""myid""
  client_id       = ""myclientid""
  client_secret   = ""mysecret""
  subscription_id = ""mysubscr""
}

# Create a resource group if it doesn’t exist
resource ""azurerm_resource_group"" ""myterraformgroup"" {
  name     = ""myResourceGroup""
  location = ""eastus""

  tags {
    environment = ""Terraform Demo""
  }
}

# Create virtual network
resource ""azurerm_virtual_network"" ""myterraformnetwork"" {
  name                = ""myVnet""
  address_space       = [""10.0.0.0/16""]
  location            = ""eastus""
  resource_group_name = ""${azurerm_resource_group.myterraformgroup.name}""

  tags {
    environment = ""Terraform Demo""
  }
}

# Create subnet
resource ""azurerm_subnet"" ""myterraformsubnet"" {
  name                 = ""mySubnet""
  resource_group_name  = ""${azurerm_resource_group.myterraformgroup.name}""
  virtual_network_name = ""${azurerm_virtual_network.myterraformnetwork.name}""
  address_prefix       = ""10.0.1.0/24""
}

# Create public IPs
resource ""azurerm_public_ip"" ""myterraformpublicip"" {
  name                = ""myPublicIP""
  location            = ""eastus""
  resource_group_name = ""${azurerm_resource_group.myterraformgroup.name}""
  allocation_method   = ""Dynamic""

  tags {
    environment = ""Terraform Demo""
  }
}

# Create Network Security Group and rule
resource ""azurerm_network_security_group"" ""myterraformnsg"" {
  name                = ""myNetworkSecurityGroup""
  location            = ""eastus""
  resource_group_name = ""${azurerm_resource_group.myterraformgroup.name}""

  security_rule {
    name                       = ""SSH""
    priority                   = 1001
    direction                  = ""Inbound""
    access                     = ""Allow""
    protocol                   = ""Tcp""
    source_port_range          = ""*""
    destination_port_range     = ""22""
    source_address_prefix      = ""*""
    destination_address_prefix = ""*""
  }

  tags {
    environment = ""Terraform Demo""
  }
}

# Create network interface
resource ""azurerm_network_interface"" ""myterraformnic"" {
  name                      = ""myNIC""
  location                  = ""eastus""
  resource_group_name       = ""${azurerm_resource_group.myterraformgroup.name}""
  network_security_group_id = ""${azurerm_network_security_group.myterraformnsg.id}""

  ip_configuration {
    name                          = ""myNicConfiguration""
    subnet_id                     = ""${azurerm_subnet.myterraformsubnet.id}""
    private_ip_address_allocation = ""Dynamic""
    public_ip_address_id          = ""${azurerm_public_ip.myterraformpublicip.id}""
  }

  tags {
    environment = ""Terraform Demo""
  }
}

# Generate random text for a unique storage account name
resource ""random_id"" ""randomId"" {
  keepers = {
    # Generate a new ID only when a new resource group is defined
    resource_group = ""${azurerm_resource_group.myterraformgroup.name}""
  }

  byte_length = 8
}

# Create storage account for boot diagnostics
resource ""azurerm_storage_account"" ""mystorageaccount"" {
  name                     = ""diag${random_id.randomId.hex}""
  resource_group_name      = ""${azurerm_resource_group.myterraformgroup.name}""
  location                 = ""eastus""
  account_tier             = ""Standard""
  account_replication_type = ""LRS""

  tags {
    environment = ""Terraform Demo""
  }
}

# Create virtual machine
resource ""azurerm_virtual_machine"" ""myterraformvm"" {
  name                  = ""myVM""
  location              = ""eastus""
  resource_group_name   = ""${azurerm_resource_group.myterraformgroup.name}""
  network_interface_ids = [""${azurerm_network_interface.myterraformnic.id}""]
  vm_size               = ""Standard_DS1_v2""

  storage_os_disk {
    name              = ""myOsDisk""
    caching           = ""ReadWrite""
    create_option     = ""FromImage""
    managed_disk_type = ""Premium_LRS""
  }

  storage_image_reference {
    publisher = ""Canonical""
    offer     = ""UbuntuServer""
    sku       = ""16.04.0-LTS""
    version   = ""latest""
  }

  os_profile {
    computer_name  = ""myvm""
    admin_username = ""azureuser""
  }

  os_profile_linux_config {
    disable_password_authentication = true

    ssh_keys {
      path     = ""/home/azureuser/.ssh/authorized_keys""
      key_data = ""ssh-rsa AAAAB3Nz{snip}hwhqT9h""
    }
  }

  boot_diagnostics {
    enabled     = ""true""
    storage_uri = ""${azurerm_storage_account.mystorageaccount.primary_blob_endpoint}""
  }

  tags {
    environment = ""Terraform Demo""
  }
}
</code></pre>

<p>I'm wondering why this is. In the error <code>The value of parameter linuxConfiguration.ssh.publicKeys.keyData is invalid</code> says something about my public key? Where am I/should I be setting this? Thanks </p>
","<p>you need to pass in the key content, not path to the key:</p>

<blockquote>
  <p>NOTE: Rather than defining this in-line you can source this from a
  local file using the file interpolation function - for example
  key_data = ""${file(""~/.ssh/id_rsa.pub"")}"".</p>
</blockquote>

<p><a href=""https://www.terraform.io/docs/providers/azurerm/r/virtual_machine.html#key_data"" rel=""nofollow noreferrer"">https://www.terraform.io/docs/providers/azurerm/r/virtual_machine.html#key_data</a></p>
","800","<azure><ssh><virtual-machine><terraform><public-key>","0","1","1","2019-03-13 13:59:34","55143703","0","","","","","2019-03-13 13:57:39",""
"7529486","Capistrano destroys ssh public key authorisation","<p>I am quite out of my depths with a problem that I have faced with two different ssh-users on two different servers where I deploy to with Capistrano. I am sure I am not the only one to have come across this:</p>

<ol>
<li>I set up an ssh-connection from the command line with passwordless authentication, using my public key, that is known to the remote server. This works: I can log into the remote system.</li>
<li>I execute »cap deploy:setup«. Surprisingly, I have to enter the password of the ssh-user, and from then I have to enter the password again each time I log into the server via ssh on the command line. The public key is not accepted any more, as shown by the output produced by ssh's -v option:</li>
</ol>

<p>_</p>

<pre><code>shell$ ssh -vp 5222 my_ssh_user@my-remote-host.de
OpenSSH_5.6p1, OpenSSL 0.9.8r 8 Feb 2011
debug1: Reading configuration data /etc/ssh_config
debug1: Applying options for *
debug1: Connecting to my-remote-host.de [1.2.3.4] port 5222.
debug1: Connection established.
debug1: identity file /Users/martin/.ssh/id_rsa type 1
debug1: identity file /Users/martin/.ssh/id_rsa-cert type -1
debug1: identity file /Users/martin/.ssh/id_dsa type -1
debug1: identity file /Users/martin/.ssh/id_dsa-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.1p1 Debian-5ubuntu1
debug1: match: OpenSSH_5.1p1 Debian-5ubuntu1 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.6
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 none
debug1: kex: client-&gt;server aes128-ctr hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host '[my-remote-host.de]:5222' is known and matches the RSA host key.
debug1: Found key in /Users/martin/.ssh/known_hosts:9
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/martin/.ssh/id_rsa
debug1: Authentications that can continue: publickey,password
debug1: Trying private key: /Users/martin/.ssh/id_dsa
debug1: Next authentication method: password
my_ssh_user@my-remote-host.de's password: &lt;here I enter my password&gt;
debug1: Authentication succeeded (password).
Authenticated to my-remote-host.de ([1.2.3.4]:5222).
debug1: channel 0: new [client-session]
debug1: Requesting no-more-sessions@openssh.com
debug1: Entering interactive session.
debug1: Sending environment.
debug1: Sending env LANG = de_DE.UTF-8
Linux ve2003 2.6.18-238.5.1.el5.028stab085.5 #1 SMP Thu Apr 14 15:42:34 MSD 2011 x86_64

The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

To access official Ubuntu documentation, please visit:
http://help.ubuntu.com/
Last login: Fri Sep 23 13:05:55 2011 from
</code></pre>

<p>I am using Mac OS Lion locally and Ubuntu on the remote side. My Capistrano is extended by the multistage-extension. I have set</p>

<pre><code>set :ssh_options, {:forward_agent =&gt; true}
</code></pre>

<p>and it works for the passwordless pulling of the git repository on the remote side.</p>

<p>How can I prevent Capistrano to scrumble up my SSH settings and make it use public key auth again?</p>

<p>Greatly appreciate any help!</p>

<p>EDIT: The problem is Server-side: I just found out that I cannot use other systems to passwordless log into my remote system. How can I know what is wrong with the server?</p>
","","798","<ssh><capistrano><public-key>","3","","0","2011-09-23 15:33:23","","3","","961130","","2011-09-23 15:33:23","2011-09-23 13:11:45",""
"8647092","How to verify a public key in string/byte[] format against certificates in bks store","<p>I want to verify if a certificate with a certain public key exits in android keystore or not.I have key which is holded in a string.How do I verify if the corresponding certificate is present in keystore.
When checked the apis i found certificate.verify(mykey); is the only option.but mykey sholud be of type PublicKey and I have it in <strong>string</strong>.</p>

<p><strong>String is 0r1wxn7wIXJuS/hDnDvectD2VTmel9akk8awIWAXIRo= .....this is a hash of public key..i have to return back the certficate corresponding to this key.
Can anyone help me ?</strong></p>

<p>Can anyone help me ?</p>

<p>Regards
kozlov</p>
","<pre><code>KeyStore store = ... ;
byte[] target = ... ; // Base-64 decode your string.
MessageDigest digest = MessageDigest.getInstance(algorithm);
Enumeration&lt;String&gt; aliases = store.aliases();
while(aliases.hasMoreElements()) {
  String alias = aliases.nextElement();
  Certificate c = store.getCertificate(alias);
  if (c == null)
    continue;
  PublicKey pub = c.getPublicKey();
  byte[] hash = digest.digest(pub.getEncoded());
  if (MessageDigest.isEqual(hash, target)) {
    // Certificate ""c"" is a match.
  }
}
</code></pre>
","796","<android><encryption><certificate><public-key-encryption><public-key>","0","0","1","2011-12-28 08:23:32","8653458","2","3","642583","","2011-12-28 03:57:01","2011-12-27 16:52:41",""
"35178895","OpenSSH login via public key does not work","<p>I'm trying an SSH auth via public key, which works for several machines, but one single machine keeps not accepting it.</p>

<p>First of all, the constellation:
The machine which tries to connect: <strong>OpenSSH_5.1p1, OpenSSL 0.9.8h 28 May 2008</strong>
The server: <strong>OpenSSH_5.3p1, OpenSSL 1.0.1e-fips 11 Feb 2013</strong></p>

<p>This is what happens:</p>

<pre><code>user@client:/root&gt; ssh -v server
OpenSSH_5.1p1, OpenSSL 0.9.8h 28 May 2008
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug1: Connecting to server [x.x.x.x] port 22.
debug1: Connection established.
debug1: identity file /home/user/.ssh/id_rsa type -1
debug1: identity file /home/user/.ssh/id_dsa type 2
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.3
debug1: match: OpenSSH_5.3 pat OpenSSH*
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_5.1
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP
debug1: SSH2_MSG_KEX_DH_GEX_INIT sent
debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY
debug1: Host 'server' is known and matches the RSA host key.
debug1: Found key in /home/user/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password
debug1: Next authentication method: publickey
debug1: Trying private key: /home/nagios/.ssh/id_rsa
debug1: Offering public key: /home/nagios/.ssh/id_dsa
debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password
debug1: Next authentication method: password
user@server's password:
</code></pre>

<p>The <strong>sshd_config</strong> of the server:</p>

<pre><code>#       $OpenBSD: sshd_config,v 1.80 2008/07/02 02:24:18 djm Exp $

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with PATH=/usr/local/bin:/bin:/usr/bin

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options change a
# default value.

#Port 22
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

# Disable legacy (protocol version 1) support in the server for new
# installations. In future the default will change to require explicit
# activation of protocol 1
Protocol 2

# HostKey for protocol version 1
#HostKey /etc/ssh/ssh_host_key
# HostKeys for protocol version 2
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_dsa_key

# Lifetime and size of ephemeral version 1 server key
#KeyRegenerationInterval 1h
#ServerKeyBits 1024

# Logging
# obsoletes QuietMode and FascistLogging
#SyslogFacility AUTH
SyslogFacility AUTHPRIV
#LogLevel INFO

# Authentication:

#LoginGraceTime 2m
#PermitRootLogin yes
#StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys
#AuthorizedKeysCommand none
#AuthorizedKeysCommandRunAs nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#RhostsRSAAuthentication no
# similar for protocol version 2
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# RhostsRSAAuthentication and HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication yes
#PermitEmptyPasswords no
PasswordAuthentication yes

# Change to no to disable s/key passwords
#ChallengeResponseAuthentication yes
ChallengeResponseAuthentication no

# Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no
#KerberosUseKuserok yes

# GSSAPI options
#GSSAPIAuthentication no
GSSAPIAuthentication yes
#GSSAPICleanupCredentials yes
GSSAPICleanupCredentials yes
#GSSAPIStrictAcceptorCheck yes
#GSSAPIKeyExchange no

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of ""PermitRootLogin without-password"".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
#UsePAM no
UsePAM yes

# Accept locale-related environment variables
AcceptEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES
AcceptEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT
AcceptEnv LC_IDENTIFICATION LC_ALL LANGUAGE
AcceptEnv XMODIFIERS

#AllowAgentForwarding yes
#AllowTcpForwarding yes
#GatewayPorts no
#X11Forwarding no
X11Forwarding yes
#X11DisplayOffset 10
#X11UseLocalhost yes
#PrintMotd yes
#PrintLastLog yes
#TCPKeepAlive yes
#UseLogin no
#UsePrivilegeSeparation yes
#PermitUserEnvironment no
#Compression delayed
#ClientAliveInterval 0
#ClientAliveCountMax 3
#ShowPatchLevel no
#UseDNS yes
#PidFile /var/run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none

# no default banner path
#Banner none

# override default of no subsystems
Subsystem       sftp    /usr/libexec/openssh/sftp-server

# Example of overriding settings on a per-user basis
#Match User anoncvs
#       X11Forwarding no
#       AllowTcpForwarding no
#       ForceCommand cvs server
</code></pre>

<p><strong>ssh_config</strong> of the client:</p>

<pre><code>#       $OpenBSD: ssh_config,v 1.23 2007/06/08 04:40:40 pvalchev Exp $

# This is the ssh client system-wide configuration file.  See
# ssh_config(5) for more information.  This file provides defaults for
# users, and the values can be changed in per-user configuration files
# or on the command line.

# Configuration data is parsed as follows:
#  1. command line options
#  2. user-specific file
#  3. system-wide file
# Any configuration value is only changed the first time it is set.
# Thus, host-specific definitions should be at the beginning of the
# configuration file, and defaults at the end.

# Site-wide defaults for some commonly used options.  For a comprehensive
# list of available options, their meanings and defaults, please see the
# ssh_config(5) man page.

Host *
#   ForwardAgent no
#   ForwardX11 no

# If you do not trust your remote host (or its administrator), you
# should not forward X11 connections to your local X11-display for
# security reasons: Someone stealing the authentification data on the
# remote side (the ""spoofed"" X-server by the remote sshd) can read your
# keystrokes as you type, just like any other X11 client could do.
# Set this to ""no"" here for global effect or in your own ~/.ssh/config
# file if you want to have the remote X11 authentification data to
# expire after two minutes after remote login.
ForwardX11Trusted yes

#   RhostsRSAAuthentication no
#   RSAAuthentication yes
#   PasswordAuthentication yes
#   HostbasedAuthentication no
#   GSSAPIAuthentication no
#   GSSAPIDelegateCredentials no
#   BatchMode no
#   CheckHostIP yes
#   AddressFamily any
#   ConnectTimeout 0
#   StrictHostKeyChecking ask
#   IdentityFile ~/.ssh/identity
#   IdentityFile ~/.ssh/id_rsa
#   IdentityFile ~/.ssh/id_dsa
#   Port 22
    Protocol 2
#   Cipher 3des
#   Ciphers aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour,aes192-cbc,aes256-cbc
#   MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160
#   EscapeChar ~
#   Tunnel no
#   TunnelDevice any:any
#   PermitLocalCommand no
#   GSSAPIAuthentication no
#   GSSAPIDelegateCredentials no

# Set this to 'yes' to enable support for the deprecated 'gssapi' authentication
# mechanism to OpenSSH 3.8p1. The newer 'gssapi-with-mic' mechanism is included
# in this release. The use of 'gssapi' is deprecated due to the presence of
# potential man-in-the-middle attacks, which 'gssapi-with-mic' is not susceptible to.
#   GSSAPIEnableMITMAttack no

# This enables sending locale enviroment variables LC_* LANG, see ssh_config(5).
SendEnv LANG LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE LC_MONETARY LC_MESSAGES
SendEnv LC_PAPER LC_NAME LC_ADDRESS LC_TELEPHONE LC_MEASUREMENT
SendEnv LC_IDENTIFICATION LC_ALL
</code></pre>

<p>I've also checked the permissions to the home, .ssh folders and the files.
The client:</p>

<pre><code>user@client:/home&gt; ls -l | grep user
drwx------ 11 user   user 4096 Feb  2 13:48 user
user@client:/home&gt; cd user
user@client:~&gt; ls -al | grep '.ssh'
drwx------  2 user user  4096 Feb  2 13:48 .ssh
user@client:~&gt; cd .ssh
user@client:~/.ssh&gt; ls -al
total 32
drwx------  2 user user   4096 Feb  2 13:48 .
drwx------ 11 user user   4096 Feb  2 13:48 ..
-rw-------  1 user user    672 May 10  2010 id_dsa
-rw-------  1 user user    609 May 10  2010 id_dsa.pub
-rw-------  1 user user  12823 Feb  2 17:06 known_hosts
</code></pre>

<p>The server:</p>

<pre><code>[root@server home]# ls -l |grep user
drwx------. 4 user user 4096 May 27  2013 user
[root@server home]# cd user
[root@server user]# ls -al |grep '.ssh'
drwx------.  2 user user 4096 Feb  3 13:09 .ssh
[root@server user]# cd .ssh
[root@server .ssh]# ls -al
total 12
drwx------. 2 user user 4096 Feb  3 13:09 .
drwx------. 4 user user 4096 May 27  2013 ..
-rw-------. 1 user user  609 Feb  3 13:09 authorized_keys
</code></pre>

<p>So I have absolutely no idea why the server keeps asking me for a password. I also have set a password, and this one is working. But I need an auth without a password.</p>

<p>Anyone any idea? I wonder if that really is an incompatibility...</p>

<p>Thanks in advance.</p>
","<p>The entire OpenSSL 0.9.8 release is out of support per <a href=""https://www.openssl.org/source/"" rel=""nofollow"">openssl.org</a> as is the entire 1.0.0 version!</p>

<p>Also, 0.9.8h in particular is ancient - even your own log shows it's from 2008.  The latest 0.9.8 was 0.9.8zh, per <a href=""https://github.com/openssl/openssl/releases"" rel=""nofollow"">github's OpenSSL release page</a>.</p>

<p>You SHOULD upgrade to the latest 1.0.1 or 1.0.2, or the latest LibreSSL or PolarSSL.</p>

<p>You NEED to at bare minimum upgrade to 0.9.8zh to get <a href=""https://www.openssl.org/news/vulnerabilities.html"" rel=""nofollow"">8 years of vulnerability fixes</a>.</p>

<p>You also need to review your sshd_config settings; per the <a href=""http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man5/sshd_config.5?query=sshd_config&amp;sec=5"" rel=""nofollow"">openbsd documentation</a> RSAAuthentication is a Protocol 1 only option, and you've got it set on your Protocol 2 only server.  I just noticed that; you may have other strange configurations in either or both configs - review them both carefully, and compare your post-version-upgrade client ssh_config to working ssh_config files on other clients.</p>
","792","<authentication><passwords><server><public-key><openssh>","0","0","1","2016-02-04 06:00:49","","2","","","","","2016-02-03 13:49:51",""
"42207104","How to parse in memory string to get private and public key RSA","<p>I am able to read the public and private key from the file directly as file stream convert that to PublicKey and PrivateKey Object. but If load as string it fails. </p>

<p>Working code </p>

<pre><code>    public static RSAPrivateKey getPrivateKey(String filename) throws IOException, GeneralSecurityException {

            PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(
                    IOUtils.toByteArray(new FileInputStream(filename)));
            return (RSAPrivateKey) KeyFactory.getInstance(""RSA"").generatePrivate(pkcs8EncodedKeySpec);
        }

        public static RSAPublicKey getPublicKey(String filename) throws IOException, GeneralSecurityException {
            X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(
                    IOUtils.toByteArray(new FileInputStream(filename)));
            return (RSAPublicKey) KeyFactory.getInstance(""RSA"").generatePublic(x509EncodedKeySpec);
        }

public static void main(String[] args) throws JOSEException, ParseException, IOException, GeneralSecurityException {

        String publicKeyPathName = ""../public"";
        String privateKeyPathName = ""../private"";
        /// loading from file
         RSAPublicKey publicKey = new MYClass().getPublicKey(publicKeyPathName);
         RSAPrivateKey privateKey = new MYClass().getPrivateKey(privateKeyPathName);
}
</code></pre>

<p>Not Working code </p>

<pre><code>public static RSAPrivateKey parsePrivateKey(String content) throws IOException, GeneralSecurityException {
        content = content.replaceAll(""\\n"", """").replace(""-----BEGIN RSA PRIVATE KEY-----"", """")
                .replace(""-----END RSA PRIVATE KEY-----"", """");
        PKCS8EncodedKeySpec pkcs8EncodedKeySpec = new PKCS8EncodedKeySpec(content.getBytes(StandardCharsets.UTF_8));
        return (RSAPrivateKey) KeyFactory.getInstance(""RSA"").generatePrivate(pkcs8EncodedKeySpec);
    }

    public static RSAPublicKey parsePublicKey(String content) throws IOException, GeneralSecurityException {
        content = content.replaceAll(""\\n"", """").replace(""-----BEGIN PUBLIC KEY-----"", """")
                .replace(""-----END PUBLIC KEY-----"", """");
        X509EncodedKeySpec x509EncodedKeySpec = new X509EncodedKeySpec(content.getBytes(StandardCharsets.UTF_8));
        return (RSAPublicKey) KeyFactory.getInstance(""RSA"").generatePublic(x509EncodedKeySpec);
    }
public String getPublicKey() {
        return ""-----BEGIN PUBLIC KEY-----\n"" 
                + ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAswPxKZWJEQ0RVtiaoFIU""
                + ""jndalEp2sZF87Cy9IxW1FxxcfDmZRlkMDe+5X1lzpOjFHP8mBZa8vhMjSKbJY2wt""
                + ""MyxckbBoTjAIefi34KuD0Q6j9LRt1r1iQ+nMYezk5N83ruqyRHtB4a8AOkw3iE2z""
                + ""zA74uAkCzPiYUrAES1I9mVbpxJZf2Ej0px6drkd4OQ2aPnwR13gWTnmqFWV+Xkl6""
                + ""WapMArewaAUXU9zDqjn4ZpNCkgx6m4CK7PDt+VgYUi+sjI0WzPIb0FMDTYSe1iX6""
                + ""mfIabvoetxUmtyQgu4RfHIiOF0no6VEPh31of2B+KZX2OjHKjyKBGUxUkDLm+J2J"" 
                + ""CwIDAQAB\n""
                + ""-----END PUBLIC KEY-----"";
    }

    public String getPrivateKey() {
        return ""-----BEGIN RSA PRIVATE KEY-----\n""
                + ""MIIEowIBAAKCAQEAswPxKZWJEQ0RVtiaoFIUjndalEp2sZF87Cy9IxW1FxxcfDmZ""
                + ""RlkMDe+5X1lzpOjFHP8mBZa8vhMjSKbJY2wtMyxckbBoTjAIefi34KuD0Q6j9LRt""
+ ""1r1iQ+nMYezk5N83ruqyRHtB4a8AOkw3iE2zzA74uAkCzPiYUrAES1I9mVbpxJZf""
+ ""2Ej0px6drkd4OQ2aPnwR13gWTnmqFWV+Xkl6WapMArewaAUXU9zDqjn4ZpNCkgx6""
+ ""m4CK7PDt+VgYUi+sjI0WzPIb0FMDTYSe1iX6mfIabvoetxUmtyQgu4RfHIiOF0no""
+ ""6VEPh31of2B+KZX2OjHKjyKBGUxUkDLm+J2JCwIDAQABAoIBAFj59p4SoyQEeL/P""
+ ""vVs+MNV24WCfektb4tmIiyGrIm0wPY/JGTPsAp/SrTKFRYOL5p04/G7+syVOYdU0""
+ ""gRiXpgevXvtS0SU7nprxUoOq/EOmoTt5iraXPwY+aMWrd0GC6SxZnu2GzgIcd2KC""
+ ""i3+GD323W0wtvmSekydWMWw2nkNeKCL8WE/GqLjigRzdGl+RVviGC+N3IsZZvcf0""
+ ""toNXTxXBPgtcYYWV7MOLsFQkk1yvKh0ISncswkjmkRChi8KQ178hbIzeBuDq+jlY""
+ ""11epFjNUpyw2Y3jRHHkVSFKFaE6GeBpHMC0ucBJxyRzw19DZ+iPGI2xZBmW+wEOE""
+ ""+khw1WECgYEA6ETt3I9zszzytqh5jBma04EM08+aOw9+CVcCLWSC17vRBOiPGJTE""
+ ""bHq6Ln7+pjIErSTrlXOH6kPV0nRzmSDncsttmNXLKCuJUR5stVl/gQY4uaGesF/x""
+ ""Kk/orw/ddibukXiXHAkduZXC+3Wq4TaYHChUz/QZv/gamPSusi1zBlMCgYEAxU4k""
+ ""gJyKLqKfAXsrX0ilyvwkP4siwzORS1GFU5WfMf0E3ZD/3FMjmhjOLX5vnnWcIFtN""
+ ""ERungsyHF0AG5o23HTHkEIi2aZWnC2GiYfpEAJuLhkx08aO65o26RxeC7MOAgL1y""
+ ""0wC/b8ceIQkQuYbqdrPBywHry7+/vtPbHOggK2kCgYBIv+Y8shXMKyfefFBtyEtN""
+ ""Odt5sEmffA++/yiobRXqWmJyhiDj0xze2WXdUFuUVJBQZwL+8Yu9nXeojl7ytHKp""
+ ""6vut5jDWqSQ+aygjeR/NmtRDmFKq7bIMzbCUvIRiEHmiyMGTv2s3CKhkuItINSBZ""
+ ""mWxPIia6kQxLoj/hgQjJDwKBgGNTU0zrgSS4+RLlzo/JIq1tAVJ72KQr8ZjZESVi""
+ ""zSF9HlXsCOIBeIq6shB09fvveQlQ7RsPsORH0joCIXcvIF+yHf201R+SFuXD4Nsy""
+ ""AcnMhBC3rKd4pT4rWvsu+tn2EVq+BG/0kGrU8nXu+lxrbt0S4Rwxe2K2xPBr9oI2""
+ ""2PsBAoGBAJHPPAire0lHcPi+J8YkVKuzwEfP7NgeLZdtqjiZBCZiLoP8SRm68FJS""
+ ""2UpGX4K7rQhx66H6UwXHylBfush56Z8Y9g7PYel83sy+4bqjod1a5TqNBJMkhDQi""
+ ""DrQmDIfpFoRYcOyB4+BeF/w7wL+R5ofov4T+0vB3ST+aztphp2G4\n""
+ ""-----END RSA PRIVATE KEY-----"";
    }

public static void main(String[] args) throws JOSEException, ParseException, IOException, GeneralSecurityException {

 String publicKeyString = new MyClass().getPublicKey();
         RSAPublicKey publicKey = new MyClass().parsePublicKey(publicKeyString);

         String privateKeyString = new MyClass().getPrivateKey();
         RSAPrivateKey privateKey = new
         MyClass().parsePrivateKey(privateKeyString);

}
</code></pre>

<p>I tried without removing the first line, and try to read the file as string . none of them or working. tell me the correct way to use this.</p>

<p>The error I am getting is </p>

<blockquote>
  <p>Exception in thread ""main"" java.security.spec.InvalidKeySpecException:
  java.security.InvalidKeyException: invalid key format     at
  sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:205)
    at java.security.KeyFactory.generatePublic(KeyFactory.java:334)     at
  j.MyClass.parsePublicKey(MyClass.java:136)    at
  j.MyClass.main(MyClass.java:223) Caused by:
  java.security.InvalidKeyException: invalid key format     at
  sun.security.x509.X509Key.decode(X509Key.java:387)    at
  sun.security.x509.X509Key.decode(X509Key.java:403)    at
  sun.security.rsa.RSAPublicKeyImpl.(RSAPublicKeyImpl.java:84)    at
  sun.security.rsa.RSAKeyFactory.generatePublic(RSAKeyFactory.java:298)
    at
  sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:201)
    ... 3 more</p>
</blockquote>

<p>My usecase is, </p>

<p>read a keys from the db and do the conversion. </p>
","<p>You're using <code>content.getBytes(StandardCharsets.UTF_8)</code> instead of base 64 decoding the text within the PEM header and footer lines (starting with <code>-----</code>).</p>
","791","<java><encryption><rsa><private-key><public-key>","0","1","1","2017-02-13 16:57:26","","2","0","1124447","","2017-02-13 16:57:26","2017-02-13 15:00:20",""
"39208194","How can I extract private and public keys from a .CER file?","<p>I have a .CER file on my machine. I would like to print private and public keys from it and store it in DB. How can I do that?</p>

<p>So far, after googling around, this is what I have tried and I am hitting following error.</p>

<pre><code>openssl x509 -inform der -in apple_pay.cer -pubkey -noout &gt; apple_pay.pem

openssl x509 -in apple_pay.pem -text
unable to load certificate
69889:error:0906D06C:PEM routines:PEM_read_bio:no start line:/BuildRoot/Library/Caches/com.apple.xbs/Sources/OpenSSL098/OpenSSL098-59.60.1/src/crypto/pem/pem_lib.c:648:Expecting: TRUSTED CERTIFICATE
KOPC02KW5T9F6T6:ApplePaySwag-Starter chandeln$ 
</code></pre>

<p>I also tried following commands from <a href=""https://www.openssl.org/docs/manmaster/apps/pkey.html"" rel=""nofollow"">https://www.openssl.org/docs/manmaster/apps/pkey.html</a></p>

<pre><code>KOPC02KW5T9F6T6:ApplePaySwag-Starter chandeln$ openssl pkey -in apple_pay.pem -text -noout
openssl:Error: 'pkey' is an invalid command.
</code></pre>
","<p>After executing <code>openssl x509 -inform der -in apple_pay.cer -pubkey -noout &gt; apple_pay.pem</code> you have public key in <code>apple_pay.pem</code></p>

<p><code>openssl x509</code> works with x509 certificates, so it unable to load public key from <code>apple_pay.pem</code>.</p>

<p>There are no way to extract private key from certificate or public key.
It is main idea of asymmetric cypher.</p>
","790","<openssl><public-key-encryption><private-key><public-key>","1","1","1","2016-08-29 15:44:54","39210199","1","","2325154","","2016-08-29 14:46:15","2016-08-29 14:01:27",""
"45148340","From String to java.security.PublicKey object gaves me an illegal character","<p>I have this method:</p>

<pre><code>public static PublicKey getKey(String key){
    try{
        byte[] byteKey = Base64.getDecoder().decode(key.getBytes());
        X509EncodedKeySpec X509publicKey = new X509EncodedKeySpec(byteKey);
        KeyFactory kf = KeyFactory.getInstance(""RSA"");

        return kf.generatePublic(X509publicKey);
    }
    catch(Exception e){
        e.printStackTrace();
    }

        return null;
    }
}
</code></pre>

<p>This should transform a public key (one of n property in this JSON from <a href=""https://login.salesforce.com/id/keys"" rel=""nofollow noreferrer"">Salesforce public key endpoint</a>). In my keys should be kid 208, but:</p>

<pre><code>getKey(""pTSWJvy04hAU7ev7wmaTvpwHsEbseuPl0AlwoxPHnmoOIMATRT0eTqYpLJxDp4BHRFxDTrcUKHKVHGIAVut_-l6nkEI6ALOVW9C5PP9bXwqeHJ5tiGA6AMpaY1LsJJOd2lgExr0LHUPF2TtO4LOVmlptyGPTRSWhmRpPSc5bjGFsyTFr78WmeixjEts9icAUCiBDdpwVw9qVdjJPsufyimqp8os5htm-DB_qKsnRwABVSQRKLw2y7Mr7NP31R07Mpr108dLS5Et8tKnFoiX0MHf5BbA50NG3DtyT27nSa14T0IvSWYJQhxPWXYtuXkVldpbZZn8E2B1VpcDXXGnSPXoPstE9BU7w1RaF31UeEsE8sWDFdHgJMUYMfWjxVhdJB_NaVUt7v0X9QPffXcFPWKUUeVx0g_ONMz0bB_HltFSODWJeAvcZXk14u4sjpKXNIiK8dJzMe0Qn10m5nIdVtxzXfKHiDNobX1dMENDplhDMVk1eYS9x8dh90qt68Q59vKusm6iMjSaXtzwMfqJBwNck41e9Pie2m_cdSu-RIq1u3FScGkezzqNvIuzcse2y-6ApHkkaFMVsNw3CbD87LtVgNusuom38UVC1rS0LeLYFinU3hnFwvB1UCv1_0Cs8CmrOmdifqd25aZIDf5p8f3kowq3QY1mNtdQc9-HgZ3k"");
</code></pre>

<p>returns me an error:</p>

<blockquote>
  <p>java.lang.IllegalArgumentException: Illegal base64 character 5f   at
  java.util.Base64$Decoder.decode0(Base64.java:714)     at
  java.util.Base64$Decoder.decode(Base64.java:526)  at
  testJwt.testJwt.App.getKey(App.java:52)   at
  testJwt.testJwt.App.main(App.java:76)</p>
</blockquote>

<p>What can I do? I'm do something wrong?</p>
","<p>You seem to have <code>_</code> and <code>-</code> in the Base64 string (instead of <code>/</code> and <code>+</code>). Then it is URL safe encoded Base64:</p>

<pre><code>Base64.getUrlDecoder().decode(key.getBytes())
</code></pre>
","790","<java><base64><public-key>","0","0","2","2017-07-20 23:12:20","45226586","0","","","","","2017-07-17 15:40:44",""
"45148340","From String to java.security.PublicKey object gaves me an illegal character","<p>I have this method:</p>

<pre><code>public static PublicKey getKey(String key){
    try{
        byte[] byteKey = Base64.getDecoder().decode(key.getBytes());
        X509EncodedKeySpec X509publicKey = new X509EncodedKeySpec(byteKey);
        KeyFactory kf = KeyFactory.getInstance(""RSA"");

        return kf.generatePublic(X509publicKey);
    }
    catch(Exception e){
        e.printStackTrace();
    }

        return null;
    }
}
</code></pre>

<p>This should transform a public key (one of n property in this JSON from <a href=""https://login.salesforce.com/id/keys"" rel=""nofollow noreferrer"">Salesforce public key endpoint</a>). In my keys should be kid 208, but:</p>

<pre><code>getKey(""pTSWJvy04hAU7ev7wmaTvpwHsEbseuPl0AlwoxPHnmoOIMATRT0eTqYpLJxDp4BHRFxDTrcUKHKVHGIAVut_-l6nkEI6ALOVW9C5PP9bXwqeHJ5tiGA6AMpaY1LsJJOd2lgExr0LHUPF2TtO4LOVmlptyGPTRSWhmRpPSc5bjGFsyTFr78WmeixjEts9icAUCiBDdpwVw9qVdjJPsufyimqp8os5htm-DB_qKsnRwABVSQRKLw2y7Mr7NP31R07Mpr108dLS5Et8tKnFoiX0MHf5BbA50NG3DtyT27nSa14T0IvSWYJQhxPWXYtuXkVldpbZZn8E2B1VpcDXXGnSPXoPstE9BU7w1RaF31UeEsE8sWDFdHgJMUYMfWjxVhdJB_NaVUt7v0X9QPffXcFPWKUUeVx0g_ONMz0bB_HltFSODWJeAvcZXk14u4sjpKXNIiK8dJzMe0Qn10m5nIdVtxzXfKHiDNobX1dMENDplhDMVk1eYS9x8dh90qt68Q59vKusm6iMjSaXtzwMfqJBwNck41e9Pie2m_cdSu-RIq1u3FScGkezzqNvIuzcse2y-6ApHkkaFMVsNw3CbD87LtVgNusuom38UVC1rS0LeLYFinU3hnFwvB1UCv1_0Cs8CmrOmdifqd25aZIDf5p8f3kowq3QY1mNtdQc9-HgZ3k"");
</code></pre>

<p>returns me an error:</p>

<blockquote>
  <p>java.lang.IllegalArgumentException: Illegal base64 character 5f   at
  java.util.Base64$Decoder.decode0(Base64.java:714)     at
  java.util.Base64$Decoder.decode(Base64.java:526)  at
  testJwt.testJwt.App.getKey(App.java:52)   at
  testJwt.testJwt.App.main(App.java:76)</p>
</blockquote>

<p>What can I do? I'm do something wrong?</p>
","<p>The data you have is not the full RSA public key but rather just the modulus, or ""n"" value. The ""e"" value is the other part of the public key. Here is code fragment to illustrate it.</p>

<pre><code>import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.spec.RSAPublicKeySpec;
import java.util.Base64;

public class Main {

    public static void main(String[] args) throws Exception {
        String jsonN = ""pTSWJvy04hAU7ev7wmaTvpwHsEbseuPl0AlwoxPHnmoOIMATRT0eTqYpLJxDp4BHRFxDTrcUKHKVHGIA"" +
                ""Vut_-l6nkEI6ALOVW9C5PP9bXwqeHJ5tiGA6AMpaY1LsJJOd2lgExr0LHUPF2TtO4LOVmlptyGPTRSWhmRpPSc5"" +
                ""bjGFsyTFr78WmeixjEts9icAUCiBDdpwVw9qVdjJPsufyimqp8os5htm-DB_qKsnRwABVSQRKLw2y7Mr7NP31R0"" +
                ""7Mpr108dLS5Et8tKnFoiX0MHf5BbA50NG3DtyT27nSa14T0IvSWYJQhxPWXYtuXkVldpbZZn8E2B1VpcDXXGnSP"" +
                ""XoPstE9BU7w1RaF31UeEsE8sWDFdHgJMUYMfWjxVhdJB_NaVUt7v0X9QPffXcFPWKUUeVx0g_ONMz0bB_HltFSO"" +
                ""DWJeAvcZXk14u4sjpKXNIiK8dJzMe0Qn10m5nIdVtxzXfKHiDNobX1dMENDplhDMVk1eYS9x8dh90qt68Q59vKu"" +
                ""sm6iMjSaXtzwMfqJBwNck41e9Pie2m_cdSu-RIq1u3FScGkezzqNvIuzcse2y-6ApHkkaFMVsNw3CbD87LtVgNu"" +
                ""suom38UVC1rS0LeLYFinU3hnFwvB1UCv1_0Cs8CmrOmdifqd25aZIDf5p8f3kowq3QY1mNtdQc9-HgZ3k"";
        String jsonE = ""AQAB"";

        byte [] nBytes = Base64.getUrlDecoder().decode(jsonN);
        byte [] eBytes = Base64.getUrlDecoder().decode(jsonE);

        BigInteger n = new BigInteger(1, nBytes); // need to use the sign-magnitude constructor
        BigInteger e = new BigInteger(1, eBytes);

        RSAPublicKeySpec rsaPublicKeySpec = new RSAPublicKeySpec(n, e);
        KeyFactory rsaKeyFactory = KeyFactory.getInstance(""RSA"");
        PublicKey rsaPub = rsaKeyFactory.generatePublic(rsaPublicKeySpec);
        System.out.println(rsaPub);
    }
}
</code></pre>

<p>Instead of doing this by hand I would look for a library that already does this, though library recommendations are off-topic on stackoverflow.</p>
","790","<java><base64><public-key>","0","1","2","2017-07-20 23:12:20","45226586","0","","","","","2017-07-17 15:40:44",""
"4533016","Is there a free pgp key dumping program?","<p>is there any pgp key dumping program like <a href=""http://www.pgpdump.net/"" rel=""nofollow"">http://www.pgpdump.net/</a> that also shows the MPI values as well as the other information? the linked website's program will print out <code>...</code> for the long MPI, which is perfectly logical, but I want to see the values since my program is for some reason getting all but one part right (reading an elgamal public key), and its messing with everything that comes afterwards. i want to see where im off by a few bits</p>
","<p><a href=""http://www.pgpdump.net/about.html"" rel=""nofollow"">pgpdump.net</a> links to the source code of <code>pgpdump</code>. Perhaps you could find the part where <code>...</code> is written and change it in a local copy of the program.</p>
","788","<dump><public-key><pgp><openpgp><public-fields>","-1","2","2","2010-12-29 13:04:32","4554338","0","","","","","2010-12-26 06:52:35","2013-05-21 10:17:16"
"4533016","Is there a free pgp key dumping program?","<p>is there any pgp key dumping program like <a href=""http://www.pgpdump.net/"" rel=""nofollow"">http://www.pgpdump.net/</a> that also shows the MPI values as well as the other information? the linked website's program will print out <code>...</code> for the long MPI, which is perfectly logical, but I want to see the values since my program is for some reason getting all but one part right (reading an elgamal public key), and its messing with everything that comes afterwards. i want to see where im off by a few bits</p>
","<p>gpg --list-packets --debug-all should show MPI values.</p>
","788","<dump><public-key><pgp><openpgp><public-fields>","-1","2","2","2010-12-29 13:04:32","4554338","0","","","","","2010-12-26 06:52:35","2013-05-21 10:17:16"
"42831339","decode south african za-drivers-license","<p>In reference to this discussion: <a href=""https://stackoverflow.com/questions/17549231/decode-south-african-za-drivers-license"">Decode South African (ZA) Drivers License</a></p>

<p>Please assist I seem to be getting an error trying to create PublicKey instance in Java on android. I have pasted the error below:</p>

<pre><code>java.lang.RuntimeException: error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag
</code></pre>

<p>Here is the code snippet:</p>

<pre><code>Cipher asymmetricCipher = null;
asymmetricCipher = Cipher.getInstance(""RSA"");
X509EncodedKeySpec publicKeySpec128 = new X509EncodedKeySpec(key128block);
X509EncodedKeySpec publicKeySpec74 = new X509EncodedKeySpec(key74block);

KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
Key key = keyFactory.generatePublic(publicKeySpec128);
asymmetricCipher.init(Cipher.DECRYPT_MODE, key);

byte[] plainText = asymmetricCipher.doFinal(topBlocksData[0]);
</code></pre>
","<p>The encoded public keys you're trying to read are not of the format expected by <a href=""https://docs.oracle.com/javase/8/docs/api/java/security/spec/X509EncodedKeySpec.html"" rel=""nofollow noreferrer""><code>X509EncodedKeySpec</code></a>. Instead they are of an even simpler form which, unfortunately, is not supported by Java. However, you can use the Bouncycastle or Spongycastle library to code up a small java routine to parse the values. The code below is copied from <a href=""https://stackoverflow.com/questions/29565772/decode-asn1-sequence-to-rsa-public-key-using-java#29571639"">my answer</a> to <a href=""https://stackoverflow.com/questions/29565772/decode-asn1-sequence-to-rsa-public-key-using-java"">this question</a>.</p>

<pre><code>import java.io.IOException;
import java.math.BigInteger;
import org.bouncycastle.asn1.ASN1EncodableVector;
import org.bouncycastle.asn1.ASN1InputStream;
import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DLSequence;

public class RsaAsn1Example {
// ...
    public static BigInteger [] parseASN1RsaPublicKey(byte [] encoded) throws IOException {
        ASN1InputStream asn1_is = new ASN1InputStream(encoded);
        DLSequence dlSeq = (DLSequence) asn1_is.readObject();
        ASN1Integer asn1_n = (ASN1Integer) dlSeq.getObjectAt(0);
        ASN1Integer asn1_e = (ASN1Integer) dlSeq.getObjectAt(1);
        asn1_is.close();
        return new BigInteger[]{ asn1_n.getPositiveValue(), asn1_e.getPositiveValue()};
    }
// ....
}
</code></pre>

<p>The values returned by <code>parseASN1RsaPublicKey</code> can be supplied to an <a href=""https://developer.android.com/reference/java/security/spec/RSAPublicKeySpec.html"" rel=""nofollow noreferrer""><code>RsaPublicKeySpec</code></a> constructor to create the public key.</p>

<p>Also examine <a href=""https://stackoverflow.com/questions/29565772/decode-asn1-sequence-to-rsa-public-key-using-java#29571795"">divanov's answer</a> to the same questions for an alternative.</p>
","788","<java><android><encryption><rsa><public-key>","1","0","1","2017-03-16 11:02:39","42831992","6","1","-1","","2017-05-23 12:25:17","2017-03-16 10:26:41",""
"28094655","Finding out the public key of an ssh server","<p>I have access to a student server and was interested in being able to visualize the public key of the ssh server. What unix command can help me see the ssh key, since this is different than my own generating of keys like on AWS etc.?</p>
","<p>This is that simple as :</p>

<pre><code># cat /root/.ssh/id*.pub
</code></pre>

<p>or for a specific user :</p>

<pre><code># cat ~user/.ssh/id*.pub
</code></pre>
","785","<unix><ssh><public-key>","-1","0","1","2015-01-22 17:15:39","28094780","0","","","","","2015-01-22 17:08:43",""
"5467333","public key for encryption; private key for de-cryption?","<p>I understand that private and public keys are mathematically related and data encrypted with one key can only be decrpyted with other. My question is that private key is always used to encrypt data whereas public key is always used to de-crypt it? Or can be be vice-vera and if so can you give some example application where its used in other direction (public key to encrypt and private key to decrypt)?</p>
","<p>It's interchangeable.</p>

<p>Digital Signature -> Private key encrypts, public key decrypts so to verify sender.</p>

<p>Send a message -> Public key encrypts, private decrypts and owner reads the message.</p>

<p>EDIT: People seem to disagree with the ""Interchangeable"" definition. I need to clarify that I am talking about the mathematical perspective of the operation, not what is best in terms of security. Ofc, you should use keys for their intended operation.</p>

<p>However, Henrick Hellström response in SO thread explains why they are interchangeable mathematically : <a href=""https://stackoverflow.com/questions/9208583/are-public-key-and-private-key-interchangeable"">Are public key and private key interchangeable?</a></p>
","779","<encryption><public-key><private-key>","3","-1","4","2019-03-21 15:28:26","5467402","1","1","","","","2011-03-29 02:45:16",""
"5467333","public key for encryption; private key for de-cryption?","<p>I understand that private and public keys are mathematically related and data encrypted with one key can only be decrpyted with other. My question is that private key is always used to encrypt data whereas public key is always used to de-crypt it? Or can be be vice-vera and if so can you give some example application where its used in other direction (public key to encrypt and private key to decrypt)?</p>
","<p>If I want to send you a secure message, I would encrypt the message with your <em>public</em> key. That way, only you (knowing the <em>private</em> key) can decrypt it.</p>
","779","<encryption><public-key><private-key>","3","1","4","2019-03-21 15:28:26","5467402","1","1","","","","2011-03-29 02:45:16",""
"5467333","public key for encryption; private key for de-cryption?","<p>I understand that private and public keys are mathematically related and data encrypted with one key can only be decrpyted with other. My question is that private key is always used to encrypt data whereas public key is always used to de-crypt it? Or can be be vice-vera and if so can you give some example application where its used in other direction (public key to encrypt and private key to decrypt)?</p>
","<p>Not only <em>can</em> you use a public key for encryption, that is actually the normal mode of operation when you are encrypting for secrecy.  This makes sense - anyone can encrypt with the public key, and only the proper recipient can decrypt using their private key.</p>

<p>In many public key systems, signing is mathematically similar to the opposite case - ""encrypting with the private key"" - but note that the signing operation is fundamentally distinct from the encryption operation.  For example, with RSA, signing must use an invariant, verifiable padding method, whereas encryption should use random padding.</p>
","779","<encryption><public-key><private-key>","3","1","4","2019-03-21 15:28:26","5467402","1","1","","","","2011-03-29 02:45:16",""
"5467333","public key for encryption; private key for de-cryption?","<p>I understand that private and public keys are mathematically related and data encrypted with one key can only be decrpyted with other. My question is that private key is always used to encrypt data whereas public key is always used to de-crypt it? Or can be be vice-vera and if so can you give some example application where its used in other direction (public key to encrypt and private key to decrypt)?</p>
","<p><em>Encryption</em> is about keeping some data confidential; the data is transformed into an opaque blob and the reverse operation requires something that the attacker does not know, i.e. a ""secret"" or ""private"" information. The whole point of encryption is that <em>decryption</em> cannot be done with only public information; hence decryption uses the private key. However, there is no problem in letting anybody encrypt data, thus encryption can use the public key.</p>

<p>There are some algorithms (in practice, only one: RSA) which, from a casual glance, appear to be ""revertible"": you might think about using the private key for encryption, and the public key for decryption. As explained above, there goes confidentiality (if the decryption key is public, then anybody can decrypt, hence the encrypted data cannot be considered as confidential anymore). Such a ""reversed encryption"" may be used as the basis for a <em>digital signature algorithm</em>, in which there is no notion of confidentiality, but, instead, of verifiable proof of key owner action.</p>

<p><strong>However</strong> there is more to RSA than the modular exponentiation. RSA encryption first transforms the input message into a big integer through an operation called ""padding"". RSA signature generation first transforms the input message into a big integer through another operation which is also called ""padding""; <strong>but</strong> this is not <em>at all</em> the same padding. Padding is essential for security, and the needed characteristics are quite distinct between encryption and signature. For instance, an encryption padding needs a high level of added randomness, whereas a signature padding requires a lot of redundancy (and a hash function, in order to accommodate long input messages).</p>

<p>Talking of signatures as ""encryption with the private key"" is the way the RSA standard historically put it (hence names such as ""md5WithRSAEncryption""), but it is inaccurate (paddings are, and must be, different) and overly specific (it applies only to RSA, not El Gamal, DSA, Diffie-Hellman, NTRU...). This is just a widespread confusion.</p>
","779","<encryption><public-key><private-key>","3","9","4","2019-03-21 15:28:26","5467402","1","1","","","","2011-03-29 02:45:16",""
"41386973","How to load PublicKey RSA from bytes using JavaScript","<p>I'm consuming a service developed in Java in an AngularJS application. This service returns me the bytes of an RSA public key. I need to mount the key through the bytes in JavaScript. In summary I need to do in JavaScript what is being done in Java as below:</p>

<pre><code> public static PublicKey loadPublicKey(String stored){
    byte[] data = Base64.decode(stored);
    X509EncodedKeySpec spec = new X509EncodedKeySpec(data);
    KeyFactory fact = KeyFactory.getInstance(""RSA"");
    return fact.generatePublic(spec);
}
</code></pre>

<p>Can anybody help me?</p>
","<p>You can use standard javascript <a href=""https://www.w3.org/TR/WebCryptoAPI/"" rel=""nofollow noreferrer"">WebCryptographyApi</a> to <strong>import the public key for encryption or verify a signature</strong>. You need to set the algorithm and allowed operations depending on the expected key usage. </p>

<p><strong>Encryption</strong></p>

<pre><code>//Convert the public key in base 64 (DER encoded) to array buffer
var publicKeyAB = str2ab(atob(publicKeyB64)); 

//import key to encrypt with RSA-OAEP   
crypto.subtle.importKey(
     ""spki"",    
      publicKeyAB, 
      { name: ""RSA-OAEP"", hash: {name: ""SHA-256""}}, 
      false,
      [""encrypt""])
.then(function(key){
    //do something with the key               
}).catch(function(err) {
    console.log(err );
}); 
</code></pre>

<p><strong>Verify a signature</strong></p>

<pre><code>//Convert the public key in base 64 (DER encoded) to array buffer
var publicKeyAB = str2ab(atob(publicKeyB64)); 

//import the key to verify RSA signature with SHA 256
crypto.subtle.importKey(
     ""spki"",    
      publicKeyAB, 
      {name: 'RSASSA-PKCS1-v1_5', hash: { name: 'SHA-256'  }}, 
      false,
      [""verify""])
.then(function(key){
    //do something with the key               
}).catch(function(err) {
    console.log(err );
}); 
</code></pre>

<p><strong>Utility functions</strong></p>

<pre><code>function str2ab(str) {
  var arrBuff = new ArrayBuffer(str.length);
  var bytes = new Uint8Array(arrBuff);
  for (var iii = 0; iii &lt; str.length; iii++) {
    bytes[iii] = str.charCodeAt(iii);
  }
  return bytes;
}
</code></pre>

<p>See more examples <a href=""https://github.com/diafygi/webcrypto-examples"" rel=""nofollow noreferrer"">here</a></p>
","778","<javascript><rsa><public-key>","3","3","1","2016-12-29 22:44:13","","0","1","215552","","2016-12-29 22:44:13","2016-12-29 20:49:03",""
"45961118","Server Authentication via SSH Key fails","<p>I tried to set up private/public key authentication on my server (CentOS). Here are the steps I made:</p>

<ol>
<li>Generated a public/private keypair with puttygen</li>
<li>Copied the public key to the server and appended it with the cat command to the file /root/.ssh/authorized_keys</li>
<li>Checked suggested file ownership and permissions for .ssh (700) and .ssh/authorized_keys (600)</li>
<li>Restarted the sshd service</li>
<li>In the Putty config under Connection > SSH > Auth, selected the privat key</li>
</ol>

<p>But when I try to connect with Putty, I get the message ""Server refused our key"". I am prompted for password then, and that works.</p>

<p>I also raised the authentication log level, here is the output for a failed attempt:</p>

<pre><code>    Aug 30 12:55:01 localhost sshd[44558]: debug3: fd 5 is not O_NONBLOCK
Aug 30 12:55:01 localhost sshd[44558]: debug1: Forked child 44752.
Aug 30 12:55:01 localhost sshd[44558]: debug3: send_rexec_state: entering fd = 8 config len 803
Aug 30 12:55:01 localhost sshd[44558]: debug3: ssh_msg_send: type 0
Aug 30 12:55:01 localhost sshd[44558]: debug3: send_rexec_state: done
Aug 30 12:55:01 localhost sshd[44752]: debug3: oom_adjust_restore
Aug 30 12:55:01 localhost sshd[44752]: Set /proc/self/oom_score_adj to 0
Aug 30 12:55:01 localhost sshd[44752]: debug1: rexec start in 5 out 5 newsock 5 pipe 7 sock 8
Aug 30 12:55:01 localhost sshd[44752]: debug1: inetd sockets after dupping: 3, 3
Aug 30 12:55:01 localhost sshd[44752]: Connection from 91.15.164.238 port 58557 on 82.165.78.188 port 22
Aug 30 12:55:01 localhost sshd[44752]: debug1: Client protocol version 2.0; client software version PuTTY_Release_0.70
Aug 30 12:55:01 localhost sshd[44752]: debug1: no match: PuTTY_Release_0.70
Aug 30 12:55:01 localhost sshd[44752]: debug1: Enabling compatibility mode for protocol 2.0
Aug 30 12:55:01 localhost sshd[44752]: debug1: Local version string SSH-2.0-OpenSSH_6.6.1
Aug 30 12:55:01 localhost sshd[44752]: debug2: fd 3 setting O_NONBLOCK
Aug 30 12:55:01 localhost sshd[44752]: debug3: ssh_sandbox_init: preparing rlimit sandbox
Aug 30 12:55:01 localhost sshd[44752]: debug2: Network child is on pid 44753
Aug 30 12:55:01 localhost sshd[44752]: debug3: preauth child monitor started
Aug 30 12:55:01 localhost sshd[44752]: debug1: SELinux support disabled [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: privsep user:group 74:74 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: permanently_set_uid: 74/74 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: list_hostkey_types: ssh-rsa,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: SSH2_MSG_KEXINIT sent [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: SSH2_MSG_KEXINIT received [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: ssh-rsa,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: none,zlib@openssh.com [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: none,zlib@openssh.com [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit:  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit:  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: first_kex_follows 0  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: reserved 0  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,rsa2048-sha256,rsa1024-sha1,diffie-hellman-group1-sha1 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: ssh-rsa,ssh-ed25519,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-dss [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: aes256-ctr,aes256-cbc,rijndael-cbc@lysator.liu.se,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,chacha20-poly1305@openssh.com,blowfish-ctr,blowfish-cbc,3des-ctr,3des-cbc,arcfour256,arcfour128 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: aes256-ctr,aes256-cbc,rijndael-cbc@lysator.liu.se,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,chacha20-poly1305@openssh.com,blowfish-ctr,blowfish-cbc,3des-ctr,3des-cbc,arcfour256,arcfour128 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: hmac-sha2-256,hmac-sha1,hmac-sha1-96,hmac-md5,hmac-sha2-256-etm@openssh.com,hmac-sha1-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-etm@openssh.com [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: hmac-sha2-256,hmac-sha1,hmac-sha1-96,hmac-md5,hmac-sha2-256-etm@openssh.com,hmac-sha1-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-etm@openssh.com [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: none,zlib [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: none,zlib [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit:  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit:  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: first_kex_follows 0  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: reserved 0  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: mac_setup: setup hmac-sha2-256 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: kex: client-&gt;server aes256-ctr hmac-sha2-256 none [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: mac_setup: setup hmac-sha2-256 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: kex: server-&gt;client aes256-ctr hmac-sha2-256 none [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: kex: curve25519-sha256@libssh.org need=32 dh_need=32 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_send entering: type 120 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive_expect entering: type 121 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive entering [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:01 localhost sshd[44752]: debug3: monitor_read: checking request 120
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_send entering: type 121
Aug 30 12:55:01 localhost sshd[44752]: debug1: kex: curve25519-sha256@libssh.org need=32 dh_need=32 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_send entering: type 120 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive_expect entering: type 121 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive entering [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:01 localhost sshd[44752]: debug3: monitor_read: checking request 120
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_send entering: type 121
Aug 30 12:55:01 localhost sshd[44752]: debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_key_sign entering [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_send entering: type 6 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_key_sign: waiting for MONITOR_ANS_SIGN [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive_expect entering: type 7 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive entering [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:01 localhost sshd[44752]: debug3: monitor_read: checking request 6
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_answer_sign
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_answer_sign: signature 0x7f0b70e15390(271)
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_send entering: type 7
Aug 30 12:55:01 localhost sshd[44752]: debug2: monitor_read: 6 used once, disabling now
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_derive_keys [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: set_newkeys: mode 1 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: SSH2_MSG_NEWKEYS sent [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: expecting SSH2_MSG_NEWKEYS [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: set_newkeys: mode 0 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: SSH2_MSG_NEWKEYS received [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: KEX done [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug1: userauth-request for user root service ssh-connection method none [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug1: attempt 0 failures 0 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_getpwnamallow entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 8 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_getpwnamallow: waiting for MONITOR_ANS_PWNAM [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive_expect entering: type 9 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: monitor_read: checking request 8
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_pwnamallow
Aug 30 12:55:04 localhost sshd[44752]: debug3: Trying to reverse map address 91.15.164.238.
Aug 30 12:55:04 localhost sshd[44752]: debug2: parse_server_config: config reprocess config len 803
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_pwnamallow: sending MONITOR_ANS_PWNAM: 1
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 9
Aug 30 12:55:04 localhost sshd[44752]: debug2: monitor_read: 8 used once, disabling now
Aug 30 12:55:04 localhost sshd[44752]: debug2: input_userauth_request: setting up authctxt for root [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_start_pam entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 100 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_inform_authserv entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 4 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_inform_authrole entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 80 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug2: input_userauth_request: try method none [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: userauth_finish: failure partial=0 next methods=""publickey,gssapi-keyex,gssapi-with-mic,password"" [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: monitor_read: checking request 100
Aug 30 12:55:04 localhost sshd[44752]: debug1: PAM: initializing for ""root""
Aug 30 12:55:04 localhost sshd[44752]: debug1: PAM: setting PAM_RHOST to ""p5b0fa4ee.dip0.t-ipconnect.de""
Aug 30 12:55:04 localhost sshd[44752]: debug1: PAM: setting PAM_TTY to ""ssh""
Aug 30 12:55:04 localhost sshd[44752]: debug2: monitor_read: 100 used once, disabling now
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: monitor_read: checking request 4
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_authserv: service=ssh-connection, style=
Aug 30 12:55:04 localhost sshd[44752]: debug2: monitor_read: 4 used once, disabling now
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: monitor_read: checking request 80
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_authrole: role=
Aug 30 12:55:04 localhost sshd[44752]: debug2: monitor_read: 80 used once, disabling now
Aug 30 12:55:04 localhost sshd[44752]: debug1: userauth-request for user root service ssh-connection method publickey [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug1: attempt 1 failures 0 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug2: input_userauth_request: try method publickey [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug1: test whether pkalg/pkblob are acceptable [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_key_allowed entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 22 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive_expect entering: type 23 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: monitor_read: checking request 22
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_keyallowed entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_keyallowed: key_from_blob: 0x7f0b70e1ca10
Aug 30 12:55:04 localhost sshd[44752]: debug1: temporarily_use_uid: 0/0 (e=0/0)
Aug 30 12:55:04 localhost sshd[44752]: debug1: trying public key file /root/.ssh/authorized_keys
Aug 30 12:55:04 localhost sshd[44752]: debug1: fd 4 clearing O_NONBLOCK
Aug 30 12:55:04 localhost sshd[44752]: debug2: key_type_from_name: unknown key type '----'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing keytype
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: '---- BEGIN SSH2 PUBLIC KEY ----\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug2: key_type_from_name: unknown key type 'BEGIN'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing keytype
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: 'BEGIN SSH2 PUBLIC KEY ----\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug2: key_type_from_name: unknown key type 'Comment:'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing keytype
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: 'Comment: ""rsa-key-20170830""\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: '""rsa-key-20170830""\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: 'AAAAB3NzaC1yc2EAAAABJQAAAQEAkO9lXNIVuohGAOsCQy+NDIJv7a+a6z6ekmSp\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: ''
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: 'HfFduHAvOadeX/HDidL1696CVOHjX8fJ7ITTCaFl2ljI06lobZ2baDAsezpMhut9\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: ''
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: 'xmovTOmTJK3pOAI9E1S3Hmhum0QViFsE5oCiMHwZixLmWoeZt09ZwSZyQZAvtHTU\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: ''
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: '73bviqiky/j2xYpG+5QKyViyCEAa6KbJKnGpLw8UTf0rEBhUES9wLBt4vU3AZuQd\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: ''
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: 'evfZSr3lDBlCCdX3vyJJP8m4x3+8YMSvJSfKa9MErWpxjNE+4GMhyexNILSP+lgy\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: ''
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: '5tqWIehpSekThkJLpi0KPvGiK/bm7oXMVNLN0KdLAf/MKUzB9w==\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: ''
Aug 30 12:55:04 localhost sshd[44752]: debug2: key_type_from_name: unknown key type '----'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing keytype
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: '---- END SSH2 PUBLIC KEY ----\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug2: key_type_from_name: unknown key type 'END'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing keytype
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: 'END SSH2 PUBLIC KEY ----\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug2: key not found
Aug 30 12:55:04 localhost sshd[44752]: debug1: restore_uid: 0/0
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_keyallowed: key 0x7f0b70e1ca10 is not allowed
Aug 30 12:55:04 localhost sshd[44752]: Failed publickey for root from 91.15.164.238 port 58557 ssh2: RSA 4c:13:08:b4:06:eb:ea:98:54:69:50:3e:cf:22:9e:da
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 23
Aug 30 12:55:04 localhost sshd[44752]: debug2: userauth_pubkey: authenticated 0 pkalg ssh-rsa [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: userauth_finish: failure partial=0 next methods=""publickey,gssapi-keyex,gssapi-with-mic,password"" [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug1: userauth-request for user root service ssh-connection method gssapi-with-mic [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug1: attempt 2 failures 1 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug2: input_userauth_request: try method gssapi-with-mic [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 42 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive_expect entering: type 43 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: monitor_read: checking request 42
Aug 30 12:55:04 localhost sshd[44752]: debug1: Unspecified GSS failure.  Minor code may provide more information\nKey table file '/etc/krb5.keytab' not found\n
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 43
Aug 30 12:55:04 localhost sshd[44752]: debug3: userauth_finish: failure partial=0 next methods=""publickey,gssapi-keyex,gssapi-with-mic,password"" [preauth]
</code></pre>
","<p>Here is the reason why it didn't work. As numerous step-by-step tutorials suggest, one should generate the public key file, copy it to the server and then append the public key to the authorized_keys file with the cat command like this:</p>

<p><code>cat id_rsa.mypublickey.pub &gt;&gt; ~/.ssh/authorized_keys</code></p>

<p>Im my case I used PuTTYgen to generate the keys. But the resulting public key file (the one thats saved when you use the save button) was not syntactically applicable for appending to authorized_keys.</p>

<p>To get a correct formatted <strong>public key</strong> string, copy&amp;paste the generated snippet from the PuTTYgen window to <strong>one new line</strong>  in the ~/.ssh/authorized_keys file. A correct formatted line looks like this, however, the syntax allows comments and more, too:</p>

<pre><code>ssh-rsa AAAAB3NzaEAAAAB/*...more letters...*/cPogeHB2XQBQ== rsa-key-20170831
</code></pre>

<p>To get the <strong>private key</strong> in a format that you can use with other ssh-agents  than Putty, you can use PuTTYgen's Conversion option and save the key in OpenSSH format. </p>

<p>As user ilansch suggested, more comprehensive information is found here: <a href=""https://stackoverflow.com/questions/2224066/how-to-convert-ssh-keypairs-generated-using-puttygenwindows-into-key-pairs-use"">How to convert SSH keypairs generated using PuttyGen(Windows) into key-pairs used by ssh-agent and KeyChain(Linux)</a></p>
","771","<ssh><centos><putty><public-key>","-1","0","2","2018-11-05 20:21:42","45974447","5","","6589907","","2017-08-30 13:04:28","2017-08-30 12:58:35",""
"45961118","Server Authentication via SSH Key fails","<p>I tried to set up private/public key authentication on my server (CentOS). Here are the steps I made:</p>

<ol>
<li>Generated a public/private keypair with puttygen</li>
<li>Copied the public key to the server and appended it with the cat command to the file /root/.ssh/authorized_keys</li>
<li>Checked suggested file ownership and permissions for .ssh (700) and .ssh/authorized_keys (600)</li>
<li>Restarted the sshd service</li>
<li>In the Putty config under Connection > SSH > Auth, selected the privat key</li>
</ol>

<p>But when I try to connect with Putty, I get the message ""Server refused our key"". I am prompted for password then, and that works.</p>

<p>I also raised the authentication log level, here is the output for a failed attempt:</p>

<pre><code>    Aug 30 12:55:01 localhost sshd[44558]: debug3: fd 5 is not O_NONBLOCK
Aug 30 12:55:01 localhost sshd[44558]: debug1: Forked child 44752.
Aug 30 12:55:01 localhost sshd[44558]: debug3: send_rexec_state: entering fd = 8 config len 803
Aug 30 12:55:01 localhost sshd[44558]: debug3: ssh_msg_send: type 0
Aug 30 12:55:01 localhost sshd[44558]: debug3: send_rexec_state: done
Aug 30 12:55:01 localhost sshd[44752]: debug3: oom_adjust_restore
Aug 30 12:55:01 localhost sshd[44752]: Set /proc/self/oom_score_adj to 0
Aug 30 12:55:01 localhost sshd[44752]: debug1: rexec start in 5 out 5 newsock 5 pipe 7 sock 8
Aug 30 12:55:01 localhost sshd[44752]: debug1: inetd sockets after dupping: 3, 3
Aug 30 12:55:01 localhost sshd[44752]: Connection from 91.15.164.238 port 58557 on 82.165.78.188 port 22
Aug 30 12:55:01 localhost sshd[44752]: debug1: Client protocol version 2.0; client software version PuTTY_Release_0.70
Aug 30 12:55:01 localhost sshd[44752]: debug1: no match: PuTTY_Release_0.70
Aug 30 12:55:01 localhost sshd[44752]: debug1: Enabling compatibility mode for protocol 2.0
Aug 30 12:55:01 localhost sshd[44752]: debug1: Local version string SSH-2.0-OpenSSH_6.6.1
Aug 30 12:55:01 localhost sshd[44752]: debug2: fd 3 setting O_NONBLOCK
Aug 30 12:55:01 localhost sshd[44752]: debug3: ssh_sandbox_init: preparing rlimit sandbox
Aug 30 12:55:01 localhost sshd[44752]: debug2: Network child is on pid 44753
Aug 30 12:55:01 localhost sshd[44752]: debug3: preauth child monitor started
Aug 30 12:55:01 localhost sshd[44752]: debug1: SELinux support disabled [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: privsep user:group 74:74 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: permanently_set_uid: 74/74 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: list_hostkey_types: ssh-rsa,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: SSH2_MSG_KEXINIT sent [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: SSH2_MSG_KEXINIT received [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: ssh-rsa,ecdsa-sha2-nistp256,ssh-ed25519 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,chacha20-poly1305@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: none,zlib@openssh.com [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: none,zlib@openssh.com [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit:  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit:  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: first_kex_follows 0  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: reserved 0  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,rsa2048-sha256,rsa1024-sha1,diffie-hellman-group1-sha1 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: ssh-rsa,ssh-ed25519,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-dss [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: aes256-ctr,aes256-cbc,rijndael-cbc@lysator.liu.se,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,chacha20-poly1305@openssh.com,blowfish-ctr,blowfish-cbc,3des-ctr,3des-cbc,arcfour256,arcfour128 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: aes256-ctr,aes256-cbc,rijndael-cbc@lysator.liu.se,aes192-ctr,aes192-cbc,aes128-ctr,aes128-cbc,chacha20-poly1305@openssh.com,blowfish-ctr,blowfish-cbc,3des-ctr,3des-cbc,arcfour256,arcfour128 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: hmac-sha2-256,hmac-sha1,hmac-sha1-96,hmac-md5,hmac-sha2-256-etm@openssh.com,hmac-sha1-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-etm@openssh.com [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: hmac-sha2-256,hmac-sha1,hmac-sha1-96,hmac-md5,hmac-sha2-256-etm@openssh.com,hmac-sha1-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-etm@openssh.com [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: none,zlib [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: none,zlib [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit:  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit:  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: first_kex_follows 0  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_parse_kexinit: reserved 0  [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: mac_setup: setup hmac-sha2-256 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: kex: client-&gt;server aes256-ctr hmac-sha2-256 none [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: mac_setup: setup hmac-sha2-256 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: kex: server-&gt;client aes256-ctr hmac-sha2-256 none [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: kex: curve25519-sha256@libssh.org need=32 dh_need=32 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_send entering: type 120 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive_expect entering: type 121 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive entering [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:01 localhost sshd[44752]: debug3: monitor_read: checking request 120
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_send entering: type 121
Aug 30 12:55:01 localhost sshd[44752]: debug1: kex: curve25519-sha256@libssh.org need=32 dh_need=32 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_send entering: type 120 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive_expect entering: type 121 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive entering [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:01 localhost sshd[44752]: debug3: monitor_read: checking request 120
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_send entering: type 121
Aug 30 12:55:01 localhost sshd[44752]: debug1: expecting SSH2_MSG_KEX_ECDH_INIT [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_key_sign entering [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_send entering: type 6 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_key_sign: waiting for MONITOR_ANS_SIGN [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive_expect entering: type 7 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive entering [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:01 localhost sshd[44752]: debug3: monitor_read: checking request 6
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_answer_sign
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_answer_sign: signature 0x7f0b70e15390(271)
Aug 30 12:55:01 localhost sshd[44752]: debug3: mm_request_send entering: type 7
Aug 30 12:55:01 localhost sshd[44752]: debug2: monitor_read: 6 used once, disabling now
Aug 30 12:55:01 localhost sshd[44752]: debug2: kex_derive_keys [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: set_newkeys: mode 1 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: SSH2_MSG_NEWKEYS sent [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: expecting SSH2_MSG_NEWKEYS [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug2: set_newkeys: mode 0 [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: SSH2_MSG_NEWKEYS received [preauth]
Aug 30 12:55:01 localhost sshd[44752]: debug1: KEX done [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug1: userauth-request for user root service ssh-connection method none [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug1: attempt 0 failures 0 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_getpwnamallow entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 8 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_getpwnamallow: waiting for MONITOR_ANS_PWNAM [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive_expect entering: type 9 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: monitor_read: checking request 8
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_pwnamallow
Aug 30 12:55:04 localhost sshd[44752]: debug3: Trying to reverse map address 91.15.164.238.
Aug 30 12:55:04 localhost sshd[44752]: debug2: parse_server_config: config reprocess config len 803
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_pwnamallow: sending MONITOR_ANS_PWNAM: 1
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 9
Aug 30 12:55:04 localhost sshd[44752]: debug2: monitor_read: 8 used once, disabling now
Aug 30 12:55:04 localhost sshd[44752]: debug2: input_userauth_request: setting up authctxt for root [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_start_pam entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 100 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_inform_authserv entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 4 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_inform_authrole entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 80 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug2: input_userauth_request: try method none [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: userauth_finish: failure partial=0 next methods=""publickey,gssapi-keyex,gssapi-with-mic,password"" [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: monitor_read: checking request 100
Aug 30 12:55:04 localhost sshd[44752]: debug1: PAM: initializing for ""root""
Aug 30 12:55:04 localhost sshd[44752]: debug1: PAM: setting PAM_RHOST to ""p5b0fa4ee.dip0.t-ipconnect.de""
Aug 30 12:55:04 localhost sshd[44752]: debug1: PAM: setting PAM_TTY to ""ssh""
Aug 30 12:55:04 localhost sshd[44752]: debug2: monitor_read: 100 used once, disabling now
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: monitor_read: checking request 4
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_authserv: service=ssh-connection, style=
Aug 30 12:55:04 localhost sshd[44752]: debug2: monitor_read: 4 used once, disabling now
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: monitor_read: checking request 80
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_authrole: role=
Aug 30 12:55:04 localhost sshd[44752]: debug2: monitor_read: 80 used once, disabling now
Aug 30 12:55:04 localhost sshd[44752]: debug1: userauth-request for user root service ssh-connection method publickey [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug1: attempt 1 failures 0 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug2: input_userauth_request: try method publickey [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug1: test whether pkalg/pkblob are acceptable [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_key_allowed entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 22 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_key_allowed: waiting for MONITOR_ANS_KEYALLOWED [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive_expect entering: type 23 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: monitor_read: checking request 22
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_keyallowed entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_keyallowed: key_from_blob: 0x7f0b70e1ca10
Aug 30 12:55:04 localhost sshd[44752]: debug1: temporarily_use_uid: 0/0 (e=0/0)
Aug 30 12:55:04 localhost sshd[44752]: debug1: trying public key file /root/.ssh/authorized_keys
Aug 30 12:55:04 localhost sshd[44752]: debug1: fd 4 clearing O_NONBLOCK
Aug 30 12:55:04 localhost sshd[44752]: debug2: key_type_from_name: unknown key type '----'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing keytype
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: '---- BEGIN SSH2 PUBLIC KEY ----\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug2: key_type_from_name: unknown key type 'BEGIN'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing keytype
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: 'BEGIN SSH2 PUBLIC KEY ----\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug2: key_type_from_name: unknown key type 'Comment:'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing keytype
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: 'Comment: ""rsa-key-20170830""\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: '""rsa-key-20170830""\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: 'AAAAB3NzaC1yc2EAAAABJQAAAQEAkO9lXNIVuohGAOsCQy+NDIJv7a+a6z6ekmSp\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: ''
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: 'HfFduHAvOadeX/HDidL1696CVOHjX8fJ7ITTCaFl2ljI06lobZ2baDAsezpMhut9\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: ''
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: 'xmovTOmTJK3pOAI9E1S3Hmhum0QViFsE5oCiMHwZixLmWoeZt09ZwSZyQZAvtHTU\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: ''
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: '73bviqiky/j2xYpG+5QKyViyCEAa6KbJKnGpLw8UTf0rEBhUES9wLBt4vU3AZuQd\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: ''
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: 'evfZSr3lDBlCCdX3vyJJP8m4x3+8YMSvJSfKa9MErWpxjNE+4GMhyexNILSP+lgy\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: ''
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: '5tqWIehpSekThkJLpi0KPvGiK/bm7oXMVNLN0KdLAf/MKUzB9w==\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing whitespace
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: ''
Aug 30 12:55:04 localhost sshd[44752]: debug2: key_type_from_name: unknown key type '----'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing keytype
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: check options: '---- END SSH2 PUBLIC KEY ----\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug2: key_type_from_name: unknown key type 'END'
Aug 30 12:55:04 localhost sshd[44752]: debug3: key_read: missing keytype
Aug 30 12:55:04 localhost sshd[44752]: debug2: user_key_allowed: advance: 'END SSH2 PUBLIC KEY ----\r\n'
Aug 30 12:55:04 localhost sshd[44752]: debug2: key not found
Aug 30 12:55:04 localhost sshd[44752]: debug1: restore_uid: 0/0
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_answer_keyallowed: key 0x7f0b70e1ca10 is not allowed
Aug 30 12:55:04 localhost sshd[44752]: Failed publickey for root from 91.15.164.238 port 58557 ssh2: RSA 4c:13:08:b4:06:eb:ea:98:54:69:50:3e:cf:22:9e:da
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 23
Aug 30 12:55:04 localhost sshd[44752]: debug2: userauth_pubkey: authenticated 0 pkalg ssh-rsa [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: userauth_finish: failure partial=0 next methods=""publickey,gssapi-keyex,gssapi-with-mic,password"" [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug1: userauth-request for user root service ssh-connection method gssapi-with-mic [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug1: attempt 2 failures 1 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug2: input_userauth_request: try method gssapi-with-mic [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 42 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive_expect entering: type 43 [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering [preauth]
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_receive entering
Aug 30 12:55:04 localhost sshd[44752]: debug3: monitor_read: checking request 42
Aug 30 12:55:04 localhost sshd[44752]: debug1: Unspecified GSS failure.  Minor code may provide more information\nKey table file '/etc/krb5.keytab' not found\n
Aug 30 12:55:04 localhost sshd[44752]: debug3: mm_request_send entering: type 43
Aug 30 12:55:04 localhost sshd[44752]: debug3: userauth_finish: failure partial=0 next methods=""publickey,gssapi-keyex,gssapi-with-mic,password"" [preauth]
</code></pre>
","<p>your ssh public key is not copied to remote system. Or it got copied partially!</p>

<pre><code>Aug 30 12:55:04 localhost sshd[44752]: Failed publickey for root from 91.15.164.238 port 58557 ssh2: RSA 4c:13:08:b4:06:eb:ea:98:54:69:50:3e:cf:22:9e:da
</code></pre>

<p>This point towards it.</p>

<p>In order to avoid any error in copying SSH keys, I would recommed to use following command.</p>

<pre><code># ssh-copy-id root@myserver.example.com
OR
# ssh-copy-id -i ~/.ssh/mykey root@myserver.example.com
</code></pre>

<p>And make sure you have right ownerships in remote system.</p>

<pre><code>chown myuser:myuser -R ~/.ssh/authorized_keys
</code></pre>

<p>If it fails again, try specifying particular key while doing ssh</p>

<pre><code>ssh -i ~/.ssh/mykey_id_rsa root@myserver.example.com
</code></pre>
","771","<ssh><centos><putty><public-key>","-1","0","2","2018-11-05 20:21:42","45974447","5","","6589907","","2017-08-30 13:04:28","2017-08-30 12:58:35",""
"35070730","What Private key and public key inside Keystore file","<p>Can you tell me more clearly about public key and private key from below code::</p>

<pre><code>&gt;keytool -genkey -keyalg RSA -alias selfsigned -keystore keystore2.jks -storepass password -validity 9360 -keysize 2048

What is your first and last name?
[Unknown]: CLARK
What is the name of your organizational unit?
[Unknown]: OO
What is the name of your organization?
[Unknown]: O
What is the name of your City or Locality?
[Unknown]: JUMO
What is the name of your State or Province?
[Unknown]: TU
What is the two-letter country code for this unit?
[Unknown]: PA
Is CN=clark, OU=OO, O=O, L=jumo, ST=TU, C=PA correct?
[no]: yes

Enter key password for 
(RETURN if same as keystore password):
</code></pre>

<p>From the above example, what is the PrivateKey and what is the PublicKey?? <br>
<b>Please explain which part belongs PrivateKey and which part belongs PublicKey in above Keystore.jks file ?</b></p>
","<p>As fas as i understood that.
A keystore file can contains Keys, KeyPairs, Trusted Certificates.</p>

<p>Here keys are the SecretKey like privateKeys only.<br>
KeyPairs are the combination of PrivateKeys and Certificate(contain PublicKey).<br>
TrustedCertificate are the certificate can contains PublicKeys only.</p>

<p><em>Any more details appreciated!</em></p>
","763","<keystore><keytool><private-key><public-key>","1","0","2","2016-02-02 13:07:38","","0","","","","","2016-01-28 19:51:21",""
"35070730","What Private key and public key inside Keystore file","<p>Can you tell me more clearly about public key and private key from below code::</p>

<pre><code>&gt;keytool -genkey -keyalg RSA -alias selfsigned -keystore keystore2.jks -storepass password -validity 9360 -keysize 2048

What is your first and last name?
[Unknown]: CLARK
What is the name of your organizational unit?
[Unknown]: OO
What is the name of your organization?
[Unknown]: O
What is the name of your City or Locality?
[Unknown]: JUMO
What is the name of your State or Province?
[Unknown]: TU
What is the two-letter country code for this unit?
[Unknown]: PA
Is CN=clark, OU=OO, O=O, L=jumo, ST=TU, C=PA correct?
[no]: yes

Enter key password for 
(RETURN if same as keystore password):
</code></pre>

<p>From the above example, what is the PrivateKey and what is the PublicKey?? <br>
<b>Please explain which part belongs PrivateKey and which part belongs PublicKey in above Keystore.jks file ?</b></p>
","<p>See the Oracle documentation for <a href=""http://docs.oracle.com/javase/1.5.0/docs/tooldocs/solaris/keytool.html#CertChains"" rel=""nofollow"">keytool</a></p>
","763","<keystore><keytool><private-key><public-key>","1","0","2","2016-02-02 13:07:38","","0","","","","","2016-01-28 19:51:21",""
"4862241","NSString encryption with modulus & exponent values of a Public Key in Objective C","<p>I am quite new to Objective C development and came through the following problem:</p>

<p>I have the modulus and exponent values of a public key and need to encrypt an NSString value (password) with these values to pass it as a parameter in an API call. I tried to search the net but found no actual answer of how to do it. Can someone please help and post code if any?</p>

<p>Thanks.</p>
","","757","<objective-c><encryption><public-key><modulus><exponent>","1","","0","2011-10-21 02:59:50","","2","","","","","2011-02-01 11:58:04",""
"31342412","Can id_rsa.pub be deleted on the server?","<p>Once id_rsa.pub has been concatenated to a remote server's authorized_keys file, can id_rsa.pub be deleted? Does a copy of the file id_rsa.pub need to reside in the server's .ssh directory? If it is not needed, is it considered a best-practice to keep a copy on the server, or to delete it?</p>
","<p>I assume you mean the public key from some other computer that has been copied to the server. These are not typically stored on the server, and would be confusing to store there (I generally paste the contents directly into authorized_keys using vim, bypassing the need to copy the file).</p>
","756","<security><ssh><rsa><public-key>","0","1","1","2015-07-10 13:50:33","","3","","","","","2015-07-10 13:46:43",""
"28810612","Why is this Elgamal Digital Signature Algorithm implemented in MATLAB not working properly?","<pre><code>%%%CODE:

clc;

disp('Implementation of ELGAMAL Digital Signature');

clear all; 
close all;

%%Hardcoded values (vpi stands for VariablePrecisionIntegers, and are used to store large values)
g = vpi(5)  %alpha in example
k = vpi(9)  %Random number 1&lt;k&lt;p-1 and gcd(k, p − 1) = 1.
p = vpi(23) %Prime Number
x = vpi(3)  %Secret Key 1 &lt; x &lt; p − 1
m = vpi(7)  %Message

y = vpi(2)
r = vpi(2)
s = vpi(2)

%%Key Generation
y = powermod(g,x,p)     %y = g^x mod p  


%%Signature Generation
r = powermod(g,k,p)     %r = g^k mod p

multinver = mulinv(9,23)    %Generates multiplicative inverse k^-1 mod p

s = mod(((multinver)*(m-x*r)),p-1)      %s = (k^-1)*(m-x*r) mod p-1


%%Verification
zvg = vpi(2);
zvg = powermod (g,m,p)      %zvg = g^m mod p

zvyr = vpi(2);
zvyr = mod(((y^r)*(r^s)),p) %zvyr = y^r * r^s mod p
</code></pre>

<p>Output:</p>

<pre><code>Implementation of ELGAMAL Digital Signature  
g = 5  
k = 9  
p = 23  
x = 3  
m = 7  
y = 2  
r = 2  
s = 2  
y = 10  
r = 11  
multinver =   18  
s = 16  
zvg = 17  
zvyr = 5  
</code></pre>

<p><code>zvg</code> should be equal to <code>zvyr</code>, but it's coming out wrong.</p>
","<p>You are computing multinver wrong</p>

<p>It should be </p>

<pre><code>multinver = mulinv(k,p-1)    %Generates multiplicative inverse k^-1 mod (p-1)
</code></pre>

<p>Notice that we are computing the inverse mod (p-1) not mod (p).</p>
","753","<public-key><symmetric>","0","0","1","2015-03-02 16:07:40","","0","","","","","2015-03-02 04:01:30",""
"53924326","RSA should I use X.509 or PKCS #1","<p>Use case:
I have a use case wherein client generates private and public key , sends the base 64 encoded public key to the server.</p>

<p>On server side I will encrypt a message using this public key and send the encrypted message to client , which the client decrypts using its private key.The algorithm agreed upon is 'RSA'.</p>

<p>The problem is on server side I am seeing that certain keys are working using <code>X509EncodedKeySpec</code> as key spec</p>

<pre><code>byte[] publicBytes = Base64.decodeBase64(base64EncodedPubKey);
X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicBytes);
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PublicKey pubKey = keyFactory.generatePublic(keySpec);
</code></pre>

<p>While some keys throw exception (<code>Caused by: java.security.InvalidKeyException: IOException: algid parse error, not a sequence</code>) using <code>X509EncodedKeySpec</code> but work using <code>RSAPublicKeySpec</code>:</p>

<pre><code>byte[] publicBytes = Base64.decodeBase64(base64EncodedPubKey);
org.bouncycastle.asn1.pkcs.RSAPublicKey.RSAPublicKey pkcs1PublicKey = org.bouncycastle.asn1.pkcs.RSAPublicKey.RSAPublicKey.getInstance(publicBytes);
BigInteger modulus = pkcs1PublicKey.getModulus();
BigInteger publicExponent = pkcs1PublicKey.getPublicExponent();
RSAPublicKeySpec keySpec = new RSAPublicKeySpec(modulus, publicExponent);
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PublicKey pubKey = keyFactory.generatePublic(keySpec);
</code></pre>

<p>So, what I came to understand is that client and server need to agree whether to use:
<code>PKCS #1</code> or <code>X.509</code> for encoding the key . <strong>My question is which one is better for my use case?</strong> <strong>Any guidelines when to use which format?</strong></p>
","<p><strong>There's very little difference.</strong> The key format Java calls X.509, more exactly known as the ASN.1 structure <code>SubjectPublicKeyInfo</code> (or SPKI) defined in X.509 or equivalently and more conveniently in <a href=""https://tools.ietf.org/html/rfc5280#section-4.1"" rel=""nofollow noreferrer"">RFC5280 sec 4.1</a>, is a quite simple way to handle a large and flexible set of algorithms: it consists of a substructure <code>AlgorithmIdentifier</code> which identifies the algorithm and its parameters if applicable, then an opaque BIT STRING which contains the actual key information (encoded) in a format depending on (the algorithm identified by) the AlgorithmIdentifier. </p>

<p>For RSA, the algorithm-dependent part <em>is</em> the ASN.1 structure <code>RSAPublicKey</code> defined in PKCS1 or more conveniently <a href=""https://tools.ietf.org/html/rfc8017#appendix-A.1.1"" rel=""nofollow noreferrer"">RFC8017 appendix A.1.1</a> and its earlier versions, and duplicated in <a href=""https://tools.ietf.org/html/rfc3279#section-2.3.1"" rel=""nofollow noreferrer"">RFC3279 sec 2.3.1</a>. Thus for RSA the X.509 (SPKI) format <em>contains</em> the PKCS1 format, and since RSA doesn't have parameters (or at least key-related parameters), the only real difference is that the X.509 format explicitly specifies that the key is RSA -- which in your application you already know.</p>

<p>You have already discovered that vanilla (Oracle-was-Sun-now-OpenJDK) Java crypto, aka JCA Java Cryptographic Architecture, directly supports only the X.509 (SPKI) format, which is a minor advantage. However if you use BouncyCastle it is much easier to convert back and forth than the code in your Q; you simply use the <code>org.bouncycastle.asn1.x509.SubjectPublicKeyInfo</code> class to add or discard the AlgorithmIdentifier:</p>

<pre><code>    // test data source
    KeyStore ks = KeyStore.getInstance(""JKS""); ks.load (new FileInputStream (args[0]), args[1].toCharArray());
    byte[] spkienc = ks.getCertificate(args[2]).getPublicKey().getEncoded();
    System.out.println (DatatypeConverter.printHexBinary(spkienc));

    // extract PKCS1 part of original SPKI
    byte[] pkcs1enc = SubjectPublicKeyInfo.getInstance(spkienc).parsePublicKey().getEncoded();
    System.out.println (DatatypeConverter.printHexBinary(pkcs1enc));

    // rebuild SPKI from the PKCS1
    AlgorithmIdentifier algid = new AlgorithmIdentifier(PKCSObjectIdentifiers.rsaEncryption, DERNull.INSTANCE);
    byte[] spki2enc = new SubjectPublicKeyInfo (algid, pkcs1enc).getEncoded();
    System.out.println (DatatypeConverter.printHexBinary(spki2enc));
</code></pre>

<p>See my answer to the similar <a href=""https://stackoverflow.com/questions/49876521/golang-x509-marshalpkixpublickey-vs-x509-marshalpkcs1publickey"">golang x509.MarshalPKIXPublicKey vs x509.MarshalPKCS1PublicKey()</a> and especially the links to:<br>
<a href=""https://stackoverflow.com/questions/14052485/converting-a-public-key-in-subjectpublickeyinfo-format-to-rsapublickey-format-ja"">Converting A public key in SubjectPublicKeyInfo format to RSAPublicKey format java</a><br>
<a href=""https://stackoverflow.com/questions/7611383/generating-rsa-keys-in-pkcs1-format-in-java"">Generating RSA keys in PKCS#1 format in Java</a><br>
<a href=""https://stackoverflow.com/questions/4739662/problem-transmiting-a-rsa-public-key-javame-bouncy-castle/"">Problem transmiting a RSA public key, javaME , bouncy castle</a>  </p>

<p>If you don't have BouncyCastle, it's a little harder; you need to write a partial ASN.1 parser or generator. Full ASN.1 processing is rather complicated, but for this case you need only a small subset that isn't too bad. (Yeah, that's faint praise.) I may add this later if I have more time. </p>

<p><strong>A much bigger potential issue is that your key is not authenticated.</strong> The hard part of public key distribution, much harder than tiny format details, is making sure that <em>only</em> the legitimate key is distributed. If an attacker can substitute their publickey for the correct one, then the victim encrypts the supposedly secret data in a way the attacker can easily read, and all your fancy cryptography code is completely worthless.</p>

<p>This is why most actual systems don't distribute bare publickeys, but instead certificates that allow verifying the key is the correct key. There are a few certificate schemes, but the most widespread by far is X.509 and its Internet profile PKIX -- in fact the RFCs I referenced above, 5280 and 3279, are part of PKIX. SSL-now-TLS uses X.509. Code-signing uses X.509. S/MIME email uses X.509. (PGP/GPG uses a different kind of certificates, not X.509, but still certificates.) And (vanilla) Java directly supports X.509 certificates just as well or even better than it does ""X.509"" (SPKI) publickeys.</p>
","752","<java><public-key-encryption><public-key>","1","1","1","2018-12-30 07:39:26","","5","1","2713255","","2018-12-26 04:52:33","2018-12-25 17:27:35",""
"21772403","how to use RSA public key decrypt cipher in iOS","<p>I got a problem like title indicates.
In the app,first I generate a random number and post it to server.Server uses its own RSA private key to encrypt the random number and return the encrypt number back to me.I have the server's RSA public key kept in my local as Base64 string.The problem is how to use the server's RSA public key(all I have is a Base64 string.no PEM or DER type file) to decrypt the cipher back from server.
Need U help!</p>
","<blockquote>
  <p>how to use RSA public key decrypt cipher in iOS</p>
</blockquote>

<p>The public key is used for encryption, not decryption. More correctly, ""decrypting with the public key"" is not a valid cryptographic operation.</p>

<hr>

<blockquote>
  <p>In the app,first I generate a random number and post it to server.Server uses its own RSA private key to encrypt the random number and return the encrypt number back to me.I have the server's RSA public key kept in my local as Base64 string.</p>
</blockquote>

<p>You realize anyone can probably decrypt the secret. The public key in <code>{n,e}</code>, and most libraries pick a well known <code>e</code> (its probably 3, 17 or 65537).</p>

<hr>

<blockquote>
  <p>The problem is how to use the server's RSA public key (all I have is a Base64 string. No PEM or DER type file) to decrypt the cipher back from server. </p>
</blockquote>

<p>It sounds like you are looking for a Probabilistic Signature Scheme with Recovery (PSSR). That way, you can extract the message from the signature after verifying the message is authentic.</p>

<p>If not, you should probably use a well established protocol like IPSec or SSL/TLS to set up a secure channel and tunnel your traffic through it. Its usually a good idea to use something that's well established; and its usually a bad idea to design your own protocols.</p>
","750","<ios><rsa><public-key>","0","1","1","2014-02-15 17:39:17","21801172","0","","","","","2014-02-14 06:35:44","2014-02-20 23:14:01"
"47384721","Convert RSAPublicKey to PEM","<p>I created RSAPublicKey and RSAPrivateKey using the code below in Java. I want to convert this to PEM key with something starting with -----BEGIN PUBLIC KEY----- and ends with
-----END PUBLIC KEY-----</p>

<pre><code> KeyPairGenerator keyGenerator = KeyPairGenerator.getInstance(""RSA"");
 keyGenerator.initialize(2048);
 KeyPair keyPair = keyGenerator.genKeyPair();
 RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();
 RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate(); 
</code></pre>

<p>My publicKey looks like this</p>

<pre><code> Sun RSA public key, 2048 bits
 modulus: 24725677929965393399116311796579849208456694139830747885329642050536871708602127467509375984842143051004691282429145783432620678099378069556446495267888717074390817963266933346714989616542462975355537898417850941217923441420844383641690704416493960652901568109149478965331966323480000341094954977708922888113451561712134246092055663913101815995378690422053526513288907318201617969755234493423112606856093576711535203464948727407631244156513571088601573017696719030247683899442955936480784619914188425390154747719569488556784397642039320538767824471814998647925121013750739910552195629468326354683709340318053920864663
 public exponent: 65537
</code></pre>
","","749","<java><rsa><public-key><pem>","0","","0","2017-11-20 03:44:04","","3","","2596515","","2017-11-20 03:44:04","2017-11-20 03:34:18","2017-11-20 12:45:34"
"31698378","SSH authenticate with public key (not private key)","<p>Is it possible to connect to a server using a public key? The server holds the private key in <code>authorized_keys</code>, and the client can connect with:
<code>ssh -i id_rsa.pub server</code></p>

<p>It is the exact opposite as the usual way with public/private keys: the client keeps the public key, and the server holds the private key.</p>

<p>Now the reason: For machines being deployed to customers, I want to setup a remote connection to rescue the machines in case of problems.</p>

<ol>
<li>the machine initiates a reverse SSH connection to the rescue server: connect using the public key (the same on all the machines: <code>ssh -i id_rsa.pub -NR 64000:localhost:22 rescue@server</code>)</li>
<li>the machine opens a channel, but cannot execute commands (prompt <code>/bin/false</code>)</li>
<li>on the server, do a SSH to the machine through the open channel and authenticate with the private key (the usual way: <code>ssh -i id_rsa -p 64000 localhost</code>).</li>
</ol>
","<p>You can't use keys to authenticate in opposite order of private/public, because of the way how asymmetric cryptography works.</p>

<p>The alternative solution for you can be to use openssh certificates as described in manual pages and many how-to's.</p>
","739","<linux><authentication><ssh><public-key>","0","1","1","2015-07-29 11:57:15","31699040","2","0","2196426","","2015-07-29 11:57:15","2015-07-29 10:51:22",""
"22126118","Extensions for Private and Public Key","<p><strong>Clarify me out here,</strong>
I need to save RSA Private and Public key in Server's local Directory and I did it via getting <strong><em>Encoded bytes</em></strong> from the Keys. There is <em>file extension part</em>, when i searched some of 'em told that there is no need for extension for the key file and some of 'em are tell that public and private key should be of .der and .pem file formats respectively. So, help me out here to understand the differences. And i'm using <strong><em>Javax.Crypto API.</em></strong></p>
","<p>The file extension is simply a conventional way of distinguishing types of files: .pdf for PDF files, .html for HTML files, etc. You can use whatever extension you want (or no extension at all) to store whatever you like. It has no impact on what the file contains. </p>

<p>So if this file is only relevant to your own application, use whatever name and extension you like. You could use .pdf or .html if you wanted to and it wouldn't change anything (except it would be confusing).</p>
","739","<java><rsa><private-key><public-key><encryption-asymmetric>","1","1","1","2014-03-02 10:04:10","22126204","0","","","","","2014-03-02 09:54:20",""
"5988897","Git push fails within GNU screen","<p>I can push just fine to my GitHub repo from my VPS, but once I enter a screen, I get permission denied:</p>

<pre><code>littke@[server]:~/src/[repo]$ git push
Pushing to git@github.com:littke/[repo].git
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>Even though I'm able to auth:</p>

<pre><code>littke@[server}:~/src/[repo]$ ssh git@github.com -i ~/.ssh/littke 
Enter passphrase for key '/home/littke/.ssh/littke':
PTY allocation request failed on channel 0
Hi littke! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<p>Again, this only happens when inside a GNU Screen. I can push fine outside of it. I've googled but unable to find anything.</p>
","<p><code>-i</code> is forcing ssh to use a different key.  When you try to use git, ssh doesn't know about that key.  Try using the default key name instead, or <code>ssh-add</code> the key so ssh knows about it.</p>
","734","<git><github><public-key><gnu-screen>","7","3","3","2017-11-14 15:50:09","5989070","0","1","1000551","","2017-11-14 15:50:09","2011-05-13 07:54:32",""
"5988897","Git push fails within GNU screen","<p>I can push just fine to my GitHub repo from my VPS, but once I enter a screen, I get permission denied:</p>

<pre><code>littke@[server]:~/src/[repo]$ git push
Pushing to git@github.com:littke/[repo].git
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>Even though I'm able to auth:</p>

<pre><code>littke@[server}:~/src/[repo]$ ssh git@github.com -i ~/.ssh/littke 
Enter passphrase for key '/home/littke/.ssh/littke':
PTY allocation request failed on channel 0
Hi littke! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<p>Again, this only happens when inside a GNU Screen. I can push fine outside of it. I've googled but unable to find anything.</p>
","<p>You're using a different identity file with ssh (the -i option) than git uses.  You must tell git which identity to use, through your config.  See github's <a href=""http://help.github.com/troubleshooting-ssh/"" rel=""nofollow"">Troubleshooting SSH issues</a>, section ""SSH config"":</p>

<blockquote>
  <p>Create or open the file at
  ~/.ssh/config Add the following lines:</p>

<pre><code>Host github.com
  User git
  Hostname github.com
  PreferredAuthentications publickey
  IdentityFile [local path]
</code></pre>
</blockquote>
","734","<git><github><public-key><gnu-screen>","7","3","3","2017-11-14 15:50:09","5989070","0","1","1000551","","2017-11-14 15:50:09","2011-05-13 07:54:32",""
"5988897","Git push fails within GNU screen","<p>I can push just fine to my GitHub repo from my VPS, but once I enter a screen, I get permission denied:</p>

<pre><code>littke@[server]:~/src/[repo]$ git push
Pushing to git@github.com:littke/[repo].git
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>Even though I'm able to auth:</p>

<pre><code>littke@[server}:~/src/[repo]$ ssh git@github.com -i ~/.ssh/littke 
Enter passphrase for key '/home/littke/.ssh/littke':
PTY allocation request failed on channel 0
Hi littke! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<p>Again, this only happens when inside a GNU Screen. I can push fine outside of it. I've googled but unable to find anything.</p>
","<p>Some extra bits need to be set up to get SSH agent-forwarding working within screen.  Take a look at <a href=""https://superuser.com/questions/180148/how-do-you-get-screen-to-automatically-connect-to-the-current-ssh-agent-when-re-a"">How do you get screen to automatically connect to the current ssh-agent when re-attaching to an existing screen?</a> for details on this.</p>
","734","<git><github><public-key><gnu-screen>","7","2","3","2017-11-14 15:50:09","5989070","0","1","1000551","","2017-11-14 15:50:09","2011-05-13 07:54:32",""
"43296285","Extending Expiration dates of gnupg keys with the private key residing on a smart card","<p>I had setup a working smart card setup, where the local key ring solely contained public subkeys and secret keys resided on a smart card.</p>

<p>Conservatively I set the expiration date to 1 year.</p>

<p>Setup worked nicely and as the keys approached there expiration date, I proceeded as follows to attempt to extend their expiration date:</p>

<ol>
<li><p>Kill running <code>gpg-agent</code>:</p>

<pre><code>pkill gpg-agent
</code></pre></li>
<li><p>Import offline master key (backup):</p>

<pre><code>gpg --import &lt;KEYID&gt;.master.key
</code></pre></li>
<li><p>Edit expiry of subkeys (pubkey):</p>

<pre><code>gpg --expert --edit-key &lt;KEYID&gt;
</code></pre>

<ul>
<li><code>toggle</code> keys 1, 2, 3 (sign, encrypt, authentication) </li>
<li><code>expire</code>: 1y</li>
<li><code>save</code></li>
</ul></li>
<li><p>Remove secret master keys:</p>

<pre><code>gpg --delete-secret-keys &lt;KEYID&gt;
</code></pre></li>
</ol>

<p>As a result the keys remain unavailable (expired?) to all means I intent to use them with (kmail/kgpg/kleopatra, evolution/seahorse, etc.).</p>

<p>Where did I go wrong and how may I recover?</p>
","<p>As evident from the comments above, I noted, that the secret keys were (no longer?) listed by <code>gpg --list-secret-keys</code>.</p>

<p>That was remedied by explicitly querying the reader-inserted smart card using <code>gpg --card-status</code>, followed by a now successful <code>gpg --list-secret-keys</code>.</p>

<p>After having pointed <code>evolution</code> at the now available secret key and removing the smart card from its reader, the mail client now (again) asks for insertion of the card when requesting signatures/encryption.</p>

<p>Works again. considered solved.</p>
","725","<public-key-encryption><gnupg><public-key>","2","1","1","2018-12-01 15:14:57","43319757","2","1","","","","2017-04-08 16:02:42",""
"33996561","Connection closed with public key","<p>I have some troubles with public key in SSH.</p>

<p>I want to connect a client A to a server B in SSH, without passphrase. 
I've 2 users in each machine: root and mysql.</p>

<p>The ssh connection by public key from A to B with root is okay.
Now, I want to do the same thing with the user mysql, but it doesn't work.</p>

<p>I created a key on A with this command:</p>

<pre><code>ssh-keygen -t rsa
</code></pre>

<p>Then, I copy the key from ~/.ssh/id_rsa.pub (Machine A,user mysql) and paste it on ~/.ssh/authorized_keys (Machine B,user mysql).</p>

<p>When I try, from machine A, user mysql to connect  on machine B by ssh like this:</p>

<pre><code>ssh machineB
</code></pre>

<p>I got the following issue:</p>

<p>Connection closed by [ip address of machine B]</p>

<p>I did the ssh -vvv machineB and had:</p>

<pre><code>debug1: Authentications that can continue: publickey,gssapi-with-mic,password
debug3: start over, passed a different list publickey,gssapi-with-mic,password
debug3: preferred gssapi-with-mic,publickey,keyboard-interactive,password
debug3: authmethod_lookup gssapi-with-mic
debug3: remaining preferred: publickey,keyboard-interactive,password
debug3: authmethod_is_enabled gssapi-with-mic
debug1: Next authentication method: gssapi-with-mic
debug3: Trying to reverse map address xx.xxx.xxx.xxx
debug1: Unspecified GSS failure. Minor code may provide more information
Unknown code krb5 195

debug1: Unspecified GSS failure. Minor code may provide more information Unknown code krb5 195

debug1: Unspecified GSS failure. Minor code may provide more information Unknown code krb5 195

debug2: we did not send a packet, disable method
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /home/mysql/.ssh/identity
debug3: no such identity: /home/mysql/.ssh/identity
debug1: Offering public key: /home/mysql/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
Connection closed by machineB IP addr
</code></pre>

<p>Permissions on machine A:</p>

<pre><code>drwx------  2 mysql mysql  4096 Nov 30 11:31 .
drwxr-xr-x 79 mysql mysql 28672 Nov 30 14:08 ..
-rw-------  1 mysql mysql   407 Oct  9  2009 authorized_keys
-rw-------  1 mysql mysql   668 Nov 24 16:18 id_dsa
-rw-r--r--  1 mysql mysql   608 Nov 24 16:18 id_dsa.pub
-rw-------  1 mysql mysql  1675 Nov 30 10:08 id_rsa
-rwx------  1 mysql mysql  1675 May 25  2010 id_rsa.archive
-rw-r--r--  1 mysql mysql   400 Nov 30 10:08 id_rsa.pub
-rwxrwxr-x  1 mysql mysql   400 May 25  2010 id_rsa.pub.archive
-rwxrwxr-x  1 mysql mysql  8068 Nov  6 09:20 known_hosts
</code></pre>

<p>Permissions on machine B:</p>

<pre><code>drwx------  2 mysql mysql  4096 Nov 30 11:47 .
drwxr-xr-x 25 mysql apache 4096 Nov 30 12:13 ..
-rw-------  1 mysql mysql  1424 Nov 30 10:10 authorized_keys
-rw-r--r--  1 mysql mysql  3128 Jun  1  2011 known_hosts
</code></pre>
","<p>I had the same issue. Interestingly I was able to log in via <code>ssh &lt;username&gt;@&lt;hostname&gt; -p &lt;port&gt;</code> I checked into logs as suggested by Clempat in <code>/var/log/auth.log</code> where I found this:</p>

<pre><code>Sep 20 10:31:45 vbndx-VirtualBox sshd[3559]: Invalid user vega.bondx from 10.0.2.2 port 52637
</code></pre>

<p>It seems that my ssh config file was set up such as the global option</p>

<pre><code>   Host *
   User vega.bondx
</code></pre>

<p>precedes </p>

<pre><code>   Host virt
   User vegabondx 
</code></pre>

<p>from <a href=""https://superuser.com/questions/718346/openssh-ssh-config-host-specific-overrides-not-working"">this</a> I realized that the order is important. and the Host * option should be at the end.  </p>
","718","<linux><ssh><public-key>","0","0","1","2019-09-20 14:43:00","","9","","4158785","","2015-11-30 13:12:25","2015-11-30 10:36:43",""
"34532567","SSH server key verification: How to avoid 2 different key fingerprint formats?","<p>During the 1st SSH connection with a new Linux server (Ubuntu), I am presented with a key fingerprint in a format such as:</p>

<pre><code>ECDSA key fingerprint is SHA256:Dvj5iH81LekYL2qA6VY1NkzXTB1TSkH+yc3kVclgGBc.
Are you sure you want to continue connecting (yes/no)? yes
</code></pre>

<p>When I then want to compare this fingerprint with the fingerprint I can generate myself, I use</p>

<pre><code>ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub
</code></pre>

<p>Unfortunately, this outputs the fingerprint in a different format, such as:</p>

<pre><code>256 b1:53:22:1c:71:5e:11:f1:6c:a0:97:78:42:17:1b:b0  root@Ubuntu-1404-trusty-64-minimal (ECDSA)
</code></pre>

<p>How do I make sure I get the same format in both cases, so I can compare easily?</p>
","<p>This is recent change in <a href=""http://www.openssh.com/txt/release-6.8"" rel=""nofollow"">openssh-6.8</a>, because all we know that md5 is broken and we should start using something more recent. But the transition is not so smooth so you should be aware of the new option <code>FingerprintHash</code>. You can store in your <code>ssh_config</code> or just provide on command-line when you connect to the server:</p>

<pre><code>ssh -o FingerprintHash=md5 server
</code></pre>

<p>You can't get SHA256 fingerprint of your server key, because the server has probably old version of openssh and does not support this so far.</p>
","714","<authentication><ssh><public-key>","-2","1","2","2016-03-21 14:33:59","34533332","0","1","290580","","2015-12-30 15:55:45","2015-12-30 15:42:59",""
"34532567","SSH server key verification: How to avoid 2 different key fingerprint formats?","<p>During the 1st SSH connection with a new Linux server (Ubuntu), I am presented with a key fingerprint in a format such as:</p>

<pre><code>ECDSA key fingerprint is SHA256:Dvj5iH81LekYL2qA6VY1NkzXTB1TSkH+yc3kVclgGBc.
Are you sure you want to continue connecting (yes/no)? yes
</code></pre>

<p>When I then want to compare this fingerprint with the fingerprint I can generate myself, I use</p>

<pre><code>ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub
</code></pre>

<p>Unfortunately, this outputs the fingerprint in a different format, such as:</p>

<pre><code>256 b1:53:22:1c:71:5e:11:f1:6c:a0:97:78:42:17:1b:b0  root@Ubuntu-1404-trusty-64-minimal (ECDSA)
</code></pre>

<p>How do I make sure I get the same format in both cases, so I can compare easily?</p>
","<p>The answer of Jakuje will allow you to compare hashes, but it forces you to keep on using MD5 hashes for verification. MD5 has been shown vulnerable to collision attacks, making it a poor choice for fingerprint verification.</p>

<p>A more secure approach is to generate the SHA256 fingerprint on the server by hand. You can do this by typing:</p>

<pre><code>awk '{print $2}' /etc/ssh/ssh_host_ecdsa_key.pub | base64 -d | sha256sum | awk '{print $1}' | xxd -r -p | base64 | rev | cut -c 2- | rev
</code></pre>

<p>Using this approach, you can verify the fingerprint while reaping the full benefits of using SHA256 fingerprints. I wrote a more extensive version of this answer on <a href=""https://whatsecurity.nl/verifying_ssh_fingerprints_in_new_form.html"" rel=""nofollow"">https://whatsecurity.nl/verifying_ssh_fingerprints_in_new_form.html</a>.</p>
","714","<authentication><ssh><public-key>","-2","2","2","2016-03-21 14:33:59","34533332","0","1","290580","","2015-12-30 15:55:45","2015-12-30 15:42:59",""
"44296530","how to get the username of a public key file","<p>With a regex (bash, perl, python or ruby), how do you extract the username from a RSA public key pem file.</p>
","<p>I did</p>

<pre><code>  # given a public key, extra username
  def extract_public_key_username(key)
    username_with_at_sign = key.split("" "")[2]
    username_with_at_sign.split(""@"")[0]
  end
</code></pre>

<p>seems to work</p>
","712","<regex><ssh><rsa><public-key><pem>","-1","0","1","2017-06-01 00:23:07","","1","","","","","2017-06-01 00:12:29",""
"12246362","Looking for Signing algorithm that creates 32 or 16 byte keys in Java","<p>Cannot match up the size of key generated using public/private keys for licensing application. Ive written a self contained example that creates public/private key, create a license by signing user emailaddress with public key, and then check using public key, license and email address that the license indeed was encoded using private key (Obviously this wouldn't all be in one class usually).</p>

<p>This all works but the hex version of the license key is 96 characters (i.e representing 48 bytes/384 bits) which  is a little longer than I wanted (In contrast the length of public/private keys is not a problem and the longer the better). What could I use to generate a 32 (64 hex chars) byte or maybe 16 byte (32 hex chars), and would the security of this be reasonable ?</p>

<p>Picking another algorithm is somewhat hard as I do not understand the the interaction between the algorithm picked for generating the keys</p>

<pre><code>KeyPairGenerator.getInstance(""DSA"");
</code></pre>

<p>and the algorithm for signing</p>

<pre><code>Signature.getInstance(""SHA/DSA"");
</code></pre>

<p>and I cant find a list for either.</p>

<p>One other point when I generate a public/private key pairs I specify key size of</p>

<pre><code>keyGen.initialize(1024, new SecureRandom());
</code></pre>

<p>yet neither the public key (443 bytes) or the private key (335 bytes) or the sum of both (778 bytes) match this number.</p>

<pre><code>import org.apache.commons.codec.binary.Hex;

import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

/**
 *
 */
public class CreateLicense
{

    private String PUBLIC_KEY;
    private String PRIVATE_KEY;

    public static void main(final String[] args)
    {
        try
        {
            String email = args[0];
            System.out.println(""Creating license for:""+email);
            CreateLicense cl = new CreateLicense();
            cl.generatePublicPrivateKeyPair();
            String license = cl.createLicense(email);
            cl.checkLicense(email, license);

        }
        catch(Throwable t)
        {
            t.printStackTrace();
        }
    }

    //Would only be done once on server
    private void generatePublicPrivateKeyPair() throws Exception
    {
        final KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DSA"");
        keyGen.initialize(1024, new SecureRandom());
        final KeyPair pair = keyGen.generateKeyPair();
        PrivateKey privateKey = pair.getPrivate();
        PRIVATE_KEY=Hex.encodeHexString(privateKey.getEncoded());
        PublicKey  publicKey = pair.getPublic();
        PUBLIC_KEY=Hex.encodeHexString(publicKey.getEncoded());
        System.out.println(""PrivateKeyHexLength:""+privateKey.getEncoded().length);
        System.out.println(""PublicKeyHexLength:""+publicKey.getEncoded().length);

    }

    private PrivateKey reinflatePrivateKey(String keyAsHexString) throws Exception
    {
        byte[] keyBytes = Hex.decodeHex(keyAsHexString.toCharArray());
        final  PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(keyBytes);
        final  KeyFactory keyFactory = KeyFactory.getInstance(""DSA"");
        final  PrivateKey privateKey = keyFactory.generatePrivate(privKeySpec);
        return privateKey;
    }

    private PublicKey reinflatePublicKey(String keyAsHexString) throws Exception
    {
        byte[] keyBytes = Hex.decodeHex(keyAsHexString.toCharArray());
        final  X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(keyBytes);
        final  KeyFactory keyFactory = KeyFactory.getInstance(""DSA"");
        final  PublicKey publicKey = keyFactory.generatePublic(pubKeySpec);
        return publicKey;
    }

    //License Create on server based on email address
    private String createLicense(String emailAddress) throws Exception
    {
        String message=emailAddress;
        PrivateKey privateKey =  reinflatePrivateKey(PRIVATE_KEY);
        final Signature dsa = Signature.getInstance(""SHA/DSA"");
        dsa.initSign(privateKey);
        dsa.update(message.getBytes());
        final byte[] m1 = dsa.sign();
        String license =  Hex.encodeHexString(m1);
        System.out.println(""CreateLicense:""+license+"":Size:""+license.length());
        return license;
    }

    //Client checks that given known emailaddress and public key that a if a license was derived from
    //that and corresponding privatekey it would match license.
    private boolean checkLicense(String  emailAddress, String license) throws Exception
    {
        String message=emailAddress;
        PublicKey publicKey =  reinflatePublicKey(PUBLIC_KEY);
        final Signature dsa = Signature.getInstance(""SHA/DSA"");
        dsa.initVerify(publicKey);
        dsa.update(message.getBytes());

        boolean result = dsa.verify(Hex.decodeHex(license.toCharArray()));
        System.out.println(""Result""+result);
        return result;
    }
}
</code></pre>

<p>gives output like</p>

<pre><code>Creating license for:testuser@nowhere.com
PrivateKeyHexLength:335
PublicKeyHexLength:443
CreateLicense:302c021425f7ad7289b073f82a1d808838f43e0134c5591402140d2a7a4e3967706d4659dc73ace6455040a5fc6b:Size:92
Resulttrue
</code></pre>
","<p>@Paul - I think your solution here would be to use ECDSA.
Change your line of code </p>

<pre><code>final KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DSA"");
</code></pre>

<p>to</p>

<pre><code>final KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""ECDSA"");
</code></pre>

<p>The keys are much shorter than DSA - and I'm sure hex version signature would be shorter. I suggest you use a prime ECC curve of say 256 or 128 bits.</p>

<p>Please let us know if this solves the problem.</p>
","707","<java><licensing><sha><public-key><dsa>","0","0","1","2013-02-26 16:44:11","","0","","1480018","","2012-09-03 10:59:03","2012-09-03 10:49:45",""
"44099175","how to verify digital signature with public key - python","<p>i'm trying to verfy signature of file and i was given a message.txt(data) and message.txt.sign(which i assume that is the signature) i also given the public key(publickey.pem) now i wrote a code in python using pycharm and inspired by this code:</p>

<pre><code>def verify_sign(public_key_loc, signature, data):
    '''
    Verifies with a public key from whom the data came that it was indeed 
    signed by their private key
    param: public_key_loc Path to public key
    param: signature String signature to be verified
    return: Boolean. True if the signature is valid; False otherwise. 
    '''
    from Crypto.PublicKey import RSA 
    from Crypto.Signature import PKCS1_v1_5 
    from Crypto.Hash import SHA256 
    from base64 import b64decode 
    pub_key = open(public_key_loc, ""r"").read() 
    rsakey = RSA.importKey(pub_key) 
    signer = PKCS1_v1_5.new(rsakey) 
    digest = SHA256.new() 
    # Assumes the data is base64 encoded to begin with
    digest.update(b64decode(data)) 
    if signer.verify(digest, b64decode(signature)):
        return True
    return False
</code></pre>

<p>it dosent work for me  , any help please?!</p>
","","700","<python-2.7><pycharm><md5><public-key>","1","","0","2017-05-21 16:25:24","","1","0","","","","2017-05-21 16:25:24",""
"31409720","Using Bitcoin-ruby to make a transaction","<p>I originally posted this question on the bitcoin stack but was told I may have better luck reposting it here. </p>

<p>I am having trouble with the bitcoin-ruby gem. I get the following error when trying to send money to another address I have on the test network:</p>

<blockquote>
  <p>/var/lib/gems/2.2.0/gems/bitcoin-ruby-0.0.7/lib/bitcoin/protocol/txout.rb:76:in
  <code>pk_script=': undefined method</code>bytesize' for nil:NilClass
  (NoMethodError)</p>
</blockquote>

<p>I am generating a private key with:</p>

<pre><code>def new_address
 Bitcoin::generate_address
end
</code></pre>

<p>And getting details for the private key with:</p>

<pre><code>def key_details(prikey, pubkey)
  #returns prikey, prikey_hash58, pubkey_hash58, pubkey_uncompressed, address as a hash
  my_key = Bitcoin::Key.new(prikey, pubkey)
  { prikey:prikey, 
    prikey_base58:my_key.to_base58, 
    pubkey_58:my_key.hash160, 
    pubkey: my_key.pub_uncompressed, 
    address:my_key.addr
  }
end
</code></pre>

<p>The code I have to send money to myself is as follows: </p>

<pre><code>require 'bitcoin'
require_relative 'utilities.rb'
require 'open-uri'

Bitcoin.network = :testnet3

def build_transaction(prev_tx, prev_out_index, key, value, addr, message)
  include Bitcoin::Builder

  new_tx = build_tx do |t|
    t.input do |i|
      i.prev_out prev_tx
      i.prev_out_index prev_out_index
      i.signature_key key
    end
    t.output do |o|
      o.value value 
      o.script {|s| s.type :address; s.recipient addr }
    end
  end
end

def prev_tx(prev_hash, network)
  if network == ""testnet3""
    prev_tx = Bitcoin::P::Tx.from_json(open(""http://test.webbtc.com/tx/#{prev_hash}.json""))
  else
    prev_tx = Bitcoin::P::Tx.from_json(open(""http://webbtc.com/tx/#{prev_hash}.json""))
  end
end

def key(publ_key, priv_key)
  key = Bitcoin::Key.new(priv_key, publ_key)
end

def bin_to_hex(s)
  s.unpack('H*').first
end

#transaction inputs
priv_key = ""private_key""
publ_key = ""public_key_long_format""
address = ""address""
previous_tx = ""previous_tx_hash""

# generate tx info off inputs
key = Bitcoin::Key.new(priv_key, publ_key)
prev_tx = prev_tx(previous_tx, ""testnet3"")
prev_out_index = 1
tx_value = prev_tx.outputs[prev_out_index].value

# build new tx
tx = build_transaction(prev_tx, prev_out_index, key, tx_value, address, ""hello"")

#
# puts tx.to_json
puts bin_to_hex(tx.to_payload)
</code></pre>

<p>Does anyone know how to solve this error?</p>
","<p>It turned out to be a couple of issues. Here is what I learned along the way:</p>

<p>The tx json data that is used to build the prev_tx object needs to have a output value as a string. Some sites use a number instead.</p>

<p>The key object sometimes doesn't form correctly. For whatever reason, I have an address which can only be generated using the private key with Bitcoin::Key.new. If you supply a private and public key the address associated with the key object is wrong. For different addresses, this isn't the case. So it is important to check the address of the key object after generating the object. </p>

<p>It is also important to make sure the addresses / keys generated on testnet3 are only used with one another. I had a situation where I thought I generated a testnet3 private key, but didn't. Thus, the testnet3 tx wasn't working. And vice versa for the normal bitcoin network.</p>

<p>Lastly, it's very important to verify the output address position. It is usually 0 or 1, but this isn't always the case...</p>
","693","<ruby><private-key><bitcoin><public-key>","0","0","1","2015-08-18 10:27:40","","3","0","","","","2015-07-14 14:36:48",""
"10878622","iOS RSA Public Key send to server","<p>I have generated RSA Key pairs using SecKeyGeneratePair method and using those keys I can able to do the encryption/decryption, digital signature and do the verification in iOS application.</p>

<p>Now the challenge is I need to send the public key(SecKeyRef) to Java server as a base64string format, in java I have to reconstruct the public key using iOS string(base64). </p>

<p>I have converted SecKeyRef to NSData to base64string(always getting same string) while transferring it to server.  Using base64string I am not able to reconstruct the public key in Java. I have mentioned below the used code for generating RSA Public and Private keys.</p>

<pre><code>static const UInt8 publicKeyIdentifier[] =  ""com.apple.sample.publickey\0"";
static const UInt8 privateKeyIdentifier[]= ""com.apple.sample.privatekey\0"";


- (void)generateKeyPairPlease{

OSStatus status = noErr;
publicKeyBits=nil;
NSMutableDictionary *privateKeyAttr = [[NSMutableDictionary alloc] init];
NSMutableDictionary *publicKeyAttr = [[NSMutableDictionary alloc] init];
NSMutableDictionary *keyPairAttr = [[NSMutableDictionary alloc] init];

publicTag = [NSData dataWithBytes:publicKeyIdentifier length:strlen((const char *)publicKeyIdentifier)];

privateTag = [NSData dataWithBytes:privateKeyIdentifier length:strlen((const char *)privateKeyIdentifier)];
publicKey = NULL;
privateKey = NULL;


[keyPairAttr setObject:(__bridge id)kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];

[keyPairAttr setObject:[NSNumber numberWithInt:1024] forKey:(__bridge id)kSecAttrKeySizeInBits];

[privateKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecAttrIsPermanent];

[privateKeyAttr setObject:privateTag forKey:(__bridge id)kSecAttrApplicationTag];

[publicKeyAttr setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecAttrIsPermanent];

[publicKeyAttr setObject:publicTag forKey:(__bridge id)kSecAttrApplicationTag];

[keyPairAttr setObject:privateKeyAttr forKey:(__bridge id)kSecPrivateKeyAttrs];

[keyPairAttr setObject:publicKeyAttr forKey:(__bridge id)kSecPublicKeyAttrs];

status = SecKeyGeneratePair((__bridge CFDictionaryRef)keyPairAttr,&amp;publicKey, &amp;privateKey);

}


- (NSData *)getPublicKeyBits {
OSStatus sanityCheck = noErr;

CFDataRef keyBits;

NSMutableDictionary * queryPublicKey = [[NSMutableDictionary alloc] init];

// Set the public key query dictionary.
[queryPublicKey setObject:(__bridge id)kSecClassKey forKey:(__bridge id)kSecClass];
[queryPublicKey setObject:publicTag forKey:(__bridge id)kSecAttrApplicationTag];
[queryPublicKey setObject:(__bridge id)kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];
[queryPublicKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge id)kSecReturnData];

// Get the key bits.
sanityCheck = SecItemCopyMatching((__bridge CFDictionaryRef)queryPublicKey, (CFTypeRef *)&amp;keyBits);
publicKeyBits =(__bridge_transfer NSData*)keyBits; 

if (sanityCheck != noErr)
{
publicKeyBits = nil;
}

NSLog(@""Bits are %@"",publicKeyBits);

return publicKeyBits;//every time I am getting same data here
}
</code></pre>
","","690","<java><ios><objective-c><rsa><public-key>","4","","0","2017-09-08 10:41:30","","1","","1000551","","2017-09-08 10:41:30","2012-06-04 08:49:36","2013-04-19 08:10:49"
"37139904","Multiple computers with same ssh Private and Public keys","<p>I have about 12 computers with exactly same specs. These are used for my PoS on my business.</p>

<p>I am creating a customized Ubuntu ISO to improve installation time and automate things.</p>

<p>One issue I am facing is OpenSSH-server generated keys (Pub and private), must be generated after installation through command <code>ssh-keygen</code> ...</p>

<p>However, I have to pass explicit and plain-text password, which I would like to avoid.</p>

<p>I would like to know if I can share same private and public keys to everyone, so that I can remote connect on them?
In this way, I can generate keys only once and seed it through post-script installation using pressed.</p>
","<blockquote>
  <p>One issue I am facing is OpenSSH-server generated keys (Pub and private), must be generated after installation through command ssh-keygen...</p>
</blockquote>

<p>They are generated after the installation for a reason. And that reason is certainly that they should not go to anyone else (from there is the <strong>private</strong> word). But they are <strong>Host</strong> keys.</p>

<blockquote>
  <p>However, I have to pass explicit and plain-text password, which I would like to avoid.</p>
</blockquote>

<p>Why? You can store your public key on them and you would be still able to connect with your private key, which will be still safe.</p>

<blockquote>
  <p>I would like to know if I can share same private and public keys to everyone, so that I can remote connect on them? In this way, I can generate keys only once and seed it through post-script installation using preseed.</p>
</blockquote>

<p>You can, but it is certainly not advised and fail-prone technique possibly leading to the compromised security.</p>
","674","<ssh><private-key><public-key><openssh>","0","0","1","2016-05-10 18:22:44","","0","","2196426","","2016-05-10 18:22:44","2016-05-10 13:24:02",""
"43764363","How to set up custom subdomain mapping to aws codecommit?","<p>Say, I own mydomain.com and I also host this domain in Route 53. I want to set up a subdomain, say, git.mydomain.com pointing to codecommit host. For example, git.mydomain.com => git-codecommit.us-west-2.amazonaws.com</p>

<p>I created a CNAME record in Route 53 to do that. I think DNS did pick up the change. </p>

<pre><code>Trying ""git.mydomain.com""
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 8020
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;git.mydomain.com.      IN  ANY

;; ANSWER SECTION:
git.mydomain.com.   41  IN  CNAME   git-codecommit.us-west-2.amazonaws.com.
</code></pre>

<p>However, when I try to clone the reop by running </p>

<blockquote>
  <p>git clone ssh://git.mydomain.com/v1/repos/reponame</p>
</blockquote>

<p>, I keep getting </p>

<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
</code></pre>

<p>It works when I just do </p>

<blockquote>
  <p>git clone
  ssh://git-codecommit.us-west-2.amazonaws.com/v1/repos/reponame</p>
</blockquote>

<p>Do anyone know how to set this up properly? </p>

<p>Thank you very much. </p>
","<p>If you have this issue, try adding the following to your ssh configuration</p>

<pre><code>Host git.yourdomain.com
  User {iam ssh user key id} 
  IdentityFile path/to/id_file
</code></pre>

<p>In my case, ssh agent didn't pick up from default location so I had to specify it in the configuration. </p>
","673","<git><amazon-web-services><ssh><public-key><aws-codecommit>","3","1","2","2017-08-27 23:09:16","43789000","2","1","","","","2017-05-03 15:32:22",""
"43764363","How to set up custom subdomain mapping to aws codecommit?","<p>Say, I own mydomain.com and I also host this domain in Route 53. I want to set up a subdomain, say, git.mydomain.com pointing to codecommit host. For example, git.mydomain.com => git-codecommit.us-west-2.amazonaws.com</p>

<p>I created a CNAME record in Route 53 to do that. I think DNS did pick up the change. </p>

<pre><code>Trying ""git.mydomain.com""
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 8020
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;git.mydomain.com.      IN  ANY

;; ANSWER SECTION:
git.mydomain.com.   41  IN  CNAME   git-codecommit.us-west-2.amazonaws.com.
</code></pre>

<p>However, when I try to clone the reop by running </p>

<blockquote>
  <p>git clone ssh://git.mydomain.com/v1/repos/reponame</p>
</blockquote>

<p>, I keep getting </p>

<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
</code></pre>

<p>It works when I just do </p>

<blockquote>
  <p>git clone
  ssh://git-codecommit.us-west-2.amazonaws.com/v1/repos/reponame</p>
</blockquote>

<p>Do anyone know how to set this up properly? </p>

<p>Thank you very much. </p>
","<p>The SSL certificate of git-codecommit.us-west-2.amazonaws.com does not list your domain. Therefore you cannot use a CNAME where SSL is required, like for SSH or HTTPS. What you are attempting will only work for HTTP connections, or TCP connections that do not require TLS.
See this answer <a href=""https://stackoverflow.com/questions/9294215/why-isn-t-it-possible-to-use-a-cname-redirect-with-https"">Why isn’t it possible to use a CNAME&#160;redirect with HTTPS</a> for more information.</p>
","673","<git><amazon-web-services><ssh><public-key><aws-codecommit>","3","0","2","2017-08-27 23:09:16","43789000","2","1","","","","2017-05-03 15:32:22",""
"9712865","Log4Net 1.2.10 public key conflict","<p>I have an app that uses both NHibernate and Crystal Reports, NHibernate.dll reference Log4Net 1.2.10.0 (PublicKeyToken=aa95f207798dfdb4)</p>

<p>After upgrading Crystal to ver 13.0.2000 we now have a problem, crystaldecisions.shared.dll now references Log4Net 1.2.10.0 as well, but it seems that the good folk at Crystal Decisions have made the ""interesting"" decision to recompile 1.2.10.0 leaving the version number the same, but giving it a <strong><em>new public key</em></strong> (692fbea5521e1304) and installed it into the GAC.</p>

<p>So my question is...How to install these log4net assemblies side by side? or trick one of the other assemblies (NHibernate or Crystal) into using the other one.</p>
","<p>You should be able to install the standard log4net into the GAC as well.  This will allow both versions to be loaded by the assembly loader.  Alternately you could recompile NHibernate to use the version crystal does, but you'd have to do that from now on moving forward, so I wouldn't recommend it.</p>
","672","<nhibernate><crystal-reports><log4net><public-key>","1","1","1","2012-03-15 20:14:03","9712920","0","","","","","2012-03-15 01:39:45",""
"35500484","Can I use public key to generate private key?","<p>I am using OpenSSL to generate private key.
Currently, I have public key on hand, can I generate private key according the public key by using OpenSSL.</p>

<p>Thanks in advance.</p>
","<p>No, and with good reason.</p>

<p>If you could do this a private key would no longer be private because everybody would be able to generate it based on a public key and everybody would be able to sign any document with the generated private key, pretending to be the issuer of the public key.</p>
","672","<openssl><private-key><public-key>","0","1","1","2016-02-19 08:30:29","","2","","","","","2016-02-19 08:18:35",""
"24644661","extract modulus and exponent from public key xml in python","<p>I have a public key xml string in the form</p>

<pre><code>&lt;RSAPublicKey&gt; &lt;Modulus&gt;ANG9SxVyOA8IX9mRi5Q6sH/z04fvrsLLrAf3ooAGRiETNB1TZfZ/ZWhpw9RLYPcf3J+kaqQneHEMS9OGuIYxa0rUwVYtKjSjRp8y+XNm3sODNqD4zPjqMh6wThOug5Gg/M1+ZXlkXvszmAwiXlImDqp2nH+ZFVnrREVZ1U7WKUc5&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAPublicKey&gt;.
</code></pre>

<p>How do I extract the modulus out from this xml string in Python? e.g. i should get <code>ANG9SxVyOA8IX9mRi5Q6sH/z04fvrsLLrAf3ooAGRiETNB1TZfZ/ZWhpw9RLYPcf3J+kaqQneHEMS9OGuIYxa0rUwVYtKjSjRp8y+XNm3sODNqD4zPjqMh6wThOug5Gg/M1+ZXlkXvszmAwiXlImDqp2nH+ZFVnrREVZ1U7WKUc5</code> after the operation.</p>

<p>Thanks in advance!</p>
","<p>you can use Element tree. </p>

<pre><code>import xml.etree.ElementTree as ET
root = ET.ElementTree(file=""yourxml.xml"")
RSAPublicKey = root.findall(""./RSAPublicKey"") # this search all RSAPublickey
for item in RSAPublicKey :
    Modulus= item .findall(""./Modulus"") #in rsapublic key modulus
    print Modulus
</code></pre>
","664","<python><xml><rsa><public-key><modulus>","0","1","1","2014-07-09 03:22:19","24644880","1","","","","","2014-07-09 02:51:42",""
"33415723","Using .crt instead of a .p12","<p>I am trying to make a connection via my Android client to my server. The server is HTTPS. To make the client connect to the server I used a client.key and client.crt that was signed via the same CA .crt file as the server and converted to a .p12 format. The client is supposed to have the private key and public key. But the client shouldn't have the server private key. The only way to get Android to work is to load in a p12 file from the server into the <code>TrustManagerFactory</code>. But this is not the right way since the private key from the server is inside that file. The <code>TrustManagerFactory</code> doesn't allow me to load in a .crt file.</p>

<p>My question is: How do I load a .crt file into <code>KeyStore</code> instead of the p12 I am using now. Or do I need to use something else then the <code>KeyStore</code>.</p>
","<p><a href=""https://developer.android.com/training/articles/security-ssl.html"" rel=""nofollow"" title=""Directly from google dev guide working solution for ya"">Directly from google dev guide working solution for ya:</a></p>

<pre><code>// Load CAs from an InputStream
// (could be from a resource or ByteArrayInputStream or ...)
CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
// From https://www.washington.edu/itconnect/security/ca/load-der.crt
InputStream caInput = new BufferedInputStream(new FileInputStream(""load-der.crt""));
Certificate ca;
try {
    ca = cf.generateCertificate(caInput);
    System.out.println(""ca="" + ((X509Certificate) ca).getSubjectDN());
} finally {
    caInput.close();
}

// Create a KeyStore containing our trusted CAs
String keyStoreType = KeyStore.getDefaultType();
KeyStore keyStore = KeyStore.getInstance(keyStoreType);
keyStore.load(null, null);
keyStore.setCertificateEntry(""ca"", ca);

// Create a TrustManager that trusts the CAs in our KeyStore
String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();
TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);
tmf.init(keyStore);

// Create an SSLContext that uses our TrustManager
SSLContext context = SSLContext.getInstance(""TLS"");
context.init(null, tmf.getTrustManagers(), null);

// Tell the URLConnection to use a SocketFactory from our SSLContext
URL url = new URL(""https://certs.cac.washington.edu/CAtest/"");
HttpsURLConnection urlConnection =
    (HttpsURLConnection)url.openConnection();
urlConnection.setSSLSocketFactory(context.getSocketFactory());
InputStream in = urlConnection.getInputStream();
copyInputStreamToOutputStream(in, System.out);
</code></pre>
","663","<android><ssl><ssl-certificate><private-key><public-key>","0","1","1","2015-10-29 15:49:29","33418878","3","3","","","","2015-10-29 13:34:34",""
"29312538","Recover a signed message using public/private key","<p>I have generated public and private keys using the following commands:</p>

<ul>
<li><code>openssl genrsa -out D:\opensslkeys\privatekey1.pem 1024</code></li>
<li><code>openssl pkcs8 -topk8 -inform PEM -outform DER -in  D:\opensslkeys\privatekey1.pem -out D:\opensslkeys\privatekey1.der -nocrypt</code></li>
<li><code>openssl rsa -in D:\opensslkeys\privatekey1.pem -pubout -outform DER -out D:\opensslkeys\publickey1.der</code></li>
</ul>

<p>Then I wrote a Java program to sign a message and then verify it, which worked:</p>

<pre><code>    String message = ""Hello world"";
    File privateKey = new File(""privatekey.der"");
    KeyPair keyPair = readKeyPair(privateKey, ""happy"".toCharArray());
    PrivateKey privkey= PrivateKeyReader.get(""privatekey.der"");
    Signature signature = Signature.getInstance(""SHA256WithRSA"");
    signature.initSign(privkey);
    signature.update(message.getBytes());
    byte [] signatureBytes=new byte[512];    
    signatureBytes= signature.sign();
    PublicKey pubk=PublicKeyReader.get(""publickey.der"");
    byte[] encodedPublicKey1=pubk.getEncoded();

    Signature verifier = Signature.getInstance(""SHA256WithRSA"");
    verifier.initVerify(pubk);
    verifier.update(message.getBytes());

    if (verifier.verify(signatureBytes)) {
        System.out.println(""Signature is valid"");
    } else {
        System.out.println(""Signature is invalid"");
    }
</code></pre>

<p>But after verifying I need to recover the message. Please explain how to do it.</p>
","<p>You already have the message.</p>

<p>You can't 'recover' it from the signature, if that's what you're referring to. A signature is not an encryption.</p>
","663","<java><encryption><bouncycastle><private-key><public-key>","2","0","2","2015-03-28 02:05:55","","1","","4486839","","2015-03-28 01:57:21","2015-03-28 01:13:39",""
"29312538","Recover a signed message using public/private key","<p>I have generated public and private keys using the following commands:</p>

<ul>
<li><code>openssl genrsa -out D:\opensslkeys\privatekey1.pem 1024</code></li>
<li><code>openssl pkcs8 -topk8 -inform PEM -outform DER -in  D:\opensslkeys\privatekey1.pem -out D:\opensslkeys\privatekey1.der -nocrypt</code></li>
<li><code>openssl rsa -in D:\opensslkeys\privatekey1.pem -pubout -outform DER -out D:\opensslkeys\publickey1.der</code></li>
</ul>

<p>Then I wrote a Java program to sign a message and then verify it, which worked:</p>

<pre><code>    String message = ""Hello world"";
    File privateKey = new File(""privatekey.der"");
    KeyPair keyPair = readKeyPair(privateKey, ""happy"".toCharArray());
    PrivateKey privkey= PrivateKeyReader.get(""privatekey.der"");
    Signature signature = Signature.getInstance(""SHA256WithRSA"");
    signature.initSign(privkey);
    signature.update(message.getBytes());
    byte [] signatureBytes=new byte[512];    
    signatureBytes= signature.sign();
    PublicKey pubk=PublicKeyReader.get(""publickey.der"");
    byte[] encodedPublicKey1=pubk.getEncoded();

    Signature verifier = Signature.getInstance(""SHA256WithRSA"");
    verifier.initVerify(pubk);
    verifier.update(message.getBytes());

    if (verifier.verify(signatureBytes)) {
        System.out.println(""Signature is valid"");
    } else {
        System.out.println(""Signature is invalid"");
    }
</code></pre>

<p>But after verifying I need to recover the message. Please explain how to do it.</p>
","<p>Signing a message does not make it unreadable, so there is no ""recovery"" step required. The signature is a little bit of extra data that may be in the same file or may be stored separately. The signature allows the reader of the message to verify who wrote the message (via the public key that validates the signature) and that the message has not been altered.</p>

<p>If you want to give someone your signed message, you give them the clear-text message and the signature. They can then use your public key to validate the signature. The signature is based on a digest of the message and your private key. The validation step computes the digest of the message and validates the signature of the digest with the public key. If either the public key doesn't correspond to the private key used in the signature, or if the message digest doesn't match, then the signature is detected as invalid.</p>

<p>A related operation would by to encrypt a message. This definitely makes the message unreadable. The encryption would be with a public key and only the holder of the associated private key would be able to decrypt the message.</p>
","663","<java><encryption><bouncycastle><private-key><public-key>","2","2","2","2015-03-28 02:05:55","","1","","4486839","","2015-03-28 01:57:21","2015-03-28 01:13:39",""
"37606189","How can I convert DSA public key from OpenSSL to OpenSSH format in PHP?","<p>I have been using RSA keys with in my application. I have used the following code to convert RSA key from OpenSSL to OpenSSH format. It worked perfectly for RSA key. Now I want to support DSA keys. But my conversion code doesn't work for DSA keys. What modification do I need to make it to work with DSA keys?</p>

<pre><code>$private_key = openssl_pkey_get_private($rsaKey);
$public_key  = sshEncodePublicKey($private_key);

echo ""RSA public key in OpenSSH format:\n$pubKey\n\n"";

function sshEncodePublicKey($privKey)
{
    $keyInfo = openssl_pkey_get_details($privKey);

    $buffer  = pack(""N"", 7) . ""ssh-rsa"" . 
               sshEncodeBuffer($keyInfo['rsa']['e']) . 
               sshEncodeBuffer($keyInfo['rsa']['n']);

    return ""ssh-rsa "" . base64_encode($buffer); 
}

function sshEncodeBuffer($buffer)
{
    $len = strlen($buffer);
    if (ord($buffer[0]) &amp; 0x80) {
        $len++;
        $buffer = ""\x00"" . $buffer;
    }

    return pack(""Na*"", $len, $buffer);
}
</code></pre>
","<p>The definition of a dsa key is fundamentally different from that of rsa keys. There ist no 'exponent' (the number you're accessing with <code>$keyInfo['rsa']['e']</code> and no <code>n</code>.
Because your code parses the key and reencodes it, this won't succeed with dsa keys. Instead, <code>openssl_pkey_get_details</code> gives you a completely different array of elements, as specified in <a href=""http://php.net/manual/en/function.openssl-pkey-get-details.php"" rel=""nofollow"">the manual</a>.</p>

<p>To convert this, use the following code:</p>

<pre><code>function sshEncodePublicKey($privKey)
{
    $keyInfo = openssl_pkey_get_details($privKey);

    $buffer  = pack(""N"", 7) . ""ssh-dss"" .
               sshEncodeBuffer($keyInfo['dsa']['p']) .
               sshEncodeBuffer($keyInfo['dsa']['q']) .
               sshEncodeBuffer($keyInfo['dsa']['g']) .
               sshEncodeBuffer($keyInfo['dsa']['pub_key']);

    return ""ssh-dss "" . base64_encode($buffer);
}
</code></pre>

<p>Of course, your code should decide which type of key it is, but I think i can leave this to you.</p>

<p>Please also note that PHP has the function <a href=""http://php.net/manual/en/function.openssl-pkey-get-public.php"" rel=""nofollow"">openssl_pkey_get_public</a>, which is more suitable. I used this to test the above code (I simply replaced your first 4 lines with <code>$public_key  = sshEncodePublicKey(openssl_pkey_get_public('file://ssl.pub'));</code></p>
","656","<php><openssl><public-key><openssh><dsa>","3","2","1","2016-06-03 09:20:44","37610559","0","1","","","","2016-06-03 04:52:18",""
"29632624","Maven release plugin not using configured username","<p>I am using maven-release-plugin:2.5.1.  I need to configure it to connect to SVN using public/private key authentication.  I'm having problems getting the configuration to use the correct username when attempting the SSH connection to SVN.</p>

<p>My deploy-settings.xml <code>&lt;server&gt;</code> config looks like:</p>

<pre><code>&lt;server&gt;
  &lt;id&gt;my.server.org&lt;/id&gt;
  &lt;username&gt;[XXXX]&lt;/username&gt;
  &lt;privateKey&gt;/home/[YYYY]/.ssh/id_rsa&lt;/privateKey&gt;
&lt;/server&gt;
</code></pre>

<p>My pom.xml <code>&lt;scm&gt;</code> config looks like:</p>

<pre><code>scm:svn:svn+ssh://my.server.org/data1/svns_zzzz/zzzz/path/to/the/project/trunk
</code></pre>

<p>My <code>mvn</code> command line looks like:</p>

<pre><code>--batch-mode  release:clean release:prepare release:perform  
-s /home/[YYYY]/.m2/deploy-settings.xml 
-Dsettings.security=/home/[YYYY]/.m2/master-settings.xml 
</code></pre>

<p>When I tried the above configuration it failed.  It could not commit the modified POM file to SVN.  To help debug this problem, I set the following environment variable:</p>

<pre><code>SVN_SSH=""ssh -vvv""
</code></pre>

<p>When I did this, I saw in the debug statements too many authentication failures with a username other than the <code>[XXXX]</code> username defined in the <code>&lt;server&gt;</code> tag.</p>

<p>So then I tried to specify the username in the command line:</p>

<pre><code>--batch-mode -Dusername=[XXXX] release:clean release:prepare release:perform...
</code></pre>

<p>That didn't work.</p>

<p>So then I tried to specify the username in the POM:</p>

<pre><code>scm:svn:svn+ssh://[XXXX]@my.server.org/data1/svns_zzzz/zzzz/path/to/the/project/trunk
</code></pre>

<p>That didn't work either.</p>

<p>To debug and verify my <code>[XXXX]</code> username and <code>/home/[YYYY]/.ssh/id_rsa</code> key did in fact work, I added them to the environment variable:</p>

<pre><code>SVN_SSH=""ssh -vvv -l [XXXX] -i /home/[YYYY]/.ssh/id_rsa""
</code></pre>

<p>After setting the environment variable like this, it worked.  The release plugin was able to successfully commit the modified POM file to SVN.  So I know the username and password work.  </p>

<p>So now the question is what is wrong with my Maven configuration?  Setting the SVN_SSH environment variable helped diagnose the problem, and provides a work-around but I don't want to leave it as a long-term solution.</p>

<p>Any thoughts?</p>
","<p>The release plugin forks the build, and doesn't pass the arguments you provide on the command line to the forked process by default.  Try adding this: <code>-Darguments=""-s /home/[YYYY]/.m2/deploy-settings.xml -Dsettings.security=/home/[YYYY]/.m2/master-settings.xml""</code> (note double quotes) to the current command line.  This should pass the changes to the forked processes.</p>
","650","<maven><svn><ssh><maven-release-plugin><public-key>","0","0","1","2015-04-14 20:40:38","","2","","","","","2015-04-14 16:28:16",""
"37862983","SSH auth failed : Permission denied (publickey)","<p>I have a particular context. I want to bind Jenkins to Git. Jenkins is running on Tomcat and I use a Docker container to run Git Server (<a href=""https://hub.docker.com/r/unixtastic/git-ssh-server"" rel=""nofollow"">https://hub.docker.com/r/unixtastic/git-ssh-server</a>)</p>

<p>The trouble is that Jenkins fails to connect to Git. So, in order to identify the trouble shoot, I first try to connect to Git Server throw ssh in command line :</p>

<pre><code>$ ssh git@172.17.0.2
</code></pre>

<p>Connection succeed and I can log to Git Server. But it does with login/password. But I would like to do it with public key.</p>

<p>So when I disable login/password login in Git Server sshd_config file, now login fails unless I think my config is right :</p>

<ol>
<li>I created a pair of keys with ssh-keygen. This keys are located on the client in /home/git/.ssh</li>
<li>I copied the public key on the Git Server under git user's home : /git/.ssh/authorized_keys</li>
<li>The server public key is well copied in client user's known_hosts file after try to login</li>
</ol>

<p>But unfortunately, login fails with the full message :</p>

<pre><code>OpenSSH_7.2p2 Ubuntu-4ubuntu1, OpenSSL 1.0.2g-fips  1 Mar 2016
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug1: Connecting to 172.17.0.2 [172.17.0.2] port 22.
debug1: Connection established.
debug1: identity file /home/git/.ssh/id_rsa type 1
debug1: key_load_public: No such file or directory
debug1: identity file /home/git/.ssh/id_rsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu1
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.7
debug1: match: OpenSSH_6.6.1p1 Ubuntu-2ubuntu2.7 pat OpenSSH_6.6.1* compat 0x04000000
debug1: Authenticating to 172.17.0.2:22 as 'git'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: algorithm: curve25519-sha256@libssh.org
debug1: kex: host key algorithm: ssh-rsa
debug1: kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug1: kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ssh-rsa SHA256:103879AadyMX3oJAuSWHR74aQhBaZIg3yb95v6/FyeI
debug1: Host '172.17.0.2' is known and matches the RSA host key.
debug1: Found key in /home/git/.ssh/known_hosts:1
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /home/git/.ssh/id_rsa
debug1: Authentications that can continue: publickey
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>
","","645","<git><jenkins><ssh><public-key>","0","","0","2016-06-16 15:26:15","","3","","2170827","","2016-06-16 15:26:15","2016-06-16 15:08:01",""
"16915971","SSH RFC User authentication Message SSH_MSG_USERAUTH_REQUEST","<p>I'm working on some proprietary development on SSH protocol.</p>

<p>I want one clarification on message SSH_MSG_USERAUTH_REQUEST</p>

<p>As per RFC 4252, client can send this below message to server to just verify the whether publickey would be acceptable or not. </p>

<p>byte SSH_MSG_USERAUTH_REQUEST
string user name in ISO-10646 UTF-8 encoding [RFC3629]
string service name in US-ASCII
string ""publickey""
boolean FALSE
string public key algorithm name
string public key blob</p>

<p>Once above message is replied properly by server with SSH_MSG_USERAUTH_PK_OK. </p>

<p>Then client sends actual authentication message described below. </p>

<p>byte SSH_MSG_USERAUTH_REQUEST
string user name
string service name
string ""publickey""
boolean TRUE
string public key algorithm name
string public key to be used for authentication
<strong>string signature</strong> :This extra than first message</p>

<p>Now I can see first message (without signature) contains publickey blob. 
Should I verify the blob in first message or I should always skip that and do verification only during actual authentication message ?</p>

<p>I'm asking this because I have implemented my code like it does verification on both messages. But whenever i'm trying test against OpenSSH, it fails on first message for authentication but always get passed with second message. However i have debugged and found out OpenSSH is not sending same publickey blob in both message. so my question is why OpenSSH is doing so ? </p>

<p>Is OpenSSH is properly following RFC then seems like i should skip verifying publickey blob in first message. if i do that , am i not breaking the RFC ? doing that is right or not ?</p>

<p>Please help me to resolve this query. 
Please let me know if more information is required. 
Thanks in advance. </p>
","<pre><code>&gt; Now I can see first message (without signature) contains publickey blob. 
&gt; Should I verify the blob in first message or I should always skip that and
&gt; do verification only during actual authentication message ?
</code></pre>

<p>It is not clear what you mean ""verify"" for the first message,
but, for that message, sshd will just check if the given publickey blob exists in <strong>~/.ssh/authorized_keys</strong> file.  If it exists in that file, ssh client will receive SSH_MSG_USERAUTH_PK_OK .</p>

<pre><code>&gt; However i have debugged and found out OpenSSH is not sending same publickey
&gt; blob in both message. so my question is why OpenSSH is doing so ?
</code></pre>

<p>I had implemented a ssh client in Java from scratch, but I had not recognized such OpenSSH behaviors.</p>
","634","<ssh><public-key-encryption><ssh-keys><public-key>","0","0","1","2013-06-04 12:19:24","","0","","","","","2013-06-04 10:52:28",""
"10247796","Best approach to pass the public key from client to server","<p>I have a tcp server and using cms/pkcs#7 to secure the message passed between the client and server. Would it be normal practice to pass the clients public key to the server, as part of initial session? As its the public key, when the session starts up, the initial clp command, would pass the key, along with other salient details that the server needs to know about the client. It's the public, so it doesn't need to be encrypted, it public.</p>

<p>The client/server communication is secured with ssl/tls. </p>

<p>Thanks.
 Bob.</p>
","<p>Don't you trust SSL/TLS or why do you encrypt again within the secure channel? That only makes sense if the server will pass the message on to other nodes and it will be decrypted somewhere else, thereby creating end-to-end security.</p>

<p>In any case, you should not have the client pass just the public key to the server. Instead it should pass a <em>certificate</em> to the server, which should authenticate the client based on a signature made with the private key matching the public key contained in the certificate. Also, the server will need to check the certificate itself (is it from a trusted CA, do the signatures in the chain verify, etc.).</p>

<p>If you can, you should do all this on the SSL/TLS layer by using SSL/TLS mutual authentication (client cert authentication). If you cannot, then make sure you design a secure application layer protocol for authenticating the client and it's public key. Otherwise it may be possible to impersonate other clients.</p>
","634","<c#-4.0><tcpclient><public-key><pki><tcpserver>","0","1","1","2012-04-20 14:30:06","10248210","0","","89521","","2012-04-20 14:15:11","2012-04-20 14:02:07",""
"14991887","how to get public key with Crypt_RSA","<p>I have coded a simple test, but it sent me: ""Unverified"", I guess because I am using the whole certificate instead of the public key. What method gives me public key?</p>

<pre><code>$rsa = new Crypt_RSA();
$rsa-&gt;setPassword('here I include password');
$rsa-&gt;loadKey(file_get_contents('i.pem')); // private key
$plaintext = 'abc';
$rsa-&gt;setSignatureMode(CRYPT_RSA_SIGNATURE_PKCS1);
$signature = $rsa-&gt;sign($plaintext);
//now the verification
$rsa-&gt;loadKey(file_get_contents('instancia_ope.crt')); //here maybe WRONG
echo $rsa-&gt;verify($plaintext, $signature) ? 'Verified' : 'Unverified';
</code></pre>
","<p>Ah sorry your verifying, try this</p>

<pre><code>$rsa-&gt;loadKey($rsa-&gt;getPublicKey()); 
echo $rsa-&gt;verify($plaintext, $signature) ? 'Verified' : 'Unverified';
</code></pre>
","627","<php><public-key><crypt><phpseclib>","1","1","1","2013-02-21 14:29:26","","5","1","569976","","2013-02-21 14:29:26","2013-02-20 23:29:59",""
"30441435","RSA decrypt on android lollipop","<p>I have an error with decryption with RSA.
The code works on android 4.4 kit kat, but the same app doesn't work on android 5.0 lollipop.</p>

<pre><code>KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
RSAPublicKeySpec pubKeySpec = new RSAPublicKeySpec(new BigInteger(modulusBytes), new BigInteger(exponentBytes));
RSAPublicKey publicKey = (RSAPublicKey) keyFactory.generatePublic(pubKeySpec);

byte[] decrypted = null;
try {
    // get an RSA cipher object and print the provider
    final Cipher cipher = Cipher.getInstance(""RSA/None/NoPadding"");

    // decrypt the text using the public key
    cipher.init(Cipher.DECRYPT_MODE, publicKey);
    decrypted = cipher.doFinal(area_fissa_byte);

} catch (Exception ex) {
    ex.printStackTrace();
    Log.d(""error"",""error"");
}
</code></pre>

<p>The error is: <strong>java.security.SignatureException: error:04067084:rsa routines:RSA_EAY_PUBLIC_DECRYPT:data too large for modulus</strong>.</p>

<p>My sdk target is:</p>

<p><code>&lt;uses-sdk
android:minSdkVersion=""14""
android:targetSdkVersion=""19"" /&gt;</code> for android 4.4</p>

<p>Do you know what is the problem?</p>

<p><strong>EDIT:</strong>
i notice that i have 2 different public keys with different lengths!!!
Android 5: i have 382/383 bit (too small)
Android 4.4: i have 384 bit (ok)</p>

<p><strong>EDIT2:</strong>
i found that there are differences with android 5.0 for TLS/SSL: <a href=""https://developer.android.com/about/versions/android-5.0-changes.html"" rel=""nofollow"">https://developer.android.com/about/versions/android-5.0-changes.html</a>
But i don't know how to fix the problem. </p>
","<p>One bug is how you created the RSAPublicKeySpec:</p>

<p><code>new RSAPublicKeySpec(new BigInteger(modulusBytes), new BigInteger(exponentBytes));</code></p>

<p>In case the first bit of the modulusBytes or exponentBytes is one the number will be interpreted as negative value.</p>

<p>When you work with RSA numbers and BigInteger always use the constructor <code>BigInteger (int signum, byte[] magnitude)</code> with <code>signum=1</code> for specifying that the number is positive:</p>

<p><code>new RSAPublicKeySpec(new BigInteger(1, modulusBytes), new BigInteger(1, exponentBytes));</code></p>
","626","<ssl><rsa><android-5.0-lollipop><android-4.4-kitkat><public-key>","7","1","1","2015-05-28 15:23:54","30510804","2","5","3968314","","2015-05-28 13:43:11","2015-05-25 15:18:23",""
"11239501","Which decryption uses a binary public key with variable length?","<p>I have a program which is obviously decrypting its data with a public, binary key of variable length.</p>

<p>I came to these facts by doing some more or less educated guesses:</p>

<ul>
<li>Reverse Engineering revealed that the program needs the name of a file including a public key</li>
<li>Viewing this file in a hex editor shows totally random binary data (with no interesting pattern or anything), prefixed with the length of the file - in one version the file is only 200 bytes long, in another about 2000 bytes.</li>
<li>Thinking about the security, I guess the programs company encrypts the data files with a private key so that noone can create their own data files (which would fit the programs needs - no ""modding"" should be allowed nor the data be shown in third party programs).</li>
<li>The data files are prefixed with a human readable 64 byte long header, the rest is again completely random binary data.</li>
</ul>

<p>I'd like to use the same system for my own program, if such thing is available.
Is there an encryption method capable of asymmetric encryption / decryption with a binary key of variable length, if yes, which one and how can I implement such thing?</p>
","<p>That's not the way to proceed. You can use a fixed length key for variable length data. As asymmetric crypto is pretty slow, the usual method is to generate a random symmetric secret key (say, a 128 bit AES key) and encrypt the data using e.g. CBC. Then the symmetric key is encrypted by an asymmetric public key, say RSA 2048 bits. Decryption means decrypting the secret key using the private key, then decrypting the data with the data specific secret key.</p>

<p>If you don't know how to do this you can use a library capable of creating CMS (cryptographic message syntax) to perform this scheme.</p>

<p>Note: a 2000 byte asymmetric key pair would take forever to encrypt something, even if you could create a key pair of that size.</p>
","616","<encryption><public-key><private-key>","0","1","1","2019-04-16 18:44:50","11253452","1","","777985","","2019-04-16 18:44:50","2012-06-28 06:58:09",""
"7455894","How to transfer files from an amazon EC2 linux vps to a windows 7 home pc","<p>Ok i have spent atleast a week trying to get this solved, looked all over and I see alot of solutions... Problem is none of them work for me. I have a linux EC2 instance from amazon.com. I want to move some files from that vps to my computer... I am currently connecting to it from Putty but i have tried Filezilla and alot of other things like that. When I use the command </p>

<p><code>scp root@ip-xx-xx-xx-xx:/home/ec2-user/filefolder/folder-i-want-to-transfer C:/</code>  </p>

<p>I get the following:</p>

<pre><code>The authenticity of host 'ip-xx-xx-xx-xx (xx.xx.xx.xx)' can't be established.
RSA key fingerprint is xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added 'ip-xx-xx-xx-xx,xx.xx.xx.xx' (RSA) to the list of known hosts.
Permission denied (publickey).
</code></pre>

<p>Please help if you could.</p>
","<p>I see two possible problems:</p>

<ol>
<li>You've disabled root logins via ssh.</li>
<li>You're using a key that you don't want to.</li>
</ol>

<p>I won't tell you how to solve the first; create another user account and transfer the files via that account instead.</p>

<p>For the second, you need to tell your tool to not use any key whatsoever.</p>

<pre><code>scp -i NUL: ...
scp -i /dev/null ...
</code></pre>

<p>You should then be able to log in using the account's password.</p>
","615","<linux><ftp><amazon-ec2><vps><public-key>","0","0","1","2011-09-17 16:25:37","","2","","153430","","2011-09-17 16:10:20","2011-09-17 15:37:27",""
"27137930","Need proper syntax for using public key generated by PuTTYgen in GCE","<p>I am trying to connect to Google VM via PuTTY and can't seem to add the public key properly. </p>

<p>I have followed instructions on as per:<br>
<a href=""https://cloud.google.com/compute/docs/console#sshkeys"" rel=""nofollow"">https://cloud.google.com/compute/docs/console#sshkeys</a></p>

<p>However, I seem to have pasted the key incorrectly. </p>

<p>My PuTTY key is generated as </p>

<pre><code>---- BEGIN SSH2 PUBLIC KEY ----
Comment: ""rsa-key-20141121""
AAAAB3NzaC1yc2EAAAABJQAAAQEAklz2lupNnZFPXTRivb8ba4JB90YLc7qZh05d
OcFq9WqRuUNTu2f0fgC49FEEx9aCCWOrGZS/CWpoKmHd1Q4pEfHFJ/EOWB1ZOpNh
LnIT/HZT6aOLBXZg3aoyrL9BXyh3eWnUA8qOZDa/Jl4vt1alPO6XsYzfl7YUs+m7
GcUnTgvwxn+beCXuLZbDlVP/tco6UKSx4Rj0uVkwdsgstCs2b0lnx2o+vabVI+28
WHqsORahZMdSL8yXiFJ+pPye8wkolmicvfVJU0mqflhsmC0w2TJ4AGnkHOG9OjwJ
EaekMA89w7Of9W/WXE94zAj8LeYn2LMEYkKQHu+EJ902gfaLiw==
---- END SSH2 PUBLIC KEY ----
</code></pre>

<p>Can anyone post the key in the correct format as per the link I have mentioned above:</p>

<pre><code>protocol publickey username
</code></pre>

<p>I am not clear which is which in this case e.g should I include the quotes in rsa-key as well as the number 20141121 ?</p>

<p>I am messing up on the syntax so details would be appreciated as I am already able to SSH using Google Clouds tools and also able to connect using PuTTY but fail at authentication.</p>
","<ul>
<li>Load your key to <a href=""https://the.earth.li/~sgtatham/putty/latest/htmldoc/Chapter8.html#pubkey-puttygen"" rel=""nofollow noreferrer"">PuTTYgen</a>;</li>
<li>To the <em>Key comment</em> box, enter you GCE username &ndash; this should be your Google account with symbols replaced by an underscore (<code>_</code>) everything after <code>@</code> ignored. Or specify any other account name you want to be created.</li>
<li>And see the box <a href=""https://the.earth.li/~sgtatham/putty/latest/htmldoc/Chapter8.html#puttygen-pastekey"" rel=""nofollow noreferrer""><em>Public key for pasting into OpenSSH authorized_keys file</em></a>.</li>
</ul>

<p>For details, see (my) guide <a href=""https://winscp.net/eng/docs/guide_google_compute_engine"" rel=""nofollow noreferrer"">Connecting Securely to Google Compute Engine Server with SFTP</a> with WinSCP.</p>

<p>Example (not your key):</p>

<p><img src=""https://i.stack.imgur.com/IFqYH.png"" alt=""PuTTYgen""></p>

<p>I.e. the format you need to paste to the <code>authorized_keys</code> file is very different to the format, you see when you open the key file in a text editor.</p>

<p>Also the format you have included in your message is not the PuTTY key format, it's the ssh.com format. Which is completely irrelevant to your setup (PuTTY client and OpenSSH server).</p>
","611","<ssh><putty><google-compute-engine><public-key><google-cloud-platform>","0","1","1","2019-06-10 13:55:59","27143851","1","1","850848","","2014-12-01 07:44:24","2014-11-25 22:25:09",""
"27722862","Encrypting MongoDB password","<p>I'm using spring's mongo template to access my db,
I was wondering if it is possible to encrypt asymmetrically the password usage such that i'll provide the DB the one key, and I'll have the other.
(Encrypt only the authentication part, not the whole connection/data)</p>

<p>Thanks</p>
","<p>Sounds like you want x.509 authentication. Help on getting that setup is a little too broad for a single stack overflow question. There are various guides you can find with a Google search and for the nitty gritty details of what is happening under the hood and common issues I wrote a long <a href=""http://www.allanbank.com/blog/security/tls/x.509/2014/10/13/tls-x509-and-mongodb/"" rel=""nofollow"">blog post</a>.</p>

<p>If you really don't want the encryption of the ""whole connection"" (and I would strongly encourage you to reconsider that since it is basically free) you can use on the NULL cipher suites with the SSL connection. Configuring the client to offer only NULL cipher suites (and getting the server to accept them) will, again, require more details on your specific setup.</p>

<p>HTH - Rob</p>

<p>P.S. Just to be clear the authentication messages in SSL are done ""in the clear"". The contents of the messages contain portions that are asymmetrically encrypted (challenges and pre-master secret) but the bulk of the handshake exchanges are in the clear.</p>
","609","<spring><mongodb><public-key><encryption-asymmetric>","0","1","1","2014-12-31 16:19:31","","0","","","","","2014-12-31 15:09:26",""
"37456243","ssh access by public key failed ""Permission denied (publickey)""","<p>I wanted to set up crontab to fetch resources from remote server to local server.</p>

<p>Steps used as below</p>

<p>In local server
 1. ssh-keygen with no passphrase
 2. copied the pubic key over to the server using SCP</p>

<p>In the remote server</p>

<ol>
<li>cat id_rsa.pub >> ~/.ssh/authorized_keys</li>
<li>edited .ssh config file sudo nano /etc/ssh/sshd_config as below  </li>
<li>RSAAuthentication yes</li>
<li>PubkeyAuthentication yes</li>
<li>ChallengeResponseAuthentication yes</li>
<li>PasswordAuthentication no</li>
<li>UsePam no</li>
<li>reload ssh by sudo /etc/init.d/ssh reload</li>
<li>sudo chmod 700 .ssh</li>
<li>cd .ssh </li>
<li>sudo chmod 600 authorized_keys</li>
</ol>

<p>After all this configuration, neither I am able to access remote server by public key or normal login credential into remote server.</p>

<p>If I tried to login through PuTTy asked for my login after has been entered. Its says ""Disconnected: No supported authentication methods availble (server send: publickey)""</p>

<p>If I tried to login through SSH from local server ssh sana@127.168.1.1 it says ""Permission denied (publickey)""</p>

<p>Server Details:
Ubuntu 14.04
I set up public key with another user not with root user.</p>

<p>Thanks in advance for all the support.</p>
","<p>try </p>

<pre><code>chmod 444 ~/.ssh/authorized_keys
</code></pre>

<p>the file should be only accessible to read and it should be accessible to read by your user.
And make sure that authorized_keys file is in the sana user home directory</p>
","605","<ssh><server><ubuntu-14.04><public-key>","0","0","1","2019-07-22 05:25:08","","2","","","","","2016-05-26 09:03:57",""
"42021809","Decryption using Public Key in Python","<p>The question is asked repeatedly, but I am unable to get work done so posting again.
I am shared a public key file, which is in format of </p>

<blockquote>
  <p>-----BEGIN CERTIFICATE----- XXXXXXXXXXXXXXXXXXXXXXX -----END CERTIFICATE-----</p>
</blockquote>

<p>Using this file, in PHP I am able to perform decryption and obtain decoded message using <code>openssl_public_decrypt()</code>. Now I am trying to perform decryption process in Python. I have tried with: </p>

<pre><code>Crypto - gives 'valueerror: rsa key format is not supported' when RSA.importKey() is called.
</code></pre>

<p><code>python-rsa</code> and <code>M2Crypto</code> also didn't help.</p>

<p>For <code>M2Crypto</code> I referred this <a href=""http://www.php2python.com/wiki/function.openssl-public-encrypt/"" rel=""nofollow noreferrer"">link</a>, but <code>RSA.load_pub_key_bio(bio)</code> line of code gives error.</p>

<p>Any help is really appreciated. Thank you.</p>
","<p>You can do this with the <a href=""https://cryptography.io/en/latest/"" rel=""nofollow noreferrer"">cryptography</a> library's hazmat layer (note that cryptography is now the back-end library used by pyOpenSSL; while pyOpenSSL is convenient for some uses, cryptography provides a much more complete OpenSSL binding as well as useful higher-level (safer, better) cryptographic primitives and bindings to other cryptographic libraries as well).  Before you do, note that it's very easy to shoot yourself in the foot with the hazmat layer and the cryptography team won't apologize if you do.</p>

<p>You should be sure you understand what's going with these operations before you rely on the code to provide any kind of security.  Also, if you control the full stack - from encryption to decryption - <em>stop</em> doing it this way.  Use something like PGP instead.</p>

<pre><code>&gt;&gt;&gt; from cryptography.hazmat.backends import default_backend
&gt;&gt;&gt; from cryptography.hazmat.primitives import serialization
&gt;&gt;&gt; with open(""key.pem"") as key_file:
...     pkey = serialization.load_pem_private_key(key_file.read(), password=None, backend=default_backend())
... 
&gt;&gt;&gt; from cryptography.hazmat.primitives.asymmetric import padding
&gt;&gt;&gt; ciphertext = pkey.public_key().encrypt(b""asdasd"", padding.PKCS1v15())
&gt;&gt;&gt; print repr(ciphertext)
'*\xf3\x8e2T\x8f\x93\xae}\x18\x9f7\x00\xbcw\xbd$\x14\x9f6\x9a\xc3\xa1\xa8\xf3\xa5\xcc\xae\x89\x17]\x91\x1d\x85\xb0.\xf7&amp;\x12w\x0ca\x1cN\xd2\x8f\xf5\xf7\xfe\x93\xfbL\x17#\xc6g\x1dj\x84\xc3ET\xd1\x92 \xd2u\xc7AF\xa9&lt;4i`d\xdb\xc0%\xae\x06\xc4\xeeJsC\x06\x80\xc9* \x11\x99P\xdc\xa9S\xad\xe2\xe5L\x9f\x9f\x0c\x04\xef\x95\xd7:*\x06@\r|e\xcdL\xfe9\x80R\x82c\x00\xc0\x9as\xea'
&gt;&gt;&gt; pkey.decrypt(ciphertext, padding.PKCS1v15())
'asdasd'
&gt;&gt;&gt; 
</code></pre>
","594","<php><python><rsa><public-key><python-cryptography>","0","0","1","2017-02-10 11:39:00","","0","","18243","","2017-02-04 22:55:35","2017-02-03 10:14:26",""
"54025771","Digital Signature Verification failed using SHA256withRSA in Python","<p>I am trying to validate the digital signature with given certificate files for the offline aadhaar KYC verification application. </p>

<p>This instruction is given in the documentation for the verification.</p>

<blockquote>
  <ol>
  <li><p>Read the entire XML and separate the s=”xxxx” tag from it.</p></li>
  <li><p>Use a signature validation algorithm leveraging “SHA256withRSA” based hashing and encryption technique</p></li>
  <li><p>Signature value present in “s” tag, remaining XML (without ""s"" tag) and UIDAI public key (available here.) is to be fed to the algorithm to validate the digital signature.</p></li>
  </ol>
</blockquote>

<p><strong>Sample C# code snippets provided by the organization. (PS :which is also not working</strong>)</p>

<pre><code>using System;
using System.Security.Cryptography.X509Certificates;
using System.Xml;

namespace test
{
class MainClass
{
    public static void Main(string[] args)
    {
        // link -&gt; https://drive.google.com/file/d/1aSv3HJUFf5_42Z-FqpdVHEk5b3VA3T3D/view


        string XMLFilePath = ""offlineaadhaar.xml""; //Get the XML file

// link -&gt; https://drive.google.com/file/d/1FW4ciIhZqJuelOcGF2x6VaBCSDO9J-gM/view


string KeyFilePath = ""okyc-publickey.cer""; //Get the public key certificate file

        XmlDocument ObjXmlDocument = new XmlDocument();
        ObjXmlDocument.Load(XMLFilePath); //Load the XML
        XmlAttributeCollection SignatureElement = ObjXmlDocument.DocumentElement.Attributes; //Get the all XML attribute
        string SignatureValue = SignatureElement.GetNamedItem(""s"").InnerXml; // Get Signature value

        SignatureElement.RemoveNamedItem(""s"");//Remove the signature ""s"" attribute from XML and get the new XML to validate

        /*----------------Read and parse the public key as string-----------------------*/
        X509Certificate2 ObjX509Certificate2 = new X509Certificate2(KeyFilePath, ""public""); //Initialize the public ket certificate file

        Org.BouncyCastle.X509.X509Certificate objX509Certificate;
        Org.BouncyCastle.X509.X509CertificateParser objX509CertificateParser = new Org.BouncyCastle.X509.X509CertificateParser();

        objX509Certificate = objX509CertificateParser.ReadCertificate(ObjX509Certificate2.GetRawCertData());
        /*----------------End-----------------------*/

        /* Init alg */
        Org.BouncyCastle.Crypto.ISigner signer = Org.BouncyCastle.Security.SignerUtilities.GetSigner(""SHA256withRSA"");

        /* Populate key */
        signer.Init(false, objX509Certificate.GetPublicKey());

        /* Get the signature into bytes */
        var expectedSig = Convert.FromBase64String(SignatureValue);

        /* Get the bytes to be signed from the string */
        var msgBytes = System.Text.Encoding.UTF8.GetBytes(ObjXmlDocument.InnerXml);


        /* Calculate the signature and see if it matches */
        signer.BlockUpdate(msgBytes, 0, msgBytes.Length);
        bool Flag = signer.VerifySignature(expectedSig);            
        if (Flag)
        {
            Console.WriteLine(""XML Validate Successfully"");
        }
        else
        {
            Console.WriteLine(""XML Validation Failed"");
        }
    }
}
}
</code></pre>

<p>I am trying to implement in Python and getting the XML validation failed. I am not sure if the certificate file is wrong or there is some bug on my code.</p>

<p>Here is my Python Code :</p>

<pre><code>import xml
import xml.etree.cElementTree as etree
from xml.etree import ElementTree
import OpenSSL
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from Crypto.PublicKey import RSA
from base64 import b64encode, b64decode
from M2Crypto import BIO, RSA, EVP

xmlDoc = open('adhar.xml', 'r').read()
Tr = etree.XML(xmlDoc)
Tr.keys()
# ['s', 'r', 'a', 'g', 'm', 'e', 'd', 'i', 'n', 'v']

sign = Tr.get('s')
len(sign)
# 344

del Tr.attrib['s']

from M2Crypto import X509

x509 =X509.load_cert('ekyc_public_key.cer')
#x509 =X509.load_cert(cert4)
rsa = x509.get_pubkey().get_rsa()
pubkey = EVP.PKey()
pubkey.assign_rsa(rsa)

xmlstr = etree.tostring(Tr, encoding='utf8', method='xml')
#rstr=str(xmlstr)[45:][:-1]
#rstr = rstr.encode(encoding='utf-8')


# if you need a different digest than the default 'sha1':
pubkey.reset_context(md='sha256')
pubkey.verify_init()

# hashlib.sha256(message_without_sign).digest()
pubkey.verify_update(xmlstr)
if(pubkey.verify_final(b64decode(sign)) != 1):
    print('Digital Signeture not validated')
else: 
    print('Digital Signeture validated')  
</code></pre>
","<p>In cryptography, the devil is in the details, like what really is meant by:</p>

<blockquote>
  <p>remaining XML (without ""s"" tag)</p>
</blockquote>

<p>We are lucky: this ridiculously vague specification <strike>comes</strike> came with a <a href=""https://uidai.gov.in/images/offlineaadhaar20181115055017542.xml"" rel=""nofollow noreferrer"">sample XML file</a> and matching <a href=""https://uidai.gov.in/images/okyc-publickey.cer"" rel=""nofollow noreferrer"">certificate</a>, allowing to:</p>

<ul>
<li>extract the signature signature field (converted from Base64 to binary) from the former to get <em>S</em>;</li>
<li>extract <em>N</em> and <em>e</em> from the later;</li>
<li>compute <em>V</em> = <em>S</em><sup> <em>e</em></sup> mod <em>N</em></li>
<li>check that <em>V</em> is indeed formatted per SHA256withRSA (also known as <a href=""https://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf#page=31"" rel=""nofollow noreferrer"">RSASSA-PKCS1-v1_5</a> with SHA-256 hash),</li>
<li>on the right of <em>V</em> after a fixed DER prefix <code>3031300d060960864801650304020105000420</code> characteristic of a Digestinfo with SHA-256 we extract the 32-byte value <code>f4efef8c788058df45385ec65a49e92f806b9ffd6fc6d11b4f3c2cf89a81fe2f</code>, which thus is the expected hash for that example's signed data.</li>
</ul>

<p>So with a little trial and error we find what that signed data really is. We want to start from XML file and remove</p>

<ol>
<li>the <code>s</code> tag</li>
<li>its <code>=</code> (and, should there be any, whitespace between former <code>s</code> tag and <code>=</code>, and after <code>=</code> as allowed by the XML syntax)</li>
<li>its value field including leading and closing <code>""</code> (which contains the base64-encoded signature)</li>
<li><strong>precisely two nearby space characters</strong>, like the one before the <code>s</code> tag and the one after the closing <code>""</code> (alternatively, we might want to leave a single space where there are now several, probably three after the removals in bullet points 1-3).</li>
</ol>

<p>then hash what remains including <code>&lt; /&gt;</code> delimiters (as UTF-8), that is in the sample code pass it to <code>BlockUpdate</code> or <code>verify_update</code>. For that example:</p>

<pre><code>&lt;OKV v=""1""  n=""Ravi Krishna Nalagatla""  i=""""  d=""10121993"" e=""ac342bb947d5aa49847a0a05f87c388759a6cb156e04eac6ae995e9dca5ba1d9"" m=""254618fd06a2e7308247c7f0fb547f58174ab3b99e7b042d6705a5457235f32a""  g=""male""  a=""S/O Narasimham, 45, 74, 4, 7, Secunderabad, Hyderabad, Andhra Pradesh - 500003"" r=""328020181115111938451"" /&gt;
</code></pre>

<p>Update: sample XML, certificate, and the above are in this <a href=""http://mpqs.free.fr/offlineaadhaar_test_data.zip"" rel=""nofollow noreferrer"">zip archive</a>.</p>
","592","<encryption><rsa><public-key>","3","5","2","2019-01-23 14:03:02","54025772","1","1","","","","2019-01-03 07:13:12",""
"54025771","Digital Signature Verification failed using SHA256withRSA in Python","<p>I am trying to validate the digital signature with given certificate files for the offline aadhaar KYC verification application. </p>

<p>This instruction is given in the documentation for the verification.</p>

<blockquote>
  <ol>
  <li><p>Read the entire XML and separate the s=”xxxx” tag from it.</p></li>
  <li><p>Use a signature validation algorithm leveraging “SHA256withRSA” based hashing and encryption technique</p></li>
  <li><p>Signature value present in “s” tag, remaining XML (without ""s"" tag) and UIDAI public key (available here.) is to be fed to the algorithm to validate the digital signature.</p></li>
  </ol>
</blockquote>

<p><strong>Sample C# code snippets provided by the organization. (PS :which is also not working</strong>)</p>

<pre><code>using System;
using System.Security.Cryptography.X509Certificates;
using System.Xml;

namespace test
{
class MainClass
{
    public static void Main(string[] args)
    {
        // link -&gt; https://drive.google.com/file/d/1aSv3HJUFf5_42Z-FqpdVHEk5b3VA3T3D/view


        string XMLFilePath = ""offlineaadhaar.xml""; //Get the XML file

// link -&gt; https://drive.google.com/file/d/1FW4ciIhZqJuelOcGF2x6VaBCSDO9J-gM/view


string KeyFilePath = ""okyc-publickey.cer""; //Get the public key certificate file

        XmlDocument ObjXmlDocument = new XmlDocument();
        ObjXmlDocument.Load(XMLFilePath); //Load the XML
        XmlAttributeCollection SignatureElement = ObjXmlDocument.DocumentElement.Attributes; //Get the all XML attribute
        string SignatureValue = SignatureElement.GetNamedItem(""s"").InnerXml; // Get Signature value

        SignatureElement.RemoveNamedItem(""s"");//Remove the signature ""s"" attribute from XML and get the new XML to validate

        /*----------------Read and parse the public key as string-----------------------*/
        X509Certificate2 ObjX509Certificate2 = new X509Certificate2(KeyFilePath, ""public""); //Initialize the public ket certificate file

        Org.BouncyCastle.X509.X509Certificate objX509Certificate;
        Org.BouncyCastle.X509.X509CertificateParser objX509CertificateParser = new Org.BouncyCastle.X509.X509CertificateParser();

        objX509Certificate = objX509CertificateParser.ReadCertificate(ObjX509Certificate2.GetRawCertData());
        /*----------------End-----------------------*/

        /* Init alg */
        Org.BouncyCastle.Crypto.ISigner signer = Org.BouncyCastle.Security.SignerUtilities.GetSigner(""SHA256withRSA"");

        /* Populate key */
        signer.Init(false, objX509Certificate.GetPublicKey());

        /* Get the signature into bytes */
        var expectedSig = Convert.FromBase64String(SignatureValue);

        /* Get the bytes to be signed from the string */
        var msgBytes = System.Text.Encoding.UTF8.GetBytes(ObjXmlDocument.InnerXml);


        /* Calculate the signature and see if it matches */
        signer.BlockUpdate(msgBytes, 0, msgBytes.Length);
        bool Flag = signer.VerifySignature(expectedSig);            
        if (Flag)
        {
            Console.WriteLine(""XML Validate Successfully"");
        }
        else
        {
            Console.WriteLine(""XML Validation Failed"");
        }
    }
}
}
</code></pre>

<p>I am trying to implement in Python and getting the XML validation failed. I am not sure if the certificate file is wrong or there is some bug on my code.</p>

<p>Here is my Python Code :</p>

<pre><code>import xml
import xml.etree.cElementTree as etree
from xml.etree import ElementTree
import OpenSSL
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from Crypto.PublicKey import RSA
from base64 import b64encode, b64decode
from M2Crypto import BIO, RSA, EVP

xmlDoc = open('adhar.xml', 'r').read()
Tr = etree.XML(xmlDoc)
Tr.keys()
# ['s', 'r', 'a', 'g', 'm', 'e', 'd', 'i', 'n', 'v']

sign = Tr.get('s')
len(sign)
# 344

del Tr.attrib['s']

from M2Crypto import X509

x509 =X509.load_cert('ekyc_public_key.cer')
#x509 =X509.load_cert(cert4)
rsa = x509.get_pubkey().get_rsa()
pubkey = EVP.PKey()
pubkey.assign_rsa(rsa)

xmlstr = etree.tostring(Tr, encoding='utf8', method='xml')
#rstr=str(xmlstr)[45:][:-1]
#rstr = rstr.encode(encoding='utf-8')


# if you need a different digest than the default 'sha1':
pubkey.reset_context(md='sha256')
pubkey.verify_init()

# hashlib.sha256(message_without_sign).digest()
pubkey.verify_update(xmlstr)
if(pubkey.verify_final(b64decode(sign)) != 1):
    print('Digital Signeture not validated')
else: 
    print('Digital Signeture validated')  
</code></pre>
","<p>For this project, all the instructions can be found on this <a href=""https://uidai.gov.in/ecosystem/authentication-devices-documents/about-aadhaar-paperless-offline-e-kyc.html"" rel=""nofollow noreferrer"">page</a> in <em>Steps to validate signature</em> step.</p>

<p>Sample data, sample public key and sample c# code can be found on this <a href=""https://uidai.gov.in/ecosystem/authentication-devices-documents/about-aadhaar-paperless-offline-e-kyc.html?id=11307#tab4"" rel=""nofollow noreferrer"">page</a> in <em>Offline ekyc Sample data</em> tab.</p>

<p>For your own data please refer to this <a href=""https://resident.uidai.gov.in/offlineaadhaar"" rel=""nofollow noreferrer"">link</a> and download the zip file and extract it.</p>

<p>Here is the ekyc public key for the other xml validation <a href=""https://drive.google.com/file/d/1M26FjQ6jgHdCXtn4IGOjqqCvJkvJD7Ti/view?usp=sharing"" rel=""nofollow noreferrer"">ekyc_public_key.cer</a> </p>

<p>Please find the complete answer in below code snippet which is implemented in python :</p>

<pre><code>from M2Crypto import BIO, RSA, EVP
from M2Crypto import X509

# 'ekyc_public_key.cer' for own your own data. as 'okyc_public_key.cer' only work for sample data only

x509 =X509.load_cert('okyc_public_key.cer')
rsa = x509.get_pubkey().get_rsa()
pubkey = EVP.PKey()
pubkey.assign_rsa(rsa)


import lxml.etree as le

with open(xml_path,'r') as f:
    doc=le.parse(f)
    for elem in doc.xpath('//*[attribute::s]'):
        sign = elem.attrib['s']
        elem.attrib.pop('s')    
data_str = str(le.tostring(doc))[2:][:-1]

data = data_str[:-2] +  ' /&gt;'

pubkey.reset_context(md='sha256')
pubkey.verify_init()

pubkey.verify_update((data_str[:-2] +  ' /&gt;').encode())

is_valid_signeture = """"
if(pubkey.verify_final(b64decode(sign)) != 1):
    print('Digital Signeture not validated')
    is_valid_signeture = 'Invalid'
else: 
    print('Digital Signeture validated') 
    is_valid_signeture = 'Valid'
</code></pre>
","592","<encryption><rsa><public-key>","3","3","2","2019-01-23 14:03:02","54025772","1","1","","","","2019-01-03 07:13:12",""
"30454543","How to convert DER formatted public key file to PEM form","<p>I need to use the PEM formatted public key for some purpose, but not finding the command which can convert DER formatted public key to PEM formatted public key.  </p>

<p>The command I have used -<br>
<strong>openssl rsa -in user_id_rsa.pub -inform DER -outform PEM -out pubkey.pem</strong>  </p>

<p>But i got the below error -</p>

<p>unable to load Private Key
139901900170912:error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag:tasn_dec.c:1337:
139901900170912:error:0D08303A:asn1 encoding routines:ASN1_TEMPLATE_NOEXP_D2I:nested asn1 error:tasn_dec.c:677:
139901900170912:error:0D0680A8:asn1 encoding routines:ASN1_CHECK_TLEN:wrong tag:tasn_dec.c:1337:
139901900170912:error:0D07803A:asn1 encoding routines:ASN1_ITEM_EX_D2I:nested asn1 error:tasn_dec.c:388:Type=RSA</p>

<p>My expected output should be in this format-<br>
-----BEGIN RSA PUBLIC KEY-----<br>
     <strong>KEY CONTENT</strong><br>
-----END RSA PUBLIC KEY-----</p>

<p>Is anyone has try the same?</p>
","","589","<unix><encryption><openssl><public-key>","1","","0","2015-05-26 09:22:57","","6","","","","","2015-05-26 09:22:57",""
"35649510","SSH issue: Codeship-run deploy script on my server is failing to pull from Github","<p>I have my repo hooked up to Codeship which runs tests and then finally runs a script on my server via SSH:</p>

<pre><code>ssh deploy@my.server '/var/www/deploy-script.sh'
</code></pre>

<p>On my server I have my <code>deploy</code> user set up. I have that user's public key stored on my github account. I also have the codeship public key for my project stored in <code>~/.ssh/authorized_keys</code>.</p>

<p>Inside <code>deploy-script.sh</code>, I'm navigating to the repo directory and then trying <code>git pull</code>. Obviously, I need the latest code to be pulled down without a password as this is being run on a virtual machine on codeship. Codeship is apparently able to SSH into my server and run the deployment script, however the log is reporting:</p>

<pre><code>&gt; Pull updates from Github.
Permission denied (publickey).
fatal: Could not read from remote repository.
</code></pre>

<p>If I log into my server as the <code>deploy</code> user and run the script fine, with the <code>git pull</code> working correctly.</p>

<p>What am I missing? Why doesn't github allow access when it's codeship logging in as the deploy user rather than me?</p>
","<p>It seems I overlooked that <code>ssh-agent</code> was not persisting between login sessions, so the next time I logged in as the deploy user I also got the permission denied error. I had to <code>ssh-add</code> again before my identity was added and I could pull from github. In order to make it persist, I followed the instructions here: <a href=""https://stackoverflow.com/questions/3466626/add-private-key-permanently-with-ssh-add-on-ubuntu"">Add private key permanently with ssh-add on Ubuntu</a></p>

<p>Added the following to <code>~/.ssh/config</code>:</p>

<pre><code>IdentityFile ~/.ssh/deploy-key
</code></pre>
","576","<github><deployment><ssh><public-key><codeship>","1","1","1","2016-02-26 10:51:24","","0","","","","","2016-02-26 10:40:23",""
"9024755","Does comparing two assemblies' public keys ensure that they were signed with the same private key?","<p>From other questions and articles I've read, it sounds as if a signed assembly has been tampered with, it's hash will be different and it will not be run.  If that's true, then can I conclude that if an unknown assemlbly's public key matches a known assembly's public key, and .net allows the unkown assembly to run, that the unkown assembly was signed with the same key file and that it has not been tampered with?</p>

<p>BTW, I read <a href=""https://stackoverflow.com/questions/6505204/if-public-key-of-two-files-are-same-is-it-sufficient-to-conclude-that-they-were"">this article</a> but it is asking about a signed MSI and it sounds like that may be a different case than a signed .net assembly.</p>

<p>Edit:  here's my sample code</p>

<pre><code>static void Main(string[] args)
    {
        string unknownAppPath = args[0];
        byte[] unknownKeyBytes = Assembly.LoadFile(unknownAppPath).GetName().GetPublicKey();
        string unknownKeyStr = BitConverter.ToString(unknownKeyBytes);
        Assembly asm = Assembly.GetExecutingAssembly();
        AssemblyName aname = asm.GetName();
        byte[] pubKey = aname.GetPublicKey();
        string hexKeyStr = BitConverter.ToString(pubKey);
        if (hexKeyStr == unknownKeyStr)
        {
            Console.WriteLine(""Signed by same private key"");
        }
        else
        {
            Console.WriteLine(""Uknown signer!"");
        }
        Console.ReadKey(); 
    }
</code></pre>

<p>Further, I read <a href=""http://blogs.msdn.com/b/shawnfa/archive/2004/06/07/150378.aspx"" rel=""nofollow noreferrer"">this article</a> which uses a much more involved method.  I see in the article that he talks about shortcomings of using public key <strong>tokens</strong>, but I don't see why not use the entire public key.  From the answers so far, that sounds like that's what the public key is for... is the problem in that article that you'd have to try to run the assembly?  (he says, ""...but you'd be unable to discover this without checking to see if the assembly passes verification."")</p>
","<p>Yes; that's how public keys work.</p>

<p>You'll also need to make sure that the assembly isn't in the verification skip list; run <code>sn-Vl</code> in a VS command prompt.</p>
","565","<.net><signed><public-key>","1","3","3","2012-01-26 22:22:44","9024776","0","1","-1","","2017-05-23 11:56:38","2012-01-26 20:21:01",""
"9024755","Does comparing two assemblies' public keys ensure that they were signed with the same private key?","<p>From other questions and articles I've read, it sounds as if a signed assembly has been tampered with, it's hash will be different and it will not be run.  If that's true, then can I conclude that if an unknown assemlbly's public key matches a known assembly's public key, and .net allows the unkown assembly to run, that the unkown assembly was signed with the same key file and that it has not been tampered with?</p>

<p>BTW, I read <a href=""https://stackoverflow.com/questions/6505204/if-public-key-of-two-files-are-same-is-it-sufficient-to-conclude-that-they-were"">this article</a> but it is asking about a signed MSI and it sounds like that may be a different case than a signed .net assembly.</p>

<p>Edit:  here's my sample code</p>

<pre><code>static void Main(string[] args)
    {
        string unknownAppPath = args[0];
        byte[] unknownKeyBytes = Assembly.LoadFile(unknownAppPath).GetName().GetPublicKey();
        string unknownKeyStr = BitConverter.ToString(unknownKeyBytes);
        Assembly asm = Assembly.GetExecutingAssembly();
        AssemblyName aname = asm.GetName();
        byte[] pubKey = aname.GetPublicKey();
        string hexKeyStr = BitConverter.ToString(pubKey);
        if (hexKeyStr == unknownKeyStr)
        {
            Console.WriteLine(""Signed by same private key"");
        }
        else
        {
            Console.WriteLine(""Uknown signer!"");
        }
        Console.ReadKey(); 
    }
</code></pre>

<p>Further, I read <a href=""http://blogs.msdn.com/b/shawnfa/archive/2004/06/07/150378.aspx"" rel=""nofollow noreferrer"">this article</a> which uses a much more involved method.  I see in the article that he talks about shortcomings of using public key <strong>tokens</strong>, but I don't see why not use the entire public key.  From the answers so far, that sounds like that's what the public key is for... is the problem in that article that you'd have to try to run the assembly?  (he says, ""...but you'd be unable to discover this without checking to see if the assembly passes verification."")</p>
","<p>Simplified, the public key can be used to decrypt data encrypted with the private key.  If data could be encrypted with a different private key, then the whole system would be broken.  It's one of the fundamental assertions of public-key cryptography.</p>
","565","<.net><signed><public-key>","1","1","3","2012-01-26 22:22:44","9024776","0","1","-1","","2017-05-23 11:56:38","2012-01-26 20:21:01",""
"9024755","Does comparing two assemblies' public keys ensure that they were signed with the same private key?","<p>From other questions and articles I've read, it sounds as if a signed assembly has been tampered with, it's hash will be different and it will not be run.  If that's true, then can I conclude that if an unknown assemlbly's public key matches a known assembly's public key, and .net allows the unkown assembly to run, that the unkown assembly was signed with the same key file and that it has not been tampered with?</p>

<p>BTW, I read <a href=""https://stackoverflow.com/questions/6505204/if-public-key-of-two-files-are-same-is-it-sufficient-to-conclude-that-they-were"">this article</a> but it is asking about a signed MSI and it sounds like that may be a different case than a signed .net assembly.</p>

<p>Edit:  here's my sample code</p>

<pre><code>static void Main(string[] args)
    {
        string unknownAppPath = args[0];
        byte[] unknownKeyBytes = Assembly.LoadFile(unknownAppPath).GetName().GetPublicKey();
        string unknownKeyStr = BitConverter.ToString(unknownKeyBytes);
        Assembly asm = Assembly.GetExecutingAssembly();
        AssemblyName aname = asm.GetName();
        byte[] pubKey = aname.GetPublicKey();
        string hexKeyStr = BitConverter.ToString(pubKey);
        if (hexKeyStr == unknownKeyStr)
        {
            Console.WriteLine(""Signed by same private key"");
        }
        else
        {
            Console.WriteLine(""Uknown signer!"");
        }
        Console.ReadKey(); 
    }
</code></pre>

<p>Further, I read <a href=""http://blogs.msdn.com/b/shawnfa/archive/2004/06/07/150378.aspx"" rel=""nofollow noreferrer"">this article</a> which uses a much more involved method.  I see in the article that he talks about shortcomings of using public key <strong>tokens</strong>, but I don't see why not use the entire public key.  From the answers so far, that sounds like that's what the public key is for... is the problem in that article that you'd have to try to run the assembly?  (he says, ""...but you'd be unable to discover this without checking to see if the assembly passes verification."")</p>
","<p>I'm not sure if this answers you question, but here I go:  You can explicitly specify a <code>PublicKeyToken</code> in your references, and Fusion (the .net assembly loader) will not load the assembly if the assembly's <code>PublicKeyToken</code> does not match.</p>

<p>I think the other answers are specific to public key encrpytion, where my understanding of your question is you're asking about how Fusion handles the <code>PublicKeyToken</code> rather than public keys (the assemblies are not encrypted).</p>
","565","<.net><signed><public-key>","1","0","3","2012-01-26 22:22:44","9024776","0","1","-1","","2017-05-23 11:56:38","2012-01-26 20:21:01",""
"41595996","pubToAddress method from ethereumjs-util throws AssertionError: false == true","<p>I have the following code on nodejs:
    var keythereum = require('keythereum');
    var crypto = require(""crypto"");
    var eccrypto = require(""eccrypto"");
    var pubToAddress = require(""ethereumjs-util"").pubToAddress;
    var ecdsa = new (require(""elliptic"").ec)(""secp256k1"");</p>

<pre><code>// A new random 32-byte private key. 
var privateKey = crypto.randomBytes(32);

// console.log(privateKey);
// &lt;Buffer 06 79 35 4c 5e dd a2 1d b3 cf 70 8d e7 92 06 50 a7 f3 a3 88 3c e0 8c 57 3a 45 7c 53 d1 71 46 a5&gt;

// Corresponding uncompressed (65-byte) public key. 
var publicKey = eccrypto.getPublic(privateKey);

console.log(publicKey);
// &lt;Buffer 04 fa c7 15 ed c6 41 86 1e 18 fb e8 8d 6c e4 f7 75 1e d6 13 d9 b1 b5 f9 ba dc bc c6 48 1b c7 06 cb 28 4d b8 71 e6 74 75 5b e1 9e 49 15 07 76 80 21 3e ... &gt;

var address = pubToAddress(publicKey).toString(""hex"");
</code></pre>

<p>While executing last line of code:</p>

<pre><code>var address = pubToAddress(publicKey).toString(""hex"");
</code></pre>

<p>It throws an assertion error like this:</p>

<pre><code>AssertionError: false == true
    at exports.pubToAddress.exports.publicToAddress (/myHomeDir/node_modules/ethereumjs-util/index.js:323:3)
    at repl:1:15
    at realRunInThisContextScript (vm.js:22:35)
    at sigintHandlersWrap (vm.js:98:12)
    at ContextifyScript.Script.runInThisContext (vm.js:24:12)
    at REPLServer.defaultEval (repl.js:346:29)
    at bound (domain.js:280:14)
    at REPLServer.runBound [as eval] (domain.js:293:12)
    at REPLServer.onLine (repl.js:544:10)
    at emitOne (events.js:101:20)
</code></pre>

<p>Found out that the assertion that fails is this one:</p>

<pre><code>/**
 * Returns the ethereum address of a given public key.
 * Accepts ""Ethereum public keys"" and SEC1 encoded keys.
 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Buffer}
 */
exports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {
  pubKey = exports.toBuffer(pubKey)
  if (sanitize &amp;&amp; (pubKey.length !== 64)) {
    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1)
  }
  assert(pubKey.length === 64)
  // Only take the lower 160bits of the hash
  return exports.sha3(pubKey).slice(-20)
}
</code></pre>

<p>Should I just remove first byte  (04) from address?</p>

<p>This piece of code is based on <a href=""https://github.com/ethereumjs/keythereum/blob/master/test/keys.js"" rel=""nofollow noreferrer"">https://github.com/ethereumjs/keythereum/blob/master/test/keys.js</a> trying to create an Ethereum private key and getting its corresponding public key and address. It fails at the final step. Any hint about what is going on would be very helpful. Thx!</p>
","<p>This code works fine:</p>

<pre><code>var keythereum = require('keythereum');
var crypto = require(""crypto"");
var util = require(""ethereumjs-util"");

// A new random 32-byte private key.
var privateKey = crypto.randomBytes(32);

var publicKey = util.privateToPublic(privateKey);
console.log(publicKey);

var address = util.pubToAddress(publicKey).toString(""hex"");
console.log(address);

var Tx = require('ethereumjs-tx');
// var privateKey = new Buffer('e331b6d69882b4cb4ea581d88e0b604039a3de5967688d3dcffdd2270c0fd109', 'hex');

var rawTx = {
  nonce: '0x00',
  gasPrice: '0x09184e72a000',
  gasLimit: '0x2710',
  to: '0x0000000000000000000000000000000000000000',
  value: '0x00',
  data: '0x7f7465737432000000000000000000000000000000000000000000000000000000600057'
}

var tx = new Tx(rawTx);
tx.sign(privateKey);

var serializedTx = tx.serialize();
console.log(serializedTx.toString('hex'));
</code></pre>

<p>The point is using:</p>

<pre><code>var publicKey = util.privateToPublic(privateKey);
</code></pre>

<p>instead of:</p>

<pre><code>var publicKey = eccrypto.getPublic(privateKey);
</code></pre>

<p>because former one returns a 64 byte publicKey whilst latter one returns a 65 byte publicKey preceded by a ""04"" byte.</p>
","564","<javascript><node.js><public-key><assertion><ethereum>","1","0","1","2017-01-12 17:09:12","","1","1","1012882","","2017-01-12 11:03:21","2017-01-11 16:33:03",""
"20562035","Do I need to generate one private key to each server, or can I spread my private key among them?","<p>Let's say I have multiple computers and multiple servers. </p>

<p>One computer has a private key, and its public key is spread among all of the servers. </p>

<p>Can I just copy my private key from this computer among my other computers to connect to the servers, or do I have to generate private keys on each computer and then authorize their public keys on each server?</p>

<p>If not, is there a better way to do it (that would save me some time)?</p>

<p>Thanks.</p>
","<p>This seems to be a question where <strong>ssh-agent</strong> is the answer.</p>

<p>Let's assume that there is one machine that is currently accessible via the console called <code>console-box</code>, and a few other machines <code>remote-box-1</code>,<code>remote-box-2</code>, ... <code>remote-box-n</code>.</p>

<p>First generate a key on the console-box</p>

<pre><code>(console-box)$ ssh-keygen -t rsa -b 2048
Generating public/private rsa key pair.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
</code></pre>

<p>Then distribute the public key onto the remote boxen.</p>

<pre><code>(console-box)$ eval $(ssh-agent) 
(console-box)$ ssh-add ~/.ssh/id_rsa
Enter passphrase for ~/.ssh/id_rsa: 
Identity added: ~/.ssh/juanje_rsa
(console-box)$ ssh -A remote-box-1
(remote-box-1)$ ssh -A remote-box-2
 ...
(remote-box-n)$ ssh -A console-box
</code></pre>

<p>As soon as the agent is set up on <code>console-box</code> and agent forwarding option is activated, you can freely ssh/scp between your many development and deployment boxes without ever typing a password.</p>
","563","<ssh><ssh-keys><private-key><public-key>","0","1","2","2019-07-25 21:14:55","","4","1","","","","2013-12-13 08:24:38",""
"20562035","Do I need to generate one private key to each server, or can I spread my private key among them?","<p>Let's say I have multiple computers and multiple servers. </p>

<p>One computer has a private key, and its public key is spread among all of the servers. </p>

<p>Can I just copy my private key from this computer among my other computers to connect to the servers, or do I have to generate private keys on each computer and then authorize their public keys on each server?</p>

<p>If not, is there a better way to do it (that would save me some time)?</p>

<p>Thanks.</p>
","<p>To understand this question, its best to know a little about asymmetric encryption. In asymmetric encryption, you have a public key and a private key. Together they make a ""keypair."" The public key is used to encrypt. The private key is then used to decrypt. Note the private key can only decrypt files that were encrypted with the matching public key.</p>

<p>So now we know that there are 2 files needed to make everything work.</p>

<blockquote>
  <p>Can I just copy my private key from this computer among my other computers to connect to >the servers, or do I have to generate private keys on each computer and then authorize >their public keys on each server?</p>
</blockquote>

<p>The answer simply is, yes. You can copy the public or private key to any computer and use it with any OS. As long as you have the public key, you can encrypt messages. If you have the private key, then you can decrypt those files afterwards. Its just a matter of the files being present on the computer.</p>

<blockquote>
  <p>If not, is there a better way to do it (that would save me some time)?</p>
</blockquote>

<p>While theres no technical reason you cant copy and reuse the same keypair everytime, this is not a good practice in terms of security. For example, if you have a forest of 100 servers all sharing the same keypair, if 1 is compromised or hacked, the rest of the 99 servers are also compromised. If you have a unique keypair on each server, then they would need to compromise all 100 servers to get the same effect. The simple act of using a unique keypair everytime <strong>increases the amount of work for an attacker by orders of magnitude.</strong></p>
","563","<ssh><ssh-keys><private-key><public-key>","0","0","2","2019-07-25 21:14:55","","4","1","","","","2013-12-13 08:24:38",""
"21820294","How to get a finger print for a public Key in C?","<p>I need to calculate fingerprint for a public key in C. Is there a way to do this in C platform?
I am using openSSL library also. Is there any call in openSSL to get this done?</p>
","<p>Fingerprints are usually associated with asymmetric encryption keys (e.g, RSA, DSA, ECC) — they are not typically used for symmetric keys, such as AES, and as such there is no standard way of doing this. You can certainly take the hash of an AES key using the algorithm of your choice, though.</p>
","561","<c><openssl><public-key>","0","1","1","2014-02-17 05:58:18","","1","","2000945","","2014-02-17 05:58:18","2014-02-17 03:39:24",""
"47533090","Encoded base64 public key in c# and decode base64 in java","<p>What is the right way to encode a public key using base64 in C#, save to file, and after read that file in java and recompute the key.   </p>

<p>This in C#</p>

<pre><code>File.WriteAllText(System.Convert.ToBase64String(certificate.GetPublicKey()))
</code></pre>

<p>In Java, I read all bytes and after I tried this:</p>

<pre><code>PublicKey pubKey = KeyFactory.getInstance(""RSA"").generatePublic(new X509EncodedKeySpec(Base64.getDecoder().decode(bytesFromFile)))
</code></pre>

<p>And it throws </p>

<blockquote>
  <p>invalid key format</p>
</blockquote>
","<h2>Encode in C#:</h2>

<pre><code>@using System;
@using System.Text;

string password = ""yourpassword"";
 var passwordBytes = Encoding.UTF8.GetBytes(password);
 string encodedPassword = Convert.ToBase64String(passwordBytes);
 //Debug.Write(""csEncodedPassword: ""+csEncodedPassword);
</code></pre>

<h2>Decode in Java:</h2>

<pre><code>import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.StringUtils;

String decodedPass = java.net.URLDecoder.decode(csEncodedPassword,StandardCharsets.UTF_8.name());
String decoded64pass= StringUtils.newStringUtf8(Base64.decodeBase64(decodedPass));
</code></pre>
","554","<java><c#><base64><public-key>","0","0","1","2019-02-15 16:50:33","","6","","8538799","","2017-11-28 15:13:36","2017-11-28 13:43:33",""
"15877325","Import DER encoded public key using crypto API","<p>Is it possible to import DER encoded public key using MS crypto API? So i can verfiy signatures ?
I need a piece of code or help for MS Crypto API for importing DER encoded public-key/certificate.</p>
","<p>Following three steps will allow you to import your public key certificate</p>

<ol>
<li><p>Get the certificate context using <a href=""http://msdn.microsoft.com/en-gb/library/windows/desktop/aa376033%28v=vs.85%29.aspx"" rel=""nofollow"">CertCreateCertificateContext</a></p></li>
<li><p>Open the other people certificate store with <a href=""http://msdn.microsoft.com/en-gb/library/windows/desktop/aa376559%28v=vs.85%29.aspx"" rel=""nofollow"">CertOpenStore</a> for ADDRESSBOOK</p></li>
<li><p>Add the certificate context to the other people certificate store using <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa376009%28v=vs.85%29.aspx"" rel=""nofollow"">CertAddCertificateContextToStore</a> </p></li>
</ol>
","546","<windows><rsa><public-key><cryptoapi><der>","2","2","1","2014-08-24 22:01:39","","0","","608639","","2014-08-24 22:01:39","2013-04-08 10:54:23",""
"27514158","Amazon EC2 publickey error","<p>I had a developer working on my app prior to now. I am taking over the project, as he is now out of the country, and can't get an SSH connection established. I keep getting a publickey error.</p>

<p>Steps taken:  </p>

<pre><code>- Created new key pair  
- Downloaded .pem file  
- Set chmod 400 on .pem file  
- ssh -vvv -i ~/.ssh/steve.pem ubuntu@instance ip
</code></pre>

<p>Verbose output ended with:  </p>

<pre><code>debug2: we sent a publickey packet, wait for reply  
debug1: Authentications that can continue: publickey  
debug2: we did not send a packet, disable method  
debug1: No more authentication methods to try.  
Permission denied (publickey).  
</code></pre>

<p>What am I doing wrong?</p>
","<p>You can't create a new key pair to access an existing instance. The keypair selected is only installed on the instance when its launched, any additional keys have to be added to the instance directly.</p>

<p>If you need to add a new key to an existing instance, you can do the following:</p>

<ol>
<li>Stop your instance.</li>
<li>Detach the root volume.</li>
<li>Attach to a new instance as a secondary volume and mount the volume.</li>
<li>Update the ~/.ssh/authorized_keys file for the user you are trying to login with. You would put your new public key in this file.</li>
<li>Unmount the volume, and reattach it to the original instance.</li>
</ol>

<p>If you did everything right, you will be able to access the instance after you restart. Unless your in VPC your ip will change when you stop the instance.</p>
","542","<amazon-web-services><ssh><amazon-ec2><public-key>","0","2","2","2014-12-17 02:31:37","27514966","0","","498256","","2014-12-17 02:31:37","2014-12-16 21:23:27",""
"27514158","Amazon EC2 publickey error","<p>I had a developer working on my app prior to now. I am taking over the project, as he is now out of the country, and can't get an SSH connection established. I keep getting a publickey error.</p>

<p>Steps taken:  </p>

<pre><code>- Created new key pair  
- Downloaded .pem file  
- Set chmod 400 on .pem file  
- ssh -vvv -i ~/.ssh/steve.pem ubuntu@instance ip
</code></pre>

<p>Verbose output ended with:  </p>

<pre><code>debug2: we sent a publickey packet, wait for reply  
debug1: Authentications that can continue: publickey  
debug2: we did not send a packet, disable method  
debug1: No more authentication methods to try.  
Permission denied (publickey).  
</code></pre>

<p>What am I doing wrong?</p>
","<p>I agree with datasage's answer. Another way to get access is to create an AMI image of the current instance and then launch a new instance from that image. When you launch the new instance, you will have the option to create a new key pair or to use an existing one.</p>

<p>Once you can connect to the new instance, you can reassign the Elastic IP (if any) of the old instance to the new one and just terminate the old instance.</p>
","542","<amazon-web-services><ssh><amazon-ec2><public-key>","0","0","2","2014-12-17 02:31:37","27514966","0","","498256","","2014-12-17 02:31:37","2014-12-16 21:23:27",""
"46141265","How does the verification server recognize which public key to use in RSA?","<p><a href=""https://i.stack.imgur.com/B93DO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/B93DO.png"" alt=""enter image description here""></a></p>

<p>I am trying to implement a (simplified) RSA-like verification process in my (Java) application. 
The client sends a request (data + private key signature) and the server either rejects his request or processes it - depending on the signature validity. </p>

<p><strong>But I don't understand how the verification server knows which public key to use for signature decryption. Indeed, no public key - nor public key ID - seem to be sent to the verification server.</strong> </p>

<p>Does it actually test all authorized public keys ? Or is the public key stored from a previous communication exchange ?</p>
","<p>As the figure you attach with the question suggests, the client sends its certificate along with the signature, the certificate contains the public key, the server check for certificate validity and use it to check the signature.</p>
","542","<rsa><digital-signature><private-key><public-key><pki>","1","2","2","2017-09-10 18:23:19","","1","","6371459","","2017-09-10 18:08:35","2017-09-10 13:32:42",""
"46141265","How does the verification server recognize which public key to use in RSA?","<p><a href=""https://i.stack.imgur.com/B93DO.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/B93DO.png"" alt=""enter image description here""></a></p>

<p>I am trying to implement a (simplified) RSA-like verification process in my (Java) application. 
The client sends a request (data + private key signature) and the server either rejects his request or processes it - depending on the signature validity. </p>

<p><strong>But I don't understand how the verification server knows which public key to use for signature decryption. Indeed, no public key - nor public key ID - seem to be sent to the verification server.</strong> </p>

<p>Does it actually test all authorized public keys ? Or is the public key stored from a previous communication exchange ?</p>
","<p>The figure has several errors and some omissions, because it is probably a simplification:</p>

<ul>
<li><p>the hash is <strong>digitally signed, not encrypted</strong>, and the signature is verified, not decrypted. The underlying cryptographic operation is not equivalent.</p></li>
<li><p>the signed data should include the certificate and <strong>the certification chain</strong></p></li>
<li><p>if you use a known format like CMS, pkcs#7 or XMLDsig the hash to sign usually includes also a  reference to the signing certificate and content-type to avoid tampering</p></li>
</ul>

<p>To validate a signed document you <strong>verify the signature using the public key of the attached certificate</strong> but it is mandatory to <strong>check that the signing certificate is trusted verifying that the certificate itself or the issuing Certification Authority is present in the client's trustore</strong>. </p>

<p>The signature includes the certification chain because usually the truststore does not contain the intermediate CAs. The certificates of the truststore are exchanged previously</p>

<p>Additionaly the verification process should check that the certificate is not expired and not revoked</p>

<hr>

<p>Note that the verification process is the same for all digital certificates in a public key infrastructure, not just RSA</p>
","542","<rsa><digital-signature><private-key><public-key><pki>","1","2","2","2017-09-10 18:23:19","","1","","6371459","","2017-09-10 18:08:35","2017-09-10 13:32:42",""
"2149243","Certificate Authority vs Stored public key","<p>I'm developing a J2ME app which securely connects to a server to login. I'm having a lot of difficulty in setting up the SSL between the two so I thought of a simpler solution and I'm hoping you can give your views on it.</p>

<p>The J2ME Midlet is shipped WITH the server's public key, on connect a message (username, password hash and random) is encrypted using that public key and sent to the server. The server then decrypts it and uses it to authenticate the client.</p>

<p>The main idea of the certificate authority is to say who is who, if the two parties know that already and agree that it won't change (unless through an already authenticated connection), then don't I bypass the need for one?</p>

<p>Thanks,
Vladimir</p>
","<blockquote>
  <p>if the two parties know that already and agree that it won't change ... then don't I bypass the need for one?</p>
</blockquote>

<p>Yes, but I think you are missing the point.  The program is shipped with the key, but there is no way of the user knowing that the program they're downloading actually came from you, and not some malicious hacker intercepting/rewriting the communication; all the user sees is bits coming in from a wire on the wall.</p>

<p>Typically what you'll do then is sign the jar with your key, and ship the key with your program.  Now we have a chicken-and-egg problem:  how do they know that the key came from you?</p>

<p>This is where the certificate authority comes in; the CA's key is <em>already</em> on their computer, so they leave it up to the CA to verify who you are and sign your public key.  Then when the user gets the public key, verifies that it was signed by the CA, and verifies that the jar was signed by the key, they <em>know</em> the key is yours and thus the jar must have come from you, since you are the only one who could have signed it with the private key.</p>

<p>Now, if your key were on their computer ahead of time (for instance, inside of a company where the keys are physically placed on the computers when they're being set up), they yes, you absolutely don't need to have the key signed.</p>
","540","<ssl><java-me><client><certificate><public-key>","2","1","1","2010-01-27 18:25:05","2149344","0","","","","","2010-01-27 18:08:39",""
"41136032","Export public key and private key from iOS to OpenSSL","<p>I'm working on app in which I need to create CSR, by using objective c or Swift this doesn't easy. So I choosed OpenSSL to created CSR and I created successfully code is shown following, but my one more core requirement is to store keys in secure enclave but this not possible in OpenSSL as I searched online. 
Now I want to create keypair in objective c in secure enclave and then export these public key (with data) and private key (with reference) to openSSL (<code>EC_KEY</code>) and then create CSR from. I found this <a href=""https://digitalleaves.com/blog/2015/10/sharing-public-keys-between-ios-and-the-rest-of-the-world/"" rel=""nofollow noreferrer"">this link</a> to export key but there is no way to export private key (not possible with data but with reference).</p>

<p>I need some guidance how to do that.</p>

<pre><code>    - (void)genCSRX509ForEC
{
    int             ret = 0;
    DSA             *r = NULL;
    BIGNUM          *bne = NULL;


int             nVersion = 1;

unsigned long   e = RSA_F4;

X509_REQ        *x509_req = NULL;
X509_NAME       *x509_name = NULL;
EVP_PKEY        *pKey = NULL;
BIO             *out = NULL;

const char      *szCountry = ""USA"";
const char      *szProvince = ""MA"";
const char      *szCity = ""Boston"";
const char      *szOrganization = ""MyComp"";
const char      *szCommon = ""MYC"";

const char      *szPath = ""x509Req.pem"";

// 1. generate rsa key
bne = BN_new();
ret = BN_set_word(bne,e);
if(ret != 1){
    goto free_all;
}

r = DSA_new();
//    
//    EC_KEY* _ec_key = EC_KEY_new();
//    EC_GROUP* ec_group_new = EC_GROUP_new_by_curve_name(NID_X9_62_prime256v1);
//    const EC_GROUP* ec_group = ec_group_new;
//    if (!EC_KEY_set_group(_ec_key,ec_group))
//        NSLog(@""Error in initializeCrypto, EC_KEY_set_group failed!"");

    // Segfault at this position


    //////////////////////////// CREATE KEYPAIR /////////////////////////////////////

    EC_KEY* _ec_key = EC_KEY_new();
    EC_GROUP* ec_group_new = EC_GROUP_new_by_curve_name(NID_X9_62_prime256v1);
    const EC_GROUP* ec_group = ec_group_new;
    if (!EC_KEY_set_group(_ec_key,ec_group))
        NSLog(@""Error in initializeCrypto, EC_KEY_set_group failed!"");

    EC_KEY_generate_key(_ec_key);

    ret = EC_KEY_check_key(_ec_key);
    if (ret != 1){
        goto free_all;
    }

      const BIGNUM *privateKey = EC_KEY_get0_private_key(_ec_key);
      const EC_POINT *publicKey = EC_KEY_get0_public_key(_ec_key);

      privateKeySize = i2d_ECPrivateKey(_ec_key,NULL);
      unsigned char *privateKeyBuf = OPENSSL_malloc(privateKeySize);
      memset(privateKeyBuf, 0, privateKeySize);
      int status = i2d_ECPrivateKey(_ec_key,&amp;privateKeyBuf);
      if (!ret){
        NSLog(@""Private key to DER failed\n"");
        return;
      }
      else {
        NSLog(@""Private key %s"",privateKeyBuf);
      }
    privateKeyUnsignedChar = privateKeyBuf;

      publicKeySize = i2o_ECPublicKey(_ec_key,NULL);
      unsigned char *publicKeyBuf = OPENSSL_malloc(privateKeySize);
      memset(publicKeyBuf, 0, privateKeySize);
      ret = i2o_ECPublicKey(_ec_key,&amp;publicKeyBuf);
      if (!ret){
        NSLog(@""Public key to octed failed\n"");
        return;
      }
      else {
        NSLog(@""Public key %s"",publicKeyBuf);
      }
    publicKeyUnsignedChar = publicKeyBuf;
    NSLog(@""key generation generated"");

    //////////////////////////// CREATE KEYPAIR END /////////////////////////////////////


    // 2. set version of x509 req
    x509_req = X509_REQ_new();
    ret = X509_REQ_set_version(x509_req, nVersion);
    if (ret != 1){
        goto free_all;
    }

    // 3. set subject of x509 req
    x509_name = X509_REQ_get_subject_name(x509_req);

    ret = X509_NAME_add_entry_by_txt(x509_name,""C"", MBSTRING_ASC, (const unsigned char*)szCountry, -1, -1, 0);
    if (ret != 1){
        goto free_all;
    }

    ret = X509_NAME_add_entry_by_txt(x509_name,""ST"", MBSTRING_ASC, (const unsigned char*)szProvince, -1, -1, 0);
    if (ret != 1){
        goto free_all;
    }

    ret = X509_NAME_add_entry_by_txt(x509_name,""L"", MBSTRING_ASC, (const unsigned char*)szCity, -1, -1, 0);
    if (ret != 1){
        goto free_all;
    }

    ret = X509_NAME_add_entry_by_txt(x509_name,""O"", MBSTRING_ASC, (const unsigned char*)szOrganization, -1, -1, 0);
    if (ret != 1){
        goto free_all;
    }

    ret = X509_NAME_add_entry_by_txt(x509_name,""CN"", MBSTRING_ASC, (const unsigned char*)szCommon, -1, -1, 0);
    if (ret != 1){
        goto free_all;
    }

    // 4. set public key of x509 req
    pKey = EVP_PKEY_new();
    EVP_PKEY_assign_EC_KEY(pKey, _ec_key);
    r = NULL;   // will be free rsa when EVP_PKEY_free(pKey)

    ret = X509_REQ_set_pubkey(x509_req, pKey);
    if (ret != 1){
        goto free_all;
    }

    // 5. set sign key of x509 req
    ret = X509_REQ_sign(x509_req, pKey, EVP_sha256());    // return x509_req-&gt;signature-&gt;length
    if (ret &lt;= 0){
        goto free_all;
    }

    out = BIO_new_file(szPath,""w"");
    ret = PEM_write_bio_X509_REQ(out, x509_req);
    X509_REQ_print_fp(stdout, x509_req);


    [self createFileForPEM:x509_req];

    //    PEM_write_X509_REQ(pemFile, certSigningRequest);
    // 6. free
free_all:
    X509_REQ_free(x509_req);
    BIO_free_all(out);

    EVP_PKEY_free(pKey);
//    BN_free(bne);


}
</code></pre>
","<p>Refer <a href=""https://www.openssl.org/docs/man1.0.2/crypto/d2i_ECPrivate_key.html"" rel=""nofollow noreferrer"">https://www.openssl.org/docs/man1.0.2/crypto/d2i_ECPrivate_key.html</a> and <a href=""https://www.openssl.org/docs/man1.0.2/crypto/d2i_ECPrivateKey.html"" rel=""nofollow noreferrer"">https://www.openssl.org/docs/man1.0.2/crypto/d2i_ECPrivateKey.html</a></p>

<p>You can call <code>i2d_ECPrivateKey</code> to convert it into DER format in the given <code>unsigned char</code> array and then convert it into Base64 and write to file.</p>

<pre><code>//int i2d_ECPrivateKey(EC_KEY *key, unsigned char **out);
int len = -1;
unsigned char outbuf[2000]; /*large enough to hold the key.*/
len = i2d_ECPrivateKey(_ec_key, outbuf);
/*Now, you have outbuf with len bytes*/
/*Write it to file with in DER format and you can use d2i_ECPrivateKey to import it. */
</code></pre>
","537","<ios><openssl><public-key><key-pair><secure-element>","0","0","1","2016-12-14 11:16:19","","2","1","","","","2016-12-14 06:19:21",""
"22840644","How to read RSA private key from file using a GPLv2 compatible library?","<p>I need to do some RSA decryption and my private key is stored in a file. 
I am using C++.
At first I used OpenSSL, and it worked smoothly, but then the licensing problem appeared, as I want my code to be GPLv2 compatible. Now I am trying to use libgcrypt, but I am having problems using the S-expressions. This is my code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
#include &lt;iostream&gt;

#include &lt;gcrypt.h&gt;

using namespace std;

int main()
{
    int cipher_len, key_len;
    FILE *t = NULL, *k = NULL;
    gcry_mpi_t text_mpi = NULL;
    gcry_sexp_t text_s_exp = NULL;
    gcry_mpi_t key_mpi = NULL;
    gcry_sexp_t key_s_exp = NULL;
    gcry_sexp_t decrypted_s_exp = NULL;
    gcry_error_t err;

    /* read encrypted text file */
    if( ! ( t = fopen( ""outrsa"", ""rb"" ) ) )
    {
        cout &lt;&lt; ""could not open encrypted text file"" &lt;&lt; endl;
        goto error;
    }
    fseek( t, 0, SEEK_END );
    cipher_len = ftell( t );
    rewind( t );

    uint8_t text[cipher_len];
    memset( text, '\0', cipher_len );

    fread( text, 1, cipher_len, t );
    if( ferror( t ) )
    {
        cout &lt;&lt; ""error while reading encrypted text file"" &lt;&lt; endl;
        goto error;
    }

    /* create S-expression for encrypted text */
    if( gcry_mpi_scan( &amp;text_mpi, GCRYMPI_FMT_USG, text, cipher_len, NULL ) )
    {
        cout &lt;&lt; ""error when scanning mpi from encrypted file text"" &lt;&lt; endl;
        goto error;
    }
    if( gcry_sexp_build( &amp;text_s_exp, NULL, ""(enc-val(flags oaep)(rsa(a %m)))"", text_mpi ) )
    {
        cout &lt;&lt; ""error while creating S-expr from mpi for encrypted text"" &lt;&lt; endl;
        goto error;
    }

    /* read private key file */
    if( ! ( k = fopen( ""priv.key"", ""rb"" ) ) )
    {
        cout &lt;&lt; ""could not open key file"" &lt;&lt; endl;
        goto error;
    }
    fseek( k, 0, SEEK_END );
    key_len = ftell( k );
    rewind( k );

    uint8_t key[key_len];
    memset( key, '\0', key_len );

    key_len = fread( key, 1, key_len, k );
    if( ferror( k ) )
    {
        cout &lt;&lt; ""error while reading key file"" &lt;&lt; endl;
        goto error;
    }

    /* create S-expression for private key */
    if( gcry_mpi_scan( &amp;key_mpi, GCRYMPI_FMT_USG, key, key_len, NULL ) )
    {
        cout &lt;&lt; ""error when scanning mpi from key file"" &lt;&lt; endl;
        goto error;
    }
    if( gcry_sexp_build( &amp;key_s_exp, NULL, ""(data(flags raw)(value %m))"", key_mpi ) )
    {
        cout &lt;&lt; ""error while creating S-expr from mpi for key"" &lt;&lt; endl;
        goto error;
    }

    /* decrypt */
    if( ( err = gcry_pk_decrypt( &amp;decrypted_s_exp, text_s_exp, key_s_exp ) ) )
    {
        cout &lt;&lt; ""error on decryption, source: "" &lt;&lt; gcry_strsource( err ) &lt;&lt; "", error: "" &lt;&lt; gcry_strerror( err ) &lt;&lt; endl;
        goto error;
    }

    /* extract decrypted text from S-expr */
    unsigned char decrypted[ cipher_len + 1 ];
    memset( decrypted, '\0', cipher_len + 1 );
    if( gcry_sexp_sprint( decrypted_s_exp, GCRYSEXP_FMT_DEFAULT, decrypted, cipher_len ) )
    {
        cout &lt;&lt; ""error while extracting decrypted text from S-expr"" &lt;&lt; endl;
        goto error;
    }

    cout &lt;&lt; ""decrypted text:"" &lt;&lt; endl &lt;&lt; decrypted &lt;&lt; endl;

    return 0;

error:
    if( text_mpi )
        gcry_mpi_release( text_mpi );
    if( key_mpi )
        gcry_mpi_release( key_mpi );
    if( text_s_exp )
        gcry_sexp_release( text_s_exp );
    if( key_s_exp )
        gcry_sexp_release( key_s_exp );
    if( decrypted_s_exp )
        gcry_sexp_release( decrypted_s_exp );
    if( k )
        fclose( k );
    if( t )
        fclose( t );
    return 1;
}
</code></pre>

<p>Now, I know this is definetely not the correct way of using libgcrypt (as I am reading the entire key text as an MPI, and the decryption fails), but with the manual in front, I cannot find a way of reading the key... 
Should I do the parsing of the key manually?</p>

<p>Thanks!</p>
","","535","<c++><rsa><public-key><encryption-asymmetric><libgcrypt>","0","","0","2014-04-08 10:27:22","","2","","2299238","","2014-04-08 10:00:49","2014-04-03 14:23:11",""
"54957545","How to load RSA public key from String for signature verification in Java?","<p>I have the following public key, that is stored in the DB (PostgresSQL) as text. It's a String, in java:</p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN RSA PUBLIC KEY-----     
MIICCgKCAgEA1ht0OqZpP7d/05373OE7pB7yCVGNGzkUEuCneyfOzps6iA03NbvI
1ZL0Jpp/N3AW73lGdhaoa3X3JE4GsI/bsToVLQwTKmIOC4yjTvBctmFEoyhhTfxW
s1UHZKl4XZ/7THbRlKHhRaTKyfDAbikkMAxNT/qutLAPjnN1qOwjb1oRq52NP6FJ
KWTTikz4UeOHroX+Xthn2fJSJDlQ4YMdBbgrZVx5JcHKNuPTKRf5gI8QQKMSA9Q9
QJRE5OGp7b6dG14ZmOUnUxb00Mp20LgcaGPcuWU+oFsbQaF6W4G4bdkSZRJJXhSg
d4Q7mahpar94/gnztJmth0GzqTWUYyZIWNqIFoMwuOgeaiDV43zb3uLsRVpRKYYy
esmzcOy/jTScVLRCD8QRyu9B2wgCkNAVztQOXPCOOa4O1LlVQWaecIs4WPhOqDhi
KTBhyVkpC1TrrBkp+QMqMqWll1OyVb6k/7uV0qE/i6rHJtjo5v9bcIgYzswyx9CD
9PKl2Q0L0Jg7TMG+yLDIrLfGeuSeEc4XYJzN7bJcCeiizzu5iU9dQUkrncOrq9jn
Ub2pM/+A+JqIsoPK3IY/pJKqH4JYpGKhO1iPQF6iXIZT1r3ZgJUSQtzSeyYqhkla
2uR2BsbPbDqebCuXm3lAsY5w+dujijcn96PKwYha1LsK5sACHuJ79AMCAwEAAQ==
-----END RSA PUBLIC KEY-----
</code></pre>

<p>I don't know how this key has been generated, I'm sorry. I have been told to take this key and verify the signature of another string that I'll call ""object"". I have been told that the algorithm that I have to use to verify ""object"" is SHA256withRSA.</p>

<p>So, I have written the following java method to read the key</p>

<pre><code>private PublicKey getPublicKey(String publicKey) throws NoSuchAlgorithmException, InvalidKeySpecException, UnsupportedEncodingException {
    publicKey = publicKey.replaceAll(""\\n"", """");
    publicKey = publicKey.replace(""-----BEGIN RSA PUBLIC KEY-----"", """");
    publicKey = publicKey.replace(""-----END RSA PUBLIC KEY-----"", """");
    publicKey = publicKey.trim();
    byte[] keyDecoded = Base64.getDecoder().decode(publicKey.getBytes());
    X509EncodedKeySpec publicSpec = new X509EncodedKeySpec(keyDecoded);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    PublicKey pubKey = kf.generatePublic(publicSpec);
    return pubKey;
}
</code></pre>

<p>The point is that I get the following exception:</p>

<blockquote>
  <p>java.security.InvalidKeyException: IOException: algid parse error, not
  a sequence</p>
</blockquote>

<p>I have read plenty of qustions as mine in stackoverflow. The code written by other users is pretty similar (sometimes identical) to mine. So I definitely don't get why it doesn't work for me. Other developers (workmates) are doing the same in php and it works great, so I would discard the hypothesis of wrong public key. Maybe didn't I understood the process clearly? Do you have any clue, please?</p>

<p>I have also tried to cope with the problem using BouncyCastle library, as suggested <a href=""https://stackoverflow.com/questions/6559272/algid-parse-error-not-a-sequence"">here</a>, but I get the same exception. The following is the code I have written:</p>

<pre><code>private static PublicKey getPublicKey(String publicKey)
        throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {
    Security.addProvider(new BouncyCastleProvider());
    PemReader pp = new PemReader(new StringReader(publicKey));
    PemObject pem = pp.readPemObject();
    byte[] content = pem.getContent();
    pp.close();

    X509EncodedKeySpec spec = new X509EncodedKeySpec(content);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    return kf.generatePublic(spec);
}
</code></pre>
","<p>You can't load that key using an X509EncodedKeySpec. According to it's <a href=""https://docs.oracle.com/javase/8/docs/api/index.html?java/security/spec/X509EncodedKeySpec.html"" rel=""nofollow noreferrer"">JavaDoc documentation</a> it expects the following format:</p>

<pre><code>SubjectPublicKeyInfo ::= SEQUENCE {
   algorithm AlgorithmIdentifier,
   subjectPublicKey BIT STRING }
</code></pre>

<p>Instead your key looks different. I used the data from your post, converted it to hex data and posted it into the online <a href=""https://lapo.it/asn1js/#MIICCgKCAgEA1ht0OqZpP7d_05373OE7pB7yCVGNGzkUEuCneyfOzps6iA03NbvI1ZL0Jpp_N3AW73lGdhaoa3X3JE4GsI_bsToVLQwTKmIOC4yjTvBctmFEoyhhTfxWs1UHZKl4XZ_7THbRlKHhRaTKyfDAbikkMAxNT_qutLAPjnN1qOwjb1oRq52NP6FJKWTTikz4UeOHroX-Xthn2fJSJDlQ4YMdBbgrZVx5JcHKNuPTKRf5gI8QQKMSA9Q9QJRE5OGp7b6dG14ZmOUnUxb00Mp20LgcaGPcuWU-oFsbQaF6W4G4bdkSZRJJXhSgd4Q7mahpar94_gnztJmth0GzqTWUYyZIWNqIFoMwuOgeaiDV43zb3uLsRVpRKYYyesmzcOy_jTScVLRCD8QRyu9B2wgCkNAVztQOXPCOOa4O1LlVQWaecIs4WPhOqDhiKTBhyVkpC1TrrBkp-QMqMqWll1OyVb6k_7uV0qE_i6rHJtjo5v9bcIgYzswyx9CD9PKl2Q0L0Jg7TMG-yLDIrLfGeuSeEc4XYJzN7bJcCeiizzu5iU9dQUkrncOrq9jnUb2pM_-A-JqIsoPK3IY_pJKqH4JYpGKhO1iPQF6iXIZT1r3ZgJUSQtzSeyYqhkla2uR2BsbPbDqebCuXm3lAsY5w-dujijcn96PKwYha1LsK5sACHuJ79AMCAwEAAQ"" rel=""nofollow noreferrer"">ASN.1 decoder</a>.</p>

<p>The output is this:</p>

<pre><code>SEQUENCE (2 elem)
  INTEGER (4096 bit) 873481340827968071893572683200799871431146795599597693981565010037737…
  INTEGER 65537
</code></pre>

<p>As you may recognize your key does not contain an <code>AlgorithmIdentifier</code> therefore it can not be loaded using <code>X509EncodedKeySpec</code>. </p>

<p>My suggestion would be to use the BouncyCastle library and it's <code>PEMParser</code> class for loading this key:</p>

<pre><code>File pemFile = new File(""test.pem"");
try (PEMParser pp = new PEMParser(new InputStreamReader(new FileInputStream(pemFile)))) {
    SubjectPublicKeyInfo subjPubKeyInfo = (SubjectPublicKeyInfo) pp.readObject();
    RSAKeyParameters rsa = (RSAKeyParameters) PublicKeyFactory.createKey(subjPubKeyInfo);

    RSAPublicKeySpec rsaSpec = new RSAPublicKeySpec(rsa.getModulus(), rsa.getExponent());
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    java.security.PublicKey publicKey = kf.generatePublic(rsaSpec);
    System.out.println(publicKey);
}
</code></pre>

<p>Or you manually convert the key to PKCS#8 format via openssl.</p>
","535","<java><rsa><public-key><pem>","3","2","1","2019-03-06 11:53:44","54958612","12","","5743234","","2019-03-06 11:53:44","2019-03-02 10:34:35",""
"38208923","End-to-end encrypted mobile backend as a service?","<p>I'm thinking of using an MBaaS such as Firebase or Kinvey for my next app, and am wondering if any exist which encrypt application data end-to-end (i.e. such that the encryption keys are never shared with the service provider).  This seems feasible in theory, since the server is not expected to do any computation on the data, only store it and deliver it to clients.</p>

<p>Does such a service exist?  I've found ZeroDB and Crypton, but neither are available as services AFAICT, which means I'd have to administer, scale, and back them up myself.  I also thought of using something like Firebase and encrypting my app's data before I pass it to the Firebase API, but I'm wary of writing a one-off crypto layer like that unless I have to (i.e. I'd rather use something that's been peer-reviewed).</p>

<p>Alternatively, if no such service currently exists, why not?  Is it technically infeasible, or is there just no market for it?</p>

<p>Edit: This seems closest to what I'm looking for, but considering the broken links on their website I'm guessing it's defunct: <a href=""http://www.adrenalinemobility.com/backservices.html"" rel=""nofollow"">Adreneline Mobility</a></p>
","<p>The answer to your question is actually available on the market. <a href=""https://cloudmineinc.com/"" rel=""nofollow"">CloudMine</a> offers end-to-end encryption (disclosure - I work at CloudMine). They have a largely healthcare focused offering so it has to stand up to HIPAA and other government regs around data security.</p>

<p>Here's a good overview <a href=""https://vimeo.com/148523495"" rel=""nofollow"">video on security</a> featuring CloudMine's CTO. The first 45 sec. provide some more information on our encryption techniques.</p>

<p>I know I'm being the ""sales guy"" right now but I'm happy to hop on a call to share what we've built and discuss your specific use case. You can email me at <strong>nick at cloudmineinc.com</strong> if you're interested.</p>
","533","<encryption><firebase><public-key><mbaas><dbaas>","3","2","2","2018-12-17 21:01:22","","9","2","5327218","","2016-07-06 20:36:39","2016-07-05 17:04:46",""
"38208923","End-to-end encrypted mobile backend as a service?","<p>I'm thinking of using an MBaaS such as Firebase or Kinvey for my next app, and am wondering if any exist which encrypt application data end-to-end (i.e. such that the encryption keys are never shared with the service provider).  This seems feasible in theory, since the server is not expected to do any computation on the data, only store it and deliver it to clients.</p>

<p>Does such a service exist?  I've found ZeroDB and Crypton, but neither are available as services AFAICT, which means I'd have to administer, scale, and back them up myself.  I also thought of using something like Firebase and encrypting my app's data before I pass it to the Firebase API, but I'm wary of writing a one-off crypto layer like that unless I have to (i.e. I'd rather use something that's been peer-reviewed).</p>

<p>Alternatively, if no such service currently exists, why not?  Is it technically infeasible, or is there just no market for it?</p>

<p>Edit: This seems closest to what I'm looking for, but considering the broken links on their website I'm guessing it's defunct: <a href=""http://www.adrenalinemobility.com/backservices.html"" rel=""nofollow"">Adreneline Mobility</a></p>
","<p>Virgil Security (full disclosure - I work there) has an end-to-end encryption SDK that works for any endpoint, and also has a special integration with Firebase. It's open source, of course. Check it out and feel free to ask any questions of the team here or on Slack - <a href=""https://e3kit.readme.io/"" rel=""nofollow noreferrer"">https://e3kit.readme.io/</a></p>
","533","<encryption><firebase><public-key><mbaas><dbaas>","3","0","2","2018-12-17 21:01:22","","9","2","5327218","","2016-07-06 20:36:39","2016-07-05 17:04:46",""
"52782861","AWS cognito public key certificate","<p>I need the public key certificate that Amazon cognito uses so my web app can verify the cognito JWT.
Is there anyway to get the public key certificate or do you have to use the cognito SDK to achieve this?</p>
","<p>There is no certificate chain on a Cognito JWK. The public JWK for your Cognito can be found here:</p>

<p><code>https://cognito-idp.{region}.amazonaws.com/{userPoolId}/.well-known/jwks.json</code></p>

<p>You can decode the JWK into a PEM Public Key format using a library such as <a href=""https://www.npmjs.com/package/jwk-to-pem"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/jwk-to-pem</a></p>

<pre><code>var jwkToPem = require('jwk-to-pem');

var jwk = JWK_FROM_URL,
    pem = jwkToPem(jwk);
</code></pre>

<p>Or you could do the complete verification using something like <a href=""https://github.com/cisco/node-jose"" rel=""nofollow noreferrer"">https://github.com/cisco/node-jose</a></p>

<pre><code>jose.JWK.asKey(keys[key_index])
  .then(result =&gt; jose.JWS.createVerify(result).verify)
  .then(result =&gt; JSON.parse(result.payload))
</code></pre>

<p>There's a detailed guide to decoding Cognito JWT here  <a href=""https://aws.amazon.com/premiumsupport/knowledge-center/decode-verify-cognito-json-token/"" rel=""nofollow noreferrer"">https://aws.amazon.com/premiumsupport/knowledge-center/decode-verify-cognito-json-token/</a>, with an sample of using <code>jose</code> on Cognito JWT's here: <a href=""https://github.com/awslabs/aws-support-tools/blob/master/Cognito/decode-verify-jwt/decode-verify-jwt.js"" rel=""nofollow noreferrer"">https://github.com/awslabs/aws-support-tools/blob/master/Cognito/decode-verify-jwt/decode-verify-jwt.js</a></p>
","528","<amazon-web-services><certificate><amazon-cognito><public-key>","0","0","1","2018-10-15 15:02:29","","0","1","","","","2018-10-12 15:40:06",""
"41758188","Is RSACryptoServiceProvider working correctly?","<p>I'm using .NET's implementation of RSA, and two things looked odd to me.  I'd like to confirm that it's operating properly.</p>

<h3>Background</h3>

<p>Using <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider(v=vs.110).aspx"" rel=""nofollow noreferrer""><code>System.Security.Cryptography.RSACryptoServiceProvider</code></a> with 2048-bit keyword size to perform asymmetric encryption/decrpytion, initially following the example in <a href=""https://stackoverflow.com/questions/18850030/aes-256-encryption-public-and-private-key-how-can-i-generate-and-use-it-net"">this question, ""AES 256 Encryption: public and private key how can I generate and use it .net""</a>.</p>

<p>As a first implementation, this seems to work:</p>

<pre><code>public const int  CSPPARAMETERS_FLAG = 1;      // Specifies RSA: https://msdn.microsoft.com/en-us/library/ms148034(v=vs.110).aspx
public const bool USE_OAEP_PADDING   = false;
public const int  KEYWORD_SIZE       = 2048;

public static byte[] Encrypt(byte[] publicKey, byte[] dataToEncrypt)
{
    var cspParameters = new System.Security.Cryptography.CspParameters(CSPPARAMETERS_FLAG);
    byte[] encryptedData = null;

    using (var rsaProvider = new System.Security.Cryptography.RSACryptoServiceProvider(cspParameters))
    {
        try
        {
            rsaProvider.PersistKeyInCsp = false;
            rsaProvider.ImportCspBlob(publicKey);
            encryptedData = rsaProvider.Encrypt(dataToEncrypt, USE_OAEP_PADDING);
        }
        finally
        {
            rsaProvider.PersistKeyInCsp = false;
            rsaProvider.Clear();
        }
    }
    return encryptedData;
}

public static byte[] Decrypt(byte[] privateKey, byte[] dataToDecrypt)
{
    var cspParameters = new System.Security.Cryptography.CspParameters(CSPPARAMETERS_FLAG);
    byte[] encryptedData = null;

    using (var rsaProvider = new System.Security.Cryptography.RSACryptoServiceProvider(cspParameters))
    {
        try
        {
            rsaProvider.PersistKeyInCsp = false;
            rsaProvider.ImportCspBlob(privateKey);
            encryptedData = rsaProvider.Decrypt(dataToDecrypt, USE_OAEP_PADDING);
        }
        finally
        {
            rsaProvider.PersistKeyInCsp = false;
            rsaProvider.Clear();
        }
    }

    return encryptedData;
}
</code></pre>

<p>After looking into these methods a bit more, it seems that the public key that I've been generating as from <a href=""https://stackoverflow.com/questions/18850030/aes-256-encryption-public-and-private-key-how-can-i-generate-and-use-it-net"">the example</a> seemed to have a lot of very predictable data at its start, and it was 276-bytes long.</p>

<p>Apparently <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.exportcspblob(v=vs.110).aspx"" rel=""nofollow noreferrer""><code>rsaProvider.ExportCspBlob(bool includePrivateParameters)</code></a> is a functional alternative to <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.exportparameters(v=vs.110).aspx"" rel=""nofollow noreferrer""><code>rsaProvider.ExportParameters(bool includePrivateParameters)</code></a>; the main difference is that the blob is already serialized as a <code>byte[]</code> while the other emits the object version, <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.rsaparameters(v=vs.110).aspx"" rel=""nofollow noreferrer""><code>RSAParameters</code></a>.</p>

<p>Two observations about the methods:</p>

<ol>
<li>The <code>.Exponent</code> is always <code>0x010001</code>$=65537$.</li>
<li>The exported blobs contain 17 extra bytes versus the serialized typed versions.

<ul>
<li><code>rsaProvider.ExportCspBlob()</code>:

<ul>
<li>Public key is 276 bytes.</li>
<li>Private key is 1172 bytes.</li>
</ul></li>
<li><code>RSAParameters</code>:

<ul>
<li>Public key is 259 bytes.

<ul>
<li><code>.Exponent.Length =   3</code></li>
<li><code>.Modulus .Length = 256</code></li>
</ul></li>
<li>Private key is 1155 bytes.

<ul>
<li><code>.D       .Length = 256</code></li>
<li><code>.DP      .Length = 128</code></li>
<li><code>.DQ      .Length = 128</code></li>
<li><code>.Exponent.Length =   3</code></li>
<li><code>.InverseQ.Length = 128</code></li>
<li><code>.Modulus .Length = 256</code></li>
<li><code>.P       .Length = 128</code></li>
<li><code>.Q       .Length = 128</code></li>
</ul></li>
</ul></li>
<li>The extra 17 bytes appear to be at the header of the binary blob.</li>
</ul></li>
</ol>

<h2>Concerns</h2>

<p>From this, two concerns:</p>

<ol>
<li>Is it okay for the exponent to not be random?

<ul>
<li>If the exponent is defined as a constant, then it'd seem like that's another 3 bytes I could shave off the serialization?</li>
<li>Another question, <a href=""https://security.stackexchange.com/questions/2335/should-rsa-public-exponent-be-only-in-3-5-17-257-or-65537-due-to-security-c"">Should RSA public exponent be only in {3, 5, 17, 257 or 65537} due to security considerations?</a>, seems to suggest that $\left{3, 5, 17, 257, 65537\right}$ are all common values for the exponent, so <code>0x101</code>$=65537$ seems reasonable if it's true that there's no harm in always using the same constant exponent.</li>
</ul></li>
<li>Are the 17 extra bytes an information leak?

<ul>
<li>Do they represent the option parameters like key length and method?</li>
<li>Is it a good idea to be transmitting option parameter information when I already know that both the sender and receiver are using the same, hard-coded method?</li>
</ul></li>
</ol>

<h2>Question</h2>

<p>Is <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider(v=vs.110).aspx"" rel=""nofollow noreferrer""><code>RSACryptoServiceProvider</code></a>'s behavior a cause for concern, or are these things normal?</p>

<h2>Update 1</h2>

<p>In <a href=""https://security.stackexchange.com/questions/2335/should-rsa-public-exponent-be-only-in-3-5-17-257-or-65537-due-to-security-c"">Should RSA public exponent be only in {3, 5, 17, 257 or 65537} due to security considerations?</a>, the accepted answer starts off by noting:</p>

<blockquote>
  <p>There is no known weakness for any short or long public exponent for RSA, as long as the public exponent is ""correct"" (i.e. relatively prime to p-1 for all primes p which divide the modulus).</p>
</blockquote>

<p>If this is so, then I'd guess that the apparently-constant exponent of <code>0x010001</code>$=65537$ is sufficient as long as it's relatively prime to $p-1$.  So, presumably the .NET implementation of RSA checks for this condition.</p>

<p>But then what does <code>RSACryptoServiceProvider</code> do if that condition isn't satisfied?  If it selects a different exponent, then that'd seem to leak information about $p$ whenever the exponent isn't <code>0x010001</code>.  Or, if a different key is selected, then it'd seem like we can just assume that the exponent is always <code>0x010001</code> and omit it from the serialization.</p>
","<p>Everything reported is normal, and non-alarming.</p>

<p>It is perfectly OK for the public exponent <em>e</em> to be short and non-random. <em>e</em> = 2<sup>16</sup>+1 = 65537 = 0x010001 is common and safe. Some authorities mandate it (or some range including it). Using it (or/and something significantly larger than the bit size of the public modulus) gives some protection against some of the worst RSA paddings.</p>

<p>No, the 17 extra bytes in the public key are unlikely to be an information leak; they more likely are a header part of the data format chosen for an RSA public key by the software you use. My guess is that you are encountering the MS-specific format detailed in this <a href=""https://crypto.stackexchange.com/a/41874/555"">answer</a> (perhaps, within endianness), which also uses precisely 276 bytes for an RSA public key with a 2048-bit public modulus. In that case, you should find that the extra bytes are always the same (thus they demonstrably leak nothing). And there are countless more subtle ways to leak information about the private key, like in the public modulus itself.</p>

<p>Many RSA key generators used in practice, including I guess <code>RSACryptoServiceProvider</code>, first choose <em>e</em>, then somewhat avoid generating primes <em>p</em> such that gcd(<em>e</em>, <em>p</em>-1) &ne; 1. Since <em>e</em> = 65537 is prime, it is enough that ( <em>p</em> % <em>e</em> ) &ne; 1, and this is easily checked, or otherwise insured by the process generating <em>p</em>.</p>
","516","<encryption><rsa><public-key><implementation>","0","4","1","2018-02-07 06:23:18","41758189","0","","-1","","2017-05-23 11:46:27","2017-01-18 11:45:57",""
"31274628","openpgp.js: generate public key text string from private key text string","<p>Using Javascript and openpgp.js, how can I read private key from text and produce public key?</p>

<p>I'm trying to allow user to input their private PGP key to textbox and using data in that textbox (and passphrase) produce public PGP KEY text.</p>

<p>So far I've managed to read the private key using:</p>

<pre><code>var privateKey = openpgp.key.readArmored(document.getElementById('privkeybox').value).keys[0];
privateKey.decrypt(passphrase);
</code></pre>

<p>I've also found the mysterious <code>privateKey.toPublic(privateKey);</code> function, however, I can't seem to get the whole thing going (produce the <code>BEGIN PUBLIC PGP KEY</code> - line).</p>

<p>If it does affect at all, this is done in browser.</p>
","<p>Posting an answer if someone else seems to need this, to get string form of public key from recently read private key, one can use:</p>

<pre><code>privatekey.toPublic().armor();
</code></pre>
","516","<javascript><private-key><public-key><pki><openpgp.js>","1","4","2","2018-11-27 18:45:57","","0","","595833","","2018-11-27 18:45:57","2015-07-07 16:44:05",""
"31274628","openpgp.js: generate public key text string from private key text string","<p>Using Javascript and openpgp.js, how can I read private key from text and produce public key?</p>

<p>I'm trying to allow user to input their private PGP key to textbox and using data in that textbox (and passphrase) produce public PGP KEY text.</p>

<p>So far I've managed to read the private key using:</p>

<pre><code>var privateKey = openpgp.key.readArmored(document.getElementById('privkeybox').value).keys[0];
privateKey.decrypt(passphrase);
</code></pre>

<p>I've also found the mysterious <code>privateKey.toPublic(privateKey);</code> function, however, I can't seem to get the whole thing going (produce the <code>BEGIN PUBLIC PGP KEY</code> - line).</p>

<p>If it does affect at all, this is done in browser.</p>
","<p>Works great!</p>

<p>privatekey.toPublic().armor();</p>

<p>should be: privateKey.toPublic().armor(); (capital K)</p>

<p>so:</p>

<pre><code>var privateKey = 
openpgp.key.readArmored(document.getElementById('privkeybox').value).keys[0];
privateKey.decrypt(passphrase);

privateKey.toPublic().armor();
</code></pre>

<p>minor nitpic! anyway thanks for posting, certainly helped me.</p>
","516","<javascript><private-key><public-key><pki><openpgp.js>","1","0","2","2018-11-27 18:45:57","","0","","595833","","2018-11-27 18:45:57","2015-07-07 16:44:05",""
"37217664","Bouncy Castle Generating Encryption Keys With Password","<p>I am in the process of writing an application that accesses very sensitive data (in c#). I have a requirement that says that the application will need to be able to generate public/private keys using a passphrase. This is an absolute must. I will also need to keep the old keys around. We are using bouncy castle lib and PGP. I looked through documentation and cannot seem to find a way to generate them with the phrase.</p>

<p><strong>Here is how I am generating them currently:</strong> </p>

<pre><code>var generator = new DsaKeyPairGenerator();
var paramgen = new DsaParametersGenerator();

paramgen.Init(512, 100, new SecureRandom());

var param = new DsaKeyGenerationParameters(new SecureRandom(), paramgen.GenerateParameters());

generator.Init(param);

return generator.GenerateKeyPair();
</code></pre>

<p><strong>Here is how I grab they keys:</strong></p>

<pre><code>var publicKey = new PgpPublicKey(Org.BouncyCastle.Bcpg.PublicKeyAlgorithmTag.Dsa, keys.Public, DateTime.Now);
var privateKey = new PgpPrivateKey(keys.Private, publicKey.KeyId);
</code></pre>

<p>Is there a way to do this whether it be in bouncy castle or any other encryption lib?</p>
","","515","<c#><encryption><bouncycastle><private-key><public-key>","0","","0","2016-05-13 20:14:23","","2","","3159635","","2016-05-13 20:14:23","2016-05-13 19:11:26",""
"37230706","getting public key format in javascript","<p>I want to detect and validate (the format) of public keys, using javascript
are thy any libraries out there that can help me?
Basically I want a user to paste his key into a textarea and then I want to parse it to validate that this is in fact a rsa\ssh\etc. key, get the key name (description), bit size and any other relevant info.
Thank you.</p>
","<p>You should be able to do it with a regular expression.
This one matches the format that openssl outputs in.</p>

<pre><code>var re = new RegExp(""^-----BEGIN CERTIFICATE-----\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{64}\r?\n[A-Za-z0-9+\/=]{38}==\r?\n-----END CERTIFICATE-----\r?\n?$"");

re.test(""-----BEGIN CERTIFICATE-----\n""+
""MIICWDCCAcGgAwIBAgIJAPoiU8TwxKfZMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV\n""+
""BAYTAkFVMRMwEQYDVQQIDApTb21lLVN0YXRlMSEwHwYDVQQKDBhJbnRlcm5ldCBX\n""+
""aWRnaXRzIFB0eSBMdGQwHhcNMTYwOTIxMjI1NzAzWhcNMjEwOTIwMjI1NzAzWjBF\n""+
""MQswCQYDVQQGEwJBVTETMBEGA1UECAwKU29tZS1TdGF0ZTEhMB8GA1UECgwYSW50\n""+
""ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\n""+
""gQDKylIukm5ZNIFsFxqMNlqazn+bWlzSXnATvyu783KMTXGRMbKb8C+SVra3gofs\n""+
""0D7cgPPECMINFP0PEGBvN6iQXaJOL4YQUbl2FQOQEi6xOATytaWqaHy9DiZ8zeRs\n""+
""WhT/m+6fjefZD1FhBaIAPi2dy/TKSBo61SU9f2O0NyyIiQIDAQABo1AwTjAdBgNV\n""+
""HQ4EFgQUpyK5bWplT+owyTHUUD5FG5frc80wHwYDVR0jBBgwFoAUpyK5bWplT+ow\n""+
""yTHUUD5FG5frc80wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAupycX\n""+
""kF3RhL0bUmxbh1nZaZ0ZAuWh4A1pc5XjwSGYLhWMHpNmrIvGnlUuyQlyE6L45DR2\n""+
""JekCMC0TBK8mv2BpaUCcPA844LSix1lSoNvuGQ7GRuLvPDDY/v8I28mRLsLmqxg2\n""+
""uz3VNtJwu/igOCf4mDI9ZoQWPBRb+pqXJ42V8Q==\n""+
""-----END CERTIFICATE-----\n"");

// outputs 'true'
</code></pre>
","514","<javascript><public-key-encryption><public-key>","0","1","1","2016-09-22 23:49:25","","1","","","","","2016-05-14 19:00:02",""
"20146977","How to convert public key generation from java to php?","<p>I'm having trouble to verify a signature in php
I have this code in java that i got from an example from the sdk i'm using to validate a signature</p>

<pre><code>byte[] decodedKey = Base64.decode(encodedPublicKey);
KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));
</code></pre>

<p><strong>Edit:</strong></p>

<p>I got this in PHP</p>

<pre><code>$key =  ""-----BEGIN PUBLIC KEY-----\n"".
chunk_split($pubkey, 64,""\n"").
'-----END PUBLIC KEY-----';                                          
$key = openssl_get_publickey( $key );
</code></pre>

<p>i'm using this public </p>

<pre><code>$pubkey = MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCwqCxyefoAoEodTPuM79tkfgpkWGgarh5UxFLMIf7fch9LQWlrDsaoeIBTCs3H4DXaM1mz6bDgOfGRitSwZap0COSkYKf12wVrSM75HzyIXtQcRwdzCICvTGiTjLwXxuoQXn6onyRShsjFLQibYa6GH3LBsHAfWtTcmE8glgGODwIDAQAB
</code></pre>

<p>My question is, is the public key that i get from Java the same public key i'm getting from php to validate the signature? I think that maybe i'm missing something in the php script to get the correct public key to validate a signature.</p>

<p>Thanks.</p>
","<p>In the end i was receiving a different string from a javascript (the format was somehow different) and the following code worked with the same public key, data and signature as in java.</p>

<pre><code>$key =  ""-----BEGIN PUBLIC KEY-----\n"".
        chunk_split($pubkey, 64,""\n"").
       '-----END PUBLIC KEY-----';  
$key = openssl_get_publickey($key);
$signature = base64_decode($signature);
$validated = openssl_verify($data, $signature, $key);        
return $validated; 
</code></pre>
","513","<java><php><public-key>","0","0","1","2013-12-02 15:34:17","20331957","0","","1190388","","2013-11-25 12:14:18","2013-11-22 14:14:15",""
"46921430","OpenSSL certificate creation and pem/cer output","<p>There are a few similar question here, but none of them answered my case. I am attempting to get an SSL certificate to work in CURL over HTTPS for a web service.</p>

<p>First, I created the csr</p>

<pre><code>openssl req -newkey rsa:2048 -keyout myserver_private.key -out myserver_pkcs10.csr
</code></pre>

<p>I have both of these files on my linux box.</p>

<p>I sent the csr file to be signed by the web service and they sent back:</p>

<p><code>signingauthority_Root_CA.crt</code>, <code>myserver_pkcs10.csr</code>, <code>theirserver_CA.crt</code></p>

<p>For my <code>curl_setopt($ch, CURLOPT_SSLCERT, ""?.pem"");</code> I now need the .pem file. How do I create this and from which file? <code>theirserver_CA.crt</code>?</p>

<p>Do I also need to use <code>curl_setopt($ch, CURLOPT_CAINFO, ""?.cer"");</code> and if so, how do I create this .cer file? Is this the intermediary aka signing authority?</p>
","<p>Open the <code>*.crt</code> files with a text editor. If they are PEM, they wil contain blocks of Base64 text delimited with <code>-----BEGIN CERTIFICATE-----</code> and <code>-----END CERTIFICATE-----</code>.</p>

<p>If that's the case, simply rename the file.</p>

<p>If the file is a binary file it is DER.  To convert to Base64 (PEM) use:</p>

<pre><code>openssl x509 -in &lt;DER filename&gt; -outform PEM -out &lt;PEM filename&gt;
</code></pre>

<p>The <code>CURLOPT_CAINFO</code> will be <code>theirserver_CA.crt</code></p>

<p>I'd have thought the CA would have sent back <code>myserver.crt</code> too, which would be used for <code>CURLOPT_SSLCERT</code>.</p>

<p>Use:</p>

<pre><code>openssl x509 -noout -subject -issuer -in &lt;PEM file&gt;
</code></pre>

<p>to view the subject and issuer of each certificate in order to work out what you've been sent.</p>
","509","<curl><https><private-key><public-key><php-openssl>","0","1","1","2017-10-25 09:50:05","","0","","608639","","2017-10-25 09:50:05","2017-10-24 23:17:30",""
"36630232","Error converting byte array to PublicKey java","<p>while trying to convert byte[] array to PublicKey I'm getting an error:</p>

<blockquote>
  <p>Exception in thread ""main"" java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: IOException: short read of DER octet string
      at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(Unknown Source)
      at java.security.KeyFactory.generatePublic(Unknown Source)</p>
</blockquote>

<p>This is part of code that gives me this error:</p>

<pre><code>byte[] publicKeyBytes = keystring.getBytes();
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyBytes);
PublicKey publicKey2 = keyFactory.generatePublic(publicKeySpec);
</code></pre>

<p>Checked before, byte[] array that i'm getting from string is the same as the original one.
Thanks</p>
","<p>According to your comments you convert the bytes of the encoded public key directly to <code>String</code> using the default encoding, which will for sure drop/replace some of the bytes. See the JavaDoc for <a href=""https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#String%28byte[]%29"" rel=""nofollow""><code>new String(bytes[])</code></a>.</p>

<p>So the content of <code>pair.getPublic().getEncoded()</code> and <code>keystring.getBytes()</code> won't be the same.</p>

<p>Use a suitable transport encoding, like <a href=""https://en.wikipedia.org/wiki/Base64"" rel=""nofollow"">Base64</a>. On Java 8, you can use <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html"" rel=""nofollow""><code>java.util.Base64</code></a> for that, on older platforms the <a href=""https://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/binary/Base64.html"" rel=""nofollow"">Apache Commons Codec's <code>Base64</code></a> class can be used.</p>
","509","<java><public-key>","1","-1","1","2016-04-14 18:19:22","36630670","4","","","","","2016-04-14 17:38:40",""
"45288934","Is there a way I can generate .pub public key using putty?","<p>I have putty installed on my windows system. And basically, I can generate public/private keys.</p>

<p>I generated a public key, which was asked to be uploaded to a server. I copied it in a .txt file, and gave those concerned to upload it. But they came back and said it must be in a '.pub' format. How do I go about this?</p>

<p>Note I'm using SSH-1 format for generation.</p>
","<p>I'm not sure what format .pub is, but from the Putty ""Help"" documentation there appear to be several open formats available for the public key. Fire up puttygen and check out the Conversions tab--neither says "".pub format"", but my guess is the OpenSSH or ssh.com format is the one--you will just have to try them both and see what works.</p>

<p>You can also go the other route and have the key generated on the remote system and try importing the private key into your Putty key chain. That might work too and will guarantee its compatible with the remote system.</p>

<p>Once you get that working, get Filezilla and load your key into that--then the world is your oyster! You can connect to any ssh and sftp files with a pretty gui. </p>

<p>Good Luck.</p>
","507","<putty><public-key>","0","0","1","2017-07-27 03:09:33","","0","","23528","","2017-07-24 19:52:47","2017-07-24 19:51:11",""
"20279402","Bouncy Castle Getting content from signature and X509Certificate","<p>I am very new to Bouncy Castle.I want to know is there any way using Bouncy Castle API that i can get original content if i only have signature using X509Certificate with public key.I am not finding any way as we have only public key.We don't have private key which is used to sign the message.</p>
","<p>If one has created a <em>detached</em> signature and you have only that signature (and no original data) then you are out of luck.</p>

<p>If the signature is wrapping, then surely you can get original data back. Signed data doesn't require a private key to be verified and extracted. Public key (actually the certificate with the key) can be included in the wrapping signature in which case you don't even need the certificate separately. </p>
","506","<java><x509certificate><bouncycastle><public-key><message-digest>","0","0","1","2013-11-29 08:30:59","","3","","","","","2013-11-29 06:06:02",""
"20937241","openssl RSA public key does not match key read from C code","<p>I've created a public key file using the following commands:</p>

<pre><code>openssl genrsa -out mykey.pem 2046
openssl rsa -in mykey.pem -pubout &gt; mykey.pub
</code></pre>

<p>I then read it from some C code:</p>

<pre><code>public_key = PEM_read_RSA_PUBKEY(fp, NULL, NULL, NULL);
</code></pre>

<p>and then obtain the DER form of this public key:</p>

<pre><code>int len = i2d_RSAPublicKey (public_key, NULL);
buf = (unsigned char *) malloc (len);
i2d_RSAPublicKey (public_key, &amp;buf);
</code></pre>

<p>here len == 269</p>

<p>but the command line openssl tells me:</p>

<pre><code>openssl rsa -outform der  -pubin -inform pem -in mykey.pub | wc
writing RSA key
       1      10     293
</code></pre>

<p>When I print out the DER forms from openssl and my C code they, obviously don't match and oddly, the DER for that my C code obtains has a lot of zeros.</p>

<p>What could I be doing wrong?</p>
","<p>I should have obtained the DER form using i2d_RSA_PUBKEY().  Also, passing &amp;buf to the method should have warned me that the pointer was being modified.  I have no idea why it gets modified and what it points to after the call.</p>

<p>So now I do</p>

<pre><code>der_form = throw_away = (unsigned char *) malloc (len);
i2d_RSAPublicKey (public_key, &amp;throw_away);
</code></pre>

<p>and use the contents of der_form.</p>
","505","<c><openssl><public-key><der>","2","2","1","2014-01-06 00:33:06","","0","","","","","2014-01-05 18:12:06",""
"55442785","error 128 when trying to clone a git repository using jenkins","<p>I can clone my git repository on the Linux server that hosts the Jenkins app, but when I'm trying to create a new Jenkins job to do so, I'm getting error 128.</p>

<p>""Failed to connect to repository : Command ""git ls-remote -h ssh://git@bitbucket.org/user/proj.git HEAD"" returned status code 128:
stdout: 
stderr: Permission denied (publickey). 
fatal: Could not read from remote repository.</p>

<p>Please make sure you have the correct access rights
and the repository exists.""</p>

<p>Things I did</p>

<ol>
<li><p>Install git on the Linux server.</p></li>
<li><p>Install BitBucket plugin and it's dependencies on the Jenkins app.</p></li>
<li><p>Create an SSH key.</p></li>
<li>Import the key to BitBucket and to Jenkins folder.</li>
<li>Set permissions to Jenkins user on the SSH key.</li>
<li>I created SSH credentials on Jenkins app.</li>
</ol>

<p><strong>WORKS ON TERMINAL</strong></p>

<p><code>
bash-4.2$
bash-4.2$ whoami
jenkins
bash-4.2$ ssh -T git@bitbucket.org
authenticated via a deploy key.
You can use git or hg to connect to Bitbucket. Shell access is disabled.
This deploy key has read access to the following repositories:
user/proj: test3 -- jenkins@git
</code>
.
.</p>

<p><code>
git -c core.askpass=true ls-remote -h ssh://git@bitbucket.org/user/proj.git
[ec2-user@ip-172-31-31-13 ~]$ git -c core.askpass=true ls-remote -h ssh://git@bitbucket.org/user/proj.git
db710fbf01f08789cf5c15e66269013f8e1543d4        refs/heads/master
</code></p>

<p><strong>IMAGES:</strong></p>

<p><a href=""https://i.stack.imgur.com/LUVOY.png"" rel=""nofollow noreferrer"">1-linux jenkins ver</a></p>

<p><a href=""https://i.stack.imgur.com/sdRu7.png"" rel=""nofollow noreferrer"">2-ssh 2 git using default user</a></p>

<p><a href=""https://i.stack.imgur.com/u62BD.png"" rel=""nofollow noreferrer"">3-ssh 2 git using jenkins user</a></p>

<p><a href=""https://i.stack.imgur.com/sO5Bb.png"" rel=""nofollow noreferrer"">4-ssh rsa keys</a></p>

<p><a href=""https://i.stack.imgur.com/IQFCH.png"" rel=""nofollow noreferrer"">5-jenkins auth keys</a></p>

<p><a href=""https://i.stack.imgur.com/dbXP2.png"" rel=""nofollow noreferrer"">6-jenkins cred</a></p>

<p><a href=""https://i.stack.imgur.com/XpNtH.png"" rel=""nofollow noreferrer"">7-jenkins web error</a></p>
","<p>I would try to write the URL of the git repository, when configuring it in Jenkins, as <code>git@[...]</code> instead of <code>ssh://git@[...]</code></p>

<p>On the other hand, the key you have introduced as private key of <code>test3</code> (<code>ssh-rsa AAA[...]</code>) doesn't seem to be a private key. It looks like the public key instead. The private key is a block that starts with <code>-----BEGIN RSA PRIVATE KEY-----</code> and ends with <code>-----END RSA PRIVATE KEY-----</code>. In your case I think it's stored in the file named <code>jenkins_bitbucket_access</code> (the public key is stored in <code>jenkins_bitbucket_access.pub</code>) </p>
","501","<git><jenkins><bitbucket><permission-denied><public-key>","-1","0","2","2019-04-02 13:47:11","55444602","0","","11285744","","2019-03-31 16:17:24","2019-03-31 16:03:59",""
"55442785","error 128 when trying to clone a git repository using jenkins","<p>I can clone my git repository on the Linux server that hosts the Jenkins app, but when I'm trying to create a new Jenkins job to do so, I'm getting error 128.</p>

<p>""Failed to connect to repository : Command ""git ls-remote -h ssh://git@bitbucket.org/user/proj.git HEAD"" returned status code 128:
stdout: 
stderr: Permission denied (publickey). 
fatal: Could not read from remote repository.</p>

<p>Please make sure you have the correct access rights
and the repository exists.""</p>

<p>Things I did</p>

<ol>
<li><p>Install git on the Linux server.</p></li>
<li><p>Install BitBucket plugin and it's dependencies on the Jenkins app.</p></li>
<li><p>Create an SSH key.</p></li>
<li>Import the key to BitBucket and to Jenkins folder.</li>
<li>Set permissions to Jenkins user on the SSH key.</li>
<li>I created SSH credentials on Jenkins app.</li>
</ol>

<p><strong>WORKS ON TERMINAL</strong></p>

<p><code>
bash-4.2$
bash-4.2$ whoami
jenkins
bash-4.2$ ssh -T git@bitbucket.org
authenticated via a deploy key.
You can use git or hg to connect to Bitbucket. Shell access is disabled.
This deploy key has read access to the following repositories:
user/proj: test3 -- jenkins@git
</code>
.
.</p>

<p><code>
git -c core.askpass=true ls-remote -h ssh://git@bitbucket.org/user/proj.git
[ec2-user@ip-172-31-31-13 ~]$ git -c core.askpass=true ls-remote -h ssh://git@bitbucket.org/user/proj.git
db710fbf01f08789cf5c15e66269013f8e1543d4        refs/heads/master
</code></p>

<p><strong>IMAGES:</strong></p>

<p><a href=""https://i.stack.imgur.com/LUVOY.png"" rel=""nofollow noreferrer"">1-linux jenkins ver</a></p>

<p><a href=""https://i.stack.imgur.com/sdRu7.png"" rel=""nofollow noreferrer"">2-ssh 2 git using default user</a></p>

<p><a href=""https://i.stack.imgur.com/u62BD.png"" rel=""nofollow noreferrer"">3-ssh 2 git using jenkins user</a></p>

<p><a href=""https://i.stack.imgur.com/sO5Bb.png"" rel=""nofollow noreferrer"">4-ssh rsa keys</a></p>

<p><a href=""https://i.stack.imgur.com/IQFCH.png"" rel=""nofollow noreferrer"">5-jenkins auth keys</a></p>

<p><a href=""https://i.stack.imgur.com/dbXP2.png"" rel=""nofollow noreferrer"">6-jenkins cred</a></p>

<p><a href=""https://i.stack.imgur.com/XpNtH.png"" rel=""nofollow noreferrer"">7-jenkins web error</a></p>
","<p>Problem solved!
I used my public key <strong>instead</strong> of the private key when I created the SSH credentials on Jenkins Web... now it all works :)</p>
","501","<git><jenkins><bitbucket><permission-denied><public-key>","-1","0","2","2019-04-02 13:47:11","55444602","0","","11285744","","2019-03-31 16:17:24","2019-03-31 16:03:59",""
"27356700","How to get bits from a SecKeyRef","<p>My aim is to compare two public keys.
How can I get NSData from a SecKeyRef.
Is there a direct way to compare SecKeyRef instances?
P.S. - I dont have the private key with me.</p>

<p>Edit :Its for mac not iOS.</p>
","<p>There are 2 ways to do it</p>

<ol>
<li><p>Use <code>SecKeyCopyAttributes</code> function</p>

<pre><code>CFDictionaryRef attrs = SecKeyCopyAttributes(key);
CFDataRef data = (CFDataRef) CFDictionaryGetValue(attrs, kSecValueData);
CFShow(data);
</code></pre></li>
<li><p>Use <code>SecKeyCopyExternalRepresentation</code> function</p>

<pre><code>CFDataRef data = SecKeyCopyExternalRepresentation(key, NULL);
CFShow(data);
</code></pre></li>
</ol>

<p><strong>Output</strong></p>

<pre><code>&lt;CFData 0x102067100 [0x7fff8df69980]&gt;{length = 294, capacity = 1024, bytes = 0x30820122300d06092a864886f70d0101 ... 835b510203010001}
</code></pre>
","501","<macos><cocoa><public-key><seckeyref>","0","0","1","2018-04-05 21:50:35","","3","","3471339","","2014-12-08 11:56:23","2014-12-08 11:11:03",""
"27969830","string to publicKey","<p>there. I'm implementing Diffie Hellman key exchange protocol between a java application and a php server.I have some issue when i get the key from the php server, the key is a String format and i want to convert it to a PublicKey to perform the protocol.
The code is the next:</p>

<pre><code>public static PublicKey getPublicKey(String publicKey) throws Exception {
    byte[] byteKey =publicKey.getBytes();
    X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(byteKey);
    KeyFactory keyFact = KeyFactory.getInstance(""DH"");
    PublicKey pubKey = keyFact.generatePublic(x509KeySpec);
    DHPublicKey dhPublicKey;
    return pubKey;
}
</code></pre>

<p>when i run this function i've got this exception:</p>

<pre><code>Exception in thread ""main"" java.security.spec.InvalidKeySpecException: Inappropriate key specification
at com.sun.crypto.provider.DHKeyFactory.engineGeneratePublic(DHKeyFactory.java:87)
at java.security.KeyFactory.generatePublic(Unknown Source)
at main2.getPublicKey(main2.java:47)
at main2.main(main2.java:108)
</code></pre>

<p>The key is a big integer type like:""2730833911517276610828829348409530515930034154987099616280024338836450623403836102419905982575105923164305996145622906355021487887788144551871008554848191""
How can i correct this problem?
Thank you for your time</p>
","<p>i've resolved the problem thank's to user3062946. Here's the code:</p>

<pre><code>public static PublicKey getPublicKey(BigInteger publicKey, BigInteger p, BigInteger g) throws Exception {
    DHPublicKeySpec dhspec=new DHPublicKeySpec(publicKey,p,g);
    KeyFactory keyFact = KeyFactory.getInstance(""DH"");
    PublicKey pubKey = keyFact.generatePublic(dhspec);

    return pubKey;
}
</code></pre>
","500","<java><string><public-key>","1","0","1","2015-01-16 14:26:32","","2","","","","","2015-01-15 17:51:16",""
"42709020","Is there a default label for the built-in RSA-OAEP encryption in Java?","<p>I am implementing my own version of RSA-OAEP with SHA-256. I want to test it by comparing it to the output of the Cipher class in Java using RSA-OAEP and SHA-256. According to PKCS #1, RSA-OAEP requires a label, which by default is an empty string. However, I can't find a way to input a label in the built-in class. My implementation seems to work correctly for both encryption and decryption, but Cipher class produces different output. Is there a default label which the Cipher class uses?</p>
","<p>What is called label L in PKCS1v2.1 RSAES-OAEP was called encoding parameters P in v2.0; see the description of pSourceAlgorithm in A.2.1. The Java API keeps the old terminology, presumably for compatibility, and the default is indeed an empty octet string, implemented in Java as a <code>byte</code> array of length 0. See <a href=""https://docs.oracle.com/javase/7/docs/api/javax/crypto/spec/PSource.PSpecified.html"" rel=""nofollow noreferrer"">https://docs.oracle.com/javase/7/docs/api/javax/crypto/spec/PSource.PSpecified.html</a> . Note that even when P-call-me-L is empty, its <em>hash</em> which goes in DB before masking is not empty.</p>

<p>When you say 'different output', you do realize that OAEP is randomized (in a way that provably does not leak information to the adversary) and every encryption of the same plaintext should produce a unique ciphertext, but all of them should decrypt back to the same plaintext, right?</p>
","499","<rsa><public-key>","0","2","1","2017-03-10 11:30:08","","0","1","","","","2017-03-10 02:20:21",""
"8671251","Verify and decrypt signature generated with a pvk.key and BouncyCastle crypto apis","<p>I have an applet that uses a ""foo.key"" file and a string password to generate a privateKey object, using BouncyCastle apis. Then a signature is created using this privateKey object and a string such as ""MYNAMEHERE"". All I know is that the algorythm used to generate this signature is RSA.</p>

<p>What I want to do is to decrypt (or verify) this signature in PHP. I have both files publicKey (file.cer) and privateKey (file.key) that where used to generate the privateKey object in Java.</p>

<p>Im trying using the openssl_verify functions in PHP, passing the values:<br>
openssl_verify(""MYNAMEHERE"", $signature, ""file.cer""), where $signature contains the String representation of the signature object generated in Java: new String (signature).</p>

<p>I dont know if this process is correct to verify the signature, or what kind of encoding/decoding process i have to do before using this function.</p>

<p>I hope somebody points me the right direction!</p>

<p>Thanks in advance!</p>
","<p>You haven't given enough information, such as the actual signature or how it is encoded. Normally RSA means RSA in PKCS#1 1.5 mode using SHA-1 (Google it) which is more or less the default signature generation/verification algorithm in use today. In that case, the verify should proceed as you've described. The password is not needed anymore, it might just be used to decrypt the private key. You can still use the private key to see if an sign in PHP/openssl does create the same data. If not, a different hash or PKCS#1 v2.1 signature may have been used.</p>
","499","<php><encryption><openssl><bouncycastle><public-key>","0","0","1","2012-01-02 00:59:29","","4","","","","","2011-12-29 17:40:55",""
"3019263","Create a service that connects to remote database and uses public key encryption","<p>I have been searching all day and reading many tutorials and still I am confused. I am working on a project that has the following requirements as specified by the client (customer - not to be confused with client app):</p>

<ol>
<li>Connect to a remote server and verify that connection was successful.</li>
<li>Connect to Web service on said server via SOAP.</li>
<li>Authenticate with service using public key encryption</li>
<li>Upon successful authentication, push a list of products and categories to a MSSQL database on remote server via the Web service.</li>
</ol>

<p>The client is a Winforms application written in C#. So far, I have created a WCF Service Application with separate services for the products and categories but I cannot figure the rest out.</p>

<p>Can anyone point me in the direction of a tutorial or tutorials that cover these requirements?</p>

<p>Many thanks in advance!</p>

<p>Joe</p>
","<p>Well.. you'll want to interface with the database using a Data Access Layer of some sort. Your options are rolling your own.. or using pre-made solutions such as Linq2SQL, Entity Framework, nHibernate, SubSonic etc.</p>

<p>In regards to security, if transmission of data with the webservice is the issue you could simply use HTTPS.</p>
","498","<c#><database><wcf><soap><public-key>","1","1","2","2010-06-18 05:53:55","","2","1","","","","2010-06-10 23:27:44",""
"3019263","Create a service that connects to remote database and uses public key encryption","<p>I have been searching all day and reading many tutorials and still I am confused. I am working on a project that has the following requirements as specified by the client (customer - not to be confused with client app):</p>

<ol>
<li>Connect to a remote server and verify that connection was successful.</li>
<li>Connect to Web service on said server via SOAP.</li>
<li>Authenticate with service using public key encryption</li>
<li>Upon successful authentication, push a list of products and categories to a MSSQL database on remote server via the Web service.</li>
</ol>

<p>The client is a Winforms application written in C#. So far, I have created a WCF Service Application with separate services for the products and categories but I cannot figure the rest out.</p>

<p>Can anyone point me in the direction of a tutorial or tutorials that cover these requirements?</p>

<p>Many thanks in advance!</p>

<p>Joe</p>
","<p>I have worked out the following solution:</p>

<ol>
<li>User enters username, password and public key</li>
<li>Program connects to remote WCF service which checks provided username and password against database on server to ensure that they are correct - username and password are sent via custom MessageContract.</li>
<li>Upon successful authentication, server sends response back to client to let it know to proceed.</li>
<li>User selects products and categories to send to remote server. </li>
<li>Selected information is encrypted by the client with user's public key and decrypted at the server with the corresponding private key.</li>
<li>Decrypted information is stored in database.</li>
</ol>

<p>Am I on the right track?</p>
","498","<c#><database><wcf><soap><public-key>","1","0","2","2010-06-18 05:53:55","","2","1","","","","2010-06-10 23:27:44",""
"36209805","Error verifying message using Crypto++ on iOS","<h1>Problem</h1>

<p>I am trying to verify a given message with its signature and public key. It works fine using the iOS provided Security Framework, but I cannot manage to make it work using the Crypto++ library (must use).</p>

<p>I followed the same steps using the CryptoPP Library and verified everything 10 times, rewrote some parts differently, but it still throws the same exception: </p>

<blockquote>
  <p>""PK_Signer: key too short for this signature scheme""</p>
</blockquote>

<h1>context</h1>

<h3>Data worked with</h3>

<ul>
<li>I receive a JWT (Json Web Token) with a header, payload and signature.</li>
<li>I retrieve the service's base64 encoded X509 certificate (which includes the public key).</li>
</ul>

<h3>Steps followed for verification</h3>

<ol>
<li><p><strong>Certificate</strong></p>

<ol>
<li>Base64 decode the certificate</li>
<li>Extract the public key from certificate</li>
</ol></li>
<li><p><strong>Signature (third segment of a JWB)</strong></p>

<ol>
<li>Pad the signature to a multiple of 4 with some ""=""</li>
<li>URLBase64 decode it</li>
</ol></li>
<li><p><strong>Message to verify</strong></p>

<ol>
<li>Message = (JSW Header) + ""."" + (JWT Payload). This is already done in the code, message is argument named ""headerAndPayload.</li>
</ol></li>
<li><p><strong>Verify SHA256 bytes with PKCS1, RSA</strong></p>

<ol>
<li>SHA256 digest of the Message</li>
<li>Verification using:

<ol>
<li>Public Key</li>
<li>SHA256 Digest of the message</li>
<li>Signature</li>
</ol></li>
</ol></li>
</ol>

<h2>iOS Working Code</h2>

<p>(Only parts that matter, as verification works fine on iOS)</p>

<ul>
<li><p><strong>Certificate</strong></p>

<ol>
<li><p><code>NSData *certificateData = [[NSData alloc] initWithBase64EncodedString:certificateString options:0];</code></p></li>
<li><p><code>SecKeyRef getPublicKeyFromCertificate(certificateData)</code> found online, works fine.</p></li>
</ol></li>
<li><p><strong>Verify SHA256 bytes with PKCS1, RSA</strong></p>

<pre><code>BOOL PKCSVerifyBytesSHA256withRSA(NSData* message, NSData* signature, SecKeyRef publicKey)
{
    size_t signedHashBytesSize = SecKeyGetBlockSize(publicKey);
    const void* signedHashBytes = [signature bytes];

    size_t hashBytesSize = CC_SHA256_DIGEST_LENGTH;
    void* hashBytes = malloc(hashBytesSize);
    if (!CC_SHA256([message bytes], (CC_LONG)[message length], hashBytes)) {
        return NULL;
    }

    OSStatus status = SecKeyRawVerify(publicKey,
                                  kSecPaddingPKCS1SHA256,
                                  hashBytes,
                                  hashBytesSize,
                                  signedHashBytes,
                                  signedHashBytesSize);

    return status == errSecSuccess;
}
</code></pre></li>
</ul>

<h2>Code using CryptoPP Library (working with same set of data)</h2>

<p>I copy/paste the whole code with numbers corresponding to the description and some additional comments, like size of structures returned.</p>

<pre><code>+(bool)verifyBase64EncodedCertificate:(NSString *)certificateString
         base64URLEncodedJWTSignature:(NSString *)urlEncodedSignature
                              message:(NSString *)headerAndPayload
{
    // 1. Certificate
    // 1.1 Decode the certificate
    std::string base64EncodedCertificate = certificateString.UTF8String;
    std::string decodedCertificate;
    CryptoPP::StringSource ss(base64EncodedCertificate,
                              true,
                              new CryptoPP::Base64Decoder(new CryptoPP::StringSink(decodedCertificate))
                              );

    // 1.2 Extract Public Key from certificate
    CryptoPP::ByteQueue certificateByteQueue, publicKeyByteQueue;
    certificateByteQueue.Put((byte *)&amp;decodedCertificate[0], decodedCertificate.size());
    certificateByteQueue.MessageEnd();
    try
    {
        GetPublicKeyFromCert(certificateByteQueue, publicKeyByteQueue);
        // This method comes from CryptoPP docs so I assume it works... certificate gets checked again later on.
    }
    catch(std::exception &amp;)
    {
        std::cerr &lt;&lt; ""Failed to extract the public key from the CA certificate."" &lt;&lt; std::endl;
        return nil;
    }
    //publicKeyByteQueue.CurrentSize() = 294


    // 2. Decode Signature
    std::string base64URLEncodedSignature = urlEncodedSignature.UTF8String;
    unsigned long paddingForURLEncodedSignature = 4 - (base64URLEncodedSignature.length() % 4);
    base64URLEncodedSignature.insert(base64URLEncodedSignature.begin(), paddingForURLEncodedSignature, '=');
    std::string decodedSignature;
    CryptoPP::StringSource ss1(base64URLEncodedSignature,
                               true,
                               new CryptoPP::Base64URLDecoder(new CryptoPP::StringSink(decodedSignature))
                               );
    const byte *decodedSignaturePointer = (byte *)&amp;decodedSignature[0];
    size_t decodedSignatureSize = decodedSignature.size();

    // Certificate Signature as Byte Block
    CryptoPP::SecByteBlock certSignature;
    certSignature.Assign(decodedSignaturePointer, decodedSignatureSize);

    // decodedSignatureSize = 256
    // certSignature.size() = 256


    // 3. Message to verify (available already concatenated)
    std::string message = headerAndPayload.UTF8String;
    const byte *messagePointer = (const byte *)message.c_str();
    const size_t messageLength = message.length();        
    // MessageLength = 693

    // 4.1 hash message using SHA256
    byte digest [CryptoPP::SHA256::DIGESTSIZE];
    CryptoPP::SHA256().CalculateDigest(digest, messagePointer, messageLength);

    // 4.2  Create Verifier assigned public key and test
    CryptoPP::AutoSeededRandomPool prng;
    CryptoPP::RSASS&lt;CryptoPP::PKCS1v15, CryptoPP::SHA256&gt;::Verifier verifier;
    verifier.AccessKey().Load(publicKeyByteQueue);
    if (!verifier.AccessKey().Validate(prng, 3))
    {
        throw CryptoPP::Exception(CryptoPP::Exception::OTHER_ERROR, ""Failed to validate public key"");
    }        

    // verifier.SignatureLength() = 256 = certSignature.size()
    if(certSignature.size() != verifier.SignatureLength())
    {
        std::cerr &lt;&lt; ""The signature size is does not match the algorithm used for signing."" &lt;&lt; std::endl;
        return 0;
    }

    // 4. Actual Verification (1st way of doing it)
    CryptoPP::SignatureVerificationFilter vf(verifier);
    try
    {
        vf.Put(digest, CryptoPP::SHA256::DIGESTSIZE);
        vf.Put(certSignature, certSignature.size());
        vf.MessageEnd(); // Throws exception here PK_Signer: key too short for this signature scheme
    }
    catch(std::exception &amp;e)
    {
        std::cerr &lt;&lt; ""Caught an exception while verifying the signature:"" &lt;&lt; std::endl;
        std::cerr &lt;&lt; ""\t"" &lt;&lt; e.what() &lt;&lt; std::endl;
        return 0;
    }
    if(vf.GetLastResult())
    {
        std::cout &lt;&lt; ""The signature verified."" &lt;&lt; std::endl;
    }
    else
    {
        std::cout &lt;&lt; ""Signature verification failed."" &lt;&lt; std::endl;
    }
    return 1;


    // 4. Actual Verification (2d way of doing it)
    bool verified = verifier.VerifyMessage(digest,                  CryptoPP::SHA256::DIGESTSIZE,
                                           decodedSignaturePointer, decodedSignatureSize);
    // Also throw same exception PK_Signer: key too short for this signature scheme

    return verified;
</code></pre>

<p>The only difference I can see between the pure iOS code and the CryptoPP code is during the verification process, the iOS method takes an additional argument <em>kSecPaddingPKCS1SHA256</em></p>

<pre><code>SecKeyRawVerify(publicKey,
                kSecPaddingPKCS1SHA256,
                ...)
</code></pre>

<p>But otherwise I feel like I have replicated exactly the same concepts using the CryptoPP library.</p>

<p>Any help is very appreciated, thanks.</p>
","<blockquote>
  <p>vf.Put(digest, CryptoPP::SHA256::DIGESTSIZE);</p>
</blockquote>

<p>The signature is <em>not</em> the hash size. The signature is the size of the modulus (or more correctly, <strong><em><code>[0,n-1]</code></em></strong>). After protocol framing, the signature may be larger than the modulus size. Also see <a href=""https://crypto.stackexchange.com/q/3505"">What is the length of an RSA signature?</a> on the Cryptography Stack Exchange.</p>

<p>As for creating an equivalent iOS example, using the ""Raw Sign"" or ""Raw Encrypt"", see <a href=""http://www.cryptopp.com/wiki/Raw_RSA"" rel=""nofollow noreferrer"">Raw RSA</a> on the Crypto++ wiki. Its usually a bad idea for you to do the low level things like a modular exponentiation. You should try to stay in the protocols and cryptosystems, like <code>RSASSA_PKCS1v15_SHA_Signer</code> and <code>RSASSA_PKCS1v15_SHA_Verifier</code>.</p>

<p>Also checkout the <a href=""http://www.cryptopp.com/docs/ref/annotated.html"" rel=""nofollow noreferrer""><code>RSASS</code> class</a>, which is RSA Signature Scheme. I'm guessing you will probably want a <code>RSASS&lt;PKCS1v15, SHA256&gt;::Signer</code> and <code>RSASS&lt;PKCS1v15, SHA256&gt;::Verifier</code>:</p>

<pre><code>$ grep -IR Signer * | grep typedef
luc.h:typedef LUCSS&lt;PKCS1v15, SHA&gt;::Signer LUCSSA_PKCS1v15_SHA_Signer;
pubkey.h:   typedef PK_FinalTemplate&lt;TF_SignerImpl&lt;SchemeOptions&gt; &gt; Signer;
pubkey.h:   typedef PK_FinalTemplate&lt;DL_SignerImpl&lt;SchemeOptions&gt; &gt; Signer;
rsa.h:typedef RSASS&lt;PKCS1v15, SHA&gt;::Signer RSASSA_PKCS1v15_SHA_Signer;
rsa.h:typedef RSASS&lt;PKCS1v15, Weak1::MD2&gt;::Signer RSASSA_PKCS1v15_MD2_Signer;
rsa.h:typedef RSASS&lt;PKCS1v15, Weak1::MD5&gt;::Signer RSASSA_PKCS1v15_MD5_Signer;
</code></pre>
","495","<ios><security><rsa><public-key><crypto++>","1","0","1","2016-04-02 02:29:52","36368423","0","","608639","","2016-04-02 02:03:58","2016-03-24 20:52:46",""
"19089163","Python RSA encrypted message pass to other languages to decypt","<p>I am using the RSA python package to encrypt a message and try to pass it to a PHP site to decrypt. See below:</p>

<pre><code>message = rsa.encrypt('abc', pubkey)
print message
print type(message)
</code></pre>

<p>What I get is some encrypted text</p>

<pre><code>q??$$??kK?Y??p?[e?[??f???x??s!?s?&gt;?z?*y?p?????????分?
?   ???({u????NH?B???N?%?@5|?~?????\U?.??r?Y?q
&lt;type 'str'&gt;
</code></pre>

<p>What's the best way to pass it to other languages to decrypt?</p>
","<p>That's not a text, it's a binary data. As you are using python2 it doesn't fully distinguish <code>bytes</code> from <code>str</code> so you should care about this.</p>

<p>The other side should get this bytes exactly as rsa outputs them so you can just write them into your connection or file (presuming you are talking binary to them).</p>
","494","<python><encryption><rsa><private-key><public-key>","1","2","2","2013-09-30 09:34:11","19089591","0","0","","","","2013-09-30 07:58:51",""
"19089163","Python RSA encrypted message pass to other languages to decypt","<p>I am using the RSA python package to encrypt a message and try to pass it to a PHP site to decrypt. See below:</p>

<pre><code>message = rsa.encrypt('abc', pubkey)
print message
print type(message)
</code></pre>

<p>What I get is some encrypted text</p>

<pre><code>q??$$??kK?Y??p?[e?[??f???x??s!?s?&gt;?z?*y?p?????????分?
?   ???({u????NH?B???N?%?@5|?~?????\U?.??r?Y?q
&lt;type 'str'&gt;
</code></pre>

<p>What's the best way to pass it to other languages to decrypt?</p>
","<p>For web you can base64 encode the data. It's a common and good way to encode binary data.</p>

<pre><code>&gt;&gt;&gt; import base64
&gt;&gt;&gt; base64.b64encode(b""data"")
'ZGF0YQ=='
&gt;&gt;&gt; base64.b64decode(base64.b64encode(b""data""))
'data'
</code></pre>

<p>By the way you are not suppose to use RSA that way. It's highly insecure to use raw RSA. You must use a probabilistic encryption scheme with proper padding, e.g. RSAES-OAEP. PKCS#1 defines such scheme for encryption and signatures.</p>
","494","<python><encryption><rsa><private-key><public-key>","1","2","2","2013-09-30 09:34:11","19089591","0","0","","","","2013-09-30 07:58:51",""
"21141843","Git in Amazon EC2 to local machine","<p>I installed Git and Gitolite in a Amazon Instance EC2 according with the following steps :</p>

<p>Created a public key locally with and send it to the EC2:</p>

<pre><code>ssh-keygen -t rsa
cp ~/.ssh/id_rsa.pub /tmp/local.pub
rsync -avr /tmp/local.pub -e ""ssh -i my-ec2-key.pem"" root@xx.xx.xxx.xxx:/tmp/local.pub
</code></pre>

<p>Then installed the Git and gitolite :</p>

<pre><code>sudo apt-get install git gitolite git-daemon-run
</code></pre>

<p>and then created a account for the user of git in EC2:</p>

<pre><code>sudo adduser --system --shell /bin/bash --gecos 'git version control' --group --disabled-password --home /home/git git
su git
cd /home/git
echo ""PATH=$HOME/bin:$PATH"" &gt; .bashrc
gl-setup /tmp/local.pub
</code></pre>

<p>When i tried to clone the repository from EC2 in a local machine with the following command it returned an error :</p>

<pre><code>rui@rui:~/.ssh$ git clone git@ec2-xx-xxx-xx-xx.compute-1.amazonaws.com:testing.git

Cloning into 'testing'...
Permission denied (publickey).
fatal: Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I tried different approaches but in the end the error is the same. </p>
","<p>A couple of the things that you can look at:</p>

<ul>
<li><p>Your gitolite.conf in your gitolite-admin.git repo. Make sure the content is something like this.</p>

<pre><code>repo    gitolite-admin
        RW+     =   rui

repo    testing
        RW+     =   @all
</code></pre></li>
<li><p>In your gitolite-admin/keydir directory of the gitolite-admin.git repo check that your public key file is there.  Also that it matches the private key of the file your are using to connect.</p></li>
</ul>

<p>I've set it up gitolite myself and it works great for me.</p>
","494","<amazon-ec2><gitolite><public-key><git-clone>","3","1","1","2014-01-16 23:30:33","21175082","2","1","1685894","","2014-01-15 15:52:51","2014-01-15 15:44:40",""
"50574673","Need a working Ruby basic RSA Private Public key example","<p>I've been able to create private and public keys with some success, and to encode a message, but on decoding the message I get thrown an error</p>

<p>My code so far is:</p>

<pre><code>require 'openssl'
require 'base64'


key = OpenSSL::PKey::RSA.generate(2048)

pri_key = key
pub_key = key.public_key

string = 'Hello World!';

rsa_public_key = OpenSSL::PKey::RSA.new(pub_key)
encrypted_string = Base64.encode64(rsa_public_key.public_encrypt(string))

puts ""Encrypted Message:""
puts encrypted_string

# This creates an error
my_string = pri_key.private_decrypt(encrypted_string)


puts ""The decoded message""
puts my_string
</code></pre>

<p>This throws this error after printing the encoded message</p>

<pre><code>Example Decrypt.txt:25:in `private_decrypt': data greater than mod len (OpenSSL::PKey::RSAError)
        from Example Decrypt.txt:25:in `&lt;main&gt;'
</code></pre>
","<p>You base 64 encode the encrypted string, but you don’t decode it before decrypting. Since the base 64 encoded string is longer than the encrypted string, and longer than the modulus, you get the error.</p>

<p>Try base 64 decoding before encrypting:</p>

<pre><code>my_string = pri_key.private_decrypt(Base64.decode64(encrypted_string))
</code></pre>
","491","<ruby><encryption><rsa><private-key><public-key>","0","5","1","2018-05-29 00:13:31","50574724","0","","","","","2018-05-29 00:04:09",""
"27081174","How should I convert a PublicKey to a Certificate in Java","<p>I have a circumstance where I need to store one or more public keys for use in authentication. I would like to store them in a KeyStore as TrustedCertificates - is there a way to do this, ideally using standard java.security classes?</p>

<p>I have seen that I can generate certificates with Bouncycastle, but most examples seem to show examples of chains of trust, whereas in my case I have individual trusted keys. Also, all the examples I have seen deal with key-pairs, but I am only interested in the set of public keys provided. Is it possible to create a certificate containing only a public key? </p>
","<p>Short answer: you cannot create certificate without private key.</p>

<p>Long answer: <a href=""https://www.google.com/search?q=java+create+self+signed+certificate+programmatically"" rel=""nofollow"">google ""java create self signed certificate programmatically""</a>, e.g.: <a href=""https://www.mayrhofer.eu.org/create-x509-certs-in-java"" rel=""nofollow"">https://www.mayrhofer.eu.org/create-x509-certs-in-java</a></p>
","487","<java><security><keystore><public-key>","0","1","1","2016-10-28 05:39:42","","5","1","","","","2014-11-22 18:54:12",""
"48447447","Obtain public key byte array from Json Web Key","<p>I have a Json Web Key that contains public key information and I'd like to get the public key as byte array. My goal is to eventually derive ethereum address from it, using Keccak hash. I understand the process of getting the address from the public key byte array, but I don't know how to obtain this byte array. My scenario is, generate EC key using Azure Key Vault API, retrieve the key (JWK format) and then find the address. The JWK has the following format.</p>

<pre><code>{
  ""kid"": ""https: //mykeyvault.vault.azure.net/keys/testeckey/8bad08aaae514efe981eaab4e590778d"",
  ""kty"": ""EC"",
  ""key_ops"": [
    ""sign"",
    ""verify""
  ],
  ""crv"": ""P-256"",
  ""x"": ""YooqHyo7hlmcrBs5lDSSUsB0axzvorjxzNl6DBZLUf0"",
  ""y"": ""NM-JrV6NTbUgILY_sBm5VgYxt1zYccCOCFtSDicSfWM""
}
</code></pre>

<p>I'm using the Azure .NET SDK and I have the option to use Bouncy Castle for .NET or any JS library, since project can also run in a Node.js environment. How can I obtain the byte array of the public key?
Thank you</p>
","<p>Answering my own question in case anyone else needs this.
I also wrote an article about this, hope someone finds it useful.</p>

<p><a href=""https://tmarkovski.github.io/eth-azure/keyvault-part1/"" rel=""nofollow noreferrer"">https://tmarkovski.github.io/eth-azure/keyvault-part1/</a></p>

<p>Initially, I was generating the incorrect key type. I was able to generate the key by concatenating the X and Y arrays from JWK. Here's my sample code I was playing with in F#. It uses BouncyCastle for the Keccak hash function.
Important thing to note is the use of ""EC-HSM"" key type. This is part of the Premium SKU for Key Vault and only this type supports SECP256K1 curve, otherwise throws an exception if using ""EC"" key type.</p>

<pre class=""lang-fs prettyprint-override""><code>open Microsoft.Azure.KeyVault
open System.Threading.Tasks
open System
open Microsoft.IdentityModel.Clients.ActiveDirectory
open Microsoft.Azure.KeyVault.Models
open Microsoft.Azure.KeyVault.WebKey
open Org.BouncyCastle.Crypto.Digests
open Org.BouncyCastle.Crypto

/// Implements an extension method that overloads the standard
/// 'Bind' of the 'async' builder. The new overload awaits on 
/// a standard .NET task
type AsyncBuilder with
  member __.Bind(t:Task&lt;'T&gt;, f:'T -&gt; Async&lt;'R&gt;) : Async&lt;'R&gt;  = 
    async.Bind(Async.AwaitTask t, f)

let vaultUri = ""https://__mykeyvault__.vault.azure.net/""
let clientId = ""...""
let clientSecret = ""...""

type AuthenticationCallback = KeyVaultClient.AuthenticationCallback

let getAccessToken (authority:string) (resource:string) (scope:string) =    
    let clientCredential = new ClientCredential(clientId, clientSecret)
    let context = new AuthenticationContext(authority, TokenCache.DefaultShared)
    async {
        let! result = context.AcquireTokenAsync(resource, clientCredential)
        return result.AccessToken;
    } |&gt; Async.StartAsTask

let client = new KeyVaultClient(new KeyVaultCredential(new AuthenticationCallback(getAccessToken)))

let createKey name =
    let keyParams = new NewKeyParameters()
    keyParams.Kty &lt;- ""EC-HSM""
    keyParams.CurveName &lt;- EcKey.SECP256K1

    async {
        let! result = client.CreateKeyAsync(vaultUri, name, keyParams)
        return result
    } |&gt; Async.RunSynchronously

let getKey name = 
    async {
        let! result = client.GetKeyAsync(vaultBaseUrl = vaultUri, keyName = name)
        return result
    } |&gt; Async.RunSynchronously

let getPubKey (jwk:KeyBundle) = 
     Array.concat [| jwk.Key.X; jwk.Key.Y |]

let hash (digest:IDigest) data =
    digest.Reset()
    digest.BlockUpdate(data, 0, data.Length)

    let a = digest.GetDigestSize() |&gt; Array.zeroCreate
    digest.DoFinal(a, 0) |&gt; ignore
    a

let toHex (x:byte) = x.ToString(""x2"")

let getAddress pubKey =
    pubKey
    |&gt; hash (new KeccakDigest(256))
    |&gt; Array.map toHex
    |&gt; Array.skip 12
    |&gt; String.Concat
    |&gt; (+) ""0x""


createKey ""testEcKey""
|&gt; getPubKey
|&gt; getAddress
|&gt; Console.WriteLine

// 0x51e4370152c132d307c302d8146c63ca6bf41167
</code></pre>
","486","<.net><ethereum><public-key><azure-keyvault><jwk>","1","0","1","2018-01-31 15:03:10","48492004","0","","","","","2018-01-25 16:17:17",""
"23365968","EMV Contact Card Issuer Public Key Validation","<p>I have problem with validation of EMV contact card issuer public key.
Document says:
""Verify that the concatenation of RID, Certification Authority Public Key Index, and Certificate Serial Number is valid. If not, SDA has failed.""
I concatenated these and sending them to SHA1 function to gain a hash value that will be compared with the public key's hash value and i took a comparision error; because their values are not equal. Did I misunderstand the document?</p>
","<p>Wich document do you refer?</p>

<p>Normaly you would get a CDOL in the GPO Response. The data for SDA should concatenated as described in this CDOL.</p>

<p>Remark: You should use DDA at minimum as supported.</p>
","484","<smartcard><public-key><ca><emv>","0","0","1","2014-08-06 09:26:58","","0","","1041364","","2014-08-06 09:26:58","2014-04-29 13:24:05",""
"43726232","PostgreSQL datatype for public key?","<p>What PostgreSQL datatype should we use for a table column that stores public keys?</p>

<p>Should we store it as text base64-encoded (in the format that the application server receives it from the client), or should the application server convert it to data and have the database store it as a blob?</p>
","<p>I would say store them as <code>bytea</code> type.</p>

<p>Public keys are actually a binary blob that has been base64 encoded when exported using the <code>armor</code> option.</p>
","480","<postgresql><sqldatatypes><public-key>","0","1","1","2018-01-15 14:03:34","","3","","","","","2017-05-01 20:42:22",""
"44204064","Android get certificates public key","<p>I want to get a certificates public key in a specific format, but I don't know how to do that. The format that I want it in is sha256/VRtYBz1boKOXjChfZYssN1AeNZCjywl77l2RTl/v380=. </p>

<p>This is what I have got so far:</p>

<pre><code>String hostname = ""api.github.com"";
SSLSocketFactory factory = HttpsURLConnection.getDefaultSSLSocketFactory();
SSLSocket socket = (SSLSocket) factory.createSocket(hostname, 443);
socket.startHandshake();

Certificate[] certs = socket.getSession().getPeerCertificates();
Certificate cert = certs[0];
PublicKey key = cert.getPublicKey();
</code></pre>

<p>This retrieves the public key in a long string, but I need it in the format that I have already mentioned.</p>
","","477","<android><ssl><public-key>","0","","0","2017-05-26 14:26:36","","2","","","","","2017-05-26 14:26:36",""
"31623325","How to validate public key xml file?","<p>I have created a public key using RSACryptoServiceProvider in c#.
Later in my program I want to store it's content in database. How can I make sure that the file is a true public key.</p>

<p>Note: I have checked it's structure against xsd. but I need more.
Any help?</p>

<p>the code to produce public key:</p>

<pre><code>RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(2048);
string publicKey = rsa.ToXmlString(false);
</code></pre>
","<p>finally I've found a solution:
first I check the schema against a xsd file,
and then</p>

<pre><code>                try
                {
                    var csp = new RSACryptoServiceProvider();
                    var reader = new StreamReader(address);
                    var xml = reader.ReadToEnd();
                    csp.FromXmlString(xml);
                }
                catch
                {
                    //not a rsa public key                   
                }
</code></pre>
","476","<c#><public-key><rsacryptoserviceprovider>","0","0","1","2015-07-26 10:15:46","31635808","0","","","","","2015-07-25 05:36:44",""
"45046811","Validate AWS Client Certificate from API Gateway in SailsJS, behind Elastic Load Balance","<p>I have a small API Gateway endpoint, that sends a Client Certificate to a backend server. This backend server runs on Sails behind an ELB. What I want to do, is to filter some of the routes in Sails, and the policy should look for the Certificate in the request, if it is not sent, then reject and if its (validating against the public Key) then allow it to continue.</p>

<p>In the docs of AWS API Gateway (<a href=""http://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html"" rel=""nofollow noreferrer"">http://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-client-side-ssl-authentication.html</a>), they suggest to use client-certificate-auth (<a href=""https://www.npmjs.com/package/client-certificate-auth"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/client-certificate-auth</a>), but I can't find a way to use it on my Sails backend. </p>

<p>I've tried using serverOptions in Sails, but it crashes with:</p>

<pre><code>error: TypeError: ""listener"" argument must be a function
</code></pre>

<p>So I'm pretty much lost on this one. If anyone has experience with it, please advice :)</p>

<p>Thanks</p>
","<p><strong>Step 0:</strong>
As mentioned in some of the comments - you'll need to change the ELB to be a classic ELB and load balance TCP on port 443 instead of HTTPS. </p>

<p><strong>Step 1:</strong> you'll need to launch sails with HTTPS - the config looks something like this:</p>

<pre><code>      http: {
        serverOptions: {
          requestCert: true,
          rejectUnauthorized: true
        }
      },
      ssl: {
        key: key.Body.toString(),
        cert: cert.Body.toString()
      }
</code></pre>

<p>So either <code>config/http.js</code> and <code>config/ssl.js</code>, or pass those to <code>sails.lift()</code>.</p>

<p><strong>Step 2:</strong> run the middleware. - there are lots of different ways to do this, but since you say you only want to do it some routes, I'd create a policy that runs client-certificate-auth, or even possibly better, just call <code>req.connection.getPeerCertificate()</code> and check the things you want to check. No need to use an extra npm module when you don't have to. </p>

<p>Here's the policy documentation:
<a href=""https://sailsjs.com/documentation/concepts/policies"" rel=""nofollow noreferrer"">https://sailsjs.com/documentation/concepts/policies</a></p>
","476","<amazon-web-services><sails.js><aws-api-gateway><public-key>","0","0","1","2017-11-09 17:10:21","","6","","6762951","","2017-07-12 16:10:49","2017-07-12 01:23:31",""
"31225635","PHP seclib - RSA - encrypting text","<p>I have a public key exponent (e) and public key modulus (n) which I need to use to encrypt some text. First of all - is knowing of these two values enough to be able to encrypt plaintext by RSA and send it back to owner, so he can decrypt it using his private key?</p>

<p>If yes, how to achieve that in phpseclib ( <a href=""http://phpseclib.sourceforge.net/"" rel=""nofollow"">http://phpseclib.sourceforge.net/</a> ) library? Theirs examples (<a href=""http://phpseclib.sourceforge.net/new/rsa/examples.html"" rel=""nofollow"">http://phpseclib.sourceforge.net/new/rsa/examples.html</a>) aren't very clear. However, my understanding of RSA isn't very clear either (that's why I am currently playing with it), so I will need some help.</p>

<p>Sadly, this is what I have been able to do so far</p>

<pre><code>define('CRYPT_RSA_EXPONENT', $e);
$rsa = new Crypt_RSA();
</code></pre>

<p>The Crypt_RSA class provides functions like ""loadKey($key)"" and ""setPublicKey($key)"". I guess I will be using one of them, but first I need to know public key. So .. do I know the public key? As I said, I have public key exponent and public key modulus, but is it possible to construct public key based on those two values?</p>

<p>I will be very happy for some explanation or working example.</p>
","<p>Normally RSA keys are string that have both the modulo and exponent embedded within them. eg.</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0
FPqri0cb2JZfXJ/DgYSF6vUpwmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/
3j+skZ6UtW+5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>...or...</p>

<pre><code>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUpwmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZw== phpseclib-generated-key
</code></pre>

<p>...etc.</p>

<p>If you're working with them as distinct ""objects"" then it makes me wonder if you're trying to do textbook RSA, which shouldn't really be used outside of the classroom.</p>

<p>In any event,</p>

<pre><code>&lt;?php
include('Crypt/RSA.php');
include('Math/BigInteger.php');

$rsa = new Crypt_RSA();
$rsa-&gt;loadKey(array(
    'e' =&gt; new Math_BigInteger('...'),
    'n' =&gt; new Math_BigInteger('...')
));
</code></pre>

<p>Math_BigInteger itself can optionally take two parameters. The second tells it the format, be it base-10, base-256, base-16, base-2, etc. If you have a base64 encoded number you'll need to pass it through base64_decode and (probably) tell Math_BigInteger that it's a base-256 number. By default Math_BigInteger assumes numbers are base-10.</p>

<p>To do textbook RSA after that (ie. no randomized padding - this method should not be used in real world applications) do the following:</p>

<pre><code>$rsa-&gt;setEncryptionMode(CRYPT_RSA_ENCRYPTION_NONE);
$rsa-&gt;encrypt('...');
</code></pre>
","467","<php><encryption><rsa><public-key><phpseclib>","0","2","1","2015-07-05 16:26:14","31232484","0","","569976","","2015-07-05 16:26:14","2015-07-04 22:37:12",""
"1452527","How secure is this architecture?","<p>I'm building a system that need to collect some user sensitive data via secured web connection, store it securely on the server for later automated decryption and reuse. System should also allow user to view some part of the secured data (e.g., <code>*****ze</code>) and/or change it completely via web. System should provide reasonable level of security.</p>

<p>I was thinking of the following infrastructure:</p>

<p><strong>App (Web) Server 1</strong></p>

<ol>
<li><p>Web server with proper TLS support
for secured web connections.</p></li>
<li><p>Use public-key algorithm (e.g. RSA) to
encrypt entered user sensitive data
and send it to <em>App Server 2</em> via
one-way outbound secured channel
(e.g. ssh-2) without storing it
anywhere on either <em>App Server 1</em> or <em>DB
Server 1</em>.</p></li>
<li><p>Use user-password-dependent
symmetric-key algorithm to encrypt
some part of the entered data (e.g.
last few letters/digits) and store
it on the <em>DB Server 1</em> for later
retrieval by <em>App Server 1</em> during
user web session.</p></li>
<li><p>Re-use step 2 for data modification by user via web.</p></li>
</ol>

<p><strong>DB Server 1</strong></p>

<ol>
<li>Store unsecured non-sensitive user
data.</li>
<li>Store some part of the sensitive
user data encrypted on <em>App Server 1</em>
(see step 3 above)</li>
</ol>

<p><strong>App Server 2</strong></p>

<ol>
<li>Do <strong>NOT</strong> <strong>EVER</strong> send anything
<strong>TO</strong> <em>App Server 1</em> or <em>DB Server 1</em>.</li>
<li>Receive encrypted user sensitive
data from <em>App Server 1</em> and store it
in <em>DB Server 2</em>.</li>
<li>Retrieve encrypted
user sensitive data from <em>DB Server 2</em>
according to the local schedules,
decrypt it using private key
(see <em>App Server 1</em>, step 2) stored
locally on <em>App Server 2</em> with proper key management.</li>
</ol>

<p><strong>DB Server 2</strong></p>

<ol>
<li>Store encrypted user sensitive data (see <em>App Server 2</em>, step 2)</li>
</ol>

<p>If either <em>App (Web) Server 1</em> or <em>DB Server 1</em> or both are compromised then attacker will not be able to get any user sensitive data (either encrypted or not). All attacker will have is access to public-key and encryption algorithms which are well known anyway. Attacker will however be able to modify web-server to get currently logged users passwords in plaintext and decrypt part of user sensitive data stored in DB Server 1 (see <em>App Server 1</em>, step 3) which I don't consider as a big deal. Attacker will be able to (via code modification) also intercept user sensitive data entered by users via web during potential attack. Later I consider as a higher risk, but provided that it is hard (is it?) for attacker to modify code without someone noticing I guess I shouldn't worry much about it.</p>

<p>If <em>App Server 2</em> and private key are compromised then attacker will have access to everything, but <em>App Server 2</em> or <em>DB Server 2</em> are not web facing so it shouldn't be a problem.</p>

<p>How secure is this architecture? Is my understanding of how encryption algorithms and secured protocols work correct?</p>

<p>Thank you!</p>
","<p>So far so good.  You are well on your way to a very secure architecture.  There are other concerns, such as firewalls, password policies, logging, monitoring and alerting to consider, but everything you described so far is very solid.  If the data is sensitive enough, consider a third party audit of your security.</p>
","464","<security><encryption><rsa><public-key>","4","1","3","2010-11-12 18:33:29","1452551","10","1","56338","","2009-09-21 01:39:07","2009-09-21 01:33:22",""
"1452527","How secure is this architecture?","<p>I'm building a system that need to collect some user sensitive data via secured web connection, store it securely on the server for later automated decryption and reuse. System should also allow user to view some part of the secured data (e.g., <code>*****ze</code>) and/or change it completely via web. System should provide reasonable level of security.</p>

<p>I was thinking of the following infrastructure:</p>

<p><strong>App (Web) Server 1</strong></p>

<ol>
<li><p>Web server with proper TLS support
for secured web connections.</p></li>
<li><p>Use public-key algorithm (e.g. RSA) to
encrypt entered user sensitive data
and send it to <em>App Server 2</em> via
one-way outbound secured channel
(e.g. ssh-2) without storing it
anywhere on either <em>App Server 1</em> or <em>DB
Server 1</em>.</p></li>
<li><p>Use user-password-dependent
symmetric-key algorithm to encrypt
some part of the entered data (e.g.
last few letters/digits) and store
it on the <em>DB Server 1</em> for later
retrieval by <em>App Server 1</em> during
user web session.</p></li>
<li><p>Re-use step 2 for data modification by user via web.</p></li>
</ol>

<p><strong>DB Server 1</strong></p>

<ol>
<li>Store unsecured non-sensitive user
data.</li>
<li>Store some part of the sensitive
user data encrypted on <em>App Server 1</em>
(see step 3 above)</li>
</ol>

<p><strong>App Server 2</strong></p>

<ol>
<li>Do <strong>NOT</strong> <strong>EVER</strong> send anything
<strong>TO</strong> <em>App Server 1</em> or <em>DB Server 1</em>.</li>
<li>Receive encrypted user sensitive
data from <em>App Server 1</em> and store it
in <em>DB Server 2</em>.</li>
<li>Retrieve encrypted
user sensitive data from <em>DB Server 2</em>
according to the local schedules,
decrypt it using private key
(see <em>App Server 1</em>, step 2) stored
locally on <em>App Server 2</em> with proper key management.</li>
</ol>

<p><strong>DB Server 2</strong></p>

<ol>
<li>Store encrypted user sensitive data (see <em>App Server 2</em>, step 2)</li>
</ol>

<p>If either <em>App (Web) Server 1</em> or <em>DB Server 1</em> or both are compromised then attacker will not be able to get any user sensitive data (either encrypted or not). All attacker will have is access to public-key and encryption algorithms which are well known anyway. Attacker will however be able to modify web-server to get currently logged users passwords in plaintext and decrypt part of user sensitive data stored in DB Server 1 (see <em>App Server 1</em>, step 3) which I don't consider as a big deal. Attacker will be able to (via code modification) also intercept user sensitive data entered by users via web during potential attack. Later I consider as a higher risk, but provided that it is hard (is it?) for attacker to modify code without someone noticing I guess I shouldn't worry much about it.</p>

<p>If <em>App Server 2</em> and private key are compromised then attacker will have access to everything, but <em>App Server 2</em> or <em>DB Server 2</em> are not web facing so it shouldn't be a problem.</p>

<p>How secure is this architecture? Is my understanding of how encryption algorithms and secured protocols work correct?</p>

<p>Thank you!</p>
","<p>I don't think I can give a proper response because I'm not sure the goal of your system is clear. While I appreciate you getting feedback on a design, it's a bit hard without a purpose.</p>

<p>I would suggest to you this though:</p>

<p><strong>Strongly document and analyse your threat model first</strong></p>

<p>You need to come up with a fixed hard-lined list of all possible attack scenarios. Local attackers, etc, who are you trying to protect against? You also say things like 'with proper key management'; yet this is one of the hardest things to do. So don't just <em>assume</em> you can get this right; fully plan out how you will do this, with specific linking to who it will prevent attacks by.</p>

<p>The reason you need to do a threat model, is that you will need to determine on what angles you will be vulnerable; because this will be the case.</p>

<p>I will also suggest that while the theory is good; in crypto <em>implementation</em> is also very critical. Do not just assume that you will do things correctly, you really need to take care as to where random numbers come from, and other such things.</p>

<p>I know this is a bit vague, but I do think that at least coming up with formal and strong threat model, will be very helpful for you.</p>
","464","<security><encryption><rsa><public-key>","4","3","3","2010-11-12 18:33:29","1452551","10","1","56338","","2009-09-21 01:39:07","2009-09-21 01:33:22",""
"1452527","How secure is this architecture?","<p>I'm building a system that need to collect some user sensitive data via secured web connection, store it securely on the server for later automated decryption and reuse. System should also allow user to view some part of the secured data (e.g., <code>*****ze</code>) and/or change it completely via web. System should provide reasonable level of security.</p>

<p>I was thinking of the following infrastructure:</p>

<p><strong>App (Web) Server 1</strong></p>

<ol>
<li><p>Web server with proper TLS support
for secured web connections.</p></li>
<li><p>Use public-key algorithm (e.g. RSA) to
encrypt entered user sensitive data
and send it to <em>App Server 2</em> via
one-way outbound secured channel
(e.g. ssh-2) without storing it
anywhere on either <em>App Server 1</em> or <em>DB
Server 1</em>.</p></li>
<li><p>Use user-password-dependent
symmetric-key algorithm to encrypt
some part of the entered data (e.g.
last few letters/digits) and store
it on the <em>DB Server 1</em> for later
retrieval by <em>App Server 1</em> during
user web session.</p></li>
<li><p>Re-use step 2 for data modification by user via web.</p></li>
</ol>

<p><strong>DB Server 1</strong></p>

<ol>
<li>Store unsecured non-sensitive user
data.</li>
<li>Store some part of the sensitive
user data encrypted on <em>App Server 1</em>
(see step 3 above)</li>
</ol>

<p><strong>App Server 2</strong></p>

<ol>
<li>Do <strong>NOT</strong> <strong>EVER</strong> send anything
<strong>TO</strong> <em>App Server 1</em> or <em>DB Server 1</em>.</li>
<li>Receive encrypted user sensitive
data from <em>App Server 1</em> and store it
in <em>DB Server 2</em>.</li>
<li>Retrieve encrypted
user sensitive data from <em>DB Server 2</em>
according to the local schedules,
decrypt it using private key
(see <em>App Server 1</em>, step 2) stored
locally on <em>App Server 2</em> with proper key management.</li>
</ol>

<p><strong>DB Server 2</strong></p>

<ol>
<li>Store encrypted user sensitive data (see <em>App Server 2</em>, step 2)</li>
</ol>

<p>If either <em>App (Web) Server 1</em> or <em>DB Server 1</em> or both are compromised then attacker will not be able to get any user sensitive data (either encrypted or not). All attacker will have is access to public-key and encryption algorithms which are well known anyway. Attacker will however be able to modify web-server to get currently logged users passwords in plaintext and decrypt part of user sensitive data stored in DB Server 1 (see <em>App Server 1</em>, step 3) which I don't consider as a big deal. Attacker will be able to (via code modification) also intercept user sensitive data entered by users via web during potential attack. Later I consider as a higher risk, but provided that it is hard (is it?) for attacker to modify code without someone noticing I guess I shouldn't worry much about it.</p>

<p>If <em>App Server 2</em> and private key are compromised then attacker will have access to everything, but <em>App Server 2</em> or <em>DB Server 2</em> are not web facing so it shouldn't be a problem.</p>

<p>How secure is this architecture? Is my understanding of how encryption algorithms and secured protocols work correct?</p>

<p>Thank you!</p>
","<p>I would not recommend using any form of public key to communicate from your web server to your app server.  If you control both system just a regular secret system of encryption.  You know the identity of your app server, so keeping the key secure is not an issue.  If you ever need to change or update the secret key just do so manually to prevent it from leaking across a connection.</p>

<p>What I would be most careful about is direction of data transfer from your server in your DMZ, which should only be your webserver, to those boxes residing internally to your network.  It is becoming increasingly common for legitimate domains to be compromised to distribute malware to visiting users.  That is bad, but if the malware were to turn in ward to your network instead of only outward to your users then your business would be completely hosed.</p>

<p>I also did not see anything about preventing sql injection or system hardening/patching to prevent malware distribution.  This should be your first and most important consideration.  If security were important to you then you would be your architecture to be flexible to minor customizations of inter-server communication and frequent patching.  Most websites, even major legitimate businesses, never fix their security holes even if they are compromised.  You must be continually fixing security holes and changing things to prevent holes from arise if you wish to avoid being compromised in the first place.</p>

<p>To prevent becoming a malware distributor I would suggest making hard and fast rules upon how media is served that contains any sort of client-side scripting.  Client-side scripting can be found in JavaScript, ActiveX, Flash, Acrobat, Silverlight, and other code or plugin that executes on the client system.  Policies for serving that content must exist so that anomolous code fragments can be immediately identified.  My recommendation is to <strong>NEVER</strong> embed client-side code directly into a browser, but always reference some external file.  I would also suggest conslidating like minded media to give you better asset control and save you bandwidth, such as serving one large JavaScript file instead of 8 small ones.  I would also recommend forcing all such media onto an external content distribution system that references your domain in its directory structure.  That way media is not served from your servers directly and if it served from you directly you can quickly identify it as potentially malicious and necessittating a security review.</p>
","464","<security><encryption><rsa><public-key>","4","1","3","2010-11-12 18:33:29","1452551","10","1","56338","","2009-09-21 01:39:07","2009-09-21 01:33:22",""
"33858076","Connect to AWS with PHP client using SSH2","<p>I am trying to connect to mysql DB on AWS with PHP client.
The connection has 2 phases:
1 - connect to SSH port 22 using public/private key auth
2 - connect to mysql server on port 3306</p>

<p>I am having problem with the first phase. I have pem file and I have the following code:</p>

<pre><code>&lt;?php
include('SSH2.php');
include('RSA.php');

$key = new Crypt_RSA();
$key-&gt;loadKey(file_get_contents('path to pem file'));

$ssh = new Net_SSH2('server IP');
if (!$ssh-&gt;login('root', $key)) {
    exit('Login Failed');
}

echo $ssh-&gt;exec('ls -la');
?&gt;
</code></pre>

<p>what am I doing wrong?</p>

<p>Anyone has an example for end2end connection??</p>
","<p>I tested your script and it seems to work properly for me.</p>

<p>Kindly verify a few things to see why the ssh connection is not working,</p>

<ol>
<li>Check that you are using the correct ssh private key [pem file] and that the permission on that file is readonly [ chown 0400 pemfile]</li>
<li>Check that the security group for the ec2 server allows port 22 to the IP address that the PHP is running on.</li>
<li>Check that you are using the correct Server IP, username. Generally speaking most of the EC2 server AMI are built with remote root login disabled, you will need to use the right username like on Amazon AMI you need to use ec2-user and on ubuntu amiit is ubuntu</li>
</ol>

<p>Also please check on <a href=""https://blog.rjmetrics.com/2009/01/06/php-mysql-and-ssh-tunneling-port-forwarding/"" rel=""nofollow"">https://blog.rjmetrics.com/2009/01/06/php-mysql-and-ssh-tunneling-port-forwarding/</a> which gives in depth on what you are achieving</p>
","460","<php><amazon-web-services><public-key><pem>","2","0","1","2015-11-22 20:02:19","","0","1","","","","2015-11-22 17:51:46",""
"23460248","Using Keytool in a java program?","<p>I am trying to write a program to generate RSA keys private.der, and public.der in PKCS#8, DER format.</p>

<p>I can do it in OpenSSL manually easily, but I have no idea how to do it in java. I read about Keytool that you can also use manually. But I want to automate the process in a program to generate a unique usable keypair each time the program is ran, and export them to a folder.</p>

<p>Any help would be appreciated. </p>
","<p>Key generation works as follows:</p>

<pre><code>KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
keyGen.initialize(2048); // Keysize
KeyPair kp = keyGen.genKeyPair():
PrivateKey privKey = kp.getPrivate();
PublicKey pubKey = kp.getPublic();
</code></pre>

<p>Then use <code>privKey.getEncoded()</code> and <code>pubKey.getEncoded()</code> to get the encoded versions.</p>
","459","<encryption><rsa><private-key><public-key>","0","1","1","2014-05-04 19:44:32","23460754","1","","608639","","2014-05-04 19:44:32","2014-05-04 18:54:40",""
"52677443","How to create a public key file in gpg from a given public key","<p>A colleague of mine gave me their public key in text format and now I want to use that public key to encrypt my plain messages.</p>

<p>The thing is, I don't know how to create a key for an existing public key. As in how do I import the public key in <code>GnuPG</code> if I only have the public key in an email message? Like I know how to generate a random new key, just now how to create or import a public key</p>

<p>This is the public key given to me:</p>

<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: OpenPGP.js v3.0.9
Comment: https://openpgpjs.org

xsBNBFu4XWABCAD3CPThI8OyFNnvKsxdG5IxiGNWXrlN/Rw8Ors16TkSAsNg
j9s898/k9FZn9YiRGWG60zlfedgl0mQtHU+w/FBdgSV3EqVaUPjPsFGEq6eD
WOXKSPeTdhuYaM8wxt0ru7llLjxKBc6kw1CyXP+Da/gZLIX756KhqqDIlAKr
cx8oh4mvxpkj7L3qACDKIenJevhrz/iUIbnyBpd76qKQp0xojcqsqh7KXziC
xOiIL01lT130Hzd2FvcKiPlvbcKp7WJJy6cc9dKQ/3bSM6dqOQshqfUtWmxr
TU7s7jGGuexsTX5Bd/Rss2yTLv4Cn2MlNnOzcioUgE7XhKHvYZCFX3TvABEB
AAHNHFJlemFyaW9zIDxnYW51QGVvczJtYWlsLmNvbT7CwHUEEAEIACkFAlu4
XWAGCwkHCAMCCRCEnF0xNji/7gQVCAoCAxYCAQIZAQIbAwIeAQAAYKwH/0L5
TwxJPcAfv8/5Ku+VcSixnDmkHaVc4zd9VWpxDX9MpOmqNYOXwlHzKl1h2hm8
/M91fO+NOGxugDRathEtmlWrnE+/3X6nLhU63xtaj23cK17WfcU8xGzPpzPD
iRqMt4HwQlIby/Zp2GqhoxjRfYIULYtwubpsCZLoQtyUqR1c/JTYScWm51UP
CP8VyzqWBYgznI2yf5ODl4aOXN3S3Z1CaItcJcAcwomye14dfabVnPkQhlD2
BCr8kfBj3Y49PO60PUuaoes3t8ZTDpxHQTfAdx9ZNe53jy7FXMfOuYvdQWve
aG5SYP4hTVcSD8L/C3AnPcuqLR380A0qYqtKe5fOwE0EW7hdYAEIAMF/O+cI
mzCVH5U7xRZVy6gvQAwO+sHScUwaIYB0akst1Qocc3LcRV0C5qwu/gCYthIE
onShp1CNBgSuPUB6n1LlqV4/hvujSxBKycl3rKlasf1BWBLIlZk3cIDcZ8JH
crdXbpoEfHCUcE8D3mpLopC+2zF/uKeityhZwiOiWbmkqfqWibepUs2Y7f9E
x9ncIb8joEXzpZpW6YTVjZz7v7mcOnyNn/5HY4X+EI5Uk/SNXmm63j5IjBHz
34QPhLCaVm73Zo9FxDzau6bDlFhgyZ9yntuCi2QRQJqCSu/XU6KZ1PSzy/pO
wl8YQybJMe9+OP+BfbvDdXVXayzddRzFXpcAEQEAAcLAXwQYAQgAEwUCW7hd
YAkQhJxdMTY4v+4CGwwAANAlCAC0mQ9KsEThyPa6iygn9+MyIUY81XGxG9pY
1FbprCtRsIbB/YZ4hTdIwreW2uIllgMEizbMCUYFDNOrrftf8cZbuB3aEeu7
kiPa8cw6sIt/VDHtY9Z+NOQoPy4TtS7u4u8yJgi1/z79AGyncAakBg0FfSkV
EmbolYNRcvDt+/UQZ6L2cfn1nmeFhXWFZKV0TzI0W3JxAekaWfmxi7qQAeE/
BcQy1IrFkNSbHmSE1n9hj07BmlKW5dBavRxo6eOjS7nycx7WYf5Abq7ABAN+
LSBSJ9UYmph8Lc5bJFpP1LEmC4PXE7tZ9bhG7QseNyaEoMOcwZpkO0COzgGJ
yaBBfP21
=jHTx
-----END PGP PUBLIC KEY BLOCK-----
</code></pre>

<p>Once imported, would I encrypt my plaintext in the following manner:</p>

<pre><code>echo ""New to the game"" | gpg -e -r recipient_userid textfile
</code></pre>

<p>I know it may seem easy to some, but it has been driving me mad only because I don't know how to create a file which has my colleagues public key in it</p>
","<p>This is a valid OpenPGP key file. Just store it into a text file (using a proper text editor which does not ""fiddle"" with the characters or newlines, so MS Office or Libreoffice do not qualify here) and rund <code>gpg --import &lt;path-to-keyfile&gt;</code>.</p>

<p>Usually the ASCII-armored keys (the base64-like copy you posted here) are stored with <code>.asc</code> extension, but this is not really important especially when working on the command line. If you want to import the key using a graphical user interface (by double clicking, ...) the extension might be important, though.</p>
","459","<public-key-encryption><gnupg><public-key>","0","0","1","2018-10-06 10:02:49","","0","","","","","2018-10-06 09:08:18",""
"24820901","How do I use RSA keys generated by Java in Ruby?","<p>I'm having a problem in loading <strong>RSA public key</strong> that was generated by <strong>Java</strong> in <strong>Ruby</strong>.</p>

<p>The RSA public key was encoded in X509 format by Java. FYI, here's the Java code for generating the public key</p>

<pre><code>public static void generateKeys() throws Exception {
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
    kpg.initialize(2048);
    KeyPair kp = kpg.genKeyPair();
    PublicKey publicKey = kp.getPublic();
    PrivateKey privateKey = kp.getPrivate();

    System.out.println(""keys created"");

    KeyFactory fact = KeyFactory.getInstance(""RSA"");
    RSAPublicKeySpec pub = fact.getKeySpec(publicKey,
            RSAPublicKeySpec.class);
    RSAPrivateKeySpec priv = fact.getKeySpec(privateKey,
            RSAPrivateKeySpec.class);

    saveToFile(""public.key"", pub.getModulus(), pub.getPublicExponent());
    saveToFile(""private.key"", priv.getModulus(), priv.getPrivateExponent());

    System.out.println(""keys saved"");
}

public static void saveToFile(String fileName, BigInteger mod,
        BigInteger exp) throws IOException {
    ObjectOutputStream fileOut = new ObjectOutputStream(
            new BufferedOutputStream(new FileOutputStream(fileName)));
    try {
        fileOut.writeObject(mod);
        fileOut.writeObject(exp);
    } catch (Exception e) {
        throw new IOException(""Unexpected error"");
    } finally {
        fileOut.close();
        System.out.println(""Closed writing file."");
    }
}
</code></pre>

<p>I've tried using the public.key in my Ruby by using :</p>

<pre><code>public_key = OpenSSL::PKey::RSA.new File.read 'public.key' and
cert = OpenSSL::X509::Certificate.new File.read 'public.key'
</code></pre>

<p>But none of them work, instead they printed out error message :</p>

<pre><code>OpenSSL::PKey::RSAError:
  Neither PUB key nor PRIV key:: header too long
OpenSSL::X509::CertificateError:
  header too long
</code></pre>

<p>I'm planning to use the <strong>public.key</strong> to <strong>encrypt some data in Ruby</strong>. Can anyone help me out? I really appreciate one, thanks!</p>
","","456","<java><ruby><encryption><rsa><public-key>","0","","0","2014-07-18 08:50:44","","4","","","","","2014-07-18 08:50:44",""
"51132880","AWS Lightsail - Can't access phpMyAdmin in Terminal on Mac","<p>I have not been able to gain access to PHPmyAdmin for my new Amazon Lightsail Wordpress server. I am using a Mac with Terminal for SSH access. - I keep getting <code>Permission denied (publickey)</code> errors.</p>

<p>I just create a the Lightsail account with Wordpress installation and my DNS is fine, my static IP is assigned, My SFTP access is working fine with Cyberduck, but I cannot access phpMyAdmin using the terminal on Mac.</p>

<p>I have attempted to follow all the instructions <a href=""https://docs.bitnami.com/aws/components/phpmyadmin/"" rel=""nofollow noreferrer"">here</a> to gain PHPMyAdmin access.</p>

<p>I created and downloaded a new Key Pair under the Oregon (us-west-2) server where the Wordpress installation/instance is, which I have stored in a directory on my laptop: </p>

<blockquote>
  <p>/Users/username/Documents/Projects/New\ Project\ Title/Website/AWS\ Lightsail/keypair.pem</p>
</blockquote>

<p>As outlined on the Bitnami instructions page I attempted to open a terminal connection using the following: ssh -N -L 8888:127.0.0.1:80 -i /Users/username/Documents/Projects/New\ Project\ Title/Website/AWS\ Lightsail/keypair.pem bitnami@PublicIP</p>

<p>After researching online, I attempted to change permissions on the Key Pair <em>.pem</em> file to <em>chmod 400</em>, <em>chmod 700</em>, <em>chmod 0400</em>, <em>chmod 0700</em> - I then attempted to <em>chmod 700</em> the directory containing the <em>.pem</em> file. I continue to get the <code>Permission denied (publickey)</code> error.</p>

<p>Nothing has worked for me yet, what am I doing wrong?</p>
","","452","<phpmyadmin><permission-denied><bitnami><public-key><amazon-lightsail>","1","","0","2018-07-02 11:39:36","","1","","8306666","","2018-07-02 11:39:36","2018-07-02 09:26:23",""
"47053152","How to get public key in DER format from key stored in iOS keychain?","<p>I am creating key using following code</p>

<pre><code>let tag = ""com.example.keys.mykey"".data(using: .utf8)!
let attributes: [String: Any] =
[kSecAttrKeyType as String:            kSecAttrKeyTypeECSECPrimeRandom,
 kSecAttrKeySizeInBits as String:      256,
 kSecPrivateKeyAttrs as String:
    [kSecAttrIsPermanent as String:    true,
     kSecAttrApplicationTag as String: tag]]
guard let privateKey = SecKeyCreateRandomKey(attributes as CFDictionary, &amp;error) else {
throw error!.takeRetainedValue() as Error}
</code></pre>

<p>Getting public key using </p>

<pre><code>let publicKey = SecKeyCopyPublicKey(privateKey)
</code></pre>
","<pre><code> func addDerKeyInfo(rawPublicKey:[UInt8]) -&gt; [UInt8] {
    let DerHdrSubjPubKeyInfo:[UInt8]=[
        /* Ref: RFC 5480 - SubjectPublicKeyInfo's ASN encoded header */
        0x30, 0x59, /* SEQUENCE */
        0x30, 0x13, /* SEQUENCE */
        0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, /* oid: 1.2.840.10045.2.1   */
        0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, /* oid: 1.2.840.10045.3.1.7 */
        0x03, 0x42, /* BITSTRING */
        0x00 /* unused number of bits in bitstring, followed by raw public-key bits */]
    let derKeyInfo = DerHdrSubjPubKeyInfo + rawPublicKey
    return derKeyInfo
}

func convertbase64StringToByteArray(base64String: String) -&gt; [UInt8] {
    if let nsdata = NSData(base64Encoded: base64String, options: NSData.Base64DecodingOptions.ignoreUnknownCharacters)  {
        var bytes = [UInt8](repeating: 0, count: nsdata.length)
        nsdata.getBytes(&amp;bytes,length: nsdata.length)
        return bytes
    }
    else
    {
        print(""Invalid base64 String"")
    }
}
func convertSecKeyToDerKeyFormat(publicKey:SecKey) throws -&gt; String
{
    do
    {
        if let externalRepresentationOfPublicKey = SecKeyCopyExternalRepresentation(publicKey,&amp;error)
        {
            let derKeyFormat = externalRepresentationOfPublicKey as Data
            var publicKeyByteArray = try convertbase64StringToByteArray(base64String: derKeyFormat.base64EncodedString())
            publicKeyByteArray =  addDerKeyInfo(rawPublicKey: publicKeyByteArray)
            let base64EncodedPublicKey:String=Data(publicKeyByteArray).base64EncodedString()
            return base64EncodedPublicKey
        }
        else
        {
            throw error as! Error
        }
    }
    catch
    {
        throw error
    }
}
</code></pre>

<p>Call convertSecKeyToDerKeyFormat function by passing public key to it.</p>
","449","<ios><swift><security><keychain><public-key>","3","1","1","2018-04-03 09:55:09","49627153","0","1","8251531","","2017-11-01 11:48:00","2017-11-01 10:49:22",""
"51606458","How to encrypt and decrypt messages using Virgil security?","<p>I am trying to integrate Virgil security in my basic chat application but it won't as needed.</p>

<p>While chatting 2 users say A and B. After both users logged in and have some communication between them. Now both users reload/logged out or logged in then old messages was sent was not able to decrypt as new private keys will be generated.
I so not want to stored the public and private key of users in database or in local storage.</p>
","<p>David from Virgil here. Thanks for the question and sorry for making you puzzled.</p>

<p>I believe the issue is: while the sample app generated user private &amp; public keys both for Alice and Bob, published the public keys to our Cards service, it hasn’t saved the private keys anywhere. So, the private keys remained in the browser's local storage and as such, didn’t sync to other browsers/devices where your users have logged in next. So in lack of their private keys, your users weren’t able to decrypt their messages... This is a limitation of the sample app and we should fix that ASAP (task created).</p>

<p>In order to get the app working, I.e. make your users be able to log in from another browser and decrypt messages, they need to retrieve their respected private keys from a central location. Now, it'd be too lame for me to recommend to just save the user private keys to your database (and enable others to access it + decrypt your users' messages), so we created a technology called BrainKey to encrypt the user private key with a key that we derive from the user’s password. Similar approach how Apple uses your TouchID-derived key to encrypt your keychain.</p>

<p>This is what you need to do to make it work:</p>

<ol>
<li><p>During user signup (on the client device), generate a private key for your user and publish the public key to our Cards service.</p></li>
<li><p>Then use the user's password to generate a BrainKey (which technically is a private key).</p></li>
<li><p>Generate the public key from the BrainKey and encrypt the user's previously (Step 1) generated private key.</p></li>
<li><p>Now, save this encrypted private key to your database for the user.</p></li>
</ol>

<p>Every single time your user logs in with her password, re-generate the same BrainKey from her password, download the encrypted private key from your DB, decrypt it with the BrainKey and now you can use this key to decrypt all chat messages that were sent to her.</p>

<p>Here’s a reference and sample code for our BrainKey tech: <a href=""https://developer.virgilsecurity.com/docs/javascript/use-cases/v1/brainkey"" rel=""nofollow noreferrer"">https://developer.virgilsecurity.com/docs/javascript/use-cases/v1/brainkey</a></p>

<p>Does it make sense? Would you like to see a sample code that does it? If you join our Slack, we can chat real-time, I’m @dave: <a href=""https://join.slack.com/t/virgilsecurity/shared_invite/enQtMjg4MDE4ODM3ODA4LTc2OWQwOTQ3YjNhNTQ0ZjJiZDc2NjkzYjYxNTI0YzhmNTY2ZDliMGJjYWQ5YmZiOGU5ZWEzNmJiMWZhYWVmYTM"" rel=""nofollow noreferrer"">https://join.slack.com/t/virgilsecurity/shared_invite/enQtMjg4MDE4ODM3ODA4LTc2OWQwOTQ3YjNhNTQ0ZjJiZDc2NjkzYjYxNTI0YzhmNTY2ZDliMGJjYWQ5YmZiOGU5ZWEzNmJiMWZhYWVmYTM</a></p>

<p>​David</p>
","447","<encryption><private-key><public-key>","1","1","2","2018-08-03 16:38:20","51676872","0","3","","","","2018-07-31 06:09:11",""
"51606458","How to encrypt and decrypt messages using Virgil security?","<p>I am trying to integrate Virgil security in my basic chat application but it won't as needed.</p>

<p>While chatting 2 users say A and B. After both users logged in and have some communication between them. Now both users reload/logged out or logged in then old messages was sent was not able to decrypt as new private keys will be generated.
I so not want to stored the public and private key of users in database or in local storage.</p>
","<p>I'm Dim from Virgil. Let me help you with this use-case.</p>

<p>I prepared some additional information:</p>

<p>Steps #1 and #2 from Virgil Simple JS Demo (You’ve already seen it)</p>

<p><strong>Step #1. User Registration Step.</strong></p>

<p><a href=""https://i.stack.imgur.com/YaVEA.jpg"" rel=""nofollow noreferrer"">users register their Public Keys</a></p>

<p>At this step:</p>

<ul>
<li>You authenticate Alice</li>
<li>After you successfully authenticated Alice, you give her a JWT to grant her access to Virgil’s Cloud APIs</li>
<li>Alice generates her Private Key (2) -> stores her Private Key into Local Storage -> creates her Virgil Card</li>
<li>Alice Publishes (3) her Virgil Card on Virgil Cards Service (She uses her JWT to do it).</li>
<li>Then you authenticate Bob (User B): same story as Alice.</li>
</ul>

<p>At the end, Alice and Bob have their own Private Keys and Virgil Cards (Public Key published into our cloud for users to find each other’s Public Keys). </p>

<p><strong>Step #2. Simple Communication (chat).</strong></p>

<p><a href=""https://i.stack.imgur.com/8JzCe.jpg"" rel=""nofollow noreferrer"">Simple e2e encrypted communication</a></p>

<p>At this step:</p>

<ul>
<li>Alice looks for &amp; finds Bob’s Public Key at Virgil Cards Service (1)</li>
<li>Alice loads her Private Key from her Local Storage in a browser</li>
<li>Alice signs (with her Private Key) and encrypts (with Bob’s Public Key) a message and sends to Bob through your Application Server</li>
<li>Bob receives the encrypted and signed message</li>
<li>Bob goes to Cards Service to find Alice’s Public Key in order to verify her signature</li>
<li>Bob loads his Private Key from his Local Storage and decrypts the message</li>
</ul>

<p><strong>As a result</strong>, Bob verified Alice’s signature and decrypted the Message from Alice.</p>

<p>And now, <strong>comes the problem</strong>: Alice decided to use another Browser (or a Device B), but she can’t encrypt Bob’s previous messages on the new device.</p>

<p><strong>Solution:</strong> you should transmit her Previous Private Key from Device A to Device B. To do this in the most secure way:</p>

<ul>
<li>is to encrypt Private Key on a device A with some Additional Secret Key.</li>
<li>transmit encrypted Private Key to Device B. </li>
<li>use the same Additional Secret Key on Device B to decrypt the encrypted Private Key from Device A.</li>
</ul>

<p>So, as you see you must use some special Additional Secret Key on both devices (some messengers do this with a QR code between the devices) to do it securely. To do it simpler though, we have a special tech for you to you generate the “Additional Secret Key” that will be the same on both devices. We call that Secret Key - a Brain Key. <strong>Brain Key</strong> - a strong cryptographic asymmetric key based on Alice’s PASSWORD. </p>

<p>You can find more information about this key here: <a href=""https://developer.virgilsecurity.com/docs/java/use-cases/v1/brainkey"" rel=""nofollow noreferrer"">https://developer.virgilsecurity.com/docs/java/use-cases/v1/brainkey</a></p>

<p>So now, let’s take a look at the next step.</p>

<p><strong>Step #3. Store your Private Key in the Cloud</strong></p>

<p><a href=""https://i.stack.imgur.com/EdKNy.jpg"" rel=""nofollow noreferrer"">store somewhere encrypted Private Key</a></p>

<p>At this step:</p>

<ul>
<li>Alice enters her Password</li>
<li>Alice generates a Brain Key from her password (1)</li>
<li>Alice encrypts her Private Key with the Brain Key (2)</li>
<li>Alice uploads her encrypted private key somewhere in Cloud (to your app’s backend/database)  </li>
</ul>

<p><strong>As a result</strong>, Alice will have her encrypted Private Key in the cloud, that she used to chat with Bob.</p>

<p><strong>Step #4. Alice now uses her new Browser (or new Device)</strong></p>

<p><a href=""https://i.stack.imgur.com/2pI6w.jpg"" rel=""nofollow noreferrer"">transmit a Private Key</a></p>

<p>At this step:</p>

<ul>
<li>Alice enters her Password (the same that she used previously for Brain Key generation).</li>
<li>This generates her Brain Key (1)</li>
<li>Alice downloads her encrypted Private Key from the Cloud / from your backend/database (2)</li>
<li>Alice decrypts the encrypted Private Key with the Brain Key</li>
</ul>

<p><strong>As a result</strong>, Alice will get her Private Key on a Device B, that she used to chat with Bob on a Device A. This way, the chat conversation survived her device change.</p>

<p>Every time when Alice uses a new device, she can re-generate the same Brain Key and easily get her Private Key, the key that she uses on all her devices to chat with Bob.</p>
","447","<encryption><private-key><public-key>","1","2","2","2018-08-03 16:38:20","51676872","0","3","","","","2018-07-31 06:09:11",""
"23575580","NTRU Key Exchange example implementation","<p>Are there any open-source implementations of NTRU-KE (Preferably in Java or C#) out there that I can use as a reference for implementing it in a different language?</p>

<p>The implementations listed on the Wikipedia page for NTRUEncrypt don't have it included, and there's a paper covering the algorithm <a href=""https://eprint.iacr.org/2013/718.pdf"" rel=""nofollow"" title=""here"">here</a> but the language is a bit too technical for me to be able to understand it fully.</p>
","<h3>Future readers, please prove me wrong (and post your own answer).</h3>

<p>Given it is pretty new (<a href=""https://eprint.iacr.org/2013/718"" rel=""nofollow"">November 2013</a>) there probably aren't any implementations at all. Even the authors of the paper might not have implemented it themselves (you could ask them though). But as far as I can tell the protocol only uses operations that would have to be included in NTRUEncrypt implementations anyway. So it shouldn't be to difficult to write one yourself on top of an existing NTRU library. You can ask specific questions on the protocol here or on <a href=""https://crypto.stackexchange.com"">https://crypto.stackexchange.com</a>. Probably you should try to understand the basics of NTRUEncrypt first, though.</p>
","444","<math><public-key-encryption><public-key><ntruencrypt>","1","0","1","2016-10-11 14:14:33","","0","1","","","","2014-05-09 23:42:11",""
"46647976","Creating Encrypted connection for Amazon Aurora DB with public key","<p>I am using Maria JDBC driver for creating a connection to Amazon Aurora DB
I wanted to create a secured connection so I read <a href=""http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Aurora.Connect.html#Aurora.Connect.SSL"" rel=""nofollow noreferrer"">here</a> </p>

<blockquote>
  <p>To connect to a DB cluster with SSL using the MySQL utility</p>
  
  <p>Download the public key for the Amazon RDS signing certificate from
  <a href=""https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem"" rel=""nofollow noreferrer"">https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem</a>.
  Note that this will download a file named rds-combined-ca-bundle.pem.</p>
</blockquote>

<p><strong>First Question:</strong> How exactly is it secured - anyone can download this <code>pem</code> file from <code>Amazon AWS</code>?</p>

<p>I did some research How should i connect into Aurora DB with public key
and i found these 2 links  <a href=""https://coderanch.com/t/455178/databases/SOLVED-Connection-mysql-certificates"" rel=""nofollow noreferrer"">First</a>, <a href=""https://stackoverflow.com/questions/33700647/jdbc-parameter-verifyservercertificate-false-connects-without-the-need-for-a-cli"">Second</a></p>

<p><strong>So my Code is quite Simple:</strong></p>

<pre><code>Class.forName(""org.mariadb.jdbc.Driver"");

Properties prop = new Properties();

prop.setProperty(""javax.net.ssl.trustStore"",""C:\\temp\\rds-combined-ca-bundle.pem"");
prop.setProperty(""user"",jdbcDetails.username);
prop.setProperty(""password"",jdbcDetails.getSensitiveData());

    java.sql.Connection conne = DriverManager.getConnection(jdbcDetails.connectionString, prop);
    try (Statement stmt1 = conne.createStatement()) {
        // Execute all but the rest
        ResultSet rs = stmt1.executeQuery(""Select 98765 from dual limit 2"");
        while(rs.next()) {

            rs.getLong(1);
        }
    }
    conne.close();
</code></pre>

<p><strong>Second Question:</strong> How is having the <code>public key file</code> relate to Encryption?</p>

<p>The above information doesn't get along with <a href=""http://docs.oracle.com/javadb/10.6.2.1/adminguide/cadminsslclient.html"" rel=""nofollow noreferrer"">Oracle Java information</a> that says:</p>

<blockquote>
  <p>If the client wants to authenticate the server, then the client's trust store must contain the server's certificate</p>
</blockquote>

<p><strong>Third Question:</strong> From what I understand if the client trust the server it doesn't require him to use this file</p>

<p><strong>Forth Question:</strong> I was checking the connection creation with Wireshark
both cases with and without this <code>public key file</code> i was able to create a connection and both cases in Wireshark appeared Encrypted</p>

<p>Something that looks like that:</p>

<pre><code>Encrypted Application Data:
eb:62:45:fb:10:50:f7:8c............:b9:0a:52:e7:97:1d:34
</code></pre>
","<p>Base on <a href=""https://stackoverflow.com/questions/33700647/jdbc-parameter-verifyservercertificate-false-connects-without-the-need-for-a-cli"">this answer</a> I understand about public key usage:</p>

<p>First,
It appears that Amazon AWS Azure documentation is misleading a bit - it is only relevant for connection with specific tool called <strong>MySQL utility</strong></p>

<p><strong>An answer for First &amp; Second &amp; third Question:</strong></p>

<blockquote>
  <p>""Java can definitely establish an SSL connection without a client
  validating the certificate chain of the server.""</p>
</blockquote>

<p>the key exchange is made to ensure that the server that it's connected to is indeed the one it was expecting (i.e non-suspicious server)
This means that it's still the same SSL connection made, but with verifyServerCertificate=false it does not verify that it is the intended server</p>

<p><strong>Answer Forth Question:</strong>
Currect, The code is in Java - and passing the SSL parameter make it encrypted.</p>

<p>So using these parameter gives what requires 
<code>?trustServerCertificate=true&amp;useSSL=true&amp;requireSSL=true&amp;verifyServerCertificate=false</code></p>
","443","<java><ssl><public-key><amazon-rds-aurora>","1","1","1","2017-10-10 14:24:42","46669223","0","","4961391","","2017-10-09 14:13:37","2017-10-09 13:42:59",""
"40392052","Generating public key from private key issues","<p>I am using the BigIntegerLibrary and this is applying secp256k1.</p>

<p>Here is my function to generate the public key. </p>

<pre><code>std::string genPublicKey(BigInteger privateKey){
    std::vector&lt;bool&gt; sequence = reducePointOps(privateKey);

    BigInteger s;
    BigInteger x3 = basePoint_X;
    BigInteger y3 = basePoint_Y;
    BigInteger rx, ry;
    BigInteger three(3);
    BigInteger two(2);

    for(std::vector&lt;bool&gt;::reverse_iterator it = sequence.rbegin(); it != sequence.rend(); ++it){
        //meaning point doubling
        if(*it == true){
            s = (((three * ((x3 * x3)%primeModulo))+a) * inverse(two*y3)) % primeModule;

            rx = (((s*s)%primeModulo)-(two * x3))% primeModulo;

            ry = (s * (x3 - rx) - y3)%primeModulo;
            //cout&lt;&lt;""Doubling: s=""&lt;&lt;s&lt;&lt;"", x=""&lt;&lt;rx&lt;&lt;"", y=""&lt;&lt;ry&lt;&lt;endl;
        }
        //meaning point addition
        else{
            //(x2,y2) -&gt; base point         (x1,y1)-&gt;(x3, y3) aka previously calculated point
            s = ((basePoint_Y - y3) * inverse(basePoint_X - x3))%primeModulo;


            rx = (((s*s) % primeModulo) - x3 - basePoint_X) % primeModulo;

            ry = ((s * (x3 - rx)) - y3)%primeModulo;
            //cout&lt;&lt;""Addition: s=""&lt;&lt;s&lt;&lt;"", x=""&lt;&lt;rx&lt;&lt;"", y=""&lt;&lt;ry&lt;&lt;endl;        
        }
        //cout&lt;&lt;endl;

        x3=rx;
        y3=ry;

    }
    std::string x3_str = bigIntegerToString(x3);
    std::string y3_str = bigIntegerToString(y3);
    return (x3_str + y3_str);
}
</code></pre>

<p>Here is my inverse function but I took this from somewhere so I am almost positive it is correct.  Plus I have tested it and is working.</p>

<pre><code>BigInteger inverse(BigInteger a){
    BigInteger s;
    BigInteger t;
    eea(primeModulo, a, &amp;s, &amp;t);
    if(t&lt;0)
        return (t%primeModulo);
    else
        return t;
}

BigInteger eea(BigInteger a, BigInteger b, BigInteger *s, BigInteger *t){
    if(a==0){
        *s=0;
        *t=1;
        return b;
    }

    BigInteger s1;
    BigInteger t1;
    BigInteger gcd = eea(b%a, a, &amp;s1, &amp;t1);
    *s = t1 - (b/a) * s1;
    *t = s1;

    return gcd;
}
</code></pre>

<p>Other than that there is only my function to reduce the amount of operations to point doublings and additions.  I have worked out many examples by hand so I know the data coming out of this function is correct.  </p>

<p>The weird thing is that I have tried this on an example in my cryptography class with values m=17 x=5 y=1 a=2 and I am getting all the values I should be getting.  I didn't code a way for the values to 'wrap around' once the inverse of the base point is reached but since with bitcoin the private key space is much much smaller than the modulo value so we shouldn't even reach that point when values start repeating themselves. I am about to cry with how frustrating this is so any help would be wonderful.  </p>

<p>Oh also there is one other weird thing.  Here is an example when I run it.</p>

<pre><code>Private Key:
18E14A7B6A307F426A94F8114701E7C8E774E7F9A47E2C2035DB29A206321725

My Public Key: 
458ACBDD5DE95281B9ACAB95D0F8DAC011C895EBE95E567BE9E308C12936CCAE3B81CE567B126A604A938D29ED15B5A96779AF27B5DC9ED6F2EE187E9C582BA6

Correct Public Key:
50863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6
</code></pre>

<p>It's not obvious but the last 19 hex digits are the same but the rest is different? They are the same length by the way.  Could this be something wrong with the BigInteger Library?  This was a way that seemed simple to me but would you recommend I did it a different way?</p>
","","442","<c++><biginteger><bitcoin><public-key><elliptic-curve>","2","","0","2016-11-03 01:14:50","","0","","207421","","2016-11-03 01:14:50","2016-11-03 00:41:04",""
"6676444","What is the public key used for when working with Git?","<p>I'm naive to Git and Linux/SSH so my question is what is the public key is <code>used for</code>?</p>

<p>Nam.</p>

<p><code>Update</code></p>

<p>Thanks for @emboss as below answer.
What I'm looking for is that the server <strong>need to verify a git client request is from registered account</strong></p>

<p>A registered ones are the accounts whose public key are in the server list :)</p>

<p>Thank you emboss!</p>
","<p>It's the key generated by <code>ssh-keygen</code> command on your machine. It has extension "".pub"".</p>
","442","<git><ssh><public-key>","2","0","4","2011-07-13 10:42:03","6676765","0","","248616","","2011-07-13 10:42:03","2011-07-13 08:54:49",""
"6676444","What is the public key used for when working with Git?","<p>I'm naive to Git and Linux/SSH so my question is what is the public key is <code>used for</code>?</p>

<p>Nam.</p>

<p><code>Update</code></p>

<p>Thanks for @emboss as below answer.
What I'm looking for is that the server <strong>need to verify a git client request is from registered account</strong></p>

<p>A registered ones are the accounts whose public key are in the server list :)</p>

<p>Thank you emboss!</p>
","<p>It's used to encrypt the git communication between you and a remote repository, ensuring that your push and pull data can't be spied on or tampered with.</p>
","442","<git><ssh><public-key>","2","0","4","2011-07-13 10:42:03","6676765","0","","248616","","2011-07-13 10:42:03","2011-07-13 08:54:49",""
"6676444","What is the public key used for when working with Git?","<p>I'm naive to Git and Linux/SSH so my question is what is the public key is <code>used for</code>?</p>

<p>Nam.</p>

<p><code>Update</code></p>

<p>Thanks for @emboss as below answer.
What I'm looking for is that the server <strong>need to verify a git client request is from registered account</strong></p>

<p>A registered ones are the accounts whose public key are in the server list :)</p>

<p>Thank you emboss!</p>
","<p>You can use RSA or DSA when creating the keys with <code>ssh-keygen</code> with the <code>-t</code> option. How RSA works you can read on <a href=""http://en.wikipedia.org/wiki/RSA#Operation"" rel=""nofollow"">Wikipedia</a></p>

<blockquote>
  <p>RSA involves a public key and a private key. The public key can be
  known to everyone and is used for encrypting messages. Messages
  encrypted with the public key can only be decrypted using the private
  key. The keys for the RSA algorithm are generated the following
  way:[...]</p>
</blockquote>

<p><a href=""http://help.github.com/linux-set-up-git/"" rel=""nofollow"">Here is a a How-To for setup your keys for github:</a></p>
","442","<git><ssh><public-key>","2","0","4","2011-07-13 10:42:03","6676765","0","","248616","","2011-07-13 10:42:03","2011-07-13 08:54:49",""
"6676444","What is the public key used for when working with Git?","<p>I'm naive to Git and Linux/SSH so my question is what is the public key is <code>used for</code>?</p>

<p>Nam.</p>

<p><code>Update</code></p>

<p>Thanks for @emboss as below answer.
What I'm looking for is that the server <strong>need to verify a git client request is from registered account</strong></p>

<p>A registered ones are the accounts whose public key are in the server list :)</p>

<p>Thank you emboss!</p>
","<p>You normally provide the git server with <em>your</em> public key (e.g. as it is done in github - you first have to send them your public key) first. This is then used by the server for authentication. Once you connect to the git server, you sign a message with your private key. This message is validated by the server with your previously provided public key (<a href=""http://tools.ietf.org/html/rfc4252#section-7"" rel=""nofollow"">cf. RFC 4252 section 7</a>). If the server is able to validate the message with your public key it can be sure that you are indeed the person you claim to be.</p>

<p>On the server side, the public key is also used for authentication purposes. The server typically sends its public key to you once you connect via SSH (for RSA cf. e.g.<a href=""http://tools.ietf.org/html/rfc4432"" rel=""nofollow"">RFC4432</a>) - this is when you are asked to accept a certain public key fingerprint. If you do accept, during this connection and subsequent connections, the server will use its private key to sign a message for generating a session key (more on that in asecond) that is being sent to you. You try to authenticate this message by using the server's public key to be sure you are talking to the right server. The message is then used to derive a symmetric encryption key to be used throughout the rest of the session. </p>

<p>The purpose for using symmetric keys to do the actual encryption is simply for reasons of performance, symmetric cryptography is much faster. This implies that the asymmetric public/private keys are merely used for authentication purposes.</p>
","442","<git><ssh><public-key>","2","3","4","2011-07-13 10:42:03","6676765","0","","248616","","2011-07-13 10:42:03","2011-07-13 08:54:49",""
"26680745","Trying to connect to Amazon EC2 through Java w/ keypair","<p>I'm trying to connect to an instance of Amazon's EC2 cloud using a Keypair and I've been having a good amount of trouble.  Ultimately I want to be able to transfer a file from my local machine to the cloud but I still need to get connected first.  Here's what I have now:</p>

<pre><code>public static void main(String[] args)
        throws IOException, ClassNotFoundException, UserAuthException {
    SSHClient ssh = new SSHClient();
    ssh.addHostKeyVerifier(""2a:a5:fe:10:51:2c:e0:de:2e:99:cc:a4:7d:43:01:0f"");
    ssh.connect(""address for cloud instance"");
    try {
        ssh.authPublickey(""ec2-user"", ""C:\\Users\\Pat\\Desktop\\public_key.pem"");
        final String src = ""C:\\Users\\Pat\\Desktop\\test file.txt"";
        ssh.newSCPFileTransfer().upload(new FileSystemFile(src), ""/home/ec2-user/"");
    } finally {
        ssh.disconnect();
    }
}
</code></pre>

<p>Before, I have run this without the addHostKeyVerifier line and it gives me an error saying that it couldn't load ssh-rsa key with the fingerprint that is now in that command.  The strange thing is that the amazon account shows a different fingerprint for this keypair, could that have anything to do with this?  When I run the above code I get this error:</p>

<pre><code>[main] INFO net.schmizz.sshj.common.SecurityUtils - BouncyCastle registration succeeded
[main] WARN net.schmizz.sshj.DefaultConfig - Disabling high-strength ciphers: cipher strengths     apparently limited by JCE policy
[main] INFO net.schmizz.sshj.transport.TransportImpl - Client identity string: SSH-2.0-    SSHJ_0_8_1_SNAPSHOT
[main] INFO net.schmizz.sshj.transport.TransportImpl - Server identity string: SSH-2.0-    OpenSSH_6.2
[main] INFO net.schmizz.sshj.transport.TransportImpl - Disconnected - BY_APPLICATION
Exception in thread ""main"" java.lang.NoClassDefFoundError:     org/bouncycastle/openssl/EncryptionException
    at net.schmizz.sshj.userauth.keyprovider.PKCS8KeyFile$Factory.create(PKCS8KeyFile.java:45)
    at net.schmizz.sshj.userauth.keyprovider.PKCS8KeyFile$Factory.create(PKCS8KeyFile.java:40)
    at net.schmizz.sshj.common.Factory$Named$Util.create(Factory.java:74)
    at net.schmizz.sshj.SSHClient.loadKeys(SSHClient.java:479)
    at net.schmizz.sshj.SSHClient.loadKeys(SSHClient.java:438)
    at net.schmizz.sshj.SSHClient.authPublickey(SSHClient.java:349)
    at scpupload.SCPUpload.main(SCPUpload.java:28)
Caused by: java.lang.ClassNotFoundException: org.bouncycastle.openssl.EncryptionException
    at java.net.URLClassLoader$1.run(URLClassLoader.java:372)
    at java.net.URLClassLoader$1.run(URLClassLoader.java:361)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.net.URLClassLoader.findClass(URLClassLoader.java:360)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
    ... 7 more
</code></pre>

<p>any and all help is appreciated</p>
","","441","<java><amazon-web-services><ssh><amazon-ec2><public-key>","0","","0","2014-10-31 17:55:58","","5","","","","","2014-10-31 17:55:58",""
"43336715","adding ssh public key to server by another user","<p>i have the permission to ssh into the server but i want to add another persons public key on to the server so that he can also ssh into the server how can i do that ... i tried using the following command </p>

<pre><code>&lt;entered another users public key&gt; | ssh user@123.45.56.78 ""mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt;  ~/.ssh/authorized_keys""
</code></pre>

<p>i get this error </p>

<pre><code> w: No such file or directory
</code></pre>

<p>but this command does not work fine for me... how can i do it ?</p>
","<p>You probably need <code>echo</code>:</p>

<pre><code>echo ""&lt;entered another users public key&gt;"" \
    | ssh user@123.45.56.78 ""mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt;  ~/.ssh/authorized_keys""
</code></pre>
","441","<ssh><server><ubuntu-14.04><public-key><ubuntu-server>","1","2","1","2017-04-11 07:59:28","","0","","","","","2017-04-11 04:21:10",""
"13749677","How to fully encrypt data in Ruby using Private Key encryption?","<p>First, some info on our system, which is basically an eTendering solution for the construction industry.</p>

<p>So:</p>

<ul>
<li>List item</li>
<li>Our system has multiple companies</li>
<li>Each company has multiple users</li>
<li>Each company can create multiple auctions</li>
<li>Other companies can then submit their bids for the available auctions. A bid consists of hundreds or thousands of individual items, and we would just need to encrypt the 'price' section of these records.</li>
</ul>

<p>The problem that we're facing is that our large customers do not want us to ever have access to the bid prices, at least while the bidding is in progress, which is totally understandable. Right now, we are simply encrypting the prices via a symmetric encryption, so even though the prices are effectively encrypted in the database, their concern is that we have the key to decrypt the prices.</p>

<p>We're thus looking at some form of public key encryption system.
Here is our initial thoughts on the solution:</p>

<ol>
<li>When a company signs up, we create a public/private keypair using OpenSSL for it and we save it in S3 or straight into the database. For this to be really useful, we would enforce the user to use a strong password for the private key, which would of course not be saved in the database.</li>
<li>When a company submits a bid for an auction, we encrypt the prices using the public key of the auction's owner company and we save them into the database.</li>
<li>When the auction bidding period is over and the issuing company wants to generate the report the first time, we ask him to input his password and use that along with his company's private key to decrypt the prices.</li>
<li>To make subsequent traffic faster, we cache the decrypted data (and maybe encrypt it using a simple symetrical encryption system)</li>
</ol>

<p>So here are the questions (and we're unfortunately not security experts, so sorry if those are stupid questions):</p>

<ul>
<li>Does this make any sense or is it a totally ludicrous or overkill solution?</li>
<li>Would we generate the keys using OpenSSL, OpenPGP or another solution?</li>
<li>What happens if a user wants to change his password or generate a new key? Would there be no other way but to decrypt/re-encode everything with the new key?</li>
<li>What would some of the pitfalls be with this solution?</li>
<li>Are there any better solutions that you could recommend?</li>
</ul>
","<p>To be clear: I have a hunch that your clients are probably not willing to sacrifice <em>all of the conveniences</em> that come with having your system manage some of the cryptography; you should probably present several options and their weaknesses vs convenience.</p>

<h3>General Points</h3>

<p>Before anything else, you start start with an explicit <a href=""http://en.wikipedia.org/wiki/Threat_model"" rel=""nofollow"">threat model</a>, covering every possible attack you can think of.  Even if you choose not to address some of the attacks (it's unrealistic to handle everything), you'll ferret out the more obvious attacks, and have at least a basic set of steps for handling others should they occur.</p>

<h3>Re: Does this make any sense?</h3>

<p>I think the general premise, while overkill on the part of your customers, makes sense from a security perspective.  Your clients want a cryptographically secure system; fair enough.</p>

<p>However, some points on your proposed solution:</p>

<ul>
<li><p>By allowing the client to pass their password over the wire, an attacker (which your client seems to think could be you) needs to only man in the middle that password to gain access to the pricing data.</p>

<ul>
<li>SSL helps mitigate this, but an errant log line somewhere along the line could very well expose the client's password by accident.</li>
</ul></li>
</ul>

<p>The <em>only</em> truly cryptographically secure way (as I see it) for the client to <em>ensure</em> that you don't have access to the pricing data is for them to encrypt it, and your system just acts as a broker for the encrypted data.  This, in effect, makes you a broker of encrypted packets and public keys, but your system <strong>should never see</strong> private keys.</p>

<p>The question is: are clients willing to manage their own keys, or is that too burdensome to them?  You might be able to automate most of it, at least (client app/website would handle storing the private key locally, and would also be responsible for gathering public keys of the other interested parties in order to decrypt their encrypted bids)</p>

<h3>Re: Would we generate the keys using OpenSSL, OpenPGP, or another solution?</h3>

<p>Really doesn't matter all that much; each of those options just define the container format for the public/private keys and any metadata.  Use whichever one fits your language/platform best.</p>

<p>The main decision point should be in which encryption algorithm and key strength: RSA-2048?  RSA-4096?  elliptic curve?  something else?</p>

<p>Specific to Ruby: You're probably just going to want to use the <a href=""http://ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/index.html"" rel=""nofollow"">OpenSSL</a> library, since it's part of the standard library.  But to reiterate my point above: It's even better if your servers never even see the private keys (if the clients are ok with the trade off of better security over convenience)</p>

<h3>Re: What happens if a user wants to change his password or generate a new key?</h3>

<p>Changing a password is trivial: the private key its self is just encrypted w/ some symmetric algorithm.  Changing the password involves decrypting the existing key, and re-encrypting it with the new key.  If the client were to lose their password, there is no recovery.</p>

<p>Generating a new key is probably safer, but requires more diligence on your part (encrypted payloads will need to identify which key they match, and clients could have multiple keys active at a time).  This is a good thing, though; it is a common practice to rotate keys regularly, even if they are not compromised.</p>
","437","<ruby><security><encryption><private-key><public-key>","5","4","3","2013-12-12 19:35:12","","0","3","2432317","","2013-12-12 04:38:23","2012-12-06 18:00:09",""
"13749677","How to fully encrypt data in Ruby using Private Key encryption?","<p>First, some info on our system, which is basically an eTendering solution for the construction industry.</p>

<p>So:</p>

<ul>
<li>List item</li>
<li>Our system has multiple companies</li>
<li>Each company has multiple users</li>
<li>Each company can create multiple auctions</li>
<li>Other companies can then submit their bids for the available auctions. A bid consists of hundreds or thousands of individual items, and we would just need to encrypt the 'price' section of these records.</li>
</ul>

<p>The problem that we're facing is that our large customers do not want us to ever have access to the bid prices, at least while the bidding is in progress, which is totally understandable. Right now, we are simply encrypting the prices via a symmetric encryption, so even though the prices are effectively encrypted in the database, their concern is that we have the key to decrypt the prices.</p>

<p>We're thus looking at some form of public key encryption system.
Here is our initial thoughts on the solution:</p>

<ol>
<li>When a company signs up, we create a public/private keypair using OpenSSL for it and we save it in S3 or straight into the database. For this to be really useful, we would enforce the user to use a strong password for the private key, which would of course not be saved in the database.</li>
<li>When a company submits a bid for an auction, we encrypt the prices using the public key of the auction's owner company and we save them into the database.</li>
<li>When the auction bidding period is over and the issuing company wants to generate the report the first time, we ask him to input his password and use that along with his company's private key to decrypt the prices.</li>
<li>To make subsequent traffic faster, we cache the decrypted data (and maybe encrypt it using a simple symetrical encryption system)</li>
</ol>

<p>So here are the questions (and we're unfortunately not security experts, so sorry if those are stupid questions):</p>

<ul>
<li>Does this make any sense or is it a totally ludicrous or overkill solution?</li>
<li>Would we generate the keys using OpenSSL, OpenPGP or another solution?</li>
<li>What happens if a user wants to change his password or generate a new key? Would there be no other way but to decrypt/re-encode everything with the new key?</li>
<li>What would some of the pitfalls be with this solution?</li>
<li>Are there any better solutions that you could recommend?</li>
</ul>
","<blockquote>
  <p>When a company signs up, we create a public/private keypair using OpenSSL for it and we save it in S3 or straight into the database. For this to be really useful, we would enforce the user to use a strong password for the private key, which would of course not be saved in the database.</p>
</blockquote>

<p>I am a bit sceptical about this step. If you (the developer company) generate both the public and the private key used for the encryption it means you are 50% into being able to break the encryption. The only thing that protects your customer is the password, which you might be able to bruteforce (i am not suggesting that you will but you have the ability to do so)</p>

<p>If you will use PKI (or what you have described) you need to ensure that the key creation does not happen on your system. The client should create the pair on their systems and then provide you with their publoic key which you will use to encrypt the prices. The client then will be able to decrypt using the private key on which they have sole control</p>

<blockquote>
  <p>What would some of the pitfalls be with this solution?</p>
</blockquote>

<p>The pitfall is that you are making a complex solution. Especially if you follow my advice above, then you place your trust on the customer to not ""lose"" the private key (and/or password) or else they won't be able to decrypt the prices. In addition, if the key leaks from their side, it's difficult to prove that your application is ""innocent""</p>

<blockquote>
  <p>Would we generate the keys using OpenSSL, OpenPGP or another solution?</p>
</blockquote>

<p>In order to prevent the pitfall of a customer losing a key, you might want to look into PGP (the commercial version does this for sure) and into the concept of ADK (additional decryption key) and ""split keys"". The idea is that besides encrypting with the public key of the customer you also encrypt with a ""corporate"" key which can only be used if y out of x number of people come together (as an example, 10 people can possess parts of the key and if 6 of them come together they can reconstruct the key). The parts can be shared amongst your company, the client, their lawyer, etc</p>
","437","<ruby><security><encryption><private-key><public-key>","5","3","3","2013-12-12 19:35:12","","0","3","2432317","","2013-12-12 04:38:23","2012-12-06 18:00:09",""
"13749677","How to fully encrypt data in Ruby using Private Key encryption?","<p>First, some info on our system, which is basically an eTendering solution for the construction industry.</p>

<p>So:</p>

<ul>
<li>List item</li>
<li>Our system has multiple companies</li>
<li>Each company has multiple users</li>
<li>Each company can create multiple auctions</li>
<li>Other companies can then submit their bids for the available auctions. A bid consists of hundreds or thousands of individual items, and we would just need to encrypt the 'price' section of these records.</li>
</ul>

<p>The problem that we're facing is that our large customers do not want us to ever have access to the bid prices, at least while the bidding is in progress, which is totally understandable. Right now, we are simply encrypting the prices via a symmetric encryption, so even though the prices are effectively encrypted in the database, their concern is that we have the key to decrypt the prices.</p>

<p>We're thus looking at some form of public key encryption system.
Here is our initial thoughts on the solution:</p>

<ol>
<li>When a company signs up, we create a public/private keypair using OpenSSL for it and we save it in S3 or straight into the database. For this to be really useful, we would enforce the user to use a strong password for the private key, which would of course not be saved in the database.</li>
<li>When a company submits a bid for an auction, we encrypt the prices using the public key of the auction's owner company and we save them into the database.</li>
<li>When the auction bidding period is over and the issuing company wants to generate the report the first time, we ask him to input his password and use that along with his company's private key to decrypt the prices.</li>
<li>To make subsequent traffic faster, we cache the decrypted data (and maybe encrypt it using a simple symetrical encryption system)</li>
</ol>

<p>So here are the questions (and we're unfortunately not security experts, so sorry if those are stupid questions):</p>

<ul>
<li>Does this make any sense or is it a totally ludicrous or overkill solution?</li>
<li>Would we generate the keys using OpenSSL, OpenPGP or another solution?</li>
<li>What happens if a user wants to change his password or generate a new key? Would there be no other way but to decrypt/re-encode everything with the new key?</li>
<li>What would some of the pitfalls be with this solution?</li>
<li>Are there any better solutions that you could recommend?</li>
</ul>
","<p>So here's my suggestion, if you want to solve this using encryption...</p>

<ul>
<li>Each user <em>and</em> each company should generate <a href=""http://openpgp.com"" rel=""noreferrer"">OpenPGP</a> (or <a href=""http://gnupg.org"" rel=""noreferrer"">GnuPG</a>) <a href=""http://en.wikipedia.org/wiki/Public-key_cryptography"" rel=""noreferrer"">asymmetric</a> public/private key pairs</li>
<li>Each of those public keys should be uploaded to a <a href=""http://en.wikipedia.org/wiki/Key_server_%28cryptographic%29"" rel=""noreferrer"">public key server</a></li>
<li>Companies could optionally ""<a href=""http://en.wikipedia.org/wiki/Digital_signature"" rel=""noreferrer"">sign</a>"" the public keys of the individual users, to designate a trust relationship with those users (and revoke that signature if that relationship changes)</li>
<li>The auctioneer or non-partisan arbiter would also generate a key pair and push that public key to the public key server</li>
<li>As part of an auction registration process, each user would import the public key of the auctioneer, and the auctioneer would import the public key of each user</li>
<li>A trusted third party, perhaps a <a href=""http://en.wikipedia.org/wiki/Software_as_a_service"" rel=""noreferrer"">SaaS</a> vendor outside of the auctioneer, would host a service through which users and the auctioneer would communicate</li>
<li>Bidding users would create a bid by

<ul>
<li>signing their bid with their private key</li>
<li>encrypting their proposed price to <em>two</em> keys: their own public key <em>and</em> the auctioneer's public key</li>
<li>submitting their bid to the trusted third party service, which would need to enforce an embargo on any user retrieving bids before the auction expiration</li>
</ul></li>
<li>At auction end, and <em>only</em> after auction end, the auctioneer retrieves all of the bids, decrypts them, and verifies signatures</li>
</ul>

<p>A couple of key points:</p>

<ul>
<li>It's essential that no user or company private keys are ever shared or stored within the service -- that's the only real ""flaw"" I see in your proposed methodology in your question.  If that's the case, it would be very possible for one user to accuse an administrator of ""fraud"" or ""tampering"" with bids, as an administrator of your server would ultimately have access to the private keys of all users, since you've generated them yourself.</li>
<li>Along those same lines, it's essential that any an all communication and ""bids"" are cryptographically ""signed"" with the <em>truly</em> private keys by each user.  This is how you would know that a bid came from one particular user and <em>only</em> that user, and that the bid could not have been tampered with.</li>
<li>Encrypting the bids to the public keys of the bidding user and the auctioneer ensures that the third party SaaS vendor has no introspection into the bids themselves during the blackout period while the auction is open.  I believe this is the most important point to solving your problem as described.</li>
<li>Note that it might actually be preferred to encrypt each bid to a ring of <em>all</em> of the bidding users, if by design you want to make all bids public after the auction is closed.  That would be a slight modification to my algorithm as described above.</li>
</ul>

<p>In the interest of full disclosure and perhaps some subtle marketing, I happen to be the architect and CTO of a company called <a href=""http://gazzang.com"" rel=""noreferrer"">Gazzang</a> who has implemented a product called <a href=""http://gazzang.com/products/ztrustee"" rel=""noreferrer"">zTrustee</a> which operates exactly as described above ;-)</p>
","437","<ruby><security><encryption><private-key><public-key>","5","5","3","2013-12-12 19:35:12","","0","3","2432317","","2013-12-12 04:38:23","2012-12-06 18:00:09",""
"41336947","Erlang generate rsa keys from pem files","<p>I generate <em>private rsa key</em> and <em>certificate</em> files using this command in shell:
<code>openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days XXX -nodes</code></p>

<p>Now i try to convert these files to rsa public and private key. I use the code below but does not work. I think the <code>PrivateKey</code> variable must be <code>#RSAPrivateKey{}</code> according to <a href=""http://erlang.org/doc/apps/public_key/using_public_key.html"" rel=""nofollow noreferrer"">http://erlang.org/doc/apps/public_key/using_public_key.html</a> but it is <code>#PrivateKeyInfo{}</code>.
How can i generate ras public and private key from key.pem and cert.pem?</p>

<p>erlang shell:</p>

<pre><code>1&gt; {ok, PemBin} = file:read_file(""key.pem"").
{ok,&lt;&lt;""-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDMd0dnMS9t27wo\nhloldtGYbT3C/uR""...&gt;&gt;}
2&gt; [RSAEntry] = public_key:pem_decode(PemBin).
[{'PrivateKeyInfo',&lt;&lt;48,130,4,189,2,1,0,48,13,6,9,42,134,
                     72,134,247,13,1,1,1,5,0,4,130,4,167,
                     ...&gt;&gt;,
                   not_encrypted}]
3&gt; PrivateKey = public_key:pem_entry_decode(RSAEntry).
{'PrivateKeyInfo',v1,
                  {'PrivateKeyInfo_privateKeyAlgorithm',{1,2,840,113549,1,1,1},
                                                        {asn1_OPENTYPE,&lt;&lt;5,0&gt;&gt;}},
                  &lt;&lt;48,130,4,163,2,1,0,2,130,1,1,0,204,119,71,103,49,47,109,
                    219,188,40,134,90,37,...&gt;&gt;,
                  asn1_NOVALUE}
4&gt; {ok, CertBin} = file:read_file(""cert.pem"").        
{ok,&lt;&lt;""-----BEGIN CERTIFICATE-----\nMIIDVzCCAj+gAwIBAgIJAKBDxdUZ8v9/MA0GCSqGSIb3DQEBCwUAMEIxCzAJBgNV\nBAYTAlhYMRUwEwY""...&gt;&gt;}
5&gt; [CertEntry] = public_key:pem_decode(CertBin).      
[{'Certificate',&lt;&lt;48,130,3,87,48,130,2,63,160,3,2,1,2,2,9,
                  0,160,67,197,213,25,242,255,127,48,13,
                  ...&gt;&gt;,
                not_encrypted}]
6&gt; Cert = public_key:pem_entry_decode(CertEntry).     
{'Certificate',{'TBSCertificate',v3,11548291388562145151,
                                 {'AlgorithmIdentifier',{1,2,840,113549,1,1,11},&lt;&lt;5,0&gt;&gt;},
                                 {rdnSequence,[[{'AttributeTypeAndValue',{2,5,4,6},
                                                                         &lt;&lt;19,2,88,88&gt;&gt;}],
                                               [{'AttributeTypeAndValue',{2,5,4,7},&lt;&lt;""\f\fDefault City""&gt;&gt;}],
                                               [{'AttributeTypeAndValue',{2,5,4,10},
                                                                         &lt;&lt;12,19,68,101,102,97,117,108,116,32,67,111,109,...&gt;&gt;}]]},
                                 {'Validity',{utcTime,""161226221244Z""},
                                             {utcTime,""170125221244Z""}},
                                 {rdnSequence,[[{'AttributeTypeAndValue',{2,5,4,6},
                                                                         &lt;&lt;19,2,88,88&gt;&gt;}],
                                               [{'AttributeTypeAndValue',{2,5,4,7},&lt;&lt;""\f\fDefault City""&gt;&gt;}],
                                               [{'AttributeTypeAndValue',{2,5,4,10},
                                                                         &lt;&lt;12,19,68,101,102,97,117,108,116,32,67,...&gt;&gt;}]]},
                                 {'SubjectPublicKeyInfo',{'AlgorithmIdentifier',{1,2,840,
                                                                                 113549,1,1,1},
                                                                                &lt;&lt;5,0&gt;&gt;},
                                                         &lt;&lt;48,130,1,10,2,130,1,1,0,204,119,71,103,49,47,109,...&gt;&gt;},
                                 asn1_NOVALUE,asn1_NOVALUE,
                                 [{'Extension',{2,5,29,14},
                                               false,
                                               &lt;&lt;4,20,9,99,232,184,104,132,196,200,55,...&gt;&gt;},
                                  {'Extension',{2,5,29,35},
                                               false,
                                               &lt;&lt;48,22,128,20,9,99,232,184,104,132,...&gt;&gt;},
                                  {'Extension',{2,5,29,19},false,&lt;&lt;48,3,1,1,255&gt;&gt;}]},
               {'AlgorithmIdentifier',{1,2,840,113549,1,1,11},&lt;&lt;5,0&gt;&gt;},
               &lt;&lt;96,39,63,51,19,154,132,69,252,134,229,148,80,40,135,23,
                 44,230,150,154,106,53,135,0,68,...&gt;&gt;}
</code></pre>
","<p>Finally i found answer of my question. The <em>private key</em> and <em>public key</em> can be extracted from <em>pem</em> files using these functions:</p>

<pre><code>pubkey() -&gt;
    File = ""cert.key"",
    {ok, PemBin} = file:read_file(File),
    [CertEntry] = public_key:pem_decode(PemBin),
    {_, DerCert, _} = CertEntry,
    Decoded = public_key:pkix_decode_cert(DerCert, otp),
    Decoded#'OTPCertificate'.tbsCertificate
           #'OTPTBSCertificate'.subjectPublicKeyInfo
           #'OTPSubjectPublicKeyInfo'.subjectPublicKey.


privkey() -&gt;
    File = ""pem.key"",
    {ok, PemBin} = file:read_file(File),
    [RSAEntry] = public_key:pem_decode(PemBin),
    Decoded = public_key:pem_entry_decode(RSAEntry),
    Key = Decoded#'PrivateKeyInfo'.privateKey,
    public_key:der_decode('RSAPrivateKey', Key).
</code></pre>
","436","<ssl><encryption><erlang><rsa><public-key>","3","5","1","2016-12-27 10:45:57","41343646","2","","4481943","","2016-12-27 10:45:57","2016-12-26 22:34:18",""
"26089973","extract public key from RSA private key in c++ without openssl","<p>I know RSA private key contains the information of the associated public key. How can I dump the public key from the private key? I want to do it in iOS environment without openssl. Is it possible?</p>
","<p>yes it is possible ...</p>

<p>but you have to handle all the stuff about the way how the key is represented, i.e. how the specific parts of the key are stored in a file, etc</p>

<p>your private key consists of some numbers, usually like this:
d (private exponent), N (common modulus) P,Q (two very large primes) dP and dQ (intermediate values for a computational shortcut ... ignore them for your task)</p>

<p>what you want to do is to calculate PHI = (P-1)*(Q-1) and then run the extended euclidean algorithm (see wikipedia for that) for d and PHI to find the multiplicative inverse element of d mod PHI ... this element is e (public exponent)</p>

<p>your public key then is the tuple (e, N)</p>
","430","<ios><rsa><private-key><public-key><key-pair>","0","0","1","2014-09-29 06:07:56","","6","","","","","2014-09-28 21:44:46",""
"41000311","Deploy an ssh repository to Openshift NextGen","<p>I'm an OpenShift newbie and I'm trying to deploy a Rails app to the Openshift NextGen from a private BitBucket repository. I followed <a href=""https://blog.openshift.com/deploying-from-private-git-repositories/"" rel=""nofollow noreferrer"">this page</a> and gave in the generated ssh key to BitBucket.</p>

<p>Now the point is, according to that page you must create the app in OpenShift in order to assign it the BuildConfig object in the last step with</p>

<p><code>oc patch buildConfig &lt;app&gt; -p '{""spec"":{""source"":{""sourceSecret"":{""name"":""sshsecret""}}}}'</code></p>

<p>So before this I ran the command </p>

<p><code>oc new-app --name=&lt;app&gt; ruby~git@bitbucket.org:&lt;username&gt;/&lt;repository&gt;</code></p>

<p>to create the Rails app hosted in the BitBucket repository. But if I run <code>oc status</code>, it appears that the app failed to build:</p>

<pre><code>bc/&lt;app&gt; source builds ssh://git@bitbucket.org/&lt;username&gt;/&lt;repository&gt; on openshift/ruby:2.3
  build #1 failed 47 minutes ago
deployment #1 waiting on image or update

Errors:
  * build/&lt;app&gt;-1 has failed.
</code></pre>

<p>Am I missing something?</p>

<p>Edit:
<code>oc logs build/&lt;app&gt;-1</code> shows the following output.</p>

<pre><code>Pulling image ""registry.ops.openshift.com/rhscl/ruby-23-rhel7@sha256:d89fc‌​0753fbace518d433f3a9‌​95149d70fef69be06a4c‌​e350745277a8ac68e91"" ... 
Pulling image ""registry.ops.openshift.com/rhscl/ruby-23-rhel7@sha256:d89fc‌​0753fbace518d433f3a9‌​95149d70fef69be06a4c‌​e350745277a8ac68e91"" ... 
Cloning ""ssh://git@bitbucket.org/&lt;username&gt;/&lt;repository&gt;.git"" ... 
error: build error: Host key verification failed. 
fatal: Could not read from remote repository. 
Please make sure you have the correct access rights and the repository exists.
</code></pre>

<p>Edit 2: I reproduced the problem by connecting to a GitHub ssh repository in oc. Again same procedure, I uploaded my ssh public key to GitHub and oc fails to build with the same error. So to this point it's not a problem related to either BitBucket or GitHub anymore, there must be something that has to do with the way OpenShift or Git recognizes the keys, if not even my machine...</p>

<p>Edit 3: I wanted to point out that the command <code>oc patch buildConfig &lt;app&gt; -p '{""spec"":{""source"":{""sourceSecret"":{""name"":""sshsecret""}}}}'</code> has no value, since I ran it after the app creation and then rebuilt the app with <code>oc start-build --from-build=&lt;app&gt;-1</code> immediately afterwards, but it fails again with the same result. I'm also not sure if the previous command is the right one to rebuild the app correctly.</p>

<p>Any help will be appreciated a lot, thanks in advance.</p>
","<p>Per your extra logs, you need to make sure you have proper rights to the git repository. If you've followed the docs, you just need to make sure your key is also in bitbucket.</p>
","425","<git><ssh><openshift><public-key><openshift-client-tools>","1","0","3","2016-12-13 18:09:03","41127806","2","1","5903989","","2016-12-09 13:16:30","2016-12-06 16:33:01",""
"41000311","Deploy an ssh repository to Openshift NextGen","<p>I'm an OpenShift newbie and I'm trying to deploy a Rails app to the Openshift NextGen from a private BitBucket repository. I followed <a href=""https://blog.openshift.com/deploying-from-private-git-repositories/"" rel=""nofollow noreferrer"">this page</a> and gave in the generated ssh key to BitBucket.</p>

<p>Now the point is, according to that page you must create the app in OpenShift in order to assign it the BuildConfig object in the last step with</p>

<p><code>oc patch buildConfig &lt;app&gt; -p '{""spec"":{""source"":{""sourceSecret"":{""name"":""sshsecret""}}}}'</code></p>

<p>So before this I ran the command </p>

<p><code>oc new-app --name=&lt;app&gt; ruby~git@bitbucket.org:&lt;username&gt;/&lt;repository&gt;</code></p>

<p>to create the Rails app hosted in the BitBucket repository. But if I run <code>oc status</code>, it appears that the app failed to build:</p>

<pre><code>bc/&lt;app&gt; source builds ssh://git@bitbucket.org/&lt;username&gt;/&lt;repository&gt; on openshift/ruby:2.3
  build #1 failed 47 minutes ago
deployment #1 waiting on image or update

Errors:
  * build/&lt;app&gt;-1 has failed.
</code></pre>

<p>Am I missing something?</p>

<p>Edit:
<code>oc logs build/&lt;app&gt;-1</code> shows the following output.</p>

<pre><code>Pulling image ""registry.ops.openshift.com/rhscl/ruby-23-rhel7@sha256:d89fc‌​0753fbace518d433f3a9‌​95149d70fef69be06a4c‌​e350745277a8ac68e91"" ... 
Pulling image ""registry.ops.openshift.com/rhscl/ruby-23-rhel7@sha256:d89fc‌​0753fbace518d433f3a9‌​95149d70fef69be06a4c‌​e350745277a8ac68e91"" ... 
Cloning ""ssh://git@bitbucket.org/&lt;username&gt;/&lt;repository&gt;.git"" ... 
error: build error: Host key verification failed. 
fatal: Could not read from remote repository. 
Please make sure you have the correct access rights and the repository exists.
</code></pre>

<p>Edit 2: I reproduced the problem by connecting to a GitHub ssh repository in oc. Again same procedure, I uploaded my ssh public key to GitHub and oc fails to build with the same error. So to this point it's not a problem related to either BitBucket or GitHub anymore, there must be something that has to do with the way OpenShift or Git recognizes the keys, if not even my machine...</p>

<p>Edit 3: I wanted to point out that the command <code>oc patch buildConfig &lt;app&gt; -p '{""spec"":{""source"":{""sourceSecret"":{""name"":""sshsecret""}}}}'</code> has no value, since I ran it after the app creation and then rebuilt the app with <code>oc start-build --from-build=&lt;app&gt;-1</code> immediately afterwards, but it fails again with the same result. I'm also not sure if the previous command is the right one to rebuild the app correctly.</p>

<p>Any help will be appreciated a lot, thanks in advance.</p>
","<p>Make sure you have successfully uploaded your private key to OpenShift. Because in deployment process, one of openshift's server is cloning your repo not your localhost.</p>

<pre><code>oc secrets new-sshauth sshsecret --ssh-privatekey=$HOME/.ssh/id_rsa
</code></pre>
","425","<git><ssh><openshift><public-key><openshift-client-tools>","1","-1","3","2016-12-13 18:09:03","41127806","2","1","5903989","","2016-12-09 13:16:30","2016-12-06 16:33:01",""
"41000311","Deploy an ssh repository to Openshift NextGen","<p>I'm an OpenShift newbie and I'm trying to deploy a Rails app to the Openshift NextGen from a private BitBucket repository. I followed <a href=""https://blog.openshift.com/deploying-from-private-git-repositories/"" rel=""nofollow noreferrer"">this page</a> and gave in the generated ssh key to BitBucket.</p>

<p>Now the point is, according to that page you must create the app in OpenShift in order to assign it the BuildConfig object in the last step with</p>

<p><code>oc patch buildConfig &lt;app&gt; -p '{""spec"":{""source"":{""sourceSecret"":{""name"":""sshsecret""}}}}'</code></p>

<p>So before this I ran the command </p>

<p><code>oc new-app --name=&lt;app&gt; ruby~git@bitbucket.org:&lt;username&gt;/&lt;repository&gt;</code></p>

<p>to create the Rails app hosted in the BitBucket repository. But if I run <code>oc status</code>, it appears that the app failed to build:</p>

<pre><code>bc/&lt;app&gt; source builds ssh://git@bitbucket.org/&lt;username&gt;/&lt;repository&gt; on openshift/ruby:2.3
  build #1 failed 47 minutes ago
deployment #1 waiting on image or update

Errors:
  * build/&lt;app&gt;-1 has failed.
</code></pre>

<p>Am I missing something?</p>

<p>Edit:
<code>oc logs build/&lt;app&gt;-1</code> shows the following output.</p>

<pre><code>Pulling image ""registry.ops.openshift.com/rhscl/ruby-23-rhel7@sha256:d89fc‌​0753fbace518d433f3a9‌​95149d70fef69be06a4c‌​e350745277a8ac68e91"" ... 
Pulling image ""registry.ops.openshift.com/rhscl/ruby-23-rhel7@sha256:d89fc‌​0753fbace518d433f3a9‌​95149d70fef69be06a4c‌​e350745277a8ac68e91"" ... 
Cloning ""ssh://git@bitbucket.org/&lt;username&gt;/&lt;repository&gt;.git"" ... 
error: build error: Host key verification failed. 
fatal: Could not read from remote repository. 
Please make sure you have the correct access rights and the repository exists.
</code></pre>

<p>Edit 2: I reproduced the problem by connecting to a GitHub ssh repository in oc. Again same procedure, I uploaded my ssh public key to GitHub and oc fails to build with the same error. So to this point it's not a problem related to either BitBucket or GitHub anymore, there must be something that has to do with the way OpenShift or Git recognizes the keys, if not even my machine...</p>

<p>Edit 3: I wanted to point out that the command <code>oc patch buildConfig &lt;app&gt; -p '{""spec"":{""source"":{""sourceSecret"":{""name"":""sshsecret""}}}}'</code> has no value, since I ran it after the app creation and then rebuilt the app with <code>oc start-build --from-build=&lt;app&gt;-1</code> immediately afterwards, but it fails again with the same result. I'm also not sure if the previous command is the right one to rebuild the app correctly.</p>

<p>Any help will be appreciated a lot, thanks in advance.</p>
","<p>Solved. I just created a new secret connected to a new key with</p>

<pre><code>oc secrets new-sshauth sshsecret2 --ssh-privatekey=$HOME/.ssh/id_rsa
</code></pre>

<p>so changing the name from <code>sshsecret</code> to <code>sshsecret2</code> and repeated the above process. Apparently the previous secret was not configured properly.</p>

<p>I would also like to thank the Upwork freelancer <a href=""https://www.upwork.com/freelancers/~0188ec8c0712f171a3"" rel=""nofollow noreferrer"">Dwi Prihandi</a> for having contributed to the problem.</p>
","425","<git><ssh><openshift><public-key><openshift-client-tools>","1","1","3","2016-12-13 18:09:03","41127806","2","1","5903989","","2016-12-09 13:16:30","2016-12-06 16:33:01",""
"18832851","ssh2 cannot login using either publickey or password. Totally locked out","<p>I am not able to login to our production server when I tried to login without password.   The server is solaris and using secure shell ssh2.   It doesnot accept the public key or the password.  Now I am totally locked out. </p>

<p>I get to password prompt but right after I type password it gives the following error.</p>

<p>ssh server
admin@sever's password:
Authenticated with partial success.
Permission denied (publickey).</p>

<p>This is a severe issue.  Please help.</p>
","<p>Sounds like it's trying to use multi-factor authentication maybe. I don't know how to make libssh2 do that but it can be done easily enough with <a href=""http://phpseclib.sourceforge.net/ssh/intro.html"" rel=""nofollow"">phpseclib, a pure PHP SSH2 implementation</a>. An example follows:</p>

<pre><code>&lt;?php
include('Net/SSH2.php');

$ssh = new Net_SSH2('www.domain.tld');
if (!$ssh-&gt;login('username', 'pass1', 'code1')) {
    exit('Login failed');
}
// this does the same thing as the above
//if (!$ssh-&gt;login($username, 'pass1') &amp;&amp; !$ssh-&gt;login('username', 'code1')) {
//    exit('Login failed');
//}

echo $ssh-&gt;exec('pwd');
echo $ssh-&gt;exec('ls -la');
?&gt;
</code></pre>

<p>src: <a href=""http://phpseclib.sourceforge.net/ssh/auth.html#multifactor"" rel=""nofollow"">http://phpseclib.sourceforge.net/ssh/auth.html#multifactor</a></p>
","416","<ssh><passwords><public-key><solaris-10><libssh2>","0","0","1","2013-09-17 04:50:09","","1","","","","","2013-09-16 16:22:44",""
"34091837","Where to store the ssh public key for connecting GitLab to Bitbucket?","<p>I'd like to connect (an Omnibus install of) GitLab to Bitbucket. According to <a href=""http://doc.gitlab.com/ce/integration/bitbucket.html#step-1-public-key"" rel=""nofollow"">the documentation</a>, I need to create and store a public key for it:</p>

<blockquote>
  <p>GitLab will automatically register your public key with Bitbucket as a
  deploy key for the repositories to be imported. Your public key needs
  to be at ~/.ssh/bitbucket_rsa.pub, which will expand to
  /home/git/.ssh/bitbucket_rsa.pub in most configurations.</p>
</blockquote>

<p>The fact is I don't have a <code>/home/git</code>. How could I know, then, where I must create the public key, so that GitLab notices it and registers it automatically?</p>
","<p>The home directory for the git User in an Omnibus install is by default <code>/var/opt/gitlab</code>. You can either check your <code>gitlab.rb</code> config file for the key <code>user['home']</code> and see if you have modified it or do a <code>cat /etc/passwd</code>and find the home diretory for the user git there.</p>

<p>Default value <code>user['home']</code>(remember the # means it is commented out):</p>

<p><code># user['home'] = ""/var/opt/gitlab""</code></p>

<p>Output of <code>cat /etc/passwd | grep git</code>:</p>

<p><code>git:x:1000:1000:git,,,:/var/opt/gitlab:/bin/sh</code></p>

<p>Once you have found out where the home directory for the user git is, you can put <code>bitbucket_rsa.pub</code> in the folder <code>.ssh</code>. If it doesn't exist you can create that folder.</p>
","414","<ssh><bitbucket><gitlab><public-key><gitlab-omnibus>","0","1","1","2016-02-05 14:13:24","35226287","0","","2516943","","2015-12-04 15:43:31","2015-12-04 15:33:53",""
"7205272","Quite special PublicKey in .NET core assemblies","<p>I've noticed that core .NET assemblies have PublicKey = 00000000000000000400000000000000. Not only it's shorter then those sn.exe allows to generate (min 384 bits) but also it has a lot of zeros. </p>

<p>How to generate signing key with such a fancy public key?</p>
","<p>That's the ECMA Standard defined public key.</p>

<p>It's to deal with three conflicting requirements:</p>

<ol>
<li>A mechanism that ensures that assemblies are signed by their creators and could not have been created by a fraudulent other party.</li>
<li>That CLI be defined openly in such a way that other people are free to implement a version (Mono would be a real-life example).</li>
<li>That there be a standard library of classes made available with every version of the framework.</li>
</ol>

<p>These three things can't happen at the same time!</p>

<p>If I create a version of .NET (point 2), then I need to provide a version of the standard library (point 3), which needs to be trusted (point 1), so I need to sign it to prove that I'm Microsoft. Oh wait, I'm not Microsoft! (eh, point 2 again).</p>

<p>Instead what happens is:</p>

<ol>
<li><p>I create a public-private key pair. People trusted to build new release versions of the assemblies in my framework library implementation have access to the private key, the public key can be known to anyone doing any work on the CLI implementation.</p></li>
<li><p>I mark the relevant assemblies as having been signed with the key corresponding to the public key <code>00000000000000000400000000000000</code> (defined in the ECMA standard), though really they were signed with the private key mentioned above.</p></li>
<li><p>In the code in the CLI any check on an assembly that claims to have been signed with the key corresponding to the public key <code>00000000000000000400000000000000</code> is checked with the real public key. If this checks out, then it can only have been signed by someone we trust in building those assemblies.</p></li>
</ol>

<p>Of course, MS's framework won't trust our assemblies, Mono's won't trust them, and we won't trust either of theirs, because we all have different real keys corresponding to the ECMA standard key. Which is as it should be.</p>

<p>Meanwhile, the fact that <code>00000000000000000400000000000000</code> doesn't match any real valid public key means it's not possible for it to clash with any other public key.</p>
","408","<.net><.net-assembly><strongname><public-key>","8","6","2","2019-05-18 12:06:57","8851006","0","1","","","","2011-08-26 13:22:19",""
"7205272","Quite special PublicKey in .NET core assemblies","<p>I've noticed that core .NET assemblies have PublicKey = 00000000000000000400000000000000. Not only it's shorter then those sn.exe allows to generate (min 384 bits) but also it has a lot of zeros. </p>

<p>How to generate signing key with such a fancy public key?</p>
","<p>This is NOT the proper answer to the question. The only thing this answer provides is the pointer to ECMA standard, apparently ECMA-335 with CLI specs. But this ECMA standard provides only a basic definition in terms of unique/fixed value and the name it should be called. Otherwise, it provides nothing about how and where the actual public key is found. The value 00000000000000000400000000000000 is NOT a public key, it is only a marker called Standard Public Key which has nothing to do with a real public key. This value is used to compute Public Key Token for the assembly that uses it but this value is not used to as any public key of RSA algorithm when processing the assembly signature. You need a real Public Key. The proper answer to the question should be how and where the actual Public Key is found for the assembly that uses it</p>
","408","<.net><.net-assembly><strongname><public-key>","8","1","2","2019-05-18 12:06:57","8851006","0","1","","","","2011-08-26 13:22:19",""
"35020850","Why does the Java KeyStore fail at loading an OpenPGP key?","<p>I am willing to spend some amount of time developing yet another license manager for desktop Java application. After some looking around I discovered <a href=""https://cs.fit.edu/code/projects/cse2410_spring2015_null_pointer/repository/revisions/f7f05cfc8b67c0f4dd2fa80cac161ca38994c51f/entry/core/java/src/freenet/support/CPUInformation/CPUID.java"" rel=""nofollow"">JCPUID</a> by Iakin that is free to use and should work at most operating systems with native libs that I found <a href=""https://cs.fit.edu/code/projects/cse2410_spring2015_null_pointer/repository/revisions/e3abc25c6bf2db93edd6f9a4ed132db7259c5463/show/installer/lib/jbigi"" rel=""nofollow"">here</a>.</p>

<p>My idea is to do two modules: main application that will show popup window with CPU ID and verification text field and key generator app. User will pass CPU ID to keygen owner, who will return verification code (generated with keygen) to user. After user submits correct verification code, license file with that code will be created at filesystem. Every time the application starts up, it will check the existence and correctness of that file and load main application screen after that.</p>

<p>What about code verification, I think the best option will be to use asymmetric cryptography, in particular RSA. The public key will be built-in into application and secret will be built-in into key generator. So CPUID will be passed to key generator owner and then signed with RSA. That signature will be transferred back to user, who will verify its validity with built-in public key.</p>

<p>I generated gpg key pairs using Kleopatra and gpg Linux command line tool itself. Then I tried to sign something using this method:</p>

<pre><code>    private byte[] createSignature(byte[] file) {
    byte[] signature = null;

    try {
        java.security.KeyStore keyStoreFile = java.security.KeyStore
                .getInstance(""PKCS12"");
        keyStoreFile.load(getClass().getClassLoader().getResourceAsStream(""/secret.asc""),
        ""******"".toCharArray());

        PrivateKey privateKey = (PrivateKey) keyStoreFile.getKey(
                ""My Name Here"", ""******"".toCharArray());

        Signature dsa = Signature.getInstance(""SHA1withRSA"");
        dsa.initSign(privateKey);
        dsa.update(file, 0, file.length);
        signature = dsa.sign();

    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    return signature;
}
</code></pre>

<p>But the <code>privateKey</code> initialization throws exception:</p>

<pre><code>java.security.InvalidKeyException: Key must not be null
</code></pre>

<p>I guess it's because of wrong instance format here:</p>

<pre><code>java.security.KeyStore keyStoreFile = java.security.KeyStore
            .getInstance(""PKCS12"");
</code></pre>

<p>I would like to know:</p>

<ol>
<li><p>How good is this approach at all?</p></li>
<li><p>What difference exists between different OpenPGP key formats and which will be the best to use at this case? How to know the format of existing OpenPGP file?</p></li>
</ol>
","<p>The Java crypto framework does not support OpenPGP. X.509 keys, for example in the PKCS12 format, are incompatible with OpenPGP -- although they rely on (mostly) the same cryptographic algorithms.</p>

<p>Either use X.509 certificates (you could also create your own CA for this purpose), or rely on an implementation of OpenPGP for Java. In terms of open source libraries, you can choose between the native Java implementation <a href=""https://www.bouncycastle.org/"" rel=""nofollow"">BouncyCastle</a> (MIT license), or interface <a href=""http://www.gnupg.org"" rel=""nofollow"">GnuPG</a> (GPL) through the <a href=""http://wiki.gnupg.org/APIs"" rel=""nofollow"">Java GPGME binding</a> (LGPL).</p>

<p>BouncyCastle is probably the better way to go, as all you need to do is add another Java library, not install another software into the system.</p>
","408","<java><encryption><rsa><public-key><openpgp>","3","1","1","2016-01-26 21:56:04","35023114","0","","4279419","","2016-01-26 21:56:04","2016-01-26 17:34:46",""
"52499457","Python code to recover private key from public key","<p>Helllo,</p>

<p>I would like to use <a href=""https://bitcoin.stackexchange.com/questions/65652/ecdsa-create-private-key-and-bitcoin-address?answertab=active#tab-top"">this code</a> to generate/recover my private key, I'm using Python 3.6 and installed ecdsa package but how should I edit the code with my public key?</p>

<p>I'm quite new to python, tried some things but I get the following errors..</p>

<p>NameError: name 'addr' is not defined</p>

<p>TypeError: 'NoneType' object is not iterable</p>

<p>IndentationError: unexpected indent          (&lt;-- I have many of this error)</p>

<p>Do I need anything else to download and install?</p>

<p>I'd appreciate for any kind of help!</p>
","<blockquote>
  <p><strong>how should I edit the code with my public key?</strong></p>
</blockquote>

<p>You can't.</p>

<p>Private keys cannot be generated from public keys. This is absolutely fundamental to public key cryptography.</p>

<blockquote>
  <p><strong>I get the following errors..</strong></p>
</blockquote>

<p>...</p>

<blockquote>
  <p><code>NameError: name 'addr' is not defined</code></p>
</blockquote>

<p>You must define or initialize <code>addr</code> <em>before</em> using it.</p>

<blockquote>
  <p><code>TypeError: 'NoneType' object is not iterable</code></p>
</blockquote>

<p>See <a href=""https://stackoverflow.com/q/3887381/477035"">TypeError: &#39;NoneType&#39; object is not iterable in Python</a></p>

<blockquote>
  <p><code>IndentationError: unexpected indent</code></p>
</blockquote>

<p>Python depends on <a href=""https://docs.python.org/2.0/ref/indentation.html"" rel=""nofollow noreferrer"">indentation</a> as part of its syntax, for example indentation is used to define blocks where other languages might use <code>{</code> and <code>}</code> or <code>begin</code> and <code>end</code>.</p>

<p>If you have too much or too little indentation it alters the meaning of the code and may not make any sense. You must pay careful attention to indentation when using Python.</p>

<p>In particular, I suspect that if you set tab-spacing to other than 8 and irregularly mix tabs with spaces in indentation, you will have problems.</p>
","404","<public-key><ecdsa>","0","1","1","2019-01-05 08:53:42","","0","","","","","2018-09-25 12:22:30",""
"39235014","How would you do public key encryption by hand?","<p>Can the public key encryption method be used if you were to encrypt and decrypt messages by hand using the pen and paper method? If so then how would you do it?</p>

<p>If it's possible, then can you provide a step-by-step example, perhaps by using keys that are only a few bits in length?</p>
","","404","<encryption><public-key-encryption><public-key>","0","","0","2016-08-30 20:18:40","","5","","6242026","","2016-08-30 20:18:40","2016-08-30 18:50:06",""
"41888762","openssl_get_publickey returns ""Resource id #2""","<p>I am doing the In-App Purchase verification server side for android. My PHP Version is 5.6.28, and my OpenSSL version is 1.0.2j .</p>

<p>I am having problems with getting the public key. The code below returns <code>Resource id #2</code>:</p>

<pre><code>$key = openssl_get_publickey( $publicKey );
</code></pre>

<p>My public key is created from :</p>

<pre><code>""-----BEGIN PUBLIC KEY-----\n"" . chunk_split($base64EncodedPublicKeyFromGoogle, 64, ""\n"") .  ""-----END PUBLIC KEY-----"";
</code></pre>

<p>where <code>base64EncodedPublicKeyFromGoogle</code> is the public key from google</p>

<p>I tried searching what ""Resource id #2"" means but cant find any.
Any one knows what this means and how to make <code>openssl_get_publickey</code> work?</p>
","","404","<php><in-app-purchase><verification><public-key><php-openssl>","1","","0","2017-01-27 10:01:18","","1","","608639","","2017-01-27 10:01:18","2017-01-27 07:20:59",""
"5517687","RSA trick in email reply","<p>A uses RSA encryption for her email. B ﬁnds an encrypted email to A: c = m^e mod n that he wants to know the plain text. B knows that when A replies to her email, <strong>she always includes the text of the message she is responding to in the reply</strong>.</p>

<p>Assume A only receives messages that are bit strings of length at most log n, which can be 
mapped to Zn.</p>

<p>Also assume that B cannot simply send c as his own email to A and expect a reply, but that A will respond to email messages other than c.</p>

<p>How can B learn m using only c, e, n and random values from Zn? </p>
","<p>From <a href=""http://en.wikipedia.org/wiki/RSA#Attacks_against_plain_RSA"" rel=""nofollow"">wikipedia</a>:</p>

<blockquote>
  <p>RSA has the property that the product
  of two ciphertexts is equal to the
  encryption of the product of the
  respective plaintexts. That is m1^e m2^e≡(m1m2)^e (mod n) Because
  of this multiplicative property a
  chosen-ciphertext attack is possible.
  E.g. an attacker, who wants to know
  the decryption of a ciphertext c = m^e
  (mod n) may ask the holder of the
  private key to decrypt an
  unsuspicious-looking ciphertext c' =
  cr^e (mod n) for some value r chosen by
  the attacker. Because of the
  multiplicative property c' is the
  encryption of mr (mod n). Hence, if
  the attacker is successful with the
  attack, he will learn mr (mod n) from
  which he can derive the message m by
  multiplying mr with the modular
  inverse of r modulo n.</p>
</blockquote>

<p>That's actually pretty neat, thanks for asking the question that lead me to learning this.<br>
As for your question of 3020 vs 600, it's multiplicative; rarely are concatenations used in mathematics, since after all we should always be working independent of base.</p>
","401","<encryption><rsa><public-key><public-key-encryption>","0","1","1","2011-04-01 20:13:12","5517933","1","","","","","2011-04-01 19:03:12",""
"49488317","keyStore rsa privateKeyEntry, public key and private key are equals","<p>I generated  and store RSA key into android keyStore ,
then I generated an AES  key and encrypt that with RSA public-key,  when i want to decrypt encrypted-AES-key i got this error :java.security.InvalidKeyException: Need RSA private or public key</p>

<pre><code>    KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry) keyStore.getEntry(KEY_ALIAS, null);
    Cipher output = Cipher.getInstance(RSA_MODE, ""AndroidOpenSSL"");
    output.init(Cipher.DECRYPT_MODE, privateKeyEntry.getPrivateKey());
</code></pre>

<p>after log privateKeyEntry.getCertificate().getPublicKey()
and privateKeyEntry.getPrivateKey()</p>

<p>I saw the keys mModulas are equals, anyone has any idea about that?</p>
","<p>You are using keys managed by ""AndroidKeyStore"" key. Try to remove ""AndroidOpenSSL"" here</p>

<pre><code> Cipher output = Cipher.getInstance(RSA_MODE, ""AndroidOpenSSL"");
</code></pre>

<blockquote>
  <p>after log <code>privateKeyEntry.getCertificate().getPublicKey()</code> and <code>privateKeyEntry.getPrivateKey()</code> I saw the keys mModulas are equals, anyone has any idea about that?</p>
</blockquote>

<p>The public modulus of the private key and the public key are the same. This is normal</p>
","400","<android><rsa><keystore><private-key><public-key>","2","3","1","2018-03-26 12:49:05","49491888","3","","4650625","","2018-03-26 09:53:27","2018-03-26 09:39:33",""
"37049509","AWS EC2 publickey all of sudden denied","<p>Hi my AWS EC2 public key has all of a sudden been denied.</p>

<p>I have checked the key against the instance and I am using the right one.</p>

<p>I have checked port 22 is accessible through my security group and that looks good to.</p>

<p>I have not made any changes in aws and my web server on the instance is working fine so I know the instance is available to connect to.</p>

<p>Is it possible that my key has been tampered with somehow.</p>

<p>This is the command that I am using to access my debian instance which has been 'sshing' fine up till now.</p>

<pre><code>ssh -o ""ServerAliveInterval 180"" -i key.pem admin@xx.xx.xx.xxx
</code></pre>

<p>many thanks Jose</p>

<h2>EDIT</h2>

<p>Here is the verbose output:</p>

<pre><code> $ ssh -v -o ""ServerAliveInterval 180"" -i /Users/Jose/Workspace/build/prod-key.pem admin@52.51.xx.14


OpenSSH_6.9p1, LibreSSL 2.1.8

debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 21: Applying options for *
debug1: Connecting to 52.51.xx.14 [52.51.xx.14] port 22.
debug1: Connection established.
debug1: key_load_public: No such file or directory
debug1: identity file /Users/Jose/Workspace/build/prod-key.pem type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/Jose/Workspace/build/prod-key.pem-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.9
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.0p1 Debian-4+deb7u4
debug1: match: OpenSSH_6.0p1 Debian-4+deb7u4 pat OpenSSH* compat 0x04000000
debug1: Authenticating to 52.51.xx.14:22 as 'admin'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr umac-64@openssh.com none
debug1: kex: client-&gt;server aes128-ctr umac-64@openssh.com none
debug1: sending SSH2_MSG_KEX_ECDH_INIT
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:ZKUAyMwCyvgy42SSYy8+hNsYKz13m0u0Uwp1RvXSAac
debug1: Host '52.51.xx.14' is known and matches the ECDSA host key.
debug1: Found key in /Users/Jose/.ssh/known_hosts:2
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/Jose/Workspace/build/prod-key.pem
debug1: Authentications that can continue: publickey
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>
","<blockquote>
  <p>Is it possible that my key has been tampered with somehow?</p>
</blockquote>

<p>Yes, it always possible and you can't rule it out, however is it likely to be the case, I would doubt it. (Of course it depends what are doing with your server).</p>

<p>Most of the time it will be some service or some configuration which has been change but not applied until later i.e. server restart or other automatic process restart.</p>

<p>Anyway <a href=""https://serverfault.com/questions/772187/all-of-a-sudden-cant-connect-to-aws-ec2-instance-server-unexpectedly-closed-ne/"">here</a> is very similar ticket to yours. Where I have provided how you can investigate very same issue.</p>

<p>Assuming that you don't have off site logging, any remote configuration management software (Puppet, Ansibel, Cheef et.c) or another user you can try to ssh as.</p>

<p>The only option to investigate this further in my opinion would be (Assuming that you don't want to shut down the server):</p>

<ol>
<li>Take snapshot of the root volume of your affected instance.</li>
<li>Create a volume out of the snapshot.</li>
<li>Mount the new volume on a good working instance.</li>
<li>Go to the mounted volume and investigate. </li>
</ol>
","396","<ssh><amazon-ec2><public-key>","3","3","1","2016-05-21 00:03:06","","4","","1026585","","2016-05-21 00:03:06","2016-05-05 11:32:17",""
"34228725","How to use RSA 2048 key for RC4 256?","<p>RSA is public-key cryptosystems 2048 key size but its for block system cipher using AES 256 block size, but to using Stream system cipher Like RC4 256 bit, Isn't bit strange what about first 256 bit of cipher stream?</p>
","<p><strong>Hyper-cipher</strong> (<em>Stream Ciphers and Block Ciphers</em>): it's Cipher Combine a stream cipher algorithms with block cipher algorithms, to create a <strong>Strong Cipher</strong> which is using in both Block cryptography and Stream cryptography. for more info  <a href=""http://www.hyperelliptic.org/tanja/teaching/crypto15/20151006-lecture.pdf"" rel=""nofollow"">Stream Ciphers and Block Ciphers - Hyperelliptic org</a>.</p>
","388","<aes><rsa><public-key><stream-cipher>","0","0","1","2015-12-12 00:47:25","","6","1","","","","2015-12-11 17:00:33",""
"44842400","Zevenet Load Balancer - SSL Certificate","<p>I am wondering if anyone has any experience with Zevenet Load Balancers.</p>

<p>I have setup the community version (V4). I have 2 web servers with replicated content, I have a virtual IP setup in the system which points to the 2 IP addresses of the web servers. The load balancer works for HTTP and HTTPS traffic correctly but shows an cert error when trying to get to the servers via HTTPS.</p>

<p>I want to combat this by adding a certificate to the load balancer. To do this I have followed the these steps:</p>

<p><a href=""https://www.zevenet.com/knowledge-base/howtos/manage-certificates-with-zen-load-balancer/"" rel=""nofollow noreferrer"">https://www.zevenet.com/knowledge-base/howtos/manage-certificates-with-zen-load-balancer/</a> (ignoring the bit about purchasing a cert from SofIntel as we use JISC for our Certs)</p>

<p>Basically I created a certificate in the load balancer, generated the CSR, purchased a certificate from JISC by uploading the CSR generated from the load balancer. </p>

<p>I then downloaded the ZIP file from JISC which contains the crt for the domain, as well as the root certificates required also in the ZIP.</p>

<p>I tried uploading the ZIP to the load balancer and it pops up an error showing that the certificate needs to be created in a PEM format.</p>

<p>I then found this here:</p>

<p><a href=""https://www.zevenet.com/knowledge-base/howtos/create-certificates-pem-format/"" rel=""nofollow noreferrer"">https://www.zevenet.com/knowledge-base/howtos/create-certificates-pem-format/</a></p>

<p>I am not really sure what this is asking me to do....does this mean the original CSR that I generated is irrelevant now? The instructions on the above link say that the PEM file needs to be the following:</p>

<pre><code>-----BEGIN RSA PRIVATE KEY----- Private Key (without passphrase) -----END RSA PRIVATE KEY----- 
-----BEGIN CERTIFICATE----- Certificate (CN=www.mydomain.com) -----END CERTIFICATE----- 
-----BEGIN CERTIFICATE----- Intermediate (Intermediate CA, if exists) -----END CERTIFICATE----- 
-----BEGIN CERTIFICATE----- Root (ROOT CA, who signs the Certificate) -----END CERTIFICATE-----
</code></pre>

<p>Essentially I already have the domain certificate, the intermediate and the root all from JISC now. But is there any way  can go about getting the Private key from the load balancer so that I can just create the PEM file manually.</p>

<p>I am pretty new to cert stuff, not sure why it wont just let me upload the zip file.</p>
","","387","<ssl><private-key><public-key><pem><csr>","0","","0","2017-06-30 10:41:42","","4","","472495","","2017-06-30 10:41:42","2017-06-30 08:51:14",""
"31974501","passwordless ssh from linux to Solaris works for oracle user but not for ftpuser","<p>The public key from the same linux box is set up for 2 users in Solaris, which are oracle and fptuser.  And the passwordless ssh works from the same linux box to Solaris for oracle user, but not the ftpuser. </p>

<p>When doing the 'ssh ftpuser@solaris_box' from the linux, it asks for the password.</p>

<p>I noticed that one difference between the oracle and ftpuser is the Solaris login shell in the /etc/passwd file.  The oracle has /bin/ksh and ftpuser has /bin/bash.  </p>

<p>Can this be the cause of the problem or are there other things that could be the problem? Thank you very much.</p>
","<p>Whether the user's shell is <code>ksh</code> or <code>bash</code> is certainly not the cause of this issue. The usual culprits are too relaxed permissions on either the home directory, the <code>.ssh</code> directory, or the files under the <code>.ssh</code> directories.  </p>
","384","<linux><ssh><passwords><solaris><public-key>","0","1","1","2015-08-12 23:55:58","31977331","0","","","","","2015-08-12 20:12:16","2015-08-13 08:38:44"
"53258888","Gerrit Permission denied (publickey)","<p>I have installed Gerrit (2.15.6) - at the moment with mariann as db backend - on a Ubuntu 16.04 instance in my local lan, and have configured it to use ldap (<a href=""https://directory.apache.org"" rel=""nofollow noreferrer"">ApacheDS</a>) for authentication. I can log into Gerrit with the credentials from ldap.</p>

<p>On my local development machine I have generated the ssh private &amp; public keys with:</p>

<p>ssh-keygen -b 4096</p>

<p>and I have uploaded the public key (copy/paste from 'cat id_rsa.pub') into my profile via the Gerrit web interface. </p>

<p>When I try to connect from the local development machine into Gerrit with</p>

<p>ssh -p 29418 @</p>

<p>I keep getting:</p>

<p>@:: Permission denied (publickey).</p>

<p>What am I doing wrong? What do I need to do to fix this?</p>

<p>Best regards, and thanks in advance,</p>

<p>Pierre</p>
","","382","<ssh><gerrit><public-key>","0","","0","2018-11-12 09:08:21","","1","","","","","2018-11-12 09:08:21",""
"46220932","Unable to create public key object from xml in java","<p>I am having trouble converting my public key from an xml file in java. After some research, it appears as though X509 encoding is the most popular format to use. </p>

<p>I have a xml file that looks something like this:</p>

<pre><code>&lt;RSAKeyValue&gt;
&lt;Modulus&gt;hkjhvgkjewrlhfelwrkjvhwerkjlrkwjvbrvkjrbvkwjlvbwekvjbekvbwkbrkvbwrwebrvvbrlkvbklvrbkvlreb&lt;/Modulus&gt;
&lt;Exponent&gt;AQAB&lt;/Exponent&gt;
&lt;/RSAKeyValue&gt;
</code></pre>

<p>(this is not my actual key value)</p>

<p>Here is a code sample of what I tried:</p>

<pre><code> File fXmlFile = new File("".....\\...\\...\\file.xml""); //Path to xml file
 DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
 DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
 Document doc = dBuilder.parse(fXmlFile);
 doc.getDocumentElement().normalize();

 NodeList nList = doc.getElementsByTagName(""Modulus"");
 Node n = nList.item(0);

 byte[] encKey = Base64.getEncoder().encode(n.getTextContent().getBytes());

 X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(encKey);
 KeyFactory keyFactory = KeyFactory.getInstance(""DSA"", ""SUN"");
 PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);
</code></pre>

<p>At the last line I get an exception that looks like this:</p>

<pre><code>java.security.spec.InvalidKeySpecException: Inappropriate key specification: invalid key format
at sun.security.provider.DSAKeyFactory.engineGeneratePublic(DSAKeyFactory.java:119)
at java.security.KeyFactory.generatePublic(KeyFactory.java:328)
at XmlReader.main(XmlReader.java:41)
</code></pre>

<p>I'm not to sure what the issue is with the key format. Could it be an issue with the input being converted into a string that is causing it to lose some important data for the key?</p>
","<p>You are building a RSA key with a DSA <code>KeyFactory</code>, and using <code>X509EncodedKeySpec</code> while you have modulus and exponent encoded in base64</p>

<p>Try this:</p>

<pre><code>BigInteger modulus = new BigInteger(Base64.getDecoder().decode(modulusAsString));
BigInteger exponent =  new BigInteger(Base64.getDecoder().decode(exponentAsString));

RSAPublicKeySpec keySpec = new RSAPublicKeySpec(modulus, exponent);
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
PublicKey pubKey =keyFactory.generatePublic(keySpec);
</code></pre>

<p>I omit the XML part</p>
","382","<java><xml><security><digital-signature><public-key>","0","1","1","2017-09-14 14:04:44","46221242","0","","","","","2017-09-14 13:48:44",""
"29778321","unable to get local issuer certificate..installing RVM on a mac","<p>I'm trying to install RVM to set up my ruby on rails installation. I'm following this guide <a href=""http://railsapps.github.io/installrubyonrails-mac.html"" rel=""nofollow"">http://railsapps.github.io/installrubyonrails-mac.html</a>. I'm at the stage where I have to install RVM. From the RVM install page I executed the following command 
    gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</p>

<p>And received the following...</p>

<pre><code> gpg: DBG: armor-keys-failed (KEY      0x409B6B1796C275462A1703113804BB82D39DC0E3 BEGIN
</code></pre>

<p>) ->0
gpg: DBG: armor-keys-failed (KEY 0x409B6B1796C275462A1703113804BB82D39DC0E3 END
) ->0
gpg: key D39DC0E3: public key ""Michal Papis (RVM signing) "" imported
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
gpg: next trustdb check due at 2018-08-19
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)</p>

<p>When I then try to execute the next command
    \curl -sSL <a href=""https://get.rvm.io"" rel=""nofollow"">https://get.rvm.io</a> | bash -s stable --ruby</p>

<p>I get back the message
    curl: (60) SSL certificate problem: unable to get local issuer certificate
More details here: <a href=""http://curl.haxx.se/docs/sslcerts.html"" rel=""nofollow"">http://curl.haxx.se/docs/sslcerts.html</a></p>

<p>Not familiar with the gap tools and I'm wondering did I receive the public key and if so where would it be....and why can't I download from the server.</p>
","","378","<ruby-on-rails><authentication><rvm><public-key-encryption><public-key>","2","","0","2015-04-21 16:41:56","","0","","","","","2015-04-21 16:41:56",""
"34164496","SFTP ignores public key","<p>I have a server setup to only allow private/public keys, except for an SFTP group:</p>

<pre><code>Match Group sftp
    PasswordAuthentication yes
    ForceCommand internal-sftp
    ChrootDirectory %h
</code></pre>

<p>That works fine, however, I have a user that wants to use SFTP with public key. I have that user set up and SSH works perfectly fine, however, when I add the user to the ""sftp"" group, authentication stops. I do not want this user to be able to SSH in and I want to Chroot them to their home directory.</p>

<p>I checked that root owns the home directory and that it's not writeable by other groups. The following debugging info isn't leading me anywhere useful either:</p>

<pre><code>sftp -vv -i ~/.ssh/id_rsa testuser@serveraddress
</code></pre>

<p>Gives the following:</p>

<pre><code>...
debug1: Authentications that can continue: publickey,password
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/myuser/.ssh/id_rsa
debug2: we sent a publickey packet, wait for reply
debug1: Authentications that can continue: publickey,password
debug2: we did not send a packet, disable method
debug1: Next authentication method: password
tester@serveraddress's password:
</code></pre>

<p>Any ideas why it seems to be just completely ignoring the key? Again, if I remove the user from the ""sftp"" group, logging in with key works fine.</p>
","","376","<ssh><public-key><openssh>","0","","0","2015-12-08 19:35:43","","4","","","","","2015-12-08 19:35:43",""
"16812926","Cannot deploy an app with git to EC2","<p>I have set up amazon EC2 instance (working) and Github repo (working well).
When I try to deploy the app to EC2 with using Github repo, I get this error:</p>

<pre><code> ** [IP] Permission denied (publickey).
 ** [IP] fatal: Could not read from remote repository.
 **
 ** Please make sure you have the correct access rights
 ** and the repository exists.
</code></pre>

<p>What am I missing? I can deploy an app to EC with using <strong>copy</strong>, but not with using github.</p>

<p>What do I need to set up the publickey?</p>

<p><strong>EDIT: SETUP</strong></p>

<pre><code>set :application, ""project_name""
set :user, 'username'
set :password, ""password""

set :domain, ""IP.amazonaws.com""
set :deploy_to, ""/path_to_directory""
set :use_sudo, false

role :web, domain
role :app, domain
role :db,  domain, :primary =&gt; true 

set :assets_role, [:app]

default_run_options[:pty] = true
set :repository, ""git@github.com:user/repo.git""
set :scm, ""git""
</code></pre>

<p>Thank you</p>
","<p>You haven't set up your SSH keys between EC2 and Github correctly based on the error message, but given the information you've provided, it's not possible to provide suggestions.  </p>

<p>Question - have you set up a deploy key on the EC2 server?  I'm assuming that you are trying to deploy from the EC2 server and not your local machine using SSH Agent Forwarding.  Can you do a git pull from the EC2 server to the github account?  Can you ssh to git@github.com (e.g. ""ssh -T git@github.com"")?  </p>

<p>The links below can help you setup a deploy key or figure out another way to manage deployment.  </p>

<p><a href=""https://help.github.com/articles/deploying-with-capistrano"" rel=""nofollow"">https://help.github.com/articles/deploying-with-capistrano</a></p>

<p><a href=""https://help.github.com/articles/managing-deploy-keys"" rel=""nofollow"">https://help.github.com/articles/managing-deploy-keys</a></p>
","375","<ruby-on-rails><ssh><amazon-ec2><capistrano><public-key>","0","0","2","2014-02-22 20:04:00","","0","1","984621","","2013-05-29 15:27:35","2013-05-29 11:41:26",""
"16812926","Cannot deploy an app with git to EC2","<p>I have set up amazon EC2 instance (working) and Github repo (working well).
When I try to deploy the app to EC2 with using Github repo, I get this error:</p>

<pre><code> ** [IP] Permission denied (publickey).
 ** [IP] fatal: Could not read from remote repository.
 **
 ** Please make sure you have the correct access rights
 ** and the repository exists.
</code></pre>

<p>What am I missing? I can deploy an app to EC with using <strong>copy</strong>, but not with using github.</p>

<p>What do I need to set up the publickey?</p>

<p><strong>EDIT: SETUP</strong></p>

<pre><code>set :application, ""project_name""
set :user, 'username'
set :password, ""password""

set :domain, ""IP.amazonaws.com""
set :deploy_to, ""/path_to_directory""
set :use_sudo, false

role :web, domain
role :app, domain
role :db,  domain, :primary =&gt; true 

set :assets_role, [:app]

default_run_options[:pty] = true
set :repository, ""git@github.com:user/repo.git""
set :scm, ""git""
</code></pre>

<p>Thank you</p>
","<p>One of the best ways to debug access privileges when beginning to use Capistrano is to try accessing your server without it. </p>
","375","<ruby-on-rails><ssh><amazon-ec2><capistrano><public-key>","0","0","2","2014-02-22 20:04:00","","0","1","984621","","2013-05-29 15:27:35","2013-05-29 11:41:26",""
"30930345","Decoding an RSA PublicKey in C++/Qt","<p>I had to port a Java app to C++/Qt, but I have a problem about the RSA encryption.</p>

<p>Basically my app ask the server for a key and the the server return it like this :</p>

<pre><code>30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03
81 8d 00 30 81 89 02 81 81 00 b4 74 05 71 53 79 39 16 29 
fc 17 d3 dd 27 c0 84 72 1e 4a 66 b8 43 e8 57 58 f6 13 65
3c a6 85 ff e1 c3 b3 76 11 3e 10 33 00 7d a4 ab 94 d3 86 
a2 99 71 d6 c9 99 a6 54 ec 3c 32 de 25 60 61 c3 84 6d 00 
32 6a 4e 7c f7 25 38 3c 12 f7 f7 c0 08 e0 8a ca 6f dc 1d 
3c 37 bc e9 77 70 11 e7 9e 67 f0 96 d6 df a1 37 d2 8e 83
1c 75 cf 86 ff 39 bb 53 a6 63 f7 ce 99 eb b3 f2 20 39 37
52 41 31 6e 9f 02 03 01 00 01
</code></pre>

<p>After that, all i have to do is to encrypt the credentials and sending them to the server. But I can't find any way to use that key.</p>

<p>The Java version look like this</p>

<pre><code>byte[] key;
// Get the key from the server
// ...
//
KeyFactory kf;      
EncodedKeySpec eks = new X509EncodedKeySpec(key);
PublicKey localPublicKey = kf.generatePublic(eks);
</code></pre>

<p>I've looked both OpenSSL and QSsl libs but I didn't found anything like this.</p>

<p>If anyone had any ideas ...</p>
","","373","<c++><qt><encryption><rsa><public-key>","0","","0","2015-06-19 05:10:38","","5","","","","","2015-06-19 05:10:38",""
"26423201","Get Modulus and Exponent from Public Key iOS","<p>I am looking to get the Modulus and Exponent from a public key in iOS. I have looked at many different sites and looked at Apple, but cannot just get it working.</p>

<p>This is my code so far:</p>

<pre><code>- (void)generateKeyPairPlease
{
OSStatus status = noErr;
NSMutableDictionary *privateKeyAttr = [[NSMutableDictionary alloc] init];
NSMutableDictionary *publicKeyAttr = [[NSMutableDictionary alloc] init];
NSMutableDictionary *keyPairAttr = [[NSMutableDictionary alloc] init];

NSData * publicTag = [NSData dataWithBytes:publicKeyIdentifier
                                    length:strlen((const char *)publicKeyIdentifier)];
NSData * privateTag = [NSData dataWithBytes:privateKeyIdentifier
                                     length:strlen((const char *)privateKeyIdentifier)];



SecKeyRef publicKey = NULL;
SecKeyRef privateKey = NULL;

[keyPairAttr setObject:(__bridge id)kSecAttrKeyTypeRSA
                forKey:(__bridge id)kSecAttrKeyType];
[keyPairAttr setObject:[NSNumber numberWithInt:2048]
                forKey:(__bridge id)kSecAttrKeySizeInBits];

[privateKeyAttr setObject:[NSNumber numberWithBool:YES]
                   forKey:(__bridge id)kSecAttrIsPermanent];
[privateKeyAttr setObject:privateTag
                   forKey:(__bridge id)kSecAttrApplicationTag];

[publicKeyAttr setObject:[NSNumber numberWithBool:YES]
                  forKey:(__bridge id)kSecAttrIsPermanent];
[publicKeyAttr setObject:publicTag
                  forKey:(__bridge id)kSecAttrApplicationTag];

[keyPairAttr setObject:privateKeyAttr
                forKey:(__bridge id)kSecPrivateKeyAttrs];
[keyPairAttr setObject:publicKeyAttr
                forKey:(__bridge id)kSecPublicKeyAttrs];

status = SecKeyGeneratePair((__bridge CFDictionaryRef)keyPairAttr,
                            &amp;publicKey, &amp;privateKey);
//    error handling...

NSData *ppp = [NSData dataWithBytes:publicKey length:strlen((const char *)publicKey)];

NSString *responseString, *responseStringASCII, *responseStringUTF8;

responseStringASCII = [[NSString alloc] initWithData:ppp encoding:NSASCIIStringEncoding];
if (!responseStringASCII)
{

    responseString = [[NSString alloc] initWithData:ppp encoding:NSUTF8StringEncoding];
}
else
{

    responseStringUTF8  = [[NSString alloc] initWithData:ppp encoding:NSUTF8StringEncoding];

    if(responseStringUTF8 != nil &amp;&amp; [responseStringUTF8 length] &lt; [responseStringASCII length])
    {
        responseString  =   [responseStringUTF8 retain];
    }
    else
    {
        responseString  =   [responseStringASCII retain];
    }

    [responseStringUTF8 release];
}

publicKeyString = responseString;

if(publicKey) CFRelease(publicKey);
if(privateKey) CFRelease(privateKey);

NSData *exp = [self getPublicKeyExp];
NSData *mod = [self getPublicKeyMod];

NSString *expString = [[NSString alloc] initWithData:exp encoding:NSUTF8StringEncoding];
NSString *modString = [[NSString alloc] initWithData:mod encoding:NSUTF8StringEncoding];

NSLog(@""exponent = %@ \n modulus = %@"", expString, modString);
}

- (NSData *)getPublicKeyBits: (NSString*) publicKeyIdentifier {

OSStatus sanityCheck = noErr;
NSData * publicKeyBits = nil;
CFTypeRef pk = NULL;
NSMutableDictionary * queryPublicKey = [[NSMutableDictionary alloc] init];

NSData* publicTag = [publicKeyIdentifier dataUsingEncoding:NSUTF8StringEncoding];

// Set the public key query dictionary.
[queryPublicKey setObject:(__bridge_transfer id)kSecClassKey forKey:(__bridge_transfer id)kSecClass];

[queryPublicKey setObject:publicTag forKey:(__bridge_transfer id)kSecAttrApplicationTag];
[queryPublicKey setObject:(__bridge_transfer id)kSecAttrKeyTypeRSA forKey:(__bridge_transfer id)kSecAttrKeyType];
[queryPublicKey setObject:[NSNumber numberWithBool:YES] forKey:(__bridge_transfer id)kSecReturnData];

// Get the key bits.
sanityCheck = SecItemCopyMatching((__bridge CFDictionaryRef)queryPublicKey, &amp;pk);
if (sanityCheck != noErr)
{
    publicKeyBits = nil;
}
publicKeyBits = (__bridge id)pk;
NSLog(@""public bits %@"",publicKeyBits);

return publicKeyBits;
}

- (NSData *)getPublicKeyExp
{
NSData* pk = [self getPublicKeyBits:publicKeyString];
if (pk == NULL) {
    return NULL;
}

int iterator = 0;

iterator++; // TYPE - bit stream - mod + exp
[self derEncodingGetSizeFrom:pk at:&amp;iterator]; // Total size

iterator++; // TYPE - bit stream mod
int mod_size = [self derEncodingGetSizeFrom:pk at:&amp;iterator];
iterator += mod_size;

iterator++; // TYPE - bit stream exp
int exp_size = [self derEncodingGetSizeFrom:pk at:&amp;iterator];

return [pk subdataWithRange:NSMakeRange(iterator, exp_size)];
return pk;
}

- (NSData *)getPublicKeyMod
{
NSData* pk = [self getPublicKeyBits:publicKeyString];
if (pk == NULL) {
  return NULL;
}

int iterator = 0;

iterator++; // TYPE - bit stream - mod + exp
[self derEncodingGetSizeFrom:pk at:&amp;iterator]; // Total size

iterator++; // TYPE - bit stream mod
int mod_size = [self derEncodingGetSizeFrom:pk at:&amp;iterator];

return [pk subdataWithRange:NSMakeRange(iterator, mod_size)];
}

- (int)derEncodingGetSizeFrom:(NSData*)buf at:(int*)iterator
{
const uint8_t* data = [buf bytes];
int itr = *iterator;
int num_bytes = 1;
int ret = 0;

if (data[itr] &gt; 0x80) {
    num_bytes = data[itr] - 0x80;
    itr++;
}

for (int i = 0 ; i &lt; num_bytes; i++) ret = (ret * 0x100) + data[itr + i];

*iterator = itr + num_bytes;
return ret;
}
</code></pre>

<p>However, when I get to retrieving the Modulus and Exponent from the relevant methods, they keep returning NULL?</p>
","","372","<ios><encryption><public-key><exponent>","1","","0","2014-10-17 11:30:33","","0","","2156612","","2014-10-17 11:30:33","2014-10-17 10:37:03",""
"52085492","ssh public key fingerprint does not match. Man-in-the-middle attack?","<p>I have a cloud server of IP address <code>39.106.xx.xxx</code> hosted on Aliyun. I generated a RSA 2048 ssh keypair (<code>~/.ssh/rsa_bj.pub</code> and <code>~/.ssh/rsa_bj</code>) on my local laptop using <code>ssh-keygen</code>, and imported the public key file to the server through console webpage of Aliyun. </p>

<p>When I <code>ssh</code> connect to the server, it shows the fingerprint of my public key, beginning with <code>Meg4xe</code>. But this fingerprint does not match my local fingerprint, which I got by <code>ssh-keygen -l -f ~/.ssh/rsa_bj.pub</code>, beginning with <code>qEqyMv</code>.</p>

<p>Does this mean that I ran into a man-in-the-middle attack? Or does it mean that the two fingerprints were calculated using different rehash algorithms on the same public key?</p>

<p><a href=""https://i.stack.imgur.com/ffy45.png"" rel=""nofollow noreferrer"">my ssh config file</a>
<a href=""https://i.stack.imgur.com/OoCZv.png"" rel=""nofollow noreferrer"">my commands</a></p>
","","372","<ssh><public-key-encryption><fingerprint><public-key><man-in-the-middle>","0","","0","2018-08-29 20:19:12","","3","","","","","2018-08-29 20:19:12",""
"29790375","KeyPairGenerator : generated public key parameters","<p>I generated a public key and I printed the parameters, p,q,g and y of the public key. I executed the program a few times and realized that only the y value changes but not the values for p,q,g.
Why is it so?</p>

<pre><code>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom; 
import java.security.Signature;

public class Key {
    public static void main (String args[]) {
        try {
            KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DSA"",""SUN"");
            SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"",""SUN"");
            keyGen.initialize(1024, random);

            KeyPair pair = keyGen.generateKeyPair();
            PublicKey pubKey = pair.getPublic();
            PrivateKey privKey = pair.getPrivate();
            System.out.println(""Public Key: "" + pubKey);

        } catch (Exception e) {

        }
    }
}
</code></pre>

<p>Output </p>

<pre><code>Public Key: Sun DSA Public Key
Parameters:
p:
  fd7f5381 1d751229 52df4a9c 2eece4e7 f611b752 3cef4400 c31e3f80 b6512669
  455d4022 51fb593d 8d58fabf c5f5ba30 f6cb9b55 6cd7813b 801d346f f26660b7
  6b9950a5 a49f9fe8 047b1022 c24fbba9 d7feb7c6 1bf83b57 e7c6a8a6 150f04fb
  83f6d3c5 1ec30235 54135a16 9132f675 f3ae2b61 d72aeff2 2203199d d14801c7
q:
  9760508f 15230bcc b292b982 a2eb840b f0581cf5
g:
  f7e1a085 d69b3dde cbbcab5c 36b857b9 7994afbb fa3aea82 f9574c0b 3d078267
  5159578e bad4594f e6710710 8180b449 167123e8 4c281613 b7cf0932 8cc8a6e1
  3c167a8b 547c8d28 e0a3ae1e 2bb3a675 916ea37f 0bfa2135 62f1fb62 7a01243b
  cca4f1be a8519089 a883dfe1 5ae59f06 928b665e 807b5525 64014c3b fecf492a
y:
  ddd3c52e 670efbe0 6755e3cd 13b28019 06565e33 fcab6d9a b2ab548c e361f971
  2a771a8b 0bd7d58e 7c09d310 d8004d2a de8833fd b1a60d59 4441d60d 3d051ceb
  0f9d3a08 ba71b804 4a42a901 98acedf7 10feba49 f2bb5274 934b63c1 1561bd81
  1f3bd998 d6475a72 2df9c963 7bcdc53c 86078a8a fa74c903 4d184bc9 20c67aaa
</code></pre>
","<p>As the <a href=""https://en.wikipedia.org/wiki/Digital_Signature_Algorithm"" rel=""nofollow"">Wikipedia Article on DSA states</a>:</p>

<blockquote>
  <p>The algorithm parameters (p, q, g) may be shared between different users of the system.</p>
</blockquote>

<p>I checked and I get the exact same p, q and g on my system as well.</p>

<p>Also the <a href=""http://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html"" rel=""nofollow"">Oracle docs</a> state the parameters as well.</p>
","366","<public-key>","1","1","1","2015-04-22 07:44:45","29790761","0","","","","","2015-04-22 07:18:03",""
"51861056","Javascript - Java ECDH","<p>In my scenario there are Alice and Bob who have agreed on which curve to use. </p>

<ul>
<li>Alice generates the public key and the private key </li>
<li>Alice sends the public key to Bob </li>
<li>Bob generates his keys and generates the session key ( or secret key, or shared key ) based on the Alice public key he received.</li>
</ul>

<p>My problem is that Alice's public key is actually a point, so it has the xy format.</p>

<p>I need to convert the x,y coordinates bytes into a ECPublicKey.</p>

<p>This is the source code I'm using        </p>

<pre><code>    // outerPublicKey is the raw bytes from x,y coordinates in hex format
    KeyFactory kf = KeyFactory.getInstance(""EC"");

    PublicKey remoteAlicePub = kf.generatePublic(new X509EncodedKeySpec(outerPublicKey));

    KeyPairGenerator bobKeyGen = KeyPairGenerator.getInstance(""ECDH"", ""BC"");
    bobKeyGen.initialize(new ECGenParameterSpec(properties.getCurveName()), new SecureRandom());

    KeyPair bobPair = bobKeyGen.generateKeyPair();
    ECPublicKey bobPub = (ECPublicKey)bobPair.getPublic();
    ECPrivateKey bobPvt = (ECPrivateKey)bobPair.getPrivate();

    byte[] bobPubEncoded = bobPub.getEncoded();
    byte[] bobPvtEncoded = bobPvt.getEncoded();

    KeyAgreement bobKeyAgree = KeyAgreement.getInstance(""ECDH"");
    bobKeyAgree.init(bobPvt);
    bobKeyAgree.doPhase(remoteAlicePub, true);

    return DatatypeConverter.printHexBinary(bobKeyAgree.generateSecret());
</code></pre>

<p>the problem is:</p>

<pre><code>    new X509EncodedKeySpec(outerPublicKey);
</code></pre>

<p>How can I create a public key from the xy coordinates of the point?
because <code>outerPublicKey</code> is a raw byte array of x,y coordinates, what kind of format should i use?</p>
","<p>I solved in this way ( Java Server Side )</p>

<pre><code>// arrive a string like this 04456cb4ba8ee9263311485baa8562c27991f7ff22d59f3d8245b9a05661d159911b632a6f8a7a080d82f4ca77e4d12bb201b89c8ec93f61d5b4dd22df42e1b482
Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();
    try {

        // set provider
        Security.addProvider(new BouncyCastleProvider());

        // transform from hex to ECPublicKey
        byte[] ecRawExternalPublicKey = this.toByte(externalRawPublicKey);
        ECPublicKey ecExternalPublicKey = null;
        KeyFactory externalKeyFactor = null;

        ECNamedCurveParameterSpec ecExternalNamedCurveParameterSpec = ECNamedCurveTable.getParameterSpec(""secp256r1"");
        ECCurve curve = ecExternalNamedCurveParameterSpec.getCurve();
        EllipticCurve ellipticCurve = EC5Util.convertCurve(curve, ecExternalNamedCurveParameterSpec.getSeed());
        java.security.spec.ECPoint ecPoint = ECPointUtil.decodePoint(ellipticCurve, ecRawExternalPublicKey);
        java.security.spec.ECParameterSpec ecParameterSpec = EC5Util.convertSpec(ellipticCurve, ecExternalNamedCurveParameterSpec);
        java.security.spec.ECPublicKeySpec externalPublicKeySpec = new java.security.spec.ECPublicKeySpec(ecPoint, ecParameterSpec);

        externalKeyFactor = java.security.KeyFactory.getInstance(""EC"");
        // this is externalPubicKey
        ecExternalPublicKey = (ECPublicKey) externalKeyFactor.generatePublic(externalPublicKeySpec);

        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""ECDH"", ""BC"");
        keyGen.initialize(new ECGenParameterSpec(""secp256r1""), new SecureRandom());

        KeyPair pair = keyGen.generateKeyPair();
        ECPublicKey pub = (ECPublicKey)pair.getPublic();
        ECPrivateKey pvt = (ECPrivateKey)pair.getPrivate();

        byte[] pubEncoded = pub.getEncoded();
        byte[] pvtEncoded = pvt.getEncoded();

        KeyAgreement keyAgree = KeyAgreement.getInstance(""ECDH"");
        keyAgree.init(pvt);
        keyAgree.doPhase(ecExternalPublicKey, true);

        System.out.println(""sharedKey: ""+ this.bytesToHex( keyAgree.generateSecret() ));

        // internal public key
        return ""04""+ pub.getW().getAffineX().toString(16) + pub.getW().getAffineY().toString(16)

    }
    catch (Exception e ){
        e.printStackTrace();
        return null;
    }
</code></pre>

<p>Javascript ( Client Side )</p>

<pre><code>ecdhHandShake() {
    let _this = this;

    this.keyGeneration()
    .then( k =&gt; {
        ajax({
            url: ""http://localhost:5050/test/ecdh/handshake"",
            headers: {
                ""Content-Type"": ""application/json""
            },
            body: {
                publickey: this.buf2Hex(this.publicKey)
            },
            method: 'POST',
            crossDomain: true,
            responseType: 'json'
        })
        .subscribe(
            payload =&gt; {
                const publicKey = _this.hex2Arr(payload.response.publicKey);
                _this.serverPublicKey = _this.hex2Arr(payload.response.publicKey);

                _this.importServerKey()
                .then(sharedSecret =&gt; {
                    const sharedSecretHex = this.buf2Hex(sharedSecret);
                    console.log(""shared key: ""+ sharedSecretHex);
                })
                .catch( e =&gt; {
                    console.log(e);
                })
            },
            error =&gt; {
                console.log(error);
            },
            () =&gt; console.log('done')
        )
        ;
    })
    .catch( e =&gt; {
        console.log(e);
    })
    ;
}


keyGeneration() {       

    let _this = this;
    return window.crypto.subtle.generateKey(
        {
            name: ""ECDH"",
            namedCurve: ""P-256"", // the curve name
        },
        true, // &lt;== Here if you want it to be exportable !!
        [""deriveKey"", ""deriveBits""] // usage
    )
    .then(key =&gt; {
        _this.keys = key;
        return window.crypto.subtle.exportKey(
            ""raw"", //can be ""jwk"" (public or private), ""raw"" (public only), ""spki"" (public only), or ""pkcs8"" (private only)
            _this.keys.publicKey
        )
        .then(rawPublicKey =&gt; {
            _this.publicKey = rawPublicKey;
            return rawPublicKey;
        })
        .catch(function(err){
            console.error(err);
        })
        ;
    })
    .catch(function(err){
        console.error(err);
    })
    ;

}

importServerKey() {

    return window.crypto.subtle.importKey(
        'raw',
        this.serverPublicKey,
        {
            name: 'ECDH',
            namedCurve: 'P-256'
        },
        true,
        []
    )
    .then(aliceKeyImported =&gt; {
        return window.crypto.subtle.deriveBits(
            {
                name: 'ECDH',
                namedCurve: 'P-256',
                public: aliceKeyImported
            },
            this.keys.privateKey,
            256)
    })
    .catch( e =&gt; {
        console.log(e);
    })
}


hex2Arr( str ) {
    if (!str) {
        return new Uint8Array();
    }
    const arr = [];
    for (let i = 0, len = str.length; i &lt; len; i+=2) {
        arr.push(parseInt(str.substr(i, 2), 16));
    }
    return new Uint8Array(arr);
}

buf2Hex( buf ) {
    return Array.from(new Uint8Array(buf))
        .map(x =&gt; ('00' + x.toString(16)).slice(-2))
        .join('')
}
</code></pre>
","359","<java><bouncycastle><public-key><secret-key><ecdh>","1","0","1","2019-08-15 21:40:08","57516532","4","","8954551","","2019-08-15 21:35:57","2018-08-15 14:49:22",""
"38672035","decode system.gserviceaccount.com certificate to extract public key","<p>For jwt token signature verification of firebase generated token the firebase documentations asks to use the following link:</p>

<p><a href=""https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com"" rel=""nofollow"">https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com</a></p>

<p>the above link gives me a Json which is not a plain text, How can I decode and extract public key from it?</p>

<p>any suggestion for a web decoder?</p>
","<p>In Python with cryptography module for each certificate you can do:</p>

<pre><code>from cryptography.x509 import load_pem_x509_certificate
from cryptography.hazmat.backends import default_backend
cert = ""CERTIFICATEnnnnnnnnnnENDCERT""
key = load_pem_x509_certificate(cert, default_backend())
key.public_key()
</code></pre>

<p>It's even easier with node.js if that's what you mean by web decoder.</p>

<p>You didn't specify the language nor the output format you want.</p>
","358","<firebase><certificate><jwt><firebase-authentication><public-key>","1","0","1","2016-09-04 14:23:02","","0","1","209103","","2016-07-30 15:23:45","2016-07-30 08:43:06",""
"55265432","Verify signature with public key only (C#)","<p>I have two applications. One that signs a file and the other that verifies.</p>

<p>The signing application does the following:</p>

<pre><code>X509Certificate2 certificate = new X509Certificate2(PROJECT_DIR_PATH + ""cert.pfx"", ""password"");

using (RSA rsa = certificate.GetRSAPrivateKey())
{
    signature = rsa.SignData(exeContent, HashAlgorithmName.SHA1, RSASignaturePadding.Pkcs1);
}
</code></pre>

<p>cert.pfx is a self-signed certificate, generated with Openssl.</p>

<p>The verifying application:</p>

<pre><code>X509Certificate2 certificate = new X509Certificate2(PROJECT_DIR_PATH + ""cert.pfx"", ""password"");

using (RSA rsa = certificate.GetRSAPublicKey())
{
    return rsa.VerifyData(exeContentWithoutSignature, signature, HashAlgorithmName.SHA1, RSASignaturePadding.Pkcs1);
}
</code></pre>

<p>As I understand the .pfx file contains public and private key information, thus I should not make it available to anyone. As I know, only the public key is needed for the verification step. 
How can I use rsa.VerifyData or other functions to verify the signature without exposing my pfx file?</p>
","<p>I already had .pfx file that can be generated this way:</p>

<pre><code>openssl req -x509 -days 365 -newkey rsa:2048 -keyout test-key.pem -out test-cert.pem
openssl pkcs12 -export -in test-cert.pem -inkey test-key.pem -out test-cert.pfx
</code></pre>

<p>In order to extract a certificate containing only public key following command can be used:</p>

<pre><code>openssl pkcs12 -in test-cert.pfx -clcerts -nokeys -out cert.pem
</code></pre>

<p>-clcerts - Only output client certificates.<br>
-nokeys - Don't output private keys.<br><br>
Cert.pem can be used to create an instance of X509Certificate2:</p>

<pre><code>X509Certificate2 certificate = new X509Certificate2(PROJECT_DIR_PATH + ""test-cert.pem"");

using (RSA rsa = certificate.GetRSAPublicKey())
{
    return rsa.VerifyData(exeContentWithoutSignature, signature, HashAlgorithmName.SHA1, RSASignaturePadding.Pkcs1);
}
</code></pre>
","357","<c#><ssl><rsa><digital-signature><public-key>","1","1","1","2019-08-26 10:26:12","55278129","3","","5619109","","2019-08-26 10:26:12","2019-03-20 16:13:39",""
"17648637","Identity Certificates","<p>How can we identify if a certificate is 'Identity' Certificate.</p>

<p>I googled and found that PublicKey certificate are known as 'Identity Certificates'.</p>

<p>So .crt or .cer are Identity certificates </p>

<p>But at some places I see that .p12 are also referred to be Identity cert,</p>

<p>Can someone help me understand what is Identity certificate exactly.</p>
","<p>see this for more information</p>

<p><a href=""http://developer.apple.com/library/mac/#documentation/Security/Conceptual/CertKeyTrustProgGuide/iPhone_Tasks/iPhone_Tasks.html"" rel=""nofollow"">Certificate, Key, and Trust Services Tasks for iOS</a> on developer.apple.com</p>
","341","<ios><certificate><public-key><crt><pkcs#12>","0","0","1","2013-07-15 07:20:47","","1","","","","","2013-07-15 07:14:58",""
"28641765","What is the structure of the public key of a signed assembly in C#?","<p>Using this code to retrieve the public key bytes...</p>

<pre><code>var pubKey = 
    AppDomain.CurrentDomain.DomainManager.EntryAssembly
        .GetName().GetPublicKey();
</code></pre>

<p>What is this common structure at the start (first 32 bytes) of the key?
It's not ASN.1 and it might not be variable. I can google it and get repeats.</p>

<pre><code>// 00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31
</code></pre>

<p>Is it all reversed or just part of it (e.g. the modulus at the end)? <code>52 53 41 31</code> is a string of <code>RSA1</code>. 
My key's modulus is 1024 bit, so I was looking for something that described the length.
<code>0x0400</code> (<code>00 04</code> B.E.) would be 1024 (bits), <code>0x80</code> would be 128 (bytes, 1024/8).</p>

<pre><code>// 00 04 00 00 01 00 01 00
</code></pre>

<p>Are these last 4 to 6 the public exponent? Big or little endian? Is the last null a terminator or spacer?</p>

<p>Investigations into implementations (.NET and Mono) of <code>RSAPKCS1SignatureFormatter</code> and <code>RSAPKCS1SignatureDeformatter</code> are not easy going.</p>

<p><em>Removed edits, answering own question... unless someone comes up with a better answer or adds detail including the whys.</em></p>
","<p>I couldn't stop biting my nails trying to work backwards from CALG_RSA_SIGN = 0x00002400, and stumbled upon RSAPUBKEY, then PUBLICKEYSTRUC and finally PublicKeyBlob.
Well now I can parse it formally.
Wonder if there is any struct already in the .NET framework for handling this?</p>

<p><a href=""https://msdn.microsoft.com/en-us/library/ee442238.aspx"" rel=""nofollow"">https://msdn.microsoft.com/en-us/library/ee442238.aspx</a></p>

<p>Oh hey, these magical numbers look familiar. What do they mean...</p>

<p>Is it <a href=""https://msdn.microsoft.com/en-us/library/ms232463.aspx"" rel=""nofollow"">https://msdn.microsoft.com/en-us/library/ms232463.aspx</a> ?</p>

<pre><code>// 00 24 00 00 // 0x00002400 LE // PublicKeyBlob  SigAlgId ALG_ID = CALG_RSA_SIGN 
// 04 80 00 00 // 0x00008004 LE // PublicKeyBlob  HashAlgId ALG_ID = CALG_SHA1
// 94 00 00 00 // 0x00000094 LE // PublicKeyBlob  cbPublicKey dword = 148
// sizeof(PUBLICKEYSTRUC) is 8 + sizeof(RSAPUBKEY) is 12 + sizeof(modulus) is 128 = 148
// 06          // 0x06          // PUBLICKEYSTRUC bType byte = PUBLICKEYBLOB
// 02          // 0x02          // PUBLICKEYSTRUC bVersion byte = CUR_BLOB_VERSION
// 00 00       // 0x0000 LE     // PUBLICKEYSTRUC reserved word = 0
// 00 24 00 00 // 0x00002400 LE // PUBLICKEYSTRUC aiKeyAlg ALG_ID = CALG_RSA_SIGN 
// 52 53 41 31 // 'RSA1'        // RSAPUBKEY magic dword
// 00 04 00 00 // 0x00000400 LE // RSAPUBKEY bitlen dword
// 01 00 01 00 // 0x00010001 LE // RSAPUBKEY pubexp dword
// public modulus reversed follows in (bitlen/8) bytes
</code></pre>

<p>So using this information (couldn't get rsaCsp.ImportParameters to work right)...</p>

<pre><code>var rsaCsp = new RSACryptoServiceProvider(BitLength);
rsaCsp.FromXmlString(string.Format(
    ""&lt;RSAKeyValue&gt;&lt;Modulus&gt;{1}&lt;/Modulus&gt;&lt;Exponent&gt;{0}&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;"",
    Convert.ToBase64String(PubExp), Convert.ToBase64String(PubMod)));
</code></pre>

<p>Now you have a valid rsaCsp for signature authentication from your assembly's SN PK.</p>
","340","<c#><.net-assembly><public-key><modulus><exponent>","1","1","1","2015-02-21 18:35:06","28642010","0","2","2879498","","2015-02-21 18:33:27","2015-02-21 03:28:30",""
"51568757","Verifying signature - What is causing invalid signature?","<p>I need to sign and verify a message using RSA public and private key. The if verifier.verify(h, signature) portion at receiver, every time returns the ""Signature not authentic"" error. Even though everything is correct. What am I doing wrong? What is the most likely cause for this problem?</p>

<p>I have generated keys using the following code</p>

<pre><code>from Crypto.Signature import PKCS1_v1_5
from Crypto.PublicKey import RSA
key = RSA.generate(1024)
private_key=key.exportKey()
public_key=key.publickey().exportKey()
</code></pre>

<p>At sender,</p>

<pre><code>from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA

private_key=""""""Private key here
-----END RSA PRIVATE KEY-----""""""
message = 'To be signed'
priv_key = RSA.importKey(private_key)
h = SHA256.new(message)
signature = PKCS1_v1_5.new(priv_key).sign(h)
f=open('sign.txt','w')
f.write(signature)
</code></pre>

<p>At receiver,</p>

<pre><code>from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA
from base64 import b64decode


public_key=""""""public key here""""""
pub_key = RSA.importKey(public_key)

message = 'To be signed'
f=open('sign.txt')
sig=f.readlines()
signature=sig[0]
h = SHA256.new(message)
verifier = PKCS1_v1_5.new(pub_key)
if verifier.verify(h, signature):
   print ""The signature is authentic.""
else:
   print ""The signature is not authentic.""
</code></pre>

<p>I am new to python. Any help will be appreciated. Thanks </p>
","<p>On the sender, you get the signature and save it as binary into a file</p>

<p>On the receiver, you read the signature from the file as it is text, then take the first line.</p>

<p>just replace this:</p>

<pre><code>sig=f.readlines()
signature=sig[0]
</code></pre>

<p>by</p>

<pre><code>signature=f.read()
</code></pre>

<p>If you want to stick with the ""text"" mode, you need to encode the signature in base64 and write it to the file, and in receiver side, read the first line, and decode the base64. To do that : </p>

<p>On sender, you can set : </p>

<pre><code>f.write(signature.encode('base64').replace('\n', ''))
</code></pre>

<p>and on receiver: </p>

<pre><code>sig=f.readlines()
signature=sig[0].decode(""base64"")
</code></pre>
","339","<python-2.7><rsa><verification><public-key><dsa>","0","0","1","2018-07-28 13:28:13","51571150","0","","9015857","","2018-07-28 11:23:19","2018-07-28 06:37:01",""
"37103632","How to generate temporary public-key using html5","<p>How to generate a public/private key pair in the user's browser, </p>

<p>This key must be:</p>

<ul>
<li>temporary (not saved for ever, valid only for the current session). </li>
<li>generated in a cross browser/system manner without prompting the user for any input.</li>
<li>allow access to the public key's hash for validation purposes.</li>
</ul>

<p>I tried using <code>&lt;keygen&gt;</code> but it requires using forms and user intervention.</p>
","<p>Consider using <a href=""https://www.w3.org/TR/WebCryptoAPI/"" rel=""nofollow"">WebCrypto</a></p>

<p>Specifically, <a href=""https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey"" rel=""nofollow""><code>crypto.subtle.generateKey</code></a> will do the key generation.</p>

<ul>
<li><p>The key can be temporary as long as you discard it securely and/or invalidate it after its desired validity period has expired.  Depending on how your system works, you may want to validate the expiry/validity of a given key by rolling it into the hash.</p></li>
<li><p>Here is a <a href=""http://qnimate.com/asymmetric-encryption-using-web-cryptography-api/"" rel=""nofollow"">tutorial</a> which offers a cross-browser solution.</p></li>
<li><p>Hashing the key (and/or other data) can be done using other parts of the WebCrypto API (see <a href=""https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest"" rel=""nofollow""><code>crypto.subtle.digest</code></a>)</p></li>
</ul>
","339","<javascript><html5><public-key-encryption><public-key><temporary>","3","2","1","2016-05-08 19:47:31","","0","","3088349","","2016-05-08 18:56:15","2016-05-08 18:54:58",""
"40147924","Deploy Symfony app with LexikJWTAuthenticationBundle on Heroku","<p>I have my app deployed to Heroku, then I added an api with LexikJWTAuthenticationBundle for authentication. I created public and private keys with a passphrase like the documentation says, and it works great on my local machine, yet I do not know how to create or copy those files to Heroku. </p>
","<p>You probably have something like that in your config.yml:</p>

<pre><code>lexik_jwt_authentication:
    private_key_path: '%kernel.root_dir%/var/jwt/private.pem'   
    public_key_path:  '%kernel.root_dir%/var/jwt/public.pem'    
    pass_phrase:      'somepassphrase'                        
    token_ttl:        2592000
</code></pre>

<p>In my case this resolves to a path like /app/var/jwt/ and in that folder I have two files private.pem and public.pem.</p>

<p>You say it's running in dev, so you should have something similar.
So you just have to upload/checkin/deploy the folder structure and files with your standard deployment (Symfony and other) files to Heroku. What is your exact issue?</p>

<p><strong>Strong recommendation:</strong>
You should <strong>have different set of key pairs for every environment</strong>, so in a minimal setup you shouldn't define the lexik_jwt_authentication not in your config.yml but twice, in your config_dev.yml and your config_prod.yml and and have a different set of pem files for dev and prod.</p>
","337","<symfony><heroku><private-key><public-key><lexikjwtauthbundle>","5","-1","2","2018-06-30 08:40:12","","0","2","","","","2016-10-20 07:20:30",""
"40147924","Deploy Symfony app with LexikJWTAuthenticationBundle on Heroku","<p>I have my app deployed to Heroku, then I added an api with LexikJWTAuthenticationBundle for authentication. I created public and private keys with a passphrase like the documentation says, and it works great on my local machine, yet I do not know how to create or copy those files to Heroku. </p>
","<p>With LexikJWTAuthenticationBundle v2.5.0, this is now possible to give keys as environment variables : <a href=""https://github.com/lexik/LexikJWTAuthenticationBundle/commit/154c60e90b8f10e1fdca819a681b5f189e8ed9ef#diff-850942b3ba24ab03a40aaa81b6152852"" rel=""nofollow noreferrer"">commit 154c60e90b8f10e1fdca819a681b5f189e8ed9ef</a>.</p>

<p><strong>Replace keys path for string keys in lexik_jwt_authentication.yaml :</strong></p>

<p>Before :</p>

<pre><code>lexik_jwt_authentication:
    private_key_path: '%kernel.project_dir%/%env(JWT_PRIVATE_KEY_PATH)%'
    public_key_path: '%kernel.project_dir%/%env(JWT_PUBLIC_KEY_PATH)%'
</code></pre>

<p>After :</p>

<pre><code>lexik_jwt_authentication:
    secret_key: '%env(JWT_SECRET_KEY)%'
    public_key: '%env(JWT_PUBLIC_KEY)%'
</code></pre>

<p>I didn't find a solution to paste full keys as string in .env file, so I kept <code>private_key_path</code> and <code>public_key_path</code> in <code>config/dev/lexik_jwt_authentication.yaml</code> for my dev environment, and used <code>secret_key</code> and <code>public_key</code> only in <code>config/prod/lexik_jwt_authentication.yaml</code>, for my Heroku production.</p>

<p>To finish, add env variables on Heroku, deploy and you're done :</p>

<p><a href=""https://i.stack.imgur.com/I3jdE.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/I3jdE.png"" alt=""JWT_PUBLIC_KEY""></a></p>

<p><a href=""https://i.stack.imgur.com/7Hpi2.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7Hpi2.png"" alt=""JWT_SECRET_KEY""></a></p>
","337","<symfony><heroku><private-key><public-key><lexikjwtauthbundle>","5","4","2","2018-06-30 08:40:12","","0","2","","","","2016-10-20 07:20:30",""
"51362311","Create RSACryptoServiceProvider from public key ONLY","<p>I am using the key-pair to sign my XML (using SignedXml) and I embed the public key in my app as embedded resources.</p>

<p>Here how I create the key pair</p>

<pre><code>sn -k Warehouse.snk
sn -p Warehouse.snk WarehousePublic.snk
</code></pre>

<p>When I tried to read the <code>WarehousePublic.snk</code> I get an exception <strong>Bad Version of provider.</strong></p>

<p>Here is my code:</p>

<pre><code>using (Stream stream = assembly.GetManifestResourceStream(""WareApp.Resources.WarehousePublic.snk""))
{
    byte[] bytes = new byte[stream.Length];
    stream.Read(bytes, 0, bytes.Length);

    using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
    {
        rsa.ImportCspBlob(bytes);  //the exception occurred here

        ...
        ...
        ...
    }
}
</code></pre>

<p>Is there a way to create <strong>RSACryptoServiceProvider</strong> from public key only?</p>

<p>I have also tried to use X509Certificate2</p>

<pre><code>X509Certificate2 cert = new X509Certificate2(bytes);  //I got exception here
RSACryptoServiceProvider rsa = (RSACryptoServiceProvider)cert2.PublicKey.Key;
</code></pre>

<p>But I get exception <strong>Cannot find the requested object.</strong></p>

<p>Any idea?</p>

<p>Thanks</p>
","<p>I think using <code>SN</code> to generate certificates for signing (using the <code>RSACryptoServiceProvider</code> at least) is unsupported. That would explain the error, I think. What you're looking for, in Windows, is a <code>.PFX</code> file (i.e. certificate with key) and <code>.CER</code> file (certificate without private key).</p>

<p>SN (<a href=""https://docs.microsoft.com/en-us/dotnet/framework/tools/sn-exe-strong-name-tool"" rel=""nofollow noreferrer"">MSDN link</a>) doesn't provide security, and is only used for identity. You can use IIS or <a href=""https://msdn.microsoft.com/en-us/library/bfsktky3(VS.100).aspx"" rel=""nofollow noreferrer""><code>makecert.exe</code></a> to generate a self-signed certificate that should work with what you're trying to do (i.e. a <code>.PFX</code> file and / or certificate already imported into the Windows certificate store). You can then extract the <code>.CER</code> file from that and use it for your project.</p>
","330","<c#><public-key><strongname><rsacryptoserviceprovider><strong-named-key>","1","1","2","2018-07-19 08:56:26","51362649","0","","","","","2018-07-16 12:52:30",""
"51362311","Create RSACryptoServiceProvider from public key ONLY","<p>I am using the key-pair to sign my XML (using SignedXml) and I embed the public key in my app as embedded resources.</p>

<p>Here how I create the key pair</p>

<pre><code>sn -k Warehouse.snk
sn -p Warehouse.snk WarehousePublic.snk
</code></pre>

<p>When I tried to read the <code>WarehousePublic.snk</code> I get an exception <strong>Bad Version of provider.</strong></p>

<p>Here is my code:</p>

<pre><code>using (Stream stream = assembly.GetManifestResourceStream(""WareApp.Resources.WarehousePublic.snk""))
{
    byte[] bytes = new byte[stream.Length];
    stream.Read(bytes, 0, bytes.Length);

    using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
    {
        rsa.ImportCspBlob(bytes);  //the exception occurred here

        ...
        ...
        ...
    }
}
</code></pre>

<p>Is there a way to create <strong>RSACryptoServiceProvider</strong> from public key only?</p>

<p>I have also tried to use X509Certificate2</p>

<pre><code>X509Certificate2 cert = new X509Certificate2(bytes);  //I got exception here
RSACryptoServiceProvider rsa = (RSACryptoServiceProvider)cert2.PublicKey.Key;
</code></pre>

<p>But I get exception <strong>Cannot find the requested object.</strong></p>

<p>Any idea?</p>

<p>Thanks</p>
","<p>I'll accepted Shaamaan answer because he is ""<strong><em>half</em></strong>"" right. You can actually use SN to sign certificate. <code>ImportCspBlob()</code> will work! However, when you tried to to import public key that generated using <code>sn -p Warehouse.snk WarehousePublic.snk</code>, it won't work.</p>

<p>In order to make it work, you need to generate public key in XML using <code>RSACryptoServiceProvider.ToXmlString(false)</code> and embed it as ""embedded resources"".</p>

<p>What I did is I create a console application. Just cut and paste my code below to generate public key in XML file.</p>

<pre><code>class Program
{
    static void Main(string[] args)
    {
        if (args.Length &lt; 2)
        {
            Console.WriteLine(""Invalid Argument"");
            Console.WriteLine(""Usage:"");
            Console.WriteLine(""\tExtractPublicKey [Input SNK File] [Output XML File]"");
            return;
        }

        using (FileStream fs = File.Open(args[0], FileMode.Open, FileAccess.Read))
        {
            byte[] bytes = new byte[fs.Length];
            fs.Read(bytes, 0, bytes.Length);

            using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
            {
                rsa.ImportCspBlob(bytes);
                using (StreamWriter sw = new StreamWriter(File.Open(args[1], FileMode.Create, FileAccess.ReadWrite, FileShare.ReadWrite)))
                    sw.Write(rsa.ToXmlString(false));
            }
        }
    }
}
</code></pre>

<p>After you compile it, to use the executable simply call:
<code>ExtractPublicKey.exe [SNK File with Private Key] [Output Public Key in XML File]</code></p>

<p>To use the embedded certificate, simply do:</p>

<pre><code>RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
rsa.FromXmlString(stream.ReadToEnd());
</code></pre>

<p>I hope this help someone that come across the similar problem.</p>

<p>Cheers</p>

<h2>UPDATED</h2>

<p>Shaamaan answer should be followed. Please READ Shaamaan comment with MSDN link. He answer stands because he is not ONLY provide a correct way for security, but also inform me why SN is not right security tool. Thank you Shaamaan!</p>
","330","<c#><public-key><strongname><rsacryptoserviceprovider><strong-named-key>","1","2","2","2018-07-19 08:56:26","51362649","0","","","","","2018-07-16 12:52:30",""
"52492644","Azure PowerShell - Extract PEM from SSL certificate","<p>I have a WebApp under Azure that uses a SSL binding certificate ( that has been generated with Azure portal).
I would like to retrieve the public key (PEM file) of this SSL certificate using Azure Powershell. I've managed to extract the public key in the C# backoffice using the mycertificate.GetPublicKeyString() function, but I don't know how to achieve that under PowerShell.
Have you an idea ?</p>

<p>Many thanks.</p>
","<p>You can extract the public certificate from a PKCS#12 archive (.pfx/.p12) with <a href=""https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/get-pfxcertificate?view=powershell-6"" rel=""nofollow noreferrer""><code>Get-PfxCertificate</code></a></p>

<pre><code>$pfx = Get-PfxCertificate -FilePath C:\archive.pfx
$pem = [Convert]::ToBase64String($pfx.GetRawCertData())
</code></pre>
","326","<azure><ssl><public-key>","0","1","2","2018-09-25 12:30:30","","0","","","","","2018-09-25 07:18:56",""
"52492644","Azure PowerShell - Extract PEM from SSL certificate","<p>I have a WebApp under Azure that uses a SSL binding certificate ( that has been generated with Azure portal).
I would like to retrieve the public key (PEM file) of this SSL certificate using Azure Powershell. I've managed to extract the public key in the C# backoffice using the mycertificate.GetPublicKeyString() function, but I don't know how to achieve that under PowerShell.
Have you an idea ?</p>

<p>Many thanks.</p>
","<p>I've found this article:</p>

<p><a href=""https://blogs.msdn.microsoft.com/appserviceteam/2017/02/24/creating-a-local-pfx-copy-of-app-service-certificate/"" rel=""nofollow noreferrer"">https://blogs.msdn.microsoft.com/appserviceteam/2017/02/24/creating-a-local-pfx-copy-of-app-service-certificate/</a></p>

<p>On the $pfxCertObject you can call: $pfxCertObject.GetPublicKeyString() which gives you the public key in hex mode.</p>

<p>And using <a href=""https://holtstrom.com/michael/tools/hextopem.php"" rel=""nofollow noreferrer"">https://holtstrom.com/michael/tools/hextopem.php</a> you can convert it to PEM format.</p>

<p>Hope this helps.</p>
","326","<azure><ssl><public-key>","0","0","2","2018-09-25 12:30:30","","0","","","","","2018-09-25 07:18:56",""
"41036330","Store private key in microservices","<p>There are some microservice which communicating with each other with rsa encrypted messages. The private keys are in files currently, what is the best practice to store the private and public keys in the containers? The current solution is in the /etc/ssl, but this is a little bit hard to manage and not to safety.</p>
","<p>I don't know your exact use case but you could consider taking a look at Hashicorp Vault. It has a <a href=""https://www.vaultproject.io/docs/secrets/pki/index.html"" rel=""nofollow noreferrer"">PKI secrets plugin</a> which lets you storing public/private key pairs. If it fits your use case this might be a good read, as at least someone else has thought about storing it securely.</p>

<p>The nice thing about vault is that in theory (this depends on the plugin that's being used) you could create a situation where the private keys are completely managed by vault and your messages are being authenticated with the vault. This will make it hard for an attacker to get your private keys. However, you might end up needing to write your own vault plugin to get this completely working with your application.</p>
","326","<microservices><private-key><public-key>","3","0","1","2018-07-05 22:11:13","51200539","0","1","","","","2016-12-08 09:49:18",""
"33441425","How To Extract Public Key","<p>I used the following answer (<a href=""https://stackoverflow.com/a/201277/99344"">https://stackoverflow.com/a/201277/99344</a>) to generate a certificate and sign my exe.</p>

<p>I need to give the public key to a third party.</p>

<p>I have .pvk and .cer files. How do I extract the public key?</p>

<p>Thanks.</p>
","<p>OK so I found some documentation that says that the .cer file only contains the public key so it is what I wanted.</p>
","325","<code-signing><public-key>","0","0","1","2015-10-30 18:14:40","","0","","-1","","2017-05-23 12:29:51","2015-10-30 17:13:36",""
"54178516","Creating a custom .SNK file","<p>How can we generate a custom <a href=""https://stackoverflow.com/questions/131181/what-is-a-snk-for"">.SNK file</a> (used to sign an assembly with a strong name), if I already have my private/public key pair (in arbitrary format, but for the sake of the clarity, let's say we've generated it on linux, using <a href=""https://www.ssh.com/ssh/keygen/"" rel=""nofollow noreferrer"">ssh-keygen</a>)?</p>
","<p>You can store the keys in Microsoft CNG formerly CSP and the SNK can be easily pointing to the Key container .. that way you can even have the keys store in an HSM, this however create a problem with sharing keys on different machine .. if the keys are on a pkcs12 file you can easily make a batch file to store it in the KeyContainer and then use it </p>

<p>So you same key pairs on each machine which can be security if these keys are very important. </p>

<p>On other hand you can use also the CSP or CNG Provider </p>

<pre><code>&lt;PropertyGroup&gt;
    &lt;SignAssembly&gt;true&lt;/SignAssembly&gt;
    &lt;DelaySign&gt;false&lt;/DelaySign&gt;
    &lt;KeyContainerName&gt;YOUR_CONTAINER_NAME_HERE&lt;/KeyContainerName&gt;
&lt;/PropertyGroup&gt;
</code></pre>

<p>If you also want the key to show up in the 'properties' section of the project then you can add the following section</p>

<pre><code>&lt;None Include=""$(KEY_CONTAINER_HERE)""&gt;
  &lt;Link&gt;Properties\App.snk&lt;/Link&gt;
&lt;/None&gt;
</code></pre>

<p>If you can generate pk12 or pfx file .. with the key pairs, then you can use sn.exe -i   .. to generate p12 file you can use openssl</p>
","323","<.net><assemblies><private-key><public-key><snk>","2","0","1","2019-03-08 09:12:36","","2","1","","","","2019-01-14 09:14:44",""
"56443443","RSA Encrypt in Javascript and Decrypt in Java Using Public Key","<p>I want to encrypt by RSA a string in javascript using public key, then decrypt it in java using private key.</p>

<p>I generated keys pair using <a href=""http://travistidwell.com/jsencrypt/demo/"" rel=""nofollow noreferrer"">http://travistidwell.com/jsencrypt/demo/</a></p>

<p>I encrypt string in javascript using <a href=""https://nodejs.org/api/crypto.html#crypto_crypto_publicencrypt_key_buffer"" rel=""nofollow noreferrer"">""crypto""</a> like this:</p>

<pre><code>    var crypto = require(""crypto"");
var publicKey = ""-----BEGIN PUBLIC KEY-----\n"" +
""MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCG2s04Qcph89sViJojs8VmIHk/\n"" +
""mdoi1nUcflxACgunOeKzHXDRao/hxruSzOEzzPTW9yNbKiog1h0Sm6VWlmhvFgFS\n"" +
""i4xC4yZ40wSpZCOYIF4ncNO2YUxFssxtGi+5qsn5+h8jDr93mtqFg9/INIdYHwZ5\n"" +
""Mg8NjIanmlXyJdsgWwIDAQAB\n"" +
""-----END PUBLIC KEY-----"";

var strToEncrypt = ""123456789123456789"";
var buffer = Buffer.from(strToEncrypt);
var encrypted = crypto.publicEncrypt(publicKey, buffer);
console.log(encrypted.toString(""base64""));
</code></pre>

<p>and I got this string as an encrypted string:</p>

<pre><code>O2ywr7v5XPYu1O8r2K6SdouiLJN9L5cU6fIeUkhKG1IvpM7a/iFPpgVdztg/svoqiItBK5gOqyYVI/Du6qnuh7Nox5t+NMoON7gJHHcNMKAIbA8CI4C4rXDRCtLU3EGWjJiKfMKIWHIuXr8EqO3kceERC1dowI17UX7skItZe3s=
</code></pre>

<p>then tried to decrypt it in java:</p>

<p><strong><em>RsaUtil.java</em></strong></p>

<pre><code>import org.apache.commons.codec.binary.Base64;

import javax.crypto.Cipher;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

public class RsaUtil {
    /**
     * Constructs a private key (RSA) from the given string
     *
     * @param key PEM Private Key
     * @return RSA Private Key
     * @throws IOException
     * @throws GeneralSecurityException
     */
    public static RSAPrivateKey getPrivateKeyFromString(String key) throws IOException, GeneralSecurityException {
        String privateKeyPEM = key;

        // Remove the first and last lines
        privateKeyPEM = privateKeyPEM.replace(""-----BEGIN RSA PRIVATE KEY-----\n"", """");
        privateKeyPEM = privateKeyPEM.replace(""-----END RSA PRIVATE KEY-----"", """");

        // Base64 decode data
        byte[] encoded = Base64.decodeBase64(privateKeyPEM);

        KeyFactory kf = KeyFactory.getInstance(""RSA"");
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encoded);
        RSAPrivateKey privKey = (RSAPrivateKey) kf.generatePrivate(keySpec);
        return privKey;
    }

    /**
     * Decrypts the text with the private key (RSA)
     *
     * @param cipherText Text to be decrypted
     * @param privateKey
     * @return Decrypted text (Base64 encoded)
     * @throws IOException
     * @throws GeneralSecurityException
     */
    public static String decrypt(String cipherText, PrivateKey privateKey) throws IOException, GeneralSecurityException {
        Cipher cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        return new String(cipher.doFinal(Base64.decodeBase64(cipherText)), ""UTF-8"");
    }
}
</code></pre>

<p><strong><em>Main:</em></strong></p>

<pre><code>public static void main(String[] args) {
        try{
            String privateKeyStr = ""-----BEGIN RSA PRIVATE KEY-----\n"" +
                    ""MIICXAIBAAKBgQCG2s04Qcph89sViJojs8VmIHk/mdoi1nUcflxACgunOeKzHXDR\n"" +
                    ""ao/hxruSzOEzzPTW9yNbKiog1h0Sm6VWlmhvFgFSi4xC4yZ40wSpZCOYIF4ncNO2\n"" +
                    ""YUxFssxtGi+5qsn5+h8jDr93mtqFg9/INIdYHwZ5Mg8NjIanmlXyJdsgWwIDAQAB\n"" +
                    ""AoGAdYfw4B0G5AQCZ2wc2wzs+CtJQVM3uLEsdF70y6N1sJNUr0LzdrDnIaFxDWqe\n"" +
                    ""w+TXZxsRp3zCJsg1omgg26xO622NoTGUXLNYMAgo2PQhFjvmqsEe/vfQ+LqnvZyU\n"" +
                    ""wKv7Zbn7RNnyaJETnk2rFMGb1QJrO3rr3fCoViTHtrzR3EECQQDHrAmsq7Q918My\n"" +
                    ""NoJdWkBeTaIsRAGkM7FXNzzGTciNjxXB1P1/D0nCAUkgt5yTSz6DCWDccUlE4Jp7\n"" +
                    ""K6C+0tNLAkEArOXFOKuo9MJtYKfaisnn6TuUiMcaPgGRFmyXD7zFm+zsv1E+Dd4L\n"" +
                    ""iRraupWnUc/d/UOIqQ4gFfXjnSdO6sWtMQJALr7hGPKt5NiRkzzdsltBvJIySGi3\n"" +
                    ""dajAeOmuqcJmFHYOIu3pVwjOPMQuSaGS34z7GpRkf9dpzt1CbVmebW5QFwJAZqNM\n"" +
                    ""LfUxqoMVHVDn2oY7puhYp83SVUbm03IJRy1f/c1rSbO369GJ9Y08lZErr9R/Ss7h\n"" +
                    ""fMJG5+J9iZiBL7vDsQJBAJIZFV+BCqGe3PkwxCBZjLcF0TSScC+qC6wG7wehh4oA\n"" +
                    ""o9ZBNiJyUJm9VjLwOkpvyeeTXCSCXxtygo/liGCzLF4=\n"" +
                    ""-----END RSA PRIVATE KEY-----"";

            PrivateKey privatekey = RsaUtil.getPrivateKeyFromString(privateKeyStr);
            String cipherText = ""O2ywr7v5XPYu1O8r2K6SdouiLJN9L5cU6fIeUkhKG1IvpM7a/iFPpgVdztg/svoqiItBK5gOqyYVI/Du6qnuh7Nox5t+NMoON7gJHHcNMKAIbA8CI4C4rXDRCtLU3EGWjJiKfMKIWHIuXr8EqO3kceERC1dowI17UX7skItZe3s="";
            String decrypted = RsaUtil.decrypt(cipherText, privatekey);
            System.out.println(decrypted);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
</code></pre>

<p>But i get this error :</p>

<pre><code>Caused by: java.security.InvalidKeyException: IOException : algid parse error, not a sequence
    at sun.security.pkcs.PKCS8Key.decode(PKCS8Key.java:352)
    at sun.security.pkcs.PKCS8Key.decode(PKCS8Key.java:357)
    at sun.security.rsa.RSAPrivateCrtKeyImpl.&lt;init&gt;(RSAPrivateCrtKeyImpl.java:91)
    at sun.security.rsa.RSAPrivateCrtKeyImpl.newKey(RSAPrivateCrtKeyImpl.java:75)
    at sun.security.rsa.RSAKeyFactory.generatePrivate(RSAKeyFactory.java:316)
    at sun.security.rsa.RSAKeyFactory.engineGeneratePrivate(RSAKeyFactory.java:213)
</code></pre>

<p>Any idea?</p>

<p>Note:
My private key starts with -----BEGIN <strong>RSA</strong> PRIVATE KEY-----  I don't know if its really matters</p>
","","320","<javascript><java><encryption><rsa><public-key>","0","","0","2019-06-04 14:17:04","","2","","238704","","2019-06-04 14:17:04","2019-06-04 11:58:46","2019-06-04 13:11:54"
"43051848","Add RSA key to Android project in a secure way","<p>In my Android project a need to cypher and decypher RSA values.
I have both private &amp; public RSA keys in *.pem files.
I have added it to the project but when I  try to create the release apk, lint says:</p>

<blockquote>
  <p>Error:Error: The raw/private_key.pem file seems to be a private key file. Please make sure not to embed this in your APK file. [PackagedPrivateKey]
  Error:Execution failed for task ':app:lintVitalRelease'.</p>
  
  <blockquote>
    <p>Lint found fatal errors while assembling a release target.   To proceed, either fix the issues identified by lint, or modify your
    build script as follows:   ...   android {
          lintOptions {
              checkReleaseBuilds false
              // Or, if you prefer, you can continue to check for errors in release builds,
              // but continue the build even when errors are found:
              abortOnError false
          }   }   ...</p>
  </blockquote>
</blockquote>

<p>I have tried to find the right way to add the keys to the project without success.</p>

<p>Any help on how to add the keys properly?
Thanks.</p>
","","310","<android><encryption><rsa><private-key><public-key>","0","","0","2017-03-27 16:34:48","","2","","","","","2017-03-27 16:34:48",""
"54548803","Retrieve ECDSA public key from only x-compressed coordinate using Crypto++ library","<p>I'm implementing a security daemon on the vehicular communication scope.</p>

<p>I could receive a message with a signature and the compressed X coordinate of a point to verify that signature. The elliptic curve can be either the secp256 or the brainpoolp256r1 and the algorithm is ECDSA.</p>

<p>My question is: how can I recover the ECC Point (and so the public key) given only the compressed X coordinate with the Crypto++ library?</p>

<p>I followed some links which explain it (and many others) <a href=""https://www.cryptopp.com/wiki/Point_Compression"" rel=""nofollow noreferrer"">https://www.cryptopp.com/wiki/Point_Compression</a> <a href=""https://stackoverflow.com/questions/16576434/crypto-and-compressed-ec-keys"">Crypto++ and Compressed EC keys</a> but they don't fit my problem.</p>

<p>I tried to produce code to resolve the problem, but it won't work:</p>

<pre><code>#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;cryptopp/cryptlib.h&gt;
#include &lt;cryptopp/ecp.h&gt;
#include &lt;cryptopp/eccrypto.h&gt;
#include &lt;cryptopp/hex.h&gt;
#include &lt;cryptopp/oids.h&gt;
#include &lt;cryptopp/osrng.h&gt;

using namespace CryptoPP;
using std::cout;
using std::endl;
using std::string;

int main() 
{
    string compactPoint = ""937120662418500f3ad7c892b1db7e7c2d85ec48c74e99d64dcb7083082bb4f3"";

    AutoSeededRandomPool generator;
    ECDSA&lt;ECP, SHA256&gt;::PublicKey pubKey;
    OID curve       = ASN1::secp256r1();


    StringSource ss (compactPoint, true, new CryptoPP::HexDecoder);
    ECP::Point point;

    pubKey.GetGroupParameters().GetCurve().DecodePoint (point, ss, ss.MaxRetrievable());

    std::cout &lt;&lt; ""Result after decompression X: "" &lt;&lt; std::hex &lt;&lt; point.x &lt;&lt; std::endl;
    std::cout &lt;&lt; ""Result after decompression Y: "" &lt;&lt; std::hex &lt;&lt; point.y &lt;&lt; std::endl;

    return 0;
}
</code></pre>

<p>Can you help me please?</p>
","<p>The easiest solution is probably to prepend <code>""02""</code> oe <code>""03""</code> to the <a href=""https://tools.ietf.org/id/draft-jivsov-ecc-compact-00.xml#NIST-SP800-133"" rel=""nofollow noreferrer"">compact representation</a>. Crypto++ will then decode it as a compressed public key.</p>

<pre><code>$ cat test.cxx

#include ""cryptlib.h""
#include ""eccrypto.h""
#include ""ecp.h""
#include ""hex.h""
#include ""oids.h""

#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;

int main(int argc, char* argv[])
{
    using namespace CryptoPP;

    ECDSA&lt;ECP, SHA256&gt;::PublicKey pubKey;
    pubKey.AccessGroupParameters().Initialize(ASN1::secp256r1());

    std::string compactPoint = ""02"" /* compressed */
        ""937120662418500f3ad7c892b1db7e7c""
        ""2d85ec48c74e99d64dcb7083082bb4f3"";

    StringSource ss (compactPoint, true, new HexDecoder);
    ECP::Point point;

    pubKey.GetGroupParameters().GetCurve().DecodePoint (point, ss, ss.MaxRetrievable());

    std::cout &lt;&lt; ""Result after decompression X: "" &lt;&lt; std::hex &lt;&lt; point.x &lt;&lt; std::endl;
    std::cout &lt;&lt; ""Result after decompression Y: "" &lt;&lt; std::hex &lt;&lt; point.y &lt;&lt; std::endl;

    return 0;
}
</code></pre>

<p>And then building and running the program. Notice the library solves for the <code>y</code> portion of the coordinate.</p>

<pre class=""lang-none prettyprint-override""><code>cryptopp$ g++ test.cxx ./libcryptopp.a -o test.exe
cryptopp$ ./test.exe
Result after decompression X: 937120662418500f3ad7c892b1db7e7c2d85ec48c74e99d64dcb7083082bb4f3h
Result after decompression Y: cfcaf74eae3ceec5993928f04970cfef343b9a6b22727fa81926bd21f256ec56h
</code></pre>

<hr>

<p>And to save you the trouble of looking it up, you can set the public element for <code>publicKey</code> using:</p>

<pre><code>pubKey.SetPublicElement(point);

std::cout &lt;&lt; ""X: "" &lt;&lt; std::hex &lt;&lt; pubKey.GetPublicElement().x &lt;&lt; std::endl;
std::cout &lt;&lt; ""Y: "" &lt;&lt; std::hex &lt;&lt; pubKey.GetPublicElement().y &lt;&lt; std::endl;
</code></pre>

<p>Running with the additional code produces the expected result:</p>

<pre class=""lang-none prettyprint-override""><code>$ ./test.exe
Result after decompression X: 937120662418500f3ad7c892b1db7e7c2d85ec48c74e99d64dcb7083082bb4f3h
Result after decompression Y: cfcaf74eae3ceec5993928f04970cfef343b9a6b22727fa81926bd21f256ec56h
X: 937120662418500f3ad7c892b1db7e7c2d85ec48c74e99d64dcb7083082bb4f3h
Y: cfcaf74eae3ceec5993928f04970cfef343b9a6b22727fa81926bd21f256ec56h
</code></pre>

<hr>

<p>If interested, here is the code you are using to decode the point from <a href=""https://github.com/weidai11/cryptopp/blob/master/ecp.cpp"" rel=""nofollow noreferrer""><code>ecp.cpp</code></a>:</p>

<pre><code>bool ECP::DecodePoint(ECP::Point &amp;P, BufferedTransformation &amp;bt, size_t encodedPointLen) const
{
    byte type;
    if (encodedPointLen &lt; 1 || !bt.Get(type))
        return false;

    switch (type)
    {
    case 0:
        P.identity = true;
        return true;
    case 2:
    case 3:
    {
        if (encodedPointLen != EncodedPointSize(true))
            return false;

        Integer p = FieldSize();

        P.identity = false;
        P.x.Decode(bt, GetField().MaxElementByteLength());
        P.y = ((P.x*P.x+m_a)*P.x+m_b) % p;

        if (Jacobi(P.y, p) !=1)
            return false;

        P.y = ModularSquareRoot(P.y, p);

        if ((type &amp; 1) != P.y.GetBit(0))
            P.y = p-P.y;

        return true;
    }
    case 4:
    {
        if (encodedPointLen != EncodedPointSize(false))
            return false;

        unsigned int len = GetField().MaxElementByteLength();
        P.identity = false;
        P.x.Decode(bt, len);
        P.y.Decode(bt, len);
        return true;
    }
    default:
        return false;
    }
}
</code></pre>

<p>I mention it in case you want to solve for the <code>y</code> coordinate yourself, populate the <code>point</code>, and then call <code>SetPublicElement</code> directly.</p>

<hr>

<p>You can also prepend <code>03</code> instead of <code>02</code>. The difference is, the decoding returns either <code>y</code> or <code>p-y</code>. The variability is introduced due to the modular square root shown above. We need to see the generation algorithm to determine what the value should be.</p>

<p>Here is the difference when using <code>03</code> instead of <code>02</code>:</p>

<pre><code>$ ./test.exe
X: 937120662418500f3ad7c892b1db7e7c2d85ec48c74e99d64dcb7083082bb4f3h
Y: 303508b051c3113b66c6d70fb68f3010cbc46595dd8d8057e6d942de0da913a9h
</code></pre>

<p>Notice <code>03</code> produces the <code>y</code> coordinate <code>303508b051c3113b66c6d70fb68f3010cbc46595dd8d8057e6d942de0da913a9h</code> instead of <code>02</code> and <code>cfcaf74eae3ceec5993928f04970cfef343b9a6b22727fa81926bd21f256ec56h</code>.</p>
","310","<c++><compression><public-key><crypto++><ecdsa>","1","0","1","2019-02-07 17:44:58","54550787","2","1","4359602","","2019-02-06 08:59:53","2019-02-06 07:47:47",""
"50006517","Java RSAPublicKey factory exception","<p>After upgrading Java to 1.8.0_171 I am always getting the following exception during RSA public key composing:</p>

<pre><code>java.security.InvalidKeyException: exponent is larger than modulus
</code></pre>

<p>It was working before upgrade, does anyone know what to do with it?</p>

<pre><code>RSAPublicKeySpec publicSpec = new RSAPublicKeySpec(new BigInteger(modulus), new BigInteger(exponent));
KeyFactory factory = KeyFactory.getInstance(""RSA"");
PublicKey pub = factory.generatePublic(publicSpec); &lt;----- EXCEPTION
</code></pre>
","<p>I've found out that there was a change in Java from 1.8.0_161 referenced by JDK-8174756:</p>

<blockquote>
  <p>RSA public key validation  In 8u161, the
  RSA implementation in the SunRsaSign provider will reject any RSA
  public key that has an exponent that is not in the valid range as
  defined by PKCS#1 version 2.2. This change will affect JSSE
  connections as well as applications built on JCE.</p>
</blockquote>

<p>Which basically means that modulus shouldn't be negative.
In that case, it is important to build <code>BigInteger</code> in the following manner to be positive:</p>

<pre><code>BigInteger(1, modulus)
BigInteger(1, exponent)
</code></pre>

<p>After that change, it works again.</p>
","308","<java><exception><rsa><public-key>","2","1","1","2018-04-25 06:53:41","50015827","1","","","","","2018-04-24 16:20:03",""
"13578992","Trying to have postgres database backup by backup rubygem nad ruby on rails","<p>My  my_backup.rb=></p>

<pre><code>   database PostgreSQL do |db|
      db.name               = ""xxxxx""
      db.username           = ""postgres""
      db.password           = ""*********""
      db.host               = ""localhost""
      db.port               = 5432
    end

    store_with SCP do |server|
      server.username     = ""username""
      server.password     = ""password""
      server.ip           = ""xxx.xxx.xxx.xxx"" 
      server.port         = 300
      server.path         = ""~/backups/""
      server.keep         = 5
      #server.passive_mode = false
    end
</code></pre>

<p>And having this error=></p>

<pre>
CleanerError: Cleanup Warning
   The temporary backup folder '/home/ilfs/Backup/.tmp'
   appears to contain the package files from the previous backup!
   /home/ilfs/Backup/.tmp/2012.11.26.17.34.07.my_backup.tar
   These files will now be removed.

   Please check the log for messages and/or your notifications
   concerning this backup: 'Description for my_backup (my_backup)'
   The temporary files which had to be removed should not have existed.
 Performing Backup for 'Description for my_backup (my_backup)'!
 [ backup 3.0.27 : ruby 1.8.7 (2012-02-08 MBARI 8/0x6770 on patchlevel 358) [x86_64-linux], MBARI 0x6770, Ruby Enterprise Edition 2012.02 ]
 Database::PostgreSQL started dumping and archiving 'ces_dev'.
 Using Compressor::Bzip2 for compression.
   Command: '/bin/bzip2'
   Ext: '.bz2'
 Database::PostgreSQL Complete!
 Packaging the backup files...
 Splitter configured with a chunk size of 250MB.
 Packaging Complete!
 Cleaning up the temporary files...
 ModelError: Backup for Description for my_backup (my_backup) Failed!
   An Error occured which has caused this Backup to abort before completion.
   Reason: OpenSSL::PKey::PKeyError
   not a public key ""/home/sumanta/.ssh/id_rsa.pub"" 
</pre>

<p>can anybody please help with a quick reply?</p>
","<p>Well the problem was with postgress - you have to add your ip in pg_hba.conf => host all ip trust/md5(depend on version). And thanks to a_horse_with_no_name for editing it in proper format</p>
","307","<ruby-on-rails><postgresql><openssl><backup><public-key>","0","0","1","2012-12-27 16:00:37","14057493","1","","330315","","2012-11-27 07:36:22","2012-11-27 07:02:38",""
"47169473","AWS suddenly throwing ssh error: Permission denied (publickey)","<p>I was using it without any issues. To install Nginx, PHP7, MySQL, Python, Go Lang and MongoDB, I had to change some user permissions in nginx. </p>

<p>Suddenly, I'm unable to ssh anymore!! I didn't touch the Amazon Console either. My colleague is also unable to ssh. I had given him the elaine.pem file</p>

<p>I was able to ssh using <code>ssh -i ""elaine.pem"" ubuntu@13.127.4.XXX</code> until now. No change and no spelling error.</p>

<p>Any thoughts?</p>

<pre><code>Elaine-MacBook-Pro:key elaine$ ssh -v -i ""elaine.pem"" ubuntu@13.127.4.XXX
OpenSSH_6.9p1, LibreSSL 2.1.8
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 21: Applying options for *
debug1: Connecting to 13.127.4.xxx [13.127.4.xxx] port 22.
debug1: Connection established.
debug1: key_load_public: No such file or directory
debug1: identity file elaine.pem type -1
debug1: key_load_public: No such file or directory
debug1: identity file elaine.pem-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.9
debug1: Remote protocol version 2.0, remote software version OpenSSH_7.2p2 Ubuntu-4ubuntu2.2
debug1: match: OpenSSH_7.2p2 Ubuntu-4ubuntu2.2 pat OpenSSH* compat 0x04000000
debug1: Authenticating to 13.127.4.xxx:22 as 'ubuntu'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client chacha20-poly1305@openssh.com &lt;implicit&gt; none
debug1: kex: client-&gt;server chacha20-poly1305@openssh.com &lt;implicit&gt; none
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:Z4mp+ciY2V+zjJn4G6Un3kv4A9xZ7AOZ9lQ2V9FZthw
debug1: Host '13.127.4.xxx' is known and matches the ECDSA host key.
debug1: Found key in /Users/elaine/.ssh/known_hosts:1
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: elaine.pem
debug1: Authentications that can continue: publickey
debug1: Trying private key: elaine.pem
debug1: Authentications that can continue: publickey
debug1: No more authentication methods to try.
Permission denied (publickey).
Elaine-MacBook-Pro:key elaine$ 
</code></pre>
","","307","<amazon-web-services><nginx><ssh><public-key><openssh>","0","","0","2017-11-08 00:10:16","","6","","","","","2017-11-08 00:10:16",""
"49497489","encrypt to multiple public keys with RSA using Webcrypto","<p>is there any way to encrypt data for multiple public key (so multiple key owner can decrypt data using their private key) using javascript cryto Api.</p>

<p>If that is not possible using RSA-OAEP, can you please suggest way for the same?</p>

<p>Thanks</p>

<pre><code>window.crypto.subtle.encrypt(
    {
        name: ""RSA-OAEP"",

    },
    ArrayOfPublicKeys, 
    data 
)
.then(function(encrypted){

    console.log(encrypted);
})
</code></pre>
","<p>Dr Jack Millan.</p>

<p>The way PGP, S/MIME and other similar messaging solutions enable a multi-party message is to:
1. Generate a Message Encryption Key (MEK), for example, an AES key for use with mode GCM,
2. Look up the public key of each recipient,
3. Encrypt the MEK to each recipient's public key,
4. Package the encrypted MEKs with the encrypted message,
5. Distribute to participants.</p>

<p>The challenge here is the secure discovery of public keys, most applications punt on this and make the user do manual thumbprint verification or rely on a third-party such as a Certificate Authority to verify the binding of a key to a subject.</p>

<p>You can find an example that does this using webcrypto with a single recipient here:
<a href=""https://pkijs.org/examples/CMSEnvelopedExample.html"" rel=""nofollow noreferrer"">https://pkijs.org/examples/CMSEnvelopedExample.html</a></p>

<p>The source for this demo is here:
<a href=""https://github.com/PeculiarVentures/PKI.js/tree/master/examples/HowToEncryptCMSviaCertificate"" rel=""nofollow noreferrer"">https://github.com/PeculiarVentures/PKI.js/tree/master/examples/HowToEncryptCMSviaCertificate</a></p>
","307","<javascript><encryption><rsa><public-key>","1","2","1","2018-03-28 17:39:28","49540908","11","","","","","2018-03-26 17:43:01",""
"39061118","Acquia Dev Desktop won't let me push changes to server","<p>I've just edited some code in my Bartik theme and saved it locally. When I try to push my local code to the server using Acquia Dev Desktop I get a message that says: 'Bad Private Key File'</p>

<p>I have copied down the private key exactly as it appeared on my Acquia Cloud account in the credentials section, but the problem persists. </p>

<p>The desktop application gives me an option to generate my own private key, but this is different from the one that appears online on my Acquia Cloud account. In any case, generating my own private key results in 'SSH authentication failed'. </p>

<p>I would really appreciate any help!</p>
","<p><a href=""https://help.github.com/articles/generating-an-ssh-key/#platform-mac"" rel=""nofollow"">Github offers an excellent and straightforward guide</a> for generating public/private key pairs.  Most version control systems and cloud services that use SSH do this.  One you have the key, you just copy and paste it to the server and you're good to go.</p>
","302","<drupal><ssh><private-key><public-key><acquia>","1","0","2","2018-03-26 04:07:55","","3","","5729613","","2016-08-21 22:54:01","2016-08-21 05:32:04",""
"39061118","Acquia Dev Desktop won't let me push changes to server","<p>I've just edited some code in my Bartik theme and saved it locally. When I try to push my local code to the server using Acquia Dev Desktop I get a message that says: 'Bad Private Key File'</p>

<p>I have copied down the private key exactly as it appeared on my Acquia Cloud account in the credentials section, but the problem persists. </p>

<p>The desktop application gives me an option to generate my own private key, but this is different from the one that appears online on my Acquia Cloud account. In any case, generating my own private key results in 'SSH authentication failed'. </p>

<p>I would really appreciate any help!</p>
","<ol>
<li>Generate public ssh key and private ssh key</li>
<li>public ssh key is for acquia cloud</li>
<li>private ssh key is for local dev desktop</li>
</ol>
","302","<drupal><ssh><private-key><public-key><acquia>","1","0","2","2018-03-26 04:07:55","","3","","5729613","","2016-08-21 22:54:01","2016-08-21 05:32:04",""
"45487440","Get public key tokent without loading dll","<p>I need to get a dll public key token. I know that that is possible by loading the dll and getting that information:</p>

<pre><code>Assembly.GetExecutingAssembly().GetName().GetPublicKeyToken();
</code></pre>

<p>Unfortunatelly I might need to change the dll during run time, so I cannot have it loaded.</p>

<p>Is there any way of getting that information without having to load the dll? Even by giving the actual path of the dll? </p>

<p>Side note: I can also get that information by using System.Diagnostics to start a process to use the utility SN to get that information, but I would like to avoid that.</p>
","<p>It is possible to get the public token without loading the asssembly by doing:</p>

<pre><code>AssemblyName.GetAssemblyName(""assembly-path.dll"").GetPublicKeyToken();
</code></pre>
","296","<c#><dll><public-key><strongname>","1","1","1","2017-08-08 09:46:33","45564970","0","","","","","2017-08-03 14:40:20",""
"37235236","Java DSA Signature: fixed key size and signature size","<p>I have the following code that signs some String data:</p>

<pre><code>KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DSA"");
SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"");
keyGen.initialize(1024, random);
KeyPair pair = keyGen.generateKeyPair();
PrivateKey privateK = pair.getPrivate();
PublicKey publicK = pair.getPublic();

Signature dsa = Signature.getInstance(""SHA1withDSA"");
dsa.initSign(privateK);
dsa.update(data.getBytes());

byte[] signature = dsa.sign();
String hexSignature = DatatypeConverter.printHexBinary(signature);
String hexPublicK = DatatypeConverter.printHexBinary(publicK.getEncoded());
</code></pre>

<p>However, it's giving me a varying public key size and signature size.
For example,</p>

<p><a href=""https://i.stack.imgur.com/R1LPT.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/R1LPT.png"" alt=""enter image description here""></a></p>

<p>Why is that? I want both the public key and the signature produced for some data to have fixed sizes.</p>

<p>Thank you for your help!</p>
","","294","<java><digital-signature><public-key><dsa>","1","","0","2016-05-15 06:28:49","","1","","","","","2016-05-15 06:28:49",""
"55261449","How to generate SSL certificate & public key for encryption?","<p>I am working with some XYZ API provider. </p>

<p>What they are asking is the following:</p>

<ul>
<li>Certificate with 4096 bits public key for encryption (.pem or .cer
format)</li>
<li>SSL certificate for sending callback response on call back URL.</li>
</ul>

<p>I generated the self-signed SSL certificate using OpenSSL &amp; shared with them along with the private key (I know we shouldn't). They asked me to share a valid public key &amp; SSL certificate. </p>

<p>I even generated a certificate &amp; private key on DigiCert, but couldn't figure out how to generate a public key for SSL Certificate.  </p>

<p>Can anyone kindly suggest how to generate Public key &amp; private key for the SSL Certificate? </p>

<p>Kindly also suggest if I can use Comodo or DigiCert to generate a public key for the SSL certificate?</p>
","<p>An SSL Certificate <strong>is</strong> a public key verified and signed by a <em>Certificate Authority</em>. You generate a public/private key pair, then from that generate a <a href=""https://en.wikipedia.org/wiki/Certificate_signing_request"" rel=""nofollow noreferrer"">Certificate Signing Request</a> (which <strong>includes</strong> the public key), which you send to the <em>CA</em>. It then signs that public key included in the <em>CSR</em> producing the <strong>certificate</strong> which is sends back to you. See also <a href=""https://en.wikipedia.org/wiki/Certificate_authority#Issuing_a_certificate"" rel=""nofollow noreferrer"">here</a>.</p>

<p>It sounds like you already have this though, so you'd need to clarify what you're trying to achieve. It sounds like it may be a client authentication / mutual authentication scenario? If so, it depends on what the service provider requires - certificates for client authentication may need to be signed either by a public authority that the server trusts, or by the server itself.</p>
","293","<ssl><ssl-certificate><public-key-encryption><private-key><public-key>","0","2","1","2019-03-21 21:52:34","55289811","2","","","","","2019-03-20 13:05:40",""
"48208979","Certificate problems after updating to version Bouncycastle Version 1.56","<p>we have Updated our Bouncycastle Version from 1.55 to 1.56. After this we have trouble with one of our Certificates. Does anybody now why this Problem occurs?</p>

<pre><code>caused by: java.lang.IllegalArgumentException: invalid info structure in RSA public key                                    
at org.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey.populateFromPublicKeyInfo(Unknown Source)               
at org.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPublicKey.&lt;init&gt;(Unknown Source)                                  
at org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyFactorySpi.generatePublic(Unknown Source)                            
at org.bouncycastle.jce.provider.BouncyCastleProvider.getPublicKey(Unknown Source)                                        
at org.bouncycastle.jcajce.provider.asymmetric.x509.X509CertificateObject.getPublicKey(Unknown Source)                     
at org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi.engineLoad(Unknown Source)                          
at java.security.KeyStore.load(KeyStore.java:1456)`
</code></pre>

<p><strong>(UPDATED)</strong></p>

<p>The problem occurs when loading the KeyStore with the provider Bouncycastle.</p>

<pre><code>  keyStore = KeyStore.getInstance(""PKCS12"", new BouncyCastleProvider());
        keyStore.load(inputStream, ""test"".toCharArray());
</code></pre>

<p>Tested things:</p>

<p>ReImport of the Certificate with KeyStoreExplorer 5.3.0 -> Same Problem, 5.1.1 -> Succesfully imported</p>

<p>Is there any new Validation for the RSA Public Key?</p>
","<p>I found the problem. The problem was that Bouncycastle 1.56 uses Java 8 and therefore no longer accepts certificates with less than 1024 keysize.</p>
","288","<java><certificate><bouncycastle><public-key>","1","0","1","2018-01-13 02:33:54","","3","","238704","","2018-01-13 02:33:54","2018-01-11 14:08:24",""
"39587504","JWT Public Keys and Private Keys Invalid","<p>I am trying to use JWT.io (<a href=""https://jwt.io/#libraries"" rel=""nofollow"">https://jwt.io/#libraries</a>) to create a JWT token.  However, when I add either my public key or private key for the signature portion, it keeps saying it is invalid.</p>

<p>I created the private and public key with the following respectively:</p>

<p>Generating a Private Key
 openssl genrsa -aes256 -out private_key.em 2048</p>

<p>Generating a Public Key
 openssl rsa -pubout -in private_key.pem -out public_key.em</p>

<p>Then all I do is copy-paste them into jwt.io.</p>

<p>All my other data is fine, it is just the public key and private key.  </p>
","<p>JWT.io needs to use your private key to generated the signature for the JWT. However, your private key is encrypted with a password that JWT.io does not have because you used the <code>-aes256</code> flag with the <code>openssl genrsa</code> command. You should generate an unencrypted private key with the following command:</p>

<pre><code>openssl genrsa -out private_key.em 2048
</code></pre>

<p>and paste that in to the JWT.io private key entry alongside of the public key.</p>
","288","<oauth-2.0><jwt><public-key-encryption><private-key><public-key>","1","0","1","2016-09-20 07:43:39","","0","","","","","2016-09-20 06:53:31",""
"47640719","Ansible SSH passwd authentication successful, but publickey authentication fails","<p>When using ansible, I authenticate using the following parameters: </p>

<pre><code>-u bob -k -K -b 
</code></pre>

<p>I get the output I want, but it turns out that Ansible fails publickey authentication on each system.</p>

<p>Selected output from /var/log/secure on one of the recipient systems:  </p>

<pre><code>Failed publickey for bob from $IP port $PORT ssh2

Accepted password for bob from $IP port $PORT ssh2     
</code></pre>

<p>I'm making my through the documentation, but I have yet to find a method to prevent Ansible from attempting to use anything other than just passwd authentication.</p>

<p>Any help is appreciated. </p>
","<p>Add SSH client option <code>-o PreferredAuthentications=password</code> where applicable (Ansible inventory, extra-variables, ssh-config, etc.).</p>

<p>For example, for hosts file:</p>

<pre><code>[myhosts]
host1 ansible_host=X.X.X.X ansible_ssh_extra_args=""-o PreferredAuthentications=password""
</code></pre>
","286","<ssh><ansible><public-key><openssh>","-1","0","1","2017-12-05 06:22:17","47647290","2","","","","","2017-12-04 19:36:24",""
"33895833","Implementing RSA in C# when Public Key is Known","<p>I'm trying to implement an RSA encryption function, but I'm new to cryptography. I know the public key and have data to encrypt, but I can't get the implementation correct in C#. I've tried using:</p>

<pre><code>private byte[] RSAEncrypt(byte[] data, byte[] publicKey)
{
    using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())
    {
        RSAParameters RSAKeyInfo = RSA.ExportParameters(false);
        RSAKeyInfo.Modulus = publicKey;
        RSA.ImportParameters(RSAKeyInfo);
        data = RSA.Encrypt(data, false);
    }

    return data;
}
</code></pre>

<p>But this keeps giving me the error ""Bad Length"". The public key is 8 bytes long. The data is 254 bytes long. The similar questions about that error say that it occurs when the data is too long. Does an 8 byte long public key sound correct to encrypt 254 bytes? </p>
","","283","<c#><rsa><public-key>","0","","0","2015-11-24 14:15:48","","9","","1816580","","2015-11-24 14:15:48","2015-11-23 22:57:06",""
"48694190","Verify integrity of Apache file","<p>This journey is embarrassingly long which makes me feel like I'm missing something obvious. My question: Is there a more direct approach at verifying an Apache release? or rather, where did I go wrong?</p>

<p>I am trying to verify my download of Apache Thrift by following their instructions listed <a href=""http://www.apache.org/info/verification.html"" rel=""nofollow noreferrer"">here</a>.</p>

<pre><code>Mateos-MBP:Thrift.nosync mateo$ 
    gpg --keyserver pgpkeys.mit.edu --recv-key DE885DD3
gpg: key 89AC4BA7DE885DD3: 73 signatures not checked due to missing keys
gpg: key 89AC4BA7DE885DD3: ""Sander Striker &lt;striker@apache.org&gt;"" not changed
gpg: key 6635B6C0DE885DD3: 10 duplicate signatures removed
gpg: key 6635B6C0DE885DD3: 295 signatures not checked due to missing keys
gpg: key 6635B6C0DE885DD3: ""Sander Striker &lt;striker@apache.org&gt;"" not changed
gpg: Total number processed: 2
gpg:              unchanged: 2
Mateos-MBP:Thrift.nosync mateo$ gpg --verify thrift-0.11.0.tar.gz.asc thrift-0.11.0.tar.gz
gpg: Signature made Sun Dec  3 12:24:40 2017 MST
gpg:                using RSA key 8CD87F186F06E958EFCA963D76BD340FC4B75865
gpg: Can't check signature: No public key
Mateos-MBP:Thrift.nosync mateo$ 
</code></pre>

<p>Ok, so apparently Thrift needs a public key with the ID of 8CD87F186....
not striker. (or that's what the hackers WANT me to think) So I look on pgp.mit.edu (not found) and again on keyserver.php.com (not found). Then I search in Google which takes me over to <a href=""https://people.apache.org/keys/committer/"" rel=""nofollow noreferrer"">Apache Public Key files</a>. Feeling better that I'm back on a legitimate site. I find my key signed by 'jensg', copy/paste into my own text file, then verify the file albeit with a non trusted signature. Yay, mission accomplished.</p>

<pre><code>Mateos-MBP:Thrift.nosync mateo$ gpg --verify thrift-0.11.0.tar.gz.asc thrift-0.11.0.tar.gz
gpg: Signature made Sun Dec  3 12:24:40 2017 MST
gpg:                using RSA key 8CD87F186F06E958EFCA963D76BD340FC4B75865
gpg: Good signature from ""Jens Geyer &lt;jensgeyer@hotmail.com&gt;"" [unknown]
gpg:                 aka ""Jens Geyer &lt;jensg@apache.org&gt;"" [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 8CD8 7F18 6F06 E958 EFCA  963D 76BD 340F C4B7 5865
</code></pre>

<p>So, is there a more direct approach at verifying an Apache release?</p>
","","279","<thrift><public-key>","1","","0","2018-02-09 10:22:50","","5","","499466","","2018-02-09 10:22:50","2018-02-08 20:24:24",""
"50965042","RSA key pair is not working","<p>here is my key generation:</p>

<pre><code>KeyPairGenerator keyGen = null;
                try {
                    keyGen = KeyPairGenerator.getInstance(""RSA"");
                    keyGen.initialize(1024);
                } catch (NoSuchAlgorithmException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                String publicKey=  Base64.getEncoder().encodeToString(keyGen.genKeyPair().getPublic().getEncoded());
                String privateKey = Base64.getEncoder().encodeToString(keyGen.genKeyPair().getPrivate().getEncoded());}
</code></pre>

<p>here is my signed token generation code</p>

<pre><code>private String generateRSASignedToken(JWTClaimsSet claimsSet) {
            SignedJWT signedJwt  = new SignedJWT(new JWSHeader(JWSAlgorithm.RS256), claimsSet);

            RSASSASigner signer = new RSASSASigner(getPrivateKey());
            String token= null;
            try {
                    signedJwt.sign(signer);
                    token = signedJwt.serialize();

            } catch (JOSEException e) {
                e.printStackTrace();
            }
            return token;
        }
</code></pre>

<p>getting public and private key</p>

<pre><code>private  RSAPrivateKey getPrivateKey() {
                java.security.Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
                try(InputStream stream = getClass().getClassLoader().getResourceAsStream(""private.key"")){
                String privatekey = IOUtils.toString(stream, Charset.defaultCharset().toString());
                System.out.println(""after: ""+privatekey);
                byte[] key =  Base64.getDecoder().decode(privatekey);
                PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(key);
                KeyFactory kf = KeyFactory.getInstance(""RSA"");
                return (RSAPrivateKey) kf.generatePrivate(spec);}
                catch (Exception e) {
                    e.printStackTrace();
                    return null;
                }
            }


            private  RSAPublicKey getPublicKey(){
              try(InputStream stream = getClass().getClassLoader().getResourceAsStream(""public.key"")){
              String publickey = IOUtils.toString(stream, Charset.defaultCharset().toString());
              System.out.println(""after: ""+publickey);
              byte[] key = Base64.getDecoder().decode(publickey);
              X509EncodedKeySpec spec = new X509EncodedKeySpec(key);
              KeyFactory kf = KeyFactory.getInstance(""RSA"");
              return (RSAPublicKey) kf.generatePublic(spec);}
                catch (Exception e) {
                      e.printStackTrace();
                      return null;
                }}
</code></pre>

<p>token verification :</p>

<pre><code>String token = generateRSASignedToken(claimsSet);
                JWSVerifier verifier = new RSASSAVerifier(getPublicKey());
                SignedJWT jwt=null;
                try {
                    jwt = SignedJWT.parse(token);
                    System.out.println(jwt.verify(verifier));
                } catch (ParseException | JOSEException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                } 
</code></pre>

<p>every thing looks fine from token generation part to getting public and private key but verification part is not working. It is printing false for the key pair generated. It was working fine with key pair I got from online tool(which I can't use due to licensing problem) but not when I generated keys.</p>
","<p>The problem is here:</p>

<pre><code>String publicKey  = Base64.getEncoder().encodeToString(keyGen.genKeyPair().getPublic().getEncoded());
String privateKey = Base64.getEncoder().encodeToString(keyGen.genKeyPair().getPrivate().getEncoded());
</code></pre>

<p><em>Every</em> time you call <code>genKeyPair()</code> a new key pair is generated. Thus <code>publicKey</code> and <code>privateKey</code> come from different and unrelated key pairs. The solution is simply to save the key pair just generated, e.g.</p>

<pre><code>KeyPair kp = keyGen.genKeyPair();
String publicKey  = Base64.getEncoder().encodeToString(kp.getPublic().getEncoded());
String privateKey = Base64.getEncoder().encodeToString(kp.getPrivate().getEncoded());
</code></pre>

<p>NOTE: there may be other problems with the code, this is the first one I spotted.</p>
","279","<java><rsa><private-key><public-key>","0","1","1","2018-06-21 13:02:14","","0","","7020538","","2018-06-21 09:58:27","2018-06-21 09:26:32",""
"19026384","what is different between public keys","<p>I have tried to create a public key in two ways,</p>

<ol>
<li><p>I created Self Signed Certificate and export it to .pfx file and used Openssl to get temp.cer file which contains the public key</p></li>
<li><p>used openssl to generate a public key as follows.</p>

<pre><code>openssl genrsa -out myjira.pem 1024

openssl rsa -in temp.pem -pubout -out temp.pub
</code></pre></li>
</ol>

<p>I am using an application and trying to implement OAuth on it. when I enter the public key from temp.cer (which is longer) it does not accepts it and says 
<i>Must be a valid public key. java.security.InvalidKeyException:</i>. But when I enter the public key from temp.pub (which is  much shorter than the other one) it accepts it.
now my question is what is differences between those public keys? </p>
","<p>It sounds like the longer of your keys is in fact a private key. Generally you have a key pair, a private and public key.</p>

<p>more info: <a href=""http://en.wikipedia.org/wiki/Public-key_cryptography"" rel=""nofollow"">http://en.wikipedia.org/wiki/Public-key_cryptography</a></p>
","278","<openssl><public-key-encryption><public-key>","0","0","2","2013-09-26 23:09:53","","0","","","","","2013-09-26 11:00:16",""
"19026384","what is different between public keys","<p>I have tried to create a public key in two ways,</p>

<ol>
<li><p>I created Self Signed Certificate and export it to .pfx file and used Openssl to get temp.cer file which contains the public key</p></li>
<li><p>used openssl to generate a public key as follows.</p>

<pre><code>openssl genrsa -out myjira.pem 1024

openssl rsa -in temp.pem -pubout -out temp.pub
</code></pre></li>
</ol>

<p>I am using an application and trying to implement OAuth on it. when I enter the public key from temp.cer (which is longer) it does not accepts it and says 
<i>Must be a valid public key. java.security.InvalidKeyException:</i>. But when I enter the public key from temp.pub (which is  much shorter than the other one) it accepts it.
now my question is what is differences between those public keys? </p>
","<p>A certificate file contains a public key as well as identity information that is bound to that key via a signature.  That's why your certificate file is longer than your public key file.</p>

<p>If you load the certificate into a Java <a href=""http://docs.oracle.com/javase/7/docs/api/javax/security/cert/X509Certificate.html"" rel=""nofollow"">X509Certificate</a> object, you can obtain the PublicKey by using the <code>getPublicKey()</code> method of the <code>X509Certificate</code> object.</p>
","278","<openssl><public-key-encryption><public-key>","0","1","2","2013-09-26 23:09:53","","0","","","","","2013-09-26 11:00:16",""
"29695955","Public key authentication in Safari","<p>I've implemented public key authentication on my website to allow users to sign in without using a password. They can request a certificate once they're signed in (the normal way). In the backend, a new certificate is generated using a self-signed server certificate. In the Apache config, the client side certificate is set to optional, in order to allow users to sign in without a certificate as well.</p>

<p>This all works splendidly, but there's a problem when visiting the website from Safari. When the website is visited for the first time, the browser offers to use a Apple-generated certificate, and the default Safari option is to do so. My server is of course unable to verify this certificate, because it was signed by Apple and not my server. The result is that users get a certificate error and can't visit the website. If a user denies to use the Apple provided certificate, everything works as expected and the user is able to log in normally.</p>

<p><img src=""https://i.stack.imgur.com/tQ1G3.jpg"" alt=""Safari prompting to use Apple-signed certificate""></p>

<p>The problem is, if the user clicks continue on the first visit (using the Apple-signed certificate), this is remembered in the keychain. This makes the website unaccessible unless one removes the entry in the keychain, which is a pain.</p>

<p><img src=""https://i.stack.imgur.com/Tgs1c.png"" alt=""Keychain entry""></p>

<p>Did anyone encounter this error, which makes it virtually impossible to work with public key authentication for the majority of people?</p>
","","277","<authentication><ssl><safari><keychain><public-key>","1","","0","2015-04-17 09:53:12","","0","","","","","2015-04-17 09:53:12",""
"50297554","Can load the public key in java using X509EncodedKeySpec but unable to parse it with openssl","<p>I have a private/public key pair that was generated by someone else and handed down to me. The pair is currently used in active deployment. Both keys are stored in files with a .der extension.
The private key I can verify and parse allright:</p>

<blockquote>
  <p>openssl pkcs8 -inform DER -nocrypt -in private_key.der</p>
</blockquote>

<p>Public one however fails with:</p>

<blockquote>
  <p>Error decrypting key 139834801850032:error:0D0680A8:asn1 encoding
  routines:ASN1_CHECK_TLEN:wrong tag:tasn_dec.c:1338:
  139834801850032:error:0D06C03A:asn1 encoding
  routines:ASN1_D2I_EX_PRIMITIVE:nested asn1 error:tasn_dec.c:852:
  139834801850032:error:0D08303A:asn1 encoding
  routines:ASN1_TEMPLATE_NOEXP_D2I:nested asn1
  error:tasn_dec.c:772:Field=version, Type=PKCS8_PRIV_KEY_INFO</p>
</blockquote>

<p>The public key is currently used by a java application and loaded as follows:</p>

<pre><code>     byte[] publicKeyArray - &lt;the public key bytes straight from file&gt;
     X509EncodedKeySpec spec = new X509EncodedKeySpec(publicKeyArray);
     KeyFactory factory = KeyFactory.getInstance(""RSA"");

     java.security.PublicKey publicKey = factory.generatePublic(spec);
</code></pre>

<p>The class documentation for X509EncodedKeySpec reads:</p>

<pre><code> * This class represents the ASN.1 encoding of a public key,
 * encoded according to the ASN.1 type {@code SubjectPublicKeyInfo}.
 * The {@code SubjectPublicKeyInfo} syntax is defined in the X.509
 * standard as follows:
 *
 * &lt;pre&gt;
 * SubjectPublicKeyInfo ::= SEQUENCE {
 *   algorithm AlgorithmIdentifier,
 *   subjectPublicKey BIT STRING }
 * &lt;/pre&gt;
</code></pre>

<p>and:</p>

<pre><code>   * Creates a new X509EncodedKeySpec with the given encoded key.
     *
     * @param encodedKey the key, which is assumed to be
     * encoded according to the X.509 standard. The contents of the
     * array are copied to protect against subsequent modification.
     * @exception NullPointerException if {@code encodedKey}
     * is null.
     */
</code></pre>

<p>I've tried experimenting with different openssl commands including asn1parse but no luck. How can I use/extract the public key from my file using something other than the java X509EncodedKeySpec?</p>
","","276","<java><openssl><public-key>","2","","0","2018-05-11 17:41:14","","1","","","","","2018-05-11 17:41:14",""
"36604601","OpenSSL d2i_RSA_PUBKEY resulting in Segmentation fault","<p>My C program using <code>RSA_genarate_key()</code> function creates RSA public and private key. Then public key is saved in file after converted into DER format using <code>i2d_RSA_PUBKEY()</code>.</p>

<p>File with public key seems to be ok </p>

<pre><code>openssl rsa -in public.der -inform DER -pubin -text    //shows up as below

Public-Key: (2048 bit)
Modulus:
   00:b5:99:9a:d3:7e:....
    .......39:86:6b:ae:29
Exponent: 3 (0x3)
writing RSA key
-----BEGIN PUBLIC KEY-----
MIIBIDANBgkqhkiG9.............
....................+1Y5lSk5hmuu
KQIBAw==
-----END PUBLIC KEY-----
</code></pre>

<p>Problem appears when I try to read it back and use it for encryption. Here is the code:</p>

<pre><code>File* fp;
RSA *pub=NULL;
const unsigned char* public_key_buf;
int size;
fp = fopen(""public.der"",""r"");
fseek (fp , 0 , SEEK_END);
size = ftell (fp); 
size = sizeof(char)*size;
rewind (fp);
public_key_buf = malloc(size*sizeof(char));
fread(&amp;public_key_buf,sizeof(char),size,fp);

pub = d2i_RSA_PUBKEY(0, &amp;public_key_buf, size);

fclose(fp);
</code></pre>

<p>Running program results in <code>Segmentation fault</code></p>

<p>Here is what gdb says:</p>

<pre><code>Program received signal SIGSEGV, Segmentation fault.
0x00007ffff7b0fe85 in ASN1_get_object ()
from /lib/x86_64-linux-gnu/libcrypto.so.1.0.0
(gdb) bt
#0  0x00007ffff7b0fe85 in ASN1_get_object () from /lib/x86_64-linux-gnu/libcrypto.so.1.0.0
#1  0x00007ffff7b05f30 in ?? () from /lib/x86_64-linux- gnu/libcrypto.so.1.0.0
#2  0x00007ffff7b071ad in ASN1_item_ex_d2i () from /lib/x86_64-linux-gnu/libcrypto.so.1.0.0
#3  0x00007ffff7b07914 in ASN1_item_d2i () from /lib/x86_64-linux-gnu/libcrypto.so.1.0.0
#4  0x00007ffff7affa3e in d2i_PUBKEY () from /lib/x86_64-linux-gnu/libcrypto.so.1.0.0
#5  0x00007ffff7affb14 in d2i_RSA_PUBKEY () from /lib/x86_64-linux-gnu/libcrypto.so.1.0.0
#6  0x0000000000400daa in main () at rsa_1.c:99

(gdb) p pub
$1 = (RSA *) 0x0
(gdb) p public_key_buf
$2 = (const unsigned char **) 0x603250
(gdb) p *public_key_buf
$3 = (const unsigned char *) 0x9060d3020018230 &lt;error: Cannot access memory at address 0x9060d3020018230&gt;
(gdb) p size
$4 = 293
</code></pre>

<p>Any help, please. </p>
","<p>If you look closely the signature for d2i_RSA_PUBKEY()</p>

<pre><code>RSA *d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length)
</code></pre>

<p>So why are you filling the first argument as 0 instead of NULL?</p>

<p>Shouldn't it be something like this?</p>

<pre><code>pub = d2i_RSA_PUBKEY(NULL, &amp;public_key_buf, size);
</code></pre>

<p>Let me know if this works?</p>
","276","<c><openssl><rsa><public-key><libcrypto>","0","-2","1","2016-04-18 09:19:44","","2","1","6198771","","2016-04-18 09:19:44","2016-04-13 16:39:27",""
"49102277","Extract ECPublicKey from a X509 certicate","<p>I'm having trouble extracting an ECPublicKey from an X509 certifcate using Java.</p>

<p>The keys and certificate were created as follows</p>

<pre><code>ssh-keygen -t ecdsa -f id_ecdsa
openssl pkcs8 -topk8 -in id_ecdsa -out id_ecdsa.p8
openssl req -new x509 -key id_ecdsa.p8 -out id_ecdsa.crt.der -outform der
</code></pre>

<p>The code used to extract the public key from the certificate is</p>

<pre><code>FileInputStream fin = new FileInputStream(""&lt;path to id_ecdsa.crt.der&gt;"");
CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
X509Certificate cert = (X509Certificate) cf.generateCertificate(fin);
PublicKey pk = cert.getPublicKey();

if (pk instanceof ECPublicKey) {
  ECPublicKey key = (ECPublicKey) pk;
  ...
} else if (pk instanceof RSAPublicKey) {
  RSAPublicKey key = (RSAPublicKey) pk;
  ...
}
</code></pre>

<p>For a certificate containing an RSA key all is ok. However if an ECDSA key is used the if(pk instanceof ECPublicKey) block is ignored.</p>

<p>A call to pk.getAlgorithm() yields ""EC"" which suggests the key is an ECDSA key.</p>

<p>Examination of pk with a debugger yields a type X509Key for ECDSA. For an RSA key the debugger yields RSAPublicKeyImpl.</p>

<p>N.B. java.security.* is used as the library.</p>

<p>Any help solving my problem would be greatly appreciated.</p>
","<p>I found that adding Bouncy Castle as a provider appears to have fixed my issue. It appears JDK is not fitted with EC support by default.</p>

<pre><code>Security.addProvider(new BouncyCastleProvider());
CertificateFactory cf = CertificateFactory.getInstance(""X.509"", ""BC"");
</code></pre>
","273","<java><public-key><ecdsa>","0","-1","1","2018-03-11 14:23:03","","0","","238704","","2018-03-11 14:23:03","2018-03-05 01:26:09",""
"53483118","BCECPublicKey to fingerprint","<p>When connecting to a ""new"" SSH server, with the command line, a fingerprint will be shown: </p>

<blockquote>
  <p>The authenticity of host 'test.com (0.0.0.0)' can't be established.<br>
  ECDSA key fingerprint is
  SHA256:566gJgmcB43EXimrT0exEKfxSd3xc7RBS6EPx1XZwYc.<br>
  Are you sure you want to continue connecting (yes/no)?</p>
</blockquote>

<p>I understand that the fingerprint is a Base64 string of the SHA256 hash of the public key.</p>

<p>I know how to generate this fingerprint with a <code>RSAPublicKey</code>:</p>

<pre><code>    RSAPublicKey publicKey = ...;

    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream);

    dataOutputStream.writeInt(""ssh-rsa"".getBytes().length);
    dataOutputStream.write(""ssh-rsa"".getBytes());
    dataOutputStream.writeInt(publicKey.getPublicExponent().toByteArray().length);
    dataOutputStream.write(publicKey.getPublicExponent().toByteArray());
    dataOutputStream.writeInt(publicKey.getModulus().toByteArray().length);
    dataOutputStream.write(publicKey.getModulus().toByteArray());

    MessageDigest digest = MessageDigest.getInstance(""SHA256"");
    byte[] result = digest.digest(byteArrayOutputStream.toByteArray());

    String fingerprint = Base64.getEncoder().encodeToString(result);
</code></pre>

<p>But how can I do this with a <code>BCECPublicKey</code>?</p>

<p><strong>UPDATE</strong><br>
I found out that the <code>BCECPublicKey</code> isn't similar to <code>RSAPublicKey</code> at all. I never knew that the SSH server public key is ECDSA and the client public key is RSA.  </p>

<p>Also the way the bytes are structured is way different. The RSA public key starts with a header(<code>ssh-rsa</code>). The header length can be read from the first 4 bytes(<code>readInt()</code>). But when I do this with the ECDSA the length is way to long to represent a header...</p>

<p><strong>Addition to answer</strong><br>
Something to copy paste:</p>

<pre><code>    BCECPublicKey publicKey = ...;

    byte[] point = SubjectPublicKeyInfo.getInstance(ASN1Sequence.getInstance(publicKey.getEncoded())).getPublicKeyData().getOctets();

    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream);

    dataOutputStream.writeInt(""ecdsa-sha2-nistp256"".getBytes().length);
    dataOutputStream.write(""ecdsa-sha2-nistp256"".getBytes());
    dataOutputStream.writeInt(""nistp256"".getBytes().length);
    dataOutputStream.write(""nistp256"".getBytes());
    dataOutputStream.writeInt(point.length);
    dataOutputStream.write(point);

    MessageDigest digest = MessageDigest.getInstance(""SHA256"");
    byte[] result = digest.digest(byteArrayOutputStream.toByteArray());

    String fingerprint = Base64.getEncoder().encodeToString(result);
</code></pre>
","<p>The OpenSSH publickey format (and the SSH wire format on which it is based) <em>does</em> start with the type, but for ECDSA the type includes the curve id. As an example, one of my test systems has an ecdsa/p256 key as follows:</p>

<pre><code>$ awk '{print $2}' &lt;id_ecdsa.pub |openssl base64 -d -A |xxd
0000000: 0000 0013 6563 6473 612d 7368 6132 2d6e  ....ecdsa-sha2-n
0000010: 6973 7470 3235 3600 0000 086e 6973 7470  istp256....nistp
0000020: 3235 3600 0000 4104 8141 9c28 53e7 532e  256...A..A.(S.S.
0000030: 8c4b 9781 c6a5 1820 f41a bc95 4e62 13a9  .K..... ....Nb..
0000040: 8356 a517 be55 6ebc fbf4 de74 e216 8f17  .V...Un....t....
0000050: 6222 011c 5920 a3fc caed c880 4298 46d5  b""..Y ......B.F.
0000060: dd39 396e d72d 1e40                      .99n.-.@
</code></pre>

<p>That consists of:<br>
4 bytes 00000013 bigendian int = 19: length of type<br>
19 bytes 'ecdsa-sha2-nistp256' type<br>
4 bytes 00000008 bigendian int = 8: length of curveid<br>
8 bytes 'nistp256' curveid (redundant, but that's the wire format)<br>
4 bytes 00000041 bigendian int = 65: length of pub point<br>
65 bytes beginning 04: pub point in X9.62 format, copied more conveniently in SEC1, which is 1 byte 04=uncompressed, N bytes X-coordinate, N bytes Y-coordinate where N is the (fixed) size needed to represent the curve's underlying field as unsigned.</p>

<p>These are mostly defined in <a href=""https://tools.ietf.org/html/rfc5656#section-3.1"" rel=""nofollow noreferrer"">rfc5656 section 3.1</a> and the curveid's in 6.1. The RFC allows compressed point format, but OpenSSH doesn't use that option.</p>

<p><code>BCECPublicKey.getEncoded()</code> (like all Java PublicKey classes) returns a so-called X.509 (really SubjectPublicKeyInfo, SPKI) encoding which for EC <em>includes</em> the public point in X9.62 uncompressed format, but you need some parsing to extract it. Since you have BC, it's easiest to use that:</p>

<pre><code>byte[] point = SubjectPublicKeyInfo.getInstance(ASN1Sequence.getInstance(encoded)).getPublicKeyData().getOctets();
</code></pre>

<p>Alternatively <code>.getW()</code> and <code>.getQ()</code> get the point as a JCE or BC class, from either of which you can get the (affine) X and Y coordinates as <code>BigInteger</code> resp. <code>ECFieldElement</code> which in turn yields <code>BigInteger</code>, and each <code>BigInteger</code> can be converted to a <em>variable-sized</em> byte array which you must then left-pad or left-truncate to the correct size. </p>

<p>The result is the data to be hashed. In case you aren't aware, only OpenSSH versions 6.8 up use base64(sha256(pubkey)) for the fingerprint (by default). Before that it was hex-with-colons(md5(pubkey)), and newer versions can do the old fingerprint for compatibility (see option <code>FingerprintHash</code> in <code>ssh_config</code> for <code>ssh</code> and flag <code>-E</code> in <code>ssh-keygen</code>).</p>

<p>And to be clear this is only the <em>OpenSSH</em> fingerprint. Key fingerprints are also used in the PGP and X.509/PKIX (SSL/TLS, CMS/SMIME, etc) worlds and they are entirely different.</p>
","270","<java><ssh><bouncycastle><public-key>","6","3","1","2018-12-17 19:00:40","53545770","0","","2735398","","2018-12-17 19:00:40","2018-11-26 14:20:32",""
"51246101","Apple Pay - NSS error -8178","<p>I'm integrating Apple pay to website in PHP, by following the tutorial in <a href=""https://github.com/norfolkmustard/ApplePayJS"" rel=""nofollow noreferrer"">https://github.com/norfolkmustard/ApplePayJS</a> . However I'm getting following error if I click the apple pay button.</p>

<pre><code>unable to load client key: -8178 (SEC_ERROR_BAD_KEY)
</code></pre>

<p>When I checked the error in detail I'm getting below details:</p>

<p><a href=""https://i.stack.imgur.com/KP5hL.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/KP5hL.jpg"" alt=""enter image description here""></a></p>

<p>I even tried disabling the SSL in curl by adding:</p>

<pre><code>curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
</code></pre>

<p>Any help would be appreciated, Thanks in advance. </p>
","","270","<php><curl><public-key><applepay><applepayjs>","5","","0","2018-07-11 16:23:46","","8","","973397","","2018-07-11 16:23:46","2018-07-09 12:54:32",""
"47833222","Generating key pair from passphrase in libsodium","<p>I would like to generate a public/private key pair deterministically  from a passphrase with <code>libsodium</code>.
Whenever/wherever the user types his passphrase, s/he will get back the same key pair.</p>

<p>My approach is to acquire the passphrase somehow (e.g., <code>fgets</code>), hash it with <code>crypto_generichash</code>, and then use the hash as a seed to <code>crypto_sign_seed_keypair</code>:</p>

<pre><code>#include &lt;assert.h&gt;
#include &lt;string.h&gt;
#include &lt;sodium.h&gt;

int main (void) {
    char passphrase[1024];
    printf(""ENTER PASSPHRASE: "");
    {
        char* ret = fgets(passphrase, sizeof(passphrase), stdin);
        assert(ret != NULL);
        assert(passphrase[strlen(passphrase)-1] == '\n');
        passphrase[strlen(passphrase)-1] = '\0';
    }

    unsigned char hash[crypto_generichash_BYTES];
    {
        int ret = crypto_generichash(hash, crypto_generichash_BYTES,
                                     (unsigned char*)passphrase, strlen(passphrase),
                                     NULL, 0);
        assert(ret == 0);
    }

    unsigned char pk[crypto_sign_PUBLICKEYBYTES];
    unsigned char sk[crypto_sign_SECRETKEYBYTES];
    {
        assert(crypto_generichash_BYTES == crypto_sign_SEEDBYTES);
        int ret = crypto_sign_seed_keypair(pk, sk, hash);
        assert(ret == 0);
    }
    printf(""PUBLIC KEY:\n"");
    for (int i=0; i&lt;crypto_sign_PUBLICKEYBYTES; i++) {
        printf(""%02X "", pk[i]);
    }
    printf(""\n"");
    printf(""PRIVATE KEY:\n"");
    for (int i=0; i&lt;crypto_sign_SECRETKEYBYTES; i++) {
        printf(""%02X "", sk[i]);
    }
    printf(""\n"");

    return 0;
}
</code></pre>

<p>Assuming the passphrase is strong, is this scheme safe and practical?</p>
","<p>Your code is fine, but even a ""strong"" passphrase has a pretty low entropy. Therefore, instead of a generic hash function, you may want to use a <a href=""https://download.libsodium.org/doc/password_hashing/the_argon2i_function.html"" rel=""nofollow noreferrer"">password hashing function</a>.</p>
","269","<public-key><libsodium>","0","0","1","2017-12-15 19:51:42","47839023","0","","","","","2017-12-15 13:19:00",""
"47815156","How to verify XML Signature manually without using API?","<p>I have an XML Signature file like this :</p>

<pre><code>&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;PurchaseOrder&gt;
 &lt;Item number=""130046593231""&gt;
  &lt;Description&gt;Video Game&lt;/Description&gt;
  &lt;Price&gt;10.29&lt;/Price&gt;
 &lt;/Item&gt;
 &lt;Buyer id=""8492340""&gt;
  &lt;Name&gt;My Name&lt;/Name&gt;
  &lt;Address&gt;
   &lt;Street&gt;One Network Drive&lt;/Street&gt;
   &lt;Town&gt;Burlington&lt;/Town&gt;
   &lt;State&gt;MA&lt;/State&gt;
   &lt;Country&gt;United States&lt;/Country&gt;
   &lt;PostalCode&gt;01803&lt;/PostalCode&gt;
  &lt;/Address&gt;
 &lt;/Buyer&gt;
 &lt;Signature xmlns=""http://www.w3.org/2000/09/xmldsig#""&gt;
  &lt;SignedInfo&gt;
   &lt;CanonicalizationMethod
    Algorithm=""http://www.w3.org/TR/2001/REC-xml-c14n-20010315""/&gt;
   &lt;SignatureMethod
    Algorithm=""http://www.w3.org/2000/09/xmldsig#rsa-sha1""/&gt;
   &lt;Reference URI=""""&gt;
    &lt;Transforms&gt;
     &lt;Transform
      Algorithm=""http://www.w3.org/2000/09/xmldsig#enveloped-signature""/&gt;
    &lt;/Transforms&gt;
    &lt;DigestMethod Algorithm=""http://www.w3.org/2000/09/xmldsig#sha1""/&gt;
    &lt;DigestValue&gt;tVicGh6V+8cHbVYFIU91o5+L3OQ=&lt;/DigestValue&gt;
   &lt;/Reference&gt;
  &lt;/SignedInfo&gt;
  &lt;SignatureValue&gt;
   dJDHiGQMaKN8iPuWApAL57eVnxz2BQtyujwfPSgE7HyKoxYtoRB97ocxZ
   8ZU440wHtE39ZwRGIjvwor3WfURxnIgnI1CChMXXwoGpHH//Zc0z4ejaz
   DuCNEq4Mm4OUVTiEVuwcWAOMkfDHaM82awYQiOGcwMbZe38UX0oPJ2DOE=
  &lt;/SignatureValue&gt;
  &lt;KeyInfo&gt;
   &lt;X509Data&gt;
    &lt;X509SubjectName&gt;
     CN=My Name,O=Test Certificates Inc.,C=US
    &lt;/X509SubjectName&gt;
    &lt;X509Certificate&gt;
     MIIB9zCCAWCgAwIBAgIERZwdkzANBgkqhkiG9w0BAQUFADBAMQswCQYD
     VQQGEwJVUzEfMB0GA1UEChMWVGVzdCBDZXJ0aWZpY2F0ZXMgSW5jLjEQ
     MA4GA1UEAxMHTXkgTmFtZTAeFw0wNzAxMDMyMTE4MTFaFw0zMTA4MjUy
     ...
    &lt;/X509Certificate&gt;
   &lt;/X509Data&gt;
  &lt;/KeyInfo&gt;
 &lt;/Signature&gt;
&lt;/PurchaseOrder&gt;
</code></pre>

<p>I want to verify the Signature manually without using The XML Signature API.</p>

<p>I know how to recalculate in JAVA code the Digest Value for comparing with the value stored in DigestValue Element. </p>

<p>Now I need to complete the next steps for verifying the Signature validity.
I found in this article <a href=""https://www.w3.org/TR/xmldsig-core/#sec-SignatureValidation"" rel=""nofollow noreferrer"">3.2.2 Signature Validation</a> on how to do what I want but I don't understand any thing in step 2.</p>

<p>Could anyone help explain step 2 in Java.</p>
","","268","<java><xml><signature><public-key><checkvalidity>","0","","0","2017-12-14 17:20:23","","2","","5904701","","2017-12-14 17:20:23","2017-12-14 13:59:49",""
"53534454","How to work with elliptic curve SECP256K1 key in Azure Key Vault when the key is used also by a blockchain","<p>I'm wondering how to work with SECP256K1 keys within Azure Key Vault when at the same time the key is also required for account creation on a blockchain.</p>

<p><strong>WHAT HAS TO BE ACHIEVED</strong></p>

<ol>
<li>Generate SECP256K1 key pair</li>
<li>Use public key for account creation on a blockchain</li>
<li>Store private key to Key Vault and use it for signing purposes</li>
</ol>

<p><strong>ATTEMPT #1 - GENERATE OUTSIDE KEY VAULT AND IMPORT</strong></p>

<p>I have generated SECP256K1 key pair outside Key Vault. As a result I have private key and public key available as strings.
My idea was to import the private key to Key Vault with help of Azure SDK for.NET wia following piece of code (ECParameters used are from Microsoft.Azure.KeyVault.WebKey.ECParameters namespace):</p>

<pre><code>  //this part of code is taken from https://www.scottbrady91.com/C-Sharp/JWT-Signing-using-ECDSA-in-dotnet-Core
  var privateKeyBytes = Encoding.UTF8.GetBytes(privateKey);
  var privateKeyInt =
    new Org.BouncyCastle.Math.BigInteger(+1, privateKeyBytes);
  var parameters = SecNamedCurves.GetByName(""secp256k1"");
  var ecPoint = parameters.G.Multiply(privateKeyInt);
  var privateKeyX = ecPoint.Normalize().XCoord.ToBigInteger()
    .ToByteArrayUnsigned();
  var privateKeyY = ecPoint.Normalize().YCoord.ToBigInteger()
    .ToByteArrayUnsigned();

  //the following part is my code
  var ecParameters = new ECParameters();
  ecParameters.Curve = ""P-256K"";
  ecParameters.X = privateKeyX;
  ecParameters.Y = privateKeyY;
  ecParameters.D = privateKeyBytes;

  var key = new JsonWebKey(ecParameters);
  JsonWebKeyVerifier.Options options =
    JsonWebKeyVerifier.Options.DenyIncompatibleOperations
    | JsonWebKeyVerifier.Options.DenyExtraneousFields;
  string error = (string) null;

  JsonWebKeyVerifier.VerifyByKeyType(key, options, ref error);

  await client.ImportKeyWithHttpMessagesAsync(vaultBaseUri, name, key);
</code></pre>

<p>The resulting key for import looks like this (copied from Visual Studio variable view, maybe it's shortened):</p>

<pre><code>  {
    ""kty"": ""EC"",
    ""crv"": ""P-256K"",
    ""x"": ""vSUHj6deEhPI6QeILgfgf2I7VTgmiDon_5nsss560OA"",
    ""y"": ""DK8DnzEOv57arN6f4Wou-vXkty7uje0n2xTHgGAehp8"",
    ""d"": ""NUpoaEEzWTFVYXBKNWZuRWZNUkVxZkpKY29LWGdMcHpFUnVNQ2E2Wjd0YkNhY2NpQ3N5""
  }
</code></pre>

<p>Although JsonWebKeyVerifier returns no error and a call to key.IsValid() returns true, the call to Key Vault failed with HTTP 400 Bad Request. I have turn on logging on Key Vault instance and following log appears there (id, username, IP addresses and GUIDs are changed intentionally, I'm not sure what is confidential; I can provide them on demand):</p>

<pre><code>{
  ""time"": ""2018-11-28T16:28:05.2034585Z"",
  ""category"": ""AuditEvent"",
  ""operationName"": ""KeyImport"",
  ""resultType"": ""Success"",
  ""resultDescription"": ""EC key is not valid - cannot instantiate crypto service."",
  ""correlationId"": ""5682a894-0150-484f-a398-6922efed4458"",
  ""callerIpAddress"": ""XX.XX.XXX.XXX"",
  ""identity"": {
    ""claim"": {
      ""http://schemas.microsoft.com/identity/claims/objectidentifier"": ""00000000-0000-0000-0000-000000000000"",
      ""appid"": ""00000000-0000-0000-0000-000000000000"",
      ""http://schemas.microsoft.com/identity/claims/scope"": ""user_impersonation"",
      ""http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn"": ""xxx.xxxxxx@xxxxxxxx.com"",
      ""ipaddr"": ""XX.XX.XXX.XXX"",
      ""http://schemas.microsoft.com/claims/authnmethodsreferences"": ""pwd""
    }
  },
  ""properties"": {
    ""id"": ""https://xxxxxxx.vault.azure.net/keys/testJK1"",
    ""clientInfo"": ""FxVersion/4.6.27019.06 OSName/Windows OSVersion/Microsoft.Windows.10.0.17134. Microsoft.Azure.KeyVault.KeyVaultClient/3.0.2.0"",
    ""httpStatusCode"": 400,
    ""requestUri"": ""https://xxxxxxxx.vault.azure.net/keys/testJK1?api-version=7.0"",
    ""isAccessPolicyMatch"": true,
    ""keyProperties"": {
      ""type"": ""EC""
    }
  },
  ""resourceId"": ""/SUBSCRIPTIONS/00000000-0000-0000-0000-000000000000/RESOURCEGROUPS/XXXXXX-RG/PROVIDERS/MICROSOFT.KEYVAULT/VAULTS/XXXXXXX"",
  ""operationVersion"": ""7.0"",
  ""resultSignature"": ""Bad Request"",
  ""durationMs"": ""259""
}
</code></pre>

<p><strong>ATTEMPT #2 - GENERATE WITHIN KEY VAULT AND EXPORT</strong></p>

<p>Even if I'm able to generate SECP256K1 EC key within Key Vault, I didn't find how to export its public key part.</p>

<p><em>EDIT 11/23/2018</em></p>

<p>GetKey method on Azure Key Vault returns JsonWebKey that contains X and Y coordinates.</p>

<p><strong>QUESTIONS</strong></p>

<ol>
<li>Is it possible to import SECP256K1 key via Azure SDK for .NET? If yes, could you provide me a link to working example?</li>
<li>Am I doing something wrong/insufficent in my code during attempt to import the key to Key Vault?</li>
<li>Is it possible to export SECP256K1 public key from Key Vault?</li>
<li>Do you have any other idea how to accomplish the achievements described herein before?</li>
</ol>

<p><em>EDIT 11/29/2018</em></p>

<ol start=""5"">
<li>Is there a way how to construct public key from X and Y coordinates (ideally in .NET world)?</li>
</ol>

<p>Thanks in advance.</p>

<p>Regards,
Jan</p>

<p>PS: I originally posted this question on <a href=""https://social.msdn.microsoft.com/Forums/azure/en-US/3ba8cbcc-59a7-4adc-ab69-950f71cc4c8d/how-to-work-with-elliptic-curve-secp256k1-key-used-by-a-blockchain?forum=AzureKeyVault"" rel=""nofollow noreferrer"">Azure Key Vault blog</a>, but here is probably much broader audience. I'll link both sources once it will be answered,</p>
","","263","<blockchain><private-key><public-key><azure-keyvault><elliptic-curve>","1","","0","2018-11-29 14:42:49","","4","1","2281580","","2018-11-29 14:42:49","2018-11-29 08:12:49",""
"36595148","Amazon Linux AMI ec2 instance Permission denied (Public key)","<p>I have a recurring problem with one instance in AWS.</p>

<p>The problem is as follows:</p>

<p>The instance is an Amazon Linux AMI, that contains a Tomcat 6 Server and also has an SFTP connection enabled.</p>

<p>We can connect via ssh without any problem, but suddenly without any technical intervention we stop being able to connect with ssh. The Tomcat is still available and the sftp connection is still on.</p>

<p>This problem has already happened sometimes and now is happening more frequently and the post in AWS Forums resolve nothing.</p>

<p>The ssh traces are these:</p>

<pre><code>OpenSSH_7.1p2, OpenSSL 1.0.1g 7 Apr 2014
debug1: Reading configuration data /etc/ssh_config
debug1: Connecting to xxx.xxx.xxx.xxx [xxx.xxx.xxx.xxx] port 22.
debug1: Connection established.
debug1: key_load_public: No such file or directory
debug1: identity file xxxxxxxxxx.pem type -1
debug1: key_load_public: No such file or directory
debug1: identity file xxxxxxxxxx.pem-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_7.1
debug1: Remote protocol version 2.0, remote software version OpenSSH_6.2
debug1: match: OpenSSH_6.2 pat OpenSSH* compat 0x04000000
debug1: Authenticating to xxx.xxx.xxx.xxx:22 as 'ec2-user'
debug1: SSH2_MSG_KEXINIT sent
debug1: SSH2_MSG_KEXINIT received
debug1: kex: server-&gt;client aes128-ctr hmac-md5 zlib@openssh.com
debug1: kex: client-&gt;server aes128-ctr hmac-md5 zlib@openssh.com
debug1: sending SSH2_MSG_KEX_ECDH_INIT
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug1: Server host key: ssh-rsa     SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
debug1: Host 'xxx.xxx.xxx.xxx' is known and matches the RSA host key.
debug1: Found key in /home/mobaxterm/.ssh/known_hosts:21
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey
debug1: Next authentication method: publickey
debug1: Trying private key: xxxxxxxxx.pem
debug1: Authentications that can continue: publickey
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>The ssh configuration hasn't changed, the .pem file hasn't changed, the IP hasn't changed. We have tested it from different devices and the result is the same. We use the ec2-user properly.</p>

<p>Terminal, Moba Xterm, Jenkins, Putty, Pac Manager can't connect via ssh.</p>

<p>We have the same configuration is other instances and this is the only one that suffers this issue.</p>

<p>The instance is a r3.xlarge and it is located in us-east-1c, it is linked with a static ip.</p>

<p>Thanks a lot.</p>
","<p>I don't know why, but there is something that is deleting the ec2-user's authorized_keys file (<em>/home/ec2-user/.ssh/authorized_keys</em>). If you have a copy of this file and create it again in the original instance the problem will be solved. </p>

<p>Now I only need to know why this file was deleted, and how it happened.</p>
","254","<linux><amazon-web-services><ssh><amazon-ec2><public-key>","1","0","1","2016-05-11 14:16:38","","3","","","","","2016-04-13 10:07:37",""
"10596381","Cannot get SecKeyRef from .der file was MD5 signature","<p>I am trying to get SecKeyRef from a given .der file, I have researched and found some useful code, but SecCertificateCreateWithData method always return nil, and I guess that the root cause is the .der file was MD5 signature, because I have tried to create a new key using openssl without MD5 or SHA signature then I could import the key into KeyChain and get SecKeyRef successfully.</p>

<p>So anyone has experience on this please help me how to solve this, thanks in advance. </p>
","","243","<objective-c><md5><public-key><der>","1","","0","2012-05-15 07:51:46","","4","","","","","2012-05-15 07:51:46",""
"31721916","SSH connect with key","<p>I am trying to connect (to localhost now just for test purpose) using public/private key pair but I am unsuccesful at the moment.</p>

<p>Here is what i have done so far:</p>

<ol>
<li><code>ssh-keygen -t rsa</code> 
(no passphrase and store the key in <code>id_rsa</code> (private) and <code>id_rsa.pub</code> (public)</li>
<li><p>Set permissions</p>

<pre><code>chmod 700 $HOME/.ssh
chmod 600 $HOME/.ssh/id_rsa*
</code></pre></li>
<li><p>Copied <code>id_rsa.pub</code> content to <code>authorized_keys</code> and added permission <code>chmod 600</code></p></li>
</ol>

<p>Now when I try to log in with <code>ssh username@localhost</code> it still asks me for a password. </p>

<p>Am I doing something wrong?</p>

<p>The system i work on is Scientific Linux 6.4 (Carbon)</p>
","<p>You should check your system's log.</p>

<p>Let me show you an example, if I've my home directory with a <code>0777</code> mask, <code>sshd</code> will refuse to log me and I can find why in the <code>/var/log/auth.log</code> file (I'm on an Ubuntu 15.04 workstation):</p>

<pre><code>Jul 30 13:14:04 hostname sshd[16232]: Authentication refused: bad ownership or modes for directory /home/max
Jul 30 13:14:05 hostname sshd[16232]: Connection closed by 127.0.0.1 [preauth]
</code></pre>

<p>You should specify your Operating System in order to have a more focused answer.</p>
","241","<authentication><ssh><private-key><public-key>","0","0","1","2015-07-30 11:57:43","","1","0","4846578","","2015-07-30 11:57:43","2015-07-30 10:57:39",""
"30681864","Error while Adding my ssh key to my github account","<p>I'm new to git hub. Need help regarding generating and adding my ssh key to my GIT account from GIT shell on windows. could not find any question regarding the issue I'm having. So my problem is- 
I've completed till step 3 of <a href=""https://help.github.com/articles/generating-ssh-keys/"" rel=""nofollow noreferrer"">github help</a> . </p>

<p>But while executing the step 4 I'm getting the following errors.</p>

<pre><code>C:\Users\ashigope\Documents\GitHub&gt; clip &lt; ~/.ssh/id_rsa.pub
At line:1 char:6
clip &lt; ~/.ssh/id_rsa.pub
+      ~
The '&lt;' operator is reserved for future use.
At line:1 char:6
+ clip &lt; ~/.ssh/id_rsa.pub
+      ~
+ CategoryInfo: ParserError: (:) [], ParentContainsErrorRecordException
+ FullyQualifiedErrorId : RedirectionNotSupported*
</code></pre>

<p><img src=""https://i.stack.imgur.com/X4f5I.jpg"" alt=""enter image description here""></p>

<p>Kindly suggest me what should be done. Thanks in Advance. </p>
","<p>Simply follow those steps and you will set up your ssh key in no time:</p>

<ul>
<li><p>Generate a new ssh key (or skip this step if you already have a key)<br>
<code>ssh-keygen -t -rsa -C ""your@email""</code></p></li>
<li><p>Once you have your key set in <code>home/.ssh</code> directory (or <code>Users/&lt;your user&gt;.ssh</code> under windows), open it and copy the content</p></li>
</ul>

<hr>

<h3>How to add sh key to github account?</h3>

<ul>
<li>Login to github account</li>
<li>Click on the rancher on the top right (Settings)<br>
<img src=""https://i.stack.imgur.com/1MiwF.png"" alt=""github account settigns""></li>
<li>Click on the <code>SSH keys</code><br>
<img src=""https://i.stack.imgur.com/6TKSm.png"" alt=""ssh key section""></li>
<li>Click on the <code>Add ssh key</code><br>
<img src=""https://i.stack.imgur.com/jYpnz.png"" alt=""Add ssh key""></li>
<li>Paste your key and save</li>
</ul>

<p>Now you all set to go :-)</p>
","240","<git><github><ssh><public-key>","0","0","1","2017-03-10 19:43:06","","4","","6850771","","2017-03-10 19:43:06","2015-06-06 10:42:00",""
"4475415","Public key cryptography with user-chosen passwords?","<p>The whole point is designing a simple system where users are able to send encrypted messages between them (with support from a server).</p>

<p>In this scenario, <strong>clients have no local storage</strong>, so I'm forced to use passwords that users will be able to choose, remember and type when needed. <em>(I know this weakens the whole system but this is a hard requirement)</em></p>

<p>Another requirement is that <strong>the server cannot store cleartext private keys</strong> or any other data which can be used to decrypt messages <em>(eg: only the user can read encrypted messages, server admins should not be able to)</em>.</p>

<p>My approach would be to generate an asymmetric keypair on the client, publish public key on the server along with an encrypted copy of the private key (encrypted with the user password).
Users can then send encrypted messages to other users, using the recipient published public key; when a user needs to decrypt a message, his (encrypted) private key is fetched on the client from the server, decrypted with the password provided by the user and then used to decrypt messages.</p>

<p>Does this make any sense? Is there any flaw in this system design? (apart from the weakness derived from users choosing short or bad passwords)
Is this approach already used in similar scenarios?</p>

<p>Thank you :)</p>
","<p>As described, the scheme seems reasonable in that it should allow someone to send another person a message that only the recipient can read.  There are some items that come to mind that you may have already thought about but left out for brevity:</p>

<ul>
<li>When encrypting the private key, use something like PBKDF2 with salt and some fairly large number it iterations.</li>
<li>This is probably implied, but rather than encrypt with the public key, it probably makes sense to generate a random key (e.g., 32-bytes of random data if using, for example, AES-256). Encrypt the message with that key, encrypt the key with the public key, and send both pieces.</li>
<li>As described, there is no identification of the sender.  It allows purely anonymous messages to be sent. This might be intended, but if not, then some kind of identification/authentication would be necessary.</li>
<li>Somewhat similar to the previous entry, no message authentication is described. The attacker could change the encrypted message and the recipient would not be able to tell that it was changed.  Although, if it is a text message, it would be pretty clear that it had been modified, because it would be just garbled text. There are some types of data, though, that might not be so easy to tell if it had been modified.</li>
</ul>
","234","<security><password-protection><public-key><public-key-encryption>","6","1","4","2010-12-18 08:16:02","4475818","2","1","","","","2010-12-17 22:46:02",""
"4475415","Public key cryptography with user-chosen passwords?","<p>The whole point is designing a simple system where users are able to send encrypted messages between them (with support from a server).</p>

<p>In this scenario, <strong>clients have no local storage</strong>, so I'm forced to use passwords that users will be able to choose, remember and type when needed. <em>(I know this weakens the whole system but this is a hard requirement)</em></p>

<p>Another requirement is that <strong>the server cannot store cleartext private keys</strong> or any other data which can be used to decrypt messages <em>(eg: only the user can read encrypted messages, server admins should not be able to)</em>.</p>

<p>My approach would be to generate an asymmetric keypair on the client, publish public key on the server along with an encrypted copy of the private key (encrypted with the user password).
Users can then send encrypted messages to other users, using the recipient published public key; when a user needs to decrypt a message, his (encrypted) private key is fetched on the client from the server, decrypted with the password provided by the user and then used to decrypt messages.</p>

<p>Does this make any sense? Is there any flaw in this system design? (apart from the weakness derived from users choosing short or bad passwords)
Is this approach already used in similar scenarios?</p>

<p>Thank you :)</p>
","<p>If I understand correctly, you want to create a system where two users can initiate private communication through a server that they do not trust.</p>

<p>This won't work.</p>

<p>In the scenario you lay out, the server can generate its own key pair, and publish its public key in place of the users'. When a user encrypts a message, intending it for their partner, they can't detect that the server has substituted its public key. The server decrypts the message, presents it to the server admins, and re-encrypts it (or some new message that they fabricated) with the real partner public key, and forwards it to the destination.</p>

<p>What's missing here is a certificate authority. This is a trusted third party that digitally signs a binding between a public key and a user name. This binding is called a certificate. This way, when the server presents a public key to a client to use for encryption, the client can use the CA's public key to verify the certificate, and be assured that the public key they are about to encrypt with belongs to the intended recipient, and not an attacker.</p>

<p>The users have to trust the CA, which might be more palatable than trusting the server administrators. But, there must also be a tamper-proof way to store the CA certificate. In practice, this is often done using a password-based MAC (message authentication code). Or, the CA could be digitally signed with the user's private key (never seen this done, but it would work). But the tricky part would be getting the CA certificate from a trusted source, bypassing the untrustworthy server.</p>

<p>As far as encrypting the private key with the password, that is done very often, and is as safe as the password you choose.</p>

<p>Alternatively, if the users can share a secret with each other out-of-band, you don't need public key encryption. The client could encrypt the shared secret with a user-selected password, and store the cipher text on the server.</p>
","234","<security><password-protection><public-key><public-key-encryption>","6","2","4","2010-12-18 08:16:02","4475818","2","1","","","","2010-12-17 22:46:02",""
"4475415","Public key cryptography with user-chosen passwords?","<p>The whole point is designing a simple system where users are able to send encrypted messages between them (with support from a server).</p>

<p>In this scenario, <strong>clients have no local storage</strong>, so I'm forced to use passwords that users will be able to choose, remember and type when needed. <em>(I know this weakens the whole system but this is a hard requirement)</em></p>

<p>Another requirement is that <strong>the server cannot store cleartext private keys</strong> or any other data which can be used to decrypt messages <em>(eg: only the user can read encrypted messages, server admins should not be able to)</em>.</p>

<p>My approach would be to generate an asymmetric keypair on the client, publish public key on the server along with an encrypted copy of the private key (encrypted with the user password).
Users can then send encrypted messages to other users, using the recipient published public key; when a user needs to decrypt a message, his (encrypted) private key is fetched on the client from the server, decrypted with the password provided by the user and then used to decrypt messages.</p>

<p>Does this make any sense? Is there any flaw in this system design? (apart from the weakness derived from users choosing short or bad passwords)
Is this approach already used in similar scenarios?</p>

<p>Thank you :)</p>
","<p>This sounds something like what hushmail did. However, there was a major problem in that, since they had the private key of the users (encrypted) they just had to push down a hacked java applet which would transmit the user's password to the server (which they did).</p>

<p>A much better solution is to avoid having that private key on the server at all. With the requirement of no local storage, that's out.</p>

<p>Why not use symmetric encryption via a pre-shared password? It can be done without storage on the client side. I believe this is what @erickson was saying in his last paragraph.</p>
","234","<security><password-protection><public-key><public-key-encryption>","6","1","4","2010-12-18 08:16:02","4475818","2","1","","","","2010-12-17 22:46:02",""
"4475415","Public key cryptography with user-chosen passwords?","<p>The whole point is designing a simple system where users are able to send encrypted messages between them (with support from a server).</p>

<p>In this scenario, <strong>clients have no local storage</strong>, so I'm forced to use passwords that users will be able to choose, remember and type when needed. <em>(I know this weakens the whole system but this is a hard requirement)</em></p>

<p>Another requirement is that <strong>the server cannot store cleartext private keys</strong> or any other data which can be used to decrypt messages <em>(eg: only the user can read encrypted messages, server admins should not be able to)</em>.</p>

<p>My approach would be to generate an asymmetric keypair on the client, publish public key on the server along with an encrypted copy of the private key (encrypted with the user password).
Users can then send encrypted messages to other users, using the recipient published public key; when a user needs to decrypt a message, his (encrypted) private key is fetched on the client from the server, decrypted with the password provided by the user and then used to decrypt messages.</p>

<p>Does this make any sense? Is there any flaw in this system design? (apart from the weakness derived from users choosing short or bad passwords)
Is this approach already used in similar scenarios?</p>

<p>Thank you :)</p>
","<p>The major problem is that if the decryption code is downloaded from the server, one (either server admin or a hacker that has got to the server) can replace this code. The user on the client side should trust the server, but he has no way to verify the server in order to trust it. </p>
","234","<security><password-protection><public-key><public-key-encryption>","6","1","4","2010-12-18 08:16:02","4475818","2","1","","","","2010-12-17 22:46:02",""
"39450539","How to generate random keys in C# and use them in JSEncrypt","<p>I have to do data encryption on client side using <strong>public key</strong> and decryption on server side using <strong>private key</strong> in an asymmetric way, but I was unable to get which way to generate keys in <strong>C#</strong> and use them in <strong>JSEncrypt</strong>. Any another algorithms is the for supporting my scenario? </p>
","","230","<c#><encryption><rsa><public-key><jsencrypt>","0","","0","2016-09-12 18:06:50","","2","1","1816580","","2016-09-12 18:06:50","2016-09-12 12:38:51",""
"50132876","Swift get public RSA key from private key?","<p>I use this RSA library for swift. <a href=""https://github.com/TakeScoop/SwiftyRSA"" rel=""nofollow noreferrer"">https://github.com/TakeScoop/SwiftyRSA</a></p>

<p>Is there any way to export public RSA key from private key ?</p>
","<p>I would just use the internal api calls, there is plenty of sample code and it’s literally 10 lines of code to create keys, obtain them from key chain and encrypt/decrypt data.</p>

<p>If you look in the library read me file, it tells you how to obtain a public key and then export it into various formats....</p>
","230","<swift><rsa><public-key>","0","0","1","2018-05-02 11:19:01","50133412","0","","","","","2018-05-02 10:52:04",""
"24563677","Best practice for using ssh key pair with different groups?","<p>I'm doing some work with a company outside of my school, and they need my public ssh key.</p>

<p>I already have my public ssh key generated for use with github. I set this up some time ago, and if I open the id_rsa.pub file, I see it has my school email address embedded inside.</p>

<p>Now I'm wondering if it's typical to reuse this one key with every company you work with, or do you generate a new one for every company. I guess I have a few considerations:</p>

<ol>
<li>If I use the same public key with each company, and my private key were compromised, I'd need to give each company a new public key.</li>
<li>My school email address appears in my current public key. I'm not sure why this is actually, but I don't think your email has anything to do with the key (or does it?).</li>
<li>If I did generate a different key pair for each company I work with, I'm not sure how I'd practically switch between them when working with different companies (say via github).</li>
</ol>

<p>My understanding is a bit weak here, any clarifications would be really helpful.</p>

<p>Thanks</p>
","<p>Your question has been asked (and well-answered!) on security.stackexchange.com: <a href=""https://security.stackexchange.com/questions/10203/reusing-private-public-keys"">https://security.stackexchange.com/questions/10203/reusing-private-public-keys</a></p>

<p>The long and short of it is that yes, you may re-use your public key for multiple accounts, but your first consideration is a little underweight; if your private key were compromised, <strong>all of your accounts would be compromised</strong>. If the various accounts have different expectations of security, you might want to consider using different key pairs.</p>

<p>Your email address associated with your key is for identification purposes. It has to do with the key in that it is IN the key, but it does not impact the functionality of the key.</p>

<p>If you did generate a different key pair, you can tie different keys to different hosts via ~/.ssh/config. Instructions to do should be pretty easy to find.</p>
","230","<security><ssh><public-key>","4","2","1","2014-07-04 01:47:00","24565626","0","2","","","","2014-07-03 21:38:27",""
"8300366","How to convert from X.509v2 to X.509v3 key encryption","<p>Who knows how to convert PEM encoded X.509 version 2 certificate with RSA public key to X.509 version 3?</p>
","<p>As far as I know, you cannot change a certificate once issued. You need to re-issue the certificate. The reason being that the certificate contents are hashed by the CA and the hash is encrypted by the CA's private key. If there is a change in the content of the certificate, the exisitng hash will no longer match the calculated hash making your certificate useless.</p>
","226","<encryption><public-key-encryption><public-key>","0","1","2","2011-11-28 22:59:51","8300632","1","","","","","2011-11-28 18:17:00",""
"8300366","How to convert from X.509v2 to X.509v3 key encryption","<p>Who knows how to convert PEM encoded X.509 version 2 certificate with RSA public key to X.509 version 3?</p>
","<p>Vikas is correct, you cannot convert an X.509 certificate as the signature on the certificate is linked to the DER representation of that particular certificate. Any change to the certificate changes its DER representation and thus breaks the signature. If you need a v3 certificate the only option is to issue a new certificate. The public key component only enables you to verify what key was used to sign the certificate, making a signature requires the private key component.</p>
","226","<encryption><public-key-encryption><public-key>","0","1","2","2011-11-28 22:59:51","8300632","1","","","","","2011-11-28 18:17:00",""
"40093741","Why requires SSH public key authentication the passphrase again after 2k sessions?","<p>I recently started the replacement of my backup storage. The Mac Mini with a WD MyBook is being replaced by a Synology DiskStation. On of the backup scripts i have been using to synchronize my external HDD with VMs stopped working properly after relocation the backup destination to the Synology. The script basically starts a rsync process in a SSH session per file. Details of the script can be found here; <a href=""http://www.reddipped.com/2016/07/speeding-vm-backups-using-rsync/"" rel=""nofollow"">http://www.reddipped.com/2016/07/speeding-vm-backups-using-rsync/</a></p>

<p>To be able to run the script without having to type in a password for each SSH session, public key authentication has been configured.</p>

<h1>Client configuration (Mac OS X Sierra)</h1>

<ul>
<li>Create the private/public keypair </li>
</ul>



<pre><code>    ssh-keygen -t rsa -f ~/.ssh/id_rsa -C ""rsync""
</code></pre>

<ul>
<li><p>Fill in random passphrase, e.g. ""rsync protocol""</p></li>
<li><p>Copy the public key to the users home directory on the synology</p>

<pre><code>ssh Peter\ van\ Nes@newyork 'mkdir ~/.ssh'
cat ~/.ssh/id_rsa.pub | ssh Peter\ van\ Nes@newyork 'cat - &gt;&gt; ~/.ssh/authorized_keys'
ssh Peter\ van\ Nes@newyork 'chmod 644 .ssh/authorized_keys'
ssh Peter\ van\ Nes@newyork 'chmod 755 ~ ~/.ssh' 
</code></pre></li>
</ul>

<h2>Server (Synology)</h2>

<ul>
<li><p>Open SSH session to Synology</p>

<pre><code>ssh ""Peter van Nes""@newyork
</code></pre></li>
<li><p>Edit sshd_config</p>

<pre><code>vi /etc/ssh/sshd_config   
# Enable RSAAuthentication yes     
# Enable PubkeyAuthentication yes
# Enable AuthorizedKeysFile .ssh/authorized_keys
# Enable ChallengeResponseAuthentication yes
# Add MaxSessions 50
# Add MaxStartups 50:10:100
</code></pre></li>
<li><p>Restart the services</p>

<pre><code># restart ssh-shell
synoservicectl --restart ssh-shell
# restart rsync daemon
synoservicectl --restart rsyncd   
</code></pre></li>
</ul>

<p>After completing these steps i am able to logon using a public key successfully. When running the script it initially runs as expected, only after a few thousand files the passphrase for the key has to be entered again.</p>

<p>I did break the issue down to this little script which reproduces the issue for me.</p>

<pre><code>#!/bin/bash

sessions=0
while true
do
    sessions=$(($sessions + 1))
    echo ""Session "" $sessions
    ssh peter@newyork -x ""ls -al""
done 
</code></pre>

<p>After a few thousand sequential SSH sessions the passphrase for the public key is requested again. The sequential successful number of sessions differs per run. This can be 2102 but also 5000+.</p>

<pre><code>Session  2101
total 4
drwxr-xr-x  1 peter users   24 Oct 15 12:46 .
drwxrwxrwx+ 1 root  root    92 Oct 16 22:29 ..
drwxr-xr-x  1 peter users   30 Oct 15 12:46 .ssh
-rwxrwxrwx+ 1 peter users 1239 Oct 15 12:46 .viminfo
Session  2102
total 4
drwxr-xr-x  1 peter users   24 Oct 15 12:46 .
drwxrwxrwx+ 1 root  root    92 Oct 16 22:29 ..
drwxr-xr-x  1 peter users   30 Oct 15 12:46 .ssh
-rwxrwxrwx+ 1 peter users 1239 Oct 15 12:46 .viminfo
Session  2103
Enter passphrase for key '/Users/petervannes/.ssh/id_rsa': 
</code></pre>

<p>When running ssh with the -vvv argument does not give any hints, also the auth.log on the Synology does report any authentications errors. </p>

<p>Any idea how to debug or fix this?</p>
","<p>Fixed it by adding the certificates to the keychain using <code>ssh-add -K</code>.</p>

<pre><code>#!/bin/bash

sessions=0

ssh-add -K

while true
do
    sessions=$(($sessions + 1))
    echo ""Session "" $sessions
    ssh peter@newyork -x ""ls -al""
done 
</code></pre>
","225","<ssh><public-key><passphrase>","0","0","1","2016-10-24 18:43:47","","0","","","","","2016-10-17 19:00:35",""
"37966918","Certificate or Public key pinning slows down Web service response in Android","<p>When I perform pinning (certificate / public key) on web services, in Android. I see that the time taken for the app to receive a response from the web service is close to double the time required without pinning.</p>

<p>This is because, the mechanism of pinning first establishes a connection to retrieve the certificates and validate them, and then goes for a second connection (not sure) to retrieve the response, from the server.</p>

<p>NOTE - In Android, it is advisable to use a connection on demand basis rather than a continuous connection to save power and bandwidth, on the device for the end user (unless required)</p>

<p>I would like to know if there is a way to optimise this sequential connections calls?</p>

<p>Example - <a href=""https://github.com/jiahaoliuliu/pubKeyPinningInAndroid/blob/master/app/src/main/java/org/owasp/pubkeypin/PubKeyManager.java"" rel=""nofollow"">https://github.com/jiahaoliuliu/pubKeyPinningInAndroid/blob/master/app/src/main/java/org/owasp/pubkeypin/PubKeyManager.java</a></p>

<p>Thanks in advance.</p>
","","220","<android><ssl><certificate><public-key><pinning>","1","","0","2016-06-22 11:52:48","","2","1","5763040","","2016-06-22 11:52:48","2016-06-22 11:37:59",""
"51088085","C# Store Public-Key X.509 encoded key in ANS.1","<p>i am trying to implement an API. (<a href=""https://www.loxone.com/dede/wp-content/uploads/sites/2/2016/08/0903_Communicating-with-the-Miniserver.pdf"" rel=""nofollow noreferrer"">https://www.loxone.com/dede/wp-content/uploads/sites/2/2016/08/0903_Communicating-with-the-Miniserver.pdf</a>)</p>

<p>When you go to Page 5 you will see under 2.b) that I need to store a public key in Format: X.509 encoded key in ANS.1.</p>

<p>The problem is I have no idea how to do this in C#...</p>

<p>Can anyone please help me with that problem :)</p>

<p>Thanks in advance!</p>

<p>Here is an example for the publicKey that I get:</p>

<p>-----BEGIN CERTIFICATE-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC393RoCVFixg3cZicByw05GYqlIkmqfx1lylJqBaF7BMI/FffD5BBoFpFurj4N1pDdMF/QhBEj1Pb3XGOkrHFCinYc0lCMbSjreE+QPjmnWnZeaPd3mtBfdcTSF6hYH0regFU8nvFVgLsoBUCMjuhfsvuaW4sLylU6KhZ9hCqVQwIDAQAB-----END CERTIFICATE-----</p>
","<p>I think you need to export this public key as X.509 encoded as ANS.1 which can be a .pem file.</p>

<p>From <a href=""https://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file/9717#9717"">https://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file/9717#9717</a> :</p>

<p>PEM on it's own isn't a certificate, it's just a way of encoding data. X.509 certificates are one type of data that is commonly encoded using PEM.</p>

<p>PEM is a X.509 certificate (whose structure is defined using ASN.1), encoded using the ASN.1 DER (distinguished encoding rules), then run through Base64 encoding and stuck between plain-text anchor lines (BEGIN CERTIFICATE and END CERTIFICATE).</p>

<p>You can use openssl to make a .pem file which is ANS.1 compliant.</p>

<pre><code>openssl req -new -x509 -days 365 -nodes -out ./cert.pem -keyout ./cert.pem
</code></pre>
","220","<c#><public-key-encryption><x509><public-key>","0","0","2","2018-06-28 18:00:52","","2","","","","","2018-06-28 16:57:55",""
"51088085","C# Store Public-Key X.509 encoded key in ANS.1","<p>i am trying to implement an API. (<a href=""https://www.loxone.com/dede/wp-content/uploads/sites/2/2016/08/0903_Communicating-with-the-Miniserver.pdf"" rel=""nofollow noreferrer"">https://www.loxone.com/dede/wp-content/uploads/sites/2/2016/08/0903_Communicating-with-the-Miniserver.pdf</a>)</p>

<p>When you go to Page 5 you will see under 2.b) that I need to store a public key in Format: X.509 encoded key in ANS.1.</p>

<p>The problem is I have no idea how to do this in C#...</p>

<p>Can anyone please help me with that problem :)</p>

<p>Thanks in advance!</p>

<p>Here is an example for the publicKey that I get:</p>

<p>-----BEGIN CERTIFICATE-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC393RoCVFixg3cZicByw05GYqlIkmqfx1lylJqBaF7BMI/FffD5BBoFpFurj4N1pDdMF/QhBEj1Pb3XGOkrHFCinYc0lCMbSjreE+QPjmnWnZeaPd3mtBfdcTSF6hYH0regFU8nvFVgLsoBUCMjuhfsvuaW4sLylU6KhZ9hCqVQwIDAQAB-----END CERTIFICATE-----</p>
","<p>Presumably, by ""ANS.1"" they meant ""ASN.1"" (Abstract Syntax Notation 1), and by ""ASN.1"" they meant ""DER"" (Distinguished Encoding Rules for Abstract Syntax Notation 1).</p>

<p>To convert your current PEM certificate into a ""DER"" certificate you either a) <code>openssl x509 -in cert.pem -out cert.der -outform der</code> or b) read the base64 string between ""-----BEGIN CERTIFICATE-----"" and ""-----END CERTIFICATE-----"" and convert it to bytes (e.g. <code>Convert.FromBase64String</code>).</p>
","220","<c#><public-key-encryption><x509><public-key>","0","0","2","2018-06-28 18:00:52","","2","","","","","2018-06-28 16:57:55",""
"40494738","Generating non-compatible certificate with a CA","<p>I'm using this stretch of code to create a request, which will be sent to validation in my CA, but when arrives there is denied:</p>

<p>Using:</p>

<ul>
<li>.NET framework 3.5</li>
<li>Is a Dll project</li>
<li>IIS 6.0</li>
<li>CertEnroll.dll</li>
<li><p>There is no possibility to update technology</p>

<pre><code>[ComVisible(true), Description(""Create User Key Pair"")]
public String CreateBase64KeyPair(string CN)
{
    string msg = string.Empty;

    try
    {
        CX509CertificateRequestCertificate objPkcs10 = (CX509CertificateRequestCertificate)Activator.CreateInstance(Type.GetTypeFromProgID(""X509Enrollment.CX509CertificateRequestCertificate""));
        IX509PrivateKey objPrivateKey = (IX509PrivateKey)Activator.CreateInstance(Type.GetTypeFromProgID(""X509Enrollment.CX509PrivateKey""));
        CCspInformation objCSP = (CCspInformation)Activator.CreateInstance(Type.GetTypeFromProgID(""X509Enrollment.CCspInformation""));
        CCspInformations objCSPs = (CCspInformations)Activator.CreateInstance(Type.GetTypeFromProgID(""X509Enrollment.CCspInformations""));
        CX500DistinguishedName objDN = (CX500DistinguishedName)Activator.CreateInstance(Type.GetTypeFromProgID(""X509Enrollment.CX500DistinguishedName""));
        CX509Enrollment objEnroll = (CX509Enrollment)Activator.CreateInstance(Type.GetTypeFromProgID(""X509Enrollment.CX509Enrollment""));
        CObjectIds objObjectIds = (CObjectIds)Activator.CreateInstance(Type.GetTypeFromProgID(""X509Enrollment.CObjectIds""));
        CObjectId objObjectId = (CObjectId)Activator.CreateInstance(Type.GetTypeFromProgID(""X509Enrollment.CObjectId""));
        CX509ExtensionKeyUsage objExtensionKeyUsage = (CX509ExtensionKeyUsage)Activator.CreateInstance(Type.GetTypeFromProgID(""X509Enrollment.CX509ExtensionKeyUsage""));
        CX509ExtensionEnhancedKeyUsage objX509ExtensionEnhancedKeyUsage = (CX509ExtensionEnhancedKeyUsage)Activator.CreateInstance(Type.GetTypeFromProgID(""X509Enrollment.CX509ExtensionEnhancedKeyUsage""));


        //  Initialize the csp object using the desired Cryptograhic Service Provider (CSP)
        objCSP.InitializeFromName(YPSIDCSP_NAME);
        //  Add this CSP object to the CSP collection object
        objCSPs.Add(objCSP);                
        //Provide key container name, key length and key spec to the private key object
        objPrivateKey.Length = 1024; //KEY_LEN_MY_DEFAULT
        objPrivateKey.ProviderType = X509ProviderType.XCN_PROV_RSA_FULL; //XEnroll.ProviderType=1
        objPrivateKey.KeySpec = X509KeySpec.XCN_AT_SIGNATURE; //XEnroll.KeySpec=AT_KEYEXCHANGE
        objPrivateKey.KeyUsage = X509PrivateKeyUsageFlags.XCN_NCRYPT_ALLOW_ALL_USAGES;
        objPrivateKey.ExportPolicy = X509PrivateKeyExportFlags.XCN_NCRYPT_ALLOW_EXPORT_FLAG;
        objPrivateKey.MachineContext = false;
        //  Provide the CSP collection object (in this case containing only 1 CSP object) to the private key object
        objPrivateKey.CspInformations = objCSPs;
        //  Create the actual key pair
        objPrivateKey.Create();

        //  Initialize the PKCS#10 certificate request object based on the private key.
        //  Using the context, indicate that this is a user certificate request and don’t provide a template name
        objPkcs10.InitializeFromPrivateKey(X509CertificateEnrollmentContext.ContextUser, objPrivateKey, string.Empty);

        // Key Usage Extension
        objExtensionKeyUsage.InitializeEncode(
            CERTENROLLLib.X509KeyUsageFlags.XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE |
            CERTENROLLLib.X509KeyUsageFlags.XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE |
            CERTENROLLLib.X509KeyUsageFlags.XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE|
            CERTENROLLLib.X509KeyUsageFlags.XCN_CERT_NON_REPUDIATION_KEY_USAGE
        );

        objPkcs10.X509Extensions.Add((CX509Extension)objExtensionKeyUsage);

        // Enhanced Key Usage Extension
        objObjectId.InitializeFromValue(""1.3.6.1.5.5.7.3.2""); // OID for Client Authentication usage

        objObjectIds.Add(objObjectId);

        objX509ExtensionEnhancedKeyUsage.InitializeEncode(objObjectIds);


        objPkcs10.X509Extensions.Add((CX509Extension)objX509ExtensionEnhancedKeyUsage);


        //  Encode the name in using the Distinguished Name object
        //TODO: TDSiS: Validar essa questão da CN
        objDN.Encode(""CN=""+ CN.Trim(), X500NameFlags.XCN_CERT_NAME_STR_NONE);

        //  Assing the subject name by using the Distinguished Name object initialized above
        objPkcs10.Subject = objDN;

        // Create enrollment request
        objEnroll.InitializeFromRequest(objPkcs10);

        return objEnroll.CreateRequest(EncodingType.XCN_CRYPT_STRING_BASE64);
    }
    catch (Exception ex)
    {
        return ex.Message;
    }
}
</code></pre></li>
</ul>

<p>any doubts about the specifications, just tell me.</p>

<p>Thank you in advance for help! :)</p>
","","217","<c#><x509><private-key><public-key><certenroll>","0","","0","2016-11-08 19:15:00","","4","","","","","2016-11-08 19:15:00",""
"54410942","Python, Encrypt a message with two different keys. (Crypto.PublicKey )","<p>I would like to use Python to encrypt a message with two different keys.
In this situation I am using a module called <code>Crypto.PublicKey</code>.
In the following code, I can do the encryption with only one key and it is working properly.
I have tried a lot of different ways but I cannot encrypt the message with two different public keys.
I would appreciate if anyone could help me with this issue. 
Many thanks</p>

<pre><code>from Crypto.PublicKey import RSA

# Creating the first public key and private key
key = RSA.generate(1024)
pubKey = key.publickey().exportKey('PEM')
privKey = key.exportKey('PEM')
key = RSA.importKey(pubKey)
key1 = RSA.importKey(privKey)

# Creating the Second public key 
key_2 = RSA.generate(1024)
pubKey_2 = key_2.publickey().exportKey('PEM')
key_2 = RSA.importKey(pubKey_2)

# Message to encrypt
msg = ""Message to encrypt""

# Encrypt message with only one public key
msg_encrypted = key.encrypt(msg.encode(),32)

###########################################
# Here I would like to encrypt the message with two different public key
# thus two person will have the chance two open the file with their own private key
###########################################

# Decrypt the message with the first or the second private key
msg_decrypted = key1.decrypt(msg_encrypted)

print (msg_decrypted.decode())
</code></pre>
","","216","<python><rsa><public-key>","1","","0","2019-01-28 22:53:45","","5","","1679849","","2019-01-28 22:53:45","2019-01-28 21:19:11",""
"2794815","Reading PGP key information","<p>can someone show a description of the information of what a pgp looks like if only the descriptions were there but not the actual information? something like (i dont remember if the values are correct)<strong>:</strong></p>

<blockquote>
  <p>packet-type[4 bits],
  total length in bytes[16 bits],
  packet version type [4 bits],
  creation-time[32 bits],
  encryption-algorithm[8 bits], ...,etc,etc</p>
</blockquote>

<p>ive tried to understand rfc4880, but its tedious and confusing. so far, i am think i have extracted the 4 i wrote above, but i cant seem to get the rest of the information out.</p>

<p>can anyone help? i know i can just find some pgp program, but the whole point of this is to allow me to learn how those programs work in the first place</p>
","<p>Read carefully section 4.2 of RFC 4880, there different packet formats, with different packet length encodings.</p>
","213","<public-key><openpgp><public-fields>","1","0","1","2010-08-24 09:14:19","","0","","","","","2010-05-08 16:39:36",""
"51237529","How to validate a signature signed with PKCS8 private key?","<p>I'm developing a program with Go language for validating signatures.</p>

<p>It receives parameters(public key, signature, plaintext)
and the signature is signed by user's private key in PKCS#8.</p>

<p>I tried to use the function VerifyPKCS1v15 in the package x509
but it didn't work for me.
I guess it may due to the function is oriented for signatures made by pkcs1 private keys.</p>

<p>can anybody help me?
I wanna know if there is any way to validate signatures using pkcs8 public key?</p>

<p>this is my code</p>

<p>func main() {
    var plainTest    = ""P0000000025300000100000000001000026720180705140842""
    var hashVal      = ""15b47c1d79b0be2aae36a05bcd8644af7bfe3dd4e0c23e2b78692fc900998fca""
    var signatureStr = ""WWFCZsD3BhakkCaLAcTPxMvd3Pom1Glhgcc+xhR7tIDBLvkVk/LtxV+2nHw6b9u0Dcla8U4vUR7KH8zpUS7fNJD9yPDDWxH5PYiw4jQTjziiLHSUpuaGbf8N1Y2jKPXvzq1ZFaEAqCirLSmt5KyD3gQ22ysHgYA2vH44zzBApcxYXVbzLbCIGAR5aL/mvYt7uWsh4FX8dQ49v9SqIm/rRBGEbsscF4HpQApy8VqRGvq6EbwrPCfMcpwIbBHdDUR0mneaNg9GH4hozfMC08SZtAMGDk8J/NQway1FisrjpUeZfMe/hANDH1LmfrbThKDgB7WIpDryCXMTsBKjrqyArQ==""
    var pubKeyStr    = ""MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA17hWIujBfiqrd4o0JCEn6N1mzv94VM9LiVHoldvPRDEwCXbeoSebzZElvhkJsPl08o68g1BgRC4LpaGQDcVzwyFMs4DnXEDLapZQpTzkmXaSIYIRYER/U1OgdW5Cq2do/eTrylWdloqWuz5JL2vIr4GFycnEduYVSzFmAqucCvgGEFUxwFxtZ95BVsxfKOt7eFCJWoS0iR2/If5EMG9F6KG6DtDUWg6awN2mIbhm8fqxSF48ehCkPCN4s4YkcUlkmGYEetdBCxbaUh9/S960XjQBK3MXbLIJLgRLoEAdWJ2v6IjaEsw7dQAaMti3QOPr0x7TyHlS7rz/lyjlJjaXEQIDAQAB""</p>

<pre><code>publicKeyBase64, err := base64.StdEncoding.DecodeString(pubKeyStr)
if err != nil {
    fmt.Println(""base64 error : "" + err.Error())
}
fmt.Println(""publicKeyBase64: "")
fmt.Println(string(publicKeyBase64))

pub, err := x509.ParsePKIXPublicKey(publicKeyBase64)
if err != nil {
    fmt.Println(""failed to parse DER encoded public key: "" + err.Error())
}

switch pub := pub.(type) {
case *rsa.PublicKey:
    fmt.Println(""pub is of type RSA:"", pub)
case *dsa.PublicKey:
    fmt.Println(""pub is of type DSA:"", pub)
case *ecdsa.PublicKey:
    fmt.Println(""pub is of type ECDSA:"", pub)
default:
    panic(""unknown type of public key"")
}

publicKey, isRSAPublicKey := pub.(*rsa.PublicKey)
if !isRSAPublicKey {
    fmt.Println(""Public key parsed is not an RSA public key"")
}

signatureBytes, _ := hex.DecodeString(signatureStr)
fmt.Println(""signatureBytes : "" + string(signatureBytes))

validateBytes := sha256.Sum256([]byte(plainTest))
fmt.Println(""validateBytes : "" + string(validateBytes[:]))

err = rsa.VerifyPKCS1v15(publicKey, crypto.SHA256, validateBytes[:], signatureBytes)
if err != nil {
    fmt.Printf(""err: %v\n"", err)
} else {
    fmt.Printf(""ok"")
}
</code></pre>

<p>}</p>
","<p>I got the same problem, it turns out my publicKey is wrong.
I mean not the format, but the key is not paired with the private key.
I change to another pair of key, and the code worked.</p>
","210","<public-key><pkcs#8>","0","0","1","2019-03-04 08:18:30","","0","","9622383","","2018-07-09 05:35:18","2018-07-09 02:21:43",""
"25799940","google-php-api-client moving from localhost to remote","<p>So I built a website that uses <a href=""https://github.com/google/google-api-php-client"" rel=""nofollow"">google-api-php-client</a> to grab the access token and <a href=""https://github.com/asimlqt/php-google-spreadsheet-client"" rel=""nofollow"">php-google-spreadsheet-client</a> to pull in the data from a Google Spreadsheet I'm working with.  I recently got everything working on localhost, but as soon as I pushed everything to the server, <a href=""http://hackingedu.co"" rel=""nofollow"">I got the error</a>: . . . (<a href=""http://hackingedu.co"" rel=""nofollow"">click here for actual error</a>)</p>

<p><code>Warning: include_once(./libraries/google-api-php-client/src/Google/Client.php): failed to open stream: No such file or directory in /home2/alexcory/public_html/hackingedu/application/models/model.php</code></p>

<ul>
<li>I tried changing the path but that didn't seem to be doing anything at all.  </li>
<li>I checked all the dependencies of the library and I meet all of them.</li>
</ul>

<p>I'm stuck.</p>

<ul>
<li>I think it might be that I'm using an <code>Oauth Service Account</code> but I honestly don't know why this wouldn't work. I read somewhere that this was the way to do it and it's worked.</li>
<li>If it <em>is</em> because of that then maybe I need to be using an <code>Oauth Web Application</code>.  I tried this when first starting with the API but couldn't get it to work and stumbled across someone saying to use the <code>Oauth Service Account</code>.</li>
</ul>

<p><strong>Questions:</strong></p>

<p>If I do have to use the <code>Oauth Web Application</code>, how does the <code>Client Secret</code> in the Oauth Web Application differ from the <code>Public Key Fingerprints</code> in the Oauth Service Account as shown in <a href=""http://i.imgur.com/jotNuAn.png"" rel=""nofollow"">this image</a>?</p>

<p><strong>Also</strong></p>

<p>I tried using the following code in a <code>DELETEme.php</code> file that basically just has a <code>die('you win');</code> statement in it.</p>

<pre><code>if (file_exists('/DELETEme.php')) {
    die('/DELETEme.php');
} elseif (file_exists('../DELETEme.php')) {
    die(""../DELETEme.php"");
} elseif (file_exists('../../DELETEme.php')) {
    die('../../DELETEme.php');
} elseif (file_exists('../../../DELETEme.php')) {
    die('../../../DELETEme.php');
} else {
    die(""losing GRRRRR"");
}
</code></pre>

<p><strong>But I'm still getting</strong> <code>losing GRRRR</code>.</p>

<p>The file structure of model.php looks like:</p>

<pre><code>▶ home
. . . index.php
. . . DELETEme.php
. . . ▶ application
. . . . . . ▶ models
. . . . . . . . . model.php
. . . . . . ▶ controllers
. . . . . . . . . controller.php
. . . ▶ views
</code></pre>
","<p>When I run into <code>No such file or directory in...</code> errors, I usually add:</p>

<pre><code>die(get_include_path());
</code></pre>

<p>before the include (in your case, in <code>.../modal.php</code>) to see what paths PHP is running/configured with.</p>

<p>More than likely, you need to let PHP know where the <code>libraries</code> directory is.  You can do so by:</p>

<pre><code>set_include_path(get_include_path() . PATH_SEPARATOR . '/path/to/libraries');
</code></pre>

<p>or update the <code>include_path</code> directive in your php.ini config file.</p>

<p>Also, I see that you start your path with <code>./</code>.  This means ""in the current directory"".  So, does <code>libraries</code> exist in the same directory as <code>model.php</code>?  If not, then you want the path to just be <code>google-api-php-client/src/Google/Client.php</code> after you add the <code>/path/to/libraries</code> to your <code>include_path</code>.</p>
","208","<php><api><oauth><client><public-key>","0","1","1","2014-09-12 03:28:46","25800048","0","","2782583","","2014-09-12 03:28:46","2014-09-12 02:44:25",""
"13146459","Android Console Public Key","<p>OK, I'm confused!</p>

<p>Should I use the public key from ""Android Console"" when I create keystore for signing apk file?</p>

<p>Does this make sense ""If you have developer account, you can sign your application with DEVELOPER KEY. If you haven't acc you can use your OWN key""? What does it mean and what is ""developer key"".</p>

<p>BTW. I have developer acc.</p>
","<p>You dont need any specific key, simply create a new keyfile in eclipse by right clicking the project > Export signed application project, then create one</p>

<p>Note: from then on you must always use this key file to sign your app in order to upload and push updates to the play store</p>
","206","<android><publishing><public-key>","0","1","1","2012-10-30 19:53:21","13146647","0","","","","","2012-10-30 19:39:46",""
"49819211","java.security.spec.InvalidKeySpecException error in JAR not in IDE","<p>I wrote a RSA encryption code which worked fine on IDE but after making JAR file it gave error - <code>java.security.spec.InvalidKeySpecException</code></p>

<pre><code>private static PublicKey readPubKey()throws Exception{
    //reading public key from the path specified in the configuration file
    Config conf = new Config();
    InputStream keyfis = conf.getFileInputStream(publicKeyPath);
    byte[] encKey = new byte[keyfis.available()];
    keyfis.read(encKey);
    keyfis.close();

    // making the instance of Public key from the bytes of the Public Key
    X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(encKey);
    java.security.KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");

    //---------------problem in this line of code-----------
    PublicKey publicKey = keyFactory.generatePublic(pubKeySpec);
    return publicKey;
}
</code></pre>

<p>The problem is in line -</p>

<pre><code>PublicKey publicKey = keyFactory.generatePublic(pubKeySpec);
</code></pre>

<p>Full Stack Trace of Exception is -</p>

<pre><code>Exception Caught : java.security.spec.InvalidKeySpecException: 
java.security.InvalidKeyException: exponent is smaller than 3
java.security.spec.InvalidKeySpecException: 
java.security.InvalidKeyException: exponent is smaller than 3
at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:205)
at java.security.KeyFactory.generatePublic(KeyFactory.java:334)
at com.token.TokenVerifier.readPubKey(TokenVerifier.java:55)
at com.token.TokenVerifier.verify(TokenVerifier.java:77)
at com.test.Main.main(Main.java:28)
Caused by: java.security.InvalidKeyException: exponent is smaller than 3
at sun.security.rsa.RSAPublicKeyImpl.checkExponentRange(RSAPublicKeyImpl.java:99)
at sun.security.rsa.RSAPublicKeyImpl.&lt;init&gt;(RSAPublicKeyImpl.java:88)
at sun.security.rsa.RSAKeyFactory.generatePublic(RSAKeyFactory.java:298)
at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:201)
</code></pre>
","","205","<java><jar><rsa><public-key>","1","","0","2018-08-10 01:10:15","","1","","","","","2018-04-13 14:23:21",""
"34332513","nodejs keypair rsa module public key not working","<p>i am using <a href=""https://www.npmjs.com/package/keypair"" rel=""nofollow"">Keypair module</a></p>

<p>it is working fine created public and private key</p>

<p>My public key:</p>

<pre><code>    -----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEAh1Z9MSYMkQq1K8HzU4PAGl9GfEoM6TyXseHs7zxv9URyNycL6RWLvHlZzZhj
oskNCdQ5M7oB3Uahv/i3JCLLpqFtNGZdQdbnagkdM4kYNyDaQ4XCuZSQi7PZRZ3S8puz69Un
aHwmKSK0rkm8tWfSAtFPoaDcZ+CdS62745brUmcZM2mkhUUJYmtdys9f3iTtkJ108b6691b0
wLOP85SsjnngUju2di8tFngAHhon+eSl3DpeX7ZwgGsPr+7oKYdkM9tGlaOxTtCkdfnvVK5U
Z7efhvo1eGf2QSvPCuZnzkLg0zubKPEVhJ2wxEFFXl0/OmyoITklgJKF+0TRKmGtzQIDAQAB
-----END RSA PUBLIC KEY-----
</code></pre>

<p>i am using <a href=""https://github.com/travist/jsencrypt"" rel=""nofollow"">Jsencrypt</a></p>

<blockquote>
  <p>using that public key not working.. data not encrypted</p>
</blockquote>

<p>but <strong>jsencrypt</strong> generate public key is working fine. can you help me? </p>

<p>How to use my generate keypair RSA publickey in <strong>jsencrypt</strong>?</p>

<pre><code>&lt;!doctype html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;JavaScript RSA Encryption&lt;/title&gt;
    &lt;script src=""http://code.jquery.com/jquery-1.8.3.min.js""&gt;&lt;/script&gt;
    &lt;script src=""bin/jsencrypt.min.js""&gt;&lt;/script&gt;
    &lt;script type=""text/javascript""&gt;

      // Call this code when the page is done loading.
      $(function() {

        // Run a quick encryption/decryption when they click.
        $('#testme').click(function() {

          // Encrypt with the public key...
          var encrypt = new JSEncrypt();
          encrypt.setPublicKey($('#pubkey').val());
          var encrypted = encrypt.encrypt($('#input').val());

          // Decrypt with the private key...
          var decrypt = new JSEncrypt();
          decrypt.setPrivateKey($('#privkey').val());
          var uncrypted = decrypt.decrypt(encrypted);

          // Now a simple check to see if the round-trip worked.
          if (uncrypted == $('#input').val()) {
            alert('It works!!!');
          }
          else {
            alert('Something went wrong....');
          }
        });
      });
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;label for=""privkey""&gt;Private Key&lt;/label&gt;&lt;br/&gt;
    &lt;textarea id=""privkey"" rows=""15"" cols=""65""&gt;-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQDlOJu6TyygqxfWT7eLtGDwajtNFOb9I5XRb6khyfD1Yt3YiCgQ
WMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76xFxdU6jE0NQ+Z+zEdhUTooNR
aY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4gwQco1KRMDSmXSMkDwIDAQAB
AoGAfY9LpnuWK5Bs50UVep5c93SJdUi82u7yMx4iHFMc/Z2hfenfYEzu+57fI4fv
xTQ//5DbzRR/XKb8ulNv6+CHyPF31xk7YOBfkGI8qjLoq06V+FyBfDSwL8KbLyeH
m7KUZnLNQbk8yGLzB3iYKkRHlmUanQGaNMIJziWOkN+N9dECQQD0ONYRNZeuM8zd
8XJTSdcIX4a3gy3GGCJxOzv16XHxD03GW6UNLmfPwenKu+cdrQeaqEixrCejXdAF
z/7+BSMpAkEA8EaSOeP5Xr3ZrbiKzi6TGMwHMvC7HdJxaBJbVRfApFrE0/mPwmP5
rN7QwjrMY+0+AbXcm8mRQyQ1+IGEembsdwJBAN6az8Rv7QnD/YBvi52POIlRSSIM
V7SwWvSK4WSMnGb1ZBbhgdg57DXaspcwHsFV7hByQ5BvMtIduHcT14ECfcECQATe
aTgjFnqE/lQ22Rk0eGaYO80cc643BXVGafNfd9fcvwBMnk0iGX0XRsOozVt5Azil
psLBYuApa66NcVHJpCECQQDTjI2AQhFc1yRnCU/YgDnSpJVm1nASoRUnU8Jfm3Oz
uku7JUXcVpt08DFSceCEX9unCuMcT72rAQlLpdZir876
-----END RSA PRIVATE KEY-----&lt;/textarea&gt;&lt;br/&gt;
    &lt;label for=""pubkey""&gt;Public Key&lt;/label&gt;&lt;br/&gt;
    &lt;textarea id=""pubkey"" rows=""15"" cols=""65""&gt;-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDlOJu6TyygqxfWT7eLtGDwajtN
FOb9I5XRb6khyfD1Yt3YiCgQWMNW649887VGJiGr/L5i2osbl8C9+WJTeucF+S76
xFxdU6jE0NQ+Z+zEdhUTooNRaY5nZiu5PgDB0ED/ZKBUSLKL7eibMxZtMlUDHjm4
gwQco1KRMDSmXSMkDwIDAQAB
-----END PUBLIC KEY-----&lt;/textarea&gt;&lt;br/&gt;
    &lt;label for=""input""&gt;Text to encrypt:&lt;/label&gt;&lt;br/&gt;
    &lt;textarea id=""input"" name=""input"" type=""text"" rows=4 cols=70&gt;This is a test!&lt;/textarea&gt;&lt;br/&gt;
    &lt;input id=""testme"" type=""button"" value=""Test Me!!!"" /&gt;&lt;br/&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
","","205","<node.js><encryption><rsa><public-key>","0","","0","2015-12-17 11:22:04","","4","","2696509","","2015-12-17 11:22:04","2015-12-17 10:40:28",""
"12794950","Cannot pull code from heroku : the remote end hung up unexpectedly","<p>I'm new to heroku. I uploaded my rsa key and then tried pulling the starter code for a Facebook app that I'm trying to make but when I use the git clone command, I keep on getting the message fatal:</p>

<pre><code>The remote end hung up unexpectedly.
</code></pre>

<p>What could be the possible reasons for this message to turn up. I have verified that my rsa key exists on the heroku server by using the command heroku keys and it did return the same key which I had created.</p>
","<p>try this </p>

<p>heroku keys:add</p>

<p>i added the keys and then did the whole process of git phush again and it worked fine for me 
hope this helps</p>

<p>Details at ""Managing Your SSH Keys"": <a href=""https://devcenter.heroku.com/articles/keys"" rel=""nofollow"">https://devcenter.heroku.com/articles/keys</a></p>
","202","<heroku><public-key>","0","0","1","2013-02-19 14:13:07","","5","","1297603","","2012-10-09 07:33:42","2012-10-09 07:30:00",""
"25734945","How to sign a message with my https public key certificate?","<p>I just got myself an ssl certificate for my domain and it works fine, but I'm using the <a href=""https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki"" rel=""nofollow"">bitcoin payment protocol</a> and I need to sign the messages with my public key before sending them but how are messages signed with an ssl certificate and what tools should I use?</p>

<p><strong>EDIT</strong></p>

<p>It seems what I actually need to do is sign a message using the public key of my ssl certificate issuer.</p>

<p>Thanks in advance :)</p>
","<p>The protocol specification must be incorrect. Digital signatures are signed with your private key.</p>

<p>Your certificate needs to <em>accompany</em> the message, and probably be included in the signature. Use the java.security.Signature class in association with your private key, possibly loaded from your KeyStore.</p>

<p>You may need to purchase a signing certificate: an SSL certificate may not be strong enough for bitcoin.</p>

<p>A signature using a public key is completely worthless. Anyone can do it. You sign with your private key. This is legally equivalent to your signature: only you can do it, and anyone can check it by verifying it with your public key, which is why the public key must accompany the signature; and at the same time they can establish whose signature it is, via the certificate which must also accompany the signature.</p>

<p>Or else bitcoin is radically insecure.</p>
","201","<ssl><x509certificate><sign><public-key>","0","2","2","2014-09-09 11:09:39","25735031","0","","3335799","","2014-09-09 11:09:39","2014-09-09 00:15:32",""
"25734945","How to sign a message with my https public key certificate?","<p>I just got myself an ssl certificate for my domain and it works fine, but I'm using the <a href=""https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki"" rel=""nofollow"">bitcoin payment protocol</a> and I need to sign the messages with my public key before sending them but how are messages signed with an ssl certificate and what tools should I use?</p>

<p><strong>EDIT</strong></p>

<p>It seems what I actually need to do is sign a message using the public key of my ssl certificate issuer.</p>

<p>Thanks in advance :)</p>
","<p>Mystery solved, the message is to be signed using the bitcoin public key with the <code>signmessage ""bitcoinaddress"" ""message""</code> bitcoin command.</p>
","201","<ssl><x509certificate><sign><public-key>","0","-1","2","2014-09-09 11:09:39","25735031","0","","3335799","","2014-09-09 11:09:39","2014-09-09 00:15:32",""
"25317088","Copying public key into remote node without password","<p>I need to use a bash script to do the following:</p>

<ol>
<li>generate public private key on NodeA</li>
<li>Copy the public key into a remote NodeB 's authorized_keys </li>
<li>Add NodeB to NodeA's known_hosts. </li>
</ol>

<p>I need to do all this without a password prompt for ssh-ing into NodeB</p>

<p>In the second step I am even specifying the private key with ""-i"". </p>

<p>The following script I have now still asks for password </p>

<pre><code>#!/bin/bash

sudo ssh-keygen -t rsa -N """" -f /root/.ssh/id_ccn_rsa
ssh -i /root/.ssh/id_ccn_rsa -o StrictHostKeyChecking=no $1
sudo sh -c ""ssh-keyscan $1 &gt;&gt; /root/.ssh/known_hosts""
</code></pre>
","<p>There is no magic.  </p>

<p>To deploy the key you MUST be able to login without the key at least one time. Or have someone who can login and has root access deploy the public key for you.</p>

<p>You cannot login without a password and without a key unless your account was set up without a password AND sshd was configured with the non-default <code>PermitEmptyPasswords yes</code> option.</p>
","200","<linux><bash><shell><ssh><public-key>","-1","0","1","2014-08-14 20:58:56","25317514","3","","258523","","2014-08-14 20:48:00","2014-08-14 20:33:52",""
"32459597","What are the security levels of SFTP?","<p>From what I understand you have different levels of security with SFTP. What are the levels from weakest to strongest?  </p>

<p>FTP  - Not possible over SFTP<br>
SFTP - no host key checking<br>
SFTP - host key checking<br>
SFTP - login and password (LAP)<br>
SFTP - LAP + host key  </p>

<p>I ask because I've seen this Java code:  </p>

<pre><code>config.put(""StrictHostKeyChecking"", ""no"");
</code></pre>

<p>And I've read that you can connect to SFTP with and without keys. </p>

<p>FYI My understanding may be way off.  </p>
","<p>The host key checking indeed contributes to the security of the SSH/SFTP. Though it is in no way related to the authentication (password). So it's not like there are ""levels of security"" that combine these two aspects.</p>

<p>Moreover, your probably confuse the host key checking with the public key authentication.</p>

<p>Read my <a href=""https://winscp.net/eng/docs/ssh_keys"" rel=""nofollow noreferrer"">article on SSH keys</a> to understand the difference between the host key and the key used for authentication.</p>

<hr>

<p>Host key checking: You should never set the <code>StrictHostKeyChecking</code> to <code>no</code>, unless you connect within a private network, where you do not expect any kind of <a href=""https://en.wikipedia.org/wiki/Man-in-the-middle_attack"" rel=""nofollow noreferrer"">man-in-the-middle attacks</a>.</p>

<p>Authentication: If possible, use the public key authentications. The password authentication is less secure.</p>

<hr>

<p>The FTP is in no way related to the SFTP. Anyway, I do not know, what you mean by ""FTP security level"".</p>
","199","<ssh><sftp><ssh-keys><private-key><public-key>","0","2","1","2017-02-14 12:42:44","","0","1","850848","","2015-09-08 14:26:00","2015-09-08 13:50:08",""
"56567599","Unable to establish connection to unix server using Jsch and private key from IPSwitch client","<p>I am trying to establish a connection to a Unix server and put/get files using SFTP. I am using JCraft's Jsch 0.1.53 and RSA token based authentication. No password. </p>

<p>I have generated the private key and public keys using IPSwitch software and have configured the public key for the user in the Unix server.</p>

<p>I am using the private key generated by the IPSwitch in my Java program which in turn uses JSch. </p>

<p>IPSwitch's Store.ini file looks like</p>

<pre><code>[____Item____0]
____ItemName____=auto
PublicKey=C:\ClientKeyStore\Pub203E.tmp
Pass=_y**************************NyYbpT
PrivateKey=C:\ClientKeyStore\Pri203F.tmp
[__CONFIG__]
Count=1
</code></pre>

<p>private key looks like,</p>

<pre><code>-----BEGIN ENCRYPTED PRIVATE KEY-----

MIIFHzBJB*******************************

B**************************************B

************1on4MNDZfTgQ==

-----END ENCRYPTED PRIVATE KEY-----
</code></pre>

<p>There are lots of examples in stackoverflow and elsewhere. I tried it but I am hitting <em>com.jcraft.jsch.JSchException: Auth</em> cancel.</p>

<pre><code>import com.jcraft.jsch.Channel;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.UserInfo;


public class UnixUtilities {

public void unixConnectionUsingKey(String username, String hostIPAddress, int portNumber) throws JSchException {

    JSch jsch = new JSch();

    jsch.addIdentity(""src/main/resources/keys/id_rsa"");

    Session session = jsch.getSession(username, hostIPAddress, portNumber);

    session.setConfig(""StrictHostKeyChecking"", ""no"");
    session.setConfig(""PreferredAuthentications"", ""publickey,keyboard-interactive,password"");

    UserInfo userinfo = new MyUserInfo();
    session.setUserInfo(userinfo);

    session.connect();

    Channel channel = session.openChannel(""sftp"");
}

}

class MyUserInfo implements UserInfo {
String password = null;

@Override
public String getPassphrase() {
    return null;
}

@Override
public String getPassword() {
    return password;
}

public void setPassword(String passwd) {
    password = passwd;
}

@Override
public boolean promptPassphrase(String message) {
    return true;
}

@Override
public boolean promptPassword(String message) {
    return true;
}

@Override
public boolean promptYesNo(String message) {
    return true;
}

@Override
public void showMessage(String message) {
    // TODO Auto-generated method stub

}
}
</code></pre>

<p>I am hitting</p>

<pre><code>com.jcraft.jsch.JSchException: Auth cancel
at com.jcraft.jsch.Session.connect(Session.java:511)
at com.jcraft.jsch.Session.connect(Session.java:183)
</code></pre>

<p>When I use only <em>publickey</em> instead of <em>publickey,keyboard-interactive,password</em> as <em>PreferredAuthentications</em>, I am hitting,</p>

<pre><code>  com.jcraft.jsch.JSchException: Auth fail
    at com.jcraft.jsch.Session.connect(Session.java:512)
    at com.jcraft.jsch.Session.connect(Session.java:183)
</code></pre>

<p>Also, if I ignore the below 2 lines, i.e., if I comment the below 2 lines</p>

<pre><code>UserInfo userinfo = new MyUserInfo();

session.setUserInfo(userinfo);
</code></pre>

<p>I am hitting,</p>

<pre><code>com.jcraft.jsch.JSchException: USERAUTH fail
at com.jcraft.jsch.UserAuthPublicKey.start(UserAuthPublicKey.java:119)
at com.jcraft.jsch.Session.connect(Session.java:463)
at com.jcraft.jsch.Session.connect(Session.java:183)
</code></pre>

<p>The Jsch log is as follows,</p>

<pre><code>    Connecting to ***.***.**.*** port ****

    Connection established

    Remote version string: SSH-2.0-6.4.0.370 SSH Tectia Server

    Local version string: SSH-2.0-JSCH-0.1.53

    CheckCiphers: aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,3des-ctr,arcfour,arcfour128,arcfour256

    aes256-ctr is not available.

    aes192-ctr is not available.

    aes256-cbc is not available.

    aes192-cbc is not available.

    CheckKexes: diffie-hellman-group14-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521

    CheckSignatures: ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521

    SSH_MSG_KEXINIT sent

    SSH_MSG_KEXINIT received

    kex: server: diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group14-sha256@ssh.com,diffie-hellman-group-exchange-sha1,diffie-hellman-group-exchange-sha256

    kex: server: ssh-rsa,ssh-rsa-sha256@ssh.com

    kex: server: aes128-cbc

    kex: server: aes128-cbc

    kex: server: hmac-sha1,hmac-sha1-96,hmac-sha256-2@ssh.com,hmac-sha224@ssh.com,hmac-sha256@ssh.com,hmac-sha384@ssh.com,hmac-sha512@ssh.com

    kex: server: hmac-sha1,hmac-sha1-96,hmac-sha256-2@ssh.com,hmac-sha224@ssh.com,hmac-sha256@ssh.com,hmac-sha384@ssh.com,hmac-sha512@ssh.com

    kex: server: none,zlib

    kex: server: none,zlib

    kex: server: 

    kex: server: 

    kex: client: ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1

    kex: client: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521

    kex: client: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc

    kex: client: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc

    kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96

    kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96

    kex: client: none

    kex: client: none

    kex: client: 

    kex: client: 

    kex: server-&gt;client aes128-cbc hmac-sha1 none

    kex: client-&gt;server aes128-cbc hmac-sha1 none

    SSH_MSG_KEXDH_INIT sent

    expecting SSH_MSG_KEXDH_REPLY

    ssh_rsa_verify: signature true

    Permanently added '***.***.**.***' (RSA) to the list of known hosts.

    SSH_MSG_NEWKEYS sent

    SSH_MSG_NEWKEYS received

    SSH_MSG_SERVICE_REQUEST sent

    SSH_MSG_SERVICE_ACCEPT received

    Authentications that can continue: publickey

    Next authentication method: publickey

    Disconnecting from ***.***.**.*** port ****
</code></pre>

<p>I am using the same key that was generated by IPSwitch and have named it as id_rsa in my eclipse. Is the private key generated out of IPSwitch supposed to work for JSch as well?</p>

<p>When I connect via IPSwitch, it works all fine. Could you please help me here?Thanks in advance.</p>
","<p>To provide a <em>passphrase</em> for an <em>encrypted private key</em>, you need to implement <a href=""https://epaul.github.io/jsch-documentation/javadoc/com/jcraft/jsch/UserInfo.html#promptPassphrase-java.lang.String-"" rel=""nofollow noreferrer""><code>UserInfo.promptPassphrase</code></a> and <a href=""https://epaul.github.io/jsch-documentation/javadoc/com/jcraft/jsch/UserInfo.html#getPassphrase--"" rel=""nofollow noreferrer""><code>UserInfo.getPassphrase</code></a>, not <code>UserInfo.getPassword</code> and <code>UserInfo.promptPassword</code>.</p>

<pre><code>@Override
public boolean promptPassphrase(String message) {
    return true;
}

@Override
public String getPassphrase() {
    return password;
}
</code></pre>

<p><em>(and for a consistency, you should rename your <code>password</code> field to <code>passphrase</code>).</em></p>
","193","<java><rsa><jsch><private-key><public-key>","0","0","2","2019-06-18 07:09:19","","8","1","850848","","2019-06-18 07:09:19","2019-06-12 17:33:42",""
"56567599","Unable to establish connection to unix server using Jsch and private key from IPSwitch client","<p>I am trying to establish a connection to a Unix server and put/get files using SFTP. I am using JCraft's Jsch 0.1.53 and RSA token based authentication. No password. </p>

<p>I have generated the private key and public keys using IPSwitch software and have configured the public key for the user in the Unix server.</p>

<p>I am using the private key generated by the IPSwitch in my Java program which in turn uses JSch. </p>

<p>IPSwitch's Store.ini file looks like</p>

<pre><code>[____Item____0]
____ItemName____=auto
PublicKey=C:\ClientKeyStore\Pub203E.tmp
Pass=_y**************************NyYbpT
PrivateKey=C:\ClientKeyStore\Pri203F.tmp
[__CONFIG__]
Count=1
</code></pre>

<p>private key looks like,</p>

<pre><code>-----BEGIN ENCRYPTED PRIVATE KEY-----

MIIFHzBJB*******************************

B**************************************B

************1on4MNDZfTgQ==

-----END ENCRYPTED PRIVATE KEY-----
</code></pre>

<p>There are lots of examples in stackoverflow and elsewhere. I tried it but I am hitting <em>com.jcraft.jsch.JSchException: Auth</em> cancel.</p>

<pre><code>import com.jcraft.jsch.Channel;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.UserInfo;


public class UnixUtilities {

public void unixConnectionUsingKey(String username, String hostIPAddress, int portNumber) throws JSchException {

    JSch jsch = new JSch();

    jsch.addIdentity(""src/main/resources/keys/id_rsa"");

    Session session = jsch.getSession(username, hostIPAddress, portNumber);

    session.setConfig(""StrictHostKeyChecking"", ""no"");
    session.setConfig(""PreferredAuthentications"", ""publickey,keyboard-interactive,password"");

    UserInfo userinfo = new MyUserInfo();
    session.setUserInfo(userinfo);

    session.connect();

    Channel channel = session.openChannel(""sftp"");
}

}

class MyUserInfo implements UserInfo {
String password = null;

@Override
public String getPassphrase() {
    return null;
}

@Override
public String getPassword() {
    return password;
}

public void setPassword(String passwd) {
    password = passwd;
}

@Override
public boolean promptPassphrase(String message) {
    return true;
}

@Override
public boolean promptPassword(String message) {
    return true;
}

@Override
public boolean promptYesNo(String message) {
    return true;
}

@Override
public void showMessage(String message) {
    // TODO Auto-generated method stub

}
}
</code></pre>

<p>I am hitting</p>

<pre><code>com.jcraft.jsch.JSchException: Auth cancel
at com.jcraft.jsch.Session.connect(Session.java:511)
at com.jcraft.jsch.Session.connect(Session.java:183)
</code></pre>

<p>When I use only <em>publickey</em> instead of <em>publickey,keyboard-interactive,password</em> as <em>PreferredAuthentications</em>, I am hitting,</p>

<pre><code>  com.jcraft.jsch.JSchException: Auth fail
    at com.jcraft.jsch.Session.connect(Session.java:512)
    at com.jcraft.jsch.Session.connect(Session.java:183)
</code></pre>

<p>Also, if I ignore the below 2 lines, i.e., if I comment the below 2 lines</p>

<pre><code>UserInfo userinfo = new MyUserInfo();

session.setUserInfo(userinfo);
</code></pre>

<p>I am hitting,</p>

<pre><code>com.jcraft.jsch.JSchException: USERAUTH fail
at com.jcraft.jsch.UserAuthPublicKey.start(UserAuthPublicKey.java:119)
at com.jcraft.jsch.Session.connect(Session.java:463)
at com.jcraft.jsch.Session.connect(Session.java:183)
</code></pre>

<p>The Jsch log is as follows,</p>

<pre><code>    Connecting to ***.***.**.*** port ****

    Connection established

    Remote version string: SSH-2.0-6.4.0.370 SSH Tectia Server

    Local version string: SSH-2.0-JSCH-0.1.53

    CheckCiphers: aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,3des-ctr,arcfour,arcfour128,arcfour256

    aes256-ctr is not available.

    aes192-ctr is not available.

    aes256-cbc is not available.

    aes192-cbc is not available.

    CheckKexes: diffie-hellman-group14-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521

    CheckSignatures: ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521

    SSH_MSG_KEXINIT sent

    SSH_MSG_KEXINIT received

    kex: server: diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group14-sha256@ssh.com,diffie-hellman-group-exchange-sha1,diffie-hellman-group-exchange-sha256

    kex: server: ssh-rsa,ssh-rsa-sha256@ssh.com

    kex: server: aes128-cbc

    kex: server: aes128-cbc

    kex: server: hmac-sha1,hmac-sha1-96,hmac-sha256-2@ssh.com,hmac-sha224@ssh.com,hmac-sha256@ssh.com,hmac-sha384@ssh.com,hmac-sha512@ssh.com

    kex: server: hmac-sha1,hmac-sha1-96,hmac-sha256-2@ssh.com,hmac-sha224@ssh.com,hmac-sha256@ssh.com,hmac-sha384@ssh.com,hmac-sha512@ssh.com

    kex: server: none,zlib

    kex: server: none,zlib

    kex: server: 

    kex: server: 

    kex: client: ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1

    kex: client: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521

    kex: client: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc

    kex: client: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc

    kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96

    kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96

    kex: client: none

    kex: client: none

    kex: client: 

    kex: client: 

    kex: server-&gt;client aes128-cbc hmac-sha1 none

    kex: client-&gt;server aes128-cbc hmac-sha1 none

    SSH_MSG_KEXDH_INIT sent

    expecting SSH_MSG_KEXDH_REPLY

    ssh_rsa_verify: signature true

    Permanently added '***.***.**.***' (RSA) to the list of known hosts.

    SSH_MSG_NEWKEYS sent

    SSH_MSG_NEWKEYS received

    SSH_MSG_SERVICE_REQUEST sent

    SSH_MSG_SERVICE_ACCEPT received

    Authentications that can continue: publickey

    Next authentication method: publickey

    Disconnecting from ***.***.**.*** port ****
</code></pre>

<p>I am using the same key that was generated by IPSwitch and have named it as id_rsa in my eclipse. Is the private key generated out of IPSwitch supposed to work for JSch as well?</p>

<p>When I connect via IPSwitch, it works all fine. Could you please help me here?Thanks in advance.</p>
","<p>Thanks to  Martin Prikryl and the community for being with this while I solve this problem. </p>

<p>It was simple. As Martin mention one of his comment, I just had to generate one more set of keys using another tool like SSH-Keygen and use it instead. I used a software called VANDYKE SecureCRT to generate one more set of keys and it works just fine with JSch. Looks like IPSwitch does something while generating keys which does not seem to work with JSch. It could be that 'Pass' which is available in the config file of IPSwitch, which is specific to IPSwitch. </p>

<p>Code is as follows,</p>

<pre><code>        JSch jsch = new JSch();
        jsch.addIdentity(privateKeyPath);


        JSch.setLogger(new com.jcraft.jsch.Logger() {
            Path path = Paths.get(""target/jsch.log"");
            @Override
            public boolean isEnabled(int level){
                return true;
            }
            public void log(int level, String message){
                try {
                    StandardOpenOption option =
                       !Files.exists(path) ? StandardOpenOption.CREATE : StandardOpenOption.APPEND;
                    Files.write(path, java.util.Arrays.asList(message), option);
                } catch (IOException e) {
                    System.err.println(message);
                }
            }
        });

        Session session = jsch.getSession(username, host, port);

        session.setConfig(""StrictHostKeyChecking"", ""no"");
        session.setConfig(""PreferredAuthentications"", ""publickey"");
        session.connect();
</code></pre>

<p>Here the setlogger method helps you with good logs. If you dont want it, you can ignore that step.</p>
","193","<java><rsa><jsch><private-key><public-key>","0","0","2","2019-06-18 07:09:19","","8","1","850848","","2019-06-18 07:09:19","2019-06-12 17:33:42",""
"2844438","Is there a public / private key encryption scheme that will not change a message's length?","<p>Is there a public / private key encryption scheme that will not change a message's length?</p>

<p>I would like to encrypt a message one packet at a time, but if the packet grows, it would no longer just be one packet long.</p>
","<p>Here's a simple scheme: Use public / private key encryption to establish a symmetric key. Then do all of your encryption using that symmetric key.</p>

<p>If you also need to ensure message integrity and non-repudiation, then you can run the message through a hash function, which will map it to a fixed length. Then you can sign the hash.</p>

<p>Typically, you wouldn't want to use public keys to encrypt messages anyway. Public / private key pairs are harder to generate and more expensive to use for long encryption, compared to symmetric keys.</p>
","193","<encryption><packet><public-key><private-key><fixed-length-record>","1","3","1","2010-05-16 16:25:14","2844462","1","1","","","","2010-05-16 16:10:30",""
"17230353","Unable to get Public Key in c# is public key uses ECC","<p>I can't get public key size of x509certificate in c# if public key is ECC. If public key is RSA, we can get is using PublicKey.Key.Keysize But this does not work if its ECC. We can get ANS encoded parameters if public key algorithm is ECC, but not sure if and how can we get key size for than. Is there any way i can get key size if public key is ECC ?</p>
","","191","<c#><public-key><x509certificate2>","1","","0","2013-06-21 08:01:30","","1","","","","","2013-06-21 08:01:30",""
"8079344","Gitolite - Can a key file have and @ sign in it","<p>I have a few public key files in my keydir/ some are named like this user@host.pub</p>

<p>In my config file I specify the user as user@host, but when I try and push the changes, I get this warning</p>

<pre><code>remote: 
remote:         ***** WARNING *****
remote:         the following users (pubkey files in parens) do not appear in the config file:
remote: user(user@host.pub)
</code></pre>

<p>Anyone know why this is the case?</p>
","<p>According to my understanding, probably not. Since the '@' needs to be escaped.</p>

<p>I usually generate my keys using the following:</p>

<pre><code>ssh-keygen -t rsa -C userName -f userName
</code></pre>

<p>...so that I don't run into this issue.</p>
","187","<gitosis><public-key>","1","1","1","2012-01-05 22:30:46","","0","1","","","","2011-11-10 12:13:49",""
"54214899","Get Public Key byte array from .cer file - C#","<p>I'm trying to get the public key byte[] from a certificate.</p>

<p>My colleague used the command : <code>openssl x509 -inform der -in certificate.cer -text -noout</code>, which dumped the key on the console and then he copied it into a binary file.</p>

<p>My task is to do this using <code>c#</code>.</p>

<p>I used the following lines.</p>

<pre><code>var cert = X509Certificate.CreateFromCertFile(
        ""C:\\Users\\dhermann\\Downloads\\FirmKeyTest\\FirmwareSubordinateSSLTo20190201PublicKey.cer"");
        byte[] publicKey = cert.GetPublicKey();
</code></pre>

<p>My colleagues bin file has 136 bytes while mine gives me 140 bytes and on top of that, the initial 7 bytes of mine are not included in his byte array, the following 128 are exactly the same as his but the last 8 are different (3 of them not being included in his byte array.</p>

<p>What am I doing wrong and how can I get the exact same public key array as his?</p>
","<p>So I ended up resolving this problem.
My colleague was only using the modulus and adding an exponent.
I was able to resolve it with the help of this <a href=""https://www.c-sharpcorner.com/article/extracting-modules-and-componentrsaparameter-from-x509cert/"" rel=""nofollow noreferrer"">website</a>.</p>
","186","<c#><certificate><x509certificate><x509><public-key>","-2","-1","1","2019-01-17 08:12:03","","9","","3563910","","2019-01-16 10:29:43","2019-01-16 10:20:07",""
"21311460","How is it possible to break encrypted public key (RSA) using password as symmetric key?","<p>Given public key (RSA) encrypted with symmetric key (password) and if password is weak, then how is it possible to find password using given encrypted public key only.</p>
","","185","<public-key><encryption-symmetric><cryptanalysis>","0","","0","2014-01-23 14:48:13","","3","","","","","2014-01-23 14:48:13",""
"3481175","How would one write a private/public key system for a server authentication?","<p>I guess this might have been posted somewhere, I did search, but couldn't find anything.</p>

<p>I have this server on which I run a game server, and where I want to have some TCP server (possibly written in Ruby) that will provide a pseudo-session with few commands available (like restart the game server, send the logs, etc.)</p>

<p>What I want is an SSH-like authentication, where people have public &amp; private DSA keys (which I know how to generate), and the public key is recognized by the server as correct authentication.</p>

<p>I am not looking for code implementation, but mainly how this should be architectured.</p>

<p>What I was thinking was something like:</p>

<ul>
<li><code>[Client]</code> Connect to the server</li>
<li><code>[Server]</code> Send public key</li>
<li><code>[Client]</code> Send public key encoded with server's public key</li>
<li><code>[Server]</code> Compare the key with a database of authorized clients</li>
<li><code>[Server]</code> Generate session key, send it encrypted with client pub</li>
<li><code>[Client]</code> Decodes session key and starts sending messages always accompanied by the session key</li>
</ul>

<p>But I feel like this is missing something. Especially, when looking at DSA and PK systems, I keep seeing message signing, and I'm not sure I understand how different it is than using pub keys to encrypt and the session key?</p>

<p>If my question is not clear, I'd be glad to edit my post of course :-).</p>
","<p>If you want a SSL like implementation, then why not just use SSL?</p>
","184","<language-agnostic><public-key><private-key><dsa>","0","2","3","2010-08-13 23:43:53","3481228","1","","","","","2010-08-13 22:51:08",""
"3481175","How would one write a private/public key system for a server authentication?","<p>I guess this might have been posted somewhere, I did search, but couldn't find anything.</p>

<p>I have this server on which I run a game server, and where I want to have some TCP server (possibly written in Ruby) that will provide a pseudo-session with few commands available (like restart the game server, send the logs, etc.)</p>

<p>What I want is an SSH-like authentication, where people have public &amp; private DSA keys (which I know how to generate), and the public key is recognized by the server as correct authentication.</p>

<p>I am not looking for code implementation, but mainly how this should be architectured.</p>

<p>What I was thinking was something like:</p>

<ul>
<li><code>[Client]</code> Connect to the server</li>
<li><code>[Server]</code> Send public key</li>
<li><code>[Client]</code> Send public key encoded with server's public key</li>
<li><code>[Server]</code> Compare the key with a database of authorized clients</li>
<li><code>[Server]</code> Generate session key, send it encrypted with client pub</li>
<li><code>[Client]</code> Decodes session key and starts sending messages always accompanied by the session key</li>
</ul>

<p>But I feel like this is missing something. Especially, when looking at DSA and PK systems, I keep seeing message signing, and I'm not sure I understand how different it is than using pub keys to encrypt and the session key?</p>

<p>If my question is not clear, I'd be glad to edit my post of course :-).</p>
","<p>Instead of SSH-like, why not use SSH? Or use SSL, which has nearly ubiquitous library support for any platform?</p>

<p>First, it's easier. The code is written, tested, reviewed, and maintained.</p>

<p>Second, it's safer. If you don't understand why messages need to be signed, what else might you be overlooking? Honestly, even TLS (SSL), which has had a lot of scrutiny, had a serious flaw in the renegotiation bug that was recently publicized. Even when you know what you are doing, designing a secure protocol is hard.</p>

<p>By the way, SSH and SSL compute a message authentication code for every protocol record so that a man-in-the-middle cannot tamper with the message content.</p>
","184","<language-agnostic><public-key><private-key><dsa>","0","2","3","2010-08-13 23:43:53","3481228","1","","","","","2010-08-13 22:51:08",""
"3481175","How would one write a private/public key system for a server authentication?","<p>I guess this might have been posted somewhere, I did search, but couldn't find anything.</p>

<p>I have this server on which I run a game server, and where I want to have some TCP server (possibly written in Ruby) that will provide a pseudo-session with few commands available (like restart the game server, send the logs, etc.)</p>

<p>What I want is an SSH-like authentication, where people have public &amp; private DSA keys (which I know how to generate), and the public key is recognized by the server as correct authentication.</p>

<p>I am not looking for code implementation, but mainly how this should be architectured.</p>

<p>What I was thinking was something like:</p>

<ul>
<li><code>[Client]</code> Connect to the server</li>
<li><code>[Server]</code> Send public key</li>
<li><code>[Client]</code> Send public key encoded with server's public key</li>
<li><code>[Server]</code> Compare the key with a database of authorized clients</li>
<li><code>[Server]</code> Generate session key, send it encrypted with client pub</li>
<li><code>[Client]</code> Decodes session key and starts sending messages always accompanied by the session key</li>
</ul>

<p>But I feel like this is missing something. Especially, when looking at DSA and PK systems, I keep seeing message signing, and I'm not sure I understand how different it is than using pub keys to encrypt and the session key?</p>

<p>If my question is not clear, I'd be glad to edit my post of course :-).</p>
","<p>If you do choose to go the route of implementing your own layer of security (which <em>is</em> sometimes the right answer), there are a lot of subtleties to be aware of. Start by reading what I consider the definitive tomb on the topic:</p>

<p>Bruce Schneier's <a href=""https://rads.stackoverflow.com/amzn/click/com/0471117099"" rel=""nofollow noreferrer"" rel=""nofollow noreferrer"">Applied Cryptography</a></p>
","184","<language-agnostic><public-key><private-key><dsa>","0","2","3","2010-08-13 23:43:53","3481228","1","","","","","2010-08-13 22:51:08",""
"6526584","how to prove that someone's previous public key was really theirs?","<p>I'm in the planning stage of an open-source credit clearing system, and my idea is to use GPG keys to sign IOUs. But I'm concerned that if Bob signs an IOU he emails to Alice, then later deletes his keys, creates a new keypair and uploads his new key to keyservers, he'll be able to plausibly deny ownership of the IOU. Is there some programmatic way of proving a key once belonged to the owner of the email account that sent the signed email? My google-fu is failing me on this one.</p>

<p>Update: ""non-repudiation"" is the word I was looking for. Still researching...</p>
","<p>Most of the time non-repudiation is achieved with cryptographic time-stamps. A time-stamp is a proof of existence of a document at a given time and is issued by a trustworthy third-party with sign the document hash along with the time at which this document was submitted.</p>

<p>I do not know GPG model very well but there is probably something like a certificate which binds the public key with the key owner identity. You have to time-stamp this certificate. Actually you should also time-stamp a proof that that Bob's key is not revoked. In X.509 this is achieved by time-stamping the current revocation list which proves the ""not revoked"" status the key.</p>

<p>Cryptographic time-stamp are standardized in <a href=""http://www.ietf.org/rfc/rfc3161.txt"" rel=""nofollow"">RFC 3161</a></p>

<p>More globally you point out one of the numerous issues and complexity of <em>advanced digital electronic signatures</em>: non-repudiation, long-term validation, signature commitment rules... This is the main goals of <code>AdES</code> standards (<a href=""http://en.wikipedia.org/wiki/CAdES_%28computing%29"" rel=""nofollow""><code>CAdES</code></a>, <a href=""http://en.wikipedia.org/wiki/XAdES"" rel=""nofollow""><code>XAdES</code></a> and <a href=""http://en.wikipedia.org/wiki/PAdES"" rel=""nofollow""><code>PAdES</code></a>)</p>
","179","<pki><public-key>","3","1","1","2011-08-12 08:43:41","7037629","6","2","493161","","2011-06-30 07:06:52","2011-06-29 20:06:36",""
"23104372","Thoughts on storing a public SSH key in a Github repo?","<p>Yo guys,</p>

<p>quite simple, maybe silly question.</p>

<p>I often need to give people my public key or, for example, re-import it when I get a new laptop or when re-installing the OS.</p>

<p>I was thinking of uploading it on a github public repo, as <a href=""https://security.stackexchange.com/questions/406/how-should-i-distribute-my-public-key"">there should be no problem in doing so</a>, so that it would be uber-easy for me to retrieve it whenever I need it.</p>

<p>Thoughts? Any better alternative?</p>

<p>The driver for putting it on github is mainly the idea that they won't likely be down and I wont need to remember a random dropbox link.</p>

<p>Cheers </p>
","<p>Actually there are two ways already to retrieve the public keys of a user.</p>

<p>Getting it via json through the API:</p>

<p><a href=""https://api.github.com/users/odino/keys"" rel=""nofollow"">https://api.github.com/users/odino/keys</a></p>

<p>Or plain via web:</p>

<p><a href=""https://github.com/odino.keys"" rel=""nofollow"">https://github.com/odino.keys</a></p>
","178","<github><ssh><public-key>","2","2","1","2014-04-16 08:56:36","23104528","0","0","-1","","2017-03-17 10:45:55","2014-04-16 08:49:31",""
"38285575","Can I use same public key for ssh handshake and authentication?","<p>I have an application that is distributed and installed in many machines. There is a central machine which can request other machine where the application installed and the other machines can request the central machine. So the each installation will act as a server as well as client. I want to secure the access using ssh public key cryptography.</p>

<p>For simplicity, let's say server A(manager - which is installed first) and server B have the application installed. </p>

<p>Let's say when server B installed, server A's public key will be available in server B. </p>

<p>Also assume server A will make the first request to server B. When doing so,  the server A will get server B's public key during the handshake(by verifying the fingerprint, the key will be saved in server A) and server A will send its public key to server B for authentication. As server B already has the server A's public key, authentication successful?.</p>

<p>When server B wants to request server A, the server A will send its public key during the handshake and it is verified against the server A's public key available in server B. For authentication, server B will send its public key which will be verified against the public key that server A got during the previous request handshake(from server A to server B).</p>

<p>One point to note is, there is no user involved. The application is accessible to all the users of the machine.</p>

<p>My query is, do we need separate keys for handshake and authentication or as I described single key is enough?</p>

<p>Also please let me know the above explained security model will have any issues particularly security related?</p>

<p>Let me know if you need more information.</p>

<p>Thanks,
Naga</p>
","<p>Yes. This is called <a href=""https://tools.ietf.org/html/rfc4252#section-9"" rel=""nofollow"">Host-Based authentication</a> as described in the RFC4252, section 9. But note that is poses several security threads and using proper (openssh) certificates makes much more sense these days (or Kerberos).</p>
","178","<ssh><rsa><public-key-encryption><public-key>","0","0","1","2016-07-10 13:15:17","38292267","3","1","275960","","2016-07-09 19:36:52","2016-07-09 19:29:56",""
"25998653","How to push a modification on a git submodule without giving username/password","<p>I'm currently trying  to deal with git submodules and I'm having trouble when I want to push modifications on children repository.</p>

<p>I get the following error:</p>

<pre><code>fatal: remote error: 
  You can't push to git://github.com/yllieth/ui.git
  Use https://github.com/yllieth/ui.git
</code></pre>

<p>Indeed, it's working fine if I change my remote configuration to use HTTPS instead of ssh public key. But I would like to avoid giving my github's username/password. </p>

<p>Is anyone knows some configuration tips or something else to be able to push to a submodule using my public key ?</p>
","<blockquote>
  <p>It's working fine if I change my remote configuration to use HTTPS instead of ssh public key.</p>
</blockquote>

<p>Note that <code>git://github.com/yllieth/ui.git</code> is <em>not</em> an ssh url.<br>
See ""<a href=""https://help.github.com/articles/which-remote-url-should-i-use"" rel=""nofollow noreferrer"">Which remote URL should I use?</a>"" and ""<a href=""https://help.github.com/articles/changing-a-remote-s-url"" rel=""nofollow noreferrer"">Changing a remote's URL</a>"":</p>

<p><code>git@github.com:username/reponame.git</code> would.<br>
In your case: <code>git@github.com:yllieth/ui.git</code></p>

<p>So you still can use ssh, but you need to <a href=""https://stackoverflow.com/a/14405542/6309"">change the submodule url</a>.</p>
","177","<git><git-submodules><public-key>","1","1","1","2014-09-24 05:38:53","26009353","1","1","","","","2014-09-23 15:12:00",""
"8891849","How the public key can be ensured being from sender in the digital signature security model?","<p>I read an article about digital signature (<a href=""http://en.wikipedia.org/wiki/Digital_signature"" rel=""nofollow"">link</a>) and have question as follows. </p>

<p>Let's say Alice wants to send a message to Bob. She need to let Bob know the message is from her. So she encrypted the hashed message with her private key into a certificate. Then Bob can decrypted the message with public key when receiving it. Bob can know it is from Alice if the hash code of the message matches the hash code which is decrypted from certificate. Here we have the assumption that Bob already knows the public key. What if the transmission of public key is already attacked? Bob might use the wrong public key to decrypt the wrong message and get that the message if from Alice. Is there any protocal or policy to avoid the attack against public key? And shall we？</p>
","<p>Yes, the authenticity of public keys is a key component of applied cryptography. I can issue a public key that says ""I am the website of your bank, trust me"", but you shouldn't really trust it. Different schemes have been developed to establish authentication of public keys. One approach is the <a href=""https://en.wikipedia.org/wiki/Web_of_trust"" rel=""nofollow"">web of trust model</a> in PGP and GnuPG, others are <a href=""https://en.wikipedia.org/wiki/X.509"" rel=""nofollow"">PKI</a> and <a href=""https://en.wikipedia.org/wiki/Kerberos_%28protocol%29"" rel=""nofollow"">Kerberos</a>. One of the main difference between these approaches is where you place your trust. I provide a <strong>simplified description</strong> only, you have to read about them to learn about the exact details (you wouldn't base your security on an extremely short summary, would you?).</p>

<p>In the <strong>web of trust</strong> there are some people who you trust, and you (ideally) verified their public keys personally. You can trust other public keys if they have been signed by several people bearing your initial trust. Using these trusted individuals you can check more and more keys.</p>

<p>In <strong>PKI</strong> (Personal Key Infrastructure) you trust several <strong>Certificate Authorities</strong> (CAs) and accept their public keys. You trust them that they thoroughly check the identity of key holders before signing their public keys. The combination of public key + signature from a CA (and some other data) forms a <strong>certificate</strong>. The PKI is used in <a href=""https://en.wikipedia.org/wiki/Transport_Layer_Security"" rel=""nofollow"">SSL/TLS</a>, it is the underlying infrastructure of the secure web. You use it when you read your mail on a web interface, when you do online banking, etc. If a <a href=""https://en.wikipedia.org/wiki/Certificate_authority#Subversion_of_CA"" rel=""nofollow"">CA is compromised</a>, then every certificate signed by the CA will be come insecure.</p>

<p>In <strong>Kerberos</strong> is designed for computer networks and the <strong>key server</strong> is the single point of trust. It provides mutual authentication and a unique symmetric encryption key for clients and servers. The key server checks the identity of clients by a secret shared only between the key server and the client. Kereberos is used, for example, in Windows, AFS, Grid computing.</p>
","173","<security><digital-signature><public-key>","1","1","2","2012-01-19 08:47:44","8893087","2","","1094597","","2012-01-17 20:08:16","2012-01-17 08:52:46",""
"8891849","How the public key can be ensured being from sender in the digital signature security model?","<p>I read an article about digital signature (<a href=""http://en.wikipedia.org/wiki/Digital_signature"" rel=""nofollow"">link</a>) and have question as follows. </p>

<p>Let's say Alice wants to send a message to Bob. She need to let Bob know the message is from her. So she encrypted the hashed message with her private key into a certificate. Then Bob can decrypted the message with public key when receiving it. Bob can know it is from Alice if the hash code of the message matches the hash code which is decrypted from certificate. Here we have the assumption that Bob already knows the public key. What if the transmission of public key is already attacked? Bob might use the wrong public key to decrypt the wrong message and get that the message if from Alice. Is there any protocal or policy to avoid the attack against public key? And shall we？</p>
","<p>your answer gave me much of insight into the question. And also, I would like to put the wikipedia link <a href=""http://en.wikipedia.org/wiki/X.509#Security"" rel=""nofollow"">http://en.wikipedia.org/wiki/X.509#Security</a> here. Coz there is one stentence in the article solve my question ""who certificate the Certificate Authority""</p>

<blockquote>
  <p>This is an example of a self-signed certificate, as the issuer and subject are the same. There's no way to verify this certificate except by checking it against itself; instead, these top-level certificates are manually stored by web browsers. Thawte is one of the root certificate authorities recognized by both Microsoft and Netscape. This certificate comes with the web browser and is trusted by default.</p>
</blockquote>

<p>Just in case some one has the same question.</p>
","173","<security><digital-signature><public-key>","1","0","2","2012-01-19 08:47:44","8893087","2","","1094597","","2012-01-17 20:08:16","2012-01-17 08:52:46",""
"16915234","Unable to sign text block with Private Key","<p>I am trying to create a digital signature of a load of clipboard text. I am:</p>

<ol>
<li>Creating a SHA-256 hash of the plain text.</li>
<li>Encrypting this hash with my PRIVATE key.</li>
<li>Attempting to decrypt this with my PUBLIC key.</li>
</ol>

<p>I'm doing this as I am of the understanding that anything signed with my PRIVATE key can be decrypted with my PUBLIC - such as this for verification?  Is this wrong?</p>

<p>I'm encrypting the hash with these methods:</p>

<pre><code>                public static string EncryptText(string text, int keySize, string publicKey)
            {
                var encrypted = Encrypt(Encoding.UTF8.GetBytes(text), keySize, publicKey);
                return Convert.ToBase64String(encrypted);
            }

            public static byte[] Encrypt(byte[] data, int keySize, string publicKeyXml)
            {
                if (data == null || data.Length == 0) throw new ArgumentException(""Data are empty"", ""data"");
                int maxLength = GetMaxDataLength(keySize);
                if (data.Length &gt; maxLength) throw new ArgumentException(String.Format(""Maximum data length is {0}"", maxLength), ""data"");
                if (!IsKeySizeValid(keySize)) throw new ArgumentException(""Key size is not valid"", ""keySize"");
                if (String.IsNullOrEmpty(publicKeyXml)) throw new ArgumentException(""Key is null or empty"", ""publicKeyXml"");

                using (var provider = new RSACryptoServiceProvider(keySize))
                {
                    provider.FromXmlString(publicKeyXml);
                    return provider.Encrypt(data, OptimalAsymmetricEncryptionPadding);
                }
            }
</code></pre>

<p>but passing my <code>PRIVATE KEY</code> down instead of my <code>PUBLIC KEY</code>.</p>

<p>Then to verify the signature, I am using:</p>

<pre><code>                public static string DecryptText(string privateKey, int keySize, string text)
            {
                var decrypted = Decrypt(Convert.FromBase64String(text), keySize, privateKey);
                return Encoding.UTF8.GetString(decrypted);
            }

            public static byte[] Decrypt(byte[] data, int keySize, string publicAndPrivateKeyXml)
            {
                if (data == null || data.Length == 0) throw new ArgumentException(""Data are empty"", ""data"");
                if (!IsKeySizeValid(keySize)) throw new ArgumentException(""Key size is not valid"", ""keySize"");
                if (String.IsNullOrEmpty(publicAndPrivateKeyXml)) throw new ArgumentException(""Key is null or empty"", ""publicAndPrivateKeyXml"");

                using (var provider = new RSACryptoServiceProvider(keySize))
                {
                    provider.FromXmlString(publicAndPrivateKeyXml);
                    return provider.Decrypt(data, OptimalAsymmetricEncryptionPadding);
                }
            }
</code></pre>

<p>but passing down my <code>PUBLIC KEY</code> rather than the <code>PRIVATE KEY</code>. At this point, I am getting an error ""Key does not exist"".</p>

<p>I'm presuming this is the case because the <code>PRIVATE KEY</code> contains the relevant key information for the <code>PUBLIC KEY</code> so it can decode this one-way.</p>

<p>How can I sign a block of text in this way that allows me to distribute a signature with it, that can be decrypted by anybody who knows my <code>PUBLIC KEY</code>? </p>
","<p>After much trawling, I found this page:
<a href=""http://juzzbott.com.au/blog/signing-and-verifying-data-within-csharp"" rel=""nofollow"">http://juzzbott.com.au/blog/signing-and-verifying-data-within-csharp</a></p>
","173","<public-key-encryption><signing><private-key><sha256><public-key>","0","0","1","2013-06-04 20:35:52","","0","","","","","2013-06-04 10:15:29",""
"34752904","How to cancel or delete a signed/authorized public key? (Revocation of public key)","<p>If I have signed a key from Public key authority or public key certificate how can I cancel it?</p>

<p>And here some pictures which shows how public key authority and public key certificate works 
<a href=""https://i.stack.imgur.com/XtWYE.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/XtWYE.png"" alt=""public key authority""></a></p>

<p><a href=""https://i.stack.imgur.com/6nNgI.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/6nNgI.png"" alt=""public key certificate""></a></p>
","<p>In the environment you described and illustrated in your question, in order to initiate a encrypted comunication, the <code>Initiator</code> has to encrypt the data with the <code>Responder</code> <code>public key</code>, so when the <code>Responder</code> receives a message, will be able to decrypt it with its <code>private key</code>.</p>

<p>So the authorities described in the diagrams, play the roles of <code>public-key</code> distribution, and trust authority, confirming that users are really who they say they are. This means that by uploading a <code>public key</code> or sign ing a <code>public certificate</code> with these authorities, you are just providing other users/machines a mechanism to comunicate with you in a secure maner.</p>

<p>If you want to cancel that public key/certificate from being available, or in other words, prevent your key/certificate to be available to anyone to initiate a secure comunication with you, is the authority who has control over it, becasue it lies in their database, and this is why, you should ask them to revoke the key or the certificate.</p>
","172","<public-key><data-security>","0","0","1","2016-01-13 13:09:37","34767083","4","","5396946","","2016-01-13 13:09:37","2016-01-12 20:11:04",""
"8892965","Pass PublicKey Object from service to activity in Android?","<p>I'm trying to pass a <code>PublicKey</code> object from a service to an activity. However, the <code>Aidl</code> doesn't seem to support the <code>PublicKey</code> type. Any ideas on how to do this?</p>
","<p>If you already have your public key you should put it into the /res/raw/ folder and retrieve it from there. Or store it in filesystem <code>activity.getFilesDir().getAbsolutePath()</code> would be your path. You can also use  - pass Objects over IPC as described here in the article <a href=""http://developer.android.com/guide/developing/tools/aidl.html"" rel=""nofollow"">http://developer.android.com/guide/developing/tools/aidl.html</a> 
hope this helps.</p>
","172","<android><service><android-activity><public-key><aidl>","1","0","1","2012-01-17 15:49:56","","0","","1101070","","2012-01-17 15:49:56","2012-01-17 10:23:47",""
"39260300","Preventing JSON domain spoofing","<p>Here's the scenario. A customer already has an eCommerce site where they are collecting shipping address info and credit card data. However, they sign up with a SaaS service that allows them to easily change their credit card form <strong>to also collect fullnames and emails</strong> (not credit card info) into a marketing system for other purposes. So, they paste a jQuery snippet into their page from the SaaS service and add some ""data-"" attributes to their form and form field tags so that the SaaS service knows what to intercept and where to what SaaS account to post the data.</p>

<p>Okay, but then a security problem occurs. Let's say we have two separate customers in that SaaS system. One is named Jack and owns jack.com, and his account ID is 100001. The other is Nancy, nancy.com, and 100002. Jack could add the snippet into his form and add some ""data-"" attributes, but then screw up and set his account ID in one of those data- attributes to 100002 instead of 100001. This would mean that Nancy would suddenly see Jack's data in her account. Not good! The fix, of course, is to have some setting in Jack's SaaS account so that he only accepts data from jack.com, and Nancy only accepts data from nancy.com.</p>

<p>But then a potential exploit happens. All a hacker has to do is create a spoof page on his own server where he forms similar JSON and, via a /etc/hosts file change on his workstation, makes it appear that he's jack.com. He could then fire in thousands upon thousands of bogus marketing form information into Jack's account because the SaaS service thinks it's coming from jack.com.</p>

<p>Is there anything I can do in the jQuery code, or the PHP code used by the SaaS service, to ensure that a hacker can't spoof like that and that only Jack's real customer data gets sent?</p>

<p><strong>ANSWERED QUESTIONS</strong></p>

<p>Q1. ""How do you identify Jack and Nancy? By domain?""</p>

<p>A1. Jack has his domain jack.com. Nancy has her domain nancy.com. Each use this marketing SaaS service, but each are also co-opting an eCommerce form they already had before they signed up for the SaaS service. They were told in the SaaS docs, ""Just drop the scraper.js in your form page and add these data- tags to your form tag and html input, textarea, and select tags so that the scraper.js can intercept those form submits temporarily, glean the marketing data (full name and email, let's say) from that form, and then let that form submit on its workflow that you already had. The data- attributes would identify which account is to be used, as well as which marketing campaign and sub-campaign where this data should be stored at the SaaS service."" However, in the jQuery of scraper.js, it was going to pass in the JSON the location.href property so that it knows what domain was used -- jack.com or nancy.com, in this particular instance. Trouble is -- the location.href can be spoofed by a hacker who sets up an /etc/hosts file entry of 127.0.0.1 for jack.com on his workstation and runs a copy of the same JSON code.</p>

<p>Q2. ""What if you could use a callback mechanism from SaaS.com to jack.com? So, one of your data- attributes would specify the callback function to receive data back from SaaS.com, and then only save data when it gets the right response?""</p>

<p>A2. Now that's an interesting take. Yeah, so I could like drop an extra PHP page on jack.com that emits ""OK"". When SaaS.com receives a JSON data post from jack.com, it sends a request to that second PHP callback page on jack.com with file_get_contents() to ensure it not only gets the OK response back, but also gets a match on IP address and SSL certificate data. If the two are different, then most likely the request was a bogus hacker request and the transaction can be security logged and rejected. (I can do the IP address verification easily, but am not certain how to verify the same two SSL certificates in PHP, if that's even allowed or possible.) Of course, IP addresses can be spoofed.</p>

<p>Another layer of security on this is that this second PHP page can use a public/private key exchange communication check between SaaS.com and jack.com instead of simply emitting ""OK"".</p>

<p>Q3. ""Why would you want to intercept payment information and send that off through Javascript?""</p>

<p>A3. Absolutely not. Never specified sending payment information in this question. Was saying something like Full Name and Email, instead. Yes, SSL communication would need to be used as well in order to send that data securely. And, we'd have to use <a href=""https://stripe.com/blog/stripejs-and-jsonp"" rel=""nofollow"">JSONP to get around the CORS problem</a>.</p>

<p>Q4. ""Wouldn't that require jack.com to have everything saved in a database for verification? If so, why bother with the SaaS app?""</p>

<p>A4. Nope. Not at all. Check out the answer A2. With that mechanism, the SaaS app receives the data, but doesn't trust it until 2 things happen:</p>

<ol>
<li><p>It calls back to jack.com to a second page, and ensures that the response it gets back has the same IP address as the one that sent the form data in the first place.</p></li>
<li><p>It does a public/private key exchange check (which the hacker can't spoof obviously unless they have server access) in that second page to ensure that IP spoofing wasn't occurring.</p></li>
</ol>

<p>Q5. Wait a minute. A2 and A4 have a problem. The IP address of the initial sending request will be from the user's workstation, not the server. So, you can't validate IP that way. You'll have to use another mechanism to validate that someone completed the form at jack.com and that it wasn't from a hacker spoofing jack.com.</p>

<p>A5. You're absolutely right. Forgot about that I guess because I'm slightly distracted on another project. I'll have to give this some more thought.</p>
","<p>TL;DR: If you're using a purely client-side integration (just javascript), there's no way to completely secure the request.</p>

<h3>Accidentally/intentionally sending data to the wrong client</h3>

<p>You can mitigate this by using non-sequential, random UUIDs as account IDs.  For example, if an account ID looks like 100001, then someone might try using the account ID 100002; however, if the account ID looks like <code>c3f80e491d44cd91664a0459a0777ed01</code>, it's statistically unlikely that someone will be able to send data to an unknown account.</p>

<h3>Intentional spam/fictional submissions</h3>

<p>This is a problem with any form that stores data on the internet; I'm not aware of any way around this without help from some server side code.</p>

<p>You can generate a one-time token to be included with the json payload - this can be something like a dated JWT token secured via HMAC, or a set message encrypted with a shared secret key which would then be de-duped by the SAAS server.</p>

<p>If you're going to start involve server-side programming, then this additional negotiation process becomes a bit irrelevant - it's far easier to the just give the e-commerce site an API key, and let them post the customer information over when they receive an order.</p>
","169","<php><jquery><security><hash><public-key>","3","1","1","2016-09-01 00:55:03","39261152","13","0","105539","","2016-09-01 00:55:03","2016-08-31 23:00:04",""
"48677887","openssl_public_encrypt worked , but openssl_public_decrypt failed","<p>I got a public key and a message,</p>

<pre><code>    $msg = ""blablabla"";
    $public = '-----BEGIN PUBLIC KEY-----
     (some normal public key)
    -----END PUBLIC KEY-----';
</code></pre>

<p>the RsaEncode can encrypt</p>

<p>I do the RSA Encode the message</p>

<pre><code>function RsaEncode($msg,$publicKey){
  $temp = str_split($msg,117);
  $payload = array();
  foreach ($temp as $key =&gt; $value) {
    openssl_public_encrypt($value, $encrypted, $publicKey);
    array_push($payload, $encrypted);
  }
  $payload =implode($payload);
   $payload= base64_encode($payload);
  return $payload;
}
</code></pre>

<p>This function return is OK, I encode the message successfully, 
after I sent the result , I got a response $response that encrypt with private key.</p>

<p>so I decode it with public key:</p>

<pre><code>function RsaDecode($response,$publicKey){
 $payload = array();
 $payload2 = base64_decode($response);
 $temp = str_split($payload2,125);
 foreach ($temp as $key =&gt; $value) {
   openssl_public_decrypt($value, $encrypted, $publicKey);
   array_push($payload, $encrypted);
 }
 $payload =implode($payload);
 $result = utf8_encode($payload);
 return $result;
}
</code></pre>

<p>the $publicKey is the same $publicKey , </p>

<p>the statement :</p>

<pre><code>openssl_public_decrypt($value, $encrypted, $publicKey);
</code></pre>

<p>always return false.</p>

<p>How can I fix it?</p>
","<p>I solve it after i change  </p>

<pre><code>$temp = str_split($payload2,125);
</code></pre>

<p>to </p>

<pre><code>$temp = str_split($payload2,128);
</code></pre>

<p>the size can't too small</p>
","169","<php><rsa><public-key>","0","0","1","2018-02-08 06:44:59","","0","","","","","2018-02-08 05:01:30",""
"11630710","Non-Prime Factorization Public Key Algorithms and Code?","<p>I'm looking for public key algorithms that are not based on the difficulty of prime factorization. In particular, there are rumblings about the prime factorizations being solved in some state security apparatus with a combination of better algorithms and the horsepower for brute forcing.</p>

<p>I remember reading a few years back about alternative algorithms based on other equally difficult problems that won't be easily solved if P &lt;> NP.</p>

<p>What are the most promising research avenues in security and encryption that do not rely on prime factorization?</p>
","<p>Elliptic Curve is big these days. The math is pretty mind boggling, though.</p>

<p>McEliece is another alternative that meets your description.</p>

<p>Beyond that, you can just wander the wikipedia public key encryption references.</p>
","166","<public-key-encryption><prime-factoring><public-key>","0","0","1","2012-07-24 17:16:39","","0","","","","","2012-07-24 12:18:17",""
"22772403","public key verification using CA .cer file using javascript","<p>I want to verify public key of my algorithm using CA certificate. Is there any way to put .cer file of CA in browser certificate repository and verify signature using that certificate in javascript? </p>

<p>Use case: I used one algorithm for doing digital signature. So I generated public key and private key for user. So when user creates any document I am putting signature on that document. And using javascript I am verifying signature using public key of user. Now the problem is anyone can create their own public key and signature for that document. So my question is to verify public key using CA certificate. Is there any way to do it?</p>
","<p>For reasons of security, javascript cannot download and install a certificate into the browsers trusted certificate store. Think about it in terms of visiting dodgy sites.....</p>
","165","<javascript><public-key><ca>","0","1","1","2014-03-31 22:32:00","","6","","816620","","2014-03-31 22:32:00","2014-03-31 21:19:58",""
"35687711","(Erlang) Got error while parsing ecsda public key pem file","<p>I made private and public keys files as</p>

<pre><code>openssl ecparam -name secp256k1 -genkey -out gen.pem

openssl ec -in gen.pem -pubout -out gen.pub
</code></pre>

<p>then I checked .pub file</p>

<pre><code>openssl pkey -in gen.pub  -pubin -text -noout

Public-Key: (256 bit)
pub: 
    04:fc:de:4f:2a:77:bd:c4:f2:74:2b:ba:b5:fc:85:
    e4:aa:96:a7:8e:86:14:bc:0d:fa:8e:d2:dd:50:3c:
    5d:fa:f4:07:f4:17:80:49:06:19:0c:72:03:63:4e:
    07:37:e9:10:64:c8:33:a4:a3:7e:26:d8:df:79:21:
    d7:2d:a6:01:80
ASN1 OID: secp256k1
</code></pre>

<p>After that start erl</p>

<pre><code>erl
Erlang/OTP 18 [erts-7.2] [source-e6dd627] [64-bit] [smp:3:3] [async-threads:10] [hipe] [kernel-poll:false]
</code></pre>

<p>After execution of commands</p>

<pre><code>1&gt;rr(public_key),
  {ok,RawData} = file:read_file(""gen.pub""),
  Decoded = public_key:pem_decode(RawData),
  [public_key:pem_entry_decode(X) || X &lt;- Decoded ].
</code></pre>

<p>I got exception</p>

<pre><code>** exception error: no match of right hand side value 
                    {error,{asn1,{invalid_length,1}}}
     in function  public_key:der_decode/2 (public_key.erl, line 229)
</code></pre>

<p>I know that there are workarounds, but I'm wondering if I do something wrong or there are errors in public key modules ?</p>

<p><strong>UPD 1.</strong></p>

<p>When we look at result </p>

<pre><code>{ok,#'SubjectPublicKeyInfo'{algorithm = #'AlgorithmIdentifier'{algorithm = {1,2,840,10045,2,1},
                                                           parameters = &lt;&lt;6,5,43,129,4,0,10&gt;&gt;},
                        subjectPublicKey = &lt;&lt;4,241,200,19,168,25,25,81,43,216,
                                             89,201,37,62,66,39,166,231,161,98,
                                             223,133,119,12,...&gt;&gt;}}
</code></pre>

<p>we can see next :</p>

<p>{1,2,840,10045,2,1} is oid of ecPublicKey <a href=""http://oid-info.com/get/1.2.840.10045.2.1"" rel=""nofollow"">http://oid-info.com/get/1.2.840.10045.2.1</a></p>

<p>parameters = &lt;&lt;6,5,43,129,4,0,10>></p>

<pre><code>'OTP-PUB-KEY':decode('EcpkParameters',&lt;&lt;6,5,43,129,4,0,10&gt;&gt;).
</code></pre>

<p>gives us</p>

<pre><code>{ok,{namedCurve,{1,3,132,0,10}}}
</code></pre>

<p>and</p>

<pre><code>pubkey_cert_records:namedCurves({1,3,132,0,10}).
</code></pre>

<p>gives us our source curve  - secp256k1, and </p>

<pre><code> subjectPublicKey = &lt;&lt;4,241,200,19,168,25,25,81,43,216,
                    89,201,37,62,66,39,166,231,161,98,
                    223,133,119,12,...&gt;&gt;
</code></pre>

<p>is public key itself. But this is workaround how I said before. </p>
","<p>I tried your steps and it worked for me straight away:</p>

<pre><code>g@crayon2:~/test % openssl ecparam -name secp256k1 -genkey -out gen.pem

g@crayon2:~/test % openssl ec -in gen.pem -pubout -out gen.pub
read EC key
writing EC key

g@crayon2:~/test % openssl pkey -in gen.pub -pubin -text -noout
Public-Key: (256 bit)
pub: 
    04:f1:c8:13:a8:19:19:51:2b:d8:59:c9:25:3e:42:
    27:a6:e7:a1:62:df:85:77:0c:ef:f7:0e:0e:19:93:
    df:e6:f5:42:66:7e:ee:02:07:76:85:19:a4:a8:2d:
    03:11:73:0c:b2:d4:4c:c7:0e:42:d3:30:b5:51:e3:
    97:45:f8:b5:6a
ASN1 OID: secp256k1

g@crayon2:~/test % erl
Erlang/OTP 18 [erts-7.2.1] [source] [64-bit] [smp:4:4] [async-threads:10] [hipe] [kernel-poll:false]

Eshell V7.2.1  (abort with ^G)

1&gt; rr(public_key).
['AAControls','ACClearAttrs','AccessDescription',
 'Algorithm','AlgorithmIdentifier',
 'AlgorithmIdentifierPKCS-10','AlgorithmIdentifierPKCS-8',
 'AlgorithmIdentifierPKCS5v2-0','AlgorithmIdentifierPKSC-7',
 'AlgorithmNull','AnotherName','AttCertValidityPeriod',
 'Attribute','AttributeCertificate',
 'AttributeCertificateInfo','AttributePKCS-10',
 'AttributePKCS-7','AttributeTypeAndValue',
 'Attributes_SETOF',
 'Attributes_SETOF_valuesWithContext_SETOF',
 'AuthorityKeyIdentifier','BasicConstraints',
 'BuiltInDomainDefinedAttribute','BuiltInStandardAttributes',
 'Certificate','CertificateList','CertificationRequest',
 'CertificationRequestInfo',
 'CertificationRequestInfo_attributes_SETOF'|...]

2&gt; {ok,Data}=file:read_file(""gen.pub"").
{ok,&lt;&lt;""-----BEGIN PUBLIC KEY-----\nMFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE8cgTqBkZUSvYWcklPkInpuehYt+Fdwzv\n9w4OGZPf5vVCZn7u""...&gt;&gt;}

3&gt; Dec=public_key:pem_decode(Data).
[#'SubjectPublicKeyInfo'{algorithm = &lt;&lt;48,86,48,16,6,7,42,
                                       134,72,206,61,2,1,
                                       6,5,43,129,4,0,10,
                                       3,66,0,4,241,200,
                                       ...&gt;&gt;,
                         subjectPublicKey = not_encrypted}]
</code></pre>

<p>My OpenSSL version:</p>

<pre><code>g@crayon2:~/test % openssl version
OpenSSL 1.0.1p-freebsd 9 Jul 2015
</code></pre>

<p>System is <code>FreeBSD 10.2-RELEASE</code>. Erlang version is in the shell output above. The <code>gen.pub</code> key that it generated for me (if you want to try to load it) is:</p>

<pre><code>g@crayon2:~/test % cat gen.pub
-----BEGIN PUBLIC KEY-----
MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAE8cgTqBkZUSvYWcklPkInpuehYt+Fdwzv
9w4OGZPf5vVCZn7uAgd2hRmkqC0DEXMMstRMxw5C0zC1UeOXRfi1ag==
-----END PUBLIC KEY-----
</code></pre>

<p>Do you maybe want to paste your key so that I can try to load it?</p>

<p><strong>Edit:</strong></p>

<p>Sorry, I missed the last step. This seems to be a bug in the OTP code. The <code>der_decode/2</code> function is called with <code>KeyType</code> set to <code>ECPoint</code>, see the <a href=""https://github.com/erlang/otp/blob/OTP-18.2.4/lib/public_key/src/public_key.erl#L136"" rel=""nofollow""><code>pem_entry_decode/1</code> function</a>. But <a href=""https://github.com/erlang/otp/blob/OTP-18.2.4/lib/public_key/src/public_key.erl#L223"" rel=""nofollow""><code>der_decode/2</code> expects <code>Asn1Type</code></a>. Calling the <code>'OTP-PUB-KEY'</code> module directly seems to be working:</p>

<pre><code>8&gt; Bin = hd(Dec)#'SubjectPublicKeyInfo'.algorithm.
32&gt; 'OTP-PUB-KEY':decode('SubjectPublicKeyInfo', Bin).
{ok,#'SubjectPublicKeyInfo'{algorithm = #'AlgorithmIdentifier'{algorithm = {1,
                                                                            2,840,10045,2,1},
                                                               parameters = &lt;&lt;6,5,43,129,4,0,10&gt;&gt;},
                            subjectPublicKey = &lt;&lt;4,241,200,19,168,25,25,81,43,216,
                                                 89,201,37,62,66,39,166,231,161,98,
                                                 223,133,119,12,...&gt;&gt;}}
</code></pre>

<p>However I am not sure if it returns anything sensible. Maybe worth raising a bug in OTP with the code that you posted in this question as steps to reproduce. Then at least someone competent would verify why it doesn't work. I am sure the steps you followed are fine and the types returned and passed to further functions are OK as far as <a href=""http://erlang.org/doc/man/public_key.html#pem_entry_decode-1"" rel=""nofollow"">the documentation</a> is concerned.</p>
","165","<erlang><public-key><pem><ecdsa>","1","1","2","2016-03-01 20:54:11","35698900","0","0","3182373","","2016-02-29 19:27:26","2016-02-28 20:14:39",""
"35687711","(Erlang) Got error while parsing ecsda public key pem file","<p>I made private and public keys files as</p>

<pre><code>openssl ecparam -name secp256k1 -genkey -out gen.pem

openssl ec -in gen.pem -pubout -out gen.pub
</code></pre>

<p>then I checked .pub file</p>

<pre><code>openssl pkey -in gen.pub  -pubin -text -noout

Public-Key: (256 bit)
pub: 
    04:fc:de:4f:2a:77:bd:c4:f2:74:2b:ba:b5:fc:85:
    e4:aa:96:a7:8e:86:14:bc:0d:fa:8e:d2:dd:50:3c:
    5d:fa:f4:07:f4:17:80:49:06:19:0c:72:03:63:4e:
    07:37:e9:10:64:c8:33:a4:a3:7e:26:d8:df:79:21:
    d7:2d:a6:01:80
ASN1 OID: secp256k1
</code></pre>

<p>After that start erl</p>

<pre><code>erl
Erlang/OTP 18 [erts-7.2] [source-e6dd627] [64-bit] [smp:3:3] [async-threads:10] [hipe] [kernel-poll:false]
</code></pre>

<p>After execution of commands</p>

<pre><code>1&gt;rr(public_key),
  {ok,RawData} = file:read_file(""gen.pub""),
  Decoded = public_key:pem_decode(RawData),
  [public_key:pem_entry_decode(X) || X &lt;- Decoded ].
</code></pre>

<p>I got exception</p>

<pre><code>** exception error: no match of right hand side value 
                    {error,{asn1,{invalid_length,1}}}
     in function  public_key:der_decode/2 (public_key.erl, line 229)
</code></pre>

<p>I know that there are workarounds, but I'm wondering if I do something wrong or there are errors in public key modules ?</p>

<p><strong>UPD 1.</strong></p>

<p>When we look at result </p>

<pre><code>{ok,#'SubjectPublicKeyInfo'{algorithm = #'AlgorithmIdentifier'{algorithm = {1,2,840,10045,2,1},
                                                           parameters = &lt;&lt;6,5,43,129,4,0,10&gt;&gt;},
                        subjectPublicKey = &lt;&lt;4,241,200,19,168,25,25,81,43,216,
                                             89,201,37,62,66,39,166,231,161,98,
                                             223,133,119,12,...&gt;&gt;}}
</code></pre>

<p>we can see next :</p>

<p>{1,2,840,10045,2,1} is oid of ecPublicKey <a href=""http://oid-info.com/get/1.2.840.10045.2.1"" rel=""nofollow"">http://oid-info.com/get/1.2.840.10045.2.1</a></p>

<p>parameters = &lt;&lt;6,5,43,129,4,0,10>></p>

<pre><code>'OTP-PUB-KEY':decode('EcpkParameters',&lt;&lt;6,5,43,129,4,0,10&gt;&gt;).
</code></pre>

<p>gives us</p>

<pre><code>{ok,{namedCurve,{1,3,132,0,10}}}
</code></pre>

<p>and</p>

<pre><code>pubkey_cert_records:namedCurves({1,3,132,0,10}).
</code></pre>

<p>gives us our source curve  - secp256k1, and </p>

<pre><code> subjectPublicKey = &lt;&lt;4,241,200,19,168,25,25,81,43,216,
                    89,201,37,62,66,39,166,231,161,98,
                    223,133,119,12,...&gt;&gt;
</code></pre>

<p>is public key itself. But this is workaround how I said before. </p>
","<p>I found that lines in public_key.erl ( lines 136-137 )</p>

<pre><code>'ECPoint' -&gt;
     der_decode(KeyType, Key0)
</code></pre>

<p>have to be replaced with</p>

<pre><code>'ECPoint' -&gt;
     {{KeyType,Key0},der_decode('EcpkParameters', Params)}
</code></pre>
","165","<erlang><public-key><pem><ecdsa>","1","0","2","2016-03-01 20:54:11","35698900","0","0","3182373","","2016-02-29 19:27:26","2016-02-28 20:14:39",""
"6839331","What difference does key length make when signing a file?","<p>I've never taken any classes on encryption or security and I'm trying to teach myself some basics, so forgive me if this is a silly question (don't worry, I'm not working on anything sensitive)</p>

<p>So, I'm playing around with Crypto++ so that I can make a signature of a file to see if the file has been edited by someone other than me. The test application that comes with the library looks like it has options (rs and rv) that do exactly what I want to do in my own program (verify the integrity of the signature of a file). Of course, before doing that I need to generate a public and private key. When doing so with the test application's g option it asks me to specify the key length in bits. What difference does the key length make?</p>
","<p>The key length determines how hard it is for someone to break your cryptography. For digital signatures, that means how hard is it for someone to generate a fake signature.</p>

<p>For RSA a key length of 1024 bits is sufficient for non-sensitive information, but it should only be used for a few years and then replaced with a new key. 2048 bits is stronger and 4096 is stronger still.</p>

<p>For a naive brute-force attacker, adding a single bit to the key length doubles the amount of work they need to do to compromise your key. However, algorithms like RSA do not scale in this way: a 2048-bit RSA key is not 2^1024 times as hard to break as a 1024-bit key (unless the attacker is <strong>really</strong> stupid).</p>

<p>Generally <em>public key</em> algorithms (e.g. RSA) need much larger keys than <em>symmetric key</em> algorithms (e.g. AES) because they rely on different mathematical properties.</p>

<p>For a good primer on cryptography you should check out <a href=""http://www.cs.auckland.ac.nz/~pgut001/tutorial/index.html"" rel=""nofollow"">Peter Gutmann's godzilla crypto tutorial</a>. It's pretty readable and gives you a good overview of how crypto works in its various forms.</p>
","164","<rsa><public-key><private-key><crypto++>","0","2","1","2011-07-27 04:25:00","6839408","0","","","","","2011-07-27 04:07:51",""
"42860107","How to use erlang public_key:decrypt_private?","<p>I try to encrypt text with public RSA key and decrypt this text using a private RSA key. When I encrypt user public key it works.</p>

<p>encode public_key</p>

<pre><code>encrypt_public_key(PlainText, PublicKey) -&gt;
[ RSAEntry2 ] = public_key:pem_decode(PublicKey),
PubKey = public_key:pem_entry_decode( RSAEntry2 ),
public_key:encrypt_public(PlainText, PubKey).
</code></pre>

<p>But when I try to decrypt this text using a private key, it does not work, and I don't know why.</p>

<p>decode private key</p>

<pre><code>decrypt_private_key(CryptText,PrivateKey) -&gt;
[ RSAEntry2 ] = public_key:pem_decode(PrivateKey),
PrivKey = public_key:pem_entry_decode( RSAEntry2 ),
Result =  public_key:decrypt_private(CryptText, PrivKey, rsa_pkcs1_padding ),
Result.
</code></pre>

<p>How i encode and try to decode</p>

<pre><code>PublicKey = ems_util:open_file(?SSL_PATH ++  ""/"" ++ binary_to_list(&lt;&lt;""public_key.pem""&gt;&gt;)),

        CryptoText = ems_util:encrypt_public_key(ResponseData2,PublicKey),
        PrivateKey = ems_util:open_file(?SSL_PATH ++  ""/"" ++ binary_to_list(&lt;&lt;""private_key.pem""&gt;&gt;)),
      %erro in this line
       TextPlain = ems_util:decrypt_private_key(TextCrypt,PrivateKey).
</code></pre>

<p>Error</p>

<pre><code>=ERROR REPORT==== 17-Mar-2017::10:59:29 ===
Ranch listener ems_http_server1, connection process &lt;0.2159.0&gt;, stream 1 had its request process &lt;0.2160.0&gt; exit with reason function_clause and stacktrace [{public_key,decrypt_private,[&lt;&lt;55,66,78,123,456,2456&gt;&gt;,&lt;&lt;55,173,2367,140,71&gt;&gt;,asn1_NOVALUE}],[{file,""public_key.erl""},{line,313}]},{ems_util,decrypt_private_key,2,[{file,""src/util/ems_util.erl""},{line,614}]},{ems_auth_user,do_barer_authorization,1,[{file,""src/auth/ems_auth_user.erl""},{line,51}]},{ems_dispatcher,lookup_request,1,[{file,""src/distpatcher/ems_dispatcher.erl""},{line,70}]},{ems_http_handler,init,2,[{file,""src/http/ems_http_handler.erl""},{line,22}]},{cowboy_handler,execute,2,[{file,""src/cowboy_handler.erl""},{line,39}]},{cowboy_stream_h,execute,3,[{file,""src/cowboy_stream_h.erl""},{line,172}]},{cowboy_stream_h,proc_lib_hack,3,[{file,""src/cowboy_stream_h.erl""},{line,157}]}]
</code></pre>

<p>I don't know what's happening. </p>
","<p>I describle the solution for my problem. The problem is the public and the private keys are generated wrongly. The right way to generate a pair key rsa using openssl is:</p>

<pre><code> openssl genrsa -out private.pem 2048
 openssl rsa -in private.pem -out public.pem -outform PEM -pubout
</code></pre>

<p>These commands generate a correct key pair and the code now ir working correctly.</p>
","164","<erlang><rsa><public-key-encryption><private-key><public-key>","0","0","1","2017-03-17 18:03:49","","1","","1816580","","2017-03-17 18:03:49","2017-03-17 14:28:15",""
"14981234","How to store client Certificates' public keys in Database?","<p>I am implementing Client Certificate Authentication in an asp.net application and I need to assign to each user from the table Users, the public key of his/her corresponding Client Certificate. How can I achieve this?  I am generating Client Certificates via <code>makecert.exe</code>.</p>
","","163","<sql><public-key>","1","","0","2013-02-20 13:38:08","","0","","","","","2013-02-20 13:38:08",""
"51606225","Corda Nodes with more than one public key","<p>I am trying to do a scenario which uses the composite keys . I want to have more than public keys so that i can sign a txn with either of the keys.</p>

<p>And the reference for the scenario is here :
<a href=""https://docs.corda.net/api/kotlin/corda/net.corda.core.crypto/-composite-key/index.html"" rel=""nofollow noreferrer"">https://docs.corda.net/api/kotlin/corda/net.corda.core.crypto/-composite-key/index.html</a></p>

<p>From my understanding , deployNodes task generate node with single public key.
please correct me if i am going out of the track.</p>
","<p>As of Corda 3.2, each node only has a single well-known keypair (i.e. a keypair that is linked to their identity in their certificate).</p>

<p>However, nodes can also generate as many confidential identity keypairs (i.e. keypairs they use when they want to remain confidential in a transaction) as they like. You generate these using:</p>

<pre><code>val partyAndCertificate = serviceHub.keyManagementService.freshKeyAndCert(
    ourIdentityAndCert, false)

val publicKey = partyAndCertificate.owningKey
</code></pre>

<p>Please note that the confidential identities API remains unstabilised as of Corda 3.2, as documented <a href=""https://docs.corda.net/corda-api.html#internal-apis-and-stability-guarantees"" rel=""nofollow noreferrer"">here</a>.</p>
","162","<blockchain><corda><public-key>","0","2","1","2018-07-31 10:00:26","51610686","0","","","","","2018-07-31 05:52:03",""
"16326925","Debugging public key authentication with paramiko","<p>Is there any way to confirm which file (and what contents) paramiko is sending out when attempting to authenticate using public key authentication?</p>

<p>Up until now the authentication has worked. It's not working all of a sudden and I want to confirm that the correct public key is being sent to the server.</p>

<p>Also, given a private key file, how does paramiko determine the public key to send to the server? Is this pulled from a file somewhere on the server, or is it calculated from the private key?</p>
","","161","<public-key-encryption><paramiko><public-key>","2","","0","2013-05-01 21:36:19","","0","","","","","2013-05-01 21:36:19",""
"51406336","Should production server have SSH key on developer's private github account?","<p>I have a private github repo that can obviously only be accessed with the correct credentials.  Currently I have created a public SSH key on the production server and added that to one of the developers github accounts.  This then allows us to pull in new code from the private github repo.</p>

<p>Now the obvious issue is that if the developer leaves the company, any further pulls will not work.  I wanted to know what is the best practice for ensuring that a live/production server pulls in code from a private github repo.</p>
","<ol>
<li><p>Don't rely on a developer's private repo for deployment. Any code owned by the company needs to be in a repository that is accessible by several people so that there is not a single point of failure.</p></li>
<li><p>Use a Continuous Integration/Continuous Deployment pipeline for deployment rather than deploying directly from the repo with a pull. <a href=""https://stackoverflow.com/questions/51406336/should-production-server-have-ssh-key-on-developers-private-github-account#comment89783989_51406336"">(As stated in comments by @marekful.)</a></p></li>
</ol>
","158","<git><github><ssh><server><public-key>","0","1","1","2018-07-18 16:07:48","51406565","3","","","","","2018-07-18 15:55:40",""
"38087366","Force Public-Key-Pins max-age to renew the Pins","<p>Regularly you set a max-age to Public-Key-Pins (HPKP) to be valid for 1 or 2 years in seconds. What about if you change before the SSL run out your SSL Certificate and Visitors still have the Public-Key-Pin of the old Certificate?</p>

<p>It should be done without that the Visitor has to do with the Browser.</p>
","<p><strong>Important distinction</strong>: Public key pinning pins the public key, not the certificate. The certificate <em>contains</em> the public key, but also contains a signature of the public key (and associated metadata) from a certificate authority.</p>

<p>How I use HPKP:</p>

<ol>
<li>Generate 3 key pairs.</li>
<li>Upload one to the server, use for HTTPS.</li>
<li>Include the SHA256 hash of all three public keys in the HPKP header.</li>
</ol>

<p>That gives me two backups. I keep them both on encrypted storage; one is kept on my person, the other in a safe.</p>

<p>Other people pin to intermediate certificates from multiple certificate authorities.</p>

<p>Also, a max-age of two months is adequate. Attackers also have certificate transparency (and the SSL Observatory for users with the HTTPS Everywhere extension) to contend with.</p>
","156","<ssl-certificate><public-key>","0","1","1","2016-06-28 22:39:26","38087407","0","","","","","2016-06-28 22:33:14",""
"29948083","API Authentication Method - am I doing it correctly?","<p>I'm incredibly new to building API authentication - so wanted to ensure I'm going about this the correct way as there could be major security flaws that I'm not aware of.</p>

<p>It's based on a secret/private key pair, where both the client and the server know the secret key, but it's obviously never passed along the wire.</p>

<p>Any feedback, insights or holes in this method would be greatly appreciated.</p>

<p><br /></p>

<p><strong>Step 1:</strong></p>

<hr>

<p>The client wants to make a request to the API, so asks for a nonce from the server - passing their public key.</p>

<p><br /><br />
<strong>Step 2:</strong></p>

<hr>

<p>The server lookups the users private key (using the provided public key) and hashes it (sha256) with a random 32 character string (the nonce).</p>

<p>The hashed nonce and public key are then stored to a local array.</p>

<p>The server then responds to the client with the un-hashed version of the nonce.</p>

<p><br /><br />
<strong>Step 3:</strong></p>

<hr>

<p>The client takes the nonce from the response and also hashes it with it's private key (which the client has locally).</p>

<p>It then makes a request to the server (along with the API task it wants to perform) and sends its version of the hashed nonce and public key. </p>

<p><br /><br />
<strong>Step 4:</strong></p>

<hr>

<p>The server takes the clients public key and hashed nonce, then checks the local array to see if the public key/nonce pair exist.</p>

<p>If the pair exist; authentication is passed, the request is allowed and the public key/nonce pair is removed from the local array.</p>
","<p>Let me start by saying I don't have any credentials in the security world. Please take everything I say with a grain of salt.</p>

<h2>A couple of general thoughts</h2>

<p>It seems like you want to roll your own which is <strong>a bad idea</strong> in any security-related area. Even more so when there are several alternatives in the wild that have been battle-tested.</p>

<p>Off the top of my head, I can name three ways for API authentication that are in wide use:</p>

<ol>
<li><p><strong>Basic authentication.</strong> Github provides this as a <a href=""https://developer.github.com/v3/auth/"" rel=""nofollow"">fall-back</a>: “intended to be used for scripts or testing (i.e., cases where full OAuth would be overkill).”</p></li>
<li><p><strong>OAuth.</strong> Github, Twitter, Facebook, LinkedIn, Google all use this. This protocol is well-specified but might be overkill for smaller projects. Thanks to widespread client library, it's fairly easy to implement.</p></li>
<li><p><strong>Hash-based message authentication code (HMAC).</strong> All Amazon Webservices use this. This might be the most under-appreciated solution since it's conceptually easier than OAuth: The client uses its private key to sign requests and send the signature + public key in the request. The server looks up the private key using the public key sent by the client and in turn creates a signature of the request. If the signatures match, the request is valid. Public and private keys have to be exchanged beforehand (AWS lets you download the private key once).</p></li>
</ol>

<p>From what you describe, HMAC is the closest candidate to what you want.</p>

<h2>A couple of thoughts specific to what you suggested</h2>

<ol>
<li><p>Your algorithm requires you to <strong>keep state on the server</strong> (cue “local array”). This is fine for a single server, but what do you do when you scale? When step #2 hits one server and step #3 another, the state has to be shared. You can of course use a shared DB (or cache) or whatever, but you have to think about this.</p></li>
<li><p><strong>Roundtrips.</strong> Requiring a 2-step authentication like you suggested, every client has to either send an additional request (to get the nonce) for each (payload) request or you have think about when to invalidate your pairs on the server. <strong>HMAC essentially does the same thing without request overhead.</strong></p></li>
<li><p><strong>Possible attack:</strong> I can flood your servers with client requests for nonces. Depending on your public key length, I might come up with valid public keys and I can tie up resources that are never used for the second request. Depending on how you handle that (see also point #1), I might bring your server down.</p></li>
</ol>
","154","<rest><authentication><authorization><private-key><public-key>","1","1","1","2015-05-02 12:01:46","30002040","0","1","","","","2015-04-29 15:23:17",""
"55341115","How to generate RSA public key from private key?","<p>I was reading a question on SO and find out that we can generate the public key from private key using <code>openssl</code> in python. Now I wonder how this works(the mathematics part) and  how can I implement the method in python or in C, without using the <code>openssl</code> or any other library ?</p>
","<p>If the private key is stored in CRT format (Chinese Remainder Theorem), there is no math involved; the format includes the public exponent. This is how OpenSSL tools ""create"" a public key from a private key.</p>

<p>If the private is not stored in CRT format, it's generally not feasible to compute the public exponent given the private exponent. You can, however, guess common public exponents and easily verify your guess.</p>

<p>Mathematically, in order to quickly compute one exponent using the other, you need to know the totient, a number computed from the factors of the modulus. And of course the security of RSA is predicated on the infeasibility of factoring the modulus. This relationship is symmetrical; it doesn't matter whether you know the public exponent and try to compute the private exponent, or vice-versa.</p>
","153","<encryption><rsa><public-key-encryption><public-key><pyopenssl>","2","2","1","2019-03-25 15:44:29","55341548","2","1","","","","2019-03-25 15:21:57",""
"52797337","How to generate entropy by myself? - RSA Golang","<p>I'm working with Golang's RSA encryption library. The following is the function to encrypt a message:</p>

<pre><code>func EncryptOAEP(hash hash.Hash, random io.Reader, pub *PublicKey, msg []byte, label []byte) ([]byte, error)
</code></pre>

<p>The random parameter is used as a source of entropy to ensure that encrypting the same message twice doesn't result in the same ciphertext. This parameter allow to use linux functions like getrandom(2) if available or /dev/urandom otherwise that serves as a random number generator by accessing environmental noise collected from devices and other sources. I don't want the EncryptOAEP function to use the functions of the operating system (getrandom(2) or /dev/urandom) to generate the random number. I need to generate a random number by myself (that is, outside the EncryptOAEP function) and then insert it into it. Is that possible with this library? In case it is not, what Golang's library could I use to achieve this behavior? I hope I was clear enough, any help will be appreciated, thanks!</p>
","<p>By design, it is possible and it is easy to do. Provide any <code>io.Reader</code> as the <code>random</code> argument. </p>

<p>Here's an example from the Go <code>crypto/rsa</code> package. I replaced the <code>crypto/rand</code> <code>io.Reader</code> with a <code>math/rand</code> <code>io.Reader</code> .</p>

<pre><code>package main

import (
    ""crypto/rsa""
    ""crypto/sha256""
    ""fmt""
    ""math/big""
    ""math/rand""
    ""os""
    ""time""
)

func main() {
    secretMessage := []byte(""send reinforcements, we're going to advance"")
    label := []byte(""orders"")

    // crypto/rand.Reader is a good source of entropy for randomizing the
    // encryption function.
    // rng := rand.Reader
    // However, you can use any io.Reader.
    // For example, math/rand.Reader
    rng := rand.New(rand.NewSource(time.Now().UnixNano()))

    ciphertext, err := rsa.EncryptOAEP(sha256.New(), rng, &amp;test2048Key.PublicKey, secretMessage, label)
    if err != nil {
        fmt.Fprintf(os.Stderr, ""Error from encryption: %s\n"", err)
        return
    }

    // Since encryption is a randomized function, ciphertext will be
    // different each time.
    fmt.Printf(""Ciphertext: %x\n"", ciphertext)
}

func fromBase10(base10 string) *big.Int {
    i, ok := new(big.Int).SetString(base10, 10)
    if !ok {
        panic(""bad number: "" + base10)
    }
    return i
}

var test2048Key *rsa.PrivateKey

func init() {
    test2048Key = &amp;rsa.PrivateKey{
        PublicKey: rsa.PublicKey{
            N: fromBase10(""14314132931241006650998084889274020608918049032671858325988396851334124245188214251956198731333464217832226406088020736932173064754214329009979944037640912127943488972644697423190955557435910767690712778463524983667852819010259499695177313115447116110358524558307947613422897787329221478860907963827160223559690523660574329011927531289655711860504630573766609239332569210831325633840174683944553667352219670930408593321661375473885147973879086994006440025257225431977751512374815915392249179976902953721486040787792801849818254465486633791826766873076617116727073077821584676715609985777563958286637185868165868520557""),
            E: 3,
        },
        D: fromBase10(""9542755287494004433998723259516013739278699355114572217325597900889416163458809501304132487555642811888150937392013824621448709836142886006653296025093941418628992648429798282127303704957273845127141852309016655778568546006839666463451542076964744073572349705538631742281931858219480985907271975884773482372966847639853897890615456605598071088189838676728836833012254065983259638538107719766738032720239892094196108713378822882383694456030043492571063441943847195939549773271694647657549658603365629458610273821292232646334717612674519997533901052790334279661754176490593041941863932308687197618671528035670452762731""),
        Primes: []*big.Int{
            fromBase10(""130903255182996722426771613606077755295583329135067340152947172868415809027537376306193179624298874215608270802054347609836776473930072411958753044562214537013874103802006369634761074377213995983876788718033850153719421695468704276694983032644416930879093914927146648402139231293035971427838068945045019075433""),
            fromBase10(""109348945610485453577574767652527472924289229538286649661240938988020367005475727988253438647560958573506159449538793540472829815903949343191091817779240101054552748665267574271163617694640513549693841337820602726596756351006149518830932261246698766355347898158548465400674856021497190430791824869615170301029""),
        },
    }
    test2048Key.Precompute()
}
</code></pre>

<p>Playground: <a href=""https://play.golang.org/p/KtqUuDC2Tai"" rel=""nofollow noreferrer"">https://play.golang.org/p/KtqUuDC2Tai</a></p>

<p>Output:</p>

<pre><code>Ciphertext: 47516ff9863897f8f5344d07bca363515856ace56fed5451ede414eb6771eff357f09ca67f07d0d918b6e7107975f83afc4eebc932a7d9ba3f48c3f70399af88917c852e46a3d43eaa9bc563c7780bf7cf090c0b5e1690ac77af9e7c8cc6ec0d2fb729eed3fb45c824754bfd898e02eee8dae88b4fb3277f6970dbb0b929da7c14d245e51ed3a3e63127efc3e4c438adcfce78bbc1117a134f5a9dd62f9ebc14f125561c959ce6963a2b8605687ab568ec570295bb8f25477c7bbcb7303d96e888a0150e23ea0dd4880fefe40d86567518784d7f54c594f2c0e576a14c210201bf9d75fbd96b70fdd793c28ffecaa5c036b2949dba6e66004ec2f0e676095f1c
</code></pre>
","152","<go><encryption><rsa><public-key-encryption><public-key>","2","2","1","2018-10-13 21:59:41","52797711","0","2","9508850","","2018-10-13 21:26:15","2018-10-13 21:08:06",""
"54390330","RSA key signing and verifying in Java(Android)","<p>I am having a slight problem with understanding the concept of RSA signing and verifying.
The problem is that I can create key pair (public and private key) which is perfectly fine.</p>

<pre><code>        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
        random = SecureRandom.getInstance(""SHA1PRNG"");
        keyGen.initialize(2048, random);
        KeyPair pair = keyGen.generateKeyPair();
        myPrivateKey = pair.getPrivate();
        myPublicKey = pair.getPublic();
</code></pre>

<p>Signing and verifying are as follows:</p>

<pre><code>        //Singing with private key
        Signature s = Signature.getInstance(""SHA1withRSA"");
        s.initSign(javaPrivateKey);

        //Verifying with public key
        Signature s = Signature.getInstance(""SHA1withRSA"");
        s.initVerify(javaPublicKey);
</code></pre>

<p>When I print myPrivateKey and myPublicKey, I see modulus(n) and public exponent(e) are the same for public and private key.</p>

<p>I have converted public and private keys to base64 and hex and I get the different values which is perfectly fine. However, I cannot sign the message with base64 or hex. I can sign it only with what I get from this: </p>

<pre><code>         myPrivateKey = pair.getPrivate();  
</code></pre>

<p>I am aware of that verifying needs to be done with the public key which is visible to everyone. When the message is verified by the receiver, does the receiver use modulus and exponent only? What part of the public key needs to be shared by the sender? Modulus and exponent or Base64 or hex value of the key?</p>
","<p>Yes, the receiver uses modulus and exponent only; there are no other components that are required mathematically speaking to verify a signature for RSA.</p>

<p>The mathematical operations are performed using large numbers (<code>BigInteger</code> values commonly when RSA is implemented in software). To perform any kind of calculation the implementation must regenerate these numbers. How these numbers are transmitted doesn't matter to the algorithm.</p>

<p>Commonly RSA public keys are encoded using something based on PKCS#1, which specifies the public key format using ASN.1 (which defines the structure) and BER/DER (which defines the encoding of that structure). Of course, different protocols may use different encodings of public keys. PGP for instance uses an entirely different ""package format"" to encode keys.</p>

<hr>

<p>Java however returns a SubjectPublicKeyInfo structure which is defines in the X.509 (certificate and CRL) specifications; besides the modulus and exponent is also contains an algorithm identifier to show that it <em>is</em> an RSA public key. So this structure can also be used to distribute other kind of key values. It can be retrieved by calling <code>getEncoded()</code> on the <code>RSAPublicKey</code> instance - assuming that this instance is compatible with the Oracle provided one - they generally are. Android's implementations certainly should be compatible with this structure. Note that the SubjectPublicKeyInfo structure contains the PKCS#1 public key structure <em>inside of it</em>.</p>

<p>To reverse you need an <code>KeyFactory.getInstance(""RSA"")</code> and derive the key using <code>X509EncodedKeySpec</code>, initialized with the given byte array.</p>

<hr>

<p><strong>If</strong> you need textual strings instead of binary then you can convert the bytes returned by <code>getEncoded()</code> into base 64 and hexadecimals. Of course, in that case, you need to reverse the encoding (i.e. decode) the result before being able to decode the bytes themselves.</p>

<p>It is also possible to encode the modulus and public exponent yourself. You can retrieve them using <code>RSAPublicKey.getModulus()</code> and <code>RSAPublicKey.getPublicExponent()</code>. To reverse them back into an <code>RSAPublicKey</code> you can use <code>KeyFactory.getInstance(""RSA"")</code> and <code>RSAPublicKeySpec</code>. That way you can for instance just create a string <code>""(&lt;modulus&gt;, &lt;exp&gt;)""</code> and use that to distribute the key. Generally you would want to keep to predefined standards though.</p>

<hr>

<p>Not covered in this answer is the fact that to verify with a public key you first need to establish <em>trust</em> in the public key. If you cannot trust the public key then you don't know who created the public key. In that case you can also not trust the result of your verification operation; the signature may have been created with a key pair of an adversary. Delving into Public Key Infrastructures (PKI / PKIX) is a bit too much for this answer though.</p>

<p>Likewise: SHA-1 is not considered secure anymore, <em>especially</em> for signature generation / verification. You would want to use at least <code>SHA256withRSA</code> or - slightly more advanced and somewhat more secure - an RSA scheme that uses PSS. 2048 bits is ever so slightly too small for comfort; using a 4096 bit key is advisable if your scheme allows it.</p>
","152","<android><rsa><public-key>","1","1","1","2019-01-27 17:00:48","54390548","0","","","","","2019-01-27 16:33:22",""
"9159124","Secure connect with remote host and check","<p>I need to write a program in C to check the occurrence of a computer's MAC address in a remote text file.</p>

<ol>
<li><p>Are there any simple to use ssh libs which allow a program to connect to a remote host and check if a file contains something?</p></li>
<li><p>Or should I use the <code>system()</code> function to run <code>ssh</code> and simple commands on the remote host.</p></li>
<li><p>It should be secure, so probably I need to use public keys. Is it possible to use the same public key from different computers (each with my program)?</p></li>
</ol>

<p>What I need is to check if the computer with the given MAC address (or other identifier) is allowed to do something. And this operation should be remote, so I could remotely enable/disable functionality.</p>
","<p>1) I don't know if it's simple, but there is <a href=""http://www.libssh.org/"" rel=""nofollow"">http://www.libssh.org/</a> from, IIRC, the same folks who do cURL</p>

<p>2) Yes, you should probably do this via the ""system function"" of a shell script (or system/popen, if you absolutely need to have the results inside a C program), as that will save you a great deal of trouble reimplementing things.</p>

<p>3) Public keys, yes; and while it's possible to reuse public keys on multiple hosts/users, it's not good security practice; better would be generating a keypair for each user/host and then adding the public key to .ssh/authorized_keys on the machine you need to connect to. This means that revoking keys is simply removing a line in a single text file instead of regenerating a key for multiple hosts. However, if it's not security-sensitive, or if security just plain doesn't matter in this instance(!), then using a single key may not be too insane. That is, if you need multiple clients to check for existence on a single host; if not, please update your question to be clearer in this regard.</p>
","151","<c><security><ssh><public-key>","0","2","1","2012-02-06 13:18:03","","1","","15168","","2012-02-06 13:18:03","2012-02-06 11:00:32",""
"38915352","Load public key from unsigned char array","<p>I have a public key as an array of bytes from xxd:</p>

<pre class=""lang-cxx prettyprint-override""><code>unsigned char publicKey_txt[] = {
 0x30, 0x82, 0x02, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, .. }; 
</code></pre>

<p>From previous Stack Overflow questions I have a general understanding that in my case a <code>StringSink</code> followed by load should work</p>

<pre class=""lang-cxx prettyprint-override""><code>StringSource publicstring(publicKey_txt, true, NULL);
publicKey.Load(publicstring);
</code></pre>

<p>Simply loading from text file works, but when I load from <code>StringSink</code> I get an error:</p>

<pre class=""lang-none prettyprint-override""><code>Error: BER decode error
</code></pre>

<p>How do I load a public key from unsigned char array?</p>
","<p>Found my answer <a href=""https://stackoverflow.com/questions/9869261/load-rsa-pkcs1-private-key-from-memory?rq=1"">from @jww - Load RSA PKCS#1 private key from memory?</a></p>

<p>In my case slight modification instead of SinkSource I use the ArraySource and publicKey_txt_len is size of char array publicKey_txt.</p>

<pre><code>CryptoPP::ArraySource as( publicKey_txt, publicKey_txt_len, true);
publicKey.Load(as);
</code></pre>
","148","<public-key><crypto++>","1","1","1","2016-08-12 22:54:02","38917457","1","","608639","","2016-08-12 22:54:02","2016-08-12 10:08:09",""
"55536893","How to convert hex public key to ASN.1 SubjectPublicKeyInfo structure for Diffie-Hellman key exchange?","<p>I am trying to implement Diffie-Hellman key exchange to generate the symmetric key for encryption/decryption using JAVA cryptography packages. This requires a public key exchange between the two parties. </p>

<p>The public key shared by the client is 1024 bit hexadecimal string, which should be used to calculate the shared secret key. How to convert this string into an encoded key format (ASN.1 SubjectPublicKeyInfo structure) to create a PublicKey object.</p>

<p>Considering a sample public key string. Parameters <em>p</em> and <em>g</em> are fed into <em>inputDHParameterSpec</em> object.</p>

<p><strong>Sample implementation:
AutoGen keypair:</strong></p>

<pre class=""lang-java prettyprint-override""><code>    KeyPairGenerator clientKpairGen = keyPairGenerator.getInstance(""DiffieHellman"");
    clientKpairGen.initialize(inputDHParameterSpec);
    KeyPair clientKpair = clientKpairGen.generateKeyPair();
    byte[] clientPubKeyEnc = clientKpair.getPublic().getEncoded();

    X509EncodedKeySpec testPubKeySpec = new X509EncodedKeySpec(clientPubKeyEnc);
    KeyFactory keyFactory = KeyFactory.getInstance(""DiffieHellman"");
    PublicKey clientPubKey = keyFactory.generatePublic(testPubKeySpec);
</code></pre>

<p><strong>Hex PublicKey - failing:</strong></p>

<pre class=""lang-java prettyprint-override""><code>    String testPublicKey = ""85f04dd00345642ad12b65bd1a7c38728bff0b8e281ddb6ac4f2739e82a02145daabf23d173c933913b1f844059710e9125591569de427eae1d269accbfa3305069deb7622d1da3ad9820d11bd24fdcce5381d2df99bda314394738dfcbe210eae247b1303e79297ff746cd919e189f6a5776e6ecc24c8900de0f38f159072de"";
    X509EncodedKeySpec testPubKeySpec = new X509EncodedKeySpec(hexStringToByteArray(testPublicKey));
    KeyFactory keyFactory = KeyFactory.getInstance(""DiffieHellman"");
    PublicKey clientPubKey = keyFactory.generatePublic(testPubKeySpec);//Failing here
</code></pre>

<p>byte[] created in first code block has public key in ASN.1 encoded format, but <em>hexStringToByteArray(testPublicKey)</em> merely converts the hex to byte[]. Getting the below error on the marked line, due to this. </p>

<pre><code>Exception in thread ""main"" java.security.spec.InvalidKeySpecException: Inappropriate key specification
    at com.sun.crypto.provider.DHKeyFactory.engineGeneratePublic(DHKeyFactory.java:85)
    at java.security.KeyFactory.generatePublic(KeyFactory.java:334)
    at MWK_DHGen.main(MWK_DHGen.java:87)
Caused by: java.security.InvalidKeyException: Error parsing key encoding
    at com.sun.crypto.provider.DHPublicKey.&lt;init&gt;(DHPublicKey.java:178)
    at com.sun.crypto.provider.DHKeyFactory.engineGeneratePublic(DHKeyFactory.java:78)
    ... 2 more
</code></pre>

<p>Can someone help on how to convert this hex to the requried format here? A different implementation that would use this hex string to arrive at the secret key is also encouraged.</p>
","<p>If you already have the domain parameters (p, g) and just the integer value of the public key then a <a href=""https://docs.oracle.com/javase/8/docs/api/javax/crypto/spec/DHPublicKeySpec.html"" rel=""nofollow noreferrer""><code>DHPublicKeySpec</code></a> rather than an <code>X509EncodedKeySpec</code> is the way to go:</p>

<pre><code>String testPublicKey = ""85f04dd00345642ad12b65bd1a7c38728bff0b8e281ddb6ac4f2739e82a02145daabf23d173c933913b1f844059710e9125591569de427eae1d269accbfa3305069deb7622d1da3ad9820d11bd24fdcce5381d2df99bda314394738dfcbe210eae247b1303e79297ff746cd919e189f6a5776e6ecc24c8900de0f38f159072de"";
BigInteger publicKeyInteger = new BigInteger(testPublicKey, 16);
KeyFactory keyFactory = KeyFactory.getInstance(""DiffieHellman"");
PublicKey clientPubKey = keyFactory.generatePublic(new DHPublicKeySpec(publicKeyInteger, g, p));
</code></pre>
","147","<java><public-key><asn.1><diffie-hellman><public-key-exchange>","1","1","1","2019-04-05 16:00:10","55539379","0","","","","","2019-04-05 13:49:57",""
"27848123","Specifying version from angular-ui/bootstrap via bower -> error: Permission denied (publickey)","<p>I trying to get a specify git commit:</p>

<pre><code>bower install --save git@github.com:angular-ui/bootstrap.git#b72136e59211abb83643b28a61b031f1fbb524c2
</code></pre>

<p>But this command comes back with the following error:</p>

<blockquote>
  <p>Permission denied (publickey)</p>
</blockquote>

<p>Is there any way to avoid the installation from the public key. I don't want force all my colleague to install a key locally.</p>

<p>I also tried to get the master branch, but the bower file refers to the 0.12.0 version.</p>

<pre><code>bower install --save angular-bootstrap#master
</code></pre>

<p>Thanks, Stevo</p>
","<p>Try the https access.</p>

<p><code>bower install --save https://github.com/angular-ui/bootstrap.git#b72136e59211abb83643b28a61b031f1fbb524c2
</code></p>

<p>Related: <a href=""https://help.github.com/articles/error-permission-denied-publickey/"" rel=""nofollow"">https://help.github.com/articles/error-permission-denied-publickey/</a></p>
","147","<git><github><angular-ui-bootstrap><public-key>","0","0","1","2015-01-09 23:26:43","27870935","0","","","","","2015-01-08 19:32:28",""
"21093868","Permission denied, public key (GIT push)","<p>I am very new to coding, I have actually just started learning how to through the use of video tutorials. Anyway one of the steps along the path of learning is setting up an account on GIT and linking this account to my ruby command prompt, where all the work I do is saved onto this app. </p>

<p>The problem I have run into is that, for some reason, after following the instructions of both GIT and the video tutorial I am not quite able to do the following step. </p>

<p>git push -u origin master</p>

<p>the error I get is:
warning: Permanently added to the RSA host key for IP address ..... 
Permission denied (publickey).</p>

<p>My best guess is there is an issue with being an administrator or something along those lines but I do not possess the knowledge to change that at the moment. </p>

<p>I would like to point out here that I am a windows user, I have seen a lot of ""solutions"" out there which simply dont work for me as they include commands like ""sudo"" or others which do not exist in the windows format, well at least not on mine as I have decided not to go through Cygwin.</p>

<p>Any help would be appreciated. Thanks in advance to who ever tries to help! </p>
","<p>The issue is with your SSH public key. Somehow the git server is not able to recognize you and refuse to accept the code you pushed.</p>

<p>SSH keys are stored in <code>~/.ssh/</code>. You should make sure there's one created. If there's one, then link it with your git server account, otherwise, create one and link it.</p>

<p>Checkout this tutorial on creating SSH keys: <a href=""https://help.github.com/articles/generating-ssh-keys#platform-windows"" rel=""nofollow"">https://help.github.com/articles/generating-ssh-keys#platform-windows</a></p>
","145","<windows><git><github><public-key>","0","1","1","2014-01-13 15:37:53","","1","","1464605","","2014-01-13 14:40:32","2014-01-13 14:37:24",""
"4193437","Client proof public key encryption","<p>I want to set up an automated email of sensitive data to a non-techy client, and I'm looking for some very easy to use public key encryption (or rather decryption) desktop software I can supply them which will allow them to generate a password protected key pair, present the public key to them in a way which they can easily put in an email to me, and then offer a nice straightforward browse-select-decrypt function they can use on any downloaded attachment I send them. At my end I'd be hoping to use the likes of Bouncy Castle's PGP. </p>

<p>Does anyone have any recommendations? I've looked at GPG and SecureZip and neither appears straightforward and focused enough. The less the software does beyond generate and decrypt the better really, otherwise I'm going to be pushed towards using symmetric Winzip password protection.</p>
","<p>You can use commercial/opensource library (Which uses OpenPGP, or ZIP encryption, or whatever else), and write small utility, which will do the needed task for customer.</p>
","144","<.net><security><public-key><pgp><public-key-encryption>","0","0","2","2011-02-08 04:13:09","","2","1","","","","2010-11-16 11:00:44",""
"4193437","Client proof public key encryption","<p>I want to set up an automated email of sensitive data to a non-techy client, and I'm looking for some very easy to use public key encryption (or rather decryption) desktop software I can supply them which will allow them to generate a password protected key pair, present the public key to them in a way which they can easily put in an email to me, and then offer a nice straightforward browse-select-decrypt function they can use on any downloaded attachment I send them. At my end I'd be hoping to use the likes of Bouncy Castle's PGP. </p>

<p>Does anyone have any recommendations? I've looked at GPG and SecureZip and neither appears straightforward and focused enough. The less the software does beyond generate and decrypt the better really, otherwise I'm going to be pushed towards using symmetric Winzip password protection.</p>
","<p>Depending on your budget and existing apps, you could use a standard PGP plugin for Microsoft Outlook which will offer very simple encrypt/decrypt integration by the addition of a simple button to the existing icons.</p>

<p>Lotus Notes also has a similar plugin, and there are a range of open source ones as well.</p>

<p>Using this route you minimise problems with user knowledge. If they are slightly more tech savvy, you can use various apps such as Windows Privacy Tray (which incorporates GPG and is free) but it does require a couple of simple steps to encrypt/decrypt/manage keys etc.</p>
","144","<.net><security><public-key><pgp><public-key-encryption>","0","0","2","2011-02-08 04:13:09","","2","1","","","","2010-11-16 11:00:44",""
"9064974","Authorize permanently by remote machine with SSH","<p>I have remote machine which I connect with ssh like this:</p>

<pre><code>ssh -i /path/to/private_key loginName@my.remote.machine.com -L 5901:localhost:5901
</code></pre>

<p>Each time I connect I receive:</p>

<pre><code>Enter passphrase for key '/path/to/private_key':
</code></pre>

<p>I wonder how to prevent entering password each time? I.e. is that possible to permanently explain to remote machine that I am authorized user and it can trust me? </p>

<p><strong>P.S.</strong> When I issue <code>cat ~/.ssh/authorized_keys</code> on the remote machine I can see my public key content. But it looks like remote machine always ignore it or something like that...</p>
","<p>Your SSH key is passphrase protected. The server isn't prompting you for a password, your local machine is asking for the passphrase to use the SSH key you provided.</p>

<p>Information to remove the passphase can be found here: <a href=""https://stackoverflow.com/questions/112396/how-do-i-remove-the-passphrase-for-the-ssh-key-without-having-to-create-a-new-ke"">How do I remove the passphrase for the SSH key without having to create a new key?</a></p>

<p>Edit: The best answer for the above question is: <a href=""https://stackoverflow.com/a/112409/965648"">https://stackoverflow.com/a/112409/965648</a></p>
","143","<https><ssh><public-key><private-key>","1","1","1","2012-01-30 14:29:09","9065000","0","","445517","","2012-01-30 14:29:09","2012-01-30 13:58:16",""
"38100472","How to generate passphrase protected RSA keys in Perl","<p>I'm trying to generate a public and private key with passphrase protection in Perl but I haven't found anything useful.</p>

<p>Until now I have found this link <a href=""http://search.cpan.org/~vipul/Crypt-RSA-1.57/lib/Crypt/RSA.pm"" rel=""nofollow"">http://search.cpan.org/~vipul/Crypt-RSA-1.57/lib/Crypt/RSA.pm</a> which seems very promising. However, I can decrypt my message without any passphrase although I have created them with a passphrase.</p>

<p>The other link was this <a href=""http://www.perlmonks.org/?node_id=903458"" rel=""nofollow"">http://www.perlmonks.org/?node_id=903458</a> but when I create my keys (in order to store them in the DB) I still can decrypt without using a passphrase.</p>

<p>In summary, I need a library which allows me to encrypt text using private keys using a passphrase for both.</p>

<p>Thanks for your help!</p>

<p>PD: Please no PGP encryption. </p>

<p>UPDATE</p>

<p>Here is a pice of code that does not work as expected:</p>

<pre><code>use strict;
use warnings;
use Data::Dumper;
use 5.010;
use Crypt::RSA;

my $rsa = new Crypt::RSA;

my ($master_public, $master_private) = $rsa-&gt;keygen(
   Identity =&gt; ""Someone"",
   Size     =&gt; 1024,
   Password =&gt; ""this is a password or passphare"",
) or die $rsa-&gt;errstr();

my $cyphertext = $rsa-&gt;encrypt (
   Message    =&gt; ""My Message that I want to encrypt"",
   Key        =&gt; $master_public,
   Armour     =&gt; 1,
) or die $rsa-&gt;errstr();

my $text = $rsa-&gt;decrypt (
    Cyphertext =&gt; $cyphertext,
    Key        =&gt; $master_private,
    Armour     =&gt; 1,
    # Here I expect to add the user's passphrase
) or die $rsa-&gt;errstr();

say $text;
</code></pre>
","<p>The passphrase for RSA is only used in regards to saving or reading the key on disk. At no point in your operation did you save the private key to disk so it is already unencrypted in memory.</p>

<p>From the private key documentation, you can see how to hide and save it to disc (the $master_private object you have is already an object of that type)</p>

<p><a href=""https://metacpan.org/pod/Crypt::RSA::Key::Private"" rel=""nofollow"">https://metacpan.org/pod/Crypt::RSA::Key::Private</a></p>
","142","<perl><rsa><private-key><public-key><passphrase>","0","2","1","2016-06-29 14:44:34","38102969","2","1","3359563","","2016-06-29 13:23:48","2016-06-29 13:05:44",""
"52207513","How to: scp over Jumphost, each with privatekeys","<p>I want to have an scp command over a Jumphost to the targetserver. Both, the Jumphost and the targetserver, require an key for the login.</p>

<p>If there would be no key required, I think this command would work:</p>

<pre><code>scp -o ProxyJump=usernameJumpserver@ipJumpserver filename usernameTargetserver@ipTargetserver:/path/filename
</code></pre>

<p>So, including a key, I get to this command:</p>

<pre><code>scp -i /pathOnMyClient/key -o ProxyJump=usernameJumpserver@ipJumpserver filename usernameTargetserver@ipTargetserver:/path/filename
</code></pre>

<p>Then I get the error ""usernameTargetServer@ipTargetserver: Permission denied (publickey).""</p>

<p>I can't add the (probably?) required -i /pathJumpserver/key to it. How does it work?</p>
","<p>I could not get this working with ProxyJump, so I fell back to the more verbose ProxyCommand instead.  This works for me for copying from A to C through B:</p>

<pre><code>scp -i &lt;path on A to key for C&gt; \
    -oProxyCommand=""ssh -i &lt;path on A to key for B&gt; -W %h:%p &lt;user&gt;@B"" \
    ${myFile} &lt;user&gt;@C:~/
</code></pre>
","141","<ssh><scp><public-key><ssh-tunnel>","0","0","1","2019-04-29 15:06:01","","0","","","","","2018-09-06 15:27:21",""
"36519160","HTTP Public Key Pinning in Azure throws malformed key error","<p>Has anyone had any luck configuring HTTP Public Key Pinning in Azure by updating the web.config? I receive errors about a malformed key but can't pin down where the syntax error is.</p>

<pre><code>&lt;configuration&gt;
&lt;system.webServer&gt;
    &lt;httpProtocol&gt;
        &lt;customHeaders&gt;
            &lt;clear /&gt;
        &lt;add name=""Public-Key-Pins"" value=""pin-sha256='AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA='; pin-sha256='AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA='; max-age=10; includeSubdomains;"" /&gt;
        &lt;/customHeaders&gt;
    &lt;/httpProtocol&gt;
&lt;/system.webServer&gt;
</code></pre>

<p></p>
","","140","<azure><public-key>","1","","0","2017-01-06 20:53:55","","1","","","","","2016-04-09 15:54:18",""
"54633546","How to fix ""need to have PyOpenSSL>=16.0.0 to generate public keys""","<p>I'm stopped by an error in generating public keys with Ansible's openssl_publickey module.
The system consists of a machine with RHEL 7.5 + Ansible 2.5 and some other machines with same o.s., python 2.7, pyOpenSSL==17.5.0, OpenSSL 1.0.2k-fips (26 Jan 2017).
The involved part of the playbook is (specifically ""generate public key"" task):</p>

<pre><code>- name: ""make sure the {{ certs_dir }} is present""
  file:
    state: directory
    path: ""{{ certs_dir }}""
    owner: ansible
    group: root
    mode: 0755

- name: ""create dir for certificates to be signed""
  file:
    state: directory
    path: ""{{ clients_certs_sign_req_dir }}""
    owner: ansible
    group: root
    mode: 0755
  delegate_to: localhost

- name: ""generate private key""
  openssl_privatekey:
    path: ""{{ certs_dir }}/{{item}}.pem""
    size: 2048
    type: RSA
    state: present
    mode: 0644
  with_items: ""{{ inventory_hostname }}""

- name: ""generate public key""
  openssl_publickey:
    path: ""{{ certs_dir }}/{{item}}_pub.pem""
    privatekey_path: ""{{ certs_dir }}/{{item}}.pem""
    format: PEM
    force: yes
    state: present
    mode: 0644
  with_items: ""{{ inventory_hostname }}""

- name: ""generate certificate signing request for host""
  openssl_csr:
    path: ""{{ certs_dir }}/{{item}}-cert-file.csr""
    privatekey_path: ""{{ certs_dir }}/{{item}}.pem""
    country_name: ""{{ca_country}}""
    organization_name: ""{{ca_organization}}""
    common_name: ""{{item}}""  
    subject_alt_name: ""{{ host_san }}""
  with_items: ""{{ inventory_hostname }}""
</code></pre>

<p>The error is:</p>

<pre><code>The full traceback is:
  File ""/tmp/ansible_S8LwIJ/ansible_module_openssl_publickey.py"", line 289, in main
    public_key.generate(module)
  File ""/tmp/ansible_S8LwIJ/ansible_module_openssl_publickey.py"", line 195, in generate
    raise PublicKeyError('You need to have PyOpenSSL&gt;=16.0.0 to generate public keys')

failed: [node02] (item=node02) =&gt; {
    ""changed"": false,
    ""invocation"": {
        ""module_args"": {
            ""attributes"": null,
            ""backup"": null,
            ""content"": null,
            ""delimiter"": null,
            ""directory_mode"": null,
            ""follow"": false,
            ""force"": true,
            ""format"": ""PEM"",
            ""group"": null,
            ""mode"": 420,
            ""owner"": null,
            ""path"": ""/usr/share/ca-certs/node02_pub.pem"",
            ""privatekey_passphrase"": null,
            ""privatekey_path"": ""/usr/share/ca-certs/node02.pem"",
            ""regexp"": null,
            ""remote_src"": null,
            ""selevel"": null,
            ""serole"": null,
            ""setype"": null,
            ""seuser"": null,
            ""src"": null,
            ""state"": ""present"",
            ""unsafe_writes"": null
        }
    },
    ""item"": ""node02"",
    ""msg"": ""You need to have PyOpenSSL&gt;=16.0.0 to generate public keys""
</code></pre>

<p>Any idea?   As a last chance I thought to generate the public key directly with openssl but would be a mix that I don't like very much.
Thanks
Rob</p>
","","139","<ansible><public-key><pyopenssl>","0","","0","2019-02-11 15:11:03","","1","","","","","2019-02-11 15:11:03",""
"42754215","public key distribution python","<p>So I am currently working on a messaging application in Python with the use of the sockets library. I have made an echo server and a simple client which allows sending messages. These messages are obviously sent to all connected users.</p>

<p>The next thing I want to do is to make my application secure by encrypting my messages with asymmetric encryption. To learn about encryption in Python I have made a couple of python scripts using pycrypto. </p>

<p>The thing I cant quite figure out is how I can or should distribute the keys. In a messaging application with several untracked users which connects and disconnects all the time, how do I generate both public and private keys so that I can successfully implement a asymmetric encryption such as RSA? And how can I make this work using python?</p>

<p>I am fairly new to pycrypto and encryption in general so any suggestions or corrections are greatly appreciated!</p>
","","134","<python><encryption><public-key><pycrypto><pki>","1","","0","2019-03-19 00:25:26","","3","","387076","","2019-03-19 00:25:26","2017-03-12 22:57:18",""
"35212881","setting up git public key on apache virtual host","<p>I have a VPS running CentOS 7 Apache server. I have my website in the /var/www/domain.com directory and I am having an issue setting up git. </p>

<p>I want to use a public key to connect to my git repository and I keep getting</p>

<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>when ever I try to run any type of git command, fetch, pull, clone...</p>

<p>I setup a .ssh public key in <code>/var/www/.ssh/id_rsa.pub</code>, using  </p>

<pre><code>sudo ssh-keygen
</code></pre>

<p>I added the key to BitBucket but no matter what I try I am getting errors.</p>

<p>Any suggestions?</p>

<p>P.S. the owner and group assigned to /var/www/.ssh is apache:apache with 
0700 permissions on the folder and all files under => /var/www/.ssh/</p>

<p>Also, I do have a private key located in /var/www/.ssh/id_rsa, and My /var/www/.ssh/config file looks like this:</p>

<pre><code>Host bitbucket.org
 IdentityFile /var/www/.ssh/id_rsa
</code></pre>
","<p>It is the public key that should go to BitBucket, while the private key should most likely go to the default location <code>~/.ssh/id_rsa</code>.</p>

<p>Mind that if you overwrite whatever existing private key is there, you will lose access to those systems you had originally access to. Better to generate or provide the matching public key to whatever private key is already located at <code>~/.ssh/id_rsa</code>.</p>

<p>If you do want to store a custom private key separate from it's default location, then that will have to be customized in your git settings.</p>

<p>To summarize:</p>

<ul>
<li>Make sure you have a private key stored at <code>~/.ssh/id_rsa</code>.</li>
<li>Send the matching public key to BitBucket.</li>
<li>You can store for safekeeping a copy of the public key at <code>~/.ssh/id_rsa/pub</code>. It will however not be used.</li>
<li>Make sure that privileges are set right for the following directories:

<ul>
<li>Your home directory (<code>~</code>)</li>
<li>The <code>~/.ssh</code> directory</li>
<li>The private key - <code>~/.ssh/id_rsa</code>.</li>
<li>and several other important files under <code>~/.ssh</code>.</li>
</ul></li>
</ul>

<p>You can use following script to get privileges fixed if it is broken:</p>

<pre class=""lang-sh prettyprint-override""><code>chmod go-w ~
[[ ! -d ~/.ssh ]] &amp;&amp; mkdir ~/.ssh
chmod 700 ~/.ssh

[[ -f ~/.ssh/id_rsa ]] &amp;&amp; chmod 600 ~/.ssh/id_rsa
[[ -f ~/.ssh/id_rsa.pub ]] &amp;&amp; chmod 640 ~/.ssh/id_rsa.pub
[[ -f ~/.ssh/authorized_keys ]] &amp;&amp; chmod 640 ~/.ssh/authorized_keys

chown ${USER}: ~
chown -R ${USER}: ~/.ssh
</code></pre>

<p>This should in most cases fix privilege related issues, as ssh will refuse to work if not setup right. If you have it any other way, you leave your system potentially vulnerable to an attack, and even if ssh doesn't work yet, your private key could get corrupted by an attack, or stolen.</p>

<p>Make sure the sample script did not get modified from it's original version (no stackoverflow edits by others), unless it was properly documented as to why the edit happened.</p>
","132","<git><apache><ssh><vps><public-key>","0","0","1","2016-02-04 22:40:32","","4","","3543339","","2016-02-04 22:35:49","2016-02-04 22:25:56",""
"54827993","Error importing RSA Public Key with BCryptImportKeyPair","<p>I'm trying to use Microsofts CNG to verify a Signature in Delphi 2007.
I got stuck importing the public key with BCryptImportKeyPair.</p>

<p>I always get a <strong>STATUS_INVALID_PARAMETER</strong> Error.</p>

<p>The Code looks like this:</p>

<pre><code>var
   i: Smallint;
   LResult: NTSTATUS;
   LRSA: BCRYPT_ALG_HANDLE;
   LKey: BCRYPT_KEY_HANDLE;
   LRsaKeyBlob: ^BCRYPT_RSAKEY_BLOB;
   LKeyInput: Pointer;
   LKeyCurrent: PByte;
   LKeySize: DWORD;
begin
   LRSA := 0;
   LKey := 0;

   LKeySize := SizeOf(BCRYPT_RSAKEY_BLOB) + 259; // 3 Bytes Exponent + 256 Bytes Modulus
   LKeyInput := GetMemory(LKeySize);
   try
      ZeroMemory(LKeyInput, LKeySize);

      LRsaKeyBlob := LKeyInput;
      LRsaKeyBlob.Magic := BCRYPT_RSAPUBLIC_MAGIC;
      LRsaKeyBlob.BitLength := 2048;
      LRsaKeyBlob.cbPublicExp := 3;
      LRsaKeyBlob.cbModulus := 256;
      LRsaKeyBlob.cbPrime1 := 0;
      LRsaKeyBlob.cbPrime2 := 15;

      LKeyCurrent := PByte(LKeyInput);
      Inc(LKeyCurrent, SizeOf(BCRYPT_RSAKEY_BLOB));
      for i := 0 to 2 do
      begin
         LKeyCurrent^ := CExponent[i];
         Inc(LKeyCurrent);
      end;
      for i := 0 to 255 do
      begin
         LKeyCurrent^ := CModulus[i];
         Inc(LKeyCurrent);
      end;

      LResult := BCryptOpenAlgorithmProvider(LRSA, BCRYPT_RSA_ALGORITHM, nil, 0);
      if not BCRYPT_SUCCESS(LResult) then Exit;
      LResult := BCryptImportKeyPair(LRSA, nil, BCRYPT_RSAPUBLIC_BLOB, LKey, PUCHAR(LKeyInput), LKeySize, 0);
      if not BCRYPT_SUCCESS(LResult) then Exit;

      ShowMessage('Yeah!');
   finally
      FreeMem(LKeyInput);
   end;
end;
</code></pre>

<p>I generated the Public/Private-Key pair in another Application (node.js-Backend).</p>

<p>The Problem I think is, that the Modulus may be incorrect. I saved the Public-Key as a PEM-File and converted it to an XML. (Used an Online-Service for this) This XML-File works perfeclty fine with an C#-Test-Application. I then converted the Base64 Modulus- and Exponent-Strings into HEX-Values and added them as constants to my Delphi-App.</p>
","","131","<delphi><rsa><public-key><delphi-2007><cng>","0","","0","2019-02-22 13:59:09","","0","","6375322","","2019-02-22 13:59:09","2019-02-22 13:15:28",""
"50336118","Why bitcoin address instead of public key?","<p>In asymmetric encryption it is quite common to publish your public key to others. With the public key everyone can verify signatures created with the according private key.</p>

<p>So why do crypto-currencies like bitcoin not simply use the public key as the output of a transaction directly?</p>

<p>Bitcoin is instead using a so called <a href=""https://en.bitcoin.it/wiki/Address"" rel=""nofollow noreferrer"">address</a>. What is the reason instead of just using the curve25519 public key?</p>
","<p>There are basically two advantages to publishing an address, i.e., a RIPEMD-160 hash of the public key, instead of the public key directly:</p>

<ul>
<li>The hash is only 160 bits compared to 256 bits of public key, so we safe about 1/3 of the space that we'd use when directly using public keys. This is both data transferred and stored at the endpoints. While the transferred size is pretty clear, storage comes in two forms as well: UTXO set size and on disk size.</li>
<li>Some limited protection against ECDSA being broken: should it become computationally feasible to create a signature given a public key, because of a weakness being discovered, we can avoid all funds being stolen by having this level of indirection. Assuming that it takes a while to generate a valid signature we can switch the signature algorithm, and the owners in possession of the private key still have a timing advantage w.r.t. an attacker, which would have to grab the public key from the wire, turn around and quickly compute a signature to a competing transaction.</li>
</ul>
","131","<bitcoin><signing><public-key>","0","1","1","2018-05-26 15:07:07","","1","","","","","2018-05-14 17:42:40",""
"53863853","How can I translate this Perl code for RSA Public key in python?","<p>I have the following JSON object which represents an RSA256 JWK which obtained from a website:</p>

<pre><code>jwk = {
    'e': 'AQAB', 
    'n': 'sAlE_mzYz-2jf_YpxulSJXv_2CGIquflNZWhXUaU1SkJm9P0riLAuzwK7WT5p0Ko3zmQHho70_7D9nqB01rA4ExrMIDKpprE0Qa7NAJN-kgZhd_A25HsdSfpOfpaLvR-mf9fuOTDPLRQCd5HnrjoQKjs3D_XfPmPnT_Ny5erviiky90GSfN9j2DP_5yeDprzWKF-EQ3EDdIWt3snr7AW8rzBcZ1ojyWxckLAeSKDerMXP-zVBUFJE9Kn60HZoGNvmATKaw8LwEbf8DGfrllgSLvhg7mDRMLlbcooQoWAFSfN7t7kFbPSOcvjrpx3Yw_KrEwBZXeUP3260ukmFOx8RQ',
 }
</code></pre>

<p>Below is the Perl code showing how a public-key object from the Crypt library can be constructed from the above jwk:</p>

<pre><code>use Crypt::OpenSSL::RSA;
use Crypt::OpenSSL::Bignum;
use MIME::Base64 qw/decode_base64url/;

sub public_key {
    my $rsa = Crypt::OpenSSL::RSA-&gt;new_key_from_parameters(
        Crypt::OpenSSL::Bignum-&gt;new_from_bin(decode_base64url($jwk-&gt;{n})),
        Crypt::OpenSSL::Bignum-&gt;new_from_bin(decode_base64url($jwk-&gt;{e})),
    );
    return $rsa-&gt;get_public_key_x509_string;
}
</code></pre>

<p>Two Questions:</p>

<p>How can I translate the above code into Python? The code below failed.</p>

<p>Once I have the public key object in python, how can I use it to verify a JWT signed by the corresponding private key? Please post a snippet showing exactly how it can be done.</p>

<pre><code>&gt;&gt;&gt; from Crypto.PublicKey import RSA
&gt;&gt;&gt; import base64
&gt;&gt;&gt; public_key = RSA.construct((base64.b64decode(jwk['n']), base64.b64decode(jwk['e'])))
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""my-virtual-env/lib/python2.7/site-packages/Crypto/PublicKey/RSA.py"", line 539, in construct
    key = self._math.rsa_construct(*tup)
  File ""my-virtual-env/lib/python2.7/site-packages/Crypto/PublicKey/_slowmath.py"", line 84, in rsa_construct
    assert isinstance(n, long)
AssertionError
</code></pre>
","<p>The error is raised because the <a href=""https://www.dlitz.net/software/pycrypto/api/current/Crypto.PublicKey.RSA-module.html#construct"" rel=""nofollow noreferrer"">RSA contructor</a> is expecting 2 long integers and you are using two strings.</p>

<p>The solution is to convert the base64 decoded string into an hexadecimal integer. </p>

<pre><code>from Crypto.PublicKey import RSA
import base64

n = int(base64.b64decode(jwk['n']).encode('hex'),16)
e = int(base64.b64decode(jwk['e']).encode('hex'),16)
e = long(e)

public_key = RSA.construct((n, e))
print(public_key)
</code></pre>

<p>Regarding the second question maybe you can use <a href=""https://www.dlitz.net/software/pycrypto/api/current/Crypto.PublicKey.RSA._RSAobj-class.html#verify"" rel=""nofollow noreferrer"">this method</a> to verify the validity of an RSA signature.</p>
","131","<python><perl><encryption><rsa><public-key>","2","2","1","2018-12-20 12:56:43","53868776","1","","1742777","","2018-12-20 10:17:30","2018-12-20 07:01:44",""
"31596663","How is the process of signing and verifying a release and why apache says that the signature file signed by a public key?","<p>I have started learning GPG and I am a bit confused about the infos I have found. The <a href=""https://www.gnupg.org/gph/en/manual/x135.html"" rel=""nofollow"">GnuPG documentation</a> says that</p>

<blockquote>
  <p>A signature is created using the <strong>private key</strong> of the signer</p>
</blockquote>

<p>But at the <a href=""http://www.apache.org/dev/release-signing#verifying-signature"" rel=""nofollow"">Apache's site</a>, they say:</p>

<blockquote>
  <p>The signature file is a digest of the original file signed by a <strong>public key</strong>...</p>
</blockquote>

<p>And on the <a href=""http://www.apache.org/dev/release-signing#detach-sig"" rel=""nofollow"">same site, in another section</a>, they say the following:</p>

<blockquote>
  <p>A digital signature is created from an original document using a <strong>private key</strong>.</p>
</blockquote>

<p>Now I suppose that the process of signing involves signing the hash of a release using the private key of the holder and not the public one like Apache says in the second link I have posted, or am I wrong? Otherwise, how could someone be ever able to decrypt the hash of a release signed with a public key if he/she doesn't have the private key of the holder? </p>

<p>Then, could someone simply explain in what the processes of signing and verifying a signature consist and what are the passages, e.g. for a software release like <a href=""https://maven.apache.org/download.cgi?Preferred=ftp://apache.mirrors.tds.net/pub/apache.org/"" rel=""nofollow"">Apache Maven</a>?</p>
","<p><strong>TL;DR</strong>: There is a mistake in the documentation, your understanding of signatures is right.</p>

<blockquote>
  <p>The signature file is a digest of the original file signed by a public [sic, this is should be private] key...</p>
</blockquote>

<p>Signing a document usually is performed by calculating the hash sum of the document (asymmetric cryptography is very slow for large amounts of data), which finally is <em>encrypted</em> using the private key, so anybody can <em>decrypt</em> it using the public key. If the decryption process results in the same hash sum as is calculated from the original document, it must have been encrypted using the private key - which is only known to the signer; thus the authorship is verified.</p>

<p>Encryption (leaving apart the aspect of hybrid cryptosystems like OpenPGP is, but the general concept stays the same) works the other way round; the public key is used for encryption, so only the private key can be used to decrypt the information.</p>

<p>I added a <a href=""https://issues.apache.org/jira/browse/INFRA-10040"" rel=""nofollow"">bug report for the documentation issue</a> (closed/fixed since 2015-07-29).</p>

<blockquote>
  <p>Then, could someone simply explain in what the processes of signing and verifying a signature consist and what are the passages?, e.g. for a software release like Apache Maven -> <a href=""https://maven.apache.org/download.cgi?Preferred=ftp://apache.mirrors.tds.net/pub/apache.org/"" rel=""nofollow"">https://maven.apache.org/download.cgi?Preferred=ftp://apache.mirrors.tds.net/pub/apache.org/</a> ?</p>
</blockquote>

<ol>
<li>You need to fetch the public key used for signing the software (usually, you will download it from a keyserver using <code>gpg --recv-key [key-id]</code>.</li>
<li>Verify the key's integrity, for example by speaking with the developers, your web of trust, the products HTTPs-encrypted website (depending on how paranoid you're at verifying the authorship).</li>
<li>Issue a signature to certify the key if it is not already verified through your web of trust, if you don't want to create a public one, there are also local signatures which are never transmitted to the key server network.</li>
<li>Finally, use <code>gpg --verify</code> to check that the signature was indeed issued by the product maintainer's key.</li>
</ol>
","128","<apache><gnupg><public-key><software-release><private-key>","1","1","1","2015-07-29 15:41:43","31598532","0","","1252759","","2015-07-24 14:20:24","2015-07-23 19:40:19",""
"51236463","Host key formats","<p>I understand what host keys are and how the public host key on a server is used to identify the identity of the host to avoid a man in the middle attack. As per my understanding, the host keys are generated using either of the rsa/dsa/ecdsa/ed25519 algorithms. My goal is to verify if a given string is in the right format of a host keys. Is verifying if the format is in a valid OpenSSH rsa/dsa/ecdsa/ed25519  sufficient. I am not sure if I am missing any other formats. Any documentation would be really helpful. Thank you.</p>
","","128","<ssh><public-key><ssh-keygen>","1","","0","2018-07-08 22:31:34","","3","","","","","2018-07-08 22:31:34",""
"28408920","iOS Developer/Product Keys/Certificates Starting Again","<p>Our iOS development and distribution iMac fried and we lost all of our iOS certificates and keys for development and releasing apps.</p>

<p>All the Apple documentation I can find either relates to using a machine thats already got the details within it - however we've got nothing.</p>

<p>Using our developer account how can we generate the CSRs/Private Keys/Public Keys/Certificates etc again without needing anything from the old install?</p>

<p>Thanks</p>
","<p>You can't generate the same CSRs/Private keys/Public etc.</p>

<p>You need to revoke all the certificates and profiles, generate new certificates from you new mac KeyChain Access. This should not harm any thing either published apps or in development. </p>
","127","<ios><private-key><public-key><csr>","0","2","1","2015-02-09 11:49:54","","7","","","","","2015-02-09 11:40:27",""
"53029881","Unable to connect EC2 instance using ssh command","<p>I'm new on using EC2 and meet a unsolvable issue. I follow the guideline to set up the EC2 instance, and use ssh to connect. </p>

<pre><code>ssh -v -i ~/.ssh/EC2MyKeyPair.pem ec2-user@ec2-xx-xxx-xxx-xx.us-east-2.compute.amazonaws.com
</code></pre>

<p>I have changed the permission of pem file to 400</p>

<pre><code>chmod 400 ~/.ssh/EC2MyKeyPair.pem
</code></pre>

<p>Also, I have tried to change username to admin, ubuntu, ... But all the username listed in guideline are fail.</p>

<p>I tried to read the debug log, but unable to find the problem. It seems the username ""ec2-user"" is correct, is it fine is ""key_load_public"" is not found? And what is the problem cause the connection fail?</p>

<p>Thanks all!</p>

<pre><code>OpenSSH_7.6p1, LibreSSL 2.6.2
debug1: Reading configuration data /Users/xxx/.ssh/config
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 48: Applying options for *
debug2: ssh_connect_direct: needpriv 0
debug1: Connecting to ec2-xx-xxx-xx-xxx.us-east-2.compute.amazonaws.com port 22.
debug1: Connection established.
debug1: key_load_public: No such file or directory
debug1: identity file /Users/xxx/.ssh/EC2MyKeyPair.pem type -1
debug1: key_load_public: No such file or directory
debug1: identity file /Users/xxx/.ssh/EC2MyKeyPair.pem-cert type -1
debug1: Local version string SSH-2.0-OpenSSH_7.6
debug1: Remote protocol version 2.0, remote software version OpenSSH_7.4
debug1: match: OpenSSH_7.4 pat OpenSSH* compat 0x04000000
debug3: fd 5 is O_NONBLOCK
debug1: Authenticating to ec2-xx-xxx-xx-xxx.us-east-2.compute.amazonaws.com:22 as 'ec2-user'
debug3: hostkeys_foreach: reading file ""/Users/xxx/.ssh/known_hosts""
debug3: record_hostkey: found key type ECDSA in file /Users/xxx/.ssh/known_hosts:13
debug3: load_hostkeys: loaded 1 keys from ec2-xx-xxx-xx-xxx.us-east-2.compute.amazonaws.com
debug3: order_hostkeyalgs: prefer hostkeyalgs: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
debug3: send packet: type 20
debug1: SSH2_MSG_KEXINIT sent
debug3: receive packet: type 20
debug1: SSH2_MSG_KEXINIT received
debug2: local client KEXINIT proposal
debug2: KEX algorithms: curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1,ext-info-c
debug2: host key algorithms: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa
debug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
debug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
debug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: compression ctos: none,zlib@openssh.com,zlib
debug2: compression stoc: none,zlib@openssh.com,zlib
debug2: languages ctos: 
debug2: languages stoc: 
debug2: first_kex_follows 0 
debug2: reserved 0 
debug2: peer server KEXINIT proposal
debug2: KEX algorithms: curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519
debug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc
debug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,blowfish-cbc,cast128-cbc,3des-cbc
debug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: compression ctos: none,zlib@openssh.com
debug2: compression stoc: none,zlib@openssh.com
debug2: languages ctos: 
debug2: languages stoc: 
debug2: first_kex_follows 0 
debug2: reserved 0 
debug1: kex: algorithm: curve25519-sha256
debug1: kex: host key algorithm: ecdsa-sha2-nistp256
debug1: kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug1: kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug3: send packet: type 30
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug3: receive packet: type 31
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:xxxxxxxx/xxxx/xxxxxxxxxxxx+xxxxxxxxxxxxxxxx
debug3: hostkeys_foreach: reading file ""/Users/xxx/.ssh/known_hosts""
debug3: record_hostkey: found key type ECDSA in file /Users/xxx/.ssh/known_hosts:13
debug3: load_hostkeys: loaded 1 keys from ec2-xx-xxx-xx-xxx.us-east-2.compute.amazonaws.com
debug3: hostkeys_foreach: reading file ""/Users/xxx/.ssh/known_hosts""
debug3: record_hostkey: found key type ECDSA in file /Users/xxx/.ssh/known_hosts:13
debug3: load_hostkeys: loaded 1 keys from 18.223.29.186
debug1: Host 'ec2-xx-xxx-xx-xxx.us-east-2.compute.amazonaws.com' is known and matches the ECDSA host key.
debug1: Found key in /Users/xxx/.ssh/known_hosts:13
debug3: send packet: type 21
debug2: set_newkeys: mode 1
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug3: receive packet: type 21
debug1: SSH2_MSG_NEWKEYS received
debug2: set_newkeys: mode 0
debug1: rekey after 134217728 blocks
debug2: key: /Users/xxx/.ssh/EC2MyKeyPair.pem (0x0), explicit
debug3: send packet: type 5
debug3: receive packet: type 7
debug1: SSH2_MSG_EXT_INFO received
debug1: kex_input_ext_info: server-sig-algs=&lt;rsa-sha2-256,rsa-sha2-512&gt;
debug3: receive packet: type 6
debug2: service_accept: ssh-userauth
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug3: send packet: type 50
debug3: receive packet: type 51
debug1: Authentications that can continue: publickey
debug3: start over, passed a different list publickey
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Trying private key: /Users/xxx/.ssh/EC2MyKeyPair.pem
debug3: sign_and_send_pubkey: RSA SHA256:XR1+xxxxxxxx+xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
debug3: send packet: type 50
debug2: we sent a publickey packet, wait for reply
debug3: receive packet: type 51
debug1: Authentications that can continue: publickey
debug2: we did not send a packet, disable method
debug1: No more authentication methods to try.
ec2-user@ec2-xx-xxx-xx-xxx.us-east-2.compute.amazonaws.com: Permission denied (publickey).
</code></pre>

<hr>

<p>Updated:
For more information, my files under ~/.ssh</p>

<pre><code>drwx------    7 xxx  staff   224 Oct 28 16:15 .
drwxr-xr-x+ 100 xxx  staff  3200 Oct 28 16:50 ..
-r--------@   1 xxx  staff  1696 Oct 28 16:14 EC2MyKeyPair.pem
-rw-r--r--    1 xxx  staff   451 Dec 19  2016 config
-r--------    1 xxx  staff  1675 Apr 28  2015 id_rsa
-r--------    1 xxx  staff   405 Apr 28  2015 id_rsa.pub
-rw-r--r--    1 xxx  staff  4496 Oct 28 16:20 known_hosts
</code></pre>

<p>I read some references, their log contains accessing id_rsa, but i don't know why my log does not....</p>
","","126","<amazon-web-services><amazon-ec2><ssh><public-key>","0","","0","2018-10-28 22:59:21","","12","","174777","","2018-10-28 22:59:21","2018-10-28 09:02:12",""
"13799909","confusion in public and private key","<p>in Encryption and decryption same key is use to to convert plan text to cipher and cipher to plan text. so why in public key cryptograpy method sender Encrypt using receiver public key and receiver decrypt using his own private key ? </p>
","<p>Because it wouldn't be secure the other way around, or feasible either. Only the recipient has his private key, so nobody else can use it.</p>
","125","<encryption><private-key><pki><public-key>","-2","0","2","2012-12-10 21:00:39","","0","","207421","","2012-12-10 20:48:32","2012-12-10 11:17:45","2012-12-11 06:28:48"
"13799909","confusion in public and private key","<p>in Encryption and decryption same key is use to to convert plan text to cipher and cipher to plan text. so why in public key cryptograpy method sender Encrypt using receiver public key and receiver decrypt using his own private key ? </p>
","<p>What you initially refer to is symmetric encryption (shared key), which allows 2 entities to communicate securely based on a single shared key that is only known to the two entities.  This key can be exchanged several ways, but can't be publicized for obvious reasons.</p>

<p>Asymmetric encryption (public/private key) allows 2 entities to communicate securely as follows:</p>

<p>If one party wants to accept secure (encrypted) information, they need a key that isn't visible to the world (private), but they also have to be able to provide a key to anyone who wants to send encrypted information (public).</p>

<p>So I can give my public key out to the whole world and know the data is secure since only I have the private key, therefore I'm the only one who can decrypt it.</p>

<p>See Asymmetric Encryption in this Microsoft article: <a href=""http://support.microsoft.com/kb/246071"" rel=""nofollow"">http://support.microsoft.com/kb/246071</a></p>
","125","<encryption><private-key><pki><public-key>","-2","2","2","2012-12-10 21:00:39","","0","","207421","","2012-12-10 20:48:32","2012-12-10 11:17:45","2012-12-11 06:28:48"
"33479597","Private and public key separately","<p>οκ!I want to establish a client server communication oves SSL/TLS in java. The server is multithreaded. With openssl I acted as my own CA (created private key and self-signed certificate for the authority). Now I want to create keys and certs for my server and clients which are signed from the CA I created.</p>

<p>1)Do I have to create certs and keys from the prompt for every single client? Or is it another ""automated"" way eg with a script?</p>

<p>2) I have seen that this code for setting up keystores</p>

<pre>private void setupClientKeyStore() throws GeneralSecurityException, IOException 
    {
    clientKeyStore = KeyStore.getInstance( ""JKS"" );
    clientKeyStore.load( new FileInputStream( ""client1publickey.jks"" ),
                       ""password"".toCharArray() );
    }

    private void setupServerKeystore() throws GeneralSecurityException, IOException
    {
    InputStream keyStoreResource = new FileInputStream(""serverprivatekey.jks"");
    char[] keyStorePassphrase = ""password"".toCharArray();
    serverKeyStore = KeyStore.getInstance(""JKS"");
    serverKeyStore.load(keyStoreResource, keyStorePassphrase);
}
</pre>

<p>I have run the command to see what type of entries are these and client1publickey is a TrustedCert entry while serverprivatekey is a PrivateKey entry. This code is on my server class. I have this code on my client class <pre> private void setupServerKeystore() throws GeneralSecurityException, IOException {
    serverKeyStore = KeyStore.getInstance( ""JKS"" );
    serverKeyStore.load( new FileInputStream(""serverpublickwy.jks""), 
                        ""university"".toCharArray() );
  } 
   private void setupClientKeyStore() throws GeneralSecurityException, IOException {
    clientKeyStore = KeyStore.getInstance( ""JKS"" );
    clientKeyStore.load( new FileInputStream( ""client1privatekey.jks"" ),
                       ""university"".toCharArray() );}</pre>
The question is that how can I create these jks files separately? The publickey.jks file is cert, right? How can I have it in another file from the private key and be signed from CA? Or is it another way I can estabvlish connections between client/server? 
Firstly I had created the CA with openssl and then the two jks files for server and client included the certs and the key. Sorry for the english.</p>
","","125","<java><openssl><keystore><private-key><public-key>","1","","0","2016-12-24 15:02:30","","2","1","1033581","","2016-12-24 15:02:30","2015-11-02 14:12:08",""
"54758001","how to work with private keys and public keys in react app","<p>I am building an app where I need to decrypt messages using private keys.  The messages are encrypted with public keys that are previously communicated.  My question is, in a react type app environment (or more generic web app environment) what is the best practices in working with public/private keys?  I don't really want to store keys on behalf of the user, or is this something that is done by web apps?  Do I ask them to submit the private key every time there is data to be decrypted?  Is there a way to access the os key store from a react app?  Any recommendation is greatly appreciated.</p>
","","124","<reactjs><private-key><public-key>","0","","0","2019-02-19 02:26:03","","0","","","","","2019-02-19 02:26:03",""
"56062594","OpenSSL ECDH setting peer's public key in C","<p>I'm trying to integrate ECDH using OpenSSL in my C-SDK (which we will refer to as client) which is running on <strong>Ubuntu</strong> and needed some help regarding how to set the peer's (server) public key on the client side and eventually generating the shared secret.</p>

<h3>Some details:</h3>

<ol>
<li>I am successfully generating a public key and can also generate a shared secret on the server side which has an embedded microcontroller using the <code>mbedTLS</code> library.</li>
<li>The public key I receive from the server is in the form of a <code>uint8_t</code> array of size <code>32 bytes</code>.</li>
<li>I now want to use OpenSSL's ECDH to generate the public key for server and the shared secret on the client side.</li>
</ol>

<p>I found a sample code on the <a href=""https://wiki.openssl.org/index.php/Elliptic_Curve_Diffie_Hellman"" rel=""nofollow noreferrer"">OpenSSL wiki website</a> which is as below:</p>



<pre><code>#include &lt;openssl/evp.h&gt;
#include &lt;openssl/ec.h&gt;


unsigned char *ecdh(size_t *secret_len)
{
    EVP_PKEY_CTX *pctx, *kctx;
    EVP_PKEY_CTX *ctx;
    unsigned char *secret;
    EVP_PKEY *pkey = NULL, *peerkey, *params = NULL;
    /* NB: assumes pkey, peerkey have been already set up */

    /* Create the context for parameter generation */
    if(NULL == (pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL))) handleErrors();

    /* Initialise the parameter generation */
    if(1 != EVP_PKEY_paramgen_init(pctx)) handleErrors();

    /* We're going to use the ANSI X9.62 Prime 256v1 curve */
    if(1 != EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx, NID_X9_62_prime256v1)) handleErrors();

    /* Create the parameter object params */
    if (!EVP_PKEY_paramgen(pctx, &amp;params)) handleErrors();

    /* Create the context for the key generation */
    if(NULL == (kctx = EVP_PKEY_CTX_new(params, NULL))) handleErrors();

    /* Generate the key */
    if(1 != EVP_PKEY_keygen_init(kctx)) handleErrors();
    if (1 != EVP_PKEY_keygen(kctx, &amp;pkey)) handleErrors();

    /* Get the peer's public key, and provide the peer with our public key -
     * how this is done will be specific to your circumstances */
    peerkey = get_peerkey(pkey);

    /* Create the context for the shared secret derivation */
    if(NULL == (ctx = EVP_PKEY_CTX_new(pkey, NULL))) handleErrors();

    /* Initialise */
    if(1 != EVP_PKEY_derive_init(ctx)) handleErrors();

    /* Provide the peer public key */
    if(1 != EVP_PKEY_derive_set_peer(ctx, peerkey)) handleErrors();

    /* Determine buffer length for shared secret */
    if(1 != EVP_PKEY_derive(ctx, NULL, secret_len)) handleErrors();

    /* Create the buffer */
    if(NULL == (secret = OPENSSL_malloc(*secret_len))) handleErrors();

    /* Derive the shared secret */
    if(1 != (EVP_PKEY_derive(ctx, secret, secret_len))) handleErrors();

    EVP_PKEY_CTX_free(ctx);
    EVP_PKEY_free(peerkey);
    EVP_PKEY_free(pkey);
    EVP_PKEY_CTX_free(kctx);
    EVP_PKEY_free(params);
    EVP_PKEY_CTX_free(pctx);

    /* Never use a derived secret directly. Typically it is passed
     * through some hash function to produce a key */
    return secret;
}
</code></pre>

<p>The example has a <code>peerkey = get_peerkey(pkey);</code> line where it sets the peerkey and basically leaves it on the user to implement this function. I would imagine it would be straightforward if I was using OpenSSL on the server side as well.</p>

<h3>My question:</h3>

<p>Referring to the above code,and keeping in mind that I'm receiving the server's public key as a <code>uint8_t</code> array, how do I set the <code>EVP_PKEY *peerkey</code> context so that it contains the server's public key?</p>

<p>If there's another straight-forward crypto library in C that I can use on Ubuntu then please do suggest!</p>

<p>Really appreciate any help.</p>

<p>Thank you!</p>
","","122","<public-key><diffie-hellman><openssl>","1","","0","2019-05-09 15:15:42","","4","","","","","2019-05-09 15:14:15",""
"58122623","Rejecting mutual TLS gRPC connection based on RSA public key size","<p>I have a gRPC server which is using mutual TLS for encryption and authentication. So, every client that connects to this server provides an SSL certificate and I want to <strong>reject connections</strong> from clients who have a <strong>public key size less than 2048 bits</strong>. There seems to be no straightforward way to do this yet. </p>

<p>I was able to do it using a <code>ServerInterceptor</code> this way</p>

<pre class=""lang-java prettyprint-override""><code>public class SSLInterceptor implements ServerInterceptor {
    @Override
    public &lt;ReqT, RespT&gt; Listener&lt;ReqT&gt; interceptCall(ServerCall&lt;ReqT, RespT&gt; call, Metadata headers, ServerCallHandler&lt;ReqT, RespT&gt; next) {
        try {
            SSLSession sslSession = call.getAttributes().get(Grpc.TRANSPORT_ATTR_SSL_SESSION);
            RSAPublicKeyImpl pk = (RSAPublicKeyImpl) sslSession.getPeerCertificates()[0].getPublicKey();
            if (pk.getModulus().bitLength() &lt; 2048) {
                // reject call
            }
            // proceed with the call
        } catch (SSLPeerUnverifiedException e) {
            // do something
        }
        ...
    }
}
</code></pre>

<p>This is a bad way to do it because</p>

<ol>
<li>The validation is being done after the connection is already
established.</li>
<li>The validation is only triggered when a request/call is made.</li>
<li>Every single call involves an extra overhead of validation.</li>
<li>In case of a validation failure, only the call is rejected but not the connection to the client.</li>
</ol>

<p>In an ideal scenario</p>

<ol>
<li>The validation is done during the connection establishment phase. (or some point during the creation of the channel between client and server)</li>
<li>The validation failure would prevent the connection from being created and not set it up and disconnect later.</li>
<li>A client is only validated once per session and all the calls made during that session do not incur any overhead.</li>
</ol>

<p>How can I do this better?</p>
","<p>You can customize certificate checking by providing your own <code>javax.net.ssl.TrustManagerFactory</code> to Netty's <code>SslContextBuilder</code>. You'd probably want to implement <code>X509ExtendedTrustManager</code>, do your check, and then delegate to a ""real"" implementation for the rest of the cert chain checking.</p>

<p>You can do something like this to get the default-configuration <code>TrustManagerFactory</code>:</p>

<pre class=""lang-java prettyprint-override""><code>TrustManagerFactory tmf = TrustManagerFactory.getInstance(
    TrustManagerFactory.getDefaultAlgorithm());
tmf.init((KeyStore) null);
// loop through tmf.getTrustManagers() checking for one implementing X509TrustManager
</code></pre>
","122","<validation><ssl><grpc><public-key><grpc-java>","5","4","2","2019-09-29 07:39:19","58138414","5","","2498327","","2019-09-26 23:45:46","2019-09-26 18:19:30",""
"58122623","Rejecting mutual TLS gRPC connection based on RSA public key size","<p>I have a gRPC server which is using mutual TLS for encryption and authentication. So, every client that connects to this server provides an SSL certificate and I want to <strong>reject connections</strong> from clients who have a <strong>public key size less than 2048 bits</strong>. There seems to be no straightforward way to do this yet. </p>

<p>I was able to do it using a <code>ServerInterceptor</code> this way</p>

<pre class=""lang-java prettyprint-override""><code>public class SSLInterceptor implements ServerInterceptor {
    @Override
    public &lt;ReqT, RespT&gt; Listener&lt;ReqT&gt; interceptCall(ServerCall&lt;ReqT, RespT&gt; call, Metadata headers, ServerCallHandler&lt;ReqT, RespT&gt; next) {
        try {
            SSLSession sslSession = call.getAttributes().get(Grpc.TRANSPORT_ATTR_SSL_SESSION);
            RSAPublicKeyImpl pk = (RSAPublicKeyImpl) sslSession.getPeerCertificates()[0].getPublicKey();
            if (pk.getModulus().bitLength() &lt; 2048) {
                // reject call
            }
            // proceed with the call
        } catch (SSLPeerUnverifiedException e) {
            // do something
        }
        ...
    }
}
</code></pre>

<p>This is a bad way to do it because</p>

<ol>
<li>The validation is being done after the connection is already
established.</li>
<li>The validation is only triggered when a request/call is made.</li>
<li>Every single call involves an extra overhead of validation.</li>
<li>In case of a validation failure, only the call is rejected but not the connection to the client.</li>
</ol>

<p>In an ideal scenario</p>

<ol>
<li>The validation is done during the connection establishment phase. (or some point during the creation of the channel between client and server)</li>
<li>The validation failure would prevent the connection from being created and not set it up and disconnect later.</li>
<li>A client is only validated once per session and all the calls made during that session do not incur any overhead.</li>
</ol>

<p>How can I do this better?</p>
","<p>The following may help if gRPC allows you to get at the SSLEngine:</p>

<p>I made a mock-up using SSLEngineSimpleDemo (which is part of <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/samples/index.html"" rel=""nofollow noreferrer"">Oracle jssesamples.zip</a>) to set custom AlgorithmConstraints where it creates the SSLEngine:</p>

<pre><code>private void createSSLEngines() throws Exception {
    ...
    serverEngine = sslc.createSSLEngine();
    ...
    // Set custom AlgorithmConstraints on the SSL engine
    SSLParameters sslParams = sslc.getSupportedSSLParameters();
    sslParams.setAlgorithmConstraints( new MyAlgorithmConstraints() );
    serverEngine.setSSLParameters(sslParams);
</code></pre>

<p>The class MyAlgorithmConstraints looks something like:</p>

<pre><code>import java.security.AlgorithmConstraints;
import java.security.AlgorithmParameters;
import java.security.CryptoPrimitive;
import java.security.Key;
import java.security.interfaces.RSAKey;
import java.util.Set;

public class MyAlgorithmConstraints implements AlgorithmConstraints {


    @Override
    public boolean permits(Set&lt;CryptoPrimitive&gt; primitives, String algorithm, AlgorithmParameters parameters) {
        return true;
    }

    @Override
    public boolean permits(Set&lt;CryptoPrimitive&gt; primitives, Key key) {
        boolean permitted = permittedRSAKey(primitives, key);
        return permitted;
    }

    @Override
    public boolean permits(Set&lt;CryptoPrimitive&gt; primitives, String algorithm, Key key, AlgorithmParameters parameters) {
        boolean permitted = permittedRSAKey(primitives, key);
        return permitted;
    }

    private boolean permittedRSAKey(Set&lt;CryptoPrimitive&gt; primitives, Key key) {
        boolean permitted = true;
        if (primitives.contains(CryptoPrimitive.KEY_AGREEMENT) &amp;&amp; key instanceof RSAKey) {
            int length = ((RSAKey)key).getModulus().bitLength();
            if (length &lt; 2040) {
                permitted = false;
                System.out.println(""+*+*+* MyConstraints: short RSA key not allowed [""+length+""]"");
            }
        }
        return permitted;
    }

}
</code></pre>

<p>Length 2040 chosen in case of leading zeroes on the key as per warning in <a href=""https://stackoverflow.com/questions/2922622/how-to-get-the-size-of-a-rsa-key-in-java/20622933"">How to get the size of a RSA key in Java</a> but you could just as well reverse the condition to <code>length &gt; 1024 permitted=true</code>.</p>
","122","<validation><ssl><grpc><public-key><grpc-java>","5","1","2","2019-09-29 07:39:19","58138414","5","","2498327","","2019-09-26 23:45:46","2019-09-26 18:19:30",""
"32230961","get openshift public key","<p>I am currently trying to set up mongodb replica set using two digital ocean droplets and one openshift gear. When I try to obtain the openshift gear public key under .ssh directory I got ""permission denied"". Does any of you guys know if it is possible to get the public key from an openshift gear? Any help would be appreciated. Thanks!</p>
","<p>you need to create your own public/private key pair and use them.  I suggest storing them in your $OPENSHIFT_DATA_DIR.  You (as a user) do not have access to the ~/.ssh directory on your gear.  You can use the ssh-keygen command to create a new keypair.</p>
","122","<mongodb><openshift><public-key><replicaset>","0","1","1","2015-08-26 17:20:52","32232870","0","","","","","2015-08-26 15:38:51",""
"49653232","How to sign and verify string using ssh key using java","<p>I know this issue may be duplicated somewhere else, but i wasted a lot of time to fix this issue.</p>

<p>I need to use third party API and as per their documentation i have to generate private/public key using the command <code>ssh-keygen -t rsa</code>, send to them the public key and for every request i must sign the request body using my private key</p>

<p>i found many code sample to read private/public key of formats like <code>pem</code> or <code>der</code>, but not the format generated using <code>ssh-keygen -t rsa</code></p>

<p>my private key now is </p>

<pre><code>-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,07E3CD04C0D5E7AEC5BFB3660C389A79

iP+UVOT9UUma638HRLzyd9hLeZGbs2NxTakIWCB5Inpvd5+O4vcdjNhmV3zxSyDY
JpHlU8417Fyn3qHjHbG2Tj86qgFeexcZ83pjXxFU8JnXfqutSe6Zpa4sDuZYKve6
Xv2oxF64pVqEesH+C9XOkyYiWVqr09vpKBlIM2GcI2WqQwLuDYhj/AAWJhpKGVJu
+fwiQj7VS+tzBE1QW4Kva5xwEE4z/XZHkYMNDHUXBPeifsYXwkz8ZcXlcVZ+CAql
jwKh4ORXkBO/Ok2wva3dFfU7no2YSNIDhgHFGK6C9n5igbstYbTEPEH/YeSbqz1L
SucLiftfdvL9UdFb1/NQfcFhusNPHctGybvfAzttQEfSU/W5OYcN25SKF5pHUtHZ
Widu5M3JFCJ5Gw0P2sjANZVN/+8p0alT61dy6OqLckJmJfixpkvRQqdEP8ucUlTe
r+X5Fe2xH+cYh2MLq9IXxrK4g0sUZKoZw4AGKq24CfvD2K7UqHlXVO1hocyhlq+m
rRCVvRLJc7mpvpBtIQ6qXbr1chMa3zgkf6jW9thJ40jt4Giarj5s80fSC3Dk3lQN
ENV7nnhmd2uzz5yXx4sITnoDnItYDcJZk5pcOR4FAjUR2wRaLokae0pdEbS4heMa
KPOGOZGJNxs2CpwFUZL3CKIVMOmh14pzjZ4DNb9yzVhyd6wag5HlN9JNB1322eDO
lzfEnyki45wVGnB6ChthOnDRdgP5CUK+eaGqO8BSS+wttR25+MbZEwyljoQXc59h
XbGL5qqxpzrIT9+wDrEq8QNUaIg5OEXvBLa3NVOWSStgx+q5gqb5mzwJVdJiqSfL
xGG0CcyKuDPi6Vt/GKx5SGYi0gHFBs3QlYwzvvBxb5xKTc/meQSCM2ALXuJrFjBT
hXCBRBQ4F6i3pnyqkPJ36hsQ/mv6AWtsNhkMs2LrMjic0Fl5OhU6m1YA1nx8qz8k
ZQBhSWxLaTVwQsYnkH6SApPSo0t+FIzQfpnyYj4A9o6uK3dOiXPZndKqKx4mwqwM
uszlfMobhZUn2+ZcILXSZb1nNrwHKANRsp+I4j8bjG7qYKS5dfPaeIxRVQnpCkK+
SVznB0x8/EtIb8mLvuFtQap9KQ1S5UQxF3HhFoHdKjbDlEhMI3KPzURgYpis8K0y
M6jUbBnFQog9rSRCM79qE/cK6FX/QHrZt1Ijb9sPo54Y1TJQhbTempQ8N8SLnJFE
SY7W9wqOjyjrIKJ1NAWVSAHKu3ctUZHqWqijykkGa/t09BmtKoaHJ3RTJmQ7r/Z2
nxnARy9lDBSXgp8ErcYcf1eeRtCeRMZY+22F8gD7jJ/uKeEj6k8oUITt/dYSJWeA
LI9rPYydva8cNi0RtcB8Vgddi+GnhnGnhIXs3swk4AiVhBAPlAEfMdp3MjARrkJI
2UuMHStfht96aD3x3mL4fP0o6fJ5jSj/aCepwuR18xUHgtCCO8Sj81NBwPTSv654
XzIngNY3OPAOqo3RmS+xSnH8sCwE/wJxVu2sa/Ue8XszsjrzO4plYKh344MdR6g3
ISWyjPnFsdL1gBxoiPGfM/EF0bd4a1iGHDk4Ih4AcPgpgMwgN2VYDvGcxHEkQ0Y9
-----END RSA PRIVATE KEY-----
</code></pre>

<p>my public key</p>

<pre><code>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZ98gmTkAoteabP96SmMDWAsPYIj5tV4iovMC9IEeWtiV1DbOIYVYpp27YM2DezoEuBwbccG9+A2wygyYKAVJurfmQTTL4h2WxJ5UIRJtwKrc2UKZNA6amUfIEcQHt0qJeTk6t5Havte2eTU3P6p15J7sHonLdeVBqybjeUMTOc8g41uUtTtmgTSp3BORkY/qwYzC7bICWZuuoklathRgj0CATkfkz25kggV/cNiWo8Ngr2mM8qB3EZxidF6FYwGROYRFq9jPfn1K3EvgOWWsPeHwd/bJn109sTqaLY5TsKuatxZAE+3CHNoQsEGaAVtEz505Oa8IRJYp9LERuBHx1 melad@pcwrk005.bovc.dk
</code></pre>

<p>how to read these files using java and <code>sign,verify</code> strings using them </p>
","","122","<java><ssh><rsa><private-key><public-key>","2","","0","2018-04-04 14:09:19","","0","0","","","","2018-04-04 14:09:19",""
"30160880","Generating Public key from Google Oauth2 v3 Certs","<p>I don't have much experience with Cryptography. I am developing OpenID Connect Client(RP). For signature verification I want public key. Considering example of Google, It provides public keys <a href=""https://www.googleapis.com/oauth2/v3/certs"" rel=""nofollow"">here</a>. Now you can observe n, e there. Using PyCrypto RSA for constructing public key from n and e. Problem is the values are in string. I tried to convert n by decoding with base64 first and then converting to long but not succeeded. Can someone help that what should I do for converting the value of n, e provided by Google for constructing the public key for signature verification? </p>
","","121","<python-2.7><rsa><public-key><google-openid><google-oauth2>","1","","0","2015-05-11 06:27:51","","0","","","","","2015-05-11 06:27:51",""
"54064142","What's causing this InvalidSignature exception? (public key and signature are created by PHP and the verification is done in Python)","<p>I'm basically trying to create a signature using ""openssl"" (PHP) and verify that using ""criptografy"" (PYTHON). And I'm always getting the error ""InvalidSignature"", which means I'm doing something wrong. I know that they are different languages and libraries but once I'm using the same algorithm for both I expected to get a valid signature. I appreciate any help.</p>

<h1>PHP: creating public key and signature without problems</h1>

<pre><code>$config = array(
    ""digest_alg"" =&gt; ""sha256"",
    ""private_key_bits"" =&gt; 4096,
    ""private_key_type"" =&gt; OPENSSL_KEYTYPE_RSA,
);
$res = openssl_pkey_new($config);
openssl_pkey_export($res, $privKey);
$pubKey = openssl_pkey_get_details($res);
$pubKey = $pubKey[""key""];
error_log($pubKey);
</code></pre>

<blockquote>
  <p>-----BEGIN PUBLIC KEY-----
  MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAtXyDj9vqTGkR/ITYZ6+e
  xXATzalUOdBcqee+qcb5NJ6Z5DgNdYi9lWz/4YfitYKp0EFwPzbem1zBzKbuQSko
  y7zRjpmyGbw8Q6wexO4SyA44jxs75JNXMA2x22dkNKajRE5kXngBIF1ixpzCxvvc
  kfyewM8C8y2iAy5j02YZYw9ysrQWJegamq6sidnMCJBtokOnPQaNJwbDQTqwrSRS
  8IDy7BtBHB7F/bBwLArwxG7aLFjJ9vf2F7HpmZ3VvJa69OhY0pZMSqePQpJBIQ+2
  ztIywpKkOukJz22Brqoe0ygMQzVrcYoj2MZ8CSiKUCJL6Wm9ErFXvBh/XqPWjX1t
  nWdnF6qSD/2itIw18+PzCWYaoeu6w064dcbRrUQ4UOYxp69IFtrv5OHAsuWPJ27q
  2IUCZ9DWWphlwhz+lI4rAb6whd2R8Sb7vEhvSz4Kd5kIjel9Dt8mJ+jGyhTjqIhP
  7amgcOQLKZJfmeltYI+F0U8oJcOPhxtlxfFB1MIxPDHvCcdR93LJGgU6NboTwcpx
  hnoI86xKblJmnxMxuQbUfPRU8vAuiizKVrpQS8z2k58mlxa9+hykjMcqpAvQ6STM
  vLswdj0j9aqyv6I94z2Q2Lgcuoh7xSJcLhKN9QGaarUqjAY/zoZPiDnCxXlnVrav
  BMyQZ9PqbsaHsd7pVVpuW8MCAwEAAQ==
  -----END PUBLIC KEY-----</p>
</blockquote>

<pre><code>$data = 'oi';
$pkeyid = openssl_pkey_get_private($privKey);
openssl_sign($data, $signature, $pkeyid);
error_log(base64_encode($signature));
</code></pre>

<blockquote>
  <p>MoUZzfaHCwME2mmxJnMBQWgo+lTLK2QfpfD+5IEnSwi0wmRtgZgFl7IGsWYlTO+zTQCcB/aKg91CMClmb5P2jEtOkY3ie2pNflEIsc3aGqfWoVpHJUMoft+4hytzgMszqwgbJdo6eac7zIxlrzmeb4jb58APtc4aaLLQru2Gga9oPRyCqbXrD0TXnQ6GzjDNGwi6wP30NU9KaHWaGfeq1WSqsAIaIbi2oG4MeWJYX6SOB/CX1Jg8SJYzWQahpJeybE4Z8fR6ncuvfbjp9aet1aKsPB/DFPQ5VFaAS4oItVb0Ha4wkQ8YgJu5fEUK7X9KzuOwidja5RLZtwDPa0bBSveCw9D8FUsguilaoIu7ueDPTRueK4bQkYstOc2OvVlzInukyOzFXVgZsiV23FTHrQ5FqHd9nCUbfuhgrMqHRYQmRFUgDaeyY+B5ve3bQ4lT3qm282ngKi8AZ+clB0VeaFiQxpF8SCCRMu0bX3dsQMaXRUeSVDipf3ZMABl9xXbzEjqXoJzuvC6tCnEv8K3HzKbjz2S1876eGy7opIixaUMwDu9QOiPoSiFUY/xCsX8D1Im8Mv4eyzWNV3FL1U/GS3LZzkq/NuJdB7wjCib3ieHaYX/bvTpmAp/oO0+vbI2pzq9w71cpqQpsNsOZSGkgY2q1sO6u0I5jCFScdJVbJl0=</p>
</blockquote>

<h1>PYTHON: InvalidSignature error</h1>

<pre><code>from cryptography.hazmat.backends import default_backend  
from cryptography.hazmat.primitives.asymmetric import padding  
from cryptography.hazmat.primitives import hashes  
from cryptography.hazmat.primitives.serialization import load_pem_private_key  
from cryptography.hazmat.primitives.serialization import load_pem_public_key
signature= 'MoUZzfaHCwME2mmxJnMBQWgo+lTLK2QfpfD+5IEnSwi0wmRtgZgFl7IGsWYlTO+zTQCcB/aKg91CMClmb5P2jEtOkY3ie2pNflEIsc3aGqfWoVpHJUMoft+4hytzgMszqwgbJdo6eac7zIxlrzmeb4jb58APtc4aaLLQru2Gga9oPRyCqbXrD0TXnQ6GzjDNGwi6wP30NU9KaHWaGfeq1WSqsAIaIbi2oG4MeWJYX6SOB/CX1Jg8SJYzWQahpJeybE4Z8fR6ncuvfbjp9aet1aKsPB/DFPQ5VFaAS4oItVb0Ha4wkQ8YgJu5fEUK7X9KzuOwidja5RLZtwDPa0bBSveCw9D8FUsguilaoIu7ueDPTRueK4bQkYstOc2OvVlzInukyOzFXVgZsiV23FTHrQ5FqHd9nCUbfuhgrMqHRYQmRFUgDaeyY+B5ve3bQ4lT3qm282ngKi8AZ+clB0VeaFiQxpF8SCCRMu0bX3dsQMaXRUeSVDipf3ZMABl9xXbzEjqXoJzuvC6tCnEv8K3HzKbjz2S1876eGy7opIixaUMwDu9QOiPoSiFUY/xCsX8D1Im8Mv4eyzWNV3FL1U/GS3LZzkq/NuJdB7wjCib3ieHaYX/bvTpmAp/oO0+vbI2pzq9w71cpqQpsNsOZSGkgY2q1sO6u0I5jCFScdJVbJl0='

decoded = base64.b64decode(signature)

plaintextMessage=""oi""

# /tmp/public contains the public key
alicePubKey = load_pem_public_key(open('/tmp/public', 'rb').read(),default_backend())  

ciphertext = alicePubKey.verify(  
    decoded,  
    plaintextMessage,  
    padding.PSS(  
            mgf=padding.MGF1(algorithm=hashes.SHA256()),  
            salt_length=padding.PSS.MAX_LENGTH,  
    ),  
    hashes.SHA256()  
)
</code></pre>
","<p>It's pretty clear that your PHP code:</p>

<ol>
<li>Signed using RSA with SHA1, <em>not</em> SHA256</li>
<li>Used PKCS#1 version 1.5 padding, <em>not</em> PSS</li>
</ol>

<p>It looks like you just copy&amp;pasted your code from the <a href=""https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa/#verification"" rel=""nofollow noreferrer"">cryptography package documentation</a>.</p>

<p>Thus the following python snippet should verify:</p>

<pre><code>ciphertext = alicePubKey.verify(  
    decoded,  
    b'oi',  
    padding.PKCS1v15(),  
    hashes.SHA1()  
)
</code></pre>

<p>PSS and SHA-256 are better choices, so you should investigate modifying your PHP code to use those instead of modifying your python code.</p>
","121","<php><python><openssl><rsa><public-key>","-1","1","2","2019-01-08 19:06:55","54067430","0","","5411494","","2019-01-08 19:06:55","2019-01-06 17:30:52",""
"54064142","What's causing this InvalidSignature exception? (public key and signature are created by PHP and the verification is done in Python)","<p>I'm basically trying to create a signature using ""openssl"" (PHP) and verify that using ""criptografy"" (PYTHON). And I'm always getting the error ""InvalidSignature"", which means I'm doing something wrong. I know that they are different languages and libraries but once I'm using the same algorithm for both I expected to get a valid signature. I appreciate any help.</p>

<h1>PHP: creating public key and signature without problems</h1>

<pre><code>$config = array(
    ""digest_alg"" =&gt; ""sha256"",
    ""private_key_bits"" =&gt; 4096,
    ""private_key_type"" =&gt; OPENSSL_KEYTYPE_RSA,
);
$res = openssl_pkey_new($config);
openssl_pkey_export($res, $privKey);
$pubKey = openssl_pkey_get_details($res);
$pubKey = $pubKey[""key""];
error_log($pubKey);
</code></pre>

<blockquote>
  <p>-----BEGIN PUBLIC KEY-----
  MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAtXyDj9vqTGkR/ITYZ6+e
  xXATzalUOdBcqee+qcb5NJ6Z5DgNdYi9lWz/4YfitYKp0EFwPzbem1zBzKbuQSko
  y7zRjpmyGbw8Q6wexO4SyA44jxs75JNXMA2x22dkNKajRE5kXngBIF1ixpzCxvvc
  kfyewM8C8y2iAy5j02YZYw9ysrQWJegamq6sidnMCJBtokOnPQaNJwbDQTqwrSRS
  8IDy7BtBHB7F/bBwLArwxG7aLFjJ9vf2F7HpmZ3VvJa69OhY0pZMSqePQpJBIQ+2
  ztIywpKkOukJz22Brqoe0ygMQzVrcYoj2MZ8CSiKUCJL6Wm9ErFXvBh/XqPWjX1t
  nWdnF6qSD/2itIw18+PzCWYaoeu6w064dcbRrUQ4UOYxp69IFtrv5OHAsuWPJ27q
  2IUCZ9DWWphlwhz+lI4rAb6whd2R8Sb7vEhvSz4Kd5kIjel9Dt8mJ+jGyhTjqIhP
  7amgcOQLKZJfmeltYI+F0U8oJcOPhxtlxfFB1MIxPDHvCcdR93LJGgU6NboTwcpx
  hnoI86xKblJmnxMxuQbUfPRU8vAuiizKVrpQS8z2k58mlxa9+hykjMcqpAvQ6STM
  vLswdj0j9aqyv6I94z2Q2Lgcuoh7xSJcLhKN9QGaarUqjAY/zoZPiDnCxXlnVrav
  BMyQZ9PqbsaHsd7pVVpuW8MCAwEAAQ==
  -----END PUBLIC KEY-----</p>
</blockquote>

<pre><code>$data = 'oi';
$pkeyid = openssl_pkey_get_private($privKey);
openssl_sign($data, $signature, $pkeyid);
error_log(base64_encode($signature));
</code></pre>

<blockquote>
  <p>MoUZzfaHCwME2mmxJnMBQWgo+lTLK2QfpfD+5IEnSwi0wmRtgZgFl7IGsWYlTO+zTQCcB/aKg91CMClmb5P2jEtOkY3ie2pNflEIsc3aGqfWoVpHJUMoft+4hytzgMszqwgbJdo6eac7zIxlrzmeb4jb58APtc4aaLLQru2Gga9oPRyCqbXrD0TXnQ6GzjDNGwi6wP30NU9KaHWaGfeq1WSqsAIaIbi2oG4MeWJYX6SOB/CX1Jg8SJYzWQahpJeybE4Z8fR6ncuvfbjp9aet1aKsPB/DFPQ5VFaAS4oItVb0Ha4wkQ8YgJu5fEUK7X9KzuOwidja5RLZtwDPa0bBSveCw9D8FUsguilaoIu7ueDPTRueK4bQkYstOc2OvVlzInukyOzFXVgZsiV23FTHrQ5FqHd9nCUbfuhgrMqHRYQmRFUgDaeyY+B5ve3bQ4lT3qm282ngKi8AZ+clB0VeaFiQxpF8SCCRMu0bX3dsQMaXRUeSVDipf3ZMABl9xXbzEjqXoJzuvC6tCnEv8K3HzKbjz2S1876eGy7opIixaUMwDu9QOiPoSiFUY/xCsX8D1Im8Mv4eyzWNV3FL1U/GS3LZzkq/NuJdB7wjCib3ieHaYX/bvTpmAp/oO0+vbI2pzq9w71cpqQpsNsOZSGkgY2q1sO6u0I5jCFScdJVbJl0=</p>
</blockquote>

<h1>PYTHON: InvalidSignature error</h1>

<pre><code>from cryptography.hazmat.backends import default_backend  
from cryptography.hazmat.primitives.asymmetric import padding  
from cryptography.hazmat.primitives import hashes  
from cryptography.hazmat.primitives.serialization import load_pem_private_key  
from cryptography.hazmat.primitives.serialization import load_pem_public_key
signature= 'MoUZzfaHCwME2mmxJnMBQWgo+lTLK2QfpfD+5IEnSwi0wmRtgZgFl7IGsWYlTO+zTQCcB/aKg91CMClmb5P2jEtOkY3ie2pNflEIsc3aGqfWoVpHJUMoft+4hytzgMszqwgbJdo6eac7zIxlrzmeb4jb58APtc4aaLLQru2Gga9oPRyCqbXrD0TXnQ6GzjDNGwi6wP30NU9KaHWaGfeq1WSqsAIaIbi2oG4MeWJYX6SOB/CX1Jg8SJYzWQahpJeybE4Z8fR6ncuvfbjp9aet1aKsPB/DFPQ5VFaAS4oItVb0Ha4wkQ8YgJu5fEUK7X9KzuOwidja5RLZtwDPa0bBSveCw9D8FUsguilaoIu7ueDPTRueK4bQkYstOc2OvVlzInukyOzFXVgZsiV23FTHrQ5FqHd9nCUbfuhgrMqHRYQmRFUgDaeyY+B5ve3bQ4lT3qm282ngKi8AZ+clB0VeaFiQxpF8SCCRMu0bX3dsQMaXRUeSVDipf3ZMABl9xXbzEjqXoJzuvC6tCnEv8K3HzKbjz2S1876eGy7opIixaUMwDu9QOiPoSiFUY/xCsX8D1Im8Mv4eyzWNV3FL1U/GS3LZzkq/NuJdB7wjCib3ieHaYX/bvTpmAp/oO0+vbI2pzq9w71cpqQpsNsOZSGkgY2q1sO6u0I5jCFScdJVbJl0='

decoded = base64.b64decode(signature)

plaintextMessage=""oi""

# /tmp/public contains the public key
alicePubKey = load_pem_public_key(open('/tmp/public', 'rb').read(),default_backend())  

ciphertext = alicePubKey.verify(  
    decoded,  
    plaintextMessage,  
    padding.PSS(  
            mgf=padding.MGF1(algorithm=hashes.SHA256()),  
            salt_length=padding.PSS.MAX_LENGTH,  
    ),  
    hashes.SHA256()  
)
</code></pre>
","<p>As James said, the function <code>openssl_sign</code> was using SHA1 by default, what could be solved with the parameter <code>OPENSSL_ALGO_SHA256</code>.</p>

<p>So I did these changes:</p>

<h3>PHP</h3>

<pre><code>openssl_sign($data, $signature, $pkeyid, OPENSSL_ALGO_SHA256);
</code></pre>

<h3>Python</h3>

<pre><code>ciphertext = alicePubKey.verify(  
    decoded,  
    plaintextMessage,  
    padding.PKCS1v15(),
    hashes.SHA256()  
 )
</code></pre>
","121","<php><python><openssl><rsa><public-key>","-1","0","2","2019-01-08 19:06:55","54067430","0","","5411494","","2019-01-08 19:06:55","2019-01-06 17:30:52",""
"22973323","RSA Encryption message Length","<p>So i know that to encrypt a message in RSA we use cipher = m^e % n where m is the plain text transformed to an integer of size {0,..,n -1} and n is the modulus.
Let's say that the size of n is 8192bit and e = 65537 and m (as an integer) = n - 4.
So the question is wouldn't be (2^(8192-4))^65537 impossible to calculate ?</p>
","<p>Not impossible at all - the exponentiation is performed modulo <code>n</code>, which means that the result will always be less than <code>n</code>. This not only limits the output size, but makes the calculation easier as intermediate stages can be reduced modulo <code>n</code> to keep the numbers involved ""small"". The Wikipedia page on <a href=""http://en.wikipedia.org/wiki/Modular_exponentiation"" rel=""nofollow"">modular exponentiation</a> provides more detail on how the calculation can be performed.</p>
","121","<encryption><rsa><public-key><modulus>","0","1","1","2014-04-09 22:46:41","22975385","0","","","","","2014-04-09 20:30:00",""
"50206633","Lost bytes in input stream?","<p>I'm writing a program where I send bytes of a key from a keypair that I created over an output socket and use them to recreate the key on the other side.
Server: </p>

<pre><code>    KeyPairGenerator dsaKeyPairGenerator = 
    KeyPairGenerator.getInstance(""DSA"");
    dsaKeyPairGenerator.initialize(1024);
    KeyPair dsakeyPair = dsaKeyPairGenerator.generateKeyPair();
    PrivateKey dsaPrivate = dsakeyPair.getPrivate();
    PublicKey dsaPublic = dsakeyPair.getPublic();
    byte[] dsaPublicbytes = dsaPublic.getEncoded();
    clientSocket.getOutputStream().write(dsaPublicbytes.length);
    clientSocket.getOutputStream().write(dsaPublicbytes);
</code></pre>

<p>Client: </p>

<pre><code>    int dsalength = clientSocket.getInputStream().read();
    byte[] dsaPublicbytes = new byte[dsalength];
    clientSocket.getInputStream().read(dsaPublicbytes);
    X509EncodedKeySpec dsaspec = new X509EncodedKeySpec(dsaPublicbytes);
    KeyFactory dsakeyFactory = KeyFactory.getInstance(""DSA"");
    PublicKey dsaKey = dsakeyFactory.generatePublic(dsaspec);
</code></pre>

<p>However, on this line I get an error:</p>

<pre><code>    PublicKey dsaKey = dsakeyFactory.generatePublic(dsaspec);
</code></pre>

<p>The trace for the error itself:</p>

<pre><code>Exception in thread ""main"" java.security.spec.InvalidKeySpecException: Inappropriate key specification: IOException: Detect premature EOF
at sun.security.provider.DSAKeyFactory.engineGeneratePublic(DSAKeyFactory.java:119)
at java.security.KeyFactory.generatePublic(KeyFactory.java:334)
at Client.main(Client.java:36)
</code></pre>

<p>I have researched and I've seen that the EOF occurs because there aren't enough bytes to create the key, which leads me to believe that it is a problem with how I am sending the bytes. Am I sending the bytes incorrectly?</p>
","<p>Assuming that your first byte is not sending the size of key byte array or you are using the key that has size bigger than 256-bit, then the array will be incomplete. 
Try using DataOutputStream methods of writeLong() or writeInt() to send byte size to initiate the right size array. Secondly try using buffers to read when its being send. </p>

<p>Here is little bit of my code from my file socket sender:
This is sending part:</p>

<pre><code>    OutputStream os = sock.getOutputStream();
    DataOutputStream dos = new DataOutputStream(os);     
    dos.writeInt(mybytearray.length);   
    dos.write(mybytearray, 0, mybytearray.length);   
</code></pre>

<p>This is recieving part:</p>

<pre><code>InputStream in = sock.getInputStream();
DataInputStream dis = new DataInputStream(in);
int byteSize = clientData.readInt();
byte[] byteData = new Byte[byteSize];
dis.read(byteData);
</code></pre>

<p>You may want to buffer receiving part by telling how many bytes to read using method of DIS <code>read(byte[],int,int)</code> until all of the bytes were read. I tested my code on same machine with very small size data so the connection stability was not a factor. </p>
","119","<java><sockets><inputstream><public-key>","-1","0","2","2018-05-07 06:14:13","","4","","6750645","","2018-05-07 06:14:13","2018-05-07 03:17:07",""
"50206633","Lost bytes in input stream?","<p>I'm writing a program where I send bytes of a key from a keypair that I created over an output socket and use them to recreate the key on the other side.
Server: </p>

<pre><code>    KeyPairGenerator dsaKeyPairGenerator = 
    KeyPairGenerator.getInstance(""DSA"");
    dsaKeyPairGenerator.initialize(1024);
    KeyPair dsakeyPair = dsaKeyPairGenerator.generateKeyPair();
    PrivateKey dsaPrivate = dsakeyPair.getPrivate();
    PublicKey dsaPublic = dsakeyPair.getPublic();
    byte[] dsaPublicbytes = dsaPublic.getEncoded();
    clientSocket.getOutputStream().write(dsaPublicbytes.length);
    clientSocket.getOutputStream().write(dsaPublicbytes);
</code></pre>

<p>Client: </p>

<pre><code>    int dsalength = clientSocket.getInputStream().read();
    byte[] dsaPublicbytes = new byte[dsalength];
    clientSocket.getInputStream().read(dsaPublicbytes);
    X509EncodedKeySpec dsaspec = new X509EncodedKeySpec(dsaPublicbytes);
    KeyFactory dsakeyFactory = KeyFactory.getInstance(""DSA"");
    PublicKey dsaKey = dsakeyFactory.generatePublic(dsaspec);
</code></pre>

<p>However, on this line I get an error:</p>

<pre><code>    PublicKey dsaKey = dsakeyFactory.generatePublic(dsaspec);
</code></pre>

<p>The trace for the error itself:</p>

<pre><code>Exception in thread ""main"" java.security.spec.InvalidKeySpecException: Inappropriate key specification: IOException: Detect premature EOF
at sun.security.provider.DSAKeyFactory.engineGeneratePublic(DSAKeyFactory.java:119)
at java.security.KeyFactory.generatePublic(KeyFactory.java:334)
at Client.main(Client.java:36)
</code></pre>

<p>I have researched and I've seen that the EOF occurs because there aren't enough bytes to create the key, which leads me to believe that it is a problem with how I am sending the bytes. Am I sending the bytes incorrectly?</p>
","<blockquote>
  <p>Lost bytes in input stream</p>
</blockquote>

<p><em>Unread</em> bytes in input stream. You assumed that <code>read()</code> filled the buffer. It isn't obliged to do that. Use <code>DataInputStream.readFully()</code>. </p>

<p>You're also limiting yourself to 128 key bytes by using <code>write(int)</code>, and <code>read()</code> with no parameters, for sending/receiving the length word. Use <code>DataOutputStream.writeInt()</code> and <code>DataInputStream.readInt()</code> for that.</p>
","119","<java><sockets><inputstream><public-key>","-1","1","2","2018-05-07 06:14:13","","4","","6750645","","2018-05-07 06:14:13","2018-05-07 03:17:07",""
"40495818","how to share a public key","<p>My question is not about how to create a public key in java, but how do I send it to another client.</p>

<p>I have a server and two clients communicating with each other, when a client tries to send a message, the program <strong>encrypts</strong> it using the clients <strong>private key</strong>, then, it sends the <strong>encrypted byte array</strong> throw the stream with the other clients <strong>public key</strong>, this is my point, how do they know each other? </p>

<p>Is there a way to send the public key to a specific client?</p>
","","118","<java><public-key>","2","","0","2016-11-08 20:31:15","","2","","803925","","2016-11-08 20:31:15","2016-11-08 20:28:29","2016-11-08 21:27:43"
"51366793",".Net SFTP Public/Private Key Authentication","<p>Looking for some insight into how I could implement my own public key authentication method in .Net. I'm using CompleteFTP Server which does handle this type of authentication but requires manual intervention. I'm extending an API to handle the authentication as part of an automated process</p>
","<p>My suggestion (as I did exactly this on a project a couple of months ago), would be to shell out to the OS/command line tools to do this.  </p>

<p>It's a bit of a pain to parse the output of the tools, but as it's a fairly limited set of results you need to handle, not impossible.</p>
","118","<c#><.net><sftp><private-key><public-key>","-1","0","1","2018-07-16 17:44:01","","1","","","","","2018-07-16 17:01:37",""
"16389216","IOS Code Signing Debugging Utility","<p>I'm looking at creating a standalone utility that displays user friendly 
error messages for debugging issues related to code signing and deployment 
that are typically encountered during IOS development. </p>

<p>It should programatically start by opening a provisioning profile chosen by 
the user, inspect each of the certificates in them, dig out the public 
key used in each of the certificates, find out if the appropriate private 
keys are present in the key-chain and then see if the raw materials are
in the right places. If something is missing or out of place it should 
display very a clear message to the user. If all is fine, it should 
display the certificate to use along with the chosen private key from
the key-chain.</p>

<p>To achieve this, how would I programatically extract the public keys 
from inside the certificates and inspect the key-chain for private key 
matches? Any pointers would help.</p>

<p>PS: I know XCode does some of the above but it is not as 
friendly as it should be and the I think mysteries related to the black box
code-signing approach needs to be unraveled and democratized.</p>
","","115","<ios><certificate><code-signing><keychain><public-key>","0","","0","2014-05-02 11:53:48","","6","","321731","","2014-05-02 11:53:48","2013-05-05 21:15:03",""
"57072796","Custom Java public key generation (Bitcoin)","<p>A private key is random generated and it is not correlated with any wallet.</p>

<p>I want to prepare custom (naive) implementation of public key generation for a Bitcoin. However, after a few attempts my results was incorrect. I compared them with online generators. I've recognized I used division instead of modinv. Unfortunately, after changing division into modinv I got ""java.lang.ArithmeticException: BigInteger not invertible."". I tired to follow <a href=""https://www.mobilefish.com/services/cryptocurrency/cryptocurrency.html#refProdedure"" rel=""nofollow noreferrer"">https://www.mobilefish.com/services/cryptocurrency/cryptocurrency.html#refProdedure</a> and <a href=""https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication</a> Could you help me recognize where I did a mistake?</p>

<pre><code>public class ECDSAUtils {

    private static final CurvePoint G = new CurvePoint(new BigInteger(""79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798"", 16), new BigInteger(""483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8"", 16));
    private static CurvePoint zero;
    private static BigInteger base;
    private static final BigInteger three = new BigInteger(""3"", 10);

    public static void main(String[] args){
        ECDSAUtils e = new ECDSAUtils();
        BigInteger privateKey = new BigInteger(""fdc668381ab251673ef8552851a2c7cf346a6e09ea86be0f55a94d2a12253557"", 16);
        CurvePoint r = e.mult(G, privateKey);
        System.out.println(r.x.toString(16).toUpperCase() + "" "" + r.y.toString(16).toUpperCase());
    }

    public ECDSAUtils(){
        zero = new CurvePoint(new BigInteger(""0"", 16), new BigInteger(""0"", 16));
        base = new BigInteger(""FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"", 16);
    }

    public static CurvePoint add(CurvePoint p, CurvePoint q){
        CurvePoint result = null;
        if (p.equals(zero)){
            result = q;
        } else if (q.equals(zero)){
            result = p;
        } else {
            BigInteger lambda = q.y.subtract(p.y).modInverse(q.x.subtract(p.x)).mod(base);
            BigInteger x = lambda.multiply(lambda).subtract(p.x).subtract(q.x).mod(base);
            BigInteger y = lambda.multiply(p.x.subtract(x)).subtract(p.y).mod(base);
            result = new CurvePoint(x, y);
        }
        return result;
    }

    public static CurvePoint doublePoint(CurvePoint p){
        BigInteger lambda = p.x.multiply(p.x).multiply(three).modInverse(p.y.add(p.y)).mod(base);
        BigInteger x = lambda.multiply(lambda).subtract(p.x).subtract(p.x).mod(base);
        BigInteger y = lambda.multiply(p.x.subtract(x)).subtract(p.y).mod(base);
        return new CurvePoint(x, y);
    }

    public CurvePoint mult(CurvePoint N, BigInteger p) {
        CurvePoint Q = zero;
//EDIT:
        for (int i = p.bitLength() - 1; i &gt; -1; i --) {
            if (p.testBit(i)) {
                Q = add(Q, N);
            }
            N = doublePoint(N);
        }

        return Q;
    }
}

public class CurvePoint {
    BigInteger x;
    BigInteger y;

    public CurvePoint(BigInteger x, BigInteger y) {
        this.x = x;
        this.y = y;
    }
}

</code></pre>

<pre><code>Exception in thread ""main"" java.lang.ArithmeticException: BigInteger not invertible.
    at java.math.MutableBigInteger.mutableModInverse(MutableBigInteger.java:1986)
    at java.math.BigInteger.modInverse(BigInteger.java:3154)
    at naive.ECDSAUtils.doublePoint(ECDSAUtils.java:41)
    at naive.ECDSAUtils.mult(ECDSAUtils.java:51)
    at naive.ECDSAUtils.main(ECDSAUtils.java:15)
</code></pre>
","<ul>
<li><p>Currently the expression </p>

<p><img src=""https://chart.googleapis.com/chart?cht=tx&amp;chl=%5Cfrac%7By%7D%7Bx%7D%5Chspace%7B10mm%7D%5Cleft%20%28%20mod%5Chspace%7B1mm%7Dp%20%5Cright%20%29"" alt=""""></p>

<p>is coded as follows:</p>

<pre><code>y.modInverse(x).mod(p)
</code></pre>

<p>This is wrong and causes the observed error message. The following applies:</p>

<p><img src=""https://chart.googleapis.com/chart?cht=tx&amp;chl=%5Cfrac%7By%7D%7Bx%7D%5Chspace%7B3mm%7D%5Chspace%7B10mm%7D%5Cleft%20%28%20mod%5Chspace%7B1mm%7Dp%20%5Cright%20%29%3Dy%5Chspace%7B1mm%7D%5Ccdot%5Chspace%7B1mm%7D%5Cfrac%7B1%7D%7Bx%7D%5Chspace%7B10mm%7D%5Cleft%20%28%20mod%5Chspace%7B1mm%7Dp%20%5Cright%20%29"" alt=""""></p>

<p>which must be coded as follows: </p>

<pre><code>y.multiply(x.modInverse(p)).mod(p)
</code></pre></li>
<li><p>In the <code>add</code> method, the case: </p>

<p><img src=""https://chart.googleapis.com/chart?cht=tx&amp;chl=%5Cleft%20%28%20x_%7BQ%7D-x_%7BP%7D%20%5Cright%20%29%5Chspace%7B10mm%7D%5Cleft%28%20mod%5Chspace%7B1mm%7Dp%20%5Cright%20%29%3D0"" alt=""""></p>

<p>is not handled. Here, the <code>add</code> method must return <code>zero</code> (i.e. the point representing the point at infinity). Geometrically, this case corresponds to a vertical secant (2 intersections).</p></li>
<li><p>Analogously, the case</p>

<p><img src=""https://chart.googleapis.com/chart?cht=tx&amp;chl=y_%7BP%7D%5Chspace%7B10mm%7D%5Cleft%28%20mod%5Chspace%7B1mm%7Dp%20%5Cright%20%29%3D0"" alt=""""></p>

<p>is not handled in the <code>doublePoint</code> method. Here, the <code>doublePoint</code> method must return <code>zero</code> as well. Geometrically, this case corresponds to a vertical tangent (1 intersection).</p></li>
<li><p>The <code>mult</code> method doesn't work. But with regard to the comment in the code this is probably known.</p></li>
<li><p>Testing is easier if a small prime finite field is used. <a href=""http://www.graui.de/code/elliptic2/"" rel=""nofollow noreferrer"">Here</a> you can specify elliptical curves and determine the corresponding points. Note, that a curve with <code>b != 0</code> must be used, otherwise the point <code>(0,0)</code> is a regular point of the curve and could not be used as a representative of the point at infinity.</p></li>
</ul>
","114","<java><encryption><bitcoin><public-key><encryption-asymmetric>","4","3","1","2019-07-18 18:59:21","57101063","6","","1738449","","2019-07-18 07:23:11","2019-07-17 09:35:26",""
"31739126","Extract 1024bit modulus from RSA key","<p>I know there's a billion answers on how to extract the modulus from an RSA key (I have a <code>.cer</code> file) and I want the 1024 bit (it's 1024 bit in my case) value from it. What I don't get is the following:</p>

<p>When I extract it, it's always not 1024 bits, but more. Has that something to do with padding or...? Looks like 136 bytes at the moment, so 64 bit too much. Not sure whether this is a constant or depends on the certificate</p>

<p>edit:
I retried with <code>openssl x509 -modulus -inform PER -in file.cer</code> and it resulted in 128 bytes. Guess that's it.</p>

<p>edit2:
So, this still is my problem. I did <code>openssl x509 -inform DER -in file.cer -text</code> and got a modulus of 129 bytes. Is my assumption correct that I can skip the first one because it is <code>0x00</code> which might just be used to make the whole thing positive again (first byte otherwise would be a <code>0xaa</code> which might be negative)?</p>
","","114","<encoding><rsa><public-key><digital-certificate>","0","","0","2015-08-13 18:48:01","","2","1","2851664","","2015-08-13 18:48:01","2015-07-31 06:05:00",""
"44623919","Creating Asymmetric Key in Azure SQL Server","<p>I'm trying to create an asymmetric key from a file (Executable) in Azure SQL server. Basically I want to <a href=""https://blogs.technet.microsoft.com/italian_premier_center_for_sql_server/2013/07/04/call-azure-rest-api-from-sql-server/"" rel=""nofollow noreferrer"">call Azure REST API</a> from Azure SQL.</p>

<p>I tried with the Queries like </p>

<pre><code>CREATE ASYMMETRIC KEY SampleAzureKey FROM EXECUTABLE FILE ='c:\Test\SampleAzure.dll';


CREATE ASYMMETRIC KEY SampleAzureKey AUTHORIZATION deevita 
     FROM FILE = 'c:\Test\SampleAzure.dll'  
        ENCRYPTION BY PASSWORD = '&lt;strongpass&gt;';
</code></pre>

<p>But I got the error: </p>

<pre><code>File based statement options are not supported in this version of SQL Server.
</code></pre>

<p>I know that Azure SQL couldn't able to see my Location as <code>c:\Test\SampleAzure.dll</code>.</p>
","<p>The FROM FILE clause you is not supported in the CREATE ASYMMETRIC KEY statement in Azure SQL Database. In addition, CLR is not supported either, so will not be able to call REST APIs. The steps in the <a href=""https://blogs.technet.microsoft.com/italian_premier_center_for_sql_server/2013/07/04/call-azure-rest-api-from-sql-server/"" rel=""nofollow noreferrer"">Call Azure REST API from SQL Server</a>  article apply to SQL Server, not Azure SQL Database.</p>

<p>Thanks,</p>

<p>Jakub</p>
","113","<azure><azure-sql-database><.net-assembly><public-key>","0","1","1","2019-03-19 00:24:05","44636914","0","1","387076","","2019-03-19 00:24:05","2017-06-19 06:48:43",""
"46430331","The domain account is locked out when certificate key is accessed with local account","<p>When I access X509Certificate2.PublicKey or X509Certificate2.PrivateKey initialized from an object that was generated with BouncyCastle, I'm getting my domain account locked out (if I do it multiple times). It happens if I run the program on behalf of a local account with the same name but different password. Here is the code:</p>

<pre><code>using Org.BouncyCastle.OpenSsl;
using Org.BouncyCastle.Security;
using System.IO;
using System.Security.Cryptography.X509Certificates;

namespace TestCertificateConversion
{
    class Program
    {
        static void Main(string[] args)
        {
            var certString = GetCertificateString();
            var textReader = new StringReader(certString);
            var pemReader = new PemReader(textReader);
            var bcCert = pemReader.ReadObject() as Org.BouncyCastle.X509.X509Certificate;
            var netCert = DotNetUtilities.ToX509Certificate(bcCert);
            var netCert2 = new X509Certificate2(netCert);
            var publicKey = netCert2.PublicKey; // this locks out domain account
        }

        private static string GetCertificateString()
        {
            return @""-----BEGIN CERTIFICATE-----
MIICvDCCAaSgAwIBAgIQANDHl0sFjYUG3j76dYTadzANBgkqhkiG9w0BAQsFADAQ
MQ4wDAYDVQQDDAVwYWNlbTAgFw0xNjAxMDExMjQ4MzdaGA8yMjAwMDEwMTIyNTg0
N1owEDEOMAwGA1UEAwwFcGFjZW0wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
AoIBAQC5AKAkYnerRUmeAX0Z+aZsX39LXTVZiUd8U6waw7Hzd9E0YA50tHWizfEI
w7IBZwXS0aiXwHqJvrslc3NNs0grwu/iYQl+FGdudKmgXVE7Riu0uFAHo6eFr0dO
o0IP3LS+dPSWarXEBLbymaXRiPJDyHLefvslcSM9UQ2BHOe7dnHh9K1h+XMKTw3Z
/3szAyABBX9hsJU/mc9XjrMNXHJXALSxTfLIPzDrfh+aJtlopWpnb6vQcXwKksyk
4hyVUfw1klhglJgN0LgBGU7Ps3oxCbOqns7fB+tzkBV1E5Q97otgvMR14qLZgc8k
NQrdMl57GaWQJl6mAP1NR1gZt2f1AgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ
KoZIhvcNAQELBQADggEBAAEz3vJOfqao9QXPWSz8YCjbWG1FeVG0NdYpd422dC2V
Vrzlo5zrkRv5XPhBOY3o81OhUe7iByiiM9suYfXLNxxd29TBGB5amO8Yv1ZX0hS/
zvVF6QS0+zZvOiujVhfHGiJxKypqgaigI6NM80ZDKPzsRPwFLIJiZYwQ7eQUlrpt
WGgFkZC23/mSOkY6VMmO5zugeMoiXRyFq33uWLlaAr+zJtRh1IPRmkA1lJv0bkC1
SslO0oSDoT2lcvZkQ5odFKX5i1z7T/wioQqG62i8nsDSz+iZOqUyDx7bL8fIEHog
qgwizgr2aAPLO/VQKU9pRTyRNFl/GL5bi7w8NN+rLxE=
-----END CERTIFICATE-----"";
        }
    }
}
</code></pre>

<p>I'm not sure what I'm doing wrong, are there any security settings I might need to change to prevent it from locking out domain accounts?</p>
","<p>Can you check and confirm if the service account is coming in this format <a href=""https://i.stack.imgur.com/tBj4u.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tBj4u.png"" alt=""enter image description here""></a></p>
","108","<c#><certificate><bouncycastle><public-key>","0","0","2","2017-10-10 15:16:50","46670317","0","","479248","","2017-10-10 11:23:07","2017-09-26 15:21:40",""
"46430331","The domain account is locked out when certificate key is accessed with local account","<p>When I access X509Certificate2.PublicKey or X509Certificate2.PrivateKey initialized from an object that was generated with BouncyCastle, I'm getting my domain account locked out (if I do it multiple times). It happens if I run the program on behalf of a local account with the same name but different password. Here is the code:</p>

<pre><code>using Org.BouncyCastle.OpenSsl;
using Org.BouncyCastle.Security;
using System.IO;
using System.Security.Cryptography.X509Certificates;

namespace TestCertificateConversion
{
    class Program
    {
        static void Main(string[] args)
        {
            var certString = GetCertificateString();
            var textReader = new StringReader(certString);
            var pemReader = new PemReader(textReader);
            var bcCert = pemReader.ReadObject() as Org.BouncyCastle.X509.X509Certificate;
            var netCert = DotNetUtilities.ToX509Certificate(bcCert);
            var netCert2 = new X509Certificate2(netCert);
            var publicKey = netCert2.PublicKey; // this locks out domain account
        }

        private static string GetCertificateString()
        {
            return @""-----BEGIN CERTIFICATE-----
MIICvDCCAaSgAwIBAgIQANDHl0sFjYUG3j76dYTadzANBgkqhkiG9w0BAQsFADAQ
MQ4wDAYDVQQDDAVwYWNlbTAgFw0xNjAxMDExMjQ4MzdaGA8yMjAwMDEwMTIyNTg0
N1owEDEOMAwGA1UEAwwFcGFjZW0wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
AoIBAQC5AKAkYnerRUmeAX0Z+aZsX39LXTVZiUd8U6waw7Hzd9E0YA50tHWizfEI
w7IBZwXS0aiXwHqJvrslc3NNs0grwu/iYQl+FGdudKmgXVE7Riu0uFAHo6eFr0dO
o0IP3LS+dPSWarXEBLbymaXRiPJDyHLefvslcSM9UQ2BHOe7dnHh9K1h+XMKTw3Z
/3szAyABBX9hsJU/mc9XjrMNXHJXALSxTfLIPzDrfh+aJtlopWpnb6vQcXwKksyk
4hyVUfw1klhglJgN0LgBGU7Ps3oxCbOqns7fB+tzkBV1E5Q97otgvMR14qLZgc8k
NQrdMl57GaWQJl6mAP1NR1gZt2f1AgMBAAGjEDAOMAwGA1UdEwQFMAMBAf8wDQYJ
KoZIhvcNAQELBQADggEBAAEz3vJOfqao9QXPWSz8YCjbWG1FeVG0NdYpd422dC2V
Vrzlo5zrkRv5XPhBOY3o81OhUe7iByiiM9suYfXLNxxd29TBGB5amO8Yv1ZX0hS/
zvVF6QS0+zZvOiujVhfHGiJxKypqgaigI6NM80ZDKPzsRPwFLIJiZYwQ7eQUlrpt
WGgFkZC23/mSOkY6VMmO5zugeMoiXRyFq33uWLlaAr+zJtRh1IPRmkA1lJv0bkC1
SslO0oSDoT2lcvZkQ5odFKX5i1z7T/wioQqG62i8nsDSz+iZOqUyDx7bL8fIEHog
qgwizgr2aAPLO/VQKU9pRTyRNFl/GL5bi7w8NN+rLxE=
-----END CERTIFICATE-----"";
        }
    }
}
</code></pre>

<p>I'm not sure what I'm doing wrong, are there any security settings I might need to change to prevent it from locking out domain accounts?</p>
","<p>I checked the .net source code and found what causes an authentication problem in X509Certificate2.PublicKey. It is a creation of a new OID object:</p>

<pre><code>public PublicKey PublicKey {
    [SecuritySafeCritical]
    get {
        if (m_safeCertContext.IsInvalid)
            throw new CryptographicException(SR.GetString(SR.Cryptography_InvalidHandle), ""m_safeCertContext"");

        if (m_publicKey == null) {
            string friendlyName = this.GetKeyAlgorithm();
            byte[] parameters = this.GetKeyAlgorithmParameters();
            byte[] keyValue = this.GetPublicKey();
            Oid oid = new Oid(friendlyName, OidGroup.PublicKeyAlgorithm, true); // this line
            m_publicKey = new PublicKey(oid, new AsnEncodedData(oid, parameters), new AsnEncodedData(oid, keyValue));
        }

        return m_publicKey;
    }
}
</code></pre>

<p>The OID constructor is called with lookupFriendlyName set to 'true', which leads to FindOidInfoWithFallback function:</p>

<pre><code>// Try to find OID info within a specific group, and if that doesn't work fall back to all
// groups for compatibility with previous frameworks
internal static string FindOidInfoWithFallback(uint key, string value, OidGroup group)
{
    string info = FindOidInfo(key, value, group);

    // If we couldn't find it in the requested group, then try again in all groups
    if (info == null &amp;&amp; group != OidGroup.All)
    {
        info = FindOidInfo(key, value, OidGroup.All);
    }

    return info;
}
</code></pre>

<p>The first FindOidInfo returns null and then it is called second time with OidGroup.All. Eventually it results in cryptAPI call:</p>

<pre><code>CAPIMethods.CryptFindOIDInfo(dwKeyType, pvKey, dwGroupId);
</code></pre>

<p>From <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa379938%28v=vs.85%29.aspx?f=255&amp;MSPPError=-2147217396"" rel=""nofollow noreferrer"">documentation</a>:</p>

<blockquote>
  <p>The CryptFindOIDInfo function performs a lookup in the active
  directory to retrieve the friendly names of OIDs under the following
  conditions:</p>
  
  <ul>
  <li>The key type in the dwKeyType parameter is set to    CRYPT_OID_INFO_OID_KEY or CRYPT_OID_INFO_NAME_KEY.</li>
  <li>No group identifier is specified in the dwGroupId parameter or the GroupID    refers to EKU OIDs, policy OIDs or template OIDs.</li>
  </ul>
</blockquote>

<p>It then attempts to authentication with local user account and as a result I'm getting my domain account locked. From the comments to the code I see that the second FindOidInfo call was added for compatibility with older frameworks and potentially I can remove it. Unfortunately there is no easy was to change the code since it is in the framework itself. I may try to inherit the X509Certificate2 object and rewrite PublicKey and PrivateKey, but I don't really like that idea.</p>
","108","<c#><certificate><bouncycastle><public-key>","0","0","2","2017-10-10 15:16:50","46670317","0","","479248","","2017-10-10 11:23:07","2017-09-26 15:21:40",""
"47059705","Swift 3 - Heimdall Public key Padding","<p>i am using Heimdall framework for creating and using public keys from:</p>

<p><a href=""https://github.com/henrinormak/Heimdall"" rel=""nofollow noreferrer"">https://github.com/henrinormak/Heimdall</a></p>

<p>Now i got the requirement to use 1024 bit RSA zero padding for my keys and i have absolutely no idea how to set the padding during:</p>

<pre><code>self.heimdall = Heimdall(publicTag: tag, privateTag: tag, keySize: 1024)
</code></pre>

<p>Could anybody help out here?</p>

<p>Thanks and Greetings!</p>
","","105","<swift><rsa><padding><private-key><public-key>","2","","0","2017-11-01 16:44:38","","0","","","","","2017-11-01 16:44:38",""
"40684488","RSA Send A Message That Everyone Can Verify","<p>I am having trouble understanding the RSA encryption algorithm.</p>

<p>Say we have two individuals Alice and Bob, each with their own private key and public key. In order for Alice to send out a message that only Bob can read, do we simply send an encrypted message with Bob's public key? </p>

<p>Likewise, in order for Alice to send a message that everyone can verify that it is from her, do we simply send an encrypted message with Alice's public key?</p>

<p>Thanks!</p>
","<p>What you need to understand is the Public Key Infrastructure. This structure consists of 2 keys per ""user"", one public, one private. PKI uses algorithms that can cipher a message using the public key of User1, and only knowing the private key of User1, can this message be deciphered. To use your example, Anyone can encrypt a message with Alice's Public Key, but only Alice can de-crypt it, because  Alice is the only one who has the private key counter-part. </p>

<p>PKI or asymmetric ciphers, are slower than symmetric cipher, that is why PKI is only used as a precursor of symmetric key ciphers. For more info, see <a href=""https://en.wikipedia.org/wiki/Public-key_cryptography"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Public-key_cryptography</a>.</p>
","104","<encryption><rsa><digital-signature><public-key>","0","0","2","2016-11-19 18:21:33","","0","","3963067","","2016-11-18 19:51:16","2016-11-18 19:17:33",""
"40684488","RSA Send A Message That Everyone Can Verify","<p>I am having trouble understanding the RSA encryption algorithm.</p>

<p>Say we have two individuals Alice and Bob, each with their own private key and public key. In order for Alice to send out a message that only Bob can read, do we simply send an encrypted message with Bob's public key? </p>

<p>Likewise, in order for Alice to send a message that everyone can verify that it is from her, do we simply send an encrypted message with Alice's public key?</p>

<p>Thanks!</p>
","<blockquote>
  <p>Say we have two individuals Alice and Bob, each with their own private key and public key. In order for Alice to send out a message that only Bob can read, do we simply send an encrypted message with Bob's public key?</p>
</blockquote>

<p>Yes, the message is encrypted with Bob's public key and encrypted with private key. ( Be aware that the size of the message is límited by RSA key size, so for encryption of large message RSA encryption is used to share a symmetric encryption key)</p>

<blockquote>
  <p>Likewise, in order for Alice to send a message that everyone can verify that it is from her, do we simply send an encrypted message with Alice's public key?</p>
</blockquote>

<p>It is not correct. This case if known as 'digital signature'. The message is digested with a hashing algorithm like SHA, and the result is encrypted with Alice's private key. This is the signature. Bob can verify the message and signature with Alice's public key (decrypt the signature and check that the hash of the message is the same that the encrypted one). If verification is succesful you know that It has been issued by Alice because she owns the private key</p>
","104","<encryption><rsa><digital-signature><public-key>","0","0","2","2016-11-19 18:21:33","","0","","3963067","","2016-11-18 19:51:16","2016-11-18 19:17:33",""
"44849857","SSL pinning getting success even on different certificate","<p>I am trying to do certificate pinning. The network library my company used doesn't support pinning. So I have to do it manually.</p>

<p>This is the code I use</p>

<pre><code>protected Void doInBackground(Void... params) {

    String actualKey = ""OpenSSLRSAPublicKey{modulus=ccf0883ebc511bb86f7f6e360385cf3a"" +
            ""8720fa0d9f3367278baf2fd43d29c21b4384f09ae14207beeb429563639d4388aca65a3"" +
            ""a5f5d2c902bf33e6df904598e6a5a1c037add731bdce606c664368cbc4bb7e269bbda82"" +
            ""ff20bd9ca484f5bd660d5628bca4a8f376acf1cab07f0d9476df283ef44d3bf52d4b730"" +
            ""3187cf587cbb2ce981e01b6cb32ba4f9b197b60013ff19215abb7d2ca9608007df82641"" +
            ""b05127ec9557927e8bd68ff183f8b72720f93152f207f89b446e38fc7aa3db4928f5fb7"" +
            ""92f33898381e7bc5ddb612d2e3a3191854797add8e0d47ed9f7da709e55a89aa7369620"" +
            ""2d90275ada9d43fb462a16839787b6ea3c83df66a1d6e528a38d0d,publicExponent=1"" +
            ""0001}"";

    try {
        SSLSocketFactory factory = HttpsURLConnection.getDefaultSSLSocketFactory();
        SSLSocket socket = (SSLSocket) factory.createSocket(""prisonvoicemail.com"", 443);
        socket.startHandshake();

        Certificate[] certs = socket.getSession().getPeerCertificates();
        Certificate cert = certs[0];
        String key = cert.getPublicKey().toString();

        Log.d(LOG_TAG, key);

        if(key.equals(actualKey)){
            Log.d(LOG_TAG, ""Success"");
        } else {
            Log.d(LOG_TAG, ""Failure"");
        }

    } catch (IOException e){
        e.printStackTrace();
    }

    return null;
</code></pre>

<p>But for some reason it doesn't work. When I connect normally it get success, when I connect through a proxy (mitmproxy) to test a different certificate simulating a man in the middle attack, I also get success. It's like its completely bypassing the proxy and going straight to the normal certificiate. I don't know why this is.</p>
","","103","<android><ssl><public-key><certificate-pinning>","0","","0","2017-06-30 16:03:27","","3","","7972972","","2017-06-30 16:03:27","2017-06-30 15:19:44",""
"21853318","GIT permission denied (public key)","<p>Until yesterday, I was working on a project and every 20 minutes I was making pushes to my remote Git repository. Every time I made a push, I was asked for username and password, and that started to make me annoyed. I looked at this <a href=""https://stackoverflow.com/questions/1595848/configuring-git-over-ssh"">link</a> and tried the answer from Muein Muzamil, so in my git bash I typed:</p>

<p><code>git config remote.origin.url git@github.com:my_username/my_project.git</code></p>

<p>Then my problems start. Now I can't make pushes it's giving me:
<a href=""http://imageshack.com/a/img593/1599/aery.png"" rel=""nofollow noreferrer"">this message</a>. I haven't set up keys or did something similar, I just typed command that I mentioned above. I then tried to unset the remote.origin.url property but it's not pushing again, it says <a href=""http://imageshack.com/a/img811/6661/k00a.png"" rel=""nofollow noreferrer"">this</a>. Now I just want to undo my changes, I will type my username and password every time if necessary but I need to make pushes to my repo.</p>
","<blockquote>
  <p>I haven't set up keys or did something similar, I just typed command that I mentioned above.</p>
</blockquote>

<p>And that’s the problem with blindly following suggestions in answers to completely different questions :)</p>

<p>You basically told Git now to connect and authenticate via SSH but didn’t give it a single information on how that actually works. SSH uses a a private/public key combination which requires you to generate those first on your machine and upload the <em>public</em> one to GitHub then.</p>

<p>Please see <a href=""https://help.github.com/articles/generating-ssh-keys"" rel=""nofollow"">this help document</a> by GitHub on how to set up your SSH keys correctly and how to add the public key to your account.</p>
","102","<git><github><ssh><public-key><git-bash>","0","1","1","2014-02-18 12:12:52","21853447","3","","-1","","2017-05-23 12:09:05","2014-02-18 12:08:25",""
"54045911","WebAuthn - byte length of the ""credential public key""","<p>In WebAuthn, the authenticator data contains the variable length <code>attested credential data</code> followed by the <code>extensions</code>, if any:
<a href=""https://i.stack.imgur.com/wEXSZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/wEXSZ.png"" alt=""Authenticator data schema from the WebAuthn specification""></a></p>

<p>The <code>attested credential data</code> is made variable because of the <code>credential public key</code> field which is a CBOR map.</p>

<p>In case there are extensions, how to know in advance the byte length of this field, so that I can pass this field truncated <strong>without</strong> the extensions to a CBOR library?</p>

<p>The CBOR library I am using doesn't seem to handle extra bytes, and I don't know CBOR enough to know if there's a trick to compute the byte length of a map from its first bytes (or any other trick).</p>
","<p>From what I understand there is <strong>no way to know in advance</strong> without using a CBOR decoder (or COSE Key parser) supporting ""extra bytes"" first, to determine where the ""credential public key data"" ends and where ""extension data"" starts.</p>

<p>There is an extra note discussing exactly this in the <a href=""https://w3c.github.io/webauthn/#sec-authenticator-data"" rel=""nofollow noreferrer"">Editors Draft</a> (not yet in the Candidate Recommendation).</p>

<blockquote>
  <p>Determining attested credential data's length, which is variable,
  involves determining credentialPublicKey’s beginning location given
  the preceding credentialId’s length, and then determining the
  credentialPublicKey’s length (see also Section 7 of [RFC8152]).</p>
</blockquote>

<p>FWIW, discussed in WebAuthn spec's GitHub issue also <a href=""https://github.com/w3c/webauthn/issues/1012"" rel=""nofollow noreferrer"">https://github.com/w3c/webauthn/issues/1012</a></p>
","102","<byte><public-key><cbor><webauthn>","0","0","1","2019-01-06 03:34:10","54058421","0","","405847","","2019-01-04 22:04:37","2019-01-04 20:52:43",""
"51124465","Wrong RSA PrivateKey KeyStore","<p>My app generates a <code>KeyPair</code> when it's opened. I can encrypt text with the <code>PublicKey</code> but when I try to decrypt it with the <code>PrivateKey</code> it throws <code>InvalidKeyException</code>.</p>

<p>Some <code>Log.v</code> debug:</p>

<pre><code>(...) V/Aliases: The public key created is [android.security.keystore.AndroidKeyStoreRSAPublicKey@1840131a]
(...) V/Aliases: The private key created is [android.security.keystore.AndroidKeyStoreRSAPrivateKey@37ad0430]
(...) V/Aliases: The public key used is [android.security.keystore.AndroidKeyStoreRSAPublicKey@1840131a]
(...) V/Aliases: The private key used is [android.security.keystore.AndroidKeyStoreRSAPrivateKey@37ad0430]
(...) V/Aliases: The private key [android.security.keystore.AndroidKeyStoreRSAPrivateKey@37ad0430] is incorrect
</code></pre>

<p><code>KeyPair</code> generation:</p>

<pre><code>try {
    //Load KeyStore  
    keystore = KeyStore.getInstance(""AndroidKeyStore"");
    keystore.load(null);

} catch (KeyStoreException | IOException | NoSuchAlgorithmException | CertificateException e) {
        e.printStackTrace();
    }

    //KeyPair generation
    KeyPairGenerator kpg = null;
    try {
        kpg = KeyPairGenerator.getInstance(""RSA"", ""AndroidKeyStore"");
        kpg.initialize(new KeyGenParameterSpec.Builder(""Test"",KeyProperties.PURPOSE_DECRYPT | KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_SIGN)
                .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512)
                .build());
        kp = kpg.generateKeyPair();
        Log.v(""Aliases"", ""The public key created is ["" + kp.getPublic() + ""]"");
        Log.v(""Aliases"", ""The private key created is ["" + kp.getPrivate()+ ""]"");

    } catch (NoSuchAlgorithmException | NoSuchProviderException | InvalidAlgorithmParameterException e) {
        e.printStackTrace();
    }
</code></pre>

<p><code>Encryption</code> function:</p>

<pre><code>//Removed try/catch
KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry) keystore.getEntry(""Test"", null);
PublicKey publicKey = privateKeyEntry.getCertificate().getPublicKey();

Log.v(""Aliases"", ""The public key used is ["" + publicKey + ""]"");

Cipher cipher = Cipher.getInstance(""RSA"");
cipher.init(Cipher.ENCRYPT_MODE, publicKey);
[] bytes = cipher.doFinal(edittext.getText().toString().getBytes());
edittext.setText(Base64.encodeToString(bytes, Base64.DEFAULT));
</code></pre>

<p><code>Decryption</code> function:</p>

<pre><code>//Removed try/catch
KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry) keystore.getEntry(""Test"", null);
PrivateKey privateKey = privateKeyEntry.getPrivateKey();

Log.v(""Aliases"", ""The private key used is ["" + privateKey + ""]"");

Cipher cipher = Cipher.getInstance(""RSA"");
cipher.init(Cipher.DECRYPT_MODE, privateKey);
String decrypted = new String(cipher.doFinal(Base64.decode(edittext.getText().toString(), Base64.DEFAULT)));
edittext.setText(decrypted);

//Removed the ""try"" part. This gets executed when cipher.init returns InvalidKeyException
catch (InvalidKeyException e) {
            KeyStore.PrivateKeyEntry privateKeyEntry = null;
            privateKeyEntry = (KeyStore.PrivateKeyEntry) keystore.getEntry(""Test"", null);
            PrivateKey privateKey = privateKeyEntry.getPrivateKey();
            Log.v(""Aliases"", ""The private key ["" + privateKey + ""] is incorrect"");
            e.printStackTrace();
}
</code></pre>
","<p>Don't do this:</p>

<pre><code>Cipher cipher = Cipher.getInstance(""RSA"");
</code></pre>

<p>Always specify the full <em>""algorithm/mode/padding""</em> specification. For example,</p>

<pre><code>Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPwithSHA-256andMGF1Padding"");
</code></pre>

<p>Now you also need to tell AndroidKeyStore what encryption paddings you are permitting for your key. So add a <code>setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP)</code> call in your call chain for <code>KeyGenParameterSpec.Builder(...)</code>, i.e.</p>

<pre><code>kpg.initialize(new KeyGenParameterSpec.Builder(""Test"",
                KeyProperties.PURPOSE_DECRYPT | KeyProperties.PURPOSE_ENCRYPT |
                        KeyProperties.PURPOSE_SIGN)
                .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512)
                .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP)
                .build());
</code></pre>
","101","<android><rsa><private-key><public-key><android-keystore>","0","0","1","2018-07-01 17:21:51","51125419","0","","2649012","","2018-07-01 16:46:14","2018-07-01 15:06:06",""
"26214166","ecc public key initialization and signature check","<p>I'm trying to use <em>Crypto++</em> to initialize a public key only and use it to verify a signature.</p>

<p>An external chip creates a signature of a message using its private key (K283 aka sect283k1) (invisible for me).<br />The signature has the format of 72 bytes (36 R and 36 S coordinate) concatinated to a single signature messege.</p>

<p>The public key is available as 72 byte X and Y coordinate. When i use the internal key pair creator in crypto++ , the verification works. But if i try to initialize the public key only, the verification fails.</p>

<p>Does anyone know how to properly initialize an ECC public key in crypto++ ?</p>
","","100","<public-key-encryption><public-key>","2","","0","2014-10-06 10:46:12","","0","","785593","","2014-10-06 10:46:12","2014-10-06 10:17:04",""
"55581112","generating fake public key fingerprint","<p>I need to implement functions to test the deletion of a ssh key given a fingerprint, and one scenario is to delete a ""non-existing"" key by providing it with a fake public key fingerprint. </p>

<p>The public keys are generated randomly, how do I come up with a fake fingerprint which will never collide with any real public key fingerprints?</p>

<p>Checking the <a href=""https://en.wikipedia.org/wiki/Public_key_fingerprint#Creating_public_key_fingerprints"" rel=""nofollow noreferrer"">Public key fingerprint</a> didn't give me enough information about the valid range of a public key fingerprint, the generation of valid fingerprint from public key is <code>MD5</code></p>
","<p>You could generate a public key, get the public key fingerprint, then throw the public key away.  It doesn't guarantee that it will never collide with a ""real"" public key fingerprint (i.e. one of your randomly generated ones), but it would be quite unlikely.</p>
","100","<hash><md5><public-key><rsa-key-fingerprint>","-1","0","1","2019-04-08 20:20:00","","0","","","","","2019-04-08 20:15:10",""
"47044011","How to Load puttygen RSA keys using Cryptolib in C++?","<p>I have API's to load the Private and public keys, developed using Cryptolib.</p>

<pre><code>    CryptoPP::RSA::PrivateKey
    CryptoPP::RSA::PublicKey
</code></pre>

<p>When I try to load the RSA(Private and Public) keys generated by puttygen , load functions crashes. Is it possible load the keys generated by Puttygen, in Cryptolib?</p>
","<p>Crypto++ uses the PCKS #8 Private Key Information Standard for private keys and the X.509 Public key standard format as specified in <a href=""https://cryptopp.com/wiki/Keys_and_Formats#Private_Key_Format"" rel=""nofollow noreferrer"">their documentation</a>. Puttygen uses the PuTTY format. These are not easily converted using C++, but it is possible. It's a lot easier just to export to OpenSSH format from within puttygen though.</p>

<p>If you still want to do it programmatically, you can use the <a href=""https://www.example-code.com/vcpp/ssh_ppk_to_pem.asp"" rel=""nofollow noreferrer"">Chilkat CKSshKey library</a> which was developed for just this purpose. You can see an example of converting a PuTTY private key to OpenSSH PEM (which is what Crypto++ will read) <a href=""https://www.example-code.com/vcpp/ssh_ppk_to_pem.asp"" rel=""nofollow noreferrer"">here</a>.</p>
","99","<c++><private-key><public-key>","0","1","1","2017-11-01 01:07:27","47046780","0","0","","","","2017-10-31 20:27:24",""
"38250632","Serialize sodiumoxides' PublicKey into JSON","<p>I try to serialize the <code>PublicKey</code> struct of sodiumoxide (Rust bindings for libsodium) to a file (e.g. JSON, but binary would be okay, too).</p>

<p>Here is my code:</p>

<pre><code>extern crate serde;
extern crate serde_json;
extern crate sodiumoxide;

use serde::Serialize;
use serde_json::ser::Serializer;
use sodiumoxide::crypto::sign;

fn main() {
    let (pk, _) = sign::gen_keypair();    
    let pk_ser = serde_json::to_string(&amp;pk);
}
</code></pre>

<p>I get the following error message:</p>

<pre><code>error: the trait bound `sodiumoxide::crypto::sign::PublicKey: serde::Serialize` is not satisfied [E0277]
</code></pre>

<p>So the compiler tells me that <code>PublicKey</code> should implement the serde::Serialize trait. But it does implement <code>serde::Serialize</code> as stated here: <a href=""https://dnaq.github.io/sodiumoxide/sodiumoxide/crypto/sign/ed25519/struct.PublicKey.html"" rel=""nofollow"">https://dnaq.github.io/sodiumoxide/sodiumoxide/crypto/sign/ed25519/struct.PublicKey.html</a></p>

<p>So, what is the problem?</p>

<p>Edit:</p>

<p>Cargo.toml:</p>

<pre><code>[package]
name = ...
version = ...
authors = ...

[dependencies]
serde       = ""*""
serde_json  = ""*""
sodiumoxide = ""*""
</code></pre>
","<p>The latest available version of <code>sodiumoxide</code> on <code>crates.io</code> is currently <code>0.0.10</code> which doesn't support <code>serde</code>. You can see this if you look at the <a href=""https://github.com/dnaq/sodiumoxide/blob/86351758b9755f0d3e0540ce223427267983a01d/Cargo.toml"" rel=""nofollow"">Cargo.toml file for the 0.0.10 tag</a>.</p>

<p>What you can do for now is to use the dependency from github instead of crates.io until they put out a new version. Edit your <code>Cargo.toml</code> file like this:</p>

<pre><code>[dependencies]
serde       = ""*""
serde_json  = ""*""
sodiumoxide = { git = ""https://github.com/dnaq/sodiumoxide"" }
</code></pre>

<p>Since you're using the version of <code>sodiumoxide</code> from github, you'll also need to use the github version of its FFI wrapper <code>libsodium-sys</code>. You can do this by adding this to your <code>Cargo.toml</code>:</p>

<pre><code>[replace]
""libsodium-sys:0.0.10"" = { git = ""https://github.com/dnaq/sodiumoxide/"" }
</code></pre>
","99","<serialization><rust><public-key><libsodium>","1","2","1","2016-07-07 18:20:16","38252163","0","","5261541","","2016-07-07 17:42:54","2016-07-07 16:21:24",""
"23343247","SSH without password between servers using public keys","<p>I have generated a ssh-keygen from server1, transferred it to server2 (both Ubuntu servers) using scp, added it to the .ssh/authorized_keys and then changed the permissions to both directory and file. The problem is that when i try to ssh or scp from server1 to server2, it keeps asking me for the passphrase. </p>

<p>It worked perfectly from my mac to the server. I followed this <a href=""https://stackoverflow.com/questions/10032461/git-keeps-to-ask-me-for-ssh-key-passphrase"">Git keeps asking me for my ssh key passphrase</a> which worked but after i logout from both servers, it keeps on asking me for the passphrase again. Can someone help me please?</p>
","<p>Ok found that the solution was not to include a passphrase when you generate the ssh-keygen...</p>
","97","<unix><ssh><scp><public-key>","0","1","1","2014-04-28 15:32:30","23345170","1","1","-1","","2017-05-23 10:32:26","2014-04-28 14:04:40",""
"50195765","base58 cannot get 34 chars results (as Bitcoin address does) but 68 chars","<p>I am trying to convert public key hex to Bitcoin address.</p>

<p>From this website <a href=""http://gobittest.appspot.com/Address"" rel=""nofollow noreferrer"">http://gobittest.appspot.com/Address</a>, I can do some test.</p>

<p>For example, I have this public key:</p>

<pre><code>04b4d653fcbb4b96000c99343f23b08a44fa306031e0587f9e657ab4a2541129368d7d9bb05cd8afbdf7705a6540d98028236965553f91bf1c5b4f70073f55b55d
</code></pre>

<p>According to the website, the address should be:</p>

<pre><code>1DU8Hi1sbHTpEP9vViBEkEw6noeUrgKkJH
</code></pre>

<p>which is the base58 encode of <code>0088C2D2FA846282C870A76CADECBE45C4ACD72BB655DA1216</code>.</p>

<p>However, if I do Base58 encoding directly on <code>0088C2D2FA846282C870A76CADECBE45C4ACD72BB655DA1216</code> on this website <a href=""https://www.browserling.com/tools/base58-encode"" rel=""nofollow noreferrer"">https://www.browserling.com/tools/base58-encode</a>, I will get:</p>

<pre><code>bSLwwticQjhNvEtqTMZXbn3dLmFrPvNrDGE4hmHsfADpHWb3b2ruh3XqtNzv8ESS8V6V
</code></pre>

<p>which is totally different from the 34-char Bitcoin address.</p>

<p>Anyone knows why? </p>
","","96","<public-key-encryption><bitcoin><public-key><bitcoinj><base58>","0","","0","2018-05-06 02:35:48","","4","","","","","2018-05-06 02:35:48",""
"57217529","How to convert JWK public key to PEM format in C++","<p><a href=""https://8gwifi.org/jwkconvertfunctions.jsp"" rel=""nofollow noreferrer"">Here</a> is an online tool that converts JWK to PEM and vice-versa.</p>

<p>I want the same in C++ code.</p>

<p>For JWK:</p>

<pre><code>{  
  ""kty"":""RSA"",
  ""e"":""AQAB"",
  ""kid"":""18b4f6a6-f9ec-456b-a3e8-04af5e97790e"",
  ""n"":""tVKUtcx_n9rt5afY_2WFNvU6PlFMggCatsZ3l4RjKxH0jgdLq6CScb0P3ZGXYbPzXvmmLiWZizpb-h0qup5jznOvOr-Dhw9908584BSgC83YacjWNqEK3urxhyE2jWjwRm2N95WGgb5mzE5XmZIvkvyXnn7X8dvgFPF5QwIngGsDG8LyHuJWlaDhr_EPLMW4wHvH0zZCuRMARIJmmqiMy3VD4ftq4nS5s8vJL0pVSrkuNojtokp84AtkADCDU_BUhrc2sIgfnvZ03koCQRoZmWiHu86SuJZYkDFstVTVSR0hiXudFlfQ2rOhPlpObmku68lXw-7V-P7jwrQRFfQVXw""
}
</code></pre>

<p>The online tool gives PEM:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtVKUtcx/n9rt5afY/2WF
NvU6PlFMggCatsZ3l4RjKxH0jgdLq6CScb0P3ZGXYbPzXvmmLiWZizpb+h0qup5j
znOvOr+Dhw9908584BSgC83YacjWNqEK3urxhyE2jWjwRm2N95WGgb5mzE5XmZIv
kvyXnn7X8dvgFPF5QwIngGsDG8LyHuJWlaDhr/EPLMW4wHvH0zZCuRMARIJmmqiM
y3VD4ftq4nS5s8vJL0pVSrkuNojtokp84AtkADCDU/BUhrc2sIgfnvZ03koCQRoZ
mWiHu86SuJZYkDFstVTVSR0hiXudFlfQ2rOhPlpObmku68lXw+7V+P7jwrQRFfQV
XwIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>And vice-versa. So the <code>kty</code> and <code>kid</code> fields are also somehow included in the PEM.</p>

<p>I've tried OpenSSL like this:</p>

<pre><code> std::string_view nnInBase64Url = ""tVKUtcx_n9rt5afY_2WFNvU6PlFMggCatsZ3l4RjKxH0jgdLq6CScb0P3ZGXYbPzXvmmLiWZizpb-h0qup5jznOvOr-Dhw9908584BSgC83YacjWNqEK3urxhyE2jWjwRm2N95WGgb5mzE5XmZIvkvyXnn7X8dvgFPF5QwIngGsDG8LyHuJWlaDhr_EPLMW4wHvH0zZCuRMARIJmmqiMy3VD4ftq4nS5s8vJL0pVSrkuNojtokp84AtkADCDU_BUhrc2sIgfnvZ03koCQRoZmWiHu86SuJZYkDFstVTVSR0hiXudFlfQ2rOhPlpObmku68lXw-7V-P7jwrQRFfQVXw"";
  std::string_view eeInBase64Url = ""AQAB"";
  auto nnBin = cppcodec::base64_url_unpadded::decode(nnInBase64Url);
  auto eeBin = cppcodec::base64_url_unpadded::decode(eeInBase64Url);
  BIGNUM* modul = BN_bin2bn(nnBin.data(),nnBin.size(),NULL);
  BIGNUM* expon = BN_bin2bn(eeBin.data(),eeBin.size(),NULL);
  RSA* rr = RSA_new();
  RSA_set0_key(rr, modul, expon, NULL);
  BIO* ff = BIO_new_file(""public.pem"",""w+"");
  PEM_write_bio_RSAPublicKey(ff, rr);
</code></pre>

<p>But it gave me a different PEM, that should be obvious, as at least, I didn't specify the <code>kid</code>.</p>

<p>Finally, the questions is: how can I implement the proper conversion using OpenSSL or another C++ lib, so it will also take into consideration the <code>kid</code> and <code>kty</code> fields and result with the same PEM as the online tool gives?</p>
","<p>Here is the solution I found using <a href=""https://www.cryptopp.com/"" rel=""nofollow noreferrer"">CryptoPP</a> and <a href=""https://github.com/noloader/cryptopp-pem"" rel=""nofollow noreferrer"">CryptoPP-PEM</a>:</p>

<pre><code>std::string getRSAPublicKeyInPEMFormat(std::string_view nnInBase64UrlUnpadded, std::string_view eeInBase64UrlUnpadded)
{
  auto nnBin = cppcodec::base64_url_unpadded::decode(nnInBase64UrlUnpadded);
  auto eeBin = cppcodec::base64_url_unpadded::decode(eeInBase64UrlUnpadded);
  CryptoPP::Integer nn(nnBin.data(), nnBin.size(), CryptoPP::Integer::UNSIGNED, CryptoPP::BIG_ENDIAN_ORDER);
  CryptoPP::Integer ee(eeBin.data(), eeBin.size(), CryptoPP::Integer::UNSIGNED, CryptoPP::BIG_ENDIAN_ORDER);
  CryptoPP::RSA::PublicKey pubKey;
  pubKey.Initialize(nn, ee);
  std::ostringstream pem;
  CryptoPP::FileSink sink(pem);
  CryptoPP::PEM_Save(sink, pubKey);
  return pem.str();
}
</code></pre>
","95","<c++><openssl><public-key><pem><jwk>","0","0","2","2019-10-27 09:53:57","57307535","0","","","","","2019-07-26 09:53:21",""
"57217529","How to convert JWK public key to PEM format in C++","<p><a href=""https://8gwifi.org/jwkconvertfunctions.jsp"" rel=""nofollow noreferrer"">Here</a> is an online tool that converts JWK to PEM and vice-versa.</p>

<p>I want the same in C++ code.</p>

<p>For JWK:</p>

<pre><code>{  
  ""kty"":""RSA"",
  ""e"":""AQAB"",
  ""kid"":""18b4f6a6-f9ec-456b-a3e8-04af5e97790e"",
  ""n"":""tVKUtcx_n9rt5afY_2WFNvU6PlFMggCatsZ3l4RjKxH0jgdLq6CScb0P3ZGXYbPzXvmmLiWZizpb-h0qup5jznOvOr-Dhw9908584BSgC83YacjWNqEK3urxhyE2jWjwRm2N95WGgb5mzE5XmZIvkvyXnn7X8dvgFPF5QwIngGsDG8LyHuJWlaDhr_EPLMW4wHvH0zZCuRMARIJmmqiMy3VD4ftq4nS5s8vJL0pVSrkuNojtokp84AtkADCDU_BUhrc2sIgfnvZ03koCQRoZmWiHu86SuJZYkDFstVTVSR0hiXudFlfQ2rOhPlpObmku68lXw-7V-P7jwrQRFfQVXw""
}
</code></pre>

<p>The online tool gives PEM:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtVKUtcx/n9rt5afY/2WF
NvU6PlFMggCatsZ3l4RjKxH0jgdLq6CScb0P3ZGXYbPzXvmmLiWZizpb+h0qup5j
znOvOr+Dhw9908584BSgC83YacjWNqEK3urxhyE2jWjwRm2N95WGgb5mzE5XmZIv
kvyXnn7X8dvgFPF5QwIngGsDG8LyHuJWlaDhr/EPLMW4wHvH0zZCuRMARIJmmqiM
y3VD4ftq4nS5s8vJL0pVSrkuNojtokp84AtkADCDU/BUhrc2sIgfnvZ03koCQRoZ
mWiHu86SuJZYkDFstVTVSR0hiXudFlfQ2rOhPlpObmku68lXw+7V+P7jwrQRFfQV
XwIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>And vice-versa. So the <code>kty</code> and <code>kid</code> fields are also somehow included in the PEM.</p>

<p>I've tried OpenSSL like this:</p>

<pre><code> std::string_view nnInBase64Url = ""tVKUtcx_n9rt5afY_2WFNvU6PlFMggCatsZ3l4RjKxH0jgdLq6CScb0P3ZGXYbPzXvmmLiWZizpb-h0qup5jznOvOr-Dhw9908584BSgC83YacjWNqEK3urxhyE2jWjwRm2N95WGgb5mzE5XmZIvkvyXnn7X8dvgFPF5QwIngGsDG8LyHuJWlaDhr_EPLMW4wHvH0zZCuRMARIJmmqiMy3VD4ftq4nS5s8vJL0pVSrkuNojtokp84AtkADCDU_BUhrc2sIgfnvZ03koCQRoZmWiHu86SuJZYkDFstVTVSR0hiXudFlfQ2rOhPlpObmku68lXw-7V-P7jwrQRFfQVXw"";
  std::string_view eeInBase64Url = ""AQAB"";
  auto nnBin = cppcodec::base64_url_unpadded::decode(nnInBase64Url);
  auto eeBin = cppcodec::base64_url_unpadded::decode(eeInBase64Url);
  BIGNUM* modul = BN_bin2bn(nnBin.data(),nnBin.size(),NULL);
  BIGNUM* expon = BN_bin2bn(eeBin.data(),eeBin.size(),NULL);
  RSA* rr = RSA_new();
  RSA_set0_key(rr, modul, expon, NULL);
  BIO* ff = BIO_new_file(""public.pem"",""w+"");
  PEM_write_bio_RSAPublicKey(ff, rr);
</code></pre>

<p>But it gave me a different PEM, that should be obvious, as at least, I didn't specify the <code>kid</code>.</p>

<p>Finally, the questions is: how can I implement the proper conversion using OpenSSL or another C++ lib, so it will also take into consideration the <code>kid</code> and <code>kty</code> fields and result with the same PEM as the online tool gives?</p>
","<p>You were very close to the solution in your first implementation already, only at the last step, instead of <code>PEM_write_bio_RSAPublicKey</code> you should have used <code>PEM_write_bio_RSA_PUBKEY</code>.</p>

<pre><code>  std::string_view nnInBase64Url = ""tVKUtcx_n9rt5afY_2WFNvU6PlFMggCatsZ3l4RjKxH0jgdLq6CScb0P3ZGXYbPzXvmmLiWZizpb-h0qup5jznOvOr-Dhw9908584BSgC83YacjWNqEK3urxhyE2jWjwRm2N95WGgb5mzE5XmZIvkvyXnn7X8dvgFPF5QwIngGsDG8LyHuJWlaDhr_EPLMW4wHvH0zZCuRMARIJmmqiMy3VD4ftq4nS5s8vJL0pVSrkuNojtokp84AtkADCDU_BUhrc2sIgfnvZ03koCQRoZmWiHu86SuJZYkDFstVTVSR0hiXudFlfQ2rOhPlpObmku68lXw-7V-P7jwrQRFfQVXw"";
  std::string_view eeInBase64Url = ""AQAB"";
  auto nnBin = cppcodec::base64_url_unpadded::decode(nnInBase64Url);
  auto eeBin = cppcodec::base64_url_unpadded::decode(eeInBase64Url);
  BIGNUM* modul = BN_bin2bn(nnBin.data(),nnBin.size(),NULL);
  BIGNUM* expon = BN_bin2bn(eeBin.data(),eeBin.size(),NULL);
  RSA* rr = RSA_new();
  RSA_set0_key(rr, modul, expon, NULL);
  BIO* ff = BIO_new_file(""public.pem"",""w+"");
  PEM_write_bio_RSA_PUBKEY(ff, rr);
</code></pre>

<p>For more information, please refer to the quotes from <a href=""https://stackoverflow.com/questions/13818567/openssl-difference-between-pem-write-rsapublickey-and-pem-write-rsa-pubkey"">this discussion</a></p>

<blockquote>
  <p>The RSAPublicKey functions process an RSA public key using an RSA structure. The public key is encoded using a PKCS#1 RSAPublicKey structure.</p>
  
  <p>The RSA_PUBKEY functions also process an RSA public key using an RSA structure. However the public key is encoded using a SubjectPublicKeyInfo structure and an error occurs if the public key is not RSA .</p>
</blockquote>

<p>and from <a href=""https://datatracker.ietf.org/doc/rfc3280/?include_text=1"" rel=""nofollow noreferrer"">RFC 3280</a>,</p>

<blockquote>
  <p>4.1.2.7  Subject Public Key Info</p>
  
  <p>This field is used to carry the public key and identify the algorithm
    with which the key is used (e.g., RSA, DSA, or Diffie-Hellman).  The
    algorithm is identified using the AlgorithmIdentifier structure
    specified in section 4.1.1.2.  The object identifiers for the
    supported algorithms and the methods for encoding the public key
    materials (public key and parameters) are specified in [PKIXALGS].</p>
</blockquote>
","95","<c++><openssl><public-key><pem><jwk>","0","1","2","2019-10-27 09:53:57","57307535","0","","","","","2019-07-26 09:53:21",""
"33515886","Why should we add public key to authorized keys, when private key is used as identity file for SFTP transfer using JSch","<p>When we need to add public key to authorized keys, why is that we are using identity file authentication with private key for sftp transfer</p>

<pre class=""lang-java prettyprint-override""><code>Session session = null;
ChannelSftp sftpChannel = null;
JSch jsch = new JSch();        
try
{
    session = jsch.getSession( targetUserId, targetHost, targetPort );
    session.setConfig( ""StrictHostKeyChecking"", ""no"" );

    if( identityFile != null )
    {
        jsch.addIdentity( identityFile );
    }

    if( targetPassword != null )
    {
        session.setPassword( targetPassword );
    }

    session.connect();
</code></pre>
","<p>SSH public key authentication is uses asymmetric encryption.</p>

<p>You have a key pair, where one of the keys is called private (identity) and the other public. What you encrypt with the private key can be decrypted with the public key and vice versa. So the server needs to posses your public key to be able to decrypt the SSH traffic coming from you (the JSch SSH client).</p>

<p>Read about <a href=""https://en.wikipedia.org/wiki/Public-key_cryptography"" rel=""nofollow"">Public-key cryptography</a>.</p>
","92","<ssh><jsch><private-key><public-key>","0","0","1","2015-11-04 09:17:25","","0","","850848","","2015-11-04 09:17:25","2015-11-04 07:20:01",""
"22386587","How to collect PKs used in bitcoins","<p>From my humble understanding of bitcoins, it uses public key system. My question: How can I collect public keys or certificates that were used in bitcoins on the Internet? For example, I have previously collected public keys used in the 305.x certificates. But, now I need public keys known to be used for bitcoins. Is there any way?</p>
","<p>The entire set of Bitcoin transactions ever performed is actually available online. Any Bitcoin client will, when it first starts up, download the entire transaction log. So that's one way to do it. Just use either <a href=""https://en.bitcoin.it/wiki/Software#Utilities.2C_libraries.2C_and_interfaces%3a"" rel=""nofollow"">a client library</a>, or run a client and parse what it downloads.</p>

<p>If you're happy to collect it manually, just go to Blockchain.info, and you can browse all transactions there.</p>
","92","<ssl-certificate><public-key-encryption><public-key><bitcoin>","0","0","1","2014-03-13 17:46:07","22386772","0","","","","","2014-03-13 17:38:55",""
"54274765","Load public key with openssl - invalid encoding","<p>I start using openssl.
I want to use a public key to check a signature. But for now, I can not read my public key with openssl.</p>

<p>Here is my source code:</p>

<pre><code>#include &lt;iostream&gt;

#include &lt;openssl/ec.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;openssl/err.h&gt;

bool verifyPublicKey(const std::string &amp;sRawPublicKey);
void printAllError();


int main(int argc, char* argv[])
{
    if (argc &lt; 2) {
        std::cerr &lt;&lt; ""Usage: "" &lt;&lt; argv[0] &lt;&lt; "" PUBLIC KEY"" &lt;&lt; std::endl;
        return EXIT_FAILURE;
    }

    std::string sPublicKey = argv[1];

    std::cout &lt;&lt; ""Key: "" &lt;&lt; sPublicKey &lt;&lt; std::endl;

    bool bRes = verifyPublicKey(sPublicKey);

    if (!bRes)
    {
        std::cerr &lt;&lt; ""verifyPublicKey failled"" &lt;&lt; std::endl;
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}

bool verifyPublicKey(const std::string &amp;sRawPublicKey)
{
    bool bRes = false;

    EC_KEY *eckey = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);
    EC_KEY_set_conv_form(eckey, POINT_CONVERSION_UNCOMPRESSED);

    unsigned char *p_RawPublicKey = new unsigned char[sRawPublicKey.length() + 1];
    std::copy(sRawPublicKey.begin(), sRawPublicKey.end(), p_RawPublicKey);
    const unsigned char *pubkey_raw_p = p_RawPublicKey;

    o2i_ECPublicKey(&amp;eckey, &amp;pubkey_raw_p, sRawPublicKey.size());

    if (!EC_KEY_check_key(eckey))
    {
        EC_KEY_free(eckey);
        bRes = false;
        printAllError();
    }
    else
    {
        EC_KEY_free(eckey);
        bRes = true;
    }

    return bRes;
}

void printAllError()
{
    while (ERR_peek_last_error() != 0)
    {
        std::cerr &lt;&lt; ERR_error_string(ERR_get_error(), nullptr) &lt;&lt; std::endl;
    }
}
</code></pre>

<p>I run it with the following public key:</p>

<blockquote>
  <p>3059301306072A8648CE3D020106082A8648CE3D03010703420004E297417036EB4C6404CC9C2AC4F28468DD0A92F2C9496D187D2BCA784DB49AB540B9FD9ACE0BA49C8532825954755EC10246A71AF2AEE9AEC34BE683CDDFD212</p>
</blockquote>

<p>ASN.1 Decoder:</p>

<pre><code>SEQUENCE {    
    SEQUENCE {
        OBJECTIDENTIFIER 1.2.840.10045.2.1 (ecPublicKey)
        OBJECTIDENTIFIER 1.2.840.10045.3.1.7 (P-256)    
    }
    BITSTRING 0x04E297417036EB4C6404CC9C2AC4F28468DD0A92F2C9496D187D2BCA784DB49AB540B9FD9ACE0BA49C8532825954755EC10246A71AF2AEE9AEC34BE683CDDFD212
    : 0 unused bit(s) 
}
</code></pre>

<p>With the ASN.1, I notice that the key I use is in the correct format: <strong>0x04 || HEX(x) || HEX(y)</strong> with z = 0x04.</p>

<p>The output of the program is as follows:</p>

<blockquote>
  <p>Key: 3059301306072A8648CE3D020106082A8648CE3D03010703420004E297417036EB4C6404CC9C2AC4F28468DD0A92F2C9496D187D2BCA784DB49AB540B9FD9ACE0BA49C8532825954755EC10246A71AF2AEE9AEC34BE683CDDFD212</p>
  
  <p>error:10067066:elliptic curve routines:ec_GFp_simple_oct2point:invalid encoding</p>
  
  <p>error:10098010:elliptic curve routines:o2i_ECPublicKey:EC lib</p>
  
  <p>error:1010206A:elliptic curve routines:ec_key_simple_check_key:point at infinity verifyPublicKey failed</p>
</blockquote>

<p>I'm lost. Do you have explanations? 
Moreover, is it possible to go further by giving only x and y (without ASN.1 header).</p>

<p>Thank you</p>
","<p>Looks like you should feed the raw point to function <code>o2i_ECPublicKey()</code>, without the ASN.1 framing.</p>
","91","<c++11><openssl><public-key><ecdsa>","1","0","1","2019-01-20 11:01:38","54275800","0","","","","","2019-01-20 08:29:41",""
"55531544","SOLVED : Android, Generate Diffie Hellman Public Key received as BigInteger (error : invalid DH public key)","<p>I have one application android in kotlin and one Python on raspberry-Pi.</p>

<p>In my android application, I receive the PublicKey from my raspberry-Pi as a <strong>Big Integer String and I need to convert it to PublicKey</strong> to continue my Diffie Hellman.</p>

<p>With an Android 5.0 API 21 that's works very well but not with Android 8.0 API 26, 
I have the following error on <em>generatePublic</em>: Caused by "" com.android.org.bouncycastle.jcajce.provider.asymmetric.util.ExtendedInvalidKeySpecException: <strong>invalid DH public key</strong>""</p>

<pre><code>fun setReceivePublicKey(PublicKey: String?){
        if(PublicKey != null) {
            receivePublickeyInteger = PublicKey.toBigInteger(10)
            val kf : KeyFactory  = KeyFactory.getInstance(algorithm)
            val spec = DHPublicKeySpec(receivePublickeyInteger,p, g)
            receivePublicKey = kf.generatePublic(spec)
        }
    }
</code></pre>

<p><em>Receive PublicKey : ""1186077227678271540134862509873546604676586024525309469618216434360152823434999056481566892156846842514101786948011297818911589672275028242935710062913875151954912314844969895542136815935639151551824495652302435339103572121293460269849673020899573708935559027341320000586684514537431365310888999481071742463382911267789320258863598830395069544603326989392097657769707348691804224452973533413701448224774045051066571001832939497012508127767764295590745468802146946779724762449738116225105818944048461975843796127501652102207854858881733445450269991549328843268527039094247517538751801284281148484990234735369353511299021673752336297213365909273938355910119789784912925756917470664241207684485528488651231599946627996206087756203382782153653973676758525394929513362198592517449044771216536426414806442100590541816453615234374853999116975727517908588868986511359049342004004550720151991928954078445791206686994303438508485508357012971719850862634083256955999083221834362950792135463522604929254266546089700839060745995960677398""</em></p>

<p><em>P : 5809605995369958062791915965639201402176612226902900533702900882779736177890990861472094774477339581147373410185646378328043729800750470098210924487866935059164371588168047540943981644516632755067501626434556398193186628990071248660819361205119793693985433297036118232914410171876807536457391277857011849897410207519105333355801121109356897459426271845471397952675959440793493071628394122780510124618488232602464649876850458861245784240929258426287699705312584509625419513463605155428017165714465363094021609290561084025893662561222573202082865797821865270991145082200656978177192827024538990239969175546190770645685893438011714430426409338676314743571154537142031573004276428701433036381801705308659830751190352946025482059931306571004727362479688415574702596946457770284148435989129632853918392117997472632693078113129886487399347796982772784615865232621289656944284216824611318709764535152507354116344703769998514148343807</em></p>

<p><em>G : 2</em></p>

<p><em>algorithm : ""DH""</em></p>
","<p>Later versions do more and better validation. One of the checks is to make sure that 2 &lt; y &lt; p-2, where y is the received public key, and you fail that check, hence the exception. As you can see, your received public key is much larger than p, suggesting that there is a bug somewhere in your system.</p>
","90","<android><kotlin><public-key><diffie-hellman>","0","0","1","2019-06-04 13:27:41","55539187","0","","11316010","","2019-04-08 19:53:51","2019-04-05 08:47:54",""
"9861153","What if the public key is lost? Is that a security issue?","<p>DSA or RSA has a private key and pubic key; the private must be kept safe and the public key uploaded to a host you want to access.</p>

<p>But what if the public key is lost, or revealed to everyone, like in a blog post?  Is that a security issue ?</p>
","<p>there is no problem in everyone knowing the public key.  you can share it anywhere you like - even in a blog.  it is only important to keep the private key secret.</p>
","90","<public-key><openssh>","1","0","2","2012-03-25 15:46:02","","2","","181772","","2012-03-25 15:46:02","2012-03-25 15:03:02",""
"9861153","What if the public key is lost? Is that a security issue?","<p>DSA or RSA has a private key and pubic key; the private must be kept safe and the public key uploaded to a host you want to access.</p>

<p>But what if the public key is lost, or revealed to everyone, like in a blog post?  Is that a security issue ?</p>
","<p>No, it's not an issue in the slightest: it's meant to be public anyway.
According to what you use you key for, you may even NEED it to be available to everyone (think gpg keys for signing email).</p>

<p>As long as your private key is safe, you've nothing to worry about.</p>
","90","<public-key><openssh>","1","2","2","2012-03-25 15:46:02","","2","","181772","","2012-03-25 15:46:02","2012-03-25 15:03:02",""
"53069295","What Prevents Hackers from Pretending To Be A Server/Client With Public Keys In Asymmetric Encryption?","<p>In asymmetric encryption, public keys can be used to encrypt messages sent to a device with the matching private key. I understand that this prevents sniffers from knowing the content of a message, but consider this: <br>
What keeps a hacker from using the public key to encrypt messages and pretend to be someone he\she is not? Say I am shopping on Amazon, and a hacker managed to capture amazon's public key when Amazon exchanged it with me. Couldn't this hacker pretend to be me by simply modifying the headers of his packets to look like they came from my computer? I know this doesn't happen, so what am I missing? </p>
","<p>Please have a look at the TLS Handshake protocol which states clearly what is happening in TLS: <a href=""https://de.wikipedia.org/wiki/Transport_Layer_Security#TLS_Handshake_Protocol"" rel=""nofollow noreferrer"">https://de.wikipedia.org/wiki/Transport_Layer_Security#TLS_Handshake_Protocol</a></p>

<ol>
<li><p>You don't have a private or public key when connecting to amazon, because you're not authenticating with a client certificate.</p></li>
<li><p>If a hacker steals your public key that is not a problem because your public key can only be used to send encrypted messages to <strong>you</strong>. Only <strong>you</strong> can decrypt these messages, because only <strong>you</strong> have the matching private key. That's what asymmetric cryptography is all about!</p></li>
</ol>
","86","<security><private-key><public-key>","1","0","4","2018-11-01 21:37:45","53109314","3","","7228860","","2018-11-01 20:20:41","2018-10-30 16:54:21",""
"53069295","What Prevents Hackers from Pretending To Be A Server/Client With Public Keys In Asymmetric Encryption?","<p>In asymmetric encryption, public keys can be used to encrypt messages sent to a device with the matching private key. I understand that this prevents sniffers from knowing the content of a message, but consider this: <br>
What keeps a hacker from using the public key to encrypt messages and pretend to be someone he\she is not? Say I am shopping on Amazon, and a hacker managed to capture amazon's public key when Amazon exchanged it with me. Couldn't this hacker pretend to be me by simply modifying the headers of his packets to look like they came from my computer? I know this doesn't happen, so what am I missing? </p>
","<blockquote>
  <p>Say I am shopping on Amazon, and a hacker managed to capture amazon's public key when Amazon exchanged it with me. </p>
</blockquote>

<p>Data encrypted with Amazon's public key can only be decrypted with Amazon's private key.</p>
","86","<security><private-key><public-key>","1","0","4","2018-11-01 21:37:45","53109314","3","","7228860","","2018-11-01 20:20:41","2018-10-30 16:54:21",""
"53069295","What Prevents Hackers from Pretending To Be A Server/Client With Public Keys In Asymmetric Encryption?","<p>In asymmetric encryption, public keys can be used to encrypt messages sent to a device with the matching private key. I understand that this prevents sniffers from knowing the content of a message, but consider this: <br>
What keeps a hacker from using the public key to encrypt messages and pretend to be someone he\she is not? Say I am shopping on Amazon, and a hacker managed to capture amazon's public key when Amazon exchanged it with me. Couldn't this hacker pretend to be me by simply modifying the headers of his packets to look like they came from my computer? I know this doesn't happen, so what am I missing? </p>
","<blockquote>
  <p>a hacker managed to capture amazon's public key</p>
</blockquote>

<p>Amazon's public key is public. Everyone knows it. The one that was issued May 3, 2018 begins ""A9 F4 4A 9B 29 84 20 A7 53 FF BA 01 B5 1E 0C 2A A7 53"". The whole point of public/private key cryptography is that the public key is not a secret. So capturing the public key is not important.</p>

<p>Your question isn't about masquerading as Amazon to you (i.e. having to do with Amazon's keys). It's about masquerading as you to Amazon. That's a completely different situation. You don't identify yourself to Amazon with a certificate (called a ""client certificate""), so certificates and public/private key cryptography have nothing to do with this. Yes; anyone could send a message to Amazon encrypted with their public key, but that's not how you prove you are who you say you are.</p>

<p>Instead, you identify yourself to Amazon with credentials, typically a user name and a password. When you do that, Amazon hands you back a session token, which is just a big random number that is mapped to you in a database table (or sometimes the session token is encrypted information about the session so that the database isn't needed). Once you're authenticated, you keep passing your session token back to Amazon to say ""you already know and trust who I am.""</p>

<p>So what if someone captures the session token? That would be a big deal. That would absolutely allow exactly what you're describing. The session token has to be protected for as long as it's valid. We protect it when we pass it to Amazon using TLS which ""prevents sniffers from knowing the content of a message"" so attackers hopefully can't discover the session id.</p>

<p>There are many attacks to steal the session id, broadly called ""session hijacking."" One of the more famous was <a href=""https://en.wikipedia.org/wiki/Firesheep"" rel=""nofollow noreferrer"">Firesheep</a>, which relied on unsecured (HTTP) sessions. However, there are more advanced attacks against HTTPS, such as <a href=""https://en.wikipedia.org/wiki/CRIME"" rel=""nofollow noreferrer"">CRIME</a> and <a href=""https://en.wikipedia.org/wiki/BREACH"" rel=""nofollow noreferrer"">BREACH</a>. Improvements in TLS have mitigated against various known attacks, but it is always possible that new ones will emerge.</p>
","86","<security><private-key><public-key>","1","4","4","2018-11-01 21:37:45","53109314","3","","7228860","","2018-11-01 20:20:41","2018-10-30 16:54:21",""
"53069295","What Prevents Hackers from Pretending To Be A Server/Client With Public Keys In Asymmetric Encryption?","<p>In asymmetric encryption, public keys can be used to encrypt messages sent to a device with the matching private key. I understand that this prevents sniffers from knowing the content of a message, but consider this: <br>
What keeps a hacker from using the public key to encrypt messages and pretend to be someone he\she is not? Say I am shopping on Amazon, and a hacker managed to capture amazon's public key when Amazon exchanged it with me. Couldn't this hacker pretend to be me by simply modifying the headers of his packets to look like they came from my computer? I know this doesn't happen, so what am I missing? </p>
","<blockquote>
  <p>What keeps a hacker from using the public key to encrypt messages and pretend to be someone he\she is not? Say I am shopping on Amazon, and a hacker managed to capture amazon's public key when Amazon exchanged it with me. Couldn't this hacker pretend to be me by simply modifying the headers of his packets to look like they came from my computer?</p>
</blockquote>

<p>Very good question.  TLS prevents this by creating sessions keys between the client and server during the handshake protocol.  There are two types of keys: one for encryption (typically AES) and one for <a href=""https://en.wikipedia.org/wiki/Message_authentication_code"" rel=""nofollow noreferrer"">message integrity / message authentication</a> (MAC) (typically HMAC).  All comms during the session are encrypted with the symmetric encryption key and MAC'ed with the MAC key.  Any data that is not properly signed with the MAC key is not accepted by the server.  Thus, only one who has these keys can communicate with the server for that session.</p>

<p>So the question then reduces to how an attacker can determine the encryption and MAC keys which are set up during the initial TLS handshake.  Note during the handshake, the server provides its public key via the certificate to the client, and the client verifies that the certificate is valid -- including that it belongs to the domain that is claimed in the certificate.  This allows the client to verify that it is talking to the right server assuming nobody can bypass PKI (i.e. cert authorities are doing the right thing and nobody can break the public key crypto).  Now different clients can set up different sessions with the server, but they all are done using a private key generated by each client and uniquely known by each client.  Therefore, each client sets up its session in a unique way using a key that is known only to them and nobody else.</p>

<p>There is more to the whole design if you want to dig deep, including how sequence numbers are used to prevent replay attacks.  But I hope you get the general idea.</p>
","86","<security><private-key><public-key>","1","2","4","2018-11-01 21:37:45","53109314","3","","7228860","","2018-11-01 20:20:41","2018-10-30 16:54:21",""
"30233675","Encrypt Content by RSA in Android / Java","<pre><code>public static String encryptByPublicKey(byte[] data, String key)
        throws Exception {

    byte[] keyBytes = decryptBASE64(key);

    X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
    KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
    Key publicKey = keyFactory.generatePublic(x509KeySpec);

    Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
    cipher.init(Cipher.ENCRYPT_MODE, publicKey);

    return new String(cipher.doFinal(data));
}
</code></pre>

<p>I have a public key, like <code>MFWww.........EAAQ==</code>. When I pass the string to that argument, the encrypted message is some unknown characters. Therefore I suspect I should do something on the key before passing it to the function. But I don't how could I make it. So see anyone can help.</p>

<p>Thank you</p>
","<p>Never, ever, ever pass arbitrary binary data to the <code>String</code> constructor. You don't have encoded <em>text</em>, you have arbitrary bytes. That's not what the <code>String</code> constructor is for.</p>

<p>Ideally, don't represent the binary data as text at all - but if you <em>have</em> to, do so using base64 or hex, which will encode arbitrary binary data in ASCII.</p>
","83","<java><android><encryption><rsa><public-key>","1","2","1","2015-05-14 09:34:56","","1","1","","","","2015-05-14 09:23:53",""
"27403249","Is there any fast and simple cryption algorithm with public/private keys?","<p>RSA is not suitable for fast cryption. It is also hard to implement.</p>

<p>I want a fast and simple cryption algorithm with public and private keys, instead of using RSA algorithm.</p>

<p>Something like XOR cryption but a public key for encryption and a private key for decryption.</p>

<p>Is there any fast and simple cryption algorithm with public/private keys?</p>
","<p>ElGamal, RSA, Rabin and GM are the asymmetric encryption/decryption algorithms that I'm aware of.</p>

<p>All of these algorithms are pretty much equally hard to implement.</p>

<p>There are probably better places to post your question, as it doesn't deal with any specific coding issue.</p>

<p>Nevertheless, here is a short summary of the differences between these algorithms:</p>

<p><img src=""https://i.stack.imgur.com/9THek.png"" alt=""enter image description here""></p>
","83","<algorithm><private-key><public-key><crypt>","0","1","1","2014-12-10 14:43:26","","2","","","","","2014-12-10 14:15:54",""
"27793441","Git: which key do I use (may not be by default)?","<p>In my local environment (Mac OS X) I have at my home folder the .ssh folder, where there are two keys: github_rsa and id_rsa; in addition, there is a known_hosts file saying some like:</p>

<pre><code>github.com,192.30.252.131 ssh-rsa blahblah
192.30.252.129 ssh-rsa blahlllblahhhh
...
</code></pre>

<p>Is there a way (command line preferred) for me to know which key my git command is using when interacting with Github or Bitbucket? If so, how?</p>

<p>Thanks.</p>
","<p>The <code>id_rsa.pub</code> file contains the RSA public key for your user (generally the key used for connecting to GitHub, if you follow their <a href=""https://help.github.com/articles/generating-ssh-keys/"" rel=""nofollow noreferrer"">tutorial</a>).  If you want to use the <code>github_rsa</code> key, you can change the key used to connect to GitHub by creating a new host definition in the <code>~/.ssh/config</code> file:</p>

<pre><code>Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/github_rsa
</code></pre>

<p>By the way, the <code>known-hosts</code> file contains the servers you have connected to and their public keys.</p>

<p>See also this SO question: <a href=""https://stackoverflow.com/questions/10455974/setting-up-ssh-keys-for-gibhub"">Setting up ssh keys for GibHub</a></p>
","83","<git><ssh><private-key><public-key>","1","1","2","2016-01-28 07:50:34","27793710","0","","2889276","","2016-01-28 07:50:34","2015-01-06 06:42:19",""
"27793441","Git: which key do I use (may not be by default)?","<p>In my local environment (Mac OS X) I have at my home folder the .ssh folder, where there are two keys: github_rsa and id_rsa; in addition, there is a known_hosts file saying some like:</p>

<pre><code>github.com,192.30.252.131 ssh-rsa blahblah
192.30.252.129 ssh-rsa blahlllblahhhh
...
</code></pre>

<p>Is there a way (command line preferred) for me to know which key my git command is using when interacting with Github or Bitbucket? If so, how?</p>

<p>Thanks.</p>
","<p>The known-host file that you have given in the question has the public ssh-keys of the respective servers.</p>

<p>The private-public key pair are supposed to be for authentication!</p>

<p>Your .ssh folder is supposed to have two keys 1. Private key and 2. Public key. Public key has extension .pub and private key dosen't have any! </p>

<p>So most probably the two files that you have are one is Public (Which will also be there on github) and private.</p>

<p>Anyhow To know which key your github is using you can do this:</p>

<ol>
<li>Find the public key in your github account and find its pair in your .ssh folder (i.e if you have maintained a proper nomenclature).</li>
<li>OR else Take your private key and run the command <code>ssh-keygen -y -f &lt;private key file&gt;</code>, it will create a public key. Compare the generated pub-key with your github!</li>
</ol>

<p>Hope this explains a lot more than the question for your future use! :)</p>
","83","<git><ssh><private-key><public-key>","1","1","2","2016-01-28 07:50:34","27793710","0","","2889276","","2016-01-28 07:50:34","2015-01-06 06:42:19",""
"18459466","How to switch between keys to push to Heroku?","<p>At my work station at the office, I set a new key and push successfully. </p>

<p>But at home, I forgot my password. So I generated a new key and added it</p>

<p><img src=""https://i.stack.imgur.com/hE1db.jpg"" alt=""process in the command line""></p>

<p>I set a password that I memorized. But when I went to push to Heroku, rather than being asked for the password respective of the public key I was asked for, I was instead prompted for a password to a different key. </p>

<p><img src=""https://i.stack.imgur.com/Od2nP.png"" alt=""heroku password""></p>

<p>I also looked at <a href=""https://devcenter.heroku.com/articles/keys"" rel=""nofollow noreferrer"">Heroku's documentation on keys</a> but they did not mention how to remove the old keys.</p>

<p>I am also aware of the question <a href=""https://stackoverflow.com/questions/4269922/permission-denied-publickey-when-deploying-heroku-code-fatal-the-remote-end?rq=1"">Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly</a> but that does not explain why I am not able to switch between keys. </p>

<p>Yes I have created a new key and uploaded it</p>

<pre><code>Juan-Gallardos-MacBook-Pro:.ssh juangallardo$ heroku keys:add heroku_sucks.pub
Uploading SSH public key heroku_sucks.pub... done
Juan-Gallardos-MacBook-Pro:.ssh juangallardo$
</code></pre>

<p>But stil got </p>

<pre><code>Cloning into 'cssbuttongallery'...
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>
","<p>Since Heroku's documentation was incomplete I found some guidance from Github. Apparently I was not using my SSH Key <a href=""https://help.github.com/articles/error-permission-denied-publickey#make-sure-you-have-a-key-and-ssh-is-using-it"" rel=""nofollow"">https://help.github.com/articles/error-permission-denied-publickey#make-sure-you-have-a-key-and-ssh-is-using-it</a> . Which I found out by running </p>

<pre><code>ssh-add -l
</code></pre>

<p>I then added it by running</p>

<pre><code>ssh-add ~/.ssh/[name_of_key]
</code></pre>

<p>So you just replace ""[name_of_key]"" with your filename (modify the path if you need to). And do not include the <code>.pub</code> extension or you will get an <code>WARNING: UNPROTECTED PRIVATE KEY FILE!</code> error.</p>

<p>You will then be prompted for your passphrase</p>

<pre><code>Enter passphrase
</code></pre>

<p>And get a confirmation if all goes well </p>

<pre><code>Identity added:
</code></pre>
","82","<git><heroku><public-key>","1","1","1","2013-09-09 23:47:46","18678249","2","1","-1","","2017-05-23 10:30:27","2013-08-27 07:27:26",""
"56351683","Gitlab SSH: Permission Denied, Despite correct key setup","<p>I'm trying to use Gitlab for the first time, and have been trying to set up my account to automatically ssh in. I've followed instructions and tried many different times, but no matter what, I can't ssh to gitlab properly.</p>

<p>I've tried deleting my id_rsa and id_rsa.pub files and regenerating keys, using the command line to copy the contents of id_rsa.pub to my Gitlab user settings (both with a newline and no newline at the end of the paste). I added my key using ssh-add. I'm running ssh -vvvv git@gitlab.com for verbosity and I just cannot connect succesfully for the life of me.</p>

<pre><code>OpenSSH_7.2p2 Ubuntu-4ubuntu2.8, OpenSSL 1.0.2g  1 Mar 2016
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 19: Applying options for *
debug2: resolving ""gitlab.com"" port 22
debug2: ssh_connect_direct: needpriv 0
debug1: Connecting to gitlab.com [35.231.145.151] port 22.
debug1: Connection established.
debug1: identity file /home/jihan/.ssh/id_rsa type 1
debug1: key_load_public: No such file or directory
debug1: identity file /home/jihan/.ssh/id_rsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/jihan/.ssh/id_dsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/jihan/.ssh/id_dsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/jihan/.ssh/id_ecdsa type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/jihan/.ssh/id_ecdsa-cert type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/jihan/.ssh/id_ed25519 type -1
debug1: key_load_public: No such file or directory
debug1: identity file /home/jihan/.ssh/id_ed25519-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.8
debug1: Remote protocol version 2.0, remote software version OpenSSH_7.2p2 Ubuntu-4ubuntu2.8
debug1: match: OpenSSH_7.2p2 Ubuntu-4ubuntu2.8 pat OpenSSH* compat 0x04000000
debug2: fd 3 setting O_NONBLOCK
debug1: Authenticating to gitlab.com:22 as 'git'
debug3: hostkeys_foreach: reading file ""/home/jihan/.ssh/known_hosts""
debug3: record_hostkey: found key type ECDSA in file /home/jihan/.ssh/known_hosts:3
debug3: load_hostkeys: loaded 1 keys from gitlab.com
debug3: order_hostkeyalgs: prefer hostkeyalgs: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
debug3: send packet: type 20
debug1: SSH2_MSG_KEXINIT sent
debug3: receive packet: type 20
debug1: SSH2_MSG_KEXINIT received
debug2: local client KEXINIT proposal
debug2: KEX algorithms: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,ext-info-c
debug2: host key algorithms: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa
debug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc
debug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc,3des-cbc
debug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: compression ctos: none,zlib@openssh.com,zlib
debug2: compression stoc: none,zlib@openssh.com,zlib
debug2: languages ctos: 
debug2: languages stoc: 
debug2: first_kex_follows 0 
debug2: reserved 0 
debug2: peer server KEXINIT proposal
debug2: KEX algorithms: curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1
debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519
debug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
debug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
debug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: compression ctos: none,zlib@openssh.com
debug2: compression stoc: none,zlib@openssh.com
debug2: languages ctos: 
debug2: languages stoc: 
debug2: first_kex_follows 0 
debug2: reserved 0 
debug1: kex: algorithm: curve25519-sha256@libssh.org
debug1: kex: host key algorithm: ecdsa-sha2-nistp256
debug1: kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug1: kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none
debug3: send packet: type 30
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug3: receive packet: type 31
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:HbW3g8zUjNSksFbqTiUWPWg2Bq1x8xdGUrliXFzSnUw
debug3: hostkeys_foreach: reading file ""/home/jihan/.ssh/known_hosts""
debug3: record_hostkey: found key type ECDSA in file /home/jihan/.ssh/known_hosts:3
debug3: load_hostkeys: loaded 1 keys from gitlab.com
debug3: hostkeys_foreach: reading file ""/home/jihan/.ssh/known_hosts""
debug3: record_hostkey: found key type ECDSA in file /home/jihan/.ssh/known_hosts:4
debug3: load_hostkeys: loaded 1 keys from 35.231.145.151
debug1: Host 'gitlab.com' is known and matches the ECDSA host key.
debug1: Found key in /home/jihan/.ssh/known_hosts:3
debug3: send packet: type 21
debug2: set_newkeys: mode 1
debug1: rekey after 134217728 blocks
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug3: receive packet: type 21
debug1: SSH2_MSG_NEWKEYS received
debug2: set_newkeys: mode 0
debug1: rekey after 134217728 blocks
debug2: key: /home/jihan/.ssh/id_rsa (0x55e032d43000), agent
debug2: key: jihany@nvidia.com (0x55e032d363a0), agent
debug2: key: /home/jihan/.ssh/id_dsa ((nil))
debug2: key: /home/jihan/.ssh/id_ecdsa ((nil))
debug2: key: /home/jihan/.ssh/id_ed25519 ((nil))
debug3: send packet: type 5
debug3: receive packet: type 7
debug1: SSH2_MSG_EXT_INFO received
debug1: kex_input_ext_info: server-sig-algs=&lt;rsa-sha2-256,rsa-sha2-512&gt;
debug3: receive packet: type 6
debug2: service_accept: ssh-userauth
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug3: send packet: type 50
debug3: receive packet: type 51
debug1: Authentications that can continue: publickey
debug3: start over, passed a different list publickey
debug3: preferred gssapi-keyex,gssapi-with-mic,publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /home/jihan/.ssh/id_rsa
debug3: send_pubkey_test
debug3: send packet: type 50
debug2: we sent a publickey packet, wait for reply
debug3: receive packet: type 51
debug1: Authentications that can continue: publickey
debug1: Offering RSA public key: jihany@nvidia.com
debug3: send_pubkey_test
debug3: send packet: type 50
debug2: we sent a publickey packet, wait for reply
debug3: receive packet: type 51
debug1: Authentications that can continue: publickey
debug1: Trying private key: /home/jihan/.ssh/id_dsa
debug3: no such identity: /home/jihan/.ssh/id_dsa: No such file or directory
debug1: Trying private key: /home/jihan/.ssh/id_ecdsa
debug3: no such identity: /home/jihan/.ssh/id_ecdsa: No such file or directory
debug1: Trying private key: /home/jihan/.ssh/id_ed25519
debug3: no such identity: /home/jihan/.ssh/id_ed25519: No such file or directory
debug2: we did not send a packet, disable method
debug1: No more authentication methods to try.
Permission denied (publickey).
</code></pre>

<p>It has to be some small dumb mistake somewhere, but I just can't figure it out. If it helps, when I do ssh-add -l, my fingerprints look like a hash for some reason.</p>
","<p>Do check that:</p>

<ul>
<li>when you <a href=""https://docs.gitlab.com/ee/gitlab-basics/create-your-ssh-keys.html#creating-your-ssh-keys"" rel=""nofollow noreferrer"">copy the public key in your GitLab settings profile</a>, it is copied as <em>one</em> line</li>
<li>when you <a href=""https://docs.gitlab.com/ee/ssh/README.html#rsa-ssh-keys"" rel=""nofollow noreferrer"">generate your RSA SSH key</a>, you use the <a href=""https://stackoverflow.com/a/53645530/6309"">old legacy profile (in case the new OPENSSH one with 70 chars per line is not well interpreted)</a></li>
</ul>

<p>That is</p>

<pre><code>ssh-keygen -m PEM -t rsa -P ""
</code></pre>
","80","<ssh><gitlab><rsa><private-key><public-key>","1","0","1","2019-07-03 20:20:09","","0","1","7351393","","2019-05-29 16:57:13","2019-05-29 00:42:09",""
"48399389","Does wrapping a line affect the private/public key in PHP?","<p>I received a public key in the following format:</p>

<pre><code>$publicKey = '-----BEGIN PUBLIC KEY
MIGfMA0GCSqGSIb3DQEBAQUAAASDF4QKBgQCMuZSztSi6iBLLxHquRomOXLW4WVtoovj8QqbUR8Bp1EiPsvN9Z9o4gCStacMAGWdvxH+V2vCZ7C66S+h2GTG45VBMfUeIfpc+Ta2593R10J34Vv+uKhPmTYNXASDH4howZMc0SK18ol7be63VtlwXGakNkLXsucGlTnfkWwGoQIDAQAB
-----END PUBLIC KEY-----';


$publicKey = '-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAAASDF4QKBgQCMuZSztSi6iBLLx
HquRomOXLW4WVtoovj8QqbUR8Bp1EiPsvN9Z9o4gCStacMAGWd
vxH+V2vCZ7C66S+h2GTG45VBMfUeIfpc+Ta2593R10J34Vv+uK
hPmTYNXASDH4howZMc0SK18ol7be63VtlwXGakNkLXsucGlTnf
kWwGoQIDAQAB
-----END PUBLIC KEY-----';
</code></pre>

<p>The difference is that the first one is not wrapped, otherwise, both strings are the same.</p>

<p>Both of them can do the encryption, but I am not sure if they are the same ones because of the line breaks.<br>
I don't have the private key.</p>

<p>Does wrapping the key affect the value of the key?</p>
","","79","<php><rsa><private-key><public-key>","1","","0","2018-01-23 11:00:07","","2","1","3578036","","2018-01-23 11:00:07","2018-01-23 10:25:20",""
"55421208","java.security.spec.InvalidKeySpecException error when running unit test with maven","<p>I'm upgrading my project from java 1.7 to java 1.8 . When I run all the tests of project with maven command line, there are some tests failed with error <code>java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: exponent is smaller than 3</code></p>

<p>However, when I run only the class containing these failed tests with maven or Eclipse, they work.</p>

<pre class=""lang-java prettyprint-override""><code>public static PublicKey getPublicKey(final byte[] publicKeyBytes) throws Exception {
    final X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicKeyBytes);
    return KeyFactory.getInstance(""RSA"").generatePublic(keySpec);
}
</code></pre>

<p>The problem is in line</p>

<pre class=""lang-java prettyprint-override""><code>return KeyFactory.getInstance(""RSA"").generatePublic(keySpec);
</code></pre>

<p>Stack Trace Exception :</p>

<pre><code>java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: exponent is smaller than 3
    at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:205)
    at java.security.KeyFactory.generatePublic(KeyFactory.java:334) 
    at sun.reflect.GeneratedMethodAccessor724.invoke(Unknown Source)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at com.sun.xml.ws.api.server.InstanceResolver$1.invoke(InstanceResolver.java:250)
    at com.sun.xml.ws.server.InvokerTube$2.invoke(InvokerTube.java:149)
    at com.sun.xml.ws.server.sei.SEIInvokerTube.processRequest(SEIInvokerTube.java:94)
    at com.sun.xml.ws.api.pipe.Fiber.__doRun(Fiber.java:961)
    at com.sun.xml.ws.api.pipe.Fiber._doRun(Fiber.java:910)
    at com.sun.xml.ws.api.pipe.Fiber.doRun(Fiber.java:873)
    at com.sun.xml.ws.api.pipe.Fiber.runSync(Fiber.java:775)
    at com.sun.xml.ws.server.WSEndpointImpl$2.process(WSEndpointImpl.java:386)
    at com.sun.xml.ws.transport.http.HttpAdapter$HttpToolkit.handle(HttpAdapter.java:640)
    at com.sun.xml.ws.transport.http.HttpAdapter.handle(HttpAdapter.java:263)
    at com.sun.xml.ws.transport.http.server.WSHttpHandler.handleExchange(WSHttpHandler.java:113)
    at com.sun.xml.ws.transport.http.server.WSHttpHandler.handle(WSHttpHandler.java:97)
    at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79)
    at sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:83)
    at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:82)
    at sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:675)
    at com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:79)
    at sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:647)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    at java.lang.Thread.run(Thread.java:748)
Caused by: java.security.InvalidKeyException: exponent is smaller than 3
    at sun.security.rsa.RSAPublicKeyImpl.checkExponentRange(RSAPublicKeyImpl.java:99)
    at sun.security.rsa.RSAPublicKeyImpl.&lt;init&gt;(RSAPublicKeyImpl.java:88)
    at sun.security.rsa.RSAKeyFactory.generatePublic(RSAKeyFactory.java:298)
    at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:201)
</code></pre>
","","79","<java><maven><unit-testing><rsa><public-key>","0","","0","2019-03-29 16:13:15","","0","","2416821","","2019-03-29 16:13:15","2019-03-29 15:57:51",""
"16164429","Using git with 2 laptops and multiple identities","<p>I started a project on my office computer. Now I'm trying to move development to my home laptop. But my home laptop already has keys of own (for several other projects). </p>

<p>This particular project is on bitbucket. Others on this computer are on assembla and several other places.  So I thought about trying to create keys in addition to id_rsa (existing set) for my office key. </p>

<p>I did exactly that, but my keys are called <code>bitbucket</code> instead of <code>id_rsa</code>. So I created <code>config file</code> in <code>~/.ssh</code> and put this code in it with proper indentation. I'm using Tower for GIT and it gives me error: </p>

<pre><code>Warning: Permanently added 'bitbucket.org,' (RSA) to the list of known hosts.
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
</code></pre>

<p>Now I am not sure if this was all I had to do. Did I miss some step? How do I go about it. </p>
","<p>Did you load the new public key to bitbucket? See the ""Cause"" section for this issue on the Bitbucket Knowledge Base <a href=""https://confluence.atlassian.com/pages/viewpage.action?pageId=302811860"" rel=""nofollow"">here</a>.</p>
","79","<git><ssh><bitbucket><public-key>","0","1","1","2013-04-23 09:40:19","","0","","70930","","2013-04-23 08:37:56","2013-04-23 08:21:29",""
"52687069","How to save public key in SSL certificate messages using OpenSsl?","<p>I want to save the public key and its algorithm in SSL Certificates messages.</p>

<p>in OpenSSL library, I found a function named public_key_type which returns public key algorithm. but to extract public key, I found just a function named evp_PKEY_print_public, which prints public key. but I don't want to print it. my goal is to save it in a structure.
anyone can help me?</p>
","<p>From your question, it is not entirely clear to me what you mean by ""to save it in a structure"". But I can explain how you can get access to the actual public key stored in your certificate, so you can do what you want with it.</p>

<p>First, you can use the following to get a hold of the certificate's public key, in its generic format:</p>

<pre><code>EVP_PKEY *pubkey = X509_get_pubkey(cert);
/* If it is not NULL, do what needs to be done with pubkey */
EVP_PKEY_free(pubkey);
</code></pre>

<p>See <a href=""https://www.openssl.org/docs/man1.1.0/crypto/X509_REQ_set_pubkey.html"" rel=""nofollow noreferrer"">the documentation of <code>X509_get_pubkey()</code></a> for more information.</p>

<p>Now that you have this generic public key, you can use <a href=""https://www.openssl.org/docs/man1.1.0/crypto/EVP_PKEY_type.html"" rel=""nofollow noreferrer"">its lower-level key accessors</a> to get access to the underlying public key in its specific format. For example:</p>

<pre><code>RSA *rsapubkey = EVP_PKEY_get1_RSA(pubkey);
if (NULL != rsapubkey) {
    printf(""This cert has an RSA public key\n"");
    /* Do your stuff with the RSA key, for example using RSA_get0_key()
       for current versions of OpenSSL, or directly access the fields
       rsapubkey-&gt;n and rsapubkey-&gt;e for older versions */
    RSA_free(rsapubkey);
}
</code></pre>

<p>The function <code>EVP_PKEY_get1_RSA()</code> returns <code>NULL</code> if the underlying key is not an RSA key. Otherwise, you can use it to get access to the modulus (<code>n</code>) and exponent (<code>e</code>), which is basically all you need to ""save"" it. Or you can hold on to <code>rsapubkey</code>, since it contains all public key information. You have to <code>RSA_free()</code> it when you are done.</p>

<p>Similarly, you can use <code>EVP_PKEY_get1_EC_KEY()</code> if you expect an EC key.</p>
","79","<openssl><ssl-certificate><public-key>","1","2","1","2018-10-09 15:08:37","","0","","","","","2018-10-07 09:14:33",""
"49442952","Generating unsigned RSA Public Key with openssl","<p>Following code is simplified to demonstrate plain RSA public key with the OpenSSL library:</p>

<pre><code>RSA_ptr rsa(RSA_new(), ::RSA_free);
BN_ptr bn(BN_new(), ::BN_free);
BN_set_word(bn.get(), RSA_F4);  //65535
RSA_generate_key_ex(rsa.get(), 320, bn.get(), NULL);
BIO * keybio = BIO_new(BIO_s_mem());
i2d_RSAPublicKey_bio(keybio, rsa.get());
char buffer2 [2048];
size_t pubKeyBufferSize = BIO_read (keybio, buffer2, 320);
std::cout &lt;&lt; Convert::BinToHexString(buffer2, pubKeyBufferSize); //using here our internal routine to print binary data
</code></pre>

<p>Output from this will come up with binary data in DER ANS.1 format like this:</p>

<pre><code>30 ;SEQUENCE
  30 02 29 ;SEQUENCE + size
    00 ;leading zero of INTEGER
    CCEE6526AE9D4380B670A23F55B840F8C5D8CC784E06E123C126753525FDFE1949...
  02 03 ;SEQUENCE + size
    010001
</code></pre>

<p>Now, the ""leading zero of INTEGER"" part is present to indicate that following value is positive value integer. However I need to get rid of it due to some legacy reasons.</p>

<p>I was going through openssl source and found that through the DER construction its presence is decided based on ASN1_VALUE->type &amp; V_ASN1_NEG, but I am unable to track down where to set generated PublicKey as V_ASN1_NEG (or influence it to be generated as negative).</p>

<p>Other way to handle this is to write my own TLV-DER parser and re-pack these few bytes to comply with what I need, but I would rather enforce API to do that for me, if it makes sense.</p>

<p>Would you have any advice on this?</p>
","","79","<openssl><rsa><public-key>","0","","0","2018-03-23 05:32:03","","2","","","","","2018-03-23 05:32:03",""
"53538587","convert a public key from BigInteger into a pem file in Java","<p>I can generate a pair of ecc private and public key pem files:</p>

<pre><code>  KeyPair keyPair = generateECCKeyPair();
  ECPrivateKey priv = (ECPrivateKey) keyPair.getPrivate();
  ECPublicKey pub = (ECPublicKey) keyPair.getPublic();  
  writePemFile(priv, ""ECC PRIVATE KEY"", ""private.key"");
  writePemFile(pub, ""ECC PUBLIC KEY"", ""public.pem"");
</code></pre>

<p>but now I hava a public ecc key in a BigInteger variable,how can I covert it or wrap it into the pem form, which contains header and footer, and bewtween them is the base64 encoded der form of the public key? Here If I'm wrong about the pem file, please correct me.</p>
","","78","<java><public-key><pem>","2","","0","2018-11-30 01:53:34","","2","","10310579","","2018-11-30 01:53:34","2018-11-29 11:59:58",""
"55774709","HyperLedger Composer 0.19 How to encrypt/decrypt data using private/public key?","<p>I have a usecase where I have to encrypt data using a participant's public key before adding the data to the chain.</p>

<p>I have already implemented issuing identity and creating cards through following the example here.
<a href=""https://github.com/hyperledger/composer-knowledge-wiki/blob/latest/knowledge.md#card-api-errors--resolutions"" rel=""nofollow noreferrer"">https://github.com/hyperledger/composer-knowledge-wiki/blob/latest/knowledge.md#card-api-errors--resolutions</a></p>

<p>The problem is the example only returns certificate and private key.</p>

<p>However, I need public key to encrypt data before adding to the chain so I can decrypt it with the private key later (when retrieving).</p>

<p>Can anyone please help me out? Am I missing something here?</p>

<p>Thanks!</p>
","","77","<encryption><hyperledger><hyperledger-composer><private-key><public-key>","0","","0","2019-04-20 14:56:53","","3","","","","","2019-04-20 14:56:53",""
"32924601","Finding Corresponding Public SSH Key","<p>Lets say I've added a ssh public key to <code>~/.ssh/authorized_keys</code>.  And I'm sshing into the machine from my client machine using <code>ssh -i &lt;private_key&gt; root@machine.ip.com</code>.  Is there a way to programmatically find the corresponding (accepting) public key to my ssh key from <code>~/.ssh/authorized_keys</code> after the ssh?  I'm assuming I have multiple keys in authorized_keys.</p>
","<p>I suppose you can (ab)use the command option inside authorized_keys, e.g.:</p>

<pre><code>command=""echo key1; /bin/bash"" ssh-rsa ...
</code></pre>

<p>You could also set an environment variable, e.g.:</p>

<pre><code>command=""KEY=key1 /bin/bash"" ssh-rsa ...
</code></pre>

<p>Then when you ssh into, you will get:</p>

<pre><code>-&gt; % ssh user@host
key1
[user@host ~]$
</code></pre>

<p>Don't really know if this is the amount of programmatically you want.</p>
","77","<ssh><public-key><authorized-keys>","0","1","3","2015-10-03 16:20:36","","0","0","","","","2015-10-03 16:02:45",""
"32924601","Finding Corresponding Public SSH Key","<p>Lets say I've added a ssh public key to <code>~/.ssh/authorized_keys</code>.  And I'm sshing into the machine from my client machine using <code>ssh -i &lt;private_key&gt; root@machine.ip.com</code>.  Is there a way to programmatically find the corresponding (accepting) public key to my ssh key from <code>~/.ssh/authorized_keys</code> after the ssh?  I'm assuming I have multiple keys in authorized_keys.</p>
","<p><code>~/.ssh/authorized_keys</code> contains public keys, so all you need to do it match the public key of your private key. </p>

<p>You can generate the public key of the private key using: </p>

<pre><code>openssl rsa -in &lt;private_key&gt; -pubout
</code></pre>
","77","<ssh><public-key><authorized-keys>","0","0","3","2015-10-03 16:20:36","","0","0","","","","2015-10-03 16:02:45",""
"32924601","Finding Corresponding Public SSH Key","<p>Lets say I've added a ssh public key to <code>~/.ssh/authorized_keys</code>.  And I'm sshing into the machine from my client machine using <code>ssh -i &lt;private_key&gt; root@machine.ip.com</code>.  Is there a way to programmatically find the corresponding (accepting) public key to my ssh key from <code>~/.ssh/authorized_keys</code> after the ssh?  I'm assuming I have multiple keys in authorized_keys.</p>
","<p>There's only 1 matching public key for your private key (otherwise PKI is broken). </p>

<p>Therefore you can simply just run</p>

<pre><code> ssh-keygen -y -f ~/.ssh/your_priv_key &gt; your_pub_key
</code></pre>
","77","<ssh><public-key><authorized-keys>","0","0","3","2015-10-03 16:20:36","","0","0","","","","2015-10-03 16:02:45",""
"42023991","What is Apple's certificate?","<p>I'm trying to understand what the certificate is. I'm talking about the <code>.cer</code> file.  </p>

<p>In the <a href=""https://developer.apple.com/support/certificates/"" rel=""nofollow noreferrer"">description</a> it sounds like it is a <code>public key</code> but if it is, than why do I need Certificate Signing Request (CSR) when creating it? </p>

<p>Everywhere I can find ""what is a developer certificate for"" and so on, but there is no information what the certificate — as an entity — is.  </p>

<p>So my questions are:</p>

<ol>
<li>What is <code>.cer</code> file? (Not <code>.p12</code>)   </li>
<li>What is the difference between certificate and <a href=""https://en.wikipedia.org/wiki/Public-key_cryptography"" rel=""nofollow noreferrer"">public key</a>?</li>
</ol>
","<p>1) The <code>.cer</code> is an commonly used extension for certificates. 
Certficates are digitaly signed and encoded documents. To my understanding certificates are documents which contain data (strings etc.) and are encoded. Simply put it is a container for sensitive data. </p>

<p>For details read: <a href=""https://support.ssl.com/Knowledgebase/Article/View/19/0/der-vs-crt-vs-cer-vs-pem-certificates-and-how-to-convert-them"" rel=""nofollow noreferrer"">DER vs CRT vs CRM vs PEM</a></p>

<p>2) The public key simply put is a value (String for example). This value is stored in a certificate .cer file. 
For better understanding this video might help: <a href=""https://www.youtube.com/watch?v=CR8ZFRVmQLg"" rel=""nofollow noreferrer"">Private and public key</a>
The difference is that a certificate can contain a public key but a public key cannot contain a certificate. </p>
","77","<ios><macos><certificate><public-key><code-signing-certificate>","0","1","2","2017-02-03 14:15:14","42024371","0","","1324","","2017-02-03 14:15:14","2017-02-03 12:10:01",""
"42023991","What is Apple's certificate?","<p>I'm trying to understand what the certificate is. I'm talking about the <code>.cer</code> file.  </p>

<p>In the <a href=""https://developer.apple.com/support/certificates/"" rel=""nofollow noreferrer"">description</a> it sounds like it is a <code>public key</code> but if it is, than why do I need Certificate Signing Request (CSR) when creating it? </p>

<p>Everywhere I can find ""what is a developer certificate for"" and so on, but there is no information what the certificate — as an entity — is.  </p>

<p>So my questions are:</p>

<ol>
<li>What is <code>.cer</code> file? (Not <code>.p12</code>)   </li>
<li>What is the difference between certificate and <a href=""https://en.wikipedia.org/wiki/Public-key_cryptography"" rel=""nofollow noreferrer"">public key</a>?</li>
</ol>
","<p>A certificate certify who you are, its a kind of identity card or passport or whatever. A public key is something used to secure something, somehow like a real key closes a safety box not to let everyone have look inside.</p>

<p>Then you may have the need to certify that a public key is the one it claims. A certificate is (normally) obtained from another trusted authority (like your passport is delivered by a legal entity). If not how would you trust a public key I'll give to you? It can be a hacked public key, but if you have a certificate that belongs to it, then (if you trust the authority) you'll know it's really mine and not a forged one.</p>

<p>You may read <a href=""https://en.wikipedia.org/wiki/Public_key_certificate"" rel=""nofollow noreferrer"">Public Key Certificate</a> on Wikipedia for example.</p>

<p><code>.cer</code> files are certificates in some well defined format.</p>
","77","<ios><macos><certificate><public-key><code-signing-certificate>","0","0","2","2017-02-03 14:15:14","42024371","0","","1324","","2017-02-03 14:15:14","2017-02-03 12:10:01",""
"55898395","java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0c0000b9:ASN.1 encoding routines:OPENSSL_internal:WRONG_TAG","<p>I want to convert String to RSAPublicKey in android. I have tried with below code but it gives exception. I want to use this key in extracting the modulus and exponent from the key. </p>

<pre><code>  String PUBLIC_KEY = ""BgIAAACkAABSU0ExAAQAAAEAAQBJGj09Gbyl7BS/8MytvjBUUfaktW984VHHW4lSI9y2OwaeOq4qqSD6IOHU9HL/QtwZ+wELq28eAOQSnr11hifMf6zWjIsCBHOEpLNJjL3wxjl7dUBEGMJOeZj2rmcf8v7lP/rpAtO/G8wKXhAIKLIFxcChkXwQKbQbHQ/FtX2bwg=="";


  byte[] keyBytes = DatatypeConverter.parseBase64Binary(PUBLIC_KEY);
  X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);
  KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
  PublicKey pubKey = keyFactory.generatePublic(keySpec);
</code></pre>

<p><em>Exception</em></p>

<pre><code>java.security.spec.InvalidKeySpecException: java.lang.RuntimeException: error:0c0000b9:ASN.1 encoding routines:OPENSSL_internal:WRONG_TAG
at com.android.org.conscrypt.OpenSSLKey.getPublicKey(OpenSSLKey.java:295)
at com.android.org.conscrypt.OpenSSLRSAKeyFactory.engineGeneratePublic(OpenSSLRSAKeyFactory.java:47)
at java.security.KeyFactory.generatePublic(KeyFactory.java:357)

Caused by: java.lang.RuntimeException: error:0c0000b9:ASN.1 encoding routines:OPENSSL_internal:WRONG_TAG
at com.android.org.conscrypt.NativeCrypto.d2i_PUBKEY(Native Method)
at com.android.org.conscrypt.OpenSSLKey.getPublicKey(OpenSSLKey.java:293)
... 20 more

java.lang.RuntimeException: error:03000070:bignum routines:OPENSSL_internal:NO_INVERSE
at com.android.org.conscrypt.NativeCrypto.RSA_public_encrypt(Native Method)
at com.android.org.conscrypt.OpenSSLCipherRSA.engineDoFinal(OpenSSLCipherRSA.java:268)
at javax.crypto.Cipher.doFinal(Cipher.java:2056)
</code></pre>
","","77","<java><android><rsa><public-key>","0","","0","2019-05-01 06:55:33","","3","","5142487","","2019-05-01 06:55:33","2019-04-29 06:59:31",""
"53428741","RSA Key generation with SecKey Xamarin.iOS","<p>I'm trying to generate a public (and private) key pair using the SecKey class from Xamarin.iOS.
The KeySize is defined to 1024 bit and this seems to work (if I change this value, the length of the result array is changing too).</p>

<p>I generate the keys with</p>

<pre><code>SecKey.GenerateKeyPair(CreateRsaParams(), out publicKey, out privateKey); 
byte[] key = publicKey.GetExternalRepresentation().ToArray()
</code></pre>

<p>(CreateRsaParams() is a function giving back a NSDictionary with the required data)</p>

<p>The problem is: I get a byte array (public key) with <strong>140</strong> Bytes - but depended on the key size it should have only 128 Byte - and I need a 128 Byte public key for data exchange with an other system</p>

<p>(by the way - using PCLCrypto is not an option for me since the project is not allowed to use this 3rd party component)</p>

<p>Does anyone know the problem and know a solution?</p>
","<p>Okay, problem solved.
If anyone is facing the same problem, you can find the solution at
<a href=""https://forums.developer.apple.com/thread/111109"" rel=""nofollow noreferrer"">https://forums.developer.apple.com/thread/111109</a></p>

<p>The problem was not the key, but the wrongly formulated requirement.</p>
","77","<ios><xamarin><rsa><public-key>","0","0","1","2018-11-28 13:14:58","","2","","","","","2018-11-22 10:21:42",""
"24319235","Update the list of clients online","<p>I'm writing a server in java which listens at a particular port. Different clients send messages to the server at regular intervals.</p>

<p>The messages contain the respective public keys of the clients.</p>

<p>The server has a list of public keys.</p>

<p>If the newly received public key is not present in the list, the server adds it there.</p>

<p>I have done the part of comparing the public keys and writing the public key not present in the list.</p>

<p>Code for multithreaded server (here the server actually listens at two different ports) :</p>

<pre><code>while(!isStopped()){
        System.out.println(""Server is working"");
        try {
                serverSocket = ServerSocketChannel.open();
                serverSocket.configureBlocking(false);
                serverSocket.bind(new InetSocketAddress(serverPortRequest));
                serverSocket.register(selector, SelectionKey.OP_ACCEPT);
                serverSocket = ServerSocketChannel.open();
                serverSocket.configureBlocking(false);
                serverSocket.bind(new InetSocketAddress(serverPortAccept));
                serverSocket.register(selector, SelectionKey.OP_ACCEPT);

                while(selector.isOpen()){
                    selector.select();
                    Set&lt;SelectionKey&gt; readyKeys = selector.selectedKeys();
                    Iterator&lt;SelectionKey&gt; iterator = readyKeys.iterator();
                    while(iterator.hasNext()){
                        SelectionKey key = (SelectionKey) iterator.next();
                        if(key.isAcceptable()){
                            SocketChannel client = serverSocket.accept();
                            (new Thread(new WorkerRunnable(client,""Multithreaded Server""))).start();
                        }
                    }
                }

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
}
</code></pre>

<p>The WorkerRunnable thread is where I check if the client's public key is already in the server's list or not :</p>

<pre><code>if(!isPresent(userPK)) {
        FileOutputStream pk;
        try {
            pk = new FileOutputStream(""contactsPK/contact""+Server.pkCounter++);
            pk.write(userPK);
            pk.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }
</code></pre>

<p>Here <code>userPK</code> is a <code>byte</code> array which stores the public key obtained from the message sent by a client.</p>

<p>How do i check at regular intervals (say 30 seconds) that a client, from the list of clients, has not sent the server a message? I would like to delete that client i.e. its public key from the list of stored public keys of the server.</p>
","<p>That's a really great question!</p>

<p>You're almost there with what you're trying to achieve, you just want to be careful about a couple of gotchas!</p>

<p>You start off your code with:</p>

<pre><code> while(!isStopped()){
 ...
 }
</code></pre>

<p>Which is a way of ensuring that you're consistently listening in on a port, but what you're also doing is creating a mutex lock for that process. You can read up on it here: </p>

<p><a href=""http://en.wikipedia.org/wiki/Mutual_exclusion"" rel=""nofollow"">http://en.wikipedia.org/wiki/Mutual_exclusion</a></p>

<p>What that will do is ensure that no other processes have access to the processor while you're running this code. With that,  unfortunately you'll see that as you start to scale your code up and add on functionality, this loop will prevent you from decoupling your code, ensuring robustness, and adding functionality (I'll get back to this later!). First what you'll want to do is use a web framework for your application, this can be done using a plethora of different options. Here are two resources which can help you decide:</p>

<p><a href=""http://zeroturnaround.com/rebellabs/the-curious-coders-java-web-frameworks-comparison-spring-mvc-grails-vaadin-gwt-wicket-play-struts-and-jsf/"" rel=""nofollow"">http://zeroturnaround.com/rebellabs/the-curious-coders-java-web-frameworks-comparison-spring-mvc-grails-vaadin-gwt-wicket-play-struts-and-jsf/</a></p>

<p><a href=""http://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks#Java"" rel=""nofollow"">http://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks#Java</a></p>

<p>I would reccommend starting off with the Spring MVC framework, it's the most generic and widely used these days and you'll have ample resources online to help you get started.</p>

<p>Once you've picked your framework, you're going to want to create an MVC architecture web application, here are a couple of resources:</p>

<p><a href=""http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"" rel=""nofollow"">http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller</a>
<a href=""http://blog.codinghorror.com/understanding-model-view-controller/"" rel=""nofollow"">http://blog.codinghorror.com/understanding-model-view-controller/</a></p>

<p>Your View isn't going to consist of too much, and in fact it can act as to just pass the public key along to your back-end (your controller and your model).</p>

<p>With the above mentioned, you can get rid of all the code that is looping and waiting to hear a ping from your ports, you can simply specify which ports to listen to in your Spring MVC configuration files. </p>

<p>Now for the fun part! You asked: </p>

<pre><code> ""How do i check at regular intervals (say 30 seconds) that a client, from the list of clients, has not sent the server a message? I would like to delete that client i.e. its public key from the list of stored public keys of the server.""
</code></pre>

<p>This can be achieved via two stores in your back end: redis - a session based key store, and a simple relation database of your flavor.</p>

<p>Your Algorithm can go simply as follows:</p>

<pre><code> 1. Every time your view forwards the information of a request to your backend, add it to your redis database, in the form &lt;id, key&gt;

 2. Simply create a thread to run every 30 seconds to do:
     2a. get the list of id's from redis
     2b. perform a left outer join on table a and b, where A is your sql table of ids, and B is the list of ids from redis.  A left outer join returns all the values from an inner join plus all values in the left table that do not match to the right table. Here is a resource for SQL Joins: http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/
     2c. The result of the join is your final answer, be sure to store this in your db.
     2d. purge all keys from redis (this is a one-liner)
</code></pre>

<p>You can create a thread to run every 30 seconds on your backend using ScheduledExecutorService as follows:</p>

<pre><code> ScheduledExecutorService exec = Executors.newSingleThreadScheduledExecutor();
 exec.scheduleAtFixedRate(new Runnable() {
 @Override
 public void run() {
     // 2a from above: (get the list of id's from redis)
     // 2b from above (perform a left outer join on table a and b, where A is your sql table of ids, and B is the list of ids from redis.  A left outer join returns all the values from an inner join plus all values in the left table that do not match to the right table.)
     // 2c from above (The result of the join is your final answer, be sure to store this in your db)
     // 2d from above (purge all keys from redis (this is a one-liner)
}
}, 0, 30, TimeUnit.SECONDS);
</code></pre>

<p>Since this is a very concrete and repeatable task, you do have a couple of other options which have tradeoffs associated with them. You could create a crontab job which can execute a script which does the above, or even use triggers which are built into many relational databases's capabilities. The main down side to both is that you would be loosing code visibility as you choose to do so.</p>

<p>I also mentioned above about de-coupiling. Coupling (<a href=""http://en.wikipedia.org/wiki/Coupling_(computer_programming)"" rel=""nofollow"">http://en.wikipedia.org/wiki/Coupling_(computer_programming)</a> is a very important concept as you begin to write code which scales. You want to keep code as loosely coupled as possible (<a href=""http://en.wikipedia.org/wiki/Loose_coupling"" rel=""nofollow"">http://en.wikipedia.org/wiki/Loose_coupling</a>) beacuse it's going to make debugging and make writing in a OOP fashion much easier for you.</p>
","76","<java><multithreading><client-server><rsa><public-key>","1","2","1","2014-07-24 05:11:24","","0","1","","","","2014-06-20 02:53:19",""
"15082929","Where can I get the public keys of all popular certificate authorities","<p>From where I can the list of popular certificate authorities public keys .
Just like all browsers are coming with pre-installed certificates(public keys)  of certificate authorities. 
Now I am preparing ssl client which will connect to the different servers so just like browsers I need  public keys of all certificate authorities to validate the server that I am connecting.</p>

<p>Please at least show me the place where I can get certificate authority certificates at glance .</p>
","<p>Curl providers a <a href=""http://curl.haxx.se/docs/caextract.html"" rel=""nofollow"">script</a> to extract Firefox's bundled CA certificates.</p>
","76","<ssl><ssl-certificate><public-key><certificate-authority>","0","1","1","2013-02-26 09:24:23","15085393","0","1","1800840","","2013-02-26 06:54:48","2013-02-26 06:40:44",""
"26911694","What is the best way to post signed content on the internet?","<p>I am currently working on an architecture, where users can post content any server. To ensure the content has actually been posted by a certain user (and has not been altered after being posted), a signature is created using the private key of the author of the content, whose public key is accessible for everyone on a centralized repository.</p>

<p>Problem is, I have no control over how the content is actually stored on these servers. So I might transmit the content e.g. as a JSON object with all data being base64-encoded and the signature is created using a hash of this the base64-encoded content concatenated in a certain order:</p>

<pre><code>{
    ""a"": ""b"",
    ""c"": ""d"",
    ""signature"": ""xyz""
}
</code></pre>

<p>with</p>

<pre><code>signature := sign(PrivKey, hash(b + d);
</code></pre>

<p>Now the server will probably store the content of this in another way, e.g. a database. So maybe the encoding changes. Maybe a mysql_real_escape_string() is done in PHP so stuff gets lost. Now if one wants to check the signature there might be problems.</p>

<p>So usually when creating signatures you have a fixed encoding and a byte sequence (or string) with some kind of unambiguous delimiter - which is not the case here.</p>

<p>Hence the question: How to deal with signatures in this kinda scenario?</p>
","<p>It is still required to have a specific message representation in bits or bytes to be able to sign it. There are two ways to do this:</p>

<ol>
<li>just store the byte representation of the message and don't alter it afterwards (if the message is a string, first encode it with a well defined character encoding);</li>
<li>define a <em>canonical</em> representation of the message, you can either store the canonical representation the message directly or convert it in memory when you are updating the hash within your signature.</li>
</ol>

<p>A canonical representation of a message is a special, unique representation of the data that somehow distinguishes it from all other possible messages; this may for instance also include sorting the entries of a table (as long as the order doesn't change the meaning of the table), removing whitespace etc.</p>

<p>XML encryption for instance contains canonicalization methods for XML encoding. Obviously it is not possible to define canonicalization for data that has no intrinsic structure. Another (even) more complicated canonical representation is DER for ASN.1 messages (e.g. X509 certificates themselves as well as <em>within</em> RSA signatures). </p>
","75","<hash><digital-signature><public-key>","1","1","2","2015-03-19 11:51:09","26920749","2","1","","","","2014-11-13 14:52:19",""
"26911694","What is the best way to post signed content on the internet?","<p>I am currently working on an architecture, where users can post content any server. To ensure the content has actually been posted by a certain user (and has not been altered after being posted), a signature is created using the private key of the author of the content, whose public key is accessible for everyone on a centralized repository.</p>

<p>Problem is, I have no control over how the content is actually stored on these servers. So I might transmit the content e.g. as a JSON object with all data being base64-encoded and the signature is created using a hash of this the base64-encoded content concatenated in a certain order:</p>

<pre><code>{
    ""a"": ""b"",
    ""c"": ""d"",
    ""signature"": ""xyz""
}
</code></pre>

<p>with</p>

<pre><code>signature := sign(PrivKey, hash(b + d);
</code></pre>

<p>Now the server will probably store the content of this in another way, e.g. a database. So maybe the encoding changes. Maybe a mysql_real_escape_string() is done in PHP so stuff gets lost. Now if one wants to check the signature there might be problems.</p>

<p>So usually when creating signatures you have a fixed encoding and a byte sequence (or string) with some kind of unambiguous delimiter - which is not the case here.</p>

<p>Hence the question: How to deal with signatures in this kinda scenario?</p>
","<p>I think you're really asking two different questions:</p>

<p><strong>How should data be signed?</strong></p>

<p>I suggest using standard digital signature data format when possible, and ""detached signatures"" at other times. What this means in practice: PDF, Word, Excel and other file formats that provide for digital signatures should remain in those formats. </p>

<p>File formats that don't provide for digital signatures should be signed using a detached signature. The recommended standard for detached signatures is the .p7b file type–A PKCS#7 digital signature structure without the data. <a href=""http://developer.arx.com/examples/sapi_local_detached_signatures/"" rel=""nofollow"">Here is an example of signing data with a detached signature from my company.</a></p>

<p>This means that the ""Relying Party"" -- the person downloading/receiving the information -- would download two files. The first is the original data file, unchanged. The second file will be the detached signature for the first.</p>

<p><strong>Benefits</strong> The signed file formats that directly support digital signatures can have their signatures verified using the file's usual software app. Ie, the free Adobe PDF Reader app knows how to verify digitally signed PDFs. In the same way, MS Word know how to verify signed Word files.</p>

<p>And for the other file types, the associated detached signature file will guarantee to the recipient that the file was not modified since it was signed and who the signer was (depending on the trust issue, see below).</p>

<p>Re database storage -- you don't care how the data is stored on the different servers (database, file system, etc.) In any or all cases, the data should remain unchanged.</p>

<p><strong>How to establish trust between the signer and the recipient</strong>
I suggest that the organization create its own root certificate. You can then put the certificate as a file on your SSL web site. (Your web site's SSL certificate should be from a CA, eg Comodo, VeriSign, etc.) The result is that people who trust your web site's SSL certificate can then trust your organizational certificate. And your signers' certificates should be chained to your organization's certificate, thus establishing trust for the recipients.</p>

<p>This method of creating a self-signed organizational certificate is low cost and provides a high level of trust. But relying parties will need to download and install your organization's certificate.</p>

<p>If that is not good, you can get certificates for your signers from a public Certificate Authority (CA), but that will drive up the cost by at least an order of magnitude due to the charges from the CA. My company, <a href=""http://www.arx.com"" rel=""nofollow"">CoSign</a>, supports all of these configurations.</p>
","75","<hash><digital-signature><public-key>","1","1","2","2015-03-19 11:51:09","26920749","2","1","","","","2014-11-13 14:52:19",""
"55285321","DKIM-Result: fail (bad signature)","<p>I am trying to sign email with DKIM header. </p>

<p>I am using relay to send emails.</p>

<p>I have generated .pfx certificate using selfssl tool.</p>

<p>I am getting following response. DKIM fail (bad request):</p>

<pre><code>DKIM-Signature: v=1; a=rsa-sha1; c=simple/simple;
    d=eirby.dk; s=eirby3;
    h=From:Subject:Date:Message-ID:MIME-Version:Content-Type;
    bh=H2vxmrppk5C6mrXFHk9u4KRjCxs=;
    b=DkLjQfnF6QHn3f/LbiqRPkWkhVABvyNEiwjGlK+XzN3kr694wK8M/eZBhxAMsOK1
        uJYhAz4i3d+wcJyiD6WaAx8p3PO3kN0E89xto/dMslXsy8JCDxCS3PMY7BNvstZd
        q6Tw3qDedINKO28rWiyGSa/7P9E5uWTknVWR27AIYoUJLNQSJFZHO0lLKBTUG9Kx
        6C91UlHHjCrthDGVDlJ9dFZktFJh9thhsqMmJIsKRqWe3+IwD4VlIPRLGd1PA0O4
        y6Y7prhBmu7xaKXlrlj48HKzLHrDONfEpEi/GENS2qBDNYGXkt66CDK9pT9QoWQN
        u2kU7pstEObUVRi98Jx2Ww==
Signed-by: eirby@eirby.dk
Expected-Body-Hash: H2vxmrppk5C6mrXFHk9u4KRjCxs=
Public-Key: k=rsa;p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoBw5fX/X6MC/ZiqHlusfygu7GBy1zxZjObLijZ7idoOzxK49w4zy6WJS8WlXPU1xQM0rkrjUMk+cEkcINX/orv71HXl+mFefqAB89QQVEnAZHG8tRkPSYDYeHpIPd9s06GqG2LFNGCVLowfEnvXC2wBewBUO6ZNFjodMSqmxar5wuHA5rJB6SMa+UaQeQQ+A13/JiExrsGauEkErelPRx+XXT46/Dg6vkfQVQmpsaTe0sUGr0pBlRmUgXMe8FWT4F38/feTBgRIT3lNWcRPIOv94DE/AszGil1zGMygPixHMF54pn8NcJqCgzKCX7ysSqT9KyGZChh5bLX7EzPzmNQIDAQAB;

DKIM-Result: fail (bad signature)
</code></pre>

<p>I have added DKIM TXT record in DNS as well. That is responding fine.
Can anyone tell me where I am doing mistake?</p>
","","74","<public-key><pfx><dkim>","0","","0","2019-03-21 16:41:16","","0","","","","","2019-03-21 16:41:16",""
"53550952","How to configure JWT token from openam?","<p>I am trying to call the /oauth2/authorize endpoint with parameter jwt, such as:
<a href=""https://openam.example.com:8443/openam/oauth2/realms/root/authorize?response_type=code&amp;client_id=myClient&amp;scope=profile&amp;redirect_uri=http://www.example.net&amp;request="" rel=""nofollow noreferrer"">https://openam.example.com:8443/openam/oauth2/realms/root/authorize?response_type=code&amp;client_id=myClient&amp;scope=profile&amp;redirect_uri=http://www.example.net&amp;request=</a>${jwt_value}
but i don’t know how to use&amp;generate the public key and private key. Does anyone have this setup or know how to set it up? I shall be much obliged if you tell me more details about it. thanks very much anyhow.
If you need more info on this please let me know.</p>

<p>Thanks in Advance!
Wiliy</p>
","","74","<jwt><private-key><public-key><openam>","0","","0","2018-11-30 03:54:04","","1","","10725855","","2018-11-30 03:54:04","2018-11-30 03:48:26",""
"18684232","Fillezilla RSA Public key Storage","<p>Quick question about RSA Public Key. I know putty stores Publick key in Reg (HCU-Software-SimonTaTham-SSHHostKey) but does someone know were Filezilla strore it? I need to delete it.</p>
","","73","<rsa><sftp><public-key><filezilla>","1","","0","2014-02-17 16:55:41","","0","","1738671","","2014-02-17 16:55:41","2013-09-08 13:30:30",""
"26304028","Error in Registering Recaptcha Key for Website From Google.com","<p>I wanted a public and private key for our Website but I m not able to register it from Google Site for Recaptcha 
After I registering my Website I get an Error </p>

<blockquote>
  <p>We are having a problem processing your request. Please try again
  later.</p>
</blockquote>

<p>How Should i get Public and Private Key pair for the website ?</p>
","","73","<recaptcha><private-key><public-key>","0","","0","2014-10-10 16:32:55","","2","","","","","2014-10-10 16:32:55",""
"56290483","calculate public key from private key is not correct","<p>I am using EC curve P-256. I generate a key pair.
Then, form the private key, I calculate the public key.</p>

<p>For some reason, the two public key values do not correspond.</p>

<p>See included code with the function to generate a key pair:</p>

<pre><code>public static AsymmetricCipherKeyPair  Generate_EC_P256_Key_Pair(SecureRandom random)
    {
        // Select the curve P-256 //
        string curveName = ""P-256"";
        X9ECParameters ecP = NistNamedCurves.GetByName(curveName);
        ECDomainParameters dom_parameters = new ECDomainParameters(ecP.Curve, ecP.G, ecP.N);

        // Generate EC Key Pair //
        ECKeyPairGenerator pGen = new ECKeyPairGenerator();
        ECKeyGenerationParameters genParam = new ECKeyGenerationParameters(dom_parameters, random);
        pGen.Init(genParam);
        AsymmetricCipherKeyPair keypair = pGen.GenerateKeyPair();

        AsymmetricKeyParameter Priv_key = keypair.Private;
        AsymmetricKeyParameter Pub_key = keypair.Public;

        ECPrivateKeyParameters private_key = (ECPrivateKeyParameters)keypair.Private;
        ECPublicKeyParameters public_key = (ECPublicKeyParameters)keypair.Public;

        BigInteger priv_key_exp = private_key.D;
        BigInteger test2 = public_key.Q.XCoord.ToBigInteger();
        BigInteger test3 = public_key.Q.YCoord.ToBigInteger();

        ECPoint pub_key_1 = dom_parameters.G.Multiply(priv_key_exp);
        BigInteger test4 = pub_key_1.XCoord.ToBigInteger();
        BigInteger test5 = pub_key_1.YCoord.ToBigInteger();

        Console.WriteLine(""Exponent: "" + priv_key_exp.ToString(16));
        Console.WriteLine(""X-Coord: "" + test2.ToString(16));
        Console.WriteLine(""X-Coord: "" + test4.ToString(16));
        Console.WriteLine(""\n"");
        Console.WriteLine(""Y-Coord: "" + test3.ToString(16));
        Console.WriteLine(""Y-Coord: "" + test5.ToString(16));

        return keypair;
    }
</code></pre>

<p>If you compare the (X,Y) coordinates of both the generated public key and the calculated pubic key. You will get a different value.
I would expect the same value!!
What is wrong?</p>
","<p>You are getting the wrong X and Y coordinates. Internally, points are stored in an alternate representation (X, Y, Z) involving something called projective coordinates. You want the affine coordinates. The equivalent (X, Y) affine coordinates are retrieved via the properties <code>AffineXCoord</code> and <code>AffineYCoord</code>.</p>
","70","<c#><bouncycastle><private-key><public-key><elliptic-curve>","0","0","2","2019-05-24 15:33:50","","0","","","","","2019-05-24 10:09:08",""
"56290483","calculate public key from private key is not correct","<p>I am using EC curve P-256. I generate a key pair.
Then, form the private key, I calculate the public key.</p>

<p>For some reason, the two public key values do not correspond.</p>

<p>See included code with the function to generate a key pair:</p>

<pre><code>public static AsymmetricCipherKeyPair  Generate_EC_P256_Key_Pair(SecureRandom random)
    {
        // Select the curve P-256 //
        string curveName = ""P-256"";
        X9ECParameters ecP = NistNamedCurves.GetByName(curveName);
        ECDomainParameters dom_parameters = new ECDomainParameters(ecP.Curve, ecP.G, ecP.N);

        // Generate EC Key Pair //
        ECKeyPairGenerator pGen = new ECKeyPairGenerator();
        ECKeyGenerationParameters genParam = new ECKeyGenerationParameters(dom_parameters, random);
        pGen.Init(genParam);
        AsymmetricCipherKeyPair keypair = pGen.GenerateKeyPair();

        AsymmetricKeyParameter Priv_key = keypair.Private;
        AsymmetricKeyParameter Pub_key = keypair.Public;

        ECPrivateKeyParameters private_key = (ECPrivateKeyParameters)keypair.Private;
        ECPublicKeyParameters public_key = (ECPublicKeyParameters)keypair.Public;

        BigInteger priv_key_exp = private_key.D;
        BigInteger test2 = public_key.Q.XCoord.ToBigInteger();
        BigInteger test3 = public_key.Q.YCoord.ToBigInteger();

        ECPoint pub_key_1 = dom_parameters.G.Multiply(priv_key_exp);
        BigInteger test4 = pub_key_1.XCoord.ToBigInteger();
        BigInteger test5 = pub_key_1.YCoord.ToBigInteger();

        Console.WriteLine(""Exponent: "" + priv_key_exp.ToString(16));
        Console.WriteLine(""X-Coord: "" + test2.ToString(16));
        Console.WriteLine(""X-Coord: "" + test4.ToString(16));
        Console.WriteLine(""\n"");
        Console.WriteLine(""Y-Coord: "" + test3.ToString(16));
        Console.WriteLine(""Y-Coord: "" + test5.ToString(16));

        return keypair;
    }
</code></pre>

<p>If you compare the (X,Y) coordinates of both the generated public key and the calculated pubic key. You will get a different value.
I would expect the same value!!
What is wrong?</p>
","<p>James K Polk pointed me into the right direction.
I had to Normalize the point first (""pub_key_1 =pub_key_1.Normalize()"") before I could obtain the coordinates.
I changed the code accordingly and now it gives me the correct results.</p>

<p>Thanks!</p>

<pre><code>public static AsymmetricCipherKeyPair  Generate_EC_P256_Key_Pair(SecureRandom random)
    {
        // Select the curve P-256 //
        string curveName = ""P-256"";
        X9ECParameters ecP = NistNamedCurves.GetByName(curveName);
        ECDomainParameters dom_parameters = new ECDomainParameters(ecP.Curve, ecP.G, ecP.N);

        // Generate EC Key Pair //
        ECKeyPairGenerator pGen = new ECKeyPairGenerator();
        ECKeyGenerationParameters genParam = new ECKeyGenerationParameters(dom_parameters, random);
        pGen.Init(genParam);
        AsymmetricCipherKeyPair keypair = pGen.GenerateKeyPair();


        ECPrivateKeyParameters private_key = (ECPrivateKeyParameters)keypair.Private;
        ECPublicKeyParameters public_key = (ECPublicKeyParameters)keypair.Public;

        BigInteger priv_key_exp = private_key.D;

        BigInteger genx = public_key.Q.XCoord.ToBigInteger();
        BigInteger geny = public_key.Q.YCoord.ToBigInteger();
        BigInteger genx_aff = public_key.Q.AffineXCoord.ToBigInteger();
        BigInteger geny_aff = public_key.Q.AffineYCoord.ToBigInteger();

        ECPoint pub_key_1 = dom_parameters.G.Multiply(priv_key_exp);

        pub_key_1 =pub_key_1.Normalize();

        BigInteger calcx = pub_key_1.XCoord.ToBigInteger();
        BigInteger calcy = pub_key_1.YCoord.ToBigInteger();

        Console.WriteLine(""Exponent: "" + priv_key_exp.ToString(16));
        Console.WriteLine(""Generated X-Coord        : "" + genx.ToString(16));
        Console.WriteLine(""Generated X-Coord Affine : "" + genx_aff.ToString(16));
        Console.WriteLine(""Calculated X-Coord Affine: "" + calcx.ToString(16));
        Console.WriteLine(""\n"");
        Console.WriteLine(""Generated Y-Coord        : "" + geny.ToString(16));
        Console.WriteLine(""Generated Y-Coord Affine : "" + geny_aff.ToString(16));
        Console.WriteLine(""Calculated Y-Coord Affine: "" + calcy.ToString(16));


        return keypair;
    }
</code></pre>
","70","<c#><bouncycastle><private-key><public-key><elliptic-curve>","0","1","2","2019-05-24 15:33:50","","0","","","","","2019-05-24 10:09:08",""
"55717845","Problem while parsing String to Public Key; Invalid key format","<p>I'm trying to 'parse' a alphanumerical String to a PublicKey object in Java. I want to read the modulus and the exponent from that key. Im a newbie in this, so I dont know exactly what I should do here. </p>

<p>I tried by reading the file wich contains the String, or by just reading the file with InputStream and the like, and always keep going until the last part; parsing bytes to PublicKey.</p>

<p>This is the Key Im trying to parse; </p>

<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: Encryption Desktop 10.3.2 (Build 15495)

mQENBFyL1ngBCADPZR4FPDxi9v5wNVXDksXzo9IEQvFoQIIfmGaomQ8PrAZHH2jb
nUGK6Y56p/Mlxz3uqfOR0fyBNuq/beszk/jChcy9sqCF3TwKBOdWVcXiIU/XiS0V
...
+FnyI/aT7n+jXBpQSWiyHQyM9RfS0rBeO9w7Q4nWwMyAEHfYxqaajYgJZ+N+Jw==
=Adx/
-----END PGP PUBLIC KEY BLOCK-----
</code></pre>

<p>And this is the code i'been trying;</p>

<pre><code>fis = new FileInputStream(FilePath);
InputStreamReader isr = new InputStreamReader(fis, Charset.forName(""UTF-8""));
BufferedReader br = new BufferedReader(isr);

while ((line = br.readLine()) != null) {
rd+=line+"","";
}
partes=rd.split("","");
String llaveses="""";
int i=2;
while (partes.length&gt;i){
    if (i == partes.length-1){
    llaveses+="""";
    }else
    llaveses+=partes[i];
    i++; }

byte[] bytepuk = llaveses.getBytes();
X509EncodedKeySpec spec = new X509EncodedKeySpec(bytepuk);
KeyFactory kfRSA = KeyFactory.getInstance(""RSA"");
PublicKey pukrsa=kfRSA.generatePublic(spec); //i always got stuck in this part
</code></pre>

<p>I have tried with this, as well with PGPPublicKey, but nope, it alwayes keep saying 'invalid key format'</p>

<p>I just want to get those two datas; modulus and exponent
Any help or recommendation would be great!
Also, sorry for my poor english!</p>
","<p>Your while loop is a bit confusing, so for simplicity sake lets assume that your alphanumeric string is stored in the your_string variable. Try the following code</p>

<pre><code>String public_key = your_string.replace(""-----BEGIN PUBLIC KEY-----\n"", """").replace(""-----END PUBLIC KEY-----"", """");
byte[] encoded_public_key = Base64.decode(publicKey);    
X509EncodedKeySpec spec = new X509EncodedKeySpec(encoded_public_key);
KeyFactory keyfactory = KeyFactory.getInstance(""RSA"");
keyfactory.generatePublic(spec)
</code></pre>
","70","<java><base64><rsa><public-key><pgp>","0","-1","2","2019-04-23 15:29:14","","2","0","","","","2019-04-16 23:23:28",""
"55717845","Problem while parsing String to Public Key; Invalid key format","<p>I'm trying to 'parse' a alphanumerical String to a PublicKey object in Java. I want to read the modulus and the exponent from that key. Im a newbie in this, so I dont know exactly what I should do here. </p>

<p>I tried by reading the file wich contains the String, or by just reading the file with InputStream and the like, and always keep going until the last part; parsing bytes to PublicKey.</p>

<p>This is the Key Im trying to parse; </p>

<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: Encryption Desktop 10.3.2 (Build 15495)

mQENBFyL1ngBCADPZR4FPDxi9v5wNVXDksXzo9IEQvFoQIIfmGaomQ8PrAZHH2jb
nUGK6Y56p/Mlxz3uqfOR0fyBNuq/beszk/jChcy9sqCF3TwKBOdWVcXiIU/XiS0V
...
+FnyI/aT7n+jXBpQSWiyHQyM9RfS0rBeO9w7Q4nWwMyAEHfYxqaajYgJZ+N+Jw==
=Adx/
-----END PGP PUBLIC KEY BLOCK-----
</code></pre>

<p>And this is the code i'been trying;</p>

<pre><code>fis = new FileInputStream(FilePath);
InputStreamReader isr = new InputStreamReader(fis, Charset.forName(""UTF-8""));
BufferedReader br = new BufferedReader(isr);

while ((line = br.readLine()) != null) {
rd+=line+"","";
}
partes=rd.split("","");
String llaveses="""";
int i=2;
while (partes.length&gt;i){
    if (i == partes.length-1){
    llaveses+="""";
    }else
    llaveses+=partes[i];
    i++; }

byte[] bytepuk = llaveses.getBytes();
X509EncodedKeySpec spec = new X509EncodedKeySpec(bytepuk);
KeyFactory kfRSA = KeyFactory.getInstance(""RSA"");
PublicKey pukrsa=kfRSA.generatePublic(spec); //i always got stuck in this part
</code></pre>

<p>I have tried with this, as well with PGPPublicKey, but nope, it alwayes keep saying 'invalid key format'</p>

<p>I just want to get those two datas; modulus and exponent
Any help or recommendation would be great!
Also, sorry for my poor english!</p>
","<p>With Java, you may use the well-known Bouncy Castle crypto library this way, to parse a PGP public key.</p>

<p>In your question, FilePath is the path to a file containing the PEM encoded public key, so here is a way to get the public exponent and modulus values:</p>

<ul>
<li>create a key ring object parsing the content of FilePath;</li>
<li>extract the public key from the key ring;</li>
<li>convert the generic public key object to an instance of <strong>RSAPublicBCPGKey</strong>, to access the <strong>getPublicExponent()</strong> and <strong>getModulus()</strong> methods.</li>
</ul>

<p>Here is the code snippet.</p>

<pre><code>package net.fenyo.tstpgp;

import java.io.*;
import org.bouncycastle.bcpg.*;
import org.bouncycastle.openpgp.*;
import org.bouncycastle.openpgp.jcajce.*;

public class App {
    static String FilePath = ""d:/temp/publickey.pem"";

    public static void main(String[] args) throws IOException, PGPException {
        // Import the PEM encoded key in a key ring
        JcaPGPPublicKeyRingCollection pgpPub = new JcaPGPPublicKeyRingCollection(org.bouncycastle.openpgp.PGPUtil
                .getDecoderStream(new FileInputStream(new File(FilePath))));
        // Extract the public key from the ring
        PGPPublicKey pk = pgpPub.getKeyRings().next().getPublicKey();
        RSAPublicBCPGKey rsa = (RSAPublicBCPGKey) pk.getPublicKeyPacket().getKey();

        // Display the components of the public key
        System.out.println(""public exponent: "" + rsa.getPublicExponent().toString());
        System.out.println(""modulus: "" + rsa.getModulus().toString());
    }
}
</code></pre>

<p>Here is an example of the output of this program, for which the content of the file <strong>d:/temp/publickey.pem</strong> has been downloaded from there: <a href=""https://keyserver.pgp.com/vkd/DownloadKey.event?keyid=0x5F6C8AE0F08B18EC"" rel=""nofollow noreferrer"">https://keyserver.pgp.com/vkd/DownloadKey.event?keyid=0x5F6C8AE0F08B18EC</a></p>

<pre><code>public exponent: 65537
modulus: 864707173482092744188671562103373011522752303482519808998088798903008001989099675905283831755832233822390078023832521726213457271249972815470211175966041907569318308362891570478941689686712697599623242011017193503964284513039591891526529083515353888885379235878670749376434323941202586223991854576398690573826518569769985809172651040238653272623223118871290893821208919901304705818060395766177710540558136309696633947940763393190279817250884876978530480176563952524356940770342282654575132991815388460879205229175539573644598040510846046356206518680485904082394070023094993115791279506109927248743485104551955556126256899738972837743577201916815523009590547379892261434498517119972252725514435930097571692392590872567503156038414424344470094696986970708719252723773350549916905691632234402052848270487256520247608379181338474223362079571903909236852815812080392096829534242568109033526006705931306007816143593663131528165731422403611912314397882216433246741610889521014679759861466346273746749512271029719491507151898623753390849376017894676856788535056943964836442355399016103191720725346349409014858505159766120737574239682242298505299052720937352185330272669848438756037873927573782283883754416499218933913671945750838607217911481
</code></pre>

<p>NOTE: here is an example of a maven pom file used to automatically download the Bouncy Castle dependencies and compile this program:</p>

<pre><code>&lt;project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd""&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;net.fenyo&lt;/groupId&gt;
  &lt;artifactId&gt;tstpgp&lt;/artifactId&gt;
  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;name&gt;tstpgp&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
  &lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
  &lt;/properties&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
      &lt;artifactId&gt;bcpg-jdk15on&lt;/artifactId&gt;
      &lt;version&gt;1.61&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</code></pre>
","70","<java><base64><rsa><public-key><pgp>","0","0","2","2019-04-23 15:29:14","","2","0","","","","2019-04-16 23:23:28",""
"54767735","In Python 3.x and related to RSA cryptography, how to update dictionary values to boolean values?","<p>I'll list the requirements and a sample of my code. How to fix the code? The problem is I can't update the values of the dict. to boolean format. <strong>It might require that I go through every value of the dict. to check for True or False</strong></p>

<p>For instance, 
Initial: D = {""1"":2,""2"":3}
Intended as output: D = {""1"":True, ""2"":False}</p>

<p>Requirements: </p>

<ul>
<li>Inputs must be a Dictionary(D) and a RSA public key in the form of a tuple (e,N). <strong>The dictionary must contains keys as messages and values as signatures.</strong></li>
<li><p>Outputs must be a Dictionary with keys as messages (the same as in the input), but <strong>with values expressed as True or False if the signature matches the public key values</strong>. </p>

<pre><code>def Q1(D,key):
e = key[0]
N = key[1]

for k,v in D.items():
    if (v ** key[0]) % key[1] == int(k) % key[1]:
        D[v] = True
    else:
        D[v] = False
</code></pre></li>
</ul>

<p>It returns an error: </p>

<pre><code>&gt; &lt;RuntimeError                              Traceback (most recent call
&gt; last) &lt;ipython-input-3-9cfd98926b81&gt; in &lt;module&gt;
&gt;       9             D[v] = False
&gt;      10 
&gt; ---&gt; 11 Q6({""1"":2,""2"":3},(5,14))
&gt; 
&gt; &lt;ipython-input-3-9cfd98926b81&gt; in Q6(D, key)
&gt;       3     N = key[1]
&gt;       4 
&gt; ----&gt; 5     for k,v in D.items():
&gt;       6         if (v ** key[0]) % key[1] == int(k) % key[1]:
&gt;       7             D[v] = True
&gt; 
&gt; RuntimeError: dictionary changed size during iteration&gt;
</code></pre>
","<p>It says <em>dictionnary changed size</em> because you’re using <code>v</code> instead of <code>k</code> as index, so it adds more pair in the dictionnary and fails, change to :</p>

<pre><code>D[k] = True
</code></pre>
","67","<python-3.x><dictionary><boolean><rsa><public-key>","0","0","1","2019-02-19 16:19:36","","8","","11043643","","2019-02-19 14:37:39","2019-02-19 13:44:11",""
"56969367","Generate hash value of rsa public key","<p>I need to generate hash value(sha256) of rsa public key for purpose of ebics comunications. I've aready tried two solutions: phpSecLib and linux command openssl(public.pem file i generate with help of phpSecLib - i think public.pem is ok cause i've try to convert modulus and exponent to pem with my key):</p>

<p>openssl pkey -in public.pem -pubin -pubout -outform DER | openssl dgst -sha256 -c</p>

<p>None of above gives me proper result. How do i now its not good. Bank sends me modulus and exponent of theirs public keys and corresponding hash values.
I've also tried with keys placed in ebics documentation but also without any success.</p>

<p>Bank key modulus:
00f9d48dcb1a7d0cf09350c12fbc41fd1b212d1a49057bcbb404d1386da09d3ee1f1e25246608da8a826ad8f05bfdad6d447a471cefadd7202a01e5b6a1c7f4e93891d8d172a35c8667034a4dde709a3fca3070fc652ce97771778331e12e2d69ab406293cceb936d1d4bf41849b124d8739a37bfce039a833012f4795252161557b6e684ea377771f6c1c226a82772813819702756b0cea162c1c8a04105cc34018ca96fc025723d941752450643ae7f1452483f248907bc937a078f61377c7baf62f21fa368c5a9c45e69adc246a8ad0d2b880ccc4d7591d3b95f5f9f12c455540728afb9fed2276b2a1cffbe11c6af61bf494586c0b93f3ca1c235166de6c6d</p>

<p>Bank key exponent:
010001</p>

<p>Proper hash value:</p>

<p>18 72 B2 39 FF 1C 68 5E 68 D8 DE D8 08 19 C0 4F 52 D8 70 E8 73 E7 56 89 99 99 4E 8C 23 45 32 1C</p>
","<p>It looks like there is no standard. For different key formats it would be different hash. In my case(for ebics purpose) its sha256(ltrim($exponent, 0) . ' ' . $modulus); </p>
","67","<openssl><digital-signature><public-key>","0","0","1","2019-07-11 09:20:42","","0","","","","","2019-07-10 11:05:24",""
"58269483","ECDSA Public key recovery","<p>Helo,</p>

<p>I try to recover the public key from cookie, here is what i've done, not sure if thats correct...</p>

<p>1) Register and login to get the cookie:</p>

<pre><code>user: test
pass: asd
cookie: dGVzdC0tMEYCIQDkk9vxwQ2A81geSQSTCxQEzGwTkA7gdYR0%2BpSr6MTNEwIhAJLLemlZFZZT6unXBg4i1WvdJy6tKVJrLQmj%2FM8SujPA
</code></pre>

<p>2) Decode the cookie as a url:</p>

<pre><code>dGVzdC0tMEYCIQDkk9vxwQ2A81geSQSTCxQEzGwTkA7gdYR0+pSr6MTNEwIhAJLLemlZFZZT6unXBg4i1WvdJy6tKVJrLQmj/M8SujPA
</code></pre>

<p>3) Decode the cookie as a base64</p>

<pre><code>test--0F\x02!\x00\xE4\x93\xDB\xF1\xC1\r\x80\xF3X\x1EI\x04\x93\v\x14\x04\xCCl\x13\x90\x0E\xE0u\x84t\xFA\x94\xAB\xE8\xC4\xCD\x13\x02!\x00\x92\xCBziY\x15\x96S\xEA\xE9\xD7\x06\x0E\""\xD5k\xDD'.\xAD)Rk-\t\xA3\xFC\xCF\x12\xBA3\xC0
</code></pre>

<p>4) Decode the part of cookie after ""--"" as a ECDSA (DER) lets say its 'sig'.</p>

<pre><code>    ECDSA::Format::SignatureDerString.decode(sig)
&lt;ECDSA::Signature:0x000056532e7cc928 @s=66397190700537287645903651815357348182011798486667182586289641565984306901952, @r=103388573995635080359749164254216598308788835304023601477803095234286494993683&gt;
</code></pre>

<p>5) Check the code: (this is not important now*)
*============================================================</p>

<pre><code>$group = Secp256k1
$private_key = UNKNOWN

def sign(str)
    digest = Digest::SHA256.digest(str) 
    temp_key = str.size 
    signature = ECDSA.sign($group, $private_key, digest, temp_key)
end

temp_key = 'test'.size ==&gt; 4
</code></pre>

<p>=============================================================*</p>

<p>6) PUBLIC KEY RECOVERY:</p>

<p>1) Check if s and r are integer:</p>

<pre><code>signature.r.class
signature.s.class
</code></pre>

<p>2) Calculate curve point R (x1,y1) where x(h) x can be r, r+n (r+2n etc.) depens on h value in $group.</p>

<p>Convert n from hex</p>

<pre><code>n = 0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFE_BAAEDCE6_AF48A03B_BFD25E8C_D0364141.ord
n = 115792089237316195423570985008687907852837564279074904382605163141518161494337
</code></pre>

<p>3) Calculate the xj when h = 1 ==>   j &lt;= h </p>

<p>So i got x0 = r and x1 = r + n</p>

<pre><code>x0 = 103388573995635080359749164254216598308788835304023601477803095234286494993683
x1 = 219180663232951275783320149262904506162058819969664165517260679242195329665346```
# y² = x³ + 7  ==&gt; x³ + 7 - y² = 0  ==&gt; y = sqrt(x³ + 7)
    So there are Y that can be -Y.
</code></pre>

<pre><code>y0 = (Math.sqrt(x0**3 + 7)).to_i 
y0 = 33243658930125968263381409750062872803328956523994685349884711523646619725501695561221713273581676204319400941060096

y1 = 102613229253348668425867949464551151644184036880118254846069064957181439439331464178252481009905814258844193460846592`

R0 = (x0, y0) or R0 = (x0, -y0)  ==&gt; R0 = x0,y0 R0m = x0,-y0   (arrays)
R1 = (x1, y1) or R1 = (x1, -y1)  ==&gt; R0 = x1,y1 R1m = x1,-y1   (arrays)
</code></pre>

<p>3) Calculate e = HASH(m)</p>

<pre><code>m = ""test""
e = Digest::SHA256.digest(m)
""\x9F\x86\xD0\x81\x88L}e\x9A/\xEA\xA0\xC5Z\xD0\x15\xA3\xBFO\e+\v\x82,\xD1]l\x15\xB0\xF0\n\b""
e.unpack(""H*"")
""9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08""
==&gt; IN BINARY ""1001111110000110110100001000000110001000010011000111110101100101100110100010111111101010101000001100010101011010110100000001010110100011101111110100111100011011001010110000101110000010001011001101000101011101011011000001010110110000111100000000101000001000""
</code></pre>

<p>4) z = (Ln - first len(n) n=256)  leftmost bits of e</p>

<pre><code>z = 1000000000001000100010001000100010000000000000000000100010000000100010000000100000000000000000001000000000000000000000000000100010000000000000001000000000000000000010000000000010001000000000000000100010001000100010000000100000001000100000000000100000001000
==&gt; IN DECIMAL 57911121712712222031468434730037426356855313884841210343156710740660779485192
</code></pre>

<p>5) Calculate u1 = -z * r^(-1) mod n and u2 = s * r^(-1) mod n</p>

<pre><code> u1 = (-z * r**(-1)) % n
=&gt; 11971578986221445867450691250469536884332685577127711573660715696043877254293372045122426347501727868950695322967745945196078037375262636091467191875787979/103388573995635080359749164254216598308788835304023601477803095234286494993683
u2 = (-z * s**(-1)) % n
=&gt;(66397190700537287645903651815357348182011798486667182586289641565984306901952/103388573995635080359749164254216598308788835304023601477803095234286494993683)

6) Calculate curve point Qa = (Xa, Ya) = u1 *G + u2 * R

G = [55066263022277343669578718895168534326250603453777594175500187360389116729240, 32670510020758816978083085130507043184471273380659243275938904335757337482424]

u1.to_int = 115792089237316195423570985008687907852837564279074904382605163141518161494336  
u2.to_int = 115792089237316195423570985008687907852837564279074904382605163141518161494336
</code></pre>

<p>Now its time to calcluate the Qa for every R. R0, R0m, R1, R1m, but i feel like i wasted time... Could somebody look at this and help me understand how to recover the public key from cookie?</p>

<p>I used wikipedia [ecdsa recovery public key]</p>

<p><a href=""https://en.m.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm"" rel=""nofollow noreferrer"">https://en.m.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm</a> </p>

<p>and these sites:</p>

<p>References:</p>

<p>1) <a href=""https://www.instructables.com/id/Understanding-how-ECDSA-protects-your-data/"" rel=""nofollow noreferrer"">https://www.instructables.com/id/Understanding-how-ECDSA-protects-your-data/</a></p>

<p>2) <a href=""https://www.johndcook.com/blog/2018/08/14/bitcoin-elliptic-curves/"" rel=""nofollow noreferrer"">https://www.johndcook.com/blog/2018/08/14/bitcoin-elliptic-curves/</a></p>

<p>3) <a href=""http://www.secg.org/sec1-v2.pdf"" rel=""nofollow noreferrer"">http://www.secg.org/sec1-v2.pdf</a> </p>
","","63","<ruby><public-key><dsa>","0","","0","2019-10-24 22:27:33","","2","","11582737","","2019-10-08 10:41:45","2019-10-07 12:20:09",""
"58520237","OpenSSL server public key from buffer to EVP_PKEY","<p>I'm programming a client that partecipates in a TLS 1.2 handshake by sending messages through a TCP socket connected to Google's server. I'm using the ECDH key exchange method.</p>

<p>I am trying to derive the shared secret using <a href=""https://wiki.openssl.org/index.php/Elliptic_Curve_Diffie_Hellman#Using_ECDH_in_OpenSSL"" rel=""nofollow noreferrer"">this</a> code.</p>

<p>I received the key through the serverKeyExchange message and stored it in a buffer, so <strong>my question is: how do I generate a EVP_PKEY from a buffer?</strong>
I found a possible solution in <a href=""https://stackoverflow.com/questions/2918923/evp-pkey-from-char-buffer-in-x509-pkcs7"">this</a> post and tried with:</p>

<pre><code>i2d_PublicKey(peerkey, (unsigned char **) &amp;server_pub_key)
</code></pre>

<p>but when I run the code I get an error in this step:</p>

<pre><code>/* Provide the peer public key */
    if(1 != EVP_PKEY_derive_set_peer(ctx, peerkey)) handleErrors();
</code></pre>

<p>Which makes me think that I have not succeded at retrieving the server Public key.</p>

<p>Any Suggestions? How do I even know if the key was succesfully encoded?</p>
","<p>If you have the raw public key you must create an EC_Key with the correct parameters.</p>

<pre><code>EVP_PKEY * get_peerkey(const unsigned char * buffer, size_t buffer_len)
{
    EC_KEY *tempEcKey = NULL;
    EVP_PKEY *peerkey = NULL;

    // change this if another curve is required
    tempEcKey = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);
    if(tempEcKey == NULL) {
        handleErrors();
    }

    if(EC_KEY_oct2key(tempEcKey, buffer, buffer_len, NULL) != 1)  {
        handleErrors();
    }

    if(EC_KEY_check_key(tempEcKey) != 1) {
        handleErrors();
    }

    peerkey = EVP_PKEY_new();
    if(peerkey == NULL) {
        handleErrors();
    }

    if(EVP_PKEY_assign_EC_KEY(peerkey, tempEcKey)!= 1) {
        handleErrors();
    }

    return peerkey;
}
</code></pre>

<p>If you have the public key as an ASN.1 sequence you can use the internal conversion methods:</p>

<pre><code>EVP_PKEY* get_peerkey(const unsigned char *buffer, size_t buffer_len)
{
    EVP_PKEY *peerkey = NULL;       
    const unsigned char *helper = buffer;

    // from ""openssl/x509.h""
    peerkey = d2i_PUBKEY(NULL, &amp;helper, buffer_len);
    if (!peerkey) {
        handleErrors();
        return NULL;
    }

    return peerkey;
}
</code></pre>
","63","<openssl><tls1.2><public-key><ecdh>","0","0","1","2019-10-29 15:12:12","58542551","6","","10770385","","2019-10-29 15:12:12","2019-10-23 09:58:27",""
"33861877","Can I rescue this corrupted DER format file?","<p>I have two files that represent the same DER format public key.  They both look like this when I look at them in a text editor (sublime)</p>

<p>3081 9f30 0d06 092a 8648 86f7 0d01 0101
0500 0381 8d00 3081 8902 8181 00d2 d475
9de6 d795 7d0f e5e8 375f 3605 7e06 e391
83e7 58b2 3e46 d4e8 da3e 0ac5 136c fff2
2d0e 8386 af7c 6347 a3fd 4c39 1989 7764
69b1 85e1 f5cc fe3f 4957 c110 4264 f112
ad8f e1b9 c108 cf5e 9a77 8d6c 60b2 150a
954f 725f 25c7 b720 e536 ca81 9686 fe71
4e86 1822 48a9 df17 6c95 f9ed 8e9b a674
1a9f 868d 92a9 d2a5 5721 6dd9 1f02 0301
0001</p>

<p>but one works with RSA.importKey() and one gives me the error ""ValueError: RSA key format is not supported”.</p>

<p>When I read them in to python using ""key = open('pub.der', ""r"").read()”</p>

<p>and then print out key, the file that works prints out as:</p>

<p>'0\x81\x9f0\r\x06\t*\x86H\x86\xf7\r\x01\x01\x01\x05\x00\x03\x81\x8d\x000\x81\x89\x02\x81\x81\x00\xd2\xd4u\x9d\xe6\xd7\x95}\x0f\xe5\xe87_6\x05~\x06\xe3\x91\x83\xe7X\xb2>F\xd4\xe8\xda>\n\xc5\x13l\xff\xf2-\x0e\x83\x86\xaf|cG\xa3\xfdL9\x19\x89wdi\xb1\x85\xe1\xf5\xcc\xfe?IW\xc1\x10Bd\xf1\x12\xad\x8f\xe1\xb9\xc1\x08\xcf^\x9aw\x8dl`\xb2\x15\n\x95Or_%\xc7\xb7 \xe56\xca\x81\x96\x86\xfeqN\x86\x18""H\xa9\xdf\x17l\x95\xf9\xed\x8e\x9b\xa6t\x1a\x9f\x86\x8d\x92\xa9\xd2\xa5W!m\xd9\x1f\x02\x03\x01\x00\x01’</p>

<p>and the file that gives the error prints as:</p>

<p>'3081 9f30 0d06 092a 8648 86f7 0d01 0101\n0500 0381 8d00 3081 8902 8181 00d2 d475\n9de6 d795 7d0f e5e8 375f 3605 7e06 e391\n83e7 58b2 3e46 d4e8 da3e 0ac5 136c fff2\n2d0e 8386 af7c 6347 a3fd 4c39 1989 7764\n69b1 85e1 f5cc fe3f 4957 c110 4264 f112\nad8f e1b9 c108 cf5e 9a77 8d6c 60b2 150a\n954f 725f 25c7 b720 e536 ca81 9686 fe71\n4e86 1822 48a9 df17 6c95 f9ed 8e9b a674\n1a9f 868d 92a9 d2a5 5721 6dd9 1f02 0301\n0001’</p>

<p>I have another public key file for which I only have the corrupted/nonworking version. What is the difference between the two files, and how can I convert the version that does not work with RSA.importKey() into a version that does work with RSA.importKey()?</p>
","","60","<rsa><public-key><pycrypto><der>","0","","0","2015-11-23 00:10:48","","3","","","","","2015-11-23 00:10:48",""
"57447066","'Signed file isn't valid, got 'NODATA'' when installing MYSQL8 in Ubuntu 18.04","<p><strong>Intro:</strong></p>

<p>I am going to install <em>MySql8</em> in <em>Ubuntu 18.04</em>. I took the following Steps:</p>

<p><em>Step 1:</em> Create a file named <code>mysql.list</code> in <code>/etc/apt/sources.list.d</code></p>

<p><em>Step 2:</em> The following lines were added to <code>mysql.list</code>:</p>

<pre><code>deb http://repo.mysql.com/apt/ubuntu/ bionic mysql-apt-config
deb http://repo.mysql.com/apt/ubuntu/ bionic mysql-8.0
deb http://repo.mysql.com/apt/ubuntu/ bionic mysql-tools
#deb http://repo.mysql.com/apt/ubuntu/ bionic mysql-tools-preview
deb-src http://repo.mysql.com/apt/ubuntu/ bionic mysql-8.0
</code></pre>

<p><em>Step 3:</em> Update Repositories using <code>apt update</code> command.</p>

<p><strong>My Problem:</strong></p>

<p>But I get the following error:</p>

<pre><code>root@my:~# apt update 
.....
.....
Get:5 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB]                    
Get:6 http://repo.mysql.com/apt/ubuntu bionic InRelease [5,309 B]                                           
Err:6 http://repo.mysql.com/apt/ubuntu bionic InRelease
  Clearsigned file isn't valid, got 'NOSPLIT' (does the network require authentication?)
Reading package lists... Done        
E: Failed to fetch http://repo.mysql.com/apt/ubuntu/dists/bionic/InRelease  Clearsigned file isn't valid, got 'NOSPLIT' (does the network require authentication?)
E: The repository 'http://repo.mysql.com/apt/ubuntu bionic InRelease' is not signed.
N: Updating from such a repository can't be done securely, and is therefore disabled by default.
N: See apt-secure(8) manpage for repository creation and user configuration details.
</code></pre>

<p><strong>Note:</strong></p>

<p>I try to add <code>[trusted=yes]</code> option to <code>mysql.list</code>, but again  get the below error:</p>

<pre><code>Err:8 http://repo.mysql.com/apt/ubuntu bionic Release.gpg
  Signed file isn't valid, got 'NODATA' (does the network require authentication?)
Reading package lists... Done  
E: GPG error: http://repo.mysql.com/apt/ubuntu bionic Release: Signed file isn't valid, got 'NODATA' (does the network require authentication?)
</code></pre>
","","60","<ubuntu-18.04><public-key><mysql-8.0>","0","","0","2019-08-11 03:13:28","","0","","6148781","","2019-08-11 03:13:28","2019-08-11 03:02:27",""
"28693811","Creating a globally unique user ID","<p>I am building a system in which each user has an account with a linked public key pair. The matching private key is used to sign messages. Data describing the accounts is stored in a p2p-system, so we need a lookup key for each account, which is globally unique (i.e. a globalID (GID).<br>
Question is: how do I choose these global IDs wisely? I mean in a manner that if there is an attack on the underlying p2p-system, an attacker would have a really hard time to exchange the keys.</p>

<p>I was thinking: Hashing the public key (with a salt), using this as the GID and signing the result would do the trick.<br>
This way, if an attacker exchanges the key the GID wouldn't match any more (even though the attacker would be able to create a new valid signature). The only way for the attack to succeed is to find a collision for the GID, which can then be used as the public key, while there's still the problem of finding the matching private key in order to create signatures.</p>

<pre><code>First approach: sha256(PubKey + Salt) = GID
Second approach: sha256(PubKey + Salt) + md5(PubKey + Salt) = GID
Third approach: PBKDF2(PubKey, sha256, Salt) = GID
</code></pre>

<p>Any thoughts on that?</p>

<hr>

<p>EDIT: Some more details:</p>

<p>In this system/architecture, users should be able to setup an account with a globally unique ID, which is linked to an endpoint of some sort associated with this user. Very similar to the DNS. But without domains.<br>
For signing purposes etc (not relevant here), each user has a public key pair. So the public key needs to be published in some way. </p>

<blockquote>
  <p>Use case: Bob knows Alice's globalID and needs to ""get"" to her endpoint. She queries some system and receives a (signed) response comprising information about the endpoint as well as Alice's public key. With the public key, Bob verifies the signature. All done.</p>
</blockquote>

<p>Now assume that there is no central authority and noone that runs a (semi-) central trustworthy system like the DNS that Bob can query. Solution could be a p2p/DHT system. So let's assume we use a Kademlia DHT to store and distribute this data records (globalID, public Key, endpoint data, signature). Problem is: everyone can easily overwrite any kind of data in those systems.</p>

<p>Scenario: Assume, an attacker Charlie could somehow overwrite such a record in an easy way by just creating his own new pub-key, setting the globalID to Alice's GID and signing this all with HIS private key. Now Bob would not be able to detect that Charlie is impersonating Alice by just knowing her globalID.</p>

<p>Therefore, the globalID should be directly linked to the public key, e.g. by using one of the approaches mentioned above. Therefore, when Charlie tries to attack again in the same way he would need to find a collision in the hash function and use it as his public key (then ""generating"" the matching private key to create the correct signature).</p>

<p>Question is now how to generate the GID from the public key or whether there is a major flaw in the system.</p>

<p>Hope this clarifies things a bit...</p>
","","60","<security><hash><public-key>","1","","0","2015-03-13 11:16:04","","2","","3996393","","2015-03-13 11:16:04","2015-02-24 10:51:22",""
"32509425","Why is SSH trying to access a -cert's that do not exist?","<p>Why is a simple ssh to a GoDaddy Server trying to use a ""-cert"" file.  It does not exist?  id_rsa and id_dsa exist.  The -certs do not?  Where is it getting the information to be including a -cert?</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /Users/xxxxx/.ssh/config
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: /etc/ssh_config line 53: Applying options for *
debug1: Connecting to example.com [xx.xx.xx.xx] port 22.
debug1: Connection established.
debug1: identity file /Users/xxxxxxx/.ssh/id_rsa type 1
debug1: identity file /Users/xxxxxxx/.ssh/id_rsa-cert type -1
debug1: identity file /Users/xxxxxxx/.ssh/id_dsa type -1
debug1: identity file /Users/xxxxxxx/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
ssh_exchange_identification: read: Connection reset by peer
</code></pre>
","<p>Never did get an answer for this but somehow it cleared up as I'm no longer getting this error.</p>
","60","<macos><ssh><public-key>","-1","-1","1","2015-09-29 18:39:26","32851453","2","","580257","","2015-09-14 00:10:00","2015-09-10 18:41:26","2015-10-03 17:46:25"
"45482316","EdDSAPublicKey Serialization Java","<p>Is there a way to serialize EdDSAPublicKey in java.</p>

<p>There a method <code>getEncoded()</code> in <code>EdDSAPublicKey</code> but how to get back a <code>EdDSAPublicKey</code> from the encoding.</p>
","<p>Using the X509EncodedKeySpec </p>

<pre><code>    X509EncodedKeySpec specPub = new X509EncodedKeySpec(encodedPublicKey);
    EdDSAPublicKey eddsakey = new EdDSAPublicKey(specPub);
</code></pre>
","59","<java><encoding><digital-signature><public-key><elliptic-curve>","0","1","1","2017-08-03 18:39:31","45482407","1","","1816580","","2017-08-03 18:39:31","2017-08-03 11:01:05",""
"53100500","Old client's SSL certificate and new certificate with same pub/private key","<p><strong>Situation:</strong> we can't update <code>der</code> file on the client's device. And the SSL certificate on our web server expires soon. </p>

<p>Is it possible to renew the server's SSL certificate without replacing the client's certificate? </p>

<p>We want to follow this guide: <a href=""https://www.smashingmagazine.com/how-to-issue-a-new-ssl-certificate-with-an-old-ssl-key/"" rel=""nofollow noreferrer"">https://www.smashingmagazine.com/how-to-issue-a-new-ssl-certificate-with-an-old-ssl-key/</a></p>

<p>However, we are not sure if it helps. </p>

<p><strong>The question is:</strong></p>

<p>Does the <code>der</code> file (on the client side) contain only public key and it is safe to renew SSL certificate using the technique described in the link above (keeping same pub/private keys). </p>

<p>Will it work on client's device without replacing <code>der</code> file? Or <code>der</code> file contains not only the public key for SSL certificate but also some other information? </p>
","<p>I'm afraid, but based on your original post and clarifications, client will expect from web server <strong>the same</strong> server certificate as stored in DER file on client device. Client performs exact binary copy comparison (not only public keys).</p>

<p>Any attempts to replace server certificate will result in a connection failure on client. If you plan to replace the certificate on web server, you will have to update client devices as well.</p>

<p>Unfortunately, there are a lot of flawed HPKP implementations (to be honest, didn't see any reliable implementation) that work fine until server certificate is changed. In order to properly handle server certificate replacement, client <strong>MUST be able to store at least two server certificates</strong>, existing and new one. Here is the high-level server certificate replacement process:</p>

<ol>
<li>acquire new server certificate from CA in advance.</li>
<li>make application update by including new certificate side-by-side. When client updates the application on their device, client app will trust both, existing and new certificate.</li>
<li>give clients a time to make app update on their devices. Ideally, you should wait until all clients have updated app version with updated certificate.</li>
<li>change SSL certificate in server bindings.</li>
<li>after aa time you can make another update for client certificate by removing expired certificate from trust store.</li>
</ol>

<p>only this step sequence may guarantee uninterrupted certificate pinning renewal.</p>
","59","<ssl><ssl-certificate><x509><public-key><der>","0","1","1","2018-11-01 12:42:46","","4","","","","","2018-11-01 11:36:02",""
"55658026","BIP39 - Trying to understand how to derive keys from seed in python3","<p>I'm trying to understand how to derive keys from the seeds in Python3.</p>

<p>I found out how to program from Entropy bytes to Mnemonic to Seeds.</p>

<p>But I'm having trouble understanding how to exactly derive BIP32 Root Key, Account Extended Private Key, Account Extended Public Key, BIP32 Extended Private Key, and BIP32 Extended Public Key from Seeds in Python3.</p>

<p>I used the website, <a href=""https://iancoleman.io/bip39/#english"" rel=""nofollow noreferrer"">https://iancoleman.io/bip39/#english</a>,</p>

<p>Can anyone help me with what function/algorithm I have to use?</p>

<p>Thanks</p>
","","57","<python><bitcoin><private-key><public-key>","0","","0","2019-04-13 01:21:26","","1","","1068283","","2019-04-13 01:21:26","2019-04-12 19:04:25",""
"18209949","How to perform authentication using just the HTTP GET method?","<p>I have to create a way to keep the session authentication from application <strong>A</strong> to application <strong>B</strong>, but I can´t use:</p>

<ul>
<li>SSO</li>
<li>POST calls</li>
</ul>

<p>and, we know that GET is not a good choice, but I´ll need to use it. So, I think to use something like ""public keys"", what you think about this approach?</p>

<p>I think in:</p>

<ol>
<li>User do authentication in application A.</li>
<li>Into application A, have a link to application B; User click on this link</li>
<li>Application A open application B page sending a ""public key"" (database persistent authentication key?)</li>
<li>Application B validate this key and authorize or not the user.</li>
</ol>
","<p>In step 3, rather than thinking of a ""public key"", think of a ""session token"". Specifically, A redirects to B with</p>

<p><a href=""http://b.application.com?token=123-3-2-1-3-2-2-1-2-32-3-5-2-4-5245"" rel=""nofollow"">http://b.application.com?token=123-3-2-1-3-2-2-1-2-32-3-5-2-4-5245</a></p>

<p>Tokens should be unique and short-living.</p>

<p>B then contacts A <strong>directly</strong> and asks about the identity behind the session token:</p>

<p><a href=""http://a.application.com/userservice/getuser/123-3-2-1-3-2-2-1-2-32-3-5-2-4-5245"" rel=""nofollow"">http://a.application.com/userservice/getuser/123-3-2-1-3-2-2-1-2-32-3-5-2-4-5245</a></p>

<p>Because B contacts A directly, there is no way for users to forge invalid tokens - a random token just points to non-existing session at A.</p>
","57","<authentication><http-get><public-key>","0","1","1","2013-08-14 13:21:16","18232912","0","","","","","2013-08-13 13:06:05",""
"36835911","How do I establish an HTTPS connection from client by the server public key to that specific server?","<p>I have a client-server model.</p>

<p>The server generated a key pair and shipped public keys to all the clients.
In order to confirm the server is the real server I gonna to make connection to, I want to establish an HTTPS connection by the server public key to that specific server.</p>

<p>How can I do that? Or is there any better way to authenticate the server?</p>

<p>This is the first time I ask at stackoverflow. So, if you have any suggestion please don't hesitate to tell me. Thank you.</p>

<p>PS: Source code is written in C#.</p>
","<p>I think what I need is the term ""Certificate and Public Key Pinning"".</p>

<p><a href=""https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning"" rel=""nofollow"">https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning</a></p>
","56","<c#><https><openssl><private-key><public-key>","-1","0","1","2016-05-02 06:01:01","","0","1","5465167","","2016-04-26 01:48:59","2016-04-25 08:55:09",""
"53431707","How do I get GPG public key details without gnupg in PHP?","<p>I've got public key generated with GPG tool:</p>

<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----

mQENBFv2qOMBCADOFa70e+02E6ciLUJ51/+EuSab6oYnL8a3mejhvivU+zK9HZ0c
mwgnfvyK9UTDfCmS9Zu9hbCN9BUe6FifugDtEv6KWnGe35CxkBIVBNUk3/RX4lLt
mCy8am8rPKyHWwFZ9C9Qr+BHQ1l2DfKTYaoDPCIBvRp8bRqo+XqSUWxqL1tGCzsD
ncLuJQJnt3VQnSKSqvVDq7S8oE/5/y9auNRPmm4H4hEYf3aHSa/qkc7n1Tw2cZvk
r+BNEdWvxgu1PBS+brlBcHtTWvWnirtvRUvzwmwYzF6RpJd3ednjp0Df5+zW6Fdd
3fzCsAI9vyUiLQrqHEMvE9QSoxP2zOUdzeU7ABEBAAG0DlN0YWNrIE92ZXJmbG93
iQFUBBMBCAA+FiEEHvJGBa/lVGCXrMVYybIAkPbvUM4FAlv2qOMCGwMFCQPDm80F
CwkIBwIGFQoJCAsCBBYCAwECHgECF4AACgkQybIAkPbvUM6UEQf/SfFjWNzK42vj
u/TrmL485qEeTbRa2fC2CJ3MixCcSIqOSgqxnD22U/77/+/kk7u1aN4baBX8s9PT
bL4TA76OHgjFht1ZKNolN7yL677uJvObKmXOkuydTbMzkxE1hRj/RYn00NM9EFlK
5NIP0FhexPjrgKriIL4sTFMJCr2sg69vOa3nibjMTiu+w/VhtbsKjqTxvpgKO2x0
6BZHGDnVnwC9A27Ei/IBqWxB5tLIVZQdyrlX5+BEH5J1ilnIwrCmaY+pJAMDkRze
F6fl9uFt5fftvXyekp0/LtHI1NeinV+n/leZZA0cunk6tae9fK11URUuLuW27K30
s400HUrYjbkBDQRb9qjjAQgA7hny1cgPRkxQNgRnj428nhISFlialJ4bhfh7uXRA
0DncDBB0k8FyOuxfzCLSuHU5tHiJi35q8CSIE3smcjP7nMdqy5qEQVXdOAdakM0H
WmP/PGwN+gPAT2g3zfpsv/tIiraHSGMyCpeIrVsiHZ5Fo6Uy9cmA5EerwhrmuDca
ElN8LWjTSKt29hNYM5C2pHvv3b7gCUWYP8dBoG1DywN0Hh7yFhtwCpEeL8IMoQL+
H2ztVVqg3O4VSH1tnB9exbH/lT/w4/63DY7b4j3yLmwIrLsX8CxqYfboDhPqVOJ7
JSAJYUJcFMnDqTbSOIvjopH4+sAx1fR30U9gdvuhrGidiwARAQABiQE8BBgBCAAm
FiEEHvJGBa/lVGCXrMVYybIAkPbvUM4FAlv2qOMCGwwFCQPDm80ACgkQybIAkPbv
UM6HAwgAlH5e41vG7spJn9wa5pXH+Ym4co4nxyJkaqbh3OWpIrZzUGx9VCK46dLS
e1mNVpRtfCTqHp3BOrvgTQMLzHyPIP+NYBxSC6Rb5Ht8RSjgEPxbQYo/vFDoyTIl
UY6Md2cBOE+5rC5jXGOsfqow4edMtKxqGQrBrRR+tHCHiK8jDUtnjVvVgE+P1G/g
huWSoGmk5ljnBoEP4UEjLiKujBSexQuu4PN7gE6D76fQiBh4mrPpoTdbga5IL+Yn
dgxWkNYVneLWIhEt+n5g8wsRppbXoK3RGBs06sscawC2OekuOMx/748fBBF+JIz9
UUf+6t3SFc83Cn+EX1EuASpGKMexqA==
=ObbS
-----END PGP PUBLIC KEY BLOCK-----
</code></pre>

<p>How can I get details of this key in PHP without using gnupg library?</p>
","<p>Yes, you can either:</p>

<ol>
<li>Use the PGP specifications and write your own implementation (potentially very difficult).</li>
<li>Use a different library.</li>
</ol>
","56","<php><gnupg><public-key><pgp>","0","0","1","2018-11-22 16:08:37","","0","","","","","2018-11-22 13:06:11",""
"58097449","Permission Denied (public key) in VSCode","<p>I am new to Bit Bucket and Visual Studio Code. I gets this error</p>

<pre><code>Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>On fetch and checkout command. I can't even push or pull codes through VSCode. But I can do it through terminal use.</p>

<p>Please, help with any solutions.</p>
","","56","<visual-studio-2012><ssh><public-key><openvpn>","0","","0","2019-09-26 22:32:48","","3","","608639","","2019-09-26 22:32:48","2019-09-25 11:34:37",""
"53405143","JupyterHub with Public Key authentication","<p>I am currently install Jupyterhub using sudo spawner. However, it gets into error on PAM authentication because we are using public key authentication.</p>

<p>How can we install JupyterHub with Public Key authentication?</p>
","","56","<python><authentication><public-key><jupyterhub>","1","","0","2018-11-21 04:11:21","","1","","8708364","","2018-11-21 04:11:21","2018-11-21 04:10:40",""
"56264683","How is Ecma public key mapped to a real public key?","<p>Basically, all Microsoft assemblies that are considered standard library like mscorlib.dll include a fake 16-byte public key </p>

<pre><code> 00000000000000000400000000000000
</code></pre>

<p>It is defined by ECMA-335 (CLI specs) as Ecma/Standard Public Key. It is used to compute Public Key Token b77a5c561934e089. However, in order to create and then later verify the assembly signature (strong name) you need real keys. A real RSA Public Key is always at least 128 bytes. So where is it? </p>

<p>Many such assemblies include AssemblyKeyFileAttribute with the file EcmaPublicKey.snk. But this file contains only 16 bytes for Ecma Public Key itself meaning it is used only for building assembly and not for loading. Also, such assemblies use both 128-byte and 256-byte strong name signatures meaning the Ecma public key has to map into at least two different RSA key pairs of different sizes.</p>

<p>I noticed that the Mono project uses config files where the b77a5c561934e089 is mapped into a real Public Key but Windows probably handles it a different way. I found some old posts related to this issue but none provides any legitimate answers.</p>
","","56","<c#><.net><visual-studio><.net-assembly><public-key>","1","","0","2019-05-22 20:39:40","","2","","","","","2019-05-22 20:39:40",""
"52397894","keytool error: java.lang.IllegalArgumentException: publicKey's is not X.509, but X509 in OpenJDK 1.8.162","<p>I am trying to generate a key using the command </p>

<pre><code>keytool -genkey -dname CN=&lt;&gt;, OU=AB, O=AB, L=AB, ST=AB, C=US -alias myalias -keypass pwd -keystore C:/tmp_1.54/serverKeystore -storepass pwd -storetype PKCS12 -providername JsafeJCE -keyalg RSA -keysize 2048 -validity 360
</code></pre>

<p>But I am getting the below error while running the keytool. I am using OpenJDK 1.8.162.</p>

<pre><code>Error : keytool error: java.lang.IllegalArgumentException: publicKey's is not X.
509, but X509
java.lang.IllegalArgumentException: publicKey's is not X.509, but X509
        at sun.security.tools.keytool.CertAndKeyGen.generate(CertAndKeyGen.java:
162)
        at sun.security.tools.keytool.Main.doGenKeyPair(Main.java:1739)
        at sun.security.tools.keytool.Main.doCommands(Main.java:1007)
        at sun.security.tools.keytool.Main.run(Main.java:366)
        at sun.security.tools.keytool.Main.main(Main.java:359)
</code></pre>

<p>Need help in resolving this issue.</p>
","<p>This issue is resolved. I was trying to first enable FIPS (using RSA Bsafe) in OpenJDK 1.8 and then was trying to enable SSL in the product which was throwing this error. Later on I changed the order doing first SSL and then enable FIPS which worked seamlessly.  Here the issue what I found was OpenJDK 1.8 does not support RSA Bsafe libraries before SSL is enabled.</p>
","56","<java><x509><keytool><public-key>","1","1","1","2019-01-31 09:23:18","","2","","","","","2018-09-19 04:09:46",""
"22048528","Local git clone with source in WINDOWS","<p>I am trying to do a local git clone (On my pc) from bitbucket with sourcetree terminal.</p>

<pre><code>$ git clone git@bitbucket.org:xxxxxxx/example.git
</code></pre>

<p>And it drop the following error:</p>

<pre><code>Permission denied (public key)
</code></pre>

<p>I have the public key but dont know how give it to sourcetree in windows.</p>

<p>Need help with that.</p>

<p>Regards.</p>
","<p>If you go <code>Tools &gt; Options</code> in SourceTree, it looks like you can add your SSH private key there:</p>

<p><img src=""https://i.stack.imgur.com/ExMBk.png"" alt=""enter image description here""></p>

<p>There's also a dropdown that you can use to switch from OpenSSH to PuTTY, if that's what you're using as your SSH engine.</p>
","56","<git><bitbucket><public-key><atlassian-sourcetree>","0","0","1","2015-05-04 02:11:01","22050638","1","","3225495","","2015-05-04 02:11:01","2014-02-26 17:15:23",""
"57577140","How to create signature using PHP","<p>I need to use an API but first to login I need to create signature.</p>

<pre><code>1. Concatenate the API key with the current timestamp in the format below:
&lt;&lt;APIKEY&gt;&gt;_&lt;&lt;timestamp(yyyy'-'MM'-'ddTHH:mm:ss.fffZ)&gt;&gt;
</code></pre>

<p>and this step is easy:</p>

<pre><code>hash('sha256', $data);
</code></pre>

<p>result is:
9952375a30708b46739986482303cae30ad51fc9a362b5794d298dfc22f7ec02
and this is correct result</p>

<p>The next step is:</p>

<pre><code>2. The combination of the created signature along with the provided API secret key will act as the
digital signature of the call.
</code></pre>

<p>I have API secret key like:</p>

<pre><code>    -----BEGIN PUBLIC KEY-----
9IGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCgBSU90PX4WyXFAZ/+M84dJNEi
/0j5OermfydTU4g2JvnpO6BOQjNpb5+mOLjVoij7DWTdDtx1WThRm04N3DVuyh+a
5cledvMbcngvyiXpQCdskT9bVmI4QLbmRny46S7MER1jhziMQRfRw9gbmlB2iCEq
n21kDr842Q+WDtLE4QIDAQA9
-----END PUBLIC KEY-----
</code></pre>

<p>How I can get Digital signature with a combination of created signature and provided API secret key?</p>

<p>There is an Python example like:</p>

<pre><code>key = api_key + '_' + timestamp

print ""message"", key

sha_hash = hashlib.sha256(key).hexdigest()

print ""sha256 hash:"", sha_hash


rsa_key = RSA.importKey(pub_key)
cipher = PKCS1_v1_5.new(rsa_key)
signature = base64.encodestring(cipher.encrypt(sha_hash))
</code></pre>

<p><strong>but how I can get signature using PHP?</strong></p>
","<p>While there are numerous ways to accomplish this, I recommend leveraging the <a href=""https://www.php.net/manual/en/function.openssl-public-encrypt.php"" rel=""nofollow noreferrer""><strong>openssl_public_encrypt</strong></a> method. There are other <em>crypt</em> functions and even pure PHP implementations of RSA but they are likely not as current and well maintained as openSSL is going to be on a linux system. Don't forget all the disruption in SSL/TLS these last years. Everything from retiring older protocols and weaker cyphers to POODLE type exploits.</p>

<p>If for whatever reason that is not an option I would probably look into phpseclib. <a href=""https://github.com/phpseclib/phpseclib"" rel=""nofollow noreferrer"">https://github.com/phpseclib/phpseclib</a></p>

<p>Really might come down to what makes the most sense for your project... OS, portability, speed, etc.</p>

<p>Here is that Python snippet converted to equivalent PHP code.</p>

<pre><code>&lt;?php
$key = $api_key . '_' . $timestamp;

echo ""message:"" . $key;

$sha_hash = hash('sha256', $key);

echo ""sha256 hash:"" .  $sha_hash;

$rsa_key = ""your public key goes in here""; //see https://www.php.net/manual/en/function.openssl-pkey-get-public.php

openssl_public_encrypt($sha_hash, $encrypted, $rsa_key);
$signature = base64_encode($encrypted);

</code></pre>
","55","<php><rsa><digital-signature><sha256><public-key>","1","2","1","2019-08-22 16:26:02","57578429","4","","569976","","2019-08-22 16:26:02","2019-08-20 15:37:36",""
"54806488","How to convert ethereum addres to public key","<p>I need to convert ethereum address like this </p>

<p>0xB34080739D5B656D76089f9f21b374BA5dafA373</p>

<p>to public key like this</p>

<p>e2d3a3a43e71eb541e12504cee22ed74024969b46b9e68ea7f9e5384fe96fc04</p>

<p>I got the address this way</p>

<pre><code>from web3 import Web3

w3 = Web3(Web3.HTTPProvider('https://sokol.poa.network'))

addr = w3.toHex(w3.sha3(text=public_key)[12:])
</code></pre>

<p>Maybe there is a library for that? help pls</p>
","<p>This is not possible.</p>

<p>An ethereum address (for an externally owner account, which is an account linked to a private key) is the last 20 bytes of <code>keccak256(public_key)</code>. Since <code>keccak256</code> is a hash function, and thus a one-way function, there is no way to recover the public key from the address.</p>
","55","<python><ethereum><public-key>","0","1","1","2019-02-22 06:56:15","54821653","0","","","","","2019-02-21 11:54:45",""
"51699354","Unable to use ssh - public key issue","<p>I am new to programming and am trying to ssh to my server as that may be needed later to edit code.</p>

<p>My ~/.ssh/id_rsa.pub is </p>

<p>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD3UP7ryN33fuzwg5wfXSsTDtcRc+jTsrU2+IYI0yrGqPZ7F4+LesO+1/delLvQuhr8O+YJPgAZK6mRoY+ruWPEf/hGsJkrR76kNeOSFkXP/QgSN7aWPhgRFs0EaUk+fgHcri1mOOgxcNto7Mwo8U+YuuMf3CMxMqBcWKccPvPSNMmL91cs56pTM6VXP+rNYBGEFiEqjZdYrUncICmgOO2fIgpcLOIBYsgBcWdl+vycc0oMhLtRPy6ALgzujI3FSMhRxwi8Oy0UjCHNJowcb+XFZrDk8qRUucp1/IYGXBgjS7jJVTejseIKZvnf1qEyRYY8p7pltfqrGKdPNRT5zSun mrinmaykalita@MacBook-Pro-77.local</p>

<p>and</p>

<p>my ~/.ssh/known_hosts has an entry as</p>

<p>173.<strong><em>.</em></strong>.** ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMIkfmRuMEdyptRu11rW+3qlokDq3B5HDruYGow1fJTTQrPhL7YLAabAek97jChU09VcdBzr2x8+v3HsUfT6Blc=</p>

<p>What should I use for ***** in</p>

<p>ssh-copy-id -i ***** root@173.<strong><em>.</em></strong>.** to send public key to that server so I can ssh after that? And what is the significance of the other?</p>

<p>I am a newbie, so a dumb question.</p>

<p>Please help.</p>

<p>Thanks and Regards</p>
","<blockquote>
  <p>What should I use for ***** in ssh-copy-id -i ***** root@173...46 to send public key to that server so I can ssh after that?</p>
</blockquote>

<p>Use a path to the public key file:</p>

<pre><code>ssh-copy-id -i $HOME/.ssh/id_rsa.pub root@173...46 to send public key to that server so I can ssh after that?
</code></pre>

<p>Be careful with the access modes of files and directories (as said in a comment): as a general rule, do not set group or world access or modification rights to the corresponding inodes.</p>
","55","<ssh><rsa><ssh-keys><public-key><ecdsa>","-2","0","1","2018-08-06 15:55:56","","10","1","9612623","","2018-08-06 15:49:57","2018-08-06 00:47:03",""
"34700665","Public Key for decryption","<p>Questions about public keys:</p>

<ol>
<li><p>Can a PUBLIC key be created such that it can work for both encryption and decryption? (of the same object/code, of course)</p></li>
<li><p>Can a PUBLIC key be created for decryption only? (when encryption is done with the PRIVATE key). I mean, such that if used for encryption it CANNOT decrypt what it has encrypted?</p></li>
</ol>
","<p>A Public key is exactly what it describes.  <strong>Public</strong>.  If you want a public key that both encrypts and decrypts, then it is no longer a public, nor asymmetric key.  It's just a standard symmetric key, for algorithms like AES etc.  Does this sound like what you want to do?</p>

<p>For your second question, a Public Key and Private Key are derived from a mathematical relationship. The RSA Private Key actually contains the Public Exponent and Modulus (among other components) that can be used to directly create the Public Key. Thus, if you have the Private Key, you also have the Public Key. Your second scenario is then not secure.</p>

<p>You might be interested in <strong>signing</strong> data using a Private Key and <strong>verifying</strong> the data using a Public Key.  This is common in SSL Certificates.</p>
","54","<encryption><public-key>","0","1","1","2016-01-10 11:12:49","","0","","1364007","","2016-01-10 00:49:14","2016-01-10 00:33:04",""
"37537151","How to verify a file using a public key in Android?","<p>My app is large, so it uses an expansion file. I want my app to verify that the expansion file it's about to load, was generated by me and not someone else.</p>

<p>I could zip up the expansion file using a password, but that would require me to embed the password into the source code of the app. This is not very effective since anyone could decompile the app and retrieve the password.</p>

<p>What I want is three things:
<br/>
1- A tool that allows me to sign the file using a private key (a random string).
<br/>
2- A Java library that allows me to verify the signed file using...
<br/>
3- The corresponding public key (another random string) that I can embed into the source code of the app.</p>

<p>Can someone point me in the right direction?</p>
","","53","<android><private-key><public-key><apk-expansion-files>","1","","0","2016-05-31 04:58:34","","2","1","","","","2016-05-31 04:58:34",""
"57159227","RSA decryption error with PKCS#1: javax.crypto.IllegalBlockSizeException: Data must not be longer than 256 bytes","<p>I am running into this problem when trying to decrypt a message.</p>

<h2>Error</h2>

<pre><code>An exception or error caused a run to abort: Data must not be longer than 256 bytes 
javax.crypto.IllegalBlockSizeException: Data must not be longer than 256 bytes
</code></pre>

<p>My code is as follows.</p>

<pre><code>package com.smth.what.api

import java.security.spec.X509EncodedKeySpec
import java.security.{KeyFactory, PrivateKey, PublicKey}

import javax.crypto.Cipher
import org.apache.commons.codec.binary.Base64

object Encryptor {
  private val publicKeyString: String = System.getenv(""PUB_KEY"")
  private val privateKeyString: String = System.getenv(""PRIV_KEY"")

  private val publicKey = readPemPublicKey(publicKeyString)
  private val privateKey = readPemPrivateKey(privateKeyString)

  private def readPemPublicKey(publicKey: String): PublicKey = {
    val pemPublicKey = publicKey.replace(""\n"", """")
      .replace(""-----BEGIN PUBLIC KEY-----"", """")
      .replace(""-----END PUBLIC KEY-----"", """")
      .replace("" "", """")

    val publicKeyBytes: Array[Byte] = Base64.decodeBase64(pemPublicKey)
    val publicKeySpec = new X509EncodedKeySpec(publicKeyBytes)

    val keyFactory = KeyFactory.getInstance(""RSA"")

    keyFactory.generatePublic(publicKeySpec)
  }

  private def readPemPrivateKey (privateKey: String): PrivateKey = {
    val pemPrivateKey = privateKey.replace(""\n"", """")
      .replace(""-----BEGIN RSA PRIVATE KEY-----"", """")
      .replace(""-----END RSA PRIVATE KEY-----"", """")
      .replace("" "", """")

    val privateKeyBytes: Array[Byte] = Base64.decodeBase64(pemPrivateKey)

    val keyFactory = KeyFactory.getInstance(""RSA"")

    import java.security.spec.RSAPrivateCrtKeySpec

    import sun.security.util.DerInputStream

    val derReader = new DerInputStream(privateKeyBytes)
    val seq = derReader.getSequence(0)
    val modulus = seq(1).getBigInteger
    val publicExp = seq(2).getBigInteger
    val privateExp = seq(3).getBigInteger
    val prime1 = seq(4).getBigInteger
    val prime2 = seq(5).getBigInteger
    val exp1 = seq(6).getBigInteger
    val exp2 = seq(7).getBigInteger
    val crtCoef = seq(8).getBigInteger

    val keySpec = new RSAPrivateCrtKeySpec(modulus, publicExp, privateExp, prime1, prime2, exp1, exp2, crtCoef)

    keyFactory.generatePrivate(keySpec)
  }

  def encrypt(inputString: String, key: PublicKey = publicKey): String = {
    val cipher: Cipher = Cipher.getInstance(""RSA"")
    cipher.init(Cipher.ENCRYPT_MODE, key)

    new String(cipher.doFinal(inputString.getBytes(""UTF-8"")))
  }

  def decrypt(inputString: String, key: PrivateKey = privateKey): String = {
    val cipher: Cipher = Cipher.getInstance(""RSA"")
    cipher.init(Cipher.DECRYPT_MODE, key)

    val inputStringBytes = inputString.getBytes(""UTF-8"")

    new String(cipher.doFinal(inputStringBytes))

  }
}
</code></pre>

<p>My key's size is <code>2048</code>. It was generated via <code>openssl genrsa</code> with <code>.pem</code> output.</p>

<p>I use IntelliJ's environment variable to provide both public and private keys (via the Edit Configurations, copying and pasting them).</p>

<p>The error came from this line
<code>new String(cipher.doFinal(inputStringBytes))</code> from <code>decrypt</code> function.</p>

<p>I have been reading a few stackoverflow's posts (such as this <a href=""https://stackoverflow.com/questions/20262878/how-to-encrypt-aes-keys-using-rsa-without-running-into-javax-crypto-illegalbloc"">one</a>), however, I still do not understand what is going on.</p>

<p>If possible, I would like a very basic explanation, as encryption/ decryption is a new area for me.</p>
","<p>After attempting different things, what works is to apply <code>Base64</code> encoding to the encrypted message and then use <code>Base64</code> decoding when decrypting the encrypted message. This is aligned with what @James K Polk comment is saying.</p>

<p>See the updated code (only for the functions <code>encrypt</code> and <code>decrypt</code> as the rest remains the same)</p>

<pre><code>  def encrypt(inputString: String, key: PublicKey = publicKey): String = {

    cipher.init(Cipher.ENCRYPT_MODE, key)

    val encrypted: Array[Byte] = cipher.doFinal(inputString.getBytes())

    Base64.encodeBase64String(encrypted)
  }

  def decrypt(inputString: String, key: PrivateKey = privateKey): String = {

    cipher.init(Cipher.DECRYPT_MODE, key)

    val decodedInputString: Array[Byte] = Base64.decodeBase64(inputString)

    val decrypted: Array[Byte] = cipher.doFinal(decodedInputString)

    new String(decrypted)
  }
</code></pre>
","53","<java><scala><encryption><private-key><public-key>","0","1","1","2019-07-23 23:20:29","","2","","","","","2019-07-23 07:51:10",""
"56149466","NodeJS crypto RSA, not compatible with Elixir/Erlang PublicKey?","<p>I’m having trouble trying to decrypt in Elixir (using ExCrypto - which is a only a wrapper around crypto and public_key) encrypted by NodeJS Crypto.</p>

<p>Here’s what works :</p>

<ul>
<li>encrypt_public in NodeJS -> decrypt_private NodeJS (Works)</li>
<li>encrypt_public in Elixir -> decrypt_pricate in Elixir (Works)</li>
</ul>

<p>But :</p>

<ul>
<li>encrypt_public in NodeJS -> decrypt_private in Elixir (Does Not Work)</li>
</ul>

<p>It seems that an encrypt_public from Node, can’t be decrypted by a decrypt_private in Elixir.
I even tried the hard way directly with the Erlang module public_key, it gives me the same result.</p>

<p>Here’s what I tried :</p>

<pre><code>var fs = require(""fs"")
var crypto = require(""crypto"")

var rsa_key = fs.readFileSync('./priv/public.key').toString()
var rsa_priv = fs.readFileSync('./priv/private.key').toString()
var buffer = Buffer.from(""Hello world"")
var encrypted_auth = crypto.publicEncrypt({key: rsa_key}, buffer)
console.log(""copy/paste this in iex: "", encrypted_auth.toString(""Base64""))
var crypted_buffer = Buffer.from(encrypted_auth)
var decrypted_auth = crypto.privateDecrypt({key: rsa_priv, passphrase: ""my_pass_phrase""}, crypted_buffer)
console.log(""--- Res: "", decrypted_auth.toString())
</code></pre>

<p>But as soon as you copy/paste the Base64 generated in Node Here’s what I get :</p>

<pre><code>key = ExPublicKey.load!(""./priv/private.key"", ""my_pass_phrase"")
cipher = ""PASTED BASE64 FROM NODE""
ExPublicKey.decrypt_private(cipher, key)
</code></pre>

<p>returns <code>:error</code></p>

<p>I have suspected the rsa padding to be different, but it doesn’t seems to be that… Does anyone have a clue ?</p>
","<p>There were 2 issues
The padding by default in Node is : RSA_PKCS1_OAEP_PADDING
while the default one is erlang is : rsa_pkcs1_padding</p>

<p>the solution is to modify the padding in Node : </p>

<pre><code>var encrypted_auth = crypto.publicEncrypt({key: rsa_key, padding: crypto.constants.RSA_PKCS1_PADDING}, buffer)
</code></pre>

<p>The second issue, was that EXPublicKey was trying to Base.url_decode64 while the Base64 generated by Node is not url safe
To fix that : </p>

<pre><code>ExPublicKey.decrypt_private(cipher, key, url_safe: false)
</code></pre>
","51","<node.js><elixir><rsa><public-key>","1","4","1","2019-05-15 14:24:28","56151686","0","","","","","2019-05-15 12:33:29",""
"37467484","Multiple private and public key for same user","<p>If a user have 2 pairs of public and private key, how can the server that has the public keys know which one to use? The server should encrypt the message using the public key to that private key, however how does it know?</p>
","<p>No. SSH does not do <em>Encrypt&amp;Decrypt</em>, but <em>Sign&amp;Verify</em> sequence.</p>

<p>The server sends some data, client signs them using its private key and server can verify the data using all of the public keys it has stored in <code>authorized_keys</code> file.</p>

<p>But in real world, there is optional phase before doing all the above. The client sends also the public keys to match correct public part on the server.</p>
","51","<database><ssh><primary-key><public-key>","0","2","1","2016-05-26 18:44:21","37468364","0","","2196426","","2016-05-26 18:44:21","2016-05-26 17:28:25",""
"57155611","Does Paramiko support certificate based authentication","<p>Does Paramiko support certificate based authentication? The <code>key_filename</code> from the <code>connect</code> method mentioned that it supports both private keys and certs, is the certs here means Certificate-Based Authentication?</p>

<blockquote>
  <p>key_filename (str) – the filename, or list of filenames, of 
          optional private key(s) and/or certs to try for authentication</p>
</blockquote>

<pre><code>connect(hostname, port=22, username=None, password=None, pkey=None, 
    key_filename=None, timeout=None, allow_agent=True, 
    look_for_keys=True, compress=False, sock=None, gss_auth=False, 
    gss_kex=False, gss_deleg_creds=True, gss_host=None, 
    banner_timeout=None, auth_timeout=None, gss_trust_dns=True, 
    passphrase=None, disabled_algorithms=None)
</code></pre>
","<p>Paramiko supports <a href=""https://cvsweb.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/PROTOCOL.certkeys?annotate=HEAD"" rel=""nofollow noreferrer"">proprietary OpenSSH public key algorithms supporting certificates</a>.</p>

<p>The documentation of the <a href=""https://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.connect"" rel=""nofollow noreferrer""><code>SSHClient.connect</code> method</a> is more clear about it (than the documentation of the <code>key_filename</code> parameter itself):</p>

<blockquote>
  <p><code>key_filename</code> may contain <strong>OpenSSH public certificate paths</strong> as well as regular private-key paths;</p>
</blockquote>
","51","<python><ssh><paramiko><public-key><openssh>","1","1","1","2019-07-25 06:26:06","57157401","0","2","850848","","2019-07-23 05:48:35","2019-07-23 01:41:28",""
"50227498","How to get the PublicKeyToken of a created machine-level RSA key container to use in ""configProtectedData"" element of Web.config?","<p>I created an RSA key container by following command:</p>

<p><code>aspnet_regiis -pc ""[my container name]"" -exp</code></p>

<p>Now I want to use it to encrypt connectionStrings of <strong>Web.config</strong> so I use the following element in <strong>Web.config</strong>:</p>

<pre><code>&lt;configProtectedData defaultProvider=""providerMyCompany""&gt;
            &lt;providers&gt;
              &lt;add name=""providerMyCompany"" description="""" keyContainerName=""keyContainerMyCompany"" type=""System.Configuration.RsaProtectedConfigurationProvider, System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL""
                useMachineContainer=""true"" useOAEP=""true"" /&gt;
            &lt;/providers&gt;
&lt;/configProtectedData&gt;
</code></pre>

<p>I use the value of the PublicKeyToken same as MSDN sample <em>(b03f5f7f11d50a3a)</em>, but I want to get the PublicKeyToken of the RSA key container created by myself. How can I do this?</p>
","","50","<encryption><web-config><rsa><public-key>","1","","0","2018-06-07 01:32:24","","0","","9756662","","2018-06-07 01:32:24","2018-05-08 06:47:57",""
"52981995","How to Calculate Fingerprint From SSH DSA Public Key in Java?","<p>Similar to question <a href=""https://stackoverflow.com/questions/51059782/how-to-calculate-fingerprint-from-ssh-rsa-public-key-in-java"">How to Calculate Fingerprint From SSH RSA Public Key in Java?</a> , I would like to know how to Calculate Fingerprint for a DSA Public Key.
I've got the dsaPublicKey object.</p>

<pre><code>DSAPublicKey dsaPublicKey = (DSAPublicKey) publicKey;
</code></pre>
","<p>Following the directions in the <a href=""https://stackoverflow.com/questions/51059782/how-to-calculate-fingerprint-from-ssh-rsa-public-key-in-java"">other answer</a> together with the <a href=""https://docs.oracle.com/javase/7/docs/api/java/security/interfaces/DSAPublicKey.html"" rel=""nofollow noreferrer"">docs</a> for <code>DSAPublicKey</code> should be sufficient for you.</p>
","48","<java><ssh><public-key><java-security><dsa>","-1","-1","1","2018-11-07 08:18:27","","0","","8180974","","2018-11-07 08:18:27","2018-10-25 05:36:44",""
"43748202","Error when getting C# generated public keys in PHP","<p>I created public key using the following code in C#:</p>

<pre class=""lang-cs prettyprint-override""><code>using (var rsa = new RSACryptoServiceProvider(2048))
{
    rsa.PersistKeyInCsp = false;
    m_publicKey = rsa.ExportParameters(false);
}
</code></pre>

<p>And exported the public key to a file using the code from <a href=""https://stackoverflow.com/questions/28406888/c-sharp-rsa-public-key-output-not-correct/28407693#28407693"">here</a>.</p>

<p>The output file looks like:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA498EWxuZK/KsUgIEusEt
QOJulgTHwb8C4avtzJnzhosTeKooXvyGFPpex6HcQGSRqrWpNr2yhw1BvJvH2UyE
Jisl5BJA5Za+ofmbGifCFwCllZ37U1YpOmqpB2Yt+yYElGh5dp+lqs5Q3u3nPknd
nLS3bxH7qlZBvR9YPWj9x7IuSXJyopAmdJato8xeNHzmBxWD8FgQKICFpLtGsPXq
XRwT0imTs6/EcMqq6fdlp0OyBKyZjw6t47gMeqiuSYz6k41Nf/SbtIC4snUyoUgI
TvnHjWe1cY7js4kY62A9ZpHX0NpG7JXctxVb+aZOv1rS36bUjcP+bug1W3ZKrTG6
hwIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>On server side I need to read the key file and use it for encryption/decryption using PHP. My PHP code is as following:</p>

<pre class=""lang-c prettyprint-override""><code>$pub_key = file_get_contents(""../user_pub_key.crt"");
$public_key = openssl_pkey_get_public($pub_key);
var_dump($public_key);
echo openssl_error_string();
</code></pre>

<p>Although $public_key is apparently created and var_dump returns the resource number of it:</p>

<pre><code>resource(5) of type (OpenSSL key)
</code></pre>

<p>but strangely enough, openssl_error_string() is also shows the following error:</p>

<pre><code>error:0906D06C:PEM routines:PEM_read_bio:no start line
</code></pre>

<p>I spent hours and hours searching for a solution to this. I tried the suggestions about end-of-line characters, encoding, etc., etc. in <a href=""https://stackoverflow.com/questions/20837161/openssl-pem-routinespem-read-biono-start-linepem-lib-c703expecting-truste"">here</a>, <a href=""https://stackoverflow.com/questions/31630544/cant-get-private-key-with-openssl-no-start-linepem-lib-c703expecting-any-p"">here</a>, <a href=""https://snippets.aktagon.com/snippets/543-how-to-fix-pem-read-bio-no-start-line-error-nginx-error"" rel=""nofollow noreferrer"">here</a>, <a href=""https://serverfault.com/questions/454926/nginx-ssl-ssl-error0906d06cpem-routinespem-read-biono-start-line"">here</a>, and many more links. </p>

<p>The only suggestions that might be relevant to this problem are <a href=""https://stackoverflow.com/questions/11399613/issues-with-openssl-on-php-different-behaviour-for-different-versions/11427989#11427989"">here</a> and <a href=""https://stackoverflow.com/questions/23462367/encrypt-data-by-using-a-public-key-in-c-sharp-and-decrypt-data-by-using-a-privat"">here</a>, but those solution seem to be for Windows systems not Mac OS, so I couldn't try them.  Your help on this is much appreciated.</p>

<p>p.s. all the development and server are on Mac (not Windows). </p>
","","47","<c#><php><openssl><public-key>","0","","0","2017-05-02 22:26:13","","2","","-1","","2017-05-23 12:02:18","2017-05-02 22:26:13",""
"39991917","different ssh login methods","<p>Could you please help me to understand bellow authentication methods</p>

<ol>
<li><code>ssh -i PrivateKey.pem ec2-user@52.48.32.12</code></li>
<li>Password less athentication</li>
</ol>

<p>As per the my understanding in both above cases we use private key and public key. In both methods pubic keys are stored in <code>~/.ssh/authorized_keys</code> file in the server which need to login.</p>

<ol>
<li><p>In first method user provides corresponding private key. But in second method how authentication mechanism know what is the corresponding private key as user not supply the private key.</p></li>
<li><p>Can we arrange pass wordless authentication like <code>ssh -i id_rsa ec2-user@52.48.32.12</code></p></li>
<li><p>Can we use two public keys and two private keys to authenticate to the same server from same client.</p></li>
</ol>
","<blockquote>
  <p>In first method user provides corresponding private key. But in second method how authentication mechanism know what is the corresponding private key as user not supply the private key.</p>
</blockquote>

<p>The client is using private keys in default location (<code>~/.ssh/id_{rsa,dsa,ecdsa,ed25519}</code>).</p>

<blockquote>
  <p>Can we arrange pass wordless authentication like ssh -i id_rsa ec2-user@52.48.32.12</p>
</blockquote>

<p>Yes, the filename does not matter. But of course it has to be a valid private key.</p>

<blockquote>
  <p>Can we use two public keys and two private keys to authenticate to the same server from same client.</p>
</blockquote>

<p>Yes. But servers are usually fine with accepting single key, so there is no need to do that.</p>
","46","<ssh><amazon-ec2><private-key><public-key>","-1","1","1","2016-10-12 06:49:24","","0","","2196426","","2016-10-12 06:45:53","2016-10-12 06:33:42",""
"28638507","don't understand these directions - ssl","<p>I was sent these directions: Export the Public Key (.p7b or .cer) and the Private Key (.pfx) from the certificate. Set a password for your Private Key (.pfx).Use your private key as your signing certificate. When you send a submission you will be prompted to enter in your signing certificate password, this will be the password you set for your Private Key (.pfx).. After you have exported both files successfully, send us a copy of your new Public Key (.p7b or .cer) to: [] </p>

<p>I understand that .p7b or .cer  and .pfx would have the certificate included. So -- are they calling the public key plus the certificate, and the private key plus certificate, ""public key"" and ""private key""? </p>

<p>Is this the usual way this is done?</p>

<p>Thanks.</p>
","<p>Certificate is structure which includes the public key plus additional info (owner/domain,possible use,expiration date,issuer,etc.).</p>
","46","<x509certificate><digital-signature><private-key><public-key>","0","-2","2","2015-02-20 22:48:16","","1","","207421","","2015-02-20 22:46:15","2015-02-20 21:26:12",""
"28638507","don't understand these directions - ssl","<p>I was sent these directions: Export the Public Key (.p7b or .cer) and the Private Key (.pfx) from the certificate. Set a password for your Private Key (.pfx).Use your private key as your signing certificate. When you send a submission you will be prompted to enter in your signing certificate password, this will be the password you set for your Private Key (.pfx).. After you have exported both files successfully, send us a copy of your new Public Key (.p7b or .cer) to: [] </p>

<p>I understand that .p7b or .cer  and .pfx would have the certificate included. So -- are they calling the public key plus the certificate, and the private key plus certificate, ""public key"" and ""private key""? </p>

<p>Is this the usual way this is done?</p>

<p>Thanks.</p>
","<blockquote>
  <p>I was sent these directions:</p>
</blockquote>

<p>Hmm, let's see.</p>

<blockquote>
  <p>Export the Public Key (.p7b or .cer) and the Private Key (.pfx) from the certificate.</p>
</blockquote>

<p>Impossible. The private key isn't <em>in</em> the certificate. And there is no reason to export the public key. It's of no use without the certificate.</p>

<blockquote>
  <p>Set a password for your Private Key (.pfx).</p>
</blockquote>

<p>Good.</p>

<blockquote>
  <p>Use your private key as your signing certificate.</p>
</blockquote>

<p>This is completed and utter nonsense. A private key cannot be used as a certificate. It isn't a certificate. [It can however be used to <em>sign</em> things: if that's what they're talking about they should have said so, clearly.]</p>

<blockquote>
  <p>When you send a submission you will be prompted to enter in your signing certificate password, this will be the password you set for your Private Key (.pfx).</p>
</blockquote>

<p>More nonsense, see above.</p>

<blockquote>
  <p>After you have exported both files successfully, send us a copy of your new Public Key (.p7b or .cer) to: [] </p>
</blockquote>

<p>Yet more nonsense. Sending the public key accomplishes nothing, and a .cer file isn't a key file, it's a certificate file.</p>

<blockquote>
  <p>I understand that .p7b or .cer  and .pfx would have the certificate included. So -- are they calling the public key plus the certificate, and the private key plus certificate, ""public key"" and ""private key""? </p>
</blockquote>

<p>They are talking rank nonsense. If those are really the directions you were sent, tell them so, send them back, get your money back, and start all over again with somebody that actually knows what they're talking about. These instructions cannot possibly have been even tested.</p>

<blockquote>
  <p>Is this the usual way this is done?</p>
</blockquote>

<p>It is drivel.</p>

<p>But what exactly is 'this' that is supposed to be getting done here?</p>
","46","<x509certificate><digital-signature><private-key><public-key>","0","0","2","2015-02-20 22:48:16","","1","","207421","","2015-02-20 22:46:15","2015-02-20 21:26:12",""
"58282539","Snowflake SDKTest: Error:(137, 49) java: cannot find symbol variable PublicKeyReader location: class net.snowflake.ingest.example.SDKTest","<p>I am not able to run the SDKTest class following this documentation: 
<a href=""https://docs.snowflake.net/manuals/user-guide/data-load-snowpipe-rest-load.html"" rel=""nofollow noreferrer"">https://docs.snowflake.net/manuals/user-guide/data-load-snowpipe-rest-load.html</a></p>

<p>I am using IntelliJ and Java SDK 12.0. </p>

<pre><code> Error:(137, 49) java: cannot find symbol
      symbol:   variable PublicKeyReader
      location: class net.snowflake.ingest.example.SDKTest
</code></pre>

<p>Can anybody help me with this? </p>

<p>BR,</p>
","<p>My understanding of the error is that the compiler does not know what the variable PublicKeyReader references.  Perhaps the variable was declared incorrectly in the code or there was a misspelling?  There is a sample Java program in the documentation you mentioned, but there is also a sample program here if it helps:
<a href=""https://github.com/snowflakedb/snowflake-ingest-java"" rel=""nofollow noreferrer"">https://github.com/snowflakedb/snowflake-ingest-java</a></p>

<p>References for Error:</p>

<ul>
<li><p><a href=""https://stackoverflow.com/questions/25706216/what-does-a-cannot-find-symbol-compilation-error-mean"">What does a &quot;Cannot find symbol&quot; compilation error mean?</a></p></li>
<li><p><a href=""https://www.thoughtco.com/error-message-cannot-find-symbol-2034060"" rel=""nofollow noreferrer"">https://www.thoughtco.com/error-message-cannot-find-symbol-2034060</a></p></li>
</ul>
","46","<sdk><public-key><snowflake-datawarehouse>","0","0","2","2019-10-09 23:32:25","58313516","0","","","","","2019-10-08 08:15:59",""
"58282539","Snowflake SDKTest: Error:(137, 49) java: cannot find symbol variable PublicKeyReader location: class net.snowflake.ingest.example.SDKTest","<p>I am not able to run the SDKTest class following this documentation: 
<a href=""https://docs.snowflake.net/manuals/user-guide/data-load-snowpipe-rest-load.html"" rel=""nofollow noreferrer"">https://docs.snowflake.net/manuals/user-guide/data-load-snowpipe-rest-load.html</a></p>

<p>I am using IntelliJ and Java SDK 12.0. </p>

<pre><code> Error:(137, 49) java: cannot find symbol
      symbol:   variable PublicKeyReader
      location: class net.snowflake.ingest.example.SDKTest
</code></pre>

<p>Can anybody help me with this? </p>

<p>BR,</p>
","<p>Here is the running copy of SDK Test code :</p>

<hr>

<p>package com.snowflake.SalesforceTestCases;</p>

<pre><code>import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.time.Instant;
import java.util.Base64;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import javax.crypto.EncryptedPrivateKeyInfo;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

import net.snowflake.ingest.SimpleIngestManager;
import net.snowflake.ingest.connection.HistoryRangeResponse;
import net.snowflake.ingest.connection.HistoryResponse;

public class SDKTest {

    private static final String PRIVATE_KEY_FILE = ""&lt;Path to your p8 file&gt;/rsa_key.p8"";

    public static class PrivateKeyReader {
        public static PrivateKey get(String filename) throws Exception {
            File f = new File(filename);
            FileInputStream fis = new FileInputStream(f);
            DataInputStream dis = new DataInputStream(fis);
            byte[] keyBytes = new byte[(int) f.length()];
            dis.readFully(keyBytes);
            dis.close();

            String encrypted = new String(keyBytes);
            String passphrase = ""Snowflake"";
            encrypted = encrypted.replace(""-----BEGIN ENCRYPTED PRIVATE KEY-----"", """");
            encrypted = encrypted.replace(""-----END ENCRYPTED PRIVATE KEY-----"", """");
            EncryptedPrivateKeyInfo pkInfo = new EncryptedPrivateKeyInfo(Base64.getMimeDecoder().decode(encrypted));
            PBEKeySpec keySpec = new PBEKeySpec(passphrase.toCharArray());
            SecretKeyFactory pbeKeyFactory = SecretKeyFactory.getInstance(pkInfo.getAlgName());
            PKCS8EncodedKeySpec encodedKeySpec = pkInfo.getKeySpec(pbeKeyFactory.generateSecret(keySpec));
            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
            PrivateKey encryptedPrivateKey = keyFactory.generatePrivate(encodedKeySpec);
            return encryptedPrivateKey;
        }
    }



    private static HistoryResponse waitForFilesHistory(final SimpleIngestManager manager, Set&lt;String&gt; files)
            throws Exception {
        ExecutorService service = Executors.newSingleThreadExecutor();

        class GetHistory implements Callable&lt;HistoryResponse&gt; {
            private Set&lt;String&gt; filesWatchList;

            GetHistory(Set&lt;String&gt; files) {
                this.filesWatchList = files;
            }

            String beginMark = null;

            public HistoryResponse call() throws Exception {
                HistoryResponse filesHistory = null;
                while (true) {
                    Thread.sleep(5000);
                    HistoryResponse response = manager.getHistory(null, null, beginMark);
                    if (response.getNextBeginMark() != null) {
                        beginMark = response.getNextBeginMark();
                    }
                    if (response != null &amp;&amp; response.files != null) {
                        for (HistoryResponse.FileEntry entry : response.files) {
                            // if we have a complete file that we've
                            // loaded with the same name..
                            String filename = entry.getPath();
                            if (entry.getPath() != null &amp;&amp; entry.isComplete() &amp;&amp; filesWatchList.contains(filename)) {
                                if (filesHistory == null) {
                                    filesHistory = new HistoryResponse();
                                    filesHistory.setPipe(response.getPipe());
                                }
                                filesHistory.files.add(entry);
                                filesWatchList.remove(filename);
                                // we can return true!
                                if (filesWatchList.isEmpty()) {
                                    return filesHistory;
                                }
                            }
                        }
                    }
                }
            }
        }

        GetHistory historyCaller = new GetHistory(files);
        // fork off waiting for a load to the service
        Future&lt;HistoryResponse&gt; result = service.submit(historyCaller);

        HistoryResponse response = result.get(2, TimeUnit.MINUTES);
        return response;
    }

    public static void main(String[] args) {
        final String account = ""&lt;Snowflake Account Name &gt;"";
        final String hostName = ""&lt;Snowflake Account URL&gt;"";
        final String user = ""&lt;Snowflake Account Username&gt;"";
        final String pipe = ""&lt;Snowflake Pipe Path&gt;"";
        try {
            final long oneHourMillis = 1000 * 3600L;
            String startTime = Instant.ofEpochMilli(System.currentTimeMillis() - 4 * oneHourMillis).toString();
            PrivateKey privateKey = PrivateKeyReader.get(PRIVATE_KEY_FILE);
            //PublicKey publicKey =  PublicKeyReader.get(PUBLIC_KEY_FILE);

            @SuppressWarnings(""deprecation"")
            SimpleIngestManager manager = new SimpleIngestManager(account, user, pipe, privateKey, ""https"", hostName, 443);



            Set&lt;String&gt; files = new TreeSet&lt;&gt;();
            files.add(""&lt;filename&gt;"");

            manager.ingestFiles(manager.wrapFilepaths(files), null);
            HistoryResponse history = waitForFilesHistory(manager, files);
            System.out.println(""Received history response: "" + history.toString());
            String endTime = Instant.ofEpochMilli(System.currentTimeMillis()).toString();

            HistoryRangeResponse historyRangeResponse = manager.getHistoryRange(null, startTime, endTime);
            System.out.println(""Received history range response: "" + historyRangeResponse.toString());

        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
</code></pre>
","46","<sdk><public-key><snowflake-datawarehouse>","0","0","2","2019-10-09 23:32:25","58313516","0","","","","","2019-10-08 08:15:59",""
"55363375","What is the most appropriated and secure way to encrypt files using private/public keys in Node.js","<p>I was wondering in which use case i should use these methods when encrypting and decrypting files in my node.js application.</p>

<h1>The Problem</h1>

<p>I want to encrypt some files in my server, after asking other people, i realized that the most recommended method is encrypt those files (larges) using a private key.</p>

<p>Now, i was looking for the <a href=""https://nodejs.org/api/crypto.html#crypto_crypto_privateencrypt_privatekey_buffer"" rel=""nofollow noreferrer"">docs</a> and saw these methods</p>

<ul>
<li><code>crypto.publicEncrypt(pubKey, buffer)</code></li>
<li><code>crypto.publicDecrypt(pubKey, buffer)</code></li>
<li><code>crypto.privateEncrypt(privKey, buffer)</code></li>
<li><code>crypo.privateDecrypt(privKey, buffer)</code></li>
</ul>

<p>this is very confusing because i don't know what of them i must to use now, ahm... i don't know what is the most appropriate way to do this securely.</p>
","<p><strong>tl;dr</strong> encrypt with the public key. Keep your private key safe.</p>

<p>Unfortunately, these methods are poorly named. <code>privateEncrypt</code> should be called something like <code>sign</code> and <code>publicDecrypt</code> should be called something like <code>verify</code>.</p>

<p>When using public-key encryption (also known as asymmetric encryption), one key can be used to write a cipher and the other key can undo that operation. Your public key is potentially known to everyone, and your private key is secret.</p>

<p>If you want to keep something secret, except from the owner of a certain key, you want to encrypt a message with <em>their</em> public key. So if Alice wants to receive encrypted messages, she'll share her public key <code>A_pub</code> and her secret key <code>A_priv</code>, she'll keep to herself.. You'll encrypt your message <code>crypto.publicEncrypt(A_pub, buffer)</code>. She'll then decrypt that message with <code>crypto.privateDecrypt(A_priv, buffer)</code>.</p>

<p>Doing it the other way is known as a <a href=""https://en.wikipedia.org/wiki/Digital_signature"" rel=""nofollow noreferrer""><strong>digitial signature</strong></a>. </p>
","46","<node.js><encryption><public-key-encryption><private-key><public-key>","2","2","1","2019-03-26 17:58:53","","1","","6885387","","2019-03-26 17:50:11","2019-03-26 17:48:00",""
"25550316","What is the best way to implement public key authentication in my automated root password change script?","<p>Here are some details about my setup...</p>

<p>Current environment:</p>

<ul>
<li>40+ *nix systems managed by 6 admins</li>
<li>Highly secure, closed network (no internet access)</li>
<li>Regularly audited (all account passwords must be changed every 90 days)</li>
</ul>

<p>Current procedures:</p>

<ul>
<li>Each administrator has a personal account with sudo access. These admin accounts are managed via Active Directory so password changes are not an issue</li>
<li>Root account is also active for specific circumstances (i.e. admin account is locked out)</li>
<li>When it comes time to change the root passwords, an admin will do so by SSHing into each system (40+)</li>
</ul>

<p>I want to write a script to make the root password changing process more efficient and everything I've read indicates that the most secure way to go about it is by using public key authentication. So my question is: If I log in as root to SYSTEM_1 and set up the public/private key pairs between that system and SYSTEM_2, SYSTEM_3, etc, does that mean I will only be able to run the script from SYSTEM_1? Is this even a good idea security wise? Are there any other ways to script this that I am missing?</p>
","<p>You can use RSA Authentication and expect script</p>

<p>Let's say you are executing expect script on system 1, create public-private key pair and store public key on all the other systems you have to login (system 2.....n) </p>

<p>Now you wont need a password when you ssh into those system.</p>

<p>Now you can use expect script to change password for either root or any other user. 
NOTE : usually expect interpreter is at     /usr/bin/expect
you can find this my doing ""whereis expect""</p>

<p>I hope it helps.</p>

<p>Try to use this algorithm and post your results. </p>
","45","<linux><ssh><public-key>","0","0","1","2014-08-28 18:18:49","","3","","","","","2014-08-28 13:41:39",""
"56975488","RSA public key generation failure: ""error:0c0000be:ASN.1 encoding routines:OPENSSL_internal:WRONG_TAG""","<p>I have a method which should generate RSA public key:</p>

<pre><code>import android.util.Base64;
import java.io.IOException;
import java.security.KeyFactory;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;

...

private PublicKey generatePublicKey() throws IOException {
    try {
        String encodedPublicKey = ""TUl...QUI=""; // real content is hidden
        byte[] decodedKey = Base64.decode(encodedPublicKey, Base64.DEFAULT);
        KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
        X509EncodedKeySpec keySpec = new X509EncodedKeySpec(decodedKey);
        return keyFactory.generatePublic(keySpec);
    } catch (InvalidKeySpecException e) {
        String msg = ""Invalid key specification: "" + e;
        throw new IOException(msg);
    }
}
</code></pre>

<p>But it throws an exception during execution of the last statement in try-block:</p>

<blockquote>
  <p>InvalidKeySpecException: java.lang.RuntimeException:
  error:0c0000be:ASN.1 encoding routines:OPENSSL_internal:WRONG_TAG</p>
</blockquote>

<p>What is wrong here?</p>

<p>You can try to debug with the following <code>encodedPublicKey</code>:</p>

<blockquote>
  <p>TUlJQkNnS0NBUUVBNjFCam1mWEdFdldtZWduQkdTdVMrclU5c29VZzJGbk9EdmEzMkQxQXFod2R6aXdISU5GYQpEMU1WbGNyWUc2WFJLZmtjeG5hWEdmRkRXSExFdk5CU0VWQ2dKanRIQUdaSW01R0wvS0E4NktEcC9Dd0RGTVN3Cmx1b3djWHdEd295aW5tZU9ZOWVLeWg2YVk3MnhKaDdub0xCQnExTjBiV2kxZTJpKzgzdHhPQ2c0eVYyb1ZYaEIKbzhwWUVKOExUM2VsNlNteG9sM0Mxb0ZNVmR3UGdjMHZUbDI1WHVjTWNHL0FMRS9LTlk2cHFDMkFRNlIyRVJsVgpnUGlVV09QYXRWa3Q3K0JzM2g1UmFteGg3WGpCT1hldWxtQ3BHU3luWE5jcFovMDYrdm9mR2kvMk1scFFaTmhICkFvOGVheU1wNkZjdk51Y0lwVW5kbzFYOGRLTXYzWTI2WlFJREFRQUI=</p>
</blockquote>
","","45","<android><rsa><public-key>","0","","0","2019-07-10 17:23:31","","2","","816533","","2019-07-10 17:23:31","2019-07-10 17:05:07",""
"48851992","Jenkins ssh to other servers","<p>I have a Jenkins setup and it is using a ssh to login to other servers to perform some actions that cannot be performed otherwise or via any other Jenkins plugin.<br><br>
Now the problem is that the machines to be ssh'd are running on spot instances on AWS and turn off randomly. This termination can be handled to bring the machine up, but as soon as the machine comes up, it's public and private keys also change.<br><br>
Is there any way possible through which I can skip the hassle of copying the public key of Jenkins into these new instances manually to keep my jobs functional?</p>
","","45","<amazon-web-services><jenkins><ssh><connect><public-key>","0","","0","2018-02-18 13:04:12","","4","","","","","2018-02-18 13:04:12",""
"56298281","How does API authentication works with only public key on javascript?","<p>English is not my first language. I'll do my best to explain my self.</p>

<hr>

<p>I am creating an API to be used by clients via Javascript. The client should include on his website something like this:</p>

<pre><code>&lt;script&gt;
    var my_api = { 
        public_key: ""123456""
    };
&lt;/script&gt;
&lt;script async src=""https://api.example.com/v1/init.js""&gt;&lt;/script&gt;
</code></pre>

<p>So... how can I use a Public Key to verify the client's website?</p>

<p>I know I can get the referer and compare it in with the key on my database, but:</p>

<p>(a) If the referer may be faked, a public key won't be useful because is already public </p>

<p>And (b) if the referer can't be faked, Why would I use a public key? Is not enougth with the referer? </p>

<p>I can't ask the client to encrypt something to varify if he have the right key if anybody can knows the key... </p>

<p>I have only created APIs with both private and public key (or only private) in the past.</p>

<p>Finally, I want it all be installed on client's website by copy/pasting few lines of JS code (that's why I want only use public key). </p>

<p>I know it is possible because that's how Google Ads works, I just need help to figure out the way.</p>

<hr>

<p>Note: I searched for other topic on the forum but I couldn't find any answer, just thing related the SSH and nodeJS. I am developing a simple API with PHP and pure JS.</p>
","<p>The problem that you might run into with putting the api key on their website is that it could be viewed by anyone and used. Use a <code>Process</code> environment variable on the system they are using to host their site. You can use this resource for information: <a href=""https://hackernoon.com/how-to-use-environment-variables-keep-your-secret-keys-safe-secure-8b1a7877d69c"" rel=""nofollow noreferrer"">https://hackernoon.com/how-to-use-environment-variables-keep-your-secret-keys-safe-secure-8b1a7877d69c</a></p>
","45","<javascript><api><public-key>","2","0","1","2019-05-24 20:16:17","","5","","","","","2019-05-24 19:01:07",""
"10224001","Same public key with new assembly","<p>Is it possible to generate the same public key for a new assembly as a previous one occupied? We have a collection of controls that need to be migrated to Visual Studio 2010, and the upgrade process from 2008 to 2010 keeps on breaking, so was thinking of re-writing the assemblies, but we need to retain the public key tokens?</p>
","<p>Yes, it's possible (use the same key.snk during build). Is it a good idea? As far as I understand it, you should only share the same public key if you feel comfortable with both assemblies sharing the same security context.</p>
","44","<.net><assemblies><public-key>","1","0","1","2012-12-10 14:37:59","","0","","","","","2012-04-19 08:06:18",""
"25422544","How to get the value between different classes in android","<p>everyone.</p>

<p>In my application, there were one public string variable (route_directory) and two button(downloadFolderButton,button_import_csv ).</p>

<p>downloadFolderButton will be pressed first and get data from database. The data will be put into string route_directory.
button_import_csv will be pressed afterwards. It will get route_directory to perform other function.
The following is my code(Some logic is omitted). However, the eclipse consider the route_directory in second buttion was a undefined class.</p>

<pre><code>import class_1...
import class_2...

public class project extends Activity{
public String A;
public void onCreate(Bundle savedInstanceState){
Button downloadFolderButton = (Button) findViewById(R.id.button_download_folder_id);
    downloadFolderButton.setOnClickListener(new View.OnClickListener()
    {
        public void onClick(View v) 
        {
            Cursor cur=db.rawQuery(""SELECT route as _id,ftp_server_ip,ftp_folder,csv_local_folder,upload_folder,download_folder FROM pda WHERE default_route =?"",new String [] {""Y""});
            if (cur.moveToFirst()){
                default_route = cur.getString(cur.getColumnIndex(""_id""));
                ftp_server_ip = cur.getString(cur.getColumnIndex(""ftp_server_ip""));
                ftp_folder = cur.getString(cur.getColumnIndex(""ftp_folder""));
                csv_local_folder = cur.getString(cur.getColumnIndex(""csv_local_folder""));
                upload_folder =  cur.getString(cur.getColumnIndex(""upload_folder""));
                download_folder = cur.getString(cur.getColumnIndex(""download_folder""));

                File directory = Environment.getExternalStorageDirectory();


                route_folder= directory.getPath()+csv_local_folder+""/""+default_route;
                File route_directory = new File(route_folder);

                DeleteRecursive(route_directory);

                route_directory.mkdir();


                Intent intent = new Intent();
                intent.setAction(Intent.ACTION_PICK);

                Uri ftpUri = Uri.parse(""ftp://""+ftp_server_ip);
                intent.setDataAndType(ftpUri, ""vnd.android.cursor.dir/lysesoft.andftp.uri"");
                intent.putExtra(""ftp_username"", ""oracle9i"");
                intent.putExtra(""ftp_password"", ""liaixlau"");
                intent.putExtra(""ftp_pasv"", ""true"");
                intent.putExtra(""command_type"", ""download"");
                intent.putExtra(""progress_title"", ""Downloading folder ..."");
                intent.putExtra(""remote_file1"", ftp_folder);        
                intent.putExtra(""local_folder"", route_folder);
                startActivityForResult(intent, DOWNLOAD_FOLDER_REQUEST);
            }
            cur.close();

        }
    }); 

    Button button_import_csv = (Button) findViewById(R.id.button_import);
    button_import_csv.setOnClickListener(new View.OnClickListener(){
        public void onClick(View v){

            db.delete(tableName[0], null, null );
            db.delete(tableName[1], null, null );
            db.delete(tableName[2], null, null );
            db.delete(tableName[3], null, null );
            db.delete(tableName[4], null, null );
            db.delete(tableName[5], null, null );
            db.delete(tableName[6], null, null );
            db.delete(tableName[7], null, null );
            db.delete(tableName[8], null, null );
            db.delete(tableName[9], null, null );
            db.delete(tableName[10], null, null );
            db.delete(tableName[11], null, null );
            db.delete(tableName[12], null, null );
            db.delete(tableName[13], null, null );
            db.delete(tableName[14], null, null );
            db.delete(tableName[15], null, null );
            db.delete(tableName[16], null, null );
            db.delete(tableName[17], null, null );
            db.delete(tableName[18], null, null );
            db.delete(tableName[19], null, null );

            try{

                File[] csvfile = route_directory.listFiles();
                csvfile_string = Arrays.toString(csvfile);

                Log.d(""Importcsv"",csvfile_string);


                for(int j=0;j&lt;20;j++){

                    InputStreamReader isr = new InputStreamReader(new FileInputStream(csvfile[j]),""BIG5"");

                    BufferedReader buffer = new BufferedReader(isr);
                    ContentValues contentValues=new ContentValues();
                    String line = buffer.readLine();            //read first line to get the column
                    String[] cols = line.split(""\t"");           

                    while ((line = buffer.readLine()) != null) {
                        String[] str = line.split(""\t"");
                        for (int i = 0; i &lt; cols.length; i++) {
                            str[i] = str[i].replaceAll(""\"""", """");
                            contentValues.put(cols[i], str[i]);
                            Log.d(""ice"",cols[i] + ""= "" + str[i]);
                        }
                        ret = db.insert(tableName[j], null, contentValues);
                        }
                    buffer.close();
                    }
                }catch (IOException e){

            }

        }
    });
}
</code></pre>
","<p>You have <code>route_directory</code> defined in an anonymous inner class (for button <code>dowloadFolderButton</code>'s <code>onClickListener.onClick()</code>. If you were to define it as a private variable in the Activity you will have visiblity to it in both onClick() functions.</p>
","44","<java><android><public-key>","-1","0","1","2014-08-21 09:26:02","","4","","","","","2014-08-21 09:16:36",""
"54934168","How to calculate a signature with uECC?","<p>I've already tried to use the example in <code>micro-ecc/test_ecdsa.c</code> (<a href=""https://github.com/kmackay/micro-ecc/blob/master/test/test_ecdsa.c"" rel=""nofollow noreferrer"">micro-ecc</a>). My platform is a stm32 nucleo board. I can create a key pair, but the resulting signature is 64 Bytes of zero values.</p>

<pre><code>uint8_t private[32] = {0};
uint8_t public[64] = {0};
uint8_t hash[32] = {0};
uint8_t sig[64] = {0};
const struct uECC_Curve_t * curve = uECC_secp256r1();
uECC_make_key(public, private, curve);
memcpy(hash, public, sizeof(hash));
uECC_sign(private, hash, sizeof(hash), sig, curve);
uECC_verify(public, hash, sizeof(hash), sig, curve);
</code></pre>

<p>Maybe someone has a solution for this. Thank you very much. I run this code on a windows system.</p>
","","44","<c><digital-signature><private-key><public-key>","0","","0","2019-02-28 20:59:17","","0","","","","","2019-02-28 20:59:17",""
"24332297","Generating and Verifying Digital Certificates in J2ME Environment","<p>I developed a secure SMS-exchange application that uses RSA (1024-bit) for session key exchange and Twofish (128bit) for SMS encryption. I used Bouncy Castle API. At this point, I need the application to be able to verify (other) users’ public key. I want this done by verification of users’ X. 509 digital certificate as in regular PKI. How do I go about generating an X.509 digital certificate that can be used on mobile phones (on the j2me application)?  </p>
","","44","<authentication><java-me><x509certificate><public-key><digital-certificate>","1","","0","2014-06-20 17:04:00","","0","","","","","2014-06-20 17:04:00",""
"30096206","Encrypt username and message with public key aes-256","<p>I want to encrypt both username and a message with my public key (pubk) with aes-256. I have a code in java, but I think it is incorrect in the first line</p>

<pre><code>String str=message+username;
byte[] byte1= str.getBytes(""UTF8"");
byte[] byte2= encrypt(pubk, byte1);

public byte[] encrypt(PublicKey key, byte[] plaintext)
{
Cipher cipher = Cipher.getInstance(""AES"");   
cipher.init(Cipher.ENCRYPT_MODE, key);  
return cipher.doFinal(plaintext);
}
</code></pre>
","","43","<java><encryption><aes><public-key>","0","","0","2015-05-07 11:55:50","","4","2","487781","","2015-05-07 11:55:50","2015-05-07 08:50:54","2015-05-07 10:18:58"
"51577433","Unable to push project from local to git repository set up in AWS : Permission denied (publickey)","<p>I am new to AWS and followed a tutorial to set up git in aws and the push my local files into it. I have a Key with me with .pem extension which got generated while I was creating the instance. 
I have added the remote repository like this:
<code>git remote add production ssh://root@35.154.37.131/var/repo/site.git</code></p>

<p>after this when I tried to push into the repository I got:</p>

<pre><code> $ git push production master
Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>I googled but not able to follow the solutions. 
However, I could ssh to my instance using:</p>

<pre><code>ssh -i wexpert_instance_2.pem ubuntu@ec2-35-154-37-131.ap-south-1.compute.amazonaws.com
</code></pre>

<p>please help.</p>
","<blockquote>
  <p>I tried doing git remote add production ssh://ubuntu@ec2-35-154-37-131.ap-south-1.compute.amazonaws.com/var/repos/site.git</p>
</blockquote>

<p>That is expected, because SSH will look for your key in <code>~/.ssh/id_rsa</code> by default.</p>

<p>Since you don't have a default key, you need to define a ~/.ssh/config file (chmod 644), with:</p>

<pre><code>Host myaws
Hostname ec2-35-154-37-131.ap-south-1.compute.amazonaws.com
User ubuntu
IdentityFile /full/path/to/wexpert_instance_2.pem
</code></pre>

<p>Then:</p>

<pre><code>git remote set-url production myaws:/var/repo/site.git
</code></pre>
","41","<git><laravel><amazon-web-services><public-key>","1","0","1","2018-07-29 07:00:39","","5","1","","","","2018-07-29 05:13:55",""
"56419381","JWS kid header needed before reading JWS headers with JJWT","<p>the API I am building receives JWS tokens. I want to ask from clients to set the kid header so I can provide for key rotation. However, JJWT understandably doesn't allow me to read the kid header before I provide the public key for validation:</p>

<p><code>A signing key must be specified if the specified JWT is digitally signed</code></p>

<p>But I need the kid header to select the right 'signing' key in the first place. Bit of a chicken and egg problem. How should I approach this? Do I just ask my clients to provide the kid value both in the JWS header and as a normal HTTP header?</p>
","<p>Ah, heck, already found it. JJWT uses a SigningKeyResolver for this particular case. It allows programmers to inspect headers or claims if these are needed to determine the right key to use. More here: </p>

<p><a href=""https://github.com/jwtk/jjwt#jws-read-key-resolver"" rel=""nofollow noreferrer"">https://github.com/jwtk/jjwt#jws-read-key-resolver</a></p>
","41","<jwt><public-key><jjwt>","0","1","1","2019-06-02 23:02:18","","0","","","","","2019-06-02 22:27:20",""
"47595607","How to verify whether I am really chatting with my friend using GPG and his public key?","<p>I am chatting with my friend via Skype chat and I want to know whether it is really my friend Bob on the other side. I have Bob's public key and I am 100% sure that this is real Bob's public key. How can I verify that this is really Bob who is chatting with me?</p>

<p><strong>a]</strong> I will ask the guy to send me a file signed by him. Then I will verify the signature.</p>

<p><strong>b]</strong> I will send the guy a file signed by real Bob's public key and ask him to verify the file.</p>

<p><strong>c]</strong> I will send the guy a file and ask him to sign it. Then I will verify his signature.</p>

<p>I think option A] makes sense. Am I correct? This is just a hypothetical situation.</p>
","<p>I would suggest the following:</p>

<p>Your ""friends"" can encrypt messages using GPG:</p>

<pre><code>gpg --encrypt --sign --armor -r your-user-id some-message.txt
</code></pre>

<p>This will encrypt <code>some-message.txt</code> using your public key (<code>your-user-id</code>) and signs it with their own private key to guarantee that it is coming from them.</p>

<p>Provided you have already added their public key, when you receive the message, simply call GPG on the message file:</p>

<pre><code>gpg some-message.txt
</code></pre>
","41","<gnupg><public-key><public-key-exchange>","1","0","1","2017-12-01 15:02:17","47596114","3","","5868985","","2017-12-01 14:50:20","2017-12-01 14:32:20",""
"58361756","How to validate a signature in Java if the public key's algorithm is EC?","<p>Given an X509 certificate object of a person. (The object's type is sun.security.x509.X509CertImpl). This person signed a String with his private key. Given the signature that was made by this person, when he signed the above mentioned String object.</p>

<p>My task is to verify this signature, but have difficulties with it.</p>

<p>When I try to verify the signature with the below code:</p>

<pre><code>    ...
    X509Certificate x509Certificate = getCertificate(certificate);

    Signature signature = Signature.getInstance(""SHA256withECDSA"");

    signature.initVerify(x509Certificate.getPublicKey());

    signature.update(unsignedData);
    boolean bool = signature.verify(signatureToVerify);
    System.out.println(""The signature is "" + (bool ? """" : ""NOT"") + "" valid"");
</code></pre>

<p>I get <code>java.security.SignatureException: Could not verify signature</code></p>

<p>Do you have an idea, how can I make it working?</p>

<p><strong>Edited:</strong>
At the end, I managed to make it working, but do not understand the reason yet:
Before passing the signature to the verify method, i needed to do the following modification on it:</p>

<pre><code>    byte[] rBytes = Arrays.copyOfRange(signatureHash, 0, 32);
    byte[] sBytes = Arrays.copyOfRange(signatureHash, 32, 64);

    BigInteger r = new BigInteger(1, rBytes);
    BigInteger s = new BigInteger(1, sBytes);

    ASN1Integer asn1R = new ASN1Integer(r);
    ASN1Integer asn1S = new ASN1Integer(s);

    DERSequence seq = new DERSequence(new ASN1Integer[]{asn1R, asn1S});
    byte[] signatureToVerify2 = seq.getEncoded();
    // verifying the signatureToVerify2 instead of the original brings success
    boolean bool = signature.verify(signatureToVerify2);
</code></pre>
","<p>Here is a (semi)working app for further reference that verifies a signature, when ECDSA is involved in the story:</p>

<pre><code>import org.bouncycastle.asn1.ASN1Integer;
import org.bouncycastle.asn1.DERSequence;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.Signature;
import java.security.SignatureException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.Arrays;

public class SignatureTest {

    public static void main(String[] args) throws CertificateException, InvalidKeyException, SignatureException, NoSuchAlgorithmException, IOException {
        byte[] certificateAsByteArray = ...;
        byte[] dataToVerifyAsByteArray = ...;
        byte[] signatureHashAsByteArray = ...;

        CertificateFactory certFactory = CertificateFactory.getInstance(""X.509"");
        InputStream in = new ByteArrayInputStream(certificateBytes);
        X509Certificate x509Certificate = (X509Certificate) certFactory.generateCertificate(in);

        Signature signature = Signature.getInstance(""SHA256withECDSA"");

        signature.initVerify(x509Certificate.getPublicKey());

        signature.update(dataToVerifyAsHexaString);

        byte[] rBytes = Arrays.copyOfRange(signatureHash, 0, 32);
        byte[] sBytes = Arrays.copyOfRange(signatureHash, 32, 64);

        ASN1Integer asn1R = new ASN1Integer(rBytes);
        ASN1Integer asn1S = new ASN1Integer(sBytes);

        DERSequence seq = new DERSequence(new ASN1Integer[] {asn1R, asn1S});

        boolean isSignatureOK = signature.verify(seq.getEncoded());

        System.out.println(""The signature is "" + (isSignatureOK ? """" : ""NOT "") + ""VALID"");
    }
}
</code></pre>
","40","<java><signature><public-key><elliptic-curve><ecdsa>","1","0","1","2019-10-14 13:47:57","58378193","9","","1203728","","2019-10-14 13:30:42","2019-10-13 08:19:00",""
"57043669","Bouncy Castle - how to get Public Key Info from JceOpenSSLPKCS8DecryptorProviderBuilder","<p>I have the following code to extract Private Key</p>

<pre><code>    PEMParser parser = new PEMParser(new InputStreamReader(new ByteArrayInputStream(decoded)));
    Object object = parser.readObject();
    PEMDecryptorProvider provider = new JcePEMDecryptorProviderBuilder()
            .build(props.getProperty(KeytoolFlags.KEYPASS.name()).toCharArray());

    JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(BouncyCastleProvider.PROVIDER_NAME);
    if (object instanceof PEMEncryptedKeyPair) {
        KeyPair pair = converter.getKeyPair(((PEMEncryptedKeyPair) object).decryptKeyPair(provider));
        return loadPublic ? pair.getPublic() : pair.getPrivate();
    } else if (object instanceof PEMKeyPair) {
        return loadPublic ? converter.getPublicKey(((PEMKeyPair) (object)).getPublicKeyInfo())
                : converter.getPrivateKey(((PEMKeyPair) (object)).getPrivateKeyInfo());
    } else {
        InputDecryptorProvider p2 = new JceOpenSSLPKCS8DecryptorProviderBuilder()
                .setProvider(BouncyCastleProvider.PROVIDER_NAME)
                .build(props.getProperty(KeytoolFlags.KEYPASS.name()).toCharArray());
        return converter.getPrivateKey(((PKCS8EncryptedPrivateKeyInfo) object).decryptPrivateKeyInfo(p2));
    }
</code></pre>

<p>I would like to get the Public Key from converter when it's <code>JceOpenSSLPKCS8DecryptorProviderBuilder</code>. Is there any way?</p>

<p>Thanks,</p>
","<p>The simplest way, although it feels rather ugly to me, is to convert the private key 'back' to one of OpenSSL's 'legacy' forms, which <code>PEMParser</code> is then able to turn into a <code>PEMKeyPair</code> with both halves, from which the public can be selected. Otherwise, the method must be tailored depending on the key algorithm aka type, but can be more efficient which I like better. Here are both options for your consideration:</p>

<pre><code>public static void SO57043669PKCS8_Public_BC (String[] args) throws Exception {
    Object p8e = new PEMParser (new FileReader (args[0])).readObject();
    // for PKCS8-encrypted result is org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo 
    PrivateKeyInfo p8i = ((PKCS8EncryptedPrivateKeyInfo)p8e).decryptPrivateKeyInfo(
            new JceOpenSSLPKCS8DecryptorProviderBuilder().build(args[1].toCharArray()) );
    // or get org.bouncycastle.asn1.pkcs.PrivateKeyInfo directly from PEMParser for PKCS8-clear
    PublicKey pub = null;
    if( args.length&gt;=3 ){ // the simple way:
        PrivateKey prv = new JcaPEMKeyConverter().getPrivateKey(p8i);
        PemObject old = new JcaMiscPEMGenerator (prv,null).generate();
        StringWriter w1 = new StringWriter(); 
        PemWriter w2 = new PemWriter(w1);
        w2.writeObject(old); w2.close();
        Object pair = new PEMParser(new StringReader(w1.toString())).readObject();
        pub = new JcaPEMKeyConverter().getKeyPair((PEMKeyPair)pair).getPublic();
    }else{
        ASN1ObjectIdentifier id = p8i.getPrivateKeyAlgorithm().getAlgorithm();
        PKCS8EncodedKeySpec p8s = new PKCS8EncodedKeySpec (p8i.getEncoded());
        if( id.equals(PKCSObjectIdentifiers.rsaEncryption) ){
            // the standard PKCS1 private key format for RSA redundantly includes e
            KeyFactory rfact = KeyFactory.getInstance(""RSA"");
            RSAPrivateCrtKey rprv = (RSAPrivateCrtKey) rfact.generatePrivate(p8s);
            // or JcaPEMKeyConverter.getPrivateKey does the same thing
            pub = /*(RSAPublicKey)*/ rfact.generatePublic(
                    new RSAPublicKeySpec (rprv.getModulus(), rprv.getPublicExponent()));
        }else if( id.equals(X9ObjectIdentifiers.id_dsa) ){
            // the apparently ad-hoc format OpenSSL uses for DSA does not include y but it can be computed
            KeyFactory dfact = KeyFactory.getInstance(""DSA"");
            DSAPrivateKey dprv = (DSAPrivateKey) dfact.generatePrivate(p8s);
            // or JcaPEMKeyConverter.getPrivateKey does the same thing
            BigInteger p = dprv.getParams().getP(), q = dprv.getParams().getQ(), g = dprv.getParams().getG();
            pub = /*(DSAPublicKey)*/ dfact.generatePublic (
                    new DSAPublicKeySpec(g.modPow(dprv.getX(),p), p, q, g) );
            // warning: naive computation probably vulnerable to sidechannel attack if any  
        }else if( id.equals(X9ObjectIdentifiers.id_ecPublicKey) ){
            // the SECG SEC1 format for EC private key _in PKCS8 by OpenSSL_ 
            // includes []] BITSTR(Q) (but not [0] params which is already in the PKCS8 algid)
            org.bouncycastle.asn1.sec.ECPrivateKey eprv = org.bouncycastle.asn1.sec.ECPrivateKey.getInstance(p8i.parsePrivateKey());
            byte[] eenc = new SubjectPublicKeyInfo (p8i.getPrivateKeyAlgorithm(), eprv.getPublicKey().getOctets()).getEncoded(); 
            KeyFactory efact = KeyFactory.getInstance(""EC"");
            pub = /*(ECPublicKey)*/ KeyFactory.getInstance(""EC"").generatePublic(new X509EncodedKeySpec(eenc));
            //}else if maybe others ...
        }else throw new Exception (""unknown private key OID "" + id);
    }
    System.out.println (pub.getAlgorithm() + "" "" + pub.getClass().getName());
}
</code></pre>
","40","<java><bouncycastle><public-key>","0","2","1","2019-07-17 06:43:11","","0","","","","","2019-07-15 16:17:16",""
"57641471","Asymetric encryption algorithm which allows to use public and private key for both encryption and decryption","<p>I have the following working asymetric encryption implementation:</p>

<pre><code>private static RSAParameters privateKey;
private static RSAParameters publicKey;

private static void RSA()
{
  var rsa = new RSACryptoServiceProvider();
  privateKey = rsa.ExportParameters(true);
  publicKey = rsa.ExportParameters(false);

  byte[] originalMessage = GenerateRandomData();
  byte[] encryptedMessage = Using(publicKey).Encrypt(originalMessage, false);
  byte[] decryptedMessage = Using(privateKey).Decrypt(encryptedMessage, false);
  Debug.Assert(originalMessage.SequenceEqual(decryptedMessage));
}

private static RSACryptoServiceProvider Using(RSAParameters parameters)
{
  RSACryptoServiceProvider encryptor = new RSACryptoServiceProvider();
  encryptor.ImportParameters(parameters);
  return encryptor;
}

private static byte[] GenerateRandomData()
{
  Random rnd = new Random();
  byte[] originalData = new byte[10];
  rnd.NextBytes(originalData);
  return originalData;
}
</code></pre>

<p>I use this to encrypt data with the recipient's public key [<code>Using(publicKey).Encrypt(originalData)</code>] so that the receiver only can decrypt the data [<code>Using(privateKey).Decrypt(encryptedData)</code>].</p>

<p>Now I want to reuse asymetric encryption for the following use case: The recipient publishes data and everyone who knows the recipient's public key (which is basically everyone in the system, but nobody outside the system e.g. a protection against leaking readable data to the public) can read it. The publisher uses his private key to encrypt and his public key would be used to decrypt:</p>

<pre><code>byte[] originalData = GenerateRandomData();
byte[] publishedData = Using(privateKey).Encrypt(originalData, false);
byte[] retrievedData = Using(publicKey).Decrypt(publishedData, false);
Debug.Assert(originalData.SequenceEqual(retrievedData));
</code></pre>

<p>However this yields a</p>

<pre><code>System.Security.Cryptography.CryptographicException
  HResult=0x8009000D
  Message=Keyset does not exist.
</code></pre>

<p>I do not want to use a different public-private-key-pair for data publishing part, especially in this scenario it means making public a private key. It already sound awkward when typing...</p>

<p>EDIT: <strong>Is there an asymetric encryption contained in .NET framework which allows me to use both keys (public and private) in both directions where if one key is used for encryption only the other one can be used to decrypt?</strong></p>
","<p>RSA signing is not the same as encrypting with the private key.</p>

<p>PKCS#1 v1.5 signature:</p>

<ul>
<li>Hash the content with a chosen algorithm.</li>
<li>Create a DigestInfo value to represent the hash.</li>
<li>Apply padding to make a message almost, but not quite, the size of the modulus (details omitted here).</li>
<li>Apply the RSA primitive with the private key</li>
</ul>

<p>Note that last step doesn’t say “encrypt”.</p>

<p>The RSA classes in .NET do the padding and such for you, so they expose Sign/Verify and Encrypt/Decrypt. You can’t use them for cross purposes, and you can’t use these classes for the RSA primitive (aka “raw RSA”).</p>
","39","<c#><encryption><public-key-encryption><public-key>","0","1","1","2019-08-24 22:58:04","","5","","249988","","2019-08-24 22:58:04","2019-08-24 20:54:28",""
"55771416","How to determine the full private key(d) of RSA from partially exposed private key, public key, and a plain text-cipher sample?","<p>To be exact, I search google and couldn't find a solution for 3 days of the problem I am working with. Suppose we have the following data:</p>

<pre><code>n = 982596486168164533679068138587450785169755353624059289415533430269902156543301980948452346231423154225707198230814993348325199962226568104628565333075845055110102001513777733822186085910101000971046266247429174698114691926560611342709382763139596083197537103114770536908672391590105944592251557906143423217780862508367523890586749066935355289953519893896713070059149756252671523659055578969907046141090712181640128224480409352033671783234281312447922211039322683639827785375953048086752423328929034805397916713370525669627143719501631537708814980908413840526128966499935897121680247985318025315384432533966964970611
e = 775190819167897631176142663411710999205806087066006443944461953857164338723429823393075674707262963522955617554826880616304988501826679958870898278895792058663197079023581172699525499730454631775015710961671445041794828644629497864625721929989036131201919514003587819878166711621561908547096468667207449797364848789764697856316618498498262452131344181751100590894300580042093702563188859707307216778764928603993071688639278368716846438563956083192844147422032192904730022839373187650224028121273760154048735208506631714555638879414307491200334008651297901472141550888866381591119048114628581521511748434670177461179


partial_d = '-95565380254798212446005426258216042596447135211594111758298376905772484520767625755935413800669744238121798572594037451626724012931827766106358351478966798584005019009384238898207884272864530665811386839587882471633582853938828186423489977-9459392793578-40967083934080473816647050888832190567572370521068219500490996231305841427576808669937665219704595531248268617-5599327544524071502796886348357733378359580273401775-675875610000035372696866273647137752244631988192623168740165719-026394435253643-803573379032337236455340563330139187876245576753031434070779821311882343039420232356-695651945321825753034064267619'
# Where '-' indicated that there is a missing digit. ( 8 digits to be exact)

# 1 sample
plaintext = 174596092887654220987999701151903265828974992233780278786639791235060519357446652195813
cipher = 260977107293095133032309663678665608543832656460900996720257468374788017140947614258160916323627264388927881981964653682851857258414365923694922215834257866016746133459164584766333741801333836289264940490770115570246717428812182110996286021561959704431405293135763955578136678340591578529145822533102991723988404068808248644828190915120779197049355084277184754391753499206475581581888976149876298335630332113681471472312538242128023259706503821080332553580167351146645606566285812912942045955359708168832979660560414335437348485330250971110555548644448362107391181731840051573148892882755700853070019719373415171351
</code></pre>

<p>How do I get the full private key?</p>
","","37","<rsa><private-key><public-key><modular-arithmetic>","0","","0","2019-04-20 07:45:00","","6","","","","","2019-04-20 07:45:00",""
"54329837","Problem with decryption of merged (rsaCipher +String)","<p>msg = string + rsa_encryped_result
rsa_encrypt(msg) failed to decrypt when we connect string with rsaResult
include code</p>

<p>we tried to change to base64 instead of String, also use PAD , </p>

<pre><code>class Crypto():


    def __init__(self):
        random_generator = Random.new().read
        self.private_key = RSA.generate(1024, random_generator)
        self.public_key = self.private_key.publickey()

    def get_string_public_key(self):
        return self.public_key.exportKey()

    def decrypt_message(self, message):
        decrypted_message = self.private_key.decrypt(message)
        return decrypted_message

def encrypt_message(message, public_key):
    encrypted_message = public_key.encrypt(message, 32)[0]
    return encrypted_message


def make_public_key(string_key):
    return RSA.importKey(string_key)

bob = Crypto()


first_msg = ""Hello World""
print first_msg + ' - the original'
msg1 = encrypt_message(first_msg, make_public_key(bob.get_string_public_key()))
msg2 = msg1 + ""Hello again""
msg3 = encrypt_message(msg2, make_public_key(bob.get_string_public_key()))
# work ok
print 'simple one \r\n', bob.decrypt_message(msg1)  

print msg2 + ' the second one'
msg3 = bob.decrypt_message(msg2)
# does not work
print 'second one \r\n', msg3  

print msg3.find(""again"")
</code></pre>

<p>we expected to find the string 'again' inside msg3 but we didnt</p>

<pre><code>second one 
w%z�� ����bV�W�T    ?�q
H?�)�9��)0�Ӕk��Ӯ4dK-�CH��!�b�5��d�_������Ð�a2g
����K��_E�n�Wܧlz]y�~�jBY�̐&amp;}\��h���$��WZ��
-1
</code></pre>
","<p>You tried to decrypt msg2 and not msg3 so it fails, msg2 is not a valid rsa encrypted so the decrypt doesnt understand</p>
","37","<python><rsa><public-key><crypt>","-1","1","2","2019-01-27 10:59:35","","0","","3815069","","2019-01-23 14:50:49","2019-01-23 14:47:33",""
"54329837","Problem with decryption of merged (rsaCipher +String)","<p>msg = string + rsa_encryped_result
rsa_encrypt(msg) failed to decrypt when we connect string with rsaResult
include code</p>

<p>we tried to change to base64 instead of String, also use PAD , </p>

<pre><code>class Crypto():


    def __init__(self):
        random_generator = Random.new().read
        self.private_key = RSA.generate(1024, random_generator)
        self.public_key = self.private_key.publickey()

    def get_string_public_key(self):
        return self.public_key.exportKey()

    def decrypt_message(self, message):
        decrypted_message = self.private_key.decrypt(message)
        return decrypted_message

def encrypt_message(message, public_key):
    encrypted_message = public_key.encrypt(message, 32)[0]
    return encrypted_message


def make_public_key(string_key):
    return RSA.importKey(string_key)

bob = Crypto()


first_msg = ""Hello World""
print first_msg + ' - the original'
msg1 = encrypt_message(first_msg, make_public_key(bob.get_string_public_key()))
msg2 = msg1 + ""Hello again""
msg3 = encrypt_message(msg2, make_public_key(bob.get_string_public_key()))
# work ok
print 'simple one \r\n', bob.decrypt_message(msg1)  

print msg2 + ' the second one'
msg3 = bob.decrypt_message(msg2)
# does not work
print 'second one \r\n', msg3  

print msg3.find(""again"")
</code></pre>

<p>we expected to find the string 'again' inside msg3 but we didnt</p>

<pre><code>second one 
w%z�� ����bV�W�T    ?�q
H?�)�9��)0�Ӕk��Ӯ4dK-�CH��!�b�5��d�_������Ð�a2g
����K��_E�n�Wܧlz]y�~�jBY�̐&amp;}\��h���$��WZ��
-1
</code></pre>
","<p>after reading more about RSA i understand that there is no way to do what i want (to wrap messages one on one with different RSA-keys and them unwrap them again).
so i choose another algorithm:
i used RAC4 - a symmetric algorithm to encrypt the messages
i used RSA - to send the RAC4-key over the network 
thanks to all</p>
","37","<python><rsa><public-key><crypt>","-1","0","2","2019-01-27 10:59:35","","0","","3815069","","2019-01-23 14:50:49","2019-01-23 14:47:33",""
"58465375","Is there a way to decrypt S/MIME public key data?","<p>I would like to get the email address and expire date to a S/MIME certificate based on it's public key. Is this aproach even possible? Or am I totally wrong? Can I decrypt the public key to get these kind of data via java?</p>

<p>I searched in google, read the wiki pages and read about an oracle s/mime project. But it doesn't seam like its possible. Are those data only availabe in the csr??</p>

<p>Thanks in advance</p>
","<pre><code>    File file = new File(fileName);
    FileReader fileReader = new FileReader(file);
    PEMParser pemParser = new PEMParser(fileReader);
    X509CertificateHolder caCertificate = (X509CertificateHolder) pemParser.readObject();
</code></pre>
","37","<java><encryption><public-key><smime>","0","0","2","2019-10-19 19:57:03","","2","1","","","","2019-10-19 15:49:47",""
"58465375","Is there a way to decrypt S/MIME public key data?","<p>I would like to get the email address and expire date to a S/MIME certificate based on it's public key. Is this aproach even possible? Or am I totally wrong? Can I decrypt the public key to get these kind of data via java?</p>

<p>I searched in google, read the wiki pages and read about an oracle s/mime project. But it doesn't seam like its possible. Are those data only availabe in the csr??</p>

<p>Thanks in advance</p>
","<p>I'm amazed this isn't a dupe, but I couldn't find a good one. </p>

<p>Although Bouncy is fine and has many features if you want to use it, core Java can handle X.509 certificates since forever. For a cert in a file (or anything that can be accessed as a Stream) in <em>either</em> PEM or DER format (although the javadoc isn't clear on that) all you need is <a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/cert/CertificateFactory.html"" rel=""nofollow noreferrer"">CertificateFactory</a>:</p>

<pre><code>CertificateFactory fact = CertificateFactory.getInstance(""X.509"");

// from a real file
InputStream is = new FileInputStream (""filename"");
Certificate cert = fact.generateCertificate(is);
is.close(); // or use try-resources to do automatically

// from an alternate/custom filesystem, such as a ZIP
Path p = Paths.get(""somespecification""); // or any other creation of a Path
InputStream is = Files.newInputStream(p); // add open options if needed
// same as before

// from the classpath (usually a JAR)
InputStream is = ClassLoader /*or any Class&lt;?&gt; object*/ .getResourceAsStream(""name"");
// same as before

// from a byte[] in memory
InputStream is = new ByteArrayInputStream (bytearray);
// same as before, except don't really need to close

// you get the idea
</code></pre>

<p>Although JCA APIs like this one are defined to allow a lot of extension,  reading an X.509 cert will actually give you not just <code>Certificate</code> but subclass <a href=""https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/security/cert/X509Certificate.html"" rel=""nofollow noreferrer""><code>X509Certificate</code></a> from which <code>.getNotAfter()</code> gives the expiration date-time directly. The email address if present (which isn't required by X.509 certs in general, but should always be the case in a cert used for S/MIME) will usually be an attribute in the subject name, which actually has internal structure that Java doesn't let you get at directly so you need to:</p>

<pre><code>String x500name = ((X509Certificate)cert).getSubjectX500Principal()) .toString();
// simple case: no multivalue RDN, no reserved chars ,+=""&lt;&gt;\;# or extra spaces 
for( String attr : x500name.split("", "") )
  if( attr.startsWith(""EMAILADDRESS="") ) 
    ... use attr.substring(13) ...
// other cases require slightly more complicated parsing 
</code></pre>

<p>Note there is no encryption at all in X.509, and thus no actual decryption, although many people use 'decrypt' to describe anything unfamiliar not an actual cipher.</p>
","37","<java><encryption><public-key><smime>","0","3","2","2019-10-19 19:57:03","","2","1","","","","2019-10-19 15:49:47",""
"50292250","Where to save client's public key and retrieve to encrypt data","<p>I have a public key of customer that I need to use to encrypt credentials and send to the customer to obtain an auth token that I will be using for all further communication with the customer services.</p>

<p>For testing purpose, I saved the public key into a file and I am able to successfully obtain the auth token.</p>

<p>Now, the question is, where do I need to store this key safely. Options that I can think of are web.config as it is not browsable, or keep it in a file. Both seems to be unsafe.</p>

<p>If I keep it in a file, can I save it into windows trusted store? If yes, how can I save it and since in the trusted store, I will have multiple such keys, how I will retrieve this particular key to encrypt the credentials next time when I need to encrypt.</p>

<p>I am using windows machine for production server and .NET to encrypt, just in case it makes difference.</p>
","<p>I think you can encrypt this certificate with another rsa key pair. Save key and encrypted data in different platform. For example save encrypted data in db and save rsa key in file system in protected folder. Protected folder can be user directory which has application user. Encrypt certificate out of the platform with separate tool. Don't save your rsa private key in application system.</p>
","36","<rsa><keystore><public-key-encryption><public-key><encryption-asymmetric>","0","0","1","2018-05-13 14:37:14","","3","","","","","2018-05-11 12:20:28",""
"57058149","JSch: Create public key from private key file","<p>I like to transmit a private key via QR code (best security practices aside) that was created as part of a <code>KeyPair</code> and need to recover the <code>KeyPair</code> afterwards. Thus </p>

<pre><code>JSch jsch = new JSch();
KeyPair keypair = KeyPair.genKeyPair(jsch, KeyPair.RSA, 4096);

ByteArrayOutputStream prvstream = new ByteArrayOutputStream();
keypair.writePrivateKey(prvstream);
prvstream.close();

ByteArrayOutputStream pubstream = new ByteArrayOutputStream();
keypair.writePublicKey(pubstream, null /* key comment */);
pubstream.close();

byte[] prv_data = prvstream.toByteArray();
byte[] pub_data = pubstream.toByteArray();

// prv_data is transferred via QR-Code here

KeyPair keypair2 = KeyPair.load(jsch, prv_data, null);

ByteArrayOutputStream prvstream2 = new ByteArrayOutputStream();
keypair2.writePrivateKey(prvstream2);
prvstream2.close();

ByteArrayOutputStream pubstream2 = new ByteArrayOutputStream();
keypair2.writePublicKey(pubstream2, null /* key comment */));
pubstream2.close();

byte[] prv_data2 = prvstream2.toByteArray();
byte[] pub_data2 = pubstream2.toByteArray();

if (pub_data.equals(pub_data2) {
    // success
} else {
    // we hit failure here every time.
}
</code></pre>
","<p><code>pub_data.equals(pub_data2)</code> does not do what you think. It compares the references, not the array contents. You want to use <code>Arrays.equals(pub_data, pub_data2)</code>.</p>

<p>See <a href=""https://stackoverflow.com/q/8777257/850848"">equals vs Arrays.equals in Java</a>.</p>

<hr>

<p>Btw, technically you cannot create <em>a public key from a private key</em>. But as <code>KeyPair.writePrivateKey</code> actually writes <em>a whole key pair</em>, not the private key only, it naturally contains the public key too.</p>
","36","<java><jsch><private-key><public-key>","1","1","1","2019-07-16 14:30:44","57059626","1","1","850848","","2019-07-16 14:30:44","2019-07-16 13:15:21",""
"58608501","How can I verify the JWT token generated by bundle ssl certificate?","<p>There is an IdentityServer4 based Single Sign-On project and it generates a token from SSL certificate. After bundled the SSL certificate with CA and Root certificate I cannot verify the signature of the token. I'm getting a new public key from new bundled SSL with the OpenSSL tool but the new public key does not verify the signature of the token. I don't know how to solve this.</p>

<ul>
<li>I tried to get a new public key from the bundled certificate.</li>
<li>I used the token and public key on jwt.io and the signature is not verified.</li>
<li>I'm temporarily using the jwt.decode method of jsonwebtoken package on NPM.</li>
</ul>

<pre><code>openssl pkcs12 -in &lt;filename&gt;.pfx -clcerts -nokeys -out cert.pem // I used this public key
</code></pre>

<pre class=""lang-js prettyprint-override""><code>jwt.verify(token, publicKey, options); // it's not working. Because public key is not working.
jwt.decode(token); // it's working. But I should verify the token.
</code></pre>
","","36","<node.js><ssl><jwt><identityserver4><public-key>","0","","0","2019-10-29 15:37:23","","0","","11270235","","2019-10-29 15:37:23","2019-10-29 13:36:06",""
"57518021","ADB Public Key Format","<p>I'm trying to implement ADB protocol in C#. When i tried using AUTH(2), the device always says that my signature is wrong by replying AUTH(1) over and over again until i sent AUTH(3) (which will trigger the allow this pc dialog). I have saved the public key to the phone by checking the ""Always allow from this PC"" option on the device.</p>

<p>I am suspecting that my public key format i sent is wrong because seeing the size my implementation sends vs the original ADB's is different. The public keys example below does not use the same private key.</p>

<p>ADB:</p>

<pre><code>000022: Bulk or Interrupt Transfer (DOWN), 2019-08-16 08:23:37,2615937 +0,0000492 (1. Device: SAMSUNG_Android (Galaxy series, misc. (MTP mode)))
Pipe Handle: Control PipeSend 0x2bd bytes to the device
 51 41 41 41 41 45 39 37 36 35 78 52 52 44 4D 45   QAAAAE9765xRRDME
 6B 43 47 59 4F 7A 43 63 72 43 68 71 62 53 73 56   kCGYOzCcrChqbSsV
 6D 32 4A 35 57 46 58 71 4A 78 59 79 4B 41 63 55   m2J5WFXqJxYyKAcU
 2B 51 66 57 6A 57 7A 35 54 78 68 58 32 45 46 43   +QfWjWz5TxhX2EFC
 52 4E 4F 38 55 56 4A 4D 68 49 44 33 49 58 72 47   RNO8UVJMhID3IXrG
 38 49 48 54 77 41 4F 76 6D 78 2F 33 67 4F 41 73   8IHTwAOvmx/3gOAs
 55 4F 53 36 4A 2F 5A 74 43 6C 38 38 35 4E 72 64   UOS6J/ZtCl885Nrd
 67 66 30 63 61 33 36 6E 70 51 62 43 54 42 56 45   gf0ca36npQbCTBVE
 56 59 7A 54 52 49 65 59 4A 63 69 65 78 30 37 4F   VYzTRIeYJciex07O
 77 38 38 51 6A 52 4C 53 76 63 53 62 52 56 6D 72   w88QjRLSvcSbRVmr
 73 78 47 70 32 4C 7A 77 47 69 6E 77 43 4D 48 46   sxGp2LzwGinwCMHF
 45 79 69 64 7A 52 42 2B 73 74 4F 2B 66 67 6D 44   EyidzRB+stO+fgmD
 47 64 50 4D 31 51 74 59 47 73 51 74 65 53 76 54   GdPM1QtYGsQteSvT
 36 79 56 57 66 73 73 70 72 6C 65 33 49 6B 74 45   6yVWfssprle3IktE
 32 53 64 4B 4E 63 62 49 44 57 39 5A 56 67 46 2F   2SdKNcbIDW9ZVgF/
 2B 4B 79 6B 4C 69 43 37 77 4F 72 4B 4E 46 4E 49   +KykLiC7wOrKNFNI
 61 45 4C 4B 52 50 37 33 33 31 73 30 76 67 75 34   aELKRP7331s0vgu4
 57 61 76 6F 39 39 66 79 69 43 66 41 48 65 64 45   Wavo99fyiCfAHedE
 6E 42 45 7A 4B 41 50 52 53 42 36 6A 74 39 6D 34   nBEzKAPRSB6jt9m4
 4B 67 73 4D 4F 54 48 67 45 37 45 7A 53 6D 42 4C   KgsMOTHgE7EzSmBL
 72 64 38 51 31 58 44 34 52 75 77 61 6F 76 37 47   rd8Q1XD4Ruwaov7G
 46 2B 31 52 78 42 44 35 73 61 38 6B 6F 4B 6E 53   F+1RxBD5sa8koKnS
 50 68 6E 75 35 48 78 76 71 57 73 49 78 38 70 54   Phnu5HxvqWsIx8pT
 42 59 51 45 79 2B 57 33 51 71 2F 6E 66 32 6B 46   BYQEy+W3Qq/nf2kF
 70 41 33 61 6D 45 63 2F 53 71 4E 2B 30 46 73 55   pA3amEc/SqN+0FsU
 31 48 71 52 78 64 59 5A 68 68 62 66 58 69 52 70   1HqRxdYZhhbfXiRp
 4B 67 74 4E 70 31 50 43 55 2B 46 2F 55 32 2B 67   KgtNp1PCU+F/U2+g
 64 58 39 6C 68 38 52 31 6C 59 7A 79 38 2F 4A 4C   dX9lh8R1lYzy8/JL
 65 5A 6F 4F 37 34 31 47 34 34 54 75 38 4A 69 4F   eZoO741G44Tu8JiO
 69 59 74 6D 43 32 58 42 39 54 52 51 36 49 74 71   iYtmC2XB9TRQ6Itq
 46 30 36 67 4D 53 32 78 71 6C 50 6B 54 58 4F 6D   F06gMS2xqlPkTXOm
 4E 4B 71 72 31 39 76 4C 79 64 66 34 42 5A 34 62   NKqr19vLydf4BZ4b
 57 53 58 4A 71 54 39 66 2B 54 47 39 75 48 79 56   WSXJqT9f+TG9uHyV
 31 77 35 6E 68 6F 34 44 7A 68 38 6D 65 73 44 55   1w5nho4Dzh8mesDU
 6C 30 2F 71 72 71 48 45 4F 73 57 6C 4B 50 72 57   l0/qrqHEOsWlKPrW
 4F 59 2F 5A 42 41 56 4B 4F 6A 6D 34 5A 57 67 5A   OY/ZBAVKOjm4ZWgZ
 76 71 42 56 61 35 71 57 67 4A 44 68 50 37 37 72   vqBVa5qWgJDhP77r
 44 68 47 69 2B 50 34 4C 57 45 35 31 49 6A 44 44   DhGi+P4LWE51IjDD
 43 48 6F 59 42 4B 4C 6E 5A 4A 41 42 37 55 39 61   CHoYBKLnZJAB7U9a
 44 31 7A 54 4E 52 31 47 42 31 65 58 73 50 35 4D   D1zTNR1GB1eXsP5M
 77 42 66 70 30 34 4C 5A 47 71 77 70 30 52 36 59   wBfp04LZGqwp0R6Y
 4E 31 54 79 4E 4B 5A 47 74 65 71 42 4E 4F 51 37   N1TyNKZGteqBNOQ7
 62 5A 59 76 39 46 55 76 45 76 72 47 66 38 64 62   bZYv9FUvEvrGf8db
 6D 31 73 69 63 77 45 41 41 51 41 3D 00            m1sicwEAAQA=.
</code></pre>

<p>Mine:</p>

<pre><code>000061: Bulk or Interrupt Transfer (DOWN), 2019-08-16 08:27:20,0783520 +0,0001867 (1. Device: SAMSUNG_Android (Galaxy series, misc. (MTP mode)))
Pipe Handle: Control PipeSend 0x15d bytes to the device
 41 51 41 42 70 47 65 58 30 4F 38 79 6A 37 63 6B   AQABpGeX0O8yj7ck
 62 42 68 79 75 75 4B 76 6E 79 4F 59 44 55 49 56   bBhyuuKvnyOYDUIV
 31 66 39 6A 59 4B 52 78 78 6B 38 4D 68 39 38 34   1f9jYKRxxk8Mh984
 4B 7A 2F 75 46 69 55 61 54 47 68 70 59 6A 6D 2F   Kz/uFiUaTGhpYjm/
 7A 79 42 4A 75 5A 68 71 6E 6C 43 34 4A 6E 65 62   zyBJuZhqnlC4Jneb
 75 31 6B 75 79 48 61 4F 69 38 65 71 34 63 6A 4A   u1kuyHaOi8eq4cjJ
 4F 79 62 63 5A 2F 4A 7A 56 43 4B 75 61 78 4D 36   OybcZ/JzVCKuaxM6
 48 58 47 4B 59 70 39 74 47 63 51 6C 59 6F 36 63   HXGKYp9tGcQlYo6c
 64 53 61 53 59 33 50 6D 49 47 38 74 6D 69 56 69   dSaSY3PmIG8tmiVi
 61 62 4C 30 35 56 78 70 51 65 50 48 4E 37 32 2F   abL05VxpQePHN72/
 2B 64 37 75 73 48 36 52 54 41 35 2F 66 58 79 52   +d7usH6RTA5/fXyR
 6B 54 78 33 69 2B 73 36 73 34 35 58 65 50 43 77   kTx3i+s6s45XePCw
 65 32 5A 71 63 4E 44 2F 5A 61 4B 73 73 43 38 6F   e2ZqcND/ZaKssC8o
 4C 74 5A 4F 6A 54 35 4E 6D 44 58 34 4E 30 38 49   LtZOjT5NmDX4N08I
 6C 49 30 71 61 76 46 31 2F 4F 49 64 38 65 4D 70   lI0qavF1/OId8eMp
 35 64 38 4F 71 61 31 48 74 47 70 64 4D 7A 68 43   5d8Oqa1HtGpdMzhC
 47 6B 69 49 2F 33 63 77 6A 48 39 71 61 58 39 5A   GkiI/3cwjH9qaX9Z
 76 4D 38 4F 61 6D 76 6C 76 68 4B 36 44 47 5A 39   vM8OamvlvhK6DGZ9
 62 47 74 61 73 50 76 59 78 46 69 51 73 51 6A 46   bGtasPvYxFiQsQjF
 6B 56 72 79 75 76 6D 6D 43 74 70 61 32 42 2B 4A   kVryuvmmCtpa2B+J
 78 6F 38 6F 54 37 6B 70 4B 31 69 6D 6A 45 73 6E   xo8oT7kpK1imjEsn
 74 7A 6E 44 75 73 49 62 4B 77 3D 3D 00            tznDusIbKw==.
</code></pre>

<p>Here is how i generate the key pair and data signing using BouncyCastle library:</p>

<pre><code>public static string GetBase64Key(AsymmetricKeyParameter key)
{
    var publicKey = (RsaKeyParameters)key;

    using (MemoryStream ms = new MemoryStream())
    {
        byte[] buff = publicKey.Exponent.ToByteArrayUnsigned();
        ms.Write(buff, 0, buff.Length);

        buff = publicKey.Modulus.ToByteArrayUnsigned();
        ms.Write(buff, 0, buff.Length);

        ms.Flush();
        return Convert.ToBase64String(ms.ToArray());
    }
}

public static AsymmetricCipherKeyPair LoadKeyPair(string file)
{
    using (StreamReader reader = new StreamReader(file))
    {
        PemReader pem = new PemReader(reader);
        return pem.ReadObject() as AsymmetricCipherKeyPair;
    }
}

public static void SaveKeyPair(AsymmetricCipherKeyPair pair, string file)
{
    using (StreamWriter writer = new StreamWriter(file))
    {
        PemWriter pem = new PemWriter(writer);
        pem.WriteObject(pair.Private);
        pem.WriteObject(pair.Public);
    }
}

public static AsymmetricCipherKeyPair GenerateKeyPair(int keySize)
{
    CryptoApiRandomGenerator randomGenerator = new CryptoApiRandomGenerator();
    SecureRandom secureRandom = new SecureRandom(randomGenerator);
    var keyGenerationParameters = new KeyGenerationParameters(secureRandom, keySize);
    var keyPairGenerator = new RsaKeyPairGenerator();
    keyPairGenerator.Init(keyGenerationParameters);
    return keyPairGenerator.GenerateKeyPair();
}

public static byte[] SignDataSHA1(byte[] data, AsymmetricKeyParameter privateKey)
{
    ISigner signer = SignerUtilities.GetSigner(""SHA1WITHRSA"");
    signer.Init(true, privateKey);
    signer.BlockUpdate(data, 0, data.Length);
    return signer.GenerateSignature();
}
</code></pre>

<p>And this is how i used those helper functions:</p>

<pre><code>// Initialiizing key pair.
AsymmetricCipherKeyPair pair;

if (File.Exists(RSA_CONTAINER_NAME))
{
    pair = CryptoHelper.LoadKeyPair(RSA_CONTAINER_NAME);
}
else
{
    pair = CryptoHelper.GenerateKeyPair(RSA_KEY_STRENGTH);
    CryptoHelper.SaveKeyPair(pair, RSA_CONTAINER_NAME);
}

// Signing token.
byte[] signedData = CryptoHelper.SignDataSHA1(token, pair.Private);

// Writing data.
Message msg = new Message();
msg.Command = Message.A_AUTH;
msg.Arg0 = 2; // Private key signing.
msg.Data = signedData;
msg.DataLength = signedData.Length;
await SendMessageAsync(device, msg);

// Reading response.
Message reply = await ReadMessageAsync(device);
byte[] replyBody = new byte[reply.DataLength];
await device.ReadAsync(replyBody, 0, replyBody.Length);

if (reply.Command == Message.A_AUTH)
{
    // Sending rsa public key.
    string pem = CryptoHelper.GetBase64Key(pair.Public) + ""\0"";
    byte[] publicKey = Encoding.ASCII.GetBytes(pem);
    msg = new Message();
    msg.Command = Message.A_AUTH;
    msg.Arg0 = 3; // RSAPUBLICKEY
    msg.Data = publicKey;
    msg.DataLength = publicKey.Length;
    await SendMessageAsync(device, msg);

    // Reading response.
    reply = await ReadMessageAsync(device);
    replyBody = new byte[reply.DataLength];
    await device.ReadAsync(replyBody, 0, replyBody.Length);
}

if (reply.Command != Message.A_CNXN)
{
    // Something went wrong.
    throw new Exception(""Authentication error"");
}

// Done.
</code></pre>

<p>Any help would be highly appreciated.</p>

<p>Note: I have completed the steps until i got the token to sign from the device for brevity. I also have tried PEM format (without including the BEGIN and END lines), didn't work either.</p>
","<p>I finally managed to fix my authentication problem. I decided to include pre generated public and private key to my app (not generated automatically anymore). I also installed bouncy castle library for C# to parse private key provided by adb. Public key problem fixed.</p>

<p>Turned out that my signing method is also wrong. Here is the correct one (using bouncy castle):</p>

<pre><code>public static byte[] SignDataSHA1(byte[] data, AsymmetricKeyParameter privateKey)
{
    // Converting bouncy castle key to native csp.
    RSAParameters rsaParam = DotNetUtilities.ToRSAParameters(privateKey as RsaPrivateCrtKeyParameters);

    using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
    {
        rsa.ImportParameters(rsaParam);

        // Signing data.
        return rsa.SignHash(data, CryptoConfig.MapNameToOID(""SHA1""));
    }
}
</code></pre>

<p>I basically just tell the signer that the data already hashed and voila, it worked.</p>
","36","<c#><android><adb><bouncycastle><public-key>","0","0","1","2019-08-16 14:16:09","57526214","0","","5638260","","2019-08-16 05:46:49","2019-08-16 01:44:15",""
"54353118","Verify the integrity of a file downloaded from Apache","<p>I followed instruction on this page to verify the integrity of the download file. The file is a Sqoop installation, but my question is not specific to Sqoop.
<a href=""http://www.apache.org/dyn/closer.lua/sqoop/1.4.7"" rel=""nofollow noreferrer"">http://www.apache.org/dyn/closer.lua/sqoop/1.4.7</a></p>

<p>At the backup site page I downloaded two files - asc file and md5 file.
<a href=""https://www-eu.apache.org/dist/sqoop/1.4.7/"" rel=""nofollow noreferrer"">https://www-eu.apache.org/dist/sqoop/1.4.7/</a></p>

<p>The instruction said I need to download KEYS file, PGP signature file (asc file), or PGP hash file (md5). So I think for this particular download there is no KEYS file?</p>

<p>I used the following command in CentOS, verifying the file with hash.</p>

<p>gpg --print-md MD5 sqoop-1.4.7.bin__hadoop-2.6.0.tar.gz</p>

<p>I got the hash value, which matches to the downloaded md5 file by characters, but NOT by case. 
So <strong>question #1</strong>: Is PGP Hash verification case-insensitive?</p>

<p>In addition, <strong>Question #2</strong>: because there is no KEYS file to download, how do I use the asc file to verify file integrity? I tried the command on the instruction page but none of them worked for me.</p>
","","35","<apache><hash><public-key><pgp><integrity>","0","","0","2019-01-24 18:21:44","","2","1","","","","2019-01-24 18:21:44",""
"58508484","get bitcoin cash address from public key, using bitcoin-abc","<p>hey i am using <a href=""https://github.com/Bitcoin-ABC/bitcoin-abc"" rel=""nofollow noreferrer"">https://github.com/Bitcoin-ABC/bitcoin-abc</a> and trying to get bch adress form ecdsa public key.</p>

<p>I have this compressed public key:</p>

<pre><code>     publickKey = ""02c0fe3501b514b1b2136b4d923de0907314a7c92499fd29a0cb7cf9f731711a19""
</code></pre>

<p>This is its bitcoin address: ""39n8cpkeHhJDzhTVkboagHMbr9WYSLv2Yk""</p>

<p>And according to <a href=""https://cashaddr.bitcoincash.org/"" rel=""nofollow noreferrer"">https://cashaddr.bitcoincash.org/</a> this is its bitcoin-cash address: ""bitcoincash:ppvt3t9zkp3flgvgunp0wpp6l9t9tc85kvhtg5zkvr""</p>

<p>i tried to get the bch address like this:</p>

<pre><code>    const auto netParams = bCreateChainParams(bCBaseChainParams::MAIN);
    CTxDestination dst = CKeyID(uint160S(publickKey));
    std::string encoded = EncodeCashAddr(dst, *netParams);
</code></pre>

<p>and i get different bitcoincash address (and not the one above)</p>

<p>i also tried:</p>

<pre><code>    std::vector&lt;uint8_t&gt; hashVector = std::vector&lt;uint8_t&gt;(uncompressKey(publickKey));
    bCashAddrContent keyContent{PUBKEY_TYPE, hashVector};
    string encoded = EncodeCashAddr(""bitcoincash"", keyContent);
</code></pre>

<p>when uncompressKey function uncompressing the ecdsa key and removes the headres from it.</p>

<p>i also tried with SCRIPT_TYPE instead of PUBKEY_TYPE, yet i dont get the right address....</p>

<p>i also cant find any example code</p>

<p>any idea?</p>
","<p>i succeeded to get to the Compressed  Bitcoin Cash Address:</p>

<pre><code>CPubKey cPubKey = CPubKey(hash.begin(), hash.end()); 
auto dst = GetDestinationForKey(cPubKey, OutputType::LEGACY); 
std::string encoded = EncodeCashAddr(dst, *netParams);
</code></pre>

<p>when ""hash"" is std::vector of the compressed public key (66 characters) and ""encoded"" is Bitcoin Cash Address Compressed</p>

<p>if someone knows how to get the regular address (uncompressed) please let me know</p>
","35","<public-key><cryptocurrency>","0","0","1","2019-10-24 15:00:06","","1","","","","","2019-10-22 16:16:48",""
"57837846","Why TLS Handshake fails when using a certificate that exposes only public key?","<p>TLS Handshake fails when using a certificate that exposes only public key but it works when use another certificate that exposes private key. when we use certificate that exposes only public key, it gives ""400 Bad Request No required SSL certificate was sent""</p>

<p>One key difference here is that with 2nd certificate that exposes private, we give permission to Network Service, but as 1st certificate is not exposing private key we're not able to give permission to Network Service. Both of these certificates are properly installed in the store.</p>

<p>Following is sample code:</p>

<pre><code>public string TestCall() { 
    try { 
        string url = ""Some URL""; 
        string apiKey = ""Key Information""; 
        string secret = ""Key Secret""; 
        string payload = ""Timestamp"";

        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
        request.Method = ""POST"";
        request.ContentType = ""application/json"";
        request.SendChunked = false;
        request.AllowAutoRedirect = true;
        request.Date = DateTime.UtcNow;

        var keyStore = new X509Store(StoreName.TrustedPeople, StoreLocation.LocalMachine);
        keyStore.Open(OpenFlags.ReadOnly);

        X509Certificate clientCertificate = keyStore.Certificates.Find(X509FindType.FindByThumbprint, ConfigurationManager.AppSettings[""ThumbPrint""], true)[0];
        request.ClientCertificates.Add(clientCertificate);

        var authProvider = new HmacAuthProvider();
        var headers = authProvider.GenerateAuthHeaders(apiKey, secret, payload, url);
        foreach (var header in headers)
        {
            request.Headers.Add(header.Key, header.Value);
        }

        var response = (HttpWebResponse)request.GetResponse();
        var responseString = new StreamReader(response.GetResponseStream()).ReadToEnd();
        return responseString;
    }
    catch (Exception ex)
    {
        return ex.Message + "" "" + ex.StackTrace.ToString();
    }
}
</code></pre>

<p>Any idea what is missing here that certificate without private key is not reaching to the sever.</p>
","<p>Certificate-based authentication requires the possession of private key for a corresponding certificate. You cannot use only public certificate (without having a private key) for client authentication, you need the private key because it is used to sign TLS handshake data.</p>
","35","<c#><x509certificate><tls1.2><client-certificates><public-key>","0","1","1","2019-09-08 09:55:29","57840890","0","1","","","","2019-09-07 22:18:37",""
"53229641","How can I tell if given data is encrypted with a public key","<p>I'm going to re-phrase my question completely so it makes more general sense (and correct my blunder with AES/RSA).</p>

<p>Alice has a large block of data to send to Bob via a local mailbox that isn't secure.  To keep her data from prying eyes, she does this:</p>

<ul>
<li>She generates a random 256-bit key</li>
<li>She uses AES-256 encryption to encrypt the data using the key</li>
<li>She uses Bob's public key to encrypt the key she's used</li>
<li>She puts the encrypted data and the encrypted key in the mailbox addressed to Bob</li>
</ul>

<p>Mike the mailman picks up the mail from the mailbox.  However, he doesn't want to lug the data all the way across the internet to Bob's place if bob isn't going to be able to decrypt it.</p>

<p>The question is, how can Mike ascertain whether the key has actually been encrypted using Bob's public key?</p>

<p>In my application I need to transport sensitive data to a data centre.  To achieve this, I have an upload process that accepts files (that have already been AES-encrypted with a key, then the key is encrypted with the recipient's public key) and sends them to the data centre.  The corresponding private key is held at the data centre and used to decrypt the files on receipt.  This is currently in the design stage so there is some flexibility on the public/private key technology to be used but it's likely to be a C# application that's doing the work.</p>

<p>I would like to protect against uploading files that have NOT been encrypted using the public key (because I may waste significant bandwidth and the receiving application at the datacentre will fail to decrypt them).</p>

<p>So, what I want to know is how can I tell at the sending end whether a file has been encrypted using a given public key?</p>

<p>In a nutshell, I have an encrypted file and a public key.  Has the file been encrypted with that key?</p>

<p>Thanks in advance etc.!</p>
","","34","<encryption><public-key-encryption><private-key><public-key>","0","","0","2018-12-20 08:49:23","","3","0","3208573","","2018-12-20 08:49:23","2018-11-09 16:27:35",""
"57769434","How frequent google changes service account public key?","<p>I'm building a custom authorization flow for API. The API is protected by <code>Firebase Authentication</code>. I have a third party token verification module based on <code>Lcobucci\JWT</code> library in php. We have to verify the <code>kid</code> header of token to confirm the token is issued by firebase. The <code>public key</code> and <code>x509 Certificate</code> is <a href=""https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com"" rel=""nofollow noreferrer"">Here</a> by google. and according to <a href=""https://firebase.google.com/docs/auth/admin/verify-id-tokens"" rel=""nofollow noreferrer"">Firebase Docs</a>,</p>

<blockquote>
  <p>kid header must correspond to one of the public keys listed at <a href=""https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com"" rel=""nofollow noreferrer"">https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com</a> </p>
</blockquote>

<p>I'm storing the public key to avoid the runtime request delay and overhead. So the next step is to refresh the google's public key in my project. But how often google rotates those public keys? is it rotated periodically? if yes then what's the period and rate of change of public keys?</p>
","","34","<firebase><firebase-authentication><jwt><public-key><service-accounts>","0","","0","2019-09-03 10:05:45","","0","","","","","2019-09-03 10:05:45",""
"22939710","Why public certificates are stored in a keystore?","<p>If certificates are public anyways, why are they stored in a password-protected keystore?</p>

<p>Is this a must, or a means to relate the public key to the private key?</p>
","<p>There a few reasons for that:</p>

<p>First, in terms of implementation it is indeed a means to relate a private key to a public key. If a private key if compromised, the whole certificate is compromised.</p>

<p>Second, 
the knowledge of ""who we trust"" is valuable.</p>

<p>Third,
a random user shouldn't be able to add new certificates to the trust store.</p>
","32","<certificate><keystore><public-key>","0","0","1","2014-04-27 07:23:37","23320553","0","0","321731","","2014-04-16 16:24:05","2014-04-08 14:14:08",""
"24555923","Storing public keys of Customers","<p>I have an application in which I allow my customers to register. They will be providing me their public key. I will have to use that to sign some messages and then use the same to decrypt the message from the client.</p>

<p>My application will have to store the public keys in any environment like Amazon, Azure, any Windows Server.</p>

<p>What will be the best practice to store the public keys of my customers.</p>

<p><strong>EDIT</strong>
This is basically used to sign the JWT messages, my customers will sign the messages and I will use their public key to validate the authenticity of the messages.</p>
","","32","<azure><amazon><public-key><client-certificates>","1","","0","2014-07-07 05:20:09","","3","","541917","","2014-07-07 05:20:09","2014-07-03 14:06:24",""
"56624272","RSA Digital Signature System is failing for larger Prime numbers","<p>I implemented RSA cryptosystem to create a simple digital signature system. It is for freeCodeCamp's upcoming Cryptography curriculum.</p>

<p>The below program logs ""Failure"" when I use some bigger prime numbers like p = 11, q = 17. I am hashing my message and the result is smaller than N. I don't know why this is happening. Please guide me in the right direction. </p>

<p>This is for teaching millions of people out there. If you have any suggestions for improvement on the current implementation then please feel free to comment :) </p>

<p>Git Repo: <a href=""https://github.com/vkweb/digital-signature-system"" rel=""nofollow noreferrer"">https://github.com/vkweb/digital-signature-system</a></p>

<p>Thanks! Happy coding &lt;3</p>



<pre><code>const firstPrime =11;
const secondPrime = 19;
const N = firstPrime * secondPrime;
const phiOfN = (firstPrime - 1) * (secondPrime - 1);
let publicKey = 0;

function hashTheMessage(message) {
  let hashValue = 0;
  for (let i = 0, msgLength = message.length; i &lt; msgLength; ++i) {
    hashValue += message.charCodeAt(i);
  }
  return hashValue % N === 0 ? 1 : hashValue % N;
}

function isCoPrime(smallerNum, largerNum) {
  for (let i = 2; i &lt;= smallerNum; ++i) {
    if (smallerNum % i === 0 &amp;&amp; largerNum % i === 0) {
      return false;
    }
  }
  return true;
}

function generatePrivateKey() {
  for (let i = 2; i &lt; phiOfN; ++i) {
    if (isCoPrime(i, N) &amp;&amp; isCoPrime(i, phiOfN)) {
      return i;
    }
  }

  console.log(""\nPrivate key can't be generated."");
  return 0;
}

function generatePublicKey(privateKey) {
  if (!privateKey) {
    console.log(""\nPublic key can't be generated."");
  } else {
    publicKey = 1;
    while (privateKey) {
      if ((publicKey * privateKey) % phiOfN === 1 &amp;&amp; privateKey !== publicKey) {
        return;
      }
      publicKey += 1;
    }
  }
}

function generateSignature(hashValue, privateKey) {
  return Math.pow(hashValue, privateKey) % N;
}

function decryptSignature(digitalSignature) {
  return Math.pow(digitalSignature, publicKey) % N;
}

let hashValue = hashTheMessage(""Hello world!"");
let privateKey = generatePrivateKey();
generatePublicKey(privateKey);
let signature = generateSignature(hashValue, privateKey);
let decryptedSignature = decryptSignature(signature);

if(decryptedSignature === hashValue)
{
  console.log(""Success!"");
}
else
{
  console.log(""Failure!"");
}
<span class=""math-container"">```</span>
</code></pre>
","","32","<rsa><public-key><signature>","0","","0","2019-06-17 03:06:52","","9","","","","","2019-06-15 16:51:23",""
"26268554","New host key while EC2 server is turned off","<p>I have a server on EC2 that I was connecting to through FileZilla SFTP. Suddenly its asking me to trust a new host key. Even when the machine is turned off. Is this a man in the middle attack? How would it send a new host key if the machine is off?</p>
","<p>I would assume that your instance IP address has changed (e.g. due to a restart) and your original IP address was assigned to a different instance.</p>

<p>That would explain both the different host key and the fact you can connect, despite your instance being off.</p>
","31","<ubuntu><ssh><amazon-ec2><public-key><filezilla>","-1","0","1","2014-10-09 07:04:29","","0","","850848","","2014-10-09 07:04:29","2014-10-09 00:33:24",""
"55593094","Hyperledger Composer REST Server: Why does multi-user setup need the private keys and not only the public keys?","<p>In Hyperledger Fabric, the recommended way to setup the composer REST server is to use multi-user setup.</p>

<p>This is being taught in the <a href=""https://www.udemy.com/hyperledger"" rel=""nofollow noreferrer"">udemy hyperledger fabric course</a>.</p>

<p>This means that even if all users use the same network card to access the REST server, they use their own blockchain identity to access the blockchain application.</p>

<p>However, it also warned that the REST server should be secure enough to manage the <em>private keys</em>.</p>

<p>My question then is: Should the REST not only manage the <em>public</em> keys to verify the signatures, like in PGP setup? This sounds a bit off to me ... </p>
","","31","<rest><hyperledger-fabric><private-key><public-key>","0","","0","2019-04-09 12:52:41","","0","","3961495","","2019-04-09 12:52:41","2019-04-09 12:38:26",""
"49044940","custom public key generation for mule custom connector","<p>i have created a sample custom connector and I'm in thought of applying a 30 days trail licence for it so for that I need a public key so without getting it from mulesoft is there any possible way for creating a custom public key which helps us to create a licence if yes can someone suggest me the procedure</p>

<p>Thanks&amp; Regards 
sai Kumar</p>
","<p>There are many tools to create key-pairs. One of those is Java's <code>keytool</code> command line tool. You can find information <a href=""https://docs.oracle.com/javase/tutorial/security/toolsign/step3.html"" rel=""nofollow noreferrer"">here</a> on how to use it to generate keys. Another recommended tool (based on that one in fact) is <a href=""http://keystore-explorer.org/"" rel=""nofollow noreferrer"">KeyStore Explorer</a>.</p>
","30","<mule><public-key><mule-component><connector>","0","1","1","2018-03-09 23:07:20","","0","0","","","","2018-03-01 07:50:24",""
"52122078","Why prompted for username when pushing despite having set up ssh?","<p>I am puzzled, when pushing, I am always prompted for my username and password but I have set up a public key.</p>

<p>I can successfully log in using <code>ssh -T git@github.com</code>.</p>

<p>To make things even more strange, on my laptop (which I set up first), I am able to clone a repo via ssh by clicking on ""use ssh"" or https. On my tower (that has the problem) there is only https. </p>

<p>It says ""Use git or checkout with SVN using the web URL""</p>

<p>I have a ssh server running on the tower but not listening on port 22 because I forwarded a port from my router and prefered to use a nonstandard one, could this be the problem? How could I make the ssh server listen on two ports if that was indeed the problem?</p>
","<p>Setting SSH up on GitHub doesn't magically make all of your connections use SSH. You might want to connect to some remotes over SSH and some over HTTPS. Your remote is probably configured to use HTTPS.</p>

<p>You can use <a href=""https://git-scm.com/docs/git-remote#git-remote--v"" rel=""nofollow noreferrer""><code>git remote -v</code></a> to see what URLs your remotes use, e.g.</p>

<pre><code>$ git remote -v
origin  https://github.com/github/hub.git (fetch)
origin  https://github.com/github/hub.git (push)
</code></pre>

<p>And <a href=""https://git-scm.com/docs/git-remote#git-remote-emset-urlem"" rel=""nofollow noreferrer""><code>git remote set-url &lt;remote&gt; &lt;new-url&gt;</code></a> to update them to the SSH URL, e.g.</p>

<pre><code>$ git remote set-url origin git@github.com:github/hub.git
origin  git@github.com:github/hub.git (fetch)
origin  git@github.com:github/hub.git (push)
</code></pre>
","30","<git><github><ssh><public-key>","0","0","1","2018-08-31 21:50:19","52122939","0","","354577","","2018-08-31 21:50:19","2018-08-31 20:11:35",""
"58323948","Why PFX's public key is different when sign pdf document?","<p>Using a certificate that I created, I signed a PDF document with the iTextSharp library.</p>

<p>When, in the pdf signature panel, I will see the public signature I have the following information in hexa</p>

<p><img src=""https://i.stack.imgur.com/Svh7a.png"" alt=""pdf public key""></p>

<p>But, when I get the public key from the same certificate through my code in c# </p>

<pre><code>    var certificate = new X509Certificate2(@""C:\mycert.pfx"", ""pass"");
    byte[] publicKey = certificate.PublicKey.EncodedKeyValue.RawData;
</code></pre>

<p>The result in decimal (converted to Hexa) is different. </p>

<p>e.g. In the byte array 5 is 130 - 82 in Hexa, but in pdf, the 6th key is 0D in hexa</p>

<p><img src=""https://i.stack.imgur.com/8dPYc.png"" alt=""pdf public key""></p>

<p>What I'm doing wrong?</p>

<p>Thanks and Sorry for my english.</p>
","<p>As far as the cause for the discrepancy is concerned, your question is a duplicate of <a href=""https://stackoverflow.com/q/56515629/1729265"">this question</a>; the answer explains:</p>

<blockquote>
  <p>The difference is that Adobe presents the hex dump of the complete <code>SubjectPublicKeyInfo</code> object (the public key including the algorithm information and the key value) while your code only dumps the <code>RSAPublicKey</code> (the key itself).</p>
  
  <p>...</p>
</blockquote>

<p>For more details read there.</p>

<p>You actually can recognize the plain public key in the Adobe Reader output, it starts at the end of the first line, </p>

<blockquote>
  <p>[...] 30 82 02</p>
  
  <p>0A 02 82 02 01 00 FA 8B ...</p>
</blockquote>

<hr>

<p>The solution is slightly different, though, as the code in that question is in Java.</p>

<p>Your code uses the <code>System.Security.Cryptography.X509Certificates</code> class <code>X509Certificate2</code>. <a href=""https://docs.microsoft.com/dotnet/api/system.security.cryptography.x509certificates.x509certificate2"" rel=""nofollow noreferrer"">As far as I can see</a> this class does not expose the whole <code>SubjectPublicKeyInfo</code> by itself. Thus you should use a different class here.</p>

<p>An obvious choice would be BouncyCastle classes, either <code>X509CertificateStructure</code> or <code>X509CertificateHolder</code>, depending on the BouncyCastle version you use (an older version of BouncyCastle is included in iTextSharp, newer ones can be retrieved from their web site). These classes expose the <code>SubjectPublicKeyInfo</code>.</p>
","28","<c#><pdf><itext><public-key><pfx>","0","0","1","2019-10-10 15:47:16","","1","","","","","2019-10-10 13:20:26",""
"53643672","how ensure a public key sender/owner has its private key too?","<p>when we want to encrypt a message by a public key, how we can ensure the public key owner has its private key too?</p>

<p>the rules are:</p>

<ol>
<li>we do not want to have any information about private key that makes a security issue.</li>
</ol>

<p>2.the verifying have to be done in a single request and not in a promise.</p>

<p>3.do not use any way that needs to store some data on the key receiver.</p>

<p>the only way that i can see is sending a random message that encrypted by the public key and ask from the key owner the decrypted message to compare them and ensure the public key sender have its private key too; but this way needs a promise like and two steps to verifying and storing some data:</p>

<ol>
<li><p>receive a public key and send the encrypted random string and wait</p></li>
<li><p>receive the decrypted data and compare them with original string</p></li>
</ol>

<p>now do you know any way to do this verifying without need to storing any data 
and just do it with a single request may be by some extra data to send by the public key or some thing else?
or is there any other public key encryption algorithm that has this feature built-in?</p>
","<p>Using S/MIME as an example, one pre-requisite of encrypting a message to the recipient is to have their Public Certificate. </p>

<p>Now, of course, the recipient can first send you their certificate as an attachment, however, it is more common for the recipient to first send you a signed email. </p>

<p>This signed email would prove that the recipient has access to their private key as they would hash the contents of the email and then sign the hash with their private key. </p>

<p>You would then verify the hash with their public key (the certificate is sent along side the email) and comparing that hash to the hash of the MIME content of the email.</p>
","28","<rsa><private-key><public-key><elgamal>","1","1","1","2018-12-06 06:05:08","53643724","0","","3690259","","2018-12-06 02:26:21","2018-12-06 02:20:42",""
"57797544","How to compress the public key to 33bytes with public-key object in java (secp256k1 algorithm used)","<p>I'm trying to get compressed public-key from the PublicKey Object. 
I used ECDSA secp256k1 algorithm at bouncy castle library to generate a key pair.</p>

<p>by getPublic() method, I could get PublicKey object and when I printed it out it showed me like this,</p>

<p>EC Public Key [bd:e1:53:71:35:6a:f0:74:cb:b4:a1:b5:9d:60:26:81:1f:d0:22:32]<br>
 X: 6da8d1d2732329fe207216ecf1dcaf45baf00eb02c55b97762ec014d4e71ccdd<br>
 Y: f9c91e4a0c755ba905f0ed80939f7c73640be790da025fc44baee1f45363a1ef</p>

<p>I would like to compress it so I could have
  information of Y(1byte) + X(32byte) in byte array or Hex.</p>

<p>Can anyone please let me know how to compress the public key? so I could get
33byte of compressed public key? 
I'd really appreciate your help.</p>

<pre><code>public static KeyPair getKeyPair()
        throws NoSuchAlgorithmException, NoSuchProviderException, InvalidAlgorithmParameterException {
    Security.addProvider(new BouncyCastleProvider());

    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(KEY_FACTORY_ALGORITHM, ""BC"");
    ECGenParameterSpec ecSpec = new ECGenParameterSpec(""secp256k1"");

    keyGen.initialize(ecSpec, new SecureRandom());
    KeyPair keypair = keyGen.generateKeyPair();

    return keypair;
</code></pre>

<pre><code>System.out.println(keyPair.getPublic());
</code></pre>
","","28","<java><bouncycastle><public-key><ecdsa>","0","","0","2019-09-05 02:04:52","","1","","","","","2019-09-05 02:04:52",""
"56759576","Github multiple repositories defaulting to old username","<p>I have all the settings configured in a way that appears correct, but git is still defaulting to an incorrect username. </p>

<p>I have the following set in git config:</p>

<pre><code>alias.hist=log --pretty=format:""%h %ad | %s%d [%an]"" --graph --date=short
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.url=git@github.com:CORRECT_USER/project
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
user.email=ID+CORRECT_USER@users.noreply.github.com
user.name=CORRECT_USER
</code></pre>

<p>And it looks good.</p>

<p>My /.ssh/config also has:</p>

<pre><code>Host github.com-CORRECT_USER
    HostName github.com
    User CORRECT_USER
    IdentityFile ~/.ssh/CORRECT_USER_KEY
</code></pre>

<p>So it looks good, too.</p>

<p>However, when I...</p>

<pre><code>git push 
</code></pre>

<p>I get:</p>

<pre><code>ERROR: Permission to  denied to TOTALLY_DIFFERENT_WRONG_USERNAME.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre>

<p>What is happening that git is trying to push the right repo, with the right username, and the right ssh/config using the TOTALLY_DIFFERENT_WRONG_USERNAME?  Where would that be set and how can I unset it?</p>
","<p>Running:</p>

<pre><code>$ ssh -Tv git@github.com
</code></pre>

<p>Will show which identity your ./ssh/config is actually connecting with in this repository.</p>

<p>In this case, it looks like it ran:</p>

<pre><code>debug1: /etc/ssh/ssh_config line 19: Applying options for *
</code></pre>

<p>And went with your default username, which is TOTALLY_DIFFERENT_WRONG_USERNAME.</p>

<p>You can create different configs like so:</p>

<pre><code># user1
Host github.com
    HostName github.com
    User user1

# user2
Host github.com
    HostName github.com
    User user2
</code></pre>
","28","<git><github><ssh><public-key>","-1","1","1","2019-06-25 17:59:38","","0","","1052117","","2019-06-25 17:59:38","2019-06-25 17:53:30",""
"43629855","Private Git server is invisible or unreachable","<ol>
<li><p>On Ubuntu machine I created a repo' as follows</p>

<p><code>netcomo@netcomoserver:/opt/git/groupware.git$ ll
 Total 12
drwxr-xr-x 3 git git 4096  April 26 16:18 ./
drwxr-xr-x 3 git git 4096  April 26 13:50 ../
drwxr-xr-x 7 git git 4096  April 26 16:18 .git/
netcomo@netcomoserver:/opt/git/groupware.git$</code></p></li>
<li><p>On Windows 7 where I want to clone the repo' I'm having below error.
What could be the reason? (as you can see the repo' server is reachable)
<a href=""https://i.stack.imgur.com/YWQTL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/YWQTL.png"" alt=""enter image description here""></a></p></li>
</ol>
","<p>Looks like your git server is reachable.
You are using SSH to access the GIT repo. In that case you need to create an SSH key.</p>

<p>If you doing so, store your public key </p>

<pre><code>.ssh/authorized_keys
</code></pre>

<p>on your Ubuntu maschine.</p>

<p>On Windows you can create SSH keys using Putty <a href=""http://www.putty.org/"" rel=""nofollow noreferrer"">http://www.putty.org</a>/ </p>
","28","<windows><git><ubuntu><permissions><public-key>","0","1","2","2017-04-28 05:37:21","43630131","0","","","","","2017-04-26 09:14:47",""
"43629855","Private Git server is invisible or unreachable","<ol>
<li><p>On Ubuntu machine I created a repo' as follows</p>

<p><code>netcomo@netcomoserver:/opt/git/groupware.git$ ll
 Total 12
drwxr-xr-x 3 git git 4096  April 26 16:18 ./
drwxr-xr-x 3 git git 4096  April 26 13:50 ../
drwxr-xr-x 7 git git 4096  April 26 16:18 .git/
netcomo@netcomoserver:/opt/git/groupware.git$</code></p></li>
<li><p>On Windows 7 where I want to clone the repo' I'm having below error.
What could be the reason? (as you can see the repo' server is reachable)
<a href=""https://i.stack.imgur.com/YWQTL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/YWQTL.png"" alt=""enter image description here""></a></p></li>
</ol>
","<p>I should have checked a few things as follows:</p>

<ol>
<li><p>To copy public key from a client machine to the server using ""ssh-copy-id"" command (example is shown below), I need to change a option of sshd_config file to 'yes' on the server computer.
Command: </p>

<p>$ ssh-copy-id ~/.ssh/id_rsa netcomo@netcomoserver</p>

<p>$ sudo vi /etc/ssh/sshd_config</p>

<p>PasswordAuthentication yes</p></li>
<li><p>After copying the public key to the server, the 'yes' changed above needs to be changed back to 'no'</p></li>
<li><p>For your reference, if you need to access multiple server accounts, you have to copy the same public key for each different accounts, see examples that follow.</p>

<p>$ ssh-copy-id ~/.ssh/id_rsa netcomo@netcomoserver</p>

<p>$ ssh-copy-id ~/.ssh/id_rsa netcomo2@netcomoserver</p></li>
</ol>

<p>.</p>
","28","<windows><git><ubuntu><permissions><public-key>","0","0","2","2017-04-28 05:37:21","43630131","0","","","","","2017-04-26 09:14:47",""
"54906165","How to convert array bytes to PublicKey type?","<p>I want to convert an array of bytes to a PublicKey. The problem is that the byte array comes (or should come) encoded with ECDH and being public key X509. It is the public key of the DNIe. I've been testing with this code but it returns ""Detect premature EOF"" right on the line where i convert:</p>

<pre><code>Data(en hex) = 0bbe0c8f66d755020f6a2a656c1111664c745836ac7dafbde0af484bd66b1d31a0ba7da687acd0ee1b695b54ea274d495cb613e90d3277159827f54f316e5833

 public static PublicKey loadPublicKey (byte[] data) throws Exception{     
        PublicKey publicKey = KeyFactory.getInstance(""EC"").generatePublic(new X509EncodedKeySpec(data));}
</code></pre>
","","27","<arrays><bouncycastle><public-key><ecdh>","0","","0","2019-02-27 13:16:29","","1","","8090893","","2019-02-27 13:16:29","2019-02-27 13:03:00",""
"58501634","Encrypt text file using RSA public key","<p>I have been given a <strong>Public Key (key.pub file)</strong> and with the use of the same, I want to encrypt XML file using my <strong>C#</strong> application.</p>

<p>The file is having structure as below:</p>

<blockquote>
  <p>-----BEGIN PUBLIC KEY----- </p>
  
  <p>xxxxxxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxx
  aaaaaaaaaaaaaaabbbbbbbbbbbbbbzzzzzzzzzzzzzzzzbbbbbbbbbbbbbbbbbbb
  yyyyyyyyyyyyyyyyyyyyyyyyzzzzzzzzzzzzzzuuuuuuuuuuuuuuuuaaaaaaauuu
  pppppppppppppppaao==</p>
  
  <p>-----END PUBLIC KEY-----</p>
</blockquote>
","","27","<c#><.net><rsa><public-key-encryption><public-key>","0","","0","2019-10-22 11:13:05","","2","","10216583","","2019-10-22 11:13:05","2019-10-22 09:55:33",""
"53625026","How can there be two different PUBLIC KEY BLOCKs of the same key?","<p>The key at pgp.mit.edu is:</p>

<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: SKS 1.1.6
Comment: Hostname: pgp.mit.edu

mQENBE/JeVIBCACppoOlVmInMGHOa+k/v0XL71V2fcfni0xjQ8tLwbP+XUTlkmtLLbrExSms
O1ZC9FWujXJLi297k26uB9DsJ7B/Xl2L3ERyMy8cnyUEjSHeV7Ryb35bUqHmFzYxSKsgMk1X
zFGaSvIGYeN10vsMngWL1rt6ggdDcPRpy1gO0m8sBPoTXaGtq6vn2DxXCc1Qt0XiQRpYou7w
dGnLtpl8BqRgr608v9n0ZIWWEHjGtzCCInIvz0owS+Fp5kJJxMtnQEEMY7trvkk86HOarKHf
viFZLyjWXO902UnWNiUwBSg1oPbAGe4hwcnGRYnOL5jhgdBUo9QP5f/AjIRctqejv8QdABEB
AAG0L25vdHBsYXRvIChCaXRDb2luIElEKSA8ZHNjb3Rlc2VAbGl0bW9jcmFjeS5jb20+iQE [SNIP] c
BBABCAAGBQJZG8xTAAoJEF7ORVh2jSDKOuUH/iRoa+5jb5FjdFeqkztBym+Xv7dv1iQgZAPd
ao0OviuDZcgS85XZ8YXjbrXdJxAlcNgmIHRi8rSUfuyaOPryWzf846nMvRVTWIdM9NLjfWVy
n0TA7dm11euZO16OrPysUfxc5ptwxta7j0WlIlCw4up+zBE0tiRo7cfl5I8c7ZLCkvIQJIZ0
O/WP5oCJm3DxfytWzYgIPJySFSKOO4XaKBBXmnPeA4rH3QiM8QP3OeCcpE6sWGquw7EFHsOF
xWYIgJcOlgjMIq3+ONDfVxjj4GpwdcTsueL/cVNSd1VRFs2eiVnIiKezhE+NcnQmnto25Br7
95E3lHZxpSYcJk3DfYmJATgEEwECACIFAk/JeVICGw8GCwkIBwMCBhUIAgkKCwQWAgMBAh4B
AheAAAoJEL8dSijmIbHtW0QH/0ZXjF9QVBdO7gx5zWiZHA3xK4ahjkCrfHpodccWs2dinjcx
cKSRrNV0TqTgJ+tVdpK4uIByowqfCsHwEhxE5N2rLwRPL6kV8RJV7JaiUuXlEZUx2V1YvdhE
ypSK2vy5F0sfxhGsqygbMzsG16QmQ6BtdvuiMvX9m0HKDnX5LCPd0RM8BcAEwm6nK4r4qd/S
G53/L7t5bJ3YGVQ5bMGD3RejzzSKYAs1b1Lk7BwSQUqufvhIfLKnKh5QgfkrIeS39h14AZ0W
mlXkK9bQMI/JXu9luk+dKQfakQp8L/Cc/Ndz4NrxsW45XN+zUQ9wQKTh7FcuwHm8RZtLC1dU
Sr/UH5Q=
=BQpG
-----END PGP PUBLIC KEY BLOCK-----
</code></pre>

<p>The key I exported from my Kleopatra certificate store on Windows is:</p>

<pre><code>-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v2

mQENBE/JeVIBCACppoOlVmInMGHOa+k/v0XL71V2fcfni0xjQ8tLwbP+XUTlkmtL
LbrExSmsO1ZC9FWujXJLi297k26uB9DsJ7B/Xl2L3ERyMy8cnyUEjSHeV7Ryb35b
UqHmFzYxSKsgMk1XzFGaSvIGYeN10vsMngWL1rt6ggdDcPRpy1gO0m8sBPoTXaGt
q6vn2DxXCc1Qt0XiQRpYou7wdGnLtpl8BqRgr608v9n0ZIWWEHjGtzCCInIvz0ow
S+Fp5kJJxMtnQEEMY7trvkk86HOarKHfviFZLyjWXO902UnWNiUwBSg1oPbAGe4h
wcnGRYnOL5jhgdBUo9QP5f/AjIRctqejv8QdABEBAAG0L25vdHBsYXRvIChCaXRD
b2luIElEKSA8ZHNjb3Rlc2VAbGl0bW9jcmFjeS5jb20+iQE [SNIP] 4BBMBAgAiBQJPyXlS
AhsPBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRC/HUoo5iGx7VtEB/9GV4xf
UFQXTu4Mec1omRwN8SuGoY5Aq3x6aHXHFrNnYp43MXCkkazVdE6k4CfrVXaSuLiA
cqMKnwrB8BIcROTdqy8ETy+pFfESVeyWolLl5RGVMdldWL3YRMqUitr8uRdLH8YR
rKsoGzM7BtekJkOgbXb7ojL1/ZtByg51+Swj3dETPAXABMJupyuK+Knf0hud/y+7
eWyd2BlUOWzBg90Xo880imALNW9S5OwcEkFKrn74SHyypyoeUIH5KyHkt/YdeAGd
FppV5CvW0DCPyV7vZbpPnSkH2pEKfC/wnPzXc+Da8bFuOVzfs1EPcECk4exXLsB5
vEWbSwtXVEq/1B+UiQEcBBABCAAGBQJZG8xTAAoJEF7ORVh2jSDKOuUH/iRoa+5j
b5FjdFeqkztBym+Xv7dv1iQgZAPdao0OviuDZcgS85XZ8YXjbrXdJxAlcNgmIHRi
8rSUfuyaOPryWzf846nMvRVTWIdM9NLjfWVyn0TA7dm11euZO16OrPysUfxc5ptw
xta7j0WlIlCw4up+zBE0tiRo7cfl5I8c7ZLCkvIQJIZ0O/WP5oCJm3DxfytWzYgI
PJySFSKOO4XaKBBXmnPeA4rH3QiM8QP3OeCcpE6sWGquw7EFHsOFxWYIgJcOlgjM
Iq3+ONDfVxjj4GpwdcTsueL/cVNSd1VRFs2eiVnIiKezhE+NcnQmnto25Br795E3
lHZxpSYcJk3DfYk=
=aSDt
-----END PGP PUBLIC KEY BLOCK-----
</code></pre>

<p>When I import either one, Kleopatra says ""Keys found: 1, Keys imported: 0, Keys unchanged: 1""  Clearly the two keys are the same, but the content (where I indicated with <code>[SNIP]</code>) differs.</p>
","","23","<public-key><pgp><dataformat>","0","","0","2018-12-05 04:06:12","","3","","","","","2018-12-05 04:06:12",""
"56185908","how to convert the ssh-keygen generated keys into a format that Java can parse(just use java cann't us other material)","<p>I use ssh-keygen -t rsa generate a pair of RSAkey, but I cannot use it in my java program. how to convert it to the format that java can parse.I cannot use the terminal to convert it,  the transformation process needs to be implemented in Java code. Thank you</p>
","","23","<java><rsa><ssh-keys><public-key>","0","","0","2019-05-17 11:55:52","","2","","","","","2019-05-17 11:55:52",""
"56929587","Importing GPG key to GitLab results in 502 error","<p>Importing my GPG key into GitLab results in a 502 error. I’ve tried it several times now.  </p>

<p>The GitLab instance is self hosted and latest Community Edition 12.0.3. The server has enough resources and all other operations never end up in a 502 error.</p>

<p>Importing the same key to another GitLab instances on different servers works seamless.</p>

<p>The log only reports the 502 but gives no further information:</p>

<blockquote>
  <p>==> /var/log/gitlab/nginx/gitlab_access.log &lt;==<br>
  111.222.333.444 - - [08/Jul/2019:06:34:48 +0000] ""POST /profile/gpg_keys HTTP/2.0"" <strong>502</strong> 2940 ""<a href=""https://gitlab.xxxxxxx.tld/profile/gpg_keys"" rel=""nofollow noreferrer"">https://gitlab.xxxxxxx.tld/profile/gpg_keys</a>"" ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36""</p>
</blockquote>
","","22","<gitlab><gnupg><public-key>","0","","0","2019-07-08 06:43:46","","0","","","","","2019-07-08 06:43:46",""
"58537608","PHP - ECDSA - Public key (json) to Pem Format","<p>I'm stuck from yesterday, I can't find any way to do what I need...
I have a public key (json) that we get from an API and I need to convert it in Pem format because I need to verify the signature (with lcobucci library)
I'm using PHP 5.5.9 (for my work)</p>

<p>I have something like this :</p>

<pre><code>""kty"": ""EC"",
""kid"": ""xxxxxxxxxxxx""
""use"": ""sig""
""crv"": ""P-384"",
""x"": ""xxxxxxxxxxxxxxxxx"",
""y"": ""xxxxxxxxxxxxxxxxx""
}
</code></pre>

<p>And I would like to have this :</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEZe2loSV3wrroKUN/4zhwGhCqo3Xh
u1td4QjeQ5wIVR0eUu11cBFj9/nkDd+fNBs9ybqGCvfgynyn6e7NAITRnA==
-----END PUBLIC KEY-----
</code></pre>

<p>If you have any idea how to do it with php (library) it could be great.
Thanks to you ;)</p>
","","21","<php><public-key><pem>","0","","0","2019-10-24 08:48:15","","0","1","","","","2019-10-24 08:48:15",""
"37272072","Assigning public key to user's login","<p>I have a Centos 6.4 server and I need to assign certificate to user's login so that he doesn't need to enter password during login. The user has already provided the id_rsa.pub -file. I don't have his credentials and I'm working with the root account</p>

<p>The was no .ssh directory under his home folder so I created one, but I don't know how to advance from here..</p>
","<p>so, as root you need to create a $HOME/.ssh/authorized_keys with the right owner and permissions. Something like this should work</p>

<pre><code>cd /home/theuser
mkdir .ssh
cp /some/path/id_rsa.pub .ssh/authorized_keys
chown theuser .ssh .ssh/authorized_keys
chmod 700 . .ssh .ssh/authorized_keys
</code></pre>

<p>the permission may not have to be so tight but if it's to loose ssh won't allow the key to be used and complain about it in some syslog.</p>
","20","<authentication><centos6><ssh-keys><public-key>","1","0","1","2016-05-18 04:18:54","","1","","","","","2016-05-17 09:21:51",""
"56785579","Why format bitcoin public key?","<p>I have some questions.
Why we format public key -> uncompressed key and compressed key.</p>

<p>And When we use uncompressed key vs compressed key?</p>

<p>I think uncompressed key is too long...</p>
","<p>The uncompressed key is too long, you are right.
The compressed key is the uncompressed key as Base58 data.
Satoshi decided to use Base58 because Base58 has only characters which do not look similar (Like ""O"" and""0""). Also Base58 strings are much smaller and more readable. There are several libraries which help you to convert data to Base58 and vice versa.</p>
","20","<format><bitcoin><public-key>","-1","0","1","2019-07-19 09:42:24","","1","","","","","2019-06-27 06:57:38",""
"58271449","Sign Verify problem by provider in JCA","<p>I'm trying to sign and verify my data with SHA256withRSA,MD2withRSA,SHA1withRSA,SHA512withRSA modes. My provider supports all of them but, just MD2 mode works for my code. Other ones does not work, and dont verify. What is the problem? I think i'm missing some Theoric things.         </p>

<pre><code>        KeyStore ks = KeyStore.getInstance(""PKCS11"", provider);
        ks.load(null, null);

        PrivateKey privateKey = (PrivateKey) ks.getKey(""RSA-1024"", null);
        Signature dsa = Signature.getInstance(""MD2withRSA"", provider);
        dsa.initSign(privateKey);
        dsa.update(""abcde"".getBytes());
        byte[] sign = dsa.sign();
        System.out.println(Utility.byteArrayToHex(sign));
        Certificate certificate = ks.getCertificate(""newRSA-1024"");
        RSAPublicKey publicKey = (RSAPublicKey) certificate.getPublicKey();

        dsa.initVerify(publicKey);
        dsa.update(""abcde"".getBytes());
        boolean verifies = dsa.verify(sign);
        System.out.println(""veryfied: "" + verifies);
</code></pre>
","","20","<rsa><public-key><signature>","0","","0","2019-10-07 14:17:33","","1","","","","","2019-10-07 14:13:00",""
"52454694","PHP PGP check keysize before import","<p>What's the best way, to check the keysize of a PGP key, before importing it using the PGP PHP library?
I would like to allow only keys with a size of 2048 or 4096 bits.
I'm using this PHP library:</p>

<p><a href=""http://php.net/manual/en/book.gnupg.php"" rel=""nofollow noreferrer"">PGP lib</a></p>

<p>My code at the moment:</p>

<pre><code>//import private key
$imp_info = $gpg-&gt;import($request-&gt;public_key);
</code></pre>
","","20","<php><public-key><pgp>","0","","0","2018-09-23 11:03:25","","2","","9744873","","2018-09-23 11:03:25","2018-09-22 07:58:55",""
"57512518","git remote -v : url is shown as ssh but it should be https","<p>I've already read through a lot of posts that have the same title, but none of the answers on them solved my problem. <strong>So please read the whole question before answering or marking as repeated!</strong></p>

<p>Summary of the problem:</p>

<p>I'm trying to push to a remote repository on Github, but it is giving me this error:</p>

<p><strong>Warning: Permanently added the RSA host key for IP address '192.30.253.112' to the list of known hosts.
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.*
Please make sure you have the correct access rights
and the repository exists.</strong></p>

<p>Background on what I did:</p>

<p>I added a remote repo as usual by getting the url shown on Github. The command I typed was:
<code>git remote add origin https://github.com/bowtie/myremote.git</code>
Then I checked my remote repos by typing <code>git remote -v</code> and, even though I added an https url, it shows urls with ""ssh"" in front of them:
 git remote -v
<code>origin  ssh://git@github.com/bowtie/myremote.git (fetch)</code>
<code>origin  ssh://git@github.com/bowtie/myremote.git (push)</code>
Then I tried to push anyway, at which point it gave me the error I mentioned:</p>

<p><code>git push --set-upstream origin master
Warning: Permanently added the RSA host key for IP address '192.30.253.112'
to the list of known hosts.
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.</code></p>

<p>Why is it showing ssh even though I added the url as https? I tried changing it using git remote set-url, nothing changed. I removed the url completely then readded it and it still added the ""ssh"" to it. I checked the git config file, and the url is written correctly with https inside it, then why is it showing ssh on the command line? </p>

<p>By the way, I had another remote and when I encountered this problem, I deleted the .git file from the local repo and reinitialised it, then created another remote, thinking maybe the problem was in the remote. But still the problem persisted. I had tried to change from https to ssh before, but I couldn't get the key. Right now, I just want git bash to show me the correct url without the ssh:// and to push my commits. Thoughts?</p>
","<p>I figured out where the problem was. I had previously made a command to replace every https with ssh using insteadOf, which applies to all git operations. I fixed it by fixing the git config --global file.</p>

<p>The command I used was something like this :
<code>git config --global url.""git@github.com:"".insteadOf ""https://github.com/""</code></p>

<p>The solution is to edit the config global file by using:
<code>git config --global --edit</code> and delete the line manually</p>

<p>I found the problem explained here: <a href=""https://discuss.bitrise.io/t/git-force-to-use-ssh-url-instead-of-https-for-github-com/4384"" rel=""nofollow noreferrer"">https://discuss.bitrise.io/t/git-force-to-use-ssh-url-instead-of-https-for-github-com/4384</a></p>

<p>And I found the solution explained here: <a href=""https://gist.github.com/taoyuan/bfa3ff87e4b5611b5cbe"" rel=""nofollow noreferrer"">https://gist.github.com/taoyuan/bfa3ff87e4b5611b5cbe</a></p>
","19","<github><ssh><https><rsa><public-key>","0","0","1","2019-08-16 07:25:21","","1","","","","","2019-08-15 15:55:30",""
"58726344","Authenticate using a public key","<p>So in short, I am trying to login to the remote server using PHP's ""ssh2_auth_pubkey_file"" function. And it never passes authentification. My keys are PuTTYgen generated and I am trying to access them localy but I can not make it work.</p>

<p>I have read multiple StackOverflow articles and other forums but I can not find any solution for this</p>

<pre><code>ssh2_auth_pubkey_file(
    $conn,
    $sftpUsername,
    'C:/my/path/public_key.pub',
    'C:/my/path/private_key.ppk'
);
</code></pre>

<p>When I use ""ssh2_auth_password"" I can connect to server without any problems, but public-private key authentification is giving me a lot problems...</p>
","","15","<php><private-key><public-key><libssh2>","0","","0","2019-11-06 08:58:12","","2","","","","","2019-11-06 08:58:12",""
"56493202","Could SSL pinning be applied to a portion of an application's code?","<p>I know (please correct me if I'm wrong) that SSL-pinning consists of hard-coding the public key of the server in the application, so during the handshake protocol, when the client receives a <code>hello server</code> message, it will compare the server's public key to the one on the application's code, if they don't match the client will end the authentication.</p>

<p>I am trying to understand how certificate pinning works? Here is what I do:</p>

<p>I am proxing the traffic coming from an Android application to my server. The application is constantly making requests to the server so it can update it's content, but those requests are issued automatically by the application, and mimtproxy does intercept them.</p>

<p><strong>Now when I send a request from the application, mitmproxy does not intercept it. It only intercepts the ones issued automatically by the application</strong></p>

<p>Things I tried to do:</p>

<ol>
<li>I've rooted my android device, and mimtproxy still can't intercept the traffic.</li>
<li>I've installed mitmproxy certificate on the root store on my android device.</li>
</ol>

<p>The topology I'm using:</p>

<p><code>Client (Android 6.0.1) --&gt; proxy (mitmproxy running on linux) --&gt; server</code></p>

<p>According to some research I made about certificate pinning, the client ends the conversation as soon as the public key it receives is not the one it trusts. However, in my case, the proxy keeps receiving the requests that the application is sending automatically which brings me to my question: Can certificate pinning be applied to portions of an application's code? for example, when the client sends a specific request we check the public key it's received and we neglect this for other requests?</p>

<p>Thank you in advance.</p>
","","13","<android><authentication><ssl><ssl-certificate><public-key>","0","","0","2019-06-07 11:15:34","","0","","11290658","","2019-06-07 11:15:34","2019-06-07 11:09:56",""
"56578283","Issue with exporting public keys from virtual accounts in bitvise using powershell","<p>I could see that when the key is exported manually</p>

<blockquote>
  <p>(Double click on virtual Account--> Authentication--> public keys --> Export) </p>
</blockquote>

<p>I am getting a key which is different from the one exported using script. Not sure which part of my code is incorrect. </p>

<pre><code>$ErrorActionPreference = ""Stop""
$cfg = new-object -com ""BssCfg815.BssCfg815""
$result = $cfg.settings.Load()
if ($result.failure) { Write-Error $result.Describe() }
foreach ($account in $cfg.settings.access.virtAccounts.entries)
{
    Write-Host ""Virtual account $($account.virtAccount) ""
    $filename = $account.virtAccount
    $cfg.keypairs.Load()
    $keys = $cfg.PublicKey.GetItem(0).ExportPublicKeyToBase64String($cfg.enums.PublicKeyFormat.ssh2)
    write-Host $keys
}
</code></pre>
","","12","<powershell><public-key>","0","","0","2019-06-13 12:41:44","","0","","4354201","","2019-06-13 12:41:44","2019-06-13 10:14:56",""