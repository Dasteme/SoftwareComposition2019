post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"6340918","Trust Store vs Key Store - creating with keytool","<p>I understand that the keystore would usually hold private/public keys and the trust store only public keys (and represents the list of trusted parties you intend to communicate with). Well, that's my first assumption, so if that's not correct, I probably haven't started very well...</p>

<p><strong>I was interested though in understanding how / when you distinguish the stores when using keytool.</strong></p>

<p>So, far I've created a keystore using</p>

<pre><code>keytool -import -alias bob -file bob.crt -keystore keystore.ks
</code></pre>

<p>which creates my keystore.ks file. I answer <code>yes</code> to the question do I trust bob but it is unclear to me if this has created a keystore file or a truststore file? I can set up my application to use the file as either.</p>

<pre><code>-Djavax.net.ssl.keyStore=keystore.ks -Djavax.net.ssl.keyStorePassword=x
-Djavax.net.ssl.trustStore=keystore.ks -Djavax.net.ssl.trustStorePassword=x
</code></pre>

<p>and with <code>System.setProperty( ""javax.net.debug"", ""ssl"")</code> set, I can see the certificate under trusted certifications (but not under the keystore section). The particular certificate I'm importing has only a public key and I intend to use it to send stuff over an SSL connection to Bob (but perhaps that's best left for another question!).</p>

<p>Any pointers or clarifications would be much appreciated. Is the output of keytool the same whatever you import and its just convention that says one is a keystore and the other a trust store? What's the relationship when using SSL etc?</p>
","<p>There is no difference between keystore and truststore files. Both are files in the proprietary JKS file format. The distinction is in the use: To the best of my knowledge, Java will only use the store that is referenced by the <code>-Djavax.net.ssl.trustStore</code> system property to look for certificates to trust when creating SSL connections. Same for keys and <code>-Djavax.net.ssl.keyStore</code>. But in theory it's fine to use one and the same file for trust- and keystores.</p>
","220903","<java><ssl><keytool><jce>","237","24","7","2019-10-24 07:36:06","6341566","4","114","3885376","","2015-02-17 16:39:57","2011-06-14 08:23:14",""
"6340918","Trust Store vs Key Store - creating with keytool","<p>I understand that the keystore would usually hold private/public keys and the trust store only public keys (and represents the list of trusted parties you intend to communicate with). Well, that's my first assumption, so if that's not correct, I probably haven't started very well...</p>

<p><strong>I was interested though in understanding how / when you distinguish the stores when using keytool.</strong></p>

<p>So, far I've created a keystore using</p>

<pre><code>keytool -import -alias bob -file bob.crt -keystore keystore.ks
</code></pre>

<p>which creates my keystore.ks file. I answer <code>yes</code> to the question do I trust bob but it is unclear to me if this has created a keystore file or a truststore file? I can set up my application to use the file as either.</p>

<pre><code>-Djavax.net.ssl.keyStore=keystore.ks -Djavax.net.ssl.keyStorePassword=x
-Djavax.net.ssl.trustStore=keystore.ks -Djavax.net.ssl.trustStorePassword=x
</code></pre>

<p>and with <code>System.setProperty( ""javax.net.debug"", ""ssl"")</code> set, I can see the certificate under trusted certifications (but not under the keystore section). The particular certificate I'm importing has only a public key and I intend to use it to send stuff over an SSL connection to Bob (but perhaps that's best left for another question!).</p>

<p>Any pointers or clarifications would be much appreciated. Is the output of keytool the same whatever you import and its just convention that says one is a keystore and the other a trust store? What's the relationship when using SSL etc?</p>
","<p>The terminology is a bit confusing indeed, but both <code>javax.net.ssl.keyStore</code> and <code>javax.net.ssl.trustStore</code> are used to specify which keystores to use, for two different purposes. Keystores come in various formats and are not even necessarily files (see <a href=""https://stackoverflow.com/questions/6157550/question-on-java-keystores/6157716#6157716"">this question</a>), and <code>keytool</code> is just a tool to perform various operations on them (import/export/list/...).</p>

<p>The <code>javax.net.ssl.keyStore</code> and <code>javax.net.ssl.trustStore</code> parameters are the default parameters used to build <code>KeyManager</code>s and <code>TrustManager</code>s (respectively), then used to build an <code>SSLContext</code> which essentially contains the SSL/TLS settings to use when making an SSL/TLS connection via an <code>SSLSocketFactory</code> or an <code>SSLEngine</code>. These system properties are just where the default values come from, which is then used by <code>SSLContext.getDefault()</code>, itself used by <code>SSLSocketFactory.getDefault()</code> for example. (All of this can be customized via the API in a number of places, if you don't want to use the default values and that specific <code>SSLContext</code>s for a given purpose.)</p>

<p>The difference between the <code>KeyManager</code> and <code>TrustManager</code> (and thus between <code>javax.net.ssl.keyStore</code> and <code>javax.net.ssl.trustStore</code>) is as follows (quoted from the <a href=""http://download.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#RelsTM_KM"" rel=""noreferrer"">JSSE ref guide</a>):</p>

<blockquote>
  <p>TrustManager:     Determines whether the
  remote authentication credentials (and
  thus the connection) should be
  trusted.</p>
  
  <p>KeyManager:   Determines which
  authentication credentials to send to
  the remote host.</p>
</blockquote>

<p>(Other parameters are available and their default values are described in the <a href=""http://download.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#Customization"" rel=""noreferrer"">JSSE ref guide</a>. Note that while there is a default value for the trust store, there isn't one for the key store.)</p>

<p>Essentially, the keystore in <code>javax.net.ssl.keyStore</code> is meant to contain your private keys and certificates, whereas the <code>javax.net.ssl.trustStore</code> is meant to contain the CA certificates you're willing to trust when a remote party presents its certificate. In some cases, they can be one and the same store, although it's often better practice to use distinct stores (especially when they're file-based).</p>
","220903","<java><ssl><keytool><jce>","237","323","7","2019-10-24 07:36:06","6341566","4","114","3885376","","2015-02-17 16:39:57","2011-06-14 08:23:14",""
"6340918","Trust Store vs Key Store - creating with keytool","<p>I understand that the keystore would usually hold private/public keys and the trust store only public keys (and represents the list of trusted parties you intend to communicate with). Well, that's my first assumption, so if that's not correct, I probably haven't started very well...</p>

<p><strong>I was interested though in understanding how / when you distinguish the stores when using keytool.</strong></p>

<p>So, far I've created a keystore using</p>

<pre><code>keytool -import -alias bob -file bob.crt -keystore keystore.ks
</code></pre>

<p>which creates my keystore.ks file. I answer <code>yes</code> to the question do I trust bob but it is unclear to me if this has created a keystore file or a truststore file? I can set up my application to use the file as either.</p>

<pre><code>-Djavax.net.ssl.keyStore=keystore.ks -Djavax.net.ssl.keyStorePassword=x
-Djavax.net.ssl.trustStore=keystore.ks -Djavax.net.ssl.trustStorePassword=x
</code></pre>

<p>and with <code>System.setProperty( ""javax.net.debug"", ""ssl"")</code> set, I can see the certificate under trusted certifications (but not under the keystore section). The particular certificate I'm importing has only a public key and I intend to use it to send stuff over an SSL connection to Bob (but perhaps that's best left for another question!).</p>

<p>Any pointers or clarifications would be much appreciated. Is the output of keytool the same whatever you import and its just convention that says one is a keystore and the other a trust store? What's the relationship when using SSL etc?</p>
","<p>Keystore is used by a server to store private keys, and Truststore is used by third party client to store public keys provided by server to access. I have done that in my production application. Below are the steps for generating java certificates for SSL communication:</p>

<ol>
<li>Generate a certificate using keygen command in windows:</li>
</ol>

<p><code>keytool -genkey -keystore server.keystore -alias mycert -keyalg RSA -keysize 2048 -validity 3950</code></p>

<ol start=""2"">
<li>Self certify the certificate:</li>
</ol>

<p><code>keytool -selfcert -alias mycert -keystore server.keystore -validity 3950</code></p>

<ol start=""3"">
<li>Export certificate to folder:</li>
</ol>

<p><code>keytool -export -alias mycert -keystore server.keystore -rfc -file mycert.cer</code></p>

<ol start=""4"">
<li>Import Certificate into client Truststore:</li>
</ol>

<p><code>keytool -importcert -alias mycert -file mycert.cer -keystore truststore</code></p>
","220903","<java><ssl><keytool><jce>","237","21","7","2019-10-24 07:36:06","6341566","4","114","3885376","","2015-02-17 16:39:57","2011-06-14 08:23:14",""
"6340918","Trust Store vs Key Store - creating with keytool","<p>I understand that the keystore would usually hold private/public keys and the trust store only public keys (and represents the list of trusted parties you intend to communicate with). Well, that's my first assumption, so if that's not correct, I probably haven't started very well...</p>

<p><strong>I was interested though in understanding how / when you distinguish the stores when using keytool.</strong></p>

<p>So, far I've created a keystore using</p>

<pre><code>keytool -import -alias bob -file bob.crt -keystore keystore.ks
</code></pre>

<p>which creates my keystore.ks file. I answer <code>yes</code> to the question do I trust bob but it is unclear to me if this has created a keystore file or a truststore file? I can set up my application to use the file as either.</p>

<pre><code>-Djavax.net.ssl.keyStore=keystore.ks -Djavax.net.ssl.keyStorePassword=x
-Djavax.net.ssl.trustStore=keystore.ks -Djavax.net.ssl.trustStorePassword=x
</code></pre>

<p>and with <code>System.setProperty( ""javax.net.debug"", ""ssl"")</code> set, I can see the certificate under trusted certifications (but not under the keystore section). The particular certificate I'm importing has only a public key and I intend to use it to send stuff over an SSL connection to Bob (but perhaps that's best left for another question!).</p>

<p>Any pointers or clarifications would be much appreciated. Is the output of keytool the same whatever you import and its just convention that says one is a keystore and the other a trust store? What's the relationship when using SSL etc?</p>
","<p>keystore simply stores private keys, wheras truststore stores public keys. You will want to generate a java certificate for SSL communication. You can use a keygen command in windows, this will probably be the most easy solution.</p>
","220903","<java><ssl><keytool><jce>","237","-1","7","2019-10-24 07:36:06","6341566","4","114","3885376","","2015-02-17 16:39:57","2011-06-14 08:23:14",""
"6340918","Trust Store vs Key Store - creating with keytool","<p>I understand that the keystore would usually hold private/public keys and the trust store only public keys (and represents the list of trusted parties you intend to communicate with). Well, that's my first assumption, so if that's not correct, I probably haven't started very well...</p>

<p><strong>I was interested though in understanding how / when you distinguish the stores when using keytool.</strong></p>

<p>So, far I've created a keystore using</p>

<pre><code>keytool -import -alias bob -file bob.crt -keystore keystore.ks
</code></pre>

<p>which creates my keystore.ks file. I answer <code>yes</code> to the question do I trust bob but it is unclear to me if this has created a keystore file or a truststore file? I can set up my application to use the file as either.</p>

<pre><code>-Djavax.net.ssl.keyStore=keystore.ks -Djavax.net.ssl.keyStorePassword=x
-Djavax.net.ssl.trustStore=keystore.ks -Djavax.net.ssl.trustStorePassword=x
</code></pre>

<p>and with <code>System.setProperty( ""javax.net.debug"", ""ssl"")</code> set, I can see the certificate under trusted certifications (but not under the keystore section). The particular certificate I'm importing has only a public key and I intend to use it to send stuff over an SSL connection to Bob (but perhaps that's best left for another question!).</p>

<p>Any pointers or clarifications would be much appreciated. Is the output of keytool the same whatever you import and its just convention that says one is a keystore and the other a trust store? What's the relationship when using SSL etc?</p>
","<p>To explain in common usecase/purpose or layman way: </p>

<blockquote>
  <p><strong>TrustStore</strong> : As the name indicates, its normally used to store the certificates
  of trusted entities. A process can maintain a store of certificates of all its trusted parties
  which  it trusts.</p>
  
  <p><strong>keyStore</strong> : Used to store the server keys (both public and private)
  along with signed cert.</p>
</blockquote>

<p>During the SSL handshake, </p>

<ol>
<li><p>A client tries to access https:// </p></li>
<li><p>And thus, Server responds by providing a SSL certificate (which is stored in its keyStore)</p></li>
<li><p>Now, the client receives the SSL certificate and verifies it via trustStore (i.e the client's trustStore already has pre-defined set of certificates which it trusts.). Its like : Can I trust this server ? Is this the same server whom I am trying to talk to ? No middle man attacks ?</p></li>
<li><p>Once, the client verifies that it is talking to server which it trusts, then SSL communication can happen over a shared secret key. </p></li>
</ol>

<p>Note : I am not talking here anything about client authentication on server side. If a server wants to do a client authentication too, then the server also maintains a trustStore to verify client.</p>
","220903","<java><ssl><keytool><jce>","237","49","7","2019-10-24 07:36:06","6341566","4","114","3885376","","2015-02-17 16:39:57","2011-06-14 08:23:14",""
"6340918","Trust Store vs Key Store - creating with keytool","<p>I understand that the keystore would usually hold private/public keys and the trust store only public keys (and represents the list of trusted parties you intend to communicate with). Well, that's my first assumption, so if that's not correct, I probably haven't started very well...</p>

<p><strong>I was interested though in understanding how / when you distinguish the stores when using keytool.</strong></p>

<p>So, far I've created a keystore using</p>

<pre><code>keytool -import -alias bob -file bob.crt -keystore keystore.ks
</code></pre>

<p>which creates my keystore.ks file. I answer <code>yes</code> to the question do I trust bob but it is unclear to me if this has created a keystore file or a truststore file? I can set up my application to use the file as either.</p>

<pre><code>-Djavax.net.ssl.keyStore=keystore.ks -Djavax.net.ssl.keyStorePassword=x
-Djavax.net.ssl.trustStore=keystore.ks -Djavax.net.ssl.trustStorePassword=x
</code></pre>

<p>and with <code>System.setProperty( ""javax.net.debug"", ""ssl"")</code> set, I can see the certificate under trusted certifications (but not under the keystore section). The particular certificate I'm importing has only a public key and I intend to use it to send stuff over an SSL connection to Bob (but perhaps that's best left for another question!).</p>

<p>Any pointers or clarifications would be much appreciated. Is the output of keytool the same whatever you import and its just convention that says one is a keystore and the other a trust store? What's the relationship when using SSL etc?</p>
","<p>In simplest terms :</p>

<p><strong>Keystore</strong> is used to store your credential (server or client) while <strong>truststore</strong> is used to store others credential (Certificates from CA).</p>

<p>Keystore is needed when you are setting up server side on SSL, it is used to store server's identity certificate, which server will present to a client on the connection while trust store setup on client side must contain to make the connection work. If you browser to connect to any website over SSL it verifies certificate presented by server against its truststore.</p>
","220903","<java><ssl><keytool><jce>","237","-1","7","2019-10-24 07:36:06","6341566","4","114","3885376","","2015-02-17 16:39:57","2011-06-14 08:23:14",""
"6340918","Trust Store vs Key Store - creating with keytool","<p>I understand that the keystore would usually hold private/public keys and the trust store only public keys (and represents the list of trusted parties you intend to communicate with). Well, that's my first assumption, so if that's not correct, I probably haven't started very well...</p>

<p><strong>I was interested though in understanding how / when you distinguish the stores when using keytool.</strong></p>

<p>So, far I've created a keystore using</p>

<pre><code>keytool -import -alias bob -file bob.crt -keystore keystore.ks
</code></pre>

<p>which creates my keystore.ks file. I answer <code>yes</code> to the question do I trust bob but it is unclear to me if this has created a keystore file or a truststore file? I can set up my application to use the file as either.</p>

<pre><code>-Djavax.net.ssl.keyStore=keystore.ks -Djavax.net.ssl.keyStorePassword=x
-Djavax.net.ssl.trustStore=keystore.ks -Djavax.net.ssl.trustStorePassword=x
</code></pre>

<p>and with <code>System.setProperty( ""javax.net.debug"", ""ssl"")</code> set, I can see the certificate under trusted certifications (but not under the keystore section). The particular certificate I'm importing has only a public key and I intend to use it to send stuff over an SSL connection to Bob (but perhaps that's best left for another question!).</p>

<p>Any pointers or clarifications would be much appreciated. Is the output of keytool the same whatever you import and its just convention that says one is a keystore and the other a trust store? What's the relationship when using SSL etc?</p>
","<p>These are the steps to create a Truststore in your local machine using Keytool.
Steps to create truststore for a URL in your local machine.</p>

<p>1) Hit the url in the browser using chrome</p>

<p>2) Check for the <strong>""i""</strong> icon to the left of the url in the chrome and click it</p>

<p>3) Check for <strong>certificate option</strong> and click it and a Dialog box will open</p>

<p>4) check the <strong>""certificate path"" tab</strong> for the number of certificates available to create the truststore</p>

<p>5) Go the <code>""details"" tab -&gt; click""Copy to File"" -&gt; Give the path and the name for the certificate</code> you want to create.</p>

<p>6) Check if it has parent certificates and follow the point <strong>""5""</strong>.</p>

<p>7) After all the certificates are being create open Command Prompt and navigate to the path where you created the certificates.</p>

<p>8) provide the below Keytool command to add the certificates and create a truststore.</p>

<pre><code>Sample: 
   keytool -import -alias abcdefg -file abcdefg.cer -keystore cacerts
        where ""abcdefg"" is the alias name and ""abcdefg.cer"" is the actual certificate name and ""cacerts"" is the truststore name
</code></pre>

<p>9) Provide the keytool command for all the certificates and add them to the trust store.</p>

<pre><code>    keytool -list -v -keystore cacerts
</code></pre>
","220903","<java><ssl><keytool><jce>","237","0","7","2019-10-24 07:36:06","6341566","4","114","3885376","","2015-02-17 16:39:57","2011-06-14 08:23:14",""
"3103652","Hash String via SHA-256 in Java","<p>By looking around here as well as the internet in general, I have found <a href=""http://www.bouncycastle.org"" rel=""noreferrer"">Bouncy Castle</a>. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?</p>
","<p>To hash a string, use the built-in <a href=""http://docs.oracle.com/javase/8/docs/api/java/security/MessageDigest.html"" rel=""noreferrer"">MessageDigest</a> class:</p>

<pre><code>import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.nio.charset.StandardCharsets;
import java.math.BigInteger;

public class CryptoHash {
  public static void main(String[] args) throws NoSuchAlgorithmException {
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    String text = ""Text to hash, cryptographically."";

    // Change this to UTF-16 if needed
    md.update(text.getBytes(StandardCharsets.UTF_8));
    byte[] digest = md.digest();

    String hex = String.format(""%064x"", new BigInteger(1, digest));
    System.out.println(hex);
  }
}
</code></pre>

<p>In the snippet above, <code>digest</code> contains the hashed string and <code>hex</code> contains a hexadecimal ASCII string with left zero padding.</p>
","191566","<java><bouncycastle><sha256><jce>","108","255","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","<p>By looking around here as well as the internet in general, I have found <a href=""http://www.bouncycastle.org"" rel=""noreferrer"">Bouncy Castle</a>. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?</p>
","<p>When using hashcodes with any jce provider you first try to get an 
instance of the algorithm, then update it with the data you want to be hashed 
and when you are finished you call digest to get the hash value. </p>

<pre><code>MessageDigest sha = MessageDigest.getInstance(""SHA-256"");
sha.update(in.getBytes());
byte[] digest = sha.digest();
</code></pre>

<p>you can use the digest to get a base64 or hex encoded version according to your needs</p>
","191566","<java><bouncycastle><sha256><jce>","108","8","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","<p>By looking around here as well as the internet in general, I have found <a href=""http://www.bouncycastle.org"" rel=""noreferrer"">Bouncy Castle</a>. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?</p>
","<p>This is already implemented in the runtime libs.</p>

<pre><code>public static String calc(InputStream is) {
    String output;
    int read;
    byte[] buffer = new byte[8192];

    try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        while ((read = is.read(buffer)) &gt; 0) {
            digest.update(buffer, 0, read);
        }
        byte[] hash = digest.digest();
        BigInteger bigInt = new BigInteger(1, hash);
        output = bigInt.toString(16);
        while ( output.length() &lt; 32 ) {
            output = ""0""+output;
        }
    } 
    catch (Exception e) {
        e.printStackTrace(System.err);
        return null;
    }

    return output;
}
</code></pre>

<p>In a JEE6+ environment one could also use JAXB <a href=""http://docs.oracle.com/javaee/6/api/javax/xml/bind/DatatypeConverter.html"" rel=""nofollow noreferrer"">DataTypeConverter</a>:</p>

<pre><code>import javax.xml.bind.DatatypeConverter;

String hash = DatatypeConverter.printHexBinary( 
           MessageDigest.getInstance(""MD5"").digest(""SOMESTRING"".getBytes(""UTF-8"")));
</code></pre>
","191566","<java><bouncycastle><sha256><jce>","108","30","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","<p>By looking around here as well as the internet in general, I have found <a href=""http://www.bouncycastle.org"" rel=""noreferrer"">Bouncy Castle</a>. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?</p>
","<pre><code>return new String(Hex.encode(digest));
</code></pre>
","191566","<java><bouncycastle><sha256><jce>","108","0","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","<p>By looking around here as well as the internet in general, I have found <a href=""http://www.bouncycastle.org"" rel=""noreferrer"">Bouncy Castle</a>. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?</p>
","<p>I suppose you are using a relatively old Java Version without SHA-256.
So you must add the BouncyCastle Provider to the already provided 'Security Providers' in your java version.</p>

<pre><code>    // NEEDED if you are using a Java version without SHA-256    
    Security.addProvider(new BouncyCastleProvider());

    // then go as usual 
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    String text = ""my string..."";
    md.update(text.getBytes(""UTF-8"")); // or UTF-16 if needed
    byte[] digest = md.digest();
</code></pre>
","191566","<java><bouncycastle><sha256><jce>","108","5","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","<p>By looking around here as well as the internet in general, I have found <a href=""http://www.bouncycastle.org"" rel=""noreferrer"">Bouncy Castle</a>. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?</p>
","<p>This will work with ""org.bouncycastle.util.encoders.Hex"" following package </p>

<pre><code>return new String(Hex.encode(digest));
</code></pre>

<p>Its in bouncycastle jar.</p>
","191566","<java><bouncycastle><sha256><jce>","108","-1","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","<p>By looking around here as well as the internet in general, I have found <a href=""http://www.bouncycastle.org"" rel=""noreferrer"">Bouncy Castle</a>. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?</p>
","<p>You don't necessarily  need the BouncyCastle library. The following code shows how to do so using the Integer.toHexString function</p>

<pre><code>public static String sha256(String base) {
    try{
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        byte[] hash = digest.digest(base.getBytes(""UTF-8""));
        StringBuffer hexString = new StringBuffer();

        for (int i = 0; i &lt; hash.length; i++) {
            String hex = Integer.toHexString(0xff &amp; hash[i]);
            if(hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }

        return hexString.toString();
    } catch(Exception ex){
       throw new RuntimeException(ex);
    }
}
</code></pre>

<p>Special thanks to user1452273 from this post: <a href=""https://stackoverflow.com/questions/5531455/how-to-encode-some-string-with-sha256-in-java/11009612#11009612"">How to hash some string with sha256 in Java?</a></p>

<p>Keep up the good work !</p>
","191566","<java><bouncycastle><sha256><jce>","108","16","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"3103652","Hash String via SHA-256 in Java","<p>By looking around here as well as the internet in general, I have found <a href=""http://www.bouncycastle.org"" rel=""noreferrer"">Bouncy Castle</a>. I want to use Bouncy Castle (or some other freely available utility) to generate a SHA-256 Hash of a String in Java. Looking at their documentation I can't seem to find any good examples of what I want to do. Can anybody here help me out?</p>
","<p>Java 8: Base64 available:</p>

<pre><code>    MessageDigest md = MessageDigest.getInstance( ""SHA-512"" );
    md.update( inbytes );
    byte[] aMessageDigest = md.digest();

    String outEncoded = Base64.getEncoder().encodeToString( aMessageDigest );
    return( outEncoded );
</code></pre>
","191566","<java><bouncycastle><sha256><jce>","108","7","8","2018-10-02 14:41:20","3103722","0","42","276076","","2016-07-21 10:54:55","2010-06-23 16:41:31",""
"1179672","How to avoid installing ""Unlimited Strength"" JCE policy files when deploying an application?","<p>I have an app that uses 256-bit AES encryption which is not supported by Java out of the box. I know to get this to function correctly I install the JCE unlimited strength jars in the security folder. This is fine for me being the developer, I can install them.</p>

<p>My question is since this app will be distributed, end users most likely will not have these policy files installed. Having the end user download these just to make the app function is not an attractive solution. </p>

<p>Is there a way to make my app run without overwriting files on the end user machine? A third party software that can handle it without the policy files installed? Or a way to just reference these policy files from within a JAR? </p>
","<p>During installation of your program, just prompt the user and have a DOS Batch script or a Bash shell script download and copy the JCE into the proper system location.</p>

<p>I used to have to do this for a server webservice and instead of a formal installer, I just provided scripts to setup the app before the user could run it.   You can make the app un-runnable until they run the setup script.  You could also make the app complain that the JCE is missing and then ask to download and restart the app?</p>
","125264","<java><aes><jce><policyfiles>","167","0","11","2019-06-15 10:50:18","","3","78","474189","","2014-09-15 11:24:15","2009-07-24 19:27:09",""
"1179672","How to avoid installing ""Unlimited Strength"" JCE policy files when deploying an application?","<p>I have an app that uses 256-bit AES encryption which is not supported by Java out of the box. I know to get this to function correctly I install the JCE unlimited strength jars in the security folder. This is fine for me being the developer, I can install them.</p>

<p>My question is since this app will be distributed, end users most likely will not have these policy files installed. Having the end user download these just to make the app function is not an attractive solution. </p>

<p>Is there a way to make my app run without overwriting files on the end user machine? A third party software that can handle it without the policy files installed? Or a way to just reference these policy files from within a JAR? </p>
","<p>For our application, we had a client server architecture and we only allowed decrypting/encrypting data in the server level. Hence the JCE files are only needed there. </p>

<p>We had another problem where we needed to update a security jar on the client machines, through JNLP, it overwrites the libraries in<code>${java.home}/lib/security/</code> and the JVM on first run.  </p>

<p>That made it work.</p>
","125264","<java><aes><jce><policyfiles>","167","3","11","2019-06-15 10:50:18","","3","78","474189","","2014-09-15 11:24:15","2009-07-24 19:27:09",""
"1179672","How to avoid installing ""Unlimited Strength"" JCE policy files when deploying an application?","<p>I have an app that uses 256-bit AES encryption which is not supported by Java out of the box. I know to get this to function correctly I install the JCE unlimited strength jars in the security folder. This is fine for me being the developer, I can install them.</p>

<p>My question is since this app will be distributed, end users most likely will not have these policy files installed. Having the end user download these just to make the app function is not an attractive solution. </p>

<p>Is there a way to make my app run without overwriting files on the end user machine? A third party software that can handle it without the policy files installed? Or a way to just reference these policy files from within a JAR? </p>
","<p>For an alternative cryptography library, have a look at <a href=""http://www.bouncycastle.org/"" rel=""noreferrer"">Bouncy Castle</a>.  It has AES and a lot of added functionality. It's a liberal open source library. You will have to use the lightweight, proprietary Bouncy Castle API for this to work though.</p>
","125264","<java><aes><jce><policyfiles>","167","8","11","2019-06-15 10:50:18","","3","78","474189","","2014-09-15 11:24:15","2009-07-24 19:27:09",""
"1179672","How to avoid installing ""Unlimited Strength"" JCE policy files when deploying an application?","<p>I have an app that uses 256-bit AES encryption which is not supported by Java out of the box. I know to get this to function correctly I install the JCE unlimited strength jars in the security folder. This is fine for me being the developer, I can install them.</p>

<p>My question is since this app will be distributed, end users most likely will not have these policy files installed. Having the end user download these just to make the app function is not an attractive solution. </p>

<p>Is there a way to make my app run without overwriting files on the end user machine? A third party software that can handle it without the policy files installed? Or a way to just reference these policy files from within a JAR? </p>
","<p>Bouncy Castle still requires jars installed as far as I can tell.</p>

<p>I did a little test and it seemed to confirm this:</p>

<p><a href=""http://www.bouncycastle.org/wiki/display/JA1/Frequently+Asked+Questions"" rel=""noreferrer"">http://www.bouncycastle.org/wiki/display/JA1/Frequently+Asked+Questions</a></p>
","125264","<java><aes><jce><policyfiles>","167","13","11","2019-06-15 10:50:18","","3","78","474189","","2014-09-15 11:24:15","2009-07-24 19:27:09",""
"1179672","How to avoid installing ""Unlimited Strength"" JCE policy files when deploying an application?","<p>I have an app that uses 256-bit AES encryption which is not supported by Java out of the box. I know to get this to function correctly I install the JCE unlimited strength jars in the security folder. This is fine for me being the developer, I can install them.</p>

<p>My question is since this app will be distributed, end users most likely will not have these policy files installed. Having the end user download these just to make the app function is not an attractive solution. </p>

<p>Is there a way to make my app run without overwriting files on the end user machine? A third party software that can handle it without the policy files installed? Or a way to just reference these policy files from within a JAR? </p>
","<p>There are a couple of commonly quoted solutions to this problem. Unfortunately neither of these are entirely satisfactory:</p>

<ul>
<li><strong>Install the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""noreferrer"">unlimited strength policy files</a>.</strong> While this is probably the right solution for your development workstation, it quickly becomes a major hassle (if not a roadblock) to have non-technical users install the files on every computer. There is <strong>no way</strong> to distribute the files with your program; they must be installed in the JRE directory (which may even be read-only due to permissions).</li>
<li><strong>Skip the JCE API</strong> and use another cryptography library such as <a href=""http://www.bouncycastle.org/"" rel=""noreferrer"">Bouncy Castle</a>. This approach requires an extra 1MB library, which may be a significant burden depending on the application. It also feels silly to duplicate functionality included in the standard libraries. Obviously, the API is also completely different from the usual JCE interface. (BC does implement a JCE provider, but that doesn't help because the key strength restrictions are applied <em>before</em> handing over to the implementation.) This solution also won't let you use 256-bit TLS (SSL) cipher suites, because the standard TLS libraries call the JCE internally to determine any restrictions.</li>
</ul>

<p><strong>But then there's reflection.</strong> Is there anything you can't do using reflection?</p>

<pre class=""lang-java prettyprint-override""><code>private static void removeCryptographyRestrictions() {
    if (!isRestrictedCryptography()) {
        logger.fine(""Cryptography restrictions removal not needed"");
        return;
    }
    try {
        /*
         * Do the following, but with reflection to bypass access checks:
         *
         * JceSecurity.isRestricted = false;
         * JceSecurity.defaultPolicy.perms.clear();
         * JceSecurity.defaultPolicy.add(CryptoAllPermission.INSTANCE);
         */
        final Class&lt;?&gt; jceSecurity = Class.forName(""javax.crypto.JceSecurity"");
        final Class&lt;?&gt; cryptoPermissions = Class.forName(""javax.crypto.CryptoPermissions"");
        final Class&lt;?&gt; cryptoAllPermission = Class.forName(""javax.crypto.CryptoAllPermission"");

        final Field isRestrictedField = jceSecurity.getDeclaredField(""isRestricted"");
        isRestrictedField.setAccessible(true);
        final Field modifiersField = Field.class.getDeclaredField(""modifiers"");
        modifiersField.setAccessible(true);
        modifiersField.setInt(isRestrictedField, isRestrictedField.getModifiers() &amp; ~Modifier.FINAL);
        isRestrictedField.set(null, false);

        final Field defaultPolicyField = jceSecurity.getDeclaredField(""defaultPolicy"");
        defaultPolicyField.setAccessible(true);
        final PermissionCollection defaultPolicy = (PermissionCollection) defaultPolicyField.get(null);

        final Field perms = cryptoPermissions.getDeclaredField(""perms"");
        perms.setAccessible(true);
        ((Map&lt;?, ?&gt;) perms.get(defaultPolicy)).clear();

        final Field instance = cryptoAllPermission.getDeclaredField(""INSTANCE"");
        instance.setAccessible(true);
        defaultPolicy.add((Permission) instance.get(null));

        logger.fine(""Successfully removed cryptography restrictions"");
    } catch (final Exception e) {
        logger.log(Level.WARNING, ""Failed to remove cryptography restrictions"", e);
    }
}

private static boolean isRestrictedCryptography() {
    // This matches Oracle Java 7 and 8, but not Java 9 or OpenJDK.
    final String name = System.getProperty(""java.runtime.name"");
    final String ver = System.getProperty(""java.version"");
    return name != null &amp;&amp; name.equals(""Java(TM) SE Runtime Environment"")
            &amp;&amp; ver != null &amp;&amp; (ver.startsWith(""1.7"") || ver.startsWith(""1.8""));
}
</code></pre>

<p>Simply call <code>removeCryptographyRestrictions()</code> from a static initializer or such before performing any cryptographic operations.</p>

<p>The <code>JceSecurity.isRestricted = false</code> part is all that is needed to use 256-bit ciphers directly; however, without the two other operations, <code>Cipher.getMaxAllowedKeyLength()</code> will still keep reporting 128, and 256-bit TLS cipher suites won't work.</p>

<p>This code works on Oracle Java 7 and 8, and automatically skips the process on Java 9 and OpenJDK where it's not needed. Being an ugly hack after all, it likely doesn't work on other vendors' VMs.</p>

<p>It also doesn't work on Oracle Java 6, because the private JCE classes are obfuscated there. The obfuscation does not change from version to version though, so it is still technically possible to support Java 6.</p>
","125264","<java><aes><jce><policyfiles>","167","173","11","2019-06-15 10:50:18","","3","78","474189","","2014-09-15 11:24:15","2009-07-24 19:27:09",""
"1179672","How to avoid installing ""Unlimited Strength"" JCE policy files when deploying an application?","<p>I have an app that uses 256-bit AES encryption which is not supported by Java out of the box. I know to get this to function correctly I install the JCE unlimited strength jars in the security folder. This is fine for me being the developer, I can install them.</p>

<p>My question is since this app will be distributed, end users most likely will not have these policy files installed. Having the end user download these just to make the app function is not an attractive solution. </p>

<p>Is there a way to make my app run without overwriting files on the end user machine? A third party software that can handle it without the policy files installed? Or a way to just reference these policy files from within a JAR? </p>
","<p>Here is solution: <a href=""http://middlesphere-1.blogspot.ru/2014/06/this-code-allows-to-break-limit-if.html"">http://middlesphere-1.blogspot.ru/2014/06/this-code-allows-to-break-limit-if.html</a></p>

<pre><code>//this code allows to break limit if client jdk/jre has no unlimited policy files for JCE.
//it should be run once. So this static section is always execute during the class loading process.
//this code is useful when working with Bouncycastle library.
static {
    try {
        Field field = Class.forName(""javax.crypto.JceSecurity"").getDeclaredField(""isRestricted"");
        field.setAccessible(true);
        field.set(null, java.lang.Boolean.FALSE);
    } catch (Exception ex) {
    }
}
</code></pre>
","125264","<java><aes><jce><policyfiles>","167","22","11","2019-06-15 10:50:18","","3","78","474189","","2014-09-15 11:24:15","2009-07-24 19:27:09",""
"1179672","How to avoid installing ""Unlimited Strength"" JCE policy files when deploying an application?","<p>I have an app that uses 256-bit AES encryption which is not supported by Java out of the box. I know to get this to function correctly I install the JCE unlimited strength jars in the security folder. This is fine for me being the developer, I can install them.</p>

<p>My question is since this app will be distributed, end users most likely will not have these policy files installed. Having the end user download these just to make the app function is not an attractive solution. </p>

<p>Is there a way to make my app run without overwriting files on the end user machine? A third party software that can handle it without the policy files installed? Or a way to just reference these policy files from within a JAR? </p>
","<p>You could use method</p>

<pre><code>javax.crypto.Cipher.getMaxAllowedKeyLength(String transformation)
</code></pre>

<p>to test the available key length, use that and inform the user about what is going on. Something stating that your application is falling back to 128 bit keys due to the policy files not being installed, for example. Security conscious users will install the policy files, others will continue using weaker keys.</p>
","125264","<java><aes><jce><policyfiles>","167","4","11","2019-06-15 10:50:18","","3","78","474189","","2014-09-15 11:24:15","2009-07-24 19:27:09",""
"1179672","How to avoid installing ""Unlimited Strength"" JCE policy files when deploying an application?","<p>I have an app that uses 256-bit AES encryption which is not supported by Java out of the box. I know to get this to function correctly I install the JCE unlimited strength jars in the security folder. This is fine for me being the developer, I can install them.</p>

<p>My question is since this app will be distributed, end users most likely will not have these policy files installed. Having the end user download these just to make the app function is not an attractive solution. </p>

<p>Is there a way to make my app run without overwriting files on the end user machine? A third party software that can handle it without the policy files installed? Or a way to just reference these policy files from within a JAR? </p>
","<p>As of JDK 8u102, the posted solutions relying on reflection will no longer work:  the field that these solutions set is now <code>final</code> (<a href=""https://bugs.openjdk.java.net/browse/JDK-8149417"">https://bugs.openjdk.java.net/browse/JDK-8149417</a>).</p>

<p>Looks like it's back to either (a) using Bouncy Castle, or (b) installing the JCE policy files.</p>
","125264","<java><aes><jce><policyfiles>","167","13","11","2019-06-15 10:50:18","","3","78","474189","","2014-09-15 11:24:15","2009-07-24 19:27:09",""
"1179672","How to avoid installing ""Unlimited Strength"" JCE policy files when deploying an application?","<p>I have an app that uses 256-bit AES encryption which is not supported by Java out of the box. I know to get this to function correctly I install the JCE unlimited strength jars in the security folder. This is fine for me being the developer, I can install them.</p>

<p>My question is since this app will be distributed, end users most likely will not have these policy files installed. Having the end user download these just to make the app function is not an attractive solution. </p>

<p>Is there a way to make my app run without overwriting files on the end user machine? A third party software that can handle it without the policy files installed? Or a way to just reference these policy files from within a JAR? </p>
","<p>This is now no longer needed for <strong>Java 9</strong>, nor for any recent release of Java 6, 7, or 8. Finally! :)</p>

<p>Per <a href=""https://bugs.openjdk.java.net/browse/JDK-8170157"" rel=""nofollow noreferrer"">JDK-8170157</a>, the unlimited cryptographic policy is now enabled by default.</p>

<p>Specific versions from the JIRA issue:</p>

<ul>
<li>Java 9 (10, 11, etc..): Any official release!</li>
<li>Java 8u161 or later (Available <em>now</em>)</li>
<li>Java 7u171 or later (Only available through 'My Oracle Support')</li>
<li>Java 6u181 or later (Only available through 'My Oracle Support')</li>
</ul>

<p>Note that if for some odd reason the old behavior is needed in Java 9, it can be set using:</p>

<pre><code>Security.setProperty(""crypto.policy"", ""limited"");
</code></pre>
","125264","<java><aes><jce><policyfiles>","167","85","11","2019-06-15 10:50:18","","3","78","474189","","2014-09-15 11:24:15","2009-07-24 19:27:09",""
"1179672","How to avoid installing ""Unlimited Strength"" JCE policy files when deploying an application?","<p>I have an app that uses 256-bit AES encryption which is not supported by Java out of the box. I know to get this to function correctly I install the JCE unlimited strength jars in the security folder. This is fine for me being the developer, I can install them.</p>

<p>My question is since this app will be distributed, end users most likely will not have these policy files installed. Having the end user download these just to make the app function is not an attractive solution. </p>

<p>Is there a way to make my app run without overwriting files on the end user machine? A third party software that can handle it without the policy files installed? Or a way to just reference these policy files from within a JAR? </p>
","<p>Here's a updated version of <a href=""https://stackoverflow.com/a/22492582/1266705"">ntoskrnl</a> answer.
It additionally contains a function  to remove the final modifier like <a href=""https://stackoverflow.com/users/6178459/arjan"">Arjan</a> mentioned in the comments.</p>

<p>This version works with JRE 8u111 or newer.</p>

<pre><code>private static void removeCryptographyRestrictions() {
    if (!isRestrictedCryptography()) {
        return;
    }
    try {
        /*
         * Do the following, but with reflection to bypass access checks:
         * 
         * JceSecurity.isRestricted = false; JceSecurity.defaultPolicy.perms.clear();
         * JceSecurity.defaultPolicy.add(CryptoAllPermission.INSTANCE);
         */
        final Class&lt;?&gt; jceSecurity = Class.forName(""javax.crypto.JceSecurity"");
        final Class&lt;?&gt; cryptoPermissions = Class.forName(""javax.crypto.CryptoPermissions"");
        final Class&lt;?&gt; cryptoAllPermission = Class.forName(""javax.crypto.CryptoAllPermission"");

        Field isRestrictedField = jceSecurity.getDeclaredField(""isRestricted"");
        isRestrictedField.setAccessible(true);
        setFinalStatic(isRestrictedField, true);
        isRestrictedField.set(null, false);

        final Field defaultPolicyField = jceSecurity.getDeclaredField(""defaultPolicy"");
        defaultPolicyField.setAccessible(true);
        final PermissionCollection defaultPolicy = (PermissionCollection) defaultPolicyField.get(null);

        final Field perms = cryptoPermissions.getDeclaredField(""perms"");
        perms.setAccessible(true);
        ((Map&lt;?, ?&gt;) perms.get(defaultPolicy)).clear();

        final Field instance = cryptoAllPermission.getDeclaredField(""INSTANCE"");
        instance.setAccessible(true);
        defaultPolicy.add((Permission) instance.get(null));
    }
    catch (final Exception e) {
        e.printStackTrace();
    }
}

static void setFinalStatic(Field field, Object newValue) throws Exception {
      field.setAccessible(true);

      Field modifiersField = Field.class.getDeclaredField(""modifiers"");
      modifiersField.setAccessible(true);
      modifiersField.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);

      field.set(null, newValue);
   }

private static boolean isRestrictedCryptography() {
    // This simply matches the Oracle JRE, but not OpenJDK.
    return ""Java(TM) SE Runtime Environment"".equals(System.getProperty(""java.runtime.name""));
}
</code></pre>
","125264","<java><aes><jce><policyfiles>","167","2","11","2019-06-15 10:50:18","","3","78","474189","","2014-09-15 11:24:15","2009-07-24 19:27:09",""
"1179672","How to avoid installing ""Unlimited Strength"" JCE policy files when deploying an application?","<p>I have an app that uses 256-bit AES encryption which is not supported by Java out of the box. I know to get this to function correctly I install the JCE unlimited strength jars in the security folder. This is fine for me being the developer, I can install them.</p>

<p>My question is since this app will be distributed, end users most likely will not have these policy files installed. Having the end user download these just to make the app function is not an attractive solution. </p>

<p>Is there a way to make my app run without overwriting files on the end user machine? A third party software that can handle it without the policy files installed? Or a way to just reference these policy files from within a JAR? </p>
","<p>Here is a modified version of @ntoskrnl's code featuring <code>isRestrictedCryptography</code> check by <a href=""https://stackoverflow.com/questions/7953567/checking-if-unlimited-cryptography-is-available"">actual <code>Cipher.getMaxAllowedKeyLength</code></a>, slf4j logging and support of singleton initialization from application bootstrap like this:</p>

<pre><code>static {
    UnlimitedKeyStrengthJurisdictionPolicy.ensure();
}
</code></pre>

<p>This code would correctly stop mangling with reflection when unlimited policy becomes available by default in Java 8u162 as @cranphin's answer predicts.</p>

<hr>

<pre><code>import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.crypto.Cipher;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.security.NoSuchAlgorithmException;
import java.security.Permission;
import java.security.PermissionCollection;
import java.util.Map;

// https://stackoverflow.com/questions/1179672/how-to-avoid-installing-unlimited-strength-jce-policy-files-when-deploying-an
public class UnlimitedKeyStrengthJurisdictionPolicy {

    private static final Logger log = LoggerFactory.getLogger(UnlimitedKeyStrengthJurisdictionPolicy.class);

    private static boolean isRestrictedCryptography() throws NoSuchAlgorithmException {
        return Cipher.getMaxAllowedKeyLength(""AES/ECB/NoPadding"") &lt;= 128;
    }

    private static void removeCryptographyRestrictions() {
        try {
            if (!isRestrictedCryptography()) {
                log.debug(""Cryptography restrictions removal not needed"");
                return;
            }
            /*
             * Do the following, but with reflection to bypass access checks:
             *
             * JceSecurity.isRestricted = false;
             * JceSecurity.defaultPolicy.perms.clear();
             * JceSecurity.defaultPolicy.add(CryptoAllPermission.INSTANCE);
             */
            Class&lt;?&gt; jceSecurity = Class.forName(""javax.crypto.JceSecurity"");
            Class&lt;?&gt; cryptoPermissions = Class.forName(""javax.crypto.CryptoPermissions"");
            Class&lt;?&gt; cryptoAllPermission = Class.forName(""javax.crypto.CryptoAllPermission"");

            Field isRestrictedField = jceSecurity.getDeclaredField(""isRestricted"");
            isRestrictedField.setAccessible(true);
            Field modifiersField = Field.class.getDeclaredField(""modifiers"");
            modifiersField.setAccessible(true);
            modifiersField.setInt(isRestrictedField, isRestrictedField.getModifiers() &amp; ~Modifier.FINAL);
            isRestrictedField.set(null, false);

            Field defaultPolicyField = jceSecurity.getDeclaredField(""defaultPolicy"");
            defaultPolicyField.setAccessible(true);
            PermissionCollection defaultPolicy = (PermissionCollection) defaultPolicyField.get(null);

            Field perms = cryptoPermissions.getDeclaredField(""perms"");
            perms.setAccessible(true);
            ((Map&lt;?, ?&gt;) perms.get(defaultPolicy)).clear();

            Field instance = cryptoAllPermission.getDeclaredField(""INSTANCE"");
            instance.setAccessible(true);
            defaultPolicy.add((Permission) instance.get(null));

            log.info(""Successfully removed cryptography restrictions"");
        } catch (Exception e) {
            log.warn(""Failed to remove cryptography restrictions"", e);
        }
    }

    static {
        removeCryptographyRestrictions();
    }

    public static void ensure() {
        // just force loading of this class
    }
}
</code></pre>
","125264","<java><aes><jce><policyfiles>","167","1","11","2019-06-15 10:50:18","","3","78","474189","","2014-09-15 11:24:15","2009-07-24 19:27:09",""
"18228579","How to create a secure random AES key in Java?","<p>What is the recommended way of generating a secure, random AES key in Java, using the standard JDK?</p>

<p>In other posts, I have found this, but using a <code>SecretKeyFactory</code> might be a better idea:</p>

<pre class=""lang-java prettyprint-override""><code>KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
SecureRandom random = new SecureRandom(); // cryptograph. secure random 
keyGen.init(random); 
SecretKey secretKey = keyGen.generateKey();
</code></pre>

<p>It would be great if the answer included an explanation of why it is a good way of generating the random key. Thanks!</p>
","<p>I would use your suggested code, but with a slight simplification:</p>

<pre><code>KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
keyGen.init(256); // for example
SecretKey secretKey = keyGen.generateKey();
</code></pre>

<p>Let the provider select how it plans to obtain randomness - don't define something that may not be as good as what the provider has already selected.</p>

<p>This code example assumes (<a href=""https://stackoverflow.com/a/18229498/589259"">as Maarten points out below</a>) that you've configured your <code>java.security</code> file to include your preferred provider at the top of the list. If you want to manually specify the provider, just call <code>KeyGenerator.getInstance(""AES"", ""providerName"");</code>.</p>

<p>For a truly secure key, you need to be using a <a href=""http://en.wikipedia.org/wiki/Hardware_security_module"" rel=""noreferrer"">hardware security module</a> (HSM) to generate and protect the key. HSM manufacturers will typically supply a JCE provider that will do all the key generation for you, using the code above.</p>
","108786","<java><encryption><aes><jce>","50","73","3","2017-08-22 08:32:30","18228702","2","14","474189","","2013-08-14 10:26:49","2013-08-14 09:55:47",""
"18228579","How to create a secure random AES key in Java?","<p>What is the recommended way of generating a secure, random AES key in Java, using the standard JDK?</p>

<p>In other posts, I have found this, but using a <code>SecretKeyFactory</code> might be a better idea:</p>

<pre class=""lang-java prettyprint-override""><code>KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
SecureRandom random = new SecureRandom(); // cryptograph. secure random 
keyGen.init(random); 
SecretKey secretKey = keyGen.generateKey();
</code></pre>

<p>It would be great if the answer included an explanation of why it is a good way of generating the random key. Thanks!</p>
","<p>Using <code>KeyGenerator</code> would be the preferred method. As Duncan indicated, I would certainly give the key size during initialization. <code>KeyFactory</code> is a method that should be used for pre-existing keys.</p>

<p>OK, so lets get to the nitty-gritty of this. In principle AES keys can have any value. There are no ""weak keys"" as in (3)DES. Nor are there any bits that have a specific meaning as in (3)DES parity bits. So generating a key can be as simple as generating a byte array with random values, and creating a <code>SecretKeySpec</code> around it.</p>

<p>But there are still advantages to the method you are using: the <code>KeyGenerator</code> is specifically created to generate keys. This means that the code may be optimized for this generation. This <em>could</em> have efficiency and security benefits. It might be programmed to avoid a timing side channel attacks that would expose the key, for instance. Note that it may already be a good idea to clear any <code>byte[]</code> that hold key information as they may be leaked into a swap file (this may be the case anyway though).</p>

<p>Furthermore, as said, not all algorithms are using fully random keys. So using <code>KeyGenerator</code> would make it easier to switch to other algorithms. More modern ciphers will only accept fully random keys though; this is seen as a major benefit over e.g. DES.</p>

<p>Finally, and in my case the most important reason, it that the <code>KeyGenerator</code> method is the only valid way of handling AES keys within a secure token (smart card, TPM, USB token or HSM). If you create the <code>byte[]</code> with the <code>SecretKeySpec</code> then the key <em>must</em> come from memory. That means that the key may be put in the secure token, but that the key is exposed in memory regardless. Normally, secure tokens only work with keys that are either generated in the secure token or are injected by e.g. a smart card or a key ceremony. A <code>KeyGenerator</code> can be supplied with a provider so that the key is directly generated within the secure token.</p>

<p>As indicated in <a href=""https://stackoverflow.com/a/18228702/589259"">Duncan's answer</a>: always specify the key size (and any other parameters) explicitly. Do not rely on provider defaults as this <em>will</em> make it unclear what your application is doing, and each provider may have its own defaults.</p>
","108786","<java><encryption><aes><jce>","50","23","3","2017-08-22 08:32:30","18228702","2","14","474189","","2013-08-14 10:26:49","2013-08-14 09:55:47",""
"18228579","How to create a secure random AES key in Java?","<p>What is the recommended way of generating a secure, random AES key in Java, using the standard JDK?</p>

<p>In other posts, I have found this, but using a <code>SecretKeyFactory</code> might be a better idea:</p>

<pre class=""lang-java prettyprint-override""><code>KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
SecureRandom random = new SecureRandom(); // cryptograph. secure random 
keyGen.init(random); 
SecretKey secretKey = keyGen.generateKey();
</code></pre>

<p>It would be great if the answer included an explanation of why it is a good way of generating the random key. Thanks!</p>
","<p>Lots of good advince in the other posts. This is what I use:</p>

<pre><code>Key key;
SecureRandom rand = new SecureRandom();
KeyGenerator generator = KeyGenerator.getInstance(""AES"");
generator.init(256, rand);
key = generator.generateKey();
</code></pre>

<p>If you need another randomness provider, which I sometime do for testing purposes, just replace rand with</p>

<pre><code>MySecureRandom rand = new MySecureRandom();
</code></pre>
","108786","<java><encryption><aes><jce>","50","4","3","2017-08-22 08:32:30","18228702","2","14","474189","","2013-08-14 10:26:49","2013-08-14 09:55:47",""
"3862800","InvalidKeyException Illegal key size","<p>I have a test which runs great on my development MacBook Pro, but fails to run in continuous integration TeamCity server.</p>

<p>The error is following:</p>

<pre><code>java.security.InvalidKeyException: Illegal key size
    at javax.crypto.Cipher.a(DashoA13*..)
    at javax.crypto.Cipher.init(DashoA13*..)
    at javax.crypto.Cipher.init(DashoA13*..)
</code></pre>

<p>Both development box and TeamCity uses Java 1.6 and I use BouncyCastle library for the need of special AES encryption.</p>

<p>The code is following:</p>

<pre><code>private byte[] aesEncryptedInfo(String info) throws UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidParameterSpecException, InvalidAlgorithmParameterException, NoSuchProviderException {
    Security.addProvider(new BouncyCastleProvider());
    SecretKey secret = new SecretKeySpec(CUSTOMLONGSECRETKEY.substring(0, 32).getBytes(), ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"", ""BC"");
    cipher.init(Cipher.ENCRYPT_MODE, secret, new IvParameterSpec(VECTOR_SECRET_KEY.getBytes()));
    return cipher.doFinal(info.getBytes(""UTF-8""));
}
</code></pre>

<p><strong>UPDATE</strong></p>

<p>Looks like according to the selected answer I have to modify something on my TeamCity installation and it will possibly affect some user installations - so its not a good choice I have to switch to another crypto library to do that without limitations. So probably bouncy castle will help.</p>

<p><strong>UPDATE 2</strong></p>

<p>I actually switched to use BouncyCastle to avoid this limitation. Note this only works if you use own BC classes directly, not the BC provider.</p>
","<p>This error means that your Java virtual machine uses a policy that only allows restricted cryptography key sizes due to US export laws.</p>

<h2>Java 9 and higher</h2>

<p>The Unlimited Strength Jurisdiction Policy Files are included with Java 9 and used by default (see <a href=""https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-D6EE05FB-6791-43B3-A610-3F4416DEE508"" rel=""noreferrer"">Security Updates in the Java 9 Migration Guide</a>).</p>

<p>If you get this error with Java 9, it might mean the policy configuration has been changed to a more restrictive policy (<code>limited</code>), see the instructions from the migration guide:</p>

<blockquote>
  <p><strong>JCE Jurisdiction Policy File Default is Unlimited</strong></p>
  
  <p>If your application previously required the Java Cryptography
  Extension (JCE) Unlimited Strength Jurisdiction Policy Files, then you
  no longer need to download or install them. They are included in the
  JDK and are activated by default.</p>
  
  <p>If your country or usage requires a more restrictive policy, the
  limited Java cryptographic policy files are still available.</p>
  
  <p>If you have requirements that are not met by either of the policy
  files provided by default, then you can customize these policy files
  to meet your needs.</p>
  
  <p>See the <code>crypto.policy</code> Security property in the
  <code>&lt;java-home&gt;/conf/security/java.security</code> file, or 
  <a href=""https://docs.oracle.com/javase/9/security/java-cryptography-architecture-jca-reference-guide.htm#JSSEC-GUID-EFA5AC2D-644E-4CD9-8523-C6D3936D5FB1"" rel=""noreferrer"">Cryptographic Strength Configuration</a> in the Java Platform, 
  Standard Edition Security Developer's Guide.</p>
</blockquote>

<h2>Java 8 and earlier</h2>

<h3>Java 8 Update 161 and higher</h3>

<p>Starting with Java 8 Update 161, Java 8 defaults to the Unlimited Strength Jurisdiction Policy. If you receive this error, it could indicate the configuration has been changed to <code>limited</code>. See instructions in the next section on Java 8 Update 151, or the previous section on Java 9, for changing this back to <code>unlimited</code>.</p>

<h3>Java 8 Update 151 and higher</h3>

<p>Starting with Java 8 Update 151, the Unlimited Strength Jurisdiction Policy is included with Java 8 but not used by default. To enable it, you need to edit the <code>java.security</code> file in <code>&lt;java_home&gt;/jre/lib/security</code> (for JDK) or <code>&lt;java_home&gt;/lib/security</code> (for JRE). Uncomment (or include) the line</p>

<pre><code>crypto.policy=unlimited
</code></pre>

<p>Make sure you edit the file using an editor run as administrator.</p>

<p>The policy change only takes effect after restarting the JVM (this is especially important for long-running server processes like Tomcat).</p>

<p>For backwards compatibility, installing the policy files as documented in the next section will still work as well.</p>

<h3>Before Java 8 Update 151</h3>

<p>For Java 8 Update 144 and earlier, you need to install the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files (available at <a href=""http://www.oracle.com/technetwork/java/javase/downloads/index.html"" rel=""noreferrer"">Oracle</a>).</p>

<p>To install these files (from the <code>README.txt</code> in the download):</p>

<blockquote>
  <ol>
  <li><p>Download the unlimited strength JCE policy files.</p></li>
  <li><p>Uncompress and extract the downloaded file.</p>
  
  <p>This will create a subdirectory called jce.
  This directory contains the following files:</p>

<pre><code>README.txt                   This file
local_policy.jar             Unlimited strength local policy file
US_export_policy.jar         Unlimited strength US export policy file
</code></pre></li>
  <li><p>Install the unlimited strength policy JAR files.</p>
  
  <p>In case you later decide to revert to the original ""strong"" but
  limited policy versions, first make a copy of the original JCE
  policy files (US_export_policy.jar and local_policy.jar). Then
  replace the strong policy files with the unlimited strength
  versions extracted in the previous step.</p>
  
  <p>The standard place for JCE jurisdiction policy JAR files is:</p>

<pre><code>&lt;java-home&gt;/lib/security           [Unix]
&lt;java-home&gt;\lib\security           [Windows]
</code></pre></li>
  </ol>
</blockquote>

<p>Note for the JDK it is in jre/lib/security.</p>

<p>The new policy file only takes effect after restarting the JVM (this is especially important for long-running server processes like Tomcat).</p>
","70595","<java><aes><jce>","57","123","5","2019-03-27 08:36:08","3864276","3","22","290050","","2011-09-16 19:03:55","2010-10-05 10:31:15",""
"3862800","InvalidKeyException Illegal key size","<p>I have a test which runs great on my development MacBook Pro, but fails to run in continuous integration TeamCity server.</p>

<p>The error is following:</p>

<pre><code>java.security.InvalidKeyException: Illegal key size
    at javax.crypto.Cipher.a(DashoA13*..)
    at javax.crypto.Cipher.init(DashoA13*..)
    at javax.crypto.Cipher.init(DashoA13*..)
</code></pre>

<p>Both development box and TeamCity uses Java 1.6 and I use BouncyCastle library for the need of special AES encryption.</p>

<p>The code is following:</p>

<pre><code>private byte[] aesEncryptedInfo(String info) throws UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidParameterSpecException, InvalidAlgorithmParameterException, NoSuchProviderException {
    Security.addProvider(new BouncyCastleProvider());
    SecretKey secret = new SecretKeySpec(CUSTOMLONGSECRETKEY.substring(0, 32).getBytes(), ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"", ""BC"");
    cipher.init(Cipher.ENCRYPT_MODE, secret, new IvParameterSpec(VECTOR_SECRET_KEY.getBytes()));
    return cipher.doFinal(info.getBytes(""UTF-8""));
}
</code></pre>

<p><strong>UPDATE</strong></p>

<p>Looks like according to the selected answer I have to modify something on my TeamCity installation and it will possibly affect some user installations - so its not a good choice I have to switch to another crypto library to do that without limitations. So probably bouncy castle will help.</p>

<p><strong>UPDATE 2</strong></p>

<p>I actually switched to use BouncyCastle to avoid this limitation. Note this only works if you use own BC classes directly, not the BC provider.</p>
","<p>In addition to installing policy files, also make sure that <code>CUSTOMLONGSECRETKEY...getBytes()</code> does indeed produce 32 bytes array. I would use <code>CUSTOMLONGSECRETKEY.getBytes(some encoding)</code> and get first 32 bytes from that. Better yet, use whole secret key to derive keys for AES with the size that you need.</p>
","70595","<java><aes><jce>","57","1","5","2019-03-27 08:36:08","3864276","3","22","290050","","2011-09-16 19:03:55","2010-10-05 10:31:15",""
"3862800","InvalidKeyException Illegal key size","<p>I have a test which runs great on my development MacBook Pro, but fails to run in continuous integration TeamCity server.</p>

<p>The error is following:</p>

<pre><code>java.security.InvalidKeyException: Illegal key size
    at javax.crypto.Cipher.a(DashoA13*..)
    at javax.crypto.Cipher.init(DashoA13*..)
    at javax.crypto.Cipher.init(DashoA13*..)
</code></pre>

<p>Both development box and TeamCity uses Java 1.6 and I use BouncyCastle library for the need of special AES encryption.</p>

<p>The code is following:</p>

<pre><code>private byte[] aesEncryptedInfo(String info) throws UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidParameterSpecException, InvalidAlgorithmParameterException, NoSuchProviderException {
    Security.addProvider(new BouncyCastleProvider());
    SecretKey secret = new SecretKeySpec(CUSTOMLONGSECRETKEY.substring(0, 32).getBytes(), ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"", ""BC"");
    cipher.init(Cipher.ENCRYPT_MODE, secret, new IvParameterSpec(VECTOR_SECRET_KEY.getBytes()));
    return cipher.doFinal(info.getBytes(""UTF-8""));
}
</code></pre>

<p><strong>UPDATE</strong></p>

<p>Looks like according to the selected answer I have to modify something on my TeamCity installation and it will possibly affect some user installations - so its not a good choice I have to switch to another crypto library to do that without limitations. So probably bouncy castle will help.</p>

<p><strong>UPDATE 2</strong></p>

<p>I actually switched to use BouncyCastle to avoid this limitation. Note this only works if you use own BC classes directly, not the BC provider.</p>
","<p>I had a similar problem, but in my case, there was a path error.</p>

<p>JAVA_HOME was jdk1.6.0_18, so I put the two jars into <code>jdk1.6.0_18/lib/security</code>, but within jdk1.6.0_18 is the <code>jre</code> directory.  Both files should have been put in <code>jdk1.6.0_18/jre/lib/security</code>.</p>
","70595","<java><aes><jce>","57","8","5","2019-03-27 08:36:08","3864276","3","22","290050","","2011-09-16 19:03:55","2010-10-05 10:31:15",""
"3862800","InvalidKeyException Illegal key size","<p>I have a test which runs great on my development MacBook Pro, but fails to run in continuous integration TeamCity server.</p>

<p>The error is following:</p>

<pre><code>java.security.InvalidKeyException: Illegal key size
    at javax.crypto.Cipher.a(DashoA13*..)
    at javax.crypto.Cipher.init(DashoA13*..)
    at javax.crypto.Cipher.init(DashoA13*..)
</code></pre>

<p>Both development box and TeamCity uses Java 1.6 and I use BouncyCastle library for the need of special AES encryption.</p>

<p>The code is following:</p>

<pre><code>private byte[] aesEncryptedInfo(String info) throws UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidParameterSpecException, InvalidAlgorithmParameterException, NoSuchProviderException {
    Security.addProvider(new BouncyCastleProvider());
    SecretKey secret = new SecretKeySpec(CUSTOMLONGSECRETKEY.substring(0, 32).getBytes(), ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"", ""BC"");
    cipher.init(Cipher.ENCRYPT_MODE, secret, new IvParameterSpec(VECTOR_SECRET_KEY.getBytes()));
    return cipher.doFinal(info.getBytes(""UTF-8""));
}
</code></pre>

<p><strong>UPDATE</strong></p>

<p>Looks like according to the selected answer I have to modify something on my TeamCity installation and it will possibly affect some user installations - so its not a good choice I have to switch to another crypto library to do that without limitations. So probably bouncy castle will help.</p>

<p><strong>UPDATE 2</strong></p>

<p>I actually switched to use BouncyCastle to avoid this limitation. Note this only works if you use own BC classes directly, not the BC provider.</p>
","<p><strong>Make sure you know the path to JAVA_HOME that your IDE uses</strong>.
In order to copy to the correct path.</p>

<p>In my case I use IntelliJ: 
/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/jre/lib/security</p>

<p>Instead of when i show the $JAVA_HOME in the console.
/Users/myuser/.sdkman/candidates/java/current/jre/lib/security</p>
","70595","<java><aes><jce>","57","0","5","2019-03-27 08:36:08","3864276","3","22","290050","","2011-09-16 19:03:55","2010-10-05 10:31:15",""
"3862800","InvalidKeyException Illegal key size","<p>I have a test which runs great on my development MacBook Pro, but fails to run in continuous integration TeamCity server.</p>

<p>The error is following:</p>

<pre><code>java.security.InvalidKeyException: Illegal key size
    at javax.crypto.Cipher.a(DashoA13*..)
    at javax.crypto.Cipher.init(DashoA13*..)
    at javax.crypto.Cipher.init(DashoA13*..)
</code></pre>

<p>Both development box and TeamCity uses Java 1.6 and I use BouncyCastle library for the need of special AES encryption.</p>

<p>The code is following:</p>

<pre><code>private byte[] aesEncryptedInfo(String info) throws UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidParameterSpecException, InvalidAlgorithmParameterException, NoSuchProviderException {
    Security.addProvider(new BouncyCastleProvider());
    SecretKey secret = new SecretKeySpec(CUSTOMLONGSECRETKEY.substring(0, 32).getBytes(), ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"", ""BC"");
    cipher.init(Cipher.ENCRYPT_MODE, secret, new IvParameterSpec(VECTOR_SECRET_KEY.getBytes()));
    return cipher.doFinal(info.getBytes(""UTF-8""));
}
</code></pre>

<p><strong>UPDATE</strong></p>

<p>Looks like according to the selected answer I have to modify something on my TeamCity installation and it will possibly affect some user installations - so its not a good choice I have to switch to another crypto library to do that without limitations. So probably bouncy castle will help.</p>

<p><strong>UPDATE 2</strong></p>

<p>I actually switched to use BouncyCastle to avoid this limitation. Note this only works if you use own BC classes directly, not the BC provider.</p>
","<p>I was facing the same issue for jdk 1.8.0_151-</p>

<p>For this and above version, you do not need to download the jar files related to security.Because, local_policy.jar and US_export_policy.jar is already included in these versions under the path-
\jre\lib\security\policy (JAVA_HOME refers to your current java installation folder)
The only chng you need to make is in java.security file which is present in /jre/lib/security -
uncomment the line -
<strong>crypto.policy=unlimited</strong></p>
","70595","<java><aes><jce>","57","0","5","2019-03-27 08:36:08","3864276","3","22","290050","","2011-09-16 19:03:55","2010-10-05 10:31:15",""
"10687200","Java 7 and Could not generate DH keypair","<p>I read a previous post regarding the error 'Could not generate DH keypair' fired when the server sents a key longer than 1024 bits. Downloading the JCE unlimited jars should fix this issue. In the test environment I have I encountered the following, for the same web server if I use Java 6 I don't get any errors when performing the https query but if I use Java 7 then I get 'Could not generate DH keypair'.</p>

<p>I tried replacing the jar files for JCE unlimited but still get the same error. The bug is reported since 2007, but why does it run for Java 6 and not for Java 7? Are the files to download not the proper ones? I got the link from a previous post <a href=""https://stackoverflow.com/questions/6851461/java-why-does-ssl-handshake-give-could-not-generate-dh-keypair-exception"">Java: Why does SSL handshake give &#39;Could not generate DH keypair&#39; exception?</a>.</p>

<p>At this point I don't know what to do. If I try to load the BouncyCastle provider I get an ArrayOutOfIndex exception. My server only allows DH algorithm so I can't use another algorithm like suggested in the above post.</p>
","<p>I stumbled on the same issue with SSLScokets and I think I identified the reason for this regression with Java 7. The reason comes to the ciphers negotiated between the client and the server.</p>

<p>By default Java 6 enables these ciphers for a TLS connection (in priority order) :</p>

<pre><code>SSL_RSA_WITH_RC4_128_MD5
SSL_RSA_WITH_RC4_128_SHA
TLS_RSA_WITH_AES_128_CBC_SHA
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS_DHE_DSS_WITH_AES_128_CBC_SHA
SSL_RSA_WITH_3DES_EDE_CBC_SHA
SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA
SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA
SSL_RSA_WITH_DES_CBC_SHA
SSL_DHE_RSA_WITH_DES_CBC_SHA
SSL_DHE_DSS_WITH_DES_CBC_SHA
SSL_RSA_EXPORT_WITH_RC4_40_MD5
SSL_RSA_EXPORT_WITH_DES40_CBC_SHA
SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA
SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA
TLS_EMPTY_RENEGOTIATION_INFO_SCSV
</code></pre>

<p>And Java 7 enables these ciphers:</p>

<pre><code>TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA
SSL_RSA_WITH_RC4_128_SHA
TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
TLS_ECDHE_RSA_WITH_RC4_128_SHA
TLS_ECDH_ECDSA_WITH_RC4_128_SHA
TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
TLS_ECDH_RSA_WITH_RC4_128_SHA
TLS_EMPTY_RENEGOTIATION_INFO_SCSV
TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
TLS_RSA_WITH_AES_128_CBC_SHA
TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
SSL_RSA_WITH_RC4_128_MD5
TLS_DHE_DSS_WITH_AES_128_CBC_SHA
SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA
SSL_RSA_WITH_3DES_EDE_CBC_SHA
</code></pre>

<p>Ciphers using Diffie-Hellman come in higher priority on Java 7, but they don't seem to support keys longer than 1024 bits unless the strong crypto package is installed.</p>

<p>The workaround I used was to specify the ciphers enabled by Java 6 on the <code>SSLSocket</code>:</p>

<pre class=""lang-java prettyprint-override""><code>SSLSocketFactory socketFactory = SSLContext.getInstance(""TLS"").getSocketFactory();
SSLSocket socket = (SSLSocket) socketFactory.createSocket(InetAddress.getByName(hostname), port);
socket.setEnabledCipherSuites(new String[] {
        ""SSL_RSA_WITH_RC4_128_MD5"",
        ""SSL_RSA_WITH_RC4_128_SHA"",
        ""TLS_RSA_WITH_AES_128_CBC_SHA"",
        ""TLS_DHE_RSA_WITH_AES_128_CBC_SHA"",
        ""TLS_DHE_DSS_WITH_AES_128_CBC_SHA"",
        ""SSL_RSA_WITH_3DES_EDE_CBC_SHA"",
        ""SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA"",
        ""SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA"",
        ""SSL_RSA_WITH_DES_CBC_SHA"",
        ""SSL_DHE_RSA_WITH_DES_CBC_SHA"",
        ""SSL_DHE_DSS_WITH_DES_CBC_SHA"",
        ""SSL_RSA_EXPORT_WITH_RC4_40_MD5"",
        ""SSL_RSA_EXPORT_WITH_DES40_CBC_SHA"",
        ""SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA"",
        ""SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA"",
        ""TLS_EMPTY_RENEGOTIATION_INFO_SCSV""});

socket.startHandshake();
</code></pre>
","56035","<ssl><java><jce>","14","8","5","2017-08-23 02:55:51","","0","7","-1","","2017-05-23 11:59:58","2012-05-21 14:29:14",""
"10687200","Java 7 and Could not generate DH keypair","<p>I read a previous post regarding the error 'Could not generate DH keypair' fired when the server sents a key longer than 1024 bits. Downloading the JCE unlimited jars should fix this issue. In the test environment I have I encountered the following, for the same web server if I use Java 6 I don't get any errors when performing the https query but if I use Java 7 then I get 'Could not generate DH keypair'.</p>

<p>I tried replacing the jar files for JCE unlimited but still get the same error. The bug is reported since 2007, but why does it run for Java 6 and not for Java 7? Are the files to download not the proper ones? I got the link from a previous post <a href=""https://stackoverflow.com/questions/6851461/java-why-does-ssl-handshake-give-could-not-generate-dh-keypair-exception"">Java: Why does SSL handshake give &#39;Could not generate DH keypair&#39; exception?</a>.</p>

<p>At this point I don't know what to do. If I try to load the BouncyCastle provider I get an ArrayOutOfIndex exception. My server only allows DH algorithm so I can't use another algorithm like suggested in the above post.</p>
","<p>If you are using jdk1.7.0_04, upgrade to jdk1.7.0_21. The problem has been fixed in that update.</p>
","56035","<ssl><java><jce>","14","1","5","2017-08-23 02:55:51","","0","7","-1","","2017-05-23 11:59:58","2012-05-21 14:29:14",""
"10687200","Java 7 and Could not generate DH keypair","<p>I read a previous post regarding the error 'Could not generate DH keypair' fired when the server sents a key longer than 1024 bits. Downloading the JCE unlimited jars should fix this issue. In the test environment I have I encountered the following, for the same web server if I use Java 6 I don't get any errors when performing the https query but if I use Java 7 then I get 'Could not generate DH keypair'.</p>

<p>I tried replacing the jar files for JCE unlimited but still get the same error. The bug is reported since 2007, but why does it run for Java 6 and not for Java 7? Are the files to download not the proper ones? I got the link from a previous post <a href=""https://stackoverflow.com/questions/6851461/java-why-does-ssl-handshake-give-could-not-generate-dh-keypair-exception"">Java: Why does SSL handshake give &#39;Could not generate DH keypair&#39; exception?</a>.</p>

<p>At this point I don't know what to do. If I try to load the BouncyCastle provider I get an ArrayOutOfIndex exception. My server only allows DH algorithm so I can't use another algorithm like suggested in the above post.</p>
","<p>Some additions or clarifications:</p>

<p>(Suncle) Java 7 since 7u09 uses a more sensible consistent order of ciphersuites by default, unlike the seemingly random order in 7u04. (I don't have tests between 04 and 09.) This order puts ECDHE and plain-RSA (aka akRSA) before DHE, and thus avoids the problem if AND ONLY IF the server supports ECDHE or RSA and agrees to client preference. (Or ECDH-fixed, but practically nobody uses that.) If the server insists on DHE (for whatever reason) AND uses DH>1024 bits, you still have the problem.</p>

<p>If the asker (or anyone else) connects to a server that truly requires integer-DH (and not ECDH or RSA), the only way to work with Java before 8 is to get the server to use DH 1024-bit. Which AFAWK is technically secure for a few more years, but with a thin margin it is prohibited by important authorities like NIST (see Special Pub 800-57 at csrc.nist.gov). (Even RSA 1024 isn't actually broken yet, but it probably will be soon and so is prohibited.)</p>

<p>The ""unlimited strength policy"" is not relevant to this problem, or at least not directly, and the good answers to #6851461 did not say it is. It does not change the restriction on DH parameters in SunJCE, which is (wrongly) treated as a standard issue not a strength issue. (Specifically it takes the restrictions that used to be correct for DSA, and applies them to DH.) It does enable AES-256 and SHA-2 (only for TLSv1.2) suites, and given a sufficiently strange preference list, that might change the selection result from DHE (fails) to non-DHE (works).</p>

<p>You don't need to go entirely back to the Java 6 list, you just need to prioritize other key exchanges over DHE, or for a recalcitrant server drop DHE entirely. You definitely should NOT go back to enabling any EXPORT or single-DES suites, unless absolutely needed for a legacy server; they have been NOT SECURE for several years now, and remained enabled by default in 6 far longer than they should have.</p>
","56035","<ssl><java><jce>","14","11","5","2017-08-23 02:55:51","","0","7","-1","","2017-05-23 11:59:58","2012-05-21 14:29:14",""
"10687200","Java 7 and Could not generate DH keypair","<p>I read a previous post regarding the error 'Could not generate DH keypair' fired when the server sents a key longer than 1024 bits. Downloading the JCE unlimited jars should fix this issue. In the test environment I have I encountered the following, for the same web server if I use Java 6 I don't get any errors when performing the https query but if I use Java 7 then I get 'Could not generate DH keypair'.</p>

<p>I tried replacing the jar files for JCE unlimited but still get the same error. The bug is reported since 2007, but why does it run for Java 6 and not for Java 7? Are the files to download not the proper ones? I got the link from a previous post <a href=""https://stackoverflow.com/questions/6851461/java-why-does-ssl-handshake-give-could-not-generate-dh-keypair-exception"">Java: Why does SSL handshake give &#39;Could not generate DH keypair&#39; exception?</a>.</p>

<p>At this point I don't know what to do. If I try to load the BouncyCastle provider I get an ArrayOutOfIndex exception. My server only allows DH algorithm so I can't use another algorithm like suggested in the above post.</p>
","<p>We were also running into this problem with Java7 and Java8. 
We also used a workaround similar to Emanual Borg's suggestions.
But our goal was to avoid hardcoding a fixed list of CipherSuites. So we tried removing the entries which caused the problem (by trial and error...). </p>

<pre><code>String[] enabledCipherSuites = socket.getEnabledCipherSuites();

// avoid hardcoding a new list, we just remove the entries
// which cause the exception
List&lt;String&gt; asList = new ArrayList(Arrays.asList(enabledCipherSuites));

// we identified the following entries causeing the problems
// ""Could not generate DH keypair""
// and ""Caused by: java.security.InvalidAlgorithmParameterException: Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive)""
asList.remove(""TLS_DHE_RSA_WITH_AES_128_CBC_SHA"");
asList.remove(""SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA"");
asList.remove(""TLS_DHE_RSA_WITH_AES_256_CBC_SHA"");

String[] array = asList.toArray(new String[0]);
socket.setEnabledCipherSuites(array);
</code></pre>

<p>Question: Does anybody see a problem with this approach?</p>

<p>Btw: In case you are using Apache HTTPClient, then <a href=""https://issues.apache.org/jira/browse/HTTPCLIENT-1111"" rel=""nofollow"">https://issues.apache.org/jira/browse/HTTPCLIENT-1111</a> is interesting which shows how to set the CipherSuites (starting with HTTPClient v4.2) via the method </p>

<pre><code>SSLConnectionSocketFactory() {...}.prepareSocket(SSLSocket)
</code></pre>

<p><strong>Update 2015/10/31:</strong>
To help better understand the context where to use this, here as full pseudo-code example where you see how to hook-in to override the prepareSocket() method:</p>

<pre><code>HttpClientBuilder builder = HttpClients.custom();

SSLContextBuilder sslContextBuilder = SSLContexts.custom();
SSLContext sslContext = sslContextBuilder.build();

SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslContext, hostNameVerfier)
{


    protected void prepareSocket(SSLSocket socket) throws IOException {

    // Workaround to use different order of CipherSuites used by Java6 in order
        // to avoid the the problem of java7 ""Could not generate DH keypair""
        String[] enabledCipherSuites = socket.getEnabledCipherSuites();

        // but to avoid hardcoding a new list, we just remove the entries
        // which cause the exception (via TrialAndError)
        List&lt;String&gt; asList = new ArrayList(Arrays.asList(enabledCipherSuites));

        // we identified the following entries causeing the problems
        // ""Could not generate DH keypair""
        // and ""Caused by: java.security.InvalidAlgorithmParameterException: Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive)""
        asList.remove(""TLS_DHE_RSA_WITH_AES_128_CBC_SHA"");
        asList.remove(""SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA"");
        asList.remove(""TLS_DHE_RSA_WITH_AES_256_CBC_SHA"");

        String[] array = asList.toArray(new String[0]);
        socket.setEnabledCipherSuites(array);

    };
};

Registry&lt;ConnectionSocketFactory&gt; socketFactoryRegistry = RegistryBuilder.&lt;ConnectionSocketFactory&gt; create().register(""https"", sslsf).build();

PoolingHttpClientConnectionManager conman = new PoolingHttpClientConnectionManager(socketFactoryRegistry);
builder.setConnectionManager(conman);

CloseableHttpClient httpClient =  builder.build();
</code></pre>

<p><strong>Be careful</strong>
We are using this piece of code only in a context where the user explicitly enables to trust self-signed certificates (e.g. for test-environments etc.). If you don't want to do this, then better don't mess with the SSL-stuff. </p>
","56035","<ssl><java><jce>","14","2","5","2017-08-23 02:55:51","","0","7","-1","","2017-05-23 11:59:58","2012-05-21 14:29:14",""
"10687200","Java 7 and Could not generate DH keypair","<p>I read a previous post regarding the error 'Could not generate DH keypair' fired when the server sents a key longer than 1024 bits. Downloading the JCE unlimited jars should fix this issue. In the test environment I have I encountered the following, for the same web server if I use Java 6 I don't get any errors when performing the https query but if I use Java 7 then I get 'Could not generate DH keypair'.</p>

<p>I tried replacing the jar files for JCE unlimited but still get the same error. The bug is reported since 2007, but why does it run for Java 6 and not for Java 7? Are the files to download not the proper ones? I got the link from a previous post <a href=""https://stackoverflow.com/questions/6851461/java-why-does-ssl-handshake-give-could-not-generate-dh-keypair-exception"">Java: Why does SSL handshake give &#39;Could not generate DH keypair&#39; exception?</a>.</p>

<p>At this point I don't know what to do. If I try to load the BouncyCastle provider I get an ArrayOutOfIndex exception. My server only allows DH algorithm so I can't use another algorithm like suggested in the above post.</p>
","<p>Given you are using the latest java edition and still get the error, you can change a setting in java.security  (e.g. in folder C:\Program Files\Java\jre1.8.0_xx\lib\security</p>

<pre><code># Example:
#   jdk.tls.disabledAlgorithms=MD5, SSLv3, DSA, RSA keySize &lt; 2048
    jdk.tls.disabledAlgorithms=SSLv3, RC4
</code></pre>

<p>Add DH as disabled algorithm in jdk.tls.disabledAlgorithms </p>

<pre><code>    jdk.tls.disabledAlgorithms=SSLv3, RC4, DH
</code></pre>

<p>Restart tomcat or rerun your program. </p>
","56035","<ssl><java><jce>","14","6","5","2017-08-23 02:55:51","","0","7","-1","","2017-05-23 11:59:58","2012-05-21 14:29:14",""
"10935068","What are the cipher padding strings in java","<p>Everyone talks about the padding schemes in ciphers but what are the actual strings one needs to pass in to the cipher? I don't care if they are symmetric or asymmetric, I just want a list of the possible values.</p>
","<p>There are many types of padding, PKCS-7, Zero, ISO 10126, ANSI X.923, etc.<br>
I suggest you read up on <a href=""http://en.wikipedia.org/wiki/Padding_%28cryptography%29"" rel=""noreferrer"">padding</a> since you seem not to fully understand the concept.</p>

<p>Then there's the possibility you are referring to cryptographic <a href=""http://en.wikipedia.org/wiki/Salt_%28cryptography%29"" rel=""noreferrer"">salt</a>.</p>

<p><strong>Edit</strong><br>
Every implementation of the Java platform is required to support the following standard Cipher transformations with the keysizes in parentheses:</p>

<ul>
<li>AES/CBC/NoPadding (128)</li>
<li>AES/CBC/PKCS5Padding (128)</li>
<li>AES/ECB/NoPadding (128)</li>
<li>AES/ECB/PKCS5Padding (128)</li>
<li>DES/CBC/NoPadding (56)</li>
<li>DES/CBC/PKCS5Padding (56)</li>
<li>DES/ECB/NoPadding (56)</li>
<li>DES/ECB/PKCS5Padding (56)</li>
<li>DESede/CBC/NoPadding (168)</li>
<li>DESede/CBC/PKCS5Padding (168)</li>
<li>DESede/ECB/NoPadding (168)</li>
<li>DESede/ECB/PKCS5Padding (168)</li>
<li>RSA/ECB/PKCS1Padding (1024, 2048)</li>
<li>RSA/ECB/OAEPWithSHA-1AndMGF1Padding (1024, 2048)</li>
<li>RSA/ECB/OAEPWithSHA-256AndMGF1Padding (1024, 2048)</li>
</ul>

<p>You can find a list <a href=""http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#impl"" rel=""noreferrer"">here</a>.</p>

<p><strong>Edit 2</strong><br>
You can find the Bouncy Castle specification <a href=""http://www.bouncycastle.org/specifications.html"" rel=""noreferrer"">here</a>. It lists all available padding schemes.</p>
","54264","<java><padding><jce>","28","48","2","2012-06-07 16:33:47","10935308","8","7","371077","","2012-06-07 16:22:02","2012-06-07 15:35:43",""
"10935068","What are the cipher padding strings in java","<p>Everyone talks about the padding schemes in ciphers but what are the actual strings one needs to pass in to the cipher? I don't care if they are symmetric or asymmetric, I just want a list of the possible values.</p>
","<p>Block cyphers need padding, stream cyphers don't.  Block cyphers need padding because they encrypt whole blocks, and your message may not exactly match a whole number of blocks.  Padding is used to extend the message length to the next block boundary.</p>

<p>See the Wikipedia article on <a href=""http://en.wikipedia.org/wiki/Padding_%28cryptography%29"">Cryptographic padding</a> for a lot of detail.</p>

<p>For most purposes PKCS#7 (aka PKCS#5) padding is used: n bytes, all of value n:</p>

<pre><code>01
02 02
03 03 03
...
10 10 10 10 ... 10 10
</code></pre>
","54264","<java><padding><jce>","28","10","2","2012-06-07 16:33:47","10935308","8","7","371077","","2012-06-07 16:22:02","2012-06-07 15:35:43",""
"10193567","java.security.NoSuchAlgorithmException:Cannot find any provider supporting AES/ECB/PKCS7PADDING","<p>I was trying to encrypt data using AES algorithm.
However, with the following exception has occurred.</p>

<pre><code>java.security.NoSuchAlgorithmException:
    Cannot find any provider supporting AES/ECB/PKCS7PADDING
</code></pre>

<p>Someone know a solution to this issue?
My JDK's version is 1.7.</p>
","<p>You don't want to specify PKCS#7 padding for block cipher use. You want to specify PKCS#5 padding. PKCS#5 is specified for use with block ciphers while PKCS#7 is not (it's use for different places like in S/MIME). I will point out that PKCS#5 and PKCS#7 actually specify exactly the same type of padding (they are the same!), but it's called #5 when used in this context. :)</p>

<p>So, instead of <code>""AES/ECB/PKCS7PADDING""</code>, you want <code>""AES/ECB/PKCS5PADDING""</code>. This is a cipher implementation that every implementation of the Java platform is required to support. See the <a href=""http://docs.oracle.com/javase/7/docs/api/javax/crypto/Cipher.html"" rel=""noreferrer"">documentation of the <code>Cipher</code> class</a> for more details.</p>
","50482","<java><security><encryption><aes><jce>","21","36","3","2016-12-07 16:40:45","10194082","1","2","589259","","2015-01-24 22:48:36","2012-04-17 14:51:21",""
"10193567","java.security.NoSuchAlgorithmException:Cannot find any provider supporting AES/ECB/PKCS7PADDING","<p>I was trying to encrypt data using AES algorithm.
However, with the following exception has occurred.</p>

<pre><code>java.security.NoSuchAlgorithmException:
    Cannot find any provider supporting AES/ECB/PKCS7PADDING
</code></pre>

<p>Someone know a solution to this issue?
My JDK's version is 1.7.</p>
","<p>if you want to use  AES/ECB/PKCS7Padding then bouncy castle will support  ht<a href=""http://www.bouncycastle.org/specifications.html"" rel=""nofollow"">tp://www.bouncycastle.org/specifications.html</a></p>
","50482","<java><security><encryption><aes><jce>","21","2","3","2016-12-07 16:40:45","10194082","1","2","589259","","2015-01-24 22:48:36","2012-04-17 14:51:21",""
"10193567","java.security.NoSuchAlgorithmException:Cannot find any provider supporting AES/ECB/PKCS7PADDING","<p>I was trying to encrypt data using AES algorithm.
However, with the following exception has occurred.</p>

<pre><code>java.security.NoSuchAlgorithmException:
    Cannot find any provider supporting AES/ECB/PKCS7PADDING
</code></pre>

<p>Someone know a solution to this issue?
My JDK's version is 1.7.</p>
","<p>For a very comprehensive explanation of the issue that includes the text of the PKCS#5 and PKCS#7 cryptographic standards, please take a look <a href=""https://crypto.stackexchange.com/q/9043/1172"">here</a>.</p>

<hr>

<p>PKCS#5 padding means padding 1 to 8 bytes. The padding bytes themselves contain the amount of padding bytes encoded as a byte. PKCS#5 padding was specified for DES, but it would be suitable for any block cipher with a block size of 8 bytes.</p>

<p>Now the DES specifications and even the PKCS#5 specification for password based encryption precede and Java by quite a long time. AES was only standardized in 2002, long after Java and even Java 2 was introduced. So (triple) DES and PKCS#5 padding was integrated into Java before AES made its appearance.</p>

<p>When Java - or more precisely, the Sun JCE provider - gained AES functionality it required a padding method for a block size of 16 bytes. PKCS#7 specifies this padding method that <a href=""https://crypto.stackexchange.com/q/9043/1172"">is identical to PKCS#5 padding</a>, except that it is defined for block sizes of 2 to 255 bytes (the maximum  value of a byte if it encodes a zero based unsigned integer). However, the padding method was already there; it was named <code>""PKCS5Padding""</code>. So instead of introducing a new name, <code>""PKCS5Padding""</code> was simply re-used.</p>

<p>By now the Sun provider should really support <code>""PKCS7Padding""</code> as PKCS#5 padding is simply incorrect. It's not just a Java naming issue, it's an issue for any developer that tries to implement cryptographic protocols or port other applications to Java. For now however, you should use <code>""PKCS5Padding""</code> instead of <code>""PKCS7Padding""</code>.</p>
","50482","<java><security><encryption><aes><jce>","21","3","3","2016-12-07 16:40:45","10194082","1","2","589259","","2015-01-24 22:48:36","2012-04-17 14:51:21",""
"1615871","Creating an X509 Certificate in Java without BouncyCastle?","<p>Is it possible to sanely create an X509 Certificate in Java code without using the Bouncy Castle <code>X509V*CertificateGenerator</code> classes?</p>
","<p>The ability to sign certificates is not part of a standard Java library or extension.</p>

<p>A lot of the code that is needed to do it yourself is part of the core. There are classes to encode and decode X.500 names, X.509 certificate extensions, public keys for various algorithms, and of course, for actually performing the digital signature.</p>

<p>Implementing this yourself is not trivial, but it is definitely doable&mdash;I probably spent 4 or 5 full days the first time I made a working prototype for certificate signing. It was a <em>fantastic</em> learning exercise for me, but it's hard to justify that expense when there are usable libraries available for free.</p>
","45025","<java><x509certificate><jce>","35","18","5","2019-01-28 11:04:00","1615983","0","24","184201","","2019-01-28 11:04:00","2009-10-23 21:00:21",""
"1615871","Creating an X509 Certificate in Java without BouncyCastle?","<p>Is it possible to sanely create an X509 Certificate in Java code without using the Bouncy Castle <code>X509V*CertificateGenerator</code> classes?</p>
","<p>All the basic components to make a self-signed certificate (signing, X509 encoding etc) are available in JRE. Unlike BC, Sun's JCE doesn't provide any public calls to sign a certificate. However, all the functions are available in Keytool. You can simply copy the code from keytool to do this. The method you need to copy is <code>doSelfCert()</code>.</p>
","45025","<java><x509certificate><jce>","35","4","5","2019-01-28 11:04:00","1615983","0","24","184201","","2019-01-28 11:04:00","2009-10-23 21:00:21",""
"1615871","Creating an X509 Certificate in Java without BouncyCastle?","<p>Is it possible to sanely create an X509 Certificate in Java code without using the Bouncy Castle <code>X509V*CertificateGenerator</code> classes?</p>
","<p>Depends on what exactly you want to do (and probably your definition of ""Sanely""). As ZZ Coder pointed out, you can create a self-signed certificate directly by copying <a href=""http://www.java2s.com/Open-Source/Java-Document/6.0-JDK-Modules-sun/security/sun/security/tools/KeyTool.java.htm"" rel=""nofollow noreferrer"">keytool</a>. But I don't believe you can create a PKCS10 certificate request object with the standard JCE, which you probably need to do if you want to create standard CA-signed EECs.</p>
","45025","<java><x509certificate><jce>","35","1","5","2019-01-28 11:04:00","1615983","0","24","184201","","2019-01-28 11:04:00","2009-10-23 21:00:21",""
"1615871","Creating an X509 Certificate in Java without BouncyCastle?","<p>Is it possible to sanely create an X509 Certificate in Java code without using the Bouncy Castle <code>X509V*CertificateGenerator</code> classes?</p>
","<p>Yes, but not with publicly documented classes. I've documented the process <a href=""http://bfo.com/blog/2011/03/08/odds_and_ends_creating_a_new_x_509_certificate.html"" rel=""noreferrer"">in this article</a>.</p>

<pre><code>import sun.security.x509.*;
import java.security.cert.*;
import java.security.*;
import java.math.BigInteger;
import java.util.Date;
import java.io.IOException

/** 
 * Create a self-signed X.509 Certificate
 * @param dn the X.509 Distinguished Name, eg ""CN=Test, L=London, C=GB""
 * @param pair the KeyPair
 * @param days how many days from now the Certificate is valid for
 * @param algorithm the signing algorithm, eg ""SHA1withRSA""
 */ 
X509Certificate generateCertificate(String dn, KeyPair pair, int days, String algorithm)
  throws GeneralSecurityException, IOException
{
  PrivateKey privkey = pair.getPrivate();
  X509CertInfo info = new X509CertInfo();
  Date from = new Date();
  Date to = new Date(from.getTime() + days * 86400000l);
  CertificateValidity interval = new CertificateValidity(from, to);
  BigInteger sn = new BigInteger(64, new SecureRandom());
  X500Name owner = new X500Name(dn);
 
  info.set(X509CertInfo.VALIDITY, interval);
  info.set(X509CertInfo.SERIAL_NUMBER, new CertificateSerialNumber(sn));
  info.set(X509CertInfo.SUBJECT, new CertificateSubjectName(owner));
  info.set(X509CertInfo.ISSUER, new CertificateIssuerName(owner));
  info.set(X509CertInfo.KEY, new CertificateX509Key(pair.getPublic()));
  info.set(X509CertInfo.VERSION, new CertificateVersion(CertificateVersion.V3));
  AlgorithmId algo = new AlgorithmId(AlgorithmId.md5WithRSAEncryption_oid);
  info.set(X509CertInfo.ALGORITHM_ID, new CertificateAlgorithmId(algo));
 
  // Sign the cert to identify the algorithm that's used.
  X509CertImpl cert = new X509CertImpl(info);
  cert.sign(privkey, algorithm);
 
  // Update the algorith, and resign.
  algo = (AlgorithmId)cert.get(X509CertImpl.SIG_ALG);
  info.set(CertificateAlgorithmId.NAME + ""."" + CertificateAlgorithmId.ALGORITHM, algo);
  cert = new X509CertImpl(info);
  cert.sign(privkey, algorithm);
  return cert;
}   
</code></pre>
","45025","<java><x509certificate><jce>","35","73","5","2019-01-28 11:04:00","1615983","0","24","184201","","2019-01-28 11:04:00","2009-10-23 21:00:21",""
"1615871","Creating an X509 Certificate in Java without BouncyCastle?","<p>Is it possible to sanely create an X509 Certificate in Java code without using the Bouncy Castle <code>X509V*CertificateGenerator</code> classes?</p>
","<pre><code>import sun.security.x509.*;

import java.security.cert.*;
import java.security.*;
import java.math.BigInteger;
import java.security.cert.Certificate;
import java.util.Date;
import java.io.IOException;

public class Example {
    /**
     * Create a self-signed X.509 Example
     *
     * @param dn        the X.509 Distinguished Name, eg ""CN=Test, L=London, C=GB""
     * @param pair      the KeyPair
     * @param days      how many days from now the Example is valid for
     * @param algorithm the signing algorithm, eg ""SHA1withRSA""
     */
    public X509Certificate generateCertificate(String dn, KeyPair pair, int days, String algorithm)
            throws GeneralSecurityException, IOException {
        PrivateKey privkey = pair.getPrivate();
        X509CertInfo info = new X509CertInfo();
        Date from = new Date();
        Date to = new Date(from.getTime() + days * 86400000l);
        CertificateValidity interval = new CertificateValidity(from, to);
        BigInteger sn = new BigInteger(64, new SecureRandom());
        X500Name owner = new X500Name(dn);

        info.set(X509CertInfo.VALIDITY, interval);
        info.set(X509CertInfo.SERIAL_NUMBER, new CertificateSerialNumber(sn));
        info.set(X509CertInfo.SUBJECT, owner);
        info.set(X509CertInfo.ISSUER, owner);
        info.set(X509CertInfo.KEY, new CertificateX509Key(pair.getPublic()));
        info.set(X509CertInfo.VERSION, new CertificateVersion(CertificateVersion.V3));
        AlgorithmId algo = new AlgorithmId(AlgorithmId.md5WithRSAEncryption_oid);
        info.set(X509CertInfo.ALGORITHM_ID, new CertificateAlgorithmId(algo));

        // Sign the cert to identify the algorithm that's used.
        X509CertImpl cert = new X509CertImpl(info);
        cert.sign(privkey, algorithm);

        // Update the algorith, and resign.
        algo = (AlgorithmId) cert.get(X509CertImpl.SIG_ALG);
        info.set(CertificateAlgorithmId.NAME + ""."" + CertificateAlgorithmId.ALGORITHM, algo);
        cert = new X509CertImpl(info);
        cert.sign(privkey, algorithm);
        return cert;
    }

    public static void main (String[] argv) throws Exception {
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""RSA"");
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        Example example = new Example();
        String distinguishedName = ""CN=Test, L=London, C=GB"";
        Certificate certificate = example.generateCertificateOriginal(distinguishedName, keyPair, 365, ""SHA256withRSA"");
        System.out.println(""it worked!"");
    }
}
</code></pre>

<p>I liked vbence's answer, but I kept getting the following exception:</p>

<p>java.security.cert.CertificateException: Subject class type invalid.</p>

<p>After lots of attempts to find out <em>was</em> a valid subject class I found out that X509CerInfo wanted an instance of X500Name.</p>

<pre><code>1 info.set(X509CertInfo.SERIAL_NUMBER, new CertificateSerialNumber(sn));
2 info.set(X509CertInfo.SUBJECT, new CertificateSubjectName(owner));
3 info.set(X509CertInfo.ISSUER, new CertificateIssuerName(owner));
4 info.set(X509CertInfo.KEY, new CertificateX509Key(pair.getPublic()));
</code></pre>

<p>So lines 2 &amp; 3 needed to change to</p>

<pre><code>2 info.set(X509CertInfo.SUBJECT, owner);
3 info.set(X509CertInfo.ISSUER, owner);
</code></pre>
","45025","<java><x509certificate><jce>","35","7","5","2019-01-28 11:04:00","1615983","0","24","184201","","2019-01-28 11:04:00","2009-10-23 21:00:21",""
"37741142","How to install unlimited strength JCE for Java 8 in OS X?","<p>I need to install the <strong>Java Cryptography Extension</strong> for <code>Java 8</code> in <code>OS X</code> / <code>mac OS</code>. It turns out the steps from the <strong>README</strong> file which came with the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""noreferrer"">installer</a> include instructions only for <code>Unix</code> and <code>Windows</code>, but not for <code>OS X</code> / <code>mac OS</code>. I tried to put the JAR files in <code>$JAVA_HOME/lib/security</code>, but it didn't work either. Do you know how can I install them?</p>
","<p>As you did not explain what is your problem here some guesses.</p>

<ol>
<li>Using an internet search engine you probably would have found this page <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""noreferrer"">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></li>
<li>you might have downloaded this file <code>jce_policy-8.zip</code></li>
<li>maybe you would have unzipped it and had a look into directory <code>UnlimitedJCEPolicyJDK8/</code></li>
<li>maybe the file <code>README.txt</code> would have attracted your interest</li>
</ol>

<p>If all of those steps would have been true, then you would have found</p>

<pre><code>3)  Install the unlimited strength policy JAR files.

In case you later decide to revert to the original ""strong"" but
limited policy versions, first make a copy of the original JCE
policy files (US_export_policy.jar and local_policy.jar). Then
replace the strong policy files with the unlimited strength
versions extracted in the previous step.

The standard place for JCE jurisdiction policy JAR files is:

    &lt;java-home&gt;/lib/security           [Unix]
    &lt;java-home&gt;\lib\security           [Windows]
</code></pre>

<p>You can assume that the location on OSX is the same as for the listed systems.</p>
","44537","<java><macos><jce>","59","5","8","2018-12-04 09:10:33","41002560","0","20","1586231","","2017-10-26 21:21:21","2016-06-10 06:17:14",""
"37741142","How to install unlimited strength JCE for Java 8 in OS X?","<p>I need to install the <strong>Java Cryptography Extension</strong> for <code>Java 8</code> in <code>OS X</code> / <code>mac OS</code>. It turns out the steps from the <strong>README</strong> file which came with the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""noreferrer"">installer</a> include instructions only for <code>Unix</code> and <code>Windows</code>, but not for <code>OS X</code> / <code>mac OS</code>. I tried to put the JAR files in <code>$JAVA_HOME/lib/security</code>, but it didn't work either. Do you know how can I install them?</p>
","<p>If you are mac user, put the jars extracted from <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""noreferrer"">jce_policy-8.zip</a> if your java version is 8.* use below path (to put jars under it)</p>

<pre><code>/Library/Java/JavaVirtualMachines/**&lt; jdk_version_of_your_pc &gt;**/Contents/Home/jre/lib/security
</code></pre>
","44537","<java><macos><jce>","59","80","8","2018-12-04 09:10:33","41002560","0","20","1586231","","2017-10-26 21:21:21","2016-06-10 06:17:14",""
"37741142","How to install unlimited strength JCE for Java 8 in OS X?","<p>I need to install the <strong>Java Cryptography Extension</strong> for <code>Java 8</code> in <code>OS X</code> / <code>mac OS</code>. It turns out the steps from the <strong>README</strong> file which came with the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""noreferrer"">installer</a> include instructions only for <code>Unix</code> and <code>Windows</code>, but not for <code>OS X</code> / <code>mac OS</code>. I tried to put the JAR files in <code>$JAVA_HOME/lib/security</code>, but it didn't work either. Do you know how can I install them?</p>
","<p>For later versions of macOS (e.g., Sierra), Oracle Java is installed in two locations depending on if you install the JRE or JDK.</p>

<ul>
<li>JRE: <code>/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/</code></li>
<li>JDK: <code>/Library/Java/JavaVirtualMachines/jdk1.x.x_xxx.jdk/Contents/Home/</code>

<ul>
<li>If you install the JDK, it will also install the JRE at the JRE location listed above.</li>
</ul></li>
</ul>

<p>The JRE allows you to double-click to open jars from the Finder and run Java in the browser. The JRE does not come with the <code>java</code> binary, so if you want to run any of the typical Java commands, you must install the JDK. More at <a href=""https://java.com/en/download/faq/yosemite_java.xml"" rel=""noreferrer"">https://java.com/en/download/faq/yosemite_java.xml</a>.</p>

<p>All this to say, when installing then unlimited strength JCE files, install them in both directories listed above to get consistent behavior.</p>
","44537","<java><macos><jce>","59","5","8","2018-12-04 09:10:33","41002560","0","20","1586231","","2017-10-26 21:21:21","2016-06-10 06:17:14",""
"37741142","How to install unlimited strength JCE for Java 8 in OS X?","<p>I need to install the <strong>Java Cryptography Extension</strong> for <code>Java 8</code> in <code>OS X</code> / <code>mac OS</code>. It turns out the steps from the <strong>README</strong> file which came with the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""noreferrer"">installer</a> include instructions only for <code>Unix</code> and <code>Windows</code>, but not for <code>OS X</code> / <code>mac OS</code>. I tried to put the JAR files in <code>$JAVA_HOME/lib/security</code>, but it didn't work either. Do you know how can I install them?</p>
","<h1>Java 8 Update 161</h1>

<p>As pointed out in <a href=""https://stackoverflow.com/a/48604661"">another answer</a> and in Oracle's <a href=""http://www.oracle.com/technetwork/java/javase/8u161-relnotes-4021379.html#JDK-8170157"" rel=""noreferrer"">release notes for Java 8 Update 161</a>, unlimited cryptography is enabled by default since Update 161 and you shouldn't have to do anything if using a fresh installation of this version.</p>

<h1>Java 8 Update 151</h1>

<p>With Java 8 Update 151, Oracle included the same JCE mechanism into Java 8 that they already provided with Java 9. To enable JCE in Java 8 Update 151 or higher, just set the property </p>

<pre><code>crypto.policy=unlimited
</code></pre>

<p>in <code>$JAVA_HOME/jre/lib/security/java.security</code>.</p>

<p>It's probably a good idea to remove the old policy JAR's if they were added earlier, as Oracle states in the <a href=""http://www.oracle.com/technetwork/java/javase/8u151-relnotes-3850493.html"" rel=""noreferrer"">release notes</a>:</p>

<blockquote>
  <p>Because the old JCE jurisdiction files are left in
  /lib/security, they may not meet the latest security JAR
  signing standards, which were refreshed in 6u131, 7u121, 8u111, and
  later updates.</p>
</blockquote>

<h1>Older Versions</h1>

<p>Answers suggesting to install the JCE files via Homebrew won't work anymore, as the casks were deleted from the Homebrew repository after release of the Java 8 Update 151. If using an older version of Java 8, you can refer to the <a href=""https://stackoverflow.com/a/41002560/1225882"">accepted answer</a>.</p>
","44537","<java><macos><jce>","59","97","8","2018-12-04 09:10:33","41002560","0","20","1586231","","2017-10-26 21:21:21","2016-06-10 06:17:14",""
"37741142","How to install unlimited strength JCE for Java 8 in OS X?","<p>I need to install the <strong>Java Cryptography Extension</strong> for <code>Java 8</code> in <code>OS X</code> / <code>mac OS</code>. It turns out the steps from the <strong>README</strong> file which came with the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""noreferrer"">installer</a> include instructions only for <code>Unix</code> and <code>Windows</code>, but not for <code>OS X</code> / <code>mac OS</code>. I tried to put the JAR files in <code>$JAVA_HOME/lib/security</code>, but it didn't work either. Do you know how can I install them?</p>
","<p>if you're a windows user: </p>

<p>download the most updated JCE on <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""nofollow noreferrer"">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>

<p>extract zip file and copy the two jar files in the following directory</p>

<p>\Program Files\Java\jre1.8.0_131\lib\security</p>
","44537","<java><macos><jce>","59","3","8","2018-12-04 09:10:33","41002560","0","20","1586231","","2017-10-26 21:21:21","2016-06-10 06:17:14",""
"37741142","How to install unlimited strength JCE for Java 8 in OS X?","<p>I need to install the <strong>Java Cryptography Extension</strong> for <code>Java 8</code> in <code>OS X</code> / <code>mac OS</code>. It turns out the steps from the <strong>README</strong> file which came with the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""noreferrer"">installer</a> include instructions only for <code>Unix</code> and <code>Windows</code>, but not for <code>OS X</code> / <code>mac OS</code>. I tried to put the JAR files in <code>$JAVA_HOME/lib/security</code>, but it didn't work either. Do you know how can I install them?</p>
","<h2>For a Mac user (OS X) on Java 8:</h2>

<blockquote>
  <p>$ brew reinstall java8</p>
</blockquote>

<p>As of JDK 1.8u151 it is not necessary to download the JCE libraries separately. Simply edit</p>

<blockquote>
  <p>$JDK_HOME/jre/lib/security/java.security</p>
</blockquote>

<p>and uncomment the line:</p>

<p><code>crypto.policy=unlimited</code></p>

<p>This will enable the unlimited strength JCE.</p>

<p><a href=""http://www.oracle.com/technetwork/java/javase/8all-relnotes-2226344.html#R180_151"" rel=""noreferrer"">JDK 1.8u151 Release Notes</a></p>
","44537","<java><macos><jce>","59","12","8","2018-12-04 09:10:33","41002560","0","20","1586231","","2017-10-26 21:21:21","2016-06-10 06:17:14",""
"37741142","How to install unlimited strength JCE for Java 8 in OS X?","<p>I need to install the <strong>Java Cryptography Extension</strong> for <code>Java 8</code> in <code>OS X</code> / <code>mac OS</code>. It turns out the steps from the <strong>README</strong> file which came with the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""noreferrer"">installer</a> include instructions only for <code>Unix</code> and <code>Windows</code>, but not for <code>OS X</code> / <code>mac OS</code>. I tried to put the JAR files in <code>$JAVA_HOME/lib/security</code>, but it didn't work either. Do you know how can I install them?</p>
","<p>As of Java 8u152, unlimited strength can be enabled simply by setting <code>crypto.policy=unlimited</code> in the <code>java.security</code> file in </p>

<pre><code>/Library/Java/JavaVirtualMachines/&lt;jdk_version&gt;/Contents/Home/jre/lib/security 
</code></pre>

<p>It's already in that file but commented out.</p>

<p><a href=""https://i.stack.imgur.com/Kljim.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Kljim.png"" alt=""enter image description here""></a></p>

<p>See <a href=""http://www.oracle.com/technetwork/java/javase/8u152-relnotes-3850503.html#JDK-8157561"" rel=""nofollow noreferrer"">http://www.oracle.com/technetwork/java/javase/8u152-relnotes-3850503.html#JDK-8157561</a></p>
","44537","<java><macos><jce>","59","12","8","2018-12-04 09:10:33","41002560","0","20","1586231","","2017-10-26 21:21:21","2016-06-10 06:17:14",""
"37741142","How to install unlimited strength JCE for Java 8 in OS X?","<p>I need to install the <strong>Java Cryptography Extension</strong> for <code>Java 8</code> in <code>OS X</code> / <code>mac OS</code>. It turns out the steps from the <strong>README</strong> file which came with the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""noreferrer"">installer</a> include instructions only for <code>Unix</code> and <code>Windows</code>, but not for <code>OS X</code> / <code>mac OS</code>. I tried to put the JAR files in <code>$JAVA_HOME/lib/security</code>, but it didn't work either. Do you know how can I install them?</p>
","<p>As of Java JDK version 8u161 <a href=""http://www.oracle.com/technetwork/java/javase/8u161-relnotes-4021379.html#JDK-8170157"" rel=""noreferrer"">unlimited cryptography is enabled by default</a> and the other suggested methods should no longer be necessary (unless you want to disable it).</p>

<p>This change also <a href=""https://bugs.java.com/view_bug.do?bug_id=JDK-8170157"" rel=""noreferrer"">appears to be included in other major JDK versions from JDK 6 to JDK 9.</a></p>
","44537","<java><macos><jce>","59","8","8","2018-12-04 09:10:33","41002560","0","20","1586231","","2017-10-26 21:21:21","2016-06-10 06:17:14",""
"25959948","local_policy.jar and US_export_policy.jar different with Unlimited Strength Vs Default.","<p>In java platform documentation <a href=""http://www.oracle.com/technetwork/java/javase/jrereadme-182762.html"">http://www.oracle.com/technetwork/java/javase/jrereadme-182762.html</a>. Regarding the comment about </p>

<p>/lib/security/local_policy.jar
  /lib/security/US_export_policy.jar</p>

<hr>

<h2>Unlimited Strength Java Cryptography Extension</h2>

<p>Due to import control restrictions for some countries, the Java Cryptography Extension (JCE) policy files shipped with the Java SE Development Kit and the Java SE Runtime Environment allow strong but limited cryptography to be used.</p>

<p>An unlimited strength version of these files indicating no restrictions on cryptographic strengths is available on the JDK web site for those living in eligible countries.  Those living in eligible countries may download the unlimited strength version and replace the strong cryptography jar files with the unlimited strength files.
Questions</p>

<ol>
<li>Does every JDK bundle comes with local_policy.jar and US_export_policy.jar ?</li>
<li>What is the limitation in default local_policy.jar and US_export_policy.jar. Is it the key size ?</li>
<li>If I need to use 128 bit keys does it required to go for Unlimited Strength Java Cryptography<br>
Extension</li>
<li>Is there a way I can keep these two jars in external path and load it. Because I have more 50 servers rather than coping in each JDK I would prefer to maintain it in a central place. </li>
</ol>
","<blockquote>
  <p>Does every JDK bundle comes with local_policy.jar and US_export_policy.jar ?</p>
</blockquote>

<p>yup. JCE has been integrated into the Java 2 SDK since the 1.4 release.</p>

<blockquote>
  <p>What is the limitation in default local_policy.jar and US_export_policy.jar. Is it the key size ?</p>
</blockquote>

<p>Yes it is the key size. I thing more than 128 bit is not allowed. You can check the maximum size of the algorithm using <code>int maxKeyLen = Cipher.getMaxAllowedKeyLength(""AES"");</code> </p>

<blockquote>
  <p>If I need to use 128 bit keys does it required to go for Unlimited Strength Java Cryptography Extension</p>
</blockquote>

<p>For 128 bit key encryption I dont think you need Unlimited Strength Java Cryptography Extension jars. Default ones should work just fine.</p>

<blockquote>
  <p>Is there a way I can keep these two jars in external path and load it. Because I have more 50 servers rather than coping in each JDK I would prefer to maintain it in a central place. </p>
</blockquote>

<p>As mentioned above this scenario should not occur if you are using 128 bit key for encryption but if you are using more lengthy key (Eg 256) you will need to get unlimited strength jars and replace them in <code>$JAVA_HOME/jre/lib/security</code>. As it is in the JDK/JRE itself you cannot make it centralized not in case of distributed servers. You will need to replace it on each of your servers.</p>

<p>Refer oracles <a href=""http://docs.oracle.com/javase/1.5.0/docs/guide/security/jce/JCERefGuide.html#Introduction"" rel=""noreferrer"">reference guide</a>.</p>

<p>Also if you don't want to do this you can refer to following thread for alternatives - </p>

<p><a href=""https://stackoverflow.com/questions/1179672/how-to-avoid-installing-unlimited-strength-jce-policy-files-when-deploying-an"">How to avoid installing “Unlimited Strength” JCE policy files when deploying an application?</a></p>

<p>Reflection is user in the thread as a work around. Though I would not recommend it you can take a look at it.</p>

<p>I have summarized everything in a post. You can refer that too -</p>

<p><a href=""http://opensourceforgeeks.blogspot.in/2014/09/how-to-install-java-cryptography.html"" rel=""noreferrer"">How to install Java Cryptography Extension (JCE) unlimited strength jurisdiction policy files</a></p>
","40592","<java><linux><jce>","11","16","1","2015-09-20 16:18:08","25960171","0","2","","","","2014-09-21 13:57:51",""
"12245179","How to install unlimited strength JCE for JRE 7 in MacOSX?","<p>I installed Oracle JRE 7 (not JDK) for MacOSX but I can't locate where the JCE jurisdiction files are placed.</p>

<p>I need to replace them with the unlimited strength version.</p>
","<p>I've installed the Oracle JDK, and if it helps, the directory in my case was <code>/Library/Java/JavaVirtualMachines/jdk1.7.0_09.jdk/Contents/Home/jre/lib/security/</code>. Your mileage may vary, in which case just run <code>find . -name local_policy.jar</code> and see what it turns up.</p>
","39178","<java><macos><jce>","39","32","3","2015-12-01 16:06:42","21632166","4","10","304151","","2015-09-20 15:18:55","2012-09-03 09:28:06",""
"12245179","How to install unlimited strength JCE for JRE 7 in MacOSX?","<p>I installed Oracle JRE 7 (not JDK) for MacOSX but I can't locate where the JCE jurisdiction files are placed.</p>

<p>I need to replace them with the unlimited strength version.</p>
","<p>Your comment on <a href=""https://stackoverflow.com/users/24618/thom"">Thom</a>'s answer is correct. The JRE path is <code>/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/</code>, and the JCE files are then under <code>lib/security/</code>.</p>

<p>I happen to have multiple JVMs installed, so I thought it was worth showing a way to check whether a particular JVM has the correct files. These are some commands you can use to determine whether a given Java installation is configured correctly:</p>

<pre><code>find ~/Downloads/UnlimitedJCEPolicy -name *.jar |xargs md5
cd /Library/Java/JavaVirtualMachines/  # -OR-
cd '/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/'
find . \( -name local_policy.jar -or -name US_export_policy.jar \) |xargs md5
</code></pre>

<p>Once you know the path to the files, you can replace them as-needed. Keep in mind that each version of Java may require different JCE libraries. You may need separate jars for 6, 7, and 8, depending on compatibility.</p>
","39178","<java><macos><jce>","39","24","3","2015-12-01 16:06:42","21632166","4","10","304151","","2015-09-20 15:18:55","2012-09-03 09:28:06",""
"12245179","How to install unlimited strength JCE for JRE 7 in MacOSX?","<p>I installed Oracle JRE 7 (not JDK) for MacOSX but I can't locate where the JCE jurisdiction files are placed.</p>

<p>I need to replace them with the unlimited strength version.</p>
","<p><strong>This is for the JDK, not the JRE</strong>.</p>

<hr>

<p>I'm on a Mac, OSx Lion and I used <a href=""https://stackoverflow.com/a/6588410/761771""><code>/usr/libexec/java_home</code></a> to find my java home</p>

<pre><code>/usr/libexec/java_home -V
# Matching Java Virtual Machines (3):
#     1.7.0_51, x86_64: ""Java SE 7"" /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
#     1.6.0_65-b14-462, x86_64: ""Java SE 6"" /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
#     1.6.0_65-b14-462, i386:   ""Java SE 6"" /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
# 
# /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home

/usr/libexec/java_home
# /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home

/usr/libexec/java_home -v 1.6
# /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home

/usr/libexec/java_home -v 1.7
# /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
</code></pre>

<p>From here you can use this executable and find to locate these files</p>

<pre><code>find $(/usr/libexec/java_home -v 1.7) -name local_policy.jar
# /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/security/local_policy.jar

find $(/usr/libexec/java_home -v 1.7) -name US_export_policy.jar
# /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/security/US_export_policy.jar
</code></pre>

<p>And combine that with @ngreen's answer to get the md5 of these files (if you want)</p>

<pre><code>find ~/Downloads/UnlimitedJCEPolicy -name *.jar |xargs md5
# MD5 (/Users/nperry/Downloads/UnlimitedJCEPolicy/local_policy.jar) = 9dd69bcc7637d872121880c35437788d
# MD5 (/Users/nperry/Downloads/UnlimitedJCEPolicy/US_export_policy.jar) = 3bb2e88a915b3cb003ca185357a92c16

find $(/usr/libexec/java_home -v 1.7) -name local_policy.jar | xargs md5
# MD5 (/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/security/local_policy.jar) = f41ab8f64b1fa13fec7276579c420951

find $(/usr/libexec/java_home -v 1.7) -name US_export_policy.jar | xargs md5
# MD5 (/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/security/US_export_policy.jar) = d5d126ae15abecb7d6e3a28b0d57543e
</code></pre>

<p>And you can see I have not replaced these files yet.</p>

<p>Backup the original files if you want</p>

<pre><code>mkdir ~/Downloads/JCEPolicy-originals-1.7/
cp $(find $(/usr/libexec/java_home -v 1.7) -name local_policy.jar)     ~/Downloads/JCEPolicy-originals-1.7/
cp $(find $(/usr/libexec/java_home -v 1.7) -name US_export_policy.jar) ~/Downloads/JCEPolicy-originals-1.7/
</code></pre>

<p>You can replace the files with this.</p>

<pre><code>sudo cp ~/Downloads/UnlimitedJCEPolicy/local_policy.jar $(find $(/usr/libexec/java_home -v 1.7) -name local_policy.jar)
sudo cp ~/Downloads/UnlimitedJCEPolicy/US_export_policy.jar $(find $(/usr/libexec/java_home -v 1.7) -name US_export_policy.jar)
</code></pre>

<p>And getting the MD5s tells me if it worked</p>

<pre><code>find $(/usr/libexec/java_home -v 1.7) -name local_policy.jar | xargs md5
# MD5 (/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/security/local_policy.jar) = 9dd69bcc7637d872121880c35437788d

find $(/usr/libexec/java_home -v 1.7) -name US_export_policy.jar | xargs md5
# MD5 (/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/security/US_export_policy.jar) = 3bb2e88a915b3cb003ca185357a92c16
</code></pre>
","39178","<java><macos><jce>","39","26","3","2015-12-01 16:06:42","21632166","4","10","304151","","2015-09-20 15:18:55","2012-09-03 09:28:06",""
"16970302","Reading pkcs12 certificate information","<p>I have a problem with reading certificate information. I want to read full information using java with bouncycastle library in Android programmatically. Now, i'm just using keytool command in console:</p>

<pre><code>&gt;keytool -list -keystore 1.p12 -storetype pkcs12 -v
</code></pre>

<p>Any suggestions?</p>
","<p>I've found solution, the main idea is to cast certificate to x509, then get the SubjectDN and parse values. </p>

<pre><code>public class TestClass {
    public static void main(String[] args) throws Exception {

        KeyStore p12 = KeyStore.getInstance(""pkcs12"");
        p12.load(new FileInputStream(""pkcs.p12""), ""password"".toCharArray());
        Enumeration&lt;String&gt; e = p12.aliases();
        while (e.hasMoreElements()) {
            String alias = e.nextElement();
            X509Certificate c = (X509Certificate) p12.getCertificate(alias);
            Principal subject = c.getSubjectDN();
            String subjectArray[] = subject.toString().split("","");
            for (String s : subjectArray) {
                String[] str = s.trim().split(""="");
                String key = str[0];
                String value = str[1];
                System.out.println(key + "" - "" + value);
            }
        }
    }
}
</code></pre>
","35491","<java><bouncycastle><jce><pkcs#12>","12","43","1","2019-04-15 11:15:46","16980246","2","10","1193874","","2018-10-29 20:46:19","2013-06-06 19:12:20",""
"19176207","How to Encrypt and Decrypt file Using RSA And AES Algorithm","<p>I want to encrypt test.txt file I am using this java class for encryption and decryption.In My directory I have three files private.txt for save private key and public.txt for public key and test.txt  is for encryption.</p>

<pre><code>    package EncryptionDecryption;
    import java.io.BufferedInputStream;


    public class EncryptionUtil {

      /**
       * String to hold name of the encryption algorithm.
       */
      public static final String ALGORITHM = ""RSA"";

      /**
       * String to hold the name of the private key file.
       */
      public static final String PRIVATE_KEY_FILE = ""private.txt"";

      /**
       * String to hold name of the public key file.
       */
      public static final String PUBLIC_KEY_FILE = ""public.txt"";


      public static void generateKey() {
        try {
          final KeyPairGenerator keyGen = KeyPairGenerator.getInstance(ALGORITHM);
          keyGen.initialize(1024);
          final KeyPair key = keyGen.generateKeyPair();

          File privateKeyFile = new File(PRIVATE_KEY_FILE);
          File publicKeyFile = new File(PUBLIC_KEY_FILE);

          // Create files to store public and private key
          if (privateKeyFile.getParentFile() != null) {
            privateKeyFile.getParentFile().mkdirs();
          }
          privateKeyFile.createNewFile();

          if (publicKeyFile.getParentFile() != null) {
            publicKeyFile.getParentFile().mkdirs();
          }
          publicKeyFile.createNewFile();

          // Saving the Public key in a file
          ObjectOutputStream publicKeyOS = new ObjectOutputStream(
              new FileOutputStream(publicKeyFile));
          publicKeyOS.writeObject(key.getPublic());
          System.out.println(""public""+key.getPublic().getEncoded());
          publicKeyOS.close();

          // Saving the Private key in a file
          ObjectOutputStream privateKeyOS = new ObjectOutputStream(
              new FileOutputStream(privateKeyFile));
          privateKeyOS.writeObject(key.getPrivate());
          System.out.println(""private""+key.getPrivate().getEncoded());
          //System.out.println(key.getPrivate());
          privateKeyOS.close();
        } catch (Exception e) {
          e.printStackTrace();
        }

      }

      public static boolean areKeysPresent() {

        File privateKey = new File(PRIVATE_KEY_FILE);
        File publicKey = new File(PUBLIC_KEY_FILE);

        if (privateKey.exists() &amp;&amp; publicKey.exists()) {
          return true;
        }
        return false;
      }


      public static byte[] encrypt(byte[]bs, PublicKey key) {
        byte[] cipherText = null;
        try {
          // get an RSA cipher object and print the provider
          final Cipher cipher = Cipher.getInstance(ALGORITHM);
          // encrypt the plain text using the public key
          cipher.init(Cipher.ENCRYPT_MODE, key);
          cipherText = cipher.doFinal(bs);
        } catch (Exception e) {
          e.printStackTrace();
        }
        return cipherText;
      }


      public static String decrypt(byte[] text, PrivateKey key) {
        byte[] dectyptedText = null;
        try {
          // get an RSA cipher object and print the provider
          final Cipher cipher = Cipher.getInstance(ALGORITHM);

          // decrypt the text using the private key
          cipher.init(Cipher.DECRYPT_MODE, key);
          dectyptedText = cipher.doFinal(text);

        } catch (Exception ex) {
          ex.printStackTrace();
        }

        return new String(dectyptedText);
      }

      public static void main(String[] args)throws IOException {
          System.out.println(""Hai"");

        try {

          // Check if the pair of keys are present else generate those.


            generateKey();
            File f=new File(""test.txt"");
            byte[] contents = new byte[(int)f.length()];
            BufferedInputStream bis = null;
            try
            {
                bis = new BufferedInputStream(new FileInputStream(f));
                DataInputStream dis = new DataInputStream(bis);
                dis.readFully(contents);
            }
            finally
            {
                if(bis != null)
                {
                    bis.close();
                }
            }           


         // final String originalText = ""Text to be encrypted"";


          // Encrypt the string using the public key
          ObjectInputStream  inputStream = new ObjectInputStream(new FileInputStream(PUBLIC_KEY_FILE));
          final PublicKey publicKey = (PublicKey) inputStream.readObject();
          final byte[] cipherText = encrypt(contents, publicKey);
          inputStream.close();
          // Decrypt the cipher text using the private key.
          ObjectInputStream inputStream1 = new ObjectInputStream(new FileInputStream(PRIVATE_KEY_FILE));
          final PrivateKey privateKey = (PrivateKey) inputStream1.readObject();
          final String plainText = decrypt(cipherText, privateKey);

          // Printing the Original, Encrypted and Decrypted Text

          System.out.println(""Original Text: "" + contents.toString());
          System.out.println(""Encrypted Text: "" +cipherText);
          System.out.println(""Decrypted Text: "" + plainText);
          inputStream.close();
          inputStream1.close();

        } catch (Exception e) {
          e.printStackTrace();
        }
        finally
        {

        }

        }
      }




I got this error when debugging

I

    public[B@f73c1
    private[B@15b9e68
    javax.crypto.IllegalBlockSizeException: Data must not be longer than 117 bytes
        at com.sun.crypto.provider.RSACipher.a(DashoA13*..)
        at com.sun.crypto.provider.RSACipher.engineDoFinal(DashoA13*..)
        at javax.crypto.Cipher.doFinal(DashoA13*..)
        at EncryptionDecryption.EncryptionUtil.encrypt(EncryptionUtil.java:122)
        at EncryptionDecryption.EncryptionUtil.main(EncryptionUtil.java:193)
    java.lang.IllegalArgumentException: Null input buffer
        at javax.crypto.Cipher.doFinal(DashoA13*..)
        at EncryptionDecryption.EncryptionUtil.decrypt(EncryptionUtil.java:147)
        at EncryptionDecryption.EncryptionUtil.main(EncryptionUtil.java:198)
    java.lang.NullPointerException
        at java.lang.String.&lt;init&gt;(String.java:593)
        at EncryptionDecryption.EncryptionUtil.decrypt(EncryptionUtil.java:153)
        at EncryptionDecryption.EncryptionUtil.main(EncryptionUtil.java:198)
</code></pre>
","<p>There is a good basic example <a href=""http://www.mkyong.com/java/jce-encryption-data-encryption-standard-des-tutorial/"" rel=""nofollow noreferrer"">here</a> on encrypting a String with.  This example uses DES but I belive the principle is the same and so will hopefully help get you started.  </p>

<p>The Stack Trace you have posted is very similar to the issue faced in <a href=""https://stackoverflow.com/questions/10007147/getting-a-illegalblocksizeexception-data-must-not-be-longer-than-256-bytes-when"">this post</a>.  There is an accepted answer there if you have a look which may provide you with a fix also.</p>

<p>Good luck!</p>
","34421","<java><jce>","0","2","1","2013-10-05 03:24:26","19176592","1","0","2721012","","2013-10-05 03:24:26","2013-10-04 08:01:35","2013-10-04 09:41:55"
"87030","Where to find Java 6 JSSE/JCE Source Code?","<p>Where can I download the JSSE and JCE source code for the latest release of Java?  The source build available at <a href=""https://jdk6.dev.java.net/"" rel=""noreferrer"">https://jdk6.dev.java.net/</a> does not include the javax.crypto (JCE) packages nor the com.sun.net.ssl.internal (JSSE) packages.</p>

<p>Not being able to debug these classes makes solving SSL issues incredibly difficult.</p>
","<p>there: <a href=""http://openjdk.java.net/groups/security/"" rel=""noreferrer"">openjdk javax.net</a> in the security group </p>

<pre><code>src/share/classes/javax/net
src/share/classes/com/sun/net/ssl
src/share/classes/sun/security/ssl
src/share/classes/sun/net/www/protocol/https
</code></pre>

<p>also on this page:</p>

<pre><code>src/share/classes/javax/crypto
src/share/classes/com/sun/crypto/provider
src/share/classes/sun/security/pkcs11
src/share/classes/sun/security/mscapi
</code></pre>

<blockquote>
  <p>These directories contain the core
  cryptography framework and three
  providers (SunJCE, SunPKCS11,
  SunMSCAPI). <strong>SunJCE</strong> contains Java
  implementations of many popular
  algorithms, and the latter two
  libraries allow calls made through the
  standard Java cryptography APIs to be
  routed into their respective native
  libraries.</p>
</blockquote>
","29914","<java><jce><jsse>","26","13","6","2016-03-12 10:42:06","","2","2","15168","Dave L.","2015-05-03 02:55:35","2008-09-17 20:03:01",""
"87030","Where to find Java 6 JSSE/JCE Source Code?","<p>Where can I download the JSSE and JCE source code for the latest release of Java?  The source build available at <a href=""https://jdk6.dev.java.net/"" rel=""noreferrer"">https://jdk6.dev.java.net/</a> does not include the javax.crypto (JCE) packages nor the com.sun.net.ssl.internal (JSSE) packages.</p>

<p>Not being able to debug these classes makes solving SSL issues incredibly difficult.</p>
","<p>Put <a href=""http://www.kpdus.com/jad.html"" rel=""nofollow noreferrer"">Jad</a> on your system path. Install <a href=""http://jadclipse.sourceforge.net/"" rel=""nofollow noreferrer"">JadClipse</a> plugin for Eclipse. Use the force, read the decompiled source. :-)</p>
","29914","<java><jce><jsse>","26","1","6","2016-03-12 10:42:06","","2","2","15168","Dave L.","2015-05-03 02:55:35","2008-09-17 20:03:01",""
"87030","Where to find Java 6 JSSE/JCE Source Code?","<p>Where can I download the JSSE and JCE source code for the latest release of Java?  The source build available at <a href=""https://jdk6.dev.java.net/"" rel=""noreferrer"">https://jdk6.dev.java.net/</a> does not include the javax.crypto (JCE) packages nor the com.sun.net.ssl.internal (JSSE) packages.</p>

<p>Not being able to debug these classes makes solving SSL issues incredibly difficult.</p>
","<p>While this doesn't directly answer your question, using the javax.net.debug system property has helped me sort through SSL issues. -Djavax.net.debug=all pretty much gives you everything in gory detail. Documentation on this is at <a href=""http://docs.huihoo.com/java/se/jdk6/docs/guide/security/jsse/JSSERefGuide.html#Debug"" rel=""nofollow noreferrer"">JSSE Debugging Utilities</a>.</p>

<p>One note: I've seen that on Java 1.4 and maybe 1.5 levels, the output with option ""all"" is not as complete as it is using the same option on the Java 1.6 level. E.g., 1.6 shows the actual contents of network (socket) reads and writes. Maybe some levels of 1.4 and 1.5 do as well, but 1.6 was more consistent.</p>
","29914","<java><jce><jsse>","26","1","6","2016-03-12 10:42:06","","2","2","15168","Dave L.","2015-05-03 02:55:35","2008-09-17 20:03:01",""
"87030","Where to find Java 6 JSSE/JCE Source Code?","<p>Where can I download the JSSE and JCE source code for the latest release of Java?  The source build available at <a href=""https://jdk6.dev.java.net/"" rel=""noreferrer"">https://jdk6.dev.java.net/</a> does not include the javax.crypto (JCE) packages nor the com.sun.net.ssl.internal (JSSE) packages.</p>

<p>Not being able to debug these classes makes solving SSL issues incredibly difficult.</p>
","<p>I downloaded the src jar from: <a href=""http://download.java.net/jdk6/source/"" rel=""nofollow"">http://download.java.net/jdk6/source/</a></p>

<p>NOTE: 
This is a self extracting jar, so just linking to it won't work.</p>

<p>... and <code>jar -xvf &lt;filename&gt;</code> won't work either.</p>

<p>You need to: <code>java -jar &lt;filename&gt;</code></p>

<p>cheers,
jer</p>
","29914","<java><jce><jsse>","26","4","6","2016-03-12 10:42:06","","2","2","15168","Dave L.","2015-05-03 02:55:35","2008-09-17 20:03:01",""
"87030","Where to find Java 6 JSSE/JCE Source Code?","<p>Where can I download the JSSE and JCE source code for the latest release of Java?  The source build available at <a href=""https://jdk6.dev.java.net/"" rel=""noreferrer"">https://jdk6.dev.java.net/</a> does not include the javax.crypto (JCE) packages nor the com.sun.net.ssl.internal (JSSE) packages.</p>

<p>Not being able to debug these classes makes solving SSL issues incredibly difficult.</p>
","<p>if you just want read the source code:</p>

<p><a href=""http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/sun/security/ssl/SSLSocketImpl.java"" rel=""nofollow"">http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/sun/security/ssl/SSLSocketImpl.java</a></p>
","29914","<java><jce><jsse>","26","2","6","2016-03-12 10:42:06","","2","2","15168","Dave L.","2015-05-03 02:55:35","2008-09-17 20:03:01",""
"87030","Where to find Java 6 JSSE/JCE Source Code?","<p>Where can I download the JSSE and JCE source code for the latest release of Java?  The source build available at <a href=""https://jdk6.dev.java.net/"" rel=""noreferrer"">https://jdk6.dev.java.net/</a> does not include the javax.crypto (JCE) packages nor the com.sun.net.ssl.internal (JSSE) packages.</p>

<p>Not being able to debug these classes makes solving SSL issues incredibly difficult.</p>
","<p>For some unknown reason Orcale doesn't released source.jar and javadocs jar for JSE.
I found only one place where you can find them <a href=""http://jdk7src.sourceforge.net/"" rel=""nofollow"">http://jdk7src.sourceforge.net/</a> but it's outdated and unofficial.
The only one way is to clone OpenJDK repository</p>
","29914","<java><jce><jsse>","26","0","6","2016-03-12 10:42:06","","2","2","15168","Dave L.","2015-05-03 02:55:35","2008-09-17 20:03:01",""
"9534512","bouncycastle + JBoss AS7: JCE cannot authenticate the provider BC","<p>I use BouncyCastle for encryption in my application. When I run it standalone, everything works fine. However, if I put it in the webapp and deploy on JBoss server, I get a following error:</p>

<pre><code>javax.servlet.ServletException: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
(...)
root cause
java.lang.Exception: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
(...)
root cause
java.io.IOException: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
    org.bouncycastle.jce.provider.JDKPKCS12KeyStore.engineLoad(Unknown Source)
    java.security.KeyStore.load(Unknown Source)
</code></pre>

<p>Here is a part of the code that causes this error:</p>

<pre><code>    if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null)
    {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    }

    // Read the Private Key
    KeyStore ks = KeyStore.getInstance(""PKCS12"", BouncyCastleProvider.PROVIDER_NAME);
    ks.load(new FileInputStream(certificatePath), privateKeyPassword.toCharArray());
</code></pre>

<p>And maven dependency:</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;bouncycastle&lt;/groupId&gt;
    &lt;artifactId&gt;bcmail-jdk16&lt;/artifactId&gt;
    &lt;version&gt;140&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>Do you know how could I deploy it?</p>
","<p>Do not deploy the bouncy-castle jar as a part of your your webapp (WEB-INF/lib). You need this file in compiliation time of course, but on JBOSS it should be here:
<br></p>

<pre><code>$JBOSS_HOME/server/default/lib/
</code></pre>

<p>instead of
<br></p>

<pre><code>yourapp/WEB-INF/lib
</code></pre>
","28878","<java><security><jboss><bouncycastle><jce>","24","14","5","2018-07-12 13:51:09","9535479","0","10","580346","","2012-03-02 14:18:48","2012-03-02 13:59:15",""
"9534512","bouncycastle + JBoss AS7: JCE cannot authenticate the provider BC","<p>I use BouncyCastle for encryption in my application. When I run it standalone, everything works fine. However, if I put it in the webapp and deploy on JBoss server, I get a following error:</p>

<pre><code>javax.servlet.ServletException: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
(...)
root cause
java.lang.Exception: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
(...)
root cause
java.io.IOException: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
    org.bouncycastle.jce.provider.JDKPKCS12KeyStore.engineLoad(Unknown Source)
    java.security.KeyStore.load(Unknown Source)
</code></pre>

<p>Here is a part of the code that causes this error:</p>

<pre><code>    if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null)
    {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    }

    // Read the Private Key
    KeyStore ks = KeyStore.getInstance(""PKCS12"", BouncyCastleProvider.PROVIDER_NAME);
    ks.load(new FileInputStream(certificatePath), privateKeyPassword.toCharArray());
</code></pre>

<p>And maven dependency:</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;bouncycastle&lt;/groupId&gt;
    &lt;artifactId&gt;bcmail-jdk16&lt;/artifactId&gt;
    &lt;version&gt;140&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>Do you know how could I deploy it?</p>
","<p>For JBoss AS7 bouncy castle needs to be deployed as a server module. This replaces the <code>server/default/lib</code> mechanism of earlier versions (as mentioned in Gergely Bacso's answer).</p>

<p>JBoss AS7 uses jdk1.6+. When using JBoss AS7 with jdk1.6 we need to make sure we are using bcprov-jdk16.</p>

<p>Create a Jboss module (a folder $JBOSS_HOME/modules/org/bouncycastle/main).
Put the bouncy castle jars that you want to be globally available in it, along with a <code>module.xml</code> file that looks like this:  </p>

<pre><code>&lt;module xmlns=""urn:jboss:module:1.1"" name=""org.bouncycastle""&gt;
    &lt;resources&gt;
        &lt;resource-root path=""bcprov-jdk16-1.46.jar""/&gt;
    &lt;/resources&gt;
    &lt;dependencies&gt;
        &lt;module name=""javax.api"" slot=""main"" export=""true""/&gt;
    &lt;/dependencies&gt;
&lt;/module&gt;
</code></pre>

<p>Once you have setup the module you need to make it available to your deployments. There are two ways:</p>

<h2>1. Globally via standalone.xml</h2>

<p>In $JBOSS_HOME/standalone/configuration/standalone.xml replace</p>

<pre><code>&lt;subsystem xmlns=""urn:jboss:domain:ee:1.0""/&gt;
</code></pre>

<p>with  </p>

<pre><code>&lt;subsystem xmlns=""urn:jboss:domain:ee:1.0""&gt;
    &lt;global-modules&gt;
        &lt;module name=""org.bouncycastle"" slot=""main""/&gt;
    &lt;/global-modules&gt;
&lt;/subsystem&gt;
</code></pre>

<p>The jar libraries will now be available across all applications (and this will ""emulate"" adding to the classpath as was possible in jboss 4,5,6 etc)</p>

<h2>2. For a specific deployment (preferred)</h2>

<p>Add a module dependency entry to the ear's <code>META-INF/jboss-deployment-structure.xml</code> file, under the  section, eg:</p>

<pre><code>&lt;jboss-deployment-structure xmlns=""urn:jboss:deployment-structure:1.1""&gt;
    &lt;deployment&gt;
        &lt;dependencies&gt;
            &lt;module name=""org.bouncycastle"" slot=""main"" export=""true"" /&gt;
        &lt;/dependencies&gt;
    &lt;/deployment&gt;
&lt;/jboss-deployment-structure&gt;
</code></pre>
","28878","<java><security><jboss><bouncycastle><jce>","24","45","5","2018-07-12 13:51:09","9535479","0","10","580346","","2012-03-02 14:18:48","2012-03-02 13:59:15",""
"9534512","bouncycastle + JBoss AS7: JCE cannot authenticate the provider BC","<p>I use BouncyCastle for encryption in my application. When I run it standalone, everything works fine. However, if I put it in the webapp and deploy on JBoss server, I get a following error:</p>

<pre><code>javax.servlet.ServletException: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
(...)
root cause
java.lang.Exception: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
(...)
root cause
java.io.IOException: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
    org.bouncycastle.jce.provider.JDKPKCS12KeyStore.engineLoad(Unknown Source)
    java.security.KeyStore.load(Unknown Source)
</code></pre>

<p>Here is a part of the code that causes this error:</p>

<pre><code>    if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null)
    {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    }

    // Read the Private Key
    KeyStore ks = KeyStore.getInstance(""PKCS12"", BouncyCastleProvider.PROVIDER_NAME);
    ks.load(new FileInputStream(certificatePath), privateKeyPassword.toCharArray());
</code></pre>

<p>And maven dependency:</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;bouncycastle&lt;/groupId&gt;
    &lt;artifactId&gt;bcmail-jdk16&lt;/artifactId&gt;
    &lt;version&gt;140&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>Do you know how could I deploy it?</p>
","<p>But if You change server from JBoss to other (for example Glassfish) You have the same problem.<br/>
The better solition for me are changes in jdk.<br/>
You shoud add Bouncy Castle to security providers on Your java platform in two steps:<br/>
<strong>1.</strong> Copy BC librarys (currently bcpkix-jdk15on-149.jar, bcprov-jdk15on-149.jar) to directory <strong>$JAVA_HOME/jre/lib/ext/</strong><br/>
<strong>2.</strong> Register BC provider: edit file <strong>$JAVA_HOME/jre/lib/security/java.security</strong> and under line</p>

<pre><code>security.provider.1=sun.security.provider.Sun
</code></pre>

<p>add Your BC provider</p>

<pre><code>security.provider.2=org.bouncycastle.jce.provider.BouncyCastleProvider
</code></pre>

<p>Change numbers of rest providers. The whole block of providers should be similar to:</p>

<pre><code>security.provider.1=sun.security.provider.Sun
security.provider.2=org.bouncycastle.jce.provider.BouncyCastleProvider
security.provider.3=sun.security.rsa.SunRsaSign
security.provider.4=sun.security.ec.SunEC
security.provider.5=com.sun.net.ssl.internal.ssl.Provider
security.provider.6=com.sun.crypto.provider.SunJCE
security.provider.7=sun.security.jgss.SunProvider
security.provider.8=com.sun.security.sasl.Provider
security.provider.9=org.jcp.xml.dsig.internal.dom.XMLDSigRI
security.provider.10=sun.security.smartcardio.SunPCSC
</code></pre>

<p>And now You must just restart the java server.</p>
","28878","<java><security><jboss><bouncycastle><jce>","24","13","5","2018-07-12 13:51:09","9535479","0","10","580346","","2012-03-02 14:18:48","2012-03-02 13:59:15",""
"9534512","bouncycastle + JBoss AS7: JCE cannot authenticate the provider BC","<p>I use BouncyCastle for encryption in my application. When I run it standalone, everything works fine. However, if I put it in the webapp and deploy on JBoss server, I get a following error:</p>

<pre><code>javax.servlet.ServletException: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
(...)
root cause
java.lang.Exception: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
(...)
root cause
java.io.IOException: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
    org.bouncycastle.jce.provider.JDKPKCS12KeyStore.engineLoad(Unknown Source)
    java.security.KeyStore.load(Unknown Source)
</code></pre>

<p>Here is a part of the code that causes this error:</p>

<pre><code>    if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null)
    {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    }

    // Read the Private Key
    KeyStore ks = KeyStore.getInstance(""PKCS12"", BouncyCastleProvider.PROVIDER_NAME);
    ks.load(new FileInputStream(certificatePath), privateKeyPassword.toCharArray());
</code></pre>

<p>And maven dependency:</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;bouncycastle&lt;/groupId&gt;
    &lt;artifactId&gt;bcmail-jdk16&lt;/artifactId&gt;
    &lt;version&gt;140&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>Do you know how could I deploy it?</p>
","<p>As I put in some other thread it can be also added programmatically by putting the line:</p>

<p>Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());</p>

<p>Source:
<a href=""https://stackoverflow.com/questions/32775478/jce-cannot-authenticate-the-provider-bc"">jce cannot authenticate the provider bc</a> </p>
","28878","<java><security><jboss><bouncycastle><jce>","24","0","5","2018-07-12 13:51:09","9535479","0","10","580346","","2012-03-02 14:18:48","2012-03-02 13:59:15",""
"9534512","bouncycastle + JBoss AS7: JCE cannot authenticate the provider BC","<p>I use BouncyCastle for encryption in my application. When I run it standalone, everything works fine. However, if I put it in the webapp and deploy on JBoss server, I get a following error:</p>

<pre><code>javax.servlet.ServletException: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
(...)
root cause
java.lang.Exception: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
(...)
root cause
java.io.IOException: error constructing MAC: java.security.NoSuchProviderException: JCE cannot authenticate the provider BC
    org.bouncycastle.jce.provider.JDKPKCS12KeyStore.engineLoad(Unknown Source)
    java.security.KeyStore.load(Unknown Source)
</code></pre>

<p>Here is a part of the code that causes this error:</p>

<pre><code>    if (Security.getProvider(BouncyCastleProvider.PROVIDER_NAME) == null)
    {
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
    }

    // Read the Private Key
    KeyStore ks = KeyStore.getInstance(""PKCS12"", BouncyCastleProvider.PROVIDER_NAME);
    ks.load(new FileInputStream(certificatePath), privateKeyPassword.toCharArray());
</code></pre>

<p>And maven dependency:</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;bouncycastle&lt;/groupId&gt;
    &lt;artifactId&gt;bcmail-jdk16&lt;/artifactId&gt;
    &lt;version&gt;140&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>Do you know how could I deploy it?</p>
","<p>For those who don't want to change server level config,</p>

<pre><code>&lt;jboss-deployment-structure&gt;  
   &lt;deployment&gt;  
      &lt;resources&gt;  
         &lt;resource-root path=""WEB-INF/lib/bcprov-jdk16-1.46.jar"" use-physical-code-source=""true""/&gt;  
      &lt;/resources&gt;  
   &lt;/deployment&gt;  
&lt;/jboss-deployment-structure&gt;  
</code></pre>

<p>adding the bouncy castle jars with use-physical-code-source worked for me</p>
","28878","<java><security><jboss><bouncycastle><jce>","24","0","5","2018-07-12 13:51:09","9535479","0","10","580346","","2012-03-02 14:18:48","2012-03-02 13:59:15",""
"7953567","Checking if Unlimited Cryptography is available","<p>How can I check, in Java code, if the current JVM have unlimited strength cryptography available?</p>
","<p><strong>NOTE</strong>: Please use <a href=""https://stackoverflow.com/a/7954769/649852"">jefflunt's answer</a> or <a href=""https://stackoverflow.com/a/8607735/649852"">KonstantinSpirov's answer</a>. This answer is not a valid answer since it will always return <code>true</code>. I am leaving this answer here only because it is referenced elsewhere in answers and comments and is useful as a reference only.</p>

<hr>

<p>You could use the following to initialize a <code>static final boolean</code> somewhere that you can then use for testing unlimited crypto support (since AES 256-bit is only supported if the unrestricted policy is installed).</p>

<pre><code>boolean isUnlimitedSupported = false;
try {
    KeyGenerator kgen = KeyGenerator.getInstance(""AES"", ""SunJCE"");
    kgen.init(256);
    isUnlimitedSupported = true;
} catch (NoSuchAlgorithmException e) {
    isUnlimitedSupported = false;
} catch (NoSuchProviderException e) {
    isUnlimitedSupported = false;
}
System.out.println(""isUnlimitedSupported="" + isUnlimitedSupported);
// set static final variable = isUnlimitedSupported;
</code></pre>
","28514","<java><jce>","44","0","9","2018-05-07 18:16:08","7954769","2","20","","","","2011-10-31 12:15:53",""
"7953567","Checking if Unlimited Cryptography is available","<p>How can I check, in Java code, if the current JVM have unlimited strength cryptography available?</p>
","<p>I think you could probably use <a href=""http://download.oracle.com/javase/6/docs/api/javax/crypto/Cipher.html#getMaxAllowedKeyLength%28java.lang.String%29"" rel=""noreferrer"">Cipher.getMaxAllowedKeyLength()</a>, while also comparing the cypher you're using to known lists of ""good"", secure cyphers, such as AES.</p>

<p><a href=""http://download.oracle.com/javase/1.4.2/docs/guide/security/jce/JCERefGuide.html#AppE"" rel=""noreferrer"">Here's a reference article</a> that lists maximum key size jurisdiction limitations that were current as of Java 1.4 (these likely haven't changed, unless the law has also changed - see below).</p>

<p>If you are operating in a nation that has cryptographic export/import restrictions, you'd have to consult the law in your nation, but it's probably safe to assume in these situations that you <em>don't</em> have unlimited strength cryptography available (by default) in your JVM. Putting it another way, assuming you're using the <a href=""http://www.oracle.com/index.html"" rel=""noreferrer"">official JVM from Oracle</a>, and you happen to live in a nation against which the U.S. has leveled export restrictions for cryptography (and since Oracle is a United States company, it would be subject to these restrictions), then you could also assume in this case that you don't have unlimited strength available.</p>

<p>Of course, <a href=""http://logi.org/cgi-bin/viewcvs.cgi/logi.crypto/ref/art19.htm?rev=1.1.1.1"" rel=""noreferrer"">that doesn't stop you from building your own</a>, and thereby granting yourself unlimited strength, but depending on your local laws, that might be illegal.</p>

<p><a href=""http://en.wikipedia.org/wiki/Export_of_cryptography_in_the_United_States"" rel=""noreferrer"">This article</a> outlines the restrictions on export to other nations, from the Unites States.</p>
","28514","<java><jce>","44","25","9","2018-05-07 18:16:08","7954769","2","20","","","","2011-10-31 12:15:53",""
"7953567","Checking if Unlimited Cryptography is available","<p>How can I check, in Java code, if the current JVM have unlimited strength cryptography available?</p>
","<p>In the same spirit as the answer of Dan Cruz, but with a single line of code and without  going trough exceptions:</p>

<pre><code>boolean limit = Cipher.getMaxAllowedKeyLength(""RC5"")&lt;256;
</code></pre>

<p>So a complete program might be:</p>

<pre><code>import javax.crypto.Cipher;

public class TestUCE {
  public static void main(String args[]) throws Exception {
    boolean unlimited =
      Cipher.getMaxAllowedKeyLength(""RC5"") &gt;= 256;
    System.out.println(""Unlimited cryptography enabled: "" + unlimited);
  }
}
</code></pre>
","28514","<java><jce>","44","43","9","2018-05-07 18:16:08","7954769","2","20","","","","2011-10-31 12:15:53",""
"7953567","Checking if Unlimited Cryptography is available","<p>How can I check, in Java code, if the current JVM have unlimited strength cryptography available?</p>
","<p>If you are using Linux, you can check it easily with this command </p>

<pre><code>java -version ; \
echo 'System.err.println(javax.crypto.Cipher.getInstance(""AES/CBC/PKCS5Padding"").getMaxAllowedKeyLength(""AES""));'  \
| java -cp /usr/share/java/bsh-*.jar bsh.Interpreter &gt;/dev/null
</code></pre>

<p>If the output is something like that, unlimited strength cryptography is not available</p>

<pre><code>java version ""1.7.0_76""
Java(TM) SE Runtime Environment (build 1.7.0_76-b13)
Java HotSpot(TM) 64-Bit Server VM (build 24.76-b04, mixed mode)
128
</code></pre>
","28514","<java><jce>","44","3","9","2018-05-07 18:16:08","7954769","2","20","","","","2011-10-31 12:15:53",""
"7953567","Checking if Unlimited Cryptography is available","<p>How can I check, in Java code, if the current JVM have unlimited strength cryptography available?</p>
","<p>If you are on Linux and you have installed the JDK (but Beanshell is not available), you can check with the <code>runscript</code> command provided with the JDK.</p>

<pre><code>jrunscript -e 'exit (javax.crypto.Cipher.getMaxAllowedKeyLength(""RC5"") &gt;= 256 ? 0 : 1);'; echo $?
</code></pre>

<p>This returns a <code>0</code> status code if the Unlimited Cryptography is available, or <code>1</code> if not available.  Zero is the correct 'success' return value for shell functions, and non-zero indicates a failure.</p>
","28514","<java><jce>","44","34","9","2018-05-07 18:16:08","7954769","2","20","","","","2011-10-31 12:15:53",""
"7953567","Checking if Unlimited Cryptography is available","<p>How can I check, in Java code, if the current JVM have unlimited strength cryptography available?</p>
","<p>I recently had to do add a JCE check and my solution evolved to the following snippet.  This was a groovy script, but it should be easy to convert to standard java method with a try catch.  This has been tested with Java 7 &amp; Java 8.</p>

<pre><code>import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.SecretKey;

// Make a blank 256 Bit AES Key
final SecretKey secretKey = new SecretKeySpec(new byte[32], ""AES"");
final Cipher encryptCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
// This line will throw a invalid key length exception if you don't have
// JCE Unlimited strength installed
encryptCipher.init(Cipher.ENCRYPT_MODE, secretKey);
// If it makes it here, you have JCE installed
</code></pre>
","28514","<java><jce>","44","-1","9","2018-05-07 18:16:08","7954769","2","20","","","","2011-10-31 12:15:53",""
"7953567","Checking if Unlimited Cryptography is available","<p>How can I check, in Java code, if the current JVM have unlimited strength cryptography available?</p>
","<p>The way how to check if restrictions apply is documented in the method <a href=""https://docs.oracle.com/javase/8/docs/api/javax/crypto/Cipher.html#getMaxAllowedKeyLength-java.lang.String-"" rel=""nofollow noreferrer""><code>Cipher.getMaxAllowedKeyLength</code></a>:</p>

<blockquote>
  <p>If JCE unlimited strength jurisdiction policy files are installed, <code>Integer.MAX_VALUE</code> will be returned.</p>
</blockquote>

<p>This means that if any value other than (or indeed lower than) <code>Integer.MAX_VALUE</code> is returned that restrictions do apply.</p>

<p>Even more information is in the JavaDoc of the method below:</p>

<pre><code>/**
 * Determines if cryptography restrictions apply.
 * Restrictions apply if the value of {@link Cipher#getMaxAllowedKeyLength(String)} returns a value smaller than {@link Integer#MAX_VALUE} if there are any restrictions according to the JavaDoc of the method.
 * This method is used with the transform &lt;code&gt;""AES/CBC/PKCS5Padding""&lt;/code&gt; as this is an often used algorithm that is &lt;a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#impl""&gt;an implementation requirement for Java SE&lt;/a&gt;.
 * 
 * @return &lt;code&gt;true&lt;/code&gt; if restrictions apply, &lt;code&gt;false&lt;/code&gt; otherwise
 */
public static boolean restrictedCryptography() {
    try {
        return Cipher.getMaxAllowedKeyLength(""AES/CBC/PKCS5Padding"") &lt; Integer.MAX_VALUE;
    } catch (final NoSuchAlgorithmException e) {
        throw new IllegalStateException(""The transform \""AES/CBC/PKCS5Padding\"" is not available (the availability of this algorithm is mandatory for Java SE implementations)"", e);
    }
}
</code></pre>

<hr>

<p>Note that since Java 9 the unlimited crypto policies are installed by default (with those affected by import / export regulations having to install the <em>limited</em> crypto policies instead). So this code would mainly be required for backwards compatibility and/or other runtimes.</p>
","28514","<java><jce>","44","16","9","2018-05-07 18:16:08","7954769","2","20","","","","2011-10-31 12:15:53",""
"7953567","Checking if Unlimited Cryptography is available","<p>How can I check, in Java code, if the current JVM have unlimited strength cryptography available?</p>
","<p>This is a complete copy paste version to allow for testing</p>

<pre><code>import javax.crypto.Cipher;
import java.security.NoSuchAlgorithmException;

class Test {
    public static void main(String[] args) {
        int allowedKeyLength = 0;

        try {
            allowedKeyLength = Cipher.getMaxAllowedKeyLength(""AES"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }

        System.out.println(""The allowed key length for AES is: "" + allowedKeyLength);
    }
}
</code></pre>

<p>To run </p>

<p><code>javac Test.java</code> </p>

<p><code>java Test</code></p>

<p>If JCE is not working output: <code>128</code>
JCE is working something like: <code>2147483647</code></p>
","28514","<java><jce>","44","5","9","2018-05-07 18:16:08","7954769","2","20","","","","2011-10-31 12:15:53",""
"7953567","Checking if Unlimited Cryptography is available","<p>How can I check, in Java code, if the current JVM have unlimited strength cryptography available?</p>
","<p>You can check it in one step from the command line by using groovy :</p>

<pre><code>groovysh -e 'javax.crypto.Cipher.getMaxAllowedKeyLength(""AES"")'
</code></pre>

<p>If the result is <code>2147483647</code>, you have unlimited cryptography.</p>

<p>On older version of groovy, you have to remove the <code>-e</code> :</p>

<pre><code>groovysh 'javax.crypto.Cipher.getMaxAllowedKeyLength(""AES"")'
</code></pre>
","28514","<java><jce>","44","2","9","2018-05-07 18:16:08","7954769","2","20","","","","2011-10-31 12:15:53",""
"11538746","Check for JCE Unlimited Strength Jurisdiction Policy files","<p>I am usure if the JCE Unlimited Strength Jurisdiction Policy files have been installed correctly in the JVM (because some other part of the system behaves as if they weren't).</p>

<p>Can someone supply a code sample that I can use to check if those files are actually being used by the JVM?</p>
","<p>I found that it can be tested with the following code snippet:</p>

<pre><code>    int maxKeyLen = Cipher.getMaxAllowedKeyLength(""AES"");
    System.out.println(maxKeyLen);
</code></pre>

<p>Without the unlimited strength policy files this results in 128, after they have been installed properly the result is 2147483647.</p>
","26705","<java><jce>","40","67","1","2012-07-18 12:27:07","","0","11","","","","2012-07-18 09:54:46","2013-12-23 21:16:55"
"18279378","RSA decryption error - IllegalBlockSizeException: Data must not be longer than 128 bytes","<p>I am now on making RSA message authentication software. The process is as follows:</p>

<ol>
<li>Sign the message by using A's private key (1024 bit)</li>
<li>Verify the message by using A's public key (1024 bit)</li>
</ol>

<p>The #1 code (below) works fine and generates following result:</p>

<blockquote>
  <p>5554c9a9f6838b6cf40d9dbfbab3d90ea27aa6434ed095d289c13c2624617993ad99161ac265276d150510c176341d8ab8600d08b7353286d465e6bd3370a6fd8dd3ffb82916f612fd6dcee5e654ed801cfca6b6d2d5d6dc99ff7921b615abdf62eb67db1f71e6a6ea70012fd35e7cefa1a8d3aab7614c47746cfe1fc2bc875b</p>
</blockquote>

<p>However the #2 code shows following error:</p>

<blockquote>
  <p><code>javax.crypto.IllegalBlockSizeException: Data must not be longer than 128 bytes</code></p>
</blockquote>

<p>I think the line in #1 <code>Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");</code>
generates 2048 bits (256 bytes) result. Perhaps this is the problem... remember that I use 1024 bit private key.</p>

<p>So how can the #1 code generate 128-byte result?</p>

<p><strong>1. SignMail.java</strong></p>

<pre><code>public class SignMail {

    static {
        Security.addProvider(new org.spongycastle.jce.provider.BouncyCastleProvider());
    }

    public static String sign(String userOriginalMessage) throws Exception {

        PEMReader userPrivateKey = new PEMReader(
          new InputStreamReader(
             new FileInputStream(Environment.getExternalStorageDirectory()+""/pkcs10priv.key"")));

        KeyPair keyPair = (KeyPair)userPrivateKey.readObject();

        byte[] cipherText;
        //modified by JEON 20130817
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        //encrypt the message using private key
        cipher.init(Cipher.ENCRYPT_MODE, keyPair.getPrivate());
        cipherText = cipher.doFinal(userOriginalMessage.getBytes());
        return new String(Hex.encode(cipherText));

    }


}
</code></pre>

<p><strong>2. UserSMSVerifier.java</strong></p>

<pre><code>public class UserSMSVerifier {

static String signedMail;

static {
    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
}


public static String messageGenarator(
        String UserCert,
        String origninalMessage         
        ) throws Exception{

    InputStream userCertStream = new ByteArrayInputStream(UserCert.getBytes(""UTF-8""));

    PEMReader userCerti = new PEMReader(
              new InputStreamReader(
                      userCertStream));



    //KeyPair userPrivate = (KeyPair)userPrivateKey.readObject();
    X509Certificate userCert = (X509Certificate)userCerti.readObject();


    byte[] dectyptedText = null;
    // decrypt the text using the private key
    //modified by JEON 20130817
    //Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    cipher.init(Cipher.DECRYPT_MODE, userCert.getPublicKey());
    dectyptedText = cipher.doFinal(origninalMessage.getBytes());

    String result = new String(dectyptedText, Charset.forName(""UTF-8""));
    return result;

}


}
</code></pre>

<p>the #2 code was executed by the following JSP</p>

<p><strong>#3 messageVeri.JSP</strong></p>

<pre><code>&lt;%@ page language=""java"" contentType=""text/html; charset=euc-kr"" %&gt;

&lt;%@ page session = ""true"" %&gt;

&lt;%@ page import=""java.sql.DriverManager"" %&gt;
&lt;%@ page import=""java.sql.Connection"" %&gt;
&lt;%@ page import=""java.sql.PreparedStatement"" %&gt;
&lt;%@ page import=""java.sql.Statement"" %&gt;
&lt;%@ page import=""java.sql.SQLException"" %&gt;
&lt;%@ page import=""java.sql.ResultSet"" %&gt;

&lt;%@ page import=""myPackage.UserSMSVerifier"" %&gt;


&lt;%
    request.setCharacterEncoding(""euc-kr"");

    String userID = request.getParameter(""sender"");
    String encryptedSMS = request.getParameter(""encryptedSMS"");

    //String sql = ""select user_id, user_pw from testca.testca_init where user_id=? and user_pw=?"";
    //String sql = ""update testca.testca_init set pkcs10request = '""+pkcs10request_new+""' where user_id='user1'"";
    String sql = ""select * from testca.testca_init where user_id='"" + userID + ""'"";

    Class.forName(""com.mysql.jdbc.Driver"");

    Connection conn = null;
    PreparedStatement pstmt = null;

    Statement stmt = null;
    ResultSet rs = null;

    String jdbcDriver = ""jdbc:mysql://localhost:3306/"";
    String dbUser = ""root"";
    String dbPass = ""fo.......t"";


    try{
        conn = DriverManager.getConnection(jdbcDriver, dbUser, dbPass);
        stmt = conn.createStatement();
        //stmt.executeUpdate(sql);
        rs=stmt.executeQuery(sql);
        while(rs.next()){
        //rs=stmt.executeQuery(sql);
        String userCertificate=rs.getString(""certificate"");
        UserSMSVerifier.messageGenarator(userCertificate, encryptedSMS);
        }



    }catch(Exception ex){out.print(""Error 2: "" +ex);}
    /*
    if(rs.next())
    {
        //session.setAttribute(""userID"", userID);
        out.print(""Insert Succeed!"");
        out.println();
        //out.print(""Welcome!"" + "" "" + session.getAttribute(""userID""));
    }
    else
    {
        out.print(""failed to login!"");
        //session.invalidate();
    }
    */

%&gt;
</code></pre>
","<p>Your signature string contains 256 characters, however this is hexadecimal and really represents 128 <em>bytes</em>.</p>

<p>Before you verify the signature, you must convert it back to a byte array. This is not achieved through <code>someString.getBytes()</code> but rather via <a href=""http://docs.oracle.com/javase/7/docs/api/javax/xml/bind/DatatypeConverter.html#parseHexBinary%28java.lang.String%29"" rel=""nofollow noreferrer""><code>DatatypeConverter.parseHexBinary(someString)</code></a> (or any other method you prefer from Google).</p>

<p>Also, I would strongly recommend you use the <code>Signature</code> class rather than the <code>Cipher</code> class when signing messages. Currently your code can only handle messages that are smaller than 128 bytes in length (smaller, in fact, due to padding). Instead, you should be hashing the message prior to signing (e.g. using the <a href=""http://docs.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#Signature"" rel=""nofollow noreferrer""><code>SHA256withRSA</code> mechanism</a>).</p>
","23338","<java><key><rsa><jce>","8","13","5","2019-05-07 18:07:03","18309424","2","7","474189","","2013-08-19 08:33:25","2013-08-16 17:54:47",""
"18279378","RSA decryption error - IllegalBlockSizeException: Data must not be longer than 128 bytes","<p>I am now on making RSA message authentication software. The process is as follows:</p>

<ol>
<li>Sign the message by using A's private key (1024 bit)</li>
<li>Verify the message by using A's public key (1024 bit)</li>
</ol>

<p>The #1 code (below) works fine and generates following result:</p>

<blockquote>
  <p>5554c9a9f6838b6cf40d9dbfbab3d90ea27aa6434ed095d289c13c2624617993ad99161ac265276d150510c176341d8ab8600d08b7353286d465e6bd3370a6fd8dd3ffb82916f612fd6dcee5e654ed801cfca6b6d2d5d6dc99ff7921b615abdf62eb67db1f71e6a6ea70012fd35e7cefa1a8d3aab7614c47746cfe1fc2bc875b</p>
</blockquote>

<p>However the #2 code shows following error:</p>

<blockquote>
  <p><code>javax.crypto.IllegalBlockSizeException: Data must not be longer than 128 bytes</code></p>
</blockquote>

<p>I think the line in #1 <code>Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");</code>
generates 2048 bits (256 bytes) result. Perhaps this is the problem... remember that I use 1024 bit private key.</p>

<p>So how can the #1 code generate 128-byte result?</p>

<p><strong>1. SignMail.java</strong></p>

<pre><code>public class SignMail {

    static {
        Security.addProvider(new org.spongycastle.jce.provider.BouncyCastleProvider());
    }

    public static String sign(String userOriginalMessage) throws Exception {

        PEMReader userPrivateKey = new PEMReader(
          new InputStreamReader(
             new FileInputStream(Environment.getExternalStorageDirectory()+""/pkcs10priv.key"")));

        KeyPair keyPair = (KeyPair)userPrivateKey.readObject();

        byte[] cipherText;
        //modified by JEON 20130817
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        //encrypt the message using private key
        cipher.init(Cipher.ENCRYPT_MODE, keyPair.getPrivate());
        cipherText = cipher.doFinal(userOriginalMessage.getBytes());
        return new String(Hex.encode(cipherText));

    }


}
</code></pre>

<p><strong>2. UserSMSVerifier.java</strong></p>

<pre><code>public class UserSMSVerifier {

static String signedMail;

static {
    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
}


public static String messageGenarator(
        String UserCert,
        String origninalMessage         
        ) throws Exception{

    InputStream userCertStream = new ByteArrayInputStream(UserCert.getBytes(""UTF-8""));

    PEMReader userCerti = new PEMReader(
              new InputStreamReader(
                      userCertStream));



    //KeyPair userPrivate = (KeyPair)userPrivateKey.readObject();
    X509Certificate userCert = (X509Certificate)userCerti.readObject();


    byte[] dectyptedText = null;
    // decrypt the text using the private key
    //modified by JEON 20130817
    //Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    cipher.init(Cipher.DECRYPT_MODE, userCert.getPublicKey());
    dectyptedText = cipher.doFinal(origninalMessage.getBytes());

    String result = new String(dectyptedText, Charset.forName(""UTF-8""));
    return result;

}


}
</code></pre>

<p>the #2 code was executed by the following JSP</p>

<p><strong>#3 messageVeri.JSP</strong></p>

<pre><code>&lt;%@ page language=""java"" contentType=""text/html; charset=euc-kr"" %&gt;

&lt;%@ page session = ""true"" %&gt;

&lt;%@ page import=""java.sql.DriverManager"" %&gt;
&lt;%@ page import=""java.sql.Connection"" %&gt;
&lt;%@ page import=""java.sql.PreparedStatement"" %&gt;
&lt;%@ page import=""java.sql.Statement"" %&gt;
&lt;%@ page import=""java.sql.SQLException"" %&gt;
&lt;%@ page import=""java.sql.ResultSet"" %&gt;

&lt;%@ page import=""myPackage.UserSMSVerifier"" %&gt;


&lt;%
    request.setCharacterEncoding(""euc-kr"");

    String userID = request.getParameter(""sender"");
    String encryptedSMS = request.getParameter(""encryptedSMS"");

    //String sql = ""select user_id, user_pw from testca.testca_init where user_id=? and user_pw=?"";
    //String sql = ""update testca.testca_init set pkcs10request = '""+pkcs10request_new+""' where user_id='user1'"";
    String sql = ""select * from testca.testca_init where user_id='"" + userID + ""'"";

    Class.forName(""com.mysql.jdbc.Driver"");

    Connection conn = null;
    PreparedStatement pstmt = null;

    Statement stmt = null;
    ResultSet rs = null;

    String jdbcDriver = ""jdbc:mysql://localhost:3306/"";
    String dbUser = ""root"";
    String dbPass = ""fo.......t"";


    try{
        conn = DriverManager.getConnection(jdbcDriver, dbUser, dbPass);
        stmt = conn.createStatement();
        //stmt.executeUpdate(sql);
        rs=stmt.executeQuery(sql);
        while(rs.next()){
        //rs=stmt.executeQuery(sql);
        String userCertificate=rs.getString(""certificate"");
        UserSMSVerifier.messageGenarator(userCertificate, encryptedSMS);
        }



    }catch(Exception ex){out.print(""Error 2: "" +ex);}
    /*
    if(rs.next())
    {
        //session.setAttribute(""userID"", userID);
        out.print(""Insert Succeed!"");
        out.println();
        //out.print(""Welcome!"" + "" "" + session.getAttribute(""userID""));
    }
    else
    {
        out.print(""failed to login!"");
        //session.invalidate();
    }
    */

%&gt;
</code></pre>
","<p>you need split your data by the publicKey</p>

<pre><code>int keyLength = publicKey.getModulus().bitLength() / 16;
String[] datas = splitString(data, keyLength - 11);
String mi = """";
        //如果明文长度大于模长-11则要分组加密
for (String s : datas) {
            mi += bcd2Str(cipher.doFinal(s.getBytes()));
}
return mi;


public static String bcd2Str(byte[] bytes) {
    char temp[] = new char[bytes.length * 2], val;

    for (int i = 0; i &lt; bytes.length; i++) {
        val = (char) (((bytes[i] &amp; 0xf0) &gt;&gt; 4) &amp; 0x0f);
        temp[i * 2] = (char) (val &gt; 9 ? val + 'A' - 10 : val + '0');

        val = (char) (bytes[i] &amp; 0x0f);
        temp[i * 2 + 1] = (char) (val &gt; 9 ? val + 'A' - 10 : val + '0');
    }
    return new String(temp);
}
</code></pre>
","23338","<java><key><rsa><jce>","8","0","5","2019-05-07 18:07:03","18309424","2","7","474189","","2013-08-19 08:33:25","2013-08-16 17:54:47",""
"18279378","RSA decryption error - IllegalBlockSizeException: Data must not be longer than 128 bytes","<p>I am now on making RSA message authentication software. The process is as follows:</p>

<ol>
<li>Sign the message by using A's private key (1024 bit)</li>
<li>Verify the message by using A's public key (1024 bit)</li>
</ol>

<p>The #1 code (below) works fine and generates following result:</p>

<blockquote>
  <p>5554c9a9f6838b6cf40d9dbfbab3d90ea27aa6434ed095d289c13c2624617993ad99161ac265276d150510c176341d8ab8600d08b7353286d465e6bd3370a6fd8dd3ffb82916f612fd6dcee5e654ed801cfca6b6d2d5d6dc99ff7921b615abdf62eb67db1f71e6a6ea70012fd35e7cefa1a8d3aab7614c47746cfe1fc2bc875b</p>
</blockquote>

<p>However the #2 code shows following error:</p>

<blockquote>
  <p><code>javax.crypto.IllegalBlockSizeException: Data must not be longer than 128 bytes</code></p>
</blockquote>

<p>I think the line in #1 <code>Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");</code>
generates 2048 bits (256 bytes) result. Perhaps this is the problem... remember that I use 1024 bit private key.</p>

<p>So how can the #1 code generate 128-byte result?</p>

<p><strong>1. SignMail.java</strong></p>

<pre><code>public class SignMail {

    static {
        Security.addProvider(new org.spongycastle.jce.provider.BouncyCastleProvider());
    }

    public static String sign(String userOriginalMessage) throws Exception {

        PEMReader userPrivateKey = new PEMReader(
          new InputStreamReader(
             new FileInputStream(Environment.getExternalStorageDirectory()+""/pkcs10priv.key"")));

        KeyPair keyPair = (KeyPair)userPrivateKey.readObject();

        byte[] cipherText;
        //modified by JEON 20130817
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        //encrypt the message using private key
        cipher.init(Cipher.ENCRYPT_MODE, keyPair.getPrivate());
        cipherText = cipher.doFinal(userOriginalMessage.getBytes());
        return new String(Hex.encode(cipherText));

    }


}
</code></pre>

<p><strong>2. UserSMSVerifier.java</strong></p>

<pre><code>public class UserSMSVerifier {

static String signedMail;

static {
    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
}


public static String messageGenarator(
        String UserCert,
        String origninalMessage         
        ) throws Exception{

    InputStream userCertStream = new ByteArrayInputStream(UserCert.getBytes(""UTF-8""));

    PEMReader userCerti = new PEMReader(
              new InputStreamReader(
                      userCertStream));



    //KeyPair userPrivate = (KeyPair)userPrivateKey.readObject();
    X509Certificate userCert = (X509Certificate)userCerti.readObject();


    byte[] dectyptedText = null;
    // decrypt the text using the private key
    //modified by JEON 20130817
    //Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    cipher.init(Cipher.DECRYPT_MODE, userCert.getPublicKey());
    dectyptedText = cipher.doFinal(origninalMessage.getBytes());

    String result = new String(dectyptedText, Charset.forName(""UTF-8""));
    return result;

}


}
</code></pre>

<p>the #2 code was executed by the following JSP</p>

<p><strong>#3 messageVeri.JSP</strong></p>

<pre><code>&lt;%@ page language=""java"" contentType=""text/html; charset=euc-kr"" %&gt;

&lt;%@ page session = ""true"" %&gt;

&lt;%@ page import=""java.sql.DriverManager"" %&gt;
&lt;%@ page import=""java.sql.Connection"" %&gt;
&lt;%@ page import=""java.sql.PreparedStatement"" %&gt;
&lt;%@ page import=""java.sql.Statement"" %&gt;
&lt;%@ page import=""java.sql.SQLException"" %&gt;
&lt;%@ page import=""java.sql.ResultSet"" %&gt;

&lt;%@ page import=""myPackage.UserSMSVerifier"" %&gt;


&lt;%
    request.setCharacterEncoding(""euc-kr"");

    String userID = request.getParameter(""sender"");
    String encryptedSMS = request.getParameter(""encryptedSMS"");

    //String sql = ""select user_id, user_pw from testca.testca_init where user_id=? and user_pw=?"";
    //String sql = ""update testca.testca_init set pkcs10request = '""+pkcs10request_new+""' where user_id='user1'"";
    String sql = ""select * from testca.testca_init where user_id='"" + userID + ""'"";

    Class.forName(""com.mysql.jdbc.Driver"");

    Connection conn = null;
    PreparedStatement pstmt = null;

    Statement stmt = null;
    ResultSet rs = null;

    String jdbcDriver = ""jdbc:mysql://localhost:3306/"";
    String dbUser = ""root"";
    String dbPass = ""fo.......t"";


    try{
        conn = DriverManager.getConnection(jdbcDriver, dbUser, dbPass);
        stmt = conn.createStatement();
        //stmt.executeUpdate(sql);
        rs=stmt.executeQuery(sql);
        while(rs.next()){
        //rs=stmt.executeQuery(sql);
        String userCertificate=rs.getString(""certificate"");
        UserSMSVerifier.messageGenarator(userCertificate, encryptedSMS);
        }



    }catch(Exception ex){out.print(""Error 2: "" +ex);}
    /*
    if(rs.next())
    {
        //session.setAttribute(""userID"", userID);
        out.print(""Insert Succeed!"");
        out.println();
        //out.print(""Welcome!"" + "" "" + session.getAttribute(""userID""));
    }
    else
    {
        out.print(""failed to login!"");
        //session.invalidate();
    }
    */

%&gt;
</code></pre>
","<p>As Duncan said, you need something like DateTypeConverter.</p>

<p>I used <strong>Base64.getDecoder().decode(encodedString)</strong>, it returned 128 byte array.</p>

<p>When I had been using encodedString.getBytes(), it returned 172 byte array.</p>

<p>By the way I had 1024 bits RSA key.</p>
","23338","<java><key><rsa><jce>","8","0","5","2019-05-07 18:07:03","18309424","2","7","474189","","2013-08-19 08:33:25","2013-08-16 17:54:47",""
"18279378","RSA decryption error - IllegalBlockSizeException: Data must not be longer than 128 bytes","<p>I am now on making RSA message authentication software. The process is as follows:</p>

<ol>
<li>Sign the message by using A's private key (1024 bit)</li>
<li>Verify the message by using A's public key (1024 bit)</li>
</ol>

<p>The #1 code (below) works fine and generates following result:</p>

<blockquote>
  <p>5554c9a9f6838b6cf40d9dbfbab3d90ea27aa6434ed095d289c13c2624617993ad99161ac265276d150510c176341d8ab8600d08b7353286d465e6bd3370a6fd8dd3ffb82916f612fd6dcee5e654ed801cfca6b6d2d5d6dc99ff7921b615abdf62eb67db1f71e6a6ea70012fd35e7cefa1a8d3aab7614c47746cfe1fc2bc875b</p>
</blockquote>

<p>However the #2 code shows following error:</p>

<blockquote>
  <p><code>javax.crypto.IllegalBlockSizeException: Data must not be longer than 128 bytes</code></p>
</blockquote>

<p>I think the line in #1 <code>Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");</code>
generates 2048 bits (256 bytes) result. Perhaps this is the problem... remember that I use 1024 bit private key.</p>

<p>So how can the #1 code generate 128-byte result?</p>

<p><strong>1. SignMail.java</strong></p>

<pre><code>public class SignMail {

    static {
        Security.addProvider(new org.spongycastle.jce.provider.BouncyCastleProvider());
    }

    public static String sign(String userOriginalMessage) throws Exception {

        PEMReader userPrivateKey = new PEMReader(
          new InputStreamReader(
             new FileInputStream(Environment.getExternalStorageDirectory()+""/pkcs10priv.key"")));

        KeyPair keyPair = (KeyPair)userPrivateKey.readObject();

        byte[] cipherText;
        //modified by JEON 20130817
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        //encrypt the message using private key
        cipher.init(Cipher.ENCRYPT_MODE, keyPair.getPrivate());
        cipherText = cipher.doFinal(userOriginalMessage.getBytes());
        return new String(Hex.encode(cipherText));

    }


}
</code></pre>

<p><strong>2. UserSMSVerifier.java</strong></p>

<pre><code>public class UserSMSVerifier {

static String signedMail;

static {
    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
}


public static String messageGenarator(
        String UserCert,
        String origninalMessage         
        ) throws Exception{

    InputStream userCertStream = new ByteArrayInputStream(UserCert.getBytes(""UTF-8""));

    PEMReader userCerti = new PEMReader(
              new InputStreamReader(
                      userCertStream));



    //KeyPair userPrivate = (KeyPair)userPrivateKey.readObject();
    X509Certificate userCert = (X509Certificate)userCerti.readObject();


    byte[] dectyptedText = null;
    // decrypt the text using the private key
    //modified by JEON 20130817
    //Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    cipher.init(Cipher.DECRYPT_MODE, userCert.getPublicKey());
    dectyptedText = cipher.doFinal(origninalMessage.getBytes());

    String result = new String(dectyptedText, Charset.forName(""UTF-8""));
    return result;

}


}
</code></pre>

<p>the #2 code was executed by the following JSP</p>

<p><strong>#3 messageVeri.JSP</strong></p>

<pre><code>&lt;%@ page language=""java"" contentType=""text/html; charset=euc-kr"" %&gt;

&lt;%@ page session = ""true"" %&gt;

&lt;%@ page import=""java.sql.DriverManager"" %&gt;
&lt;%@ page import=""java.sql.Connection"" %&gt;
&lt;%@ page import=""java.sql.PreparedStatement"" %&gt;
&lt;%@ page import=""java.sql.Statement"" %&gt;
&lt;%@ page import=""java.sql.SQLException"" %&gt;
&lt;%@ page import=""java.sql.ResultSet"" %&gt;

&lt;%@ page import=""myPackage.UserSMSVerifier"" %&gt;


&lt;%
    request.setCharacterEncoding(""euc-kr"");

    String userID = request.getParameter(""sender"");
    String encryptedSMS = request.getParameter(""encryptedSMS"");

    //String sql = ""select user_id, user_pw from testca.testca_init where user_id=? and user_pw=?"";
    //String sql = ""update testca.testca_init set pkcs10request = '""+pkcs10request_new+""' where user_id='user1'"";
    String sql = ""select * from testca.testca_init where user_id='"" + userID + ""'"";

    Class.forName(""com.mysql.jdbc.Driver"");

    Connection conn = null;
    PreparedStatement pstmt = null;

    Statement stmt = null;
    ResultSet rs = null;

    String jdbcDriver = ""jdbc:mysql://localhost:3306/"";
    String dbUser = ""root"";
    String dbPass = ""fo.......t"";


    try{
        conn = DriverManager.getConnection(jdbcDriver, dbUser, dbPass);
        stmt = conn.createStatement();
        //stmt.executeUpdate(sql);
        rs=stmt.executeQuery(sql);
        while(rs.next()){
        //rs=stmt.executeQuery(sql);
        String userCertificate=rs.getString(""certificate"");
        UserSMSVerifier.messageGenarator(userCertificate, encryptedSMS);
        }



    }catch(Exception ex){out.print(""Error 2: "" +ex);}
    /*
    if(rs.next())
    {
        //session.setAttribute(""userID"", userID);
        out.print(""Insert Succeed!"");
        out.println();
        //out.print(""Welcome!"" + "" "" + session.getAttribute(""userID""));
    }
    else
    {
        out.print(""failed to login!"");
        //session.invalidate();
    }
    */

%&gt;
</code></pre>
","<p>first convert text to Hex and then encrypt it, after encrypt you can convert from hex to string.</p>

<pre><code>public static String toHex(String text)
{
    return String.format(""%040x"", new BigInteger(1, text.getBytes()));
}

public static byte[] hexToBytes(String hex)
{
    int l = hex.length();
    byte[] data = new byte[l/2];

    for (int i = 0; i &lt; l; i += 2)
    {
        data[i/2] = (byte) ((Character.digit(hex.charAt(i), 16) &lt;&lt; 4) + Character.digit(hex.charAt(i+1), 16));
    }

    return data;
}

public static String hexToStringA(String hex)
{
    return new String(hexToBytes(hex));
}
</code></pre>
","23338","<java><key><rsa><jce>","8","0","5","2019-05-07 18:07:03","18309424","2","7","474189","","2013-08-19 08:33:25","2013-08-16 17:54:47",""
"18279378","RSA decryption error - IllegalBlockSizeException: Data must not be longer than 128 bytes","<p>I am now on making RSA message authentication software. The process is as follows:</p>

<ol>
<li>Sign the message by using A's private key (1024 bit)</li>
<li>Verify the message by using A's public key (1024 bit)</li>
</ol>

<p>The #1 code (below) works fine and generates following result:</p>

<blockquote>
  <p>5554c9a9f6838b6cf40d9dbfbab3d90ea27aa6434ed095d289c13c2624617993ad99161ac265276d150510c176341d8ab8600d08b7353286d465e6bd3370a6fd8dd3ffb82916f612fd6dcee5e654ed801cfca6b6d2d5d6dc99ff7921b615abdf62eb67db1f71e6a6ea70012fd35e7cefa1a8d3aab7614c47746cfe1fc2bc875b</p>
</blockquote>

<p>However the #2 code shows following error:</p>

<blockquote>
  <p><code>javax.crypto.IllegalBlockSizeException: Data must not be longer than 128 bytes</code></p>
</blockquote>

<p>I think the line in #1 <code>Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");</code>
generates 2048 bits (256 bytes) result. Perhaps this is the problem... remember that I use 1024 bit private key.</p>

<p>So how can the #1 code generate 128-byte result?</p>

<p><strong>1. SignMail.java</strong></p>

<pre><code>public class SignMail {

    static {
        Security.addProvider(new org.spongycastle.jce.provider.BouncyCastleProvider());
    }

    public static String sign(String userOriginalMessage) throws Exception {

        PEMReader userPrivateKey = new PEMReader(
          new InputStreamReader(
             new FileInputStream(Environment.getExternalStorageDirectory()+""/pkcs10priv.key"")));

        KeyPair keyPair = (KeyPair)userPrivateKey.readObject();

        byte[] cipherText;
        //modified by JEON 20130817
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        //encrypt the message using private key
        cipher.init(Cipher.ENCRYPT_MODE, keyPair.getPrivate());
        cipherText = cipher.doFinal(userOriginalMessage.getBytes());
        return new String(Hex.encode(cipherText));

    }


}
</code></pre>

<p><strong>2. UserSMSVerifier.java</strong></p>

<pre><code>public class UserSMSVerifier {

static String signedMail;

static {
    Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
}


public static String messageGenarator(
        String UserCert,
        String origninalMessage         
        ) throws Exception{

    InputStream userCertStream = new ByteArrayInputStream(UserCert.getBytes(""UTF-8""));

    PEMReader userCerti = new PEMReader(
              new InputStreamReader(
                      userCertStream));



    //KeyPair userPrivate = (KeyPair)userPrivateKey.readObject();
    X509Certificate userCert = (X509Certificate)userCerti.readObject();


    byte[] dectyptedText = null;
    // decrypt the text using the private key
    //modified by JEON 20130817
    //Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    cipher.init(Cipher.DECRYPT_MODE, userCert.getPublicKey());
    dectyptedText = cipher.doFinal(origninalMessage.getBytes());

    String result = new String(dectyptedText, Charset.forName(""UTF-8""));
    return result;

}


}
</code></pre>

<p>the #2 code was executed by the following JSP</p>

<p><strong>#3 messageVeri.JSP</strong></p>

<pre><code>&lt;%@ page language=""java"" contentType=""text/html; charset=euc-kr"" %&gt;

&lt;%@ page session = ""true"" %&gt;

&lt;%@ page import=""java.sql.DriverManager"" %&gt;
&lt;%@ page import=""java.sql.Connection"" %&gt;
&lt;%@ page import=""java.sql.PreparedStatement"" %&gt;
&lt;%@ page import=""java.sql.Statement"" %&gt;
&lt;%@ page import=""java.sql.SQLException"" %&gt;
&lt;%@ page import=""java.sql.ResultSet"" %&gt;

&lt;%@ page import=""myPackage.UserSMSVerifier"" %&gt;


&lt;%
    request.setCharacterEncoding(""euc-kr"");

    String userID = request.getParameter(""sender"");
    String encryptedSMS = request.getParameter(""encryptedSMS"");

    //String sql = ""select user_id, user_pw from testca.testca_init where user_id=? and user_pw=?"";
    //String sql = ""update testca.testca_init set pkcs10request = '""+pkcs10request_new+""' where user_id='user1'"";
    String sql = ""select * from testca.testca_init where user_id='"" + userID + ""'"";

    Class.forName(""com.mysql.jdbc.Driver"");

    Connection conn = null;
    PreparedStatement pstmt = null;

    Statement stmt = null;
    ResultSet rs = null;

    String jdbcDriver = ""jdbc:mysql://localhost:3306/"";
    String dbUser = ""root"";
    String dbPass = ""fo.......t"";


    try{
        conn = DriverManager.getConnection(jdbcDriver, dbUser, dbPass);
        stmt = conn.createStatement();
        //stmt.executeUpdate(sql);
        rs=stmt.executeQuery(sql);
        while(rs.next()){
        //rs=stmt.executeQuery(sql);
        String userCertificate=rs.getString(""certificate"");
        UserSMSVerifier.messageGenarator(userCertificate, encryptedSMS);
        }



    }catch(Exception ex){out.print(""Error 2: "" +ex);}
    /*
    if(rs.next())
    {
        //session.setAttribute(""userID"", userID);
        out.print(""Insert Succeed!"");
        out.println();
        //out.print(""Welcome!"" + "" "" + session.getAttribute(""userID""));
    }
    else
    {
        out.print(""failed to login!"");
        //session.invalidate();
    }
    */

%&gt;
</code></pre>
","<p>Here is code:</p>

<pre><code>     EncDecProcessor ac = new EncDecProcessor();
     PublicKey publicKey = ac.getPublic(keyPath);
     this.cipher.init(Cipher.DECRYPT_MODE, publicKey);
     byte[] b = new byte[2048];
     b = msg.getBytes(""UTF-8"");
     byte[] byteStr = Base64.decodeBase64(b);
     String Str = new String(cipher.doFinal(byteStr), ""UTF-8"");

     return Str;
</code></pre>
","23338","<java><key><rsa><jce>","8","0","5","2019-05-07 18:07:03","18309424","2","7","474189","","2013-08-19 08:33:25","2013-08-16 17:54:47",""
"19856324","Exception in thread ""main"" java.security.InvalidKeyException: Illegal key size or default parameters","<p>The code belows is throwing this error message:</p>

<p><code>Exception in thread ""main"" java.security.InvalidKeyException: Illegal key size or default parameters</code></p>

<pre><code>Cipher dcipher;

byte[] salt = new String(""12345678"").getBytes();
int iterationCount = 1024;
int keyStrength = 256;
SecretKey key;
byte[] iv;

Decrypter(String passPhrase) throws Exception {
    SecretKeyFactory factory = SecretKeyFactory
            .getInstance(""PBKDF2WithHmacSHA1"");
    System.out.println(""factory +"" + factory);
    KeySpec spec = new PBEKeySpec(passPhrase.toCharArray(), salt,
            iterationCount, keyStrength);
    System.out.println(""spec  "" + spec);
    SecretKey tmp = factory.generateSecret(spec);
    System.out.println();
    key = new SecretKeySpec(tmp.getEncoded(), ""AES"");
    dcipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
}

public String encrypt(String data) throws Exception {
    dcipher.init(Cipher.ENCRYPT_MODE, key);
    AlgorithmParameters params = dcipher.getParameters();
    iv = params.getParameterSpec(IvParameterSpec.class).getIV();
    byte[] utf8EncryptedData = dcipher.doFinal(data.getBytes());
    String base64EncryptedData = new sun.misc.BASE64Encoder()
            .encodeBuffer(utf8EncryptedData);

    System.out.println(""IV ""
            + new sun.misc.BASE64Encoder().encodeBuffer(iv));
    System.out.println(""Encrypted Data "" + base64EncryptedData);
    return base64EncryptedData;
</code></pre>

<p>Does anybody know why I get that error?</p>
","<p>Probably you did not install the JCE Policy file yet. </p>

<p>Download this file: </p>

<ul>
<li><p><a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html"">Java 6</a></p></li>
<li><p><a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"">Java 7</a></p></li>
<li><p><a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"">Java 8</a></p></li>
</ul>

<p>And Install the file in <code>${java.home}/jre/lib/security/.</code></p>

<p><code>${java.home}</code> refers to your installation directory of Java</p>

<p>for mac: </p>

<ul>
<li>open finder</li>
<li>press <kbd>command</kbd> + <kbd>shift</kbd> + <kbd>g</kbd></li>
<li>type <code>/Library/Java/JavaVirtualMachines</code> </li>
<li>navigate to your version of JDK</li>
<li>then <code>Contents/Home/jre/lib/security</code></li>
<li>unzip the downloaded file and place all files inside here</li>
</ul>

<p>for CLI </p>

<pre><code>unzip downloaded_policy_file.zip  -d /Library/Java/JavaVirtualMachines/&lt;JDK_VERSION&gt;/Contents/Home/jre/lib/security/

mv /Library/Java/JavaVirtualMachines/&lt;JDK_VERSION&gt;/Contents/Home/jre/lib/security/UnlimitedJCEPolicyJDK&lt;VERSION&gt;/* /Library/Java/JavaVirtualMachines/&lt;JDK_VERSION&gt;/Contents/Home/jre/lib/security  

rm -rf Library/Java/JavaVirtualMachines/&lt;JDK_VERSION&gt;/Contents/Home/jre/lib/security/UnlimitedJCEPolicyJDK&lt;VERSION&gt;/
</code></pre>
","22713","<java><jce>","10","23","5","2018-01-13 19:47:31","","3","6","260990","","2014-08-07 20:24:15","2013-11-08 10:06:32","2018-01-14 11:11:22"
"19856324","Exception in thread ""main"" java.security.InvalidKeyException: Illegal key size or default parameters","<p>The code belows is throwing this error message:</p>

<p><code>Exception in thread ""main"" java.security.InvalidKeyException: Illegal key size or default parameters</code></p>

<pre><code>Cipher dcipher;

byte[] salt = new String(""12345678"").getBytes();
int iterationCount = 1024;
int keyStrength = 256;
SecretKey key;
byte[] iv;

Decrypter(String passPhrase) throws Exception {
    SecretKeyFactory factory = SecretKeyFactory
            .getInstance(""PBKDF2WithHmacSHA1"");
    System.out.println(""factory +"" + factory);
    KeySpec spec = new PBEKeySpec(passPhrase.toCharArray(), salt,
            iterationCount, keyStrength);
    System.out.println(""spec  "" + spec);
    SecretKey tmp = factory.generateSecret(spec);
    System.out.println();
    key = new SecretKeySpec(tmp.getEncoded(), ""AES"");
    dcipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
}

public String encrypt(String data) throws Exception {
    dcipher.init(Cipher.ENCRYPT_MODE, key);
    AlgorithmParameters params = dcipher.getParameters();
    iv = params.getParameterSpec(IvParameterSpec.class).getIV();
    byte[] utf8EncryptedData = dcipher.doFinal(data.getBytes());
    String base64EncryptedData = new sun.misc.BASE64Encoder()
            .encodeBuffer(utf8EncryptedData);

    System.out.println(""IV ""
            + new sun.misc.BASE64Encoder().encodeBuffer(iv));
    System.out.println(""Encrypted Data "" + base64EncryptedData);
    return base64EncryptedData;
</code></pre>

<p>Does anybody know why I get that error?</p>
","<p>For JAVA 7 the download link is <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow"">jce-7-download</a></p>

<p>Copy the two downloaded jars in Java\jdk1.7.0_10\jre\lib\security
Take a backup of older jars to be on safer side.</p>
","22713","<java><jce>","10","0","5","2018-01-13 19:47:31","","3","6","260990","","2014-08-07 20:24:15","2013-11-08 10:06:32","2018-01-14 11:11:22"
"19856324","Exception in thread ""main"" java.security.InvalidKeyException: Illegal key size or default parameters","<p>The code belows is throwing this error message:</p>

<p><code>Exception in thread ""main"" java.security.InvalidKeyException: Illegal key size or default parameters</code></p>

<pre><code>Cipher dcipher;

byte[] salt = new String(""12345678"").getBytes();
int iterationCount = 1024;
int keyStrength = 256;
SecretKey key;
byte[] iv;

Decrypter(String passPhrase) throws Exception {
    SecretKeyFactory factory = SecretKeyFactory
            .getInstance(""PBKDF2WithHmacSHA1"");
    System.out.println(""factory +"" + factory);
    KeySpec spec = new PBEKeySpec(passPhrase.toCharArray(), salt,
            iterationCount, keyStrength);
    System.out.println(""spec  "" + spec);
    SecretKey tmp = factory.generateSecret(spec);
    System.out.println();
    key = new SecretKeySpec(tmp.getEncoded(), ""AES"");
    dcipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
}

public String encrypt(String data) throws Exception {
    dcipher.init(Cipher.ENCRYPT_MODE, key);
    AlgorithmParameters params = dcipher.getParameters();
    iv = params.getParameterSpec(IvParameterSpec.class).getIV();
    byte[] utf8EncryptedData = dcipher.doFinal(data.getBytes());
    String base64EncryptedData = new sun.misc.BASE64Encoder()
            .encodeBuffer(utf8EncryptedData);

    System.out.println(""IV ""
            + new sun.misc.BASE64Encoder().encodeBuffer(iv));
    System.out.println(""Encrypted Data "" + base64EncryptedData);
    return base64EncryptedData;
</code></pre>

<p>Does anybody know why I get that error?</p>
","<p>Download the JCE for Java 7 from this link 
<a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow"">http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html</a></p>

<p>and open the path <code>C:\Program Files\Java\jdk1.7.0_80\jre\lib\security</code> and paste the two jars here.(Even if the two jars were already present replace those two jars)</p>
","22713","<java><jce>","10","1","5","2018-01-13 19:47:31","","3","6","260990","","2014-08-07 20:24:15","2013-11-08 10:06:32","2018-01-14 11:11:22"
"19856324","Exception in thread ""main"" java.security.InvalidKeyException: Illegal key size or default parameters","<p>The code belows is throwing this error message:</p>

<p><code>Exception in thread ""main"" java.security.InvalidKeyException: Illegal key size or default parameters</code></p>

<pre><code>Cipher dcipher;

byte[] salt = new String(""12345678"").getBytes();
int iterationCount = 1024;
int keyStrength = 256;
SecretKey key;
byte[] iv;

Decrypter(String passPhrase) throws Exception {
    SecretKeyFactory factory = SecretKeyFactory
            .getInstance(""PBKDF2WithHmacSHA1"");
    System.out.println(""factory +"" + factory);
    KeySpec spec = new PBEKeySpec(passPhrase.toCharArray(), salt,
            iterationCount, keyStrength);
    System.out.println(""spec  "" + spec);
    SecretKey tmp = factory.generateSecret(spec);
    System.out.println();
    key = new SecretKeySpec(tmp.getEncoded(), ""AES"");
    dcipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
}

public String encrypt(String data) throws Exception {
    dcipher.init(Cipher.ENCRYPT_MODE, key);
    AlgorithmParameters params = dcipher.getParameters();
    iv = params.getParameterSpec(IvParameterSpec.class).getIV();
    byte[] utf8EncryptedData = dcipher.doFinal(data.getBytes());
    String base64EncryptedData = new sun.misc.BASE64Encoder()
            .encodeBuffer(utf8EncryptedData);

    System.out.println(""IV ""
            + new sun.misc.BASE64Encoder().encodeBuffer(iv));
    System.out.println(""Encrypted Data "" + base64EncryptedData);
    return base64EncryptedData;
</code></pre>

<p>Does anybody know why I get that error?</p>
","<p>In case you using Mac with homebrew</p>

<pre><code>brew cask install jce-unlimited-strength-policy
</code></pre>
","22713","<java><jce>","10","0","5","2018-01-13 19:47:31","","3","6","260990","","2014-08-07 20:24:15","2013-11-08 10:06:32","2018-01-14 11:11:22"
"19856324","Exception in thread ""main"" java.security.InvalidKeyException: Illegal key size or default parameters","<p>The code belows is throwing this error message:</p>

<p><code>Exception in thread ""main"" java.security.InvalidKeyException: Illegal key size or default parameters</code></p>

<pre><code>Cipher dcipher;

byte[] salt = new String(""12345678"").getBytes();
int iterationCount = 1024;
int keyStrength = 256;
SecretKey key;
byte[] iv;

Decrypter(String passPhrase) throws Exception {
    SecretKeyFactory factory = SecretKeyFactory
            .getInstance(""PBKDF2WithHmacSHA1"");
    System.out.println(""factory +"" + factory);
    KeySpec spec = new PBEKeySpec(passPhrase.toCharArray(), salt,
            iterationCount, keyStrength);
    System.out.println(""spec  "" + spec);
    SecretKey tmp = factory.generateSecret(spec);
    System.out.println();
    key = new SecretKeySpec(tmp.getEncoded(), ""AES"");
    dcipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
}

public String encrypt(String data) throws Exception {
    dcipher.init(Cipher.ENCRYPT_MODE, key);
    AlgorithmParameters params = dcipher.getParameters();
    iv = params.getParameterSpec(IvParameterSpec.class).getIV();
    byte[] utf8EncryptedData = dcipher.doFinal(data.getBytes());
    String base64EncryptedData = new sun.misc.BASE64Encoder()
            .encodeBuffer(utf8EncryptedData);

    System.out.println(""IV ""
            + new sun.misc.BASE64Encoder().encodeBuffer(iv));
    System.out.println(""Encrypted Data "" + base64EncryptedData);
    return base64EncryptedData;
</code></pre>

<p>Does anybody know why I get that error?</p>
","<p>As of JDK 1.8u151 it is not necessary to download the JCE libraries separately.  Simply edit:</p>

<pre><code>$JDK_HOME/jre/lib/security/java.security
</code></pre>

<p>and uncomment the line:</p>

<pre><code>crypto.policy=unlimited
</code></pre>
","22713","<java><jce>","10","0","5","2018-01-13 19:47:31","","3","6","260990","","2014-08-07 20:24:15","2013-11-08 10:06:32","2018-01-14 11:11:22"
"1756801","How to sign a custom JCE security provider","<p>Sun's PKCS11 JCE security provider is lacking some functionality we need.<br/>
So I wrote an enhanced version of it using the original sources.</p>

<p>Unfortunately the JCE infrastructure rejects the new provider<br/>
<em>""JCE cannot authenticate the provider""</em><br/>
because it is not properly signed.</p>

<p><code>javax.crypto.JceSecurity.verifyProviderJar(...)</code> throws.<br/>
(it calls <code>javax.crypto.JarVerifier.verify()</code>)</p>

<p>Any suggestions how to sign the new provider to make it 
work with JCE?</p>
","<p>The process is described in the document, <a href=""http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/HowToImplAProvider.html#Step6"" rel=""nofollow noreferrer"">""How to Implement a Provider.""</a></p>

<p>It involves emailing <strike>Sun</strike> Oracle some information (including the CSR you generated for your signing key), then faxing a confirmation document. Getting your signed certificate back can take a week or more, so plan ahead. </p>

<p>You only need to sign your provider if it provides services that are restricted by some (repressive) governments. For example, a <code>Cipher</code> implementation is a restricted ""service,"" while <code>MessageDigest</code> is an unrestricted service. I assume with the message you're getting, that you are trying to provide a restricted services.</p>

<p>If you provide any of these services, <em>there's no way around it:</em> You need a code-signing certificate issued by Sun. (One from IBM might work too; if I recall correctly, their code-signing CA is supported, but I don't know anything about their issuing process.)</p>
","21431","<java><security><digital-signature><jce>","11","9","4","2016-05-04 20:19:49","1757186","1","4","1816580","","2015-06-18 12:52:12","2009-11-18 15:30:54",""
"1756801","How to sign a custom JCE security provider","<p>Sun's PKCS11 JCE security provider is lacking some functionality we need.<br/>
So I wrote an enhanced version of it using the original sources.</p>

<p>Unfortunately the JCE infrastructure rejects the new provider<br/>
<em>""JCE cannot authenticate the provider""</em><br/>
because it is not properly signed.</p>

<p><code>javax.crypto.JceSecurity.verifyProviderJar(...)</code> throws.<br/>
(it calls <code>javax.crypto.JarVerifier.verify()</code>)</p>

<p>Any suggestions how to sign the new provider to make it 
work with JCE?</p>
","<p>You have to sign the JAR with ""JCE Code Signing CA"". In all current Java distributions, only 2 CAs (Sun and IBM) are built-in (hard-coded) and there is no way to add your own. We tried to work with Sun to sign our provider and it's almost impossible. They wouldn't issue intermediate CA cert, which means you have to go through the trouble every time you make a change.</p>

<p>Why don't you just user your own library? You use standard API for interoperability between different JCEs. But that's not realistic for CryptoKi/SmartCard stuff right now, you almost always need to write some custom code to interact with vendor specific API. You can even make your code mimic JCE API to minimize code changes.</p>
","21431","<java><security><digital-signature><jce>","11","1","4","2016-05-04 20:19:49","1757186","1","4","1816580","","2015-06-18 12:52:12","2009-11-18 15:30:54",""
"1756801","How to sign a custom JCE security provider","<p>Sun's PKCS11 JCE security provider is lacking some functionality we need.<br/>
So I wrote an enhanced version of it using the original sources.</p>

<p>Unfortunately the JCE infrastructure rejects the new provider<br/>
<em>""JCE cannot authenticate the provider""</em><br/>
because it is not properly signed.</p>

<p><code>javax.crypto.JceSecurity.verifyProviderJar(...)</code> throws.<br/>
(it calls <code>javax.crypto.JarVerifier.verify()</code>)</p>

<p>Any suggestions how to sign the new provider to make it 
work with JCE?</p>
","<p>An alternative is to design your custom provider using OpenJDK. This is the open-source project sponsored by Sun/Oracle, and provides the code base for their official release. OpenJDK does not require providers to be signed. OpenJDK is available (by default, now) on several Linux distributions. Unfortunately, it does not seem to be readily available on Windows or Macintosh. If you're running Windows or Macintosh, I recommend installing Linux into a VM.</p>

<p>If you must develop on Windows or Mac, however, you can copy the jce.jar file from an OpenJDK install over jce.jar (in your Java lib directory) of an official install. This will effectively circumvent the Jar authentication process. Be sure to put the original jce.jar file back when you're done developing, though.</p>
","21431","<java><security><digital-signature><jce>","11","4","4","2016-05-04 20:19:49","1757186","1","4","1816580","","2015-06-18 12:52:12","2009-11-18 15:30:54",""
"1756801","How to sign a custom JCE security provider","<p>Sun's PKCS11 JCE security provider is lacking some functionality we need.<br/>
So I wrote an enhanced version of it using the original sources.</p>

<p>Unfortunately the JCE infrastructure rejects the new provider<br/>
<em>""JCE cannot authenticate the provider""</em><br/>
because it is not properly signed.</p>

<p><code>javax.crypto.JceSecurity.verifyProviderJar(...)</code> throws.<br/>
(it calls <code>javax.crypto.JarVerifier.verify()</code>)</p>

<p>Any suggestions how to sign the new provider to make it 
work with JCE?</p>
","<p>Only for extra info, i got this same exception when i build a JAR (Eclipse Juno) with the option ""Extract required libraries into generated JAR"" instead the correct ""Package required libraries into generated JAR"" </p>
","21431","<java><security><digital-signature><jce>","11","2","4","2016-05-04 20:19:49","1757186","1","4","1816580","","2015-06-18 12:52:12","2009-11-18 15:30:54",""
"2654949","How to read a password encrypted key with java?","<p>I have private key stored in file in PKCS8 DER format and protected by password. What is the easiest way to read it? </p>

<p>Here is the code I use to load unencrypted one:</p>

<pre><code>InputStream in = new FileInputStream(privateKeyFilename);
byte[] privateKeydata = new byte[in.available()];
in.read(privateKeydata);
in.close();
KeyFactory privateKeyFactory = KeyFactory.getInstance(""RSA"");
PKCS8EncodedKeySpec encodedKeySpec = new PKCS8EncodedKeySpec(privateKeydata);
PrivateKey privateKey = privateKeyFactory.generatePrivate(encodedKeySpec);
</code></pre>

<p>It works fine for unencrypted keys with the same specification. By the way, I am using BouncyCastle.</p>

<p>I can view this private key using following openssl command</p>

<pre><code>openssl pkcs8 -in ./privatekey.key -inform DER -passin pass:thisismypass
</code></pre>

<p>Please, Help!!!</p>

<p><strong>I,ve posted some solutions in my own answer to this topic. But I keep question unanswered in case anybody can help with making it work without extra library, just BouncyCastle.</strong> </p>
","<p>I found the solution! Maybe its not so elegant, but... 
Here I will post two solutions:</p>

<ol>
<li>Prefferable, but not working</li>
<li>Working one, but requires additional library</li>
</ol>

<p><strong><em>First</em></strong>:</p>

<p>I found a kind of solution <a href=""http://forums.sun.com/thread.jspa?threadID=758133&amp;tstart=0"" rel=""nofollow noreferrer"">here</a>, but it throws exception. Solution:</p>

<pre><code>import java.io.*;
import java.security.*;
import java.security.interfaces.RSAPrivateCrtKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.*;

import javax.crypto.*;
import javax.crypto.spec.*;

/*
 * This class demonstrates how to import an encrypted RSA private key as
 * generated by openssl. The input file is presumed to be in DER
 * format.
 */
public class ImportEncryptedPrivateKey
{
    public static byte[] readPK8FromFile(String fileName) throws IOException
    {
        File f = new File(fileName);
        DataInputStream dis = new DataInputStream(new FileInputStream(f));
        byte[] theData = new byte[(int) f.length()];
        dis.readFully(theData);
        return theData;
    }

    public static void main(String[] args) throws IOException,
            NoSuchAlgorithmException, NoSuchPaddingException,
            InvalidKeySpecException, InvalidKeyException,
            InvalidAlgorithmParameterException
    {
        byte[] encryptedPKInfo = readPK8FromFile(""rsapriv.pk8"");
        EncryptedPrivateKeyInfo ePKInfo = new EncryptedPrivateKeyInfo(
                encryptedPKInfo);
        char[] password = { 'p', 'a', 's', 's', 'w', 'o', 'r', 'd' };
        Cipher cipher = Cipher.getInstance(ePKInfo.getAlgName());
        PBEKeySpec pbeKeySpec = new PBEKeySpec(password);
        // Now create the Key from the PBEKeySpec
        SecretKeyFactory skFac = SecretKeyFactory.getInstance(ePKInfo
                .getAlgName());
        Key pbeKey = skFac.generateSecret(pbeKeySpec);
        // Extract the iteration count and the salt
        AlgorithmParameters algParams = ePKInfo.getAlgParameters();
        cipher.init(Cipher.DECRYPT_MODE, pbeKey, algParams);
        // Decrypt the encryped private key into a PKCS8EncodedKeySpec
        KeySpec pkcs8KeySpec = ePKInfo.getKeySpec(cipher);
        // Now retrieve the RSA Public and private keys by using an
        // RSA keyfactory.
        KeyFactory rsaKeyFac = KeyFactory.getInstance(""RSA"");
        // First get the private key
        RSAPrivateCrtKey rsaPriv = (RSAPrivateCrtKey) rsaKeyFac.generatePrivate(pkcs8KeySpec);
        // Now derive the RSA public key from the private key
        RSAPublicKeySpec rsaPubKeySpec = new RSAPublicKeySpec(rsaPriv.getModulus(), rsaPriv.getPublicExponent());
        RSAPublicKey rsaPubKey = (RSAPublicKey) rsaKeyFac.generatePublic(rsaPubKeySpec);
    }

}
</code></pre>

<p>And my exception:</p>

<pre><code>Exception in thread ""main"" java.security.NoSuchAlgorithmException: No such algorithm: 1.2.840.113549.1.5.13
</code></pre>

<p><strong><em>Second</em></strong>:</p>

<p>And following this <a href=""http://juliusdavies.ca/commons-ssl/pkcs8.html"" rel=""nofollow noreferrer"">http://juliusdavies.ca/commons-ssl/pkcs8.html</a> you can read about the second, working solution</p>
","21356","<java><bouncycastle><private-key><jce><pkcs#8>","14","8","2","2015-04-24 01:46:28","","0","12","304309","","2010-04-18 07:46:35","2010-04-16 17:23:02",""
"2654949","How to read a password encrypted key with java?","<p>I have private key stored in file in PKCS8 DER format and protected by password. What is the easiest way to read it? </p>

<p>Here is the code I use to load unencrypted one:</p>

<pre><code>InputStream in = new FileInputStream(privateKeyFilename);
byte[] privateKeydata = new byte[in.available()];
in.read(privateKeydata);
in.close();
KeyFactory privateKeyFactory = KeyFactory.getInstance(""RSA"");
PKCS8EncodedKeySpec encodedKeySpec = new PKCS8EncodedKeySpec(privateKeydata);
PrivateKey privateKey = privateKeyFactory.generatePrivate(encodedKeySpec);
</code></pre>

<p>It works fine for unencrypted keys with the same specification. By the way, I am using BouncyCastle.</p>

<p>I can view this private key using following openssl command</p>

<pre><code>openssl pkcs8 -in ./privatekey.key -inform DER -passin pass:thisismypass
</code></pre>

<p>Please, Help!!!</p>

<p><strong>I,ve posted some solutions in my own answer to this topic. But I keep question unanswered in case anybody can help with making it work without extra library, just BouncyCastle.</strong> </p>
","<p>This is my code and it work's :)</p>

<pre><code>File f = new File(keyFile);
FileInputStream fis = new FileInputStream(f);
DataInputStream dis = new DataInputStream(fis);
byte[] keyBytes = new byte[(int)f.length()];
dis.readFully(keyBytes);
dis.close();
EncryptedPrivateKeyInfo encryptPKInfo = new EncryptedPrivateKeyInfo(keyBytes);
Cipher cipher = Cipher.getInstance(encryptPKInfo.getAlgName());
PBEKeySpec pbeKeySpec = new PBEKeySpec(passwd.toCharArray());
SecretKeyFactory secFac = SecretKeyFactory.getInstance(encryptPKInfo.getAlgName());
Key pbeKey = secFac.generateSecret(pbeKeySpec);
AlgorithmParameters algParams = encryptPKInfo.getAlgParameters();
cipher.init(Cipher.DECRYPT_MODE, pbeKey, algParams);
KeySpec pkcs8KeySpec = encryptPKInfo.getKeySpec(cipher);
KeyFactory kf = KeyFactory.getInstance(""RSA"");
return kf.generatePrivate(pkcs8KeySpec);
</code></pre>
","21356","<java><bouncycastle><private-key><jce><pkcs#8>","14","1","2","2015-04-24 01:46:28","","0","12","304309","","2010-04-18 07:46:35","2010-04-16 17:23:02",""
"4436397","3DES/DES encryption using the JCE - generating an acceptable key","<p>I'm working on a project that <strong><em>requires</em></strong> 3DES encryption in Java. The issue is that I've been (and will continue to be) supplied with a 128-bit hex key like ""0123456789ABCDEF0123456789ABCDEF"". Conversion to bytes is no issue. What <strong><em>is</em></strong> the issue, however, is that the Java Cryptographic Extensions API will choke on this key, saying it is invalid. I gather that the MSB of each byte is merely a parity bit, so the JCE expects me to remove those (or so I think). In .NET, however, I can specify the key as supplied, and it quietly handles the encryption/decryption with no complaints.</p>

<p>Is there any way I can generate the kind of key the JCE expects from the kind of key I'm supplied?</p>

<p>I've found that the JCE allows you specify an 8-byte key for DES encryption, so I tried implementing 3DES as DES EDE using half of the supplied key. However, I'm still getting inconsistent results with .NET.</p>

<p>Here's the Java code:</p>

<pre><code>import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;

public class Main{
    public static void main(String[] args) throws Exception {
        byte [] plain = ""I eat fish every day"".getBytes(""utf-8"");

        byte [] keyBytes = new byte [] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00
            };

        byte [] key2Bytes = new byte [] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0  }; // actual keys replaced with dummies.

        SecretKey keySpec = new SecretKeySpec(keyBytes, ""DES"");
        SecretKey keySpec2 = new SecretKeySpec(key2Bytes, ""DES"");

        IvParameterSpec iv = new IvParameterSpec(new byte[8]);

        Cipher e_cipher = Cipher.getInstance(""DES/CBC/PKCS5Padding"");
        Cipher cipher = Cipher.getInstance(""DES/CBC/NoPadding"");

        e_cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);
        cipher.init(Cipher.DECRYPT_MODE, keySpec2, iv);

        byte [] cipherText = e_cipher.doFinal(plain);
        cipherText = cipher.doFinal(cipherText);
        cipherText = e_cipher.doFinal(cipherText);

        System.out.println(""Ciphertext: "" + new sun.misc.BASE64Encoder().encode(cipherText));
    }
}
</code></pre>

<p>and here's the .NET code:</p>

<pre><code>using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace EncryptionDemo
{
    class Program
    {
    public static void Main(string[] args)
    {
        Console.WriteLine(""Hello World!"");

        // TODO: Implement Functionality Here
        var plainBytes = Encoding.UTF8.GetBytes(""I eat fish every day"");
        var keyBytes = new byte [] { 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00,
         0x00,  0x00, 0x00, 0x00  };

        var tripleDES = TripleDESCryptoServiceProvider.Create();
        var transform = tripleDES.CreateEncryptor(keyBytes, new byte [8]);

        var memStream = new MemoryStream();
        var cStream = new CryptoStream(memStream, transform, CryptoStreamMode.Write);

        cStream.Write(plainBytes, 0, plainBytes.Length);
        cStream.FlushFinalBlock();

        //memStream.Position = 0;
        var cipherBytes = memStream.ToArray();

        Console.WriteLine(""Ciphertext: "" + Convert.ToBase64String(cipherBytes));

        Console.Write(""Press any key to continue . . . "");
        Console.ReadKey(true);
    }
}
</code></pre>

<p>Both produce different outputs (some characters in the Base64 string are the same)</p>
","<p>3DES keys are 192 bits long.</p>

<p>How are you creating the <code>SecretKey</code> instance? What error message to you get?</p>

<hr>

<p>The Java code in your <em>question</em> is using DES, not ""Triple DES"". The algorithm name should be <code>""DESede/CBC/PKCS5Padding""</code>. The code in your <em>answer</em> probably works because you got the algorithm right, not because you switched providers. The SunJCE provider in Java 6 will accept 128-bit keys (and use keying option 2). I am not sure about older versions.</p>
","20200","<java><.net><jce>","3","4","3","2011-03-15 16:01:04","4437076","3","3","477753","","2010-12-14 07:51:04","2010-12-14 06:09:53",""
"4436397","3DES/DES encryption using the JCE - generating an acceptable key","<p>I'm working on a project that <strong><em>requires</em></strong> 3DES encryption in Java. The issue is that I've been (and will continue to be) supplied with a 128-bit hex key like ""0123456789ABCDEF0123456789ABCDEF"". Conversion to bytes is no issue. What <strong><em>is</em></strong> the issue, however, is that the Java Cryptographic Extensions API will choke on this key, saying it is invalid. I gather that the MSB of each byte is merely a parity bit, so the JCE expects me to remove those (or so I think). In .NET, however, I can specify the key as supplied, and it quietly handles the encryption/decryption with no complaints.</p>

<p>Is there any way I can generate the kind of key the JCE expects from the kind of key I'm supplied?</p>

<p>I've found that the JCE allows you specify an 8-byte key for DES encryption, so I tried implementing 3DES as DES EDE using half of the supplied key. However, I'm still getting inconsistent results with .NET.</p>

<p>Here's the Java code:</p>

<pre><code>import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;

public class Main{
    public static void main(String[] args) throws Exception {
        byte [] plain = ""I eat fish every day"".getBytes(""utf-8"");

        byte [] keyBytes = new byte [] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00
            };

        byte [] key2Bytes = new byte [] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0  }; // actual keys replaced with dummies.

        SecretKey keySpec = new SecretKeySpec(keyBytes, ""DES"");
        SecretKey keySpec2 = new SecretKeySpec(key2Bytes, ""DES"");

        IvParameterSpec iv = new IvParameterSpec(new byte[8]);

        Cipher e_cipher = Cipher.getInstance(""DES/CBC/PKCS5Padding"");
        Cipher cipher = Cipher.getInstance(""DES/CBC/NoPadding"");

        e_cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);
        cipher.init(Cipher.DECRYPT_MODE, keySpec2, iv);

        byte [] cipherText = e_cipher.doFinal(plain);
        cipherText = cipher.doFinal(cipherText);
        cipherText = e_cipher.doFinal(cipherText);

        System.out.println(""Ciphertext: "" + new sun.misc.BASE64Encoder().encode(cipherText));
    }
}
</code></pre>

<p>and here's the .NET code:</p>

<pre><code>using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace EncryptionDemo
{
    class Program
    {
    public static void Main(string[] args)
    {
        Console.WriteLine(""Hello World!"");

        // TODO: Implement Functionality Here
        var plainBytes = Encoding.UTF8.GetBytes(""I eat fish every day"");
        var keyBytes = new byte [] { 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00,
         0x00,  0x00, 0x00, 0x00  };

        var tripleDES = TripleDESCryptoServiceProvider.Create();
        var transform = tripleDES.CreateEncryptor(keyBytes, new byte [8]);

        var memStream = new MemoryStream();
        var cStream = new CryptoStream(memStream, transform, CryptoStreamMode.Write);

        cStream.Write(plainBytes, 0, plainBytes.Length);
        cStream.FlushFinalBlock();

        //memStream.Position = 0;
        var cipherBytes = memStream.ToArray();

        Console.WriteLine(""Ciphertext: "" + Convert.ToBase64String(cipherBytes));

        Console.Write(""Press any key to continue . . . "");
        Console.ReadKey(true);
    }
}
</code></pre>

<p>Both produce different outputs (some characters in the Base64 string are the same)</p>
","<p>the Sun provider doesn't accept 16-byte 3DES keys, but the BouncyCastle provider does. I just tried it out and it works like a charm - it produces the same output as the .NET code!</p>

<pre><code>import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Security;

import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class Main{
    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());

        byte [] plain = ""I eat fish every day"".getBytes(""utf-8"");

        byte [] keyBytes = new byte [] { (byte) 0xC1, (byte) 0x57, (byte) 0x45, (byte) 0x08,
            (byte) 0x85, (byte) 0x02, (byte) 0xB0, (byte) 0xD3,
            (byte) 0xA2, (byte) 0xEF, (byte) 0x68, (byte) 0x43,
            (byte) 0x5E, (byte) 0xE6, (byte) 0xD0, (byte) 0x75 };


        SecretKey keySpec = new SecretKeySpec(keyBytes, ""DESede"");

        IvParameterSpec iv = new IvParameterSpec(new byte[8]);

        Cipher e_cipher = Cipher.getInstance(""DESede/CBC/PKCS5Padding"", ""BC"");

        e_cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);

        byte [] cipherText = e_cipher.doFinal(plain);

        System.out.println(""Ciphertext: "" + new sun.misc.BASE64Encoder().encode(cipherText));
    }
}
</code></pre>
","20200","<java><.net><jce>","3","1","3","2011-03-15 16:01:04","4437076","3","3","477753","","2010-12-14 07:51:04","2010-12-14 06:09:53",""
"4436397","3DES/DES encryption using the JCE - generating an acceptable key","<p>I'm working on a project that <strong><em>requires</em></strong> 3DES encryption in Java. The issue is that I've been (and will continue to be) supplied with a 128-bit hex key like ""0123456789ABCDEF0123456789ABCDEF"". Conversion to bytes is no issue. What <strong><em>is</em></strong> the issue, however, is that the Java Cryptographic Extensions API will choke on this key, saying it is invalid. I gather that the MSB of each byte is merely a parity bit, so the JCE expects me to remove those (or so I think). In .NET, however, I can specify the key as supplied, and it quietly handles the encryption/decryption with no complaints.</p>

<p>Is there any way I can generate the kind of key the JCE expects from the kind of key I'm supplied?</p>

<p>I've found that the JCE allows you specify an 8-byte key for DES encryption, so I tried implementing 3DES as DES EDE using half of the supplied key. However, I'm still getting inconsistent results with .NET.</p>

<p>Here's the Java code:</p>

<pre><code>import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;

public class Main{
    public static void main(String[] args) throws Exception {
        byte [] plain = ""I eat fish every day"".getBytes(""utf-8"");

        byte [] keyBytes = new byte [] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00
            };

        byte [] key2Bytes = new byte [] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0  }; // actual keys replaced with dummies.

        SecretKey keySpec = new SecretKeySpec(keyBytes, ""DES"");
        SecretKey keySpec2 = new SecretKeySpec(key2Bytes, ""DES"");

        IvParameterSpec iv = new IvParameterSpec(new byte[8]);

        Cipher e_cipher = Cipher.getInstance(""DES/CBC/PKCS5Padding"");
        Cipher cipher = Cipher.getInstance(""DES/CBC/NoPadding"");

        e_cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);
        cipher.init(Cipher.DECRYPT_MODE, keySpec2, iv);

        byte [] cipherText = e_cipher.doFinal(plain);
        cipherText = cipher.doFinal(cipherText);
        cipherText = e_cipher.doFinal(cipherText);

        System.out.println(""Ciphertext: "" + new sun.misc.BASE64Encoder().encode(cipherText));
    }
}
</code></pre>

<p>and here's the .NET code:</p>

<pre><code>using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace EncryptionDemo
{
    class Program
    {
    public static void Main(string[] args)
    {
        Console.WriteLine(""Hello World!"");

        // TODO: Implement Functionality Here
        var plainBytes = Encoding.UTF8.GetBytes(""I eat fish every day"");
        var keyBytes = new byte [] { 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00,
         0x00,  0x00, 0x00, 0x00  };

        var tripleDES = TripleDESCryptoServiceProvider.Create();
        var transform = tripleDES.CreateEncryptor(keyBytes, new byte [8]);

        var memStream = new MemoryStream();
        var cStream = new CryptoStream(memStream, transform, CryptoStreamMode.Write);

        cStream.Write(plainBytes, 0, plainBytes.Length);
        cStream.FlushFinalBlock();

        //memStream.Position = 0;
        var cipherBytes = memStream.ToArray();

        Console.WriteLine(""Ciphertext: "" + Convert.ToBase64String(cipherBytes));

        Console.Write(""Press any key to continue . . . "");
        Console.ReadKey(true);
    }
}
</code></pre>

<p>Both produce different outputs (some characters in the Base64 string are the same)</p>
","<p>In the <a href=""http://jpos.org"" rel=""nofollow"">jPOS</a> project, the problem is worked around by always using either single-length (8-byte) or triple-length (24-byte) keys. Let's say your clear double-length key (in bytes) is AAAAAAAA BBBBBBBB. All code in the jPOS project I've seen so far that uses the JCE appends the first 8 bytes again to the clear key, so it becomes a triple-length key as such: AAAAAAAA BBBBBBBB AAAAAAAA. It seems the Sun provider does accept this material for creating a SecreKeySpec, as it is 192 bits long, as @erickson mentioned.</p>
","20200","<java><.net><jce>","3","1","3","2011-03-15 16:01:04","4437076","3","3","477753","","2010-12-14 07:51:04","2010-12-14 06:09:53",""
"8674018","PBKDF2 with bouncycastle in Java","<p>I'm trying to securely store a password in a database and for that I chose to store its hash generated using the PBKDF2 function. I want to do this using the bouncy castle library but I don't know why I cannot get it to work by using the JCE interface...
The problem is that generating the hash in 3 different modes: <br>
 1. using the PBKDF2WithHmacSHA1 secret key factory provided by sun <br>
 2. using the bouncy castle api directly <br>
 3. using the bouncy castle through JCE <br>
results in 2 distinct values: one common to the first two and one for the third.</p>

<p>Here is my code:</p>

<pre><code>    //Mode 1

    SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    KeySpec keyspec = new PBEKeySpec(""password"".toCharArray(), salt, 1000, 128);
    Key key = factory.generateSecret(keyspec);
    System.out.println(key.getClass().getName());
    System.out.println(Arrays.toString(key.getEncoded()));

    //Mode 2

    PBEParametersGenerator generator = new PKCS5S2ParametersGenerator();
    generator.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes((""password"").toCharArray()), salt, 1000);
    KeyParameter params = (KeyParameter)generator.generateDerivedParameters(128);
    System.out.println(Arrays.toString(params.getKey()));

    //Mode 3

    SecretKeyFactory factorybc = SecretKeyFactory.getInstance(""PBEWITHHMACSHA1"", ""BC"");
    KeySpec keyspecbc = new PBEKeySpec(""password"".toCharArray(), salt, 1000, 128);
    Key keybc = factorybc.generateSecret(keyspecbc);
    System.out.println(keybc.getClass().getName());
    System.out.println(Arrays.toString(keybc.getEncoded()));
    System.out.println(keybc.getAlgorithm());
</code></pre>

<p>I know that PBKDF2 is implemented using HMAC SHA1 so that is why i chose as algorithm in the last method the ""PBEWITHHMACSHA1"" which i took from the bouncy castle java docs.</p>

<p>The output is the following:</p>

<pre><code>com.sun.crypto.provider.SunJCE_ae
[-53, 29, 113, -110, -25, 76, 115, -127, -64, 74, -63, 102, 75, 81, -21, 74]
[-53, 29, 113, -110, -25, 76, 115, -127, -64, 74, -63, 102, 75, 81, -21, 74]
org.bouncycastle.jce.provider.JCEPBEKey
[14, -47, -87, -16, -117, -31, 91, -121, 90, -68, -82, -31, -27, 5, -93, -67, 30, -34, -64, -40]
PBEwithHmacSHA
</code></pre>

<p>Any ideas?</p>
","<p>In short, the reason for the difference is that PBKDF2 algorithm in modes #1 and #2 uses PKCS #5 v2 scheme 2 (PKCS5S2) for iterative key generation, but the BouncyCastle provider for ""PBEWITHHMACSHA1"" in mode #3 uses the PKCS #12 v1 (PKCS12) algorithm instead. These are completely different key-generation algorithms, so you get different results.</p>

<p>More detail on why this is so and why you get different sized results is explained below.</p>

<p>First, when you're constructing a JCE KeySpec, the keyLength parameter only expresses ""a preference"" to the provider what key size you want. From <a href=""http://docs.oracle.com/javase/1.4.2/docs/api/javax/crypto/spec/PBEKeySpec.html#getKeyLength%28%29"">the API docs</a>:</p>

<blockquote>
  <p>Note: this is used to indicate the preference on key length for variable-key-size ciphers. The actual key size depends on each provider's implementation.</p>
</blockquote>

<p>The Bouncy Castle providers don't appear to respect this parameter, judging from <a href=""http://grepcode.com/file/repo1.maven.org/maven2/bouncycastle/bcprov-jdk15/140/org/bouncycastle/jce/provider/JCEPBEKey.java#JCEPBEKey"">the source of JCEPBEKey</a>, so you should expect to get a 160-bit key back from any BC provider which uses SHA-1 when using the JCE API.</p>

<p>You can confirm this by programmatically accessing the <code>getKeySize()</code> method on the returned <code>keybc</code> variable in your test code:</p>

<pre><code>Key keybc = factorybc.generateSecret(keyspecbc);
// ...
Method getKeySize = JCEPBEKey.class.getDeclaredMethod(""getKeySize"");
getKeySize.setAccessible(true);
System.out.println(getKeySize.invoke(keybc)); // prints '160'
</code></pre>

<p>Now, to understand what the ""PBEWITHHMACSHA1"" provider corresponds to, you can find the following in <a href=""http://grepcode.com/file/repository.jboss.org/maven2/bouncycastle/bcprov-jdk15/140/org/bouncycastle/jce/provider/BouncyCastleProvider.java#482"">the source for BouncyCastleProvider</a>:</p>

<pre><code>put(""SecretKeyFactory.PBEWITHHMACSHA1"", 
    ""org.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA"");
</code></pre>

<p>And the implementation of <a href=""http://grepcode.com/file/repo1.maven.org/maven2/bouncycastle/bcprov-jdk15/140/org/bouncycastle/jce/provider/JCESecretKeyFactory.java#495"">JCESecretKeyFactory.PBEWithSHA</a> looks like this:</p>

<pre><code>public static class PBEWithSHA
    extends PBEKeyFactory
{
    public PBEWithSHA()
    {
        super(""PBEwithHmacSHA"", null, false, PKCS12, SHA1, 160, 0);
    }
}
</code></pre>

<p>You can see above that this key factory uses the PKCS #12 v1 (<a href=""http://www.bouncycastle.org/docs/docs1.5on/org/bouncycastle/crypto/generators/PKCS12ParametersGenerator.html"">PKCS12</a>) algorithm for iterative key generation. But the PBKDF2 algorithm that you want to use for password hashing uses PKCS #5 v2 scheme 2 (<a href=""http://www.bouncycastle.org/docs/docs1.5on/org/bouncycastle/crypto/generators/PKCS5S2ParametersGenerator.html"">PKCS5S2</a>) instead. This is why you're getting different results.</p>

<p>I had a quick look through the JCE providers registered in <code>BouncyCastleProvider</code>, but couldn't see <em>any</em> key generation algorithms that used PKCS5S2 at all, let alone one which also uses it with HMAC-SHA-1.</p>

<p>So I guess you're stuck with either using the Sun implementation (mode #1 above) and losing portability on other JVMs, or using the Bouncy Castle classes directly (mode #2 above) and requiring the BC library at runtime.</p>

<p>Either way, you should probably switch to 160-bit keys, so you aren't truncating the generated SHA-1 hash unnecessarily.</p>
","20044","<java><bouncycastle><jce><pbkdf2>","38","30","3","2019-01-12 05:44:39","10569975","4","20","3636601","","2017-07-11 09:48:25","2011-12-29 22:02:30",""
"8674018","PBKDF2 with bouncycastle in Java","<p>I'm trying to securely store a password in a database and for that I chose to store its hash generated using the PBKDF2 function. I want to do this using the bouncy castle library but I don't know why I cannot get it to work by using the JCE interface...
The problem is that generating the hash in 3 different modes: <br>
 1. using the PBKDF2WithHmacSHA1 secret key factory provided by sun <br>
 2. using the bouncy castle api directly <br>
 3. using the bouncy castle through JCE <br>
results in 2 distinct values: one common to the first two and one for the third.</p>

<p>Here is my code:</p>

<pre><code>    //Mode 1

    SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    KeySpec keyspec = new PBEKeySpec(""password"".toCharArray(), salt, 1000, 128);
    Key key = factory.generateSecret(keyspec);
    System.out.println(key.getClass().getName());
    System.out.println(Arrays.toString(key.getEncoded()));

    //Mode 2

    PBEParametersGenerator generator = new PKCS5S2ParametersGenerator();
    generator.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes((""password"").toCharArray()), salt, 1000);
    KeyParameter params = (KeyParameter)generator.generateDerivedParameters(128);
    System.out.println(Arrays.toString(params.getKey()));

    //Mode 3

    SecretKeyFactory factorybc = SecretKeyFactory.getInstance(""PBEWITHHMACSHA1"", ""BC"");
    KeySpec keyspecbc = new PBEKeySpec(""password"".toCharArray(), salt, 1000, 128);
    Key keybc = factorybc.generateSecret(keyspecbc);
    System.out.println(keybc.getClass().getName());
    System.out.println(Arrays.toString(keybc.getEncoded()));
    System.out.println(keybc.getAlgorithm());
</code></pre>

<p>I know that PBKDF2 is implemented using HMAC SHA1 so that is why i chose as algorithm in the last method the ""PBEWITHHMACSHA1"" which i took from the bouncy castle java docs.</p>

<p>The output is the following:</p>

<pre><code>com.sun.crypto.provider.SunJCE_ae
[-53, 29, 113, -110, -25, 76, 115, -127, -64, 74, -63, 102, 75, 81, -21, 74]
[-53, 29, 113, -110, -25, 76, 115, -127, -64, 74, -63, 102, 75, 81, -21, 74]
org.bouncycastle.jce.provider.JCEPBEKey
[14, -47, -87, -16, -117, -31, 91, -121, 90, -68, -82, -31, -27, 5, -93, -67, 30, -34, -64, -40]
PBEwithHmacSHA
</code></pre>

<p>Any ideas?</p>
","<p>I found a BC Crypto-Only method (actually from the cms package of BC) which works to produce a UTF-8 based password encoding. This way I can generate KDF output which is compatible to</p>

<p><a href=""http://packages.python.org/passlib/lib/passlib.hash.cta_pbkdf2_sha1.html#passlib.hash.cta_pbkdf2_sha1"" rel=""nofollow"">http://packages.python.org/passlib/lib/passlib.hash.cta_pbkdf2_sha1.html#passlib.hash.cta_pbkdf2_sha1</a></p>

<pre><code>private byte[] calculatePasswordDigest(char[] pass, byte[] salt, int iterations)
    throws PasswordProtectionException
{
    try
    {
        /* JCE Version (does not work as BC uses PKCS12 encoding)
        SecretKeyFactory kf = SecretKeyFactory.getInstance(""PBEWITHHMACSHA1"",""BC"");
        PBEKeySpec ks = new PBEKeySpec(pass, salt, iterations,160);
        SecretKey digest = kf.generateSecret(ks);
        return digest.getEncoded();
        */
        PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator();
        gen.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes(pass), salt, iterations);
        byte[] derivedKey = ((KeyParameter)gen.generateDerivedParameters(160)).getKey();
        return derivedKey;
    }
    catch(Exception e)
    {
        LOG.error(""Failed to strengthen the password with PBKDF2."",e);
        throw new PasswordProtectionException();
    }
}
</code></pre>
","20044","<java><bouncycastle><jce><pbkdf2>","38","3","3","2019-01-12 05:44:39","10569975","4","20","3636601","","2017-07-11 09:48:25","2011-12-29 22:02:30",""
"8674018","PBKDF2 with bouncycastle in Java","<p>I'm trying to securely store a password in a database and for that I chose to store its hash generated using the PBKDF2 function. I want to do this using the bouncy castle library but I don't know why I cannot get it to work by using the JCE interface...
The problem is that generating the hash in 3 different modes: <br>
 1. using the PBKDF2WithHmacSHA1 secret key factory provided by sun <br>
 2. using the bouncy castle api directly <br>
 3. using the bouncy castle through JCE <br>
results in 2 distinct values: one common to the first two and one for the third.</p>

<p>Here is my code:</p>

<pre><code>    //Mode 1

    SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    KeySpec keyspec = new PBEKeySpec(""password"".toCharArray(), salt, 1000, 128);
    Key key = factory.generateSecret(keyspec);
    System.out.println(key.getClass().getName());
    System.out.println(Arrays.toString(key.getEncoded()));

    //Mode 2

    PBEParametersGenerator generator = new PKCS5S2ParametersGenerator();
    generator.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes((""password"").toCharArray()), salt, 1000);
    KeyParameter params = (KeyParameter)generator.generateDerivedParameters(128);
    System.out.println(Arrays.toString(params.getKey()));

    //Mode 3

    SecretKeyFactory factorybc = SecretKeyFactory.getInstance(""PBEWITHHMACSHA1"", ""BC"");
    KeySpec keyspecbc = new PBEKeySpec(""password"".toCharArray(), salt, 1000, 128);
    Key keybc = factorybc.generateSecret(keyspecbc);
    System.out.println(keybc.getClass().getName());
    System.out.println(Arrays.toString(keybc.getEncoded()));
    System.out.println(keybc.getAlgorithm());
</code></pre>

<p>I know that PBKDF2 is implemented using HMAC SHA1 so that is why i chose as algorithm in the last method the ""PBEWITHHMACSHA1"" which i took from the bouncy castle java docs.</p>

<p>The output is the following:</p>

<pre><code>com.sun.crypto.provider.SunJCE_ae
[-53, 29, 113, -110, -25, 76, 115, -127, -64, 74, -63, 102, 75, 81, -21, 74]
[-53, 29, 113, -110, -25, 76, 115, -127, -64, 74, -63, 102, 75, 81, -21, 74]
org.bouncycastle.jce.provider.JCEPBEKey
[14, -47, -87, -16, -117, -31, 91, -121, 90, -68, -82, -31, -27, 5, -93, -67, 30, -34, -64, -40]
PBEwithHmacSHA
</code></pre>

<p>Any ideas?</p>
","<p>PBKDF2WithHmacSHA1 is already supported in BouncyCastle 1.60</p>

<p><a href=""https://www.bouncycastle.org/specifications.html"" rel=""nofollow noreferrer"">https://www.bouncycastle.org/specifications.html</a>
Password Hashing and PBE</p>

<p>Test passed with OpenJDK Runtime Environment 18.9 (build 11.0.1+13):</p>

<pre><code>    Security.addProvider(new BouncyCastleProvider());

    String password = ""xrS7AJk+V6L8J?B%"";
    SecureRandom rnd = new SecureRandom();
    int saltLength = 16;
    int keyLength = 128;
    int iterationCount = 10000;

    byte[] salt = new byte[saltLength];
    rnd.nextBytes(salt);

//SunJCE
    SecretKeyFactory factorySun = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"", ""SunJCE"");
    KeySpec keyspecSun = new PBEKeySpec(password.toCharArray(), salt, iterationCount, keyLength);
    SecretKey keySun = factorySun.generateSecret(keyspecSun);
    System.out.println(keySun.getClass().getName());
    System.out.println(Hex.toHexString(keySun.getEncoded()));

//BouncyCastle  
    SecretKeyFactory factoryBC = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"", ""BC"");
    KeySpec keyspecBC = new PBEKeySpec(password.toCharArray(), salt, iterationCount, keyLength);
    SecretKey keyBC = factoryBC.generateSecret(keyspecBC);
    System.out.println(keyBC.getClass().getName());
    System.out.println(Hex.toHexString(keyBC.getEncoded()));

    Assert.assertArrayEquals(keySun.getEncoded(), keyBC.getEncoded());
</code></pre>

<p>The output is:</p>

<pre><code>com.sun.crypto.provider.PBKDF2KeyImpl
e9b01389fa91a6172ed6e95e1e1a2611
org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey
e9b01389fa91a6172ed6e95e1e1a2611
</code></pre>
","20044","<java><bouncycastle><jce><pbkdf2>","38","0","3","2019-01-12 05:44:39","10569975","4","20","3636601","","2017-07-11 09:48:25","2011-12-29 22:02:30",""
"42159690","Why are the JCE Unlimited Strength not included by default?","<h2>Setup</h2>

<ul>
<li>Java doesn't offer out-of-the-box support for the JCE Unlimited Strength Policy Files</li>
<li>This prevents users from using AES-256, the largest key size of a widely-used encryption standard</li>
<li>Not including the policy files leads to many problems:

<ul>
<li><a href=""https://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters"">Unexpected exceptions</a></li>
<li><a href=""https://stackoverflow.com/questions/1179672/how-to-avoid-installing-unlimited-strength-jce-policy-files-when-deploying-an"">Unsatisfying workarounds</a>:

<ul>
<li>Just install them</li>
<li>Use a different implementation</li>
<li>Use reflection that may violate the Java License Agreement</li>
</ul></li>
<li><a href=""https://stackoverflow.com/questions/5239974/java-jce-unlimited-strength-encryption-security-policy-files"">Breakage after JRE updates</a></li>
<li><a href=""https://stackoverflow.com/questions/25320705/jce-unlimited-strength-installed-but-aes-256-is-not-supported"">Confusion after installation</a></li>
<li><a href=""https://stackoverflow.com/search?q=%5Bjce%5D+unlimited"">And more!</a></li>
</ul></li>
<li>All this noise leads to broken and/or buggy programs</li>
</ul>

<h2>Question</h2>

<ul>
<li>Why are these not provided and treated like a black sheep?</li>
</ul>
","<p>The US has restrictions on the export of cryptographic technology:</p>

<p><a href=""https://en.wikipedia.org/wiki/Export_of_cryptography_from_the_United_States"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Export_of_cryptography_from_the_United_States</a></p>

<p>They used to be very strict -- cryptography was classified as munitions, and you could only download the full strength products from the US and other whitelisted countries.</p>

<p>Restrictions have eased up a lot since then, but some remain, and full strength JCE can't be freely distributed everywhere like the JRE, so it's a separate package.</p>
","18554","<java><encryption><jce>","24","4","3","2018-01-21 20:47:40","42163925","2","10","","","","2017-02-10 12:42:05",""
"42159690","Why are the JCE Unlimited Strength not included by default?","<h2>Setup</h2>

<ul>
<li>Java doesn't offer out-of-the-box support for the JCE Unlimited Strength Policy Files</li>
<li>This prevents users from using AES-256, the largest key size of a widely-used encryption standard</li>
<li>Not including the policy files leads to many problems:

<ul>
<li><a href=""https://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters"">Unexpected exceptions</a></li>
<li><a href=""https://stackoverflow.com/questions/1179672/how-to-avoid-installing-unlimited-strength-jce-policy-files-when-deploying-an"">Unsatisfying workarounds</a>:

<ul>
<li>Just install them</li>
<li>Use a different implementation</li>
<li>Use reflection that may violate the Java License Agreement</li>
</ul></li>
<li><a href=""https://stackoverflow.com/questions/5239974/java-jce-unlimited-strength-encryption-security-policy-files"">Breakage after JRE updates</a></li>
<li><a href=""https://stackoverflow.com/questions/25320705/jce-unlimited-strength-installed-but-aes-256-is-not-supported"">Confusion after installation</a></li>
<li><a href=""https://stackoverflow.com/search?q=%5Bjce%5D+unlimited"">And more!</a></li>
</ul></li>
<li>All this noise leads to broken and/or buggy programs</li>
</ul>

<h2>Question</h2>

<ul>
<li>Why are these not provided and treated like a black sheep?</li>
</ul>
","<ul>
<li>As it turns out, it's not strict crypto export laws, but simply that <a href=""http://mail.openjdk.java.net/pipermail/security-dev/2016-October/014942.html"" rel=""noreferrer"">no one got around to it yet</a>.</li>
<li>In fact, <a href=""https://bugs.openjdk.java.net/browse/JDK-7024850"" rel=""noreferrer"">it's been planned for a long time</a> to not have to jump through these hoops.</li>
<li>In Java 9, the ceremony will be condensed down to a <a href=""http://mail.openjdk.java.net/pipermail/security-dev/2016-October/014943.html"" rel=""noreferrer"">one-liner</a>: <code>Security.setProperty(""crypto.policy"", ""unlimited"");</code></li>
</ul>
","18554","<java><encryption><jce>","24","24","3","2018-01-21 20:47:40","42163925","2","10","","","","2017-02-10 12:42:05",""
"42159690","Why are the JCE Unlimited Strength not included by default?","<h2>Setup</h2>

<ul>
<li>Java doesn't offer out-of-the-box support for the JCE Unlimited Strength Policy Files</li>
<li>This prevents users from using AES-256, the largest key size of a widely-used encryption standard</li>
<li>Not including the policy files leads to many problems:

<ul>
<li><a href=""https://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters"">Unexpected exceptions</a></li>
<li><a href=""https://stackoverflow.com/questions/1179672/how-to-avoid-installing-unlimited-strength-jce-policy-files-when-deploying-an"">Unsatisfying workarounds</a>:

<ul>
<li>Just install them</li>
<li>Use a different implementation</li>
<li>Use reflection that may violate the Java License Agreement</li>
</ul></li>
<li><a href=""https://stackoverflow.com/questions/5239974/java-jce-unlimited-strength-encryption-security-policy-files"">Breakage after JRE updates</a></li>
<li><a href=""https://stackoverflow.com/questions/25320705/jce-unlimited-strength-installed-but-aes-256-is-not-supported"">Confusion after installation</a></li>
<li><a href=""https://stackoverflow.com/search?q=%5Bjce%5D+unlimited"">And more!</a></li>
</ul></li>
<li>All this noise leads to broken and/or buggy programs</li>
</ul>

<h2>Question</h2>

<ul>
<li>Why are these not provided and treated like a black sheep?</li>
</ul>
","<p>Now Unlimited cryptography enabled by default in the JDK </p>

<p>The JDK uses the Java Cryptography Extension (JCE) Jurisdiction Policy files to configure cryptographic algorithm restrictions. Previously, the Policy files in the JDK placed limits on various algorithms. This release ships with both the limited and unlimited jurisdiction policy files, with unlimited being the default. The behavior can be controlled via the new 'crypto.policy' Security property found in the /lib/java.security file. Please refer to that file for more information on this property.</p>

<p>See: <a href=""http://www.oracle.com/technetwork/java/javase/8u161-relnotes-4021379.html#JDK-8170157"" rel=""noreferrer"">http://www.oracle.com/technetwork/java/javase/8u161-relnotes-4021379.html#JDK-8170157</a></p>
","18554","<java><encryption><jce>","24","11","3","2018-01-21 20:47:40","42163925","2","10","","","","2017-02-10 12:42:05",""
"25942165","AES-256 and PKCS7Padding fails in Java","<p>I have a couple of library, C#, PHP and Android where they all encrypt/decrypt a string in the same way so they are all compatible with each other, i.e. C# writes and encrypts data to a database and PHP can successfully decrypt it and return the original string. </p>

<p>I now need to do the same thing with a standard Java application, so I've taken the code from my Android library and need libraries but I am getting an exception. As far as I know the code wasn't Android specific so it shouldn't be a problem. </p>

<p>Below is my encryption function </p>

<pre><code>public static String encrypt(String plainPasword)
    {
            String password = """";
            try
            {
                SecretKeySpec key = new SecretKeySpec(""hcxilkqbbhczfeultgbskdmaunivmfuo"".getBytes(""US-ASCII""), ""AES"");
                IvParameterSpec iv = new IvParameterSpec(""ryojvlzmdalyglrj"".getBytes(""US-ASCII""));

                Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");

                cipher.init(Cipher.ENCRYPT_MODE, key, iv);

                byte[] encoded = cipher.doFinal(plainPasword.getBytes());
                password = new String(Base64.encodeBase64(encoded));

            }
            catch (Exception ex)
            {
                System.err.println(""Encryption Exception: "" + ex.toString());
            }
            return password;
    }
</code></pre>

<p>When I call <code>Encryption.encrypt(""myString"")</code> I get the following exception:</p>

<pre><code>Encryption Exception: java.security.NoSuchAlgorithmException: Cannot find any provider supporting AES/CBC/PKCS7Padding
</code></pre>

<p>As I said this code is working fine on Android and it shouldn't make any difference where it is running from. </p>

<h2>Update</h2>

<p>I found that I needed PKCS5Padding instead of 7 thanks to a link on a comment. I am now though getting the following exception:</p>

<pre><code>Encryption Exception: java.security.InvalidKeyException: Illegal key size
</code></pre>
","<p>First, in Java, the standard padding name is PKCS5Padding, not PKCS7Padding. Java is actually performing PKCS #7 padding, but in the JCA specification, PKCS5Padding is the name given.</p>

<p>Next, you are trying to use AES-256, so you'll need to install the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"">Unlimited Strength Jurisdiction</a> policy files.</p>

<p>Hopefully this is just an example and you aren't using the same IV for every message, right?</p>
","18444","<java><encryption><aes><jce><pkcs#7>","6","18","2","2019-09-26 20:55:11","25942381","5","3","472495","","2019-09-26 20:55:11","2014-09-19 20:47:55",""
"25942165","AES-256 and PKCS7Padding fails in Java","<p>I have a couple of library, C#, PHP and Android where they all encrypt/decrypt a string in the same way so they are all compatible with each other, i.e. C# writes and encrypts data to a database and PHP can successfully decrypt it and return the original string. </p>

<p>I now need to do the same thing with a standard Java application, so I've taken the code from my Android library and need libraries but I am getting an exception. As far as I know the code wasn't Android specific so it shouldn't be a problem. </p>

<p>Below is my encryption function </p>

<pre><code>public static String encrypt(String plainPasword)
    {
            String password = """";
            try
            {
                SecretKeySpec key = new SecretKeySpec(""hcxilkqbbhczfeultgbskdmaunivmfuo"".getBytes(""US-ASCII""), ""AES"");
                IvParameterSpec iv = new IvParameterSpec(""ryojvlzmdalyglrj"".getBytes(""US-ASCII""));

                Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"");

                cipher.init(Cipher.ENCRYPT_MODE, key, iv);

                byte[] encoded = cipher.doFinal(plainPasword.getBytes());
                password = new String(Base64.encodeBase64(encoded));

            }
            catch (Exception ex)
            {
                System.err.println(""Encryption Exception: "" + ex.toString());
            }
            return password;
    }
</code></pre>

<p>When I call <code>Encryption.encrypt(""myString"")</code> I get the following exception:</p>

<pre><code>Encryption Exception: java.security.NoSuchAlgorithmException: Cannot find any provider supporting AES/CBC/PKCS7Padding
</code></pre>

<p>As I said this code is working fine on Android and it shouldn't make any difference where it is running from. </p>

<h2>Update</h2>

<p>I found that I needed PKCS5Padding instead of 7 thanks to a link on a comment. I am now though getting the following exception:</p>

<pre><code>Encryption Exception: java.security.InvalidKeyException: Illegal key size
</code></pre>
","<p>@Boardy If you are still facing the issue then i think you have to use MessageDigest which is compatible for both for C# and Java. I have faced the similar issue for AES 256 encryption and decryption. The sample code will be as follows.</p>

<pre><code>public static String encryptWithAES256(String strToEncrypt) throws Exception
{
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    byte[] encodedhash = digest.digest(KEY.getBytes(StandardCharsets.UTF_8));
    IvParameterSpec ivspec = new IvParameterSpec(Arrays.copyOf(KEY.getBytes(),16));
    SecretKeySpec secretKey = new SecretKeySpec(encodedhash, AES_ENCRYPTION_ALGORITHM);
    Cipher cipher = Cipher.getInstance(CIPHER_TRANSFORMATION);
    cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivspec);
    return new String(Base64.encodeBase64(cipher.doFinal(strToEncrypt.getBytes(CHARACTER_ENCODING))));
}
</code></pre>
","18444","<java><encryption><aes><jce><pkcs#7>","6","-1","2","2019-09-26 20:55:11","25942381","5","3","472495","","2019-09-26 20:55:11","2014-09-19 20:47:55",""
"10043376","Java X509 Certificate parsing and validating","<p>I'm trying to process X509 certificates in several steps and running into a couple of problems. I'm new to JCE so I not completely up to date on everything yet.</p>

<p>We want to be able to parse several different X509 certificates based on different encodings (PEM, DER and PCKS7). I've exported the same certificate from <a href=""https://belgium.be"">https://belgium.be</a> in PEM and PCKS7 format using FireFox (certificate including chain). I've left couple lines out that are not needed for the questions</p>

<pre><code>public List&lt;X509Certificate&gt; parse(FileInputStream fis) {  
    /*
     * Generate a X509 Certificate initialized with the data read from the inputstream. 
     * NOTE: Generation fails when using BufferedInputStream on PKCS7 certificates.
     */
    List&lt;X509Certificate&gt; certificates = null;
      log.debug(""Parsing new certificate."");
      certificates = (List&lt;X509Certificate&gt;) cf.generateCertificates(fis);
    return certificates;
  }
</code></pre>

<p>This code is working fine aslong as I work with a FileInputStream instead of a BufferedInputStream for PCKS7, which is quite strange already I think? But I can live with it.</p>

<p>The next step is to validate these certificate chains.
1) Check if all certificates have a valid date (easy)
2) Validate certificate chain using OCSP (and fallback to CRL if no OCSP URL is found in the certificate). This is where I'm not completely sure how to handle this.</p>

<p>I'm using the Sun JCE, but it seems there is not that much documentation available (in examples) for this?</p>

<p>I first made a simple implementation that only checks the chain without going through the OCSP/CRL checks.</p>

<pre><code>private Boolean validateChain(List&lt;X509Certificate&gt; certificates) {
    PKIXParameters params;
    CertPath certPath;
    CertPathValidator certPathValidator;
    Boolean valid = Boolean.FALSE;

    params = new PKIXParameters(keyStore);
    params.setRevocationEnabled(false);

    certPath = cf.generateCertPath(certificates);
    certPathValidator = CertPathValidator.getInstance(""PKIX"");

    PKIXCertPathValidatorResult result = (PKIXCertPathValidatorResult)  
    certPathValidator.validate(certPath, params);

      if(null != result) {
        valid = Boolean.TRUE;
      }
    return valid;
 }
</code></pre>

<p>This is working fine for my PEM certificate, but not for the PCKS7 certificate (same certifcate, only exported in other format).
<strong>java.security.cert.CertPathValidatorException: Path does not chain with any of the trust anchors.</strong></p>

<p>The only difference I'm able to see is that the order in which the CertPath is formed is not the same? I was not able to figure out what was going wrong so I left this for now and kept on going with the PEM certificate, but lets call this QUESTION 1 ;)</p>

<p>What I wanted to implement afterwards was the OCSP checking.
Apparently if I enable OCSP using:  <strong>Security.setProperty(""ocsp.enable"", ""true"");</strong> and set    <strong>params.setRevocationEnabled(true);</strong>
it should be able to find the OCSP URL on its own, but that does not seem to be the case. What is the standard implementation supposed to do (QUESTION 2)? 
<strong>java.security.cert.CertPathValidatorException: Must specify the location of an OCSP Responder</strong></p>

<p>Going past this, I found a way to retrieve the OCSP url from the certificate using AuthorityInfoAccessExtension and such.</p>

<p>But after setting the OCSP url manually in the ocsp.url property, I'm getting an <strong>java.security.cert.CertPathValidatorException: OCSP response error: UNAUTHORIZED</strong></p>

<p>It seems like I'm missing a lot of necessary steps while alot of online references say setting the <strong>ocsp.enable</strong> property should be all you need to do? </p>

<p>Perhaps any of you whizkids cant guide me through the process a little bit? Show me where I'm completely wrong :)</p>

<p>The next step would be implementing CRL checks if no OCSP was found, if anyone could point out any example or show me some documentation on this it would also be much appreciated!</p>

<p>Thanks!</p>

<p><strong>EDIT:</strong>
Since it's not picking up the properties on its own, I've been trying to set all the properties myself using the following:</p>

<pre><code>    // Activate OCSP
        Security.setProperty(""ocsp.enable"", ""true"");
        // Activate CRLDP -- no idea what this is
        Security.setProperty(""com.sun.security.enableCRLDP"", ""true"");

        X509Certificate target = (X509Certificate) certPath.getCertificates().get(0);
        Security.setProperty(""ocsp.responderURL"",""http://ocsp.pki.belgium.be/"");
        Security.setProperty(""ocsp.responderCertIssuerName"", target.getIssuerX500Principal().getName());
        Security.setProperty(""ocsp.responderCertSubjectName"", target.getSubjectX500Principal().getName());
        Security.setProperty(""ocsp.responderCertSerialNumber"", target.getSerialNumber().toString(16));
</code></pre>

<p>Which gives an exception:
java.security.cert.CertPathValidatorException: Cannot find the responder's certificate (set using the OCSP security properties).</p>
","<p>For future reference I'll post the answer to my own question (partly atleast)</p>

<p>OCSP and CRL checks are implemented in the standard Java implementation already and there is no need for custom code or other providers (BC, ..). They are disabled by default.</p>

<p>To enable this, you have to atleast set two parameters:</p>

<pre><code>(PKIXParameters or PKIXParameterBuilder) params.setRevocationEnabled(true);
Security.setProperty(""ocsp.enable"", ""true"");
</code></pre>

<p>This will activate OCSP checking when you are trying to validate the certificate path (PKIXCertPathValidatorResult.validate()).</p>

<p>When you want to add the fallback check for CRL if no OCSP is available, add an aditional property:</p>

<pre><code>System.setProperty(""com.sun.security.enableCRLDP"", ""true"");
</code></pre>

<p>A lot of my problems are happening due to the fact that I have to support different certificate formats (PKCS7, PEM). My implementation works fine for PEM, but since PKCS7 does NOT save ordering of the certificates in the chain it is a bit harder (<a href=""http://bugs.sun.com/view_bug.do?bug_id=6238093"" rel=""noreferrer"">http://bugs.sun.com/view_bug.do?bug_id=6238093</a>)</p>

<pre><code>X509CertSelector targetConstraints = new X509CertSelector();

targetConstraints.setCertificate(certificates.get(0));
// Here's the issue for PKCS7 certificates since they are not ordered,
// but I havent figured out how I can see what the target certificate
// (lowest level) is in the incoming certificates..

PKIXBuilderParameters params = new PKIXBuilderParameters(anchors, targetConstraints);   
</code></pre>

<p>Hope this will be useful remarks for other people as well, perhaps someone can shed a light on how to find the target certificate in an unordered PKCS7 list?</p>
","16457","<java><validation><x509certificate><pki><jce>","12","15","1","2014-08-19 19:42:50","10068006","3","11","492723","","2012-04-06 18:04:16","2012-04-06 12:17:34",""
"12330975","Generate certificate chain in java","<p>The question is how to generate certificate chains programmatically in Java. In other words, I would like to perform in java the operations detailed here: <a href=""http://fusesource.com/docs/broker/5.3/security/i382664.html"">http://fusesource.com/docs/broker/5.3/security/i382664.html</a></p>

<p>Besically, I can create the RSA keys for a new client:</p>

<pre><code>private KeyPair genRSAKeyPair(){
    // Get RSA key factory:
    KeyPairGenerator kpg = null;
    try {
        kpg = KeyPairGenerator.getInstance(""RSA"");
    } catch (NoSuchAlgorithmException e) {
        log.error(e.getMessage());
        e.printStackTrace();
        return null;
    }
    // Generate RSA public/private key pair:
    kpg.initialize(RSA_KEY_LEN);
    KeyPair kp = kpg.genKeyPair();
    return kp;
</code></pre>

<p>}</p>

<p>and I generate the corresponding certificate:</p>

<pre><code>private X509Certificate generateCertificate(String dn, KeyPair pair, int days, String algorithm)
  throws GeneralSecurityException, IOException  {
    PrivateKey privkey = pair.getPrivate();
    X509CertInfo info = new X509CertInfo();
    Date from = new Date();
    Date to = new Date(from.getTime() + days * 86400000l);
    CertificateValidity interval = new CertificateValidity(from, to);
    BigInteger sn = new BigInteger(64, new SecureRandom());
    X500Name owner = new X500Name(dn);

    info.set(X509CertInfo.VALIDITY, interval);
    info.set(X509CertInfo.SERIAL_NUMBER, new CertificateSerialNumber(sn));
    info.set(X509CertInfo.SUBJECT, new CertificateSubjectName(owner));
    info.set(X509CertInfo.ISSUER, new CertificateIssuerName(owner));
    info.set(X509CertInfo.KEY, new CertificateX509Key(pair.getPublic()));
    info.set(X509CertInfo.VERSION, new CertificateVersion(CertificateVersion.V3));
    AlgorithmId algo = new AlgorithmId(AlgorithmId.md5WithRSAEncryption_oid);
    info.set(X509CertInfo.ALGORITHM_ID, new CertificateAlgorithmId(algo));

    // Sign the cert to identify the algorithm that's used.
    X509CertImpl cert = new X509CertImpl(info);
    cert.sign(privkey, algorithm);

    // Update the algorith, and resign.
    algo = (AlgorithmId)cert.get(X509CertImpl.SIG_ALG);
    info.set(CertificateAlgorithmId.NAME + ""."" + CertificateAlgorithmId.ALGORITHM, algo);
    cert = new X509CertImpl(info);
    cert.sign(privkey, algorithm);
    return cert;
</code></pre>

<p>}</p>

<p>Then I generate the cert signing request and I save it to csrFile file:</p>

<pre><code>public static void writeCertReq(File csrFile, String alias, String keyPass, KeyStore ks) 
        throws KeyStoreException, 
               NoSuchAlgorithmException, 
               InvalidKeyException, 
               IOException, 
               CertificateException, 
               SignatureException, 
               UnrecoverableKeyException {

    Object objs[] = getPrivateKey(ks, alias, keyPass.toCharArray());
    PrivateKey privKey = (PrivateKey) objs[0];

    PKCS10 request = null;

    Certificate cert = ks.getCertificate(alias);
    request = new PKCS10(cert.getPublicKey());
    String sigAlgName = ""MD5WithRSA"";
    Signature signature = Signature.getInstance(sigAlgName);
    signature.initSign(privKey);
    X500Name subject = new X500Name(((X509Certificate) cert).getSubjectDN().toString());
    X500Signer signer = new X500Signer(signature, subject);
    request.encodeAndSign(signer);
    request.print(System.out);
    FileOutputStream fos = new FileOutputStream(csrFile);
    PrintStream ps = new PrintStream(fos);
    request.print(ps);
    fos.close();
}
</code></pre>

<p>where</p>

<pre><code>private static Object[] getPrivateKey(KeyStore ks, String alias, char keyPass[]) 
        throws UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException {
    key = null;        
    key = ks.getKey(alias, keyPass);
    return (new Object[]{ (PrivateKey) key, keyPass });
}
</code></pre>

<p>Now I should sign the CSR with the CA private key, but I cannot see how to achive that in java. I have ""my own"" CA private key in my jks. </p>

<p>Besides, once I manage to sign the CSR I should chain the CA cert with the signed CSR: how that can be done in java?</p>

<p>I would prefer not to use bc or other external libs, just ""sun.security"" classes.</p>

<p>Thank you.</p>
","<p>Sorry, but despite your desires, and besides writing all of your crypto code and including it with your project (not recommended), I'd recommend using Bouncy Castle here.</p>

<p>Specifically, please refer to <a href=""https://stackoverflow.com/a/7366757/751158"">https://stackoverflow.com/a/7366757/751158</a> - which includes code for exactly what you're looking to do.</p>
","15417","<java><security><rsa><x509certificate><jce>","6","1","3","2014-10-14 10:23:43","12331007","0","4","","","","2012-09-08 13:08:28",""
"12330975","Generate certificate chain in java","<p>The question is how to generate certificate chains programmatically in Java. In other words, I would like to perform in java the operations detailed here: <a href=""http://fusesource.com/docs/broker/5.3/security/i382664.html"">http://fusesource.com/docs/broker/5.3/security/i382664.html</a></p>

<p>Besically, I can create the RSA keys for a new client:</p>

<pre><code>private KeyPair genRSAKeyPair(){
    // Get RSA key factory:
    KeyPairGenerator kpg = null;
    try {
        kpg = KeyPairGenerator.getInstance(""RSA"");
    } catch (NoSuchAlgorithmException e) {
        log.error(e.getMessage());
        e.printStackTrace();
        return null;
    }
    // Generate RSA public/private key pair:
    kpg.initialize(RSA_KEY_LEN);
    KeyPair kp = kpg.genKeyPair();
    return kp;
</code></pre>

<p>}</p>

<p>and I generate the corresponding certificate:</p>

<pre><code>private X509Certificate generateCertificate(String dn, KeyPair pair, int days, String algorithm)
  throws GeneralSecurityException, IOException  {
    PrivateKey privkey = pair.getPrivate();
    X509CertInfo info = new X509CertInfo();
    Date from = new Date();
    Date to = new Date(from.getTime() + days * 86400000l);
    CertificateValidity interval = new CertificateValidity(from, to);
    BigInteger sn = new BigInteger(64, new SecureRandom());
    X500Name owner = new X500Name(dn);

    info.set(X509CertInfo.VALIDITY, interval);
    info.set(X509CertInfo.SERIAL_NUMBER, new CertificateSerialNumber(sn));
    info.set(X509CertInfo.SUBJECT, new CertificateSubjectName(owner));
    info.set(X509CertInfo.ISSUER, new CertificateIssuerName(owner));
    info.set(X509CertInfo.KEY, new CertificateX509Key(pair.getPublic()));
    info.set(X509CertInfo.VERSION, new CertificateVersion(CertificateVersion.V3));
    AlgorithmId algo = new AlgorithmId(AlgorithmId.md5WithRSAEncryption_oid);
    info.set(X509CertInfo.ALGORITHM_ID, new CertificateAlgorithmId(algo));

    // Sign the cert to identify the algorithm that's used.
    X509CertImpl cert = new X509CertImpl(info);
    cert.sign(privkey, algorithm);

    // Update the algorith, and resign.
    algo = (AlgorithmId)cert.get(X509CertImpl.SIG_ALG);
    info.set(CertificateAlgorithmId.NAME + ""."" + CertificateAlgorithmId.ALGORITHM, algo);
    cert = new X509CertImpl(info);
    cert.sign(privkey, algorithm);
    return cert;
</code></pre>

<p>}</p>

<p>Then I generate the cert signing request and I save it to csrFile file:</p>

<pre><code>public static void writeCertReq(File csrFile, String alias, String keyPass, KeyStore ks) 
        throws KeyStoreException, 
               NoSuchAlgorithmException, 
               InvalidKeyException, 
               IOException, 
               CertificateException, 
               SignatureException, 
               UnrecoverableKeyException {

    Object objs[] = getPrivateKey(ks, alias, keyPass.toCharArray());
    PrivateKey privKey = (PrivateKey) objs[0];

    PKCS10 request = null;

    Certificate cert = ks.getCertificate(alias);
    request = new PKCS10(cert.getPublicKey());
    String sigAlgName = ""MD5WithRSA"";
    Signature signature = Signature.getInstance(sigAlgName);
    signature.initSign(privKey);
    X500Name subject = new X500Name(((X509Certificate) cert).getSubjectDN().toString());
    X500Signer signer = new X500Signer(signature, subject);
    request.encodeAndSign(signer);
    request.print(System.out);
    FileOutputStream fos = new FileOutputStream(csrFile);
    PrintStream ps = new PrintStream(fos);
    request.print(ps);
    fos.close();
}
</code></pre>

<p>where</p>

<pre><code>private static Object[] getPrivateKey(KeyStore ks, String alias, char keyPass[]) 
        throws UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException {
    key = null;        
    key = ks.getKey(alias, keyPass);
    return (new Object[]{ (PrivateKey) key, keyPass });
}
</code></pre>

<p>Now I should sign the CSR with the CA private key, but I cannot see how to achive that in java. I have ""my own"" CA private key in my jks. </p>

<p>Besides, once I manage to sign the CSR I should chain the CA cert with the signed CSR: how that can be done in java?</p>

<p>I would prefer not to use bc or other external libs, just ""sun.security"" classes.</p>

<p>Thank you.</p>
","<p>I see you've already gone over to the BouncyCastle side of the house but just in case anyone else was wondering; you can add the cert chain to the entry when putting the key into the KeyStore. For example</p>

<pre><code>// build your certs 

KeyStore keyStore = KeyStore.getInstance(""PKCS12"");
keyStore.load([keystore stream], password.toCharArray());// or null, null if it's a brand new store
X509Certificate[] chain = new X509Certificate[2];
chain[0] = _clientCert;
chain[1] = _caCert;
keyStore.setKeyEntry(""Alias"", _clientCertKey, password.toCharArray(), chain);
keyStore.store([output stream], password.toCharArray());

// do other stuff
</code></pre>
","15417","<java><security><rsa><x509certificate><jce>","6","1","3","2014-10-14 10:23:43","12331007","0","4","","","","2012-09-08 13:08:28",""
"12330975","Generate certificate chain in java","<p>The question is how to generate certificate chains programmatically in Java. In other words, I would like to perform in java the operations detailed here: <a href=""http://fusesource.com/docs/broker/5.3/security/i382664.html"">http://fusesource.com/docs/broker/5.3/security/i382664.html</a></p>

<p>Besically, I can create the RSA keys for a new client:</p>

<pre><code>private KeyPair genRSAKeyPair(){
    // Get RSA key factory:
    KeyPairGenerator kpg = null;
    try {
        kpg = KeyPairGenerator.getInstance(""RSA"");
    } catch (NoSuchAlgorithmException e) {
        log.error(e.getMessage());
        e.printStackTrace();
        return null;
    }
    // Generate RSA public/private key pair:
    kpg.initialize(RSA_KEY_LEN);
    KeyPair kp = kpg.genKeyPair();
    return kp;
</code></pre>

<p>}</p>

<p>and I generate the corresponding certificate:</p>

<pre><code>private X509Certificate generateCertificate(String dn, KeyPair pair, int days, String algorithm)
  throws GeneralSecurityException, IOException  {
    PrivateKey privkey = pair.getPrivate();
    X509CertInfo info = new X509CertInfo();
    Date from = new Date();
    Date to = new Date(from.getTime() + days * 86400000l);
    CertificateValidity interval = new CertificateValidity(from, to);
    BigInteger sn = new BigInteger(64, new SecureRandom());
    X500Name owner = new X500Name(dn);

    info.set(X509CertInfo.VALIDITY, interval);
    info.set(X509CertInfo.SERIAL_NUMBER, new CertificateSerialNumber(sn));
    info.set(X509CertInfo.SUBJECT, new CertificateSubjectName(owner));
    info.set(X509CertInfo.ISSUER, new CertificateIssuerName(owner));
    info.set(X509CertInfo.KEY, new CertificateX509Key(pair.getPublic()));
    info.set(X509CertInfo.VERSION, new CertificateVersion(CertificateVersion.V3));
    AlgorithmId algo = new AlgorithmId(AlgorithmId.md5WithRSAEncryption_oid);
    info.set(X509CertInfo.ALGORITHM_ID, new CertificateAlgorithmId(algo));

    // Sign the cert to identify the algorithm that's used.
    X509CertImpl cert = new X509CertImpl(info);
    cert.sign(privkey, algorithm);

    // Update the algorith, and resign.
    algo = (AlgorithmId)cert.get(X509CertImpl.SIG_ALG);
    info.set(CertificateAlgorithmId.NAME + ""."" + CertificateAlgorithmId.ALGORITHM, algo);
    cert = new X509CertImpl(info);
    cert.sign(privkey, algorithm);
    return cert;
</code></pre>

<p>}</p>

<p>Then I generate the cert signing request and I save it to csrFile file:</p>

<pre><code>public static void writeCertReq(File csrFile, String alias, String keyPass, KeyStore ks) 
        throws KeyStoreException, 
               NoSuchAlgorithmException, 
               InvalidKeyException, 
               IOException, 
               CertificateException, 
               SignatureException, 
               UnrecoverableKeyException {

    Object objs[] = getPrivateKey(ks, alias, keyPass.toCharArray());
    PrivateKey privKey = (PrivateKey) objs[0];

    PKCS10 request = null;

    Certificate cert = ks.getCertificate(alias);
    request = new PKCS10(cert.getPublicKey());
    String sigAlgName = ""MD5WithRSA"";
    Signature signature = Signature.getInstance(sigAlgName);
    signature.initSign(privKey);
    X500Name subject = new X500Name(((X509Certificate) cert).getSubjectDN().toString());
    X500Signer signer = new X500Signer(signature, subject);
    request.encodeAndSign(signer);
    request.print(System.out);
    FileOutputStream fos = new FileOutputStream(csrFile);
    PrintStream ps = new PrintStream(fos);
    request.print(ps);
    fos.close();
}
</code></pre>

<p>where</p>

<pre><code>private static Object[] getPrivateKey(KeyStore ks, String alias, char keyPass[]) 
        throws UnrecoverableKeyException, KeyStoreException, NoSuchAlgorithmException {
    key = null;        
    key = ks.getKey(alias, keyPass);
    return (new Object[]{ (PrivateKey) key, keyPass });
}
</code></pre>

<p>Now I should sign the CSR with the CA private key, but I cannot see how to achive that in java. I have ""my own"" CA private key in my jks. </p>

<p>Besides, once I manage to sign the CSR I should chain the CA cert with the signed CSR: how that can be done in java?</p>

<p>I would prefer not to use bc or other external libs, just ""sun.security"" classes.</p>

<p>Thank you.</p>
","<p>I believe the code example in the post <a href=""http://www.pixelstech.net/article/1406726666-Generate-certificate-in-Java----2"" rel=""noreferrer"">http://www.pixelstech.net/article/1406726666-Generate-certificate-in-Java----2</a> will show you how to generate certificate chain with pure Java. It doesn't require you to use Bouncy Castle.</p>
","15417","<java><security><rsa><x509certificate><jce>","6","7","3","2014-10-14 10:23:43","12331007","0","4","","","","2012-09-08 13:08:28",""
"8171802","Using BouncyCastle for a simple HTTPS query","<p>Here's a simplified version of the code I'm using to perform simple HTTPS requests:</p>

<pre><code>// Assume the variables host, file and postData have valid String values

final URL url = new URL(""https"", host, file);
final HttpURLConnection connection = (HttpURLConnection) url.openConnection();

connection.setRequestMethod(""POST"");
connection.setDoInput(true);
connection.setDoOutput(true);
connection.setRequestProperty(""Content-length"", String.valueOf(postData.length()));

final DataOutputStream output = new DataOutputStream(connection.getOutputStream());
output.writeBytes(postData);
output.close();

final InputStream input = new DataInputStream(connection.getInputStream());

for (int c = input.read(); c != -1; c = input.read()) {
  System.out.print((char) c);
}

System.out.println();

input.close();
</code></pre>

<p>This used to work well for connecting to our server (and still does if I use http as the protocol) until recently when some security upgrades were done.</p>

<p>Now it's giving me the ""Could not generate DH keypair"" and ""Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive)"" errors mentioned in this question:</p>

<p><a href=""https://stackoverflow.com/questions/6851461/java-why-does-ssl-handshake-give-could-not-generate-dh-keypair-exception"">Java: Why does SSL handshake give &#39;Could not generate DH keypair&#39; exception?</a></p>

<p>Turns out it's a known bug in Java and the recommendation is to use BouncyCastle's JCE implementation.</p>

<p>My question is... how do I use BouncyCastle for something like this? Or are there more alternatives?</p>

<p>Disclaimer: I have very little knowledge of and interest in cryptology and the underlying technology that makes HTTPS queries possible. Rather, I'd prefer to focus on my application logic and let various libraries take care of low level issues.</p>

<p>I checked out the BouncyCastle website and documentation and Googled to find out more about JCE etc, but all in all it's quite overwhelming and I haven't been able to find any simple code examples for doing something like the above code.</p>
","<p><a href=""http://www.bouncycastle.org/wiki/display/JA1/Provider+Installation"" rel=""nofollow"">Here</a> is a page on how to register bouncy castle JCE provider. If you choose the second option, make sure the value of <code>N</code> (preference order) is such that it precedes the Sun JCE provider (and accordingly adjust the preference order of the Sun JCE provider registration). </p>
","14996","<java><ssl><https><bouncycastle><jce>","2","1","4","2018-07-12 10:57:03","8181253","0","1","-1","","2017-05-23 10:31:26","2011-11-17 17:44:59",""
"8171802","Using BouncyCastle for a simple HTTPS query","<p>Here's a simplified version of the code I'm using to perform simple HTTPS requests:</p>

<pre><code>// Assume the variables host, file and postData have valid String values

final URL url = new URL(""https"", host, file);
final HttpURLConnection connection = (HttpURLConnection) url.openConnection();

connection.setRequestMethod(""POST"");
connection.setDoInput(true);
connection.setDoOutput(true);
connection.setRequestProperty(""Content-length"", String.valueOf(postData.length()));

final DataOutputStream output = new DataOutputStream(connection.getOutputStream());
output.writeBytes(postData);
output.close();

final InputStream input = new DataInputStream(connection.getInputStream());

for (int c = input.read(); c != -1; c = input.read()) {
  System.out.print((char) c);
}

System.out.println();

input.close();
</code></pre>

<p>This used to work well for connecting to our server (and still does if I use http as the protocol) until recently when some security upgrades were done.</p>

<p>Now it's giving me the ""Could not generate DH keypair"" and ""Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive)"" errors mentioned in this question:</p>

<p><a href=""https://stackoverflow.com/questions/6851461/java-why-does-ssl-handshake-give-could-not-generate-dh-keypair-exception"">Java: Why does SSL handshake give &#39;Could not generate DH keypair&#39; exception?</a></p>

<p>Turns out it's a known bug in Java and the recommendation is to use BouncyCastle's JCE implementation.</p>

<p>My question is... how do I use BouncyCastle for something like this? Or are there more alternatives?</p>

<p>Disclaimer: I have very little knowledge of and interest in cryptology and the underlying technology that makes HTTPS queries possible. Rather, I'd prefer to focus on my application logic and let various libraries take care of low level issues.</p>

<p>I checked out the BouncyCastle website and documentation and Googled to find out more about JCE etc, but all in all it's quite overwhelming and I haven't been able to find any simple code examples for doing something like the above code.</p>
","<p>I found a different solution (although via the link that srkavin posted) that doesn't even require using BouncyCastle:</p>

<p>After downloading ""Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files"" from the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/index.html"" rel=""nofollow"">Java download site</a> and replacing the files in my JRE, the above code started working without any modifications.</p>
","14996","<java><ssl><https><bouncycastle><jce>","2","0","4","2018-07-12 10:57:03","8181253","0","1","-1","","2017-05-23 10:31:26","2011-11-17 17:44:59",""
"8171802","Using BouncyCastle for a simple HTTPS query","<p>Here's a simplified version of the code I'm using to perform simple HTTPS requests:</p>

<pre><code>// Assume the variables host, file and postData have valid String values

final URL url = new URL(""https"", host, file);
final HttpURLConnection connection = (HttpURLConnection) url.openConnection();

connection.setRequestMethod(""POST"");
connection.setDoInput(true);
connection.setDoOutput(true);
connection.setRequestProperty(""Content-length"", String.valueOf(postData.length()));

final DataOutputStream output = new DataOutputStream(connection.getOutputStream());
output.writeBytes(postData);
output.close();

final InputStream input = new DataInputStream(connection.getInputStream());

for (int c = input.read(); c != -1; c = input.read()) {
  System.out.print((char) c);
}

System.out.println();

input.close();
</code></pre>

<p>This used to work well for connecting to our server (and still does if I use http as the protocol) until recently when some security upgrades were done.</p>

<p>Now it's giving me the ""Could not generate DH keypair"" and ""Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive)"" errors mentioned in this question:</p>

<p><a href=""https://stackoverflow.com/questions/6851461/java-why-does-ssl-handshake-give-could-not-generate-dh-keypair-exception"">Java: Why does SSL handshake give &#39;Could not generate DH keypair&#39; exception?</a></p>

<p>Turns out it's a known bug in Java and the recommendation is to use BouncyCastle's JCE implementation.</p>

<p>My question is... how do I use BouncyCastle for something like this? Or are there more alternatives?</p>

<p>Disclaimer: I have very little knowledge of and interest in cryptology and the underlying technology that makes HTTPS queries possible. Rather, I'd prefer to focus on my application logic and let various libraries take care of low level issues.</p>

<p>I checked out the BouncyCastle website and documentation and Googled to find out more about JCE etc, but all in all it's quite overwhelming and I haven't been able to find any simple code examples for doing something like the above code.</p>
","<p>The following sample code uses jdk1.6.0_45 and bcprov-jdk15on-153.jar to perform simple https query:</p>

<pre><code>import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.Socket;

import org.bouncycastle.crypto.tls.CertificateRequest;
import org.bouncycastle.crypto.tls.DefaultTlsClient;
import org.bouncycastle.crypto.tls.TlsAuthentication;
import org.bouncycastle.crypto.tls.TlsClientProtocol;
import org.bouncycastle.crypto.tls.TlsCredentials;

public class TestHttpClient {
    // Reference: http://boredwookie.net/index.php/blog/how-to-use-bouncy-castle-lightweight-api-s-tlsclient/
    //            bcprov-jdk15on-153.tar\src\org\bouncycastle\crypto\tls\test\TlsClientTest.java
    public static void main(String[] args) throws Exception {
        java.security.SecureRandom secureRandom = new java.security.SecureRandom();
        Socket socket = new Socket(java.net.InetAddress.getByName(""www.google.com""), 443);
        TlsClientProtocol protocol = new TlsClientProtocol(socket.getInputStream(), socket.getOutputStream(),secureRandom);
        DefaultTlsClient client = new DefaultTlsClient() {
            public TlsAuthentication getAuthentication() throws IOException {
                TlsAuthentication auth = new TlsAuthentication() {
                    // Capture the server certificate information!
                    public void notifyServerCertificate(org.bouncycastle.crypto.tls.Certificate serverCertificate) throws IOException {
                    }

                    public TlsCredentials getClientCredentials(CertificateRequest certificateRequest) throws IOException {
                        return null;
                    }
                };
                return auth;
            }
        };
        protocol.connect(client);

        java.io.OutputStream output = protocol.getOutputStream();
        output.write(""GET / HTTP/1.1\r\n"".getBytes(""UTF-8""));
        output.write(""Host: www.google.com\r\n"".getBytes(""UTF-8""));
        output.write(""Connection: close\r\n"".getBytes(""UTF-8"")); // So the server will close socket immediately.
        output.write(""\r\n"".getBytes(""UTF-8"")); // HTTP1.1 requirement: last line must be empty line.
        output.flush();

        java.io.InputStream input = protocol.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(input));
        String line;
        while ((line = reader.readLine()) != null)
        {
            System.out.println(line);
        }
    }
}
</code></pre>
","14996","<java><ssl><https><bouncycastle><jce>","2","4","4","2018-07-12 10:57:03","8181253","0","1","-1","","2017-05-23 10:31:26","2011-11-17 17:44:59",""
"8171802","Using BouncyCastle for a simple HTTPS query","<p>Here's a simplified version of the code I'm using to perform simple HTTPS requests:</p>

<pre><code>// Assume the variables host, file and postData have valid String values

final URL url = new URL(""https"", host, file);
final HttpURLConnection connection = (HttpURLConnection) url.openConnection();

connection.setRequestMethod(""POST"");
connection.setDoInput(true);
connection.setDoOutput(true);
connection.setRequestProperty(""Content-length"", String.valueOf(postData.length()));

final DataOutputStream output = new DataOutputStream(connection.getOutputStream());
output.writeBytes(postData);
output.close();

final InputStream input = new DataInputStream(connection.getInputStream());

for (int c = input.read(); c != -1; c = input.read()) {
  System.out.print((char) c);
}

System.out.println();

input.close();
</code></pre>

<p>This used to work well for connecting to our server (and still does if I use http as the protocol) until recently when some security upgrades were done.</p>

<p>Now it's giving me the ""Could not generate DH keypair"" and ""Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive)"" errors mentioned in this question:</p>

<p><a href=""https://stackoverflow.com/questions/6851461/java-why-does-ssl-handshake-give-could-not-generate-dh-keypair-exception"">Java: Why does SSL handshake give &#39;Could not generate DH keypair&#39; exception?</a></p>

<p>Turns out it's a known bug in Java and the recommendation is to use BouncyCastle's JCE implementation.</p>

<p>My question is... how do I use BouncyCastle for something like this? Or are there more alternatives?</p>

<p>Disclaimer: I have very little knowledge of and interest in cryptology and the underlying technology that makes HTTPS queries possible. Rather, I'd prefer to focus on my application logic and let various libraries take care of low level issues.</p>

<p>I checked out the BouncyCastle website and documentation and Googled to find out more about JCE etc, but all in all it's quite overwhelming and I haven't been able to find any simple code examples for doing something like the above code.</p>
","<p>I have the same problem and resolve including this lines</p>

<pre><code>Security.addProvider(new BouncyCastleProvider());
System.setProperty(""https.protocols"", ""TLSv1"");
</code></pre>
","14996","<java><ssl><https><bouncycastle><jce>","2","0","4","2018-07-12 10:57:03","8181253","0","1","-1","","2017-05-23 10:31:26","2011-11-17 17:44:59",""
"31971499","ECDHE cipher suites not supported on OpenJDK 8 installed on EC2 Linux machine","<p>When starting <code>jetty-distribution-9.3.0.v20150612</code> with <code>openjdk 1.8.0_51</code> running on an EC2 Amazon Linux machine, is prints that all configured ECDHE suites are not supported. </p>

<pre><code>2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA not supported
</code></pre>

<p>These are enabled in <code>jetty/etc/jetty-ssl-context.xml</code> -</p>

<pre><code>&lt;Set name=""IncludeCipherSuites""&gt;
&lt;Array type=""java.lang.String""&gt;
 &lt;!-- TLS 1.2 AEAD only (all are SHA-2 as well) --&gt;
  &lt;Item&gt;TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256&lt;/Item&gt;
  &lt;Item&gt;TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256&lt;/Item&gt;
  &lt;Item&gt;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;/Item&gt;
  &lt;Item&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/Item&gt;
  &lt;Item&gt;TLS_DHE_RSA_WITH_AES_256_GCM_SHA384&lt;/Item&gt;
  &lt;Item&gt;TLS_DHE_RSA_WITH_AES_128_GCM_SHA256&lt;/Item&gt;
...
</code></pre>

<p>I read Oracle Java 8 <a href=""http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SunJSSEProvider"" rel=""noreferrer"">should support these protocols</a>, but maybe that's not supported by OpenJDK? Or should I enable it somehow?</p>

<p><strong>Update</strong></p>

<p>Oracle's JCE cryptographic provider is installed under <code>jre/lib/security/</code>, but it didn't help. </p>
","<p>Try installing the <a href=""http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#importlimits"" rel=""nofollow"">JCE Unlimited Strength Jurisdiction Policy Files</a> (these should help with your higher bit ciphers)</p>

<p>Also note, in <a href=""http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SunJSSEProvider"" rel=""nofollow"">the link you provided about java 8 cipher protocol support</a> says </p>

<blockquote>
  <p>Cipher suites that use Elliptic Curve Cryptography (ECDSA, ECDH, ECDHE, ECDH_anon) require a JCE cryptographic provider ...</p>
</blockquote>

<p>Did you install such a provider on your Java 8 VM?</p>
","14656","<jetty><java-8><openjdk><jce><jetty-9>","15","1","4","2018-03-09 00:41:46","33521718","1","7","995229","","2015-08-13 05:25:16","2015-08-12 17:12:16",""
"31971499","ECDHE cipher suites not supported on OpenJDK 8 installed on EC2 Linux machine","<p>When starting <code>jetty-distribution-9.3.0.v20150612</code> with <code>openjdk 1.8.0_51</code> running on an EC2 Amazon Linux machine, is prints that all configured ECDHE suites are not supported. </p>

<pre><code>2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA not supported
</code></pre>

<p>These are enabled in <code>jetty/etc/jetty-ssl-context.xml</code> -</p>

<pre><code>&lt;Set name=""IncludeCipherSuites""&gt;
&lt;Array type=""java.lang.String""&gt;
 &lt;!-- TLS 1.2 AEAD only (all are SHA-2 as well) --&gt;
  &lt;Item&gt;TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256&lt;/Item&gt;
  &lt;Item&gt;TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256&lt;/Item&gt;
  &lt;Item&gt;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;/Item&gt;
  &lt;Item&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/Item&gt;
  &lt;Item&gt;TLS_DHE_RSA_WITH_AES_256_GCM_SHA384&lt;/Item&gt;
  &lt;Item&gt;TLS_DHE_RSA_WITH_AES_128_GCM_SHA256&lt;/Item&gt;
...
</code></pre>

<p>I read Oracle Java 8 <a href=""http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SunJSSEProvider"" rel=""noreferrer"">should support these protocols</a>, but maybe that's not supported by OpenJDK? Or should I enable it somehow?</p>

<p><strong>Update</strong></p>

<p>Oracle's JCE cryptographic provider is installed under <code>jre/lib/security/</code>, but it didn't help. </p>
","<p>So I'm running a similar setup, with an AWS box running openjdk-1.8.0.51.
what solved it for me is to add bouncycastle as a provider like so:</p>

<ul>
<li><p>Add the <code>bcprov-&lt;verion&gt;.jar</code> to <code>/usr/lib/jvm/jre/lib/ext</code></p></li>
<li><p>Edit <code>/usr/lib/jvm/jre/lib/security/java.security</code> adding the following line to the list of providers: </p>

<pre><code>security.provider.6=org.bouncycastle.jce.provider.BouncyCastleProvider
</code></pre></li>
</ul>

<p>(I added it as the 6th entry but you can add higher in the order if you prefer)</p>

<p>Restarted my application and was able to use EC-based cipher suites such as <code>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</code>.</p>
","14656","<jetty><java-8><openjdk><jce><jetty-9>","15","16","4","2018-03-09 00:41:46","33521718","1","7","995229","","2015-08-13 05:25:16","2015-08-12 17:12:16",""
"31971499","ECDHE cipher suites not supported on OpenJDK 8 installed on EC2 Linux machine","<p>When starting <code>jetty-distribution-9.3.0.v20150612</code> with <code>openjdk 1.8.0_51</code> running on an EC2 Amazon Linux machine, is prints that all configured ECDHE suites are not supported. </p>

<pre><code>2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA not supported
</code></pre>

<p>These are enabled in <code>jetty/etc/jetty-ssl-context.xml</code> -</p>

<pre><code>&lt;Set name=""IncludeCipherSuites""&gt;
&lt;Array type=""java.lang.String""&gt;
 &lt;!-- TLS 1.2 AEAD only (all are SHA-2 as well) --&gt;
  &lt;Item&gt;TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256&lt;/Item&gt;
  &lt;Item&gt;TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256&lt;/Item&gt;
  &lt;Item&gt;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;/Item&gt;
  &lt;Item&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/Item&gt;
  &lt;Item&gt;TLS_DHE_RSA_WITH_AES_256_GCM_SHA384&lt;/Item&gt;
  &lt;Item&gt;TLS_DHE_RSA_WITH_AES_128_GCM_SHA256&lt;/Item&gt;
...
</code></pre>

<p>I read Oracle Java 8 <a href=""http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SunJSSEProvider"" rel=""noreferrer"">should support these protocols</a>, but maybe that's not supported by OpenJDK? Or should I enable it somehow?</p>

<p><strong>Update</strong></p>

<p>Oracle's JCE cryptographic provider is installed under <code>jre/lib/security/</code>, but it didn't help. </p>
","<pre><code>2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA not supported
</code></pre>

<p>Thes-e are enabled in jetty/etc/jetty-ssl-context.xm</p>
","14656","<jetty><java-8><openjdk><jce><jetty-9>","15","-1","4","2018-03-09 00:41:46","33521718","1","7","995229","","2015-08-13 05:25:16","2015-08-12 17:12:16",""
"31971499","ECDHE cipher suites not supported on OpenJDK 8 installed on EC2 Linux machine","<p>When starting <code>jetty-distribution-9.3.0.v20150612</code> with <code>openjdk 1.8.0_51</code> running on an EC2 Amazon Linux machine, is prints that all configured ECDHE suites are not supported. </p>

<pre><code>2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA not supported
2015-08-12 16:51:20 main SslContextFactory [INFO] Cipher TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA not supported
</code></pre>

<p>These are enabled in <code>jetty/etc/jetty-ssl-context.xml</code> -</p>

<pre><code>&lt;Set name=""IncludeCipherSuites""&gt;
&lt;Array type=""java.lang.String""&gt;
 &lt;!-- TLS 1.2 AEAD only (all are SHA-2 as well) --&gt;
  &lt;Item&gt;TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256&lt;/Item&gt;
  &lt;Item&gt;TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256&lt;/Item&gt;
  &lt;Item&gt;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384&lt;/Item&gt;
  &lt;Item&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/Item&gt;
  &lt;Item&gt;TLS_DHE_RSA_WITH_AES_256_GCM_SHA384&lt;/Item&gt;
  &lt;Item&gt;TLS_DHE_RSA_WITH_AES_128_GCM_SHA256&lt;/Item&gt;
...
</code></pre>

<p>I read Oracle Java 8 <a href=""http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SunJSSEProvider"" rel=""noreferrer"">should support these protocols</a>, but maybe that's not supported by OpenJDK? Or should I enable it somehow?</p>

<p><strong>Update</strong></p>

<p>Oracle's JCE cryptographic provider is installed under <code>jre/lib/security/</code>, but it didn't help. </p>
","<p>The root cause is that OpenJDK on CentOS/RHEL/Amazon Linux with OpenJDK on them simply do not ship with the required native libraries to support EC. The <em>Unlimited Policy Files</em> are a red herring, as are any attempts to <em>un</em>-disable various algorithms, etc. If the libraries aren't there, you can't use the features.</p>

<p>The accepted answer of ""install Bouncy Castle"" works because BC provides a pure-Java implementation of all the desired algorithms. Ideally, the JDK would provide native implementations which would yield higher performance.</p>

<p>It looks like OpenJDK on Amazon Linux will just have to wait. :(</p>

<p>Ref: <a href=""http://armoredbarista.blogspot.de/2013/10/how-to-use-ecc-with-openjdk.html"" rel=""nofollow noreferrer"">http://armoredbarista.blogspot.de/2013/10/how-to-use-ecc-with-openjdk.html</a></p>

<p>Also: <a href=""https://security.stackexchange.com/questions/117975/how-to-enable-ecdhe-in-openjdk-1-8-0-in-centos-6-7"">https://security.stackexchange.com/questions/117975/how-to-enable-ecdhe-in-openjdk-1-8-0-in-centos-6-7</a></p>

<p><strong>UPDATE 2016-11-09</strong></p>

<p>It seems that Oracle's Elliptic curve native library (<code>libsunec.so</code>) is licensed under the GPL. You can confirm this by going to <a href=""http://www.oracle.com/technetwork/java/javase/downloads/index.html"" rel=""nofollow noreferrer"">Oracle's download page</a>, clicking on <a href=""http://www.oracle.com/technetwork/java/javase/terms/thirdpartyreadme/java-license-366168.html"" rel=""nofollow noreferrer"">Third Party Licenses</a>, and checking the README for your version of Java.</p>

<p>This means that, if you can grab a copy of Oracle's JRE/JDK for the target platform and architecture, you can take the <code>libsunec.so</code> library from it and install it legally into the OpenJDK installation.</p>

<p>For me, that meant grabbing the file <code>$JAVA_HOME/jre/lib/amd64/libsunec.so</code> from an Oracle Java 8 JRE and dropping it into e.g. <code>/usr/lib/jvm/jre-1.8.0/lib/amd64/</code>. That is all that is required in order to enable Elliptic-Curve algorithms.</p>

<p><strong>UPDATE 2018-03-08</strong></p>

<p>Oracle Java 9 will include the ""unlimited strength cryptography"" libraries <a href=""http://www.oracle.com/technetwork/java/javase/terms/readme/jdk9-readme-3852447.html#jce"" rel=""nofollow noreferrer""><em>enabled by default</em></a>, so that's nice. It looks like OpenJDK will still require you to <a href=""http://mail.openjdk.java.net/pipermail/security-dev/2016-October/014943.html"" rel=""nofollow noreferrer"">set a system property to enable ""unlimited strength cryptography""</a>.</p>
","14656","<jetty><java-8><openjdk><jce><jetty-9>","15","8","4","2018-03-09 00:41:46","33521718","1","7","995229","","2015-08-13 05:25:16","2015-08-12 17:12:16",""
"18589761","Restrict cipher suites on JRE level","<p>Our Java application exposes a lot of different interfaces (SMTP, FTP, HTTP), secured by SSL/TLS. The goal now is to limit cipher suites allowed on these interfaces to include only ""strong"" ones. I already have a list and it's clear how to make it working for a particular socket</p>

<pre><code>socket.setEnabledCipherSuites(ENABLED_SECURE_CIPHER_SUITES);
</code></pre>

<p>or for Tomcat connector</p>

<pre><code> &lt;Connector port=""443"" ciphers=""...""/&gt;
</code></pre>

<p>The problem is that there are already 5 places in the application where I should apply this limitation manualy. Common SocketFactory does not seem to help, as it's not always feasible to supply custom SocketFactory to third-party API or framework. Is it possible to somehow introduce this limitation on JRE level, e.g. with JCE providers configuration or policy file?   </p>

<p>JRE: Oracle JRE 1.7.0_17 </p>
","<p>Well, I managed to get that working. Thanks to EJP for pointing in the right direction.
Since Java 1.7 there are two additional properties in $JRE_HOME/lib/security/java.security:</p>

<pre><code>jdk.certpath.disabledAlgorithms=MD2
</code></pre>

<p>Controls algorithms for certification path building and validation.</p>

<pre><code>jdk.tls.disabledAlgorithms=MD5, SHA1, RC4, RSA keySize &lt; 1024
</code></pre>

<p>JVM-wide algorithm restrictions for SSL/TLS processing, the one I was looking for. Notation is quite obvious here; it's possible to disallow certain algorithms or limit key sizes. Both properties are supported in Oracle JRE 7, Open JRE 7 and (surprisingly) <a href=""http://pic.dhe.ibm.com/infocenter/java7sdk/v7r0/index.jsp?topic=/com.ibm.java.security.component.doc/security-component/jsse2Docs/disabledalgorithms.html"" rel=""noreferrer"">IBM Java v7</a></p>
","14230","<java><jce>","9","10","1","2017-08-14 16:02:10","18622450","3","1","1033581","","2017-08-14 16:02:10","2013-09-03 10:20:02",""
"3425766","How would I use Maven to install the JCE Unlimited Strength Policy files?","<p>Some code I have requires the JCE unlimited Strength Policy Files.  I'd like to add this dependency into the Maven Pom file so the other developers on my team don't have to individually each apply this to their systems.</p>

<p>I realize that the systems this is eventually deployed to will need to have the JCE files manually installed. This is a development solution only.</p>

<p>I was thinking that we would add the policy files to our repository and maven would be able to handle installation, but I am surprised that I can't find anyone else doing this (and blogging about it.).</p>
","<p>You could maybe try this:</p>

<ul>
<li>Bundle (<code>zip</code>?) the JCE unlimited strength policy files. </li>
<li>Install them to your corporate repository as a <code>zip</code> dependency.</li>
<li>Use the <a href=""http://maven.apache.org/plugins/maven-dependency-plugin/unpack-mojo.html"" rel=""noreferrer""><code>dependency:unpack</code></a> goal to unpack the created dependency to <code>${java.home}/jre/lib/security</code> as part of your build, e.g. during <code>initialize</code> (see <a href=""http://maven.apache.org/plugins/maven-dependency-plugin/examples/unpacking-artifacts.html"" rel=""noreferrer"">Unpacking specific artifacts</a>).</li>
</ul>
","14111","<java><maven-2><jce>","21","6","3","2018-04-19 12:56:37","3430772","0","7","70604","","2010-08-07 13:48:13","2010-08-06 16:29:08",""
"3425766","How would I use Maven to install the JCE Unlimited Strength Policy files?","<p>Some code I have requires the JCE unlimited Strength Policy Files.  I'd like to add this dependency into the Maven Pom file so the other developers on my team don't have to individually each apply this to their systems.</p>

<p>I realize that the systems this is eventually deployed to will need to have the JCE files manually installed. This is a development solution only.</p>

<p>I was thinking that we would add the policy files to our repository and maven would be able to handle installation, but I am surprised that I can't find anyone else doing this (and blogging about it.).</p>
","<p>I've found that answer, when googling for Maven dependencies for policy JARs and realized that it's JRE installation specific, thus fixing this as part of Maven build will work only for developers and only when you have rights to /jre/lib/security folder. For me the following code hack works much better (invoke this as one of the very first things your application does):</p>

<pre><code>    try {
        Field field = Class.forName(""javax.crypto.JceSecurity"").getDeclaredField(""isRestricted"");
        field.setAccessible(true);
        field.set(null, java.lang.Boolean.FALSE);
    } catch (ClassNotFoundException | NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException ex) {
        ex.printStackTrace(System.err);
    }
</code></pre>
","14111","<java><maven-2><jce>","21","15","3","2018-04-19 12:56:37","3430772","0","7","70604","","2010-08-07 13:48:13","2010-08-06 16:29:08",""
"3425766","How would I use Maven to install the JCE Unlimited Strength Policy files?","<p>Some code I have requires the JCE unlimited Strength Policy Files.  I'd like to add this dependency into the Maven Pom file so the other developers on my team don't have to individually each apply this to their systems.</p>

<p>I realize that the systems this is eventually deployed to will need to have the JCE files manually installed. This is a development solution only.</p>

<p>I was thinking that we would add the policy files to our repository and maven would be able to handle installation, but I am surprised that I can't find anyone else doing this (and blogging about it.).</p>
","<p>Java 8 security hack</p>

<pre><code>    // hack for JCE Unlimited Strength
    Field field = Class.forName(""javax.crypto.JceSecurity"").getDeclaredField(""isRestricted"");
    field.setAccessible(true);

    Field modifiersField = Field.class.getDeclaredField(""modifiers"");
    modifiersField.setAccessible(true);
    modifiersField.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);

    field.set(null, false);
</code></pre>
","14111","<java><maven-2><jce>","21","11","3","2018-04-19 12:56:37","3430772","0","7","70604","","2010-08-07 13:48:13","2010-08-06 16:29:08",""
"4869904","What's wrong with IBM's JCE provider?","<p>I have a JCE test that works fine with all Sun JDKs I have tried, but fails with various IBM J9 JDKs (e.g. 1.6.0 build pwi3260sr8-20100409_01(SR8)). The exception below happens when the cipher is initialized in encrypt mode. Why can the IBM JCE not use its own private key? Am I missing something in my code?</p>

<pre><code>  public void testBasicKeyGeneration() throws NoSuchAlgorithmException, 
      NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, 
      BadPaddingException, NoSuchProviderException, SignatureException {
      KeyPairGenerator generator = KeyPairGenerator.getInstance( ""RSA"" );
      generator.initialize( 2048 );
      KeyPair pair = generator.generateKeyPair();

      String data1 = ""123456789012345678901234567890123456789012345678901234567890"";
      Cipher cipher = Cipher.getInstance( ""RSA"" );
      cipher.init( Cipher.ENCRYPT_MODE, pair.getPrivate() );
      byte[] encrypted = cipher.doFinal( data1.getBytes() );

      cipher.init( Cipher.DECRYPT_MODE, pair.getPublic() );
      byte[] decrypted = cipher.doFinal( encrypted );
      String data2 = new String( decrypted );
      assertEquals( ""en/decryption failed"", data1, data2 );
  }
</code></pre>

<p>Here is the stack trace:</p>

<pre><code>java.security.InvalidKeyException: Private key cannot be used to encrypt.
at com.ibm.crypto.provider.RSA.engineInit(Unknown Source)
at javax.crypto.Cipher.a(Unknown Source)
at javax.crypto.Cipher.a(Unknown Source)
at javax.crypto.Cipher.init(Unknown Source)
at javax.crypto.Cipher.init(Unknown Source)
at test.Test.testBasicKeyGeneration(LicenseHelperTest.java:56)
</code></pre>
","<p>@T.Rob commented that you may have made a mistake in encrypting with the private key.  If ""everyone"" knows the public key, then anyone can decrypt your file.  IBM's JCE behaviour is thus protecting people against this mistake.</p>

<p>I can see the logic of that. </p>

<p>However, there may be cases where you really do need to encrypt with the private key; e.g. as part of a protocol that needs to prove that you know the private key corresponding to a published public key.</p>

<p>If this is really what you want to do, you probably need to use a recent Sun JCE implementation (older Sun JCEs didn't implement RSA), or Bouncy Castle.</p>
","11774","<java><jce>","5","2","6","2014-08-12 12:53:51","4877808","3","7","","","","2011-02-02 01:29:08",""
"4869904","What's wrong with IBM's JCE provider?","<p>I have a JCE test that works fine with all Sun JDKs I have tried, but fails with various IBM J9 JDKs (e.g. 1.6.0 build pwi3260sr8-20100409_01(SR8)). The exception below happens when the cipher is initialized in encrypt mode. Why can the IBM JCE not use its own private key? Am I missing something in my code?</p>

<pre><code>  public void testBasicKeyGeneration() throws NoSuchAlgorithmException, 
      NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, 
      BadPaddingException, NoSuchProviderException, SignatureException {
      KeyPairGenerator generator = KeyPairGenerator.getInstance( ""RSA"" );
      generator.initialize( 2048 );
      KeyPair pair = generator.generateKeyPair();

      String data1 = ""123456789012345678901234567890123456789012345678901234567890"";
      Cipher cipher = Cipher.getInstance( ""RSA"" );
      cipher.init( Cipher.ENCRYPT_MODE, pair.getPrivate() );
      byte[] encrypted = cipher.doFinal( data1.getBytes() );

      cipher.init( Cipher.DECRYPT_MODE, pair.getPublic() );
      byte[] decrypted = cipher.doFinal( encrypted );
      String data2 = new String( decrypted );
      assertEquals( ""en/decryption failed"", data1, data2 );
  }
</code></pre>

<p>Here is the stack trace:</p>

<pre><code>java.security.InvalidKeyException: Private key cannot be used to encrypt.
at com.ibm.crypto.provider.RSA.engineInit(Unknown Source)
at javax.crypto.Cipher.a(Unknown Source)
at javax.crypto.Cipher.a(Unknown Source)
at javax.crypto.Cipher.init(Unknown Source)
at javax.crypto.Cipher.init(Unknown Source)
at test.Test.testBasicKeyGeneration(LicenseHelperTest.java:56)
</code></pre>
","<p>I don't know this for sure but I believe that the JCE has an embedded policy limiting encryption to the public key and decryption to the private key.  </p>

<p>In the example code the encryption was done with the private key.  This would require the public key to decrypt, meaning that anyone with the public key could access the encoded data.  Although this has it's uses it is not the accepted pattern and the IBM implementation may be ""protecting"" you from accidentally creating encrypted data that was publicly readable.</p>

<p>The fact that it tested properly when these were reversed tends to confirm my suspicions but I haven't yet found an official document stating as much.</p>
","11774","<java><jce>","5","5","6","2014-08-12 12:53:51","4877808","3","7","","","","2011-02-02 01:29:08",""
"4869904","What's wrong with IBM's JCE provider?","<p>I have a JCE test that works fine with all Sun JDKs I have tried, but fails with various IBM J9 JDKs (e.g. 1.6.0 build pwi3260sr8-20100409_01(SR8)). The exception below happens when the cipher is initialized in encrypt mode. Why can the IBM JCE not use its own private key? Am I missing something in my code?</p>

<pre><code>  public void testBasicKeyGeneration() throws NoSuchAlgorithmException, 
      NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, 
      BadPaddingException, NoSuchProviderException, SignatureException {
      KeyPairGenerator generator = KeyPairGenerator.getInstance( ""RSA"" );
      generator.initialize( 2048 );
      KeyPair pair = generator.generateKeyPair();

      String data1 = ""123456789012345678901234567890123456789012345678901234567890"";
      Cipher cipher = Cipher.getInstance( ""RSA"" );
      cipher.init( Cipher.ENCRYPT_MODE, pair.getPrivate() );
      byte[] encrypted = cipher.doFinal( data1.getBytes() );

      cipher.init( Cipher.DECRYPT_MODE, pair.getPublic() );
      byte[] decrypted = cipher.doFinal( encrypted );
      String data2 = new String( decrypted );
      assertEquals( ""en/decryption failed"", data1, data2 );
  }
</code></pre>

<p>Here is the stack trace:</p>

<pre><code>java.security.InvalidKeyException: Private key cannot be used to encrypt.
at com.ibm.crypto.provider.RSA.engineInit(Unknown Source)
at javax.crypto.Cipher.a(Unknown Source)
at javax.crypto.Cipher.a(Unknown Source)
at javax.crypto.Cipher.init(Unknown Source)
at javax.crypto.Cipher.init(Unknown Source)
at test.Test.testBasicKeyGeneration(LicenseHelperTest.java:56)
</code></pre>
","<p>IBM insists private keys cannot be used for encryption and public keys cannot be used for decryption, so they either see this artificial restriction as a feature, or someone is seriously confused here.</p>

<p>Here is how I worked around this problem:</p>

<pre><code>RSAPrivateCrtKey privateKey = (RSAPrivateCrtKey) ks.getKey(keyAlias, ksPassword.trim().toCharArray());
RSAPublicKeySpec spec = new RSAPublicKeySpec(privateKey.getModulus(),privateKey.getPrivateExponent());
Key fakePublicKey = KeyFactory.getInstance(""RSA"").generatePublic(spec);
encryptCipher.init(Cipher.ENCRYPT_MODE, fakePublicKey);
</code></pre>

<p>Essentially, I created a public key object with private key's crypto material. You will need to do the reverse, create a private key object with public key's crypto material, to decrypt with public key if you want to avoid the ""Public key cannot be used to decrypt"" exception. </p>
","11774","<java><jce>","5","3","6","2014-08-12 12:53:51","4877808","3","7","","","","2011-02-02 01:29:08",""
"4869904","What's wrong with IBM's JCE provider?","<p>I have a JCE test that works fine with all Sun JDKs I have tried, but fails with various IBM J9 JDKs (e.g. 1.6.0 build pwi3260sr8-20100409_01(SR8)). The exception below happens when the cipher is initialized in encrypt mode. Why can the IBM JCE not use its own private key? Am I missing something in my code?</p>

<pre><code>  public void testBasicKeyGeneration() throws NoSuchAlgorithmException, 
      NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, 
      BadPaddingException, NoSuchProviderException, SignatureException {
      KeyPairGenerator generator = KeyPairGenerator.getInstance( ""RSA"" );
      generator.initialize( 2048 );
      KeyPair pair = generator.generateKeyPair();

      String data1 = ""123456789012345678901234567890123456789012345678901234567890"";
      Cipher cipher = Cipher.getInstance( ""RSA"" );
      cipher.init( Cipher.ENCRYPT_MODE, pair.getPrivate() );
      byte[] encrypted = cipher.doFinal( data1.getBytes() );

      cipher.init( Cipher.DECRYPT_MODE, pair.getPublic() );
      byte[] decrypted = cipher.doFinal( encrypted );
      String data2 = new String( decrypted );
      assertEquals( ""en/decryption failed"", data1, data2 );
  }
</code></pre>

<p>Here is the stack trace:</p>

<pre><code>java.security.InvalidKeyException: Private key cannot be used to encrypt.
at com.ibm.crypto.provider.RSA.engineInit(Unknown Source)
at javax.crypto.Cipher.a(Unknown Source)
at javax.crypto.Cipher.a(Unknown Source)
at javax.crypto.Cipher.init(Unknown Source)
at javax.crypto.Cipher.init(Unknown Source)
at test.Test.testBasicKeyGeneration(LicenseHelperTest.java:56)
</code></pre>
","<p>@Stephen C / @FelixM: IBM seems to be completely clueless about how RSA cryptography works and how it is intended to be used. Basically both operations (encrypt / decrypt) must be available for the public AND private key.</p>

<p>Encrypt with public key is needed to transmit the client-side part of the pre master secret in SSL/TLS handshakes. The server needs to decrypt with its private key. But if they negotiate something like ECDHE_RSA the server needs to SIGN parts of the handshake with the private key - thats encrypt with PrivateKey. Vice versa the client needs to decrypt with the public key from the certificate of the server to verify the hash value of the signature. (proving authenticity of the message)</p>

<p>So if I try to run ECDHE_RSA (server-side) on latest IBM JDK 7 the following happens:</p>

<pre><code>java.security.InvalidKeyException: Private key cannot be used to encrypt.
   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:614)
   at java.lang.Thread.run(Thread.java:777)
   at com.ibm.crypto.provider.RSASSL.engineInit(Unknown Source)
   at javax.crypto.Cipher.init(Unknown Source)
   at javax.crypto.Cipher.init(Unknown Source)
   at java.security.Signature$CipherAdapter.engineInitSign(Signature.java:1239)
   at java.security.Signature$Delegate.init(Signature.java:1116)
   at java.security.Signature$Delegate.chooseProvider(Signature.java:1076)
   at java.security.Signature$Delegate.engineInitSign(Signature.java:1140)
   at java.security.Signature.initSign(Signature.java:522)
   at net.vx4.lib.tls.core.TLSSignature.createSignature(TLSSignature.java:120)
</code></pre>

<p>As you can see we're using ""Signature"" and call ""initSign"", which requires indeed a PrivateKey. This proves IBM being clueless about this fact and obviously they don't even
have valid regression tests!</p>

<p>Use another crypto provider and don't believe IBM until they change their mind.</p>

<p>Best regards,
Christian</p>
","11774","<java><jce>","5","2","6","2014-08-12 12:53:51","4877808","3","7","","","","2011-02-02 01:29:08",""
"4869904","What's wrong with IBM's JCE provider?","<p>I have a JCE test that works fine with all Sun JDKs I have tried, but fails with various IBM J9 JDKs (e.g. 1.6.0 build pwi3260sr8-20100409_01(SR8)). The exception below happens when the cipher is initialized in encrypt mode. Why can the IBM JCE not use its own private key? Am I missing something in my code?</p>

<pre><code>  public void testBasicKeyGeneration() throws NoSuchAlgorithmException, 
      NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, 
      BadPaddingException, NoSuchProviderException, SignatureException {
      KeyPairGenerator generator = KeyPairGenerator.getInstance( ""RSA"" );
      generator.initialize( 2048 );
      KeyPair pair = generator.generateKeyPair();

      String data1 = ""123456789012345678901234567890123456789012345678901234567890"";
      Cipher cipher = Cipher.getInstance( ""RSA"" );
      cipher.init( Cipher.ENCRYPT_MODE, pair.getPrivate() );
      byte[] encrypted = cipher.doFinal( data1.getBytes() );

      cipher.init( Cipher.DECRYPT_MODE, pair.getPublic() );
      byte[] decrypted = cipher.doFinal( encrypted );
      String data2 = new String( decrypted );
      assertEquals( ""en/decryption failed"", data1, data2 );
  }
</code></pre>

<p>Here is the stack trace:</p>

<pre><code>java.security.InvalidKeyException: Private key cannot be used to encrypt.
at com.ibm.crypto.provider.RSA.engineInit(Unknown Source)
at javax.crypto.Cipher.a(Unknown Source)
at javax.crypto.Cipher.a(Unknown Source)
at javax.crypto.Cipher.init(Unknown Source)
at javax.crypto.Cipher.init(Unknown Source)
at test.Test.testBasicKeyGeneration(LicenseHelperTest.java:56)
</code></pre>
","<p>I recently ran in to the same problem. This was eventually solved by using <a href=""https://www.bouncycastle.org/"" rel=""nofollow"">the bouncy castle</a> implementation and adding this line to the java.security file</p>

<p>security.provider.1=org.bouncycastle.jce.provider.BouncyCastleProvider</p>
","11774","<java><jce>","5","3","6","2014-08-12 12:53:51","4877808","3","7","","","","2011-02-02 01:29:08",""
"4869904","What's wrong with IBM's JCE provider?","<p>I have a JCE test that works fine with all Sun JDKs I have tried, but fails with various IBM J9 JDKs (e.g. 1.6.0 build pwi3260sr8-20100409_01(SR8)). The exception below happens when the cipher is initialized in encrypt mode. Why can the IBM JCE not use its own private key? Am I missing something in my code?</p>

<pre><code>  public void testBasicKeyGeneration() throws NoSuchAlgorithmException, 
      NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, 
      BadPaddingException, NoSuchProviderException, SignatureException {
      KeyPairGenerator generator = KeyPairGenerator.getInstance( ""RSA"" );
      generator.initialize( 2048 );
      KeyPair pair = generator.generateKeyPair();

      String data1 = ""123456789012345678901234567890123456789012345678901234567890"";
      Cipher cipher = Cipher.getInstance( ""RSA"" );
      cipher.init( Cipher.ENCRYPT_MODE, pair.getPrivate() );
      byte[] encrypted = cipher.doFinal( data1.getBytes() );

      cipher.init( Cipher.DECRYPT_MODE, pair.getPublic() );
      byte[] decrypted = cipher.doFinal( encrypted );
      String data2 = new String( decrypted );
      assertEquals( ""en/decryption failed"", data1, data2 );
  }
</code></pre>

<p>Here is the stack trace:</p>

<pre><code>java.security.InvalidKeyException: Private key cannot be used to encrypt.
at com.ibm.crypto.provider.RSA.engineInit(Unknown Source)
at javax.crypto.Cipher.a(Unknown Source)
at javax.crypto.Cipher.a(Unknown Source)
at javax.crypto.Cipher.init(Unknown Source)
at javax.crypto.Cipher.init(Unknown Source)
at test.Test.testBasicKeyGeneration(LicenseHelperTest.java:56)
</code></pre>
","<p>There is a solution, see <a href=""http://www-01.ibm.com/support/docview.wss?uid=swg1IV18625"" rel=""noreferrer"">http://www-01.ibm.com/support/docview.wss?uid=swg1IV18625</a></p>

<p>with the property</p>

<pre><code>-Dcom.ibm.crypto.provider.DoRSATypeChecking=false
</code></pre>

<p>you can use private keys to encrypt data.</p>
","11774","<java><jce>","5","7","6","2014-08-12 12:53:51","4877808","3","7","","","","2011-02-02 01:29:08",""
"6932681","How do I get javax.crypto classes such as javax.crypto.Cipher to work on a servlet with jboss?","<p>My application validates a license file in order for it to work. It does this by calling javax.crypto.Cipher.getInstance(""DES"",""SunJCE"") inorder to decipher the license key file.</p>

<p>When I run my application locally everything works fine but when I deploy my application with jboss and get to the point where I want to validate the license file on the servlet, I get the following error:</p>

<pre><code>java.lang.SecurityException: JCE cannot authenticate the provider SunJCE
  at javax.crypto.Cipher.getInstance(DashoA13*..)
  at javax.crypto.Cipher.getInstance(DashoA13*..)
</code></pre>

<p>Like I said, it works fine from command prompt and eclipse, but not as a servlet on jboss. Does anybody have any idea what I need to do? I am using jdk 1.6 and jboss as 7.</p>

<p>Thanks</p>
","<p>There are a couple of possible issues that come in mind, it seems to be a problem with classpath when sun/oracle jvm try to authenticate provider jars</p>

<ul>
<li><p>check that all security jars are under the <code>&lt;jdk_home&gt;/jre/lib/ext</code> of the jvm that runs jboss
(ie US_export_policy.jar, sunjce_provider.jar, local_policy.jar....)</p></li>
<li><p>about US_export_policy.jar and local_policy.jar be sure to have downloaded the unrestricted version</p></li>
<li><p>java.security file in <code>&lt;jdk_home&gt;/jre/lib/security</code>: be sure to have a line similar to <code>security.provider.X=com.sun.crypto.provider.SunJCE</code> where X is a number</p></li>
<li><p>be sure that sunJCE provider jar is not in you WEB-INF/lib</p></li>
</ul>
","11467","<security><servlets><encryption><jce><jboss7.x>","0","1","2","2012-02-19 15:30:31","6948956","2","","145989","","2012-02-19 15:30:31","2011-08-03 20:12:26",""
"6932681","How do I get javax.crypto classes such as javax.crypto.Cipher to work on a servlet with jboss?","<p>My application validates a license file in order for it to work. It does this by calling javax.crypto.Cipher.getInstance(""DES"",""SunJCE"") inorder to decipher the license key file.</p>

<p>When I run my application locally everything works fine but when I deploy my application with jboss and get to the point where I want to validate the license file on the servlet, I get the following error:</p>

<pre><code>java.lang.SecurityException: JCE cannot authenticate the provider SunJCE
  at javax.crypto.Cipher.getInstance(DashoA13*..)
  at javax.crypto.Cipher.getInstance(DashoA13*..)
</code></pre>

<p>Like I said, it works fine from command prompt and eclipse, but not as a servlet on jboss. Does anybody have any idea what I need to do? I am using jdk 1.6 and jboss as 7.</p>

<p>Thanks</p>
","<p>I figured out what was wrong with my code.  Earlier in the code for some reason someone did the following:</p>

<pre><code>if (SunJCEinProviders) 
{
Security.removeProvider(""SunJCE"");
}   

int i = Security.insertProviderAt(new  com.sun.crypto.provider.SunJCE(),1);
</code></pre>

<p>So for some reason we were removing javas initial SunJCE provider then adding a new one and this new one was failing to be authenticated.</p>
","11467","<security><servlets><encryption><jce><jboss7.x>","0","1","2","2012-02-19 15:30:31","6948956","2","","145989","","2012-02-19 15:30:31","2011-08-03 20:12:26",""
"16586627","Should I use Cipher.WRAP_MODE OR Cipher.ENCRYPT_MODE to encrypt a session key?","<p>How should I encrypt a session key on the client side with the public key transported from server side?</p>

<p>Should I use <code>Cipher.WRAP_MODE</code> or <code>Cipher.ENCRYPT_MODE</code>?</p>

<pre><code>Cipher cipher = Cipher.getInstance(""RSA"");
cipher.init(Cipher.WRAP_MODE, publicKey);
byte[] wrappedSessionKey = cipher.wrap(sessionKey);
</code></pre>

<p>I am not really sure how to use encrypt_mode to encrypt sessionKey. Could someone help me on this?</p>
","<p>Wrapping and encrypting are very similar, however wrapping expresses more precisely what you are planning to do. General ""encryption"" operates on raw data with no semantic meaning, whereas wrapping is known to relate to keys. Hence the <code>Cipher.unwrap()</code> method returns a <code>Key</code> not a byte array.</p>

<p>Your code will be more portable (particular with respect to hardware security modules) if you use wrap for doing key wrapping. In some circumstances, key permissions will allow a wrapping operation but not a raw encryption of the key bytes.</p>

<p>Of course, since the entirety of the JCE architecture is based on a <em>provider</em> concept, you will need to check exactly what algorithm to specify for your chosen provider to get the output format you want. This is particularly important if you are sending the wrapped key data to a third-party.</p>

<hr>

<p>In your particular case, the same behaviour will be exhibited by both <code>WRAP</code> and <code>ENCRYPT</code>, as demonstrated below, where I interchange the results:</p>

<pre><code>KeyPairGenerator generator = KeyPairGenerator.getInstance(""RSA"", ""SunJSSE"");
generator.initialize(2048);
KeyPair keyPair = generator.generateKeyPair();

SecretKey sessionKey = new SecretKeySpec(new byte[16], ""AES"");

Cipher c = Cipher.getInstance(""RSA"", ""SunJCE"");
c.init(Cipher.ENCRYPT_MODE, keyPair.getPublic());
byte[] result1 = c.doFinal(sessionKey.getEncoded());

c.init(Cipher.WRAP_MODE, keyPair.getPublic());
byte[] result2 = c.wrap(sessionKey);

c.init(Cipher.UNWRAP_MODE, keyPair.getPrivate());
SecretKey sessionKey1 = (SecretKey) c.unwrap(result1, ""AES"",
    Cipher.SECRET_KEY);

c.init(Cipher.DECRYPT_MODE, keyPair.getPrivate());
SecretKey sessionKey2 = new SecretKeySpec(c.doFinal(result2), ""AES"");

System.out.println(Arrays.equals(sessionKey1.getEncoded(),
    sessionKey2.getEncoded()));
</code></pre>

<p>This prints: <code>true</code></p>
","8264","<java><encryption><jce>","6","21","1","2016-12-18 19:22:01","16586921","0","5","474189","","2013-05-16 12:05:32","2013-05-16 11:50:14",""
"295436","Java/JCE: Decrypting ""long"" message encrypted with RSA","<p>I've got a message contained in an byte[], encrypted with ""RSA/ECB/PKCS1Padding"". To decrypt it I create a Cipher c and initiate it with</p>

<pre><code>c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
</code></pre>

<p>Untill now I have only decrypted small messages, using the <em>doFinal()</em> method, returning an byte[] with the decrypted bytes. </p>

<pre><code>c.init(Cipher.DECRYPT_MODE, privateKey);
byte[] decryptetBytes = c.doFinal(encryptedBytes);
</code></pre>

<p>But in this case the data is bigger (approx 500 Bytes), and the <em>doFinal()</em>-method throws an exception (javax.crypto.IllegalBlockSizeException: Data must not be longer than 128 bytes). I guess I need to use the <em>update()</em>- method, but I can't figure out how to get it to work properly. How is this done?</p>
","<p>With RSA you can only encrypt/decrypt block with size up to your key length minus padding length. If you have data longer than your key maybe it is just merged in one array so you should split it into chunks with size of your key (128 bytes suggests 1024 key with no padding, I'm not sure if it's possible). Using update() is not the case here.</p>

<p>Simply, you have to know how this array was created.</p>

<p>Generally speaking, RSA shouldn't be used to encrypt large amount of data as it's quite time consuming. Should be used to encrypt key to symmetric cipher, like AES.</p>

<p>Take a look here:
<a href=""https://www.owasp.org/index.php/Digital_Signature_Implementation_in_Java"" rel=""nofollow"">https://www.owasp.org/index.php/Digital_Signature_Implementation_in_Java</a></p>
","8067","<java><rsa><encryption><jce>","2","2","3","2012-06-20 15:58:20","10253152","0","4","","","","2008-11-17 12:06:45",""
"295436","Java/JCE: Decrypting ""long"" message encrypted with RSA","<p>I've got a message contained in an byte[], encrypted with ""RSA/ECB/PKCS1Padding"". To decrypt it I create a Cipher c and initiate it with</p>

<pre><code>c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
</code></pre>

<p>Untill now I have only decrypted small messages, using the <em>doFinal()</em> method, returning an byte[] with the decrypted bytes. </p>

<pre><code>c.init(Cipher.DECRYPT_MODE, privateKey);
byte[] decryptetBytes = c.doFinal(encryptedBytes);
</code></pre>

<p>But in this case the data is bigger (approx 500 Bytes), and the <em>doFinal()</em>-method throws an exception (javax.crypto.IllegalBlockSizeException: Data must not be longer than 128 bytes). I guess I need to use the <em>update()</em>- method, but I can't figure out how to get it to work properly. How is this done?</p>
","<p>I think using RSA encryption for anything but key transport is abuse.</p>

<p>Generate a new key for a symmetric cipher and encrypt your bulk data with that. Then encrypt the key with RSA. Send the symmetrically-encrypted cipher-text along with the asymmetrically-encrypted content encryption key to your recipient.</p>
","8067","<java><rsa><encryption><jce>","2","4","3","2012-06-20 15:58:20","10253152","0","4","","","","2008-11-17 12:06:45",""
"295436","Java/JCE: Decrypting ""long"" message encrypted with RSA","<p>I've got a message contained in an byte[], encrypted with ""RSA/ECB/PKCS1Padding"". To decrypt it I create a Cipher c and initiate it with</p>

<pre><code>c = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
</code></pre>

<p>Untill now I have only decrypted small messages, using the <em>doFinal()</em> method, returning an byte[] with the decrypted bytes. </p>

<pre><code>c.init(Cipher.DECRYPT_MODE, privateKey);
byte[] decryptetBytes = c.doFinal(encryptedBytes);
</code></pre>

<p>But in this case the data is bigger (approx 500 Bytes), and the <em>doFinal()</em>-method throws an exception (javax.crypto.IllegalBlockSizeException: Data must not be longer than 128 bytes). I guess I need to use the <em>update()</em>- method, but I can't figure out how to get it to work properly. How is this done?</p>
","<p>Like Erickson said,</p>

<p>The steps you should take encrypt are:</p>

<ol>
<li>Generate RSA key pair (or retrieve public key from a key store)</li>
<li>Generate Symmetric key (AES)</li>
<li>Encrypt data with AES key</li>
<li>Encrypt AES key with public RSA key</li>
<li>Store (or send to person with private key) the encrypted AES key, and the AES Encrypted Data</li>
</ol>

<p>To decrypt:</p>

<ol>
<li>Get private key associated with that key pair used to encrypt</li>
<li>Decrypt AES key with private key</li>
<li>Decrypt data with AES key</li>
<li>Use data</li>
</ol>
","8067","<java><rsa><encryption><jce>","2","1","3","2012-06-20 15:58:20","10253152","0","4","","","","2008-11-17 12:06:45",""
"12937138","How does JCA/JCE and PKCS#11 work (together)?","<p>I want to use a HSM (hardware security module) to create a signature of a XML file. I did a bit of research and am now a bit confused, though.</p>

<p>Can you please clarify those questions:</p>

<ol>
<li>What is meant with a <em>key handle</em> in JCE? I have read about it, that it is just a handle and the key is stored somewhere else. How can that be? From my understanding I either load the key into memory and use it, or the signing is done completely by a HSM and I only get the result, right?</li>
<li>Does the PKCS#11 standard define a way so that the signature is generated in the HSM? I've read about <em>tokens</em>, but I am not sure about signing.</li>
<li>The featurelist of my HSM states JCE and PKCS#11 separately. What does that mean? </li>
<li>I thought PKCS#11 is  a standard, and JCE defines classes to use that standard. Does JCE specify its own protocols?</li>
</ol>
","<ol>
<li><p><strong>What is meant with a key handle in JCE?</strong><br>
A key handle (in JCE, PKCS#11, or most other cryptographic APIs) is simply a reference that enables you to use a key without seeing its actual value. That is good: you can have the key permanently stored in a secure place (e.g. an HSM) with the assurance that nobody will be able to copy it and run away with it - as it may happen if the key is the application space. Unlike a physical safe though, you can still perform cryptographic operation without running any security risk of key leakage.</p></li>
<li><p><strong>Does the PKCS#11 standard define a way so that the signature is generated in the HSM?</strong><br>
PKCS#11 is a C API for cryptographic tokens. A <em>token</em> is a PKCS#11 abstraction for any device or program that offers services described by such API. The API defines which operations you can perform using the objects inside the PKCS#11 token: some objects are non sensitive, and can be extracted (e.g. public keys); some others are sensitive and can only be used, via handles.<br>
If you have a handle to an object that supports signing, you can use the C function <a href=""http://www.cryptsoft.com/pkcs11doc/v220/pkcs11__all_8h.html#aC_Sign"">C_Sign</a> to ask the token to authenticate some data provided by your application. The key does not leave the HSM.</p></li>
<li><p><strong>The featurelist of my HSM states JCE and PKCS#11 separately. What does that mean?</strong><br>
Your HSM supports JCE in the sense that it comes with a native library that qualifies as a   <a href=""http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#ProviderArch"">Cryptographic Service Provider</a>.<br>
It supports PKCS#11 in the sense that it comes with a native library that offers a C PKCS#11 API.</p></li>
<li><p><strong>I thought PKCS#11 is a standard, and JCE defines classes to use that standard. Does JCE specify its own protocols?</strong><br>
Indeed PKCS#11 is a standard; but it is not directly usable by languages other than C. You need a mapping layer that translates it into something compatible to your language. A PKCS#11 library (and the physical tokens that it abstracts) can be mapped to <a href=""http://docs.oracle.com/javase/1.5.0/docs/guide/security/p11guide.html"">a JCE provider</a>.</p></li>
</ol>

<p>However, a JCE provider may have nothing to do with PKCS#11.</p>
","7579","<java><jce><pkcs#11>","11","22","1","2013-10-28 15:54:27","12940627","0","3","1602587","","2012-10-22 12:34:04","2012-10-17 14:52:32",""
"8418693","Generate PKCS12 file using Java","<p>I need to generate a PKCS12 file using Java.
Actually, I need to automate the following certificate generation using openssl (the ca was created previously and is not pretended to automate its creation):</p>

<blockquote>
  <p>openssl genrsa -out client.key 2048</p>
  
  <p>openssl req -new -key client.key -out client.csr</p>
  
  <p>openssl ca -keyfile ca.key -cert ca.crt -out client.crt -policy policy_anything -infiles client.csr</p>
  
  <p>openssl pkcs12 -export -in client.crt -inkey client.key -out client.p12 -name client</p>
</blockquote>

<p>I want to know if it's possible to perform this without using Bouncycastle or similar libraries, just only JCE, because I didn't find any info related with the PKCS12 generation.</p>
","<p>Creating a PKCS#12 is easy - that can be done by writing <a href=""http://docs.oracle.com/javase/6/docs/api/java/security/KeyStore.html"" rel=""noreferrer"">KeyStore</a> ""PKCS12"" instance, add the certificate and keys and then save it to a file using the store(...) method.</p>

<p>The rest is a bit more problematic.</p>
","7448","<java><jce><pkcs#12>","5","5","2","2011-12-07 17:00:56","8419086","0","2","2983","","2011-12-07 17:00:56","2011-12-07 16:22:26",""
"8418693","Generate PKCS12 file using Java","<p>I need to generate a PKCS12 file using Java.
Actually, I need to automate the following certificate generation using openssl (the ca was created previously and is not pretended to automate its creation):</p>

<blockquote>
  <p>openssl genrsa -out client.key 2048</p>
  
  <p>openssl req -new -key client.key -out client.csr</p>
  
  <p>openssl ca -keyfile ca.key -cert ca.crt -out client.crt -policy policy_anything -infiles client.csr</p>
  
  <p>openssl pkcs12 -export -in client.crt -inkey client.key -out client.p12 -name client</p>
</blockquote>

<p>I want to know if it's possible to perform this without using Bouncycastle or similar libraries, just only JCE, because I didn't find any info related with the PKCS12 generation.</p>
","<p>No problem with creation keypairs and certificates but JCE has no API for signing (this is absolutely, I've spent lots of time searching it). Bouncycatle lib is a right choice.</p>
","7448","<java><jce><pkcs#12>","5","2","2","2011-12-07 17:00:56","8419086","0","2","2983","","2011-12-07 17:00:56","2011-12-07 16:22:26",""
"38108972","No Java folder located in Library despite JDK installation","<p>Currently running OSX El Capitan on a recently set up computer. I'm trying to set up Java's unlimited crypto policy which requires me to modify some files within my current jre, but I can't find the Java folder that is supposed to be located within Library.</p>

<p>I've run <code>/usr/libexec/java_home</code> which shows me <code>/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home</code> however within my Library folder, there is no Java folder, even when I try and navigate through terminal it says Java folder doesn't exist. After trying to reinstall JDK 1.8, still no luck and I'm out of ideas. </p>
","<p>This is not the <code>Library</code> folder in your home directory, this is the <code>Library</code> folder in the root file system on your main disk.</p>

<p>So in Terminal the command</p>

<pre class=""lang-none prettyprint-override""><code>cd /Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk
</code></pre>

<p>should work</p>
","7359","<java><encryption><java-8><jce>","3","17","1","2018-08-15 11:00:52","","0","","1816580","","2016-06-29 20:04:16","2016-06-29 19:56:58",""
"41413439","Encrypting and decrypting a file using CipherInputStream and CipherOutputStream","<p>I've been trying to write an encrypted file in AES and decrypt it subsequently by using Cipher Streams provided in JCA. However, I'm having problems while reading the file, as the decryption is going haywire.</p>

<pre><code>public class CipherStreams {
public static void main(String[] args) {
    try {
        KeyGenerator keygen = KeyGenerator.getInstance(""AES"");
        Key k = keygen.generateKey();

        Cipher aes = Cipher.getInstance(""AES/ECB/PKCS5Padding"");
        aes.init(Cipher.ENCRYPT_MODE, k);
        FileOutputStream fs = new FileOutputStream(""Encrypyed.txt"");
        CipherOutputStream out = new CipherOutputStream(fs, aes);
        out.write(""[Hello:Okay]\nOkay"".getBytes());
        out.close();

        Cipher aes2 = Cipher.getInstance(""AES/ECB/PKCS5Padding"");
        aes2.init(Cipher.DECRYPT_MODE, k);

        FileInputStream fis = new FileInputStream(""Encrypyed.txt"");
        CipherInputStream in = new CipherInputStream(fis,aes2);
        byte[] b = new byte[8];
        int i = in.read(b);
        while(i!=-1) {
            System.out.print((char)i);
            i = in.read(b);
        }
    } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IOException ex) {
        Logger.getLogger(CipherStreams.class.getName()).log(Level.SEVERE, null, ex);
    }
}
}
</code></pre>

<p>I'm receiving a single byte output as 5. Can anyone please help point out the problem? </p>
","<p>You're not writing the bytes read, you're writing the number of bytes being read.</p>

<p>You're also assuming that the default platform encoding just transforms each character to a byte.</p>

<p>Just do the reverse of what you did when writing: read everything, and transform the read byte array to a String, then print that string:</p>

<pre><code>public class CipherStreams {
    public static void main(String[] args) {
        try {
            KeyGenerator keygen = KeyGenerator.getInstance(""AES"");
            Key k = keygen.generateKey();

            Cipher aes = Cipher.getInstance(""AES/ECB/PKCS5Padding"");
            aes.init(Cipher.ENCRYPT_MODE, k);
            String fileName = ""Encrypted.txt"";
            FileOutputStream fs = new FileOutputStream(fileName);
            CipherOutputStream out = new CipherOutputStream(fs, aes);
            out.write(""[Hello:Okay]\nOkay"".getBytes());
            out.flush();
            out.close();

            Cipher aes2 = Cipher.getInstance(""AES/ECB/PKCS5Padding"");
            aes2.init(Cipher.DECRYPT_MODE, k);

            FileInputStream fis = new FileInputStream(fileName);
            CipherInputStream in = new CipherInputStream(fis, aes2);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();

            byte[] b = new byte[1024];
            int numberOfBytedRead;
            while ((numberOfBytedRead = in.read(b)) &gt;= 0) {
                baos.write(b, 0, numberOfBytedRead);
            }
            System.out.println(new String(baos.toByteArray()));
        }
        catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IOException ex) {
            ex.printStackTrace();
            ;
        }
    }
}
</code></pre>
","7226","<java><encryption><jce>","2","10","1","2017-01-01 08:23:09","41414233","0","4","","","","2017-01-01 04:49:55",""
"6475469","AES/CBC encrypt in Java, decrypt in Ruby","<p>I am trying to translate the following (working) Java code to Ruby.</p>

<pre><code>   public static final String PROVIDER = ""BC"";
   public static final int IV_LENGTH = 16;
   private static final String HASH_ALGORITHM = ""SHA-512"";
   private static final String PBE_ALGORITHM = ""PBEWithSHA256And256BitAES-CBC-BC"";
   private static final String CIPHER_ALGORITHM = ""AES/CBC/PKCS5Padding"";
   private static final String SECRET_KEY_ALGORITHM = ""AES"";
   public String decrypt(SecretKey secret, String encrypted) {

         Cipher decryptionCipher = Cipher.getInstance(CIPHER_ALGORITHM, PROVIDER);
         String ivHex = encrypted.substring(0, IV_LENGTH * 2);
         String encryptedHex = encrypted.substring(IV_LENGTH * 2);
         IvParameterSpec ivspec = new IvParameterSpec(HexEncoder.toByte(ivHex));
         decryptionCipher.init(Cipher.DECRYPT_MODE, secret, ivspec);
         byte[] decryptedText = decryptionCipher.doFinal(HexEncoder.toByte(encryptedHex));
         String decrypted = new String(decryptedText, ""UTF-8"");
         return decrypted;
        } 
</code></pre>

<p>My (not working) Ruby code is this:</p>

<pre><code>require 'openssl'
require 'digest/sha2'

SECRET = ""MY PASSWORD AS RAW TEXT""
IV_LENGHT = 16
encoded = ""45D0EC4D910C0A6FF67325FF7362DCBC4613B6F3BFDFE35930D764FB1FE62251""

iv = encoded.slice(0, IV_LENGHT * 2)
e = encoded.slice(IV_LENGHT*2..-1)

binary_iv = iv.unpack('a2'*IV_LENGHT).map{|x| x.hex}.pack('c'*IV_LENGHT)
binary_e = e.unpack('a2'*IV_LENGHT).map{|x| x.hex}.pack('c'*IV_LENGHT)


c = OpenSSL::Cipher::Cipher.new(""aes-256-cbc"")
c.decrypt
c.key = Digest::SHA256.digest(SECRET).slice(0, IV_LENGHT* 2 )
c.iv = binary_iv
d = c.update(binary_e)
d &lt;&lt; c.final
puts ""decrypted: #{d}\n""
</code></pre>

<p>I have tried the binary and non binary versions, with no luck. 
Someone can point to the problem?</p>
","<p>I once had a similar problem with <b>CIPHER_ALGORITHM = ""AES/CBC/PKCS5Padding"";</b> and decryption through the openSSL-library in C which I could't solve. I avoided the problem by using <b>""AES/CBC/NoPadding""</b> and by adding a particular padding to the plaintext manually.</p>
","6698","<java><ruby><encryption><openssl><jce>","3","1","2","2011-12-20 05:58:01","","2","3","82559","","2011-06-25 02:49:52","2011-06-25 02:45:32",""
"6475469","AES/CBC encrypt in Java, decrypt in Ruby","<p>I am trying to translate the following (working) Java code to Ruby.</p>

<pre><code>   public static final String PROVIDER = ""BC"";
   public static final int IV_LENGTH = 16;
   private static final String HASH_ALGORITHM = ""SHA-512"";
   private static final String PBE_ALGORITHM = ""PBEWithSHA256And256BitAES-CBC-BC"";
   private static final String CIPHER_ALGORITHM = ""AES/CBC/PKCS5Padding"";
   private static final String SECRET_KEY_ALGORITHM = ""AES"";
   public String decrypt(SecretKey secret, String encrypted) {

         Cipher decryptionCipher = Cipher.getInstance(CIPHER_ALGORITHM, PROVIDER);
         String ivHex = encrypted.substring(0, IV_LENGTH * 2);
         String encryptedHex = encrypted.substring(IV_LENGTH * 2);
         IvParameterSpec ivspec = new IvParameterSpec(HexEncoder.toByte(ivHex));
         decryptionCipher.init(Cipher.DECRYPT_MODE, secret, ivspec);
         byte[] decryptedText = decryptionCipher.doFinal(HexEncoder.toByte(encryptedHex));
         String decrypted = new String(decryptedText, ""UTF-8"");
         return decrypted;
        } 
</code></pre>

<p>My (not working) Ruby code is this:</p>

<pre><code>require 'openssl'
require 'digest/sha2'

SECRET = ""MY PASSWORD AS RAW TEXT""
IV_LENGHT = 16
encoded = ""45D0EC4D910C0A6FF67325FF7362DCBC4613B6F3BFDFE35930D764FB1FE62251""

iv = encoded.slice(0, IV_LENGHT * 2)
e = encoded.slice(IV_LENGHT*2..-1)

binary_iv = iv.unpack('a2'*IV_LENGHT).map{|x| x.hex}.pack('c'*IV_LENGHT)
binary_e = e.unpack('a2'*IV_LENGHT).map{|x| x.hex}.pack('c'*IV_LENGHT)


c = OpenSSL::Cipher::Cipher.new(""aes-256-cbc"")
c.decrypt
c.key = Digest::SHA256.digest(SECRET).slice(0, IV_LENGHT* 2 )
c.iv = binary_iv
d = c.update(binary_e)
d &lt;&lt; c.final
puts ""decrypted: #{d}\n""
</code></pre>

<p>I have tried the binary and non binary versions, with no luck. 
Someone can point to the problem?</p>
","<p>Based on the title here, I am going to assume that you want to be able to <em>encrypt</em> a message in Java, and then <em>decrypt</em> that message in Ruby, using password-based AES-CBC encryption.</p>

<p>Now, the <code>openssl</code> standard library in Ruby readily supports <a href=""http://www.ruby-doc.org/stdlib-1.8.7/libdoc/openssl/rdoc/OpenSSL/PKCS5.html"" rel=""nofollow"">password-based key derivation function 2 based on PKCS5</a>. You can greatly simplify your Ruby <em>decryption</em> code if you leverage this in your Java <em>encryption</em>.</p>

<p>Here is how you would encrypt using PBKDF2 in PKCS5 in Java:</p>

<pre><code>// in Java-land
import java.security.AlgorithmParameters;
import java.security.spec.KeySpec;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

...

static String printHex(byte[] bytes) {
    StringBuilder sb = new StringBuilder();
    for (byte b : bytes) {
        sb.append(String.format(""%02x"", (b &amp; 0xFF)));
    }
    return sb.toString();
}

public static Map&lt;String,String&gt; encrypt(String msg, String pwd, byte[] salt)
        throws Exception {
    Map&lt;String,String&gt; retval = new HashMap&lt;String,String&gt;();

    // prepare to use PBKDF2/HMAC+SHA1, since ruby supports this readily
    SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    // our key is 256 bits, and can be generated knowing the password and salt
    KeySpec spec = new PBEKeySpec(pwd.toCharArray(), salt, 1024, 256);
    SecretKey tmp = factory.generateSecret(spec);
    SecretKey secret = new SecretKeySpec(tmp.getEncoded(), ""AES"");

    // given key above, our cippher will be aes-256-cbc in ruby/openssl
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    cipher.init(Cipher.ENCRYPT_MODE, secret);
    AlgorithmParameters params = cipher.getParameters();

    // generate the intialization vector
    byte[] iv = params.getParameterSpec(IvParameterSpec.class).getIV();
    retval.put(""iv"", printHex(iv));

    byte[] ciphertext = cipher.doFinal(msg.getBytes(""UTF-8""));
    retval.put(""encrypted"", printHex(ciphertext));

    return retval;
}

public static void main(String[] args) throws Exception {
    String msg  = ""To Ruby, from Java, with love..."";
    String pwd  = ""password"";
    String salt = ""8 bytes!""; // in reality, you would use SecureRandom!

    System.out.println(""password (plaintext): "" + pwd);
    System.out.println(""salt: "" + salt);

    Map&lt;String,String&gt; m = encrypt(msg, pwd, salt.getBytes());
    System.out.println(""encrypted: "" + m.get(""encrypted""));
    System.out.println(""iv: "" + m.get(""iv""));
}
</code></pre>

<p>Running the above will result in something like the following output.</p>

<pre><code>password (plaintext): password
salt: 8 bytes!
encrypted: 4a39f1a967c728e11c7a5a3fb5d73ad07561f504c9d084d0b1ae600cc1f75137cbb82a4d826c060cb06e2e283449738d
iv: ecbc985b3550edc977a17acc066f2192
</code></pre>

<p>Hex strings are used for the encrypted message and initialization vector since you can use OpenSSL to verify the encryption/decryption process (highly recommended).</p>

<p>Now from a Ruby program, you would use the <code>AES-256-CBC</code> cipher, and derive the secret key from the <code>password</code> and <code>salt</code> strings (not <code>byte[]</code> as per Java). Using the output from the above-mentioned Java program, we have:</p>

<pre><code># from Ruby-land
require 'openssl'

d = OpenSSL::Cipher.new(""AES-256-CBC"")
d.decrypt
key = OpenSSL::PKCS5.pbkdf2_hmac_sha1(""password"", ""8 bytes!"", 1024, d.key_len)
d.key = key
d.iv = ""ecbc985b3550edc977a17acc066f2192"".scan(/../).map{|b|b.hex}.pack('c*')
data = ""4a39f1a967c728e11c7a5a3fb5d73ad07561f504c9d084d0b1ae600cc1f75137cbb82a4d826c060cb06e2e283449738d"".scan(/../).map{|b|b.hex}.pack('c*')
d.update(data) &lt;&lt; d.final
=&gt; ""To Ruby, from Java, with love...""
</code></pre>

<p>NOTE: The Ruby part of this code pretty much comes verbatim from the <a href=""http://doc.ruby-lang.org/ja/1.8.7/class/OpenSSL=3a=3aCipher.html"" rel=""nofollow""><em>Japanese</em> documentation on the <code>openssl</code> standard library</a>.</p>
","6698","<java><ruby><encryption><openssl><jce>","3","3","2","2011-12-20 05:58:01","","2","3","82559","","2011-06-25 02:49:52","2011-06-25 02:45:32",""
"22646792","How does one convert a public EC code point and curve name into a PublicKey?","<p>I have two 32 byte long byte arrays representing the X and Y values for an EC Public Key. I know that the curve is the named curve ""prime256v1"".</p>

<p>How can I turn that into a Java PublicKey object?</p>

<p>The JCE appears to provide no facilities whatsoever to use named curves.</p>

<p><a href=""http://www.bouncycastle.org/wiki/display/JA1/Elliptic+Curve+Key+Pair+Generation+and+Key+Factories#EllipticCurveKeyPairGenerationandKeyFactories-WithNamedCurves.2"" rel=""noreferrer"">Bouncycastle's example code</a> does not appear to compile with any version of bouncycastle I can find.</p>

<p>WTF?</p>
","<p>I don't see any way in JCE to use a named curve directly for a key, but it can be used for key generation, and the parameters can then be extracted from that key:</p>

<pre><code>    // generate bogus keypair(!) with named-curve params
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""EC"");
    ECGenParameterSpec gps = new ECGenParameterSpec (""secp256r1""); // NIST P-256 
    kpg.initialize(gps); 
    KeyPair apair = kpg.generateKeyPair(); 
    ECPublicKey apub  = (ECPublicKey)apair.getPublic();
    ECParameterSpec aspec = apub.getParams();
    // could serialize aspec for later use (in compatible JRE)
    //
    // for test only reuse bogus pubkey, for real substitute values 
    ECPoint apoint = apub.getW();
    BigInteger x = apoint.getAffineX(), y = apoint.getAffineY();
    // construct point plus params to pubkey
    ECPoint bpoint = new ECPoint (x,y); 
    ECPublicKeySpec bpubs = new ECPublicKeySpec (bpoint, aspec);
    KeyFactory kfa = KeyFactory.getInstance (""EC"");
    ECPublicKey bpub = (ECPublicKey) kfa.generatePublic(bpubs);
    //
    // for test sign with original key, verify with reconstructed key
    Signature sig = Signature.getInstance (""SHA256withECDSA"");
    byte [] data = ""test"".getBytes();
    sig.initSign(apair.getPrivate());
    sig.update (data);
    byte[] dsig = sig.sign();
    sig.initVerify(bpub);
    sig.update(data);
    System.out.println (sig.verify(dsig));
</code></pre>

<p>You do get the parameters, but apparently no longer linked to the OID, which might make a difference.
In particular it may be treated as ""arbitrary"" or ""explicit"" in TLS and not work 
even though the TLS parties support that same curve by name.</p>

<p>Note that openssl uses the name prime256v1 but not everyone does. Java (sun.) uses secp256r1, or the OID.
If you are actually getting this pubkey from openssl, note that JCE can directly read the X.509 
SubjectPublicKeyInfo format, which openssl calls PUBKEY, including the named (OID) form.</p>
","6688","<java><bouncycastle><jce><elliptic-curve>","5","9","2","2015-03-30 20:32:54","29355749","0","3","","","","2014-03-25 21:35:29",""
"22646792","How does one convert a public EC code point and curve name into a PublicKey?","<p>I have two 32 byte long byte arrays representing the X and Y values for an EC Public Key. I know that the curve is the named curve ""prime256v1"".</p>

<p>How can I turn that into a Java PublicKey object?</p>

<p>The JCE appears to provide no facilities whatsoever to use named curves.</p>

<p><a href=""http://www.bouncycastle.org/wiki/display/JA1/Elliptic+Curve+Key+Pair+Generation+and+Key+Factories#EllipticCurveKeyPairGenerationandKeyFactories-WithNamedCurves.2"" rel=""noreferrer"">Bouncycastle's example code</a> does not appear to compile with any version of bouncycastle I can find.</p>

<p>WTF?</p>
","<p>It turns out that there is, in fact, another way to do this. The AlgorithmParameters class can apparently be used to translate an ECGenParameterSpec, with a named curve, into an ECParameterSpec object that you can use with a KeyFactory to generate a PublicKey object:</p>

<pre><code>            ECPoint pubPoint = new ECPoint(new BigInteger(1, x),new BigInteger(1, y));
            AlgorithmParameters parameters = AlgorithmParameters.getInstance(""EC"", ""SunEC"");
            parameters.init(new ECGenParameterSpec(""secp256r1""));
            ECParameterSpec ecParameters = parameters.getParameterSpec(ECParameterSpec.class);
            ECPublicKeySpec pubSpec = new ECPublicKeySpec(pubPoint, ecParameters);
            KeyFactory kf = KeyFactory.getInstance(""EC"");
            return (ECPublicKey)kf.generatePublic(pubSpec);
</code></pre>
","6688","<java><bouncycastle><jce><elliptic-curve>","5","8","2","2015-03-30 20:32:54","29355749","0","3","","","","2014-03-25 21:35:29",""
"39097058","JCE zip file for JDK 9","<p>I want to try JDK 9 and I need JCE patched.
Where can I get <code>JCE zip file for JDK 9</code>? 
Or can I use the one for JDK 8 ? 
I searched for JCE zip for JDK 9 but am not able to locate it. 
Thanks in advance.</p>
","<p><strong>Update:</strong> Strong cryptography is now enabled out of the box for all current releases of Java 6 - 9. For details see: <a href=""https://stackoverflow.com/a/39889731/3392724"">https://stackoverflow.com/a/39889731/3392724</a></p>

<hr>

<p>I assume with 'JCE zip file' you mean the ""Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files"".</p>

<p>Apparently in Java 9 you no longer need a zip, see:
<a href=""http://mail.openjdk.java.net/pipermail/security-dev/2016-October/014943.html"" rel=""noreferrer"">http://mail.openjdk.java.net/pipermail/security-dev/2016-October/014943.html</a></p>

<blockquote>
  <p>Adding, 'Security.setProperty(“crypto.policy”, “unlimited”);' or
  editing the java.security configuration file will enable unlimited
  strength.</p>
</blockquote>

<p>Additional details:</p>

<ul>
<li><a href=""https://bugs.openjdk.java.net/browse/JDK-8061842"" rel=""noreferrer"">https://bugs.openjdk.java.net/browse/JDK-8061842</a></li>
<li><a href=""http://hg.openjdk.java.net/jdk9/dev/jdk/file/f82971b324f6/src/java.base/share/conf/security/policy/README.txt"" rel=""noreferrer"">http://hg.openjdk.java.net/jdk9/dev/jdk/file/f82971b324f6/src/java.base/share/conf/security/policy/README.txt</a></li>
</ul>

<p>Example using code to set the property:</p>

<pre><code>import javax.crypto.Cipher;
import java.security.Security;

class Test {
  public static void main(String[] args) {
    Security.setProperty(""crypto.policy"", ""unlimited"");
    try {
      System.out.println(""Hello World!"");
      int maxKeyLen = Cipher.getMaxAllowedKeyLength(""AES/CBC/PKCS5Padding"");
      System.out.println(maxKeyLen);
    } catch (Exception e){
      System.out.println(""Sad world :("");
    }
  }
}
</code></pre>

<p>Result:</p>

<pre><code>Hello World!
2147483647
Press any key to continue . . .
</code></pre>

<p>java -version:</p>

<pre><code>Java(TM) SE Runtime Environment (build 9-ea+138)
Java HotSpot(TM) Server VM (build 9-ea+138, mixed mode)
</code></pre>

<p><br>
<strong>Alternatively</strong>, edit the java.security configuration file in the JRE installation folder:</p>

<ul>
<li>Open <em>&lt;jre9-home&gt;</em>/conf/security/java.security in your preferred text editor</li>
<li>Search for the line ""crypto.policy=limited""</li>
<li>Change it to ""crypto.policy=unlimited""</li>
</ul>
","6553","<java><java-8><jce><java-9>","15","32","1","2017-10-12 07:40:21","39872144","0","3","","","","2016-08-23 09:13:36",""
"26852764","Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive) also with JCE Unlimited Strength Extension","<p>My java software use java 1.6.0_45 and can't upgrade to java 1.7 at the moment, when it try to establish a SSL Connection I got this exception:</p>

<pre><code>Caused by: java.security.InvalidAlgorithmParameterException: Prime size must be multiple of 64, and can only range from 512 to 1024 (inclusive)
    at com.sun.crypto.provider.DHKeyPairGenerator.initialize(DashoA13*..)
    at java.security.KeyPairGenerator$Delegate.initialize(Unknown Source)
</code></pre>

<p>I read many posts on internet and stackoverflow, the better suggestion is use JCE Unlimited Strength Extension <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html"" rel=""nofollow"">http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html</a> but for me the problem not disappear, I got always the same exception.</p>

<p>I have seen also BouncyCastle's JCE and is working, but I would like to understand because JCE Unlimited Strength Extension is not working.</p>
","","6085","<java><ssl><jce>","0","","0","2014-11-10 20:51:08","","0","","","","","2014-11-10 20:51:08",""
"37888701","Java Error: please install JCE Unlimited Strength Jurisdiction Policy files","<p>I am working on this Java application which needs to have access to ""JCE Unlimited Strength"" files and I DO HAVE installed them and it works properly when I build the solution (in Intellij) BUT when I make a <code>jar</code> output, for some reason it gives me this annoying error:</p>

<pre><code>C:\Users\h\whatever\out\artifacts\Accepter_jar&gt;java -cp Accepter.jar Main
org.apache.poi.EncryptedDocumentException: Export Restrictions in place - please install JCE Unlimited Strength Jurisdic
tion Policy files
        at org.apache.poi.poifs.crypt.CryptoFunctions.getCipher(CryptoFunctions.java:208)
        at org.apache.poi.poifs.crypt.CryptoFunctions.getCipher(CryptoFunctions.java:182)
        at org.apache.poi.poifs.crypt.agile.AgileDecryptor.hashInput(AgileDecryptor.java:269)
        at org.apache.poi.poifs.crypt.agile.AgileDecryptor.verifyPassword(AgileDecryptor.java:116)
        at org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:95)
        at org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:282)
        at ExcelJob.loadExcelSheet(ExcelJob.java:22)
        at Main.main(Main.java:17)
</code></pre>

<p>any idea what is the problem?</p>
","<p>I have gone through similar issue but with eclipse instead Intellij.
It could be the problem with the jdk(multiple versions) and jre. Go to your <strong>C:\Program Files\Java</strong> directory, add the NEWLY DOWNLOADED JCE jars (depending upon the Java version) inside <strong>security</strong> folder of each of JDK &amp; JRE you have installed.</p>
","5947","<java><jar><jce>","2","4","3","2018-04-07 12:08:47","37889874","0","","207421","","2016-06-19 01:28:05","2016-06-17 19:04:49",""
"37888701","Java Error: please install JCE Unlimited Strength Jurisdiction Policy files","<p>I am working on this Java application which needs to have access to ""JCE Unlimited Strength"" files and I DO HAVE installed them and it works properly when I build the solution (in Intellij) BUT when I make a <code>jar</code> output, for some reason it gives me this annoying error:</p>

<pre><code>C:\Users\h\whatever\out\artifacts\Accepter_jar&gt;java -cp Accepter.jar Main
org.apache.poi.EncryptedDocumentException: Export Restrictions in place - please install JCE Unlimited Strength Jurisdic
tion Policy files
        at org.apache.poi.poifs.crypt.CryptoFunctions.getCipher(CryptoFunctions.java:208)
        at org.apache.poi.poifs.crypt.CryptoFunctions.getCipher(CryptoFunctions.java:182)
        at org.apache.poi.poifs.crypt.agile.AgileDecryptor.hashInput(AgileDecryptor.java:269)
        at org.apache.poi.poifs.crypt.agile.AgileDecryptor.verifyPassword(AgileDecryptor.java:116)
        at org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:95)
        at org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:282)
        at ExcelJob.loadExcelSheet(ExcelJob.java:22)
        at Main.main(Main.java:17)
</code></pre>

<p>any idea what is the problem?</p>
","<p>On Windows installing the unlimited strength policy files is an annoying task, especially as after every JDK/JRE update you have to do it again.</p>

<p>Therefore I created a Windows batch file that automates the installation for all installed 64 bit Java 8 JREs and JDKs:</p>

<pre><code>@Echo Off
FOR /D %%G in (""%ProgramFiles%\Java\jdk*.*"") DO (Echo Upgrading JDK %%G &amp; ""C:\Program Files\7-Zip\7z.exe"" e -ir!*.jar -aoa -o""%%G\jre\lib\security"" ""%~dp0jce_policy-8.zip"" &gt; NUL:)
FOR /D %%G in (""%ProgramFiles%\Java\jre*.*"") DO (Echo Upgrading JRE %%G &amp; ""C:\Program Files\7-Zip\7z.exe"" e -ir!*.jar -aoa -o""%%G\lib\security"" ""%~dp0jce_policy-8.zip"" &gt; NUL:)
pause
</code></pre>

<ol>
<li><a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""nofollow noreferrer"">Downloaded from Oracle</a> the file <code>jce_policy-8.zip</code>. </li>
<li>Save the script text from above into a text file, e.g. name it <code>jce_policy-8_install.cmd</code>. Place it into the same directory as <code>jce_policy-8.zip</code>.</li>
<li>Now right click the <code>jce_policy-8_install.cmd</code> file in the Windows Explorer and select ""Run as administrator"".</li>
</ol>

<p>Note the script requires <a href=""http://www.7-zip.org/"" rel=""nofollow noreferrer"">7zip 64 bit</a> installed into the default path (<code>C:\Program Files\7-Zip</code>).</p>
","5947","<java><jar><jce>","2","2","3","2018-04-07 12:08:47","37889874","0","","207421","","2016-06-19 01:28:05","2016-06-17 19:04:49",""
"37888701","Java Error: please install JCE Unlimited Strength Jurisdiction Policy files","<p>I am working on this Java application which needs to have access to ""JCE Unlimited Strength"" files and I DO HAVE installed them and it works properly when I build the solution (in Intellij) BUT when I make a <code>jar</code> output, for some reason it gives me this annoying error:</p>

<pre><code>C:\Users\h\whatever\out\artifacts\Accepter_jar&gt;java -cp Accepter.jar Main
org.apache.poi.EncryptedDocumentException: Export Restrictions in place - please install JCE Unlimited Strength Jurisdic
tion Policy files
        at org.apache.poi.poifs.crypt.CryptoFunctions.getCipher(CryptoFunctions.java:208)
        at org.apache.poi.poifs.crypt.CryptoFunctions.getCipher(CryptoFunctions.java:182)
        at org.apache.poi.poifs.crypt.agile.AgileDecryptor.hashInput(AgileDecryptor.java:269)
        at org.apache.poi.poifs.crypt.agile.AgileDecryptor.verifyPassword(AgileDecryptor.java:116)
        at org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:95)
        at org.apache.poi.ss.usermodel.WorkbookFactory.create(WorkbookFactory.java:282)
        at ExcelJob.loadExcelSheet(ExcelJob.java:22)
        at Main.main(Main.java:17)
</code></pre>

<p>any idea what is the problem?</p>
","<p>While running nebeans you will come to know JAVA_HOME path while doing clean and build program ,that time you will come to know where is the java path </p>

<p>IF you are using linux 
<a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""nofollow noreferrer"">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a>
download this jar file and extract it first ,you will find local_policy and US_export.jar file you need to copy those two files into your 
/usr/local/jdk1.8.0_151/jre/lib/security/ copy it here it will ask to overrite say yes. And then re run your netbeans </p>
","5947","<java><jar><jce>","2","0","3","2018-04-07 12:08:47","37889874","0","","207421","","2016-06-19 01:28:05","2016-06-17 19:04:49",""
"5678238","Configure Oracle JDK to use IBM JCE/JSSE providers for FIPS compliance","<p>I would like to configure the Oracle JDK to use IBM's FIPS-compliant JCE/JSSE security providers. What JAR files do I need and where should they be installed? What should the provider list in the <code>java.security</code> file look like?</p>
","<p>This is an old post but anyway...<br>
IBM JVM is FIPS compliant when configuring it to use IBMJCEFIPS provider.<br>
This is applicable only to IBM Java though.<br>
Not drop the jars in a SUN JDK.<br>
For SUN you should use the <a href=""http://www.mozilla.org/projects/security/pki/nss/overview.html"" rel=""nofollow"">NSS</a> project which is also FIPS compliant</p>
","5942","<java><jce><jsse><fips>","4","3","3","2018-10-11 22:49:20","","2","5","987339","","2018-10-11 22:49:20","2011-04-15 14:28:45",""
"5678238","Configure Oracle JDK to use IBM JCE/JSSE providers for FIPS compliance","<p>I would like to configure the Oracle JDK to use IBM's FIPS-compliant JCE/JSSE security providers. What JAR files do I need and where should they be installed? What should the provider list in the <code>java.security</code> file look like?</p>
","<p>According this <a href=""http://www.ibm.com/developerworks/java/jdk/security/60/FIPShowto.html"" rel=""nofollow"">IBM document</a>, FIPS-approved providers are only available with IBM SDK.</p>

<p>Another clue (because I first thought WebSphere on Solaris runs on Oracle JVM): in <a href=""http://www-01.ibm.com/support/docview.wss?uid=swg27011922"" rel=""nofollow"">WebSphere MQ requirements on Solaris</a> a note clearly states that </p>

<blockquote>
  <p>FIPS compliance is only supported on IBM SDK</p>
</blockquote>

<p>In fact, on Solaris platform, the IBM SDK is built on Sun/Oracle JVM but with <a href=""https://blogs.oracle.com/dkumar/entry/websphere_jvm_jdk_on_solaris"" rel=""nofollow"">many changes</a> (ORB and security...).</p>
","5942","<java><jce><jsse><fips>","4","1","3","2018-10-11 22:49:20","","2","5","987339","","2018-10-11 22:49:20","2011-04-15 14:28:45",""
"5678238","Configure Oracle JDK to use IBM JCE/JSSE providers for FIPS compliance","<p>I would like to configure the Oracle JDK to use IBM's FIPS-compliant JCE/JSSE security providers. What JAR files do I need and where should they be installed? What should the provider list in the <code>java.security</code> file look like?</p>
","<p>I'm using IBMJCE on sun jdk5 and it works fine. It may be similar to fips, I guess</p>

<p>You need ibmjceprovider.jar, ibmpkcs.jar, ibmjcefips.jar</p>

<p>You can find them in ibm jre</p>

<p>The code like this</p>

<pre><code>static{
    //install ibm's provider
    java.security.Security.addProvider(new IBMJCE());
}

public byte[] encrypt(byte[] input)throws SecurityException{
    KeyGenerator kg = KeyGenerator.getInstance(""DES"");
    //call ibm's provider
    SecureRandom sr = SecureRandom.getInstance(""IBMSecureRandom"", new IBMJCE());
    sr.setSeed(str.getBytes());
    kg.init(sr);
    Key key = kg.generateKey();
    Cipher cipher = Cipher.getInstance(""DES"");
    cipher.init(1, key);
    byte[] ret = cipher.doFinal(input);
    return ret;
}
</code></pre>
","5942","<java><jce><jsse><fips>","4","4","3","2018-10-11 22:49:20","","2","5","987339","","2018-10-11 22:49:20","2011-04-15 14:28:45",""
"20581169","Java Crypto Api - how to choose a cipher provider","<p>In order to implement encryption using Java, I am using JCE, which is nice and fun.
I was told that it is better to choose the crypto provider than to use a default one.</p>

<p>I need to choose providers both for symmetric key generation. used by this code (using AES in CBC mode):</p>

<pre><code> Key sharedKey = (KeyGenerator.getInstance(""AES/CBC/PKCS5PADDING"", PROVIDER1).generateKey();
</code></pre>

<p>And for Asymmetric text encryption used by this code (using RSA in ECB mode):</p>

<pre><code>Cipher rsaEncryptor = Cipher.getInstance(""RSA/ECB/PKCS1Padding"",PROVIDER2); 
</code></pre>

<p><b>My question is how should I choose PROVIDER1 and PROVIDER2?</b></p>

<p>for example, I saw that ""SunJCE"" is a well documented provider, but I don't think it is a ""good enough"" reason to choose it.</p>

<p>anyone?</p>
","<p>In general, you should stick to the default provider, unless there is a compelling reason not to. Hard coding your provider has the serious drawback that your code won't allow you to change your provider without rewriting your code. The only reason I would see for choosing a provider directly is to make sure that some security constraints are met, that would not be present for other providers.</p>

<p>The following paragraph is <a href=""http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html"" rel=""nofollow"">directly from the Oracle documentation</a>: </p>

<blockquote>
  <p>Reminder: Cryptographic implementations in the JDK are distributed through several different providers (""Sun"", ""SunJSSE"", ""SunJCE"", ""SunRsaSign"") for both historical reasons and by the types of services provided. General purpose applications SHOULD NOT request cryptographic services from specific providers. That is:</p>

<pre><code>getInstance(""..."", ""SunJCE"");  // not recommended
    vs.
getInstance(""..."");            // recommended
</code></pre>
</blockquote>

<hr>

<p>You can still manage to allow other providers to be used by giving them a higher priority (a lower priority indicator, 1 is highest priority) within the <code>java.security</code> file within the <code>jre/lib/security</code> path of your runtime. If you want to specify the provider using <code>getInstance(""Algorithm"", ""Provider"")</code> it might be a good idea to make the provider string configurable (e.g. using properties and using <code>myConfig.getProperty(""Provider"")</code>).</p>
","5881","<java><encryption><encryption-asymmetric><jce>","2","4","1","2016-06-10 18:30:55","20585849","1","4","2060515","","2013-12-14 08:53:26","2013-12-14 08:27:12",""
"17677963","Java RSA Encryption/Decryption issues","<p>I need  code that can encrypt/decrypt data using RSA by BouncyCastle Java API. I implemented it but got following exception:</p>

<pre><code>javax.crypto.BadPaddingException: unknown block type in following code.
</code></pre>

<p>Here's the code:</p>

<pre><code>public class rsa {

private PrivateKey rsaPrivate;
private PublicKey rsapublic;
private Cipher cipher=null;
private  final String ALGORITHM = ""RSA"";
private  final String PROVIDER = ""BC"";

public rsa() throws NoSuchAlgorithmException, NoSuchPaddingException, NoSuchProviderException
{
this.init();    
}

public void init() throws NoSuchAlgorithmException, NoSuchPaddingException, NoSuchProviderException
{
    Security.addProvider(new BouncyCastleProvider());
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(ALGORITHM,PROVIDER);  
    keyGen.initialize(1024);  
    KeyPair keyPair = keyGen.generateKeyPair();  
    this.setRsaPrivate(keyPair.getPrivate())  ;  
    this.setRsapublic(keyPair.getPublic());  
}


     ********* Getter**(){} AND **Setter**(){} methods are removed **********


public String encryption(String Message) throws InvalidKeyException,IllegalBlockSizeException,
                                                BadPaddingException, NoSuchAlgorithmException, 
                                                NoSuchProviderException, NoSuchPaddingException, 
                                                UnsupportedEncodingException
{
    cipher=Cipher.getInstance(""RSA/ECB/PKCS1Padding"",PROVIDER);
    cipher.init(Cipher.ENCRYPT_MODE,this.getRsapublic());  
    byte[] encryptedMsg = cipher.doFinal(Message.getBytes());  
    return  new String(encryptedMsg); 
}


public String decryption(String encryptedMsg) throws InvalidKeyException, IllegalBlockSizeException,
                                                    BadPaddingException, UnsupportedEncodingException,
                                                    NoSuchAlgorithmException, NoSuchProviderException,
                                                    NoSuchPaddingException
{ 

    Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"",PROVIDER);
    cipher.init(Cipher.DECRYPT_MODE,this.getRsaPrivate());
    byte[] dectyptedText = cipher.doFinal(encryptedMsg.getBytes()); 
    return new String(dectyptedText);
}

public static void main(String args[]) throws Exception
{
    rsa r=new rsa();
    System.out.println(""Test1 encrypt normal: ""+Base64.encodeBase64String(r.encryption(""123456"").getBytes()));
    System.out.println(""Test2 decrypt normal: ""+r.decryption(r.encryption(""123456"")));
}
}
</code></pre>

<p><strong>*<em>OUTPUT</em>**</strong>: Test1 encrypt normal: </p>

<p>uXpqwit/bNH9GUpCPoL+7pjVhOYfQT95ZHCHRoBntfYuKhV9cnQUeSe2df1oTdp45JZFG9uohGssnMP2‌​BP9Lm6+xwxprQi7t2n3mjoLOTj+e+2rc2/hKlwhoHIpEmO6O7SWeQh+05PIhP9YnPOM97VKGfu/oXFj12‌​84pC9s0smM= Exception in thread ""main"" javax.crypto.BadPaddingException: unknown block type at org.bouncycastle.jce.provider.JCERSACipher.engineDoFinal(Unknown Source) at javax.crypto.Cipher.doFinal(DashoA13*..) at com.crypto.rsa.decryption(rsa.java:85) >>>>>>>>>>>>>>>>>>>>>got error here in method decryption <em>cipher.doFinal(encryptedMsg.getBytes())</em></p>

<p><strong>Finally got output</strong></p>

<pre><code>public class RSAUTIL
</code></pre>

<p>{</p>

<pre><code>String ALGORITHM_USED = ""RSA"";
String PROVIDER = ""BC"";
private KeyPair key; 
public RSAUTIL() throws NoSuchAlgorithmException
{
    this.init();
    this.generateKey();
}

public void init()
{
    Security.addProvider(new BouncyCastleProvider());

}

public KeyPair generateKey() throws NoSuchAlgorithmException
{
    KeyPairGenerator keyGen = null;
    try { 
        keyGen = KeyPairGenerator.getInstance(ALGORITHM_USED, PROVIDER);
    }catch (NoSuchProviderException e){e.printStackTrace();}
    keyGen.initialize(1024);
    key = keyGen.generateKeyPair();
    return key;
}

public PublicKey getpublickey()
{
    return key.getPublic();
}
public PrivateKey getprivatekey()
{
    return key.getPrivate();
}

public byte[] encrypt(byte[] text, PublicKey key) throws Exception
{
    byte[] cipherText = null;
    try
    {
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"",PROVIDER);
        cipher.init(Cipher.ENCRYPT_MODE, key);
        cipherText = cipher.doFinal(text);
    }catch (Exception e){throw e;}
    return cipherText;
}

public String encrypt(String text, PublicKey key) throws Exception
{
    String encryptedText;
    try
    {   byte[] cipherText = encrypt(text.getBytes(),key);
        encryptedText = encodeToBASE64(cipherText);
    }catch (Exception e){throw e;}return encryptedText;
}

public byte[] decrypt(byte[] text, PrivateKey key) throws Exception
{
    byte[] dectyptedText = null;
    try
    {
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"",PROVIDER);
        cipher.init(Cipher.DECRYPT_MODE,key);
        dectyptedText = cipher.doFinal(text);
    }catch (Exception e){throw e;}
    return dectyptedText;
}

public String decrypt(String text, PrivateKey key) throws Exception
{
    String result;
    try
    {   byte[] dectyptedText = decrypt(decodeToBASE64(text),key);
        result = new String(dectyptedText);
    }catch (Exception e){throw e;}
    return result;
}


public String getKeyAsString(Key key)
{
    byte[] keyBytes = key.getEncoded();
    BASE64Encoder b64 = new BASE64Encoder();
    return b64.encode(keyBytes);
}

public PrivateKey getPrivateKeyFromString(String key) throws Exception
{
    KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM_USED);
    BASE64Decoder b64 = new BASE64Decoder();
    EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(b64.decodeBuffer(key));
    PrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec);
    return privateKey;
}

public PublicKey getPublicKeyFromString(String key) throws Exception
{
    BASE64Decoder b64 = new BASE64Decoder();
    KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM_USED);
    EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(b64.decodeBuffer(key));
    PublicKey publicKey = keyFactory.generatePublic(publicKeySpec);
    return publicKey;
}

private String encodeToBASE64(byte[] bytes)
{
BASE64Encoder b64 = new BASE64Encoder();
return b64.encode(bytes);
}

private byte[] decodeToBASE64(String text) throws IOException
{
    BASE64Decoder b64 = new BASE64Decoder();
    return b64.decodeBuffer(text);
}

public static void main(String[] args) throws Exception {
    RSAUTIL rsa= new RSAUTIL();
    System.out.println(rsa.decrypt(rsa.encrypt(""123"",
    rsa.getPublicKeyFromString(rsa.getKeyAsString(rsa.getpublickey()))),
    rsa.getPrivateKeyFromString(rsa.getKeyAsString(rsa.getprivatekey()))));
}
</code></pre>

<p>}</p>

<p>OUTPUT: 123</p>
","","5766","<java><rsa><bouncycastle><jce>","0","","0","2013-07-19 07:21:37","","5","4","900447","","2013-07-19 07:21:37","2013-07-16 13:32:22",""
"24494265","Which Sun provider to use to generate an RSA key pair for encrypting (ciphering) data","<p>I am trying to find out which of the Sun cryptographic providers should be used for generating an RSA key pair that will be used <strong>encrypting</strong> data in Java. I know that there are other providers such as Bouncy Castle, but I would like to use one of the Sun Providers. (algorithm: RSA, key size 2048)</p>

<p>For example, on my machine I currently have the following providers available:</p>

<ul>
<li>SUN 1.7</li>
<li>SunRsaSign 1.7</li>
<li>SunEC 1.7</li>
<li>SunJSSE 1.7</li>
<li>SunJCE 1.7</li>
<li>SunJGSS 1.7</li>
<li>SunSASL 1.7</li>
<li>XMLDSig 1.0</li>
<li>SunPCSC 1.7</li>
</ul>

<p>I have previously used the provider SunRsaSign for generating an RSA key pair that was used for signing data. But I am not sure if it is safe or if it makes sense to use a key pair generated by SunRsaSign for encrypting data.</p>

<p>I have noticed that the provider SunJSSE contains: sun.security.rsa.RSAKeyPairGenerator</p>

<p>My main question is: which of the Sun providers should be used for generating an RSA key pair that will be used for <strong>encryption</strong> <strong>(not signing)</strong>?</p>

<p>Also, should a key pair generated by SunRsaSign only ever by used for signing data? Because the name of this provider contains the word ""Sign"" I assumed that it is specifically intended for signing, but now I am not so sure.</p>

<p>Finally, is it safe and does it makes sense to use a key pair generated by SunJSSE for general encryption? if so, what is the difference between an RSA generated by SunJSSE and an RSA key pair generated by SunJSSE?</p>
","<p>Of course you can have a look through all registered providers:</p>

<pre><code>Provider[] providers = Security.getProviders();
for (Provider provider : providers) {
    Set&lt;Service&gt; services = provider.getServices();
    for (Service service : services) {
        service.getAlgorithm();
        // find algorithm and retrieve service information
    }
}
</code></pre>

<p>but in this case the solution would be simpler:</p>

<pre><code>KeyPairGenerator kpgen = KeyPairGenerator.getInstance(""RSA"");
Provider kpgenProv = kpgen.getProvider();
System.out.printf(""Provider : %s%nInfo: %s%n"", kpgenProv.getName(), kpgenProv.toString());
</code></pre>

<p>Result:</p>

<pre class=""lang-none prettyprint-override""><code>Provider : SunRsaSign
Info: SunRsaSign version 1.7
</code></pre>

<hr>

<p>This is probably the only provider for your runtime that will generate RSA key pairs. Note that encryption is part of <code>javax.security</code>, which means that it was originally an optional package/provider (because of import/export control of cryptography).</p>

<p>RSA key creation is not encryption so it is included with <code>SunRsaSign</code> which provides RSA signature generation. As signatures are not used to provide confidentiality they are regarded as less sensitive cryptographic operations.</p>
","5144","<java><encryption><rsa><jce><jca>","3","2","2","2016-05-12 08:35:56","","2","","3441604","","2014-07-01 12:02:21","2014-06-30 15:58:27",""
"24494265","Which Sun provider to use to generate an RSA key pair for encrypting (ciphering) data","<p>I am trying to find out which of the Sun cryptographic providers should be used for generating an RSA key pair that will be used <strong>encrypting</strong> data in Java. I know that there are other providers such as Bouncy Castle, but I would like to use one of the Sun Providers. (algorithm: RSA, key size 2048)</p>

<p>For example, on my machine I currently have the following providers available:</p>

<ul>
<li>SUN 1.7</li>
<li>SunRsaSign 1.7</li>
<li>SunEC 1.7</li>
<li>SunJSSE 1.7</li>
<li>SunJCE 1.7</li>
<li>SunJGSS 1.7</li>
<li>SunSASL 1.7</li>
<li>XMLDSig 1.0</li>
<li>SunPCSC 1.7</li>
</ul>

<p>I have previously used the provider SunRsaSign for generating an RSA key pair that was used for signing data. But I am not sure if it is safe or if it makes sense to use a key pair generated by SunRsaSign for encrypting data.</p>

<p>I have noticed that the provider SunJSSE contains: sun.security.rsa.RSAKeyPairGenerator</p>

<p>My main question is: which of the Sun providers should be used for generating an RSA key pair that will be used for <strong>encryption</strong> <strong>(not signing)</strong>?</p>

<p>Also, should a key pair generated by SunRsaSign only ever by used for signing data? Because the name of this provider contains the word ""Sign"" I assumed that it is specifically intended for signing, but now I am not so sure.</p>

<p>Finally, is it safe and does it makes sense to use a key pair generated by SunJSSE for general encryption? if so, what is the difference between an RSA generated by SunJSSE and an RSA key pair generated by SunJSSE?</p>
","<p>The documentation indicates that SunJCE does not provide RSA keys, which can be founded on SunRsaSign. Such that, using both are necessary, one to get the keys ans other to get the cipher.</p>

<p>from: <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SunJCEProvider"" rel=""nofollow"">https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SunJCEProvider</a></p>

<p>The SunRsaSign Provider------------------------------------------------------------</p>

<p>KeyPairGenerator:</p>

<p>RSA 1024    Keysize must range between 512 and 65536 bits, the latter of which is unnecessarily large</p>

<p>The SunJCE Provider----------------------------------------------------------------</p>

<p>KeyPairGenerator</p>

<p>Diffie-Hellman (DH) 1024    Keysize must be a multiple of 64, ranging from 512 to 2048 (inclusive).</p>
","5144","<java><encryption><rsa><jce><jca>","3","0","2","2016-05-12 08:35:56","","2","","3441604","","2014-07-01 12:02:21","2014-06-30 15:58:27",""
"17903154","java.security.NoSuchAlgorithmException: Algorithm PBKDF2WithHmacSHA1 not available","<p>I have code in java 1.4 version there we got a new requirement like have decrypt a password from another webservice response, for that have to use AES 256 decryption, getting following exception: </p>

<pre><code>SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1""); 

java.security.NoSuchAlgorithmException: Algorithm PBKDF2WithHmacSHA1 not available 
at javax.crypto.SunJCE_b.a(DashoA12275) 
at javax.crypto.SecretKeyFactory.getInstance(DashoA12275) 
at ftpserver.AESEncrypter.main(AESEncrypter.java:107) 
</code></pre>

<p>I tried by copying jce_policy_1-4 version jars into java home security folder still am getting the above exception.<br>
Is there any solution in Java 1.4 without changing to 1.5 because running jboss server version 3.2.3 will not support java 1.5.</p>
","<p>Please try to install the Bouncy Castle cryptography <em>provider</em>.</p>

<p>It can be found starting from <a href=""http://www.bouncycastle.org/specifications.html"" rel=""nofollow"">here</a>. Look for PBKDF2WithHmacSHA1 on the front page and you will see that it is supported.</p>
","5090","<java><aes><jce>","2","1","1","2013-07-29 09:27:27","","4","","2071828","","2013-07-27 22:55:20","2013-07-27 22:39:19",""
"22333550","Encrypt String using PBEWithMD5AndDES to compare to stored hash with Java","<p>I am working with an application that stores challenge responses in some type of md5 hash.  There is an api method to check that all the responses are correct, but for some reason there is not a method to check one response which is a requirement that I have.  I'm not trying to decrypt. I'm just trying to encrypt the same way the application is doing it in order to compare. I do have a JCE library.  I'm afraid I'm pretty new to encryption so please help a noob out with a detailed answer.  Here's what I've gathered from a properties file:</p>

<pre><code>algorithm=PBEWithMD5AndDES
password=pooface
digest=MD5
</code></pre>

<p>A sample hash looks like this:</p>

<pre><code>MD5:MXgxY21tdXR4bjB0:oRu+jlpCO/eSdwMb0iTVbw==
</code></pre>

<p>They all return MD5:&lt;16chars>:&lt;24chars>.  Any guidance is helpful. Thanks in advance.</p>
","<p>Not really an ""Answer"", but a few pointers:</p>

<ul>
<li><p>In the absence of documentation, you'd probably be best off reverse-engineering the API implementation (if you have it, and it's legal) to figure out what it's doing. (From a point of principle, you ought to be in a position to demand documentation of the algorithm that the API uses to hash (or otherwise) the passwords, otherwise it's security-by-obscurity). In the absence of that:</p></li>
<li><p>The oRu+jlpCO/eSdwMb0iTVbw== is Base64-encoded binary. If you Base64-decode it you get 128 bits, which is the size of an MD5 hash: 0xa11bbe8e5a423bf79277031bd224d56f.</p></li>
<li><p>The MXgxY21tdXR4bjB0 is probably a salt (i.e. something added to the received password to protect against dictionary attacks: MD5(""password"") is known and easily pre-computed, whereas MD5(""MXgxY21tdXR4bjB0password"") isn't). This, together with the previous point, suggest that you compute the MD5 hash of the salt plus something else to produce the 128 bits that are produced by Base64-decoding the oRu... data.</p></li>
<li><p>PBE stands for password-based encryption, i.e. generate a symmetric key (using MD5 in this case) from a password (perhaps pooface in this case...) then use that key to encrypt something (perhaps encrypt the user's password) with DES. See ""AlgorithmParameters Algorithms"" in <a href=""http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html"" rel=""nofollow"">http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html</a>, and PKCS#5: <a href=""http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/pkcs-5-password-based-cryptography-standard.htm"" rel=""nofollow"">http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/pkcs-5-password-based-cryptography-standard.htm</a>.</p></li>
<li><p>DES is a block cipher with a block size of 64 bits, so the output (i.e. ciphertext) will be a multiple of 64 bits long. It's <em>possible</em> that this is stored directly in your sample hash, but unlikely, not least because that would mean that the ""MD5"" in your sample hash line would be meaningless.</p></li>
<li><p>I suspect (but it's only a guess) that:</p>

<ol>
<li>Use PBEWithMD5AndDes to derive a DES key based on the password ""pooface"".</li>
<li>Encrypt the user's password with that DES key.</li>
<li>Hash the salt and ciphertext with MD5, giving 128 bits of hash output.</li>
<li>Base64-encode the hash to give you the oRu... value.</li>
</ol></li>
<li><p>Other things to consider:</p>

<ul>
<li><p>The salt might be used to derive the encryption key.</p></li>
<li><p>The salt might be used within the encryption.</p></li>
<li><p>You say ""challenge response"": this probably means that the authenticating application invents a challenge (probably a random number), then gets the client to compute something based on this challenge and knowledge of some secret. The challenge <em>might</em> be the salt (but there are a few reasons why that might not be the case).</p></li>
<li><p>In the PBE you have two inputs: the password (used to derive the encryption key), and the thing being encrypted. I've assumed that response is encrypted using a key derived (using PBE/MD5) from ""pooface"". It's possible that this is the wrong way round: derive a key (using PBE/MD5) using the challenge response, and use that to encrypt ""pooface"". That seems less likely to me though.</p></li>
</ul></li>
</ul>

<p>Presumably you can create your own user with a known password (or challenge response, or whatever they call it), i.e. you can provide known input and see what output you end up with. That's useful from a reversing perspective. When figuring out what crypto is going on, I'd also use a few utilities:</p>

<ul>
<li>Write a Java prog that takes a password and outputs a DES encryption key (i.e. implements PBEWithMD5AndDes).</li>
<li>Familiarise yourself with the openssl command, which will do MD5 hashing, DES encryption and Base64 (en|de)coding on demand.</li>
</ul>

<p>BTW, using MD5 and DES is a bit poor these days...</p>
","4990","<java><encryption><md5><jce>","1","4","1","2014-03-12 13:36:23","22338104","1","","1234602","","2014-03-12 13:36:23","2014-03-11 18:30:18",""
"27557181","Java 1.7 + JSCH: java.security.InvalidKeyException: Key is too long for this algorithm","<p>I'm trying to use <a href=""http://www.jcraft.com/jsch/"" rel=""nofollow noreferrer"">JSCH</a> to upload a file to a remote <a href=""http://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol"" rel=""nofollow noreferrer"">SFTP</a> share. Every time I attempt to connect to the share from within my code, I get an exception that looks something like this:</p>

<pre><code>com.jcraft.jsch.JSchException: Session.connect: java.security.InvalidKeyException: Key is too long for this algorithm
    at com.jcraft.jsch.Session.connect(Session.java:558) ~[jsch-0.1.51.jar:na]
    at com.jcraft.jsch.Session.connect(Session.java:183) ~[jsch-0.1.51.jar:na]
</code></pre>

<p>I've seen <a href=""https://stackoverflow.com/questions/25404371/java8-jcraft-key-is-too-long-for-this-algorithm"">posts that describe this error</a> when upgrading to Java 8, but we're still on Java 7, and I don't know enough about Java's cryptography support to know if that matters.</p>

<p>Some people suggest installing JCE (Java Cryptography Extensions) to solve this problem, so I gave it a shot, but I still get the same error after copying the appropriate jar files into the /libs/security directory and restarting the application. We confirmed that JCE was installed by executing <a href=""http://sourceforge.net/p/jsch/mailman/message/32660306/"" rel=""nofollow noreferrer"">this script</a> and noting that the exception was not thrown.</p>

<p>I also tried connecting to the remote SFTP share from the terminal using the <code>sftp</code> command in verbose mode. Here's what I got:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: /etc/ssh_config line 102: Applying options for *
debug2: ssh_connect: needpriv 0
debug1: Connecting to XXXXXXXXXXXXX [XXXXXXXXXXXX] port XX.
debug1: Connection established.
debug3: Incorrect RSA1 identifier
debug3: Could not load ""/Users/XXXXX/.ssh/id_rsa"" as a RSA1 public key
debug1: identity file /Users/XXXXX/.ssh/id_rsa type 1
debug1: identity file /Users/XXXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version 3.2.9 SSH Secure Shell
debug1: no match: 3.2.9 SSH Secure Shell
debug2: fd 3 setting O_NONBLOCK
debug3: load_hostkeys: loading entries for host ""XXXXXXXXXXXXX"" from file ""/Users/XXXXX/.ssh/known_hosts""
debug3: load_hostkeys: loaded 0 keys
debug1: SSH2_MSG_KEXINIT sent
debug3: Received SSH2_MSG_IGNORE
debug1: SSH2_MSG_KEXINIT received
debug2: kex_parse_kexinit: diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ssh-rsa-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-rsa,ssh-dss
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: first_kex_follows 0 
debug2: kex_parse_kexinit: reserved 0 
debug2: kex_parse_kexinit: diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ssh-dss
debug2: kex_parse_kexinit: aes128-cbc,3des-cbc,twofish128-cbc,cast128-cbc,twofish-cbc,blowfish-cbc,aes192-cbc,aes256-cbc,twofish192-cbc,twofish256-cbc,arcfour
debug2: kex_parse_kexinit: aes128-cbc,3des-cbc,twofish128-cbc,cast128-cbc,twofish-cbc,blowfish-cbc,aes192-cbc,aes256-cbc,twofish192-cbc,twofish256-cbc,arcfour
debug2: kex_parse_kexinit: hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96
debug2: kex_parse_kexinit: hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib
debug2: kex_parse_kexinit: none,zlib
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: first_kex_follows 0 
debug2: kex_parse_kexinit: reserved 0 
debug2: mac_setup: found hmac-md5
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug2: mac_setup: found hmac-md5
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug2: dh_gen_key: priv key bits set: 122/256
debug2: bits set: 496/1024
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug3: Received SSH2_MSG_IGNORE
debug1: Server host key: DSA XXXXXXXXXXXXXXXXXXXXXXXX
debug3: load_hostkeys: loading entries for host ""XXXXXXXXXXXXX"" from file ""/Users/XXXXX/.ssh/known_hosts""
debug3: load_hostkeys: loaded 0 keys
debug3: load_hostkeys: loading entries for host ""XXXXXXXXXXXX"" from file ""/Users/XXXXX/.ssh/known_hosts""
debug3: load_hostkeys: loaded 0 keys
    The authenticity of host 'XXXXXXXXXXXXX (XXXXXXXXXXXX)' can't be established.
    DSA key fingerprint is XXXXXXXXXXXXXXXXXXXXXXXX.
    Are you sure you want to continue connecting (yes/no)? yes
    Warning: Permanently added 'XXXXXXXXXXXXX,XXXXXXXXXXXX' (DSA) to the list of known hosts.
debug2: bits set: 516/1024
debug1: ssh_dss_verify: signature correct
debug2: kex_derive_keys
debug2: set_newkeys: mode 1
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug3: Received SSH2_MSG_IGNORE
debug2: set_newkeys: mode 0
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug3: Received SSH2_MSG_IGNORE
debug2: service_accept: ssh-userauth
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug2: key: /Users/XXXXX/.ssh/id_rsa (0x7f8e28500a10),
debug2: key: /Users/XXXXX/.ssh/id_dsa (0x0),
debug3: Received SSH2_MSG_IGNORE
debug1: Authentications that can continue: publickey,password
debug3: start over, passed a different list publickey,password
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/XXXXX/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug3: Received SSH2_MSG_IGNORE
debug1: Authentications that can continue: password
debug3: start over, passed a different list password
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup password
debug3: remaining preferred: ,keyboard-interactive,password
debug3: authmethod_is_enabled password
debug1: Next authentication method: password
</code></pre>

<p>If I'm reading the output correctly (and I may not be) the handshake process settled on using <code>aes128-cbc</code> for key exchange and <code>hmac-md5</code> for the actual session encryption. According to <a href=""http://www.jcraft.com/jsch/"" rel=""nofollow noreferrer"">the JSCH documentation</a> (minimal though it may be), both of these algorithms are supported.</p>

<p>I can connect to this share with both the <code>sftp</code> command-line utility and with FileZilla, so the problem has to either be with JSCH or with my Java configuration, but I'm at a loss to figure out what's what.</p>

<p>Java version:</p>

<pre><code>java version ""1.7.0_71""
OpenJDK Runtime Environment
OpenJDK 64-Bit Server VM (build 24.65-b04, mixed mode)
</code></pre>

<p>JSCH version:</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.jcraft&lt;/groupId&gt;
    &lt;artifactId&gt;jsch&lt;/artifactId&gt;
    &lt;version&gt;0.1.51&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>Thanks in advance!</p>

<p><strong>EDIT:</strong> It looks like <a href=""https://bugs.openjdk.java.net/browse/JDK-8039921"" rel=""nofollow noreferrer"">a bug for this exact behaviour</a> was filed against the JDK, but was closed with no resolution. There's also <a href=""http://mail.openjdk.java.net/pipermail/security-dev/2014-September/011231.html"" rel=""nofollow noreferrer"">an email thread</a> between the maintainers of JSCH and the JDK developers that discusses the issue, but has no resolution.</p>
","<p>Install Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow"">click here to download</a></p>

<p>Replace local_policy.jar and US_export_policy.jar with unrestricted policy files at following location :
Java\jre7\lib\security\ </p>

<p>I had similar problem while encryption of data with ibm jre version 1.5 and tomcat.</p>
","4638","<java><java-7><sftp><jsch><jce>","9","-1","4","2016-08-03 20:16:13","27992301","8","1","-1","","2017-05-23 12:34:04","2014-12-18 22:59:25",""
"27557181","Java 1.7 + JSCH: java.security.InvalidKeyException: Key is too long for this algorithm","<p>I'm trying to use <a href=""http://www.jcraft.com/jsch/"" rel=""nofollow noreferrer"">JSCH</a> to upload a file to a remote <a href=""http://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol"" rel=""nofollow noreferrer"">SFTP</a> share. Every time I attempt to connect to the share from within my code, I get an exception that looks something like this:</p>

<pre><code>com.jcraft.jsch.JSchException: Session.connect: java.security.InvalidKeyException: Key is too long for this algorithm
    at com.jcraft.jsch.Session.connect(Session.java:558) ~[jsch-0.1.51.jar:na]
    at com.jcraft.jsch.Session.connect(Session.java:183) ~[jsch-0.1.51.jar:na]
</code></pre>

<p>I've seen <a href=""https://stackoverflow.com/questions/25404371/java8-jcraft-key-is-too-long-for-this-algorithm"">posts that describe this error</a> when upgrading to Java 8, but we're still on Java 7, and I don't know enough about Java's cryptography support to know if that matters.</p>

<p>Some people suggest installing JCE (Java Cryptography Extensions) to solve this problem, so I gave it a shot, but I still get the same error after copying the appropriate jar files into the /libs/security directory and restarting the application. We confirmed that JCE was installed by executing <a href=""http://sourceforge.net/p/jsch/mailman/message/32660306/"" rel=""nofollow noreferrer"">this script</a> and noting that the exception was not thrown.</p>

<p>I also tried connecting to the remote SFTP share from the terminal using the <code>sftp</code> command in verbose mode. Here's what I got:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: /etc/ssh_config line 102: Applying options for *
debug2: ssh_connect: needpriv 0
debug1: Connecting to XXXXXXXXXXXXX [XXXXXXXXXXXX] port XX.
debug1: Connection established.
debug3: Incorrect RSA1 identifier
debug3: Could not load ""/Users/XXXXX/.ssh/id_rsa"" as a RSA1 public key
debug1: identity file /Users/XXXXX/.ssh/id_rsa type 1
debug1: identity file /Users/XXXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version 3.2.9 SSH Secure Shell
debug1: no match: 3.2.9 SSH Secure Shell
debug2: fd 3 setting O_NONBLOCK
debug3: load_hostkeys: loading entries for host ""XXXXXXXXXXXXX"" from file ""/Users/XXXXX/.ssh/known_hosts""
debug3: load_hostkeys: loaded 0 keys
debug1: SSH2_MSG_KEXINIT sent
debug3: Received SSH2_MSG_IGNORE
debug1: SSH2_MSG_KEXINIT received
debug2: kex_parse_kexinit: diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ssh-rsa-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-rsa,ssh-dss
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: first_kex_follows 0 
debug2: kex_parse_kexinit: reserved 0 
debug2: kex_parse_kexinit: diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ssh-dss
debug2: kex_parse_kexinit: aes128-cbc,3des-cbc,twofish128-cbc,cast128-cbc,twofish-cbc,blowfish-cbc,aes192-cbc,aes256-cbc,twofish192-cbc,twofish256-cbc,arcfour
debug2: kex_parse_kexinit: aes128-cbc,3des-cbc,twofish128-cbc,cast128-cbc,twofish-cbc,blowfish-cbc,aes192-cbc,aes256-cbc,twofish192-cbc,twofish256-cbc,arcfour
debug2: kex_parse_kexinit: hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96
debug2: kex_parse_kexinit: hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib
debug2: kex_parse_kexinit: none,zlib
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: first_kex_follows 0 
debug2: kex_parse_kexinit: reserved 0 
debug2: mac_setup: found hmac-md5
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug2: mac_setup: found hmac-md5
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug2: dh_gen_key: priv key bits set: 122/256
debug2: bits set: 496/1024
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug3: Received SSH2_MSG_IGNORE
debug1: Server host key: DSA XXXXXXXXXXXXXXXXXXXXXXXX
debug3: load_hostkeys: loading entries for host ""XXXXXXXXXXXXX"" from file ""/Users/XXXXX/.ssh/known_hosts""
debug3: load_hostkeys: loaded 0 keys
debug3: load_hostkeys: loading entries for host ""XXXXXXXXXXXX"" from file ""/Users/XXXXX/.ssh/known_hosts""
debug3: load_hostkeys: loaded 0 keys
    The authenticity of host 'XXXXXXXXXXXXX (XXXXXXXXXXXX)' can't be established.
    DSA key fingerprint is XXXXXXXXXXXXXXXXXXXXXXXX.
    Are you sure you want to continue connecting (yes/no)? yes
    Warning: Permanently added 'XXXXXXXXXXXXX,XXXXXXXXXXXX' (DSA) to the list of known hosts.
debug2: bits set: 516/1024
debug1: ssh_dss_verify: signature correct
debug2: kex_derive_keys
debug2: set_newkeys: mode 1
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug3: Received SSH2_MSG_IGNORE
debug2: set_newkeys: mode 0
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug3: Received SSH2_MSG_IGNORE
debug2: service_accept: ssh-userauth
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug2: key: /Users/XXXXX/.ssh/id_rsa (0x7f8e28500a10),
debug2: key: /Users/XXXXX/.ssh/id_dsa (0x0),
debug3: Received SSH2_MSG_IGNORE
debug1: Authentications that can continue: publickey,password
debug3: start over, passed a different list publickey,password
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/XXXXX/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug3: Received SSH2_MSG_IGNORE
debug1: Authentications that can continue: password
debug3: start over, passed a different list password
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup password
debug3: remaining preferred: ,keyboard-interactive,password
debug3: authmethod_is_enabled password
debug1: Next authentication method: password
</code></pre>

<p>If I'm reading the output correctly (and I may not be) the handshake process settled on using <code>aes128-cbc</code> for key exchange and <code>hmac-md5</code> for the actual session encryption. According to <a href=""http://www.jcraft.com/jsch/"" rel=""nofollow noreferrer"">the JSCH documentation</a> (minimal though it may be), both of these algorithms are supported.</p>

<p>I can connect to this share with both the <code>sftp</code> command-line utility and with FileZilla, so the problem has to either be with JSCH or with my Java configuration, but I'm at a loss to figure out what's what.</p>

<p>Java version:</p>

<pre><code>java version ""1.7.0_71""
OpenJDK Runtime Environment
OpenJDK 64-Bit Server VM (build 24.65-b04, mixed mode)
</code></pre>

<p>JSCH version:</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.jcraft&lt;/groupId&gt;
    &lt;artifactId&gt;jsch&lt;/artifactId&gt;
    &lt;version&gt;0.1.51&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>Thanks in advance!</p>

<p><strong>EDIT:</strong> It looks like <a href=""https://bugs.openjdk.java.net/browse/JDK-8039921"" rel=""nofollow noreferrer"">a bug for this exact behaviour</a> was filed against the JDK, but was closed with no resolution. There's also <a href=""http://mail.openjdk.java.net/pipermail/security-dev/2014-September/011231.html"" rel=""nofollow noreferrer"">an email thread</a> between the maintainers of JSCH and the JDK developers that discusses the issue, but has no resolution.</p>
","<p>We ended up swapping JSCH out for <a href=""https://github.com/hierynomus/sshj"" rel=""nofollow"">SSHJ</a>. It depends on the <a href=""http://www.bouncycastle.org/"" rel=""nofollow"">BouncyCastle</a> crypto libraries rather than on Java's built-in crypto packages, and is capable of connecting to our server with no problems.</p>
","4638","<java><java-7><sftp><jsch><jce>","9","2","4","2016-08-03 20:16:13","27992301","8","1","-1","","2017-05-23 12:34:04","2014-12-18 22:59:25",""
"27557181","Java 1.7 + JSCH: java.security.InvalidKeyException: Key is too long for this algorithm","<p>I'm trying to use <a href=""http://www.jcraft.com/jsch/"" rel=""nofollow noreferrer"">JSCH</a> to upload a file to a remote <a href=""http://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol"" rel=""nofollow noreferrer"">SFTP</a> share. Every time I attempt to connect to the share from within my code, I get an exception that looks something like this:</p>

<pre><code>com.jcraft.jsch.JSchException: Session.connect: java.security.InvalidKeyException: Key is too long for this algorithm
    at com.jcraft.jsch.Session.connect(Session.java:558) ~[jsch-0.1.51.jar:na]
    at com.jcraft.jsch.Session.connect(Session.java:183) ~[jsch-0.1.51.jar:na]
</code></pre>

<p>I've seen <a href=""https://stackoverflow.com/questions/25404371/java8-jcraft-key-is-too-long-for-this-algorithm"">posts that describe this error</a> when upgrading to Java 8, but we're still on Java 7, and I don't know enough about Java's cryptography support to know if that matters.</p>

<p>Some people suggest installing JCE (Java Cryptography Extensions) to solve this problem, so I gave it a shot, but I still get the same error after copying the appropriate jar files into the /libs/security directory and restarting the application. We confirmed that JCE was installed by executing <a href=""http://sourceforge.net/p/jsch/mailman/message/32660306/"" rel=""nofollow noreferrer"">this script</a> and noting that the exception was not thrown.</p>

<p>I also tried connecting to the remote SFTP share from the terminal using the <code>sftp</code> command in verbose mode. Here's what I got:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: /etc/ssh_config line 102: Applying options for *
debug2: ssh_connect: needpriv 0
debug1: Connecting to XXXXXXXXXXXXX [XXXXXXXXXXXX] port XX.
debug1: Connection established.
debug3: Incorrect RSA1 identifier
debug3: Could not load ""/Users/XXXXX/.ssh/id_rsa"" as a RSA1 public key
debug1: identity file /Users/XXXXX/.ssh/id_rsa type 1
debug1: identity file /Users/XXXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version 3.2.9 SSH Secure Shell
debug1: no match: 3.2.9 SSH Secure Shell
debug2: fd 3 setting O_NONBLOCK
debug3: load_hostkeys: loading entries for host ""XXXXXXXXXXXXX"" from file ""/Users/XXXXX/.ssh/known_hosts""
debug3: load_hostkeys: loaded 0 keys
debug1: SSH2_MSG_KEXINIT sent
debug3: Received SSH2_MSG_IGNORE
debug1: SSH2_MSG_KEXINIT received
debug2: kex_parse_kexinit: diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ssh-rsa-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-rsa,ssh-dss
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: first_kex_follows 0 
debug2: kex_parse_kexinit: reserved 0 
debug2: kex_parse_kexinit: diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ssh-dss
debug2: kex_parse_kexinit: aes128-cbc,3des-cbc,twofish128-cbc,cast128-cbc,twofish-cbc,blowfish-cbc,aes192-cbc,aes256-cbc,twofish192-cbc,twofish256-cbc,arcfour
debug2: kex_parse_kexinit: aes128-cbc,3des-cbc,twofish128-cbc,cast128-cbc,twofish-cbc,blowfish-cbc,aes192-cbc,aes256-cbc,twofish192-cbc,twofish256-cbc,arcfour
debug2: kex_parse_kexinit: hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96
debug2: kex_parse_kexinit: hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib
debug2: kex_parse_kexinit: none,zlib
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: first_kex_follows 0 
debug2: kex_parse_kexinit: reserved 0 
debug2: mac_setup: found hmac-md5
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug2: mac_setup: found hmac-md5
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug2: dh_gen_key: priv key bits set: 122/256
debug2: bits set: 496/1024
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug3: Received SSH2_MSG_IGNORE
debug1: Server host key: DSA XXXXXXXXXXXXXXXXXXXXXXXX
debug3: load_hostkeys: loading entries for host ""XXXXXXXXXXXXX"" from file ""/Users/XXXXX/.ssh/known_hosts""
debug3: load_hostkeys: loaded 0 keys
debug3: load_hostkeys: loading entries for host ""XXXXXXXXXXXX"" from file ""/Users/XXXXX/.ssh/known_hosts""
debug3: load_hostkeys: loaded 0 keys
    The authenticity of host 'XXXXXXXXXXXXX (XXXXXXXXXXXX)' can't be established.
    DSA key fingerprint is XXXXXXXXXXXXXXXXXXXXXXXX.
    Are you sure you want to continue connecting (yes/no)? yes
    Warning: Permanently added 'XXXXXXXXXXXXX,XXXXXXXXXXXX' (DSA) to the list of known hosts.
debug2: bits set: 516/1024
debug1: ssh_dss_verify: signature correct
debug2: kex_derive_keys
debug2: set_newkeys: mode 1
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug3: Received SSH2_MSG_IGNORE
debug2: set_newkeys: mode 0
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug3: Received SSH2_MSG_IGNORE
debug2: service_accept: ssh-userauth
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug2: key: /Users/XXXXX/.ssh/id_rsa (0x7f8e28500a10),
debug2: key: /Users/XXXXX/.ssh/id_dsa (0x0),
debug3: Received SSH2_MSG_IGNORE
debug1: Authentications that can continue: publickey,password
debug3: start over, passed a different list publickey,password
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/XXXXX/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug3: Received SSH2_MSG_IGNORE
debug1: Authentications that can continue: password
debug3: start over, passed a different list password
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup password
debug3: remaining preferred: ,keyboard-interactive,password
debug3: authmethod_is_enabled password
debug1: Next authentication method: password
</code></pre>

<p>If I'm reading the output correctly (and I may not be) the handshake process settled on using <code>aes128-cbc</code> for key exchange and <code>hmac-md5</code> for the actual session encryption. According to <a href=""http://www.jcraft.com/jsch/"" rel=""nofollow noreferrer"">the JSCH documentation</a> (minimal though it may be), both of these algorithms are supported.</p>

<p>I can connect to this share with both the <code>sftp</code> command-line utility and with FileZilla, so the problem has to either be with JSCH or with my Java configuration, but I'm at a loss to figure out what's what.</p>

<p>Java version:</p>

<pre><code>java version ""1.7.0_71""
OpenJDK Runtime Environment
OpenJDK 64-Bit Server VM (build 24.65-b04, mixed mode)
</code></pre>

<p>JSCH version:</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.jcraft&lt;/groupId&gt;
    &lt;artifactId&gt;jsch&lt;/artifactId&gt;
    &lt;version&gt;0.1.51&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>Thanks in advance!</p>

<p><strong>EDIT:</strong> It looks like <a href=""https://bugs.openjdk.java.net/browse/JDK-8039921"" rel=""nofollow noreferrer"">a bug for this exact behaviour</a> was filed against the JDK, but was closed with no resolution. There's also <a href=""http://mail.openjdk.java.net/pipermail/security-dev/2014-September/011231.html"" rel=""nofollow noreferrer"">an email thread</a> between the maintainers of JSCH and the JDK developers that discusses the issue, but has no resolution.</p>
","<p>Actually, the <a href=""https://bugs.openjdk.java.net/browse/JDK-8039921"" rel=""nofollow"">bug for this behaviour</a> that was filed against the JDK was not closed - the decision to close it was reverted and it has been <em>fixed</em> a few days later. It has later been backported, so <em>upgrading to <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html"" rel=""nofollow"">Java SE 8u45</a> (or higher) solves the issue</em> as well.</p>
","4638","<java><java-7><sftp><jsch><jce>","9","0","4","2016-08-03 20:16:13","27992301","8","1","-1","","2017-05-23 12:34:04","2014-12-18 22:59:25",""
"27557181","Java 1.7 + JSCH: java.security.InvalidKeyException: Key is too long for this algorithm","<p>I'm trying to use <a href=""http://www.jcraft.com/jsch/"" rel=""nofollow noreferrer"">JSCH</a> to upload a file to a remote <a href=""http://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol"" rel=""nofollow noreferrer"">SFTP</a> share. Every time I attempt to connect to the share from within my code, I get an exception that looks something like this:</p>

<pre><code>com.jcraft.jsch.JSchException: Session.connect: java.security.InvalidKeyException: Key is too long for this algorithm
    at com.jcraft.jsch.Session.connect(Session.java:558) ~[jsch-0.1.51.jar:na]
    at com.jcraft.jsch.Session.connect(Session.java:183) ~[jsch-0.1.51.jar:na]
</code></pre>

<p>I've seen <a href=""https://stackoverflow.com/questions/25404371/java8-jcraft-key-is-too-long-for-this-algorithm"">posts that describe this error</a> when upgrading to Java 8, but we're still on Java 7, and I don't know enough about Java's cryptography support to know if that matters.</p>

<p>Some people suggest installing JCE (Java Cryptography Extensions) to solve this problem, so I gave it a shot, but I still get the same error after copying the appropriate jar files into the /libs/security directory and restarting the application. We confirmed that JCE was installed by executing <a href=""http://sourceforge.net/p/jsch/mailman/message/32660306/"" rel=""nofollow noreferrer"">this script</a> and noting that the exception was not thrown.</p>

<p>I also tried connecting to the remote SFTP share from the terminal using the <code>sftp</code> command in verbose mode. Here's what I got:</p>

<pre><code>OpenSSH_6.2p2, OSSLShim 0.9.8r 8 Dec 2011
debug1: Reading configuration data /etc/ssh_config
debug1: /etc/ssh_config line 20: Applying options for *
debug1: /etc/ssh_config line 102: Applying options for *
debug2: ssh_connect: needpriv 0
debug1: Connecting to XXXXXXXXXXXXX [XXXXXXXXXXXX] port XX.
debug1: Connection established.
debug3: Incorrect RSA1 identifier
debug3: Could not load ""/Users/XXXXX/.ssh/id_rsa"" as a RSA1 public key
debug1: identity file /Users/XXXXX/.ssh/id_rsa type 1
debug1: identity file /Users/XXXXX/.ssh/id_rsa-cert type -1
debug1: identity file /Users/XXXXX/.ssh/id_dsa type -1
debug1: identity file /Users/XXXXX/.ssh/id_dsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_6.2
debug1: Remote protocol version 2.0, remote software version 3.2.9 SSH Secure Shell
debug1: no match: 3.2.9 SSH Secure Shell
debug2: fd 3 setting O_NONBLOCK
debug3: load_hostkeys: loading entries for host ""XXXXXXXXXXXXX"" from file ""/Users/XXXXX/.ssh/known_hosts""
debug3: load_hostkeys: loaded 0 keys
debug1: SSH2_MSG_KEXINIT sent
debug3: Received SSH2_MSG_IGNORE
debug1: SSH2_MSG_KEXINIT received
debug2: kex_parse_kexinit: diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ssh-rsa-cert-v01@openssh.com,ssh-dss-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-dss-cert-v00@openssh.com,ssh-rsa,ssh-dss
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour,rijndael-cbc@lysator.liu.se
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: hmac-md5-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-md5,hmac-sha1,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: none,zlib@openssh.com,zlib
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: first_kex_follows 0 
debug2: kex_parse_kexinit: reserved 0 
debug2: kex_parse_kexinit: diffie-hellman-group1-sha1
debug2: kex_parse_kexinit: ssh-dss
debug2: kex_parse_kexinit: aes128-cbc,3des-cbc,twofish128-cbc,cast128-cbc,twofish-cbc,blowfish-cbc,aes192-cbc,aes256-cbc,twofish192-cbc,twofish256-cbc,arcfour
debug2: kex_parse_kexinit: aes128-cbc,3des-cbc,twofish128-cbc,cast128-cbc,twofish-cbc,blowfish-cbc,aes192-cbc,aes256-cbc,twofish192-cbc,twofish256-cbc,arcfour
debug2: kex_parse_kexinit: hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96
debug2: kex_parse_kexinit: hmac-sha1,hmac-sha1-96,hmac-md5,hmac-md5-96
debug2: kex_parse_kexinit: none,zlib
debug2: kex_parse_kexinit: none,zlib
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: 
debug2: kex_parse_kexinit: first_kex_follows 0 
debug2: kex_parse_kexinit: reserved 0 
debug2: mac_setup: found hmac-md5
debug1: kex: server-&gt;client aes128-cbc hmac-md5 none
debug2: mac_setup: found hmac-md5
debug1: kex: client-&gt;server aes128-cbc hmac-md5 none
debug2: dh_gen_key: priv key bits set: 122/256
debug2: bits set: 496/1024
debug1: sending SSH2_MSG_KEXDH_INIT
debug1: expecting SSH2_MSG_KEXDH_REPLY
debug3: Received SSH2_MSG_IGNORE
debug1: Server host key: DSA XXXXXXXXXXXXXXXXXXXXXXXX
debug3: load_hostkeys: loading entries for host ""XXXXXXXXXXXXX"" from file ""/Users/XXXXX/.ssh/known_hosts""
debug3: load_hostkeys: loaded 0 keys
debug3: load_hostkeys: loading entries for host ""XXXXXXXXXXXX"" from file ""/Users/XXXXX/.ssh/known_hosts""
debug3: load_hostkeys: loaded 0 keys
    The authenticity of host 'XXXXXXXXXXXXX (XXXXXXXXXXXX)' can't be established.
    DSA key fingerprint is XXXXXXXXXXXXXXXXXXXXXXXX.
    Are you sure you want to continue connecting (yes/no)? yes
    Warning: Permanently added 'XXXXXXXXXXXXX,XXXXXXXXXXXX' (DSA) to the list of known hosts.
debug2: bits set: 516/1024
debug1: ssh_dss_verify: signature correct
debug2: kex_derive_keys
debug2: set_newkeys: mode 1
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug3: Received SSH2_MSG_IGNORE
debug2: set_newkeys: mode 0
debug1: SSH2_MSG_NEWKEYS received
debug1: Roaming not allowed by server
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug3: Received SSH2_MSG_IGNORE
debug2: service_accept: ssh-userauth
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug2: key: /Users/XXXXX/.ssh/id_rsa (0x7f8e28500a10),
debug2: key: /Users/XXXXX/.ssh/id_dsa (0x0),
debug3: Received SSH2_MSG_IGNORE
debug1: Authentications that can continue: publickey,password
debug3: start over, passed a different list publickey,password
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup publickey
debug3: remaining preferred: keyboard-interactive,password
debug3: authmethod_is_enabled publickey
debug1: Next authentication method: publickey
debug1: Offering RSA public key: /Users/XXXXX/.ssh/id_rsa
debug3: send_pubkey_test
debug2: we sent a publickey packet, wait for reply
debug3: Received SSH2_MSG_IGNORE
debug1: Authentications that can continue: password
debug3: start over, passed a different list password
debug3: preferred publickey,keyboard-interactive,password
debug3: authmethod_lookup password
debug3: remaining preferred: ,keyboard-interactive,password
debug3: authmethod_is_enabled password
debug1: Next authentication method: password
</code></pre>

<p>If I'm reading the output correctly (and I may not be) the handshake process settled on using <code>aes128-cbc</code> for key exchange and <code>hmac-md5</code> for the actual session encryption. According to <a href=""http://www.jcraft.com/jsch/"" rel=""nofollow noreferrer"">the JSCH documentation</a> (minimal though it may be), both of these algorithms are supported.</p>

<p>I can connect to this share with both the <code>sftp</code> command-line utility and with FileZilla, so the problem has to either be with JSCH or with my Java configuration, but I'm at a loss to figure out what's what.</p>

<p>Java version:</p>

<pre><code>java version ""1.7.0_71""
OpenJDK Runtime Environment
OpenJDK 64-Bit Server VM (build 24.65-b04, mixed mode)
</code></pre>

<p>JSCH version:</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;com.jcraft&lt;/groupId&gt;
    &lt;artifactId&gt;jsch&lt;/artifactId&gt;
    &lt;version&gt;0.1.51&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>Thanks in advance!</p>

<p><strong>EDIT:</strong> It looks like <a href=""https://bugs.openjdk.java.net/browse/JDK-8039921"" rel=""nofollow noreferrer"">a bug for this exact behaviour</a> was filed against the JDK, but was closed with no resolution. There's also <a href=""http://mail.openjdk.java.net/pipermail/security-dev/2014-September/011231.html"" rel=""nofollow noreferrer"">an email thread</a> between the maintainers of JSCH and the JDK developers that discusses the issue, but has no resolution.</p>
","<p>You can force JSCH to use SHA256 instead of SHA1 with <code>keysize &gt; 1024</code> (which JSSE doesn't allow anymore) like this:</p>

<pre><code>java.util.Properties configuration = new java.util.Properties();
configuration.put(""kex"", ""diffie-hellman-group-exchange-sha256"");           
configuration.put(""StrictHostKeyChecking"", ""no"");
session.setConfig(configuration);
</code></pre>
","4638","<java><java-7><sftp><jsch><jce>","9","1","4","2016-08-03 20:16:13","27992301","8","1","-1","","2017-05-23 12:34:04","2014-12-18 22:59:25",""
"2653591","Decrypting “long” message encrypted with RSA java","<p>Hi this is the same question, that was asked two years ago:
<a href=""https://stackoverflow.com/questions/295436/java-jce-decrypting-long-message-encrypted-with-rsa"">Java/JCE: Decrypting “long” message encrypted with RSA</a></p>

<p>I had a large byte array and rsa keypair, initiated by value 1024.
Using rsa encryption and the specified size of the key is strong requirement, I can't change it. So I can't use symmetric encryption with asymetric encryption symmetric key. I can't use any other keys. I had a byte array and need ciphered byte array to be returned. I wonder if there is any ready tool, that can manage with this problem? </p>

<p>Sorry for such an amateurish question, but I really need a help.</p>
","<p>As stated, your question has a single answer, and that's ""no"". RSA encryption is an algorithm which encrypts messages up to a given size, which depends on the key size; with a 1024-bit RSA key, and RSA as <a href=""http://www.rsa.com/rsalabs/node.asp?id=2125"" rel=""noreferrer"">the standard</a> describes it, the maximum size is 117 bytes, no more. There is no way to encrypt a larger message with RSA alone, and that's a definite, mathematical certainty.</p>

<p>If you really need to process longer messages, then you <em>necessarily</em> have to add something else. In that case, please, <em>please</em>, do not try to do anything fancy of your own devising with some oh-so-clever splitting of data into small blocks and the like. That path leads to doom. You might produce something which <em>appears</em> to compile and run, but which will be invariably weak in some way, like almost every other home-made variation on cryptography. That's because security cannot be tested: it is not a case of ""works"" or ""does not work"".</p>

<p>The well-trodden path of asymmetric encryption goes thus:</p>

<ol>
<li>You select a random sequence of bytes of some appropriate length, e.g. 128 bits (that's 16 bytes). Let's call it <em>K</em>.</li>
<li>You encrypt <em>K</em> with the RSA public key; this yields <em>E</em>.</li>
<li>You encrypt the message with <em>K</em> using a symmetric encryption algorithm (<code>""AES/CBC/PKCS5Padding""</code>). Since this is a one-shot key, you can use an all-zeros IV. This yields a bunch of bytes, let's call it <em>F</em>.</li>
<li>The encrypted message is then the concatenation of <em>E</em> and <em>F</em>.</li>
</ol>

<p>Decryption proceeds in the reverse order: the RSA private key is used to recover <em>K</em> from <em>E</em>, then <em>K</em> is used to decrypt <em>F</em> into the original message. The key <em>K</em> is never stored anywhere, and a <em>new key K</em> is generated every time (even if you encrypt the same message twice). That's important, do not change that unless you understand what you are doing (and if you do, then you already know that).</p>

<p>Given what you state about your problem, you <em>have</em> to do something else than ""just RSA"". The procedure I describe above is about the best ""something else"" that you could come up with, security-wise.</p>

<p>Assembling some cryptographic elements into such a protocol is a process fraught with pitfalls so you may have better luck using an already defined format and support library. Two common formats for asymmetric encryption are <a href=""http://tools.ietf.org/html/rfc3370"" rel=""noreferrer"">CMS</a> and <a href=""http://tools.ietf.org/html/rfc4880"" rel=""noreferrer"">OpenPGP</a>. A library which supports both and has good reputation is <a href=""http://www.bouncycastle.org/java.html"" rel=""noreferrer"">Bouncy Castle</a>.</p>
","4622","<java><encryption><rsa><encryption-asymmetric><jce>","4","12","2","2014-05-18 15:15:03","2654368","0","6","-1","","2017-05-23 12:08:54","2010-04-16 14:19:33",""
"2653591","Decrypting “long” message encrypted with RSA java","<p>Hi this is the same question, that was asked two years ago:
<a href=""https://stackoverflow.com/questions/295436/java-jce-decrypting-long-message-encrypted-with-rsa"">Java/JCE: Decrypting “long” message encrypted with RSA</a></p>

<p>I had a large byte array and rsa keypair, initiated by value 1024.
Using rsa encryption and the specified size of the key is strong requirement, I can't change it. So I can't use symmetric encryption with asymetric encryption symmetric key. I can't use any other keys. I had a byte array and need ciphered byte array to be returned. I wonder if there is any ready tool, that can manage with this problem? </p>

<p>Sorry for such an amateurish question, but I really need a help.</p>
","<p>If you do need to encrypt/decrypt long strings using RSA, then you can break the bytes up in to smaller ""chunks"" and process each chunk of bytes through the cipher one at a time while storing the results in a ByteBuffer.</p>

<p><strong>Encryption:</strong></p>

<pre><code>byte[] encData = null;
try {

    // create public key
    X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(key);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    PublicKey pk = kf.generatePublic(publicKeySpec);

    Cipher pkCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    pkCipher.init(Cipher.ENCRYPT_MODE, pk);

    int chunkSize = 117; // 1024 / 8 - 11(padding) = 117
    int encSize = (int) (Math.ceil(data.length/117.0)*128);
    int idx = 0;
    ByteBuffer buf = ByteBuffer.allocate(encSize);
    while (idx &lt; data.length) {
        int len = Math.min(data.length-idx, chunkSize);
        byte[] encChunk = pkCipher.doFinal(data, idx, len);
        buf.put(encChunk);
        idx += len;
    }

    // fully encrypted data     
    encData = buf.array();
} catch (Exception e) {
    e.printStackTrace();
</code></pre>

<p><strong>Decryption</strong>   </p>

<pre><code>Cipher rsaCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
rsaCipher.init(Cipher.DECRYPT_MODE, rsaPk);

int chunkSize = 128;
int idx = 0;
ByteBuffer buf = ByteBuffer.allocate(data.length);
while(idx &lt; data.length) {
    int len = Math.min(data.length-idx, chunkSize);
    byte[] chunk = rsaCipher.doFinal(data, idx, len);
    buf.put(chunk);
    idx += len;
}

// fully decrypted data
byte[] decryptedData = buf.array();
</code></pre>
","4622","<java><encryption><rsa><encryption-asymmetric><jce>","4","1","2","2014-05-18 15:15:03","2654368","0","6","-1","","2017-05-23 12:08:54","2010-04-16 14:19:33",""
"29922176","java.security.NoSuchAlgorithmException: Cannot find any provider supporting RSA/NONE/PKCS1Padding in jar-file","<p>I do to decrypt and encrypt RSA, I use <code>Cipher.getInstance(""RSA/NONE/PKCS1Padding"");</code> for it, and I added <code>Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());</code> and <code>compile 'org.bouncycastle:bcprov-jdk16:1.45'</code> to gradle-file. So this project to run and work in Intellij Idea, </p>

<p>But if I generate .jar file and to run it, I have: </p>

<pre><code>java.security.NoSuchAlgorithmException: Cannot find any provider supporting RSA/NONE/PKCS1Padding
    at javax.crypto.Cipher.getInstance(Cipher.java:540) 
</code></pre>

<p>(generated .jar by ShadowJar task of gradle). </p>

<p>Why my project in Intellij Idea - work! And in .jar-file - does not work?</p>
","<p><code>""RSA/NONE/PKCS1Padding""</code> is not something that is available in default security providers of most JDKs. You can use <code>""RSA/ECB/PKCS1Padding""</code> which means the same thing, but uses the ECB name for backwards compatibility.</p>

<p>The BouncyCastle provider does give access to <code>""RSA/NONE/PKCS1Padding""</code>, but then you need to query it specifically, because adding a provider to the provider list doesn't make it a default provider:</p>

<pre><code>Cipher.getInstance(""RSA/NONE/PKCS1Padding""<strong>, ""BC""</strong>);</code></pre>
","4479","<java><intellij-idea><gradle><jar><jce>","1","3","1","2016-01-08 09:57:04","","1","3","1816580","","2016-01-08 09:57:04","2015-04-28 14:18:37",""
"6575450","Encrypting data with Objective-C and decrypt it with Java Problem","<p>I have an iPhone solutions that uses XML to transmit data between the client (mobile) and the server (Java). Some of the parts of the message (XML) must be encrypted because of the type of information transmitted. I planned to use AES 128 to encrypt and decrypt the data between these two endpoints. </p>

<p>First the sensitive data is encrypted using Object-C's CommonCrypto framework, and then the data is decrypted inside a Java Server (Servlet).</p>

<p>I'm new to security protocols and standards, and basically my code is a subset of group of informations that I could gather on Apple's dev forum/resources, and the internet (Google) :-)</p>

<p>The basic flow is:</p>

<ol>
<li>The data is encrypted using AES (using a pre-set key).</li>
<li>The encrypted bytes are putted within the XML (using base64)</li>
<li>The data is gathered from the XML, and decrypted using the same pre-setted key;</li>
</ol>

<p>The encryption part of the Object-C code is:</p>

<pre><code>char keyPtr [ kCCKeySizeAES128 +1 ];
bzero( keyPtr, sizeof(keyPtr) );

// The secret key is masked for obvious reason, but you can use ""12345678912345678912345678912345""
[key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];

NSUInteger dataLength = [data length];
// Initialization vector; dummy in this case 0's.
uint8_t iv[ kCCBlockSizeAES128 ];
memset((void *) iv, 0x0, (size_t) sizeof(iv));
/*
 For block ciphers, the output size will always be less than or
 equal to the input size plus the size of one block.
*/
size_t bufferSize = (dataLength + kCCBlockSizeAES128);
void  *buffer     = malloc(bufferSize);
memset(buffer, 0x0, bufferSize);

size_t numBytesEncrypted    = 0;
CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES128, 
                                      kCCOptionECBMode + kCCOptionPKCS7Padding,
                                      keyPtr, kCCKeySizeAES128,
                                      iv, [data bytes], dataLength, /* input */
                                      buffer, bufferSize, /* output */
                                      &amp;numBytesEncrypted);

if (cryptStatus == kCCSuccess) {
    return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];
}

free(buffer); //free the buffer;
return nil;
</code></pre>

<p>The Java code part is:</p>

<pre><code>Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
byte[] keyBytes = DES_KEY.getBytes(); //&lt;== The same as above

SecretKeySpec keySpec = new SecretKeySpec(keyBytes, ""AES"");

try {
    // Return the raw bytes 
    byte []data = Base64.decode(encryptedContent);

    // Gets the Cipher...
    final Cipher cipher = Cipher.getInstance(""AES/ECB/PKCS7Padding"", ""BC"");
    cipher.init(Cipher.DECRYPT_MODE, keySpec);

    String resultString = new String(cipher.doFinal(data));
} catch (Exception ex) {
    ...
}
</code></pre>

<p>The error I get when running these solution above in the Java Server is:</p>

<pre><code>15:57:43,671 ERROR [STDERR] com.iteatros.aim.services.ServiceException: javax.crypto.BadPaddingException: pad block corrupted
15:57:43,674 ERROR [STDERR]     at com.iteatros.aim.services.security.SecurityWrapper.decrypt3DESBase64StringData(SecurityWrapper.java:109)
15:57:43,674 ERROR [STDERR]     at com.iteatros.aim.services.db.LoginDAO.login(LoginDAO.java:53)
15:57:43,674 ERROR [STDERR]     at com.iteatros.aim.services.AbstractService.authenticate(AbstractService.java:278)
15:57:43,674 ERROR [STDERR]     at com.iteatros.aim.services.AbstractService.doPost(AbstractService.java:165)
15:57:43,674 ERROR [STDERR]     at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)
15:57:43,674 ERROR [STDERR]     at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)
15:57:43,674 ERROR [STDERR]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)
15:57:43,675 ERROR [STDERR]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
15:57:43,675 ERROR [STDERR]     at org.jboss.web.tomcat.filters.ReplyHeaderFilter.doFilter(ReplyHeaderFilter.java:96)
15:57:43,675 ERROR [STDERR]     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)
15:57:43,676 ERROR [STDERR]     at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
15:57:43,676 ERROR [STDERR]     at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:235)
15:57:43,676 ERROR [STDERR]     at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)
15:57:43,676 ERROR [STDERR]     at org.jboss.web.tomcat.security.SecurityAssociationValve.invoke(SecurityAssociationValve.java:190)
15:57:43,676 ERROR [STDERR]     at org.jboss.web.tomcat.security.JaccContextValve.invoke(JaccContextValve.java:92)
15:57:43,676 ERROR [STDERR]     at org.jboss.web.tomcat.security.SecurityContextEstablishmentValve.process(SecurityContextEstablishmentValve.java:126)
15:57:43,676 ERROR [STDERR]     at org.jboss.web.tomcat.security.SecurityContextEstablishmentValve.invoke(SecurityContextEstablishmentValve.java:70)
15:57:43,677 ERROR [STDERR]     at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)
15:57:43,677 ERROR [STDERR]     at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)
15:57:43,677 ERROR [STDERR]     at org.jboss.web.tomcat.service.jca.CachedConnectionValve.invoke(CachedConnectionValve.java:158)
15:57:43,677 ERROR [STDERR]     at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)
15:57:43,677 ERROR [STDERR]     at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:330)
15:57:43,677 ERROR [STDERR]     at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:829)
15:57:43,677 ERROR [STDERR]     at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:601)
15:57:43,677 ERROR [STDERR]     at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)
15:57:43,677 ERROR [STDERR]     at java.lang.Thread.run(Thread.java:680)
</code></pre>

<p>I know that the full stack wasn't needed, but anyways...</p>

<p>Thanx much in advance.</p>

<p>Joao</p>
","<p>This code works for me. Give a look:</p>

<p>AES 128 IOS</p>

<pre><code>+ (NSString *) encrypt:(NSString *) dataToEncrypt withKey:(NSString*) key{    


NSData *data = [dataToEncrypt dataUsingEncoding:NSUTF8StringEncoding];
NSData *mData = [key dataUsingEncoding:NSUTF8StringEncoding];

CCCryptorStatus ccStatus = kCCSuccess;


// Begin to calculate bytesNeeded....

size_t bytesNeeded = 0;

ccStatus = CCCrypt(kCCEncrypt,
                   kCCAlgorithmAES,
                   kCCOptionECBMode | kCCOptionPKCS7Padding,
                   [mData bytes],
                   [mData length],
                   nil,
                   [data bytes],
                   [data length],
                   NULL,
                   0,
                   &amp;bytesNeeded);

if(kCCBufferTooSmall != ccStatus){

    NSLog(@""Here it must return BUFFER TOO SMALL !!"");
    return nil;
}

// .....End
// Now i do the real Crypting

char* cypherBytes = malloc(bytesNeeded);
size_t bufferLength = bytesNeeded;

if(NULL == cypherBytes)
    NSLog(@""cypherBytes NULL"");

ccStatus = CCCrypt(kCCEncrypt,
                   kCCAlgorithmAES,
                   kCCOptionECBMode | kCCOptionPKCS7Padding,
                   [mData bytes],
                   [mData length],
                   nil,
                   [data bytes],
                   [data length],
                   cypherBytes,
                   bufferLength,
                   &amp;bytesNeeded);

if(kCCSuccess != ccStatus){
    NSLog(@""kCCSuccess NO!"");
    return nil;
}

return [Base64 encode:[NSData dataWithBytes:cypherBytes length:bufferLength]];
}
</code></pre>

<p>JAVA</p>

<pre><code>public static void encrypt_AES(String message){

        Cipher ecipher;
        try {
            // generate secret key using DES algorithm
            SecretKeySpec key = new SecretKeySpec(theKey.getBytes(""UTF-8""), ""AES"");

            ecipher = Cipher.getInstance(""AES/ECB/PKCS7Padding"");

            // initialize the ciphers with the given key
            ecipher.init(Cipher.ENCRYPT_MODE, key);

            byte[] encrypted = ecipher.doFinal(message.getBytes(""UTF-8""));

        }catch (Exception e) {
            //    
            e.printStackTrace();
        }

    }
</code></pre>

<p>I found the Base64 class here: <a href=""http://www.imthi.com/blog/programming/iphone-sdk-base64-encode-decode.php"" rel=""nofollow"">http://www.imthi.com/blog/programming/iphone-sdk-base64-encode-decode.php</a> </p>

<p>Hope it can help someone</p>
","4460","<java><iphone><objective-c><security><jce>","1","4","1","2012-11-05 15:16:20","","6","4","167586","","2011-07-04 19:51:23","2011-07-04 19:39:18",""
"40975510","Spring boot and JCA providers","<p>I have a Spring boot(1.4.2.RELEASE) project with bouncycastle as a dependency in the pom.xml as in the following:</p>

<pre><code>pom.xml
...
&lt;dependency&gt;
  &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
  &lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;
  &lt;version&gt;1.54&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
  &lt;artifactId&gt;bcpkix-jdk15on&lt;/artifactId&gt;
  &lt;version&gt;1.54&lt;/version&gt;
&lt;/dependency&gt;
...
</code></pre>

<p>However, when I attempt to specify ""BC"" as the provider for a JCA operation in my code, such as:</p>

<p><code>Signature aSig = Signature.getInstance(""SHA256withRSA"",""BC"");</code></p>

<p>I get the standard no such provider exception:</p>

<p><code>java.security.NoSuchProviderException: no such provider: BC</code> </p>

<p>despite having the entry </p>

<p><code>security.provider.1=org.bouncycastle.jce.provider.BouncyCastleProvider</code></p>

<p>in my jre's java.security file.  </p>

<p>With this dependency in my pom file, the built jar has the bouncy castle jars in the BOOT-INF/lib folder:</p>

<pre><code>3277268 Tue Dec 29 12:46:28 EST 2015 BOOT-INF/lib/bcprov-jdk15on-1.54.jar
673715 Tue Dec 29 12:46:02 EST 2015 BOOT-INF/lib/bcpkix-jdk15on-1.54.jar
</code></pre>

<p>I can access the classes within them with no issue but JCA can't find the provider.</p>

<p>So, does JCA <em>require</em> the provider jars to be in jre/lib/ext? </p>

<p>...or am I simply missing something?</p>

<p>EDIT:</p>

<p>However, this:</p>

<p><code>Signature.getInstance(""SHA256withRSA"",new BouncyCastleProvider());</code></p>

<p>works.</p>
","<p>You need to install the Bouncycastle provider before using it. See <a href=""http://www.bouncycastle.org/wiki/display/JA1/Provider+Installation"" rel=""nofollow noreferrer"">http://www.bouncycastle.org/wiki/display/JA1/Provider+Installation</a></p>

<p><strong>Installing the Provider Dynamically</strong></p>

<pre><code>import org.bouncycastle.jce.provider.BouncyCastleProvider;
...
Security.addProvider(new BouncyCastleProvider());
</code></pre>

<p><strong>Installing the Provider Statically</strong></p>

<p>Add the provider as the last  entry in <code>$JAVA_HOME/jre/lib/security/java.security</code></p>

<pre><code>security.provider.N=org.bouncycastle.jce.provider.BouncyCastleProvider
</code></pre>

<p>Add the Bouncy Castle provider jar to the <code>$JAVA_HOME/jre/lib/ext</code></p>
","4380","<spring-boot><bouncycastle><jce>","1","3","1","2016-12-06 22:04:16","","0","3","3938072","","2016-12-05 13:48:08","2016-12-05 13:35:11",""
"2950371","Implementation of ECC in Java","<p>While trying to encrypt a given input using Elliptic Curve Cryptography in Java I'm using the following algorithms for generating the cipher and the key:</p>

<p>KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"");
Cipher           cipher = Cipher.getInstance(""ECIES"");</p>

<p>Now as expected, the cipher isn't accepting the keys generated by the ECDSA algorithm. I get the error as - must be passed IE key.</p>

<p>I searched for the ciphers being supported by these 2 methods here: <a href=""http://java.sun.com/javase/6/docs/technotes/guides/security/StandardNames.html#Cipher"" rel=""nofollow noreferrer"">http://java.sun.com/javase/6/docs/technotes/guides/security/StandardNames.html#Cipher</a></p>

<p>Unfortunately no else algo is supported for ECC. Has anyone used ECC generated keys to encrypt/decrypt an input? Which algo should I use for both so that they don't clash with each other? </p>
","<p>According to <a href=""http://java.sun.com/javase/6/docs/technotes/guides/security/StandardNames.html#KeyPairGenerator"" rel=""nofollow noreferrer"">http://java.sun.com/javase/6/docs/technotes/guides/security/StandardNames.html#KeyPairGenerator</a>, you need to pass ""EC"" for an instance of the KeyPairGenerator for ECC.</p>
","4328","<java><jce><elliptic-curve>","1","1","2","2011-06-20 08:38:33","","0","","5000","","2011-06-20 08:38:33","2010-06-01 14:00:06",""
"2950371","Implementation of ECC in Java","<p>While trying to encrypt a given input using Elliptic Curve Cryptography in Java I'm using the following algorithms for generating the cipher and the key:</p>

<p>KeyPairGenerator g = KeyPairGenerator.getInstance(""ECDSA"");
Cipher           cipher = Cipher.getInstance(""ECIES"");</p>

<p>Now as expected, the cipher isn't accepting the keys generated by the ECDSA algorithm. I get the error as - must be passed IE key.</p>

<p>I searched for the ciphers being supported by these 2 methods here: <a href=""http://java.sun.com/javase/6/docs/technotes/guides/security/StandardNames.html#Cipher"" rel=""nofollow noreferrer"">http://java.sun.com/javase/6/docs/technotes/guides/security/StandardNames.html#Cipher</a></p>

<p>Unfortunately no else algo is supported for ECC. Has anyone used ECC generated keys to encrypt/decrypt an input? Which algo should I use for both so that they don't clash with each other? </p>
","<p>Also for a more feature-rich cryptography implementation take a look at <a href=""http://www.bouncycastle.org/java.html"" rel=""nofollow noreferrer"">Bouncycastle</a>.</p>
","4328","<java><jce><elliptic-curve>","1","0","2","2011-06-20 08:38:33","","0","","5000","","2011-06-20 08:38:33","2010-06-01 14:00:06",""
"5239974","Java JCE Unlimited strength encryption security policy files","<p>Are the JCE policy files (in {java.home}/lib/security) overwritten with the standard strength policy files after a JRE update? or are these left alone on JRE update?</p>

<p>EDIT: Does anyone know if the Mac OS X JRE ships with the unlimited policy files?</p>

<p>Thanks</p>

<p>Jon</p>
","<p>In my experience using JCE policy files, it did replace the files and I was frustrated. I ended up replacing the files at first run.</p>

<p>But at the end, using Bouncy Castle API was more appropriate, there was no need to have the unlimited strength files. It was a cleaner solution.</p>

<p><a href=""http://www.bouncycastle.org/"" rel=""nofollow"">http://www.bouncycastle.org/</a></p>
","4271","<java><encryption><jce><policyfiles>","3","2","1","2011-03-10 15:59:06","5241587","1","2","638268","","2011-03-10 15:59:06","2011-03-09 00:16:15",""
"31706488","Decrypt PEM private (RSA) key with Bouncy Castle","<p><strong>Goal</strong>: Extract an RSA private key from an encrypted PEM file. The private key will be used to programmatically sign certs. </p>

<p><strong>Environment</strong>: Java 8 and Bouncy Castle 1.52</p>

<hr>

<h3>Use Bouncy Castle PEMParser (results in PKCSException)</h3>

<pre><code>    //Register BC as a crypto provider
    Security.addProvider(new BouncyCastleProvider());

    //Get file handle
    String caPrivateKeyFname = ""cakey.pem"";
    FileInputStream fis = null;
    try {
        fis = new FileInputStream(caPrivateKeyFname);
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    }

    //Load and parse PEM object
    PEMParser pemRd = new PEMParser(new InputStreamReader(fis));
    Object objectInPemFile = pemRd.readObject();

    //I do not know why BC loads the file as a PKCS8 object. OpenSSL does not recognize it as such.
    PKCS8EncryptedPrivateKeyInfo keyInfo = (PKCS8EncryptedPrivateKeyInfo) objectInPemFile;

    //Decrypt the private key
    String pwd = ""secret"";
    InputDecryptorProvider pkcs8Prov = new JceOpenSSLPKCS8DecryptorProviderBuilder().build(pwd.toCharArray());

    //Next statement raises an exception.
    PrivateKeyInfo privateKeyInfo = keyInfo.decryptPrivateKeyInfo(pkcs8Prov);
</code></pre>

<hr>

<pre><code>Exception in thread ""main"" org.bouncycastle.pkcs.PKCSException: unable to read encrypted data: 1.2.840.113549.1.5.13 not available: Illegal key size
    at org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo.decryptPrivateKeyInfo(Unknown Source)
    at org.codice.ddf.certificate.SignedCertificate.main(SignedCertificate.java:67)
Caused by: org.bouncycastle.operator.OperatorCreationException: 1.2.840.113549.1.5.13 not available: Illegal key size
    at org.bouncycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder$1.get(Unknown Source)
    ... 2 more
Caused by: java.security.InvalidKeyException: Illegal key size
    at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1039)
    at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1060)
    at javax.crypto.Cipher.implInit(Cipher.java:809)
    at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
    at javax.crypto.Cipher.init(Cipher.java:1539)
    at javax.crypto.Cipher.init(Cipher.java:1470)
    ... 3 more  
</code></pre>

<hr>

<h3><strong>* UPDATE *</strong></h3>

<p><code>openssl asn1parse -in cakey.pem</code></p>

<blockquote>
  <p>PBES2 </p>
  
  <p>PBKDF2 </p>
  
  <p>des-ede3-cbc</p>
</blockquote>

<p>If I understand correctly, DES key length is 64 bits, so 3DES is 192 bit keys.
However, Java policy limits the length of DES keys to 56 bits, so maximum key length for 3DES is 168 bits.</p>

<p>Switching out the jurisdiction policy files is not an option for me. I think there is a way to decrypt a PKCS8 encrypted private key with Bouncy Castle, but the solution is more involved than setting the provider to BC. </p>

<p><strong>Can anyone point me to an example or provide some reference code?</strong></p>

<p>(Thanks to dave_thompson_085 for his help).</p>
","<p>Yes, a file that begins with the line ""-----BEGIN ENCRYPTED PRIVATE KEY-----"" is a PEM format PKCS#8 encrypted private key. I don't know why your comment says ""OpenSSL does not recognize it""; the fact that <code>openssl rsa</code> reads it successfullly proves OpenSSL does recognize it.</p>

<p>BC <code>PKCSException</code> is just a wrapper; your <strong>actual problem</strong> is <code>java.security.InvalidKeyException: Illegal key size</code>. This occurs if you try to use better than 128-bit symmetric encryption or (as here) decryption in a JRE that has the default shipped-by-Sun-now-Oracle crypto policy which is limited to 128-bit symmetric. I'll bet you a dollar that <code>openssl asn1parse &lt;cakey.pem</code> shows the file encrypted with <code>PBES2</code> using <code>PBKD2</code> (with some parameters) and <code>aes-192-cbc</code> or <code>aes-256-cbc</code>.</p>

<p>Download the ""... (JCE) <strong>Unlimited Strength Jurisdiction Policy Files</strong> for JDK/JRE 8"" from the ""Additional Resources"" section of <a href=""http://www.oracle.com/technetwork/java/javase/downloads/index.html"" rel=""nofollow"">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a> then unzip and place the two *policy.jar files in the JREHOME/lib/security directory of the JRE you are using. (Assuming you are not under US sanctions because you're in the North Korea, Iran or Syria governments etc.)</p>
","4207","<java><encryption><bouncycastle><pem><jce>","0","2","1","2015-08-21 22:16:14","31708258","0","1","290962","","2015-08-21 22:16:14","2015-07-29 16:48:13",""
"43840827","How to sign and validate RSA PKCS#1 v2.0 signatures in Java","<p>I'm trying to sign and validate signature in RSA+SHA1 with PKCS1 v2.0 padding.
I haven't found in the documentation (JDK or JCE) which algorithm/padding I have to use. 
It seems that I've to use OAEP padding but I didn't succeed:</p>

<p>For validation, I've tried via Cipher in DECRYPT_MODE with the public key sent by the signer:</p>

<pre><code>Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPWITHSHA1ANDMGF1PADDING"", ""SunJCE""); 
cipher.init(Cipher.DECRYPT_MODE, pub); //exception !
</code></pre>

<p>But I got an exception:</p>

<pre><code>  java.security.InvalidKeyException: OAEP cannot be used to sign or verify signatures
        at com.sun.crypto.provider.RSACipher.init(RSACipher.java:303)
        at com.sun.crypto.provider.RSACipher.engineInit(RSACipher.java:207)
    ...
</code></pre>

<p>(For unknown reason, OAEPWITHSHA1ANDMGF1PADDING is only accepted with ENCRYPT_MODE+PUBLIC KEY or DECRYPT_MODE+PRIVATE KEY, the opposite that I want to do....)</p>

<p>For signature, I'm trying to use Signature but I don't know which algorithm to use:</p>

<pre><code>Signature mySig2 = Signature.getInstance(""SHA1withRSAandMGF1"");
</code></pre>

<p>Doesn't work :</p>

<pre><code>java.security.NoSuchAlgorithmException: SHA1withRSAandMGF1 Signature not available
    at java.security.Signature.getInstance(Signature.java:229)
...
</code></pre>

<p>Can somebody help me?</p>
","<blockquote>
  <p>I'm trying to sign and validate signature in RSA+SHA1 with PKCS1 v2.0 padding.</p>
</blockquote>

<p>This is a strange requirement.</p>

<p>First of all, RSA is secure even if PKCS#1 v1.5 compatible padding is used. It is however not secure when SHA-1 is used to hash the input/message, for the simple reasons that SHA-1 is not considered secure anymore for that kind of purpose.</p>

<p>Second, although PKCS#1 v2.0 contains a new padding mode for signature generation called PSS or - to be more precise - RSASSA-PSS it <em>also</em> contains the single signature generation mode from 1.5 of the standard called RSASSA-PKCS1-v1_5. So <em>at least in theory</em> your requirements are not clear.</p>

<hr>

<p>Now PKCS#1 v1.5 padding <strong>for encryption</strong> is known to be broken against padding oracle attacks. For that reason alone, OAEP encryption introduced in PKCS#1 v2.0 is generally available.</p>

<p>PSS for signature generation has a better security proof, but PKCS#1 v1.5 is still considered secure. This is likely why Oracle / SUN didn't include PSS within Java SE JCA. If you want it you can vote for it <a href=""https://bugs.openjdk.java.net/browse/JDK-8146293"" rel=""nofollow noreferrer"">here</a>.</p>

<hr>

<blockquote>
  <p>I haven't found in the documentation (JDK or JCE) which algorithm/padding I have to use. It seems that I've to use OAEP padding but I didn't succeed.</p>
</blockquote>

<p>OAEP stands for Optimal Asymmetric <strong>Encryption</strong> Padding. Padding for encryption cannot/should not be used for signature generation.</p>

<hr>

<p>After adding the Bouncy Castle provider the RSA PSS becomes available. You can use your (insecure) scheme with <code>""SHA1withRSA/PSS""</code> or indeed the identical <code>""SHA1withRSAandMGF1""</code>. It's likely that Oracle's Java SE will support RSA/PSS once the TLS 1.3 specification is finalized.</p>
","4002","<java><rsa><digital-signature><jce>","1","2","2","2017-05-22 12:29:48","44112900","7","3","1816580","","2017-05-08 17:59:51","2017-05-08 06:06:34",""
"43840827","How to sign and validate RSA PKCS#1 v2.0 signatures in Java","<p>I'm trying to sign and validate signature in RSA+SHA1 with PKCS1 v2.0 padding.
I haven't found in the documentation (JDK or JCE) which algorithm/padding I have to use. 
It seems that I've to use OAEP padding but I didn't succeed:</p>

<p>For validation, I've tried via Cipher in DECRYPT_MODE with the public key sent by the signer:</p>

<pre><code>Cipher cipher = Cipher.getInstance(""RSA/ECB/OAEPWITHSHA1ANDMGF1PADDING"", ""SunJCE""); 
cipher.init(Cipher.DECRYPT_MODE, pub); //exception !
</code></pre>

<p>But I got an exception:</p>

<pre><code>  java.security.InvalidKeyException: OAEP cannot be used to sign or verify signatures
        at com.sun.crypto.provider.RSACipher.init(RSACipher.java:303)
        at com.sun.crypto.provider.RSACipher.engineInit(RSACipher.java:207)
    ...
</code></pre>

<p>(For unknown reason, OAEPWITHSHA1ANDMGF1PADDING is only accepted with ENCRYPT_MODE+PUBLIC KEY or DECRYPT_MODE+PRIVATE KEY, the opposite that I want to do....)</p>

<p>For signature, I'm trying to use Signature but I don't know which algorithm to use:</p>

<pre><code>Signature mySig2 = Signature.getInstance(""SHA1withRSAandMGF1"");
</code></pre>

<p>Doesn't work :</p>

<pre><code>java.security.NoSuchAlgorithmException: SHA1withRSAandMGF1 Signature not available
    at java.security.Signature.getInstance(Signature.java:229)
...
</code></pre>

<p>Can somebody help me?</p>
","<p>Hope I'm not too late to respond to this. Very recently I had to face the same issue with RSA encryption. My Signer wants to do the verification to the data that is sent through POST. This is how I managed to work on that in Java. </p>

<p>Step 1 - Add following into your project</p>

<pre><code>bcprov-ext-jdk14-1.45.jar 
commons-codec-1.4.jar
</code></pre>

<p>Step 2 - Declare your Cipher</p>

<pre><code>private Cipher cipher;
</code></pre>

<p>Step 3 - Call below in your class constructor</p>

<pre><code>Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
this.cipher = Cipher.getInstance(""RSA/NONE/OAEPWithSHA1AndMGF1Padding"");
</code></pre>

<p>Step 4 - Get your PublicKey from public key text string</p>

<pre><code>public PublicKey getPublic(String pubKey) throws Exception {
    byte[] publicBytes = Base64.decodeBase64(pubKey);
    X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicBytes);
    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
    return keyFactory.generatePublic(keySpec);
}
</code></pre>

<p>Step 5 - Verification method</p>

<pre><code>public boolean verfyRSA(String signature, String data, PublicKey key) throws Exception {

    byte[] sign = Base64.decodeBase64(signature);
    byte[] dat = Base64.decodeBase64(data);

    Signature rsaVerify = Signature.getInstance(""SHA1withRSAandMGF1"");
    rsaVerify.initVerify(key);
    rsaVerify.update(dat);
    return rsaVerify.verify(sign);
}
</code></pre>

<p>Step 6 - Usage</p>

<pre><code>Yourclass yc = new YourClass();
PublicKey publicKey = yc.getPublic(""Your PublicKey without leading and trailing -------text------"");
boolean b = yc.verfyRSA(""POST_Signature"", ""POST_data"", publicKey);
</code></pre>

<p>Hope this helps. Mind the getInstance() parameters. These are the ones that do the trick. Cheers</p>
","4002","<java><rsa><digital-signature><jce>","1","2","2","2017-05-22 12:29:48","44112900","7","3","1816580","","2017-05-08 17:59:51","2017-05-08 06:06:34",""
"7556174","Where to download SunPKCS11Provider","<p>I'm trying to access smardCard folowing this <a href=""http://www.developer.com/java/other/article.php/3587361/Java-Applet-for-Signing-with-a-Smart-Card.htm"" rel=""nofollow"">article</a> but I have no idea where to find jar with SunPKCS11Provider. In Oracle docs they say it is standard since 1.5. Here is my block where compiler is complaining it can't find SunPKCS11:</p>

<pre><code>String configName = ""d:\\dev\\ws\\pkiTest\\pkcs11.cfg"";
Provider p = new sun.security.pkcs11.SunPKCS11(configName);
Security.addProvider(p);
</code></pre>
","<p>64 bit windows support should become available in next few months. it's being backported to a jdk 6 update.</p>

<p><a href=""http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6931562"" rel=""nofollow"">http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6931562</a></p>
","3982","<jce><jsse>","-1","3","2","2016-06-13 21:22:44","","1","","","","","2011-09-26 13:55:08",""
"7556174","Where to download SunPKCS11Provider","<p>I'm trying to access smardCard folowing this <a href=""http://www.developer.com/java/other/article.php/3587361/Java-Applet-for-Signing-with-a-Smart-Card.htm"" rel=""nofollow"">article</a> but I have no idea where to find jar with SunPKCS11Provider. In Oracle docs they say it is standard since 1.5. Here is my block where compiler is complaining it can't find SunPKCS11:</p>

<pre><code>String configName = ""d:\\dev\\ws\\pkiTest\\pkcs11.cfg"";
Provider p = new sun.security.pkcs11.SunPKCS11(configName);
Security.addProvider(p);
</code></pre>
","<p>It wasn't available for download until Java 8 (for 64 bit):
""The class SunPKCS11 is not available even in JDK/JRE 7 for WIndows 64 bit."" (Duplicate bug description)  <a href=""http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6880559"" rel=""nofollow"">http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6880559</a></p>

<p>It was introduced in Java 5 (32 bit), and is included in Oracle's JDK downloads since then. It was not backported to the 64 bit versions after introduced in Java 8 (64 bit).</p>

<p>I think the other answer is referring to a different provider (SunMSCAPI).</p>
","3982","<jce><jsse>","-1","0","2","2016-06-13 21:22:44","","1","","","","","2011-09-26 13:55:08",""
"18072356","Implementing Digital Signing in a Java Applet","<p>I am trying to sign some data (a POST form) in a web based application using a Java Applet. The user's x509 certificate would be in a cryptoken/smart card. The signature needs to be in attached pkcs#7 format.</p>

<p>I am using this tutorial/code as a starting point in building the applet - <a href=""http://www.developer.com/java/other/article.php/3587361/Java-Applet-for-Signing-with-a-Smart-Card.htm"" rel=""nofollow"">http://www.developer.com/java/other/article.php/3587361/Java-Applet-for-Signing-with-a-Smart-Card.htm</a></p>

<p>The biggest problem for me here seems to be the fact that the applet asks the user for location of the pkcs#11 implementation library. This is a big no-no for me because my typical user is not going to know the location of his pkcs#11 library.</p>

<p>From Oracle's Java documentation - <a href=""http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html"" rel=""nofollow"">http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html</a> it seems that Java doesn't come with it's own implementation.</p>

<p>Is there a way to do this signing without asking the user for this location. I am OK with a solution which only works with just IE and Firefox on Windows.</p>

<p>With a few smartcards/cryptokens I have used, I have noticed that the moment I insert it, I can see the certificate in IE &amp; Firefox's personal tab of certificates. This probably means that the crypto token registers all the certificates it contains with OS when you insert the card and deregisters it when you remove it. So it must probably be exposing some interface to the OS/Browser when it does it - can this not be used for signing?</p>
","<p>We did the thing you are trying to do now (distributed signing with client-side modules) within Distributed Cryptography add-on for our SecureBlackox product and we offer ActiveX control for IE and Java applet for other browsers. </p>

<p>Unfortunately PKCS#11 DLLs are not registered anywhere so you can't avoid asking the user about location of this DLL. </p>

<p>Most hardware devices support both PKCS#11 and CryptoAPI interfaces. Within CryptoAPI interface the CSP DLL exposes hardware-based certificates to CryptoAPI engine and thus to applications. In this case you can use Java classes that work with Windows CryptoAPI.</p>

<p>PKCS#11 is an interface, implemented by hardware vendors, so Java can't implement it's own - JVM is not a hardware and doesn't contain certificates (even if it did, that would not solve your problem). I need to notice, that Firefox has built-in PKCS#11 driver via which Firefox accesses its own certificates.  This was done for uniform support for software- and hardware-stored certificates. </p>
","3917","<java><digital-signature><jce><pkcs#7><pkcs#11>","5","3","2","2019-06-22 06:24:06","","0","1","922712","","2013-08-06 06:46:27","2013-08-06 05:25:17",""
"18072356","Implementing Digital Signing in a Java Applet","<p>I am trying to sign some data (a POST form) in a web based application using a Java Applet. The user's x509 certificate would be in a cryptoken/smart card. The signature needs to be in attached pkcs#7 format.</p>

<p>I am using this tutorial/code as a starting point in building the applet - <a href=""http://www.developer.com/java/other/article.php/3587361/Java-Applet-for-Signing-with-a-Smart-Card.htm"" rel=""nofollow"">http://www.developer.com/java/other/article.php/3587361/Java-Applet-for-Signing-with-a-Smart-Card.htm</a></p>

<p>The biggest problem for me here seems to be the fact that the applet asks the user for location of the pkcs#11 implementation library. This is a big no-no for me because my typical user is not going to know the location of his pkcs#11 library.</p>

<p>From Oracle's Java documentation - <a href=""http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html"" rel=""nofollow"">http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html</a> it seems that Java doesn't come with it's own implementation.</p>

<p>Is there a way to do this signing without asking the user for this location. I am OK with a solution which only works with just IE and Firefox on Windows.</p>

<p>With a few smartcards/cryptokens I have used, I have noticed that the moment I insert it, I can see the certificate in IE &amp; Firefox's personal tab of certificates. This probably means that the crypto token registers all the certificates it contains with OS when you insert the card and deregisters it when you remove it. So it must probably be exposing some interface to the OS/Browser when it does it - can this not be used for signing?</p>
","<p>Smartcard or Token driver (PKCS#11) library has an additional layer called CSP (Crypto Service Provider) which acts like bridge between the device driver and OS Crypto services.  Token driver, once installed also adds this CSP and thus plunging the token or smartcard makes Certificates in it available (which acts as handle to private key stored securely on the crypto device).</p>

<p>For signing from Browser as client, applets are no more supported by modern browsers. You may use Browser Extension for the purposes which has a native application running behind the browser to access Certificate Store and provide signing function through JavaScript in the browser. Signer Digital Browser Extension offers various type of signing form browser using JavaScript. Refer to 3 different SO answer links on the page <a href=""https://signer.digital/SignerDigitalBrowserExtensions"" rel=""nofollow noreferrer"">Digitally Signing From Browser</a> for various operations to be achieved using the Web Browser Extension. </p>
","3917","<java><digital-signature><jce><pkcs#7><pkcs#11>","5","0","2","2019-06-22 06:24:06","","0","1","922712","","2013-08-06 06:46:27","2013-08-06 05:25:17",""
"50393533","""java.io.IOException: Invalid secret key format"" when opening JCEKS key store with Oracle Java 8 JRE 172","<p>I am getting the following exception when I try to open JCEKS type key store with with Oracle Java 8 JRE 172 on Windows. This worked fine with earlier versions of the JRE:</p>

<pre><code>INFO: ObjectInputFilter REJECTED: null, array length: -1, nRefs: 1, depth: 1, bytes: 70, ex: n/a
[...call stacks omitted to protect the innocent...]
Caused by: java.io.IOException: Invalid secret key format
        at com.sun.crypto.provider.JceKeyStore.engineLoad(JceKeyStore.java:856)
        at java.security.KeyStore.load(Unknown Source)
[...]
</code></pre>

<p>This looks very much like <a href=""https://bugs.openjdk.java.net/browse/JDK-8202506"" rel=""nofollow noreferrer"">JDK-8202506</a> but I use Java 8 and I get <code>null</code> in the initial INFO message.</p>

<p>Is this the same issue?</p>

<p>It seems to me the <a href=""https://bugs.openjdk.java.net/browse/JDK-8202506"" rel=""nofollow noreferrer"">JDK-8202506</a> issue is currently not fixed in any public JRE release. Am I right?</p>

<p><strong>UPDATE 1</strong></p>

<p>This looks similar and they also have no solution: <a href=""https://issues.apache.org/jira/browse/ATLAS-2642"" rel=""nofollow noreferrer"">ATLAS-2642</a></p>

<p><strong>UPDATE 2</strong></p>

<p>For some reason, Equinox fails to see the <code>com.sun.crypto.provider.SealedObjectForKeyProtector</code> class after the upgrade, even though it is clearly in the JRE that comes with the new JDK:</p>

<pre><code>BundleClassLoader[foo.bar.baz.crypto].loadClass(com.sun.crypto.provider.SealedObjectForKeyProtector) failed.
java.lang.ClassNotFoundException: com.sun.crypto.provider.SealedObjectForKeyProtector
    at org.eclipse.osgi.framework.internal.core.BundleLoader.findClassInternal(BundleLoader.java:481)
    at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:397)
    at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:385)
    at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:87)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Class.java:348)
    at java.io.ObjectInputStream.resolveClass(ObjectInputStream.java:686)
    at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1866)
    at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1749)
    at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2040)
    at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1571)
    at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)
    at com.sun.crypto.provider.JceKeyStore.engineLoad(JceKeyStore.java:850)
    at java.security.KeyStore.load(KeyStore.java:1445)
</code></pre>

<p><strong>UPDATE 3</strong></p>

<p>The class <code>SealedObjectForKeyProtector.class</code> is somehow different from the rest of the classes in the <code>sunjce_provider.jar</code>. When we try to decompile it with JD-GUI, it fails with internal error, unlike the rest of the classes:</p>

<p><a href=""https://i.stack.imgur.com/Sg0Os.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Sg0Os.png"" alt=""JD-GUI failure to decompile SealedObjectForKeyProtector.class""></a></p>
","<p>I am currently working with Oracle JRE Support on this and have a private bug opened. Information I got so far:</p>

<ol>
<li>It's not the same as JDK-8202506. </li>
<li>Yes it's a classloading issue on SealedObjectForKeyProtector with Equinox.</li>
</ol>

<p>Solutions: </p>

<p>A workaround is to add the following line into the OSGi bundle MANIFEST.MF.</p>

<p>Eclipse-BuddyPolicy: ext </p>

<p>I personally verified this workaround with JRE 1.8_181 and it seems working. </p>

<p>I was also told that for Java 9, a JVM parameter -Dosgi.compatibility.bootdelegation=true can do the job (w/o the need to update MANIFEST.MF) but I don't have a Java 9 environment to verify it. Appreciate if someone can try it and let us know the result.</p>
","3885","<java><osgi><equinox><jce><jceks>","4","1","3","2019-03-26 11:23:38","","0","3","341065","","2018-05-18 15:35:13","2018-05-17 14:06:06",""
"50393533","""java.io.IOException: Invalid secret key format"" when opening JCEKS key store with Oracle Java 8 JRE 172","<p>I am getting the following exception when I try to open JCEKS type key store with with Oracle Java 8 JRE 172 on Windows. This worked fine with earlier versions of the JRE:</p>

<pre><code>INFO: ObjectInputFilter REJECTED: null, array length: -1, nRefs: 1, depth: 1, bytes: 70, ex: n/a
[...call stacks omitted to protect the innocent...]
Caused by: java.io.IOException: Invalid secret key format
        at com.sun.crypto.provider.JceKeyStore.engineLoad(JceKeyStore.java:856)
        at java.security.KeyStore.load(Unknown Source)
[...]
</code></pre>

<p>This looks very much like <a href=""https://bugs.openjdk.java.net/browse/JDK-8202506"" rel=""nofollow noreferrer"">JDK-8202506</a> but I use Java 8 and I get <code>null</code> in the initial INFO message.</p>

<p>Is this the same issue?</p>

<p>It seems to me the <a href=""https://bugs.openjdk.java.net/browse/JDK-8202506"" rel=""nofollow noreferrer"">JDK-8202506</a> issue is currently not fixed in any public JRE release. Am I right?</p>

<p><strong>UPDATE 1</strong></p>

<p>This looks similar and they also have no solution: <a href=""https://issues.apache.org/jira/browse/ATLAS-2642"" rel=""nofollow noreferrer"">ATLAS-2642</a></p>

<p><strong>UPDATE 2</strong></p>

<p>For some reason, Equinox fails to see the <code>com.sun.crypto.provider.SealedObjectForKeyProtector</code> class after the upgrade, even though it is clearly in the JRE that comes with the new JDK:</p>

<pre><code>BundleClassLoader[foo.bar.baz.crypto].loadClass(com.sun.crypto.provider.SealedObjectForKeyProtector) failed.
java.lang.ClassNotFoundException: com.sun.crypto.provider.SealedObjectForKeyProtector
    at org.eclipse.osgi.framework.internal.core.BundleLoader.findClassInternal(BundleLoader.java:481)
    at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:397)
    at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:385)
    at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:87)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Class.java:348)
    at java.io.ObjectInputStream.resolveClass(ObjectInputStream.java:686)
    at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1866)
    at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1749)
    at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2040)
    at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1571)
    at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)
    at com.sun.crypto.provider.JceKeyStore.engineLoad(JceKeyStore.java:850)
    at java.security.KeyStore.load(KeyStore.java:1445)
</code></pre>

<p><strong>UPDATE 3</strong></p>

<p>The class <code>SealedObjectForKeyProtector.class</code> is somehow different from the rest of the classes in the <code>sunjce_provider.jar</code>. When we try to decompile it with JD-GUI, it fails with internal error, unlike the rest of the classes:</p>

<p><a href=""https://i.stack.imgur.com/Sg0Os.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Sg0Os.png"" alt=""JD-GUI failure to decompile SealedObjectForKeyProtector.class""></a></p>
","<p>I meet this issue these days. And per my troubleshooting, it is caused by the different return value of this method:</p>

<pre><code>sun.misc.VM.latestUserDefinedLoader()
</code></pre>

<p>Previously (before 8u171), this method returns <code>sun.misc.Launcher$ExtClassLoader</code>, while it returns application's classloader after upgrade. In ObjectInputStream, both class loader can load <code>com.sun.crypto.provider.SealedObjectForKeyProtector</code> successfully, that's simply because ExtClassLoader is the parent of application's class loader (or, parent's parent). However, once SealedObjectForKeyProtector is loaded by application's class loader, it's class loader no longer equals to ExtClassLoader.</p>

<p>On the other hand, within <code>com.sun.crypto.provider.JceKeyStore</code>, unlike <code>ObjectInputStream</code>, <code>SealedObjectForKeyProtector</code> is always loaded by ExtClassLoader. Thus below check in <a href=""http://rtfcode.com/xref/java-1.8/jdk/src/share/classes/com/sun/crypto/provider/JceKeyStore.java#L932"" rel=""nofollow noreferrer"">JceKeyStore.java:932</a> will fail due to class doesn't equal:</p>

<pre><code>932            if (info.serialClass() != SealedObjectForKeyProtector.class))
934                return Status.REJECTED;
</code></pre>

<p>Then, we will get below log and an IOException eventually:
<code>ObjectInputFilter</code> REJECTED: class <code>com.sun.crypto.provider.SealedObjectForKeyProtector</code></p>

<p>Solution: make sure class <code>com.sun.crypto.provider.SealedObjectForKeyProtector</code> is not loaded by ContextClassLoader by certain configuration. Details depend on the ContextClassLoader. For example, for <code>org.powermock.core.classloader.MockClassLoader</code>, the concrete solution is adding below annotation to involved test classes:</p>

<p><code>@PowerMockIgnore(""com.sun.*"")</code></p>
","3885","<java><osgi><equinox><jce><jceks>","4","4","3","2019-03-26 11:23:38","","0","3","341065","","2018-05-18 15:35:13","2018-05-17 14:06:06",""
"50393533","""java.io.IOException: Invalid secret key format"" when opening JCEKS key store with Oracle Java 8 JRE 172","<p>I am getting the following exception when I try to open JCEKS type key store with with Oracle Java 8 JRE 172 on Windows. This worked fine with earlier versions of the JRE:</p>

<pre><code>INFO: ObjectInputFilter REJECTED: null, array length: -1, nRefs: 1, depth: 1, bytes: 70, ex: n/a
[...call stacks omitted to protect the innocent...]
Caused by: java.io.IOException: Invalid secret key format
        at com.sun.crypto.provider.JceKeyStore.engineLoad(JceKeyStore.java:856)
        at java.security.KeyStore.load(Unknown Source)
[...]
</code></pre>

<p>This looks very much like <a href=""https://bugs.openjdk.java.net/browse/JDK-8202506"" rel=""nofollow noreferrer"">JDK-8202506</a> but I use Java 8 and I get <code>null</code> in the initial INFO message.</p>

<p>Is this the same issue?</p>

<p>It seems to me the <a href=""https://bugs.openjdk.java.net/browse/JDK-8202506"" rel=""nofollow noreferrer"">JDK-8202506</a> issue is currently not fixed in any public JRE release. Am I right?</p>

<p><strong>UPDATE 1</strong></p>

<p>This looks similar and they also have no solution: <a href=""https://issues.apache.org/jira/browse/ATLAS-2642"" rel=""nofollow noreferrer"">ATLAS-2642</a></p>

<p><strong>UPDATE 2</strong></p>

<p>For some reason, Equinox fails to see the <code>com.sun.crypto.provider.SealedObjectForKeyProtector</code> class after the upgrade, even though it is clearly in the JRE that comes with the new JDK:</p>

<pre><code>BundleClassLoader[foo.bar.baz.crypto].loadClass(com.sun.crypto.provider.SealedObjectForKeyProtector) failed.
java.lang.ClassNotFoundException: com.sun.crypto.provider.SealedObjectForKeyProtector
    at org.eclipse.osgi.framework.internal.core.BundleLoader.findClassInternal(BundleLoader.java:481)
    at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:397)
    at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:385)
    at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:87)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
    at java.lang.Class.forName0(Native Method)
    at java.lang.Class.forName(Class.java:348)
    at java.io.ObjectInputStream.resolveClass(ObjectInputStream.java:686)
    at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1866)
    at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1749)
    at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2040)
    at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1571)
    at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)
    at com.sun.crypto.provider.JceKeyStore.engineLoad(JceKeyStore.java:850)
    at java.security.KeyStore.load(KeyStore.java:1445)
</code></pre>

<p><strong>UPDATE 3</strong></p>

<p>The class <code>SealedObjectForKeyProtector.class</code> is somehow different from the rest of the classes in the <code>sunjce_provider.jar</code>. When we try to decompile it with JD-GUI, it fails with internal error, unlike the rest of the classes:</p>

<p><a href=""https://i.stack.imgur.com/Sg0Os.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Sg0Os.png"" alt=""JD-GUI failure to decompile SealedObjectForKeyProtector.class""></a></p>
","<p>I have done a complete analysis about the issue and debugged through the code part that involves in JCEKS keystore. Whenever the application uses custom class loader then you will face the issue for sure, if using JCEKS keystore from older java versions than JDK 8 Update 151.</p>

<pre><code> private static class DeserializationChecker implements ObjectInputFilter {
    private static final int MAX_NESTED_DEPTH = 2;

    @Override
    public ObjectInputFilter.Status
        checkInput(ObjectInputFilter.FilterInfo info) {

        // First run a custom filter
        long nestedDepth = info.depth();
        if ((nestedDepth == 1 &amp;&amp;
                    info.serialClass() != SealedObjectForKeyProtector.class) ||
                (nestedDepth &gt; MAX_NESTED_DEPTH &amp;&amp;
                    info.serialClass() != null &amp;&amp;
                    info.serialClass() != Object.class)) {
            return Status.REJECTED;
        }

        // Next run the default filter, if available
        ObjectInputFilter defaultFilter =
            ObjectInputFilter.Config.getSerialFilter();
        if (defaultFilter != null) {
            return defaultFilter.checkInput(info);
        }

        return Status.UNDECIDED;
    }
}
</code></pre>

<p>In the above code from JceKeyStore.class, the filter info will always be null, so   <em>info.serialClass() != SealedObjectForKeyProtector.class</em> check will fail. The class loading delegation doesnot happening as expected in case of custom class loader like Equinox - Eclipse plugin.</p>

<p>There is a two step solution</p>

<ol>
<li>Firstly upgrade the keystore from JCEKS to PKCS12 as mentioned in the JDK 151 <a href=""http://%20Better%20keystore%20handling"" rel=""nofollow noreferrer"">https://www.oracle.com/technetwork/java/javase/8u151-relnotes-3850493.html</a>  under  Notes: Better keystore handling topic. For most cases this will solve the issue. Further access the keystore with keystore type value PKCS12 after changes.</li>
<li>Make the classes from sun_jce provider get loaded earlier even before your custom class loaders scope. Use those configuration to make your custom class loader delegate the class loading of sun_jce jars to ExtClassLoader. For example : By using Eclipse-BuddyPolicy: ext  in the META-INF of eclipse plugin projects.</li>
</ol>
","3885","<java><osgi><equinox><jce><jceks>","4","1","3","2019-03-26 11:23:38","","0","3","341065","","2018-05-18 15:35:13","2018-05-17 14:06:06",""
"45567670","TLSv1.2 SSLContext not available error even after installing Bouncy Castle provider","<p>I am using Java 6. And I am supposed to use TLS1.2 for a partner integration. So, I am using BouncyCastle provider to get this done in Java 6. But, I am seeing this error.</p>

<pre><code>java.security.NoSuchAlgorithmException: TLSv1.2 SSLContext not available
at sun.security.jca.GetInstance.getInstance(GetInstance.java:142)
at javax.net.ssl.SSLContext.getInstance(SSLContext.java:125)
</code></pre>

<p>I have kept BouncyCastle jars in the classpath and added this line in the program.</p>

<pre><code>Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
</code></pre>

<p>Could you help resolve this issue?</p>

<p>Thank you in advance.</p>
","<p>It May be issue with placement of BouncyCastle jars :</p>

<p>make sure the correct Bouncy Castle libraries are copied into the $JAVA_HOME/jre/lib/ext directory</p>

<p><a href=""http://www.itcsolutions.eu/2011/08/22/how-to-use-bouncy-castle-cryptographic-api-in-netbeans-or-eclipse-for-java-jse-projects/"" rel=""nofollow noreferrer"">http://www.itcsolutions.eu/2011/08/22/how-to-use-bouncy-castle-cryptographic-api-in-netbeans-or-eclipse-for-java-jse-projects/</a></p>

<p>go to section How to install the Bouncy Castle API</p>
","3883","<java><ssl><bouncycastle><tls1.2><jce>","0","1","1","2017-08-08 14:27:32","","3","","2261124","","2017-08-08 12:16:57","2017-08-08 11:53:51",""
"6432179","Creating an SSL Connection in Java","<p>I looked around and did not see any questions that fully answered what I wanted, though if this is a duplicate, point me to the question and I will be on my way.</p>

<p>Right now I am trying to write a Java server that will receive data from an <code>SSLServerSocket</code> and for now, just print it out. I would eventually like to have this data come from an Android, but right now it throws an <code>SSLException</code> before it even starts listening for data.</p>

<p>code:</p>

<pre><code>System.setProperty(""javax.net.ssl.keyStore"",""C:\\ProgramFiles\\jre6\\bin\\server.jks"");
System.setProperty(""javax.net.ssl.keyStorePassword"",""password"");
SSLServerSocketFactory factory = (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();
ServerSocket ss = factory.createServerSocket(6543);
Socket s = ss.accept();
</code></pre>

<p>There is more code after that to process it, but it gets hung up and throws the exception there, so I'm not sure posting it will help any, but if it will, just comment for it. </p>

<p>I created the certificate following a tutorial for openssl on Ubuntu and transferred it over and created my keystore using:</p>

<pre><code>keytool -import -file ""C:\Documents and Settings\matt\Desktop\server.crt"" -keystore server.jks
</code></pre>

<p>I can easily admit that I don't fully understand how a large portion of this works, so any help would be appreciated. Also, I suppose I am going to leave it outside the scope of this question becauseI feel like this is a pretty big question on its own, butI would also like some insight as to how to connect the client if possible. Sorry for all the trouble and thanks ahead of time for all the help. </p>

<p>EDIT:</p>

<p>the tutorial I followed is here:
<a href=""http://www.akadia.com/services/ssh_test_certificate.html"" rel=""nofollow"">http://www.akadia.com/services/ssh_test_certificate.html</a></p>

<p>Thanks again!</p>

<p>EDIT:</p>

<p>The Exception being throw is:</p>

<pre><code>javax.net.ssl.SSLException: No available certificate or key corresponds to the SSL cipher suites which are enabled
</code></pre>

<p>I tried to Google the exception and most everything was a tutorial describing how to create a keystore (which I am under the impression that I already have). I will continue to sift through these search results. </p>

<p>Thanks!</p>
","<p>When you create a keystore like this, you only put a certificate in your keystore:</p>

<pre><code>keytool -import -file ""server.crt"" -keystore server.jks
</code></pre>

<p>What you need is to have a private key + a certificate.</p>

<p>Either you import them from somewhere else if you already have a certificate issued by a Certification Authority, or you can create a self-signed certificate if it's for limited use.</p>

<p>If the certificate you've created with OpenSSL is self-signed (or from a mini CA for your own use, e.g. with <code>CA.pl</code>), it's probably not worth the trouble of doing the conversion. You might as well generate a self-signed certificate directly with <code>keytool</code>. See the <a href=""http://download.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html"" rel=""nofollow noreferrer"">""Generating Your Key Pair"" example</a> in the official <code>keytool</code> documentation:</p>

<blockquote>
<pre><code>keytool -genkeypair -dname ""cn=Mark Jones, ou=JavaSoft, o=Sun, c=US""
     -alias business -keypass kpi135 -keystore /working/mykeystore
     -storepass ab987c -validity 180
</code></pre>
</blockquote>

<p>Make sure you use <code>cn=your.fqdn.host.name</code> (or <code>cn=localhost</code> if it's for local tests only). (I think <code>keytool</code> provided with Java 7 also has support for subject alternative names, which would be better.)</p>

<p>If you already have a private key + certificate you want to re-use in PKCS#12 format (usually <code>.p12</code> file), you can import it using the method described in <a href=""https://security.stackexchange.com/questions/3779/how-can-i-export-my-private-key-from-a-java-keytool-keystore/3795#3795"">this question</a>.</p>

<p>If what you've produced with OpenSSL is in PEM format, it might be easier to bundle them in a PKCS#12 file with OpenSSL and then import them as above. This can be done with this:</p>

<pre><code>openssl pkcs12 -export -in cert.pem -inkey key.pem -out creds.p12
</code></pre>
","3850","<java><sockets><ssl><jce>","1","3","1","2011-06-21 21:55:32","6432402","1","3","1953819","","2011-06-21 21:37:32","2011-06-21 21:24:29",""
"6980567","Workaround on JCE can't authenticate the provider","<p>I'm running a set of tests on my custom JCE provider implemention (XYZProvider).<br>
Most of my tests are failing with the following error:-    </p>

<p><code>java.lang.SecurityException: JCE cannot authenticate the provider XYZProvider</code>    </p>

<p>I have installed (i.e. placed provider's jar file) outside of system JRE (I need to stick to this, can't install in JRE) and maybe this is the reason I'm getting this error.<br>
I have tried to search on this error without much success, tried using 
<code>grant codeBase ""//location of my provider class files"" { permission java.security.AllPermission; }</code> in java.security file to give the necessary permission but with no luck.</p>

<p>Have already added the following line in java.security
<code>security.provider.9=com.ingrian.security.nae.XYZProvider</code>    </p>

<p>Any ideas?<br>
Thanks.</p>
","<p>First of all you need to sign your provider as described here: <a href=""http://download.oracle.com/javase/6/docs/technotes/guides/security/crypto/HowToImplAProvider.html#Step61"" rel=""nofollow"">http://download.oracle.com/javase/6/docs/technotes/guides/security/crypto/HowToImplAProvider.html#Step61</a></p>

<p>but you can bypass this requirement: <a href=""http://java.zacheusz.eu/provider-signature-verif-vuln-2/273/"" rel=""nofollow"">http://java.zacheusz.eu/provider-signature-verif-vuln-2/273/</a></p>
","3613","<java><jce>","1","0","1","2013-06-20 20:58:57","","2","1","120800","","2011-08-08 11:03:40","2011-08-08 10:09:01",""
"12863235","CSR generated with Bouncycastle missing public key and attributes","<p>I am using Bouncy castle to generate CSR. This certificate is intended for CA. When i use OpenSSL to view the text information of the CSR, I find the public key and attributes missing. Any help is appreciated.</p>

<p>Versions:
Bouncy castle: bcpkix-jdk15on:1.47</p>

<pre><code>    String principal = ""CN=company1, OU=company1, O=company1, C=GB""
    AsymmetricKeyParameter keyParam = PrivateKeyFactory.createKey(pair.getPrivate().getEncoded());
    AlgorithmIdentifier signatureAlgorithm = new DefaultSignatureAlgorithmIdentifierFinder()
            .find(""SHA1WITHRSA"");
    AlgorithmIdentifier digestAlgorithm = new DefaultDigestAlgorithmIdentifierFinder().find(""SHA-1"");
    ContentSigner signer = new BcRSAContentSignerBuilder(signatureAlgorithm, digestAlgorithm).build(keyParam);

    SubjectPublicKeyInfo publicKeyInfo = new SubjectPublicKeyInfo(signatureAlgorithm, pair.getPublic()
            .getEncoded());
    PKCS10CertificationRequestBuilder csrBuilder = new PKCS10CertificationRequestBuilder(
            new X500Name(principal), publicKeyInfo);
    csrBuilder.addAttribute(X509Extension.basicConstraints, new BasicConstraints(true));
    csrBuilder.addAttribute(X509Extension.keyUsage, new KeyUsage(KeyUsage.cRLSign | KeyUsage.keyCertSign));
    csr = csrBuilder.build(signer);
</code></pre>

<p>Pem of the generated csr</p>

<pre><code>-----BEGIN CERTIFICATE REQUEST-----
MIICvjCCAaYCAQAwRjERMA8GA1UEAwwIY29tcGFueTExETAPBgNVBAsMCGNvbXBh
bnkxMREwDwYDVQQKDAhjb21wYW55MTELMAkGA1UEBhMCR0IwggE6MA0GCSqGSIb3
DQEBBQUAA4IBJwAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCf8WK4
L1yaBqlvV8cqlTerv53I5MchllrkR94oE42JNuQ0vmQlh/wc8WfqB1lkYvQdf04g
IQ69VQKCIfQeahODnQ9N/Ct4wIfoCz3KtZZq7DZgoIsMNf2tWlGwJMTbPYLJYjPv
rfxGMh79dF6VpxMDIHLrvhgYzDFfPxhQXpTTVNXY9pMkrQ+8ZnlqpSQLToQ5JUFZ
ZDiJtZvmhELGOrDxDDHBlmBRMadjRx5bP6JtJYtv540p55trUnJVRmGjjMvWw5aE
cKm7Z1BcoTwLsn0gzBR43el0J9QB+RMiDsJKhaBugzv3/852Ih8eZis6G4dRWnm9
BvAgRQfiW4ciJEnZAgMBAAGgGzALBgNVHQ8xBAMCAQYwDAYDVR0TMQUwAwEB/zAN
BgkqhkiG9w0BAQUFAAOCAQEAI6s+Wybusc2JBN36RMMG4qf8awIVJo/d1KwAhm9Y
7eO+ILLXk3wkZEdX5vEPQAdN7ZYYr1lCQfU2QuxDm3OCYuqJBt0fZGWAPYlfp6QD
AnQLEuLIIP/jZSgn2YzLeOuwO2n+7I9sx2lBihfkzNIK9PEiYM2TOA+4Rac7XdFA
o20GnruZ1Gq79C043Yz+G8iMNS44vaVjlshDovvmD5YDtjmQRtvDzoB2lyqEVwsS
Xy+vc0NdyWHJxAUPeOl+iqjF5YeACH92fFw9WV46syCAW7t9dCqdntvhKQRV+Me0
dOelvZPcqKtd7fsWYpKgUYkk61uWskeLIgnSonEyHWVSwQ==
-----END CERTIFICATE REQUEST-----
</code></pre>

<p>Missing public key, basic constraints and key usage</p>

<pre><code>Certificate Request:
    Data:
        Version: 0 (0x0)
        Subject: CN=company1, OU=company1, O=company1, C=GB
        Subject Public Key Info:
            Public Key Algorithm: sha1WithRSAEncryption
            Unable to load Public Key
140432158140064:error:0609E09C:digital envelope routines:PKEY_SET_TYPE:unsupported algorithm:p_lib.c:239:
140432158140064:error:0B07706F:x509 certificate routines:X509_PUBKEY_get:unsupported algorithm:x_pubkey.c:155:
        Attributes:
            X509v3 Key Usage         :unable to print attribute
            X509v3 Basic Constraints :unable to print attribute
    Signature Algorithm: sha1WithRSAEncryption
         23:ab:3e:5b:26:ee:b1:cd:89:04:dd:fa:44:c3:06:e2:a7:fc:
         6b:02:15:26:8f:dd:d4:ac:00:86:6f:58:ed:e3:be:20:b2:d7:
         93:7c:24:64:47:57:e6:f1:0f:40:07:4d:ed:96:18:af:59:42:
         41:f5:36:42:ec:43:9b:73:82:62:ea:89:06:dd:1f:64:65:80:
         3d:89:5f:a7:a4:03:02:74:0b:12:e2:c8:20:ff:e3:65:28:27:
         d9:8c:cb:78:eb:b0:3b:69:fe:ec:8f:6c:c7:69:41:8a:17:e4:
         cc:d2:0a:f4:f1:22:60:cd:93:38:0f:b8:45:a7:3b:5d:d1:40:
         a3:6d:06:9e:bb:99:d4:6a:bb:f4:2d:38:dd:8c:fe:1b:c8:8c:
         35:2e:38:bd:a5:63:96:c8:43:a2:fb:e6:0f:96:03:b6:39:90:
         46:db:c3:ce:80:76:97:2a:84:57:0b:12:5f:2f:af:73:43:5d:
         c9:61:c9:c4:05:0f:78:e9:7e:8a:a8:c5:e5:87:80:08:7f:76:
         7c:5c:3d:59:5e:3a:b3:20:80:5b:bb:7d:74:2a:9d:9e:db:e1:
         29:04:55:f8:c7:b4:74:e7:a5:bd:93:dc:a8:ab:5d:ed:fb:16:
         62:92:a0:51:89:24:eb:5b:96:b2:47:8b:22:09:d2:a2:71:32:
         1d:65:52:c1
</code></pre>
","<p>I found the problem. I was associating public key with a signature algorithm instead of an encryption algorithm.</p>

<pre><code>AlgorithmIdentifier signatureAlgorithm = new DefaultSignatureAlgorithmIdentifierFinder()
        .find(""SHA1WITHRSA"");
AlgorithmIdentifier digestAlgorithm = new DefaultDigestAlgorithmIdentifierFinder().find(""SHA-1"");
ContentSigner signer = new BcRSAContentSignerBuilder(signatureAlgorithm, digestAlgorithm).build(keyParam);
SubjectPublicKeyInfo publicKeyInfo = new SubjectPublicKeyInfo(signatureAlgorithm, pair.getPublic().getEncoded());
</code></pre>

<p>Here is the working code that would generate a CSR for RSA keys using signature algorithm SHA1WithRSA</p>

<pre><code>String principal = ""CN=company1, OU=company1, O=company1, C=GB"";
AsymmetricKeyParameter privateKey = PrivateKeyFactory.createKey(pair.getPrivate().getEncoded());
AlgorithmIdentifier signatureAlgorithm = new DefaultSignatureAlgorithmIdentifierFinder()
        .find(""SHA1WITHRSA"");
AlgorithmIdentifier digestAlgorithm = new DefaultDigestAlgorithmIdentifierFinder().find(""SHA-1"");
ContentSigner signer = new BcRSAContentSignerBuilder(signatureAlgorithm, digestAlgorithm).build(privateKey);

PKCS10CertificationRequestBuilder csrBuilder = new JcaPKCS10CertificationRequestBuilder(new X500Name(
        principal), pair.getPublic());
ExtensionsGenerator extensionsGenerator = new ExtensionsGenerator();
extensionsGenerator.addExtension(X509Extension.basicConstraints, true, new BasicConstraints(true));
extensionsGenerator.addExtension(X509Extension.keyUsage, true, new KeyUsage(KeyUsage.keyCertSign
        | KeyUsage.cRLSign));
csrBuilder.addAttribute(PKCSObjectIdentifiers.pkcs_9_at_extensionRequest, extensionsGenerator.generate());
csr = csrBuilder.build(signer);
</code></pre>
","3521","<java><encryption><bouncycastle><jce>","3","4","3","2016-06-15 22:29:21","12914329","0","6","","","","2012-10-12 16:21:00",""
"12863235","CSR generated with Bouncycastle missing public key and attributes","<p>I am using Bouncy castle to generate CSR. This certificate is intended for CA. When i use OpenSSL to view the text information of the CSR, I find the public key and attributes missing. Any help is appreciated.</p>

<p>Versions:
Bouncy castle: bcpkix-jdk15on:1.47</p>

<pre><code>    String principal = ""CN=company1, OU=company1, O=company1, C=GB""
    AsymmetricKeyParameter keyParam = PrivateKeyFactory.createKey(pair.getPrivate().getEncoded());
    AlgorithmIdentifier signatureAlgorithm = new DefaultSignatureAlgorithmIdentifierFinder()
            .find(""SHA1WITHRSA"");
    AlgorithmIdentifier digestAlgorithm = new DefaultDigestAlgorithmIdentifierFinder().find(""SHA-1"");
    ContentSigner signer = new BcRSAContentSignerBuilder(signatureAlgorithm, digestAlgorithm).build(keyParam);

    SubjectPublicKeyInfo publicKeyInfo = new SubjectPublicKeyInfo(signatureAlgorithm, pair.getPublic()
            .getEncoded());
    PKCS10CertificationRequestBuilder csrBuilder = new PKCS10CertificationRequestBuilder(
            new X500Name(principal), publicKeyInfo);
    csrBuilder.addAttribute(X509Extension.basicConstraints, new BasicConstraints(true));
    csrBuilder.addAttribute(X509Extension.keyUsage, new KeyUsage(KeyUsage.cRLSign | KeyUsage.keyCertSign));
    csr = csrBuilder.build(signer);
</code></pre>

<p>Pem of the generated csr</p>

<pre><code>-----BEGIN CERTIFICATE REQUEST-----
MIICvjCCAaYCAQAwRjERMA8GA1UEAwwIY29tcGFueTExETAPBgNVBAsMCGNvbXBh
bnkxMREwDwYDVQQKDAhjb21wYW55MTELMAkGA1UEBhMCR0IwggE6MA0GCSqGSIb3
DQEBBQUAA4IBJwAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCf8WK4
L1yaBqlvV8cqlTerv53I5MchllrkR94oE42JNuQ0vmQlh/wc8WfqB1lkYvQdf04g
IQ69VQKCIfQeahODnQ9N/Ct4wIfoCz3KtZZq7DZgoIsMNf2tWlGwJMTbPYLJYjPv
rfxGMh79dF6VpxMDIHLrvhgYzDFfPxhQXpTTVNXY9pMkrQ+8ZnlqpSQLToQ5JUFZ
ZDiJtZvmhELGOrDxDDHBlmBRMadjRx5bP6JtJYtv540p55trUnJVRmGjjMvWw5aE
cKm7Z1BcoTwLsn0gzBR43el0J9QB+RMiDsJKhaBugzv3/852Ih8eZis6G4dRWnm9
BvAgRQfiW4ciJEnZAgMBAAGgGzALBgNVHQ8xBAMCAQYwDAYDVR0TMQUwAwEB/zAN
BgkqhkiG9w0BAQUFAAOCAQEAI6s+Wybusc2JBN36RMMG4qf8awIVJo/d1KwAhm9Y
7eO+ILLXk3wkZEdX5vEPQAdN7ZYYr1lCQfU2QuxDm3OCYuqJBt0fZGWAPYlfp6QD
AnQLEuLIIP/jZSgn2YzLeOuwO2n+7I9sx2lBihfkzNIK9PEiYM2TOA+4Rac7XdFA
o20GnruZ1Gq79C043Yz+G8iMNS44vaVjlshDovvmD5YDtjmQRtvDzoB2lyqEVwsS
Xy+vc0NdyWHJxAUPeOl+iqjF5YeACH92fFw9WV46syCAW7t9dCqdntvhKQRV+Me0
dOelvZPcqKtd7fsWYpKgUYkk61uWskeLIgnSonEyHWVSwQ==
-----END CERTIFICATE REQUEST-----
</code></pre>

<p>Missing public key, basic constraints and key usage</p>

<pre><code>Certificate Request:
    Data:
        Version: 0 (0x0)
        Subject: CN=company1, OU=company1, O=company1, C=GB
        Subject Public Key Info:
            Public Key Algorithm: sha1WithRSAEncryption
            Unable to load Public Key
140432158140064:error:0609E09C:digital envelope routines:PKEY_SET_TYPE:unsupported algorithm:p_lib.c:239:
140432158140064:error:0B07706F:x509 certificate routines:X509_PUBKEY_get:unsupported algorithm:x_pubkey.c:155:
        Attributes:
            X509v3 Key Usage         :unable to print attribute
            X509v3 Basic Constraints :unable to print attribute
    Signature Algorithm: sha1WithRSAEncryption
         23:ab:3e:5b:26:ee:b1:cd:89:04:dd:fa:44:c3:06:e2:a7:fc:
         6b:02:15:26:8f:dd:d4:ac:00:86:6f:58:ed:e3:be:20:b2:d7:
         93:7c:24:64:47:57:e6:f1:0f:40:07:4d:ed:96:18:af:59:42:
         41:f5:36:42:ec:43:9b:73:82:62:ea:89:06:dd:1f:64:65:80:
         3d:89:5f:a7:a4:03:02:74:0b:12:e2:c8:20:ff:e3:65:28:27:
         d9:8c:cb:78:eb:b0:3b:69:fe:ec:8f:6c:c7:69:41:8a:17:e4:
         cc:d2:0a:f4:f1:22:60:cd:93:38:0f:b8:45:a7:3b:5d:d1:40:
         a3:6d:06:9e:bb:99:d4:6a:bb:f4:2d:38:dd:8c:fe:1b:c8:8c:
         35:2e:38:bd:a5:63:96:c8:43:a2:fb:e6:0f:96:03:b6:39:90:
         46:db:c3:ce:80:76:97:2a:84:57:0b:12:5f:2f:af:73:43:5d:
         c9:61:c9:c4:05:0f:78:e9:7e:8a:a8:c5:e5:87:80:08:7f:76:
         7c:5c:3d:59:5e:3a:b3:20:80:5b:bb:7d:74:2a:9d:9e:db:e1:
         29:04:55:f8:c7:b4:74:e7:a5:bd:93:dc:a8:ab:5d:ed:fb:16:
         62:92:a0:51:89:24:eb:5b:96:b2:47:8b:22:09:d2:a2:71:32:
         1d:65:52:c1
</code></pre>
","<p>Thanks a lot Rag,</p>

<p>Didn't know ExtensionGenerator before and was trying to add as csrBuilder.addAttribute(..)</p>

<p>It never failed but didn't generated extension properly.</p>

<p>Adding few more lines to add ExtendedKeyUsage and Subject Alternate Name since many people are facing this issue.</p>

<pre><code>        Vector&lt;KeyPurposeId&gt; extendedKeyUsageVector = new Vector&lt;KeyPurposeId&gt;();
        for (String extendedKeyUsage : bean.getExtendedKeyUsage()) {
            extendedKeyUsageVector.add(new KeyPurposeId(extendedKeyUsage));
        }
        extnGen.addExtension(X509Extension.extendedKeyUsage, false, new ExtendedKeyUsage(extendedKeyUsageVector));


       GeneralName[] subjectAltName = new GeneralName[2];
       subjectAltName[0] = new GeneralName(GeneralName.dNSName, ""abc.com"");
       subjectAltName[1] = new GeneralName(GeneralName.dNSName, ""xyz.com"");

       extnGen.addExtension(X509Extension.subjectAlternativeName, false, new GeneralNames(subjectAltName));
</code></pre>
","3521","<java><encryption><bouncycastle><jce>","3","1","3","2016-06-15 22:29:21","12914329","0","6","","","","2012-10-12 16:21:00",""
"12863235","CSR generated with Bouncycastle missing public key and attributes","<p>I am using Bouncy castle to generate CSR. This certificate is intended for CA. When i use OpenSSL to view the text information of the CSR, I find the public key and attributes missing. Any help is appreciated.</p>

<p>Versions:
Bouncy castle: bcpkix-jdk15on:1.47</p>

<pre><code>    String principal = ""CN=company1, OU=company1, O=company1, C=GB""
    AsymmetricKeyParameter keyParam = PrivateKeyFactory.createKey(pair.getPrivate().getEncoded());
    AlgorithmIdentifier signatureAlgorithm = new DefaultSignatureAlgorithmIdentifierFinder()
            .find(""SHA1WITHRSA"");
    AlgorithmIdentifier digestAlgorithm = new DefaultDigestAlgorithmIdentifierFinder().find(""SHA-1"");
    ContentSigner signer = new BcRSAContentSignerBuilder(signatureAlgorithm, digestAlgorithm).build(keyParam);

    SubjectPublicKeyInfo publicKeyInfo = new SubjectPublicKeyInfo(signatureAlgorithm, pair.getPublic()
            .getEncoded());
    PKCS10CertificationRequestBuilder csrBuilder = new PKCS10CertificationRequestBuilder(
            new X500Name(principal), publicKeyInfo);
    csrBuilder.addAttribute(X509Extension.basicConstraints, new BasicConstraints(true));
    csrBuilder.addAttribute(X509Extension.keyUsage, new KeyUsage(KeyUsage.cRLSign | KeyUsage.keyCertSign));
    csr = csrBuilder.build(signer);
</code></pre>

<p>Pem of the generated csr</p>

<pre><code>-----BEGIN CERTIFICATE REQUEST-----
MIICvjCCAaYCAQAwRjERMA8GA1UEAwwIY29tcGFueTExETAPBgNVBAsMCGNvbXBh
bnkxMREwDwYDVQQKDAhjb21wYW55MTELMAkGA1UEBhMCR0IwggE6MA0GCSqGSIb3
DQEBBQUAA4IBJwAwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCf8WK4
L1yaBqlvV8cqlTerv53I5MchllrkR94oE42JNuQ0vmQlh/wc8WfqB1lkYvQdf04g
IQ69VQKCIfQeahODnQ9N/Ct4wIfoCz3KtZZq7DZgoIsMNf2tWlGwJMTbPYLJYjPv
rfxGMh79dF6VpxMDIHLrvhgYzDFfPxhQXpTTVNXY9pMkrQ+8ZnlqpSQLToQ5JUFZ
ZDiJtZvmhELGOrDxDDHBlmBRMadjRx5bP6JtJYtv540p55trUnJVRmGjjMvWw5aE
cKm7Z1BcoTwLsn0gzBR43el0J9QB+RMiDsJKhaBugzv3/852Ih8eZis6G4dRWnm9
BvAgRQfiW4ciJEnZAgMBAAGgGzALBgNVHQ8xBAMCAQYwDAYDVR0TMQUwAwEB/zAN
BgkqhkiG9w0BAQUFAAOCAQEAI6s+Wybusc2JBN36RMMG4qf8awIVJo/d1KwAhm9Y
7eO+ILLXk3wkZEdX5vEPQAdN7ZYYr1lCQfU2QuxDm3OCYuqJBt0fZGWAPYlfp6QD
AnQLEuLIIP/jZSgn2YzLeOuwO2n+7I9sx2lBihfkzNIK9PEiYM2TOA+4Rac7XdFA
o20GnruZ1Gq79C043Yz+G8iMNS44vaVjlshDovvmD5YDtjmQRtvDzoB2lyqEVwsS
Xy+vc0NdyWHJxAUPeOl+iqjF5YeACH92fFw9WV46syCAW7t9dCqdntvhKQRV+Me0
dOelvZPcqKtd7fsWYpKgUYkk61uWskeLIgnSonEyHWVSwQ==
-----END CERTIFICATE REQUEST-----
</code></pre>

<p>Missing public key, basic constraints and key usage</p>

<pre><code>Certificate Request:
    Data:
        Version: 0 (0x0)
        Subject: CN=company1, OU=company1, O=company1, C=GB
        Subject Public Key Info:
            Public Key Algorithm: sha1WithRSAEncryption
            Unable to load Public Key
140432158140064:error:0609E09C:digital envelope routines:PKEY_SET_TYPE:unsupported algorithm:p_lib.c:239:
140432158140064:error:0B07706F:x509 certificate routines:X509_PUBKEY_get:unsupported algorithm:x_pubkey.c:155:
        Attributes:
            X509v3 Key Usage         :unable to print attribute
            X509v3 Basic Constraints :unable to print attribute
    Signature Algorithm: sha1WithRSAEncryption
         23:ab:3e:5b:26:ee:b1:cd:89:04:dd:fa:44:c3:06:e2:a7:fc:
         6b:02:15:26:8f:dd:d4:ac:00:86:6f:58:ed:e3:be:20:b2:d7:
         93:7c:24:64:47:57:e6:f1:0f:40:07:4d:ed:96:18:af:59:42:
         41:f5:36:42:ec:43:9b:73:82:62:ea:89:06:dd:1f:64:65:80:
         3d:89:5f:a7:a4:03:02:74:0b:12:e2:c8:20:ff:e3:65:28:27:
         d9:8c:cb:78:eb:b0:3b:69:fe:ec:8f:6c:c7:69:41:8a:17:e4:
         cc:d2:0a:f4:f1:22:60:cd:93:38:0f:b8:45:a7:3b:5d:d1:40:
         a3:6d:06:9e:bb:99:d4:6a:bb:f4:2d:38:dd:8c:fe:1b:c8:8c:
         35:2e:38:bd:a5:63:96:c8:43:a2:fb:e6:0f:96:03:b6:39:90:
         46:db:c3:ce:80:76:97:2a:84:57:0b:12:5f:2f:af:73:43:5d:
         c9:61:c9:c4:05:0f:78:e9:7e:8a:a8:c5:e5:87:80:08:7f:76:
         7c:5c:3d:59:5e:3a:b3:20:80:5b:bb:7d:74:2a:9d:9e:db:e1:
         29:04:55:f8:c7:b4:74:e7:a5:bd:93:dc:a8:ab:5d:ed:fb:16:
         62:92:a0:51:89:24:eb:5b:96:b2:47:8b:22:09:d2:a2:71:32:
         1d:65:52:c1
</code></pre>
","<p>X509Extension has been deprecated:
<a href=""http://www.borelly.net/cb/docs/javaBC-1.4.8/prov/deprecated-list.html"" rel=""nofollow"">http://www.borelly.net/cb/docs/javaBC-1.4.8/prov/deprecated-list.html</a>
So here's an update:</p>

<pre><code>static private X500Name getX500Name(){

    final String testPostalCode = ""92156-4105"";
    return new X500NameBuilder( BCStrictStyle.INSTANCE )
            .addRDN( BCStyle.CN, ""JD"" )
            .addRDN( BCStrictStyle.POSTAL_CODE, testPostalCode )
            .addRDN( BCStrictStyle.C, ""US"" )
            .build();
}//getX500Name



static public PKCS10CertificationRequest genCSR(){
    try{
        KeyPair pair = getKeyPair();

        GeneralNames subjectAltName = new GeneralNames(
                new GeneralName(GeneralName.rfc822Name, ""MyAwesomeAddr@email.com""));


        ExtensionsGenerator extnsnGenr = new ExtensionsGenerator();
        extnsnGenr.addExtension(Extension.subjectAlternativeName, false, subjectAltName);

        PKCS10CertificationRequestBuilder p10Builder = new JcaPKCS10CertificationRequestBuilder(
                getX500Name()
                , pair.getPublic() )
                .addAttribute(PKCSObjectIdentifiers.pkcs_9_at_extensionRequest, extnsnGenr.generate());
                //.setLeaveOffEmptyAttributes(false)
                ;

        JcaContentSignerBuilder csBuilder = new JcaContentSignerBuilder( SHA256withECDSA );

        ContentSigner signer = csBuilder.build( pair.getPrivate() );
        PKCS10CertificationRequest CSR = p10Builder.build( signer );
    return CSR;
    }
    catch ( IOException| OperatorCreationException X ){ mLog.error( CRYPTOERR.toString() ); }
}//genCSR
</code></pre>
","3521","<java><encryption><bouncycastle><jce>","3","0","3","2016-06-15 22:29:21","12914329","0","6","","","","2012-10-12 16:21:00",""
"18259140","Java BouncyCastle :der length more than 4 bytes","<p>I'm trying to load a pkcs store using BouncyCastle provider. I'm getting the p12 file using the classloader like this - </p>

<pre><code>InputStream p12 = MyClass.class.getClassLoader().getResourceAsStream(""pkcsfile.p12"");
</code></pre>

<p>and then use the inputstream to load it into my keystore like this -</p>

<pre><code>        KeyStore ks = java.security.KeyStore.getInstance(""PKCS12"", provider);
    ks.load(p12,""password"".toCharArray());
</code></pre>

<p>The load method throws an exception - </p>

<blockquote>
  <p>java.io.IOException: DER length more than 4 bytes</p>
</blockquote>

<p>It does work fine when I five it a FileInputStream. I'm not sure what's going on. Can someone help? - thanks</p>
","","3480","<java><security><bouncycastle><jce><pkcs#12>","2","","0","2015-03-11 18:43:04","","1","","","","","2013-08-15 18:23:16",""
"7385882","Verify signature using elliptic curve cryptography","<p>I need to verify a signature of a message which contains several values. The only parameters I have are the signature, the public key and the values itself. The algorithm used for creating the signature is eliptic curve cryptography with 192 bit. I allready tried to find code examples on the net but I didn't find anything for this case.</p>

<p>Has anybody experiences with this algorithm using java for verification? Could you please provide code or a link to an example?</p>

<p>Thank you for your help!</p>
","<p>You can probably use <a href=""http://bouncycastle.org/index.html"" rel=""nofollow"">Bouncy Castle</a> library.</p>

<p>See <a href=""http://www.bouncycastle.org/wiki/display/JA1/Using+Elliptic+Curve"" rel=""nofollow"">http://www.bouncycastle.org/wiki/display/JA1/Using+Elliptic+Curve</a> </p>
","3421","<java><security><digital-signature><jce><elliptic-curve>","1","0","2","2011-09-13 11:06:37","7386402","0","1","906184","","2011-09-12 13:32:24","2011-09-12 09:38:54",""
"7385882","Verify signature using elliptic curve cryptography","<p>I need to verify a signature of a message which contains several values. The only parameters I have are the signature, the public key and the values itself. The algorithm used for creating the signature is eliptic curve cryptography with 192 bit. I allready tried to find code examples on the net but I didn't find anything for this case.</p>

<p>Has anybody experiences with this algorithm using java for verification? Could you please provide code or a link to an example?</p>

<p>Thank you for your help!</p>
","<p>You are a bit short on information there...</p>

<p>There are several signature schemes which use elliptic curves, but the most widespread (by far) is <a href=""http://en.wikipedia.org/wiki/Elliptic_Curve_DSA"" rel=""noreferrer"">ECDSA</a>. You must then worry about the following points:</p>

<ul>
<li><p>Signature operates on a sequence of bits. Every single data bit must be correct. Here, you have ""values"" so there must be an encoding of those values into a sequence of bits (or bytes). To verify the signature, you must use the same encoding than the one used to generate the signature.</p></li>
<li><p>ECDSA begins by hashing the input data with a <a href=""http://en.wikipedia.org/wiki/Cryptographic_hash_function"" rel=""noreferrer"">cryptographic hash function</a>. There again, you must use the same one than what was used for generating the signature. As a wild guess, I would say that the hash function is probably <a href=""http://en.wikipedia.org/wiki/SHA-1"" rel=""noreferrer"">SHA-1</a>.</p></li>
<li><p>ECDSA operates in an <a href=""http://en.wikipedia.org/wiki/Elliptic_curve"" rel=""noreferrer"">elliptic curve</a>. The curve <em>size</em> is not enough to define the curve: there are many 192-bit curves. However, since defining your own curve is hard, most people use one curve among the 15 curves defined in <a href=""http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf"" rel=""noreferrer"">FIPS 186-3</a>. One of those 15 curves has a ""192-bit size"" (it is called ""P-192"") so chances are that the signature uses that curve.</p></li>
<li><p>An ECDSA public key is the encoding of a curve point. A curve point is, nominally, a pair of integers <em>(X, Y)</em> (these are the ""coordinates"" of the point). These integers are from the base field in which the curve lives; for the P-192 curve, the coordinates are 192-bit integers. The ""normal"" encoding for such a public key is then a 49-byte string: the first byte will be 0x02, followed by the big-endian unsigned encoding of <em>X</em> (24 bytes), then the unsigned encoding of <em>Y</em> (24 bytes). Other encodings are possible.</p></li>
<li><p>An ECDSA signature formally consists in two integer values, usually called <em>r</em> and <em>s</em> (192-bit integers too). There again, the signature you have is probably a sequence of bytes which is an encoding of the two integers. There are two common encodings, one being a raw big-endian unsigned encoding of both value (hence a 48-byte signature), the other using ASN.1 (for a signature of length 53 or 54  bytes, or so).</p></li>
</ul>

<p>Using <a href=""http://bouncycastle.org/index.html"" rel=""noreferrer"">Bouncy Castle</a>, as @Ashkan suggests, is a good idea. But, as you see, there are quite a lot of assumptions to do about your situation. If you want to gain a thorough understanding of what is going on, buy a copy of <a href=""http://webstore.ansi.org/RecordDetail.aspx?sku=ANSI%20X9.62:2005"" rel=""noreferrer"">ANSI X9.62:2005</a> (the ECDSA standard). Be warned that the mathematical contents are quite heavy.</p>
","3421","<java><security><digital-signature><jce><elliptic-curve>","1","5","2","2011-09-13 11:06:37","7386402","0","1","906184","","2011-09-12 13:32:24","2011-09-12 09:38:54",""
"6515314","Generating a BKS keystore and storing app key","<p>I am supposed to create a BKS keystore and store a private Application key which is a 48 character long string in this Keystore.
I also have a JCEKS keystore which has this key value already in it. If I try to convert into BKS type keystore using portecle tool, the Key entry is lost.</p>

<p>I am new to JCE. Can someone please guide me as to what needs to be done to import this Key in the Keystore?</p>

<p>Thanks.   </p>
","<p>Try this command</p>

<pre><code>keytool -importcert -v -trustcacerts -file ""cacert.pem"" -alias ca -keystore ""mySrvTruststore.bks"" -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath ""bcprov-jdk16-145.jar"" -storetype BKS -storepass testtest
</code></pre>
","3307","<java><keystore><jce>","3","11","1","2011-08-29 07:50:54","","0","2","","","","2011-06-29 03:02:01",""
"14580340","Generate GOST 34.10-2001 keypair and save it to some keystore","<p>Currently I need to generate a keypair for GOST 34.10-2001 signature algorithm. It was pleasant to discover that bouncy castle provider has supported this algorithm, but I can not generate a keypair and save it to any keystore of any type. Currently I tried this command (this command works great if <code>keyalg</code> is <code>DSA</code> and sigalg is <code>SHA1withDSA</code>):</p>

<pre><code>keytool -genkey -alias test1 -keyalg ECGOST3410 -keysize 512  -sigalg GOST3411withECGOST3410 \
-keypass test_1 -validity 1000 -storetype JKS -keystore test1.jks -storepass test_1 -v \
-provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath ""bcprov-jdk16-1.46.jar""
</code></pre>

<p>But I've got an error: </p>

<pre><code>keytool error: java.lang.IllegalArgumentException: unknown key size.
java.lang.IllegalArgumentException: unknown key size.
        at sun.security.x509.CertAndKeyGen.generate(CertAndKeyGen.java:134)
        at sun.security.tools.KeyTool.doGenKeyPair(KeyTool.java:1156)
        at sun.security.tools.KeyTool.doCommands(KeyTool.java:786)
        at sun.security.tools.KeyTool.run(KeyTool.java:172)
        at sun.security.tools.KeyTool.main(KeyTool.java:166)
</code></pre>

<p>Exactly the same error I can see when I try to manipulate keysize or remove <code>keysize</code> option from the command. But there is some special case. When I set <code>keysize</code> to <code>256</code> I've got another error:</p>

<pre><code>keytool error: java.lang.IllegalArgumentException: key size not configurable.
java.lang.IllegalArgumentException: key size not configurable.
        at sun.security.x509.CertAndKeyGen.generate(CertAndKeyGen.java:134)
        at sun.security.tools.KeyTool.doGenKeyPair(KeyTool.java:1156)
        at sun.security.tools.KeyTool.doCommands(KeyTool.java:786)
        at sun.security.tools.KeyTool.run(KeyTool.java:172)
        at sun.security.tools.KeyTool.main(KeyTool.java:166)
</code></pre>

<p>Currently I have no idea how to generate a keypair and how to save it to a keystore. Also I've got some java code that can generate a key pair for GOST 34.10-2001 algorithm:</p>

<pre><code>Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

KeyPairGenerator kpg = KeyPairGenerator.getInstance(""ECGOST3410"", ""BC"");
kpg.initialize(new ECGenParameterSpec(""GostR3410-2001-CryptoPro-A""));

KeyPair kp = kpg.generateKeyPair();
</code></pre>

<p>This code sample uses <code>ECGenParameterSpec</code> class to initialize a key pair generator, so may be I should provide it somehow to the keytool (<code>-providerArg provider_arg</code> or <code>-Jjavaoption</code>)?</p>

<p>P.S. I think that I should provide curve name as some parameter but I can not determine what parameter I should use.</p>
","<p>You will not be able to use keytool and BC to create a keystore with GOST3410 keys.</p>

<p><code>sun.security.x509.CertAndKeyGen</code> class used by the keytool does not provide an option to initialize the key generator with parameters, while <a href=""https://github.com/bcgit/bc-java/blob/master/prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ecgost/KeyPairGeneratorSpi.java"" rel=""noreferrer"">BC GOST3410 key generator</a> requires the initialization with <code>ECParameterSpec</code>.</p>

<p>You can create the keypair+certificate and place them into the keystore programmatically:</p>

<pre><code>Security.addProvider( new org.bouncycastle.jce.provider.BouncyCastleProvider() );

KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance( ""ECGOST3410"", ""BC"" );
keyPairGenerator.initialize( new ECGenParameterSpec( ""GostR3410-2001-CryptoPro-A"" ) );
KeyPair keyPair = keyPairGenerator.generateKeyPair();

org.bouncycastle.asn1.x500.X500Name subject = new org.bouncycastle.asn1.x500.X500Name( ""CN=Me"" );
org.bouncycastle.asn1.x500.X500Name issuer = subject; // self-signed
BigInteger serial = BigInteger.ONE; // serial number for self-signed does not matter a lot
Date notBefore = new Date();
Date notAfter = new Date( notBefore.getTime() + TimeUnit.DAYS.toMillis( 365 ) );

org.bouncycastle.cert.X509v3CertificateBuilder certificateBuilder = new org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder(
        issuer, serial,
        notBefore, notAfter,
        subject, keyPair.getPublic()
);
org.bouncycastle.cert.X509CertificateHolder certificateHolder = certificateBuilder.build(
        new org.bouncycastle.operator.jcajce.JcaContentSignerBuilder( ""GOST3411withECGOST3410"" )
                .build( keyPair.getPrivate() )
);
org.bouncycastle.cert.jcajce.JcaX509CertificateConverter certificateConverter = new org.bouncycastle.cert.jcajce.JcaX509CertificateConverter();
X509Certificate certificate = certificateConverter.getCertificate( certificateHolder );

KeyStore keyStore = KeyStore.getInstance( ""JKS"" );
keyStore.load( null, null ); // initialize new keystore
keyStore.setEntry(
        ""alias"",
        new KeyStore.PrivateKeyEntry(
                keyPair.getPrivate(),
                new Certificate[] { certificate }
        ),
        new KeyStore.PasswordProtection( ""entryPassword"".toCharArray() )
);
keyStore.store( new FileOutputStream( ""test.jks"" ), ""keystorePassword"".toCharArray() );
</code></pre>
","3236","<java><bouncycastle><keytool><jce><gost3410>","4","8","1","2014-05-06 10:09:34","23491746","0","1","642653","","2014-04-18 10:51:57","2013-01-29 10:09:09",""
"50298687","Bouncy Castle vs Java default RSA with OAEP","<p>Can someone explain to me why this code throws <code>javax.crypto.BadPaddingException: Decryption error</code> on the final line when it's decrypting the key?</p>

<pre><code>// Given an RSA key pair...
KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
keyGen.initialize(2048);
KeyPair keyPair = keyGen.genKeyPair();
PrivateKey privateKey = keyPair.getPrivate();
PublicKey publicKey = keyPair.getPublic();

// ... and an AES key:
KeyGenerator keyGenerator = KeyGenerator.getInstance(""AES"");
keyGenerator.init(256);
SecretKey aesKey = keyGenerator.generateKey();

// When I encrypt the key with this Bouncy Castle cipher:
Cipher encryptionCipher = Cipher.getInstance(""RSA/NONE/OAEPWithSHA256AndMGF1Padding"", ""BC"");
encryptionCipher.init(Cipher.ENCRYPT_MODE, publicKey);
byte[] encryptedKey = encryptionCipher.doFinal(aesKey.getEncoded());

// Then trying to decrypt the key with this cipher...
Cipher decryptionCipher = Cipher.getInstance(""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"");
decryptionCipher.init(Cipher.DECRYPT_MODE, privateKey);
// ... throws `javax.crypto.BadPaddingException: Decryption error` here:
decryptionCipher.doFinal(encryptedKey);
</code></pre>

<p>Is the following statement from <a href=""https://stackoverflow.com/a/27886397/66722"">https://stackoverflow.com/a/27886397/66722</a> also true for RSA with OAEP?</p>

<blockquote>
  <p>""RSA/ECB/PKCS1Padding"" actually doesn't implement ECB mode encryption.
  It should have been called ""RSA/None/PKCS1Padding"" as it can only be
  used to encrypt a single block of plaintext (or, indeed a secret key).
  This is just a naming mistake of Sun/Oracle.</p>
</blockquote>

<p>If so, I would expect these transformations to be equivalent and my test above to pass. The same padding has been specified in both, so why the <code>BadPaddingException</code>?</p>

<p>Either way, I would appreciate a layman's explanation of what the difference is.</p>
","<p>For similar Stackoverflow questions with more information please see <a href=""https://stackoverflow.com/users/589259/maarten-bodewes"">Maarten Bodewes</a> answers to <a href=""https://stackoverflow.com/q/33572909/238704"">this</a> and <a href=""https://stackoverflow.com/q/32161720/238704"">this</a>.</p>

<p>The ""mode"" part of the transformation string has no effect. The problem is different defaults used by different providers. This is unfortunate and very definitely suboptimal. Should we blame Sun/Oracle? I have no opinion beyond being dissatisfied with the result.</p>

<p>OAEP is a fairly complicated construction with two different hash functions as parameters. The Cipher transform string lets you specify one of these, which you have specified as SHA-256. However, the MGF1 function also is parameterized by a hash function which you cannot specify in the cipher transformation string. The Oracle provider defaults to SHA1 whereas the BouncyCastle provider defaults to SHA-256. So, in effect, there is a hidden parameter that is critical for interoperability.</p>

<p>The solution is to specify more fully what these hidden parameters are by supplying an <a href=""https://docs.oracle.com/javase/8/docs/api/javax/crypto/spec/OAEPParameterSpec.html"" rel=""noreferrer""><code>OAEPParameterSpec</code></a> to the <code>Cipher.init(...)</code> method as in the following example:</p>

<pre><code>Cipher encryptionCipher = Cipher.getInstance(""RSA/NONE/OAEPWithSHA256AndMGF1Padding"", ""BC"");
OAEPParameterSpec oaepParameterSpec = new OAEPParameterSpec(""SHA-256"", ""MGF1"",
                MGF1ParameterSpec.SHA256, PSource.PSpecified.DEFAULT);
encryptionCipher.init(Cipher.ENCRYPT_MODE, publicKey, oaepParameterSpec);
// ...
// ...
// ...
Cipher decryptionCipher = Cipher.getInstance(""RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING"");
oaepParameterSpec = new OAEPParameterSpec(""SHA-256"", ""MGF1"",
                MGF1ParameterSpec.SHA256, PSource.PSpecified.DEFAULT);
decryptionCipher.init(Cipher.DECRYPT_MODE, privateKey, oaepParameterSpec);
</code></pre>

<p>The first one is effectively a no-op, because those are already the defaults for Bouncycastle.</p>
","3197","<java><encryption><rsa><bouncycastle><jce>","4","12","1","2018-05-12 14:56:38","50299291","1","2","","","","2018-05-11 19:02:32",""
"5118168","RC5 encryption and decryption of data using JCE","<p>I need an java RC5 encryption and decryption algorithm.</p>
","<p>The JDK comes with a JCE provider supporting RC5. See <a href=""http://download.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html"" rel=""nofollow"">http://download.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html</a> and look for the explanations on the Cipher class to get you started.</p>

<p>Also look at the <a href=""http://download.oracle.com/javase/6/docs/api/javax/crypto/spec/RC5ParameterSpec.html"" rel=""nofollow"">RC5ParameterSpec</a> class.</p>
","3123","<java><encryption><jce>","1","0","2","2013-10-07 11:02:17","","1","2","1077754","","2013-10-07 11:02:17","2011-02-25 14:07:26",""
"5118168","RC5 encryption and decryption of data using JCE","<p>I need an java RC5 encryption and decryption algorithm.</p>
","<p>The JCE includes support for RC5 but Sun has <em>not</em> implemented RC5 in any of their providers. The Bouncycastle provider, on the other hand, does include RC5. So if you just add the bouncycastle provider you should be able to use RC5 through the JCE (e.g. <code>Cipher c = Cipher.getInstance(""RC5/CBC/PKCS5Padding"");</code>)</p>

<p>However, just because you can get it for free does not mean you can legally use it for free. For example, in the U.S. you would need to obtain a license from the RC5 patent holder.</p>
","3123","<java><encryption><jce>","1","2","2","2013-10-07 11:02:17","","1","2","1077754","","2013-10-07 11:02:17","2011-02-25 14:07:26",""
"30442771","Java JDK 7 SSL Issue","<p>I'm facing a very strange issue and i'm blocked from several days on it
I have a WS client acting on SSL; with JDK 1.5 all orks good; upgrading to JDK 1.7 I'm having the error ""javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure""
So i debugged and I arrived to write a very simple and stupid Java main; in JDK 1.5 it works; in JDK 1.7 it doesn't.
By searching and reading Oracle documentation, in my JDK 1.7 environment i did the following steps:</p>

<ul>
<li><p>installed the JDK 1.7 JCE extension downloaded from this URL: <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow"">http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html</a></p></li>
<li><p>imported the certificate by using the keytool command: keytool -importcert -file C:\certificato\mycert.spcoop.gov_25_05_15.der -alias prenotazioni  -keystore cacerts</p></li>
<li><p>added these JVM parameters: -Djavax.net.debug=all -Dhttps.protocols=""TLSv1.2,TLSv1.1,TLSv1,SSLv3""</p></li>
</ul>

<p>This is my Java code:</p>

<pre><code>SSLSocketFactory sslsocketfactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
URL url = new URL(https_url);
HttpsURLConnection conn = (HttpsURLConnection)url.openConnection();
conn.setSSLSocketFactory(sslsocketfactory);
InputStream inputstream = conn.getInputStream();
InputStreamReader inputstreamreader = new InputStreamReader(inputstream);
BufferedReader bufferedreader = new BufferedReader(inputstreamreader);
String string = null;
while ((string = bufferedreader.readLine()) != null) {
System.out.println(""Received "" + string);
}
</code></pre>

<p>When I execute my code, in JDK 5 all works OK; in JDK 7 I have this error:</p>

<pre><code>javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure
at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)
at sun.security.ssl.Alerts.getSSLException(Alerts.java:154)
at sun.security.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1979)
at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1086)
at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1332)
at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1359)
at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1343)
at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:563)
at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185)
at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1301)
at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:254)
at test.TestWs.main(TestWs.java:261)
</code></pre>

<p>My javax.net debug in JDK 7 is the following:</p>

<pre><code>keyStore is :
keyStore type is : jks
keyStore provider is :
init keystore
init keymanager of type SunX509
trustStore is: C:\Program Files\Java\jdk1.7.0_79\jre\lib\security\cacerts
trustStore type is : jks
trustStore provider is :
init truststore
adding as trusted cert:
Subject: CN=SwissSign Platinum CA - G2, O=SwissSign AG, C=CH
Issuer: CN=SwissSign Platinum CA - G2, O=SwissSign AG, C=CH
Algorithm: RSA; Serial number: 0x4eb200670c035d4f
Valid from Wed Oct 25 10:36:00 CEST 2006 until Sat Oct 25 10:36:00
adding as trusted cert:
Subject: CN=Starfield Root Certificate Authority - G2, O=""Starfield Technologies, Inc."", L=Scottsdale, ST=Arizona, C=US
Issuer: CN=Starfield Root Certificate Authority - G2, O=""Starfield Technologies, Inc."", L=Scottsdale, ST=Arizona, C=US
Algorithm: RSA; Serial number: 0x0
Valid from Tue Sep 01 02:00:00 CEST 2009 until Fri Jan 01 00:59:59 CET 2038
trigger seeding of SecureRandom
done seeding SecureRandom
Ignoring unsupported cipher suite: TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
Ignoring unsupported cipher suite: TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
Ignoring unsupported cipher suite: TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
Ignoring unsupported cipher suite: TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
Ignoring unsupported cipher suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
Ignoring unsupported cipher suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
Ignoring unsupported cipher suite: TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
Ignoring unsupported cipher suite: TLS_RSA_WITH_AES_256_CBC_SHA256
Ignoring unsupported cipher suite: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
Ignoring unsupported cipher suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
Ignoring unsupported cipher suite: TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
Ignoring unsupported cipher suite: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
Ignoring unsupported cipher suite: TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
Ignoring unsupported cipher suite: TLS_RSA_WITH_AES_128_CBC_SHA256
Allow unsafe renegotiation: false
Allow legacy hello messages: true
Is initial handshake: true
Is secure renegotiation: false
main, setSoTimeout(0) called
Ignoring disabled protocol: SSLv3
%% No cached client session
*** ClientHello, TLSv1.2
RandomCookie: GMT: 1432571160 bytes = { 183, 74, 138, 30, 148, 63, 201, 75, 45, 62, 236, 97, 105, 77, 43, 2, 165, 41, 236, 66, 136, 199, 69, 218, 51, 222, 160, 173 }
Session ID: {}
Cipher Suites: [TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_DSS_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, TLS_ECDHE_RSA_WITH_RC4_128_SHA, SSL_RSA_WITH_RC4_128_SHA, TLS_ECDH_ECDSA_WITH_RC4_128_SHA, TLS_ECDH_RSA_WITH_RC4_128_SHA, SSL_RSA_WITH_RC4_128_MD5, TLS_EMPTY_RENEGOTIATION_INFO_SCSV]
Compression Methods: { 0 }
Extension elliptic_curves, curve names: {secp256r1, sect163k1, sect163r2, secp192r1, secp224r1, sect233k1, sect233r1, sect283k1, sect283r1, secp384r1, sect409k1, sect409r1, secp521r1, sect571k1, sect571r1, secp160k1, secp160r1, secp160r2, sect163r1, secp192k1, sect193r1, sect193r2, secp224k1, sect239k1, secp256k1}
Extension ec_point_formats, formats: [uncompressed]
Extension signature_algorithms, signature_algorithms: SHA512withECDSA, SHA512withRSA, SHA384withECDSA, SHA384withRSA, SHA256withECDSA, SHA256withRSA, SHA224withECDSA, SHA224withRSA, SHA1withECDSA, SHA1withRSA, SHA1withDSA, MD5withRSA
Extension server_name, server_name: [host_name: regionepuglia.spcoop.gov.it]
***

*** Certificate chain
chain [0] = [
[
Version: V3
Subject: CN=regionepuglia.spcoop.gov.it, OU=regionepuglia, O=SPCoop, L=Unknown, ST=Unknown, C=IT
Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5
Key: Sun RSA public key, 1024 bits
modulus: 132618727249398576547024477808858924367105537553637063046075664049606165829826937799440779441085443715757852311051661228801872537170391304848984401153128450313724384093034858857147382765618549007154165424372327503199963670471207807167735896793431454627395348393490603992708106531483375397586992903157954592719
public exponent: 65537
Validity: [From: Tue Oct 09 15:49:47 CEST 2012,
To: Fri Oct 09 16:49:47 CEST 2015]
Issuer: CN=SPCoop CA1, OU=Servizi di Sicurezza e Certificazione, O=DigitPA, C=IT
SerialNumber: [ f4]
Certificate Extensions: 5
[1]: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: 0B E1 2F 63 C8 02 65 44 1E 00 BD E9 91 8A 43 CE ../c..eD......C.
0010: B3 6F 5E 19 .o^.
]
[CN=SPCoop CA1, OU=Servizi di Sicurezza e Certificazione, O=DigitPA, C=IT]
SerialNumber: [ 01]
]
[2]: ObjectId: 2.5.29.31 Criticality=false
CRLDistributionPoints [
[DistributionPoint:
[URIName: ldap://ldapca2.pcoop.gov.it/cn%3DSPCoop%20CA1,ou%3DServizi%20di%20sicurezza%20e%20certificazione,o%3DDigitPA,C%3DIT?certificateRevocationList]
]]
[3]: ObjectId: 2.5.29.32 Criticality=false
CertificatePolicies [
[CertificatePolicyId: [1.3.76.16.3.4.1.1]
[PolicyQualifierInfo: [
qualifierID: 1.3.6.1.5.5.7.2.1
qualifier: 0000: 16 2A 68 74 74 70 3A 2F 2F 63 61 2E 53 50 43 6F .*http://ca.SPCo
0010: 6F 70 2E 67 6F 76 2E 69 74 2F 43 50 53 2F 53 50 op.gov.it/CPS/SP
0020: 43 6F 6F 70 5F 43 50 53 2E 68 74 6D Coop_CPS.htm
]] ]
]
[4]: ObjectId: 2.5.29.15 Criticality=true
KeyUsage [
DigitalSignature
Key_Encipherment
Data_Encipherment
]
[5]: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: BD 71 AE 3E 75 F2 CC 46 F2 11 5B 48 6C 29 F3 8E .q.&gt;u..F..[Hl)..
0010: 82 09 98 8E ....
]
]
]
Algorithm: [SHA1withRSA]

SerialNumber: [ 01]
Certificate Extensions: 6
[1]: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: 0B E1 2F 63 C8 02 65 44 1E 00 BD E9 91 8A 43 CE ../c..eD......C.
0010: B3 6F 5E 19 .o^.
]
[CN=SPCoop CA1, OU=Servizi di Sicurezza e Certificazione, O=DigitPA, C=IT]
SerialNumber: [ 01]
]
[2]: ObjectId: 2.5.29.19 Criticality=true
BasicConstraints:[
CA:true
PathLen:2147483647
]
[3]: ObjectId: 2.5.29.31 Criticality=false
CRLDistributionPoints [
[DistributionPoint:
[URIName: ldap://ldapca.spcoop.gov.it/cn%3DSPCoop%20CA1,ou%3DServizi%20di%20sicurezza%20e%20certificazione,o%3DDigitPA,C%3DIT?authorityRevocationList]
]]
[4]: ObjectId: 2.5.29.32 Criticality=false
CertificatePolicies [
[CertificatePolicyId: [1.3.76.16.3.4.1]
[PolicyQualifierInfo: [
qualifierID: 1.3.6.1.5.5.7.2.1
qualifier: 0000: 16 2A 68 74 74 70 3A 2F 2F 63 61 2E 53 50 43 6F .*http://ca.SPCo
0010: 6F 70 2E 67 6F 76 2E 69 74 2F 43 50 53 2F 53 50 op.gov.it/CPS/SP
0020: 43 6F 6F 70 5F 43 50 53 2E 68 74 6D Coop_CPS.htm
]] ]
]
[5]: ObjectId: 2.5.29.15 Criticality=true
KeyUsage [
Key_CertSign
Crl_Sign
]
[6]: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: 0B E1 2F 63 C8 02 65 44 1E 00 BD E9 91 8A 43 CE ../c..eD......C.
0010: B3 6F 5E 19 .o^.
]
]
]
Algorithm: [SHA1withRSA]
Signature:

***
Found trusted certificate:
[
[
Version: V3
Subject: CN=regionepuglia.spcoop.gov.it, OU=regionepuglia, O=SPCoop, L=Unknown, ST=Unknown, C=IT
Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5
Key: Sun RSA public key, 1024 bits
modulus 132618727249398576547024477808858924367105537553637063046075664049606165829826937799440779441085443715757852311051661228801872537170391304848984401153128450313724384093034858857147382765618549007154165424372327503199963670471207807167735896793431454627395348393490603992708106531483375397586992903157954592719
public exponent: 65537
Validity: [From: Tue Oct 09 15:49:47 CEST 2012,
To: Fri Oct 09 16:49:47 CEST 2015]
Issuer: CN=SPCoop CA1, OU=Servizi di Sicurezza e Certificazione, O=DigitPA, C=IT
SerialNumber: [ f4]
Certificate Extensions: 5
[1]: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: 0B E1 2F 63 C8 02 65 44 1E 00 BD E9 91 8A 43 CE ../c..eD......C.
0010: B3 6F 5E 19 .o^.
]
[CN=SPCoop CA1, OU=Servizi di Sicurezza e Certificazione, O=DigitPA, C=IT]
SerialNumber: [ 01]
]
[2]: ObjectId: 2.5.29.31 Criticality=false
CRLDistributionPoints [
[DistributionPoint:
[URIName: ldap://ldapca2.spcoop.gov.it/cn%3DSPCoop%20CA1,ou%3DServizi%20di%20sicurezza%20e%20certificazione,o%3DDigitPA,C%3DIT?certificateRevocationList]
]]
[3]: ObjectId: 2.5.29.32 Criticality=false
CertificatePolicies [
[CertificatePolicyId: [1.3.76.16.3.4.1.1]
[PolicyQualifierInfo: [
qualifierID: 1.3.6.1.5.5.7.2.1
qualifier: 0000: 16 2A 68 74 74 70 3A 2F 2F 63 61 2E 53 50 43 6F .*http://ca.SPCo
0010: 6F 70 2E 67 6F 76 2E 69 74 2F 43 50 53 2F 53 50 op.gov.it/CPS/SP
0020: 43 6F 6F 70 5F 43 50 53 2E 68 74 6D Coop_CPS.htm
]] ]
]
[4]: ObjectId: 2.5.29.15 Criticality=true
KeyUsage [
DigitalSignature
Key_Encipherment
Data_Encipherment
]
[5]: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
0000: BD 71 AE 3E 75 F2 CC 46 F2 11 5B 48 6C 29 F3 8E .q.&gt;u..F..[Hl)..
0010: 82 09 98 8E ....
]
]
]
Algorithm: [SHA1withRSA]
Signature:

*** ServerHelloDone
[read] MD5 and SHA1 hashes: len = 4
0000: 0E 00 00 00 ....
*** ClientKeyExchange, RSA PreMasterSecret, TLSv1
[write] MD5 and SHA1 hashes: len = 134
0000: 10 00 00 82 00 80 B0 92 DE FA 46 DC 18 8A FA 3F ..........F....?
0010: AA D1 BE E0 6A 9F E3 0D 45 6A FB FB E1 B0 CC 3E ....j...Ej.....&gt;
0020: 74 89 A0 AD 0C 49 C1 79 E5 23 1F B0 AA 41 73 F6 t....I.y.#...As.
0030: 45 CA ED E4 A3 0E F4 76 46 CE 41 FB 18 FF D2 33 E......vF.A....3
0040: F4 F5 F7 05 80 7F B2 71 BB B8 EF 5D 62 46 C5 49 .......q...]bF.I
0050: 1F 5D 97 FD 23 2D 4B 80 C6 9A 75 DE 7C 76 6F CE .]..#-K...u..vo.
0060: F1 95 27 79 E5 E4 59 60 F4 7D FF 32 4F C9 58 88 ..'y..Y`...2O.X.
0070: 2D AB 76 FD 9E C2 27 51 2B 40 38 2F 75 2A 70 A8 -.v...'Q+@8/u*p.
0080: 9F FE 85 74 9C 19 ...t..
main, WRITE: TLSv1 Handshake, length = 134
[Raw write]: length = 139
0000: 16 03 01 00 86 10 00 00 82 00 80 B0 92 DE FA 46 ...............F
0010: DC 18 8A FA 3F AA D1 BE E0 6A 9F E3 0D 45 6A FB ....?....j...Ej.
0020: FB E1 B0 CC 3E 74 89 A0 AD 0C 49 C1 79 E5 23 1F ....&gt;t....I.y.#.
0030: B0 AA 41 73 F6 45 CA ED E4 A3 0E F4 76 46 CE 41 ..As.E......vF.A
0040: FB 18 FF D2 33 F4 F5 F7 05 80 7F B2 71 BB B8 EF ....3.......q...
0050: 5D 62 46 C5 49 1F 5D 97 FD 23 2D 4B 80 C6 9A 75 ]bF.I.]..#-K...u
0060: DE 7C 76 6F CE F1 95 27 79 E5 E4 59 60 F4 7D FF ..vo...'y..Y`...
0070: 32 4F C9 58 88 2D AB 76 FD 9E C2 27 51 2B 40 38 2O.X.-.v...'Q+@8
0080: 2F 75 2A 70 A8 9F FE 85 74 9C 19 /u*p....t..
SESSION KEYGEN:
PreMaster Secret:
0000: 03 03 5E 36 BB 09 5E 03 97 7F 61 4A 47 A3 A9 10 ..^6..^...aJG...
0010: 01 B4 66 BE 3B C0 2E CF B7 F4 20 A6 A9 64 EE 39 ..f.;..... ..d.9
0020: F5 CA D6 55 91 E5 A8 7B 55 E5 E4 79 51 34 9E 74 ...U....U..yQ4.t
CONNECTION KEYGEN:
Client Nonce:
0000: 55 63 4D 18 B7 4A 8A 1E 94 3F C9 4B 2D 3E EC 61 UcM..J...?.K-&gt;.a
0010: 69 4D 2B 02 A5 29 EC 42 88 C7 45 DA 33 DE A0 AD iM+..).B..E.3...
Server Nonce:
0000: 55 63 4D 16 FD 2D 24 0C 63 46 70 A4 E7 83 CC 37 UcM..-$.cFp....7
0010: 79 11 24 F8 58 C8 E1 6D 0D 9D 58 77 FA FE 05 8D y.$.X..m..Xw....
Master Secret:
0000: 7E B7 46 B7 05 03 33 54 F0 90 85 F5 72 36 AF 0E ..F...3T....r6..
0010: 56 76 82 8E CE 79 CA 6D 63 94 00 49 89 34 54 6C Vv...y.mc..I.4Tl
0020: E0 06 CD AE 5D 89 3B 77 5B C0 36 4A F5 09 A9 05 ....].;w[.6J....
Client MAC write Secret:
0000: 3F 61 6A 32 17 24 69 5C D0 65 46 71 17 6F 49 D0 ?aj2.$i\.eFq.oI.
0010: 69 6A E9 93 ij..
Server MAC write Secret:
0000: BF 56 23 2C F4 8D B2 38 3F D7 D9 66 D3 B4 7E 58 .V#,...8?..f...X
0010: 93 42 43 86 .BC.
Client write key:
0000: E6 EF BB 72 42 C4 FA 9D 07 55 D0 B0 E5 C6 5B 15 ...rB....U....[.
0010: 89 C1 0D 5F 51 42 C0 5A 2B 16 A1 49 69 00 13 14 ..._QB.Z+..Ii...
Server write key:
0000: 7C 6B 06 B8 1F 7D 1D 8E F9 C8 DC CE B1 69 C3 80 .k...........i..
0010: 66 F1 2E FE 34 CD 55 C2 DE 15 0A 24 7F 5D BD 3F f...4.U....$.].?
Client write IV:
0000: CF FC 8E D5 D0 7E 70 21 38 2C 6D 03 2D 03 80 A8 ......p!8,m.-...
Server write IV:
0000: 4A 2A 03 05 96 AC 85 93 9A D9 26 CD 32 8A 74 BF J*........&amp;.2.t.
main, WRITE: TLSv1 Change Cipher Spec, length = 1
[Raw write]: length = 6
0000: 14 03 01 00 01 01 ......
*** Finished
verify_data: { 237, 199, 24, 108, 153, 108, 61, 88, 201, 55, 157, 18 }
***
[write] MD5 and SHA1 hashes: len = 16
0000: 14 00 00 0C ED C7 18 6C 99 6C 3D 58 C9 37 9D 12 .......l.l=X.7..
Padded plaintext before ENCRYPTION: len = 48
0000: 14 00 00 0C ED C7 18 6C 99 6C 3D 58 C9 37 9D 12 .......l.l=X.7..
0010: D0 E6 5D 93 43 CE CE E7 58 F1 9A 99 EA 81 8C 17 ..].C...X.......
0020: 4C 37 EC 44 0B 0B 0B 0B 0B 0B 0B 0B 0B 0B 0B 0B L7.D............
main, WRITE: TLSv1 Handshake, length = 48
[Raw write]: length = 53
0000: 16 03 01 00 30 6A 2C 11 84 25 E5 6B AA A5 E0 96 ....0j,..%.k....
0010: C9 FA CB C7 16 AF 57 FD 31 BC A3 3E 4A 09 1A 53 ......W.1..&gt;J..S
0020: 19 69 92 AB 63 3D 75 38 EA 44 33 FC F7 A6 65 51 .i..c=u8.D3...eQ
0030: 84 E8 77 6E 44 ..wnD
[Raw read]: length = 5
0000: 15 03 01 00 02 .....
[Raw read]: length = 2
0000: 02 28 .(
main, READ: TLSv1 Alert, length = 2
main, RECV TLSv1 ALERT: fatal, handshake_failure
%% Invalidated: [Session-1, TLS_RSA_WITH_AES_256_CBC_SHA]
main, called closeSocket()
main, handling exception: javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure
javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure
at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)
at sun.security.ssl.Alerts.getSSLException(Alerts.java:154)
at sun.security.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1979)
at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:1086)
at sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1332
at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1359)
at sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1343)
at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:563)
at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:185)
at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1301)
at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:254)
at test.TestWs.main(TestWs.java:261)
</code></pre>

<p>Since javax.net full debug message is too long, I can't post it here; if you need you can find it here: <a href=""http://we.tl/Qovj2ZgkaW"" rel=""nofollow"">http://we.tl/Qovj2ZgkaW</a></p>

<p>Note: this link will be active only for 10 days</p>
","<p>Try commenting out jdk.tls.disabledAlgorithms in JDK/jre/lib/security/java.security, in your JDK7 installation.</p>
","2968","<java><ssl><jce>","0","0","1","2017-08-09 07:14:25","","9","","1852714","","2015-05-26 06:57:04","2015-05-25 16:53:44",""
"4873297","Maven failing due to java.security API warning","<p><code>mvn clean package</code> is failing due to a warning. Is it due to <a href=""http://jira.codehaus.org/browse/MCOMPILER-59"" rel=""nofollow"">this</a> bug (its fixed though)?  Any suggestions on how to fix this problem.</p>

<pre><code>[loading java/security/KeyPairGenerator.class(java/security:KeyPairGenerator.class)]
[loading sun/security/jca/GetInstance.class(sun/security/jca:GetInstance.class)]
[loading sun/security/jca/GetInstance$Instance.class(sun/security/jca:GetInstance$Instance.class)]
[loading java/security/KeyPairGeneratorSpi.class(java/security:KeyPairGeneratorSpi.class)]
[loading java/security/spec/AlgorithmParameterSpec.class(java/security/spec:AlgorithmParameterSpec.class)]
[loading java/security/spec/EncodedKeySpec.class(java/security/spec:EncodedKeySpec.class)]
[loading java/security/spec/KeySpec.class(java/security/spec:KeySpec.class)]
/home/user/common/common-lib/src/main/java/com/org/security/CryptoUtil.java:200: warning: sun.security.x509.CertAndKeyGen is Sun proprietary API and may be removed in a future release
        CertAndKeyGen generator = null;
        ^

/home/user/common/common-lib/src/main/java/com/org/security/CryptoUtil.java:[203,19] sun.security.x509.CertAndKeyGen is Sun proprietary API and may be removed in a future release

/home/user/common/common-lib/src/main/java/com/org/security/CryptoUtil.java:[205,3] sun.security.x509.X500Name is Sun proprietary API and may be removed in a future release
/home/user/common/common-lib/src/main/java/com/org/security/CryptoUtil.java:[205,23] sun.security.x509.X500Name is Sun proprietary API and may be removed in a future release

could not parse error message: [loading sun/security/util/DerInputStream.class(sun/security/util:DerInputStream.class)]
[loading sun/security/util/DerValue.class(sun/security/util:DerValue.class)]
[loading sun/security/x509/RDN.class(sun/security/x509:RDN.class)]
[loading java/security/cert/X509Extension.class(java/security/cert:X509Extension.class)]
[loading java/security/cert/Certificate.class(java/security/cert:Certificate.class)]
[loading java/io/FileDescriptor.class(java/io:FileDescriptor.class)]
[loading java/security/KeyStore$LoadStoreParameter.class(java/security:KeyStore$LoadStoreParameter.class)]
[loading java/security/Key.class(java/security:Key.class)]
[loading java/security/SignatureSpi.class(java/security:SignatureSpi.class)]
[loading java/nio/ByteBuffer.class(java/nio:ByteBuffer.class)]
/home/user/common/common-lib/src/main/java/com/org/security/CryptoUtil.java:400: warning: com.sun.org.apache.xerces.internal.impl.dv.util.Base64 is Sun proprietary API and may be removed in a future release
        out.print( Base64.encode( key.getEncoded() ) );
                   ^

could not parse error message: [loading java/security/Principal.class(java/security:Principal.class)]
[loading javax/security/auth/x500/X500Principal.class(javax/security/auth/x500:X500Principal.class)]
[loading java/io/FileWriter.class(java/io:FileWriter.class)]
[loading java/io/OutputStreamWriter.class(java/io:OutputStreamWriter.class)]
/home/user/common/common-lib/src/main/java/com/org/security/CryptoUtil.java:415: warning: com.sun.org.apache.xerces.internal.impl.dv.util.Base64 is Sun proprietary API and may be removed in a future release
        out.print( Base64.encode( certificate.getEncoded() ) );
</code></pre>
","<p>Looking at the <a href=""http://jira.codehaus.org/browse/MCOMPILER-59?focusedCommentId=170845&amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_170845"" rel=""nofollow"">comments</a> in the bug link in the question, it looks like the problem occurs when <code>verbose</code> is turned on.  Can you check if this is true in your case and if so, check if the error persists if it is turned off?</p>
","2949","<exception><maven-2><jce>","1","1","2","2013-04-09 09:42:16","4873586","0","","231917","","2013-03-05 18:25:37","2011-02-02 10:29:28",""
"4873297","Maven failing due to java.security API warning","<p><code>mvn clean package</code> is failing due to a warning. Is it due to <a href=""http://jira.codehaus.org/browse/MCOMPILER-59"" rel=""nofollow"">this</a> bug (its fixed though)?  Any suggestions on how to fix this problem.</p>

<pre><code>[loading java/security/KeyPairGenerator.class(java/security:KeyPairGenerator.class)]
[loading sun/security/jca/GetInstance.class(sun/security/jca:GetInstance.class)]
[loading sun/security/jca/GetInstance$Instance.class(sun/security/jca:GetInstance$Instance.class)]
[loading java/security/KeyPairGeneratorSpi.class(java/security:KeyPairGeneratorSpi.class)]
[loading java/security/spec/AlgorithmParameterSpec.class(java/security/spec:AlgorithmParameterSpec.class)]
[loading java/security/spec/EncodedKeySpec.class(java/security/spec:EncodedKeySpec.class)]
[loading java/security/spec/KeySpec.class(java/security/spec:KeySpec.class)]
/home/user/common/common-lib/src/main/java/com/org/security/CryptoUtil.java:200: warning: sun.security.x509.CertAndKeyGen is Sun proprietary API and may be removed in a future release
        CertAndKeyGen generator = null;
        ^

/home/user/common/common-lib/src/main/java/com/org/security/CryptoUtil.java:[203,19] sun.security.x509.CertAndKeyGen is Sun proprietary API and may be removed in a future release

/home/user/common/common-lib/src/main/java/com/org/security/CryptoUtil.java:[205,3] sun.security.x509.X500Name is Sun proprietary API and may be removed in a future release
/home/user/common/common-lib/src/main/java/com/org/security/CryptoUtil.java:[205,23] sun.security.x509.X500Name is Sun proprietary API and may be removed in a future release

could not parse error message: [loading sun/security/util/DerInputStream.class(sun/security/util:DerInputStream.class)]
[loading sun/security/util/DerValue.class(sun/security/util:DerValue.class)]
[loading sun/security/x509/RDN.class(sun/security/x509:RDN.class)]
[loading java/security/cert/X509Extension.class(java/security/cert:X509Extension.class)]
[loading java/security/cert/Certificate.class(java/security/cert:Certificate.class)]
[loading java/io/FileDescriptor.class(java/io:FileDescriptor.class)]
[loading java/security/KeyStore$LoadStoreParameter.class(java/security:KeyStore$LoadStoreParameter.class)]
[loading java/security/Key.class(java/security:Key.class)]
[loading java/security/SignatureSpi.class(java/security:SignatureSpi.class)]
[loading java/nio/ByteBuffer.class(java/nio:ByteBuffer.class)]
/home/user/common/common-lib/src/main/java/com/org/security/CryptoUtil.java:400: warning: com.sun.org.apache.xerces.internal.impl.dv.util.Base64 is Sun proprietary API and may be removed in a future release
        out.print( Base64.encode( key.getEncoded() ) );
                   ^

could not parse error message: [loading java/security/Principal.class(java/security:Principal.class)]
[loading javax/security/auth/x500/X500Principal.class(javax/security/auth/x500:X500Principal.class)]
[loading java/io/FileWriter.class(java/io:FileWriter.class)]
[loading java/io/OutputStreamWriter.class(java/io:OutputStreamWriter.class)]
/home/user/common/common-lib/src/main/java/com/org/security/CryptoUtil.java:415: warning: com.sun.org.apache.xerces.internal.impl.dv.util.Base64 is Sun proprietary API and may be removed in a future release
        out.print( Base64.encode( certificate.getEncoded() ) );
</code></pre>
","<p>By providing the below arguments in the pom.xml of my project solved the issue.</p>

<pre><code>&lt;plugin&gt;
&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
&lt;configuration&gt;
&lt;compilerArguments&gt;
&lt;bootclasspath&gt;${java.home}\lib\rt.jar&lt;/bootclasspath&gt;
&lt;/compilerArguments&gt;
&lt;/configuration&gt;
&lt;/plugin&gt;
</code></pre>

<p>But still unclear as to why this works?</p>
","2949","<exception><maven-2><jce>","1","1","2","2013-04-09 09:42:16","4873586","0","","231917","","2013-03-05 18:25:37","2011-02-02 10:29:28",""
"30907205","Jsch not working with certain sftp servers","<p>This question is almost a copy of <a href=""https://stackoverflow.com/questions/27557181/java-1-7-jsch-java-security-invalidkeyexception-key-is-too-long-for-this-alg"">this</a>. But since it went unresolved I want to ask if some other figured out the a work around with JSCH java library ??<br/><br/>
The problem again is that I can connect to most of the SSH server using JSCH library but there seems to be this one server I've encountered that I cannot connect to using JSCH. While establishing a connection it throws out a exception stating : </p>

<pre class=""lang-none prettyprint-override""><code>INFO: Connecting to xxxx.xxxxx.com port 22
INFO: Connection established
INFO: Remote version string: SSH-2.0-2.0
INFO: Local version string: SSH-2.0-JSCH-0.1.53
INFO: CheckCiphers: aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,3des-ctr,arcfour,arcfour128,arcfour256
INFO: CheckKexes: diffie-hellman-group14-sha1,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521
INFO: CheckSignatures: ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
INFO: SSH_MSG_KEXINIT sent
INFO: SSH_MSG_KEXINIT received
INFO: kex: server: diffie-hellman-group1-sha1,diffie-hellman-group14-sha1
INFO: kex: server: ssh-dss
INFO: kex: server: aes128-cbc,rijndael128-cbc,3des-cbc,blowfish-cbc,aes192-cbc,rijndael192-cbc,aes256-cbc,rijndael256-cbc,rijndael-cbc@lysator.liu.se,cast128-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
INFO: kex: server: aes128-cbc,rijndael128-cbc,3des-cbc,blowfish-cbc,aes192-cbc,rijndael192-cbc,aes256-cbc,rijndael256-cbc,rijndael-cbc@lysator.liu.se,cast128-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
INFO: kex: server: hmac-md5,hmac-sha1,hmac-sha1-96,hmac-sha2-256,hmac-sha2-256-96,hmac-sha2-512,hmac-sha2-512-96
INFO: kex: server: hmac-md5,hmac-sha1,hmac-sha1-96,hmac-sha2-256,hmac-sha2-256-96,hmac-sha2-512,hmac-sha2-512-96
INFO: kex: server: zlib,none
INFO: kex: server: zlib,none
INFO: kex: server: 
INFO: kex: server: 
INFO: kex: client: ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1
INFO: kex: client: ssh-rsa,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521
INFO: kex: client: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-ctr,aes192-cbc,aes256-ctr,aes256-cbc
INFO: kex: client: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-ctr,aes192-cbc,aes256-ctr,aes256-cbc
INFO: kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96
INFO: kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96
INFO: kex: client: none
INFO: kex: client: none
INFO: kex: client: 
INFO: kex: client: 
INFO: kex: server-&gt;client aes128-ctr hmac-md5 none
INFO: kex: client-&gt;server aes128-ctr hmac-md5 none
INFO: SSH_MSG_KEXDH_INIT sent
INFO: expecting SSH_MSG_KEXDH_REPLY
INFO: Disconnecting from xxxxx.xxxxx.com port 22
com.jcraft.jsch.JSchException: Session.connect: java.security.InvalidKeyException: Key is too long for this algorithm
    at com.jcraft.jsch.Session.connect(Session.java:558)
    at com.jcraft.jsch.Session.connect(Session.java:183)
    at com.test.filetransfer.SftpDownload.main(SftpDownload.java:29)
Exception occurred : Session.connect: java.security.InvalidKeyException: Key is too long for this algorithm
</code></pre>

<p>I already have installed the unlimited encryption policy but
it seems to be the problem with default Java JCE provider which supports DH and DSA generation to 1024 bits. This stack supports my claim :  <br/> <br></p>

<pre><code>com.jcraft.jsch.JSchException: Session.connect failed
    at com.jcraft.jsch.Session.connect(Session.java:560)
    at com.jcraft.jsch.Session.connect(Session.java:184)
    at com.test.filetransfer.SftpDownload.main(SftpDownload.java:28)
Caused by: java.security.InvalidKeyException: Key is too long for this algorithm
    at sun.security.provider.DSA$LegacyDSA.checkKey(DSA.java:487)
    at sun.security.provider.DSA.engineInitVerify(DSA.java:152)
    at java.security.Signature$Delegate.init(Signature.java:1124)
    at java.security.Signature$Delegate.chooseProvider(Signature.java:1087)
    at java.security.Signature$Delegate.engineInitVerify(Signature.java:1142)
    at java.security.Signature.initVerify(Signature.java:452)
    at com.jcraft.jsch.jce.SignatureDSA.setPubKey(SignatureDSA.java:52)
    at com.jcraft.jsch.KeyExchange.verify(KeyExchange.java:269)
    at com.jcraft.jsch.DHG1.next(DHG1.java:187)
    at com.jcraft.jsch.Session.connect(Session.java:327)
</code></pre>

<p><br/>
I really don't want to ditch JSCH library due to it's rich feature,popularity and documentation and the server is out of our jurisdiction.
<br><br>
So is there a workaround anyone has figured out using JSCH library ???</p>
","<p>If you are using Java 8, then this might be caused by a <a href=""https://bugs.openjdk.java.net/browse/JDK-8039921"" rel=""nofollow"">bug in Java JCE</a> that has recently been fixed. Upgrading to <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html"" rel=""nofollow"">Java SE 8u45</a> (or higher) solves the issue.</p>

<p>I verified that with 1.8.0_45, jsch-0.1.53 is actually able to successfully negotiate an SSH session with a server that uses a 1536-bit DSA key.</p>
","2949","<java><bouncycastle><jsch><jce>","1","2","1","2015-06-18 20:45:23","30925355","8","","-1","","2017-05-23 11:43:47","2015-06-18 05:34:53",""
"14230096","Java security init Cipher from SecretKeySpec properly","<p>I'm testing Diffie-Hellman KeyAgreement Algorithm. And use it to generate a secret key. But after I get the <code>SecretKeySpec</code>, I'm confronted with problem about using it to initialize a <code>Cipher</code>. Here's my code:<br></p>

<h2>DiffieHellmanModule</h2>

<pre><code>package ggicci.infosec;

import java.math.BigInteger;
import java.security.InvalidAlgorithmParameterException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;

import javax.crypto.KeyAgreement;
import javax.crypto.spec.DHParameterSpec;
import javax.crypto.spec.SecretKeySpec;

/**
 * Diffie-Hellman module for demonstrating KeyAgreement Algorithm
 * @author Ggicci
 * @since 2013.01.09
 */
public class DiffieHellmanModule {
    private static final byte[] skip1024ModulusBytes = { (byte) 0xF4,
            (byte) 0x88, (byte) 0xFD, (byte) 0x58, (byte) 0x4E, (byte) 0x49,
            (byte) 0xDB, (byte) 0xCD, (byte) 0x20, (byte) 0xB4, (byte) 0x9D,
            (byte) 0xE4, (byte) 0x91, (byte) 0x07, (byte) 0x36, (byte) 0x6B,
            (byte) 0x33, (byte) 0x6C, (byte) 0x38, (byte) 0x0D, (byte) 0x45,
            (byte) 0x1D, (byte) 0x0F, (byte) 0x7C, (byte) 0x88, (byte) 0xB3,
            (byte) 0x1C, (byte) 0x7C, (byte) 0x5B, (byte) 0x2D, (byte) 0x8E,
            (byte) 0xF6, (byte) 0xF3, (byte) 0xC9, (byte) 0x23, (byte) 0xC0,
            (byte) 0x43, (byte) 0xF0, (byte) 0xA5, (byte) 0x5B, (byte) 0x18,
            (byte) 0x8D, (byte) 0x8E, (byte) 0xBB, (byte) 0x55, (byte) 0x8C,
            (byte) 0xB8, (byte) 0x5D, (byte) 0x38, (byte) 0xD3, (byte) 0x34,
            (byte) 0xFD, (byte) 0x7C, (byte) 0x17, (byte) 0x57, (byte) 0x43,
            (byte) 0xA3, (byte) 0x1D, (byte) 0x18, (byte) 0x6C, (byte) 0xDE,
            (byte) 0x33, (byte) 0x21, (byte) 0x2C, (byte) 0xB5, (byte) 0x2A,
            (byte) 0xFF, (byte) 0x3C, (byte) 0xE1, (byte) 0xB1, (byte) 0x29,
            (byte) 0x40, (byte) 0x18, (byte) 0x11, (byte) 0x8D, (byte) 0x7C,
            (byte) 0x84, (byte) 0xA7, (byte) 0x0A, (byte) 0x72, (byte) 0xD6,
            (byte) 0x86, (byte) 0xC4, (byte) 0x03, (byte) 0x19, (byte) 0xC8,
            (byte) 0x07, (byte) 0x29, (byte) 0x7A, (byte) 0xCA, (byte) 0x95,
            (byte) 0x0C, (byte) 0xD9, (byte) 0x96, (byte) 0x9F, (byte) 0xAB,
            (byte) 0xD0, (byte) 0x0A, (byte) 0x50, (byte) 0x9B, (byte) 0x02,
            (byte) 0x46, (byte) 0xD3, (byte) 0x08, (byte) 0x3D, (byte) 0x66,
            (byte) 0xA4, (byte) 0x5D, (byte) 0x41, (byte) 0x9F, (byte) 0x9C,
            (byte) 0x7C, (byte) 0xBD, (byte) 0x89, (byte) 0x4B, (byte) 0x22,
            (byte) 0x19, (byte) 0x26, (byte) 0xBA, (byte) 0xAB, (byte) 0xA2,
            (byte) 0x5E, (byte) 0xC3, (byte) 0x55, (byte) 0xE9, (byte) 0x2F,
            (byte) 0x78, (byte) 0xC7 };
    private static final BigInteger skip1024Modulus;
    private static final BigInteger skip1024Base;
    private static KeyPairGenerator kpg;
    static {
        skip1024Modulus = new BigInteger(1, skip1024ModulusBytes);
        skip1024Base = BigInteger.valueOf(2);
        try {
            kpg = KeyPairGenerator.getInstance(""DH"");
            DHParameterSpec dhp = new DHParameterSpec(skip1024Modulus,
                    skip1024Base);
            kpg.initialize(dhp);
        } catch (NoSuchAlgorithmException | InvalidAlgorithmParameterException e) {
            e.printStackTrace();
        }
    }

    /**
     * Create KeyAgreement and generate secret key
     * 
     * @param prk_self
     *            the private key from the user who wants to generate the secret
     *            key
     * @param pbk_peer
     *            the public key from the user whom is to be agree on the secret
     *            key with
     * @param lastPhase
     *            flag which indicates whether or not this is the last phase of
     *            this key agreement
     * @return the secret key
     */
    public static SecretKeySpec agreeSecretKey(PrivateKey prk_self,
            PublicKey pbk_peer, boolean lastPhase) throws Exception {
        KeyAgreement ka = KeyAgreement.getInstance(""DH"");
        ka.init(prk_self);
        ka.doPhase(pbk_peer, lastPhase);
        byte[] bkey = ka.generateSecret();
        return new SecretKeySpec(bkey, ""AES"");
    }

    /**
     * Generate a key pair of algorithm ""DiffieHellman""
     * 
     * @return the public and private key pair
     */
    public static KeyPair genDHKeyPair() {
        return kpg.genKeyPair();
    }
}
</code></pre>

<h2>DHTest</h2>

<pre><code>import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import ggicci.infosec.DiffieHellmanModule;

public class DHTest {

    public static void main(String[] args) {
        KeyPair kp1 = DiffieHellmanModule.genDHKeyPair();
        KeyPair kp2 = DiffieHellmanModule.genDHKeyPair();
        PublicKey pbk1 = kp1.getPublic();
        PublicKey pbk2 = kp2.getPublic();
        PrivateKey prk1 = kp1.getPrivate();
        PrivateKey prk2 = kp2.getPrivate();
        try {
            SecretKeySpec sk1 = DiffieHellmanModule.agreeSecretKey(prk1, pbk2, true);
            SecretKeySpec sk2 = DiffieHellmanModule.agreeSecretKey(prk2, pbk1, true);
            Cipher cipher = Cipher.getInstance(sk1.getAlgorithm());
            cipher.init(Cipher.ENCRYPT_MODE, sk1); //--&gt;Exception here:Invalid AES key length: 128 bytes
            byte[] ciphertext = cipher.doFinal(""Hello World"".getBytes(""utf-8""));
            cipher.init(Cipher.DECRYPT_MODE, sk2);
            System.out.println(""Decrypted: "" + new String(cipher.doFinal(ciphertext), ""utf-8""));
            System.out.println(""Done"");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
</code></pre>
","<p>You are generating key data for a DiffieHellman key of 128 bytes with the statement:     <code>byte[] bkey = ka.generateSecret();</code>, but then use it as input for a AES keyspec with     <code>new SecretKeySpec(bkey, ""AES"");</code> </p>

<p>This later trigger the exception you see when trying to initialize a cipher with <code>cipher.init(Cipher.ENCRYPT_MODE, sk1);</code> as an AES key is expected to have 16, 24 or 32 bytes (128, 192 or 256 bits) of key data and not 128 bytes.</p>
","2932","<java><jce><diffie-hellman>","1","0","1","2013-03-23 02:00:23","15582575","0","3","1592264","","2013-01-10 05:58:55","2013-01-09 07:16:05",""
"20220656","java.security vs javax.security","<p>I'm a little confused with how Java (6+) distributes its security framework. On one hand, you have the following packages (and their respective subpackages &amp; types):</p>

<ul>
<li><code>java.security.*</code></li>
<li><code>javax.security.*</code></li>
</ul>

<p>And on the other hand you have <code>java.lang.SecurityManager</code>, and possibly other security-related types sprinkled in other non-security packages (like <code>java.lang</code>).</p>

<p>So, several questions:</p>

<ol>
<li>What is the difference between <code>java.security</code> and <code>javax.security</code>? When to use types in each?</li>
<li>Besides <code>java.lang</code>, are there any other packages where security-centric types appear, and if so, what are they?</li>
<li>Where do JCE and JCA fit in here? What packages do they comprise, or are they totally separate and in their own JARs?</li>
</ol>

<p>Thanks in advance!</p>
","<p>The split has mainly historical reasons. Once upon a time there were export restrictions on cryptographic software in the US.</p>

<p>As a rule of thumb: Stuff related to signatures is found in java.security, the rest (ciphers, ...) in javax.security.</p>

<p>The JRE nowadays comes with the standard security provider bundled in, so JCE is part of the platform.</p>
","2851","<java><security><jce><securitymanager>","8","5","1","2013-11-26 15:11:24","20220839","5","1","","","","2013-11-26 15:03:16",""
"14470423","PKCS10CertificationRequestBuilder generates invalid PKCS10CertificationRequest in org.bouncycastle.pkcs","<p>I am trying to use Spongy Castle (v1.47) to create a PKCS10 Certification Request. Spongy Castle behaves exactly the same way as Bouncy Castle, but is more suited to port on Android. </p>

<p>The old (depricated) way as described in Beginning Cryptography with Java by David Hook in chapter 6 works just fine:</p>

<pre><code>package chapter6;

import java.io.OutputStreamWriter;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.Security;
import java.util.Vector;
import javax.security.auth.x500.X500Principal;
import org.spongycastle.asn1.DEROctetString;
import org.spongycastle.asn1.DERSet;
import org.spongycastle.asn1.pkcs.Attribute;
import org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.spongycastle.asn1.x509.GeneralName;
import org.spongycastle.asn1.x509.GeneralNames;
import org.spongycastle.asn1.x509.X509Extension;
import org.spongycastle.asn1.x509.X509Extensions;
import org.spongycastle.jce.PKCS10CertificationRequest;
import org.spongycastle.openssl.PEMWriter;
import org.spongycastle.jce.provider.BouncyCastleProvider;

/**
 * Generation of a basic PKCS #10 request with an extension.
 */
public class PKCS10ExtensionExample {
  static {
    BouncyCastleProvider prov = new org.spongycastle.jce.provider.BouncyCastleProvider();
    Security.addProvider(prov);
  }

  public static PKCS10CertificationRequest generateRequest( KeyPair pair) throws Exception {
    // create a SubjectAlternativeName extension value
    GeneralNames subjectAltName = new GeneralNames(new GeneralName(GeneralName.rfc822Name, ""test@test.test""));

    // create the extensions object and add it as an attribute
    Vector oids = new Vector();
    Vector values = new Vector();
    oids.add(X509Extensions.SubjectAlternativeName);
    values.add(new X509Extension(false, new DEROctetString(subjectAltName)));
    X509Extensions extensions = new X509Extensions(oids, values);
    Attribute attribute = new Attribute(PKCSObjectIdentifiers.pkcs_9_at_extensionRequest, new DERSet(extensions));

    return new PKCS10CertificationRequest(
           ""SHA256withRSA"",
           new X500Principal(""CN=Requested Test Certificate""),
           pair.getPublic(),
           new DERSet(attribute),
           pair.getPrivate());
  }

  public static void main(String[] args) throws Exception {
    // create the keys
    KeyPairGenerator kpGen = KeyPairGenerator.getInstance(""RSA"", ""SC"");
    kpGen.initialize(1024, Utils.createFixedRandom());
    KeyPair pair = kpGen.generateKeyPair();
    PKCS10CertificationRequest request = generateRequest(pair);
    PEMWriter pemWrt = new PEMWriter(new OutputStreamWriter(System.out));
    pemWrt.writeObject(request);
    pemWrt.close();
  }
}
</code></pre>

<p>The small java program prints out the following:</p>

<pre><code>-----BEGIN CERTIFICATE REQUEST-----
MIIBkDCB+gIBADAlMSMwIQYDVQQDExpSZXF1ZXN0ZWQgVGVzdCBDZXJ0aWZpY2F0
ZTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAm38mHcNo+YDhe1/XHRa1Cifj
EUwH6SQfqKQcY0sO4gGTVL/U5kBx/y0gIptrnGgUYgfwqptWoKHIqd4PGAuzHfwI
QrTfnYtLnN3dBdnOx/1mZuJ/fCD48H45sTVCcXbypxdwns2PZwgh1rt+jb7TJQii
5TteCLvzzb7FVb/Oc6MCAwEAAaAsMCoGCSqGSIb3DQEJDjEdMBswGQYDVR0RBBIw
EIEOdGVzdEB0ZXN0LnRlc3QwDQYJKoZIhvcNAQELBQADgYEAJexpAYF6RvbYGiNS
kyaF1H8TpDOHaAuIvS4G2Kqw9xXJHYEDiNsQxMc4gWdx6ZNDzc1JYqFBaEV+c/zt
pRPLTRxTi841tLBUAzX7eFQ5EtLwJrKLlHCMXxg3DwcrPjRwidcE87Nl/sOyeT4K
btCXzqpLtklJi/giBl/4L+lQunU=
-----END CERTIFICATE REQUEST-----
</code></pre>

<p>The problem is that in the meanwhile (the book is from 2005) most of this Classes are marked as depricated. The new way of creating certificate signing requests is by using Factory Patterns:</p>

<pre><code>package chapter6;

import java.io.OutputStreamWriter;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.Security;
import java.util.Vector;

import org.spongycastle.asn1.DERPrintableString;
import org.spongycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.spongycastle.asn1.x500.X500Name;
import org.spongycastle.asn1.x509.ExtendedKeyUsage;
import org.spongycastle.asn1.x509.KeyPurposeId;
import org.spongycastle.asn1.x509.KeyUsage;
import org.spongycastle.asn1.x509.SubjectPublicKeyInfo;
import org.spongycastle.asn1.x509.X509Extension;
import org.spongycastle.jce.provider.BouncyCastleProvider;
import org.spongycastle.openssl.PEMWriter;
import org.spongycastle.operator.ContentSigner;
import org.spongycastle.operator.ContentVerifierProvider;
import org.spongycastle.operator.jcajce.JcaContentSignerBuilder;
import org.spongycastle.operator.jcajce.JcaContentVerifierProviderBuilder;
import org.spongycastle.pkcs.PKCS10CertificationRequest;
import org.spongycastle.pkcs.PKCS10CertificationRequestBuilder;

/**
 * Generation of a basic PKCS #10 request with an extension.
 */
public class PKCS10ExtensionExampleNew {
  static {
    BouncyCastleProvider prov = new org.spongycastle.jce.provider.BouncyCastleProvider();
    Security.addProvider(prov);
  }

  public static PKCS10CertificationRequest generateRequest(KeyPair pair) throws Exception {
    SubjectPublicKeyInfo publicKeyInfo = SubjectPublicKeyInfo.getInstance(pair.getPublic().getEncoded());
    X500Name subject = new X500Name(""CN=Requested Test Certificate"");
    PKCS10CertificationRequestBuilder certificationRequestBuilder = new PKCS10CertificationRequestBuilder(subject, publicKeyInfo);

    certificationRequestBuilder.addAttribute(X509Extension.keyUsage, 
        new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment | KeyUsage.dataEncipherment | KeyUsage.keyAgreement));

    Vector&lt;KeyPurposeId&gt; ekUsages = new Vector&lt;KeyPurposeId&gt;();
    ekUsages.add(KeyPurposeId.id_kp_clientAuth);
    ekUsages.add(KeyPurposeId.id_kp_serverAuth);
    certificationRequestBuilder.addAttribute(X509Extension.extendedKeyUsage, new ExtendedKeyUsage(ekUsages));

    JcaContentSignerBuilder contentSignerBuilder = new JcaContentSignerBuilder(""SHA1WithRSAEncryption"");
    contentSignerBuilder.setProvider(""SC"");
    ContentSigner contentSigner = contentSignerBuilder.build(pair.getPrivate());

    DERPrintableString password = new DERPrintableString(""secret123"");
    certificationRequestBuilder.addAttribute(PKCSObjectIdentifiers.pkcs_9_at_challengePassword, password);

    PKCS10CertificationRequest certificationRequest = certificationRequestBuilder.build(contentSigner);

    JcaContentVerifierProviderBuilder contentVerifierProviderBuilder = new JcaContentVerifierProviderBuilder();
    ContentVerifierProvider contentVerifierProvider = contentVerifierProviderBuilder.build(pair.getPublic());
    System.out.println(""isSignatureValid? "" + certificationRequest.isSignatureValid(contentVerifierProvider));
    System.out.println(certificationRequest.getSubject());
    return certificationRequest;
  }

  public static void main(String[] args) throws Exception {
    // create the keys
    KeyPairGenerator kpGen = KeyPairGenerator.getInstance(""RSA"", ""SC"");
    kpGen.initialize(1024, Utils.createFixedRandom());
    KeyPair pair = kpGen.generateKeyPair();
    PKCS10CertificationRequest request = generateRequest(pair);
    PEMWriter pemWrt = new PEMWriter(new OutputStreamWriter(System.out));
    pemWrt.writeObject(request);
    pemWrt.close();
  }
}
</code></pre>

<p>The Certificate Request does not get properly build, as it fails on the PEM Generation:</p>

<pre><code>isSignatureValid? true
CN=Requested Test Certificate
Exception in thread ""main"" org.spongycastle.util.io.pem.PemGenerationException: unknown object passed - can't encode.
  at org.spongycastle.openssl.MiscPEMGenerator.createPemObject(MiscPEMGenerator.java:208)
  at org.spongycastle.openssl.MiscPEMGenerator.generate(MiscPEMGenerator.java:333)
  at org.spongycastle.util.io.pem.PemWriter.writeObject(PemWriter.java:76)
  at org.spongycastle.openssl.PEMWriter.writeObject(PEMWriter.java:45)
  at be.boeboe.spongycastle.chapter6.PKCS10ExtensionExampleNew.main(PKCS10ExtensionExampleNew.java:71)
</code></pre>

<p>Anyone has any idea why the second attempt to create a request failed? I created X509V3Certificate certificates both the old and new way and had no problem there, but putting those differences next to the ones shown here, didn't make me any wiser.</p>

<p>Any help kindly appreciated.</p>

<p>Boeboe</p>
","","2838","<android><x509certificate><bouncycastle><pki><jce>","3","","0","2013-01-23 00:19:31","","3","2","","","","2013-01-23 00:19:31",""
"30674903","java.security.InvalidKeyException: Illegal key size, Fix works but issue cannot be reproduced","<p>My application (running on glassfish) accesses google spreadsheet to retrieve certain information, I use the 
google-api-client to perform OAuth and get the access to the spreadsheets.</p>

<p>More details on OAuth and Spreadsheet API can be found here:
<a href=""https://developers.google.com/identity/protocols/OAuth2ServiceAccount"" rel=""nofollow"">https://developers.google.com/identity/protocols/OAuth2ServiceAccount</a></p>

<p>Following is the snippet of code which gets the AuthenticatedService</p>

<pre><code>    public SpreadsheetService getAuthenticatedService() {

            SpreadsheetService service =
                    new SpreadsheetService(""MySpreadsheetIntegration-v1"");

            try {

                //Generating a token every time, for the current requirements this is fine.
                JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
                HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
                String filePath = RW_SW_P_12_KEY;
                String keyFilePath = new File(this.getClass().getResource(filePath).toURI()).getAbsolutePath();
                GoogleCredential credential = new GoogleCredential.Builder()
                        .setTransport(httpTransport)
                        .setJsonFactory(JSON_FACTORY)
                        .setServiceAccountId(serviceAccountEmail)
                        .setServiceAccountPrivateKeyFromP12File(new File(keyFilePath))
                        .setServiceAccountScopes(Collections.singleton(""https://spreadsheets.google.com/feeds""))
                        .setServiceAccountUser(userName)
                        .setClientSecrets(clientId, clientSecret)
                        .build();

                credential.setExpiresInSeconds(3600L);
                service.setOAuth2Credentials(credential);
                service.setProtocolVersion(SpreadsheetService.Versions.V3);

            } catch (IOException ioe) {
                LOGGER.error(ioe.getMessage(), ioe);
                Throwables.propagate(ioe);
            } catch (GeneralSecurityException se) {
                LOGGER.error(se.getMessage(), se);
                Throwables.propagate(se);
            } catch (URISyntaxException use) {
                LOGGER.error(use.getMessage(), use);
                Throwables.propagate(use);
            }

            return service;
        }
</code></pre>

<p>However I ran into the following error:</p>

<pre><code>    exception unwrapping private key - java.security.InvalidKeyException: Illegal key size
        java.io.IOException: exception unwrapping private key - java.security.InvalidKeyException: Illegal key size
        at org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi.unwrapKey(Unknown Source)
        at org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi.engineLoad(Unknown Source)
        at java.security.KeyStore.load(KeyStore.java:1185)
        at com.google.api.client.util.SecurityUtils.loadKeyStore(SecurityUtils.java:82)
        at com.google.api.client.util.SecurityUtils.loadPrivateKeyFromKeyStore(SecurityUtils.java:115)
        at com.google.api.client.googleapis.auth.oauth2.GoogleCredential$Builder.setServiceAccountPrivateKeyFromP12File(GoogleCredential.java:670)
        at com.bwc.stratus.steelwedge.GSpreadSheetServiceImpl.getAuthenticatedService(GSpreadSheetServiceImpl.java:89)
</code></pre>

<p>I found a work around and that worked</p>

<p><a href=""http://opensourceforgeeks.blogspot.com/2014/09/how-to-install-java-cryptography.html"" rel=""nofollow"">http://opensourceforgeeks.blogspot.com/2014/09/how-to-install-java-cryptography.html</a></p>

<p>However, when I tried to go back to the old ""restricted"" policy files(local_policy.jar, US_export_policy.jar), I am not getting any errors any more. This does not make sense to me,any explanation to help resolve this mystery is appreciated. </p>
","","2793","<java><jce>","1","","0","2015-06-05 20:11:52","","0","","1554739","","2015-06-05 20:11:52","2015-06-05 20:04:18",""
"1478131","Can't get JCE working on front-end","<p>I've gone through all the tutorials and read through a ton of forum posts, but to no avail. I cannot get JCE to work properly on the front-end of my Joomla project. I have the group settings to allow Editors (and higher levels) to use JCE. When I log in as an editor on the front-end though, I only have text boxes to edit the content, no controls. I've tried re-installing, running upgrades, replacing editor.js and toggle.js files, and clearing my cache (hell, tried from a completely separate computer that never saw the site before, so it had no cache from the site). Nothing seems to be working. I'm running the latest version of JCE (just tried re-installing off of 'com_jce_157_154_package.zip') and I'm running Joomla v1.5.14.
Any and all help is much appreciated.
J</p>
","<p>Make sure you dont't have any javascript conflicts. If you are using extra javascript libraries like jQuery or prototype, disable them temporarily and see if that helps.</p>
","2765","<joomla><jce>","0","0","2","2011-05-05 23:18:01","1478161","0","","","","","2009-09-25 15:52:05",""
"1478131","Can't get JCE working on front-end","<p>I've gone through all the tutorials and read through a ton of forum posts, but to no avail. I cannot get JCE to work properly on the front-end of my Joomla project. I have the group settings to allow Editors (and higher levels) to use JCE. When I log in as an editor on the front-end though, I only have text boxes to edit the content, no controls. I've tried re-installing, running upgrades, replacing editor.js and toggle.js files, and clearing my cache (hell, tried from a completely separate computer that never saw the site before, so it had no cache from the site). Nothing seems to be working. I'm running the latest version of JCE (just tried re-installing off of 'com_jce_157_154_package.zip') and I'm running Joomla v1.5.14.
Any and all help is much appreciated.
J</p>
","<p>Yes, make sure that your jQuery files are using jQuery.noConflict();. I had a similar problem in that another module's javascript was loaded before the JCE javascript &amp; was causing a $ conflict scenario.</p>

<p>Also, try to manually enable one of the members of said groups to have JCE as the default editor - does that help?</p>
","2765","<joomla><jce>","0","0","2","2011-05-05 23:18:01","1478161","0","","","","","2009-09-25 15:52:05",""
"5271189","How to convert a PKCS#8 encoded RSA key into PKCS#1 in Java?","<p>Is it possible to convert a PKCS#8 encoded RSA private key into PKCS#1?
I know this can be done easily via openssl, but can it be done in Java?</p>
","<p>Use <code>KeyFactory</code> with <code>PKCS8EncodedKeySpec</code> (algorithm <code>""RSA""</code>) to convert the PKCS #8 encoded private key bytes into Java objects.</p>

<p>Use <code>Cipher</code> and <code>SecretKeyFactory</code> (algorithm <code>""PBEWithMD5AndDES""</code>) with <code>PBEKeySpec</code>, and <code>PBEParameterSpec</code>  to create PKCS #5 encoded stuff.</p>
","2635","<java><security><rsa><jce><pkcs#8>","3","2","2","2016-09-07 07:37:26","39363008","1","","485343","","2011-03-24 10:27:28","2011-03-11 09:34:06",""
"5271189","How to convert a PKCS#8 encoded RSA key into PKCS#1 in Java?","<p>Is it possible to convert a PKCS#8 encoded RSA private key into PKCS#1?
I know this can be done easily via openssl, but can it be done in Java?</p>
","<p>Use BouncyCastle 1.50 </p>

<pre><code>PrivateKeyInfo pkInfo = PrivateKeyInfo.getInstance(pkPair.getPrivateKey().getEncodedKey());
ASN1Encodable privateKeyPKCS1ASN1Encodable = pkInfo.parsePrivateKey();
ASN1Primitive privateKeyPKCS1ASN1 = privateKeyPKCS1ASN1Encodable.toASN1Primitive();

byte[] privateKeyPKCS1 = privateKeyPKCS1ASN1.getEncoded();
</code></pre>
","2635","<java><security><rsa><jce><pkcs#8>","3","2","2","2016-09-07 07:37:26","39363008","1","","485343","","2011-03-24 10:27:28","2011-03-11 09:34:06",""
"3545992","Password based encryption using AES in java 5 (JCE only)","<p>I would like to use AES (192 or 256 bits), but am stuck on how to generate a key from a user supplied password.</p>

<p>I have gone <a href=""https://stackoverflow.com/questions/992019/java-256bit-aes-encryption"">through this thread</a>, and am able to run the program in Java 6. However, I need to run the same program in Java 5, and SecretKeyFactory for PBKDF2WithHmacSHA1 is not available in JDK 5.</p>

<p>So, essentially, I need to generate 192 or 256 bits for a SecretKey based on users password, and I would like a secure way to do that in java 5.</p>

<p>Help appreciated!</p>

<p>EDIT #1
Just to avoid getting stuck, I am now using 128 bits from MD5(user-entered-password + fixed-salt) as the key to AES. I know it sucks, and will change it the moment I figure out a good way to generate the key.</p>
","<p>Is there a reason you want PBKDF2WithHmacSHA1?</p>

<p>SecretKeyFactory existed in 1.4.2, so you might look <a href=""http://java.sun.com/developer/technicalArticles/Security/AES/AES_v1.html"" rel=""nofollow noreferrer"">here</a>.</p>
","2619","<java><security><aes><jce>","4","-2","1","2010-08-23 15:37:17","","3","","-1","","2017-05-23 12:23:07","2010-08-23 08:53:39",""
"26282162","How to derive a key with JCA/JCE and with an HSM","<p>I have a master key in an HSM and I want to derive it with a given diversifier.
I am quite new to JCA/JCE, and a bit lost with KeyGenerator, SecretKeyFactory, ... especially since all parameters are strings.
I want to use AES or HmacSha1.
It seems I need to use a SecretKeyFactory, and provide a KeySpecs.  But which type of KeySpecs?</p>

<p>(I have seen a post on that topic, but I didn't seem an HSM was used.)</p>

<p>Thanks.</p>
","<p>You can derive key using:</p>

<ul>
<li>password-based derivation (PKCS#5) as described in <a href=""https://stackoverflow.com/questions/4513433/"">Deriving a secret from a master key using JCE/JCA</a> or</li>
<li>emulate <code>C_Derive</code> from PKCS#11 using encryption as described in <a href=""https://stackoverflow.com/questions/14445460/"">PKCS11 deriveKey() and encrypt() returning different results for 3DES</a></li>
</ul>

<p>to use HSM from JCA/JCE APIs, you need to add the corresponding provider to the JCA/JCE APIs and then specify the the <code>provider</code> parameter to request for that specific provider implementation.</p>

<p>For example:</p>

<pre><code>int slot = 0;
Provider provider = new au.com.safenet.crypto.provider.SAFENETProvider(slot);
Security.addProvider(provider);
final String PROVIDER = provider.getName(); // ""SAFENET"", ""SAFENET.1"", ...

KeyGenerator keyGen = KeyGenerator.getInstance(""DESede"", PROVIDER);
Key baseKey = keyGen.generateKey();

Cipher desCipher = Cipher.getInstance(""DESede/CBC/PKCS5Padding"", PROVIDER);
desCipher.init(Cipher.ENCRYPT_MODE, baseKey);

byte[] derived = desCipher.doFinal(""diversification data"".getBytes());
</code></pre>

<p><strong>Note</strong> that if you need to do key derivation very often, you might consider to use your provider's PCKS#11 wrapper for Java (e.g. <code>jcprov</code> from SafeNet) or other APIs so that you can be more explicit about its session management and be more efficient about resource usage.</p>
","2582","<java><jce><hsm>","5","2","1","2015-09-10 03:22:01","","0","6","","","","2014-10-09 15:20:53",""
"8578120","Java NoClassDefFoundError With SSL Connection","<p>We have an application that uses a JAX-RPC client library and is running on a legacy version of Java (1.4.2) and are receiving the following SSL error:</p>

<pre><code>java.lang.NoClassDefFoundError
    javax.crypto.Cipher.a(DashoA6275)
    javax.crypto.Cipher.getInstance(DashoA6275)
    com.sun.net.ssl.internal.ssl.SunJSSE_i.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.CipherBox$JCECipherBox.&lt;init&gt;(DashoA12275)
    com.sun.net.ssl.internal.ssl.CipherRC4.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_h.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.CipherSuite$BulkCipher.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_ax.c(DashoA12275)
    com.sun.net.ssl.internal.ssl.SSLSocketImpl.f(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_ax.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_az.j(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_az.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_az.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_ax.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SSLSocketImpl.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SSLSocketImpl.j(DashoA12275)
    com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(DashoA12275)
    sun.net.www.protocol.https.HttpsClient.afterConnect(DashoA12275)
    sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(DashoA12275)
    sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:569)
    sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(DashoA12275)
    com.sun.xml.rpc.client.http.HttpClientTransport.writeMessageToConnection(HttpClientTransport.java:278)
    com.sun.xml.rpc.client.http.HttpClientTransport.invoke(HttpClientTransport.java:64)
    com.sun.xml.rpc.client.StreamingSender._send(StreamingSender.java:69)
    [ ... trace continues into internal application code ... ]
</code></pre>

<p>This has worked for us before and the only changes to the client library are ones related to the authentication protocol used and required an update to the latest build of BouncyCastle.  These changes were all at a higher level than the SSL protocol and this error appears to not even involve BouncyCastle.</p>

<p>Has anyone seen an error like this before and perhaps have any thoughts or suggestions? I tried adding the certificate to <code>cacerts</code>. This works fine if run against Java 1.6 however unfortunately the production system running this is still tied to Java 1.4 for the time being. </p>

<p>Also, our JAX-RPC code, and the authentication it does works correctly if we connect to our development systems without SSL.</p>

<p>[edit - additional information] I can now see that there is some conflict happening with the newer versions of BouncyCastle to cause the issue.  I've tried using the ancient (1.18) version and I seem to not get the SSL error, but instead get one from our application because it requires newer algorithms.</p>
","<p><code>javax.crypto.Cipher</code> is located in separate (from <strong>rt.jar</strong>) JAR file called <strong>jce.jar</strong>. Maybe the classloader failes to find this file or there are no read permissions set on this file for your production app server.  </p>
","2540","<java><ssl><noclassdeffounderror><jce><jsse>","3","0","2","2012-02-03 16:27:37","9131952","8","1","633239","","2011-12-20 20:45:35","2011-12-20 15:51:07",""
"8578120","Java NoClassDefFoundError With SSL Connection","<p>We have an application that uses a JAX-RPC client library and is running on a legacy version of Java (1.4.2) and are receiving the following SSL error:</p>

<pre><code>java.lang.NoClassDefFoundError
    javax.crypto.Cipher.a(DashoA6275)
    javax.crypto.Cipher.getInstance(DashoA6275)
    com.sun.net.ssl.internal.ssl.SunJSSE_i.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.CipherBox$JCECipherBox.&lt;init&gt;(DashoA12275)
    com.sun.net.ssl.internal.ssl.CipherRC4.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_h.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.CipherSuite$BulkCipher.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_ax.c(DashoA12275)
    com.sun.net.ssl.internal.ssl.SSLSocketImpl.f(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_ax.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_az.j(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_az.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_az.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SunJSSE_ax.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SSLSocketImpl.a(DashoA12275)
    com.sun.net.ssl.internal.ssl.SSLSocketImpl.j(DashoA12275)
    com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(DashoA12275)
    sun.net.www.protocol.https.HttpsClient.afterConnect(DashoA12275)
    sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(DashoA12275)
    sun.net.www.protocol.http.HttpURLConnection.getOutputStream(HttpURLConnection.java:569)
    sun.net.www.protocol.https.HttpsURLConnectionImpl.getOutputStream(DashoA12275)
    com.sun.xml.rpc.client.http.HttpClientTransport.writeMessageToConnection(HttpClientTransport.java:278)
    com.sun.xml.rpc.client.http.HttpClientTransport.invoke(HttpClientTransport.java:64)
    com.sun.xml.rpc.client.StreamingSender._send(StreamingSender.java:69)
    [ ... trace continues into internal application code ... ]
</code></pre>

<p>This has worked for us before and the only changes to the client library are ones related to the authentication protocol used and required an update to the latest build of BouncyCastle.  These changes were all at a higher level than the SSL protocol and this error appears to not even involve BouncyCastle.</p>

<p>Has anyone seen an error like this before and perhaps have any thoughts or suggestions? I tried adding the certificate to <code>cacerts</code>. This works fine if run against Java 1.6 however unfortunately the production system running this is still tied to Java 1.4 for the time being. </p>

<p>Also, our JAX-RPC code, and the authentication it does works correctly if we connect to our development systems without SSL.</p>

<p>[edit - additional information] I can now see that there is some conflict happening with the newer versions of BouncyCastle to cause the issue.  I've tried using the ancient (1.18) version and I seem to not get the SSL error, but instead get one from our application because it requires newer algorithms.</p>
","<p>So, after a lot of research I finally discovered that deep in our code we inserted the BC provider as provider number 1.</p>

<pre><code>Security.insertProviderAt(prov, 1);
</code></pre>

<p>Instead of doing that changing to just adding the provider fixed the issue.</p>

<pre><code>Security.addProvider(prov);
</code></pre>
","2540","<java><ssl><noclassdeffounderror><jce><jsse>","3","1","2","2012-02-03 16:27:37","9131952","8","1","633239","","2011-12-20 20:45:35","2011-12-20 15:51:07",""
"27236039","Does this use 256-bit AES encryption?","<p>I think it's hashing a 256 bit key, not sure if this is producing 256 bit cipher text though. Does using a 256-bit key mean the cipher will produce a 256-bit cipher text? The resultant cipher text is base 64 encoded. </p>

<p>Thanks!</p>

<pre><code>import java.security.spec.InvalidKeySpecException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import com.ibm.broker.javacompute.Base64;

public class Security {
    private static final String AES_PASS = ""43qyu3qwjaw8ga5azbro00ig""; // Hashed into an AES key later
    private SecretKeySpec keyObj;
    private Cipher cipher;
    private IvParameterSpec ivObj;

    public Security() throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException {
        // A constant IV, since CBC requires an IV but we don't really need one
        byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        this.ivObj = new IvParameterSpec(iv);

        // Create an SHA-256 256-bit hash of the key
        byte[] key = AES_PASS.getBytes();
        MessageDigest sha = MessageDigest.getInstance(""SHA-256"");
        key = sha.digest(key);
        key = Arrays.copyOf(key, 32); // Use only first 256 bit
        this.keyObj = new SecretKeySpec(key, ""AES"");

        // Create a Cipher by specifying the following parameters
        //  a. Algorithm name - here it is AES 
        //  b. Mode - here it is CBC mode 
        //  c. Padding - e.g. PKCS7 or PKCS5
        this.cipher = Cipher.getInstance(""AES/CBC/PKCS5PADDING"");
    }

    public String encrypt(String strDataToEncrypt) throws InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {
        String strCipherText = new String();

        this.cipher.init(Cipher.ENCRYPT_MODE, this.keyObj, this.ivObj);

        // Encrypt the Data 
        //  a. Declare / Initialize the Data. Here the data is of type String 
        //  b. Convert the Input Text to Bytes 
        //  c. Encrypt the bytes using doFinal method
        byte[] byteDataToEncrypt = strDataToEncrypt.getBytes();

        byte[] byteCipherText = this.cipher.doFinal(byteDataToEncrypt);

        // b64 is done differently on Android
        strCipherText = Base64.encode(byteCipherText);

        return strCipherText;
    }

    public String decrypt(String strCipherText) throws InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {
        String strDecryptedText = new String();

        // Initialize the Cipher for Encryption
        this.cipher.init(Cipher.DECRYPT_MODE, this.keyObj, this.ivObj);

        // Decode the Base64 text
        byte[] cipherBytes = Base64.decode(strCipherText);

        // Decrypt the Data
        //  a. Initialize a new instance of Cipher for Decryption (normally don't reuse the same object)
        //     Be sure to obtain the same IV bytes for CBC mode.
        //  b. Decrypt the cipher bytes using doFinal method
        byte[] byteDecryptedText = this.cipher.doFinal(cipherBytes);
        strDecryptedText = new String(byteDecryptedText);

        return strDecryptedText;
    }
}
</code></pre>
","<p>Your example appears to use a 32-byte key and a 256 bit version of the AES cryptosystem. So, technically yes it is 256-bit AES encryption. The actual size of the message determines the resulting output but it should be larger then the original message. Also, you should be able to decrypt it and get the original message. Finally, using a constant <a href=""https://en.wikipedia.org/wiki/Initialization_vector"" rel=""nofollow"">iv</a> is <em>not</em> recommended and may well render your system insecure in and of itself.</p>
","2526","<java><encryption><jce>","1","2","2","2014-12-01 20:33:37","27236186","0","3","","","","2014-12-01 19:46:27",""
"27236039","Does this use 256-bit AES encryption?","<p>I think it's hashing a 256 bit key, not sure if this is producing 256 bit cipher text though. Does using a 256-bit key mean the cipher will produce a 256-bit cipher text? The resultant cipher text is base 64 encoded. </p>

<p>Thanks!</p>

<pre><code>import java.security.spec.InvalidKeySpecException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import com.ibm.broker.javacompute.Base64;

public class Security {
    private static final String AES_PASS = ""43qyu3qwjaw8ga5azbro00ig""; // Hashed into an AES key later
    private SecretKeySpec keyObj;
    private Cipher cipher;
    private IvParameterSpec ivObj;

    public Security() throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException {
        // A constant IV, since CBC requires an IV but we don't really need one
        byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        this.ivObj = new IvParameterSpec(iv);

        // Create an SHA-256 256-bit hash of the key
        byte[] key = AES_PASS.getBytes();
        MessageDigest sha = MessageDigest.getInstance(""SHA-256"");
        key = sha.digest(key);
        key = Arrays.copyOf(key, 32); // Use only first 256 bit
        this.keyObj = new SecretKeySpec(key, ""AES"");

        // Create a Cipher by specifying the following parameters
        //  a. Algorithm name - here it is AES 
        //  b. Mode - here it is CBC mode 
        //  c. Padding - e.g. PKCS7 or PKCS5
        this.cipher = Cipher.getInstance(""AES/CBC/PKCS5PADDING"");
    }

    public String encrypt(String strDataToEncrypt) throws InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {
        String strCipherText = new String();

        this.cipher.init(Cipher.ENCRYPT_MODE, this.keyObj, this.ivObj);

        // Encrypt the Data 
        //  a. Declare / Initialize the Data. Here the data is of type String 
        //  b. Convert the Input Text to Bytes 
        //  c. Encrypt the bytes using doFinal method
        byte[] byteDataToEncrypt = strDataToEncrypt.getBytes();

        byte[] byteCipherText = this.cipher.doFinal(byteDataToEncrypt);

        // b64 is done differently on Android
        strCipherText = Base64.encode(byteCipherText);

        return strCipherText;
    }

    public String decrypt(String strCipherText) throws InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, NoSuchAlgorithmException, NoSuchPaddingException {
        String strDecryptedText = new String();

        // Initialize the Cipher for Encryption
        this.cipher.init(Cipher.DECRYPT_MODE, this.keyObj, this.ivObj);

        // Decode the Base64 text
        byte[] cipherBytes = Base64.decode(strCipherText);

        // Decrypt the Data
        //  a. Initialize a new instance of Cipher for Decryption (normally don't reuse the same object)
        //     Be sure to obtain the same IV bytes for CBC mode.
        //  b. Decrypt the cipher bytes using doFinal method
        byte[] byteDecryptedText = this.cipher.doFinal(cipherBytes);
        strDecryptedText = new String(byteDecryptedText);

        return strDecryptedText;
    }
}
</code></pre>
","<pre><code>MessageDigest sha = MessageDigest.getInstance(""SHA-256"");
key = sha.digest(key);
</code></pre>

<p>The following code creates a Hash of the input that is key. If we have some data ""x"" and ""y"" unless x=y
hash of ""x"" will never equal to hash of ""y"", this can be used to determine if original data is tampered because if it is it will produce a different hash.</p>

<pre><code>key = Arrays.copyOf(key, 32); // Use only first 256 bit
this.keyObj = new SecretKeySpec(key, ""AES"");
</code></pre>

<p>In this case you are getting 32 bytes of the digest you have created and forming a secret key that is of size 256 bit as 8x32=256 
you are then using the cipher along with this key for encryption and decryption.</p>

<p>most of the Cipher's operate in blocks (this one does). They partition the text to be encrypted into fixed block size which is equal to key size and then apply XOR etc operation on the block to get the encrypted block . If the text size does not align with cipher block size then extra padding is appended to the text to align it to the fixed block size.</p>
","2526","<java><encryption><jce>","1","0","2","2014-12-01 20:33:37","27236186","0","3","","","","2014-12-01 19:46:27",""
"7539017","How to create your own security provider with some crypto algorithm?","<p>Using official tutorial i understood the main principles of Java Cryptography Architecture.
But neither the officials nor internet gives me anything distinct about creating my own provider and implementing some crypto algorithms.</p>

<p>I wonder if anyone can give me the source code of a simple security provider and/or a source code of some algorithm, which is used by this provider.</p>

<p><em>Overall</em>, the <strong>main target</strong> is : a <strong><em>provider class</em></strong> ( simple one, not the complicated like SunJCE ) and a bunch of classes ( or one class ) with <strong><em>cryptography algorithm implementation</em></strong> ( with all it's doFinal and other method, whatever the implementation class needs )</p>
","<p>Try <a href=""http://download.oracle.com/javase/6/docs/technotes/guides/security/crypto/HowToImplAProvider.html"" rel=""nofollow"">How to Implement a Provider for the JavaTM Cryptography Extension</a>.</p>
","2507","<java><jce><jca>","2","1","1","2017-08-08 14:35:14","","6","","962598","","2011-09-24 15:58:40","2011-09-24 12:31:12",""
"5548982","TinyMCE (JCE) How to prevent the plugin from cleaning up the code?","<p>I am using JCE, and I've set everything about code cleanup (in configuration) to OFF. The editor is fixing it anyway. Here's an example:</p>

<pre><code>&lt;span class=""inset-right""&gt;
    &lt;h3&gt;TOC&lt;/h3&gt;
    &lt;ol&gt;
        &lt;li&gt;&lt;a href=""#wstep""&gt;Wstęp&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#jak_zaczac""&gt;Jak zacząć?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#spis_metod""&gt;Spis metod&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
&lt;/span&gt;
</code></pre>

<p>Will get changed to:</p>

<pre><code>&lt;h3&gt;TOC&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;&lt;a href=""#one""&gt;One&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=""#two""&gt;Two&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=""#three""&gt;Three&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</code></pre>

<p>I know it is inappropriate to put H3 and OL list into SPAN but I do not have a choice here. I just want to turn off all of the code fixing and cleanup.</p>

<p>Thanks in advance for the help.</p>
","<p>If disabling cleanup using <code>cleanup: false,</code> does not help you may define to put H3 and OL list into SPAN as valid.
You may use the following settings depending on your version of tinymce:</p>

<ul>
<li><a href=""http://tinymce.moxiecode.com/wiki.php/Configuration%3avalid_children"" rel=""nofollow"">valid_children</a></li>
<li><a href=""http://tinymce.moxiecode.com/wiki.php/Configuration%3aextended_valid_elements"" rel=""nofollow"">extended_valid_elements</a></li>
</ul>
","2466","<joomla><tinymce><wysiwyg><jce>","1","1","2","2011-11-24 01:41:07","7722545","0","","","","","2011-04-05 08:09:26",""
"5548982","TinyMCE (JCE) How to prevent the plugin from cleaning up the code?","<p>I am using JCE, and I've set everything about code cleanup (in configuration) to OFF. The editor is fixing it anyway. Here's an example:</p>

<pre><code>&lt;span class=""inset-right""&gt;
    &lt;h3&gt;TOC&lt;/h3&gt;
    &lt;ol&gt;
        &lt;li&gt;&lt;a href=""#wstep""&gt;Wstęp&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#jak_zaczac""&gt;Jak zacząć?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#spis_metod""&gt;Spis metod&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
&lt;/span&gt;
</code></pre>

<p>Will get changed to:</p>

<pre><code>&lt;h3&gt;TOC&lt;/h3&gt;
&lt;ol&gt;
    &lt;li&gt;&lt;a href=""#one""&gt;One&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=""#two""&gt;Two&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=""#three""&gt;Three&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</code></pre>

<p>I know it is inappropriate to put H3 and OL list into SPAN but I do not have a choice here. I just want to turn off all of the code fixing and cleanup.</p>

<p>Thanks in advance for the help.</p>
","<p>Your code is invalid. Change span to div and all should be fine....</p>

<pre><code>&lt;div class=""inset-right""&gt;
    &lt;h3&gt;TOC&lt;/h3&gt;
    &lt;ol&gt;
        &lt;li&gt;&lt;a href=""#wstep""&gt;Wstęp&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#jak_zaczac""&gt;Jak zacząć?&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#spis_metod""&gt;Spis metod&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
&lt;/div&gt;
</code></pre>

<p>Then it should work...</p>

<p><a href=""http://forum.joomla.org/viewtopic.php?p=2608692"" rel=""nofollow"">http://forum.joomla.org/viewtopic.php?p=2608692</a> has more information about modifying JCE for your code.</p>
","2466","<joomla><tinymce><wysiwyg><jce>","1","1","2","2011-11-24 01:41:07","7722545","0","","","","","2011-04-05 08:09:26",""
"32306081","How to decrypt a private key in Java (without BC openssl)","<p>Is it possible decrypt an encrypted RSA (or others, shouldn't matter) private keys using JCE and/or BouncyCastle provider (not using openssl bundle)?</p>

<p>I can read unencrypted keys just fine using PrivateKeyFactory.</p>

<p>Googling this gets me through examples of using PEMReader (from BC openssl bundle) that has a password applied to it, but - don't want to use openssl bundle, don't necessarily want to use PEM format, and I can decode PEM using PemReader (from provider bundle). It's what can I do with it afterwards is the question.</p>

<p>I'm looking for some mega-function, or a series thereof that can do it, i.e. I am not looking into parsing the ASN1 of the encrypted key, figuring out the encryption method, passing the input through the cipher, etc.</p>
","<p>If you have an encrypted PKCS#8 key in binary format (i.e. not in PEM format) the following code shows how to retrieve the private key:</p>

<pre><code>public PrivateKey decryptKey(byte[] pkcs8Data, char[] password) throws Exception {
    PBEKeySpec pbeSpec = new PBEKeySpec(password);
    EncryptedPrivateKeyInfo pkinfo = new EncryptedPrivateKeyInfo(pkcs8Data);
    SecretKeyFactory skf = SecretKeyFactory.getInstance(pkinfo.getAlgName());
    Key secret = skf.generateSecret(pbeSpec);
    PKCS8EncodedKeySpec keySpec = pkinfo.getKeySpec(secret);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    return kf.generatePrivate(keySpec);
}
</code></pre>

<p>If you have a PEM format, remove the header (first line), the footer(last line) et convert the remaining content from base64 to regular byte array.</p>
","2460","<java><encryption><bouncycastle><jce><pkcs#8>","2","3","1","2015-09-04 12:15:33","32397843","2","","622266","","2015-08-31 07:40:14","2015-08-31 07:32:42",""
"11470188","Bouncy castle 1.47 and standard JCE","<p>I am trying to create some helper methods to create (and sign) CSR, self signed certificates etc... I already had some methods implemented with now-deprecated functionality.
In the interest of keeping up with the latest, I have upgraded bouncycastle to 1.47 which seems to be largely different and I was wondering two things:</p>

<p>1) I can't seem to track down a concise list of examples. Due to the added verbosity of the code now necessary to accomplish similar things as before, this would be very welcome.</p>

<p>2) It seems unreasonably hard to work with bouncycastle while mixing in classic JCE stuff, at least much more so then before. Is there a reason for this?</p>

<p>As an example of the latter, take the generation of a csr, it used to be as simple as doing this:</p>

<pre><code>org.bouncycastle.jce.PKCS10CertificationRequest request = new org.bouncycastle.jce.PKCS10CertificationRequest(type.toString(), subject, pair.getPublic(), null, pair.getPrivate());
</code></pre>

<p>Where subject is a ""javax.security.auth.x500.X500Principal"", the private &amp; public key stem from a general ""java.security.KeyPair"" etc.</p>

<p>Now I have something like:</p>

<pre><code>public byte[] generatePKCS10(KeyPair pair, SignatureType type, X500Principal subject) throws IOException {
    PKCS10CertificationRequestBuilder builder = new PKCS10CertificationRequestBuilder(
        new X500Name(subject.getName()),
        SubjectPublicKeyInfo.getInstance(pair.getPublic())
    );
    AlgorithmIdentifier sigAlgId = new DefaultSignatureAlgorithmIdentifierFinder().find(type.toString());
    AlgorithmIdentifier digAlgId = new DefaultDigestAlgorithmIdentifierFinder().find(sigAlgId);
    AsymmetricKeyParameter keyParam = PrivateKeyFactory.createKey(pair.getPrivate().getEncoded());
    try {
        ContentSigner signer = new BcRSAContentSignerBuilder(sigAlgId, digAlgId).build(keyParam);
        PKCS10CertificationRequest csr = builder.build(signer);
        ContentVerifierProvider verifier = new JcaContentVerifierProviderBuilder().setProvider(new BouncyCastleProvider()).build(pair.getPublic());
        csr.isSignatureValid(verifier);
        return csr.getEncoded();
    }
    catch (OperatorCreationException e) {
        throw new IOException(e);
    }
    catch (PKCSException e) {
        throw new IOException(e);
    }
}
</code></pre>

<p>Is there a whole host of easy conversion utilities or overloaded methods or JCE-specific implementations that I'm missing? It does not help that a lot of google-searches highlight old (read: deprecated) ways of doing things.</p>
","<p>I stumbled upon a JCE-compliant solution shortly after posting this. It seems quite a few of their classes have a JCA-specific extension which handles all the necessary conversion. For example ""X509v1CertificateBuilder"" can be instantiated as ""new JcaX509v1CertificateBuilder()"" which takes JCE parameters instead of bouncycastle-specific ones. </p>

<p>For the example above:</p>

<pre><code>PKCS10CertificationRequestBuilder builder = new JcaPKCS10CertificationRequestBuilder(
    subject,
    pair.getPublic()
);
</code></pre>

<p>I hope this pattern holds...</p>
","2448","<java><bouncycastle><jce>","1","1","1","2013-05-30 13:24:21","11470698","0","1","","","","2012-07-13 12:05:47",""
"4083512","Loading PublicKey generated from java thro openSSL API","<p>Should implement the solution with JCE
I Have a Public Key String generated using the KeyPairGenerator.</p>

<p>How do I load this in openSSL Api call using PEM_read_bio_RSAPublicKey? Or this will have the x509 spec encoded how do we remove and generate the public which is compatible with the openssl api call?</p>

<pre><code>try {
    // Get the public/private key pair
    KeyPairGenerator keyGen = KeyPairGenerator
        .getInstance(keyAlgorithm);
    keyGen.initialize(numBits);
    KeyPair keyPair = keyGen.genKeyPair();
    PrivateKey privateKey = keyPair.getPrivate();
    PublicKey publicKey = keyPair.getPublic();

    System.out.println(""\n"" + ""Generating key/value pair using ""
        + privateKey.getAlgorithm() + "" algorithm"");

    // Get the bytes of the public and private keys
    privateKeyBytes = privateKey.getEncoded();
    publicKeyBytes = publicKey.getEncoded();
    try {
        rsa_publickey = new 
            BASE64Encoder().encodeBuffer((keyPair.getPublic()).getEncoded());
    }
    catch(Exception e1)
    {
        e1.printStackTrace();
    }
    System.out.println(""PublicKey :""+rsa_publickey);
}
catch(Exception e1)
{
    e1.printStackTrace();
}
</code></pre>
","<p>Perhaps you could try to export it from Java to the PEM format OpenSSL can read, using <a href=""http://www.bouncycastle.org/"" rel=""nofollow"">Bouncycastle</a>'s <a href=""http://www.bouncycastle.org/docs/docs1.6/org/bouncycastle/openssl/PEMWriter.html"" rel=""nofollow""><code>PEMWriter</code></a>.</p>

<p><strong>EDIT:</strong> For example, the following code:</p>

<pre><code>KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
keyGen.initialize(2048);
KeyPair keyPair = keyGen.genKeyPair();
PrivateKey privateKey = keyPair.getPrivate();
PublicKey publicKey = keyPair.getPublic();

// Solution 1: using BouncyCastle's PEMWriter
PEMWriter pemWriter = new PEMWriter(new PrintWriter(System.out));
pemWriter.writeObject(publicKey);
pemWriter.flush();

// Solution 2: using sun.misc.BASE64Encoder
// (and possibly naive 64-character line split)
sun.misc.BASE64Encoder encoder = new sun.misc.BASE64Encoder();
String encoded = encoder.encode(publicKey.getEncoded());
encoded = encoded.replace(""\n"", """");
StringBuilder builder = new StringBuilder();
builder.append(""-----BEGIN PUBLIC KEY-----"");
builder.append(""\n"");
int i = 0;
while (i &lt; encoded.length()) {
    builder.append(encoded.substring(i,
            Math.min(i + 64, encoded.length())));
    builder.append(""\n"");
    i += 64;
}
builder.append(""-----END PUBLIC KEY-----"");
System.out.println(builder);
</code></pre>

<p>produces this output:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0CCQ5fdVEEm8u1CrbMXa
FK35/d5MxNjCg7EQZwKsydRhfGhbK+u+iTUiv9rkqhcCucqrMi9eXtqt/QNGreFF
oR5auneeCMgqnXxoX7wjuZ5DBt6qN6ZSe+sAPqSKbvvLUmpBUK9pdOvxegQFGG2d
OUCcQLg2o6vLr9r7ZJDSxdyzCb14i+TEt0TnLjFTkR846dmX41gfU7eacoPxYWoo
Pvhq2huyH0cP8rNJ2/+2BcInjyv5TpLT+m0lYjMar6exgonqRetIJF0Gi7unM+0V
RsBoaBMAsLeqoR5OrCrSKepWbjixjHRMmjBaTYM5wP8DAbjVupUQ9kUwqRTzHTti
XQIDAQAB
-----END PUBLIC KEY-----
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0CCQ5fdVEEm8u1CrbMXa
FK35/d5MxNjCg7EQZwKsydRhfGhbK+u+iTUiv9rkqhcCucqrMi9eXtqt/QNGreFF
oR5auneeCMgqnXxoX7wjuZ5DBt6qN6ZSe+sAPqSKbvvLUmpBUK9pdOvxegQFGG2d
OUCcQLg2o6vLr9r7ZJDSxdyzCb14i+TEt0TnLjFTkR846dmX41gfU7eacoPxYWoo
Pvhq2huyH0cP8rNJ2/+2BcInjyv5TpLT+m0lYjMar6exgonqRetIJF0Gi7unM+0V
RsBoaBMAsLeqoR5OrCrSKepWbjixjHRMmjBaTYM5wP8DAbjVupUQ9kUwqRTzHTti
XQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>(If you want to do it without BouncyCastle, you might want to use another base 64 encoder, since it's usually not recommended to use <code>sun.*</code> packages that may not be exposed or available on all JREs.)</p>

<p>I haven't tried to load in using OpenSSL's API, but with OpenSSL on the command line, when you paste the above key, you get this (note that what's between the BEGIN/END delimiters is stdin, pasted on the terminal here):</p>

<pre><code>$ openssl rsa -inform PEM -pubin -text -noout
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0CCQ5fdVEEm8u1CrbMXa
FK35/d5MxNjCg7EQZwKsydRhfGhbK+u+iTUiv9rkqhcCucqrMi9eXtqt/QNGreFF
oR5auneeCMgqnXxoX7wjuZ5DBt6qN6ZSe+sAPqSKbvvLUmpBUK9pdOvxegQFGG2d
OUCcQLg2o6vLr9r7ZJDSxdyzCb14i+TEt0TnLjFTkR846dmX41gfU7eacoPxYWoo
Pvhq2huyH0cP8rNJ2/+2BcInjyv5TpLT+m0lYjMar6exgonqRetIJF0Gi7unM+0V
RsBoaBMAsLeqoR5OrCrSKepWbjixjHRMmjBaTYM5wP8DAbjVupUQ9kUwqRTzHTti
XQIDAQAB
-----END PUBLIC KEY-----
Modulus (2048 bit):
    00:d0:20:90:e5:f7:55:10:49:bc:bb:50:ab:6c:c5:
    da:14:ad:f9:fd:de:4c:c4:d8:c2:83:b1:10:67:02:
    ac:c9:d4:61:7c:68:5b:2b:eb:be:89:35:22:bf:da:
    e4:aa:17:02:b9:ca:ab:32:2f:5e:5e:da:ad:fd:03:
    46:ad:e1:45:a1:1e:5a:ba:77:9e:08:c8:2a:9d:7c:
    68:5f:bc:23:b9:9e:43:06:de:aa:37:a6:52:7b:eb:
    00:3e:a4:8a:6e:fb:cb:52:6a:41:50:af:69:74:eb:
    f1:7a:04:05:18:6d:9d:39:40:9c:40:b8:36:a3:ab:
    cb:af:da:fb:64:90:d2:c5:dc:b3:09:bd:78:8b:e4:
    c4:b7:44:e7:2e:31:53:91:1f:38:e9:d9:97:e3:58:
    1f:53:b7:9a:72:83:f1:61:6a:28:3e:f8:6a:da:1b:
    b2:1f:47:0f:f2:b3:49:db:ff:b6:05:c2:27:8f:2b:
    f9:4e:92:d3:fa:6d:25:62:33:1a:af:a7:b1:82:89:
    ea:45:eb:48:24:5d:06:8b:bb:a7:33:ed:15:46:c0:
    68:68:13:00:b0:b7:aa:a1:1e:4e:ac:2a:d2:29:ea:
    56:6e:38:b1:8c:74:4c:9a:30:5a:4d:83:39:c0:ff:
    03:01:b8:d5:ba:95:10:f6:45:30:a9:14:f3:1d:3b:
    62:5d
Exponent: 65537 (0x10001)
</code></pre>

<p><strong>EDIT:</strong>
If you want to export something within the <code>BEGIN RSA PUBLIC KEY</code> instead, you can try something like this:</p>

<pre><code>RSAPublicKey rsaPublicKey = (RSAPublicKey) publicKey;
RSAPublicKeyStructure pubkeyStruct = new RSAPublicKeyStructure(
    rsaPublicKey.getModulus(), rsaPublicKey.getPublicExponent());
pubkeyStruct.getDEREncoded(); // base64-encode this between the delimiters
</code></pre>
","2411","<openssl><jce>","2","3","1","2010-11-09 16:59:25","","0","1","488780","","2010-11-03 04:30:27","2010-11-03 01:23:57",""
"2575362","Java JCE providers - what does ""clean room implementation"" mean?","<p>I'm required to write a JCE provider. I have learned that I need to use the bouncy castle clean room implementation. Could you please tell me what ""clean room implementation"" means in in this context?</p>
","<p>Clean room implementation means in this context that the code was written only from the description and specification, but not with access to any potentially troublesome code.</p>

<p>This is important as the Sun source code previously was under a license which was incompatible with especially GPL distributions.  By ensuring that the code was not written without any access to such code, it is guaranteed that the Sun license could not later be found to apply to the clean room implementation, and then again be incompatible with the GPL license or any other restrictions. </p>

<p>In other words, it is a guarantee that the license shown will hold.</p>
","2348","<java><encryption><jce>","6","8","2","2011-11-18 22:37:18","2575378","0","2","23897","","2010-04-04 18:03:07","2010-04-04 18:01:26",""
"2575362","Java JCE providers - what does ""clean room implementation"" mean?","<p>I'm required to write a JCE provider. I have learned that I need to use the bouncy castle clean room implementation. Could you please tell me what ""clean room implementation"" means in in this context?</p>
","<p>Despite the name, most re-implementations are done in rooms with mostly empty beer cans and pizza boxes. This is speaking from past experience, you understand :-)</p>

<p>However, in the context of chip development, a clean room is one where small imperfections (like dust) can cause serious problems at the nano scale. So they're kept incredibly clean, with air scrubbers, protective suits (protecting the environment, notvthe wearer) etc. </p>

<p>By analogy, software clean room development is done without any access to imperfections that could cause problems. In the case of open-source software, this means not having access to an implementation that might be ""tainted"" by an incompatible license. (It's not just GPL, but this is commonly cited due to its viral nature). However, this also applies to closed source reverse engineering projects, like the creation of the IBM compatible BIOS that opened the market to IBM clones back in the 80's.  </p>
","2348","<java><encryption><jce>","6","3","2","2011-11-18 22:37:18","2575378","0","2","23897","","2010-04-04 18:03:07","2010-04-04 18:01:26",""
"12388779","How to decrypt data using private key(.private) in java","<p>Data is encrypted using OpenSSL in PHP and i would like to decrypt java but getting error in java</p>

<p><strong>Code for Encryption in PHP-</strong></p>

<pre><code>public function getEncryptedString($cardNumber,$key_id){
              $encryptedCardNumber = '';
              $key_name = ""key_{$key_id}""; 
              $pub_key_path =$key_name."".public"";  
              $fp=fopen ($pub_key_path,""r""); //Open the public key (key_8.public)
              $pub_key = fread($fp,8192);  //Read public key  key (key_8.public) into 
              fclose($fp); 
               openssl_public_encrypt($cardNumber,$encryptedCardNumber,$pub_key);   
              if($key_id &gt; 4) return rawurlencode(base64_encode($encryptedCardNumber));  
              else return addslashes($encryptedCardNumber);          

    }
</code></pre>

<p><strong>Code for Decryption in JAVA-</strong></p>

<pre><code>public static String getDecryptedValue(int keyId,String encryptedCCNumber ,String passPhrase){
              String result="""";

              String privateKeyFileName=""key_8.private"";
              String privateKeyLocation= PropertiesUtil.getProperty(""PUBLIC_PRIVATE_KEY_LOCATION"");
             String privateKeyFileNameLocation=privateKeyLocation+privateKeyFileName;
              String decryptedValue= getDecryptedMessage(privateKeyFileNameLocation,encryptedCCNumber,passPhrase);
              return result;

       }


       public static String getDecryptedMessage(String privateKeyFileNameLocation, String encryptedCCNumber,String passPhrase) 
                { 
              byte[] decodedBytesCCNumber= Base64.decodeBase64(encryptedCCNumber.getBytes());
           byte[] decryptedMessage=null; 
           try { 
               Cipher cipher = Cipher.getInstance(""RSA""); 

                PrivateKey privateKey = getPrivateKey(privateKeyFileNameLocation,passPhrase);
               cipher.init(Cipher.DECRYPT_MODE, privateKey); 
               decryptedMessage = cipher.doFinal(decodedBytesCCNumber); 

           } catch (Throwable t) { 
              t.printStackTrace();
           }

           System.out.println(""new String(decryptedMessage)""+new String(decryptedMessage));
           return new String(decryptedMessage); 

       } 

       private static PrivateKey getPrivateKey(String privateKeyFileNameLocation,String passPhrase) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, UnrecoverableEntryException {
               KeyStore ks = KeyStore.getInstance(""PKCS12"");
               ks.load(new FileInputStream(privateKeyFileNameLocation), passPhrase.toCharArray());
               String alias = (String) ks.aliases().nextElement();
               KeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry) ks.getEntry(alias, new KeyStore.PasswordProtection(passPhrase.toCharArray()));
               return keyEntry.getPrivateKey();
           }
</code></pre>

<p>Java code is giving below error.</p>

<pre><code>java.io.IOException: toDerInputStream rejects tag type 45
    at sun.security.util.DerValue.toDerInputStream(DerValue.java:847)
    at sun.security.pkcs12.PKCS12KeyStore.engineLoad(PKCS12KeyStore.java:1221)
    at java.security.KeyStore.load(KeyStore.java:1214)
</code></pre>
","<p>You are URL-encoding a Base64-encoding of the ciphertext, but you are only deciphering a base64-decoding of it. Either lose the URL-encoding or decode it at the receiver.</p>
","2305","<java><openssl><jce>","1","2","1","2012-09-12 23:42:14","","0","3","207421","","2012-09-12 23:42:14","2012-09-12 13:00:49",""
"16568400","What are the algorithms supported by JsafeJCE for KeyManagerFactory?","<p>In our project we need to communicate with a third party server on SSL.
Earlier we were using sslJ provider <code>com.rsa.jsse.JsseProvider</code> from RSA, but because of some issue in it, now we have to use Sun's SSL provider <code>com.sun.net.ssl.internal.ssl.Provider</code> and we need to use crypto provider ""JsafeJCE"" of RSA for FIPS compliance.</p>

<p>I am facing problem while creating KeyManagerFactory using JsafeJCE provider.</p>

<pre><code>KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(""PKCS12"",
    ""JsafeJCE"");
</code></pre>

<p>Following is the exception I get</p>

<blockquote>
  <p>Exception in thread ""main"" java.security.NoSuchAlgorithmException: no such algorithm: PKCS12 for provider JsafeJCE</p>
</blockquote>

<p>Can someone please tell me the algorithms supported by JsafeJCE for KeyManagerFactory?</p>
","<p>I'm assuming you've installed the RSA JsseProvider and JsafeJCE correctly.</p>

<p><code>PKCS12</code> is a <code>KeyStore</code> type, not a <code>KeyManager</code> type. It doesn't make sense to create a <code>KeyManagerFactory</code> of type <code>PKCS12</code>, perhaps you meant <code>KeyStore.getInstance(""PKCS12"", ""JsafeJCE"")</code>.</p>

<p>Otherwise, if you were after a <code>KeyManagerFactory</code>, it is a JSSE class, not a JCE class, so it would expect a JSSE provider, not a JCE provider. The <a href=""https://developer-content.emc.com/docs/rsashare/share_for_java/1.1/jsse/com/rsa/jsse/JsseProvider.html#NAME"" rel=""nofollow"">provider name for the RSA JsseProvider</a> is ""<code>RsaJsse</code>"", not ""<code>JsafeJCE</code>"" (although it will use that JCE provider behind the scenes, see <a href=""https://developer-content.emc.com/docs/rsashare/share_for_java/1.1/dev_guide/group__LEARNJSSE__OVERVIEW__PROVIDER__DYN.html"" rel=""nofollow"">this note</a>).</p>

<blockquote>
  <p>Can someone please tell me the algorithms supported by JsafeJCE for KeyManagerFactory?</p>
</blockquote>

<p>According to the <a href=""https://developer-content.emc.com/docs/rsashare/share_for_java/1.1/jsse/com/rsa/jsse/JsseProvider.html"" rel=""nofollow"">documentation</a> the supported KMF name should be <a href=""https://developer-content.emc.com/docs/rsashare/share_for_java/1.1/jsse/constant-values.html#com.rsa.jsse.JsseProvider.X509"" rel=""nofollow"">""<code>X509</code>""</a>, although some aliases are also valid.</p>
","2286","<java><ssl><rsa><jce>","2","1","1","2014-01-20 18:12:24","","1","2","474189","","2013-05-16 07:11:04","2013-05-15 14:55:14",""
"4998093","Error: package com.sun.crypto.provider does not exist after upgrade to Java 1.6","<p>I have recently upgraded an existing java project from java 1.4 to 1.6 and it fails to compile due to the error:  package com.sun.crypto.provider does not exist.</p>

<p>I realise that I'm missing a library but I don't know which library to download or where to download it?</p>
","<p>Rather than downloading a library, you should modify your application so that it doesn't depend on libraries that aren't part of the public API. Future upgrades would require no further effort.</p>
","2263","<java><jce>","1","2","2","2011-02-14 23:20:49","4998483","2","","21234","","2011-02-14 23:17:56","2011-02-14 22:36:00",""
"4998093","Error: package com.sun.crypto.provider does not exist after upgrade to Java 1.6","<p>I have recently upgraded an existing java project from java 1.4 to 1.6 and it fails to compile due to the error:  package com.sun.crypto.provider does not exist.</p>

<p>I realise that I'm missing a library but I don't know which library to download or where to download it?</p>
","<p><code>com.sun.crypto.provider</code> is the Sun Java Cryptography Extension (JCE), introduced for Java 1.3 (I think) to get around the lunatic export regs of the US government.   The JCE was non-standard, though (as are all <code>com.sun</code> packages), and they were renamed/refactored in later versions of Java, which have ""proper"" crypto packages (<code>javax.crypto</code>).</p>

<p>Therefore, your application as it stands will not run on Java6 without modification, changing the JCE referneces to the new standard packages.</p>
","2263","<java><jce>","1","3","2","2011-02-14 23:20:49","4998483","2","","21234","","2011-02-14 23:17:56","2011-02-14 22:36:00",""
"42996822","java.security.NoSuchAlgorithmException: no such algorithm: CmacAES for provider BC","<pre><code>import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

/**
 * Class to calculate CMAC which is used as PRF in KDF for SCP03 PseudoRandom CardChallenge generation
 */
public class Cmac {

    /**
     * Tested CMAC against official TestVectors ({@link 'http://csrc.nist.gov/publications/nistpubs/800-38B/SP_800-38B.pdf'})
     * CMAC used as PRF in KDF
     */

    public static byte[] calc(byte[] keyBytes, byte[] data) throws ApduGeneratorException {
        try {
            SecretKey key = new SecretKeySpec(keyBytes, 0, keyBytes.length, ""AES"");
            Mac mac = Mac.getInstance(""CmacAES"", BouncyCastleProvider.PROVIDER_NAME);
            mac.init(key);

            byte[] hash = mac.doFinal(data);

            return hash;
        } catch (Exception e) {
            throw new ApduGeneratorException(e.getMessage());
        }
    }
}
</code></pre>

<p>This code is causing such exception: </p>

<pre><code>java.security.NoSuchAlgorithmException: no such algorithm: CmacAES for provider BC
    at sun.security.jca.GetInstance.getService(Unknown Source)
    at javax.crypto.JceSecurity.getInstance(JceSecurity.java:97)
    at javax.crypto.Mac.getInstance(Mac.java:222)
    at com.quantag.globalplatform.sm.Cmac.calc(Cmac.java:23)
    at app.executors.LoadAppletExecutor$1.call(LoadAppletExecutor.java:102)
    at app.executors.LoadAppletExecutor$1.call(LoadAppletExecutor.java:1)
    at javafx.concurrent.Task$TaskCallable.call(Unknown Source)
    at java.util.concurrent.FutureTask.run(Unknown Source)
    at javafx.concurrent.Service.lambda$null$492(Unknown Source)
    at java.security.AccessController.doPrivileged(Native Method)
    at javafx.concurrent.Service.lambda$executeTask$493(Unknown Source)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
    at java.lang.Thread.run(Unknown Source)
</code></pre>

<p>I have already installed <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""nofollow noreferrer"">JCE unlimited 8</a> and added: <code>security.provider.N=org.bouncycastle.jce.provider.BouncyCastleProvider</code>
according to <a href=""http://www.bouncycastle.org/wiki/display/JA1/Provider+Installation"" rel=""nofollow noreferrer"">Provider Installation docs</a>. <br> But I am still getting this exception. What have I missed?</p>

<p>I am using a such version of BC: <strong>bcprov-jdk15on-154.jar</strong>.</p>
","<p>Have replaced: </p>

<pre><code>Mac mac = Mac.getInstance(""CmacAES"", BouncyCastleProvider.PROVIDER_NAME);
</code></pre>

<p>with this new code:     </p>

<pre><code>Mac mac = Mac.getInstance(""AESCMAC"", BouncyCastleProvider.PROVIDER_NAME);
</code></pre>

<p>The exception gone and all is working perfectly. </p>
","2237","<java><bouncycastle><jce>","-1","0","1","2017-03-24 11:08:53","42997955","3","2","7179509","","2017-03-24 10:21:59","2017-03-24 10:17:41",""
"36866807","Encrypted String to byte[]","<p>I need to encrypt password i am using <a href=""http://www.mkyong.com/java/jce-encryption-data-encryption-standard-des-tutorial/"" rel=""nofollow"">this</a> tutorial </p>

<p>i need to store the encrypted password in sql data base as a string, when i try to read and convert string to byte[] i have a problem , the byte[] is different from original encrypted byte[] </p>

<pre><code>byte[] encrypted = encryper.encrypte(""pavel"");

            Log.i(""info"",""encrypted : ""+encrypted);

            String pass = String.valueOf(encrypted);

            byte[] passBytes = pass.getBytes();

            Log.i(""info"",""passBytes : ""+passBytes);

            Log.i(""info"",""decrypted : ""+encryper.decrypte(passBytes));
</code></pre>

<p>log</p>

<pre><code>I/info: encrypted : [B@3832a394
I/info: passBytes : [B@33deee3d
I/info: decrypted : 
</code></pre>

<p>decrypt method</p>

<pre><code>public String decrypte(byte[] text)
{

    byte[] textDecrypted = new byte[0];

    try {

        cipher.init(Cipher.DECRYPT_MODE, myDesKey);
        textDecrypted = cipher.doFinal(text);
        Log.i(""info"",""do final : ""+textDecrypted);

    }catch (InvalidKeyException e) {e.printStackTrace();
    }catch (IllegalBlockSizeException e){e.printStackTrace();}
    catch (BadPaddingException e){e.printStackTrace();}

    return new String(textDecrypted);
}
</code></pre>

<p>but if i write public String decrypte(byte[] text)
    {</p>

<pre><code>    byte[] textDecrypted = new byte[0];

    try {

        cipher.init(Cipher.DECRYPT_MODE, myDesKey);
        textDecrypted = cipher.doFinal(text);
        Log.i(""info"",""do final : ""+textDecrypted);

    }catch (InvalidKeyException e) {e.printStackTrace();
    }catch (IllegalBlockSizeException e){e.printStackTrace();}
    catch (BadPaddingException e){e.printStackTrace();}

    return new String(textDecrypted);
}
</code></pre>

<p>but if i put the original byte[] all work</p>

<pre><code>encryper.decrypte(encrypted)
</code></pre>
","<p>What you are seeing on the console is the result of the <code>toString()</code> method of <code>byte[]</code>. It doesn't represent the actual contents. Instead it is an ID for the object. They are different because you have different objects.</p>

<p>Also if you use <code>String.valueOf(encrypted)</code> it will fall back to the <a href=""https://docs.oracle.com/javase/6/docs/api/java/lang/String.html#valueOf(java.lang.Object)"" rel=""nofollow""><code>valueOf(Object)</code> method</a> because there is no <code>valueOf(byte[])</code>. This gives you not a string representation of the contents of your array, but the same object ID produced by <code>toString()</code>.</p>

<p>Use e.g. <a href=""https://docs.oracle.com/javase/6/docs/api/java/lang/String.html#String(byte[])"" rel=""nofollow""><code>new String(encrypted)</code></a> to convert the contents of the byte array to a readable string.</p>
","2232","<java><encryption><bytearray><password-encryption><jce>","1","1","2","2016-04-26 14:00:29","36867195","1","","","","","2016-04-26 13:45:12",""
"36866807","Encrypted String to byte[]","<p>I need to encrypt password i am using <a href=""http://www.mkyong.com/java/jce-encryption-data-encryption-standard-des-tutorial/"" rel=""nofollow"">this</a> tutorial </p>

<p>i need to store the encrypted password in sql data base as a string, when i try to read and convert string to byte[] i have a problem , the byte[] is different from original encrypted byte[] </p>

<pre><code>byte[] encrypted = encryper.encrypte(""pavel"");

            Log.i(""info"",""encrypted : ""+encrypted);

            String pass = String.valueOf(encrypted);

            byte[] passBytes = pass.getBytes();

            Log.i(""info"",""passBytes : ""+passBytes);

            Log.i(""info"",""decrypted : ""+encryper.decrypte(passBytes));
</code></pre>

<p>log</p>

<pre><code>I/info: encrypted : [B@3832a394
I/info: passBytes : [B@33deee3d
I/info: decrypted : 
</code></pre>

<p>decrypt method</p>

<pre><code>public String decrypte(byte[] text)
{

    byte[] textDecrypted = new byte[0];

    try {

        cipher.init(Cipher.DECRYPT_MODE, myDesKey);
        textDecrypted = cipher.doFinal(text);
        Log.i(""info"",""do final : ""+textDecrypted);

    }catch (InvalidKeyException e) {e.printStackTrace();
    }catch (IllegalBlockSizeException e){e.printStackTrace();}
    catch (BadPaddingException e){e.printStackTrace();}

    return new String(textDecrypted);
}
</code></pre>

<p>but if i write public String decrypte(byte[] text)
    {</p>

<pre><code>    byte[] textDecrypted = new byte[0];

    try {

        cipher.init(Cipher.DECRYPT_MODE, myDesKey);
        textDecrypted = cipher.doFinal(text);
        Log.i(""info"",""do final : ""+textDecrypted);

    }catch (InvalidKeyException e) {e.printStackTrace();
    }catch (IllegalBlockSizeException e){e.printStackTrace();}
    catch (BadPaddingException e){e.printStackTrace();}

    return new String(textDecrypted);
}
</code></pre>

<p>but if i put the original byte[] all work</p>

<pre><code>encryper.decrypte(encrypted)
</code></pre>
","<p>I would encode the byte array to String using Base64.Encoder (java.util, since Java 8), then save it to DB, then read it from DB to String and decode it to byte array using Base64.decoder</p>
","2232","<java><encryption><bytearray><password-encryption><jce>","1","2","2","2016-04-26 14:00:29","36867195","1","","","","","2016-04-26 13:45:12",""
"21262489","Block BOT/0.1 (BOT for JCE) using .htaccess","<p>I have noticed an increase in attacks from this user agent:</p>

<pre><code>BOT/0.1 (BOT for JCE)
</code></pre>

<p>Request line is:</p>

<pre><code>POST /index.php?option=com_jce&amp;task=plugin&amp;plugin=imgmanager&amp;file=imgmanager&amp;version=1576&amp;cid=20 HTTP/1.1
</code></pre>

<p>I have tried to block the bot with the following code in the <code>.htaccess</code> file:</p>

<pre><code>SetEnvIfNoCase User-Agent “BOT for JCE” bad_bot
&lt;Limit GET POST&gt;
Order Allow,Deny
Allow from all
Deny from env=bad_bot
&lt;/Limit&gt;
</code></pre>

<p>But the above is not stopping the bots or attacks. How to stop them?</p>
","<p>Try:</p>

<pre><code>RewriteEngine On
RewriteCond %{HTTP_USER_AGENT} BOT/0\.[0-9]
RewriteRule ^ - [L,F]
</code></pre>
","2232","<.htaccess><joomla><bots><jce>","1","0","1","2014-08-15 11:45:43","","0","1","2157640","","2014-08-15 11:45:43","2014-01-21 15:35:30",""
"3870784","Reimplement AES encryption using third-party Java library without US law limitations","<p>I've implemented AES encryption with certain task-specific parameters using standard Java tools and BouncyCastle provider for specific AES algorithm.</p>

<p>Here is the code:</p>

<pre><code>private byte[] aesEncryptedInfo(String info) throws UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidParameterSpecException, InvalidAlgorithmParameterException, NoSuchProviderException {
    Security.addProvider(new BouncyCastleProvider());
    SecretKey secret = new SecretKeySpec(CUSTOMLONGSECRETKEY.substring(0, 32).getBytes(), ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"", ""BC"");
    cipher.init(Cipher.ENCRYPT_MODE, secret, new IvParameterSpec(VECTOR_SECRET_KEY.getBytes()));
    return cipher.doFinal(info.getBytes(""UTF-8""));
}
</code></pre>

<p>In some environments this code requires special policy files. See related question: <a href=""https://stackoverflow.com/questions/3862800/invalidkeyexception-illegal-key-size"">InvalidKeyException Illegal key size</a></p>

<p>My goal is to reimplement it using third-party library, ideally I would use bouncy castle which is already used as provider. The library should have no restictions of standard java policy files. In other words there should be no restrictions.</p>

<p>Please suggest in your answers how to reimplement it using BouncyCastle or other third-party library which can work without restrictions mentioned. Ideally I would see the code :-)</p>

<p>Thank you very much for reading!</p>

<p>After a delay I now happy to post a solution. Hope that someone can benefit from it because Bouncy Castle documentation is not filled with a lot of examples :-)</p>

<pre><code>private byte[] aesEncryptedInfo(String info)
// Creating AES/CBC/PKCS7Padding cipher with specified Secret Key and Initial Vector
PaddedBufferedBlockCipher cipher = new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESEngine()), new PKCS7Padding());
cipher.init(true, new ParametersWithIV(new KeyParameter(CUSTOMLONGSECRETKEY.getBytes()), VECTOR_SECRET_KEY.getBytes()));

byte[] inputData = info.getBytes(""UTF-8"");
int outBlockSize = cipher.getOutputSize(inputData.length);
byte[] outputData = new byte[outBlockSize];

int outLength = cipher.processBytes(inputData, 0, inputData.length, outputData, 0);
outLength += cipher.doFinal(outputData, outLength);
if (outLength != outBlockSize) {
    return Arrays.copyOf(outputData, outLength);
}
else {
    return outputData;
}    
</code></pre>

<p>}</p>

<p>By the way I found two differences between Java API and Bouncy Castle API:
1. Bouncy Castle uses composition of objects to create needed cipher. While Java API uses string to identify needed cipher.
2. BC encryption code slightly bigger, while Java API code is more compact.</p>

<p>The solution is full replacement for original Java API implementation - the proof is a custom unit test that I made.</p>
","<p>Why isn't it possible to just add the necessary policy files?</p>

<p>That would be the easiest thing to do.
If you live in the US and you export your software to other (maybe ""unallowed"") countries, you will (theoretically) get trouble either way (including policy files/doing the encryption yourself). </p>

<p>If you live outside the US, why even bother about it, just include the policy files, no one cares.</p>
","2183","<java><bouncycastle><jce>","2","1","3","2012-07-17 20:12:17","3906056","0","3","-1","","2017-05-23 12:25:26","2010-10-06 08:43:43",""
"3870784","Reimplement AES encryption using third-party Java library without US law limitations","<p>I've implemented AES encryption with certain task-specific parameters using standard Java tools and BouncyCastle provider for specific AES algorithm.</p>

<p>Here is the code:</p>

<pre><code>private byte[] aesEncryptedInfo(String info) throws UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidParameterSpecException, InvalidAlgorithmParameterException, NoSuchProviderException {
    Security.addProvider(new BouncyCastleProvider());
    SecretKey secret = new SecretKeySpec(CUSTOMLONGSECRETKEY.substring(0, 32).getBytes(), ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"", ""BC"");
    cipher.init(Cipher.ENCRYPT_MODE, secret, new IvParameterSpec(VECTOR_SECRET_KEY.getBytes()));
    return cipher.doFinal(info.getBytes(""UTF-8""));
}
</code></pre>

<p>In some environments this code requires special policy files. See related question: <a href=""https://stackoverflow.com/questions/3862800/invalidkeyexception-illegal-key-size"">InvalidKeyException Illegal key size</a></p>

<p>My goal is to reimplement it using third-party library, ideally I would use bouncy castle which is already used as provider. The library should have no restictions of standard java policy files. In other words there should be no restrictions.</p>

<p>Please suggest in your answers how to reimplement it using BouncyCastle or other third-party library which can work without restrictions mentioned. Ideally I would see the code :-)</p>

<p>Thank you very much for reading!</p>

<p>After a delay I now happy to post a solution. Hope that someone can benefit from it because Bouncy Castle documentation is not filled with a lot of examples :-)</p>

<pre><code>private byte[] aesEncryptedInfo(String info)
// Creating AES/CBC/PKCS7Padding cipher with specified Secret Key and Initial Vector
PaddedBufferedBlockCipher cipher = new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESEngine()), new PKCS7Padding());
cipher.init(true, new ParametersWithIV(new KeyParameter(CUSTOMLONGSECRETKEY.getBytes()), VECTOR_SECRET_KEY.getBytes()));

byte[] inputData = info.getBytes(""UTF-8"");
int outBlockSize = cipher.getOutputSize(inputData.length);
byte[] outputData = new byte[outBlockSize];

int outLength = cipher.processBytes(inputData, 0, inputData.length, outputData, 0);
outLength += cipher.doFinal(outputData, outLength);
if (outLength != outBlockSize) {
    return Arrays.copyOf(outputData, outLength);
}
else {
    return outputData;
}    
</code></pre>

<p>}</p>

<p>By the way I found two differences between Java API and Bouncy Castle API:
1. Bouncy Castle uses composition of objects to create needed cipher. While Java API uses string to identify needed cipher.
2. BC encryption code slightly bigger, while Java API code is more compact.</p>

<p>The solution is full replacement for original Java API implementation - the proof is a custom unit test that I made.</p>
","<p>No option for buying a toolkit? <a href=""http://www.rsa.com/node.aspx?id=1319"" rel=""nofollow"">RSA BSAFE</a></p>
","2183","<java><bouncycastle><jce>","2","0","3","2012-07-17 20:12:17","3906056","0","3","-1","","2017-05-23 12:25:26","2010-10-06 08:43:43",""
"3870784","Reimplement AES encryption using third-party Java library without US law limitations","<p>I've implemented AES encryption with certain task-specific parameters using standard Java tools and BouncyCastle provider for specific AES algorithm.</p>

<p>Here is the code:</p>

<pre><code>private byte[] aesEncryptedInfo(String info) throws UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidParameterSpecException, InvalidAlgorithmParameterException, NoSuchProviderException {
    Security.addProvider(new BouncyCastleProvider());
    SecretKey secret = new SecretKeySpec(CUSTOMLONGSECRETKEY.substring(0, 32).getBytes(), ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS7Padding"", ""BC"");
    cipher.init(Cipher.ENCRYPT_MODE, secret, new IvParameterSpec(VECTOR_SECRET_KEY.getBytes()));
    return cipher.doFinal(info.getBytes(""UTF-8""));
}
</code></pre>

<p>In some environments this code requires special policy files. See related question: <a href=""https://stackoverflow.com/questions/3862800/invalidkeyexception-illegal-key-size"">InvalidKeyException Illegal key size</a></p>

<p>My goal is to reimplement it using third-party library, ideally I would use bouncy castle which is already used as provider. The library should have no restictions of standard java policy files. In other words there should be no restrictions.</p>

<p>Please suggest in your answers how to reimplement it using BouncyCastle or other third-party library which can work without restrictions mentioned. Ideally I would see the code :-)</p>

<p>Thank you very much for reading!</p>

<p>After a delay I now happy to post a solution. Hope that someone can benefit from it because Bouncy Castle documentation is not filled with a lot of examples :-)</p>

<pre><code>private byte[] aesEncryptedInfo(String info)
// Creating AES/CBC/PKCS7Padding cipher with specified Secret Key and Initial Vector
PaddedBufferedBlockCipher cipher = new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESEngine()), new PKCS7Padding());
cipher.init(true, new ParametersWithIV(new KeyParameter(CUSTOMLONGSECRETKEY.getBytes()), VECTOR_SECRET_KEY.getBytes()));

byte[] inputData = info.getBytes(""UTF-8"");
int outBlockSize = cipher.getOutputSize(inputData.length);
byte[] outputData = new byte[outBlockSize];

int outLength = cipher.processBytes(inputData, 0, inputData.length, outputData, 0);
outLength += cipher.doFinal(outputData, outLength);
if (outLength != outBlockSize) {
    return Arrays.copyOf(outputData, outLength);
}
else {
    return outputData;
}    
</code></pre>

<p>}</p>

<p>By the way I found two differences between Java API and Bouncy Castle API:
1. Bouncy Castle uses composition of objects to create needed cipher. While Java API uses string to identify needed cipher.
2. BC encryption code slightly bigger, while Java API code is more compact.</p>

<p>The solution is full replacement for original Java API implementation - the proof is a custom unit test that I made.</p>
","<p>Use the Bouncycastle lightweight crypto API <em>directly</em>, rather than through Java JCE interface. Bouncycastle includes its own crypto API accessible through various classes in <code>org.bouncycastle.*</code> packages. It also implements the JCE provider interface to make some of its crypto implementations available through standard JCE classes like <code>Cipher</code>, <code>KeyGenerator</code>, etc.</p>

<p>The cryptography policy restrictions are enforced by the JCE classes, not by bouncycastle. Therefore if you do not use these classes you'll will not encounter any restrictions. On the downside you will sacrifice some portability. To get started, take a look at the javadocs for the <a href=""http://www.bouncycastle.org/docs/docs1.6/org/bouncycastle/crypto/engines/AESEngine.html"" rel=""nofollow"">AESEngine</a> class, and the rest of the <a href=""http://www.bouncycastle.org/docs/docs1.6/index.html"" rel=""nofollow"">javadocs for the bouncycastle</a>.</p>
","2183","<java><bouncycastle><jce>","2","3","3","2012-07-17 20:12:17","3906056","0","3","-1","","2017-05-23 12:25:26","2010-10-06 08:43:43",""
"7659098","How to set length of message authentication code in java jce/jca","<p>i'm using the following code to get a AESCMAC</p>

<pre><code>Mac mac = Mac.getInstance(""aescmac"", new BouncyCastleProvider());
mac.init(k_mac );
byte[] tooLong = mac.doFinal(tmp);
</code></pre>

<p>doFinal will generate a byte-Array with the size of 16, but i would like it to be 8 bytes long. i see there is a method getMacLength() with returns 16 but no setMacLength method.
thx for your help</p>
","<p>I don't think you can reduce the length. The information is 16 bytes long; you can't shorten it without losing information.</p>
","2175","<java><bouncycastle><jce><jca>","2","0","3","2013-07-04 13:51:35","","0","","443515","","2011-10-05 09:36:53","2011-10-05 09:19:01",""
"7659098","How to set length of message authentication code in java jce/jca","<p>i'm using the following code to get a AESCMAC</p>

<pre><code>Mac mac = Mac.getInstance(""aescmac"", new BouncyCastleProvider());
mac.init(k_mac );
byte[] tooLong = mac.doFinal(tmp);
</code></pre>

<p>doFinal will generate a byte-Array with the size of 16, but i would like it to be 8 bytes long. i see there is a method getMacLength() with returns 16 but no setMacLength method.
thx for your help</p>
","<p>The AES-CMAC produces a 128bit MAC (see <a href=""http://tools.ietf.org/html/rfc4493"" rel=""nofollow"">http://tools.ietf.org/html/rfc4493</a>), i.e. 16 bytes. If you want a 8 byte mac, choose an algorithm that produces a 64bit MAC.</p>

<p>Is there any particular reason <em>why</em> you want a 64 bit rather than a 128 bit MAC?</p>
","2175","<java><bouncycastle><jce><jca>","2","1","3","2013-07-04 13:51:35","","0","","443515","","2011-10-05 09:36:53","2011-10-05 09:19:01",""
"7659098","How to set length of message authentication code in java jce/jca","<p>i'm using the following code to get a AESCMAC</p>

<pre><code>Mac mac = Mac.getInstance(""aescmac"", new BouncyCastleProvider());
mac.init(k_mac );
byte[] tooLong = mac.doFinal(tmp);
</code></pre>

<p>doFinal will generate a byte-Array with the size of 16, but i would like it to be 8 bytes long. i see there is a method getMacLength() with returns 16 but no setMacLength method.
thx for your help</p>
","<p>According to NIST 800-38B, chapter 6.2 (MAC Generation), step 7, to generate a N-bit MAC you simply take the N most significant bits. Appendix A.2 discusses the consequences of using shortened MAC.</p>
","2175","<java><bouncycastle><jce><jca>","2","3","3","2013-07-04 13:51:35","","0","","443515","","2011-10-05 09:36:53","2011-10-05 09:19:01",""
"13378170","Tomcat raises encryption exception","<p>I recently installed jdk 1.6. My tomcat installation started raising the following error. </p>

<p>org.jasypt.exceptions.EncryptionOperationNotPossibleException: Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine</p>

<p>I have the JCE files in jre/lib/security directory despite what is mentioned in the error message. What could possibly be the problem? What should I do to get it fixed? Thanks</p>

<p>Here is the stack trace:</p>

<pre><code>java.security.InvalidKeyException: Illegal key size
at javax.crypto.Cipher.a(DashoA13*..)
at javax.crypto.Cipher.a(DashoA13*..)
at javax.crypto.Cipher.a(DashoA13*..)
at javax.crypto.Cipher.init(DashoA13*..)
at javax.crypto.Cipher.init(DashoA13*..)
at org.jasypt.encryption.pbe.StandardPBEByteEncryptor.decrypt(StandardPBEByteEncryptor.java:832)
at org.jasypt.encryption.pbe.StandardPBEStringEncryptor.decrypt(StandardPBEStringEncryptor.java:679)
at org.jasypt.encryption.pbe.PooledPBEStringEncryptor.decrypt(PooledPBEStringEncryptor.java:473)
at org.jasypt.properties.PropertyValueEncryptionUtils.decrypt(PropertyValueEncryptionUtils.java:72)
at com.pagatech.services.util.StatefulEncryptablePropertyPlaceholderConfigurer.convertPropertyValue(StatefulEncryptablePropertyPlaceholderConfigurer.java:57)
at org.springframework.beans.factory.config.PropertyResourceConfigurer.convertProperty(PropertyResourceConfigurer.java:121)
at org.springframework.beans.factory.config.PropertyResourceConfigurer.convertProperties(PropertyResourceConfigurer.java:104)
at org.springframework.beans.factory.config.PropertyResourceConfigurer.postProcessBeanFactory(PropertyResourceConfigurer.java:81)
at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:681)
at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:656)
at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:446)
at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:384)
at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:283)
at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4205)
at org.apache.catalina.core.StandardContext.start(StandardContext.java:4704)
at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053)
at org.apache.catalina.core.StandardHost.start(StandardHost.java:840)
at org.apache.catalina.core.ContainerBase.start(ContainerBase.java:1053)
at org.apache.catalina.core.StandardEngine.start(StandardEngine.java:463)
at org.apache.catalina.core.StandardService.start(StandardService.java:525)
at org.apache.catalina.core.StandardServer.start(StandardServer.java:754)
at org.apache.catalina.startup.Catalina.start(Catalina.java:595)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289)
at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414)
</code></pre>
","","2161","<tomcat><java><jce>","2","","0","2012-11-14 15:44:22","","10","","1367948","","2012-11-14 15:44:22","2012-11-14 11:43:17",""
"12894129","bouncy castle: How to get bcpkix-jdk15on-1.47.jar with debug information","<p>I am trying to debug an issue with bouncy castle 1.47. I can find a debug jar for 'bcprov' but not for {org.bouncycastle:bcpkix-jdk15on:1.47:jar}.</p>

<p>Is there any other place to download bcpkix-jdk15on-1.47.jar with debug information?</p>

<p>or</p>

<p>Is there a tool that can generate line numbers from a jar (containing .class files) without line numbers and also generated sources for the same generated jar?</p>

<p>or </p>

<p>I had been trying to build the jars from source <a href=""http://www.bouncycastle.org/latest_releases.html"" rel=""nofollow"">1</a> but the build cannot find the test jars I suppose from the errors.</p>

<pre><code>  [javadoc] /tickets/bouncycastle/src-cvs/java/crypto/build/artifacts/jdk1.5/bcprov-jdk15on-147/src/org/bouncycastle/jce/provider/test/AllTests.java:5: package junit.framework does not exist
  [javadoc] import junit.framework.Test;
  [javadoc]                       ^
  [javadoc] /tickets/bouncycastle/src-cvs/java/crypto/build/artifacts/jdk1.5/bcprov-jdk15on-147/src/org/bouncycastle/jce/provider/test/AllTests.java:6: package junit.framework does not exist
  [javadoc] import junit.framework.TestCase;
  [javadoc]                       ^
  [javadoc] /tickets/bouncycastle/src-cvs/java/crypto/build/artifacts/jdk1.5/bcprov-jdk15on-147/src/org/bouncycastle/jce/provider/test/AllTests.java:7: package junit.framework does not exist
  [javadoc] import junit.framework.TestSuite;
</code></pre>

<p>Any help is appreciated.</p>
","<p>I have managed to generate jar with debug information from bouncy castle source.</p>

<p>in ROOT_SRC/bc-build.properties, set release.debug to true</p>

<pre><code>release.suffix: 147
release.name: 1.47
release.debug: true
</code></pre>

<p>The build expects mail (sun implementation) and junit jars to be available in classpath. I have put them on to jdk/jre/lib/ext and the build worked. the artifacts were generated in the ROOT_SRC/build directory.</p>
","2147","<jar><bouncycastle><jce>","4","6","2","2019-09-18 13:38:33","12897046","0","","","","","2012-10-15 10:55:04",""
"12894129","bouncy castle: How to get bcpkix-jdk15on-1.47.jar with debug information","<p>I am trying to debug an issue with bouncy castle 1.47. I can find a debug jar for 'bcprov' but not for {org.bouncycastle:bcpkix-jdk15on:1.47:jar}.</p>

<p>Is there any other place to download bcpkix-jdk15on-1.47.jar with debug information?</p>

<p>or</p>

<p>Is there a tool that can generate line numbers from a jar (containing .class files) without line numbers and also generated sources for the same generated jar?</p>

<p>or </p>

<p>I had been trying to build the jars from source <a href=""http://www.bouncycastle.org/latest_releases.html"" rel=""nofollow"">1</a> but the build cannot find the test jars I suppose from the errors.</p>

<pre><code>  [javadoc] /tickets/bouncycastle/src-cvs/java/crypto/build/artifacts/jdk1.5/bcprov-jdk15on-147/src/org/bouncycastle/jce/provider/test/AllTests.java:5: package junit.framework does not exist
  [javadoc] import junit.framework.Test;
  [javadoc]                       ^
  [javadoc] /tickets/bouncycastle/src-cvs/java/crypto/build/artifacts/jdk1.5/bcprov-jdk15on-147/src/org/bouncycastle/jce/provider/test/AllTests.java:6: package junit.framework does not exist
  [javadoc] import junit.framework.TestCase;
  [javadoc]                       ^
  [javadoc] /tickets/bouncycastle/src-cvs/java/crypto/build/artifacts/jdk1.5/bcprov-jdk15on-147/src/org/bouncycastle/jce/provider/test/AllTests.java:7: package junit.framework does not exist
  [javadoc] import junit.framework.TestSuite;
</code></pre>

<p>Any help is appreciated.</p>
","<p>Instead of rolling your own build, you could exclude <code>bcprov-jdk15on</code> and explicitly pull in the debug-built <code>bcprov-debug-jdk15on</code> artifact.</p>

<p>Maven config example:</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
    &lt;artifactId&gt;bcpkix-jdk15on&lt;/artifactId&gt;
    &lt;version&gt;${bouncycastle.version}&lt;/version&gt;
    &lt;exclusions&gt;
        &lt;exclusion&gt;
            &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
            &lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;
        &lt;/exclusion&gt;
    &lt;/exclusions&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
    &lt;artifactId&gt;bcprov-debug-jdk15on&lt;/artifactId&gt;
    &lt;version&gt;${bouncycastle.version}&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>This will allow you to debug bouncycastle stuff.</p>
","2147","<jar><bouncycastle><jce>","4","0","2","2019-09-18 13:38:33","12897046","0","","","","","2012-10-15 10:55:04",""
"18326911","Can't fix ""Error: Input length must be a multiple of 16 when decrypting with a pad cipher""","<p>Ello! I am working a chat application that encrypts it's data through AES/CBC/PKCS5 Padding. It works through the client sending the encrypted message to the server where it is sent back and decrypted. Unfortunately, whenever I decrypt the message, I get the error as follows: javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher. The encryption is based of this program :(<a href=""http://www.scottjjohnson.com/blog/AesWithCbcExample.java"" rel=""nofollow"">http://www.scottjjohnson.com/blog/AesWithCbcExample.java</a>) which works perfectly fine and I cannot see the difference between my code and that one except for that I must convert from string to byte array. Here is my code code:</p>

<p>Client (Encryption):</p>

<pre><code>String message = textField.getText();
// generate a key
KeyGenerator keygen = KeyGenerator.getInstance(""AES"");
keygen.init(128);  // To use 256 bit keys, you need the ""unlimited strength"" encryption policy files from Sun.
byte[] key = keygen.generateKey().getEncoded();
SecretKeySpec skeySpec = new SecretKeySpec(key, ""AES"");

// build the initialization vector.  This example is all zeros, but it 
// could be any value or generated using a random number generator.
byte[] iv = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
IvParameterSpec ivspec = new IvParameterSpec(iv);

// initialize the cipher for encrypt mode
Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
cipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivspec);

// encrypt the message
byte[] encrypted = cipher.doFinal(message.getBytes());
System.out.println(""Ciphertext: "" + encrypted + ""\n"");
System.out.println(encrypted);
out.println(encrypted);
textField.setText(""""); 
</code></pre>

<p>Server Side:</p>

<pre><code>String input = in.readLine();
writer.println(""MESSAGE "" + input);
</code></pre>

<p>Client (Decryption):</p>

<pre><code>//DECRYPTION
System.out.println(line);
line = line.substring(8);
System.out.println(line);

// generate a key
KeyGenerator keygen = KeyGenerator.getInstance(""AES"");
keygen.init(128);  // To use 256 bit keys, you need the ""unlimited strength"" encryption policy files from Sun.
byte[] key = keygen.generateKey().getEncoded();
SecretKeySpec skeySpec = new SecretKeySpec(key, ""AES"");

// build the initialization vector.  This example is all zeros, but it 
// could be any value or generated using a random number generator.
byte[] iv = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
IvParameterSpec ivspec = new IvParameterSpec(iv);

// reinitialize the cipher for decryption
Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
cipher.init(Cipher.DECRYPT_MODE, skeySpec, ivspec);

// decrypt the message
byte[] decrypted = cipher.doFinal(line.getBytes());
System.out.println(""Plaintext: "" + new String(decrypted) + ""\n"");
messageArea.append(name + "": "" + decrypted + ""\n"");
messageArea.setCaretPosition(messageArea.getDocument().getLength());
</code></pre>
","<p>Your problem has nothing to do with cryptography. You are failing to transfer your data correctly between your clients and the server.</p>

<p>I'm fairly sure <code>out.println(encrypted)</code> is <em>not</em> what you want to be doing, although I'm not entirely clear since I don't know the type of <code>out</code>. Nor should you be calling <code>line.getBytes()</code> in your decryption code.</p>

<p>You should convert your ciphertext to a non-lossy string form, such as hexadecimal or base64. So, try:</p>

<pre><code>out.println(DatatypeConverter.printHexBinary(encrypted));
</code></pre>

<p>and</p>

<pre><code>byte[] decrypted = cipher.doFinal(DatatypeConverter.parseHexBinary(line));
</code></pre>
","2117","<java><encryption><aes><jce>","0","4","1","2013-08-20 08:20:05","18330191","2","2","474189","","2013-08-20 08:13:13","2013-08-20 04:20:05",""
"16678491","Java JCE Encrypt Folders?","<p>Is it possible to encrypt entire folders with Java's JCE library. The folders will contain other folders/files if that is a problem. For those who don't know what JCE is, it stands for Java Cryptography Extension and it is used for encryption in Java. </p>
","<p>No.  You can't encrypt entire folders with only Java's JCE library.  It's not hard to zip it first though using a stream wrapper like <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/zip/ZipInputStream.html"" rel=""nofollow noreferrer""><code>ZipInputStream</code></a> and <a href=""http://docs.oracle.com/javase/6/docs/api/java/util/zip/ZipOutputStream.html"" rel=""nofollow noreferrer""><code>ZipOutputStream</code></a>.  Since you don't care about file size reduction, you could also use <a href=""https://code.google.com/p/jtar/"" rel=""nofollow noreferrer""><code>jtar</code></a>.  That will make it easy to tar up the folder after which it can be encrypted with JCE like any other file.</p>

<p>I would make a class called something like <code>public class FolderEncrypter</code> with methods <code>public byte[] encryptFolder(File folder)</code> and <code>public File decryptFolder(public byte[])</code>.  Then it is easy to reuse throughout your code whenever you need it.</p>
","2100","<java><encryption><jce>","3","3","1","2018-02-21 00:48:50","","2","1","","","","2013-05-21 20:02:08",""
"18896541","Oracle JDK installs two JREs?","<p><strong>Before downvoting</strong> or <strong>close-requesting</strong> this question please see that this question is about JDK 7 not 6, it has a second question 'Q2' which is not addressed by any duplicate thread and this question is about <em>four</em> not only <em>two</em> java.exe instances. Thank you!</p>

<hr>

<p>I've just installed Oracle's Java SE JDK (64 bit) which resulted in the following directory layout, and somehow <em>two</em> JREs:</p>

<pre><code>C:\Program Files\Java\
    \jdk1.7.0_40
        \jre
    \jre7
</code></pre>

<p>I'm now the proud owner of <em>four</em> <code>java.exe</code> executables:</p>

<pre><code>C:\Program Files\Java\jdk1.7.0_40\bin\java.exe
C:\Program Files\Java\jdk1.7.0_40\jre\bin\java.exe
C:\Program Files\Java\jre7\bin\java.exe
C:\Windows\System32\java.exe
</code></pre>

<p><strong>Q1:</strong> Which one should I put into my search path to execute Java-based applications?</p>

<p><strong>Q2:</strong> Do I need to put the Unlimited JCE Policy files just into the security sub-directory of the corresponding JRE in my search path or also into all others in order to work correctly?</p>
","<p>While installing JDK you will have a copy of JRE installed automatically. You need not install a copy of JRE separately. yet this will be your directory structure.</p>

<p>The copy of JRE in the JDK folder is for the is a private copy of JRE.</p>

<p>Installing the JDK installs a private Java SE Runtime Environment (JRE) and optionally a public copy. The private JRE is required to run the tools included with the JDK. It has no registry settings and is contained entirely in a jre directory (typically at C:\Program Files\jdk1.6.0\jre) whose location is known only to the JDK. On the other hand, the public JRE can be used by other Java applications, is contained outside the JDK (typically at C:\Program Files\Java\jre1.6.0), is registered with the Windows registry (at HKEY_LOCAL_MACHINE\SOFTWARE\JavaSoft), can be removed using Add/Remove Programs, might or might not be registered with browsers, and might or might not have java.exe copied to the Windows system directory (making it the default system Java platform or not).""</p>
","2087","<java><java-7><jce>","5","9","2","2013-09-19 15:13:14","18896806","5","2","20845","","2013-09-19 15:13:14","2013-09-19 13:50:42",""
"18896541","Oracle JDK installs two JREs?","<p><strong>Before downvoting</strong> or <strong>close-requesting</strong> this question please see that this question is about JDK 7 not 6, it has a second question 'Q2' which is not addressed by any duplicate thread and this question is about <em>four</em> not only <em>two</em> java.exe instances. Thank you!</p>

<hr>

<p>I've just installed Oracle's Java SE JDK (64 bit) which resulted in the following directory layout, and somehow <em>two</em> JREs:</p>

<pre><code>C:\Program Files\Java\
    \jdk1.7.0_40
        \jre
    \jre7
</code></pre>

<p>I'm now the proud owner of <em>four</em> <code>java.exe</code> executables:</p>

<pre><code>C:\Program Files\Java\jdk1.7.0_40\bin\java.exe
C:\Program Files\Java\jdk1.7.0_40\jre\bin\java.exe
C:\Program Files\Java\jre7\bin\java.exe
C:\Windows\System32\java.exe
</code></pre>

<p><strong>Q1:</strong> Which one should I put into my search path to execute Java-based applications?</p>

<p><strong>Q2:</strong> Do I need to put the Unlimited JCE Policy files just into the security sub-directory of the corresponding JRE in my search path or also into all others in order to work correctly?</p>
","<blockquote>
  <p>Which one should I put into my search path to execute Java-based
  applications?</p>
</blockquote>

<p>According to the ""<a href=""http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdkfiles.html"" rel=""nofollow"">JDK and JRE File Structure</a>"" document, you should add jdk1.7.0\bin to the path:</p>

<blockquote>
  <p>c:\jdk1.7.0\bin
      Executable files for the development tools contained in the Java Development Kit. The PATH environment variable should contain an entry
  for this directory. For more information on the tools, see the JDK
  Tools.</p>
</blockquote>

<p><br></p>

<blockquote>
  <p>Do I need to put the Unlimited JCE Policy files just into the security
  sub-directory of the corresponding JRE in my search path or also into
  all others in order to work correctly?</p>
</blockquote>

<p>According to the ""Unlimited Strength Java(TM) Cryptography Extension Policy Files"" documentation you will need to install the unlimited strength policy JAR files for all JREs that you plan to use.:</p>

<blockquote>
  <p>On Windows, for each JDK installation, there may be additional
      JREs installed under the ""Program Files"" directory. Please make
      sure that you install the unlimited strength policy JAR files
      for all JREs that you plan to use.</p>
</blockquote>
","2087","<java><java-7><jce>","5","3","2","2013-09-19 15:13:14","18896806","5","2","20845","","2013-09-19 15:13:14","2013-09-19 13:50:42",""
"28018726","java.security.SignatureException Signature length not correct: got 128 but was expecting 512","<p>I am using Shiboleth opensaml (<a href=""http://shibboleth.net/downloads/java-opensaml/"" rel=""nofollow"">http://shibboleth.net/downloads/java-opensaml/</a>) library for SAML and recently, after upgrading the libraries (the reason for upgrade was a NoSuchMethodError), the server started throwing the following exception during server start up:</p>

<p>[SigningUtil] Verifying signature over input using public key of type RSA and JCA algorithm ID SHA1withRSA
[SigningUtil] Error during signature verification
Caused by:
java.security.SignatureException: Signature length not correct: got 128 but was expecting 512</p>

<p>Generally, what causes this issue? This was not occurring on my local Windows system.( JVM:  1.7.0_71 (Oracle Corporation 24.71-b01) OS:           Windows 7 6.1 amd64) but only on Linux based system. </p>

<p>Looking forward to some suggestions or point me to some articles. Thanks in advance. </p>
","","2086","<java><security><jce><opensaml>","4","","0","2015-01-19 05:59:31","","0","","","","","2015-01-19 05:59:31",""
"3219599","DoD PKI CAC authentication in Tomcat (embedded in JBoss)","<p>I need to support DoD issued CAC-based authentication in my web application deployed in JBoss. Could someone give me pointers on where to start, the steps involved, etc?</p>

<p>Also, which JCE provider should I go with (OpenSSO, BountyCastle, etc)? I tried to google for a list of (active/current) providers but couldn't really find it. Is there a list of JCE providers that are most popular (by virtue of their underlying security algorithms? Thanks.</p>
","<p>I haven't worked with CAC cards, but PKI integration is typically handled by PKCS#11 middleware installed on the client CPU. On the server, you may need to intercept the request at the apache module level to enable PKI/SSO, here's a slideshow with more info on how they did it for forge.mil: 
<a href=""http://www.slideshare.net/rbulling/enabling-web-apps-for-dod-security-via-pkicac-enablement-forgemil-case-study"" rel=""nofollow"">http://www.slideshare.net/rbulling/enabling-web-apps-for-dod-security-via-pkicac-enablement-forgemil-case-study</a></p>

<p>If you need to do other web based interactions with the card (non PKCS11 functions like if you want to talk to one of the other apps installed on the card from your web app, or install an applet on the card) you'll need some kind of browser plug-in to send raw APDUs or higher level commands via PCSC. My company makes a plug-in for this purpose, it's available at <a href=""https://cardboss.cometway.com"" rel=""nofollow"">https://cardboss.cometway.com</a>.</p>

<p>Finally, I like bouncycastle... I doubt you will find any lists of JCE providers sorted by popularity.</p>
","2063","<jce><cac>","2","1","1","2011-03-11 11:34:52","","0","1","237091","","2010-09-01 19:36:22","2010-07-10 14:41:37",""
"2165012","Is JCE part of Java SE 6?","<p>I am trying to use some open source java library and that library has JCE as one of its dependencies. If I am using Java 1.6, do I need to download a JCE library separately or is it part of it? Seems like bountycastle.org (the open source provider for JCE) does not have any JCE listed for 1.4+</p>
","<p>Yes it is part of Java 6.</p>
","1979","<java><jce>","1","0","2","2012-05-16 05:11:35","2165042","0","","","","","2010-01-29 20:40:59",""
"2165012","Is JCE part of Java SE 6?","<p>I am trying to use some open source java library and that library has JCE as one of its dependencies. If I am using Java 1.6, do I need to download a JCE library separately or is it part of it? Seems like bountycastle.org (the open source provider for JCE) does not have any JCE listed for 1.4+</p>
","<p>JCE is bundled with JavaSE as of 1.4, according to <a href=""http://java.sun.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#Introduction"" rel=""nofollow noreferrer"">JCA's documentation...</a>.</p>

<blockquote>
  <p><strong>Notes on Terminology</strong></p>
  
  <p>Prior to JDK 1.4, the JCE was an unbundled product, and as such, the JCA and JCE were 
  regularly referred to as separate, distinct components. As JCE is now bundled in the 
  JDK, the distinction is becoming less apparent. Since the JCE uses the same 
  architecture as the JCA, the JCE should be more properly thought of as a part of the
  JCA.</p>
</blockquote>
","1979","<java><jce>","1","5","2","2012-05-16 05:11:35","2165042","0","","","","","2010-01-29 20:40:59",""
"35727710","Encrypt and decrypt a SecretKey with RSA public and private keys","<p>I am trying to encrypt a secretKey with my publicKey, then decrypt it somewhere else with the private key. I can encrypt and decrypt fine, However I am getting a completely different key back when I do this.</p>

<p>Here is the code that creates the public/ private keypair</p>

<pre><code>public static KeyPair generateKeyPair()
{
    KeyPair returnPair = null;
    try
    {
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"", ""SunJSSE"");

        System.out.println(""provider:"" + kpg.getProvider().getName());

        SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"");

        kpg.initialize(1024, random);

        returnPair = kpg.generateKeyPair();

    }catch(Exception e)
    {
        e.printStackTrace();
    }
    return returnPair;
}
</code></pre>

<p>I specified the SunJSSE provider, although I am not getting any different result than when I ran with DiffieHellman from SunJCE or the RSA/ SunRSASign provider. I am new to java security so these concepts are still a little above my head. </p>

<p>Here is the code I use to generate the secret key</p>

<pre><code>    public static SecretKey generateSecretKey(String keyPassword)
{
    SecretKey key = null;
    try
    {
        SecretKeyFactory method = SecretKeyFactory.getInstance(""PBEWithMD5AndDES"");

        //System.out.println(""salt length: "" + new SaltIVManager().getSalt().length);

        PBEKeySpec spec = new PBEKeySpec(keyPassword.toCharArray(), new SaltIVManager().getSalt(), 10000, 128);

        key = method.generateSecret(spec);

        System.out.println(""generate secret key length: "" + key.getEncoded().length); 

    }catch(Exception e)
    {
        e.printStackTrace();
    }
    return key;
}
</code></pre>

<p>And here are the two methods I use to encrypt/ decrypt my secret key</p>

<pre><code>    public static byte[] encryptSecretKey(SecretKey secretKey, PublicKey publicKey)
{
    byte[] encryptedSecret = null;
    try
    {

        Cipher cipher = Cipher.getInstance(""RSA/ECB/NOPADDING"");

        System.out.println(""provider: "" + cipher.getProvider().getName());

        cipher.init(Cipher.ENCRYPT_MODE, publicKey);

        System.out.println(""original secret key: "" + Base64.getEncoder().encodeToString(secretKey.getEncoded()) + "" \n secretkey encoded length: "" + secretKey.getEncoded().length);

        encryptedSecret = cipher.doFinal(secretKey.getEncoded());


        System.out.println(""encrypted secret: "" + Base64.getEncoder().encodeToString(encryptedSecret)); 

    }catch(Exception e)
    {
        e.printStackTrace();
    }
    return encryptedSecret;
}



public static SecretKey decryptSecretKey(byte[] encryptedKey, PrivateKey privateKey)
{
    SecretKey returnKey = null;
    try
    {
        Cipher cipher = Cipher.getInstance(""RSA/ECB/NOPADDING"");

        System.out.println(""provider: "" + cipher.getProvider().getName());

        cipher.init(Cipher.DECRYPT_MODE, privateKey);

        System.out.println(""encryptedkey length: "" + encryptedKey.length);

        byte [] encodedSecret = cipher.doFinal(encryptedKey);

        System.out.println(""encoded Secret after decrypt: "" + Base64.getEncoder().encodeToString(encodedSecret));

        returnKey = new SecretKeySpec(encodedSecret, 0, encodedSecret.length, ""PBEWithMD5AndDES"");

        System.out.println(""secret key: "" + Base64.getEncoder().encodeToString(returnKey.getEncoded()));

        System.out.println(""secret key length post decrypt: "" + returnKey.getEncoded().length);
    }catch(Exception e)
    {
        e.printStackTrace();
    }
    return returnKey;
}
</code></pre>

<p>The RSA algorithm is the only one I have gotten to work with my keys. If I specify the DiffieHellman alg. for the keypair, I am unable to encrypt/ decrypt at all. If anyone has any insight into what I have done wrong, any help would be greatly appreciated. When I call this in its current state, I start with a secretkey of this value = cGFzczEyMw== and end with a key of this value after encryption/ decryption</p>

<blockquote>
  <p>SvMNufKu2JA4hnNEwuWdOgJu6FxnNmuLYzxENhTsGgFzc/i3kQIXbeVaJUkJck918BLCnm2u2QZCyVvJjYFXMLBFga0Zq0WMxSbIZvPz1J/EDi9dpsAkbFhLyBWmdDyPr+w7DMDsqHwKuA8y/IRKVINWXVrp3Hbt8goFZ0nGIlKVzMdJbGhNi3HZSAw4R6fXZNKOJ3nN6wDldzYerEaz2MhJqnZ3Dz4psA6gskomhjp/G0yhsGO8pllMcgD0jzhL86RGrBhjj04Bj0ps3AAACkQLcCwisso8dWigvR8NX9dnI0C/gc6FqmNenWI1/AoPgmcRyFdlO7A2i9JXoSj+YQ==</p>
</blockquote>
","<p>You first should know what you are trying to do before doing it:</p>

<ul>
<li>RSA without padding is completely insecure;</li>
<li>you use a key for Password Based Encryption which only makes sense with - well - a password;</li>
<li>you come out with a DES key, which again is completely insecure;</li>
<li>you probably generate it with a salt, which is random, so the output is random.</li>
</ul>

<p>The whole protocol doesn't make sense. That you're trying to encrypt directly with DH (a scheme to perform key agreement) shows that you haven't studied crypto enough.</p>

<p>With cryptography it's not about getting things to work. It's about getting things <em>secure</em>. You cannot do that by just trying things out. Learn at least the basics of cryptography <em>then code</em>.</p>
","1974","<java><encryption><rsa><jce><secret-key>","0","2","2","2016-03-02 15:51:43","","0","3","1816580","","2016-03-01 19:57:32","2016-03-01 16:05:34",""
"35727710","Encrypt and decrypt a SecretKey with RSA public and private keys","<p>I am trying to encrypt a secretKey with my publicKey, then decrypt it somewhere else with the private key. I can encrypt and decrypt fine, However I am getting a completely different key back when I do this.</p>

<p>Here is the code that creates the public/ private keypair</p>

<pre><code>public static KeyPair generateKeyPair()
{
    KeyPair returnPair = null;
    try
    {
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"", ""SunJSSE"");

        System.out.println(""provider:"" + kpg.getProvider().getName());

        SecureRandom random = SecureRandom.getInstance(""SHA1PRNG"");

        kpg.initialize(1024, random);

        returnPair = kpg.generateKeyPair();

    }catch(Exception e)
    {
        e.printStackTrace();
    }
    return returnPair;
}
</code></pre>

<p>I specified the SunJSSE provider, although I am not getting any different result than when I ran with DiffieHellman from SunJCE or the RSA/ SunRSASign provider. I am new to java security so these concepts are still a little above my head. </p>

<p>Here is the code I use to generate the secret key</p>

<pre><code>    public static SecretKey generateSecretKey(String keyPassword)
{
    SecretKey key = null;
    try
    {
        SecretKeyFactory method = SecretKeyFactory.getInstance(""PBEWithMD5AndDES"");

        //System.out.println(""salt length: "" + new SaltIVManager().getSalt().length);

        PBEKeySpec spec = new PBEKeySpec(keyPassword.toCharArray(), new SaltIVManager().getSalt(), 10000, 128);

        key = method.generateSecret(spec);

        System.out.println(""generate secret key length: "" + key.getEncoded().length); 

    }catch(Exception e)
    {
        e.printStackTrace();
    }
    return key;
}
</code></pre>

<p>And here are the two methods I use to encrypt/ decrypt my secret key</p>

<pre><code>    public static byte[] encryptSecretKey(SecretKey secretKey, PublicKey publicKey)
{
    byte[] encryptedSecret = null;
    try
    {

        Cipher cipher = Cipher.getInstance(""RSA/ECB/NOPADDING"");

        System.out.println(""provider: "" + cipher.getProvider().getName());

        cipher.init(Cipher.ENCRYPT_MODE, publicKey);

        System.out.println(""original secret key: "" + Base64.getEncoder().encodeToString(secretKey.getEncoded()) + "" \n secretkey encoded length: "" + secretKey.getEncoded().length);

        encryptedSecret = cipher.doFinal(secretKey.getEncoded());


        System.out.println(""encrypted secret: "" + Base64.getEncoder().encodeToString(encryptedSecret)); 

    }catch(Exception e)
    {
        e.printStackTrace();
    }
    return encryptedSecret;
}



public static SecretKey decryptSecretKey(byte[] encryptedKey, PrivateKey privateKey)
{
    SecretKey returnKey = null;
    try
    {
        Cipher cipher = Cipher.getInstance(""RSA/ECB/NOPADDING"");

        System.out.println(""provider: "" + cipher.getProvider().getName());

        cipher.init(Cipher.DECRYPT_MODE, privateKey);

        System.out.println(""encryptedkey length: "" + encryptedKey.length);

        byte [] encodedSecret = cipher.doFinal(encryptedKey);

        System.out.println(""encoded Secret after decrypt: "" + Base64.getEncoder().encodeToString(encodedSecret));

        returnKey = new SecretKeySpec(encodedSecret, 0, encodedSecret.length, ""PBEWithMD5AndDES"");

        System.out.println(""secret key: "" + Base64.getEncoder().encodeToString(returnKey.getEncoded()));

        System.out.println(""secret key length post decrypt: "" + returnKey.getEncoded().length);
    }catch(Exception e)
    {
        e.printStackTrace();
    }
    return returnKey;
}
</code></pre>

<p>The RSA algorithm is the only one I have gotten to work with my keys. If I specify the DiffieHellman alg. for the keypair, I am unable to encrypt/ decrypt at all. If anyone has any insight into what I have done wrong, any help would be greatly appreciated. When I call this in its current state, I start with a secretkey of this value = cGFzczEyMw== and end with a key of this value after encryption/ decryption</p>

<blockquote>
  <p>SvMNufKu2JA4hnNEwuWdOgJu6FxnNmuLYzxENhTsGgFzc/i3kQIXbeVaJUkJck918BLCnm2u2QZCyVvJjYFXMLBFga0Zq0WMxSbIZvPz1J/EDi9dpsAkbFhLyBWmdDyPr+w7DMDsqHwKuA8y/IRKVINWXVrp3Hbt8goFZ0nGIlKVzMdJbGhNi3HZSAw4R6fXZNKOJ3nN6wDldzYerEaz2MhJqnZ3Dz4psA6gskomhjp/G0yhsGO8pllMcgD0jzhL86RGrBhjj04Bj0ps3AAACkQLcCwisso8dWigvR8NX9dnI0C/gc6FqmNenWI1/AoPgmcRyFdlO7A2i9JXoSj+YQ==</p>
</blockquote>
","<p>The issue in fact was the way in which I was storing/ retrieving my keys. I had used a keystore for the private and a file for the public. The way in which I retrieved these keys was causing them to become malformed, thus the failure in my cipher and the need to run with NOPADDING in order to get any sort of output. 
Here is the new storage code I am using for RSA keys- writing them to a file. </p>

<pre><code>    public static boolean saveKeys(Key privateKey, Key publicKey, char[] password, String alias)
{
    boolean saved = false;
    try
    {
        KeyPair kp = generateKeyPair();


        KeyFactory kf = KeyFactory.getInstance(""RSA"");

        if(privateKey != null)
        {

            File privKeyFile = new File(System.getProperty(""user.home"") + ""/.etc/privkey"");

            if(!privKeyFile.exists())
            {
                privKeyFile.createNewFile();
            }

            System.out.println(""private key: "" + Base64.getEncoder().encodeToString(kp.getPrivate().getEncoded()));

            RSAPrivateKeySpec pubSpec = kf.getKeySpec(kp.getPrivate(), RSAPrivateKeySpec.class);

            ObjectOutputStream oout = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(System.getProperty(""user.home"") + ""/.etc/privkey"")));

            oout.writeObject(pubSpec.getModulus());

            oout.writeObject(pubSpec.getPrivateExponent());

            oout.close();


        }if(publicKey != null)
        {

            File pubKeyFile = new File(System.getProperty(""user.home"") + ""/.etc/pubkey.pub"");

            if(!pubKeyFile.exists())
            {
                pubKeyFile.createNewFile();
            }

            System.out.println(""public key: "" + Base64.getEncoder().encodeToString(kp.getPublic().getEncoded()));

            RSAPublicKeySpec pubSpec = kf.getKeySpec(kp.getPublic(), RSAPublicKeySpec.class);

            ObjectOutputStream oout = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(System.getProperty(""user.home"") + ""/.etc/pubkey.pub"")));

            oout.writeObject(pubSpec.getModulus());

            oout.writeObject(pubSpec.getPublicExponent());

            oout.close();

        }



    }catch(Exception e)
    {
        e.printStackTrace();
    }
    return saved;
}
</code></pre>
","1974","<java><encryption><rsa><jce><secret-key>","0","0","2","2016-03-02 15:51:43","","0","3","1816580","","2016-03-01 19:57:32","2016-03-01 16:05:34",""
"6386650","Why is RC4 not able to handle large amount of encrypted data?","<p>I have following code that decrypts a file.</p>

<pre><code>package encryption;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class Decrypter {

    private static final String PASSWORD = ""t_9Y#i@eT[h3}-7!"";
    private static final String KEY_ALGORITHM = ""PBEWithMD5AndDES"";
    private static final String CIPHER_ALGORITHM = ""RC4""; //Using Salsa20 or HC256 solves the problem
    private static final String PROVIDER = ""BC"";

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());

        File inputFile = new File(args[0]);
        File outputFile = new File(args[1]);

        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KEY_ALGORITHM);
        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD.toCharArray()));

        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, key);

        InputStream inputStream = new FileInputStream(inputFile);
        OutputStream outputStream = new FileOutputStream(outputFile);

        CipherInputStream cipherInputStream = new CipherInputStream(inputStream, cipher);

        byte []byteBuffer = new byte[(int)inputFile.length()]; 
        cipherInputStream.read(byteBuffer);
        outputStream.write(byteBuffer); //Only 512bytes of decrypted data is written to file, the rest becomes null
        outputStream.close();
    }

}
</code></pre>

<p>My question is what am I doing wrong? Why doesn't RC4 decrypt a block of size more than 512 bytes.</p>
","<p><code>InputStream.read</code> only returns a certain amount of data, you are supposed to loop until the stream is empty. However I suggest you use commons-io's <code>org.apache.commons.io.FileUtils.copyInputStreamToFile(InputStream, File)</code> to copy the streams rather than rolling your own...</p>
","1942","<java><security><encryption><bouncycastle><jce>","0","0","3","2011-06-18 15:09:21","6396903","0","2","116509","","2011-06-17 13:56:34","2011-06-17 13:41:50",""
"6386650","Why is RC4 not able to handle large amount of encrypted data?","<p>I have following code that decrypts a file.</p>

<pre><code>package encryption;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class Decrypter {

    private static final String PASSWORD = ""t_9Y#i@eT[h3}-7!"";
    private static final String KEY_ALGORITHM = ""PBEWithMD5AndDES"";
    private static final String CIPHER_ALGORITHM = ""RC4""; //Using Salsa20 or HC256 solves the problem
    private static final String PROVIDER = ""BC"";

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());

        File inputFile = new File(args[0]);
        File outputFile = new File(args[1]);

        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KEY_ALGORITHM);
        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD.toCharArray()));

        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, key);

        InputStream inputStream = new FileInputStream(inputFile);
        OutputStream outputStream = new FileOutputStream(outputFile);

        CipherInputStream cipherInputStream = new CipherInputStream(inputStream, cipher);

        byte []byteBuffer = new byte[(int)inputFile.length()]; 
        cipherInputStream.read(byteBuffer);
        outputStream.write(byteBuffer); //Only 512bytes of decrypted data is written to file, the rest becomes null
        outputStream.close();
    }

}
</code></pre>

<p>My question is what am I doing wrong? Why doesn't RC4 decrypt a block of size more than 512 bytes.</p>
","<p>RC4 is a stream cipher, so it can decode any amount of data. Your issue is that InputStreams are not read in massive chunks. Normally you loop around the read call until there is no more data left to read and use a small buffer. See the <a href=""http://download.oracle.com/javase/1.4.2/docs/api/java/io/InputStream.html#read(byte[])"" rel=""noreferrer"">documentation of read()</a>.</p>

<p>This could be implemented as</p>

<pre><code>while(true) {
    int numRead = cipherInputStream.read(byteBuffer);
    if(numRead == -1)
        break;
    outputStream.write(byteBuffer, 0, numRead);
}
</code></pre>
","1942","<java><security><encryption><bouncycastle><jce>","0","7","3","2011-06-18 15:09:21","6396903","0","2","116509","","2011-06-17 13:56:34","2011-06-17 13:41:50",""
"6386650","Why is RC4 not able to handle large amount of encrypted data?","<p>I have following code that decrypts a file.</p>

<pre><code>package encryption;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

import org.bouncycastle.jce.provider.BouncyCastleProvider;

public class Decrypter {

    private static final String PASSWORD = ""t_9Y#i@eT[h3}-7!"";
    private static final String KEY_ALGORITHM = ""PBEWithMD5AndDES"";
    private static final String CIPHER_ALGORITHM = ""RC4""; //Using Salsa20 or HC256 solves the problem
    private static final String PROVIDER = ""BC"";

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());

        File inputFile = new File(args[0]);
        File outputFile = new File(args[1]);

        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(KEY_ALGORITHM);
        SecretKey key = keyFactory.generateSecret(new PBEKeySpec(PASSWORD.toCharArray()));

        Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, key);

        InputStream inputStream = new FileInputStream(inputFile);
        OutputStream outputStream = new FileOutputStream(outputFile);

        CipherInputStream cipherInputStream = new CipherInputStream(inputStream, cipher);

        byte []byteBuffer = new byte[(int)inputFile.length()]; 
        cipherInputStream.read(byteBuffer);
        outputStream.write(byteBuffer); //Only 512bytes of decrypted data is written to file, the rest becomes null
        outputStream.close();
    }

}
</code></pre>

<p>My question is what am I doing wrong? Why doesn't RC4 decrypt a block of size more than 512 bytes.</p>
","<p>@Michael Lowman has the correct answer, but I'd thought I'd show another way just to advertise a feature of the DataInputStream class.</p>

<p>You can the read-it-all-in-one-go behavior, like a perl slurp, by using the <code>DataInputStream.readFully()</code> method. In your example, you can read in the bytes with this method, then write them out and decrypt by using as CipherOutputStream instead of a CipherInputStream.</p>

<p>Consider the following fragment as an example:</p>

<pre><code>    byte[] byteBuffer = new byte[(int) inputFile.length()];
    DataInputStream dis = new DataInputStream(inputStream);
    dis.readFully(byteBuffer);
    dis.close();
    CipherOutputStream cos = new CipherOutputStream(outputStream, cipher);
    cos.write(byteBuffer);
    cos.close();
</code></pre>
","1942","<java><security><encryption><bouncycastle><jce>","0","2","3","2011-06-18 15:09:21","6396903","0","2","116509","","2011-06-17 13:56:34","2011-06-17 13:41:50",""
"2582220","JCE provider implementation","<p>I need to write a java JCE provider. I have been looking in the net for several days and I could not find solution. Could you please give me some useful informaion.
Regards,</p>
","<p>Documentation is <a href=""http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/HowToImplAProvider.html"" rel=""nofollow noreferrer"">here</a> and <a href=""http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html"" rel=""nofollow noreferrer"">here</a>, but why would you want to do this? Most of the mainstream cryptographic algorithms are implemented already either by Sun or <a href=""http://www.bouncycastle.org/java.html"" rel=""nofollow noreferrer"">BouncyCastle</a>.</p>
","1918","<java><jce>","1","2","2","2018-07-09 13:00:18","2582267","0","","247003","","2010-04-06 12:50:45","2010-04-06 01:52:25",""
"2582220","JCE provider implementation","<p>I need to write a java JCE provider. I have been looking in the net for several days and I could not find solution. Could you please give me some useful informaion.
Regards,</p>
","<p>Just to add to ig's answer, note that the Sun/Oracle JDK requires the JCE provider to be signed by Sun, Oracle or IBM CA. This isn't something you can achieve easily (if at all).</p>

<p>So if it's just for educational purposes, you can follow the <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/HowToImplAProvider.html"" rel=""nofollow noreferrer"">documentation</a> for development and use OpenJDK for testing, because it does not require the JCE provider to be signed.
There's also a <a href=""https://github.com/ojdkbuild/ojdkbuild/releases"" rel=""nofollow noreferrer"">Windows OpenJDK version</a> available.</p>
","1918","<java><jce>","1","0","2","2018-07-09 13:00:18","2582267","0","","247003","","2010-04-06 12:50:45","2010-04-06 01:52:25",""
"10366833","Exporting Java Program that uses Unlimited JCE Policy (Encryption)","<p>I have made a Java application that uses the PBKDF2WithHmacSHA1 encryption algorithm and I was required to download the Unlimited JCE Policy jar. I put both of the JAR files where there are supposed to be (I put them in the JRE security folder of my JDK), named correctly, and so it works in Eclipse. </p>

<p>When I export it however, it only works when I run the JAR file from command line. I have done some debugging and when I double click the executable/runnable JAR it falls in the encryption/decryption methods as they throw Exceptions.</p>

<p>So, if anybody can tell me why this is and more over, how to solve the issue I would be greatful as this is very important!</p>

<p>Thanks in advance</p>
","<p>Ok, so it looks like the only way to distribute the unlimited JCE policy is to unpack the required <code>.jar</code>s and overwrite the existing ones on users' computers, either during installation or upon first run of the application. But even that appears to be a hit or miss process.</p>

<p>The alternative route that a lot of people seem to be taking is using APIs such as BouncyCastle which supports higher levels of encryption and <em>can</em> be freely and easily distributed, even with commercial applications.</p>

<p>I imagine that Oracle made it this way because of restrictions previously imposed of certain countries that now seem to have been lifted. I might be wrong, but I have nevertheless heard that Java is working on a better implementation to solve this problem!</p>
","1892","<java><eclipse><jar><export><jce>","1","1","1","2012-07-27 19:58:33","11694862","4","1","","","","2012-04-28 19:31:07",""
"14263950","padding error when decrypting data using AES-CBC-PKCS5Padding","<p>I wrote two functions as follows which encrypt and decrypt the data.</p>

<pre><code>public static void encrypt() throws Exception {
    // Add the BouncyCastle Provider
    //Security.addProvider(new BouncyCastleProvider());


// Generate the key
byte[] keyBytes = ""AAAAAAAAAAAAAAAA"".getBytes();
SecretKeySpec   key = new SecretKeySpec(keyBytes, ""AES"");

// Generate the IV
byte[] ivBytes  = ""AAAAAAAAAAAAAAAA"".getBytes();
IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);

// Create the cipher object and initialize it
Cipher          cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);

// Read all bytes from a file into a bytes array
byte[] inputBytes = GCM.readFile(""input"");
byte[] cipherBytes = cipher.doFinal(inputBytes);

BufferedOutputStream  outputStream = new BufferedOutputStream(new FileOutputStream(""output.enc""));
outputStream.write(cipherBytes);

outputStream.close();   
}

public static void decrypt() throws Exception {
    // Add the BouncyCastle Provider
     //Security.addProvider(new BouncyCastleProvider());

 // Generate the key
 byte[] keyBytes = ""AAAAAAAAAAAAAAAA"".getBytes();
 SecretKeySpec   key = new SecretKeySpec(keyBytes, ""AES"");

 // Generate the IV
 byte[] ivBytes  = ""AAAAAAAAAAAAAAAA"".getBytes();
 IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);

 // Create the cipher object and initialize it
 Cipher          cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
 cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);

 // Read all bytes from a file into a bytes array
 byte[] cipherBytes = GCM.readFile(""ouput.enc"");
 byte[] decBytes = cipher.doFinal(cipherBytes);

 BufferedOutputStream  outputStream = new BufferedOutputStream(new FileOutputStream(""regen.plain""));
 outputStream.write(decBytes);
 outputStream.close();   
}
</code></pre>

<p>I realize that the code has the key set as <code>""AAAAAAAAAAAAAAAA"".getBytes()</code> ; however please bear with me as this is just an example.</p>

<p>When I run the program I get the following stack trace :-</p>

<pre><code>Exception in thread ""main"" javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher
    at com.sun.crypto.provider.SunJCE_f.b(DashoA13*..)
    at com.sun.crypto.provider.SunJCE_f.b(DashoA13*..)
    at com.sun.crypto.provider.AESCipher.engineDoFinal(DashoA13*..)
    at javax.crypto.Cipher.doFinal(DashoA13*..)
    at GCM.decrypt(GCM.java:80)
    at GCM.main(GCM.java:90)
</code></pre>

<p>I'm having trouble figuring out why I'm encountering this error. Any hints on how I could solve the issue?</p>

<p>[EDIT]
It seems that when I write out data there are 16 bytes in all but only 15 bytes when I read it back in.</p>
","<p>Possible problem (unless it is a typo) you write to <code>output.enc</code> but read from <code>ouput.enc</code>.</p>
","1880","<java><encryption><aes><jce>","0","1","2","2013-01-11 08:03:33","14274008","0","2","","user277465","2013-01-10 17:51:49","2013-01-10 17:38:47",""
"14263950","padding error when decrypting data using AES-CBC-PKCS5Padding","<p>I wrote two functions as follows which encrypt and decrypt the data.</p>

<pre><code>public static void encrypt() throws Exception {
    // Add the BouncyCastle Provider
    //Security.addProvider(new BouncyCastleProvider());


// Generate the key
byte[] keyBytes = ""AAAAAAAAAAAAAAAA"".getBytes();
SecretKeySpec   key = new SecretKeySpec(keyBytes, ""AES"");

// Generate the IV
byte[] ivBytes  = ""AAAAAAAAAAAAAAAA"".getBytes();
IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);

// Create the cipher object and initialize it
Cipher          cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);

// Read all bytes from a file into a bytes array
byte[] inputBytes = GCM.readFile(""input"");
byte[] cipherBytes = cipher.doFinal(inputBytes);

BufferedOutputStream  outputStream = new BufferedOutputStream(new FileOutputStream(""output.enc""));
outputStream.write(cipherBytes);

outputStream.close();   
}

public static void decrypt() throws Exception {
    // Add the BouncyCastle Provider
     //Security.addProvider(new BouncyCastleProvider());

 // Generate the key
 byte[] keyBytes = ""AAAAAAAAAAAAAAAA"".getBytes();
 SecretKeySpec   key = new SecretKeySpec(keyBytes, ""AES"");

 // Generate the IV
 byte[] ivBytes  = ""AAAAAAAAAAAAAAAA"".getBytes();
 IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);

 // Create the cipher object and initialize it
 Cipher          cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
 cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);

 // Read all bytes from a file into a bytes array
 byte[] cipherBytes = GCM.readFile(""ouput.enc"");
 byte[] decBytes = cipher.doFinal(cipherBytes);

 BufferedOutputStream  outputStream = new BufferedOutputStream(new FileOutputStream(""regen.plain""));
 outputStream.write(decBytes);
 outputStream.close();   
}
</code></pre>

<p>I realize that the code has the key set as <code>""AAAAAAAAAAAAAAAA"".getBytes()</code> ; however please bear with me as this is just an example.</p>

<p>When I run the program I get the following stack trace :-</p>

<pre><code>Exception in thread ""main"" javax.crypto.IllegalBlockSizeException: Input length must be multiple of 16 when decrypting with padded cipher
    at com.sun.crypto.provider.SunJCE_f.b(DashoA13*..)
    at com.sun.crypto.provider.SunJCE_f.b(DashoA13*..)
    at com.sun.crypto.provider.AESCipher.engineDoFinal(DashoA13*..)
    at javax.crypto.Cipher.doFinal(DashoA13*..)
    at GCM.decrypt(GCM.java:80)
    at GCM.main(GCM.java:90)
</code></pre>

<p>I'm having trouble figuring out why I'm encountering this error. Any hints on how I could solve the issue?</p>

<p>[EDIT]
It seems that when I write out data there are 16 bytes in all but only 15 bytes when I read it back in.</p>
","<p>On your update: Well, that's easy then, fix the part that reads the file because the ciphertext needs to be N * blocksize, thus 16 bytes. I don't see any other blatant errors.</p>
","1880","<java><encryption><aes><jce>","0","1","2","2013-01-11 08:03:33","14274008","0","2","","user277465","2013-01-10 17:51:49","2013-01-10 17:38:47",""
"11256915","What is the correct random algorithm to use here?","<p>If I use <code>MD5WithRSAEncryption</code> as a signature algorithm what is the corresponding random algorithm?<br>
I tried <code>MD5PRNG</code> but I got:   </p>

<blockquote>
  <p>java.security.NoSuchAlgorithmException: SecureRandom MD5PRNG
  implementation not found</p>
</blockquote>

<p>What is the proper random algorithm to be used here to initialize a  <code>KeyPairGenerator</code>?<br>
Like <code>SHA1PRNG</code> when we use <code>SHA256WithRSAEncryption</code>  </p>

<p>I mean: <code>SHA256WithRSAEncryption</code> is a <code>key pair algorithm</code>, while <code>SHA1PRNG</code> is a <code>random generator</code> to be used by the keypair algorithm. E.g. <code>keyPairGenerator.initialize(keySize, secureRandom);</code><br>
(where <code>keyPairGenerator</code> is of class <code>KeyPairGenerator</code>)<br>
Are they somehow depend on proper pairing?I.e. can I use MD5WithRSAEncryption with SHA1PRNG?</p>
","<p>The hash algorithm, if any, underlying the deterministic random bit generator (DRBG) doesn't matter. </p>

<p>The output of a DRBG is statistically random; if your were able to determine anything about the source of the bits by examining the output, it wouldn't be suitable for cryptographic use.</p>

<p>By the way, the RSA signature algorithm uses a RNG when using the RSA-PSS scheme. Older RSA signatures are deterministic (and this is a weakness).</p>

<p>What <em>does</em> matter is the effective strength of an algorithm. For example, you wouldn't want to use SHA-1 with a 3072-bit RSA signature key; the hash not as strong as the encryption algorithm using that key. DRBGs can be <a href=""http://csrc.nist.gov/publications/nistpubs/800-90A/SP800-90A.pdf"" rel=""nofollow"">classified by their strength</a> as well. The security strength of a DRBG indicates how much computation is needed predict its output without being given its internal state.</p>

<p>The security strength of a good hash-based DRBG is the same as that of the underlying hash function. To find this out, look at <a href=""http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf"" rel=""nofollow"">NIST SP 800&#x2011;57 Part&nbsp;1, Table&nbsp;3.</a> For strong security, 112 bits is the minimum, with 128 bits or more being encouraged. That means using a DRBG based on SHA-224 or SHA-256, with a 2048- or 3072-bit RSA key, respectively.</p>
","1860","<java><security><random><bouncycastle><jce>","1","3","2","2013-09-23 16:06:19","","2","","1197249","","2012-06-29 06:35:52","2012-06-29 06:12:58",""
"11256915","What is the correct random algorithm to use here?","<p>If I use <code>MD5WithRSAEncryption</code> as a signature algorithm what is the corresponding random algorithm?<br>
I tried <code>MD5PRNG</code> but I got:   </p>

<blockquote>
  <p>java.security.NoSuchAlgorithmException: SecureRandom MD5PRNG
  implementation not found</p>
</blockquote>

<p>What is the proper random algorithm to be used here to initialize a  <code>KeyPairGenerator</code>?<br>
Like <code>SHA1PRNG</code> when we use <code>SHA256WithRSAEncryption</code>  </p>

<p>I mean: <code>SHA256WithRSAEncryption</code> is a <code>key pair algorithm</code>, while <code>SHA1PRNG</code> is a <code>random generator</code> to be used by the keypair algorithm. E.g. <code>keyPairGenerator.initialize(keySize, secureRandom);</code><br>
(where <code>keyPairGenerator</code> is of class <code>KeyPairGenerator</code>)<br>
Are they somehow depend on proper pairing?I.e. can I use MD5WithRSAEncryption with SHA1PRNG?</p>
","<p>The only issue with SHA1PRNG is that the keyspace is for some reason limited to 20 bytes.  This is totally unnecessary since the hash can be performed on a virtually unlimited amount of text.  It is not clear to me why there is a limit on the keysize for this generator.  The good news it is easy to copy the source code and remove that limitation. The bad news is that it is then not compatible with the standard implementation.</p>
","1860","<java><security><random><bouncycastle><jce>","1","2","2","2013-09-23 16:06:19","","2","","1197249","","2012-06-29 06:35:52","2012-06-29 06:12:58",""
"11012191","Getting error while sending Push Notification to iPhone using Java-PNS?","<p>I am using javaPNS_2.2.jar file to send push notification message to iPhone device.</p>

<p>My Code is:</p>

<pre><code>PushNotificationPayload payload = PushNotificationPayload.complex();

/* Customize the payload */ 
payload.addAlert(""Hello World!"");
payload.addCustomDictionary(""mykey1"", ""My Value 1"");
payload.addCustomDictionary(""mykey2"", 2);

/* Push your custom payload */
String keystore = ""C:/1.0Eywa_Baba/PushNotificationKey.p12"";
String password = ""Eywa@12"";
boolean production = false;
String devices = ""C81DD339-F5C1-529F-BEC4-6C8622BA0BFD"";
List&lt;PushedNotification&gt; notifications = Push.payload(payload, 
                                                      keystore, 
                                                      password, 
                                                      production, 
                                                      devices);
</code></pre>

<p>However, I am getting the error:</p>

<pre><code>log4j:WARN No appenders could be found for logger (javapns.notification.Payload).
log4j:WARN Please initialize the log4j system properly.
Exception in thread ""main"" java.lang.NoClassDefFoundError: org/bouncycastle/jce/provider/BouncyCastleProvider
  at javapns.notification.PushNotificationManager.initializeConnection(PushNotificationManager.java:105)
  at javapns.Push.sendPayload(Push.java:171)
  at javapns.Push.payload(Push.java:149) 
  at com.example.SendMSG.send(SendMSG.java:35)
  at com.example.APNDemo1.main(APNDemo1.java:20)
Caused by: java.lang.ClassNotFoundException: org.bouncycastle.jce.provider.BouncyCastleProvider
  at java.net.URLClassLoader$1.run(Unknown Source)
  at java.net.URLClassLoader$1.run(Unknown Source)
  at java.security.AccessController.doPrivileged(Native Method)
  at java.net.URLClassLoader.findClass(Unknown Source)
  at java.lang.ClassLoader.loadClass(Unknown Source)
  at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
  at java.lang.ClassLoader.loadClass(Unknown Source)
</code></pre>

<p>What is causing this exception?</p>
","<p>Include the bouncycastle library in your project.</p>
","1810","<java><iphone><apple-push-notifications><bouncycastle><jce>","0","0","2","2014-05-28 07:09:20","","0","","1212960","","2012-06-13 09:48:15","2012-06-13 09:41:47",""
"11012191","Getting error while sending Push Notification to iPhone using Java-PNS?","<p>I am using javaPNS_2.2.jar file to send push notification message to iPhone device.</p>

<p>My Code is:</p>

<pre><code>PushNotificationPayload payload = PushNotificationPayload.complex();

/* Customize the payload */ 
payload.addAlert(""Hello World!"");
payload.addCustomDictionary(""mykey1"", ""My Value 1"");
payload.addCustomDictionary(""mykey2"", 2);

/* Push your custom payload */
String keystore = ""C:/1.0Eywa_Baba/PushNotificationKey.p12"";
String password = ""Eywa@12"";
boolean production = false;
String devices = ""C81DD339-F5C1-529F-BEC4-6C8622BA0BFD"";
List&lt;PushedNotification&gt; notifications = Push.payload(payload, 
                                                      keystore, 
                                                      password, 
                                                      production, 
                                                      devices);
</code></pre>

<p>However, I am getting the error:</p>

<pre><code>log4j:WARN No appenders could be found for logger (javapns.notification.Payload).
log4j:WARN Please initialize the log4j system properly.
Exception in thread ""main"" java.lang.NoClassDefFoundError: org/bouncycastle/jce/provider/BouncyCastleProvider
  at javapns.notification.PushNotificationManager.initializeConnection(PushNotificationManager.java:105)
  at javapns.Push.sendPayload(Push.java:171)
  at javapns.Push.payload(Push.java:149) 
  at com.example.SendMSG.send(SendMSG.java:35)
  at com.example.APNDemo1.main(APNDemo1.java:20)
Caused by: java.lang.ClassNotFoundException: org.bouncycastle.jce.provider.BouncyCastleProvider
  at java.net.URLClassLoader$1.run(Unknown Source)
  at java.net.URLClassLoader$1.run(Unknown Source)
  at java.security.AccessController.doPrivileged(Native Method)
  at java.net.URLClassLoader.findClass(Unknown Source)
  at java.lang.ClassLoader.loadClass(Unknown Source)
  at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
  at java.lang.ClassLoader.loadClass(Unknown Source)
</code></pre>

<p>What is causing this exception?</p>
","<p>Include the bcprov-jdk15-140 jar in classpath of your project.</p>
","1810","<java><iphone><apple-push-notifications><bouncycastle><jce>","0","1","2","2014-05-28 07:09:20","","0","","1212960","","2012-06-13 09:48:15","2012-06-13 09:41:47",""
"40659255","Spring Boot app does not start due to SSL error on Boxfuse Dev VM","<p>I have a Spring Boot application with following SSL configuration:</p>

<p><em>application.yml</em></p>

<pre><code>server:
  port: 443
  ssl:
    key-store: classpath:keys/${BOXFUSE_ENV}.p12
    key-store-type: PKCS12
    key-alias: mydomain.com
    key-store-password: ${X_KEYSTORE_PASSWORD}
</code></pre>

<p>The correct environment-specific keystores are present in classpath and accessible after launch, which has been verified by manual launch from console with following PowerShell script:</p>

<p><em>dev.ps1</em></p>

<pre><code>$env:BOXFUSE_ENV=""dev""
$env:X_KEYSTORE_PASSWORD=""correctpassword""

java -jar target\myapp-1.0.0.12314.jar
</code></pre>

<p>After manual start application successfully launches at localhost and available both in production and dev mode with correct certificates.
Now, I try to launch it in PowerShell as Boxfuse app with following command:</p>

<pre><code>boxfuse run target\myapp-1.0.0.12314.jar -env=dev ""-envvars.X_KEYSTORE_PASSWORD=correctpassword""
</code></pre>

<p>App fails to start with this stacktrace:</p>

<pre><code>vb-c2b995f3 -&gt; 2016-11-17 15:31:56.659 ERROR 636 --- [           main] o.apache.catalina.core.StandardService   : Failed
 to start connector [Connector[HTTP/1.1-443]]
vb-c2b995f3 -&gt;
vb-c2b995f3 -&gt; org.apache.catalina.LifecycleException: Failed to start component [Connector[HTTP/1.1-443]]
vb-c2b995f3 -&gt;  at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:158)
vb-c2b995f3 -&gt;  at org.apache.catalina.core.StandardService.addConnector(StandardService.java:225)
vb-c2b995f3 -&gt;  at org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer.addPreviouslyRemovedC
onnectors(TomcatEmbeddedServletContainer.java:234)
...
vb-c2b995f3 -&gt; Caused by: java.lang.IllegalArgumentException: java.io.IOException: DerInputStream.getLength(): lengthTag
=109, too big.
vb-c2b995f3 -&gt;  at org.apache.tomcat.util.net.AbstractJsseEndpoint.createSSLContext(AbstractJsseEndpoint.java:103)
vb-c2b995f3 -&gt;  at org.apache.tomcat.util.net.AbstractJsseEndpoint.initialiseSsl(AbstractJsseEndpoint.java:81)
...
vb-c2b995f3 -&gt; Caused by: java.io.IOException: DerInputStream.getLength(): lengthTag=109, too big.
vb-c2b995f3 -&gt;  at sun.security.util.DerInputStream.getLength(DerInputStream.java:561)
vb-c2b995f3 -&gt;  at sun.security.util.DerValue.init(DerValue.java:365)
vb-c2b995f3 -&gt;  at sun.security.util.DerValue.&lt;init&gt;(DerValue.java:320)
vb-c2b995f3 -&gt;  at sun.security.pkcs12.PKCS12KeyStore.engineLoad(PKCS12KeyStore.java:1914)
</code></pre>

<p>What makes so big difference between the two ways to launch the app? How can I fix it? </p>

<p>UPD: the issue was solved by converting the keystores to JKS format and setting key-store-type to PKCS12.</p>

<p>UPD2: the root cause of the issue is here:
<a href=""https://bz.apache.org/bugzilla/show_bug.cgi?id=60450"" rel=""nofollow noreferrer"">https://bz.apache.org/bugzilla/show_bug.cgi?id=60450</a></p>
","<p>The key length could point to JDK unlimited strength crypto which may need to be enabled. See <a href=""https://boxfuse.com/docs/payloads/springboot#jce"" rel=""nofollow noreferrer"">https://boxfuse.com/docs/payloads/springboot#jce</a></p>
","1810","<java><ssl><spring-boot><jce><boxfuse>","2","1","1","2016-12-07 15:03:33","40667415","0","1","1435969","","2016-12-07 15:03:33","2016-11-17 15:48:22",""
"14878037","Why JCE in Joomla delete part of code in my code snippet? (JCE think that it is a tag)","<p>I am using a plugin named CodeHighlighter to insert code snippet inside articles in my Joomla 2.5 website.</p>

<p>As editor I use JCE.</p>

<p>To insert code snippet I do the following thing in JCE editor I do the following operation:</p>

<p>I swap to the HTML code view and, for example, I insert something like this:</p>

<pre><code>&lt;pre class=""brush:java""&gt;
package com.tutorialspoint;

import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextStartedEvent;

public class CStartEventHandler 
    implements ApplicationListener&lt;ContextStartedEvent&gt;{

    public void onApplicationEvent(ContextStartedEvent event) {
         System.out.println(""ContextStartedEvent Received"");
    }
}
&lt;/pre&gt;
</code></pre>

<p>Ok...this work well except for this part of code: <strong></strong> which is eliminated by JCE (I have try using a no WYSIWIG editor and there is no problem)</p>

<p>So the problem seems to be that JCE see <strong></strong> as a <strong>tag</strong> and not as a legal part of my Java code snippet, and so delete it...</p>

<p>Do you have some idea about how say to JCE to don't delete this part of code?</p>
","<p>You can try the following:</p>

<pre><code>1. Go to Global Configuration
2. Click ""Text Filters"" Tab.
3. Change ""Super Users"" filter type to ""no filtering""
</code></pre>

<p>This will solve problems such as these.</p>

<ul>
<li>Youtube videos wont work in Joomla (code gets deleted)</li>
<li>JCE TinyMCE code cleanup deletes my styles code and scripts.</li>
<li>Inline document styles (css) gets removed by JCE or TinyMCE in Joomla </li>
<li>Code cleanup problems in JCE / TinMCE</li>
<li>Flash scripts being removed by JCE code cleanup</li>
</ul>
","1793","<php><joomla><content-management-system><joomla2.5><jce>","1","1","1","2013-02-14 22:04:30","","0","","","","","2013-02-14 15:17:46",""
"2223104","S/MIME in Java without JCE","<p>I'm trying to write an applet that would sign e-mail with S/MIME.</p>

<p>Obviously I want to make one small jar with only the required stuff.
Obviously the Java way of doing that involves having a huge sacred signed Bouncy Castle JCE jar around.</p>

<p>The question is: What's the easiest way of getting S/MIME without touching JCE and having it complain about ""authenticating"" ""providers""? Maybe there is a S/MIME implementation that doesn't depend on JCE? Maybe it is possible to use Bouncy Castle S/MIME using their lightweight API without touching JCE? Maybe there is any other way?</p>

<p>It is obvious to me that nothing can prevent a pure-java open source crypto algorithms from working regardless of whether Sun approves, so it's not a question of theoretical possibility, rather: which way is the least painful?</p>

<p>Of course, I can always go ugly early by grabbing Bouncy Castle pure-java JCE implementation, renaming its packages to java.security1, and making any changes I want - but this way looks too painful right now.</p>

<p><em>UPDATE</em> My current problem with using Bouncy Castle directly: I try to load keys from keystore, which involves using SecretKeyFactory, which in turn rejects my Bouncy Castle build.</p>
","<p>BC S/MIME is written over the CMS package, so the question really devolves to modifying the CMS package so all the crypto is done using the light-weight classes.</p>

<p>Something similar has been done already, more-or-less successfully, for the .NET version of Bouncy Castle. We're trying (admittedly it's a slow process) to refactor the Java version so the CMS stuff can work with either JCE or lightweight. The same issue affects other parts of the BC API too e.g. the PKCS#12 keystore is built into the JCE provider, the OpenPGP package is written to JCE, etc. The .NET ports of these rewrote them to the light-weight API also.</p>

<p>Your problem is probably simpler than the general case though. Presumably you only need the CMSSignedDataGenerator and supporting classes. You probably don't need all the myriad variations of addSigner or generate. If you just decide on your digest/signature algorithms up front, then all the provider stuff will be easy to replace with hardcoded calls to specific lightweight implementations.</p>

<p>Instead of a keystore, maybe you could get away with just storing a single private key in a PKCS#8 file (PEM encoded perhaps). Similarly for the certificate.</p>
","1790","<java><bouncycastle><jce><smime>","2","2","2","2010-02-16 14:49:37","2273694","0","1","36498","","2010-02-08 16:40:15","2010-02-08 16:33:09",""
"2223104","S/MIME in Java without JCE","<p>I'm trying to write an applet that would sign e-mail with S/MIME.</p>

<p>Obviously I want to make one small jar with only the required stuff.
Obviously the Java way of doing that involves having a huge sacred signed Bouncy Castle JCE jar around.</p>

<p>The question is: What's the easiest way of getting S/MIME without touching JCE and having it complain about ""authenticating"" ""providers""? Maybe there is a S/MIME implementation that doesn't depend on JCE? Maybe it is possible to use Bouncy Castle S/MIME using their lightweight API without touching JCE? Maybe there is any other way?</p>

<p>It is obvious to me that nothing can prevent a pure-java open source crypto algorithms from working regardless of whether Sun approves, so it's not a question of theoretical possibility, rather: which way is the least painful?</p>

<p>Of course, I can always go ugly early by grabbing Bouncy Castle pure-java JCE implementation, renaming its packages to java.security1, and making any changes I want - but this way looks too painful right now.</p>

<p><em>UPDATE</em> My current problem with using Bouncy Castle directly: I try to load keys from keystore, which involves using SecretKeyFactory, which in turn rejects my Bouncy Castle build.</p>
","<p>It's pretty straightforward to sign messages without using JCE.
The real problem was reading PKCS#12 keys.</p>

<p>I did this:
 * Copied JDKPKCS12KeyStore class over.
 * Everywhere in it, replaced Security.getInstance() with bcProvider.getService().newInstance() (which returns Spi-s)
 * In those Spi-s (in BC sources) made required methods public instead of protected.</p>

<p>It looks like a hack, but seems to actually work.</p>
","1790","<java><bouncycastle><jce><smime>","2","1","2","2010-02-16 14:49:37","2273694","0","1","36498","","2010-02-08 16:40:15","2010-02-08 16:33:09",""
"4004886","Encrypt with PHP and Decrypt with Java","<p>I have to write a program to decrypt a message using JAVA. The message is encrypted using Triple DES / ECB implemented in PHP. I have tried a few different settings on the algorithm, mode, and padding schema. I do not get the correct result. What is missing? </p>

<p>Here is the PHP program that encrypt the message:</p>

<pre><code>$config_mcrypt_ecb_key = ""12345678901234567890"";
$data = ""hello"";
echo ""Data Before Encrypt: "" . $data . ""\n"";
$td = mcrypt_module_open('tripledes', '', 'ecb', '');
$iv = mcrypt_create_iv (mcrypt_enc_get_iv_size($td), MCRYPT_ENCRYPT);
mcrypt_generic_init($td, $config_mcrypt_ecb_key, $iv);
$data_encrypt = bin2hex(mcrypt_generic($td, $data));
mcrypt_generic_deinit($td);
mcrypt_module_close($td);
echo ""Data After Encrypt: "" . $data_encrypt . ""\n"";
</code></pre>

<p>And below is the java program to decrypt the message: (I'm using the BouncyCastleProvider)</p>

<pre><code>import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import java.security.*;

public class DecryptionTest {
    public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, NoSuchProviderException {
        String password = ""12345678901234567890"";
        Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
        SecretKeySpec key = new SecretKeySpec(password.getBytes(), ""ECB"");
        Cipher m_decrypter = Cipher.getInstance(""DESede/ECB/ZeroBytePadding"");
        m_decrypter.init(Cipher.DECRYPT_MODE, key);
        byte[] decryptedText = m_decrypter.doFinal(""bdf0baf948bff7e7"".getBytes());
        System.out.println(new String(decryptedText));
    }
}
</code></pre>
","<p>You don't seem to be using an IV (Initialisation Vector) when performing the decrypt.  My understanding is that <code>mcrypt_create_iv()</code> will generate a random IV, so you need to store that with the encrypted data so that it can be used when decrypting.</p>

<p>Alternatively (if you're happy with using a weaker encryption) omit the IV from your PHP side. </p>
","1710","<encryption><mcrypt><jce><des><ecb>","2","0","1","2010-11-01 07:29:25","","0","3","","","","2010-10-23 16:14:20",""
"11208380","Why MD5 is required for JCE initialization","<p>I am experimenting on enabling FIPS 180-3 on my java application. FIPS 180-3 allows only usage of 5 secure [hashes] (http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf) , MD5 is not one among them. Hence i am trying to programatically remove MD5 algorithms from the Sun provider. This is the sample code.</p>

<hr>

<pre><code>public static void main(String[] args) throws Exception {
    Security.removeProvider(""SUN"");
    Sun sun = new Sun();
    sun.remove(""MessageDigest.MD5""); //Comment and it will work !!!
    Security.addProvider(sun);
    Cipher ciph = Cipher.getInstance(""AES"");                
}   
</code></pre>

<hr>

<p>But this is throwing the following exception. If you comment ""sun.remove(.."" the program works fine. If i remove MD2, instead of MD5 then also it works fine.</p>

<p>To me it looks like the jre libs are using MD5 for their signing, but i checked jre/lib/ext/sunjce_provider.jar signer and its using sha1.</p>

<p>Any idea why my code is failing with this error?</p>

<p>Exception in thread ""main"" java.lang.ExceptionInInitializerError
    at javax.crypto.Cipher.getInstance(DashoA13*..)
    at TestRemoveMD5.main(TestRemoveMD5.java:20)</p>

<p>Caused by: java.lang.SecurityException: Cannot set up certs for trusted CAs
    at javax.crypto.SunJCE_b.(DashoA13*..)
    ... 3 more</p>

<p>Caused by: java.lang.SecurityException: Signature classes have been tampered with
    at javax.crypto.SunJCE_b.d(DashoA13*..)
    at javax.crypto.SunJCE_b.c(DashoA13*..)
    at javax.crypto.SunJCE_b$1.run(DashoA13*..)
    at java.security.AccessController.doPrivileged(Native Method)
    ... 4 more</p>
","<p>This is a security feature that prevents un-trusted code from removing a Sun provider. There is a way to do it which involves having proper permissions to do so. If you go to this link <a href=""http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html"" rel=""nofollow"">http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html</a> and scroll down to the title heading <strong>The Security Class</strong> you can read up on how to remove a provider and what will happen.</p>

<p><strong>EDIT</strong></p>

<p>Excerpts from the docs which go over that installed providers that are not extensions may requite a policy file to perform certain actions such as adding and removing a provider. Worth a try.</p>

<blockquote>
  <p>The documentation from the vendor of each provider you will be using should include information as to which permissions it requires, and how to grant such permissions. For example, the following permissions may be needed by a <strong>provider if it is not an installed extension</strong> and a security manager is installed</p>
</blockquote>

<p>-</p>

<blockquote>
  <p>The Security class manages installed providers and security-wide properties. It only contains static methods and is never instantiated. The methods for adding or removing providers, and for setting Security properties, can only be executed by a trusted program. Currently, a ""trusted program"" is either</p>
  
  <ul>
  <li>a local application not running under a security manager, or</li>
  <li>an applet or application with permission to execute the specified method (see below).</li>
  </ul>
  
  <p>The determination that code is considered trusted to perform an attempted action (such as adding a provider) requires that the applet is granted the proper permission(s) for that particular action.</p>
</blockquote>

<p>-</p>

<blockquote>
  <p>Each ""grant"" statement in such a file grants a specified code source a set of permissions, specifying which actions are allowed.</p>
  
  <p>Here is a sample policy configuration file:</p>

<pre><code>grant codeBase ""file:/home/sysadmin/"", signedBy ""sysadmin"" {
    permission java.security.SecurityPermission ""insertProvider.*"";
    permission java.security.SecurityPermission ""removeProvider.*"";
    permission java.security.SecurityPermission ""putProviderProperty.*"";
};
</code></pre>
</blockquote>
","1684","<java><security><jce><fips>","6","1","3","2012-06-27 22:22:56","","3","2","760854","","2012-06-27 05:44:03","2012-06-26 13:28:36",""
"11208380","Why MD5 is required for JCE initialization","<p>I am experimenting on enabling FIPS 180-3 on my java application. FIPS 180-3 allows only usage of 5 secure [hashes] (http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf) , MD5 is not one among them. Hence i am trying to programatically remove MD5 algorithms from the Sun provider. This is the sample code.</p>

<hr>

<pre><code>public static void main(String[] args) throws Exception {
    Security.removeProvider(""SUN"");
    Sun sun = new Sun();
    sun.remove(""MessageDigest.MD5""); //Comment and it will work !!!
    Security.addProvider(sun);
    Cipher ciph = Cipher.getInstance(""AES"");                
}   
</code></pre>

<hr>

<p>But this is throwing the following exception. If you comment ""sun.remove(.."" the program works fine. If i remove MD2, instead of MD5 then also it works fine.</p>

<p>To me it looks like the jre libs are using MD5 for their signing, but i checked jre/lib/ext/sunjce_provider.jar signer and its using sha1.</p>

<p>Any idea why my code is failing with this error?</p>

<p>Exception in thread ""main"" java.lang.ExceptionInInitializerError
    at javax.crypto.Cipher.getInstance(DashoA13*..)
    at TestRemoveMD5.main(TestRemoveMD5.java:20)</p>

<p>Caused by: java.lang.SecurityException: Cannot set up certs for trusted CAs
    at javax.crypto.SunJCE_b.(DashoA13*..)
    ... 3 more</p>

<p>Caused by: java.lang.SecurityException: Signature classes have been tampered with
    at javax.crypto.SunJCE_b.d(DashoA13*..)
    at javax.crypto.SunJCE_b.c(DashoA13*..)
    at javax.crypto.SunJCE_b$1.run(DashoA13*..)
    at java.security.AccessController.doPrivileged(Native Method)
    ... 4 more</p>
","<p>I guess i might have figured out the root cause, but still coudn't figure out from where its coming. I tried to debug X509CertImpl and i got one certificate signed by ""JCE Development"" which is using MD5. But all the other certificates loaded were signed correctly using SHA1withDSA. I am not sure if this should be a bug on jre.</p>

<p>[
[
  Version: V1
  Subject: CN=JCE Development, OU=Java Software, O=Sun Microsystems, L=Cupertino, ST=CA, C=US
  Signature Algorithm: MD5withRSA, OID = 1.2.840.113549.1.1.4</p>

<p>Key:  Sun RSA public key, 512 bits
  modulus: 9182591386680323574119504178341234548416270629561070323164514737894957593991212767744352158438329809500219147803751143974067780130174290713135793698837217
  public exponent: 65537
  Validity: [From: Thu Oct 31 20:57:44 IST 2002,
               To: Wed Oct 31 20:57:44 IST 2007]
  Issuer: CN=JCE Development, OU=Java Software, O=Sun Microsystems, L=Cupertino, ST=CA, C=US
  SerialNumber: [    02]</p>

<p>]
  Algorithm: [MD5withRSA]
  Signature:
0000: 2F E5 9C 54 5C A3 FA 25   E5 11 53 55 41 B3 4E 39  /..T..%..SUA.N9
0010: 49 56 9A 59 97 1A 23 4A   29 79 C8 74 D7 1C D5 95  IV.Y..#J)y.t....
0020: 32 8B E2 56 D3 39 A5 7D   9E E2 53 F7 91 62 11 04  2..V.9....S..b..
0030: 24 1C 1D AD 4A 32 88 63   86 2E 8E E9 8B A2 73 00  $...J2.c......s.</p>

<p>]</p>
","1684","<java><security><jce><fips>","6","0","3","2012-06-27 22:22:56","","3","2","760854","","2012-06-27 05:44:03","2012-06-26 13:28:36",""
"11208380","Why MD5 is required for JCE initialization","<p>I am experimenting on enabling FIPS 180-3 on my java application. FIPS 180-3 allows only usage of 5 secure [hashes] (http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf) , MD5 is not one among them. Hence i am trying to programatically remove MD5 algorithms from the Sun provider. This is the sample code.</p>

<hr>

<pre><code>public static void main(String[] args) throws Exception {
    Security.removeProvider(""SUN"");
    Sun sun = new Sun();
    sun.remove(""MessageDigest.MD5""); //Comment and it will work !!!
    Security.addProvider(sun);
    Cipher ciph = Cipher.getInstance(""AES"");                
}   
</code></pre>

<hr>

<p>But this is throwing the following exception. If you comment ""sun.remove(.."" the program works fine. If i remove MD2, instead of MD5 then also it works fine.</p>

<p>To me it looks like the jre libs are using MD5 for their signing, but i checked jre/lib/ext/sunjce_provider.jar signer and its using sha1.</p>

<p>Any idea why my code is failing with this error?</p>

<p>Exception in thread ""main"" java.lang.ExceptionInInitializerError
    at javax.crypto.Cipher.getInstance(DashoA13*..)
    at TestRemoveMD5.main(TestRemoveMD5.java:20)</p>

<p>Caused by: java.lang.SecurityException: Cannot set up certs for trusted CAs
    at javax.crypto.SunJCE_b.(DashoA13*..)
    ... 3 more</p>

<p>Caused by: java.lang.SecurityException: Signature classes have been tampered with
    at javax.crypto.SunJCE_b.d(DashoA13*..)
    at javax.crypto.SunJCE_b.c(DashoA13*..)
    at javax.crypto.SunJCE_b$1.run(DashoA13*..)
    at java.security.AccessController.doPrivileged(Native Method)
    ... 4 more</p>
","<p>So my inference from this exercise is that since jce itself needs MD5 to verify its classes for signing purposes, we cannot remove MD5 algorithm from jre and hence jre 1.6 itself cannot be made FIPS 180-3 complaint.</p>

<p>c# in FIPS cannot load MD5. Refer <a href=""https://stackoverflow.com/questions/4893088/is-there-an-alternate-hashing-algorithm-to-md5-for-fips-enabled-systems"">Is there an alternate hashing algorithm to MD5 for FIPS-enabled systems?</a>. With the above test i guess java cant do that behavior.</p>

<p>Do let me know if anyone objects to by observation or any obvious mistakes i might have overlooked.</p>
","1684","<java><security><jce><fips>","6","0","3","2012-06-27 22:22:56","","3","2","760854","","2012-06-27 05:44:03","2012-06-26 13:28:36",""
"6547116","Joomla JCE editor not loading in page loaded with Ajax","<p>I have a Joomla 1.5 component that uses a call to the editor class to display the JCE editor for Joomla instead of a textbox. This code is part of a 4 step form where each step is loading using Ajax. The last step contains a message field where users can write free text and I am calling this using the following code:</p>

<pre><code>$editor =&amp; JFactory::getEditor();
echo $editor-&gt;display('description', $description, '100%', '150', '40', '30');
</code></pre>

<p>When this step is displayed, it shows only a simple textbox without the buttons to format the text etc. I understand this must be an issue with the javascript, but I am having a hard time finding how I can trigger the proper code for the textbox to be formatted properly.</p>

<p>I have attached a screenshot of how the field looks like.
 <img src=""https://i.stack.imgur.com/DrdNj.png"" alt=""Description field loaded via Ajax""></p>

<p>And here is the HTML generated from Firebug:</p>

<pre><code>&lt;!-- Start Editor --&gt;&lt;label aria-visible=""false"" style=""display:none;"" for=""description""&gt;description_textarea&lt;/label&gt;&lt;textarea wrap=""off"" class=""wfEditor source"" style=""width:100%;height:150px;"" rows=""30"" cols=""40"" name=""description"" id=""description""&gt;&lt;/textarea&gt;&lt;input type=""hidden"" value=""1"" name=""wf3fadc9c48cabc28750287fe69c3d08c4"" id=""wf_description_token""&gt;
&lt;div id=""editor-xtd-buttons""&gt;
&lt;div class=""button2-left""&gt;&lt;div class=""image""&gt;&lt;a rel=""{handler: 'iframe', size: {x: 570, y: 400}}"" onclick=""IeCursorFix(); return false;"" href=""http://localhost/ugparl/site/index.php?option=com_media&amp;amp;view=images&amp;amp;tmpl=component&amp;amp;e_name=description"" title=""Image"" class=""modal-button""&gt;Image&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=""button2-left""&gt;&lt;div class=""pagebreak""&gt;&lt;a rel=""{handler: 'iframe', size: {x: 400, y: 85}}"" onclick=""IeCursorFix(); return false;"" href=""http://localhost/ugparl/site/index.php?option=com_content&amp;amp;task=ins_pagebreak&amp;amp;tmpl=component&amp;amp;e_name=description"" title=""Pagebreak"" class=""modal-button""&gt;Pagebreak&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=""button2-left""&gt;&lt;div class=""readmore""&gt;&lt;a rel="""" onclick=""insertReadmore('description');return false;"" href=""http://localhost/ugparl/site/#"" title=""Read more""&gt;Read more&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;!-- End Editor --&gt;
</code></pre>

<p>Thank you in advance for any help you can provide.</p>
","<p>This is not so much a solution but a workaround. Due to cleaning the headers before displaying the page, the code generated by JCE is lost. By adding the following code to the page called by ajax, I am able to trigger the JCE initializer and display the editor correctly.</p>

<pre><code>$document =&amp; JFactory::getDocument();
echo ""&lt;script type='text/javascript'&gt;
function loadJCE() {"";
echo $document-&gt;_script[""text/javascript""];
echo ""}
&lt;/script&gt;"";
</code></pre>

<p>Then I just called loadJCE from the load complete function.</p>

<p>Again, this is not the best way to do it but it did the trick for me.</p>
","1667","<ajax><joomla><joomla1.5><jce>","1","1","1","2012-02-22 16:16:57","6665346","2","1","","","","2011-07-01 11:03:43",""
"2785024","RSA public key exportation","<p>Here is my code </p>

<pre><code>  KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
     KeyPair myPair = kpg.generateKeyPair();
     PrivateKey k = myPair.getPrivate();
     System.out.print(k.serialVersionUID);

     Cipher c = Cipher.getInstance(""RSA"");
     c.init(Cipher.ENCRYPT_MODE, myPair.getPublic());
     String myMessage = new String(""Testing the message"");

     byte[] bytes  = c.doFinal(myMessage.getBytes());
     String tt = new String(bytes);
     System.out.println(tt);
     Cipher d = Cipher.getInstance(""RSA"");
     d.init(Cipher.DECRYPT_MODE, myPair.getPrivate());
     byte[] temp = d.doFinal(bytes);
     String tst = new String(temp);
     System.out.println(tst);
</code></pre>

<p>My question is how can i get the public key and stored elsewhere</p>
","<pre><code>PublicKey pubKey = myPair.getPublic();
byte[] keyBytes = pubKey.getEncoded();
</code></pre>

<p>Save the keyBytes as binary file or store it somewhere.</p>

<p>Do this to reconstruct the key,</p>

<pre><code> KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
 X509EncodedKeySpec pubKeySpec 
     = new X509EncodedKeySpec(keyBytes);
 PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);
</code></pre>
","1656","<java><security><jce>","4","4","1","2010-05-06 23:38:44","2785239","0","5","","","","2010-05-06 22:44:20",""
"9668115","Java Blowfish decrypt not giving original string back","<p>I'm implementing a simple password store using Blowfish.  All was fine until I tried out a few different password/key combinations and came across numerous instances where the decrypted values were still garbage.</p>

<p>Below is a standalone class that demonstrates the issue.  I get the following output:</p>

<pre><code>'Aaaaaaa7' encrypted: 'r?—èLèdÓ,·Ã¸ÍÒ'*
'Aaaaaaa7' decrypted: 'ñü=€¼(T'*
</code></pre>

<p>Any idea what I need to do to guarantee it always decrypts correctly.</p>

<p>(Using jce.jar in JDK 1.6.0_26)</p>

<p>Thanks,</p>

<p>David</p>

<pre><code>import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class BlowfishTwoWayHashImpl {

    static {
        test();
    }

    public static void test() {
        String key = ""wibble"";

        String passwordToEnrypt = ""Aaaaaaa7"";

        String enc = BlowfishTwoWayHashImpl.encryptBlowfish(passwordToEnrypt, key);
        System.out.println(""'"" + passwordToEnrypt + ""' encrypted: '"" + enc + ""'"");

        String dec = BlowfishTwoWayHashImpl.decryptBlowfish(enc, key);
        System.out.println(""'"" + passwordToEnrypt + ""' decrypted: '"" + dec + ""'"");
    }


    private static final String CIPHER_NAME = ""Blowfish"";

    public static String encryptBlowfish(String toEncrypt, String key) {
        return processString(toEncrypt, key, Cipher.ENCRYPT_MODE);
    }

    public static String decryptBlowfish(String toDecrypt, String key) {
        return processString(toDecrypt, key, Cipher.DECRYPT_MODE);
    }

    private static String processString(String toEncrypt, String key, int encryptDecryptMode) {

        SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), CIPHER_NAME);

        Cipher cipher;
        try {
            cipher = Cipher.getInstance(CIPHER_NAME);
            cipher.init(encryptDecryptMode, secretKeySpec);
            return new String(cipher.doFinal(toEncrypt.getBytes()));
        }
        catch (Exception e) {
            throw new RuntimeException(e.toString());
        }
    }

}
</code></pre>
","<p>Don't do this:</p>

<pre><code>return new String(cipher.doFinal(toEncrypt.getBytes()));
</code></pre>

<p>You're using the platform default encoding all over the place in your code. <strong>Don't do this. It will lose data.</strong></p>

<p>When you're converting genuine text to bytes (e.g. on encryption) use a specific charset - UTF-8 is a good choice. Use the same charset to decode from ""encoded text"" to <code>String</code>.</p>

<p>When you're converting arbitrary binary data to text, use base64 encoding, e.g. via <a href=""http://iharder.sourceforge.net/current/java/base64/"" rel=""nofollow"">this public domain Base64 encoding library</a>.</p>

<p>Basically, when you create a new string with the <code>String(byte[])</code> or <code>String(byte[], String)</code> constructors, you're saying, ""This is genuine text data - please just decode it as a string."" When the data is actually the result of encryption, it's <em>not</em> text data... it's an arbitrary bunch of bytes.</p>
","1607","<java><jdk1.6><blowfish><jce>","0","4","1","2012-03-12 13:44:26","9668175","0","2","","","","2012-03-12 13:40:46",""
"20218467","What is JCE Code Signing CA?","<p>I have an applet which is signed by the following certificate chain:</p>

<pre><code>Softkey-Kazakhstan (JCE Code Signing CA) 
    Subject: CN=Softkey-Kazakhstan,OU=Java Software Code Signing,O=Sun Microsystems Inc
    Issuer: CN=JCE Code Signing CA,OU=Java Software Code Signing,O=Sun Microsystems Inc,L=Palo Alto,ST=CA,C=US

JCE Code Signing CA (JCE Code Signing CA)
    Subject: CN=JCE Code Signing CA,OU=Java Software Code Signing,O=Sun Microsystems Inc,L=Palo Alto,ST=CA,C=US
    Issuer: CN=JCE Code Signing CA,OU=Java Software Code Signing,O=Sun Microsystems Inc,L=Palo Alto,ST=CA,C=US
</code></pre>

<p>This applet contains custom cryptoprovider implementation and some additional helper jars. It must be able to work with local files and USB-devices.</p>

<p>Java complains that it doesn't know this certificate. Root certificate seems to be legitimate certificate from Sun used for code signing and java should know it, but it doesn't for some reason.</p>

<p>What should I do, so java won't complain about this applet? Should I extract this root certificate JCE Code Signing CA and install it into $JRE/lib/security/cacerts?</p>
","<p>It is good question. This certificate is selfsigned and not officialy in Java tursted CA (cacerts). I've found that cryptographic extensions works even if that certificate is expired (doesn't work without signing). So I suppose that JCE requires cryptoproviders to be signed with ""JCE Code Signing CA"" but doesn't care about validity of that certificate (maybe it is checked internally by JCE without cacerts). I also understand that it is not the case here. The problem is with javaws (JNLP distribution) which requires jars to be signed with trusted chain. Also it is stressed by Oracle about JCE Code Signing certs that <strong>""the certificate will not work for deployment purposes""</strong> (see: <a href=""http://www.oracle.com/technetwork/java/javase/tech/getcodesigningcertificate-361306.html"" rel=""nofollow"">here</a>). But what if it have to exist in distribution? As I said: good question.</p>

<p>EDIT:
Conclusions:
1. Cryptoproviders have to be signed with ""JCE Code Signing CA"" not necessary valid.
2. If you distribute jar signed with ""JCE Code Signing CA"" then certificate has to be valid. JCE sign is not enough to distribute but if exists it has to be valid.</p>
","1577","<java><applet><certificate><jce>","2","1","1","2014-04-29 10:03:24","20265117","0","","","","","2013-11-26 13:31:46",""
"19802635","How can I implement JCE in java for Android?","<p>I has been request to develop an Android app, this app has to connect to a java server but this have to have with high security. On the server side, it will be implement JCE and I wonder if it is possible to implement JCE in a java Android code or what alternatives do I have to do this? I've read the android API but there is not any info about this...  thanks</p>
","<p>Android SDK is based on Java and is compliant with the java cryptography extension (JCE). For most of your encryption needs you can use the JCE API without worrying about the underlying cryptographic implementation. </p>
","1534","<android><encryption><jce>","2","0","1","2013-11-06 11:35:20","","1","","","","","2013-11-06 01:53:47",""
"24949267","Using bouncycastle in Websphere liberty profile","<p>Our application uses Bouncycastle. I am now attempting to deploy my app on websphere liberty profile and getting the below error</p>

<pre><code>[err] java.io.IOException: error constructing MAC: java.lang.SecurityException: JCE cannot authenticate the provider BC
[err]   at org.bouncycastle.jce.provider.JDKPKCS12KeyStore.engineLoad(Unknown Source)
[err]   at java.security.KeyStore.load(KeyStore.java:1214)
[err]   at com.manh.jwt.JwtKeyManager.loadPrivateKeyByIssuer(JwtKeyManager.java:213)
</code></pre>

<p>So instead of having the bouncycastle jar in WEB-INF/lib dir, i created a shared lib and added this library as a <strong>privateLibraryRef</strong> to my web application. I still get the same error.</p>

<p>Here is my server.xml for your reference.</p>

<pre><code>&lt;server description=""new server""&gt;

&lt;!-- Enable features --&gt;
&lt;featureManager&gt;
    &lt;feature&gt;jsp-2.2&lt;/feature&gt;
    &lt;feature&gt;servlet-3.0&lt;/feature&gt;
&lt;/featureManager&gt;
&lt;webContainer deferServletLoad=""false"" /&gt;
&lt;httpEndpoint id=""defaultHttpEndpoint""
              host=""localhost""
              httpPort=""20000""
              httpsPort=""9443"" /&gt;

&lt;library id=""configResources""&gt;
    &lt;folder dir=""${server.config.dir}/conf"" /&gt;
&lt;/library&gt;      


&lt;library id=""bc""&gt;
    &lt;fileset dir=""${server.config.dir}/bclib"" includes=""*.jar"" /&gt;
&lt;/library&gt;      

&lt;webApplication name=""scope"" location=""scope.war"" contextRoot=""/""&gt;
    &lt;classloader privateLibraryRef=""configResources, bc"" /&gt;
&lt;/webApplication&gt;
&lt;/server&gt;
</code></pre>

<p>Is there any other setting that i can try to have this working? </p>
","<p>Here is the magic to get Bouncy Castle cryptography to work with WAS Liberty, which should work for the stacked products as well.</p>

<ol>
<li>Create a ""jvm.options"" file in the servers working directory.   In a default installation, this would be wlp/usr/servers/</li>
<li>Add the following to the ""jvm.options"" file.<br>
a. -Djava.ext.dirs= //I tested this with /opt/fun/libs and wlp/usr/servers/defaultServer and wlp/usr/servers/defaultServer/libs.  All three worked.  If I included a path to a WEB-INF/lib directory it failed.
 b. -Dorg.osgi.framework.bootdelegation=org.bouncycastle.jce.provider</li>
<li>Copy the bouncy castle jar from the WEB-INF/lib directory to the java.ext.dirs defined directory (above). </li>
<li>Stop and start the server, since you are changing JVM arguments.</li>
<li>Test the application or stacked product.</li>
</ol>
","1501","<bouncycastle><jce><websphere-liberty>","0","0","1","2015-09-01 12:06:36","","5","","1609655","","2014-07-25 06:27:42","2014-07-25 06:20:41",""
"4522312","Digitally signing a web-http response in Java (using pgp)","<p>I am trying to digitally sign an http - web response. Essentially, I create the HTML and multipart content-type response, sign the response then append the digital signature to the response.  I think I am close but off a few steps as this is not a true PGP signature since the appended signature is actually HEXtoString. Big thing is to be able to represent the signature correctly so that response can be interpreted correctly. Could use some suggestions here as I am fairly green with this.  Thanks in advance.. below is snippets of code I am using now.</p>

<pre><code>    StringBuffer myResponse = new StringBuffer("""");
            myResponse.append(getHttpHeader());
            KeyPair pair2 = loadKeyPair();//loads a key pair from generated files

    if (signer==null)
        signer = Signature.getInstance(""MD5withRSA"");
    signer.initSign(pair2.getPrivate());
    signer.update(message.getBytes());
    byte[] b = signer.sign();
    FileOutputStream sigfos = new FileOutputStream(getFileLocation(0,localTest));
    sigfos.write(b);
    sigfos.close();
    //verify
    signer.initVerify(pair2.getPublic());//pubKey);
    signer.update(message.getBytes());
    if (signer.verify(b)){
        myResponse.append(message);
    }
</code></pre>

<hr>

<pre><code>    StringBuffer signed= new StringBuffer("""");
    signed.append(boundary);
    signed.append(CRLF);
    signed.append(""content-type: application/pgp-signature"");
    signed.append(CRLF);
    signed.append(""-----BEGIN PGP MESSAGE-----"");
    signed.append(CRLF);
    signed.append(""Version: 1"");//update this
    signed.append(CRLF);
    signed.append(CRLF);

    signed.append(digSignature);//generated as HexString representation of signed file from above
    signed.append(CRLF);

    signed.append(""-----END PGP MESSAGE-----"");
    signed.append(CRLF);
    signed.append(boundary+""--"");
</code></pre>

<hr>

<pre><code>            myResponse.append (signed);
            ServletOutputStream.println(myResponse);
</code></pre>

<hr>

<p>The resulting ""signature"" that is transmitted is a byte-hashing hexToString representation of the signed files. I am using standard java classes, but not sure if other libraries would give me a true PGP representation with characters outside of the 0-9a-f representation. ideas??</p>
","<p>How is the verification code downloaded to the client?  More details about the application in question?  If it's a verification script downloaded via HTTP then the scheme is fundamentally broken.  You probably need to use SSL, especially if you already argued as such.</p>

<p>Without knowing more about your system, it sounds like an adversary in a man-in-the-middle attack need only to:</p>

<ol>
<li>Replace the public key in the verification code with their own.</li>
<li>Resign all ""secure"" communications with their own signature.</li>
<li>Your script sees nothing wrong because the public key it checks was modified by the adversary.</li>
</ol>

<p>Not to mention all communication is in plain-text (so hopefully no personal/sensitive information being transmitted?)</p>

<p>SSL works around this problem because all the certificates have to be signed by a root certificate authority trusted by / installed with the web browser.  CAs are supposed to only issue certificates for domains to people that control/own them; therefore, the previous attack would not work.</p>

<p>Now, if your client is installed in a <em>trusted fashion</em> such that an adversary cannot tamper with it, then you can continue with your scheme and still be secure.  For example, if the client is installed on a client PC by hand, or delivered securely some other way (like via SSL, and/or using code signing).</p>

<p>(I did notice a reference to MD5 hashing.  Do not use MD5 hashes; MD5 has been broken.)</p>
","1497","<java><digital-signature><pgp><jce>","1","0","2","2011-07-13 13:41:06","6679860","2","1","552782","","2010-12-29 19:47:16","2010-12-23 20:40:10",""
"4522312","Digitally signing a web-http response in Java (using pgp)","<p>I am trying to digitally sign an http - web response. Essentially, I create the HTML and multipart content-type response, sign the response then append the digital signature to the response.  I think I am close but off a few steps as this is not a true PGP signature since the appended signature is actually HEXtoString. Big thing is to be able to represent the signature correctly so that response can be interpreted correctly. Could use some suggestions here as I am fairly green with this.  Thanks in advance.. below is snippets of code I am using now.</p>

<pre><code>    StringBuffer myResponse = new StringBuffer("""");
            myResponse.append(getHttpHeader());
            KeyPair pair2 = loadKeyPair();//loads a key pair from generated files

    if (signer==null)
        signer = Signature.getInstance(""MD5withRSA"");
    signer.initSign(pair2.getPrivate());
    signer.update(message.getBytes());
    byte[] b = signer.sign();
    FileOutputStream sigfos = new FileOutputStream(getFileLocation(0,localTest));
    sigfos.write(b);
    sigfos.close();
    //verify
    signer.initVerify(pair2.getPublic());//pubKey);
    signer.update(message.getBytes());
    if (signer.verify(b)){
        myResponse.append(message);
    }
</code></pre>

<hr>

<pre><code>    StringBuffer signed= new StringBuffer("""");
    signed.append(boundary);
    signed.append(CRLF);
    signed.append(""content-type: application/pgp-signature"");
    signed.append(CRLF);
    signed.append(""-----BEGIN PGP MESSAGE-----"");
    signed.append(CRLF);
    signed.append(""Version: 1"");//update this
    signed.append(CRLF);
    signed.append(CRLF);

    signed.append(digSignature);//generated as HexString representation of signed file from above
    signed.append(CRLF);

    signed.append(""-----END PGP MESSAGE-----"");
    signed.append(CRLF);
    signed.append(boundary+""--"");
</code></pre>

<hr>

<pre><code>            myResponse.append (signed);
            ServletOutputStream.println(myResponse);
</code></pre>

<hr>

<p>The resulting ""signature"" that is transmitted is a byte-hashing hexToString representation of the signed files. I am using standard java classes, but not sure if other libraries would give me a true PGP representation with characters outside of the 0-9a-f representation. ideas??</p>
","<p>This issue is due to a NAESB-EDI standard. Where a file has been submitted in an http request and we are required to produce a particular response.  We are using SSL and the original payload is supposed to be encrypted. The response is plain html (of 4 items) with an additional digital signature of the response. What I have figured to do is to create the response, have existing pgp software create the signature based upon the generated response and then append the signature to the response. Thus I am not using MD5 anymore and I am not exposing keys to public use (except to those that we specifically trade). So James answer is partially correct and without SSL, this offers little if any protection against sniffing since the response is clear text. Yet without the required information in the request, they would not even get a proper response. Likely wouldnt get a response (let alone a proper one). </p>
","1497","<java><digital-signature><pgp><jce>","1","0","2","2011-07-13 13:41:06","6679860","2","1","552782","","2010-12-29 19:47:16","2010-12-23 20:40:10",""
"3062687","StackOverFlowError while creating Mac object on AS400/Java","<p>I am a newbie to AS400-Java programming. I am trying to create my first program to test the implementation of Message Authentication Code (MAC). I am trying to use the HMACSHA1 hash function. My (Java 1.4) program runs fine on a dev box (V5R4).But fails terribly on the QA box (V5R3). My program is as below:</p>

<p>=====================================================</p>

<pre><code>
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.Security;
import java.security.Provider;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.SecretKey;

public class Test01
{
 private static final String HMAC_SHA1_ALGORITHM = ""HmacSHA1"";

 public static void main (String [] arguments)
 {
  byte[] key = { 1,2,3,4,5,6,7,8};
  SecretKeySpec SHA1key = new SecretKeySpec(key, ""HmacSHA1"");
  Mac hmac;
  String strFinalRslt = """";

  try {
 hmac = Mac.getInstance(""HmacSHA1"");
 hmac.init(SHA1key);
 byte[] result = hmac.doFinal();
    strFinalRslt = toHexString(result);

  }catch (NoSuchAlgorithmException e) {
 // TODO Auto-generated catch block
 e.printStackTrace();
  }catch (InvalidKeyException e) {
 // TODO Auto-generated catch block
 e.printStackTrace();
  }catch(StackOverflowError e){
 e.printStackTrace();
  }
  System.out.println(strFinalRslt);
  System.out.println(""All done!!!"");
 }

 public static byte[] fromHexString ( String s )
 {
  int stringLength = s.length();
  if ( (stringLength & 0x1) != 0 )
  {
   throw new IllegalArgumentException ( ""fromHexString requires an even number of hex characters"" );
  }
  byte[] b = new byte[stringLength / 2];

  for ( int i=0,j=0; i>> 4] );

  //look up low nibble char
  sb.append( hexChar [b[i] & 0x0f] );
 }
 return sb.toString();
}

static char[] hexChar = {
'0' , '1' , '2' , '3' ,
'4' , '5' , '6' , '7' ,
'8' , '9' , 'a' , 'b' ,
'c' , 'd' , 'e' , 'f'};


}

</code></pre>

<p>This program compiles fine and gets the correct response on my win-xp client and also my dev box. But, fails with the following error on the QA box:</p>

<pre>
java.lang.StackOverflowError
    at java.lang.Throwable.(Throwable.java:180)
    at java.lang.Error.(Error.java:37)
    at java.lang.StackOverflowError.(StackOverflowError.java:24)
    at java.io.Os400FileSystem.list(Native method)
    at java.io.File.list(File.java:922)
    at javax.crypto.b.e(Unknown source)
    at javax.crypto.b.a(Unknown source)
    at javax.crypto.b.c(Unknown source)
    at javax.crypto.b£0.run(Unknown source)
    at javax.crypto.b.(Unknown source)
    at javax.crypto.Mac.getInstance(Unknown source)

</pre>

<p>I have verified the java.security file and entry corresponding to the jce files are all ok. The DMPJVM command gives me the following response:</p>

<pre>
Thu Jun 03 12:25:34 E
Java Virtual Machine Information  016822/QPGMR/11111
........................................................................
. Classpath                                                            .
........................................................................
java.version=1.4
sun.boot.class.path=/QIBM/ProdData/OS400/Java400/jdk/lib/jdkptf14.zip:/QIBM
/ProdData/OS400/Java400/ext/ibmjssefw.jar:/QIBM/ProdData/CAP/ibmjsseprovide
r.jar:/QIBM/ProdData/OS400/Java400/ext/ibmjsseprovider2.jar:/QIBM/ProdData/
OS400/Java400/ext/ibmpkcs11impl.jar:/QIBM/ProdData/CAP/ibmjssefips.jar:/QIB
M/ProdData/OS400/Java400/jdk/lib/IBMiSeriesJSSE.jar:/QIBM/ProdData/OS400/Ja
va400/jdk/lib/jce.jar:/QIBM/ProdData/OS400/Java400/jdk/lib/jaas.jar:/QIBM/P
rodData/OS400/Java400/jdk/lib/ibmcertpathfw.jar:/QIBM/ProdData/OS400/Java40
0/jdk/lib/ibmcertpathprovider.jar:/QIBM/ProdData/OS400/Java400/ext/ibmpkcs.
jar:/QIBM/ProdData/OS400/Java400/jdk/lib/ibmjgssfw.jar:/QIBM/ProdData/OS400
/Java400/jdk/lib/ibmjgssprovider.jar:/QIBM/ProdData/OS400/Java400/jdk/lib/s
ecurity.jar:/QIBM/ProdData/OS400/Java400/jdk/lib/charsets.jar:/QIBM/ProdDat
a/OS400/Java400/jdk/lib/resources.jar:/QIBM/ProdData/OS400/Java400/jdk/lib/
rt.jar:/QIBM/ProdData/OS400/Java400/jdk/lib/sunrsasign.jar:/QIBM/ProdData/O
S400/Java400/ext/IBMmisc.jar:/QIBM/ProdData/Java400/
java.class.path=/myhome/lib/commons-codec-1.3.jar:/myhome/lib/commons-httpc
lient-3.1.jar:/myhome/lib/commons-logging-1.1.jar:/myhome/lib/log4j-1.2.15.jar:/myhome/lib/log4j-core.jar
;
java.ext.dirs=/QIBM/ProdData/OS400/Java400/jdk/lib/ext:/QIBM/UserData/Java4
00/ext:/QIBM/ProdData/Java400/jdk14/lib/ext
java.library.path=/QSYS.LIB/ROBOTLIB.LIB:/QSYS.LIB/QTEMP.LIB:/QSYS.LIB/ODIP
GM.LIB:/QSYS.LIB/QGPL.LIB
........................................................................
. Garbage Collection                                                   .
........................................................................
Garbage collector parameters
   Initial size: 16384 K
   Max size: 240000000 K
Current values
   Heap size: 437952 K
   Garbage collections: 58
Additional values
   JIT heap size: 53824 K
   JVM heap size: 55752 K
   Last GC cycle time: 1333 ms
........................................................................
. Thread information                                                   .
........................................................................
Information for 4 thread(s) of 4 thread(s) processed
Thread:  00000004 Thread-0
  TDE:  B00380000BAA0000
  Thread priority: 5
  Thread status: Running
  Thread group: main
  Runnable: java/lang/Thread
 Stack:
    java/io/Os400FileSystem.list(Ljava/io/File;)[Ljava/lang/String;+0 (Os400FileSystem.java:0)
    java/io/File.list()[Ljava/lang/String;+19 (File.java:922)
    javax/crypto/b.e()[B+127 (:0)
    javax/crypto/b.a(Ljava/security/cert/X509Certificate;)V+7 (:0)
    javax/crypto/b.access$500(Ljava/security/cert/X509Certificate;)V+1 (:0)
    javax/crypto/b$0.run()Ljava/lang/Object;+98 (:0)
    javax/crypto/b.()V+507 (:0)
    javax/crypto/Mac.getInstance(Ljava/lang/String;)Ljavax/crypto/Mac;+10 (:0)
 Locks:
    None
Thread:  00000007 jitcompilethread
  TDE:  B00380000BD58000
  Thread priority: 5
  Thread status: Java wait
  Thread group: system
  Runnable: java/lang/Thread
 Stack:
    None
 Locks:
    None
Thread:  00000005 Reference Handler
  TDE:  B00380000BAAC000
  Thread priority: 10
  Thread status: Waiting
  Wait object: java/lang/ref/Reference$Lock
  Thread group: system
  Runnable: java/lang/ref/Reference$ReferenceHandler
 Stack:
    java/lang/Object.wait()V+1 (Object.java:452)
    java/lang/ref/Reference$ReferenceHandler.run()V+47 (Reference.java:169)
 Locks:
    None
Thread:  00000006 Finalizer
  TDE:  B00380000BAB3000
  Thread priority: 8
  Thread status: Waiting
  Wait object: java/lang/ref/ReferenceQueue$Lock
  Thread group: system
  Runnable: java/lang/ref/Finalizer$FinalizerThread
 Stack:
    java/lang/ref/ReferenceQueue.remove(J)Ljava/lang/ref/Reference;+43 (ReferenceQueue.java:111)
    java/lang/ref/ReferenceQueue.remove()Ljava/lang/ref/Reference;+1 (ReferenceQueue.java:127)
    java/lang/ref/Finalizer$FinalizerThread.run()V+3 (Finalizer.java:171)
 Locks:
    None
........................................................................
. Class loader information                                             .
........................................................................
0 Default class loader
1 sun/reflect/DelegatingClassLoader
2 sun/misc/Launcher$ExtClassLoader
........................................................................
. GC heap information                                                  .
........................................................................
 Loader     Objects      Class name
 ------     -------      ----------
 0          1493         [C
 0          2122181      java/lang/String
 0          47           [Ljava/util/Hashtable$Entry;
 0          68           [Ljava/lang/Object;
 0          1016         java/lang/Class
 0          31           java/util/HashMap
 0          37           java/util/Hashtable
 0          2            java/lang/ThreadGroup
 0          2            java/lang/RuntimePermission
 0          2            java/lang/ref/ReferenceQueue$Null
 0          5            java/lang/ref/ReferenceQueue
 0          50           java/util/Vector
 0          4            java/util/Stack
 0          3            sun/misc/SoftCache
 0          1            [Ljava/lang/ThreadGroup;
 0          5            [Ljava/io/ObjectStreamField;
 0          1            sun/reflect/ReflectionFactory
 0          7            java/lang/ref/ReferenceQueue$Lock
 0          10           java/lang/Object
 0          1            java/lang/String$CaseInsensitiveComparator
 0          1            java/util/Hashtable$EmptyEnumerator
 0          1            java/util/Hashtable$EmptyIterator
 0          33           [Ljava/util/HashMap$Entry;
 0          19210        [J
 0          1            sun/nio/cs/StandardCharsets
 0          5            java/util/TreeMap
 0          1075         java/util/TreeMap$Entry
 0          469          [Ljava/lang/String;
 0          1            java/lang/StringBuffer
 0          2            java/io/FileInputStream
 0          2            java/io/FileOutputStream
 0          2            java/io/BufferedOutputStream
 0          1            java/lang/reflect/ReflectPermission
 0          1            [[Ljava/lang/ref/SoftReference;
 0          2            [Ljava/lang/ref/SoftReference;
 0          2            sun/nio/cs/Surrogate$Parser
 0          3            sun/misc/Signal
 0          1            [Ljava/io/File;
 0          6            java/io/File
 0          1            java/util/BitSet
 0          17           sun/reflect/NativeConstructorAccessorImpl
 0          2            java/net/URLClassLoader$ClassFinder
 0          12           java/util/ArrayList
 0          32           java/io/RandomAccessFile
 0          16           java/lang/Thread
 0          1            java/lang/ref/Reference$ReferenceHandler
 0          1            java/lang/ref/Finalizer$FinalizerThread
 0          266          [B
 0          2            java/util/Properties
 0          71           java/lang/ref/Finalizer
 0          2            com/ibm/nio/cs/DirectEncoder
 0          38           java/lang/reflect/Constructor
 0          33           java/util/jar/JarFile
 0          19200        java/lang/StackOverflowError
 0          5            java/security/AccessControlContext
 0          2            [Ljava/lang/Thread;
 0          4            java/lang/OutOfMemoryError
 0          1065         java/util/Hashtable$Entry
 0          1            java/io/BufferedInputStream
 0          2            java/io/PrintStream
 0          2            java/io/OutputStreamWriter
 0          428          [I
 0          3            java/lang/ClassLoader$NativeLibrary
 0          25           java/util/Locale
 0          3            sun/misc/URLClassPath
 0          30           java/util/zip/Inflater
 0          612          java/util/HashMap$Entry
 0          2            java/io/FilePermission
 0          10           java/io/ObjectStreamField
 0          1            java/security/BasicPermissionCollection
 0          2            java/security/ProtectionDomain
 0          1            java/lang/Integer$1
 0          1            java/lang/ref/Reference$Lock
 0          1            java/lang/Shutdown$Lock
 0          1            java/lang/Runtime
 0          36           java/io/FileDescriptor
 0          1            java/lang/Long$1
 0          202          java/lang/Long
 0          3            java/lang/ThreadLocal
 0          3            java/nio/charset/CodingErrorAction
 0          2            java/nio/charset/CoderResult
 0          1            java/nio/charset/CoderResult$1
 0          1            java/nio/charset/CoderResult$2
 0          1            sun/misc/Unsafe
 0          2            java/nio/ByteOrder
 0          1            java/io/Os400FileSystem
 0          3            java/lang/Boolean
 0          1            java/lang/Terminator$1
 0          23           java/lang/Integer
 0          2            sun/misc/NativeSignalHandler
 0          1            sun/misc/Launcher$Factory
 0          1            sun/misc/Launcher
 0          53           [Ljava/lang/Class;
 0          1            java/lang/reflect/ReflectAccess
 0          18           sun/reflect/DelegatingConstructorAccessorImpl
 0          1            sun/net/www/protocol/file/Handler
 0          3            java/util/HashSet
 0          3            sun/net/www/protocol/jar/Handler
 0          1            java/util/jar/JavaUtilJarAccessImpl
 0          1            java/net/UnknownContentHandler
 0          2            [Ljava/security/Principal;
 0          10           [Ljava/security/cert/Certificate;
 0          2            sun/misc/AtomicLongCSImpl
 0          3            sun/reflect/DelegatingMethodAccessorImpl
 0          1            sun/security/util/ByteArrayLexOrder
 0          1            sun/security/util/ByteArrayTagOrder
 0          7            sun/security/x509/CertificateVersion
 0          7            sun/security/x509/CertificateSerialNumber
 0          7            sun/security/x509/SerialNumber
 0          7            sun/security/x509/CertificateAlgorithmId
 0          7            sun/security/x509/CertificateIssuerName
 0          60           sun/security/x509/RDN
 0          60           [Lsun/security/x509/AVA;
 0          67           sun/security/util/DerInputStream
 0          3            [Ljava/math/BigInteger;
 0          2            com/ibm/nio/cs/Converter
 0          2            sun/nio/cs/StreamEncoder$CharsetSE
 0          35           java/lang/ref/SoftReference
 0          2            java/nio/HeapByteBuffer
 0          2            java/io/BufferedWriter
 0          33           sun/misc/URLClassPath$JarLoader
 0          4            java/lang/ThreadLocal$ThreadLocalMap$Entry
 0          76           java/net/URL
 0          1            sun/misc/Launcher$ExtClassLoader
 0          1            sun/misc/Launcher$AppClassLoader
 0          4            java/lang/Throwable
 0          7            java/lang/reflect/Method
 0          2            sun/misc/URLClassPath$FileLoader
 0          2            java/security/CodeSource
 0          2            java/security/Permissions
 0          2            java/io/FilePermissionCollection
 0          1            java/lang/ThreadLocal$ThreadLocalMap
 0          1            javax/crypto/spec/SecretKeySpec
 0          17           java/util/jar/Attributes$Name
 0          1            [Ljava/lang/ThreadLocal$ThreadLocalMap$Entry;
 0          1            java/security/SecureRandom
 0          2            sun/security/provider/Sun
 0          1            java/util/jar/JarFile$JarFileEntry
 0          1            java/util/jar/JarVerifier
 0          3            sun/reflect/NativeMethodAccessorImpl
 0          116          sun/security/util/ObjectIdentifier
 0          1            java/lang/Package
 0          2            [S
 0          104          java/math/BigInteger
 0          20           sun/security/x509/AlgorithmId
 0          14           sun/security/x509/X500Name
 0          14           [Lsun/security/x509/RDN;
 0          60           sun/security/x509/AVA
 0          67           sun/security/util/DerValue
 0          67           sun/security/util/DerInputBuffer
 0          21           sun/security/x509/AVAKeyword
 0          6            sun/security/x509/X509CertImpl
 0          7            sun/security/x509/X509CertInfo
 0          1            [Lsun/security/util/ObjectIdentifier;
 0          1            [[Ljava/lang/Byte;
 0          3            [[B
 0          7            sun/security/provider/DSAPublicKey
 0          7            sun/security/x509/AuthorityKeyIdentifierExtension
 0          12           [Ljava/lang/Byte;
 0          14           java/lang/Byte
 0          7            sun/security/x509/CertificateSubjectName
 0          7            sun/security/x509/CertificateX509Key
 0          14           sun/security/x509/KeyIdentifier
 0          4            [Z
 0          5            sun/text/Normalizer$Mode
 0          7            sun/security/x509/CertificateValidity
 0          14           java/util/Date
 0          7            sun/security/provider/DSAParameters
 0          7            sun/security/util/BitArray
 0          7            sun/security/x509/CertificateExtensions
 0          7            java/security/AlgorithmParameters
 0          7            sun/security/x509/SubjectKeyIdentifierExtension
 0          5            sun/security/x509/BasicConstraintsExtension
 0          2            sun/security/x509/KeyUsageExtension
 0          1            sun/text/CompactCharArray
 0          1            sun/text/CompactByteArray
 0          1            sun/net/www/protocol/jar/JarFileFactory
 0          1            java/util/Collections$EmptySet
 0          1            java/util/Collections$EmptyList
 0          1            java/util/Collections$ReverseComparator
 0          1            com/ibm/security/jgss/i18n/PropertyResource
 0          1            javax/crypto/b$0
 0          1            sun/security/provider/X509Factory
 0          1            sun/reflect/BootstrapConstructorAccessorImpl
 1          1            sun/reflect/GeneratedConstructorAccessor3202134454
 2          1            com/ibm/crypto/provider/IBMJCE
 0          6            java/util/ResourceBundle$LoaderReference
 0          1            [Lsun/security/x509/NetscapeCertTypeExtension$MapEntry;
 0          1            com/sun/rsajca/Provider
 0          1            com/ibm/security/cert/IBMCertPath
 0          1            com/ibm/as400/ibmonly/net/ssl/Provider
 0          1            com/ibm/jsse/IBMJSSEProvider
 0          1            com/ibm/security/jgss/IBMJGSSProvider
 0          5            org/ietf/jgss/Oid
 0          1            java/util/PropertyResourceBundle
 0          7            java/util/ResourceBundle$ResourceCacheKey
 0          2            sun/net/www/protocol/jar/URLJarFile
 0          6            sun/misc/SoftCache$ValueCell
 0          1            java/util/Random
 0          1            java/util/Collections$EmptyMap
 0          112          com/ibm/security/util/ObjectIdentifier
 0          5            java/security/Security$ProviderProperty
 0          1            java/security/cert/CertificateFactory
 0          1            sun/security/provider/SecureRandom
 0          2            java/security/MessageDigest$Delegate
 0          2            sun/security/provider/SHA
 0          1            sun/util/calendar/ZoneInfo
 0          4            com/ibm/security/x509/X500Name
 0          2            [Ljava/security/cert/X509Certificate;
 0          1            sun/reflect/DelegatingClassLoader
 0          1            sun/security/x509/NetscapeCertTypeExtension
 0          7            sun/security/x509/NetscapeCertTypeExtension$MapEntry
 0          3            [[Ljava/lang/String;
 0          3            java/util/Arrays$ArrayList
 0          7            com/ibm/security/x509/NetscapeCertTypeExtension$MapEntry
 0          1            com/ibm/security/validator/EndEntityChecker
 0          1            java/util/AbstractList$Itr
 0          1            com/ibm/security/util/ByteArrayLexOrder
 0          1            com/ibm/security/util/ByteArrayTagOrder
 0          18           [Lcom/ibm/security/x509/AVA;
 0          18           com/ibm/security/util/DerInputStream
 0          5            com/ibm/security/util/text/Normalizer$Mode
 0          1            com/ibm/security/validator/SimpleValidator
 0          1            [Lcom/ibm/security/x509/NetscapeCertTypeExtension$MapEntry;
 0          4            [Lcom/ibm/security/x509/RDN;
 0          1            java/util/Hashtable$Enumerator
 0          4            java/util/LinkedHashMap$Entry
 0          1            sun/text/resources/LocaleElements
 0          1            sun/text/resources/LocaleElements_en
 0          22           com/ibm/security/x509/AVAKeyword
 0          4            javax/security/auth/x500/X500Principal
 0          18           com/ibm/security/x509/RDN
 0          18           com/ibm/security/x509/AVA
 0          18           com/ibm/security/util/DerInputBuffer
 0          18           com/ibm/security/util/DerValue
 0          1            com/ibm/security/util/text/CompactCharArray
 0          1            com/ibm/security/util/text/CompactByteArray
 0          2            java/util/LinkedHashMap
 0          1            java/net/InetAddress$1
 0          2            [Ljava/net/InetAddress;
 0          2            java/net/InetAddress$Cache
 0          1            java/net/Inet4AddressImpl
 0          3            java/net/Inet4Address
 0          2            java/net/InetAddress$CacheEntry
........................................................................
. Global registry information                                          .
........................................................................
 Loader     Objects      Class name
 ------     -------      ----------
 0          23           [C
 0          1017         java/lang/Class
 0          1            java/lang/ref/Reference$ReferenceHandler
 0          1            java/lang/ref/Finalizer$FinalizerThread
 0          1            sun/misc/Launcher$AppClassLoader
 0          32           java/io/RandomAccessFile
 0          32           [B
</pre>

<p>Can someone please advise me?</p>

<p>Thanks a lot,
Prasanna</p>
","<p>The issue appears to be</p>

<pre><code>at java.io.Os400FileSystem.list(Native method)
at java.io.File.list(File.java:922)
</code></pre>

<p>The Mac.getInstance() code needs to read a folder (File.list) which is being done by the Os400FileSystem.list() method.  Apparently that folder is too large.</p>

<p>The first thing you need to check is that the machine is current on PTF's.   If the problem remains, then try giving your process more memory (argument to the JAVA/RUNJVA command) to see if you just have a bit too little memory.  The defaults were incremented from V5R3 to V5R4.</p>
","1484","<java><ibm-midrange><jce><java1.4>","2","1","1","2010-06-18 09:50:26","3068643","3","2","369367","","2010-06-18 09:38:50","2010-06-17 14:43:27",""
"51280240","Which JCE provider to use on Android ? Bouncy Castle, Conscrypt,...?","<p>I’m starting the development of an Android App using ECC Cryptography. I have seen that Android embeds some Cryptography (defined here <a href=""https://developer.android.com/guide/topics/security/cryptography"" rel=""nofollow noreferrer"">https://developer.android.com/guide/topics/security/cryptography</a> ) but it is limited either in term of algorithm’s parameters supported or concerning the Android API version supported. For example, “EC” parameter (aka elliptic curve cryptography) is supported by AlgorithmParameters class only for Android API version 26+ (= Android 8.0 and above) which is very restrictive.</p>

<p>So far, the solution was to use a JCE provider like “Bouncy Castle”. However, I have seen on <a href=""https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html"" rel=""nofollow noreferrer"">https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html</a> that it will be deprecated for the future Android P. Android P will use the cryptography features available in Conscrypt (based on boringSSL).</p>

<p>I want my application to work on current Android versions (>= to API 21) and I want it to work on Android P <strong>so what JCE provider shall I use?</strong> </p>

<p>I have tried to use <strong>Conscrypt</strong> with a Samsung Galaxy S7 running Android API version 24 (= Android 7.0) but I have a crash when I mount it as the security provider. 
In my MainActivity.java class, I have used:</p>

<pre><code>static {
    try {
        Security.insertProviderAt(Conscrypt.newProvider(), 1);

    } catch (NoClassDefFoundError e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>I get the following crash:</p>

<p><em>java.lang.UnsatisfiedLinkError: No implementation found for java.lang.String[] org.conscrypt.NativeCrypto.get_cipher_names(java.lang.String) (tried Java_org_conscrypt_NativeCrypto_get_1cipher_1names and Java_org_conscrypt_NativeCrypto_get_1cipher_1names__Ljava_lang_String_2)</em></p>

<p>Do you know if Conscript can be used with current Android API versions?</p>

<p>Thanks</p>
","<p>Current Android versions  include a shortened version of Bouncycastle and there is no full support for Elliptic Curve Cryptography.</p>

<p>I do not know if Android P is going to support ECC algorithms,  but the most practical solution at this time is to distribute your application including the BouncyCastle packages and not depend on the native Android support</p>
","1483","<java><android><bouncycastle><jce><boringssl>","2","0","2","2018-07-16 14:55:34","51364677","0","","","","","2018-07-11 08:03:38",""
"51280240","Which JCE provider to use on Android ? Bouncy Castle, Conscrypt,...?","<p>I’m starting the development of an Android App using ECC Cryptography. I have seen that Android embeds some Cryptography (defined here <a href=""https://developer.android.com/guide/topics/security/cryptography"" rel=""nofollow noreferrer"">https://developer.android.com/guide/topics/security/cryptography</a> ) but it is limited either in term of algorithm’s parameters supported or concerning the Android API version supported. For example, “EC” parameter (aka elliptic curve cryptography) is supported by AlgorithmParameters class only for Android API version 26+ (= Android 8.0 and above) which is very restrictive.</p>

<p>So far, the solution was to use a JCE provider like “Bouncy Castle”. However, I have seen on <a href=""https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html"" rel=""nofollow noreferrer"">https://android-developers.googleblog.com/2018/03/cryptography-changes-in-android-p.html</a> that it will be deprecated for the future Android P. Android P will use the cryptography features available in Conscrypt (based on boringSSL).</p>

<p>I want my application to work on current Android versions (>= to API 21) and I want it to work on Android P <strong>so what JCE provider shall I use?</strong> </p>

<p>I have tried to use <strong>Conscrypt</strong> with a Samsung Galaxy S7 running Android API version 24 (= Android 7.0) but I have a crash when I mount it as the security provider. 
In my MainActivity.java class, I have used:</p>

<pre><code>static {
    try {
        Security.insertProviderAt(Conscrypt.newProvider(), 1);

    } catch (NoClassDefFoundError e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>I get the following crash:</p>

<p><em>java.lang.UnsatisfiedLinkError: No implementation found for java.lang.String[] org.conscrypt.NativeCrypto.get_cipher_names(java.lang.String) (tried Java_org_conscrypt_NativeCrypto_get_1cipher_1names and Java_org_conscrypt_NativeCrypto_get_1cipher_1names__Ljava_lang_String_2)</em></p>

<p>Do you know if Conscript can be used with current Android API versions?</p>

<p>Thanks</p>
","<p>I have received an answer from the GoogleGroup dedicated to Conscrypt. The Conscrypt documentation was lacking some instructions about how to use it on Android (this is fixed now). On Android, App/build.gradle should contain:</p>

<pre><code>compile 'org.conscrypt:conscrypt-android:1.1.4'
</code></pre>

<p>I had a ""java.lang.UnsatisfiedLinkError"" because I was using:</p>

<pre><code>compile 'org.conscrypt:conscrypt-openjdk:1.1.3:'
</code></pre>

<p>This is wrong because this line is for OpenJDK.</p>

<p>On more thing: I have been told that Conscrypt on Android works as far back as API level 9 (Gingerbread).</p>
","1483","<java><android><bouncycastle><jce><boringssl>","2","2","2","2018-07-16 14:55:34","51364677","0","","","","","2018-07-11 08:03:38",""
"36973078","MessageDigest.getInstance(algorithm) always throwing NoSuchAlgorithmException","<p>I'm creating a simple password vault/generator, and right now I'm working on the vault portion of my code, and am writing code for encrypting passwords. I'm using MessageDigest.</p>

<p>However when I try to choose an algorithm it always throws a NoSuchAlgorithmException. I'm trying to use SHA-1 or SHA-256. I've looked everywhere and I can't find a solution. EDIT: I forgot to mention I've tried ""SHA-1"", ""SHA-256"", and ""MD5"". None work.</p>

<p>My method:</p>

<pre><code>private static String generateHash(String input) throws NoSuchAlgorithmException {
    MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256"");
    messageDigest.update(input.getBytes());
    String encryptedString = new String(messageDigest.digest());
    System.out.println(""encryptedString :: "" + encryptedString);
    return encryptedString;
}
</code></pre>

<p>(I'm only printing out encryptedString for debugging purposes)</p>

<p>I'm using JDK 1.8.0_91, and IntelliJ IDEA 1.5.0.2.</p>

<p><strong>EDIT:</strong> So I figured out what was wrong. Instead of using <code>throws NoSuchAlgorithmException</code>, I need to put my code into a try/catch block catching <code>NoSuchAlgorithmException</code>. I don't know why but it fixed my issue.</p>
","<p>According to Oracle's documentation on the MessageDigest class:</p>

<blockquote>
  <p>Every implementation of the Java platform is required to support the following standard MessageDigest algorithms:</p>
  
  <p>MD5, SHA-1, SHA-256</p>
</blockquote>

<p>Oracle's JVM supports MD2, MD5, SHA-1, SHA-256, SHA-384, and SHA-512</p>
","1480","<java><hash><jce>","4","0","2","2016-05-02 00:57:48","","3","4","6278860","","2016-05-02 00:57:48","2016-05-01 23:18:48",""
"36973078","MessageDigest.getInstance(algorithm) always throwing NoSuchAlgorithmException","<p>I'm creating a simple password vault/generator, and right now I'm working on the vault portion of my code, and am writing code for encrypting passwords. I'm using MessageDigest.</p>

<p>However when I try to choose an algorithm it always throws a NoSuchAlgorithmException. I'm trying to use SHA-1 or SHA-256. I've looked everywhere and I can't find a solution. EDIT: I forgot to mention I've tried ""SHA-1"", ""SHA-256"", and ""MD5"". None work.</p>

<p>My method:</p>

<pre><code>private static String generateHash(String input) throws NoSuchAlgorithmException {
    MessageDigest messageDigest = MessageDigest.getInstance(""SHA-256"");
    messageDigest.update(input.getBytes());
    String encryptedString = new String(messageDigest.digest());
    System.out.println(""encryptedString :: "" + encryptedString);
    return encryptedString;
}
</code></pre>

<p>(I'm only printing out encryptedString for debugging purposes)</p>

<p>I'm using JDK 1.8.0_91, and IntelliJ IDEA 1.5.0.2.</p>

<p><strong>EDIT:</strong> So I figured out what was wrong. Instead of using <code>throws NoSuchAlgorithmException</code>, I need to put my code into a try/catch block catching <code>NoSuchAlgorithmException</code>. I don't know why but it fixed my issue.</p>
","<p>SHA-128 which you mentioned in your original unedited question is not supported. The supported Message Digest algorithms are given in the <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#MessageDigest"" rel=""nofollow"">Standard Names</a> document.</p>

<p>NB a message digest does not produce an 'encrypted string'.</p>
","1480","<java><hash><jce>","4","0","2","2016-05-02 00:57:48","","3","4","6278860","","2016-05-02 00:57:48","2016-05-01 23:18:48",""
"40376435","How to use PBEWITHHMACSHA256ANDAES_256 algorithm from JCE","<p>I'd like to use the <code>PBEWITHHMACSHA256ANDAES_256</code> algorithm from the <a href=""http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SunJCEProvider"" rel=""nofollow noreferrer"">SunJCE provider</a> in Java8. </p>

<p>It looks like the jars and all of the config is in place out-of-the-box in Java8 but I'm not able to use the <code>PBEWITHHMACSHA256ANDAES_256</code> algorithm.</p>

<p>I have these two jars:</p>

<pre><code>jdk1.8.0_40\jre\lib\jce.jar
jdk1.8.0_40\jre\lib\ext\sunjce_provider.jar
</code></pre>

<p>There's this entry in <code>jdk1.8.0_40\jre\lib\security\java.security</code></p>

<pre><code>security.provider.5=com.sun.crypto.provider.SunJCE
</code></pre>

<p>There's this entry in <code>jdk1.8.0_40\jre\lib\security\java.policy</code></p>

<pre><code>grant codeBase ""file:${{java.ext.dirs}}/*"" {
    permission java.security.AllPermission;
};
</code></pre>

<p>I can see <code>com.sun.crypto.provider.SunJCE</code> in the array when I call <code>Security.getProviders()</code></p>

<p>But the following code throws <code>EncryptionOperationNotPossibleException</code></p>

<pre><code>import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
import org.jasypt.encryption.pbe.config.SimpleStringPBEConfig;
import org.jasypt.exceptions.EncryptionOperationNotPossibleException;
import org.junit.Assert;
import org.junit.Test;

public class EncryptionTest {
    @Test
    public void test() {
        SimpleStringPBEConfig pbeConfig = new SimpleStringPBEConfig();
        pbeConfig.setAlgorithm(""PBEWITHHMACSHA256ANDAES_256"");
        pbeConfig.setPassword(""changeme"");
        StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
        encryptor.setConfig(pbeConfig);

        String encrypted = encryptor.encrypt(""foo"");
        String decrypted = encryptor.decrypt(encrypted);
        Assert.assertEquals(""foo"", decrypted);
    }
}
</code></pre>

<p>Exception</p>

<pre><code>org.jasypt.exceptions.EncryptionOperationNotPossibleException: Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine
    at org.jasypt.encryption.pbe.StandardPBEByteEncryptor.handleInvalidKeyException(StandardPBEByteEncryptor.java:999)
    at org.jasypt.encryption.pbe.StandardPBEByteEncryptor.encrypt(StandardPBEByteEncryptor.java:868)
    at org.jasypt.encryption.pbe.StandardPBEStringEncryptor.encrypt(StandardPBEStringEncryptor.java:642)
    at foo.bar.EncryptionTest.test(EncryptionTest.java:40)
</code></pre>

<p>Any ideas why PBEWITHHMACSHA256ANDAES_256 is throwing EncryptionOperationNotPossibleException?</p>
","<p>The exception mentions:</p>

<blockquote>
  <p>Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine</p>
</blockquote>

<p>This answer only tries to fix <em>that</em> issue. I've written <a href=""https://stackoverflow.com/a/40378415/180719""><em>another</em> answer</a> to help the following issue, since these are totally different.</p>

<p>If you live in a country that does allow it, you can go and download it from <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""nofollow noreferrer"">Oracle's website</a>.</p>

<p>Then, to install these unlimited strength packages, go into your <code>$JAVA_HOME/jre/lib/security/</code> folder (assuming you have a JDK).</p>

<p>There, backup your <code>local_policy.jar</code> and <code>US_export_policy.jar</code>.</p>

<p>Now unzip the <code>local_policy.jar</code> and <code>US_export_policy.jar</code> files from the zip file you downloaded into that folder, and restart your application. Your application now have access to unlimited strength JCE capabilities.</p>

<p>If anything goes wrong, revert the two files to their backup versions.</p>

<p>Please note that each JVM that will have to run this code must be ""patched"" this way.</p>
","1459","<java><security><aes><jce><sha2>","0","2","2","2016-11-02 12:01:05","","0","","1089967","","2016-11-02 09:51:44","2016-11-02 09:28:45",""
"40376435","How to use PBEWITHHMACSHA256ANDAES_256 algorithm from JCE","<p>I'd like to use the <code>PBEWITHHMACSHA256ANDAES_256</code> algorithm from the <a href=""http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SunJCEProvider"" rel=""nofollow noreferrer"">SunJCE provider</a> in Java8. </p>

<p>It looks like the jars and all of the config is in place out-of-the-box in Java8 but I'm not able to use the <code>PBEWITHHMACSHA256ANDAES_256</code> algorithm.</p>

<p>I have these two jars:</p>

<pre><code>jdk1.8.0_40\jre\lib\jce.jar
jdk1.8.0_40\jre\lib\ext\sunjce_provider.jar
</code></pre>

<p>There's this entry in <code>jdk1.8.0_40\jre\lib\security\java.security</code></p>

<pre><code>security.provider.5=com.sun.crypto.provider.SunJCE
</code></pre>

<p>There's this entry in <code>jdk1.8.0_40\jre\lib\security\java.policy</code></p>

<pre><code>grant codeBase ""file:${{java.ext.dirs}}/*"" {
    permission java.security.AllPermission;
};
</code></pre>

<p>I can see <code>com.sun.crypto.provider.SunJCE</code> in the array when I call <code>Security.getProviders()</code></p>

<p>But the following code throws <code>EncryptionOperationNotPossibleException</code></p>

<pre><code>import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
import org.jasypt.encryption.pbe.config.SimpleStringPBEConfig;
import org.jasypt.exceptions.EncryptionOperationNotPossibleException;
import org.junit.Assert;
import org.junit.Test;

public class EncryptionTest {
    @Test
    public void test() {
        SimpleStringPBEConfig pbeConfig = new SimpleStringPBEConfig();
        pbeConfig.setAlgorithm(""PBEWITHHMACSHA256ANDAES_256"");
        pbeConfig.setPassword(""changeme"");
        StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
        encryptor.setConfig(pbeConfig);

        String encrypted = encryptor.encrypt(""foo"");
        String decrypted = encryptor.decrypt(encrypted);
        Assert.assertEquals(""foo"", decrypted);
    }
}
</code></pre>

<p>Exception</p>

<pre><code>org.jasypt.exceptions.EncryptionOperationNotPossibleException: Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine
    at org.jasypt.encryption.pbe.StandardPBEByteEncryptor.handleInvalidKeyException(StandardPBEByteEncryptor.java:999)
    at org.jasypt.encryption.pbe.StandardPBEByteEncryptor.encrypt(StandardPBEByteEncryptor.java:868)
    at org.jasypt.encryption.pbe.StandardPBEStringEncryptor.encrypt(StandardPBEStringEncryptor.java:642)
    at foo.bar.EncryptionTest.test(EncryptionTest.java:40)
</code></pre>

<p>Any ideas why PBEWITHHMACSHA256ANDAES_256 is throwing EncryptionOperationNotPossibleException?</p>
","<p>Sorry to write <em>another</em> answer, but it seems we've progressed since the last answer. The problem is now slightly different, but enough to deserve another answer.</p>

<p>As you say, you ""only"" get an empty exception message now.</p>

<p>The problem seems to reside with the algorithm: using <code>PBEWITHHMACSHA256ANDAES_256</code> always throws an exception.</p>

<p>This is because AES requires extra parameters, namely the IV. I found that <a href=""https://stackoverflow.com/a/31918418/180719"">IV are <strong>not supported</strong> by Jasypt</a>.</p>

<p>If you want to go further with that specific algorithm, I suggest you implement it manually without Jasypt. An implementation is present in the above link.</p>
","1459","<java><security><aes><jce><sha2>","0","2","2","2016-11-02 12:01:05","","0","","1089967","","2016-11-02 09:51:44","2016-11-02 09:28:45",""
"1257389","Get REAL X.509 data from RFC1421 formatted certificate","<p>We have a Java application that stores RSA public keys and allows a user to encrypt a short stream of information with any of the keys. The application also allows the user to import a new key certificate into the keystore. When we load the certificate from a file, we want to use the common name (CN) as the alias. Here is the problem:</p>

<pre><code>CertificateFactory x509CertFact = CertificateFactory.getInstance(""X.509"");
X509Certificate cert = x509CertFact.generateCertificate(certificateInputStream);
String alias = cert.getSubjectX500Principal().getName();

assert alias.equals(""CN=CommonName, OU=TestCo...""); // FAILS
assert alais.equals(""cn=commonname, ou=testco...""); // PASSES
</code></pre>

<p>We know for a fact that the subject name in the file has mixed casing and we need to preserve that casing. Does anyone know how to get more flexible X.509 support from the JCE in Java6?</p>

<p>We've thought of using the BouncyCastle lightweight API, but documentation is almost non-existent.</p>

<p>EDIT:
Using JDK 6u11 Here is the list of security providers from java.security:</p>

<pre><code>security.provider.1=sun.security.provider.Sun
security.provider.2=sun.security.rsa.SunRsaSign
security.provider.3=com.sun.net.ssl.internal.ssl.Provider
security.provider.4=com.sun.crypto.provider.SunJCE
security.provider.5=sun.security.jgss.SunProvider
security.provider.6=com.sun.security.sasl.Provider
security.provider.7=org.jcp.xml.dsig.internal.dom.XMLDSigRI
security.provider.8=sun.security.smartcardio.SunPCSC
security.provider.9=sun.security.mscapi.SunMSCAPI
security.provider.10=org.bouncycastle.jce.provider.BouncyCastleProvider
</code></pre>

<p>The certificate:</p>

<pre>
-----BEGIN CERTIFICATE-----
MIIDHjCCAtugAwIBAgIESnr4OzALBgcqhkjOOAQDBQAwcjELMAkGA1UEBhMCVVMxFTATBgNVBAoT
DEdlbWFsdG8gSW5jLjEnMCUGA1UECxMeU29sdXRpb25zIGFuZCBTcGVjaWFsIFByb2plY3RzMSMw
IQYDVQQDExpGUkJCTHVuYUNyeXB0b1NlcnZlci0xLjAuMDAeFw0wOTA4MDYxNTM1MjNaFw0wOTEx
MDQxNTM1MjNaMHIxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxHZW1hbHRvIEluYy4xJzAlBgNVBAsT
HlNvbHV0aW9ucyBhbmQgU3BlY2lhbCBQcm9qZWN0czEjMCEGA1UEAxMaRlJCQkx1bmFDcnlwdG9T
ZXJ2ZXItMS4wLjAwggG3MIIBLAYHKoZIzjgEATCCAR8CgYEA/X9TgR11EilS30qcLuzk5/YRt1I8
70QAwx4/gLZRJmlFXUAiUftZPY1Y+r/F9bow9subVWzXgTuAHTRv8mZgt2uZUKWkn5/oBHsQIsJP
u6nX/rfGG/g7V+fGqKYVDwT7g/bTxR7DAjVUE1oWkTL2dfOuK2HXKu/yIgMZndFIAccCFQCXYFCP
FSMLzLKSuYKi64QL8Fgc9QKBgQD34aCF1ps93su8q1w2uFe5eZSvu/o66oL5V0wLPQeCZ1FZV466
1FlP5nEHEIGAtEkWcSPoTCgWE7fPCTKMyKbhPBZ6i1R8jSjgo64eK7OmdZFuo38L+iE1YvH7YnoB
JDvMpPG+qFGQiaiD3+Fa5Z8GkotmXoB7VSVkAUw7/s9JKgOBhAACgYBHBBVNzuoXgpPFPkSN71rI
MKkSIUAVE7iLagFCklCEvHlh1UxyRhCWNh/UazaJzHRZofWlVPRGmgtl+J6BJRJIDorPqt8FfifY
fpbAbCQctMToFF5QqggumOlJozXyfV9eyYyNn+Y4yZDr8JKq70WX/S2M+Oo1+SBJsXMTeDdfkDAL
BgcqhkjOOAQDBQADMAAwLQIUA+VcqEYMHwXdKY4XC+oO/zF/pRkCFQCDKAS5HpSMazbZgToEEYft
QFJSvw==
-----END CERTIFICATE-----
</pre>
","<p>If you mean that you are literally using the identity operator (<code>==</code>) to test, then the assertion should always fail. Use alias.equals(""CN=CommonName, OU=..."") instead.</p>

<p>However, assuming that's not the problem, can add:</p>

<pre><code>System.out.println(x509CertFact.getProvider());
System.out.println(alias);
</code></pre>

<p>at the appropriate points in the code and post the results? It might turn up more leads. Posting the certificate you are loading (in text-friendly PEM format) would be helpful too, if it isn't disclosing any personally-identifying information.</p>
","1434","<java><x509certificate><bouncycastle><jce>","0","0","3","2009-08-11 17:22:34","1257510","1","1","153994","","2009-08-11 17:22:34","2009-08-10 21:45:57",""
"1257389","Get REAL X.509 data from RFC1421 formatted certificate","<p>We have a Java application that stores RSA public keys and allows a user to encrypt a short stream of information with any of the keys. The application also allows the user to import a new key certificate into the keystore. When we load the certificate from a file, we want to use the common name (CN) as the alias. Here is the problem:</p>

<pre><code>CertificateFactory x509CertFact = CertificateFactory.getInstance(""X.509"");
X509Certificate cert = x509CertFact.generateCertificate(certificateInputStream);
String alias = cert.getSubjectX500Principal().getName();

assert alias.equals(""CN=CommonName, OU=TestCo...""); // FAILS
assert alais.equals(""cn=commonname, ou=testco...""); // PASSES
</code></pre>

<p>We know for a fact that the subject name in the file has mixed casing and we need to preserve that casing. Does anyone know how to get more flexible X.509 support from the JCE in Java6?</p>

<p>We've thought of using the BouncyCastle lightweight API, but documentation is almost non-existent.</p>

<p>EDIT:
Using JDK 6u11 Here is the list of security providers from java.security:</p>

<pre><code>security.provider.1=sun.security.provider.Sun
security.provider.2=sun.security.rsa.SunRsaSign
security.provider.3=com.sun.net.ssl.internal.ssl.Provider
security.provider.4=com.sun.crypto.provider.SunJCE
security.provider.5=sun.security.jgss.SunProvider
security.provider.6=com.sun.security.sasl.Provider
security.provider.7=org.jcp.xml.dsig.internal.dom.XMLDSigRI
security.provider.8=sun.security.smartcardio.SunPCSC
security.provider.9=sun.security.mscapi.SunMSCAPI
security.provider.10=org.bouncycastle.jce.provider.BouncyCastleProvider
</code></pre>

<p>The certificate:</p>

<pre>
-----BEGIN CERTIFICATE-----
MIIDHjCCAtugAwIBAgIESnr4OzALBgcqhkjOOAQDBQAwcjELMAkGA1UEBhMCVVMxFTATBgNVBAoT
DEdlbWFsdG8gSW5jLjEnMCUGA1UECxMeU29sdXRpb25zIGFuZCBTcGVjaWFsIFByb2plY3RzMSMw
IQYDVQQDExpGUkJCTHVuYUNyeXB0b1NlcnZlci0xLjAuMDAeFw0wOTA4MDYxNTM1MjNaFw0wOTEx
MDQxNTM1MjNaMHIxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxHZW1hbHRvIEluYy4xJzAlBgNVBAsT
HlNvbHV0aW9ucyBhbmQgU3BlY2lhbCBQcm9qZWN0czEjMCEGA1UEAxMaRlJCQkx1bmFDcnlwdG9T
ZXJ2ZXItMS4wLjAwggG3MIIBLAYHKoZIzjgEATCCAR8CgYEA/X9TgR11EilS30qcLuzk5/YRt1I8
70QAwx4/gLZRJmlFXUAiUftZPY1Y+r/F9bow9subVWzXgTuAHTRv8mZgt2uZUKWkn5/oBHsQIsJP
u6nX/rfGG/g7V+fGqKYVDwT7g/bTxR7DAjVUE1oWkTL2dfOuK2HXKu/yIgMZndFIAccCFQCXYFCP
FSMLzLKSuYKi64QL8Fgc9QKBgQD34aCF1ps93su8q1w2uFe5eZSvu/o66oL5V0wLPQeCZ1FZV466
1FlP5nEHEIGAtEkWcSPoTCgWE7fPCTKMyKbhPBZ6i1R8jSjgo64eK7OmdZFuo38L+iE1YvH7YnoB
JDvMpPG+qFGQiaiD3+Fa5Z8GkotmXoB7VSVkAUw7/s9JKgOBhAACgYBHBBVNzuoXgpPFPkSN71rI
MKkSIUAVE7iLagFCklCEvHlh1UxyRhCWNh/UazaJzHRZofWlVPRGmgtl+J6BJRJIDorPqt8FfifY
fpbAbCQctMToFF5QqggumOlJozXyfV9eyYyNn+Y4yZDr8JKq70WX/S2M+Oo1+SBJsXMTeDdfkDAL
BgcqhkjOOAQDBQADMAAwLQIUA+VcqEYMHwXdKY4XC+oO/zF/pRkCFQCDKAS5HpSMazbZgToEEYft
QFJSvw==
-----END CERTIFICATE-----
</pre>
","<p>Can't reproduce the error. What JCE do you use? We use the Sun's JCE from Java 5 and 6 and we always get the DN in original case.</p>
","1434","<java><x509certificate><bouncycastle><jce>","0","0","3","2009-08-11 17:22:34","1257510","1","1","153994","","2009-08-11 17:22:34","2009-08-10 21:45:57",""
"1257389","Get REAL X.509 data from RFC1421 formatted certificate","<p>We have a Java application that stores RSA public keys and allows a user to encrypt a short stream of information with any of the keys. The application also allows the user to import a new key certificate into the keystore. When we load the certificate from a file, we want to use the common name (CN) as the alias. Here is the problem:</p>

<pre><code>CertificateFactory x509CertFact = CertificateFactory.getInstance(""X.509"");
X509Certificate cert = x509CertFact.generateCertificate(certificateInputStream);
String alias = cert.getSubjectX500Principal().getName();

assert alias.equals(""CN=CommonName, OU=TestCo...""); // FAILS
assert alais.equals(""cn=commonname, ou=testco...""); // PASSES
</code></pre>

<p>We know for a fact that the subject name in the file has mixed casing and we need to preserve that casing. Does anyone know how to get more flexible X.509 support from the JCE in Java6?</p>

<p>We've thought of using the BouncyCastle lightweight API, but documentation is almost non-existent.</p>

<p>EDIT:
Using JDK 6u11 Here is the list of security providers from java.security:</p>

<pre><code>security.provider.1=sun.security.provider.Sun
security.provider.2=sun.security.rsa.SunRsaSign
security.provider.3=com.sun.net.ssl.internal.ssl.Provider
security.provider.4=com.sun.crypto.provider.SunJCE
security.provider.5=sun.security.jgss.SunProvider
security.provider.6=com.sun.security.sasl.Provider
security.provider.7=org.jcp.xml.dsig.internal.dom.XMLDSigRI
security.provider.8=sun.security.smartcardio.SunPCSC
security.provider.9=sun.security.mscapi.SunMSCAPI
security.provider.10=org.bouncycastle.jce.provider.BouncyCastleProvider
</code></pre>

<p>The certificate:</p>

<pre>
-----BEGIN CERTIFICATE-----
MIIDHjCCAtugAwIBAgIESnr4OzALBgcqhkjOOAQDBQAwcjELMAkGA1UEBhMCVVMxFTATBgNVBAoT
DEdlbWFsdG8gSW5jLjEnMCUGA1UECxMeU29sdXRpb25zIGFuZCBTcGVjaWFsIFByb2plY3RzMSMw
IQYDVQQDExpGUkJCTHVuYUNyeXB0b1NlcnZlci0xLjAuMDAeFw0wOTA4MDYxNTM1MjNaFw0wOTEx
MDQxNTM1MjNaMHIxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxHZW1hbHRvIEluYy4xJzAlBgNVBAsT
HlNvbHV0aW9ucyBhbmQgU3BlY2lhbCBQcm9qZWN0czEjMCEGA1UEAxMaRlJCQkx1bmFDcnlwdG9T
ZXJ2ZXItMS4wLjAwggG3MIIBLAYHKoZIzjgEATCCAR8CgYEA/X9TgR11EilS30qcLuzk5/YRt1I8
70QAwx4/gLZRJmlFXUAiUftZPY1Y+r/F9bow9subVWzXgTuAHTRv8mZgt2uZUKWkn5/oBHsQIsJP
u6nX/rfGG/g7V+fGqKYVDwT7g/bTxR7DAjVUE1oWkTL2dfOuK2HXKu/yIgMZndFIAccCFQCXYFCP
FSMLzLKSuYKi64QL8Fgc9QKBgQD34aCF1ps93su8q1w2uFe5eZSvu/o66oL5V0wLPQeCZ1FZV466
1FlP5nEHEIGAtEkWcSPoTCgWE7fPCTKMyKbhPBZ6i1R8jSjgo64eK7OmdZFuo38L+iE1YvH7YnoB
JDvMpPG+qFGQiaiD3+Fa5Z8GkotmXoB7VSVkAUw7/s9JKgOBhAACgYBHBBVNzuoXgpPFPkSN71rI
MKkSIUAVE7iLagFCklCEvHlh1UxyRhCWNh/UazaJzHRZofWlVPRGmgtl+J6BJRJIDorPqt8FfifY
fpbAbCQctMToFF5QqggumOlJozXyfV9eyYyNn+Y4yZDr8JKq70WX/S2M+Oo1+SBJsXMTeDdfkDAL
BgcqhkjOOAQDBQADMAAwLQIUA+VcqEYMHwXdKY4XC+oO/zF/pRkCFQCDKAS5HpSMazbZgToEEYft
QFJSvw==
-----END CERTIFICATE-----
</pre>
","<p>Try using <a href=""http://java.sun.com/javase/6/docs/api/javax/security/auth/x500/X500Principal.html#getName(java.lang.String)"" rel=""nofollow noreferrer"">X500Principal#getName(String)</a> to get the DN in the format of your choice.  Then you can parse the common name out of that.</p>

<p>Alternatively, if you're mapping an alias to an actual certificate you could store the ""alias"" in all caps (and query it in all caps) but you would still have the original casing from the mapped certificate</p>
","1434","<java><x509certificate><bouncycastle><jce>","0","1","3","2009-08-11 17:22:34","1257510","1","1","153994","","2009-08-11 17:22:34","2009-08-10 21:45:57",""
"12897937","Joomla 2.5 - how to open specific menu item in lightbox?","<p>I am developing a site using Joomla 2.5 and the JCE editor w/ the Mediabox plugin
installed and enabled.</p>

<p>I am trying to have 3 of my menu items open in a lighbox. For each of the menu
items I went to Link Type Options and under Link CSS Style I have added the following:</p>

<p>jcepopup noicon</p>

<p>When I save the items and refresh the front end of the site (even going so far as
clearing my cache), the jcepopup and noicon classes are not applied to any of those
three menu items.</p>

<p>Please help!</p>
","<p>This is due to the menu module that you are using. Just because the parameters exists in the menu item does not mean that the menu module uses them. You will probably need to create a template override for the menu module that includes the classes in the links.</p>
","1431","<lightbox><joomla2.5><jce>","0","0","1","2012-10-16 13:07:05","","0","","","","","2012-10-15 14:36:44",""
"15248199","Does java cryptography extensions(JCE) come bundled with the JRE?","<p>I need to be certain that jce is available even in JRE environments out of the box. After furious googling I only managed to verify that jce comes bundled with the JDK after Java 1.4. Does the jce come bundled with the plain JRE download as well?</p>

<p>Could you point out where you found the information, so I can verify for myself and know what I missed?</p>
","<p>yes, the jce is included in all versions of java these days, <a href=""http://docs.oracle.com/javase/1.4.2/docs/guide/security/jce/JCERefGuide.html#WhatsNew"" rel=""nofollow"">relevant announcement</a>.</p>
","1389","<java><bundle><java-7><java-6><jce>","0","3","3","2013-03-06 15:16:16","15248225","2","","","","","2013-03-06 13:08:30",""
"15248199","Does java cryptography extensions(JCE) come bundled with the JRE?","<p>I need to be certain that jce is available even in JRE environments out of the box. After furious googling I only managed to verify that jce comes bundled with the JDK after Java 1.4. Does the jce come bundled with the plain JRE download as well?</p>

<p>Could you point out where you found the information, so I can verify for myself and know what I missed?</p>
","<p>Have you had a look at <code>$JRE_HOME/lib/jce.jar</code>?</p>

<pre><code> ~$ jar tvf jce.jar
 6399 Thu Jul 27 16:03:42 CEST 2006 META-INF/MANIFEST.MF
 6305 Thu Jul 27 16:03:42 CEST 2006 META-INF/JCE_RSA.SF
 2015 Thu Jul 27 16:03:42 CEST 2006 META-INF/JCE_RSA.RSA
    0 Thu Jul 27 16:03:26 CEST 2006 META-INF/
    0 Thu Jul 27 16:03:24 CEST 2006 javax/
    0 Thu Jul 27 16:03:24 CEST 2006 javax/crypto/
    0 Thu Jul 27 16:03:24 CEST 2006 javax/crypto/interfaces/
  210 Thu Jul 27 16:03:24 CEST 2006 javax/crypto/interfaces/DHKey.class
  330 Thu Jul 27 16:03:24 CEST 2006 javax/crypto/interfaces/DHPublicKey.class
 ...etc
</code></pre>

<p>Note that the unlimited strength crypto policy files is (still) a <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow"">separate download</a>.</p>

<p>Cheers,</p>
","1389","<java><bundle><java-7><java-6><jce>","0","3","3","2013-03-06 15:16:16","15248225","2","","","","","2013-03-06 13:08:30",""
"15248199","Does java cryptography extensions(JCE) come bundled with the JRE?","<p>I need to be certain that jce is available even in JRE environments out of the box. After furious googling I only managed to verify that jce comes bundled with the JDK after Java 1.4. Does the jce come bundled with the plain JRE download as well?</p>

<p>Could you point out where you found the information, so I can verify for myself and know what I missed?</p>
","<p>As mentioned, the JCE does come with all versions of Java.</p>

<p>However, if you wish to implement certain key sizes, be aware that you will need the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html"" rel=""nofollow"">Java Unlimited Strength Policy files</a>. This is due to US laws on Key sizes.</p>
","1389","<java><bundle><java-7><java-6><jce>","0","1","3","2013-03-06 15:16:16","15248225","2","","","","","2013-03-06 13:08:30",""
"27472708","PDFbox Exception - Exception in thread ""main"" java.lang.VerifyError","<p>I''m trying to run the sample code from pdfbox examples but the code finishes with creating PDF with signature with exceptions below and not able to verify signature when I open it in Adobe PDF any help?</p>

<p>Exception in thread ""main"" java.lang.VerifyError: (class: org/bouncycastle/cms/CMSSignedGenerator, method: getAttributeSet signature: (Lorg/bouncycastle/asn1/cms/AttributeTable;)Lorg/bouncycastle/asn1/ASN1Set;) Incompatible argument to function
    at org.apache.pdfbox.examples.signature.CreateVisibleSignature.sign(CreateVisibleSignature.java:218)
    at org.apache.pdfbox.pdfwriter.COSWriter.doWriteSignature(COSWriter.java:784)
    at org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument(COSWriter.java:1171)
    at org.apache.pdfbox.cos.COSDocument.accept(COSDocument.java:568)
    at org.apache.pdfbox.pdfwriter.COSWriter.write(COSWriter.java:1517)
    at org.apache.pdfbox.pdmodel.PDDocument.saveIncremental(PDDocument.java:1391)
    at org.apache.pdfbox.examples.signature.CreateVisibleSignature.signPDF(CreateVisibleSignature.java:193)
    at org.apache.pdfbox.examples.signature.CreateVisibleSignature.main(CreateVisibleSignature.java:318)</p>

<pre><code>/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.pdfbox.examples.signature;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Security;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertStore;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CollectionCertStoreParameters;
import java.security.cert.X509Certificate;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.List;

import org.apache.pdfbox.exceptions.COSVisitorException;
import org.apache.pdfbox.exceptions.SignatureException;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.interactive.digitalsignature.PDSignature;
import org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface;
import org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureOptions;
import org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSigProperties;
import org.apache.pdfbox.pdmodel.interactive.digitalsignature.visible.PDVisibleSignDesigner;
import org.bouncycastle.cms.CMSSignedData;
import org.bouncycastle.cms.CMSSignedDataGenerator;
import org.bouncycastle.cms.CMSSignedGenerator;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

/**
 * &lt;p&gt;
 * This is an example for signing a pdf with bouncy castle.
 * &lt;/p&gt;
 * &lt;p&gt;
 * And also you can create visible signature too
 * &lt;/p&gt;
 * &lt;p&gt;
 * A keystore can be created with the java keytool (e.g. keytool -genkeypair
 * -storepass 123456 -storetype pkcs12 -alias test -validity 365 -v -keyalg RSA
 * -keystore keystore.p12 )
 * &lt;/p&gt;
 * 
 * @author Vakhtang koroghlishvili (Gogebashvili)
 */
public class CreateVisibleSignature implements SignatureInterface {

    private static BouncyCastleProvider provider = new BouncyCastleProvider();

    private PrivateKey privKey;

    private Certificate[] cert;

    private SignatureOptions options;


    // statically add provider, if it is not already there
    private static final boolean firstProvider = true;  
    static {
            if(Security.getProvider(""BC"") == null) {
                BouncyCastleProvider bcProv = new BouncyCastleProvider();
                if(firstProvider) {
                    Security.insertProviderAt(bcProv, 1);
                } else {
                    Security.addProvider(bcProv);
                }
            }
        }

    /**
     * Initialize the signature creator with a keystore (pkcs12) and pin that
     * should be used for the signature.
     * 
     * @param keystore
     *            is a pkcs12 keystore.
     * @param pin
     *            is the pin for the keystore / private key
     */
    public CreateVisibleSignature(KeyStore keystore, char[] pin) {
        try {
            /*
             * grabs the first alias from the keystore and get the private key.
             * An alternative method or constructor could be used for setting a
             * specific alias that should be used.
             */
            Enumeration&lt;String&gt; aliases = keystore.aliases();
            String alias = null;
            if (aliases.hasMoreElements()) {
                alias = aliases.nextElement();
            } else {
                throw new RuntimeException(""Could not find alias"");
            }
            privKey = (PrivateKey) keystore.getKey(alias, pin);
            cert = keystore.getCertificateChain(alias);
        } catch (KeyStoreException e) {
            e.printStackTrace();
        } catch (UnrecoverableKeyException e) {
            System.err.println(""Could not extract private key."");
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""Unknown algorithm."");
            e.printStackTrace();
        }
    }

    /**
     * Signs the given pdf file.
     * 
     * @param document
     *            is the pdf document
     * @param signatureProperties
     * @return the signed pdf document
     * @throws IOException
     * @throws COSVisitorException
     * @throws SignatureException
     */
    public File signPDF(File document,
            PDVisibleSigProperties signatureProperties) throws IOException,
            COSVisitorException, SignatureException {
        byte[] buffer = new byte[8 * 1024];
        if (document == null || !document.exists()) {
            new RuntimeException(""Document for signing does not exist"");
        }

        // creating output document and prepare the IO streams.
        String name = document.getName();
        String substring = name.substring(0, name.lastIndexOf("".""));

        File outputDocument = new File(document.getParent(), substring
                + ""_signed.pdf"");
        FileInputStream fis = new FileInputStream(document);
        FileOutputStream fos = new FileOutputStream(outputDocument);

        int c;
        while ((c = fis.read(buffer)) != -1) {
            fos.write(buffer, 0, c);
        }
        fis.close();
        fis = new FileInputStream(outputDocument);

        // load document
        PDDocument doc = PDDocument.load(document);

        // create signature dictionary
        PDSignature signature = new PDSignature();
        signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE); // default filter
        // subfilter for basic and PAdES Part 2 signatures
        signature.setSubFilter(PDSignature.SUBFILTER_ADBE_PKCS7_DETACHED);
        signature.setName(""signer name"");
        signature.setLocation(""signer location"");
        signature.setReason(""reason for signature"");

        // the signing date, needed for valid signature
        signature.setSignDate(Calendar.getInstance());

        // register signature dictionary and sign interface

        if (signatureProperties != null
                &amp;&amp; signatureProperties.isVisualSignEnabled()) {
            options = new SignatureOptions();
            options.setVisualSignature(signatureProperties);
            // options.setPage(signatureProperties.getPage());
            // options.setPreferedSignatureSize(signatureProperties.getPreferredSize());
            doc.addSignature(signature, this, options);
        } else {
            doc.addSignature(signature, this);
        }

        // write incremental (only for signing purpose)
        doc.saveIncremental(fis, fos);

        return outputDocument;
    }

    /**
     * &lt;p&gt;
     * SignatureInterface implementation.
     * &lt;/p&gt;
     * &lt;p&gt;
     * This method will be called from inside of the pdfbox and create the pkcs7
     * signature. The given InputStream contains the bytes that are providen by
     * the byte range.
     * &lt;/p&gt;
     * &lt;p&gt;
     * This method is for internal use only.
     * &lt;/p&gt;
     * &lt;p&gt;
     * Here the user should use his favorite cryptographic library and implement
     * a pkcs7 signature creation.
     * &lt;/p&gt;
     */
    public byte[] sign(InputStream content) throws SignatureException,
            IOException {
        CMSProcessableInputStream input = new CMSProcessableInputStream(content);
        CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
        // CertificateChain
        List&lt;Certificate&gt; certList = Arrays.asList(cert);

        CertStore certStore = null;
        try {
            certStore = CertStore.getInstance(""Collection"",
                    new CollectionCertStoreParameters(certList), provider);
            gen.addSigner(privKey, (X509Certificate) certList.get(0),
                    CMSSignedGenerator.DIGEST_SHA256);
            gen.addCertificatesAndCRLs(certStore);
            CMSSignedData signedData = gen.generate(input, false, provider);
            return signedData.getEncoded();
        } catch (Exception e) {
            // should be handled
            System.err.println(""Error while creating pkcs7 signature."");
            e.printStackTrace();
        }
        throw new RuntimeException(""Problem while preparing signature"");
    }

    /**
     * Arguments are [0] key store [1] pin [2] document that will be signed [3]
     * image of visible signature
     */


    public static void main(String[] args) throws KeyStoreException,
            NoSuchAlgorithmException, CertificateException,
            FileNotFoundException, IOException, COSVisitorException,
            SignatureException {

        if(Security.getProvider(""BC"") != null) {
            System.out.printf(""Bouncy Castle Added!!!"");
        }else{
            System.out.printf(""Bouncy Castle Not Found!!!!!!!!"");
        }

        File ksFile = new File(""keystore.p12"");
        KeyStore keystore = KeyStore.getInstance(""PKCS12"", provider);
        char[] pin = ""123456"".toCharArray();
        keystore.load(new FileInputStream(ksFile), pin);

        File document = new File(""doc.pdf"");

        CreateVisibleSignature signing = new CreateVisibleSignature(
                keystore, pin.clone());

        FileInputStream image = new FileInputStream(""sign.jpg"");

        PDVisibleSignDesigner visibleSig = new PDVisibleSignDesigner(
                ""doc.pdf"", image, 1);
        visibleSig.xAxis(0).yAxis(0).zoom(-50)
                .signatureFieldName(""signature"");

        PDVisibleSigProperties signatureProperties = new PDVisibleSigProperties();

        signatureProperties.signerName(""name"").signerLocation(""location"")
                .signatureReason(""Security"").preferredSize(0).page(1)
                .visualSignEnabled(true).setPdVisibleSignature(visibleSig)
                .buildSignature();

        signing.signPDF(document, signatureProperties);

    }

    /**
     * This will print the usage for this program.
     */
    private static void usage() {
        System.err.println(""Usage: java "" + CreateSignature.class.getName()
                + "" &lt;pkcs12-keystore-file&gt; &lt;pin&gt; &lt;input-pdf&gt; &lt;sign-image&gt;"");
    }
}
</code></pre>
","<p>Use version 1.44 of the Bouncy Castle libs, as mentioned here:
<a href=""https://pdfbox.apache.org/dependencies.html"" rel=""nofollow"">https://pdfbox.apache.org/dependencies.html</a></p>

<p>The Bouncy Castle libs are often not backwards compatible, that is why.</p>
","1378","<java><apache><bouncycastle><pdfbox><jce>","0","1","1","2014-12-15 11:29:24","27482870","3","","277884","","2014-12-14 19:13:16","2014-12-14 18:43:40",""
"44808132","Using openssh public key (ecdsa-sha2-nistp256) with Java Security","<p>Is there a Java library/example to read an openssh format ecdsa public key to a JCE <code>PublicKey</code> in Java? I want to use EC for <a href=""https://jwt.io"" rel=""nofollow noreferrer"">JWT</a> .</p>

<p>The format I'm trying to read is as per authorized_keys, or Github API (e.g. <a href=""https://api.github.com/users/davidcarboni/keys"" rel=""nofollow noreferrer"">https://api.github.com/users/davidcarboni/keys</a>):  <code>ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK8hPtB72/sfYgNw1WTska2DNOJFx+QhUxuV6OLINSD2ty+6gxcM8yZrvMqWdMePGRb2cGh8L/0bGOk+64IQ/pM=</code></p>

<p>I've found this answer, which is fine for RSA and DSS:
<a href=""https://stackoverflow.com/questions/3531506/using-public-key-from-authorized-keys-with-java-security"">Using public key from authorized_keys with Java security</a>, and this discussion of the openssh format for ECDSA: <a href=""https://security.stackexchange.com/questions/129910/ecdsa-why-do-ssh-keygen-and-java-generated-public-keys-have-different-sizes"">https://security.stackexchange.com/questions/129910/ecdsa-why-do-ssh-keygen-and-java-generated-public-keys-have-different-sizes</a> </p>

<p>However I'm getting lost trying to adapt the RSS/DSA code for ECDSA - I'm not sure how to set up an <a href=""https://docs.oracle.com/javase/7/docs/api/java/security/spec/ECPublicKeySpec.html"" rel=""nofollow noreferrer""><code>ECPublicKeySpec</code></a>. It needs <code>ECPoint</code>, <code>EllipticCurve</code>, <code>ECParameterSpec</code>, <code>ECField</code>. The openssh format only contains two integers, which makes sense for <code>ECPoint</code>, but I don't know how to set up the rest.</p>

<p>I've been poking around a bunch of libraries, including <a href=""http://www.jcraft.com/jsch/"" rel=""nofollow noreferrer"">jsch</a>, <a href=""https://github.com/hierynomus/sshj"" rel=""nofollow noreferrer"">sshj</a>, <a href=""https://www.sshtools.com/en/products/opensource/"" rel=""nofollow noreferrer"">ssh-tools</a> and good old <a href=""http://www.bouncycastle.org/"" rel=""nofollow noreferrer"">Bouncycastle</a>. The closest I have is:</p>

<p><code>com.jcraft.jsch.KeyPair load = com.jcraft.jsch.KeyPair.load(jsch, null, bytes[openSshKey]);</code></p>

<p>Which loads the key fine, but doesn't get me to a JCE <code>PublicKey</code> - just a <code>byte[] getPublicKeyBlob()</code> method.</p>

<p>Am I missing something obvious?</p>
","<p>I've found a way to do this using Bouncycastle (but would like to find a JCE way).</p>

<p>Adapting the code from <a href=""https://stackoverflow.com/questions/3531506/using-public-key-from-authorized-keys-with-java-security"">Using public key from authorized_keys with Java security</a>, and refering to <a href=""https://tools.ietf.org/html/rfc5656#section-3.1"" rel=""nofollow noreferrer"">RFC 5656, section 3.1</a>, the following block added to <code>decodePublicKey</code> will parse the single BigInt value Q, which is ""the public key encoded from an elliptic curve point"":</p>

<pre><code>if (type.startsWith(""ecdsa-sha2-"") &amp;&amp;
            (type.endsWith(""nistp256"") || type.endsWith(""nistp384"") || type.endsWith(""nistp521""))) {

        // Based on RFC 5656, section 3.1 (https://tools.ietf.org/html/rfc5656#section-3.1)

        // The string [identifier] is the identifier of the elliptic curve
        // domain parameters.  The format of this string is specified in
        // Section 6.1 (https://tools.ietf.org/html/rfc5656#section-6.1).
        // Information on the REQUIRED and RECOMMENDED sets of
        // elliptic curve domain parameters for use with this algorithm can be
        // found in Section 10 (https://tools.ietf.org/html/rfc5656#section-10).
        String identifier = decodeType();
        if (!type.endsWith(identifier)) {
            throw new IllegalArgumentException(""Invalid identifier "" + identifier + "" for key type "" + type + ""."");
        }

        // Q is the public key encoded from an elliptic curve point into an
        // octet string as defined in Section 2.3.3 of [SEC1];
        // (https://tools.ietf.org/html/rfc5656#ref-SEC1)
        // point compression MAY be used.
        BigInteger q = decodeBigInt();

        ECPublicKey keyBC = getKeyBC(q, identifier);
        return keyBC;
    }
</code></pre>

<p>The solution I've found for getting from Q to an <code>ECPublicKey</code> is the following, using the Bouncycastle API (credit to <a href=""https://stackoverflow.com/questions/42639620/generate-ecpublickey-from-ecprivatekey"">Generate ECPublicKey from ECPrivateKey</a> for providing the starting point):</p>

<pre><code>ECPublicKey getKeyBC(BigInteger q, String identifier) {
    // https://stackoverflow.com/questions/42639620/generate-ecpublickey-from-ecprivatekey
    try {
        // This only works with the Bouncycastle library:
        Security.addProvider(new BouncyCastleProvider());
        // http://www.bouncycastle.org/wiki/pages/viewpage.action?pageId=362269#SupportedCurves(ECDSAandECGOST)-NIST(aliasesforSECcurves)
        String name = identifier.replace(""nist"", ""sec"") + ""r1"";
        KeyFactory keyFactory = KeyFactory.getInstance(""ECDSA"", ""BC"");
        ECNamedCurveParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(name);
        ECPoint point = ecSpec.getCurve().decodePoint(q.toByteArray());
        ECPublicKeySpec pubSpec = new ECPublicKeySpec(point, ecSpec);
        ECPublicKey publicKey = (ECPublicKey) keyFactory.generatePublic(pubSpec);
        return publicKey;
    } catch (NoSuchAlgorithmException | InvalidKeySpecException | NoSuchProviderException e) {
        throw new RuntimeException(e);
    }
}
</code></pre>

<p>That gets you from an openssh format elliptic curve public key (<code>ssh-keygen -t ecdsa -b [256|384|521]</code>) to a JCE <code>ECPublicKey</code>.</p>
","1351","<java><openssh><jce><elliptic-curve><ecdsa>","1","0","2","2017-07-06 14:39:45","44907432","2","","723506","","2017-06-29 15:32:28","2017-06-28 16:34:46",""
"44808132","Using openssh public key (ecdsa-sha2-nistp256) with Java Security","<p>Is there a Java library/example to read an openssh format ecdsa public key to a JCE <code>PublicKey</code> in Java? I want to use EC for <a href=""https://jwt.io"" rel=""nofollow noreferrer"">JWT</a> .</p>

<p>The format I'm trying to read is as per authorized_keys, or Github API (e.g. <a href=""https://api.github.com/users/davidcarboni/keys"" rel=""nofollow noreferrer"">https://api.github.com/users/davidcarboni/keys</a>):  <code>ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK8hPtB72/sfYgNw1WTska2DNOJFx+QhUxuV6OLINSD2ty+6gxcM8yZrvMqWdMePGRb2cGh8L/0bGOk+64IQ/pM=</code></p>

<p>I've found this answer, which is fine for RSA and DSS:
<a href=""https://stackoverflow.com/questions/3531506/using-public-key-from-authorized-keys-with-java-security"">Using public key from authorized_keys with Java security</a>, and this discussion of the openssh format for ECDSA: <a href=""https://security.stackexchange.com/questions/129910/ecdsa-why-do-ssh-keygen-and-java-generated-public-keys-have-different-sizes"">https://security.stackexchange.com/questions/129910/ecdsa-why-do-ssh-keygen-and-java-generated-public-keys-have-different-sizes</a> </p>

<p>However I'm getting lost trying to adapt the RSS/DSA code for ECDSA - I'm not sure how to set up an <a href=""https://docs.oracle.com/javase/7/docs/api/java/security/spec/ECPublicKeySpec.html"" rel=""nofollow noreferrer""><code>ECPublicKeySpec</code></a>. It needs <code>ECPoint</code>, <code>EllipticCurve</code>, <code>ECParameterSpec</code>, <code>ECField</code>. The openssh format only contains two integers, which makes sense for <code>ECPoint</code>, but I don't know how to set up the rest.</p>

<p>I've been poking around a bunch of libraries, including <a href=""http://www.jcraft.com/jsch/"" rel=""nofollow noreferrer"">jsch</a>, <a href=""https://github.com/hierynomus/sshj"" rel=""nofollow noreferrer"">sshj</a>, <a href=""https://www.sshtools.com/en/products/opensource/"" rel=""nofollow noreferrer"">ssh-tools</a> and good old <a href=""http://www.bouncycastle.org/"" rel=""nofollow noreferrer"">Bouncycastle</a>. The closest I have is:</p>

<p><code>com.jcraft.jsch.KeyPair load = com.jcraft.jsch.KeyPair.load(jsch, null, bytes[openSshKey]);</code></p>

<p>Which loads the key fine, but doesn't get me to a JCE <code>PublicKey</code> - just a <code>byte[] getPublicKeyBlob()</code> method.</p>

<p>Am I missing something obvious?</p>
","<p>For completeness, here's the code I've gone with. It's nearly-pure JCE, with a sprinkling of Bouncycastle inside helper methods (this updates the example code in <a href=""https://stackoverflow.com/questions/3531506/using-public-key-from-authorized-keys-with-java-security"">Using public key from authorized_keys with Java security</a>):</p>

<pre><code>...
        } else if (type.startsWith(""ecdsa-sha2-"") &amp;&amp;
                (type.endsWith(""nistp256"") || type.endsWith(""nistp384"") || type.endsWith(""nistp521""))) {
            // Based on RFC 5656, section 3.1 (https://tools.ietf.org/html/rfc5656#section-3.1)
            String identifier = decodeType();
            BigInteger q = decodeBigInt();
            ECPoint ecPoint = getECPoint(q, identifier);
            ECParameterSpec ecParameterSpec = getECParameterSpec(identifier);
            ECPublicKeySpec spec = new ECPublicKeySpec(ecPoint, ecParameterSpec);
            return KeyFactory.getInstance(""EC"").generatePublic(spec);
        } ...

/**
 * Provides a means to get from a parsed Q value to the X and Y point values.
 * that can be used to create and ECPoint compatible with ECPublicKeySpec.
 *
 * @param q          According to RFC 5656:
 *                   ""Q is the public key encoded from an elliptic curve point into an octet string""
 * @param identifier According to RFC 5656:
 *                   ""The string [identifier] is the identifier of the elliptic curve domain parameters.""
 * @return An ECPoint suitable for creating a JCE ECPublicKeySpec.
 */
ECPoint getECPoint(BigInteger q, String identifier) {
    String name = identifier.replace(""nist"", ""sec"") + ""r1"";
    ECNamedCurveParameterSpec ecSpec = ECNamedCurveTable.getParameterSpec(name);
    org.bouncycastle.math.ec.ECPoint point = ecSpec.getCurve().decodePoint(q.toByteArray());
    BigInteger x = point.getAffineXCoord().toBigInteger();
    BigInteger y = point.getAffineYCoord().toBigInteger();
    System.out.println(""BC x = "" + x);
    System.out.println(""BC y = "" + y);
    return new ECPoint(x, y);
}

/**
 * Gets the curve parameters for the given key type identifier.
 *
 * @param identifier According to RFC 5656:
 *                   ""The string [identifier] is the identifier of the elliptic curve domain parameters.""
 * @return An ECParameterSpec suitable for creating a JCE ECPublicKeySpec.
 */
ECParameterSpec getECParameterSpec(String identifier) {
    try {
        // http://www.bouncycastle.org/wiki/pages/viewpage.action?pageId=362269#SupportedCurves(ECDSAandECGOST)-NIST(aliasesforSECcurves)
        String name = identifier.replace(""nist"", ""sec"") + ""r1"";
        AlgorithmParameters parameters = AlgorithmParameters.getInstance(""EC"");
        parameters.init(new ECGenParameterSpec(name));
        return parameters.getParameterSpec(ECParameterSpec.class);
    } catch (InvalidParameterSpecException | NoSuchAlgorithmException e) {
        throw new IllegalArgumentException(""Unable to get parameter spec for identifier "" + identifier, e);
    }
}
</code></pre>
","1351","<java><openssh><jce><elliptic-curve><ecdsa>","1","1","2","2017-07-06 14:39:45","44907432","2","","723506","","2017-06-29 15:32:28","2017-06-28 16:34:46",""
"27001501","Maven build fails while using JCE with "" The jurisdiction policy files are not signed by a trusted signer!""","<p>I am using the JCE to encrypt and decrypt in my project. I have installed the necessary java security jars under $JAVA_HOME/jre/lib/security. Also in my development environment in eclipse I am pointing to the correct jre. Everything works fine in eclipse. But when I build the project with maven , it fails with the following exeption</p>

<pre><code> The jurisdiction policy files are not signed by a trusted signer!
</code></pre>

<p>Things tried so far.</p>

<p>Tried a hack by initializing the following block of code before anything else </p>

<pre><code> try {
    Field field = Class.forName(""javax.crypto.JceSecurity"").getDeclaredField(""isRestricted"");
    field.setAccessible(true);
    field.set(null, java.lang.Boolean.FALSE);
} catch (ClassNotFoundException | NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException ex) {
    ex.printStackTrace(System.err);
}
</code></pre>

<p>Also tried changing the pom.xml by adding the following plugin </p>

<pre><code>&lt;plugins&gt;
&lt;plugin&gt;
  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
 &lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;
 &lt;version&gt;1.1.1&lt;/version&gt;
 &lt;executions&gt;
     &lt;execution&gt;
         &lt;id&gt;enforce&lt;/id&gt;
            &lt;configuration&gt;
                &lt;rules&gt;
                  &lt;evaluateBeanshell&gt;
                     &lt;condition&gt;javax.crypto.Cipher.getMaxAllowedKeyLength(""AES"") &gt; 128&lt;/condition&gt;
                  &lt;/evaluateBeanshell&gt;
             &lt;/rules&gt;
         &lt;/configuration&gt;
         &lt;goals&gt;
             &lt;goal&gt;enforce&lt;/goal&gt;
         &lt;/goals&gt;
      &lt;/execution&gt;
 &lt;/executions&gt;
&lt;/plugin&gt;
</code></pre>

<p>I have confirmed that the version of the policy jars matches the Java version on my machine.  Is there a way to configure maven to use these jars?  (Without having to use another library like Bouncy Castle) Thanks.</p>
","<p>Download the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow"">Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files</a> in order to get the unlimited strength version and use it for both build and runtime.</p>
","1335","<java><security><maven><permissions><jce>","0","0","1","2015-10-16 15:25:41","","0","","","","","2014-11-18 18:35:00",""
"7656293","Using CipherOutputStream in Java","<p>I'm trying to use an AES cipher to encrypt some bytes but it's returning a silent error, meaning I enter something like:</p>

<pre><code>byte[] raw = new String(""Test"",""UTF8"").getBytes(""UTF8"");
</code></pre>

<p>and it won't return anything. I think the problem is the <code>ByteArrayInput</code>/<code>OutputStreams</code> but I don't know how to do it any other way..</p>

<p>Here's the code in question.</p>

<pre><code>public byte[] encrypt(byte[] in) {
    byte[] encrypted = null;
    try {
        aesCipher.getInstance(""AES/CBC/PKCS5Padding"");
        aesCipher.init(Cipher.ENCRYPT_MODE, aeskeySpec);
        ByteArrayInputStream bais = new ByteArrayInputStream(in);
        ByteArrayOutputStream baos = new ByteArrayOutputStream(bais.available());
        CipherOutputStream os = new CipherOutputStream(baos, aesCipher);
        copy(bais, os);
        os.flush();
        byte[] raw = baos.toByteArray();
        os.close();
        encrypted = Base64.encodeBase64(raw);

    } catch (FileNotFoundException ex) {
        Logger.getLogger(FileEncryption.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(FileEncryption.class.getName()).log(Level.SEVERE, null, ex);
    } catch (InvalidKeyException ex) {
        Logger.getLogger(FileEncryption.class.getName()).log(Level.SEVERE, null, ex);
    } catch (NoSuchAlgorithmException ex) {
        Logger.getLogger(FileEncryption.class.getName()).log(Level.SEVERE, null, ex);
    } catch (NoSuchPaddingException ex) {
        Logger.getLogger(FileEncryption.class.getName()).log(Level.SEVERE, null, ex);
    }
    return encrypted;
}
</code></pre>

<p>Here's another function in the same class that does work:</p>

<pre><code>public void encrypt(File in, File out) {


    try {
        aesCipher.getInstance(""AES/CBC/PKCS5Padding"");
        aesCipher.init(Cipher.ENCRYPT_MODE, aeskeySpec);
        FileInputStream is;
        is = new FileInputStream(in);
        CipherOutputStream os = new CipherOutputStream(new FileOutputStream(out), aesCipher);
        copy(is, os);
        os.close();
    } catch (FileNotFoundException ex) {
        Logger.getLogger(FileEncryption.class.getName()).log(Level.SEVERE, null, ex);
    } catch (IOException ex) {
        Logger.getLogger(FileEncryption.class.getName()).log(Level.SEVERE, null, ex);
    } catch (InvalidKeyException ex) {
        Logger.getLogger(FileEncryption.class.getName()).log(Level.SEVERE, null, ex);
    } catch (NoSuchAlgorithmException ex) {
        Logger.getLogger(FileEncryption.class.getName()).log(Level.SEVERE, null, ex);
    } catch (NoSuchPaddingException ex) {
        Logger.getLogger(FileEncryption.class.getName()).log(Level.SEVERE, null, ex);
    }

}

private void copy(InputStream is, OutputStream os) throws IOException {
    int i;
    byte[] b = new byte[2048];
    while ((i = is.read(b)) != -1) {
        os.write(b, 0, i);
    }
}
</code></pre>
","<p>The first thing that catches my eye is this line:</p>

<p>aesCipher.getInstance(""AES/CBC/PKCS5Padding"");</p>

<p>Assuming <code>aesCipher</code> is a variable of type <code>Cipher</code>, you are calling here the static <code>Cipher.getInstance</code> and throwing away the result (not assigning it to any variable). I.e. this line has no effect at all, <code>aesCipher</code> is the same as before this line.</p>

<p>If it was <code>null</code> before, then it still is <code>null</code>, and the next line (which calls a non-static method) will give you a NullPointerException. If your code is silently gobbling unknown exceptions (this might be outside the code shown), this is a general problem.</p>

<p>Other than this, I suppose that the <code>flush</code> on the CipherOutputStream does not really flush the whole buffer, but only as many blocks that can be written without adding any padding. Use <code>close()</code> instead of <code>flush()</code> here (which also seems to work in the second example).</p>

<hr>

<p>A general remark: A <a href=""http://sscce.org/"" rel=""nofollow"">small self-contained complete compilable example</a> would have enabled me to try it and give you a definite answer, instead of only guessing. For example, ""does not return anything"" is not a good description for the behavior of your method - does the method return <code>null</code>, an empty array, throw an exception, block eternally?</p>
","1301","<java><jce><encryption>","1","2","1","2011-10-06 11:38:38","","1","","40342","","2011-10-06 11:38:38","2011-10-05 03:04:08",""
"8033158","Override US_export_policy and local_policy jar for a application","<p>Is it possible to override US_export_policy and  local_policy jar through JVM or application arguments? </p>
","<p>There is no way to do this. If you could do it programmatically, the entire idea behind export restriction of large-keysize encryption collapses.</p>
","1300","<security><jvm><java><jce>","4","1","1","2014-08-30 20:06:43","","5","1","136054","","2011-12-05 22:13:13","2011-11-07 05:49:51",""
"13238070","Java smart card access using middleware","<p>I am working on migration of an old project to Java, and I am having some issues regarding smart card access. Due to lack of documentation I am forced to find my own way through this one, so I hoped you people can help me.</p>

<p>I have a smart card and a dll library (middleware) that was used to gain access to cards functions. Using dependency walker I managed to get a list of functions that dll library holds, and that list sums up to <a href=""http://msdn.microsoft.com/en-us/library/dd627645%28v=vs.85%29.aspx"" rel=""nofollow"">Microsoft Smart Card Api</a> functions. I was wondering if there is some native wrapper that enables me to call that functions from Java? </p>

<p>Regarding the nature of smart card, it should contain cryptography functions (PKCS#11), but I wasn't able to instantiate a sun.security.pkcs11.SunPKCS11 provider because of this error:</p>

<pre><code>Caused by: java.io.IOException: The specified procedure could not be found.
     at sun.security.pkcs11.wrapper.PKCS11.connect(Native Method)
</code></pre>

<p>Any guideline will be appreciated.</p>

<p>Thanks in advance </p>

<p><strong>UPDATE</strong>:</p>

<p>For anyone having this problem as well, it turns out that my smart card doesn't support PKCS11 and I don't have appropriate PKCS11 dll.</p>
","<p>Well, I recently worked in a project which used to have Smart Card access for PKI Certificates and there we had the help from these two frameworks:</p>

<ul>
<li><p>The Legion of BouncyCastle Java API (for PKI method abstractions) <a href=""http://www.bouncycastle.org/java.html"" rel=""nofollow"">http://www.bouncycastle.org/java.html</a></p></li>
<li><p>IAIK JCE PKCS11 Wrapper (for generic .dll smart card access) <a href=""http://jce.iaik.tugraz.at/sic/Products/Core-Crypto-Toolkits/PKCS_11_Wrapper"" rel=""nofollow"">http://jce.iaik.tugraz.at/sic/Products/Core-Crypto-Toolkits/PKCS_11_Wrapper</a></p></li>
</ul>

<p>I think that the second option shall be something that might help you too.</p>
","1295","<java><smartcard><jce><pkcs#11>","5","0","1","2013-02-18 21:43:05","","4","","885490","","2012-12-25 11:32:18","2012-11-05 18:25:35",""
"14468664","Java: MessageDigest.getInstance(""MD5"") returning null","<p>Java: Any idea why <code>MessageDigest.getInstance(""MD5"")</code> would return <code>null</code>?  This was working just fine until recently.</p>
","<p>I doubt about the question </p>

<blockquote>
  <p>MessageDigest.getInstance(“MD5”) returning null</p>
</blockquote>

<p>If the class <code>MessageDigest</code> you meant is <code>java.security.MessageDigest</code>, that method will <strong>NOT</strong> return null, even if you gave a not existing algorithm as parameter.</p>

<p>The code from jdk1.7</p>

<pre><code>public static MessageDigest getInstance(String algorithm)
    throws NoSuchAlgorithmException {
        try {
            Object[] objs = Security.getImpl(algorithm, ""MessageDigest"",
                                             (String)null);
            if (objs[0] instanceof MessageDigest) {
                MessageDigest md = (MessageDigest)objs[0];
                md.provider = (Provider)objs[1];
                return md;
            } else {
                MessageDigest delegate =
                    new Delegate((MessageDigestSpi)objs[0], algorithm);
                delegate.provider = (Provider)objs[1];
                return delegate;
            }
        } catch(NoSuchProviderException e) {
            throw new NoSuchAlgorithmException(algorithm + "" not found"");
        }
    }
</code></pre>

<p>if it returned null, then md or delegate must be null, then NPE happened in this class.</p>

<p>so check and debug your codes step by step, find out which object is null.</p>
","1291","<java><jce>","1","3","1","2013-01-22 22:04:56","14468905","6","2","605744","","2013-01-22 21:57:59","2013-01-22 21:51:09","2013-01-23 01:04:17"
"29508661","Jasypt with the Bouncy Castle JCE SHA512 encryption","<p>I need: 
<strong>password based encryption using sha512 digesting and 256 bit AES encryption with cbc and bc flags set</strong>.</p>

<p>Seems that algorithm should be like this: <strong>PBEWithSHA512AndAES256-CBC-BC</strong></p>

<p>but in my local env I get error: <em>org.jasypt.exceptions.EncryptionInitializationException: java.security.NoSuchAlgorithmException: no such algorithm: PBEWithSHA512AndAES256-CBC-BC for provider BC</em></p>

<p>my test code:</p>

<pre><code>import java.security.Security;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;

public class App {

static {
    Security.addProvider(new BouncyCastleProvider());
}

public static void main(String[] args) {
    StandardPBEStringEncryptor mySecondEncryptor = new StandardPBEStringEncryptor();
    mySecondEncryptor.setProviderName(""BC"");
    // mySecondEncryptor.setAlgorithm(""PBEWITHSHA256AND128BITAES-CBC-BC"");
    mySecondEncryptor.setAlgorithm(""PBEWithSHA512AndAES256-CBC-BC"");
    mySecondEncryptor.setPassword(""pass"");

    String myText = ""Mindaugas"";
    String mySecondEncryptedText = mySecondEncryptor.encrypt(myText);

    System.out.println(mySecondEncryptedText);
    System.out.println(mySecondEncryptor.decrypt(mySecondEncryptedText));
}
}
</code></pre>

<p>PBEWITHSHA256AND128BITAES-CBC-BC - this algorithm works fine but I need sha512 and 256 bit AES...</p>

<p>I have installed extensions form: <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow"">http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html</a></p>

<p>but still get this error: <strong>no such algorithm</strong></p>
","<p>Since the list of algorithms on the <a href=""https://bouncycastle.org/specifications.html"" rel=""nofollow noreferrer"">bouncycastle website</a> is not updated, looking at the code in the constructor in the Java file <a href=""http://grepcode.com/file/repo1.maven.org/maven2/bouncycastle/bcprov-jdk16/136/org/bouncycastle/jce/provider/BouncyCastleProvider.java"" rel=""nofollow noreferrer"">BouncyCastleProvider.java</a>, you can find an exhaustive list of algorithms which are supported by bcprov-jdk16. A small list (of the type of algorithms/functions you were looking for) supported is -</p>

<pre><code>PBEWITHSHAAND128BITAES-CBC-BC
PBEWITHSHAAND192BITAES-CBC-BC
PBEWITHSHAAND256BITAES-CBC-BC
PBEWITHSHA256AND128BITAES-CBC-BC
PBEWITHSHA256AND192BITAES-CBC-BC
PBEWITHSHA256AND256BITAES-CBC-BC
PBEWITHSHA1AND128BITAES-CBC-BC
PBEWITHSHA1AND192BITAES-CBC-BC
PBEWITHSHA1AND256BITAES-CBC-BC
PBEWITHSHA-1AND128BITAES-CBC-BC
PBEWITHSHA-1AND192BITAES-CBC-BC
PBEWITHSHA-1AND256BITAES-CBC-BC
PBEWITHSHA-256AND128BITAES-CBC-BC
PBEWITHSHA-256AND192BITAES-CBC-BC
PBEWITHSHA-256AND256BITAES-CBC-BC
</code></pre>
","1290","<encryption><bouncycastle><jce><sha512><jasypt>","1","3","1","2017-07-11 14:07:04","","7","","","","","2015-04-08 07:37:12",""
"18123285","JCE - Java 7...?","<p>I've installed <code>JDK 7</code>. Which already contains the following JARs:</p>

<pre><code>local_policy
US_export_policy
</code></pre>

<p>But when I start my application, I was facing <code>JCE error</code>. So I googled and downloaded <code>JDK 7</code> JCE from <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow"">here</a>.</p>

<p>My doubt is, when <code>JDK 7</code> already has <code>JCE JARs</code>, why should I specifically download the same <code>JCE JARs</code> and replace the existing <code>JCE JARs</code> again..??</p>

<p><strong>Edit:</strong></p>

<p>I am using <code>SSHA</code> encryption.</p>

<p>Log:</p>

<pre><code>java.security.invalidkeyexception: illegal key size
java.lang.illegalstateexception: cipher not initialized
</code></pre>
","<p>The downloaded files are not <em>the same</em>.</p>

<p>Basically the named <code>.jar</code> files only contain property files which enable/disable some cryptography functions. This is because of several different export/import regulations in different countries.</p>

<p>You could also modify this files by yourself and enable/disable some cryptography functions for your application.</p>
","1289","<java><encryption><java-7><jce><ssha>","0","3","2","2013-08-09 03:40:33","18123347","2","","2147481","","2013-08-08 10:24:12","2013-08-08 10:09:48",""
"18123285","JCE - Java 7...?","<p>I've installed <code>JDK 7</code>. Which already contains the following JARs:</p>

<pre><code>local_policy
US_export_policy
</code></pre>

<p>But when I start my application, I was facing <code>JCE error</code>. So I googled and downloaded <code>JDK 7</code> JCE from <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow"">here</a>.</p>

<p>My doubt is, when <code>JDK 7</code> already has <code>JCE JARs</code>, why should I specifically download the same <code>JCE JARs</code> and replace the existing <code>JCE JARs</code> again..??</p>

<p><strong>Edit:</strong></p>

<p>I am using <code>SSHA</code> encryption.</p>

<p>Log:</p>

<pre><code>java.security.invalidkeyexception: illegal key size
java.lang.illegalstateexception: cipher not initialized
</code></pre>
","<blockquote>
  <p>My doubt is, when JDK 7 already has JCE JARs, why should I specifically download the same JCE JARs and replace the existing JCE JARs again..??</p>
</blockquote>

<p>No.  Or at least, not without understanding what the JCE error means.</p>

<p>If you showed us the error messages / stacktraces, maybe we could help you with that.</p>

<hr>

<p><strong>UPDATE</strong></p>

<p>Those errors look like problems in your code rather than in JCE.</p>

<ol>
<li><p>SSHA stands for Salted SHA.  SSH / SSHA are secure hash schemes, not an encryption schemes.  Moreover, you won't find a JCE provider for SSHA ... because it is <em>really</em> just a variation on SHA where you add a ""salt"" to the input that you are hashing.</p></li>
<li><p>The ""illegal key size"" exception looks like you are misusing one of the API methods.</p></li>
</ol>

<p>If you showed us the <strong>code</strong> that throws the exceptions ... and the <strong>full</strong> stacktraces ... we could give you a more definite answer.  But I'm convinced that replacing the JCE JARs will make no difference.</p>
","1289","<java><encryption><java-7><jce><ssha>","0","0","2","2013-08-09 03:40:33","18123347","2","","2147481","","2013-08-08 10:24:12","2013-08-08 10:09:48",""
"45443384","i am trying ""AES/CCM/PKCS5Padding"" encryption in java but i am getting some exception can any one help me how to do encryption using CCM code","<pre><code>public class AESCCMEncryption {
     public static int AES_KEY_SIZE = 128 ;
     public static int TAG_BIT_LENGTH = 128 ;
     public static String ALGO_TRANSFORMATION_STRING = ""AES/CCM/PKCS5Padding"" ;
     public static void main(String[] args) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {


    SecretKey aesKey = null ;
    String message=""messageToEncrypt"";
    try {
        KeyGenerator keygen = KeyGenerator.getInstance(""AES"") ;  
        keygen.init(AES_KEY_SIZE) ; 
        aesKey = keygen.generateKey() ;
    } catch(NoSuchAlgorithmException noSuchAlgoExc) { System.out.println(""Key being request is for AES algorithm, but this cryptographic algorithm is not available in the environment ""  + noSuchAlgoExc) ; System.exit(1) ; }
    byte[] encryptedText = aesEncrypt(message, aesKey) ;
    byte[] decryptedText = aesDecrypt(encryptedText, aesKey) ; 

    System.out.println(""Decrypted text "" + new String(decryptedText)) ;

}
     public static byte[] aesEncrypt(String message, SecretKey aesKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
         Cipher c = null ;
                c = Cipher.getInstance(ALGO_TRANSFORMATION_STRING); 
                c.init(Cipher.ENCRYPT_MODE, aesKey) ;
                byte[] cipherTextInByteArr = null ;
               cipherTextInByteArr = c.doFinal(message.getBytes()) ;
              return cipherTextInByteArr ;
 } 
     public static byte[] aesDecrypt(byte[] encryptedMessage, SecretKey aesKey) throws NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException {
         Cipher c = null ;
              c = Cipher.getInstance(ALGO_TRANSFORMATION_STRING); // Transformation specifies algortihm, mode of operation and padding
              c.init(Cipher.DECRYPT_MODE, aesKey) ;
              byte[] plainTextInByteArr = null ;
              plainTextInByteArr = c.doFinal(encryptedMessage) ;
          return plainTextInByteArr ;
       }
}
</code></pre>

<p>i am getting unsupported exception i am using java 1.8 version
if i am wrong can help me how to achieve the ""AES/CCM/PKCS5Padding""
is necessary to add IV vector specification for encryption</p>
","<p>I know this is late, sorry for that - I have been researching how to do AES/CCM myself.</p>

<p>At any rate, the bouncycastle API supports CCM. It is pretty simple to add if you don't already have it as it is just a .jar file. You can head over to the java download page <a href=""https://www.bouncycastle.org/latest_releases.html"" rel=""nofollow noreferrer"">here</a> to get the .jar. </p>

<p>However, you can see your current security providers by running the below code: </p>

<pre><code>        Provider[] providers = Security.getProviders();
        for (int i = 0; i &lt; providers.length; i++){
            Log.e(""Provider"", ""Name: "" + providers[i].getName() + "" Version: "" + providers[i].getVersion());
        }
</code></pre>

<p>I get the below output: </p>

<p><a href=""https://i.stack.imgur.com/PaEf9.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/PaEf9.png"" alt=""enter image description here""></a></p>

<p>After a quick search, and it's already pretty obvious, but ""BC Version: 1.52"" is Bouncy Castle.</p>

<p>I also found an example .pdf that says ""PKCS7Padding is often also referred to as PKCS5Padding."" I'm not using padding, so i'll have to let you do the research on that. You can find that article <a href=""https://www.bouncycastle.org/fips-java/BCFipsIn100.pdf"" rel=""nofollow noreferrer"">here</a>. The quote is on page 17, but you can probably find it faster with a CTRL-F, then paste in PKCS5Padding. The examples are only of CBC and EBC though.</p>

<p>As a side note, you can see on <a href=""https://www.bouncycastle.org/java.html"" rel=""nofollow noreferrer"">this</a> page that PKCS is supported.</p>

<p>I hope this helps!</p>
","1273","<java><encryption><aes><jce>","1","2","2","2017-09-20 22:25:20","","1","3","1816580","","2017-08-01 18:20:20","2017-08-01 16:42:14",""
"45443384","i am trying ""AES/CCM/PKCS5Padding"" encryption in java but i am getting some exception can any one help me how to do encryption using CCM code","<pre><code>public class AESCCMEncryption {
     public static int AES_KEY_SIZE = 128 ;
     public static int TAG_BIT_LENGTH = 128 ;
     public static String ALGO_TRANSFORMATION_STRING = ""AES/CCM/PKCS5Padding"" ;
     public static void main(String[] args) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {


    SecretKey aesKey = null ;
    String message=""messageToEncrypt"";
    try {
        KeyGenerator keygen = KeyGenerator.getInstance(""AES"") ;  
        keygen.init(AES_KEY_SIZE) ; 
        aesKey = keygen.generateKey() ;
    } catch(NoSuchAlgorithmException noSuchAlgoExc) { System.out.println(""Key being request is for AES algorithm, but this cryptographic algorithm is not available in the environment ""  + noSuchAlgoExc) ; System.exit(1) ; }
    byte[] encryptedText = aesEncrypt(message, aesKey) ;
    byte[] decryptedText = aesDecrypt(encryptedText, aesKey) ; 

    System.out.println(""Decrypted text "" + new String(decryptedText)) ;

}
     public static byte[] aesEncrypt(String message, SecretKey aesKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
         Cipher c = null ;
                c = Cipher.getInstance(ALGO_TRANSFORMATION_STRING); 
                c.init(Cipher.ENCRYPT_MODE, aesKey) ;
                byte[] cipherTextInByteArr = null ;
               cipherTextInByteArr = c.doFinal(message.getBytes()) ;
              return cipherTextInByteArr ;
 } 
     public static byte[] aesDecrypt(byte[] encryptedMessage, SecretKey aesKey) throws NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, InvalidKeyException {
         Cipher c = null ;
              c = Cipher.getInstance(ALGO_TRANSFORMATION_STRING); // Transformation specifies algortihm, mode of operation and padding
              c.init(Cipher.DECRYPT_MODE, aesKey) ;
              byte[] plainTextInByteArr = null ;
              plainTextInByteArr = c.doFinal(encryptedMessage) ;
          return plainTextInByteArr ;
       }
}
</code></pre>

<p>i am getting unsupported exception i am using java 1.8 version
if i am wrong can help me how to achieve the ""AES/CCM/PKCS5Padding""
is necessary to add IV vector specification for encryption</p>
","<p>Due to global security concerns, the default JRE does not include support for more advanced encryption. You must download the ""Unlimited Security"" patch - current link is <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""nofollow noreferrer"">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>

<p>Download the patch and follow the instructions in the <code>README.TXT</code> file contained therein.</p>

<p>Only clients located in ""sanctioned"" countries are allowed to download the patch.</p>

<p>There is of course no chance that uses will use a VPN to dodge that restriction, or that the patch is available via file sharing software.</p>
","1273","<java><encryption><aes><jce>","1","0","2","2017-09-20 22:25:20","","1","3","1816580","","2017-08-01 18:20:20","2017-08-01 16:42:14",""
"42756447","is PKCS8EncodedKeySpec capable to read both PKCS1 and PKCS8 private key","<p>Although the title is a question but I just managed to do this with the same code, while I am just not sure whether <code>PKCS8EncodedKeySpec</code> is designed to do this job, or my private key is generated by accident to make this work(key generated by <code>openssl</code>).  </p>

<p>my code(<code>pemPath</code> is pem type private key file path):</p>

<pre><code>try (BufferedReader bufferedReader = new BufferedReader(new FileReader(pemPath))) {
    StringBuilder stringBuilder = new StringBuilder();
    String line;

    while ((line = bufferedReader.readLine()) != null) {
        if (!line.startsWith(""--"")) {
            stringBuilder.append(line);
        }
    }

    PKCS8EncodedKeySpec priPKCS8 = new PKCS8EncodedKeySpec(
            Base64.getDecoder().decode(stringBuilder.toString()));
    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
    PrivateKey key = keyFactory.generatePrivate(priPKCS8);
}
</code></pre>

<p>And also I paste PKCS1 file content:  </p>

<pre><code>-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAoRVeLT5PrbQmFbmbc1zLFJuz5Sx3yTc9IIem13/+gNcrdqqa
QVd/2noPmIm1xUkdQfvRm72k0Mm1s78bcadTsZt4XL2OvAKBA0hyox2re/PLLp05
NP2WKFyF+O2OteZhzQHPxQFBn/Nt1pYbYctV7bbw4RsdQXXz72TY+WBfIg6m/LeG
uPG/4UM5IAw9G2IEOkA/V00rsjOLzRvHyqu473zaFNbaObN9rnakCUFeU07L3Eeo
EBQoZPiIyTAJ8eN/EnaudLrvErOog2E4LcpAOpoUDBdi2XYT0iE0stDoj62zP+gL
ubZQKV81N0qk1KehxeLcHtpXtvlWaITnmIovVQIDAQABAoIBAFw/W2Z3h7PHNgQ8
/cvr+RS9MiFs/NBLhQMLDD3fO8VW87oKazo+PKbGPgYx3tmzTEEMT/ZrfWZgDWF5
cOL+WwycJyqdF4+Ns4pIw/WruRfL/rCcMzWof4Rvr/1lNdPvslRv1CdS190cz+sS
nW28v2HZ4UpYd8GUJfUTgLoXOYPLjYEQx8wri5tOPvAJuCFHCdpx59Fu0xaQP+Uz
3+CSAqdsBL4UKoz0lQ27128BEg/2a6kqhGvC/QHu+Mn0N4wbto8ndfpF8noSAhx2
s38q/E9gVYxKjA1g2yl74irPsPWT+gq97nQJ4jYRog2W4I+KYYDAL9xP3ux+kGis
6h1GWcECgYEA1Bh/EgwlamT+y5oJhZgYEQAFtCZEOjyjWuJRwYTuaKrTJjudk0xZ
KPsGy8+Wi3QYsGUowAsQNws+3hzD1dIqWO92CXgkaJ1iZ3mVMsR+xgdb67jFrzZM
PerqXK3wOlaDe/Mikfyqcp9KERuSVKi/XMv7G/1ZaYk4/SPElqcXy1ECgYEAwm2Z
1Wy/E0uQ8Aj7x1nujCUQjvmTWhkU2aHW/1+STjERfXv5XdaR2N6tFSpWRRHAezHG
5b1NmskNKHCtYAdWFuZC2TXUoCVpnhZnS5gAf1H+konKjeknlLgYIZDB59hzMmCE
uOGEHk/rtZQuB4nR0jYk1eE14IOCQe6j73EsmsUCgYEAoINBd6kVj+WLJw8WcbJf
VE5OAr6LF//YKOnqsagmvbO6RM8NO/Kl72u7AvfBmRxtquGD64Lz7JRoKbRfSSza
u5/OFvCDrWCenmzXSyqGPtxG5qhZg3Z2UM2+PBGvIpdivqWM3ir32/NNHJFfNw7W
dCYzjkU4K7ScGoe9Ob6PNWECgYBrm514sidO1pPxRgeT3gJZLmprt1YGl7sieKA1
1v9yp1W2zdbGSOuPzC6feD8nGxwdEv+yR4OcF4pgx3wtmeHb6rU04sY7nHlINb4V
6Jrd3NO45upkgJaXiQxSB3xKhVG8oA7VBHvLCxC5/rk7Etw+LBlXBr569E4zj5DM
BSdawQKBgQC55RdlSLarKyEF9bMVPQDQ0Qko6pS+pw2kmg2CMXhk7eBsTUAMuVh4
/FNu3h6QiGpHstV1NRmF9oPRTltd8Mh3aCy8JAOY9/hZ7NScxKy2j91jQl+geSOC
FPSvfPlyMwPDvR3urCQKYq3NMJ4jWqcle4YX0w/rG5yY05gpQNVWiQ==
-----END RSA PRIVATE KEY-----
</code></pre>

<p>and PKCS8 file content:</p>

<pre><code>-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQChFV4tPk+ttCYV
uZtzXMsUm7PlLHfJNz0gh6bXf/6A1yt2qppBV3/aeg+YibXFSR1B+9GbvaTQybWz
vxtxp1Oxm3hcvY68AoEDSHKjHat788sunTk0/ZYoXIX47Y615mHNAc/FAUGf823W
lhthy1XttvDhGx1BdfPvZNj5YF8iDqb8t4a48b/hQzkgDD0bYgQ6QD9XTSuyM4vN
G8fKq7jvfNoU1to5s32udqQJQV5TTsvcR6gQFChk+IjJMAnx438Sdq50uu8Ss6iD
YTgtykA6mhQMF2LZdhPSITSy0OiPrbM/6Au5tlApXzU3SqTUp6HF4twe2le2+VZo
hOeYii9VAgMBAAECggEAXD9bZneHs8c2BDz9y+v5FL0yIWz80EuFAwsMPd87xVbz
ugprOj48psY+BjHe2bNMQQxP9mt9ZmANYXlw4v5bDJwnKp0Xj42zikjD9au5F8v+
sJwzNah/hG+v/WU10++yVG/UJ1LX3RzP6xKdbby/YdnhSlh3wZQl9ROAuhc5g8uN
gRDHzCuLm04+8Am4IUcJ2nHn0W7TFpA/5TPf4JICp2wEvhQqjPSVDbvXbwESD/Zr
qSqEa8L9Ae74yfQ3jBu2jyd1+kXyehICHHazfyr8T2BVjEqMDWDbKXviKs+w9ZP6
Cr3udAniNhGiDZbgj4phgMAv3E/e7H6QaKzqHUZZwQKBgQDUGH8SDCVqZP7LmgmF
mBgRAAW0JkQ6PKNa4lHBhO5oqtMmO52TTFko+wbLz5aLdBiwZSjACxA3Cz7eHMPV
0ipY73YJeCRonWJneZUyxH7GB1vruMWvNkw96upcrfA6VoN78yKR/Kpyn0oRG5JU
qL9cy/sb/VlpiTj9I8SWpxfLUQKBgQDCbZnVbL8TS5DwCPvHWe6MJRCO+ZNaGRTZ
odb/X5JOMRF9e/ld1pHY3q0VKlZFEcB7McblvU2ayQ0ocK1gB1YW5kLZNdSgJWme
FmdLmAB/Uf6SicqN6SeUuBghkMHn2HMyYIS44YQeT+u1lC4HidHSNiTV4TXgg4JB
7qPvcSyaxQKBgQCgg0F3qRWP5YsnDxZxsl9UTk4CvosX/9go6eqxqCa9s7pEzw07
8qXva7sC98GZHG2q4YPrgvPslGgptF9JLNq7n84W8IOtYJ6ebNdLKoY+3EbmqFmD
dnZQzb48Ea8il2K+pYzeKvfb800ckV83DtZ0JjOORTgrtJwah705vo81YQKBgGub
nXiyJ07Wk/FGB5PeAlkuamu3VgaXuyJ4oDXW/3KnVbbN1sZI64/MLp94PycbHB0S
/7JHg5wXimDHfC2Z4dvqtTTixjuceUg1vhXomt3c07jm6mSAlpeJDFIHfEqFUbyg
DtUEe8sLELn+uTsS3D4sGVcGvnr0TjOPkMwFJ1rBAoGBALnlF2VItqsrIQX1sxU9
ANDRCSjqlL6nDaSaDYIxeGTt4GxNQAy5WHj8U27eHpCIakey1XU1GYX2g9FOW13w
yHdoLLwkA5j3+Fns1JzErLaP3WNCX6B5I4IU9K98+XIzA8O9He6sJApirc0wniNa
pyV7hhfTD+sbnJjTmClA1VaJ
-----END PRIVATE KEY-----
</code></pre>

<p>By the way, both private keys succeed to decrypt the same cipher text.<br>
And the openssl command:</p>

<pre><code>openssl genrsa -out rsa_private_key_2048.pem 2048
openssl pkcs8 -topk8 -in rsa_private_key_2048.pem -out pkcs8_rsa_private_key_2048.pem -nocrypt
</code></pre>
","<p>What if the private key in PEM format(PKCS#1 format)string being passed in a json payload input. PKCS8EncodedKeySpec  is currently working for both PKCS#1 and PKCS#8. The provider is SunRsaSign.</p>
","1267","<java><rsa><private-key><jce><pkcs#8>","1","-1","1","2019-02-20 17:01:50","","8","","608639","","2017-03-13 14:26:26","2017-03-13 04:00:33",""
"10479592","Cannot set up certs for trusted CAs for com.adobe.adept.client.XMLUtil","<p>I have the next exception::</p>

<pre><code> Exception in thread ""main"" java.lang.ExceptionInInitializerError
     at javax.crypto.Mac.getInstance(DashoA13*..)
     at com.adobe.adept.client.XMLUtil.createHMAC(XMLUtil.java:815)
     at com.adobe.adept.client.XMLUtil.hmac(XMLUtil.java:788)
     at com.adobe.adept.upload.UploadTest.makeContent(UploadTest.java:1454)
     at com.adobe.adept.upload.UploadTest.&lt;init&gt;(UploadTest.java:1769)
     at com.adobe.adept.upload.UploadTest.main(UploadTest.java:1806) Caused
 by: java.lang.SecurityException: Cannot set up certs for trusted CAs
     at javax.crypto.SunJCE_b.&lt;clinit&gt;(DashoA13*..)
     ... 6 more Caused by: java.lang.SecurityException: Cannot locate policy or framework files!
     at javax.crypto.SunJCE_b.i(DashoA13*..)
     at javax.crypto.SunJCE_b.g(DashoA13*..)
     at javax.crypto.SunJCE_b$1.run(DashoA13*..)
     at java.security.AccessController.doPrivileged(Native Method)
     ... 7 more
</code></pre>

<p>it is occurring on line:</p>

<pre><code> Mac mac = Mac.getInstance(""HmacSHA1"");
</code></pre>

<p>I tried next solutions:
 - <a href=""https://stackoverflow.com/questions/2856248/nosuchalgorithmexception-algorithm-hmacsha1-not-available"">NoSuchAlgorithmException: Algorithm HmacSHA1 not available</a> - my local java.security file in actual state<br>
 - <a href=""https://forums.oracle.com/forums/thread.jspa?threadID=316839"" rel=""nofollow noreferrer"">https://forums.oracle.com/forums/thread.jspa?threadID=316839</a></p>

<p>may be someone have any other ideas?</p>
","<p>fixed. problem was in my code, I have unusable:</p>

<pre><code>System.setProperties(props);
</code></pre>

<p>where props - properites of config file</p>
","1238","<java><adobe><policy><jce>","0","0","1","2015-03-23 13:27:49","","0","","-1","","2017-05-23 12:22:14","2012-05-07 09:22:28",""
"39904848","EncryptionOperationNotPossibleException","<p>I am getting org.jasypt.exceptions.EncryptionOperationNotPossibleException: Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine. 
My Code is:</p>

<pre><code>  &lt;authentication-manager alias=""authenticationManager""&gt;
  &lt;authentication-provider user-service-ref=""auditorUserDetailsService""&gt;
  &lt;password-encoder ref=""passwordEncoder"" /&gt;
&lt;/authentication-provider&gt;
 &lt;/authentication-manager&gt;
  &lt;beans:bean id=""passwordEncoder"" class=""org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"" /&gt;
&lt;beans:bean id=""springSecurityHandler"" class=""org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter""&gt;
   &lt;beans:property name=""authenticationManager"" ref=""authenticationManager"" /&gt;
&lt;/beans:bean&gt;
&lt;beans:bean id=""jasyptPBEStringEncryptor"" class=""org.jasypt.encryption.pbe.StandardPBEStringEncryptor""&gt;
  &lt;beans:property name=""algorithm"" value=""PBEWithMD5AndTripleDES"" /&gt;
 &lt;beans:property name=""password"" value=""jasypt"" /&gt;
 &lt;/beans:bean&gt;
</code></pre>

<p>and log is below </p>

<pre><code>    org.jasypt.exceptions.EncryptionOperationNotPossibleException: Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine
    at org.jasypt.encryption.pbe.StandardPBEByteEncryptor.handleInvalidKeyException(StandardPBEByteEncryptor.java:1073) ~[jasypt-1.9.2.jar:?]
    at org.jasypt.encryption.pbe.StandardPBEByteEncryptor.encrypt(StandardPBEByteEncryptor.java:924) ~[jasypt-1.9.2.jar:?]
    at org.jasypt.encryption.pbe.StandardPBEStringEncryptor.encrypt(StandardPBEStringEncryptor.java:642) ~[jasypt-1.9.2.jar:?]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.7.0_01]
    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[?:1.7.0_01]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[?:1.7.0_01]
    at java.lang.reflect.Method.invoke(Unknown Source) ~[?:1.7.0_01]
    at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317) ~[spring-aop-4.0.9.RELEASE.jar:4.0.9.RELEASE]
    at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) ~[spring-aop-4.0.9.RELEASE.jar:4.0.9.RELEASE]
    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.0.9.RELEASE.jar:4.0.9.RELEASE]
    at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99) ~[spring-tx-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281) ~[spring-tx-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) ~[spring-tx-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.0.9.RELEASE.jar:4.0.9.RELEASE]
    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207) ~[spring-aop-4.0.9.RELEASE.jar:4.0.9.RELEASE]
    at $Proxy120.sendForgotPassword(Unknown Source) ~[?:?]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.7.0_01]
    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[?:1.7.0_01]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[?:1.7.0_01]
    at java.lang.reflect.Method.invoke(Unknown Source) ~[?:1.7.0_01]
    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) ~[spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) ~[spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:776) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:868) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:644) [servlet-api.jar:?]
    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:725) [servlet-api.jar:?]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) [catalina.jar:8.0.15]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.15]
    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-websocket.jar:8.0.15]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [catalina.jar:8.0.15]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.15]
    at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:186) [spring-security-web-3.2.7.RELEASE.jar:3.2.7.RELEASE]
    at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) [spring-security-web-3.2.7.RELEASE.jar:3.2.7.RELEASE]
    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344) [spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261) [spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [catalina.jar:8.0.15]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.15]
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) [catalina.jar:8.0.15]
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [catalina.jar:8.0.15]
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501) [catalina.jar:8.0.15]
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) [catalina.jar:8.0.15]
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [catalina.jar:8.0.15]
    at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610) [catalina.jar:8.0.15]
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [catalina.jar:8.0.15]
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:537) [catalina.jar:8.0.15]
    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1085) [tomcat-coyote.jar:8.0.15]
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:658) [tomcat-coyote.jar:8.0.15]
    at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222) [tomcat-coyote.jar:8.0.15]
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1556) [tomcat-coyote.jar:8.0.15]
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1513) [tomcat-coyote.jar:8.0.15]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) [?:1.7.0_01]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) [?:1.7.0_01]
    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-util.jar:8.0.15]
    at java.lang.Thread.run(Unknown Source) [?:1.7.0_01]
org.jasypt.exceptions.EncryptionOperationNotPossibleException: Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine
    at org.jasypt.encryption.pbe.StandardPBEByteEncryptor.handleInvalidKeyException(StandardPBEByteEncryptor.java:1073) ~[jasypt-1.9.2.jar:?]
    at org.jasypt.encryption.pbe.StandardPBEByteEncryptor.encrypt(StandardPBEByteEncryptor.java:924) ~[jasypt-1.9.2.jar:?]
    at org.jasypt.encryption.pbe.StandardPBEStringEncryptor.encrypt(StandardPBEStringEncryptor.java:642) ~[jasypt-1.9.2.jar:?]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.7.0_01]
    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[?:1.7.0_01]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[?:1.7.0_01]
    at java.lang.reflect.Method.invoke(Unknown Source) ~[?:1.7.0_01]
    at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317) ~[spring-aop-4.0.9.RELEASE.jar:4.0.9.RELEASE]
    at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) ~[spring-aop-4.0.9.RELEASE.jar:4.0.9.RELEASE]
    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.0.9.RELEASE.jar:4.0.9.RELEASE]
    at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99) ~[spring-tx-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281) ~[spring-tx-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) ~[spring-tx-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.0.9.RELEASE.jar:4.0.9.RELEASE]
    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207) ~[spring-aop-4.0.9.RELEASE.jar:4.0.9.RELEASE]
    at $Proxy120.sendForgotPassword(Unknown Source) ~[?:?]
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.7.0_01]
    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[?:1.7.0_01]
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[?:1.7.0_01]
    at java.lang.reflect.Method.invoke(Unknown Source) ~[?:1.7.0_01]
    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) ~[spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) ~[spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:776) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:705) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:868) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:644) [servlet-api.jar:?]
    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) [spring-webmvc-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:725) [servlet-api.jar:?]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) [catalina.jar:8.0.15]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.15]
    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-websocket.jar:8.0.15]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [catalina.jar:8.0.15]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.15]
    at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:186) [spring-security-web-3.2.7.RELEASE.jar:3.2.7.RELEASE]
    at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) [spring-security-web-3.2.7.RELEASE.jar:3.2.7.RELEASE]
    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344) [spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261) [spring-web-4.1.6.RELEASE.jar:4.1.6.RELEASE]
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) [catalina.jar:8.0.15]
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:8.0.15]
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219) [catalina.jar:8.0.15]
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [catalina.jar:8.0.15]
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501) [catalina.jar:8.0.15]
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) [catalina.jar:8.0.15]
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [catalina.jar:8.0.15]
    at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610) [catalina.jar:8.0.15]
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [catalina.jar:8.0.15]
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:537) [catalina.jar:8.0.15]
    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1085) [tomcat-coyote.jar:8.0.15]
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:658) [tomcat-coyote.jar:8.0.15]
    at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222) [tomcat-coyote.jar:8.0.15]
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1556) [tomcat-coyote.jar:8.0.15]
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1513) [tomcat-coyote.jar:8.0.15]
    at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) [?:1.7.0_01]
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) [?:1.7.0_01]
    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-util.jar:8.0.15]
    at java.lang.Thread.run(Unknown Source) [?:1.7.0_01]
</code></pre>
","","1185","<java><encryption><password-encryption><jce><jasypt>","1","","0","2016-10-07 20:55:16","","7","0","6191695","","2016-10-07 20:55:16","2016-10-06 20:11:58",""
"25189382","JCE Editor toolbar icons do not load properly","<p>I have a Joomla! 3.3.3  and I'm using the JCE Editor. My problem is that the editor is not showing the icons of the buttons on the toolbar. Using Firebug, I realized it was a problem in the path of the css of all themes.</p>

<p><img src=""https://i.stack.imgur.com/PhaHn.png"" alt=""enter image description here""></p>

<p><img src=""https://i.stack.imgur.com/TtFD3.png"" alt=""enter image description here""></p>

<p>In this case, I'm using Classic. The css that appears in of the Firebug code is:</p>

<pre><code>.classicSkin .mceIcon {
   background: url(""/campusbaixada/web/sites/dev01.unifesp.br/components/com_jce/editor/tiny_mce/themes/advanced/img/icons.gif"") in the repeat scroll 20px 20px RGBA (0, 0, 0, 0);
}
</code></pre>

<p>If I change to:</p>

<pre><code>.classicSkin .mceIcon {
   background: url (""/ components / com_jce / editor / tiny_mce / themes / advanced / img / icons.gif"") no-repeat scroll 20px 20px rgba (0, 0, 0, 0);
}
</code></pre>

<p>part of the toolbar will reappear.</p>

<p>So I'm going in of the JCE folder on the server (components / com_jce / editor / tiny_mce / themes / advanced / skins / classic) and change the code for the</p>

<pre><code>.classicSkin .mceIcon {
   background: url (img ../../ / icons.gif) no-repeat 20px 20px;
}
</code></pre>

<p>for</p>

<pre><code>.classicSkin .mceIcon {background: url (/components/com_jce/editor/tiny_mce/themes/advanced/img/icons.gif) no-repeat 20px 20px;}
</code></pre>

<p>Now my questions:</p>

<p>I tried to leave it fixed at a default css file of my template cuz every time I update the component, it loses my settings, but could not make it work. On their forum besides not having this problem, I have to pay to be able to post the doubts ... can anyone help me?</p>
","<p>The following workaround worked for me: Log into the Administrator.  Go to Components -> JCE Editor -> Global Configuration.  Set ""Compress CSS"" to No and click Save.</p>
","1181","<css><joomla><editor><toolbar><jce>","1","1","1","2015-12-22 23:45:33","25654057","0","","","","","2014-08-07 18:17:26",""
"8636558","Encrypting and decrypting a chunk of text in Java with JCA and JCE","<p>I am trying to write a simple app in order to encrypt, and decrypt a chunk of text, using JCA and JCE from Java.</p>

<p>So far the encryption part works, but it gives me the following exception when decrypting :</p>

<blockquote>
<pre><code>javax.crypto.IllegalBlockSizeException: Input length must be multiple of 8 when decrypting with padded cipher
</code></pre>
</blockquote>

<p>This is the part where I initialize the two Ciphers, encCipher, and decCipher.    </p>

<pre><code>PBEKeySpec pbeKeySpec;
PBEParameterSpec paramSpec;
SecretKeyFactory keyFac;
byte[] salt = {(byte) 0xc7, (byte) 0x73, (byte) 0x21, (byte) 0x8c,
               (byte) 0x7e, (byte) 0xc8, (byte) 0xee, (byte) 0x99};
int count = 20;
paramSpec = new PBEParameterSpec(salt, count);

try {
    pbeKeySpec = new PBEKeySpec(""my_password"".toCharArray(), salt, count);
    SecretKey secretKey = SecretKeyFactory.getInstance(""PBEWithMD5AndDES"").generateSecret(pbeKeySpec);

    encCipher = Cipher.getInstance(secretKey.getAlgorithm());
    encCipher.init(Cipher.ENCRYPT_MODE, secretKey, paramSpec);
    decCipher = Cipher.getInstance(secretKey.getAlgorithm());
    decCipher.init(Cipher.DECRYPT_MODE, secretKey, paramSpec);

} catch (Exception ex) {
    ex.printStackTrace();
 }
</code></pre>

<p>I don't have experience with using the Java Cryptography Architecture, I would like to know how could I fix the error.</p>

<p>The exception happens at the line with decCipher.doFinal from loadClients.</p>

<pre><code>private void saveClients() {
   String plainText = """";
   String encText = """";
   Set&lt;String&gt; clients = my_clients.keySet();
        try {
            PrintWriter out = new PrintWriter(new File(output_file));
            for (String client : clients) {
                long client_time = my_clients.get(client);
                plainText = client + "" "" + client_time;

                encText = new String(encCipher.doFinal(plainText.getBytes()));
                out.println(encText);
            }
            out.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void loadClients() {
        BufferedReader in;
        String line;
        try {
            in = new BufferedReader(new FileReader(output_file));
            while ((line = in.readLine()) != null) {
                byte[] decBytes = decCipher.doFinal(line.getBytes());
                String decText = new String(decBytes);
                String[] client_data = decText.split(""[ ]"");
                my_clients.put(client_data[0], Long.parseLong(client_data[1]));
            }
            in.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
     }
</code></pre>
","<p>The problem comes from the fact that you transform bytes into Strings. Suppose that your default platform encoding is ASCII. This means that half of the bytes contained in your encrypted text (bytes 128 and above) don't represent valid characters. Moreover, you write one line for each encrypted text. So, if your encrypted byte array happens to contain a newline char, you will in fact write two lines to the writer, and try to decrypt each line one by one, which will lead to an exception.</p>

<p>Either use bytes to store and transfer your encryted data, or transform them into Strings using a non-lossy algorithm, like Base64 (which will make sure everything will be transformed into printable characters). Apache commons-codec has a Base64 implementation.</p>
","1155","<java><java-ee><encryption><jce>","-1","1","1","2011-12-26 15:35:34","8637077","2","","852689","","2011-12-26 15:11:34","2011-12-26 14:20:21",""
"25406278","DTLS vs encrypting UDP datagrams with JKS/JCE","<p>I need an encrypted UDP connection in Java.
I know about DTLS, but it is problematic in Java. So I would much prefer to do my own encryption using JKS or JCE.
Why UDP? Some lost packets or reordering doesn't concern me, but latency does.
So far I have this concept:</p>

<p>The server creates a temporary symmetric encryption key (unique for the session), encrypts it with the public key of the client (asymmetric encryption) and sends it to the him. The rest of the session they communicate with datagrams encrypted using the symmetric key only.</p>

<p>What are the disadvantages of using this approach as opposed to DTLS? Speed? Security?</p>
","<p>The primary disadvantage is that you thought of it yourself. In general, one should never try to be ""clever"" or ""innovative"" in cryptography-related matters unless one is actually <em>a cryptographer</em>. Short of comprehensive experience regarding the tools, algorithms, and attack vectors, the best way to ensure cryptographic strength is to use well-tested, standardized tools. That means DTLS.</p>

<p>In this case, one problem seems to be susceptibility to MITM attacks, assuming the server does not already know the public key of all clients. Depending on the symmetric algorithm and the contents of the datagram, it might also be susceptible to known-plaintext attacks or chosen-ciphertext attacks. Again, these are things you should read about a little, get scared, realize that this is not what you want to be spending your time on, and go use DTLS.</p>
","1140","<java><udp><datagram><jce><dtls>","0","1","2","2015-04-20 23:09:46","29760019","0","","","","","2014-08-20 13:40:15",""
"25406278","DTLS vs encrypting UDP datagrams with JKS/JCE","<p>I need an encrypted UDP connection in Java.
I know about DTLS, but it is problematic in Java. So I would much prefer to do my own encryption using JKS or JCE.
Why UDP? Some lost packets or reordering doesn't concern me, but latency does.
So far I have this concept:</p>

<p>The server creates a temporary symmetric encryption key (unique for the session), encrypts it with the public key of the client (asymmetric encryption) and sends it to the him. The rest of the session they communicate with datagrams encrypted using the symmetric key only.</p>

<p>What are the disadvantages of using this approach as opposed to DTLS? Speed? Security?</p>
","<p>That almost sounds like you are trying to re-invent DTLS. You are saying DTLS is problematic, but why is this?</p>

<p>In theory your logic is sound though. It reminds me of DTLS with RSA key exchange:</p>

<ul>
<li>Client -> ClientHello (Share <code>ClientRandom</code>)</li>
<li>Server -> ServerHello (Share <code>ServerRandom</code>)</li>
<li>Server -> Certificate (Share certificate, containing server public key among other stuff)</li>
<li>Client -> KeyExchange (Share <code>Pre-Master Secret</code> encrypted with server public key)</li>
</ul>

<p>Now both parties have: <code>ClientRandom</code>, <code>ServerRandom</code> which are public knowledge and <code>Pre-Master Secret</code> which has been shared over the network only with asymmetric encryption. Only the owner of the Certificate knows the private key required to decrypt <code>Pre-Master Secret</code> from the network communication so it is important that the Client verifies the Certificate the server sent.</p>

<p>DTLS determines the method for generating <code>Master Secret</code> from <code>Pre-Master Secret</code>, <code>ClientRandom</code> and <code>ServerRandom</code> and the symmetric encryption/MAC keys from the <code>Master Secret</code>. DTLS uses <code>Pre-Master Secret</code> instead of directly sharing the <code>Master Secret</code> for modularity. From security stand point it should be equally secure to share <code>Master Secret</code> directly. The <code>ClientRandom</code> and <code>ServerRandom</code> are technically used as salt in the key generation. This guarantees that both participants get a say in the cryptographic security of the salt.</p>

<p>Once the symmetric encryption keys are generated, the participants further verify that they can communicate using them before concluding the handshake.</p>

<p>When using CBC the encrypted packets themselves are in the form of:</p>

<pre><code>[ IV ] + encrypted( [ Data blocks ] [ HMAC ] [ Padding ] )
</code></pre>

<p>Sending the Initialization vector with every packet adds some overhead to the transmission, but defends against some chosen plaintext attacks. However this is only one of the security measures against different attacks. There are a lot of different nuances in effective (D)TLS implementation: Ignoring or hiding error conditions, making sure operations take constant time even if they fail, etc.</p>

<p>So while the secure idea of DTLS can be summed up with ""Share public key to one participant. Transfer symmetric key with asymmetric encryption. Encrypt the communication with the symmetric key"", there's a lot more small details that makes it secure. It's these small details that usually fail when people invent their own security measures.</p>

<p>Effective MITM attacks are reduced by verifying the certificate - of course in the above handshake only the client verifies the server identity. If you need for the server to verify the client identity the client would need to send its own certificate as well, etc.</p>
","1140","<java><udp><datagram><jce><dtls>","0","1","2","2015-04-20 23:09:46","29760019","0","","","","","2014-08-20 13:40:15",""
"40026788","nCipher HSM retarget JCE key","<p>Is it possible to ""retarget"" keys generated via the ncipher JCE API to pkcs11? I know that you can retarget via the generatekey command but I don't see how to do it to an existing JCE key. The first prompt is for the ""source application"" and the <a href=""https://docops.ca.com/ca-apm/9-6/en/administrating/apm-security/using-ncipher-with-ca-cem/working-with-ncipher-keys-and-operator-cards#WorkingwithnCipherkeysandoperatorcards-Retargetingthewebserverprivatekey"" rel=""nofollow"">options don't seem to include JCE</a>. Does it support other options beyond the ones listed there or should I be looking at a different way of retargeting?</p>

<p>The ultimate goal here is to export a couple keys (asymmetric and symmetric) that were generated via nCipher's JCE API (yes, I know that an HSM's job is to secure the keys and exporting is usually not a good idea but it is a requirement here). We are able to export keys that were generated via the PKCS11 interface but not ones that were generated via the JCE so our thinking is that if we can retarget it from JCE to PKCS11 we might be able to export these keys as well. If there is another way to do this we are open to that as well.</p>

<p>Lastly, the JCE keys show up as ""recovery enabled"" when executing the nfkminfo on them. Does that mean that they are exportable or does recovery here mean something else?</p>
","<p>Disclaimer: I work for Thales e-Security but do not speak for the company.  </p>

<p>Yes you can retarget a jcecsp key to pkcs11.  If you have any jcecsp keys in your kmdata/local, /opt/nfast/bin/generatekey will offer jcecsp as a source option.  If you have no keys of that ilk, it will quietly omit that option from the source list.  <strong>However,</strong> this retarget process may not do what you think it does.  All retargeting does is change the application type and potentially the associated metadata: it doesn't change the fundamental capabilities of the key as those were baked into the protected key blob at generation time and cannot be changed. </p>

<p>The Security World uses nShield key ACLs to limit the key's capabilities (Sign, Verify, Encrypt, Decrypt, Wrap, Be Wrapped, etc.).  PKCS#11 pulls its parameters (CKA_SIGN, etc.) directly from the key ACLs, and when generating keys through the API, the ACLs saved in the key blob are derived directly from the parameters in the key template.  If you set CKA_SENSITIVE to FALSE, and your Security World allows it, you can generate and save an exportable key. JCE is not that sophisticated: it has no concept of key capabilities at all, so the Provider has to guess at the user's intent with the key and it defaults to a fairly generous set.  However, since as you point out the whole idea of HSMs is to protect key bits and not let you have them, Export is not one of the defaults.  And what's not baked into the key file when you create it, you don't get by retargeting the key.  </p>

<p>One thing you could do if you want to use JCE is to generate the key using a different Provider and then store it in an <em>nCipher.sworld</em> KeyStore using the nCipherKM Provider: this will import the key into the Security World (if your World allows that) and save it as a key_jcecsp_* file.  However this has nothing to do with key security so from an HSM perspective it's not recommended. Another thing you could do is to drop down to the native nCore API, generate the key with the ACL entries you require, and then polymorph it to a JCE Key Object and save it in the HSM-backed KeyStore.  You can shoot yourself in the foot as many times as you want with the ACLs on the key you create.  The polymorphing is very poorly documented: ask Thales Support and they can guide you.  </p>

<p>Finally, the Recovery capability means that in addition to the Working Key blob which may be protected by an Operator Card Set, the key file has a Recovery Blob.  This is in case that Operator Card Set is lost: the Recovery Blob can be opened up by the Administrator Card Set of the Security World using the rocs utility (Replace Operator Card Set), which will write a new key file under a new OCS.  No, this does not mean the key is exportable.  It just means that you are protected against losing the OCS.  Of course losing the ACS is a non-starter as that is your Root of Trust.</p>
","1114","<jce><pkcs#11><hsm>","1","7","1","2016-10-31 20:25:56","40350051","0","","","","","2016-10-13 16:50:37",""
"6752065","How to remove ""Paragraph"" from ""Format Select"" for Joomla 1.5 jce editor","<p>This is a question for Joomla peeps. I am using JCE editor instead of the default tiny-mce. I am trying to customize the formatting interface for my users. </p>

<p>Is there a way to pull ""Paragraph"" out from the ""Format Select"" drop down list and create a custom standalone button just like ""Bold"" or ""Underline""?
Something like this...
<a href=""http://cl.ly/1J1z2g1J2g2Q2X3W2R32"" rel=""nofollow"">http://cl.ly/1J1z2g1J2g2Q2X3W2R32</a></p>
","<p>It is possible to edit the content of the Format list. In JCE 1.5 go to ""Groups"", select the ""Editor Parameters"" tab, go to the ""Editor Options"" area and remove the ""p"" (as in paragraph) from the list of  ""Format Elements"".</p>

<p>But actually this is not what you wanted. To create an extra button for the P format you might try some Javascript to convert the Format select into a sequence of buttons.</p>

<p>In JCE 1.5 in the JCE Plugin Manager, there is a button ""New Plugin"". That helps with setting up new plugins. In JCE 2.0 you will need to create a complete installation package first.</p>
","1094","<joomla><editor><joomla1.5><jce>","0","0","1","2011-07-20 15:19:39","","0","","","","","2011-07-19 18:17:30",""
"26216967","Maven compilation error for Cipher class in jce.jar","<p>I tried with executing sample class which uses <code>Cipher.getInstance(""AES"")</code> it is working, but when I tried with maven clean install command, maven is throwing compilation exceptions.</p>

<blockquote>
  <p><strong>ERROR : package javax.crypto does not exist</strong></p>
  
  <p><strong>error: cannot find symbol<br>
  Cipher cipher = Cipher.getInstance(""AES"");<br>
  ^</strong></p>
</blockquote>

<p>I see that jce.jar file in JRE system library. Do we need to add any dependency to use the Cipher class  in maven?</p>

<p><strong><em>I'm using jdk 1.7</em></strong></p>

<p>Here is the stack trace for maven <code>-e clean install</code>:</p>

<pre><code>org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.0.2:compile (default-compile) on project SaaSCommon: Compilation failure
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:108)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:76)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:116)
    at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:361)
    at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)
    at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)
    at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)
    at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: org.apache.maven.plugin.CompilationFailureException: Compilation failure
    at org.apache.maven.plugin.AbstractCompilerMojo.execute(AbstractCompilerMojo.java:516)
    at org.apache.maven.plugin.CompilerMojo.execute(CompilerMojo.java:114)
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:133)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
</code></pre>
","<p>try adding the below compile arguments.</p>

<pre><code>&lt;compilerArguments&gt;&lt;bootclasspath&gt;${java.home}/lib/rt.jar:${java.home}/lib/jce.jar&lt;/bootclasspath&gt;&lt;/compilerArguments&gt;
</code></pre>
","1087","<java><maven><encryption><jce>","1","0","1","2017-02-09 11:46:29","","4","2","3885376","","2017-02-09 11:46:29","2014-10-06 13:11:33",""
"39438741","PKIXCertPathBuilder fails with Bouncy Castle provider but works with default (SUN) provider","<p>I'm using the following code to verify a <code>X509Certificate</code> as per the references <a href=""https://docs.oracle.com/javase/7/docs/technotes/guides/security/certpath/CertPathProgGuide.html#PKIXBuilderParameters"" rel=""nofollow"">here</a>.</p>

<pre><code>static void verifyCertTrust(X509Certificate certificate, Set&lt;X509Certificate&gt; additionalCerts) throws CertificateException, NoSuchAlgorithmException, NoSuchProviderException, CertPathValidatorException, InvalidAlgorithmParameterException, CertPathBuilderException{

        Set&lt;X509Certificate&gt; trustedRoots = new HashSet&lt;X509Certificate&gt;();
        Set&lt;X509Certificate&gt; intermediateCerts = new HashSet&lt;X509Certificate&gt;();

        for (X509Certificate cert : additionalCerts) {
            if(isSelfSigned(cert)){
                trustedRoots.add(cert);
            }
            else{
                intermediateCerts.add(cert);
            }
        }

        Set&lt;TrustAnchor&gt; trustAnchors = new HashSet&lt;TrustAnchor&gt;();
        for (X509Certificate root : trustedRoots) {
            trustAnchors.add(new TrustAnchor(root, null));
        }

        X509CertSelector selector = new X509CertSelector();
        selector.setCertificate(certificate);


        PKIXParameters parameters = new PKIXBuilderParameters(trustAnchors, selector);
        parameters.setRevocationEnabled(false);
        CertStore intermediateCertStore = CertStore.getInstance(""Collection"", new CollectionCertStoreParameters(intermediateCerts), ""BC"");
        parameters.addCertStore(intermediateCertStore);

        CertPathBuilder cpb = CertPathBuilder.getInstance(""PKIX"", ""BC"");
        cpb.build(parameters);

    }
</code></pre>

<p>This works If I remove the provider <code>BC</code> while getting the instance of <code>CertPathBuilder</code> and let JVM use the default <code>SUN</code> provider. However with <code>BC</code> provider I get the following exception. </p>

<pre><code>Exception in thread ""main"" java.security.cert.CertPathBuilderException: No certificate found matching targetContraints.
    at org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi.engineBuild(Unknown Source)
    at java.security.cert.CertPathBuilder.build(Unknown Source)
    at signer.GetPkcs11Key.verifyCertTrust(GetPkcs11Key.java:105)
    at signer.GetPkcs11Key.main(GetPkcs11Key.java:71)
</code></pre>

<p>Any ideas how can I make this work with BouncyCastle provider?</p>
","<p>The certificate to validate has to be in the CertStore in your example so add this:</p>

<pre><code> parameters.setRevocationEnabled...;
 //Add the certitificate to the cert store
 intermediateCerts.add(certificate);
 CertStore intermediateCertStore....
</code></pre>
","1082","<java><x509certificate><bouncycastle><jce>","4","4","1","2017-06-20 15:41:12","44657484","0","","","","","2016-09-11 17:25:34",""
"2221577","What's the Java JCE equivalent for this C OpenSSL encryption function?","<p>I am writing a Java implementation of an app originally written in C. I can't modify the C version, and the Java version must share encrypted data with the C version.</p>

<p>Here's the relevant part of the C encryption code:</p>

<pre><code>makekeys(password,&amp;key1,&amp;key2); /* turns password into two 8 byte arrays */
fill_iv(iv); /* bytes 8 bytes of randomness into iv */
des_key_sched(&amp;key1,ks1);
des_key_sched(&amp;key2,ks2);
des_ede2_ofb64_encrypt(hashed,ctext,hashedlen,ks1,ks2,
                       &amp;iv,&amp;num);
</code></pre>

<p>I can see that the JCE equivalent is something like:</p>

<pre><code>SecretKey key = new SecretKeySpec(keyBytes, ""DESede"");
IvParameterSpec iv = new IvParameterSpec(new byte[8]);
Cipher cipher = Cipher.getInstance(""DESede/?????/?????""); // transformation spec?
cipher.init(Cipher.ENCRYPT_MODE, key, iv);
byte[] cipherTextBytes = cipher.doFinal(plaintext);
</code></pre>

<p>Questions:</p>

<ul>
<li>The C code takes two keys, JCE takes one. How do I reconcile this? Just append the two into one array? In which order?</li>
<li>What transformation spec (if any!) is equivalent to OpenSSL's des_ede2_ofb64_encrypt? How would I find out, other than by asking strangers on the Internet? ;)</li>
</ul>
","<p>In answer to your last question, you'd find out by reading the documentation on the specific algorithms themselves. The Sun docs do generally assume you already are familiar with the subject matter. In this case, you would know that: triple DES is the application of three independently keyed DES ECB instances in sequence; that the most common way to this is something called DES ede, which means the 1st and 3rd DES instances are run in the encrypt direction but the 2nd DES instance is run in the decrypt direction; that ede3 three means that each DES instance is keyed independently and ede2 means that the 1st and 3rd instances use the same key; that OFB64 means 64-bit output feedback mode.</p>

<p>You should get the the same result with getInstance(""DESede/OFB64/NoPadding""), and by making the key1 the 1st 8 bytes of the DESede key, key2 the 2nd, and key1 the 3rd.</p>
","1075","<java><c><encryption><openssl><jce>","2","2","1","2010-02-08 13:29:59","2221850","0","2","","","","2010-02-08 12:42:15",""
"23806149","Installing Java Cryptography Extension in Debian","<p>I need to install the JCE in my Wheezy machine.</p>

<p>According to the documentation, I should replace the files local_policy.jar and US_export_policy.jar in $java_home/lib/security. However, my system doesn't have these files, and just copying JCE's files there don't work, as my code is failing and looking for the error it seems to be due to the lack of JCE. </p>

<pre><code> [java] GSSException: Failure unspecified at GSS-API level (Mechanism level: Checksum failed)
 [java]     at sun.security.jgss.krb5.Krb5Context.acceptSecContext(Krb5Context.java:788)
 [java]     at sun.security.jgss.GSSContextImpl.acceptSecContext(GSSContextImpl.java:342)
 [java]     at sun.security.jgss.GSSContextImpl.acceptSecContext(GSSContextImpl.java:285)
 [java]     at mistic.id.krbAction.run(krbAction.java:44)
 [java]     at mistic.id.krbAction.run(krbAction.java:1)
 [java]     at java.security.AccessController.doPrivileged(Native Method)
 [java]     at javax.security.auth.Subject.doAs(Subject.java:356)
 [java]     at mistic.id.Server.acceptSecurityContext(Server.java:119)
 [java]     at mistic.id.Server.main(Server.java:70)
 [java] Caused by: KrbException: Checksum failed
 [java]     at sun.security.krb5.internal.crypto.Aes256CtsHmacSha1EType.decrypt(Aes256CtsHmacSha1EType.java:102)
 [java]     at sun.security.krb5.internal.crypto.Aes256CtsHmacSha1EType.decrypt(Aes256CtsHmacSha1EType.java:94)
 [java]     at sun.security.krb5.EncryptedData.decrypt(EncryptedData.java:177)
 [java]     at sun.security.krb5.KrbApReq.authenticate(KrbApReq.java:278)
 [java]     at sun.security.krb5.KrbApReq.&lt;init&gt;(KrbApReq.java:144)
 [java]     at sun.security.jgss.krb5.InitSecContextToken.&lt;init&gt;(InitSecContextToken.java:108)
 [java]     at sun.security.jgss.krb5.Krb5Context.acceptSecContext(Krb5Context.java:771)
 [java]     ... 8 more
 [java] Caused by: java.security.GeneralSecurityException: Checksum failed
 [java]     at sun.security.krb5.internal.crypto.dk.AesDkCrypto.decryptCTS(AesDkCrypto.java:451)
 [java]     at sun.security.krb5.internal.crypto.dk.AesDkCrypto.decrypt(AesDkCrypto.java:272)
 [java]     at sun.security.krb5.internal.crypto.Aes256.decrypt(Aes256.java:76)
 [java]     at sun.security.krb5.internal.crypto.Aes256CtsHmacSha1EType.decrypt(Aes256CtsHmacSha1EType.java:100)
 [java]     ... 14 more
</code></pre>

<p>So, how could I successfully install JCE in Debian?</p>
","","1049","<java><debian><jce>","0","","0","2014-05-22 14:12:04","","2","","3653325","","2014-05-22 14:12:04","2014-05-22 11:55:26",""
"49029186","Failing to Install Bouncycastle provider","<p>I am running on Java 9 and tried to execute a program with following line.</p>

<pre><code>Security.getProvider(""BC"");
</code></pre>

<p>However, this returns null. As a solution I tried following line.</p>

<pre><code>Security.addProvider(new BouncyCastleProvider());
</code></pre>

<p>But it gives me an error saying, </p>

<pre><code>java.lang.NoClassDefFoundError: org/bouncycastle/jce/provider/BouncyCastleProvider
</code></pre>

<p>I have added ""bcprov-jdk15on-156"" jar file to my idea project with scope:provided. Furthermore I have set  crypto.policy to unlimited.</p>

<p>I tried to add provider statically also by adding ""<code>security.provider.14=org.bouncycastle.jce.provider.BouncyCastleProvider</code>"" to java.security file in both jdk-9.0.4/conf/security folder and  jdk-9.0.4/conf/security folder. But i am still receiving same error with no provider installing.</p>

<p>What am I missing here?</p>
","","1048","<java><bouncycastle><java-9><jce>","1","","0","2018-02-28 12:05:16","","4","","","","","2018-02-28 12:05:16",""
"42263476","what padding strategy is used by SunJCE SHA1WithRSA","<p>Normally both <code>PSS</code> and <code>PKCS1v15</code> can be used for RSA signatures padding.<br>
And for java the code is also simple, but it just can't tell the padding strategy used.<br>
My code:</p>

<pre><code>Signature signature = Signature.getInstance(""SHA1WithRSA"");
signature.initSign(privateKey);
signature.update(plainBytes);
byte[] signBytes = signature.sign(); 
</code></pre>

<p>May I explicitly define <code>PSS</code> with <code>MGF1</code> as the padding strategy using SunJCE as provider?  </p>
","<p><code>PSS</code> is not present in the supported algorithms list of <a href=""http://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html"" rel=""nofollow noreferrer"">SunJCE</a>. However <code>SHA256withRSA/PSS</code> is implemented in <a href=""https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html"" rel=""nofollow noreferrer"">android</a>.</p>

<p>I suggest to use BouncyCastle</p>

<pre><code>Security.addProvider(new BouncyCastleProvider());

Signature sig = Signature.getInstance(""SHA1withRSA/PSS"");
sig.initSign(privateKey);
sig.update(data);
byte[] signature = sig.sign();
</code></pre>

<p><strong>UPDATED</strong></p>

<p>The default <code>maskGenAlgorithm</code> in  <a href=""https://www.ietf.org/rfc/rfc3447.txt"" rel=""nofollow noreferrer"">PKCS#1 v2.1</a> is MGF1. </p>

<blockquote>
<pre><code>RSASSA-PSS-params ::= SEQUENCE {
   hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,
   maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,
   saltLength         [2] INTEGER  DEFAULT 20,
   trailerField       [3] INTEGER  DEFAULT 1
 }
</code></pre>
</blockquote>

<p>I assume BouncyCastle is using it. You can define your own PSS parameters. For example (see <a href=""https://docs.oracle.com/javase/7/docs/api/java/security/spec/PSSParameterSpec.html#DEFAULT"" rel=""nofollow noreferrer"">PSSParameterSpec</a>) </p>

<pre><code>sig.setParameter(PSSParameterSpec.DEFAULT);
</code></pre>
","1039","<java><rsa><padding><digital-signature><jce>","1","1","3","2018-05-21 13:32:36","42274159","1","","1816580","","2017-02-16 06:16:11","2017-02-16 02:01:17",""
"42263476","what padding strategy is used by SunJCE SHA1WithRSA","<p>Normally both <code>PSS</code> and <code>PKCS1v15</code> can be used for RSA signatures padding.<br>
And for java the code is also simple, but it just can't tell the padding strategy used.<br>
My code:</p>

<pre><code>Signature signature = Signature.getInstance(""SHA1WithRSA"");
signature.initSign(privateKey);
signature.update(plainBytes);
byte[] signBytes = signature.sign(); 
</code></pre>

<p>May I explicitly define <code>PSS</code> with <code>MGF1</code> as the padding strategy using SunJCE as provider?  </p>
","<p>Inspired by the answer, just to add a snippet that shows how to set all the params manually, and of course <code>BouncyCastle</code> has to be used:  </p>

<pre><code>Signature signature = Signature.getInstance(""SHA256WithRSA/PSS"", ""BC""); //second param ""BC"" is not really required
MGF1ParameterSpec mgf1ParameterSpec = new MGF1ParameterSpec(""SHA-256""); 
PSSParameterSpec pssParameterSpec = new PSSParameterSpec(""SHA-256"", ""MGF1"", mgf1ParameterSpec , 20, 1);
signature.setParameter(pssParameterSpec);
signature.initSign(privateKey);
signature.update(plainBytes);
byte[] signBytes = signature.sign();
</code></pre>
","1039","<java><rsa><padding><digital-signature><jce>","1","1","3","2018-05-21 13:32:36","42274159","1","","1816580","","2017-02-16 06:16:11","2017-02-16 02:01:17",""
"42263476","what padding strategy is used by SunJCE SHA1WithRSA","<p>Normally both <code>PSS</code> and <code>PKCS1v15</code> can be used for RSA signatures padding.<br>
And for java the code is also simple, but it just can't tell the padding strategy used.<br>
My code:</p>

<pre><code>Signature signature = Signature.getInstance(""SHA1WithRSA"");
signature.initSign(privateKey);
signature.update(plainBytes);
byte[] signBytes = signature.sign(); 
</code></pre>

<p>May I explicitly define <code>PSS</code> with <code>MGF1</code> as the padding strategy using SunJCE as provider?  </p>
","<p>thanks @xuanzhui</p>

<p>Here is how I successfully verified my (hex encoded) signature:</p>

<pre><code>public static boolean verify(String plainText, String signature, PublicKey publicKey) throws Exception {
    Signature publicSignature = Signature.getInstance(""SHA512withRSA/PSS"");
    publicSignature.setParameter(new PSSParameterSpec(""SHA-512"", ""MGF1"", MGF1ParameterSpec.SHA512 , 64, 1));
    publicSignature.initVerify(publicKey);
    publicSignature.update(plainText.getBytes(UTF_8));

    return publicSignature.verify(hexToBytes(signature));
}
</code></pre>

<p>Note despite the documentation suggesting otherwise (<code>getSaltLength()</code> - ""returns the salt length in bits"") salt length seems to be in <strong>bytes</strong>!</p>

<p>Also I think ""SHA512withRSA/PSS"" is only supported from Android 23+</p>
","1039","<java><rsa><padding><digital-signature><jce>","1","0","3","2018-05-21 13:32:36","42274159","1","","1816580","","2017-02-16 06:16:11","2017-02-16 02:01:17",""
"19541604","Trusted Signon in IBM Cognos with SAML Token & JCE Policy","<p>I am trying to create a Custom Java Authentication Provider (CJAP) which is trying to read the SAML tokens (Version 1.1) passed from the source application (Trusted) to Cognos Application (Version 10.2.1 FP 1) (Application Server : Tomcat).</p>

<p>Also since the SAML tokens are passed in encrypted format we need to decrypt it using the JCE Policy</p>

<p><a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow"">http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html</a></p>

<p>These policies needs to be placed in the in /bin64/jre/lib/security , However when I put these policy in the mentioned location the cognos service does not starts and when the cognos policy is present it does not decrypts the token and gives the error of invalid token,</p>

<p>Is there any way, where we can integrate cognos policy &amp; jce policy which we are using or perhaps is there any way in which we can integrate SAML with Cognos.?</p>

<p>Any help will be highly appreciated. Thanks. </p>
","<p>Just a shot in the dark, I never did anything similar ( </p>

<p>Have you tried debugging as in 
<a href=""https://www.ibm.com/developerworks/community/blogs/0a7c97bb-6cf9-4ddb-a918-80994e7b444d/entry/how_to_debug_a_cognos_custom_security_provider_using_eclipse10?lang=en"" rel=""nofollow"">https://www.ibm.com/developerworks/community/blogs/0a7c97bb-6cf9-4ddb-a918-80994e7b444d/entry/how_to_debug_a_cognos_custom_security_provider_using_eclipse10?lang=en</a> ? There are a few more debugging links in comments as well.</p>
","1029","<java><security><cognos><jce>","0","0","1","2016-10-20 10:37:43","","0","","","","","2013-10-23 12:24:36",""
"15231056","How to use keytool to run a test and check if JCE is absent or present?","<p>Recently I ran into JDK installs from Oracle which had JCE files such as <code>local_policy.jar</code> present in the <code>jre/lib/security</code> directory but those files were dummies and did not truly enable Unlimited Strength encryption. After replacing them with downloads from Oracle, things went much smoother.</p>

<p>Now I'm thinking that there should be an easy way to sanity-test a system and prevent confusion like this. So, I'm wondering:</p>

<blockquote>
  <p>Which <code>keytool</code> operation could I run that would only succeed if the appropriate JCE jars were installed and in use?</p>
</blockquote>

<p>That way, when it fails I know that local_policy.jar is either not available or there is a useless dummy file in place which should be swapped out with the real one.</p>
","<p>As already mentioned in my various comments, you can use the <code>getMaxAllowedKeyLength()</code> test to determine if a jdk/jre supports unlimited strength cryptography (in my tests i've used the ""AES"" cipher, but ""RC5"" should work as well).  when testing this functionality, you need to have the right jars in place (the contents of the jars being the important bits).  </p>

<p>from my local box, a jdk with limited strength cryptography has a local_policy.jar file with the contents:</p>

<pre><code>// Some countries have import limits on crypto strength. This policy file
// is worldwide importable.

grant {
    permission javax.crypto.CryptoPermission ""DES"", 64;
    permission javax.crypto.CryptoPermission ""DESede"", *;
    permission javax.crypto.CryptoPermission ""RC2"", 128, 
                                     ""javax.crypto.spec.RC2ParameterSpec"", 128;
    permission javax.crypto.CryptoPermission ""RC4"", 128;
    permission javax.crypto.CryptoPermission ""RC5"", 128, 
          ""javax.crypto.spec.RC5ParameterSpec"", *, 12, *;
    permission javax.crypto.CryptoPermission ""RSA"", *;
    permission javax.crypto.CryptoPermission *, 128;
};
</code></pre>

<p>whereas a jdk with unlimited strength has the contents:</p>

<pre><code>// Country-specific policy file for countries with no limits on crypto strength.
grant {
    // There is no restriction to any algorithms.
    permission javax.crypto.CryptoAllPermission; 
};
</code></pre>

<p>(note that the US_export_policy.jar is the same in both cases).</p>
","1001","<java><jce>","0","0","1","2013-03-07 19:04:01","","13","","","","","2013-03-05 18:11:48",""
"38794307","SSL+ Java 8 + OpenJDK + SNI + HTTPClient = Handshake Failure","<p>I have some code that's been working for a long time that gets data from webapps over HTTP. It uses Apache HTTPClient (v. 4.5.2) and works great for sites with and without SSL.</p>

<p>Recently, I've tried to use if for another site that happens to use SNI. Everything works great on my Windows machine, but if I try to run it on an AWS EC2 Linux instance, I get a handshake failure (because of the SNI).</p>

<p>Here's what I'm running:</p>

<h2>Windows Java</h2>

<ul>
<li>java version ""1.8.0_101""</li>
<li>Java(TM) SE Runtime Environment (build 1.8.0_101-b13)</li>
<li>Java HotSpot(TM) Client VM (build 25.101-b13, mixed mode, sharing)</li>
</ul>

<h2>AWS Linux Java</h2>

<ul>
<li>openjdk version ""1.8.0_91""</li>
<li>OpenJDK Runtime Environment (build 1.8.0_91-b14)</li>
<li>OpenJDK 64-Bit Server VM (build 25.91-b14, mixed mode)</li>
</ul>

<p>I'm not sure which component is ultimately responsible for the failure (Java 8, the runtime environment, HTTPClient).</p>

<p>I have seen this (<a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html#SNIExtension"" rel=""noreferrer"">https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html#SNIExtension</a>), but I'm not sure how to adapt this for HTTPClient. And besides, if I had to make code changes, why would it work on Windows?</p>

<p>Anyone have any idea what I should do?</p>

<p><strong>Edit</strong>: As suggested, I looked into the jsse.enableSNIExtension property. This seemed wrong because it looks like it's a way to turn SSL off which isn't what I want.</p>

<p>I tried it turned on/off on Windows, and things only  worked with it on. On Linux, when it was turned on I continue to get a handshake failure.</p>

<p>Here's the output:</p>

<pre><code>Windows - System.setProperty(""jsse.enableSNIExtension"", ""false"");
=================================================================

pool-1-thread-1, WRITE: TLSv1.2 Handshake, length = 189
pool-1-thread-1, READ: TLSv1.2 Alert, length = 2
pool-1-thread-1, RECV TLSv1.2 ALERT:  fatal, internal_error
pool-1-thread-1, called closeSocket()
pool-1-thread-1, handling exception: javax.net.ssl.SSLException: Received fatal alert: internal_error


Windows - System.setProperty(""jsse.enableSNIExtension"", ""true"");
================================================================

pool-1-thread-1, WRITE: TLSv1.2 Handshake, length = 215
pool-1-thread-1, READ: TLSv1.2 Handshake, length = 93
*** ServerHello, TLSv1.2


Linux - System.setProperty(""jsse.enableSNIExtension"", ""true"");
==============================================================

pool-1-thread-1, WRITE: TLSv1.2 Handshake, length = 143
pool-1-thread-1, READ: TLSv1.2 Alert, length = 2
pool-1-thread-1, RECV TLSv1.2 ALERT:  fatal, handshake_failure
pool-1-thread-1, called closeSocket()
pool-1-thread-1, handling exception: javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure
</code></pre>
","<p>I had the same issue, not sure if you are allowed to do this or if you noticed this in the documentation but I added the option <code>-Djsse.enableSNIExtension=false</code> and it worked for me.</p>
","1001","<java><amazon-web-services><ssl><jce><sni>","5","-1","2","2018-12-14 10:29:09","","1","1","239101","","2018-12-14 10:29:09","2016-08-05 16:55:25",""
"38794307","SSL+ Java 8 + OpenJDK + SNI + HTTPClient = Handshake Failure","<p>I have some code that's been working for a long time that gets data from webapps over HTTP. It uses Apache HTTPClient (v. 4.5.2) and works great for sites with and without SSL.</p>

<p>Recently, I've tried to use if for another site that happens to use SNI. Everything works great on my Windows machine, but if I try to run it on an AWS EC2 Linux instance, I get a handshake failure (because of the SNI).</p>

<p>Here's what I'm running:</p>

<h2>Windows Java</h2>

<ul>
<li>java version ""1.8.0_101""</li>
<li>Java(TM) SE Runtime Environment (build 1.8.0_101-b13)</li>
<li>Java HotSpot(TM) Client VM (build 25.101-b13, mixed mode, sharing)</li>
</ul>

<h2>AWS Linux Java</h2>

<ul>
<li>openjdk version ""1.8.0_91""</li>
<li>OpenJDK Runtime Environment (build 1.8.0_91-b14)</li>
<li>OpenJDK 64-Bit Server VM (build 25.91-b14, mixed mode)</li>
</ul>

<p>I'm not sure which component is ultimately responsible for the failure (Java 8, the runtime environment, HTTPClient).</p>

<p>I have seen this (<a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html#SNIExtension"" rel=""noreferrer"">https://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html#SNIExtension</a>), but I'm not sure how to adapt this for HTTPClient. And besides, if I had to make code changes, why would it work on Windows?</p>

<p>Anyone have any idea what I should do?</p>

<p><strong>Edit</strong>: As suggested, I looked into the jsse.enableSNIExtension property. This seemed wrong because it looks like it's a way to turn SSL off which isn't what I want.</p>

<p>I tried it turned on/off on Windows, and things only  worked with it on. On Linux, when it was turned on I continue to get a handshake failure.</p>

<p>Here's the output:</p>

<pre><code>Windows - System.setProperty(""jsse.enableSNIExtension"", ""false"");
=================================================================

pool-1-thread-1, WRITE: TLSv1.2 Handshake, length = 189
pool-1-thread-1, READ: TLSv1.2 Alert, length = 2
pool-1-thread-1, RECV TLSv1.2 ALERT:  fatal, internal_error
pool-1-thread-1, called closeSocket()
pool-1-thread-1, handling exception: javax.net.ssl.SSLException: Received fatal alert: internal_error


Windows - System.setProperty(""jsse.enableSNIExtension"", ""true"");
================================================================

pool-1-thread-1, WRITE: TLSv1.2 Handshake, length = 215
pool-1-thread-1, READ: TLSv1.2 Handshake, length = 93
*** ServerHello, TLSv1.2


Linux - System.setProperty(""jsse.enableSNIExtension"", ""true"");
==============================================================

pool-1-thread-1, WRITE: TLSv1.2 Handshake, length = 143
pool-1-thread-1, READ: TLSv1.2 Alert, length = 2
pool-1-thread-1, RECV TLSv1.2 ALERT:  fatal, handshake_failure
pool-1-thread-1, called closeSocket()
pool-1-thread-1, handling exception: javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure
</code></pre>
","<p>In our case the root cause was that the (Java) client and the server could not agree on a sufficently strong cipher suite. The solution was to install ""Unlimited Strength JCE"" from  <a href=""https://www.oracle.com/technetwork/java/javase/downloads/jce-all-download-5170447.html"" rel=""nofollow noreferrer"">https://www.oracle.com/technetwork/java/javase/downloads/jce-all-download-5170447.html</a></p>

<p>This should not be a problem for Java version >= 1.8.0_161 </p>
","1001","<java><amazon-web-services><ssl><jce><sni>","5","0","2","2018-12-14 10:29:09","","1","1","239101","","2018-12-14 10:29:09","2016-08-05 16:55:25",""
"2578482","How to authenticate my own provider( only for testing purposes)","<p>Now, I wrote a new provider (ESMJCE provider), and I also write a simple application to test it, but I have some exceptions like that</p>

<pre><code>java.lang.SecurityException: JCE cannot authenticate the provider ESMJCE
at javax.crypto.Cipher.getInstance(DashoA13*..)
at javax.crypto.Cipher.getInstance(DashoA13*..)
at testprovider.main(testprovider.java:27)
Caused by: java.util.jar.JarException: Cannot parse file:/C:/Program%20Files/Java/jre1.6.0_02/lib/ext/abc.jar
at javax.crypto.SunJCE_c.a(DashoA13*..)
at javax.crypto.SunJCE_b.b(DashoA13*..)
at javax.crypto.SunJCE_b.a(DashoA13*..)
... 3 more
</code></pre>

<p>And here is my source code</p>

<pre><code>import java.security.Provider;
import java.security.Security;
import javax.crypto.Cipher;
import esm.jce.provider.ESMProvider;

public class testprovider {

/
@param args
/
public static void main(String[] args) {
  // TODO Auto-generated method stub
  ESMProvider esmprovider = new esm.jce.provider.ESMProvider();

  Security.insertProviderAt(esmprovider,2);

  Provider[] temp = Security.getProviders();
  for (int i= 0; i&lt;temp.length; i++){
    System.out.println(""Providers: "" temp[i].getName());
  }
  try{
    Cipher cipher = Cipher.getInstance(""DES"", ""ESMJCE"");
    System.out.println(""Cipher: "" cipher);
    int blockSize= cipher.getBlockSize();
    System.out.println(""blockSize= "" + blockSize);
  }catch (Exception e){
    e.printStackTrace();
  } 
}
}
</code></pre>

<p>Please help me solve this issue</p>

<p>Thanks</p>
","<p>No you can't authenticate it unless you write your own JVM. Otherwise request the JVM provider(Oracle) to sign your Jars.</p>
","987","<java><jce>","0","0","2","2013-06-20 20:56:40","","2","1","308806","","2010-04-05 13:39:00","2010-04-05 13:03:20",""
"2578482","How to authenticate my own provider( only for testing purposes)","<p>Now, I wrote a new provider (ESMJCE provider), and I also write a simple application to test it, but I have some exceptions like that</p>

<pre><code>java.lang.SecurityException: JCE cannot authenticate the provider ESMJCE
at javax.crypto.Cipher.getInstance(DashoA13*..)
at javax.crypto.Cipher.getInstance(DashoA13*..)
at testprovider.main(testprovider.java:27)
Caused by: java.util.jar.JarException: Cannot parse file:/C:/Program%20Files/Java/jre1.6.0_02/lib/ext/abc.jar
at javax.crypto.SunJCE_c.a(DashoA13*..)
at javax.crypto.SunJCE_b.b(DashoA13*..)
at javax.crypto.SunJCE_b.a(DashoA13*..)
... 3 more
</code></pre>

<p>And here is my source code</p>

<pre><code>import java.security.Provider;
import java.security.Security;
import javax.crypto.Cipher;
import esm.jce.provider.ESMProvider;

public class testprovider {

/
@param args
/
public static void main(String[] args) {
  // TODO Auto-generated method stub
  ESMProvider esmprovider = new esm.jce.provider.ESMProvider();

  Security.insertProviderAt(esmprovider,2);

  Provider[] temp = Security.getProviders();
  for (int i= 0; i&lt;temp.length; i++){
    System.out.println(""Providers: "" temp[i].getName());
  }
  try{
    Cipher cipher = Cipher.getInstance(""DES"", ""ESMJCE"");
    System.out.println(""Cipher: "" cipher);
    int blockSize= cipher.getBlockSize();
    System.out.println(""blockSize= "" + blockSize);
  }catch (Exception e){
    e.printStackTrace();
  } 
}
}
</code></pre>

<p>Please help me solve this issue</p>

<p>Thanks</p>
","<p>actually you can bypass the Sun-rooted certificate requirement and can sign provider by your own: <a href=""http://java.zacheusz.eu/provider-signature-verif-vuln-2/273/"" rel=""nofollow"">Java HotSpot Cryptographic Provider signature verification issue</a>. And of course look here before: <a href=""http://download.oracle.com/javase/6/docs/technotes/guides/security/crypto/HowToImplAProvider.html#Step61"" rel=""nofollow"">http://download.oracle.com/javase/6/docs/technotes/guides/security/crypto/HowToImplAProvider.html#Step61</a></p>
","987","<java><jce>","0","1","2","2013-06-20 20:56:40","","2","1","308806","","2010-04-05 13:39:00","2010-04-05 13:03:20",""
"10950937","Java getting error 'Unhandled exception type XYZ'","<p>I have this code:</p>

<pre><code>class Crypt
{
    Key KEY;
    String TD;
    Cipher aes = Cipher.getInstance(""AES/CBC/PKCS5Padding"");

    KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");

public Crypt()
{
    int keyLength = 192;
    keyGen.init(keyLength);
    KEY = keyGen.generateKey();
</code></pre>

<p>Which when compiles gives this error:</p>

<pre><code>Exception in thread ""main"" java.lang.Error: Unresolved compilation problems: 
    Unhandled exception type NoSuchAlgorithmException
    Unhandled exception type NoSuchPaddingException
    Unhandled exception type NoSuchAlgorithmException
</code></pre>

<p>When researching the error I found <a href=""https://stackoverflow.com/a/2784955/530933"">this</a>.  But after downloading, installing and <a href=""https://groups.google.com/group/jets3t-users/msg/06751e3ffbb4e322"" rel=""nofollow noreferrer"">verifying</a> that Unlimited Strength Jurisdiction Policy Files are up to date I am still getting the error.</p>
","<p>Your error is very clear and doesn't have anything to do with the unlimited jurisdiction encryption files. It's telling you there are unhandled checked exceptions.</p>

<p>Add <code>throws Exception</code> to your constructor so it looks like this:</p>

<pre><code>public Crypt() throws Exception
{
    int keyLength = 192;
    keyGen.init(keyLength);
    KEY = keyGen.generateKey();
</code></pre>
","986","<java><macos><jce>","0","2","2","2012-06-08 14:42:19","10951008","1","3","-1","","2017-05-23 10:34:47","2012-06-08 14:37:27",""
"10950937","Java getting error 'Unhandled exception type XYZ'","<p>I have this code:</p>

<pre><code>class Crypt
{
    Key KEY;
    String TD;
    Cipher aes = Cipher.getInstance(""AES/CBC/PKCS5Padding"");

    KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");

public Crypt()
{
    int keyLength = 192;
    keyGen.init(keyLength);
    KEY = keyGen.generateKey();
</code></pre>

<p>Which when compiles gives this error:</p>

<pre><code>Exception in thread ""main"" java.lang.Error: Unresolved compilation problems: 
    Unhandled exception type NoSuchAlgorithmException
    Unhandled exception type NoSuchPaddingException
    Unhandled exception type NoSuchAlgorithmException
</code></pre>

<p>When researching the error I found <a href=""https://stackoverflow.com/a/2784955/530933"">this</a>.  But after downloading, installing and <a href=""https://groups.google.com/group/jets3t-users/msg/06751e3ffbb4e322"" rel=""nofollow noreferrer"">verifying</a> that Unlimited Strength Jurisdiction Policy Files are up to date I am still getting the error.</p>
","<p>Did you also install them into /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/lib/security?</p>
","986","<java><macos><jce>","0","1","2","2012-06-08 14:42:19","10951008","1","3","-1","","2017-05-23 10:34:47","2012-06-08 14:37:27",""
"32936548","Elliptic Curve PublicKey (Java - bouncycastle): How to get 32 byte X and 32 byte Y value from ECPublicKey.toString()","<p>I have a custom crypto engine for Elliptic curve, I am trying to make this compatible with Java's bouncy castle crypto, so I am testing my API (keypair generation) against Java's bouncycastle.</p>

<p>First thing is to share the publickey between Java &amp; my crypto engine that way I can get the same shared secret.</p>

<p>My module takes Elliptic curve 32-byte X &amp; 32-byte Y values. I was able to output X &amp; Y from Java code by calling ""publickeyJava .toString()"" below and output comes formated as 'X: .... and Y: ....."" (as shown below). I copy pasted these X &amp; Y values to my custom crypto engine and verified that I was able to get the same secret as generated by Java's bouncy castle, so I know my conversion works manually.</p>

<p><strong>THE PROBLEM IS HOW TO EXTRACT THESE 32-BYTE X &amp; Y VALUES IN JAVA PROGRAMATICALLY?</strong> I used java classes to get X &amp; Y coordinate and printed with ""getW.getAffineX() and getW.AffineY()"" (as shown in my code below) but the values don't seem to match the output generated from ""publickey.tostring"" (which is what my module needs).</p>

<p>Is there a way to extract X &amp; Y values from print ""pubclickey.tostring""? Please suggest.</p>

<p>/*** Java code that prints Elliptic curve X &amp; Y from bouncycastle crypto ****/</p>

<pre><code>public static int generateECKeys() {
    try {
        ECNamedCurveParameterSpec parameterSpec = ECNamedCurveTable.getParameterSpec(""secp256r1"");
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""ECDH"", ""SC"");

        keyPairGenerator.initialize(parameterSpec);
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        PublicKey publickeyJava = keyPair.getPublic();

        Log.e(TAG_LOG, ""X &amp; Y values are ...."" + publickeyJava .toString());

        Log.d(""LOG_TAG"", ""BigInteger X value is = "" + ((ECPublicKey) publickeyJava).getW().getAffineX().toString());
        Log.d(""LOG_TAG"", ""BigInteger Y value is = "" + ((ECPublicKey) publickeyJava).getW().getAffineY().toString());
         /* .....code to generate shared secret   ..... */
        return 1;
    } catch(Exception e){e.printStackTrace();}
        return 0;
}
</code></pre>

<p>/******** OUTPUT ********/</p>

<pre><code>X &amp; Y values are ....EC Public Key             
    X: f98c87d3b6db30895b275630f30df9d796d067b06e4836f5615cad84965f4f85 
    Y: b8b58cb767f23e4bc4db0cc371ffb50cf12aa30407c1ba236f78a6c38948c2ee

BigInteger X value is = 324637435756455760457435640555474465574856445654455076545679
BigInteger Y value is = 954378375783465749076758439759347657056597437786534984623864
</code></pre>

<p>Thanks</p>
","<p>Today I got your same problem. I solved it in this way that it seems to me easier than parsing a String.
</p>

<pre><code>ECPublicKey publickeyJava = (ECPublicKey)keyPair.getPublic();
ECPoint ecp = chiavePubblica.getW();
// to access X and Y you can use
ecp.getAffineX()
ecp.getAffineY()
</code></pre>
","962","<java><android><bouncycastle><jce><elliptic-curve>","2","0","1","2019-05-17 11:06:07","","4","1","","","","2015-10-04 17:56:16",""
"34339600","Decrypting password with PBKDF2 Key","<p>I've been playing around with some encryption/decryption with pbkdf/aes128.</p>

<p>I know the master password, iteration count and have the base64 encoded key. </p>

<p>I also have the base64 encoded password which is encrypted with the key. I am trying to decrypt the password. Below is my code so far, but I am fairly stuck with where to go next. Is anyone able to help me out?</p>

<pre><code>public static void main(String... args) throws Exception {
    String masterPassword = ""password"";
    String base64EncodedKey = ""U2FsdGVkX18QAut2uv9ElKWb2T8QycYS4k0PgjwUtWW2NaBlEmolBwNhPkYDvg986QOYqDs/LVC7mnUUQbrRkbn0sLBbLQ/+oMjvzBpcBRIPqBnQ7bKZjPXZIBDt+15KSRWGSFAnrXVL6Udcecu7t8WNrcUoXy9bgjRpwCzqaMuVRik3sBQNmNbb/4rbf9+NM6tNEZ4KsoHBkcXj4DofzISOBQhmpjfqagjb057vb/8+Pi5cpRl4sO3GPX0Xu8XVTQsLffm3oTTywG9V+2XwXMfvb34SXrJPOkxlHBqjw2GqNx4bhz9buCoLzUFrFfTEeB+gg2yEwFONWhPtV7D/MYAOrZB8P0RaL7oQh1mAnx9ESlFJ5V6VzwbFZGxj7QeaEWG47HFBdSfSuAdibs7N+GtAFv2lQQnEK+li0+rwEYZ+AKeohqe3A6yZDGYpkGvGFr4EDsWEHnYtWl8yL6guLELJxbLXZ8HLLE+W4Sut9l69OS5QeqgLJcuvtw0l1psmrsx8SA/NyFfGNfQE4xi7RPg8qhR3ardEiG6O+IhMMD80PBHFqKZy0jLPRbZA42oApF7isbm4OUQBBrObOpuLMwTCrsMD6DrUUUy1wwd3Ij35mvF7xcJwiYGuE/B3Eqk2UDfDlMXeiWurPJ+px1ie9ZhdfXCTYJOUuRFB25fw0aXFVKO40yrlHoi69B0P2HffO2uH2bzhWQ7KOAqjRyo6mtPn5Xsd+T4rZKWNoWt+fjmLbx+evdDCiF1E/2k8oHAlrvp65DVFhbK69BKFTuMdqr+3sSX9Jl1KPuvJP9fWIk85ncF/K5BbiZ9d47pBt8DFEf+lDhCBSemM0Tjn8fSG6oDlqpdIl7ZXWc/5NhdE6idMQm9bOPbtZWIBM5kJqLpOHLt37vslZFwNv5sq0c2ULwGaBeP1WHfpE0PcaBTTweP3T56ufzo1Larsgw/X3VIXfKM7ZULgbPMQU0SxxBj//jDZJrm+8e782LJJTIMGkcs6B/AOuZCtZVe5gYz1Wlk3JGg+sinBslLyVSP7hFaKHji9KUoBhmyVJajiBYrEVdGLKdyWE7FbGQOZ5rSVNE5kLJ3TBhaejjpHvlJMuGa1WtBmVZTaq2E5ax0wShJixfm+QZMTEhq1ryM3pdsxg0ul1GMLs9x+WRps/F8YHBilwYKEAbqVJxnTRjl8vmqDUS+VrNRYkRHP982DwikzOpTtdlN6+PMta53bw3Q6Qxiiaxhl4SuPYwsV9XcAuDNYu7NcFY+2/IiMJl/ZhLQUXLsbnDT9jUbSi5HVO3W1m65mXX+O/0mFeWmIcf2Ch5aBRhxAtup74V/vKGNVUNY8vU43KrEKFpbD5vc54UY6itQZef3VM+VNqJzQrI9Ka3wKIaY7IWN87KZ/1Odw1ZjdmNQX"";
    String base64EncodedPassword = ""U2FsdGVkX1+H71VA6yn6cA/A/ojEP2lwCUcorrz8CqkffRHSghm/Q0pDsf/p/FTw""; //value is 'password'
    int iterations = 100000;

    Base64.Decoder base64Decoder = Base64.getDecoder();

    byte[] decodedKey = base64Decoder.decode(base64EncodedKey);
    byte[] salt = Arrays.copyOfRange(decodedKey, 8, 16);
    byte[] keyData = Arrays.copyOfRange(decodedKey, 16, decodedKey.length);


    KeySpec spec = new PBEKeySpec(masterPassword.toCharArray(), salt, iterations, 32 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    SecretKey secretKey = f.generateSecret(spec);

    byte[] rawKey = secretKey.getEncoded();
    byte[] aesRaw = Arrays.copyOfRange(rawKey, 0, 16);
    byte[] aesIv = Arrays.copyOfRange(rawKey, 16, 32);

    SecretKeySpec aesKey = new SecretKeySpec(aesRaw, ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/CBC/NoPadding"");
    cipher.init(Cipher.DECRYPT_MODE, aesKey, new IvParameterSpec(aesIv));

    byte[] decryptedKey = cipher.doFinal(keyData);

    byte[] decodedPassword = base64Decoder.decode(base64EncodedPassword);
    byte[] passwordSalt = Arrays.copyOfRange(decodedPassword, 8, 16);
    byte[] passwordData = Arrays.copyOfRange(decodedPassword, 16,decodedPassword.length);
    // hmm...
}
</code></pre>

<p>Thanks,</p>
","","960","<java><encryption><aes><jce><pbkdf2>","0","","0","2017-02-20 05:27:31","","4","3","608639","","2017-02-20 05:27:31","2015-12-17 16:27:29",""
"16855013","How to use private keys from Android storage","<p>I'm trying to import a private key from Android system storage using next code:</p>

<pre><code>PrivateKey privateKey = KeyChain.getPrivateKey(activity, alias);
</code></pre>

<p>where <code>alias</code> is retrieved using <code>KeyChain.choosePrivateKeyAlias()</code> method. <code>KeyChain.getPrivateKey</code> doesn't return <code>null</code> but PrivateKey object contains wrong key (all its significant fields are <code>null</code>). I thought that the key is not exportable and tried to use it in the next code:</p>

<pre><code>Cipher rsa;
rsa = Cipher.getInstance(""RSA"");
rsa.init(Cipher.ENCRYPT_MODE, privateKey);
byte[] enc = rsa.doFinal(str.getBytes());
</code></pre>

<p>but got <strong>NullPointerException</strong> that comes from BouncyCastle internals.</p>

<p>The certificate with the key were imported from a PFX file using Android standard <em>load from memory card</em> function.</p>

<p>What I'm doing wrong?</p>

<p>UPD: I've tried to do the same with different RSA certificates and result is the same :(</p>
","<p>Try the following code that is working for me perfectly:</p>

<pre><code>KeyStore ks;
ks = KeyStore.getInstance(""AndroidCAStore"");
ks.load(null, null);
keyChain = KeyChain.getCertificateChain(ctx, certificateAlias);
privateKey = KeyChain.getPrivateKey(ctx, certificateAlias);
</code></pre>
","956","<java><android><eclipse><bouncycastle><jce>","9","0","1","2014-05-10 11:23:19","","4","7","2670249","","2014-03-31 10:12:09","2013-05-31 10:19:10",""
"27944331","Why is the java method Provider.getService(String type, String algorithm) synchronized?","<p>Many Java libraries are relying on the <a href=""http://docs.oracle.com/javase/8/docs/api/java/security/Provider.html#getService-java.lang.String-java.lang.String-"" rel=""nofollow"">Provider.getService</a> method, for example MessageDigest, Cipher and many others. When a web server needs hash or encryption as a part of its business flow it uses the Java Security library which eventually calls to the method:</p>

<pre><code> public synchronized Service getService(String type, String algorithm)
</code></pre>

<p>In a multi-threaded server after certain load, many threads are starting to compete for the lock on the above method, which leads to very serious bottleneck affecting the throughput of the server.</p>

<p>We solve this issue by adding Aspect which intercepts methods that eventually call to Provider.getService and cache the instances of these objects in a ThreadLocal.</p>

<p>Could someone explain please, why in first place the developers of the Provider.getService decided to put 'synchronized' on that method?? Why they could not solve the race condition by using ConcurrentMap?</p>
","<blockquote>
  <p>Could someone explain please, why in first place the developers of the Provider.getService decided to put 'synchronized' on that method?? Why they could not solve the race condition by using ConcurrentMap?</p>
</blockquote>

<p>The <code>Provider.getService(...)</code> method says available since 1.5 so <code>ConcurrentHashMap</code> was written when this the <code>getService(...)</code> code was.  If you look at the code, the call is doing more than executing map operations.  For example:</p>

<pre><code>    // avoid allocating a new key object if possible
    ServiceKey key = previousKey;
    if (key.matches(type, algorithm) == false) {
        key = new ServiceKey(type, algorithm, false);
        previousKey = key;
    }
</code></pre>

<p>This sort of get/test/set operation isn't handled by <code>ConcurrentHashMap</code> unless you create the key ahead of time which the programmers might have thought was computationally excessive.</p>

<p>It may also be that they expected folks to do exactly what you are doing which is to create and then cache the instance of the service.  Certainly putting these in <code>ThreadLocal</code>s is what I've been doing.</p>

<p>Hope this helps.</p>
","927","<java><multithreading><encryption><synchronized><jce>","3","0","1","2018-06-25 09:37:03","","2","1","3270595","","2015-01-14 14:29:09","2015-01-14 13:40:25",""
"10452896","Installing JCE on Ubuntu Server 10.04 with JDK 6","<p>I've been working with cryptography and have some problems.
I always get this exception.</p>

<p>java.io.IOException: exception decrypting data - java.security.InvalidKeyException: Illegal key size
    at org.bouncycastle.jce.provider.JDKPKCS12KeyStore.cryptData(Unknown Source)
    at org.bouncycastle.jce.provider.JDKPKCS12KeyStore.engineLoad(Unknown Source)</p>

<p>Searching google one finds that a JCE Unlimited Policy File is needed.
As you download it, the instalation instructions say that the only thing needed to do 
is to copy both jar files included into /security/ folder of your JRE.
Well that doesn´t work, i've searched all the directories of my machine to find
any other java installation, and i found none. I double checked that the files were correct</p>

<p>Some info:</p>

<p>java -version reports:<br>
java version ""1.6.0_26""<br>
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)<br>
Java HotSpot(TM) Client VM (build 20.1-b02, mixed mode, sharing)</p>

<p>I've installed this Java version using apt-get install sun-java6<br></p>

<p>Any ideas on this?</p>
","<p>The solution to my problems came from other place and i'll explain here.
Before the error i had:</p>

<pre><code>KeyStore ks = KeyStore.getInstance(""pkcs12"",""BC"");  
File cert = new File(certPath);     
FileInputStream fis = new FileInputStream(cert);        
ks.load(fis,certpassword.toCharArray());
</code></pre>

<p>And now i have: </p>

<pre><code>KeyStore.Builder builder = null;
ProtectionParameter paramet = new PasswordProtection(certpassword.toCharArray());
builder = KeyStore.Builder.newInstance(""PKCS12"", null, new File(certPath), paramet);
KeyStore ks = builder.getKeyStore();
File cert = new File(certPath);
FileInputStream fis = new FileInputStream(cert);        
ks.load(fis, certpassword.toCharArray());
</code></pre>

<p>This code is probably not completely correct but it works.
As for a reason to this i don´t have a clue.
I just tried a different way of loading the certificate and this one worked.</p>

<p>I haven´t tested if this solution works without the unlimited policy files.</p>
","922","<bouncycastle><jce><ubuntu-server>","0","0","1","2012-05-07 21:52:37","","0","","","","","2012-05-04 16:43:49",""
"16967849","JBOSS AS 7 : ClassNotFoundException: javax.crypto.SecretKeyFactorySpi","<p>I am running <strong>jboss-as-7.1</strong> on <strong>java 1.6</strong>. The custom login module encrypts using <strong>bouncycastle provider</strong>. However jboss throws this error on startup. (Only at trace log level, mind you). Here is my configuration:</p>

<ol>
<li>Added <code>bouncycastle</code> as provider in <code>java.security</code> file.</li>
<li>Download unlimited strength policy files and put in <code>lib/security</code></li>
</ol>

<p>I know that <code>javax.crypto.SecretKeyFactorySpi</code> is already defined in the <strong>jce.jar</strong> file. But it's not being picked up. Not sure what else to try.</p>

<pre><code>Caused by: java.lang.ClassNotFoundException: javax.crypto.SecretKeyFactorySpi from [Module ""abc.crypto:main"" from local module loader @210a6ae2 (roots: /home/ptest/jboss-as-7.1.0.Final/modules)]
    at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:190)
    at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:468)
    at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:456)
    at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:423)
    at org.jboss.modules.ConcurrentClassLoader.performLoadClassChecked(ConcurrentClassLoader.java:423)
</code></pre>
","<p>Are you defining your own JBoss module for BouncyCastle?  It looks as though you are, based on the ""abc.crypto:main"" line you posted.  I typically see the error you described when I am incorrectly referencing a module in my assembly descriptor, or if the module itself is not configured properly.  I'd start there.</p>
","910","<jboss><bouncycastle><jce>","0","0","1","2013-12-13 09:40:16","","0","","217324","","2013-06-06 16:59:38","2013-06-06 16:53:49",""
"37343063","JCE Cannot Authenticate the provider","<p>I'm using Bouncy Castle as the provider. But when i load the keystore, I am getting JCE cannot authenticate provider BC exception. I understand that the jar has to be signed. I am using the signed jar from their site. </p>

<p>Here is the code </p>

<pre><code>KeyStore keystore = KeyStore.getInstance(""PKCS12"", new BouncyCastleProvider());
char[] pin = args[1].toCharArray();
keystore.load(new FileInputStream(ksFile), pin);
</code></pre>

<p>Here is the stack trace</p>

<pre><code>Exception in thread ""main"" java.io.IOException: error constructing MAC: java.lang.SecurityException: JCE cannot authenticate the provider BC
at org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi.engineLoad(Unknown Source)
at java.security.KeyStore.load(Unknown Source)
</code></pre>

<p>Is it better if I go with the sun's implementation instead? It says here that the pkcs11 provider can't be run on windows 64 bit. <a href=""http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html#KeyStoreRestrictions"" rel=""nofollow"">http://docs.oracle.com/javase/6/docs/technotes/guides/security/p11guide.html#KeyStoreRestrictions</a> Is there such a restriction for pkcs12 too? </p>
","","892","<bouncycastle><jce>","1","","0","2016-05-20 09:32:01","","2","1","","","","2016-05-20 09:32:01",""
"30809726","AES with PKCS#5 padding","<p>In quite a few places, I see Java code that uses AES with PKCS#5 padding. I do not understand how this could possible work.</p>

<p>PKCS#5 padding is meant to be used with ciphers that have a block size of &lt;= 8 bytes. The block size for AES is 16 bytes. Is all the code that is out there that uses AES with PKCS#5 wrong? Or does the framework internally use PKCS#7 instead? The frameworks in question would be Sun provide in Java, JCE and BouncyCastle.</p>
","<p>The code is indeed using PKCS#7 instead. The reason that <code>""PKCS5Padding""</code> is specified is very likely due to compatibility with the older DES and 3DES ciphers. Note that PKCS#5 padding is exactly 8 bytes, not less. Bouncy Castle usually follows the Sun/Oracle providers for the sake of compatibilty, although you can also use the more correct <code>""PKCS7Padding""</code> for the Bouncy Castle provider.</p>

<p>More information <a href=""https://crypto.stackexchange.com/q/9043/1172"">on the crypto site</a> (disclaimer: pointing to my own popular Q/A).</p>
","873","<java><encryption><aes><bouncycastle><jce>","4","2","1","2015-06-16 00:26:51","30857030","5","","","","","2015-06-12 18:16:34",""
"24009372","Password encryption/decryption for logback configuration","<p>I'm using logback's DBAppender to store my logs into an oracle database. I'd also like to add security to my login credentials by encrypting and decrypting my password. So i was recomended  a java library <strong>jasypt</strong>. I have few questions and I'm unable to access <a href=""http://jasypt.org/"" rel=""nofollow noreferrer"">http://jasypt.org/</a> 
too.</p>

<ol>
<li>Can I use jasypt for encrypting logback.xml's DBAppender database credentials?</li>
<li>How will the decryption done on other end(Oracle Database)?</li>
</ol>
","<p>This is a late answer and does not cover all questions. But I wanna share my solution in case anybody else stumbles over here. As for me, I am using LogBack to store logs in my MySQL database. I guess it makes no difference, if you use Oracle or something else, because the connection is done via jdbc and the decryption by jasypt. I assume you know how to use jdbc and jasypt.</p>

<p>This is my example logback.xml:</p>

<pre><code>&lt;configuration&gt;
&lt;appender name=""stdout"" class=""ch.qos.logback.core.ConsoleAppender""&gt;
    &lt;encoder&gt;
        &lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{5} - %msg%n&lt;/pattern&gt;
    &lt;/encoder&gt;
&lt;/appender&gt;
&lt;appender name=""db"" class=""ch.qos.logback.classic.db.DBAppender""&gt;
    // important!! Deliver your own class
    &lt;connectionSource class=""com.company.project.Connector""&gt;
        &lt;driverClass&gt;com.mysql.jdbc.Driver&lt;/driverClass&gt;
        // nothing more to provide here
    &lt;/connectionSource&gt;
&lt;/appender&gt;

&lt;logger name=""com.company"" level=""ALL""/&gt;

&lt;root level=""WARN""&gt;
    &lt;appender-ref ref=""stdout""/&gt;
    &lt;appender-ref ref=""db""/&gt;
&lt;/root&gt;
</code></pre>

<p></p>

<p>And this is the example Connector class:</p>

<pre><code>// Important to extend DriverManagerConnectionSource
public class Connector extends DriverManagerConnectionSource {

  /**
   * Overrides: getConnection() in class DriverManagerConnectionSource
   */
  @Override
  public Connection getConnection() {

    // I am loading the properties from the resources foler
    try (final InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream(""client.properties"")) {
      final EnvironmentPBEConfig       config    = new EnvironmentPBEConfig();
      final StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
      final Properties                 props     = new EncryptableProperties(encryptor);

      props.load(inputStream);
      config.setAlgorithm(""&lt;algorithm&gt;"");
      config.setPassword(""&lt;jasypt encryption password&gt;"");
      encryptor.setConfig(config);

      return DriverManager.getConnection(String.format(""jdbc:mysql://%s/%s?user=%s&amp;password=%s"",
                                                       props.getProperty(""&lt;ip&gt;""),
                                                       props.getProperty(""&lt;db_name&gt;""),
                                                       props.getProperty(""&lt;user&gt;""),
                                                       props.getProperty(""&lt;pw&gt;"")));
    } catch (IOException | SQLException  e) {
      e.printStackTrace();
    }

    return null;
  }
}
</code></pre>

<p>Please take in mind, that every encrypting is useless, if someone gets your jasypt password and the encrypted values. Anybody can decrypt it with a bit googling.</p>
","867","<java><encryption><logback><jce><jasypt>","2","1","2","2019-07-01 14:56:06","","4","","476791","","2019-07-01 14:56:06","2014-06-03 07:26:57",""
"24009372","Password encryption/decryption for logback configuration","<p>I'm using logback's DBAppender to store my logs into an oracle database. I'd also like to add security to my login credentials by encrypting and decrypting my password. So i was recomended  a java library <strong>jasypt</strong>. I have few questions and I'm unable to access <a href=""http://jasypt.org/"" rel=""nofollow noreferrer"">http://jasypt.org/</a> 
too.</p>

<ol>
<li>Can I use jasypt for encrypting logback.xml's DBAppender database credentials?</li>
<li>How will the decryption done on other end(Oracle Database)?</li>
</ol>
","<p>you can refer to <a href=""https://github.com/ulisesbocchio/jasypt-spring-boot#custom-environment"" rel=""nofollow noreferrer"">custom-environment</a>, the author provide one solution to resolve this problem (to decrypt spring property before application run)</p>

<pre><code>new SpringApplicationBuilder()
    .environment(new StandardEncryptableEnvironment())
    .sources(YourApplicationClass.class).run(args);
</code></pre>
","867","<java><encryption><logback><jce><jasypt>","2","0","2","2019-07-01 14:56:06","","4","","476791","","2019-07-01 14:56:06","2014-06-03 07:26:57",""
"18906129","What is difference in implementation of SunJCE 1.6 and SunJCE 1.5?","<p>I am migrating from JDK 1.5 to JDK 1.6. I've encountered difficult problem. Here is piece of code:</p>

<pre><code>SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBEWithMD5AndTripleDES"");
SecretKey key = factory.generateSecret(keySpec);
Cipher ecipher = Cipher.getInstance(key.getAlgorithm());
</code></pre>

<p>The created Cither instances produce different results for JRE 1.5 and JRE 1.6 (jce is installed in both cases).</p>

<p>Why JDKs produce different results? What is the difference in java security implementation between versions 1.5 and 1.6?</p>
","<p>This works for both JDK 1.5 and JDK 1.6</p>

<pre><code>        SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBEWithMD5AndTripleDES"");
        SecretKey key = factory.generateSecret(keySpec);

        // instead of key.getAlgorithm(). For compatibility with JDK 1.5
        String newAlgorithm = ""PBEWithMD5AndDES""; // the same value as in JDK 1.5

        ecipher = Cipher.getInstance(newAlgorithm);
</code></pre>
","845","<java><security><jdk1.6><jce><jdk1.5>","0","0","2","2013-09-19 22:51:05","18906161","0","3","","","","2013-09-19 22:43:55",""
"18906129","What is difference in implementation of SunJCE 1.6 and SunJCE 1.5?","<p>I am migrating from JDK 1.5 to JDK 1.6. I've encountered difficult problem. Here is piece of code:</p>

<pre><code>SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBEWithMD5AndTripleDES"");
SecretKey key = factory.generateSecret(keySpec);
Cipher ecipher = Cipher.getInstance(key.getAlgorithm());
</code></pre>

<p>The created Cither instances produce different results for JRE 1.5 and JRE 1.6 (jce is installed in both cases).</p>

<p>Why JDKs produce different results? What is the difference in java security implementation between versions 1.5 and 1.6?</p>
","<p>Here is a link to the differences between 1.5 &amp; 1.6:</p>

<p><a href=""http://en.wikipedia.org/wiki/Java_6#Java_SE_6_.28December_11.2C_2006.29"" rel=""nofollow"">http://en.wikipedia.org/wiki/Java_6#Java_SE_6_.28December_11.2C_2006.29</a></p>
","845","<java><security><jdk1.6><jce><jdk1.5>","0","1","2","2013-09-19 22:51:05","18906161","0","3","","","","2013-09-19 22:43:55",""
"38062249","How to use AES CCM with Bouncycastle JCE provider - CCMParameters","<p>Is it possible to use JCE to perform CCM?</p>

<p>I see lots of examples on the Internet using the non-JCE bouncycastle classes. In particular, I see them calling init passing in a CCMParameters object.</p>

<p>Trouble is, this CCMParameters object doesn't derive from AlgorthmParameters or AlgorithmParameterSpec, so there seems to be no way to pass it into Cipher.init() (after getting a Cipher object with Cipher.getInstance(""AES/CCM/NoPadding"")).</p>

<p>How does one do this?</p>
","<p>Hi here is sample code for AES-CCM algo
where all usual names are input params.
take care about HEX data bytes and all other things</p>

<pre><code>import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.engines.AESEngine;
import org.bouncycastle.crypto.modes.CCMBlockCipher;
import org.bouncycastle.crypto.params.CCMParameters;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.util.encoders.Hex;

public class AesCcm {
    public static void main(String[] args) throws IllegalStateException, InvalidCipherTextException {
    int macSize = 125;
    byte[] key = new byte[32];
    byte[] keybyte = ""test123"".getBytes();
    byte[] inputNouc = ""abcdefghijklm"".getBytes();
    for (int I = 0; I &lt; keybyte.length; I++) {
        key[I] = keybyte[I];
    }

//      Input data in HEX format
    String input = ""ed88fe7b95fa0ffa190b7ab33933fa"";

    byte[] inputData= Hex.decode(input);

    BlockCipher engine = new AESEngine();
    CCMParameters params = new CCMParameters(new KeyParameter(key),
            macSize, inputNouc, null);

    CCMBlockCipher cipher = new CCMBlockCipher(engine);
    cipher.init(true, params);
    byte[] outputText = new byte[cipher.getOutputSize(inputData.length)];
    int outputLen = cipher.processBytes(inputData, 0, inputData.length,
            outputText , 0);
    cipher.doFinal(outputText, outputLen);

//      outputText and mac are in bytes 
    System.out.println(outputText);
    System.out.println(cipher.getMac());
    }
}
</code></pre>
","816","<java><encryption><aes><bouncycastle><jce>","5","0","2","2018-07-18 16:25:04","","1","","589259","","2017-09-26 21:56:46","2016-06-27 19:58:27",""
"38062249","How to use AES CCM with Bouncycastle JCE provider - CCMParameters","<p>Is it possible to use JCE to perform CCM?</p>

<p>I see lots of examples on the Internet using the non-JCE bouncycastle classes. In particular, I see them calling init passing in a CCMParameters object.</p>

<p>Trouble is, this CCMParameters object doesn't derive from AlgorthmParameters or AlgorithmParameterSpec, so there seems to be no way to pass it into Cipher.init() (after getting a Cipher object with Cipher.getInstance(""AES/CCM/NoPadding"")).</p>

<p>How does one do this?</p>
","<p>No, the JCE currently (as of JDK 10) does not support CCM mode. </p>

<p>For the list of supported AES modes, please have a look at the official documentation from Oracle <a href=""https://docs.oracle.com/javase/10/security/oracle-providers.htm"" rel=""nofollow noreferrer"">here</a>. Look at the Table 4-13 <em>""The SunJCE Provider Cipher Transformations""</em></p>
","816","<java><encryption><aes><bouncycastle><jce>","5","0","2","2018-07-18 16:25:04","","1","","589259","","2017-09-26 21:56:46","2016-06-27 19:58:27",""
"29415279","Performing Application Level Encryption over data in MongoDB using JCE","<p>I've the following code to insert into and retrieve from document in MongoDB. And I want to perform encryption over the data stored in the MongoDB. Here is the code to insert and retrieve data:</p>

<pre><code>MongoClient mongoClient = new MongoClient( ""localhost"" , 27017 );
DB db = mongoClient.getDB( ""test"" );
System.out.println(""Connect to database successfully"");
DBCollection coll = db.getCollection(""mycol"");
System.out.println(""Collection mycol selected successfully"");
BasicDBObject doc = new BasicDBObject(""title"", ""MongoDB"").
            append(""description"", ""database"").
            append(""likes"", 100).
            append(""url"", ""http://www.vkpandey.com/mongodb/"").
            append(""by"", ""Vineet"");
coll.insert(doc);
System.out.println(""Document inserted successfully"");*/
DBCursor cursor = coll.find();
int i=1;
while (cursor.hasNext()) { 
System.out.println(""Inserted Document: ""+i); 
System.out.println(cursor.next()); 
i++;
}
</code></pre>

<p>Here is the code to perform DES encryption using JCE:</p>

<pre><code>KeyGenerator keyGen = KeyGenerator.getInstance(""DES"");
SecretKey secretKey = keyGen.generateKey();
Cipher desCipher = Cipher.getInstance(""DES/CBC/PKCS5Padding"");
desCipher.init(Cipher.ENCRYPT_MODE,secretKey);
/* Encryption */
strDataToEncrypt = ""Hello World of Encryption using DES "";
byte[] byteDataToEncrypt = strDataToEncrypt.getBytes();
byte[] byteCipherText = desCipher.doFinal(byteDataToEncrypt); 
strCipherText = new BASE64Encoder().encode(byteCipherText);
System.out.println(""Cipher Text generated using DES with CBC mode and PKCS5 Padding is "" +strCipherText);
/* Decryption */
desCipher.init(Cipher.DECRYPT_MODE,secretKey,desCipher.getParameters());

byte[] byteDecryptedText = desCipher.doFinal(byteCipherText);
strDecryptedText = new String(byteDecryptedText);
System.out.println("" Decrypted Text message is "" +strDecryptedText);
</code></pre>



<p>So please kindly suggest me the way to perform the encryption using the above code. It's basically for benchmarking the performance of encryption algorithm over the data in MongoDB.</p>
","<p>What exactly are you trying to encrypt? If you want to encrypt the fields you would call your encrpytion function on the data you were trying store in the BasicDbObject and then store it, then decrypt when it was retrieved. </p>

<p>I'm not sure what this benchmark is going prove to. MongoDB is not going to have anything to do with how you encrypt your data at the application level. </p>
","815","<java><mongodb><encryption><mongodb-query><jce>","-1","0","1","2015-04-06 00:42:36","","0","2","","","","2015-04-02 14:20:33",""
"30778350","Key length must be between 40 and 1024 bit","<p>I am getting following exception in my password encryption and decryption java file.</p>

<p>I got the solution for this issue in most of the website is replace existing security policy file with Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files.</p>

<p>I did that also but still the same error is coming. </p>

<p>But the same code is working fine in jdk1.6 with Linux OS. I have copied latest 1.7 compatible Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files from website.</p>

<blockquote>
  <p>JDK Version - jdk1.7.0_25<br/>
      Server OS - Linux<br/>
      <br/>
      Exception:<br/>
      java.security.InvalidKeyException: Key length must be between 40 and 1024 bit</p>
</blockquote>
","<p>You explained in the comments that the key passed is 512 bytes long. The error message is ""Key length must be between 40 and 1024 bit"". </p>

<p>512 bytes * 8 bit = 4096 bits. Your key is indeed too long.</p>

<p>If you're not decoding stuff that was encoded earlier with keys longer than 1024 bits, then use this code to cut off at 128 bytes (= 1024 bits):</p>

<pre><code>byte[] key = HexDecode(s1);
if (key.length &gt; 128)
{
    key = Arrays.copyOf(key, 128);
}
SecretKeySpec secretkeyspec = new SecretKeySpec(key, ""RC4"");
</code></pre>
","811","<java><encryption><jce><rc4-cipher>","-2","0","1","2015-06-11 12:43:42","","7","3","2572285","","2015-06-11 11:56:49","2015-06-11 10:30:47",""
"11083785","joomla jce disable/enable","<p>I need to change the status of the JCE (disable/enable) using javascript. It means readonly mode with the background set to opacity 1.
When the specific user clicks on the edit/save button the JCE should be activated or viceversa. </p>

<p>Using Joomla! 1.5.26 and JCE 2.2.0 I found this links: 
<a href=""http://www.tinymce.com/tryit/read_only_mode.php"" rel=""nofollow"">http://www.tinymce.com/tryit/read_only_mode.php</a></p>

<p>I also found how I can disable the content (cross-browsers):</p>

<pre><code>tinymce.get('editorID').getBody().setAttribute('contenteditable', 'false');
</code></pre>

<p>This code doesn't work:</p>

<pre><code>J('#editorID').css({opacity:1});
tinymce.get('editorID').getDoc().designMode = 'Off';
</code></pre>

<p>Please, how can I change the JCE opacity background from javascript?
Will it be possible to set the readonly mode by javascript?</p>

<p>Thanks!</p>
","<p>To apply this setting correctly you have to insert the real tinymce id you can get a console using <code>tinymce.activeEditor.id</code>.</p>

<p>So you may use </p>

<pre><code>var editor_id = tinymce.activeEditor.id;
tinymce.get(editor_id).getBody().setAttribute('contenteditable', 'false');
</code></pre>
","798","<joomla><tinymce><jce>","1","0","1","2012-06-26 09:10:13","11204059","0","","346063","","2012-06-26 09:08:14","2012-06-18 13:19:28",""
"37425798","Microsft Azure installing Java Cryptography Extension (JCE)","<p>I have a Java 8 Wep App on Azure.</p>

<p>I am using the default JRE build in application settings for the webapp. I am running on Tomcat.</p>

<p>I am having trouble installing Java Cryptography Extension to handle some encryption. I dont have access to Java Home to install it, I can only upload the WAR files to web app.</p>

<p>Does anyone know how to install JCE on Azure?</p>

<p>Thanks!
Fab</p>
","<p>On Azure Webapp, you only have the operation permission for the path <code>D:\home\</code>, but no permission for the others include <code>%JAVA_HOME%</code> and Apache Tomcat at the path <code>D:\Program Files (x86)\</code>.</p>

<p>Generally for using some packages, you can directly import these jar files into the directory <code>WEB-INF\lib</code> of the project or the war file. This way is only effective for the current project, and it's safe for the others to avoid clash.</p>

<p>For the file structure of the path <code>D:\home</code>, you can refer to the wiki page <a href=""https://github.com/projectkudu/kudu/wiki/File-structure-on-azure"" rel=""nofollow"">https://github.com/projectkudu/kudu/wiki/File-structure-on-azure</a> to know.</p>

<p>However, according to the doc <code>README.txt</code> in the JCE, it seems to be not possible for installing on Azure Webapp, so I think you can try to use other cryptography packages instead of JCE for your app, such as apache commons <a href=""https://commons.apache.org/proper/commons-codec/"" rel=""nofollow""><code>codec</code></a>.</p>
","797","<java><azure><jce>","0","0","2","2017-07-31 08:47:12","45411232","3","","","","","2016-05-24 23:59:02",""
"37425798","Microsft Azure installing Java Cryptography Extension (JCE)","<p>I have a Java 8 Wep App on Azure.</p>

<p>I am using the default JRE build in application settings for the webapp. I am running on Tomcat.</p>

<p>I am having trouble installing Java Cryptography Extension to handle some encryption. I dont have access to Java Home to install it, I can only upload the WAR files to web app.</p>

<p>Does anyone know how to install JCE on Azure?</p>

<p>Thanks!
Fab</p>
","<p>For people who are still having trouble with this I share my solution by example:</p>

<ol>
<li>Copy JDK from D:\Program Files (x86)\Java\jdk1.8.0_111 to D:\home\site\jdk1.8.0_111</li>
<li>Download and extract jce policy files from: <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""nofollow noreferrer"">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></li>
<li>copy files local_policy.jar and US_export_policy.jar to D:\home\site\jdk1.8\jre\lib\security (replace existing files)</li>
<li>Set application setting in Azure portal: JRE_HOME = D:/home/site/jdk1.8.0_111/jre</li>
<li>Now the JDK has JCE enabled. The ""Java minor version"" selected in the Azure portal is no longer used or this App Service.</li>
</ol>
","797","<java><azure><jce>","0","0","2","2017-07-31 08:47:12","45411232","3","","","","","2016-05-24 23:59:02",""
"27053407","Exception while file signing using HSM and SUNPKCS11","<p>We are using the HSM(Hardware Security Module) for the signing and encryption from our java application. 
We have plugged the HSM to our JVM using the java.security property file using the following entry</p>

<pre><code>security.provider.11=sun.security.pkcs11.SunPKCS11 D:/security/safenet.cfg
</code></pre>

<p>It was working fine all these days and suddenly we encountered a error as follows.</p>

<pre><code>java.security.SignatureException: RSASignature::engineSign sun.security.pkcs11.P11Key$P11PrivateKey cannot be cast to java.security.interfaces.RSAPrivateKey
</code></pre>

<p>We did the enough searching on google but not able to identify the root cause. </p>

<p>Appreciate any help</p>

<p>Thanks </p>
","<p>We also encountered the same issue. Specify the provider name when getting the Signing instance. When code to sign using HSM is called, there may some other piece of code in your application adding another provider [Security.insertProvider] which implements the same signing algorithm.
When your sign, you pass a parameter of Private Key handler for PKCS11 but the provider is expecting different Key handler of RSA.
Resolution:
When you get the HSM signing instance, specify the Security provider along with the signing algorithm.</p>
","789","<java><jce><pkcs#11><hsm>","0","1","1","2015-04-17 06:06:58","29691549","0","0","","","","2014-11-21 02:58:55",""
"7281860","Use jsafeJCEFIPS.jar OSGi","<p>Has anyone tried using jsafeJCEFIPS.jar OSGi? The jar is signed, I can't convert it to a bundle. I tried to embedded as jar in bundle, but it is always throws 
java.lang.SecurityException: ""JsafeJCE provider is disabled, a FIPS 140 required self-integrity check failed"" when I try to create a instance of JsafeJCE object. </p>

<p>It looks JsafeJCE can't check itself integrity(signature etc.)successfully.
I print out jsafeJCE.class.getProtectionDomain, it is (inputstream:bundle-name.jar ). </p>

<p>Any idea how to get jsafeJCE works in OSGi, I'm using Apache Felix.</p>

<p>Thanks in advance! </p>
","<p>An ugly workaround is to add RSA jars in system class path and expose these packages thru org.osgi.framework.bootdelegation</p>
","756","<osgi><apache-felix><jce><jar-signing>","0","0","1","2016-10-28 11:52:21","7305367","0","","7084588","","2016-10-28 11:52:21","2011-09-02 10:00:25",""
"18690238","How to query and retrieve a list of field-value pairs from X509 certificate in Java?","<p>In your browser if you go to Advanced Settings and then view the certificates, and select one and click on View (at least on Windows), you will see a popup dialog with 3 tabs. The Details tab will show a tabular list of Field and Value. Are these constant, or will they change? </p>

<p>Since they are just rows in a table, it is logical that they will vary.
If they vary (are dynamic), then is there any way to query and retrieve a list of these name-value pairs to avoid hard-coding X509Certificate.getX(), getY(), getZ()...? </p>

<p><strong>UPDATE:</strong>
From Windows Help (copied below), it appears that some fields are fixed, and others are extensions.</p>

<blockquote>
  <p>Details Tab The Details tab provides the following information about
  the certificate:</p>
  
  <p>Version. The X.509 version number.</p>
  
  <p>Serial number. The unique serial number that the issuing certification
  authority (CA) assigns to the certificate. The serial number is unique
  for all certificates issued by a given CA.</p>
  
  <p>Signature algorithm. The hash algorithm that the CA uses to digitally
  sign the certificate.</p>
  
  <p>Issuer. Information regarding the CA that issued the certificate.</p>
  
  <p>Valid from. The beginning date for the period in which the certificate
  is valid.</p>
  
  <p>Valid to. The final date for the period in which the certificate is
  valid.</p>
  
  <p>Subject. The name of the individual, computer, device, or CA to whom
  the certificate is issued. If the issuing CA exists on a domain member
  server in your enterprise, this will be a distinguished name within
  the enterprise. Otherwise, this may be a full name and e-mail name or
  other personal identifier.</p>
  
  <p>Public key. The public key type and length associated with the
  certificate.</p>
  
  <p>Thumbprint algorithm. The hash algorithm that generates a digest of
  data (or thumbprint) for digital signatures.</p>
  
  <p>Thumbprint. The digest (or thumbprint) of the certificate data.</p>
  
  <p>Friendly name. (Optional) A display name to use instead of the name in
  the Subject field.</p>
  
  <p>Enhanced key usage. (Optional) The purposes for which this certificate
  can be used.</p>
  
  <p>There are additional X.509 v3 extensions that can be used in a
  certificate. If they are present, they will be displayed.</p>
</blockquote>
","","750","<java><x509certificate><bouncycastle><jce>","0","","0","2013-09-09 15:57:16","","4","","398348","","2013-09-09 15:57:16","2013-09-09 01:02:34",""
"31467532","IllegalBlockSize Exception When Doing RSA on bytes of Strings","<p>I am trying to write RSA encryption and decryption classes in Java for a server where the client will be passing strings back and forth. I have the following code for the classes:</p>

<pre><code>public class RSAEncryption {
public static final String KEYGENALGORITHM = ""RSA"";
public static final String ALGORITHM = ""RSA/ECB/PKCS1Padding"";

public static KeyPairContainer generateKey() {
      KeyPairGenerator keyGen;
      KeyPair key;
    try {
        keyGen = KeyPairGenerator.getInstance(KEYGENALGORITHM);
        keyGen.initialize(1024);
        key = keyGen.generateKeyPair();
        return new KeyPairContainer(key.getPublic(), key.getPrivate());
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
        System.out.println(""Error: No such algorithm"");
    }
    return null;
 }

public static String pubkeyToString(PublicKey key){
    byte[] array = key.getEncoded();
    BASE64Encoder encoder = new BASE64Encoder();
    String tempstring = encoder.encode(array);
    return tempstring;
}

public static PublicKey stringToPubKey(String string){
    BASE64Decoder decoder = new BASE64Decoder();
    try {
        byte[] array = decoder.decodeBuffer(string);
        X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(array);
        KeyFactory keyFact = KeyFactory.getInstance(KEYGENALGORITHM);
        PublicKey pubKey = keyFact.generatePublic(x509KeySpec);
        return pubKey;
    } catch (IOException | NoSuchAlgorithmException | InvalidKeySpecException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } return null;
}

public static byte[] rSAencrypt(byte[] plaintext, String keystring) {
    Cipher cipher;
    try {
        PublicKey key = stringToPubKey(keystring);
        cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] cipherText = cipher.doFinal(plaintext);
        //String cipherText = new String(cipherTextbytes);
        return cipherText;
    } catch (NoSuchAlgorithmException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (BadPaddingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    return null;

}

public static byte[] rSAdecrypt(byte[] ciphertext, PrivateKey key){
    Cipher cipher;
    try {
        //byte[] ciphertext = ciphertextstring.getBytes();
        cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] decryptedText = cipher.doFinal(ciphertext);
        return decryptedText;
    } catch (NoSuchAlgorithmException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (BadPaddingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    return null;
}
}
</code></pre>

<p>I have the following code for a test class:</p>

<pre><code>public class RSAEncryptionKeyDemo {
public static void main(String[] args){
    KeyPairContainer keyPair = RSAEncryption.generateKey();
    PublicKey pubKey = keyPair.getPublicKey();
    String pubKeytext = RSAEncryption.pubkeyToString(pubKey);
    System.out.println(pubKeytext);

    String plaintext = ""Hello world!"";
    byte[] ciphertext = RSAEncryption.rSAencrypt(plaintext.getBytes(), pubKeytext);
    String ciphertextString = new String(ciphertext);
    System.out.println(ciphertextString);

    PrivateKey privkey = keyPair.getPrivateKey();
    byte[] decryptedText = RSAEncryption.rSAdecrypt(ciphertextString.getBytes(), privkey);

    String decryptedTextstring = new String(decryptedText);

    System.out.println(decryptedTextstring);


}
}
</code></pre>

<p>However, when I try to run the test class, key generation and encryption work fine, but I am thrown an error when I try to decrypt. The error is javax.crypto.IllegalBlockSizeException: Data must not be longer than 128 bytes, however, my data is definitely less than 128 bytes.</p>

<p>I can confirm that transforming the Public key to a string and back returns the same Public Key. I have also tried testing the code just using bytes, and this works fine. The error is apparently in trying to decrypt the bytes taken from a string.</p>

<p>Is there some way to decrypt bytes taken from a string without throwing this error? Thanks in advance, it is very much appreciated.</p>

<p>EDIT: i think I might have isolated the issue. I am trying to turn an encrypted bytearray into a string, and then extract the bytes from it, but the encrypted bytearray doesn't translate properly into a string anyway so when I get the bytes it doesn't extract what the original encrypted bytearray was. Is that correct, and if so, how do I turn the bytearray into a string properly so we can exchange it?</p>
","<p>If you do this</p>

<pre><code>byte[] ciphertext = RSAEncryption.rSAencrypt(plaintext.getBytes(), pubKeytext);
//String ciphertextString = new String(ciphertext);
//System.out.println(ciphertextString);

PrivateKey privkey = keyPair.getPrivateKey();
byte[] decryptedText = RSAEncryption.rSAdecrypt(ciphertext, privkey);
</code></pre>

<p>the code runs perfectly fine. You cannot convert a byte array to a String since the bytes are converted to characters and back to bytes (using getBytes()) - depending on your default charset. <code>new String(ciphertext)</code> strips away unprintable characters which changes the ciphertext and hence makes the plaintext unrecoverable. (Thanks to Artjom B. for pointing that out.)</p>

<p>Simply use Base64 or binary to transport your ciphertext, e.g.:</p>

<pre><code>byte[] ciphertext = RSAEncryption.rSAencrypt(plaintext.getBytes(), pubKeytext);
String ciphertextString = Base64.toBase64String(ciphertext);
System.out.println(ciphertextString);

PrivateKey privkey = keyPair.getPrivateKey();
byte[] decryptedText = RSAEncryption.rSAdecrypt(Base64.decode(ciphertextString), privkey);
</code></pre>

<p>(I am using the BouncyCastle Base64 encoder here.)</p>
","726","<java><encryption><jce>","0","1","1","2015-07-17 07:41:37","","3","3","5051134","","2015-07-17 02:44:08","2015-07-17 02:24:55",""
"18653017","Could not generate DH keypair - BouncyCastle and DHParameterSpec Exception","<p>I use an HTTP client to make some HTTPS POST request. Everything works fine at the beginning but after some time I encounter an exception.</p>

<pre><code>Caused by: java.lang.RuntimeException: Could not generate DH keypair
    at com.sun.net.ssl.internal.ssl.DHCrypt.&lt;init&gt;(DHCrypt.java:106)
    at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverKeyExchange(ClientHandshaker.java:446)
    at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:171)
    at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:516)
    at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:454)
    at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:884)
    at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1112)
    at com.sun.net.ssl.internal.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:623)
    at com.sun.net.ssl.internal.ssl.AppOutputStream.write(AppOutputStream.java:59)
    ... 117 more
Caused by: java.security.InvalidAlgorithmParameterException: parameter object not a DHParameterSpec
    at org.bouncycastle.jce.provider.JDKKeyPairGenerator$DH.initialize(Unknown Source)
    at com.sun.net.ssl.internal.ssl.DHCrypt.&lt;init&gt;(DHCrypt.java:100)
    ... 125 more
</code></pre>

<p>It seem that a problem append with BouncyCastle but I can't find any information about it ! I try to install Unlimited JCE Key but it has no effect on my problem.</p>

<p>If somebody can help me, it would be great !</p>

<p>Thanks.</p>
","","723","<ssl><https><httpclient><bouncycastle><jce>","0","","0","2013-09-06 08:15:00","","2","0","","","","2013-09-06 08:15:00",""
"7989288","Adding support for Camellia Encryption in Java and HttpClient","<p>I am using HttpClient 4 to GET an https URL. The server has valid certificates and in fact accessing the same https url from chrome works fine with no warnings.</p>

<p>However from the java code, on execute, I get: </p>

<pre><code>javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated
    at com.sun.net.ssl.internal.ssl.SSLSessionImpl.getPeerCertificates(SSLSessionImpl.java:352)
</code></pre>

<p>The same code works great with one https link and not with another. The main difference I can see between the working and non working certificate is the following:</p>

<p>The working one uses RC4_128</p>

<p>The one that throws the exception uses CAMELLIA 256 CBC</p>

<p>I then found out that Java does not support Camellia. see <a href=""http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6537034"" rel=""nofollow"">http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6537034</a> and <a href=""http://en.wikipedia.org/wiki/Comparison_of_TLS_Implementations#Encryption_Algorithms"" rel=""nofollow"">http://en.wikipedia.org/wiki/Comparison_of_TLS_Implementations#Encryption_Algorithms</a></p>

<p>How can I go about adding this support to my HttpClient code? </p>

<p>I have added BouncyCastle library and security provider</p>

<pre><code>static {
    Security.addProvider(new BouncyCastleProvider());
}
</code></pre>

<p>This supposedly adds support for Camellia.</p>

<p>But still no luck.</p>
","","718","<java><security><encryption><httpclient><jce>","0","","0","2011-11-03 03:22:42","","6","","101272","","2011-11-03 03:22:42","2011-11-03 01:18:52",""
"18067129","SHA2RSA encryption with BouncyCastle","<p>I have been trying to encrypt some data using BouncyCastle's JCE provider. I'm trying ""SHA256withRSA"" and I'm getting a ""noSuchAlgorithmException"". Am I doing something wrong? Can someone help? Thanks</p>

<p>Specifically I'm trying </p>

<pre><code>Signature.getInstance(""SHA256withRSA"", new BouncyCastleProvider());
</code></pre>

<p>As mentioned here - <a href=""http://www.bouncycastle.org/wiki/display/JA1/X.509+Public+Key+Certificate+and+Certification+Request+Generation"" rel=""nofollow"">http://www.bouncycastle.org/wiki/display/JA1/X.509+Public+Key+Certificate+and+Certification+Request+Generation</a></p>
","<p>Perhaps this is a matter of selecting a provider.</p>

<p>I see that the standard SunJSSE Provider supports SHA1withRSA, but not SHA256withRSA. </p>

<p>Somewhere in your code do you have something like this:</p>

<pre><code>sigGen = new JcaContentSignerBuilder(""SHA1withRSA"").setProvider(""BC"").build(privKey);
</code></pre>
","711","<java><security><bouncycastle><jce>","0","0","3","2017-03-17 20:35:46","18111034","1","","","","","2013-08-05 20:29:18",""
"18067129","SHA2RSA encryption with BouncyCastle","<p>I have been trying to encrypt some data using BouncyCastle's JCE provider. I'm trying ""SHA256withRSA"" and I'm getting a ""noSuchAlgorithmException"". Am I doing something wrong? Can someone help? Thanks</p>

<p>Specifically I'm trying </p>

<pre><code>Signature.getInstance(""SHA256withRSA"", new BouncyCastleProvider());
</code></pre>

<p>As mentioned here - <a href=""http://www.bouncycastle.org/wiki/display/JA1/X.509+Public+Key+Certificate+and+Certification+Request+Generation"" rel=""nofollow"">http://www.bouncycastle.org/wiki/display/JA1/X.509+Public+Key+Certificate+and+Certification+Request+Generation</a></p>
","<p>Try this instead:</p>

<pre><code>Signature.getInstance(""SHA256withRSA"", ""BC"");
</code></pre>

<p>In most of the examples I have seen, the second param has a string being passed in vs. the provider itself. </p>

<p>The getInstance method seems to support having a provider passed in, but perhaps just doing</p>

<pre><code> new BouncyCastleProvier()
</code></pre>

<p>does not construct it properly, resulting in missing algorithms.  I suspect by passing the ""BC"" string instead, it will use the already constructed provider in JCA/JCE. </p>

<p>Ref: <a href=""http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#ProviderImplReq"" rel=""nofollow"">http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#ProviderImplReq</a></p>
","711","<java><security><bouncycastle><jce>","0","1","3","2017-03-17 20:35:46","18111034","1","","","","","2013-08-05 20:29:18",""
"18067129","SHA2RSA encryption with BouncyCastle","<p>I have been trying to encrypt some data using BouncyCastle's JCE provider. I'm trying ""SHA256withRSA"" and I'm getting a ""noSuchAlgorithmException"". Am I doing something wrong? Can someone help? Thanks</p>

<p>Specifically I'm trying </p>

<pre><code>Signature.getInstance(""SHA256withRSA"", new BouncyCastleProvider());
</code></pre>

<p>As mentioned here - <a href=""http://www.bouncycastle.org/wiki/display/JA1/X.509+Public+Key+Certificate+and+Certification+Request+Generation"" rel=""nofollow"">http://www.bouncycastle.org/wiki/display/JA1/X.509+Public+Key+Certificate+and+Certification+Request+Generation</a></p>
","<p>First add provider</p>

<pre><code>java.security.Security.addProvider(new BouncyCastleProvider());
</code></pre>

<p>And then</p>

<pre><code>Signature.getInstance(""SHA256withRSA"", ""BC"");
</code></pre>
","711","<java><security><bouncycastle><jce>","0","0","3","2017-03-17 20:35:46","18111034","1","","","","","2013-08-05 20:29:18",""
"26495841","Why SHA1 is slower than AES? JCE","<p>I'm currently building applications, which uses crypto primitives. For encryption and hashing I use javax.crypto and java.security packages. I did some benchmarking and it turned out, that ECB-AES-128 is faster than SHA1.
Code that I used for AES testing:</p>

<pre><code>    byte[] key = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
    byte[] data = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    SecretKeySpec encryptionKey = new SecretKeySpec(key, ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/ECB/NoPadding"");
    cipher.init(Cipher.ENCRYPT_MODE, encryptionKey);

    long start = System.currentTimeMillis();
    for (int i=0; i&lt;10000000; i++)
    {
        cipher.doFinal(data);
    }
    long end = System.currentTimeMillis();      

    System.out.println(""took: ""+ (end-start));
</code></pre>

<p>For hashing </p>

<pre><code>    MessageDigest md = MessageDigest.getInstance(""SHA-1"");
    byte[] data = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};


    long start = System.currentTimeMillis();
    for (int i=0; i&lt;10000000; i++)
    {
        md.digest(data);
    }
    long end = System.currentTimeMillis();

    System.out.println(""took:"" + (end-start));
</code></pre>

<p>Encryption time takes : ~4sec.
Hashing time takes: ~10sec.
Config: Core i5 3570-3.4Ghz, 8Gb RAM (not sure , whether it matters) </p>

<p>Why encryption takes less time than hashing? Hash functions should be way faster. Am I doing something wrong? 
Thank you</p>
","<p>Please find the results for <code>openssl speed sha1 aes-128-cbc</code> below:</p>

<pre><code>The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
sha1             27821.86k    81142.78k   181461.85k   272193.19k   312980.82k
aes-128 cbc      55984.60k    63748.01k    64728.23k   104889.11k   107399.85k
</code></pre>

<p>As you can see AES is faster for smaller amounts, and slower for large amounts. Why does this happen? Well, simple. AES uses a block size of 128 bits while SHA-1 uses a block size of 512 bits. So for small amounts of data, SHA-1 has to do much more work. Note that for 64 bytes, SHA-1 has to use 2 full blocks, so it is still rather at a disadvantage. Because of the bigger state size, I expect it will also optimize less easily.</p>

<p>AES is usually also heavily optimized. I'm not sure that SHA-1 in Java has seen the same amount of interest. Nowadays, you would rather look at SHA-2.</p>
","699","<java><performance><encryption><jce><message-digest>","-1","0","1","2014-10-21 21:05:58","26496313","8","2","","","","2014-10-21 20:35:53",""
"14749409","Joomla 1.5. Missing editor toolbar","<p>I don't know what happened, but Editor's toolbar hidden. How to enable/show It again? </p>

<p>Here is photo:</p>

<p><img src=""https://i.stack.imgur.com/pIApQ.png"" alt=""enter image description here""></p>

<p>I donwloaded JCE plugin, installed It, enabled, but I still don't see editor's toolbar.
Thank you for answers.</p>
","<p>To enable it go to plugins check whether JCE plugin is enable or not if it is not please enable it and check.</p>

<p>If still Editor did not display then go to global configuration-> select JCE in default </p>
","697","<plugins><joomla><editor><hide><jce>","1","0","2","2013-04-19 11:42:35","14754501","0","","664177","","2013-04-19 11:42:35","2013-02-07 10:56:23",""
"14749409","Joomla 1.5. Missing editor toolbar","<p>I don't know what happened, but Editor's toolbar hidden. How to enable/show It again? </p>

<p>Here is photo:</p>

<p><img src=""https://i.stack.imgur.com/pIApQ.png"" alt=""enter image description here""></p>

<p>I donwloaded JCE plugin, installed It, enabled, but I still don't see editor's toolbar.
Thank you for answers.</p>
","<p>If JCE is enabled and selected as the default editor then go to Site > User Manager and edit the user you are logging in as.  Select JCE as the editor for that user.
It is actually recommended for security reasons to use ""No editor"" for the default option in Global Setup and override it on the user level to JCE.</p>
","697","<plugins><joomla><editor><hide><jce>","1","1","2","2013-04-19 11:42:35","14754501","0","","664177","","2013-04-19 11:42:35","2013-02-07 10:56:23",""
"38928702","Difference between RSA Sign with Java and openssl rsautl -sign","<p>I'm trying to write matching code in Java, for this openssl operation:
    <code>openssl rsautl -sign</code></p>

<p>So far, I tried this: 
</p>

<pre><code>Signature sig = Signature.getInstance(""SHA256withRSA"");
sig.initSign(privateKey, SecureRandom.getInstanceStrong());


ByteArrayInputStream bais = new ByteArrayInputStream(inputData);
byte[] sBuffer = new byte[1024];
int sBufferLen;
while ((sBufferLen = bais.read(sBuffer)) &gt;= 0) {
        sig.update(sBuffer, 0, sBufferLen);
}
bais.close();

byte[] signature = sig.sign();
</code></pre>

<p>Looks like the Java code calculates the SHA-256 hash for the inputData, then signs the hash and returns the signature only.</p>

<p>openssl, on the other hand seems to return the inputData along with the signature.  </p>

<p>I am inferring this using the <code>openssl rsautl -verify</code> operation. Running this operation on the Java signed data returns the ASN1 encoded data with a sha256 object in it. Running this operation on the openssl signed data returns the actual input data.  </p>

<p>Is there any way to mimic what openssl is doing - including the original data with the signature (detached signature?) using Java APIs?</p>
","<p>According to <a href=""https://stackoverflow.com/a/38768455/6615288"">the answer here</a>, while signing:<br>
Java does:<br>
[hash data -> ASN.1 encode -> Pad -> modexp]<br>
openssl only does:<br>
[Pad -> modexp]  </p>

<p>So I had to skip the first two steps in Java, so that it matches <code>openssl rsautl -sign</code><br>
To do that I looked at the code in the RSASignature class.  </p>

<pre><code>byte[] toBePadded = inputData.getBytes();
RSAPadding padding = RSAPadding.getInstance(1, 512, SecureRandom.getInstanceStrong());
byte[] toBeSigned = padding.pad(toBePadded);
byte[] opensslSignature = RSACore.rsa(toBeSigned, (RSAPrivateKey) privateKey, true);
</code></pre>

<p>Edit: Easier to just use ""NONEwithRSA"" signature type:
<code>Signature sig = Signature.getInstance(""NONEwithRSA"");</code></p>
","690","<java><encryption><openssl><rsa><jce>","0","0","1","2017-08-08 18:47:47","38961366","2","2","","","","2016-08-13 02:45:31",""
"20868745","Android string encryption stops before cipher.init() method","<p>I am creating an Android application that encrypts a string using a user-chosen password. The system will display the encrypted string in the edit text.</p>

<p>This is the method that I try to encrypt with. Can anyone tell me where is the error  that do not allow the system to show the result?</p>

<p>The system stops before the line <code>cipher.init()</code>.</p>

<p><strong>Log cat</strong></p>

<pre><code>01-01 12:37:37.756: D/libEGL(2810): loaded /system/lib/egl/libEGL_genymotion.so
01-01 12:37:37.756: D/(2810): HostConnection::get() New Host Connection established 0xb8d1bce8, tid 2810
01-01 12:37:37.872: D/libEGL(2810): loaded /system/lib/egl/libGLESv1_CM_genymotion.so
01-01 12:37:37.872: D/libEGL(2810): loaded /system/lib/egl/libGLESv2_genymotion.so
01-01 12:37:38.112: W/EGL_genymotion(2810): eglSurfaceAttrib not implemented
01-01 12:37:38.112: E/OpenGLRenderer(2810): Getting MAX_TEXTURE_SIZE from GradienCache
01-01 12:37:38.180: E/OpenGLRenderer(2810): Getting MAX_TEXTURE_SIZE from Caches::initConstraints()
01-01 12:37:38.196: D/OpenGLRenderer(2810): Enabling debug mode 0
01-01 12:37:47.508: W/EGL_genymotion(2810): eglSurfaceAttrib not implemented
01-01 12:37:52.344: W/EGL_genymotion(2810): eglSurfaceAttrib not implemented
01-01 12:37:52.452: D/dalvikvm(2810): GC_FOR_ALLOC freed 125K, 1% free 16924K/17072K, paused 14ms, total 16ms
01-01 12:37:56.420: E/PBEkEYsPEC(2810): javax.crypto.spec.PBEKeySpec@52de0e0c
01-01 12:37:56.492: E/PBEkEYsPEC(2810): com.android.org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey@52e0076c
01-01 12:37:56.492: E/PBEkEYsPEC(2810): javax.crypto.spec.PBEParameterSpec@52e00df8
</code></pre>

<p><strong>Code</strong></p>

<pre><code>public String Padding_key() {

  try {

    PBEKeySpec pbeKeySpec = new PBEKeySpec(STReditTxtPass.toCharArray());
    Log.e(""PBEkEYsPEC"", pbeKeySpec.toString());
    Toast.makeText(this, ""step 1"", Toast.LENGTH_SHORT).show();
    Cipher cipher = Cipher.getInstance(""AES"");
    Toast.makeText(this, ""after ciphering"", Toast.LENGTH_SHORT).show();
    SecretKeyFactory keyFactory = SecretKeyFactory
    .getInstance(""PBEWithMD5AndDES"");
    Toast.makeText(this, ""after keyFactory"", Toast.LENGTH_SHORT).show();

    SecretKey pbeKey = keyFactory.generateSecret(pbeKeySpec);
    Log.e(""PBEkEYsPEC"", pbeKey.toString());
    Toast.makeText(this, ""after SecreteKey"", Toast.LENGTH_SHORT).show();

    PBEParameterSpec pbeSpec = new PBEParameterSpec(salt, iterations);
    Log.e(""PBEkEYsPEC"", pbeSpec.toString());
    Toast.makeText(this, ""after PBEParameterSpec"", Toast.LENGTH_SHORT).show();
    cipher.init(Cipher.ENCRYPT_MODE, pbeKey, pbeSpec);

    Toast.makeText(this, ""after cypher.init"", Toast.LENGTH_SHORT).show();

    byte[] cipherText = cipher.doFinal(PlainText.getBytes(""UTF-8""));
    Toast.makeText(this, ""after byte[]"", Toast.LENGTH_SHORT).show();

    cyphertext = String.format(""%s%s%s"", toBase64(salt), ""]"",
    toBase64(cipherText));
    Toast.makeText(this, ""after cypherText.format"", Toast.LENGTH_SHORT).show();

    edit_txt_enc_string.setText(cyphertext);

    strPaddingencryption = edit_txt_enc_string.getText().toString();

  } catch (Exception e) {

  }
  return strPaddingencryption;
}
</code></pre>
","<p>It seems like you want to perform password-based encryption. If that is the case, your error is likely caused by using <code>""AES""</code> as the algorithm in your <code>Cipher</code> object. Try this instead:</p>

<pre><code>Cipher cipher = Cipher.getInstance(""PBEWithMD5AndDES"");
</code></pre>

<p>Please also note that <code>PBEWithMD5AndDES</code> is very weak by modern standards. If you have any control over the algorithm used, please switch to something stronger. For instance, you could use <code>PBKDF2WithHmacSHA1</code> to produce a key that you then use with AES to encrypt the plaintext.</p>

<p>See <a href=""https://code.google.com/p/jncryptor/source/browse/trunk/jncryptor/src/main/java/org/cryptonode/jncryptor/AES256v2Cryptor.java"" rel=""nofollow"">the code</a> for my project, JNCryptor, for an example of how this is done in Java.</p>
","689","<java><android><encryption><jce>","0","0","1","2014-01-03 09:11:40","","3","3","709671","","2014-01-03 08:39:38","2014-01-01 12:42:34",""
"22340769","Can use a self-sign certificate to sign JCE provider(for testing purpose)","<p>I wrote a new provider and also a application to test it. </p>

<p>JCE only accepted a signed provider according this <a href=""http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/HowToImplAProvider.html#Step62"" rel=""nofollow"">article</a>.</p>

<p>I didn't have a certificate from an entity trusted by JCA, so i wonder can i use a self-sign certificate to sign this new provider.</p>

<p>I followed this <a href=""http://www.windowsazure.com/en-us/documentation/articles/java-add-certificate-ca-store/?fb=zh-cn"" rel=""nofollow"">article</a> to add my certificate to JDK's cacerts. Then used this 
certificate to sign the provider jar file.</p>

<p>But i still got this Exception：</p>

<pre><code>Exception in thread ""main"" java.security.NoSuchProviderException: JCE cannot authenticate the provider Tang
  at javax.crypto.SunJCE_b.a(DashoA13*..)
  at javax.crypto.Mac.getInstance(DashoA13*..)
  at SSLServer.&lt;init&gt;(SSLServer.java:48)
  at SSLServer.main(SSLServer.java:156)
Caused by: java.util.jar.JarException: Cannot parse file:/D:/Develop/tang.jar
  at javax.crypto.SunJCE_c.a(DashoA13*..)
  at javax.crypto.SunJCE_b.b(DashoA13*..)
  at javax.crypto.SunJCE_b.a(DashoA13*..)
  ... 4 more
</code></pre>

<p>My question is only a certificate from an entity trusted by JCA can sign JCE provider jar file, anyother java code-signing certificate, like comodo or self-siged, can't？</p>
","","685","<java><jce>","2","","0","2014-03-12 02:24:52","","2","","","","","2014-03-12 02:24:52",""
"42211748","how to install JCE for JRE 8 on MacOS Sierra?","<p>I want to install <a href=""https://github.com/cryptomator/cli"" rel=""nofollow noreferrer"">https://github.com/cryptomator/cli</a> which requires:
JRE 8: <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html"" rel=""nofollow noreferrer"">http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html</a>
JCE: <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""nofollow noreferrer"">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>

<p>On my Mac, Preferences > Java, Java tab, I see Platform 1.8, Product 1.8.0_121, and a path of 1.8   1.8.0_121   <a href=""http://java.sun.com/products/autodl/j2se"" rel=""nofollow noreferrer"">http://java.sun.com/products/autodl/j2se</a>    /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/bin/java</p>

<p>So I think I have JRE 8 already. How do I tell if I have JCE, and how do I install it properly if it is not there?</p>
","<p>Here are the installation instructions:</p>

<p>1)  Download the unlimited strength JCE policy files.</p>

<p>2)  Uncompress and extract the downloaded file.</p>

<pre><code>This will create a subdirectory called jce.
This directory contains the following files:

    README.txt                   This file
    local_policy.jar             Unlimited strength local policy file
    US_export_policy.jar         Unlimited strength US export policy file
</code></pre>

<p>3)  Install the unlimited strength policy JAR files.</p>

<pre><code>In case you later decide to revert to the original ""strong"" but
limited policy versions, first make a copy of the original JCE
policy files (US_export_policy.jar and local_policy.jar). Then
replace the strong policy files with the unlimited strength
versions extracted in the previous step.

The standard place for JCE jurisdiction policy JAR files is:

    &lt;java-home&gt;/lib/security           [Unix]
    &lt;java-home&gt;\lib\security           [Windows]
</code></pre>

<p>It was apparently explained in the README.txt where you can get it after you downloaded the zip file(jce_policy-8.zip).</p>
","679","<java><macos><jce>","1","-2","1","2017-02-13 19:26:51","","1","","","","","2017-02-13 19:13:06",""
"14825071","Slideshowpro adding to joomla using JCE editor","<p>I am using Joomla for my websites and I have added slideshowpro to multiple websites with success. however for some reason when I add the product to this website www.boydnodder.co.nz it comes up with this in the webpage</p>

<p><a href=""http://boydnodder.co.nz/index.php/gallery-new"" rel=""nofollow"">http://boydnodder.co.nz/index.php/gallery-new</a></p>

<p>Im using JCE and under Editor Parameters > Advanced I have Allow Javascript, Allow CSS, Allow PHP, XHTML Inline Scripts all turned on.</p>

<p>Under the tab Plugin Parameters then Media Support I have Strict XHTML Flash, Allow HTML5 Audio, Allow HTML5 Video, Allow OBJECT Elements, Allow EMBED Elements, all turned off with Allow Iframes turned Off.</p>

<p>When I add the following code;</p>

<pre><code>&lt;!-- START EMBED CODE --&gt;

&lt;script type=""text/javascript"" src=""http://www.colmandesigns.co.nz/colmangallery/m/embed.js""&gt;&lt;/script&gt;

&lt;div id=""album-6""&gt;

&lt;/div&gt;

&lt;script type=""text/javascript""&gt;
SlideShowPro({
attributes: {
id: ""album-6"",
width: 550,
height: 400
},
mobile: {
auto: false
},
params: {
bgcolor: ""#000000"",
allowfullscreen: true
},
flashvars: {
xmlFilePath: ""http://www.colmandesigns.co.nz/colmangallery/images.php?album=6"",
paramXMLPath: ""http://www.colmandesigns.co.nz/colmangallery/m/params/chrome.xml"",
contentScale: ""Crop to Fit All""
}
});
&lt;/script&gt;

&lt;!-- END EMBED CODE --&gt;
</code></pre>

<p>It ends up coming out like this once I click save</p>

<pre><code>&lt;!-- START EMBED CODE --&gt;
&lt;p&gt;
&lt;s-cript type=""text/j-avascript"" src=""http://www.colmandesigns.co.nz/colmangallery/m/embed.js""&gt;&lt;/s-cript&gt;
&lt;/p&gt;
&lt;div id=""album-6""&gt;&amp;nbsp;&lt;/div&gt;
&lt;p&gt;
&lt;s-cript type=""text/j-avascript""&gt; SlideShowPro({ attributes: { id: ""album-6"", width: 550, height: 400 }, mobile: { auto: false }, params: { bgcolor: ""#000000"", allowfullscreen: true }, flashvars: { xmlFilePath: ""http://www.colmandesigns.co.nz/colmangallery/images.php?album=6"", paramXMLPath: ""http://www.colmandesigns.co.nz/colmangallery/m/params/chrome.xml"", contentScale: ""Crop to Fit All"" } }); 
&lt;!-- END EMBED CODE --&gt;
&lt;/s-cript&gt;
&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</code></pre>

<p>Any ideas would be awesome!</p>

<p>Thanks,
Callum</p>
","<p>Yes, WYSIWYG editors will mess your embedded scripts and styles. What I do on my sites is configure JCE to not appear by default.</p>

<p>Go to ""Components > JCE Editor > Profiles > Default > Features and Layout > Editor State"" and set it to ""Off"".</p>

<p>This will give you a generic text area for editing your articles (by default) and a link to turn on WYSIWYG editing.  This way it will not mess up your JavaScript / CSS.</p>

<p>You can also try ""Flexi Custom Code"" module, which works similarly to ""Custom HTML"" module but is intended to be used for JS / CSS instead.</p>

<p>Good luck.</p>
","663","<joomla><slideshow><jce>","0","0","2","2013-02-12 23:04:25","14835816","0","","","","","2013-02-12 03:48:24",""
"14825071","Slideshowpro adding to joomla using JCE editor","<p>I am using Joomla for my websites and I have added slideshowpro to multiple websites with success. however for some reason when I add the product to this website www.boydnodder.co.nz it comes up with this in the webpage</p>

<p><a href=""http://boydnodder.co.nz/index.php/gallery-new"" rel=""nofollow"">http://boydnodder.co.nz/index.php/gallery-new</a></p>

<p>Im using JCE and under Editor Parameters > Advanced I have Allow Javascript, Allow CSS, Allow PHP, XHTML Inline Scripts all turned on.</p>

<p>Under the tab Plugin Parameters then Media Support I have Strict XHTML Flash, Allow HTML5 Audio, Allow HTML5 Video, Allow OBJECT Elements, Allow EMBED Elements, all turned off with Allow Iframes turned Off.</p>

<p>When I add the following code;</p>

<pre><code>&lt;!-- START EMBED CODE --&gt;

&lt;script type=""text/javascript"" src=""http://www.colmandesigns.co.nz/colmangallery/m/embed.js""&gt;&lt;/script&gt;

&lt;div id=""album-6""&gt;

&lt;/div&gt;

&lt;script type=""text/javascript""&gt;
SlideShowPro({
attributes: {
id: ""album-6"",
width: 550,
height: 400
},
mobile: {
auto: false
},
params: {
bgcolor: ""#000000"",
allowfullscreen: true
},
flashvars: {
xmlFilePath: ""http://www.colmandesigns.co.nz/colmangallery/images.php?album=6"",
paramXMLPath: ""http://www.colmandesigns.co.nz/colmangallery/m/params/chrome.xml"",
contentScale: ""Crop to Fit All""
}
});
&lt;/script&gt;

&lt;!-- END EMBED CODE --&gt;
</code></pre>

<p>It ends up coming out like this once I click save</p>

<pre><code>&lt;!-- START EMBED CODE --&gt;
&lt;p&gt;
&lt;s-cript type=""text/j-avascript"" src=""http://www.colmandesigns.co.nz/colmangallery/m/embed.js""&gt;&lt;/s-cript&gt;
&lt;/p&gt;
&lt;div id=""album-6""&gt;&amp;nbsp;&lt;/div&gt;
&lt;p&gt;
&lt;s-cript type=""text/j-avascript""&gt; SlideShowPro({ attributes: { id: ""album-6"", width: 550, height: 400 }, mobile: { auto: false }, params: { bgcolor: ""#000000"", allowfullscreen: true }, flashvars: { xmlFilePath: ""http://www.colmandesigns.co.nz/colmangallery/images.php?album=6"", paramXMLPath: ""http://www.colmandesigns.co.nz/colmangallery/m/params/chrome.xml"", contentScale: ""Crop to Fit All"" } }); 
&lt;!-- END EMBED CODE --&gt;
&lt;/s-cript&gt;
&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</code></pre>

<p>Any ideas would be awesome!</p>

<p>Thanks,
Callum</p>
","<p>Disabling text filters for super users might help:</p>

<p>Go do <strong>administrator / global config / text filters</strong> and choose <strong>no filters</strong> next to <strong>Super Users</strong></p>
","663","<joomla><slideshow><jce>","0","0","2","2013-02-12 23:04:25","14835816","0","","","","","2013-02-12 03:48:24",""
"27897824","Don't want to use unlimited strength policy files","<p>I want to make a Java application that makes signatures but have run into the problem with the unlimited strength policy files, 
 discussed in many posts, e.g. <a href=""https://stackoverflow.com/questions/1179672/how-to-avoid-installing-unlimited-strength-jce-policy-files-when-deploying-an?lq=1"">How to avoid installing &quot;Unlimited Strength&quot; JCE policy files when deploying an application?</a></p>

<p>Everything works fine of course when I switch the policy files but I would rather avoid this and since I don't plan to use symmetric encryption my guess was that it would be possible. My problem is that that I get the Illegal key size exception already in the load method of KeyStore.</p>

<p>My questions:</p>

<p>1) Can I do anything about the internal encryption in the keystore so the key size limitation doesn't require users to change policy files?</p>

<p>2) I have understood that the BouncyCastle Lightweight API could be an option. If so, how do I load a keystore with that API?</p>

<pre><code>Security.addProvider(new BouncyCastleProvider());           

//Get private key
KeyStore keyStore = KeyStore.getInstance(""PKCS12"",""BC"");
String pwd = ""password"";
FileInputStream finJKS = new FileInputStream(""C:\\TEMP\\host.p12"");
keyStore.load(finJKS,pwd.toCharArray());
</code></pre>

<p>run:
     java.io.IOException: exception decrypting data - java.security.InvalidKeyException: Illegal key size</p>

<p>Running jre in JDK 7u51 on Netbeans 7.4 on Windows.</p>

<p>Best regards</p>
","<p>Your code snippet throws an InvalidKeyException despite using BouncyCastle, because you are not using the <strong>BC Lightweight API</strong>. If you access BC through the <strong>JCE API</strong> then the same limits on crypto strength apply as with Sun/Oracle providers. </p>

<p>PKCS#12 files are usually encrypted with 3DES (<code>pbeWithSHA1And3-KeyTripleDES-CBC</code>), which is not restricted by the default policy file. However, PKCS#12 allows the use of arbitrary encryption algorithms, so it seems like you got a p12 file that is encrypted with another algorithm. You can check this with openssl:</p>

<pre><code>openssl pkcs12 -in host.p12 -info -noout
</code></pre>

<p>The encryption algorithm should change when you convert the keystore to JKS or JCEKS (more secure) with keytool:</p>

<pre><code>keytool -importkeystore -srckeystore host.p12 -srcstoretype PKCS12 -deststoretype JCEKS -destkeystore host.jks
</code></pre>

<p>Of course you will have to adapt your code then:</p>

<pre><code>KeyStore keyStore = KeyStore.getInstance(""JCEKS"");
</code></pre>

<p>You could even convert the JCEKS keystore back to PKCS12 with keytool. Keytool generates PKCS12 files with <code>pbeWithSHA1And3-KeyTripleDES-CBC</code>.</p>
","643","<java><windows><keystore><jce>","1","2","1","2015-01-12 13:06:57","27902706","0","1","-1","","2017-05-23 12:06:07","2015-01-12 08:24:49",""
"12313559","DESFire Authentication using Java","<p>Trying to authenticate DESFire EV1 card using Java/Android and want to confirm the correct use of JCE classes to implement DES Decipher operation in <strong>CBC Send Mode</strong>.</p>

<p>Is the following use of JCE correct for this operation?</p>

<pre><code>DESKeySpec desKeySpec = new DESKeySpec(masterKeyBytes);  
SecretKeyFactory desKeyFact = SecretKeyFactory.getInstance(""DES"");
SecretKey s = desKeyFact.generateSecret(desKeySpec);
dfCardCipher = Cipher.getInstance(""DES/CBC/NoPadding"");
dfCardCipher.init(Cipher.DECRYPT_MODE, s, new IvParameterSpec(ivBytes));

byte[] decipheredCodeRandomB = dfCardCipher.doFinal(encipheredCodeRandomB);
</code></pre>
","","643","<java><jce><mifare>","1","","0","2012-09-16 22:22:31","","0","3","1202968","","2012-09-16 22:22:31","2012-09-07 07:21:44",""
"27348643","Finding the length of the public key","<p>I'm trying to find the length of a DSA public key but it can't find the method <code>.length</code>, I've made sure I have the right  imports but it doesn't seem to work.  The snippet is  below, is there a special function to find this?</p>

<pre><code> //my imports 
  import java.util.*;       
  import java.io.*;                         
  import javax.crypto.*;                        
  import javax.crypto.spec.*;
  import java.security.*;

public boolean SelObj(int k, PublicKey c) throws java.rmi.RemoteException{
    for(int j =1; j&lt;c.bitLength(); ++j) {
        //some code
    }
}
</code></pre>
","<p>The bit length of the byte array encoding:</p>

<pre><code>c.getEncoded().length * Byte.SIZE
</code></pre>

<p>The bit length of the integer value:</p>

<pre><code>import java.security.interfaces.DSAPublicKey

((DSAPublicKey) c).getY().bitLength()
</code></pre>
","638","<java><jce><jca>","0","2","1","2014-12-07 22:45:15","","0","","207421","","2014-12-07 22:34:47","2014-12-07 22:29:13",""
"42390150","AES-256 encryption in Java without changing policy files","<p>I am trying to encrypt some data with AES in java.<br>
Till now I have successfully encrypted the data with a 128 bit key.<br><br>
For 256 bit encryption I need to change my policy files which is not an option for me.<br>
I referred <a href=""https://stackoverflow.com/a/22492582/5051731"">this</a> SO Q/A too.<br>
Tried <a href=""http://www.bouncycastle.org"" rel=""nofollow noreferrer"">BouncyCastle</a> but it seems they don't have any provision for 256 bit keys(
1st question 
<a href=""http://www.bouncycastle.org/wiki/display/JA1/Frequently+Asked+Questions"" rel=""nofollow noreferrer"">here
</a> ).<br>
Had a look at <a href=""https://github.com/RNCryptor/JNCryptor/tree/master/src/main/java/org/cryptonode/jncryptor"" rel=""nofollow noreferrer"">JNCryptor</a>. But don't know if its a good source or not.(BouncyCastle is approved by <i>FIPS</i>)<br><br>
Also <i>Reflection</i> is not an option since it violates JAVA licence agreement.
<br>
So if someone could guide me to the relevant question or share a possible solution I'll be glad.</p>
","<p>There is nothing wrong or insecure about a 128-bit AES key, it is not brute forcible. A 256-bit is not going to provide anymore security, a successful attack will be in another area.</p>

<p>The thing to make sure of is the quality of the key, use a cryptographically secure random number generator (CSPRNG) or derive the key from a really good password with PBKDF2.</p>

<p>Properly authenticate the encryption: encrypt and then MAC.</p>

<p>Use a random IV in CBC mode and do not report padding errors.</p>
","616","<java><encryption><aes><jce><policyfiles>","2","0","1","2017-02-22 12:49:08","","6","0","-1","","2017-05-23 12:00:10","2017-02-22 11:32:33",""
"19778637","Cassandra throws SSLFactory.java warning","<p>We are using dse 3.1.4 with server_encryption_options to all.</p>

<p>server_encryption_options:</p>

<pre><code>internode_encryption: all
keystore: /path/to/.keystore
keystore_password: XXXXXXX
truststore: /path/to/.truststore
truststore_password: XXXXXXX
</code></pre>

<p>We add the java security libraries to the /lib/security but still we see the continues log of </p>

<pre><code>WARN [WRITE-/x.x.x.x] 2013-11-04 22:30:28,398 SSLFactory.java (line 139) Filtering out TLS_RSA_WITH_AES_256_CBC_SHA as it isnt supported by the socket 
</code></pre>

<p>Can any one tell me why this is happening? </p>
","<p>The error message is not related to the the keystore, but rather to the SSL ciphers which your version of Java supports. </p>

<p>It seems the cipher TLS_RSA_WITH_AES_256_CBC_SHA is configured to be used somewhere, but the version of Java that you use does not provide this cipher. </p>

<p>When looking at current versions of Java 7, I see this cipher being reported as available, so you can try to run the same with a newer Java version and see if that prevents this warning.</p>
","612","<ssl><cassandra><jce><datastax-enterprise><datastax>","2","3","1","2015-07-31 12:40:40","","3","0","411846","","2015-07-31 12:40:40","2013-11-04 22:38:20",""
"12628315","Convert ECIES ECP CryptoPP to JAVA","<p>I have a 202 byte key and that is used to decrypt a binary file.</p>

<pre><code>StringSource keyStr( key, Z3_KEY_LENGTH, true );
AutoSeededRandomPool rng;
ECIES&lt;ECP&gt;::Decryptor ellipticalEnc( keyStr );
unsigned char *tmpBuffer( new unsigned char[ src.Size() ] );
DecodingResult dr = ellipticalEnc.Decrypt( rng, src.Data(), src.Size(), tmpBuffer );
</code></pre>

<p>I tried to use jsafejce for this:</p>

<pre><code>PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(key);
KeyFactory factory = KeyFactory.getInstance(""EC"", ""JsafeJCE"");
PrivateKey privateKey = factory.generatePrivate(privKeySpec);
Cipher eciesDecrypter = Cipher.getInstance(""ECIES/SHA1/HMACSHA1"", ""JsafeJCE"");
</code></pre>

<p>and</p>

<pre><code>Cipher eciesDecrypter = Cipher.getInstance(""ECIESwithXOR/SHA1/HMACSHA1"", ""JsafeJCE"");
</code></pre>

<p>But with the first I get a block error, must be divided by 16, and with the second I get a mac check error.</p>

<p>Does anyone have any suggestions?</p>
","<p>Have you tried adding some empty bytes to the end of your key so that it is 208 bytes long? That might fix your block size error.</p>
","610","<java><bouncycastle><jce><elliptic-curve><crypto++>","1","0","2","2014-01-18 16:58:59","","0","2","384985","","2012-09-27 20:07:45","2012-09-27 18:57:58",""
"12628315","Convert ECIES ECP CryptoPP to JAVA","<p>I have a 202 byte key and that is used to decrypt a binary file.</p>

<pre><code>StringSource keyStr( key, Z3_KEY_LENGTH, true );
AutoSeededRandomPool rng;
ECIES&lt;ECP&gt;::Decryptor ellipticalEnc( keyStr );
unsigned char *tmpBuffer( new unsigned char[ src.Size() ] );
DecodingResult dr = ellipticalEnc.Decrypt( rng, src.Data(), src.Size(), tmpBuffer );
</code></pre>

<p>I tried to use jsafejce for this:</p>

<pre><code>PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(key);
KeyFactory factory = KeyFactory.getInstance(""EC"", ""JsafeJCE"");
PrivateKey privateKey = factory.generatePrivate(privKeySpec);
Cipher eciesDecrypter = Cipher.getInstance(""ECIES/SHA1/HMACSHA1"", ""JsafeJCE"");
</code></pre>

<p>and</p>

<pre><code>Cipher eciesDecrypter = Cipher.getInstance(""ECIESwithXOR/SHA1/HMACSHA1"", ""JsafeJCE"");
</code></pre>

<p>But with the first I get a block error, must be divided by 16, and with the second I get a mac check error.</p>

<p>Does anyone have any suggestions?</p>
","<p>Well, I don't really know what you are trying to do in your code. I'll try and answer some of the questions.</p>

<hr>

<blockquote>
  <p>Convert ECIES ECP CryptoPP to JAVA</p>
</blockquote>

<p>To get the point out of Crypto++, its about as hard as:</p>

<pre><code>// Assuming your key was DER Encoded
byte key[Z3_KEY_LENGTH] = ...;

ECIES&lt;ECP&gt;::Decryptor decryptor;
decryptor.BERDecodePublicKey(ArraySource(key, sizeof(key)).Ref(), false, sizeof(key));

const ECPPoint&amp; point = decryptor.GetPublicElement();
const Integer&amp; x = point.x;
const Integer&amp; y = point.y;
</code></pre>

<p>If your key was not DER Encoded, refer to <a href=""http://www.cryptopp.com/wiki/Keys_and_Formats"" rel=""nofollow"">Keys and Formats</a> from the Crypto++ wiki. You also have the wiki page on <a href=""http://www.cryptopp.com/wiki/Elliptic_Curve_Integrated_Encryption_Scheme"" rel=""nofollow"">Elliptic Curve Integrated Encryption Scheme</a>.</p>

<p>Java 7 provides and <a href=""http://docs.oracle.com/javase/7/docs/api/java/security/spec/ECPoint.html"" rel=""nofollow"">ECPoint class</a>, and it takes an X and Y coordinate.</p>

<hr>

<pre><code>&gt; ECIES&lt;ECP&gt;::Decryptor ellipticalEnc( keyStr );
&gt; unsigned char *tmpBuffer( new unsigned char[ src.Size() ] );
&gt; DecodingResult dr = ellipticalEnc.Decrypt( rng, src.Data(), src.Size(), tmpBuffer );
</code></pre>

<p>This does not look quite right, but you have not showed enough code.</p>

<pre><code>size_t maxLength = decryptor.MaxPlaintextLength( src.Size() );
unsigned char *tmpBuffer = new unsigned char[ maxLength ];

DecodingResult dr = ellipticalEnc.Decrypt( rng, src.Data(), src.Size(), tmpBuffer );
if( !result.isValidCoding )
    throw runtime_error(""failed to decrypt cipher text"");

unsigned char *buffer = new unsigned char[ result.messageLength ];
std::cpy(tmpBuffer, buffer, result.messageLength);
</code></pre>
","610","<java><bouncycastle><jce><elliptic-curve><crypto++>","1","1","2","2014-01-18 16:58:59","","0","2","384985","","2012-09-27 20:07:45","2012-09-27 18:57:58",""
"27376358","I'm getting the following exception in Websphere Application Server when I attempt to create saml token(assertion)","<p>I'm getting the following exception in Websphere Application Server when I attempt to create SAML token (assertion) but its working on TomCat:</p>

<pre><code>SignatureMars E org.opensaml.xml.signature.impl.SignatureMarshaller createSignatureElement Unable to construct signature Element {http://www.w3.org/2000/09/xmldsig#}Signature
org.apache.xml.security.signature.XMLSignatureException: The requested algorithm http://www.w3.org/2000/09/xmldsig#dsa-sha1 does not exist. Original Message was: null
Original Exception was java.lang.NullPointerException
at org.apache.xml.security.algorithms.SignatureAlgorithm.&lt;init&gt;(Unknown Source)
at org.apache.xml.security.signature.SignedInfo.&lt;init&gt;(Unknown Source)
at org.apache.xml.security.signature.XMLSignature.&lt;init&gt;(Unknown Source)
at org.apache.xml.security.signature.XMLSignature.&lt;init&gt;(Unknown Source)
at org.opensaml.xml.signature.impl.SignatureMarshaller.createSignatureElement(SignatureMarshaller.java:108)
at org.opensaml.xml.signature.impl.SignatureMarshaller.marshall(SignatureMarshaller.java:69)
at org.opensaml.xml.io.AbstractXMLObjectMarshaller.marshallChildElements(AbstractXMLObjectMarshaller.java:316)
at org.opensaml.xml.io.AbstractXMLObjectMarshaller.marshallInto(AbstractXMLObjectMarshaller.java:224)
at org.opensaml.xml.io.AbstractXMLObjectMarshaller.marshall(AbstractXMLObjectMarshaller.java:130)
at org.opensaml.xml.io.AbstractXMLObjectMarshaller.marshall(AbstractXMLObjectMarshaller.java:86)
at com.opal.saml.SamlManager.signSamlAssertion(SamlManager.java:179)
at com.opal.saml.SamlManager.getResponse(SamlManager.java:152)
at com.opal.saml.SamlManager.generateToken(SamlManager.java:314)
at com.ibm._jsp._header._jspService(_header.java:116)
at com.ibm.ws.jsp.runtime.HttpJspBase.service(HttpJspBase.java:98)
at javax.servlet.http.HttpServlet.service(HttpServlet.java:831)
at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1443)
at com.ibm.ws.webcontainer.servlet.ServletWrapper.service(ServletWrapper.java:1384)
at com.ibm.ws.webcontainer.filter.WebAppFilterChain.doFilter(WebAppFilterChain.java:104)
at com.ibm.ws.webcontainer.filter.WebAppFilterChain._doFilter(WebAppFilterChain.java:77)
at com.ibm.ws.webcontainer.filter.WebAppFilterManager.doFilter(WebAppFilterManager.java:852)
at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:785)
at com.ibm.ws.webcontainer.servlet.ServletWrapper.handleRequest(ServletWrapper.java:443)
at com.ibm.ws.webcontainer.servlet.ServletWrapperImpl.handleRequest(ServletWrapperImpl.java:175)
at com.ibm.wsspi.webcontainer.servlet.GenericServletWrapper.handleRequest(GenericServletWrapper.java:121)
at com.ibm.ws.jsp.webcontainerext.AbstractJSPExtensionServletWrapper.handleRequest(AbstractJSPExtensionServletWrapper.java:234)
at com.ibm.ws.webcontainer.webapp.WebAppRequestDispatcher.include(WebAppRequestDispatcher.java:644)
at org.apache.jasper.runtime.JspRuntimeLibrary.include(JspRuntimeLibrary.java:1045)
at org.apache.jasper.runtime.PageContextImpl.include(PageContextImpl.java:531)
at sun.reflect.GeneratedMethodAccessor546.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:37)
at java.lang.reflect.Method.invoke(Method.java:599)
at org.apache.struts.tiles.TilesUtilImpl.doInclude(TilesUtilImpl.java:129)
at org.apache.struts.tiles.TilesUtil.doInclude(TilesUtil.java:152)
at org.apache.struts.tiles.taglib.InsertTag.doInclude(InsertTag.java:764)
at org.apache.struts.tiles.taglib.InsertTag$InsertHandler.doEndTag(InsertTag.java:896)
</code></pre>
","","603","<java><websphere><saml><jce><opensaml>","1","","0","2014-12-17 11:12:54","","3","1","318054","","2014-12-17 11:12:54","2014-12-09 10:12:56",""
"4872194","AES Illegal Key Size error occuring only in command line but not in IDE","<p>I require a higher key size for AES (192-bit) and installed JCE as per instructions on the site.</p>

<p>The strange thing is, while running my program in Netbeans, the encryption and decryption works perfectly.</p>

<p>But if I compile and run from command line, it would throw ""java.security.InvalidKeyException: Illegal key size""</p>

<p>Is there something else I need to add to the compile command? 
My compile command is just the regular one, which looks something like this
javac -d . -cp . DC\src\dc\Main.java DC\src\share\AES.java</p>
","<p>Are you sure that your IDE is using the same JRE as your command line?</p>
","600","<java><command-line><compilation><aes><jce>","1","0","2","2011-02-02 10:54:32","4873539","1","","","","","2011-02-02 08:27:19",""
"4872194","AES Illegal Key Size error occuring only in command line but not in IDE","<p>I require a higher key size for AES (192-bit) and installed JCE as per instructions on the site.</p>

<p>The strange thing is, while running my program in Netbeans, the encryption and decryption works perfectly.</p>

<p>But if I compile and run from command line, it would throw ""java.security.InvalidKeyException: Illegal key size""</p>

<p>Is there something else I need to add to the compile command? 
My compile command is just the regular one, which looks something like this
javac -d . -cp . DC\src\dc\Main.java DC\src\share\AES.java</p>
","<p>Most probably your IDE uses a JDK, the commandline uses the standard JRE. You must install JCE in both directories.</p>

<p>Maybe look up the active Java in the PATH and double check the JCE there.</p>
","600","<java><command-line><compilation><aes><jce>","1","2","2","2011-02-02 10:54:32","4873539","1","","","","","2011-02-02 08:27:19",""
"5985230","Joomla JCE front end problems","<p>We are using Joomla 1.5.21 and JCE 1.5.7 and have some trouble with the front end saving of articles. Saving the article in the front end has no effect on the article stored in the database and displayed for ordinary visitors but these changes are visible for the logged in user after reloading, deleteing the cache and cookies in the used browser. In other browser it is the same. Weird!
I noticed these behaviour only when the user is classified as on editor or publisher, if he is an author the editor doesn't store any of my changes!</p>

<p>Has anybody an idea, what is happing? I am grateful for any idea, clue or suggestion, thanks!</p>
","<p>Thanks Salem for your comment but finally we could solve the problem by ourself. The problem was caused by joomfish or more by my OS. I am using a german OS which sometimes switches from english to german on its own, so that we had two different (language) versions in the back- and frontend.</p>
","586","<joomla><jce>","0","0","1","2011-05-23 21:00:52","6102983","1","","751471","","2011-05-12 23:56:09","2011-05-12 22:28:30",""
"52220368","Unwrapping RSA encrypted AES key using Safenet HSM and Java leaks the unwrapped key","<p>I am using a Safenet HSM (Hardware Security Module) to store my cryptographic keys, and I am trying to unwrap a secret key (AES/DES) encrypted with RSA using Java APIs and SunPKCS11. I would like to do this securely, so that unwrapped AES/DES key cannot be extracted from the HSM (like the RSA private key value is invisible). However, after unwrapping the value of the unwrapped key is visible in the key object outside the HSM.</p>

<p>Here is my code:</p>

<pre><code>Key privateKey = keyStore.getKey(""MyKeyId"", keyStorePassword);

Cipher cipher = Cipher.getInstance(""RSA"", ""SunPKCS11-Safenet"");
cipher.init(Cipher.UNWRAP_MODE, privateKey);
Key unwrappedKey = cipher.unwrap(wrappedKey, ""AES"", Cipher.SECRET_KEY);
// At this point the unwrapped key is visible in the unwrappedKey object!
</code></pre>

<p>How I can tell the code not to reveal the unwrapped key? Do I have to add something in the PKCS11 config file? I've tried adding the options below into the config file, but it doesn't seem to help:</p>

<pre><code>attributes(*,CKO_SECRET_KEY,*) = {
  CKA_SENSITIVE=true
}
</code></pre>

<p>I am not sure if revealing keys during unwrapping is expected from the API. If so, how I can import such keys securely into the HSM so that they cannot be extracted from it?</p>

<p>I've tried asking the Safenet support team, but they could not answer why this is happening. So, after lots of trying and searching the Internet, I have asked this question here.</p>
","<p>If you unwrap the key... you get back the key.  ie, unwrapping a key exposes the key.  If you are asking the HSM to unwrap the key, it is doing what you told it to do.</p>

<p>Maybe you want to <em>import</em> the key instead, if the HSM supports this operation.  The assumption on key import is that the HSM understands the format in which the key has been wrapped for security/protection/transport.  </p>

<p>It will then do the unwrap for you, and save the unwrapped key in its database.  Maybe it then hands you back the key as a <em>handle</em>, or as a differently wrapped key (ie, wrapped using its internal master key).</p>

<p>Moving a key between comparable HSMs is export/import or backup/restore, depending on the device and the devices' understanding of those verbs.</p>

<p>Moving a key between different vendor's HSMs or different cryptosystems, <em>without exposing the secrets</em> is an interesting exercise. </p>
","584","<java><pkcs#11><jce><hsm>","4","0","1","2018-10-20 20:35:45","","12","1","9192148","","2018-09-12 14:47:23","2018-09-07 10:15:13",""
"40777770","BouncyCastle and SunJCE different result in Cipher::update and Cipher::doFInal","<p>I was trying to switch security provider from SunJCE to Bouncy Castle (BC) and stumbled upon this peculiar behaviour in the Cipher object. To my knowledge the encrypted text returned by SunJCE's <code>cipher.update(bytes)</code> includes the subsequent initialization vector (IV) as the last block. With BC, I need to call <code>cipher.doFinal()</code> and take the first block to get the IV. The algorithm I'm using is AES/CBC/PKCS5Padding</p>

<p>Why is this happening and what's the best way to handle this?</p>

<p>Here's my code</p>

<pre class=""lang-java prettyprint-override""><code>import org.bouncycastle.jce.provider.BouncyCastleProvider;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.Security;
import java.util.Arrays;
import java.util.Base64;

import static java.nio.charset.StandardCharsets.UTF_8;
import static javax.xml.bind.DatatypeConverter.printHexBinary;

public class CipherDebug {

    private final String algorithm;

    private final String provider;

    private final String cryptographicAlgorithm;

    public CipherDebug(String algorithm,
                       String cipherMode,
                       String paddingMode,
                       String provider) {
        this.algorithm = algorithm;
        this.provider = provider;
        this.cryptographicAlgorithm = algorithm + ""/"" + cipherMode + ""/"" + paddingMode;
    }

    private Cipher createCipher(int encryptDecryptMode,
                                byte[] keyValue,
                                byte[] initializationVector) throws Exception {
        SecretKeySpec keySpec = new SecretKeySpec(keyValue, algorithm);
        IvParameterSpec ivSpec = new IvParameterSpec(initializationVector);
        Cipher cipher = Cipher.getInstance(cryptographicAlgorithm, provider);
        cipher.init(encryptDecryptMode, keySpec, ivSpec);
        return cipher;
    }

    @Override
    public String toString() {
        return ""CipherDebug{"" +
                ""provider=\"""" + provider + '\""' +
                "", cryptographicAlgorithm=\"""" + cryptographicAlgorithm + '\""' +
                '}';
    }

    private static String generateData(int length) {
        char[] chars = new char[length];
        Arrays.fill(chars, '0');
        return new String(chars);
    }

    public static void main(String[] args) throws Exception {
        Security.insertProviderAt(new BouncyCastleProvider(), 1);

        int numberOfChunks = 3;
        byte[] keyValue = Base64.getDecoder()
                .decode(""yY7flqEdx95dojF/yY7flqEdx95dojF/"".getBytes(StandardCharsets.UTF_8));
        byte[] initializationVector = ""pjts4PzQIr9Pd2yb"".getBytes(StandardCharsets.UTF_8);

        CipherDebug bouncyCastle = new CipherDebug(""AES"", ""CBC"", ""PKCS5Padding"", ""BC"");

        CipherDebug sunJCE = new CipherDebug(""AES"", ""CBC"", ""PKCS5Padding"", ""SunJCE"");

        Cipher bouncyCastleCipher = bouncyCastle.createCipher(Cipher.ENCRYPT_MODE,
                keyValue, initializationVector);

        Cipher sunJCECipher = sunJCE.createCipher(Cipher.ENCRYPT_MODE,
                keyValue, initializationVector);

        assert bouncyCastleCipher.getBlockSize() == sunJCECipher.getBlockSize();

        // blockSize = 16
        int blockSize = bouncyCastleCipher.getBlockSize();

        byte[] data = generateData(blockSize * numberOfChunks).getBytes(UTF_8);
        byte[] bouncyCastleUpdate = bouncyCastleCipher.update(data);
        byte[] sunJCEUpdate = sunJCECipher.update(data);

        //303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030
        System.out.println(printHexBinary(data));

        // CipherDebug{provider=""BC"", cryptographicAlgorithm=""AES/CBC/PKCS5Padding""}
        // 1D4DE40480F0528D4F77E788817DA62902D98C9AE6DF9299F4F2D1836CC10924
        // 0320B10C8646D17E0755F8BBA1214ABF24D2E6E7F06184A78559793B23A9A341
        System.out.println(bouncyCastle.toString());
        System.out.println(printHexBinary(bouncyCastleUpdate));
        System.out.println(printHexBinary(bouncyCastleCipher.doFinal()));

        System.out.println();

        // CipherDebug{provider=""SunJCE"", cryptographicAlgorithm=""AES/CBC/PKCS5Padding""}
        // 1D4DE40480F0528D4F77E788817DA62902D98C9AE6DF9299F4F2D1836CC109240320B10C8646D17E0755F8BBA1214ABF
        // 24D2E6E7F06184A78559793B23A9A341
        System.out.println(sunJCE.toString());
        System.out.println(printHexBinary(sunJCEUpdate));
        System.out.println(printHexBinary(sunJCECipher.doFinal()));

        // assertion fails
        assert Arrays.equals(bouncyCastleUpdate, sunJCEUpdate);
    }
}
</code></pre>

<p>The output:</p>

<pre class=""lang-java prettyprint-override""><code>// data
03030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030

// Bouncy Castle
CipherDebug{provider=""BC"", cryptographicAlgorithm=""AES/CBC/PKCS5Padding""}
1D4DE40480F0528D4F77E788817DA62902D98C9AE6DF9299F4F2D1836CC10924
0320B10C8646D17E0755F8BBA1214ABF24D2E6E7F06184A78559793B23A9A341


// SunJCE
CipherDebug{provider=""SunJCE"", cryptographicAlgorithm=""AES/CBC/PKCS5Padding""}
1D4DE40480F0528D4F77E788817DA62902D98C9AE6DF9299F4F2D1836CC109240320B10C8646D17E0755F8BBA1214ABF
24D2E6E7F06184A78559793B23A9A341
</code></pre>
","<p>The extra data in the cipher text at the end is the padding, but you need to call Cipher.doFinal() in both cases - the cipher needs to know it has all the input data before it can add or remove padding.</p>

<p>Cipher.getIV() will return the IV. While the IV might be generated on encryption it is never part of the actual stream and is normally passed around as a parameter or generated.</p>

<p>In case it's the way that the output is getting chunked up that is causing confusion, there's no ""standard"" for this - in the case of BC it always holds onto a block until doFinal() arrives, for some ciphers the SunJCE provider doesn't, for HSMs the input may be buffered to first to make better use of the HSM, so a succession of updates may produce nothing, then suddenly a large chunk of processed data may appear. You need to rely on the return values from the updates and doFinals to tell handle the processed data correctly.</p>
","577","<java><security><encryption><bouncycastle><jce>","3","4","1","2016-11-24 08:48:26","40779949","0","3","","","","2016-11-24 03:51:53",""
"36063815","Eclipse is crashing after enabling java security (Java Cryptography Extension - JCE)","<p>Eclipse is crashing after enabling java security. I have added local_policy.jar and US_export_policy.jar into jre/lib/security folder.</p>

<p>I got files from below link :</p>

<p>Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 7 :<a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow"">http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html</a></p>

<pre><code>Debug options:
file:/Users/jkuria/soft/eclipse_downloads/eclipse 2/Eclipse.app/Contents/MacOS/.options not found
org.osgi.framework.BundleException: Error initializing container.
at org.eclipse.osgi.container.SystemModule.init(SystemModule.java:93)
at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle.init(EquinoxBundle.java:209)
at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle.init(EquinoxBundle.java:201)
at org.eclipse.osgi.launch.Equinox.init(Equinox.java:168)
at org.eclipse.core.runtime.adaptor.EclipseStarter.startup(EclipseStarter.java:296)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:231)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
Caused by: java.lang.ExceptionInInitializerError
at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle$EquinoxSystemModule.initWorker(EquinoxBundle.java:137)
at org.eclipse.osgi.container.SystemModule.init(SystemModule.java:83)
... 12 more
Caused by: java.security.ProviderException: setSeed() failed
at sun.security.provider.NativePRNG$RandomIO.implSetSeed(NativePRNG.java:458)
at sun.security.provider.NativePRNG$RandomIO.access$300(NativePRNG.java:329)
at sun.security.provider.NativePRNG.engineSetSeed(NativePRNG.java:212)
at java.security.SecureRandom.getDefaultPRNG(SecureRandom.java:209)
at java.security.SecureRandom.&lt;init&gt;(SecureRandom.java:190)
at org.eclipse.osgi.internal.framework.UniversalUniqueIdentifier.computeNodeAddress(UniversalUniqueIdentifier.java:127)
at org.eclipse.osgi.internal.framework.UniversalUniqueIdentifier.&lt;clinit&gt;(UniversalUniqueIdentifier.java:35)
... 14 more
Caused by: java.io.IOException: Operation not permitted
at java.io.FileOutputStream.writeBytes(Native Method)
at java.io.FileOutputStream.write(FileOutputStream.java:313)
at sun.security.provider.NativePRNG$RandomIO.implSetSeed(NativePRNG.java:456)
</code></pre>
","<p>You should add the following to the <strong>vmargs</strong> section of your <strong>eclipse.ini</strong></p>

<pre><code>-Djava.security.egd=/dev/random
</code></pre>
","572","<java><eclipse><jce><java-security>","3","2","2","2018-10-17 15:18:41","36064087","0","1","","","","2016-03-17 14:41:47",""
"36063815","Eclipse is crashing after enabling java security (Java Cryptography Extension - JCE)","<p>Eclipse is crashing after enabling java security. I have added local_policy.jar and US_export_policy.jar into jre/lib/security folder.</p>

<p>I got files from below link :</p>

<p>Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 7 :<a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow"">http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html</a></p>

<pre><code>Debug options:
file:/Users/jkuria/soft/eclipse_downloads/eclipse 2/Eclipse.app/Contents/MacOS/.options not found
org.osgi.framework.BundleException: Error initializing container.
at org.eclipse.osgi.container.SystemModule.init(SystemModule.java:93)
at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle.init(EquinoxBundle.java:209)
at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle.init(EquinoxBundle.java:201)
at org.eclipse.osgi.launch.Equinox.init(Equinox.java:168)
at org.eclipse.core.runtime.adaptor.EclipseStarter.startup(EclipseStarter.java:296)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:231)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:648)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:603)
at org.eclipse.equinox.launcher.Main.run(Main.java:1465)
Caused by: java.lang.ExceptionInInitializerError
at org.eclipse.osgi.internal.framework.EquinoxBundle$SystemBundle$EquinoxSystemModule.initWorker(EquinoxBundle.java:137)
at org.eclipse.osgi.container.SystemModule.init(SystemModule.java:83)
... 12 more
Caused by: java.security.ProviderException: setSeed() failed
at sun.security.provider.NativePRNG$RandomIO.implSetSeed(NativePRNG.java:458)
at sun.security.provider.NativePRNG$RandomIO.access$300(NativePRNG.java:329)
at sun.security.provider.NativePRNG.engineSetSeed(NativePRNG.java:212)
at java.security.SecureRandom.getDefaultPRNG(SecureRandom.java:209)
at java.security.SecureRandom.&lt;init&gt;(SecureRandom.java:190)
at org.eclipse.osgi.internal.framework.UniversalUniqueIdentifier.computeNodeAddress(UniversalUniqueIdentifier.java:127)
at org.eclipse.osgi.internal.framework.UniversalUniqueIdentifier.&lt;clinit&gt;(UniversalUniqueIdentifier.java:35)
... 14 more
Caused by: java.io.IOException: Operation not permitted
at java.io.FileOutputStream.writeBytes(Native Method)
at java.io.FileOutputStream.write(FileOutputStream.java:313)
at sun.security.provider.NativePRNG$RandomIO.implSetSeed(NativePRNG.java:456)
</code></pre>
","<p>Use of <code>/dev/random</code> will likely cause start up delays in your Java application as <code>/dev/random</code> blocks until significant entropy to be generated.</p>

<p>In general <code>/dev/urandom</code> will be a more performant and equally secure source of randomness.  Because of Java peculiarities, the vmarg will actually look like:</p>

<pre><code>-Djava.security.egd=file:/dev/./urandom
</code></pre>

<p>However, it is unclear to me why this property is required at all.  The accepted answer works but gives no indication as to why.  I'd be interested to know the cause of the exception.</p>
","572","<java><eclipse><jce><java-security>","3","1","2","2018-10-17 15:18:41","36064087","0","1","","","","2016-03-17 14:41:47",""
"33198329","How to debug Java cryptography extensions?","<p>I am implementing an encryption algorithm with a product. I would like to understand how bouncy castle handles the defaults like Initialization vector and so on. But I am not able to get any breakpoint working in intellij, I think it has got something to do with JCE provider.</p>
","","553","<bouncycastle><jce>","1","","0","2015-10-18 13:15:26","","2","","","","","2015-10-18 13:15:26",""
"36690361","NameError: missing class name (`org.bouncycastle.jce.provider.BouncyCastleProvider')","<p>Using JRuby 9.0.5.0 I'm trying to connect IBM Websphere MQ with SSL.
I've downloaded the bouncy cast provider jar file (bcprov-jdk15on-154.jar) and placed it on this location: /opt/mqm/java/jre64/jre/lib</p>

<p>In the code I've required that jar file and then imported the class:</p>

<pre><code>require ""java""
require ""/opt/mqm/java/lib/com.ibm.mqjms.jar""
require ""/opt/mqm/java/jre64/jre/lib/bcprov-jdk15on-154.jar""

java_import org.bouncycastle.jce.provider.BouncyCastleProvider
</code></pre>

<p>Running the script returns </p>

<pre><code>NameError: missing class name (`org.bouncycastle.jce.provider.BouncyCastleProvider')
</code></pre>

<p>Where should I place the file to import the class?</p>
","<p>To fix the issue I have installed the bouncy-castle-java gem</p>

<pre><code>gem 'bouncy-castle-java'
</code></pre>

<p>And then required it in the script</p>

<pre><code>require ""bouncy-castle-java""
</code></pre>

<p>The following statement works fine now</p>

<pre><code>java_import org.bouncycastle.jce.provider.BouncyCastleProvider
</code></pre>
","551","<jruby><bouncycastle><jce>","0","-1","1","2016-04-20 09:28:57","","1","","","","","2016-04-18 09:39:34",""
"46907675","Error during sbt execution: java.lang.ExceptionInInitializerError","<p>When I run <code>sbt</code> in my project I get the following error:</p>

<pre><code>$ sbt
  Getting org.scala-sbt sbt 0.13.13 ...
java.lang.ExceptionInInitializerError
at javax.crypto.JceSecurityManager.&lt;clinit&gt;(JceSecurityManager.java:65)
at javax.crypto.Cipher.getConfiguredPermission(Cipher.java:2587)
at javax.crypto.Cipher.getMaxAllowedKeyLength(Cipher.java:2611)
at sun.security.ssl.CipherSuite$BulkCipher.isUnlimited(CipherSuite.java:535)
at sun.security.ssl.CipherSuite$BulkCipher.&lt;init&gt;(CipherSuite.java:507)
at sun.security.ssl.CipherSuite.&lt;clinit&gt;(CipherSuite.java:614)
at sun.security.ssl.SSLContextImpl.getApplicableCipherSuiteList(SSLContextImpl.java:294)
at sun.security.ssl.SSLContextImpl.access$100(SSLContextImpl.java:42)
at sun.security.ssl.SSLContextImpl$AbstractTLSContext.&lt;clinit&gt;(SSLContextImpl.java:425)
at java.lang.Class.forName0(Native Method)
at java.lang.Class.forName(Class.java:264)
at java.security.Provider$Service.getImplClass(Provider.java:1634)
at java.security.Provider$Service.newInstance(Provider.java:1592)
at sun.security.jca.GetInstance.getInstance(GetInstance.java:236)
at sun.security.jca.GetInstance.getInstance(GetInstance.java:164)
at javax.net.ssl.SSLContext.getInstance(SSLContext.java:156)
at javax.net.ssl.SSLContext.getDefault(SSLContext.java:96)
at javax.net.ssl.SSLSocketFactory.getDefault(SSLSocketFactory.java:122)
at javax.net.ssl.HttpsURLConnection.getDefaultSSLSocketFactory(HttpsURLConnection.java:332)
at javax.net.ssl.HttpsURLConnection.&lt;init&gt;(HttpsURLConnection.java:289)
at sun.net.www.protocol.https.HttpsURLConnectionImpl.&lt;init&gt;(HttpsURLConnectionImpl.java:85)
at sun.net.www.protocol.https.Handler.openConnection(Handler.java:62)
at sun.net.www.protocol.https.Handler.openConnection(Handler.java:57)
at java.net.URL.openConnection(URL.java:979)
at org.apache.ivy.util.url.BasicURLHandler.getURLInfo$57a0216e(BasicURLHandler.java:66)
at org.apache.ivy.util.url.BasicURLHandler.getURLInfo(BasicURLHandler.java:54)
at org.apache.ivy.plugins.repository.url.URLResource.init(URLResource.java:65)
at org.apache.ivy.plugins.repository.url.URLResource.exists(URLResource.java:81)
at org.apache.ivy.plugins.resolver.RepositoryResolver.findResourceUsingPattern(RepositoryResolver.java:97)
at org.apache.ivy.plugins.resolver.AbstractPatternsBasedResolver.findResourceUsingPatterns(AbstractPatternsBasedResolver.java:96)
at org.apache.ivy.plugins.resolver.IBiblioResolver.findIvyFileRef(IBiblioResolver.java:102)
at org.apache.ivy.plugins.resolver.BasicResolver.getDependency(BasicResolver.java:228)
at org.apache.ivy.plugins.resolver.IBiblioResolver.getDependency(IBiblioResolver.java:512)
at org.apache.ivy.plugins.resolver.ChainResolver.getDependency(ChainResolver.java:104)
at org.apache.ivy.core.resolve.IvyNode.loadData(IvyNode.java:169)
at org.apache.ivy.core.resolve.VisitNode.loadData(VisitNode.java:292)
at org.apache.ivy.core.resolve.ResolveEngine.fetchDependencies(ResolveEngine.java:714)
at org.apache.ivy.core.resolve.ResolveEngine.doFetchDependencies(ResolveEngine.java:799)
at org.apache.ivy.core.resolve.ResolveEngine.fetchDependencies(ResolveEngine.java:722)
at org.apache.ivy.core.resolve.ResolveEngine.getDependencies(ResolveEngine.java:594)
at org.apache.ivy.core.resolve.ResolveEngine.resolve(ResolveEngine.java:234)
at xsbt.boot.Update.xsbt$boot$Update$$lockedApply(Update.scala:105)
at xsbt.boot.Update$$anon$4.call(Update.scala:99)
at xsbt.boot.Locks$GlobalLock.withChannel$1(Locks.scala:93)
at xsbt.boot.Locks$GlobalLock.xsbt$boot$Locks$GlobalLock$$withChannelRetries$1(Locks.scala:78)
at xsbt.boot.Locks$GlobalLock$$anonfun$withFileLock$1.apply(Locks.scala:97)
at xsbt.boot.Using$.withResource(Using.scala:10)
at xsbt.boot.Using$.apply(Using.scala:9)
at xsbt.boot.Locks$GlobalLock.ignoringDeadlockAvoided(Locks.scala:58)
at xsbt.boot.Locks$GlobalLock.withLock(Locks.scala:48)
at xsbt.boot.Locks$.apply0(Locks.scala:31)
at xsbt.boot.Locks$.apply(Locks.scala:28)
at xsbt.boot.Update.apply(Update.scala:100)
at xsbt.boot.Launch.update(Launch.scala:350)
at xsbt.boot.Launch.xsbt$boot$Launch$$retrieve$1(Launch.scala:208)
at xsbt.boot.Launch$$anonfun$3.apply(Launch.scala:216)
at scala.Option.getOrElse(Option.scala:120)
at xsbt.boot.Launch.xsbt$boot$Launch$$getAppProvider0(Launch.scala:216)
at xsbt.boot.Launch$$anon$2.call(Launch.scala:196)
at xsbt.boot.Locks$GlobalLock.withChannel$1(Locks.scala:93)
at xsbt.boot.Locks$GlobalLock.xsbt$boot$Locks$GlobalLock$$withChannelRetries$1(Locks.scala:78)
at xsbt.boot.Locks$GlobalLock$$anonfun$withFileLock$1.apply(Locks.scala:97)
at xsbt.boot.Using$.withResource(Using.scala:10)
at xsbt.boot.Using$.apply(Using.scala:9)
at xsbt.boot.Locks$GlobalLock.ignoringDeadlockAvoided(Locks.scala:58)
at xsbt.boot.Locks$GlobalLock.withLock(Locks.scala:48)
at xsbt.boot.Locks$.apply0(Locks.scala:31)
at xsbt.boot.Locks$.apply(Locks.scala:28)
at xsbt.boot.Launch.locked(Launch.scala:238)
at xsbt.boot.Launch.app(Launch.scala:147)
at xsbt.boot.Launch.app(Launch.scala:145)
at xsbt.boot.Launch$.run(Launch.scala:102)
at xsbt.boot.Launch$$anonfun$apply$1.apply(Launch.scala:35)
at xsbt.boot.Launch$.launch(Launch.scala:117)
at xsbt.boot.Launch$.apply(Launch.scala:18)
at xsbt.boot.Boot$.runImpl(Boot.scala:41)
at xsbt.boot.Boot$.main(Boot.scala:17)
at xsbt.boot.Boot.main(Boot.scala)
Caused by: java.lang.SecurityException: Can not initialize cryptographic mechanism
at javax.crypto.JceSecurity.&lt;clinit&gt;(JceSecurity.java:88)
... 78 more
  Caused by: java.security.PrivilegedActionException: java.util.zip.ZipException: zip file is empty
  at java.security.AccessController.doPrivileged(Native Method)
at javax.crypto.JceSecurity.&lt;clinit&gt;(JceSecurity.java:77)
... 78 more
  Caused by: java.util.zip.ZipException: zip file is empty
  at java.util.zip.ZipFile.open(Native Method)
at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:225)
at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:155)
at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:166)
at java.util.jar.JarFile.&lt;init&gt;(JarFile.java:130)
at javax.crypto.JceSecurity.loadPolicies(JceSecurity.java:292)
at javax.crypto.JceSecurity.setupJurisdictionPolicies(JceSecurity.java:262)
at javax.crypto.JceSecurity.access$000(JceSecurity.java:48)
at javax.crypto.JceSecurity$1.run(JceSecurity.java:80)
... 80 more
  Error during sbt execution: java.lang.ExceptionInInitializerError
</code></pre>

<p>Installed on MacOS 10.12.6:</p>

<ul>
<li>Java Cryptography Extension (JCE)</li>
<li>SBT version 0.13.16</li>
<li>Scala 2.11.11.</li>
</ul>

<p>Already have tried to clean up everything and reinstall Scala and SBT. but it didn't work for me.</p>

<p>Could you please point me where could be the problem?</p>
","<p>The solution was pretty easy: I just reinstalled JDK8 and cleaned up Ivy cache.</p>
","544","<scala><sbt><jce>","0","0","1","2017-10-25 08:41:57","","1","","","","","2017-10-24 10:05:47",""
"38273270","How do you convert a JCE algorithm name into an AlgorithmIdentifier object?","<p>I'm using BouncyCastle 1.54.</p>

<p>I have a JCE algorithm string - like ""ECDSAwithSHA256"" (for example).</p>

<p>I need an org.bouncycastle.asn1.x509.AlgorithmIdentifier object.</p>

<p>Alternatively, I could create an AlgorithmIdentifier object from an OID, but that begs the question of how to translate an algorithm string into an OID instead.</p>

<p>I could create a giant if/else, but there's got to be a standard way to do this.</p>
","<p>You can use the algorithm finders of BouncyCastle (see <a href=""https://www.bouncycastle.org/docs/pkixdocs1.5on/index.html?org/bouncycastle/operator/DefaultSignatureAlgorithmIdentifierFinder.html"" rel=""nofollow"">javadoc</a>)</p>

<pre><code>import org.bouncycastle.operator.DefaultDigestAlgorithmIdentifierFinder;
import org.bouncycastle.operator.DefaultSignatureAlgorithmIdentifierFinder;

AlgorithmIdentifier sigAlgId = new DefaultSignatureAlgorithmIdentifierFinder().find(signatureAlgorithm);
AlgorithmIdentifier digAlgId = new DefaultDigestAlgorithmIdentifierFinder().find(sigAlgId);
</code></pre>

<p>The <code>AlgorithmIdentifier</code> OID's obtained for <code>SHA256withECDSA</code> (not <code>ECDSAwithSHA256</code>, see <a href=""https://bouncycastle.org/specifications.html"" rel=""nofollow"">bouncycastle specifications</a>) will be</p>

<pre><code>1.2.840.10045.4.3.2
2.16.840.1.101.3.4.2.1
</code></pre>
","536","<bouncycastle><jce><oid>","1","0","1","2016-07-20 07:36:13","38475100","0","","","","","2016-07-08 18:30:48",""
"30654740","Set up Netty-with TLS handsake with ECC and RSA client certificate auth","<p>I am working on a remote server that uses Netty to perform client authentication with a TLS handshake through the Netty SSLHandler library. This S/O question gives a bit: <a href=""https://stackoverflow.com/questions/9573894/set-up-netty-with-2-way-ssl-handsake-client-and-server-certificate"">Set up Netty with 2-way SSL Handsake (client and server certificate)</a></p>

<p>Now, the question I have about this system is that the Server requires a TrustManager to initialize a SSLContext. From what I observe this uses the SunJSSE provider. Now after setting up this implementation, I got it working with RSA client certs. Now, I am having trouble using ECC client certs as SunJSSE cannot recognize them (I think Java SE 7 include SunEC as a provider. But SunEC is a SunJCE implementation and not a SunJSSE one and thus cannot be used as a provider for TrustManager). So, how do I proceed. I heard Bouncy Castle can recognize these certs, but I still cannot instantiate a TrustManager with BC as the provider.</p>

<p>Edit: Also if there is no way to use TrustManagers, should I do the entire handshake only use BouncyCastle's API's and not netty's libraries? That seems off though.
This is my other S/O question that shows the stack trace: <a href=""https://stackoverflow.com/questions/30603680/client-ecc-ssl-certificate-contains-unknown-named-curve"">Client ECC SSL Certificate contains &quot;unknown named curve&quot;</a></p>
","","533","<ssl><netty><bouncycastle><jce><jsse>","6","","0","2015-06-05 05:06:24","","1","0","-1","","2017-05-23 11:51:08","2015-06-04 21:45:36",""
"16648551","Joomla ""Add new article"" javascript error ""Joomla not defined""","<p>I recently tried to update Joomla Core from 2.5.8 to 2.5.11.
I encountered some problems so I decided to restore a backup and I got the site back to 2.5.8. 
Now my site works (frontend-backend) except of the editor. 
The page loads for while and then stops with a javascript error</p>

<pre><code>""NetworkError: 500 Internal Server Error - http://www.isathens.gr/administrator/index.php?option=com_content&amp;view=article&amp;layout=edit""
index....ut=edit
ReferenceError: Joomla is not defined   

Joomla.submitbutton = function(task) 
</code></pre>

<p>I am not very familiar with joomla and I checked the problem but I cannot find a solution.
I am using JCE editor.</p>

<p>Thank you in advance</p>
","","527","<javascript><joomla><jce>","1","","0","2013-05-20 11:30:59","","2","1","","","","2013-05-20 11:30:59",""
"44237620","Asymmetric File encryption with Java","<p>I have a pfx file that contains public key and private key, I want to use these keys to encrypt and decrypt files locally on my machine.
That is my code:</p>

<pre><code>public static void encryptFile(File file, PublicKey key,
        String transformation) throws NoSuchAlgorithmException,
        NoSuchPaddingException, InvalidKeyException, IOException,
        InvalidAlgorithmParameterException, NoSuchProviderException {
    Cipher c = Cipher.getInstance(transformation, ""SunJCE"");
    byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
    IvParameterSpec ivspec = new IvParameterSpec(iv);

    SecretKeySpec secretKeySpec = new SecretKeySpec(keyb, ""AES"");

    c.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivspec);

    FileInputStream is = new FileInputStream(file);
    CipherOutputStream os = new CipherOutputStream(new FileOutputStream(
            new File(file.getName() + ""_enc"")), c);

    copy(is, os);
}

public static void decryptFile(File encryptedFile, File decryptedFile,
        Key privateKey, String transformation) {
    try {
        Cipher c = Cipher.getInstance(transformation, ""SunJCE"");

        byte[] iv = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
        IvParameterSpec ivspec = new IvParameterSpec(iv);
        byte[] keyb = privateKey.getEncoded();

        SecretKeySpec secretKeySpec = new SecretKeySpec(keyb, ""AES"");

        c.init(Cipher.DECRYPT_MODE, secretKeySpec, ivspec);
        CipherInputStream is = new CipherInputStream(new FileInputStream(
                encryptedFile), c);
        FileOutputStream os = new FileOutputStream(decryptedFile);

        copy(is, os);
    } catch (Exception e) {
        e.printStackTrace();
    }
}

public static void copy(InputStream is, OutputStream os) {

    try {
        byte[] buf = new byte[1024];
        long total = 0;
        while (true) {
            int r = is.read(buf);
            if (r == -1) {
                break;
            }
            os.write(buf, 0, r);
            total += r;
        }
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        try {
            is.close();
            os.flush();
            os.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
</code></pre>

<p>And I call it like that:</p>

<pre><code>            CertificateHandler.encryptFile(new File(""test.pdf""), pb, ""AES/CBC/PKCS5Padding"");
        CertificateHandler.decryptFile(new File(""test.pdf_enc""), new File(""test.enc.pdf""), pk, ""AES/CBC/NoPadding"");
</code></pre>

<p>But I get this error:</p>

<pre><code>java.security.InvalidKeyException: Invalid AES key length: 294 bytes
</code></pre>

<p>I used Unlimited JCE Policy but nothing changed. And when I try to use digested keys it doesn't work I think because the key it cutted and no more valid </p>

<p>Any suggestion?</p>
","<p>to do the encryption right, you're missing some details.</p>

<p>AES is a symmetric cipher taking a <strong>key size of 128, 192 or 256 bits</strong>.   You cannot just use an RSA private key with any encryption scheme.</p>

<p>For using RSA keys just search the net, for example <a href=""http://www.java2s.com/Code/Android/Security/RSAencryptdecryptfunctionRSAECBPKCS1Padding.htm"" rel=""nofollow noreferrer"">http://www.java2s.com/Code/Android/Security/RSAencryptdecryptfunctionRSAECBPKCS1Padding.htm</a></p>

<p>Usually how encryption of longer content (files) is done: </p>

<p>(please note there are multiple options or modes, what I write here is a simple suggestion) </p>

<p>Encryption:</p>

<ol>
<li>generate a random AES key (128bit will do) and nonce (IV) - for IV do not use the fixed vector as it is in your code</li>
<li>use RSA to encrypt the generated key (e.g. RSA/ECB/PKCS1Padding)</li>
<li>compute digest (hash) of the content (sha-256)</li>
<li>to the output stream write the encrypted AES key, IV, digest and  encrypted content (AES/CBC/PKCS5Padding).   </li>
</ol>

<p>Decryption</p>

<ol>
<li>read the AES key, nonce and digest from the stream </li>
<li>decrypt the key with your RSA private key </li>
<li>read the and decrypt the content </li>
<li>compute digest of the decrypted content and compare it with the already read hash, fail if they do not match</li>
</ol>

<p>It seems complicated, but skipping any of these steps may (and often will) result in encryption being broken. Even these steps need to have some properties (fixed execution time, etc, but for start you should be ok).</p>
","525","<java><encryption><rsa><x509certificate><jce>","0","1","1","2017-05-29 10:35:13","44239255","2","2","","","","2017-05-29 08:13:44",""
"39244055","How could I prevent Bouncycastle being added as a JCE provider?","<p>I've spent 2 days chasing a strange SSL problem with Tomcat (bad record mac) and I finally found it was caused by Bouncycastle JCE Provider implementation.</p>

<p>This is maybe the third time I had this kind of weird, strange behavior problems (Others being problems reloading webapps, or reading certificate info).</p>

<p>I believe Bouncycastle is a great library, but the fact that it is commonly added as a global provider for the Java process with <code>Security.addProvider()</code>, and that third party libraries do this internally and without warning, makes it a big problem. <a href=""http://grepcode.com/file/repository.springsource.com/org.apache.ws/com.springsource.org.apache.ws.security/1.5.8/org/apache/ws/security/WSSConfig.java#WSSConfig.0addJceProviders"" rel=""nofollow"">Example</a></p>

<p><strong>So, is there a way to prevent BC from being added as a security provider, globally?</strong> 
I've tried to use a Security Manager directly and through Tomcat, but I couldn't make it work, and I don't know how could I disable only that action. (I don't want any other change in my system)</p>

<p>My code uses the library but it never needs to add it as a JCE provider. 
I can't  understand why the JCE API works that way and creates such a big point of instability, but maybe that's another question.</p>
","","524","<java><bouncycastle><jce>","2","","0","2019-11-08 17:14:23","","6","2","134898","","2016-08-31 08:49:44","2016-08-31 08:07:56",""
"35606245","How to configure Wildfly/java to use specific ciphers for https","<p>I am having problems configuring my wildfly-server (8.2.0-Final) to use specific ciphers for my https-configuration.</p>

<p>I am running java 8 (1.8.0_45, with JCE security extensions installed, which does not seem te make a difference).</p>

<p>This is a snippet of my standalone.xml:</p>

<pre><code>&lt;https-listener name=""default-ssl"" socket-binding=""https"" security-realm=""SslRealm"" enabled-cipher-suites=""TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_SHA256,TLS_ECDHE_RSA_WITH_AES_128_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_SHA,TLS_ECDHE_RSA_WITH_AES_256_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_SHA384,TLS_ECDHE_RSA_WITH_AES_256_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_SHA,TLS_DHE_RSA_WITH_AES_128_SHA256,TLS_DHE_RSA_WITH_AES_128_SHA,TLS_DHE_DSS_WITH_AES_128_SHA256,TLS_DHE_RSA_WITH_AES_256_SHA256,TLS_DHE_DSS_WITH_AES_256_SHA,TLS_DHE_RSA_WITH_AES_256_SHA""/&gt;
</code></pre>

<p>When I test my server using www.ssllabs.com, I only get </p>

<pre><code>   TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 (0x9e)   DH 1024 bits   FS   WEAK    128
   TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)   ECDH sect571r1 (eq. 15360 bits RSA)   FS    128
   TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 (0xc030)   ECDH sect571r1 (eq. 15360 bits RSA)   FS    256
</code></pre>

<p>According to Java Cryptography Architecture Oracle Providers Documentation for JDK 8, several of these ciphers (for example, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384) are included and enabled by default in java 8.</p>

<p>Does anyone know why the default-enabled ciphers are not showing up and how can I get these ciphers to be added for my server?</p>

<p>Thanks in advance,</p>

<p>Rob</p>
","<p>Hmm.. Can you try adding this to your https-listeners element:<br>
enabled-protocols=""TLSv1,TLSv1.1,TLSv1.2""</p>
","510","<java><security><https><jce>","0","0","1","2016-03-16 23:06:30","","0","","","","","2016-02-24 15:31:34",""
"35610017","What is the algorithm for the JCEKS PBE used to encrypt the private key?","<p>I want to decrypt the private key in a Java JCEKS Keystore, and I do not want to use Java.</p>

<p>I can find a description of the PBEWithMD5AndTripleDES, but not the actual implementation.</p>

<p>This comment purportedly explains the derivation:</p>

<pre><code>/**
 * This class implements a proprietary password-based encryption algorithm.
 * It is based on password-based encryption as defined by the PKCS #5
 * standard, except that is uses triple DES instead of DES.
 *
 * Here's how this algorithm works:
 *
 * 1. Create random salt and split it in two halves. If the two halves are
 *    identical, invert one of them.
 * 2. Concatenate password with each of the halves.
 * 3. Digest each concatenation with c iterations, where c is the
 *    iterationCount. Concatenate the output from each digest round with the
 *    password, and use the result as the input to the next digest operation.
 *    The digest algorithm is MD5.
 * 4. After c iterations, use the 2 resulting digests as follows:
 *    The 16 bytes of the first digest and the 1st 8 bytes of the 2nd digest
 *    form the triple DES key, and the last 8 bytes of the 2nd digest form the
 *    IV.
 *
 * @author Jan Luehe
 * @see javax.crypto.Cipher
 */
</code></pre>

<p>But, is that first concatenation, <code>password + half-of-salt</code>, or is it <code>half-of-salt + password</code>? Is the input of the following rounds <code>password + digest</code>, or is it <code>digest + password</code>.</p>

<p>Between 8-bit chars, or full 16-bit chars, and the possible combinations of concatenation, you would think that by trial and error I should have worked it out by now.</p>

<p>I know the <em>salt</em>, and the <em>iterations</em>, and the <em>password</em>, and even the plaintext that the ciphertext should decrypt to (i.e. I have the decrypted data).</p>

<p>Deriving a 24-byte DES3 key, whether fixing parity or leaving it alone, and an 8-byte IV, decrypting in DES3 CBC mode, I cannot recreate my plaintext.</p>

<p>What is the algorithm that this comment describes?</p>
","<p>Thank you to erikson 1 who replied to a comment <a href=""https://stackoverflow.com/a/10606904/233596"">on this answer</a> to another question, and to Ebbe M. Pedersen. In the end, I should have tripped over the answer in trying the different  combinations but somehow missed it.</p>

<p>For those interested, once you open up the JKS and find the entry, the encrypted PKCS#8 shows the JCEKS algorithm 1.3.6.1.4.1.42.2.19.1 along with salt and iteration count parameters and with those and your 8-bit/char password you can decrypt the ciphertext to find the inner, unencrypted PKCS#8 holding your private key.</p>

<pre><code>def jce_pbkdf1(password, salt, iterations)
  salts = [copy = salt.dup, copy.slice!((copy.length / 2)..-1)]
  octets = salts.map { |half| (iterations).times.inject(half) { |digest| OpenSSL::Digest.digest('md5', digest + password) } }.join
  return octets[0..23], octets[24..-1] // key (parity not set) and IV
end
</code></pre>
","510","<java><encryption><jce><jks>","0","1","1","2016-02-25 00:45:46","","2","","1816580","","2016-02-24 18:24:44","2016-02-24 18:21:45",""
"44333397","How to get JSCh/JCE to work with Java 1.4?","<p>According to <a href=""http://www.jcraft.com/jsch/"" rel=""nofollow noreferrer"">http://www.jcraft.com/jsch/</a>, <code>JSch is in pure Java, but it depends on Java Cryptography Extension (JCE). JSch has been known to work with J2SE 1.4.0 or later (no additional libraries required).</code></p>

<p>Before anyone suggests I upgrade (which would indeed make my life easier), it is not an option: I have to get this working under Java 1.4.2.</p>

<p>So, I downloaded the JSch 0.1.54 source (and the JZLib 1.1.3 source) and fixed a few minor problems here and there. The remaining stumbling block is JCE. Without it, the following classes (found under <code>java.security.interfaces</code> starting with Java 1.5) are missing:</p>

<pre><code>Error:(40, 3) java: cannot find symbol
  symbol:   class ECFieldFp
  symbol:   class ECGenParameterSpec
  symbol:   class ECParameterSpec
  symbol:   class ECPoint
  symbol:   class ECPrivateKey
  symbol:   class ECPrivateKeySpec
  symbol:   class ECPublicKey
  symbol:   class ECPublicKeySpec
  symbol:   class EllipticCurve
</code></pre>

<p>Where is the JCE source or jar that will fill this need? The Bouncy Castle page (<a href=""https://www.bouncycastle.org/latest_releases.html"" rel=""nofollow noreferrer"">https://www.bouncycastle.org/latest_releases.html</a>) seems to be part of the solution, but there is a bewildering choice of downloads for Java 1.4. I tried <code>lcrypto-jdk14-157</code> but it's incomplete against the above list: it supplies only <code>ECPoint</code> and <code>ECPrivateKey</code>.</p>
","<p>According to the <a href=""http://www.jcraft.com/jsch/ChangeLog"" rel=""nofollow noreferrer"">change log</a>, the support was added since version <strong>0.1.52</strong>. These classes are used in <code>com/jcraft/jsch/jce/KeyPairGenECDSA.java</code>, <code>KeyPairECDSA.java</code>, <code>ECDH.hava</code>, <code>SignatureECDSA.java</code> and other new files to support <code>ECDSA</code> key.</p>

<p>If you don't have to connect a server supported only <code>ECDSA</code> key.  A solution is downloading source code from <a href=""https://sourceforge.net/projects/jsch/files/jsch/0.1.51/"" rel=""nofollow noreferrer"">sourceforge.net</a>, building the jar file using JDK 1.4.2. There is one compatible problem:</p>

<pre><code>jsch-0.1.51/src/main/java/com/jcraft/jsch/Util.java:490: replace(char,char) in java.
lang.String cannot be applied to (java.lang.String,java.lang.String)
    str = str.replace(""~"", System.getProperty(""user.home""));
</code></pre>

<p>All you have to is fixing this error.</p>
","499","<java><jsch><jce>","4","1","1","2017-06-06 03:36:26","","0","","","","","2017-06-02 16:20:19",""
"18742733","BadPaddingException after porting Java app to OS X","<p>I'm in the process of porting our Java application to OS X (10.8). One of our unit tests fails when doing encryption (it works on Windows). Both are running Java 7 Update 21 but the Windows version is using the 32 bit JDK and the Mac version is using the 64 bit JDK.</p>

<p>When running it on Mac I get the following exception when trying to decrypt the encrypted data:</p>

<blockquote>
  <p>Caused by: javax.crypto.BadPaddingException: Given final block not
  properly padded   at
  com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:811)   at
  com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:676)   at
  com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:313)
    at javax.crypto.Cipher.doFinal(Cipher.java:2087)    at
  com.degoo.backend.security.Crypto.processCipher(Crypto.java:56)   ...
  25 more</p>
</blockquote>

<p>Here's the encryption class.</p>

<pre><code>import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

public final class Crypto {

    private final static String CIPHER_ALGORITHM = ""AES"";
    private final static String CIPHER_TRANSFORMATION = ""AES/CBC/PKCS5Padding"";

    public final static int CRYPTO_KEY_SIZE = 16;    

    public static byte[] encryptByteArray(byte[] blockToEncrypt, int maxLengthToEncrypt, byte[] encryptionKey, byte[] ivBytes) {
        return processCipher(blockToEncrypt, maxLengthToEncrypt, Cipher.ENCRYPT_MODE, ivBytes, encryptionKey);
    }

    public static byte[] decryptByteArray(byte[] encryptedData, byte[] encryptionKey, byte[] ivBytes) {
        return processCipher(encryptedData, encryptedData.length, Cipher.DECRYPT_MODE, ivBytes, encryptionKey);
    }

    private static byte[] processCipher(byte[] blockToEncrypt, int maxLength, int cryptionMode, byte[] ivBytes, byte[] encryptionKey) {
        try {
            IvParameterSpec iv = new IvParameterSpec(ivBytes);
            final Cipher cipher = initCipher(cryptionMode, iv, encryptionKey);
            return cipher.doFinal(blockToEncrypt, 0, maxLength);
        } catch (Exception e) {
            throw new RuntimeException(""Failure"", e);
        }
    }

    private static Cipher initCipher(int cryptionMode, IvParameterSpec iv, byte[] encryptionKey) {
        KeyGenerator keyGen;
        try {
            keyGen = KeyGenerator.getInstance(CIPHER_ALGORITHM);

            final SecureRandom randomSeed = new SecureRandom();
            randomSeed.setSeed(encryptionKey);
            keyGen.init(CRYPTO_KEY_SIZE * 8, randomSeed);

            // Generate the secret key specs.
            final SecretKey secretKey = keyGen.generateKey();

            final SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getEncoded(), CIPHER_ALGORITHM);

            // Instantiate the cipher
            final Cipher cipher = Cipher.getInstance(CIPHER_TRANSFORMATION);

            cipher.init(cryptionMode, secretKeySpec, iv);
            return cipher;

        } catch (Exception e) {
            throw new RuntimeException(""Failure"", e);
        }
    }
}
</code></pre>

<p>The test code looks like this:</p>

<pre><code>public void testEncryption() throws Exception {
        int dataLength = TestUtil.nextInt(applicationParameters.getDataBlockMinSize());
        byte[] dataToEncrypt = new byte[dataLength];
        TestUtil.nextBytes(dataToEncrypt);

        int keyLength = 16;
        byte[] key = new byte[keyLength];
        TestUtil.nextBytes(key);

        byte[] ivBytes = new byte[16];
        TestUtil.nextBytes(key);

        long startTime = System.nanoTime();
        byte[] encryptedBlock = Crypto.encryptByteArray(dataToEncrypt, dataToEncrypt.length, key, ivBytes);
        long endTime = System.nanoTime();
        System.out.println(""Encryption-speed: "" + getMBPerSecond(dataLength, startTime, endTime));

        startTime = System.nanoTime();
        byte[] decryptedData = Crypto.decryptByteArray(encryptedBlock, key, ivBytes);
        endTime = System.nanoTime();
        System.out.println(""Decryption-speed: "" + getMBPerSecond(dataLength, startTime, endTime));

        if (encryptedBlock.length == decryptedData.length) {
            boolean isEqual = true;
            //Test that the encrypted data is not equal to the decrypted data.
            for (int i = 0; i &lt; encryptedBlock.length; i++) {
                if (encryptedBlock[i] != decryptedData[i]) {
                    isEqual = false;
                    break;
                }
            }
            if (isEqual) {
                throw new RuntimeException(""Encrypted data is equal to decrypted data!"");
            }
        }

        Assert.assertArrayEquals(dataToEncrypt, decryptedData);
    }
</code></pre>
","<p>I think I've found it. For some reason the code above derives an encryption-key by seeding a SecureRandom instance with the existing encryption key to get a new byte[] (don't ask me why, it was a long time ago it was written). This is then fed to the SecretKeySpec constructor. If I skip all this and just feed the SecretKeySpec constructor the encryption key that we already have then the unit test passes. The code that does the encryption now looks like this:</p>

<pre><code>final SecretKeySpec secretKeySpec = new SecretKeySpec(encryptionKey, CIPHER_ALGORITHM);

// Instantiate the cipher
final Cipher cipher = Cipher.getInstance(CIPHER_TRANSFORMATION);

cipher.init(cryptionMode, secretKeySpec, iv);
return cipher;
</code></pre>

<p>The odd thing is that it has worked on Windows. Looks like the SecureRandom implementations behave differently on OS X and on Windows. Calling setSeed on OS X appends to the seed whereas Windows replaces it. </p>

<p>Update: found some more details on the implementation differences of SecureRandom: <a href=""http://www.cigital.com/justice-league-blog/2009/08/14/proper-use-of-javas-securerandom/"" rel=""nofollow"">http://www.cigital.com/justice-league-blog/2009/08/14/proper-use-of-javas-securerandom/</a>  </p>
","482","<java><macos><aes><jce><badpaddingexception>","1","2","1","2013-09-11 16:16:38","18745714","0","4","71354","","2013-09-11 16:16:38","2013-09-11 13:34:50",""
"19449002","JCE security provider in OSGi","<p>We have a problem using a custom JCA implementation in our OSGi bundle. The JCA implementation that we are forced to use by our customer leads to a class loader memory leak. This prevents the deployment and usage of it in our bundle, because we quickly run into a perm gen space problem.</p>

<p>The proposed solution from the JCA provider is to put the JAR in the jre/lib/ext folder, but it is not loaded from there. This is due, as far as I know, to the OSGi (Eclipse equinox) class loader policy to have the bootstrap classloader as the parent of each bundle classloader, which excludes the extension class loader that loads from the jre/lib/ext folder. I.e. no bundle ever sees anything in the jre/lib/ext folder.</p>

<p>Is there a way to get Eclipse equinox to load a jar that is registered as a security provider, only once, such that all bundles or a specific bundle can see that provider? The fact that the JCA library is not unloaded via OSGi could be tolerated in this instance.</p>
","<p>You should edit the system packages and add the packages from the JCA-custom.jar.</p>

<p>You can define which packages should be included in several ways.</p>

<ul>
<li>You create a profile for equinox and define the packages. You can find examples for each jdk versions in the eclipse.osgi jar. For example, look for JavaSE-1.6.profile and try finding the entry org.osgi.framework.system.packages</li>
<li>You can define it as a system variable when you start your OSGi container. The system variable is the same: -Dorg.osgi.framework.system.packages=<em>package names separated by comma</em></li>
</ul>
","477","<java><osgi><jce>","0","1","1","2013-10-18 15:37:28","","0","1","","","","2013-10-18 11:52:15",""
"26212422","Creating key in java from password and salt using aes 256","<p>I am writing piece of code that decrypts data in java, which is encrypted in some C++ code using [poco lib] (<a href=""http://pocoproject.org/docs/"" rel=""nofollow noreferrer"">http://pocoproject.org/docs/</a>).</p>

<p>C++ code is similar as shown below: </p>

<pre><code>std::string password = ""secret"";
std::string salt(""asdff8723lasdf(**923412"");
CipherKey key(""aes-256"", password, salt);
</code></pre>

<p>Also with iteration count of 2k.</p>

<pre><code>DEFAULT_ITERATION_COUNT = 2000
</code></pre>

<p>How do I create that same key in java to decrypt the data?
What is equivalent code in java? </p>

<p>I am trying something like this,</p>

<pre><code>    SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    char[] passowrd = ""secret"".toCharArray();
    byte[] salt = ""asdff8723lasdf(**923412"".getBytes();

    KeySpec spec = new PBEKeySpec(passowrd,salt, 2000);
    SecretKey tmp = factory.generateSecret(spec);
    SecretKey secret = new SecretKeySpec(tmp.getEncoded(), ""AES"");
</code></pre>

<p>But, it doesn't works. Gives me no such algorithm found exception. Which algorithm should I use? Do I need to know something more to decrypt?</p>

<p><strong>UPDATE</strong><br>
I have added bounty castle to my security provider as pointed out by <a href=""https://stackoverflow.com/users/2504380/user2504380"">user2504380</a></p>
","","458","<java><c++><encryption><aes><jce>","1","","0","2014-10-07 03:46:56","","7","","-1","","2017-05-23 11:49:37","2014-10-06 08:27:32",""
"49272578","Crypto policy unlimited ignored by JBoss","<p>While trying to encrypt some data using jasypt, I run across the exception below:</p>

<pre><code>org.jasypt.exceptions.EncryptionOperationNotPossibleException: Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine
</code></pre>

<p>I found a couple of questions so I fixed the issue by setting the crypto.policy property to unlimited in my code: </p>

<pre><code>Security.setProperty(""crypto.policy"", ""unlimited"");
</code></pre>

<p>I deployed the war in a JBoss in my machine, and it works. But then we tried to install it in a different environment (not managed entirely by us), and it seems to somehow ignore the property (I have some logs to show its value, and I can see that the value is ok right before the encryption), because we're still getting the same error. </p>

<p>So, my question is: what can possibly be configured in JBoss to get that property ignored, even when changed programmatically? </p>

<p>We've checked the Java version in that environment and it's <code>""1.8.0_152""</code>, so we think it should be ok. What are we missing?</p>
","<p>what error you are getting? if you are getting the exception mentioned above that may be due to the fact that you haven't installed  <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""nofollow noreferrer"">Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files</a> in the new environment. You can check what JCE in your machine and in the new environment.</p>
","455","<java><jboss><jce><jasypt>","2","1","1","2018-03-23 11:16:39","","0","","","","","2018-03-14 08:11:05",""
"23507657","SecureRandom.setSeed(byte[])","<p>I'd like to seed a secure random generator myself using bytes, e.g.:</p>

<pre><code>SecureRandom sha1prng = SecureRandom.getInstance(""SHA1PRNG"");
sha1prng.setSeed(new byte[] { 2, -4, 127, -54 });
System.out.println(sha1prng.nextLong());
</code></pre>

<p>I found a number of examples on the net, and most of them use a byte array of length 20. So, my question is how long should this array actually be? Is there any recommendation naming a lower and an upper limit? Would it make it more unpredictable if I used for instance 1000 bytes rather than just 20?</p>

<p>Cheers,
Andy</p>
","<p>OK, this doesn't seem to be an easy to answer question. From what I found so far, it appears that the required length for this input depends on the actual provider used, in case of the default provider this is probably sun.security.provider.SecureRandom. This implementation uses a MessageDigest with a size of 20 bytes, therefore 20 bytes can be used as input for the setSeed(byte[])-method.</p>

<pre><code>private static final int DIGEST_SIZE = 20;
</code></pre>

<p>More wouldn't probably add entropy to it. Other implementations might use even less; I didn't find one that uses more bytes so far.</p>

<p>Sources:
<a href=""http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/tip/src/share/classes/java/security/SecureRandom.java"" rel=""nofollow"">http://hg.openjdk.java.net/jdk7/jdk7/jdk/file/tip/src/share/classes/java/security/SecureRandom.java</a></p>

<p><a href=""http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/sun/security/provider/SecureRandom.java"" rel=""nofollow"">http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/sun/security/provider/SecureRandom.java</a></p>

<p>--not enough points to add more sources (links)</p>
","451","<java><jce>","0","0","1","2014-05-12 00:28:26","","2","","","","","2014-05-07 02:25:27",""
"34822839","Enabling AES-256 Cipher suites on Openfire","<p>I'm putting together an XMPP server for a project of mine, and I have rather strict encryption standards. Namely, I need the TLS protocol to only utilize AES-256 cipher suites and their equivalents. Basically, anything that doesn't require the JCE unlimited policy, I want excluded. Yes, I know that it's highly prohibitive on the client because they need to be able to use/install the JCE policy. I'm ok with that, and I'm not allowed to work around it.</p>

<p>As I understand, Openfire runs off of the base JRE. I've found how to install the JCE unlimited policy in the JRE, and further how to remove cipher suites from the java environment via jdk.tls.disabledAlgorithms in java.security. However, my testing shows that even when I set up an environment where the client and server have no shared supported suites, and encrypted connections are set to ""required,"" a client can still connect and communicate. I'm specifically trying to avoid this behavior. </p>

<p>Furthermore, with the release of Openfire 4.0, and the ability to modify the list of enabled cipher suites directly, I notice that AES-256 ciphers are not on the supported list in the first place, even when the JCE unlimited policy is installed. Meaning, whether i remove unacceptable cipher suites in jdk.tls.disabledAlgorithms or directly in in Openfire, Openfire is not importing the AES-256 suites i need, regardless of the JCE policy.</p>

<p>Is there a way to add cipher suites to the Openfire list, so long as the cipher suites are supported by the underlying JRE/JCE?</p>
","<p>Nevermind. I found that Openfire was using its own JRE from the install rather than the general JRE in program files. Re-copied the JCE files to the new runtime and it works perfectly.</p>
","448","<java><ssl><encryption><openfire><jce>","0","0","1","2016-01-16 05:04:47","","0","","","","","2016-01-16 02:17:41",""
"19911153","android cipher dofinal array too large","<p>I am writing an Android version of a Java program that I use to keep track of passwords.</p>

<p>I have the following function that I use to decode one line of the encrypted data:</p>

<pre><code>public String decrypt(String text) {
    byte[] decryptedText = null;
    String rtn = """";
    String[] byteValues = text.substring(1, text.length() - 1).split("","");
    byte[] bytes = new byte[byteValues.length];
    for (int i=0, len=bytes.length; i&lt;len; i++) {
        bytes[i] = Byte.valueOf(byteValues[i].trim());     
    }
    try {
        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        decryptedText = cipher.doFinal(bytes);
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    if (decryptedText != null) {
        try {
            rtn = new String(decryptedText, ""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }

    return rtn;
}
</code></pre>

<p>ALGORITHM is set to:</p>

<pre><code>public static final String ALGORITHM = ""RSA"";
</code></pre>

<p>The input text looks something like this (there are 128 values):</p>

<pre><code>[12, -27, -31, 2, -65, -119, -104, -9, -42, 6, -32, -116, 35, 14, -30, -51, 117, 21, -33, -98, 21, 41, -11, 118, 85, -46, -67, -19, 47, -10, -42, -18, -116, 87, 49, 76, 25, 114, 88, -100, 41, 74, -70, 73, -103, 78, 117, 123, 127, -4, 98, -6, -124, -69, -112, -51, 27, 46, -83, 5, -84, 22, -64, -92, 15, -85, 34, -44, -50, 28, -69, 28, 106, -75, -7, 63, 112, 22, 112, -85, -28, 29, 97, -51, 112, -52, -2, 60, -55, -57, 41, 78, -90, -55, -1, -128, 12, 10, 73, -95, -105, 38, -125, 123, 89, 35, 63, 100, 124, 64, -4, 11, -50, -100, -81, -66, -64, 94, -93, -72, 67, 3, 22, -126, -125, 24, 127, -74]
</code></pre>

<p>When I run this function as part of a Java program (both Jave 1.6 &amp; 1.7), I get back the original string as I expect. But, when I run this as part of my Android application the decryptedText array, instead of having a length of about 30, always has a length of 127. The resulting return string has all sorts of garbage characters in the front, but the last part of the string is the correctly decoded text.</p>

<p>Should I be calling the <code>doFinal</code> differently on Android than in Java?</p>
","<p>The problem was the setting for ALGORITHM. When I changed it to this:</p>

<pre><code>public static final String ALGORITHM = ""RSA/ECB/PKCS1Padding"";
</code></pre>

<p>Everything worked fine.</p>
","446","<java><android><rsa><encryption><jce>","0","1","1","2013-11-12 21:09:57","19939949","3","1","474189","","2013-11-12 08:18:44","2013-11-11 16:26:36",""
"31513547","Can I use Java 8's JCE (Java Cryptography Extension) with Java 7 and Java 6?","<p>I need to use the <code>SecretKeyFactory</code> <code>PBKDF2WithHmacSHA512</code> which is availble in Java 8's JCE.
Is it possible to add those files to Java 7 and JAva 6 installations as well?</p>

<p>Thanks,
Guy</p>
","","443","<java-8><backwards-compatibility><jce>","0","","0","2015-07-20 09:57:03","","4","","","","","2015-07-20 09:57:03",""
"31591382","Java 8 keytool is not using -providerName option correctly","<p>I have found that, when using <a href=""https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html#keytool_option_certreq"" rel=""nofollow"">keytool (windows, Java 8 u45)</a> to generate a csr from an EC keypair, stored in a keystore and using a custom provider specified via <code>-providerName</code>, that, the csr is not signed using algorithm I've specified from <em>my</em> provider (the provider it seems, is only working to specify the keystore).  Why, when I've told the tool what to use, would it only use it for ""some"" operations?  I've got it to work by listing my provider as the default provider in java.security, but, it makes little sense to me that I should have to do that when I've explicitly told the tool to ""use this provider"".</p>

<p>Is this a bug in the program, or a bug in my understanding?</p>
","","442","<java><security><keytool><jce>","1","","0","2015-07-23 17:50:26","","3","","1139436","","2015-07-23 17:50:26","2015-07-23 15:09:56",""
"5427357","Writing an Encryption Algorithm in JCE","<p>I have a question regarding JCE encryption.  How do you write your own encryption algorithm/secret key generator in Java that can be installed as a .jar file in the ext directory?  I have the basic idea for the algorithm figured out but I don't know how to implement it.  Do I subclass Cipher and KeyGenerator?  Google yields no help, which I find funny.</p>

<p>Thanks in advance.</p>
","<p>Your class should extend the abstract class <a href=""http://download.oracle.com/javase/1.5.0/docs/api/java/security/Provider.html"" rel=""nofollow""><code>javax.crypto.Provider</code></a>.  The <code>Provider</code> class is the way to create new algorithms to be used by <a href=""http://download.oracle.com/javase/1.5.0/docs/api/javax/crypto/Cipher.html"" rel=""nofollow""><code>javax.crypto.Cipher</code></a>.  Use the <a href=""http://download.oracle.com/javase/1.5.0/docs/api/javax/crypto/Cipher.html#getProvider%28%29"" rel=""nofollow""><code>addProvider()</code></a> method of <code>Cipher</code> to make it available for use.</p>
","442","<java><encryption><jce>","2","-1","2","2014-08-03 13:28:15","","1","","278899","","2011-03-25 01:07:29","2011-03-25 00:47:26",""
"5427357","Writing an Encryption Algorithm in JCE","<p>I have a question regarding JCE encryption.  How do you write your own encryption algorithm/secret key generator in Java that can be installed as a .jar file in the ext directory?  I have the basic idea for the algorithm figured out but I don't know how to implement it.  Do I subclass Cipher and KeyGenerator?  Google yields no help, which I find funny.</p>

<p>Thanks in advance.</p>
","<p>It is not possible to create your own provider for classes like <code>Cipher</code>. Those providers need to be signed with a private key which is part of a key pair trusted by Oracle.</p>

<p>You can find more information <a href=""http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/HowToImplAProvider.html"" rel=""nofollow"">here</a>.</p>
","442","<java><encryption><jce>","2","0","2","2014-08-03 13:28:15","","1","","278899","","2011-03-25 01:07:29","2011-03-25 00:47:26",""
"22531906","Android Java Cryptography Architecture","<p>As known <a href=""http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html"" rel=""nofollow"">Java crypto provider</a> require be a signed Jar file for using some algorithms types (Cipher for example) otherwise <code>java.lang.SecurityException</code> will be thrown (JCE cannot authenticate the provider).</p>

<p>Does Android require security provider be a signed jar?</p>

<p>I developed a simple provider with dummy cipher and as expected in JVM I received SecurityException but on Android my cipher works corrdectly.</p>
","","441","<java><android><jce>","1","","0","2014-03-20 11:42:58","","3","","","","","2014-03-20 11:42:58",""
"31984816","JCE generated keys in Keysafe / nCipher","<p>I am following the nCipher example to store symmettric keys in HSM and use from java program.</p>

<pre><code> KeyGenerator kg = KeyGenerator.getInstance(""AES"", ""nCipherKM"");
 SecretKey k = kg.generateKey();
 ks.setKeyEntry(""MyAESKey"", k, null, null); 
</code></pre>

<p>Then I call below methods to save the key in security world. I am told I should be able to see them in KeySafe.</p>

<pre><code>  FileOutputStream out = new FileOutputStream(""keystore.dat"");
  ks.store(out, null);
  out.close();  
</code></pre>

<p>I end up with two keys in KeySafe instead of one, and key names have nothing to the with the alias I used.</p>

<p>key_jcecsp_4912eadb0f19581317f02ce427b5f1ca3c872ef3-key-bb6328f32b6fbcae5787dde37640b37eb02ed97e</p>

<p>and </p>

<p>key_jcecsp_4912eadb0f19581317f02ce427b5f1ca3c872ef3</p>

<p>I have three questions:</p>

<ol>
<li>Even though I gave a nice alias such as ""MyAESKey"" the key shows up with a long oid of some sort. How can I get it to appear with a proper name in KeySafe?</li>
<li>Why do I get 2 entries instead of one? Which one is the key?</li>
<li>What is the significance of ""keystore.dat"" - why am I not interfacing directly with the key files under C:\ProgramData\nCipher\Key Management Data\local ?</li>
</ol>

<p>Thanks!</p>

<p>Vedat</p>
","<p>Vedat, </p>

<p>KeySafe doesn't know about JCE (which is ironic as it is itself a Java program).  It shows you the underlying objects in the Security World.  You're getting one actual key file containing your key data (encrypted by the HSM master key) and the plaintext alias (""MyAESKey""), and one file representing the KeyStore.  If you open up your keystore.dat file with a text editor, you'll see that it contains an identifier that shows up in the filename of the other files: this is how the software ties things together.  </p>

<p>The files in Key Management Data\local are completely abstracted away by the JCE KeyStore API implementation: all you need to reference the keys in a KeyStore is the file for it: keystore.dat in your example.</p>
","437","<encryption-symmetric><jce><hsm>","1","2","1","2015-08-14 05:17:32","","0","","","","","2015-08-13 09:47:28",""
"49938492","How to use PKCS#11 CKM_AES_KEY_WRAP mechanism in Java?","<p>I'm working with some PKCS#11 tokens that insist on using <code>CKM_AES_KEY_WRAP</code> for unwrapping AES-encrypted keys. On these tokens, <code>CKM_AES_CBC</code> and friends don't support unwrap.</p>

<p>At the other end of this system, I therefore need to wrap a key using a PKCS#11 token accessed via Java.</p>

<p><a href=""https://docs.oracle.com/javase/10/security/pkcs11-reference-guide1.htm#JSSEC-GUID-D3EF9023-7DDC-435D-9186-D2FD05674777"" rel=""nofollow noreferrer"">SunPKCS11</a> doesn't appear to support <code>CKM_AES_KEY_WRAP</code>. <a href=""http://javadoc.iaik.tugraz.at/pkcs11_wrapper/current/iaik/pkcs/pkcs11/wrapper/PKCS11Constants.html"" rel=""nofollow noreferrer"">Neither does IAIK</a>, as far as I can tell. Does anyone have any suggestions for achieving this in Java?</p>
","<p><code>CKM_AES_KEY_WRAP</code> is rather simple mechanism so you don't need your PKCS#11 wrapper library to provide nice constants or enum members to use it.</p>

<p>You should be fine as long as your PKCS#11 wrapper library allows you to specify wrapping mechanim as <code>ulong</code> and its parameters as <code>byte[]</code>. SunPKCS11 is quite limited so I would try with IAIK first.</p>

<p>Following code sample demonstrates the idea with <a href=""https://pkcs11interop.net"" rel=""nofollow noreferrer"">Pkcs11Interop</a> wrapper for .NET:</p>

<pre class=""lang-csharp prettyprint-override""><code>// Acquire handle to keys
ObjectHandle wrappingKey = new ObjectHandle();
ObjectHandle toBeWrappedKey = new ObjectHandle();

// Define mechanism yourself
ulong CKM_AES_KEY_WRAP = 0x00002109;
byte[] CKM_AES_KEY_WRAP_PARAM = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 };
Mechanism mechanism = new Mechanism(CKM_AES_KEY_WRAP, CKM_AES_KEY_WRAP_PARAM);

// Perform wrapping
byte[] wrappedKey = session.WrapKey(mechanism, wrappingKey, toBeWrappedKey);
</code></pre>
","435","<java><pkcs#11><jce><iaik-jce><sunpkcs11>","0","1","1","2018-04-21 13:19:51","","0","","","","","2018-04-20 09:31:37",""
"13842231","Encryption - IV length is different than provided","<p>I've been struggling with encryption for a while now, and I'm about to complete the process, however, I'm now encountering some issues with the IV. Here's my code: </p>

<h3>IV generation</h3>

<pre><code>public static byte[] createIV(int size) { 
 byte[] iv = new byte[size];
 SecureRandom random = new SecureRandom();
 random.nextBytes(iv);   

 return iv; 
}
</code></pre>

<h3>AES-256 cipher creation (key)</h3>

<pre><code>public static Map&lt;String, byte[]&gt; cipherAES() throws NoSuchAlgorithmException {
     Map&lt;String, byte[]&gt; aes = new HashMap&lt;String, byte[]&gt;();
     aes.put(""IV"", ConversionUtil.toHex(createIV(16), 16).getBytes());
     KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
     keyGen.init(256);
     Key encryptionKey = keyGen.generateKey();
     aes.put(""key"", encryptionKey.getEncoded());

     return aes;
}
</code></pre>

<h3>toHex method</h3>

<pre><code>public static String toHex(byte[] data, int length) {
     StringBuffer buf = new StringBuffer();

     for (int i = 0; i != length; i++) {
        int v = data[i] &amp; 0xff;

        buf.append(DIGITS.charAt(v &gt;&gt; 4));
        buf.append(DIGITS.charAt(v &amp; 0xf));
     }

        return buf.toString();
}
</code></pre>

<h3>Cipher initialization</h3>

<pre><code>  SecretKey key = new SecretKeySpec(map.get(""key""), 0, map.get(""key"").length, ""AES"");
  Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
  cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(map.get(""IV""), 0, 16));
</code></pre>

<p>If I provide an IV of 16 bytes with this format to the cipher: </p>

<pre><code>8E12399C07726F5A8E12399C07726F5A
</code></pre>

<p>When I call the getIV method on the Cipher, I get this: </p>

<pre><code>8E12399C07726F5A
</code></pre>

<p>which is exactly half the bytes I provided for the IV. This is currently causing several issues, since the server can decrypt the second part of the message but not the first one. </p>

<p>I'm using JCE libraries only:</p>

<pre><code>import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
</code></pre>

<p>Can anyone shed some light on this? Let me know if you need further details.</p>
","<p>As mentioned in the comments by <a href=""https://stackoverflow.com/questions/13842231/encryption-iv-length-is-different-than-provided#comment19053030_13842231"">CodesInChaos</a> and <a href=""https://stackoverflow.com/questions/13842231/encryption-iv-length-is-different-than-provided#comment19053743_13842231"">bimsapi</a>, your error lies in your conversion of the IV value into hexadecimal. A simple correction to your cipherAES() method would be:</p>

<pre><code>public static Map&lt;String, byte[]&gt; cipherAES() throws NoSuchAlgorithmException {
     Map&lt;String, byte[]&gt; aes = new HashMap&lt;String, byte[]&gt;();
     aes.put(""IV"", createIV(16)); // &lt;-- no need for conversion
     KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
     keyGen.init(256);
     Key encryptionKey = keyGen.generateKey();
     aes.put(""key"", encryptionKey.getEncoded());
     return aes;
}
</code></pre>

<p>Note also that your method design is a little odd. Returning a map of strings to byte arrays is quite brittle and prone to errors. Consider instead returning an object that stores these items. In that object I would store the key as a <code>Key</code>, not a byte array.</p>
","431","<java><encryption><jce>","1","1","1","2012-12-12 18:52:37","13846613","3","3","474189","","2012-12-12 18:36:29","2012-12-12 14:48:09",""
"23487997","How to view the style tag contents in JCE Editor","<p>In my Joomla 3.3.0 installation I try to write custom css rules in my JCE editor (2.3.4.4 ). I have disabled the 'html filtering' and now this is possible.</p>

<p>So when i write something like:</p>

<pre><code>&lt;p&gt;test&lt;/p&gt;
&lt;style&gt;#t123{color:red}&lt;/style&gt;
&lt;div id=""t123""&gt;red font&lt;/div&gt;
</code></pre>

<p>I correctly get the desired output. But when I try to edit again the html and do some changes in the <code>style</code> tag, the tag is missing. I can only see:</p>

<pre><code>&lt;p&gt;test&lt;/p&gt;
&lt;div id=""t123""&gt;red font&lt;/div&gt;
</code></pre>

<p>How can I configure the editor to show also the <code>style</code> tag when editing?</p>

<p>Thanks</p>
","<p>There are two places where you need to disable filtering. One is the <code>Global Configuration -&gt; Text Filtering</code> and another is <code>JCE Editor Profiles -&gt; Plug-in Parameters -&gt; Media Support</code>.</p>
","426","<joomla><jce><joomla3.3>","1","1","2","2014-05-06 07:31:41","23488572","0","","","","","2014-05-06 07:03:57",""
"23487997","How to view the style tag contents in JCE Editor","<p>In my Joomla 3.3.0 installation I try to write custom css rules in my JCE editor (2.3.4.4 ). I have disabled the 'html filtering' and now this is possible.</p>

<p>So when i write something like:</p>

<pre><code>&lt;p&gt;test&lt;/p&gt;
&lt;style&gt;#t123{color:red}&lt;/style&gt;
&lt;div id=""t123""&gt;red font&lt;/div&gt;
</code></pre>

<p>I correctly get the desired output. But when I try to edit again the html and do some changes in the <code>style</code> tag, the tag is missing. I can only see:</p>

<pre><code>&lt;p&gt;test&lt;/p&gt;
&lt;div id=""t123""&gt;red font&lt;/div&gt;
</code></pre>

<p>How can I configure the editor to show also the <code>style</code> tag when editing?</p>

<p>Thanks</p>
","<p>The answer to my question is to enable the <code>Allow CSS</code> option in <code>Components &gt; JCE Editor &gt; Editor Profiles &gt; Editor Parameters &gt; Advanced</code></p>

<p>Thanks to @Apurv for giving me a hint on where to look for</p>
","426","<joomla><jce><joomla3.3>","1","0","2","2014-05-06 07:31:41","23488572","0","","","","","2014-05-06 07:03:57",""
"15224333","how to add jcemediabox popup to ajax content in joomla","<p>I am displaying articles in ajax tabs and trying to add jcemediabox popup to content in the article loaded by ajax request. As the dom is updated by ajax, and jcemediabox must be adding event onload of the page, i am not able to attach jcemediabox popup. </p>
","<p>After loading ajax content, initialised the jcemediabox popup. </p>

<p>window.jcepopup.create();</p>

<p>It works. </p>
","422","<ajax><joomla><jce>","0","1","1","2018-06-04 21:24:59","15224769","0","","","","","2013-03-05 12:54:13",""
"31986698","Generate exportable AES keys in nCipher with JCE","<p>I need to use nCipher HSM to generate AES256 keys and then export(write to file) them in external systems.</p>

<pre><code>KeyGenerator kg = KeyGenerator.getInstance(""AES"", ""nCipherKM"");
kg.init(256);
SecretKey key = kg.generateKey();
//No problem until here
byte[] raw = key.getEncoded();
</code></pre>

<p>Throws a security exception. Wont give out the key. So I used below approach. Are both keys generated the same way ? Is there a better way to accomplish what I need?</p>

<pre><code>SecureRandom random = SecureRandom.getInstance(""RNG"", ""nCipherKM"");
byte[] rand = new byte[32];
random.nextBytes(rand);
SecretKey key = new SecretKeySpec(rand, ""AES"");
byte[] raw = key.getEncoded();
</code></pre>

<p>Thanks,</p>

<p>Vedat</p>
","<p>Vedat, the nCipherKM Provider generates actual key material on the Hardware Security Module(s) it connects to.  The HSM is designed to not let you have the actual key bits: keeping those secret is its purpose in life.  </p>

<p>The second sequence will obtain random data from the HSM's random generator, which is a NIST Special Publication 800-90A compliant Deterministic Random Bit Generator seeded by hardware-based entropy.  This is the same type of random material the HSM uses internally to generate keys.  Since you don't seem to have any HSM protection requirements for the resulting keys, you should be good to go.  </p>
","414","<encryption-symmetric><jce><hsm>","1","2","1","2015-08-14 05:12:28","","0","","","","","2015-08-13 11:18:10",""
"43492397","JCE editor not working with secure urls (https)","<p>I am using Joomla 3.6.5 and JCE editor latest version (2.6.11) and JCE editor was working fine before , but after converting site URLs to secure (https) JCE editor stopped working and it is showing ""mixed content"" errors as all its js and css loading with http urls and before I had older version of JCE editor and in that version same thing happened. Also I have resolved ""mixed content"" errors in older version but some tools above the editor not displaying.</p>

<p>So I have decided to upgrade JCE editor, and upgraded now condition is same as before see here :- <a href=""http://prnt.sc/ey7f6k"" rel=""nofollow noreferrer"">http://prnt.sc/ey7f6k</a></p>

<p>Please Help me solve this JCE editor issue with https urls.</p>

<p>Thanks in advance.</p>
","<p>Changed the all required js baseURI from ""http://"" to ""https://"" from the file </p>

<p>/components/com_jce/editor/tiny_mce/tiny_mce.js</p>

<p>I hope it helps !!</p>
","408","<https><tinymce><editor><joomla3.0><jce>","0","1","1","2017-04-20 04:30:07","","0","","","","","2017-04-19 09:59:46",""
"25118536","Providing JCE policies without patching the JRE","<p>In my project I had some issues with cryptography which I fixed by <a href=""https://stackoverflow.com/a/6903779/706389"">using ""JCE Unlimited Strength Jurisdiction Policy Files""</a>. On local machine I just replaced some JARs in the <code>jre/lib/security</code> directory. However, I also need my project to build (to be precise, to run tests) on a continuous integration build server (Teamcity in my case, but I guess it's not very important), which means patching jars in the JRE directory of every build agent, which is not a good option at all.</p>

<p>Is there a way of specifying these JCE policies without patching the JRE?</p>
","<p>According to the <a href=""http://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html"" rel=""nofollow"">Java Cryptography Architecture (JCA) Reference Guide</a> under <a href=""http://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/CryptoSpec.html#ExemptApps"" rel=""nofollow"">How to Make Applications ""Exempt"" from Cryptographic Restrictions</a>, you could bundle a policy file stating exemptions with your application's JAR, but the JAR must then be signed and it is not even sure that Oracle's default crypto providers support this:</p>

<blockquote>
  <p>(NOTE: The SunJCE provider does not supply an implementation of the ExemptionMechanismSpi class.)</p>
</blockquote>

<p>Needless to say, I have not tested this way... ;) This looks way more complicated than replacing two files. I always installed the jurisdiction policy files on all my JVMs, but I use the <a href=""https://wiki.debian.org/DebianAlternatives"" rel=""nofollow"">Debian Alternatives System</a> to have those files automatically replace the ones provided with the JDK. That makes upgrades much less painful.</p>
","408","<java><security><jce><build-server>","0","1","2","2014-08-14 10:34:08","25305942","1","","-1","","2017-05-23 12:04:59","2014-08-04 12:18:43",""
"25118536","Providing JCE policies without patching the JRE","<p>In my project I had some issues with cryptography which I fixed by <a href=""https://stackoverflow.com/a/6903779/706389"">using ""JCE Unlimited Strength Jurisdiction Policy Files""</a>. On local machine I just replaced some JARs in the <code>jre/lib/security</code> directory. However, I also need my project to build (to be precise, to run tests) on a continuous integration build server (Teamcity in my case, but I guess it's not very important), which means patching jars in the JRE directory of every build agent, which is not a good option at all.</p>

<p>Is there a way of specifying these JCE policies without patching the JRE?</p>
","<p>Okay, I was actually able to bypass the policies using java reflection: <a href=""https://stackoverflow.com/questions/1179672/unlimited-strength-jce-policy-files"">How to avoid installing &quot;Unlimited Strength&quot; JCE policy files when deploying an application?</a></p>

<p>Looks like a dirty hack, but does work and doesn't require any licensing, signing and all that stuff.</p>
","408","<java><security><jce><build-server>","0","0","2","2014-08-14 10:34:08","25305942","1","","-1","","2017-05-23 12:04:59","2014-08-04 12:18:43",""
"2809549","What are the benefits of using fips for the JCE?","<p>I used the FIPS provider in the JCE, but couldn't really see any difference - I specifically looked for the maximum key sizes but didn't find any difference there.</p>

<p>What advantages does enabling FIPS actually provide?</p>
","<p>It simply means the JCE meets FIPS requirements. The main difference is that some less-secure ciphers are removed (like DES). Because most strong ciphers already meet FIPS requirements, you wouldn't be able to see differences by checking maximum key sizes.</p>

<p>It's also a market term used by IBM, who calls all versions of their JCE as FIPS JCE.</p>
","408","<java><jce><fips>","3","2","1","2010-05-11 11:25:02","2810208","0","0","","","","2010-05-11 09:42:24",""
"18992117","How to install JCE in Java 1.7 on Mac OS Mountain Lion?","<p>I downloaded the Java Cryptography Extension (JCE) for Java 1.7, but I don't find where my JDK is installed.</p>

<p>In terminal, the command ""java -version"" works fine. </p>

<p>I installed the Mountain Lion from an update, and before was Java 1.7 and Java 1.6 installed on Lion. After I updated, was necessary install Java again, and I installed just Java SE Development Kit 7u40.</p>
","<p>JDKs are usually installed here: /Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk</p>
","407","<java><macos><jce>","1","0","1","2013-11-26 04:21:54","","0","","","","","2013-09-24 21:10:33",""
"53567849","AES GCM decryption without authentication tag","<p>I have a question. In my limited experience with Cryptography.</p>

<p>how to decrypt AES-128-GCM without authentication tag.</p>

<p>I found <a href=""https://stackoverflow.com/a/49244840/4418796"">AES GCM decryption bypassing authentication in JAVA</a> 
it seems to have solved some problems. But only if iv is equal to 96 bit can worked.</p>

<p><a href=""https://github.com/ssrpanel/shadowsocksr/blob/master/shadowsocks/crypto/openssl.py#L140"" rel=""nofollow noreferrer"">shadowsocksr OpenSSL support aes-128-gcm</a>.is different from other aes-128-gcm encryption or decryption using authentication tag.</p>

<p>I write a test script and get the result.</p>

<p><strong>script:</strong></p>

<pre><code>from shadowsocks import encrypt
import binascii
ivLength = 16
key, iv = encrypt.EVP_BytesToKey(b""killer"",16,12,None)
print(""key: "",binascii.hexlify(key))
print(""iv: "",binascii.hexlify(iv))

cipher = encrypt.Encryptor(""killer"",""aes-128-gcm"",iv=iv)
hello = cipher.encrypt(bytes(""hello"",""utf-8""))

dehello = cipher.decrypt(hello)
print(""origin: "" ,binascii.hexlify(b'hello'))
print(""Ciphertext: "",binascii.hexlify(hello))
print(""Cleartext: "",binascii.hexlify(dehello))
</code></pre>

<p><strong>when ivLength is set 12:</strong></p>

<pre><code>key:  b'b36d331451a61eb2d76860e00c347396'
iv:  b'271d7f17d03ed7cd1f443274'
origin:  b'68656c6c6f'
Ciphertext:  b'e0fc2227c40bc9ea9343a1faafa4e23da750a9ad00'
Cleartext:  b'68656c6c6f'
</code></pre>

<p><strong>when ivLength is set 16 :</strong></p>

<pre><code>key:  b'b36d331451a61eb2d76860e00c347396'
iv:  b'271d7f17d03ed7cd1f44327456aebfa2'
origin:  b'68656c6c6f'
Ciphertext:  b'271d7f17d03ed7cd1f44327456aebfa215988b0365'
Cleartext:  b'68656c6c6f'
</code></pre>

<p>And I want to decryption using Java. as method <a href=""https://stackoverflow.com/a/49244840/4418796"">Maarten Bodewes</a> mentioned.
I write a Java code to decryption above result:</p>

<p><strong>environment:</strong></p>

<p>os environment: window 10</p>

<p>jdk version: JDK11</p>

<p><strong>dependence:</strong></p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;commons-codec&lt;/groupId&gt;
    &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;
    &lt;version&gt;1.11&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.google.guava&lt;/groupId&gt;
    &lt;artifactId&gt;guava&lt;/artifactId&gt;
    &lt;version&gt;27.0.1-jre&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;
    &lt;version&gt;3.8.1&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p><strong>code:</strong></p>

<pre><code>package server;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.lang3.ArrayUtils;
import org.junit.Test;

import javax.crypto.*;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;

public class StackOverflow {
    @Test
    public void AES_128_GCM_DECRYPT_TEST() throws IOException, NoSuchAlgorithmException, InvocationTargetException, NoSuchMethodException, InvalidKeyException, InvalidAlgorithmParameterException, NoSuchPaddingException, BadPaddingException, IllegalAccessException, DecoderException, ShortBufferException, IllegalBlockSizeException, ClassNotFoundException {
        String ciphertext_with_iv_12 = ""e0fc2227c40bc9ea9343a1faafa4e23da750a9ad00"";
        String ciphertext_with_iv_16 = ""a54a0301968953c0b45288f4d78c4011800f974c2d"";
        System.out.println(""--------------- descript with iv 12 ---------------"");
        AES_128_GCM_DECRYPT(ciphertext_with_iv_12, ""killer"", 16, 12);
        System.out.println(""--------------- descript with iv 16 ---------------"");
        AES_128_GCM_DECRYPT(ciphertext_with_iv_12, ""killer"", 16, 16);
    }

    public static void AES_128_GCM_DECRYPT(String ciphertext,String password,int keyLength,int ivLength) throws DecoderException, NoSuchPaddingException, NoSuchAlgorithmException, IOException, InvalidAlgorithmParameterException, InvalidKeyException, ShortBufferException, BadPaddingException, IllegalBlockSizeException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
        byte[] cipherdata = Hex.decodeHex(ciphertext);
        Cipher cipher = Cipher.getInstance(""AES/CTR/NoPadding"");
        Object[] item = EVP_BytesToKey(password, keyLength, ivLength);
        byte[] key = (byte[]) item[0];
        byte[] iv = ArrayUtils.subarray(cipherdata, 0, ivLength);
        //byte[] counter = Bytes.concat(iv, new byte[4]);
        byte[] counter = getJ0Proxy(iv, key);
        inc(counter);
        final IvParameterSpec gcmParameterSpec = new IvParameterSpec(counter);
        final SecretKeySpec keySpec = new SecretKeySpec(key, ""AES"");
        cipher.init(Cipher.DECRYPT_MODE, keySpec, gcmParameterSpec);
        byte[] data = ArrayUtils.subarray(cipherdata, 16, cipherdata.length);
        byte[] result = cipher.doFinal(data, 0, data.length);
        System.out.println(String.format(""key: %s"", Hex.encodeHexString(key)));
        System.out.println(String.format(""iv: %s"", Hex.encodeHexString(iv)));
        System.out.println(String.format(""origin: %s"", Hex.encodeHexString(""hello"".getBytes())));
        System.out.println(String.format(""Ciphertext: %s"", Hex.encodeHexString(data)));
        System.out.println(String.format(""Cleartext: %s"", Hex.encodeHexString(result)));
    }

    /**
     * if iv is not 96 bit,it need more complex approach to generate iv
     *
     * @param key
     * @return
     */
    public static final byte[] getSubKey(byte[] key) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
        Class&lt;?&gt; galoisCounterMode = Class.forName(""com.sun.crypto.provider.GaloisCounterMode"");
        Class&lt;?&gt; aesCrypt = Class.forName(""com.sun.crypto.provider.AESCrypt"");
        Constructor constructor = aesCrypt.getDeclaredConstructor();
        constructor.setAccessible(true);
        Object aesCryptInstance = constructor.newInstance();
        Method aesInstanceInit = aesCrypt.getDeclaredMethod(""init"", boolean.class, String.class, byte[].class);
        aesInstanceInit.setAccessible(true);
        aesInstanceInit.invoke(aesCryptInstance, false, ""AES"", key);

        byte[] subKey = new byte[16];
        Method aesInstanceEncryptBlock = aesCrypt.getDeclaredMethod(""encryptBlock"", byte[].class, int.class, byte[].class, int.class);
        aesInstanceEncryptBlock.setAccessible(true);
        aesInstanceEncryptBlock.invoke(aesCryptInstance, new byte[16], 0, subKey, 0);
        return subKey;
    }

    /**
     * generator iv for CTR use.
     *
     * @param iv
     * @param subkey
     * @return
     */
    public static final byte[] getJ0Proxy(byte[] iv, byte[] subkey) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        Class&lt;?&gt; galoisCounterMode = Class.forName(""com.sun.crypto.provider.GaloisCounterMode"");
        Method getJ0 = galoisCounterMode.getDeclaredMethod(""getJ0"", byte[].class, byte[].class);
        getJ0.setAccessible(true);
        return (byte[]) getJ0.invoke(null, iv, subkey);
    }

    /**
     * invok jdk com.sun.crypto.provider.GaloisCounterMode static method increment32
     *
     * @param counter iv
     */
    private static final void inc(byte[] counter) throws InvocationTargetException, IllegalAccessException, ClassNotFoundException, NoSuchMethodException {
        Class&lt;?&gt; galoisCounterMode = Class.forName(""com.sun.crypto.provider.GaloisCounterMode"");
        Method getJ0 = galoisCounterMode.getDeclaredMethod(""increment32"", byte[].class);
        getJ0.setAccessible(true);
        getJ0.invoke(null, counter);
    }

    /**
     * for generator key and iv
     *
     * @param password  password
     * @param keyLength keyLength
     * @param ivLength  ivLength
     * @return array have 2 element the index of 0 is key and index of 1 is iv.
     * @throws NoSuchAlgorithmException
     * @throws UnsupportedEncodingException
     */
    public static Object[] EVP_BytesToKey(String password, int keyLength, int ivLength) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        ArrayList&lt;byte[]&gt; m = new ArrayList();
        int i = 0;
        while (getByteArray(m) &lt; keyLength + ivLength) {
            String data = password;
            if (i &gt; 0) {
                data = new String(m.get(i - 1), ""ISO-8859-1"") + password;
            }
            MessageDigest digest = MessageDigest.getInstance(""MD5"");

            byte[] dataDigest = digest.digest(data.getBytes(""ISO-8859-1""));
            m.add(dataDigest);
            i += 1;
        }
        byte[] ms = joinByteArray(m);
        byte[] key = ArrayUtils.subarray(ms, 0, keyLength);
        byte[] iv = ArrayUtils.subarray(ms, keyLength, keyLength + ivLength);
        return new Object[]{key, iv};
    }

    public static int getByteArray(List&lt;byte[]&gt; array) {
        int length = 0;
        for (byte[] item : array) {
            length += item.length;
        }
        return length;
    }

    public static byte[] joinByteArray(List&lt;byte[]&gt; array) {
        int length = getByteArray(array);
        byte[] result = new byte[length];
        int pos = 0;
        for (byte[] item : array) {
            System.arraycopy(item, 0, result, pos, item.length);
            pos += item.length;
        }
        return result;
    }
}
</code></pre>

<p><strong>result:</strong></p>

<pre><code>--------------- descript with iv 12 ---------------
key: b36d331451a61eb2d76860e00c347396
iv: e0fc2227c40bc9ea9343a1fa
origin: 68656c6c6f
Ciphertext: a750a9ad00
Cleartext: 68656c6c6f
--------------- descript with iv 16 ---------------
key: b36d331451a61eb2d76860e00c347396
iv: e0fc2227c40bc9ea9343a1faafa4e23d
origin: 68656c6c6f
Ciphertext: a750a9ad00
Cleartext: dead0c78cf
</code></pre>

<p>When the length of iv is not 96bit, the result is wrong.</p>

<p>I hope someone can tell me what went wrong.</p>

<p>Thanks in advance. </p>
","<p>This is the expected result. If you look at the <a href=""https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf"" rel=""nofollow noreferrer"">Nist 800-38D</a>, page 15, you will see that:</p>

<pre><code>if len(IV)=96 then 
   Y0=IV||0^31||1 
else 
   Y0=GHASH(H,{},IV).
</code></pre>

<p>So, the larger IV's are not trimmed there are additional operations are recommended. In this way, you can have higher entropy for your IVs.</p>
","397","<java><encryption><jce><aes-gcm>","2","1","1","2018-12-01 09:39:51","53569512","1","","4418796","","2018-12-01 07:06:01","2018-12-01 04:48:46",""
"44450857","Using Custom JCE Security Provider Without Signing it","<p>We have our custom JCE security provider that is using our smart cards to do the crypto operations. </p>

<p>We have a problem when we try to use certain classes like <em>Cipher, KeyAgreement, KeyGenerator, Mac, or SecretKeyFactory</em>. </p>

<p>Java throws an exception:</p>

<pre><code>Exception in thread ""main"" java.security.NoSuchProviderException: JCE cannot authenticate the provider Foo
</code></pre>

<p>I read <a href=""http://docs.oracle.com/javase/6/docs/technotes/guides/security/crypto/HowToImplAProvider.html#Step6"" rel=""nofollow noreferrer"">here</a> and <a href=""http://www.oracle.com/technetwork/java/javase/tech/getcodesigningcertificate-361306.html#sendingcertificationform"" rel=""nofollow noreferrer"">here</a> that a custom JCE security provider must be signed, if you try to use it for encryption. This is because of some laws in some governments regarding cryptography.</p>

<p>I also read this post:
<a href=""https://stackoverflow.com/questions/1756801/how-to-sign-a-custom-jce-security-provider"">How to sign a custom JCE security provider</a></p>

<p>It seems that the advice is to mail Oracle some info about your company/product and send the csr so they can issue a certificate that can be used for code signing and is valid fo 5 years.</p>

<p>My question is, is there any way to get around this for testing purposes? By, for example, changing some policies or self-signing the JAR. We tried self-signing the JAR, it didn't work maybe we did something wrong.</p>

<p>Has anyone had any luck overcoming this issue without getting the certificate from Oracle?</p>

<p>At the end, we will apply for the certificate, but I read that it can take up to 10 days to get the response, and we need this for testing.</p>
","<p>Yes, what you can do is patch the JarVerifier.class file inside jce.jar. Jce.jar is part of your JRE/JDK (depends whether you have just the Runtime Environment or the Development Kit installed). This method is tedious and involved, but it’s the best way to ensure you don’t touch any other code besides the jar verification code.</p>

<p>For these steps you will need the JDK installed, as well as a hex editor.</p>

<p>On my Windows installation for example, jce.jar is located at C:\Program Files\Java\jdk1.8.0_77\jre\lib\jce.jar.</p>

<p>Once you’ve found it, open jce.jar in a zip file editor (e.g. WinZip, 7zip). Navigate to javax\crypto\ and extract JarVerifier.class to your Desktop or other desired location to work on it. <em>Also, make a backup copy of this file!!</em></p>

<p>Now here comes the detective work. Open a terminal and cd to where you extracted JarVerifier.class. Run this command: <code>javap -c JarVerifier.class</code></p>

<p>This will show you a reconstructed Java bytecode version of the code in the class file. You’ll see a method called <code>void verify() throws ... JarException ...</code>.</p>

<p>In my version of the JRE, the code for verify() begins as follows:</p>

<pre><code>aload_0
getfield #15
ifnonnull 17
new #20
</code></pre>

<p>etc...</p>

<p>The verify method works by using exceptions to tell the calling method if the given jar is not properly signed. If no exceptions are thrown, then it is assumed that everything is OK, and the JCE provider can be used. We can use this to our advantage by simply <strong>changing the first instruction of the verify() method to the op-code for</strong> <code>return</code>.</p>

<p>Pull up this webpage of Java bytecode instructions as a reference: <a href=""https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings"" rel=""nofollow noreferrer"">https://en.m.wikipedia.org/wiki/Java_bytecode_instruction_listings</a>. We want to find where exactly this sequence of instructions is inside our JarVerifier.class file, so we need to convert the bytecode printed out by <code>javap</code> earlier to hexadecimal numbers. We will then search for this string of numbers inside JarVerifier.class to find exactly where the verify() method is.</p>

<p>So.. using the Wikipedia page as reference, it goes like this:</p>

<ul>
<li>aload_0: <code>2A</code></li>
<li>getfield #15: <code>B4 00 0F</code></li>
<li>ifnonnull 17: <code>C7 &lt;2 byte branch offset&gt;</code></li>
<li>new #20: <code>BB 00 14</code></li>
</ul>

<p>It’s a little tedious to calculate the branch offset, and we don’t need it in our search.</p>

<p>Now, search for the following hex string of bytes: <code>2AB4000FC7</code>. In my version of the JRE there is only one match. Verify that <code>BB 00 14</code> is also present 2 bytes after C7, just to make sure this is really the verify() method.</p>

<p>Finally, the patch. The opcode for return is <code>B1</code>. Simply replace the 2A representing aload_0 with the value B1. In my version, this was at the offset 0x2938. Now, all verify() does is just return!</p>

<p>Save your file, exit, and run the above <code>javap</code> command on your new JarVerifier.class file to see the result of your change. You should see that the first instruction in verify() is a <code>return</code>.</p>

<p>Using your zip file editor from above, replace JarVerifier.class inside jce.jar with your modified version. Save the jar file if necessary.</p>

<p>That’s it! JCE jar verification has been disabled.</p>
","395","<java><security><jce><jca>","1","1","1","2018-06-04 19:19:06","","0","","3715100","","2018-06-01 19:21:28","2017-06-09 06:34:58",""
"39338094","Creating an external (2-steps) signature with bouncycastle and SunMSCAPI","<p>I'm trying to remove some deprecated BC code from my application, but I'm having problem switching the old CMSSignedDataGenerator.addSigner to the new API.</p>

<p>Our old code, which worked on Linux (PKCS11 provider) and Windows (SunMSCAPI) was something like this:</p>

<pre><code>CMSSignedDataGenerator gen = new CMSSignedDataGenerator();

CertStore certStore = CertStore.getInstance(""Collection"",new CollectionCertStoreParameters(Arrays.asList(certChain)));

Attribute attrHash = new Attribute(CMSAttributes.messageDigest, new DERSet( new DEROctetString(hash) ) ); 
Attribute attrcontentType = new Attribute(CMSAttributes.contentType, new DERSet( CMSObjectIdentifiers.data ) );
ASN1EncodableVector v = new ASN1EncodableVector(); 
v.add(attrHash); 
v.add(attrcontentType);

gen.addSigner(aPrivateKey, userCertificate, CMSSignedDataGenerator.DIGEST_SHA1, new AttributeTable(v), null); 
gen.addCertificatesAndCRLs(certStore); 

CMSSignedData s = gen.generate(CMSSignedDataGenerator.DATA, null, false, getProviderName() ); 

return s.getEncoded();
</code></pre>

<p>The provider name would be either ""SunMSCAPI"" or whatever we are dynamically using for PKCS#11 on Linux.</p>

<p>Both addSigner and generate methods got deprecated in BC, so now I'm doing the following:</p>

<pre><code>    CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
    Store certStore = new JcaCertStore(Arrays.asList(certChain));

    Attribute attrHash = new Attribute(CMSAttributes.messageDigest, new DERSet(new DEROctetString(hash)));
    Attribute attrcontentType = new Attribute(CMSAttributes.contentType, new DERSet(CMSObjectIdentifiers.data));
    ASN1EncodableVector v = new ASN1EncodableVector();
    v.add(attrHash);
    v.add(attrcontentType);

    ContentSigner sha1Signer = new JcaContentSignerBuilder(""SHA1withRSA"").setProvider(provider).build(aPrivateKey);
    gen.addSignerInfoGenerator(
            new JcaSignerInfoGeneratorBuilder(new JcaDigestCalculatorProviderBuilder().setProvider(provider).build())
                    .setSignedAttributeGenerator(new DefaultSignedAttributeTableGenerator(new AttributeTable(v)))
                    .build(sha1Signer, userCertificate));

    gen.addCertificates(certStore);
    CMSSignedData s = gen.generate(new CMSAbsentContent(), false);
    return s.getEncoded();
</code></pre>

<p>The problem with this new code is that it works perfectly when using ""BC"" as a provider, but when I switch to ""SunMSCAPI"" I get th following exception:</p>

<pre><code>no such algorithm: SHA-1 for provider SunMSCAPI
</code></pre>

<p>This convoluted way of signing is just because we need to sign a digest, we don't have the full content available for signing, so I have to pass the digest pre-computed to the signing method.</p>

<p>Can anyone please help me find out what could possible be wrong with the above code?</p>

<p>Thanks in advance!</p>
","","392","<java><bouncycastle><jce>","0","","0","2016-09-06 02:07:42","","2","","6797850","","2016-09-06 02:07:42","2016-09-05 21:51:14",""
"49158734","convert Bouncy Castle's AsymmetricCipherKeyPair (RSA) to java.security.KeyPair","<p>I am trying to automate generation of CA and certificates for our E2E testing. I started with Bouncy Castle and I have managed to generate CA cert and machine cert. However, now I need to convert the RSA keypair represented by BC' <code>org.bouncycastle.crypto.AsymmetricCipherKeyPair</code> to <code>java.security.KeyPair</code>. I cannot seem to find a way to do this.</p>
","<p>There's probably more than one way to do it, but here is one example:</p>

<pre><code>import org.bouncycastle.crypto.AsymmetricCipherKeyPair;
import org.bouncycastle.crypto.util.PrivateKeyInfoFactory;
import org.bouncycastle.crypto.util.SubjectPublicKeyInfoFactory;

import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;


private static KeyPair convertBcToJceKeyPair(AsymmetricCipherKeyPair bcKeyPair) throws Exception {
    byte[] pkcs8Encoded = PrivateKeyInfoFactory.createPrivateKeyInfo(bcKeyPair.getPrivate()).getEncoded();
    PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(pkcs8Encoded);
    byte[] spkiEncoded = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(bcKeyPair.getPublic()).getEncoded();
    X509EncodedKeySpec spkiKeySpec = new X509EncodedKeySpec(spkiEncoded);
    KeyFactory keyFac = KeyFactory.getInstance(""RSA"");
    return new KeyPair(keyFac.generatePublic(spkiKeySpec), keyFac.generatePrivate(pkcs8KeySpec));
}
</code></pre>
","391","<java><encryption><bouncycastle><jce>","1","2","1","2018-03-07 23:49:24","49163162","0","1","","","","2018-03-07 18:17:13",""
"24545574","java.security.NoSuchProviderException : IBMJCECCA","<p>This error occur while running the  following program</p>

<pre><code>import java.security.SecureRandom;
import java.util.Random;

public class IBMSecureRandom1 
{
   public static void main(String[] args) {

   try {
   // get a real random generator
    SecureRandom reallyRandom = SecureRandom.getInstance(""IBMSecureRandom"",""IBMJCECCA"");
    System.out.print(""Some really random numbers: "");
        for (int i = 0; i &lt; 3; i++) {
            System.out.print(reallyRandom.nextInt() + "" "");
        }
    System.out.println();
    // make a pseudo random generator seeded by the real random generator
    Random pseudoRandom = new Random(reallyRandom.nextLong());
    System.out.print(""Some pseudo random numbers: "");

    for (int i = 0; i &lt; 3; i++) {
        System.out.print(pseudoRandom.nextInt() + "" "");
    }   
    System.out.println();
    }
    catch (Exception e) {
        System.err.println(""Something went wrong ..."");
        e.printStackTrace();
    }
  }
}
</code></pre>

<p>I dont know whether i have to add any jar file or something else </p>
","<p>From : <a href=""http://www-03.ibm.com/systems/z/os/zos/tools/java/faq/javasecurityfaq.html"" rel=""nofollow"">http://www-03.ibm.com/systems/z/os/zos/tools/java/faq/javasecurityfaq.html</a></p>

<p>You will see this error when an application issues a <code>Service.getInstance(algorithm,provider)</code>
and the specified provider is not installed in the JVM. The installation instructions provided in <a href=""http://www-03.ibm.com/systems/z/os/zos/tools/java/faq/javasecurityfaq.html#cca_02"" rel=""nofollow"">How do I install the IBMJCECCA provider?</a> can be used to install any provider as long as you know the package and class name.</p>
","390","<java><jce>","-1","0","1","2014-07-03 06:29:51","","6","2","1218618","","2014-07-03 06:29:51","2014-07-03 05:26:19",""
"44829426","Can I create a JCE ECPublicKey from a Q value from an openssh public key and ECParameterSpec","<p>I'm reading openssh format elliptic curve public keys (<a href=""https://tools.ietf.org/html/rfc5656#section-3.1"" rel=""nofollow noreferrer"">RFC 5656, section 3.1</a>) and would like to get from a BigInteger Q value to an <code>ECPublicKey</code> instance using JCE (rather than say BouncyCastle). I want to do this to verify <a href=""https://jwt.io"" rel=""nofollow noreferrer"">JWT</a> signatures.</p>

<p>e.g. <a href=""https://api.github.com/users/davidcarboni/keys"" rel=""nofollow noreferrer"">https://api.github.com/users/davidcarboni/keys</a>: </p>

<pre><code>ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBK8hPtB72/sfYgNw1WTska2DNOJFx+QhUxuV6OLINSD2ty+6gxcM8yZrvMqWdMePGRb2cGh8L/0bGOk+64IQ/pM=
</code></pre>

<p>It looks like I can use <code>ECPublicKeySpec</code>. This takes two parameters. An <code>ECPoint</code> and an <code>ECParameterSpec</code>. I'm able to get the parameter spec using the following JCE code (and the openssh identifier from the key data, say ""nistp256""):</p>

<pre><code>ECParameterSpec getECParameterSpec(String identifier) {
    try {
        AlgorithmParameters parameters = AlgorithmParameters.getInstance(""EC"");
        String name = identifier.replace(""nist"", ""sec"") + ""r1"";
        parameters.init(new ECGenParameterSpec(name));
        return parameters.getParameterSpec(ECParameterSpec.class);
    } catch (InvalidParameterSpecException | NoSuchAlgorithmException e) {
        throw new IllegalArgumentException(""Unable to get parameter spec for identifier "" + identifier, e);
    }
}
</code></pre>

<p>I've successfully parsed the Q value from the key data. RFC 5656 tells me that ""Q is the public key encoded from an elliptic curve point into an octet string"") however the constructor of JCE's <code>ECPoint</code> class takes two parameters, X and Y.</p>

<p>Can I get to X and Y from Q, or do I need to take a different approach? </p>

<p>(NB I quite rightly don't have access to the private key)</p>
","<p>The base64 portion of your input has the equivalent hex of</p>

<pre><code>00 00 00 13 65 63 64 73 61 2D 73 68 61 32 2D 6E 
69 73 74 70 32 35 36 00 00 00 08 6E 69 73 74 70 
32 35 36 00 00 00 41 04 AF 21 3E D0 7B DB FB 1F 
62 03 70 D5 64 EC 91 AD 83 34 E2 45 C7 E4 21 53 
1B 95 E8 E2 C8 35 20 F6 B7 2F BA 83 17 0C F3 26 
6B BC CA 96 74 C7 8F 19 16 F6 70 68 7C 2F FD 1B 
18 E9 3E EB 82 10 FE 93 
</code></pre>

<p>65 63 64 jumped out to me as ""ecd"" (sure enough, ""ecdsa-sha2-nistp256"").</p>

<p>So the blob looks to be</p>

<ul>
<li>Big Endian length of a string/payload (19)</li>
<li>The string ""ecdsa-sha2-nistp256""</li>
<li>Big Endian length of a string/payload (8)</li>
<li>The string ""nistp256""</li>
<li>Big Endian length of a payload (0x41 == 65)</li>
<li>The encoded ECPoint Q (<code>04 AF 21 ... 10 FE 93</code>)</li>
</ul>

<p>The encoded ECPoint starts with <code>04</code> indicating it is an uncompressed point (the most common encoding).  The <code>04</code> encoding rules (from <a href=""http://www.secg.org/sec1-v2.pdf"" rel=""nofollow noreferrer"">http://www.secg.org/sec1-v2.pdf</a>, 2.3.5, step 3) say that the remaining payload is X and Y, each left-padded with zeros to the encoding size of the curve field.</p>

<p>So your ECPoint looks like</p>

<pre><code>04
Qx:
AF 21 3E D0 7B DB FB 1F 62 03 70 D5 64 EC 91 AD
83 34 E2 45 C7 E4 21 53 1B 95 E8 E2 C8 35 20 F6
Qy:
B7 2F BA 83 17 0C F3 26 6B BC CA 96 74 C7 8F 19
16 F6 70 68 7C 2F FD 1B 18 E9 3E EB 82 10 FE 93
</code></pre>

<p>In C# you'd need to a) reverse the bytes of each of Qx and Qy (because the .NET BigInteger expects Little Endian, and these are Big Endian) and b) put a padding 0x00 byte as more significant than the 0xAF and 0xB7 bytes, since they have their high bits set (and would be interpreted as negative numbers).  Don't know if Java has either of those quirks.</p>
","384","<java><openssh><jce><elliptic-curve><ecdsa>","0","0","1","2017-06-30 14:57:18","44849385","0","","","","","2017-06-29 15:32:33",""
"29840523","WAS7 with Axis getting ClassCastException: IBM Crypto's TDCNP incompatible with javax.crypto.CipherSpi","<p>I <a href=""http://marc.info/?l=wss4j-dev&amp;m=118426144803740&amp;w=2"" rel=""nofollow noreferrer"">read</a> <a href=""https://stackoverflow.com/questions/12914814"">that</a> IBM's cryptography modules are incompatible with Sun modules, but I don't know how to force IBM WebSphere (WAS7) to use Sun modules.</p>

<pre><code>java.lang.ClassCastException: com.ibm.crypto.provider.TDCNP incompatible with javax.crypto.CipherSpi
    at javax.crypto.Cipher.getInstance(Unknown Source)
    at javax.crypto.Cipher.getInstance(Unknown Source)
</code></pre>

<p>I have a JAR file called <code>iaik_jce_full.jar</code> which should supposedly work (it works elsewhere but not in WAS).</p>

<blockquote>
  <p>I tried to work around this by adding the Sun libraries to my project,
  but it seems WebSphere loads its own java classes before the
  application's, even if the class loader <code>PARENT_LAST</code> setting is used.</p>
</blockquote>

<p>This is from the first link. I have tried the same and I am using the <em>""parent last""</em> setting already.</p>

<p>The Websphere installation comes with a <code>ibmjceprovider.jar</code> file which contains the offending class <code>TDCNP</code>.</p>

<p>How do I fix this problem?</p>
","","383","<java><classcastexception><jce><ibm-was><iaik-jce>","0","","0","2015-06-03 09:04:24","","8","","-1","","2017-05-23 12:21:56","2015-04-24 06:47:02",""
"11371541","Does Clojure (or JCE, or JVM, or...?) introduce parallelism automatically?","<p>I am running some CPU-intensive Clojure code from within Intellij Idea (I don't think that's important - it seems to just spawn a process).  According to both htop and top, it is using all 4 cores (well, 2 + hyperthreading) on my laptop.  This is despite me not having any explicit parallelism in the code.</p>

<p>A little more detail: top shows a single process with ~380% CPU use, while htop shows a ""parent"" process and then 4 ""children"", each with 1/4 the time and ~100% CPU.</p>

<p>Is this normal?  Or does it mean I have got something very wrong somewhere?  The code involves many lazy sequences, but at its core modifies a mutable data structure (a mutable - not a Clojure data structure - hash that accumulates results).  <strong>I am not using any explicit parallelism.</strong></p>

<p>A significant amount of time is likely (I haven't profiled) spent in JCA/JCE (crypto lib) - I am using multiple AES ciphers in CTR mode, each as a stream of secure random bytes (<a href=""https://github.com/andrewcooke/particl/blob/master/src/cl/parti/random.clj"" rel=""nofollow"">code here</a>), implemented as lazy seqs.  Perhaps that is parallelized?</p>

<p>More random ideas:  Could this be related to IO?  I'm running on an encrypted SSD and this program is processing data from disk, so does a lot of reading.  But htop shows system time as red, and these are green.</p>

<p>Sorry for such a vague question.  I can post more info if required.  This is Clojure 1.4 on 64bit Linux (JDK 1.7.0_05).  The code being executed is <a href=""https://github.com/andrewcooke/particl/blob/master/test/cl/parti/paper.clj"" rel=""nofollow"">here</a> but it's pretty messy (more apologies) and spread across various files (most CPU time is spent in <code>nearest-in-dump</code> in the code there).  Note - please don't waste time trying to run code to reproduce, as it expects a pre-existing data-dump to be on disk (which isn't in git).</p>

<p><strong>debugger</strong> Running in the debugger (thanks, A-M) shows four threads (if I understand the debugger correctly), but only one is executing the program. They are labelled finalizer, main (the program), reference handler, and signal dispatcher. Finalizer + ref handler are in wait state; signal dispatcher has no frames available.  I tentatively think this means the parallelism is at a lower level, perhaps in the crypto implementation?</p>

<p><strong>Aha</strong> I think it's parallel GC (Java now has a concurrent collector).  At the start, CPU use jumps way up when the actual process pauses (it prints out a regular tick).  And since it's churning through lots of data it's generating a lot of short-lived objects (confirmed by using -XX:+UseSerialGC which reduces CPU use to 100%)</p>
","<p>OK, I feel a bit dumb posting this as it now looks pretty obvious, but it seems to be parallel GC.  I am processing a <em>lot</em> of data (sucking it in from an SSD) and generating lots of short-lived objects.  And it appears that the JVM has parallel GC.  See <a href=""http://blog.ragozin.info/2011/12/garbage-collection-in-hotspot-jvm.html"" rel=""nofollow noreferrer"">http://blog.ragozin.info/2011/12/garbage-collection-in-hotspot-jvm.html</a></p>

<p>It may also be a sign of a problem - <a href=""https://stackoverflow.com/questions/8851484/what-is-going-on-with-java-gc-permgen-space-is-filling-up"">What is going on with java GC? PermGen space is filling up?</a> - which I will investigate tomorrow (I didn't mention it - although in retrospect I should have - but this is borderline running out of memory).</p>

<p><strong>Update</strong>: Running with -XX:+UseSerialGC reduces the total CPU use to 100% (ie 1 core).  But I didn't really mean that the two explanations above were exclusive, only that with better configuration and/or code I could reduce the amount of GC.</p>
","371","<clojure><parallel-processing><jvm><jce>","5","4","1","2012-07-07 14:22:37","11371829","4","","181772","","2012-07-07 14:22:37","2012-07-07 01:24:57",""
"3390440","Jce editor groups- problems with multi permission","<p>I have Joomla site with JCE editor. I use the JCE groups to create permissions for different users.</p>

<p>I have created few groups and every group is permitted to control one media directory.</p>

<p>I have combined a specific user to two different groups assuming that this user will have the ability to access two different media directories.</p>

<p>But the user can access only one directory and the first one I have gave him.</p>

<p>Can anybody help me to fix this problem,</p>

<p>and what I should do in order to give a specific user access to different directories ?</p>

<p>Thanks!!</p>
","","371","<permissions><joomla><media><jce>","1","","0","2015-10-12 13:47:30","","2","","74314","","2010-08-05 08:09:49","2010-08-02 18:00:15",""
"9331867","programmatically discover java unlimited encryption","<p>I have a Java app that requires JCE Unlimited Strength policy files to be installed in order to generate certificates.  However, currently, the system fails silently if the files are not installed, rather than throwing an exception or something.</p>

<p>Is there a programmatic way to check for these files from within the app?  thanks.</p>
","<p>Probably not the cleanest way:</p>

<p>If it is not there your application should throw an Exception, so you could try a small encryption test that is supposed to work and catch that exception.
That's what I do with Bounty Castle.</p>

<p>I suppose you could also check the installed libraries (it looks like the Manisfest within the JAR files contains the strength).</p>
","365","<java><encryption><jce>","2","2","2","2012-02-21 16:49:37","9381566","2","1","","","","2012-02-17 16:24:34",""
"9331867","programmatically discover java unlimited encryption","<p>I have a Java app that requires JCE Unlimited Strength policy files to be installed in order to generate certificates.  However, currently, the system fails silently if the files are not installed, rather than throwing an exception or something.</p>

<p>Is there a programmatic way to check for these files from within the app?  thanks.</p>
","<p>Turns out, as GregS points out above, that the program was not failing silently, but swallowing the exception.  The call to <code>KeyStore.store()</code> was throwing an <code>IOException</code> that I was catching with a generic <code>catch (Exception e)</code> farther below.  Once catching the <code>IOException</code> separately, the program now works properly.</p>
","365","<java><encryption><jce>","2","1","2","2012-02-21 16:49:37","9381566","2","1","","","","2012-02-17 16:24:34",""
"31052370","Provider-independent crypto in Java?","<p>I'm trying to write a program in Java that will digitally sign database entries prior to insertion. I would like for the program to be algorithm-independent - ideally, the user would specify the JCE provider and algorithm as arguments at runtime.</p>

<p>Is there a way to do this? I've been testing with the BouncyCastle provider, and the code runs fine when I dynamically register it:</p>

<pre><code>Security.addProvider(new BouncyCastleProvider());
</code></pre>

<p>However, when I try to statically register the provider by adding the following lines to the end of my security/java.policy file, I get the error: <code>java.security.NoSuchProviderException: no such provider: BC</code> when I try to get an instance of a Security object using the provider.</p>

<pre><code>security.provider.1=sun.security.provider.Sun
security.provider.2=org.bouncycastle.jce.provider.BouncyCastleProvider
</code></pre>

<p>Specifically, I added those lines to <code>/etc/java-7-openjdk/security/java.policy</code> (which is linked to <code>$JAVA_HOME/jre/lib/security/java.policy</code>). This is on Ubuntu 12.04. I also tried just adding the BouncyCastleProvider as the first entry and got the same error.</p>

<p>Am I configuring the static registration wrong or is what I am attempting impossible?</p>
","<p>I think you are adding the static registration into the wrong file.
Use <code>security.policy</code> instead of <code>java.policy</code> within the same folder.</p>

<p>See: <a href=""https://www.bouncycastle.org/wiki/display/JA1/Provider+Installation"" rel=""nofollow"">https://www.bouncycastle.org/wiki/display/JA1/Provider+Installation</a></p>
","364","<java><bouncycastle><jce>","2","3","1","2015-06-25 14:01:04","31052593","0","","","","","2015-06-25 13:52:45",""
"34677522","Bluemix - Java Application - How to patch for Unlimited JCE Strength?","<p>My application is a pure Java package that integrates an embedded web container and it handles an Oauth 2.0 authentication flow. </p>

<p>Running a trace I've isolated an SSL issue by use of the JAVA_OPTS=""-Djavax.net.debug=ssl"" configures in the environment variable and repeated the application ""push"" to activate the trace. It displays an issue regarding unrestricted JCE strength. See the messages:  </p>

<pre><code>Error log: javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated
Trace log: handling exception: javax.net.ssl.SSLKeyException: RSA premaster secret error
</code></pre>

<p>This seems to be an incompatibility between the calling node (IdP) and the OpenJDK Java 8. </p>

<p>Is it possible to add a patch to the Java build-pack in order to activate the Unlimited JCE strength? Is this patch supported by a cf cli command layer, or Bluemix dashboard console setup, or does it require a packaged upload of an new image containing the updated Java security directories? What is the structure of the patch (for example by Maven package). This is my current push command:  </p>

<pre><code>cf push redoauth2 -p ./target/red-oauth-1.0-SNAPSHOT-jar-with-dependencies.jar -m 200M -t 180
</code></pre>
","<p>Found a solution by use of a differentiated Java build-pack which already contains a patch for the unlimited JCE settings. Here is the cf push command adding a -b argument, which fixed the situation. </p>

<pre><code>cf push redoauth2 -p ./target/red-oauth-1.0-SNAPSHOT-jar-with-dependencies.jar -m 200M -t 180 -b https://github.com/cloudfoundry/java-buildpack
</code></pre>
","363","<java><ssl><ibm-cloud><jce>","0","2","2","2018-03-17 18:32:26","34679954","0","","","","","2016-01-08 12:47:38",""
"34677522","Bluemix - Java Application - How to patch for Unlimited JCE Strength?","<p>My application is a pure Java package that integrates an embedded web container and it handles an Oauth 2.0 authentication flow. </p>

<p>Running a trace I've isolated an SSL issue by use of the JAVA_OPTS=""-Djavax.net.debug=ssl"" configures in the environment variable and repeated the application ""push"" to activate the trace. It displays an issue regarding unrestricted JCE strength. See the messages:  </p>

<pre><code>Error log: javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated
Trace log: handling exception: javax.net.ssl.SSLKeyException: RSA premaster secret error
</code></pre>

<p>This seems to be an incompatibility between the calling node (IdP) and the OpenJDK Java 8. </p>

<p>Is it possible to add a patch to the Java build-pack in order to activate the Unlimited JCE strength? Is this patch supported by a cf cli command layer, or Bluemix dashboard console setup, or does it require a packaged upload of an new image containing the updated Java security directories? What is the structure of the patch (for example by Maven package). This is my current push command:  </p>

<pre><code>cf push redoauth2 -p ./target/red-oauth-1.0-SNAPSHOT-jar-with-dependencies.jar -m 200M -t 180
</code></pre>
","<p>Bluemix supports overlaying the JRE if you push the server directory.</p>

<p>Assuming you are pushing a directory called defaultServer, create the following directory:</p>

<pre><code>defaultServer/resources/.java-overlay/.java/jre/lib/security
</code></pre>

<p>Download the Java Cryptography Extension (JCE) unlimited strength policy JAR files from IBM and place them in the created overlay directory.</p>

<p>Push the directory using:</p>

<pre><code>$ cf push &lt;yourappname&gt; -p defaultServer
</code></pre>

<p>These JAR files will overlay the default policy JARS in the Java runtime.</p>

<p><strong>UPDATE</strong></p>

<p>As of August 14, 2017, IBM Cloud (formerly BlueMix) Liberty buildpack now includes Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files.</p>

<p><a href=""https://console.bluemix.net/docs/runtimes/liberty/updates.html#latest_updates"" rel=""nofollow noreferrer"">https://console.bluemix.net/docs/runtimes/liberty/updates.html#latest_updates</a></p>
","363","<java><ssl><ibm-cloud><jce>","0","0","2","2018-03-17 18:32:26","34679954","0","","","","","2016-01-08 12:47:38",""
"49411795","JCE - how to find the active Cryptographic Service Provider(s)","<p>As I see the <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html"" rel=""nofollow noreferrer"">document</a>, there are multiple providers for JCE. How can I find out the provider(s) that are available by default?</p>
","<p>Call <a href=""https://docs.oracle.com/javase/8/docs/api/java/security/Security.html#getProviders--"" rel=""nofollow noreferrer""><code>Security.getProviders()</code></a>, e.g.</p>

<pre><code>for (Provider provider : Security.getProviders())
    System.out.printf(""%-11s %s%n"", provider.getName(), provider.getInfo());
</code></pre>

<p>Output on my Oracle Java 9.0.1 on Windows:</p>

<pre class=""lang-none prettyprint-override""><code>SUN         SUN (DSA key/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509 certificates; PKCS12, JKS &amp; DKS keystores; PKIX CertPathValidator; PKIX CertPathBuilder; LDAP, Collection CertStores, JavaPolicy Policy; JavaLoginConfig Configuration)
SunRsaSign  Sun RSA signature provider
SunEC       Sun Elliptic Curve provider (EC, ECDSA, ECDH)
SunJSSE     Sun JSSE provider(PKCS12, SunX509/PKIX key/trust factories, SSLv3/TLSv1/TLSv1.1/TLSv1.2/DTLSv1.0/DTLSv1.2)
SunJCE      SunJCE Provider (implements RSA, DES, Triple DES, AES, Blowfish, ARCFOUR, RC2, PBE, Diffie-Hellman, HMAC)
SunJGSS     Sun (Kerberos v5, SPNEGO)
SunSASL     Sun SASL provider(implements client mechanisms for: DIGEST-MD5, EXTERNAL, PLAIN, CRAM-MD5, NTLM; server mechanisms for: DIGEST-MD5, CRAM-MD5, NTLM)
XMLDSig     XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)
SunPCSC     Sun PC/SC provider
JdkLDAP     JdkLDAP Provider (implements LDAP CertStore)
JdkSASL     JDK SASL provider(implements client and server mechanisms for GSSAPI)
SunMSCAPI   Sun's Microsoft Crypto API provider
SunPKCS11   Unconfigured and unusable PKCS11 provider
</code></pre>

<p>If you want to see the services each provider provides, try this:</p>

<pre><code>for (Provider provider : Security.getProviders()) {
    System.out.printf(""%-11s %s%n"", provider.getName(), provider.getInfo());
    for (Service service : provider.getServices())
        System.out.printf(""  %s: %s%n"", service.getType(), service.getAlgorithm());
}
</code></pre>

<p><em>Output</em></p>

<pre class=""lang-none prettyprint-override""><code>SUN         SUN (DSA key/parameter generation; DSA signing; SHA-1, MD5 digests; SecureRandom; X.509 certificates; PKCS12, JKS &amp; DKS keystores; PKIX CertPathValidator; PKIX CertPathBuilder; LDAP, Collection CertStores, JavaPolicy Policy; JavaLoginConfig Configuration)
  SecureRandom: DRBG
  SecureRandom: SHA1PRNG
  Signature: SHA1withDSA
  Signature: NONEwithDSA
  Signature: SHA224withDSA
  Signature: SHA256withDSA
  Signature: SHA1withDSAinP1363Format
  Signature: NONEwithDSAinP1363Format
  Signature: SHA224withDSAinP1363Format
  Signature: SHA256withDSAinP1363Format
  KeyPairGenerator: DSA
  MessageDigest: MD2
  MessageDigest: MD5
  MessageDigest: SHA
  MessageDigest: SHA-224
  MessageDigest: SHA-256
  MessageDigest: SHA-384
  MessageDigest: SHA-512
  MessageDigest: SHA-512/224
  MessageDigest: SHA-512/256
  MessageDigest: SHA3-224
  MessageDigest: SHA3-256
  MessageDigest: SHA3-384
  MessageDigest: SHA3-512
  AlgorithmParameterGenerator: DSA
  AlgorithmParameters: DSA
  KeyFactory: DSA
  CertificateFactory: X.509
  KeyStore: PKCS12
  KeyStore: JKS
  KeyStore: CaseExactJKS
  KeyStore: DKS
  Policy: JavaPolicy
  Configuration: JavaLoginConfig
  CertPathBuilder: PKIX
  CertPathValidator: PKIX
  CertStore: Collection
  CertStore: com.sun.security.IndexedCollection
SunRsaSign  Sun RSA signature provider
  KeyFactory: RSA
  KeyPairGenerator: RSA
  Signature: MD2withRSA
  Signature: MD5withRSA
  Signature: SHA1withRSA
  Signature: SHA224withRSA
  Signature: SHA256withRSA
  Signature: SHA384withRSA
  Signature: SHA512withRSA
SunEC       Sun Elliptic Curve provider (EC, ECDSA, ECDH)
  KeyFactory: EC
  AlgorithmParameters: EC
  Signature: NONEwithECDSA
  Signature: SHA1withECDSA
  Signature: SHA224withECDSA
  Signature: SHA256withECDSA
  Signature: SHA384withECDSA
  Signature: SHA512withECDSA
  Signature: NONEwithECDSAinP1363Format
  Signature: SHA1withECDSAinP1363Format
  Signature: SHA224withECDSAinP1363Format
  Signature: SHA256withECDSAinP1363Format
  Signature: SHA384withECDSAinP1363Format
  Signature: SHA512withECDSAinP1363Format
  KeyPairGenerator: EC
  KeyAgreement: ECDH
SunJSSE     Sun JSSE provider(PKCS12, SunX509/PKIX key/trust factories, SSLv3/TLSv1/TLSv1.1/TLSv1.2/DTLSv1.0/DTLSv1.2)
  KeyFactory: RSA
  KeyPairGenerator: RSA
  Signature: MD2withRSA
  Signature: MD5withRSA
  Signature: SHA1withRSA
  Signature: MD5andSHA1withRSA
  KeyManagerFactory: SunX509
  KeyManagerFactory: NewSunX509
  TrustManagerFactory: SunX509
  TrustManagerFactory: PKIX
  SSLContext: TLSv1
  SSLContext: TLSv1.1
  SSLContext: TLSv1.2
  SSLContext: TLS
  SSLContext: DTLSv1.0
  SSLContext: DTLSv1.2
  SSLContext: DTLS
  SSLContext: Default
  KeyStore: PKCS12
SunJCE      SunJCE Provider (implements RSA, DES, Triple DES, AES, Blowfish, ARCFOUR, RC2, PBE, Diffie-Hellman, HMAC)
  Cipher: RSA
  Cipher: DES
  Cipher: DESede
  Cipher: DESedeWrap
  Cipher: PBEWithMD5AndDES
  Cipher: PBEWithMD5AndTripleDES
  Cipher: PBEWithSHA1AndDESede
  Cipher: PBEWithSHA1AndRC2_40
  Cipher: PBEWithSHA1AndRC2_128
  Cipher: PBEWithSHA1AndRC4_40
  Cipher: PBEWithSHA1AndRC4_128
  Cipher: PBEWithHmacSHA1AndAES_128
  Cipher: PBEWithHmacSHA224AndAES_128
  Cipher: PBEWithHmacSHA256AndAES_128
  Cipher: PBEWithHmacSHA384AndAES_128
  Cipher: PBEWithHmacSHA512AndAES_128
  Cipher: PBEWithHmacSHA1AndAES_256
  Cipher: PBEWithHmacSHA224AndAES_256
  Cipher: PBEWithHmacSHA256AndAES_256
  Cipher: PBEWithHmacSHA384AndAES_256
  Cipher: PBEWithHmacSHA512AndAES_256
  Cipher: Blowfish
  Cipher: AES
  Cipher: AES_128/ECB/NoPadding
  Cipher: AES_128/CBC/NoPadding
  Cipher: AES_128/OFB/NoPadding
  Cipher: AES_128/CFB/NoPadding
  Cipher: AES_128/GCM/NoPadding
  Cipher: AES_192/ECB/NoPadding
  Cipher: AES_192/CBC/NoPadding
  Cipher: AES_192/OFB/NoPadding
  Cipher: AES_192/CFB/NoPadding
  Cipher: AES_192/GCM/NoPadding
  Cipher: AES_256/ECB/NoPadding
  Cipher: AES_256/CBC/NoPadding
  Cipher: AES_256/OFB/NoPadding
  Cipher: AES_256/CFB/NoPadding
  Cipher: AES_256/GCM/NoPadding
  Cipher: AESWrap
  Cipher: AESWrap_128
  Cipher: AESWrap_192
  Cipher: AESWrap_256
  Cipher: RC2
  Cipher: ARCFOUR
  KeyGenerator: DES
  KeyGenerator: DESede
  KeyGenerator: Blowfish
  KeyGenerator: AES
  KeyGenerator: RC2
  KeyGenerator: ARCFOUR
  KeyGenerator: HmacMD5
  KeyGenerator: HmacSHA1
  KeyGenerator: HmacSHA224
  KeyGenerator: HmacSHA256
  KeyGenerator: HmacSHA384
  KeyGenerator: HmacSHA512
  KeyPairGenerator: DiffieHellman
  AlgorithmParameterGenerator: DiffieHellman
  KeyAgreement: DiffieHellman
  AlgorithmParameters: DiffieHellman
  AlgorithmParameters: DES
  AlgorithmParameters: DESede
  AlgorithmParameters: PBE
  AlgorithmParameters: PBEWithMD5AndDES
  AlgorithmParameters: PBEWithMD5AndTripleDES
  AlgorithmParameters: PBEWithSHA1AndDESede
  AlgorithmParameters: PBEWithSHA1AndRC2_40
  AlgorithmParameters: PBEWithSHA1AndRC2_128
  AlgorithmParameters: PBEWithSHA1AndRC4_40
  AlgorithmParameters: PBEWithSHA1AndRC4_128
  AlgorithmParameters: PBES2
  AlgorithmParameters: PBEWithHmacSHA1AndAES_128
  AlgorithmParameters: PBEWithHmacSHA224AndAES_128
  AlgorithmParameters: PBEWithHmacSHA256AndAES_128
  AlgorithmParameters: PBEWithHmacSHA384AndAES_128
  AlgorithmParameters: PBEWithHmacSHA512AndAES_128
  AlgorithmParameters: PBEWithHmacSHA1AndAES_256
  AlgorithmParameters: PBEWithHmacSHA224AndAES_256
  AlgorithmParameters: PBEWithHmacSHA256AndAES_256
  AlgorithmParameters: PBEWithHmacSHA384AndAES_256
  AlgorithmParameters: PBEWithHmacSHA512AndAES_256
  AlgorithmParameters: Blowfish
  AlgorithmParameters: AES
  AlgorithmParameters: GCM
  AlgorithmParameters: RC2
  AlgorithmParameters: OAEP
  KeyFactory: DiffieHellman
  SecretKeyFactory: DES
  SecretKeyFactory: DESede
  SecretKeyFactory: PBEWithMD5AndDES
  SecretKeyFactory: PBEWithMD5AndTripleDES
  SecretKeyFactory: PBEWithSHA1AndDESede
  SecretKeyFactory: PBEWithSHA1AndRC2_40
  SecretKeyFactory: PBEWithSHA1AndRC2_128
  SecretKeyFactory: PBEWithSHA1AndRC4_40
  SecretKeyFactory: PBEWithSHA1AndRC4_128
  SecretKeyFactory: PBEWithHmacSHA1AndAES_128
  SecretKeyFactory: PBEWithHmacSHA224AndAES_128
  SecretKeyFactory: PBEWithHmacSHA256AndAES_128
  SecretKeyFactory: PBEWithHmacSHA384AndAES_128
  SecretKeyFactory: PBEWithHmacSHA512AndAES_128
  SecretKeyFactory: PBEWithHmacSHA1AndAES_256
  SecretKeyFactory: PBEWithHmacSHA224AndAES_256
  SecretKeyFactory: PBEWithHmacSHA256AndAES_256
  SecretKeyFactory: PBEWithHmacSHA384AndAES_256
  SecretKeyFactory: PBEWithHmacSHA512AndAES_256
  SecretKeyFactory: PBKDF2WithHmacSHA1
  SecretKeyFactory: PBKDF2WithHmacSHA224
  SecretKeyFactory: PBKDF2WithHmacSHA256
  SecretKeyFactory: PBKDF2WithHmacSHA384
  SecretKeyFactory: PBKDF2WithHmacSHA512
  Mac: HmacMD5
  Mac: HmacSHA1
  Mac: HmacSHA224
  Mac: HmacSHA256
  Mac: HmacSHA384
  Mac: HmacSHA512
  Mac: HmacSHA512/224
  Mac: HmacSHA512/256
  Mac: HmacPBESHA1
  Mac: PBEWithHmacSHA1
  Mac: PBEWithHmacSHA224
  Mac: PBEWithHmacSHA256
  Mac: PBEWithHmacSHA384
  Mac: PBEWithHmacSHA512
  Mac: SslMacMD5
  Mac: SslMacSHA1
  KeyStore: JCEKS
  KeyGenerator: SunTlsPrf
  KeyGenerator: SunTls12Prf
  KeyGenerator: SunTlsMasterSecret
  KeyGenerator: SunTlsKeyMaterial
  KeyGenerator: SunTlsRsaPremasterSecret
SunJGSS     Sun (Kerberos v5, SPNEGO)
  GssApiMechanism: 1.2.840.113554.1.2.2
  GssApiMechanism: 1.3.6.1.5.5.2
SunSASL     Sun SASL provider(implements client mechanisms for: DIGEST-MD5, EXTERNAL, PLAIN, CRAM-MD5, NTLM; server mechanisms for: DIGEST-MD5, CRAM-MD5, NTLM)
  SaslClientFactory: DIGEST-MD5
  SaslClientFactory: NTLM
  SaslClientFactory: EXTERNAL
  SaslClientFactory: PLAIN
  SaslClientFactory: CRAM-MD5
  SaslServerFactory: CRAM-MD5
  SaslServerFactory: DIGEST-MD5
  SaslServerFactory: NTLM
XMLDSig     XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)
  XMLSignatureFactory: DOM
  KeyInfoFactory: DOM
  TransformService: http://www.w3.org/TR/2001/REC-xml-c14n-20010315
  TransformService: http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments
  TransformService: http://www.w3.org/2006/12/xml-c14n11
  TransformService: http://www.w3.org/2006/12/xml-c14n11#WithComments
  TransformService: http://www.w3.org/2001/10/xml-exc-c14n#
  TransformService: http://www.w3.org/2001/10/xml-exc-c14n#WithComments
  TransformService: http://www.w3.org/2000/09/xmldsig#base64
  TransformService: http://www.w3.org/2000/09/xmldsig#enveloped-signature
  TransformService: http://www.w3.org/2002/06/xmldsig-filter2
  TransformService: http://www.w3.org/TR/1999/REC-xpath-19991116
  TransformService: http://www.w3.org/TR/1999/REC-xslt-19991116
SunPCSC     Sun PC/SC provider
  TerminalFactory: PC/SC
JdkLDAP     JdkLDAP Provider (implements LDAP CertStore)
  CertStore: LDAP
JdkSASL     JDK SASL provider(implements client and server mechanisms for GSSAPI)
  SaslClientFactory: GSSAPI
  SaslServerFactory: GSSAPI
SunMSCAPI   Sun's Microsoft Crypto API provider
  SecureRandom: Windows-PRNG
  KeyStore: Windows-MY
  KeyStore: Windows-ROOT
  Signature: NONEwithRSA
  Signature: SHA1withRSA
  Signature: SHA256withRSA
  Signature: SHA384withRSA
  Signature: SHA512withRSA
  Signature: MD5withRSA
  Signature: MD2withRSA
  KeyPairGenerator: RSA
  Cipher: RSA
  Cipher: RSA/ECB/PKCS1Padding
SunPKCS11   Unconfigured and unusable PKCS11 provider
</code></pre>
","345","<java><ssl><jce>","1","1","1","2018-03-21 16:39:25","49411970","2","","","","","2018-03-21 16:30:49",""
"12422678","Is it possible to register a java security Provider within Android?","<p>Is it possible to register a <code>java.security.Provider</code> within Android OS?</p>
","<p>Based on this issue, I guess you can't:</p>

<p><a href=""http://code.google.com/p/android/issues/detail?id=21417"" rel=""nofollow"">http://code.google.com/p/android/issues/detail?id=21417</a></p>

<blockquote>
  <p><strong>Query</strong></p>
  
  <p>We are developing a JCE provider and would like a way to statically register it so other apps can use it. It would also be useful if security properties can be set statically because we use them to set default algorithms and other options. In standard java both of these can be done by setting properties in the file /jre/lib/security/java.security.</p>
  
  <p><strong>Response</strong></p>
  
  <p><em>I'm going to decline this at this time. Android doesn't really support sharing code this way. If some kind of shared library mechanism is added to the platform, then this could be revisited. For now, apps will have to bundle providers within themselves.</em></p>
</blockquote>
","339","<java><android><security><jce>","1","1","1","2015-04-02 09:48:58","12430690","0","","474189","","2015-04-02 09:48:58","2012-09-14 10:28:10",""
"49297967","Retargeting pkcs11 keys to jcecsp in nCipher HSM","<p>Using PKCS11 api, I am able to generate symmetric keys (DES3) but now I need to retarget these keys to jcecsp for an application which only uses nCipher JCE provider  to access the HSM. I realise that <code>jcecsp</code> is not in the recognised app list of <code>--retarget</code> command.</p>

<p>So my questions is: is there a way to add <code>jcecsp</code> as an supported application for <code>generatekey --retarget</code> command? or this is simply not possible in nShield HSM?</p>

<p>I got this error output:</p>

<pre><code>$ generatekey --retarget jcecsp
ERROR: sorry, application jcecsp is not currently usable
</code></pre>
","<p>jcecsp is a little weird in that operations need to go through Java's KeyStore API.  You might be able to use Java keytool's -importkeystore option with SunPKCS11 as source, and nCipher.sworld as destination.  If this works, you'll have effectively retargeted the key.  The Java layer, working through the keystore file, ensures that key can be found again when JCE tries to access it.</p>

<p>You'll be dancing with a lot of options... SunPKCS11 docs are here <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/p11guide.html"" rel=""nofollow noreferrer"">https://docs.oracle.com/javase/8/docs/technotes/guides/security/p11guide.html</a> and see the Thales docs for what to feed it about the nCipherKM side.</p>
","331","<pkcs#11><jce><hsm>","1","0","1","2018-04-06 00:39:57","","1","","","","","2018-03-15 11:12:03",""
"53427087","Java crypto without Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files","<p>I have previously experienced a lot of trouble with JCE Unlimited Strength Jurisdiction Policy Files. I never want to have to install one again. I want to write Java crypto which ""just works"".</p>

<p>Are there any options for crypto without USJPFs, or am I better off just changing to a different language? (I already know C, Python, JS and a little Rust.)</p>

<p>Iirc, even Bouncy Castle suffered from needing USJPF.</p>
","<p>From Oracle Java 8u162 on the Java cryptography is no longer restricted. See <a href=""https://golb.hplar.ch/2017/10/JCE-policy-changes-in-Java-SE-8u151-and-8u152.html"" rel=""nofollow noreferrer"">https://golb.hplar.ch/2017/10/JCE-policy-changes-in-Java-SE-8u151-and-8u152.html</a></p>
","319","<java><jce>","-1","1","1","2018-11-22 09:16:27","53427437","1","","","","","2018-11-22 08:54:42",""
"25382733","How to encode a proprietary asymmetric publickey in X509","<p>I am working on a cryptographic library in Java that creates its own proprietary asymmetric cryptosystem (we have a valid reason for doing this that is too long to explain here). This asymmetric cryptosystem is an implementation of ElGamal. The library provides a mechanism for generating keypairs and for encrypting and decrypting data.</p>

<p>The public and private keys of this cryptosystem do not currently implement any interface (they have no connection with Key from java.security).</p>

<p>However we now have the requirement that we need to store an ElGamal public key inside an X509 certificate. To do this we plan on implementing the java.security.PublicKey interface in our proprietary public key, as this will allow us to pass our proprietary public key as a PublicKey (to allow it to be stored in a certificate).  However, implementing PublicKey means that we must now implement three new methods in our PublicKey, these are:</p>

<ul>
<li>public String getAlgorithm()</li>
<li>public String getFormat()</li>
<li>public byte[] getEncoded()</li>
</ul>

<p>The getEncoded() method should return the public key encoded in some way. In keeping with convention, we would like to encode the data using X509 format.</p>

<p>We question is: how can the contexts of an arbitrary object be encoded using this encoding format?</p>
","<p>X.509 specifies the format of a certificate. The public key itself is just one part of it. Within the X.509 data structure it is stored as a bit string (so basically raw binary data).</p>

<p>The <code>getEncoded</code> method typically returns the DER encoding of a SubjectPublicKeyInfo structure which contains the algorithm encoded as an ASN.1 object identifier and the bits of the public key itself.</p>

<p>The <a href=""http://docs.oracle.com/javase/7/docs/api/java/security/Key.html"" rel=""nofollow"">documentation of Key</a> gives some more details.</p>
","313","<java><encoding><x509><digital-certificate><jce>","2","3","2","2014-10-03 16:09:09","","1","","3441604","","2014-08-19 12:00:57","2014-08-19 11:53:44",""
"25382733","How to encode a proprietary asymmetric publickey in X509","<p>I am working on a cryptographic library in Java that creates its own proprietary asymmetric cryptosystem (we have a valid reason for doing this that is too long to explain here). This asymmetric cryptosystem is an implementation of ElGamal. The library provides a mechanism for generating keypairs and for encrypting and decrypting data.</p>

<p>The public and private keys of this cryptosystem do not currently implement any interface (they have no connection with Key from java.security).</p>

<p>However we now have the requirement that we need to store an ElGamal public key inside an X509 certificate. To do this we plan on implementing the java.security.PublicKey interface in our proprietary public key, as this will allow us to pass our proprietary public key as a PublicKey (to allow it to be stored in a certificate).  However, implementing PublicKey means that we must now implement three new methods in our PublicKey, these are:</p>

<ul>
<li>public String getAlgorithm()</li>
<li>public String getFormat()</li>
<li>public byte[] getEncoded()</li>
</ul>

<p>The getEncoded() method should return the public key encoded in some way. In keeping with convention, we would like to encode the data using X509 format.</p>

<p>We question is: how can the contexts of an arbitrary object be encoded using this encoding format?</p>
","<p>Henry is of course correct, however stopping with SubjectPublicKeyInfo is a bit of a tricky thing, as SubjectPublicKeyInfo is little more than a definition of a container.</p>

<p>If you encode an ElGamal public key using the <code>getEncoded</code> specified by Bouncy Castle then you will get <a href=""http://lapo.it/asn1jsrel=""nofollow"">this ASN.1 structure</a>:</p>

<pre><code>SEQUENCE (2 elem)
  SEQUENCE (2 elem)
    OBJECT IDENTIFIER: 1.3.14.7.2.1.1
    SEQUENCE (2 elem)
      INTEGER (2048 bit): 3231…
      INTEGER: 2
  BIT STRING (1 elem)
    INTEGER (2048 bit): 2072…
</code></pre>

<p>So that's a <code>SubjectPublicKeyInfo</code> (first sequence) with an ElGamal algorithm identifier (and <a href=""http://oid-info.com/get/1.3.14.7.2.1.1"" rel=""nofollow"">ElGamal OID</a>), which in turn contains the large prime and generator (with value 2). Then comes the <code>BIT STRING</code>, which contains an <code>INTEGER</code> with the public key value.</p>

<p>Note that I find it exceedingly hard to find out if the above is specified anywhere. IOW seems to have been some workshop in which NIST was also involved. ElGamal encryption is not used much anymore.</p>
","313","<java><encoding><x509><digital-certificate><jce>","2","1","2","2014-10-03 16:09:09","","1","","3441604","","2014-08-19 12:00:57","2014-08-19 11:53:44",""
"42672155","Java SSL SSLHandshakeException handshake_failure after JCE was updated","<p>I have a strange problem with SSL certificate during opening HttpConnection to one specific rss address:</p>

<pre><code>urlConnection = new URL(""https://softwaremill.com/feed.xml"").openConnection();
</code></pre>

<p>I have already added JCE from Oracle page and allowed self signed certificates and added some custom properties</p>

<pre><code>log.info(""Disabling SSL validation to allow self signed SSL certificates"");
final SSLContext sc = SSLContext.getInstance(""TLS"");
sc.init(null, new TrustManager[]{new NonValidatingFactory.NonValidatingTM()},
    new SecureRandom());
HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
HttpsURLConnection.setDefaultHostnameVerifier((String hostname, SSLSession session) -&gt; true);
java.lang.System.setProperty(""sun.security.ssl.allowUnsafeRenegotiation"", ""true"");
java.lang.System.setProperty(""sun.security.ssl.allowLegacyHelloMessages"", ""true"");
</code></pre>

<p>but still I am receiving <code>handshake_failure</code>. Full debug output:</p>

<pre><code>Allow unsafe renegotiation: true
Allow legacy hello messages: true
Is initial handshake: true
Is secure renegotiation: false
ForkJoinPool.commonPool-worker-6, setSoTimeout(30000) called
Ignoring unsupported cipher suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 for TLSv1
Ignoring unsupported cipher suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 for TLSv1
Ignoring unsupported cipher suite: TLS_RSA_WITH_AES_256_CBC_SHA256 for TLSv1
Ignoring unsupported cipher suite: TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 for TLSv1
Ignoring unsupported cipher suite: TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 for TLSv1
Ignoring unsupported cipher suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 for TLSv1
Ignoring unsupported cipher suite: TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 for TLSv1
Ignoring unsupported cipher suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 for TLSv1.1
Ignoring unsupported cipher suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 for TLSv1.1
Ignoring unsupported cipher suite: TLS_RSA_WITH_AES_256_CBC_SHA256 for TLSv1.1
Ignoring unsupported cipher suite: TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 for TLSv1.1
Ignoring unsupported cipher suite: TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 for TLSv1.1
Ignoring unsupported cipher suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 for TLSv1.1
Ignoring unsupported cipher suite: TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 for TLSv1.1
%% No cached client session
*** ClientHello, TLSv1.2
RandomCookie:  GMT: 1472133991 bytes = { 2, 190, 242, 251, 11, 88, 180, 161, 95, 230, 125, 234, 224, 137, 46, 0, 51, 242, 115, 231, 45, 160, 11, 218, 1, 159, 35, 83 }
Session ID:  {}
Cipher Suites: [TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, TLS_DHE_DSS_WITH_AES_256_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_DSS_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_DSS_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA, TLS_EMPTY_RENEGOTIATION_INFO_SCSV]
Compression Methods:  { 0 }
Extension elliptic_curves, curve names: {secp256r1, secp384r1, secp521r1, sect283k1, sect283r1, sect409k1, sect409r1, sect571k1, sect571r1, secp256k1}
Extension ec_point_formats, formats: [uncompressed]
Extension signature_algorithms, signature_algorithms: SHA512withECDSA, SHA512withRSA, SHA384withECDSA, SHA384withRSA, SHA256withECDSA, SHA256withRSA, SHA256withDSA, SHA1withECDSA, SHA1withRSA, SHA1withDSA
***
[write] MD5 and SHA1 hashes:  len = 203
(..)
ForkJoinPool.commonPool-worker-6, WRITE: TLSv1.2 Handshake, length = 203
[Raw write]: length = 208
(...)
[Raw read]: length = 5
0000: 15 03 03 00 02                                     .....
[Raw read]: length = 2
0000: 02 28                                              .(
ForkJoinPool.commonPool-worker-6, READ: TLSv1.2 Alert, length = 2
ForkJoinPool.commonPool-worker-6, RECV TLSv1.2 ALERT:  fatal, handshake_failure
ForkJoinPool.commonPool-worker-6, called closeSocket()
ForkJoinPool.commonPool-worker-6, handling exception: javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure
</code></pre>

<p>I am running out of ideas, maybe certificate there is not <code>fully</code> valid as shown at <a href=""https://www.sslshopper.com/ssl-checker.html#hostname=softwaremill.com"" rel=""nofollow noreferrer"">https://www.sslshopper.com/ssl-checker.html#hostname=softwaremill.com</a> ?</p>

<p>Any help would be appreciated</p>
","","300","<java><ssl><jce><sslhandshakeexception>","1","","0","2017-03-08 13:06:28","","0","2","542270","","2017-03-08 13:06:28","2017-03-08 13:04:17",""
"45197000","Is apksigner compliant with JCE (Java Cryptography Extension) specification?","<p>Is apksigner tool that comes along with Android SDK Build Tools compliant with JCE (Java Cryptography Extension) specification?</p>
","<p>The current (as of July 25 2017) <code>apksigner</code> version <code>0.7</code> released in Andriod SDK Build Tools <code>26.0.1</code> supports signing using HSM keys via Sun/Oracle's PKCS #11 Provider and its extensions. For example:</p>

<pre><code>apksigner sign --provider-class sun.security.pkcs11.SunPKCS11 \
  --provider-arg token.cfg --ks NONE --ks-type PKCS11 app.apk
</code></pre>

<p>Also see <a href=""https://geoffreymetais.github.io/code/key-signing/"" rel=""nofollow noreferrer"">https://geoffreymetais.github.io/code/key-signing/</a>.</p>
","292","<code-signing><jce><jca><apksigner>","1","1","1","2017-07-25 17:56:00","45248354","2","","","","","2017-07-19 17:12:47",""
"54997191","Could not generate DH keypair Exception in JDK 8","<p>When we invoke SOAP  request over Https from Java Client running in JDK 1.8x we are getting <strong>Could not generate DH keypair</strong> . But the following error is intermittent. Some requests are working fine for the same SOAP request. Others are failing .</p>

<p><strong>Note</strong> : This issue was not occurring initially . And application was working fine . Even now this exception is intermittent. (We are aware of the SSL key size limit for JDK 8 and SSL certificate is not more than 2048)</p>

<p><strong>[err] org.springframework.ws.client.WebServiceIOException: I/O error: java.lang.RuntimeException: Could not generate DH keypair; nested exception is javax.net.ssl.SSLException: java.lang.RuntimeException: Could not generate DH keypair
[err]      at org.springframework.ws.client.core.WebServiceTemplate.sendAndReceive(WebServiceTemplate.java:561)
[err]      at org.springframework.ws.client.core.WebServiceTemplate.marshalSendAndReceive(WebServiceTemplate.java:390</strong></p>
","","287","<https><bouncycastle><jce>","0","","0","2019-03-05 07:07:56","","0","","","","","2019-03-05 07:07:56",""
"25334384","Bypassing JCE Policy Files","<p>In my current project I need to use a strong PBE encryption algorithm, as asked by the client. But for that to work, I would need to install JCE Policy Files on each machine I want to deploy on. Based on the amount of machines, that is NOT a valid option for it to be ""copy-and-run deployment"".</p>

<p><a href=""https://stackoverflow.com/questions/1179672/unlimited-strength-jce-policy-files"">How to avoid installing &quot;Unlimited Strength&quot; JCE policy files when deploying an application?</a>
The solution there provided by using reflection to override JCE validations works perfectly, but only on J7 or above.
However, the entire project is designed for Java6 (we have already tried to upgrade it, without success). So the elements used in the reflection solution are not even present.</p>

<p>I'm currently using Jasypt + BouncyCastle for a StandardPBEStringEncryptor, with PBEWITHSHA256AND256BITAES-CBC-BC.</p>

<p>Is there a way to bypass the JCE restriction on Java6 by using reflection (or any other method that does not involve patching the JVM or getting an international Government Approval)?</p>
","","283","<encryption><java-6><password-encryption><jce>","0","","0","2014-08-15 21:19:42","","8","","-1","","2017-05-23 12:11:39","2014-08-15 21:19:42",""
"31579815","Fixing the IV for JCE RSA Encryption","<p>I'm trying to pass an RSA Key generated in JS to encrypt something in Java. We're passing the exponent and the modulus and then generating a key from that.</p>

<p>However when encrypting in JCE, two ciphertexts are never the same because the initialization creates a random IV, as directed.</p>

<p>Is there some way to fix the IV for initiliazation so the Javascript can pass it to the Java server? The documentation for the JCE gives me nothing.</p>

<p>Thanks in advance, its much appreciated.</p>

<p>EDIT: its come to my attention that the IV is used for the padding. I'm using PKCS1 padding, if that changes anything.</p>

<p>EDIT: I've done some more reading, and apparently the difference between the ciphertexts is due to the padding. While I appreciate that this is working as directed, I need the client to be able to decrypt the encrypted text. If I pass it the ciphertext encrypted with the public key, will the client be able to decrypt it even without knowing anything about the padding, even if its a different library and language doing the decrypting?</p>
","","278","<java><rsa><public-key-encryption><jce>","0","","0","2015-07-24 00:59:34","","3","","5051134","","2015-07-24 00:59:34","2015-07-23 06:36:15",""
"21866658","Is there a way to identify what scripts are uploading files to WAMP tmp directory?","<p>I have a WAMP web server running two instances of vBulletin and two instances of WordPress. All web applications are ""latest and greatest"" versions. </p>

<p>Every day I am seeing simple shell backdoor getting uploaded to the server. I know how to get stuff up and running, but doing a forensic analysis on where the vulnerability is has been rather tough.</p>

<p>I searched my web logs and at the same time that I get the e-mail alert that my anti-virus detected the backdoor, I can see ""Bot for JCE"" attempting to access what is supposed to be the backdoor PHP files - thankfully getting nothing more than an error 404.</p>

<p>What's extremely confusing about this exploit is that I do not have Joomla installed anywhere on the server. Yet the ""Bot for JCE"" exploit supposedly only targets Joomla installs.</p>

<p>Although thankful that my antivirus is finding the virus before it can be exploited, I obviously need to plug the hole in the site.</p>

<p>TL/DR -- Since I'm not seeing anything obvious on my website access logs, is there a way to have something installed on the server identify exactly where the file is being uploaded from? That is - I want to know exactly what page/script on my site they're accessing that's allowing them to upload to the WAMP TMP directory.</p>

<p>Any ideas?</p>
","","273","<wordpress><joomla><bots><exploit><jce>","0","","0","2014-02-18 22:16:14","","2","","","","","2014-02-18 22:16:14",""
"54776057","Validate JCE certificates during Eclipse install","<p>During installation of Eclipse (using <a href=""https://wiki.eclipse.org/Eclipse_Installer"" rel=""noreferrer"">Eclipse Installer</a>) I get asked ""Do you trust these certificates?"", listing two certificates for <em>Bouncy Castle</em> (one signed by Sun, one by Oracle) and one certificate for <em>Eclipse</em> (signed by Sun). How can I validate these certificates?</p>

<p><img src=""https://i.stack.imgur.com/Rznva.png"" alt=""Screenshot of certificates dialog""></p>

<p>I understand that this are code signing certificates for JCE (Java Cryptography Extension), i.e. certificates <a href=""https://www.oracle.com/technetwork/java/javase/tech/getcodesigningcertificate-361306.html"" rel=""noreferrer"">signed by Oracle</a> for <a href=""https://en.wikipedia.org/wiki/Java_Cryptography_Extension"" rel=""noreferrer"">encryption, key generation and key agreement, and Message Authentication Code (MAC) algorithms</a>. I also know that <a href=""https://www.bouncycastle.org/"" rel=""noreferrer"">Bouncy Castle</a> is in common use for providing algorithms related to encryption.</p>

<p>Two questions:</p>

<ol>
<li>All certificates are signed by the same two CAs, but I cannot find a (public) list of ""official"" CA certificate fingerprints. How can I validate these?

<ul>
<li><em>JCE Code Signing CA</em>, issued by and to <em>Sun Microsystems Inc</em>, valid to 2020-04-25, fingerprint 57:37:D1:E1:16:2F:F6:FE:26:B9:87:88:D2:86:DA:66:7F:98:54:3C</li>
<li><em>JCE Code Signing CA</em>, issued by and to <em>Oracle Corporation</em>, valid to 2030-12-31, fingerprint F4:B9:C6:4A:52:AD:22:3C:E4:BF:BA:52:52:87:9C:9F:71:1D:4B:33</li>
</ul></li>
<li>Why are those CAs not trusted by default, i.e. included in some trust store supplied with the JDK/JRE? The CAs are operated by Oracle (at least the CA certificates say so 😉), the JRE I'm using is provided by Oracle (openjdk 11.0.2), I see no reason the CAs should not be trusted (given they are indeed legit).</li>
</ol>
","","270","<eclipse><certificate><jce>","6","","0","2019-02-19 22:41:56","","0","2","","","","2019-02-19 22:41:56",""
"45424160","JCE: Exception while verifying X509 self-signed certificate","<p>We develop a custom JCE security provider for SSL/TLS.</p>

<p>One of our users is getting a server certificate verification failure on the client side. It's the usual ""unable to find valid certification path to requested target"" error. (Yes, the cert is in the truststore.)</p>

<p>Note: Although we are implementing a custom provider, we rely on the standard JCE providers for the trust manager, using javax.net.ssl.X509TrustManager.checkServerTrusted(X509Certificate[] chain, String) during the TLS handshake.</p>

<pre><code>sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
        at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387)
        at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:292)
        at sun.security.validator.Validator.validate(Validator.java:260)
        at sun.security.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:324)
        at sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:229)
        at sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:105)
        [snip]
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
        at sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:146)
        at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:131)
        at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:280)
        at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382)
        ...
</code></pre>

<p>As with all our users, they have the unlimited security policy jars installed.</p>

<p>The server certificate is self-signed (not CA). They use 127.0.0.1 as the hostname since they're just connecting to a backend process.</p>

<p>A default installation of the JRE/JDK works (using Sun/Oracle security providers). Using javax.net.debug output, I have confirmed that these successful connections use the same self-signed certificate.</p>

<p>However, when I hacked together some code to simply establish a connection, it works without issue using the same truststore, keystore, certificate, and JDK on the same machine. This uses the same verification function which makes the same call to X509TrustManager.checkServerTrusted() using the same certificate and the same authType string. I cannot for the life of me explain why checkServerTrusted() verifies the cert in this case but fails in the user's case.</p>

<p><strong>Is it possible that there's some way to tweak the JCE such that the X509TrustManager would fail to verify this cert? Perhaps because it's self-signed, or because the common name is the name of the service and not a domain name? I see nothing in their JVM parameters or security properties to indicate this. But perhaps they're making some JCE call I don't know about which modifies X509TrustManager's behavior?</strong></p>

<p>The javax.net.debug output for the cert is below. The common name is simply the name of our adopter's service. That seems fishy to me. However, it works with the default security providers.</p>

<pre><code>***
Found trusted certificate:
[
[
  Version: V3
  Subject: CN=[snip], OU=[snip], O=[snip], L=Bangalore, ST=[snip], C=IN
  Signature Algorithm: SHA256withRSA, OID = 1.2.840.113549.1.1.11

  Key:  Sun RSA public key, 2048 bits
  modulus: [snip]
  public exponent: 65537
  Validity: [From: Wed Feb 17 14:45:40 IST 2016,
               To: Thu Nov 20 14:45:40 IST 2070]
  Issuer: CN=[snip], OU=[snip], O=[snip], L=Bangalore, ST=[snip], C=IN
  SerialNumber: [    5cf68160]

Certificate Extensions: 1
[1]: ObjectId: 2.5.29.14 Criticality=false
SubjectKeyIdentifier [
KeyIdentifier [
[snip]
]
]

]
  Algorithm: [SHA256withRSA]
  Signature:
[snip]

]
</code></pre>

<p>After adding some additional logs, it's clear that the accepted issuers are being populated differently for whatever reason. In the failing case, a plethora of accepted issuers are returned from [trust-manager].getAcceptedIssuers[]; they do not include the problematic cert. In the passing case, only the problematic cert is included in the accepted issuers.</p>

<p>[edit 1] Corrected the certificate.</p>

<p>[edit 2] Corrected common name in the bold question.</p>

<p>[edit 3] Added accepted issuers paragraph</p>
","<p>It turns out that this is an issue with caching the trust manager.</p>

<p>With either the default providers or our custom provider, the trust manager is initially instantiated with the cacerts truststore.</p>

<p>With the default providers, a new trust manager is later instantiated using the javax.net.ssl.trustStore-specified truststore. Our custom provider just re-uses the previously instantiated cacerts trust manager.</p>

<p><strong>Solution: Instantiate a new trust manager, which will respect javax.net.ssl.trustStore.</strong></p>
","269","<java><ssl><x509certificate><jce>","1","0","1","2017-08-02 14:35:13","45463792","7","","2390187","","2017-08-01 20:20:42","2017-07-31 19:47:38",""
"12793869","AccessControlException when adding security provider on App Engine","<pre><code>static {
    Security.addProvider(new iaik.security.provider.IAIK());
}
</code></pre>

<p>The above line of code is part of my GAE/Java project.
Unfortunately, it raises an exception upon execution:</p>

<pre><code>java.security.AccessControlException: access denied (java.security.SecurityPermission putProviderProperty.IAIK)
</code></pre>

<p>Can't I use my desired JCE (IAIK JCE in this case) on Google App Engine?</p>
","<p>The GAE/J documentation features a ""JRE Class White List"" page, which lists the JRE classes allowed in GAE/J.</p>

<p>Your code may be trying to access a JRE class outside of this list.</p>
","268","<java><google-app-engine><jce>","1","0","1","2012-10-10 13:47:01","","0","","","","","2012-10-09 06:15:06",""
"22521123","Joomla JCE removes textarea required attribute","<p>I use a php script that inserts into <code>jos_content</code> table some kind of content in order to create article. Among this, there is a <code>textarea</code> with the attribute <code>required</code>.</p>

<pre><code>&lt;textarea name=""comment"" required&gt;&lt;/textarea&gt;
</code></pre>

<p>But, when I open my article manager and find this created article, there is no required attribute anymore, everything else is fine. The same thing is with the maxlength. I use JCE editor, so I can assume that maybe it kills it somehow. But I am not sure what to do now?</p>
","<p>Have you tried to change the settings of JCE editor. Go to the Editor Global Configuration > Cleanup and Output and set the HTML Validation to NO.</p>

<p>This will affect your code, but it will keep the attributes of textareas in the articles. Of course, you have to set the attribute to have value: <code>required=""required""</code>.</p>

<p>Or, just use another editor: Tiny etc...</p>
","268","<php><forms><joomla><joomla3.0><jce>","0","0","2","2015-11-19 14:44:08","22521307","3","","","","","2014-03-20 00:33:14",""
"22521123","Joomla JCE removes textarea required attribute","<p>I use a php script that inserts into <code>jos_content</code> table some kind of content in order to create article. Among this, there is a <code>textarea</code> with the attribute <code>required</code>.</p>

<pre><code>&lt;textarea name=""comment"" required&gt;&lt;/textarea&gt;
</code></pre>

<p>But, when I open my article manager and find this created article, there is no required attribute anymore, everything else is fine. The same thing is with the maxlength. I use JCE editor, so I can assume that maybe it kills it somehow. But I am not sure what to do now?</p>
","<p>I faced to the same issue. The problem is that JCE will remove all element which do not have any content inside.</p>

<p>In other words, this will be removed:</p>

<pre><code>&lt;textarea name=""comment"" required&gt;&lt;/textarea&gt;
</code></pre>

<p>And this will not:</p>

<pre><code>&lt;textarea name=""comment"" required&gt;&amp;nbsp;&lt;/textarea&gt;
</code></pre>
","268","<php><forms><joomla><joomla3.0><jce>","0","0","2","2015-11-19 14:44:08","22521307","3","","","","","2014-03-20 00:33:14",""
"38220045","User not able to post iframes in joomla article","<p>I am not able to add iframes to an article as a limited user.</p>

<p>As a super user I am able to do so because I allowed it in the JCE editor settings. There is an option for user profiles there, so I edited the default one and gave permission to every user. Still when I login to a user with limited rights (no admin rights and no superuser rights) it refuses to save the iframe.</p>

<p>What am I doing wrong?</p>

<p>Like I said I use JCE editor and am in Joomla 3.5.1.</p>
","<p>You missed this steps <strong><code>set Filter Type to No Filtering</code></strong> in Joomla! <strong>Global Configuration</strong>, <strong>Text Filters tab</strong></p>

<p><strong>Configure Joomla! Article filters</strong></p>

<p>By default Joomla!  'cleans' content on saving, removing script tags, event attributes (such as <code>onclick, onmouseover</code> etc.) and style tags.</p>

<p>A simple article parameter change is all that is required to fix this.</p>

<p>Joomla! 2.5 and Joomla! 3</p>

<ol>
<li>In the Joomla! Global Configuration, click on the Text Filters tab.</li>
<li>For the Super Users group, or any other trusted user group, set Filter Type to No Filtering. Make sure that you only set this option for user groups that can be trusted as setting the Filter Type to No Filtering will essentially allow the user to include any html in an article. </li>
</ol>

<p>Reference <a href=""https://www.joomlacontenteditor.net/support/faq/item/iframe-removed-on-saving"" rel=""nofollow"">https://www.joomlacontenteditor.net/support/faq/item/iframe-removed-on-saving</a></p>
","264","<iframe><joomla><jce>","0","2","3","2016-11-23 19:46:02","38222801","0","","","","","2016-07-06 09:01:14",""
"38220045","User not able to post iframes in joomla article","<p>I am not able to add iframes to an article as a limited user.</p>

<p>As a super user I am able to do so because I allowed it in the JCE editor settings. There is an option for user profiles there, so I edited the default one and gave permission to every user. Still when I login to a user with limited rights (no admin rights and no superuser rights) it refuses to save the iframe.</p>

<p>What am I doing wrong?</p>

<p>Like I said I use JCE editor and am in Joomla 3.5.1.</p>
","<blockquote>
  <p>Joomla! 2.5 and Joomla! 3</p>
</blockquote>

<ol>
<li><p>In the Joomla! Global Configuration, click on the Text Filters tab.</p></li>
<li><p>For the Super Users group, or any other trusted user group, set
Filter Type to No Filtering. Make sure that you only set this option
for user groups that can be trusted as setting the Filter Type to No
Filtering will essentially allow the user to include any html in an
article.</p></li>
</ol>

<p>Please refer this url
<a href=""https://www.joomlacontenteditor.net/support/faq/item/iframe-removed-on-saving"" rel=""nofollow"">https://www.joomlacontenteditor.net/support/faq/item/iframe-removed-on-saving</a></p>
","264","<iframe><joomla><jce>","0","2","3","2016-11-23 19:46:02","38222801","0","","","","","2016-07-06 09:01:14",""
"38220045","User not able to post iframes in joomla article","<p>I am not able to add iframes to an article as a limited user.</p>

<p>As a super user I am able to do so because I allowed it in the JCE editor settings. There is an option for user profiles there, so I edited the default one and gave permission to every user. Still when I login to a user with limited rights (no admin rights and no superuser rights) it refuses to save the iframe.</p>

<p>What am I doing wrong?</p>

<p>Like I said I use JCE editor and am in Joomla 3.5.1.</p>
","<p>Also, in case there is still trouble with this after trying the above solution, make sure that the embed code's URL is set to whatever the site's SSL setting is. </p>

<p>For instance, if the site is set to Force SSL in the configuration.php document in the root folder and your site is https as a result, the URL of the embed code needs to also be https. Browsers such as Firefox will block the iframe if the URL is http. </p>

<p>For what it's worth. Cheers!</p>
","264","<iframe><joomla><jce>","0","0","3","2016-11-23 19:46:02","38222801","0","","","","","2016-07-06 09:01:14",""
"12221483","Optimizing File Encryption in Java","<p>I'm developing an application that encrypts its input files.<br>
My Code is this for encrypting files (File size differs from some KB to 4GB):  </p>

<pre><code>    SecretKeySpec   key = new SecretKeySpec(keyBytes, ""AES"");
    IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);
    Cipher          cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"", ""BC"");
    byte[] block = new byte[8];
    int i;

    cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);

    BufferedInputStream bIn=new BufferedInputStream(new ProgressMonitorInputStream(null,""Encrypting ..."",new FileInputStream(""input"")));
    CipherInputStream       cIn = new CipherInputStream(bIn, cipher);
    BufferedOutputStream bOut=new BufferedOutputStream(new FileOutputStream(""output.enc""));

    int ch;
    while ((i = cIn.read(block)) != -1) {
        bOut.write(block, 0, i);
    }
    cIn.close();
    bOut.close();
</code></pre>

<p>Can I make it more optimum (Time,IO,CPU)?<br>
How?</p>

<p>Thanks</p>
","<p>This is a complicated and difficult question to answer. First of all, encrypting 4GB worth of file is going to take time no matter what you do.</p>

<p>A lightweight encryption algorithm like the <a href=""http://www.reveresecurity.com/_pdfs/HB2%20Cipher.pdf"" rel=""nofollow"">Hummingbird</a> will help you get there - but, you have to make sure that wherever you're using this, AES isn't absolutely necessary. </p>
","261","<java><optimization><io><bouncycastle><jce>","0","2","3","2012-09-29 11:42:01","","0","3","24396","","2012-08-31 20:16:28","2012-08-31 19:32:39",""
"12221483","Optimizing File Encryption in Java","<p>I'm developing an application that encrypts its input files.<br>
My Code is this for encrypting files (File size differs from some KB to 4GB):  </p>

<pre><code>    SecretKeySpec   key = new SecretKeySpec(keyBytes, ""AES"");
    IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);
    Cipher          cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"", ""BC"");
    byte[] block = new byte[8];
    int i;

    cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);

    BufferedInputStream bIn=new BufferedInputStream(new ProgressMonitorInputStream(null,""Encrypting ..."",new FileInputStream(""input"")));
    CipherInputStream       cIn = new CipherInputStream(bIn, cipher);
    BufferedOutputStream bOut=new BufferedOutputStream(new FileOutputStream(""output.enc""));

    int ch;
    while ((i = cIn.read(block)) != -1) {
        bOut.write(block, 0, i);
    }
    cIn.close();
    bOut.close();
</code></pre>

<p>Can I make it more optimum (Time,IO,CPU)?<br>
How?</p>

<p>Thanks</p>
","<p>Picking a better <code>byte[] block</code> size will help (something in the 8k to 1MB range, test to find the optimium size for your scenario), but other than that there's not much you can do to make it faster (assuming you maintain the current encryption algorithm).</p>
","261","<java><optimization><io><bouncycastle><jce>","0","1","3","2012-09-29 11:42:01","","0","3","24396","","2012-08-31 20:16:28","2012-08-31 19:32:39",""
"12221483","Optimizing File Encryption in Java","<p>I'm developing an application that encrypts its input files.<br>
My Code is this for encrypting files (File size differs from some KB to 4GB):  </p>

<pre><code>    SecretKeySpec   key = new SecretKeySpec(keyBytes, ""AES"");
    IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);
    Cipher          cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"", ""BC"");
    byte[] block = new byte[8];
    int i;

    cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);

    BufferedInputStream bIn=new BufferedInputStream(new ProgressMonitorInputStream(null,""Encrypting ..."",new FileInputStream(""input"")));
    CipherInputStream       cIn = new CipherInputStream(bIn, cipher);
    BufferedOutputStream bOut=new BufferedOutputStream(new FileOutputStream(""output.enc""));

    int ch;
    while ((i = cIn.read(block)) != -1) {
        bOut.write(block, 0, i);
    }
    cIn.close();
    bOut.close();
</code></pre>

<p>Can I make it more optimum (Time,IO,CPU)?<br>
How?</p>

<p>Thanks</p>
","<p>What you can do is to you use <code>AESFastEngine</code> from <code>bouncycastle</code> library to accelerate <code>aes</code> block computation. </p>

<pre><code>crypto/src/org/bouncycastle/crypto/engines
</code></pre>

<p>This fast engine uses <code>T</code> tables which are rounded precomputed table and for sure will have a gain in performance.</p>
","261","<java><optimization><io><bouncycastle><jce>","0","1","3","2012-09-29 11:42:01","","0","3","24396","","2012-08-31 20:16:28","2012-08-31 19:32:39",""
"4203248","how can i use encryption algorithm from installed provider on J9 vm?","<p>Hi
I am trying to user RSA on J9. The algorithm is offered by the 'J9JCE' provider which is an installed extension(i listed all the existing providers and algorithms and found them) but the exception i get is:</p>

<pre><code>Exception in thread ""main"" java.security.NoSuchAlgorithmException: JCE provider signer certificates not found/read
 at javax.crypto.Cipher.getInstance(Cipher.java:191)
 at Test.encript(Test.java:26)
 at Test.main(Test.java:42)
</code></pre>
","<p>I still don't know the answer to the problem but a workaround is to use the provider from Bouncy Castle which works fine.</p>
","257","<java><rsa><jce><encryption><j9>","0","0","1","2010-11-19 17:30:16","4227700","1","","23760","","2010-11-17 10:11:40","2010-11-17 09:56:12",""
"46207908","Unit testing encrypt/decrypt with some salt located in different code bases","<p>First of all I shall mention that I have seen <a href=""https://stackoverflow.com/questions/24371069/unit-testing-of-encrypt-decrypt"" title=""Unit testing of encrypt/decrypt"">Unit testing of encrypt/decrypt</a>, and <a href=""https://stackoverflow.com/questions/41375108/unit-testing-encryption-and-decryption-in-java"" title=""Unit testing encryption and decryption in Java"">Unit testing encryption and decryption in Java</a>.</p>

<p>I want to protect a library by validating its license. The license contains information such as maximum users and expiration time and so on.</p>

<p>The problems I encounter are:</p>

<ul>
<li>The encryptor and decryptor are in two different code bases. The decryptor is packaged with the library, but encryptor is not, so it is hard to have them both in the same test suite!</li>
<li>A random salt is used within encryptor, so even with same input the encryptor produces a different output each time, again I can not do assertion on the result.</li>
<li>For the sake of its purpose the decryptor (to make it harder to inject another class for it) is a final class, and all of its methods are private, except a few package accessible entry points.</li>
</ul>

<p>I don't want to test JCE, but I want to test my code which does:</p>

<ul>
<li>Extracting the salt from the encrypted license,</li>
<li>Deciphers the encrypted license,</li>
<li>Deserializes the output to some data structure containing license data,</li>
</ul>

<p>Shall I create a clone of the the code, with some softer access constraints and test that? Then the problem is I am not testing the real code which is run on client systems.</p>

<p>Are there any better solutions to do this?</p>
","<p>From what you described I don't see a problem in testing them separately.</p>

<blockquote>
  <ul>
  <li>The encryptor and decryptor are in two different code bases. </li>
  </ul>
</blockquote>

<p>Not an issue if you test them separately.</p>

<blockquote>
  <ul>
  <li>A random salt is used within encryptor</li>
  </ul>
</blockquote>

<p>You can inject a mock random generator that will produce the same results.</p>

<blockquote>
  <ul>
  <li>For the sake of its purpose the decryptor is a final class, and all of its methods are private</li>
  </ul>
</blockquote>

<p>Many ways to test private methods as can be seen <a href=""https://stackoverflow.com/questions/34571/how-do-i-test-a-class-that-has-private-methods-fields-or-inner-classes"">here</a></p>

<blockquote>
  <ul>
  <li>Extracting the salt from the encrypted license</li>
  </ul>
</blockquote>

<p>All you need for that is an encrypted license that you know the salt of.</p>

<blockquote>
  <ul>
  <li>Deciphers the encrypted license</li>
  </ul>
</blockquote>

<p>Similarly, you can use a license that you know what it deciphers to.</p>

<blockquote>
  <ul>
  <li>Deserializes the output to some data structure containing license data,</li>
  </ul>
</blockquote>

<p>Not related and is a separate test of the deserialization code.</p>
","255","<java><unit-testing><encryption><jce>","0","0","1","2017-09-13 23:43:07","","0","","","","","2017-09-13 22:44:10",""
"21418857","JAVA: Programmatic Replacement of the JCE Policy Files","<p>I'm working on a study project. For this I implemented a java application. This application requires a 8192-bit RSA encryption. To use the bit length, I need the java jce extension (<a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow"">http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html</a>). There fore i ask myself: Is it (legally) allowed to replace the JCE policy files during the installation of my program?</p>

<p>Thank you for your answers.
Best regards,
Tim</p>
","<p>It also depends on what country you're in. In some countries it is illegal to <em>import</em> that code. You should leave this choice up to the user. If they don't want or can't install stronger encryption, your program should use whatever is available.</p>
","240","<java><security><encryption><rsa><jce>","-2","0","1","2014-01-30 16:23:26","","0","1","","","","2014-01-28 23:06:35",""
"36120175","How do I use 'PBEWithHmacSHA1AndDESede' with Jasypt?","<p>I am using <a href=""http://www.jasypt.org/"" rel=""nofollow"">Jasypt</a> in a linux bash script where I want to encrypt a text string with the algorithm <em>PBEWithHmacSHA1AndDESede</em>. When running the command:</p>

<pre><code>./encrypt.sh input=""This is my message to be encrypted"" password=MYPAS_WORD verbose=false algorithm=PBEWITHHMACSHA1ANDDESEDE
</code></pre>

<p>I get the error:</p>

<pre><code>ERROR: java.security.NoSuchAlgorithmException: PBEWITHHMACSHA1ANDDESEDE SecretKeyFactory not available
</code></pre>

<p>According to this <a href=""https://www.owasp.org/index.php/Using_the_Java_Cryptographic_Extensions"" rel=""nofollow"">link</a>, PBEWithHmacSHA1AndDESede is included in SunJCE. My assumption is that SunJCE is included in the latest JDK. Is this correct? If not, how can I download the SunJCE jar file?</p>
","","234","<java><encryption><jce><hmacsha1>","0","","0","2016-03-20 22:03:07","","5","","","","","2016-03-20 22:03:07",""
"15347272","How can I set the version number of iaik.x509.X509Certificate explicitly?","<p>The documentation at <a href=""http://javadoc.iaik.tugraz.at/iaik_jce/current/iaik/x509/X509Certificate.html#X509Certificate%28%29"" rel=""nofollow"">this page</a> states that </p>

<p><code>Any value may be set using the corresponding set&lt;Value&gt; method.</code></p>

<p>However, I am not sure how to interpret this statement. I have tried the following but none of them compile, and nor did I expect them to. </p>

<pre><code>certificate.set3();
certificate.setThree();
serverCertificate.set&lt;3&gt;();
</code></pre>

<p>What is the correct method call to set the version number explicitly?</p>
","<p>You can not. It explicitely says:  </p>

<blockquote>
  <p>This class represents a X.509 <strong>version 3</strong> certificate, as specified by
  ISO/IEC and ANSI X9.  </p>
</blockquote>

<p><strong>Update:</strong>
Seems that you can not actually set the version. It ""configures"" itself the proper version depending on which extensions you use. In V1 there were no extensions and in V2 just few.   </p>

<blockquote>
  <p>The version number per default is set to 1 indicating a Version 1
  certificate. When including subjectUniqueID or issuerUniqueID, the
  version automatically will be set to 2, and when adding an extension
  increased to 3.</p>
</blockquote>
","229","<java><jce><iaik-jce>","0","1","1","2013-03-11 20:05:18","15347402","0","","","","","2013-03-11 19:47:18",""
"29038655","ArithmeticException: using Cipher Algorithm ""AES/CFB1/PKCS5Padding"" from BouncyCastleProvider","<p>I'm trying to create a Cipher algorithm using ""AES/CFB1/PKCS5Padding"" (BouncyCastle provider), but an ArithmeticException occurs:</p>

<blockquote>
  <p>java.lang.ArithmeticException: / by zero
      at org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher.getOutputSize(Unknown Source)
      at org.bouncycastle.jce.provider.JCEBlockCipher$BufferedGenericBlockCipher.getOutputSize(Unknown Source)
      at org.bouncycastle.jce.provider.JCEBlockCipher.engineGetOutputSize(Unknown Source)
      at org.bouncycastle.jce.provider.JCEBlockCipher.engineDoFinal(Unknown Source)
      at javax.crypto.Cipher.doFinal(Cipher.java:2087)</p>
</blockquote>

<p>I just tried to use the default Java Cryptography Extension (JCE), but it does not work with CFB Cipher mode with 1-bit. I need to use the ""AES"" algorithm with Cipher Mode ""CFB 1-bit"". It works fine with Cipher Mode ""CFB 8-bits"" and ""CFB 128-bits"".</p>

<pre><code>private static String buildCipherEncryptCheck(String data){

    byte[] dataBytes = data.getBytes();
    String encryptedData = null;

    try {                               
        // Generate valid key
        KeyGenerator keygenerator = KeyGenerator.getInstance(""AES"");                

        keygenerator.init(128);
        SecretKey myKey = keygenerator.generateKey();           

        // Generate cipher encrypt
        Cipher cipher = Cipher.getInstance(""AES/CFB1/PKCS5Padding"", new BouncyCastleProvider());

        // Initialize the cipher for encryption
        cipher.init(Cipher.ENCRYPT_MODE, myKey);                

        // Encrypt the text
        byte[] textEncrypted = cipher.doFinal(dataBytes);
        encryptedData = new String(Base64.encode(textEncrypted));

    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {
        e.printStackTrace();
    } catch (BadPaddingException e) {
        e.printStackTrace();
    }

    return encryptedData;
}   
</code></pre>
","<p>It's not clear to me how you'd apply PKCS #5 padding to a stream cipher. It might make sense to devise a bit-oriented padding for 1-bit CFB in order to pad out the last byte, but PKCS5Padding (PKCS #7, really) pads with bytes to fill out the final block. But a stream cipher doesn't have a block size. Don't you want <code>NoPadding</code> instead?</p>

<p>I suspect that the CFB mode engine is returning 0 as the block size, since it is undefined. When the padding engine tries to use this block size in its computation, the arithmetic error is thrown. (If this is what's happening, it would be better for BouncyCastle to validate the block size and throw a more specific error here.)</p>
","225","<java><algorithm><encryption><bouncycastle><jce>","2","0","1","2015-03-13 21:18:17","","2","3","745750","","2015-03-13 18:16:05","2015-03-13 17:41:54",""
"18489661","Why do I need to get the JCE to be able to handle keys larger than 128 bit?","<p>Why do I need to get the <strong>Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files</strong> to be able to handle keys larger than 128 bit? Why is it not bundled with Java SE?</p>
","<p>This is due to US export laws. Probably.</p>
","219","<java><security><policy><jce>","-1","0","2","2013-08-28 13:53:49","18489947","1","","","","","2013-08-28 13:42:13",""
"18489661","Why do I need to get the JCE to be able to handle keys larger than 128 bit?","<p>Why do I need to get the <strong>Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files</strong> to be able to handle keys larger than 128 bit? Why is it not bundled with Java SE?</p>
","<p>This was originally due to US export laws, which were mostly repealed during the Clinton administration. Now it is due to the <em>import</em> laws of various other countries.</p>
","219","<java><security><policy><jce>","-1","2","2","2013-08-28 13:53:49","18489947","1","","","","","2013-08-28 13:42:13",""
"49547071","PBEWithSHA1AndTripleDES vs PBEWithSHA1And3KeyTripleDES","<p>What's the difference of PBEWithSHA1AndTripleDES  and PBEWithSHA1And3KeyTripleDES, what does the 3key means there ? </p>

<p>All these 2 supported in IBM JCE as shown in below link </p>

<p><a href=""https://www.ibm.com/support/knowledgecenter/en/SSYKE2_9.0.0/com.ibm.java.multiplatform.90.doc/user/compsec_jce_algos.html"" rel=""nofollow noreferrer"">https://www.ibm.com/support/knowledgecenter/en/SSYKE2_9.0.0/com.ibm.java.multiplatform.90.doc/user/compsec_jce_algos.html</a></p>
","<p>In general '3-key' and '2-key' (aka triple-length and double-length key) are <a href=""https://en.wikipedia.org/wiki/Triple_DES#Keying_options"" rel=""nofollow noreferrer"">keying options 1 and 2</a> of the cipher commonly called Triple-DES or 3DES or TDES or DES-EDE, although it was officially defined as TDEA. (In Java crypto, DES-EDE is customarily spelled with no hyphen and second part lowercase = DESede -- although case is ignored when algorithms are looked up by <code>Cipher.getInstance()</code> and similar.) This applies in both password-based encryption as here, and regular (key-based) encryption. </p>

<p>The mappings in the table clearly show that IBM implements the two schemes of password-based encryption (for private keys) using 3DES with these two keying options, defined by <a href=""https://tools.ietf.org/html/rfc7292#appendix-C"" rel=""nofollow noreferrer"">PKCS12 aka rfc7292 in appendix C</a>:</p>

<pre><code>pbeWithSHAAnd3-KeyTripleDES-CBC  OBJECT IDENTIFIER ::= {pkcs-12PbeIds 3}
pbeWithSHAAnd2-KeyTripleDES-CBC  OBJECT IDENTIFIER ::= {pkcs-12PbeIds 4}
</code></pre>

<p>IBM provides several spellings of each name (with <code>-CBC</code> omitted) and for the 3-key scheme also the names with keying NOT specified <code>PBEWith{SHA-1,SHA1,SHA}And{3DES,DESede,TripleDES}</code> <em>and</em> the OID (which is usually more helpful for interchange) <code>{,OID.}1.2.840.113549.1.12.1.3</code> as synonyms. This may be intended to ease transition from the Oracle-was-Sun-and-OpenJDK implementation, which implements <em>only</em> the 3-key scheme with the tweaked and abbreviated name <code>PBEWithSHA1AndDESede</code> and the OID as a synonym (the latter not documented AFAICS). </p>

<p>OTOH IBM apparently implements the four other PKCS12 schemes, based on RC2 and RC4, using the standard spellings plus variants <code>PBEWith{SHA,SHA-1,SHA1}And{40,128}Bit{RC2-CBC,RC4}</code> (and no OIDs?) whereas Oracle-and-OpenJDK 8+ uses <code>PBEWithSHA1AND{RC2,RC4}_{40,128}</code> and the corresponding OIDs. Go figure. </p>
","217","<java><encryption><jce>","1","2","1","2018-03-31 07:31:59","49551586","1","","361010","","2018-03-29 02:34:06","2018-03-29 02:28:16",""
"31664109","Cannot read a public key for verification in java","<p>I need to be able to read a pem certificate that would be given to me by a client. For the purposes of testing, I created the key that I expect with:</p>

<pre><code>openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days -1 -nodes
</code></pre>

<p>I then implemented a reader with:</p>

<pre><code>public PublicKey getPublicKey()
        throws Exception {

    InputStream is = new ClassPathResource(""cert.pem"").getInputStream();
    byte[] keyBytes = ByteStreams.toByteArray(is);

    Base64.Decoder decoder = Base64.getDecoder();
    String bytesAsString = new String(keyBytes, StandardCharsets.UTF_8);
    System.out.println(bytesAsString);

    X509EncodedKeySpec spec =
            new X509EncodedKeySpec(keyBytes);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    return kf.generatePublic(spec);
}
</code></pre>

<p>The sysout presents the key, which appears to be well-formattd and about the right length. However on the last line I get the exception:</p>

<pre><code>java.security.spec.InvalidKeySpecException: java.security.InvalidKeyException: invalid key format
    at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:205)
    at java.security.KeyFactory.generatePublic(KeyFactory.java:334)
    at a.c.a.vaultorchestrator.service.VerifySignatureServiceTest.getPublicKey(VerifySignatureServiceTest.java:77)
    at a.c.a.vaultorchestrator.service.VerifySignatureServiceTest.testVerifySignature(VerifySignatureServiceTest.java:31)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)
    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)
    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)
Caused by: java.security.InvalidKeyException: invalid key format
    at sun.security.x509.X509Key.decode(X509Key.java:387)
    at sun.security.x509.X509Key.decode(X509Key.java:403)
    at sun.security.rsa.RSAPublicKeyImpl.&lt;init&gt;(RSAPublicKeyImpl.java:84)
    at sun.security.rsa.RSAKeyFactory.generatePublic(RSAKeyFactory.java:298)
    at sun.security.rsa.RSAKeyFactory.engineGeneratePublic(RSAKeyFactory.java:201)
    ... 29 more
</code></pre>

<p>Does anyone know why this is an invalid key?</p>
","<p>Found the solution. The problem was that they keys needed to be converted to der format in order to be read by java. The following commands fixed the issue:</p>

<pre><code>openssl rsa -in src/test/resources/key.pem -pubout -outform DER -out src/test/resources/cert.der

openssl pkcs8 -topk8 -inform PEM -outform DER -in key.pem -nocrypt -out key.der 
</code></pre>

<p>With these two conversions done, and the obvious need to change the referenced public key in the code above to ""cert.der"", all went well.</p>
","214","<java><openssl><rsa><jce>","0","1","1","2015-07-28 03:55:58","","0","","1816580","","2015-07-27 22:21:59","2015-07-27 22:03:23",""
"20877251","Android: Using SimpleFramework to create an XML string and Encrypt it is not working with large files","<p>I have an issue with my android application which only occurs every so often. I basically have a bunch of data in my database, which is converted to an XML String and that XML String is then Encrypted and saved in a file. The issue is that sometimes, when the file is more than about 3000 lines long, the file is corrupted, so when the file is decrypted, it has some garbage at the end of it, and some of the file is lost. I am not sure if the issue is in the encrypting of the String or in the converting of the Objects into XML. I have tried to reproduce and I cannot seem to understand why it only happens occasionally?</p>

<p>Below is the code </p>

<pre><code>public static boolean exportDB(int wellnessDayId) {
    Serializer serializer = new Persister();
    WellnessDay backToXMLWellnesday = ExportDbToXml.buildXmlDataModel(wellnessDayId);
    if (backToXMLWellnesday == null) {
        return false;
    }
    StringWriter sw = new StringWriter();
    FileOutputStream fos = null;
    FileOutputStream fosbackup = null;
    try {
        serializer.write(backToXMLWellnesday, sw);
        DesHelper des = new DesHelper(""12345678"");
        byte[] decryptedBytes = sw.toString().getBytes();

        //Calculating the size that the array should be (ie multiples of 8)
        Double len = Math.ceil(((double) decryptedBytes.length) / EIGHT) * EIGHT;
        byte[] decryptedBytesPadded = new byte[len.intValue()];

        //Initializing to whitespace character
        byte whiteSpaceBytevalue = 32;
        for (int k=0; k&lt; decryptedBytesPadded.length; k++){
            decryptedBytesPadded[k]= whiteSpaceBytevalue;
        }

        //Copying the array into the byte array that is the correct length (ie multiples of 8)
        System.arraycopy(decryptedBytes, 0, decryptedBytesPadded, 0, Math.min(decryptedBytes.length, len.intValue()));

        byte[] encryptedBytes = des.encrypt(decryptedBytesPadded);
        String filename = ""Export.blb"";
        File sdCard = Environment.getExternalStorageDirectory();
        File dir = new File(sdCard.getAbsolutePath() + ""/export"");
        dir.mkdirs();

        File file = new File(dir, filename);
        file.createNewFile();
        fos = new FileOutputStream(file);

        for (int p = 0; p &lt; encryptedBytes.length; p++) {
            fos.write(encryptedBytes[p]);
        }

        Format formatter;
        Date date = Calendar.getInstance().getTime();
        formatter = new SimpleDateFormat(""dd-MM-yyyy HH-mm-ss"");
        String dateFormatted = formatter.format(date);
        //Create Backup file in /Wellnessdays/archive
         File dirBackup = new File(sdCard.getAbsolutePath() + ""/archive"");
        dirBackup.mkdirs();
        File filebackup = new File(dirBackup, dateFormatted + "" - "" + filename);
        filebackup.createNewFile();
        fosbackup = new FileOutputStream(filebackup);
        for (int p = 0; p &lt; encryptedBytes.length; p++) {
            fosbackup.write(encryptedBytes[p]);
        }


    } catch (FileNotFoundException e) {
        Log.e(TAG, e.getMessage());
        return false;
    } catch (IOException e) {
        Log.e(TAG, e.getMessage());
        return false;
    } catch (GeneralSecurityException e) {
        Log.e(TAG, e.getMessage());
        return false;
    } catch (Exception e) {
        Log.e(TAG, e.getMessage());
        return false;
    } finally {
        if (fos != null) {
            try {
                fos.close();
            } catch (IOException e) {
                Log.e(""DatabaseExportToXML"", e.getMessage());
            }
        }
        if (fosbackup!=null){
            try {
                fosbackup.close();
            } catch (IOException e) {
                Log.e(""DatabaseExportToXML"", e.getMessage());
            }
        }
    }
    return true;
}

public class DesHelper {

public static int MAX_KEY_LENGTH = DESKeySpec.DES_KEY_LEN;
//private static String ENCRYPTION_ALGORITHM = ""DES/CBC/PKCS5Padding"";
private static String ENCRYPTION_ALGORITHM = ""DES/ECB/NoPadding"";
private static String ENCRYPTION_KEY_TYPE = ""DES"";

private final SecretKeySpec keySpec;

public DesHelper(String passphrase) {
    byte[] key;
    try {
        key = passphrase.getBytes(""UTF8"");
    } catch (UnsupportedEncodingException e) {
        throw new IllegalArgumentException(e);
    }
    //The key is always 8 bytes, no need to pad the key
    keySpec = new SecretKeySpec(key, ENCRYPTION_KEY_TYPE);
}

private byte[] padKeyToLength(byte[] key, int len) {
    byte[] newKey = new byte[len];
    System.arraycopy(key, 0, newKey, 0, Math.min(key.length, len));
    return newKey;
}

public byte[] encrypt(byte[] unencrypted) throws GeneralSecurityException {
    return doCipher(unencrypted, Cipher.ENCRYPT_MODE);
}

public byte[] decrypt(byte[] encrypted) throws GeneralSecurityException {
    return doCipher(encrypted, Cipher.DECRYPT_MODE);
}

private byte[] doCipher(byte[] original, int mode) throws GeneralSecurityException {
    Cipher cipher = Cipher.getInstance(ENCRYPTION_ALGORITHM);
    cipher.init(mode, keySpec);
    return cipher.doFinal(original);
}

}
</code></pre>

<p>Note: This is running in an AsyncTask</p>

<p>I do not understand why this is occurring only every so often, is there maybe a max limit on the size of Objects that the XML Serializer can accept? Or is there an issue with the size of the string that can be encrypted?</p>
","","212","<java><android><xml><encryption><jce>","0","","0","2014-01-02 11:44:07","","2","4","474189","","2014-01-02 11:44:07","2014-01-02 06:05:06",""
"6007780","Question (again) on eclipse debugging java apis","<p><br>
I have a question that pops up occusionally.<br>
I am trying to debug some jdk apis using eclipse.<br>
I have tried:<br>
1) Using the jre inside jdk (containing the jdk src) as the jre to use<br>
2) Adding the jdk src as a separate project and add reference from my project to the jdk project.<br>
I started debugging.<br>
I got into the jdk code but only up to a certain point.<br>
Then I got the ""Attach Source"" editor.<br>
The part of code I am trying to debug is part of java's pkix apis that uses the JCE provider architecture.<br>
So for example I do </p>

<pre><code>Certificate generateCertificate(fin);//I go into the code
</code></pre>

<p>then I step into </p>

<pre><code>return certFacSpi.engineGenerateCertificate(inStream);
</code></pre>

<p>And I get ""Source Not Found Editor""<br>
I see that the class called is:  </p>

<pre><code>public class sun.security.provider.X509Factory extends java.security.cert.CertificateFactorySpi
</code></pre>

<p>But I can not seem to find the package sun.security.provider in the jdk src.<br>
Isn't all src available from SUN? Am I doing something wrong in my environment setup?  </p>

<p>Any input is highly welcome  </p>
","<p>The full source code is distributed as separate jar file, but it's a little bit outdated (6u23): <a href=""http://download.java.net/jdk6/source/"" rel=""nofollow"">http://download.java.net/jdk6/source/</a></p>

<p>But you can also download the openjdk sources, that contain also the source of the sun specific classes.</p>
","211","<java><eclipse><security><java-ee><jce>","0","2","1","2011-05-15 10:36:52","","0","","","","","2011-05-15 10:18:02",""
"39173676","Java Create KeyPair hangs on VM but works on physical system","<p>I have some Java code which is creating a KeyPair using JCS and Bouncey Castle.  When I create a keypair on a physical Linux system like my desktop it works fine.  The key generation takes a second or two.  When I run the same code on a VM the key gen usually ""hangs"" (I leave it running for up to 5 minutes).  Sometimes it works in under 30 seconds but that's rare.</p>

<p>I'm guessing that this has something to do with not enough randomness being available on the VM, but I don't know how to work around this.</p>

<p>Here is the test code which is pulled from my actual program code and condensed:</p>

<pre><code>import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

public class KeyPairCreateTester {
    private static final String RANDOM_ALGO = ""SHA1PRNG"";

    public static void main(String[] args) {
        final String keyAlgo = ""RSA"";
        final int keySize = 2048;

        try {
            System.out.printf(""Creating random instance using %s\n"", RANDOM_ALGO);
            SecureRandom random = SecureRandom.getInstance(RANDOM_ALGO);
            System.out.printf(""Creating key using algo %s size %d\n"", keyAlgo, keySize);
            KeyPairGenerator keygen = KeyPairGenerator.getInstance(keyAlgo);
            System.out.printf(""Initialize\n"");
            keygen.initialize(keySize, random);
            System.out.printf(""Generating key\n"");
            KeyPair keyPair = keygen.generateKeyPair();
            System.out.println(""Success"");
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""No such algo"");
        }
    }

}
</code></pre>

<p>The ""hang"" occurs after ""Generating key"".</p>

<p>Adjusting the keySize down to even 512 has only minimal effect.  At 512 the key is generated a few times more often but it still hangs most of the time for at least 5 minutes.</p>

<p>The physical machine and the VM are both Ubuntu 16.04.</p>

<p>Java is 1.8.0_72 + 1.8.0_101 (I tried both).</p>

<p>Would REALLY appreciate some pointers on this one.  It's driving me crazy!</p>
","<p>Solved the problem by installing the haveged package and starting that service (systemctl start haveged).</p>
","202","<java><bouncycastle><jce>","1","2","1","2016-08-26 21:21:11","","3","","","","","2016-08-26 19:43:26","2016-08-26 21:47:13"
"48337425","Dynamically detect signature algorithms in JCE","<p>My application is on Java 7. I want to digitally verify a signed message sent by a calling system.</p>

<p>My problem is, I don't know the signature algorithm that has been used in the calling system.</p>

<p>In the runtime in JCE, how can I detect the signature algorithm to verify?</p>

<p>All the examples I have seen have the algorithm is pre-known or hardcoded</p>

<p><a href=""https://www.mkyong.com/java/java-digital-signatures-example/"" rel=""nofollow noreferrer"">https://www.mkyong.com/java/java-digital-signatures-example/</a><br>
<a href=""https://docs.oracle.com/javase/tutorial/security/apisign/index.html"" rel=""nofollow noreferrer"">https://docs.oracle.com/javase/tutorial/security/apisign/index.html</a></p>

<p>I am using Sun provided JCE implementation and cannot use any third party providers like Bouncy Castle.</p>

<p>I can do ASN parsing to detect the OID of the algorithm but again AFAIK JCE does not have any ways to detect the algorithm by passing the OID in java 7.</p>

<p>Please check here for that <a href=""https://stackoverflow.com/questions/48315041/fetching-messagedigest-by-oid-is-failing-in-java-7"">Fetching MessageDigest by OID is failing in Java 7</a></p>
","<p>You could extract the algorithm OID from signed message, but this is generally not the right way to solve your issue, because you have to deal with all the possibilities and the code will be too complex</p>

<ul>
<li><p>Padding algorithm: PSS, PKCS#1, etc</p></li>
<li><p>Key algorithm: RSA, EC, DSA</p></li>
<li><p>Hashing algorithm: SHA1, SHA256, etc.</p></li>
</ul>

<p>In the usual signature formats: <code>XMLDsig</code>, <code>CMS</code>, <code>PAdES</code>, <code>JWS</code> the signature algorithm is included in the signature container as an attribute</p>

<p>See this XMLDsig example using DSA with SHA1
<a href=""https://i.stack.imgur.com/oMc16.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oMc16.png"" alt=""xmldsig""></a></p>

<p>So, <strong>I suggest to include the signature algorithm in the message sent by calling system</strong>. For example in JWS signature is included a header like this <code>{""alg"":""RS256""}</code></p>

<hr>

<p>Of course if you are working with a limited set of keys and algorithms (i.e RSA-PKCS#1 with SHA) you could extract the OID from the signature decrypting the message and parsing the ASN.1</p>
","198","<java><digital-signature><jce>","2","2","1","2018-01-19 09:33:16","48337945","0","","466862","","2018-01-19 09:07:14","2018-01-19 09:02:53",""
"34872233","Encrypt/Decyrypt - Cipher - JceSecurity Restriction","<p>I am trying to encrypt/decrypt the data using javax.crypto.Ciper where I have given transformation as AES/ECB/PKCS5Padding.</p>

<p>My problem is when I run the code in Local machine, encryption / decryption works fine, however when I run the same code on Server, system throws Exception during Cipher.init(""AES/ECB/PKCS5Padding"").</p>

<p>On doing detailed analysis and checking the code inside Cipher.java, I found the problem is inside the following method <a href=""http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/javax/crypto/Cipher.java#Cipher.initCryptoPermission%28%29"" rel=""nofollow"">Cipher-initCryptoPermission()</a> when system checks for JceSecurity.isRestricted().</p>

<p>In my local machine, JceSecurity.isRestricted() returns FALSE, however when it runs on Server, the same method returns TRUE. Due to this on server, the system does not assigns right permissions to the Cipher.</p>

<p>Not sure, where exactly JceSecurity restriction is set. Appreciate your help. </p>
","<p>On doing deep-diving I found the real problem and solution.</p>

<p>Under Java_home/jre/lib/security there are two jar files, local_policy.jar and US_export_policy.jar. Inside local_policy.jar, there is a file called default_local.policy, which actually stores all the permissions of the cryptography.</p>

<p>In my local machine the file had AllPermission, hence there were no Restriction in JceSecurity for me and was allowing me to use AES encryption algorithm, but on the server it is having limited version as provided by Java bundle.</p>

<p>Replacing the local_policy.jar with no restrictions (or unlimited permissions) did the trick. </p>

<p>On reading more about it on Internet found that Java provides the restricted version with the download package as some countries have restrictions on using the type of cyptography algorithms, hence you must check with your organisation before replacing the jar files.</p>

<p>Jar files with no restrictions can be found on Oracle (Java) site at following location.<a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html"" rel=""nofollow"">Download link</a></p>
","197","<encryption><aes><jce>","1","1","1","2016-01-20 08:21:54","34894845","0","","","","","2016-01-19 08:49:48",""
"53851339","How to debug code without debug information?","<p>I come across unintended behavior while using the BouncyCastle Provider with the JCE. </p>

<p>I thus want to see whats happening inside and have to debug the code of the BouncyCastle Library. Sadly the classes I have to take a look into (XMSSMTKeyFactorySpi) seem to be <a href=""https://stackoverflow.com/questions/1872491/why-are-some-java-libraries-compiled-without-debugging-information"">compiled without debugging information</a> as both the local variable info and line numbers are missing.</p>

<p>I already thought of building it myself and including the debug information, however this does not work as the BouncyCastle provider is a Security provider for the JCE and has to be signed in order to be used with JCE. (Which I have to do as the error only occurs when using BC with JCE)</p>

<p>So <strong>how can I debug the code in question without debugging information being included to the .class?</strong></p>

<p>Is there even a way of doing so? </p>

<p>One solution would be to rebuild the BC provider and send it to Oracle to get signed as described <a href=""https://stackoverflow.com/a/1757186/9343156"">here</a>, but I kinda don't want to do this. At least not if there is another way.</p>

<hr>

<p>Edit: to debug the BC Provider code one can simply take one from <a href=""https://www.bouncycastle.org/latest_releases.html"" rel=""nofollow noreferrer"">Providers with debug</a>, thank you @JamesKPolk</p>
","","194","<java><debugging><compilation><bouncycastle><jce>","0","","0","2018-12-20 09:06:14","","3","","9343156","","2018-12-20 09:06:14","2018-12-19 12:32:02",""
"8425258","How to add Java Security Provider without certificate ?","<p>I wonder, is there a way to add a new java security provider on my local machine without sending it to Oracle for certificate? </p>

<p>The thing is i'm studying JCA and have a task to implement my own provider (the main task is implementing some algorithm). 
But it's impossible to understand the very important principles of JCA without actual use of my provider. Reading doc's and viewing source files isn't enough for it.</p>
","","192","<java><jce><jca>","0","","0","2011-12-08 02:04:49","","2","","","","","2011-12-08 02:04:49",""
"38565042","CMSEncryptedData decryption with Bouncy Castle throws BadPaddingException: pad block corrupted","<p>I have CMS encrypted data using Bouncy Castle and I would like to decrypt it's content. However, I am running into a problem of getting <code>javax.crypto.BadPaddingException: pad block corrupted</code>. I believe, there is something wrong with the secrete key</p>

<pre><code>val provider = new BouncyCastleProvider()

// output encoder
val gen = new CMSEncryptedDataGenerator()
val encoder = new JceCMSContentEncryptorBuilder(CMSAlgorithm.DES_EDE3_CBC).setProvider(BouncyCastleProvider.PROVIDER_NAME).build()

// secrete key
val spec = new DESedeKeySpec(encoder.getKey.getRepresentation.asInstanceOf[Array[Byte]])
val keyFactory = SecretKeyFactory.getInstance(""DESEDE"", provider)
val secretKey = keyFactory.generateSecret(spec)

// Encryption
val cmsEncryptedData: CMSEncryptedData = gen.generate(new CMSProcessableByteArray(""Hello World!"".getBytes()), encoder)

// Decryption
val decryptedContententBinary: Array[Byte] = {
  cmsEncryptedData.getContent(new InputDecryptorProvider {
    override def get(algorithm: AlgorithmIdentifier): InputDecryptor = new InputDecryptor {

      override def getAlgorithmIdentifier: AlgorithmIdentifier = algorithm

      override def getInputStream(encIn: InputStream): InputStream = {
        val parameters = new JceAlgorithmIdentifierConverter().setProvider(provider).getAlgorithmParameters(algorithm)
        val cipher = Cipher.getInstance(parameters.getAlgorithm, provider)
        cipher.init(Cipher.DECRYPT_MODE, secretKey, parameters) // throws javax.crypto.BadPaddingException: pad block corrupted
        new CipherInputStream(encIn, cipher)
      }
    }
  })
}
</code></pre>
","<p>I have just fixed the problem I had. Here is the working code:</p>

<pre><code>// output encoder
val gen = new CMSEncryptedDataGenerator()
val random = new SecureRandom()
val encoder = new JceCMSContentEncryptorBuilder(CMSAlgorithm.DES_EDE3_CBC).setProvider(BouncyCastleProvider.PROVIDER_NAME).setSecureRandom(random).build()


// secrete key
val key = new SecretKeySpec(encoder.getKey.getRepresentation.asInstanceOf[Array[Byte]], ""DESede"")

// Encryption
val cmsEncryptedData: CMSEncryptedData = gen.generate(new CMSProcessableByteArray(""Hello World!"".getBytes()), encoder)


// Decryption
val decryptedContententBinary: Array[Byte] = {
  cmsEncryptedData.getContent(new InputDecryptorProvider {
    override def get(algorithm: AlgorithmIdentifier): InputDecryptor = new InputDecryptor {

      override def getAlgorithmIdentifier: AlgorithmIdentifier = algorithm

      override def getInputStream(encIn: InputStream): InputStream = {

        val parameters = new JceAlgorithmIdentifierConverter().setProvider(provider).getAlgorithmParameters(encoder.getAlgorithmIdentifier)
        val cipher = Cipher.getInstance(algorithm.getAlgorithm.getId, provider)
        cipher.init(Cipher.DECRYPT_MODE, key, parameters)
        new CipherInputStream(encIn, cipher)
      }
    }
  })
}
</code></pre>
","178","<scala><encryption><bouncycastle><jce>","0","0","1","2016-07-27 12:20:11","38612397","1","","4194496","","2016-07-27 08:21:29","2016-07-25 10:14:48",""
"19014700","How to add custom text when jce editor 2.3.1 is loaded","<p>Dear Friends this is for joomla peeps.</p>

<p>I have a joomla 2.5 with K2 and i have install JCE Editor 2.3.
Is there any possibility to tell me how can i add a custom text so when my editor comes up to display it?</p>

<p>This custom text is (my ads3ns3 script and some other divs). i want always to appear this so i can bypass the copy/paste all the time.</p>

<p>I searched all the jce editor files but i didnt find any input field so i can give it the value that i want.</p>

<p>I've open all the .php files but still nothing..</p>

<p>Regards</p>
","<p>You could use <strong>JCE Template Manager</strong> plugin to achieve this without need to rewrite JCE core files .. JCE is known as a target for Joomla hacks and needs to be updated regularly, and if you edit JCE core files you would have to apply described change all over again with every new update. </p>
","178","<joomla><jce>","0","0","1","2013-09-27 11:56:46","","3","","","","","2013-09-25 20:34:19",""
"49540299","How to add JCE to JRE bundle in Install4j","<p>I need to create installer using <a href=""https://www.ej-technologies.com/products/install4j/overview.html"" rel=""nofollow noreferrer"">install4j</a> with the bundled JRE inside. When user installs it he gets app.exe without need to install JRE/JDK. But there is <a href=""https://www.bouncycastle.org/java.html"" rel=""nofollow noreferrer"">bouncy castle lib</a> which requires <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""nofollow noreferrer"">JCE</a>. After installation I can manually add JCE to jre bundle, but I need installer does it by itself.</p>

<p>How to create JRE/JDK bundle with JCE using install4j? Is it possible?</p>

<p><a href=""https://i.stack.imgur.com/HqtkZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/HqtkZ.png"" alt=""enter image description here""></a></p>
","<p>Seeing the version you're bundling (Java 8.152) you might be able to get by with just calling <code>Security.setProperty(""crypto.policy"", ""unlimited"");</code> in your main class code.
And if you can use a more recent version, JCE may be enabled by default.</p>

<p>Source: The answers and comments at <a href=""https://stackoverflow.com/questions/42159690/why-are-the-jce-unlimited-strength-not-included-by-default"">Why are the JCE Unlimited Strength not included by default?</a></p>
","172","<java><install4j><jce>","2","3","1","2018-03-29 11:45:34","49551802","0","","7179509","","2018-03-29 11:45:34","2018-03-28 17:00:49",""
"49881332","Java web call over https failing due to handshake_failure","<p>I am calling a service over https and it is failing with handshake_failure error. Not able to understand the reason. I have the correct server certificate and that is placed in my cacerts file. I have obtained following JSSE trace. </p>

<pre><code>trigger seeding of SecureRandom
done seeding SecureRandom
Allow unsafe renegotiation: false
Allow legacy hello messages: true
Is initial handshake: true
Is secure renegotiation: false
main, setSoTimeout(5000) called
Ignoring unsupported cipher suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 for TLSv1
Ignoring unsupported cipher suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 for TLSv1
Ignoring unsupported cipher suite: TLS_RSA_WITH_AES_256_CBC_SHA256 for TLSv1
Ignoring unsupported cipher suite: TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 for TLSv1
Ignoring unsupported cipher suite: TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 for TLSv1
Ignoring unsupported cipher suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 for TLSv1
Ignoring unsupported cipher suite: TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 for TLSv1
Ignoring unsupported cipher suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 for TLSv1.1
Ignoring unsupported cipher suite: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 for TLSv1.1
Ignoring unsupported cipher suite: TLS_RSA_WITH_AES_256_CBC_SHA256 for TLSv1.1
Ignoring unsupported cipher suite: TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 for TLSv1.1
Ignoring unsupported cipher suite: TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 for TLSv1.1
Ignoring unsupported cipher suite: TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 for TLSv1.1
Ignoring unsupported cipher suite: TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 for TLSv1.1
%% No cached client session
*** ClientHello, TLSv1.2
RandomCookie:  GMT: 1507199237 bytes = { 28, 231, 211, 145, 72, 123, 216, 22, 202, 150, 123, 212, 202, 60, 168, 238, 86, 75, 34, 107, 197, 190, 198, 222, 41, 94, 201, 249 }
Session ID:  {}
Cipher Suites: [TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, TLS_DHE_DSS_WITH_AES_256_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_DSS_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA, SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA, TLS_EMPTY_RENEGOTIATION_INFO_SCSV]
Compression Methods:  { 0 }
Extension elliptic_curves, curve names: {secp256r1, secp384r1, secp521r1}
Extension ec_point_formats, formats: [uncompressed]
Extension signature_algorithms, signature_algorithms: SHA512withECDSA, SHA512withRSA, SHA384withECDSA, SHA384withRSA, SHA256withECDSA, SHA256withRSA, SHA224withECDSA, SHA224withRSA, SHA1withECDSA, SHA1withRSA, SHA1withDSA
***
[write] MD5 and SHA1 hashes:  len = 163
0000: 01 00 00 9F 03 03 5A D6   09 05 1C E7 D3 91 48 7B  ......Z.......H.
0010: D8 16 CA 96 7B D4 CA 3C   A8 EE 56 4B 22 6B C5 BE  .......&lt;..VK""k..
0020: C6 DE 29 5E C9 F9 00 00   48 C0 24 C0 28 00 3D C0  ..)^....H.$.(.=.
0030: 26 C0 2A 00 6B 00 6A C0   0A C0 14 00 35 C0 05 C0  &amp;.*.k.j.....5...
0040: 0F 00 39 00 38 C0 23 C0   27 00 3C C0 25 C0 29 00  ..9.8.#.'.&lt;.%.).
0050: 67 00 40 C0 09 C0 13 00   2F C0 04 C0 0E 00 33 00  g.@...../.....3.
0060: 32 C0 08 C0 12 00 0A C0   03 C0 0D 00 16 00 13 00  2...............
0070: FF 01 00 00 2E 00 0A 00   08 00 06 00 17 00 18 00  ................
0080: 19 00 0B 00 02 01 00 00   0D 00 18 00 16 06 03 06  ................
0090: 01 05 03 05 01 04 03 04   01 03 03 03 01 02 03 02  ................
00A0: 01 02 02                                           ...
main, WRITE: TLSv1.2 Handshake, length = 163
[Raw write]: length = 168
0000: 16 03 03 00 A3 01 00 00   9F 03 03 5A D6 09 05 1C  ...........Z....
0010: E7 D3 91 48 7B D8 16 CA   96 7B D4 CA 3C A8 EE 56  ...H........&lt;..V
0020: 4B 22 6B C5 BE C6 DE 29   5E C9 F9 00 00 48 C0 24  K""k....)^....H.$
0030: C0 28 00 3D C0 26 C0 2A   00 6B 00 6A C0 0A C0 14  .(.=.&amp;.*.k.j....
0040: 00 35 C0 05 C0 0F 00 39   00 38 C0 23 C0 27 00 3C  .5.....9.8.#.'.&lt;
0050: C0 25 C0 29 00 67 00 40   C0 09 C0 13 00 2F C0 04  .%.).g.@...../..
0060: C0 0E 00 33 00 32 C0 08   C0 12 00 0A C0 03 C0 0D  ...3.2..........
0070: 00 16 00 13 00 FF 01 00   00 2E 00 0A 00 08 00 06  ................
0080: 00 17 00 18 00 19 00 0B   00 02 01 00 00 0D 00 18  ................
0090: 00 16 06 03 06 01 05 03   05 01 04 03 04 01 03 03  ................
00A0: 03 01 02 03 02 01 02 02                            ........
[Raw read]: length = 5
0000: 15 03 03 00 02                                     .....
[Raw read]: length = 2
0000: 02 28                                              .(
main, READ: TLSv1.2 Alert, length = 2
main, RECV TLSv1.2 ALERT:  fatal, handshake_failure
main, called closeSocket()
main, handling exception: javax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure
main, called close()
main, called closeInternal(true)
</code></pre>

<p>Can someone help me understand why this is happening?</p>
","","169","<java><security><ssl><jce><jsse>","1","","0","2018-04-18 07:10:00","","3","","877942","","2018-04-18 07:10:00","2018-04-17 14:53:15",""
"47423230","Why does Lambda generate identical cryptographic keys after initialization and how to fix it?","<p>I've noticed something weird when generating key pairs from AWS Lambda - every time I run the code it generates identical keys. I am aware that Lambda containers are frozen after each invocation and this is probably why the underlying JCE classes are loaded from memory and keep their initial state. The code in question is relatively simple:</p>

<pre><code>KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(""RSA"", ""BC"");
keyPairGen.initialize(2048);
KeyPair keyPair = keyPairGen.generateKeyPair();
RSAPublicKey rsaPublicKey = (RSAPublicKey) keyPair.getPublic();
RSAPrivateKey rsaPrivateKey = (RSAPrivateKey) keyPair.getPrivate();

return new RSAKey.Builder(rsaPublicKey).privateKey(rsaPrivateKey)
            .keyID(kid).keyUse(KeyUse.SIGNATURE)
</code></pre>

<p>I tried both the vanilla provider and Bouncy Castle but the result is the same - identical key pairs when Lambda is ""warm"". Once the container is terminated and restarted from a ""cold"" state, I get a new and different set of keys.</p>

<p>I'm also using AWS Cognito and the service is served through both API Gateway and CloudFront.</p>

<p>Any ideas how to ""refresh"" the underlying JCE classes?</p>
","<p>To answer my own question, the culprit was actually CloudFront. Even with API caching turned off in API Gateway, CloudFront still caches the responses for some API requests.</p>

<p>If someone comes across the same problem, the solution is to ""bust"" the CloudFront cache by appending a query parameter to the request URL:</p>

<pre><code>GET /api/generateKeyPair?timestamp=1507843759370
</code></pre>
","163","<java><aws-lambda><amazon-cloudfront><jce>","3","1","1","2017-12-08 03:39:26","47424758","3","","3330296","","2017-12-08 03:39:26","2017-11-21 21:42:08",""
"30346237","Update JAR libraries under Java\jre7\lib\security","<p><br/>
I have an application which uses unlimited JCE API. In order to get it working I had to copy the <strong>US_export_policy.jar</strong> and <strong>local_policy.ja</strong>r under the Java\jre7\lib\security. Unfortunately on some machines I don't have the rights to overwrite the JRE files. Is it possible to override the default libs passing them as JVM boot parameter ? (bootclasspath for example) or even Programmatically ?
Thanks</p>
","<p>If you are looking for a Programmatic solution, the following one will work:</p>

<pre><code>try { 
Field field = Class.forName(""javax.crypto.JceSecurity"").
getDeclaredField(""isRestricted"");
field.setAccessible(true);
field.set(null, java.lang.Boolean.FALSE); 
} catch (Exception ex) {
ex.printStackTrace();
}
</code></pre>

<p>regards</p>
","157","<java><jce>","1","1","1","2015-05-20 11:28:54","30348349","2","","","","","2015-05-20 09:53:47",""
"13189053","Generating key bytes without KeyGenerator","<p>With an environments without JCA(JCE) such as <code>Java ME</code>, would it be OK to generating key (or iv) bytes with <code>java.util.Random</code>?</p>

<pre class=""lang-java prettyprint-override""><code>// MIDP
// MIDP
// MIDP

private static final Random RANDOM = new Random();


/**
 * Generates a new encryption key. This method is not intended to be used in
 * production stage.
 *
 * @return a new encryption key.
 */
protected static byte[] newKey() {

    final Random random;
    synchronized (RANDOM) {
        random = new Random(RANDOM.nextLong());
    }

    final byte[] key = new byte[256]; // AES 256
    for (int i = 0; i &lt; key.length; i++) {
        key[i] = (byte) random.nextInt(256);
    }

    return key;
}
</code></pre>

<p>Is there any crypto-graphic concerns?</p>

<p>Is there any typos in this question including the source codes and comments? (I'm not good at in Uslish.)</p>
","","153","<encryption><jce><jca>","0","","0","2012-11-02 03:52:18","","5","","","","","2012-11-02 03:52:18",""
"57291941","JCE in AdoptOpenJDK 11","<p>Java Cryptography Extension (JCE) can be found <a href=""https://www.oracle.com/technetwork/java/javase/downloads/jce-all-download-5170447.html"" rel=""nofollow noreferrer"">here</a>, but that page says</p>

<blockquote>
  <p>Current versions of the JDK do not require these policy files. They are provided here for use with older version of the JDK.</p>
  
  <p>JDK 9 and later ship with, and use by default, the unlimited policy files.</p>
</blockquote>

<p>Does this apply to <a href=""https://adoptopenjdk.net/"" rel=""nofollow noreferrer"">AdoptOpenJDK</a> 11 as well? Or is this restricted to Oracle's JDKs? How do I know they are available?</p>
","","151","<jce><adoptopenjdk>","2","","0","2019-07-31 13:28:39","","0","","","","","2019-07-31 13:28:39",""
"55401090","Difference between PBE and PBKDF2 in Java","<p>I read in <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory"" rel=""nofollow noreferrer"">documentation</a> that <code>SecretKeyFactory</code> accepts both <code>PBEWith...</code> algorithms and <code>PBKDF2With...</code> algorithms. According to PKCS #5 (current version is 2.1 specified by <a href=""https://tools.ietf.org/html/rfc8018"" rel=""nofollow noreferrer"">RFC 8018</a>), PBE (Password-Based Encryption) uses PBKDF (Password-Based Key Derivation Function). Why would the generated key be different (or are they different)? Haven’t PBE covered the case for PBKDF?</p>
","","151","<java><encryption-symmetric><jce><pbkdf2>","0","","0","2019-03-28 15:14:33","","5","","","","","2019-03-28 15:14:33",""
"33522651","OpenShift with Grails and Quartz","<p>I'm currently developing an application using OpenShift as a server (default configuration) with Tomcat 7 (JBoss EWS 2.0), MySQL 5.5 and phpMyAdmin 4.0.
I'd like to schedule an event to run everyday and I'm using Quartz plugin for it.
Locally, I'm able to test everything and works pretty fine, but when I deploy my application on OpenShift, nothing happens. The jboss.log shows this message:</p>

<pre><code>ERROR grails.plugins.quartz.listeners.ExceptionPrinterJobListener - Exception occurred in job: Grails Job
org.quartz.JobExecutionException: java.lang.InternalError
        at grails.plugins.quartz.GrailsJobFactory$GrailsJob.execute(GrailsJobFactory.java:111) ~[quartz-2.0.0.M4.jar:na]
        at org.quartz.core.JobRunShell.run(JobRunShell.java:202) ~[quartz-2.2.1.jar:na]
        at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573) [quartz-2.2.1.jar:na]
Caused by: java.lang.InternalError: null
at sun.misc.URLClassPath$JarLoader.getResource(URLClassPath.java:838) ~[na:1.7.0_85]
        at sun.misc.URLClassPath.getResource(URLClassPath.java:199) ~[na:1.7.0_85]
        at sun.misc.URLClassPath.getResource(URLClassPath.java:251) ~[na:1.7.0_85]
        at java.lang.ClassLoader.getBootstrapResource(ClassLoader.java:1305) ~[na:1.7.0_85]
        at java.lang.ClassLoader.getResource(ClassLoader.java:1144) ~[na:1.7.0_85]
        at java.lang.ClassLoader.getResource(ClassLoader.java:1142) ~[na:1.7.0_85]
        at java.lang.ClassLoader.getSystemResource(ClassLoader.java:1267) ~[na:1.7.0_85]
        at javax.crypto.JceSecurity.setupJurisdictionPolicies(JceSecurity.java:251) ~[na:na]
        at javax.crypto.JceSecurity.access$000(JceSecurity.java:48) ~[na:na]
        at javax.crypto.JceSecurity$1.run(JceSecurity.java:78) ~[na:na]
        at java.security.AccessController.doPrivileged(Native Method) ~[na:1.7.0_85]

...
Caused by: java.io.FileNotFoundException: /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.85/jre/lib/jce.jar
</code></pre>

<p>I'm cannot check the environment to see if the jce.jar is currently in this directory.</p>

<p>I'll appreciate any help.</p>
","","149","<grails><openshift><quartz-scheduler><jce>","1","","0","2015-11-04 13:01:31","","0","0","","","","2015-11-04 13:01:31",""
"57265305","HSM decryption + encryption chaining","<p>My application is acting as a switchboard to transfer very sensitive messages between two parties and I'm trying to figure out how I can do this without ""looking"" at the message they're trying to send. </p>

<p>I have a HSM, and I've generated a keypair for the sender - they're going to encrypt the message with their public key that I gave them, and I can decrypt the message using the private key I have in the HSM. </p>

<p>I'm going to then pass that message on by encrypting it with the public key of the ultimate receiver, which I have. </p>

<p>Is there any way to chain these two operations inside the HSM, without having the decrypted message anywhere near my application memory? I would like the plaintext content to never leave the boundaries of the HSM.</p>

<p>I know that some HSMs have a CodeSafe / SEE machine feature that lets me write embedded system code and run it inside the HSM, before I get into that I'd like to see if there's a way using the general PKCS / JCE / CNG APIs to do this safely.</p>
","<p>If all you need is to re-encrypt the same secret under a different key, you can use <code>C_Unwrap</code> to create a temporal HSM object with value of the translated secret and then use <code>C_Wrap</code> to encrypt the value of this temporal HSM object for all the recipients.</p>

<p>This way the secret will never leave HSM.</p>

<p>Something like this (verified to be working on SafeNet Luna 7 with RSA-OAEP):</p>

<pre><code>// Your private key for 'decrypting' secret. Must have key unwrapping allowed
CK_OBJECT_HANDLE hsmPrivateKey = ... ;

// Encrypted secret
byte[] wrappedKey = ... ; // 

// Template for temporal generic secret key with value of the secret
CK_ATTRIBUTE[] tempTemplate = new CK_ATTRIBUTE[] {
        new CK_ATTRIBUTE(CKA.CLASS, CKO.SECRET_KEY),
        new CK_ATTRIBUTE(CKA.KEY_TYPE, CKK.GENERIC_SECRET),
        new CK_ATTRIBUTE(CKA.TOKEN, false),
        new CK_ATTRIBUTE(CKA.PRIVATE, true),
        new CK_ATTRIBUTE(CKA.EXTRACTABLE, true),
        new CK_ATTRIBUTE(CKA.SENSITIVE, true),
        new CK_ATTRIBUTE(CKA.ENCRYPT, false),
        new CK_ATTRIBUTE(CKA.DECRYPT, false),
        new CK_ATTRIBUTE(CKA.WRAP, false),
        new CK_ATTRIBUTE(CKA.UNWRAP, false),
        new CK_ATTRIBUTE(CKA.SIGN, false),
        new CK_ATTRIBUTE(CKA.VERIFY, false),
        new CK_ATTRIBUTE(CKA.DERIVE, false)
};

// Unwrapping/decryption mechanism
CK_MECHANISM mechanism = ... ;

// Handle for temporal generic secret key with value of the secret
CK_OBJECT_HANDLE temporalValueHandle = new CK_OBJECT_HANDLE();

// Unwrap/decrypt the secret into temporal key
CryptokiEx.C_UnwrapKey(session, mechanism, hsmPrivateKey, wrappedKey, wrappedKey.length, tempTemplate, tempTemplate.length, temporalValueHandle);

// Wrap/encrypt the secret for recipients. Recipient public keys must have key wrapping allowed
for(CK_OBJECT_HANDLE recipientPublicKey : ... ) {
    LongRef resSize = new LongRef(0);
    CryptokiEx.C_WrapKey(session, mechanism, recipientPublicKey, temporalValueHandle, null, resSize);
    byte[] rewrappedKey = new byte[CryptokiUtils.safeIntCast(resSize.value)];
    CryptokiEx.C_WrapKey(session, mechanism, recipientPublicKey, temporalValueHandle, rewrappedKey, resSize);
    System.out.println(""Re-wrapped key: "" + bytesToHexString(rewrappedKey));
}

// Delete temporal generic secret key
CryptokiEx.C_DestroyObject(session, temporalValueHandle);
</code></pre>

<p>Good luck!</p>
","143","<encryption><pkcs#11><jce><hsm><cng>","2","0","1","2019-08-04 15:12:06","","12","1","","","","2019-07-30 06:10:46",""
"39527260","CAS: Content encryption header (enc) not set","<p>I got this exception when I tried to log in. As you can see i successfully got the ticket granting ticket. However, for somereason I get the ""CAS is Unavailable"" screen. Down in the stack trace I can see <code>org.jose4j.lang.InvalidAlgorithmException: Content encryption header (enc) not set.</code> Which might be the root problem, but I can't really find a good solution for that.</p>

<pre><code>   2016-09-16 10:21:13,868 INFO [org.jasig.inspektr.audit.support.Slf4jLoggingAuditTrailManager] - Audit trail record BEGIN
    =============================================================
    WHO: audit:unknown
    WHAT: TGT-**********************************************glwdSALMyP-cas01.example.org
    ACTION: TICKET_GRANTING_TICKET_CREATED
    APPLICATION: CAS
    WHEN: Fri Sep 16 10:21:13 CEST 2016
    CLIENT IP ADDRESS: 0:0:0:0:0:0:0:1
    SERVER IP ADDRESS: 0:0:0:0:0:0:0:1
    =============================================================


2016-09-16 10:21:13,868 DEBUG [org.jasig.cas.web.support.WebUtils] - Evaluating request to determine if warning cookie should be generated
2016-09-16 10:21:13,868 DEBUG [org.jasig.cas.web.WarningCookieRetrievingCookieGenerator] - Removed cookie with name [CASPRIVACY]
2016-09-16 10:21:13,868 DEBUG [org.jasig.cas.web.support.DefaultCasCookieValueManager] - Encoding cookie value [TGT-**********************************************glwdSALMyP-cas01.example.org@0:0:0:0:0:0:0:1@Mozilla/5.0 (Windows NT 6.1; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0]
2016-09-16 10:21:13,884 DEBUG [org.jasig.cas.util.DefaultCipherExecutor] - Encrypting via [null]
2016-09-16 10:21:14,055 DEBUG [org.jasig.cas.web.FlowExecutionExceptionResolver] - Ignoring the received exception due to a type mismatch
org.springframework.webflow.execution.ActionExecutionException: Exception thrown executing org.jasig.cas.web.flow.SendTicketGrantingTicketAction@53e9a90f in state 'sendTicketGrantingTicket' of flow 'login' -- action execution attributes were 'map[[empty]]'
    at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:60)
    at org.springframework.webflow.action.EvaluateAction.doExecute(EvaluateAction.java:77)
    at org.springframework.webflow.action.AbstractAction.execute(AbstractAction.java:188)
    at org.springframework.webflow.execution.AnnotatedAction.execute(AnnotatedAction.java:145)
    at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:51)
    at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:101)
    at org.springframework.webflow.engine.State.enter(State.java:194)
    at org.springframework.webflow.engine.Transition.execute(Transition.java:228)
    at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395)
    at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214)
    at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116)
    at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547)
    at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390)
    at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210)
    at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:105)
    at org.springframework.webflow.engine.State.enter(State.java:194)
    at org.springframework.webflow.engine.Transition.execute(Transition.java:228)
    at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395)
    at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214)
    at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116)
    at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547)
    at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390)
    at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210)
    at org.springframework.webflow.engine.ViewState.handleEvent(ViewState.java:231)
    at org.springframework.webflow.engine.ViewState.resume(ViewState.java:195)
    at org.springframework.webflow.engine.Flow.resume(Flow.java:537)
    at org.springframework.webflow.engine.impl.FlowExecutionImpl.resume(FlowExecutionImpl.java:259)
    at org.springframework.webflow.executor.FlowExecutorImpl.resumeExecution(FlowExecutorImpl.java:169)
    at org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.handle(FlowHandlerAdapter.java:228)
    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)
    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)
    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)
    at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:648)
    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:729)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.jasig.cas.security.ResponseHeadersEnforcementFilter.doFilter(ResponseHeadersEnforcementFilter.java:227)
    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)
    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.jasig.cas.security.RequestParameterPolicyEnforcementFilter.doFilter(RequestParameterPolicyEnforcementFilter.java:250)
    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)
    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.jasig.inspektr.common.web.ClientInfoThreadLocalFilter.doFilter(ClientInfoThreadLocalFilter.java:62)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)
    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
    at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616)
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:521)
    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1096)
    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:674)
    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:279)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
    at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Ensure that you have installed JCE Unlimited Strength Jurisdiction Policy Files. Content encryption header (enc) not set.
    at org.jasig.cas.util.DefaultCipherExecutor.encryptValue(DefaultCipherExecutor.java:135)
    at org.jasig.cas.util.DefaultCipherExecutor.encode_aroundBody0(DefaultCipherExecutor.java:86)
    at org.jasig.cas.util.DefaultCipherExecutor$AjcClosure1.run(DefaultCipherExecutor.java:1)
    at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149)
    at org.jasig.inspektr.aspect.TraceLogAspect.traceMethod(TraceLogAspect.java:44)
    at org.jasig.cas.util.DefaultCipherExecutor.encode(DefaultCipherExecutor.java:85)
    at org.jasig.cas.util.DefaultCipherExecutor.encode(DefaultCipherExecutor.java:1)
    at org.jasig.cas.web.support.DefaultCasCookieValueManager.buildCookieValue_aroundBody0(DefaultCasCookieValueManager.java:72)
    at org.jasig.cas.web.support.DefaultCasCookieValueManager$AjcClosure1.run(DefaultCasCookieValueManager.java:1)
    at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149)
    at org.jasig.inspektr.aspect.TraceLogAspect.traceMethod(TraceLogAspect.java:44)
    at org.jasig.cas.web.support.DefaultCasCookieValueManager.buildCookieValue(DefaultCasCookieValueManager.java:53)
    at org.jasig.cas.web.support.CookieRetrievingCookieGenerator.addCookie_aroundBody0(CookieRetrievingCookieGenerator.java:67)
    at org.jasig.cas.web.support.CookieRetrievingCookieGenerator$AjcClosure1.run(CookieRetrievingCookieGenerator.java:1)
    at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149)
    at org.jasig.inspektr.aspect.TraceLogAspect.traceMethod(TraceLogAspect.java:44)
    at org.jasig.cas.web.support.CookieRetrievingCookieGenerator.addCookie(CookieRetrievingCookieGenerator.java:66)
    at org.jasig.cas.web.flow.SendTicketGrantingTicketAction.doExecute(SendTicketGrantingTicketAction.java:85)
    at org.springframework.webflow.action.AbstractAction.execute(AbstractAction.java:188)
    at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:51)
    ... 74 more
Caused by: org.jose4j.lang.InvalidAlgorithmException: Content encryption header (enc) not set.
    at org.jose4j.jwe.JsonWebEncryption.getContentEncryptionAlgorithm(JsonWebEncryption.java:131)
    at org.jose4j.jwe.JsonWebEncryption.getCompactSerialization(JsonWebEncryption.java:242)
    at org.jasig.cas.util.DefaultCipherExecutor.encryptValue(DefaultCipherExecutor.java:133)
    ... 93 more
</code></pre>
","<p>Turns out you have to add keys in the <code>cas.properties</code> for the TGC encryption:</p>

<pre><code># The encryption secret key. By default, must be a octet string of size 256.
tgc.encryption.key=***

# The signing secret key. By default, must be a octet string of size 512.
tgc.signing.key=***
</code></pre>

<p>In order to get keys use <a href=""https://github.com/mitreid-connect/json-web-key-generator"" rel=""nofollow"">this</a> tool.</p>

<p><a href=""https://apereo.github.io/cas/4.2.x/installation/Configuring-SSO-Session-Cookie.html"" rel=""nofollow"">Here</a> is the reference in the CAS 4.2.x documentation.</p>

<p>It mentioned that the CAS server will automatically generate keys for the TGC if not set before, but I couldn't find them in my console so I used the mentioned tool. Don't forget to choose <code>oct</code> as the key type.</p>
","143","<cas><jce>","0","0","1","2016-09-20 07:31:30","39588218","0","","","","","2016-09-16 08:47:57",""
"47116595","Joomla editors TinyMCE and JCE eliminating attributes","<p>I have the following HTML markup</p>

<pre><code>&lt;video poster=""home-bg.jpg"" autoplay=""autoplay"" loop=""loop"" muted="""" data-autoplay="""" playsinline="""" width=""982"" height=""552""&gt;
&lt;source src=""short.mp4"" type=""video/mp4""&gt;
&lt;/video&gt;
</code></pre>

<p>The problem is that the Joomla editors, at least the two main ones tinyMCE and JCE, are eliminating the attribute playsinline from the Video tag.</p>

<p>I already tried adding exceptions or adding this attribute to valid attributes but I have had not success.</p>

<p>The attribute gets eliminated no matter what.</p>

<p>If I disable all editors the attribute remains but I need the editors active.</p>

<p>Any help?</p>
","<p>You can modify how an element is filtered by TinyMCE using the <code>extended_valid_elements</code> in <code>init</code> method, you can specify the html attributes you want to keep:</p>

<pre><code>tinymce.init({selector:'textarea', 
    extended_valid_elements : 'video[autoplay|muted|loop|playsinline|class]'
});
</code></pre>
","143","<joomla><tinymce><joomla3.0><jce>","2","0","1","2018-02-09 11:56:36","","1","","","","","2017-11-04 23:19:47",""
"47083486","Decrypting DES/CBC/ZeroBytePadding data","<p>I have a token and a secret that is needed to decrypt the token. I am not sure what am I doing wrong that I keep getting ""illegal key size"". My key size is 44 bytes. I am adding BouncyCastleProvider in a static block. Below is a small snippet of what I am trying to do.</p>

<pre><code>SecretKeySpec skeySpec = new SecretKeySpec(keyText.getBytes(), ""DES"");
Cipher des = Cipher.getInstance(""DES/CBC/ZeroBytePadding"", ""BC"");
des.init(Cipher.DECRYPT_MODE, skeySpec, new IvParameterSpec(new byte[8]));
byte[] tokenData = des.doFinal(Base64.decodeBase64(token));
</code></pre>
","<p>My guess is that your keyText is Base64 encoded. You should probably decode it to get a byte[] of 32 bytes. In Java 8 you can do something like this:</p>

<pre><code>byte[] key = java.util.Base64.getDecoder().decode(keyText.getBytes());
SecretKeySpec skeySpec = new SecretKeySpec(key, ""DES"");
Cipher des = Cipher.getInstance(""DES/CBC/ZeroBytePadding"", ""BC"");
des.init(Cipher.DECRYPT_MODE, skeySpec, new IvParameterSpec(new byte[8]));
byte[] tokenData = des.doFinal(Base64.decodeBase64(token));
</code></pre>

<p>This other question has more information about Base64. <a href=""https://stackoverflow.com/questions/5355466/converting-secret-key-into-a-string-and-vice-versa"">Converting Secret Key into a String and Vice Versa</a></p>

<p>I still think you will get invalid key size errors though. Isn't a DES key 56 bits (plus 8 parity bits)? So that would only be 8 bytes long not 44 or the 32 I think you will get when you decode Base64.</p>
","143","<java><encryption><jce>","0","1","2","2017-11-02 21:08:21","","0","2","","","","2017-11-02 19:47:24",""
"47083486","Decrypting DES/CBC/ZeroBytePadding data","<p>I have a token and a secret that is needed to decrypt the token. I am not sure what am I doing wrong that I keep getting ""illegal key size"". My key size is 44 bytes. I am adding BouncyCastleProvider in a static block. Below is a small snippet of what I am trying to do.</p>

<pre><code>SecretKeySpec skeySpec = new SecretKeySpec(keyText.getBytes(), ""DES"");
Cipher des = Cipher.getInstance(""DES/CBC/ZeroBytePadding"", ""BC"");
des.init(Cipher.DECRYPT_MODE, skeySpec, new IvParameterSpec(new byte[8]));
byte[] tokenData = des.doFinal(Base64.decodeBase64(token));
</code></pre>
","<p>DES has a key size of 56-bits in 8-bytes, the lsb of each byte is reserved for parity but is generally ignored.</p>

<p>So ""My key size is 44 bytes"" is incorrect.</p>

<p>Next is the IV used for decryption must be the same as was used for encryption. DES has a block size of 8-bytes so the IV needs to be 8-bytes. One general way of handling the IV is so prefix the encrypted data with it, the IV does not need to be secret.</p>

<p>Finally, zero padding is not generally a good solution, it does not support binary data that may end with a zero byte. PKCS#5 is the generally used padding.</p>
","143","<java><encryption><jce>","0","3","2","2017-11-02 21:08:21","","0","2","","","","2017-11-02 19:47:24",""
"318185","Is JCE needed if you have LDAP?","<p>Do you need to have JCE embedded in your Java application when you already have LDAP authentication in place?</p>
","<p>I believe it depends on what kind of authentication you're doing with the LDAP server.</p>
","143","<java><ldap><jce>","-2","-2","1","2013-10-23 23:24:01","","2","","2555451","","2013-10-23 23:24:01","2008-11-25 17:22:05",""
"23683940","InvalidKeyException for encryption but not for decryption","<p>I have two applets. One does:</p>

<pre><code>RSAPrivateKey sKey = getPrivateKey(keyFile);
Cipher cipher = Cipher.getInstance(""RSA/None/OAEPWithSHA512AndMGF1Padding"");
cipher.init(Cipher.DECRYPT_MODE, sKey);
</code></pre>

<p><code>sKey</code> is 2048 bits long.</p>

<p>the other one:</p>

<pre><code>byte[] kSession= fileToBytes(kSessionFile);
SecretKeySpec skeySpec = new SecretKeySpec(kSession, ""AES"");
Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
</code></pre>

<p><code>kSession</code> is 32 Bytes long</p>

<p>I am aware of the need to install extended JCE Unlimited Strength Jurisdiction Policy files for some cryptographic operations, as noted <a href=""https://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters"">here</a>.</p>

<p>My question is, when these jars are not installed, why does encryption throw the same exception while decryption does not?</p>
","<p>The key type, size <em>and</em> platform (the JRE or JDK version) are all required knowledge to see if you require the unlimited crypto files. These files depend on a policy set by Oracle to comply with specific import regulations. Some ciphers + key sizes are free for use and others are not. Which ones are allowed and which ones are not depends on politics rather than technical reasoning.</p>

<p>It does not matter if you are using encryption or decryption. Decryption can be used for encryption in certain modes of encryption, such as CTR mode encryption.</p>

<hr>

<p>In your particular case <a href=""http://www.keylength.com/"" rel=""nofollow"">an RSA key of 2048 bits has a lot less strenght than an AES key of 256 bits</a>. So it is not so strange that one part of your code throws an exception and the other part doesn't. The use of AES keys of 192 or 256 bits is precluded unless you have the unlimited strength files for Java(TM) SE Runtime Environment (build 1.7.0_45-b18).</p>
","139","<java><encryption><jce>","-2","1","1","2014-05-20 12:52:32","23744165","6","3","-1","","2017-05-23 10:25:07","2014-05-15 16:31:26","2014-11-12 19:01:14"
"21137911","Changing Joomla 2.5 behaviour for opening articles that shall be edited in a new window","<p>I want Users, that are logged in into the Frontent of joomla,
can edit their articles in a new window without any template applyd as soon they press on the edit Button, so only the editor (in this case JCE) is shown. </p>

<p>I found the sourcode in components/com_content/helpers/Icon.php
But have no idea if its possible at all or how i have to recode it, any idea?</p>

<pre><code>// Show checked_out icon if the article is checked out by a different user
    if (property_exists($article, 'checked_out') &amp;&amp; property_exists($article, 'checked_out_time') &amp;&amp; $article-&gt;checked_out &gt; 0 &amp;&amp; $article-&gt;checked_out != $user-&gt;get('id')) {
        $checkoutUser = JFactory::getUser($article-&gt;checked_out);
        $button = JHtml::_('image', 'system/checked_out.png', NULL, NULL, true);
        $date = JHtml::_('date', $article-&gt;checked_out_time);
        $tooltip = JText::_('JLIB_HTML_CHECKED_OUT').' :: '.JText::sprintf('COM_CONTENT_CHECKED_OUT_BY', $checkoutUser-&gt;name).' &lt;br /&gt; '.$date;
        return '&lt;span class=""hasTip"" title=""'.htmlspecialchars($tooltip, ENT_COMPAT, 'UTF-8').'""&gt;'.$button.'&lt;/span&gt;';
    }

    $url    = 'index.php?option=com_content&amp;task=article.edit&amp;a_id='.$article-&gt;id.'&amp;return='.base64_encode(urlencode($uri));
    $icon   = $article-&gt;state ? 'edit.png' : 'edit_unpublished.png';
    $text   = JHtml::_('image', 'system/'.$icon, JText::_('JGLOBAL_EDIT'), NULL, true);

    if ($article-&gt;state == 0) {
        $overlib = JText::_('JUNPUBLISHED');
    }
    else {
        $overlib = JText::_('JPUBLISHED');
    }

    $date = JHtml::_('date', $article-&gt;created);
    $author = $article-&gt;created_by_alias ? $article-&gt;created_by_alias : $article-&gt;author;

    $overlib .= '&amp;lt;br /&amp;gt;';
    $overlib .= $date;
    $overlib .= '&amp;lt;br /&amp;gt;';
    $overlib .= JText::sprintf('COM_CONTENT_WRITTEN_BY', htmlspecialchars($author, ENT_COMPAT, 'UTF-8'));

    $button = JHtml::_('link', JRoute::_($url), $text);

    $output = '&lt;span class=""hasTip"" title=""'.JText::_('COM_CONTENT_EDIT_ITEM').' :: '.$overlib.'""&gt;'.$button.'&lt;/span&gt;';

    return $output;
}
</code></pre>
","<p>You should create a template override for the view, in that you can place the link to edit adding:</p>

<pre><code>&amp;tmpl=component
</code></pre>

<p>to the url so that only the component part will be shown; and add the </p>

<p><code>target=""_blank""</code> to the <code>&lt;a href</code> or the <code>&lt;form</code> tag so it goes to a new window.</p>

<p>This will most likely open in a new tab, if you want a new window, build the url and pass it to the <code>window.open</code> call.</p>
","138","<joomla><editor><jce>","0","0","1","2014-01-15 20:45:45","21147837","0","","","","","2014-01-15 12:50:28",""
"43699800","Using JCE Unlimited Strength Policy Files in Dataflow Job","<p>I implemented an <code>UnboundedSource</code> for Apache Beam that needs to communicate with a server requiring 256 bit encryption. I am able use it when running jobs locally (by installing unlimited strength policy files[1] into my local <code>$JAVA_HOME/jre/lib/security</code> directory.</p>

<p>My problem is trying to use this <code>UnboundedSource</code> when it is used in a Dataflow job running in Google Cloud Platform[2]?</p>

<p>Is it possible to configure a Dataflow job to use the unlimited security policy files or is that functionality not supported in GCP?</p>

<p>The error I get when trying to run in GCP (without the unlimited strength policy files) is a <code>handshake error</code></p>

<pre><code>  exception: ""java.util.concurrent.ExecutionException: java.net.ConnectException: Received fatal alert: handshake_failure
    at com.google.common.util.concurrent.AbstractFuture$Sync.getValue(AbstractFuture.java:299)
    at com.google.common.util.concurrent.AbstractFuture$Sync.get(AbstractFuture.java:286)
    at com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:116)
    at com.urbanairship.connect.client.StreamConnection.connect(StreamConnection.java:212)
    at com.urbanairship.connect.client.StreamConnection.begin(StreamConnection.java:145)
    at com.urbanairship.connect.client.StreamConnection.read(StreamConnection.java:122)
    at com.urbanairship.connect.client.StreamConsumeTask.transitionToReading(StreamConsumeTask.java:138)
    at com.urbanairship.connect.client.StreamConsumeTask.stream(StreamConsumeTask.java:100)
    at com.urbanairship.connect.client.StreamConsumeTask.run(StreamConsumeTask.java:83)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    at java.util.concurrent.FutureTask.run(FutureTask.java:266)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at java.lang.Thread.run(Thread.java:745)
Caused by: java.net.ConnectException: Received fatal alert: handshake_failure
    at com.ning.http.client.providers.netty.request.NettyConnectListener.onFutureFailure(NettyConnectListener.java:133)
    at com.ning.http.client.providers.netty.request.NettyConnectListener.access$200(NettyConnectListener.java:37)
    at com.ning.http.client.providers.netty.request.NettyConnectListener$1.operationComplete(NettyConnectListener.java:104)
    at org.jboss.netty.channel.DefaultChannelFuture.notifyListener(DefaultChannelFuture.java:409)
    at org.jboss.netty.channel.DefaultChannelFuture.notifyListeners(DefaultChannelFuture.java:395)
    at org.jboss.netty.channel.DefaultChannelFuture.setFailure(DefaultChannelFuture.java:362)
    at org.jboss.netty.handler.ssl.SslHandler.setHandshakeFailure(SslHandler.java:1460)
    at org.jboss.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1314)
    at org.jboss.netty.handler.ssl.SslHandler.decode(SslHandler.java:852)
    at org.jboss.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:425)
    at org.jboss.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)
    at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
    at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
    at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
    at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
    at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
    at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)
    at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:108)
    at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:337)
    at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:89)
    at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)
    at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)
    at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)
    ... 3 more
</code></pre>

<p>As suggested in another <a href=""https://stackoverflow.com/questions/1179672/how-to-avoid-installing-unlimited-strength-jce-policy-files-when-deploying-an"">question</a>  I tried using reflection to override the security policy to allow unlimited length keys, but that did not work and one of the comments mentioned the reflection hack doesn't work for Java 8 (I believe due to a variable being changed to <code>final</code>). </p>

<p>Running this block in my job did not work ...</p>

<pre><code>final Class&lt;?&gt; jceSecurity = Class.forName(""javax.crypto.JceSecurity"");
final Class&lt;?&gt; cryptoPermissions = Class.forName(""javax.crypto.CryptoPermissions"");
final Class&lt;?&gt; cryptoAllPermission = Class.forName(""javax.crypto.CryptoAllPermission"");

final Field isRestrictedField = jceSecurity.getDeclaredField(""isRestricted"");
isRestrictedField.setAccessible(true);
final Field modifiersField = Field.class.getDeclaredField(""modifiers"");
modifiersField.setAccessible(true);
modifiersField.setInt(isRestrictedField, isRestrictedField.getModifiers() &amp; ~Modifier.FINAL);
isRestrictedField.set(null, false);

final Field defaultPolicyField = jceSecurity.getDeclaredField(""defaultPolicy"");
defaultPolicyField.setAccessible(true);
final PermissionCollection defaultPolicy = (PermissionCollection) defaultPolicyField.get(null);

final Field perms = cryptoPermissions.getDeclaredField(""perms"");
perms.setAccessible(true);
((Map&lt;?, ?&gt;) perms.get(defaultPolicy)).clear();

final Field instance = cryptoAllPermission.getDeclaredField(""INSTANCE"");
instance.setAccessible(true);
defaultPolicy.add((Permission) instance.get(null));
</code></pre>

<p>[1] <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""nofollow noreferrer"">http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a><br>
[2] <a href=""https://cloud.google.com/dataflow"" rel=""nofollow noreferrer"">https://cloud.google.com/dataflow</a></p>
","","138","<java><google-cloud-dataflow><jce><apache-beam><gcp>","3","","0","2017-04-29 21:43:53","","5","1","-1","","2017-05-23 12:10:04","2017-04-29 19:43:57",""
"53234517","java.lang.noclassdeffounderror: com.sun.crypto.provider.sunjce android","<p>am trying to decrypt password using JCE 
i got error java.lang.noclassdeffounderror: com.sun.crypto.provider.sunjce android </p>

<pre><code>    public static byte[] decrypt(byte[] data, byte[] key, String algorithm) throws JCEHandlerException
{

    byte[] plainText;
    JCEHandler handler = new JCEHandler(""com.sun.crypto.provider.SunJCE"");
    SecretKeySpec secretKeySpec = new SecretKeySpec(key, algorithm);
    plainText = handler.decryptData(data, secretKeySpec);
    return plainText;
}
</code></pre>
","","133","<android><jce>","0","","0","2018-11-09 23:25:22","","0","","","","","2018-11-09 23:25:22",""
"50085185","Generate X.509 certificate in java program without using sun.security or bouncycastle","<p>I would like to know an approach to create X.509 certificates in java without using ""sun.security.x509.*"" package and bouncycastle dependency.</p>

<p>Appreciate any suggestions</p>
","","130","<java><bouncycastle><x509certificate><x509certificate2><jce>","0","","0","2018-04-29 09:33:59","","4","","","","","2018-04-29 09:33:59",""
"33190465","How are the algorithms for JCE providers defined?","<p>I am trying to encrypt a simple string using password based aes encryption using jasypt and I come across in lot of code samples that the algorithm is given as string like ""PBEWithSHA512AndAES256-CBC-BC"". I am not able to find the document that is relevant to how to understand this string. I understand the parts PBEWithSHA512AndAES256-CBC, but What does the flags BC mean here?</p>

<p>The best resource I could find so far about this is <a href=""http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#KeyManagerFactory"" rel=""nofollow"">http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#KeyManagerFactory</a></p>

<p>But still it does not answer my question. I have already googled for 2 hours.</p>
","<p>I Found the answer by inspecting the code of bouncy castle</p>

<pre><code>   /**
     * PBEWithSHA256And128BitAES-BC
     */
    static public class PBEWithSHA256And128BitAESBC
        extends PBESecretKeyFactory
    {
        public PBEWithSHA256And128BitAESBC()
        {
            super(""PBEWithSHA256And128BitAES-CBC-BC"", null, true, PKCS12, SHA256, 128, 128);
        }
    }
</code></pre>

<p>and the definition of the parent class is</p>

<pre><code>   public More ...PBESecretKeyFactory(
23        String algorithm,
24        ASN1ObjectIdentifier oid,
25        boolean forCipher,
26        int scheme,
27        int digest,
28        int keySize,
29        int ivSize)
</code></pre>

<p>so, it has the scheme PKCS12, digest SHA256, 128 bit keysize and 128 bit size for initialization vector</p>
","127","<java><bouncycastle><jce><jasypt>","0","1","1","2016-03-23 10:15:49","","0","","573032","","2016-03-23 10:15:49","2015-10-17 19:02:39",""
"52882860","Empty securerandom.strongAlgorithms Security Property","<p>When I am setting up as a application in Jenkins. The code works fine in local and other build environments. In Jenkins i am getting this error during the build and unit tests. Our application only needed external change is download JCE (Jave Crypto Extension) from oracle and replace the policy jars in JAVA_HOME/jre/lib/security folder.  that I did. I can see log it is picking up those jars.  Still i see below error. Do i need to do anything for secure random?    <code>SecureRandom.getInstanceStrong();</code> is causing the issue. any help?</p>

<pre><code>[ERROR] Null/empty securerandom.strongAlgorithms Security Property
[ERROR]     at com.test.cipher.AesGcmCipher.generate(AesGcmCipher.java:72)
[ERROR]     at com.test.scheme.Version1CryptoSchemeAesGcmTest$1.getDefaultCipher(Version1CryptoSchemeAesGcmTest.java:27)
[ERROR]     at com.test.scheme.Version1CryptoSchemeAesGcmTest$1.getDefaultCipher(Version1CryptoSchemeAesGcmTest.java:24)
[ERROR]     at com.test.CachingCryptoCipherProvider.&lt;init&gt;(CachingCryptoCipherProvider.java:43)
[ERROR]     at com.test.CryptoCipherProvider.asCachingProvider(CryptoCipherProvider.java:28)
[ERROR]     at com.test.scheme.Version1CryptoSchemeAesGcmTest.createAesGcmProvider(Version1CryptoSchemeAesGcmTest.java:35)
[ERROR]     at com.test.scheme.Version1CryptoSchemeAesGcmTest.&lt;init&gt;(Version1CryptoSchemeAesGcmTest.java:20)
[ERROR]     ... 28 more
[ERROR] Caused by: java.security.NoSuchAlgorithmException: Null/empty securerandom.strongAlgorithms Security Property
[ERROR]     at java.security.SecureRandom.getInstanceStrong(SecureRandom.java:627)
[ERROR]     at com.test.cipher.AesGcmCipher.generate(AesGcmCipher.java:62)
[ERROR]     ... 34 more`
</code></pre>

<p>Below is my java code.</p>

<pre><code>public class AesGcmCipher {
    public static AesGcmCipher generate(BiConsumer&lt;AesGcmCipher, SecretKey&gt; consumer) {
        try {
            UUID cipherId = UUID.randomUUID();
            SecureRandom random = SecureRandom.getInstanceStrong();
            KeyGenerator keyGen = KeyGenerator.getInstance(AES);
            AesGcmCipher cipher = new AesGcmCipher(cipherId, secretKey, new Date());
            return cipher;
        } catch (NoSuchAlgorithmException ex) {
            LOGGER.error(msg);
            throw new CryptoException(msg, ex);
        }
    }
}
</code></pre>

<p>FYI Jenkins is running on <code>java version ""1.8.0_73""</code>.  The code which is running perfectly on other machines with version <code>1.8.0_51</code> and <code>1.8.0_91</code></p>
","<p>It should be an issue with your jdk. Could you verify this file <code>$JAVA_HOME/jre/lib/security/java.security</code>:</p>

<pre><code>securerandom.source=file:/dev/random
securerandom.strongAlgorithms=NativePRNGBlocking:SUN
</code></pre>

<p>This is my configuration, probably you'll need to reinstall JDK</p>
","125","<java><java-8><jce><java-security><secure-random>","0","0","1","2018-10-18 21:44:04","52883037","0","","909792","","2018-10-18 21:36:04","2018-10-18 21:28:50",""
"47754888","SunMSCAPI not working when calling wcf","<p>I know there is many similar questions, but i could not find any help in any previous question. I am trying to communicate with a wcf service from a java client, i used the auto generated stubs created by netbeans to achieve that. the wcf service is protected with client certificate authentication using TLS(1.2). I cannot make it work to use the SunMSCAPI provider (meaning i want to use the windows user local store to use the certificate as a client. (if there is another way or library to make it possible to use windows certificate local stores please share with me).</p>

<p>This SSLContext is not working to call the web service:</p>

<pre><code>IService servicePort = service.getWSHttpBindingIService();

SSLContext sslContext = SSLContext.getInstance(sslVersion);

**KeyStore keystore = KeyStore.getInstance(""Windows-MY"", ""SunMSCAPI"");
keystore.load(null, null);**

KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());

kmf.init(keystore, null);

KeyManager[] keyManagers = kmf.getKeyManagers();

sslContext.init(keyManagers, null, null);

BindingProvider bindingProvider = ((BindingProvider) servicePort);

bindingProvider.getRequestContext()
.put(""com.sun.xml.internal.ws.transport.https.client.SSLSocketFactory"",sslContext.getSocketFactory());
</code></pre>

<p>The error i get is, when debugging i can see the keys and the certificates in the KeyManagers array correctly:</p>

<pre><code>com.sun.xml.internal.ws.client.ClientTransportException: The server sent HTTP status code 403: Forbidden
    at com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.checkStatusCode(HttpTransportPipe.java:310)
    at com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.createResponsePacket(HttpTransportPipe.java:259)
    at com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.process(HttpTransportPipe.java:217)
    at com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.processRequest(HttpTransportPipe.java:130)
    at com.sun.xml.internal.ws.transport.DeferredTransportPipe.processRequest(DeferredTransportPipe.java:124)
    at com.sun.xml.internal.ws.api.pipe.Fiber.__doRun(Fiber.java:1121)
    at com.sun.xml.internal.ws.api.pipe.Fiber._doRun(Fiber.java:1035)
    at com.sun.xml.internal.ws.api.pipe.Fiber.doRun(Fiber.java:1004)
    at com.sun.xml.internal.ws.api.pipe.Fiber.runSync(Fiber.java:862)
    at com.sun.xml.internal.ws.client.Stub.process(Stub.java:448)
    at com.sun.xml.internal.ws.client.sei.SEIStub.doProcess(SEIStub.java:178)
    at com.sun.xml.internal.ws.client.sei.SyncMethodHandler.invoke(SyncMethodHandler.java:93)
    at com.sun.xml.internal.ws.client.sei.SyncMethodHandler.invoke(SyncMethodHandler.java:77)
    at com.sun.xml.internal.ws.client.sei.SEIStub.invoke(SEIStub.java:147)
</code></pre>

<p>the pfx is installed in user local store correctly, because i used it in c# and it worked many times. </p>

<p>in the java code above also, when i use pfx directly instead of SunMSCAPI provider, it works:</p>

<pre><code>KeyStore ks = KeyStore.getInstance(""pkcs12"");

ks.load(pfxStream, pfxPassword.toCharArray());

kmf.init(ks, pfxPassword.toCharArray());
</code></pre>

<p>I am using windows 10. any help would be appriciated.</p>

<p>I got the SunMSCAPi idea from the following link:
<a href=""https://stackoverflow.com/questions/15832846/digital-signature-sunmscapi-provider-ms-crypto-api"">Digital Signature SunMSCAPI provider &amp; MS Crypto API</a></p>
","<p>It looks like the issue was that there is many certificates in my localstore and according to my research KeyManager selects the first Key found that meet the criteria, meaning that it will not necessarily pick my certificate among them. i solved this issue, by creating a decorator over X509KeyManager that chooses my desired certificate alias. got the idea from this QA:</p>

<p><a href=""https://stackoverflow.com/questions/15201251/how-i-can-tell-alias-of-the-wanted-key-entry-to-sslsocket-before-connecting"">How I can tell alias of the wanted key-entry to SSLSocket before connecting?</a></p>
","125","<java><security><keystore><tls1.2><jce>","0","0","1","2017-12-12 12:29:40","","2","","4102573","","2017-12-11 14:23:37","2017-12-11 14:17:48",""
"25822783","AES CS2Padding for java","<p>I'm trying to establish encrypted connection between my MCU device which running on (Cortex m3 STM32f102 controller) and my java application server. When i'm using plain text without encryption all works fine. 
The problem is that when i using encryption (AES/CBC/PKCS5PADDING on my server) i have  BadPaddingException error when i receive message. When i looked into datasheets for MCU's crypto library i saw mention, that</p>

<blockquote>
  <ol start=""2"">
  <li>In CBC mode and in case of a call where P_inputSize is greater than 16 and not multiple 
  of 16, Ciphertext Stealing will be activated. See CBC-CS2 of &lt;""SP 800-38 A - Addendum""> 
  NIST SP 800-38A Addendum</li>
  </ol>
</blockquote>

<p>I think that problem is in different padding algorithms for controller and server.</p>

<p>Is there some implementation of  AES/CBC with CS2 padding for java?
Or how would you recommend me to solve this problem?</p>

<hr>

<p>As recommended in posts below, i changed my encryption to AES\CTR\NoPadding and now it works.</p>
","<p>As recommended in posts below, i changed my encryption to AES\CTR\NoPadding and now it works.</p>
","118","<java><security><encryption><aes><jce>","1","0","1","2014-09-15 08:34:14","25843834","4","","3872748","","2014-09-13 14:52:07","2014-09-13 11:33:13",""
"44822228","pattern matching fails on second try","<p>I am using the following code to pattern match an instance of <code>PrivateKey</code>:</p>

<pre><code>import java.security.interfaces.{RSAPrivateKey, RSAPublicKey}
import java.security.{PrivateKey, PublicKey} 

object ClientPrivateKey {
  def apply(privateKey: PrivateKey) = privateKey match {
    case k: RSAPrivateKey ⇒ RSAClientPrivateKey(k)
    case k: EdDSAPrivateKey ⇒ EDCClientPrivateKey(k)
  }
}

val pk: PrivateKey = ....
ClientPrivateKey(pk)
</code></pre>

<p>I am getting a weird behavior when running tests with <code>sbt ~test</code>. On the first run the test passes, on subsequent tries, without restarting sbt, the test fails with:</p>

<pre><code>[info]   scala.MatchError: net.i2p.crypto.eddsa.EdDSAPrivateKey@e5d5feef (of class net.i2p.crypto.eddsa.EdDSAPrivateKey)
[info]   at com.advancedtelematic.libtuf.data.ClientDataType$ClientPrivateKey$.apply(ClientDataType.scala:39)
[info]   at com.advancedtelematic.tuf.keyserver.daemon.KeyGenerationOp$$anonfun$saveToVault$1.apply(KeyGeneratorLeader.scala:122)
[info]   at com.advancedtelematic.tuf.keyserver.daemon.KeyGenerationOp$$anonfun$saveToVault$1.apply(KeyGeneratorLeader.scala:121)
[info]   at scala.concurrent.Future$$anonfun$traverse$1.apply(Future.scala:576)
[info]   at scala.concurrent.Future$$anonfun$traverse$1.apply(Future.scala:575)
[info]   at scala.collection.TraversableOnce$$anonfun$foldLeft$1.apply(TraversableOnce.scala:157)
[info]   at scala.collection.TraversableOnce$$anonfun$foldLeft$1.apply(TraversableOnce.scala:157)
</code></pre>

<p>Which is strange, as <code>net.i2p.crypto.eddsa.EdDSAPrivateKey</code> matches the type of the object being matched.</p>

<p>What can be interfering with this pattern matching?</p>
","<p>One thing that comes to my mind is that your <code>privateKey</code> might be coming from a different classloader that the one used by default by your pattern matching code.</p>

<p>You can test this e.g. like that:</p>

<pre><code>def apply(privateKey: PrivateKey) = privateKey match {
  case k: RSAPrivateKey ⇒ RSAClientPrivateKey(k)
  case k: EdDSAPrivateKey ⇒ EDCClientPrivateKey(k)
  case k if k.getClass.getName == classOf[EdDSAPrivateKey].getName =&gt;
    val sameClasses = k.getClass == classOf[EdDSAPrivateKey]
    val sameClasses = k.getClass.getClassLoader == classOf[EdDSAPrivateKey].getClassLoader
    throw new Exception(s""Different class loaders? $sameClasses $sameClassLoaders"")
}
</code></pre>
","116","<scala><jce>","-1","1","1","2017-07-08 10:25:51","44822541","0","","","","","2017-06-29 10:09:53",""
"50798206","Server and Client SSL certificates with the same public key","<p>I want to secure the socket communication in a java based application(client and server architecture). I want to achieve this with the help of SSL. </p>

<p>As per my research I would need a SSL certificate (pair of keys private and public). I have got to know how to generate a certificate using Bouncy Castle library. </p>

<p>My questions are:</p>

<ol>
<li>What I assume is that, in the server side the certificate must contain both private and, public key and in the client side the certificate must contain only the public key of the server. Is this correct?</li>
<li>If the above understanding is correct, how should I generate two certificates, one for server using both public and private key 
and the other one for client by only public key. </li>
</ol>

<p>can some one give me some directions on this?</p>
","<p>There are several resources online explaining very well how public-key crypto works.  Generally, your server has two resources: a private key and a certificate.  The public key is contained in the certificate. Usually the private key is protected with a password, so your server will also need that.</p>

<p>The certificate is sent to the client upon connection; but the client needs to trust it.  For that to happen, either the certificate needs to be signed by a trusted authority, or you need to explicitly trust that certificate in the client (the latter case is referred to as a self-signed certificate).</p>

<p>Bouncy castle is a library for these kind of things, but you can use anything for creating your keypair.  The most obvious one is keytool, which comes which java. <a href=""https://docs.oracle.com/cd/E19509-01/820-3503/gfzbf/index.html"" rel=""nofollow noreferrer"">read up on generating your keypair here.</a></p>
","115","<java><ssl><bouncycastle><public-key-encryption><jce>","1","0","1","2018-06-11 12:57:44","","0","","","","","2018-06-11 12:50:21",""
"26269624","Getting all possible key sizes for JCE KeyGenerators","<p>I am writing a web service which will allow a user to pick an algorithm from a list of algorithms and generate a key of a specified size (using KeyGenerator). I can't find any way through the API to get the set of possible key sizes for a specified algorithm. If I try to generate a key that has an invalid size I will get an exception indicating as such, with the possible key sizes for that algorithm in the error message, but I would like to predetermine it for a pick list for the user. Can anyone point me towards the correct API for this, if it exists?</p>
","<p>I don't think this is available through API, since some algorithms take ranges instead of distinct values.</p>

<p>From <a href=""http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJCEProvider"" rel=""nofollow"">Java Cryptography Architecture Documentation (Java 7)</a>, Section <em>Keysize Restrictions</em>, <em>KeyGenerator</em>:</p>

<blockquote>
  <p>The SunJCE provider uses the following default keysizes (in bits) and enforces the following restrictions:</p>
</blockquote>

<pre class=""lang-none prettyprint-override""><code>KeyGenerator
╔══════════════════════╦══════════════════╦════════════════════════════════════════════════════════════════════════════════╗
║   Algorithm Name     ║ Default Keysize  ║                             Restrictions/Comments                              ║
╠══════════════════════╬══════════════════╬════════════════════════════════════════════════════════════════════════════════╣
║ AES                  ║             128  ║ Keysize must be equal to 128, 192, or 256.                                     ║
║ ARCFOUR (RC4)        ║             128  ║ Keysize must range between 40 and 1024 (inclusive).                            ║
║ Blowfish             ║             128  ║ Keysize must be a multiple of 8, ranging from 32 to 448 (inclusive).           ║
║ DES                  ║              56  ║ Keysize must be equal to 56.                                                   ║
║ DESede (Triple DES)  ║             168  ║ Keysize must be equal to 112 or 168.                                           ║
║                      ║                  ║ A keysize of 112 will generate a Triple DES key with 2 intermediate keys, and  ║
║                      ║                  ║ a keysize of 168 will generate a Triple DES key with 3 intermediate keys.      ║
║                      ║                  ║ Due to the ""Meet-In-The-Middle"" problem, even though 112 or 168 bits of key    ║
║                      ║                  ║ material are used, the effective keysize is 80 or 112 bits respectively.       ║
║ HmacMD5              ║             512  ║ No keysize restriction.                                                        ║
║ HmacSHA1             ║             512  ║ No keysize restriction.                                                        ║
║ HmacSHA256           ║             256  ║ No keysize restriction.                                                        ║
║ HmacSHA384           ║             384  ║ No keysize restriction.                                                        ║
║ HmacSHA512           ║             512  ║ No keysize restriction.                                                        ║
║ RC2                  ║             128  ║ Keysize must range between 40 and 1024 (inclusive).                            ║
╚══════════════════════╩══════════════════╩════════════════════════════════════════════════════════════════════════════════╝
</code></pre>

<p>I suggest you provide a suitable component for user entry (editable combobox) that changes upon algorithm selection and then provide validation for it.</p>
","105","<java><jce>","2","1","1","2014-10-09 07:40:41","26272873","0","","","","","2014-10-09 03:05:00",""
"47356168","Java native implementation to handling Modular Crypt Format","<p>In my Java application, I am using PBKDF2-SHA256 in JCE for password hashing, and store the output of PBKDF2-SHA256 to the database directly.
Now I am trying to store the name of hashing algorithm and the time to stretch along with the hash value, for future enhancements.</p>

<p>To store these parameters, I think <a href=""http://passlib.readthedocs.io/en/stable/modular_crypt_format.html"" rel=""nofollow noreferrer"">Modular Crypt Format</a> or <a href=""https://github.com/P-H-C/phc-string-format/blob/master/phc-sf-spec.md"" rel=""nofollow noreferrer"">PHC String Format</a> is suitable my purpose.
And in Python, you can handle Modular Crypt Format string by using Passlib.</p>

<h2>Question</h2>

<p>Is there any native Java library to handle Modular Crypt Format or PHC String Format, to store hash value from JCE?
(Open source implementation is the best, but proprietary implementations are acceptable)</p>
","","104","<java><jce><pbkdf2>","0","","0","2017-11-17 17:25:30","","2","","","","","2017-11-17 17:25:30",""
"42581797","Why do I need to install Java Cryptography Extension each time java updates?","<p>Each time my system updates java, and then nothing runs because it was a new Java Cryptography Extension installed. Is this normal behaviour or something wrong with my settings. </p>

<p>Why does new version needs to be manually installed each time java updates? It's getting very annoying </p>
","","99","<java><jce>","0","","0","2017-03-03 14:44:57","","6","","","","","2017-03-03 14:44:57",""
"23735668","Will updating Java overwrite everything in the JRE folder, or will it patch?","<p>I'm think of increasing the maximum encryption key length by downloading security policy files from Oracle. They need to be placed in $JRE_HOME/lib/security to take effect. My question is, would this ""tweak"" be overwritten when upgrading Java to a major version, and maybe even from a minor version to another minor version?</p>

<p>Best regards
Programmer Trond</p>
","<p>Different major versions have different directories so adding JRE 8 will not touch JRE 7.</p>

<p>What happens exactly depends on your installer.  If you use the tar.gz package it will create a new directory for every build, if you use RPM it will remove the old versions and add new ones.  You need to check how RPM behaves if you modify a file, but I would assume it could be overwritten.</p>
","98","<java><settings><upgrade><patch><jce>","0","0","2","2014-05-19 11:16:57","","0","","","","","2014-05-19 10:41:08",""
"23735668","Will updating Java overwrite everything in the JRE folder, or will it patch?","<p>I'm think of increasing the maximum encryption key length by downloading security policy files from Oracle. They need to be placed in $JRE_HOME/lib/security to take effect. My question is, would this ""tweak"" be overwritten when upgrading Java to a major version, and maybe even from a minor version to another minor version?</p>

<p>Best regards
Programmer Trond</p>
","<p>Ideally, you would develop a repeatable process (such as a script) that sets up your environment.</p>

<ul>
<li>Install JRE/JDK</li>
<li>Post configure JRE/JDK using script</li>
</ul>

<p>That will simplify moving your application between computers and give you some confidence in your environment.</p>

<p>This may seem like overkill for your particular situation, but it's one of those good development habits that will scale for you.</p>
","98","<java><settings><upgrade><patch><jce>","0","1","2","2014-05-19 11:16:57","","0","","","","","2014-05-19 10:41:08",""
"55904490","How do I execute a method from a library jar on a different JRE than my current project's JRE","<p>I have a project 1 which need to run on 1.7, this project has a dependency on another project 2 built on 1.8.  </p>

<p>I am trying to invoke a class from Project 2 inside Project 1, but I am getting a known error which is fixed in 1.8. I f I run this class individually on Project 2 in JRE 1.8, it works fine.</p>

<p>Any leads to chose the target JRE dynamically for a method call?</p>
","<p>This is not possible, if your project depends on 1.7 it's dependencies should also be 1.7. At runtime all code executes in the same JVM, there is no way to dynamically 'choose' a target JRE.</p>

<p>If you really have no other option and the two libraries should work together, you could possibly build some kind of bridge between project 1 and 2, where project 1 invokes project 2 in a separate JVM instance.</p>
","95","<java><jce>","1","0","2","2019-04-30 23:21:23","55908815","8","1","","","","2019-04-29 13:31:27",""
"55904490","How do I execute a method from a library jar on a different JRE than my current project's JRE","<p>I have a project 1 which need to run on 1.7, this project has a dependency on another project 2 built on 1.8.  </p>

<p>I am trying to invoke a class from Project 2 inside Project 1, but I am getting a known error which is fixed in 1.8. I f I run this class individually on Project 2 in JRE 1.8, it works fine.</p>

<p>Any leads to chose the target JRE dynamically for a method call?</p>
","<p>If you are willing to make a jar and use a wrapper for each program, you can bundle a specific jre with each executable.</p>

<ol>
<li><p>Download and run <a href=""https://sourceforge.net/projects/launch4j/"" rel=""nofollow noreferrer"">Launch4j</a></p></li>
<li><p>In your eclipse project, click on:</p>

<p><code>File -&gt; export -&gt; runnable jar file -&gt; next</code></p>

<p>And select the run configuration for the project you'd like to extract. Hit <code>Finish</code></p></li>
<li><p>It's a good idea to test each jar and make sure it runs. Double click, or find it with cmd and do <code>java -jar nameOfJarToTest.jar</code>.</p></li>
<li><p>Make a subfolder for your jre. I just called mine ""jre"". </p></li>
<li><p>Copy and paste your <code>bin</code> and <code>lib</code> folders from the correct jre into that folder you just made. Mine are located in a place like <code>C:\Program Files\Java\jre1.8.0_201</code> if you wanted to run java 8. To be extra clear, your file structure should be </p></li>
</ol>

<blockquote>
  <p>someContainerFolder(folder you just made)</p>

<pre><code>  nameOfJarToTest.jar

  jre(folder you just made)

        bin(folder copied from the jre in your file system)

        lib(folder copied from the jre in your file system)
</code></pre>
</blockquote>

<ol start=""6"">
<li><p>Run Launch4j. Add the .jar and select an output file path. Fields pictured below 
<a href=""https://i.stack.imgur.com/zWils.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/zWils.png"" alt=""enter image description here""></a></p></li>
<li><p>Click on the jre tab and add your respective jre in the <code>min jre</code> field. Make sure you select the option <code>Only use private jdk runtimes</code>. Type ""jre""(if you named the folder with 'bin' and 'lib' jre) in the ""bundled jre path"" field pictured below.</p></li>
</ol>

<p><a href=""https://i.stack.imgur.com/asfZP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/asfZP.png"" alt=""enter image description here""></a></p>

<ol start=""8"">
<li>Click on 'build wrapper'. It looks like a settings cog. 
<a href=""https://i.stack.imgur.com/MFDeT.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/MFDeT.png"" alt=""enter image description here""></a></li>
</ol>

<p>If you do this for both jar files, and make sure the 'bin' and 'lib' folders are from the jre you want to run, the two programs will both run fine in different runtime environments. If you would like one program to be able to call the other, I found the geeksforgeeks website has <a href=""https://www.geeksforgeeks.org/calling-external-program-java-using-process-runtime/"" rel=""nofollow noreferrer"">a very simple and concise way for you to call external executable files from your code</a> if you're okay with canonical paths.</p>
","95","<java><jce>","1","2","2","2019-04-30 23:21:23","55908815","8","1","","","","2019-04-29 13:31:27",""
"56558770","Use IBM JDK with a JCE provider signed with Oracle JCE Code Signing CA","<p>I am trying to use a custom JCE provider with IBM JDK 1.8. The JCE provider is signed with Oracle Code Signing CA but the JDK has problem verifying signature of the jar.</p>

<p>My guess is that there is a keystore somewhere in jdk package with an old Oracle JCE Code Signing CA, I may have to replace the CA certificate with a newer one since the provider is signed recently using newer certificate. And it's not in cacerts store.
Note that the same code and the provider work fine with Oracle jdk 7,8 and 11.</p>

<p>Sample code that causes error.(Actual code is different but has same symptoms)</p>

<pre><code>import javax.crypto.KeyGenerator;

public class Main {

    public static void main(String[] args) {
        try {
            KeyGenerator kg = KeyGenerator.getInstance(""AES"", ""nCipherKM"");
            System.out.println(""Provider: "" + kg.getProvider().toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

</code></pre>

<p>Output:</p>

<pre><code>java.security.NoSuchProviderException: JCE cannot authenticate the provider nCipherKM
    at javax.crypto.b.a(Unknown Source)
    at javax.crypto.KeyGenerator.getInstance(Unknown Source)
    at Main.main(Main.java:7)
Caused by: java.util.jar.JarException: file:/opt/ibm/java-x86_64-80/jre/lib/ext/nCipherKM.jar is not signed by a trusted signer.
    at javax.crypto.a.a(Unknown Source)
    at javax.crypto.a.a(Unknown Source)
    at javax.crypto.a.a(Unknown Source)
    at javax.crypto.b.b(Unknown Source)
    at javax.crypto.b.a(Unknown Source)
    ... 3 more

Process finished with exit code 0
</code></pre>

<p>jarsigner output when i tried to verify the provider signature:</p>

<pre><code>$ /opt/ibm/java-x86_64-80/bin/java -version
java version ""1.8.0_211""
Java(TM) SE Runtime Environment (build 8.0.5.35 - pxa6480sr5fp35-20190418_01(SR5 FP35))
IBM J9 VM (build 2.9, JRE 1.8.0 Linux amd64-64-Bit Compressed References 20190417_414854 (JIT enabled, AOT enabled)
OpenJ9   - 777635f
OMR      - 16b77d7
IBM      - 72459d3)
JCL - 20190409_01 based on Oracle jdk8u211-b25

$ /opt/ibm/java-x86_64-80/bin/jarsigner -verify -certs /opt/ibm/java-x86_64-80/jre/lib/ext/nCipherKM.jar 

jar verified.

Warning: 
This jar contains entries whose certificate chain is invalid. Reason: PKIX path building failed: java.security.cert.CertPathBuilderException: PKIXCertPathBuilderImpl could not build a valid CertPath.; internal cause is: 
    java.security.cert.CertPathValidatorException: The certificate issued by CN=JCE Code Signing CA, OU=Java Software Code Signing, O=Oracle Corporation is not trusted; internal cause is: 
    java.security.cert.CertPathValidatorException: Certificate chaining error

Re-run with the -verbose and -certs options for more details.
</code></pre>
","","94","<jce><ibm-jdk>","0","","0","2019-06-12 09:23:22","","0","","","","","2019-06-12 09:23:22",""
"54948260","Java 8 32-bit - Could not initialize JCE","<p>I update project JDK to jdk1.8.144_32bit (from 1.7).</p>

<p>But the following error occurs:</p>

<pre><code>Exception in thread ""main"" java.lang.NoClassDefFoundError: Could not initialize class javax.crypto.JceSecurity
    at javax.crypto.SecretKeyFactory.nextSpi(SecretKeyFactory.java:295)
    at javax.crypto.SecretKeyFactory.&lt;init&gt;(SecretKeyFactory.java:121)
    at javax.crypto.SecretKeyFactory.getInstance(SecretKeyFactory.java:160)
    at oracle.jdbc.driver.T4C8TTIdty.&lt;init&gt;(T4C8TTIdty.java:517)
    at oracle.jdbc.driver.T4CConnection.connect(T4CConnection.java:1603)
    at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:496)
    at oracle.jdbc.driver.PhysicalConnection.connect(PhysicalConnection.java:666)
    at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:32)
    at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:566)
    at org.apache.commons.dbcp2.DriverConnectionFactory.createConnection(DriverConnectionFactory.java:53)
    at org.apache.commons.dbcp2.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:279)
    at org.apache.commons.dbcp2.BasicDataSource.validateConnectionFactory(BasicDataSource.java:2343)
    at org.apache.commons.dbcp2.BasicDataSource.createPoolableConnectionFactory(BasicDataSource.java:2329)
    at org.apache.commons.dbcp2.BasicDataSource.createDataSource(BasicDataSource.java:2071)
    at org.apache.commons.dbcp2.BasicDataSource.getConnection(BasicDataSource.java:1525)
</code></pre>

<p>Then I installed JCE from Oracle download site:
<a href=""https://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""nofollow noreferrer"">https://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html</a></p>

<p>Nothing change except I'm quite sure that JCE is installed according to such answers:
<a href=""https://stackoverflow.com/a/13238132"">https://stackoverflow.com/a/13238132</a></p>

<p>In my scenario:</p>

<pre><code>System.out.println(Cipher.getMaxAllowedKeyLength(""AES""));
</code></pre>

<p>return </p>

<pre><code>2147483647
</code></pre>

<p>What's wrong?
Why this environment doesn't work correctly?</p>

<p>I'm working with jdk1.8.144 in 32bit version.
And Eclipse Oxygen.3a Release (4.7.3a)</p>
","<p>I found an answer. It wasn't problem with neither JDK nor Eclipse. Simple answer is:</p>

<blockquote>
  <p>In our code there is <code>java.home</code> variable assigned to custom value.</p>
</blockquote>

<p><strong>Explanation:</strong></p>

<p>Variable <code>java.home</code> points to Java installation directory as said in documentation of <a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getProperties--"" rel=""nofollow noreferrer"">System.getProperties()</a>. It is always available.
In normal scenario value of this variable is inferred from JAVA_HOME system variable.</p>

<p>More interesting reading <a href=""https://stackoverflow.com/q/45441516/5162026"">here on SO</a>.</p>

<p>But because of some strange configuration of our computers somebody made a decision to set it manually for local test environment. 
And it worked until JDK migration when JDK path has changed. </p>

<p><strong>Hints for others:</strong></p>

<p>After JDK upgrade when you are using Eclipse there are several places to check configuration:</p>

<ol>
<li>Preferences -> Java -> Installed JRE</li>
<li>Project properties -> Java Build Path -> JRE System Library</li>
<li>Project properties -> Java Compiler</li>
<li>Run Configuration (for example for Maven build run) -> JRE</li>
<li>Check <a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getenv--"" rel=""nofollow noreferrer"">System.getenv()</a> variables if any has strange value.</li>
</ol>
","93","<java><eclipse><maven><32-bit><jce>","0","1","1","2019-03-19 16:12:38","55245479","0","","","","","2019-03-01 16:02:57",""
"35344005","How to create dual control java keystore file","<p>Want to create java key-store file and create secret key using multiple users/user passwords.</p>

<p>generally we can create key-store file in this way,</p>

<pre><code>keytool -genseckey -keystore &lt;filename&gt;.jceks -storetype jceks -storepass &lt;passwrod&gt; -keyalg AES -keysize 256 -alias &lt;alias name&gt; -keypass &lt;key password&gt;
</code></pre>

<p>here, only one person has access to key-store file and keys, also that person can access that file without getting any others support. So only one have full permission. </p>

<p>Requirement is to distribute this permissions within 2 or 3 peoples.</p>

<p>Is there any way to overcome this problem in java key-store(jceks) file ?</p>
","<p>I try to find solution in various ways. Finally I find out this <a href=""https://github.com/evanx/vellum/wiki/DualControl"" rel=""nofollow"">https://github.com/evanx/vellum/wiki/DualControl</a>
. Could get a solution from this source.</p>
","93","<java><keystore><keytool><private-key><jce>","0","0","1","2016-02-17 10:30:24","","1","","207421","","2016-02-14 19:31:00","2016-02-11 15:56:21",""
"26916758","Storing persistent encryption keys","<p>Sensitive information stored in our database is stored encrypted.</p>

<p>My application needs a single global AES 256 encryption key. My boss suggests using the same key stored in a certificate used for our SSL. Mind you this application is not SSL related.</p>

<p>I'm wondering if this is a good idea? Maybe we should store a separate key in a database or in the Java backend code itself?</p>

<p>I hear SSL uses a variety of encryption methods and so the key used by SSL may not be compatible with the encryption we use, which is always AES 256?</p>

<p>Help appreciated</p>
","<p>Try storing it in a JCEKS key store instead. Key stores can be used to store keys. Note that you would need to protect it with a relatively strong pass phrase. It's tricky to automate access to a key.</p>

<p>Understanding how you can manage keys is called key management, and it is the topic of entire books.</p>
","91","<java><encryption><jce>","0","0","1","2014-11-13 21:02:29","","2","","","","","2014-11-13 19:22:58",""
"58182231","OpenJDK 11 error ""Can not initialize cryptographic mechanism""","<p>I have an app written with openJDK (Amazon Correto 11) and openJFX.</p>

<p>When I run the app locally - everything works. 
But when I execute the app from network share there is an Exception: </p>

<pre><code>java.lang.ExceptionInInitializerError
    at java.base/javax.crypto.JceSecurityManager.&lt;clinit&gt;(JceSecurityManager.java:65)
    at java.base/javax.crypto.Cipher.getConfiguredPermission(Cipher.java:2624)
    at java.base/javax.crypto.Cipher.getMaxAllowedKeyLength(Cipher.java:2646)
    at java.base/sun.security.ssl.SSLCipher.isUnlimited(SSLCipher.java:540)
    at java.base/sun.security.ssl.SSLCipher.&lt;init&gt;(SSLCipher.java:472)
    at java.base/sun.security.ssl.SSLCipher.&lt;clinit&gt;(SSLCipher.java:174)
    at java.base/sun.security.ssl.CipherSuite.&lt;clinit&gt;(CipherSuite.java:67)
    at java.base/sun.security.ssl.SSLContextImpl.getApplicableSupportedCipherSuites(SSLContextImpl.java:348)
    at java.base/sun.security.ssl.SSLContextImpl$AbstractTLSContext.&lt;clinit&gt;(SSLContextImpl.java:579)
    at java.base/java.lang.Class.forName0(Native Method)
    at java.base/java.lang.Class.forName(Class.java:315)
    at java.base/java.security.Provider$Service.getImplClass(Provider.java:1848)
    at java.base/java.security.Provider$Service.newInstance(Provider.java:1824)
    at java.base/sun.security.jca.GetInstance.getInstance(GetInstance.java:236)
    at java.base/sun.security.jca.GetInstance.getInstance(GetInstance.java:164)
    at java.base/javax.net.ssl.SSLContext.getInstance(SSLContext.java:168)
    at org.apache.http.ssl.SSLContexts.createDefault(SSLContexts.java:51)
    at org.apache.http.conn.ssl.SSLConnectionSocketFactory.getSocketFactory(SSLConnectionSocketFactory.java:194)
    at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.getDefaultRegistry(PoolingHttpClientConnectionManager.java:115)
    at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.&lt;init&gt;(PoolingHttpClientConnectionManager.java:122)
    at com.mashape.unirest.http.options.Options.refresh(Options.java:72)
    at com.mashape.unirest.http.options.Options.&lt;clinit&gt;(Options.java:46)
    at com.mashape.unirest.http.HttpClientHelper.prepareRequest(HttpClientHelper.java:151)
    at com.mashape.unirest.http.HttpClientHelper.request(HttpClientHelper.java:131)
    at com.mashape.unirest.request.BaseRequest.asString(BaseRequest.java:56)
    at myapp.util.MyTaxNumberValidator$3.run(MyTaxNumberValidator.java:185)
    at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.SecurityException: Can not initialize cryptographic mechanism
    at java.base/javax.crypto.JceSecurity.&lt;clinit&gt;(JceSecurity.java:120)
    ... 27 more
Caused by: java.lang.SecurityException: Can't read cryptographic policy directory: unlimited
    at java.base/javax.crypto.JceSecurity.setupJurisdictionPolicies(JceSecurity.java:326)
    at java.base/javax.crypto.JceSecurity$1.run(JceSecurity.java:111)
    at java.base/javax.crypto.JceSecurity$1.run(JceSecurity.java:108)
    at java.base/java.security.AccessController.doPrivileged(Native Method)
    at java.base/javax.crypto.JceSecurity.&lt;clinit&gt;(JceSecurity.java:107)
    ... 27 more
</code></pre>

<p>I run an app using command:</p>

<p><code>\\\some-network-share\app\jre\bin\javaw.exe -jar myapp.jar</code></p>

<p>because on this network share I've copied Amazon Correto 11 JDK files and other libs I use for the app.</p>

<p>I run get request in another thread and this thread throws an exception.</p>

<p>How can I overcome the problem? </p>

<p>Please help.</p>

<p>I've tried different libs: 
1. OkHttpClient
2. Java Unirest</p>

<p>but in both the same error. </p>

<pre class=""lang-java prettyprint-override""><code>
public class MyGetExecutor {


    public static void main(String[] args) {

        Thread getThread = new Thread( new Runnable() {

            @Override
            public void run() {

                try {
                    logMessage.add( ""Before request"" );
                    com.mashape.unirest.http.HttpResponse&lt;String&gt; response = Unirest.get(""https://myappserver.domain.com/api/v1/users/1"")
                    .header(""User-Agent"", ""PostmanRuntime/7.17.1"")
                    .header(""Accept"", ""*/*"")
                    .header(""Cache-Control"", ""no-cache"")
                    .header(""Postman-Token"", ""abf4b45d-a2c5-4f53-b4e3-1fa29643d616,e59130fc-5ce0-4b70-af48-ab3808362e36"")
                    .header(""Host"", ""wf01.cdprojektred.com"")
                    .header(""Accept-Encoding"", ""gzip, deflate"")
                    .header(""Cookie"", ""JSESSIONID=2C71F035C2EDFF145FED5C03C4887EF1"")
                    .header(""Connection"", ""keep-alive"")
                    .header(""cache-control"", ""no-cache"")
                    .asString();
                    logMessage.add( ""After request"" );
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    logMessage.add( ""Exception in getThread: "" + e.getMessage() );
                }


            }

        }, ""Get-thread"");
        getThread.setUncaughtExceptionHandler(
                new Thread.UncaughtExceptionHandler() {
                    @Override
                    public void uncaughtException(Thread t, Throwable e) {
                        logMessage.add( ""Error in thread: "" + e );
                        logMessage.add( ""Details: "" + e.getCause().getMessage() );
                    }
                }
            );
        getThread.start();

        while( getThread.isAlive() ) {

            try {
                Thread.sleep(1000);
                logMessage.add(""Main thread sleeping..."");
            } catch (Exception e) {
                logMessage.add(""Exception in main thread...: "" + e.getMessage());
            }



        }

    }
}
</code></pre>

<p><strong>EDIT 1</strong> I've added additional stacktrace - please check</p>
","<p>The clue is in last cause in your stack trace:<br/>
<code>Caused by: java.lang.SecurityException: Can't read cryptographic policy directory: unlimited</code></p>

<h2>down the rabit hole:</h2>

<ul>
<li><p>Verify where your security policies are coming from by inspecting  <code>java.security.properties</code> from within running JVM:</p>

<pre><code>System.getProperty(""java.security.properties"");
</code></pre>

<p>It should be present and pointing at a file. Inspect that file and make sure it has the following property <code>crypto.policy=unlimited</code> and the folder called <strong>unlimited</strong> is available from where the policy file is. The policy file itself should explain where to look for this folder.</p>

<p>For Coretto it is <code>&lt;jre_home&gt;/conf/security/policy/</code>
<br/></p></li>
<li><p>You can modify the location of the security policy by starting your JVM and passing it the location of the policy file:<br/> <code>java -Djava.security.properties==/conf/security/java.security</code>
<br/>OR<br/><code>java -Djava.security.properties=/conf/security/java.security</code></p>

<p>Additional <code>=</code>sign in the first case <strong>will cause Java to use only properties in the file you pointing at</strong>. <br/>The second option <strong>will add / update the properties defined in the file</strong>.
<br/></p></li>
<li>Lastly you have to dig around your <strong>Correto 11</strong> to find the policy file.<br/>
The paths above are taken from <a href=""https://d3pxv6yz143wms.cloudfront.net/11.0.3.7.1/amazon-corretto-11.0.3.7.1-linux-x64.tar.gz"" rel=""nofollow noreferrer"">amazon-corretto-11.0.3.7.1-linux-x64.tar.gz</a></li>
</ul>
","89","<java><amazon-web-services><jce><openjdk-11><unlimited-security>","1","4","1","2019-10-01 11:13:27","","3","","76237","","2019-10-01 11:13:27","2019-10-01 09:50:14",""
"19240236","How to convert Byte Array In Java","<p>File encryption i got a 64 length byte array key. I am Using RSA algorithm for encrypting  AES key. I want to send encrypted key to client via email.To send 64 length byte array is tedious task.How to send  these encrypted key to client and decrypt these key.</p>
","","89","<java><jce>","1","","0","2013-10-08 06:03:13","","5","0","","","","2013-10-08 06:03:13",""
"53113072","Joomla Content Editor not displaying helper lines around table cells on some computers","<p>I recently installed the latest version of JCE (2.6.33) on top of Joomla 3.9.0 and discovered that the guidelines you get around table cells when creating K2 and Acymailing articles to show their outlines were gone. I'm referring to the ""Visual Guidelines"" as described at:</p>

<p><a href=""https://www.joomlacontenteditor.net/support/documentation/editor/editor-content"" rel=""nofollow noreferrer"">https://www.joomlacontenteditor.net/support/documentation/editor/editor-content</a></p>

<p>I then just happened to look on a different computer and they were still present. Both computers are Windows 7, both are running Firefox 63.0. The one with guidelines missing is a laptop, the other a desktop. I tried clicking the ""Toggle guidelines/invisible elements"" button and it did nothing.</p>

<p>I couldn't figure out a solution so I decided to revert to my old JCE version, 2.6.30, and that fixed the problem on my laptop but then CAUSED the problem on my desktop.</p>

<p>I've been reading forums, googling, trying everything I can imagine and just cannot figure out what might be causing this. Has anyone come across anything like this and, if so, how do you fix it?</p>
","<p>Try installing the Web Developer Toolbar and delete some cookies. Seems like it might just be a change in how that setting is stored: <a href=""https://chrispederick.com/work/web-developer"" rel=""nofollow noreferrer"">https://chrispederick.com/work/web-developer</a> </p>
","89","<joomla><tinymce><jce>","3","1","1","2018-11-12 14:44:40","53264560","5","0","1745001","","2018-11-02 14:35:30","2018-11-02 05:23:17",""
"10976665","joomla jce add in the content","<p>Using Joomla! 1.5.26 and JCE 2.1.3 the users can select several options (string) from a popup and those options should be directly copied in the JCE editor where the cursor is.
How can I interact with the JCE content without creating a plugin?</p>

<p>Thanks!</p>
","<pre><code>tinyMCE.execCommand('mceInsertContent', false, '&lt;strong&gt;whatever you want!!!!&lt;/strong&gt;');
</code></pre>
","86","<joomla><interaction><jce>","0","0","1","2012-06-11 09:15:11","10977251","1","","","","","2012-06-11 08:28:04",""
"56256577","decrypting p7m with CMS and Luna Hsm on Jboss","<p>I'm decrypting a p7m file trough BouncyCastle api ,backed by Luna HSM. In a single istance all works like a charm.If i deploy the same code in a Jboss in domain mode or two single node i get the following:
""LunaException: Unable to inject key"" and  function 'C_UnwrapKey' returns 0x110 on key=xxxxxxx""</p>

<p>Note that the key handle doesn't exist on the hsm</p>

<p>I've tried to use the LunaProvider.jar as a system global module in order to avoid classloader problems, and also tried without. The client is configured correctly. If i run the application with two Boot instances on the two fisical nodes separately all works.Running in standalone tomcat also works</p>

<pre><code>    CMSEnvelopedData envelopedData = new CMSEnvelopedData(encEnvelopedData);

        log.info(""get recipient infos"");
        RecipientInformationStore recipients = envelopedData.getRecipientInfos();
        log.info(""get recipients size:{}"",recipients==null?""null"":recipients.size());
        //avoid assigning keys to java attributes since the operations are on the hsm
        RecipientInformation recipient = recipients.get(new JceKeyTransRecipientId((java.security.cert.X509Certificate)jcaProvider.getKeystore().getCertificate(alias)));
        if (recipient != null) {


            JceKeyTransEnvelopedRecipient trans=new JceKeyTransEnvelopedRecipient((PrivateKey)jcaProvider.getKeystore().getKey(alias,jcaProvider.getPwd().toCharArray()));

            trans.setProvider(""LunaProvider"");



            CMSTypedStream cmsTs= recipient.getContentStream(trans);
            return cmsTs.getContentStream();

</code></pre>
","<p>You need to have set the key as extractable in order to work.
This is due to the fact the translated key is temporarily stored on the hsm.</p>

<p>To do so one can either:</p>

<ul>
<li>add in java.security com.safenetinc.luna.provider.createExtractableKeys=true</li>
<li>using LunaSlotManager class set the keys as extractable</li>
</ul>

<p>Sample of code for the slot manager class:</p>

<pre><code>slotManager = LunaSlotManager.getInstance();

            slotManager.login(user, pwd);

            slotManager.setSecretKeysExtractable(true);
</code></pre>
","85","<java><jboss><jce><hsm>","1","2","1","2019-05-28 10:18:26","56339985","0","","4226757","","2019-05-24 08:44:28","2019-05-22 12:14:39",""
"12721313","how to change contenteditable to false in JCE editor","<p>I am using JCE editor in Joomla 1.5.x . Please clarify me on how to configure the 'contenteditable ' value to 'false'only for Administrator login only</p>

<p>Thank you</p>
","","82","<joomla><contenteditable><jce>","1","","0","2012-10-04 06:14:15","","1","","","","","2012-10-04 06:14:15",""
"28455785","Issue with Decryption of text file in JCE","<p>I have to do encryption of text file using JCE (Java SE 1.6). For this I have written a method <code>aes256CBCEncrypt</code> which returns <code>CipherOutputstream</code> which I write in file 'encryptedtest'. Now when I am trying to do decryption of this file(named 'encryptedtest') using the method <code>aes256CBCDecrypt</code>, It returns me <code>CipherInputStream</code> which I am writing in 'decryptedtest' to verify its content. Surprisingly, this file is empty. </p>

<p>Can somebody help me out what is wrong with my code. </p>

<p>Code Snippet:</p>

<pre><code> import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;


    class MyTest{
     public static OutputStream aes256CBCEncrypt(OutputStream os, String passPhrase) throws NoSuchAlgorithmException, NoSuchPaddingException, IOException, InvalidKeyException, InvalidAlgorithmParameterException
    {

        //  MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        //  md.update(passPhrase.getBytes());
        //  byte[] key = md.digest();

            Cipher aesCipher = Cipher.getInstance(""AES/CBC/ISO10126Padding"");

            SecureRandom secureRandom = new SecureRandom();
            secureRandom.setSeed(System.currentTimeMillis());
            byte[] bb = new byte[16];
            secureRandom.nextBytes(bb);
            os.write(bb);

            aesCipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(passPhrase.getBytes(), ""AES""), new IvParameterSpec(
                    bb));
            return new CipherOutputStream(os, aesCipher);


    }

    public static InputStream aes256CBCDecrypt(File f, String passPhrase)
            throws FileNotFoundException
    {
        FileInputStream fis = null;
        try
        {
            //MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        //  md.update(passPhrase.getBytes());
        //  byte[] key = md.digest();

            Cipher aesCipher = Cipher.getInstance(""AES/CBC/ISO10126Padding"");
            fis = new FileInputStream(f);
            byte[] bb = new byte[16];
            fis.read(bb);
            aesCipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(passPhrase.getBytes(), ""AES""), new IvParameterSpec(
                    bb));
            return new CipherInputStream(fis, aesCipher);
        }
        catch (final Exception e)
        {


        }
        return null;
    }

    public static void main(String args[]) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidAlgorithmParameterException, IOException{
    String keyFile = ""C:\\contentProducer"" + File.separator + ""test"";
        String encryptedFile = ""C:\\contentProducer"" + File.separator + ""encryptedtest"";
        String decryptedFile = ""C:\\contentProducer"" + File.separator + ""decryptedtest"";

        FileInputStream in = new FileInputStream(keyFile);
        FileOutputStream bos = new FileOutputStream(new File(encryptedFile));

    //Call method for Encryption
        OutputStream encryptedBos = aes256CBCEncrypt(bos,""0123456789abcdef"");
        int inByte;
        while ((inByte = in.read()) != -1 ) {
            encryptedBos.write(inByte);
        }
        in.close();
        bos.close();
        encryptedBos.close();

    //Call Method for Decryption

        InputStream inputStream = aes256CBCDecrypt(new File(encryptedFile), ""0123456789abcdef"");

        FileOutputStream deos = new FileOutputStream(new File(decryptedFile));
        while ((inByte = inputStream.read()) != -1 ) {
            deos.write(inByte);
        }
        inputStream.close();
        deos.close();

        }

}
</code></pre>
","<p>You are closing your <code>FileOutputStream</code> before you close your <code>CipherOutputStream</code>. This prevents the latter from completing its work and writing the encrypted data to disk.</p>

<pre><code>bos.close();
encryptedBos.close();
</code></pre>

<p>should change to:</p>

<pre><code>encryptedBos.close();
bos.close();
</code></pre>
","82","<java><encryption><java-6><jce>","0","0","1","2015-02-11 14:25:54","28456745","0","3","3518613","","2015-02-11 14:09:52","2015-02-11 13:38:21",""
"49792516","Could not write JSON: Input length must be multiple of 8 when decrypting with padded cipher","<p>I have followed a guide to simply encrypt and decrypt a string but I can't somehow make it work</p>

<p>I want to have a constant key so I don't need to save it to my database and waste space</p>

<p>I just want to encrypt some personal data not password</p>

<p>do you guys have any idea?</p>

<p>I'm following <a href=""https://www.mkyong.com/java/jce-encryption-data-encryption-standard-des-tutorial/"" rel=""nofollow noreferrer"">this</a> guide please it </p>

<pre><code>      public String getAction() throws Exception {
            String encodedKey = ""eightkey"";
            byte[] key = encodedKey.getBytes();
            decodedKey.length, ""DES"");

            SecretKey myDesKey = new SecretKeySpec(key, ""DES"");
            Cipher desCipher;
            desCipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
            desCipher.init(Cipher.DECRYPT_MODE, myDesKey);
            byte[] text = action.getBytes();
            byte[] textEncrypted = desCipher.doFinal(text);
            String getAct = """"+textEncrypted;

                return getAct;
        }

        public void setAction(String action) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {

            String encodedKey = ""eightkey"";
            byte[] key = encodedKey.getBytes();
            SecretKey myDesKey = new SecretKeySpec(key, ""DES"");
            Cipher desCipher;
            desCipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
            byte[] text = action.getBytes();
            desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);
            byte[] textEncrypted = desCipher.doFinal(text);
            String setAct = """"+textEncrypted;
            this.action = setAct;
        }
</code></pre>

<p>Full error here</p>

<pre><code>2018-04-12 17:06:34.587  WARN 1572 --- [nio-8080-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Input length must be multiple of 8 when decrypting with padded cipher; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Input length must be multiple of 8 when decrypting with padded cipher (through reference chain: com.capstone.codegum.Codegum.Objects.Logs[""action""])
</code></pre>
","<p>Use byte[] actionBytes instead of String action something of the sort:</p>

<pre><code>private byte[] actionBytes;

public String getAction() throws Exception {

    String encodedKey = ""eightkey"";
    byte[] key = encodedKey.getBytes(""UTF8"");
    SecretKey myDesKey = new SecretKeySpec(key, ""DES"");

    Cipher desCipher;
    desCipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
    desCipher.init(Cipher.DECRYPT_MODE, myDesKey);      
    byte[] textEncrypted = desCipher.doFinal(actionBytes);
    return new String(textEncrypted);
}

public void setAction(String action) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException {

    String encodedKey = ""eightkey"";
    byte[] key = encodedKey.getBytes(""UTF8"");       

    SecretKey myDesKey = new SecretKeySpec(key, ""DES"");

    Cipher desCipher;
    desCipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
    byte[] text = action.getBytes(""UTF8"");
    desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);
    byte[] textEncrypted = desCipher.doFinal(text);
    actionBytes = textEncrypted;
}
</code></pre>

<p>Or if you want to keep using String action then you should do this:</p>

<pre><code>public String action;

public String getAction() throws Exception {

    String encodedKey = ""eightkey"";
    byte[] key = encodedKey.getBytes(""UTF8"");
    SecretKey myDesKey = new SecretKeySpec(key, ""DES"");

    Cipher desCipher;
    desCipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
    desCipher.init(Cipher.DECRYPT_MODE, myDesKey);      
    byte[] textEncrypted = desCipher.doFinal(action.getBytes(""UTF8""));
    return new String(textEncrypted);
}

public void setAction(String action) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException {

    String encodedKey = ""eightkey"";
    byte[] key = encodedKey.getBytes(""UTF8"");       

    SecretKey myDesKey = new SecretKeySpec(key, ""DES"");

    Cipher desCipher;
    desCipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
    byte[] text = action.getBytes(""UTF8"");
    desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);
    byte[] textEncrypted = desCipher.doFinal(text);
    action = new String(textEncrypted, ""UTF8"");
}
</code></pre>
","70","<java><encryption><des><jce>","0","0","2","2018-04-12 10:01:44","","2","","9066659","","2018-04-12 09:19:21","2018-04-12 09:11:04",""
"49792516","Could not write JSON: Input length must be multiple of 8 when decrypting with padded cipher","<p>I have followed a guide to simply encrypt and decrypt a string but I can't somehow make it work</p>

<p>I want to have a constant key so I don't need to save it to my database and waste space</p>

<p>I just want to encrypt some personal data not password</p>

<p>do you guys have any idea?</p>

<p>I'm following <a href=""https://www.mkyong.com/java/jce-encryption-data-encryption-standard-des-tutorial/"" rel=""nofollow noreferrer"">this</a> guide please it </p>

<pre><code>      public String getAction() throws Exception {
            String encodedKey = ""eightkey"";
            byte[] key = encodedKey.getBytes();
            decodedKey.length, ""DES"");

            SecretKey myDesKey = new SecretKeySpec(key, ""DES"");
            Cipher desCipher;
            desCipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
            desCipher.init(Cipher.DECRYPT_MODE, myDesKey);
            byte[] text = action.getBytes();
            byte[] textEncrypted = desCipher.doFinal(text);
            String getAct = """"+textEncrypted;

                return getAct;
        }

        public void setAction(String action) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {

            String encodedKey = ""eightkey"";
            byte[] key = encodedKey.getBytes();
            SecretKey myDesKey = new SecretKeySpec(key, ""DES"");
            Cipher desCipher;
            desCipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
            byte[] text = action.getBytes();
            desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);
            byte[] textEncrypted = desCipher.doFinal(text);
            String setAct = """"+textEncrypted;
            this.action = setAct;
        }
</code></pre>

<p>Full error here</p>

<pre><code>2018-04-12 17:06:34.587  WARN 1572 --- [nio-8080-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Failed to write HTTP message: org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Input length must be multiple of 8 when decrypting with padded cipher; nested exception is com.fasterxml.jackson.databind.JsonMappingException: Input length must be multiple of 8 when decrypting with padded cipher (through reference chain: com.capstone.codegum.Codegum.Objects.Logs[""action""])
</code></pre>
","<p>I have modified your code a bit and able to run it. Here is a running example:</p>

<p>Pojo.java</p>

<pre><code>package com.test;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class Pojo {
    private byte[] action = null;
    private SecretKey myDesKey = null;
    private String encodedKey = ""eightkey"";

    public String getAction() throws Exception {
        Cipher desCipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
        desCipher.init(Cipher.DECRYPT_MODE, myDesKey);

        byte[] text = action;
        byte[] textEncrypted = desCipher.doFinal(text);
        String getAct = new String(textEncrypted);

        return getAct;
    }

    public void setAction(String action) throws Exception {
        Cipher desCipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
        byte[] key = encodedKey.getBytes();
        this.myDesKey = new SecretKeySpec(key, ""DES"");
        desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);

        byte[] text = action.getBytes();
        byte[] textEncrypted = desCipher.doFinal(text);
        this.action = textEncrypted;
    }
}
</code></pre>

<p>MainClass.java</p>

<pre><code>package com.test;

public class MainClass {

    public static void main(String[] args) throws Exception {
        Pojo p = new Pojo();
        p.setAction(""hello"");
        String s = p.getAction();
        System.out.println(s);
        p.setAction(""world"");
        s = p.getAction();
        System.out.println(s);
    }

}
</code></pre>

<p>Output:</p>

<pre><code>hello
world
</code></pre>
","70","<java><encryption><des><jce>","0","1","2","2018-04-12 10:01:44","","2","","9066659","","2018-04-12 09:19:21","2018-04-12 09:11:04",""
"20995263","why decrypted string cannot display?","<p>I decrypt a file but it is not displaying the decrypted string. It is also throwing an <code>javax.crypto.IllegalBlockSizeException</code>.</p>

<p>Here is my code:</p>

<pre><code>File f=new File(""C:/Users/User/Desktop/Test.txt"");
int ch;

StringBuffer strContent = new StringBuffer("""");
FileInputStream fin = null;
try {
    fin = new FileInputStream(f);
    while ((ch = fin.read()) != -1)
        strContent.append((char) ch);
    fin.close();
} 
catch (Exception e) {
    System.out.println(e);
}

KeyGenerator kgen = KeyGenerator.getInstance(""AES"");
kgen.init(128);

SecretKey skey = kgen.generateKey();
byte[] raw = skey.getEncoded();

SecretKeySpec skeySpec = new SecretKeySpec(raw, ""AES"");

Cipher cipher = Cipher.getInstance(""AES"");

cipher.init(Cipher.DECRYPT_MODE, skeySpec);
byte[] original =cipher.doFinal(strContent.toString().getBytes());

String originalString = new String(original);
JOptionPane.showMessageDialog(null,originalString.toString());
</code></pre>
","<p>An <code>IllegalBlockSizeException</code> occurs when the input data is not a multiple of the block-size (16 bytes in the case of AES).</p>

<p>This problem has been caused by your method of reading the decrypted data. As explained in the comments by Jesper and JB Nizet, encrypted data is unreadable as text. Trying to read it as a string (regardless of character set) isn't going to work.</p>

<p>So... ensure you are writing your file to disk as a byte stream and read it in the same manner. This should ensure you have exactly the right data (which will be the right length).</p>

<p>I'd recommend something like Apache commons-lang <a href=""http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FileUtils.html#writeByteArrayToFile%28java.io.File,%20byte%5b%5d%29"" rel=""nofollow""><code>FileUtils.writeByteArrayToFile</code></a> and <a href=""http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FileUtils.html#readFileToByteArray%28java.io.File%29"" rel=""nofollow""><code>FileUtils.readFileToByteArray</code></a>, or write your own with the Java IO libraries.</p>
","70","<java><encryption><aes><jce>","0","0","1","2014-01-08 12:42:23","","7","2","474189","","2014-01-08 12:37:18","2014-01-08 12:09:50",""
"45460504","Error generate DES key for session info. Cause: no such provider: CryptixCrypto","<p>After upgrade maven project from Java 7 to Java 8 I've got the following error:</p>

<p><code>Error generate DES key for session info. Cause: no such provider: CryptixCrypto</code></p>

<p>The problem may be resolved by adding the following line to the appropriate place of the code:</p>

<pre class=""lang-java prettyprint-override""><code>Security.addProvider(new CryptixCrypto());
</code></pre>

<p>Can anyone explain me what happens and what is the best solution for this problem?</p>
","","69","<java><maven><encryption><jce><javax.crypto>","0","","0","2017-08-02 12:16:34","","3","1","8115141","","2017-08-02 12:16:34","2017-08-02 12:09:32",""
"39396113","Java 1.8 symmetric DESede encryption and decryption","<p>I come with an issue related to <code>JCE</code>.</p>

<h2>Context</h2>

<ul>
<li>SDK: JDK 1.8</li>
<li>OS: Ubuntu 14</li>
</ul>

<p>I have been asked to implement a component for decrypt <code>java.lang.String</code>. The encrypted string is part of webservice response which we integrate with.</p>

<p>Webservice provider has provided to us with a <em>binary file</em> to be used to decrypt. </p>

<ul>
<li><strong>ProviderDESedeWebservice.key</strong>. </li>
</ul>

<p>They also informed the alogirthm:</p>

<ul>
<li><strong>DESede/CBC/PKCS5Padding</strong></li>
</ul>

<p>String comes encoded in 64Base. So we have to decode it before to decrypt.</p>

<p>Once decrypted, I should get a xml message</p>

<h2>My class</h2>

<p>Based on this info, I have researched how to implement my component and here is what I have:</p>

<pre><code>package org.mycompany.commons;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.util.Base64;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
//Apache commons IO
import org.apache.commons.io.IOUtils;

/**
 * Componente de soporte para codificar y descodificar mensajes
 * 
 * @author opentrends
 *
 */
public final class EncryptHelper {

    public static final String decrypt(final String encrypted, final String encoding)
            throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException,
            BadPaddingException, IOException, InvalidAlgorithmParameterException, NoSuchProviderException {
        //Mainly UTF-8
        Charset charset =  Charset.forName(encoding);

        //Decoding binary.
        byte[] base64CryptedMessageByteArr = Base64.getDecoder().decode(encrypted);

        //Init of descipher
        Cipher desCipher = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");
        AlgorithmParameterSpec ivSpec = new IvParameterSpec(new byte[8]);
        desCipher.init(Cipher.DECRYPT_MODE, generateSecretKey(charset),ivSpec);

        //Decrypting binary
        byte[] byteDecryptedTextByteArr = desCipher.doFinal(base64CryptedMessageByteArr);
        String clearText = new String(byteDecryptedTextByteArr, encoding);
        return clearText;
    }




private final static Key generateSecretKey(Charset charset) throws IOException{     
            InputStream secretKeyFile = RACEEncrypter.class.getResourceAsStream(""/DESedeRACE.key"");
        InputStreamReader secretKeyReader = new InputStreamReader(secretKeyFile);
        byte[] scretKeyByteArr = IOUtils.toByteArray(secretKeyReader);

        try {
            SecretKeyFactory factory = SecretKeyFactory.getInstance(""DESede"");
            SecretKey key = factory.generateSecret(new DESedeKeySpec(scretKeyByteArr));
            return key;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }           
        }       
    }
</code></pre>

<ul>
<li>Key file (<em>ProviderDESedeWebservice.key</em>) is going to be in the classpath. At the moment I placed it at <em>resources</em> folder.</li>
</ul>

<h2>Issue</h2>

<p>Executing <strong>decrypt()</strong> java throws an error:</p>

<blockquote>
  <p>java.security.InvalidKeyException: Invalid key length: 46 bytes</p>
</blockquote>

<p>Ok I have understood that <strong>DESede</strong> keys can not be longer than 24 bytes.
So I have tried this approach at the time of generating the key</p>

<pre><code>...
try {                               
        SecretKeyFactory factory = SecretKeyFactory.getInstance(""DESede"");  
        SecretKey key = factory.generateSecret(new DESedeKeySpec(scretKeyByteArr));
        return key; 
} catch (Exception e) {
        e.printStackTrace();    
}
return null;
</code></pre>

<p>Now Java throws:</p>

<blockquote>
  <p>javax.crypto.BadPaddingException: Given final block not properly padded</p>
</blockquote>

<p>I kept trying different approachs and my next tried has benn to change the algorithm</p>

<pre><code>Cipher desCipher = Cipher.getInstance(""DESede/CBC/NoPadding"");
</code></pre>

<p>Finally I get a binary that looks like this </p>

<blockquote>
  <p>Decrypted message:�.B
  ���;����[�׮��u85�I���@M���㦬�����E��+S���^</p>
</blockquote>

<p>But I have expected to get an XML.</p>

<h2>Question</h2>

<p>I think the question is obvious.</p>

<ul>
<li>What am I doing wrong?</li>
<li>Do am I loading properly the key file?
-- <em>Answer</em>:<em>Yes. Problem is not here</em></li>
<li>Do am I decoding properly the input string?
-- <em>Answer</em>:<em>Yes. Problem is not here</em></li>
<li>Could secret key file be corrupted? Malformed?
-- <em>Answer</em>:<em>No. But it might not be the one I need</em></li>
</ul>

<h2>EDIT:</h2>

<p>I have tested that web services encrypted responses can not be decrypted with the key we have. Key or algorithm might be modified by reasons why dont know and we were not aware of it</p>
","","67","<java><encryption><encryption-symmetric><jce><secret-key>","1","","0","2016-09-11 19:06:28","","8","2","5934037","","2016-09-11 19:06:28","2016-09-08 16:30:47","2016-09-09 08:16:27"
"55455918","How can I load a module by name instead of id?","<p>I wants to load module by name like {loadmodule mod_custom, module_name} instead of id like {loadmoduleid 96}. can you please suggest where i will get these setting in JCE Editor so that JCE editor can load module by its name.</p>

<p>Thanks</p>
","<p>You can use <code>{loadmodule your_module_name}</code> instead of <code>{loadposition}</code>. IF you are using a single module you can just put the name there or else if you have many types of same module with different names you can try a different variation of <code>loadmodule</code> like</p>

<pre><code>{loadmodule mod_modulename title}

mod_modulename = your module Type like for joomla login we have mod_login

title = Your module name that you have given for module.
</code></pre>
","66","<joomla><jce>","0","1","1","2019-04-01 15:43:16","","1","","1264804","","2019-04-01 13:29:10","2019-04-01 13:08:45",""
"55622035","Java crypto comparisons: Does SunJCE use native code?","<p>I wrote up a test to compare some Java crypto provider performance (pasted below).  I was surprised to find that the SunJCE implementation ended up being the fastest, since others (at least Apache Commons Crypto) relies on a native openssl implementation.</p>

<ol>
<li>Does SunJCE use a native implementation as well?</li>
<li>Is there an issue with this test that's giving me incorrect/misleading results?</li>
</ol>

<pre><code>// Nss installed on mac via ""brew install nss""
fun getProviders(): List&lt;Provider&gt; {
    return listOf(
        Security.getProvider(""SunJCE""),
        sun.security.pkcs11.SunPKCS11(
            ""--name=CryptoBenchmark\\n""
                    + ""nssDbMode=noDb\\n""
                    + ""nssLibraryDirectory=/usr/local/opt/nss/lib/\\n""
                    + ""attributes=compatibility""),
        BouncyCastleProvider()
    )
}

fun blockCipherTests(providers: List&lt;Provider&gt;) {
    val ciphers = providers.map {
        try {
            Cipher.getInstance(""AES/CTR/NoPadding"", it)
        } catch (t: Throwable) {
            println(""Error getting cipher from provider $it: $t"")
            throw t
        }
    }

    val key = SecretKeySpec(getUTF8Bytes(""1234567890123456""),""AES"");
    val iv = IvParameterSpec(getUTF8Bytes(""1234567890123456""));
    val random = Random()

    ciphers.forEach {
        it.init(Cipher.ENCRYPT_MODE, key)
    }

    // Crypto commons doesn't implement the provider interface(?) so instantiate that cipher separately
    val properties = Properties().apply {
        setProperty(CryptoCipherFactory.CLASSES_KEY, CryptoCipherFactory.CipherProvider.OPENSSL.getClassName());
    }
    val apacheCommonsCipher = Utils.getCipherInstance(""AES/CTR/NoPadding"", properties)
    apacheCommonsCipher.init(Cipher.ENCRYPT_MODE, key, iv)


    val data = ByteArray(1500)
    val out = ByteArray(1500)
    random.nextBytes(data)
    repeat (10) {
        ciphers.forEach { cipher -&gt;
            val time = measureNanoTime {
                repeat(100) {
                    cipher.doFinal(data)
                }
            }
            println(""Cipher ${cipher.provider} took ${time / 100} nanos/run"")
        }
        // Run the apache test separately
        val time = measureNanoTime {
            repeat(100) {
                apacheCommonsCipher.doFinal(data, 0, 1000, out, 0)
            }
        }
        println(""Cipher apache took ${time / 100} nanos/run"")

        println(""===================================="")
    }
}

fun main() {
    val providers = getProviders()

    println(providers)

    blockCipherTests(providers)
}
</code></pre>
","<p>Yes, it does. And no, it doesn't.</p>

<p>AES-NI is used through <em>Java intrinsics</em>, which replaces byte code by the native implementation of AES. So although you won't find a direct call to the AES-NI instructions, the <code>doFinal</code> call in your Java code will at some point use hardware acceleration. So the code of the JCE is just Java, but the JIT can still speed it up. Nifty, huh?</p>

<p>To really test your code you may want to use a warm up time for the JIT (to enable the AES-NI as well). You should be able to use a buffer instead of generating a new array object each time for the ciphertext.</p>

<p>More importantly, might want to catch the output of that buffer and e.g. XOR it into a final buffer and print it out. This will make it next to impossible for the compiler to skip the code altogether. Compiler optimizations are tricky to handle if you're not really interested in the results themselves; the compiler or JIT may just skip the encryption altogether to obtain the same result, after all.</p>

<p>You probably need more AES operations in a single loop too. You could implement the Monte Carlo testing required for the AES competition as a base.</p>
","63","<java><encryption><jce>","0","0","1","2019-04-12 15:04:41","55654581","0","","","","","2019-04-10 22:14:20",""
"44907092","JCE padding not being properly encrypted/decrypted","<p>I am working on a program that I will use to encrypt and decrypt files using the JCE. My encryption and decryption is working correctly in default mode (ECB/PKCS5PADDING) however when I try to use CBC and I decrypt my file I am getting some of the text being junk (or when I try an image it gets corrupted. </p>

<p>Can anyone see what I am doing wrong? (I have not included my imports, can add if necessary)</p>

<pre><code>public class encwork {
private static String keyString = ""ykHySDZCWr16TVku""; //Encryption key
private static void bulkWork(int cipherMode, File inputFile, File outputFile) throws Exception{
    //Let the user enter the key they wish to use
    Key secretKey = new SecretKeySpec(keyString.getBytes(), ""AES""); //Generates a key based on the default keysize for the specified algorithm

    //Generate an Initialization Vector (IV)
    final int ALG_KEYLENGTH = 128; //Change this as desired for the security level you want
    byte[] iv = new byte[ALG_KEYLENGTH / 8]; //Save the IV bytes or send it in plaintext with the encrypted data so you can decrypt the data later
    SecureRandom prng = new SecureRandom(); //Use SecureRandom to generate random bits. The size of the IV matches the blocksize of the cipher
    prng.nextBytes(iv); //Construct the appropriate IvParameterSpec object for the data to pass to Cipher's init() method

    //Create a Cipher by specifying the following parameters: Alg name, Mode (CBC), Padding (PKC7/PKCS5)
    Cipher cipherForEncryption = Cipher.getInstance(""AES/CBC/PKCS5PADDING""); // Must specify the mode explicitly as most JCE providers default to ECB mode

    //Initialize the Cipher for Encryption
    cipherForEncryption.init(cipherMode, secretKey, new IvParameterSpec(iv));

    //Declare / Initialize the Data, Convert the Input to Bytes and encrypt or decrypt using doFinal.
    FileInputStream inputStream = new FileInputStream(inputFile);
    byte[] inputBytes = new byte[(int) inputFile.length()];
    inputStream.read(inputBytes);
    byte[] outputBytes = cipherForEncryption.doFinal(inputBytes);
    FileOutputStream outputStream = new FileOutputStream(outputFile);
    outputStream.write(outputBytes);
    inputStream.close();
    outputStream.close();
}

public static void main(String[] args) {
    File inputFile = new File(""C:/Users/admin/Desktop/Crypto/In/test.txt""); 
    File encryptedFile = new File(""C:/Users/admin/Desktop/Crypto/Enc/test.encrypted"");
    File decryptedFile = new File(""C:/Users/admin/Desktop/Crypto/Dec/testdec.txt"");

    //Encryption
    try {
        encwork.encrypt(inputFile, encryptedFile); //Encrypt method
    } catch (Exception e) {
        e.printStackTrace(); //Will show what caused the error in the console if an error occurs
    }

    //Decryption
    try {
        encwork.decrypt(encryptedFile, decryptedFile); //Decrypt method
    } catch (Exception e) {
        e.printStackTrace(); //Will show what caused the error in the console if an error occurs
    }
}

public static void encrypt(File inputFile, File outputFile) throws Exception {
    bulkWork(Cipher.ENCRYPT_MODE, inputFile, outputFile); //ENC_MODE = Constant used to initialize cipher to encryption mode.
}

public static void decrypt(File inputFile, File outputFile) throws Exception {
    bulkWork(Cipher.DECRYPT_MODE, inputFile, outputFile); //ENC_MODE = Constant used to initialize cipher to encryption mode.
}}
</code></pre>
","<p>You are not using the same IV for both encryption and decryption.</p>

<p>From the comment that the decryption starts: ""the first line is ""çQßs}@ LÂ¤qMä]this is a test"" that would mean the IV for encryption and decryption is not the same.</p>

<p>This comment says it all:  </p>

<p><em>//Save the IV bytes or send it in plaintext with the encrypted data so you can decrypt the data later</em></p>

<p>Either:</p>

<ol>
<li>save the IV by returning it from the encryption and passing it in on decryption</li>
</ol>

<p>or</p>

<ol start=""2"">
<li>prefix the encrypted data with the IV and on decryption split it off to use for decryption. (The IV does not need to be secret)</li>
</ol>

<p>More on the IV and CBC mode, see <a href=""https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29"" rel=""nofollow noreferrer"">Cipher Block Chaining (CBC)</a>:</p>

<p>While the IV influences the entire encrypted data CBC mode is self correcting and this means only the first block is incorrect when the wrong IV is used on decryption.</p>
","60","<java><encryption><jce>","1","0","1","2017-07-10 15:18:28","44907929","3","3","8254068","","2017-07-10 15:18:28","2017-07-04 13:15:34",""
"43285366","windows 10 properly installing JAR files for JVM","<p>I am entirely new to Java so please refer me to a similar question if this is a duplicate.  I did not see an answer specific to my problem.</p>

<p>I am working to get my environment up and running with <strong>maven</strong></p>

<p>The error I came across </p>

<pre><code>[project name] requires that the high-encryption JAR files be installed for the JVM used to build the project.
</code></pre>

<p>So i went to <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow noreferrer"">http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html</a>. To get the java cryptography extension.  </p>

<p>I downloaded the extension and and compressed it.  At this point I am expecting to be able to get past the **high-encryption ** error that was blocking me.</p>

<p><a href=""https://i.stack.imgur.com/JPghN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JPghN.png"" alt=""enter image description here""></a></p>

<p>Unfortunately,  I am still getting the same error from above.  Not sure what else I need to do to get this working. Any insight would be greatly appreciated.</p>
","<p>With maven, use your POM.xml file to fetch your dependencies.</p>
","58","<java><maven><jce>","1","1","1","2017-04-07 19:14:18","","1","","","","","2017-04-07 19:02:52",""
"24120640","Symmetric Key Generation","<p>I have two questions:</p>

<ol>
<li>When to use <code>SecretKeySpec</code> and when to use <code>KeyGenerator</code> for key generation?</li>
<li>Is it necessary that the Key instance and the Cipher instance has to follow the same Algorithm? What is the concept behind?</li>
</ol>
","<ol>
<li><p>Depends on your application</p></li>
<li><p>Yes.  Different ciphers may use different key lengths.  You pass AlgorithmParameterSpec to the key generator.</p></li>
</ol>
","57","<java><jce>","0","0","2","2014-07-03 07:55:49","","0","","1196603","","2014-06-09 12:55:08","2014-06-09 12:45:56",""
"24120640","Symmetric Key Generation","<p>I have two questions:</p>

<ol>
<li>When to use <code>SecretKeySpec</code> and when to use <code>KeyGenerator</code> for key generation?</li>
<li>Is it necessary that the Key instance and the Cipher instance has to follow the same Algorithm? What is the concept behind?</li>
</ol>
","<p><code>KeyGenerator</code> creates a <em>new</em> random key each time it is called. The returned key is also guaranteed to have the length compatible with the algorithm specified when obtaining the <code>KeyGenerator</code> instance.</p>

<p><code>SecretKeySpec</code> wraps an <em>existing</em> byte array. The source of bytes can be a hex or Base64 string or really any other textual or binary representation of the previously generated key. Hence the use case for <code>SecretKeySpec</code> is when you need to reuse the key which was previously stored in some external representation.</p>

<p>Usually an instance of <code>SecretKeySpec</code> can be used directly as a key because <code>SecretKeySpec</code> implements <code>SecretKey</code> and most crypto algorithms that use secret keys support so-called ""raw"" keys where the ""raw"" key is basically a random sequence of bytes without specific internal structure.</p>

<p>When an algorithm requires a specific <code>SecretKey</code> representation (usually a subclass of <code>SecretKey</code> internal to algorithm implementation) you will have to use <code>SecretKeyFactory</code> to transform a <code>SecretKeySpec</code> into a proper <code>SecretKey</code>.</p>

<p>If a crypto algorithm supports ""raw"" keys then the only requirement is that the key length matches the algorithm expectations.</p>

<p>But the implementer of crypto provider can decide that he needs to use a specific key representation which, for example, caches or precalculates some values based on the initial ""raw"" bytes. In that case the algorithm can require that a <code>SecretKey</code> instance passed into in addition to returning correct identifiers from <code>Key.getAlgorithm()</code> and <code>Key.getFormat()</code> methods is also a specific subclass of <code>SecretKey</code>, so the usage of <code>SecretKeyFactory</code> to convert key spec into a key is mandatory. Such cases are usually documented in the provider documentation.</p>
","57","<java><jce>","0","0","2","2014-07-03 07:55:49","","0","","1196603","","2014-06-09 12:55:08","2014-06-09 12:45:56",""
"30314919","How to upgrade this Java encryption code this to more than 128 bits?","<p>The code below works, but it works only at 128 bits.   I'm not failing because of the JCE's lack of support for high-rate encryption (I've taken care of this), but I'm looking for a way to support a non-default key rate.</p>

<pre><code>def encrypt(iv4bytes: Array[Byte], pass: String, indata: Array[Byte]): Array[Byte] = {
    val cipher = Cipher.getInstance(""AES/CBC/NoPadding"", ""SunJCE"") // Get a cipher object
    val key = new SecretKeySpec(pass.getBytes(""UTF-8""), ""AES"") // Get our key object
    cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(iv4bytes)) // Initialize crypto
    return cipher.doFinal(indata) // And do the encryption
  }
</code></pre>
","","56","<java><encryption><jce>","0","","0","2015-05-19 00:35:01","","2","","","","","2015-05-19 00:35:01",""
"52039044","Encrypt folder and open with java application","<p>My java application stores data in a folder at user home directory.
How can i encrypt that folder but access the encrypted folder with an application?</p>

<p>I tried to encrypt the folder with java, (Java Cryptography Extension (JCE)), but cannot access this folder from within my application without decrypting it.</p>

<p>I need the user to have no access to this folder, only within my application.</p>
","<p><em>Note: This is going to be a bit of an unorthodox answer, and might not be exactly what the OP is looking for.</em> </p>

<p>One possible solution is to zip the files in your folder, and then encrypt the zip file. 
Reading its contents will be slower of course, but is perfectly feasible with Java's NIO Zip File system provider. You will need to decrypt it back so that it is back to zip format.</p>

<p><a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/io/fsp/zipfilesystemprovider.html"" rel=""nofollow noreferrer"">https://docs.oracle.com/javase/8/docs/technotes/guides/io/fsp/zipfilesystemprovider.html</a></p>

<p>Not sure how frequently the files will change by the application, and how feasible it is to update the zip file and re-encrypt it for what is needed.</p>
","54","<java><swing><io><jfilechooser><jce>","1","1","1","2018-08-27 13:09:25","","3","0","","","","2018-08-27 12:08:36",""
"4956877","what is the alternative for Provider Class to use in j2me","<p>can anyone please tell me how to use jce in J2ME ?</p>
","<p>You can use <a href=""http://www.bouncycastle.org/latest_releases.html"" rel=""nofollow"">bouncycastle</a>. And see this <a href=""http://www.java-tips.org/java-me-tips/midp/encrypting-decrypting-text-messages-with-bouncy-castle-crypt.html"" rel=""nofollow"">example</a>.</p>
","54","<java><java-me><provider><jce>","1","0","1","2012-04-18 03:52:07","4957124","0","","996493","","2012-04-18 03:52:07","2011-02-10 12:08:38",""
"42235019","JCE deployed with project instead of JDK update","<p>I'm trying to use BouncyCastle for AES encryption and have downloaded the latest JCE from Oracle and installed it locally on my Dev PC, all good. </p>

<p>However, I intend to deploy my code at work on customer servers and I can't see it being easy to get them to agree with numerous JDK lib/security updates. Security will never trump cost at our place (no matter what they tell us).  </p>

<p>So my question is, using Eclipse and JDK 1.8.11 is it possible to package the JCE into my Jar/War files?</p>

<p>If so How? </p>

<p>I've read various links on SO and elsewhere. Most are quite old so I was wondering if in 2017 this was possible?</p>
","<p>If you mean ""Unlimited Strength Jurisdiction Policy Files"" with JCE, then you cannot achieve what you need with any kind of packaging. These policy files need to be installed to the running JVM, and thus you cannot solve this problem either programmatically or via different packaging options.</p>

<p>To achieve what you need, you have to use BC throgh their own API, rather then calling JCE functions and specifying ""BC"" as the provider since it will fail because of policy/security checks. You can walk around this check only by using BC API (or any other crypto library) directly.</p>
","51","<java><eclipse><encryption><aes><jce>","1","2","1","2017-02-14 20:14:20","42235364","0","","","","","2017-02-14 19:53:56",""
"53905249","SHA-256 Execution time is less than HmacSHA256 in java","<p>I want to compare sha256 and ""Hmac with sha256"" execution time.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code> public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        // TODO code application logic here
     byte[] data = {0,3,0,6,0,0,8,0,9,0,0,8,0,0,5,0}; 
   
     MessageDigest md = MessageDigest.getInstance(""SHA-256"");

     long SHaStart = System.nanoTime();

    md.digest(data);
  
    long SHaTime = System.nanoTime() - SHaStart;
    System.out.println(""SHaTime:""+SHaTime);
}</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>public static void main(String[] args) throws NoSuchAlgorithmException, UnsupportedEncodingException, InvalidKeyException {
        // TODO code application logic here

         byte[] keyBytes   = new byte[]{0,1,2,3,4,5,6,7,8 ,9,10,11,12,13,14,15};
String algorithm  = ""RawBytes"";
SecretKeySpec secretKey = new SecretKeySpec(keyBytes, algorithm);
        
        
javax.crypto.Mac mac = javax.crypto.Mac.getInstance(""HmacSHA256"");
mac.init(secretKey);
byte[] data = {0,3,0,6,0,0,8,0,9,0,0,8,0,0,5,0};

long macStart = System.nanoTime();
 mac.doFinal(data);

long MAcTime = System.nanoTime() - macStart;
System.out.println(""macTime:""+MAcTime);
    }</code></pre>
</div>
</div>
</p>

<p>the result is: SHaTime:489589 and macTime:180070,
as I know caculating sha256 is a part of caculating Hmac; so it should take less time. can any one help me with it please?</p>
","","50","<java><sha256><jce><message-authentication-code>","0","","0","2018-12-23 16:39:18","","2","","2630326","","2018-12-23 16:39:18","2018-12-23 16:31:12",""
"55019688","How to store Keypair in Android, that should persist even application uninstall?","<p>I want to store Asymmetric keypairs in an Android device, And that should persist even after uninstalling the application. I tried AndroidKeystore, But keys are getting removed, after the app installed. Where as i-os provides the way to store like this.Keychain provides the way to do that. In Android also Keychain is there. Is it able solve my problem?</p>
","","49","<java><android><android-keystore><jce><java-security>","1","","0","2019-03-06 09:30:56","","2","","","","","2019-03-06 09:30:56",""
"38001328","How to change font in old version Joomla! Administrator","<p><br/>
I want to change font and font-size when i add new content on my site in 
Joomla! Administrator.<br/>
I don't know how to do it in my version - Joomla! 1.0.12 Stable [ Sunfire ].<br/>
I know, in next version of Joomla! i can use JCE - Joomla Content Editior.<br/>
<strong>Is any (simple) way to get it in my version?</strong></p>
","<p>Wow! Joomla 1.0 has been unsupported since July 2009 - nearly 7 years ago. Maybe it's time to upgrade?</p>

<p>If there is an option in the editor to switch to HTML mode, you may be able to add in-line styling.</p>

<p>Alternatively, you may be able to edit the template CSS file to achieve a site wide change of body text font and font size (if this is what you want). You should be able to find the appropriate CSS file by looking in the page source.</p>

<p>It looks like you can still download JCE Editor for Joomla 1.0.x but I'm not sure if this applies to version 1.0.12 or not:</p>

<p><a href=""https://www.joomlacontenteditor.net/component/zoo/item/component-10x"" rel=""nofollow"">https://www.joomlacontenteditor.net/component/zoo/item/component-10x</a></p>

<p>I suggest running a backup before trying to install it.</p>
","49","<joomla><fonts><jce><content-editor>","1","1","1","2016-06-24 11:31:23","38012407","1","","","","","2016-06-23 20:34:31",""
"50382550","SM2Engine can encrypt,but how to add envelop on it?","<p>I can get a public key from a certificate file,and use code below to encrypt a message with sm2engine.</p>

<pre><code>public static String encrypt(String data, PublicKey publicKey)
    {

        ECPublicKeyParameters localECPublicKeyParameters = null;

        if (publicKey instanceof BCECPublicKey)
        {
            BCECPublicKey localECPublicKey = (BCECPublicKey)publicKey;
            ECParameterSpec localECParameterSpec = localECPublicKey.getParameters();
            ECDomainParameters localECDomainParameters = new ECDomainParameters(
                localECParameterSpec.getCurve(), localECParameterSpec.getG(),
                localECParameterSpec.getN());
            localECPublicKeyParameters = new ECPublicKeyParameters(localECPublicKey.getQ(),
                localECDomainParameters);
        }
        SM2Engine localSM2Engine = new SM2Engine();
        localSM2Engine.init(true, new ParametersWithRandom(localECPublicKeyParameters,
            new SecureRandom()));
        byte[] arrayOfByte2;
        try
        {
            arrayOfByte2 = localSM2Engine.processBlock(data.getBytes(), 0, data.getBytes().length);
            return new String(Base64.encode(arrayOfByte2));
        }
        catch (InvalidCipherTextException e)
        {

            e.printStackTrace();
            return null;
        }
</code></pre>

<p>But it is not enveloped,I do not know how to add an envelop on it,but I know how to add envelop without sm2egine:</p>

<pre><code>public static String encryptMessage(String message, X509Certificate cert) throws Exception {

    CMSEnvelopedDataGenerator gen = new CMSEnvelopedDataGenerator();
    gen.addRecipientInfoGenerator(new JceKeyTransRecipientInfoGenerator(cert));

    OutputEncryptor encryptor = new JceCMSContentEncryptorBuilder(CMSAlgorithm.AES128_CBC).setProvider(BouncyCastleProvider.PROVIDER_NAME).build();
    CMSTypedData content = new CMSProcessableByteArray(message.getBytes(""UTF-8""));
    CMSEnvelopedData data = gen.generate(content, encryptor);
    String encryptedMessage = new String(Base64.encode(data.getEncoded()));

    return encryptedMessage;
}
</code></pre>

<p>but now I must use the special algorithm called sm4 as the symmetric algorithm to encrypt the content first,not aes.And then use sm2 to encypt the key of sm4,all as it defined in <a href=""https://tools.ietf.org/html/rfc2315"" rel=""nofollow noreferrer"">pkcs7</a>.so how to join these two code fragment?
All special algorithms seem can be implemented by BouncyCastle method,but there is no sm4 in CMSAlgorithm class,but I found a GMObjectIndenrifier.sms4_cbc,and pass it as a parameter,but got a exception:</p>

<pre><code>no such algorithm.
</code></pre>

<p>More info:after I parse the certificate from a file, and call certificate.getSigAlgName(),its name is SM3WITHSM2</p>
","","47","<java><bouncycastle><jce><jca>","0","","0","2018-05-20 04:04:44","","2","","9136759","","2018-05-20 04:04:44","2018-05-17 02:35:31",""
"58084762","Construct x509 encoded public key from algorithm oid and byte[] value of key","<p>I have algorithm oid and byte array with public key value. I need to encode it as asn1 defined in the X.509 standard:</p>

<pre><code> SubjectPublicKeyInfo ::= SEQUENCE {
   algorithm AlgorithmIdentifier,
   subjectPublicKey BIT STRING }
</code></pre>

<p>How can I do this, except of manually constructing asn1 structure?</p>

<p>For example I have oid <code>1.2.643.7.1.1.1.1</code>, 
public point value <code>7800A33627EF627D19C0A8E1C284067031851A9860A92E0B405B0561643FF1B6056A31FD01AD1D5E74213175D2F3808509C759418FD08554C20C88B109072207</code> and 
I want to represent it as</p>

<pre><code>SEQUENCE {  
  OBJECT IDENTIFIER '1 2 643 7 1 1 1 1'   
  BIT STRING, encapsulates {
    OCTET STRING
   78 00 A3 36 27 EF 62 7D 19 C0 A8 E1 C2 84 06 70
   31 85 1A 98 60 A9 2E 0B 40 5B 05 61 64 3F F1 B6
   05 6A 31 FD 01 AD 1D 5E 74 21 31 75 D2 F3 80 85
   09 C7 59 41 8F D0 85 54 C2 0C 88 B1 09 07 22 07
  }
}
</code></pre>

<p>upd: Thanks to Wilx's answer! Final code for GOST 34.10-2012 with 256 bit key</p>

<pre><code>    byte[] publicPoint = Hex.decode(""7800A33627EF627D19C0A8E1C284067031851A9860A92E0B405B0561643FF1B6056A31FD01AD1D5E74213175D2F3808509C759418FD08554C20C88B109072207"");

    GOST3410PublicKeyAlgParameters parameters = new GOST3410PublicKeyAlgParameters(
            RosstandartObjectIdentifiers.id_tc26_gost_3410_12_256_paramSetA,
            RosstandartObjectIdentifiers.id_tc26_gost_3411_12_256);

    SubjectPublicKeyInfo spki = new SubjectPublicKeyInfo(
            new AlgorithmIdentifier(RosstandartObjectIdentifiers.id_tc26_gost_3410_12_256, parameters),
            new DEROctetString(publicPoint));

    byte[] encoded = spki.getEncoded();
</code></pre>
","<p>It all depends on what the OID identifies, IMHO. I am not entirely sure by the following. I had to look up the OID manually.</p>

<pre><code>    byte[] data = Hex.decode(""7800A33627EF627D19C0A8E1C284067031851A9860A92E0B405B0561643FF1B6056A31FD01AD1D5E74213175D2F3808509C759418FD08554C20C88B109072207"");
    SubjectPublicKeyInfo spki = new SubjectPublicKeyInfo(
        new AlgorithmIdentifier(RosstandartObjectIdentifiers.id_tc26_gost_3410_12_256),
        new DEROctetString(data));
    ASN1Primitive asn1 = spki.toASN1Primitive();
</code></pre>

<p>I tried to use <code>org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey#BCECGOST3410_2012PublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)</code> but for some unknown to me reason it is not public but only package-private constructor.</p>
","40","<java><bouncycastle><jce>","1","1","1","2019-09-25 10:18:31","58085559","0","","4178124","","2019-09-25 10:18:31","2019-09-24 16:39:14",""
"44126303","configuring uploading images in jce editor in joomla","<p>how to make so that in joomla jce editor image uploading users shoud not see all images in gallery and save uploaded image in folder named like YEAR/DAY/ so that image files could be organized?</p>
","<p>Add the <a href=""https://www.joomlacontenteditor.net/support/documentation/100-profiles/319-profiles-plugin-parameters"" rel=""nofollow noreferrer"">$id</a> or similar that is unique to the user to the upload folder/path in the settings.</p>
","38","<image><joomla><jce>","0","0","1","2017-06-07 11:04:27","","0","","","","","2017-05-23 05:15:14",""
"30497256","AIX jre is not throwing any exception","<p>Recently i have came across a requirement to encrypt db password which is used to create connection for stand alone scheduler using <code>symmetric key algorithm</code>. </p>

<p>First db password is encrypted using a <code>java swing utility</code> in which i use <code>aes128</code> bit encryption and put into the properties file.
 Then in the <code>connection manager</code> class, in which connection is created,password is read from properties file and decrypted with same key. At my end i have tested on aix server in which this code is working but at the client side it is not working. It couldn't decrypt. After following statement in connection manager class, it is exiting from method without any exception. </p>

<pre><code>pwd=AES128Encryption.decrypt(PAYTFHomeProperties.getProperty(""PWD"").toString().trim());
</code></pre>

<p>I'm assuming this is something to do with <code>jce.jar</code>. Here is my method for decryption and connection manager class where i decrypt the password. </p>

<pre><code>protected  Connection getConnection(){

             try{

                 mcName=PAYTFHomeProperties.getProperty(""MACHINE_NAME"");
                 sid=PAYTFHomeProperties.getProperty(""SID"");
                 port=PAYTFHomeProperties.getProperty(""DB_PORT"");
                 UserName=PAYTFHomeProperties.getProperty(""USER_NAME"");
                 pwd=AES128Encryption.decrypt(PAYTFHomeProperties.getProperty(""PWD"").toString().trim());
debug(""getEncrptdData||encrypted pwd::""+PAYTFHomeProperties.getProperty(""PWD""));
                System.out.println(""decrypted pwd::""+pwd);
                 tns=PAYTFHomeProperties.getProperty(""TNS"");
                 hostString=""jdbc:oracle:thin:@""+mcName+"":""+port+"":""+sid;
                  OracleConnectionPoolDataSourcecpds=new                 OracleConnectionPoolDataSource();
                          cpds.setDriverType(""thin"");
                      cpds.setNetworkProtocol(""tcp"");
                      cpds.setServerName(mcName);
                      cpds.setDatabaseName(sid);
                      cpds.setPortNumber(Integer.parseInt(port));
                      cpds.setUser(UserName);
                      cpds.setPassword(pwd);


                      pc = (oracle.jdbc.pool.OraclePooledConnection)cpds.getPooledConnection();


                      connection con= (Connection)pc.getConnection();  

            } catch(Exception e){
            System.out.println(""getConnection""+e.toString()); 
             }
         return con;
        }
</code></pre>

<p>Here is my <code>AES128Encryption</code> class decrypt method</p>

<pre><code>import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.*;

public class AES128Encryption {

    private static final String ALGO = ""AES/ECB/PKCS5Padding"";
    public static String decrypt(String encryptedData) throws Exception {
        Cipher c = Cipher.getInstance(ALGO);
        byte[] raw = ""************"".getBytes();
        SecretKeySpec skeySpec = new SecretKeySpec(raw, ""AES"");
        c.init(Cipher.DECRYPT_MODE, skeySpec);
        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);
        byte[] decValue = c.doFinal(decordedValue);
        String decryptedValue = new String(decValue);
        return decryptedValue;
    }
   }
</code></pre>
","<p>It is not an answer but try to catch Throwable:</p>

<pre><code>try {
  // do something
} catch (Throwable t) {
  t.printStackTrace();
}
</code></pre>

<p>And aslo check if you have in your classes / methods Exceptions without body like:</p>

<pre><code>try {
   // do something
} catch (Exception e) {
   // do nothing 
}
</code></pre>
","34","<java><aes><encryption-symmetric><jce>","0","0","1","2015-05-31 05:28:11","","2","2","3060123","","2015-05-28 04:37:43","2015-05-28 04:26:41",""
"57307393","How to get al alias from hsm by SUNPKCS provider?","<p>I want to get my all key aliases from hsm, but i get this error message : </p>

<pre><code>Exception in thread ""main"" java.io.IOException: load failed
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:778)
    at java.security.KeyStore.load(KeyStore.java:1445)
    at eracom.provider.ProCrypt.main(ProCrypt.java:99)
    Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: 
    CKR_OBJECT_HANDLE_INVALID
    at sun.security.pkcs11.wrapper.PKCS11.C_GetAttributeValue(Native Method)
    at sun.security.pkcs11.P11KeyStore.mapLabels(P11KeyStore.java:2415)
    at sun.security.pkcs11.P11KeyStore.engineLoad(P11KeyStore.java:770)
</code></pre>

<p>If i create just one secret key on hsm. there is no problem, i can get 
    the alia from hsm, but if i have 2 or more, i get the error. 
    How to solve it?</p>

<pre><code>        KeyStore keyStore = KeyStore.getInstance(""PKCS11"", pkcs11);
        keyStore.load(null, slotPIN);

        SecretKey key = (SecretKey) keyStore.getKey(""KEY2"", slotPIN);
        System.out.println(""key's attributes: "" + key.toString());


        java.util.Enumeration&lt;String&gt; aliases = keyStore.aliases();
        String alias = null;
        while (aliases.hasMoreElements()) {
            alias = aliases.nextElement();
            System.out.println(""key label name : "" + alias);

        }
</code></pre>
","","34","<pkcs#11><jce><hsm><jca><sunpkcs11>","0","","0","2019-08-01 10:52:54","","3","","","","","2019-08-01 10:52:54",""
"43966508","Why are the first N characters improperly decrypted using JCE?","<p>When I decrypt a message there is a constant number of characters that are not decrypted properly.  For example:</p>

<p>Before Decryption:{""header"":{""messageId"":""ca18d015-9861-47b8-9e09-81fb561522e5""</p>

<p>After Decryption: M��s����g�{�T\ageId"":""ca18d015-9861-47b8-9e09-81fb561522e5""</p>

<p>I am initializing JCE with the following code:</p>

<pre><code>SecretKeyFactory factory = SecretKeyFactory
        .getInstance(KEY_DERIVATION_ALGORITHM);
    SecretKey tmp = factory.generateSecret(new PBEKeySpec(new String(dataKey).toCharArray(), SALT,
                                                          PBKDF_DEFAULT_ITERATIONS, 128));

    Key aesKey = new SecretKeySpec(tmp.getEncoded(), KEY_TYPE);
    Cipher cipher = Cipher.getInstance(CIPHER);
    cipher.init(Cipher.ENCRYPT_MODE, aesKey, new IvParameterSpec(initializationVector));
    byte[] encrypted = cipher.doFinal(payload.getBytes());
</code></pre>
","<p>Initialization Vector was different when encrypting/decrypting.</p>
","33","<java><encryption><jce>","0","0","1","2017-05-15 19:45:56","43987627","3","3","","","","2017-05-14 16:50:12",""
"49433552","Exit JVM if Unlimited Encryption Not Installed","<p>Does anyone know of a clean/elegant way to exit JVM if unlimited encryption is <strong>NOT</strong> installed?  Looking to install a some type of assertion that will exit with clean error when <code>java</code> is executed without required jars installed in <code>&lt;JAVA_HOME&gt;/jre/lib/security</code>  </p>

<p>It would be tedious to bake this check in the many Java applications that we deploy.</p>

<p>This question does a good job explaining how to test if unlimited encryption is installed:
<a href=""https://stackoverflow.com/questions/7953567/checking-if-unlimited-cryptography-is-available"">Checking if Unlimited Cryptography is available</a></p>
","","32","<java><assertion><jce>","1","","0","2018-03-22 16:25:59","","3","","","","","2018-03-22 16:16:37",""
"54596258","JCE is included but javax.crypto is still not available","<p>I have an ant build configuration and the bootclasspath is configured correctly to include the jce. However, during the compilation I still get  <code>javax.crypto does not exist</code> error. Does anybody has any idea? I checked that the jce.jar is in its place at <code>${JAVA_HOME}\lib\jce.jar</code> I also did an echo during the compilation and can see in fact the path is correctly found.</p>

<p>This is how the compile step looks</p>

<pre><code>&lt;target name=""compile"" 
        description=""Compile all the classes into a jar file""&gt;

    &lt;delete file=""${temp}/libs-compiled/${corejar-name}"" /&gt;
    &lt;delete dir=""${temp}/libs-compiled"" /&gt;
    &lt;mkdir dir=""${temp}/libs-compiled"" /&gt;
    &lt;delete dir=""${temp}/build/classes"" /&gt;
    &lt;mkdir dir=""${temp}/build/classes"" /&gt;

    &lt;property name=""java.boot.classpath"" 
              value=""${JAVA_HOME}\jre\lib\rt.jar:${JAVA_HOME}\jre\lib\jce.jar"" /&gt;

    &lt;echo message=""bootclasspath ${java.boot.classpath}""/&gt;

    &lt;javac  destdir=""${temp}/build/classes"" 
            debug=""${DEBUG}"" 
            failonerror=""true""
            srcdir=""${root}/src;${utils}/src;${temp}/src"" 
            includeAntRuntime=""false"" 
            compiler=""javac1.7"" 
            fork=""true"" 
            verbose=""false"" 
            bootclasspath=""${java.boot.classpath}""&gt;

        &lt;classpath refid=""manager.classpath"" /&gt;

    &lt;/javac&gt;

    &lt;jar basedir=""${temp}/build/classes""
            includes=""**/*.class""
            excludes=""**/HwKey.class""
            destfile=""${temp}/libs-compiled/${corejar-name}"" /&gt;
&lt;/target&gt;
</code></pre>
","","31","<java><ant><compiler-errors><jce>","0","","0","2019-02-11 15:33:38","","0","","902172","","2019-02-11 15:33:38","2019-02-08 16:08:03",""
"55494481","Basic use case of a key tool","<p><strong>Basic use of a key tool to generate a keypair, CSR, and sign with root ca and import certificate reply</strong></p>
","<pre><code>#""Generate key pair""
 keytool -genkeypair -alias mykey -keyalg RSA -keysize 2048 -sigalg SHA256withRSA -keystore mykeystore.jks  -keypass jks123 -storepass jks123 -storetype JKS

#""Generate cert request(CSR)""
keytool -certreq -alias mykey -file my.csr -storetype JKS -keystore mykeystore.jks -keypass jks123 -storepass jks123

#""Create root ca key and ca cert using openssl""
openssl req -x509 -newkey rsa:2048 -sha256 -nodes -out cacert.crt -outform PEM -keyout cakey.pem

#""Import ca cert to keystore as trust CRT""
keytool -importcert -alias root-ca -file cacert.crt -keystore mykeystore.jks -storepass jks123 -storetype JKS

#""Sign the CSR using self signed root CA created in step 3""
openssl x509 -req -days 365 -in my.csr -CA cacert.crt -CAkey cakey.pem -set_serial 300661 -out my.crt

#Import the signed certifcate to key store""
keytool -v -importcert -alias mykey -file my.crt -trustcacerts -storetype JKS -keystore mykeystore.jks -keypass jks123 -storepass jks123
 #list key store 
 keytool -v -list -storetype JKS -keystore mykeystore.jks -keypass jks123 -storepass jks123
</code></pre>
","28","<keytool><jce>","-3","0","1","2019-04-03 13:43:40","","1","","6165836","","2019-04-03 13:43:40","2019-04-03 11:51:15",""
"50588033","FIPS encryption policy API","<p>How can I find out if unlimited strength policy is being enabled or not in java. 
Are there any API's that are provided by java which can tell the same. </p>

<p>As of now unlimited strength is enabled replacing the policy jars in the jre.
Is there a way to detect this via an API call ?</p>
","","21","<java><encryption><jce><fips>","0","","0","2018-05-29 16:23:25","","2","","606025","","2018-05-29 16:23:25","2018-05-29 15:29:21","2018-05-29 16:36:28"
"43972215","change iText to use other JCE provider","<p>As I know, iText uses Bouncycastle as JCE provider.  I want to use other JCE provider to encrypt pdf.  I plan to configure the Java security properties file to use other JCE provider.  But I am not sure if it is the correct way.   I checked the source code of iText which uses Bouncycastle.  Is it necessary to change the source code of iText to use other JCE provider?</p>
","","21","<itext><jce>","0","","0","2017-05-15 05:40:58","","2","","","","","2017-05-15 05:40:58",""
"57968612","joomla JCE 2.5 missing toolbar","<p>I am using JCE 2.5 with Joomla 3.9.8 Stable. I have 2 user groups one is super user and other is frontend user. <strong>The editor is loading fine for super users but for front end users the toolbar of editor is missing</strong>. It was working well and suddenly disappeared, not sure what is the reason.</p>

<p>I have checked all the settings of editor and user group everything is fine, editor is enable and set as default, also tried adding JCE editor under basic settings of user but nothing helps.</p>

<p>this is how it loads
<a href=""https://i.stack.imgur.com/Zma1R.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Zma1R.png"" alt=""enter image description here""></a></p>

<p>when clicked on toggle editor it just hides the grey section meant to load toolbar below is the image
<a href=""https://i.stack.imgur.com/yCylJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yCylJ.png"" alt=""enter image description here""></a></p>

<p>Any help is appreciated.</p>
","","20","<joomla><toolbar><jce>","0","","0","2019-09-17 06:37:06","","5","","","","","2019-09-17 06:37:06",""
"56704395","java.security.InvalidKeyException: Invalid key seen after ubuntu update","<p>I have a java application using RSA-BSAFE JCE providers. On 6-20, I ran an software update and a bunch of libs, kernels were updated. (full list pasted below). After that, when my java application tries to connect to postgres9.5, it fails with </p>

<pre><code>        at com.rsa.cryptoj.o.ma.a(Unknown Source)
        at com.rsa.cryptoj.o.ma.engineInit(Unknown Source)
        at java.base/javax.crypto.Mac.init(Mac.java:433)
        at java.base/sun.security.ssl.HKDF.extract(HKDF.java:91)
        at java.base/sun.security.ssl.HKDF.extract(HKDF.java:119)
        at java.base/sun.security.ssl.ECDHKeyExchange$ECDHEKAKeyDerivation.t13DeriveKey(ECDHKeyExchange.java:470)
        ... 28 more
</code></pre>

<p><code>psql</code> client and PGAdmin works, so there DB is indeed running. Further up, the stack trace includes </p>

<pre><code> Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -&gt; 5, acquireRetryAttempts -&gt; 30, acquireRetryDelay -&gt; 1000, autoCommitOnClose -&gt; false, automaticTestTable -&gt; null, breakAfterAcquireFailure -&gt; false, checkoutTimeout -&gt; 0, connectionCustomizerClassName -&gt; com.redsealsys.srm.server.dao.jdbc.RSConnectionCustomizer, connectionTesterClassName -&gt; com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -&gt; caller, dataSourceName -&gt; 1hgeb9ga3xwfc3b16gwnfg|4da9f723, debugUnreturnedConnectionStackTraces -&gt; false, description -&gt; null, driverClass -&gt; org.postgresql.Driver, extensions -&gt; {}, factoryClassLocation -&gt; null, forceIgnoreUnresolvedTransactions -&gt; false, forceSynchronousCheckins -&gt; false, forceUseNamedDriverClass -&gt; false, identityToken -&gt; 1hgeb9ga3xwfc3b16gwnfg|4da9f723, idleConnectionTestPeriod -&gt; 300, initialPoolSize -&gt; 10, jdbcUrl -&gt; jdbc:postgresql://127.0.0.1/redseal, maxAdministrativeTaskTime -&gt; 60, maxConnectionAge -&gt; 0, maxIdleTime -&gt; 0, maxIdleTimeExcessConnections -&gt; 120, maxPoolSize -&gt; 50, maxStatements -&gt; 0, maxStatementsPerConnection -&gt; 0, minPoolSize -&gt; 10, numHelperThreads -&gt; 3, preferredTestQuery -&gt; null, privilegeSpawnedThreads -&gt; false, properties -&gt; {password=******, user=******}, propertyCycle -&gt; 0, statementCacheNumDeferredCloseThreads -&gt; 1, testConnectionOnCheckin -&gt; false, testConnectionOnCheckout -&gt; false, unreturnedConnectionTimeout -&gt; 0, userOverrides -&gt; {}, usesTraditionalReflectiveProxies -&gt; false ]
18:46:47.514 [WARN ] [.cfg.SettingsFactory.buildSettings      | main]  - Could not obtain connection metadata
java.sql.SQLException: Connections could not be acquired from the underlying database!
        at com.mchange.v2.sql.SqlUtils.toSQLException(SqlUtils.java:118)
        at com.mchange.v2.c3p0.impl.C3P0PooledConnectionPool.checkoutPooledConnection(C3P0PooledConnectionPool.java:692)
        at com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSource.getConnection(AbstractPoolBackedDataSource.java:140)
        at org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler.getTargetConnection(LazyConnectionDataSourceProxy.java:400)
        at org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy$LazyConnectionInvocationHandler.invoke(LazyConnectionDataSourceProxy.java:375)
        at com.sun.proxy.$Proxy56.getMetaData(Unknown Source)
        at org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:113)
        at org.hibernate.cfg.Configuration.buildSettings(Configuration.java:2101)
        at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1325)
        at org.hibernate.cfg.AnnotationConfiguration.buildSessionFactory(AnnotationConfiguration.java:915)
        at org.springframework.orm.hibernate3.LocalSessionFactoryBean.newSessionFactory(LocalSessionFactoryBean.java:863)
        at org.springframework.orm.hibernate3.LocalSessionFactoryBean.buildSessionFactory(LocalSessionFactoryBean.java:782)
        at org.springframework.orm.hibernate3.AbstractSessionFactoryBean.afterPropertiesSet(AbstractSessionFactoryBean.java:188)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1573)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1511)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:195)
</code></pre>

<p>List of packages updated</p>

<pre><code>Start-Date: 2019-06-20  08:54:34
Commandline: /usr/bin/unattended-upgrade
Upgrade: firefox:amd64 (67.0.2+build2-0ubuntu0.18.04.1, 67.0.3+build1-0ubuntu0.18.04.1)
End-Date: 2019-06-20  08:54:41

Start-Date: 2019-06-20  08:54:43
Commandline: /usr/bin/unattended-upgrade
Upgrade: firefox-locale-en:amd64 (67.0.2+build2-0ubuntu0.18.04.1, 67.0.3+build1-0ubuntu0.18.04.1)
End-Date: 2019-06-20  08:54:44

Start-Date: 2019-06-20  08:54:46
Commandline: /usr/bin/unattended-upgrade
Upgrade: libsqlite3-0:amd64 (3.22.0-1, 3.22.0-1ubuntu0.1)
End-Date: 2019-06-20  08:54:46

Start-Date: 2019-06-20  08:54:49
Commandline: /usr/bin/unattended-upgrade
Upgrade: linux-libc-dev:amd64 (4.15.0-51.55, 4.15.0-52.56)
End-Date: 2019-06-20  08:54:49

Start-Date: 2019-06-20  08:54:51
Commandline: /usr/bin/unattended-upgrade
Install: linux-modules-4.15.0-52-generic:amd64 (4.15.0-52.56, automatic), linux-headers-4.15.0-52-generic:amd64 (4.15.0-52.56, automatic), linux-headers-4.15.0-52:amd64 (4.15.0-52.56, automatic), linux-image-4.15.0-52-generic:amd64 (4.15.0-52.56, automatic), linux-modules-extra-4.15.0-52-generic:amd64 (4.15.0-52.56, automatic)
Upgrade: linux-headers-generic:amd64 (4.15.0.51.53, 4.15.0.52.54), linux-image-generic:amd64 (4.15.0.51.53, 4.15.0.52.54), linux-generic:amd64 (4.15.0.51.53, 4.15.0.52.54)
End-Date: 2019-06-20  08:55:11

Start-Date: 2019-06-20  09:01:51
Commandline: aptdaemon role='role-commit-packages' sender=':1.96'
Upgrade: open-vm-tools-desktop:amd64 (2:10.3.5-7~ubuntu0.18.04.1, 2:10.3.10-1~ubuntu0.18.04.1), python2.7-dev:amd64 (2.7.15~rc1-1ubuntu0.1, 2.7.15-4ubuntu4~18.04), libpython3.6-minimal:amd64 (3.6.7-1~18.04, 3.6.8-1~18.04.1), libcups2:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), libnet-ssleay-perl:amd64 (1.84-1build1, 1.84-1ubuntu0.1), libapt-inst2.0:amd64 (1.6.10, 1.6.11), libegl1:amd64 (1.0.0-2ubuntu2.2, 1.0.0-2ubuntu2.3), openssl:amd64 (1.1.0g-2ubuntu4.3, 1.1.1-1ubuntu2.1~18.04.2), ruby2.5:amd64 (2.5.1-1ubuntu1.2, 2.5.1-1ubuntu1.4), update-notifier-common:amd64 (3.192.1.5, 3.192.1.7), libsystemd0:amd64 (237-3ubuntu10.21, 237-3ubuntu10.22), apt:amd64 (1.6.10, 1.6.11), libgl1:amd64 (1.0.0-2ubuntu2.2, 1.0.0-2ubuntu2.3), python2.7-minimal:amd64 (2.7.15~rc1-1ubuntu0.1, 2.7.15-4ubuntu4~18.04), libpython3.6-stdlib:amd64 (3.6.7-1~18.04, 3.6.8-1~18.04.1), libpython2.7:amd64 (2.7.15~rc1-1ubuntu0.1, 2.7.15-4ubuntu4~18.04), google-chrome-stable:amd64 (75.0.3770.80-1, 75.0.3770.100-1), python2.7:amd64 (2.7.15~rc1-1ubuntu0.1, 2.7.15-4ubuntu4~18.04), libpython3.6:amd64 (3.6.7-1~18.04, 3.6.8-1~18.04.1), python3.6:amd64 (3.6.7-1~18.04, 3.6.8-1~18.04.1), open-vm-tools:amd64 (2:10.3.5-7~ubuntu0.18.04.1, 2:10.3.10-1~ubuntu0.18.04.1), libpython2.7-dev:amd64 (2.7.15~rc1-1ubuntu0.1, 2.7.15-4ubuntu4~18.04), udev:amd64 (237-3ubuntu10.21, 237-3ubuntu10.22), cups-server-common:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), libwww-perl:amd64 (6.31-1, 6.31-1ubuntu0.1), cups-common:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), ruby2.5-dev:amd64 (2.5.1-1ubuntu1.2, 2.5.1-1ubuntu1.4), libapt-pkg5.0:amd64 (1.6.10, 1.6.11), ruby2.5-doc:amd64 (2.5.1-1ubuntu1.2, 2.5.1-1ubuntu1.4), libudev1:amd64 (237-3ubuntu10.21, 237-3ubuntu10.22), libio-socket-ssl-perl:amd64 (2.056-1, 2.060-3~ubuntu18.04.1), python3.6-minimal:amd64 (3.6.7-1~18.04, 3.6.8-1~18.04.1), python-cryptography:amd64 (2.1.4-1ubuntu1.2, 2.1.4-1ubuntu1.3), python3-cryptography:amd64 (2.1.4-1ubuntu1.2, 2.1.4-1ubuntu1.3), cups-ppdc:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), libcupsmime1:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), libruby2.5:amd64 (2.5.1-1ubuntu1.2, 2.5.1-1ubuntu1.4), thunderbird-locale-en-us:amd64 (1:60.7.0+build1-0ubuntu0.18.04.1, 1:60.7.1+build1-0ubuntu0.18.04.1), systemd-sysv:amd64 (237-3ubuntu10.21, 237-3ubuntu10.22), libpam-systemd:amd64 (237-3ubuntu10.21, 237-3ubuntu10.22), libglx0:amd64 (1.0.0-2ubuntu2.2, 1.0.0-2ubuntu2.3), systemd:amd64 (237-3ubuntu10.21, 237-3ubuntu10.22), apt-utils:amd64 (1.6.10, 1.6.11), libnss-systemd:amd64 (237-3ubuntu10.21, 237-3ubuntu10.22), thunderbird:amd64 (1:60.7.0+build1-0ubuntu0.18.04.1, 1:60.7.1+build1-0ubuntu0.18.04.1), libcupsppdc1:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), libpython2.7-minimal:amd64 (2.7.15~rc1-1ubuntu0.1, 2.7.15-4ubuntu4~18.04), cups-bsd:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), cups-core-drivers:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), cups-daemon:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), libssl1.1:amd64 (1.1.0g-2ubuntu4.3, 1.1.1-1ubuntu2.1~18.04.2), libcupsimage2:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), libpython2.7-stdlib:amd64 (2.7.15~rc1-1ubuntu0.1, 2.7.15-4ubuntu4~18.04), python3-gdbm:amd64 (3.6.7-1~18.04, 3.6.8-1~18.04), cups:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), libcupscgi1:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), cups-client:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), cups-ipp-utils:amd64 (2.2.7-1ubuntu2.5, 2.2.7-1ubuntu2.6), thunderbird-locale-en:amd64 (1:60.7.0+build1-0ubuntu0.18.04.1, 1:60.7.1+build1-0ubuntu0.18.04.1), update-notifier:amd64 (3.192.1.5, 3.192.1.7), python-pip-whl:amd64 (9.0.1-2.3~ubuntu1, 9.0.1-2.3~ubuntu1.18.04.1), python-pip:amd64 (9.0.1-2.3~ubuntu1, 9.0.1-2.3~ubuntu1.18.04.1), libglvnd0:amd64 (1.0.0-2ubuntu2.2, 1.0.0-2ubuntu2.3)
Remove: linux-image-4.15.0-50-generic:amd64 (4.15.0-50.54), linux-headers-4.15.0-50:amd64 (4.15.0-50.54), linux-modules-extra-4.15.0-50-generic:amd64 (4.15.0-50.54), linux-modules-4.15.0-50-generic:amd64 (4.15.0-50.54), linux-headers-4.15.0-50-generic:amd64 (4.15.0-50.54)
End-Date: 2019-06-20  09:19:23

Start-Date: 2019-06-20  11:19:37
Commandline: packagekit role='remove-packages'
Requested-By: pk (1000)
Remove: pidgin:amd64 (1:2.12.0-1ubuntu4), pidgin-libnotify:amd64 (0.14-9ubuntu2)
End-Date: 2019-06-20  11:19:38

Start-Date: 2019-06-20  11:19:55
Commandline: packagekit role='remove-packages'
Requested-By: pk (1000)
Remove: sgt-launcher:amd64 (0.2.4-0ubuntu1)
End-Date: 2019-06-20  11:19:57

Start-Date: 2019-06-20  11:20:03
Commandline: packagekit role='remove-packages'
Requested-By: pk (1000)
Remove: simple-scan:amd64 (3.28.0-0ubuntu1)
End-Date: 2019-06-20  11:20:04
</code></pre>
","","20","<java><hibernate><openssl><rsa><jce>","0","","0","2019-06-25 18:09:02","","0","","2086914","","2019-06-25 18:09:02","2019-06-21 13:25:39",""
"56793733","How to sign Bitcoin transactions using JCE?","<p>I need to sign Bitcoin transactions using JCE primitives(no bitcoinj), but my signatures are not considered valid by bitcoinj.</p>

<p>I tried to simulate this process. I created a random hash and signed it using both JCE and bitcoinj. Signatures are not equal.</p>

<p>Here is the code</p>

<pre><code>import org.bitcoinj.core.ECKey;
import org.bitcoinj.core.Sha256Hash;
import org.spongycastle.crypto.digests.SHA256Digest;
import org.spongycastle.crypto.params.ECPrivateKeyParameters;
import org.spongycastle.crypto.signers.ECDSASigner;
import org.spongycastle.crypto.signers.HMacDSAKCalculator;
import sun.security.ec.ECPrivateKeyImpl;
import sun.security.ec.ECPublicKeyImpl;

import java.math.BigInteger;
import java.security.*;
import java.security.spec.ECGenParameterSpec;

public class ECDSABitcoin {

    private static final String SIGN_ALGORITHM = ""SHA256withECDSA"";

    public static void main(String[] args) throws Exception {

        KeyPairGenerator keyPairGenerator = createGenerator();
        final KeyPair keyPair = keyPairGenerator.generateKeyPair();
        ECPrivateKeyImpl privateKey = (ECPrivateKeyImpl) keyPair.getPrivate();
        ECPublicKeyImpl publicKey = (ECPublicKeyImpl) keyPair.getPublic();
        try {
            Sha256Hash hashOut = Sha256Hash.wrap(toSha256(""abc"".getBytes()));
            byte[] signatureBytes = sign(hashOut.getBytes(), keyPair);

            ECKey.ECDSASignature mySignature = ECKey.ECDSASignature.decodeFromDER(signatureBytes).toCanonicalised();
            ECKey.ECDSASignature bitcoinSignature = sign(privateKey.getS(), hashOut.getBytes()).toCanonicalised();
            System.out.println(""My signature s "" + mySignature.s + "" r "" + mySignature.r + "" canonical "" + mySignature.isCanonical());
            System.out.println(""Verify my "" + verify(keyPair, hashOut.getBytes(), signatureBytes));
            System.out.println(""Bitcoinj signature s "" + bitcoinSignature.s + "" r "" + bitcoinSignature.r + "" canonical "" + bitcoinSignature.isCanonical());
            System.out.println(""Verify Bitcoinj "" + verify(keyPair, hashOut.getBytes(), bitcoinSignature.encodeToDER()));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static boolean verify(KeyPair keyPair, byte[] message, byte[] signatureBytes) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
        final Signature verifySignature = Signature.getInstance(SIGN_ALGORITHM);
        verifySignature.initVerify(keyPair.getPublic());
        verifySignature.update(message);
        return verifySignature.verify(signatureBytes);
    }

    private static byte[] sign(byte[] message, KeyPair keyPair) throws InvalidKeyException, NoSuchAlgorithmException, SignatureException {
        final Signature signature = Signature.getInstance(SIGN_ALGORITHM);
        signature.initSign(keyPair.getPrivate());
        signature.update(message);
        return signature.sign();
    }

    private static KeyPairGenerator createGenerator() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {
        final KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""EC"");
        ECGenParameterSpec ecParam = new ECGenParameterSpec(""secp256k1"");
        keyPairGenerator.initialize(ecParam);
        return keyPairGenerator;
    }

    private static ECKey.ECDSASignature sign(BigInteger privateKeyForSigning, byte[] data) {
        ECDSASigner signer = new ECDSASigner(new HMacDSAKCalculator(new SHA256Digest()));
        ECPrivateKeyParameters privKey = new ECPrivateKeyParameters(privateKeyForSigning, ECKey.CURVE);
        signer.init(true, privKey);
        BigInteger[] components = signer.generateSignature(data);
        return new ECKey.ECDSASignature(components[0], components[1]).toCanonicalised();
    }

    private static byte[] toSha256(byte[] message) throws NoSuchAlgorithmException {
        MessageDigest crypt = MessageDigest.getInstance(""SHA-256"");
        crypt.reset();
        crypt.update(message);
        return crypt.digest();
    }
}
</code></pre>

<p>The result is:</p>

<pre><code>My signature s 45669553786690215047884329722902825758089042579493437816717142987836102849876 r 14778973653615637448416336446742229796258878351047437829727432860950944374049 canonical true
Verify my true
Bitcoinj signature s 24278043061766196831119988370534304503511938256487950554838614741011144316017 r 26413727078831382349368962255251267289169651926313668837949728205557969096319 canonical true
Verify Bitcoinj false
</code></pre>

<p>As you see, signatures are completely different, even though I use the same private key. What is wrong with my code? I just don't get it.</p>
","","19","<bitcoin><jce><ecdsa><spongycastle>","0","","0","2019-06-27 14:52:57","","0","","","","","2019-06-27 14:52:57",""
"54407921","Is there some way to have access to server port from SSLEngine for my custom provider?","<p>Im setting up my own jce provider and already have a working setup already by extending SPI/engine classes</p>

<p>I was using Http1Protocol and I was able to retrieve the alias (Im using the port as an ALIAS ) via keyManager.chooseServerAlias(keyType, principal[], socket) since it has socket param with it</p>

<p>But when I changed it to Http11NioProtocol, it now uses chooseEngineServerAlias to retrieve the alias and unfortunately keymanager doesnt have access to socket which Im using as a reference for retrieving the port/alias,</p>

<p>Please advise</p>

<p>I have checked ServerHandshaker.setupPrivateKeyAndChain and it has the following implementation on retrieving the engine</p>

<pre><code>    if(this.conn != null) {
            var3 = var2.chooseServerAlias(var1, (Principal[])null, this.conn);
        } else {
            var3 = var2.chooseEngineServerAlias(var1, (Principal[])null, this.engine);
        }
</code></pre>

<p>Based on my understanding, when using NIO protocols, it will use SSLEngine, but when using the IO protocol, it uses the SSLSocket. seems I will be using NioProtocol connector on my tomcat, I am now unable to have the reference for the port number.</p>
","","15","<java><tomcat><jce><jsse><sslengine>","0","","0","2019-01-28 18:10:03","","1","","","","","2019-01-28 18:10:03",""
"57503329","Does SSLSocket.startHandshake include certificate verification and hostname verification for SSLSocket?","<p>From the security guide <a href=""https://developer.android.com/training/articles/security-ssl.html#CommonHostnameProbs"" rel=""nofollow noreferrer"">https://developer.android.com/training/articles/security-ssl.html#CommonHostnameProbs</a>, when an SSLSocket is used seperated from the HttpsUrlConnection, hostname verification is required manually by invoking the hostnameverifier.verify() method:</p>

<pre><code>// Open SSLSocket directly to gmail.com
SocketFactory sf = SSLSocketFactory.getDefault();
SSLSocket socket = (SSLSocket) sf.createSocket(""gmail.com"", 443);
HostnameVerifier hv = HttpsURLConnection.getDefaultHostnameVerifier();
SSLSession s = socket.getSession();


// Verify that the certicate hostname is for mail.google.com
// This is due to lack of SNI support in the current SSLSocket.
if (!hv.verify(""mail.google.com"", s)) {
    throw new SSLHandshakeException(""Expected mail.google.com, ""
                                    ""found "" + s.getPeerPrincipal());
}

// At this point SSLSocket performed certificate verification and
// we have performed hostname verification, so it is safe to proceed.

// ... use socket ...
socket.close();
</code></pre>

<p>But I also see secure code examples says:</p>

<pre><code>/*
 * This example demostrates how to use a SSLSocket as client to
 * send a HTTP request and get response from an HTTPS server.
 * It assumes that the client is not behind a firewall
 */

public class SSLSocketClient {

    public static void main(String[] args) throws Exception {
        try {
            SSLSocketFactory factory =
                (SSLSocketFactory)SSLSocketFactory.getDefault();
            SSLSocket socket =
                (SSLSocket)factory.createSocket(""www.verisign.com"", 443);

            /*
             * send http request
             *
             * Before any application data is sent or received, the
             * SSL socket will do SSL handshaking first to set up
             * the security attributes.
             *
             * SSL handshaking can be initiated by either flushing data
             * down the pipe, or by starting the handshaking by hand.
             *
             * Handshaking is started manually in this example because
             * PrintWriter catches all IOExceptions (including
             * SSLExceptions), sets an internal error flag, and then
             * returns without rethrowing the exception.
             *
             * Unfortunately, this means any error messages are lost,
             * which caused lots of confusion for others using this
             * code.  The only way to tell there was an error is to call
             * PrintWriter.checkError().
             */
            socket.startHandshake();

            PrintWriter out = new PrintWriter(
                                  new BufferedWriter(
                                  new OutputStreamWriter(
                                  socket.getOutputStream())));

            out.println(""GET / HTTP/1.0"");
            out.println();
            out.flush();

            /*
             * Make sure there were no surprises
             */
            if (out.checkError())
                System.out.println(
                    ""SSLSocketClient:  java.io.PrintWriter error"");

            /* read response */
            BufferedReader in = new BufferedReader(
                                    new InputStreamReader(
                                    socket.getInputStream()));

            String inputLine;
            while ((inputLine = in.readLine()) != null)
                System.out.println(inputLine);

            in.close();
            out.close();
            socket.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>Whether it is secure? I didn't see any hostname verify method is called before the read/write behavior of this socket. Does the socket.startHandShake() includes it?</p>
","","11","<authentication><ssl><socket.io><jce><sslsocketfactory>","0","","0","2019-08-14 23:47:15","","9","","","","","2019-08-14 23:47:15",""