post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"19348501","PBKDF2WithHmacSHA512 Vs. PBKDF2WithHmacSHA1","<p>I'm working on a Java authentication subsystem that specs the storage of passwords in the DB as <code>PBKDF2</code>-generated hashes, and I'm now trying to decide whether I should use <code>SHA1</code> or <code>SHA512</code> as PFR. I went through the specs of both but they are very mathematically intensive for me to follow. Can somebody with better crypto-understanding explain how <code>PBKDF2WithHmacSHA512</code> differs from <code>PBKDF2WithHmacSHA1</code>?</p>

<p>Here's what I'm trying to do:</p>

<pre class=""lang-java prettyprint-override""><code>private static final int HASH_BYTE_SIZE = 64; // 512 bits
private static final int PBKDF2_ITERATIONS = 1000;      

// generate random salt
SecureRandom random = new SecureRandom();
byte salt[] = new byte[SALT_BYTE_SIZE]; // use salt size at least as long as hash
random.nextBytes(salt);

// generate Hash
PBEKeySpec spec = new PBEKeySpec(password, salt, PBKDF2_ITERATIONS, HASH_BYTE_SIZE);
SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1""); // we would like this to be ""PBKDF2WithHmacSHA512"" instead? What Provider implements it?
byte[] hash = skf.generateSecret(spec).getEncoded();

// convert hash and salt to hex and store in DB as CHAR(64)...
</code></pre>
","<p>SHA512 belongs to the SHA2 family of cryptographic hash functions. Since SHA1 has theoretical weaknesses and SHA512 is slightly slower than SHA1 (slower is better when hashing passwords), SHA512 (or any of the SHA2 family) should be chosen over SHA1 for the purpose of hashing passwords.</p>

<p>Actually understanding the differences in the functions is not going to be simple, but you might have a better chance of getting an answer on the <a href=""https://crypto.stackexchange.com/"">Crypto SE site</a>.</p>
","27577","<java><pbkdf2><secret-key><javax.crypto>","23","1","2","2017-09-21 13:21:32","19349227","0","12","","","","2013-10-13 18:09:19",""
"19348501","PBKDF2WithHmacSHA512 Vs. PBKDF2WithHmacSHA1","<p>I'm working on a Java authentication subsystem that specs the storage of passwords in the DB as <code>PBKDF2</code>-generated hashes, and I'm now trying to decide whether I should use <code>SHA1</code> or <code>SHA512</code> as PFR. I went through the specs of both but they are very mathematically intensive for me to follow. Can somebody with better crypto-understanding explain how <code>PBKDF2WithHmacSHA512</code> differs from <code>PBKDF2WithHmacSHA1</code>?</p>

<p>Here's what I'm trying to do:</p>

<pre class=""lang-java prettyprint-override""><code>private static final int HASH_BYTE_SIZE = 64; // 512 bits
private static final int PBKDF2_ITERATIONS = 1000;      

// generate random salt
SecureRandom random = new SecureRandom();
byte salt[] = new byte[SALT_BYTE_SIZE]; // use salt size at least as long as hash
random.nextBytes(salt);

// generate Hash
PBEKeySpec spec = new PBEKeySpec(password, salt, PBKDF2_ITERATIONS, HASH_BYTE_SIZE);
SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1""); // we would like this to be ""PBKDF2WithHmacSHA512"" instead? What Provider implements it?
byte[] hash = skf.generateSecret(spec).getEncoded();

// convert hash and salt to hex and store in DB as CHAR(64)...
</code></pre>
","<p>Let us breakdown the word piece by piece:</p>

<pre><code>PBKDF2--WithHmac--SHA512
</code></pre>

<p>Let's go over it part by part</p>

<ul>
<li><p><strong><a href=""https://en.wikipedia.org/wiki/PBKDF2"" rel=""noreferrer"">PBKDF2</a></strong></p>

<p>Stands for Password-based-Key-Derivative-Function, a successor of PBKDF1 and is used to implement a pseudorandom function, such as a cryptographic hash, cipher, or HMAC to the input password or passphrase along with a salt value and repeats the process many times to produce a derived key, which can then be used as a cryptographic key in subsequent operations.</p></li>
<li><p><strong>HMAC</strong></p>

<p>Stands for Keyed-Hash Message Authentication Code (HMAC) is a specific construction for calculating a message authentication code (MAC) involving a cryptographic hash function in combination with a secret cryptographic key. Any cryptographic hash function,may be used in the calculation of an HMAC; the resulting MAC algorithm is termed HMAC-MD5 or HMAC-SHA1 accordingly.</p></li>
<li><p><strong>SHA512</strong></p>

<p>Well, you know about it.. :P</p></li>
</ul>

<p>Now, coming back to your question, the line of code:</p>

<pre><code>SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
</code></pre>

<p>specifies the keyFactory to use the algorithm <code>PDBKDF2WithHmacSHA1</code>. When you would do something like:</p>

<pre><code>SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA512"");
</code></pre>

<p>you tell the factory to use algorithm <code>PBDKF2WithHmacSHA512</code>.</p>

<p>Essentialy the main difference between <code>PBKDF2WithHmacSHA1</code> and <code>PBKDF2WithHmacSHA512</code> is that:</p>

<ol>
<li>The <code>PBKDF2WithHmacSHA1</code> will <strong>produce a hash length of 160 bits</strong>.</li>
<li>The <code>PBKDF2WithHmacSHA512</code> will <strong>produce a hash length of 512 bits</strong>.</li>
</ol>

<p>Hence the latter is more secure. But there are arguments on both sides as to which is sufficient for encryption. No debate. Just saying.</p>

<p>Some additional information about the two algorithms:</p>

<ol>
<li><p><strong>HMACSHA1</strong></p>

<blockquote>
  <p>HMACSHA1 is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message
  authentication code. The HMAC process mixes a secret key with the
  message data, hashes the result with the hash function, mixes that
  hash value with the secret key again, and then applies the hash
  function a second time. The output hash is 160 bits in length.</p>
</blockquote></li>
<li><p><strong>HMACSHA512</strong></p>

<blockquote>
  <p>HMACSHA512 is a type of keyed hash algorithm that is constructed from
  the SHA-512 hash function and used as a Hash-based Message
  Authentication Code (HMAC). The HMAC process mixes a secret key with
  the message data and hashes the result. The hash value is mixed with
  the secret key again, and then hashed a second time. The output hash
  is 512 bits in length.</p>
</blockquote></li>
</ol>

<p>The main advantage is that <code>HmacWith512</code> is more secure than <code>HmacWith256</code>. For e.g.</p>

<pre><code>HMAC_SHA1(""key"",""The quick brown fox jumps over the lazy dog"") = 0xde7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9

HMAC_SHA512(""key"",""The quick brown fox jumps over the lazy dog"") = 0xb42af09057bac1e2d41708e48a902e09b5ff7f12ab428a4fe86653c73dd248fb82f948a549f7b791a5b41915ee4d1ec3935357e4e2317250d0372afa2ebeeb3a
</code></pre>

<p>The difference is pretty huge (as seen). Hope it helps. :)</p>

<p><strong>EDIT:</strong> As OP mentions </p>

<pre><code>PBEKeySpec(char[] password, byte[] salt, int iterationCount, int keyLength)
</code></pre>

<p>The parameter <code>keyLength</code> is used to indicate the preference on key length
for variable-key-size ciphers. The actual key size depends on each provider's implementation. Hence say, doing something like</p>

<p><code>PBEKeySpec(password, salt, int 100, 512)</code> doesn't mean you will be using SHA1 to generate a keyLength of 512. It simply means that. SHA1 supports upto a maximum of 160 bits. You cannot exceed that. </p>

<p>As for your second question, have a look at the <a href=""https://crypto.stackexchange.com/questions/10034/hmac-sha1-input-size"">HMAC-SHA1</a>. There are many statements that say algorithms like <code>SHA256</code> is pretty good if you a long hash. </p>

<p>Also, as per the NSA :</p>

<blockquote>
  <p>The NSA specifies that ""Elliptic Curve Public Key Cryptography using
  the 256-bit prime modulus elliptic curve as specified in FIPS-186-2
  and SHA-256 are appropriate for protecting classified information up
  to the SECRET level. Use of the 384-bit prime modulus elliptic curve
  and SHA-384 are necessary for the protection of TOP SECRET
  information.</p>
</blockquote>

<p>I think using a HMAC function in conjunction SHA512 is quite secure. </p>
","27577","<java><pbkdf2><secret-key><javax.crypto>","23","51","2","2017-09-21 13:21:32","19349227","0","12","","","","2013-10-13 18:09:19",""
"8674018","PBKDF2 with bouncycastle in Java","<p>I'm trying to securely store a password in a database and for that I chose to store its hash generated using the PBKDF2 function. I want to do this using the bouncy castle library but I don't know why I cannot get it to work by using the JCE interface...
The problem is that generating the hash in 3 different modes: <br>
 1. using the PBKDF2WithHmacSHA1 secret key factory provided by sun <br>
 2. using the bouncy castle api directly <br>
 3. using the bouncy castle through JCE <br>
results in 2 distinct values: one common to the first two and one for the third.</p>

<p>Here is my code:</p>

<pre><code>    //Mode 1

    SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    KeySpec keyspec = new PBEKeySpec(""password"".toCharArray(), salt, 1000, 128);
    Key key = factory.generateSecret(keyspec);
    System.out.println(key.getClass().getName());
    System.out.println(Arrays.toString(key.getEncoded()));

    //Mode 2

    PBEParametersGenerator generator = new PKCS5S2ParametersGenerator();
    generator.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes((""password"").toCharArray()), salt, 1000);
    KeyParameter params = (KeyParameter)generator.generateDerivedParameters(128);
    System.out.println(Arrays.toString(params.getKey()));

    //Mode 3

    SecretKeyFactory factorybc = SecretKeyFactory.getInstance(""PBEWITHHMACSHA1"", ""BC"");
    KeySpec keyspecbc = new PBEKeySpec(""password"".toCharArray(), salt, 1000, 128);
    Key keybc = factorybc.generateSecret(keyspecbc);
    System.out.println(keybc.getClass().getName());
    System.out.println(Arrays.toString(keybc.getEncoded()));
    System.out.println(keybc.getAlgorithm());
</code></pre>

<p>I know that PBKDF2 is implemented using HMAC SHA1 so that is why i chose as algorithm in the last method the ""PBEWITHHMACSHA1"" which i took from the bouncy castle java docs.</p>

<p>The output is the following:</p>

<pre><code>com.sun.crypto.provider.SunJCE_ae
[-53, 29, 113, -110, -25, 76, 115, -127, -64, 74, -63, 102, 75, 81, -21, 74]
[-53, 29, 113, -110, -25, 76, 115, -127, -64, 74, -63, 102, 75, 81, -21, 74]
org.bouncycastle.jce.provider.JCEPBEKey
[14, -47, -87, -16, -117, -31, 91, -121, 90, -68, -82, -31, -27, 5, -93, -67, 30, -34, -64, -40]
PBEwithHmacSHA
</code></pre>

<p>Any ideas?</p>
","<p>In short, the reason for the difference is that PBKDF2 algorithm in modes #1 and #2 uses PKCS #5 v2 scheme 2 (PKCS5S2) for iterative key generation, but the BouncyCastle provider for ""PBEWITHHMACSHA1"" in mode #3 uses the PKCS #12 v1 (PKCS12) algorithm instead. These are completely different key-generation algorithms, so you get different results.</p>

<p>More detail on why this is so and why you get different sized results is explained below.</p>

<p>First, when you're constructing a JCE KeySpec, the keyLength parameter only expresses ""a preference"" to the provider what key size you want. From <a href=""http://docs.oracle.com/javase/1.4.2/docs/api/javax/crypto/spec/PBEKeySpec.html#getKeyLength%28%29"">the API docs</a>:</p>

<blockquote>
  <p>Note: this is used to indicate the preference on key length for variable-key-size ciphers. The actual key size depends on each provider's implementation.</p>
</blockquote>

<p>The Bouncy Castle providers don't appear to respect this parameter, judging from <a href=""http://grepcode.com/file/repo1.maven.org/maven2/bouncycastle/bcprov-jdk15/140/org/bouncycastle/jce/provider/JCEPBEKey.java#JCEPBEKey"">the source of JCEPBEKey</a>, so you should expect to get a 160-bit key back from any BC provider which uses SHA-1 when using the JCE API.</p>

<p>You can confirm this by programmatically accessing the <code>getKeySize()</code> method on the returned <code>keybc</code> variable in your test code:</p>

<pre><code>Key keybc = factorybc.generateSecret(keyspecbc);
// ...
Method getKeySize = JCEPBEKey.class.getDeclaredMethod(""getKeySize"");
getKeySize.setAccessible(true);
System.out.println(getKeySize.invoke(keybc)); // prints '160'
</code></pre>

<p>Now, to understand what the ""PBEWITHHMACSHA1"" provider corresponds to, you can find the following in <a href=""http://grepcode.com/file/repository.jboss.org/maven2/bouncycastle/bcprov-jdk15/140/org/bouncycastle/jce/provider/BouncyCastleProvider.java#482"">the source for BouncyCastleProvider</a>:</p>

<pre><code>put(""SecretKeyFactory.PBEWITHHMACSHA1"", 
    ""org.bouncycastle.jce.provider.JCESecretKeyFactory$PBEWithSHA"");
</code></pre>

<p>And the implementation of <a href=""http://grepcode.com/file/repo1.maven.org/maven2/bouncycastle/bcprov-jdk15/140/org/bouncycastle/jce/provider/JCESecretKeyFactory.java#495"">JCESecretKeyFactory.PBEWithSHA</a> looks like this:</p>

<pre><code>public static class PBEWithSHA
    extends PBEKeyFactory
{
    public PBEWithSHA()
    {
        super(""PBEwithHmacSHA"", null, false, PKCS12, SHA1, 160, 0);
    }
}
</code></pre>

<p>You can see above that this key factory uses the PKCS #12 v1 (<a href=""http://www.bouncycastle.org/docs/docs1.5on/org/bouncycastle/crypto/generators/PKCS12ParametersGenerator.html"">PKCS12</a>) algorithm for iterative key generation. But the PBKDF2 algorithm that you want to use for password hashing uses PKCS #5 v2 scheme 2 (<a href=""http://www.bouncycastle.org/docs/docs1.5on/org/bouncycastle/crypto/generators/PKCS5S2ParametersGenerator.html"">PKCS5S2</a>) instead. This is why you're getting different results.</p>

<p>I had a quick look through the JCE providers registered in <code>BouncyCastleProvider</code>, but couldn't see <em>any</em> key generation algorithms that used PKCS5S2 at all, let alone one which also uses it with HMAC-SHA-1.</p>

<p>So I guess you're stuck with either using the Sun implementation (mode #1 above) and losing portability on other JVMs, or using the Bouncy Castle classes directly (mode #2 above) and requiring the BC library at runtime.</p>

<p>Either way, you should probably switch to 160-bit keys, so you aren't truncating the generated SHA-1 hash unnecessarily.</p>
","20044","<java><bouncycastle><jce><pbkdf2>","38","30","3","2019-01-12 05:44:39","10569975","4","20","3636601","","2017-07-11 09:48:25","2011-12-29 22:02:30",""
"8674018","PBKDF2 with bouncycastle in Java","<p>I'm trying to securely store a password in a database and for that I chose to store its hash generated using the PBKDF2 function. I want to do this using the bouncy castle library but I don't know why I cannot get it to work by using the JCE interface...
The problem is that generating the hash in 3 different modes: <br>
 1. using the PBKDF2WithHmacSHA1 secret key factory provided by sun <br>
 2. using the bouncy castle api directly <br>
 3. using the bouncy castle through JCE <br>
results in 2 distinct values: one common to the first two and one for the third.</p>

<p>Here is my code:</p>

<pre><code>    //Mode 1

    SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    KeySpec keyspec = new PBEKeySpec(""password"".toCharArray(), salt, 1000, 128);
    Key key = factory.generateSecret(keyspec);
    System.out.println(key.getClass().getName());
    System.out.println(Arrays.toString(key.getEncoded()));

    //Mode 2

    PBEParametersGenerator generator = new PKCS5S2ParametersGenerator();
    generator.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes((""password"").toCharArray()), salt, 1000);
    KeyParameter params = (KeyParameter)generator.generateDerivedParameters(128);
    System.out.println(Arrays.toString(params.getKey()));

    //Mode 3

    SecretKeyFactory factorybc = SecretKeyFactory.getInstance(""PBEWITHHMACSHA1"", ""BC"");
    KeySpec keyspecbc = new PBEKeySpec(""password"".toCharArray(), salt, 1000, 128);
    Key keybc = factorybc.generateSecret(keyspecbc);
    System.out.println(keybc.getClass().getName());
    System.out.println(Arrays.toString(keybc.getEncoded()));
    System.out.println(keybc.getAlgorithm());
</code></pre>

<p>I know that PBKDF2 is implemented using HMAC SHA1 so that is why i chose as algorithm in the last method the ""PBEWITHHMACSHA1"" which i took from the bouncy castle java docs.</p>

<p>The output is the following:</p>

<pre><code>com.sun.crypto.provider.SunJCE_ae
[-53, 29, 113, -110, -25, 76, 115, -127, -64, 74, -63, 102, 75, 81, -21, 74]
[-53, 29, 113, -110, -25, 76, 115, -127, -64, 74, -63, 102, 75, 81, -21, 74]
org.bouncycastle.jce.provider.JCEPBEKey
[14, -47, -87, -16, -117, -31, 91, -121, 90, -68, -82, -31, -27, 5, -93, -67, 30, -34, -64, -40]
PBEwithHmacSHA
</code></pre>

<p>Any ideas?</p>
","<p>I found a BC Crypto-Only method (actually from the cms package of BC) which works to produce a UTF-8 based password encoding. This way I can generate KDF output which is compatible to</p>

<p><a href=""http://packages.python.org/passlib/lib/passlib.hash.cta_pbkdf2_sha1.html#passlib.hash.cta_pbkdf2_sha1"" rel=""nofollow"">http://packages.python.org/passlib/lib/passlib.hash.cta_pbkdf2_sha1.html#passlib.hash.cta_pbkdf2_sha1</a></p>

<pre><code>private byte[] calculatePasswordDigest(char[] pass, byte[] salt, int iterations)
    throws PasswordProtectionException
{
    try
    {
        /* JCE Version (does not work as BC uses PKCS12 encoding)
        SecretKeyFactory kf = SecretKeyFactory.getInstance(""PBEWITHHMACSHA1"",""BC"");
        PBEKeySpec ks = new PBEKeySpec(pass, salt, iterations,160);
        SecretKey digest = kf.generateSecret(ks);
        return digest.getEncoded();
        */
        PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator();
        gen.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes(pass), salt, iterations);
        byte[] derivedKey = ((KeyParameter)gen.generateDerivedParameters(160)).getKey();
        return derivedKey;
    }
    catch(Exception e)
    {
        LOG.error(""Failed to strengthen the password with PBKDF2."",e);
        throw new PasswordProtectionException();
    }
}
</code></pre>
","20044","<java><bouncycastle><jce><pbkdf2>","38","3","3","2019-01-12 05:44:39","10569975","4","20","3636601","","2017-07-11 09:48:25","2011-12-29 22:02:30",""
"8674018","PBKDF2 with bouncycastle in Java","<p>I'm trying to securely store a password in a database and for that I chose to store its hash generated using the PBKDF2 function. I want to do this using the bouncy castle library but I don't know why I cannot get it to work by using the JCE interface...
The problem is that generating the hash in 3 different modes: <br>
 1. using the PBKDF2WithHmacSHA1 secret key factory provided by sun <br>
 2. using the bouncy castle api directly <br>
 3. using the bouncy castle through JCE <br>
results in 2 distinct values: one common to the first two and one for the third.</p>

<p>Here is my code:</p>

<pre><code>    //Mode 1

    SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    KeySpec keyspec = new PBEKeySpec(""password"".toCharArray(), salt, 1000, 128);
    Key key = factory.generateSecret(keyspec);
    System.out.println(key.getClass().getName());
    System.out.println(Arrays.toString(key.getEncoded()));

    //Mode 2

    PBEParametersGenerator generator = new PKCS5S2ParametersGenerator();
    generator.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes((""password"").toCharArray()), salt, 1000);
    KeyParameter params = (KeyParameter)generator.generateDerivedParameters(128);
    System.out.println(Arrays.toString(params.getKey()));

    //Mode 3

    SecretKeyFactory factorybc = SecretKeyFactory.getInstance(""PBEWITHHMACSHA1"", ""BC"");
    KeySpec keyspecbc = new PBEKeySpec(""password"".toCharArray(), salt, 1000, 128);
    Key keybc = factorybc.generateSecret(keyspecbc);
    System.out.println(keybc.getClass().getName());
    System.out.println(Arrays.toString(keybc.getEncoded()));
    System.out.println(keybc.getAlgorithm());
</code></pre>

<p>I know that PBKDF2 is implemented using HMAC SHA1 so that is why i chose as algorithm in the last method the ""PBEWITHHMACSHA1"" which i took from the bouncy castle java docs.</p>

<p>The output is the following:</p>

<pre><code>com.sun.crypto.provider.SunJCE_ae
[-53, 29, 113, -110, -25, 76, 115, -127, -64, 74, -63, 102, 75, 81, -21, 74]
[-53, 29, 113, -110, -25, 76, 115, -127, -64, 74, -63, 102, 75, 81, -21, 74]
org.bouncycastle.jce.provider.JCEPBEKey
[14, -47, -87, -16, -117, -31, 91, -121, 90, -68, -82, -31, -27, 5, -93, -67, 30, -34, -64, -40]
PBEwithHmacSHA
</code></pre>

<p>Any ideas?</p>
","<p>PBKDF2WithHmacSHA1 is already supported in BouncyCastle 1.60</p>

<p><a href=""https://www.bouncycastle.org/specifications.html"" rel=""nofollow noreferrer"">https://www.bouncycastle.org/specifications.html</a>
Password Hashing and PBE</p>

<p>Test passed with OpenJDK Runtime Environment 18.9 (build 11.0.1+13):</p>

<pre><code>    Security.addProvider(new BouncyCastleProvider());

    String password = ""xrS7AJk+V6L8J?B%"";
    SecureRandom rnd = new SecureRandom();
    int saltLength = 16;
    int keyLength = 128;
    int iterationCount = 10000;

    byte[] salt = new byte[saltLength];
    rnd.nextBytes(salt);

//SunJCE
    SecretKeyFactory factorySun = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"", ""SunJCE"");
    KeySpec keyspecSun = new PBEKeySpec(password.toCharArray(), salt, iterationCount, keyLength);
    SecretKey keySun = factorySun.generateSecret(keyspecSun);
    System.out.println(keySun.getClass().getName());
    System.out.println(Hex.toHexString(keySun.getEncoded()));

//BouncyCastle  
    SecretKeyFactory factoryBC = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"", ""BC"");
    KeySpec keyspecBC = new PBEKeySpec(password.toCharArray(), salt, iterationCount, keyLength);
    SecretKey keyBC = factoryBC.generateSecret(keyspecBC);
    System.out.println(keyBC.getClass().getName());
    System.out.println(Hex.toHexString(keyBC.getEncoded()));

    Assert.assertArrayEquals(keySun.getEncoded(), keyBC.getEncoded());
</code></pre>

<p>The output is:</p>

<pre><code>com.sun.crypto.provider.PBKDF2KeyImpl
e9b01389fa91a6172ed6e95e1e1a2611
org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey
e9b01389fa91a6172ed6e95e1e1a2611
</code></pre>
","20044","<java><bouncycastle><jce><pbkdf2>","38","0","3","2019-01-12 05:44:39","10569975","4","20","3636601","","2017-07-11 09:48:25","2011-12-29 22:02:30",""
"4433216","Password Encryption: PBKDF2 (using sha512 x 1000) vs Bcrypt","<p>I've been reading about the Gawker incident and several articles have cropped up regarding only using <a href=""http://en.wikipedia.org/wiki/Bcrypt"" rel=""noreferrer"">bcrypt</a> to hash passwords and I want to make sure my hashing mechanism is secure enough to avoid switching to another method. In my current application I have opted for a <a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""noreferrer"">PBKDF2</a> implementation utilising sha2-512 and a minimum of 1000 iterations.</p>

<p>Can I ask for opinions on using PBKDF2 vs Bcrypt and whether or not I should implement a change?</p>
","<p>Comment (re: the title):</p>

<ul>
<li>Don't use encryption (reversible) to store passwords unless you MUST.</li>
<li>Since you presented a hashing (non-reversible) option as an alternative, I assume you don't need reversibility.</li>
</ul>

<blockquote>
  <p>opinions on using PBKDF2 vs Bcrypt and
  whether or not I should implement a
  change?</p>
</blockquote>

<p>My opinion:</p>

<p>Use PBKDF2 over Bcrypt.  (I just have more faith in SHA than Blofish, for no reason)</p>

<p>As for whether you should 'implement a change', I don't know what you are asking.</p>

<p>Edited to more clearly separate the encryption / hashing discussion from stating my preferences w/r/t algorithm.</p>
","19129","<passwords><hash><password-protection><bcrypt><pbkdf2>","15","-7","2","2012-08-11 14:58:51","5531194","0","18","13118","","2011-01-18 14:28:13","2010-12-13 20:31:25",""
"4433216","Password Encryption: PBKDF2 (using sha512 x 1000) vs Bcrypt","<p>I've been reading about the Gawker incident and several articles have cropped up regarding only using <a href=""http://en.wikipedia.org/wiki/Bcrypt"" rel=""noreferrer"">bcrypt</a> to hash passwords and I want to make sure my hashing mechanism is secure enough to avoid switching to another method. In my current application I have opted for a <a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""noreferrer"">PBKDF2</a> implementation utilising sha2-512 and a minimum of 1000 iterations.</p>

<p>Can I ask for opinions on using PBKDF2 vs Bcrypt and whether or not I should implement a change?</p>
","<p>You're good with PBKDF2, no need to jump to bcrypt.</p>

<p>Although, the recommendation to use 1000 iterations was made in year 2000, now you'd want much more.</p>

<p>Also, you should take more care when using bcrypt:</p>

<blockquote>
  <p>It is also worth noting that while bcrypt is stronger than PBKDF2 for most types of passwords, it falls behind for long passphrases; this results from bcrypt’s inability to use more than the ﬁrst 55 characters of a passphrase While our estimated costs and NIST’s .
  estimates of passphrase entropy suggest that bcrypt’s 55-character limitation is not
  likely to cause problems at the present time, implementors of systems which rely on
  bcrypt might be well-advised to either work around this limitation (e.g., by “prehashing” a passphrase to make it ﬁt into the 55-character limit) or to take steps to
  prevent users from placing too much password entropy in the 56th and subsequent
  characters (e.g., by asking users of a website to type their password into an input
  box which only has space for 55 characters).</p>
</blockquote>

<p><a href=""http://www.tarsnap.com/scrypt/scrypt.pdf"" rel=""noreferrer"">From scrypt paper [PDF]</a></p>

<p>That said, there's also <a href=""http://www.daemonology.net/blog/2009-05-09-scrypt-key-derivation.html"" rel=""noreferrer"">scrypt</a>.</p>

<p>Any comparisons would be incomplete without the table from the scrypt paper mentioned above:</p>

<p><img src=""https://i.stack.imgur.com/sOMvu.png"" alt=""Estimated cost of hardware to crack a password in 1 year.""></p>

<p>Iteration counts for PBKDF2-HMAC-SHA256 used there are 86,000 and 4,300,000.</p>
","19129","<passwords><hash><password-protection><bcrypt><pbkdf2>","15","27","2","2012-08-11 14:58:51","5531194","0","18","13118","","2011-01-18 14:28:13","2010-12-13 20:31:25",""
"9771212","How to use PKCS5_PBKDF2_HMAC_SHA1()","<p>I am trying to use <code>PKCS5_PBKDF2_HMAC_SHA1()</code> and below is my sample program. I wanted to make sure if my result of <code>PKCS5_PBKDF2_HMAC_SHA1()</code> is correct so I verified the same with the website <a href=""http://anandam.name/pbkdf2/"" rel=""nofollow noreferrer"">http://anandam.name/pbkdf2/</a> and I see a different result.  Am I using the API correctly? </p>

<p>I am having doubts if I am passing salt value correctly.</p>

<p>I have pasted my result and website result after the program.</p>

<p>Please help me understand this.</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;stdio.h&gt;     
#include &lt;types.h&gt; 
#include &lt;string.h&gt; 
#include &lt;stdio.h&gt; 
#include &lt;stdlib.h&gt; 

#include &lt;malloc.h&gt; 

#include &lt;openssl/hmac.h&gt; 
#include &lt;openssl/evp.h&gt; 
#include &lt;openssl/engine.h&gt; 
#include &lt;openssl/aes.h&gt;
#include &lt;openssl/rand.h&gt; 

#include &lt;proto.h&gt; 
#define KEY_LEN    32// 32 bytes - 256 bits 
#define KEK_KEY_LEN   5 
#define ITERATION   1000 

unsigned char salt_value[KEY_LEN]; 
unsigned char AESkey[KEY_LEN]; 
unsigned char XTSkey[KEY_LEN]; 
u8 fuse_key[KEY_LEN]; 

void main() 
{ 
    s32 i=0; 
    s32 len =0; 
    u8 *out; 
    u8 *rspHMAC; 
    const s8 pwd[] = ""test""; 
    s8 rspPKCS5[KEK_KEY_LEN * 2]; 
    s32 ret; 

    rspHMAC = (unsigned char *) malloc(sizeof(char) * KEY_LEN); 
    out = (unsigned char *) malloc(sizeof(char) * KEK_KEY_LEN); 

    RAND_bytes(salt_value, KEY_LEN); 

    printf(""\n salt_value[0] = %x; salt_value[31]= %x"", salt_value[0], salt_value[31]); 
    printf(""\n strlen(salt_value) = %d; sizeof(salt_value) = %d\n"", strlen(salt_value), sizeof(salt_value));  

    for(i = 0; i &lt; KEY_LEN; i++) { 
        printf(""%02x"", salt_value[i]); 
    } 

    ret = PKCS5_PBKDF2_HMAC_SHA1(pwd, strlen(pwd), salt_value, strlen(salt_value), ITERATION, KEK_KEY_LEN, out); 
    printf(""\n PKCS#5 :""); 

    for(len = 0; len &lt; KEK_KEY_LEN; len++){ 
        printf(""%02x"", out[len]);

        sprintf(&amp;rspPKCS5[len * 2], ""%02x"", out[len]); 
    } 

    printf(""\n""); 
} 
</code></pre>

<p><strong>Sample Output:</strong></p>

<pre><code>salt_value[0] = e2; salt_value[31]= 12 
strlen(salt_value) = 32; sizeof(salt_value) = 32 
e258017933f3e629a4166cece78f3162a3b0b7edb2e94c93d76fe6c38198ea12 
PKCS#5 :7d7ec9f411 
</code></pre>

<p>Website result: </p>

<pre><code>The derived 40-bit key is: a5caf6a0d3 
</code></pre>
","<p>First, let's look at an <a href=""http://tools.ietf.org/html/draft-josefsson-pbkdf2-test-vectors-06"" rel=""noreferrer"">official test vector</a> for PBKDF2 HMAC-SHA1:</p>

<pre><code>Input:
   P = ""password"" (8 octets)
   S = ""salt"" (4 octets)
   c = 1
   dkLen = 20

 Output:
   DK = 0c 60 c8 0f 96 1f 0e 71
        f3 a9 b5 24 af 60 12 06
        2f e0 37 a6             (20 octets)
</code></pre>

<p>So now we know what we're shooting for both on the web and in your program.  So using that info, we find out that the web site wants your salt as an ASCII string, which it will then convert to bytes.  This is important because you'll never be able to match the web page's output if you use <code>RAND_bytes</code> to generate a salt.</p>

<pre><code>password
salt
1
20
0c60c80f961f0e71f3a9b524af6012062fe037a6
</code></pre>

<p>And you are using the salt incorrectly.  In your commented line, you're generating a string with ASCII characters.  If you want to use that salt, you'd have to declare it as an array of bytes.  Plus, you're missing a digit.</p>

<pre><code>unsigned char salt_value[]= { 0x5d, 0x85, 0x94, 0x7b, … /* and so on */ };
</code></pre>

<p>And in the uncommented code, you're generating an array of bytes but treating it as a string.  You don't call <code>strlen</code> on an array of bytes because arrays of bytes can contain 0, which strlen will interpret as a null terminator.  So you either track the size manually (e.g., your KEK_KEY_LEN define for the array you malloc) or you use <code>sizeof</code> when appropriate.</p>

<pre><code>PKCS5_PBKDF2_HMAC_SHA1(pwd, strlen(pwd), salt_value, sizeof(salt_value), ITERATION, KEK_KEY_LEN, out);
</code></pre>

<p>So now that we know all these things, we can put together a full program that matches the output of both the web site and the official test vector.</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

#include &lt;openssl/evp.h&gt;

#define KEY_LEN      32
#define KEK_KEY_LEN  20
#define ITERATION     1 

int main()
{
    size_t i;
    unsigned char *out;
    const char pwd[] = ""password"";
    unsigned char salt_value[] = {'s','a','l','t'};

    out = (unsigned char *) malloc(sizeof(unsigned char) * KEK_KEY_LEN);

    printf(""pass: %s\n"", pwd);
    printf(""ITERATION: %u\n"", ITERATION);
    printf(""salt: ""); for(i=0;i&lt;sizeof(salt_value);i++) { printf(""%02x"", salt_value[i]); } printf(""\n"");

    if( PKCS5_PBKDF2_HMAC_SHA1(pwd, strlen(pwd), salt_value, sizeof(salt_value), ITERATION, KEK_KEY_LEN, out) != 0 )
    {
        printf(""out: ""); for(i=0;i&lt;KEK_KEY_LEN;i++) { printf(""%02x"", out[i]); } printf(""\n"");
    }
    else
    {
        fprintf(stderr, ""PKCS5_PBKDF2_HMAC_SHA1 failed\n"");
    }

    free(out);

    return 0;
}
</code></pre>

<p>(and note that main needs to return an <code>int</code> and you should free your allocated memory)</p>

<pre><code>gcc pkcs5.c -o pkcs5 -g -lcrypto -Wall
./pkcs5
pass: password
ITERATION: 1
salt: 73616c74
out: 0c60c80f961f0e71f3a9b524af6012062fe037a6
</code></pre>
","18807","<openssl><salt><pbkdf2>","12","18","1","2015-06-07 12:23:56","","1","10","608639","","2015-06-07 12:21:10","2012-03-19 13:37:26",""
"8569555","PBKDF2 using CommonCrypto on iOS","<p>I'm trying to use <code>CommonCrypto</code> to generate keys using <code>PBKDF2</code> but I can't seem to import <code>CommonCrypto/CommonKeyDerivation.h</code>, I just errors that it is not found.</p>

<p>Any ideas?</p>

<p>edit: I should probably mention I have already added the security framework and I can import all of the other <code>CommonCrypto</code> headers.</p>
","<p>Are you building for iOS5 ? or earlier versions ?</p>

<p>Both API, <code>CCKeyDerivationPBKDF</code> and <code>CCCalibratePBKDF</code>, defined in the header file are only available on IOS5 (or OSX 10.7) and later.</p>

<p>You can make sure the file exists by executing this inside a terminal window:</p>

<pre><code>$ find /Developer/ -name CommonKeyDerivation.h
/Developer//Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk/usr/include/CommonCrypto/CommonKeyDerivation.h
/Developer//Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator5.0.sdk/usr/include/CommonCrypto/CommonKeyDerivation.h
/Developer//SDKs/MacOSX10.7.sdk/usr/include/CommonCrypto/CommonKeyDerivation.h
</code></pre>
","15654","<objective-c><ios><pbkdf2><commoncrypto>","14","1","3","2013-09-03 10:05:32","9372343","0","18","960432","","2011-12-20 09:10:42","2011-12-20 00:53:51",""
"8569555","PBKDF2 using CommonCrypto on iOS","<p>I'm trying to use <code>CommonCrypto</code> to generate keys using <code>PBKDF2</code> but I can't seem to import <code>CommonCrypto/CommonKeyDerivation.h</code>, I just errors that it is not found.</p>

<p>Any ideas?</p>

<p>edit: I should probably mention I have already added the security framework and I can import all of the other <code>CommonCrypto</code> headers.</p>
","<p>Here's how i generate AES256 keys. The only interesting this is that i get CommonCrypto to estimate for me how many rounds to use. It seems pretty straightforwards.</p>

<pre><code>#import &lt;CommonCrypto/CommonKeyDerivation.h&gt;

...

// Makes a random 256-bit salt
- (NSData*)generateSalt256 {
    unsigned char salt[32];
    for (int i=0; i&lt;32; i++) {
        salt[i] = (unsigned char)arc4random();
    }
    return [NSData dataWithBytes:salt length:32];
}

...

// Make keys!
NSString* myPass = @""MyPassword1234"";
NSData* myPassData = [myPass dataUsingEncoding:NSUTF8StringEncoding];
NSData* salt = [self generateSalt256];

// How many rounds to use so that it takes 0.1s ?
int rounds = CCCalibratePBKDF(kCCPBKDF2, myPassData.length, salt.length, kCCPRFHmacAlgSHA256, 32, 100);

// Open CommonKeyDerivation.h for help
unsigned char key[32];
CCKeyDerivationPBKDF(kCCPBKDF2, myPassData.bytes, myPassData.length, salt.bytes, salt.length, kCCPRFHmacAlgSHA256, rounds, key, 32);
</code></pre>
","15654","<objective-c><ios><pbkdf2><commoncrypto>","14","32","3","2013-09-03 10:05:32","9372343","0","18","960432","","2011-12-20 09:10:42","2011-12-20 00:53:51",""
"8569555","PBKDF2 using CommonCrypto on iOS","<p>I'm trying to use <code>CommonCrypto</code> to generate keys using <code>PBKDF2</code> but I can't seem to import <code>CommonCrypto/CommonKeyDerivation.h</code>, I just errors that it is not found.</p>

<p>Any ideas?</p>

<p>edit: I should probably mention I have already added the security framework and I can import all of the other <code>CommonCrypto</code> headers.</p>
","<ol>
<li>Add this library to your project libcommonCrypto.dylib</li>
<li>#import  into hash key generation class.</li>
<li>use following code to generate hash key.</li>
</ol>

<p>This is the code what i have used:</p>

<pre><code>// Salt data getting from salt string.
NSData *saltData = [@""Salt String"" dataUsingEncoding:NSUTF8StringEncoding];

// Data of String to generate Hash key(hexa decimal string).
NSData *passwordData = [@""Hash key generated string"" dataUsingEncoding:NSUTF8StringEncoding];

// Hash key (hexa decimal) string data length.
NSMutableData *hashKeyData = [NSMutableData dataWithLength:CC_SHA1_DIGEST_LENGTH];

// Key Derivation using PBKDF2 algorithm.
int result = CCKeyDerivationPBKDF(kCCPBKDF2, passwordData.bytes, passwordData.length, saltData.bytes, saltData.length, kCCPRFHmacAlgSHA1, 1000, hashKeyData.mutableBytes, hashKeyData.length);

// Hexa decimal or hash key string from hash key data.
NSString *hexDecimalString = hashKeyData.description;

NSLog(@""Hexa decimal string:%@"", hexDecimalString);
</code></pre>
","15654","<objective-c><ios><pbkdf2><commoncrypto>","14","6","3","2013-09-03 10:05:32","9372343","0","18","960432","","2011-12-20 09:10:42","2011-12-20 00:53:51",""
"1046599","PBKDF2 implementation in C# with Rfc2898DeriveBytes","<p>Guys, I'm trying to implement a PBKDF2 function in C# that creates a WPA Shared key.  I've found some here: <a href=""http://msdn.microsoft.com/en-us/magazine/cc163913.aspx"" rel=""noreferrer"">http://msdn.microsoft.com/en-us/magazine/cc163913.aspx</a> that seems to produce a valid result, but it's one byte too short... and the wrong PSK value.</p>

<p>To test the output, I am comparing it to this: <a href=""http://www.xs4all.nl/~rjoris/wpapsk.html"" rel=""noreferrer"">http://www.xs4all.nl/~rjoris/wpapsk.html</a> or <a href=""http://anandam.name/pbkdf2/"" rel=""noreferrer"">http://anandam.name/pbkdf2/</a></p>

<p>I did find one way of getting this to work with a built in library to C# called Rfc2898DeriveBytes.  Using this, I get a valid output using:</p>

<pre><code>Rfc2898DeriveBytes k3 = new Rfc2898DeriveBytes(pwd1, salt1, 4096);
byte[] answers = k3.GetBytes(32);
</code></pre>

<p>Now, the one limitation I have using Rfc2898DeriveBytes is the ""salt"" must be 8 octets long.  If it is shorter, the Rfc2898DeriveBytes throws an exception.  I was thinking all I had to do was pad the salt (if it was shorter) to 8 bytes, and I'd be good.  But NO!  I've tried pretty much every combination of padding with a shorter salt, but I cannot duplicate the results I get from those two websites above.</p>

<p>So bottom line is, does this mean the Rfc2898DeriveBytes just simply won't work with a source salt shorter than 8 bytes?  If so, does anyone know of any C# code I could use that implements PBKDF2 for WPA Preshared key?</p>
","<p>I get matching results when comparing key-derivation from .NET's Rfc2898DeriveBytes and Anandam's PBKDF2 Javascript implementation.  </p>

<p>I put together <a href=""http://cheeso.members.winisp.net/srcview.aspx?dir=AES-example"" rel=""nofollow noreferrer"">an example</a> of packaging SlowAES and Anandam's PBKDF2 into Windows Script Components. Using this implementation shows good interop with the .NET RijndaelManaged class and the Rfc2898DeriveBytes class. </p>

<p>See also:  </p>

<ul>
<li><a href=""https://stackoverflow.com/questions/793812/javascript-aes-encryption/857903#857903"">AES in Javascript</a></li>
<li><a href=""https://stackoverflow.com/questions/1149611/getting-slowaes-and-rijndaelmanaged-class-in-net-to-play-together"">Getting SlowAES and RijndaelManaged to play together</a></li>
</ul>

<p>All of these go further than what you are asking for.  They all show interop of the AES encryption.  But to get interop on encryption, it is a necessary pre-requisite to have interop (or matching outputs) on the password-based key derivation.  </p>
","14985","<c#><pbkdf2><rfc2898>","22","7","4","2014-05-14 14:42:24","","1","13","48082","","2009-09-01 01:31:51","2009-06-25 22:48:55",""
"1046599","PBKDF2 implementation in C# with Rfc2898DeriveBytes","<p>Guys, I'm trying to implement a PBKDF2 function in C# that creates a WPA Shared key.  I've found some here: <a href=""http://msdn.microsoft.com/en-us/magazine/cc163913.aspx"" rel=""noreferrer"">http://msdn.microsoft.com/en-us/magazine/cc163913.aspx</a> that seems to produce a valid result, but it's one byte too short... and the wrong PSK value.</p>

<p>To test the output, I am comparing it to this: <a href=""http://www.xs4all.nl/~rjoris/wpapsk.html"" rel=""noreferrer"">http://www.xs4all.nl/~rjoris/wpapsk.html</a> or <a href=""http://anandam.name/pbkdf2/"" rel=""noreferrer"">http://anandam.name/pbkdf2/</a></p>

<p>I did find one way of getting this to work with a built in library to C# called Rfc2898DeriveBytes.  Using this, I get a valid output using:</p>

<pre><code>Rfc2898DeriveBytes k3 = new Rfc2898DeriveBytes(pwd1, salt1, 4096);
byte[] answers = k3.GetBytes(32);
</code></pre>

<p>Now, the one limitation I have using Rfc2898DeriveBytes is the ""salt"" must be 8 octets long.  If it is shorter, the Rfc2898DeriveBytes throws an exception.  I was thinking all I had to do was pad the salt (if it was shorter) to 8 bytes, and I'd be good.  But NO!  I've tried pretty much every combination of padding with a shorter salt, but I cannot duplicate the results I get from those two websites above.</p>

<p>So bottom line is, does this mean the Rfc2898DeriveBytes just simply won't work with a source salt shorter than 8 bytes?  If so, does anyone know of any C# code I could use that implements PBKDF2 for WPA Preshared key?</p>
","<p>Here is an implementation that does not require the 8 byte salt.</p>

<p>You can calculate a WPA key as follows:</p>

<pre><code>Rfc2898DeriveBytes rfc2898 = new Rfc2898DeriveBytes(passphrase, Encoding.UTF8.GetBytes(name), 4096);
key = rfc2898.GetBytes(32);

public class Rfc2898DeriveBytes : DeriveBytes
    {
        const int BlockSize = 20;
        uint block;
        byte[] buffer;
        int endIndex;
        readonly HMACSHA1 hmacsha1;
        uint iterations;
        byte[] salt;
        int startIndex;

        public Rfc2898DeriveBytes(string password, int saltSize)
            : this(password, saltSize, 1000)
        {
        }

        public Rfc2898DeriveBytes(string password, byte[] salt)
            : this(password, salt, 1000)
        {
        }

        public Rfc2898DeriveBytes(string password, int saltSize, int iterations)
        {
            if (saltSize &lt; 0)
            {
                throw new ArgumentOutOfRangeException(""saltSize"");
            }
            byte[] data = new byte[saltSize];
            new RNGCryptoServiceProvider().GetBytes(data);
            Salt = data;
            IterationCount = iterations;
            hmacsha1 = new HMACSHA1(new UTF8Encoding(false).GetBytes(password));
            Initialize();
        }

        public Rfc2898DeriveBytes(string password, byte[] salt, int iterations) : this(new UTF8Encoding(false).GetBytes(password), salt, iterations)
        {
        }

        public Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations)
        {
            Salt = salt;
            IterationCount = iterations;
            hmacsha1 = new HMACSHA1(password);
            Initialize();
        }

        static byte[] Int(uint i)
        {
            byte[] bytes = BitConverter.GetBytes(i);
            byte[] buffer2 = new byte[] {bytes[3], bytes[2], bytes[1], bytes[0]};
            if (!BitConverter.IsLittleEndian)
            {
                return bytes;
            }
            return buffer2;
        }


        byte[] DeriveKey()
        {
            byte[] inputBuffer = Int(block);
            hmacsha1.TransformBlock(salt, 0, salt.Length, salt, 0);
            hmacsha1.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length);
            byte[] hash = hmacsha1.Hash;
            hmacsha1.Initialize();
            byte[] buffer3 = hash;
            for (int i = 2; i &lt;= iterations; i++)
            {
                hash = hmacsha1.ComputeHash(hash);
                for (int j = 0; j &lt; BlockSize; j++)
                {
                    buffer3[j] = (byte) (buffer3[j] ^ hash[j]);
                }
            }
            block++;
            return buffer3;
        }

        public override byte[] GetBytes(int bytesToGet)
        {
            if (bytesToGet &lt;= 0)
            {
                throw new ArgumentOutOfRangeException(""bytesToGet"");
            }
            byte[] dst = new byte[bytesToGet];
            int dstOffset = 0;
            int count = endIndex - startIndex;
            if (count &gt; 0)
            {
                if (bytesToGet &lt; count)
                {
                    Buffer.BlockCopy(buffer, startIndex, dst, 0, bytesToGet);
                    startIndex += bytesToGet;
                    return dst;
                }
                Buffer.BlockCopy(buffer, startIndex, dst, 0, count);
                startIndex = endIndex = 0;
                dstOffset += count;
            }
            while (dstOffset &lt; bytesToGet)
            {
                byte[] src = DeriveKey();
                int num3 = bytesToGet - dstOffset;
                if (num3 &gt; BlockSize)
                {
                    Buffer.BlockCopy(src, 0, dst, dstOffset, BlockSize);
                    dstOffset += BlockSize;
                }
                else
                {
                    Buffer.BlockCopy(src, 0, dst, dstOffset, num3);
                    dstOffset += num3;
                    Buffer.BlockCopy(src, num3, buffer, startIndex, BlockSize - num3);
                    endIndex += BlockSize - num3;
                    return dst;
                }
            }
            return dst;
        }

        void Initialize()
        {
            if (buffer != null)
            {
                Array.Clear(buffer, 0, buffer.Length);
            }
            buffer = new byte[BlockSize];
            block = 1;
            startIndex = endIndex = 0;
        }

        public override void Reset()
        {
            Initialize();
        }

        public int IterationCount
        {
            get
            {
                return (int) iterations;
            }
            set
            {
                if (value &lt;= 0)
                {
                    throw new ArgumentOutOfRangeException(""value"");
                }
                iterations = (uint) value;
                Initialize();
            }
        }

        public byte[] Salt
        {
            get
            {
                return (byte[]) salt.Clone();
            }
            set
            {
                if (value == null)
                {
                    throw new ArgumentNullException(""value"");
                }
                salt = (byte[]) value.Clone();
                Initialize();
            }
        }
    }
</code></pre>
","14985","<c#><pbkdf2><rfc2898>","22","15","4","2014-05-14 14:42:24","","1","13","48082","","2009-09-01 01:31:51","2009-06-25 22:48:55",""
"1046599","PBKDF2 implementation in C# with Rfc2898DeriveBytes","<p>Guys, I'm trying to implement a PBKDF2 function in C# that creates a WPA Shared key.  I've found some here: <a href=""http://msdn.microsoft.com/en-us/magazine/cc163913.aspx"" rel=""noreferrer"">http://msdn.microsoft.com/en-us/magazine/cc163913.aspx</a> that seems to produce a valid result, but it's one byte too short... and the wrong PSK value.</p>

<p>To test the output, I am comparing it to this: <a href=""http://www.xs4all.nl/~rjoris/wpapsk.html"" rel=""noreferrer"">http://www.xs4all.nl/~rjoris/wpapsk.html</a> or <a href=""http://anandam.name/pbkdf2/"" rel=""noreferrer"">http://anandam.name/pbkdf2/</a></p>

<p>I did find one way of getting this to work with a built in library to C# called Rfc2898DeriveBytes.  Using this, I get a valid output using:</p>

<pre><code>Rfc2898DeriveBytes k3 = new Rfc2898DeriveBytes(pwd1, salt1, 4096);
byte[] answers = k3.GetBytes(32);
</code></pre>

<p>Now, the one limitation I have using Rfc2898DeriveBytes is the ""salt"" must be 8 octets long.  If it is shorter, the Rfc2898DeriveBytes throws an exception.  I was thinking all I had to do was pad the salt (if it was shorter) to 8 bytes, and I'd be good.  But NO!  I've tried pretty much every combination of padding with a shorter salt, but I cannot duplicate the results I get from those two websites above.</p>

<p>So bottom line is, does this mean the Rfc2898DeriveBytes just simply won't work with a source salt shorter than 8 bytes?  If so, does anyone know of any C# code I could use that implements PBKDF2 for WPA Preshared key?</p>
","<p>Looking at the Microsoft link, I made some changes in order to make the PMK the same as those discovered in the links you put forward.</p>

<p>Change the SHA algorithm from SHA256Managed to SHA1Managed for the inner and outer hash.</p>

<p>Change HASH_SIZE_IN_BYTES to equal 20 rather than 34.  </p>

<p>This produces the correct WPA key.</p>

<p>I know it's a bit late coming, but I've only just started looking for this sort of informatin and thought I could help others out.  If anyone does read this post, any ideas on the PRF function and how to do it within C#?</p>
","14985","<c#><pbkdf2><rfc2898>","22","6","4","2014-05-14 14:42:24","","1","13","48082","","2009-09-01 01:31:51","2009-06-25 22:48:55",""
"1046599","PBKDF2 implementation in C# with Rfc2898DeriveBytes","<p>Guys, I'm trying to implement a PBKDF2 function in C# that creates a WPA Shared key.  I've found some here: <a href=""http://msdn.microsoft.com/en-us/magazine/cc163913.aspx"" rel=""noreferrer"">http://msdn.microsoft.com/en-us/magazine/cc163913.aspx</a> that seems to produce a valid result, but it's one byte too short... and the wrong PSK value.</p>

<p>To test the output, I am comparing it to this: <a href=""http://www.xs4all.nl/~rjoris/wpapsk.html"" rel=""noreferrer"">http://www.xs4all.nl/~rjoris/wpapsk.html</a> or <a href=""http://anandam.name/pbkdf2/"" rel=""noreferrer"">http://anandam.name/pbkdf2/</a></p>

<p>I did find one way of getting this to work with a built in library to C# called Rfc2898DeriveBytes.  Using this, I get a valid output using:</p>

<pre><code>Rfc2898DeriveBytes k3 = new Rfc2898DeriveBytes(pwd1, salt1, 4096);
byte[] answers = k3.GetBytes(32);
</code></pre>

<p>Now, the one limitation I have using Rfc2898DeriveBytes is the ""salt"" must be 8 octets long.  If it is shorter, the Rfc2898DeriveBytes throws an exception.  I was thinking all I had to do was pad the salt (if it was shorter) to 8 bytes, and I'd be good.  But NO!  I've tried pretty much every combination of padding with a shorter salt, but I cannot duplicate the results I get from those two websites above.</p>

<p>So bottom line is, does this mean the Rfc2898DeriveBytes just simply won't work with a source salt shorter than 8 bytes?  If so, does anyone know of any C# code I could use that implements PBKDF2 for WPA Preshared key?</p>
","<p>This expands on Dodgyrabbit's answer and his code helped to fix mine as I developed this.  This generic class can use any HMAC-derived class in C#.  This is .NET 4 because of the parameters with default values, but if those were changed then this <em>should</em> work down to .NET 2, but I haven't tested that.  USE AT YOUR OWN RISK.</p>

<p>I have also posted this on my blog, <a href=""http://thealbuquerqueleftturn.blogspot.com/2013/09/pbkdf2-in-almost-any-hmac-flavor-you.html"" rel=""nofollow"">The Albequerque Left Turn</a>, today.</p>

<pre><code>using System;
using System.Text;
using System.Security.Cryptography;

namespace System.Security.Cryptography
{
    //Generic PBKDF2 Class that can use any HMAC algorithm derived from the 
    // System.Security.Cryptography.HMAC abstract class

    // PER SPEC RFC2898 with help from user Dodgyrabbit on StackExchange
    // http://stackoverflow.com/questions/1046599/pbkdf2-implementation-in-c-sharp-with-rfc2898derivebytes

    // the use of default values for parameters in the functions puts this at .NET 4
    // if you remove those defaults and create the required constructors, you should be able to drop to .NET 2

    // USE AT YOUR OWN RISK!  I HAVE TESTED THIS AGAINST PUBLIC TEST VECTORS, BUT YOU SHOULD 
    // HAVE YOUR CODE PEER-REVIEWED AND SHOULD FOLLOW BEST PRACTICES WHEN USING CRYPTO-ANYTHING!
    // NO WARRANTY IMPLIED OR EXPRESSED, YOU ARE ON YOUR OWN!

    // PUBLIC DOMAIN!  NO COPYRIGHT INTENDED OR RESERVED!

    //constrain T to be any class that derives from HMAC, and that exposes a new() constructor
    public class PBKDF2&lt;T&gt;: DeriveBytes where T : HMAC, new()
    {
        //Internal variables and public properties
        private int _blockSize = -1;  // the byte width of the output of the HMAC algorithm       
        byte[] _P = null;
        int _C = 0;
        private T _hmac;

        byte[] _S = null;
        // if you called the initializer/constructor specifying a salt size,
        // you will need this property to GET the salt after it was created from the crypto rng!
        // GET THIS BEFORE CALLING GETBYTES()!  OBJECT WILL BE RESET AFTER GETBYTES() AND
        // SALT WILL BE LOST!!
        public byte[] Salt { get { return (byte[])_S.Clone(); } }

        // Constructors
        public PBKDF2(string Password, byte[] Salt, int IterationCount = 1000)
        { Initialize(Password, Salt, IterationCount); }

        public PBKDF2(byte[] Password, byte[] Salt, int IterationCount = 1000)
        { Initialize(Password, Salt, IterationCount); }

        public PBKDF2(string Password, int SizeOfSaltInBytes, int IterationCount = 1000)
        { Initialize(Password, SizeOfSaltInBytes, IterationCount);}

        public PBKDF2(byte[] Password, int SizeOfSaltInBytes, int IterationCount = 1000)
        { Initialize(Password, SizeOfSaltInBytes, IterationCount);}

        //All Construtors call the corresponding Initialize methods
        public void Initialize(string Password, byte[] Salt, int IterationCount = 1000)
        {
            if (string.IsNullOrWhiteSpace(Password))
                throw new ArgumentException(""Password must contain meaningful characters and not be null."", ""Password"");
            if (IterationCount &lt; 1)
                throw new ArgumentOutOfRangeException(""IterationCount"");
            Initialize(new UTF8Encoding(false).GetBytes(Password), Salt, IterationCount);
        }

        public void Initialize(byte[] Password, byte[] Salt, int IterationCount = 1000)
        {
            //all Constructors/Initializers eventually lead to this one which does all the ""important"" work
            if (Password == null || Password.Length == 0)
                throw new ArgumentException(""Password cannot be null or empty."", ""Password"");
            if (Salt == null)
                Salt = new byte[0];
            if (IterationCount &lt; 1)
                throw new ArgumentOutOfRangeException(""IterationCount"");
            _P = (byte[])Password.Clone();
            _S = (byte[])Salt.Clone();
            _C = IterationCount;
            //determine _blockSize
            _hmac = new T();
            _hmac.Key = new byte[] { 0 };
            byte[] test = _hmac.ComputeHash(new byte[] { 0 });
            _blockSize = test.Length;

        }

        public void Initialize(string Password, int SizeOfSaltInBytes, int IterationCount = 1000)
        {
            if (string.IsNullOrWhiteSpace(Password))
                throw new ArgumentException(""Password must contain meaningful characters and not be null."", ""Password"");
            if (IterationCount &lt; 1)
                throw new ArgumentOutOfRangeException(""IterationCount"");
            Initialize(new UTF8Encoding(false).GetBytes(Password), SizeOfSaltInBytes, IterationCount);
        }

        public void Initialize(byte[] Password, int SizeOfSaltInBytes, int IterationCount = 1000)
        {
            if (Password == null || Password.Length == 0)
                throw new ArgumentException(""Password cannot be null or empty."", ""Password"");
            if (SizeOfSaltInBytes &lt; 0)
                throw new ArgumentOutOfRangeException(""SizeOfSaltInBytes"");
            if (IterationCount &lt; 1)
                throw new ArgumentOutOfRangeException(""IterationCount"");
            // You didn't specify a salt, so I'm going to create one for you of the specific byte length
            byte[] data = new byte[SizeOfSaltInBytes];
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            rng.GetBytes(data);
            // and then finish initializing...
            // Get the salt from the Salt parameter BEFORE calling GetBytes()!!!!!!!!!!!
            Initialize(Password, data, IterationCount);
        }

        ~PBKDF2()
        {
            //*DOOT* clean up in aisle 5! *KEKERKCRACKLE*
            this.Reset();
        }

        // required by the Derive Bytes class/interface
        // this is where you request your output bytes after Initialize
        // state of class Reset after use!
        public override byte[] GetBytes(int ByteCount)
        {
            if (_S == null || _P == null)
                throw new InvalidOperationException(""Object not Initialized!"");
            if (ByteCount &lt; 1)// || ByteCount &gt; uint.MaxValue * blockSize)
                throw new ArgumentOutOfRangeException(""ByteCount"");

            int totalBlocks = (int)Math.Ceiling((decimal)ByteCount / _blockSize);
            int partialBlock = (int)(ByteCount % _blockSize);
            byte[] result = new byte[ByteCount];
            byte[] buffer = null;
            // I'm using TT here instead of T from the spec because I don't want to confuse it with
            // the generic object T
            for (int TT = 1; TT &lt;= totalBlocks; TT++)
            {
                // run the F function with the _C number of iterations for block number TT
                buffer = _F((uint)TT);
                //IF we're not at the last block requested
                //OR the last block requested is whole (not partial)
                //  then take everything from the result of F for this block number TT
                //ELSE only take the needed bytes from F
                if (TT != totalBlocks || (TT == totalBlocks &amp;&amp; partialBlock == 0))
                    Buffer.BlockCopy(buffer, 0, result, _blockSize * (TT - 1), _blockSize);
                else
                    Buffer.BlockCopy(buffer, 0, result, _blockSize * (TT - 1), partialBlock);
            }
            this.Reset();  // force cleanup after every use!  Cannot be reused!
            return result;
        }

        // required by the Derive Bytes class/interface
        public override void Reset()
        {
            _C = 0;
            _P.Initialize(); // the compiler might optimize this line out! :(
            _P = null;
            _S.Initialize(); // the compiler might optimize this line out! :(
            _S = null;
            if (_hmac != null)
                _hmac.Clear();
            _blockSize = -1;
        }

        // the core function of the PBKDF which does all the iterations
        // per the spec section 5.2 step 3
        private byte[] _F(uint I)
        {
            //NOTE: SPEC IS MISLEADING!!!
            //THE HMAC FUNCTIONS ARE KEYED BY THE PASSWORD! NEVER THE SALT!
            byte[] bufferU = null;
            byte[] bufferOut = null;
            byte[] _int = PBKDF2&lt;T&gt;.IntToBytes(I);
            _hmac = new T();
            _hmac.Key = (_P); // KEY BY THE PASSWORD!
            _hmac.TransformBlock(_S, 0, _S.Length, _S, 0);
            _hmac.TransformFinalBlock(_int, 0, _int.Length);
            bufferU = _hmac.Hash;
            bufferOut = (byte[])bufferU.Clone();
            for (int c = 1; c &lt; _C; c++)
            {
                _hmac.Initialize();
                _hmac.Key = _P;  // KEY BY THE PASSWORD!
                bufferU = _hmac.ComputeHash(bufferU);
                _Xor(ref bufferOut, bufferU);
            }
            return bufferOut;
        }

        // XOR one array of bytes into another (which is passed by reference)
        // this is the equiv of data ^= newData;
        private void _Xor(ref byte[] data, byte[] newData)
        {
            for (int i = data.GetLowerBound(0); i &lt;= data.GetUpperBound(0); i++)
                data[i] ^= newData[i];
        }

        // convert an unsigned int into an array of bytes BIG ENDIEN
        // per the spec section 5.2 step 3
        static internal byte[] IntToBytes(uint i)
        {
            byte[] bytes = BitConverter.GetBytes(i);
            if (!BitConverter.IsLittleEndian)
            {
                return bytes;
            }
            else
            {
                Array.Reverse(bytes);
                return bytes;
            }
        }
    }
}
</code></pre>
","14985","<c#><pbkdf2><rfc2898>","22","3","4","2014-05-14 14:42:24","","1","13","48082","","2009-09-01 01:31:51","2009-06-25 22:48:55",""
"1149611","Getting SlowAES and RijndaelManaged class in .NET to play together","<p>I'm trying to setup AES encryption / decryption using the javascript library <a href=""http://code.google.com/p/slowaes/"" rel=""nofollow noreferrer"">SlowAES</a> and the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rijndaelmanaged.aspx"" rel=""nofollow noreferrer"">RijndaelManaged</a> class in .NET.</p>

<p>I chose this method after reading <a href=""https://stackoverflow.com/questions/270510/how-to-encrypt-in-vbscript-using-aes/"">this post</a>, where Cheeso has managed to get these two encryption methods to play together  </p>

<blockquote>
  <p>""In my tests of the
  COM-wrapped-SlowAEs, I used CBC mode,
  and the encryption was completely
  compatible with the RijndaelManaged
  class in .NET"" - Cheeso</p>
</blockquote>

<p>I've taken the javascript code from Cheeso's Windows Scripting Component, the latest slowaes libraries, and using the following javascript script to test:</p>

<pre><code>var key = ""12345678901234567890123456789012"";
var message = ""watson?"";
var decrypted;

slowAES.aes.keySize.SIZE_256;
slowAES.modeOfOperation.CBC;
put_PassPhrase(key);
var result = EncryptString(message);
decrypted = DecryptCommaDelimitedStringToString(result)
document.write(""Key:"" + key + ""&lt;br /&gt;original:"" + message + ""&lt;br /&gt;Cypher:"" + result + ""&lt;br /&gt;Decrypted:"" + decrypted + ""&lt;br /&gt;IV(): "" + get_IV());
</code></pre>

<p>I'm getting the following output:</p>

<pre><code>Key:12345678901234567890123456789012
original:watson?
Cypher:245,159,1,1,168,1,1,143,1,1,146,1,1,239,117,1
Decrypted:watson? 
IV(): 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
</code></pre>

<p>I've modified the following example found <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rijndaelmanaged.aspx"" rel=""nofollow noreferrer"">on MSDN</a> to try and match the encryption in C# :</p>

<pre><code>public static void Main()
        {
            try
            {
                string original = ""watson?"";
                byte[] IV = new byte[16];   // match slowaes IV
                byte[] key = new System.Text.ASCIIEncoding().GetBytes(""12345678901234567890123456789012"");// match slowaes KEY

                RijndaelManaged myRijndael = new RijndaelManaged();
                myRijndael.BlockSize = 128;
                myRijndael.KeySize = 256;
                myRijndael.Mode = CipherMode.CBC;

                // Encrypt the string to an array of bytes.
                byte[] encrypted = encryptStringToBytes_AES(original, key, IV);

                // Decrypt the bytes to a string.
                string roundtrip = decryptStringFromBytes_AES(encrypted, key, IV);

                //Display the original data and the decrypted data.
                Console.WriteLine(""Original:   {0}"", original);
                Console.WriteLine(""Round Trip: {0}"", roundtrip);

            }
            catch (Exception e)
            {
                Console.WriteLine(""Error: {0}"", e.Message);
            }
        }
</code></pre>

<p>Watch of the byte array:</p>

<pre><code>-  encrypted {byte[16]} byte[]
  [0] 139 byte
  [1] 104 byte
  [2] 166 byte
  [3] 35 byte
  [4] 8 byte
  [5] 42 byte
  [6] 216 byte
  [7] 160 byte
  [8] 235 byte
  [9] 153 byte
  [10] 23 byte
  [11] 143 byte
  [12] 105 byte
  [13] 3 byte
  [14] 24 byte
  [15] 255 byte
</code></pre>

<p>I've tried all the padding options with the managed .NET class, however I can't get the encrypted outputs to match. Can anyone help me?</p>

<p>Thanks,</p>

<p>Bob</p>
","<p>maybe I can help. </p>

<p>I took your C# code and modified it slightly.  The C# code I use, in its entirety, is: </p>

<pre><code>using System;
using System.Security.Cryptography;

public class Bob
{
    internal static string FormatByteArray(byte[] b)
    {
        System.Text.StringBuilder sb1 = new System.Text.StringBuilder();
        int i = 0;
        for (i = 0; i &lt; b.Length; i++)
        {
            if (i != 0 &amp;&amp; i % 16 == 0)
                sb1.Append(""\n"");
            sb1.Append(System.String.Format(""{0:X2} "", b[i]));
        }
        return sb1.ToString();
    }

    public static void Main()
    {
        try
        {
            string original = ""watson?"";

            Console.WriteLine(""Original:   {0}"", original);

            byte[] IV = new byte[16];   // match slowaes IV
            var ascii = new System.Text.ASCIIEncoding();

            // match slowaes KEY
            string passPhrase = ""12345678901234567890123456789012"";
            byte[] key = ascii.GetBytes(passPhrase);

            RijndaelManaged myRijndael = new RijndaelManaged();
            myRijndael.BlockSize = 128;
            myRijndael.KeySize = 256;
            myRijndael.IV = IV;
            myRijndael.Padding   = PaddingMode.PKCS7;
            myRijndael.Mode = CipherMode.CBC;
            myRijndael.Key = key;

            // Encrypt the string to an array of bytes.
            byte[] plainText = new System.Text.ASCIIEncoding().GetBytes(original);
            ICryptoTransform transform = myRijndael.CreateEncryptor();
            byte[] cipherText = transform.TransformFinalBlock(plainText, 0, plainText.Length);

            Console.WriteLine(""cipherText: {0}"", FormatByteArray(cipherText));

            // Decrypt the bytes to a string.
            transform = myRijndael.CreateDecryptor();
            plainText = transform.TransformFinalBlock(cipherText, 0, cipherText.Length);


            string roundtrip = ascii.GetString(plainText);

            Console.WriteLine(""Round Trip: {0}"", roundtrip);

        }
        catch (Exception e)
        {
            Console.WriteLine(""Error: {0}"", e.Message);
        }
    }

}
</code></pre>

<p>compile the above with </p>

<pre><code>csc.exe /target:exe /out:Bob.exe Bob.cs
</code></pre>

<p>I use the slowAES.wsc from the other post you referenced, with 2 changes: I do not call getPaddedBlock() for the key in the EncryptString or DecryptString() methods. This really needs a PBKDF but let's not worry about that now. Here's what the modified EncryptString looks like: </p>

<pre><code>function EncryptString(plainText)
{
  // this is really wrong - need a PBBKDF to get the key, instead
  // of just using the passphrase
  var key = cryptoHelpers.convertStringToByteArray(_passphrase);
  // var nkey = slowAES.getPaddedBlock(key, 0, _keysize, _mode);
  var bytesToEncrypt = cryptoHelpers.convertStringToByteArray(plainText);

  var result = slowAES.encrypt(bytesToEncrypt, 
      _mode,
      key,
      _keysize,
      _iv);
  return result['cipher'];
}
</code></pre>

<p>This means you have to use a passPhrase that is <em>exactly</em> the length required by the keysize.  If you use AES256, then pass a 32-char string (32 * 8 = 256 bits).  Seems like you figured this out already. </p>

<p>The client of the WSC component is also Javascript (though it can be any COM language).  Here's what I used.</p>

<pre><code>function toHexString(a)
{
    var ret = '';
    for(var i = 0;i &lt; a.length;i++)
        ret += (a[i] &lt; 16 ? '0' : '') + a[i].toString(16) + ' ';
    return ret.toLowerCase();
}


//var plaintext = ""Hello. This is a test. of the emergency broadcasting system."";
var plaintext = ""watson?"";

try
{
    WScript.echo( ""plaintext: "" + plaintext);
    WScript.echo( ""plaintext.length: "" + plaintext.length);

    WScript.echo( ""instantiate "");
    var aes = new ActiveXObject(""Ionic.Com.SlowAES"");

    WScript.echo( ""keysize "");
    aes.KeySize = 256;

    WScript.echo( ""passphrase "");
    aes.PassPhrase= ""12345678901234567890123456789012"";  // 32 chars long

    WScript.echo( ""mode "");
    aes.Mode = ""CBC"";

    WScript.echo( ""encrypting... "");
    var result = aes.EncryptString(plaintext);

    WScript.echo( ""Cryptotext: "" + toHexString(result));

    WScript.echo( ""decrypting... "");
    var decrypted = aes.DecryptBytesToString(result);

    WScript.echo( ""decrypted: "" + decrypted);
}
catch(e)
{
    WScript.echo(""Exception: "" + e); 
    //     WScript.echo(e.Number + "": "" + e.Name);
    WScript.echo(e.Message);
}
</code></pre>

<p>If I then run this code, the Javascript and C# produces the same cipher text for a plaintext of ""watson?"", using AES256, passphrase of 12345678901234567890123456789012, and an IV of 16 bytes of zero.  The ciphertext generated is: </p>

<pre><code>8B 68 A6 23 08 2A D8 A0 EB 99 17 8F 69 03 18 FF
</code></pre>

<p>It successfully decrypts in both cases. </p>

<p><strong>EDIT</strong>: Though I packaged the slowAES encryption in a WSC, it will be interoperable running outside the COM environment as well. The WSC part is unnecessary for this question, but was necessary to demonstrate the answer for a prior question, which  was, ""<a href=""https://stackoverflow.com/questions/270510/how-to-encrypt-in-vbscript-using-aes"">how can I get VBScript and .NET AES to interoperate?</a>""</p>

<p><strong>EDIT2</strong>:  The source code that demonstrates AES interop between Javascript or VBScript and .NET <a href=""https://github.com/DinoChiesa/AES-Interop-Example"" rel=""nofollow noreferrer"">is available</a>.  I extended the basic example given here to produce test apps in 3 languages: C#, Javascript and VBScript.  They all take the same set of arguments.  They each use a RFC2898-compliant key derivation function.  You can specify the password, salt, IV, and plaintext, as well as the number of RFC2898 iterations to use in the PBKDF2.  You can easily verify that the ciphertext is the same for each of these test programs. Maybe the example will be useful for someone. </p>

<p><strong>EDIT3</strong><br>
a good read:  <a href=""http://www.matasano.com/articles/javascript-cryptography/"" rel=""nofollow noreferrer"">Javascript Cryptography considered harmful.</a></p>
","14720","<.net><javascript><aes><rijndaelmanaged><pbkdf2>","14","37","1","2015-10-19 19:51:20","","0","9","-1","","2017-05-23 12:09:53","2009-07-19 10:17:25",""
"11298184","About how fast can you brute force PBKDF2?","<p>After the linkedin password hash leak, I've been looking at our password hashing. We using Django 1.4 which uses PBKDF2, which is great and a step up from the previous SHA1.</p>

<p>However I'm curious how easily one could brute force that. I'm looking at our password complexity rules, and am wondering how fast it'd take to do (say) 8 length lower case ascii letters.</p>

<p>This guide to cracking the LinkedIn password hash, has someone doing 430 million sha1 hashes per second on a GPU. <a href=""http://erratasec.blogspot.ie/2012/06/linkedin-vs-password-cracking.html"" rel=""noreferrer"">http://erratasec.blogspot.ie/2012/06/linkedin-vs-password-cracking.html</a> What kinda speeds would you get for PBKDF2?</p>

<p>Does anyone have any rough/back-of-the-envelope/ballpark figures for how fast one could brute force PBKDF2?</p>
","<p>There is a <a href=""http://support.agilebits.com/discussions/1password-38-for-mac-from-agilebits-website/11784-entropy-and-pbkdf2"">writeup over at agilebits</a> from February that does the napkin calculations.  The abridged version:</p>

<blockquote>
  <p>As a ball park figure, I'm going to say 10,000 PBKDF2 iterations leads
  to tens of or hundred of milliseconds to test a password for a very
  high-end consumer system. What we are doing with PBKDF2 is reducing
  things from a million tests per second to a few hundred. This is
  taking into account specialized software that makes use of multiple
  cores and multiple GPUs.</p>
</blockquote>

<p>So taking your erratasec article that benchmarks 430 million SHA-1 hashes per second on a gpu as a baseline - the agilebits article shows metrics that suggest PBKDF2 with 10k iterations would bring that down to around 100k tests per second.</p>

<p>Far from scientific, but gets us in the ballpark...</p>
","13635","<security><passwords><hash><cracking><pbkdf2>","10","10","4","2013-04-29 13:00:23","","3","2","","","","2012-07-02 17:15:14",""
"11298184","About how fast can you brute force PBKDF2?","<p>After the linkedin password hash leak, I've been looking at our password hashing. We using Django 1.4 which uses PBKDF2, which is great and a step up from the previous SHA1.</p>

<p>However I'm curious how easily one could brute force that. I'm looking at our password complexity rules, and am wondering how fast it'd take to do (say) 8 length lower case ascii letters.</p>

<p>This guide to cracking the LinkedIn password hash, has someone doing 430 million sha1 hashes per second on a GPU. <a href=""http://erratasec.blogspot.ie/2012/06/linkedin-vs-password-cracking.html"" rel=""noreferrer"">http://erratasec.blogspot.ie/2012/06/linkedin-vs-password-cracking.html</a> What kinda speeds would you get for PBKDF2?</p>

<p>Does anyone have any rough/back-of-the-envelope/ballpark figures for how fast one could brute force PBKDF2?</p>
","<p>PBKDF2 is tunable.  You can always increase the cost value to reduce the number of possible guesses/sec for an attacker.  My recommendation is to decide how fast you want it to run on your platform and set the cost value accordingly.  For example, If you think 200 hashes/sec is an ideal tradeoff in performance/security, then increase the cost value and test how long it takes to hash a few thousand test passwords until you are averaging about 200/sec.</p>

<p>PBKDF2 also uses a ""salt"" which prevents attacks from scaling by forcing the attacker to separately attack each individual account.  Combined with stretching (i.e. slowing down the algorithm), this makes it extremely difficult to recover more than a small number of accounts.  An attacker can focus on one account and hope for the best or dedicate a set amount of time (an hour, a day) for each account and then move to the next one if he isn't successful.  </p>

<p>With the LinkedIn hashes, people were able to crack more than a million hashes in a day or less.  With PBKDF2 running at ~200 guesses/sec, it would take about 9 hours just to find out which of the 6.5M accounts used ""linkedin"" as their password.  If you wanted to run a list of 1,000 common passwords against all of those hashes, it would take about a year.</p>
","13635","<security><passwords><hash><cracking><pbkdf2>","10","3","4","2013-04-29 13:00:23","","3","2","","","","2012-07-02 17:15:14",""
"11298184","About how fast can you brute force PBKDF2?","<p>After the linkedin password hash leak, I've been looking at our password hashing. We using Django 1.4 which uses PBKDF2, which is great and a step up from the previous SHA1.</p>

<p>However I'm curious how easily one could brute force that. I'm looking at our password complexity rules, and am wondering how fast it'd take to do (say) 8 length lower case ascii letters.</p>

<p>This guide to cracking the LinkedIn password hash, has someone doing 430 million sha1 hashes per second on a GPU. <a href=""http://erratasec.blogspot.ie/2012/06/linkedin-vs-password-cracking.html"" rel=""noreferrer"">http://erratasec.blogspot.ie/2012/06/linkedin-vs-password-cracking.html</a> What kinda speeds would you get for PBKDF2?</p>

<p>Does anyone have any rough/back-of-the-envelope/ballpark figures for how fast one could brute force PBKDF2?</p>
","<p>Remember that bcrypt, scrypt, and PBKDF2/PKCS#5/RFC 2898 all support varying numbers of iterations; none is innately ""faster"" or ""slower"". Some take more RAM (PBKDF2 does <em>not</em> take much RAM), but that's about it.</p>

<p>As far as PBKDF2 iterations in specific, one popular GPU based cracking program can handle with a kitted out modern desktop + 8 GPU's at 1 million tries a second against WPA2.  As WPA2 is essentially PBKDF2(HMAC−SHA1, passphrase, ssid, 4096, 256), that tells us that one machine can test somewhat over 4 billion HMAC-SHA1 PBKDF2 iterations per second.  Ten such machines, of course, would test over 40 billion such iterations per second.</p>

<p>OWASP Password Cheat Sheet (<a href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"" rel=""nofollow"">https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet</a>) recommends at least 64,000 iterations in 2012, doubling every two years, or 90,510 iterations in 2013.</p>
","13635","<security><passwords><hash><cracking><pbkdf2>","10","3","4","2013-04-29 13:00:23","","3","2","","","","2012-07-02 17:15:14",""
"11298184","About how fast can you brute force PBKDF2?","<p>After the linkedin password hash leak, I've been looking at our password hashing. We using Django 1.4 which uses PBKDF2, which is great and a step up from the previous SHA1.</p>

<p>However I'm curious how easily one could brute force that. I'm looking at our password complexity rules, and am wondering how fast it'd take to do (say) 8 length lower case ascii letters.</p>

<p>This guide to cracking the LinkedIn password hash, has someone doing 430 million sha1 hashes per second on a GPU. <a href=""http://erratasec.blogspot.ie/2012/06/linkedin-vs-password-cracking.html"" rel=""noreferrer"">http://erratasec.blogspot.ie/2012/06/linkedin-vs-password-cracking.html</a> What kinda speeds would you get for PBKDF2?</p>

<p>Does anyone have any rough/back-of-the-envelope/ballpark figures for how fast one could brute force PBKDF2?</p>
","<p>Specialised hardware, such as used in bitcoin mining, can perform upwards of 50 billion hashes per second (as of early 2013. It's a moving target as hardware gets faster).</p>

<p>If you do 1,000 iterations of PBKDF2 then that will cut the attack down from 50 billion per second to 50 million per second. 10,000 iterations will be 5 million per second.</p>

<p>A typical web server however will not be anywhere near that fast. It's going to be a <em>lot</em> slower for you. You need to do some testing on your own production server and may find 10,000 iterations is too slow.</p>

<p>So it's not really about how fast PBKDF2 can be brute forced, it's about fast your server can verify a PBKDF2 password. You need to decide how long you think it should take (half a second? a tenth of a second? a hundredth of a second?) and then adjust the number of PBKDF2 rounds to suit that.</p>

<p>Also consider the strength of the passwords used by your customers. If they all have excellent passwords, then it really doesn't matter what hashing system you use. If they are all using terrible passwords then PBKDF2 is not good enough to protect them - you would need to get more exotic such as the hardware salted hash Apple uses in the iPhone to try and turn a 4 digit number into something that has at least some security (basically they force all hashing to be performed by a dedicated hardware chip, which is deliberately slow. move the data to any other hardware and it is impossible to decrypt).</p>

<p>Assuming the password is not in a dictionary (most passwords are), then the password strength is calculated by multiplying the number of possible characters in the alphabet by itself one hibe for each character. So if a password has letters (26 character alphabet) and digits (another 10 characters) then you have a 36 character alphabet, and if it's 6 characters long you multiply it by itself 6 times.</p>

<p>So a 6 digit alphanumeric password is 36*36*36*36*36*36, or if you prefer: 36^6. That gives you about 2.1 billion possible passwords... generally we assume the hacker will find the real password about half way through, so call it 1 billion.</p>

<p>If you are using PBKDF2 and have 1,000 iterations, then a hacker with specialised hardware will guess 1 billion passwords in about 20 seconds. That's not very good security at all.</p>

<p>You can improve security by either using more rounds of PBKDF2 (which will slow your website down) or by convincing your users to have better passwords. Simply by switching to 7 digits instead of 6, or by adding upper-case letters or even symbols, they will dramatically improve their security.</p>

<p>Wolfram Alpha is useful for doing the math: <code>((36 ^ 6) / 50 million) seconds</code> where 36 is the size of the alphabet and 6 is the length of the password, and 50 million is the number of guesses per second a hacker can use (50 million is a serious attacker going after PBKDF2 with 1,000 rounds).</p>

<p>How many passwords are there in your database? If it takes 20 seconds to crack individual password, will that me 30 days of math or 30 years? It depends how many customers you have.</p>
","13635","<security><passwords><hash><cracking><pbkdf2>","10","4","4","2013-04-29 13:00:23","","3","2","","","","2012-07-02 17:15:14",""
"2465690","PBKDF2-HMAC-SHA1","<p>To generate a valid pairwise master key for a WPA2 network a router uses the PBKDF2-HMAC-SHA1 algorithm.  I understand that the sha1 function is performed 4096 times to derive the PMK, however I have two questions about the process.</p>

<p>Excuse the pseudo code.</p>

<p>1) How is the input to the first instance of the SHA1 function formatted?
SHA1(""network_name""+""network_name_length""+""network_password"")</p>

<p>Is it formatted in that order, is it the hex value of the network name, length and password or straight ASCII?</p>

<p>Then from what I gather the 160 bit digest received is fed straight into another round of hashing without any additional salting.  Like this: SHA1(""160bit digest from last round of hashing"") Rise and repeat.</p>

<p>2) Once this occurs 4096 times 256 bits of the output is used as the pairwise master key.  What I don't understand is that if SHA1 produces 160bit output, how does the algorithm arrive at the 256bits required for a key?</p>

<p>Thanks for the help.</p>
","<p>yeah thats right, the algorithm to generate a binary key for a WPA network is:</p>

<p>key = PBKDF2(passphrase, ssid, 4096, 256)</p>

<p>PBKDF2 is described in <a href=""http://www.ietf.org/rfc/rfc2898.txt"" rel=""noreferrer"">http://www.ietf.org/rfc/rfc2898.txt</a></p>

<p>It uses the HMAC algorithm to create a digest of the input. HMAC can use any hash function, here the spec calls for SHA1 as you mentioned. The hash is done on an intermediate state within the HMAC algorithm:</p>

<pre><code>H(K XOR opad, H(K XOR ipad, text))
</code></pre>

<p>(H=the chosen hash function, K is the passphrase, text would be ssid)</p>

<p>This HMAC process is repeated 4096 times by PBKDF2.</p>

<p>HMAC algorithm: <a href=""http://www.ietf.org/rfc/rfc2104"" rel=""noreferrer"">http://www.ietf.org/rfc/rfc2104</a></p>

<p>There's a source example here of deriving a key:</p>

<p><a href=""https://www.codeblog.org/viewsrc/openssl-engine-0.9.6a/crypto/evp/p5_crpt2.c"" rel=""noreferrer"">https://www.codeblog.org/viewsrc/openssl-engine-0.9.6a/crypto/evp/p5_crpt2.c</a></p>

<pre><code>int PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,
   80:                            unsigned char *salt, int saltlen, int iter,
   81:                            int keylen, unsigned char *out)
</code></pre>

<p>salt is the SSID, pass is the password.</p>
","13062","<sha1><hmac><pbkdf2>","9","8","1","2010-03-17 21:09:24","","0","4","","","","2010-03-17 20:35:56",""
"17218089","SALT and HASH using pbkdf2","<p>I am using the following methods to create a salted and hashed password from the crypto lib in nodejs:</p>

<pre><code>crypto.randomBytes(size, [callback])
crypto.pbkdf2(password, salt, iterations, keylen, callback)
</code></pre>

<p>For the randomBytes call (creating the SALT) what size should I use? I have heard 128-bit salts, maybe up to 256-bit. It looks like this function uses a size in bytes so can I assume a size of 32 (256 bits) is sufficient?</p>

<p>For the pbkdf2 call, what is a good number of iterations and what is a good length for the key (keylen)?</p>

<p>Also, for storage I have seen examples of storing the salt, length, iterations and derviedkey in the same column. I am using an example which separates the 4 by <code>::</code>, i.e.:</p>

<pre><code>salt::derivedKey::keyLength::iterations
</code></pre>

<p>Doing this, I can then separate on <code>::</code> to get the 4 values, so I can generate a derived key based on a provided password to see if it matches. Is this the correct way to store this? Or should I be a little more ""deceptive"" in combining these values?</p>
","<p><strong>1. Random bytes size</strong>: </p>

<p>Salts should be at least the same size as your hash function, so for <code>sha256</code> you should use at least 32 bytes. Node.js Crypto's <code>pbkdf2</code> uses <code>SHA1</code>, so 20 bytes should be the minimum. However, the least you should use is <strong>64 bits (8 bytes)</strong>, as explained in #3. (Source: <a href=""https://crackstation.net/hashing-security.htm"" rel=""noreferrer"">https://crackstation.net/hashing-security.htm</a>).</p>

<p><strong>2. PBKDF2 number of iterations</strong>: </p>

<p>See <a href=""https://security.stackexchange.com/questions/3959/recommended-of-iterations-when-using-pkbdf2-sha256"">this question</a> for a great discussion. I took from it that <strong>10.000 range</strong> is sufficient without impact performance, but this is hardware/performance dependant.</p>

<p><strong>3. PBKDF2 length</strong>:</p>

<p>See <a href=""https://security.stackexchange.com/questions/31564/key-length-and-hash-function-in-pbkdf2"">this other discussion</a> about key lengths. The parameter is again the hashing function used, in your case SHA-1, so 20 bytes is the correct value. Since <a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""noreferrer"">PBKDF2's Standard</a> recommends salts of at least <strong>64 bits</strong>, it's a waste to generate keys smaller than your input, so use at least <strong>8 bytes</strong>. Do not use output length of greater than 20, as it provides no additional security, but doubles computation time for each multiple of 20.</p>

<p><strong>4. How to store variables</strong>:</p>

<p>Discussed in all the links above (especially <a href=""https://crackstation.net/hashing-security.htm"" rel=""noreferrer"">the first</a>), salts should be saved along passwords (but never reused elsewhere), usually by appending it first in the resulting string (salt:hash), or in another database column. </p>

<p>As far as other variables, their knowledge is not critical for breaching security (as stated in <a href=""https://en.wikipedia.org/wiki/Kerckhoffs%27s_principle"" rel=""noreferrer"">Kerckhoffs's Principle</a>, so you could parametrize it safely anywhere. Your way of doing it by separating them with ""::"" is fine, <em>but you are saving extra information</em>. <a href=""https://crackstation.net/hashing-security.htm"" rel=""noreferrer"">Crackstation's codes</a> only save <code>""algorithm:iterations:salt:hash""</code>, so in your case, <strong><code>""salt::derivedKey::iterations""</code></strong> is all you need.</p>
","12127","<node.js><passwords><pbkdf2><password-storage>","23","27","2","2016-06-01 20:51:09","19526326","0","13","412353","","2013-10-22 20:10:08","2013-06-20 15:45:46",""
"17218089","SALT and HASH using pbkdf2","<p>I am using the following methods to create a salted and hashed password from the crypto lib in nodejs:</p>

<pre><code>crypto.randomBytes(size, [callback])
crypto.pbkdf2(password, salt, iterations, keylen, callback)
</code></pre>

<p>For the randomBytes call (creating the SALT) what size should I use? I have heard 128-bit salts, maybe up to 256-bit. It looks like this function uses a size in bytes so can I assume a size of 32 (256 bits) is sufficient?</p>

<p>For the pbkdf2 call, what is a good number of iterations and what is a good length for the key (keylen)?</p>

<p>Also, for storage I have seen examples of storing the salt, length, iterations and derviedkey in the same column. I am using an example which separates the 4 by <code>::</code>, i.e.:</p>

<pre><code>salt::derivedKey::keyLength::iterations
</code></pre>

<p>Doing this, I can then separate on <code>::</code> to get the 4 values, so I can generate a derived key based on a provided password to see if it matches. Is this the correct way to store this? Or should I be a little more ""deceptive"" in combining these values?</p>
","<p>Fernando is mostly correct, but beware that #3 is mis-sourced. The recommended salt length is 64 <strong>bits</strong>, not bytes.</p>

<p>Using 64 bytes for the derived key is acceptable, but would be overkill for the salt alone.</p>
","12127","<node.js><passwords><pbkdf2><password-storage>","23","3","2","2016-06-01 20:51:09","19526326","0","13","412353","","2013-10-22 20:10:08","2013-06-20 15:45:46",""
"8091519","PBKDF2 function in Android","<p>Is there PBKDF2 implementation for Android. I am trying to derive a key using PBKDF2 function. I couldn't find an example to do so.</p>
","<p>Free options would be:</p>

<ul>
<li><a href=""http://rtner.de/software/PBKDF2.html"">http://rtner.de/software/PBKDF2.html</a></li>
<li><a href=""http://bouncycastle.org/"">http://bouncycastle.org/</a> (that might be newer than some Android-bundled <code>org.bouncycastle</code>)</li>
<li><a href=""http://www.unwesen.de/2011/06/12/encryption-on-android-bouncycastle/"">http://www.unwesen.de/2011/06/12/encryption-on-android-bouncycastle/</a></li>
<li><a href=""https://github.com/rtyley/spongycastle#readme"">https://github.com/rtyley/spongycastle#readme</a></li>
</ul>

<p>IF a commercial component is an option see for example <a href=""http://www.chilkatsoft.com/java-encryption.asp"">http://www.chilkatsoft.com/java-encryption.asp</a> (sample code <a href=""http://www.example-code.com/android/crypt2_pbkdf2.asp"">http://www.example-code.com/android/crypt2_pbkdf2.asp</a>).</p>

<p>Another option is to use <code>javax.crypto</code> and implement it yourself although I wouldn't recommend that...</p>
","11881","<android><pbkdf2>","12","10","2","2013-04-02 17:18:04","8091630","0","5","","","","2011-11-11 08:45:40",""
"8091519","PBKDF2 function in Android","<p>Is there PBKDF2 implementation for Android. I am trying to derive a key using PBKDF2 function. I couldn't find an example to do so.</p>
","<p>Late to the party, but a lot of Android devices DO include PBKDF2 with the standard SecretKeyFactory. However, a lot of people recommend using something like Spongycastle to guarantee that you'll have that algorithm available. </p>

<p>It does throw an exception if it can't find one</p>

<pre><code>    SecretKeyFactory keyFactory = null;
    try
    {
        keyFactory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    } 
    catch (NoSuchAlgorithmException e)
</code></pre>
","11881","<android><pbkdf2>","12","14","2","2013-04-02 17:18:04","8091630","0","5","","","","2011-11-11 08:45:40",""
"11734495","How to properly store a PBKDF2 password hash","<p>I have been doing some research for proper ways to hash/encrypt a password and store it in a database. I knew about Salt and Hashing so I looked around and PBKDF2 seemed to be a good choice. So I've found <a href=""http://crackstation.net/hashing-security.htm"" rel=""noreferrer"">this website</a> that gave a good tutorial on it as well as an adaptation of PBKDF2 for PHP (which is what I am using for my website). </p>

<p>So I've set up my website to use these functions to generate/create passwords, but as you can see in the following code:</p>

<blockquote>
<pre><code>function create_hash($password) {
// format: algorithm:iterations:salt:hash
$salt = base64_encode(mcrypt_create_iv(PBKDF2_SALT_BYTES, MCRYPT_DEV_URANDOM));
return PBKDF2_HASH_ALGORITHM . "":"" . PBKDF2_ITERATIONS . "":"" .  $salt . "":"" .
    base64_encode(pbkdf2(
        PBKDF2_HASH_ALGORITHM,
        $password,
        $salt,
        PBKDF2_ITERATIONS,
        PBKDF2_HASH_BYTES,
        true
    )); }
</code></pre>
</blockquote>

<p>The salt is generated in the create_hash function, and is stored in the resulting hash which ends up looking like sha256:1000:salt:hashed_password. This is what I had to store in my database, and since the salt was included in the resulting hash, I didn't need to add it to my database. However, after generating a few test users with this, I wondered if having the PBKDF2 settings inside my hashed password in the database was actually a good thing. They way my newbie self see it is a hacker, after cracking my database, would see these bunch of sha256:1000:salt:password things, and figure out what each part would stand for, which would help him greatly in his attempts, no?</p>

<p>So I modified it a bit to have an external salt that I generate and store in my database, and include the salt in the password before running it through PBKDF2. I then do the same thing to compare the given password with what I have in my database for the login, and it works. My only concern is that a with 128bit salt, the resulting password hash is barely 50 characters long, that doesn't seem right to me.</p>

<p>Here is my current code:</p>

<pre><code>define(""PBKDF2_HASH_ALGORITHM"", ""sha256"");
define(""PBKDF2_ITERATIONS"", 10000);
define(""PBKDF2_SALT_BYTES"", 128);
define(""PBKDF2_HASH_BYTES"", 24);

define(""HASH_SECTIONS"", 4);
define(""HASH_ALGORITHM_INDEX"", 0);
define(""HASH_ITERATION_INDEX"", 1);
define(""HASH_SALT_INDEX"", 2);
define(""HASH_PBKDF2_INDEX"", 3);

function create_hash($password, $salt)
{
    // format: salthash
    return  
        base64_encode(pbkdf2(
            PBKDF2_HASH_ALGORITHM,
            $password,
            $salt,
            PBKDF2_ITERATIONS,
            PBKDF2_HASH_BYTES,
            true
        ));
}

function validate_password($password, $salt, $good_hash)
{
    $pbkdf2 = base64_decode($good_hash);
    return slow_equals(
        $pbkdf2,
        pbkdf2(
            PBKDF2_HASH_ALGORITHM,
            $password,
            $salt,
            PBKDF2_ITERATIONS,
            PBKDF2_HASH_BYTES,
            true
        )
    );
}

// Compares two strings $a and $b in length-constant time.
function slow_equals($a, $b)
{
    $diff = strlen($a) ^ strlen($b);
    for($i = 0; $i &lt; strlen($a) &amp;&amp; $i &lt; strlen($b); $i++)
    {
        $diff |= ord($a[$i]) ^ ord($b[$i]);
    }
    return $diff === 0; 
}

function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
{
    $algorithm = strtolower($algorithm);
    if(!in_array($algorithm, hash_algos(), true))
        die('PBKDF2 ERROR: Invalid hash algorithm.');
    if($count &lt;= 0 || $key_length &lt;= 0)
        die('PBKDF2 ERROR: Invalid parameters.');

    $hash_length = strlen(hash($algorithm, """", true));
    $block_count = ceil($key_length / $hash_length);

    $output = """";
    for($i = 1; $i &lt;= $block_count; $i++) {
        // $i encoded as 4 bytes, big endian.
        $last = $salt . pack(""N"", $i);
        // first iteration
        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
        // perform the other $count - 1 iterations
        for ($j = 1; $j &lt; $count; $j++) {
            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
        }
        $output .= $xorsum;
    }

    if($raw_output)
        return substr($output, 0, $key_length);
    else
        return bin2hex(substr($output, 0, $key_length));
}
</code></pre>

<p>Is my concern for that format of password saving makes sense? Or will it just amount to the same thing anyway, since by having my salt in my database, once it's cracked, the hacker can still brute-force his way through?</p>

<p>Thanks, and sorry for the long question.</p>
","<blockquote>
  <p>My only concern is that a with 128bit salt, the resulting password
  hash is barely 50 characters long, that doesn't seem right to me.</p>
</blockquote>

<p>The size of the resulting hash is completely unrelated to the size of the salt, the password, and the number of iterations.  The output of a modern secure hash algorithm (like sha256) is <em>always</em> the same length regardless of the input.  A zero length input has the same length output as a 25TB input.</p>

<blockquote>
  <p>Or will it just amount to the same thing anyway, since by having my
  salt in my database, once it's cracked, the hacker can still
  brute-force his way through?</p>
</blockquote>

<p>By separating the salt into two pieces, you cost yourself increased code complexity (generally a bad thing).  Depending on how you store the salt pieces, you may gain a little benefit under some circumstances.  As an example, if the static salt fragment is stored outside of the database, then a dump of the database will not give an attacker enough information to perform an offline attack on the password hashes in the database.</p>

<p>The gain if the salt fragments are stored separately from one-another is a small amount of defence in depth.  Whether it outweighs the complexity cost is a judgement call, but I'd say the chances are good that the time would be better spent looking for XSS and SQL injection vulnerabilities (the way that attackers often <em>get</em> the database dumps mentioned above), and securing connections between the various components of your system with SSL and certificates or strong passwords.</p>
","10649","<php><encryption><hash><passwords><pbkdf2>","6","4","3","2014-11-06 19:14:44","26787598","2","2","","","","2012-07-31 06:41:09",""
"11734495","How to properly store a PBKDF2 password hash","<p>I have been doing some research for proper ways to hash/encrypt a password and store it in a database. I knew about Salt and Hashing so I looked around and PBKDF2 seemed to be a good choice. So I've found <a href=""http://crackstation.net/hashing-security.htm"" rel=""noreferrer"">this website</a> that gave a good tutorial on it as well as an adaptation of PBKDF2 for PHP (which is what I am using for my website). </p>

<p>So I've set up my website to use these functions to generate/create passwords, but as you can see in the following code:</p>

<blockquote>
<pre><code>function create_hash($password) {
// format: algorithm:iterations:salt:hash
$salt = base64_encode(mcrypt_create_iv(PBKDF2_SALT_BYTES, MCRYPT_DEV_URANDOM));
return PBKDF2_HASH_ALGORITHM . "":"" . PBKDF2_ITERATIONS . "":"" .  $salt . "":"" .
    base64_encode(pbkdf2(
        PBKDF2_HASH_ALGORITHM,
        $password,
        $salt,
        PBKDF2_ITERATIONS,
        PBKDF2_HASH_BYTES,
        true
    )); }
</code></pre>
</blockquote>

<p>The salt is generated in the create_hash function, and is stored in the resulting hash which ends up looking like sha256:1000:salt:hashed_password. This is what I had to store in my database, and since the salt was included in the resulting hash, I didn't need to add it to my database. However, after generating a few test users with this, I wondered if having the PBKDF2 settings inside my hashed password in the database was actually a good thing. They way my newbie self see it is a hacker, after cracking my database, would see these bunch of sha256:1000:salt:password things, and figure out what each part would stand for, which would help him greatly in his attempts, no?</p>

<p>So I modified it a bit to have an external salt that I generate and store in my database, and include the salt in the password before running it through PBKDF2. I then do the same thing to compare the given password with what I have in my database for the login, and it works. My only concern is that a with 128bit salt, the resulting password hash is barely 50 characters long, that doesn't seem right to me.</p>

<p>Here is my current code:</p>

<pre><code>define(""PBKDF2_HASH_ALGORITHM"", ""sha256"");
define(""PBKDF2_ITERATIONS"", 10000);
define(""PBKDF2_SALT_BYTES"", 128);
define(""PBKDF2_HASH_BYTES"", 24);

define(""HASH_SECTIONS"", 4);
define(""HASH_ALGORITHM_INDEX"", 0);
define(""HASH_ITERATION_INDEX"", 1);
define(""HASH_SALT_INDEX"", 2);
define(""HASH_PBKDF2_INDEX"", 3);

function create_hash($password, $salt)
{
    // format: salthash
    return  
        base64_encode(pbkdf2(
            PBKDF2_HASH_ALGORITHM,
            $password,
            $salt,
            PBKDF2_ITERATIONS,
            PBKDF2_HASH_BYTES,
            true
        ));
}

function validate_password($password, $salt, $good_hash)
{
    $pbkdf2 = base64_decode($good_hash);
    return slow_equals(
        $pbkdf2,
        pbkdf2(
            PBKDF2_HASH_ALGORITHM,
            $password,
            $salt,
            PBKDF2_ITERATIONS,
            PBKDF2_HASH_BYTES,
            true
        )
    );
}

// Compares two strings $a and $b in length-constant time.
function slow_equals($a, $b)
{
    $diff = strlen($a) ^ strlen($b);
    for($i = 0; $i &lt; strlen($a) &amp;&amp; $i &lt; strlen($b); $i++)
    {
        $diff |= ord($a[$i]) ^ ord($b[$i]);
    }
    return $diff === 0; 
}

function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
{
    $algorithm = strtolower($algorithm);
    if(!in_array($algorithm, hash_algos(), true))
        die('PBKDF2 ERROR: Invalid hash algorithm.');
    if($count &lt;= 0 || $key_length &lt;= 0)
        die('PBKDF2 ERROR: Invalid parameters.');

    $hash_length = strlen(hash($algorithm, """", true));
    $block_count = ceil($key_length / $hash_length);

    $output = """";
    for($i = 1; $i &lt;= $block_count; $i++) {
        // $i encoded as 4 bytes, big endian.
        $last = $salt . pack(""N"", $i);
        // first iteration
        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
        // perform the other $count - 1 iterations
        for ($j = 1; $j &lt; $count; $j++) {
            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
        }
        $output .= $xorsum;
    }

    if($raw_output)
        return substr($output, 0, $key_length);
    else
        return bin2hex(substr($output, 0, $key_length));
}
</code></pre>

<p>Is my concern for that format of password saving makes sense? Or will it just amount to the same thing anyway, since by having my salt in my database, once it's cracked, the hacker can still brute-force his way through?</p>

<p>Thanks, and sorry for the long question.</p>
","<p>A couple of things, one, instead of SHA256, you should be using a slow hashing function such as bcrypt, two, you should probably not be storing passwords at all (instead use openId or something similar).</p>

<p>All of that said, you need a different salt for each user, you can store them in the same row or even (as you are doing) the same field, or in an entirely different db.  How much effort you're willing to go to is really up to you and your performance requirements.</p>

<p>In addition to the individual salt for each user/password, you might also consider a per application salt, which is kept out of the any database.</p>
","10649","<php><encryption><hash><passwords><pbkdf2>","6","0","3","2014-11-06 19:14:44","26787598","2","2","","","","2012-07-31 06:41:09",""
"11734495","How to properly store a PBKDF2 password hash","<p>I have been doing some research for proper ways to hash/encrypt a password and store it in a database. I knew about Salt and Hashing so I looked around and PBKDF2 seemed to be a good choice. So I've found <a href=""http://crackstation.net/hashing-security.htm"" rel=""noreferrer"">this website</a> that gave a good tutorial on it as well as an adaptation of PBKDF2 for PHP (which is what I am using for my website). </p>

<p>So I've set up my website to use these functions to generate/create passwords, but as you can see in the following code:</p>

<blockquote>
<pre><code>function create_hash($password) {
// format: algorithm:iterations:salt:hash
$salt = base64_encode(mcrypt_create_iv(PBKDF2_SALT_BYTES, MCRYPT_DEV_URANDOM));
return PBKDF2_HASH_ALGORITHM . "":"" . PBKDF2_ITERATIONS . "":"" .  $salt . "":"" .
    base64_encode(pbkdf2(
        PBKDF2_HASH_ALGORITHM,
        $password,
        $salt,
        PBKDF2_ITERATIONS,
        PBKDF2_HASH_BYTES,
        true
    )); }
</code></pre>
</blockquote>

<p>The salt is generated in the create_hash function, and is stored in the resulting hash which ends up looking like sha256:1000:salt:hashed_password. This is what I had to store in my database, and since the salt was included in the resulting hash, I didn't need to add it to my database. However, after generating a few test users with this, I wondered if having the PBKDF2 settings inside my hashed password in the database was actually a good thing. They way my newbie self see it is a hacker, after cracking my database, would see these bunch of sha256:1000:salt:password things, and figure out what each part would stand for, which would help him greatly in his attempts, no?</p>

<p>So I modified it a bit to have an external salt that I generate and store in my database, and include the salt in the password before running it through PBKDF2. I then do the same thing to compare the given password with what I have in my database for the login, and it works. My only concern is that a with 128bit salt, the resulting password hash is barely 50 characters long, that doesn't seem right to me.</p>

<p>Here is my current code:</p>

<pre><code>define(""PBKDF2_HASH_ALGORITHM"", ""sha256"");
define(""PBKDF2_ITERATIONS"", 10000);
define(""PBKDF2_SALT_BYTES"", 128);
define(""PBKDF2_HASH_BYTES"", 24);

define(""HASH_SECTIONS"", 4);
define(""HASH_ALGORITHM_INDEX"", 0);
define(""HASH_ITERATION_INDEX"", 1);
define(""HASH_SALT_INDEX"", 2);
define(""HASH_PBKDF2_INDEX"", 3);

function create_hash($password, $salt)
{
    // format: salthash
    return  
        base64_encode(pbkdf2(
            PBKDF2_HASH_ALGORITHM,
            $password,
            $salt,
            PBKDF2_ITERATIONS,
            PBKDF2_HASH_BYTES,
            true
        ));
}

function validate_password($password, $salt, $good_hash)
{
    $pbkdf2 = base64_decode($good_hash);
    return slow_equals(
        $pbkdf2,
        pbkdf2(
            PBKDF2_HASH_ALGORITHM,
            $password,
            $salt,
            PBKDF2_ITERATIONS,
            PBKDF2_HASH_BYTES,
            true
        )
    );
}

// Compares two strings $a and $b in length-constant time.
function slow_equals($a, $b)
{
    $diff = strlen($a) ^ strlen($b);
    for($i = 0; $i &lt; strlen($a) &amp;&amp; $i &lt; strlen($b); $i++)
    {
        $diff |= ord($a[$i]) ^ ord($b[$i]);
    }
    return $diff === 0; 
}

function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
{
    $algorithm = strtolower($algorithm);
    if(!in_array($algorithm, hash_algos(), true))
        die('PBKDF2 ERROR: Invalid hash algorithm.');
    if($count &lt;= 0 || $key_length &lt;= 0)
        die('PBKDF2 ERROR: Invalid parameters.');

    $hash_length = strlen(hash($algorithm, """", true));
    $block_count = ceil($key_length / $hash_length);

    $output = """";
    for($i = 1; $i &lt;= $block_count; $i++) {
        // $i encoded as 4 bytes, big endian.
        $last = $salt . pack(""N"", $i);
        // first iteration
        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
        // perform the other $count - 1 iterations
        for ($j = 1; $j &lt; $count; $j++) {
            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
        }
        $output .= $xorsum;
    }

    if($raw_output)
        return substr($output, 0, $key_length);
    else
        return bin2hex(substr($output, 0, $key_length));
}
</code></pre>

<p>Is my concern for that format of password saving makes sense? Or will it just amount to the same thing anyway, since by having my salt in my database, once it's cracked, the hacker can still brute-force his way through?</p>

<p>Thanks, and sorry for the long question.</p>
","<p>Answering my own question with a comment from @Romain.</p>

<blockquote>
  <p>See these answers for a good understanding of how useless hiding a
  salt is <a href=""https://stackoverflow.com/questions/213380/the-necessity-of-hiding-the-salt-for-a-hash/215165#215165"">here</a>, using bcrypt (since in your link no implementation
  is given) <a href=""https://stackoverflow.com/questions/4795385/how-do-you-use-bcrypt-for-hashing-passwords-in-php"">here</a>, and best practices on how to use hash to secure
  passwords <a href=""https://stackoverflow.com/questions/401656/secure-hash-and-salt-for-php-passwords?answertab=votes#tab-top"">here</a>. Finally, never underestimate your opponent!</p>
</blockquote>

<p>Also, (since this is a bit old), bcrypt is indeed ""better"" than pbkdf2, but scrypt is even better!</p>
","10649","<php><encryption><hash><passwords><pbkdf2>","6","2","3","2014-11-06 19:14:44","26787598","2","2","","","","2012-07-31 06:41:09",""
"1473324","Is there a standard for using PBKDF2 as a password hash?","<p>Join me in the fight against weak password hashes.</p>

<p>A PBKDF2 password hash should contain the salt, the number of iterations, and the hash itself so it's possible to verify later. Is there a standard format, like RFC2307's {SSHA}, for PBKDF2 password hashes? BCRYPT is great but PBKDF2 is easier to implement.</p>

<p>Apparently, there's no spec. So here's my spec.</p>

<pre><code>&gt;&gt;&gt; from base64 import urlsafe_b64encode
&gt;&gt;&gt; password = u""hashy the \N{SNOWMAN}""
&gt;&gt;&gt; salt = urlsafe_b64decode('s8MHhEQ78sM=')
&gt;&gt;&gt; encoded = pbkdf2_hash(password, salt=salt)
&gt;&gt;&gt; encoded
'{PBKDF2}1000$s8MHhEQ78sM=$hcKhCiW13OVhmLrbagdY-RwJvkA='
</code></pre>

<p>Update: <a href=""http://www.dlitz.net/software/python-pbkdf2/"" rel=""noreferrer"">http://www.dlitz.net/software/python-pbkdf2/</a> defines a <code>crypt()</code> replacement. I updated my little spec to match his, except his starts with <code>$p5k2$</code> instead of <code>{PBKDF2}</code>. (I have the need to migrate away from other LDAP-style {SCHEMES}).</p>

<p>That's <code>{PBKDF2}</code>, the number of iterations in lowercase hexadecimal, <code>$</code>, the <code>urlsafe_base64</code> encoded salt, <code>$</code>, and the <code>urlsafe_base64</code> encoded PBKDF2 output. The salt should be 64 bits, the number of iterations should be at least 1000, and the PBKDF2 with HMAC-SHA1 output can be any length. In my implementation it is always 20 bytes (the length of a SHA-1 hash) by default.</p>

<p>The password must be encoded to utf-8 before being sent through PBKDF2. No word on whether it should be normalized into Unicode's NFC.</p>

<p>This scheme should be on the order of <code>iterations</code> times more costly to brute force than {SSHA}.</p>
","<p>There is a specification for the <em>parameters</em> (salt and iterations) of PBKDF2, but it doesn't include the hash. This is included in <a href=""ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-5v2/pkcs5v2-0.pdf"" rel=""nofollow noreferrer"">PKCS #5 version 2.0</a> (see Appendix A.2). Some platforms have built-in support for encoding and decoding this ASN.1 structure.</p>

<p>Since PBKDF2 is really a key derivation function, it doesn't make sense for it to specify a way to bundle the ""hash"" (which is the really a derived key) together with the derivation parameters&mdash;in normal usage, the key must remain secret, and is never stored. </p>

<p>But for usage as a one-way password hash, the hash can be stored in a record with the parameters, but in its own field.</p>
","8359","<security><hash><pbkdf2>","12","4","2","2013-03-27 02:20:18","1473402","1","4","36330","","2009-10-19 20:44:44","2009-09-24 18:19:36",""
"1473324","Is there a standard for using PBKDF2 as a password hash?","<p>Join me in the fight against weak password hashes.</p>

<p>A PBKDF2 password hash should contain the salt, the number of iterations, and the hash itself so it's possible to verify later. Is there a standard format, like RFC2307's {SSHA}, for PBKDF2 password hashes? BCRYPT is great but PBKDF2 is easier to implement.</p>

<p>Apparently, there's no spec. So here's my spec.</p>

<pre><code>&gt;&gt;&gt; from base64 import urlsafe_b64encode
&gt;&gt;&gt; password = u""hashy the \N{SNOWMAN}""
&gt;&gt;&gt; salt = urlsafe_b64decode('s8MHhEQ78sM=')
&gt;&gt;&gt; encoded = pbkdf2_hash(password, salt=salt)
&gt;&gt;&gt; encoded
'{PBKDF2}1000$s8MHhEQ78sM=$hcKhCiW13OVhmLrbagdY-RwJvkA='
</code></pre>

<p>Update: <a href=""http://www.dlitz.net/software/python-pbkdf2/"" rel=""noreferrer"">http://www.dlitz.net/software/python-pbkdf2/</a> defines a <code>crypt()</code> replacement. I updated my little spec to match his, except his starts with <code>$p5k2$</code> instead of <code>{PBKDF2}</code>. (I have the need to migrate away from other LDAP-style {SCHEMES}).</p>

<p>That's <code>{PBKDF2}</code>, the number of iterations in lowercase hexadecimal, <code>$</code>, the <code>urlsafe_base64</code> encoded salt, <code>$</code>, and the <code>urlsafe_base64</code> encoded PBKDF2 output. The salt should be 64 bits, the number of iterations should be at least 1000, and the PBKDF2 with HMAC-SHA1 output can be any length. In my implementation it is always 20 bytes (the length of a SHA-1 hash) by default.</p>

<p>The password must be encoded to utf-8 before being sent through PBKDF2. No word on whether it should be normalized into Unicode's NFC.</p>

<p>This scheme should be on the order of <code>iterations</code> times more costly to brute force than {SSHA}.</p>
","<p>I'll join you in the fight against weak hashes.</p>

<p>OWASP has a Password Storage Cheat Sheet (<a href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"" rel=""nofollow"">https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet</a>) with some guidance; they recommend 64,000 PBKDF2  iterations minimum as of 2012, doubling every two years (i.e. 90,510 in 2012).</p>

<p>Note that a storing a long, cryptographically random salt per-userid is always basic.</p>

<p>Note that having a widely variable per-userid number of iterations and storing the number of iterations along with the salt will add some complexity to cracking software, and may help preclude certain optimizations.  For instance, ""bob"" gets encrypted with 135817 iterations, while ""alice"" uses 95,121 iterations, i.e. perhaps a minimum of(90510 + RAND(90510)) for 2013.</p>

<p>Note also that all of this is useless if users are allowed to choose weak passwords like ""password"", ""Password1!"", ""P@$$w0rd"", and ""P@$$w0rd123"", all of which will be found by rules based dictionary attacks very quickly indeed (the latter is simply ""password"" with the following rules: uppercase first letter, 1337-speak, add a three digit number to the end).  Take a basic dictionary list (phpbb, for a good, small starter wordlist) and apply rules like this to it, and you'll crack a great many passwords where people try ""clever"" tricks.</p>

<p>Therefore, when checking new passwords, don't just apply ""All four of upper, lower, number, digit, at least 11 characters long"", since ""P@$$w0rd123"" complies with this seemingly very tough rule. Instead, use that basic dictionary list and see if basic rules would crack it (it's a lot simpler than actually trying a crack - you can lower-case your list and their word, and then simply write code like ""if the last 4 characters are a common year, check all but the last four characters against the wordlist"", and ""if the last 3 characters are digits, check all but the last 3 characters against the wordlist"" and ""check all but the last two characters against the wordlist"" and ""De-1337 the password - turn @'s into a, 3 into e, and so on, and then check it against the wordlist and try those other rules too.""</p>

<p>As far as passphrases go, in general are a great idea, particularly if some other characters are added to the middle of words, but if and only if they're long enough, since you're giving up a lot of possible combinations.</p>

<p>Note that modern machines with GPU's are up to the tens of billions of hash iterations (MD5, SHA1, SHA-256, SHA-512, etc.) per second, even in 2012. As far as word combination ""correct horse battery staple"" type passwords, this one is at best a very modest password- it's only 4 all lower case English words of length 7 or less with spaces. So, if we go looking for XKCD style passwords with an 18 billion guess a second setup: A modern small american english dictionary has: 6k words of length 5 or less 21k words of length 7 or less 36k words of length 9 or less 46k words of length 11 or less 49k words of length 13 or less</p>

<p>With an XKCD style passphrase, and without bothering to filter words by popularity (""correct"" vs. ""chair's"" vs. ""dumpier"" vs. ""hemorrhaging"") we have 21k^4, which is only about 2E17 possibilities. With the 18 billion/sec setup (a single machine with 8 GPU's if we're facing a single SHA1 iteration), that's about 4 months to exhaustively search the keyspace. If we had ten such setups, that's about two weeks. If we excluded unlikely words like ""dumpier"", that's a lot faster for a quick first pass.</p>

<p>Now, if you get words out of a ""huge"" linux american english wordlist, like ""Balsamina"" or ""Calvinistically"" (both chosen by using the ""go to row"" feature"", then we'd have 30k words of length 5 or less 115k words of length 7 or less 231k words of length 9 or less 317k words of length 11 or less 362k words of length 13 or less</p>

<p>Even with the 7 length max limit, with this huge dictionary as a base and randomly chosen words, we have 115k^4 ~= 1.8E20 possibilities, or about 12 years if the setup is kept up to date (doubling in power every 18 months). This is extremely similar to a 13 character, lower case + number only password. ""300 years"" is what most estimates will tell you, but they fail to take Moore's Law into account.</p>
","8359","<security><hash><pbkdf2>","12","4","2","2013-03-27 02:20:18","1473402","1","4","36330","","2009-10-19 20:44:44","2009-09-24 18:19:36",""
"1501763","Using MD5 to generate an encryption key from password?","<p>I'm writing a simple program for file encryption. Mostly as an academic exercise but possibly for future serious use. All of the heavy lifting is done with third-party libraries, but putting the pieces together in a secure manner is still quite a challenge for the non-cryptographer. Basically, I've got just about everything working the way I think it should.</p>

<p>I'm using 128-bit AES for the encryption with a 128-bit key length. I want users to be able to enter in variable-length passwords, so I decided to hash the password with MD5 and then use the hash as the key. I figured this was acceptable--the key is always supposed to be a secret, so there's no reason to worry about collision attacks.</p>

<p>Now that I've implemented this, I ran across a couple articles indicating that this is a bad idea. My question is: why? If a good password is chosen, the cipher is supposed to be strong enough on its own to never reveal the key except via an extraordinary (read: currently infeasible) brute-force effort, right? Should I be using something like PBKDF2 to generate the key or is that just overkill for all but the most extreme cryptographic applications?</p>
","<p>Well, as your post is general, let me state a few general things:</p>

<ol>
<li><p>MD5, SHA-0, SHA-1 are all broken hashes, and you should not use them for any cryptographic purpose, use SHA-2.</p></li>
<li><p>You should, generally, use well-known and documented approaches to derriving keys from passwords (you don't mention what language, please say which one you are using).</p></li>
<li><p>When doing any sort of security programming, the most important thing to do is, before you do anything, strictly document your 'threat model'. This is basically a listing of all the attacks you are trying to prevent, and how you will do it, and also what sort attacks you can't prevent against. It's quite fun to do, and you'll get to learn about all the attacks and other interesting things.</p></li>
</ol>
","8028","<key><md5><aes><pbkdf2>","5","1","3","2010-03-20 01:25:55","1501819","1","1","","","","2009-10-01 03:32:46",""
"1501763","Using MD5 to generate an encryption key from password?","<p>I'm writing a simple program for file encryption. Mostly as an academic exercise but possibly for future serious use. All of the heavy lifting is done with third-party libraries, but putting the pieces together in a secure manner is still quite a challenge for the non-cryptographer. Basically, I've got just about everything working the way I think it should.</p>

<p>I'm using 128-bit AES for the encryption with a 128-bit key length. I want users to be able to enter in variable-length passwords, so I decided to hash the password with MD5 and then use the hash as the key. I figured this was acceptable--the key is always supposed to be a secret, so there's no reason to worry about collision attacks.</p>

<p>Now that I've implemented this, I ran across a couple articles indicating that this is a bad idea. My question is: why? If a good password is chosen, the cipher is supposed to be strong enough on its own to never reveal the key except via an extraordinary (read: currently infeasible) brute-force effort, right? Should I be using something like PBKDF2 to generate the key or is that just overkill for all but the most extreme cryptographic applications?</p>
","<p>This article on <a href=""http://en.wikipedia.org/wiki/Key_strengthening"" rel=""nofollow noreferrer"">Key strengthening</a> might help you. Basically you want to make the key stronger (more entropy than in a password) and make its derivation from the password reliably time consuming.</p>
","8028","<key><md5><aes><pbkdf2>","5","4","3","2010-03-20 01:25:55","1501819","1","1","","","","2009-10-01 03:32:46",""
"1501763","Using MD5 to generate an encryption key from password?","<p>I'm writing a simple program for file encryption. Mostly as an academic exercise but possibly for future serious use. All of the heavy lifting is done with third-party libraries, but putting the pieces together in a secure manner is still quite a challenge for the non-cryptographer. Basically, I've got just about everything working the way I think it should.</p>

<p>I'm using 128-bit AES for the encryption with a 128-bit key length. I want users to be able to enter in variable-length passwords, so I decided to hash the password with MD5 and then use the hash as the key. I figured this was acceptable--the key is always supposed to be a secret, so there's no reason to worry about collision attacks.</p>

<p>Now that I've implemented this, I ran across a couple articles indicating that this is a bad idea. My question is: why? If a good password is chosen, the cipher is supposed to be strong enough on its own to never reveal the key except via an extraordinary (read: currently infeasible) brute-force effort, right? Should I be using something like PBKDF2 to generate the key or is that just overkill for all but the most extreme cryptographic applications?</p>
","<p>The answer to your new question is: you should definitely be using something like PBKDF2 to generate the key. </p>

<p>I assume you are going to have a password (at least 10 chars upper lower numbers and punctuation right?) that will then generate an AES-256 key. The key will be used to encrypt/decrypt the file(s). You want to use something like PBKDF2 in order to decrease the ability for someone who gets your file to figure out your key/password through brute force attacks. Using something like PBKDF2 (and a random salt!) increases the cost of breaking the encryption on the file.</p>

<p>What I <em>really</em> recommend is that you use this as a toy and <em>not</em> to protect something you really care about. If you are not a security expert, you are going to make mistakes, even the experts (and lots of them together) make mistakes: <a href=""http://www.sslshopper.com/article-ssl-and-tls-renegotiation-vulnerability-discovered.html"" rel=""nofollow noreferrer"">http://www.sslshopper.com/article-ssl-and-tls-renegotiation-vulnerability-discovered.html</a></p>
","8028","<key><md5><aes><pbkdf2>","5","0","3","2010-03-20 01:25:55","1501819","1","1","","","","2009-10-01 03:32:46",""
"20047418","PBKDF2 with HMAC in Java","<p>I am working on a Java project where I must ensure the confidentiality and integrity of users password saved in a plaintext file. </p>

<p>To do so, I will write only a hash of the password in the file. More specifically, my intention is to write the hash of the password and a random salt, plus the random salt itself, to avoid the use of rainbow and lookup tables. I also want to use key-stretching with PBKDF2, to make the computation of the hash computationally expensive. 
Finally, I would like to use a keyed hash algorithm, HMAC, for a final layer of protection.</p>

<p>I am trying to implement my thoughts in a Java code, and I have found some examples of the operations that I have presented above:</p>

<pre><code>private static byte[] pbkdf2(char[] password, byte[] salt, int iterations, int bytes)
    throws NoSuchAlgorithmException, InvalidKeySpecException
{
    PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, bytes * 8);
    SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    return skf.generateSecret(spec).getEncoded();
}
</code></pre>

<p>The thing that I really cannot understand is how to input my secret key as the key used by the HMAC algorithm, as it doesn't seem an input to the function. I have looked through the Java documentation, but I cannot find a solution to my question.</p>

<p>At this point, I am not really sure if I understood correctly how the different part of the encryption mechanism work, so I would accept any help on the topic.</p>
","<p>I think I see the confusion. You're apparently expecting your code to apply PBKDF2 then HMAC-SHA-1. That's not how it works: HMAC-SHA-1 is used inside PBKDF2.</p>

<p>The gist of <a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow noreferrer"">PBKDF2</a> is to apply a function repeatedly which has the following properties:</p>

<ul>
<li>it takes two arguments;</li>
<li>it returns a fixed-size value;</li>
<li>it is practically undistinguishable from a pseudo-random function.</li>
</ul>

<p>HMAC-SHA-1 is such a function, and a common choice. There are other variants of PBKDF2, using HMAC-MD5, HMAC-SHA-256, or other functions (but these variants aren't in the basic Java library).</p>

<p>PBKDF2 takes two data inputs (plus some configuration inputs): the password, and a salt. If you want to include a secret value in the calculation, PBKDF2's input is the place for it: don't tack on a custom scheme on top of that (doing your own crypto is a recipe for doing it wrong). Append the <a href=""https://security.stackexchange.com/questions/41754/what-is-the-purpose-of-a-pepper"">pepper</a> (secret value common to all accounts) to the salt (public value that varies between accounts).</p>

<p>Note that <a href=""https://security.stackexchange.com/questions/3272/password-hashing-add-salt-pepper-or-is-salt-enough"">pepper is of limited usefulness</a>. It's only useful if the hashes and the pepper secret value are stored in different places — for example, if the hashes are in a database and the pepper is in a disk file that is not directly vulnerable to SQL injection attacks.</p>
","7997","<passwords><java><password-policy><pbkdf2><hmac>","5","12","1","2013-11-18 12:07:13","20047419","1","1","","","","2013-11-08 15:22:43",""
"7092977",".NET: Difference between PasswordDeriveBytes and Rfc2898DeriveBytes","<p>I'm trying to understand some C#-code, I have been handed, which deals with cryptography, and specifically uses <code>PasswordDeriveBytes</code> from <code>System.Security.Cryptography</code>.</p>

<p>In the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.passwordderivebytes.aspx"">.NET docs</a> , it says that <code>PasswordDeriveBytes</code> uses ""an extension of the PBKDF1 algorithm"" which is later in the document specified as ""the PKCS#5 v2.0 standard"", which is PBKDF2 (as far as I can tell). Everywhere on the net I've found (including here on Stack Exchange), though, everyone says ""use Rfc2898DeriveBytes, cause Password* is deprecated and uses PBKDF1"". But the only difference in the docs at <a href=""http://msdn.microsoft.com"">msdn.microsoft.com</a> seems to be that the Rfc*-version specifically mentions PBKDF2, where Password* says ""extension of PBKDF1"" and ""PKCS#5 v 2.0"". </p>

<p>So, can anyone tell me what the difference is between the two classes (if any) and why I should use one rather than the other for PBKDF2 password key derivation?</p>

<p>Now, other code, that deals with the same data, explicitly uses PBKDF2, and works, so that would suggest that indeed <code>PasswordDeriveBytes</code> also uses PBKDF2, or that PBKDF2 is simply compatible with PBKDF1 under certain circumstances, but I want to know for sure that it's not some side effect of some random thing, and that things just magically works (and eventually probably will magically and spectacularly break) without anyone really understanding why.</p>
","<p><a href=""http://www.ietf.org/rfc/rfc2898.txt"" rel=""nofollow"">PKCS#5 v2.0</a> defines both PBKDF1 and PBKDF2, the former for reasons of backwards compatibility and <em>also</em> recommends you use PBKDF2 for new applications. I've no idea why the latter is better than the former, but the two .NET classes do seem to use different but interoperable algorithms. (Possibly because only the resulting key is being exchanged, not the inputs + KDF.)</p>
","7435","<c#><.net><pbkdf2><pkcs#5>","11","0","4","2017-06-12 17:37:21","","0","4","145307","","2011-08-17 14:55:02","2011-08-17 12:42:13",""
"7092977",".NET: Difference between PasswordDeriveBytes and Rfc2898DeriveBytes","<p>I'm trying to understand some C#-code, I have been handed, which deals with cryptography, and specifically uses <code>PasswordDeriveBytes</code> from <code>System.Security.Cryptography</code>.</p>

<p>In the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.passwordderivebytes.aspx"">.NET docs</a> , it says that <code>PasswordDeriveBytes</code> uses ""an extension of the PBKDF1 algorithm"" which is later in the document specified as ""the PKCS#5 v2.0 standard"", which is PBKDF2 (as far as I can tell). Everywhere on the net I've found (including here on Stack Exchange), though, everyone says ""use Rfc2898DeriveBytes, cause Password* is deprecated and uses PBKDF1"". But the only difference in the docs at <a href=""http://msdn.microsoft.com"">msdn.microsoft.com</a> seems to be that the Rfc*-version specifically mentions PBKDF2, where Password* says ""extension of PBKDF1"" and ""PKCS#5 v 2.0"". </p>

<p>So, can anyone tell me what the difference is between the two classes (if any) and why I should use one rather than the other for PBKDF2 password key derivation?</p>

<p>Now, other code, that deals with the same data, explicitly uses PBKDF2, and works, so that would suggest that indeed <code>PasswordDeriveBytes</code> also uses PBKDF2, or that PBKDF2 is simply compatible with PBKDF1 under certain circumstances, but I want to know for sure that it's not some side effect of some random thing, and that things just magically works (and eventually probably will magically and spectacularly break) without anyone really understanding why.</p>
","<p>Here's a blog post detailing the differences:</p>

<p><a href=""http://blogs.msdn.com/b/shawnfa/archive/2004/04/14/generating-a-key-from-a-password.aspx"" rel=""nofollow"">http://blogs.msdn.com/b/shawnfa/archive/2004/04/14/generating-a-key-from-a-password.aspx</a></p>

<p>PBKDF2 can be used to generate keys of any length, which is very useful for password-based <strong>encryption</strong> (it can generate any key length as required by the symmetric cipher) but means less for secure password storage. It also applies the salt using HMAC instead of concatenation like PBKDF1, which has better security properties in cases of weak salts.</p>
","7435","<c#><.net><pbkdf2><pkcs#5>","11","1","4","2017-06-12 17:37:21","","0","4","145307","","2011-08-17 14:55:02","2011-08-17 12:42:13",""
"7092977",".NET: Difference between PasswordDeriveBytes and Rfc2898DeriveBytes","<p>I'm trying to understand some C#-code, I have been handed, which deals with cryptography, and specifically uses <code>PasswordDeriveBytes</code> from <code>System.Security.Cryptography</code>.</p>

<p>In the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.passwordderivebytes.aspx"">.NET docs</a> , it says that <code>PasswordDeriveBytes</code> uses ""an extension of the PBKDF1 algorithm"" which is later in the document specified as ""the PKCS#5 v2.0 standard"", which is PBKDF2 (as far as I can tell). Everywhere on the net I've found (including here on Stack Exchange), though, everyone says ""use Rfc2898DeriveBytes, cause Password* is deprecated and uses PBKDF1"". But the only difference in the docs at <a href=""http://msdn.microsoft.com"">msdn.microsoft.com</a> seems to be that the Rfc*-version specifically mentions PBKDF2, where Password* says ""extension of PBKDF1"" and ""PKCS#5 v 2.0"". </p>

<p>So, can anyone tell me what the difference is between the two classes (if any) and why I should use one rather than the other for PBKDF2 password key derivation?</p>

<p>Now, other code, that deals with the same data, explicitly uses PBKDF2, and works, so that would suggest that indeed <code>PasswordDeriveBytes</code> also uses PBKDF2, or that PBKDF2 is simply compatible with PBKDF1 under certain circumstances, but I want to know for sure that it's not some side effect of some random thing, and that things just magically works (and eventually probably will magically and spectacularly break) without anyone really understanding why.</p>
","<p>I think a great answer to this would be found here:</p>

<p><a href=""https://stackoverflow.com/questions/9231754/c-sharp-passwordderivebytes-confusion"">C# PasswordDeriveBytes Confusion</a></p>

<p>But to sumup:</p>

<p>Microsoft's implementation of original PKCS#5 (aka PBKDF1) include insecure extensions to provide more bytes than the hash function can provide (see bug reports here and here).</p>

<p>Even if it was not buggy you should avoid undocumented, proprietary extensions to standards (or you might never be able to decrypt your data in the future - at least not outside Windows.)</p>

<p>I strongly suggest you to use the newer Rfc2898DeriveBytes which implements PBKDF2 (PKCS#5 v2) which is available since .NET 2.0.</p>
","7435","<c#><.net><pbkdf2><pkcs#5>","11","2","4","2017-06-12 17:37:21","","0","4","145307","","2011-08-17 14:55:02","2011-08-17 12:42:13",""
"7092977",".NET: Difference between PasswordDeriveBytes and Rfc2898DeriveBytes","<p>I'm trying to understand some C#-code, I have been handed, which deals with cryptography, and specifically uses <code>PasswordDeriveBytes</code> from <code>System.Security.Cryptography</code>.</p>

<p>In the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.passwordderivebytes.aspx"">.NET docs</a> , it says that <code>PasswordDeriveBytes</code> uses ""an extension of the PBKDF1 algorithm"" which is later in the document specified as ""the PKCS#5 v2.0 standard"", which is PBKDF2 (as far as I can tell). Everywhere on the net I've found (including here on Stack Exchange), though, everyone says ""use Rfc2898DeriveBytes, cause Password* is deprecated and uses PBKDF1"". But the only difference in the docs at <a href=""http://msdn.microsoft.com"">msdn.microsoft.com</a> seems to be that the Rfc*-version specifically mentions PBKDF2, where Password* says ""extension of PBKDF1"" and ""PKCS#5 v 2.0"". </p>

<p>So, can anyone tell me what the difference is between the two classes (if any) and why I should use one rather than the other for PBKDF2 password key derivation?</p>

<p>Now, other code, that deals with the same data, explicitly uses PBKDF2, and works, so that would suggest that indeed <code>PasswordDeriveBytes</code> also uses PBKDF2, or that PBKDF2 is simply compatible with PBKDF1 under certain circumstances, but I want to know for sure that it's not some side effect of some random thing, and that things just magically works (and eventually probably will magically and spectacularly break) without anyone really understanding why.</p>
","<p>If you instantiate <code>PasswordDeriveBytes</code> and make a single call to the <code>GetBytes</code> method passing a value which is smaller than the output size of the underlying digest algorithm then you get back a value from the <a href=""https://tools.ietf.org/html/rfc2898#section-5.1"" rel=""nofollow noreferrer"">PBKDF1</a> algorithm.</p>

<p>If you make two calls to GetBytes for the same object you may encounter a counting bug in the implementation.</p>

<p>PBKDF1 is only described to output up to the size of the hash algorithm (e.g. 20 bytes for SHA-1), but the PasswordDeriveBytes class has made up a formula to support up to 1000 times the hash output size.  So a large value produced by this class may not be easily attainable in another platform.</p>

<hr>

<p>If you instantiate <code>Rfc2898DeriveBytes</code> you get a streaming implementation of the <a href=""https://tools.ietf.org/html/rfc2898#section-5.2"" rel=""nofollow noreferrer"">PBKDF2</a> algorithm. The most obvious difference of PBKDF2 over PBKDF1 is that PBKDF2 allows the generation of an arbitrary amount of data (the limit is <code>(2^32-1)*hashOutputSize</code>; or for SHA-1 85,899,345,900 bytes).  PBKDF2 also uses a more complex construction (in particular, HMAC over direct digest) to make recovering the input password from an output value more difficult.</p>

<p>The ""streaming"" in the implementation is that the concatenation of <code>GetBytes(5)</code> and <code>GetBytes(3)</code> is the same as <code>GetBytes(8)</code>. Unlike in PasswordDeriveBytes, this works correctly in Rfc2898DeriveBytes.</p>

<hr>

<p>PBKDF1 was originally created to generate DES keys, published in <a href=""ftp://ftp.rsasecurity.com/pub/pkcs/ascii/pkcs-5.asc"" rel=""nofollow noreferrer"">PKCS #5 v1.5</a> in 1993.
PBKDF2 was published in PKCS #5 v2.0 (which was republished as <a href=""https://tools.ietf.org/html/rfc2898"" rel=""nofollow noreferrer"">RFC2898</a>) in 1999. A slide deck which should be found at <a href=""ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-5v2/pkcs5v2-0.pdf"" rel=""nofollow noreferrer"">ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-5v2/pkcs5v2-0.pdf</a> (but seems to be having issues so <a href=""ftp://ftp.dfn-cert.de/pub/pca/docs/PKCS/ftp.rsa.com/99workshop/pkcs5_v2.0.ppt"" rel=""nofollow noreferrer"">ftp://ftp.dfn-cert.de/pub/pca/docs/PKCS/ftp.rsa.com/99workshop/pkcs5_v2.0.ppt</a> may hve to do) further summarizes differences. (The slide deck was written by RSA Security, the creators of PBKDF1 and PBKDF2, and they are the people who recommend PBKDF2 over PBKDF1).</p>
","7435","<c#><.net><pbkdf2><pkcs#5>","11","2","4","2017-06-12 17:37:21","","0","4","145307","","2011-08-17 14:55:02","2011-08-17 12:42:13",""
"11628256","PBKDF2 with SHA256 on android","<p>I want to generate a derived hash of a password using PBKDF2 with SHA256. with this <code>SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"")</code> this work but it use SHA1.
With <code>SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"")</code> (or <code>SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"",""SC"")</code> when with spongycastle) i have an error.</p>

<p>How can i succeed to generate a hash using PBKDF2WithHmacSHA256?</p>
","<p>Bouncy Castle doesn't support <code>PBKDF2WithHmacSHA256</code> so this won't work. You can try implementing it yourself. Look at the source of <code>PKCS5S2ParametersGenerator.java</code> and replace <code>SHA1Digest</code> with <code>SHA256Digest</code>. </p>
","7123","<android><encryption><sha256><pbkdf2>","7","2","2","2013-03-08 21:06:21","15303291","0","5","929227","","2012-07-24 12:54:33","2012-07-24 09:48:12",""
"11628256","PBKDF2 with SHA256 on android","<p>I want to generate a derived hash of a password using PBKDF2 with SHA256. with this <code>SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"")</code> this work but it use SHA1.
With <code>SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"")</code> (or <code>SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"",""SC"")</code> when with spongycastle) i have an error.</p>

<p>How can i succeed to generate a hash using PBKDF2WithHmacSHA256?</p>
","<p>If you use version 1.47 or higher of SpongyCastle, you can invoke PBKDF2WithHmacSHA256 directly:</p>

<pre><code>PKCS5S2ParametersGenerator generator = new PKCS5S2ParametersGenerator(new SHA256Digest());
generator.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes(password), salt, iterations);
KeyParameter key = (KeyParameter)generator.generateDerivedMacParameters(keySizeInBits);
</code></pre>

<p>In versions of BC &lt; 1.47, you could not specify SHA256 digest and it defaulted to SHA1.</p>
","7123","<android><encryption><sha256><pbkdf2>","7","18","2","2013-03-08 21:06:21","15303291","0","5","929227","","2012-07-24 12:54:33","2012-07-24 09:48:12",""
"7837547","Is there a SQL implementation of PBKDF2?","<p>Does anyone know of a SQL implementation of <a href=""http://tools.ietf.org/html/rfc2898#section-5.2"" rel=""noreferrer"">PBKDF2</a>?</p>

<p>(I'd rather not use an external library like, for example, <a href=""http://www.example-code.com/sql/crypt2_pbkdf2.asp"" rel=""noreferrer"">ChillKat's ActiveX</a> component.)</p>
","<p>PBKDF2 is built into the .NET framework as <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.aspx"" rel=""noreferrer"">System.Security.Cryptography.Rfc2898DeriveBytes</a>.  It's straightforward to create a SQL CLR function that wraps a call to this class' <code>GetBytes</code> method.</p>

<p>I realize you were looking for a solution that doesn't require an external library but at least this limits the dependency an assembly that simply wraps framework code.</p>
","6133","<sql><pbkdf2>","13","5","3","2014-02-25 03:48:36","7843333","0","6","","","","2011-10-20 14:33:30",""
"7837547","Is there a SQL implementation of PBKDF2?","<p>Does anyone know of a SQL implementation of <a href=""http://tools.ietf.org/html/rfc2898#section-5.2"" rel=""noreferrer"">PBKDF2</a>?</p>

<p>(I'd rather not use an external library like, for example, <a href=""http://www.example-code.com/sql/crypt2_pbkdf2.asp"" rel=""noreferrer"">ChillKat's ActiveX</a> component.)</p>
","<p>Not that I know of, but I just wrote one for fun. I'm sure this can be optimized and tuned somewhat:</p>

<pre><code>--Supporting HMAC function, based on http://www.experts-exchange.com/Microsoft/Development/MS-SQL-Server/SQL-Server-2005/Q_26290857.html
create FUNCTION [dbo].[test_HMAC]
(
        @hash_algorithm varchar(25),
        @key VARCHAR(MAX),
        @message VARCHAR(MAX)
)
RETURNS VARCHAR(MAX)


AS
BEGIN
    --HASH key if longer than 16 characters
    IF(LEN(@key) &gt;64)
        SET @key = HASHBYTES(@hash_algorithm,@key)


    DECLARE @i_key_pad VARCHAR(MAX), @o_key_pad VARCHAR(MAX), @position INT
        SET @position = 1
        SET @i_key_pad = ''
        SET @o_key_pad = ''

    --splice ipad &amp; opod with key
    WHILE @position &lt;= LEN(@key)
       BEGIN
        SET @i_key_pad = @i_key_pad + CHAR(ASCII(SUBSTRING(@key, @position, 1)) ^ 54) 
        SET @o_key_pad = @o_key_pad + CHAR(ASCII(SUBSTRING(@key, @position, 1)) ^ 92) 
        SET @position = @position + 1
       END 

    --pad i_key_pad &amp; o_key_pad
        SET @i_key_pad = LEFT(@i_key_pad + REPLICATE('6',64),64)
        SET @o_key_pad = LEFT(@o_key_pad + REPLICATE('\',64),64)


RETURN HASHBYTES(@hash_algorithm,CONVERT(VARBINARY(MAX),@o_key_pad) + HASHBYTES(@hash_algorithm,@i_key_pad + @message))

END


--pbkdf2 in SQL
create function test_PBKDF2 
(
@hash_algorithm varchar(25),
@password varchar(max),
@salt varchar(max),
@rounds int,
@outputbytes int
)
returns varchar(max)
as
begin

declare @hlen int
select @hlen = len(HASHBYTES(@hash_algorithm, 'test'))
declare @l int = (@outputbytes +@hLen -1)/@hLen
declare @r int = @outputbytes - (@l - 1) * @hLen
declare @t varchar(max), @u varchar(max), @block1 varchar(max)

declare @output varchar(max) = ''

declare @i int = 1
while @i &lt;= @l
    begin
    set @block1 = @salt +cast(cast(@i as varbinary(4)) as varchar(4))
    set @u = dbo.test_HMAC(@hash_algorithm,@password,@block1)
    set @t = @u

    declare @j int = 1
    while @j &lt; @rounds
        begin
        set @u = dbo.test_HMAC(@hash_algorithm,@password,@u)


        declare @k int = 0, @workstring varchar(max) = ''
        while @k &lt; @hLen
            begin
            set @workstring = @workstring + char(ascii(substring(@u,@k+1,1))^ascii(substring(@t,@k+1,1)))
            set @k+= 1
            end
        set @t = @workstring
        set @j+= 1
        end

        select @output = @output + case when @i = @l then left(@t,@r) else @t end
    set @i +=1
    end

return master.dbo.fn_varbintohexstr(convert(varbinary(max), @output ))

end
</code></pre>

<p>Usage Example from the RFC 6070 test vectors:</p>

<pre><code>select dbo.test_PBKDF2('sha1', 'pass'+char(0)+'word', 'sa'+char(0)+'lt', 4096, 16) as hash
</code></pre>
","6133","<sql><pbkdf2>","13","5","3","2014-02-25 03:48:36","7843333","0","6","","","","2011-10-20 14:33:30",""
"7837547","Is there a SQL implementation of PBKDF2?","<p>Does anyone know of a SQL implementation of <a href=""http://tools.ietf.org/html/rfc2898#section-5.2"" rel=""noreferrer"">PBKDF2</a>?</p>

<p>(I'd rather not use an external library like, for example, <a href=""http://www.example-code.com/sql/crypt2_pbkdf2.asp"" rel=""noreferrer"">ChillKat's ActiveX</a> component.)</p>
","<p>Here's a dramatically faster PBKDF2/PKCS #5/RFC2898 implementation of PBKDF2(HMAC-SHA-512..., useful on SQL2012 and up, including StackOverflow and boundary size test vectors.  Much of the speed increase is the usual precalculation of ipad and opad, reducing the number of hashing operations dramatically.  The rest is normal code optimization, loop unrolling, and so on.</p>

<pre><code>USE tempdb; -- in case YourDB does not exist
USE YourDB;
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512]') AND xtype IN (N'FN', N'IF', N'TF'))
DROP FUNCTION [dbo].[Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512]
GO

CREATE FUNCTION [dbo].[Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512]
  (
  @Password VARBINARY(4000), -- HASHBYTES is limited, and HMAC concatenation limits this more, though 4000 is a guess
  @Salt VARBINARY(4000), -- HASHBYTES is limited, and HMAC concatenation limits this more, though 4000 is a guess
  @IterationCount INT,
  @Outputbytes INT -- For password hashing, should ""naturally"" be the digest size (or less) - more than the digest size allows the first &lt;digest size&gt; to remain identical, so someone cracking the PBKDF2'd passwords only needs to generate and check the first &lt;digest size&gt;
  )
RETURNS VARBINARY(8000)
AS
BEGIN
-- WARNING - if you are using SQL 2012 or better, DO NOT USE Yourfn_CRYPT_PBKDF2_VARBINARY_SHA1 UNLESS YOU NEED BACKWARDS COMPATIBILITY!!!  The 64-bit math required by SHA-512 (and SHA-384) is proportionally faster on CPUs vs. GPU's as of 2013, which reduces a GPU based attacker's advantage.
-- SEE PKCS #5, RFC2898, as well as PBKDF2, i.e. http://tools.ietf.org/rfc/rfc2898.txt
-- WARNING - SQL is NOT a good language for this type of math; results are fairly slow, and are generally better off being implemented by another language.
-- This is a dedicated HMAC-SHA-512 version, with a moderate amount of performance tuning.

/*
SET NOCOUNT ON
DECLARE @Result VARBINARY(64)
DECLARE @start DATETIME2(7)
SET @start = SYSDATETIME()
PRINT 'SHA-512 Test 1 from http://stackoverflow.com/questions/15593184/pbkdf2-hmac-sha-512-test-vectors'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'password'),CONVERT(VARBINARY(4000),'salt'),1,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x867f70cf1ade02cff3752599a3a53dc4af34c7a669815ae5d513554e1c8cf252c02d470a285a0501bad999bfe943c08f050235d7d68b1da55e63f73b60a57fce THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'SHA-512 Test 2 from http://stackoverflow.com/questions/15593184/pbkdf2-hmac-sha-512-test-vectors'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'password'),CONVERT(VARBINARY(4000),'salt'),2,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0xe1d9c16aa681708a45f5c7c4e215ceb66e011a2e9f0040713f18aefdb866d53cf76cab2868a39b9f7840edce4fef5a82be67335c77a6068e04112754f27ccf4e THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'SHA-512 Test 3 from http://stackoverflow.com/questions/15593184/pbkdf2-hmac-sha-512-test-vectors'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'password'),CONVERT(VARBINARY(4000),'salt'),4096,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0xd197b1b33db0143e018b12f3d1d1479e6cdebdcc97c5c0f87f6902e072f457b5143f30602641b3d55cd335988cb36b84376060ecd532e039b742a239434af2d5 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'SHA-512 Test 4 from http://stackoverflow.com/questions/15593184/pbkdf2-hmac-sha-512-test-vectors'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passwordPASSWORDpassword'),CONVERT(VARBINARY(4000),'saltSALTsaltSALTsaltSALTsaltSALTsalt'),4096,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x8c0511f4c6e597c6ac6315d8f0362e225f3c501495ba23b868c005174dc4ee71115b59f9e60cd9532fa33e0f75aefe30225c583a186cd82bd4daea9724a3d3b8 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END
PRINT 'Duration (ms): ' + CONVERT(VARCHAR(23),DATEDIFF(ms,@start,SYSDATETIME()))


PRINT 'Long Test 1a 1 iter Len19pw Len19sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTT'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD'),1,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0xCBE6088AD4359AF42E603C2A33760EF9D4017A7B2AAD10AF46F992C660A0B461ECB0DC2A79C2570941BEA6A08D15D6887E79F32B132E1C134E9525EEDDD744FA THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 1b 100000 iter Len19pw Len19sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTT'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD'),100000,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0xACCDCD8798AE5CD85804739015EF2A11E32591B7B7D16F76819B30B0D49D80E1ABEA6C9822B80A1FDFE421E26F5603ECA8A47A64C9A004FB5AF8229F762FF41F THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 2a 1 iter Len20pw Len20sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTl'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2'),1,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x8E5074A9513C1F1512C9B1DF1D8BFFA9D8B4EF9105DFC16681222839560FB63264BED6AABF761F180E912A66E0B53D65EC88F6A1519E14804EBA6DC9DF137007 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 2b 100000 iter Len20pw Len20sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTl'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2'),100000,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x594256B0BD4D6C9F21A87F7BA5772A791A10E6110694F44365CD94670E57F1AECD797EF1D1001938719044C7F018026697845EB9AD97D97DE36AB8786AAB5096 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 3a 1 iter Len21pw Len21sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlR'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2P'),1,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0xA6AC8C048A7DFD7B838DA88F22C3FAB5BFF15D7CB8D83A62C6721A8FAF6903EAB6152CB7421026E36F2FFEF661EB4384DC276495C71B5CAB72E1C1A38712E56B THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 3b 100000 iter Len21pw Len21sa- validated against and a Javascript Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlR'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2P'),100000,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x94FFC2B1A390B7B8A9E6A44922C330DB2B193ADCF082EECD06057197F35931A9D0EC0EE5C660744B50B61F23119B847E658D179A914807F4B8AB8EB9505AF065 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 4a 1 iter Len63pw Len63sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE5'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJe'),1,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0xE2CCC7827F1DD7C33041A98906A8FD7BAE1920A55FCB8F831683F14F1C3979351CB868717E5AB342D9A11ACF0B12D3283931D609B06602DA33F8377D1F1F9902 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 4b 100000 iter Len63pw Len63sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE5'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJe'),100000,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x07447401C85766E4AED583DE2E6BF5A675EABE4F3618281C95616F4FC1FDFE6ECBC1C3982789D4FD941D6584EF534A78BD37AE02555D9455E8F089FDB4DFB6BB THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 5a 1 iter Len64pw Len64sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJem'),1,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0xB029A551117FF36977F283F579DC7065B352266EA243BDD3F920F24D4D141ED8B6E02D96E2D3BDFB76F8D77BA8F4BB548996AD85BB6F11D01A015CE518F9A717 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 5b 100000 iter Len64pw Len64sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJem'),100000,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x31F5CC83ED0E948C05A15735D818703AAA7BFF3F09F5169CAF5DBA6602A05A4D5CFF5553D42E82E40516D6DC157B8DAEAE61D3FEA456D964CB2F7F9A63BBBDB5 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 6a 1 iter Len65pw Len65sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57U'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemk'),1,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x28B8A9F644D6800612197BB74DF460272E2276DE8CC07AC4897AC24DBC6EB77499FCAF97415244D9A29DA83FC347D09A5DBCFD6BD63FF6E410803DCA8A900AB6 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 6b 100000 iter Len65pw Len65sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57U'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemk'),100000,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x056BC9072A356B7D4DA60DD66F5968C2CAA375C0220EDA6B47EF8E8D105ED68B44185FE9003FBBA49E2C84240C9E8FD3F5B2F4F6512FD936450253DB37D10028 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 7a 1 iter Len127pw Len127sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57Un4u12D2YD7oOPpiEvCDYvntXEe4NNPLCnGGeJArbYDEu6xDoCfWH6kbuV6awi0'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemkURWoqHusIeVB8Il91NjiCGQacPUu9qTFaShLbKG0Yj4RCMV56WPj7E14EMpbxy'),1,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x16226C85E4F8D604573008BFE61C10B6947B53990450612DD4A3077F7DEE2116229E68EFD1DF6D73BD3C6D07567790EEA1E8B2AE9A1B046BE593847D9441A1B7 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 7b 100000 iter Len127pw Len127sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57Un4u12D2YD7oOPpiEvCDYvntXEe4NNPLCnGGeJArbYDEu6xDoCfWH6kbuV6awi0'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemkURWoqHusIeVB8Il91NjiCGQacPUu9qTFaShLbKG0Yj4RCMV56WPj7E14EMpbxy'),100000,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x70CF39F14C4CAF3C81FA288FB46C1DB52D19F72722F7BC84F040676D3371C89C11C50F69BCFBC3ACB0AB9E92E4EF622727A916219554B2FA121BEDDA97FF3332 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 8a 1 iter Len128pw Len128sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57Un4u12D2YD7oOPpiEvCDYvntXEe4NNPLCnGGeJArbYDEu6xDoCfWH6kbuV6awi04'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemkURWoqHusIeVB8Il91NjiCGQacPUu9qTFaShLbKG0Yj4RCMV56WPj7E14EMpbxy6'),1,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x880C58C316D3A5B9F05977AB9C60C10ABEEBFAD5CE89CAE62905C1C4F80A0A098D82F95321A6220F8AECCFB45CE6107140899E8D655306AE6396553E2851376C THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 8b 100000 iter Len128pw Len128sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57Un4u12D2YD7oOPpiEvCDYvntXEe4NNPLCnGGeJArbYDEu6xDoCfWH6kbuV6awi04'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemkURWoqHusIeVB8Il91NjiCGQacPUu9qTFaShLbKG0Yj4RCMV56WPj7E14EMpbxy6'),100000,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x2668B71B3CA56136B5E87F30E098F6B4371CB5ED95537C7A073DAC30A2D5BE52756ADF5BB2F4320CB11C4E16B24965A9C790DEF0CBC62906920B4F2EB84D1D4A THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 9a 1 iter Len129pw Len129sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57Un4u12D2YD7oOPpiEvCDYvntXEe4NNPLCnGGeJArbYDEu6xDoCfWH6kbuV6awi04U'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemkURWoqHusIeVB8Il91NjiCGQacPUu9qTFaShLbKG0Yj4RCMV56WPj7E14EMpbxy6P'),1,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x93B9BA8283CC17D50EF3B44820828A258A996DE258225D24FB59990A6D0DE82DFB3FE2AC201952100E4CC8F06D883A9131419C0F6F5A6ECB8EC821545F14ADF1 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END

PRINT 'Long Test 9b 100000 iter Len129pw Len129sa- validated against a Python implemenation of PBKDF2'
SET @Result = YourDB.dbo.Yourfn_CRYPT_PBKDF2_VARBINARY_SHA512(CONVERT(VARBINARY(4000),'passDATAb00AB7YxDTTlRH2dqxDx19GDxDV1zFMz7E6QVqKIzwOtMnlxQLttpE57Un4u12D2YD7oOPpiEvCDYvntXEe4NNPLCnGGeJArbYDEu6xDoCfWH6kbuV6awi04U'),CONVERT(VARBINARY(4000),'saltKEYbcTcXHCBxtjD2PnBh44AIQ6XUOCESOhXpEp3HrcGMwbjzQKMSaf63IJemkURWoqHusIeVB8Il91NjiCGQacPUu9qTFaShLbKG0Yj4RCMV56WPj7E14EMpbxy6P'),100000,64)
SELECT @Result
PRINT CASE WHEN @Result IS NULL THEN 'NULL - BAD ALGO?' WHEN @Result = 0x2575B485AFDF37C260B8F3386D33A60ED929993C9D48AC516EC66B87E06BE54ADE7E7C8CB3417C81603B080A8EEFC56072811129737CED96236B9364E22CE3A5 THEN 'PASS' ELSE 'FAIL INVALID RESULT' END
PRINT 'Duration (ms): ' + CONVERT(VARCHAR(23),DATEDIFF(ms,@start,SYSDATETIME()))

*/

  DECLARE @NumDigestSizesRequiredToEncompassOutputbytes INT
  DECLARE @RemainderOutputbytesAfterNumDigestSizesMinusOne INT
  DECLARE @Working BINARY(64) -- digest size
  DECLARE @ThisIterationResult BINARY(64) -- digest size
  DECLARE @FirstIterationDefinedResult VARBINARY(4004) -- Salt size + INT size per HMAC definition
  DECLARE @output VARBINARY(8000)
  DECLARE @CurrentDigestSizeChunk INT
  DECLARE @CurrentIteration INT
  -- Start Inlined HMAC-SHA-512 variables
  DECLARE @ipadRFC2104 BIGINT
  DECLARE @opadRFC2104 BIGINT
  DECLARE @k_ipadRFC2104 BINARY(128) -- BLOCKSIZE in bytes per HMAC definition
  DECLARE @k_opadRFC2104 BINARY(128) -- BLOCKSIZE in bytes per HMAC definition
  --SQL fails to allow binary operations on two binary data types!!!  We use bigint and iterate 8 times for 512 bits = 64 byte blocksize for better performance.
  SET @ipadRFC2104 = CAST(0x3636363636363636 AS BIGINT)
  SET @opadRFC2104 = CAST(0x5C5C5C5C5C5C5C5C AS BIGINT)
  -- End Inlined HMAC-SHA-512 variables  

  SET @NumDigestSizesRequiredToEncompassOutputbytes = (@Outputbytes + 63)/64 -- number &gt; 1 is digest size/digest size minus 1
  SET @RemainderOutputbytesAfterNumDigestSizesMinusOne = @Outputbytes - (@NumDigestSizesRequiredToEncompassOutputbytes - 1) * 64 -- the number in here that's &gt; 1 is the digest size


  SET @output = 0x
  SET @CurrentDigestSizeChunk = 1

  WHILE @CurrentDigestSizeChunk &lt;= @NumDigestSizesRequiredToEncompassOutputbytes
  BEGIN
    SET @FirstIterationDefinedResult = @Salt + CAST(@CurrentDigestSizeChunk AS VARBINARY(4))
    --SET @ThisIterationResult = YourDB.dbo.Yourfn_CRYPT_HMAC_SHA512(@Password,@FirstIterationDefinedResult)

    -- NOTE: Inlining HMAC-SHA-512 appears to improve performance by a factor of six or so.  Setting the HMAC as an Inlined Table Valued Function instead of a Scalar function would reduce this disparity, of course.
    -- START INLINED HMAC-SHA-512 for performance improvement
    -- B = BLOCKSIZE (64 bytes for MD5, SHA-224, SHA-256, and 128 bytes for SHA-384 and SHA-512, per RFC2104 and RFC4868)
    IF LEN(@Password) &gt; 128 -- Applications that use keys longer than B bytes will first hash the key using H and then use the resultant L byte string as the actual key to HMAC 
      SET @Password = CAST(HASHBYTES('SHA2_512', @Password) AS BINARY (128))
    ELSE
      SET @Password = CAST(@Password AS BINARY (128)) -- append zeros to the end of K to create a B byte string

    -- Loop unrolled for definite performance benefit
    -- Must XOR BLOCKSIZE bytes
    SET @k_ipadRFC2104 = CONVERT(BINARY(8),(SUBSTRING(@Password, 1, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 9, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 17, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 25, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 33, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 41, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 49, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 57, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 65, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 73, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 81, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 89, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 97, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 105, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 113, 8) ^ @ipadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 121, 8) ^ @ipadRFC2104))

    -- Loop unrolled for definite performance benefit
    -- Must XOR BLOCKSIZE bytes
    SET @k_opadRFC2104 = CONVERT(BINARY(8),(SUBSTRING(@Password, 1, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 9, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 17, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 25, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 33, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 41, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 49, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 57, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 65, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 73, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 81, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 89, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 97, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 105, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 113, 8) ^ @opadRFC2104))
      + CONVERT(BINARY(8),(SUBSTRING(@Password, 121, 8) ^ @opadRFC2104))

    SET @ThisIterationResult = HASHBYTES('SHA2_512', @k_opadRFC2104 + HASHBYTES('SHA2_512', @k_ipadRFC2104 + @FirstIterationDefinedResult))
    -- END   INLINED HMAC-SHA-512 for performance improvement

    SET @Working = @ThisIterationResult

    SET @CurrentIteration = 1
    WHILE @CurrentIteration &lt; @IterationCount
    BEGIN
      --SET @ThisIterationResult = YourDB.dbo.Yourfn_CRYPT_HMAC_SHA512(@Password,@ThisIterationResult)

      -- NOTE: Inlining HMAC-SHA-512 appears to improve performance by a factor of six or so.  Setting the HMAC as an Inlined Table Valued Function instead of a Scalar function would reduce this disparity, of course.
      -- START INLINED HMAC-SHA-512 for performance improvement
      -- B = BLOCKSIZE (64 bytes for MD5, SHA-224, SHA-256, and 128 bytes for SHA-384 and SHA-512, per RFC2104 and RFC4868)

      -- We've already hashed the password if we needed to!
      -- We've already generated @k_ipadRFC2104 and @k_opadRFC2104 both!

      SET @ThisIterationResult =  HASHBYTES('SHA2_512', @k_opadRFC2104 + HASHBYTES('SHA2_512', @k_ipadRFC2104 + @ThisIterationResult))
      -- END   INLINED HMAC-SHA-512 for performance improvement

      -- Loop unrolled for possible performance benefit
      -- Stupid conversion required because SQL Server can't do binary operations on two binary variables!!!
      -- Must XOR digest size bytes
      SET @Working = CONVERT(BINARY(8),(CONVERT(BIGINT,(SUBSTRING(@ThisIterationResult,1,8)))^SUBSTRING(@Working,1,8)))
        + CONVERT(BINARY(8),(CONVERT(BIGINT,(SUBSTRING(@ThisIterationResult,9,8)))^SUBSTRING(@Working,9,8)))
        + CONVERT(BINARY(8),(CONVERT(BIGINT,(SUBSTRING(@ThisIterationResult,17,8)))^SUBSTRING(@Working,17,8)))
        + CONVERT(BINARY(8),(CONVERT(BIGINT,(SUBSTRING(@ThisIterationResult,25,8)))^SUBSTRING(@Working,25,8)))
        + CONVERT(BINARY(8),(CONVERT(BIGINT,(SUBSTRING(@ThisIterationResult,33,8)))^SUBSTRING(@Working,33,8)))
        + CONVERT(BINARY(8),(CONVERT(BIGINT,(SUBSTRING(@ThisIterationResult,41,8)))^SUBSTRING(@Working,41,8)))
        + CONVERT(BINARY(8),(CONVERT(BIGINT,(SUBSTRING(@ThisIterationResult,49,8)))^SUBSTRING(@Working,49,8)))
        + CONVERT(BINARY(8),(CONVERT(BIGINT,(SUBSTRING(@ThisIterationResult,57,8)))^SUBSTRING(@Working,57,8)))

      SET @CurrentIteration += 1 -- SHA-512 is a SQL 2012 only function, so SQL 2008 only syntax doesn't limit compatibility any further.
    END -- WHILE @CurrentIteration rounds

    SELECT @output = @output +
      CASE
        WHEN @CurrentDigestSizeChunk = @NumDigestSizesRequiredToEncompassOutputbytes THEN CONVERT(BINARY(64),LEFT(@Working,@RemainderOutputbytesAfterNumDigestSizesMinusOne)) -- digest size in bytes
        ELSE CONVERT(BINARY(64),@Working) -- digest size in bytes
        END 
    SET @CurrentDigestSizeChunk += 1 -- SHA-512 is a SQL 2012 only function, so SQL 2008 only syntax doesn't limit compatibility any further.
  END

  RETURN @output

END


GO
</code></pre>
","6133","<sql><pbkdf2>","13","17","3","2014-02-25 03:48:36","7843333","0","6","","","","2011-10-20 14:33:30",""
"27244449","Crypto++ pbkdf2 output is different than Rfc2898DeriveBytes (C#) and crypto.pbkdf2 (JavaScript)","<p>So I'm trying to use PBKDF2 to derive a key given a base64 string of 256bits. I am able to use C#'s Rfc2898DeriveBytes and node-crypto's pbkdf2 to derive the same key, however, I can't say the same for C++. I'm not sure if I'm doing wrong conversions or using the functions improperly, but I'll let you guys look at it.</p>

<p>C++</p>

<pre><code>/* 256bit key */
string key = ""Y1Mjycd0+O+AendY5pB58JMlmS0EmBWgjdj2r2KW6qQ="";
string decodedKey;
StringSource(key, true, new Base64Decoder(new StringSink(decodedKey)));
const byte* keyByte = (const byte*) decodedKey.data();

/* Generate IV */
/*
    AutoSeededRandomPool prng;
    byte iv[AES::BLOCKSIZE];
    prng.GenerateBlock(iv, sizeof(iv));
*/

/* FOR TESTING PURPOSES, HARDCODE IV */
string iv = ""5iFv54dCRq5icQbD7QHQzg=="";
string decodedIv;
StringSource(iv, true, new Base64Decoder(new StringSink(decodedIv)));
const byte* ivByte = (const byte *) decodedIv.data();

byte derivedKey[32];
PKCS5_PBKDF2_HMAC&lt;CryptoPP::SHA1&gt; pbkdf2;
pbkdf2.DeriveKey(derivedKey, 32, 0, keyByte, 32, ivByte, 16, 100);

/* 
 * derivedKey: 9tRyXCoQLTbUOLqm3M4OPGT6N25g+o0K090fVp/hflk=
 */
</code></pre>

<p>C#</p>

<pre><code>// string key = ""Y1Mjycd0+O+AendY5pB58JMlmS0EmBWgjdj2r2KW6qQ=""; // need to convert it to byte data
string key = Convert.FromBase64String(""Y1Mjycd0+O+AendY5pB58JMlmS0EmBWgjdj2r2KW6qQ=""); // change above to this
RijndaelManaged symKey = new RijndaelManaged();
symKey.GenerateIV(); /* Assume hardcoded IV same as above */
Rfc2898DeriveBytes derivedKey = new Rfc2898DeriveBytes (key, symKey.IV, 100);

/*
 * derivedKey: dZqBpZKyUPKn8pU4pyyeAw7Rg8uYd6yyj3WI1MIJSyc=
 */
</code></pre>

<p>JS</p>

<pre><code>// var key = ""Y1Mjycd0+O+AendY5pB58JMlmS0EmBWgjdj2r2KW6qQ=""; // need to convert it to byte data
var key = new Buffer(""Y1Mjycd0+O+AendY5pB58JMlmS0EmBWgjdj2r2KW6qQ="", ""base64""); // changed above to this
var iv = crypto.randomBytes(16);
iv = ""5iFv54dCRq5icQbD7QHQzg==""; /* HARDCODE IV */
crypto.pbkdf2(key, iv, 100, 32, function(err, derivedKey) { }

/*
 * derivedKey: dZqBpZKyUPKn8pU4pyyeAw7Rg8uYd6yyj3WI1MIJSyc=
 */
</code></pre>

<blockquote>
  <p>Well the main questions is, what am I doing wrong on C++'s CryptoPP
  library that it is not deriving the same value.</p>
</blockquote>

<p><strong>SOLUTION: I was being dumb... I realized after review my original implementation on JavaScript and C# I missed a crucial step that for some reason I did not get a complain from the compiler. Basically the problem was that I did not convert the key used into byte data before the algorithm on my C# and JS implementation...</strong></p>

<p><strong>Anyways, proposed solution is: do not code at 4 AM and make sure to be consistent on your data conversion...</strong></p>

<p><strong>I guess the TL;DR of this is that C# and JS was converting my 256bit key to byte data as ASCII instead of base64 conversion.</strong></p>
","<blockquote>
  <p>Well the main questions is, what am I doing wrong on C++'s CryptoPP library that it is not deriving the same value.</p>
</blockquote>

<p>Well, I don't think you are doing anything wrong in C++ with Crypto++ and PBKDF2. I think the other libraries are setting up the parameters differently, or they are a tad-bit non-standard.</p>

<p>I was able to arrive at the IETF's <a href=""http://www.ietf.org/rfc/rfc6070.txt"" rel=""nofollow"">test vectors for PBKDF2</a> using Crypto++:</p>

<pre><code>// From https://www.ietf.org/rfc/rfc6070.txt
//   PKCS #5: Password-Based Key Derivation Function 2 (PBKDF2) Test Vectors
//
//      Input:
//       P = ""password"" (8 octets)
//       S = ""salt"" (4 octets)
//       c = 1
//       dkLen = 20
//
//     Output:
//       DK = 0c 60 c8 0f 96 1f 0e 71
//            f3 a9 b5 24 af 60 12 06
//            2f e0 37 a6    (20 octets)

int main(int argc, char* argv[])
{
    byte password[] =""password"";
    size_t plen = strlen((const char*)password);

    byte salt[] = ""salt"";
    size_t slen = strlen((const char*)salt);

    int c = 1;
    byte derived[20];

    PKCS5_PBKDF2_HMAC&lt;CryptoPP::SHA1&gt; pbkdf2;
    pbkdf2.DeriveKey(derived, sizeof(derived), 0, password, plen, salt, slen, c);

    string result;
    HexEncoder encoder(new StringSink(result));

    encoder.Put(derived, sizeof(derived));
    encoder.MessageEnd();

    cout &lt;&lt; ""Derived: "" &lt;&lt; result &lt;&lt; endl;

    return 0;
}
</code></pre>

<p>And a run of the program:</p>

<pre><code>$ ./cryptopp-test.exe
Derived: 0C60C80F961F0E71F3A9B524AF6012062FE037A6
</code></pre>

<hr>

<p>I think the first thing you should do is verify the C# and Javascript implementations are using the same character encoding as Crypto++ and the IETF.</p>

<p>If that's not it, then check to see if C# and Javascript use the purpose byte. Crypto++ does not, and you can see the implementation at <a href=""http://www.cryptopp.com/docs/ref/pwdbased_8h_source.html"" rel=""nofollow"">pwdbased.h</a>.</p>

<hr>

<p>Unfortunately, I get something a little different when I dial in your parameters:</p>

<pre><code>int main(int argc, char* argv[])
{
    string t1 = ""Y1Mjycd0+O+AendY5pB58JMlmS0EmBWgjdj2r2KW6qQ="";
    string t2 = ""5iFv54dCRq5icQbD7QHQzg=="";

    string pw, iv;

    Base64Decoder b1(new StringSink(pw));
    b1.Put((const byte*)t1.data(), t1.size());
    b1.MessageEnd();

    Base64Decoder b2(new StringSink(iv));
    b2.Put((const byte*)t2.data(), t2.size());
    b2.MessageEnd();

    int c = 100;
    byte derived[32];

    cout &lt;&lt; ""pw size: "" &lt;&lt; pw.size() &lt;&lt; endl;
    cout &lt;&lt; ""iv size: "" &lt;&lt; iv.size() &lt;&lt; endl;

    PKCS5_PBKDF2_HMAC&lt;CryptoPP::SHA1&gt; pbkdf2;
    pbkdf2.DeriveKey(derived, sizeof(derived), 0, (byte*)pw.data(), pw.size(), (byte*)iv.data(), iv.size(), c);

    string result;
    HexEncoder encoder(new StringSink(result));

    encoder.Put(derived, sizeof(derived));
    encoder.MessageEnd();

    cout &lt;&lt; ""Derived: "" &lt;&lt; result &lt;&lt; endl;

    return 0;
}
</code></pre>

<p>A run results in:</p>

<pre><code>$ ./cryptopp-test.exe
pw size: 32
iv size: 16
Derived: F6D4725C2A102D36D438BAA6DCCE0E3C64FA376E60FA8D0AD3DD1F569FE17E59
</code></pre>
","5077","<c++><rijndael><crypto++><pbkdf2><hmacsha1>","6","3","1","2019-07-08 07:41:42","27261798","2","1","4314646","","2014-12-03 09:20:24","2014-12-02 07:58:32",""
"11829602","pbkdf2 and hash comparison","<p>I use mitsuhiko's implementation of pbkdf2 for password hashing:</p>

<pre><code>def pbkdf2_bin(data, salt, iterations=1000, keylen=24, hashfunc=None):
    """"""Returns a binary digest for the PBKDF2 hash algorithm of `data`
    with the given `salt`.  It iterates `iterations` time and produces a
    key of `keylen` bytes.  By default SHA-1 is used as hash function,
    a different hashlib `hashfunc` can be provided.
    """"""
    hashfunc = hashfunc or hashlib.sha1
    mac = hmac.new(data, None, hashfunc)
    def _pseudorandom(x, mac=mac):
        h = mac.copy()
        h.update(x)
        return map(ord, h.digest())
    buf = []
    for block in xrange(1, -(-keylen // mac.digest_size) + 1):
        rv = u = _pseudorandom(salt + _pack_int(block))
        for i in xrange(iterations - 1):
            u = _pseudorandom(''.join(map(chr, u)))
            rv = starmap(xor, izip(rv, u))
        buf.extend(rv)
    return ''.join(map(chr, buf))[:keylen]
</code></pre>

<p>This function returns binary digest which is then encoded in base64 and saved to database. Also that base64 string is set as a cookie when a user logs in.</p>

<p>This function is used for password hashes comparison:</p>

<pre><code>def comparePasswords(password1, password2):
    if len(password1) != len(password2):
        return False
    diff = 0
    for x, y in izip(password1, password2):
        diff |= ord(x) ^ ord(y)
    return diff == 0
</code></pre>

<p>I wonder if there is any difference in comparison of binary hashes and base64 strings in terms of security? For example when a user logs in, I calculate binary digest of submitted password, decode base64 string from the database and then compare two binary hashes, but in case the user has a cookie with base64 string, I directly compare it with the a string from the database.</p>

<p>The second question is about salt:</p>

<p>os.urandom returns binary string, but before it is used in hash generation I also encode it in base64. Is there any reason why I shouldn't do this and use salt in binary form?</p>
","<p><strong>To answer question 1</strong>: There's no major security difference when comparing bytes vs comparing a base64 encoded string... you're just comparing <code>n</code> or <code>n*4/3</code> elements. The runtime will be <code>4/3</code> longer using base64, but the amount of time is still trivial :)  </p>

<p>That said, there was a python developer <a href=""http://bugs.python.org/issue15061"">discussion</a> regarding a similar ""constant time"" comparison function, and they hit upon a few VM-level gotchas - if your input is a <code>unicode</code> string rather than <code>bytes</code>, and especially if the unicode contains non-ASCII characters, there may still be some subtle timing attacks (orders of magnitude less than the short-circuit-equality attack). Because of that, I'd stick to bytes if possible (whether binary data or ASCII-encoded base64 data). 
However, I wouldn't worry <em>too much</em> in the case of PBKDF2, since the <a href=""http://rdist.root.org/2009/05/28/timing-attack-in-google-keyczar-library/"">timing attack</a> that comparison function was designed to defeat applies more to HMAC signing, rather than password hash verification... but better to be safe than sorry.</p>

<p><strong>To answer question 2</strong>: For insecure constructions such as <code>md5(salt+password)</code>, encoding the salt first would allow an attacker to use existing ASCII md5 tables to attack the entire digest, where a raw binary salt would make such tables useless. However, PBKDF2-HMAC does enough mangling that the only thing which matters is that the salt contains <code>n</code> bits of entropy - whether it's in the form of <code>n/8</code> raw bytes, or <code>n/6</code> base64 chars doesn't affect security.</p>

<p><strong>Other notes</strong>: 
I just wanted to add a few other points relating to what you posted... </p>

<ol>
<li><p>For security purposes I'd strongly recommend using SHA256/512 instead of SHA1 as the PBKDF2-HMAC hash function, and >= 10,000 rounds (as of 2012), for security. </p></li>
<li><p>The idea of sending the digest over in a cookie (even w/o the salt) strikes me as potentially insecure... if someone steals that cookie (e.g. cross-site scripting attack), they could potentially log in as the user (though I don't know the rest your application's security setup). Using a session layer with a randomly generated session id (e.g. <a href=""http://pypi.python.org/pypi/Beaker/"">Beaker</a>) might be a good alternative.</p></li>
<li><p>I'd recommend using the Passlib <a href=""http://packages.python.org/passlib/lib/passlib.utils.pbkdf2.html#passlib.utils.pbkdf2.pbkdf2"">PBKDF2</a> and <a href=""http://packages.python.org/passlib/lib/passlib.utils.html#passlib.utils.consteq"">consteq</a> implementations, it's PBKDF2 routine is about 5x faster than mitsuhiko's, and can take advantage of <a href=""http://pypi.python.org/pypi/M2Crypto/"">M2Crypto</a> if present. <em>(disclaimer: I'm the author of Passlib)</em>. It's also got a ready-made <a href=""http://packages.python.org/passlib/lib/passlib.hash.pbkdf2_digest.html"">pbkdf2-sha256</a> password hashing function, though that won't be quite as much use if you're sending the digest out in the cookie.</p></li>
</ol>
","4418","<python><hash><comparison><pbkdf2>","3","10","1","2012-08-06 18:35:06","11832689","1","4","","","","2012-08-06 13:48:49",""
"31855456","Using Jasypt for password based AES encryption with PBKDF2WithHmacSHA1 key","<p>I'm implementing an encryption mechanism where I work, and the security guy's demands are as follows:</p>

<ol>
<li>Create a 256 bit key using PBKDF2WithHmacSHA512, secret password, 256bit salt and 20000 iterations minimum.</li>
<li>Salt should be generated using SecureRandom.getInstance(""SHA1PRNG"");</li>
<li>Encrypt using AES256 with the derived key.</li>
</ol>

<p>I'm trying to use Jasypt's <em>StandardPBEStringEncryptor</em> class</p>

<pre><code>encryptor.setPassword(PASSWORD);
encryptor.setAlgorithm(""AES/CBC/PKCS5Padding"");
encryptor.setKeyObtentionIterations(20000);
encryptor.setSaltGenerator(new RandomSaltGenerator());
encryptor.encrypt(""something"");
</code></pre>

<p>When I do this I get the following exception:</p>

<blockquote>
  <p>java.security.NoSuchAlgorithmException: AES/CBC/PKCS5Padding SecretKeyFactory not available</p>
</blockquote>

<p>Am I using Jasypt incorrectly? What am I missing here?</p>

<p>Thanks</p>
","<p>I ended up contacting Daniel Fernández who is Jasypt's lead programmer and his answer:</p>

<blockquote>
  <p>I’m afraid Jasypt does not offer a way to specify different algorithms for the SecretKeyFactory and the instantiation of the Cipher itself. Sorry.</p>
</blockquote>

<p>I used this bit of java code for doing this (Without Jasypt):</p>

<pre><code>public String encrypt(final String message) {
  final byte[] salt = generateSalt();
  final Key key = createKey(salt);

  final Cipher encryptingCipher = createCipher(Cipher.ENCRYPT_MODE, key, salt);
  final byte[] messageBytes = message.getBytes(StandardCharsets.UTF_8);
  final byte[] encryptedBytes = doFinal(encryptingCipher, messageBytes);
  final byte[] data = ArrayUtils.addAll(salt, encryptedBytes);
  return BaseEncoding.base64().encode(data);
}

private byte[] generateSalt() {
  final SecureRandom secureRandom = new SecureRandom();
  final byte[] salt = new byte[SALT_LENGTH];
  secureRandom.nextBytes(salt);
  return salt;
}

private Key createKey(final byte[] salt) {
  final PBEKeySpec spec = new PBEKeySpec(PASSWORD,
                                       salt,
                                       ITERATIONS,
                                       KEY_LENGTH);
  final SecretKey secretKey;
  try {
    secretKey = keyFactory.generateSecret(spec);
  } catch (final InvalidKeySpecException e) {
    throw new RuntimeException(""Error creating SecretKey"", e);
  }
  final SecretKeySpec result = new SecretKeySpec(secretKey.getEncoded(), ALGORITHM);
  spec.clearPassword();
  return result;
}
</code></pre>
","4228","<java><aes><encryption-symmetric><pbkdf2><jasypt>","3","4","1","2015-08-10 11:31:34","31918418","2","","","","","2015-08-06 12:13:10",""
"9375004","RFC2898DeriveBytes implementation in Java","<p>I have to decrypt a string encrypted in C# as a part of our project. This decryption is done using AES algorithm and packing mode as PKCS7. For generating the initialization vector they have used the following:</p>

<pre><code>Rfc2898DeriveBytes keyGenerator = new Rfc2898DeriveBytes(""somestring"", salt);
</code></pre>

<p>The salt is the default bytes. </p>

<p>This IV is used in encrypting the string using AES.</p>

<p>I have read through some documents and found that AES can be implemented in Java. But not sure on how to pass the IV and packing mode.</p>

<p>Also, I have seen that there are modes CBC, ECB for mentioning the Cipher block mode. I am not sure what mode is used in C# counterpart. </p>

<p>Below is the code in C#</p>

<pre><code>/// Method to encrypt the plain text based on the key and Iv
/// &lt;/summary&gt;
/// &lt;param name=""plainText""&gt;&lt;/param&gt;
/// &lt;param name=""key""&gt;&lt;/param&gt;
/// &lt;returns&gt;encrypted Text&lt;/returns&gt;
private string Encrypt(string plainText, byte[] key)
{
    if (plainText == null || plainText.Length &lt;= 0)
        throw new ArgumentNullException(""plainText"");
    if (key == null || key.Length &lt;= 0)
        throw new ArgumentNullException(""Key"");
    // Declare the stream used to encrypt to an in memory
    // array of bytes.
    MemoryStream msEncrypt = null;

    // Declare the RijndaelManaged object
    // used to encrypt the data.
    AesCryptoServiceProvider aesAlg = null;
  //  using (new Tracer(""Encryption"","""",""""))
  //  {
        try
        {
            // Create a RijndaelManaged object
            // with the specified key and IV.
            aesAlg = new AesCryptoServiceProvider();
            aesAlg.Key = key;
            aesAlg.IV = GetInitializationVector();
            aesAlg.Padding = PaddingMode.PKCS7;
            // Create an encryptor to perform the stream transform.
            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

            // Create the streams used for encryption.
            msEncrypt = new MemoryStream();
            using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
            {
                using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                {

                    //Write all data to the stream.
                    swEncrypt.Write(plainText);
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            // Clear the RijndaelManaged object.
            if (aesAlg != null)
                aesAlg.Clear();
        }

        // Return the encrypted bytes from the memory stream.
        // Console.WriteLine();

        return Convert.ToBase64String(msEncrypt.ToArray());
  //  }
}

private byte[] GetInitializationVector()
{
    byte[] iv;
    //create the initial salt 

    byte[] salt = Encoding.Default.GetBytes(""abcdefghijkl"");

    //create the key generator

    Rfc2898DeriveBytes keyGenerator = new Rfc2898DeriveBytes(""ricksaw"", salt);

    iv =  keyGenerator.GetBytes(16);

   return iv;
}
</code></pre>

<p>Can any one help me to create the equivalent in Java?</p>
","<p>i have somehow figured a way. it was working properly</p>

<p>I have requested the .net counterpart to pass the key and IV as strings. I encoded them to byte[] and used the below code </p>

<pre><code> String sKey =""fromdotnetpart"";

 String sIv=""fromdotnetiv"";

    byte[] bKey = key.getBytes();
    byte[] iv = sIv.getBytes();
    SecretKeySpec skey = new SecretKeySpec(bKey, ""AES"");   
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    AlgorithmParameterSpec param = new IvParameterSpec(iv);
    cipher.init(Cipher.DECRYPT_MODE, key,param);
    String decrypted = cipher.doFinal(encryptedString.getByte());
</code></pre>

<p>Hope this helps you. Please note that for higher strength AES encryption i.e AES-256,192 etc You need to download the <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html"" rel=""nofollow"">Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files</a></p>
","4111","<java><pbkdf2><rfc2898>","0","1","1","2012-04-19 12:13:59","","7","2","118861","","2012-02-21 14:03:40","2012-02-21 09:25:35",""
"10943837","PBKDF2 recommended key size?","<p>My function is as follows:</p>

<pre><code>pbkdf2($raw_pw,$salt,1000,128)
</code></pre>

<p>1000 is the number of passes, and 128 is the key size. The function returns a binary key which I use base64 to store it in the database.</p>

<p>My question is: what's the recommended keysize and salt size for pbkdf2 using sha512?</p>

<p>will a keysize of 32 be just as secure as a keysize of 128?</p>
","<p>1000 is the number of iterations, not passes. 128 Is the length at the end.</p>

<p>According to <a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow noreferrer"">Wikipedia</a> (and my own little knowledge about cryptography) you should use more than 128 bits (or 32 as you're asking). The size of the resulting key is equivalent to the chance for a hash collision. Using 256 (as WPA2 does) or 512 should not be a problem, also not a problem for your CPU/memory/whatever.</p>

<p>Also 1000 is, compared to other integrations of pbkdf2, a very small amount of iterations. You can easily use 5000 or 10000 (like iOS4) which might result in something like 10ms more processing time but makes a way more stronger key (see: a possible attacker has also to run the 10k iterations. This might change the time he needs from 1 day to 10 days, or 1 month to almost 1 year).</p>
","4052","<php><mysql><security><sha><pbkdf2>","2","6","1","2019-08-19 20:43:50","10945120","2","2","","","","2012-06-08 06:08:47",""
"17544537","Django pbkdf2_sha256 JS implementation","<p>I have a database from django and I want to work with it from Node.js. I have a task: authenticate users. Known from database: algorithm pbkdf2_sha256, salt, 10000 iterations and base64-encoded hash. What steps I must to do in JS to encode some password to given base64-hash?</p>

<p>UPD: found the solution in here: <a href=""https://stackoverflow.com/questions/15395194/python-django-hashlib-vs-nodejs-crypto"">python (django) hashlib vs Nodejs crypto</a>  but Django-generated hash and JS-generated hash not match...<br>
Django generate next: </p>

<pre><code>pbkdf2_sha256$10000$NmzpPCQiTe2R$U8ipSsOy3Xz7FwWDHdH/dTei8Xh4Q7NGtdzrCacSfvo=
</code></pre>

<p>JS:</p>

<pre><code>pbkdf2_sha256$10000$NmzpPCQiTe2R$w4jCgWjDilrDmcOBd8K+I8OdwpkKwoVQZMKWH3FvYcKoAMKcwqlewobDocOEGMKZfQ==
</code></pre>

<p>Password: <code>Simple123</code></p>
","<p>I faced a similar task where I have to authenticate users against Django passwords in Java. After trying unsuccessfully to achieve this goal using the default pbkdf2_sha256 hasher in Django, I ended up changing the method used to hash the Django password to be able to easily replicate the same algorithm in Java.</p>

<p>As described in <a href=""https://docs.djangoproject.com/en/1.5/topics/auth/passwords/"" rel=""nofollow"">Django documentation</a> you can modify the order in which PASSWORD_HASHERS are defined in settings.py, I put this hasher in first position:</p>

<p><code>'django.contrib.auth.hashers.SHA1PasswordHasher'</code></p>

<p>In this way the password hash stored in the Django database is something like this:</p>

<p><code>sha1$upSZarr0w7CZ$304b22b1a9e7e5387e79f50e691043d3faf83c48</code></p>

<p>If you already have some passwords in the database they will be automatically converted by Django at first user login.</p>

<p>You can easily tokenize the hash using $ as separator; the first token is always sha1 (the algorithm used), the second token is the <em>salt</em> and the last token is the actual <em>hash</em>.</p>

<p>To match a password you can verify that</p>

<p><code>304b22b1a9e7e5387e79f50e691043d3faf83c48</code></p>

<p>is the SHA1 sum of the <em>salt</em> concatenated with the expected password:</p>

<p><code>SHA1(upSZarr0w7CZ + password) = 304b22b1a9e7e5387e79f50e691043d3faf83c48</code></p>

<p>In our case the security implications of using a weaker algorithm for password hashing was acceptable.</p>
","3885","<javascript><django-authentication><sha256><pbkdf2>","9","0","3","2016-11-07 19:58:32","23560778","1","1","-1","","2017-05-23 12:33:44","2013-07-09 09:21:10",""
"17544537","Django pbkdf2_sha256 JS implementation","<p>I have a database from django and I want to work with it from Node.js. I have a task: authenticate users. Known from database: algorithm pbkdf2_sha256, salt, 10000 iterations and base64-encoded hash. What steps I must to do in JS to encode some password to given base64-hash?</p>

<p>UPD: found the solution in here: <a href=""https://stackoverflow.com/questions/15395194/python-django-hashlib-vs-nodejs-crypto"">python (django) hashlib vs Nodejs crypto</a>  but Django-generated hash and JS-generated hash not match...<br>
Django generate next: </p>

<pre><code>pbkdf2_sha256$10000$NmzpPCQiTe2R$U8ipSsOy3Xz7FwWDHdH/dTei8Xh4Q7NGtdzrCacSfvo=
</code></pre>

<p>JS:</p>

<pre><code>pbkdf2_sha256$10000$NmzpPCQiTe2R$w4jCgWjDilrDmcOBd8K+I8OdwpkKwoVQZMKWH3FvYcKoAMKcwqlewobDocOEGMKZfQ==
</code></pre>

<p>Password: <code>Simple123</code></p>
","<p>By using <a href=""https://github.com/cryptocoinjs/pbkdf2-sha256"" rel=""nofollow"" title=""pbkdf2-sha256"">pbkdf2-sha256</a> (from your own link) I'm able to generate a hash that is identical to the one you have from Django.</p>

<pre><code>var pbkdf2 = require('pbkdf2-sha256');
var validatePassword = function (key, string) {
    var parts = string.split('$');
    var iterations = parts[1];
    var salt = parts[2];
    return pbkdf2(key, new Buffer(salt), iterations, 32).toString('base64') === parts[3];
};
var djangoPass = 'pbkdf2_sha256$10000$NmzpPCQiTe2R$U8ipSsOy3Xz7FwWDHdH/dTei8Xh4Q7NGtdzrCacSfvo=';
console.log(validatePassword('Simple123', djangoPass)); // Logs: true
</code></pre>

<p>The above code should be sufficient to validate passwords stored in Django using Node.</p>
","3885","<javascript><django-authentication><sha256><pbkdf2>","9","8","3","2016-11-07 19:58:32","23560778","1","1","-1","","2017-05-23 12:33:44","2013-07-09 09:21:10",""
"17544537","Django pbkdf2_sha256 JS implementation","<p>I have a database from django and I want to work with it from Node.js. I have a task: authenticate users. Known from database: algorithm pbkdf2_sha256, salt, 10000 iterations and base64-encoded hash. What steps I must to do in JS to encode some password to given base64-hash?</p>

<p>UPD: found the solution in here: <a href=""https://stackoverflow.com/questions/15395194/python-django-hashlib-vs-nodejs-crypto"">python (django) hashlib vs Nodejs crypto</a>  but Django-generated hash and JS-generated hash not match...<br>
Django generate next: </p>

<pre><code>pbkdf2_sha256$10000$NmzpPCQiTe2R$U8ipSsOy3Xz7FwWDHdH/dTei8Xh4Q7NGtdzrCacSfvo=
</code></pre>

<p>JS:</p>

<pre><code>pbkdf2_sha256$10000$NmzpPCQiTe2R$w4jCgWjDilrDmcOBd8K+I8OdwpkKwoVQZMKWH3FvYcKoAMKcwqlewobDocOEGMKZfQ==
</code></pre>

<p>Password: <code>Simple123</code></p>
","<p>I recently created a project to make this easier. My project is available for node and is called <code>node-django-hashers</code>. The code is below:</p>

<p><a href=""https://github.com/kalvish21/hashers"" rel=""nofollow"">https://github.com/kalvish21/hashers</a></p>

<p>A sample usage:</p>

<pre><code>var hashers = require('node-django-hashers');

var h = new hashers.PBKDF2PasswordHasher();
var hash1 = h.encode(""password"", h.salt());
console.log(h.verify(""password"", hash1)); // returns true
console.log(h.verify(""wrong_password"", hash1)); // returns false
</code></pre>

<p>This is compatible with django password hashing.</p>
","3885","<javascript><django-authentication><sha256><pbkdf2>","9","2","3","2016-11-07 19:58:32","23560778","1","1","-1","","2017-05-23 12:33:44","2013-07-09 09:21:10",""
"13545677","python passlib: what is the best value for ""rounds""","<p>from the <a href=""http://packages.python.org/passlib/password_hash_api.html#choosing-the-right-rounds-value"" rel=""noreferrer"">passlib documentation</a></p>

<blockquote>
  <p>For most public facing services, you can generally have signin take upwards of 250ms - 400ms before users start getting annoyed.</p>
</blockquote>

<p>so what is the best value for <code>rounds</code> in a <strong>login/registration</strong> if we consider that there is <strong>one call for the database</strong> for the login attempt, and it uses <strong>MongoDB</strong> with <strong>non-blocking call</strong>. (using <a href=""https://github.com/marcelnicolay/mongotor"" rel=""noreferrer"">Mongotor</a>, and using the email as the <code>_id</code>, so it is by default <strong>indexed</strong>, the query is fast: <strong>0.00299978256226</strong> and of course tested with a database that has <strong>3 records</strong>...)</p>

<pre><code>import passlib.hash
import time

hashh = passlib.hash.pbkdf2_sha512
beg1 = time.time()
password = hashh.encrypt(""test"", salt_size = 32, rounds = 12000)
print time.time()- beg1 # returns 0.142999887466
beg2 = time.time()
hashh.verify(""test"", password) # returns 0.143000125885
print time.time()- beg2
</code></pre>

<p>now if i use half value:</p>

<pre><code>password = hashh.encrypt(""test"", salt_size = 32, rounds = 4000) # returns 0.0720000267029
hashh.verify(""test"", password) # returns 0.0709998607635
</code></pre>

<p>am using <strong>Windows 7 64 bits on Dell XPS 15 i7 2.0 Ghz</strong></p>

<p>NB: installed <a href=""http://www.mindrot.org/projects/py-bcrypt/"" rel=""noreferrer"">bcrypt</a>, and of course, it's a real pain using it directly as its default values (<code>rounds = 12</code>):</p>

<pre><code>hashh = passlib.hash.bcrypt
beg1 = time.time()
password = hashh.encrypt(""test"", rounds = 12) # returns 0.406000137329
print time.time()- beg1
beg2 = time.time()
hashh.verify(""test"", password) # returns 0.40499997139
print time.time()- beg2
</code></pre>

<p>half value:</p>

<pre><code>password = hashh.encrypt(""test"", rounds = 12) # 0.00699996948242 wonderful?
hashh.verify(""test"", password) # 0.00600004196167
</code></pre>

<p>can you suggest me a good rounds value when using <code>pbkdf2_sha512</code> that will be good for production?</p>
","<p><em>(passlib developer here)</em></p>

<p>The amount of time pbkdf2_sha512 takes is linearly proportional to it's rounds parameter (<code>elapsed_time = rounds * native_speed</code>). Using the data for your system, <code>native_speed = 12000 / .143 = 83916 iterations/second</code>, which means you'll need around <code>83916 * .350 = 29575 rounds</code> to get ~350ms delay. </p>

<p>Things are a little tricker for bcrypt, because the amount of time it takes is logarithmically proportional to it's rounds parameter (<code>elapsed_time = (2 ** rounds) * native_speed</code>). Using the data for your system, <code>native_speed = (2 ** 12) / .405 = 10113 iterations/second</code>, which means you'll need around <code>log(10113 * .350, 2) = 11.79 rounds</code> to get ~350 ms delay. But since BCrypt only accepts integer rounds parameters, so you'll need to pick <code>rounds=11</code> (~200ms) or <code>rounds=12</code> (~400ms). </p>

<hr>

<p>All of this is something I'm hoping to fix in a future release of passlib. As a work in progress, passlib's mercurial repo currently contains a simple little script, <a href=""https://bitbucket.org/ecollins/passlib/raw/default/choose_rounds.py"" rel=""noreferrer"">choose_rounds.py</a>, which takes care of choosing the correct rounds value for a given target time. You can download and run it directly as follows (it may take 20s or so to run):</p>

<pre><code>$ python choose_rounds.py -h
usage: python choose_rounds.py &lt;hash_name&gt; [&lt;target_in_milliseconds&gt;]

$ python choose_rounds.py pbkdf2_sha512 350
hash............: pbkdf2_sha512
speed...........: 83916 iterations/second
target time.....: 350 ms
target rounds...: 29575  

$ python choose_rounds.py bcrypt 350
hash............: bcrypt
speed...........: 10113 iterations/second
target time.....: 350 ms
target rounds...: 11 (200ms -- 150ms faster than requested)
target rounds...: 12 (400ms -- 50ms slower than requested)
</code></pre>

<hr>

<p><em>(edit: added response regarding secure minimum rounds...)</em></p>

<p><em>Disclaimer: Determining a secure minimum is a surprisingly tricky question - there are a number of hard to quantify parameters, very little real world data, and some rigorously unhelpful theory. Lacking a good authority, I've been researching the topic myself; and for off-the-cuff calculations, I've boiled the raw data down to a short formula (below), which is generally what I use. Just be aware that behind it are a couple of pages of assumptions and rough estimates, making it more of a <a href=""http://en.wikipedia.org/wiki/Fermi_problem"" rel=""noreferrer"">Fermi Estimation</a> than an exact answer :|</em></p>

<p>My rule of thumb (mid 2012) for attacking PBKDF2-HMAC-SHA512 using GPUs is: </p>

<pre><code> days * dollars = 2**(n-31) * rounds
</code></pre>

<ul>
<li><code>days</code> is the number of days before the attacker has a 50/50 chance of guessing the password.</li>
<li><code>dollars</code> is the attackers' hardware budget (in $USD).</li>
<li><code>n</code> is the average amount of entropy in your user's passwords (in bits). </li>
</ul>

<p><em>To answer your script-kiddie question:</em> if an average password has 32 bits of entropy, and the attacker has a $2000 system with a good GPU, then at 30000 rounds they will need 30 days (<code>2**(32-31)*30000/2000</code>) to have a 50/50 chance of cracking a given hash. I'd recommend playing around with the values until you arrive at a rounds/days tradeoff that you're comfortable with. </p>

<p>Some things to keep in mind:</p>

<ul>
<li><p>The success rate of a dictionary attack isn't linear, it's more of ""long tail"" situation, so think of the 50/50 mark as more of a half-life. </p></li>
<li><p>That <code>31</code> is the key factor, as it encodes an estimation of the cost of attacking a specific algorithm using a specific technology level. The actual value, <code>2**-31</code>, measures the ""dollar-days per round"" it will cost an attacker. For comparison, attacking PBKDF2-HMAC-SHA512 using an <a href=""http://en.wikipedia.org/wiki/Application-specific_integrated_circuit"" rel=""noreferrer"">ASIC</a> has a factor closer to <code>46</code> -- larger numbers mean more bang for the attacker's buck, and less security per round for you, though script kiddies generally won't have that kind of budget :)</p></li>
</ul>
","3598","<python><encryption><pbkdf2>","7","19","1","2015-12-05 18:18:50","13572232","0","6","","","","2012-11-24 21:14:00",""
"27876420","CryptoJs's decrypt method returns an empty string","<p>I am trying to encrypt/decrypt using AES256 using Java for encryption and CryptoJS for decryption. <strong>Encryption</strong> is tested <strong>in Java</strong> is <strong>working fine</strong> but the decryption method in JavaScript is returning an empty string. Please note in order to test JavaScript I printed out in tmp file the values for data, IV and salt and then hardcoded in JS. (Note: format in file is: data (byte[] base64) , Iv(string base64) and salt(string base64)  ).</p>

<p>Here is the code in java:</p>

<pre><code>public byte[] encrypt(String plainText) throws Exception {        
    //get salt
    salt = generateSalt();      
    byte[] saltBytes = salt.getBytes(""UTF-8"");

    // Derive the key
    SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    PBEKeySpec spec = new PBEKeySpec(
            password.toCharArray(), 
            saltBytes, 
            pswdIterations, 
            keySize
            );

    SecretKey secretKey = factory.generateSecret(spec);
    SecretKeySpec secret = new SecretKeySpec(secretKey.getEncoded(), ""AES"");

    //encrypt the message
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    cipher.init(Cipher.ENCRYPT_MODE, secret);
    AlgorithmParameters params = cipher.getParameters();
    ivBytes = params.getParameterSpec(IvParameterSpec.class).getIV();
    byte[] encryptedTextBytes = cipher.doFinal(plainText.getBytes(""UTF-8""));
    return Base64.encode(encryptedTextBytes);
}
</code></pre>

<p><strong>what is wrong with the decryption code in JavaScript below?</strong></p>

<pre><code>// the password that user provides
var userPass = document.getElementById(""password"").value; 
console.log(""user pass : "" + userPass);
// hash contains 5 bytes
var hashedPass = CryptoJS.SHA1(userPass);
console.log(""hashed pass : "" + hashedPass.toString(CryptoJS.enc.Base64) + "" | array length "" + hashedPass.words.length + "" | "" + typeof(hashedPass));
// use only 4 bytes (128 bits) from the hashed pass
// (same as used in java when encrypting)
/////////////////////////var hashed4bytes =  CryptoJS.lib.WordArray.create(hashedPass.words.slice(0,4));
//console.log( ""hashed4bytes encoded 64 = "" + hashed4bytes.toString(CryptoJS.enc.Base64));

// get the encrypted msg 
var encMsg64 = document.getElementById(""themessage"").innerHTML;
encMsg64 = encMsg64.toString( CryptoJS.enc.Base64);
//var encMsg = CryptoJS.enc.Base64.parse(encMsg64);
var salt =CryptoJS.enc.Base64.parse(""EAWnOgxUDuvhWqrSUsugq1umMpI="");
var iv =CryptoJS.enc.Base64.parse(""xWpmXNbmbFjmWBUajuWYXQ=="");
//var salt = ""EAWnOgxUDuvhWqrSUsugq1umMpI="";
//var iv = ""xWpmXNbmbFjmWBUajuWYXQ=="";
 console.log('salt  '+ salt );
 console.log('iv  '+ iv );


 var key = CryptoJS.PBKDF2(hashedPass, salt, { keySize: 256/32, iterations: 1000 });
console.log( 'key '+ key);

var decText = '';
var ok = true;
try {
    debugger;
    var decMsg = CryptoJS.AES.decrypt( encMsg64, key, {
        iv:iv,
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.Pkcs7
        } );
    console.log( ""decryptedData = "" + decMsg );

    // convert to UTF8 string
    decText = decMsg.toString( CryptoJS.enc.Utf8 );
    console.log( ""decryptedText = "" + decText );

    if (decText == '') {
        ok = false;
    }   
}
catch (e) {
    //console.log(""Error when decrypting: "" + e.message)
    ok = false;
}
</code></pre>

<p><strong>after mafe the changed issue still persists 
Here is complete code after the change</strong></p>

<p>JAVA</p>

<pre><code>public class AES256EncryptionServiceBean implements EncryptionService {

    private static final Logger LOGGER = LoggerFactory
            .getLogger(AES256EncryptionServiceBean.class);
    private String salt = null; //get bytes out of UTF-8 for decryption
    private static final int PSWDITERATIONS = 1000;//65536;
    private static final int KEYSIZE = 256;
    private static final String AES_ALGO = ""AES"";
    private static final String SHA1_ALGO = ""PBKDF2WithHmacSHA1"";
    private static final String AES_CBC_PKCS5_TRANSFORM = ""AES/CBC/PKCS5Padding"";
    private byte[] Iv;

    /**
     * Encrypts the data with AES-256 algorithm Encrypted data will be encoded
     * with base64 algorithm and the returned. Initial vector is being used
     * during encryption along with CBC encryption mode.
     * 
     * output format: [algo indicator(1char)][Initialization vector()][salt()][encoded data(variable size)]
     */
    @Override
    public byte[] encrypt(String password, byte[] data) throws PibException {
        byte[] encodedData = null;
        try {
            byte[] encryptedData = encryptCBC256Bits(password, data);
            encodedData = Base64.encodeBase64(encryptedData);
            /*String finalStr=null;
            String algo256 = ""2"";
            String datastr = Base64.encodeBase64String(encryptedData);
            String ivstr = new String(Iv);
            finalStr = algo256 +ivstr+salt+datastr;

            encodedData = finalStr.getBytes();
             */
        } catch (Exception e) {
            throw ExceptionFactory.createPibException(
                    MessageCodes.PIB_ENCRYPTION_FAILED, e, LOGGER);
        }
        return encodedData;
    }

    /**
     * Encrypts the input data with AES CBC transformation using 256 bits (32
     * bytes) Key is generated based on the provided password and random salt.
     * Salt is the extra bits added to the password to ensure every key is
     * unique SHA1 hashing is also participate in key generation.
     * 
     * @throws PibException
     * 
     */
    private byte[] encryptCBC256Bits(String password, byte[] data)
            throws PibException {

        salt = generateSalt();
        byte[] saltBytes = salt.getBytes(StandardCharsets.UTF_8);
        byte[] encryptedTextBytes = null;

        // Derive the key

        try {
            SecretKeyFactory factory = SecretKeyFactory.getInstance(SHA1_ALGO);
            // Password based key specification
            PBEKeySpec spec = new PBEKeySpec(password.toCharArray(), saltBytes,
                    PSWDITERATIONS, KEYSIZE);
            SecretKey secretKey = factory.generateSecret(spec);
            SecretKeySpec secret = new SecretKeySpec(secretKey.getEncoded(),
                    AES_ALGO);

            // encrypt the data
            Cipher cipher = Cipher.getInstance(AES_CBC_PKCS5_TRANSFORM);
            // SecureRandom random = new SecureRandom();
            // byte[] ivTemp = new byte[16];
            // random.nextBytes(ivTemp);
            cipher.init(Cipher.ENCRYPT_MODE, secret);
            AlgorithmParameters params = cipher.getParameters();
            Iv = params.getParameterSpec(IvParameterSpec.class).getIV();
            encryptedTextBytes = cipher.doFinal(data);

        } catch (NoSuchAlgorithmException | InvalidKeySpecException
                | NoSuchPaddingException | InvalidKeyException
                | InvalidParameterSpecException | IllegalBlockSizeException
                | BadPaddingException e) {
            throw ExceptionFactory.createPibException(
                    MessageCodes.PIB_ENCRYPTION_FAILED, e, LOGGER);
        }

        return encryptedTextBytes;
    }

    private String generateSalt() {

        SecureRandom random = new SecureRandom();
        byte bytes[] = new byte[20];
        random.nextBytes(bytes);
        String s = new String(bytes);
        return s;

    }

    public String getSalt() {
        return salt;
    }

    public byte[] getIv() {
        return Iv;
    }

}
</code></pre>

<p><strong>Javascript</strong></p>

<pre><code>function decryptMsg256() {

                // the password that user provides
                var userPass = document.getElementById(""password"").value; 
                console.log(""user pass : "" + userPass);


                // get the encrypted msg 
                var encMsg64 = document.getElementById(""themessage"").innerHTML;
                var encMsg = CryptoJS.enc.Base64.parse(encMsg64);
                var salt =CryptoJS.enc.Utf8.parse(""?E€O5?…°®I^y??O:n"");
                var iv =CryptoJS.enc.Utf8.parse(""S;Ui?¨=ENzI—$"");

                 console.log('salt  '+ salt );
                 console.log('iv  '+ iv );


                 var key = CryptoJS.PBKDF2(""password"", salt, { keySize: 256/32, iterations: 1000 });
                console.log( 'key '+ key);

                var decText = '';
                var ok = true;
                try {
                    debugger;
                    var decMsg = CryptoJS.AES.decrypt( encMsg, key, {
                        iv:iv,
                        mode: CryptoJS.mode.CBC,
                        padding: CryptoJS.pad.Pkcs7
                        } );
                    console.log( ""decryptedData = "" + decMsg );

                    // convert to UTF8 string
                    decText = decMsg.toString( CryptoJS.enc.Utf8 );
                    console.log( ""decryptedText = "" + decText );

                    if (decText == '') {
                        ok = false;
                    }   
                }
                catch (e) {
                    //console.log(""Error when decrypting: "" + e.message)
                    ok = false;
                }
</code></pre>

<p><strong>I can not understands what is wrong please help</strong>
CipherText,Salt and Iv is retrieved as follows:</p>

<pre><code>public void testEncryption_WriteToFile() throws Exception {

        byte[] data = IOUtils.toByteArray(this.getClass().getClassLoader()
                .getResourceAsStream(SOME_FILE_NAME));

        byte[] encryptedData = this.encryptionService.encrypt(PASSWORD, data);
        byte[] initial_vector = ((AES256EncryptionServiceBean) encryptionService)
        .getIv();
        String salt = ((AES256EncryptionServiceBean) encryptionService)
                .getSalt();


        IOUtils.write(encryptedData, new FileOutputStream(
                ""C:\\Temp\\data.encrypted""));
        /*IOUtils.write(new String(encryptedData), new FileOutputStream(
                ""C:\\Temp\\data[byte32string].encrypted""));
        */
        IOUtils.write(Base64.encodeBase64String(salt.getBytes(StandardCharsets.UTF_8)), new FileOutputStream(
                ""C:\\Temp\\salt.encrypted""));
        /*IOUtils.write(salt.getBytes(StandardCharsets.UTF_8), new FileOutputStream(
                ""C:\\Temp\\salt.encrypted""));
        */
        IOUtils.write(Base64.encodeBase64String(initial_vector), new FileOutputStream(
                ""C:\\Temp\\iv.encrypted""));
        /*IOUtils.write(initial_vector, new FileOutputStream(
                ""C:\\Temp\\iv.encrypted""));*/


    }
</code></pre>
","<p><code>CryptoJS.PBKDF2</code> uses SHA1 by default. So as long as the same password, salt, keysize and iteration count is supplied, it will produce the same key. The problem is that in JavaScript you additionally hash the password with SHA1. Don't do that and pass the password directly into PBKDF2 in the same way you do this in Java.</p>

<p>The second problem is that the ciphertext should be in the native format of CryptoJS when trying to decrypt. Since you get the base 64 encoded ciphertext from Java, you have to decode it as such. Uncomment the line:</p>

<pre><code>var encMsg = CryptoJS.enc.Base64.parse(encMsg64);
</code></pre>

<p>and don't do <code>encMsg64 = encMsg64.toString( CryptoJS.enc.Base64);</code> since this will encode the already encoded ciphertext again.</p>

<hr>

<p>For the updated code, you cannot print your key and salt simply as a string and expect it to work in JavaScript. Those are <code>byte[]</code> for a reason. They contain unprintable characters which will be lost when you try to parse it in JavaScript. You have to encode all the <code>byte[]</code> values that you want to transport from Java to JavaScript as Base64 and then decode them in JavaScript.</p>
","3387","<javascript><encryption><aes><sha1><pbkdf2>","4","4","1","2016-09-11 01:35:48","27877101","7","3","1943173","","2015-01-11 14:01:27","2015-01-10 12:52:30",""
"11432111","Storing password and salt in MySQL DB using PBKDF2","<p>I have been trying to make my users passwords really secure using pbkdf2.</p>

<p>The password hash goes into the database fine, but the salt is not.</p>

<p>It seems the salt contains exotic characters that the mysql column doesnt like.</p>

<p>All columns in my 'users' table are UTF8_unicode_ci.</p>

<p>Here is my password hasher:</p>

<pre><code>$size = mcrypt_get_iv_size(MCRYPT_CAST_256, MCRYPT_MODE_CFB);
$salt = mcrypt_create_iv($size, MCRYPT_DEV_RANDOM);

$passHash = pbkdf2('SHA512', $pass, $salt, 8192, 256) ;

include(""dbconnect.php"") ;

$result = $dbh-&gt;prepare(""INSERT INTO users (name, email, qq, password, salt)VALUES(?, ?, ?, ?, ?)"") ;
    $result-&gt;bindParam(1, $name, PDO::PARAM_STR) ;
    $result-&gt;bindParam(2, $email, PDO::PARAM_STR) ;
    $result-&gt;bindParam(3, $qq, PDO::PARAM_STR) ;
    $result-&gt;bindParam(4, $passHash, PDO::PARAM_STR) ;
    $result-&gt;bindParam(5, $salt, PDO::PARAM_STR) ;
$result-&gt;execute() ;
</code></pre>

<p>And the pbkdf2:</p>

<pre><code>/*
 * PBKDF2 key derivation function as defined by RSA's PKCS #5: https://www.ietf.org/rfc/rfc2898.txt
 * $algorithm - The hash algorithm to use. Recommended: SHA256
 * $password - The password.
 * $salt - A salt that is unique to the password.
* $count - Iteration count. Higher is better, but slower. Recommended: At least 1000.
* $key_length - The length of the derived key in bytes.
* $raw_output - If true, the key is returned in raw binary format. Hex encoded otherwise.
* Returns: A $key_length-byte key derived from the password and salt.
*
* Test vectors can be found here: https://www.ietf.org/rfc/rfc6070.txt
*
* This implementation of PBKDF2 was originally created by https://defuse.ca
* With improvements by http://www.variations-of-shadow.com
*/
function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false){
$algorithm = strtolower($algorithm);
if(!in_array($algorithm, hash_algos(), true))
    die('PBKDF2 ERROR: Invalid hash algorithm.');
if($count &lt;= 0 || $key_length &lt;= 0)
    die('PBKDF2 ERROR: Invalid parameters.');

$hash_length = strlen(hash($algorithm, """", true));
$block_count = ceil($key_length / $hash_length);

$output = """";
for($i = 1; $i &lt;= $block_count; $i++) {
    // $i encoded as 4 bytes, big endian.
    $last = $salt . pack(""N"", $i);
    // first iteration
    $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
    // perform the other $count - 1 iterations
    for ($j = 1; $j &lt; $count; $j++) {
        $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
    }
    $output .= $xorsum;
}

if($raw_output)
    return substr($output, 0, $key_length);
else
    return bin2hex(substr($output, 0, $key_length));
}
</code></pre>

<hr>

<p>Also, I have just noticed that it is storing totally different hashes for passwords that are the same.</p>

<p>Am I doing this right?</p>
","<p>It's hard to give an exact answer to a question as broad as 'Am I doing this right?' I can say that the entire point of salting passwords before hashing is so that the resultant hash will be unique between users. So getting different output for the same input is a good thing. Look up 'dictionary attack' for more information on why.</p>

<p>As to your code, it sounds like what you really want to know is why your salt isn't getting stored to the database. Debugging steps I can think of, without more specific details</p>

<ul>
<li>$salt could be false, mcrypt_create_iv returns false on error (unlikely because of the hash output differences you mentioned above, but worth checking.</li>
<li>Output characters are not recognized as you suspect. You could try converting the database column types to varbinary and using a string to binary or hex decoder before adding to your prepare.</li>
<li>Try experimenting with column types with different character encodings and see what column type your salts can go into. UTF-8 uses a variable number of bytes for each character, which makes me uncomfortable when dealing with things that are absolutes. A salt and a hash are generally considered to be fixed-with bit fields, often expressed in hex format for convenience.</li>
</ul>

<p>I might be able to narrow down a problem if you provided your server environment, php version, mysql version etc. and a few samples of salts which aren't being stored correctly.</p>
","3269","<php><mysql><passwords><hash><pbkdf2>","2","1","2","2015-03-11 14:23:38","11589080","1","","1320129","","2012-07-11 12:15:55","2012-07-11 11:54:55",""
"11432111","Storing password and salt in MySQL DB using PBKDF2","<p>I have been trying to make my users passwords really secure using pbkdf2.</p>

<p>The password hash goes into the database fine, but the salt is not.</p>

<p>It seems the salt contains exotic characters that the mysql column doesnt like.</p>

<p>All columns in my 'users' table are UTF8_unicode_ci.</p>

<p>Here is my password hasher:</p>

<pre><code>$size = mcrypt_get_iv_size(MCRYPT_CAST_256, MCRYPT_MODE_CFB);
$salt = mcrypt_create_iv($size, MCRYPT_DEV_RANDOM);

$passHash = pbkdf2('SHA512', $pass, $salt, 8192, 256) ;

include(""dbconnect.php"") ;

$result = $dbh-&gt;prepare(""INSERT INTO users (name, email, qq, password, salt)VALUES(?, ?, ?, ?, ?)"") ;
    $result-&gt;bindParam(1, $name, PDO::PARAM_STR) ;
    $result-&gt;bindParam(2, $email, PDO::PARAM_STR) ;
    $result-&gt;bindParam(3, $qq, PDO::PARAM_STR) ;
    $result-&gt;bindParam(4, $passHash, PDO::PARAM_STR) ;
    $result-&gt;bindParam(5, $salt, PDO::PARAM_STR) ;
$result-&gt;execute() ;
</code></pre>

<p>And the pbkdf2:</p>

<pre><code>/*
 * PBKDF2 key derivation function as defined by RSA's PKCS #5: https://www.ietf.org/rfc/rfc2898.txt
 * $algorithm - The hash algorithm to use. Recommended: SHA256
 * $password - The password.
 * $salt - A salt that is unique to the password.
* $count - Iteration count. Higher is better, but slower. Recommended: At least 1000.
* $key_length - The length of the derived key in bytes.
* $raw_output - If true, the key is returned in raw binary format. Hex encoded otherwise.
* Returns: A $key_length-byte key derived from the password and salt.
*
* Test vectors can be found here: https://www.ietf.org/rfc/rfc6070.txt
*
* This implementation of PBKDF2 was originally created by https://defuse.ca
* With improvements by http://www.variations-of-shadow.com
*/
function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false){
$algorithm = strtolower($algorithm);
if(!in_array($algorithm, hash_algos(), true))
    die('PBKDF2 ERROR: Invalid hash algorithm.');
if($count &lt;= 0 || $key_length &lt;= 0)
    die('PBKDF2 ERROR: Invalid parameters.');

$hash_length = strlen(hash($algorithm, """", true));
$block_count = ceil($key_length / $hash_length);

$output = """";
for($i = 1; $i &lt;= $block_count; $i++) {
    // $i encoded as 4 bytes, big endian.
    $last = $salt . pack(""N"", $i);
    // first iteration
    $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
    // perform the other $count - 1 iterations
    for ($j = 1; $j &lt; $count; $j++) {
        $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
    }
    $output .= $xorsum;
}

if($raw_output)
    return substr($output, 0, $key_length);
else
    return bin2hex(substr($output, 0, $key_length));
}
</code></pre>

<hr>

<p>Also, I have just noticed that it is storing totally different hashes for passwords that are the same.</p>

<p>Am I doing this right?</p>
","<p>You should <a href=""http://php.net/manual/en/function.base64-encode.php"" rel=""nofollow"" title=""convert"">convert</a> the result into <a href=""http://en.wikipedia.org/wiki/Base64"" rel=""nofollow"" title=""base64 encoding"">base64 encoding</a> before storing to a varchar column.  Base64 encoding basically converts an array of bytes into something in the ASCII range of displayable (and therefore SQL storable) characters.</p>
","3269","<php><mysql><passwords><hash><pbkdf2>","2","1","2","2015-03-11 14:23:38","11589080","1","","1320129","","2012-07-11 12:15:55","2012-07-11 11:54:55",""
"12766852","PBKDF2 Password Hashing for PHP","<p>Thanks to some great advice on a recent post I'm implementing PBKDF2 from
<a href=""https://defuse.ca/php-pbkdf2.htm"" rel=""nofollow"">https://defuse.ca/php-pbkdf2.htm</a> into a small PHP image gallery I'm building to teach myself some PHP.</p>

<p>I understand that you store the salt and the hash in the database and then reconstruct them to match when the user enters their password. What I don't understand is how the validate_password function on the above website works when it generates a different, unique salt for the same password.</p>

<p>For example, I created a test repeatedly generating a password of just my name (andrew). Each time the final hash was different, presumably due to the salt being unique? However, it did not matter which generated hash I compared the password too, it validated it. (It obviously didn't validate a totally different password like Andrew56 or ndrew1).</p>

<p>Can anyone explain to my simple self why this is the case? It seems like I don't even need to store the salt? I hope this isn't off topic.</p>

<pre><code>&lt;?php
/*
 * Password hashing with PBKDF2.
 * Author: havoc AT defuse.ca
 * www: https://defuse.ca/php-pbkdf2.htm
 */

// These constants may be changed without breaking existing hashes.
define(""PBKDF2_HASH_ALGORITHM"", ""sha256"");
define(""PBKDF2_ITERATIONS"", 1000);
define(""PBKDF2_SALT_BYTES"", 24);
define(""PBKDF2_HASH_BYTES"", 24);

define(""HASH_SECTIONS"", 4);
define(""HASH_ALGORITHM_INDEX"", 0);
define(""HASH_ITERATION_INDEX"", 1);
define(""HASH_SALT_INDEX"", 2);
define(""HASH_PBKDF2_INDEX"", 3);

function create_hash($password)
{
// format: algorithm:iterations:salt:hash
$salt = base64_encode(mcrypt_create_iv(PBKDF2_SALT_BYTES, MCRYPT_DEV_URANDOM));
return PBKDF2_HASH_ALGORITHM . "":"" . PBKDF2_ITERATIONS . "":"" .  $salt . "":"" . 
    base64_encode(pbkdf2(
        PBKDF2_HASH_ALGORITHM,
        $password,
        $salt,
        PBKDF2_ITERATIONS,
        PBKDF2_HASH_BYTES,
        true
    ));
}

function validate_password($password, $good_hash)
{
$params = explode("":"", $good_hash);
if(count($params) &lt; HASH_SECTIONS)
   return false; 
$pbkdf2 = base64_decode($params[HASH_PBKDF2_INDEX]);
return slow_equals(
    $pbkdf2,
    pbkdf2(
        $params[HASH_ALGORITHM_INDEX],
        $password,
        $params[HASH_SALT_INDEX],
        (int)$params[HASH_ITERATION_INDEX],
        strlen($pbkdf2),
        true
    )
);
}

// Compares two strings $a and $b in length-constant time.
function slow_equals($a, $b)
{
$diff = strlen($a) ^ strlen($b);
for($i = 0; $i &lt; strlen($a) &amp;&amp; $i &lt; strlen($b); $i++)
{
    $diff |= ord($a[$i]) ^ ord($b[$i]);
}
return $diff === 0; 
}

/*
 * PBKDF2 key derivation function as defined by RSA's PKCS #5:         https://www.ietf.org/rfc/rfc2898.txt
 * $algorithm - The hash algorithm to use. Recommended: SHA256
 * $password - The password.
 * $salt - A salt that is unique to the password.
 * $count - Iteration count. Higher is better, but slower. Recommended: At least 1000.
 * $key_length - The length of the derived key in bytes.
 * $raw_output - If true, the key is returned in raw binary format. Hex encoded otherwise.
 * Returns: A $key_length-byte key derived from the password and salt.
 *
 * Test vectors can be found here: https://www.ietf.org/rfc/rfc6070.txt
 *
 * This implementation of PBKDF2 was originally created by https://defuse.ca
 * With improvements by http://www.variations-of-shadow.com
 */
function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
{
$algorithm = strtolower($algorithm);
if(!in_array($algorithm, hash_algos(), true))
    die('PBKDF2 ERROR: Invalid hash algorithm.');
if($count &lt;= 0 || $key_length &lt;= 0)
    die('PBKDF2 ERROR: Invalid parameters.');

$hash_length = strlen(hash($algorithm, """", true));
$block_count = ceil($key_length / $hash_length);

$output = """";
for($i = 1; $i &lt;= $block_count; $i++) {
    // $i encoded as 4 bytes, big endian.
    $last = $salt . pack(""N"", $i);
    // first iteration
    $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
    // perform the other $count - 1 iterations
    for ($j = 1; $j &lt; $count; $j++) {
        $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
    }
    $output .= $xorsum;
}

if($raw_output)
    return substr($output, 0, $key_length);
else
    return bin2hex(substr($output, 0, $key_length));
}
?&gt;
</code></pre>
","<p>I found this looking for a PBKDF2 implementation for an older PHP version. For anyone else happening to hit this page, if you're using this method directly:</p>

<pre><code>pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
</code></pre>

<p>Then, it does NOT include the salt with the output string, just the hash, which is what I was desiring.</p>

<p>The <code>create_hash</code> method is what the Original Poster was using and, with his settings above, that would return:</p>

<pre><code>sha256:1000:$salt:$hash
</code></pre>

<p>This allows you to save it all in one db column, which is easy to use.  However, I would note that you ""might"" still want to split it up if you care about storage space.  With a hexidecimal salt and password, you can reduce the storage space it takes in half by storing it in a binary column...e.g. in MySQL this is done with <code>SET binaryColumn=UNHEX('0F0F')</code>, and then <code>SELECT HEX(binaryColumn) AS binaryColumn</code>.  It's more work, so it comes down to your own preference and goals, but thought I'd throw it out there.</p>
","3153","<php><hash><pbkdf2>","0","0","1","2014-12-04 18:09:52","","2","1","","","","2012-10-07 07:14:13",""
"14825477","basic php pbkdf2 hashing","<p>I am relatively new to php, and just beginning to grasp the point of salt when it comes to hashing passwords (I think?). Anyways, here's my problem...</p>

<p>Right now I have a mysql database with a username, password, salt field. The password field length is 64 chars, the salt field is 3 chars. Upon registry, each username is assigned a random salt. I am not having any issues with this (I believe). First, the user's desired password is hashed via:</p>

<pre><code>$hashedinput = hash ('sha256', $input);
</code></pre>

<p>The user's desired password is then hashed with the salt included with pbkdf2 by the following procedure, and entered in the database:</p>

<pre><code>$password = pbkdf2('sha256', $hashedinput, $salt, 10000, 64);
</code></pre>

<p><strong>My problem is the log in.</strong> When comparing the hashed password in the database to the password the user inputs, it always comes back !=. Here is what I do to validate login:</p>

<pre><code>$userData = mysql_fetch_array($search, MYSQL_ASSOC);
$inputhash = hash('sha256', $input); // From Form
$salt = $userData['salt']; // Salt from DB
$password = pbkdf2('sha256', $inputhash, $salt, 10000, 64);
$knownpassword = $userData['password']; // Known password from DB
</code></pre>

<p>So, to troubleshoot I echo'd all the outputs and this is what it looks like when I enter the CORRECT password (and it doesn't log me in):</p>

<p>Input password: 3d8bc905668c1a1cca5b53a78941d3ca4673e12df6ac5e98e19fa47b153406f6e66913e43bf60478907ca07429b0cf90c808ce2097e0544cc44d298bfb7b85ad</p>

<p>DB password: 3d8bc905668c1a1cca5b53a78941d3ca4673e12df6ac5e98e19fa47b153406f6</p>

<p>Note that the input password has the first 64 characters correct, but it continues to go on for 128 chars total. The DB password is just 64.</p>

<p>Thanks ahead of time!</p>
","<p>Thomas Ptacek <a href=""http://hashphp.org/hashing.html"" rel=""nofollow"">wrote a great article</a> a while back explaining - in some detail - what salt is, why it's useful, and gave the #1 rule you need to memorize regarding password hashing systems:</p>

<blockquote>
  <p>Use someone else’s password system. Don’t build your own.</p>
</blockquote>

<p>If you are going to be using PHP 5.5 in your application, use the new <a href=""http://php.net/password-hash"" rel=""nofollow"">password_hash</a> API; if you're not, make sure you're using at least PHP 5.3 and use the <a href=""https://github.com/ircmaxell/password_compat"" rel=""nofollow"">password_hash userland compatability library</a>. They are designed to take all the pain out of this for you.</p>
","3142","<php><hash><salt><pbkdf2>","1","1","1","2013-02-12 04:44:19","14825516","0","1","","","","2013-02-12 04:39:49",""
"18648927","Creating a password user registration using make_password django","<p>I'm trying to create a registration form where a user enter's in a username/password combination.</p>

<p>I want the password to use  <code>MyPBKDF2</code> for password hashing.</p>

<p>I have <strong>hashers.py</strong></p>

<pre><code>from django.contrib.auth.hashers import PBKDF2PasswordHasher

    class MyPBKDF2PasswordHasher(PBKDF2PasswordHasher):
        """"""
        A subclass of PBKDF2PasswordHasher that uses 100 times more iterations.
        """"""
        iterations = PBKDF2PasswordHasher.iterations * 100
</code></pre>

<p><strong>settings.py</strong></p>

<pre><code>PASSWORD_HASHERS = (
    'MyApp.hashers.MyPBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.SHA1PasswordHasher',
    'django.contrib.auth.hashers.MD5PasswordHasher',
    'django.contrib.auth.hashers.CryptPasswordHasher',
)
</code></pre>

<p><strong>views.py</strong></p>

<pre><code>def Registration(request):
    RegForm = RegistrationForm(request.POST or None)
    if request.method == 'POST':
        if RegForm.is_valid():

            clearUserName = RegForm.cleaned_data['userNm']   #set clean username
            hashpass = make_password(RegForm.cleaned_data['userPass'], None, 'pbkdf2_sha256')

            RegForm.save()
            try:
                return HttpResponseRedirect('/Newuser/?userNm=' + clearUserName)
            except:
                raise ValidationError(('Invalid request'), code='300')    ## [ TODO ]: add a custom error page here.
    else:
        RegForm = RegistrationForm()

        return render(request, 'Myapp/reuse/register.html', {
            'RegForm': RegForm 
        })
</code></pre>

<p><strong>forms.py</strong>
c</p>

<pre><code>lass RegistrationForm(ModelForm):
    userPass = forms.CharField(widget=forms.PasswordInput, label='Password')
    class Meta:
        model = Client
        fields = ['userNm','userPass']


def clean_RegForm(self):
    cleanedUserName = self.cleaned_data.get('userNm')
    if Client.objects.filter(userNm=cleanedUserName).exists():
        errorMsg = u""Error occurred.""
        raise ValidationError(errorMsg)
    else:
        return cleanedUserName
</code></pre>

<p>I'm getting the password submitting, but in plain text - which is no good.</p>

<p>What am I doing wrong here?</p>
","<p>Well.. you're creating hashed password, but not saving it anywhere.
And because you're saving form (which inherits from ModelForm), the password fields is saved straight from the password form field.</p>

<p>You can override save method and set <code>hashpass</code> as password. But I think the best practice here is to use <code>UserCreationForm</code> which handles password hashing for you (it will use the first password hasher from your list).</p>

<p>There are some examples here on SO, showing how to customize UserCreationForm, so search around.</p>

<p><strong>Pseudo-code:</strong></p>

<p>forms.py</p>

<pre><code>from django.contrib.auth.forms import UserCreationForm


class RegisterForm(UserCreationForm):
    def __init__(self, *args, **kwargs):
        super(RegisterForm, self).__init__(*args, **kwargs)
        # do not require password confirmation
        del self.fields['password2']
</code></pre>

<p>views.py</p>

<pre><code>def home(request):
    form = RegisterForm()

    if request.method == ""POST"":
        form = RegisterForm(request.POST)

        if form.is_valid():
            user = form.save()
            # redirect!

    return render(request, 'home.html', {
        'form': form
    })
</code></pre>
","3083","<python><django><hash><passwords><pbkdf2>","0","2","1","2013-09-06 15:49:28","18658230","2","","975947","","2013-09-06 12:09:51","2013-09-06 02:27:42",""
"7593424","How do I wait for a callback in coffeescript (or javascript)?","<p>I'm working on a password manager webapp that uses Parvez Anandam's pbkdf2.js for key generation (that is, turning a text password into a suitable 256 bit key for AES). I'm using the project to learn coffeescript. I'm having trouble getting the data out of the callbacks. Here's my code:</p>

<pre><code>keygen = (password, salt, iterations) -&gt;
  key = 1
  pbkdf = new PBKDF2 password, salt, iterations, size_in_bytes
  pbkdf.deriveKey ((p) -&gt;), ((k) -&gt;
    key = k
    console.log ""within callback "" + key
    )
  console.log ""straight line path "" + key
</code></pre>

<p>Since deriveKey returns immediately, I don't have the data -- the last line prints ""1"". What's the proper way to deal with this? In java I would expect to get a Future-like object back, which I can join or wait on, but I realize that my backend habits may not be appropriate for UI code. Should I call a 'continue' function from the callback that moves on to the encryption and submitting the form?</p>
","<p>The usual approach is to send in a callback function that the asynchronous task can call when it has finished. Something like this:</p>

<pre><code>keygen = (password, salt, iterations, finished) -&gt;
  key = 1
  pbkdf = new PBKDF2 password, salt, iterations, size_in_bytes
  pbkdf.deriveKey ((p) -&gt;), ((k) -&gt;
    key = k
    console.log ""within callback "" + key
    finished key
    )
  console.log ""straight line path "" + key
</code></pre>

<p>So you'd supply the <code>finished</code> function when you call <code>keygen</code> and <code>finished</code> would do whatever needs to be done when the <code>key</code> is available. Your <code>finished</code> would usually be an anonymous closure.</p>

<p>You'll see a lot of this sort of thing if you look at any of the AJAX libraries (such as jQuery): you pass functions to functions, functions all the way down.</p>
","2822","<javascript><asynchronous><callback><coffeescript><pbkdf2>","1","3","1","2011-09-29 06:58:17","7593578","0","","","","","2011-09-29 06:41:27",""
"15268890","why is my pbkdf2 implementation so slow (vs. SQLCipher)?","<p>I have written a simple Android App on my Xoom tablet, which simply stores some string notes in a SQLCipher database. </p>

<p>The user is prompted to type in a passphrase which will be used for the database by the SQLCipher lib. This works fine so far and very smooth.</p>

<p>Now I have also implemented a small PBKDF2 algorithm for authentication purposes
(in fact, i want to encrypt some other files in the future, wich cannot be stored in a database).
But as for now, i only came to check if my pbkdf2 algorithm is correct. 
I only used the javax.crypto and java.security libs.</p>

<p>Code snippet as follows:</p>

<pre><code>int derivedKeyLength = 128;
int iterations = 500;
KeySpec spec = new PBEKeySpec(passphrase.toCharArray(), salt, iterations, derivedKeyLength);
SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
byte[] derivedKey = f.generateSecret(spec).getEncoded();    
</code></pre>

<p>The salt is a 16 byte random number, generated with SecureRandom.</p>

<p>So I hardcoded the key and the salt and compare the the derivedKey for authentication (only a test case!)</p>

<p>My Problem now is, that on my Xoom it lasts about 5 seconds until the deriving function is done, although the iteration is set to 500 only.</p>

<p>AFAIK SQLCipher is using an iteration number of 4000 by default, and it responds instant, if the key is wrong or correct.
(if I set the iteration to 4000, it takes at least 15seconds)</p>

<p>The question is, did I implemented that inefficient or is it because SQLCipher is just that good in performance (native NDK functions, etc..)? </p>

<p>Thank you in advance
p.s: sorry, my english isnt that great yet!</p>

<p><strong>Edit:</strong> </p>

<p>Sorry, I was not clear enough :-)</p>

<p>I know PBKDF2 is supposed to be slow (in specific the iteration amount, to slow down brute force attacks), thats exactly the reason I am asking! I wanted to set the iteration number to lets say  5000 (which is not acceptable, with over 15seconds)</p>

<p>I'm just wondering because, like I said, SQLCipher also uses PBKDF2 (Iteration = 4k, while I am using <strong>500</strong>) for deriving a key from a given password. I'm not talking about the encryption with AES in the end, its only about the difference in deriving the key.</p>

<p>Of course it seems legit that SQLCipher is way faster than an self made keyderiving function, but I did not think that it would be this much difference, since SCLCipher's PBKDF2 really works instant!</p>

<p>Greetings!</p>
","<p>OK, that (see below) is not exactly your problem, PBKDF2 is slow but should be <em>nowhere as slow</em> as described with those parameters on that hardware.
There are some stats (and tips) here on Android PBE/KDF performance: <a href=""http://nelenkov.blogspot.com/2012/04/using-password-based-encryption-on.html"" rel=""nofollow noreferrer"">http://nelenkov.blogspot.com/2012/04/using-password-based-encryption-on.html</a> . <code>SecretKeyFactory</code> performance problems are not unknown: <a href=""https://stackoverflow.com/questions/3814972/any-way-around-awful-secretkeyfactory-performance-with-lvl-and-aesobfuscator"">Any way around awful SecretKeyFactory performance with LVL and AESObfuscator?</a> .</p>

<p><code>SecretKeyFactory</code> is likely using pure Java implementation. <em>SQLCipher</em> has two relevant features:</p>

<ul>
<li>it uses OpenSSL, compiled native code (on my <em>desktop</em> OpenSSL's PBKDF2 is nearly 100x faster than
a JVM6 <code>SecretKeyFactory</code> version for 2000 iterations, excluding JVM startup time. I haven't 
compared AES speed, it appears other people find it slow on Android too)</li>
<li>the 4000 iteration PBKDF2 is only done on database open, after that there's at most 2 iterations
for the page HMAC secret (assuming the default configuration, as documented)</li>
</ul>

<p>Your code seems correct, there should not be such a large (linear?) performance degradation when you increase your iterations. The <em>Xoom</em> should be running a non-ancient JVM with JIT, can you verify the performance problem with <a href=""https://stackoverflow.com/questions/2860943/suggestions-for-library-to-hash-passwords-in-java"">other code</a>?</p>

<p><hr>
PBKDF2 is <em>designed</em> to be slow (see the answer to this question <a href=""https://security.stackexchange.com/questions/7689/clarification-needed-for-nists-whitepaper-recommendation-for-password-based-ke"">https://security.stackexchange.com/questions/7689/clarification-needed-for-nists-whitepaper-recommendation-for-password-based-ke</a> ) due to the intended <a href=""http://en.wikipedia.org/wiki/Key_stretching"" rel=""nofollow noreferrer"">key stretching</a> operation. The iteration counter lets you trade off speed for security.</p>

<p>AES was always <a href=""http://cryptome.org/jya/aescomm.htm"" rel=""nofollow noreferrer"">intended to be fast</a> and is
fast (<a href=""http://csrc.nist.gov/archive/aes/round1/conf2/Schneier.pdf"" rel=""nofollow noreferrer"">speed comparison PDF</a>, the chosen AES candidate is referred to by its original name <em>Rijndael</em> in that paper).</p>

<p>I assume you are comparing the PBKDF2 computation time directly to the time taken to perform an SQL operation on your SQLCipher database which will almost certainly have been designed to be fast. </p>

<p>You are effectively comparing two different operations with different requirements, hence the speed difference.</p>
","2719","<java><android><pbkdf2>","7","8","2","2013-03-08 08:09:20","15289402","2","3","2143931","","2013-03-07 12:04:42","2013-03-07 10:02:39",""
"15268890","why is my pbkdf2 implementation so slow (vs. SQLCipher)?","<p>I have written a simple Android App on my Xoom tablet, which simply stores some string notes in a SQLCipher database. </p>

<p>The user is prompted to type in a passphrase which will be used for the database by the SQLCipher lib. This works fine so far and very smooth.</p>

<p>Now I have also implemented a small PBKDF2 algorithm for authentication purposes
(in fact, i want to encrypt some other files in the future, wich cannot be stored in a database).
But as for now, i only came to check if my pbkdf2 algorithm is correct. 
I only used the javax.crypto and java.security libs.</p>

<p>Code snippet as follows:</p>

<pre><code>int derivedKeyLength = 128;
int iterations = 500;
KeySpec spec = new PBEKeySpec(passphrase.toCharArray(), salt, iterations, derivedKeyLength);
SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
byte[] derivedKey = f.generateSecret(spec).getEncoded();    
</code></pre>

<p>The salt is a 16 byte random number, generated with SecureRandom.</p>

<p>So I hardcoded the key and the salt and compare the the derivedKey for authentication (only a test case!)</p>

<p>My Problem now is, that on my Xoom it lasts about 5 seconds until the deriving function is done, although the iteration is set to 500 only.</p>

<p>AFAIK SQLCipher is using an iteration number of 4000 by default, and it responds instant, if the key is wrong or correct.
(if I set the iteration to 4000, it takes at least 15seconds)</p>

<p>The question is, did I implemented that inefficient or is it because SQLCipher is just that good in performance (native NDK functions, etc..)? </p>

<p>Thank you in advance
p.s: sorry, my english isnt that great yet!</p>

<p><strong>Edit:</strong> </p>

<p>Sorry, I was not clear enough :-)</p>

<p>I know PBKDF2 is supposed to be slow (in specific the iteration amount, to slow down brute force attacks), thats exactly the reason I am asking! I wanted to set the iteration number to lets say  5000 (which is not acceptable, with over 15seconds)</p>

<p>I'm just wondering because, like I said, SQLCipher also uses PBKDF2 (Iteration = 4k, while I am using <strong>500</strong>) for deriving a key from a given password. I'm not talking about the encryption with AES in the end, its only about the difference in deriving the key.</p>

<p>Of course it seems legit that SQLCipher is way faster than an self made keyderiving function, but I did not think that it would be this much difference, since SCLCipher's PBKDF2 really works instant!</p>

<p>Greetings!</p>
","<p>Ok I figured out what the problem was.</p>

<p>If I <strong>disconnect</strong> the device from my PC it works instant. Also if I reconnect it after that.</p>

<p>Now even with an iteration amount of 5000 and above, the deriving function only needs less than a second!! This is great, since my Xoom isn't the newest of all devices!</p>

<p>May be it is because of the debug mode or something, I don't really know actually!</p>

<p>Anyways, thanks to mr.spuratic. Hope this helps someone in the future :-)</p>
","2719","<java><android><pbkdf2>","7","2","2","2013-03-08 08:09:20","15289402","2","3","2143931","","2013-03-07 12:04:42","2013-03-07 10:02:39",""
"14236479","crypto.pbkdf2 is asynchronous, how do I treat it as synchronous?","<p>I'm using pbkdf2 in node.js for hashing passwords. </p>

<p>My problem is that I'm responding to a request for authentication and I'm in the middle of authenticating if the passed credentials are correct. I'm presuming that pbkdf2 is async as it could potentially take a large amount of time (dependant on the size of the iterations). However moving the remaining authentication logic into a separate method to utilise the callback seems a tad ugly.</p>

<p>Is there a better approach than either using a timer or throwing all the consecutive authentication logic into a separate function?  I know most will say that I should use the callback, but in my use case this just doesn't make sense. I cannot continue authentication until I have applied pbkdf2 to the passed password.</p>
","<p>I can see two solutions for your problem.</p>

<p>First one is to use some library to wrap asynchronous calls. You may try <a href=""https://github.com/0ctave/node-sync"" rel=""noreferrer"">node-sync</a> or <a href=""https://github.com/kriszyp/node-promise"" rel=""noreferrer"">node-promise</a>. <code>node-sync</code> is better suited for what you want.</p>

<p>Second solution is to use <a href=""https://github.com/ncb000gt/node.bcrypt.js/"" rel=""noreferrer"">bcrypt</a> instead of crypto:</p>

<pre><code>var bcrypt = require('bcrypt');
var salt = bcrypt.genSaltSync(10);
var hash = bcrypt.hashSync(password, salt);
</code></pre>

<p><code>bcrypt</code> is a special library for password hashing in node. It's more secure then build-in crypto module and provides some useful methods like <code>hashSync</code> and <code>compareSync</code>.</p>
","2704","<javascript><node.js><asynchronous><callback><pbkdf2>","6","6","2","2013-03-25 04:24:06","14236899","0","0","22514","","2013-03-25 04:24:06","2013-01-09 13:37:36",""
"14236479","crypto.pbkdf2 is asynchronous, how do I treat it as synchronous?","<p>I'm using pbkdf2 in node.js for hashing passwords. </p>

<p>My problem is that I'm responding to a request for authentication and I'm in the middle of authenticating if the passed credentials are correct. I'm presuming that pbkdf2 is async as it could potentially take a large amount of time (dependant on the size of the iterations). However moving the remaining authentication logic into a separate method to utilise the callback seems a tad ugly.</p>

<p>Is there a better approach than either using a timer or throwing all the consecutive authentication logic into a separate function?  I know most will say that I should use the callback, but in my use case this just doesn't make sense. I cannot continue authentication until I have applied pbkdf2 to the passed password.</p>
","<p>According to the <a href=""http://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_callback"" rel=""noreferrer"">Node.js crypto docs</a>, there is both an asynchronous and synchronous version of the PBKDF2 function.</p>

<blockquote>
  <p><strong>crypto.pbkdf2(password, salt, iterations, keylen, callback)</strong></p>
  
  <p>Asynchronous PBKDF2 applies pseudorandom function HMAC-SHA1 to derive
  a key of given length from the given password, salt and iterations.
  The callback gets two arguments <code>(err, derivedKey)</code>.</p>
  
  <p><strong>crypto.pbkdf2Sync(password, salt, iterations, keylen)</strong></p>
  
  <p>Synchronous PBKDF2 function. Returns derivedKey or throws error.</p>
</blockquote>
","2704","<javascript><node.js><asynchronous><callback><pbkdf2>","6","7","2","2013-03-25 04:24:06","14236899","0","0","22514","","2013-03-25 04:24:06","2013-01-09 13:37:36",""
"26168544","PBKDF2 Python keys vs .NET Rfc2898","<p>I am trying to write a Python module that will encrypt text that our existing .NET classes can decrypt. As far as I can tell, my code lines, up but it isn't decrypting (I get an 'Invalid padding length' error on the C# side). My pkcs7 code looks good, but research indicates that invalid keys could cause this same problem.</p>

<p>What's different between these two setups? 
Python:</p>

<pre><code>derived_key = PBKDF2(crm_key, salt, 256 / 8, iterations)
iv = PBKDF2(crm_key, salt, 128 / 8, iterations)

encoder = pkcs7.PKCS7Encoder()

cipher = AES.new(derived_key, AES.MODE_CBC, iv)
decoded = cipher.decrypt(encoded_secret)

#encode - just stepped so i could debug. 
padded_secret = encoder.encode(secret)              # 1
encodedtext = cipher.encrypt(padded_secret)         # 2
based_secret = base64.b64encode(encodedtext)        # 3
</code></pre>

<p>I thought that based_secret could get passed up to C# and decoded there. But it fails. The same encrypting c# code is:</p>

<pre><code>var rfc = new Rfc2898DeriveBytes(key, saltBytes);


        // create provider &amp; encryptor
        using (var cryptoProvider = new AesManaged())
        {
            // Set cryptoProvider parameters
            cryptoProvider.BlockSize = cryptoProvider.LegalBlockSizes[0].MaxSize;
            cryptoProvider.KeySize = cryptoProvider.LegalKeySizes[0].MaxSize;

            cryptoProvider.Key = rfc.GetBytes(cryptoProvider.KeySize / 8);
            cryptoProvider.IV = rfc.GetBytes(cryptoProvider.BlockSize / 8);

            using (var encryptor = cryptoProvider.CreateEncryptor())
            {
                // Create a MemoryStream.
                using (var memoryStream = new MemoryStream())
                {
                    // Create a CryptoStream using the MemoryStream and the encryptor.
                    using (var cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write))
                    {
                        // Convert the passed string to a byte array.
                        var valueBytes = Encoding.UTF8.GetBytes(plainValue);

                        // Write the byte array to the crypto stream and flush it.
                        cryptoStream.Write(valueBytes, 0, valueBytes.Length);
                        cryptoStream.FlushFinalBlock();

                        // Get an array of bytes from the
                        // MemoryStream that holds the
                        // encrypted data.
                        var encryptBytes = memoryStream.ToArray();

                        // Close the streams.
                        cryptoStream.Close();
                        memoryStream.Close();

                        // Return the encrypted buffer.
                        return Convert.ToBase64String(encryptBytes);
                    }
                }
            }
</code></pre>

<p>The Python pkcs7 implementation I'm using is:
<a href=""https://gist.github.com/chrix2/4171336"" rel=""noreferrer"">https://gist.github.com/chrix2/4171336</a></p>
","<p>First off, I verified that Rfc2898 and PBKDF2 are the same thing. Then, as stated above, the problem appears to be a .net ism. I found on <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.getbytes(v=vs.110).aspx"" rel=""noreferrer"">msdn</a> </p>

<p>that the implementation of GetBytes inside of Rfc2898DeriveBytes changes on each call, ie. it holds state. (see the remarks about halfway down the page)</p>

<p>Example in Python (pseudo output):</p>

<pre><code>derived_key = PBKDF2(key, salt, 32, 1000)
iv = PBKDF2(key, salt, 16, 1000)
print(base64.b64encode(derived_key))
print(base64.b64encode(iv))
$123456789101112134==
$12345678==
</code></pre>

<p>Same(ish) code in .NET (again, pseudo output):</p>

<pre><code>var rfc = new Rfc2898DeriveBytes(key, saltBytes);
    using (var cryptoProvider = new AesManaged())
    {
        // Set cryptoProvider parameters
        cryptoProvider.BlockSize = cryptoProvider.LegalBlockSizes[0].MaxSize;
        cryptoProvider.KeySize = cryptoProvider.LegalKeySizes[0].MaxSize;

        cryptoProvider.Key = rfc.GetBytes(cryptoProvider.KeySize / 8);
        cryptoProvider.IV = rfc.GetBytes(cryptoProvider.BlockSize / 8);
    }
Console.Writeline(Convert.ToBase64(cryptoProvider.Key));
Console.Writeline(Convert.ToBase64(cryptoProvider.IV));

$123456789101112134==
$600200300==
</code></pre>

<p>Subsequent calls to rfc.GetBytes always produces different results. MSDN says it compounds the key sizes on the calls. So if you call GetBytes(20), twice, it's the same as calling GetBytes(20+20) or GetBytes(40). Theoretically, this should just increase the size of the key, not completely change it. </p>

<p>There are some solutions to get around this issue, which could be generating a longer key on the first call, then slicing it into both a derived key AND an IV, or randomly generating an IV, appending it to the encoded message and peeling it off before decrypting it. </p>

<p>Slicing the python output produces the same results as .NET. It looks like this:</p>

<pre><code>derived_key = PBKDF2(key, salt, 32, 1000)
iv = PBKDF2(key, salt, 32 + 16, 1000) # We need 16, but we're compensating for .NETs 'already called' awesomeness on the GetBytes method
split_key = iv[32:]

print(base64.b64encode(derived_key))
print(base64.b64encode(iv))
print(base64.b64encode(split_key))

$ 123456789101112134==   # matches our derived key
$ 12345678== # doesn't match
$ 600200300== # matches. this is the base 64 encoded version of the tailing 16 bytes.
</code></pre>

<p>Enjoy,</p>
","2696","<c#><python><encryption><aes><pbkdf2>","8","9","1","2014-10-07 15:28:28","26235883","4","3","815724","","2014-10-02 23:57:09","2014-10-02 19:52:13",""
"43299936","How to implement Scrypt in Java?","<p>I have really been struggling trying to get Bouncy Castle Scrypt going in my web app for password encryption. I am fairly new to programming in Java and security.</p>

<p>I have tried looking at Bouncy Castle's <a href=""https://www.bouncycastle.org/docs/docs1.5on/org/bouncycastle/crypto/generators/SCrypt.html"" rel=""nofollow noreferrer"">documentation for their Scrypt class</a>. However, I have a really hard time trying to figure out how it works. It doesn't seem to really give much information as to how to create the class or anything like that.</p>

<p>I searched around Stack Exchange and Google to see if there is anywhere that could give me a good example as to what I should do to create this class. I found <a href=""https://stackoverflow.com/questions/22226867/bouncy-castle-scrypt-implementation/41992593#41992593"">this question and answer</a>, and I tried it out without creating a class, but that didn't seem to work either.</p>

<p>To top this off, my import doesn't seem to want to work either.</p>

<p>This is all of the code that I have:</p>

<pre><code>import org.bouncycastle.crypto.generators;

public class SCrypt extends java.lang.Object {

    public Scrypt(){}

    public static byte[] generate(byte[] P,byte[] S,int N,int r,int p,int dkLen) {

    }
}
</code></pre>

<p>I want to use Scrypt since it seems to be the most secure in encrypting passwords, but it seems next impossible to implement. I'm really close with just going with a PBKDF2 since there is more documentation on it, but I'm hoping that there is someone out there who can help me get this going.</p>
","<p>Thanks Hugo for the feedback!
After much struggle and searching, I found this website: <a href=""http://www.itcsolutions.eu/2011/08/22/how-to-use-bouncy-castle-cryptographic-api-in-netbeans-or-eclipse-for-java-jse-projects/"" rel=""nofollow noreferrer"">http://www.itcsolutions.eu/2011/08/22/how-to-use-bouncy-castle-cryptographic-api-in-netbeans-or-eclipse-for-java-jse-projects/</a></p>

<p>This helped give me a breakdown step-by-step on what I needed to get Bouncy Castle up and running on my computer.
I hope this will help others since I struggled with it for so long to find something that broke this down into layman's terms. :)  </p>
","2433","<java><bouncycastle><pbkdf2><scrypt>","3","1","1","2019-07-24 16:07:00","","2","","10271334","","2019-07-24 16:07:00","2017-04-08 20:15:11",""
"41284174","RAND_bytes doesn't give the same result from the same seed","<p>I'm trying to program custom RSA key pair generation algorithm using OpenSSL. I've used the <code>PKCS5_PBKDF2_HMAC_SHA1</code> function to generate PRNG seed, so, I've used this seed as RAND_seed input.</p>

<p>Unfortunately every time I call <code>RAND_bytes</code>, with the same seed, I obtain different random numbers, but this isn't the expected behaviour, because as say the answer at <a href=""https://crypto.stackexchange.com/questions/1662/how-can-one-securely-generate-an-asymmetric-key-pair-from-a-short-passphrase"">How can one securely generate an asymmetric key pair from a short passphrase?</a> the random number generator is deterministic (same seed same output).</p>

<p>Below is the test case. I've declared also constant seed, but the generation is never deterministic.</p>

<pre><code>unsigned int seed = 0x00beef00;
unsigned int rnum[5];
RAND_seed(&amp;seed, sizeof(seed));
RAND_bytes((unsigned char *)&amp;rnum[0], sizeof(rnum));
</code></pre>

<p>Where is the error?</p>
","<p>This is not an error.  The OpenSSL random number generator does some seeding on its own using good sources of randomness.  </p>

<p>So using the same seed value in <code>RAND_seed</code> does not guarantee the same sequence of random numbers.  This is a Good Thing because it makes them less predictable and therefore more secure.</p>

<p>From the man page for <code>RAND_seed</code>:</p>

<blockquote>
<pre><code>    #include &lt;openssl/rand.h&gt;

    void RAND_seed(const void *buf, int num);

    void RAND_add(const void *buf, int num, double entropy);

    int  RAND_status(void);

    int  RAND_event(UINT iMsg, WPARAM wParam, LPARAM lParam);
    void RAND_screen(void);
</code></pre>
  
  <p><code>RAND_add()</code> mixes the <code>num</code> bytes at <code>buf</code> into the PRNG state. Thus, if
  the    data at <code>buf</code> are unpredictable to an adversary, this increases
  the    uncertainty about the state and makes the PRNG output less
  predictable.    Suitable input comes from user interaction (random key
  presses, mouse    movements) and certain hardware events. The <code>entropy</code>
  argument is (the    lower bound of) an estimate of how much randomness
  is contained in buf,    measured in bytes. Details about sources of
  randomness and how to estimate their entropy can be found in the
  literature, e.g. RFC 1750.</p>
  
  <p><code>RAND_add()</code> may be called with sensitive data such as user entered
  passwords. The seed values cannot be recovered from the PRNG
  output.</p>
  
  <p>OpenSSL makes sure that the PRNG state is unique for each thread.
  <strong>On    systems that provide ""/dev/urandom"", the randomness device is
  used to    seed the PRNG transparently.</strong> However, on all other systems,
  the application is responsible for seeding the PRNG by calling
  <code>RAND_add()</code>,    <code>RAND_egd(3)</code> or <code>RAND_load_file(3)</code>.</p>
  
  <p><code>RAND_seed()</code> is equivalent to <code>RAND_add()</code> when <code>num == entropy</code>.</p>
</blockquote>

<p>So if your system has <code>/dev/urandom</code>, it will be used as the initial seed for the PRNG.</p>
","2174","<c><openssl><pbkdf2>","4","3","2","2016-12-28 22:47:56","","2","1","-1","","2017-04-13 12:48:18","2016-12-22 13:20:22","2019-10-06 04:39:55"
"41284174","RAND_bytes doesn't give the same result from the same seed","<p>I'm trying to program custom RSA key pair generation algorithm using OpenSSL. I've used the <code>PKCS5_PBKDF2_HMAC_SHA1</code> function to generate PRNG seed, so, I've used this seed as RAND_seed input.</p>

<p>Unfortunately every time I call <code>RAND_bytes</code>, with the same seed, I obtain different random numbers, but this isn't the expected behaviour, because as say the answer at <a href=""https://crypto.stackexchange.com/questions/1662/how-can-one-securely-generate-an-asymmetric-key-pair-from-a-short-passphrase"">How can one securely generate an asymmetric key pair from a short passphrase?</a> the random number generator is deterministic (same seed same output).</p>

<p>Below is the test case. I've declared also constant seed, but the generation is never deterministic.</p>

<pre><code>unsigned int seed = 0x00beef00;
unsigned int rnum[5];
RAND_seed(&amp;seed, sizeof(seed));
RAND_bytes((unsigned char *)&amp;rnum[0], sizeof(rnum));
</code></pre>

<p>Where is the error?</p>
","<p>Openssl's <code>int RAND_bytes(unsigned char *buf, int num);</code> tries to make things as random as it can.  That is apparently a feature you don't want, and are instead looking for a repeatable pseudorandom sequence</p>

<p>But Openssl also has </p>

<p><code>int RAND_pseudo_bytes(unsigned char *buf, int num);</code></p>

<p>which is probably what you are looking for, the <em>pseudo</em> part, to give you the repeatable sequence.</p>

<p><a href=""https://linux.die.net/man/3/rand_pseudo_bytes"" rel=""nofollow noreferrer"">https://linux.die.net/man/3/rand_pseudo_bytes</a></p>

<p><a href=""https://stackoverflow.com/questions/7437177/force-openssls-rngs-to-return-a-repeatable-byte-sequence/7510354#7510354"">Force openssl&#39;s RNGs to return a repeatable byte sequence</a></p>

<p>As an aside, if you are doing RSA, a repeatable random sequence isn't all that good, because what you are looking for are two large primes.  Doing a large PRNG number, then testing for prime is probably a bad idea.  Half of them will be divisible by 2! :)</p>

<p>If I recall correctly, you need to pick a good starting number, make it odd by ORing with 1, then test for prime, and if it is not, increment by 4 and try again. </p>

<p>Once you find them, you probably will not want to do it again using repeatable PRNG bytes to start your search.  </p>

<p>And while I'm pretty sure this is for a learning project, but if all you want is a RSA key pair from openssl check out</p>

<p><a href=""https://stackoverflow.com/a/5246045/6047952"">https://stackoverflow.com/a/5246045/6047952</a></p>
","2174","<c><openssl><pbkdf2>","4","-1","2","2016-12-28 22:47:56","","2","1","-1","","2017-04-13 12:48:18","2016-12-22 13:20:22","2019-10-06 04:39:55"
"16723117","Storing secure password MD5, BCRYPT, PBKDF2 ( PDO, MySQL, PHP )","<p><em><strong>What is the best and most secure way of storing a password into MySQL using PHP.</em></strong> </p>

<p><em>My views as from what I've read online.</em></p>

<p><strong>MD5</strong>  - Outdated and easily breachable.
<em>(Example not needed)</em></p>

<p><strong>BCRYPT</strong> - Secure with 60 char, without reusing the salts.
<em>( Unable to find a working example.</em></p>

<p><strong>PBKDF2</strong> - Most secure way of storing passwords into database. <em>( example below )</em></p>

<pre><code>    define(""PBKDF2_HASH_ALGORITHM"", ""sha256"");
define(""PBKDF2_ITERATIONS"", 1000);
define(""PBKDF2_SALT_BYTES"", 24);
define(""PBKDF2_HASH_BYTES"", 24);

define(""HASH_SECTIONS"", 4);
define(""HASH_ALGORITHM_INDEX"", 0);
define(""HASH_ITERATION_INDEX"", 1);
define(""HASH_SALT_INDEX"", 2);
define(""HASH_PBKDF2_INDEX"", 3);

function create_hash($password){
    // format: algorithm:iterations:salt:hash
    $salt = base64_encode(mcrypt_create_iv(PBKDF2_SALT_BYTES, MCRYPT_DEV_URANDOM));
    return PBKDF2_HASH_ALGORITHM . "":"" . PBKDF2_ITERATIONS . "":"" .  $salt . "":"" .
        base64_encode(pbkdf2(
            PBKDF2_HASH_ALGORITHM,
            $password,
            $salt,
            PBKDF2_ITERATIONS,
            PBKDF2_HASH_BYTES,
            true
        ));
}

function validate_password($password, $good_hash){
    $params = explode("":"", $good_hash);
    if(count($params) &lt; HASH_SECTIONS)
       return false;
    $pbkdf2 = base64_decode($params[HASH_PBKDF2_INDEX]);
    return slow_equals(
        $pbkdf2,
        pbkdf2(
            $params[HASH_ALGORITHM_INDEX],
            $password,
            $params[HASH_SALT_INDEX],
            (int)$params[HASH_ITERATION_INDEX],
            strlen($pbkdf2),
            true
        )
    );
}

// Compares two strings $a and $b in length-constant time.
function slow_equals($a, $b){
    $diff = strlen($a) ^ strlen($b);
    for($i = 0; $i &lt; strlen($a) &amp;&amp; $i &lt; strlen($b); $i++)
    {
        $diff |= ord($a[$i]) ^ ord($b[$i]);
    }
    return $diff === 0;
}
function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false){
    $algorithm = strtolower($algorithm);
    if(!in_array($algorithm, hash_algos(), true))
        die('PBKDF2 ERROR: Invalid hash algorithm.');
    if($count &lt;= 0 || $key_length &lt;= 0)
        die('PBKDF2 ERROR: Invalid parameters.');

    $hash_length = strlen(hash($algorithm, """", true));
    $block_count = ceil($key_length / $hash_length);

    $output = """";
    for($i = 1; $i &lt;= $block_count; $i++) {
        // $i encoded as 4 bytes, big endian.
        $last = $salt . pack(""N"", $i);
        // first iteration
        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
        // perform the other $count - 1 iterations
        for ($j = 1; $j &lt; $count; $j++) {
            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
        }
        $output .= $xorsum;
    }

    if($raw_output)
        return substr($output, 0, $key_length);
    else
        return bin2hex(substr($output, 0, $key_length));
}
</code></pre>
","<p>Take a look at some of @ircmaxell's stuff. Hes got a github repository to add the new <code>password_*</code> functions of <code>php5.5</code> into lower versions (5.3+)</p>

<p><a href=""https://github.com/ircmaxell/password_compat"" rel=""nofollow"">password_compat</a></p>

<p><a href=""http://blog.ircmaxell.com/search/label/Password-Hashing"" rel=""nofollow"">His Blog</a></p>
","2141","<php><mysql><md5><bcrypt><pbkdf2>","1","1","2","2013-05-23 20:47:30","16723616","3","0","2304549","","2013-05-23 20:23:45","2013-05-23 20:17:25",""
"16723117","Storing secure password MD5, BCRYPT, PBKDF2 ( PDO, MySQL, PHP )","<p><em><strong>What is the best and most secure way of storing a password into MySQL using PHP.</em></strong> </p>

<p><em>My views as from what I've read online.</em></p>

<p><strong>MD5</strong>  - Outdated and easily breachable.
<em>(Example not needed)</em></p>

<p><strong>BCRYPT</strong> - Secure with 60 char, without reusing the salts.
<em>( Unable to find a working example.</em></p>

<p><strong>PBKDF2</strong> - Most secure way of storing passwords into database. <em>( example below )</em></p>

<pre><code>    define(""PBKDF2_HASH_ALGORITHM"", ""sha256"");
define(""PBKDF2_ITERATIONS"", 1000);
define(""PBKDF2_SALT_BYTES"", 24);
define(""PBKDF2_HASH_BYTES"", 24);

define(""HASH_SECTIONS"", 4);
define(""HASH_ALGORITHM_INDEX"", 0);
define(""HASH_ITERATION_INDEX"", 1);
define(""HASH_SALT_INDEX"", 2);
define(""HASH_PBKDF2_INDEX"", 3);

function create_hash($password){
    // format: algorithm:iterations:salt:hash
    $salt = base64_encode(mcrypt_create_iv(PBKDF2_SALT_BYTES, MCRYPT_DEV_URANDOM));
    return PBKDF2_HASH_ALGORITHM . "":"" . PBKDF2_ITERATIONS . "":"" .  $salt . "":"" .
        base64_encode(pbkdf2(
            PBKDF2_HASH_ALGORITHM,
            $password,
            $salt,
            PBKDF2_ITERATIONS,
            PBKDF2_HASH_BYTES,
            true
        ));
}

function validate_password($password, $good_hash){
    $params = explode("":"", $good_hash);
    if(count($params) &lt; HASH_SECTIONS)
       return false;
    $pbkdf2 = base64_decode($params[HASH_PBKDF2_INDEX]);
    return slow_equals(
        $pbkdf2,
        pbkdf2(
            $params[HASH_ALGORITHM_INDEX],
            $password,
            $params[HASH_SALT_INDEX],
            (int)$params[HASH_ITERATION_INDEX],
            strlen($pbkdf2),
            true
        )
    );
}

// Compares two strings $a and $b in length-constant time.
function slow_equals($a, $b){
    $diff = strlen($a) ^ strlen($b);
    for($i = 0; $i &lt; strlen($a) &amp;&amp; $i &lt; strlen($b); $i++)
    {
        $diff |= ord($a[$i]) ^ ord($b[$i]);
    }
    return $diff === 0;
}
function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false){
    $algorithm = strtolower($algorithm);
    if(!in_array($algorithm, hash_algos(), true))
        die('PBKDF2 ERROR: Invalid hash algorithm.');
    if($count &lt;= 0 || $key_length &lt;= 0)
        die('PBKDF2 ERROR: Invalid parameters.');

    $hash_length = strlen(hash($algorithm, """", true));
    $block_count = ceil($key_length / $hash_length);

    $output = """";
    for($i = 1; $i &lt;= $block_count; $i++) {
        // $i encoded as 4 bytes, big endian.
        $last = $salt . pack(""N"", $i);
        // first iteration
        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
        // perform the other $count - 1 iterations
        for ($j = 1; $j &lt; $count; $j++) {
            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
        }
        $output .= $xorsum;
    }

    if($raw_output)
        return substr($output, 0, $key_length);
    else
        return bin2hex(substr($output, 0, $key_length));
}
</code></pre>
","<p>There is also an <a href=""https://github.com/DomBlack/php-scrypt"" rel=""nofollow noreferrer"">SCRYPT php implementation</a>, which is an advanced version of bcrypt. <a href=""https://security.stackexchange.com/questions/4781/do-any-security-experts-recommend-bcrypt-for-password-storage"">This post</a> have a good answer on the subject. </p>
","2141","<php><mysql><md5><bcrypt><pbkdf2>","1","0","2","2013-05-23 20:47:30","16723616","3","0","2304549","","2013-05-23 20:23:45","2013-05-23 20:17:25",""
"26311686","BCrypt vs PBKDF2WithHmacSHA1","<p>In order to hash passwords securely, which algorithm should I use? <code>BCrypt</code> or <code>PBKDF2WithHmacSHA1</code>?</p>

<p>Which is more secure? <code>PBKDF2WithHmacSHA1</code> is built into Java while <code>BCrypt</code> is available via <a href=""http://www.mindrot.org/projects/jBCrypt/"" rel=""nofollow"">jBCrypt</a> library (which has mostly received positive reviews).</p>

<p>Also if I go with <code>BCrypt</code> should I limit my user's password entry to 55 characters only (since that is the limit of <code>BCrypt</code>)? </p>

<p>It would be helpful if you are <code>Java</code> specific.<br/>
Do note that I would go for the option that makes the passwords more secure and brute-forcing more difficult.</p>
","<p><strong>It doesn't really matter.</strong></p>

<p>The difference between the security of the two of them is not significant enough to arrive at a meaningful choice. If you are looking for a thorough discussion, though, take a look at both links in Eugene's comments</p>

<p><strong>What <em>does</em> matter is that you them correctly.</strong></p>

<p>That means:</p>

<ul>
<li>Choosing a right cost factor / iteration count. If you are thorough, you will want to benchmark how slow a hash function your servers can tolerate. The slower (=higher cost factor / iteration count) the better. To give you a ballpark number, my full disk encryption software has determined that PBKDF2 with HmacSHA1 needs ~10000 iterations to run 50ms.</li>
<li>Using salt correctly: Each password needs an accompanying random value (salt), that you store alongside the hash and use as input for each hashing. Don't use the same salt with every password, <a href=""https://security.stackexchange.com/questions/3272/password-hashing-add-salt-pepper-or-is-salt-enough"">that would be pepper</a> and is nice to have, but no replacement for salt.</li>
<li>Store your password in an upgradable way. At some time later you might want to change the cost factor or add a pepper value or change the hashing scheme to scrypt, once it is widely accepted. To allow for that, the database entries need to tell which parameter choice were used to generate the password. As an example, see <a href=""https://stackoverflow.com/a/6833165/371137"">this commonly used unix passwords storage format</a>.</li>
</ul>

<p><strong>""Also if I go with BCrypt should I limit my user's password entry to 55 characters only (since that is the limit of BCrypt)?""</strong></p>

<p>No. Hash the password once with SHA1 or SHA256 and use the output like you would have used the password before. If you want to apply pepper, this is the spot to do it. Finally, if it sounds like to much of a hassle, this might be the deciding factor to use PBKDF2 instead of bcrypt. </p>
","2067","<java><security><bcrypt><pbkdf2><jbcrypt>","1","2","2","2014-10-13 11:11:03","26338600","3","1","1215488","","2014-10-11 06:26:47","2014-10-11 06:07:39","2014-11-02 16:58:53"
"26311686","BCrypt vs PBKDF2WithHmacSHA1","<p>In order to hash passwords securely, which algorithm should I use? <code>BCrypt</code> or <code>PBKDF2WithHmacSHA1</code>?</p>

<p>Which is more secure? <code>PBKDF2WithHmacSHA1</code> is built into Java while <code>BCrypt</code> is available via <a href=""http://www.mindrot.org/projects/jBCrypt/"" rel=""nofollow"">jBCrypt</a> library (which has mostly received positive reviews).</p>

<p>Also if I go with <code>BCrypt</code> should I limit my user's password entry to 55 characters only (since that is the limit of <code>BCrypt</code>)? </p>

<p>It would be helpful if you are <code>Java</code> specific.<br/>
Do note that I would go for the option that makes the passwords more secure and brute-forcing more difficult.</p>
","<p>They are not the same, and they are not equally secure.</p>

<p>On a CPU, they both use about the same amount of resources, and are about the same at defending the password.</p>

<p>The issue comes down to GPU based attacks. Due to the architectures of GPUs, bcrypt is actually harder to run than SHA1 (or SHA256). Therefore, it's easier to parallelize PBKDF2 + sha1 than it is bcrypt.</p>

<p>To put some actual numbers on it, we'll draw from <a href=""http://passwords12.at.ifi.uio.no/Jeremi_Gosney_Password_Cracking_HPC_Passwords12.pdf"" rel=""nofollow noreferrer"">This presentation</a>.</p>

<p>Sha-1 is about 3x more expensive than md5. So if we look at the slow hashing function slides, we can conclude that md5crypt is about 3x faster than pbkdf2-sha1. That's quite a bit of guesswork, but it's in the margin of what we're looking for.</p>

<p>So that means, that for an equavilent CPU runtime, we can expect PBKDF2-sha1 to run about 25 Million hashes per second on the GPU cluster. Compare that to BCrypt (with cost 5) which runs at 75 Thousand hashes per second.</p>

<p>So that implies that PBKDF2+sha1 is about 1000 times weaker than bcrypt at equivalent cost settings.</p>

<p>Note though that PBDFK2+sha512 is almost as slow as bcrypt. This has to do with SHA-512 using 64 bit operations (which aren't native in today's GPUs). </p>

<p>So in short, bcrypt is orders of magnitude more secure than PBKDF2+SHA1. It's more secure than PBKDF2+SHA512, but not by as much of a margin.</p>

<p>And this relies on GPU architecture of today. In the future, if cache sizes and instruction sets change significantly, these differences could wash out. And that's why newer algorithms like scrypt exist.</p>

<p>So just use bcrypt. <a href=""https://stackoverflow.com/questions/16594613/how-to-hash-long-passwords-72-characters-with-blowfish/16597402#16597402"">And don't worry about the character limit</a></p>
","2067","<java><security><bcrypt><pbkdf2><jbcrypt>","1","4","2","2014-10-13 11:11:03","26338600","3","1","1215488","","2014-10-11 06:26:47","2014-10-11 06:07:39","2014-11-02 16:58:53"
"26175391","How to match crowd database passwords?","<p>I would like to have a piece of code that is able to check if a given password match the one stored in the crowd cwd_user table.</p>

<p>The passwords in that table starts with ""{PKCS5S2}..."" and I found in the link below that crowd is using the PBKDF2 algorithm:</p>

<blockquote>
  <p>The default is ""Atlassian Security"", which is currently a dumb wrapper around Bouncy Castle's implementation of PKCS 5 version 2 (aka PBKDF2), using a random 16 byte salt, 10, 000 iterations, and generating a 256-bit hash as the final output</p>
</blockquote>

<p><a href=""https://answers.atlassian.com/questions/235858/password-security"" rel=""nofollow noreferrer"">https://answers.atlassian.com/questions/235858/password-security</a></p>

<p>Is anybody able to provide me a method I can use to match that password?</p>

<p>For example, if I create a user ""toto"" with password ""1234"", I get the following row in my database :</p>

<pre><code>user_name     credential                                                                
------------- ------------------------------------------------------------------------- 
toto          {PKCS5S2}m+u8ed1RKRew3jjHPilZw0ICL6BG/qyeN+kVRRS9nsO+VK7Q5I0vCK3gLvCFWC3n 
</code></pre>

<p>I would like a method such that:</p>

<pre><code>public String getHash(String rowPassword){
    // ?????
}
</code></pre>

<p>where</p>

<pre><code>getHash(""1234"") returns ""{PKCS5S2}m+u8ed1RKRew3jjHPilZw0ICL6BG/qyeN+kVRRS9nsO+VK7Q5I0vCK3gLvCFWC3n"" 
</code></pre>
","<p>As a Crowd customer, you have access to the class <a href=""https://docs.atlassian.com/atlassian-crowd/2.7.1/com/atlassian/crowd/password/encoder/AtlassianSecurityPasswordEncoder.html"" rel=""nofollow""><code>AtlassianSecurityPasswordEncoder</code></a> which is exactly that.</p>

<p>The underlying encoder chooses a random salt, ignoring the one passed in, so <code>encodePassword</code> won't give you the same hash each time. Use <code>isPasswordValid</code> to confirm that the password and hash match.</p>
","2003","<pbkdf2><atlassian-crowd>","3","3","1","2017-08-10 16:21:41","26181054","1","2","881229","","2017-08-10 16:21:41","2014-10-03 08:05:24",""
"32367961","Hash password and return string with special characters","<p>I am trying to use a hashing algorithm that is really strong and outputs special characters in the encoded string in PHP. Currently I am using hash_pbkdf2 which I understand to be the most secure form of hashing at the moment but it doesn't output a string with special characters only uppercase and lowercase. Is there any way to modify it to do such or is there another algorithm that would work better? Maybe if I combined this with another encryption algorithm which would then take the output of the hash_pbkdf2 and encrypt it to something with special characters as well?</p>
","<p>If you are using it to hash passwords to store them password_hash() (<a href=""http://php.net/manual/en/function.password-hash.php"" rel=""nofollow"">http://php.net/manual/en/function.password-hash.php</a>) or crypt() (<a href=""http://php.net/manual/en/function.crypt.php"" rel=""nofollow"">http://php.net/manual/en/function.crypt.php</a>) are better suited</p>
","1992","<php><hash><special-characters><pbkdf2>","0","1","3","2015-09-03 07:40:16","32368113","0","","1816580","","2015-09-03 07:35:31","2015-09-03 05:57:38",""
"32367961","Hash password and return string with special characters","<p>I am trying to use a hashing algorithm that is really strong and outputs special characters in the encoded string in PHP. Currently I am using hash_pbkdf2 which I understand to be the most secure form of hashing at the moment but it doesn't output a string with special characters only uppercase and lowercase. Is there any way to modify it to do such or is there another algorithm that would work better? Maybe if I combined this with another encryption algorithm which would then take the output of the hash_pbkdf2 and encrypt it to something with special characters as well?</p>
","<p>you can use this:</p>

<pre><code>$input = ""YourPassword"";
$EncryptionKey = ""sFdhgdvDRg4353FDgdfg"";

 $encrypted = EncryptIt( $input);

echo ""Encrypted: "" . EncryptIt( $input ) . ""&lt;br/&gt;"";
echo ""Decrypted: "". DecryptIt( $encrypted );



function EncryptIt( $q ) {
$cryptKey  = $EncryptionKey;
 $qEncoded      = base64_encode( mcrypt_encrypt( MCRYPT_RIJNDAEL_256, md5(         $cryptKey ), $q, MCRYPT_MODE_CBC, md5( md5( $cryptKey ) ) ) );
return( $qEncoded );
}

function DecryptIt( $q ) {
$cryptKey  = $EncryptionKey;
$qDecoded      = rtrim( mcrypt_decrypt( MCRYPT_RIJNDAEL_256, md5( $cryptKey ), base64_decode( $q ), MCRYPT_MODE_CBC, md5( md5( $cryptKey ) ) ), ""\0"");
return( $qDecoded );
}
</code></pre>
","1992","<php><hash><special-characters><pbkdf2>","0","-2","3","2015-09-03 07:40:16","32368113","0","","1816580","","2015-09-03 07:35:31","2015-09-03 05:57:38",""
"32367961","Hash password and return string with special characters","<p>I am trying to use a hashing algorithm that is really strong and outputs special characters in the encoded string in PHP. Currently I am using hash_pbkdf2 which I understand to be the most secure form of hashing at the moment but it doesn't output a string with special characters only uppercase and lowercase. Is there any way to modify it to do such or is there another algorithm that would work better? Maybe if I combined this with another encryption algorithm which would then take the output of the hash_pbkdf2 and encrypt it to something with special characters as well?</p>
","<p><code>hash_pbkdf2()</code> outputs a hex encoded result by default. You can pass in a <code>true</code> as the sixth function argument in order to receive a raw binary output, but then you get unprintable characters.</p>

<p>If you're interested in getting only printable characters, you can try encoding the result by changing the base from 16 (hex) to 94 (all printable ASCII characters). Here is an <a href=""http://forums.devnetwork.net/viewtopic.php?f=19&amp;t=139289"" rel=""nofollow"">example code</a>.</p>
","1992","<php><hash><special-characters><pbkdf2>","0","0","3","2015-09-03 07:40:16","32368113","0","","1816580","","2015-09-03 07:35:31","2015-09-03 05:57:38",""
"39402514","Convert C# PBKDF2 using Rfc2898DeriveBytes to PHP","<p>Long story short have a membership system built in .NET that we are porting to WordPress and need to replicate the PBKDF2 encryption so users don't need to reset their passwords.</p>

<p>Using a know hashed password I've been able to replicate this in .NET easily, with the following code:</p>

<pre><code>static void Main(string[] args)
{
  var isValid = CheckPassword(""#0zEZcD7uNmv"", ""5SyOX+Rbclzvvit3MEM2nBRaPVo2M7ZTs7n3znXTfyW4OhwTlJLvpcUlCryblgkQ"");
}

public static int PBKDF2IterCount = 10000;
public static int PBKDF2SubkeyLength = 256 / 8; // 256 bits
public static int SaltSize = 128 / 8; // 128 bits

private static bool CheckPassword(string Password, string ExistingHashedPassword)
{
  byte[] saltAndPassword = Convert.FromBase64String(ExistingHashedPassword);
  byte[] salt = new byte[SaltSize];

  Array.Copy(saltAndPassword, 0, salt, 0, SaltSize);

  Console.WriteLine(""--Salt--"");
  Console.WriteLine(Convert.ToBase64String(salt));

  string hashedPassword = HashPassword(Password, salt);

  Console.WriteLine(""--HashedPassword--"");
  Console.WriteLine(hashedPassword);

  return hashedPassword == ExistingHashedPassword;
}

private static string HashPassword(string Password, byte[] salt)
{
  byte[] hash = new byte[PBKDF2SubkeyLength];
  using (var pbkdf2 = new Rfc2898DeriveBytes(Password, salt, PBKDF2IterCount))
  {
    hash = pbkdf2.GetBytes(PBKDF2SubkeyLength);
  }

  byte[] hashBytes = new byte[PBKDF2SubkeyLength + SaltSize];
  Array.Copy(salt, 0, hashBytes, 0, SaltSize);
  Array.Copy(hash, 0, hashBytes, SaltSize, PBKDF2SubkeyLength);

  string hashedPassword = Convert.ToBase64String(hashBytes);
  return hashedPassword;
}
</code></pre>

<p>The console app will produce the following:</p>

<pre><code>--Salt--
5SyOX+Rbclzvvit3MEM2nA==
--HashedPassword--
5SyOX+Rbclzvvit3MEM2nBRaPVo2M7ZTs7n3znXTfyW4OhwTlJLvpcUlCryblgkQ
--IsValid--
True
</code></pre>

<p>However in the PHP side I can't get the same results. My code so far is below.</p>

<pre><code>$mySalt = base64_decode('5SyOX+Rbclzvvit3MEM2nA==');
$dev = pbkdf2('sha1', '#0zEZcD7uNmv', $mySalt, 10000, 48, true);
$key = substr($dev, 0, 32); //Keylength: 32
$iv = substr($dev, 32, 16); // IV-length: 16

echo 'PHP&lt;br/&gt;';
echo 'PASS: '.base64_encode($dev).'&lt;br/&gt;';
echo 'SALT: '.base64_encode($iv).'&lt;br/&gt;&lt;br/&gt;'; 

echo '.NET&lt;br/&gt;';
echo 'PASS: 5SyOX+Rbclzvvit3MEM2nBRaPVo2M7ZTs7n3znXTfyW4OhwTlJLvpcUlCryblgkQ&lt;br/&gt;';
echo 'SALT: 5SyOX+Rbclzvvit3MEM2nA==&lt;br/&gt;&lt;br/&gt;'; 

function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
{
    $algorithm = strtolower($algorithm);
    if(!in_array($algorithm, hash_algos(), true))
        die('PBKDF2 ERROR: Invalid hash algorithm.');
    if($count &lt;= 0 || $key_length &lt;= 0)
        die('PBKDF2 ERROR: Invalid parameters.');

    $hash_length = strlen(hash($algorithm, """", true));
    $block_count = ceil($key_length / $hash_length);

    $output = """";
    for($i = 1; $i &lt;= $block_count; $i++) {
        // $i encoded as 4 bytes, big endian.
        $last = $salt . pack(""N"", $i);
        // first iteration
        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
        // perform the other $count - 1 iterations
        for ($j = 1; $j &lt; $count; $j++) {
            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
        }
        $output .= $xorsum;
    }
    return substr($output, 0, $key_length);
}
</code></pre>

<p>And the results are:</p>

<pre><code>PHP
PASS: FFo9WjYztlOzuffOddN/Jbg6HBOUku+lxSUKvJuWCRCsYe+1Tgbb8Ob4FtxumMal
SALT: rGHvtU4G2/Dm+BbcbpjGpQ==

.NET
PASS: 5SyOX+Rbclzvvit3MEM2nBRaPVo2M7ZTs7n3znXTfyW4OhwTlJLvpcUlCryblgkQ
SALT: 5SyOX+Rbclzvvit3MEM2nA==
</code></pre>

<p>Any help would be appreciated.</p>
","<p>Ended up getting it working using the <a href=""https://github.com/defuse/password-hashing"" rel=""noreferrer"">https://github.com/defuse/password-hashing</a> libraries, with some minor changes match the format of hashes I was working with database I'm importing.</p>

<p>But my main problem was with these lines where I'm trying to get a key out of a hash.</p>

<pre><code>$dev = pbkdf2('sha1', '#0zEZcD7uNmv', $mySalt, 10000, 48, true);
$key = substr($dev, 0, 32); //Keylength: 32
$iv = substr($dev, 32, 16); // IV-length: 16
</code></pre>

<p>Changing it to the below, so that it is creating a hash hash that is 32 bits long and joining the returning hash to the salt fixed the issue.</p>

<pre><code>$dev = pbkdf2('sha1', '#0zEZcD7uNmv', $mySalt, 10000, 32, true);
echo 'PASS: '.base64_encode($mySalt.$dev).'&lt;br /&gt;';
</code></pre>

<p>With the output below now matching .NET:</p>

<pre><code>PASS: 5SyOX+Rbclzvvit3MEM2nBRaPVo2M7ZTs7n3znXTfyW4OhwTlJLvpcUlCryblgkQ
</code></pre>
","1974","<c#><php><wordpress><pbkdf2>","4","4","1","2016-09-17 08:43:38","39544750","5","1","","","","2016-09-09 01:31:52",""
"11630941","PBKDF2, Java Implementation from C#","<p>Trying to get a java implementation of PBKDF2, I used this as my C# version: <a href=""https://github.com/shawnmclean/SimpleCrypto.net"" rel=""nofollow noreferrer"">https://github.com/shawnmclean/SimpleCrypto.net</a> </p>

<p>My code:</p>

<pre><code>import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;

import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class PBKDF2 {

    public static void main(String[] args) {
        try {
            SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
            KeySpec ks = new PBEKeySpec(""iamtwentycharacterss"".toCharArray(),""50.eGIYr3ZpxpWw67utH17s/A=="".getBytes(),50,64);
            SecretKey s = f.generateSecret(ks);
            Key k = new SecretKeySpec(s.getEncoded(),""HmacSHA1"");
            System.out.println(new String(k.getEncoded()));
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (InvalidKeySpecException e) {
            e.printStackTrace();
        }       
    }

}
</code></pre>

<p>I've tried various answers on stackoverflow:</p>

<p><a href=""https://stackoverflow.com/questions/11418336/java-simplecrypto-class-for-encryption-decryption-producing-different-results"">Java SimpleCrypto Class for encryption / decryption producing different results in Coldfusion 9 and Java (Android)</a></p>

<p><a href=""https://stackoverflow.com/questions/9147463/java-pbkdf2-with-hmacsha256-as-the-prf"">Java - PBKDF2 with HMACSHA256 as the PRF</a></p>

<p><a href=""https://stackoverflow.com/questions/2375541/password-verification-with-pbkdf2-in-java"">Password Verification with PBKDF2 in Java</a></p>

<p>Unfortunately the result's don't match, the result is supposed to be:
<code>mOs/Mw7ZRM99i/BTJ+xnmj5Pm6QlqP1vuPqrf/Qa3WwassxI1QJ447OqdoBzunbJjvrx7+bHAO1Dnj8ltS4TKA==</code></p>
","<p>I have resolved my issue with the following code if it may be of assistance, Rfc2898DeriveBytes class: <a href=""http://pastebin.com/iReZJ3Vq"" rel=""nofollow"">http://pastebin.com/iReZJ3Vq</a></p>

<pre><code>import java.nio.charset.Charset;

import org.bouncycastle.util.encoders.Base64;

public class PBKDF2 {

    public static void main(String[] args) {
        try {
            String password = ""iamtwentycharacterss"";
            String salt = ""50.eGIYr3ZpxpWw67utH17s/A=="";
            int iterations = Integer.parseInt(salt.substring(0, salt.indexOf('.')));
            byte[] saltBytes = salt.getBytes(Charset.forName(""UTF-8""));

            Rfc2898DeriveBytes rfc2898 = new Rfc2898DeriveBytes(password, saltBytes, iterations);
            byte[] key = rfc2898.getBytes(64);
            String hash = new String(Base64.encode(key));
            System.out.println(hash);
        } catch (Exception ex) {
            System.out.println(""ERROR: "" + ex);
        }
    }

}
</code></pre>
","1969","<java><security><encryption><pbkdf2>","3","2","2","2012-07-24 15:01:12","11633442","2","1","-1","","2017-05-23 11:48:13","2012-07-24 12:32:19",""
"11630941","PBKDF2, Java Implementation from C#","<p>Trying to get a java implementation of PBKDF2, I used this as my C# version: <a href=""https://github.com/shawnmclean/SimpleCrypto.net"" rel=""nofollow noreferrer"">https://github.com/shawnmclean/SimpleCrypto.net</a> </p>

<p>My code:</p>

<pre><code>import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;

import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class PBKDF2 {

    public static void main(String[] args) {
        try {
            SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
            KeySpec ks = new PBEKeySpec(""iamtwentycharacterss"".toCharArray(),""50.eGIYr3ZpxpWw67utH17s/A=="".getBytes(),50,64);
            SecretKey s = f.generateSecret(ks);
            Key k = new SecretKeySpec(s.getEncoded(),""HmacSHA1"");
            System.out.println(new String(k.getEncoded()));
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (InvalidKeySpecException e) {
            e.printStackTrace();
        }       
    }

}
</code></pre>

<p>I've tried various answers on stackoverflow:</p>

<p><a href=""https://stackoverflow.com/questions/11418336/java-simplecrypto-class-for-encryption-decryption-producing-different-results"">Java SimpleCrypto Class for encryption / decryption producing different results in Coldfusion 9 and Java (Android)</a></p>

<p><a href=""https://stackoverflow.com/questions/9147463/java-pbkdf2-with-hmacsha256-as-the-prf"">Java - PBKDF2 with HMACSHA256 as the PRF</a></p>

<p><a href=""https://stackoverflow.com/questions/2375541/password-verification-with-pbkdf2-in-java"">Password Verification with PBKDF2 in Java</a></p>

<p>Unfortunately the result's don't match, the result is supposed to be:
<code>mOs/Mw7ZRM99i/BTJ+xnmj5Pm6QlqP1vuPqrf/Qa3WwassxI1QJ447OqdoBzunbJjvrx7+bHAO1Dnj8ltS4TKA==</code></p>
","<p>How i missed this point....</p>

<p>The desired key length in the program is 64 but the result's key length you are expecting is 512. Change desired key length in the pbekeyspec to 512</p>

<pre><code>KeySpec ks = new PBEKeySpec(""iamtwentycharacterss"".toCharArray(),""50.eGIYr3ZpxpWw67utH17s/A=="".getBytes(),50,512);
</code></pre>
","1969","<java><security><encryption><pbkdf2>","3","0","2","2012-07-24 15:01:12","11633442","2","1","-1","","2017-05-23 11:48:13","2012-07-24 12:32:19",""
"4504876","PBKDF2-HMAC-SHA256 Objective-C implementation","<p>Can someone point me to an implementation of PBKDF2 using HMAC-SHA256 to generate a key, in Objective-C.  This is part of the key generation process that I will later use for AES-CBC-Pad encryption.</p>

<p>Thanks in advance</p>
","<p>You can just simply borrow C implementation from OpenSSL or any other library.</p>
","1907","<iphone><objective-c><hmac><sha256><pbkdf2>","4","4","1","2012-06-01 12:20:10","4571892","3","1","","","","2010-12-21 23:17:34",""
"34700837","binding.PBKDF2 error when hashing passwords Node.JS","<p>I am trying to hash my passwords in the user model with <code>crypto.PBKDF2</code> but my validatePassword method is failing with the following exception </p>

<blockquote>
  <p>return binding.PBKDF2(password, salt, iterations, keylen, digest, callback);</p>
</blockquote>

<p>This is the full error</p>

<pre><code>crypto.js:562
return binding.PBKDF2(password, salt, iterations, keylen, digest, callback);
               ^
TypeError: Not a buffer
    at TypeError (native)
    at pbkdf2 (crypto.js:562:20)
    at Object.exports.pbkdf2Sync (crypto.js:553:10)
    at new &lt;anonymous&gt; (c:\Users\Joseph\news-trends\models\Users.js:25:23)
    at Object.&lt;anonymous&gt; (c:\Users\Joseph\news-trends\models\Users.js:24:39)
    at Module._compile (module.js:398:26)
    at Object.Module._extensions..js (module.js:405:10)
    at Module.load (module.js:344:32)
    at Function.Module._load (module.js:301:12)
    at Module.require (module.js:354:17)
    at require (internal/module.js:12:17)
    at Object.&lt;anonymous&gt; (c:\Users\Joseph\news-trends\app.js:17:1)
    at Module._compile (module.js:398:26)
    at Object.Module._extensions..js (module.js:405:10)
    at Module.load (module.js:344:32)
    at Function.Module._load (module.js:301:12)
</code></pre>

<p>These are the relevant methods</p>

<pre><code>UserSchema.methods.setPassword = function(password){
    var self = this;

    crypto.randomBytes(16, function(err, salt){
        if(err){ throw err; }
        self.salt = salt.toString('hex');
    });

    crypto.pbkdf2(password, this.salt, 1000, 64, function(err, hash){
        if(err){ throw err;}
        self.hash = hash.toString('hex');
    });
};
UserSchema.methods.validatePassword = new function(password){
    var hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');
    return this.hash = hash;
};
</code></pre>

<p>Here is a link to the full code: <a href=""https://github.com/MultiplisJoseph/news-trends"" rel=""nofollow"">Repo</a></p>
","<p>Your code is somewhat confusing, it sets a variable to an asynchronous function, and somehow tries to use that inside the function?</p>

<p><code>crypto</code> methods have a callback where the generated key is the second argument, and this is how you'd generally use them</p>

<pre><code>UserSchema.methods.setPassword = function(password){

    var self = this;

    crypto.randomBytes(16, function(err, salt){
        if(err){ throw err; }
        self.salt = salt.toString('hex');
    });

    crypto.pbkdf2(password, this.salt, 1000, 64, function(err, hash){
        if(err){ throw err;}
        self.hash = hash.toString('hex');
    });
}

UserSchema.methods.validatePassword = function(password){
    var hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');
    return this.hash === hash;
};
</code></pre>

<p>Note that your <code>setPassword</code> and <code>validatePassword</code> methods only works for one instance, which is probably fine for testing, but if you want more than one user, you probably need a database to hold those values, and not just assign them to <code>this</code>.</p>

<p>The error you're getting is because you're trying to pass the returned result from the asynchronous functions to <code>new Buffer</code>, and not the generated keys</p>
","1814","<javascript><node.js><authentication><encryption><pbkdf2>","0","1","2","2016-07-24 04:27:58","34700990","0","1","3263403","","2016-01-10 01:49:24","2016-01-10 00:59:15",""
"34700837","binding.PBKDF2 error when hashing passwords Node.JS","<p>I am trying to hash my passwords in the user model with <code>crypto.PBKDF2</code> but my validatePassword method is failing with the following exception </p>

<blockquote>
  <p>return binding.PBKDF2(password, salt, iterations, keylen, digest, callback);</p>
</blockquote>

<p>This is the full error</p>

<pre><code>crypto.js:562
return binding.PBKDF2(password, salt, iterations, keylen, digest, callback);
               ^
TypeError: Not a buffer
    at TypeError (native)
    at pbkdf2 (crypto.js:562:20)
    at Object.exports.pbkdf2Sync (crypto.js:553:10)
    at new &lt;anonymous&gt; (c:\Users\Joseph\news-trends\models\Users.js:25:23)
    at Object.&lt;anonymous&gt; (c:\Users\Joseph\news-trends\models\Users.js:24:39)
    at Module._compile (module.js:398:26)
    at Object.Module._extensions..js (module.js:405:10)
    at Module.load (module.js:344:32)
    at Function.Module._load (module.js:301:12)
    at Module.require (module.js:354:17)
    at require (internal/module.js:12:17)
    at Object.&lt;anonymous&gt; (c:\Users\Joseph\news-trends\app.js:17:1)
    at Module._compile (module.js:398:26)
    at Object.Module._extensions..js (module.js:405:10)
    at Module.load (module.js:344:32)
    at Function.Module._load (module.js:301:12)
</code></pre>

<p>These are the relevant methods</p>

<pre><code>UserSchema.methods.setPassword = function(password){
    var self = this;

    crypto.randomBytes(16, function(err, salt){
        if(err){ throw err; }
        self.salt = salt.toString('hex');
    });

    crypto.pbkdf2(password, this.salt, 1000, 64, function(err, hash){
        if(err){ throw err;}
        self.hash = hash.toString('hex');
    });
};
UserSchema.methods.validatePassword = new function(password){
    var hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');
    return this.hash = hash;
};
</code></pre>

<p>Here is a link to the full code: <a href=""https://github.com/MultiplisJoseph/news-trends"" rel=""nofollow"">Repo</a></p>
","<p>I know its late, But if anyone is still facing this issue, this is what i did, and it solved my issue.</p>

<pre><code>UserSchema.methods.setPassword = function(password){
    this.salt = crypto.randomBytes(16).toString('hex');
    this.hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');
}

UserSchema.methods.validatePassword = function(password){
    var hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');
    return this.hash === hash;
};
</code></pre>
","1814","<javascript><node.js><authentication><encryption><pbkdf2>","0","2","2","2016-07-24 04:27:58","34700990","0","1","3263403","","2016-01-10 01:49:24","2016-01-10 00:59:15",""
"20127572","default values for salt, iteration count and key length for PBEKeySpec","<p><a href=""http://docs.oracle.com/javase/7/docs/api/javax/crypto/spec/PBEKeySpec.html"" rel=""nofollow"">http://docs.oracle.com/javase/7/docs/api/javax/crypto/spec/PBEKeySpec.html</a></p>

<p>Per that the salt, iteration count and key length are optional parameters. What are the defaults if they're not specified?</p>

<p>For algorithms with fixed key lengths the key length is easy enough to figure out but algorithms like AES can have multiple key lengths.</p>

<p>Any ideas?</p>
","<p>You can find the source code here: <a href=""http://developer.classpath.org/doc/javax/crypto/spec/PBEKeySpec-source.html"" rel=""nofollow"">http://developer.classpath.org/doc/javax/crypto/spec/PBEKeySpec-source.html</a></p>

<p>The default values are the default values set by the JVM for their types (empty array and 0).</p>
","1745","<java><encryption><pbkdf2>","1","2","1","2013-11-21 17:16:36","20127647","0","","","","","2013-11-21 17:12:53",""
"6359576","PBKDF2 in Java with Bouncy Castle vs .NET Rfc2898DeriveBytes?","<p>I have some C# code that generates a key using PBKDF2.</p>

<pre><code>//byte[] salt = new RNGCryptoServiceProvider().GetBytes(salt);
byte[] salt = new byte[] { 19, 3, 248, 189, 144, 42, 57, 23 }; // for testing

byte[] bcKey = new Rfc2898DeriveBytes(""mypassword"", salt, 8192).GetBytes(32);
</code></pre>

<p>This works fine. I am trying to implement the same in Java with Bouncy Castle. Can't get it to work (the fact that Java lacks unsigned types makes it further annoying).</p>

<pre><code>SecureRandom random = new SecureRandom();
byte[] salt = u2s(new int[] { 19, 3, 248, 189, 144, 42, 57, 23 });
//random.nextBytes(salt);

PBEParametersGenerator generator = new PKCS5S2ParametersGenerator();
generator.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes((""BLK"" + password).toCharArray()), salt, keyTransformationRounds);
KeyParameter params = (KeyParameter)generator.generateDerivedParameters(keyLengthBits);
byte[] bcKey = params.getKey();
int[] bcKeyU = s2u(bcKey);
System.out.println(new String(Base64.encode(bcKey), ""UTF-8""));

// Helper functions because Java has no unsigned types
//
// EDIT: THESE FUNCTIONS ARE INCORRECT.
// See my answer below for the correct versions.
//
static byte[] u2s(int[] unsignedArray) throws IOException
{
    byte[] signedArray = new byte[unsignedArray.length];
    for (int i = 0; i &lt; signedArray.length; i++)
    {
        if (unsignedArray[i] &lt; 0 || unsignedArray[i] &gt; 255)
        {
            throw new IOException(""unsignedArray at "" + i + "" was not within the range 0 to 255."");
        }

        signedArray[i] = (byte)(unsignedArray[i] - 128);
    }

    return signedArray;
}

static int[] s2u(byte[] signedArray)
{
    int[] unsignedArray = new int[signedArray.length];
    for (int i = 0; i &lt; unsignedArray.length; i++)
    {
        unsignedArray[i] = (int)(signedArray[i] + 128);
    }

    return unsignedArray;
}
</code></pre>

<p>The resultant bcKey byte arrays differ. What am I doing wrong? Am I going about handling the conversion from unsigned to signed properly or will that not work as I expect?</p>
","<p>I wasn't handling the signed/unsigned conversion correctly. Here are some helper functions that demonstrate conversion between integer arrays (representing unsigned byte arrays) and signed byte arrays.</p>

<p>The check for integers outside the range 0-255 in <code>intsToBytes</code> is not necessary but might be helpful for debugging.</p>

<pre><code>static byte[] intsToBytes(int[] ints)
{
    byte[] bytes = new byte[ints.length];
    for (int i = 0; i &lt; ints.length; i++)
    {
        if (ints[i] &lt; 0 || ints[i] &gt; 255) System.out.println(String.format(""WARNING: ints at index %1$d (%2$d) was not a valid byte value (0-255)"", i, ints[i]));

        bytes[i] = (byte)ints[i];
    }

    return bytes;
}

static int[] bytesToInts(byte[] bytes)
{
    int[] ints = new int[bytes.length];
    for (int i = 0; i &lt; bytes.length; i++)
    {
        ints[i] = bytes[i] &amp; 0xff;
    }

    return ints;
}
</code></pre>
","1735","<java><aes><bouncycastle><unsigned><pbkdf2>","3","1","1","2011-06-18 14:43:32","6364703","0","2","343845","","2011-06-18 14:43:32","2011-06-15 14:44:20",""
"39647123","Salt in PBKDF2 - Python","<p>I'm just learning about securing password while developing using MySQL and Python, following <a href=""http://www.cyberciti.biz/python-tutorials/securely-hash-passwords-in-python/"" rel=""nofollow"">this tutorial</a>.</p>

<p>It's my understanding that the userpassword is stored at the database hashed, and the salt is stored along side unencrypted, so that we can grab the hashed password and the salt, and rehash using the salt the inputted password, then compare the two.</p>

<p>Though, when using PBKDF2 (via the <code>passlib.hash.sha256_crypt()</code> function) I can't set my own salt, only its size. So how can I rehash the password using the same salt so I can compare both?</p>
","<p>The <a href=""https://passlib.readthedocs.io/en/stable/lib/passlib.ifc.html"" rel=""nofollow noreferrer"">Passlib Password Hash interface</a> either lets you set the salt <em>size</em>, <em>or</em> the <code>salt</code> value itself. From the <a href=""https://passlib.readthedocs.io/en/stable/lib/passlib.hash.pbkdf2_digest.html#passlib.hash.pbkdf2_sha256"" rel=""nofollow noreferrer"">documentation on <code>pbkdf2_sha256</code></a>:</p>

<blockquote>
  <ul>
  <li><p><code>salt</code> (<em>bytes</em>) Optional salt bytes. If specified, the length must be between 0-1024 bytes. If not specified, a 16 byte salt will be autogenerated (this is recommended).</p></li>
  <li><p><code>salt_size</code> (<em>int</em>) – Optional number of bytes to use when autogenerating new salts. Defaults to 16 bytes, but can be any value between 0 and 1024.</p></li>
  </ul>
</blockquote>

<p>so you <em>can</em> set your own pre-generated salt:</p>

<pre><code>&gt;&gt;&gt; from passlib.hash import pbkdf2_sha256
&gt;&gt;&gt; pbkdf2_sha256.hash(""password"", rounds=200000, salt=b'spamhameggs')
'$pbkdf2-sha256$200000$c3BhbWhhbWVnZ3M$WL9OLVcb3f7HqHeNT./kCJeunydLCi4JykzEuAdewcI'
</code></pre>

<p>However, note that the salt is part of the returned string. The string contains not only the resulting hash, but also the algorithm, the number of rounds used <em>and</em> the salt used, delimited by <code>$</code>. The salt is <a href=""https://passlib.readthedocs.io/en/stable/lib/passlib.utils.binary.html#base64-encoding"" rel=""nofollow noreferrer"">encoded to modified form of base64</a>. You can verify this by decoding the string <code>c3BhbWhhbWVnZ3M</code> again::</p>

<pre><code>&gt;&gt;&gt; from passlib.utils.binary import ab64_decode
&gt;&gt;&gt; ab64_decode(b'c3BhbWhhbWVnZ3M')
b'spamhameggs'
</code></pre>

<p>See the <a href=""https://passlib.readthedocs.io/en/stable/lib/passlib.hash.pbkdf2_digest.html#format-algorithm"" rel=""nofollow noreferrer""><em>Format &amp; Algorithm</em></a> section for the <code>pbkdf2_sha256</code> docs.</p>

<p>So when you store the full string <code>pbkdf2_sha256</code> in the database, <em>everything to validate the string</em> is right there in the value, including the salt. Leaving generating a random salt is best left to that library as it'll use a secure method to generate one.</p>

<p>You may want to read the <a href=""https://passlib.readthedocs.io/en/stable/narr/hash-tutorial.html"" rel=""nofollow noreferrer"">Passlib tutorial on password hashing</a>, which includes coverage of how to hash passwords when storing in the database, and how to verify them again (e.g. using <code>pdkdf2_sha256.verify(password_user_entered, hash_stored_in_database)</code>), which covers exactly this ground.</p>
","1663","<python><mysql><python-3.x><salt><pbkdf2>","3","3","1","2019-06-02 18:15:41","39660610","13","","100297","","2016-09-23 12:08:27","2016-09-22 19:10:38",""
"14116954","Implementations PBKDF2 in Delphi?","<p>How do I use this algorithm in Delphi? Is there a class to do this in Delphi?</p>

<p>Thank you.</p>
","<p>I implemented the algorithm using the link @alzaimar provided and some reading on Wikipedia. Suggestions for improvement are welcome of course!</p>

<pre><code>type
  TIdHMACClass = class of TIdHMAC;

// Modeled after http://www.di-mgt.com.au/cryptoKDFs.html#PKCS5
function PBKDF2(const P: TBytes; const S: TBytes; const C: Integer;
  const kLen: Integer; PRFC: TIdHMACClass = nil): TBytes;
var
  PRF: TIdHMAC;
  D: Integer;
  I: Int32;
  F: TBytes;
  U: TBytes;
  J: Integer;
  T: TBytes;

  function _ConcatenateBytes(const _B1: TBytes; const _B2: TBytes): TBytes; inline;
  begin
    SetLength(Result, Length(_B1) + Length(_B2));
    if Length(_B1) &gt; 0 then
      Move(_B1[Low(_B1)], Result[Low(Result)], Length(_B1));
    if Length(_B2) &gt; 0 then
      Move(_B2[Low(_B2)], Result[Low(Result)+Length(_B1)], Length(_B2));
  end;

  function _INT_32_BE(const _I: Int32): TBytes; inline;
  begin
    Result := TBytes.Create(_I shr 24, _I shr 16, _I shr 8, _I);
  end;

  procedure _XorBytes(var _B1: TBytes; const _B2: TBytes); inline;
  var
    _I: Integer;
  begin
    for _I := Low(_B1) to High(_B1) do
      _B1[_I] := _B1[_I] xor _B2[_I];
  end;

begin
  if not Assigned(PRFC) then
    PRFC := TIdHMACSHA1;

  PRF := PRFC.Create;
  try
    D := Ceil(kLen / PRF.HashSize);
    PRF.Key := P;
    for I := 1 to D do
    begin
      F := PRF.HashValue(_ConcatenateBytes(S, _INT_32_BE(I)));
      U := Copy(F);
      for J := 2 to C do
      begin
        U := PRF.HashValue(U);
        _XorBytes(F, U);
      end;
      T := _ConcatenateBytes(T, F);
    end;
    Result := Copy(T, Low(T), kLen);
  finally
    PRF.Free;
  end;
end;

procedure TestPBKDF2SHA1HMAC;
var
  P: TBytes;
  S: TBytes;
  K: TBytes;

  function _BytesToHexString(const _B: TBytes): string;
  var
    _I: Integer;
  begin
    for _I := Low(_B) to High(_B) do
      Result := Result + IntToHex(_B[_I], 2);
  end;

begin
  P := TBytes.Create($70, $61, $73, $73, $77, $6F, $72, $64);
  S := TBytes.Create($78, $57, $8E, $5A, $5D, $63, $CB, $06);

  K := PBKDF2(P, S, 2048, 24);
  Assert('BFDE6BE94DF7E11DD409BCE20A0255EC327CB936FFE93643' = _BytesToHexString(K));

  P := TBytes.Create($70, $61, $73, $73, $77, $6F, $72, $64);
  S := TBytes.Create($73, $61, $6C, $74);

  K := PBKDF2(P, S, 1, 20);
  Assert('0C60C80F961F0E71F3A9B524AF6012062FE037A6' = _BytesToHexString(K));
  K := PBKDF2(P, S, 2, 20);
  Assert('EA6C014DC72D6F8CCD1ED92ACE1D41F0D8DE8957' = _BytesToHexString(K));
  K := PBKDF2(P, S, 4096, 20);
  Assert('4B007901B765489ABEAD49D926F721D065A429C1' = _BytesToHexString(K));
  K := PBKDF2(P, S, 16777216, 20);
  Assert('EEFE3D61CD4DA4E4E9945B3D6BA2158C2634E984' = _BytesToHexString(K));

  P := TBytes.Create($70, $61, $73, $73, $77, $6F, $72, $64, $50, $41,
    $53, $53, $57, $4F, $52, $44, $70, $61, $73, $73, $77, $6F, $72, $64);
  S := TBytes.Create($73, $61, $6C, $74, $53, $41, $4C, $54, $73, $61, $6C,
    $74, $53, $41, $4C, $54, $73, $61, $6C, $74, $53, $41, $4C, $54, $73, $61,
    $6C, $74, $53, $41, $4C, $54, $73, $61, $6C, $74);

  K := PBKDF2(P, S, 4096, 25);
  Assert('3D2EEC4FE41C849B80C8D83662C0E44A8B291A964CF2F07038' = _BytesToHexString(K));
end;
</code></pre>

<p>Do whatever you like but use it at your own risk.</p>
","1625","<delphi><delphi-xe3><pbkdf2>","0","3","1","2017-04-11 17:52:05","","1","","","","","2013-01-02 04:49:24",""
"19569042","Password salt and PBKDF2","<p>I'm looking into different solutions regarding storing passwords in Database. After reading a lot I think i will end up with <strong>PBKDF2</strong>.</p>

<p>Although I'm a little bit confused regarding if I should input salt to my PBKDF2 function and store the salt in a column and the PBKDF2'd password in another column.</p>

<p>I'm also using CodeIgniter and found a library for PBKDF2 (<a href=""https://github.com/HashemQolami/CodeIgniter-PBKDF2-Library"" rel=""nofollow"">https://github.com/HashemQolami/CodeIgniter-PBKDF2-Library</a>) Which claims I don't need to store the salt separately.</p>

<blockquote>
  <p>Register user by using <code>$pbkdf2['hash']</code> as user's password which has
  been recommended; no need to store user's salt separately.</p>
  
  <p><a href=""https://github.com/HashemQolami/CodeIgniter-PBKDF2-Library#step-2"" rel=""nofollow"">https://github.com/HashemQolami/CodeIgniter-PBKDF2-Library#step-2</a></p>
</blockquote>

<p>So if I'm assuming correct all I need is to provide a password into the function and the function take care of the rest?</p>
","<p>I'm the creator of <strong><a href=""https://github.com/HashemQolami/CodeIgniter-PBKDF2-Library"" rel=""nofollow"">CodeIgniter PBKDF2 Library</a></strong>. Just found this topic on SO, and I decide to clarify how this library works.</p>

<p>Here is the sample code from the doc:</p>

<pre class=""lang-php prettyprint-override""><code># Load pbkdf2 library into your controller
$this-&gt;load-&gt;library('pbkdf2');

# Get password, which has been sent via POST method
$password = $this-&gt;input-&gt;post('password');

# Encrypt the given password using a random generated salt
$pbkdf2 = $this-&gt;pbkdf2-&gt;encrypt($password);
</code></pre>

<p>The <code>encrypt()</code> method, <a href=""https://github.com/HashemQolami/CodeIgniter-PBKDF2-Library/blob/master/libraries/Pbkdf2.php#L273-L277"" rel=""nofollow"">returns an array</a> which has 3 keys: <code>salt</code>, <code>password</code>, <code>hash</code>. 
The value of <code>hash</code> is the concatenation of <code>salt</code> and <code>password</code>.</p>

<p>This feature lets the user to choose how to use this library, whether to work with <em>salt</em> and <em>password</em> or <em>hash</em> (<em>salt</em> + <em>password</em>).</p>

<h2>The syntax of <code>encrypt()</code> method:</h2>

<pre class=""lang-php prettyprint-override""><code>encrypt( string $password [, mixed $good_hash = NULL [, bool $object_output = FALSE]] )
</code></pre>

<p>The function uses the given <em><code>$good_hash</code></em> <a href=""https://github.com/HashemQolami/CodeIgniter-PBKDF2-Library/blob/master/libraries/Pbkdf2.php#L254-L255"" rel=""nofollow"">as the <strong>salt</strong></a> to generate the encrypted <strong>password</strong>. And it uses a <strong>random</strong> generated <em>salt</em> if the <em><code>$good_hash</code></em> parameter is not given.</p>

<p>So, If you have stored the <code>salt</code> separately, you could pass it to the function as the second parameter to encrypt the given password:</p>

<pre class=""lang-php prettyprint-override""><code>$pbkdf2 = $this-&gt;pbkdf2-&gt;encrypt($password, $salt);
</code></pre>

<p><strong>On the other hand</strong>, If you have stored the concatenation of <code>salt</code> and <code>password</code> into database, you could pass that to the function as the second parameter, too:</p>

<pre class=""lang-php prettyprint-override""><code>$pbkdf2 = $this-&gt;pbkdf2-&gt;encrypt($password, $hash);
</code></pre>

<p>The function <a href=""https://github.com/HashemQolami/CodeIgniter-PBKDF2-Library/blob/master/libraries/Pbkdf2.php#L256-L257"" rel=""nofollow"">will break the given <code>$hash</code></a> automatically to fetch the <code>salt</code>.</p>

<p>So, you could store the concatenation of <em>salt</em> and <em>password</em> in a column (<a href=""https://github.com/HashemQolami/CodeIgniter-PBKDF2-Library/blob/master/libraries/Pbkdf2.php#L51-L58"" rel=""nofollow"">64 characters by default</a>) and then encrypt the new given password by using old stored one.</p>

<h1>Putting all together</h1>

<p>In the following, I'll show you how to work with this library to register/login the user, without storing the <em>salt</em> and the <em>password</em> separately.</p>

<h3>Registering the user:</h3>

<pre class=""lang-php prettyprint-override""><code>$this-&gt;load-&gt;library('pbkdf2');
$password = $this-&gt;input-&gt;post('password');
$pbkdf2 = $this-&gt;pbkdf2-&gt;encrypt($password);

# Store $pbkdf2['hash'] into User table as the user's password
</code></pre>

<h3>Logging in the user:</h3>

<pre class=""lang-php prettyprint-override""><code>$this-&gt;load-&gt;library('pbkdf2');
$username = $this-&gt;input-&gt;post('username', TRUE);
$password = $this-&gt;input-&gt;post('password');

# Fetch the stored user's password from the database
$user_password = $this-&gt;user_model-&gt;get_password_by($username);

# Check whether the User exists
if ($user_password)
{
    # Encrypt the new given password by using the old one:
    $pbkdf2 = $this-&gt;pbkdf2-&gt;encrypt($password, $user_password);

    # Check whether the new generated password matches the old one
    if ($pbkdf2['hash'] === $user_password) {
        # Log in the user ...
    } else {
        # Show an error...
    }
} else {
    # Show an error... 
}
</code></pre>
","1616","<codeigniter><passwords><codeigniter-2><pbkdf2>","1","3","1","2014-01-30 11:58:00","","1","2","1725764","","2014-01-30 11:58:00","2013-10-24 14:41:03",""
"12765749","pbkdf2 key length","<p>What is the $key_length in <a href=""https://defuse.ca/php-pbkdf2.htm"" rel=""nofollow"">PBKDF2</a></p>

<p>It says that it will be derived from the input, but I see people using key_lengths of 256 and greater, but when I enter 256 as a key_length the output is 512 characters.  Is this intentional?  Can I safely use 64 as the key_length so the output is 128 characters long?</p>
","<p>$key_length is the number of output bytes that you desire from PBKDF2. (Note that if key_length is more than the number of output bytes of the hash algorithm, the process is repeated twice, slowing down that hashing perhaps more than you desire. SHA256 gives 32 bytes of output, for example, so asking for 33 bytes will take roughly twice as long as asking for 32.)</p>

<p>The doubling of the length that you mention is because the code converts the output bytes to hexadecimal (i.e. 2 characters per 1 byte) unless you specify $raw_output = true. The test vectors included specify $raw_output = false, since hexadecimal is simply easier to work with and post online. Depending on how you are storing the data in your application, you can decide if you want to store the results as hex, base64, or just raw binary data.</p>
","1611","<hash><pbkdf2>","1","3","2","2017-09-25 13:02:49","13070129","0","","","","","2012-10-07 02:56:51",""
"12765749","pbkdf2 key length","<p>What is the $key_length in <a href=""https://defuse.ca/php-pbkdf2.htm"" rel=""nofollow"">PBKDF2</a></p>

<p>It says that it will be derived from the input, but I see people using key_lengths of 256 and greater, but when I enter 256 as a key_length the output is 512 characters.  Is this intentional?  Can I safely use 64 as the key_length so the output is 128 characters long?</p>
","<p>In the IETF specification of <a href=""https://www.ietf.org/rfc/rfc2898.txt"" rel=""nofollow noreferrer"">Password-Based Cryptography Specification Version 2.0</a> the key length is defined as 
""intended length in octets of the derived key, a positive integer, at most
 (2^32 - 1) * hLen"" Here hLen denotes the length in octets of the  pseudorandom function output. For further details on pbkdf2 you can refer <a href=""https://medium.com/@kasunpdh/how-to-store-passwords-securely-with-pbkdf2-204487f14e84"" rel=""nofollow noreferrer"">How to store passwords securely with PBKDF2</a></p>
","1611","<hash><pbkdf2>","1","3","2","2017-09-25 13:02:49","13070129","0","","","","","2012-10-07 02:56:51",""
"33133625","Verifying a PBKDF2 password hash in python-pbkdf2","<p>I am using the snippet below to encrypt user password before saving in the database. </p>

<pre><code>from pbkdf2 import crypt
pwhash = crypt(password_from_user)
</code></pre>

<p>Example: <code>$p5k2$$Y0qfZ64u$A/pYO.3Mt9HstUtEEhWH/RXBg16EXDMr</code></p>

<p>Then, I save this in database. Well locally, I can perform a check doing something like this:</p>

<pre><code>from pbkdf2 import crypt
  pwhash = crypt(""secret"")
  alleged_pw = raw_input(""Enter password: "")
  if pwhash == crypt(alleged_pw, pwhash):
      print ""Password good""
  else:
      print ""Invalid password""
</code></pre>

<p>but how do I perform checks with what is on the db as the encrypted string is not always the same. I'm using <a href=""https://www.dlitz.net/software/python-pbkdf2/"" rel=""nofollow"">python-pbkdf2</a>.</p>
","<p>Okey, Did more research and figured out that to achieve this, i first have to encrypt the password and save in db.as:</p>

<pre><code>pwhash = crypt(""secret"",iterations=1000)
</code></pre>

<p>which can produce a string like <code>$p5k2$3e8$her4h.6b$.p.OE5Gy4Nfgue4D5OKiEVWdvbxBovxm</code></p>

<p>and to validate when a user wants to login with same password, i use the function below:</p>

<pre><code>def isValidPassword(userPassword,hashKeyInDB):
     result = crypt(userPassword,hashKeyInDB,iterations = 1000)
     return reesult == hashKeyInDB #hashKeyInDB in this case is $p5k2$3e8$her4h.6b$.p.OE5Gy4Nfgue4D5OKiEVWdvbxBovxm
</code></pre>

<p>this method returns <code>True</code> if the password is same or <code>False</code> if otherwise.</p>
","1607","<python><encryption><pbkdf2>","3","1","1","2015-10-15 23:00:23","33148649","2","1","1816580","","2015-10-14 20:05:48","2015-10-14 19:07:46",""
"46072916","How to implement pbkdf2_sha256 in c#","<p>I have made a website, in which on login I am using pbkdf2_sha256 for password hashing. I have used salt also.
I want to make a simple software just for the experience, I want to login into the c# software using same credentials as saved by the website.
I have seen Rfc2898DeriveBytes I guess it only takes 2 arguments (password, salt in integer). But what about iterations I have specified on the website?</p>

<p>Anyone, please guide me how to make a login in c# (WPF) application and use pbkdf2_sha256 to create a hash and to verify the password.</p>

<p>I have seen a code given on stacksoverflow.com.</p>

<pre><code>var salt = ""FbSnXHPo12gb"";
var password = ""geheim"";

var interactions = 12000;


using (var hmac = new HMACSHA256())
{
    var df = new Pbkdf2(hmac, password, salt, interactions);
    Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
}
</code></pre>

<p>I used this also but it is giving error in <code>var df = new Pbkdf2(hmac, password, salt, interactions);</code>
Pbkdf2 could not found.</p>

<p>my code </p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MySql.Data.MySqlClient;
using System.IO;
using System.Security.Cryptography;


namespace login
{

    /// &lt;summary&gt;
    /// Interaction logic for MainWindow.xaml
    /// &lt;/summary&gt;
    public partial class MainWindow : Window
    {

        public MainWindow()
        {
            InitializeComponent();
        }

        private void login_Click(object sender, RoutedEventArgs e)
        {

            var salt = ""FbSnXHPo12gb"";
            var password = ""geheim"";
            var interactions = 12000;


            using (var hmac = new HMACSHA256())
            {
                var df = new Pbkdf2(hmac, password, salt, interactions);
                Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
            }

            string myConnection = ""datasource=localhost;port=3306;username=root;password=abcde12345 ; database=finalproject"";
            MySqlConnection myConn = new MySqlConnection(myConnection);
            MySqlCommand SelectCommand = new MySqlCommand(""select * from login where Username='"" + this.username.Text + ""' and Password='"" + this.password.Password + ""';"", myConn);
            MySqlDataReader myReader;
            myConn.Open();
            myReader = SelectCommand.ExecuteReader();
            int count = 0;
            while (myReader.Read())
            {
                count = count + 1;
            }
            if (count == 1)
            {
                MessageBox.Show(""Hello"");

            }

            else
            {

                MessageBox.Show(""Wrong username and password"");
            }
            myConn.Close();
        }
    }
}
</code></pre>

<p>So please tell me which hashing algorithm I should use on the server which is good for a password.  I have read about bcrypt and scyrpt. Are they good for password hashing?                                                                                                             Actually, I am not decrypting I am only hashing password in software and then comparing hash stored on server with the hash generated in software</p>

<p>please help me.
Sorry for mistakes.</p>
","<p>Well, there is a fully working example <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.hmacsha256(v=vs.110).aspx#Anchor_7"" rel=""nofollow noreferrer"">here</a> in <strong>MSDN</strong>.</p>

<p>But, if your purpose is really hash a password, I would not advise you to do it like that.</p>

<p>There is no need to decrypt your passwords.</p>

<p>It's much easier and safer if you just use the <strong>SHA256</strong> algorithm. All you need to do is store the hashed password in your database and when someone attempt to login into your website you will hash the given password and compare with the value stored in your database. </p>

<p>Doing this you have a <em>one way encryption</em>, so there is no way to decrypt your passwords. </p>

<p>Why? If your application have been hacked, the attackers can't decrypt the stored passwords so they can't login.</p>

<p>There is a example on how to hash using SHA256 <a href=""https://stackoverflow.com/a/17001289/4592526"">here</a>. Really, it's much easier.</p>
","1571","<hash><salt><.net><pbkdf2>","2","0","2","2018-06-30 17:40:30","46079370","5","","","","","2017-09-05 18:49:00",""
"46072916","How to implement pbkdf2_sha256 in c#","<p>I have made a website, in which on login I am using pbkdf2_sha256 for password hashing. I have used salt also.
I want to make a simple software just for the experience, I want to login into the c# software using same credentials as saved by the website.
I have seen Rfc2898DeriveBytes I guess it only takes 2 arguments (password, salt in integer). But what about iterations I have specified on the website?</p>

<p>Anyone, please guide me how to make a login in c# (WPF) application and use pbkdf2_sha256 to create a hash and to verify the password.</p>

<p>I have seen a code given on stacksoverflow.com.</p>

<pre><code>var salt = ""FbSnXHPo12gb"";
var password = ""geheim"";

var interactions = 12000;


using (var hmac = new HMACSHA256())
{
    var df = new Pbkdf2(hmac, password, salt, interactions);
    Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
}
</code></pre>

<p>I used this also but it is giving error in <code>var df = new Pbkdf2(hmac, password, salt, interactions);</code>
Pbkdf2 could not found.</p>

<p>my code </p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MySql.Data.MySqlClient;
using System.IO;
using System.Security.Cryptography;


namespace login
{

    /// &lt;summary&gt;
    /// Interaction logic for MainWindow.xaml
    /// &lt;/summary&gt;
    public partial class MainWindow : Window
    {

        public MainWindow()
        {
            InitializeComponent();
        }

        private void login_Click(object sender, RoutedEventArgs e)
        {

            var salt = ""FbSnXHPo12gb"";
            var password = ""geheim"";
            var interactions = 12000;


            using (var hmac = new HMACSHA256())
            {
                var df = new Pbkdf2(hmac, password, salt, interactions);
                Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
            }

            string myConnection = ""datasource=localhost;port=3306;username=root;password=abcde12345 ; database=finalproject"";
            MySqlConnection myConn = new MySqlConnection(myConnection);
            MySqlCommand SelectCommand = new MySqlCommand(""select * from login where Username='"" + this.username.Text + ""' and Password='"" + this.password.Password + ""';"", myConn);
            MySqlDataReader myReader;
            myConn.Open();
            myReader = SelectCommand.ExecuteReader();
            int count = 0;
            while (myReader.Read())
            {
                count = count + 1;
            }
            if (count == 1)
            {
                MessageBox.Show(""Hello"");

            }

            else
            {

                MessageBox.Show(""Wrong username and password"");
            }
            myConn.Close();
        }
    }
}
</code></pre>

<p>So please tell me which hashing algorithm I should use on the server which is good for a password.  I have read about bcrypt and scyrpt. Are they good for password hashing?                                                                                                             Actually, I am not decrypting I am only hashing password in software and then comparing hash stored on server with the hash generated in software</p>

<p>please help me.
Sorry for mistakes.</p>
","<p>The <code>Pbkdf2</code> class you found elsewhere on StackOverflow is not part of .NET, so to use it you'd need to obtain the library it's in.</p>

<p>In order to do PBKDF2 with (HMAC-)SHA-2-256, you would need at least .NET Core 2.0 or .NET Framework 4.7.2.</p>

<p>Either way you need to turn your salt into bytes.  Since it's a multiple of 4 characters I'm going to assume it's base64:</p>

<pre><code>byte[] saltBytes = Convert.FromBase64String(salt);
byte[] derived;
</code></pre>

<p>.NET Framework (2.0+) (HMAC-SHA-1):</p>

<pre><code>using (var pbkdf2 = new Rfc2898DeriveBytes(password, saltBytes, interactionCount))
{
    derived = pbkdf2.GetBytes(32);
}
</code></pre>

<p>.NET Core (2.0+), .NET Framework (4.7.2+) (using HMAC-SHA-2-256):</p>

<pre><code>using (var pbkdf2 = new Rfc2898DeriveBytes(
    password,
    saltBytes,
    interactionCount,
    HashAlgorithmName.SHA256))
{
    derived = pbkdf2.GetBytes(32);
}
</code></pre>

<p>If you need to use something other than (HMAC-)SHA-1 in .NET Framework you'll need to upgrade to 4.7.2.</p>

<p>API Docs:</p>

<ul>
<li><a href=""https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes.-ctor?view=netframework-4.7"" rel=""nofollow noreferrer"">.NET Framework Rfc2898DeriveBytes</a> (4.7)</li>
<li><a href=""https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes.-ctor?view=netframework-4.7.2"" rel=""nofollow noreferrer"">.NET Framework Rfc2898DeriveBytes</a> (4.7.2)</li>
<li><a href=""https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes.-ctor?view=netcore-2.0"" rel=""nofollow noreferrer"">.NET Core Rfc2898DeriveBytes</a></li>
</ul>
","1571","<hash><salt><.net><pbkdf2>","2","2","2","2018-06-30 17:40:30","46079370","5","","","","","2017-09-05 18:49:00",""
"21074315","Encryption of String AES PBKDF2","<p>I am new to encryption, I used encryption techniques of all types,but client particularly asking about PBKDF2 encryption technique. Any Help?</p>
","<p><code>PBKDF2</code> is a method to create a secure encryption key from a password. <code>PBKDF2</code> stands for ""Password-Based Key Derivation Function 2"".<br>
You will also need to provide the number of rounds, see PBKDF2 Calibration. </p>

<p><code>AES</code> is an encryption method. AES stands for ""Advanced Encryption Standard"".<br>
Other things you will need to handle:</p>

<ul>
<li>Encryption mode</li>
<li>IV (Initialization Vector)</li>
<li>Padding</li>
<li>Key size</li>
</ul>

<p>Both <code>PBKDF2</code> and <code>AES</code> are supported by iOS CommonCrypto.</p>

<p>What you need to do is a two step process:</p>

<ol>
<li>Use PBKDF2 to create an encryption key from a password string.</li>
<li>Then encrypt the data using the encryption key.</li>
</ol>

<p>Finally you will need to secure the encryption key.</p>
","1522","<ios><encryption><aes><pbkdf2>","3","4","1","2014-01-12 17:44:05","21074466","10","2","1226963","","2014-01-12 17:30:51","2014-01-12 11:55:19",""
"34462316","Replicating Java password hashing code in Node.js (PBKDF2WithHmacSHA1)","<p><em>Edit: my question has been updated, check the bottom of this post for the latest issue. I left the rest up for people who want to read the whole story :)</em></p>

<p>I've been working on translating a small Java application into Node.js, which for the most part has been going very well. I've had to look up a lot of Java functions to figure out what they do and how to replicate their behaviour in Node (since I have pretty much no experience whatsoever with Java), but I got most of the functionality working by now.</p>

<p>Unfortunately there is one bit that I just can't seem to get working. It is a method used to generate a password hash, using a set of high level Java-specific functions that don't seem to exist in Node. I've been trying for two days to get this working but I just can't get the results I want.</p>

<p>This is the original Java code:</p>

<pre><code>public static String hashPassword(final String password, final String salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    final char[] passwordChars = password.toCharArray();
    final byte[] saltBytes = salt.getBytes();
    final PBEKeySpec spec = new PBEKeySpec(passwordChars, saltBytes, 1000, 192);
    final SecretKeyFactory key = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    final byte[] hashedPassword = key.generateSecret(spec).getEncoded();
    return String.format(""%x"", new BigInteger(hashedPassword));
}
</code></pre>

<p>Note: the salt is a fixed value, it is not random. I know this is not how it should be, but this is how the application is set up. So, since the Java code always gets the same result, it should be possible to get the same result in Node as well.</p>

<p>I've tried using <code>crypto.pbkdf2</code>, using various ciphers that seemed similar, but it all gave me a different outcome than the Java code. So I figured I'd ask here, to see if anyone knows how to do this, or has any suggestions on how to approach this.</p>

<p>Note that (as I said) I don't know a thing about Java, so my difficulties getting this to work probably come from the fact that I have a hard time grasping just what is happening within this method, and googling the various functions used gives conflicting answers and mostly just shows other people having a hard time with them as well.</p>

<p>So there are actually three questions I'm asking:</p>

<ol>
<li>Is this possible to replicate in Node.js or does Java use functionality that just doesn't exist within Node?</li>
<li>Could someone who has more Java experience explain the various lines in this code, and what each one does? Preferably in a way that someone with a decent level of Node.js experience (and some PHP) but who never worked with Java would understand :)</li>
<li>If anyone knows, which Node functions am I looking at to get this working? Can I do it with the built-in crypto module or will I need additional modules?</li>
</ol>

<p>Lastly, before you say ""just implement a Node-specific hashing algorithm"" (which would be the easier option), I can't do that since this is to be used on existing databases that already contain these hashed passwords and that are used by other existing Java applications as well. Changing the other applications or the database is currently not an option.</p>

<p><strong>UPDATE</strong>: I've gotten an answer that was very helpful, and now I got this in my Node.js code:</p>

<pre><code>hashPassword = function(password, salt){
    crypto.pbkdf2(password, new Buffer(salt), 1000, 24, 'sha1', function(err, key){

    }
}
</code></pre>

<p>That's where I'm stuck again. I can't get the string value I need from the key. I googled a bit and found out that the <code>String.format</code> line in the Java code turns the BigInteger into a hexadecimal integer, but I can't seem to get the correct value.</p>

<ul>
<li>I tried simply <code>key.toString('hex')</code> but that didn't work.</li>
<li>I found this <a href=""https://github.com/node-modules/node-biginteger"" rel=""nofollow"">node-biginteger</a> module, and tried <code>BigInteger.fromBuffer(1, key).toString(24)</code> and some variations thereupon, but it still gives me a very different outcome than the Java application.</li>
</ul>

<p>Any help on how to get the correct string value from the buffer would be very much appreciated.</p>

<p><strong>Update2</strong>: I finally got my application working, as it turns out it was an external module that outputted bad hashes. Implementing the crypto module properly fixed it.</p>
","<p>These parameters generate the same buffer:</p>

<p><code>crypto.pbkdf2('test', 'salt', 1000, 24, 'sha1', function(err, key) {});
</code></p>

<p>What is left is to format a string the same way. It can be a bit problematic, since <code>BigInteger</code> is signed, so you should take sign into account as well.</p>

<p>You can do this as following using <a href=""https://github.com/indutny/bn.js/blob/master/lib/bn.js"" rel=""nofollow"">bn.js</a>:</p>

<pre><code>function format(key) {
  if (key[0] &gt;&gt;&gt; 7 === 0) {
    return key.toString('hex');
  }

  return '-' + new BN(key.toString('hex'), 16).notn(192).add(new BN(1)).toString(16);
}
</code></pre>

<p>bn.js doesn't interpret leading bit as a sign, so you have to check it first, and then convert to string according to <a href=""https://en.wikipedia.org/wiki/Two%27s_complement"" rel=""nofollow"">two's complement</a> representation.</p>
","1416","<javascript><java><node.js><hash><pbkdf2>","4","2","2","2018-03-07 02:40:19","34462805","0","","3185387","","2015-12-26 12:59:59","2015-12-25 11:06:02",""
"34462316","Replicating Java password hashing code in Node.js (PBKDF2WithHmacSHA1)","<p><em>Edit: my question has been updated, check the bottom of this post for the latest issue. I left the rest up for people who want to read the whole story :)</em></p>

<p>I've been working on translating a small Java application into Node.js, which for the most part has been going very well. I've had to look up a lot of Java functions to figure out what they do and how to replicate their behaviour in Node (since I have pretty much no experience whatsoever with Java), but I got most of the functionality working by now.</p>

<p>Unfortunately there is one bit that I just can't seem to get working. It is a method used to generate a password hash, using a set of high level Java-specific functions that don't seem to exist in Node. I've been trying for two days to get this working but I just can't get the results I want.</p>

<p>This is the original Java code:</p>

<pre><code>public static String hashPassword(final String password, final String salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    final char[] passwordChars = password.toCharArray();
    final byte[] saltBytes = salt.getBytes();
    final PBEKeySpec spec = new PBEKeySpec(passwordChars, saltBytes, 1000, 192);
    final SecretKeyFactory key = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    final byte[] hashedPassword = key.generateSecret(spec).getEncoded();
    return String.format(""%x"", new BigInteger(hashedPassword));
}
</code></pre>

<p>Note: the salt is a fixed value, it is not random. I know this is not how it should be, but this is how the application is set up. So, since the Java code always gets the same result, it should be possible to get the same result in Node as well.</p>

<p>I've tried using <code>crypto.pbkdf2</code>, using various ciphers that seemed similar, but it all gave me a different outcome than the Java code. So I figured I'd ask here, to see if anyone knows how to do this, or has any suggestions on how to approach this.</p>

<p>Note that (as I said) I don't know a thing about Java, so my difficulties getting this to work probably come from the fact that I have a hard time grasping just what is happening within this method, and googling the various functions used gives conflicting answers and mostly just shows other people having a hard time with them as well.</p>

<p>So there are actually three questions I'm asking:</p>

<ol>
<li>Is this possible to replicate in Node.js or does Java use functionality that just doesn't exist within Node?</li>
<li>Could someone who has more Java experience explain the various lines in this code, and what each one does? Preferably in a way that someone with a decent level of Node.js experience (and some PHP) but who never worked with Java would understand :)</li>
<li>If anyone knows, which Node functions am I looking at to get this working? Can I do it with the built-in crypto module or will I need additional modules?</li>
</ol>

<p>Lastly, before you say ""just implement a Node-specific hashing algorithm"" (which would be the easier option), I can't do that since this is to be used on existing databases that already contain these hashed passwords and that are used by other existing Java applications as well. Changing the other applications or the database is currently not an option.</p>

<p><strong>UPDATE</strong>: I've gotten an answer that was very helpful, and now I got this in my Node.js code:</p>

<pre><code>hashPassword = function(password, salt){
    crypto.pbkdf2(password, new Buffer(salt), 1000, 24, 'sha1', function(err, key){

    }
}
</code></pre>

<p>That's where I'm stuck again. I can't get the string value I need from the key. I googled a bit and found out that the <code>String.format</code> line in the Java code turns the BigInteger into a hexadecimal integer, but I can't seem to get the correct value.</p>

<ul>
<li>I tried simply <code>key.toString('hex')</code> but that didn't work.</li>
<li>I found this <a href=""https://github.com/node-modules/node-biginteger"" rel=""nofollow"">node-biginteger</a> module, and tried <code>BigInteger.fromBuffer(1, key).toString(24)</code> and some variations thereupon, but it still gives me a very different outcome than the Java application.</li>
</ul>

<p>Any help on how to get the correct string value from the buffer would be very much appreciated.</p>

<p><strong>Update2</strong>: I finally got my application working, as it turns out it was an external module that outputted bad hashes. Implementing the crypto module properly fixed it.</p>
","<p>I needed to get this to work with node 6, and it turns out, things have gotten simpler (not needing bigints).  I never would have figured this out without <a href=""https://stackoverflow.com/users/1391953/vkurchatkin"">vkurchatkin</a>'s original answer, though:</p>

<pre><code>console.log(hashPassword('password', 'salt').toString('hex'));

function hashPassword(password, salt) {
    return crypto.pbkdf2Sync(password, Buffer.from(salt, 'hex'), 1000, 24, 'sha1');
}
</code></pre>
","1416","<javascript><java><node.js><hash><pbkdf2>","4","0","2","2018-03-07 02:40:19","34462805","0","","3185387","","2015-12-26 12:59:59","2015-12-25 11:06:02",""
"23593645","Why is the output for hash_pbkdf2 (PHP) different than the .NET / C# implementation","<p>In a small project of mine i need to calculate the hash of a function.</p>

<p>I have a working example of PHP hash</p>

<pre><code>$pass = ""123456"";
$mysalt = strrev($pass);
echo hash_pbkdf2('sha1', $pass, $mysalt, 1000, 32); //using the PHP inbuilt function

echo ""&lt;/br&gt;"";
include_once('PasswordHash.php');
echo pbkdf2('sha1', $pass, $mysalt, 1000, 16);  //using external code
</code></pre>

<p>Both of them has same output : <code>523d904c8f2df96634d9eed3b444838e</code></p>

<p>Now i need my code to be backward be compatible with C# generated as the password has will be verified by a PHP server. and the Request is to be sent by a C# application.</p>

<p>Here is what i tried : output = <code>8e59ead5f90c6af11cf80641d51c241c</code></p>

<pre><code>public static class Program
{
    public static string ReverseString(this string s)
    {
        char[] arr = s.ToCharArray();
        Array.Reverse(arr);
        return new string(arr);
    }

    static void Main(string[] args)
    {
        var pass = ""123456"";
        byte[] salt = Encoding.ASCII.GetBytes(pass.ReverseString());


        //https://github.com/defuse/password-hashing/blob/master/PasswordHash.cs
        //was getting error salt not 8 byte,
        //http://stackoverflow.com/questions/1647481/what-is-the-c-sharp-equivalent-of-the-php-pack-function
        salt = Pack(pass.ReverseString());
        var hash = PasswordHash.PBKDF2(pass, salt, 1000, 16);
        Console.WriteLine(BitConverter.ToString(hash).Replace(""-"", string.Empty).ToLower());

        Console.ReadKey();

    }

    public static byte[] Pack(string salt)
    {
        using (var ms = new MemoryStream())
        {
            using (var bw = new BinaryWriter(ms))
            {
                var data = Encoding.ASCII.GetBytes(salt);
                bw.Write(data.Length + 4); // Size of ASCII string + length (4 byte int)
                bw.Write(data);
            }

            return ms.ToArray();
        }
    }
}
</code></pre>
","<p>The problem here is with your salt. It is only 6 bytes long and <code>PHP</code> handles this different then your <code>c#</code> code. If you update the code to the following:</p>

<pre><code>&lt;?php
$pass = ""1234567890"";
$mysalt = strrev($pass);
echo hash_pbkdf2('sha1', $pass, $mysalt, 1000, 32);
?&gt;
</code></pre>

<p>your output is: 42e8bfc7fc5fd4686915d49d5a29bc1e</p>

<p>Then adjust your <code>c#</code> code to:</p>

<pre><code>var pass = ""1234567890"";
byte[] salt = Encoding.ASCII.GetBytes(pass.ReverseString());

//DISABLE YOUR PACK METHOD
//salt = Pack(pass.ReverseString());

var hash = PasswordHash.PBKDF2(pass, salt, 1000, 16);
Console.WriteLine(BitConverter.ToString(hash).Replace(""-"", string.Empty).ToLower());

Console.ReadKey();
</code></pre>

<p>The output is: 42e8bfc7fc5fd4686915d49d5a29bc1e</p>

<p>The difference comes from your <code>Pack</code> method, it randomly adds 4 bytes to the salt. You can see that easily in the inspector in VS.</p>

<p><img src=""https://i.stack.imgur.com/KHpIU.png"" alt=""Salt inspector""></p>

<p>So the easy fix is to use a salt that has atleast 8 chars (minimum for <code>Rfc2898DeriveBytes</code> which is used by your <code>C#</code> code) and dont use your <code>Pack</code> method</p>

<p>If you look at the <a href=""https://wiki.php.net/rfc/hash_pbkdf2"" rel=""nofollow noreferrer""><sup><em>php docs</em></sup></a> there is a ""Request for comments"" that mentions that the salt must be atleast 8bytes (64bit). So using less leads to conflicts, like you already encountered.</p>

<p><strong>UPDATE</strong></p>

<p>Now if you realy want to use the less secure salt with &lt;8 bytes, you can look at the following stackoverflow question <a href=""https://stackoverflow.com/q/1046599/434949"">PBKDF2 implementation in C# with Rfc2898DeriveBytes</a> for a c# version that doesnt require a minimum length.</p>
","1335","<c#><php><.net><pbkdf2><rfc2898>","1","4","2","2014-05-14 14:03:38","23654637","7","","434949","","2014-05-14 12:24:40","2014-05-11 14:13:40",""
"23593645","Why is the output for hash_pbkdf2 (PHP) different than the .NET / C# implementation","<p>In a small project of mine i need to calculate the hash of a function.</p>

<p>I have a working example of PHP hash</p>

<pre><code>$pass = ""123456"";
$mysalt = strrev($pass);
echo hash_pbkdf2('sha1', $pass, $mysalt, 1000, 32); //using the PHP inbuilt function

echo ""&lt;/br&gt;"";
include_once('PasswordHash.php');
echo pbkdf2('sha1', $pass, $mysalt, 1000, 16);  //using external code
</code></pre>

<p>Both of them has same output : <code>523d904c8f2df96634d9eed3b444838e</code></p>

<p>Now i need my code to be backward be compatible with C# generated as the password has will be verified by a PHP server. and the Request is to be sent by a C# application.</p>

<p>Here is what i tried : output = <code>8e59ead5f90c6af11cf80641d51c241c</code></p>

<pre><code>public static class Program
{
    public static string ReverseString(this string s)
    {
        char[] arr = s.ToCharArray();
        Array.Reverse(arr);
        return new string(arr);
    }

    static void Main(string[] args)
    {
        var pass = ""123456"";
        byte[] salt = Encoding.ASCII.GetBytes(pass.ReverseString());


        //https://github.com/defuse/password-hashing/blob/master/PasswordHash.cs
        //was getting error salt not 8 byte,
        //http://stackoverflow.com/questions/1647481/what-is-the-c-sharp-equivalent-of-the-php-pack-function
        salt = Pack(pass.ReverseString());
        var hash = PasswordHash.PBKDF2(pass, salt, 1000, 16);
        Console.WriteLine(BitConverter.ToString(hash).Replace(""-"", string.Empty).ToLower());

        Console.ReadKey();

    }

    public static byte[] Pack(string salt)
    {
        using (var ms = new MemoryStream())
        {
            using (var bw = new BinaryWriter(ms))
            {
                var data = Encoding.ASCII.GetBytes(salt);
                bw.Write(data.Length + 4); // Size of ASCII string + length (4 byte int)
                bw.Write(data);
            }

            return ms.ToArray();
        }
    }
}
</code></pre>
","<p>It looks like the Pack method is not necessary, but it is necessary that your salt be at least 8 bytes.</p>

<pre><code>$pass = ""12345678"";
$mysalt = strrev($pass);
echo hash_pbkdf2('sha1', $pass, $mysalt, 1000, 32); //using the PHP inbuilt function
</code></pre>

<p>This outputs <code>381dae25b08b6f141671c74715961b1b</code>.</p>

<p>This C# code provides the same output.</p>

<pre><code>public static class Program
{
    public static string ReverseString(this string s)
    {
        char[] arr = s.ToCharArray();
        Array.Reverse(arr);
        return new string(arr);
    }

    static void Main(string[] args)
    {
        var pass = ""12345678"";
        byte[] salt = Encoding.ASCII.GetBytes(pass.ReverseString());


        //https://github.com/defuse/password-hashing/blob/master/PasswordHash.cs
        //was getting error salt not 8 byte,
        //https://stackoverflow.com/questions/1647481/what-is-the-c-sharp-equivalent-of-the-php-pack-function
        var hash = PasswordHash.PBKDF2(pass, salt, 1000, 16);
        Console.WriteLine(BitConverter.ToString(hash).Replace(""-"", string.Empty).ToLower());

        Console.ReadKey();

    }
}
</code></pre>

<p>From your comments, it seems like you may be developing under requirements constraints. If you are not able to control the requirements around salt, you might look at <a href=""https://stackoverflow.com/a/3055856/1600964"">this answer</a>.</p>
","1335","<c#><php><.net><pbkdf2><rfc2898>","1","2","2","2014-05-14 14:03:38","23654637","7","","434949","","2014-05-14 12:24:40","2014-05-11 14:13:40",""
"19594140","Better practice with PKBDF2, AES, IV and salt","<p>So, I'm encrypting list of documents with AES algorithm. I use PBKDF2 to determine key from user password. I have a few question about store data and IV/salt:</p>

<p>How to store documents:</p>

<ul>
<li>Encrypt all documents with one AES key, IV and salt</li>
<li>Encrypt each document with one AES key, but separate IV and salt</li>
</ul>

<p>How to store/retrive IV and salt:</p>

<ul>
<li>Get IV from PBKDF2 (like AES key) and no need to store it somewhere</li>
<li>Generate IV before every document encryption and store as plain text</li>
<li>For salt, I think, there are no option - anyway I need to store it as plain text</li>
</ul>

<p>As I unterstand from that article (<a href=""http://adamcaudill.com/2013/04/16/1password-pbkdf2-and-implementation-flaws/"" rel=""nofollow"">http://adamcaudill.com/2013/04/16/1password-pbkdf2-and-implementation-flaws/</a>) and some others:</p>

<ul>
<li>It's OK to store IV and salt as plain text, as sometimes attacker even don't need to know them</li>
<li>Different IV can only ""distort"" first cipher block (for CBC mode), but not all, so it doesn't bring mush security to AES method.</li>
</ul>
","<p>Each document should have its own IV and salt. Since the salt varies, so will the AES key for each document. You should never encrypt two documents with the same key and IV. In the most common mode (CBC), reusing IV+Key leads to some reduction in security. In some modes (CTR), reusing IV+Key destroys the security of the encryption. (The ""IV"" in CTR is called the ""nonce,"" but it is generally passed to the thing called ""IV"" in most encryption APIs.)</p>

<p>Typically, you generate the IV randomly, and store it at the start of the file in plain text. If you use PBKDF2 to generate the IV, you need another salt (which you then need to store anyway), so there's not much point to that.</p>

<p>You also need to remember that most common modes of AES (most notably CBC) provide no protection against modification. If someone knows what your plaintext is (or can guess what it might be), they can modify your ciphertext to decrypt to some other value they choose. (This is the actual meaning of ""If you have the wrong IV when you decrypt in CBC mode it corrupts the first block"" from the article. They say ""corrupt"" like it means ""garbage,"" but you can actually cause the first block to corrupt in specific ways.)</p>

<p>The way you fix this problem is with either authenticated encryption modes (like CCM or EAX), or you add an HMAC.</p>
","1318","<security><encryption><aes><pbkdf2>","4","2","1","2013-10-25 18:20:26","19596880","0","2","","","","2013-10-25 15:41:04",""
"25526446","PBKDF2 password storage - how to validate?","<p>I am trying to figure out how to validate the password, during login, when using PBKDF2. I am using PHP, so here is a basic password generation code:</p>

<pre><code>$salt = mcrypt_create_iv(16, MCRYPT_DEV_URANDOM);
echo hash_pbkdf2('sha256', 'password', $salt, 1000, 32);
</code></pre>

<p>I have stored this hashed password in the database. I don't know how to test this password against a login input since I don't have the salt and the salt is generated randomly for each user. How can I ""extract"" the salt from the stored password, prepend it to the inputted password and test the result against the stored password?</p>
","<p>You need to store the salt together with the hash, for example:</p>

<pre><code>$hash = $salt . '|' . hash_pbkdf2(.., .., $salt, ..);
</code></pre>

<p>You can then later extract the salt from it again and feed it back into the validation algorithm. In fact, you should do this with all the relevant input parameters for the hash (except for the password itself, obviously), to allow you to change your algorithm later as needed while still being able to validate already hashed passwords:</p>

<pre><code>$hash = $algo . '|' . $salt . '|' . $rounds . '|' . hash_pbkdf2($algo, .., $salt, $rounds, ..);
</code></pre>

<p>In fact, you should use the <a href=""http://php.net/crypt"" rel=""nofollow""><code>crypt</code></a> API, which already does it like this.</p>

<p>But really, you should be using <a href=""http://php.net/password_hash"" rel=""nofollow""><code>password_hash</code></a>, which is a user-friendly wrapper around <code>crypt</code> which ensures that you do it right.</p>
","1310","<php><passwords><salt><pbkdf2>","1","3","1","2014-08-27 12:10:01","25526843","2","","","","","2014-08-27 11:51:37",""
"9110282","CommonCrypto alternative to PBKDF2","<p>Since Apple has deprecated the use of openSSL in iOS I need an alternative to PBKDF2 in one of iOS Security frameworks. I tried to search CommonCrypto with no luck.</p>

<p>Is there a fair alternative to PBKDF2 which is recommanded by Apple?
i.e.  key derivation function (password based) in iOS (implemented by Apple)?</p>

<p>P.S. I'm aware of <a href=""https://stackoverflow.com/questions/8569555/pbkdf2-using-commoncrypto-on-ios"">PBKDF2 using CommonCrypto on iOS</a> , I don't want to use openSSL since it is not recommanded by Apple, see <a href=""https://stackoverflow.com/questions/7406946/why-is-apple-depricating-openssl-in-macos-10-7-lion"">Why is Apple Deprecating OpenSSL in MacOS 10.7 (Lion)?</a> </p>
","<p>PBKDF2 is a standard algorithm and is the recommended PBKDF algorithm. It is not ""OpenSSL"" and is not deprecated (it is encouraged). You should be using <code>CCKeyDerivationPBKDF()</code> from CommonCrypto for this purpose in iOS 5+ and OS X 10.7+. If you want to backport this version of CommonCrypto to older platforms, see <a href=""https://stackoverflow.com/questions/9958661/how-to-compile-and-use-commoncrypto-for-ios-4"">How to compile and use CommonCrypto for iOS 4?</a>.</p>
","1304","<iphone><ios><security><pbkdf2><commoncrypto>","1","3","1","2012-06-22 15:25:28","","0","","-1","","2017-05-23 12:06:12","2012-02-02 09:58:01",""
"19861729","How to input key with ""PBKDF2WithHmacSHA1"" in Java","<p>I am working on a Java project where I must ensure the confidentiality of users password saved in a plaintext file. </p>

<p>To do so, I will write only a hash of the password in the file. More specifically, my intention is to write the hash of the password and a random salt, plus the random salt itself, to avoid the use of rainbow and lookup tables. I also want to use key-stretching with PBKDF2, to make the computation of the hash computationally expensive. 
Finally, I would like to use a keyed hash algorithm, HMAC, for a final layer of protection.</p>

<p>I am trying to implement my thoughts in a Java code, and I have found some examples of the operations that I have presented above:</p>

<pre><code>private static byte[] pbkdf2(char[] password, byte[] salt, int iterations, int bytes)
    throws NoSuchAlgorithmException, InvalidKeySpecException
{
    PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, bytes * 8);
    SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    return skf.generateSecret(spec).getEncoded();
}
</code></pre>

<p>The thing that I really cannot understand is how to input my secret key as the key used by the HMAC algorithm, as it doesn't seem an input to the function. I have looked through the Java documentation, but I cannot find a solution to my question.</p>
","<p>If your talking about the HMAC function used internally by PBKDF2 for key streching, you don't need to supply a key, it will create one from the inputs.</p>

<p>If you wanted to use PBKDF2 to create key material for an HMAC function, then below works.</p>

<p>You init a Mac function the same way you'd do it with a cipher.</p>

<p>Using your <code>pbkdf2</code> method above.</p>

<pre><code>byte[] key = pbkdf2(password, salt, 1000, 16)
Mac mac = Mac.getInstance(""HmacSHA1"");
mac.init(new SecretKeySpec(key, ""HmacSHA1"");

byte[] macResult = mac.doFinal(...);
</code></pre>
","1285","<java><security><hash><hmac><pbkdf2>","1","1","1","2013-11-08 15:22:39","19862525","0","","","","","2013-11-08 14:42:39",""
"14051313","Key derivation function for random bytes?","<p>I know KDF (Key derivation function) are used to stretch user passwords, which are basically not suitable to be used as keys in cryptographic algorithms.</p>

<p>But what if I create a random key (random 32 bytes), do I still need to use KDF on it to ensure proper encryption?</p>
","<p>A KDF is typically used for deriving cryptographic keys from things like passphrases, which as you correctly say are not suitable for direct use. But they are also used for deriving additional keys from a master key, which depending on your overall scheme, might be useful. </p>

<p>Suppose you used a key agreement protocol where both parties ended up with a random shared secret. You could use a KDF to derive a key for encryption, and one for message integrity (for example, an HMAC key). </p>

<p>From <a href=""http://csrc.nist.gov/publications/nistpubs/800-108/sp800-108.pdf"" rel=""nofollow"">NIST SP800-108</a>:</p>

<blockquote>
  <p>When parties share a secret symmetric key (e.g., upon a successful
  execution of a key-  establishment scheme as specified in <a href=""http://csrc.nist.gov/publications/nistpubs/800-108/sp800-108.pdf"" rel=""nofollow"">1</a> and
  [2]), it is often the case that additional keys will be needed (e.g.
  as described in [3]). Separate keys may be needed for different 
  cryptographic purposes – for example, one  key may be required for an
  encryption  algorithm, while another key is intended for use by an
  integrity protection algorithm, such  as a message authentication
  code. At other times, the distinct keys required by multiple  entities
  may be generated by a trusted party from a single master key.  Key
  derivation  functions are used to derive such keys.</p>
</blockquote>

<p>The short answer is, no, you don't <em>need</em> to use a KDF, assuming your key generation is correct.</p>
","1281","<encryption><password-encryption><pbkdf2>","1","3","1","2012-12-27 08:25:06","14051585","1","1","","","","2012-12-27 07:55:49",""
"22851828","What does PKCS5_PBKDF2_HMAC_SHA1 return value mean?","<p>I'm attempting to use OpenSSL's <a href=""http://cvs.openssl.org/fileview?f=openssl/crypto/evp/p5_crpt2.c&amp;v=1.25.4.3"" rel=""nofollow"">PKCS5_PBKDF2_HMAC_SHA1</a> method. I gather that it returns 0 if it succeeds, and some other value otherwise. My question is, what does a non-zero return value mean? Memory error? Usage error? How should my program handle it (retry, quit?)?</p>

<p>Edit: A corollary question is, is there any way to figure this out besides reverse-engineering the method itself?</p>
","<blockquote>
  <p>is there any way to figure this out besides reverse-engineering the method itself?</p>
</blockquote>

<p><code>PKCS5_PBKDF2_HMAC_SHA1</code> looks like one of those undocumented functions because I can't find it in the <a href=""https://www.openssl.org/docs/"" rel=""nofollow"">OpenSSL docs</a>. OpenSSL has a lot of them, so you should be prepared to study the sources if you are going to use the library.</p>

<hr>

<blockquote>
  <p>I gather that it returns 0 if it succeeds, and some other value otherwise.</p>
</blockquote>

<p>Actually, its reversed. Here's how I know...</p>

<pre><code>$ grep -R PKCS5_PBKDF2_HMAC_SHA1 *
crypto/evp/evp.h:int PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,
crypto/evp/p5_crpt2.c:int PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,
...
</code></pre>

<p>So, you find the function's implementation in <code>crypto/evp/p5_crpt2.c</code>:</p>

<pre><code>int PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,
                           const unsigned char *salt, int saltlen, int iter,
                           int keylen, unsigned char *out)
    {
        return PKCS5_PBKDF2_HMAC(pass, passlen, salt, saltlen, iter,
                                 EVP_sha1(), keylen, out);
    }
</code></pre>

<p>Following <code>PKCS5_PBKDF2_HMAC</code>:</p>

<pre><code>$ grep -R PKCS5_PBKDF2_HMAC *
...
crypto/evp/evp.h:int PKCS5_PBKDF2_HMAC(const char *pass, int passlen,
crypto/evp/p5_crpt2.c:int PKCS5_PBKDF2_HMAC(const char *pass, int passlen,
...
</code></pre>

<p>And again, from <code>crypto/evp/p5_crpt2.c</code>:</p>

<pre><code>int PKCS5_PBKDF2_HMAC(const char *pass, int passlen,
                      const unsigned char *salt, int saltlen, int iter,
                      const EVP_MD *digest,
                      int keylen, unsigned char *out)
{
    unsigned char digtmp[EVP_MAX_MD_SIZE], *p, itmp[4];
    int cplen, j, k, tkeylen, mdlen;
    unsigned long i = 1;
    HMAC_CTX hctx_tpl, hctx;

    mdlen = EVP_MD_size(digest);
    if (mdlen &lt; 0)
        return 0;

    HMAC_CTX_init(&amp;hctx_tpl);
    p = out;
    tkeylen = keylen;
    if(!pass)
        passlen = 0;
    else if(passlen == -1)
        passlen = strlen(pass);
    if (!HMAC_Init_ex(&amp;hctx_tpl, pass, passlen, digest, NULL))
    {
        HMAC_CTX_cleanup(&amp;hctx_tpl);
        return 0;
    }
    while(tkeylen)
    {
        if(tkeylen &gt; mdlen)
            cplen = mdlen;
        else
            cplen = tkeylen;
        /* We are unlikely to ever use more than 256 blocks (5120 bits!)
         * but just in case...
         */
        itmp[0] = (unsigned char)((i &gt;&gt; 24) &amp; 0xff);
        itmp[1] = (unsigned char)((i &gt;&gt; 16) &amp; 0xff);
        itmp[2] = (unsigned char)((i &gt;&gt; 8) &amp; 0xff);
        itmp[3] = (unsigned char)(i &amp; 0xff);
        if (!HMAC_CTX_copy(&amp;hctx, &amp;hctx_tpl))
        {
            HMAC_CTX_cleanup(&amp;hctx_tpl);
            return 0;
        }
        if (!HMAC_Update(&amp;hctx, salt, saltlen)
            || !HMAC_Update(&amp;hctx, itmp, 4)
            || !HMAC_Final(&amp;hctx, digtmp, NULL))
        {
            HMAC_CTX_cleanup(&amp;hctx_tpl);
            HMAC_CTX_cleanup(&amp;hctx);
            return 0;
        }
        HMAC_CTX_cleanup(&amp;hctx);
        memcpy(p, digtmp, cplen);
        for(j = 1; j &lt; iter; j++)
        {
            if (!HMAC_CTX_copy(&amp;hctx, &amp;hctx_tpl))
            {
                HMAC_CTX_cleanup(&amp;hctx_tpl);
                return 0;
            }
            if (!HMAC_Update(&amp;hctx, digtmp, mdlen)
                || !HMAC_Final(&amp;hctx, digtmp, NULL))
            {
                HMAC_CTX_cleanup(&amp;hctx_tpl);
                HMAC_CTX_cleanup(&amp;hctx);
                return 0;
            }
            HMAC_CTX_cleanup(&amp;hctx);
            for(k = 0; k &lt; cplen; k++)
                p[k] ^= digtmp[k];
        }
        tkeylen-= cplen;
        i++;
        p+= cplen;
    }
    HMAC_CTX_cleanup(&amp;hctx_tpl);

    return 1;
}
</code></pre>

<p>So it looks like <code>0</code> on failure, and <code>1</code> on success. You should not see other values. And if you get a <code>0</code>, then all the <code>OUT</code> parameters are junk.</p>

<hr>

<blockquote>
  <p>Memory error? Usage error?</p>
</blockquote>

<p>Well, sometimes you can call <code>ERR_get_error</code>. If you call it and it makes sense, then the error code is good. If the error code makes no sense, then its probably not good.</p>

<p>Sadly, that's the way I handle it because the library is not consistent with setting error codes. For example, here's the library code to load the <code>RDRAND</code> engine.</p>

<p>Notice the code clears the error code on failure <em>if</em> its a 3rd generation Ivy Bridge (that's the capability being tested), and does not clear or set an error otherwise!!!</p>

<pre><code>void ENGINE_load_rdrand (void)
{
    extern unsigned int OPENSSL_ia32cap_P[];

    if (OPENSSL_ia32cap_P[1] &amp; (1&lt;&lt;(62-32)))
    {
        ENGINE *toadd = ENGINE_rdrand();
        if(!toadd) return;
        ENGINE_add(toadd);
        ENGINE_free(toadd);
        ERR_clear_error();
    }
}
</code></pre>

<hr>

<blockquote>
  <p>How should my program handle it (retry, quit?)?</p>
</blockquote>

<p>It looks like a hard failure.</p>

<hr>

<p>Finally, that's exactly how I navigate the sources in this situation. If you don't like <code>grep</code> you can try <a href=""http://ctags.sourceforge.net/"" rel=""nofollow""><code>ctags</code></a> or another source code browser.</p>
","1276","<error-handling><openssl><pbkdf2>","4","4","1","2015-06-06 22:41:03","22853688","2","2","608639","","2015-06-06 22:41:03","2014-04-04 01:16:51",""
"9990064","HEX representation of byte array","<p>I feel pretty stupid asking this, but as I don't know the answer, I'm going ahead anyway. </p>

<p>I""m trying out some authentication code and want to know why the byte array I get from Rfc2898DeriveBytes needs to be converted to HEX and back to a byte array again for it to correctly initialise my HMACSHA1 object. I feel like I am doing something silly, or simply missing something obvious.</p>

<p>My client code is a javascript function based on <a href=""http://code.google.com/p/crypto-js/"" rel=""noreferrer"">crypto-js</a>;</p>

<pre><code>var key256bit = Crypto.PBKDF2(passwordEntered, saltBytes, 32, { iterations: 1000 }); 
var hmacBytes = Crypto.HMAC(Crypto.SHA1, url, key256bit, { asBytes: true });
var base64Hash = Crypto.util.bytesToBase64(hmacBytes);
</code></pre>

<p>My Server side code is as follows;</p>

<pre><code>    Rfc2898DeriveBytes rfc2898 = new Rfc2898DeriveBytes(password,
                                              encoding.GetBytes(salt), 1000);
    byte[] key = rfc2898.GetBytes(32);

    // Don't think I should need to do this. 
    // However, it wont work if I initialise HMACSHA1 
    // with the rfc2898.GetBytes(32)
    string test = ByteArrayToString(key); 

    HMACSHA1 hmacSha1 = new HMACSHA1(encoding.GetBytes(test));

    byte[] computedHash = hmacSha1.ComputeHash(encoding.GetBytes(requestUri));
    string computedHashString = Convert.ToBase64String(computedHash);
</code></pre>

<p>My ByteArrayToString method which I nabbed from the web is;</p>

<pre><code>private static string ByteArrayToString(byte[] ba)
{
    StringBuilder hex = new StringBuilder(ba.Length * 2);
    foreach (byte b in ba)
        hex.AppendFormat(""{0:x2}"", b);
    return hex.ToString();
}
</code></pre>

<p>So I can see that I get 32 bytes from my call to <code>rfc2898.GetBytes(32)</code>. I converted that to HEX using the ByteArrayToString method to confirm it matches what I am seeing in my Javascript variable key256bit. Now my test variable is a string of length 64 and when I pass that to HMACSHA1's constuctor using encoding.GetBytes(test) it is a byte array of length 64.</p>

<p>The doco on crypto-js is a bit lacking, but I thought the call to Crypto.PBKDF2 with a param of 32 and it was creating a key of 32 bytes long (or 256 bits).</p>

<p>Any clarification is much appreciated.</p>
","<p>I suspect this is the root of the issue, in <a href=""http://code.google.com/p/crypto-js/source/browse/branches/2.x/src/PBKDF2.js"" rel=""nofollow"">PBKDF2.js</a>:</p>

<pre><code>return options &amp;&amp; options.asBytes ? derivedKeyBytes :
       options &amp;&amp; options.asString ? Binary.bytesToString(derivedKeyBytes) :
       util.bytesToHex(derivedKeyBytes);
</code></pre>

<p>Because you haven't provided options for either <code>asBytes</code> or <code>asString</code>, it's converting the key to a hex representation - just as your C# code does. So at the moment you <em>are</em> using a 512 bit key, precisely because you're generating 2 bytes of ""used key"" from each byte of ""original key"".</p>

<p>I suspect that if you specify the <code>asBytes</code> option in the Javascript, it will just work without the extra hex part in the C# code.</p>

<p>Then again, I've never seen PBKDF2 before, so I could be way off base...</p>
","1253","<hex><bytearray><hmac><pbkdf2>","6","3","1","2012-04-19 08:34:51","10222807","4","","","","","2012-04-03 08:57:30",""
"26969150","Encrypt in Objective C or Apple Swift Code with method PBKDF2WithHmacSHA1","<p>I come to you today after a long search for the solution.</p>

<p>I want to encrypt a word with a specific method.</p>

<p>This method has already been implemented in Java. I would get the same thing with the objective C language or swift.</p>

<p>I have already explored several methods. For example, I tried to run or RNCryptManager CPCryptController. But I get no conclusive results.</p>

<p>My java code is as follows:</p>

<pre><code>public String encrypt(String texte) {
   byte[] bytePassword = Base64.decode(PASSWORD, Base64.DEFAULT);
   byte[] byteSalt = Base64.decode(SALT, Base64.DEFAULT);
   byte[] bytesIv = Base64.decode(IV, Base64.DEFAULT);
   SecretKeyFactory factory = null;
   factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
   KeySpec spec = new PBEKeySpec(PASSWORD.toCharArray(), byteSalt, NB_ITER_RFC, 128);
   SecretKey temp = null;
   temp = factory.generateSecret(spec);
   byte[] clef = temp.getEncoded();
   Cipher c = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");
   IvParameterSpec ivParam = new IvParameterSpec(bytesIv);
   c.init(Cipher.ENCRYPT_MODE, temp, ivParam);     
   byte[] encrypted = c.doFinal(texte.getBytes(""UTF-8""));
   mdp = Base64.encodeToString(encrypted, Base64.DEFAULT);
   Log.i(""MDP CHIFFRE"", "" = "" + mdp);
}
</code></pre>

<p>I intend to use <a href=""https://developer.apple.com/library/mac/#samplecode/CryptoCompatibility/"" rel=""nofollow"">https://developer.apple.com/library/mac/#samplecode/CryptoCompatibility/</a></p>

<p>The code I have now is</p>

<pre><code>QCCPBKDF2SHA1KeyDerivation * op;
NSString * passwordString;
NSData * saltData;
NSData * expectedKeyData;

passwordString = @ ""Hello Cruel World!"";
saltData = [@ ""Some salt sir?"" dataUsingEncoding: NSUTF8StringEncoding];
expectedKeyData = [QHex dataWithHexString: @ ""e56c27f5eed251db50a3""];

op = [[QCCPBKDF2SHA1KeyDerivation alloc] initWithPasswordString: passwordString saltData:   saltData]

op.rounds = 1000;
op.derivedKeyLength = 10;

[[ToolCommon sharedInstance] synchronouslyRunOperation: op];

if (nil == op.error) {
   NSString * newStr = [[NSString alloc] initWithData: op.derivedKeyData encoding:    NSUTF8StringEncoding]
   NSLog (@ ""This is it:% @"", newStr);
} Else {
    NSLog (@ ""Error"");
}
</code></pre>

<p>However when I run this code, I get a null result.
I do not see or can come to my mistake? What are the right solution to convert PBKDF2-HMAC-SHA1?</p>

<p>Thank you in advance.</p>
","<p>There right solution is:</p>

<pre><code>+ (NSData *)AESKeyForPassword:(NSString *)password 
                         salt:(NSData *)salt {
  NSMutableData *
  derivedKey = [NSMutableData dataWithLength:kAlgorithmKeySize];

  int 
  result = CCKeyDerivationPBKDF(kCCPBKDF2,            // algorithm
                                password.UTF8String,  // password
                                [password lengthOfBytesUsingEncoding:NSUTF8StringEncoding],  // passwordLength
                                salt.bytes,           // salt
                                salt.length,          // saltLen
                                kCCPRFHmacAlgSHA1,    // PRF
                                kPBKDFRounds,         // rounds
                                derivedKey.mutableBytes, // derivedKey
                                derivedKey.length); // derivedKeyLen

  // Do not log password here
  NSAssert(result == kCCSuccess,
           @""Unable to create AES key for password: %d"", result);

  return derivedKey;
}
</code></pre>

<p>I found this code in this article:
<a href=""http://robnapier.net/aes-commoncrypto"" rel=""nofollow"">http://robnapier.net/aes-commoncrypto</a></p>
","1171","<java><objective-c><encryption><swift><pbkdf2>","0","-1","1","2014-11-17 10:41:56","","3","2","","","","2014-11-17 09:13:46",""
"15209045","PBKDF2 security key in android","<p>I get from server password like show below and i need to verify that user password is same like form server. How can i do it please?</p>

<p>From server i got this</p>

<pre><code>pbkdf2_sha256$10000$v2WJyd8HkqhU$QVAp707PYTiFDHvzjwBCTbecr9+6q2OIPsunPyOxXGU=
</code></pre>
","<p>So BouncyCastle(the crypto provider in Andorid) doesn't implement PBKDF2 using SHA256, so you will have to get very slightly custom.  This <a href=""https://stackoverflow.com/a/11642114/1904979"">SO answer</a> tells you which class to modify to get the algorithm set up.  Then you will need to integrate it, or figure out how to call it yourself (and I'm afraid I can't help much on that)</p>

<p>as far as the hash itself goes the format (as <a href=""http://pythonhosted.org/passlib/lib/passlib.hash.django_std.html"" rel=""nofollow noreferrer"">defined here</a>) is:</p>

<pre><code>&lt;algorithm&gt;$&lt;iteration count&gt;$&lt;salt&gt;$&lt;hash&gt;
</code></pre>

<p>where in your case the iteration count is 10000, your salt is the ascii string <code>v2WJyd8HkqhU</code> and the the hash is the byte array represented by the base64 string <code>QVAp707PYTiFDHvzjwBCTbecr9+6q2OIPsunPyOxXGU=</code></p>

<p>You will compute the hash of the utf8 string of the password with the parameters specified.  Then, you can either base64 encode the output of the hash and compare the strings, or base64 decode the recieved hash and compare the byte arrays.  Apache Commons Codec provides some good Base64 encoding/decoding methods in its <a href=""http://commons.apache.org/codec/apidocs/org/apache/commons/codec/binary/Base64.html"" rel=""nofollow noreferrer"">Base64</a> class.</p>
","1158","<android><security><encryption><sha><pbkdf2>","1","1","1","2013-03-04 21:45:29","","7","","","","","2013-03-04 19:02:06","2013-03-05 00:38:43"
"13103049","How can I hash a password in Tornado with minimal blocking?","<p>I'm using <a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow"">PBKDF2</a>, but this applies equally to BCrypt.</p>

<p>Hashing a password with a reasonable number of iterations can easily block for 0.5 seconds. What is a lightweight way to take this out of process? I'm reluctant to setup something like Celery or Gearman just for this operation. </p>
","<p>You could use a thread. This will not block tornado. Say that you have a handler that hashes passwords. Then the two relevant methods might look like this:</p>

<pre><code>import threading

def on_message(self, message):
    # pull out user and password from message somehow
    thread = threading.Thread(target=self.hash_password, args=(user, password))
    thread.start()


def hash_password(self, user, password):
    # do the hash and save to db or check against hashed password
</code></pre>

<p>You could either wait for the thread to finish in the <code>on_message</code> method then write the response, or if you don't need to send a response then just let it finish and save the results in the <code>hash_password</code> method.   </p>

<p>If you do wait for the thread to finish you have to be careful how you do it. <code>time.sleep</code> will block so you will want to use tornado's non blocking wait instead.     </p>
","1145","<python><asynchronous><tornado><bcrypt><pbkdf2>","3","6","1","2012-10-28 12:33:30","13108474","0","3","","","","2012-10-27 18:39:33",""
"19519579","Why OpenSSL::PKCS5.pbkdf2_hmac_sha1 generates key with different length?","<p>I'm using Rails 3.2 and are trying to generate a key and IV from <strong>pbkdf2_hmac_sha1</strong> function in order to crypto something using AES-CBC 256.</p>

<p>The code I use to generate it is:</p>

<pre><code>require ""openssl""
require ""base64""
require ""digest""
require ""securerandom""

@chave = ""fd5d148867091d7595c388ac0dc50bb465052b764c4db8b4b4c3448b52ee0b33df16975830acca82""

cipher = OpenSSL::Cipher.new(""AES-256-CBC"")
key_iv = OpenSSL::PKCS5.pbkdf2_hmac_sha1(@chave, salt, 2000, cipher.key_len+cipher.iv_len)
key = key_iv[0, cipher.key_len]
iv  = key_iv[cipher.key_len, cipher.iv_len]
</code></pre>

<p>I generate a random salt using SecureRandom.urlsafe_base64 and noticed that sometimes the IV length (which should be 16 bytes) is 15 bytes rather than 16 bytes when I use some salts.</p>

<p>For instance, if you have a salt = ""lzbH78AwVK7U1eo-ephK6A"", it generates a IV = ""604ff394b52e79255fa35b081684b0"" (15 bytes long).</p>

<p>Can someone have a clue of what I'm doing wrong?</p>
","<p>Since <code>pbkdf2_hmac_sha1</code> yields a string, it seems your conversion to hex-number is wrong.
(using your values in this example):</p>

<pre><code>irb(main):029:0&gt; iv  = key_iv[cipher.key_len, cipher.iv_len]
=&gt; ""`O\xF3\x94\n\xB5.y%_\xA3[\b\x16\x84\xB0""
irb(main):030:0&gt; iv.length
=&gt; 16
irb(main):032:0&gt; iv.each_char { |c| puts c.ord.to_s(16) }
60
4f
f3
94
a     ### this one is missing in your number -- it maps to \n
b5
2e
79
25
5f
a3
5b
8
16
84
b0
=&gt; ""`O\xF3\x94\n\xB5.y%_\xA3[\b\x16\x84\xB0""
</code></pre>
","1144","<ruby><pbkdf2>","1","2","1","2014-02-20 15:21:00","","0","","","","","2013-10-22 13:40:16",""
"22100763","Rfc2898DeriveBytes - password length","<p>Trying to find related answer for a long time, but not convinced yet.</p>

<p>What I am trying is to encrypt using RijndaelManaged. To create Key, I am passing password, salt and iteration to Rfc2898DeriveBytes.</p>

<p>I was thinking to add constant if user entered password is below specific length before passing it to Rfc2898DeriveBytes.</p>

<p>So far what I found that adding constant will not add any benefit to security. Let suppose attacker get an access to database containing encrypted data along with salt, but not to constant will give him a bit harder time. Although in the end he will find that constant.</p>

<p>Or it is ""really and extremely"" safe to pass any length password to Rfc2898DeriveBytes without getting worried?</p>

<p>Does passing shorter or lengthier password affect key derivation process in term of which one is better and most recommended?</p>

<p>So far what I know that random salt and more iteration is important.</p>

<p>Following is the code, should I remove adding constant to password or keep it?</p>

<p>(Note: password length restriction to user is not applied at GUI, user can pass 1 character or even more than 10 characters)</p>

<pre><code>string constant = ""AnyConstantToMakePasswordBigger"";

if (password.Length &lt; 8) 
{ 
password = password + constant; 
}

RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();

byte[] salt = new byte[8];

rng.GetBytes(salt);

Rfc2898DeriveBytes derivedKey = new Rfc2898DeriveBytes(password, salt, 1000);

using (RijndaelManaged aes = new RijndaelManaged())
{
     aes.Key = derivedKey.GetBytes(keyLength);
     .....
}
</code></pre>

<p>Welcoming any positive or negative comment and responses.</p>
","<p>With an assumption that the attacker doesn't know the ""constant"" then, yes, it would effectively increase security by making brute force attacks harder.  HOWEVER, that is a very bad assumption and you should ALWAYS assume the attacker has your source code.</p>

<p>Continuing on our bad assumption: You are correct that the attacker may eventually figure out your constant if enough passwords are cracked.</p>

<p>As to whether or not one adding more characters to your password improves key derivation: not really.  The key that you generate will be the same length no matter what.  But an attacker is not going to attempt to guess your key, they are too long and effectively impossible to brute force.  Any attacker is going to go after the password.</p>

<p>This is where iterations, salt and hard to guess long passwords come in. Iterations increase difficulty by increasing the time it takes to make each guess.  While the time to do thousands of iterations when a legitimate user logs in is negligible,  the cost to a brute force attacker is huge.  Long passwords additionally increase difficulty of brute force.  The salt helps to protect identical passwords from being solved at the same time (the attacker must attack each password independently even if they are the same).</p>
","1118","<c#><encryption><pbkdf2>","0","0","1","2014-02-28 17:06:42","","7","0","","","","2014-02-28 16:38:14",""
"29391615","How can I verify a cryptographic hash created by Python's Passlib using Node.js?","<p>I have a backend application written in Python used by the content managers of my site. Users' passwords are hashed using <a href=""https://pythonhosted.org/passlib/lib/passlib.hash.pbkdf2_digest.html#passlib.hash.pbkdf2_sha512"" rel=""nofollow"">passlib's pbkdf2_sha512</a> function. I began to develop the frontend application for which I decided to use nodejs with React for UX reasons. </p>

<p>Now my problem is I can't figure out how can I verify the passwords hashed by passlib using nodejs for authenticating my users. Passlib's implementation seems too specific to me and I'm not really into crypto stuff to figure it out.</p>

<p>I have the MCF so I know the algorithm and digest type, the salt, the number of iterations and the key length. How can I verify this output from passlib in node? Should I rather choose another algorithm better supported by both platforms?</p>
","<p>Ok, I turned to sha512_crypt instead and found a nice library for node called <a href=""https://github.com/mvo5/sha512crypt-node"" rel=""nofollow"">sha512crypt-node</a>. The README itself contains an example for both Python and Node, exactly what I needed. Here's a little example for ppl. using these platforms:</p>

<p>Python:</p>

<pre><code>from passlib.hash import sha512_crypt

orig = ""password""
h = sha512_crypt.encrypt(orig)
print(""hash"", h)
# h for eg. is $6$rounds=100000$5YnTXatKh4b1pLjp$3QQjVIfjrbiTakj.wkaw1woAcFiPRAjJP2U/b3BiGW4m8OvI8x0tgw1bb63dNQWMUl1uYNDBcTO3tWgrJ6eHh1

okay = sha512_crypt.verify(orig, h)
print(""verified"", okay)
</code></pre>

<p>Node:</p>

<pre><code>var sha512crypt = require(""sha512crypt-node"").sha512crypt;

// origHash is the hash generated by passlib    
var origHash = ""$6$rounds=100000$5YnTXatKh4b1pLjp$3QQjVIfjrbiTakj.wkaw1woAcFiPRAjJP2U/b3BiGW4m8OvI8x0tgw1bb63dNQWMUl1uYNDBcTO3tWgrJ6eHh1"",
    parts = origHash.split('$'),
    rounds = parts[2],
    salt = '$' + parts[1] + '$' + rounds + '$' + parts[3],
    password = ""password"";

var hash = sha512crypt(password, salt);
console.log(""verified"", hash === origHash);
</code></pre>
","1112","<python><node.js><security><hash><pbkdf2>","1","1","2","2017-05-26 11:29:06","29394486","0","","176210","","2015-04-01 15:13:20","2015-04-01 13:03:56",""
"29391615","How can I verify a cryptographic hash created by Python's Passlib using Node.js?","<p>I have a backend application written in Python used by the content managers of my site. Users' passwords are hashed using <a href=""https://pythonhosted.org/passlib/lib/passlib.hash.pbkdf2_digest.html#passlib.hash.pbkdf2_sha512"" rel=""nofollow"">passlib's pbkdf2_sha512</a> function. I began to develop the frontend application for which I decided to use nodejs with React for UX reasons. </p>

<p>Now my problem is I can't figure out how can I verify the passwords hashed by passlib using nodejs for authenticating my users. Passlib's implementation seems too specific to me and I'm not really into crypto stuff to figure it out.</p>

<p>I have the MCF so I know the algorithm and digest type, the salt, the number of iterations and the key length. How can I verify this output from passlib in node? Should I rather choose another algorithm better supported by both platforms?</p>
","<p>We had exactly the same Problem but switching to sha512crypt was not an option. In our case the passwords were generated with flask-security. The examples below cover regular passlib and flask-security hashes, which first generate a HMAC with a secret salt and use it as the pbkdf2-sha512 password. See code below.</p>

<p>Source is on GitHub: <a href=""https://github.com/badzong/node-verify-flask-security-passwords"" rel=""nofollow noreferrer"">https://github.com/badzong/node-verify-flask-security-passwords</a></p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var crypto = require('crypto');
var pbkdf2_sha512 = require('pbkdf2-sha512');

function b64trimmed(buf) {
        return buf.toString('base64').replace(/=*$/, '').replace('+', '.');
}

function b64decode(str) {
        // . in Base64?
        str = str.replace('.', '+');
        if (str.length % 4) {
                str += '='.repeat(4 - str.length % 4);
        }
        return new Buffer(str, 'base64');
}

function get_hmac(secret, password) {
        var hmac = crypto.createHmac('sha512', secret).update(password).digest('base64');

        return hmac;
}

function get_hash(password, salt, rounds) {

        // FIXME: KeyLenBytes is hardcoded
        var h = b64trimmed(pbkdf2_sha512(password, salt, rounds, 64));
        var joined_hash = ['', 'pbkdf2-sha512', rounds, b64trimmed(salt), h].join('$');

        return joined_hash;
}

function verify_hash(password, stored_hash) {
        var scheme = stored_hash.split('$')[1];
        var rounds = stored_hash.split('$')[2];
        var salt = stored_hash.split('$')[3];

        // FIXME: Maybe throw an exception
        if (scheme !== 'pbkdf2-sha512') {
                return false;
        }

        var h = get_hash(password, b64decode(salt), rounds);

        return h === stored_hash;
}

function new_hash(password, rounds) {

        // FIXME: Salt size is hardcoded
        var salt = crypto.randomBytes(16);

        return get_hash(password, salt, rounds);
}

var password = 'Example Password';

// Usage:
var h = new_hash(password, 20000);
console.log('HASH ' + h);
console.log('VERIFY ' + verify_hash(password, h));

// Usage for passwords generated with flask_security:

// SECURITY_PASSWORD_SALT is set in config.py and used by flask-security
var SECURITY_PASSWORD_SALT = 'Many random bytes...';

var password_hmac = get_hmac(SECURITY_PASSWORD_SALT, password);
var h = new_hash(password_hmac, 20000);
console.log('HASH ' + h);
console.log('VERIFY ' + verify_hash(password_hmac, h));
        </code></pre>
</div>
</div>
</p>
","1112","<python><node.js><security><hash><pbkdf2>","1","2","2","2017-05-26 11:29:06","29394486","0","","176210","","2015-04-01 15:13:20","2015-04-01 13:03:56",""
"12534802","Using mcrypt_create_iv on PHP IIS","<p>I'm trying to set up password salting on our website, and found the PBKDF2 functions at <a href=""https://defuse.ca/php-pbkdf2.htm"" rel=""nofollow"">https://defuse.ca/php-pbkdf2.htm</a><br>
When I try it, I get:  </p>

<blockquote>
  <p>Fatal error: mcrypt_create_iv(): Could not gather sufficient random
  data in include\PBKDF2.php on line 23</p>
</blockquote>

<p>I'm not sure if I need to do anything to make this work. It's running on IIS7.5</p>
","<p>I was using PHP 5.3.6, which apparently has a bug with mcrypt_create_iv().<br>
Switched to the latest version 5.4.7 and it started working.</p>
","1100","<php><iis><mcrypt><pbkdf2>","0","0","2","2016-10-07 18:56:19","12602894","1","","","","","2012-09-21 16:53:58",""
"12534802","Using mcrypt_create_iv on PHP IIS","<p>I'm trying to set up password salting on our website, and found the PBKDF2 functions at <a href=""https://defuse.ca/php-pbkdf2.htm"" rel=""nofollow"">https://defuse.ca/php-pbkdf2.htm</a><br>
When I try it, I get:  </p>

<blockquote>
  <p>Fatal error: mcrypt_create_iv(): Could not gather sufficient random
  data in include\PBKDF2.php on line 23</p>
</blockquote>

<p>I'm not sure if I need to do anything to make this work. It's running on IIS7.5</p>
","<p>For those who are still facing error:</p>

<blockquote>
  <p>Fatal Error: Call to undefined function mcrypt_create_iv()</p>
</blockquote>

<p>Please check the phpversion and correspondingly make sure to go to <code>php.ini</code> file and add the line or uncomment:</p>

<pre><code>extension=php_mcrypt.dll
</code></pre>

<p>I was able to get solution from here <a href=""http://tech.domainstack.in/how-to-enable-mcrypt-on-the-server/"" rel=""nofollow"">http://tech.domainstack.in/how-to-enable-mcrypt-on-the-server/</a> </p>
","1100","<php><iis><mcrypt><pbkdf2>","0","1","2","2016-10-07 18:56:19","12602894","1","","","","","2012-09-21 16:53:58",""
"28347341","Using PBKDF2WithHmacSHA1 and DESede/CBC/PKCS5Padding for Android 4.2 and older","<p>In my Android application, I would like to encrypt passwords with DESede/CBC/PKCS5Padding, my solution works from Lollipop(5.x),Android KitKat(4.4.x) and Android Jelly Bean(4.3.x )</p>

<pre><code>private static final String KEY = ""a2[..]"";
private static final String SALT = ""t[..]"";
private static final String IV = ""u[..]"";
private static final String DES_EDE_PKCS5 = ""DESede/CBC/PKCS5Padding""

public static String encrypt(String password) {
    byte[] byteSalt = Base64.decode(SALT, Base64.DEFAULT);
    byte[] bytesIv = Base64.decode(IV, Base64.DEFAULT);
    String mdp = """";        
    try {           
        SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");          
        KeySpec spec = new PBEKeySpec(KEY.toCharArray(), byteSalt, NB_ITER_RFC, SIZE_KEY);          
        SecretKey secretKey = factory.generateSecret(spec);             
        Cipher c = Cipher.getInstance(DES_EDE_PKCS5);           
        IvParameterSpec ivParam = new IvParameterSpec(bytesIv);         
        c.init(Cipher.ENCRYPT_MODE, secretKey, ivParam);                
        byte[] encrypted = c.doFinal(password.getBytes(""UTF-8""));
        mdp = Base64.encodeToString(encrypted, Base64.DEFAULT);                 
    }
    catch [..]
    return mdp;
}
</code></pre>

<p>But it's doesn't work for below version (4.2.x and below), this encrypted password seems to change randomly for exemple : </p>

<pre><code>D/andro-Chiffrement-encrypt(10739): password chiffré = P7vWc+7hFuUaWQghVeO+zA==
D/andro-Chiffrement-encrypt(10739): password chiffré = jGr6nlvnYLd/AK/d7nkUrA==
D/andro-Chiffrement-encrypt(10739): password chiffré = I2weyEddIav7EulAiuQDbg==
D/andro-Chiffrement-encrypt(10739): password chiffré = HF7OFpUXYuwOm81WekReDg==
</code></pre>

<p>How can I solve this problem for Android 4.2.x especially ?</p>

<p>I found that with library Bouncy Castle, but I didn't found how to implement 'IV' (Generator Vector). Do you have an idea ?</p>

<pre><code>PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator();
gen.init(PBEParametersGenerator.PKCS12PasswordToBytes(passCharArray), byteSalt, NB_ITER_RFC);
KeyParameter params = (KeyParameter) gen.generateDerivedParameters(SIZE_KEY);
String password2 = Base64.encodeToString(params.getKey(), Base64.DEFAULT);
</code></pre>
","<p>Starting from Android 4.4 the SecretKeyFactory API changed. Maybe this could help:</p>

<blockquote>
  <p>In Android 4.3 and earlier platform versions, the javax.crypto.SecretKeyFactory implementation of  the PBKDF2WithHmacSHA1 key-generation algorithm only uses the lower 8 bits of Java characters in passphrases. In Android 4.4, the algorithm is changed to use all available bits in Unicode characters, in compliance with recommendations in PCKS #5.</p>
  
  <p>This change could affect applications that use symmetric encryption and meet all of the following conditions:
  1. Use SecretKeyFactory to generate symmetric keys, and
  2. Use PBKDF2WithHmacSHA1 as their key-generation algorithm for SecretKeyFactory, and
  3. Allow Unicode input for passphrases</p>
</blockquote>

<p>Here the original article:</p>

<p><a href=""https://plus.google.com/+AndroidDevelopers/posts/fTY97ekzn6Z"" rel=""nofollow"">https://plus.google.com/+AndroidDevelopers/posts/fTY97ekzn6Z</a></p>

<p>And here you can read about changes to SecretKeyFactory Api:</p>

<p><a href=""http://android-developers.blogspot.it/2013/12/changes-to-secretkeyfactory-api-in.html"" rel=""nofollow"">http://android-developers.blogspot.it/2013/12/changes-to-secretkeyfactory-api-in.html</a></p>
","1098","<java><android><security><hash><pbkdf2>","1","0","2","2015-02-17 08:38:18","","0","3","2046629","","2015-02-17 08:38:18","2015-02-05 15:06:19",""
"28347341","Using PBKDF2WithHmacSHA1 and DESede/CBC/PKCS5Padding for Android 4.2 and older","<p>In my Android application, I would like to encrypt passwords with DESede/CBC/PKCS5Padding, my solution works from Lollipop(5.x),Android KitKat(4.4.x) and Android Jelly Bean(4.3.x )</p>

<pre><code>private static final String KEY = ""a2[..]"";
private static final String SALT = ""t[..]"";
private static final String IV = ""u[..]"";
private static final String DES_EDE_PKCS5 = ""DESede/CBC/PKCS5Padding""

public static String encrypt(String password) {
    byte[] byteSalt = Base64.decode(SALT, Base64.DEFAULT);
    byte[] bytesIv = Base64.decode(IV, Base64.DEFAULT);
    String mdp = """";        
    try {           
        SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");          
        KeySpec spec = new PBEKeySpec(KEY.toCharArray(), byteSalt, NB_ITER_RFC, SIZE_KEY);          
        SecretKey secretKey = factory.generateSecret(spec);             
        Cipher c = Cipher.getInstance(DES_EDE_PKCS5);           
        IvParameterSpec ivParam = new IvParameterSpec(bytesIv);         
        c.init(Cipher.ENCRYPT_MODE, secretKey, ivParam);                
        byte[] encrypted = c.doFinal(password.getBytes(""UTF-8""));
        mdp = Base64.encodeToString(encrypted, Base64.DEFAULT);                 
    }
    catch [..]
    return mdp;
}
</code></pre>

<p>But it's doesn't work for below version (4.2.x and below), this encrypted password seems to change randomly for exemple : </p>

<pre><code>D/andro-Chiffrement-encrypt(10739): password chiffré = P7vWc+7hFuUaWQghVeO+zA==
D/andro-Chiffrement-encrypt(10739): password chiffré = jGr6nlvnYLd/AK/d7nkUrA==
D/andro-Chiffrement-encrypt(10739): password chiffré = I2weyEddIav7EulAiuQDbg==
D/andro-Chiffrement-encrypt(10739): password chiffré = HF7OFpUXYuwOm81WekReDg==
</code></pre>

<p>How can I solve this problem for Android 4.2.x especially ?</p>

<p>I found that with library Bouncy Castle, but I didn't found how to implement 'IV' (Generator Vector). Do you have an idea ?</p>

<pre><code>PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator();
gen.init(PBEParametersGenerator.PKCS12PasswordToBytes(passCharArray), byteSalt, NB_ITER_RFC);
KeyParameter params = (KeyParameter) gen.generateDerivedParameters(SIZE_KEY);
String password2 = Base64.encodeToString(params.getKey(), Base64.DEFAULT);
</code></pre>
","<p>I've tested this solution : <a href=""http://android-developers.blogspot.fr/2013/08/some-securerandom-thoughts.html"" rel=""nofollow"">http://android-developers.blogspot.fr/2013/08/some-securerandom-thoughts.html</a></p>

<p>it's due to PRNG (Pseudo Random Number Generator)but this solution has no effect... </p>

<pre><code>public class CustomApplication extends Application {    

    @Override
    public void onCreate() {        
        PRNGFixes.apply(); [..]
    }
}
</code></pre>
","1098","<java><android><security><hash><pbkdf2>","1","0","2","2015-02-17 08:38:18","","0","3","2046629","","2015-02-17 08:38:18","2015-02-05 15:06:19",""
"25313584","How to create user password hash","<p>We are in the process of converting code to use Crypto++ library.  To create a hashed password for our users is this all that is necessary?  Just want to make sure we aren't missing some important piece.
Thanks you</p>

<pre><code>void test_create_hash(void)
{
   using namespace CryptoPP;
   std::string password = ""this is a users password"";
   unsigned int iterations = 1000000;

   AutoSeededRandomPool rng;

   SecByteBlock pwsalt(AES::DEFAULT_KEYLENGTH);
   rng.GenerateBlock(pwsalt,pwsalt.size());

   SecByteBlock derivedkey(AES::DEFAULT_KEYLENGTH);

   PKCS5_PBKDF2_HMAC&lt;SHA256&gt; pbkdf;

   pbkdf.DeriveKey(
      derivedkey, derivedkey.size(),
      0x00,
      (byte *) password.data(), password.size(),
      pwsalt, pwsalt.size(),
      iterations
   );
   std::string salthex;
   StringSource ss1(pwsalt,pwsalt.size(),true,
          new HexEncoder(
             new StringSink(salthex)
          )
        );
   std::string derivedhex;
   StringSource ss2(derivedkey,derivedkey.size(),true,
          new HexEncoder(
             new StringSink(derivedhex)
          )
        );

   cout &lt;&lt; ""salt stored to database:"" &lt;&lt; salthex &lt;&lt; std::endl;
   cout &lt;&lt; ""password stored to database:"" &lt;&lt; derivedhex &lt;&lt; std::endl;
}
</code></pre>
","<p>A few comments...</p>

<pre><code>SecByteBlock pwsalt(AES::DEFAULT_KEYLENGTH);
SecByteBlock derivedkey(AES::DEFAULT_KEYLENGTH);
</code></pre>

<p>What's up with AES? Perhaps:</p>

<pre><code>SecByteBlock pwsalt(SHA256::DIGEST_SIZE);
SecByteBlock derivedkey(SHA256::DIGEST_SIZE);
</code></pre>

<p>A CMAC works fine if you want to keep using AES.</p>

<hr>

<pre><code>std::string salthex;
StringSource ss(pwsalt,pwsalt.size(),true,
    new HexEncoder(
        new StringSink(salthex)
    )
);
</code></pre>

<p>You should not use anonymous declarations. It causes trouble for some GCC versions. That is, name your <code>StringSource</code>.</p>

<pre><code>std::string salthex;
StringSource ss(pwsalt,pwsalt.size(),true,
    new HexEncoder(
        new StringSink(salthex)
    )
);
</code></pre>
","1096","<c++><passwords><crypto++><pbkdf2>","2","0","1","2015-06-18 17:30:58","25378344","0","1","608639","","2015-06-18 17:30:58","2014-08-14 17:02:34",""
"14893088","Password base encryption OpenSSL C++","<p>I'm on a team creating an application used in a medical setting. We are looking to store local data encrypted using AES based on passwords that are stored in an SQLite database (hashed and salted). There doesn't seem to be very much information out there on doing this. Am I missing a trick?</p>

<p><strong>Edit:</strong></p>

<p>As I seem to be getting down voted here's some of what I know already.</p>

<p>I'm assuming that I'll need to use PBKDF2 key derivation (seen on SO <a href=""https://stackoverflow.com/a/6855338/374052"">here</a>). Then I'll need to do something along the lines of <a href=""https://stackoverflow.com/a/9781943/374052"">this answer</a>. My issue is that all of this is C code which doesn't utilise any of the OOP niceties of C++. I'm hoping that I'm missing some nice C++ wrapper for OpenSSL or some other 3rd party library that I can use to write clean, readable and OO code to solve the problem.</p>

<p>P.S. I'm not being paid for this application as it's a software engineering project at Uni and the recipient of the software is a charity.</p>
","<p>Your question now seems to focus on a object oriented cryptographic library for C++. For that question I can recommend <a href=""http://botan.randombit.net/"" rel=""nofollow"">Botan</a>. It does seem to focus on modern computing algorithms and includes PBKDF2.</p>

<p>Note that I cannot vouch for the security of this library, I haven't used or evaluated it personally.</p>
","1055","<c++><aes><pbkdf2>","1","2","1","2013-02-15 11:26:45","14893669","4","","-1","","2017-05-23 11:49:17","2013-02-15 10:51:42",""
"34994077","How to use PBKDF2 in Oracle 12c?","<p>We want to save user passwords in Oracle 12c. I found the <code>dbms_crypto</code>-Package but there was no information about PBKDF2.</p>

<p>What's the current state in 2017 to use PBKDF2 in Oracle 12c?</p>
","<p>Your application server should be doing the PBKDF2 before it gets to the database - don't spend your precious, limited Oracle resources on that.</p>

<p>And don't let your DBA's see the passwords in plaintext, either, as they'd have to if Oracle is the one doing the hashing!</p>

<p>I have a variety of PBKDF2 examples in <a href=""https://github.com/Anti-weakpasswords?tab=repositories"" rel=""nofollow"">My github repository</a>, including test vectors and, if you absolutely insist on doing it in Oracle, one pure SQL Server implementation that shouldn't be difficult to convert to PL/SQL.</p>
","1053","<oracle><oracle12c><pbkdf2>","3","1","2","2018-03-22 19:11:49","","0","4","2321643","","2017-09-05 14:08:28","2016-01-25 13:40:36",""
"34994077","How to use PBKDF2 in Oracle 12c?","<p>We want to save user passwords in Oracle 12c. I found the <code>dbms_crypto</code>-Package but there was no information about PBKDF2.</p>

<p>What's the current state in 2017 to use PBKDF2 in Oracle 12c?</p>
","<p>This is a late answer, but to the best of my knowledge Oracle's <code>DBMS_CRYPTO</code> package does not support PBKDF2 natively. That said, you can implement the algorithm yourself; here is one way to do it:</p>

<pre><code>CREATE OR REPLACE FUNCTION pbkdf2
  ( p_password IN VARCHAR2
  , p_salt IN VARCHAR2
  , p_count IN INTEGER
  , p_key_length IN INTEGER )
RETURN VARCHAR2
IS
    l_block_count INTEGER;
    l_last RAW(32767);
    l_xorsum RAW(32767);
    l_result RAW(32767);
BEGIN
    l_block_count := CEIL(p_key_length / 20);  -- use 20 bytes for SHA1, 32 for SHA256, 64 for SHA512

    FOR i IN 1..l_block_count LOOP
        l_last := UTL_RAW.CONCAT(UTL_RAW.CAST_TO_RAW(p_salt), UTL_RAW.CAST_FROM_BINARY_INTEGER(i, UTL_RAW.BIG_ENDIAN));
        l_xorsum := NULL;

        FOR j IN 1..p_count LOOP
            l_last := DBMS_CRYPTO.MAC(l_last, DBMS_CRYPTO.HMAC_SH1, UTL_RAW.CAST_TO_RAW(p_password));
            -- use HMAC_SH256 for SHA256, HMAC_SH512 for SHA512

            IF l_xorsum IS NULL THEN
                l_xorsum := l_last;
            ELSE
                l_xorsum := UTL_RAW.BIT_XOR(l_xorsum, l_last);
            END IF;
        END LOOP;

        l_result := UTL_RAW.CONCAT(l_result, l_xorsum);
    END LOOP;

    RETURN RAWTOHEX(UTL_RAW.SUBSTR(l_result, 1, p_key_length));
END pbkdf2;
/
</code></pre>

<p>This code was originally found here: <a href=""https://mikepargeter.wordpress.com/2012/11/26/pbkdf2-in-oracle/"" rel=""nofollow noreferrer"">PBKDF2 in Oracle</a>; I've confirmed that it works on my own system in SHA-1, SHA-256, and SHA-512. Note that <code>p_count</code> is the number of iterations and <code>p_key_length</code> is the length of the key. See <a href=""https://stackoverflow.com/questions/10943837/pbkdf2-recommended-key-size"">this question for more information</a> on the recommended number of iterations and recommended key length for PBKDF2.</p>

<p>Hope this helps.</p>
","1053","<oracle><oracle12c><pbkdf2>","3","2","2","2018-03-22 19:11:49","","0","4","2321643","","2017-09-05 14:08:28","2016-01-25 13:40:36",""
"33315235","implementing PBEKeySpec encryption into IOS","<p>This is my java code. Now I want to implement same functionality in Objective-C.</p>

<pre><code>int dkLen = 16;
int rounds = 1000;
PBEKeySpec keySpec = new PBEKeySpec(hashKey.toCharArray(),salt.getBytes(), rounds, dkLen * 8);
SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
return factory.generateSecret(keySpec).getEncoded();
</code></pre>

<p>This is my iOS implementation </p>

<pre><code>- (void)getHashKey {
      NSString *hash_key=@""MY_HASHKEY"";
      NSString *saltKey = @""MY_SALTKEY"";

      int dkLen = 16;
      NSData *keyData = [hash_key dataUsingEncoding:NSUTF8StringEncoding];
      NSData *salt    = [saltKey dataUsingEncoding:NSUTF8StringEncoding];
      uint    rounds  = 1000;
      uint    keySize = kCCKeySizeAES128;

      NSMutableData *derivedKey = [NSMutableData dataWithLength:keySize];

      CCKeyDerivationPBKDF(kCCPBKDF2,               // algorithm
                           keyData.bytes,           // password
                           keyData.length,          // passwordLength
                           salt.bytes,              // salt
                           salt.length,             // saltLen
                           kCCPRFHmacAlgSHA1,       // PRF
                           rounds,                  // rounds
                           derivedKey.mutableBytes, // derivedKey
                           dkLen*8);                // derivedKeyLen

       NSString *myString = [[NSString alloc] initWithData:derivedKey encoding:NSASCIIStringEncoding];
       NSLog(@""derivedKey: %@"", myString);
}
</code></pre>

<p>Is there any problem with algorithm which i am using in iOS </p>
","<p>Use the Common Crypto <code>CCKeyDerivationPBKDF</code> function with the option <code>kCCPRFHmacAlgSHA1</code>.</p>

<p>Note <code>PBEKeySpec</code> <code>keyLength</code> is in bits, <code>CCKeyDerivationPBKDF</code> <code>derivedKeyLen</code> is in bytes.</p>

<p>For a more detailed answer provide all input (hashKey, salt) and the output in hex dump format plus the number of rounds, output length in bytes.</p>

<p>See this <a href=""https://stackoverflow.com/a/26678413/451475"">SO answer</a> for sample code.</p>

<blockquote>
  <p>Update for revised question code:</p>
</blockquote>

<p><code>CCKeyDerivationPBKDF</code> returns 8-bit data bytes that is essentially not characters and many are not printable even if forced into <code>NSASCIIStringEncoding</code>. Forcing to <code>NSASCIIStringEncoding</code> even if there is no error returned is incorrect and non-useful. Instead either use the returned <code>NSData</code> or convert to Base64 or HexASCII encoding.</p>

<p>Change</p>

<pre><code>NSString *myString =    [[NSString alloc] initWithData:derivedKey encoding:NSASCIIStringEncoding];
</code></pre>

<blockquote>
  <p>Output: A´Öº÷""ùïó</p>
</blockquote>

<p>to</p>

<pre><code>NSString * myString = [derivedKey base64EncodedStringWithOptions:0];
</code></pre>

<blockquote>
  <p>Output: QbTWgbr3FSL57/MfBQAz4A==</p>
</blockquote>

<p>Note: 1000 rounds is generally considered insufficient, something in the 10,000 to 100,000 range should be used.</p>

<p>Timings on an iPhone 6S:</p>

<pre>
rounds  seconds
1000    0.003  
10000   0.032  
100000  0.309  
1000000 3.047  
</pre>
","1037","<objective-c><hash><pbkdf2>","6","3","1","2015-10-28 12:35:48","33317763","0","2","1864294","","2015-10-28 12:35:48","2015-10-24 06:30:59",""
"32036861","C# Rfc2898DeriveBytes to PHP","<p>I'm trying to adapt the following function from C# to PHP and I can't get it to work. I've already searched other threads, but couldn't find the right answer to solve my problem.</p>

<pre><code>public static string Decrypt(string EncryptedText)
{
    byte[] bytes = Encoding.ASCII.GetBytes(""hello"");
    byte[] buffer = Convert.FromBase64String(EncryptedText);
    byte[] rgbKey = new Rfc2898DeriveBytes(""world"", bytes).GetBytes(0x20);

    ICryptoTransform transform = new RijndaelManaged { Mode = CipherMode.CBC }.CreateDecryptor(rgbKey, bytes);
    MemoryStream stream = new MemoryStream(buffer);
    CryptoStream stream2 = new CryptoStream(stream, transform, CryptoStreamMode.Read);
    byte[] buffer4 = new byte[buffer.Length];

    int count = stream2.Read(buffer4, 0, buffer4.Length);
    stream.Close();
    stream2.Close();

    return Encoding.UTF8.GetString(buffer4, 0, count);
}
</code></pre>

<p>Any help appreciated. Thanks! </p>
","<p>My PHP code so far:</p>

<pre><code>&lt;?php
$key = hash_pbkdf2('sha1', 'world', 'hello', 1000, 32);
$decrypted = mcrypt_decrypt(
            MCRYPT_RIJNDAEL_128,
            $key,
            'very long encrypted string',
            MCRYPT_MODE_CBC,
            'world');
?&gt;
</code></pre>
","1023","<c#><php><mcrypt><pbkdf2>","-2","0","1","2015-08-16 15:50:34","","3","","","","","2015-08-16 15:33:35",""
"26297666","PBKDF2WithHmacSHA512 in Java","<p>Till now I have used ""PBKDF2WithHmacSHA1"" for encrypting passwords. However, I recently thought that it would be better to upgrade to ""PBKDF2WithHmacSHA512"" since it is considered a stronger algorithm.</p>

<p>However, Java does not support ""PBKDF2WithHmacSHA512"" out of the box. I tried Googling but could come up with no definite solution.</p>

<p>Could you please tell me how can I encrypt passwords using ""PBKDF2WithHmacSHA512"" in Java. It would be really helpful if you could provide code since I have limited idea about this.</p>
","","1015","<java><encryption><passwords><sha512><pbkdf2>","0","","0","2014-10-10 11:24:19","","2","","474189","","2014-10-10 11:24:19","2014-10-10 10:47:34",""
"22372553","jasypt PBKDF2 implementation","<p>In org.jasypt.encryption.pbe.StandardPBEByteEncryptor, the key derivation looks different when I compared few other key derivation functionality.</p>

<p>The initialize() method has below code for generating a secret key:</p>

<pre><code>PBEKeySpec pbeKeySpec = new PBEKeySpec(this.password.toCharArray());
SecretKeyFactory factory =   SecretKeyFactory.getInstance(this.algorithm);             
this.key = factory.generateSecret(pbeKeySpec);
</code></pre>

<p>which does not have the salt and iteration count passed into PBEKeySpec.</p>

<p>But the encrypt() method has below code:</p>

<pre><code>PBEParameterSpec parameterSpec = new PBEParameterSpec(salt, this.keyObtentionIterations);
byte[] encyptedMessage = null;
synchronized (this.encryptCipher) {
this.encryptCipher.init(
Cipher.ENCRYPT_MODE, this.key, parameterSpec);
encyptedMessage = this.encryptCipher.doFinal(message);
}
</code></pre>

<p>which has the salt and iteration count passed as PBEParameterSpec. </p>

<p>According to PBKDF2, the secret keys are generated using a password, salt and iteration count. </p>

<p>In the above code key is generated first in the initialize() method and salt, iteration count are passed as PBEParameterSpec in the encrypt() method.</p>

<p>The question is</p>

<ol>
<li><p>Why the salt and iteration is used only during encrypt method is called, when it can be done inside initialize() method?</p></li>
<li><p>What makes the difference?</p></li>
</ol>

<p>I am raising this question because, due to the above implementation, encrypt() and decrypt() operations are slow when the iteration count is increased.</p>

<p>Thanks in advance.</p>
","<p>The salt is applied for each encryption operation because a different salt is used for each message that is encrypted. </p>

<p>The <code>initialize()</code> method executes only once, with the information that will be <em>common to all executions</em> (i.e. the encryption key). Whereas the <code>encrypt()</code> method has to take care of the encryption <em>parameters</em> --iteration count and salt--, which are different (the salt is) for each encryption operation.</p>

<p>The only way to improve performance of those <code>encrypt()</code> and <code>decrypt()</code> operations is therefore avoiding to produce a different salt for each message being encrypted, and that means having a <em>fixed-salt generator</em>. Jasypt 1.9.2 includes an improvement that detects whether such salt generation strategy is being used, and in such case avoids calling <code>Cipher#init(...)</code> with every encryption operation. Refer to the change log for more info: <a href=""http://www.jasypt.org/changelogs/jasypt/ChangeLog.txt"" rel=""nofollow"">http://www.jasypt.org/changelogs/jasypt/ChangeLog.txt</a></p>

<p>Disclaimer, per StackOverflow rules: I'm jasypt's author.</p>
","1012","<java><encryption><pbkdf2><jasypt>","2","1","1","2014-03-14 09:13:48","22400557","0","","","","","2014-03-13 08:06:37",""
"52009682","Python equivalent of java PBKDF2WithHmacSHA1","<p>I'm tasked with building a consumer of an API that requires an encrypted token with a seed value that is the UNIX time. The example I was shown was implemented using Java which I'm unfamiliar with, and after reading through documentation and other stack articles have been unable to find a solution.</p>

<p>Using the <code>javax.crypto.SecretKey</code>, <code>javax.crypto.SecretKeyFactory</code>, <code>javax.crypto.spec.PBEKeySpec</code>, and <code>javax.crypto.spec.SecretKeySpec</code> protocols, I need to generate a token similar to the below:</p>

<pre><code>public class EncryptionTokenDemo {

    public static void main(String args[]) {
        long millis = System.currentTimeMillis();
        String time = String.valueOf(millis);
        String secretKey = ""somekeyvalue"";
        int iterations = 12345;
        String iters = String.valueOf(iterations);
        String strToEncrypt_acctnum = ""somevalue|"" + time + ""|"" + iterations;

        try {

            byte[] input = strToEncrypt_acctnum.toString().getBytes(""utf-8"");
            byte[] salt = secretKey.getBytes(""utf-8"");
            SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
            SecretKey tmp = factory.generateSecret(new PBEKeySpec(secretKey.toCharArray(), salt, iterations, 256));
            SecretKeySpec skc = new SecretKeySpec(tmp.getEncoded(), ""AES"");
            Cipher cipher = Cipher.getInstance(""AES/ECB/PKCS5Padding"");
            cipher.init(Cipher.ENCRYPT_MODE, skc);
            byte[] cipherText = new byte[cipher.getOutputSize(input.length)];
            int ctLength = cipher.update(input, 0, input.length, cipherText, 0);
            ctLength += cipher.doFinal(cipherText, ctLength);
            String query = Base64.encodeBase64URLSafeString(cipherText);
            // String query = cipherText.toString();
            System.out.println(""The unix time in ms is :: "" + time);
            System.out.println(""Encrypted Token is :: "" + query);
        } catch (Exception e) {
            System.out.println(""Error while encrypting :"" + e);

        }

    }
}
</code></pre>

<p>Should I be using the built-in library <code>hashlib</code> to implement something like this? I can't really find documentation for implementing a <code>PBKDF2</code> encryption with iterations/salt as inputs. Should I be using <code>pbkdf2</code>? Sorry for the vague questions, I'm unfamiliar with the encryption process and feel like even just knowing what the correct constructor would be is a step in the right direction. </p>
","<p>Yes, the Python equivalent is <a href=""https://docs.python.org/3/library/hashlib.html#hashlib.pbkdf2_hmac"" rel=""noreferrer""><code>hashlib.pbkdf2_hmac</code></a>. For example this code:  </p>

<pre><code>from hashlib import pbkdf2_hmac

key = pbkdf2_hmac(
    hash_name = 'sha1', 
    password = b""somekeyvalue"", 
    salt = b""somekeyvalue"", 
    iterations = 12345, 
    dklen = 32
)

print(key)
</code></pre>

<p>produces the same key as your Java code.  </p>

<p>However, the problem with this code (as mentioned in memo's <a href=""https://stackoverflow.com/questions/52009682/python-equivalent-of-java-pbkdf2withhmacsha1#comment91054901_52009682"">comment</a>) is the use of salt. The salt should be random and unique for each password. You can create secure random bytes with <code>os.urandom</code>, so a better example would be:  </p>

<pre><code>from hashlib import pbkdf2_hmac
from os import urandom

salt = urandom(16)
key = pbkdf2_hmac('sha1', b""somekeyvalue"", salt, 12345, 32)
</code></pre>

<p>You may also want to increase the number of iterations (I think the recommended minimum number is 10,000).  </p>

<hr>

<p>The rest of the code is easy to 'translate'.  </p>

<ul>
<li><p>For the timestamp, use <code>time.time</code> to get the current time and multiply by 1000.  </p>

<pre><code>import time

milliseconds = str(round(time.time() * 1000))
</code></pre></li>
<li><p>For encoding you can use <a href=""https://docs.python.org/3/library/base64.html#base64.urlsafe_b64encode"" rel=""noreferrer""><code>base64.urlsafe_b64encode</code></a> (it includes padding, but you could remove it with <code>.rstrip(b'=')</code>).</p></li>
<li><p>Now, for the encryption part, Python doesn't have a built-in encryption module, so you'll have to use a third party library. I recommend <a href=""https://pycryptodome.readthedocs.io/en/latest/index.html"" rel=""noreferrer""><code>pycryptodome</code></a> or <a href=""https://cryptography.io/en/latest/"" rel=""noreferrer""><code>cryptography</code></a>.<br>
At this point I must warn you that the AES mode you're using is very weak. Please consider using CBC or CTR, or better yet use an <a href=""https://en.wikipedia.org/wiki/Authenticated_encryption"" rel=""noreferrer"">authenticated encryption</a> algorithm. </p></li>
</ul>
","1005","<java><python><pbkdf2><hmacsha1><hashlib>","1","7","1","2018-08-28 15:53:44","52061906","2","","4201810","","2018-08-27 07:13:26","2018-08-24 18:03:39",""
"25056289","Is this PBKDF2 java implementation, a good implementation? Is up to date?","<p>Is this a good implementation of PBKDF2?
<a href=""https://crackstation.net/hashing-security.htm#javasourcecode"" rel=""nofollow"">https://crackstation.net/hashing-security.htm#javasourcecode</a></p>

<p>I'm not sure that is a good idea to store password like:
<code>pass = PBKDF2_ITERATIONS + "":"" + toHex(salt) + "":"" +  toHex(hash);</code></p>

<p>Is there some other implementation?</p>
","<p>Cryptography based on secrecy will <em>never</em> work for any measurable duration of time.
<br /><br />
When implementing a KDF like PBKDF#2 certain parameters are allowed to be known by the ""public"" as they are essential for proper usage. Being cryptic in your returned password isn't going to deter attackers for any measurable amounts of duration because you <strong>have</strong> to assume that they can reverse engineer your software with ease (lets face it, if they're going up against PBKDF#2, they probably can).</p>

<p>Not including the iteration count anywhere is like not including the salt or hash, at the same time, the value for the iteration count is as safe to transmit as the salt and hash. And working on the principal that attackers can reverse engineer your code, colon or no colon isn't some barrier in their way, <em>they will find out eventually anyway</em>.</p>

<p>Regarding if Java's PBKDF#2 is ""good"" I cannot give any solid facts on that. But considering its one of the most important cryptographic functions within the java crypto library I would assume it be one of the best implementations possible in java (not considering 3rd party libraries that make use of hardware-accelerated native code, thats cheating).</p>
","1001","<java><passwords><pbkdf2>","0","0","1","2014-07-31 10:37:07","25056766","3","","","","","2014-07-31 10:13:43",""
"26179033","How to validate Symfony2 sha512 passwords using nodejs","<p>I need to be able to validate in <code>node</code> some password which were generated and stored using <code>Symfony2</code> with <code>sha512</code> encoding.</p>

<p>I can retrieve the <code>hash</code> and the <code>salt</code> just fine but when using <code>crypto</code> I cannot manage to generate a hash using the salt which matches the one stored in the database.</p>

<p>Symfony security.yml</p>

<pre><code>security:
    encoders:
        ""FOS\UserBundle\Model\UserInterface"": sha512
</code></pre>

<p>Hash stored in DB</p>

<pre><code>6zxwRZc4EPXKxQes9avs0ZyCRFkC4dtpXrT983ML8VLvv9WhRnAi282bwuFuj3LHPQBGmqD1BfCLDUXGdHIjZQ==
</code></pre>

<p>Salt stored in DB</p>

<pre><code>qu7rjvaietws8kg4cgsggksookwsws8
</code></pre>

<p>As there is a salt on the node side I'm using <code>crypto.pbkdf2Sync</code>, there is no iterations set in the configuration and it seems like the Symfony default is 1000. The default length however is 40 yet the stored hash length is 128 so using 128 as length (tried 40 without success).</p>

<p>I have also tried 5000 iterations as used by Symfony 2 <code>MessageDigestPasswordEncoder</code> and merging the raw password with the salt as symfony does <code>raw_password{salt}</code> without success.</p>

<p>I can also get a base64 long enough if I use <code>pbkdf2Sync</code> to generate a key of length <code>40</code> (as per symfony default) and then using that to update a hash generate with <code>crypto.createHash</code></p>

<pre><code>var hash = user.password;
var salt = user.salt;

console.log(hash);

console.log(crypto.pbkdf2Sync(""password"", salt, 1000, 128 &gt;&gt; 1, ""sha512"").toString(""base64""));
</code></pre>

<p>The size of the hash generated and format matches the one stored in the database but they do not match in values which is my issue. I also tried multiple iteration values dynamically generated without any luck.</p>

<p>Output</p>

<pre><code>6zxwRZc4EPXKxQes9avs0ZyCRFkC4dtpXrT983ML8VLvv9WhRnAi282bwuFuj3LHPQBGmqD1BfCLDUXGdHIjZQ==
5QPz3zXwhak/bTD2S9IFEEFmiJ8q/fqIlSF6cWin7dqmh92EFNXjw/FLtQw7NX3LVehwcXKjfypo2EhJxiLouQ==
w9+8xjklvGq9CuiqY8tEoxEetLV9lbhLJ/KaFQEooUFJrGT9/EdsVd/sSRJ+DXjsH4RQeaqsmftmuzLPgVv5MA==
</code></pre>

<p>How can I generate the hash so it matches the way used by Symfony 2?</p>
","<p>Check <a href=""https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/Pbkdf2PasswordEncoder.php"" rel=""nofollow"">Pbkdf2PasswordEncoder</a> source code to see defaults values. Also keep in mind that Symfony will do a base64_encode by default</p>
","998","<node.js><symfony><hash><pbkdf2>","1","0","3","2016-06-26 17:58:15","26194832","0","2","1326536","","2014-10-04 10:23:47","2014-10-03 12:35:24",""
"26179033","How to validate Symfony2 sha512 passwords using nodejs","<p>I need to be able to validate in <code>node</code> some password which were generated and stored using <code>Symfony2</code> with <code>sha512</code> encoding.</p>

<p>I can retrieve the <code>hash</code> and the <code>salt</code> just fine but when using <code>crypto</code> I cannot manage to generate a hash using the salt which matches the one stored in the database.</p>

<p>Symfony security.yml</p>

<pre><code>security:
    encoders:
        ""FOS\UserBundle\Model\UserInterface"": sha512
</code></pre>

<p>Hash stored in DB</p>

<pre><code>6zxwRZc4EPXKxQes9avs0ZyCRFkC4dtpXrT983ML8VLvv9WhRnAi282bwuFuj3LHPQBGmqD1BfCLDUXGdHIjZQ==
</code></pre>

<p>Salt stored in DB</p>

<pre><code>qu7rjvaietws8kg4cgsggksookwsws8
</code></pre>

<p>As there is a salt on the node side I'm using <code>crypto.pbkdf2Sync</code>, there is no iterations set in the configuration and it seems like the Symfony default is 1000. The default length however is 40 yet the stored hash length is 128 so using 128 as length (tried 40 without success).</p>

<p>I have also tried 5000 iterations as used by Symfony 2 <code>MessageDigestPasswordEncoder</code> and merging the raw password with the salt as symfony does <code>raw_password{salt}</code> without success.</p>

<p>I can also get a base64 long enough if I use <code>pbkdf2Sync</code> to generate a key of length <code>40</code> (as per symfony default) and then using that to update a hash generate with <code>crypto.createHash</code></p>

<pre><code>var hash = user.password;
var salt = user.salt;

console.log(hash);

console.log(crypto.pbkdf2Sync(""password"", salt, 1000, 128 &gt;&gt; 1, ""sha512"").toString(""base64""));
</code></pre>

<p>The size of the hash generated and format matches the one stored in the database but they do not match in values which is my issue. I also tried multiple iteration values dynamically generated without any luck.</p>

<p>Output</p>

<pre><code>6zxwRZc4EPXKxQes9avs0ZyCRFkC4dtpXrT983ML8VLvv9WhRnAi282bwuFuj3LHPQBGmqD1BfCLDUXGdHIjZQ==
5QPz3zXwhak/bTD2S9IFEEFmiJ8q/fqIlSF6cWin7dqmh92EFNXjw/FLtQw7NX3LVehwcXKjfypo2EhJxiLouQ==
w9+8xjklvGq9CuiqY8tEoxEetLV9lbhLJ/KaFQEooUFJrGT9/EdsVd/sSRJ+DXjsH4RQeaqsmftmuzLPgVv5MA==
</code></pre>

<p>How can I generate the hash so it matches the way used by Symfony 2?</p>
","<p>Symfony does 5000 iterations with sha512. </p>

<ol>
<li>They concatenate raw password with user's salt to generate a new salt</li>
<li>They generate a starting hash with above data.</li>
<li>On each iteration previous hash its updated with the current hash + new <code>salt</code> generated at step 1.</li>
</ol>

<p>In node, on each iteration you should digest previous hash as binary and in the end digest as base64, to mimic what Symfony does.</p>

<p>And an example:</p>

<pre><code>var crypto = require('crypto');

var encodePassword = function (raw, salt) {
    var salted = raw + '{'+salt+'}',
        hash = crypto.createHash('sha512').update(salted, 'utf-8');

    for (var i = 1; i &lt; 5000 ; i++) {
        hash = crypto.createHash('sha512').update(hash.digest('binary')+salted);
    }

    return hash.digest('base64');
};

console.log(""Password: ""+ encodePassword(""secret"", ""h2zaays1cx2og00c6ow2gc0k4skg41g""));
</code></pre>
","998","<node.js><symfony><hash><pbkdf2>","1","6","3","2016-06-26 17:58:15","26194832","0","2","1326536","","2014-10-04 10:23:47","2014-10-03 12:35:24",""
"26179033","How to validate Symfony2 sha512 passwords using nodejs","<p>I need to be able to validate in <code>node</code> some password which were generated and stored using <code>Symfony2</code> with <code>sha512</code> encoding.</p>

<p>I can retrieve the <code>hash</code> and the <code>salt</code> just fine but when using <code>crypto</code> I cannot manage to generate a hash using the salt which matches the one stored in the database.</p>

<p>Symfony security.yml</p>

<pre><code>security:
    encoders:
        ""FOS\UserBundle\Model\UserInterface"": sha512
</code></pre>

<p>Hash stored in DB</p>

<pre><code>6zxwRZc4EPXKxQes9avs0ZyCRFkC4dtpXrT983ML8VLvv9WhRnAi282bwuFuj3LHPQBGmqD1BfCLDUXGdHIjZQ==
</code></pre>

<p>Salt stored in DB</p>

<pre><code>qu7rjvaietws8kg4cgsggksookwsws8
</code></pre>

<p>As there is a salt on the node side I'm using <code>crypto.pbkdf2Sync</code>, there is no iterations set in the configuration and it seems like the Symfony default is 1000. The default length however is 40 yet the stored hash length is 128 so using 128 as length (tried 40 without success).</p>

<p>I have also tried 5000 iterations as used by Symfony 2 <code>MessageDigestPasswordEncoder</code> and merging the raw password with the salt as symfony does <code>raw_password{salt}</code> without success.</p>

<p>I can also get a base64 long enough if I use <code>pbkdf2Sync</code> to generate a key of length <code>40</code> (as per symfony default) and then using that to update a hash generate with <code>crypto.createHash</code></p>

<pre><code>var hash = user.password;
var salt = user.salt;

console.log(hash);

console.log(crypto.pbkdf2Sync(""password"", salt, 1000, 128 &gt;&gt; 1, ""sha512"").toString(""base64""));
</code></pre>

<p>The size of the hash generated and format matches the one stored in the database but they do not match in values which is my issue. I also tried multiple iteration values dynamically generated without any luck.</p>

<p>Output</p>

<pre><code>6zxwRZc4EPXKxQes9avs0ZyCRFkC4dtpXrT983ML8VLvv9WhRnAi282bwuFuj3LHPQBGmqD1BfCLDUXGdHIjZQ==
5QPz3zXwhak/bTD2S9IFEEFmiJ8q/fqIlSF6cWin7dqmh92EFNXjw/FLtQw7NX3LVehwcXKjfypo2EhJxiLouQ==
w9+8xjklvGq9CuiqY8tEoxEetLV9lbhLJ/KaFQEooUFJrGT9/EdsVd/sSRJ+DXjsH4RQeaqsmftmuzLPgVv5MA==
</code></pre>

<p>How can I generate the hash so it matches the way used by Symfony 2?</p>
","<p>Hello might be it will be useful for someone. 
This is part of code from my live website that works.</p>

<p><a href=""https://gist.github.com/konstantinzolotarev/deec71876739f8bf1058"" rel=""nofollow"">https://gist.github.com/konstantinzolotarev/deec71876739f8bf1058</a></p>
","998","<node.js><symfony><hash><pbkdf2>","1","1","3","2016-06-26 17:58:15","26194832","0","2","1326536","","2014-10-04 10:23:47","2014-10-03 12:35:24",""
"34339600","Decrypting password with PBKDF2 Key","<p>I've been playing around with some encryption/decryption with pbkdf/aes128.</p>

<p>I know the master password, iteration count and have the base64 encoded key. </p>

<p>I also have the base64 encoded password which is encrypted with the key. I am trying to decrypt the password. Below is my code so far, but I am fairly stuck with where to go next. Is anyone able to help me out?</p>

<pre><code>public static void main(String... args) throws Exception {
    String masterPassword = ""password"";
    String base64EncodedKey = ""U2FsdGVkX18QAut2uv9ElKWb2T8QycYS4k0PgjwUtWW2NaBlEmolBwNhPkYDvg986QOYqDs/LVC7mnUUQbrRkbn0sLBbLQ/+oMjvzBpcBRIPqBnQ7bKZjPXZIBDt+15KSRWGSFAnrXVL6Udcecu7t8WNrcUoXy9bgjRpwCzqaMuVRik3sBQNmNbb/4rbf9+NM6tNEZ4KsoHBkcXj4DofzISOBQhmpjfqagjb057vb/8+Pi5cpRl4sO3GPX0Xu8XVTQsLffm3oTTywG9V+2XwXMfvb34SXrJPOkxlHBqjw2GqNx4bhz9buCoLzUFrFfTEeB+gg2yEwFONWhPtV7D/MYAOrZB8P0RaL7oQh1mAnx9ESlFJ5V6VzwbFZGxj7QeaEWG47HFBdSfSuAdibs7N+GtAFv2lQQnEK+li0+rwEYZ+AKeohqe3A6yZDGYpkGvGFr4EDsWEHnYtWl8yL6guLELJxbLXZ8HLLE+W4Sut9l69OS5QeqgLJcuvtw0l1psmrsx8SA/NyFfGNfQE4xi7RPg8qhR3ardEiG6O+IhMMD80PBHFqKZy0jLPRbZA42oApF7isbm4OUQBBrObOpuLMwTCrsMD6DrUUUy1wwd3Ij35mvF7xcJwiYGuE/B3Eqk2UDfDlMXeiWurPJ+px1ie9ZhdfXCTYJOUuRFB25fw0aXFVKO40yrlHoi69B0P2HffO2uH2bzhWQ7KOAqjRyo6mtPn5Xsd+T4rZKWNoWt+fjmLbx+evdDCiF1E/2k8oHAlrvp65DVFhbK69BKFTuMdqr+3sSX9Jl1KPuvJP9fWIk85ncF/K5BbiZ9d47pBt8DFEf+lDhCBSemM0Tjn8fSG6oDlqpdIl7ZXWc/5NhdE6idMQm9bOPbtZWIBM5kJqLpOHLt37vslZFwNv5sq0c2ULwGaBeP1WHfpE0PcaBTTweP3T56ufzo1Larsgw/X3VIXfKM7ZULgbPMQU0SxxBj//jDZJrm+8e782LJJTIMGkcs6B/AOuZCtZVe5gYz1Wlk3JGg+sinBslLyVSP7hFaKHji9KUoBhmyVJajiBYrEVdGLKdyWE7FbGQOZ5rSVNE5kLJ3TBhaejjpHvlJMuGa1WtBmVZTaq2E5ax0wShJixfm+QZMTEhq1ryM3pdsxg0ul1GMLs9x+WRps/F8YHBilwYKEAbqVJxnTRjl8vmqDUS+VrNRYkRHP982DwikzOpTtdlN6+PMta53bw3Q6Qxiiaxhl4SuPYwsV9XcAuDNYu7NcFY+2/IiMJl/ZhLQUXLsbnDT9jUbSi5HVO3W1m65mXX+O/0mFeWmIcf2Ch5aBRhxAtup74V/vKGNVUNY8vU43KrEKFpbD5vc54UY6itQZef3VM+VNqJzQrI9Ka3wKIaY7IWN87KZ/1Odw1ZjdmNQX"";
    String base64EncodedPassword = ""U2FsdGVkX1+H71VA6yn6cA/A/ojEP2lwCUcorrz8CqkffRHSghm/Q0pDsf/p/FTw""; //value is 'password'
    int iterations = 100000;

    Base64.Decoder base64Decoder = Base64.getDecoder();

    byte[] decodedKey = base64Decoder.decode(base64EncodedKey);
    byte[] salt = Arrays.copyOfRange(decodedKey, 8, 16);
    byte[] keyData = Arrays.copyOfRange(decodedKey, 16, decodedKey.length);


    KeySpec spec = new PBEKeySpec(masterPassword.toCharArray(), salt, iterations, 32 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    SecretKey secretKey = f.generateSecret(spec);

    byte[] rawKey = secretKey.getEncoded();
    byte[] aesRaw = Arrays.copyOfRange(rawKey, 0, 16);
    byte[] aesIv = Arrays.copyOfRange(rawKey, 16, 32);

    SecretKeySpec aesKey = new SecretKeySpec(aesRaw, ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/CBC/NoPadding"");
    cipher.init(Cipher.DECRYPT_MODE, aesKey, new IvParameterSpec(aesIv));

    byte[] decryptedKey = cipher.doFinal(keyData);

    byte[] decodedPassword = base64Decoder.decode(base64EncodedPassword);
    byte[] passwordSalt = Arrays.copyOfRange(decodedPassword, 8, 16);
    byte[] passwordData = Arrays.copyOfRange(decodedPassword, 16,decodedPassword.length);
    // hmm...
}
</code></pre>

<p>Thanks,</p>
","","960","<java><encryption><aes><jce><pbkdf2>","0","","0","2017-02-20 05:27:31","","4","3","608639","","2017-02-20 05:27:31","2015-12-17 16:27:29",""
"41904291","How can I convert plain text password into PBKDF2 algorithm format in Django?","<p>I have list user information that I am pulling from some other database tool. The information in this tool is in plain text. I am using Django for my project and I need passowrd into
<code>&lt;algorithm&gt;$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;</code> format. </p>

<p>Which library or script that I can use to convert my plaintext to Hashed value ? </p>

<p>I have read about Django Hasher but wanted to get more information about it. </p>
","<p>If you are gonna save the password in a user model, just call <code>user.set_password(&lt;plain-text password&gt;)</code> on the instance. Otherwise, use <code>make_password()</code>:</p>

<pre><code>from django.contrib.auth.hashers import make_password

hashed_pass = make_password(plain_text_pass)
</code></pre>
","955","<python><django><database><plaintext><pbkdf2>","3","6","1","2017-06-19 12:26:04","41904349","0","1","","","","2017-01-27 22:48:54",""
"13781737","pbkdf2 VS bcrypt, rounds?","<p>I've a dumb question (and probably has been already asked):</p>

<p>People always compare between <strong>BCrypt</strong> and <strong>PBKDF2</strong> and say that <strong>BCrypt</strong> is better because it is for example slower to use <strong>GPU</strong>, but they ignore the <code>Rounds value</code>, espetially when i talk about <strong>Python</strong>, where <strong>BCrypt</strong> is not powerful, so my question is simple:</p>

<p><a href=""http://pypi.python.org/pypi/passlib"" rel=""nofollow noreferrer"">The tests used the excellent <strong>python</strong> library <strong>Passlib</strong></a></p>

<p>is it worth to use <strong>BCrypt</strong> even with small round value? in Passlib, the default value is <code>12</code>, tested and gave me <code>0.40 seconds</code>,  while <strong>PBKDF2</strong> gave me with the default value which is <code>12000</code> rounds: <code>0.142 seconds</code></p>

<p>so for example, if i use BCrypt with only 5 rounds, i'll say: hey, my application is more secure -and faster- than using PBKDF2 with 12000 rounds! (it seems dumb i know, sorry).</p>

<p><a href=""https://stackoverflow.com/questions/13545677/python-passlib-what-is-the-best-value-for-rounds"">here is the benchmark results</a></p>
","<p>Note that the actual number of iterations in bcrypt is 2^rounds, so for example rounds=5 -> iterations=32, and the default rounds=12 -> iterations=4096.  When comparing between bcrypt and pbkdf2, make sure that they mean the same thing when they say ""rounds"".</p>

<p>General rule on bcrypt is to use the largest value for rounds that you can afford, in terms of user logon not being annoyingly slow.  Your test of 0.4 seconds sounds like you have it about right.</p>
","952","<python><bcrypt><pbkdf2>","2","2","1","2013-03-11 16:23:42","15343553","0","","-1","","2017-05-23 12:21:19","2012-12-08 20:42:07",""
"7216976","PBKDF2 not matching between Python and Javascript libraries","<p>Using password ""password"", salt ""1234567812345678"" 100 repetitions, 128-bit result</p>

<p><a href=""http://bitwiseshiftleft.github.com/sjcl/demo/"" rel=""nofollow"">http://bitwiseshiftleft.github.com/sjcl/demo/</a> is a javascript implementation, gives result A374FF6A12280F020162A62A9B3212AA</p>

<p><a href=""http://matt.ucc.asn.au/src/pbkdf2.py"" rel=""nofollow"">http://matt.ucc.asn.au/src/pbkdf2.py</a> is a python implementation gives result 89FBE50AF230BD273076AA9BC9F1142A</p>

<p>Why are they different, if PBKDF2 is a standard that they both implement?</p>
","<p>It appears SJCL uses SHA-256, whereas the Python implementation defaults to SHA-1.</p>

<p>These are different hashes which can be used inside PBKDF#2, and as such will lead to different results.</p>

<p>PBKDF#2 is an algorithm, but does not specify the exact makeup of its internals.</p>
","917","<password-encryption><pbkdf2>","2","6","1","2011-09-04 19:31:03","7301630","0","1","","","","2011-08-27 19:52:34",""
"23023058","Using PBKDF2 encryption in a Metro (WinRT) application","<p>I need to derive a key from a salted password using PBKDF2 encryption in a C# &amp; C++ Metro (WinRT) application.  What should I use to derive a key using PBKDF2 (like OpenSSL's PKCS5_PBKDF2_HMAC_SHA1 call does) on Metro?  Is there a version of OpenSSL that builds on WinRT?  (I've read that it only builds on Windows for the desktop platform.)  Or is there some other solution I should use?  </p>

<p>BTW I could call the function from either C# or C++, so either is fine.  Any advice would be much appreciated!</p>

<p>EDIT:
I just found a .NET function named ""Rfc2898DeriveBytes"" -- details <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.aspx"" rel=""nofollow"">here</a>.  If I'm reading that correctly it will do the same thing as OpenSSL's PKCS5_PBKDF2_HMAC_SHA1 call -- is that correct?</p>

<p><strong>EDIT #2:</strong>
Unfortunately it looks like I can't use Rfc2898DeriveBytes after all in my Windows 8.1 Metro app because despite what the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.aspx"" rel=""nofollow"">Microsoft documentation for Rfc2898DeriveBytes</a> says, that API method does not exist in the 'Windows.Security.Cryptography' namespace when building a Windows 8.1 app.  Is there anything else I can use?</p>
","<p>You can use <code>Rfc2898DeriveBytes</code> as the <a href=""http://tools.ietf.org/html/rfc2898#section-5.2"" rel=""nofollow"">RFC actually defines PBKDF2</a>. Note that you need to make sure you use the same character encoding, salt size and number of rounds to be compatible. Normally SHA1 is used as underlying hash function (which is fine) but beware that PBKDF2 may also use other hash functions. <code>Rfc2898DeriveBytes</code> utilizes SHA1 for the HMAC functionality.</p>

<p>Note that <code>Rfc2898DeriveBytes</code> utilizes UTF-8; this is not documented (even after multiple requests) by Mickeysoft. You can use byte arrays instead if you are unsure about the encoding on both platforms. You should especially be aware of this if you allow characters out of the US ASCII range.</p>
","905","<c#><c++><encryption><windows-runtime><pbkdf2>","1","1","2","2014-04-14 19:07:25","23067888","1","","2347831","","2014-04-14 17:29:33","2014-04-11 21:40:14",""
"23023058","Using PBKDF2 encryption in a Metro (WinRT) application","<p>I need to derive a key from a salted password using PBKDF2 encryption in a C# &amp; C++ Metro (WinRT) application.  What should I use to derive a key using PBKDF2 (like OpenSSL's PKCS5_PBKDF2_HMAC_SHA1 call does) on Metro?  Is there a version of OpenSSL that builds on WinRT?  (I've read that it only builds on Windows for the desktop platform.)  Or is there some other solution I should use?  </p>

<p>BTW I could call the function from either C# or C++, so either is fine.  Any advice would be much appreciated!</p>

<p>EDIT:
I just found a .NET function named ""Rfc2898DeriveBytes"" -- details <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.aspx"" rel=""nofollow"">here</a>.  If I'm reading that correctly it will do the same thing as OpenSSL's PKCS5_PBKDF2_HMAC_SHA1 call -- is that correct?</p>

<p><strong>EDIT #2:</strong>
Unfortunately it looks like I can't use Rfc2898DeriveBytes after all in my Windows 8.1 Metro app because despite what the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.aspx"" rel=""nofollow"">Microsoft documentation for Rfc2898DeriveBytes</a> says, that API method does not exist in the 'Windows.Security.Cryptography' namespace when building a Windows 8.1 app.  Is there anything else I can use?</p>
","<p>After much digging around I finally found <a href=""http://answers.flyppdevportal.com/categories/metro/csharpvb.aspx?ID=8f9ecac4-80d2-47c8-8c41-9d7877565bf5"" rel=""nofollow"">this link</a>.  Here is what I ended up doing in my Metro app:</p>

<pre><code>private static bool GetPBKDFDerivedKey(string password, 
    byte[] salt,                    // length = 32 bytes (256 bits)
    out byte[] encryptionKeyOut)    // length = 32 bytes (256 bits)
{            
    IBuffer saltBuffer = CryptographicBuffer.CreateFromByteArray(salt);
    KeyDerivationParameters kdfParameters = KeyDerivationParameters.BuildForPbkdf2(saltBuffer, 10000);  // 10000 iterations

    // Get a KDF provider for PBKDF2 and hash the source password to a Cryptographic Key using the SHA256 algorithm.
    // The generated key for the SHA256 algorithm is 256 bits (32 bytes) in length.
    KeyDerivationAlgorithmProvider kdf = KeyDerivationAlgorithmProvider.OpenAlgorithm(KeyDerivationAlgorithmNames.Pbkdf2Sha256);
    IBuffer passwordBuffer = CryptographicBuffer.ConvertStringToBinary(password, BinaryStringEncoding.Utf8);
    CryptographicKey passwordSourceKey = kdf.CreateKey(passwordBuffer);

    // Generate key material from the source password, salt, and iteration count
    const int keySize = 256 / 8;  // 256 bits = 32 bytes  
    IBuffer key = CryptographicEngine.DeriveKeyMaterial(passwordSourceKey, kdfParameters, keySize);

    // send the generated key back to the caller
    CryptographicBuffer.CopyToByteArray(key, out encryptionKeyOut);

    return true;  // success
}
</code></pre>
","905","<c#><c++><encryption><windows-runtime><pbkdf2>","1","3","2","2014-04-14 19:07:25","23067888","1","","2347831","","2014-04-14 17:29:33","2014-04-11 21:40:14",""
"23349266","Is this encryption method secure?","<p>I developed an application in C++ using Crypto++ to encrypt information and store the file in the hard drive. I use an integrity string to check if the password entered by the user is correct. Can you please tell me if the implementation generates a secure file? I am new to the world of the cryptography and I made this program with what I read.</p>

<pre><code>string integrity = ""ImGood""
string plaintext = integrity + string(""some text"");
byte password[pswd.length()]; // The password is filled somewhere else
byte salt[SALT_SIZE]; // SALT_SIZE is 32
byte key[CryptoPP::AES::MAX_KEYLENGTH];
byte iv[CryptoPP::AES::BLOCKSIZE];

CryptoPP::AutoSeededRandomPool rnd;
rnd.GenerateBlock(iv, CryptoPP::AES::BLOCKSIZE);
rnd.GenerateBlock(salt, SALT_SIZE);

CryptoPP::PKCS5_PBKDF2_HMAC&lt;CryptoPP::SHA512&gt; gen;
gen.DeriveKey(key, CryptoPP::AES::MAX_KEYLENGTH, 32,
              password, pswd.length(),
              salt, SALT_SIZE,
              256);

CryptoPP::StringSink* sink = new CryptoPP::StringSink(cipher);
CryptoPP::Base64Encoder* base64_enc = new CryptoPP::Base64Encoder(sink);
CryptoPP::CFB_Mode&lt;CryptoPP::AES&gt;::Encryption cfb_encryption(key, CryptoPP::AES::MAX_KEYLENGTH, iv);
CryptoPP::StreamTransformationFilter* aes_enc = new CryptoPP::StreamTransformationFilter(cfb_encryption, base64_enc);
CryptoPP::StringSource source(plaintext, true, aes_enc);

sstream out;
out &lt;&lt; iv &lt;&lt; salt &lt;&lt; cipher;
</code></pre>

<p>The information in the string stream ""out"" is then written to a file. Another thing is that I don't know what the ""purpose"" parameter in the derivation function means, I'm guessing it is the desired length of the key so I put 32, but I'm not sure and I can't find anything about it in the Crypto++ manual.</p>

<p>Any opinion, suggestion or mistake pointed out is appreciated.</p>

<p>Thank you very much in advance.</p>
","<p>A file can be ""secure"" only if you define what you mean by ""secure"".</p>

<p>Usually, you will be interested in two properties:</p>

<ul>
<li><p><strong>Confidentiality</strong>: the data that is encrypted shall remain unreadable to attackers; revealing the plaintext data requires knowledge of a specific secret.</p></li>
<li><p><strong>Integrity</strong>: any alteration of the data should be reliably detected; attackers shall not be able to modify the data in any way (even ""blindly"") without the modification being noticed by whoever decrypts the data.</p></li>
</ul>

<p>Your piece of code, apparently, fulfils confidentiality (to some extent) but not integrity. Your string called ""<code>integrity</code>"" is a misnomer: it is <em>not</em> an integrity check. Its role is apparently to detect <em>accidental</em> password mistakes, not attacks; thus, it would be less confusing if that string was called <code>passwordVerifier</code> instead. An attacker can alter any bit beyond the first 48 bits without the decryption process noticing anything.</p>

<p>Adding integrity (the genuine thing) requires the use of a <a href=""https://en.wikipedia.org/wiki/Message_authentication_code"" rel=""nofollow noreferrer"">MAC</a>. Combining encryption and a MAC securely is <a href=""https://crypto.stackexchange.com/questions/202/should-we-mac-then-encrypt-or-encrypt-then-mac"">subject to subtleties</a>; therefore, it is recommended to use for encryption and MAC an <a href=""http://en.wikipedia.org/wiki/Authenticated_encryption"" rel=""nofollow noreferrer"">authenticated encryption mode</a> which does both, and does so securely (i.e. that specific combination was explicitly reviewed by hordes of cryptographers). Usual recommended AE modes include <a href=""http://en.wikipedia.org/wiki/Galois/Counter_Mode"" rel=""nofollow noreferrer"">GCM</a> and <a href=""http://en.wikipedia.org/wiki/EAX_mode"" rel=""nofollow noreferrer"">EAX</a>.</p>

<p>An important point to note is that, in a context where integrity matters, data cannot be processed before having been verified. This has implications for big files: if your huge file is adorned with a single MAC (whether ""manually"" or as part of an AE mode), then you must first verify the complete file before beginning to do anything with the plaintext data. This does not work well with streamed processing (e.g. if playing a huge video). A workaround is to split the data into individual chunks, each with its own MAC, but then some care must be taken about the ordering of chunks (attackers could try to remove, duplicate or reorder chunks): things become complex. Complexity, on a general basis, is bad for security.</p>

<p>There are contexts where integrity does not matter. For instance, if your attack model is ""the attacker steals the laptop"", then you only have to care about confidentiality. However, if the attack model is ""the attacker steals the laptop, modifies a few files, and puts it back in my suitcase without me noticing"", then integrity matters: the attacker could plant a modification in the file, and infer parts of the secret itself based on your external behaviour when you next access the file.</p>

<p>For confidentiality, you use <a href=""http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_feedback_.28CFB.29"" rel=""nofollow noreferrer"">CFB</a>, which is a bit old-style, but not wrong. For the password-to-key transform, you use PBKDF2, which is fine; the iteration count, though, is quite low: you use 256. Typical values are 20000 or more. The <a href=""https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords/31846#31846"">theory</a> is that you should make <em>actual performance measures</em> to set this count to as high a value as you can tolerate: a higher value means slower processing, both for you and for the attacker, so you ought to crank that up (depending on your patience).</p>

<hr />

<p><strong>Mandatory warning:</strong> you are in the process of defining your own crypto, which is a path fraught with perils. Most people who do that produce weak systems, and that includes trained cryptographers; in fact, being a trained cryptographer does not mean that you know how to define a secure protocol, but rather that you know better than defining your own protocol. You are thus <em>highly encouraged</em> to rely on an existing protocol (or format), rather than making your own. I suggest <a href=""http://tools.ietf.org/html/rfc4880"" rel=""nofollow noreferrer"">OpenPGP</a>, with (for instance) <a href=""http://www.gnupg.org/"" rel=""nofollow noreferrer"">GnuPG</a> as support library. Even if you need for some reason (e.g. licence issues) to reimplement the format, using a standard format is still a good idea: it avoids introducing weaknesses, it promotes interoperability, and it can be tested against existing systems.</p>
","872","<aes><pbkdf2><c++>","3","5","1","2014-04-28 19:07:16","23349267","5","2","","","","2014-04-26 19:47:48",""
"28441452","Generate the same PBKDF2 keys in C# and NodeJS","<p>I'm trying to generate the same password hash using NodeJS crypto library and C# Rfc2898DeriveBytes. The C# implementation doesn't generate the same key when using the salt generated from NodeJs. What am I doing wrong?</p>

<p>The salt and hash generated in nodeJS: </p>

<pre><code>Salt: GJNw/wzXZxEdXrheqo322mf0x+92AeAuAHH48iiGZ+A=
Hash: w6fCpsKxw78Fw4pMFk5Zw6vDin7CnG5VwpUWBSjCo8OSOTJ6w47Cv8KWcjIpwoA=
</code></pre>

<p>The hash generated in C#:</p>

<pre><code>1G84mPkY78nsQ2BzO/qUPd+e0Lobrz7ZLzc+p7Zh0o8=
</code></pre>

<p>My C# test code is as follows:</p>

<pre><code>public const int HASH_BYTE_SIZE = 32; 
public const int PBKDF2_ITERATIONS = 1000;

public static string HashPassword(string password, string salt)
        {
            byte[] passwordBytes = Encoding.UTF8.GetBytes(password);
            byte[] saltBytes = Convert.FromBase64String(salt);

            var pbkdf2 = new Rfc2898DeriveBytes(passwordBytes, saltBytes, PBKDF2_ITERATIONS);
            var hash = pbkdf2.GetBytes(HASH_BYTE_SIZE);

            return Convert.ToBase64String(hash);
        }

static void Main(string[] args)
        {
            string salt = ""GJNw/wzXZxEdXrheqo322mf0x+92AeAuAHH48iiGZ+A="";
            string plainTextPsw = ""12345"";

            string hashedPsw = PasswordHash.HashPassword(plainTextPsw, salt);

            Console.WriteLine(hashedPsw);
            Console.ReadLine();
        }
</code></pre>

<p>And NodeJs:</p>

<pre><code>var crypto = require('crypto');
var iterations = 1000;
var bytes = 32;

exports.createSalt = function () {
    return new Buffer(crypto.randomBytes(bytes)).toString('base64');
}

exports.hash = function hash(text, salt, callback) {
    crypto.pbkdf2(text, salt, iterations, bytes, function (err, derivedKey) {
        if (err) { callback(err); }
        else {
            var h = new Buffer(derivedKey).toString('base64');
            callback(null, h);
        }
    });
}
</code></pre>
","<p>There are some bad conversions occurring in the Node.js code that produce an invalid result.</p>

<p>First, the ""salt"" passed to the pbkdf2 function should be the random bytes, without any transformation applied. However, in this case, the bytes are encoded with Base64 to text, and the characters in that text are used by Node.js as the salt.</p>

<p>Then, the derived key should be encoded directly to text with Base64. But here, the bytes of the key are treated as characters; this character string is converted to a new string of different bytes using UTF-8 encoding. This encoding is then encoded with Base64 to produce the final, incorrect result.</p>
","869","<c#><node.js><encryption><pbkdf2>","1","0","1","2015-02-11 19:00:19","","3","1","4552065","","2015-02-11 06:53:56","2015-02-10 20:48:15",""
"15774418","Can I improve the security of MD5 hashed passwords by salting the existing MD5 hash and hash the result using Scrypt or PBKDF2 HMACSHA256?","<p>I have a database of legacy passwords that were salted and hashed using MD5.  I would like to update the system so that the data is more secure.</p>

<p>The first option is to transition the users to a new hashing scheme (Salt + Scrypt or PBKDF2 HMACSHA256) when they login and deactivate old users after a certain period of time so they have to use the password recovery feature which would automatically update their hash.</p>

<p>Another option that would allow me to instantly upgrade everyone would be to take the existing MD5 hashes, add a new random salt value to each, and then hash the result using the new hashing scheme (Salt + Scrypt or PBKDF2 HMACSHA256) and store that value to the database and delete the old value.</p>

<p>Then when users login, I would have to apply the old, and then the new method.  I like the second option better since it allows me to remove all the old insecure hashes from the database sooner than later.</p>

<p>Is it secure to salt and rehash the existing hashes?  Is MD5 so broken that I can run a script to de-hash the passwords and rehash them using the new scheme?</p>

<p>Or maybe the best solution is to do a combination of both options?  This way I don't have to leave the existing MD5 hashes unsecured in the database and I can migrate users to the new system for a period of time?</p>
","<p>MD5 is not so broken that you can de-hash all the passwords easily, but assuming the quality of the passwords isn't too good then you could probably brute force them and convert them to the new, more secure format.  The brokenness of MD5 results from it's relatively small length (more collision surface) and it's computationally simple calculation (meaning brute force attacks are more feasible than algorithms that have larger run-time complexity such as SHA2)</p>

<p>If I were you I'd do both methods you listed (because as you mentioned, getting the passwords moved over quickly is important in case your DB is hacked).  First I would brute force all the brute forcible MD5 passwords and convert them to the new format.  I have done this in the past, and by far the best results have been using <a href=""http://hashcat.net/oclhashcat-plus/"">HashCat</a> (the Cuda or OCL flavors preferably since they use the GPU and are 200 times faster).  If Hashcat is too difficult (the learning curve can be steep), then try <a href=""https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CDUQFjAA&amp;url=http://www.openwall.com/john/&amp;ei=VFJbUendMMaJiAKQ_4CwDw&amp;usg=AFQjCNFrCSIEQUjDNDqEEFWYWSjUb6yA8g&amp;sig2=HwhJMfCAyB3HCJBS-VpO3A&amp;bvm=bv.44697112,d.cGE"">John the Ripper</a>.  It is a lot slower than HashCat but it's a lot easier to use.</p>

<p>For the passwords that you can't crack, expire the user's account and have them reset the password.  Or to be nicer to your users, just update the password in the database to the new format the next time they log in by sending both hashes.  If the MD5 checks out, then destroy it and replace it with the new format.  These are just some ideas.</p>

<p>EDIT:</p>

<p>Forgot to mention that if you want to just hash the MD5 passwords into the new format that would be just fine security-wise, though it adds another layer of complexity to your code, and where there is complexity there is room for implementation flaws.  Just something to think about.</p>
","860","<security><md5><password-encryption><pbkdf2><scrypt>","5","5","2","2016-10-03 17:33:11","15775071","2","2","108010","","2013-04-02 21:15:30","2013-04-02 21:08:39",""
"15774418","Can I improve the security of MD5 hashed passwords by salting the existing MD5 hash and hash the result using Scrypt or PBKDF2 HMACSHA256?","<p>I have a database of legacy passwords that were salted and hashed using MD5.  I would like to update the system so that the data is more secure.</p>

<p>The first option is to transition the users to a new hashing scheme (Salt + Scrypt or PBKDF2 HMACSHA256) when they login and deactivate old users after a certain period of time so they have to use the password recovery feature which would automatically update their hash.</p>

<p>Another option that would allow me to instantly upgrade everyone would be to take the existing MD5 hashes, add a new random salt value to each, and then hash the result using the new hashing scheme (Salt + Scrypt or PBKDF2 HMACSHA256) and store that value to the database and delete the old value.</p>

<p>Then when users login, I would have to apply the old, and then the new method.  I like the second option better since it allows me to remove all the old insecure hashes from the database sooner than later.</p>

<p>Is it secure to salt and rehash the existing hashes?  Is MD5 so broken that I can run a script to de-hash the passwords and rehash them using the new scheme?</p>

<p>Or maybe the best solution is to do a combination of both options?  This way I don't have to leave the existing MD5 hashes unsecured in the database and I can migrate users to the new system for a period of time?</p>
","<p>This is actually a very ingenious idea you had. Normally i would have:</p>

<ul>
<li>waited until a user returned</li>
<li>realize that their stored password needs to be updated</li>
<li>now that i have their (known valid) password in memory: rehash it with the new algorithm</li>
<li>store the new hash in the database</li>
</ul>

<p>The downside to only having used MD5 is that it's easy to bruteforce. By (temporarily) treating the MD5 result as an intermediate step before applying the real scrypt/Argon2, you thwart bruteforcing attempts.</p>

<p>Using a fast hash algorithm as a pre-processing step before the <em>""real""</em> password hash is not unheard of - and can even be useful.</p>

<ul>
<li>BCrypt has a known password length limitation of 72 bytes (71 utf-8 characters and then a null terminator). <a href=""https://blogs.dropbox.com/tech/2016/09/how-dropbox-securely-stores-your-passwords/"" rel=""nofollow"">Dropbox applies SHA2-512 to the incoming plaintext password</a> before running it through bcrypt. By running a long password through a hash first, they overcome the 71 character limit.</li>
<li>Not only does this overcome the password length limitation (avoiding having to truncate or limit the password size), but it can prevent a Denial of Service attack when <a href=""http://arstechnica.com/security/2013/09/long-passwords-are-good-but-too-much-length-can-be-bad-for-security/"" rel=""nofollow"">someone supplies an extraordinarily long password</a>. BCrypt and Scrypt are suseptible to attacks with longer passwords (i don't know about Argon2).</li>
</ul>

<p>So there can be a virtue in using a pre-hash (although not necessarily MD5).</p>

<p>I don't know how you're currently storing the MD5 hashes. MD5 is 128-bit. Assuming you store it in Base64, you can easily recognize it:</p>

<ul>
<li><strong>MD5</strong>: <code>nMKuihunqT2jm0b8EBnEgQ==</code></li>
</ul>

<p>The desired final goal is something like scrypt:</p>

<ul>
<li><strong>MD5</strong>: <code>nMKuihunqT2jm0b8EBnEgQ==</code></li>
<li><strong>scrypt</strong>: <code>$s0$e0801$epIxT/h6HbbwHaehFnh/bw==$7H0vsXlY8UxxyW/BWx/9GuY7jEvGjT71GFd6O4SZND0=</code></li>
</ul>

<p>So when validating credentials against a saved hash, you can figure out which hash it is and use the appropriate algorithm. Your intermediate step, which adds the computational complexity, is defining your own format for:</p>

<blockquote>
  <p>MD5 + scrypt</p>
</blockquote>

<p>something like:</p>

<ul>
<li><strong>MD5</strong>: <code>nMKuihunqT2jm0b8EBnEgQ==</code></li>
<li><strong>MD5 + scrypt</strong>: <code>$md5s0$e0801$eX8cPtmLjKSrZBJszHIuZA==$vapd0u4tYVdOXOlcIkFmrOEIr1Ml2Ue1l2+FVOJgbcI=</code></li>
<li><strong>scrypt</strong>: <code>$s0$e0801$epIxT/h6HbbwHaehFnh/bw==$7H0vsXlY8UxxyW/BWx/9GuY7jEvGjT71GFd6O4SZND0=</code></li>
</ul>

<p>Now you recognize the algorithm being used based on the saved hash, and can upgrade passwords in pieces.</p>
","860","<security><md5><password-encryption><pbkdf2><scrypt>","5","1","2","2016-10-03 17:33:11","15775071","2","2","108010","","2013-04-02 21:15:30","2013-04-02 21:08:39",""
"29131070","No callback provided to pbkdf2","<p>I have this code, which works just fine on my development computer, but not on the server.</p>

<pre><code>db.admin.verify([req.body.username]).then(function(data){
    if (data[0].length == 0){       //if there is no user with that username
        console.log(""bad username"");
        res.status(401).send('Incorrect username or password');
    }

    var creds = data[0][0];

    return myCrypt.pbkdf2(req.body.password, creds.salt).then(function(key){
        if (creds.password === key.toString('base64')){            //correct password
            console.log(""correct pw"");
            return db.admin.getUser([req.body.username])
        } else {
            console.log(""bad pw"");
            res.status(401).send('Incorrect password or username');
        }
    });
}).then(function(dbData){
    var user = dbData[0][0];
    var profile = {
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        username: user.username,
        type: user.type,
        id: user.adminId
    };

    var token = jwt.sign(profile, 'secrets');

    res.json({token:token, user: profile});
}).catch(function(err){
    console.log('ERROR');
    console.log(err);
    throw err;
    res.status(500).json(err);
});
</code></pre>

<p>It is supposed to authenticate a user from a database by comparing hashes.
I am using node.js crypto library implementation of pbkdf2 wrapped in a Q promise. </p>

<pre><code>module.exports.pbkdf2 = function(password, salt) {

    var pbkdf2 = Q.denodeify(crypto.pbkdf2);

    return pbkdf2(password, salt, 4096, 512, 'sha512')
};
</code></pre>

<p>When I try running it on the server, it returns <code>[Error: No callback provided to pbkdf2]</code>, caught from the promises catch function.</p>

<p>I've tried copying my entire project from the development to the server, just in case I didn't have any dependencies installed, but the error is still thrown.</p>
","<p>Turns out that the pbkdf2 function signature broke between node 0.10 and 0.12, and it wasn't receiving the callback because I was passing the digest instead of a function callback. Updating nodejs to 0.12 fixed the issue.</p>
","846","<node.js><express><q><pbkdf2>","1","5","1","2015-03-27 21:23:18","29238938","2","","","","","2015-03-18 19:29:53",""
"44847460","Generate the same keys with Rfc2898DeriveBytes in c# and pbkdf2 in go","<p>Why do <code>Rfc2898DeriveBytes</code> in C# and  <code>pbkdf2</code> in go lang generate different keys?</p>

<p>my <strong>C#</strong> code</p>

<pre class=""lang-cs prettyprint-override""><code>using System;
using System.Security.Cryptography;
using System.Text;

public class Test
{
        private static byte[] passBytes = new byte[]
        {164,176,124,62,244,154,226,211,177,90,202,180,12,142,25,225};

        private static byte[] saltBytes = new byte[]
        {173,205,190,172,239,190,242,63,219,205,173,196,218,171,142,214};

        public static byte[] GetKey()
        {
            var key = new Rfc2898DeriveBytes(Encoding.UTF8.GetString(passBytes, 0, 16), saltBytes).GetBytes(16);
            return key;
        }

    public static void Main()
    {
        System.Console.WriteLine(Convert.ToBase64String(GetKey()));
    }
}
</code></pre>

<p><strong>output:</strong> 77U85CphtSEwPP9a2T/jaQ==</p>

<hr>

<p>golang code</p>

<pre class=""lang-golang prettyprint-override""><code>package main

import (

    b64 ""encoding/base64""
    ""golang.org/x/crypto/pbkdf2""
    ""crypto/sha1""

)

var (
    pass[]byte = []byte{164,176,124,62,244,154,226,211,177,90,202,180,12,142,25,225}
    salt[]byte = []byte{173,205,190,172,239,190,242,63,219,205,173,196,218,171,142,214}
)


func getKey() (key[]byte){
    key =  pbkdf2.Key(pass,salt,1000,16,sha1.New)
    return
}


func main() {
    print(b64.StdEncoding.EncodeToString(getKey()))
}
</code></pre>

<p><strong>output:</strong> hnuuu+he4aF7vAzA8rfQtw==</p>

<p>Is there something different i must do?</p>
","<p>You're using different variant (the constructor that takes UTF-8 <code>string</code>) when initializing C# instance. In addition, as already pointed by zaph, you need to use same iteration count for both C# and <code>golang</code> codes. The <code>golang</code> version takes <code>[]byte</code> arguments both for <em>password</em> and <em>salt</em>, and the C# counterpart is <a href=""https://msdn.microsoft.com/en-us/library/ms148161(v=vs.110).aspx"" rel=""nofollow noreferrer""><code>Rfc2898DeriveBytes Constructor (Byte[] password, Byte[] salt, Int32 iterations)</code></a>.</p>

<pre><code>byte[] passBytes = new byte[]
    {164,176,124,62,244,154,226,211,177,90,202,180,12,142,25,225};

byte[] saltBytes = new byte[]
    {173,205,190,172,239,190,242,63,219,205,173,196,218,171,142,214};

var pbkdf2 = new Rfc2898DeriveBytes(passBytes, saltBytes, 1000);
var key = Convert.ToBase64String(pbkdf2.GetBytes(16));
</code></pre>

<p>The output of above code is the same with <code>golang</code> version.</p>
","818","<c#><go><pbkdf2>","2","1","1","2018-06-21 13:31:59","44848560","5","","","","","2017-06-30 13:17:23",""
"25564449","Verify user provided password with MySQL database in C#","<p>I use c# to design a login window for a GUI, in which user first provides username and password, and the program matchs it with the predefined userlist in the MySQL database. If correct, then the user is permitted to open the GUI. </p>

<p>I found the password is hashed and salted by ""PBKDF2-SHA256"" algorithm in MySQL. So, for a user with username and password both equal to <code>test</code>, by debugging, I found the hashed password from MySQL is of this form:</p>

<pre><code>pbkdf2_sha256$12000$d8D3H2ZczGuG$H/U3ioBaeUeYPCP2YqLwpkjI40PoMHqeJyPORz8prUg=
</code></pre>

<p>I know that it uses <code>pbkdf2_sha256</code> to hash the password, salt it by <code>d8D3H2ZczGuG</code> with <code>12000</code> iterations, and the final result is <code>H/U3ioBaeUeYPCP2YqLwpkjI40PoMHqeJyPORz8prUg=</code>. So, when verifying a password, I expect my program first hashes the input password with these same algorithm and parameters, and if the obtained final result is the same as <code>H/U3ioBaeUeYPCP2YqLwpkjI40PoMHqeJyPORz8prUg=</code>, then that means the password is correct. For the c# implementation of <code>pbkdf2_sha256 algorithm</code>, I used directly <a href=""https://gist.github.com/peteroupc/6986999"" rel=""nofollow"">this</a> one.</p>

<p><strong>My code is as follows</strong>:</p>

<p>(the textbox to input username is named as ""TextBox_Username"" while the password box is named as ""PasswordBox_Password""): </p>

<pre><code>string server = ""127.0.0.1"";
string database = ""myDatabase"";
string uid = ""supervisor"";
string password = ""12345"";
string connectionString = ""server="" + server + "";"" + ""database=""+database + "";"" + ""uid="" + uid "";"" + ""password="" + password + "";"";
MySqlConnection sqlConnection = new MySqlConnection(connectionString);
MySqlCommand cmd = new MySqlCommand();
cmd.CommandText = ""SELECT Password FROM myTable_Usertable WHERE Username='"" + this.TextBox_UserName.Text + ""';"";
sqlConnection.Open();
cmd.Connection = sqlConnection;

MySqlDataReader reader = cmd.ExecuteReader();

while (reader.Read())
{
    string dbUserPassword= reader[0].ToString();

    string[] passwordString = dbUserPassword.Split(""$"");
    int iterationCount = Convert.ToInt32(passwordString[1]);
    string saltString = passwordString[2];
    string dbPasswordString = passwordString[3];
    int dkLength = 44;

    byte[] inputPasswordByte = System.Text.Encoding.UTF8.GetBytes(this.PasswordBox_Password.Password);
    byte[] saltByte = System.Text.Encoding.UTF8.GetBytes(saltString);
    byte[] hashedPasswordByte = PBKDF2Sha256GetBytes(dkLength,inputPasswordByte,saltByte,iterationCount);
    byte[] dbPasswordByte = System.Text.Encoding.UTF8.GetBytes(dbPasswordString);

    if( hashedPasswordByte == dbPasswordByte)
    {
        MessageBox.Show(""Login succeed!"");
        MainWindow.show();   
    }
    else
    {
        MessageBox.Show(""Invalid password!"");
    }

}

// this following function is from the above link
private static byte[] PBKDF2Sha256GetBytes(int dklen, byte[] password, byte[] salt, int iterationCount)
    {
        using (var hmac = new System.Security.Cryptography.HMACSHA256(password))
        {
            int hashLength = hmac.HashSize / 8;
            if ((hmac.HashSize &amp; 7) != 0)
                hashLength++;
            int keyLength = dklen / hashLength;
            if ((long)dklen &gt; (0xFFFFFFFFL * hashLength) || dklen &lt; 0)
                throw new ArgumentOutOfRangeException(""dklen"");
            if (dklen % hashLength != 0)
                keyLength++;
            byte[] extendedkey = new byte[salt.Length + 4];
            Buffer.BlockCopy(salt, 0, extendedkey, 0, salt.Length);
            using (var ms = new System.IO.MemoryStream())
            {
                for (int i = 0; i &lt; keyLength; i++)
                {
                    extendedkey[salt.Length] = (byte)(((i + 1) &gt;&gt; 24) &amp; 0xFF);
                    extendedkey[salt.Length + 1] = (byte)(((i + 1) &gt;&gt; 16) &amp; 0xFF);
                    extendedkey[salt.Length + 2] = (byte)(((i + 1) &gt;&gt; 8) &amp; 0xFF);
                    extendedkey[salt.Length + 3] = (byte)(((i + 1)) &amp; 0xFF);
                    byte[] u = hmac.ComputeHash(extendedkey);
                    Array.Clear(extendedkey, salt.Length, 4);
                    byte[] f = u;
                    for (int j = 1; j &lt; iterationCount; j++)
                    {
                        u = hmac.ComputeHash(u);
                        for (int k = 0; k &lt; f.Length; k++)
                        {
                            f[k] ^= u[k];
                        }
                    }
                    ms.Write(f, 0, f.Length);
                    Array.Clear(u, 0, u.Length);
                    Array.Clear(f, 0, f.Length);
                }
                byte[] dk = new byte[dklen];
                ms.Position = 0;
                ms.Read(dk, 0, dklen);
                ms.Position = 0;
                for (long i = 0; i &lt; ms.Length; i++)
                {
                    ms.WriteByte(0);
                }
                Array.Clear(extendedkey, 0, extendedkey.Length);
                return dk;
            }
        }

    }
</code></pre>

<p>But now the problem is, the hashed output of my program for the same password is different from the MySQL database's. For instance, for the password as ""test"", my program gives this output (after converting the output byte to string):</p>

<pre><code>?7??ZyG?&lt;#?b??H??C?0z?'#?G?)?Ht\r5_[?% y
</code></pre>

<p>while the MySQL output is this one (as mentioned above):</p>

<pre><code>H/U3ioBaeUeYPCP2YqLwpkjI40PoMHqeJyPORz8prUg=
</code></pre>

<p>So it says the provided password is incorrect even to a correct password. I guessed maybe my program's output is hexidecimal, so I tried to convert the both my final result with MySQL string to hexidecimal by this: </p>

<pre><code>string hexDbPassword = BitConverter.ToString(dbPasswordByte);
string hexHashedPassword = BitConverter.ToString(hashedPasswordByte);
</code></pre>

<p>The result is this (again not the same):</p>

<pre><code>hexDbPassword = 48-2F-55-33-69-6F-42-61-65-55-65-59-50-43-50-32-59-71-4C-77-70-6B-6A-49-34-30-50-6F-4D-48-71-65-4A-79-50-4F-52-7A-38-70-72-55-67-3D    
hexHashedPassword = 1F-F5-37-8A-80-5A-79-47-98-3C-23-F6-62-A2-F0-A6-48-C8-E3-43-E8-30-7A-9E-27-23-CE-47-3F-29-AD-48-02-74-0D-35-0E-5F-5B-02-DC-25-20-79
</code></pre>

<p>What I am doing wrong here??</p>
","","816","<c#><mysql><hash><passwords><pbkdf2>","0","","0","2014-08-29 08:28:24","","3","","","","","2014-08-29 08:28:24",""
"36025129","Using PBKDF2 in Java and PHP","<p>I'm having some difficulty producing the same encrypted password using the PBKDF2 algorithm on both Java and PHP. </p>

<p>I'm using the following Java implementation to generate the hash with a random byte array which is 16 bytes in size. I'm then storing the hash and salt separately in a MySQL database, however when I go to do the same operation in PHP using the salt retrieved from the database, I get almost the exact same encryption except the hash has a leading 0 and I cannot for the life of me figure out why.</p>

<p>Java:</p>

<pre><code>public String hashPassword(String password, byte[] salt){

 char[] passwordChars = password.toCharArray();

     PBEKeySpec spec = new PBEKeySpec(
         passwordChars,
         salt,
         ITERATIONS,
         KEY_LENGTH
     );
     SecretKeyFactory key = null;
    try {
        key = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }

    byte[] hashedPassword = null;

    try {
        hashedPassword = key.generateSecret(spec).getEncoded();
    } catch (InvalidKeySpecException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
     return String.format(""%x"", new BigInteger(hashedPassword));

}
</code></pre>

<p>I found the above code at <a href=""https://adambard.com/blog/3-wrong-ways-to-store-a-password/"" rel=""nofollow"">https://adambard.com/blog/3-wrong-ways-to-store-a-password/</a></p>

<p>PHP:</p>

<pre><code>$query = $database-&gt;query('SELECT * FROM USERS');

$password = 'hello';
$iterations = 1000;

foreach($query as $user){
    $hash = hash_pbkdf2(""sha1"", $password, $user['salt'], $iterations, 40, false);

}
echo $hash;
</code></pre>

<p>Note: There is only one user stored in the database, I know the above code isn't great, I created it quickly for testing purposes.</p>

<p>For both implementations I'm using an iteration count of 1000, a key length of 160 in Java and a key length of 40 in PHP (to compensate for setting raw-output to false)</p>

<pre><code>Java Output - 971f0dddc1bc2e899f2bca178f16ea79bfbbb13
PHP Output - 0971f0dddc1bc2e899f2bca178f16ea79bfbbb13
</code></pre>

<p>Any help is much appreciated, thank you.</p>
","<p>It is the <code>BigInteger</code> that is killing the leading 0.</p>

<p>Hashes are not integers, they are an array of 8-bit bytes. Do not try to convert to a <code>BigInteger</code>.</p>

<p>Either use it as a <code>byte[]</code> or encode as a hexadecimal or Base64 string. To match PHP hexadecimal encode <code>hashedPassword</code>.</p>

<p>PHP is returning a hexadecimal string encoded hash because <code>raw_output</code> is set to <code>FALSE</code>.</p>
","808","<java><php><encryption><pbkdf2>","2","4","1","2016-03-16 02:25:31","36025718","2","","","","","2016-03-16 01:11:42",""
"13051886","Why I get different results with PBKDF2 on different machines?","<p>I have am trying to use PBKDF2 to store passwords. I am then using the code with the password hashes it generated on a different machine.</p>

<p>I am using this method to encrypt my passwords:</p>

<pre><code>public  String pwdEncodePBKDF2(String unencryptedPassword,String salt)
{
try
{
        if(salt.isEmpty())
        {
            salt = generateSalt(SystemSecurity.SALTLENGTH);
        }
        String algorithm = ""PBKDF2WithHmacSHA1"";
        int derivedKeyLength = 160;
        int iterations = 1000;
        KeySpec spec = new PBEKeySpec(unencryptedPassword.toCharArray(), salt.getBytes(), iterations, derivedKeyLength);
        SecretKeyFactory f = SecretKeyFactory.getInstance(algorithm);
        StringBuffer hexString = new StringBuffer();
        byte[] mdbytes  =  f.generateSecret(spec).getEncoded();
        for (int i=0;i&lt;mdbytes.length;i++)
        {
            hexString.append(Integer.toHexString(0xFF &amp; mdbytes[i]));
        }
        String hashedPassword = hexString.toString();
        return hashedPassword  + salt;
    }
    catch(Exception e)
    {
        e.printStackTrace();
        throw new RuntimeException(""Error computing hash: ""+e.getMessage());
    }        
}
</code></pre>

<p>It works fine, but when I run it on a different machine (i.e. install my project on a different machine, with a database that has an encrypted of a default password from the machine I run on initially)
I see that with the same salt and password it give me a different encryption.
As far as I understand the SecretKeyFactory methods depend only on the inputs I give them, or do they depend on the machine I am running on as well?</p>

<p>If so, how can I save a default password for first installation with this security mechanism without running any extra code during installation?</p>

<p>Thank You!</p>
","<p>I think the problem may be in different default String encodings.</p>

<p>Check that your strings use same encoding.</p>

<p>you can try to check bytes using </p>

<pre><code>salt.getBytes()
</code></pre>

<ul>
<li>it return bytes in default encoding, may be machines has different encodings.</li>
</ul>

<p>You can just replace salt.getBytes(), with somethink like salt.getBytes(""UTF-8""); may be it will help.</p>
","798","<java><encryption><passwords><password-encryption><pbkdf2>","2","1","1","2012-10-24 15:34:38","13052178","0","1","1114464","","2012-10-24 15:24:37","2012-10-24 14:59:23",""
"16389790","Add salt to pycrypto KDF - useful?","<p>I have noted some sources indicate that when using a KDF like <a href=""https://github.com/dlitz/pycrypto/blob/master/lib/Crypto/Protocol/KDF.py"" rel=""nofollow"">PBKDF2</a> some advocate injecting the salt at the time of execution - like this:</p>

<pre><code>dv = salt + PBKDF2(salt + password, salt)
</code></pre>

<p>Versus the ""plain"" usage of</p>

<pre><code>dv = PBKDF2(password, salt)
</code></pre>

<p>When using the <code>PyCrypto.Protocol.KDF</code>  <code>PBKDF2</code> function (linked above), do the extra salt parameters add any benefit if no two passwords will have the same salt (but the salt will be stored with the password)?</p>

<p>Presumably the risk is having an oracle whereby identical passwords would be revealed as-such, encoded. Is this the case or is there another concern one ought to be mindful of?</p>

<p>If this is the only concern I would expect, in the absence of a fault in the algorithms that permits short-circuiting, a plainly used salt obliges one to recheck every password the entire number of iterations. Is this the case? </p>
","","785","<pycrypto><pbkdf2>","2","","0","2013-05-05 22:31:33","","9","1","","","","2013-05-05 22:31:33","2013-05-06 19:07:59"
"35472403","Why PBKDF2 SHA256 generated hash value not equal between C and java","<p>I have a Android client and Server, the client needs to validate the session key before communication or processing data with the server. The client was Android app and its encryption method was wrote in Java, the server`s was wrote in C.</p>

<p>I call the session key as ""magic token"", and the magic token is generated by PBKDF2 algorithm with 1000 iterations of SHA256 hash on server. The client fetch the magic token from server and the client itself needs to regenerate the magic token again in order to compare the fetched one and generated one. if they are equal, means the session key is valid and the client can go further operations. </p>

<p>But my problem is when I trying to generate the magic token using the same algorithm, salt, iteration count with server side, the generated hash value are not the same. Maybe it caused by PBKDF2 algorithm or sha256 are not exactly same for different platforms. I feel really confused and anyone can help me find out where the error comes from? </p>

<p>NOTE, both C and Java source code are open sourced project hosted on github as linked below. Thanks in advance.</p>

<p>C language style as below</p>

<pre><code>static unsigned char salt[8] = { 0xda, 0x90, 0x45, 0xc3, 0x06, 0xc7, 0xcc, 0x26 };

    int
seafile_derive_key (const char *data_in, int in_len, int version,
                    unsigned char *key, unsigned char *iv)
{
    if (version == 2) {
        PKCS5_PBKDF2_HMAC (data_in, in_len,
                           salt, sizeof(salt),
                           KEYGEN_ITERATION2,
                           EVP_sha256(),
                           32, key);
        PKCS5_PBKDF2_HMAC ((char *)key, 32,
                           salt, sizeof(salt),
                           10,
                           EVP_sha256(),
                           16, iv);
        return 0;
    } else if (version == 1)
        return EVP_BytesToKey (EVP_aes_128_cbc(), /* cipher mode */
                               EVP_sha1(),        /* message digest */
                               salt,              /* salt */
                               (unsigned char*)data_in,
                               in_len,
                               KEYGEN_ITERATION,   /* iteration times */
                               key, /* the derived key */
                               iv); /* IV, initial vector */
    else
        return EVP_BytesToKey (EVP_aes_128_ecb(), /* cipher mode */
                               EVP_sha1(),        /* message digest */
                               NULL,              /* salt */
                               (unsigned char*)data_in,
                               in_len,
                               3,   /* iteration times */
                               key, /* the derived key */
                               iv); /* IV, initial vector */
}

        void
    seafile_generate_magic (int version, const char *repo_id,
                            const char *passwd, char *magic)
    {
        GString *buf = g_string_new (NULL);
        unsigned char key[32], iv[16];

        /* Compute a ""magic"" string from repo_id and passwd.
         * This is used to verify the password given by user before decrypting
         * data.
         */
        g_string_append_printf (buf, ""%s%s"", repo_id, passwd);

        seafile_derive_key (buf-&gt;str, buf-&gt;len, version, key, iv);

        g_string_free (buf, TRUE);
        rawdata_to_hex (key, magic, 32);
    }
</code></pre>

<p>the complete file for C can be found on <a href=""https://github.com/haiwen/seafile/blob/master/common/seafile-crypt.c#L102"" rel=""nofollow"">github</a></p>

<p>and my java (Android) language style as below</p>

<pre><code>private static String generateMagic(String repoID, String password, int version) throws NoSuchAlgorithmException, InvalidKeySpecException, UnsupportedEncodingException, SeafException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
    if (version != 1 &amp;&amp; version != 2) {
        throw SeafException.unsupportedEncVersion;
    }

    String src = repoID + password;
    char[] salt = {0xda, 0x90, 0x45, 0xc3, 0x06, 0xc7, 0xcc, 0x26};
    final byte[] slt = new String(salt).getBytes(""UTF-8"");
    // If you use version 1.47 or higher of SpongyCastle, you can invoke PBKDF2WithHmacSHA256 directly.
    // In versions of BC &lt; 1.47, you could not specify SHA256 digest and it defaulted to SHA1.
    // see http://stackoverflow.com/questions/6898801/how-to-include-the-spongy-castle-jar-in-android
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes(src.toCharArray()), slt, ITERATION_COUNT);
    byte[] keyBytes;

    if (version == 2) {
        keyBytes = ((KeyParameter) gen.generateDerivedMacParameters(KEY_LENGTH * 8)).getKey();
    } else
        keyBytes = ((KeyParameter) gen.generateDerivedMacParameters(16 * 8)).getKey();

    // final SecretKey key = deriveKeyPbkdf2(slt, src, version);
    // final byte[] bytes = key.getEncoded();
    return toHex(keyBytes);
}
</code></pre>

<p>the complete file for Java can be found on <a href=""https://github.com/Logan676/seadroid/blob/feature/support_client_side_encryption/app/src/main/java/com/seafile/seadroid2/crypto/Crypto.java#L101"" rel=""nofollow"">github</a></p>

<h2><strong>EDIT</strong></h2>

<p>Finally, I found the error, it was caused by char[] salt,
the correct one as </p>

<pre><code>byte[] salt = {(byte) 0xda, (byte) 0x90, (byte) 0x45, (byte) 0xc3, (byte) 0x06, (byte) 0xc7, (byte) 0xcc, (byte) 0x26};
</code></pre>
","","775","<java><c><sha256><encryption-symmetric><pbkdf2>","4","","0","2016-02-18 04:22:38","","2","1","3962551","","2016-02-18 04:22:38","2016-02-18 03:41:51",""
"43294652","SecretKeyFactory.generateSecret dies with InvalidKeySpecException on IBM Java","<p>We are hashing a password using the PBKDF2 algorithm, using the <a href=""http://docs.oracle.com/javase/7/docs/api/javax/crypto/SecretKeyFactory.html#generateSecret(java.security.spec.KeySpec)"" rel=""nofollow noreferrer""><code>SecretKeyFactory.generateSecret</code></a> function, like this:</p>

<pre><code>final SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(algorithm);
final PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, iterations, hashLength);
final SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
return secretKey.getEncoded();
</code></pre>

<p>Everything seems to work fine, however, on the production server, when it is running in IBM Java, it dies with <code>java.security.spec.InvalidKeySpecException</code>: <em>Could not generate secret key</em>:</p>

<pre><code>Caused by: java.security.spec.InvalidKeySpecException: Could not generate secret key
    at javax.crypto.SecretKeyFactory.generateSecret(Unknown Source)
    at our.Implementation.doHash(Hasher.java:71)
    ... 48 more
Caused by: java.lang.RuntimeException: Error deriving PBKDF2 keys
    at com.ibm.crypto.provider.PBKDF2KeyImpl.a(Unknown Source)
    at com.ibm.crypto.provider.PBKDF2KeyImpl.&lt;init&gt;(Unknown Source)
    at com.ibm.crypto.provider.PBKDF2HmacSHA1Factory.engineGenerateSecret(Unknown Source)
    ... 50 more
</code></pre>

<p>We tried to change the iteration count, generated hash size, and the salt size, but nothing helped. What am I doing wrong?</p>
","<p>Apparently, it seems the IBM Java implementation of PBKDF2 insists the password must not be empty. When it is, the implementation throws an exception.</p>

<p>Empty passwords are arguably an edge case, however, the first test case was exactly that, so it seemed the code did not work at all. Also, while an edge case, you either need to ensure it never happens (validations requiring the user not to have empty password), or you should handle it gracefully.</p>

<p>If you really need to support empty passwords, you either need to handle them as a special case, or just normalize all passwords so that the input to PBKDF2 is never empty. However, you have to ensure you won’t compromise security that way.</p>

<p>In the end, we chose to prefix all passwords with their length, so that even the empty passwords ends being represented with a nonempty string. Like that:</p>

<pre><code>final String prefixedPassword = String.format(Locale.ROOT, ""%08x%s"", password.length(), password);
</code></pre>
","774","<java><pbkdf2><java-security><ibm-jdk>","1","0","1","2017-04-08 13:22:35","43294653","0","","","","","2017-04-08 13:22:35",""
"26968594","pbkdf2_sha256 C# implementation","<p>I've got a database where passwords are stored as pbkdf2_sha256. 
I want to create a tool (in C#) which should create new passwords.</p>

<p>My problem is: <strong>How can I encrypt the password in C#?</strong>
I found a <a href=""https://gist.github.com/lukaszb/1af1bd4233326e37a8a0"" rel=""nofollow"">Java-Class</a> which works for me, but I can not use this sample in C#. <strong>Is there a smilar way?</strong></p>

<p>I tried also other classes but they do not seem to work. </p>

<p><strong>EDIT:</strong>
I found <a href=""https://cmatskas.com/-net-password-hashing-using-pbkdf2/"" rel=""nofollow"">this</a> class for C#. But when I call the <code>ValidatePassword</code>-Method it returns false. (Password and Hash are correct). </p>

<p><strong>EDIT2:</strong>
I found also <a href=""https://www.jmedved.com/2012/04/pbkdf2-with-sha-256-and-others/"" rel=""nofollow"">this</a> C# class but it doesn't seem to work. What did I wrong?</p>

<p>Here is the code which I use:</p>

<pre><code>var salt = ""FbSnXHPo12gb"";
var password = ""geheim"";
var interactions = 12000;


using (var hmac = new HMACSHA256())
{
    var df = new Pbkdf2(hmac, password, salt, interactions);
    Console.WriteLine(BitConverter.ToString(df.GetBytes(32)));
    Console.WriteLine(String.ByteArrayToString(df.GetBytes(32)));
    Console.WriteLine(UTF8Encoding.UTF8.GetString(df.GetBytes(32)));
    Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
}

//hash I should get: 
//pbkdf2_sha256$12000$FbSnXHPo12gb$LEpQrzPJXMI0m3tQuIE5mknqCv1GWgT5X2rWyLHN0Xk=

//hash I get:
//Rc8oMeSrbWyIJ+aXvGegFowKcIlwk8eIRyxXUf/a+t0=
</code></pre>
","<p>Do not convert hexadecimal output to base-64 string but convert bytes to it directly. And also notice that you will get new bytes on each df.GetBytes call. Equivalent example would be:</p>

<pre><code>var salt = ""FbSnXHPo12gb"";
var password = ""geheim"";
var interactions = 12000;


using (var hmac = new HMACSHA256())
{
    var df = new Pbkdf2(hmac, password, salt, interactions);
    Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
}

//hash I should get: 
//pbkdf2_sha256$12000$FbSnXHPo12gb$LEpQrzPJXMI0m3tQuIE5mknqCv1GWgT5X2rWyLHN0Xk=

//hash I get:
//LEpQrzPJXMI0m3tQuIE5mknqCv1GWgT5X2rWyLHN0Xk=
</code></pre>

<p>Notice that Java class has a header (""pbkdf2_sha256$12000$FbSnXHPo12gb$"") while C# class only returns hash.</p>
","760","<c#><security><sha256><password-encryption><pbkdf2>","1","3","2","2015-01-17 04:28:41","26998465","1","","3651723","","2014-11-18 07:44:14","2014-11-17 08:40:22",""
"26968594","pbkdf2_sha256 C# implementation","<p>I've got a database where passwords are stored as pbkdf2_sha256. 
I want to create a tool (in C#) which should create new passwords.</p>

<p>My problem is: <strong>How can I encrypt the password in C#?</strong>
I found a <a href=""https://gist.github.com/lukaszb/1af1bd4233326e37a8a0"" rel=""nofollow"">Java-Class</a> which works for me, but I can not use this sample in C#. <strong>Is there a smilar way?</strong></p>

<p>I tried also other classes but they do not seem to work. </p>

<p><strong>EDIT:</strong>
I found <a href=""https://cmatskas.com/-net-password-hashing-using-pbkdf2/"" rel=""nofollow"">this</a> class for C#. But when I call the <code>ValidatePassword</code>-Method it returns false. (Password and Hash are correct). </p>

<p><strong>EDIT2:</strong>
I found also <a href=""https://www.jmedved.com/2012/04/pbkdf2-with-sha-256-and-others/"" rel=""nofollow"">this</a> C# class but it doesn't seem to work. What did I wrong?</p>

<p>Here is the code which I use:</p>

<pre><code>var salt = ""FbSnXHPo12gb"";
var password = ""geheim"";
var interactions = 12000;


using (var hmac = new HMACSHA256())
{
    var df = new Pbkdf2(hmac, password, salt, interactions);
    Console.WriteLine(BitConverter.ToString(df.GetBytes(32)));
    Console.WriteLine(String.ByteArrayToString(df.GetBytes(32)));
    Console.WriteLine(UTF8Encoding.UTF8.GetString(df.GetBytes(32)));
    Console.WriteLine(Convert.ToBase64String(df.GetBytes(32)));
}

//hash I should get: 
//pbkdf2_sha256$12000$FbSnXHPo12gb$LEpQrzPJXMI0m3tQuIE5mknqCv1GWgT5X2rWyLHN0Xk=

//hash I get:
//Rc8oMeSrbWyIJ+aXvGegFowKcIlwk8eIRyxXUf/a+t0=
</code></pre>
","<p>I have a fork of <a href=""https://github.com/Jither/PBKDF2"" rel=""nofollow"">Jither's PBKDF2 C# DeriveBytes code</a> at <a href=""https://github.com/Anti-weakpasswords/PBKDF2-CSharp-DeriveBytes-custom-A"" rel=""nofollow"">my Github repository</a>, including a PBKDF2-HMAC-SHA-256 variant, a large set of test vectors, and an interface that both generates hashes and can check the results, if that example helps you.</p>
","760","<c#><security><sha256><password-encryption><pbkdf2>","1","0","2","2015-01-17 04:28:41","26998465","1","","3651723","","2014-11-18 07:44:14","2014-11-17 08:40:22",""
"46087466","What ""digest"" argument should I provide?","<p>I used to have the following code in the login and register function:</p>

<pre><code>var crypto = require('crypto');
... ...
this.hash = crypto.pbkdf2Sync(password, this.salt, 1000, 64).toString('hex');
</code></pre>

<p>And I have already registered users.</p>

<p>Yesterday, I updated npm, and now it shows an error:</p>

<pre><code>events.js:182
      throw er; // Unhandled 'error' event
      ^

TypeError: The ""digest"" argument is required and must not be undefined
    at pbkdf2 (crypto.js:635:11)
    at Object.exports.pbkdf2Sync (crypto.js:628:10)
    at model.UserSchema.methods.validPassword (/opt/myapp/models/Users.js:35:23)
    at /opt/myapp/config/passport.js:16:23
    at model.Query.&lt;anonymous&gt; (/opt/myapp/node_modules/mongoose/lib/model.js:3745:16)
    at /opt/myapp/node_modules/kareem/index.js:277:21
    at /opt/myapp/node_modules/kareem/index.js:131:16
    at _combinedTickCallback (internal/process/next_tick.js:131:7)
    at process._tickCallback (internal/process/next_tick.js:180:9)
</code></pre>

<p>So does anyone know what <code>digest</code> argument I should provide to <code>crypto.pbkdf2Sync</code>? I hope the registered user/password are still valid.</p>
","<p>From node.js documentation for <a href=""https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest"" rel=""nofollow noreferrer""><code>crypto.pbkdf2Sync</code></a>:</p>

<pre><code>const crypto = require('crypto');
const key = crypto.pbkdf2Sync('secret', 'salt', 100000, 512, 'sha512');
console.log(key.toString('hex'));  // '3745e48...aa39b34'
</code></pre>

<p>You also need to specify the encoding algorithm <code>sha512</code> this is the <code>digest parameter</code> see the last argument in the documentation.</p>
","752","<node.js><npm><pbkdf2>","1","1","1","2017-09-07 05:15:32","","0","","","","","2017-09-07 03:45:10",""
"43636332","Will this CryptoJS AES encryption code produce secure output?","<p>I believe that because the key passed to AES.encrypt is a string, the function will automatically generate an IV. So is the code below producing a well secured encrypted version of string_to_encrypt?</p>

<pre><code>pass  = document.getElementById('pass').value; // user entered pwrd    salt  = 'some system determined salt';
its   = 9000 + getKeyIterationModifier(pass); // iterations depend on pass
key   = CryptoJS.PBKDF2(pass, salt, { keySize: 512/32, iterations: its });

encrypted = CryptoJS.AES.encrypt(string_to_encrypt, key.toString());
</code></pre>

<p>Or should I be adding 'mode' and 'padding' values to harden it further? If so, what are the current industry standard values?</p>

<p>In other words, should I ideally be using something <em>like</em> the following (perhaps without the iv if that's done automatically) and if so what's ideal:</p>

<pre><code>key = CryptoJS.enc.Base64.parse(key);
encrypted = CryptoJS.AES.encrypt(string_to_encrypt, key, {
    iv: iv, 
    mode: CryptoJS.mode.CBC, 
    padding: CryptoJS.pad.Pkcs7
});
</code></pre>
","<p><code>CryptoJS.AES.encrypt</code> uses EVP_BytesToKey to expand the passed ""key"" (considered a password) to an actual AES-256 key and IV if the ""key"" was a string. It uses a random salt for that, so the ciphertext is randomized. In your second snippet, you need to handle the IV yourself.</p>

<p>What you're essentially asking is whether EVP_BytesToKey is a secure password expansion function. That's not something that can be easily answered. The fact that it uses MD5 means that the first snippet has <em>at least</em> the security of AES-128 which should be good.</p>

<p>The other issue is that the IV should be unpredictable (read: random) for absolutely every encryption. Don't use a static IV, because that makes the cipher deterministic and therefore not semantically secure. An attacker who observes ciphertexts can determine when the same message prefix was sent before. This suggestion is a given in the first snippet, but you would have to work for that realization in the second snippet which might introduce other issues.</p>

<p><strong>If you're not comfortable with CryptoJS and cryptography, go with the first snippet. Otherwise, try to improve the second snippet.</strong></p>

<hr>

<h3>Security considerations:</h3>

<p>If you're using only symmetric encryption in the browser you need the exact same key at the server and the client. If you send the encryption key from the server to the client or the other way around you need to encrypt your symmetric encryption key. The easiest way to do this would be to use TLS. If you use TLS, then the data as well as key are encrypted, so you don't need to encrypt it yourself. This doesn't provide any security, just a little bit of obfuscation. You should read: <a href=""https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/august/javascript-cryptography-considered-harmful/"" rel=""nofollow noreferrer"">https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/august/javascript-cryptography-considered-harmful/</a></p>

<p>You should think about integrating authenticated encryption through an authenticated mode like GCM or EAX, or through the use of an encrypt-then-MAC scheme with a strong MAC like HMAC-SHA256.</p>
","744","<javascript><aes><padding><cryptojs><pbkdf2>","1","1","1","2017-04-26 22:32:08","43640656","6","","1163264","","2017-04-26 22:32:08","2017-04-26 13:57:25",""
"16958328","PBKDF2 security in Javascript","<p>In PBKDF2 the salt should be unique for each passwort, so two users using the same password are getting two different hashes.</p>

<p>My Idea for the salt is a SHA1-hash of the username and the password, so it will be unique for each user.</p>

<p>Actually I must generate the PBKDF2 hash in a JavaScript environment. Is it save to show how the salt is generated, because JavaScript sources are plain text?</p>
","<p>Using the username as a salt is mostly satisfying, but does not protect against several attack scenarios. As for example, the password can be compared in the databases of two websites that use the same algorithm. Furthermore, rainbow tables can be generated in advance, hence reducing the cracking time after compromise.
For this exact reason, the salt should be generated using a cryptographic PRNG. The idea of having the source code of the random source visible to attackers isn't a problem in itself, if it is non-predictable. See <a href=""https://stackoverflow.com/questions/4083204/secure-random-numbers-in-javascript"">this question</a> for how to generate it using javascript.</p>
","740","<javascript><password-encryption><pbkdf2>","0","0","2","2013-07-15 18:58:10","","0","2","","","","2013-06-06 09:22:23",""
"16958328","PBKDF2 security in Javascript","<p>In PBKDF2 the salt should be unique for each passwort, so two users using the same password are getting two different hashes.</p>

<p>My Idea for the salt is a SHA1-hash of the username and the password, so it will be unique for each user.</p>

<p>Actually I must generate the PBKDF2 hash in a JavaScript environment. Is it save to show how the salt is generated, because JavaScript sources are plain text?</p>
","<p>What is wrong with simply using a random salt?  Other than your method doesn't require the salt to be stored with hashed password, I can't think of any advantages.</p>

<p>A hash of the username and password concatenated together should be okay.  Since the password is secret the hash of the username and password will be unpredictable.  However, as others have mentioned, there could be a security issue if there are two websites using the same algorithm, and someone using those websites uses the same credentials for both (i.e. looking at their hashed passwords we can tell they use the same password for each website).  Adding the domain of your site should get around this.  For example (+ is concatenation):</p>

<p><code>
salt = hash(domain + username + password)
</code></p>

<p>All of that being said, I would strongly recommend using a cryptographic random number generator to generate your salt since it's the standard practice for salt generation.</p>
","740","<javascript><password-encryption><pbkdf2>","0","0","2","2013-07-15 18:58:10","","0","2","","","","2013-06-06 09:22:23",""
"25733528","What kind of data does crypto-js function return?","<p>I am using crypto-js to encrypt a password with PBKDF2 to pass a key to AES encryption function.</p>

<pre><code>var PBKDF2hash = crypto.PBKDF2(req.body.password, salt, { keySize: 256/32 });
</code></pre>

<p>When I use crypto-js hash functions, <code>console.log(PBKDF2hash)</code> returns this weird data in console:</p>

<pre><code>    { init: [Function],
  '$super': 
   { init: [Function],
     toString: [Function],
     concat: [Function],
     clamp: [Function],
     clone: [Function],
     random: [Function],
     '$super': 
      { extend: [Function],
        create: [Function],
        init: [Function],
        mixIn: [Function],
        clone: [Function] } },
  words: 
   [ 162340080,
     -1329278032,
     -946859974,
     1516294488,
     -1059418968,
     60522350,
     440072457,
     -2049460689,
     -571434654,
     1087160278 ],
  sigBytes: 32 }
</code></pre>

<p>What kind of data is this? Isn't function supposed to return a usual hashed password in form of a string? </p>
","<p>From <a href=""https://code.google.com/p/crypto-js/#The_Hasher_Output"" rel=""nofollow"">the documentation</a>:</p>

<blockquote>
  <p>The hash you get back isn't a string yet. It's a WordArray object. When you use a WordArray object in a string context, it's automatically converted to a hex string.</p>
</blockquote>

<p>and</p>

<blockquote>
  <p>You can convert a WordArray object to other formats by explicitly calling the toString method and passing an encoder.</p>
</blockquote>
","739","<javascript><node.js><encryption><cryptojs><pbkdf2>","2","4","1","2014-09-08 21:44:03","25733593","0","","","","","2014-09-08 21:39:39",""
"46821018","C# RFC2898DeriveBytes is working but Python PBKDF2 generated key and IV are not working with Python AES Decryption","<p>I have a problem in hand to decrypt the AES encrypted cipher-text which specifications are following
The cipher-text consists of:
· 256 bytes of RFC2898-derived salt, followed by a message that was AES-encrypted using password, 'password' and derived IV.
Sample Message is ""This is my secret string, lorem ipsum"" and password is ""password"" which is encrypted using C# code
This message is decrypting fine with following c# code</p>

<pre><code>private static readonly int SALT_SIZE = 256;
public static void Decrytor(){
// Encrypted Message
           var cipherText = ""i+EKwmlAF0VYh4GwDd+bGf3+yreYsPJW2Oq/w9FXjsp7RI3VqRiqtnqiAD4n6U0JJSTe2ct4B7lgrG+dHxeGcXYEYIERXvU0xnUdH+z3mRwmgYOqCU9HRUKy/z3GKISTm8qH030KTYm3YMBjnKpU8gaRcoDPP/nCiB3o5fPdyspgJgT/qt5BuvwYq7n0qg6ez/Wi4447gq/qHwG3wuuYLSBUCfmIkgGaO1KXqv3SsR8EAhrmMBmPDJfjc3sydNqs5B8J9/JvZFEZULTb8rLQZKQvgHhH9/53Bzs3zmoq0RFbgSueUbyeWb9rLAzYieTz8Yj0srG4GtwPrTPoItc6/hvx5stZ6pX8tgyk9Y3baT0JFMtGgxve7yduy8idTCQdAwRc5NOo4+CBk7P/sIw6+Q=="";
            var key = ""password"";
            // Extract the salt from our cipherText
            var allTheBytes = Convert.FromBase64String(cipherText);
            var saltBytes = allTheBytes.Take(SALT_SIZE).ToArray();
            var cipherTextBytes = allTheBytes.Skip(SALT_SIZE).Take(allTheBytes.Length - SALT_SIZE).ToArray();

            var keyDerivationFunction = new Rfc2898DeriveBytes(key, saltBytes);
            // Derive the previous IV from the Key and Salt
            var keyBytes = keyDerivationFunction.GetBytes(32);
            var ivBytes = keyDerivationFunction.GetBytes(16);

            // Create a decrytor to perform the stream transform.
            // Create the streams used for decryption.
            // The default Cipher Mode is CBC and the Padding is PKCS7 which are both good
            var aesManaged = new AesManaged();
            var decryptor = aesManaged.CreateDecryptor(keyBytes, ivBytes);
            var memoryStream = new MemoryStream(cipherTextBytes);
            var cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read);
            var streamReader = new StreamReader(cryptoStream);

            // Return the decrypted bytes from the decrypting stream.
            Console.WriteLine(""\n{0}\n"", streamReader.ReadToEnd());
        }
</code></pre>

<p>Output is: <strong>""This is my secret string, lorem ipsum""</strong></p>

<p>but when I try to decrypt the message by following Python2.7 equivalent implementation, it is not decrypting the first few characters correctly</p>

<pre><code>import base64
from Crypto.Cipher import AES
from Crypto.Protocol import KDF

def p_decrypt( self, text ):
    text_dec = base64.b64decode(text)
    salt = text_dec[:256]
    enc_txt = text_dec[256:]
    key_bytes = KDF.PBKDF2(self.key, salt, dkLen=32)
    iv = KDF.PBKDF2(self.key, salt)
    cipher = AES.new(key_bytes, AES.MODE_CBC, iv)
    return cipher.decrypt(enc_txt)
</code></pre>

<p><strong>Output is: ""�增��""j�����""t string, lorem ipsum""</strong></p>

<p><strong>Expected output: ""This is my secret string, lorem ipsum""</strong></p>

<p>I tried to find the problem, when I used the keyBytes and IV generated by the C# RFC2898DeriveBytes method that also works fine python code but python code is not decrypting the whole message correctly using the PBKDF2 
generated keyBytes and IV.</p>

<p><em>Both C# RFC2898DeriveBytes and python PBKDF2 are generating keyBytes using HMACSHA1 hashing algo but C# RFC2898DeriveBytes method is generated different keyBytes and IV whereas Python PBKDF2 is returning first 16 bytes of generated keyBytes for IV call</em>.</p>

<p>Kindly give me some helpful guidelines on this.</p>

<p>Thanks,
M Umer </p>
","<p><code>Rfc2898DeriveBytes</code> is a streaming-response object, so concatenating two successive calls is the same as doing one call with both lengths added together.</p>

<pre><code>var pbkdf2WithTwoCalls = new Rfc2898DeriveBytes(...)
var pbkdf2WithOneCall = new Rfc2898DeriveBytes(sameParametersAsAbove);

byte[] twoCallA = pbkdf2WithTwoCalls.GetBytes(32);
byte[] twoCallB = pbkdf2WithTwoCalls.GetBytes(16);

byte[] oneCall = pbkdf2WithOneCall.GetBytes(32 + 16);

if (!oneCall.SequenceEquals(twoCallA.Concat(twoCallB))
    throw new TheUniverseMakesNoSenseException();
</code></pre>

<p>So your solution in Python would be to make one 48-byte call to PBKDF2, then split it into the 32-byte AES key and the 16-byte IV.</p>

<p>Your decryption response indicates that the key is correct, but the IV is not.</p>
","730","<c#><python><pycrypto><pbkdf2><python-cryptography>","1","1","1","2017-10-19 14:53:56","46832803","2","1","","","","2017-10-19 00:04:22",""
"26332088","How to use PBKDF2 password hashing in an embedded Linux device","<p>I have a need to generate password hashes in a Windows application and, at a later time, download them to a Linux device to be inserted into the shadow password file. For marketing reasons using PBKDF2 is attractive at the Windows end as it provides a level of FIPS certification, but I do not know how/if we can use a PBKDF2 hash in the Linux shadow password file.</p>

<p>An odd requirement I know, but the Windows app is used to off-line configure the RBAC.</p>

<p>I know next to nothing about Linux, but my understanding is that we use Busybox (which includes crypt) and PBKDF2 is not supported.</p>

<p>Can PBKDF2 support be added? Pointers as to how?</p>
","","701","<linux><crypt><busybox><pbkdf2><password-hash>","3","","0","2014-10-13 02:23:57","","0","","","","","2014-10-13 02:23:57",""
"30515662","How can I generate the same secure hash in Java and Ruby using PBKDF2","<p>I am porting a web application from Ruby to Java and would like to allow the users to log in without resetting their passwords. Here is the Ruby code that generates the hash using the pbkdf2 gem:</p>

<pre><code>PBKDF2.new { |p|
  p.password = password
  p.salt = salt
  p.iterations = 10000
}.hex_string
</code></pre>

<p>Reading the source for the Ruby gem, it is using OpenSSL::Digest.new(""sha256"") as the default hashing function and generates a value of 32 bytes, which converts to a 64 character string using 'unpack(""H*"")'.</p>

<p>So, in Java I tried the following:</p>

<pre><code>public String generatePasswordHash(String password, String salt) throws NoSuchAlgorithmException, InvalidKeySpecException
{
    char[] chars = password.toCharArray();
    byte[] saltBytes =salt.getBytes();

    PBEKeySpec spec = new PBEKeySpec(chars, saltBytes, 1000, 256);
    SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
    byte[] hash = skf.generateSecret(spec).getEncoded();
    BigInteger bi = new BigInteger(1, hash);
    return bi.toString(16);
}
</code></pre>

<p>Testing both pieces of code with password = ""apassword"" and salt = ""somesalt"", I get the following results.</p>

<pre><code>Ruby: 3fa1eb7544ca49b1f371eb17d24bf0010c433fa263a84aff7df446741371706b

Java: 77a7c0b1ea9760d0b1ef02e7a2633c40ccd7848ee4fa822ec71b5794e476f354
</code></pre>

<p>I tested the Ruby and Java hex string encoding and they work the same so the problem looks to be in the hashing algorithm or perhaps the way the Strings are converted to byte arrays.</p>
","<p>The problem is in the number of iterations. If you change it to 10,000 in Java instead of the 1,000 you are using, it will give you an identical result to the one you got in Ruby:</p>

<pre><code>    PBEKeySpec spec = new PBEKeySpec(chars, saltBytes, 10000, 256);
</code></pre>

<p>Additional notes:</p>

<p>It's always best to ensure that bytes are taken from a string according to a known character set. Without the character set, it uses whatever the default character set is, and it may cause surprises.</p>

<p>Also, it's best not to rely on <code>BigInteger.toString(16)</code>, because if the first few bytes are 0, it will return a string that is shorter than 64 characters. Use <code>String.format()</code> instead:</p>

<pre><code>public static String generatePasswordHash(String password, String salt) throws NoSuchAlgorithmException, InvalidKeySpecException
{
    char[] chars = password.toCharArray();
    byte[] saltBytes =salt.getBytes(StandardCharsets.US_ASCII);

    PBEKeySpec spec = new PBEKeySpec(chars, saltBytes, 10000, 256);
    SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
    byte[] hash = skf.generateSecret(spec).getEncoded();
    BigInteger bi = new BigInteger(1, hash);
    return String.format(""%064x"", bi);
}
</code></pre>

<p>(I assumed the <code>salt</code> is in plain ASCII text. You can change the character set, but keep in mind to use the same character set Ruby uses).</p>
","694","<java><ruby><hash><pbkdf2>","4","5","1","2015-05-28 20:02:47","30516080","2","","","","","2015-05-28 19:36:08",""
"13695359","Security with PBKDF2 in PHP","<p>So I am storing some sensitive data in the database (a few passwords amongst other things), and I am currently using this:
<a href=""https://github.com/P54l0m5h1k/PBKDF2-implementation-PHP"" rel=""nofollow"">https://github.com/P54l0m5h1k/PBKDF2-implementation-PHP</a></p>

<p>In short, it allows me to encrypt and decrypt data with the use of a key.</p>

<p>Let's say for example, that the key used is not stored on the same server as the sensitive data. If a hacker were to somehow gain access to my tables and see the encrypted data, would it be possible at all to decrypt any of it WITHOUT the key?</p>
","<p><code>PBKDF2</code> is not an encryption algorithm it stands for <strong>Password-Based Key Derivation Function 2</strong>. So it only allows you to generate secure key based on password. So it depends on ecnryption algorithm you are using. It can be <a href=""http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""nofollow"">AES</a> or it can be <a href=""http://en.wikipedia.org/wiki/3DES"" rel=""nofollow"">3DES</a>. And if you are using any of publicly known and approved encryption algorithms then those are secure against this kind of attacks. That is the point of encryption, attacker would need a key  or password to decipher it. </p>
","677","<php><security><encryption><pbkdf2>","0","3","1","2012-12-04 07:46:39","","0","","","","","2012-12-04 02:53:07",""
"47162200","PBKDF2 function in PostgreSQL","<p>Not a question, but I thought I'd share...</p>

<p>Not able to find it natively, and based on <a href=""https://defuse.ca/php-pbkdf2.htm"" rel=""nofollow noreferrer"">PHP code</a> found on the 'net, I came up with this PBKDF2 function for PostgreSQL. Enjoy.</p>

<pre><code>create or replace function PBKDF2 
  (salt bytea, pw text, count integer, desired_length integer, algorithm text)
  returns bytea
  immutable
  language plpgsql
as $$
declare 
  hash_length integer;
  block_count integer;
  output bytea;
  the_last bytea;
  xorsum bytea;
  i_as_int32 bytea;
  i integer;
  j integer;
  k integer;
begin
  algorithm := lower(algorithm);
  case algorithm
  when 'md5' then
    hash_length := 16;
  when 'sha1' then
    hash_length = 20;
  when 'sha256' then
    hash_length = 32;
  when 'sha512' then
    hash_length = 64;
  else
    raise exception 'Unknown algorithm ""%""', algorithm;
  end case;

  block_count := ceil(desired_length::real / hash_length::real);

  for i in 1 .. block_count loop    
    i_as_int32 := E'\\000\\000\\000'::bytea || chr(i)::bytea;
    i_as_int32 := substring(i_as_int32, length(i_as_int32) - 3);

    the_last := salt::bytea || i_as_int32;

    xorsum := HMAC(the_last, pw::bytea, algorithm);
    the_last := xorsum;

    for j in 2 .. count loop
      the_last := HMAC(the_last, pw::bytea, algorithm);

      --
      -- xor the two
      --
      for k in 1 .. length(xorsum) loop
        xorsum := set_byte(xorsum, k - 1, get_byte(xorsum, k - 1) # get_byte(the_last, k - 1));
      end loop;
    end loop;

    if output is null then
      output := xorsum;
    else
      output := output || xorsum;
    end if;
  end loop;

  return substring(output from 1 for desired_length);
end $$;
</code></pre>

<p>I've tested against other implementations without deviation, but be sure to test it yourself.</p>

<p>Improvements and suggestions are welcomed.</p>
","","667","<postgresql><pbkdf2>","3","","0","2017-11-07 16:20:49","","3","1","8901150","","2017-11-07 16:20:49","2017-11-07 15:56:17",""
"30300928","Failed to create Javascript analog of Java method for password hashing using SHA-256 and salt","<p>I've been strugling for a while now by trying to complete next goal : 
I have a ""Reset password"" page that supposed to send new password to the server. I would like to hash it with salt, so I could save it in DB eventually. On Server side I have next methods that creates password hash : </p>

<pre class=""lang-java prettyprint-override""><code>public static String makeHash(String password, String salt) {
    try {
        MessageDigest md = MessageDigest.getInstance(""SHA-256"");
        md.update(password.getBytes(""UTF-8""));

        byte byteData[] = md.digest(makeHash(salt.toLowerCase()));

        return Base64.getEncoder().encodeToString(byteData);
    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
        log.error(""Unable to make hash for pass. No hashing."", e);
    }

    return password;
}

private static byte[] makeHash(String val) throws NoSuchAlgorithmException, UnsupportedEncodingException {
    return MessageDigest.getInstance(""SHA-256"").digest(val.getBytes(""UTF-8""));
}
</code></pre>

<p>I tried several Javascript libraries - crypto, crypto-js, SJCL , but couldn't manage to create same password as Java methods generates. For example, last working try out was : </p>

<pre class=""lang-js prettyprint-override""><code>var crypto = require('crypto');
crypto.pbkdf2('123', 'test@gmail.com', 1000, 60, 'sha256', function(err, key) {
  if (err)
    throw err;
  console.log(key.toString('Base64'));  // 'c5e478d...1469e50'
});
</code></pre>

<p>And it generated me this hash - <code>Qr2lzotlRWj7BeJeFooMRj64auMPTb3PRhwLmfNcl4DCVAlFFibgOqZiyExZNO5i/icAUYoMjy73jSTd</code>, while Java gives me - <code>/pyQf3JCj5XoczfsYJ4LUb+y0DONGMl/AFzLiBTo8LA=</code>. </p>

<p>I cannot change backend, since it running already for some time, so I was hoping that maybe someone could help me out with this. </p>
","<p>You have to use the same algorithm on both sides. In Java you're using simply SHA-256 and in node you're using PBKDF2 with SHA-256. </p>

<p>Node.js' crypto module provides the <a href=""https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm"" rel=""nofollow""><code>createHash(algorithm)</code></a> function. Where you can specify SHA-256 directly. PBKDF2 is an algorithm that only uses different hashing functions under the hood. </p>

<p>If you want hash passwords, then it is much safer to use PBKDF2 with a lot of iterations (> 86,000) and a random salt that you store alongside the password hash.</p>

<p>Java has support for PBKDF2 in its standard library.</p>

<p>If you really want to use SHA-256 directly and I <em>strongly advise against it</em>, you can use the following code:</p>

<pre><code>var crypto = require('crypto');
var key = ""123"";
var salt = ""test@gmail.com"";

key = crypto.createHash('sha256')
        .update(key, ""utf8"")
        .update(makeHash(salt))
        .digest(""base64"");

console.log(key);

function makeHash(val) {
    return crypto.createHash('sha256').update(val, ""utf8"").digest();
}
</code></pre>

<p>Output: </p>

<pre><code>/pyQf3JCj5XoczfsYJ4LUb+y0DONGMl/AFzLiBTo8LA=
</code></pre>

<p>Note that <code>Hash.digest()</code> takes an optional output encoding and not additional data.</p>
","663","<java><javascript><node.js><salt><pbkdf2>","0","3","1","2015-05-18 11:35:10","30301119","0","3","1816580","","2015-05-18 10:38:13","2015-05-18 10:35:25",""
"46971788","Java Cipher - PBE thread-safety issue","<p>It seems that I have a thread-safety issue with Cipher and/or PBEKeySpec.</p>

<ul>
<li>JDK : 1.8.0_102, 1.8.0_151 and 9.0.1+11</li>
<li>PBKDF2 algorithm: PBKDF2WithHmacSHA1</li>
<li>Cipher algorithm: AES/CFB/NoPadding</li>
<li>Key algorithm: AES</li>
</ul>

<p>I know these classes aren't tread-safe if we use the same instances, but that's not the case, I'm getting a new instance at each decode.
But even that, sometimes the decode fails, there is no exception, just an unexpected decoded value.</p>

<p>I've been able to reproduce the problem:</p>

<pre class=""lang-java prettyprint-override""><code>@Test
public void shouldBeThreadSafe() {

    final byte[] encoded = {
        27, 26, 18, 88, 84, -87, -40, -91, 70, -74, 87, -21, -124,
        -114, -44, -24, 7, -7, 104, -26, 45, 96, 119, 45, -74, 51
    };
    final String expected = ""dummy data"";
    final Charset charset = StandardCharsets.UTF_8;

    final String salt = ""e47312da-bc71-4bde-8183-5e25db6f0987"";
    final String passphrase = ""dummy-passphrase"";

    // Crypto configuration
    final int iterationCount = 10;
    final int keyStrength = 128;
    final String pbkdf2Algorithm = ""PBKDF2WithHmacSHA1"";
    final String cipherAlgorithm = ""AES/CFB/NoPadding"";
    final String keyAlgorithm = ""AES"";

    // Counters
    final AtomicInteger succeedCount = new AtomicInteger(0);
    final AtomicInteger failedCount = new AtomicInteger(0);

    // Test
    System.setProperty(""java.util.concurrent.ForkJoinPool.common.parallelism"", ""10"");
    IntStream.range(0, 1000000).parallel().forEach(i -&gt; {
        try {

            SecretKeyFactory factory = SecretKeyFactory.getInstance(pbkdf2Algorithm);
            KeySpec spec = new PBEKeySpec(passphrase.toCharArray(), salt.getBytes(charset), iterationCount, keyStrength);
            SecretKey tmp = factory.generateSecret(spec);
            SecretKeySpec key = new SecretKeySpec(tmp.getEncoded(), keyAlgorithm);
            Cipher cipher = Cipher.getInstance(cipherAlgorithm);


            int blockSize = cipher.getBlockSize();
            IvParameterSpec iv = new IvParameterSpec(Arrays.copyOf(encoded, blockSize));
            byte[] dataToDecrypt = Arrays.copyOfRange(encoded, blockSize, encoded.length);
            cipher.init(Cipher.DECRYPT_MODE, key, iv);
            byte[] utf8 = cipher.doFinal(dataToDecrypt);

            String decoded = new String(utf8, charset);
            if (!expected.equals(decoded)) {
                System.out.println(""Try #"" + i + "" | Unexpected decoded value: ["" + decoded + ""]"");
                failedCount.incrementAndGet();
            } else {
                succeedCount.incrementAndGet();
            }
        } catch (Exception e) {
            System.out.println(""Try #"" + i + "" | Decode failed"");
            e.printStackTrace();
            failedCount.incrementAndGet();
        }
    });

    System.out.println(failedCount.get() + "" of "" + (succeedCount.get() + failedCount.get()) + "" decodes failed"");
}
</code></pre>

<p>Output:</p>

<pre><code>Try #656684 | Unexpected decoded value: [�jE    |S���]
Try  #33896 | Unexpected decoded value: [�jE    |S���]

2 of 1000000 decodes failed
</code></pre>

<p>I don't understand how this code can fail, is there a bug in the Cipher and/or PBEKeySpec classes? Or have I missed something in my test?</p>

<p>Any help would be very welcomed.</p>

<hr>

<h3>UPDATE</h3>

<p>OpenJDK issue: <a href=""https://bugs.openjdk.java.net/browse/JDK-8191177"" rel=""nofollow noreferrer"">https://bugs.openjdk.java.net/browse/JDK-8191177</a></p>
","<p>I tend to believe this is most likely a manifestation of a JVM bug related to finalization and arrays. Below is a more generic test case. Run with <code>java -Xmx10m -cp . UnexpectedArrayContents</code>, the smaller the heap the more likely to fail. Not sure if calls to <code>clone()</code> really matter, just tried to be close to the original snippet.</p>

<pre><code>// Omitting package and imports for brevity
// ...
public class UnexpectedArrayContents
{
    void demonstrate()
    {
        IntStream.range(0, 20000000).parallel().forEach(i -&gt; {
            String expected = randomAlphaNumeric(10);
            byte[] expectedBytes = expected.getBytes(StandardCharsets.UTF_8);
            ArrayHolder holder = new ArrayHolder(expectedBytes);
            byte[] actualBytes = holder.getBytes();
            String actual = new String(actualBytes, StandardCharsets.UTF_8);
            if (!Objects.equals(expected, actual))
            {
                System.err.println(""attempt#"" + i + "" failed; expected='"" + expected + ""' actual='"" + actual + ""'"");
                System.err.println(""actual bytes: "" + DatatypeConverter.printHexBinary(actualBytes));
            }
        });
    }

    static class ArrayHolder
    {
        private byte[] _bytes;
        ArrayHolder(final byte[] bytes)
        {
            _bytes = bytes.clone();
        }

        byte[] getBytes()
        {
            return _bytes.clone();
        }

        @Override
        protected void finalize()
            throws Throwable
        {
            if (_bytes != null)
            {
                Arrays.fill(_bytes, (byte) 'z');
                _bytes = null;
            }
            super.finalize();
        }
    }

    private static final String ALPHA_NUMERIC_STRING = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"";
    private static final Random RND = new Random();

    static String randomAlphaNumeric(int count) {
        final StringBuilder sb = new StringBuilder();
        while (count-- != 0) {
            int character = RND.nextInt(ALPHA_NUMERIC_STRING.length());
            sb.append(ALPHA_NUMERIC_STRING.charAt(character));
        }
        return sb.toString();
    }

    public static void main(String[] args)
        throws Exception
    {
        new UnexpectedArrayContents().demonstrate();
    }
}
</code></pre>

<p><strong>Update</strong>:</p>

<p>Now the bug is tracked as <a href=""http://bugs.java.com/view_bug.do?bug_id=8191002"" rel=""nofollow noreferrer"">JDK-8191002</a>. Affected versions: 8,9,10.</p>
","639","<java><encryption><thread-safety><aes><pbkdf2>","5","3","2","2018-02-15 12:57:46","48550951","8","1","696291","","2017-11-15 17:29:37","2017-10-27 09:27:55",""
"46971788","Java Cipher - PBE thread-safety issue","<p>It seems that I have a thread-safety issue with Cipher and/or PBEKeySpec.</p>

<ul>
<li>JDK : 1.8.0_102, 1.8.0_151 and 9.0.1+11</li>
<li>PBKDF2 algorithm: PBKDF2WithHmacSHA1</li>
<li>Cipher algorithm: AES/CFB/NoPadding</li>
<li>Key algorithm: AES</li>
</ul>

<p>I know these classes aren't tread-safe if we use the same instances, but that's not the case, I'm getting a new instance at each decode.
But even that, sometimes the decode fails, there is no exception, just an unexpected decoded value.</p>

<p>I've been able to reproduce the problem:</p>

<pre class=""lang-java prettyprint-override""><code>@Test
public void shouldBeThreadSafe() {

    final byte[] encoded = {
        27, 26, 18, 88, 84, -87, -40, -91, 70, -74, 87, -21, -124,
        -114, -44, -24, 7, -7, 104, -26, 45, 96, 119, 45, -74, 51
    };
    final String expected = ""dummy data"";
    final Charset charset = StandardCharsets.UTF_8;

    final String salt = ""e47312da-bc71-4bde-8183-5e25db6f0987"";
    final String passphrase = ""dummy-passphrase"";

    // Crypto configuration
    final int iterationCount = 10;
    final int keyStrength = 128;
    final String pbkdf2Algorithm = ""PBKDF2WithHmacSHA1"";
    final String cipherAlgorithm = ""AES/CFB/NoPadding"";
    final String keyAlgorithm = ""AES"";

    // Counters
    final AtomicInteger succeedCount = new AtomicInteger(0);
    final AtomicInteger failedCount = new AtomicInteger(0);

    // Test
    System.setProperty(""java.util.concurrent.ForkJoinPool.common.parallelism"", ""10"");
    IntStream.range(0, 1000000).parallel().forEach(i -&gt; {
        try {

            SecretKeyFactory factory = SecretKeyFactory.getInstance(pbkdf2Algorithm);
            KeySpec spec = new PBEKeySpec(passphrase.toCharArray(), salt.getBytes(charset), iterationCount, keyStrength);
            SecretKey tmp = factory.generateSecret(spec);
            SecretKeySpec key = new SecretKeySpec(tmp.getEncoded(), keyAlgorithm);
            Cipher cipher = Cipher.getInstance(cipherAlgorithm);


            int blockSize = cipher.getBlockSize();
            IvParameterSpec iv = new IvParameterSpec(Arrays.copyOf(encoded, blockSize));
            byte[] dataToDecrypt = Arrays.copyOfRange(encoded, blockSize, encoded.length);
            cipher.init(Cipher.DECRYPT_MODE, key, iv);
            byte[] utf8 = cipher.doFinal(dataToDecrypt);

            String decoded = new String(utf8, charset);
            if (!expected.equals(decoded)) {
                System.out.println(""Try #"" + i + "" | Unexpected decoded value: ["" + decoded + ""]"");
                failedCount.incrementAndGet();
            } else {
                succeedCount.incrementAndGet();
            }
        } catch (Exception e) {
            System.out.println(""Try #"" + i + "" | Decode failed"");
            e.printStackTrace();
            failedCount.incrementAndGet();
        }
    });

    System.out.println(failedCount.get() + "" of "" + (succeedCount.get() + failedCount.get()) + "" decodes failed"");
}
</code></pre>

<p>Output:</p>

<pre><code>Try #656684 | Unexpected decoded value: [�jE    |S���]
Try  #33896 | Unexpected decoded value: [�jE    |S���]

2 of 1000000 decodes failed
</code></pre>

<p>I don't understand how this code can fail, is there a bug in the Cipher and/or PBEKeySpec classes? Or have I missed something in my test?</p>

<p>Any help would be very welcomed.</p>

<hr>

<h3>UPDATE</h3>

<p>OpenJDK issue: <a href=""https://bugs.openjdk.java.net/browse/JDK-8191177"" rel=""nofollow noreferrer"">https://bugs.openjdk.java.net/browse/JDK-8191177</a></p>
","<p>It was indeed a JDK bug in the <code>PBKDF2KeyImpl.getEncoded()</code> method.</p>

<p>More details in the bug report <a href=""https://bugs.openjdk.java.net/browse/JDK-8191177"" rel=""nofollow noreferrer"">https://bugs.openjdk.java.net/browse/JDK-8191177</a> and the related issue <a href=""https://bugs.openjdk.java.net/browse/JDK-8191002"" rel=""nofollow noreferrer"">https://bugs.openjdk.java.net/browse/JDK-8191002</a>.</p>

<p>It has been fixed and shipped within the Java January 2018 CPU release.</p>

<p>UPDATE: This has been fixed for JDK 9 and later by the use of a reachabilityFence().</p>

<p>Because of the lack of this fence in the ealier version of JDK you should use a workaround: « <a href=""https://bugs.openjdk.java.net/browse/JDK-8055183"" rel=""nofollow noreferrer"">as first discovered by Hans Boehm, it just so happens that one way to implement the equivalent of reachabilityFence(x) even now is ""synchronized(x) {}""</a> »</p>

<p>In our case, the workaround is:</p>

<pre class=""lang-java prettyprint-override""><code>SecretKeyFactory factory = SecretKeyFactory.getInstance(pbkdf2Algorithm);
KeySpec spec = new PBEKeySpec(passphrase.toCharArray(), salt.getBytes(charset), iterationCount, keyStrength);
SecretKey secret = factory.generateSecret(spec);
SecretKeySpec key;
//noinspection SynchronizationOnLocalVariableOrMethodParameter
synchronized(secret) {
  key = new SecretKeySpec(secret.getEncoded(), keyAlgorithm);
}
</code></pre>
","639","<java><encryption><thread-safety><aes><pbkdf2>","5","3","2","2018-02-15 12:57:46","48550951","8","1","696291","","2017-11-15 17:29:37","2017-10-27 09:27:55",""
"21890441","Constant time password digest compares using Crypto++","<p>I'm writing a program which hashes passwords with the <a href=""http://cryptopp.com/"" rel=""nofollow"">pbkdf2 method using cryptopp</a>.</p>

<p>I have problems with validating the passwords. I have tried to compare the output in ""length-constant"" time but it always fails and returns false. </p>

<pre><code>// a and b are std strings containing the output of the DeriveKey function

unsigned diff = a.length() ^ b.length();
for(unsigned i = 0; i &lt; a.length() &amp;&amp; i &lt; b.length(); i++)
{
      diff |= (unsigned)a[i] ^ (unsigned)b[i];
}

bool equal = diff == 0;
</code></pre>

<p>Is using ""slow equals"" even the right way to validate pbkdf2 passwords? I am a bit confused on this.</p>
","<blockquote>
  <p>I'm writing a program which hashes passwords with the pbkdf2 method using cryptopp.</p>
</blockquote>

<p>You linked to the Crypto++ main page, and not a your particular use of PBKDF. Here's <a href=""https://stackoverflow.com/a/27261798/608639"">some code</a> just in case (it uses the IETF test vectors from <a href=""http://www.ietf.org/rfc/rfc6070.txt"" rel=""nofollow noreferrer"">RFC 6070</a>):</p>

<pre><code>int main(int argc, char* argv[])
{
    byte password[] =""password"";
    size_t plen = strlen((const char*)password);

    byte salt[] = ""salt"";
    size_t slen = strlen((const char*)salt);

    int c = 1;
    byte derived[20];

    PKCS5_PBKDF2_HMAC&lt;CryptoPP::SHA1&gt; pbkdf2;
    pbkdf2.DeriveKey(derived, sizeof(derived), 0, password, plen, salt, slen, c);

    string result;
    HexEncoder encoder(new StringSink(result));

    encoder.Put(derived, sizeof(derived));
    encoder.MessageEnd();

    cout &lt;&lt; ""Derived: "" &lt;&lt; result &lt;&lt; endl;

    return 0;
}
</code></pre>

<hr>

<blockquote>
  <p>I have tried to compare the output in ""length-constant"" time but it always fails and returns false. </p>
</blockquote>

<p>Crypto++ has a constant time compare built in. Use <code>VerifyBufsEqual</code> from <a href=""http://www.cryptopp.com/docs/ref/misc_8h_source.html"" rel=""nofollow noreferrer""><code>misc.h</code></a>. The source is available in <a href=""http://www.cryptopp.com/docs/ref/misc_8cpp_source.html"" rel=""nofollow noreferrer""><code>misc.cpp</code></a>.</p>

<pre class=""lang-sh prettyprint-override""><code>$ cd cryptopp
$ grep -R VerifyBufsEqual *
cryptlib.cpp:   return VerifyBufsEqual(digest, digestIn, digestLength);
default.cpp:    if (!VerifyBufsEqual(check, check+BLOCKSIZE, BLOCKSIZE))
fipstest.cpp:   if (!VerifyBufsEqual(expectedModuleMac, actualMac, macSize))
fipstest.cpp:   if (VerifyBufsEqual(expectedModuleMac, actualMac, macSize))
misc.cpp:bool VerifyBufsEqual(const byte *buf, const byte *mask, size_t count)
misc.h:CRYPTOPP_DLL bool CRYPTOPP_API VerifyBufsEqual(const byte *buf1, const byte *buf2, size_t count);
pssr.cpp:   valid = VerifyBufsEqual(representative + representativeByteLength - u, hashIdentifier.first, hashIdentifier.second) &amp;&amp; valid;
pubkey.cpp: return VerifyBufsEqual(representative, computedRepresentative, computedRepresentative.size());
secblock.h:     return m_size == t.m_size &amp;&amp; VerifyBufsEqual(m_ptr, t.m_ptr, m_size*sizeof(T));
</code></pre>

<p>What I'm not clear about: <code>VerifyBufsEqual</code> is predicated upon buffers of equal lengths. I'm not sure if its OK to overlook the ""not-equal length"" case.</p>

<hr>

<p>There's also a question on the Information Stack Exchange that may be relevant: <a href=""https://security.stackexchange.com/q/9192/29925"">Timing attacks on password hashes</a>. But I'm not certain if/how it generalizes to arbitrary buffer compares.</p>

<p>The question piqued my interest in an answer to the general problem (the question has always been there): <a href=""https://security.stackexchange.com/q/77428/29925"">Constant time compares when array sizes are not equal?</a>. That should tell us if  we have the proper tools in <code>VerifyBufsEqual</code> (Crypto++), <code>CRYPTO_memcmp</code> (OpenSSL), etc.</p>
","628","<c++><hash><crypto++><pbkdf2>","2","1","1","2015-01-05 00:51:23","27771530","0","","608639","","2015-01-05 00:02:41","2014-02-19 19:29:42",""
"13769929","GPU KDF hasher (instead of cracker)","<p>So I've been keeping up with GPU crackers and they are quite impressive. I've seen some articles saying someone got up to 384 billion passwords a second. We've been using PBKDF2 with random salt instead of just one time hashes but it can definitely eat up your CPU. I was wondering instead of a cracker, is it possible to use something like NVIDIA Cuda to run PBKDF2 or something similar in a faster more distributed way? Has anyone tried to do this yet? </p>
","<p>I'm not familiar with the area, but a Google search reveals that PBKDF2 has been successfully implemented on the GPU:</p>

<p><a href=""http://daimi.au.dk/~jot2re/cuda/index.html"" rel=""nofollow"">http://daimi.au.dk/~jot2re/cuda/index.html</a></p>

<p>Note that AMD GPUs may be better than Nvidia for this use case, if SHA-256 hashing performance has any correspondence with PBKDF2:</p>

<p><a href=""https://devtalk.nvidia.com/default/topic/496471/cuda-programming-and-performance/amd-radeon-3x-faster-on-bitcoin-mining-sha-256-hashing-performance/1"" rel=""nofollow"">https://devtalk.nvidia.com/default/topic/496471/cuda-programming-and-performance/amd-radeon-3x-faster-on-bitcoin-mining-sha-256-hashing-performance/1</a></p>
","603","<cuda><gpu><cracking><pbkdf2>","2","1","1","2012-12-07 20:38:46","13770622","0","","","","","2012-12-07 19:40:40",""
"30451389","PKCS5_PBKDF2_HMAC: binary password","<p>I am going to use PKCS5_PBKDF2_HMAC to derive keys. Password argument is <code>const char*</code>. Does it mean it must consist of printable characters only? Can I use binary password instead? <a href=""https://www.openssl.org/docs/crypto/PKCS5_PBKDF2_HMAC.html"" rel=""nofollow"">OpenSSL Documentation</a> says nothing about it. The only clue is using char instead of unsigned char, but nothing more:</p>

<pre><code> int PKCS5_PBKDF2_HMAC(const char *pass, int passlen,
                   const unsigned char *salt, int saltlen, int iter,
                   const EVP_MD *digest,
                   int keylen, unsigned char *out);
</code></pre>

<p><a href=""https://www.ietf.org/rfc/rfc2898.txt"" rel=""nofollow"">RFC</a> mentions <em>P</em> shortcut for <code>password, an octet string</code>. Does it mean I can use a binary password being encoded as a hex string?</p>
","<blockquote>
  <p>Does it mean it must consist of printable characters only?</p>
</blockquote>

<p>NO.</p>

<p><em>If</em> its a binary password, then that means you have to specify its length in <code>passlen</code>. You <em>can't</em> set <code>passlen</code> to -1 because <code>strlen</code> won't work as expected.</p>

<hr>

<blockquote>
  <p>Can I use binary password instead?</p>
</blockquote>

<p>YES.</p>

<p>Be sure to specify the length in <code>passlen</code>.</p>

<hr>

<blockquote>
  <p>Does it mean I can use a binary password being encoded as a hex string?</p>
</blockquote>

<p>YES.</p>

<p>There's no difference between raw octets, Hex encoding, Base32 encoding or Base64 encoding. They are presentation formats, and they all have the same entropy. The entropy will be extracted by the derivation functions.</p>

<p>The different encodings will result in different derived keys, but all the derived keys will have the same amount of entropy.</p>

<hr>

<p>Related, see <a href=""https://stackoverflow.com/q/22851828/608639"">What does OpenSSL's PKCS5_PBKDF2_HMAC_SHA1 return value mean?</a> for an analysis on the function. It was provided before OpenSSL provided the documentation on the function.</p>

<p>Also see other related questions, like <a href=""https://stackoverflow.com/q/9771212/608639"">How to use PKCS5_PBKDF2_HMAC_SHA1()</a>.</p>
","601","<c><openssl><pbkdf2>","3","1","1","2015-05-26 11:50:35","","2","","608639","","2015-05-26 11:46:48","2015-05-26 06:50:00",""
"14569170","How to retrieve Hash Password in C#?","<p>What is the proper way to <strong>retrieve / reset password / Forgot Password</strong> ?</p>

<p>I used Password Based Key Derivation Function 2 (PBKDF2) in the Rfc2898DeriveBytes class. </p>

<pre><code>   public static string HashPassword(string password)
        {
            if (password == null)
            {
                throw new ArgumentNullException(""password"");
            }

            byte[] salt;
            byte[] subkey;
            using (var deriveBytes = new Rfc2898DeriveBytes(password, SaltSize, Pbkdf2Count))
            {
                salt = deriveBytes.Salt;
                subkey = deriveBytes.GetBytes(Pbkdf2SubkeyLength);
            }

            byte[] outputBytes = new byte[1 + SaltSize + Pbkdf2SubkeyLength];
            Buffer.BlockCopy(salt, 0, outputBytes, 1, SaltSize);
            Buffer.BlockCopy(subkey, 0, outputBytes, 1 + SaltSize, Pbkdf2SubkeyLength);
            return Convert.ToBase64String(outputBytes);
        }
</code></pre>

<p>So what is the way to reset hash password. </p>
","","594","<c#-4.0><asp.net-mvc-4><encryption><pbkdf2><password-hash>","0","","0","2013-01-28 19:00:34","","5","","","","","2013-01-28 19:00:34",""
"50796527","PBKDF2 using SHA 256 in .NET","<p>I need to update some code that is using the PBKDF2 implementation in .Net, <code>Rfc2898DeriveBytes</code> to hash user credentials. 
It is my understanding that this function uses SHA-1 under the hood. I need to update the underlying hashing algorithm of the systems password hashing to use SHA-256 (This is a client IT-SEC requirement). </p>

<p>Having done some reading it seems it is best practice to continue to to use a Key derivation function, however PBKDF2 doesn't allow you to dictate the algorithm is should use, which is obviously a problem for me.</p>

<p>Our system is using .NET 4.5.1 and currently is not an option to upgrade that and I am reasonably confident it is not an option to reference any new .NET core .dlls that I've heard contain a new implementation of PBKDF2 that allows you to specify your algorithm.</p>

<p>I want to avoid home made implementations at all cost,s as that's the 1st rule of Crypto-Club right?</p>

<p>Any guidance on what is best practice would be appreciated. </p>

<p>Thanks</p>
","<p>You can specify an algorithm now, <a href=""https://msdn.microsoft.com/en-us/library/mt829010(v=vs.110).aspx"" rel=""nofollow noreferrer"">msdn page</a></p>

<p>Note: Available since 4.7.2</p>

<p>The names are available in <code>System.Security.Cryptography.HashAlgorithmName</code></p>
","593","<c#><.net><hash><sha256><pbkdf2>","1","1","3","2018-06-11 18:45:31","","6","","","","","2018-06-11 11:18:15",""
"50796527","PBKDF2 using SHA 256 in .NET","<p>I need to update some code that is using the PBKDF2 implementation in .Net, <code>Rfc2898DeriveBytes</code> to hash user credentials. 
It is my understanding that this function uses SHA-1 under the hood. I need to update the underlying hashing algorithm of the systems password hashing to use SHA-256 (This is a client IT-SEC requirement). </p>

<p>Having done some reading it seems it is best practice to continue to to use a Key derivation function, however PBKDF2 doesn't allow you to dictate the algorithm is should use, which is obviously a problem for me.</p>

<p>Our system is using .NET 4.5.1 and currently is not an option to upgrade that and I am reasonably confident it is not an option to reference any new .NET core .dlls that I've heard contain a new implementation of PBKDF2 that allows you to specify your algorithm.</p>

<p>I want to avoid home made implementations at all cost,s as that's the 1st rule of Crypto-Club right?</p>

<p>Any guidance on what is best practice would be appreciated. </p>

<p>Thanks</p>
","<p>I'll tell you what I would do: I would take the source of the newest (not exactly the newest because it uses <code>Span&lt;&gt;</code>... Just a little older :-) ) of <code>Rfc2898DeriveBytes</code> from the <a href=""https://github.com/dotnet/corefx"" rel=""nofollow noreferrer"">corefx github</a></p>

<p>You'll need the full code of:</p>

<ul>
<li><a href=""https://github.com/dotnet/corefx/blob/29cb063b95661470340b6ba7e1381495c05bfff2/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs"" rel=""nofollow noreferrer"">https://github.com/dotnet/corefx/blob/29cb063b95661470340b6ba7e1381495c05bfff2/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs</a></li>
<li><a href=""https://github.com/dotnet/corefx/blob/45b724f6b6391910edea8a70f3f22a4a7996696d/src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs"" rel=""nofollow noreferrer"">https://github.com/dotnet/corefx/blob/45b724f6b6391910edea8a70f3f22a4a7996696d/src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs</a></li>
<li><a href=""https://github.com/dotnet/corefx/blob/bffef76f6af208e2042a2f27bc081ee908bb390b/src/System.Security.Cryptography.Encoding/src/Internal/Cryptography/Helpers.cs"" rel=""nofollow noreferrer"">https://github.com/dotnet/corefx/blob/bffef76f6af208e2042a2f27bc081ee908bb390b/src/System.Security.Cryptography.Encoding/src/Internal/Cryptography/Helpers.cs</a></li>
</ul>

<p>plus two methods (<code>GenerateRandom</code> and <code>WriteInt</code>) from</p>

<ul>
<li><a href=""https://github.com/dotnet/corefx/blob/827f47f48df00923b802427486b062d62dd243b5/src/System.Security.Cryptography.Algorithms/src/Internal/Cryptography/Helpers.cs"" rel=""nofollow noreferrer"">https://github.com/dotnet/corefx/blob/827f47f48df00923b802427486b062d62dd243b5/src/System.Security.Cryptography.Algorithms/src/Internal/Cryptography/Helpers.cs</a></li>
</ul>

<p>Then you'll have some calls to <code>SR.*something*</code> that you'll have to replace to some messages like <code>""some error""</code>, plus a <code>SR.Format</code> that you have to replace with <code>string.Format</code>.</p>

<p>Then you'll have (nearly) the newest version of <code>Rfc2898DeriveBytes</code> that has a constructor that accepts as a parameter <code>HashAlgorithmName.SHA256</code>.</p>

<p>This should be the end result: <a href=""https://ideone.com/lb2Qya"" rel=""nofollow noreferrer"">https://ideone.com/lb2Qya</a></p>

<p>I had the bad idea of putting the source code in the namespace <code>My.System</code>... bad bad idea... I had to prefix <code>global::</code> to all the namespaces :-(</p>
","593","<c#><.net><hash><sha256><pbkdf2>","1","0","3","2018-06-11 18:45:31","","6","","","","","2018-06-11 11:18:15",""
"50796527","PBKDF2 using SHA 256 in .NET","<p>I need to update some code that is using the PBKDF2 implementation in .Net, <code>Rfc2898DeriveBytes</code> to hash user credentials. 
It is my understanding that this function uses SHA-1 under the hood. I need to update the underlying hashing algorithm of the systems password hashing to use SHA-256 (This is a client IT-SEC requirement). </p>

<p>Having done some reading it seems it is best practice to continue to to use a Key derivation function, however PBKDF2 doesn't allow you to dictate the algorithm is should use, which is obviously a problem for me.</p>

<p>Our system is using .NET 4.5.1 and currently is not an option to upgrade that and I am reasonably confident it is not an option to reference any new .NET core .dlls that I've heard contain a new implementation of PBKDF2 that allows you to specify your algorithm.</p>

<p>I want to avoid home made implementations at all cost,s as that's the 1st rule of Crypto-Club right?</p>

<p>Any guidance on what is best practice would be appreciated. </p>

<p>Thanks</p>
","<p>You can P/Invoke to <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/dd433795(v=vs.85).aspx"" rel=""nofollow noreferrer"">BCryptDeriveKeyPBKDF2</a>, assuming you're on Win7+.</p>

<pre><code>private static void PBKDF2(
    string password,
    byte[] salt,
    int iterationCount,
    string hashName,
    byte[] output)
{
    int status = SafeNativeMethods.BCryptOpenAlgorithmProvider(
        out SafeNativeMethods.SafeBCryptAlgorithmHandle hPrf,
        hashName,
        null,
        SafeNativeMethods.BCRYPT_ALG_HANDLE_HMAC_FLAG);

    using (hPrf)
    {
        if (status != 0)
        {
            throw new CryptographicException(status);
        }

        byte[] passBytes = Encoding.UTF8.GetBytes(password);

        status = SafeNativeMethods.BCryptDeriveKeyPBKDF2(
            hPrf,
            passBytes,
            passBytes.Length,
            salt,
            salt.Length,
            iterationCount,
            output,
            output.Length,
            0);

        if (status != 0)
        {
            throw new CryptographicException(status);
        }
    }
}

[SuppressUnmanagedCodeSecurity]
private static class SafeNativeMethods
{
    private const string BCrypt = ""bcrypt.dll"";
    internal const int BCRYPT_ALG_HANDLE_HMAC_FLAG = 0x00000008;

    [DllImport(BCrypt, CharSet = CharSet.Unicode)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    internal static extern int BCryptDeriveKeyPBKDF2(
        SafeBCryptAlgorithmHandle hPrf,
        byte[] pbPassword,
        int cbPassword,
        byte[] pbSalt,
        int cbSalt,
        long cIterations,
        byte[] derivedKey,
        int cbDerivedKey,
        int dwFlags);

    [DllImport(BCrypt)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    private static extern int BCryptCloseAlgorithmProvider(IntPtr hAlgorithm, int flags);

    [DllImport(BCrypt, CharSet = CharSet.Unicode)]
    [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
    internal static extern int BCryptOpenAlgorithmProvider(
        out SafeBCryptAlgorithmHandle phAlgorithm,
        string pszAlgId,
        string pszImplementation,
        int dwFlags);

    internal sealed class SafeBCryptAlgorithmHandle : SafeHandleZeroOrMinusOneIsInvalid
    {
        public SafeBCryptAlgorithmHandle() : base(true)
        {
        }

        protected override bool ReleaseHandle()
        {
            return BCryptCloseAlgorithmProvider(handle, 0) == 0;
        }
    }
}
</code></pre>
","593","<c#><.net><hash><sha256><pbkdf2>","1","1","3","2018-06-11 18:45:31","","6","","","","","2018-06-11 11:18:15",""
"32949607","PBKDF2 java script implementation with Apache License","<p>I searched a lot and could not find any PBKDF2 JavaScript implementation that has the Apache License, does it exist or must I implement it by myself?</p>
","<p>I found it now, to solve my problem I can use the WebCrypto APIs for JavaScript. An explanation on how to use it can be found <a href=""http://blog.engelke.com/2015/02/14/deriving-keys-from-passwords-with-webcrypto/#comment-3476"" rel=""nofollow"">here</a></p>
","571","<javascript><pbkdf2>","1","2","1","2016-05-10 10:26:39","32967810","0","","","","","2015-10-05 13:14:58",""
"38519807","Password hashing using PBKDF2 and HKDF in .NET","<p>I've been tasked with the task of writing a new method for computing password hashes to replace the old one which we do not feel is sufficiently secure yet. A good while ago, I read the book Security Driven .NET, in which I learned that the important part is to use a algorithm with configurable amount of revolutions (as opposed to a simple hash), and that in .NET the recommended one was called <code>PBKDF2</code> for password handling. I also read that as an improvement to how ASP.NET deals with passwords, it would be nice if the resulting hash stored in the database was cryptographically tied to the user (either name or id) by way of using the PBKDF2 to create a master key, and then use the username (or id) to create a derived key using HKDF. But again, this is superficial knowledge that I read from a book that I do not currently have access to, so I can't recheck if my memory is correct.</p>

<p>Also, I've not used the .NET DerivedBytes APIs before, so I might be doing that wrong. So my question is this: Am I doing things right in the following code? Am I using the APIs correctly? And is this implementation ""sufficiently secure""? Or am I doing something wrong which completely removes all of the security?</p>

<pre><code>protected override byte[] ComputeHash(string user, string salt, string password)
{
    var userBytes = user.ToBytes();
​
    using (var pbkdf2 = new PBKDF2(MacFactories.HMACSHA512, password.ToBytes(), salt.ToBytes()))
    {
        var masterKey = pbkdf2.GetBytes(128);
        using (var hkdf = new HKDF(MacFactories.HMACSHA512, masterKey, userBytes, userBytes))
        {
            return hkdf.GetBytes(64);
        }
    }
}
</code></pre>
","<p>You have the correct idea/approach - here is a slightly better implementation:</p>

<pre class=""lang-cs prettyprint-override""><code>byte[] ComputeHash(string user, string salt, string password)
{
    using (var pbkdf2 = new PBKDF2(HMACFactories.HMACSHA512, password, salt.ToBytes()))
    using (var hkdf = new HKDF(HMACFactories.HMACSHA512, pbkdf2.GetBytes(64), user.ToBytes()))
        return hkdf.GetBytes(64);
}
</code></pre>

<p>You should not ask <code>pbkdf2</code> for more bytes than the byte-length of the underlying PRF (in your case, SHA512 which produces 64 bytes).</p>

<p>You can leave <code>hkdf</code> context as <code>null</code> since you don't seem to have a need for it.</p>

<p>For others who might be wondering what library the above code uses - <a href=""http://SecurityDriven.NET/inferno/"" rel=""nofollow"">Inferno crypto</a>.</p>
","570","<.net><pbkdf2><password-hash>","4","4","1","2016-07-22 14:05:42","38528504","0","","","","","2016-07-22 06:41:50",""
"40813377","Check password stored with PBKDF2 with php","<p>I have a big problem, I have to write a php login page using an db where password are stored as PBKDF2 (with another perl script). When I get the password with a query I read this:
sha256:1000:2SeBDP88w4bqKbJaCJNpNuRHQhUM96X1:jgh/SZtmRWH5iDIwtXyFLtuuDf7YE+7HQEJZ4KFFNAg= (I know this password but I cannot regenerate it in php).</p>

<p>I tried with this script (get from php.net):</p>

<pre><code>$password = ""qqqqq"";
$iterations = 1000;
$salt = ""2SeBDP88w4bqKbJaCJNpNuRHQhUM96X1"";
$hash = hash_pbkdf2(""sha256"", $password, $salt, $iterations, 20);
echo $hash   // result a2ba3349194c38f828af
</code></pre>

<p>but the pass generate is a2ba3349194c38f828af and not jgh/SZtmRWH5iDIwtXyFLtuuDf7YE+7HQEJZ4KFFNAg=</p>

<p>who wrote the perl script that store these password told me ""The passwords are getting encoded though one-way hashing scheme named 'PBKDF2'""</p>

<p>Some ideas? Someone know where I'm wrong? </p>
","<ul>
<li><code>jgh/SZtmRWH5iDIwtXyFLtuuDf7YE+7HQEJZ4KFFNAg=</code> is Base64 (the = on the end is a dead giveaway, though Base64 exists without a trailing <code>=</code>).</li>
<li>Converted to hex, the value is <code>8E087F499B664561F9883230B57C852EDBAE0DFED813EEC7404259E0A1453408</code></li>
<li>This is still not your answer, but now we can easily see it is 64 hex characters => 32 bytes.</li>
<li>You asked for 20 bytes.</li>
<li>It also looks like your salt input is base64, but the function you're passing it to expects ... whatever the output of <code>base64_decode</code> is.</li>
</ul>

<p>So, you need to consistently process the base64-encoded data.  And then you'll need to make sure that your hash algorithm, iteration count, and output byte count all match what the perl script says.</p>
","550","<php><pbkdf2>","0","0","2","2017-02-27 13:19:14","","0","1","","","","2016-11-25 23:25:10",""
"40813377","Check password stored with PBKDF2 with php","<p>I have a big problem, I have to write a php login page using an db where password are stored as PBKDF2 (with another perl script). When I get the password with a query I read this:
sha256:1000:2SeBDP88w4bqKbJaCJNpNuRHQhUM96X1:jgh/SZtmRWH5iDIwtXyFLtuuDf7YE+7HQEJZ4KFFNAg= (I know this password but I cannot regenerate it in php).</p>

<p>I tried with this script (get from php.net):</p>

<pre><code>$password = ""qqqqq"";
$iterations = 1000;
$salt = ""2SeBDP88w4bqKbJaCJNpNuRHQhUM96X1"";
$hash = hash_pbkdf2(""sha256"", $password, $salt, $iterations, 20);
echo $hash   // result a2ba3349194c38f828af
</code></pre>

<p>but the pass generate is a2ba3349194c38f828af and not jgh/SZtmRWH5iDIwtXyFLtuuDf7YE+7HQEJZ4KFFNAg=</p>

<p>who wrote the perl script that store these password told me ""The passwords are getting encoded though one-way hashing scheme named 'PBKDF2'""</p>

<p>Some ideas? Someone know where I'm wrong? </p>
","<p>try this</p>

<pre><code>$hash = strtoupper(bin2hex($hash));
</code></pre>
","550","<php><pbkdf2>","0","0","2","2017-02-27 13:19:14","","0","1","","","","2016-11-25 23:25:10",""
"46429683","PHP alternative of ""PBKDF2WithHmacSHA256"" from Java","<p>I need to generate in PHP the same hash as as the <code>PBKDF2WithHmacSHA256</code> algorithm generates in Java.</p>

<p>I did some research and found two functions that seem to be connected to <code>PBKDF2</code> and <code>HMAC</code>:</p>

<ul>
<li>hash_pbkdf2 - <a href=""http://php.net/manual/en/function.hash-pbkdf2.php"" rel=""nofollow noreferrer"">http://php.net/manual/en/function.hash-pbkdf2.php</a></li>
<li>hash_hmac - <a href=""http://php.net/manual/en/function.hash-hmac.php"" rel=""nofollow noreferrer"">http://php.net/manual/en/function.hash-hmac.php</a></li>
</ul>

<p>What PHP functions should I use? Is it even possible with native PHP functions?</p>

<p><strong>Edit #1</strong></p>

<p>My Java code, the same result I need achieve in PHP</p>

<pre><code>public static byte[] derivateKey(char[] password, byte[] salt, int iterations, int keyLengthBits) {
        try {
            SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
            PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, keyLengthBits);
            SecretKey key = skf.generateSecret(spec);
            byte[] res = key.getEncoded();
            return res;

        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            throw new IllegalStateException(""Could not create hash"", e);
        }
    }
</code></pre>
","<p>The Java code you've provided is basically <a href=""https://secure.php.net/hash_pbkdf2"" rel=""nofollow noreferrer""><code>hash_pbkdf2()</code></a>. You just need to pass the correct params:</p>

<pre><code>function derivateKey($password, $salt, $iterations, $keyLengthBits)
{
    return hash_pbkdf2(
        'sha256',
        $password,
        $salt,
        $iterations,
        $keyLengthBits / 8,
        true
    );
}
</code></pre>

<p>Obviously, PHP's <code>hash_pbkdf2()</code> accepts the hash algorithm as a parameter, but the potentially tricky differences are these:</p>

<ul>
<li>It doesn't comply with <a href=""https://www.ietf.org/rfc/rfc2898.txt"" rel=""nofollow noreferrer"">RFC 2898</a> in that its length is applied <em>after</em> hex-encoding, so that last parameter must be set to <code>true</code> to make it consistent with the spec.</li>
<li>It accepts the output length in bytes instead of bits (hence why we divide by 8 above).</li>
</ul>

<p>The only thing I'm not sure about is what <code>key.getEncoded()</code> does in your sample code ... there's no encoding algorithm specified anywhere.<br>
I found some docs suggesting it is supposed to be RAW, so the example I'm providing should match it. If it doesn't, you'll have to encode it yourself.</p>
","529","<php><sha256><hmac><pbkdf2>","0","2","1","2017-09-27 08:44:52","46430311","4","","1315357","","2017-09-26 14:59:02","2017-09-26 14:50:14",""
"11709500","CAPI does not support Password Based Encryption (PBE) encryption?","<p>I am trying to port a UNIX code using OpenSSL (PKCS#5 &amp; PKCS#7) to windows.</p>

<p>In the case of OpenSSL, all the encoding/decoding (certificates or
passwords) is done transparently to the caller in the function
<a href=""http://www.openssl.org/docs/crypto/CMS_encrypt.html"" rel=""noreferrer"">CMS_Encrypt</a>, as it should be.</p>

<p>CAPI does the same thing in the case of
certificate based encryption inside the function <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa379925%28v=vs.85%29.aspx"" rel=""noreferrer"">CryptEncryptMessage</a>
(no ASN details are revealed to the caller). After some googling, I found out the following <a href=""http://www.idrix.fr/Root/content/view/37/54/"" rel=""noreferrer"">key generation implementation</a>. Now how am I supposed to use it in CAPI ?</p>

<p>Because CAPI does not
support PBE encryption at the high level (PBKDF2) my guess
is that the encoding has to be done (somehow?) manually. And by manually I mean writing
(and reading) the binary representations of various ASN tags. How am I supposed to do this ?</p>

<p>I cannot access the <a href=""http://www.koders.com/c/fid4F23D8E46AFA71338959D003DFF969831DE6120C.aspx"" rel=""noreferrer"">msasn1.h</a> API since msasn1.lib is never distributed. Has anyone been able to use CAPI interface for doing anything else other than certificates based encryption ?</p>
","","509","<c++><cryptoapi><pbkdf2>","8","","0","2015-10-10 20:23:41","","4","","136285","","2012-07-30 07:25:46","2012-07-29 13:10:12",""
"24591865","Reverse engineering how Gitlab uses Devise for PBKDF2 tokens","<p>I'm trying to figure out the steps performed by <a href=""https://github.com/gitlabhq/gitlabhq"" rel=""nofollow"">Gitlab</a>, a Ruby on Rails application, to arrive at the authentication token they use.</p>

<p>My knowledge of ruby is basic, and I don't know Ruby on Rails.  From what I have figured out, starting with their <a href=""https://github.com/gitlabhq/gitlabhq/blob/6-8-stable/app/models/user.rb"" rel=""nofollow"">user.rb</a> model, Gitlab uses a module called <a href=""https://github.com/plataformatec/devise"" rel=""nofollow"">Devise</a> to generate the authentication token.  Looking at the Devise  <a href=""https://github.com/plataformatec/devise/blob/v3.2/lib/devise/token_generator.rb"" rel=""nofollow"">token_generator.rb</a> module, it seems that the default is a PBKDF2 SHA1 hash with a SHA256 digest, but I also don't know how the <a href=""https://github.com/gitlabhq/gitlabhq/blob/master/config/initializers/devise.rb"" rel=""nofollow"">configuration file</a> is processed.</p>

<p>The <a href=""https://github.com/plataformatec/devise/blob/v3.2/lib/devise/token_generator.rb#L38"" rel=""nofollow""><code>KeyGenerator</code></a> class is self contained and I am able to duplicate it in another language. But the <a href=""https://github.com/plataformatec/devise/blob/v3.2/lib/devise/token_generator.rb#L7"" rel=""nofollow""><code>TokenGenerator</code></a> class is going to take me a while to figure out without learning some Ruby on Rails:</p>

<pre><code>  class TokenGenerator
    def initialize(key_generator, digest=""SHA256"")
      @key_generator = key_generator
      @digest = digest
    end

    def digest(klass, column, value)
      value.present? &amp;&amp; OpenSSL::HMAC.hexdigest(@digest, key_for(column), value.to_s)
    end

    def generate(klass, column)
      key = key_for(column)

      loop do
        raw = Devise.friendly_token
        enc = OpenSSL::HMAC.hexdigest(@digest, key, raw)
        break [raw, enc] unless klass.to_adapter.find_first({ column =&gt; enc })
      end
    end

    private

    def key_for(column)
      @key_generator.generate_key(""Devise #{column}"")
    end
  end
</code></pre>

<p>I realize I'm being lazy and impatient, but I was hoping somebody familiar with Gitlab and Ruby on Rails could help me find out:</p>

<ol>
<li>Where in this rails app does <code>TokenGenerator.generate</code> get called
for the user creation, and what are the default <code>klass</code> and <code>column</code>
values being passed to it?</li>
<li>Where is <code>""Devise #{column}""</code> read from, and what is its default value?</li>
</ol>

<p>In other words, I would like to know what parameters supplied by the users end up as factors to this authentication token.  The plain text password? The encrypted password?  Just a random value?</p>
","<p>Not exactly an answer but a tip to get there. You can try to inspect the state of those methods when they get called using debugger or pry. Here is how to do that in a gem you don't own.  <a href=""https://stackoverflow.com/questions/8545553/best-way-to-debug-third-party-gems-in-ruby"">Best way to debug third-party gems in ruby</a></p>
","504","<ruby-on-rails><ruby><devise><gitlab><pbkdf2>","2","1","1","2014-07-06 03:01:59","","0","","","","","2014-07-06 01:13:48",""
"31682187","PBEWITHSHA256AND256BITAES-CBC-BC on Android : number of iterations for keygeneration and cipher?","<p>I'm using PBEWITHSHA256AND256BITAES-CBC-BC with BouncyCastle.</p>

<pre><code>public static String algorithm = ""PBEWITHSHA256AND256BITAES-CBC-BC"";
</code></pre>

<p>I've done this method to generate the secret key:</p>

<pre><code>private void generateSK(char[] passPhrase, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException {
    pbeParamSpecKey = new PBEParameterSpec(salt,1000);
    PBEKeySpec pbeKeySpec = new PBEKeySpec(passPhrase);
    SecretKeyFactory secretKeyFactory;

    secretKeyFactory = SecretKeyFactory.getInstance(algorithm);
    secretKey = secretKeyFactory.generateSecret(pbeKeySpec);
}
</code></pre>

<p>and then this to generate a Cipher object (for encryption or decryption):</p>

<pre><code>protected Cipher getCipher(int mode) {
    try {
        Cipher cipher = Cipher.getInstance(algorithm);
        cipher.init(mode, secretKey, pbeParamSpecKey);

        return cipher;
    }catch (Exception e) {
        e.printStackTrace();
        return null;
    }
}
</code></pre>

<p>The pbeParamSpecKey need to be the same? How much is ""important"" (in terms of security) the number of iterations generating the key and the one generating the Cipher object? Can they be different?</p>
","<blockquote>
  <p>The pbeParamSpecKey need to be the same? How much is ""important"" (in terms of security) the number of iterations generating the key and the one generating the Cipher object?</p>
</blockquote>

<p>This is a hard question that you need to answer yourself. The general guidance is, as large as possible without annoying the user too much, but 1000 iterations is a bit low nowadays.</p>

<p>The next thing you need to do is try to benchmark your application on different devices that your user group probably has. Then you can fine-tune accordingly. </p>

<p>Maybe you can slightly redesign your app so that the key derivation happens in the background during idle phases and can therefore take a longer time. Though, this may introduce other problems like keeping the derived key safe and not leakable. </p>

<blockquote>
  <p>Can they be different?</p>
</blockquote>

<p>AES is a symmetric block cipher and as such needs the <em>same</em> key for encryption and decryption. To generate the <em>same</em> key, you need to use the <em>same</em> password, salt and number of iterations for PBKDF2.</p>
","502","<java><android><security><aes><pbkdf2>","1","1","1","2015-07-28 17:53:09","31682543","0","1","1816580","","2015-07-28 16:53:03","2015-07-28 16:32:16",""
"42624289","encrypt a password using pbkdf2-sha256 in ionic2","<blockquote>
  <p>how to encrpt password in ionic2 typescript file.I refered the below link and imported pbkdf2 module  in to  ionic2 app.
  <a href=""http://cryptocoinjs.com/modules/crypto/pbkdf2-sha256/"" rel=""nofollow noreferrer"">enter link description here</a></p>
  
  <p>but i got error like  <strong>webpack_require</strong>.i(...) is not a function.can anyone help me solving out this...</p>
</blockquote>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import { Component } from '@angular/core';
import { NavController, NavParams } from 'ionic-angular';
import { pbkdf2 } from '../../../node_modules/pbkdf2-sha256/lib/pbkdf2.js';
/*
  Generated class for the Firstpage page.

  See http://ionicframework.com/docs/v2/components/#navigation for more info on
  Ionic pages and navigation.
*/
@Component({
  selector: 'page-firstpage',
  templateUrl: 'firstpage.html'
})
export class FirstpagePage {
 	key : any = ""passwd"";
 	salt :any =""salt"";
 	res :any ; 
  constructor(public navCtrl: NavController, public navParams: NavParams) {}

  ionViewDidLoad() {
    console.log('ionViewDidLoad FirstpagePage');
  }
  encrypt(){
  console.log(""-----"");
  
	this.res = pbkdf2(this.key, this.salt, 1, 64);
	console.log(this.res.toString('hex')) 
  }
}</code></pre>
</div>
</div>
</p>
","<p>Try to define <code>pbkdf2</code> in the constructor.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>constructor(public navCtrl: NavController, public navParams: NavParams,
 public crypt:pbkdf2) {}</code></pre>
</div>
</div>
</p>
","499","<ionic2><sha256><pbkdf2>","0","1","1","2017-03-07 09:27:39","","0","","","","","2017-03-06 11:20:28",""
"31623706","Salting and hashing passwords, Java and PHP compatibility","<p>I'm trying to make a game that will tie into website content, and users' accounts will be shared across the site multiple versions of the client.</p>

<p>The problem is that the password needs to be salt-hashed in <code>PHP</code>, and I need to be able to verify through <code>Java</code>, and I can't find any information on secure <code>cryptos</code> (like <code>PBKDF2</code>) and ensuring that the generation is identical between <code>PHP</code> and <code>Java</code>.</p>

<p>I've seen some info on using <code>PBKDF2</code> on <code>PHP</code>, OR <code>Hmac</code> with <code>SHA-1</code>, but not combining them as is suggested in the name of Java's ""<code>PBKDF2WithHmacSHA1</code>"". I have a handle now on the individual hashing for <code>PHP</code> or <code>Java</code>.  </p>

<p>How do I set up the methods to be able to generate a salt and hash on <code>PHP</code>, store it in <code>MySQL</code> and be able to verify passwords through Java's hashing functions?  </p>

<p>Would prefer to stick with <code>PBKDF2</code>, if at all possible (unless someone can suggest an equivalent that would work better for cross-compatibility).</p>

<p>P.S. Not particularly sure whether this deserved to be here or on Crypto SE. I figured, since I was asking about specific languages, I'd try here first.</p>
","<p>So, it turns out it wasn't as complicated as I was thinking it was.  I found <a href=""https://stackoverflow.com/questions/27005954/hashing-between-php-and-java"">this question</a> that said that <code>PHP</code>'s equivalent to <code>Java</code>'s <code>PBKDF2WithHmacSha1</code> was the <code>hash_pbkdf2</code> function with the <code>sha1</code> algorithm.  From there it was just a matter of transferring the <code>salt</code> and <code>hash</code> from the <code>PHP</code> to the <code>Java</code>.  Here's how it ended up:</p>

<p>1) <code>PHP</code>: For this one, I just copied the guy's <code>pbkdf2</code> function and generated the salt and hash like he did.</p>

<p>2) <code>Java</code>: All that needed to happen was a bit of a change in the bytecode conversion, and it worked just fine.</p>

<p>After that, all I needed to do was modify the <code>Java</code> code to fit into my server/client setup (including secondary session hashing), and work out a few more bugs surrounding more <code>salt</code> and <code>hash</code> encoding and decoding through network transmission, and it works perfectly now.</p>

<p>A slightly more detailed answer is available on that other question.</p>
","495","<java><php><hash><salt><pbkdf2>","1","0","2","2015-07-27 16:07:54","31635199","0","","2580791","","2015-07-27 16:07:54","2015-07-25 06:32:30",""
"31623706","Salting and hashing passwords, Java and PHP compatibility","<p>I'm trying to make a game that will tie into website content, and users' accounts will be shared across the site multiple versions of the client.</p>

<p>The problem is that the password needs to be salt-hashed in <code>PHP</code>, and I need to be able to verify through <code>Java</code>, and I can't find any information on secure <code>cryptos</code> (like <code>PBKDF2</code>) and ensuring that the generation is identical between <code>PHP</code> and <code>Java</code>.</p>

<p>I've seen some info on using <code>PBKDF2</code> on <code>PHP</code>, OR <code>Hmac</code> with <code>SHA-1</code>, but not combining them as is suggested in the name of Java's ""<code>PBKDF2WithHmacSHA1</code>"". I have a handle now on the individual hashing for <code>PHP</code> or <code>Java</code>.  </p>

<p>How do I set up the methods to be able to generate a salt and hash on <code>PHP</code>, store it in <code>MySQL</code> and be able to verify passwords through Java's hashing functions?  </p>

<p>Would prefer to stick with <code>PBKDF2</code>, if at all possible (unless someone can suggest an equivalent that would work better for cross-compatibility).</p>

<p>P.S. Not particularly sure whether this deserved to be here or on Crypto SE. I figured, since I was asking about specific languages, I'd try here first.</p>
","<p>Try to consider using a pre-built user and password management like <a href=""http://keycloak.jboss.org/"" rel=""nofollow"">JBoss KeyCloak</a>. It is based on standards like OAuth2 and OpenID Connect, and things like password reset, user registration and social login come for free. It includes connectors for Java and JavaScript. Apparently <a href=""https://github.com/OnionIoT/KeyCloak-PHP"" rel=""nofollow"">connectors for PHP</a> are available as well.</p>
","495","<java><php><hash><salt><pbkdf2>","1","0","2","2015-07-27 16:07:54","31635199","0","","2580791","","2015-07-27 16:07:54","2015-07-25 06:32:30",""
"46502224","Python wpa_passphrase (linux binary) implementation generates only part of the psk","<pre><code>wpa_passphrase ""testing"" ""testingpassword""network={
    ssid=""testing""
    #psk=""testingpassword""
    psk=ae9400eac47807861c32f6b2d52434594fe1f1cbbd5ae0d89d5199ea5e4c79aa
}
</code></pre>

<p>I did a python script as this wikipedia article tells me how to compute wpa psk:</p>

<p><a href=""https://en.wikipedia.org/wiki/Wi-Fi_Protected_Access#Target_users_.28authentication_key_distribution.29"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Wi-Fi_Protected_Access#Target_users_.28authentication_key_distribution.29</a></p>

<p>like this:</p>

<pre><code>import hashlib, binascii
def wpa_psk(ssid, password):
    dk = hashlib.pbkdf2_hmac('sha1', str.encode(password), str.encode(ssid), 4096)
    return (binascii.hexlify(dk))

print((wpa_psk(""testing"", ""testingpassword"")))
</code></pre>

<p>Output: <code>b'ae9400eac47807861c32f6b2d52434594fe1f1cb'</code></p>

<p>Which is part of the psk generated by the <code>wpa_passphrase</code> tool. What's missing?</p>
","<p>After a long Internet search , finally I found <a href=""https://github.com/SwordYork/NetworkTool/blob/master/WPA-PSK/TKIP/psk.py"" rel=""nofollow noreferrer"">psk.py</a>. Able to compute the <code>PSK</code> from <code>SSID</code> and <code>Passphrase</code>. Please check :-)</p>
","493","<passwords><linux><wireless><pbkdf2>","0","0","1","2017-12-10 21:19:29","","2","","","","","2017-09-29 22:09:45",""
"28681409","PBKDF2 hashing in javascript and iOS generating different keys","<p>This is a question related to the post: <a href=""https://groups.google.com/forum/#!topic/crypto-js/t_HeWo5QhLk"" rel=""nofollow"">https://groups.google.com/forum/#!topic/crypto-js/t_HeWo5QhLk</a></p>

<p>I have tried to solution mentioned in the post but still cannot figure out the problem with my code:</p>

<p><strong>using Crypto.js</strong></p>

<pre><code>var key= CryptoJS.PBKDF2(""gf8uny"", ""2mnfpLsa+5I="", { keySize: 256/32, iterations: 1000 });
console.log(key.toString());
console.log(btoa(key.toString()));
//OUTPUT: MDBkN2E5MWZkZjAzYTk5MWVkMzI0OTE1YWM4OTNmMDhkOTlmY2E0NTRmN2M0MTY5YTFhYzc2M2M1ZjMzZTY0Zg==
</code></pre>

<p><strong>using CommonCrypto in iOS:</strong></p>

<pre><code>NSMutableData *webKey = [NSMutableData dataWithLength:64];
NSData *salt = [@""2mnfpLsa+5I="" dataUsingEncoding:NSUTF8StringEncoding];
NSString* password = @""gf8uny"";
CCKeyDerivationPBKDF(kCCPBKDF2, password.UTF8String, password.length, salt.bytes,salt.length, kCCPRFHmacAlgSHA1, 1000, webKey.mutableBytes, webKey.length);

NSString* skey = [webKey base64EncodedStringWithOptions:0];
NSLog(@""key %@"",skey);
//OUTPUT: ANepH98DqZHtMkkVrIk/CNmfykVPfEFpoax2PF8z5k+jrwa0yTNt0tQedQ4bxqV/T0gXbsyKHiVx8DuJdlkufA==
</code></pre>

<p>The output string in both codes is base64 encoded.</p>

<p>Can anyone point out what is wrong with this code?</p>

<p>Thanks!</p>
","<p>The reason that the output looks different is that the input to Base64 is different; the reason for that is that in the JavsScript code, you've called</p>

<pre><code>key.toString()
</code></pre>

<p>So, in JavaScript, you have base64-encoded the 64-character string</p>

<pre><code>""00d7a91fdf03a991ed324915ac893f08d99fca454f7c4169a1ac763c5f33e64f""
</code></pre>

<p>And jn Objective-C, you have base64-encoded the raw 32-byte sequence</p>

<pre><code>0x00 0xd7 0xa9 0x1f 0xdf ... 0xe6 0x4f
</code></pre>

<p>In both cases, your PBKDF2 code has come up with the same key. You have just encoded the key differently in each case.</p>

<p>You can get CryptoJS to create the same Base64 output by serializing the key directly, like this:</p>

<pre><code>key.toString(CryptoJS.enc.Base64)
</code></pre>

<p>(See <a href=""https://code.google.com/p/crypto-js/#The_Hasher_Output"" rel=""nofollow"">https://code.google.com/p/crypto-js/#The_Hasher_Output</a> for the documentation. You may have to include another script file for this output format to be available)</p>
","482","<javascript><ios><cryptojs><pbkdf2>","1","2","1","2015-02-23 20:47:50","28681510","0","","","","","2015-02-23 19:04:36",""
"18999254","Moving from md5 to PBKDF2 how to?","<p>I need to upgrade md5 based simple authentication module to <a href=""https://crackstation.net/hashing-security.htm#phpsourcecode"" rel=""nofollow"">PBKDF2</a> ,and I am looking for possible schema and extra steps and flow of operation and required changes for following:</p>

<p>a. New user account creation
      Old one is simplest one : password=md5(password)</p>

<p>b. Password Reset </p>

<p>curently:</p>

<pre><code>update authtable set password=md5(newpassword) where password=md5(oldpwd)
and username='usernamexyz';
</code></pre>

<p>c. Authentication </p>

<pre><code> select id, username from authtable where password=md5(pwd) and username='usernamexyz';
</code></pre>

<p>schema:</p>

<pre><code>  CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(60) NOT NULL DEFAULT '',
  `password` varchar(255) DEFAULT NULL,  
  `email` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
) ENGINE=MyISAM DEFAULT CHARSET=utf8
</code></pre>

<p>I don't see any tutorial /article on how to implement , the db schema concerns , the password/salt length in database etc .. relating to PBKDF2. I might have missed it , please give a reference.</p>

<p>Could someone shed light on these dark corners on how to implementing PBKDF2 using php/mysql. </p>

<p>Since I am using php 5.3, I will not be able to use the <a href=""http://php.net/manual/en/function.hash-pbkdf2.php"" rel=""nofollow"">build-in PBKDF2</a> function (i.e it required php 5.5 atleast).</p>
","<p>To upgrade, you have to add new column where you will store passwords hashed by pbkdf2. This will be initially empty. Then do these changes:</p>

<p>a. PHP: <code>$password_pbkdf2 = create_hash($password)</code>. SQL: <code>password_pbkdf2 = '$password_pbkdf2', password = ''</code></p>

<p>b. Authentication as in c. Then setting password as in a.</p>

<p>c. SQL: <code>select password, password_pbkdf2 where username='usernamexyz'</code></p>

<pre><code>PHP:
if($password_pbkdf2) {
  if(validate_password($submitted_password, $password_pbkdf2) === false) {
    die('wrong username/pw');
  }
} elseif($password === md5($submitted_password)) {
  // do a. with $submitted_password
} else {
  die('wrong username/pw');
}
</code></pre>
","476","<php><mysql><security><php-5.3><pbkdf2>","1","2","1","2013-09-26 04:35:02","","0","1","416100","","2013-09-26 04:35:02","2013-09-25 07:54:15",""
"34901654","PBKDF2 (php) produces different output than CryptoJS.PBKDF2 (js)","<p>As you can see below, my php implementation produces different key than JS version (running on Extend Script if that makes any difference). PHP side uses default hash_pbkdf2, JS side uses CryptoJS library. Both use SHA256. </p>

<p>Am I missing something here?</p>

<hr>

<p><strong>PHP side</strong></p>

<pre><code>$salt = CryptoLib::randomString(128/8);
$password = ""test"";
$hasher = ""sha256"";
$iterations = 1000;
$outsize = 256;

$key = hash_pbkdf2($hasher, $password, $salt, $iterations, $outsize/8, true);
$key = bin2hex($key);
</code></pre>

<p><strong><em>salt output:</em></strong> 523554455475374b5942304448317468</p>

<p><strong><em>key output:</em></strong> cfb478a18d08030fe97beed34fd2da3abf89bb7975ffdaae9e39102a3b2ea1a2</p>

<hr>

<p><strong>JS side</strong></p>

<pre><code>var salt = ""523554455475374b5942304448317468"";
var password = ""test"";
var iterations = 1000;
var keySize = 256;

var key = CryptoJS.PBKDF2(password, salt, {keySize: 256/32, iterations: 1000, hasher:CryptoJS.algo.SHA256});
</code></pre>

<p><strong><em>key output:</em></strong> 1264aa07aeab3cf93d4ee86a074697165efffe4914ce98e6d6efd7f28c371b97</p>
","<p>It turned out to be a problem with ExtendScript. If you're using minified versions of CryptoJS, make sure you switch to full js versions because for some reason ExtendScript will generate different values:</p>

<p>Example:</p>

<p><strong>with minified Base64 CryptoJS module included:</strong></p>

<pre><code>salt.toString(CryptoJS.enc.Base64) 
= ADAASDASHFDSFKSD/ASDAHSDJAGLDFblablabla
</code></pre>

<p><strong>with full Base64 CryptoJS module included:</strong></p>

<pre><code>salt.toString(CryptoJS.enc.Base64)
= Zl0gFqZIc3CczOo/FBlNSn3NPAAsw=
</code></pre>
","474","<encryption><openssl><cryptojs><pbkdf2>","0","1","1","2016-01-22 17:06:50","34952245","4","0","","","","2016-01-20 13:40:39",""
"43541889","java hash from ""PBKDF2WithHmacSHA512"" is differs from python CRYPT(digest_alg='pbkdf2(1000,20,sha512)', salt=True)(password)[0])","<p>I have a database with passwords that are hashed using the following python code:</p>

<pre><code>result = str(CRYPT(digest_alg='pbkdf2(1000,20,sha512)', salt=True)(password)[0])
</code></pre>

<p>(details can be found <a href=""http://web2py.readthedocs.io/en/latest/validators.html"" rel=""nofollow noreferrer"">here</a>)</p>

<p>for password='123' it generates</p>

<pre><code>pbkdf2(1000,20,sha512)$b3c56f341284f4be$54297564f7a3be8c6e9c10b27821f8105e0a8120
</code></pre>

<p>I need to validate password using java. I use the following code:</p>

<pre><code>    validatePassword(""123"", ""pbkdf2(1000,20,sha512)$b3c56f341284f4be$54297564f7a3be8c6e9c10b27821f8105e0a8120"");



    private static boolean validatePassword(String originalPassword, String storedPassword) throws NoSuchAlgorithmException, InvalidKeySpecException
    {
        String[] parts = storedPassword.split(""\\$"");
        byte[] salt = fromHex(parts[1]);
        byte[] hash = fromHex(parts[2]);

        PBEKeySpec spec = new PBEKeySpec(originalPassword.toCharArray(), salt, 1000, hash.length * 8);
        SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA512"");
        byte[] testHash = skf.generateSecret(spec).getEncoded();

        System.out.println(toHex(testHash));
        System.out.println(toHex(hash));

        return true;
    }


    private static byte[] fromHex(String hex) throws NoSuchAlgorithmException
    {
        byte[] bytes = new byte[hex.length() / 2];
        for(int i = 0; i&lt;bytes.length ;i++)
        {
            bytes[i] = (byte)Integer.parseInt(hex.substring(2 * i, 2 * i + 2), 16);
        }
        return bytes;
    }

    private static String toHex(byte[] array)
    {
        StringBuilder sb = new StringBuilder();
        for(int i=0; i&lt; array.length ;i++)
        {
            sb.append(Integer.toString((array[i] &amp; 0xff) + 0x100, 16).substring(1));
        }
        return sb.toString();
    }
</code></pre>

<p>but result is the following:</p>

<pre><code>80385948513c8d1826a3a5b8abc303870d41d794
54297564f7a3be8c6e9c10b27821f8105e0a8120
</code></pre>

<p>Please help what I am doing wrong?</p>
","<p>There is kind of a ""bug"" in the code around web2py.</p>

<p>The hash LOOKS like a hex string, but it is sent to the hashlib.pbkdf2_hmac (a proxy to openssl's method) as just the character representation of the hex string. Meaning you should not use</p>

<pre><code>byte[] salt = fromHex(parts[1]);
</code></pre>

<p>but</p>

<pre><code>byte[] salt = parts[1].getBytes(""utf-8"");
</code></pre>

<p>In addition, you need to pass the KEYLENGTH instead of the salt length into PBEKeySpec's contructor.</p>

<p>The corrected part should read:</p>

<pre><code>byte[] salt = parts[1].getBytes(""utf-8"");
byte[] hash = fromHex(parts[2]);
PBEKeySpec spec = new PBEKeySpec(originalPassword.toCharArray(), salt, 1000, 20*8);
</code></pre>

<p>Replace that and the code works. It took a while to find this out ;)</p>
","472","<java><python><sha512><pbkdf2>","3","3","1","2017-07-30 20:17:07","45404183","3","1","2612002","","2017-06-30 23:51:27","2017-04-21 11:45:06",""
"19961299","PBKDBF2 hash - duplicating functionality of .NET rfc2898DerivedBytes class in PHP","<p>I have a .NET web site built using MVC that has a user-management module. This module generates user passwords hashed conforming to the RFC2898 spec and stores them in a db. The specific implementation I'm using is the quick and convenient method found in <code>System.Web.Helpers.Crypto.HashPassword()</code>.</p>

<p>Looking at the source code for that method as found <a href=""http://aspnetwebstack.codeplex.com/SourceControl/latest#src/System.Web.Helpers/Crypto.cs"" rel=""nofollow"">here</a>, it is wrapping a call to the Rfc2898DeriveBytes class, which actually creates the hash.</p>

<p>So far so good. The problem I'm facing is that we have a web service written in PHP that must do the actual user authentication. This means it must be able to receive a raw password from a user and generate the same hash. </p>

<p>The NET <code>Crypto.HashPassword()</code> function creates a base64 encoded string that contains the salt as well as the key. We are correctly (I think) extracting this data in the below PHP implementation so the salt input should be the same. </p>

<p>Both implementations also perform 1000 iterations.</p>

<p>Our PHP implementation:</p>

<pre><code>    function hashtest(){ 
               //password from user
                $pass = ""Welcome4"";

                //hash generated by Crypto.HashPassword()
                $hashed_pass = ""AP4S5RIkCIT1caoSUocllccY2kXQ5UUDv4iiPCkEELcDK0fhG7Uy+zD0y0FwowI6hA=="";

                $decode_val = base64_decode($hashed_pass);
                echo ""&lt;br/&gt;Decoded value is: "".$decode_val;
                echo ""&lt;br/&gt;Length of decoded string is: "".strlen($decode_val);

                $salt = substr($decode_val, 1, 16);
                $key = substr($decode_val, 17, 49);
                echo ""&lt;br/&gt;Salt is: "".$salt.""&lt;br/&gt;Key is: "".$key;

                $result = $this-&gt;pbkdf2(""sha256"", $pass, $salt, 1000, 32, true);
                echo ""&lt;br/&gt;PBKDF2 result is: "".$result;

                if($key == $result)
                        echo ""&lt;br/&gt;MATCHED!"";
                else
                        echo ""&lt;br/&gt;NOT MATCHED"";

And the pbkdbf2 implementation:

                function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false){    

                    $algorithm = strtolower($algorithm);
                    if(!in_array($algorithm, hash_algos(), true))
                        die('PBKDF2 ERROR: Invalid hash algorithm.');
                    if($count &lt;= 0 || $key_length &lt;= 0)
                        die('PBKDF2 ERROR: Invalid parameters.'); 

                    $hash_length = strlen(hash($algorithm, """", true));
                    $block_count = ceil($key_length / $hash_length);

                    $output = """";

                    for($i = 1; $i &lt;= $block_count; $i++) {
                        // $i encoded as 4 bytes, big endian.

                        $last = $salt . pack(""N"", $i);
                        // first iteration

                        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
                        // perform the other $count - 1 iterations

                        for ($j = 1; $j &lt; $count; $j++) {
                            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));

                        }
                        $output .= $xorsum;

                    } 

                    if($raw_output)
                        return substr($output, 0, $key_length);
                    else
                        return bin2hex(substr($output, 0, $key_length));
                }
</code></pre>

<p>So my question is: Can anyone tell me if this PHP implementation supposed to generate the same output as the .NET Rfc2898DerivedBytes implementation? They are both supposedly conforming to RFC2898. </p>

<p>I'm not a domain expert in this subject matter, so it's possible we're missing something obvious here..</p>

<p>Thanks in advance!</p>
","<p>1) <code>Crypto.HashPassword()</code> uses SHA1 and your PHP code uses SHA256.
2) The password needs to be UTF8-encoded (doesn't matter for plain latin passwords, but do it anyway).</p>

<p>Also, you <code>$hashed_pass</code> is incorrect (it does NOT correspond to ""Welcome4"" given the salt). Please, <strong>never</strong> do such things. It wasted a lot of my time. An example of real hash for Welcome4"" is <code>ALtF3x2vx6u6gJIOm1MdTNwvL4yNBeKjuwscgkLgJUAI9TE2N8nYTjanAuXJjcqYpA==</code>. Try it.</p>

<p>So, the correct call is:</p>

<pre><code>$result = $this-&gt;pbkdf2(""sha1"", utf8_encode($pass), $salt, 1000, 32, true);
</code></pre>
","460","<c#><php><hash><pbkdf2>","0","2","1","2013-11-19 03:56:50","20061464","0","","","","","2013-11-13 18:14:17",""
"36224628","Java's implementation of PBKDF2 with HMAC SHA1 return different hash every time an button is pushed?","<p>I created a simple GUI with a password field, a enter button and a text area to display generated hash of password when enter button is pushed. But when I press the button again, the hash is change even though input password still the same. I can't compare the input password with the stored one since output hash change every time.</p>

<p>Here is the code:</p>

<pre><code>import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;

public PBKDF2() {
    initComponents();
}

private void initComponents() {//""Generated Code""
...... 
}

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
    password= jPasswordField1.getPassword();
    jTextArea1.setText(null);
    try {
        jTextArea1.append(hashPassword(password.toString(), ""salt""));
    } catch (NoSuchAlgorithmException | InvalidKeySpecException ex) {
        Logger.getLogger(PBKDF2.class.getName()).log(Level.SEVERE, null, ex);
    }
}

public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PBKDF2().setVisible(true);
            }
        });
    }

 public static String hashPassword(String password, String salt) throws NoSuchAlgorithmException, InvalidKeySpecException{
    char[] pw = password.toCharArray();
    byte[] slt = salt.getBytes(StandardCharsets.UTF_8);
    PBEKeySpec spec = new PBEKeySpec(pw,slt,2000,160);
    SecretKeyFactory key = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    byte[] hashedPassword = key.generateSecret(spec).getEncoded();
    return String.format(""%X"", new BigInteger(hashedPassword));
  }

    public static char[] password;
    public javax.swing.JButton jButton1;
    public javax.swing.JPasswordField jPasswordField1;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextArea jTextArea1;
}
</code></pre>

<p>It only return the same hash every time if I call it from main method. Why is that? How to make it return the same value every time I input the same password and push the button?  </p>

<p>I think that I find out the problem when covert string to chararray back and forth. Edit method hashPassword to hashPassword(char[] password, String salt) and got it work now.</p>

<p>Somehow when convert String to CharArray, output is different everytime. Here is the test code:</p>

<pre><code>Code:
char[] pw0=""password"".toCharArray();
char[] pw1=""password"".toCharArray();

jTextArea1.append(""\nCase1: ""+hashPassword(pw0.toString(), ""salt""));
jTextArea1.append(""\nCase2:""+hashPassword(pw1.toString(), ""salt""));

Result:        
Case1: -48b7cb730ce85dd46cb2cac6960eb1971f2d30e4
Case2:64765fbdada52d536d89bf2fac72b058397e9ec9
</code></pre>

<p>It's very strange since pw0 and pw1 are equal ""password"".toCharArray(). I wonder if there's a bug in String.toCharArray()??</p>
","<p>Technically, you call</p>

<pre><code>""abc"".toCharArray().toString();
</code></pre>

<p>This will result in</p>

<pre><code>[C@abcdef10
</code></pre>

<p>So what you'll get is always another value everytime you run it.</p>

<p>What you should do is:</p>

<pre><code>jTextArea1.append(""\nCase1: ""+hashPassword(new String(pw0), ""salt""));
...
</code></pre>
","456","<java><user-interface><hash><pbkdf2>","1","3","1","2016-03-25 18:50:51","36225936","6","","6114745","","2016-03-25 18:35:36","2016-03-25 17:15:42",""
"9418999","Proper/Secure encryption of data using AES and a password","<p>Right now, this is what I am doing:
1. SHA-1 a password like ""pass123"", use the first 32 characters of the hexadecimal decoding for the key
2. Encrypt with AES-256 with just whatever the default parameters are
^Is that secure enough? </p>

<p>I need my application to encrypt data with a password, and securely. There are too many different things that come up when I google this and some things that I don't understand about it too. I am asking this as a general question, not any specific coding language (though I'm planning on using this with Java and with iOS).</p>

<p>So now that I am trying to do this more properly, please follow what I have in mind:</p>

<ol>
<li><p>Input is a password such as ""pass123"" and the data is
what I want to encrypt such as ""The bank account is 038414838 and the pin is 5931""</p></li>
<li><p>Use PBKDF2 to derive a key from the password. Parameters:
1000 iterations
length of 256bits
Salt - this one confuses me because I am not sure where to get the salt from, do I just make one up? As in, all my encryptions would always use the salt ""F"" for example (since apparently salts are 8bits which is just one character)</p></li>
<li><p>Now I take this key, and do I hash it?? Should I use something like SHA-256? Is that secure? And what is HMAC? Should I use that?
Note: Do I need to perform both steps 2 and 3 or is just one or the other okay?</p></li>
<li><p>Okay now I have the 256-bit key to do the encryption with. So I perform the encryption using AES, but here's yet another confusing part (the parameters).
I'm not really sure what are the different ""modes"" to use, apparently there's like CBC and EBC and a bunch of others
I also am not sure about the ""Initialization Vector,"" do I just make one up and always use that one?
And then what about other options, what is PKCS7Padding?</p></li>
</ol>
","<p>For your initial points:</p>

<ol>
<li>Using hexadecimals clearly splits the key size in half. Basically, you are using AES-128 security wise. Not that that is bad, but you might also go for AES-128 and use 16 bytes.</li>
<li>SHA-1 is relatively safe for key derivation, but it shouldn't be used directly because of the existence/creation of rainbow tables. For this you need a function like PBKDF2 which uses an iteration count and salt.</li>
</ol>

<p>As for the solution:</p>

<ol>
<li>You should not encrypt PIN's if that can be avoided. Please make sure your passwords are safe enough, allow pass phrases.</li>
<li>Create a random number per password and save the salt (16 bytes) with the output of PBKDF2. The salt does not have to be secret, although you might want to include a system secret to add some extra security. The salt and password are hashed, so they may have any length to be compatible with PBKDF2.</li>
<li>No, you just save the secret generated by the PBKDF2, let the PBKDF2 generate more data when required.</li>
<li>Never use ECB (not EBC). Use CBC as minimum. Note that CBC encryption does <em>not</em> provide integrity checking (somebody might change the cipher text and you might never know it) or authenticity. For that, you might want to add an additional MAC, HMAC or use an encryption mode such as GCM. PKCS7Padding (identical to PKCS5Padding in most occurences) is a simple method of adding bogus data to get N * [blocksize] bytes, required by block wise encryption.</li>
</ol>

<p>Don't forget to prepend a (random) IV to your cipher text in case you reuse your encryption keys. An IV is similar to a salt, but should be exactly [blocksize] bytes (16 for AES).</p>
","451","<encryption><passwords><aes><pbkdf2>","-1","1","1","2013-01-11 17:27:39","","0","","411022","","2013-01-11 17:27:39","2012-02-23 18:30:38",""
"21058505","pbkdf2 computation not consistent between C# and JavaScript","<p>Hi my question is I've Encrypted a password with crypto.pbkdf2 on windows azure server side Javascript I'm pretty sure that there is a public library which you can look up. The problem is I'm trying to encrypt the same password in C# on my system because I want the credentials to be universal but despite using Rfc2898DeriveBytes and the salt generated the first time I'm not able to get back to the same hashed password.</p>

<p>Thank you for your help :)</p>

<pre><code>function hash(text, salt, callback) {
  crypto.pbkdf2(text, salt, iterations, bytes, function(err, derivedKey){
    if (err) { callback(err); }
    else {
      var h = new Buffer(derivedKey).toString('base64');
      callback(null, h);
    }
  });
}
</code></pre>

<p>And the C# code:</p>

<pre><code>byte[] salt = Convert.FromBase64String(user.salt);
using (var deriveBytes = new System.Security.Cryptography.Rfc2898DeriveBytes(password, salt, 1000))
{
  byte[] newKey = deriveBytes.GetBytes(32);

  // user is the user object drawn from the database in existence
  if (Convert.ToBase64String(newKey).Equals(user.password))
  {
    FormsAuthentication.RedirectFromLoginPage(Request.Form[""username""], false);
  }
}
</code></pre>

<p>hex generated by C# = 3lRSQF5ImYlQg20CGFy2iGUpWfdP5TD0eq2cTHhLono=</p>

<p>hex generated by JS = w4PDh8K6YMKGwr3DgcObRsOsFFUgDMOJw5PCnkdAwrTCgcOOV8OCKMKFdcKRwrLCqMK2VA==</p>

<p>Salt generated by JS and used at both = /Ij0hgDsvAC1DevM7xkdGUVlozdCxXVd0lgfK2xEh2A=</p>

<p>All the above info is in base64 format</p>

<p>Another thing that might be useful</p>

<pre><code>item.salt = new Buffer(crypto.randomBytes(bytes)).toString('base64'); crypto.pbkdf2(text, salt, iterations, bytes, function(err, derivedKey){
</code></pre>

<p>which means the JS function accepts a string</p>
","<blockquote>
  <p>I want the credentials to be universal but despite using Rfc2898DeriveBytes and the salt generated the first time I'm not able to get back to the same hashed password.</p>
</blockquote>

<p>The obvious stuff is hash algorithm, salt, and iteration count. Can you confirm (for both languages):</p>

<ol>
<li>the hash algorithm</li>
<li>the salt</li>
<li>the iteration count</li>
</ol>

<p>The non-obvious is the encoding of the password and possibly salt. I included the salt because its often stored as a string.</p>

<p>To keep it portable among languages, you should use UTF-8. That's because you could encounter a default encoding, a UTF16-BE, UTF16-LE or any number of other encoding.</p>

<p>In C#, the setup would be:</p>

<pre><code>byte[] utf8_salt = Encoding.UTF8.GetBytes(salt);
byte[] utf8_pass = Encoding.UTF8.GetBytes(password);
</code></pre>

<p>You would then pass <code>utf8_salt</code> and <code>utf8_pass</code> to the <code>PBKDF2</code> function.</p>

<p>I don't know how to do the same in Javascript.</p>
","445","<c#><javascript><encryption><pbkdf2>","1","0","2","2014-01-14 14:25:34","","11","","3053234","","2014-01-11 15:47:01","2014-01-11 04:21:01",""
"21058505","pbkdf2 computation not consistent between C# and JavaScript","<p>Hi my question is I've Encrypted a password with crypto.pbkdf2 on windows azure server side Javascript I'm pretty sure that there is a public library which you can look up. The problem is I'm trying to encrypt the same password in C# on my system because I want the credentials to be universal but despite using Rfc2898DeriveBytes and the salt generated the first time I'm not able to get back to the same hashed password.</p>

<p>Thank you for your help :)</p>

<pre><code>function hash(text, salt, callback) {
  crypto.pbkdf2(text, salt, iterations, bytes, function(err, derivedKey){
    if (err) { callback(err); }
    else {
      var h = new Buffer(derivedKey).toString('base64');
      callback(null, h);
    }
  });
}
</code></pre>

<p>And the C# code:</p>

<pre><code>byte[] salt = Convert.FromBase64String(user.salt);
using (var deriveBytes = new System.Security.Cryptography.Rfc2898DeriveBytes(password, salt, 1000))
{
  byte[] newKey = deriveBytes.GetBytes(32);

  // user is the user object drawn from the database in existence
  if (Convert.ToBase64String(newKey).Equals(user.password))
  {
    FormsAuthentication.RedirectFromLoginPage(Request.Form[""username""], false);
  }
}
</code></pre>

<p>hex generated by C# = 3lRSQF5ImYlQg20CGFy2iGUpWfdP5TD0eq2cTHhLono=</p>

<p>hex generated by JS = w4PDh8K6YMKGwr3DgcObRsOsFFUgDMOJw5PCnkdAwrTCgcOOV8OCKMKFdcKRwrLCqMK2VA==</p>

<p>Salt generated by JS and used at both = /Ij0hgDsvAC1DevM7xkdGUVlozdCxXVd0lgfK2xEh2A=</p>

<p>All the above info is in base64 format</p>

<p>Another thing that might be useful</p>

<pre><code>item.salt = new Buffer(crypto.randomBytes(bytes)).toString('base64'); crypto.pbkdf2(text, salt, iterations, bytes, function(err, derivedKey){
</code></pre>

<p>which means the JS function accepts a string</p>
","<p>Alright kids daddy has figured out the answer.. took long enough..</p>

<pre><code>Buffer(encodedPassword, 'binary').toString('base64')
</code></pre>

<p>on Javascript side will suffice now the tutorial I looked at was clearly not accurate.. the 'binary' was missing. </p>

<p>Thank you all for the help :)</p>

<p>and happy new year</p>
","445","<c#><javascript><encryption><pbkdf2>","1","0","2","2014-01-14 14:25:34","","11","","3053234","","2014-01-11 15:47:01","2014-01-11 04:21:01",""
"14006667","are BCrypt and SCrypt a Key Derivation Functions?","<p>am sorry for this question, but i always find them compared to PBKDF2, so are BCrypt and SCrypt KDFs?</p>
","<p>it seems that i've found the answer:</p>

<ul>
<li>Short answer YES.</li>
<li>Long answer: look here <a href=""http://www.tarsnap.com/scrypt/scrypt.pdf"" rel=""nofollow"">PDF</a></li>
</ul>

<p>by the way, it seems that BCrypt have a limitation of 55 characters !!!</p>
","439","<bcrypt><pbkdf2><scrypt>","0","0","1","2012-12-24 20:57:22","14025635","0","","","","","2012-12-22 21:18:33",""
"43172914","Salt Length To Total Hash Length Ratio","<p>I'm using KeyDerivation.Pbkdf2 to generate password hashes, and I was wondering what the general advice is regarding the salt length compared to the overall hash length that Pbkdf2 outputs.</p>

<p>In the implementation below, I'm using HMACSHA512, and assume that the salt is 512 bits, and that the hashBitLength is also 512 bits.</p>

<pre><code>KeyDerivation.Pbkdf2(password, salt, KeyDerivationPrf.HMACSHA512, iterationCount, hashBitLength / 8);
</code></pre>

<p>I've seen an example which uses HMACSHA256, but it has the salt set to 128 bits and the overall hash bit length to 256.
Why would this approach be taken?</p>

<p>I've read that 512 bits is probably overkill, but in terms of storage, it doesn't concern me (I'm not sure how performance is impacted though, I haven't measured that).</p>

<p>Should the salt be the same length as the overall resulting hash.
Should it be half?
Or should it be anything above a certain threshold and below the overall length?</p>

<p>My gut says the way I'm doing it is correct (Aside from perhaps the 512 bit) as I suspect I'm getting maximum entropy, but I'm no cryptographer.</p>

<p>Could someone please clarify this for me?</p>
","<p>It really does not need to be that big, but let's understand why.  The purpose of the salt is:</p>

<ol>
<li>If two people have the same passwords, then the 'hashed' result should not be the same.  </li>
<li>Prevent <a href=""https://en.wikipedia.org/wiki/Rainbow_table#Defense_against_rainbow_tables"" rel=""nofollow noreferrer"">rainbow table attacks</a>.</li>
</ol>

<p>The first point can be accomplished by simply using a counter -- at least that prevents duplicates from your own database, but it might not prevent a hash of the password in your database from being the same as the hash of the same password in somebody else's database.  That brings us to the second point.</p>

<p>If one simply used a counter starting from zero, then one could construct a rainbow table based upon it.  The larger the salt, the more enormous that rainbow table would have to be to have a chance at being effective.  These tables grow exponentially with the salt size, so your salt really does not have to be that big to rule out this attack.</p>

<p>It's hard to point out exactly a minimum size, but I can assure you that 128-bits is more than enough.  I personally, as a security code auditor, would certainly not raise an issue with a salt as little as 64-bits. </p>

<p>One of the big problems with security advice on this topic is that nobody has ever analysed it -- instead you just get blind recommendations from people who claim to be experts.  I wrote a paper on <a href=""https://eprint.iacr.org/2015/387.pdf"" rel=""nofollow noreferrer"">password processing</a> making exactly this point.  Specifically see section 3 for my rant about salt.</p>

<p>Remark: to rule out rainbow tables altogether, don't use a counter.  Instead, choose your salts 'large enough' (as above) and in an unpredictable way.</p>
","437","<c#><security><hash><passwords><pbkdf2>","2","3","1","2017-04-02 22:20:45","43174079","0","","","","","2017-04-02 19:57:56",""
"26077256","PBKDF2 encryption on Laravel authentication","<p>I need to create an application with Laravel authentication system that matches password from a Django database, Django uses PBKDF2 to hash a password. (<a href=""https://docs.djangoproject.com/en/1.6/topics/auth/passwords/"" rel=""nofollow"">Django encryption info here</a>) </p>
","<p>You will need to write it. Blowfish is considered more secure though, just for your understanding.</p>
","431","<django><authentication><encryption><laravel><pbkdf2>","1","-1","1","2014-09-27 18:19:59","","0","","","","","2014-09-27 17:25:10",""
"42488736","laravel php pbkdf2 login authentication","<p>I have a existing table with hash pasword using hash_pbkdf2. For user registration, it success insert into mysql</p>

<pre><code>$string = mcrypt_create_iv(24, MCRYPT_DEV_URANDOM);
$salt = strtoupper(bin2hex($string));
$hash = hash_pbkdf2(""sha1"", $data['password'], $string, 1000, 24, true);
$hash = strtoupper(bin2hex($hash));

return User::create([
    'name' =&gt; $data['name'],
    'email' =&gt; $data['email'],
    'hashedpassword' =&gt; $hash,
    'salt' =&gt; $salt,
]);
</code></pre>

<p>I having trouble to log in using it. here is my code</p>

<pre><code>$found_salt = DB::table('users')-&gt;where('email', 'sicksand@gmail.com')-&gt;first();
$salt = $found_salt-&gt;salt;

echo ""Salt : "".$salt.""&lt;br&gt;"";
$hash = hash_pbkdf2(""sha1"", ""password"", $salt, 1000, 24, true);
$hash = strtoupper(bin2hex($hash));

$userlogin = [
    'email' =&gt; ""icksand@gmail.com"",
    'hashedpassword' =&gt; $hash
];  
echo ""Hash : "".$hash.""&lt;br&gt;"";

if(Auth::attempt($userlogin)) {
    echo ""success"";
} else {
    echo ""not success"";
}
</code></pre>

<p>The salt value is the same but the hash value does not match. Hoping someone can help. Thanks.</p>
","<p>In your first code block you salt your password with the value of $string instead of $salt, but store $salt to the database.</p>

<p>So I think you need to change this in your first code block:  </p>

<p><code>$hash = hash_pbkdf2(""sha1"", $data['password'], $string, 1000, 24, true);</code><br>
to<br>
<code>$hash = hash_pbkdf2(""sha1"", $data['password'], $salt, 1000, 24, true);</code></p>
","430","<php><mysql><laravel><hash><pbkdf2>","0","0","1","2017-03-18 20:08:14","42489129","0","","2139671","","2017-02-27 15:45:02","2017-02-27 14:50:28",""
"23376826","Batch creating seafile users (cloudstorage) with php: Password hash doesn't match","<p>I am trying to create seafile users with php. <a href=""http://www.seafile.com"" rel=""nofollow"">http://www.seafile.com</a></p>

<p>The hash of a user who is already existing looks like:</p>

<pre><code>PBKDF2SHA256$10000$9ee87caa42ed5b5fd3f62781d8df82af5e2d9e5e5250d22bf70336cc5e2fb060$478602208097c48b47042e25d026fec1b0363551a4f52aa2e2674f3093010215
</code></pre>

<p>So I assume the hashing algo is sha256 using the pbkdf2 key derivation function with 10k rounds. The first part after that should be the salt seperated by an $, then there is supposed to be the pwd hash.</p>

<p>Seafile is open-sourced so I tried to find the code for generating this hash and found <a href=""https://github.com/haiwen/ccnet/blob/master/net/server/user-mgr.c"" rel=""nofollow"">this one</a>:</p>

<p>There is a function called <code>hash_password_pbkdf2_sha256()</code> which should do this job.</p>

<p>When I'm trying to create the same hash like above with php (Password is ""12345678"")</p>

<pre><code>hash_pbkdf2('sha256', '12345678','9ee87caa42ed5b5fd3f62781d8df82af5e2d9e5e5250d22bf70336cc5e2fb060', 10000, 64)
</code></pre>

<p>I get <code>148f4d331b647bafa2b15d145814d56fbe40e13221aff6e53329680b4cadbc84</code> which is not equal to above <code>478602208097c48b47042e25d026fec1b0363551a4f52aa2e2674f3093010215</code></p>

<p>Any ideas how to fix this?</p>
","<p>The C function <code>validate_passwd_pbkdf2_sha256</code> in the file you pointed calls <code>hex_to_rawdata (salt_str, salt, SHA256_DIGEST_LENGTH)</code> before it hashes the password. PHP equivalent would be hex2bin.</p>

<pre><code>hash_pbkdf2(
  'sha256',
  '12345678',
  hex2bin('9ee87caa42ed5b5fd3f62781d8df82af5e2d9e5e5250d22bf70336cc5e2fb060'),
  10000,
  64
);
</code></pre>

<p>produces the expected <code>478602208097c48b47042e25d026fec1b0363551a4f52aa2e2674f3093010215</code></p>
","429","<php><hash><sha256><password-encryption><pbkdf2>","2","3","1","2014-05-15 05:45:29","23670177","0","2","2966689","","2014-04-30 09:52:38","2014-04-29 23:02:49",""
"26151518","Using OpenSSL's PKCS5_PBKDF2_HMAC from .NET","<p>I am attempting to utilize the PKCS5_PBKDF2_HMAC function from OpenSSL within a .NET application by utilizing a DllImport attribute as shown below. The .NET wrapper library OpenSSL.NET (<a href=""http://openssl-net.sourceforge.net/"" rel=""nofollow"">http://openssl-net.sourceforge.net/</a>) does not currently expose this OpenSSL function, so I have attempted to do so in a similar fashion but am failing due to my lack of experience with C.</p>

<pre><code>[DllImport(DLLNAME, CallingConvention = CallingConvention.Cdecl)]
public extern static int PKCS5_PBKDF2_HMAC(string pass, int passlen, byte[] salt, int saltlen, int iter, IntPtr digest, int keylen, out byte[] outBytes);
</code></pre>

<p>Here is the function signature from the OpenSSL source code:</p>

<pre><code>int PKCS5_PBKDF2_HMAC(const char *pass, int passlen, const unsigned char *salt, int saltlen, int iter, const EVP_MD *digest, int keylen, unsigned char *out)
</code></pre>

<p>I am attempting to call this using the method below, but clearly have something wrong because I consistently get ""Attempted to read or write protected memory"" on the call to PKCS5_PBKDF2_HMAC.</p>

<pre><code>public byte[] DeriveKey(MessageDigest digest, string password, byte[] salt, int iterations)
{                     
    var keyBuffer = new byte[digest.Size];
    Native.ExpectSuccess(Native.PKCS5_PBKDF2_HMAC(password, password.Length, salt, salt.Length, iterations, digest.Handle, digest.Size, out keyBuffer));

    return keyBuffer;
}
</code></pre>

<p>If someone else has been successful in doing this, or sees an error in my attempt I would appreciate any advice. </p>
","<p>After a bit of trial and error I found that I didn't need the ""out"" prefix on the outBytes parameter. The external function definition that is working for me is:</p>

<pre><code>[DllImport(DLLNAME, CallingConvention = CallingConvention.Cdecl)]
public extern static int PKCS5_PBKDF2_HMAC(string pass, int passlen, byte[] salt, int saltlen, int iter, IntPtr digest, int keylen, byte[] outBytes);
</code></pre>
","415","<.net><c><openssl><pbkdf2>","1","0","1","2014-10-27 14:31:26","26589842","0","","","","","2014-10-01 22:10:02",""
"11820254","hasher not found","<p>I'm trying to use different hashers with django 1.4. I have a hasher file 'hashers.py' in my app 'accounts', </p>

<pre><code>import hashlib

from pbkdf2 import pbkdf2
from django.contrib.auth.hashers import SHA1PasswordHasher
from django.utils.crypto import pbkdf2


class SHA512PasswordHasher(SHA1PasswordHasher):
    algorithm = ""sha512""
</code></pre>

<p>and i added to settings, </p>

<pre><code>PASSWORD_HASHERS = (
    'accounts.hashers.SHA512PasswordHasher',
)
</code></pre>

<p>I get the following exception value, </p>

<p>Exception Value:    </p>

<blockquote>
  <p>hasher not found: accounts.hashers.SHA512PasswordHasher</p>
</blockquote>

<p>also, if i don't have </p>

<blockquote>
  <p>from pbkdf2 import pbkdf2</p>
</blockquote>

<p>i get the following error, </p>

<blockquote>
  <p>Exception Value:      </p>
  
  <p>Unknown password hashing algorithm 'pbkdf2_sha256'. Did you specify it
  in the PASSWORD_HASHERS setting?</p>
</blockquote>

<p>Even when i use any of the already written hashers in the main django library. Could be a bug? </p>

<p>Anyway, why is my new hasher not being found. I followed what is written in the django documentation.
 <a href=""https://docs.djangoproject.com/en/dev/topics/auth/"" rel=""nofollow"">https://docs.djangoproject.com/en/dev/topics/auth/</a></p>
","<p>For the settings, you should be adding your hasher to the list, not replacing it. So code it like this:</p>

<pre><code>PASSWORD_HASHERS += (
    'accounts.hashers.SHA512PasswordHasher',
)
</code></pre>
","414","<django><authentication><sha><pbkdf2>","2","0","1","2013-09-14 19:54:18","","1","1","","","","2012-08-05 21:34:18",""
"45542723","PBKDF2 Excel UDF and how to concatenate INT(i)","<p>Recently I have been digging into cryptography and getting hashing and encryption functions working in Excel which I might use in a project I am working on.</p>

<p>I got simple hashing functions working using, for example:</p>

<pre><code>Function Hash(ByVal plainText As String)

    Dim utf8Encoding As Object
    Dim hashManager As Object
    Dim hashBytes() As Byte

    Set utf8Encoding = CreateObject(""System.Text.UTF8Encoding"")
    Set hashManager = CreateObject(""System.Security.Cryptography.SHA512Managed"")
    hashBytes = utf8Encoding.GetBytes_4(plainText)
    hashBytes = hashManager.ComputeHash_2(hashBytes)

    Hash = Encode(hashBytes, edHex)

    Set utf8Encoding = Nothing
    Set hashManager = Nothing

End Function
</code></pre>

<p>To encode the result I have a created a function:</p>

<pre><code>Function Encode(ByRef arrData() As Byte, ByVal dataType As endecodeDataType) As String

    Dim domDoc As Object
    Set domDoc = CreateObject(""MSXML2.DOMDocument"")

    With domDoc
        .LoadXML ""&lt;root /&gt;""
        Select Case dataType
            Case edBase64
                .DocumentElement.dataType = ""bin.base64""
            Case edHex
                .DocumentElement.dataType = ""bin.hex""
        End Select   
        .DocumentElement.nodeTypedValue = arrData
    End With

    Encode = domDoc.DocumentElement.Text

    Set domDoc = Nothing

End Function
</code></pre>

<p>These combined gives me perfectly verifiable results.
After more research I am now working on a PBKDF2 function:</p>

<ul>
<li>Specs: <a href=""https://tools.ietf.org/html/rfc2898"" rel=""nofollow noreferrer"">https://tools.ietf.org/html/rfc2898</a></li>
<li>Test vectors: <a href=""https://tools.ietf.org/html/rfc6070"" rel=""nofollow noreferrer"">https://tools.ietf.org/html/rfc6070</a></li>
</ul>

<p>My first attempt was to look into 'Rfc2898DeriveBytes' as follows:</p>

<pre><code>Dim hashManager As Object
Set hashManager = CreateObject(""System.Security.Cryptography.Rfc2898DeriveBytes"")
</code></pre>

<p>However this gives an error stating that the ActiveX component cannot be created.</p>

<p>Besides the error and for the sake of trying to understand the basics of PBKDF2, and learning to work with bits/bytes I have created the following function:</p>

<p><strong>Edit:</strong> For now I'm only focusing on dkLen &lt;= hLen</p>

<pre><code>Function PBKDF2(ByVal password As String, _
                ByVal hashIterations As Long, _
                ByVal salt As String, _
       Optional ByVal encodeHash As hashEncoding = heBase64) As Variant

    Dim utf8Encoding As Object
    Dim hashManager As Object

    Dim hmacKeyBytes() As Byte
    Dim saltBytes() As Byte

    Dim hmacBytes() As Byte
    Dim tempBytes() As Byte

    Dim i As Long

    'Create encoding and crypto objects
    Set utf8Encoding = CreateObject(""System.Text.UTF8Encoding"")
    Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA1"")

    'Encode the key and salt to bytes
    hmacKeyBytes = utf8Encoding.GetBytes_4(password)
    saltBytes = utf8Encoding.GetBytes_4(salt)

    'Concatenate salt and INT(i) - INT (i) is a four-octet encoding of the integer i, most significant octet first.

    'Set the key in the crypto class
    hashManager.key = hmacKeyBytes

    'Compute HMAC from salt
    hmacBytes = hashManager.ComputeHash_2(saltBytes)
    tempBytes = hmacBytes

    'HMAC iterations
    For i = 1 To hashIterations
        tempBytes = hashManager.ComputeHash_2(tempBytes)
        hmacBytes = XorBytes(tempBytes, hmacBytes)
    Next i

    'ToDo: extract the first dkLen octets to produce a derived key DK

    'Base64, Hex, or Byte() output
    If encodeHash = heBase64 Then
        PBKDF2 = Encode(hmacBytes, edBase64)
    ElseIf encodeHash = heHex Then
        PBKDF2 = Encode(hmacBytes, edHex)
    End If

    Set hashManager = Nothing
    Set utf8Encoding = Nothing

End Function
</code></pre>

<p>Where I defined XorBytes as:</p>

<pre><code>Function XorBytes(ByRef byte1() As Byte, ByRef byte2() As Byte) As Byte()

    Dim tempBytes() As Byte
    Dim len1 As Long
    Dim i As Long

    len1 = UBound(byte1)
    ReDim tempBytes(len1)

    For i = 0 To len1
        tempBytes(i) = byte1(i) Xor byte2(i)
    Next i

    XorBytes = tempBytes

End Function
</code></pre>

<p>I believe I have the basics correct. One thing I don't know how to solve is how to concatenate INT(i) to the salt. The specs state:</p>

<blockquote>
  <p>U_1 = PRF (P, S || INT (i))</p>
  
  <p>Here, INT (i) is a four-octet encoding of the integer i, most significant octet first.</p>
</blockquote>

<p>How do I implement this in my VBA code? I hope this gets me closer to this test vector:</p>

<ul>
<li>Input

<ul>
<li>P = ""password"" (8 octets)    </li>
<li>S = ""salt"" (4 octets)</li>
<li>c = 1 </li>
<li>dkLen = 20    </li>
</ul></li>
<li>Output

<ul>
<li>DK = 0c 60 c8 0f 96 1f 0e 71 f3 a9 b5 24 af 60 12 06 2f e0 37 a6 (20 octets)</li>
</ul></li>
</ul>
","<p>After some more fiddling the function below returns output that I can verify with:</p>

<p><a href=""https://tools.ietf.org/html/rfc6070"" rel=""nofollow noreferrer"">https://tools.ietf.org/html/rfc6070</a></p>

<p><strong>Enums</strong></p>

<pre><code>Enum hmacAlgorithm
    HMAC_MD5
    HMAC_SHA1
    HMAC_SHA256
    HMAC_SHA384
    HMAC_SHA512
End Enum

Enum hashEncoding
    heBase64
    heHex
    heNone_Bytes
End Enum
</code></pre>

<p><strong>PBKDF2 Function</strong></p>

<pre><code>Function PBKDF2(ByVal password As String, _
    ByVal salt As String, _
    ByVal hashIterations As Long, _
    ByVal algoritm As hmacAlgorithm, _
    Optional ByVal dkLen As Long, _
    Optional ByVal encodeHash As hashEncoding = heBase64) As Variant

'https://tools.ietf.org/html/rfc2898 - PKCS #5: Password-Based Cryptography Specification Version 2.0
'https://tools.ietf.org/html/rfc6070 - PKCS #5: Password-Based Key Derivation Function 2 (PBKDF2) Test Vectors
'https://en.wikipedia.org/wiki/PBKDF2

'DK = T1 || T2 || ... || Tdklen/hlen
'Ti = F(password, salt, c, i)
'
'F(Password, Salt, c, i) = U1 ^ U2 ^ ... ^ Uc
'
'U_1 = PRF (P, S || INT (i)) (INT (i) is a four-octet encoding of the integer i, most significant octet first.)
'U_2 = PRF (P, U_1)
'...
'U_c = PRF (P, U_{c-1})

Dim utf8Encoding As Object
Dim hashManager As Object

Dim hLen As Long
Dim noBlocks As Long
Dim noBlock As Long

Dim hmacKeyBytes() As Byte
Dim saltBytes() As Byte
Dim uboundSaltBytes As Long

Dim hmacBytes() As Byte
Dim tempBytes() As Byte
Dim outputBytes() As Byte

Dim i As Long
Dim j As Long

'Create utf8-encoding object
Set utf8Encoding = CreateObject(""System.Text.UTF8Encoding"")

'Create hmac object
Select Case algoritm
    Case HMAC_MD5
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACMD5"")
    Case HMAC_SHA1
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA1"")
    Case HMAC_SHA256
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA256"")
    Case HMAC_SHA384
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA384"")
    Case HMAC_SHA512
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA512"")
End Select

'Check the length of the blocks to be generated
hLen = hashManager.HashSize / 8

'Calculate amount of blocks 'T'
If dkLen = 0 Then dkLen = hLen
noBlocks = Application.WorksheetFunction.Ceiling(dkLen / hLen, 1)

'Encode the key and salt to bytes
hmacKeyBytes = utf8Encoding.GetBytes_4(password)
saltBytes = utf8Encoding.GetBytes_4(salt)

'Set the key in the crypto class
hashManager.key = hmacKeyBytes

'Get the length of the salt, add 4 to concatenate INT(I)
uboundSaltBytes = UBound(saltBytes) + 4

'Loop T1 || T2 || ... || Tdklen/hlen
For i = 1 To noBlocks

    'Salt || INT(i)
    'INT (i) is a four-octet encoding of the integer i, most significant octet first.
    tempBytes = saltBytes
    ReDim Preserve tempBytes(uboundSaltBytes)
    noBlock = i

    'Calculate INT(i) of Salt || INT(i)
    For j = 3 To 0 Step -1
        tempBytes(uboundSaltBytes - j) = Int(noBlock / (255 ^ j))
        noBlock = noBlock - Int(noBlock / (255 ^ j)) * 255 ^ j
    Next j

    'Hash U1: Salt || INT(i)
    hmacBytes = hashManager.ComputeHash_2(tempBytes)
    tempBytes = hmacBytes

    'Hash, Xor: U1 ^ U2 ^ ... ^ Uc
    For j = 1 To hashIterations - 1
        hmacBytes = hashManager.ComputeHash_2(hmacBytes)
        tempBytes = XorBytes(tempBytes, hmacBytes)
    Next j

    'For the first block outputBytes() is empty
    If i = 1 Then
        outputBytes = tempBytes
    Else
        ConcatenateArrayInPlace outputBytes, tempBytes
    End If

Next i

'Extract the first dkLen octets to produce a derived key DK:
ReDim Preserve outputBytes(dkLen - 1)

'Base64, Hex, or Byte() output
If encodeHash = heBase64 Then
    PBKDF2 = Encode(outputBytes, edBase64)
ElseIf encodeHash = heHex Then
    PBKDF2 = Encode(outputBytes, edHex)
Else
    PBKDF2 = outputBytes
End If

Set hashManager = Nothing
Set utf8Encoding = Nothing

End Function
</code></pre>

<p><strong>HMAC function</strong></p>

<pre><code>Function HMAC(ByVal plainText As String, _
    ByVal algoritm As hmacAlgorithm, _
    Optional ByVal key As String, _
    Optional ByVal decodeKey As keyDecoding = kdNone_String, _
    Optional ByVal encodeHash As hashEncoding = heBase64) As Variant

Dim hashManager As Object

Dim hashBytes() As Byte
Dim hmacKeyBytes() As Byte

'Create the specific hash manager based on the hash algoritm
Select Case algoritm
    Case HMAC_MD5
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACMD5"") 'Returns 128 bits, 16 bytes
    Case HMAC_SHA1
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA1"") 'Returns 160 bits, 20 bytes
    Case HMAC_SHA256
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA256"") 'Returns 256 bits, 32 bytes
    Case HMAC_SHA384
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA384"") 'Returns 384 bits, 48 bytes
    Case HMAC_SHA512
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA512"") 'Returns 512 bits, 64 bytes
End Select

'Encode the plaintText to bytes
hashBytes = UTF8_GetBytes(plainText)

If key = vbNullString Then

    'Get the key generated by the hashManager
    hmacKeyBytes = hashManager.key

    'Calculate the hash
    hashBytes = hashManager.ComputeHash_2(hashBytes)

    'Return encoded result
    If encodeHash = heBase64 Then
        HMAC = ""&lt;Key&gt;"" &amp; Encode(hmacKeyBytes, edBase64) &amp; ""&lt;Key&gt;"" &amp; vbCrLf &amp; Encode(hashBytes, edBase64)
    ElseIf encodeHash = heHex Then
        HMAC = ""&lt;Key&gt;"" &amp; Encode(hmacKeyBytes, edHex) &amp; ""&lt;Key&gt;"" &amp; vbCrLf &amp; Encode(hashBytes, edHex)
    End If

Else

    'Decode and set the key
    Select Case decodeKey
    Case kdBase64
        hashManager.key = Decode(key, edBase64)
    Case kdHex
        hashManager.key = Decode(key, edHex)
    Case Else
        hashManager.key = UTF8_GetBytes(key)
    End Select

    'Calculate the hash
    hashBytes = hashManager.ComputeHash_2(hashBytes)

    'Return encoded result
    If encodeHash = heBase64 Then
        HMAC = Encode(hashBytes, edBase64)
    ElseIf encodeHash = heHex Then
        HMAC = Encode(hashBytes, edHex)
    End If

End If

Set hashManager = Nothing

End Function
</code></pre>

<p><strong>Test subroutine:</strong></p>

<pre><code>Sub PBKDF2_Test()

Dim testvector As String
Dim pbkdf2_result As String

pbkdf2_result = PBKDF2(""password"", ""salt"", 1, HMAC_SHA1, 20, heHex)
testvector = ""0c60c80f961f0e71f3a9b524af6012062fe037a6""
If pbkdf2_result = testvector Then Debug.Print ""TV1: OK"" Else Debug.Print ""TV1: FAULT""

pbkdf2_result = PBKDF2(""password"", ""salt"", 2, HMAC_SHA1, 20, heHex)
testvector = ""ea6c014dc72d6f8ccd1ed92ace1d41f0d8de8957""
If pbkdf2_result = testvector Then Debug.Print ""TV2: OK"" Else Debug.Print ""TV2: FAULT""

pbkdf2_result = PBKDF2(""password"", ""salt"", 4096, HMAC_SHA1, 20, heHex)
testvector = ""4b007901b765489abead49d926f721d065a429c1""
If pbkdf2_result = testvector Then Debug.Print ""TV3: OK"" Else Debug.Print ""TV3: FAULT""

pbkdf2_result = PBKDF2(""passwordPASSWORDpassword"", ""saltSALTsaltSALTsaltSALTsaltSALTsalt"", 4096, HMAC_SHA1, 25, heHex)
testvector = ""3d2eec4fe41c849b80c8d83662c0e44a8b291a964cf2f07038""
If pbkdf2_result = testvector Then Debug.Print ""TV4: OK"" Else Debug.Print ""TV4: FAULT""

End Sub
</code></pre>

<p>I guess not the prettiest code, but it's a step forward. Feel free to improve!</p>
","411","<excel><vba><concatenation><pbkdf2>","0","0","1","2019-05-01 04:34:17","45567189","0","","6901081","","2017-09-24 23:36:06","2017-08-07 08:41:22",""
"49717731","""Error: No callback provided to pbkdf2"" when using async await","<p>I want to write an async function for pbkdf2 password hash using crypto module in Nodejs. While the randomBytes function works fine, I get the following erroron running pbkdf2 with await: ""Error: No callback provided to pbkdf2"".</p>

<p>I know a workaround could be using pbkdf2Sync() but I can't understand why the async version does not work or is it correct to await on a sync function?</p>

<p>Node v 8.10.0</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>async function hashPassword(password){
	let salt;
	let hash;
	let pass;
	try{
		salt = await Crypto.randomBytes(Config.SALT_BYTES);
		hash = await Crypto.pbkdf2(password, salt, Config.ITERATIONS, Config.HASH_BYTES, 'sha512');
		pass = salt+hash;
		return pass;
	}
	catch(err){
		console.log('ERR: ', err);
	}
}</code></pre>
</div>
</div>
</p>
","<p>The <a href=""https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback"" rel=""nofollow noreferrer"">Crypto.pbkdf2()</a> function takes 6 arguments, with the 6th being the callback which is required.</p>

<p>If you want a synchronous call you should use <a href=""https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2sync_password_salt_iterations_keylen_digest"" rel=""nofollow noreferrer"">crypto.pbkdf2Sync()</a>.</p>
","411","<node.js><async-await><pbkdf2>","1","2","2","2019-01-04 03:19:00","54032711","2","","","","","2018-04-08 12:19:05",""
"49717731","""Error: No callback provided to pbkdf2"" when using async await","<p>I want to write an async function for pbkdf2 password hash using crypto module in Nodejs. While the randomBytes function works fine, I get the following erroron running pbkdf2 with await: ""Error: No callback provided to pbkdf2"".</p>

<p>I know a workaround could be using pbkdf2Sync() but I can't understand why the async version does not work or is it correct to await on a sync function?</p>

<p>Node v 8.10.0</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>async function hashPassword(password){
	let salt;
	let hash;
	let pass;
	try{
		salt = await Crypto.randomBytes(Config.SALT_BYTES);
		hash = await Crypto.pbkdf2(password, salt, Config.ITERATIONS, Config.HASH_BYTES, 'sha512');
		pass = salt+hash;
		return pass;
	}
	catch(err){
		console.log('ERR: ', err);
	}
}</code></pre>
</div>
</div>
</p>
","<p>One solution would be to wrap the method in a promise. Any method that requires a callback can be converted into one that supports async/await in this way.</p>

<pre><code>function pbkdf2Async(password, salt, iterations, keylen, digest) {
    return new Promise( (res, rej) =&gt; {
        crypto.pbkdf2(password, salt, iterations, keylen, digest, (err, key) =&gt; {
            err ? rej(err) : res(key);
        });
    });
}
</code></pre>
","411","<node.js><async-await><pbkdf2>","1","2","2","2019-01-04 03:19:00","54032711","2","","","","","2018-04-08 12:19:05",""
"8124557","ASP.Net machinekey support for PBKDF2","<p>Does anyone know if it is possible to wrap the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.aspx"" rel=""nofollow"">MS PBKDF2 implementation</a> in a <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.keyedhashalgorithm.aspx"" rel=""nofollow"">KeyedHashAlgorithm class</a>, in order to use it from a machinekey section in web.config? If so, how is that accomplished?</p>
","<p>Finally, Zeletic wrote a <a href=""http://zetetic.net/blog/2012/3/29/strong-password-hashing-for-aspnet.html"" rel=""nofollow"">great article</a> on how to do this.</p>
","405","<web-config><membership-provider><pbkdf2>","0","0","1","2012-06-07 14:59:28","10934395","0","","50049","","2011-11-15 11:44:41","2011-11-14 16:18:48",""
"22517626","How to write ASN1 encoding in python using PyASN INTEGER (1..MAX)?","<p>I am trying to implement some encoding in Python using PyASN libraries. I have to define a class where I should implement the following :</p>

<pre><code>pbkdf2params ::= SEQUENCE {
salt OCTET STRING,
iterationCount INTEGER (1..MAX),
keyLength INTEGER (1..MAX)
}
</code></pre>

<p>And the python class I have defined is as follows:</p>

<pre><code>class pbkdf2params(univ.Sequence):
 componentType = namedtype.NamedTypes(
   namedtype.NamedType('salt', univ.OctetString()),
   namedtype.NamedType('iterationCount', univ.integer(1,MAX)), 
   namedtype.NamedType('keyLength', univ.integer(1, MAX))
   )
</code></pre>

<p>But I don't think this is correct especially for integer(1..MAX) . What have I missed? What is the MAX value it takes in this case?</p>
","<p>You need to add a <a href=""http://pyasn1.sourceforge.net/constraints.html#1.4.2"" rel=""nofollow"">value range constraint</a> to Integer object like this:</p>

<pre><code>from pyasn1.type import univ, namedtype, constraint

class Pbkdf2params(univ.Sequence):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('salt', univ.OctetString()),
        namedtype.NamedType('iterationCount', univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1,MAX)), 
        namedtype.NamedType('keyLength', univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(1, MAX))
    )
</code></pre>

<p>Whenever you attempt to initialize Integer with an out-of-range value, an exception will be thrown.</p>
","396","<python><password-encryption><asn.1><pbkdf2>","2","1","1","2014-03-20 09:25:40","22528520","0","","1599111","","2014-03-19 20:46:28","2014-03-19 20:40:46",""
"29073644","C# bcrypt and pbkdf2 verify password function difference","<p>According this reference <a href=""https://crackstation.net/hashing-security.htm#aspsourcecode"" rel=""nofollow"">source code</a>, the function <strong>SlowEquals</strong></p>

<pre><code>private static bool SlowEquals(byte[] a, byte[] b)
    {
        uint diff = (uint)a.Length ^ (uint)b.Length;
        for (int i = 0; i &lt; a.Length &amp;&amp; i &lt; b.Length; i++)
            diff |= (uint)(a[i] ^ b[i]);
        return diff == 0;
    }
</code></pre>

<p>I got the author's point to use xor &amp; or to make the compare-time to be </p>

<p>consistent, but now I'm quite confused about the <strong>BCrypt</strong>'s password </p>

<p>verification, is it need to do the same thing to avoid timing-attack?</p>

<p>Or the <strong>bcrypt</strong> already been adjust to be consistent after hashing it?</p>

<p>So it just verifies the result with ""==""?</p>

<p>Any ideas or document/articles about this? Thanks.</p>
","<p>Author of the source code is a little bit paranoid. Timing attack is a theoretical attack, applicable only when it is possible to measure precise timing. And he states this on his blog. If you are using bcrypt or PBKDF2 for password hashing in any web-client application, the timing attack is practically impossible. The network latencies make much more grey noise to reponse timings than the string comparison procedure would do.</p>

<p>Since you should setup your password hashing to be slow for attacker, yet reasonable fast for user (say 200ms for one hash), the difference in string comparison is nearly unmeasurable on classic PC.</p>

<p>If you are still concerned by timing attack, you can always add a random sleep just before string comparison.</p>
","385","<c#><pbkdf2><rfc2898><bcrypt.net>","0","1","1","2015-03-17 05:57:28","","0","","","","","2015-03-16 09:44:46",""
"25953059","Reset password in PBKDF2","<p>I store some data which is encrypted, and the key is generated based on the user's password (after hashing and salting) using PBKDF2.</p>

<p>I can implement password change requests simply by decrypting the data with the old password, then reencrypting the data with the new password.</p>

<p>However, how do I go about implementing password reset, when the user forgets their password? Should I be storing things differently to support this use case? If so, how?</p>
","<blockquote>
  <p>I can implement password change requests simply by decrypting the data
  with the old password, then reencrypting the data with the new
  password.</p>
  
  <p>However, how do I go about implementing password reset, when the user
  forgets their password? Should I be storing things differently to
  support this use case? If so, how?</p>
</blockquote>

<p>Typically you use a Content Encryption Key or CEK. The CEK is a random key, and you use it to key you block cipher and MAC that protects the file. Each file gets its own CEK and other crypto parameters, like and IV or nonce.</p>

<p>Then you use a Key Encryption Key or KEK. In you case, the KEK would be the output of you PBKDF. The KEK encrypts the CEK.</p>

<p>For recovery, you create a recovery key. Then you encrypt the CEK again under the recovery key, and move the encrypted CEK somewhere safe.</p>

<p>When it comes time to change passwords, you just re-encrypt the CEK under the new PBKDF derivation. No need to mess with the recovery key since its safe somewhere else. (Or as safe as it can be with governments issuing <a href=""http://en.wikipedia.org/wiki/National_security_letter"" rel=""nofollow"">NSLs</a> with no oversight).</p>
","380","<security><passwords><pbkdf2>","0","1","1","2014-09-21 02:14:22","","2","","426822","","2014-09-21 02:02:51","2014-09-20 20:34:50",""
"45928713","How to implement sha-512 with Crypt::PBKDF2 in Perl?","<p>So I'm looking to use SHA-512 with PBKDF2 to implement <a href=""https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki"" rel=""nofollow noreferrer"">Bitcoin BIP-039</a>. I have managed to work out that SHA-512 falls under SHA2 but when I specify that as the hashing function, even with 64 byte output, it still reports as using SHA-256. Am I missing something? I tried adding +512 to the hash_class but that didn't work.</p>

<pre><code>#!/usr/bin/perl
#
use Crypt::PBKDF2;
my $sentence=""Hellothere"";
my $salt=""mnemonic"";
my $pbkdf2 = Crypt::PBKDF2-&gt;new(
  hash_class =&gt; 'HMACSHA2', # 
  iterations =&gt; 2048,      # 
  output_len =&gt; 64,        # 
);
my $hash = $pbkdf2-&gt;generate($sentence,$salt);
print ""$hash\n"";
</code></pre>

<p>Gives</p>

<pre><code>{X-PBKDF2}HMACSHA2+256:AAAIAA:bW5lbW9uaWM=:NLw67sZbhQYsPhrEYm9e5ruslS6/ivK1vDfICtCN07rb7RuBkQxAoZIyTG7sTmsob30JwoP64Fvzpjx6Cqc+KQ==
</code></pre>
","<p>Passing this to the new() call works.</p>

<pre><code>  hash_args=&gt;{sha_size =&gt; 512}
</code></pre>



<pre><code>{X-PBKDF2}HMACSHA2+512:AAAIAA:bW5lbW9uaWM=:WG00S/OSlPeYJ/HWeIPkVdQHpSXnpzG0Ixb+j70pbgDgdCAemPBLbjYBbcUtnfSS2dzMJng73eAlGSSnDi+dDQ==
</code></pre>
","359","<perl><sha512><pbkdf2>","4","5","2","2017-09-02 19:41:20","","0","1","100754","","2017-08-29 10:58:53","2017-08-28 23:39:38",""
"45928713","How to implement sha-512 with Crypt::PBKDF2 in Perl?","<p>So I'm looking to use SHA-512 with PBKDF2 to implement <a href=""https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki"" rel=""nofollow noreferrer"">Bitcoin BIP-039</a>. I have managed to work out that SHA-512 falls under SHA2 but when I specify that as the hashing function, even with 64 byte output, it still reports as using SHA-256. Am I missing something? I tried adding +512 to the hash_class but that didn't work.</p>

<pre><code>#!/usr/bin/perl
#
use Crypt::PBKDF2;
my $sentence=""Hellothere"";
my $salt=""mnemonic"";
my $pbkdf2 = Crypt::PBKDF2-&gt;new(
  hash_class =&gt; 'HMACSHA2', # 
  iterations =&gt; 2048,      # 
  output_len =&gt; 64,        # 
);
my $hash = $pbkdf2-&gt;generate($sentence,$salt);
print ""$hash\n"";
</code></pre>

<p>Gives</p>

<pre><code>{X-PBKDF2}HMACSHA2+256:AAAIAA:bW5lbW9uaWM=:NLw67sZbhQYsPhrEYm9e5ruslS6/ivK1vDfICtCN07rb7RuBkQxAoZIyTG7sTmsob30JwoP64Fvzpjx6Cqc+KQ==
</code></pre>
","<pre><code>use Crypt::KeyDerivation 'pbkdf2';
my $data = pbkdf2(""Hellothere"", ""mnemonic"", 2048, 'SHA512', 64);
print unpack(""H*"", $data), ""\n"";
</code></pre>
","359","<perl><sha512><pbkdf2>","4","0","2","2017-09-02 19:41:20","","0","1","100754","","2017-08-29 10:58:53","2017-08-28 23:39:38",""
"36202963","How to calculate pbkdf2 SHA512 hash in C#","<p>I need a C# expert. Here is 2-line example from python:</p>

<pre><code>from passlib.context import CryptContext
print CryptContext(['pbkdf2_sha512']).encrypt('testtest')
</code></pre>

<p>Can it be achieved with C# in some reasonable number of lines?</p>
","","357","<c#><python><hash><sha512><pbkdf2>","1","","0","2016-03-24 14:44:18","","3","","","","","2016-03-24 14:44:18",""
"26721960","Cisco IOS password types - relative security","<p>Cisco has finally gotten around to offering two relatively modern ways to store passwords in configuration files:</p>

<ul>
<li>PBKDF2-HMAC-SHA256 with 20,000 iterations</li>
<li>Scrypt with N=16384, r=1, p=1 </li>
</ul>

<p>My question for the security gods is, given the two algorithms above: is one clearly better then the other, are they about the same, or are there any obvious tradeoff's that make it a hard decision?</p>
","<p>The Scrypt one is clearly better.</p>

<ul>
<li>PBKDF2 is using 20,000 iterations</li>
</ul>

<p>But SHA256 is <strong><em>extraordinarily</em></strong> easy to compute. I own a 2.5W USB stick that on SHA256 can calculate 330 million hash/sec. (i have 14 of these usb sticks, for a total of 4.6 Thash/s</p>

<ul>
<li>Those Scrypt parameters are set to use:
<ul>
<li>16,384 iterations</li>
<li>operating randomly on 2 MB of memory</li>
</ul></li>
</ul>

<p>Scrypt is very difficult to parallelize in hardware. The current <a href=""https://litecoin.info/Mining_hardware_comparison"" rel=""nofollow"">state of the art of scrypt hashing can do about 1.3 million hash/sec</a>, while consuming about 900W.</p>

<pre><code>| Algorithm |  Power | Speed           | 
|-----------|--------|-----------------|
| PBKDF2    |   2.5W | 330,000,000 H/s |
| Scrypt    | 900W   |   1,300,000 H/s |
</code></pre>
","356","<hash><passwords><pbkdf2><cisco-ios><scrypt>","-1","0","1","2015-06-15 20:37:37","","0","","","","","2014-11-03 19:50:22",""
"10884064","Is the same key derived providing the same salt and password using Rfc2898DeriveBytes","<p>I read <a href=""http://www.codeproject.com/Articles/38804/Encryption-and-Decryption-on-the-NET-Framework"" rel=""nofollow"">this tutorial</a> about encryption in .NET</p>

<p>it uses Rfc2898DeriveBytes to create a random key to be used by symmetric algorithm . but it doesn't save the key . and later in decryption method it supplies the same password and salt and decrypts the text .</p>

<p>does it mean supplying the same salt and password to Rfc2898DeriveBytes could derived the same key ? no need to save the key and just save salt and password ?</p>
","<p>Yes, that is correct.  Identical inputs to  Rfc2898DeriveBytes provide identical outputs.   Otherwise, decryption would not be possible. </p>

<p>The article you reference uses the term ""random"" loosely. The output of Rfc2898DeriveBytes is not random: but it has high entropy. </p>
","347","<asp.net><salt><encryption-symmetric><pbkdf2>","0","1","1","2012-06-10 21:02:19","10972332","0","","","","","2012-06-04 15:41:04",""
"56572677","Java - Python AES encryption decryption","<p>I have an encrypted text from Java(v8) using AES, which I am trying to decrypt in python using same SecretKey, Salt but I am getting issue while unpading about index out of range. When I do the reverse i.e encrypt in python and decrypt in java then I am able to get the text but with some unwanted prefix.</p>

<p>Following is my java and python code, which I have tried.</p>

<p>Java Code(Base64 from org.apache.commons.codec.binary.Base64)</p>

<pre><code>public static String encrypt(String secretKey, String salt, String value) throws Exception {
        Cipher cipher = initCipher(secretKey, salt, Cipher.ENCRYPT_MODE);
        byte[] encrypted = cipher.doFinal(value.getBytes());
        return Base64.encodeBase64String(encrypted);
    }

    public static String decrypt(String secretKey, String salt, String encrypted) throws Exception {
        Cipher cipher = initCipher(secretKey, salt, Cipher.DECRYPT_MODE);
        byte[] original = cipher.doFinal(Base64.decodeBase64(encrypted));
        return new String(original);
    }

    private static Cipher initCipher(String secretKey, String salt, int mode) throws Exception {

        SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");

        KeySpec spec = new PBEKeySpec(secretKey.toCharArray(), salt.getBytes(), 65536, 256);
        SecretKey tmp = factory.generateSecret(spec);
        SecretKeySpec skeySpec = new SecretKeySpec(tmp.getEncoded(), ""AES"");

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5PADDING"");
        cipher.init(mode, skeySpec, new IvParameterSpec(new byte[16]));
        return cipher;
    }

    public static void main(String[] args) throws Exception {
        String secretKey = ""Secret"";
        String fSalt = ""tJHnN5b1i6wvXMwzYMRk"";
        String plainText = ""England"";

        String cipherText = encrypt(secretKey, fSalt, plainText);
        System.out.println(""Cipher: "" + cipherText);
//      cipherText = ""6peDTxE1xgLE4hTGg0PKTnuuhFC1Vftsd7NH9DF/7WM=""; // Cipher from python
        String dcrCipherText = decrypt(secretKey, fSalt, cipherText);
        System.out.println(dcrCipherText);

    }
</code></pre>

<p>Python Code(version 3.6) &amp; Pycrypto V2.6</p>

<pre><code>import base64
import hashlib
import os

from Crypto.Cipher import AES

BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)

# unpad = lambda s: s[:-ord(s[len(s) - 1:])]
unpad = lambda s: s[0:-s[-1]]

def get_private_key(secretKey, salt):
    key = hashlib.pbkdf2_hmac('SHA256', secretKey.encode(), salt.encode(), 65536, 32)
    return key


def encrypt(message, salt, secretKey):
    private_key = get_private_key(secretKey, salt)
    message = pad(message)
    iv = os.urandom(BS)  # 128-bit IV
    cipher = AES.new(private_key, AES.MODE_CBC, iv, segment_size=256)
    return base64.b64encode(iv + cipher.encrypt(message))


def decrypt(enc, salt, secretKey):
    private_key = get_private_key(secretKey, salt)
    enc = base64.b64decode(enc)
    iv = enc[:BS]
    cipher = AES.new(private_key, AES.MODE_CBC, iv, segment_size=256)
    return unpad(cipher.decrypt(enc[BS:]))


secretKey = ""Secret""
salt = ""tJHnN5b1i6wvXMwzYMRk""
plainText = ""England""
cipher = encrypt(plainText, salt, secretKey)
print(""Cipher: "" + bytes.decode(cipher))

# cipher = ""0JrZdg9YBRshfTdr1d4zwQ=="" # Cipher from java
decrypted = decrypt(cipher, salt, secretKey)
print(""Decrypted "" + bytes.decode(decrypted))
</code></pre>

<p>Java Decrypt output: <code>�U�����or���England</code> when I pass python cipher, expected: <code>England</code>
Python Decrypt output: <code>unpad = lambda s : s[0:-s[-1]]
IndexError: index out of range</code>, expected: <code>England</code></p>

<p>I went through other post as well on stack regarding this issue but, it doesn't worked out as they have used different mode.</p>
","<p>In python, you're storing the iv (initialization vector) in the first 16 bytes of the encrypted message. </p>

<p>In Java, you're doing no such thing - you're passing an empty IV and you treat the whole message including the first 16 bytes as ciphertext.</p>

<p>You need to make sure that Java and Python match up.</p>

<p>Either you don't use an IV in both, in which case you remove that part in Python. </p>

<p>Or you use an IV in both, in which case you need to update your Java code to generate a random IV on encryption, adding it to the result of the encryption. On decryption, the Java code needs to take the first 16 bytes as the IV and pass it to the <code>Cipher</code>.</p>
","347","<java><python><aes><pycrypto><pbkdf2>","0","1","1","2019-06-13 03:19:55","56572937","0","1","","","","2019-06-13 02:41:07",""
"12696314","what are appropriate PBKDF2 settings?","<p>I have a few questions about what are appropriate PBKDF2 settings. I googled for answers and came up mostly empty handed. </p>

<p>Basically, I would like to know what are appropriate values for the input pbkdf2.php (found <a href=""https://defuse.ca/php-pbkdf2.htm"" rel=""nofollow"">here</a>) considering the state of technology in 2012. What will give me a reasonable expectation that the passwords I encode will not be hackable by non governmental entities for the next few years?</p>

<p>Here is what I am considering:</p>

<pre><code>define(""PBKDF2_HASH_ALGORITHM"", ""sha512"");
define(""PBKDF2_ITERATIONS"", 20000);
define(""PBKDF2_SALT_BYTES"", 512);
define(""PBKDF2_HASH_BYTES"", 512);
</code></pre>

<p>I understand that there are many other things that come into play to create good security. Here is a synopsis of other security measures I am using:</p>

<ul>
<li>12 digit password with at least 2 numbers, 2 letters, and two symbols</li>
<li>required password changes every 6 months</li>
<li>php mysqli prepared statements for all database access</li>
<li>tokens on all my forms</li>
<li>5 second delay for incorrect logins,</li>
<li>blacklist after 10 incorrect logins from the same IP</li>
<li>incorrect logins and blacklist trigger the same response</li>
<li>HTTPS</li>
<li>I am using session and I change the session identifier every 10 pages
and on sensitive pages, every time the page is accessed.</li>
</ul>

<p>Am I missing anything?</p>
","<p>Just as an example, the default settings for sha512crypt in most modern Linux distros ($6$ in /etc/shadow entries) uses 5000 iterations and 16 bytes of salt.  That is plenty slow.  But I'm not going to criticize you for overkill when it comes to hashing ;)</p>
","337","<php><security><hash><passwords><pbkdf2>","2","2","2","2012-10-03 06:43:04","","0","1","","","","2012-10-02 18:45:27",""
"12696314","what are appropriate PBKDF2 settings?","<p>I have a few questions about what are appropriate PBKDF2 settings. I googled for answers and came up mostly empty handed. </p>

<p>Basically, I would like to know what are appropriate values for the input pbkdf2.php (found <a href=""https://defuse.ca/php-pbkdf2.htm"" rel=""nofollow"">here</a>) considering the state of technology in 2012. What will give me a reasonable expectation that the passwords I encode will not be hackable by non governmental entities for the next few years?</p>

<p>Here is what I am considering:</p>

<pre><code>define(""PBKDF2_HASH_ALGORITHM"", ""sha512"");
define(""PBKDF2_ITERATIONS"", 20000);
define(""PBKDF2_SALT_BYTES"", 512);
define(""PBKDF2_HASH_BYTES"", 512);
</code></pre>

<p>I understand that there are many other things that come into play to create good security. Here is a synopsis of other security measures I am using:</p>

<ul>
<li>12 digit password with at least 2 numbers, 2 letters, and two symbols</li>
<li>required password changes every 6 months</li>
<li>php mysqli prepared statements for all database access</li>
<li>tokens on all my forms</li>
<li>5 second delay for incorrect logins,</li>
<li>blacklist after 10 incorrect logins from the same IP</li>
<li>incorrect logins and blacklist trigger the same response</li>
<li>HTTPS</li>
<li>I am using session and I change the session identifier every 10 pages
and on sensitive pages, every time the page is accessed.</li>
</ul>

<p>Am I missing anything?</p>
","<p>There's no one right answer to this question because different applications call for different levels of security. The right thing to do is to benchmark your application, and use as high a setting as your server(s) can comfortably deal with in a responsive manner. (Under load tests, of course)</p>

<p>You're already much more secure than the average system just by implementing PBKDF2 in the first place rather than a ""fast"", ""message digest""-like algorithm, such as MD5 or SHA-1.</p>
","337","<php><security><hash><passwords><pbkdf2>","2","0","2","2012-10-03 06:43:04","","0","1","","","","2012-10-02 18:45:27",""
"49589526","How to get String from byte array which is generated PBKDF2 password","<p>I use solution from <a href=""https://stackoverflow.com/a/27928435/5057736"">here</a>:</p>

<pre><code>public static byte[] getEncryptedPassword(String password, byte[] salt,  int iterations,  int derivedKeyLength) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, iterations, derivedKeyLength * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
    return f.generateSecret(spec).getEncoded();
}
</code></pre>

<p>The problem is that when I do:</p>

<pre><code>System.out.println(new String(getEncryptedPassword(p,s,i,l)));
</code></pre>

<p>I get a very strange string, something like <code>���:</code>, but I want a normal string which I can save in DB. What is my mistake?</p>
","<p>If you want to convert binary data like a <code>byte[]</code> to a String you usually encode it to Hex or Base64 format. Base64 is smaller than hex, therefore I would recommend you to use this one.</p>

<p>For Base64 you can use <code>java.util.Base64</code> since Java 8:</p>

<p><code>String base64encoded = Base64.getEncoder().encodeToString(getEncryptedPassword(p,s,i,l)));</code></p>

<p>For <code>Hex</code> AFAIR Java does not contain the necessary code. You can use e.g. the <a href=""https://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/binary/Hex.html"" rel=""nofollow noreferrer"">Hex encode</a> from <a href=""https://mvnrepository.com/artifact/commons-codec/commons-codec"" rel=""nofollow noreferrer"">Apache common codec</a> :</p>

<p><code>String hexEncoded = Hex.encodeHexString(getEncryptedPassword(p,s,i,l)));</code></p>
","336","<java><security><pbkdf2>","0","2","1","2019-02-14 18:46:30","49590683","0","","","","","2018-03-31 15:43:04",""
"41942917","Does C++ has the ability to use PBKDF2 (OpenSSL)?","<p>I have been looking for a good C++ solution to PBKDF2-encryption. I have OpenSSL installed successfully and can en/decrypt string successfully.</p>

<p>However, I would like to add an extra layer by using PBKDF2-encryption, but so far I can't find a good solution how to implement it.</p>

<p>Thanks in advance.</p>

<p>P.s. I only want to use solid software solutions, such as OpenSSL e.g. so no custom made functions, for security reasons.</p>
","","330","<c++><encryption><pbkdf2>","0","","0","2017-01-30 18:26:16","","3","0","","","","2017-01-30 18:26:16",""
"48118294","Error with AWS Lambda salt and hash","<p>I've been using source code from AWS Lambda in Action - Poccia, to create users in a User Pool and Identity Pool. I keep getting the error:</p>

<pre><code>Response:
{
  ""errorMessage"": ""RequestId: f6511085-f22c-11e7-be27-534dfc5d6456 Process exited before completing request""
}

Request ID:
""f6511085-f22c-11e7-be27-534dfc5d6456""

Function Logs:
START RequestId: f6511085-f22c-11e7-be27-534dfc5d6456 Version: $LATEST
2018-01-05T15:27:38.890Z    f6511085-f22c-11e7-be27-534dfc5d6456    TypeError: Pass phrase must be a buffer
    at TypeError (native)
    at pbkdf2 (crypto.js:576:20)
    at Object.exports.pbkdf2 (crypto.js:558:10)
    at computeHash (/var/task/lib/cryptoUtils.js:10:10)
    at InternalFieldObject.ondone (/var/task/lib/cryptoUtils.js:19:4)
END RequestId: f6511085-f22c-11e7-be27-534dfc5d6456
REPORT RequestId: f6511085-f22c-11e7-be27-534dfc5d6456  Duration: 113.62 ms Billed Duration: 200 ms     Memory Size: 128 MB Max Memory Used: 33 MB  
RequestId: f6511085-f22c-11e7-be27-534dfc5d6456 Process exited before completing request
</code></pre>

<p>I'm new to AWS Services and am not sure why this error is occurring. Below is the Lambda function I'm attempting to use and following is the cryptoUtils.js script it's referencing.   </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>console.log('Loading function');
//Loading standard module, such as crypto and the AWS SDK
var AWS = require('aws-sdk');
var crypto = require('crypto');
var cryptoUtils = require('./lib/cryptoUtils.js'); //Loading the cryptoUtils.js module shared code, included in the uploaded ZIP archive
var config = require('./config.json'); //Loading the configuration in the config.json file, included in the uploaded ZIP archive


var dynamodb = new AWS.DynamoDB({
  accessKeyId: 'usingKEYfromIAM',
  secretAccessKey: 'usingKEYfromIAM',
}); //Getting the Amazon DynamoDB service object
var ses = new AWS.SES(); //Getting Amazon SES service object

function storeUser(email, password, salt, fn) { //The storeUser() function stores the new user in the DynamoDB table.
  var len = 128;
  crypto.randomBytes(len, function(err, token) { //Arandom token sent in the validation email and used to validate a user
    if (err) return fn(err);
    token = token.toString('hex');
    dynamodb.putItem({ //Putting an item in the DynamoDB table
      TableName: config.DDB_TABLE, //The table name is taken from the config.json configuration file.
      //Most of the data is string (""S""), but the verifiede attribute is Boollean (""BOOL""), 
      //new users aren't verified (false), and the randomly generated token is stored in the ""verifyToken"" attribute
      Item: {
        email: {
          S: email
        },
        passwordHash: {
          S: password
        },
        passwordSalt: {
          S: salt
        },
        verified: {
          BOOL: false
        },
        verifyToken: {
          S: token
        }
      },
      ConditionExpression: 'attribute_not_exists (email)' //This condition avoids overwriting existing users (with the same email).
    }, function(err, data) {
      if (err) return fn(err);
      else fn(null, token); //The storeUser() function returns the randomly generated token.
    });
  });
}

function sendVerificationEmail(email, token, fn) { //The send-VerificationEmail() funciton sends the verification email to the new user.
  var subject = 'Verification Email for ' + config.EXTERNAL_NAME;
  //The verification link, to the verify.hrml page, passes the randomly generated token as a query parameter.
  var verificationLink = config.VERIFICATION_PAGE + '?email=' + encodeURIComponent(email) + '&amp;verify=' + token;
  ses.sendEmail({ //Sending the email in HTML format
    Source: config.EMAIL_SOURCE,
    Destination: {
      ToAddresses: [
        email
      ]
    },
    Message: {
      Subject: {
        Data: subject
      },
      Body: {
        Html: {
          Data: '&lt;html&gt;&lt;head&gt;' + '&lt;meta http-equiv= ""Content-Type"" content=""test/html; charset=UTF-8"" /&gt;' +
            '&lt;title&gt;' + subject + '&lt;/title&gt;' + '&lt;/head&gt;&lt;body&gt;' + 'Please &lt;a href=""' + verificationLink +
            '""&gt;click here to verify your email address&lt;/a&gt; or a copy &amp; paste the following link in a browser:' +
            '&lt;br&gt;&lt;br&gt;' + '&lt;a href=""' + verificationLink + '""&gt;' + verificationLink + '&lt;/a&gt;' + '&lt;/body&gt;&lt;/html&gt;'
        }
      }
    }
  }, fn);
}

exports.handler = (event, context, callback) =&gt; { //The function that's exported and can be invoked using AWS Lambda as createUser
  //Getting the input parameters (email, password) from the event
  var email = event.email;
  var clearPassword = event.password;

  //Using compute-Hash() from cryptoUtils.js to salt the password.
  cryptoUtils.computeHash(clearPassword, function(err, salt, hash) {
    if (err) {
      callback('Error in hash: ' + err);
    } else {
      storeUser(email, hash, salt, function(err, token) { //Storing the user via the storeUser()function
        if (err) {
          if (err.code == 'ConditionalCheckFailedException') { //Checking if the database error is due to the email being already prsent in the database
            //userID already found
            callback(null, {
              created: false
            });
          } else {
            callback('Error in storUser: ' + err);
          }
        } else {
          sendVerificationEmail(email, token, function(err, data) { //Sending the verification email
            if (err) {
              callback('Error in sendVerificationEmail: ' + err);
            } else {
              callback(null, {
                created: true
              });
            }
          });
        }
      });
    }
  });
};</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var crypto = require('crypto');

function computeHash(password, salt, fn) {
  var len = 512;
  var iterations = 4096;
  var digest = 'sha512';


  if (3 == arguments.length) {
    crypto.pbkdf2(password, salt, iterations, len, digest, function(err, derivedKey) {
      if (err) return fn(err);
      else fn(null, salt, derivedKey.toString('base64'));
    });
  } else {
    fn = salt;
    crypto.randomBytes(len, function(err, solat) {
      if (err) return fn(err);
      salt = salt.toString('base64');
      computeHash(password, salt, fn);
    });
  }
}

module.exports.computeHash = computeHash;</code></pre>
</div>
</div>
</p>

<p>If anybody has any suggestions or needs more information to help me determine why the error is occurring I would greatly appreciate it. Thank you.</p>
","<p>The password you're passing is a number?</p>

<p><strong>If so:</strong></p>

<ul>
<li><p>Convert it to String.</p></li>
<li><p>If you don't want to do that, you can pass a Buffer object:</p></li>
</ul>

<blockquote>
  <p>Pass a Buffer object using the class Method <code>Buffer.from(string[, encoding])</code><br>
  <a href=""https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding"" rel=""nofollow noreferrer"">https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding</a></p>
</blockquote>

<pre><code>crypto.pbkdf2(Buffer.from(password, 'utf8'), salt, iterations, len, digest, function(err, derivedKey) {
    if (err) return fn(err);
    else fn(null, salt, derivedKey.toString('base64'));
});
</code></pre>

<p><strong>Hope it helps!</strong></p>
","325","<amazon-web-services><lambda><pbkdf2><createuser>","1","0","3","2018-07-30 02:07:00","","0","0","8120424","","2018-01-05 17:29:50","2018-01-05 17:16:10",""
"48118294","Error with AWS Lambda salt and hash","<p>I've been using source code from AWS Lambda in Action - Poccia, to create users in a User Pool and Identity Pool. I keep getting the error:</p>

<pre><code>Response:
{
  ""errorMessage"": ""RequestId: f6511085-f22c-11e7-be27-534dfc5d6456 Process exited before completing request""
}

Request ID:
""f6511085-f22c-11e7-be27-534dfc5d6456""

Function Logs:
START RequestId: f6511085-f22c-11e7-be27-534dfc5d6456 Version: $LATEST
2018-01-05T15:27:38.890Z    f6511085-f22c-11e7-be27-534dfc5d6456    TypeError: Pass phrase must be a buffer
    at TypeError (native)
    at pbkdf2 (crypto.js:576:20)
    at Object.exports.pbkdf2 (crypto.js:558:10)
    at computeHash (/var/task/lib/cryptoUtils.js:10:10)
    at InternalFieldObject.ondone (/var/task/lib/cryptoUtils.js:19:4)
END RequestId: f6511085-f22c-11e7-be27-534dfc5d6456
REPORT RequestId: f6511085-f22c-11e7-be27-534dfc5d6456  Duration: 113.62 ms Billed Duration: 200 ms     Memory Size: 128 MB Max Memory Used: 33 MB  
RequestId: f6511085-f22c-11e7-be27-534dfc5d6456 Process exited before completing request
</code></pre>

<p>I'm new to AWS Services and am not sure why this error is occurring. Below is the Lambda function I'm attempting to use and following is the cryptoUtils.js script it's referencing.   </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>console.log('Loading function');
//Loading standard module, such as crypto and the AWS SDK
var AWS = require('aws-sdk');
var crypto = require('crypto');
var cryptoUtils = require('./lib/cryptoUtils.js'); //Loading the cryptoUtils.js module shared code, included in the uploaded ZIP archive
var config = require('./config.json'); //Loading the configuration in the config.json file, included in the uploaded ZIP archive


var dynamodb = new AWS.DynamoDB({
  accessKeyId: 'usingKEYfromIAM',
  secretAccessKey: 'usingKEYfromIAM',
}); //Getting the Amazon DynamoDB service object
var ses = new AWS.SES(); //Getting Amazon SES service object

function storeUser(email, password, salt, fn) { //The storeUser() function stores the new user in the DynamoDB table.
  var len = 128;
  crypto.randomBytes(len, function(err, token) { //Arandom token sent in the validation email and used to validate a user
    if (err) return fn(err);
    token = token.toString('hex');
    dynamodb.putItem({ //Putting an item in the DynamoDB table
      TableName: config.DDB_TABLE, //The table name is taken from the config.json configuration file.
      //Most of the data is string (""S""), but the verifiede attribute is Boollean (""BOOL""), 
      //new users aren't verified (false), and the randomly generated token is stored in the ""verifyToken"" attribute
      Item: {
        email: {
          S: email
        },
        passwordHash: {
          S: password
        },
        passwordSalt: {
          S: salt
        },
        verified: {
          BOOL: false
        },
        verifyToken: {
          S: token
        }
      },
      ConditionExpression: 'attribute_not_exists (email)' //This condition avoids overwriting existing users (with the same email).
    }, function(err, data) {
      if (err) return fn(err);
      else fn(null, token); //The storeUser() function returns the randomly generated token.
    });
  });
}

function sendVerificationEmail(email, token, fn) { //The send-VerificationEmail() funciton sends the verification email to the new user.
  var subject = 'Verification Email for ' + config.EXTERNAL_NAME;
  //The verification link, to the verify.hrml page, passes the randomly generated token as a query parameter.
  var verificationLink = config.VERIFICATION_PAGE + '?email=' + encodeURIComponent(email) + '&amp;verify=' + token;
  ses.sendEmail({ //Sending the email in HTML format
    Source: config.EMAIL_SOURCE,
    Destination: {
      ToAddresses: [
        email
      ]
    },
    Message: {
      Subject: {
        Data: subject
      },
      Body: {
        Html: {
          Data: '&lt;html&gt;&lt;head&gt;' + '&lt;meta http-equiv= ""Content-Type"" content=""test/html; charset=UTF-8"" /&gt;' +
            '&lt;title&gt;' + subject + '&lt;/title&gt;' + '&lt;/head&gt;&lt;body&gt;' + 'Please &lt;a href=""' + verificationLink +
            '""&gt;click here to verify your email address&lt;/a&gt; or a copy &amp; paste the following link in a browser:' +
            '&lt;br&gt;&lt;br&gt;' + '&lt;a href=""' + verificationLink + '""&gt;' + verificationLink + '&lt;/a&gt;' + '&lt;/body&gt;&lt;/html&gt;'
        }
      }
    }
  }, fn);
}

exports.handler = (event, context, callback) =&gt; { //The function that's exported and can be invoked using AWS Lambda as createUser
  //Getting the input parameters (email, password) from the event
  var email = event.email;
  var clearPassword = event.password;

  //Using compute-Hash() from cryptoUtils.js to salt the password.
  cryptoUtils.computeHash(clearPassword, function(err, salt, hash) {
    if (err) {
      callback('Error in hash: ' + err);
    } else {
      storeUser(email, hash, salt, function(err, token) { //Storing the user via the storeUser()function
        if (err) {
          if (err.code == 'ConditionalCheckFailedException') { //Checking if the database error is due to the email being already prsent in the database
            //userID already found
            callback(null, {
              created: false
            });
          } else {
            callback('Error in storUser: ' + err);
          }
        } else {
          sendVerificationEmail(email, token, function(err, data) { //Sending the verification email
            if (err) {
              callback('Error in sendVerificationEmail: ' + err);
            } else {
              callback(null, {
                created: true
              });
            }
          });
        }
      });
    }
  });
};</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var crypto = require('crypto');

function computeHash(password, salt, fn) {
  var len = 512;
  var iterations = 4096;
  var digest = 'sha512';


  if (3 == arguments.length) {
    crypto.pbkdf2(password, salt, iterations, len, digest, function(err, derivedKey) {
      if (err) return fn(err);
      else fn(null, salt, derivedKey.toString('base64'));
    });
  } else {
    fn = salt;
    crypto.randomBytes(len, function(err, solat) {
      if (err) return fn(err);
      salt = salt.toString('base64');
      computeHash(password, salt, fn);
    });
  }
}

module.exports.computeHash = computeHash;</code></pre>
</div>
</div>
</p>

<p>If anybody has any suggestions or needs more information to help me determine why the error is occurring I would greatly appreciate it. Thank you.</p>
","<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var crypto = require('crypto');

function computeHash(password, salt, fn) {
	// Bytesize. The larger the numbers, the better the security, but the longer it will take to complete
	var len = 512;
	var iterations = 4096;
	var digest = 'sha512';

	if (3 == arguments.length) {
	crypto.pbkdf2(Buffer.from(password, 'utf8'), salt, iterations, len, digest, function(err, derivedKey) {
    if (err) return fn(err);
    else fn(null, salt, derivedKey.toString('base64'));
});
	} else {
		fn = salt;
		crypto.randomBytes(len, function(err, salt) {
			if (err) return fn(err);
			salt = salt.toString('base64');
			computeHash(password, salt, fn);
		});
	}
}

module.exports.computeHash = computeHash;</code></pre>
</div>
</div>
</p>
","325","<amazon-web-services><lambda><pbkdf2><createuser>","1","0","3","2018-07-30 02:07:00","","0","0","8120424","","2018-01-05 17:29:50","2018-01-05 17:16:10",""
"48118294","Error with AWS Lambda salt and hash","<p>I've been using source code from AWS Lambda in Action - Poccia, to create users in a User Pool and Identity Pool. I keep getting the error:</p>

<pre><code>Response:
{
  ""errorMessage"": ""RequestId: f6511085-f22c-11e7-be27-534dfc5d6456 Process exited before completing request""
}

Request ID:
""f6511085-f22c-11e7-be27-534dfc5d6456""

Function Logs:
START RequestId: f6511085-f22c-11e7-be27-534dfc5d6456 Version: $LATEST
2018-01-05T15:27:38.890Z    f6511085-f22c-11e7-be27-534dfc5d6456    TypeError: Pass phrase must be a buffer
    at TypeError (native)
    at pbkdf2 (crypto.js:576:20)
    at Object.exports.pbkdf2 (crypto.js:558:10)
    at computeHash (/var/task/lib/cryptoUtils.js:10:10)
    at InternalFieldObject.ondone (/var/task/lib/cryptoUtils.js:19:4)
END RequestId: f6511085-f22c-11e7-be27-534dfc5d6456
REPORT RequestId: f6511085-f22c-11e7-be27-534dfc5d6456  Duration: 113.62 ms Billed Duration: 200 ms     Memory Size: 128 MB Max Memory Used: 33 MB  
RequestId: f6511085-f22c-11e7-be27-534dfc5d6456 Process exited before completing request
</code></pre>

<p>I'm new to AWS Services and am not sure why this error is occurring. Below is the Lambda function I'm attempting to use and following is the cryptoUtils.js script it's referencing.   </p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>console.log('Loading function');
//Loading standard module, such as crypto and the AWS SDK
var AWS = require('aws-sdk');
var crypto = require('crypto');
var cryptoUtils = require('./lib/cryptoUtils.js'); //Loading the cryptoUtils.js module shared code, included in the uploaded ZIP archive
var config = require('./config.json'); //Loading the configuration in the config.json file, included in the uploaded ZIP archive


var dynamodb = new AWS.DynamoDB({
  accessKeyId: 'usingKEYfromIAM',
  secretAccessKey: 'usingKEYfromIAM',
}); //Getting the Amazon DynamoDB service object
var ses = new AWS.SES(); //Getting Amazon SES service object

function storeUser(email, password, salt, fn) { //The storeUser() function stores the new user in the DynamoDB table.
  var len = 128;
  crypto.randomBytes(len, function(err, token) { //Arandom token sent in the validation email and used to validate a user
    if (err) return fn(err);
    token = token.toString('hex');
    dynamodb.putItem({ //Putting an item in the DynamoDB table
      TableName: config.DDB_TABLE, //The table name is taken from the config.json configuration file.
      //Most of the data is string (""S""), but the verifiede attribute is Boollean (""BOOL""), 
      //new users aren't verified (false), and the randomly generated token is stored in the ""verifyToken"" attribute
      Item: {
        email: {
          S: email
        },
        passwordHash: {
          S: password
        },
        passwordSalt: {
          S: salt
        },
        verified: {
          BOOL: false
        },
        verifyToken: {
          S: token
        }
      },
      ConditionExpression: 'attribute_not_exists (email)' //This condition avoids overwriting existing users (with the same email).
    }, function(err, data) {
      if (err) return fn(err);
      else fn(null, token); //The storeUser() function returns the randomly generated token.
    });
  });
}

function sendVerificationEmail(email, token, fn) { //The send-VerificationEmail() funciton sends the verification email to the new user.
  var subject = 'Verification Email for ' + config.EXTERNAL_NAME;
  //The verification link, to the verify.hrml page, passes the randomly generated token as a query parameter.
  var verificationLink = config.VERIFICATION_PAGE + '?email=' + encodeURIComponent(email) + '&amp;verify=' + token;
  ses.sendEmail({ //Sending the email in HTML format
    Source: config.EMAIL_SOURCE,
    Destination: {
      ToAddresses: [
        email
      ]
    },
    Message: {
      Subject: {
        Data: subject
      },
      Body: {
        Html: {
          Data: '&lt;html&gt;&lt;head&gt;' + '&lt;meta http-equiv= ""Content-Type"" content=""test/html; charset=UTF-8"" /&gt;' +
            '&lt;title&gt;' + subject + '&lt;/title&gt;' + '&lt;/head&gt;&lt;body&gt;' + 'Please &lt;a href=""' + verificationLink +
            '""&gt;click here to verify your email address&lt;/a&gt; or a copy &amp; paste the following link in a browser:' +
            '&lt;br&gt;&lt;br&gt;' + '&lt;a href=""' + verificationLink + '""&gt;' + verificationLink + '&lt;/a&gt;' + '&lt;/body&gt;&lt;/html&gt;'
        }
      }
    }
  }, fn);
}

exports.handler = (event, context, callback) =&gt; { //The function that's exported and can be invoked using AWS Lambda as createUser
  //Getting the input parameters (email, password) from the event
  var email = event.email;
  var clearPassword = event.password;

  //Using compute-Hash() from cryptoUtils.js to salt the password.
  cryptoUtils.computeHash(clearPassword, function(err, salt, hash) {
    if (err) {
      callback('Error in hash: ' + err);
    } else {
      storeUser(email, hash, salt, function(err, token) { //Storing the user via the storeUser()function
        if (err) {
          if (err.code == 'ConditionalCheckFailedException') { //Checking if the database error is due to the email being already prsent in the database
            //userID already found
            callback(null, {
              created: false
            });
          } else {
            callback('Error in storUser: ' + err);
          }
        } else {
          sendVerificationEmail(email, token, function(err, data) { //Sending the verification email
            if (err) {
              callback('Error in sendVerificationEmail: ' + err);
            } else {
              callback(null, {
                created: true
              });
            }
          });
        }
      });
    }
  });
};</code></pre>
</div>
</div>
</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var crypto = require('crypto');

function computeHash(password, salt, fn) {
  var len = 512;
  var iterations = 4096;
  var digest = 'sha512';


  if (3 == arguments.length) {
    crypto.pbkdf2(password, salt, iterations, len, digest, function(err, derivedKey) {
      if (err) return fn(err);
      else fn(null, salt, derivedKey.toString('base64'));
    });
  } else {
    fn = salt;
    crypto.randomBytes(len, function(err, solat) {
      if (err) return fn(err);
      salt = salt.toString('base64');
      computeHash(password, salt, fn);
    });
  }
}

module.exports.computeHash = computeHash;</code></pre>
</div>
</div>
</p>

<p>If anybody has any suggestions or needs more information to help me determine why the error is occurring I would greatly appreciate it. Thank you.</p>
","<blockquote>
  <p>Error ""TypeError: Pass phrase must be a buffer""</p>
</blockquote>

<p>does suggest trying a Buffer conversion of input String</p>

<p>Before your test of  <code>Buffer.from(password, 'utf8')</code></p>

<p>did you verify input value is encoding 'utf8', 
and not some other encoding such as base64 or latin1 ? </p>

<p><a href=""https://stackoverflow.com/questions/14551608/list-of-encodings-that-node-js-supports"">List of encodings that Node.js supports</a></p>
","325","<amazon-web-services><lambda><pbkdf2><createuser>","1","0","3","2018-07-30 02:07:00","","0","0","8120424","","2018-01-05 17:29:50","2018-01-05 17:16:10",""
"35906520","Java PBKDF2 With Hmac SHA512 high concurrent issue","<pre><code>        SecretKeyFactory kf = SecretKeyFactory.getInstance(PBKDF2WithHmacSHA512);
        PBEKeySpec ks = new PBEKeySpec(password.toCharArray(), salt, count, keylen);
        SecretKey pbeKey = kf.generateSecret(ks);
        System.out.println(new BASE64Encoder().encode(pbeKey.getEncoded()));
</code></pre>

<p>Hello everyone, 
      I just use above code to generate encrypted key. But I found an urgent issue.  When I do a 30k high concurrent test, I find sometimes I will get some ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="" key. I think this should not be happened.
Do you guys have any suggestion? thanks a lot!</p>
","","323","<java><pbkdf2>","1","","0","2016-03-10 02:59:06","","7","","5513684","","2016-03-10 02:59:06","2016-03-10 02:30:05",""
"40610217","Iteration in password-based Key derivation function 2","<p>so I am currently learning Python and am learning about encryption methods in that language. There I found the function pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None) from the hashlib library.</p>

<p>However, the parameter ""iterations"" does not work as I expect it to. As the following simple code shows, when i try to call the function twice with one iteration, I get a different answer then when I call it once with two iterations. Since hashing functions are deterministic, both methods should yield the same result.</p>

<pre><code>import hashlib
a=hashlib.pbkdf2_hmac(""sha256"",b""hallo"",b""salt"",1)
b=hashlib.pbkdf2_hmac(""sha256"",a,b""salt"",1)
c=hashlib.pbkdf2_hmac(""sha256"",b""hallo"",b""salt"",2)
print(b)
print(c)
</code></pre>

<p>Can someone tell me what went wrong?</p>
","<p>The 2nd iterations of <a href=""https://tools.ietf.org/html/rfc2898#section-5.2"" rel=""nofollow noreferrer"">PBKDF2</a> isn't just PBKDF2(the first iteration).</p>

<p>A simplified explanation is:</p>

<ul>
<li>1 iteration: <code>HMAC(password, salt || 00000001)</code></li>
<li>2 iterations: <code>HMAC(password, HMAC(password, salt || 00000001))</code></li>
<li>PBKDF2(PBKDF2): <code>HMAC(HMAC(password, salt || 00000001), salt || 00000001)</code></li>
</ul>

<p>Note that the ""2 iterations"" and ""PBKDF2(PBKDF2)"" versions use different HMAC keys for the second computation, which is why they give different results.</p>

<p>As far as ""hashing functions are deterministic"": They are.  If you call them with the same inputs they give the same outputs.  You gave them different inputs, due to misunderstanding how the underlying algorithm works.</p>
","315","<python><python-3.x><salt><pbkdf2><hashlib>","0","1","1","2016-11-16 16:48:12","40637698","0","","7105162","","2016-11-16 08:33:23","2016-11-15 12:47:07",""
"54381661","How to generate PBKDF2 with HMAC SHA256 on Powershell Linux?","<p>I'm working on a <a href=""https://github.com/edouard-lopez/lesspass-powershell"" rel=""nofollow noreferrer"">cross-platform PowerShell implementation</a> of <a href=""https://pypi.org/project/lesspass/"" rel=""nofollow noreferrer"">lesspass-cli</a> (a stateless password manager).</p>

<h3>Python</h3>

<p>The Python implementation <a href=""https://github.com/lesspass/lesspass/blob/master/cli/lesspass/password.py#L39-L41"" rel=""nofollow noreferrer"">uses <code>PBKDF2</code> with <code>SHA256</code> for the  <code>HMAC</code></a> digest algorithm:</p>

<pre><code>hashlib.pbkdf2_hmac(
    ""sha256"", master_password.encode(""utf-8""), salt.encode(""utf-8""), 100000, 32
)
</code></pre>

<h3>Powershell/.NET</h3>

<p>I didn't find a PowerShell version for that.</p>

<p>From what I understand in the <code>.NET Core</code> documentation <a href=""https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes?view=netcore-2.2"" rel=""nofollow noreferrer""><code>System.Security.Cryptography.Rfc2898DeriveBytes</code></a> only implement <code>SHA1</code>. </p>

<p>One asnwer in <a href=""https://stackoverflow.com/q/18648084/802365"">Rfc2898 / PBKDF2 with SHA256 as digest in c#</a> point to an implement <code>SHA256</code> implementation in <code>coreFx</code>.</p>

<h3>Question</h3>

<ul>
<li>Does <code>CoreFx</code> means it's available in Powershell Linux/Windows?</li>
<li>How do I use <code>PBKDF2</code> with <code>SHA256</code> as digest in my PowerShell module?</li>
</ul>
","","313","<linux><powershell><cross-platform><sha256><pbkdf2>","0","","0","2019-01-29 01:17:06","","1","","1402846","","2019-01-29 01:17:06","2019-01-26 18:53:30",""
"27385859","PBKDF2 and C# questions","<p>i am trying to understand this key derivation function and i have some questions</p>

<p>1) in C#, seems that Rfc2898DeriveBytes implement it with SHA1, but i want to try to use SHA512 for more security. How can i use SHA512 for PBKDF2 in C#?</p>

<p>2) I read about hash collision but i dont understand it yet, so whats the proper length of salt and hash to have decent security?</p>
","<blockquote>
  <p>in C#, seems that Rfc2898DeriveBytes implement it with SHA1, but i want to try to use SHA512 for more security. How can i use SHA512 for PBKDF2 in C#?</p>
</blockquote>

<p><code>Rfc2898DeriveBytes</code> now accepts a <code>HashAlgorithmName</code> in the constructor as of .NET Framework 4.7.2.</p>

<p>For older versions of .NET:</p>

<p>This is unfortunately just a limit of the implementation of <code>Rfc2898DeriveBytes</code>, it does not let you specify the hash function. SHA512 is probably overkill, and many would argue that SHA1 is still probably safe to use. However many people <em>do</em> use SHA256. You would have to find another implementation. Microsoft made another library called <a href=""https://clrsecurity.codeplex.com/"" rel=""nofollow noreferrer"">CLR Security</a> that extends the System.Security.Cryptography namespace.</p>

<p>One of the things that it does do is use Microsoft's CNG API. It does offer an implementation of PBKDF2 that supports specifying the hash function, including SHA512. You can <a href=""https://clrsecurity.codeplex.com/SourceControl/latest#Security.Cryptography/src/BCryptPBKDF2.cs"" rel=""nofollow noreferrer"">find it on Codeplex</a>. The only downside to this is, it won't run on XP or Server 2003 since CNG was introduced in Windows Vista / Server 2008.</p>

<blockquote>
  <p>I read about hash collision but i dont understand it yet, so whats the proper length of salt and hash to have decent security?</p>
</blockquote>

<p>Your salt should be fairly long. A good example might be the salt could be the same size as the output of the hash function, so with SHA512 you would use a 64 byte salt. Generally your salt should be a big enough value that it cannot easily be brute forced. It should also be random and not some ""user"" data, like the username.</p>
","301","<c#><security><hash><pbkdf2>","2","2","1","2018-04-30 21:12:09","27432462","2","1","4342422","","2014-12-11 18:41:13","2014-12-09 18:11:28",""
"31523432","nodejs crypto.pbkdf2 in Java","<p>I'm migrating an app from NodeJs to Java and I'm struggling to re-create password encryption.</p>

<p>I've used NodeJs <a href=""https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback"" rel=""nofollow""><code>crypto.pbkdf2</code></a> as follows:</p>

<pre><code>crypto.pbkdf2(password, salt, hashIterations, hashLength, function(err, derivedKey) {
  // ...
})
</code></pre>

<p>How can I achieve the same algorithm in Java? 
I've played a bit with <a href=""http://docs.oracle.com/javase/7/docs/api/javax/crypto/spec/PBEKeySpec.html"" rel=""nofollow"">PBEKeySpec</a>, with no success so far (I mostly didn't know what I was doing). </p>

<p>In case someone more knowledgeable than me finds this useful, here is the crypto source code:</p>

<ul>
<li><a href=""https://github.com/joyent/node/blob/ef4344311e19a4f73c031508252b21712b22fe8a/lib/crypto.js#L596"" rel=""nofollow"">JavaScript</a></li>
<li><a href=""https://github.com/joyent/node/blob/370573665a4daba22655e00c8d0ae8577899d8e5/src/node_crypto.cc#L4519"" rel=""nofollow"">C++</a></li>
</ul>

<p>Thanks!</p>
","","294","<java><node.js><encryption><compatibility><pbkdf2>","0","","0","2015-07-20 18:10:19","","3","","","","","2015-07-20 18:10:19",""
"18348552","What data-types and sizes should I use to store PBKF2(sha256) Hashes and base64 salts in mysql table?","<p>I decided to secure my users passwords with PBKF2(Password-Based Key Derivation Function) as mentioned in <a href=""https://defuse.ca/php-pbkdf2.htm"" rel=""nofollow"">this article</a></p>

<p>What my problem is that I couldn't find which <strong>MySQL data type</strong> should I used to store these generated <strong>hashes and base64 salts</strong> and what length those should be. </p>

<p>Thank You  </p>
","","288","<php><mysql><database><pbkdf2>","0","","0","2013-08-21 03:49:51","","2","","","","","2013-08-21 03:49:51",""
"19732387","Password Hashing in 2013","<p>What is the ""best"" solution these today?</p>

<p>This seems a good option:
<a href=""https://defuse.ca/php-pbkdf2.htm"" rel=""nofollow"">https://defuse.ca/php-pbkdf2.htm</a></p>

<p>But then how about upgrading to PHP5.5 and using this?
<a href=""http://php.net/manual/en/function.hash-pbkdf2.php"" rel=""nofollow"">http://php.net/manual/en/function.hash-pbkdf2.php</a></p>

<p>Curious as to why the PHP site states:</p>

<blockquote>
  <p>Caution
  The PBKDF2 method can be used for hashing passwords for storage (it is NIST approved for that use). However, it should be noted that CRYPT_BLOWFISH is better suited for password storage and should be used instead via crypt().</p>
</blockquote>

<p>For PHP versions less that 5.5 would it be fair to use the defuse.ca solution, and then just switch it out after upgrading to PHP5.5?</p>

<pre><code>/*
 * PBKDF2 key derivation function as defined by RSA's PKCS #5: https://www.ietf.org/rfc/rfc2898.txt
 * $algorithm - The hash algorithm to use. Recommended: SHA256
 * $password - The password.
 * $salt - A salt that is unique to the password.
 * $count - Iteration count. Higher is better, but slower. Recommended: At least 1000.
 * $key_length - The length of the derived key in bytes.
 * $raw_output - If true, the key is returned in raw binary format. Hex encoded otherwise.
 * Returns: A $key_length-byte key derived from the password and salt.
 *
 * Test vectors can be found here: https://www.ietf.org/rfc/rfc6070.txt
 *
 * This implementation of PBKDF2 was originally created by https://defuse.ca
 * With improvements by http://www.variations-of-shadow.com
 */
function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
{
    $algorithm = strtolower($algorithm);
    if(!in_array($algorithm, hash_algos(), true))
        die('PBKDF2 ERROR: Invalid hash algorithm.');
    if($count &lt;= 0 || $key_length &lt;= 0)
        die('PBKDF2 ERROR: Invalid parameters.');

    $hash_length = strlen(hash($algorithm, """", true));
    $block_count = ceil($key_length / $hash_length);

    $output = """";
    for($i = 1; $i &lt;= $block_count; $i++) {
        // $i encoded as 4 bytes, big endian.
        $last = $salt . pack(""N"", $i);
        // first iteration
        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
        // perform the other $count - 1 iterations
        for ($j = 1; $j &lt; $count; $j++) {
            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
        }
        $output .= $xorsum;
    }

    if($raw_output)
        return substr($output, 0, $key_length);
    else
        return bin2hex(substr($output, 0, $key_length));
}
</code></pre>

<p>This is the current solution from defuse.ca, would it be fair to rename this function to hash_pbkdf2() and after upgrading to PHP5.5 transition would be nice and smooth?</p>
","<p>The accepted best practice in PHP passwords, <strong>as of PHP 5.5</strong>, is <a href=""http://php.net/password_hash"" rel=""nofollow""><code>password_hash</code></a>.  It presents a single, unified, built-in, future-compatible way to generate a secure password hash.</p>

<p>If you are using a security-updated version of 5.3.x or higher, you can use <a href=""https://github.com/ircmaxell/password_compat"" rel=""nofollow"">the password_compat library</a> instead.</p>

<p>Under the covers, the current version makes calls to <a href=""http://php.net/crypt"" rel=""nofollow""><code>crypt</code></a> with some predefined security options.  Future versions may change the default options.</p>

<p>Please be sure to carefully read the section on the <code>crypt</code> page that talks about <code>CRYPT_BLOWFISH</code> versioning, as well as review the versioning notes on the password_compat page.  </p>

<p>As noted clearly in the warning message, PBKDF2 is accepted by the NIST as an adequate way to store passwords.  You <em>can</em> use implementations of it without significant concern, but you should only do so if you either need support for PHP versions prior to 5.3, or need to support PHP versions that have a broken <code>CRYPT_BLOWFISH</code>.</p>
","288","<php><hash><passwords><pbkdf2>","3","3","1","2013-11-01 18:21:02","19732900","1","2","","","","2013-11-01 17:51:10",""
"11728298","Combining BCrypt with another hashing algorithm","<p>We are currently in the process of strengthening our password protection.
We have been doing a fair amount of reading on SHA-2, Bcrypt, PBKDF2, and Scrypt. That being said, we are not security experts or cryptographers, and a lot of the technical aspects of the subject matter goes over our heads.</p>

<p>At this point we are leaning toward implementing either PBKDF2 or Bcrypt.</p>

<p>However, we were curious as to whether or not there was a benefit to using a SHA-2 algorithm in concert with Bcrypt (it appears PBKDF2 already has to specify a hashing algorithm).
We had looked at the post:</p>

<p><a href=""https://security.stackexchange.com/questions/11552/would-it-make-sense-to-use-bcrypt-and-pbkdf2-together"">https://security.stackexchange.com/questions/11552/would-it-make-sense-to-use-bcrypt-and-pbkdf2-together</a></p>

<p>But this is really more about using both Bcrypt and PBKDF2 together, and not a SHA-2.</p>

<p>Is there a benefit of leveraging a SHA-2 algorithm with Bcrypt? Or is it wasted effort/performance for no appreciable increase in actual security?</p>

<p>Thanks in advance for any insight anyone can provide.</p>

<p>pbr</p>
","","283","<hash><bcrypt><pbkdf2><sha2>","0","","0","2012-07-30 20:02:31","","2","","-1","","2017-03-17 13:14:46","2012-07-30 19:32:51",""
"44966882","crypto pbkdf2 is not called","<p>I have written an function to hashpasswords with <code>crypto.obkdf2</code>. This function was working fine, but for some reason he doesn't anymore.</p>

<h2>EDIT</h2>

<p>In a controller I want to create an user with the user.service:</p>

<h1>account.controller:</h1>

<pre><code>userService.createAccount(details, true, function(err, result){
    if(err){
        res.status(500).json({message: err});
    }else{
        //account is created, details are mailed, now we can set the user on the order  
        user = result;
    }
})
</code></pre>

<p>The service does a few checks and call the user.register function</p>

<h1>user.service</h1>

<pre><code>function createAccount (details, generatePassword, callback){
    console.log(""createAccount"");
    //generate password, save details + password, mail details, send results back in callback
    //if(generatePassword){
    //    details.password = random(10);
    //}
    details.password = '7eb4f68ea4';

    var userData = _.pick(details, 'firstName', 'lastNamePrefix', 'lastName','email','gender', 'password');
    userData.verificationCode = random(8);
    userData.userName = userData.email;
    console.log(""userdate"", userData);
    User.register(userData, function(err, user){
        console.log(""register user"", err);

        if(err &amp;&amp; (11000 == err.code || 11001 == err.code)) {
            console.log(""E-mailadres already in use"");
            return callback(""E-mailadres already in use"");
        }

        if (err) {
            console.log(""Something went terribly wrong..."", err);
            return callback(""Something went wrong: "" + err)
        }
        var options = {
            to: user.email,
            subject: 'Uw account op Prisma Note',
            template: 'new-account'
        }
        //Mail sturen met activatielink na aanmaken
        mailService.mail(options, user, null, function(err, data){
            console.log(""sendmail!"");
            if (err) {
                console.log(""error sending mail"", err);
                return callback(""Error sending mail: "" + err.message);
            }else{
                console.log(""hier!"", user);
                return callback(null, user);
            }
        });

    })
}
</code></pre>

<p>The user.modal contains the register function:</p>

<h1>user.model</h1>

<pre><code>User.statics.register = function(opts, callback) {
    console.log(""register!"");
    var self = this;
    var data = _.cloneDeep(opts);


    passwordService.hash(opts.password, function(err, hashedPassword, salt) {
        if (err) {
            console.log(""passwordsrv"", err);
            return callback(err, null);
        }

        data.password = hashedPassword;
        data.passwordSalt = salt;
        self.model('User').create(data, function(err, user) {
            if (err) {
                console.log(""createuser"", err);
                return callback(err, null);
            }

            user.password = undefined;
            user.passwordSalt = undefined;

            callback(err, user);
        })
    })
}
</code></pre>

<p>And finally, the code comes to the passwordService</p>

<h1>password.service</h1>

<pre><code>var LEN = 256;
var SALT_LEN = 64;
var ITERATIONS = 10000;
var DIGEST = 'sha256';

function hashPassword(password, salt, callback){
    console.log(""hashPassword"");
    var len = LEN /2;
    if (3 === arguments.length) {
        crypto.pbkdf2(password, salt, ITERATIONS, len, DIGEST, function(err, derivedKey) {
            if (err) {
                console.log(""crypto err"", err);
                return callback(err);
            }

            return callback(null, derivedKey.toString('hex'));
        })
    } else {
        console.log(""pwdsrv"");
        callback = salt;
            crypto.randomBytes(SALT_LEN / 2, function(err, salt) {
                if (err) {
                    console.log(""randombyte"", err);
                    return callback(err);    
                }

                salt = salt.toString('hex');
                console.log(""hier"");

                console.log(password, salt, ITERATIONS, len, DIGEST);
                //password = '7eb4f68ea4'
                //salt = '21aaac28b8411326b8df5b8b60476904f58d40f972a2f5d698ec4d0fb57dc315'
                //ITERATIONS = 10000
                //len = 128
                //DIGEST = 'sha256'
                crypto.pbkdf2(password, salt, ITERATIONS, len, DIGEST, function(err, derivedKey) {
                    console.log(""hjioo"");
                    if (err) { 
                        console.log(""pbkdf2"", err);
                        return callback(err);
                    }
                    console.log(""hier"");
                    callback(null, derivedKey.toString('hex'), salt);
                })
            })
    }
}
</code></pre>

<p>This function is called from our 'user model'. That model has an <code>User.statics.register</code> function what we can call. After a lot of debugging lines I have found out the code stops at (in my tested cases) <code>crypto.pbkdf2(password, salt, ITERATIONS, len, DIGEST, function(err, derivedKey)</code> in the <code>else</code> of the function. The log before this function show the content of the variables, but I can't see the logs in the function.</p>

<p>I have no idea, why this is stopped working. We have updated our node.JS version, but since this is an node module, that must be no problem.</p>

<p>Can somebody help me to solve this problem, so our users can register again? </p>

<p>The mailservice, which you can see in the service, sends an email via Amazon SES, I think it is not relevant to post that code.</p>
","","278","<node.js><pbkdf2>","0","","0","2017-07-07 10:10:20","","10","","4548006","","2017-07-07 10:10:20","2017-07-07 09:10:07",""
"40705023","Hash in Human Readable Form From PBKDF2 HMac SHA1?","<p>I wonder whether using PBKDF2WithHmacSHA1 hash algorithm provided by Oracle can give a key in human readable form.</p>

<p>I tried the following code, and the hash output has some non human readable characters.</p>

<pre><code>public class PBKDF2HMacSHA1Sandbox {
     public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeySpecException 
        {
            String  originalPassword = ""mypassword?2046?!"";
            String generatedSecuredPasswordHash = generateStorngPasswordHash(originalPassword);
            System.out.println(generatedSecuredPasswordHash);
        }
        private static String generateStorngPasswordHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException
        {
            int iterations = 10000;
            char[] chars = password.toCharArray();
            byte[] salt = getSalt();

            PBEKeySpec spec = new PBEKeySpec(chars, salt, iterations, 46);
            SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
            byte[] hash = skf.generateSecret(spec).getEncoded();
            return iterations + "":"" + toHex(salt) + "":"" + new String(hash);
        }

        private static byte[] getSalt() throws NoSuchAlgorithmException
        {
            SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
            byte[] salt = new byte[16];
            sr.nextBytes(salt);
            return salt;
        }

        private static String toHex(byte[] array) throws NoSuchAlgorithmException
        {
            BigInteger bi = new BigInteger(1, array);
            String hex = bi.toString(16);
            int paddingLength = (array.length * 2) - hex.length();
            if(paddingLength &gt; 0)
            {
                return String.format(""%0""  +paddingLength + ""d"", 0) + hex;
            }else{
                return hex;
            }
        }
}
</code></pre>
","","277","<java><pbkdf2>","0","","0","2016-11-20 14:11:20","","2","","","","","2016-11-20 14:11:20",""
"48787860","Difference b/w PBKDF2 implementation in Node.js and Java","<p>I'm trying to implement a Java code which generates a PBDKF2 key in Node.js, but the result is different in both the case.
here's the Java code:</p>

<pre><code>String passphrase = ""1234"";
String salt = ""1234"";
int key_size = 128; //bits
int iteration_count = 1000;
SecretKeySpec key = null;

SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
KeySpec spec = new PBEKeySpec(passphrase.toCharArray(), hex(salt), iteration_count, key_size);
key = new SecretKeySpec(factory.generateSecret(spec).getEncoded(), ""AES"");
System.out.println(hex(key.getEncoded()));

public static byte[] hex(String str) {
    try {
        return Hex.decodeHex(str.toCharArray());
    } catch (DecoderException var2) {
        throw new IllegalStateException(var2);
    }
}
</code></pre>

<p>Output is: <code>1b1b653ea60ee1d82ecb22f7f59b7c43</code></p>

<p>Node.js code:</p>

<pre><code>var crypto = require(""crypto"");

var salt = '1234';
var passphrase = '1234';
var keySize = 16; // bytes
var iterationCount = 1000;

crypto.pbkdf2(passphrase, new Buffer(salt), iterationCount, keySize, 'sha1', function(err, key) {
    console.log(key.toString('hex'));
});
</code></pre>

<p>Output is: <code>ed5b67e667fa6bca73e1ec21dddda358</code></p>

<p>Why are the outputs different? What am I missing here?</p>
","<p>Ultimately they are giving different outputs because you have given them different inputs.</p>

<p>Your Java output matches the result for</p>

<pre><code>PBKDF2[HMACSHA1](UTF8(""1234""), HEX(""1234""), 1000, 16)
</code></pre>

<p>Your node.js output matches the result for</p>

<pre><code>PBKDF2[HMACSHA1](UTF8(""1234""), UTF8(""1234""), 1000, 16)
</code></pre>

<p>The difference being that your salt in Java was <code>{ 0x12, 0x34 }</code> and in node.js was <code>{ 0x31, 0x32, 0x33, 0x34 }</code>.</p>

<p>Presumably you want <code>new Buffer(salt, 'hex')</code> (or, since <a href=""https://nodejs.org/api/buffer.html#buffer_new_buffer_string_encoding"" rel=""nofollow noreferrer"">that constructor is deprecated</a>, <code>Buffer.from(salt, 'hex')</code>).</p>
","268","<java><node.js><encryption><pbkdf2>","2","3","1","2018-02-14 16:57:04","48792460","1","","","","","2018-02-14 12:59:46",""
"39444627","Using PBKDF2 SHA512 data in other languages","<p>I'm using <code>pbkdf2_sha512</code> as the hashing algorithm in a Flask web app.</p>

<p>I don't want to lose my user data in my database. Can I use the same hashing algorithm in the future if I want to change the backend programming language to any other language (like node.js, PHP, Ruby, etc)?</p>

<p>Will the same password hashing work for other programming languages?</p>
","<p><a href=""https://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow noreferrer"">PBKDF2</a> is a <em>standard</em>; in this case configured to use SHA512 as the hashing function. You'll find implementations for the standard in most programming languages. It is not unique to Flask or Python.</p>

<p>So yes, you can calculate the hash from any other language and test against the stored hash.</p>

<p>Example implementations in other languages:</p>

<ul>
<li>node.js: <a href=""https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback"" rel=""nofollow noreferrer""><code>crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)</code></a></li>
<li>PHP: <a href=""http://php.net/hash-pbkdf2"" rel=""nofollow noreferrer""><code>string hash_pbkdf2 ( string $algo , string $password , string $salt , int $iterations [, int $length = 0 [, bool $raw_output = false ]] )</code></a></li>
<li>Ruby: <a href=""http://www.ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/OpenSSL/PKCS5.html#method-c-pbkdf2_hmac_sha1"" rel=""nofollow noreferrer""><code>pbkdf2_hmac(pass, salt, iter, keylen, digest)</code></a></li>
</ul>
","259","<python><postgresql><flask><pbkdf2>","1","1","1","2018-02-08 08:51:40","39444678","0","1","100297","","2018-02-08 08:51:40","2016-09-12 06:42:16",""
"32401239","Shiros Sha256Hash and alternative algorithms","<p>Is Sha256Hash from Apache Shiro based upon a common specification like PBKDF2WithHmacSHA256?</p>

<p>The following example proves, Shiros Sha256Hash doesn't create a valid PBKDF2WithHmacSHA256 hashes.</p>

<pre class=""lang-java prettyprint-override""><code>public static byte[] getEncryptedPassword(
    String password,
    byte[] salt,
    int iterations,
    int derivedKeyLength
) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec keySpec = new PBEKeySpec(
        password.toCharArray(),
        salt,
        iterations,
        derivedKeyLength * 8
    );
    SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
    return f.generateSecret(keySpec).getEncoded();
}

@Test
public void testHashing(){
    byte[] salt = new SecureRandomNumberGenerator().nextBytes().getBytes();
    byte[] hash1 = new Sha256Hash(""1234"", salt, 1024).getBytes();
    byte[] hash2 = getEncryptedPassword(""1234"", salt, 1024, 32);
    assertTrue(hash1.equals(hash2));
}
</code></pre>

<p>Is there a common way to use PBKDF2WithHmacSHA256 with shiro, or do I have to implement my own CredentialMatcher?</p>
","<p>Per the <a href=""http://shiro-user.582556.n2.nabble.com/Password-hashing-with-PBKDF2-td7577741.html"" rel=""nofollow"">Shiro user list on nabble</a> no, Shiro does not provide PBKDF2 (or BCrypt or SCrypt).</p>

<p>Note that <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html"" rel=""nofollow"">Java 8 does have PBKDF2-HMAC-SHA-512 available now</a> as PBKDF2WithHmacSHA512 - use that instead.  SHA-512 in particular has 64-bit operations that reduce the advantage GPU based attackers have.  Use more iterations than just 1024, as well - see what your system can handle comfortably under load!    </p>
","258","<shiro><hmac><sha256><pbkdf2>","2","1","1","2016-02-08 06:14:17","","0","1","","","","2015-09-04 15:05:28",""
"44762842","Getting derived key with CCKeyDerivationPBKDF","<p>I have a problem with getting a pseudo-random generated derived key by using <code>CCKeyDerivationPBKDF</code> .</p>

<p>Here is the code I'm using by @zaph :</p>

<pre><code>//    password     password String
//    salt         salt Data
//    keyByteCount number of key bytes to generate
//    rounds       Iteration rounds
//    
//    returns      Derived key


func pbkdf2SHA1(password: String, salt: Data, keyByteCount: Int, rounds: Int) -&gt; Data? {
    return pbkdf2(hash:CCPseudoRandomAlgorithm(kCCPRFHmacAlgSHA1), password:password, salt:salt, keyByteCount:keyByteCount, rounds:rounds)
}

func pbkdf2SHA256(password: String, salt: Data, keyByteCount: Int, rounds: Int) -&gt; Data? {
    return pbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA256), password:password, salt:salt, keyByteCount:keyByteCount, rounds:rounds)
}

func pbkdf2SHA512(password: String, salt: Data, keyByteCount: Int, rounds: Int) -&gt; Data? {
    return pbkdf2(hash:CCPBKDFAlgorithm(kCCPRFHmacAlgSHA512), password:password, salt:salt, keyByteCount:keyByteCount, rounds:rounds)
}

func pbkdf2(hash :CCPBKDFAlgorithm, password: String, salt: Data, keyByteCount: Int, rounds: Int) -&gt; Data? {
    let passwordData = password.data(using:String.Encoding.utf8)!
    var derivedKeyData = Data(repeating:0, count:keyByteCount)

    let derivationStatus = derivedKeyData.withUnsafeMutableBytes {derivedKeyBytes in
        salt.withUnsafeBytes { saltBytes in

            CCKeyDerivationPBKDF(
                CCPBKDFAlgorithm(kCCPBKDF2),
                password, passwordData.count,
                saltBytes, salt.count,
                hash,
                UInt32(rounds),
                derivedKeyBytes, derivedKeyData.count)
        }
    }

    if (derivationStatus != 0) {
        print(""Error: \(derivationStatus)"")
        return nil;
    }



    return derivedKeyData
}
</code></pre>

<p>My problem is that it keeps generating the same derived keys for each call.
I am trying to decrypt the data that was encrypted on .Net side with the <code>Rfc2898DeriveBytes</code>:</p>

<pre><code>var saltBytes = Encoding.ASCII.GetBytes(salt);
var key = new Rfc2898DeriveBytes(Inputkey, saltBytes);

var aesAlg = new RijndaelManaged();
aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);   // default keySize 256
aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);  // default blockSize 128
</code></pre>

<p>On the .Net side, the <code>Rfc2898DeriveBytes</code> returns new random set of bytes, but my Swift code is only generating for each call the same sequence.
What is wrong with that sequence generation on Swift side?</p>

<p>Edit1: When I used the bytes sequences of Key and IV generated by <code>Rfc2898DeriveBytes</code> from .net in Swift trying to decrypt the data encrypted in .net, then it works fine.</p>

<p>Edit2: Ok, I have found out that the first time the <code>Rfc2898DeriveBytes</code> works with GetBytes method is the same result as on the Swift PBKDF2 result. The second call GetBytes gives a completly different result. Why is that? If I will solution for this, then my decryption should work.</p>

<pre><code>aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);   // (1) - the same result as in Swift implementation
aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);  // (2) - completly different result
</code></pre>

<p>Am I initializing the IV in Swift wrongly?</p>
","<p>The .NET implementation is effectively a stream. To get an equivalent answer from the Apple version you should ask for the total bytes you need in one call, then split it up into whatever pieces you need.</p>
","252","<.net><swift><aes><pbkdf2>","0","0","1","2017-09-22 18:58:15","","4","","641914","","2017-09-22 18:58:15","2017-06-26 15:09:13",""
"40291042","NodeJS pbkdf2Sync password hasing portability from v0.12.7 to v6.9.1","<p>I have been working on porting an application written from node v0.12.7 to node v6.9.1. </p>

<p>We are using MEAN stack with all of them upgraded to their latest versions.</p>

<p>We have been able to upgrade everything except for one problem. We used pbkdf2Sync method (comes inbuilt with express) for hashing passwords like so:</p>

<pre><code>/**
* Hook a pre save method to hash the password
*/
UserSchema.pre('save', function(next) {
    if (this.password &amp;&amp; this.password.length &gt; 6) {
       this.salt = new Buffer(crypto.randomBytes(16).toString('base64'), 'base64');
       this.password = this.hashPassword(this.password);
    }

    next();
});

/**
* Create instance method for hashing a password
*/
UserSchema.methods.hashPassword = function(password) {
   if (this.salt &amp;&amp; password) {
      return crypto.pbkdf2Sync(password, this.salt, 10000, 64).toString('base64');
   } else {
    return password;
   }
};
</code></pre>

<p>In the latest versions, they have changed the encoding to utf8 and also changed the pbkdf2Sync to include a mandatory digest. I am not sure what else they have changed.</p>

<p><strong>The problem:</strong></p>

<p>The passwords hashed and stored in the mongo database using earlier version of node does not match with the password generated by hashPassword function after version upgrade.</p>

<p><strong>I have tried:</strong></p>

<p>1) Specifying encoding string</p>

<p>2) Using buffers</p>

<p>3) Adding digest option as parameter</p>

<p>And I dont get the same hashed password with any of these.</p>

<p>I tried changing the hashPassword function with many combinations. One of the tries I made was this, but does not work.</p>

<pre><code>UserSchema.methods.hashPassword = function (password) {
  if (this.salt &amp;&amp; password) {
     return crypto.pbkdf2Sync(password, new Buffer(this.salt, 'base64').toString('binary'), 10000, 64, 'SHA1').toString('base64');
  } else {
    return password;
 }
};
</code></pre>

<p><strong>A test case:</strong></p>

<p>Password to hash: ramco@123</p>

<p>Salt: d\u001e'��\u0001\u0004\u0012)aq�**G\u000f</p>

<p>Result I am supposed to get: kG6uCjSk87I7PrXMko+nS8Mz/78LMilXDMJZI0mzBgi75mBpi8hIkh3+B8CqpuYZdvvs5HWjcNthhhnUA89sCw==</p>

<p>But I get some other string from the hashPassword function.</p>

<p><strong>I referred:</strong></p>

<p>The NodeJS commit made in git: 
<a href=""https://github.com/nodejs/node/commit/b010c8716498dca398e61c388859fea92296feb3"" rel=""nofollow noreferrer"">https://github.com/nodejs/node/commit/b010c8716498dca398e61c388859fea92296feb3</a></p>

<p>The express commit made in git:
<a href=""https://github.com/meanjs/mean/commit/61f1a22c91ac15f06143ace6e540b334fa9e3bd6"" rel=""nofollow noreferrer"">https://github.com/meanjs/mean/commit/61f1a22c91ac15f06143ace6e540b334fa9e3bd6</a></p>

<p>Crypto documentation:
<a href=""https://nodejs.org/api/crypto.html"" rel=""nofollow noreferrer"">https://nodejs.org/api/crypto.html</a></p>

<p><a href=""https://stackoverflow.com/questions/19337693/how-to-store-crypto-pbkdf2-in-mongodb"">How to store crypto pbkdf2 in mongoDB?</a></p>

<p>And lot of other sites and forums but did not help me. Kindly help me if you can.</p>

<p>Thanks in advance.</p>
","<p>Looks like older versions of Node used SHA-1 as digest. Also, you should pass in the salt as a binary buffer (I'm using the supplied salt string from your example, if you have stored the salt as Base64-encoded binary you can probably leave the <code>base64</code> encoding that you're using as-is and only explicitly set the correct digest).</p>

<p>The following yields the expected result:</p>

<pre><code>const crypto = require('crypto');

let password = 'ramco@123';
let salt     = `d\u001e'��\u0001\u0004\u0012)aq�**G\u000f`;

let x = crypto.pbkdf2Sync(password, new Buffer(salt, 'binary'), 10000, 64, 'sha1').toString('base64');

console.log(x);
</code></pre>
","246","<node.js><mongodb><hash><pbkdf2>","4","6","1","2016-10-27 19:58:29","40292596","0","","-1","","2017-05-23 12:00:35","2016-10-27 17:42:17",""
"18718103","Speeding up Haskell PBKDF2 algorithm","<p>I have written a new version of the PBKDF2 algorithm in Haskell. It passes almost all of the HMAC-SHA-1 test vectors listed in <a href=""http://www.ietf.org/rfc/rfc6070.txt"" rel=""nofollow"">RFC 6070</a>, but it is not very efficient. How can I improve the code?</p>

<p>When I run it on the test vectors, the third case (see below) never finishes (I left it running for more than 1/2 hour on a 2010 Macbook Pro).</p>

<p>I believe that the <code>foldl'</code> is my problem. Will <code>foldr</code> perform better, or do I need to use mutable arrays?</p>

<pre class=""lang-hs prettyprint-override""><code>{-# LANGUAGE BangPatterns #-}
{- Copyright 2013, G. Ralph Kuntz, MD. All rights reserved. LGPL License. -}

module Crypto where

import Codec.Utils (Octet)
import qualified Data.Binary as B (encode)
import Data.Bits (xor)
import qualified Data.ByteString.Lazy.Char8 as C (pack)
import qualified Data.ByteString.Lazy as L (unpack)
import Data.List (foldl')
import Data.HMAC (hmac_sha1)
import Text.Bytedump (dumpRaw)

-- Calculate the PBKDF2 as a hexadecimal string
pbkdf2
  :: ([Octet] -&gt; [Octet] -&gt; [Octet])  -- pseudo random function (HMAC)
  -&gt; Int  -- hash length in bytes
  -&gt; String  -- password
  -&gt; String  -- salt
  -&gt; Int  -- iterations
  -&gt; Int  -- derived key length in bytes
  -&gt; String
pbkdf2 prf hashLength password salt iterations keyLength =
  let
    passwordOctets = stringToOctets password
    saltOctets = stringToOctets salt
    totalBlocks =
      ceiling $ (fromIntegral keyLength :: Double) / fromIntegral hashLength
    blockIterator message acc =
      foldl' (\(a, m) _ -&gt;
        let !m' = prf passwordOctets m
        in (zipWith xor a m', m')) (acc, message) [1..iterations]
  in
    dumpRaw $ take keyLength $ foldl' (\acc block -&gt;
      acc ++ fst (blockIterator (saltOctets ++ intToOctets block)
                      (replicate hashLength 0))) [] [1..totalBlocks]
  where
    intToOctets :: Int -&gt; [Octet]
    intToOctets i =
      let a = L.unpack . B.encode $ i
      in drop (length a - 4) a

    stringToOctets :: String -&gt; [Octet]
    stringToOctets = L.unpack . C.pack

-- Calculate the PBKDF2 as a hexadecimal string using HMAC and SHA-1
pbkdf2HmacSha1
  :: String  -- password
  -&gt; String  -- salt
  -&gt; Int  -- iterations
  -&gt; Int  -- derived key length in bytes
  -&gt; String
pbkdf2HmacSha1 =
  pbkdf2 hmac_sha1 20
</code></pre>

<h2>Third test vector</h2>

<pre><code> Input:
   P = ""password"" (8 octets)
   S = ""salt"" (4 octets)
   c = 16777216
   dkLen = 20

 Output:
   DK = ee fe 3d 61 cd 4d a4 e4
        e9 94 5b 3d 6b a2 15 8c
        26 34 e9 84             (20 octets)
</code></pre>
","<p>I was able to get it to complete in ~16 min on my MacBookPro:</p>

<pre><code>% time Crypto-Main
eefe3d61cd4da4e4e9945b3d6ba2158c2634e984                          
./Crypto-Main  1027.30s user 15.34s system 100% cpu 17:22.61 total
</code></pre>

<p>by changing the strictness of your fold:</p>

<pre><code>let
  -- ...
  blockIterator message acc = foldl' (zipWith' xor) acc ms
    where ms = take iterations . tail $ iterate (prf passwordOctets) message
          zipWith' f as bs = let cs = zipWith f as bs in sum cs `seq` cs
in
  dumpRaw $ take keyLength $ foldl' (\acc block -&gt;
    acc ++ blockIterator (saltOctets ++ intToOctets block)
                    (replicate hashLength 0)) [] [1..totalBlocks]
</code></pre>

<p>Note how I force the full evaluation of each <code>zipWith xor</code>. In order to calculate
<code>sum cs</code> into WHNF, we must know the exact value of each element in <code>cs</code>.</p>

<p>This prevents building up a chain of thunks, which I think your existing code was attempting to do, but failing, as <code>foldl'</code> only forces the accumulator into WHNF. Since your accumulator was a pair, the WHNF is just <code>(_thunk, _another_thunk)</code>, so your intermediate thunks were not getting forced.</p>
","241","<performance><haskell><pbkdf2>","3","3","1","2013-09-11 15:22:55","18745197","4","","","","","2013-09-10 11:44:33",""
"54910780","Decrypt a PBKDF2 encrypted Session Key in PHP 7.2","<p>I need to upgrade a website I look after to PHP 7.2. In the testing phase i've discovered that one of the plug-in's on the site used the mcrypt library which is no longer available in PHP 7.2.</p>

<p>Essentially this plugin receives PBKDF2 encrypted data from a ticketing system (Tessitura) that returns the user's session key and a time stamp and an encrypted string.</p>

<p>In the control panel I have been given data to use to decrypt this session key such as a Passphrase, Salt, Authentication/HMAC Key , BlockSize, PaddingMode, EncryptionKeyIterations, EncryptionKeyLength and HMACLength</p>

<p><a href=""https://i.stack.imgur.com/3eCNn.png"" rel=""nofollow noreferrer"">Image of supplied fields</a></p>

<p>I've been trying to work out how to decrypt the data but I confess i'm struggling. C</p>

<p>an anybody tell me how to use php 7.2 to achieve this? I've found some functions in the openssl suite that look like they may be the correct way to go but they all use different terminology to the information i've been given and I cannot work out where to start, what goes where or what settings to use</p>

<p>Thanks in advance to anybody that can solve this problem!!</p>
","<p>As Rob Napier said, PBKDF2 is what the system is using to hash the password being passed into the encryption process. The site is actually using aes-256-cbc encryption. That encryption process can include a password. </p>

<p>After the information is encrypted, that payload is signed with an HMAC key. </p>

<p>You can use the openSSL library to execute all of this in php 7 and higher. Here is some sample code that creates a class to handle the encryption/decryption, for example:</p>

<pre><code>
$crypto = new AesCryptoClass('YOUR_PASSPHRASE_HERE',
                        'YOUR_HMAC_KEY_HERE',
                        'YOUR_SALT_HERE');
class AesCryptoClass {

    // These should not change
    private $hmacLength = 32;
    private $iterations = 1000;
    private $keyLength = 32;
    private $blockSize = 16;
    private $cipher = 'aes-256-cbc';

    function __construct($password,$hmacKey,$salt)
        {
            $this->password = $password;
            $this->hmacKey  = $hmacKey;
            $this->salt     = $salt;
        }

    function encrypt($plainText)
        {
            $iv = openssl_random_pseudo_bytes(16); 

            $encryptedBytes = $this->encryptInner($iv, $plainText);

            $encryptedMessage = $iv . $encryptedBytes;

            $mac = $this->hashMessage($encryptedMessage);

            $secureMessage = $mac . $encryptedMessage;

            $encryptedText = base64_encode($secureMessage);

            return $encryptedText;
        }

    function decrypt($encryptedText)
        {
            $secureMessage = base64_decode($encryptedText);

            $mac = substr($secureMessage, 0, $this->hmacLength);

            $encryptedMessage = substr($secureMessage, $this->hmacLength);

            $newMac = $this->hashMessage($encryptedMessage);

            if (strcmp($mac, $newMac) !== 0) {
                return """";
            }

            $iv = substr($encryptedMessage,0, $this->blockSize);

            $encryptedBytes = substr($encryptedMessage, $this->blockSize);

            $plainText = $this->decryptInner($iv, $encryptedBytes);

            return $plainText;
        }

    function encryptInner($iv, $plainText)
        {
            $encryptionKey = openssl_pbkdf2($this->password, $this->salt, $this->keyLength, $this->iterations);
            return openssl_encrypt($plainText, $this->cipher, $encryptionKey, OPENSSL_RAW_DATA, $iv);
        }

    function decryptInner($iv, $encryptedBytes)
        {
            $encryptionKey = openssl_pbkdf2($this->password, $this->salt, $this->keyLength, $this->iterations);
            return openssl_decrypt($encryptedBytes, $this->cipher, $encryptionKey, OPENSSL_RAW_DATA, $iv);
        }

    function hashMessage($encryptedMessage)
        {
            return pack(""H*"", hash_hmac(""sha256"", $encryptedMessage, $this->hmacKey));
        }
}
</code></pre>

<p>This code and the description of the process are also included here at the bottom of the wiki: 
<a href=""https://bitbucket.org/TN_WebShare/webpro-session-sharing-sample/wiki/Session%20Key%20Encryption%20and%20Decryption"" rel=""nofollow noreferrer"">https://bitbucket.org/TN_WebShare/webpro-session-sharing-sample/wiki/Session%20Key%20Encryption%20and%20Decryption</a></p>
","236","<encryption><php-7.2><pbkdf2>","0","0","1","2019-04-16 18:45:09","","1","","","","","2019-02-27 17:01:07",""
"48010802","PBKDF2 same salt and password, different keys","<p>I'm trying to implement a method that given a password and a salt return a key in Android (actually I want to use it to store encrypted information on a DB). I copied something from internet:</p>

<pre><code>public SecretKey deriveKeyPbkdf2(byte[] salt, String password) {
    try {
        long start = System.currentTimeMillis();

        KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt,
                ITERATION_COUNT, KEY_LENGTH);
        SecretKeyFactory keyFactory = null;
        try {
            keyFactory = SecretKeyFactory
                    .getInstance(PBKDF2_DERIVATION_ALGORITHM);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        SecretKey secretKey = keyFactory.generateSecret(keySpec);
        byte[] keyBytes = secretKey.getEncoded();

        SecretKey result = new SecretKeySpec(keyBytes, ""AES"");

        long elapsed = System.currentTimeMillis() - start;

        return secretKey;
        //return  secretKey;
    } catch (GeneralSecurityException e) {
        throw new RuntimeException(e);
    }
}
</code></pre>

<p>The fact is that if I call this method with the same password and salt, it doesn't work (it gives me new keys all the time, not matching at all!).
What is wrong with it? There's something with Android that I should know?</p>

<p>Ok so I managed to find the ""original"" snippet of code that actually work (I tested it with exactly the same input of my original question)...Any hint?</p>

<pre><code>public static byte[] deriveKeyPbkdf2(byte[] salt, String password) {
try {
    long start = System.currentTimeMillis();
    KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt,
            ITERATION_COUNT, KEY_LENGTH);
    SecretKeyFactory keyFactory = SecretKeyFactory
            .getInstance(PBKDF2_DERIVATION_ALGORITHM);
    byte[] keyBytes = keyFactory.generateSecret(keySpec).getEncoded();
    Log.d(TAG, ""key bytes: "" + toHex(keyBytes));

    long elapsed = System.currentTimeMillis() - start;
    Log.d(TAG, String.format(""PBKDF2 key derivation took %d [ms]."",
            elapsed));

    return keyBytes;
} catch (GeneralSecurityException e) {
    throw new RuntimeException(e);
}
</code></pre>

<p>}</p>
","<p>The code:  </p>

<pre><code>SecretKey secretKey = keyFactory.generateSecret(keySpec);
byte[] keyBytes = secretKey.getEncoded();

return secretKey;
</code></pre>

<p>You should be returning <code>keyBytes</code> not <code>secretKey</code>.</p>

<p>Or with:</p>

<pre><code>SecretKey result = new SecretKeySpec(keyBytes, ""AES"");
return secretKey;
</code></pre>

<p>You should be returning <code>result</code> not <code>secretKey</code>.</p>

<pre>


</pre>

<p>Simplified for understanding:</p>

<pre><code>KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, ITERATION_COUNT, KEY_LENGTH);
SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(PBKDF2_DERIVATION_ALGORITHM);

SecretKey secretKey = keyFactory.generateSecret(keySpec);
byte[] keyBytes = secretKey.getEncoded();

return keyBytes;
</code></pre>
","222","<android><security><encryption><pbkdf2>","-1","0","1","2018-08-09 20:37:47","","1","","4789266","","2018-01-08 08:19:44","2017-12-28 16:17:00",""
"35455779","What should be the data type for the hashed value of a password encrypted using PBKDF2?","<p>I am trying to learn to use PBKDF2 hash functions for storing passwords in the database. I have a rough draft of the procedure that I'll be using to generate the hashed function. But while I am creating the table in PL/SQL Developer which will hold the generated hashed password, what should I declare the data type for the encrypted password variable?</p>

<p>It might be a lame question but I'm trying to learn online. It would be a huge help if I can get links for further study as well. thank you. please help</p>
","<p>The first link, as always, is <a href=""https://security.stackexchange.com/a/31846/39623"">Thomas Pornin's canonical answer to How to securely hash passwords</a>.</p>

<hr>

<h1>Storage in the database</h1>

<ul>
<li><p>The hash can be stored in BINARY format for the least transformations and smallest number of bytes; see below for sizes.  </p>

<ul>
<li><p>Alternately, store it in a CHAR after converting to hex, which costs a transformation and double the bytes of the BINARY size</p></li>
<li><p>Alternatively, store it in a CHAR after converting to Base64, which costs a transformation and 4/3rds the number of bytes of BINARY size plus padding</p></li>
<li><p>i.e. PBKDF2-HMAC-SHA-512 where all 64 bytes of output are used would be</p>

<ul>
<li><p>BINARY(64) as binary</p></li>
<li><p>CHAR(128) as hex</p></li>
<li><p>CHAR(88) as Base64</p></li>
</ul></li>
</ul></li>
<li><p>The number of iterations should be stored in an INT, so it can be trivially increased later</p></li>
<li><p>The salt, which must be a per-user, cryptographically random value, can be stored in a BINARY format for the smallest number of bytes, and should be at least 12, and preferably 16-24 bytes long.</p>

<ul>
<li><p>i.e. for a 16 byte binary salt</p>

<ul>
<li><p>BINARY(16) as binary</p></li>
<li><p>CHAR(32) as hex</p></li>
<li><p>CHAR(24) as Base64</p></li>
</ul></li>
</ul></li>
<li><p>Optionally a password hash algorithm version as a small INT type</p>

<ul>
<li>i.e. 1 for PBKDF2-HMAC-SHA-512, and then later if you change to BCrypt, 2 for BCrypt, etc.</li>
</ul></li>
</ul>

<hr>

<h1>Normal PBKDF2 considerations</h1>

<ul>
<li><p>Consider using PBKDF2-HMAC-SHA-512, as SHA-512 in particular has 64-bit operations that reduce the advantage most GPU based attackers have over you as of early 2016.</p></li>
<li><p>Use a high (hundreds of thousands or high tens of thousands) of iterations.  </p></li>
<li><p>Don't ask for a larger number of PBKDF2 output bytes than the native hash function supports</p>

<ul>
<li><p>SHA-512 &lt;= 64 bytes</p></li>
<li><p>SHA-384 &lt;= 48 bytes</p></li>
<li><p>SHA-256 &lt;= 32 bytes</p></li>
<li><p>SHA-224 &lt;= 28 bytes</p></li>
<li><p>MD5 &lt;= 20 bytes</p></li>
</ul></li>
</ul>
","207","<hash><encoding><plsql><sqldatatypes><pbkdf2>","1","0","1","2016-02-18 13:38:31","","0","","1816580","","2016-02-17 13:01:03","2016-02-17 11:44:25",""
"14072428","Is CCKeyDerivationPBKDF thread safe?","<p>I'm using <code>CCKeyDerivationPBKDF</code> to generate and verify password hashes in a concurrent environment and I'd like to know whether it it thread safe. The documentation of the function doesn't mention thread safety at all, so I'm currently using a lock to be on the safe side but I'd prefer not to use a lock if I don't have to.</p>
","<p>Lacking documentation or source code, one option is to build a test app with say 10 threads looping on calls to CCKeyDerivationPBKDF with a random selection from say 10 different sets of arguments with 10 known results.</p>

<p>Each thread checks the result of a call to make sure it is what is expected. Each thread should also have a usleep() call for some random amount of time (bell curve sitting on say 10% of the time each call to CCKeyDerivationPBKDF takes) in this loop in order to attempt to interleave operations as much as possible.</p>

<p>You'll probably want to instrument it with debugging that keeps track of how much concurrency you are able to generate. With a 10% sleep time and 10 threads, you should be able to keep 9 threads concurrent.</p>

<p>If it makes it through an aggregate of say 100,000,000 calls without an error, I'd assume it was thread safe. Of course you could run it for much longer than that to get greater assurances.</p>
","202","<python><c><concurrency><pbkdf2><commoncrypto>","0","0","2","2013-01-18 07:31:21","14394303","0","","1332690","","2013-01-12 04:39:22","2012-12-28 16:17:34",""
"14072428","Is CCKeyDerivationPBKDF thread safe?","<p>I'm using <code>CCKeyDerivationPBKDF</code> to generate and verify password hashes in a concurrent environment and I'd like to know whether it it thread safe. The documentation of the function doesn't mention thread safety at all, so I'm currently using a lock to be on the safe side but I'd prefer not to use a lock if I don't have to.</p>
","<p>After going through the source code of the <code>CCKeyDerivationPBKDF()</code> I find it to be ""thread unsafe"". While the code for <code>CCKeyDerivationPBKDF()</code> uses many library functions which are thread-safe(eg: <code>bzero</code>), most user-defined function(eg:<code>PRF</code>) and the underlying functions being called from those user-defined functions, are potentially thread-unsafe. (For eg. due to use of several pointers and unsafe casting of memory eg. in <code>CCHMac</code>). I would suggest unless they make all the underlying functions thread-safe or have some mechanism to alteast make it conditionally thread-safe, stick with your approach, or modify the <code>commoncrypto</code> code to make it thread-safe and use that code.</p>

<p>Hope it helps.</p>
","202","<python><c><concurrency><pbkdf2><commoncrypto>","0","1","2","2013-01-18 07:31:21","14394303","0","","1332690","","2013-01-12 04:39:22","2012-12-28 16:17:34",""
"42210667","Liferay encryption algorithm implementation in .Net c#","<p>I am trying to write the same algorithm in c# of what Liferay uses PBKDF2WithHmacSHA1/160/128000 as we have hashed passwords migrated to different platforms. however the hashed passwords values are coming as different in C#
Not too sure where I am doing wrong. I am not very much familiar with Java.</p>

<p>parameters passed in Java are </p>

<pre><code>String algorithm = ""PBKDF2WithHmacSHA1/160/128000""
String plainTextPassword = ""!!Fres1966""
String encryptedPassword = null
</code></pre>

<p>hash value in Java = ""AAAAoAAB9ACnaq7ogwbkgRWfNcsfFh2DEMKmfl7JAqR8SAqk""
hash value in c# = ""FAAAAAD0AQAAAAAAAAAAAFJZUX3EUFdhFHeMZLSdlo9RxsxO""</p>

<p>There is one line of code which I have not been able to replicate is </p>

<pre><code>BigEndianCodec.putLong(_saltBytes, 0, SecureRandomUtil.nextLong()) 
</code></pre>

<p>not too sure what this line of code is doing and how can I replicate the similar logic in c#</p>

<p>Code in Java-------------</p>

<pre><code>public class PBKDF2PasswordEncryptor
extends BasePasswordEncryptor implements PasswordEncryptor {

@Override
public String[] getSupportedAlgorithmTypes() {
    return new String[] {PasswordEncryptorUtil.TYPE_PBKDF2};
}

@Override
protected String doEncrypt(
        String algorithm, String plainTextPassword,
        String encryptedPassword)
    throws PwdEncryptorException {

    try {
        PBKDF2EncryptionConfiguration pbkdf2EncryptionConfiguration =
            new PBKDF2EncryptionConfiguration();

        pbkdf2EncryptionConfiguration.configure(
            algorithm, encryptedPassword);

        byte[] saltBytes = pbkdf2EncryptionConfiguration.getSaltBytes();

        PBEKeySpec pbeKeySpec = new PBEKeySpec(
            plainTextPassword.toCharArray(), saltBytes,
            pbkdf2EncryptionConfiguration.getRounds(),
            pbkdf2EncryptionConfiguration.getKeySize());

        String algorithmName = algorithm;

        int index = algorithm.indexOf(CharPool.SLASH);

        if (index &gt; -1) {
            algorithmName = algorithm.substring(0, index);
        }

        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(
            algorithmName);

        SecretKey secretKey = secretKeyFactory.generateSecret(pbeKeySpec);

        byte[] secretKeyBytes = secretKey.getEncoded();

        ByteBuffer byteBuffer = ByteBuffer.allocate(
            2 * 4 + saltBytes.length + secretKeyBytes.length);

        byteBuffer.putInt(pbkdf2EncryptionConfiguration.getKeySize());
        byteBuffer.putInt(pbkdf2EncryptionConfiguration.getRounds());
        byteBuffer.put(saltBytes);
        byteBuffer.put(secretKeyBytes);

        return Base64.encode(byteBuffer.array());
    }
    catch (Exception e) {
        throw new PwdEncryptorException(e.getMessage(), e);
    }
}

private static final int _KEY_SIZE = 160;

private static final int _ROUNDS = 128000;

private static final int _SALT_BYTES_LENGTH = 8;

private static Pattern _pattern = Pattern.compile(
    ""^.*/?([0-9]+)?/([0-9]+)$"");

private class PBKDF2EncryptionConfiguration {

    public void configure(String algorithm, String encryptedPassword)
        throws PwdEncryptorException {

        if (Validator.isNull(encryptedPassword)) {
            Matcher matcher = _pattern.matcher(algorithm);

            if (matcher.matches()) {
                _keySize = GetterUtil.getInteger(
                    matcher.group(1), _KEY_SIZE);

                _rounds = GetterUtil.getInteger(matcher.group(2), _ROUNDS);
            }

            BigEndianCodec.putLong(
                _saltBytes, 0, SecureRandomUtil.nextLong());
        }   
        else {
            byte[] bytes = new byte[16];

            try {
                byte[] encryptedPasswordBytes = Base64.decode(
                    encryptedPassword);

                System.arraycopy(
                    encryptedPasswordBytes, 0, bytes, 0, bytes.length);
            }
            catch (Exception e) {
                throw new PwdEncryptorException(
                    ""Unable to extract salt from encrypted password "" +
                        e.getMessage(),
                    e);
            }

            ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);

            _keySize = byteBuffer.getInt();
            _rounds = byteBuffer.getInt();

            byteBuffer.get(_saltBytes);
        }
    }

    public int getKeySize() {
        return _keySize;
    }

    public int getRounds() {
        return _rounds;
    }

    public byte[] getSaltBytes() {
        return _saltBytes;
    }

    private int _keySize = _KEY_SIZE;
    private int _rounds = _ROUNDS;
    private byte[] _saltBytes = new byte[_SALT_BYTES_LENGTH];

}
</code></pre>

<p>}</p>

<h2>Code in c#</h2>

<pre><code>public string HasPassword(string password)
{
 byte[] salt = new byte[8];    
 Rfc2898DeriveBytes Rfcbytes = new Rfc2898DeriveBytes(password, salt,
             128000);
         byte[] key = Rfcbytes.GetBytes(160/8);

        var ms = new MemoryStream(8+salt.Length+key.Length);
        using (BinaryWriter writer = new BinaryWriter(ms))
        {
            writer.Write(160/8);   
            writer.Write(128000);
            writer.Write(salt);
            writer.Write(key);
        }   
        byte[] bytes = ms.ToArray();
        string finalhash = Convert.ToBase64String(bytes);

 return finalhash;
}
</code></pre>
","<p><code>BigEndianCodec.putLong(_saltBytes, 0, SecureRandomUtil.nextLong())</code>  Seems to be ""Generate a random 8-byte value and write it into an array (in Big Endian order; but it's random, so that doesn't matter)"".</p>

<p>So you'd want</p>

<pre><code>using (RandomNumberGenerator csprng = RandomNumberGenerator.Create())
{
    csprng.GetBytes(salt);
}
</code></pre>

<p>Between allocating <code>salt</code> and passing it to <code>Rfc2898DeriveBytes</code>' ctor.</p>
","192","<c#><liferay><pbkdf2>","0","0","1","2018-04-09 12:39:56","42231093","0","","1033581","","2018-04-09 12:39:56","2017-02-13 18:08:53",""
"35122083","TypeError happens with Nginx but not with Flask Server","<p>I am running an api behind flask in python and connections are handled through nginx and uwsgi.</p>

<p>Some of the api routes use pycrypto but am getting errors when using nginx on port 80 regarding <a href=""https://github.com/dlitz/pycrypto/blob/master/lib/Crypto/Util/py3compat.py#L80"" rel=""nofollow"">this line</a> in the pycrypto source.</p>

<p>The full traceback is:</p>

<pre><code>Traceback (most recent call last):
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/flask/app.py"", line 1817, in wsgi_app
    response = self.full_dispatch_request()
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/flask/app.py"", line 1477, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/flask_cors/extension.py"", line 188, in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/flask/app.py"", line 1381, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/flask/app.py"", line 1475, in full_dispatch_request
    rv = self.dispatch_request()
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/flask/app.py"", line 1461, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File ""./application.py"", line 113, in new_user
    decrypted_json = crypt.decrypt_json(encrypted)
  File ""./crypto_module/crypt.py"", line 201, in decrypt_json
    decrypted_text = cryptor.decrypt(data_to_decrypt, PASSWORD)
  File ""./crypto_module/crypt.py"", line 112, in decrypt
    encryption_key = self._pbkdf2(password, encryption_salt, iterations=iterations)
  File ""./crypto_module/crypt.py"", line 184, in _pbkdf2
    return KDF.PBKDF2(password, salt, dkLen=key_length, count=iterations, prf=lambda p, s: hmac.new(p, s, hashlib.sha256).digest())
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/Crypto/Protocol/KDF.py"", line 110, in PBKDF2
    password = tobytes(password)
  File ""/home/ubuntu/test/testvenv/local/lib/python2.7/site-packages/Crypto/Util/py3compat.py"", line 85, in tobytes
    return ''.join(s)
TypeError
</code></pre>

<p>The TypeError is never specifically mentioned for some reason.
The error also does not show when running the server with the basic <code>python application.py</code> command on the default port 5000. When letting nginx and uwsgi handle the connections, I get the Internal Server Error shown above. Not really sure what's happening. All other non-crypto routes go through fine.</p>

<p><strong>Update:</strong> running the server one level up in uwsgi with the following command will also work. Nginx still does not:</p>

<pre><code>uwsgi --socket 0.0.0.0:8000 --protocol=http -w wsgi 
</code></pre>

<p><strong>Update 2:</strong> Now getting another TypeError that's a little more descriptive but I still think the data being sent in the request is not being handled the same way/correctly with nginx as it is with uwsgi or flask.</p>

<pre><code>...
  File ""./crypto_module/crypt.py"", line 202, in &lt;lambda&gt;
    return KDF.PBKDF2(password, salt, dkLen=key_length, count=iterations, prf=lambda p, s: hmac.new(p, s, hashlib.sha256).digest())
  File ""/usr/lib/python2.7/hmac.py"", line 133, in new
    return HMAC(key, msg, digestmod)
  File ""/usr/lib/python2.7/hmac.py"", line 68, in __init__
    if len(key) &gt; blocksize:
TypeError: object of type 'NoneType' has no len()
</code></pre>

<p>I should also note that <code>crypt.py</code> is <a href=""https://github.com/RNCryptor/RNCryptor-python/blob/master/RNCryptor.py"" rel=""nofollow"">RNCryptor-python</a></p>
","<p>Got it working.</p>

<p>In /etc/nginx/sites-enabled/test</p>

<pre><code>uwsgi_pass unix:/...;
</code></pre>

<p>Should be</p>

<pre><code>uwsgi_pass unix:///...;
</code></pre>

<p>The original error also stemmed from the password used in the crypto file. The password was retrieved from the system's environment variables. I later found out that Nginx doesn't come with any functionality to natively use environment variables but a workaround is explained <a href=""https://docs.apitools.com/blog/2014/07/02/using-environment-variables-in-nginx-conf.html"" rel=""nofollow"">here</a>.</p>
","190","<python><nginx><flask><pycrypto><pbkdf2>","0","0","1","2016-02-02 06:15:41","35144190","9","","3203662","","2016-02-01 21:45:57","2016-02-01 02:14:33",""
"25734799","Why is AES function returning different value?","<p>Why is AES with same secret phrase and message returns different values each time?
Let's say we have a same salt for each PBKDF2 functions( I know it's bad, it's just for an example). Let's say we are entering same passphrase each time.</p>

<pre><code>var salt = ""5J07c/a7+2bf=15$56aQc75Ub55=60&amp;0"";
console.log(req.body.password);
console.log(salt);
var PBKDF2hash = crypto.PBKDF2(req.body.password, salt, { keySize: 256/32 });
console.log(PBKDF2hash.toString());
var AEScipher = crypto.AES.encrypt(req.body.password, PBKDF2hash);
console.log(AEScipher.toString());
</code></pre>

<p>In this case we receive same PBKDF2hash (as expected), but any time AES provides different chipher. </p>

<pre><code>zz
5J07c/a7+2bf=15$56aQc75Ub55=60&amp;0
3949676666ed318087a52896be98dc80b0cad99f4b662d48565283f71a2ace80
U2FsdGVkX19O1pqgL+V6Chk8NdiJQhf15N1uEfYXgxw=
zz
5J07c/a7+2bf=15$56aQc75Ub55=60&amp;0
3949676666ed318087a52896be98dc80b0cad99f4b662d48565283f71a2ace80
U2FsdGVkX1/C7GAmLJvfFAHyOYj7LKZI5278/ZoeA3M=
</code></pre>

<p><a href=""https://stackoverflow.com/questions/11818684/why-is-aes-encrypted-cipher-of-the-same-string-with-the-same-key-always-differen"">These</a> answers says the thing is salt is differrent and cbc mode matters. In my case salt is constant and I've switched to other modes. Output is still different each time.</p>
","<p>The <a href=""http://en.wikipedia.org/wiki/Initialization_vector"" rel=""nofollow"">initialization vector</a> used in CBC mode is a random block, so each encryption will be different.  An IV is sort of like a salt, except when encrypting a message there is no reason to ever specify any specific IV to use (a random IV should always be used).  The IV is often put in front of the first block of the encrypted message.</p>
","187","<javascript><encryption><aes><pbkdf2>","1","2","1","2014-09-09 01:10:40","25734919","0","","-1","","2017-05-23 11:57:16","2014-09-08 23:53:22",""
"32564505","Dynamically increase iterations for PBKDF2 when the password is wrong","<p>I am thinking about implementing PBKDF2 in my Laravel 5 app to replace the default blowfish-based authentication.</p>

<p>Is it feasible to double the iteration count each time the password has been entered incorrectly?</p>

<p>e.g. Default iterations are 2000, and when the password is wrong the first time, the next attempt will be 4000 iterations, then 8000, etc.</p>
","<p>While you could continue iterating on the PBKDF2 hash in theory, it's made impossible by the fact that you don't know the original value, which is why you have a hash in the first place. You could store the iteration count and try resuming the iteration, but you'd hit a snag — not having knowledge of the key-derivation function's internal state.</p>

<p>Consider the following:</p>

<pre><code>var_dump(($hash = hash_pbkdf2(""sha256"", ""password"", ""salt"", 2000)));
var_dump(hash_pbkdf2(""sha256"", $hash, ""salt"", 2000));
var_dump(hash_pbkdf2(""sha256"", ""password"", ""salt"", 4000));
</code></pre>

<p>This produces:</p>

<pre><code>string(64) ""9209a0c90243e88b89488f99cd7ea010c244cc7a9d4bf65c157f2d8f642eb952""
string(64) ""b90c5d9a2d8bb559a36682bd6044a8da0480199148339fe34ef62598e052b0b6""
string(64) ""99a4d4dd66f714fae1bab9246ea449dd598d7683a569227c07cdb679e3ed3474""
</code></pre>

<p>Ergo, this is impossible. And also a denial of service waiting to happen if it <em>did</em> work, as it would be your server doing the computations.</p>

<p>In short, stick with <code>password_hash</code> (which Laravel uses) that does all of the security for you. The less you do to your auth code, the less you can introduce a vulnerability.</p>
","184","<php><laravel-5><pbkdf2><password-hash>","2","3","1","2015-09-14 17:08:59","","6","","2224584","","2015-09-14 17:08:59","2015-09-14 12:13:17",""
"45062886","C++ PBKDF2 Issue","<p>I have the following function:</p>

<pre><code>void PBKDF2_HMAC_SHA_512_string(const char* pass, const char* salt, int32_t iterations, uint32_t HashLength, char* out) {
    unsigned int i;
    HashLength = HashLength / 2;
    unsigned char* digest = new unsigned char[HashLength];
    PKCS5_PBKDF2_HMAC(pass, strlen(pass), (const unsigned char*)salt, strlen(salt), iterations, EVP_sha512(), HashLength, digest);
    for (i = 0; i &lt; sizeof(digest); i++) {
        sprintf(out + (i * 2), ""%02x"", 255 &amp; digest[i]);
    }
}
</code></pre>

<p>When I call the function like below, I expect to get a hash back of 2400 in length, however it returns me 16:</p>

<pre><code>char PBKDF2Hash[1025]; //\0 terminating space?
memset(PBKDF2Hash, 0, sizeof(PBKDF2Hash));
PBKDF2_HMAC_SHA_512_string(""Password"", ""0123456789123456"", 3500, 1024, PBKDF2Hash);
//PBKDF2Hash is now always 16 long -&gt; strlen(PBKDF2Hash),
//while I expect it to be 2400 long?
//How is this possible and why is this happening?
//I can't figure it out
</code></pre>
","<p>Since <code>digest</code> is a <code>pointer</code>, <code>sizeof(digest)</code> will not give the length of the array. Depending on different platforms, <code>sizeof(digest)</code> may give you 4 or 8, which is not what you want. Maybe you should use <code>for (i = 0; i &lt; HashLength; i++)</code>.</p>

<p>Another unrelated issue of your code is that, <code>digest</code> is not deleted in <code>PBKDF2_HMAC_SHA_512_string</code>, which causes <code>memory leak</code></p>
","182","<c++><hash><pbkdf2>","0","2","1","2017-07-12 18:00:55","45064574","8","","700650","","2017-07-12 18:00:55","2017-07-12 16:13:40",""
"50459292","Performance of PBKDF2 c#.NET with","<blockquote>
  <p>I need to implement a password hashing mechanism for our system. I am using <code>PBKDF2</code> for the purpose. I have made a small console application for the demo purpose. With the parameters I am using, Its taking my desktop <code>56 ms</code> to generate the final hash.</p>
  
  <p>From the sources I have gone through, they mentioned the generation time of 100ms should be reasonably secured. Is it the correct assumption or should I make my generation slower? If yes, what parameters should I probably change? </p>
</blockquote>

<p><strong>CODE:</strong></p>

<pre><code>class Program
{
    static void Main(string[] args)
    {
        var watch = System.Diagnostics.Stopwatch.StartNew();
        byte[] op = null;
        op = GetPDKDF2(""password"", 20, 10000);
        watch.Stop();
        Console.WriteLine(""total time: "" + watch.ElapsedMilliseconds);
        Console.ReadKey();
    }

    public static byte[] GetPDKDF2(string password, int saltSize, int iterationCount)
    {
        var pdf = new Rfc2898DeriveBytes(password, saltSize, iterationCount);
        return pdf.GetBytes(20);
    }

}
</code></pre>
","<p>The standard delay to aim for is, as you said, 100ms.  The time taken to compute a hash with PBKDF2 is proportionate to the iteration count.  With this in mind, you could probably just double your iteration count to get a delay of around 100ms.</p>

<p>I suggest you don't allow the iteration count to change, at least not as an argument to the function.  Changing the iteration count in future, as hardware progresses, is a good idea, but you need to ensure the iteration count used is noted with the produced hash.</p>

<p>I'd use a constant value for the iteration count instead:</p>

<pre><code>const int ITERATION_COUNT = 20000;
</code></pre>

<p>And use:</p>

<pre><code>public static byte[] GetPDKDF2(string password, int saltSize)
{
    var pdf = new Rfc2898DeriveBytes(password, saltSize, ITERATION_COUNT);
    return pdf.GetBytes(20);
}
</code></pre>
","182","<c#><security><encryption><hash><pbkdf2>","1","4","1","2018-05-22 04:18:49","50459731","0","","3815069","","2018-05-22 03:22:44","2018-05-22 03:21:19",""
"30527433","Handling Confidential Data in web application","<p>I want to handle some confidential data in one of my web application. So that the data shouldn't able to read by the Developer or Database administrator.  </p>

<p>We can easily hide the data from DB administrator by implementing some encryption technique. But still the developer can see the data since he only creating the decryption technique. I want only the end user should see his data.</p>

<p>I can't encrypt data using some algorithms like <a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow"">PBKDF2</a> or DB side encryption methods Like <a href=""https://msdn.microsoft.com/en-us/library/ff650304.aspx"" rel=""nofollow"">TDE &amp; EKM</a> because still I need to keep the encryption key somewhere. If I keep in server side or in db the developer can access and decrypt the data. If I keep it in client side, the user can't access the information from a separate machine.</p>

<p>So How to handle this situation? Thanks in advance.</p>
","<blockquote>
  <p>I need to keep the encryption key somewhere</p>
</blockquote>

<p>No you don't. The user only has to remember it. For convenience you could save it in the browser's local storage. </p>
","179","<asp.net><sql-server><encryption><pbkdf2><tde>","1","0","2","2015-06-03 04:12:59","30610479","2","1","","","","2015-05-29 10:37:37",""
"30527433","Handling Confidential Data in web application","<p>I want to handle some confidential data in one of my web application. So that the data shouldn't able to read by the Developer or Database administrator.  </p>

<p>We can easily hide the data from DB administrator by implementing some encryption technique. But still the developer can see the data since he only creating the decryption technique. I want only the end user should see his data.</p>

<p>I can't encrypt data using some algorithms like <a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow"">PBKDF2</a> or DB side encryption methods Like <a href=""https://msdn.microsoft.com/en-us/library/ff650304.aspx"" rel=""nofollow"">TDE &amp; EKM</a> because still I need to keep the encryption key somewhere. If I keep in server side or in db the developer can access and decrypt the data. If I keep it in client side, the user can't access the information from a separate machine.</p>

<p>So How to handle this situation? Thanks in advance.</p>
","<p>You are heading the direction of <a href=""https://clipperz.is/blog/2007/08/24/anatomy_zero_knowledge_web_application"" rel=""nofollow"">Zero Knowledge Web Applications</a>, such as implemented by <a href=""https://spideroak.com/features/private-by-design"" rel=""nofollow"">SpiderOak</a> (see also <a href=""https://crypton.io/docs/"" rel=""nofollow"">crypton</a>).  These applications typically work by deriving a key from the user's password using something like PBKDF2, and performing encryption/decryption on client side.  However, there are a number of complexities to overcome to make it true zero-knowledge, and also to meet usability requirements.  One could write an essay on this, but instead I suggest you start by reading the linked references.  If you have any questions, let me know.</p>

<p>In a nutshell, the ""more zero-knowledge"" you want the system to be, the harder it is to realise without sacrificing usability (one example is overcoming the points made in <a href=""https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/august/javascript-cryptography-considered-harmful/"" rel=""nofollow"">Javascript Cryptography Considered Harmful</a>).  However, there are various tradeoffs you can make in order to make it sufficiently difficult to cheat without affecting usability too much.</p>
","179","<asp.net><sql-server><encryption><pbkdf2><tde>","1","2","2","2015-06-03 04:12:59","30610479","2","1","","","","2015-05-29 10:37:37",""
"39477344","C# Rfc2898DeriveBytes result differ from PHP PBKDF2","<p>The SSO software I am trying to consume returns a URL encoded token, from which a user generates a salt value. For example:</p>

<pre><code>$iterations = 1000;
$token=""SaIp-gpEFreOJTtrhXuboFAwoBVs0PwgRpKbcTFNAQDRmTN2csxN775kjdhPYSe0tXvctPe0tkf_E48U2Jeetg2""
$salt = base64url_decode($token);
$idAndKey=""test@company.com""+""aE1k9-djZ66WbUATqdHbWyJzskMI5ABS0"";
$key=hash_pbkdf2('sha1',$idAndKey,$salt,$iterations,32,true);
$enKey= base64url_encode($key);//returns NTZkMjZhOWE5YjU2NDQ2NDY5NWE4MDFlNDIwNTA4NWU=
</code></pre>

<p>But, C# return CPC4OPRZEC1CLVOKDfQK7fv7iwuETvrF0 for same parameters. Here is the C# code</p>

<pre><code>HASH_BYTES = 24;
HASH_ITERATIONS = 1000;
var token = ""SaIp-gpEFreOJTtrhXuboFAwoBVs0PwgRpKbcTFNAQDRmTN2csxN775kjdhPYSe0tXvctPe0tkf_E48U2Jeetg2"";
string idAndKey=""test@company.com""+""aE1k9-djZ66WbUATqdHbWyJzskMI5ABS0"";
Rfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes(idAndKey, HttpServerUtility.UrlTokenDecode(token)) { IterationCount = HASH_ITERATIONS };
var key = HttpServerUtility.UrlTokenEncode(pbkdf2.GetBytes(HASH_BYTES));
</code></pre>

<p>I would appreciate any input.</p>
","","177","<c#><php><pbkdf2>","1","","0","2016-09-13 19:44:39","","2","1","1532228","","2016-09-13 19:44:39","2016-09-13 19:10:13",""
"14034557","how can a bruteforce occur on a pbkdf2?","<p>am sorry for this question, but i was asking: when using MD5, we get a hash, so to get the password we hash all the words untill we find the same hash.</p>

<p>but in a key derivation algorithme such pbkdf2 or bcrypt or scrypt, what a hacker need to seek? or he will make the same algorithme to all words to get the same key derivation?</p>

<p>am sorry for this dumb question.</p>
","<p>It’s the same general idea - try all the hashes - but several thousand (or million, or even billion) times slower.</p>
","176","<bcrypt><brute-force><pbkdf2><scrypt>","1","1","1","2012-12-25 22:56:21","14034568","0","","","","","2012-12-25 22:54:30",""
"40460440","Migrate existing Django users to OpenLDAP with the same password","<p>I'm using Django's User model as the authentication backend. Now I want to migrate all the users to an OpenLDAP server. I believe if I can make OpenLDAP use the same hashing algorithm and password string format, I can just copy over the password hash from Django, users will just be able to login using the same username and password when I plug in OpenLDAP.</p>

<p>My Django app's using PBKDF2 hasing algorithm so what I'm trying to do is to configure OpenLDAP to use PBKDF2 using this module: <a href=""https://github.com/hamano/openldap-pbkdf2"" rel=""nofollow noreferrer"">https://github.com/hamano/openldap-pbkdf2</a></p>

<p>The password hash in Django will be like:</p>

<p>pbkdf2_sha256$12000$MySaltString$somehashstring...</p>

<p>I tried many times but couldn't make it work with OpenLDAP.</p>

<p>It would be great if you guys could give me some hints.</p>

<p>Thanks a lot,</p>

<p>Trinh</p>
","<p>If you are working with python3, You can use salted mechanism provided on <a href=""http://ldap3.readthedocs.io/standard.html"" rel=""nofollow noreferrer"">ldap3 package on this page http://ldap3.readthedocs.io/standard.html</a></p>

<pre><code>from ldap3 import HASHED_SALTED_SHA
from ldap3.utils.hashed import hashed

hashed_password = hashed(HASHED_SALTED_SHA, 'new_password')
connection.modify('cn=user1,o=test', {'userPassword': [(MODIFY_REPLACE,[hashed_password])]})
</code></pre>
","174","<django><hash><openldap><migrate><pbkdf2>","0","1","1","2016-11-08 03:46:31","","0","","","","","2016-11-07 08:06:46",""
"53199533","Rare crash with Crypto++ pbkdf2::DeriveKey()","<p>I'm using the CryptoPP library to hash some passwords. About 1 in 10 times, it crashes on the DeriveKey line below, with a segfault.</p>

<p>Even when using fixed parameters the crashes still seem random. I'm wondering if perhaps I need a '\0' on the end of my strings. Or maybe the output buffer needs to be zero initialized, or something?</p>

<p>Anyway, here's the code.</p>

<pre><code>#include &lt;cryptopp/aes.h&gt;
#include &lt;cryptopp/algparam.h&gt;
#include &lt;cryptopp/filters.h&gt;
#include &lt;cryptopp/modes.h&gt;
#include &lt;cryptopp/sha.h&gt;
#include &lt;cryptopp/pwdbased.h&gt;

int main()
{
CryptoPP::PKCS5_PBKDF2_HMAC&lt;CryptoPP::SHA256&gt; pbkdf2;

CryptoPP::byte salt[16];

CryptoPP::byte key[32];

/* Hard coded for testing purposes */
Common::podFromHex(""00f8807a289655b2a8e38cda00182a32"", salt);

/* Hard coded for testing purposes */
std::string password = ""a"";

std::cout &lt;&lt; ""Salt: "" &lt;&lt; Common::podToHex(salt) &lt;&lt; std::endl;
std::cout &lt;&lt; ""Salt size: "" &lt;&lt; sizeof(salt) &lt;&lt; std::endl;
std::cout &lt;&lt; ""Password: "" &lt;&lt; password.data() &lt;&lt; std::endl;
std::cout &lt;&lt; ""Password size: "" &lt;&lt; password.size() &lt;&lt; std::endl;

/* Rare segfault on this line */
pbkdf2.DeriveKey(
    key, sizeof(key), 0, (CryptoPP::byte *)password.data(),
    password.size(), salt, sizeof(salt), Constants::PBKDF2_ITERATIONS
);
}
</code></pre>

<p>Everything seems initialized properly - the print statements give me the exact same thing every time: </p>

<pre><code>Salt: 00f8807a289655b2a8e38cda00182a32
Salt size: 16
Password: a
Password size: 1
</code></pre>

<p>Furthermore - the hashed password is usable, when it doesn't segfault. I'm using AES encryption later on, and I can perfectly unencrypt the file, and all the data is as expected.</p>

<p>The source code for derive key can be found here, by the way: <a href=""https://www.cryptopp.com/docs/ref/pwdbased_8h_source.html#l00235"" rel=""nofollow noreferrer"">https://www.cryptopp.com/docs/ref/pwdbased_8h_source.html#l00235</a></p>

<p>Thanks.</p>
","<p>I'm hazarding a guess, but <code>salt</code> is not NULL terminated. The program is probably accessing beyond the 16th element of the <code>salt</code> array:</p>

<pre><code>std::cout &lt;&lt; ""Salt: "" &lt;&lt; Common::podToHex(salt) &lt;&lt; std::endl;
</code></pre>

<hr>

<p>The following executes multiple times without problems. It is your program less the calls to the Common library.</p>

<p>The call to <code>std::memcpy</code> only takes the left-most 16-bytes of the string. It does not do the conversion. (I only wanted to remove the call to Common).</p>

<pre><code>$ cat test.cxx

#include ""cryptlib.h""
#include ""filters.h""
#include ""sha.h""
#include ""hex.h""
#include ""files.h""
#include ""pwdbased.h""

#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;cstring&gt;

int main()
{
    using namespace CryptoPP;

    PKCS5_PBKDF2_HMAC&lt;SHA256&gt; pbkdf2;

    byte salt[16], key[32];

    /* Hard coded for testing purposes */
    // Common::podFromHex(""00f8807a289655b2a8e38cda00182a32"", salt);
    std::memcpy(salt, ""00f8807a289655b2a8e38cda00182a32"", 16);

    /* Hard coded for testing purposes */
    std::string password = ""a"";

    // std::cout &lt;&lt; ""Salt: "" &lt;&lt; Common::podToHex(salt) &lt;&lt; std::endl;
    std::cout &lt;&lt; ""Salt: "";
    StringSource(salt, sizeof(salt), true, new HexEncoder(new FileSink(std::cout)));
    std::cout &lt;&lt; std::endl;

    std::cout &lt;&lt; ""Salt size: "" &lt;&lt; sizeof(salt) &lt;&lt; std::endl;
    std::cout &lt;&lt; ""Password: "" &lt;&lt; password.data() &lt;&lt; std::endl;
    std::cout &lt;&lt; ""Password size: "" &lt;&lt; password.size() &lt;&lt; std::endl;

    /* Rare segfault on this line */
    pbkdf2.DeriveKey(
        key, sizeof(key), 0, (byte *)password.data(),
        password.size(), salt, sizeof(salt), 10000 /*Constants::PBKDF2_ITERATIONS*/
    );

    std::cout &lt;&lt; ""Key: "";
    StringSource(key, sizeof(key), true, new HexEncoder(new FileSink(std::cout)));
    std::cout &lt;&lt; std::endl;

    return 0;
}
</code></pre>

<p>Compiled and executed with:</p>

<pre><code>$ g++ -DNDEBUG -g2 -O3 test.cxx -o test.exe ./libcryptopp.a
$ ./test.exe
Salt: 30306638383037613238393635356232
Salt size: 16
Password: a
Password size: 1
Key: F88BA6947B802C66F7E7A2BC0099AFD92C81DC293E3CC48C2DA3FA75E27ECE6B
</code></pre>
","161","<c++><crypto++><pbkdf2>","1","3","2","2018-11-13 03:18:55","","4","1","608639","","2018-11-08 05:19:24","2018-11-07 23:36:27",""
"53199533","Rare crash with Crypto++ pbkdf2::DeriveKey()","<p>I'm using the CryptoPP library to hash some passwords. About 1 in 10 times, it crashes on the DeriveKey line below, with a segfault.</p>

<p>Even when using fixed parameters the crashes still seem random. I'm wondering if perhaps I need a '\0' on the end of my strings. Or maybe the output buffer needs to be zero initialized, or something?</p>

<p>Anyway, here's the code.</p>

<pre><code>#include &lt;cryptopp/aes.h&gt;
#include &lt;cryptopp/algparam.h&gt;
#include &lt;cryptopp/filters.h&gt;
#include &lt;cryptopp/modes.h&gt;
#include &lt;cryptopp/sha.h&gt;
#include &lt;cryptopp/pwdbased.h&gt;

int main()
{
CryptoPP::PKCS5_PBKDF2_HMAC&lt;CryptoPP::SHA256&gt; pbkdf2;

CryptoPP::byte salt[16];

CryptoPP::byte key[32];

/* Hard coded for testing purposes */
Common::podFromHex(""00f8807a289655b2a8e38cda00182a32"", salt);

/* Hard coded for testing purposes */
std::string password = ""a"";

std::cout &lt;&lt; ""Salt: "" &lt;&lt; Common::podToHex(salt) &lt;&lt; std::endl;
std::cout &lt;&lt; ""Salt size: "" &lt;&lt; sizeof(salt) &lt;&lt; std::endl;
std::cout &lt;&lt; ""Password: "" &lt;&lt; password.data() &lt;&lt; std::endl;
std::cout &lt;&lt; ""Password size: "" &lt;&lt; password.size() &lt;&lt; std::endl;

/* Rare segfault on this line */
pbkdf2.DeriveKey(
    key, sizeof(key), 0, (CryptoPP::byte *)password.data(),
    password.size(), salt, sizeof(salt), Constants::PBKDF2_ITERATIONS
);
}
</code></pre>

<p>Everything seems initialized properly - the print statements give me the exact same thing every time: </p>

<pre><code>Salt: 00f8807a289655b2a8e38cda00182a32
Salt size: 16
Password: a
Password size: 1
</code></pre>

<p>Furthermore - the hashed password is usable, when it doesn't segfault. I'm using AES encryption later on, and I can perfectly unencrypt the file, and all the data is as expected.</p>

<p>The source code for derive key can be found here, by the way: <a href=""https://www.cryptopp.com/docs/ref/pwdbased_8h_source.html#l00235"" rel=""nofollow noreferrer"">https://www.cryptopp.com/docs/ref/pwdbased_8h_source.html#l00235</a></p>

<p>Thanks.</p>
","<p>I ended up fixing this. It was not actually due to any of the code listed above, but it was because I was calling a function using this, in a signal handler.</p>

<p>Because this was taking quite a while to run (using 500,000 iterations) it appeared to be crashing here every time, but it was actually not due to this line.</p>

<p>I ended up fixing it flipping a bool flag in the signal handler, and having a separate thread watching that flag. When the flag was set, it called the destructor, which in turn triggered the normal shutdown flow, allowing all my threads to shutdown and save correctly.</p>
","161","<c++><crypto++><pbkdf2>","1","0","2","2018-11-13 03:18:55","","4","1","608639","","2018-11-08 05:19:24","2018-11-07 23:36:27",""
"55622851","Seed from BIP39 Mnemonic not matching Test Vectors","<p>I'm writing a Java implementation of Bitcoin's BIP39. So far, my code is able to produce a randomly generated mnemonic phrase correctly. However, when converting the 12 word Mnemonic Phrase into a 512-bit seed, the resulting value does not match with results from <a href=""https://iancoleman.io/bip39/"" rel=""nofollow noreferrer"">Ian Coleman's BIP39 Tool</a>.</p>

<p>To start, a SecureRandom object generates a random 512-bit Entropy value (ENT). The ENT value is hashed using SHA256 to compute the checksum value (CS), which is the first 4 bits of the hash. The checksum is concatenated to end of ENT to give ENT_CS. ENT_CS is split into sections of 11 bits each, and the corresponding integer value of the 11 bits is used as the index number to obtain a word from the Word List. This generates my 12 word Mnemonic Phrase. So far, all steps up to this point match the expected results from aforementioned BIP39 Tool.</p>

<p>To create the Seed, I am using PBKDF2 with HmacSHA512, setting the iterations to 2048, and the key-size to 512 bits (64 bytes). I have tested my implementation of PBKDF2 against these <a href=""https://stackoverflow.com/questions/15593184/pbkdf2-hmac-sha-512-test-vectors"">Test Vectors</a>, Google's ""crypto"" package implementation, and NovaCrypto's Java BIP39 implementation. The mnemonic words, excluding separators, is used as input along with a salt of <code>""mnemonic""+password</code> as per the <a href=""https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki"" rel=""nofollow noreferrer"">Bitcoin Core BIP39 Specifications</a>.</p>

<h2>PBKDF2 Function</h2>

<pre class=""lang-java prettyprint-override""><code>  public static byte[] PBKDF2(String mnemonic, String salt) {
    try {
      byte[] fixedSalt = (""mnemonic""+salt).getBytes(StandardCharsets.UTF_8);
      KeySpec spec = new PBEKeySpec(mnemonic.toCharArray(), fixedSalt, 2048, 512);
      SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA512"");
      return f.generateSecret(spec).getEncoded();
    } catch (NoSuchAlgorithmException | InvalidKeySpecException ex) {
      throw new RuntimeException(ex);
    }
  }
</code></pre>

<h2>Generate Mnemonic Function</h2>

<pre class=""lang-java prettyprint-override""><code>public static String[] generateMnemonic() {
  // Generate 128-bit Random Number for Entropy
  byte[] ENT = getEntropy();

  // Hash the Entropy value
  byte[] HASH = SHA256(ENT);

  // Copy first 4 bits of Hash as Checksum
  boolean[] CS = Arrays.copyOfRange(bytesToBits(HASH), 0, 4);

  // Add Checksum to the end of Entropy bits
  boolean[] ENT_CS = Arrays.copyOf(bytesToBits(ENT), bytesToBits(ENT).length + CS.length);
  System.arraycopy(CS, 0, ENT_CS, bytesToBits(ENT).length, CS.length);

  // Split ENT_CS into groups of 11 bits and creates String array for
  // mnemonicWords
  String[] mnemonicWords = new String[12];
  for (int i = 0; i &lt; 12; i++) {
    boolean[] numBits = Arrays.copyOfRange(ENT_CS, i * 11, i * 11 + 11);
    mnemonicWords[i] = wordList.get(bitsToInt(numBits));
  }
  return mnemonicWords;
}
</code></pre>

<h2>Helper Functions</h2>

<pre class=""lang-java prettyprint-override""><code>// Returns randomly generated, 16-byte number
  public static byte[] getEntropy() {
    byte[] ent = new byte[16];
    sr.nextBytes(ent);
    return ent;
  }

// Returns bit representation of byte array
  public static boolean[] bytesToBits(byte[] data) {
    boolean[] bits = new boolean[data.length * 8];
    for (int i = 0; i &lt; data.length; ++i)
      for (int j = 0; j &lt; 8; ++j)
        bits[(i * 8) + j] = (data[i] &amp; (1 &lt;&lt; (7 - j))) != 0;
    return bits;
  }

// Returns hex string from byte array
  private final static char[] hexArray = ""0123456789ABCDEF"".toCharArray();
  public static String bytesToHex(byte[] bytes) {
    char[] hexChars = new char[bytes.length * 2];
    for (int j = 0; j &lt; bytes.length; j++) {
      int v = bytes[j] &amp; 0xFF;
      hexChars[j * 2] = hexArray[v &gt;&gt;&gt; 4];
      hexChars[j * 2 + 1] = hexArray[v &amp; 0x0F];
    }
    return new String(hexChars);
  }

// Returns SHA256 hash of input data
  public static byte[] SHA256(byte[] data) {
    try {
      MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
      System.out.println(Arrays.toString(data));
      return digest.digest(data);
    } catch (NoSuchAlgorithmException ex) {
      throw new RuntimeException(ex);
    }
  }

// Returns int value of a bit array
  public static int bitsToInt(boolean[] bits) {
    int n = 0, l = bits.length;
    for (int i = 0; i &lt; l; ++i) {
      n = (n &lt;&lt; 1) + (bits[i] ? 1 : 0);
    }
    return n;
  }
</code></pre>

<h2>Usage</h2>

<pre class=""lang-java prettyprint-override""><code>// Generate Mnemonic Words, Mnemonic Phrase, and Seed
    String[] mnemonicWords = generateMnemonic();
    String mnemonicPhrase = """";
    for (String word : mnemonicWords)
      mnemonicPhrase += word;
    byte[] seed = PBKDF2(mnemonicPhrase, """");
    System.out.println(""Seed: "" + bytesToHex(seed));
</code></pre>

<h2>Example Results</h2>

<pre><code>    My Program Trial
Entropy (hex): 3CCB62D9AF76F1E8DB113E66B2D84656
Checksum bits: 1100
Raw Binary: 00111100110 01011011000 10110110011 01011110111 01101111000 11110100011 01101100010 00100111110 01100110101 10010110110 00010001100 1010110
Mnemonic: devote force reopen galaxy humor virtual hobby chief grit nothing bag pulse
Seed: 013FFA714C57AA26C59DC215880D9C2398A8B38D10D7E41A882CF98C35976F0BF26BCC08B0B196945DE8778C7FD561FB0F20A8B9BAD46B12196C963A85E3B40E

    Expected Results (Derived from same Entropy)
Entropy (hex): 3CCB62D9AF76F1E8DB113E66B2D84656
Checksum bits: 1100
Raw Binary: 00111100110 01011011000 10110110011 01011110111 01101111000 11110100011 01101100010 00100111110 01100110101 10010110110 00010001100 1010110
Mnemonic: devote force reopen galaxy humor virtual hobby chief grit nothing bag pulse
Seed: 0c3c5f9ae724a2a3ed70aeb24919c10506e4962223a5375f70164be8b897d615ec9bf9f3e64a889cff03318cc5d0b3c8378ba0264d198e307c609632016ddd01
</code></pre>
","<p>Looks like I was able to answer my own question.
In my program, I was concatenating the seed words without spaces using</p>

<pre class=""lang-java prettyprint-override""><code>String mnemonicPhrase = """";
for (String word : mnemonicWords)
  mnemonicPhrase += word;
</code></pre>

<p>But this is not the correct format, as the spaces are to be included. Changing this code block to add spaces:</p>

<pre class=""lang-java prettyprint-override""><code>String mnemonicPhrase = """";
for(int i=0; i&lt;mnemonicWords.length; i++) {
    mnemonicPhrase += mnemonicWords[i];
    if(i &lt; mnemonicWords.length-1) mnemonicPhrase += "" "";
}
</code></pre>

<p>yields expected Test Vector results published <a href=""https://github.com/trezor/python-mnemonic/blob/master/vectors.json"" rel=""nofollow noreferrer"">here</a> using a password of ""TREZOR"".</p>
","156","<java><bitcoin><pbkdf2>","1","1","1","2019-04-11 21:40:52","55641586","2","","11343164","","2019-04-11 00:35:04","2019-04-10 23:59:05",""
"55401090","Difference between PBE and PBKDF2 in Java","<p>I read in <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory"" rel=""nofollow noreferrer"">documentation</a> that <code>SecretKeyFactory</code> accepts both <code>PBEWith...</code> algorithms and <code>PBKDF2With...</code> algorithms. According to PKCS #5 (current version is 2.1 specified by <a href=""https://tools.ietf.org/html/rfc8018"" rel=""nofollow noreferrer"">RFC 8018</a>), PBE (Password-Based Encryption) uses PBKDF (Password-Based Key Derivation Function). Why would the generated key be different (or are they different)? Haven’t PBE covered the case for PBKDF?</p>
","","151","<java><encryption-symmetric><jce><pbkdf2>","0","","0","2019-03-28 15:14:33","","5","","","","","2019-03-28 15:14:33",""
"50536662","PBKDF2 Lua Implementation Issue","<p>I am trying to write a PBKDF2 implementation in pure lua. I am writing it because I want to use it in a sandboxed lua environment that does not allow outside libraries. I had a look at the standard document from the IETF and had at it. Below is the code I have come up with:</p>

<pre><code>do
    package.preload[""pbkdf2""] = function()

        local hmac = require 'hmac'
        local len = string.len
        local gsub = string.gsub
        local format = string.format
        local byte = string.byte
        local char = string.char
        local concat = table.concat
        local ceil = math.ceil

        local function toBytes(str)
            local tmp = {}
            for i = 1, len(str) do
                tmp[i] = byte(str, i)
            end
            return tmp
        end

        local function toString(bArray)
            local tmp = {}
            for i = 1, #bArray do
                tmp[i] = char(bArray[i])
            end
            tmp = concat(tmp)
            return tmp
        end

        -- transform a string of bytes in a string of hexadecimal digits
        local function asHex(s)
            local h = gsub(s, ""."", function(c)
                return format(""%02x"", byte(c))
            end)
            return h
        end

        local num2string = function(l, n)
            local s = {}
            for i = 1, n do
                local idx = (n + 1) - i
                s[idx] = char(l &amp; 255)
                l = l &gt;&gt; 8
            end
            s = concat(s)
            return s
        end

        local buildBlock = function(hFun, password, salt, c, int)
            local tmp
            local tmp2

            for i = 1, c do
                if i == 1 then
                    print(int)
                    print(salt .. int)
                    -- PRF(password, salt || INT_32_BE(i)
                    -- return result of hash as a byte string
                    tmp = hmac.hash(hFun, password, salt .. num2string(int, 4), true)
                else
                    -- returns result of hash as byte string
                    tmp2 = hmac.hash(hFun, password, tmp, true)
                    -- transform to byte arrays
                    tmp2 = toBytes(tmp2)
                    tmp = toBytes(tmp)
                    assert(#tmp == #tmp2)
                    -- apply XOR over bytes in both arrays
                    -- save results to final array
                    for j = 1, #tmp do
                        -- perform XOR operation on both elements in the respective arrays
                        tmp[j] = tmp[j] ~ tmp2[j]
                    end
                    -- transform back into byte string to pass to next hash
                    tmp = toString(tmp)
                end
            end
            return tmp
        end

        local truncate = function(str, pos)
            return string.sub(str, 1, pos)
        end

        local deriveKey = function(hFun, message, salt, c, dLen)
            local hLen = hFun.outputSize

            -- the derived key cannot be larger than (2^32 * hLen)
            if dLen &gt; (2^32) * hLen then error(""The derived key cannot be larger than 2^32 times the output size of the hash function."") end

            -- the block size is the desired key length divided by the output size of the underlying hash function, rounded up
            local blockSize = ceil(dLen/hLen)

            -- to store our blocks
            local final = {}

            for i = 1, blockSize do
                -- lets make our blocks in here
                final[i] = buildBlock(hFun, message, salt, c, i)
            end

            local result
            if #final == 1 then
                result = final[1] -- we only have one block
            else
                result = concat(final) -- turns final into a bytestring to be outputted
            end
            --if #result &gt; dLen then truncate(final, dLen) end
            assert(#result == dLen)
            return asHex(result) -- outputs as a hex value
        end
        return {deriveKey = deriveKey}
    end
end
</code></pre>

<p>This code is not getting the correct answers. Testing this code with test vectors provided <a href=""https://stackoverflow.com/a/5136918/9821157"">here</a>, assuming that the underlying PRF is HMAC-SHA256, the output is below:</p>

<pre><code>key: ""password""
salt: ""salt""
c: 1
dkLen: 32

Got: 13463842ec330934dc124494b40d8baade465b72f3fcadad741f2d0e052fd2f5
Expected: 120fb6cffcf8b32c43e7225256c4f837a86548c92ccc35480805987cb70be17b

key: ""password""
salt: ""salt""
c: 2
dkLen: 32

Got: 8b82aed26f503effdbc6c14bc7f0338b2b90e387f14ac1f91f9ad74e618f9558
Expected: AE4D0C95AF6B46D32D0ADFF928F06DD02A303F8EF3C251DFD6E2D85A95474C43
</code></pre>

<p>I believe it may have something to do with the string to byte encoding, but I cannot pinpoint what exactly is causing the issue. When I was testing my HMAC code, I had to rely on online generators because I couldn't find vectors for HMAC-SHA224 and HMAC-SHA256. Some calculators would give me completely different output values for the same key, message combination. That could be because of how they are processing the inputs, but I am not sure. I would appreciate it if someone more experienced could help me out with this.</p>

<p>EDIT: This problem is solved. Seems that all that was needed was to pass <em>int</em> as a binary string of length 4. I updated the code with the fixes.</p>

<p>EDIT 2: I read the standard again to realize the solution was in my face the entire time (standard says to encode i as a 32-bit big endian integer).</p>
","<p>The solution was to convert <em>int</em> to a binary string of length 4. Thanks to @EgorSkriptunoff for his insight.</p>
","149","<lua><sha256><hmac><pbkdf2>","0","0","1","2018-05-26 02:58:52","50538907","6","","9821157","","2018-05-26 02:58:52","2018-05-25 20:48:12",""
"24111030","Having wired outputs while Rfc2898DeriveBytes implementation in TripleDES","<p>This is a simple code but its taking hours to find out why am I getting wrong output. I can't seem to find the problem. Is everything okey specially with <code>Rfc2898DeriveBytes</code> implementation? 
I need help to find out whats causing wrong output, where is it and how to solve it to make this code work.</p>

<pre><code>static void Main(string[] args)
    {
        string data = ""welcome to the jungle"";
        string pass = ""monkey"";
        string salt = ""12345678"";
        byte[] textdata = Encoding.UTF8.GetBytes(data);
        byte[] password = Encoding.UTF8.GetBytes(pass);
        byte[] saltbyte = Encoding.UTF8.GetBytes(salt);
        Rfc2898DeriveBytes keyGenerate = new Rfc2898DeriveBytes(password ,saltbyte ,1000);
        Rfc2898DeriveBytes keyGenerate1 = new Rfc2898DeriveBytes(password, saltbyte, 1000);
        byte[] key1 = keyGenerate.GetBytes(16);
        byte[] key2 = keyGenerate1.GetBytes(16);
        Console.WriteLine(""Plaintext: "" + data);

        TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
        tdes.BlockSize = 64;
        tdes.KeySize = 128;
        tdes.Key = key1;
        tdes.IV = saltbyte;
        tdes.Mode = CipherMode.CBC;
        tdes.Padding = PaddingMode.PKCS7;
        ICryptoTransform tripledes = tdes.CreateEncryptor();
        byte[] een = tripledes.TransformFinalBlock(textdata, 0, textdata.Length);
        string een1 = Convert.ToBase64String(een);
        Console.WriteLine(""Encrypted Data: "" +een1);

        TripleDESCryptoServiceProvider tdes1 = new TripleDESCryptoServiceProvider();
        tdes1.BlockSize = 64;
        tdes1.KeySize = 128;
        tdes1.Key = key2;
        tdes1.IV = saltbyte;
        tdes1.Mode = CipherMode.CBC;
        tdes1.Padding = PaddingMode.PKCS7;
        ICryptoTransform tripledes1 = tdes1.CreateDecryptor();
        byte[] en1 = tripledes.TransformFinalBlock(een, 0, een.Length);
        string en11 = Encoding.UTF8.GetString(en1); ;
        Console.WriteLine(""Decrypted Data: "" +en11);
        Console.ReadLine(); 
    }
</code></pre>

<p>This is what I get in as output: </p>

<p><img src=""https://i.stack.imgur.com/KAQeo.png"" alt=""enter image description here""></p>

<p>And one more thing that I want to know, what is the difference between <code>Rfc2898DeriveBytes(string a, byte[] salt, int iteration)</code>  and <code>Rfc2898DeriveBytes( byte[] a , byte[] salt, int iteration)</code> ? and which one is best for use? Do they give same output? </p>
","<p>You're using the original (encryptor) <code>tripledes</code> instance, rather than the decryptor instance <code>tripledes1</code> to decrypt.</p>
","148","<c#><3des><pbkdf2>","0","0","1","2014-06-08 21:40:35","24111127","0","","2059267","","2014-06-08 21:40:16","2014-06-08 21:28:58",""
"50820331","How to set the out-length with the Web Crypto API SubtleCrypto.deriveKey() for PBKDF2","<p>According to the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey"" rel=""nofollow noreferrer"">doc</a> a simple example to derive a password with PBKDF2 is</p>

<pre><code>  return window.crypto.subtle.importKey(
    'raw', 
    encoder.encode(password), 
    {name: 'PBKDF2'}, 
    false, 
    ['deriveBits', 'deriveKey']
  ).then(function(key) {
    return window.crypto.subtle.deriveKey(
      { ""name"": 'PBKDF2',
        ""salt"": encoder.encode(salt),
        ""iterations"": iterations,
        ""hash"": 'SHA-256'
      },
      key,
      { ""name"": 'AES-CTR', ""length"": 128 }, //api requires this to be set
      true, //extractable
      [ ""encrypt"", ""decrypt"" ] //allowed functions
    )
  }).then(function (webKey) {
    return crypto.subtle.exportKey(""raw"", webKey);
  })
</code></pre>

<p>As one can see the API lets you choose:</p>

<ul>
<li>key derivation function (and it's underlying hash)</li>
<li>salt</li>
<li>iterations</li>
<li>raw key material (ie. password)</li>
</ul>

<p>However as far as I can see there is no options for choosing the out-length. It <em>seems</em> that the cipher suite parameter <code>{ ""name"": 'AES-CTR', ""length"": 128 }</code> influences the out length, but you can only choose 16 and 32 byte.</p>

<p>For example with 10,000 rounds, salt: 'salt', password: 'key material' with 128 it will result in the following 16 bytes:</p>

<pre><code>26629f0e2b7b14ed4b84daa8071c648c
</code></pre>

<p>whereas with <code>{ ""name"": 'AES-CTR', ""length"": 256 }</code> you will get</p>

<pre><code>26629f0e2b7b14ed4b84daa8071c648c648d2cce067f93e2c5bde0c620030521
</code></pre>

<p>How do I set the out length apart from 16 or 32 byte? Do I have to truncate it myself?</p>
","<p><em>deriveKey</em> function with AES algorithm option returns you <strong>AES</strong> key. Possible AES key length parameters are following (in <strong>bits</strong>):</p>

<ul>
<li>128</li>
<li>192</li>
<li>256</li>
</ul>

<p>So, you are able to choose only from them when using AES cipher. In my opinion, it's a <strong>bad</strong> idea to modify a key generated from <em>deriveKey</em> function. First of all, you will break an algorithm standard, and also in future you will have a problem with using truncated keys.</p>

<p>But if you want just to use PBKDF2 and derive <strong>bits</strong> from a password, you can use <em>deriveBits</em> function. Here is an example:</p>

<pre><code>window.crypto.subtle.deriveBits(
        {
            name: ""PBKDF2"",
            salt: window.crypto.getRandomValues(new Uint8Array(16)),
            iterations: 50000,
            hash: {name: ""SHA-256""}, // can be ""SHA-1"", ""SHA-256"", ""SHA-384"", or ""SHA-512""
        },
        key, //your key from generateKey or importKey
        512 //the number of bits you want to derive, values: 8, 16, 32, 64, 128, 512, 1024, 2048
    )
    .then(function(bits){
        //returns the derived bits as an ArrayBuffer
        console.log(new Uint8Array(bits));
    })
    .catch(function(err){
        console.error(err);
    });
</code></pre>

<p>More examples  here - <a href=""https://github.com/diafygi/webcrypto-examples#pbkdf2---derivekey"" rel=""nofollow noreferrer"">https://github.com/diafygi/webcrypto-examples#pbkdf2---derivekey</a> .</p>

<p>Also, I have tested possible values for derive bits, and they are powers of 2 (from 8 to 2048).</p>

<p>I hope it will help you. Remember, if you want just use AES cipher better use default values and <em>deriveKey</em> function.</p>
","144","<javascript><pbkdf2><webcrypto-api>","0","1","1","2018-06-18 07:02:27","50903536","0","","","","","2018-06-12 15:02:50",""
"35766313","Using openssl based pbkdf2 in a multithreaded app","<p>I'm trying to use <a href=""https://github.com/jpmens/mosquitto-auth-plug/blob/master/pbkdf2-check.c"" rel=""nofollow"">Jan-Piet Mens' pbkdf2 code</a> from his <a href=""https://github.com/jpmens/mosquitto-auth-plug"" rel=""nofollow"">mosquitto-auth-plug</a> in a multithreaded app.</p>

<p>It all works fine when I run the code in a single thread, but I start getting <code>Invalid reads</code> (using valgrind) for many of the internal <code>free()s</code> in the <code>pbkdf2_check()</code> function.</p>

<p>I'm not using any global shared resources in my code and have setup openSSL locking callbacks using <a href=""https://curl.haxx.se/libcurl/c/opensslthreadlock.html"" rel=""nofollow"">this libcurl example</a>, but I still keep getting <code>Invalid reads</code>, mostly with the <code>free()s</code> in <code>pbkdf2_check()</code>.</p>

<p>Here's my code:</p>

<p>pbkdf2.c (Based off <a href=""https://github.com/jpmens/mosquitto-auth-plug/blob/master/pbkdf2-check.c"" rel=""nofollow"">Jan-Piet Mens' pbkdf2.c code</a>)</p>

<pre><code>/*
 * Copyright (c) 2013 Jan-Piet Mens &lt;jpmens()gmail.com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of mosquitto nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include ""opensslthreadlock.h""
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;openssl/evp.h&gt;
#include ""base64.h""

#define SEPARATOR       ""$""
#define TRUE    (1)
#define FALSE   (0)
#define NUMT    5

/*
 * Split PBKDF2$... string into their components. The caller must free()
 * the strings.
 */

static int detoken(char *pbkstr, char **sha, int *iter, char **salt, char **key)
{
    char *p, *s, *save;
    int rc = 1;

    save = s = strdup(pbkstr);

    if ((p = strsep(&amp;s, SEPARATOR)) == NULL)
        goto out;
    if (strcmp(p, ""PBKDF2"") != 0)
        goto out;

    if ((p = strsep(&amp;s, SEPARATOR)) == NULL)
        goto out;
    *sha = strdup(p);

    if ((p = strsep(&amp;s, SEPARATOR)) == NULL)
        goto out;
    *iter = atoi(p);

    if ((p = strsep(&amp;s, SEPARATOR)) == NULL)
        goto out;
    *salt = strdup(p);

    if ((p = strsep(&amp;s, SEPARATOR)) == NULL)
        goto out;
    *key = strdup(p);

    rc = 0;

    out:
    free(save);
    return rc;
}

int pbkdf2_check(char *password, char *hash)
{
    static char *sha, *salt, *h_pw;
    int iterations, saltlen, blen;
    char *b64, *keybuf;
    unsigned char *out;
    int match = FALSE;
    const EVP_MD *evpmd;
    int keylen, rc;

    if (detoken(hash, &amp;sha, &amp;iterations, &amp;salt, &amp;h_pw) != 0)
        return match;

    /* Determine key length by decoding base64 */
    if ((keybuf = malloc(strlen(h_pw) + 1)) == NULL) {
        fprintf(stderr, ""Out of memory\n"");
        return FALSE;
    }
    keylen = base64_decode(h_pw, keybuf);
    if (keylen &lt; 1) {
        free(keybuf);
        return (FALSE);
    }
    free(keybuf);

    if ((out = malloc(keylen)) == NULL) {
        fprintf(stderr, ""Cannot allocate out; out of memory\n"");
        return (FALSE);
    }

#ifdef PWDEBUG
    fprintf(stderr, ""sha        =[%s]\n"", sha);
    fprintf(stderr, ""iterations =%d\n"", iterations);
    fprintf(stderr, ""salt       =[%s]\n"", salt);
    fprintf(stderr, ""h_pw       =[%s]\n"", h_pw);
    fprintf(stderr, ""kenlen     =[%d]\n"", keylen);
#endif

    saltlen = strlen((char *)salt);

    evpmd = EVP_sha256();
    if (strcmp(sha, ""sha1"") == 0) {
        evpmd = EVP_sha1();
    } else if (strcmp(sha, ""sha512"") == 0) {
        evpmd = EVP_sha512();
    }

    rc = PKCS5_PBKDF2_HMAC(password, strlen(password),
                           (unsigned char *)salt, saltlen,
                           iterations,
                           evpmd, keylen, out);
    if (rc != 1) {
        goto out;
    }

    blen = base64_encode(out, keylen, &amp;b64);
    if (blen &gt; 0) {
        int i, diff = 0, hlen = strlen(h_pw);
#ifdef PWDEBUG
        fprintf(stderr, ""HMAC b64   =[%s]\n"", b64);
#endif

        /* ""manual"" strcmp() to ensure constant time */
        for (i = 0; (i &lt; blen) &amp;&amp; (i &lt; hlen); i++) {
            diff |= h_pw[i] ^ b64[i];
        }

        match = diff == 0;
        if (hlen != blen)
            match = 0;

        free(b64);
    }

    out:
    free(sha);
    free(salt);
    free(h_pw);
    free(out);

    return match;
}

void *test_pbkdf2(void *argt) {
    int i;
    for (i = 0; i &lt; 3; ++i) {
        char password[] = ""password"";
        char pbkstr[] = ""PBKDF2$sha1$98$XaIs9vQgmLujKHZG4/B3dNTbeP2PyaVKySTirZznBrE=$2DX/HZDTojVbfgAIdozBi6CihjWP1+akYnh/h9uQfIVl6pLoAiwJe1ey2WW2BnT+"";
        int match;

        printf(""Checking password [%s] for %s\n"", password, pbkstr);

        match = pbkdf2_check(password, pbkstr);
        printf(""match == %d\n"", match);
    }
    pthread_exit();
}

int main(int argc, char **argv)
{
    pthread_t tid[NUMT];
    int i;
    int error;
    (void)argc; /* we don't use any arguments in this example */
    (void)argv;

    thread_setup();

    for(i=0; i&lt; NUMT; i++) {
        error = pthread_create(&amp;tid[i],
                               NULL, /* default attributes please */
                               test_pbkdf2,
                               NULL);
        if(0 != error)
            fprintf(stderr, ""Couldn't run thread number %d, errno %d\n"", i, error);
    }

    /* now wait for all threads to terminate */
    for(i=0; i&lt; NUMT; i++) {
        error = pthread_join(tid[i], NULL);
        fprintf(stderr, ""Thread %d terminated\n"", i);
    }

    thread_cleanup();
    return 0;
}
</code></pre>

<p>opensslthreadlock.h:</p>

<pre><code>/***************************************************************************
 *                                  _   _ ____  _
 *  Project                     ___| | | |  _ \| |
 *                             / __| | | | |_) | |
 *                            | (__| |_| |  _ &lt;| |___
 *                             \___|\___/|_| \_\_____|
 *
 * Copyright (C) 1998 - 2016, Daniel Stenberg, &lt;daniel@haxx.se&gt;, et al.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution. The terms
 * are also available at https://curl.haxx.se/docs/copyright.html.
 *
 * You may opt to use, copy, modify, merge, publish, distribute and/or sell
 * copies of the Software, and permit persons to whom the Software is
 * furnished to do so, under the terms of the COPYING file.
 *
 * This software is distributed on an ""AS IS"" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ***************************************************************************/
/* &lt;DESC&gt;
 * one way to set the necessary OpenSSL locking callbacks if you want to do
 * multi-threaded transfers with HTTPS/FTPS with libcurl built to use OpenSSL.
 * &lt;/DESC&gt;
 */
/*
 * This is not a complete stand-alone example.
 *
 * Author: Jeremy Brown
 */

int thread_setup(void);

int thread_cleanup(void);
</code></pre>

<p>The implementation is here (<a href=""https://curl.haxx.se/libcurl/c/opensslthreadlock.html"" rel=""nofollow"">opensslthreadlock.c</a>).
Here's the code for <a href=""https://github.com/jpmens/mosquitto-auth-plug/blob/master/base64.c"" rel=""nofollow"">base64.c/h</a>.</p>

<p>I'm using this to build and test:</p>

<pre><code>gcc -o pbkdf2test pbkdf2.c opensslthreadlock.c base64.c -lcrypto -lpthread

valgrind --tool=memcheck --leak-check=full --track-origins=yes -v ./pbkdf2test
</code></pre>
","<blockquote>
  <p>It all works fine when I run the code in a single thread, but I start getting Invalid reads (using valgrind) for many of the internal free()s in the pbkdf2_check() function.</p>
</blockquote>

<p>That appears to be because of:</p>

<pre><code>static char *sha, *salt, *h_pw;
</code></pre>

<p>That will always suffer a race condition as <code>pbkdf2_check</code> is written.</p>

<p>Also, once these run:</p>

<pre><code>out:
    free(sha);
    free(salt);
    free(h_pw);
    free(out);
</code></pre>

<p>The dangling pointers are reused due to the static storage class.</p>

<p>You should probably remove the <code>static</code> storage class for <code>sha</code>, <code>salt</code> and <code>h_pw</code>, and initialize everything to <code>NULL</code> or <code>0</code>. Use C99 (<code>-std=c99</code>) and you can:</p>

<pre><code>char *sha=NULL, *salt=NULL, *h_pw=NULL;
int iterations=0, saltlen=0, blen=0;
char *b64=NULL, *keybuf=NULL;
unsigned char *out=NULL;
int match = FALSE;
const EVP_MD *evpmd=NULL;
int keylen=0, rc=-1;
</code></pre>

<p>Then, the optimizer will remove the initializers/writes that are not needed.</p>
","143","<c><multithreading><openssl><mosquitto><pbkdf2>","3","2","1","2016-03-03 14:13:38","35774546","0","1","","","","2016-03-03 07:58:52",""
"46083712","Translating Java 256 bit password based encryption to C#","<p>I need to implement an API in C# that'll encrypt secrets identically to the API written in java.</p>

<p>The Java code looks like this</p>

<pre><code>SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
KeySpec spec = new PBEKeySpec(password, salt, iteration, size);
SecretKey tmp = factory.generateSecret(spec);
SecretKey secret = new SecretKeySpec(tmp.getEncoded(), ""HmacSHA256"");
</code></pre>

<p>My attempt on C# code looks like this</p>

<pre><code>var secret = KeyDerivation.Pbkdf2(
    password, salt, KeyDerivationPrf.HMACSHA256, iteration, size);
</code></pre>

<p>When I compare the generated secrets, converted the to base 64, they're not the same. Their length are couple hundreds characters off as well.</p>

<p>What's missing from the C# code to generate the same secret as the Java API?</p>
","","140","<java><c#><encryption><hmac><pbkdf2>","1","","0","2017-09-06 20:19:21","","4","3","","","","2017-09-06 20:19:21",""
"24177808","PBKDF2 in Android differ from Ios and node.js output","<p>I have implemented PBKDF2 with Hmac-SHA1 in Android with following code.</p>

<pre><code> private static final int ITERATIONS = 10000;
        private static final int KEY_LENGTH = 256; // bits

        public static String hashPassword(String password, String salt)
                throws NoSuchAlgorithmException, InvalidKeySpecException {
            char[] passwordChars = password.toCharArray();
            byte[] saltBytes = salt.getBytes();

            PBEKeySpec spec = new PBEKeySpec(passwordChars, saltBytes, ITERATIONS,
                    KEY_LENGTH);
            SecretKeyFactory key = SecretKeyFactory
                    .getInstance(""PBKDF2WithHmacSHA1"");
            byte[] hashedPassword = key.generateSecret(spec).getEncoded();
            return String.format(""%x"", new BigInteger(hashedPassword));
        }

        public static void main(String[] args) throws Exception {
            System.out.println(hashPassword(""abcd1234"",
                    ""6c646576656c6f7065726c3139383540676d61696c2e636f6d""));
    }
</code></pre>

<p>it gives me following key as output</p>

<p><strong>138e52b955673f2b580b6a02283e3f5c52dce03e2dcdb140e4ad24e4347c2568</strong></p>

<p>and node.js output is</p>

<p><strong>8462884f256a94cce232b9227bc73072763be8824af94807101ff0a322e20388</strong></p>

<p>the node.js output is what I want in android which I successfully got in ios.</p>

<p>this is my test website for getting node.js output</p>

<p><a href=""https://jswebcrypto.azurewebsites.net/demo.html#/pbkdf2"" rel=""nofollow"">https://jswebcrypto.azurewebsites.net/demo.html#/pbkdf2</a></p>

<p>Key Size: 256</p>

<p>Iterations: 10000</p>

<p>Passphrase: abcd1234</p>

<p>salt : 6c646576656c6f7065726c3139383540676d61696c2e636f6d</p>

<p>I have no idea what is happening in android. Any help would be appriciated.</p>
","","136","<android><node.js><encryption><password-encryption><pbkdf2>","1","","0","2014-06-12 06:29:08","","0","3","","","","2014-06-12 06:29:08",""
"49986096","Match/Compare two PBKDF2 hashed values","<p>Below is my scenario.</p>

<p>I have developed register(signup) and login feature for my website. </p>

<p>UI is developed in AngularJS 2 and backed API are in Spring Boot with POstgreSQL as DB.</p>

<hr>

<p><strong>While register</strong>, I accept two parameters (username and password), my requirement is when my front-end is calling backend API, I hash the raw password with PBKDF2(random salt) and send it to back-end <em>/register</em> API, as below:</p>

<pre><code>{
  ""username"":""test"",
  ""password"":""##passwordhashvalue##""
}
</code></pre>

<p>On Server Side, I store these values in DB.</p>

<hr>

<p><strong>While Login,</strong> I again follow same from front-end and send it to back-end <em>/login</em> API as below:</p>

<pre><code>{
  ""username"":""test"",
  ""password"":""##passwordhashvalue##""
}
</code></pre>

<p>On Server Side, To authorize the username/password, I have two hashed password values to compare, One which I received as input and other from database. In normal scenarios we usually have one raw value and other hashed value. <strong>Is there any way I can achieve this to match/compare two PBKDF2 hashed values with random salt?</strong></p>

<p>Thank you very much.</p>
","","136","<spring><angular><spring-boot><pbkdf2>","3","","0","2018-10-04 16:46:53","","0","","3984221","","2018-10-04 16:46:53","2018-04-23 16:45:14",""
"36680037","CipherOutputStream corrupting headers in Android","<p>I'm using a simple CipherInput/OutputStream to try to encrypt/decrypt files in android.</p>

<p>The problem I'm having is that it seems to be corrupting the first few bytes of the file but not the rest.  Here's an example of an output from a simple text file:</p>

<p>Original Text:</p>

<pre><code>""Test for Android cipher. The quick brown fox jumps over the lazy dog.""
</code></pre>

<p>Cycled through Encryption and Decryption:</p>

<pre><code>@ÍØJ­b¢çc°ÌHOšpher. The quick brown fox jumps over the the lazy dog. 
</code></pre>

<p>Here's my code:</p>

<pre><code>public static SecretKey generateKey(Context c, char[] passphraseOrPin) throws NoSuchAlgorithmException, InvalidKeySpecException {
    // Number of PBKDF2 hardening rounds to use. Larger values increase
    // computation time. You should select a value that causes computation
    // to take &gt;100ms.
    byte[] salt = Settings.Secure.getString(c.getContentResolver(),
            Settings.Secure.ANDROID_ID).getBytes();

    final int iterations = 1000;

    final int outputKeyLength = 128;

    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    KeySpec keySpec = new PBEKeySpec(passphraseOrPin, salt, iterations, outputKeyLength);
    SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
    Log.d(""HIDEMYPICS"",""Secret Key: "" + toHex(secretKey.getEncoded()) );
    return secretKey;
}

public static boolean decryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString().replace("".epf"", """"));
        FileOutputStream fos = new FileOutputStream(ef);

        Log.d(""HIDEMYPICS"",""Decrypting: "" + f.toString());

        SecretKey key = generateKey(context, keyphrase.toCharArray());
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, key);
        // Wrap the output stream
        CipherOutputStream cos = new CipherOutputStream(fos, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = fis.read(d)) != -1) {
            cos.write(d, 0, b);
        }
        // Flush and close streams.
        cos.flush();
        cos.close();
        fis.close();

        Log.d(""HIDEMYPICS"",""Decrypted to: "" + ef.toString());
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    }
    return false;
}

public static boolean encryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString() + "".epf"");
        FileOutputStream fos = new FileOutputStream(ef);

        Log.d(""HIDEMYPICS"",""Encrypting: "" + f.toString());

        SecretKey key = generateKey(context, keyphrase.toCharArray());
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        // Wrap the output stream
        CipherOutputStream cos = new CipherOutputStream(fos, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = fis.read(d)) != -1) {
            cos.write(d, 0, b);
        }
        // Flush and close streams.
        cos.flush();
        cos.close();
        fis.close();
        Log.d(""HIDEMYPICS"",""Encrypted to: "" + ef.toString());
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    }
    return false;
}
</code></pre>

<p>UPDATE:</p>

<p>Was advised to explicitly add a random IV to the cipher setup and added/modified the following lines of code to facilitate it:</p>

<pre><code>SecureRandom r = new SecureRandom();
        byte[] ivBytes = new byte[16];
        r.nextBytes(ivBytes);

        SecretKey key = generateKey(context, keyphrase.toCharArray());
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(ivBytes));
</code></pre>

<p>Ended up with the same result. First few bytes of the text file were still corrupted.</p>

<p>FINAL ANSWER:</p>

<p>Not sure what I did, but per suggestions below I had tried a static IV and it had still exhibited the same behavior, but I moved the declaration and something happened; probably had a typo somewhere. The issue is now resolved though and here's the final working code. Thanks all that helped out!</p>

<pre><code>private static final byte[] ivBytes = {109,15,57,79,75,112,50,91,18,18,107,127,65,68,12,69};

public static SecretKey generateKey(Context c, char[] passphraseOrPin) throws NoSuchAlgorithmException, InvalidKeySpecException {
    // Number of PBKDF2 hardening rounds to use. Larger values increase
    // computation time. You should select a value that causes computation
    // to take &gt;100ms.
    byte[] salt = Settings.Secure.getString(c.getContentResolver(),
            Settings.Secure.ANDROID_ID).getBytes();

    final int iterations = 1000;

    final int outputKeyLength = 128;

    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    KeySpec keySpec = new PBEKeySpec(passphraseOrPin, salt, iterations, outputKeyLength);
    SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
    return secretKey;
}

public static boolean decryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString().replace("".epf"", """"));
        FileOutputStream fos = new FileOutputStream(ef);

        SecretKey key = generateKey(context, keyphrase.toCharArray());
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");

        cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(ivBytes));
        // Wrap the output stream
        CipherInputStream cis = new CipherInputStream(fis, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = cis.read(d)) != -1) {
            fos.write(d, 0, b);
            fos.flush();
        }
        // Flush and close streams.
        fos.close();
        cis.close();

        f.delete();
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    } catch (InvalidAlgorithmParameterException e) {
        e.printStackTrace();
    }
    return false;
}

public static boolean encryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString() + "".epf"");
        FileOutputStream fos = new FileOutputStream(ef);

        SecretKey key = generateKey(context, keyphrase.toCharArray());
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(ivBytes));
        // Wrap the output stream
        CipherOutputStream cos = new CipherOutputStream(fos, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = fis.read(d)) != -1) {
            cos.write(d, 0, b);
            cos.flush();
        }
        // Flush and close streams.
        cos.close();
        fis.close();
        f.delete();
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    } catch (InvalidAlgorithmParameterException e) {
        e.printStackTrace();
    }
    return false;
}
</code></pre>
","<p>Explicitly set a random IV and include it with your ciphertext.</p>
","135","<android><encryption><aes><encryption-symmetric><pbkdf2>","1","1","1","2016-04-18 22:42:01","36683479","0","3","254304","","2016-04-18 22:42:01","2016-04-17 17:49:49",""
"39552918","PBKDF2-SHA256 encryption in JavaScript","<p>I need to code a simple login system for a website that has a MySQL database with usernames and passwords that are used by the desktop app written in Python.</p>

<p>The desktop app uses PBKDF2-SHA256 encryption (through the hashlib.pbkdf2_hmac() function in Python) to hash the passwords with unique random salts. Because of this, I need to use the same type of encryption to handle the passwords on the website, for which I will be writing code in JavaScript.</p>

<p>I've come across several JavaScript libraries for bcrypt, but not really much of anything for PBKDF2 apart from NodeJS (and I don't want to have to use an entire app framework just for encryption). How can I handle PBKDF2 encryption in JavaScript?</p>
","","134","<javascript><hash><sha256><pbkdf2>","0","","0","2016-09-18 00:35:52","","19","","5504760","","2016-09-18 00:35:52","2016-09-18 00:14:04","2016-09-18 00:35:16"
"40711549","How to pad short strings for use as an AES key?","<p>I have 5 different strings that I want to use as a key. They are:</p>

<pre><code>asuspcgame, dragonZ, whiterice, ball, document
</code></pre>

<p>I want to perform an encryption using EVP OpenSSL like this: <a href=""https://www.openssl.org/docs/man1.0.2/crypto/EVP_EncryptInit.html"" rel=""nofollow noreferrer"">https://www.openssl.org/docs/man1.0.2/crypto/EVP_EncryptInit.html</a></p>

<p>However, I realized that the example is using a fixed size key (16 characters for AES_128).</p>

<pre><code>unsigned char key[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};
EVP_EncryptInit_ex(&amp;ctx, EVP_idea_cbc(), NULL, key, iv);
</code></pre>

<p>My question is: How do I make my strings to always have a fixed size 16 characters?</p>

<p>I didn't see any function from EVP that could make my strings become a fixed size key.</p>
","<p>Do not use strings as encryption keys, use a password derivation function such as PBKDF2 with a rounds count such that the function takes ~100ms. That will produce am output of bytes to use as a key.</p>

<p>For the IV use a cryptographic pseudo-random number generator and prefix the encrypted data with the IV, there is no need to keep the IV secret.</p>

<p>Or better yet, use <a href=""https://github.com/RNCryptor"" rel=""nofollow noreferrer"">RNCryptor</a>; it does all of this for you and adds encryption authentication, versioning and is cross platform.</p>
","132","<c><openssl><aes><pbkdf2><kdf>","0","2","1","2016-11-21 23:14:00","","1","","608639","","2016-11-21 23:14:00","2016-11-21 01:29:11",""
"22324801","How can i use the hash_pbkdf2()","<p>I just installed php 5.5 and do not know if I forgot to configure something to make the hash_pbkdf2 function working, which I have to do so that I can be using it?</p>

<p>edit: for the people who can not understand my problem, and avoid negative votes without a reason: </p>

<p>my php is 5.5.10 and when i use the hash_pbkdf2() says does not exist.</p>
","<p>It doesn't have anything to <a href=""http://www.php.net/manual/en/hash.configuration.php"" rel=""nofollow"">configure</a>, but maybe you forgot to install the module? You can read more about the <a href=""http://www.php.net/manual/en/hash.requirements.php"" rel=""nofollow"">hash module requirements</a>.</p>
","129","<php><pbkdf2>","-1","0","1","2014-03-11 12:06:19","","1","","3169959","","2014-03-11 12:06:19","2014-03-11 11:47:12",""
"32770067","How to Pass Original PBKDF2 Hash from SQLite3 DB","<p>I know that there are a lot of questions on PBKDF2 and hashes, but most of them seem to talk about bits. Perhaps that is what I need to learn more about, but I'm hoping there is something more straight-forward for my problem.</p>

<p>Note: These are two separate programs (so the variables will seem to repeat, but do not).</p>

<p>The first creates a hashed password and stores it in the db ... This is working fine.</p>

<pre><code>from pbkdf2 import crypt
import sqlite3

cemail = input(""Email: "")
cpassword = input(""Password: "")
pwhash = crypt(cpassword)
connection = sqlite3.connect('/Users/Air/Desktop/users.db')
cursor_v = connection.cursor()
cursor_v.execute(""insert into user (cemail, cpassword) values (?,?)"", (cemail, pwhash))
connection.commit()
cursor_v.close()
</code></pre>

<p>The problem is here, where I go to check the database for the original hashed password. Once the hashed password went into the database from the first program, is that it? Is it gone forever (i.e. not able to be compared to something else later, like another password during login)? </p>

<pre><code>cemail = input(""Login with Email: "")
cpassword = input(""Login with Password: "")
pwhash = crypt(cpassword)
connection = sqlite3.connect('/Users/Air/Desktop/users.db')
cursor_v = connection.cursor()
cursor_v.execute(""SELECT * FROM user WHERE cemail=? AND cpassword=?"", (cemail,pwhash))
row = cursor_v.fetchone()
if pwhash == crypt(pwhash, cpassword):
    print(""Welcome"")
else:
    print(""Invalid"")
</code></pre>

<p>Any help or guidance is appreciated.</p>
","","128","<hash><sqlite><pbkdf2>","0","","0","2015-09-24 20:16:42","","5","","4182445","","2015-09-24 20:16:42","2015-09-24 20:11:18",""
"22517726","How to replicate django's password validation in ruby?","<p>How to implement the django's password validation in ruby so that i can migrate my user database from old django application to a new ruby application ? (Q&amp;A style, what I tried is actually detailled as an answer)</p>
","<p>The django application (at least the one I had to deal with) use pbkdf2 password hashing.</p>

<p>The details are explained <a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow"">in wikipedia</a>, and I've just released a gem that implement it so that a validation method can be directly used: </p>

<pre><code>require 'pbkdf2_password_hasher'
# Some hash from django 
hsh = 'pbkdf2_sha256$12000$PEnXGf9dviXF$2soDhu1WB8NSbFDm0w6NEe6OvslVXtiyf4VMiiy9rH0='

#check with right password:
Pbkdf2PasswordHasher::check_password('bite',hsh) #=&gt; true

#check with wrong password:
Pbkdf2PasswordHasher::check_password('bitten',hsh) #=&gt; false
</code></pre>

<p>Another gem <code>pbkdf2-ruby</code> also exists, however I had some trouble working with it with ruby 2.1.1 (don't know about other versions) so I think this still might help.</p>
","127","<python><ruby-on-rails><ruby><django><pbkdf2>","0","1","1","2014-03-19 20:47:28","22517727","0","","","","","2014-03-19 20:47:28",""
"50967712","C# - PBDKF2, null values","<p>I'm implementing AES in C# and for the IV and key I am using PBDKF2 through the Rfc2898DeriveBytes Class. When I run it, the input text is encrypted, when I view the data in the ""key"" variable, there's an error that says ""Hash = 'key.m_hmacsha1.Hash' threw an exception of type 'System.NullReferenceException'"", along with other null values/0s in other methods. I suspect I am not implementing it correctly in my code, and I am having trouble trying to diagnose it. I hope to gain insight from people who have implemented AES in C#. Also, if a user enters in the wrong key, how would I catch this in an exception? The code is posted below.</p>

<pre><code>using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace AES
{
class Program
{
    public static byte[] salt;
    public static byte[] saltBytes;

    static void Main(string[] args)
    {
        var encrypted = secure.EncryptText(""abc"", ""123"");

        Console.WriteLine(encrypted);

        Console.WriteLine(secure.DecryptText(encrypted, ""123""));
    }

    public string EncryptText(string input, string password)
    {
        // Get the bytes of the string
        byte[] bytesToBeEncrypted = Encoding.UTF8.GetBytes(input);
        byte[] passwordBytes = Encoding.UTF8.GetBytes(password);

        // Hash the password with SHA256
        passwordBytes = SHA256.Create().ComputeHash(passwordBytes);

        byte[] bytesEncrypted = AES_Encrypt(bytesToBeEncrypted, passwordBytes);

        string result = Convert.ToBase64String(bytesEncrypted);

        return result;
    }

    public string DecryptText(string input, string password)
    {
        // Get the bytes of the string
        byte[] bytesToBeDecrypted = Convert.FromBase64String(input);
        byte[] passwordBytes = Encoding.UTF8.GetBytes(password);
        passwordBytes = SHA256.Create().ComputeHash(passwordBytes);

        byte[] bytesDecrypted = AES_Decrypt(bytesToBeDecrypted, passwordBytes);

        string result = Encoding.UTF8.GetString(bytesDecrypted);

        return result;
    }

    public byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
    {
        byte[] encryptedBytes = null;

        // Set your salt here, change it to meet your flavor:
        // The salt bytes must be at least 8 bytes.

        new RNGCryptoServiceProvider().GetBytes(salt = new byte[32]);
        saltBytes = salt;

        using (MemoryStream ms = new MemoryStream())
        {
            using (RijndaelManaged AES = new RijndaelManaged())
            {

                AES.KeySize = 256;
                AES.BlockSize = 128;

                var key = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
                AES.Key = key.GetBytes(AES.KeySize / 8);
                var iv = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
                AES.IV = iv.GetBytes(AES.BlockSize / 8);

                AES.Mode = CipherMode.CBC;

                using (var cs = new CryptoStream(ms, AES.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
                    cs.Close();
                }
                encryptedBytes = ms.ToArray();
            }
        }

        return encryptedBytes;
    }

    public byte[] AES_Decrypt(byte[] bytesToBeDecrypted, byte[] passwordBytes)
    {

        byte[] decryptedBytes = null;

        // Set your salt here, change it to meet your flavor:
        // The salt bytes must be at least 8 bytes.

        using (MemoryStream ms = new MemoryStream())
        {
            using (RijndaelManaged AES = new RijndaelManaged())
            {
                AES.KeySize = 256;
                AES.BlockSize = 128;

                var key = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
                AES.Key = key.GetBytes(AES.KeySize / 8);
                var iv = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
                AES.IV = iv.GetBytes(AES.BlockSize / 8);

                AES.Mode = CipherMode.CBC;

                using (var cs = new CryptoStream(ms, AES.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(bytesToBeDecrypted, 0, bytesToBeDecrypted.Length);
                    cs.Close();
                }
                decryptedBytes = ms.ToArray();
            }
        }

        return decryptedBytes;
    }

}
}
</code></pre>
","<blockquote>
  <p>when I view the data in the ""key"" variable, there's an error that says ""Hash = 'key.m_hmacsha1.Hash' threw an exception of type 'System.NullReferenceException'"", along with other null values/0s in other methods.</p>
</blockquote>

<p>You're inspecting private fields of a class you don't own.  That doesn't always lead to sensible results.  Instead, you should rely only on the public API.</p>

<blockquote>
  <p>if a user enters in the wrong key, how would I catch this in an exception?</p>
</blockquote>

<p>The odds are likely (~15/16) that you'll get an exception indicating ""the padding is invalid and cannot be removed"".  But really you should do this on top of encryption either by</p>

<p>a) computing an HMAC (e.g. HMACSHA256) over the ciphertext, then on decryption verify the HMAC (failure to validate indicates the wrong password or that the data has been tampered with), or</p>

<p>b) Having a well-formed piece of data inside the plaintext that can be used for validation.</p>

<p>(A) is the better answer for various reasons.</p>

<hr>

<p>You have code like </p>

<pre><code>var key = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
AES.Key = key.GetBytes(AES.KeySize / 8);
var iv = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
AES.IV = iv.GetBytes(AES.BlockSize / 8);
</code></pre>

<p>Since your password, salt, and iteration count are the same for both <code>key</code> and <code>iv</code>, your actual IV is the first 128 bits of your encryption key.  If you want it to be a computed value you'd want to vary the salt (e.g. set the last byte of the salt to <code>0</code> for the encryption key, <code>1</code> for the IV, and <code>2</code> for the HMAC key), or do it as the next output bytes (ask for 32 + 16 + 32 bytes and chop it up accordingly... or, given the .NET implementation, call GetBytes(32), GetBytes(16), GetBytes(32) (Rfc2898DeriveBytes.GetBytes is a streaming API)).</p>

<p>Or, for the IV, just use the randomly generated one during encryption and transmit it with the ciphertext.  (If you do that, be sure to include it in your HMAC computation)</p>

<hr>

<p>You store <code>salt</code> and <code>saltBytes</code> in fields (though you set one to the other, so it's unclear why you have two fields).  You need to transmit the salt value along with the ciphertext and have the decryptor accept it as input.</p>

<p>Essentially, your functions should be <code>Encrypt(passphrase, data) =&gt; &lt;salt, hmac, ciphertext&gt;</code> (or <code>&lt;salt, iv, hmac, ciphertext&gt;</code>) and <code>Decrypt(passphrase, salt, [iv,] hmac, ciphertext) =&gt; data</code>.  (Depending on if the IV is transmitted or derived)</p>
","126","<c#><hash><aes><pbkdf2><hmacsha1>","0","0","1","2018-06-25 16:00:04","51027591","0","","","user9972789","2018-06-21 13:00:36","2018-06-21 11:40:28",""
"49167906","In note text encrypted data structure in Evernote","<p>I'm author of a couple evernote extensions, and I wan't to utilize encrypted text, create them on my end and add to a note using the enml structure and en-crypt.</p>

<p>however, I'm unable to figure out the structure of an en-crypt CDATA.</p>

<p>If you look at the .enex file after exporting the note, the enml element of an encrypted text looks like this:</p>

<pre><code>&lt;en-crypt hint=""My Cat's Name""&gt;NKLHX5yK1MlpzemJQijAN6C4545s2EODxQ8Bg1r==&lt;/en-crypt&gt;
</code></pre>

<p>I've read through this
<a href=""https://help.evernote.com/hc/en-us/articles/208314128-What-type-of-encryption-does-Evernote-use"" rel=""nofollow noreferrer"">https://help.evernote.com/hc/en-us/articles/208314128-What-type-of-encryption-does-Evernote-use</a>
which explains that the key is derived with PBKDF2 and the encryption is done with unique salt aes-cbc 256bit method, however, looking at the example above, I'm unable to figure out how that data is stored there. </p>

<p>If I count correctly, There are two unique salts and one IV, as well as the encrypted text to store there. So my question is, how can one make use of that block? There might be a standard way of storing all that information in one base64 block. But I'm no encryption expert so any bit of help is appreciated.</p>

<p>Thanks.</p>
","<p>For old, RC2-based encryption (and if your <code>&lt;en-crypt&gt;</code> tag doesn't have the <code>cipher=""AES""</code> attribute, this is the RC2-based encryption), the algorithm roughly looks like this:</p>

<p><code>decodedString = RC2.decrypt(Base64.decode(encodedString), MD5.hash(UTF8.encode(passphrase)), 64);</code></p>

<p>In the decoded string, the first 4 chars of the string is the HEX-representation of the upper-byte of the CRC32 of the rest of the decoded string.</p>

<p>One caveat: when calculating CRC32, you may need to XOR it with <code>-1</code> (<code>0xFFFFFFFF</code>) as there are different implementations of CRC32 in the wild that may or may not do this final XOR.</p>
","121","<encryption><aes><evernote><pbkdf2><cbc-mode>","0","1","1","2018-03-09 00:51:11","49184955","0","","","","","2018-03-08 07:45:24",""
"33291035","Mismatch between ironclad and couch pbkdf2 hashing","<p>My problem context:
Fedora 22 64bit on Linode KVM instance, CouchDB v.1.6.1, SBCL 1.2.16</p>

<p>CouchDB: I create a user with password <code>""testpass""</code>. The corresponding created document in <code>_users</code> database contains (among other stuff):</p>

<pre><code>{ ...
  ""password_scheme"": ""pbkdf2"",
   ""iterations"": 10,
   ""name"": ""test"",
   ""roles"": [""reader""],
   ""type"": ""user"",
   ""derived_key"": ""7b0cad0d2762b448b88684332e68988e801195ad"",
   ""salt"": ""2e4bcf85f39279ab9d1e1336a00dce0e""
...}
</code></pre>

<p>So in my lisp repl on the same machine I do:</p>

<pre><code>REPL&gt;(in-package :ironclad)
REPL&gt;(byte-array-to-hex-string 
         (pbkdf2-hash-password 
             (ascii-string-to-byte-array ""testpass"") 
             :salt (hex-string-to-byte-array ""2e4bcf85f39279ab9d1e1336a00dce0e"")
             :digest 'sha1 
             :iterations 10))

""ce55610fe10bc49703f0df95adb6c9c9c71e3f8e""
REPL&gt;
</code></pre>

<p>So the output <code>""ce55610fe10bc49703f0df95adb6c9c9c71e3f8e""</code> from ironclad doesn't match <code>""7b0cad0d2762b448b88684332e68988e801195ad""</code> from couch.</p>

<p>I 've tried all the supported digests in ironclad but with no luck. Does anyone have any ideas about what could be wrong?</p>
","<p>It's simple: CouchDB uses <code>""2e4bcf85f39279ab9d1e1336a00dce0e""</code> salt as a binary string, while you turn it into an array of bytes with <code>hex-string-to-byte-array</code>. Unhexing it gives you different salt. It's easy to check:</p>

<pre><code>(node1@127.0.0.1)1&gt; couch_passwords:pbkdf2(&lt;&lt;""testpass""&gt;&gt;, &lt;&lt;""2e4bcf85f39279ab9d1e1336a00dce0e""&gt;&gt;, 10).
&lt;&lt;""7b0cad0d2762b448b88684332e68988e801195ad""&gt;&gt;
(node1@127.0.0.1)2&gt; couch_passwords:pbkdf2(&lt;&lt;""testpass""&gt;&gt;, &lt;&lt;50,101,52,98,99,102,56,53,102,51,57,50,55,57,97,98,57,100,49,101,49,51,51,54,97,48,48,100,99,101,48,101&gt;&gt;, 10).
&lt;&lt;""7b0cad0d2762b448b88684332e68988e801195ad""&gt;&gt;
(node1@127.0.0.1)3&gt; couch_passwords:pbkdf2(&lt;&lt;""testpass""&gt;&gt;, &lt;&lt;46,75,207,133,243,146,121,171,157,30,19,54,160,13,206,14&gt;&gt;, 10).
&lt;&lt;""ce55610fe10bc49703f0df95adb6c9c9c71e3f8e""&gt;&gt;
</code></pre>
","119","<couchdb><common-lisp><pbkdf2><ironclad>","4","6","1","2017-03-10 17:14:23","33292039","0","","11906","","2015-10-22 21:57:37","2015-10-22 21:24:52",""
"50371160","How To Measure PBKDF2 SHA256 Hash Computation Time","<p>I need to measure how long it takes to compute my hash with x number of iterations. Here is code:</p>

<pre><code> function hashPromise(secretPhrase, keylen) {
 let hashedKey
 var promise = new Promise(function(resolve, reject) {
    crypto.pbkdf2(secretPhrase, 'salt', keylen, 256, 
    'sha256', (err, key) =&gt; {
        if (err) {
            console.log(err)
            reject(err);
        } else {
            hashedKey = key.toString('hex')
            let time = new Date().getTime()
            console.log('keylen: ' + keylen)
            console.log('TIMESTAMP Hash Finished: ' + time)
            console.log('hashedKey: ' + hashedKey)
            resolve( hashedSSN )
        }
      })
  })

return promise;
}
</code></pre>

<p>I am looping through this function with promise.all a couple hundred times, passing in a new secretPhrase each time.</p>

<p>I am using a Firebase Functions http request to trigger this functions. Here are my logs when keylen is 1000:</p>

<p><a href=""https://i.stack.imgur.com/yZqZ4.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/yZqZ4.png"" alt=""enter image description here""></a></p>

<p>And here are my logs if keylen is 500000</p>

<p><a href=""https://i.stack.imgur.com/w4enD.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/w4enD.png"" alt=""enter image description here""></a></p>

<p>Would computation time simply be the difference between each 'TIMESTAMP Hash Finished'? Or would it be the time it took the entire function to finish (at top of logs)? </p>

<p>Ie- Computation time using a 500000 keylen is 1526473894031 - 1526473893718 = 313ms ?</p>
","","112","<encryption><hash><google-cloud-functions><pbkdf2>","0","","0","2018-05-16 12:36:47","","2","","","","","2018-05-16 12:36:47",""
"22263248","Beginner: Is this good encryption?","<p>I've managed to knock together some code to encrypt/decrypt a string and I'm wondering whether I've done a good job at it. Is it truly secure, in other words.</p>

<p>I read in a StackOverflow post that reusing the IV is bad practice and should be avoided. I can't say for sure, but I believe that's what I'm doing here. Confirm/deny?</p>

<p>That said, wouldn't using a different IV for each operation render the encrypted stream undecryptable? I'm afraid I don't know as much about this as I'd like.</p>

<p>Here's the code:</p>

<pre><code>Private Function Crypt(InBytes As Byte(), Password As String, Action As EncryptionActions) As Byte()
  Dim oCryptoTransform As ICryptoTransform
  Dim oDesProvider As AesCryptoServiceProvider

  Dim _
    iBlockSize,
    iKeySize,
    iSize As Integer

  Dim _
    aSalt,
    aKey,
    aIV As Byte()

  oDesProvider = New AesCryptoServiceProvider
  oDesProvider.Mode = CipherMode.CBC

  aSalt = {&amp;H10, &amp;H20, &amp;H12, &amp;H23, &amp;H37, &amp;HA4, &amp;HC5, &amp;HA6, &amp;HF1, &amp;HF0, &amp;HEE, &amp;H21, &amp;H22, &amp;H45}

  For iSize = 1024 To 1 Step -1
    If oDesProvider.ValidKeySize(iSize) Then
      iKeySize = iSize
      Exit For
    End If
  Next

  iBlockSize = oDesProvider.BlockSize

  With New Rfc2898DeriveBytes(Password, aSalt, 12345)
    aKey = .GetBytes(iKeySize \ 8)
    aIV = .GetBytes(iBlockSize \ 8)
  End With

  Select Case Action
    Case EncryptionActions.Encrypt : oCryptoTransform = oDesProvider.CreateEncryptor(aKey, aIV)
    Case EncryptionActions.Decrypt : oCryptoTransform = oDesProvider.CreateDecryptor(aKey, aIV)
    Case Else : Throw New ArgumentException(""Invalid encryption action specified."")
  End Select

  Using oOutStream As New MemoryStream
    Using oCryptoStream As New CryptoStream(oOutStream, oCryptoTransform, CryptoStreamMode.Write)
      oCryptoStream.Write(InBytes, 0, InBytes.Length)
    End Using

    Return oOutStream.ToArray
  End Using
End Function
</code></pre>
","<p>I don't know .net so I don't understand the code in details but as far as I can see there are at least the following problems:</p>

<ul>
<li>You are not using authenticated encryption. You should use a MAC like HMAC to detect manipulations of the ciphertext. Otherwise, an attacker could manipulate the ciphertext so that it is decrypted to a plausible plaintext.</li>
<li>For DES there exists weak keys. If you're unlucky your derived key is a weak one but the probability to get a weak key usually is negligible. Furthermore, you should use AES instead of 3DES.</li>
<li>I can't see which cipher mode you use. ECB is not recommended. Today, CBC or CTR are recommended by most cryptographers.</li>
</ul>

<p>The way you should do encryption is as follows:</p>

<ul>
<li>select a key at random or derive a key from a password</li>
<li>use AES-256 in CBC mode with PKCS#5 padding</li>
<li>select an IV at random</li>
<li>encrypt the data</li>
<li>compute an HMAC over the IV + ciphertext</li>
<li>send IV + ciphertext + HMAC</li>
</ul>

<p>When receiving the ciphertext:</p>

<ul>
<li>check that the HMAC of IV + ciphertext is correct</li>
<li>decrypt the ciphertext</li>
</ul>
","109","<encryption><.net><pbkdf2>","0","2","2","2014-03-11 09:23:54","22263249","7","","722393","","2014-03-11 09:23:54","2014-03-07 12:58:31",""
"22263248","Beginner: Is this good encryption?","<p>I've managed to knock together some code to encrypt/decrypt a string and I'm wondering whether I've done a good job at it. Is it truly secure, in other words.</p>

<p>I read in a StackOverflow post that reusing the IV is bad practice and should be avoided. I can't say for sure, but I believe that's what I'm doing here. Confirm/deny?</p>

<p>That said, wouldn't using a different IV for each operation render the encrypted stream undecryptable? I'm afraid I don't know as much about this as I'd like.</p>

<p>Here's the code:</p>

<pre><code>Private Function Crypt(InBytes As Byte(), Password As String, Action As EncryptionActions) As Byte()
  Dim oCryptoTransform As ICryptoTransform
  Dim oDesProvider As AesCryptoServiceProvider

  Dim _
    iBlockSize,
    iKeySize,
    iSize As Integer

  Dim _
    aSalt,
    aKey,
    aIV As Byte()

  oDesProvider = New AesCryptoServiceProvider
  oDesProvider.Mode = CipherMode.CBC

  aSalt = {&amp;H10, &amp;H20, &amp;H12, &amp;H23, &amp;H37, &amp;HA4, &amp;HC5, &amp;HA6, &amp;HF1, &amp;HF0, &amp;HEE, &amp;H21, &amp;H22, &amp;H45}

  For iSize = 1024 To 1 Step -1
    If oDesProvider.ValidKeySize(iSize) Then
      iKeySize = iSize
      Exit For
    End If
  Next

  iBlockSize = oDesProvider.BlockSize

  With New Rfc2898DeriveBytes(Password, aSalt, 12345)
    aKey = .GetBytes(iKeySize \ 8)
    aIV = .GetBytes(iBlockSize \ 8)
  End With

  Select Case Action
    Case EncryptionActions.Encrypt : oCryptoTransform = oDesProvider.CreateEncryptor(aKey, aIV)
    Case EncryptionActions.Decrypt : oCryptoTransform = oDesProvider.CreateDecryptor(aKey, aIV)
    Case Else : Throw New ArgumentException(""Invalid encryption action specified."")
  End Select

  Using oOutStream As New MemoryStream
    Using oCryptoStream As New CryptoStream(oOutStream, oCryptoTransform, CryptoStreamMode.Write)
      oCryptoStream.Write(InBytes, 0, InBytes.Length)
    End Using

    Return oOutStream.ToArray
  End Using
End Function
</code></pre>
","<p>Your question lacks context. What exactly are you trying to achieve? More precisely what attacks are you trying to defend against?</p>

<p>As I understand it, your code always use the same key and initialization vector.</p>

<p>Both the salt parameter passed to PBKDF2 and the IV passed to the block cipher should be generated using a properly seeded CSPRNG. In .Net use <a href=""http://msdn.microsoft.com/fr-fr/library/system.security.cryptography.rngcryptoserviceprovider%28v=vs.110%29.aspx"" rel=""nofollow"">RNGCryptoServiceProvider</a>.</p>

<p>Edit:</p>

<p>The salt and IV are not secrets. They should be part of the message or file or whatever this is your code produces.</p>

<p>One more comment: you should probably not use a hard-coded number of PBKDF2 iterations. The number of iterations required increases over time as hardware becomes faster. Thus the number of iterations should also be part of the message/file/record/whatever.</p>
","109","<encryption><.net><pbkdf2>","0","2","2","2014-03-11 09:23:54","22263249","7","","722393","","2014-03-11 09:23:54","2014-03-07 12:58:31",""
"50953516","AES encrypted string from objective C is not decrypted by Java decrypt function","<p>Hi i have encrypted a string using BBAES library in objective C . After which i passed it to server through webservices . But i keep on getting this error from server , error = ""java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $""</p>

<p>I am able to decrypt that string locally with same library but Java decryption is throwing this error. (This code decrypts correctly when encrypted string sent from Android)</p>

<p>JAVA settings and function:</p>

<pre><code>/** The Constant PASS_PHRASE. */
private static final String PASS_PHRASE = ""PASS"";

/** The Constant ITERATION_COUNT. */
private static final int ITERATION_COUNT = 1000;

/** The Constant KEY_SIZE. */
private static final int KEY_SIZE = 128;

/**
 * Instantiates a new aes util.
 */
public AesUtil() {
    this.keySize = KEY_SIZE;
    this.iterationCount = ITERATION_COUNT;
    try {
        cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
        throw fail(e);
    }
}

 /**
 * Decrypt.
 *
 * @param salt
 *            the salt
 * @param iv
 *            the iv
 * @param passphrase
 *            the passphrase
 * @param ciphertext
 *            the ciphertext
 * @return the string
 */
public String decrypt(String salt, String iv, String passphrase, String ciphertext) {
    try {
        SecretKey key = generateKey(salt, passphrase);
        byte[] decrypted = doFinal(Cipher.DECRYPT_MODE, key, iv, base64(ciphertext));
        return new String(decrypted, ""UTF-8"");
    } catch (UnsupportedEncodingException e) {
        throw fail(e);
    }
}

 /**
 * Generate key.
 *
 * @param salt
 *            the salt
 * @param passphrase
 *            the passphrase
 * @return the secret key
 */
private SecretKey generateKey(String salt, String passphrase) {
    try {
        SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
        KeySpec spec = new PBEKeySpec(passphrase.toCharArray(), hex(salt), iterationCount, keySize);
        SecretKey key = new SecretKeySpec(factory.generateSecret(spec).getEncoded(), ""AES"");
        return key;
    } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
        throw fail(e);
    }
}

 /**
 * Random.
 *
 * @param length
 *            the length
 * @return the string
 */
public static String random(int length) {
    byte[] salt = new byte[length];
    new SecureRandom().nextBytes(salt);
    return hex(salt);
}
</code></pre>

<p>IOS code :</p>

<pre><code>// BBAESSaltDefaultLength = 16 bytes
NSData* salt = [BBAES randomDataWithLength:BBAESSaltDefaultLength];
// BBAESPBKDF2DefaultIterationsCount = 1000 , keysize = 128
NSData *key = [BBAES keyBySaltingPassword:@""PASS"" salt:salt keySize:BBAESKeySize128  numberOfIterations:BBAESPBKDF2DefaultIterationsCount];  

NSString *secretMessage = [NSString stringWithFormat:@""{\""cli\"":\""%@\"",\""work\"":\""%@\""}"",[[NSUserDefaults standardUserDefaults] objectForKey:@""cli""],[[NSUserDefaults standardUserDefaults] objectForKey:@""work""]]; 
NSLog(@""Original message: %@"", secretMessage);

NSData *BBIV = [BBAES randomIV];

NSData *encryptedBBData = [BBAES encryptedDataFromData:data IV:BBIV key:key options:BBAESEncryptionOptionsIncludeIV]; // This generates 64 byts

NSString *encryptedBBString =  [secretMessage bb_AESEncryptedStringForIV:BBIV key:key options:BBAESEncryptionOptionsIncludeIV];
NSLog(@""Encrypted message: %@"", encryptedBBString);

NSString *decryptedMessage = [encryptedBBString bb_AESDecryptedStringForIV:nil key:key]; 
NSLog(@""Decrypted message: %@"", decryptedMessage);

NSString *saltBBString = salt.hexadecimalString;
NSString *IVBBString = BBIV.hexadecimalString; 

[request setHTTPBody:[[NSString stringWithFormat:@""{\""id\"":\""%@\"",\""mx_id\"":\""%@\"",\""payload\"":\""%@\""}"",IVBBString,saltBBString,encryptedBBString] dataUsingEncoding:NSUTF8StringEncoding]];
</code></pre>

<p>What might be wrong ? Can you please help me out ?</p>

<p>EDIT :</p>

<pre><code>NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:60.0];
[request setHTTPMethod:@""POST""]; NSString *authString = [@""Bearer "" stringByAppendingFormat:@""%@"",[[NSUserDefaults standardUserDefaults] objectForKey:@""jwtAuthToken""] ];
[request setValue:authString forHTTPHeaderField:@""Authorization""];
[request setValue:@""mobile"" forHTTPHeaderField:@""source""];
[request setValue:@""application/json"" forHTTPHeaderField:@""Content-Type""];
[request setValue:@""application/json"" forHTTPHeaderField:@""Accept""];
NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:request delegate:self];
</code></pre>
","","108","<java><objective-c><encryption><aes><pbkdf2>","0","","0","2018-06-20 19:22:08","","4","","317894","","2018-06-20 19:22:08","2018-06-20 17:02:49",""
"30779437","Node crypto pbkdf2 yields different keys on 32bit and 64bit machines","<p>The following snippet seems to yield different answers on 32 bit and 64 bit machines. </p>

<pre><code>var buf = new Buffer('ojHkXkabdV7X6xcDNKJgrg==', 'base64');
console.log(crypto.pbkdf2Sync('secret', buf.toString('binary'), 10000, 14, 'sha256').toString('base64'));
</code></pre>

<p>64bit machine is on Node v0.12.4.</p>

<p>32bit machine is on Node v0.10.12.</p>

<p>Is this even possible ? </p>
","<p>I moved node from v0.12.4 to v0.10.12 on the 64 bIt machine and the keys match when the snippet is run on both machines. </p>

<p>I also found the implementation that I really needed resides in v0.12.4 therefore my solution to this issue is to upgrade the 32 bit machine to v0.12.4. </p>

<p>Sorry folks ! This is not an architecture problem. </p>
","107","<node.js><pbkdf2>","0","0","1","2015-06-12 14:11:56","","0","","","","","2015-06-11 11:24:10",""
"47356168","Java native implementation to handling Modular Crypt Format","<p>In my Java application, I am using PBKDF2-SHA256 in JCE for password hashing, and store the output of PBKDF2-SHA256 to the database directly.
Now I am trying to store the name of hashing algorithm and the time to stretch along with the hash value, for future enhancements.</p>

<p>To store these parameters, I think <a href=""http://passlib.readthedocs.io/en/stable/modular_crypt_format.html"" rel=""nofollow noreferrer"">Modular Crypt Format</a> or <a href=""https://github.com/P-H-C/phc-string-format/blob/master/phc-sf-spec.md"" rel=""nofollow noreferrer"">PHC String Format</a> is suitable my purpose.
And in Python, you can handle Modular Crypt Format string by using Passlib.</p>

<h2>Question</h2>

<p>Is there any native Java library to handle Modular Crypt Format or PHC String Format, to store hash value from JCE?
(Open source implementation is the best, but proprietary implementations are acceptable)</p>
","","104","<java><jce><pbkdf2>","0","","0","2017-11-17 17:25:30","","2","","","","","2017-11-17 17:25:30",""
"48391934","Replicating Asp.net Identity Password Hash to Chilkat","<p>Hi I want to replicate the password hashing that is done in asp.net identity such that, the resulting value of password hashed by asp.net identity and the password hashed by Chilkat are same. Is that even possible?</p>

<p>In C# asp.net, we use Rfc2898DeriveBytes that does the pbkdf2 for us. How can I do the same in Chilkat?</p>

<pre><code>    private const int PBKDF2IterCount = 1000; // default for Rfc2898DeriveBytes
    private const int PBKDF2SubkeyLength = 256 / 8; // 256 bits
    private const int SaltSize = 128 / 8; // 128 bits

    //[ComVisible(true)]
    public string HashPassword(string password)
    {
        if (password == null)
        {
            throw new ArgumentNullException(""password cannot be null"");
        }

        // Produce a version 0 (see comment above) text hash.
        byte[] salt;
        byte[] subkey;
        using (var deriveBytes = new Rfc2898DeriveBytes(password, SaltSize, PBKDF2IterCount))
        {
            salt = deriveBytes.Salt;
            subkey = deriveBytes.GetBytes(PBKDF2SubkeyLength);
        }

        var outputBytes = new byte[1 + SaltSize + PBKDF2SubkeyLength];
        Buffer.BlockCopy(salt, 0, outputBytes, 1, SaltSize);
        Buffer.BlockCopy(subkey, 0, outputBytes, 1 + SaltSize, PBKDF2SubkeyLength);
        return Convert.ToBase64String(outputBytes);
    }
</code></pre>

<p>Currently, the parameters I am using at Chilkat are:</p>

<pre><code> Function EncryptChilkat(sPassword As String) As String

Dim crypt As New ChilkatCrypt2

Dim success As Long

success = crypt.UnlockComponent(""ACHIEV.CR1082018_dCrRA3zr4e1M "")

If (success &lt;&gt; 1) Then
    Debug.Print crypt.LastErrorText
    Exit Function
End If

Dim hexKey As String

Dim pw As String
pw = ""pwd""
Dim pwCharset As String
pwCharset = ""base64""

'  Hash algorithms may be: sha1, md2, md5, etc.
Dim hashAlg As String
hashAlg = ""HMCSHA1""

'  The salt should be 8 bytes:
Dim saltHex As String
saltHex = ""78578E5A5D63CB06""

Dim iterationCount As Long
iterationCount = 1000

'  Derive a 128-bit key from the password.
Dim outputBitLen As Long
outputBitLen = 128

'  The derived key is returned as a hex or base64 encoded string.
'  (Note: The salt argument must be a string that also uses
'  the same encoding.)
Dim enc As String
enc = ""base64""

hexKey = crypt.Pbkdf2(pw, pwCharset, hashAlg, saltHex, iterationCount, outputBitLen, enc)

EncryptChilkat = hexKey
End Function
</code></pre>
","<p>Check the binary values of both the password and the salt on both sides.  Also check for trailing nulls, carriage returns, and line feeds.</p>

<p>Additionally, you can see which, if either, algorithm is misbehaving - I have a copy of <a href=""https://github.com/Anti-weakpasswords/PBKDF2-CSharp-DeriveBytes-custom-A"" rel=""nofollow noreferrer"">Jither's .NET PBKDF2 implementation at my github repository</a> including test vectors, and for your Chillkat, you can create what you need from <a href=""https://github.com/Anti-weakpasswords/PBKDF2-Test-Vectors/releases"" rel=""nofollow noreferrer"">my LibreOffice Calc sheet of PBKDF2 test vectors</a>.</p>

<p>Run these through both implementations; whichever one fails is wrong.
If both succeed... then you're not giving both the same parameters.</p>
","96","<pbkdf2><chilkat><rfc2898>","0","0","1","2018-01-27 07:26:58","","0","","","","","2018-01-22 23:33:30",""
"56502361","OpenSSL & C - Hash Passwords w/ SHA256 or SHA512","<p>I've tried my best reading over the docs but they seem very sparing in information (maybe I'm looking in the wrong place?)</p>

<p>I'm trying to create a password hasher in C using OpenSSL lib in which the program can be called and passed arguments such as the ending length of the hashed password, salt length, and the HMAC used (SHA256 or 512). There just isn't a lot of info on how to utilize the API to do this.</p>

<p>The biggest problem I see is that there is a function called <code>PKCS5_PBKDF2_HMAC_SHA1</code>, but I can't find one similar for 256 or 512.. Is only SHA1 available via OpenSSL API?</p>

<p>Any guidance is much appreciated.</p>
","<p>You can use <code>PKCS5_PBKDF2_HMAC</code>, which allows you to target a specific digest algorithm.</p>

<pre><code>int PKCS5_PBKDF2_HMAC(const char *pass, int passlen, 
    const unsigned char *salt, int saltlen, 
    int iter, const EVP_MD *digest, // &lt;&lt;==== HERE
    int keylen, unsigned char *out);
</code></pre>

<p>A simple example appears below, which generates a random salt, then creates a PBK from ""password"", the generated salt, and <code>EVP_sha256()</code></p>

<pre><code>#include &lt;openssl/evp.h&gt;
#include &lt;openssl/rand.h&gt;
#include &lt;openssl/bio.h&gt;

int main(int argc, char *argv[])
{
    int iter = 1007;

    unsigned char salt[32] = {0};
    RAND_bytes(salt, sizeof(salt));

    unsigned char key[32] = {0};
    PKCS5_PBKDF2_HMAC(""password"", 8,
        salt, sizeof(salt),
        iter, EVP_sha256(),
        sizeof(key), key);

    BIO *bio = BIO_new_fp(stdout, BIO_NOCLOSE);
    BIO_dump(bio, (const char*)salt, sizeof(salt));
    BIO_dump(bio, (const char*)key, sizeof(key));
    BIO_free(bio);
}
</code></pre>

<p><strong>Output</strong> (varies)</p>

<pre><code>0000 - a7 ca ac f4 43 b0 2d 48-2b f6 d5 67 7e d2 5c b4   ....C.-H+..g~.\.
0010 - c5 82 1d 4d b1 00 cd 1e-85 91 77 4c 32 3e f3 c8   ...M......wL2&gt;..
0000 - 48 8f be 5a e9 1c 9e 11-d8 95 cb ed 6d 6f 36 a2   H..Z........mo6.
0010 - 38 e6 db 95 e1 d7 a6 c0-8a 2f 3a f6 e1 74 e9 b9   8......../:..t..
</code></pre>
","92","<c><hash><openssl><pbkdf2>","1","0","1","2019-06-08 01:24:29","","0","0","","","","2019-06-07 23:57:52",""
"47524990","How to Make a MediaWiki Password","<p>How do I take a plaintext password and insert an entry in the MySQL database that MediaWiki uses, that would comply to MediaWiki's password rules?</p>

<p>I found <a href=""https://www.mediawiki.org/wiki/Manual:User_table#user_password"" rel=""nofollow noreferrer"">this article</a> on how they store their passwords, but I can't seem to figure out how I can create my own passwords in PHP to then upload them to the database using their ""pbkdf2"" hashing stuff.</p>

<p>I have my own PHP user registration script, which authenticates my users into multiple applications and I want to copy everyone's hash and paste it into all their accounts, so all their passwords would be the same on all the applications.</p>
","<p>Look at <a href=""https://github.com/wikimedia/mediawiki/blob/master/includes/user/User.php#L2634-L2699"" rel=""nofollow noreferrer""><code>User::setPasswordInternal()</code></a>, you can do something similar. Or use <a href=""https://www.mediawiki.org/wiki/Manual:ChangePassword.php"" rel=""nofollow noreferrer""><code>changePassword.php</code></a>. Although ideally you should just <a href=""https://www.mediawiki.org/wiki/Manual:SessionManager_and_AuthManager#PrimaryAuthenticationProvider"" rel=""nofollow noreferrer"">create an authentication provider</a> that looks up the password in your central database instead of the MediaWiki database. Otherwise you run into trouble when the password rules for MediaWiki do not match that of other applications, the user changes passwords in MediaWiki, etc.</p>
","91","<php><passwords><mediawiki><crypt><pbkdf2>","2","2","1","2017-11-30 06:00:10","","0","","4921120","","2017-11-28 14:28:33","2017-11-28 06:07:36",""
"32873379","Authentication with salted password","<p>I'm using <code>scrypt</code> to generate strong hashes of the password of the user. I want to log the user in, but don't want to send the password in plaintext over the wire, how do I check if the password is correct (without a roundtrip), since it is salted?</p>

<p>I'm having a client / server scenario. The client is an application on a desktop computer (not a website, nor http server).</p>

<p>How can I achieve this? I came only this far: I'm generating the the salt + hash on the client, form a mcf out of it and send it to my server. Save the mcf to the database. I haven't send the password, just the hash which is practically useless (since scrypt should be quite strong, and would require a few million years to reverse it). 
How can I now log the user into my service, without sending the plaintext password to the server to compare it? I can't rehash it, since it would result in a different hash due to a different salt? I would need to send the salt to the client, hash the password, send the hash to the server, compare it, and send some authentication token back. </p>

<p>How can I achieve this? Is an authentication token actually secure? It can be simply used to impersonate anyone, I guess?</p>
","<blockquote>
  <p>don't want to send the password in plaintext over the wire, </p>
</blockquote>

<p>Good idea, but if the connection is not encrypted (something like SSL/TLS), then whatever you send <em>is</em> plaintext. If you hash a password client-side, and send it over the network, then THAT is the password. Some would say that there is no benefit here, but it does prevent the user from exposing their actual password, which they probably re-use on other sites. (<a href=""https://security.stackexchange.com/questions/100957/hashing-user-passwords-via-javascript-client-side-versus-server-side-hashing/100961#comment174813_100961"">read more here</a>)</p>

<p>Ideally you would use something like SSL/TLS to encrypt the connection. I guess if that wasn't possible, using asymmetric encryption with certificates on the message itself that you are sending would be an ok way of re-inventing the wheel, but I am hesitant to recommend that without having a security person look over it. It's very easy to screw up, and the rule is never roll your own crypto scheme. </p>

<p>If you can't verify/invalidate/update the public key, then it is not a good scheme.</p>

<blockquote>
  <p>I would need to send the salt to the client, hash the password, send the hash to the server, compare it, and send some authentication token back</p>
</blockquote>

<p>The salt isn't supposed to be super secret, but it's not great to just give it away like that, especially to unauthenticated users. The authentication token, hash, salt, etc can all be intercepted if the connection is not encrypted. Even if they couldn't, you didn't solve the problem of users creating accounts through this method (maybe you don't need to, but it is worth mentioning). </p>

<p>You have to use asymmetric encryption where only the server can decrypt the data.</p>
","90","<security><authentication><bcrypt><pbkdf2><scrypt>","1","2","2","2015-09-30 22:50:16","32874692","0","","","","","2015-09-30 18:39:28",""
"32873379","Authentication with salted password","<p>I'm using <code>scrypt</code> to generate strong hashes of the password of the user. I want to log the user in, but don't want to send the password in plaintext over the wire, how do I check if the password is correct (without a roundtrip), since it is salted?</p>

<p>I'm having a client / server scenario. The client is an application on a desktop computer (not a website, nor http server).</p>

<p>How can I achieve this? I came only this far: I'm generating the the salt + hash on the client, form a mcf out of it and send it to my server. Save the mcf to the database. I haven't send the password, just the hash which is practically useless (since scrypt should be quite strong, and would require a few million years to reverse it). 
How can I now log the user into my service, without sending the plaintext password to the server to compare it? I can't rehash it, since it would result in a different hash due to a different salt? I would need to send the salt to the client, hash the password, send the hash to the server, compare it, and send some authentication token back. </p>

<p>How can I achieve this? Is an authentication token actually secure? It can be simply used to impersonate anyone, I guess?</p>
","<p>There is no short answer to your question, because there are so many pitfalls that can happen if you do it wrong.  But as Gray says, you do need TLS protection.</p>

<p>I have two sources that give you detailed explanations on the right way to do this <em>if</em> you want to do client side scrypt processing.  </p>

<ol>
<li><a href=""https://eprint.iacr.org/2015/387.pdf"" rel=""nofollow"">Method to Protect Passwords in Databases for Web Applications</a>.  If you do not want to understand all the rationale, just jump to section 4 to see the implementation (where PPF = your scrypt).</li>
<li><a href=""http://ithare.com/client-plus-server-password-hashing-as-a-potential-way-to-improve-security-against-brute-force-attacks-without-overloading-server/"" rel=""nofollow"">Client-Plus-Server Password Hashing as a Potential Way to Improve Security Against Brute Force Attacks without Overloading the Server</a>.</li>
</ol>

<p>They are slightly different solutions but based upon the same ideas, and either should be good enough for you.</p>
","90","<security><authentication><bcrypt><pbkdf2><scrypt>","1","1","2","2015-09-30 22:50:16","32874692","0","","","","","2015-09-30 18:39:28",""
"15488200","hash_pbkdf2 gives no output","<p>I'm writing a piece of php code but is does not give me the output i want;</p>

<pre><code>function passhash($unhashPass){

if(CRYPT_BLOWFISH != 1) {
       throw new Exception(""bcrypt not supported in this installation.);
    }
$salt = ""test123"";
$password = hash_pbkdf2 (""sha256"", $unhashPass, $salt, 1, 20);
echo $password;
return $password;
} 
</code></pre>

<p>When i put an echo statement for unhashpass or salt before the hash it works, but after it does nothing, the whole php script just gives me a white screen.
Can somebody help me :)?</p>

<p>Cheers</p>
","<p>The function <code>hash_pbkdf2()</code> will be introduced in PHP version 5.5, so i suspect that your installed PHP version does not yet support this function. Before you call the function, you test whether BCrypt is defined, but the function <code>hash_pbkdf2()</code> (password-based-key-derivation-function) has nothing to do with BCrypt.</p>

<p>It is recommended to hash passwords with BCrypt though, in PHP version 5.5 you can do it with <code>password_hash()</code> instead. There also exist a <a href=""https://github.com/ircmaxell/password_compat/blob/master/lib/password.php"" rel=""nofollow"">compatibility pack</a> for earlier versions.</p>

<pre><code>// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_BCRYPT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);
</code></pre>
","86","<php><hash><passwords><pbkdf2>","0","0","1","2013-03-19 07:54:15","15494114","0","","575765","","2013-03-19 07:54:15","2013-03-18 22:30:07",""
"45893641","Output difference in C implementation of Java code","<p>I am using PBKDF2 password hashing technique in my program. The sample program to which I am referring is in C.
The program snippet is as follows:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;getopt.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;openssl/rand.h&gt;
#include ""base64.h""

#define KEY_LENGTH      24
#define SEPARATOR       ""$""
#define SALTLEN 12

#define USAGE() fprintf(stderr, ""Usage: %s [-i iterations] [-p password]\n"", progname)

int main(int argc, char **argv)
{
    int iterations = 901, rc, blen;
    unsigned char   saltbytes[SALTLEN];
    char *salt, *b64;
    unsigned char key[128];
    char *pw1, *pw2, *password;
    char *progname = argv[0];
    int c;
    int prompt;

    prompt = 1;

    while ((c = getopt(argc, argv, ""i:p:"")) != EOF) {
        switch (c) {
            case 'i':
                iterations = atoi(optarg);
                break;
            case 'p':
                pw1 = strdup(optarg);
                pw2 = strdup(optarg);   
                prompt = 0;
                break;
            default:
                exit(USAGE());
        }
    }

    argc -= optind - 1;
    argv += optind - 1;

    if (argc != 1) {
        exit(USAGE());
    }

    if ( prompt ) {
        pw1 = strdup(getpass(""Enter password: ""));
        pw2 = getpass(""Re-enter same password: "");
    }

    if (strcmp(pw1, pw2) != 0) {
        fprintf(stderr, ""Passwords don't match!\n"");
        return (1);
    }

    password = pw1;

    rc = RAND_bytes(saltbytes, SALTLEN);
    if (rc == 0) {
        fprintf(stderr, ""Cannot get random bytes for salt!\n"");
        return 2;
    }

    base64_encode(saltbytes, SALTLEN, &amp;salt);

#ifdef RAW_SALT
    PKCS5_PBKDF2_HMAC(password, strlen(password),
        (unsigned char *)saltbytes, SALTLEN,
        iterations,
        EVP_sha256(), KEY_LENGTH, key);
#else
    int saltlen;
    saltlen = strlen(salt);

    PKCS5_PBKDF2_HMAC(password, strlen(password),
        (unsigned char *)salt, saltlen,
        iterations,
        EVP_sha256(), KEY_LENGTH, key);
#endif


    blen = base64_encode(key, KEY_LENGTH, &amp;b64);
    if (blen &gt; 0) {
        printf(""PBKDF2$%s$%d$%s$%s\n"",
            ""sha256"",
            iterations,
            salt,
            b64);

        free(b64);
    }

    free(password);
    return 0;
}
</code></pre>

<p>And the C program output is as follows : 
 PBKDF2$sha256$901$QLtznh6yjEs4a4Fl$<strong>uzp3QAEpFZsqBvCssnL1eXZFxCiKzV7P</strong></p>

<p>I tried to replicate the same in Java, which is as follows:</p>

<pre><code>public class NewPBKDF2 {

    public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeySpecException {
        String originalPassword = ""A3E9907E59A6379DB6A9C2657D242A64886D5B21E3586B3D4C2B4E6329570A10"";
        String generatedSecuredPasswordHash = generateStorngPasswordHash(originalPassword);
        System.out.println(generatedSecuredPasswordHash);
    }

    private static String generateStorngPasswordHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {
        int iterations = 901;
        char[] chars = password.toCharArray();
        byte[] salt = getSalt();
        String salt1 = Base64.getEncoder().encodeToString(salt);
        int length = 24;




        PBEKeySpec spec = new PBEKeySpec(chars, salt, iterations, length * 8 );
        SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
        byte[] hash = skf.generateSecret(spec).getEncoded();
        String hash1 = bytesToHex(hash);

        try {
            hash1 = Base64.getEncoder().encodeToString(hash1.getBytes(""utf-8""));
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(NewPBKDF2.class.getName()).log(Level.SEVERE, null, ex);
        }


        return ""PBKDF2$sha256$""+ iterations +""$""+salt1+""$""+hash1;
    }

    private static byte[] getSalt() throws NoSuchAlgorithmException {
        SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");

        byte[] salt = new byte[12];


        sr.nextBytes(salt);
        return salt;
    }

   static char[] hexArray = ""0123456789ABCDEF"".toCharArray();
     public static String bytesToHex(byte[] bytes) {
        char[] hexChars = new char[bytes.length * 2];
        for (int j = 0; j &lt; bytes.length; j++) {
            int v = bytes[j] &amp; 0xFF;
            hexChars[j * 2] = hexArray[v &gt;&gt;&gt; 4];
            hexChars[j * 2 + 1] = hexArray[v &amp; 0x0F];
        }
        return new String(hexChars);
    }

     public static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i &lt; len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) &lt;&lt; 4)
                    + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }

}
</code></pre>

<p>And the above program is giving me output as follows:</p>

<p>PBKDF2$sha256$901$v2DdYPk47r/I3aQJ$<strong>N0Y3MjZENzVEOTE5MDcxQkNEOEM5MTAyREQ2MjdEQ0NGNzIzRTZGN0ZCOUYzN0NF</strong></p>

<p>Why I am getting different password length(the last part). I don't get it.
Can you please help me find my mistake?</p>
","<p>The answer to your question is laid on the foundations of various <strong>Character Encoding</strong> styles. And the dissimilarity in length of String is because of the use of different Encoding in both cases(C and Java Implementation).</p>

<p>You can note in your example that the <code>hash1</code>(because of which the dissimilarity in length is prominent) variable is encoded in <code>UTF-8</code> in <strong>Java</strong> while the C used <code>ASCII</code> character encoding(Already mentioned in the <a href=""https://stackoverflow.com/questions/3996026/what-is-the-default-encoding-for-c-strings"">ANSI</a> standards).<br>
Also, UTF-8 is a multi-byte encoding is a multi-byte encoding which uses between 1 and 4 bytes per character.
You can also refer this:<a href=""https://stackoverflow.com/questions/5290182/how-many-bytes-does-one-unicode-character-take"">How many bytes does Unicode Character takes?</a> which might be interesting and that is why the hashes are longer in length in java as compared to C. </p>

<p>Hope the answer helps to get some insights about the <strong>well-researched</strong> problem. </p>
","80","<java><c><base64><pbkdf2>","3","1","1","2017-08-26 14:17:43","","2","","15168","","2017-08-26 14:17:43","2017-08-26 08:46:48",""
"33482375","Does Parse.com's Crypto library support PBKDF2?","<p>A lack of documentation for a <code>crypto</code> library available from Cloud Code in Parse.com suggests I should look elsewhere. But I have found it to support AES encryption and some hashing.</p>

<p>I can't see any PBKDF2 support.</p>

<p>Can anyone confirm if Parse.com Crypto supports PBKDF2? And do you have an API example?</p>
","<p>I haven't used it in cloud code personally, but <a href=""https://www.parse.com/questions/documentation-for-parse-cloud-code-module-crypto"" rel=""nofollow"">here's a relevant post from Parse that addresses your question.</a> With regards to the crypto module in cloud code,</p>

<blockquote>
  <p>It's the general node module that can be found here:
  <a href=""http://nodejs.org/api/crypto.html"" rel=""nofollow"">http://nodejs.org/api/crypto.html</a></p>
</blockquote>

<p>Crypto does support PBKDF2 and if you need a newer version of the module, you can load the module directly by placing a copy in your cloud/ folder and using require('cloud/crypto')</p>
","80","<parse-platform><pbkdf2>","0","0","2","2015-11-05 16:54:00","33550385","0","","","","","2015-11-02 16:30:27",""
"33482375","Does Parse.com's Crypto library support PBKDF2?","<p>A lack of documentation for a <code>crypto</code> library available from Cloud Code in Parse.com suggests I should look elsewhere. But I have found it to support AES encryption and some hashing.</p>

<p>I can't see any PBKDF2 support.</p>

<p>Can anyone confirm if Parse.com Crypto supports PBKDF2? And do you have an API example?</p>
","<p>Yes, the default crypto library offered up by Cloud Code does support PBKDF2 so there is no need to attempt to port another library into the framework.</p>

<p>e.g.,</p>

<pre><code>var crypto = require('crypto');
var SALT_LEN = 32;

function randomSafeBytes(len) {
    return crypto.randomBytes(len)
    .toString('base64')
    .slice(0,len)
    .replace(/\+/g, '0')  // replace '+' with '0'
    .replace(/\//g, '0'); // replace '/' with '0'
}

function generate_key(password) {
// get a brand new key
    var salt = randomSafeBytes(SALT_LEN);
    return {
        salt:salt,
        key:generate_key_from_salt(password, salt)
    }
}

function generate_key_from_salt(password, salt) {
    // regenerate a key from a given salt
    var ITERATIONS = 100000; // tune this figure to balance platform/needs
    var KEY_LEN = 32;
    return crypto.pbkdf2Sync(password, salt.slice(0,SALT_LEN), ITERATIONS, KEY_LEN);
}
</code></pre>
","80","<parse-platform><pbkdf2>","0","0","2","2015-11-05 16:54:00","33550385","0","","","","","2015-11-02 16:30:27",""
"42557221","seafile pbkdf2 hash php","<p>i'm trying to generate a random password for user everytime he needs to login on my seafile server.
seafile use:
- PBKDF2 with SHA256
- 10000 iterations
- 32 bytes salt</p>

<p>The code i use is this:</p>

<pre><code>&lt;?php   
  $salt = random_bytes(32);
  $salt = bin2hex($salt);
  $iterations = 10000;
  echo ""GENERATED SALT: "" . $salt . ""&lt;br&gt;"" . ""&lt;br&gt;"";

  $hash =  hash_pbkdf2 (""sha256"" , ""weirdone"" , $salt , $iterations);
  echo ""GENERATED HASH: "" . $hash . ""&lt;br&gt;"" . ""&lt;br&gt;"";

  echo ""FINAL RESULT: PBKDF2SHA256$"" . $iterations . ""$"" . $salt . ""$"" . $hash . ""&lt;br&gt;"" . ""&lt;br&gt;"";

?&gt;
</code></pre>

<p>the problem is that even with the same salt i get different output
Example:</p>

<pre><code>SALT: 09d095a396852b525ce7f5408fe7d314a2632a19bfc8c495c8e79bd4e6aebfed
PASSWORD: weirdone

  seafile output:
  PBKDF2SHA256$10000$09d095a396852b525ce7f5408fe7d314a2632a19bfc8c495c8e79bd4e6aebfed$45145c60802f1fdce581a550b5e23f8027ba6ff0720c81f2efaa73025bd465ca

  my output:
  PBKDF2SHA256$10000$09d095a396852b525ce7f5408fe7d314a2632a19bfc8c495c8e79bd4e6aebfed$007c599ba2d0076e19589bb90303155efa2df8a2f6b49d845902c075bc5f5492
</code></pre>

<p>if the algorithm, the salt, the password and the iterations are the same why they do not match?</p>

<p>the goal is to generate the new password, insert it in the database and give that to the user so he can login.</p>

<p>Thanks</p>
","<p>You're passing in the hex-encoded $salt, need to pass in the raw bytes $salt to hash_pbkdf2().</p>
","79","<php><hash><pbkdf2>","0","1","1","2017-03-04 14:10:42","42596964","0","","","","","2017-03-02 13:48:31",""
"54057789","How to achieve same results with PBKDF2WithHmacSha1 in JAVA and Swift","<p>I am trying to strengthen the user password with the PBKDF2WithHmacSHA1 encryption to produce a randomized salt and hash. Having successfully accomplished this in JAVA and SWIFT, i produce two different results of different lengths. in Java i produce a hash that is about 44-48 characters long. In Swift i produce a hash that is 528 characters long.</p>

<p>I've tried following the advice from this post , <a href=""https://stackoverflow.com/questions/42931574/pbkdf2withhmacsha1-java-to-swift-3"">PBKDF2WithHmacSHA1 Java to Swift 3</a>, but still did not receive the desired length. </p>

<p><strong><em>JAVA CODE</em></strong></p>

<pre><code>SecretKeyFactory key = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    byte[] hashedPassword = key.generateSecret(spec).getEncoded();
    DebugLog.logd(""Tools"",""hashPassword tableau bytes = "" + hashedPassword);            
    return toHex(hashedPassword).getBytes();
</code></pre>

<p>with toHex() method provided from the post above</p>

<pre><code>private static String toHex(byte[] array) {
BigInteger bi = new BigInteger(1, array);
String hex = bi.toString(16);
int paddingLength = (array.length * 2) - hex.length();
if(paddingLength &gt; 0)
    return String.format(""%0"" + paddingLength + ""d"", 0) + hex;
else
    return hex;
</code></pre>

<p>}</p>

<p><strong><em>SWIFT 3 code</em></strong></p>

<pre><code>let passwordArray: [UInt8] = Array(test.utf8)
let saltArray: [UInt8] = Array(salt.utf8)

let result = try! PKCS5.PBKDF2(password: passwordArray, salt: saltArray,       iterations: iter, keyLength: 192, variant: .sha1).calculate()
</code></pre>

<p>I am expecting to get a hash function of equal length. for test purposes i use the same salt in both cases to try and get the same results. either way with java ill get 44-48 characters long and with swift i get 528 characters long. is there anyway i can alter the swift code to get a resulting hash equal to that of javas result. any help would be appreciated</p>

<p><strong><em>side note:</em></strong> In the post above, the OP used key length of 192 while i am using a key length of 256. i have also tried to comment and ask a question on the original post, but i dont have enough reputation to do so. i need 50 and i have 3 ... lol</p>
","","79","<java><android><ios><swift><pbkdf2>","1","","0","2019-01-06 04:46:20","","0","","10740937","","2019-01-06 04:46:20","2019-01-06 01:08:45",""
"55932053","PBKDF2 as a function in Excel","<p>I've managed to get SHA256 hashing working in Excel but was looking for something a little more secure, I've come across PBKDF2 Hash Generation here:
<a href=""https://stackoverflow.com/questions/45542723/pbkdf2-excel-udf-and-how-to-concatenate-inti"">PBKDF2 Excel UDF and how to concatenate INT(i)</a>
But the code in the solution doesn't run:</p>

<blockquote>
  <p>Compile error: User-defined type not defined</p>
</blockquote>

<p>With the following highlighted:</p>

<pre><code>Function HMAC(ByVal plainText As String, _
    ByVal algoritm As hmacAlgorithm, _
    Optional ByVal key As String, _
    Optional ByVal decodeKey As keyDecoding = kdNone_String, _
    Optional ByVal encodeHash As hashEncoding = heBase64) As Variant
</code></pre>

<p>My end hope is to have a function similar to the SHA256 I have =SHA256hash(A2) with PBKDF2 keylength,salt and iterations as options
=PBKDF2(A2,512,saltysalt,5000)
For instance, so it's something simple for the team here to implement, as we all know, the more difficult it is to implement, the less likely people are to do it.</p>

<p>The code on the above link is:</p>

<p><strong>Enums</strong></p>

<pre><code>Enum hmacAlgorithm
    HMAC_MD5
    HMAC_SHA1
    HMAC_SHA256
    HMAC_SHA384
    HMAC_SHA512
End Enum

Enum hashEncoding
    heBase64
    heHex
    heNone_Bytes
End Enum
</code></pre>

<p><strong>PBKDF2 Function</strong></p>

<pre><code>Function PBKDF2(ByVal password As String, _
    ByVal salt As String, _
    ByVal hashIterations As Long, _
    ByVal algoritm As hmacAlgorithm, _
    Optional ByVal dkLen As Long, _
    Optional ByVal encodeHash As hashEncoding = heBase64) As Variant

'https://tools.ietf.org/html/rfc2898 - PKCS #5: Password-Based Cryptography Specification Version 2.0
'https://tools.ietf.org/html/rfc6070 - PKCS #5: Password-Based Key Derivation Function 2 (PBKDF2) Test Vectors
'https://en.wikipedia.org/wiki/PBKDF2

'DK = T1 || T2 || ... || Tdklen/hlen
'Ti = F(password, salt, c, i)
'
'F(Password, Salt, c, i) = U1 ^ U2 ^ ... ^ Uc
'
'U_1 = PRF (P, S || INT (i)) (INT (i) is a four-octet encoding of the integer i, most significant octet first.)
'U_2 = PRF (P, U_1)
'...
'U_c = PRF (P, U_{c-1})

Dim utf8Encoding As Object
Dim hashManager As Object

Dim hLen As Long
Dim noBlocks As Long
Dim noBlock As Long

Dim hmacKeyBytes() As Byte
Dim saltBytes() As Byte
Dim uboundSaltBytes As Long

Dim hmacBytes() As Byte
Dim tempBytes() As Byte
Dim outputBytes() As Byte

Dim i As Long
Dim j As Long

'Create utf8-encoding object
Set utf8Encoding = CreateObject(""System.Text.UTF8Encoding"")

'Create hmac object
Select Case algoritm
    Case HMAC_MD5
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACMD5"")
    Case HMAC_SHA1
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA1"")
    Case HMAC_SHA256
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA256"")
    Case HMAC_SHA384
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA384"")
    Case HMAC_SHA512
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA512"")
End Select

'Check the length of the blocks to be generated
hLen = hashManager.HashSize / 8

'Calculate amount of blocks 'T'
If dkLen = 0 Then dkLen = hLen
noBlocks = Application.WorksheetFunction.Ceiling(dkLen / hLen, 1)

'Encode the key and salt to bytes
hmacKeyBytes = utf8Encoding.GetBytes_4(password)
saltBytes = utf8Encoding.GetBytes_4(salt)

'Set the key in the crypto class
hashManager.key = hmacKeyBytes

'Get the length of the salt, add 4 to concatenate INT(I)
uboundSaltBytes = UBound(saltBytes) + 4

'Loop T1 || T2 || ... || Tdklen/hlen
For i = 1 To noBlocks

    'Salt || INT(i)
    'INT (i) is a four-octet encoding of the integer i, most significant octet first.
    tempBytes = saltBytes
    ReDim Preserve tempBytes(uboundSaltBytes)
    noBlock = i

    'Calculate INT(i) of Salt || INT(i)
    For j = 3 To 0 Step -1
        tempBytes(uboundSaltBytes - j) = Int(noBlock / (255 ^ j))
        noBlock = noBlock - Int(noBlock / (255 ^ j)) * 255 ^ j
    Next j

    'Hash U1: Salt || INT(i)
    hmacBytes = hashManager.ComputeHash_2(tempBytes)
    tempBytes = hmacBytes

    'Hash, Xor: U1 ^ U2 ^ ... ^ Uc
    For j = 1 To hashIterations - 1
        hmacBytes = hashManager.ComputeHash_2(hmacBytes)
        tempBytes = XorBytes(tempBytes, hmacBytes)
    Next j

    'For the first block outputBytes() is empty
    If i = 1 Then
        outputBytes = tempBytes
    Else
        ConcatenateArrayInPlace outputBytes, tempBytes
    End If

Next i

'Extract the first dkLen octets to produce a derived key DK:
ReDim Preserve outputBytes(dkLen - 1)

'Base64, Hex, or Byte() output
If encodeHash = heBase64 Then
    PBKDF2 = Encode(outputBytes, edBase64)
ElseIf encodeHash = heHex Then
    PBKDF2 = Encode(outputBytes, edHex)
Else
    PBKDF2 = outputBytes
End If

Set hashManager = Nothing
Set utf8Encoding = Nothing

End Function
</code></pre>

<p><strong>HMAC function</strong></p>

<pre><code>Function HMAC(ByVal plainText As String, _
    ByVal algoritm As hmacAlgorithm, _
    Optional ByVal key As String, _
    Optional ByVal decodeKey As keyDecoding = kdNone_String, _
    Optional ByVal encodeHash As hashEncoding = heBase64) As Variant

Dim hashManager As Object

Dim hashBytes() As Byte
Dim hmacKeyBytes() As Byte

'Create the specific hash manager based on the hash algoritm
Select Case algoritm
    Case HMAC_MD5
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACMD5"") 'Returns 128 bits, 16 bytes
    Case HMAC_SHA1
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA1"") 'Returns 160 bits, 20 bytes
    Case HMAC_SHA256
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA256"") 'Returns 256 bits, 32 bytes
    Case HMAC_SHA384
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA384"") 'Returns 384 bits, 48 bytes
    Case HMAC_SHA512
        Set hashManager = CreateObject(""System.Security.Cryptography.HMACSHA512"") 'Returns 512 bits, 64 bytes
End Select

'Encode the plaintText to bytes
hashBytes = UTF8_GetBytes(plainText)

If key = vbNullString Then

    'Get the key generated by the hashManager
    hmacKeyBytes = hashManager.key

    'Calculate the hash
    hashBytes = hashManager.ComputeHash_2(hashBytes)

    'Return encoded result
    If encodeHash = heBase64 Then
        HMAC = ""&lt;Key&gt;"" &amp; Encode(hmacKeyBytes, edBase64) &amp; ""&lt;Key&gt;"" &amp; vbCrLf &amp; Encode(hashBytes, edBase64)
    ElseIf encodeHash = heHex Then
        HMAC = ""&lt;Key&gt;"" &amp; Encode(hmacKeyBytes, edHex) &amp; ""&lt;Key&gt;"" &amp; vbCrLf &amp; Encode(hashBytes, edHex)
    End If

Else

    'Decode and set the key
    Select Case decodeKey
    Case kdBase64
        hashManager.key = Decode(key, edBase64)
    Case kdHex
        hashManager.key = Decode(key, edHex)
    Case Else
        hashManager.key = UTF8_GetBytes(key)
    End Select

    'Calculate the hash
    hashBytes = hashManager.ComputeHash_2(hashBytes)

    'Return encoded result
    If encodeHash = heBase64 Then
        HMAC = Encode(hashBytes, edBase64)
    ElseIf encodeHash = heHex Then
        HMAC = Encode(hashBytes, edHex)
    End If

End If

Set hashManager = Nothing

End Function
</code></pre>

<p><strong>Test subroutine:</strong></p>

<pre><code>Sub PBKDF2_Test()

Dim testvector As String
Dim pbkdf2_result As String

pbkdf2_result = PBKDF2(""password"", ""salt"", 1, HMAC_SHA1, 20, heHex)
testvector = ""0c60c80f961f0e71f3a9b524af6012062fe037a6""
If pbkdf2_result = testvector Then Debug.Print ""TV1: OK"" Else Debug.Print ""TV1: FAULT""

pbkdf2_result = PBKDF2(""password"", ""salt"", 2, HMAC_SHA1, 20, heHex)
testvector = ""ea6c014dc72d6f8ccd1ed92ace1d41f0d8de8957""
If pbkdf2_result = testvector Then Debug.Print ""TV2: OK"" Else Debug.Print ""TV2: FAULT""

pbkdf2_result = PBKDF2(""password"", ""salt"", 4096, HMAC_SHA1, 20, heHex)
testvector = ""4b007901b765489abead49d926f721d065a429c1""
If pbkdf2_result = testvector Then Debug.Print ""TV3: OK"" Else Debug.Print ""TV3: FAULT""

pbkdf2_result = PBKDF2(""passwordPASSWORDpassword"", ""saltSALTsaltSALTsaltSALTsaltSALTsalt"", 4096, HMAC_SHA1, 25, heHex)
testvector = ""3d2eec4fe41c849b80c8d83662c0e44a8b291a964cf2f07038""
If pbkdf2_result = testvector Then Debug.Print ""TV4: OK"" Else Debug.Print ""TV4: FAULT""

End Sub
</code></pre>

<p>Any assistance would be greatly appreciated. Googling doesn't turn up much on PBKDF2 use in Excel.</p>
","<p>This whole section in your <code>HMAC</code> function is missing some enum definitions:</p>

<pre><code>Select Case decodeKey
Case kdBase64
    hashManager.key = Decode(key, edBase64)
Case kdHex
    hashManager.key = Decode(key, edHex)
Case Else
    hashManager.key = UTF8_GetBytes(key)
End Select
</code></pre>

<p><code>decodeKey</code> is declared in your function signature with type <code>keyDecoding</code> which I presume is an enum:</p>

<pre><code>Optional ByVal decodeKey As keyDecoding = kdNone_String
</code></pre>

<p>That's what's giving your error, this <code>keyDecoding</code> enum is not defined anywhere. However it looks like it only has 3 members so you could probably roll your own.</p>

<p>The <code>Decode</code> and <code>Encode</code> functions meanwhile take some enum with <code>edBase64</code> and <code>edHex</code> members. This enum also isn't defined anywhere (although this is not what gives you the error, it's the first point I mentioned).</p>

<p>You haven't included those two functions anyway so I can't say much more than that, but I imagine their signatures will tell you what the name of your second missing enum is. There maybe other issues with the code, but that's just what stood out to me. Make sure you've copied it from source correctly:)</p>
","78","<excel><vba><pbkdf2>","1","1","1","2019-05-01 06:55:56","","3","","","","","2019-05-01 05:37:28",""
"39701172","Password Migration from Django to Mysql","<p>Hello I have my existing web application in <code>Django</code>. Now I am migrating to <code>node js</code> and I am using the <code>bcrypt</code> algorithm for hashing the password. So, the problem is: In Django , it uses <code>pbkdf2_sha256</code> algorithm for storing password. How do I migrate password from Django so that my matching algorithm match the peviously stored password correctly?</p>
","<p>Use the node.js <code>crypto.pbkdf2</code> function, see <a href=""https://nodejs.org/api/crypto.html#crypto_crypto_pbkdf2_password_salt_iterations_keylen_digest_callback"" rel=""nofollow"">crypto.pbkdf2</a>. PBKDF2 is the suggested passsword hashing method in the NIST SP 800-63-3 Draft document.</p>
","77","<node.js><bcrypt><sha256><pbkdf2>","0","0","1","2016-09-26 11:47:19","","0","","","","","2016-09-26 11:05:51",""
"49636129","C# SSO hashing migrated to PHP","<p>I'm working on an SSO implementation in PHP that authenticates to a system written in C#. Here's some pseudo code to demonstrate:</p>

<pre><code>$token = ""MqsXexqpYRUNAHR_lHkPRic1g1BYhH6bFNVPagEkuaL8Mf80l_tOirhThQYIbfWYErgu4bDwl-7brVhXTWnJNQ2"";
$id = ""bob@company.com"";
$ssokey = ""7MpszrQpO95p7H"";
$idAndKey = $id . $ssokey;
$salt = base64_decode(substr($token, 0, -1));
$hashed = hash_pbkdf2(""sha256"", $idAndKey, mb_convert_encoding($salt, 'UTF-16LE'), 1000, 24, false);
$data = base64_encode($hashed);
</code></pre>

<p>This outputs: <code>NWZiMTBhZmNhNTlmYzMxMTEzMThhZmVl</code></p>

<p>Here's the C# version from the system with which I'm integrating:</p>

<pre><code>var token = ""MqsXexqpYRUNAHR_lHkPRic1g1BYhH6bFNVPagEkuaL8Mf80l_tOirhThQYIbfWYErgu4bDwl-7brVhXTWnJNQ2"";
var id = ""bob@company.com"";
var ssokey = ""7MpszrQpO95p7H"";
string idAndKey = id + ssokey;
var salt = HttpServerUtility.UrlTokenDecode(token);
var pbkdf2 = new Rfc2898DeriveBytes(idAndKey, salt) {IterationCount = 1000};
var key = HttpServerUtility.UrlTokenEncode(pbkdf2.GetBytes(24)); 
Console.WriteLine(key.ToString());
</code></pre>

<p>This outputs: <code>aE1k9-djZ66WbUATqdHbWyJzskMI5ABS0</code></p>

<p>I cannot figure out how to get my PHP code to do the same thing. I have a feeling it is in the <code>salt</code> generation.</p>

<p>I've tried to translate the C# <code>HttpServerUtility.UrlTokenDecode</code> function to PHP like so:</p>

<pre><code>function UrlTokenDecode($token) {
    $numPadChars = substr($token, -1);

    // add the padded count to the end
    $salt = substr($token, 0, -1) . $numPadChars;

    // Transform the ""-"" to ""+"", and ""*"" to ""/""
    $salt = str_replace('-', '+', str_replace('*', '/', $salt));

    // base64_decode
    $salt = base64_decode($salt);

    return $salt;
}
</code></pre>

<p>That didn't get me to where I needed to go. Halp!</p>

<p>This is for Absorb LMS. Documentation of their methods are here: <a href=""https://support.absorblms.com/hc/en-us/articles/222446647-Incoming-Absorb-Single-Sign-On#Methods"" rel=""nofollow noreferrer"">https://support.absorblms.com/hc/en-us/articles/222446647-Incoming-Absorb-Single-Sign-On#Methods</a></p>

<p>Thanks!</p>
","<p>I've already burned through more time than I should have on this, but while it's not a complete answer, the few major problems that I found were:</p>

<ol>
<li>The hashing algorithm is SHA1, not SHA256. [as @Evk already noted]</li>
<li><p><code>HttpServerUtility.UrlToken(De|En)code()</code> use a url-safe variant of base64 that needs to be replicated.</p>

<pre><code>function base64url_encode($bin) {
    return str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($bin));
}

function base64url_decode($str) {
    return base64_decode(str_replace(['-', '_'], ['+', '/'], $str));
}
</code></pre></li>
<li><p>When you decode the token the result is a binary string, and trying to run that through mb_convert_encoding to change the endian-ness [I found that awful blog post too] won't do what you think. You can try the following, but the token has an odd number of bytes which is problematic no matter which way you look at it. [edit: is there just a bare <code>\x0d</code> carriage return at the end?]</p>

<pre><code>function swapEndian16($in) {
    $out = '';
    foreach(str_split($in, 2) as $chunk) {
        $out .= $chunk[1] . $chunk[0];
    }
    return $out;
}
</code></pre></li>
<li><p>The last argument to <a href=""http://php.net/manual/en/function.hash-pbkdf2.php"" rel=""nofollow noreferrer""><code>hash_pbkdf2()</code></a> should be <code>true</code>, otherwise you're getting a hex-encoded hash rather than the raw bytes.</p></li>
</ol>

<p>Really what I'd suggest is asking your vendor if they have any insight on accomplishing this. Chances are that someone's already had and solved this problem with their integrations.</p>

<p><strong>Edit:</strong> With the new info from @Evk's answer, here are some sassily-named functions for compatibility with C#'s <em>brilliant</em> base64 URL encoding:</p>

<pre><code>function dumb_base64url_encode($bin) {
    return preg_replace_callback(
        '/(=*)$/',
        function($matches){
            return strlen($matches[0]);
        },
        str_replace(
            ['+', '/'],
            ['-', '_'],
            base64_encode($bin)
        ),
        1
    );
}

function dumb_base64url_decode($str) {
    return base64_decode(
        str_replace(
            ['-', '_'],
            ['+', '/'],
            substr($str, 0, -1)
        )
    );
}
</code></pre>

<p>So now, with the un-""corrected"" token: </p>

<pre><code>$token = ""MqsXexqpYRUNAHR_lHkPRic1g1BYhH6bFNVPagEkuaL8Mf80l_tOirhThQYIbfWYErgu4bDwl-7brVhXTWnJNQ2"";
$id = ""bob@company.com"";
$ssokey = ""7MpszrQpO95p7H"";
$idAndKey = $id . $ssokey;
$salt = dumb_base64url_decode($token);
$hashed = hash_pbkdf2(""sha1"", $idAndKey, $salt, 1000, 24, true);
$data = dumb_base64url_encode($hashed);
echo $data; // output: aE1k9-djZ66WbUATqdHbWyJzskMI5ABS0
</code></pre>

<p>And don't sweat whose answer to mark correct, I think @Evk's got the most important bits sorted.</p>
","75","<c#><php><pbkdf2>","1","2","2","2018-04-03 23:17:10","49638360","2","","","","","2018-04-03 17:39:39",""
"49636129","C# SSO hashing migrated to PHP","<p>I'm working on an SSO implementation in PHP that authenticates to a system written in C#. Here's some pseudo code to demonstrate:</p>

<pre><code>$token = ""MqsXexqpYRUNAHR_lHkPRic1g1BYhH6bFNVPagEkuaL8Mf80l_tOirhThQYIbfWYErgu4bDwl-7brVhXTWnJNQ2"";
$id = ""bob@company.com"";
$ssokey = ""7MpszrQpO95p7H"";
$idAndKey = $id . $ssokey;
$salt = base64_decode(substr($token, 0, -1));
$hashed = hash_pbkdf2(""sha256"", $idAndKey, mb_convert_encoding($salt, 'UTF-16LE'), 1000, 24, false);
$data = base64_encode($hashed);
</code></pre>

<p>This outputs: <code>NWZiMTBhZmNhNTlmYzMxMTEzMThhZmVl</code></p>

<p>Here's the C# version from the system with which I'm integrating:</p>

<pre><code>var token = ""MqsXexqpYRUNAHR_lHkPRic1g1BYhH6bFNVPagEkuaL8Mf80l_tOirhThQYIbfWYErgu4bDwl-7brVhXTWnJNQ2"";
var id = ""bob@company.com"";
var ssokey = ""7MpszrQpO95p7H"";
string idAndKey = id + ssokey;
var salt = HttpServerUtility.UrlTokenDecode(token);
var pbkdf2 = new Rfc2898DeriveBytes(idAndKey, salt) {IterationCount = 1000};
var key = HttpServerUtility.UrlTokenEncode(pbkdf2.GetBytes(24)); 
Console.WriteLine(key.ToString());
</code></pre>

<p>This outputs: <code>aE1k9-djZ66WbUATqdHbWyJzskMI5ABS0</code></p>

<p>I cannot figure out how to get my PHP code to do the same thing. I have a feeling it is in the <code>salt</code> generation.</p>

<p>I've tried to translate the C# <code>HttpServerUtility.UrlTokenDecode</code> function to PHP like so:</p>

<pre><code>function UrlTokenDecode($token) {
    $numPadChars = substr($token, -1);

    // add the padded count to the end
    $salt = substr($token, 0, -1) . $numPadChars;

    // Transform the ""-"" to ""+"", and ""*"" to ""/""
    $salt = str_replace('-', '+', str_replace('*', '/', $salt));

    // base64_decode
    $salt = base64_decode($salt);

    return $salt;
}
</code></pre>

<p>That didn't get me to where I needed to go. Halp!</p>

<p>This is for Absorb LMS. Documentation of their methods are here: <a href=""https://support.absorblms.com/hc/en-us/articles/222446647-Incoming-Absorb-Single-Sign-On#Methods"" rel=""nofollow noreferrer"">https://support.absorblms.com/hc/en-us/articles/222446647-Incoming-Absorb-Single-Sign-On#Methods</a></p>

<p>Thanks!</p>
","<p>I don't know php at all, but still can help I think. First, as stated in my comment, <code>Rfc2898DeriveBytes</code> in C# uses SHA1 as hash function, not SHA256, doesn't matter what your documentation says.</p>

<p>Next, <code>UrlTokenDecode</code> (and <code>Encode</code>) is quite strange thing I rarely seen in practice. It converts regular base64 to ""url safe"" version as follows:</p>

<ul>
<li>replaces '+' with '-'</li>
<li>replaces '/' with '_'</li>
<li>removes padding ('==' at the end) and appends length of removed padding <strong>as a number</strong> as last character (if there were no padding - it still appends ""0""). This step doesn't make any sense to me, but it's how it works.</li>
</ul>

<p>So to replicate you need to <code>base64_encode</code>, replace, remove padding, and then add padding length as character. So if your base64 string ended with <code>==</code> - you remove that and add ""2"" at the end. If there was no padding - you add ""0"".</p>

<p>So to decode that string you need to make back replacement, then remove last character and add that much '=' to the end as indicated by that character.</p>

<p>So string</p>

<pre><code>MqsXexqpYRUNAHR_lHkPRic1g1BYhH6bFNVPagEkuaL8Mf80l_tOirhThQYIbfWYErgu4bDwl-7brVhXTWnJNQ2
</code></pre>

<p>In normal base64 is
  MqsXexqpYRUNAHR/lHkPRic1g1BYhH6bFNVPagEkuaL8Mf80l/tOirhThQYIbfWYErgu4bDwl+7brVhXTWnJNQ==</p>

<p>Then, I have no idea why you do that</p>

<pre><code>mb_convert_encoding($salt, 'UTF-16LE')
</code></pre>

<p>Just remove it (though as I don't know php - there might be some reason you are doing that, but I just cannot imagine which, so take care).</p>

<p>Then as other answer states - the last argument to hash_pbkdf2() should be true.</p>

<p>After making this changes your code will work (I used token already converted to normal base64 string):</p>

<pre><code>$token = ""MqsXexqpYRUNAHR/lHkPRic1g1BYhH6bFNVPagEkuaL8Mf80l/tOirhThQYIbfWYErgu4bDwl+7brVhXTWnJNQ=="";
$id = ""bob@company.com"";
$ssokey = ""7MpszrQpO95p7H"";
$idAndKey = $id . $ssokey;
$salt = base64_decode($token);
$hashed = hash_pbkdf2(""sha1"", $idAndKey, $salt, 1000, 24, true);
$data = base64_encode($hashed);
echo $data;
</code></pre>

<p>produces expected answer (in normal base64 - you need to ""url encode"" it to get exact match).</p>
","75","<c#><php><pbkdf2>","1","3","2","2018-04-03 23:17:10","49638360","2","","","","","2018-04-03 17:39:39",""
"57947448","PyCryptoDome generate OpenSSL PBKDF2 key for AES encryption","<p>I want to encrypt a file using PyCryptoDome AES-256-ECB mode, write key and password to file and then decrypt it using OpenSSL
Python password and key encryption looks like this:</p>

<pre><code>import random
import string
from pathlib import Path
import sys
from Crypto.Cipher import AES

from Crypto.Protocol.KDF import PBKDF2
from Crypto.Util.Padding import pad


secret = ""123""
random_aes_key_length = 32
aes_key_file_path = ""key.key""
encrypted_message_file_path = ""message.out""
dir_path = Path(__file__).resolve().parent
random_aes_password = """".join(
        random.SystemRandom().choice(string.hexdigits) for _ in range(random_aes_key_length))
aes_key = PBKDF2(random_aes_password, b'', dkLen=32)
aes_obj = AES.new(aes_key, AES.MODE_ECB)
encrypted_message = aes_obj.encrypt(pad(secret.encode(), AES.block_size))

with open(dir_path / aes_key_file_path, 'w', encoding=""utf-8"") as aes_key_file:
    aes_key_file.write(random_aes_password)

with open(dir_path / encrypted_message_file_path, 'wb') as encrypted_message_file:
    encrypted_message_file.write(encrypted_message)
</code></pre>

<p>then I want to decode <code>encrypted_message_file</code> using OpenSSL:</p>

<p><code>openssl enc -aes-256-ecb -d -pbkdf2 -in message.out -pass file:key.key -nosalt -nopad</code></p>

<p>but I don't get my secret, just some random data:
<code>{���""R,�b�&lt;�-�</code></p>

<ol>
<li>How can I encrypt data string using python in compatible way for OpenSSL to decrypt given my random generated encryption password?</li>
<li>Particulary, is my method of generating PBKDF2 key in python
same/compatible with OpenSSL method?</li>
</ol>
","","75","<python><openssl><aes><pycrypto><pbkdf2>","1","","0","2019-09-15 19:22:29","","7","","2560816","","2019-09-15 19:22:29","2019-09-15 19:14:40",""
"55297214","Password recovery and password derived key encryption","<p>Hi (sorry about the wordy post)</p>

<p>I'm working on a web app that will store some of the users personal data.
I have looked into various ways of encrypting the data to protect it from intruders if the database or web server was compromised and think that creating and storing a unique “master key” encrypted with a password derived key for each user is the best way to go for my set-up.</p>

<p>The only issue I can see is with forgotten passwords. Currently, the users can reset a forgotten password by receiving an email containing a link with a unique token that takes then to the password reset form.</p>

<p>My idea is to add security questions to the registration page that will be used to create a 2nd derived key and use it to encrypt the users master key. The answers will not be stored in the database, just the key derived from them. The questions would be more opinion based than personal or factual.
This will mean there are two encrypted versions of the “master key”.</p>

<p>These questions would be added to the existing password reset form and the answers used to recreate the derived key and decrypt the master key. This would mean that the original master key can then be encrypted using the new password.</p>

<p>I have read many posts on how security questions should not be used to reset passwords but in this case it seems like an additional layer of security.</p>

<p>Does anyone see any potential problems with this approach or have any other suggestions?</p>

<p>Thanks</p>
","<p>It is not clear who you are trying to protect the data from (your organisation or potential intruders), but I would presume that intruders is your main concern, since your organisation has access to the code of the application and therefore can view the passwords that the user is inputting (unless encryption/decryption takes place on the client side).</p>

<p>I would not encrypt the data using the passwords of the users. Instead, I would generate random key(s) for each user, store them on a separate server, and retrieve them once the user authenticates successfully. That separate server would have to be inaccessible from the outside world.</p>

<p>Note that user authentication should also take place on the second server as well. Do not return the keys without prior user authentication, in case the first server gets compromised. You can additionally encrypt these keys using the user passwords and on a different column, using a master key that you are holding in case someone forgets their passwords.</p>

<p>This way you will get stronger passwords as well, than what the average user is going to use.</p>
","75","<security><encryption><web-applications><pbkdf2><password-recovery>","1","0","1","2019-03-22 10:41:37","","7","","1058232","","2019-03-22 10:41:37","2019-03-22 10:05:53",""
"42117632","How to limit key length with Passlib 1.7+","<p>A server protocol requires me to derive a password hash with a limited key size. This is the given JavaScript + CryptoJS implementation:</p>

<pre><code>var params = {keySize: size/32, hasher: CryptoJS.algo.SHA512, iterations: 5000}
var output = CryptoJS.PBKDF2(password, salt, params).toString();
</code></pre>

<p>I want to re-implement this in Python using Passlib, i.e. something like</p>

<pre><code>from passlib.hash import pkbdf2_sha512
output = pbkdf2_sha512.hash(password, salt=salt, rounds=5000)
</code></pre>

<p>The Passlib API does not allow me to specify the key size. How to do it though?</p>
","<p>If the derived key it to long just truncate it to the required length. Each byte is just as valid as every other byte, it makes no difference which bytes you use, there is no ordering.</p>
","74","<python><cryptojs><pbkdf2><passlib>","1","0","1","2017-02-08 17:42:28","42120070","0","1","","","","2017-02-08 15:48:07",""
"40685684","What is reason of time difference in same hashing algorithms?","<p>i have read this article in Codeproject:</p>

<p><strong>Salted-Password-Hashing-Doing-it-Right.</strong></p>

<p>and i understand that the best hash algorithm for asp.net webforms is <strong>PBKDF2-HMAC-SHA512</strong>. and then this github implementation:</p>

<p><strong><a href=""https://github.com/defuse/password-hashing"" rel=""nofollow noreferrer"">My implementations of PBKDF2 in PHP, C#, Java, and Ruby.</a></strong></p>

<p>it's based on <strong>PBKDF2-HMAC-SHA1</strong>.</p>

<p>i googled to find something that help me to make a hash based on <strong>PBKDF2-HMAC-SHA512</strong>.</p>

<p>and i've found this library on github:</p>

<p><strong><a href=""https://github.com/therealmagicmike/PBKDF2.NET"" rel=""nofollow noreferrer"">therealmagicmike/PBKDF2.NET</a></strong>.</p>

<p>in this library i can define my hash algorithm like <strong>HMACSHA1</strong>, <strong>HMACSHA256</strong>, <strong>HMACSHA384</strong> or <strong>HMACSHA512</strong>.</p>

<p>and as you know <strong>HMACSHA1</strong> is faster than <strong>HMACSHA512</strong>. and it's not good in security reasons.</p>

<p>But i've found something that i don't know it's true or not! i've implemented both algorithms in same page and understand that adriancs's algorithm takes longer time than the mike's. and it's not logical as for adriancs's article.</p>

<p>So, i want to know which algorithm is slowest and also which is better?</p>

<p>any help will be appreciated.</p>

<p>Thanks a lot.</p>
","<p>Sorry to find this so late. I'm the author of PBKDF2.NET. The speed difference is due to the equality comparison. The library by Defuse implements a slow-compare function, where I chose to leave any custom comparisons up to the consumer. My reasoning is that I didn't want to create a library with additional non-essential utility functions but rather to provide a proper implementation of the algorithm. Whether or not a particular application requires a slow compare really depends on the application so I excluded this.</p>
","70","<hash><hmac><password-encryption><pbkdf2>","0","0","1","2019-05-05 23:30:35","55911702","8","","","user6311045","2019-05-05 23:30:35","2016-11-18 20:46:56",""
"57109861","Generate PBKDF sha512 hash in Node verifiable by passlib.hash.pbkdf2_sha512","<p>I am using <code>passlib</code> <code>pbkdf2_sha512</code> on my python api to verify a users password. The input string that the algorithm needs has to follow this format as far as I am aware: <code>$pbkdf2-digest$rounds$salt$checksum</code></p>

<p>Is there a library in Node that can generate me a sha512 password and return it in such format or would I need to write my own algorithm to format it in such way and pick random salts, rounds etc.</p>

<p>More information about the <a href=""https://passlib.readthedocs.io/en/1.6.5/lib/passlib.hash.pbkdf2_digest.html"" rel=""nofollow noreferrer"">python library</a>.</p>

<p>I tried to reproduce the String generated by the python library in Node:</p>

<pre><code>function sha512(password) {
  const salt = crypto.randomBytes(16);

  const rounds = 29000;

  // I used sha256 for testing purpose, it shouldn't matter for the sake of the result
  const passwordHashed = crypto.pbkdf2Sync(password, salt, rounds, 256, 
  'sha256').toString('Base64');

  console.log(passwordHashed);
}
</code></pre>

<p>I generated a hash for ""password"" and my code returns
Encoded in Base64:</p>

<pre><code>7uLTDHjAhQX0yIqXptXuhHIygNogaZRcDqa7ckc0XCj4FAAW29V6KzIzRuJKJoTqN9xjfGOyGZ21X0J1vemQLThcnIXgwt2E84VrW/ai+BdVaUPHiT8J0mutOM9j52l1fFLT7rl5Rmr8qiyGzBaWj6i0sRkrdba9IVDHr1HxGAoM8qEuCSHgKsBVVX65+1pf2DDEUsgGShzE31xiuwF8UpHwq5Cxhiq8ER5xQnKj/j3mG/AAoylPVu30Jd4aFNoRi2Lfhk+6nFwLS0R222R38Jio93qzVD0Nb8kjXqjoXIYxTY6ZOumlsXWR/NmhTQi31x6JggoO1Z1jSFnCVUUd2Q==
</code></pre>

<p>And when generated with the python library in adept base 64</p>

<pre><code>98jZicV16ODfEsEZeYPGHU3kbrUrvUEXOPimVSQDD44
</code></pre>

<p>Which is obviously a much smaller String. The library mentions that their encode is very basic except for some characters being swapped but this result doesn't seem to make quite sense to me. (I used the same salt size and the same rounds as in the exmample on the library website)</p>
","","70","<encryption><sha512><pbkdf2>","0","","0","2019-07-19 14:37:32","","7","","9525029","","2019-07-19 14:37:32","2019-07-19 09:48:53",""
"51118435","How to create a Password Generator with PBKDF2 and reappearing password when same password asked","<p>I really need help with this code. Would be really appreciated to get this running. Don't mind these comments, I made them in german.</p>

<p>I have to put in a password (like water), that will be encrypted into a password which I should set the length of. 
So after that I should type water again and the same password, it got encrypted to should appear the same again.</p>

<pre><code>    import java.io.UnsupportedEncodingException; 
    import javax.swing.JOptionPane;
    import com.sun.org.apache.xerces.internal.impl.dv.util.HexBin;
    import javax.crypto.SecretKey;
    import javax.crypto.SecretKeyFactory;
    import javax.crypto.spec.PBEKeySpec;
    import java.security.NoSuchAlgorithmException;
    import java.security.spec.InvalidKeySpecException;

    public class PasswortGen
    {
    static final int SOLL_LAENGE_EINGABE = ""laenge"".length();
    static final int POSITION_DOPPELPUNKT = 2;
    static final String Masterpasswort = JOptionPane.showInputDialog(""Geben Sie Ihr Masterpasswort ein"");
    static final String Versionsnummer = ""Geben Sie die Website, sowie die aktuelle Versionsnummer ein"";
    static final String Kennung = ""Geben Sie Ihre Kennung ein"";
    static final String laenge = JOptionPane.showInputDialog(""Geben Sie die gewünschte Laenge ein (16 - Empfohlen)"");



    public static void main(String[] args) throws UnsupportedEncodingException { /*
         * Die main1-Methode kombiniert alle Methoden zu Erstellung eines Passwords und leifert diesen als String, mit Hilfe der Konsole, aus.
         */



        String password = ""pass""; //Dem Datentyp String mit der Erkennung password wird der Wert ""pass"" zugewiesen

        String salt = ""1234"";//Dem Datentyp String mit der Erkennung salt wird der Wert ""1234"" zugewiesen

        int iterations = 10000;//Dem Datentyp Int mit der Erkennung iterations wird der Wert 10000 zugewiesen

        int keyLength = 16 ; //Dem Datentyp Int mit der Erkennung keyLength wird der Wert 16 zugewiesen, also das Passwort hat eine Lönge von 16

        char[] passwordChars = password.toCharArray(); //Dem Datentyp Char[] mit der Erkennung passwordChars weist die Charakters zu.

        byte[] saltBytes = salt.getBytes(); //Dem Datentyp byte mit der Erkennung saltBytes wird der Wert von saltBytes nachgefragt.



        byte[] hashedBytes = hashPassword(passwordChars, saltBytes, iterations, keyLength); // WEIS ICH NICHT

        String hashedString = HexBin.encodeHexString(hashedBytes); // WEIS ICH NICHT



        System.out.println(hashedString); //Die Konsole liefert den String ""hashedString"".
    }

/*
* Die main1-Methode kombiniert alle Methoden zu Erstellung eines Passwords und leifert diesen als String, mit Hilfe der Konsole, aus.
*/



            public static byte[] hashPassword( final char[] password, final byte[] salt, final int iterations, final int keyLength ) {



                try {

                    SecretKeyFactory skf = SecretKeyFactory.getInstance( ""PBKDF2WithHmacSHA512"" );

                    PBEKeySpec spec = new PBEKeySpec( password );

                    SecretKey key = skf.generateSecret( spec );

                    byte[] res = key.getEncoded( );

                    return res;

                } catch ( NoSuchAlgorithmException | InvalidKeySpecException e ) {

                    throw new RuntimeException( e );

                }

            }


    }
</code></pre>

<p>Thank you in advance!</p>
","","66","<java><hash><pbkdf2><password-hash><password-generator>","1","","0","2019-10-14 08:36:58","","0","","10477769","","2019-10-14 08:36:58","2018-06-30 20:57:24",""
"38891613","Cancel a password hashed with pbkdf2","<p>I am using a pbkdf2 algorithm to hash passwords.
A random salt is generated for evey password and number of iterations are set in 
order to make the computation last about 1 second.</p>

<p>I am also saving salt and hash in the sambe buffer:</p>

<pre><code>   -----------------------
   | SaltLen |     4     |
   -----------------------
   | Salt    | saltBytes |
   -----------------------
   | HashLen |     4     |
   -----------------------
   | Salt    | hashBytes |
   - ---------------------
</code></pre>

<p>My issue is that this hashed password is not linked to one user (a user can have multiple password) and i need to have the possibity to cancel a password only using the password itself.
The only way i see is to hash the password to cancel with every salt in the database until in find the same hash wich will take forever (1 second per salt).</p>

<p>Is there any better way to do that ?</p>
","<p>It does not make sense to treat licenses like passwords. </p>

<p>PBKDF2 &amp; iterations only make sense for checks on client side. On server side they just allow to perform a DOS attack on your server. Anyway on a server you can simply add a delay of 1 second for each request.</p>

<p>You don't have to hash them because only licenses in your database are considered to be valid. It does not make any sense to hack your server and steal them. </p>

<p>For checking the right license entry you just have to prepend the database entry ID of the license to the license itself and you know exactly what entry to check.</p>
","65","<security><hash><pbkdf2>","0","0","1","2016-08-12 08:38:11","","5","","4063710","","2016-08-12 08:20:11","2016-08-11 08:51:57",""
"45901153","PBKDF2 is not returning plaintext and hashed expected value in C#","<p>I'm trying to use PBKDF2 in C# to create a password, then I'm trying to retrieve that password. </p>

<pre><code>var masterPwd = ""masterPassword"";
var service = ""www.google.com"";
byte[] salt = CreateSalt(16);
var encodedPwd = CreateMasterPassword(masterPwd, salt);
var decoded = CreateMasterPassword(encodedPwd, salt);
</code></pre>

<p>With the following functions defined:</p>

<pre><code>        public static byte[] CreateSalt(int size)
        {
            var salt = new byte[size];
            using (var random = new RNGCryptoServiceProvider())
            {
                random.GetNonZeroBytes(salt);
            }

            return salt;
        }

        public static string CreateMasterPassword(string password, byte[] salt)
        {

            string PassHash = Convert.ToBase64String(KeyDerivation.Pbkdf2(
            password: password,
            salt: salt,
            prf: KeyDerivationPrf.HMACSHA256,
            iterationCount: 10000,
            numBytesRequested: 256 / 8));
            return PassHash;
        }
</code></pre>

<p>In this case, shouldn't decoded be the same as masterPwd? </p>
","<p>I think you have a bit of a misunderstanding about what PBKDF2 does. It is not an encryption function where you can ever recover the plaintext data (let's put brute force aside as it is not an 'intended use'). Rather, it is a ""slow"" hashing mechanism, often described as ""one way"".</p>

<p>PBKDF2 is a key derivation function, but is also used for storing passwords. Here's a typical flow for PBKDF2 when used for password storage.</p>

<ol>
<li>A user creates an account with a website with a password. The site generates a random salt, then applies PBKD2 to the password with the salt, and stores the result and the salt. The salt is stored in plain text.</li>
<li>When the user needs to log in again, the site asks for the username and password. It looks up the salt for that user, then it re-applied PBKDF2 to the password the user entered.</li>
<li>It compares the <em>stored</em> hash with the hash of what the user entered. If the hashes are equal, the site knows they typed the password correctly.</li>
</ol>

<p>This approach means the site does not store the password in a way that it can possibly know. This allows the site to disavow knowledge of the password.</p>

<p>If that is what you want to do, then that is how you should use it.</p>

<p>If you do need a way to have a ""two way"" algorithm, then this goes from hashing to encryption. A symmetric algorithm would be used in this place, with all of the troublesome issues of key and IV management. You would most likely want to take a look at a high abstraction that is built on top of symmetric ciphers like libsodium.</p>

<p>libsodium is a nice abstraction built on top of primitives that takes the guess work out of how to use them. If offers simple APIs such as ""encrypt this thing with this password"" and it correctly derives an encryption key from the password, performs some form of authentication on the encryption, and is regarded well by information security experts.</p>
","64","<c#><pbkdf2>","1","1","1","2017-08-27 02:46:26","45901201","0","","","","","2017-08-27 02:13:15",""
"39075385","How to store data with key stretching in mysql database","<p>I need to store data in mysql database using aes_encrypt() function.</p>

<p>The key in the case of above mentioned function is padded with zero when its length is less than 16 bytes.</p>

<p>My question is:
How can I perform a key stretching with something like PBKDF2 in mysql to enhance the strength of weak keys.</p>

<p>Also I would like to know that if I use a hex value directly from a function like <code>SHA2('Key', 512)</code> as my key for the aes_encrypt() function, will it reduce the strength of the key because there will only be 16 characters in the character set every time a key is generated.</p>
","","63","<mysql><sql><encryption><aes><pbkdf2>","0","","0","2016-08-22 18:42:37","","2","","1816580","","2016-08-22 18:42:37","2016-08-22 09:06:31",""
"58078120","How do i generate JWT from a secretKey which was generated using ""PBKDF2withHmacSHA256"" in android?","<p>So i am trying to generate <strong>JWT</strong> token from my key generated using <strong>PBKDF2</strong> and the code is like this in android:</p>

<pre><code>public SecretKey generateKey(String passphraseOrPin) throws NoSuchAlgorithmException, InvalidKeySpecException {

        final int iterations = 5000;

        // Generate a 256-bit key
        final int outputKeyLength = 256;
        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(""PBKDF2withHmacSHA256"");
        KeySpec keySpec = new PBEKeySpec(getSha256Hash(passphraseOrPin).toCharArray(), salt.getBytes(), iterations, outputKeyLength);
        SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);

        return secretKey;
    }
</code></pre>

<p>But whenever i am trying to generate the token:</p>

<pre><code>String jwtString = Jwts.builder().setSubject(""sub"").signWith(key, SignatureAlgorithm.HS256).compact();
</code></pre>

<p>i am getting the error:</p>

<pre><code>Process: com.android.gocontract, PID: 7434
    java.lang.IllegalStateException: Fatal Exception thrown on Scheduler.
        at io.reactivex.android.schedulers.HandlerScheduler$ScheduledRunnable.run(HandlerScheduler.java:111)
        at android.os.Handler.handleCallback(Handler.java:873)
        at android.os.Handler.dispatchMessage(Handler.java:99)
        at android.os.Looper.loop(Looper.java:193)
        at android.app.ActivityThread.main(ActivityThread.java:6669)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)
     Caused by: io.jsonwebtoken.security.InvalidKeyException: The signing key's algorithm 'PBKDF2WithHmacSHA256' does not equal a valid HmacSHA* algorithm name and cannot be used with HS256.
        at io.jsonwebtoken.SignatureAlgorithm.assertValid(SignatureAlgorithm.java:358)
        at io.jsonwebtoken.SignatureAlgorithm.assertValidSigningKey(SignatureAlgorithm.java:302)
        at io.jsonwebtoken.impl.DefaultJwtBuilder.signWith(DefaultJwtBuilder.java:123)
        at com.android.gocontract.Activity.LoginActivity$2.onNext(LoginActivity.java:192)
        at com.android.gocontract.Activity.LoginActivity$2.onNext(LoginActivity.java:163)
        at io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.onNext(ObservableSubscribeOn.java:58)
        at io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.drainNormal(ObservableObserveOn.java:200)
        at io.reactivex.internal.operators.observable.ObservableObserveOn$ObserveOnObserver.run(ObservableObserveOn.java:252)
        at io.reactivex.android.schedulers.HandlerScheduler$ScheduledRunnable.run(HandlerScheduler.java:109)
        at android.os.Handler.handleCallback(Handler.java:873) 
        at android.os.Handler.dispatchMessage(Handler.java:99) 
        at android.os.Looper.loop(Looper.java:193) 
        at android.app.ActivityThread.main(ActivityThread.java:6669) 
        at java.lang.reflect.Method.invoke(Native Method) 
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493) 
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858) 
2019-09-23 18:38:37.036 7434-7434/com.android.gocontract I/Process: Sending signal. PID: 7434 SIG: 9
</code></pre>

<p>the method to generate Sha256:</p>

<pre><code>public String getSha256Hash(String password) {
        try {
            MessageDigest digest = null;
            try {
                digest = MessageDigest.getInstance(""SHA-256"");
            } catch (NoSuchAlgorithmException e1) {
                e1.printStackTrace();
            }
            digest.reset();
            return bin2hex(digest.digest(password.getBytes()));
        } catch (Exception ignored) {
            return null;
        }
    }
</code></pre>

<p>version of <strong>jjwt</strong>:</p>

<pre><code> api 'io.jsonwebtoken:jjwt-api:0.10.7'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.10.7'
    runtimeOnly('io.jsonwebtoken:jjwt-orgjson:0.10.7') {
        exclude group: 'org.json', module: 'json' //provided by Android natively
    }
</code></pre>
","<p><strong>The solution:</strong> use another encryption algorithm, or use the lib <a href=""https://github.com/rtyley/spongycastle"" rel=""nofollow noreferrer"">Spongy Castle</a>.</p>

<p>Useful lib: <a href=""https://github.com/skynet67/Nimbus-JOSE-JWT-Spongycastle"" rel=""nofollow noreferrer"">Nimbus JOSE JWT Spongycastle</a>, if you need help mixing jwt with spongy castle.</p>

<p><strong>Why it's not working for you:</strong> it is a particularity of the device you're using. Some devices support the PBKDF2withHmacSHA256 algorithm, while others don't.</p>

<p><strong>How I came to this conclusion:</strong>
First I thought it could be a simple typo, but I found in the <a href=""https://github.com/jwtk/jjwt/issues/381"" rel=""nofollow noreferrer"">JJWT</a> github that while the issue indeed existed, it was already fixed. Since the verification now uses equalsignorecase the typo wouldn't matter. You can confirm in the <a href=""https://github.com/jwtk/jjwt/blob/master/api/src/main/java/io/jsonwebtoken/SignatureAlgorithm.java"" rel=""nofollow noreferrer"">code</a>.</p>

<p>Then I thought it could be android or java version. But I discovered that <a href=""https://bugs.openjdk.java.net/browse/JDK-4638027"" rel=""nofollow noreferrer"">since java 8</a> release it was already implemented.</p>

<p>I thought it could be the android version, but it works from <a href=""https://developer.android.com/reference/javax/crypto/SecretKeyFactory"" rel=""nofollow noreferrer"">API 26</a>.</p>

<p>I've also tested the code you're using, and it worked just fine here, so it would not be any of these problems. Then I researched a lot, seen some <a href=""https://stackoverflow.com/questions/2256774/android-secretkeyfactory-problems-implementation-not-found"">other questions</a>, people having the same problem with <a href=""https://github.com/martinwithaar/Encryptor4j/issues/4"" rel=""nofollow noreferrer"">other libs</a> and other <a href=""https://github.com/scottyab/secure-preferences/issues/35"" rel=""nofollow noreferrer"">algorithms</a>.</p>

<p><strong>Extra:</strong>
There is a code from <a href=""https://stackoverflow.com/a/15303291/5791681"">k3v</a> that probably can help you (using Spongy Castle):</p>

<pre><code>PKCS5S2ParametersGenerator generator = new PKCS5S2ParametersGenerator(new SHA256Digest());
generator.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes(password), salt, iterations); 
KeyParameter key = (KeyParameter)generator.generateDerivedMacParameters(keySizeInBits);
</code></pre>
","61","<android><pbkdf2><jjwt>","1","1","1","2019-09-25 13:04:40","58098849","13","","2356808","","2019-09-25 07:41:26","2019-09-24 10:21:43",""
"20925640","How to determine whether a byte array contains hashed data","<p>Is it possible to determine whether a byte array contains data hashed with PBKDF2WithHmacSHA1? Is there a pattern that could help?</p>
","<p>Here below is how I solved the issue in Scala:</p>

<pre><code>class Password(value: String, salt: Option[String]) {

  private final val IterationCount = 2048
  private final val KeyLength = 256
  private final val SaltLength = KeyLength / 8

  ...

  def hash = {
    val zalt = if (salt.isDefined)
      salt.get.getBytes(DefaultCharset)
    else 
      SecureRandom.getInstance(""SHA1PRNG"").generateSeed(SaltLength)

    val secretKeyFactory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"")
    val secretKey = secretKeyFactory.generateSecret(
      new PBEKeySpec(value.toCharArray, zalt, IterationCount, KeyLength)
    )

    val byteBuffer = ByteBuffer.allocate(2 + KeyLength)
    byteBuffer.putShort(KeyLength)
    byteBuffer.put(secretKey.getEncoded)

    new Password(
      Base64.encodeBase64String(byteBuffer.array),
      Some(new String(zalt, DefaultCharset))
    )
  }

  def isHashed = Base64.decodeBase64(value).length &gt; KeyLength
}
</code></pre>

<p>The length of the key is prepended to the encoded hash... and to determine whether or not the current <code>Password</code> instance is hashed I just check the length of the whole buffer &ndash; the complete source code is available <a href=""https://github.com/gokillo/brix/blob/master/brix-corelib/src/main/scala/brix/security/Password.scala"" rel=""nofollow"">here</a>.</p>
","58","<encryption><hmacsha1><pbkdf2>","0","0","1","2014-01-04 22:11:03","20927373","3","","278659","","2014-01-04 20:54:47","2014-01-04 19:25:07",""
"48435443","Java to C# Conversion - base64 byte array pbkdf2EncryptionConfiguration","<p>Essentially moving data from a java based system to a C# one.</p>

<p>Code from the java side does the following to the password</p>

<p>---------- code -------</p>

<pre><code>ByteBuffer byteBuffer = ByteBuffer.allocate( 2 * 4 + saltBytes.length + secretKeyBytes.length);

byteBuffer.putInt(pbkdf2EncryptionConfiguration.getKeySize());
byteBuffer.putInt(pbkdf2EncryptionConfiguration.getRounds());
byteBuffer.put(saltBytes);
byteBuffer.put(secretKeyBytes);

return Base64.encode(byteBuffer.array());
</code></pre>

<p>---------- end code -------</p>

<p>In summary, a byte array that starts with a number, has another number, followed by the salt, followed by the secretKey</p>

<p>My issue is, java bytes are different than C# (signed/unsigned) and I essentially just want to extract the salt/secret key.</p>

<p>My process so far in C# is to </p>

<p>---------- code -------</p>

<pre><code>byte[] actualPasswordByteArray = Convert.FromBase64String(hash);

int abc = BitConverter.ToInt32(items, 0);
int def = BitConverter.ToInt32(items, 4);

byte[] salt = new byte[SaltByteSize];
byte[] key = new byte[HashByteSize];

using (var deriveBytes = new Rfc2898DeriveBytes(password, 8, 128000))
{
    salt = deriveBytes.Salt;
    key = deriveBytes.GetBytes(leftOverBytes);
}
</code></pre>

<p>---------- end code -------</p>

<p>But I'm not getting the right values</p>
","<ul>
<li><code>def</code> holds the number of rounds, but you hard-coded it to 128000.</li>
<li>You should be reading the salt from your stream and passing it as input to <code>Rfc2898DeriveBytes</code>, but you told the class to generate an 8 byte random salt.</li>
</ul>

<p>Since you're letting the salt get randomly generated, you now have code that takes ~100ms to produce a random answer which could have been produced in ~10ns.</p>

<p>Every value in the byte stream you're (mostly-not-)reading is important.  If you find that you've hard-coded any values you've done something wrong.</p>
","58","<java><c#><arrays><byte><pbkdf2>","0","0","1","2018-01-25 15:42:48","","1","","","","","2018-01-25 03:59:34",""
"56995088","How do I replace the Python Build-in method, with a 3rd party installed module instead?","<p>I am optimizing my code and replaced the Python build-in hashlib.pbkdf2_hmac with the 40% faster <a href=""https://github.com/ctz/fastpbkdf2"" rel=""nofollow noreferrer"">Fast PBKDF2</a> implementation <a href=""https://github.com/Ayrx/python-fastpbkdf2"" rel=""nofollow noreferrer"">python-fastpbkdf2</a>.</p>

<p>However using cProfile the outcome seems the same. </p>

<p>I have (tried) to make sure I use the Fast PBKDF2 module instead of the build-in hashlib.pbkdf2_hmac module but I can't seem to find out why I don't see the 40% performance increase.</p>

<pre><code>from fastpbkdf2 import pbkdf2_hmac

phrase_words = ""clerk great coin mistake become""
passphrase = 'passphrase'

seed = pbkdf2_hmac('sha512', bytes(complete_phrase_words, encoding='utf-8'), bytes('mnemonic' + passphrase, encoding='utf-8'), 2048)

</code></pre>

<p>How do I make sure I do not use the build in method?</p>

<p>cProfile report: </p>

<pre><code>186811385 function calls (186811349 primitive calls) in 885.041 seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
   109344  710.505    0.006  710.505    0.006 {built-in method _fastpbkdf2.fastpbkdf2_hmac_sha512}
 57919431   54.060    0.000   54.060    0.000 {built-in method builtins.format}
 57918564   45.288    0.000  116.547    0.000 crypto_awesomer_fast_pbkdf2_test.py:75(&lt;genexpr&gt;)
  3619696   20.854    0.000  137.401    0.000 {method 'join' of 'str' objects}
 57919431   20.604    0.000   20.604    0.000 {method 'zfill' of 'str' objects}
  1755108   14.666    0.000  877.752    0.001 crypto_awesomer_fast_pbkdf2_test.py:66(validate)
  1755108    4.119    0.000    4.119    0.000 {method 'to_bytes' of 'int' objects}
  1755108    3.949    0.000    3.949    0.000 {method 'digest' of '_hashlib.HASH' objects}
        1    3.825    3.825  884.982  884.982 crypto_awesomer_fast_pbkdf2_test.py:33(nested_loops)
  1755109    2.859    0.000    2.859    0.000 {built-in method _hashlib.openssl_sha256}
   109344    1.937    0.000  714.213    0.007 crypto_awesomer_fast_pbkdf2_test.py:89(generate_seed)
   109344    1.315    0.000  712.156    0.007 __init__.py:18(pbkdf2_hmac)


</code></pre>
","<p>You did use the Fast PBKDF2 module, as the <code>cProfile</code> output shows.</p>

<p>I'm guessing whatever performance measurements made by <code>python-fastpbkdf2</code> were comparing against older versions of Python, OpenSSL, or both, and newer versions caught up on speed (while Fast PBKDF2 hasn't seen an update in over three years). As it happens, it looks like as of 2016 (a year after Fast PBKDF2 saw its last update), <a href=""https://github.com/python/cpython/commit/598894ff48e9c1171cb2ec1c798235826a75c7e0"" rel=""nofollow noreferrer"">Python added a fast path when linked against OpenSSL 1.1.0 or higher that uses OpenSSL's optimized <code>PKCS5_PBKDF2_HMAC</code></a> rather than Python's homegrown (slower) version. And even before that, <a href=""https://github.com/python/cpython/commit/e723622775172a2516f43721d998aae95f32e59d"" rel=""nofollow noreferrer"">Python had improved their homegrown version back in late 2013</a>; if the <code>python-fastpbkdf2</code> benchmarks were run before that improvement was released, the performance would have been much worse.</p>

<p>Basically, don't assume claims of being 40% faster are true, even if they were true in the past (and there's no guarantee they were true in the past either).</p>

<p>It's also possible compilers and/or your package repo maintainers built better versions of OpenSSL; at least one of the claimed benefits of Fast PBKDF2 is that he explicitly inlined a number of operations, but a properly compiled version of OpenSSL using PGO+LTO would be able to automatically inline the appropriate operations anyway (and if the setup files for <code>python-fastpbkdf2</code> didn't properly build it with PGO+LTO, it could lose out as a result). Between that and OpenSSL making similar code improvements, the gap could easily have narrowed.</p>
","55","<python><pbkdf2>","0","2","1","2019-07-11 19:45:44","","2","","11539451","","2019-07-11 19:45:44","2019-07-11 18:08:17",""
"57646301","Decrypt chrome cookies from sqlite db on mac os","<p>I use sqlite db <code>Cookies</code> from profile folder. It has <code>encrypted_value</code> field. There are a lot of examples and descriptions how it's encrypted on each platform.
So on Linux I use the following:</p>

<pre><code>linuxPwd = 'peanuts';
var derivedKey = crypto.pbkdf2Sync(linuxPwd, 'saltysalt', 1, 16, 'sha1');
var decrypted = decrypt(derivedKey, encryptedValue);
</code></pre>

<p>And <code>decrypt</code> function:</p>

<pre><code>function decrypt(key, encryptedData) {

var decipher, decoded, final, padding, iv = new Buffer.from(new Array(16 + 1).join(' '), 'binary');

decipher = crypto.createDecipheriv('aes-128-cbc', key, iv);

// Remove 'v10' from start
encryptedData = encryptedData.slice(3);
decoded = decipher.update(encryptedData);

final = decipher.final();
final.copy(decoded, decoded.length - 1);
padding = decoded[decoded.length - 1];
if (padding) decoded = decoded.slice(0, decoded.length - padding);

return decoded.toString('utf8');

}
</code></pre>

<p>So on linux password is <code>peanuts</code> (in case when no keychain is used) and number of iterations is <code>1</code>. Everything should be the same for MacOS, except number of iterations is <code>1003</code> and password is taken from keychain.</p>

<p>I manually got password from keychain for <code>Chrome Safe Storage</code> item and increased number of iterations:</p>

<pre><code>macPwd = 'ELrTZt24OdPhg93BjAIJhA==';
var derivedKey = crypto.pbkdf2Sync(macPwd, 'saltysalt', 1003, 16, 'sha1');
</code></pre>

<p>It works okay on linux, decoded data is correct, but on mac I receive broken bytes. What could be wrong? Maybe I can find what argument is wrong if I know encoded string?</p>
","<p>For those, who also will fall into this error. I downloaded and build chromium manually and debugged process of encryption. In some cases, when keychain is not available, the password for encryption&amp;decryption is <code>mock_password</code>.</p>
","52","<macos><sqlite><google-chrome><encryption><pbkdf2>","0","0","1","2019-08-26 09:41:38","","0","","","","","2019-08-25 13:09:40",""
"56704959","PBKDF2WithHmacSHA512 SecretKeyFactory not available error","<p>I am trying to use the <strong>Security API</strong> in <strong>Java EE 8</strong>, hashing the password. I created a <strong>@DatabaseIdentityStoreDefinition</strong></p>

<pre><code>@BasicAuthenticationMechanismDefinition(
    realmName = ""Book Realm""
)
@DatabaseIdentityStoreDefinition(
    dataSourceLookup = ""jdbc/userAuth"",
    callerQuery = ""select password from users where USERNAME = ?"",
    groupsQuery = ""select g.GROUP_NAME from USER_GROUPS ug, users u, GROUPS g where ug.USER_ID = u.user_id and g.GROUP_ID= ug.GROUP_ID and u.USERNAME=?""
    hashAlgorithm = Pbkdf2PasswordHash.class,
    hashAlgorithmParameters = {
            ""Pbkdf2PasswordHash.Iterations=3072"",
            ""Pbkdf2PasswordHash.Algorithm=PBKDF2WithHmacSHA512"",
            ""Pbkdf2PasswordHash.SaltSizeBytes=64""
    }
)
@DeclareRoles({""user"", ""admin""})
@WebServlet(""/securedServlet"")
@ServletSecurity(
    @HttpConstraint(rolesAllowed = {""admin""}))
public class SecuredServlet extends HttpServlet {

@Override
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    response.getWriter().write(""Congratulations, login successful."");
    }
}
</code></pre>

<p>when I deploy the war file to the Glassfish 5 application server I get the following exception:</p>

<pre><code>java.lang.IllegalStateException: java.security.NoSuchAlgorithmException: PBKDF2WithHmacSHA512 SecretKeyFactory not available
</code></pre>

<p>This exception comes from the class that I have created to automaticly create and insert the user in to the database.</p>

<p>The relevant parts of this class:</p>

<pre><code>@Resource(mappedName = ""jdbc/userAuth"")
private DataSource dataSource;

@Inject
private Pbkdf2PasswordHash passwordHash;

public void init(@Observes @Initialized(ApplicationScoped.class) Object init) {
        Map&lt;String, String&gt; parameters = new HashMap&lt;&gt;();
        parameters.put(""Pbkdf2PasswordHash.Iterations"", ""3072"");
        parameters.put(""Pbkdf2PasswordHash.Algorithm"", ""PBKDF2WithHmacSHA512"");
        parameters.put(""Pbkdf2PasswordHash.SaltSizeBytes"", ""64"");
        passwordHash.initialize(parameters);
        executeUpdate(dataSource, ""INSERT INTO USERS (USER_ID,USERNAME,FIRST_NAME,MIDDLE_NAME,LAST_NAME,PASSWORD) VALUES (1,'beaver','Beaver','The Dam','Lake','"" + passwordHash.generate(""beaverattack"".toCharArray()) + ""')"");
</code></pre>

<p>In the pom.xml I have the following dependencies:</p>

<pre><code>&lt;dependency&gt;
  &lt;groupId&gt;javax&lt;/groupId&gt;
  &lt;artifactId&gt;javaee-web-api&lt;/artifactId&gt;
  &lt;version&gt;8.0&lt;/version&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;javax.security.enterprise&lt;/groupId&gt;
  &lt;artifactId&gt;javax.security.enterprise-api&lt;/artifactId&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>

<p>Java version: </p>

<pre><code>java version ""1.8.0_211""
Java(TM) SE Runtime Environment (build 1.8.0_211-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)
</code></pre>
","","51","<java><hash><passwords><sha512><pbkdf2>","0","","0","2019-06-21 15:09:35","","6","","6535399","","2019-06-21 15:09:35","2019-06-21 14:01:57",""
"48436093","can PKCS5_PBKDF2_HMAC hashing function cause an issue with special symbols like < or >?","<p>The PKCS5_PBKDF2_HMAC hashing function seems to fail when special symbols like &lt; or > are used. It fails to give the the correct hash when such characters are used. Is it like the function is designed not to work with special characters?</p>
","<blockquote>
  <p>Is it like the function is designed not to work with special characters?</p>
</blockquote>

<p>No.  PBKDF2 is a wrapper around HMAC, which is a wrapper around XOR and a hashing algorithm.  PBKDF2 and its dependencies are nothing but routine math, and operate, more or less, at the binary level.  You can feed any hexadecimal values you want, and it will function correctly.</p>

<p>Now, your code may be doing something strange in the conversions prior to calling PBKDF2, or whatever software and middleware and front end you are using may have issues.</p>

<p>To test:</p>

<ul>
<li>Print out the hexadecimal coded binary conversion of what you're trying to hash as well as the salt.  Examine this.</li>
<li>If angle brackets in particular are an issue, do you have XML and/or HTML involved anywhere in the path between the human entering the data and your PBKDF2 function</li>
<li>I have <a href=""https://github.com/Anti-weakpasswords?tab=repositories"" rel=""nofollow noreferrer"">several independent PBKDF2 implementations at my Github repository</a>, and in particular I've just finished upgrading the <a href=""https://github.com/Anti-weakpasswords/PBKDF2-GCC-OpenSSL-library"" rel=""nofollow noreferrer"">OpenSSL library</a> version to support multiple input and output encodings.

<ul>
<li>Test that hexadecimal coded hash and hexadecimal coded salt against several of these implementations.</li>
<li>Test the test vectors in the above repositories against your code, beginning to end.</li>
<li>Test the test vectors in the above repositories against as close to the bare-metal PBKDF2 implementation you have as possible, skipping all the other code to the extent you can.</li>
</ul></li>
</ul>
","48","<pbkdf2>","0","0","1","2018-01-30 04:04:51","48513718","1","","","","","2018-01-25 05:15:55",""
"45048872","In PBKDF2 is INT (i) signed?","<p>Page 11 of RFC 2898 states that for U_1 = PRF (P, S || INT (i)), INT (i) is a four-octet encoding of the integer i, most significant octet first.</p>

<p>Does that mean that i is a signed value and if so what happens on overflow?</p>
","<p>Nothing says that it would be signed.  The fact that <code>dkLen</code> is capped at <code>(2^32 - 1) * hLen</code> suggests that it's an unsigned integer, and that it cannot roll over from <code>0xFFFFFFFF</code> (2^32 - 1) to <code>0x00000000</code>.</p>

<p>Of course, PBKDF2(MD5) wouldn't hit 2^31 until you've asked for 34,359,738,368 bytes.  That's an awful lot of bytes.</p>

<ul>
<li>SHA-1: 42,949,672,960</li>
<li>SHA-2-256 / SHA-3-256: 68,719,476,736</li>
<li>SHA-2-384 / SHA-3-384: 103,079,215,104</li>
<li>SHA-2-512 / SHA-3-512: 137,438,953,472</li>
</ul>

<p>Since the .NET implementation (in Rfc2898DeriveBytes) is an iterative stream it could be polled for 32GB via a (long) series of calls.  Most platforms expose PBKDF2 as a one-shot, so you'd need to give them a memory range of 32GB (or more) to identify if they had an error that far out.  So even if most platforms get the sign bit wrong... it doesn't really matter.</p>

<p>PBKDF2 is a KDF (key derivation function), so used for deriving keys.  AES-256 is 32 bytes, or 48 if you use the same PBKDF2 to generate an IV (which you really shouldn't).  Generating a private key for the ECC curve with a <a href=""http://primes.utm.edu/top20/page.php?id=27"" rel=""nofollow noreferrer"">34,093 digit prime</a> is (if I did my math right) 14,157 bytes.  Well below the 32GB mark.</p>
","48","<security><sha><hmac><integer-overflow><pbkdf2>","0","1","2","2017-07-12 15:36:15","","0","","","","","2017-07-12 05:09:40",""
"45048872","In PBKDF2 is INT (i) signed?","<p>Page 11 of RFC 2898 states that for U_1 = PRF (P, S || INT (i)), INT (i) is a four-octet encoding of the integer i, most significant octet first.</p>

<p>Does that mean that i is a signed value and if so what happens on overflow?</p>
","<p><code>i</code> ranges from 1 to <code>l = CEIL (dkLen / hLen)</code>, and <code>dkLen</code> and <code>hLen</code> are positive integers. Therefore, <code>i</code> is strictly positive.</p>

<p>You can, however, store <code>i</code> in a signed, 32-bit integer type without any special handling. If <code>i</code> rolls over (increments from <code>0x7FFFFFFF</code> to <code>0xF0000000</code>), it will continue to be encoded correctly, and continue to increment correctly. With two's complement encoding, bitwise results for addition, subtraction, and multiplication are the same as long as all values are treated as either signed or unsigned.</p>
","48","<security><sha><hmac><integer-overflow><pbkdf2>","0","0","2","2017-07-12 15:36:15","","0","","","","","2017-07-12 05:09:40",""
"54401537","How to get correct Hash Key using PBKDF2 using c#","<p>I am trying to explore Hashing Mechanism (PBKDF2 + static salt) using c# (Rfc2898DeriveBytes), I have  poc console app. but thing is like am not getting expected result instead of am getting binary result.
Here is my code:</p>

<pre><code>using System;
using System.Security.Cryptography;

class Program
{
    static void Main(string[] args)
    {
        string enrollmentID = ""1800483366"";
        string testID = ""bmat-practice-test-1"";
        string saltstring = ""CEOngDKm3ZvnZIJNOg+u3z+o"";
        const int IterationIndex = 1000;
        byte[] salt = Convert.FromBase64String(saltstring);
        byte[] actualByte = PBKDF2(string.Concat(testID, enrollmentID), salt, IterationIndex, salt.Length);
        string result = System.Text.Encoding.UTF8.GetString(actualByte);
        Console.WriteLine(result);
        Console.ReadKey();
    }

    private static byte[] PBKDF2(string concatenrollmenttestid, byte[] salt, int Pbkdf2Iterations, int HashByteSize)
    {
        Rfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes(concatenrollmenttestid, salt) { IterationCount = Pbkdf2Iterations };
        return pbkdf2.GetBytes(HashByteSize);
    }
}
</code></pre>

<p>Expected Result :</p>

<blockquote>
  <p>71b614a33830226eb359b2f1ddca8373c3e3</p>
</blockquote>

<p>Actual Result</p>

<blockquote>
  <p>�(kB٬����Ry�`[aJ�</p>
</blockquote>

<p>Can anyone help me on this? Thanks in advance.</p>
","","47","<c#><.net><hash><pbkdf2><rfc2898>","0","","0","2019-01-28 12:13:19","","7","","5639688","","2019-01-28 12:13:19","2019-01-28 11:58:59",""
"45377764","Is my authentication system secured?","<p>I want to implement an authentication system by following good practices, i want it as simple as possible and secured (im not going to implement some magic hashing function or something to feel a hero..) just wanting to use already known hash but not sure the right way of using it.
I read some articles on how Lastpass (a password management company) mange to handle their authentication and i loved their idea.So i wanted to implement my own authentication based on it.</p>

<p>Basically im creating an authentication key from the password on the client side (so the password is never sent as a plan text to the server).
that authentication key im sending to the server than do some hashing operations also in the server side and compare the result to the one inside the database.</p>

<p><strong><em>On my client side:</em></strong></p>

<pre><code>auth_key = PBKDF2(SHA256, password+username, last_login_fe_salt, fe_rounds)
</code></pre>

<p>explanation - hashing <strong>password+username+last_login_fe_salt</strong> text <strong>fe_rounds</strong> times</p>

<p><strong>last_login_fe_salt</strong> -> a random salt sent to the user once he/she input their username in text field - 
To be honest, not sure how this last_login_fe_salt is efficent for the cryptography against Dictionary attacks but atleast two people having the same password will send different hashes on their network.
any hacker can get this data by asking from the server, i can add server side limitations (req/s if it makes some difference etc.. let me know what you think) also adding captcha might be a good idea. When a user logged in successfuly the server generates a new random string and saves in into the database.</p>

<p>*I didnt see any explanation which salt Lastpass uses on their client side hashing, they are using PBKDF2 algorithm that needs a salt parameter.</p>

<p><strong>fe_rounds</strong> -> number of rounds given by the server when typing username -
 its fixed for everybody and configurable by the server, also in articles i read about Lastpass they dont explain from where they receive the client side number of rounds...</p>

<p>so now we send auth_key as is to the server...</p>

<p><strong><em>On my server side</em></strong></p>

<p>now we are creating a new hash to compare the one inside the db.
Why another hash? if i understand correctly we bind the hash for server side data, like a combination of a password (that only the user knows) and server data.</p>

<pre><code>db_auth=PBKDF2(SHA256, auth_key, user_be_salt, 100,000+user_configurable_rounds)
</code></pre>

<p><strong>user_be_salt</strong> -> a random number that saved in db known only to the server and the ones who obtain the database, this changes on every successful login.</p>

<p><strong>user_configurable_rounds</strong> -> number of iterations, every user can choose the amount of iterations (like in Lastpass) so attacker need also to guess the number or iterations?</p>

<p>I would be happy to hear what do you think about this authentication system, if its wrong than explain to me why and tell me what Lastpass do because i did not understand their entire authentication flow.</p>
","<p>Most of what you're doing is useless from a security perspective. Lastpass has unusual security requirements -- don't treat them as a source of best practices.</p>

<p>If the client is responsible for hashing, and all of the parameters to that hashing are fixed, <em>the hash effectively becomes the password</em>. An attacker doesn't need to know the original password; they can simply <a href=""https://en.wikipedia.org/wiki/Pass_the_hash"" rel=""nofollow noreferrer"">pass the hash</a> to the server.</p>

<p>Generally speaking, there is no way to verify a password over a network without either sending the password across the network (for traditional password authentication protocols), or having the server store the password in plaintext (for less commonly used protocols like <a href=""https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol"" rel=""nofollow noreferrer"">SRP</a>). Of the two, the former is preferable, as it's possible to secure the password in transit using protocols like SSL/TLS, whereas protocols like SRP <em>require</em> the plaintext of the password to operate.</p>

<p>Tweaking the PBKDF round count, either on the client or server side, is pointless. Set a fixed round count that makes the hash slow, but not so slow that it will place an undue load on the client or server. (100,000 rounds is probably excessive for a server-side hash. It takes roughly half a second to verify a password with those settings, so just two login requests per second would use 100% of one core on your server!)</p>
","46","<javascript><security><authentication><pbkdf2><lastpass>","0","0","1","2017-07-28 18:45:37","","3","","","","","2017-07-28 15:55:52",""
"56955995","Is Deriving a 128 bits AES Key with PBKDF2 using SHA-256 possible","<p>I'm developing an encryption protocol where I have to create an AES key in CTR mode. I decided to keep the key length 128 bits in length, as shorter key size would mean less computing power for mobile devices. </p>

<p>Now, to create this key, I use PBKDF2, which allows me to set its certain parameters like hashing function and iteration number, as it derives a key using an initial information, such as a password, which is what I have. As SHA-1 broken, I wanted to use SHA-256 for the key derivation function's key hashing but I don't understand if it is possible. As I want key to be 128 bits, and SHA-256 is producing 256 bits, does PBKDF2 capable of doing that?</p>
","<p>First of all the AES-256 is not so slow compared to AES-128. See from <a href=""https://crypto.stackexchange.com/a/23/18298"">Cryptography</a></p>

<blockquote>
  <p>CPU overhead (+20% for a 192-bit key, +40% for a 256-bit key: </p>
</blockquote>

<p>The PBKDF2's output size is equal to the used PRF function, in your case it is a hash function as SHA-256. Therefore the output will be in 256-bit size.</p>

<p>The PBKDF2's function requires a <code>dkLen</code> parameter - desired Key Lenght.</p>

<blockquote>
  <p>PBKDF2(PRF, Password, Salt, c, dkLen)</p>
</blockquote>

<p>When you put 128 into this parameter you will get a 128-bit. The output is the substring of the full 256-bit output. You will get first 128-bit.</p>

<p>You can see it from implementations as <a href=""https://github.com/mitsuhiko/python-pbkdf2/blob/master/pbkdf2.py"" rel=""nofollow noreferrer"">here</a></p>
","45","<encryption><aes><password-encryption><pbkdf2><webcrypto-api>","1","1","2","2019-07-09 16:53:49","56956821","0","","","","","2019-07-09 15:29:31",""
"56955995","Is Deriving a 128 bits AES Key with PBKDF2 using SHA-256 possible","<p>I'm developing an encryption protocol where I have to create an AES key in CTR mode. I decided to keep the key length 128 bits in length, as shorter key size would mean less computing power for mobile devices. </p>

<p>Now, to create this key, I use PBKDF2, which allows me to set its certain parameters like hashing function and iteration number, as it derives a key using an initial information, such as a password, which is what I have. As SHA-1 broken, I wanted to use SHA-256 for the key derivation function's key hashing but I don't understand if it is possible. As I want key to be 128 bits, and SHA-256 is producing 256 bits, does PBKDF2 capable of doing that?</p>
","<p>AES-256 is not much slower than AES-128, keysetup is slightly slower, and every block only needs 4 more rounds (11 to 15). So it's about 40% slower at most, and with modern phones having dedicated AES-instruction sets probably even less.</p>

<p>PBKDF2 can output almost any size key, and mostly HMAC-SHA1 or HMAC-SHA256 (not SHA1 or SHA256 directly, but most API's only accept a hash function as parameter and do the HMAC implicitly) is used as the building block ""random function"". But either one can produce 256, 128 or 10000 byte keys (not that you need that large a key anyway). With HMAC-SHA256 it's equally cheap or expensive to derive a 256 or 128 bit key (the latter is a truncated version of the former, but that's no issue); it's the same work. With HMAC-SHA1 (which is as secure as HMAC-SHA256 for PBKDF2) it's a bit more the work to get a 256 bit key, as 256 is more than the digest size. </p>

<p>So use AES-256 and PBKDF2-(HMAC)-SHA256, should be no performance issue.</p>
","45","<encryption><aes><password-encryption><pbkdf2><webcrypto-api>","1","2","2","2019-07-09 16:53:49","56956821","0","","","","","2019-07-09 15:29:31",""
"57786213","How to generate JSON Web Token for Android from PBKDF2?","<p>I can generate the <code>SecretKey</code> for <code>PBEKeySpec</code> in my code which looks like this:</p>

<pre><code>public SecretKey generateKey(char[] passphraseOrPin) throws NoSuchAlgorithmException, InvalidKeySpecException {
        // Number of PBKDF2 hardening rounds to use. Larger values increase
        // computation time. You should select a value that causes computation
        // to take &gt;100ms.
        final int iterations = 5000;

        // Generate a 256-bit key
        final int outputKeyLength = 256;
        SecureRandom secureRandom = new SecureRandom();
        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
        KeySpec keySpec = new PBEKeySpec(passphraseOrPin, secureRandom.generateSeed(1), iterations, outputKeyLength);
        SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);

        return secretKey;
    }
</code></pre>

<p>But after that I was trying to build JSON web token using <a href=""https://github.com/jwtk/jjwt"" rel=""nofollow noreferrer"">JJWT</a>. But I couldn't find any existing algorithm in the library to do this for encrypted PBKDF2.</p>

<p>Am I missing something here? Or is there is any other way around to this issue.</p>
","","45","<java><android><jwt><public-key-encryption><pbkdf2>","0","","0","2019-09-04 10:13:34","","0","","1000551","","2019-09-04 10:13:34","2019-09-04 10:10:32",""
"54506536","How can I store my salt as a string, while still using it as a buffer later?","<p>I'm trying to salt a password, however I get the following error message:</p>

<blockquote>
  <p>(node:958) MaxListenersExceededWarning: Possible EventEmitter memory
  leak detected. 11 exit listeners added. Use emitter.setMaxListeners()
  to increase limit </p>
  
  <p>TypeError: Salt must be a buffer</p>

<pre><code>at pbkdf2 (crypto.js:644:20)
at Object.exports.pbkdf2 (crypto.js:624:10)
at model.exports.UserCredentialsSchema.methods.setPassword (/Users/friso/Documents/projects/MEANpress/server/src/schemas/user-credentials.schema.ts:35:5)
at App.setupMongoose (/Users/friso/Documents/projects/MEANpress/server/src/App.ts:42:15)
at new App (/Users/friso/Documents/projects/MEANpress/server/src/App.ts:14:14)
at Object.&lt;anonymous&gt; (/Users/friso/Documents/projects/MEANpress/server/src/server.ts:5:13)
at Module._compile (module.js:635:30)
at Module.m._compile (/Users/friso/Documents/projects/MEANpress/server/node_modules/ts-node/src/index.ts:439:23)
at Module._extensions..js (module.js:646:10)
at Object.require.extensions.(anonymous function) [as .ts] (/Users/friso/Documents/projects/MEANpress/server/node_modules/ts-node/src/index.ts:442:12)
at Module.load (module.js:554:32)
at tryModuleLoad (module.js:497:12)
at Function.Module._load (module.js:489:3)
at Function.Module.runMain (module.js:676:10)
at Object.&lt;anonymous&gt; (/Users/friso/Documents/projects/MEANpress/server/node_modules/ts-node/src/bin.ts:157:12)
at Module._compile (module.js:635:30)
</code></pre>
</blockquote>

<p>I'm trying to do it for this schema and method:</p>

<pre><code>export var UserCredentialsSchema: Schema = new Schema({
    username: {
        type: String,
        lowercase: true,
        unique: true
    },
    password: String,
    salt: String
});

UserCredentialsSchema.methods.setPassword = function (password: string): void {
    randomBytes(saltLength, (err, buf) =&gt; {
        console.error(err);
        this.salt = buf.toString();
    });
    pbkdf2(password, this.salt, hashIterations, hashLength, digest, (err, derivedKey) =&gt; {
        console.error(err);
        this.hashedPassword = derivedKey;
    });
};
</code></pre>

<p>From the documentation and tutorials online I understood that crypto will convert the string of my salt to a buffer by itself, but this error makes me think otherwise.</p>

<p>Am I missing any steps in using <code>pbkdf2</code> maybe?</p>

<p>I'm getting the error while trying to create an admin user in the setup :</p>

<pre><code>const admin = new UserCredentials();
admin.username = 'admin';
admin.setPassword('admin');
admin.save();
</code></pre>

<p>Links to source code in Github:</p>

<ul>
<li><a href=""https://github.com/FrisoDenijs/MEANpress/blob/feature/login/server/src/schemas/user-credentials.schema.ts#L20"" rel=""nofollow noreferrer"">Schema</a> </li>
<li><a href=""https://github.com/FrisoDenijs/MEANpress/blob/feature/login/server/src/App.ts#L40"" rel=""nofollow noreferrer"">Set the admin</a></li>
</ul>
","<p>If you call <code>randomBytes</code> (I assume it is <code>crypto.randomBytes</code>) with a callback, then the process is made asynchronously. So when <code>pbkdf2</code> is called, <code>this.salt</code> hasn't been initialized yet.</p>

<p>Either move the call to <code>pbdkf2</code> inside the <code>randomBytes</code>' callback, or use the implicitly synchronous version:</p>

<pre><code>try {
  this.salt = randomBytes(saltLength);
} catch (err) {
  // handle err here
}
</code></pre>
","44","<node.js><mongoose><hash><cryptojs><pbkdf2>","0","2","1","2019-02-03 21:15:47","54507072","0","","","","","2019-02-03 19:12:49",""
"58055511","Encrypt database entries in my android app","<p>I am developing a android app. I created a share function, which uploads data from a local SQLite database to a online MySQL database.</p>

<p>Now my question is: How is it possible to encrypt the database entries? <strong>One important point for me is, to have a master key for trouleshooting.</strong></p>

<p>How can I implement that? Are there libraries which do that already? I haven't found a good solution yet.</p>

<p>Thanks!</p>
","<p>Have a look at this <a href=""http://greenrobot.org/greendao/documentation/database-encryption/"" rel=""nofollow noreferrer"">link</a> 
Android doesn't provides any encryption out of the box for databases. You can either go with native code or try using the library GreenDAO, which uses SQLCipher and it builds database on 256-bit AES encryption.
Note: This encrypts your database not the entries inside it.</p>
","42","<java><android><encryption><aes><pbkdf2>","0","0","1","2019-09-26 16:47:17","","3","","8551715","","2019-09-26 16:47:17","2019-09-23 04:02:45",""
"39763496","How to get an analogous of the (C) function PKCS5_PBKDF2_HMAC in PHP?","<p>I am trying to write similar program as <a href=""https://github.com/jpmens/mosquitto-auth-plug/blob/master/pbkdf2-check.c"" rel=""nofollow"">this</a> but in PHP. It uses the above function, but that function is not available in PHP apparently.</p>

<p>How can I solve this?</p>

<p>I tried to use pbkdf2 function of PHP, but it produces different result than the above function.</p>
","","38","<php><hmac><pbkdf2>","1","","0","2016-10-02 17:23:37","","1","","1783163","","2016-10-02 17:23:37","2016-09-29 07:00:09",""
"58693303","Pbkdf2 How to verify hashed password?","<p>I am using the following code to hash passwords using Pbkdf2:</p>

<pre><code>private string HashPassword(string password)
        {
            // generate a 128-bit salt using a secure PRNG
            byte[] salt = new byte[128 / 8];
            using (var rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(salt);
            }

            // derive a 256-bit subkey (use HMACSHA1 with 10,000 iterations)
            string hashedPassword = Convert.ToBase64String(KeyDerivation.Pbkdf2(
                password: password,
                salt: salt,
                prf: KeyDerivationPrf.HMACSHA1,
                iterationCount: 10000,
                numBytesRequested: 256 / 8));

            return hashedPassword;
        }
</code></pre>

<p>How do I verify the password for authentication? It seems I need to get the salt used to hash the password. How do I get that? Please note that I am not using a separate field to store the hash. Only the hashed password is stored in the database.</p>
","","37","<c#><asp.net><asp.net-core><password-hash><pbkdf2>","0","","0","2019-11-04 12:16:23","","5","","","","","2019-11-04 12:16:23",""
"56988949","Can I use SHA-3-256 with PBKDF2-HMAC?","<p>I'm trying to build a secure file locker in Python using cryptography/Cryptodome module.
Here's the link to my application: <a href=""https://github.com/arunanshub/pycryptor"" rel=""nofollow noreferrer"">https://github.com/arunanshub/pycryptor</a></p>

<p>I browsed up the internet where I found articles about SHA-256 for PBKDF2.
But experimentally I implemented PBKDF2 with SHA3-256 without any apparent faults.</p>

<p>Earlier I used a naive method where I derived a hash from the password with SHA3-256 only, without any salting. But later I thought of making the program more task specific. So, I implemented SHA3-256 with PBKDF2.</p>

<pre><code>key = hashlib.pbkdf2_hmac('sha3-256', password, salt, 10000, 32)

# ############# CIPHER GENERATION PORTION #############
# A cipher object will take care of the all
# the required mac_tag and verification.
# AES-GCM-256 chosen for security and authentication

cipher_obj = AES.new(key, AES.MODE_GCM, nonce)
crp = getattr(cipher_obj, method)
mac_func = getattr(cipher_obj, 'digest')
verifier = getattr(cipher_obj, 'verify')
</code></pre>

<p>I expect that PBKDF2-SHA3-256 to be secure enough (or even better) like the SHA-256 version.</p>
","","35","<python-3.x><pbkdf2><hashlib><scrypt><cryptographic-hash-function>","0","","0","2019-07-11 12:15:27","","0","","","","","2019-07-11 12:15:27",""
"58507673","Impossible do import users to firebase, hashing issues","<p>I'm unable to successfully import users to firebase.</p>

<p>I have a list of users for which I only know the salt and hashed password. I know that the function used to create the hash was the following (<a href=""https://nodejs.org/api/crypto.html"" rel=""nofollow noreferrer"">crypto lib for nodejs</a>) :</p>

<pre><code>crypto.pbkdf2(password, salt, 20, 44, ""sha1"", callback)
</code></pre>

<p>I found that <a href=""https://asecuritysite.com/encryption/PBKDF2z"" rel=""nofollow noreferrer"">this website</a> was giving me the exact same hash when giving the same configurations (rounds and salt).</p>

<p>I tried importing users into firebase this way, but without any success :</p>

<pre><code>admin
  .auth()
  .importUsers(
    [
      {
          uid: ""9"",
          email: ""testuser@test.com"",
          //password = testPassword
          passwordHash: Buffer.from(""C6B7Uch6Q+NiiUZVqjRqPit9e+56YkA0xwwZtfs0+RI="",'base64'),
          passwordSalt: Buffer.from(""testSalt"",'base64'),

      }
    ],
    {
      hash: {
          algorithm: ""PBKDF_SHA1"",
          rounds: 20,
          dk_len: 44
      }
    }
  )
  .then(function(results) {
    results.errors.forEach(function(indexedError) {
      console.log(""Error importing user "" + indexedError.index);
    });

      firebase.auth().signInWithEmailAndPassword(""testuser@test.com"", ""testPassword"")

          .then(function(ok){
              console.log(""It's working"");
      })

          .catch(function(error) {
               var errorCode = error.code;
               var errorMessage = error.message;
               console.log(error);
      });

  })
  .catch(function(error) {
    console.log(""Error importing users:"", error);
  }); 
</code></pre>

<p>Which gives me : </p>

<pre><code>{ [Error: The password is invalid or the user does not have a password.]
</code></pre>

<p>There is something I cannot figure out, I tried many things including changing algorithms in the firebase hash config, changing Base64, using hash_input_order or changing key-len.</p>

<p>Basically I'm a bit lost and would love some help to resolve this, does anyone has a clue?</p>

<p>Thanks in advance.</p>
","","34","<node.js><firebase><firebase-authentication><sha1><pbkdf2>","1","","0","2019-10-22 15:30:32","","0","0","","","","2019-10-22 15:30:32",""
"22549499","What happens between the time a user sends a password and when the server receives it?","<p>I'm trying to understand something. When I implement PBKDF2 in a server and client, it is my understanding (could be way wrong, sorry), that the server keeps the encrypted/hashed password in the database, and the user sends his or her password over the net and then it is checked by the server for validity.</p>

<p>What Im curious about is, exactly how do I prevent the users submission over the net to be seen and the users password exposed? do I Just depend on the networking library or SSL to protect this information?</p>

<p>How do i make sure the the password that's being sent over the net is in a way that cannot be exposed easily, but can still be read by the server to check against the hash?</p>

<p>Would it be wise to perform an SHA2 hash on the password client side, and then send that to the server and then check the sha2 has against the PBKDF2 hash?  The server will never really even know the users password, the only possible recovery option is to reset it.  Is this type of system acceptable?</p>

<p>What kinds of these things are done normally by the professionals?</p>
","<blockquote>
  <p>When I implement PBKDF2 in a server and client, it is my understanding (could be way wrong, sorry), that the server keeps the encrypted/hashed password in the database, and the user sends his or her password over the net and then it is checked by the server for validity.</p>
</blockquote>

<p>This is basically correct. When setting up an account the user sends <code>user</code> and <code>pass</code> to the server. The server stores <code>user</code> and <code>PBKDF2(pass)</code> and then discards <code>pass</code>. When logging in the server looks up against the <code>user</code> column and compares <code>PBKDF2(pass_as_submitted)</code> to the value stored when the account was set up. If they match, the user is authenticated.</p>

<blockquote>
  <p>Do I just depend on the networking library or SSL to protect this information?</p>
</blockquote>

<p>In the sort of situation you're talking about, yes.</p>

<blockquote>
  <p>Would it be wise to perform an SHA2 hash on the password client side, and then send that to the server and then check the sha2 has against the PBKDF2 hash?</p>
</blockquote>

<p>No. The problem here is you're just changing the thing you're keeping from the user's password to a hash of the user's password. It's still known to an attacker who can read the database.</p>

<p>(There are reasons this is marginally better than knowing the password, most particularly in case of password reuse. However, these do not justify such an approach.)</p>

<p>It's worth pointing out as well that <code>SHA2(password)</code> will not match <code>PBKDF2(password)</code>.</p>

<blockquote>
  <p>What kinds of these things are done normally by the professionals?</p>
</blockquote>

<p>First, use TLS (aka SSL). Having a good, encrypted connection between client and server is first priority. For a website, you should use TLS on every page, not just when sending the password. At the very least it must be used on the login page <em>and</em> on the request that receives username and password information.</p>

<p>Your TLS connection should be set up properly: it should use HSTS if appropriate (and it's a website). It should avoid outdated algorithms (only support TLS 1.1+ if possible). It should use appropriate cipher modes.</p>

<p>Beyond that, it depends on your use case. Perhaps it's worth implementing two factor authentication - be it using TOTP or SMS codes or similar. Perhaps you should be looking at logins without passwords, for example using client-side TLS certificates or OAuth2 tokens. Maybe you should use an existing authentication library like Kerberos. Maybe you need to look at password policies to ensure users are setting good passwords or pass phrases.</p>

<p>These questions are complex and depend on your use case. Thinking about them is the big first step most people don't take. Using PBKDF2 is a great start but there's no universal answer. If possible, get an expert to do your security analysis. If not, open source plus some promo can often get people to look at it. Worst case scenario, read up on security, check out the <a href=""https://www.owasp.org/index.php/Top_10_2013"" rel=""nofollow"">OWASP Top 10</a> and think about every part of the system. Where possible use existing libraries made by experts. If you have to roll your own, you're probably doing it wrong.</p>
","30","<encryption><hash><pbkdf2><network-security><sha2>","0","0","1","2014-03-21 06:23:29","","0","","","","","2014-03-21 03:18:23",""
"56145257","How can I connect myself as an other user?","<p>Hello I am a developper of a django project and I have to check that my dev is okay. </p>

<p>To do this, I have to connect myself as a user but I have just his email not his password. I found in the <code>table User</code> this the email and the password but the password begins by this : <code>pbkdf2_sha256 ...</code></p>

<p>So I guess the password is encrypted. Is there a way easier to do this ? </p>

<p>Thank you for your help !</p>
","<p>Passwords in django are one way encrypted so it cannot be decrypted hence there is no way of finding the actual password of any user from the user table in database.<br>
If you want to login on another user's behalf without having to know their password then you can write some complicated code to achieve that, or use a third party package.<br>
<a href=""https://github.com/arteria/django-hijack"" rel=""nofollow noreferrer"">django-hijack</a> looks like a good one. Its <a href=""http://django-hijack.readthedocs.org/en/stable/"" rel=""nofollow noreferrer"">docs</a> has good explaination on how to use it so I am not going to go through that here. If you don't like this package you can see the list of packages for this purpose <a href=""https://djangopackages.org/grids/g/user-switching/"" rel=""nofollow noreferrer"">here on djangopackages</a> and choose the one you like.</p>

<h3>django-hijack usage:</h3>

<p>Complete the <a href=""https://django-hijack.readthedocs.io/en/stable/#installation"" rel=""nofollow noreferrer"">Installation</a> and <a href=""https://django-hijack.readthedocs.io/en/stable/#after-installing"" rel=""nofollow noreferrer"">After Installation</a> steps first.</p>

<ul>
<li><p>Make a post request to <code>/hijack/&lt;user_id&gt;</code> where <code>&lt;user_id&gt;</code> is the column <code>id</code> of table <code>user</code>. If you have not updated the field id on model user it will be 1, 2, 3, .... So the url will be similar to <code>/hijack/1/</code></p></li>
<li><p>Make a post request to <code>/hijack/username/&lt;username&gt;</code> if you want to hijack by username. eg. <code>/hijack/username/awesome_username/</code></p></li>
<li><p>Make a post request to <code>/hijack/email/&lt;user email&gt;/</code> if you want to hijack by email of user. eg. <code>/hijack/email/awesome@email.com/</code></p></li>
</ul>

<p>After making a post request to one of these urls as superuser you will be redirected to the specified <code>HIJACK_LOGIN_REDIRECT_URL</code> in settings.py</p>

<p><hr />
I am not sure if django-hijack will work on python 3 or newer versions of Django. If it doesn't works try out <a href=""https://bitbucket.org/petersanchez/django-impersonate/src/default/"" rel=""nofollow noreferrer"">django-impersonate</a> which provides the same functionality in a similar way and officially supports python 3.6+ and django 1.11+</p>
","29","<python><django><python-3.x><django-users><pbkdf2>","0","0","2","2019-05-15 11:40:37","","2","","6109920","","2019-05-15 08:59:09","2019-05-15 08:54:42",""
"56145257","How can I connect myself as an other user?","<p>Hello I am a developper of a django project and I have to check that my dev is okay. </p>

<p>To do this, I have to connect myself as a user but I have just his email not his password. I found in the <code>table User</code> this the email and the password but the password begins by this : <code>pbkdf2_sha256 ...</code></p>

<p>So I guess the password is encrypted. Is there a way easier to do this ? </p>

<p>Thank you for your help !</p>
","<p>Depending on how the passwords are hashed while new users are created, you could just replace the user's hash with another one : <br></p>

<ol>
<li>Go in database and copy the passwordHash of the user you would like to log with</li>
<li>Store this hash somewhere (you will need it to revert the change)</li>
<li>Copy the hash of another user (a user for whom you know the password)</li>
<li>Paste the hash of this user in place of the hash of the user you want to log in</li>
</ol>

<p>If the hashs are generated the same way, you will be able to log with the other user's password.</p>

<p>Then when you are done, revert the changes in database.</p>

<p>Hope it helps.</p>
","29","<python><django><python-3.x><django-users><pbkdf2>","0","1","2","2019-05-15 11:40:37","","2","","6109920","","2019-05-15 08:59:09","2019-05-15 08:54:42",""
"52192479","Password derived key (i.e PBKDF2) + oAuth2","<p>I have an application that needs to store secrets on behalf of the user. These secrets should be stored securely, but need to be decryptable when the user is present.  </p>

<p>Ordinarily I would turn to password based keys (i.e. PBKDF2) to derive the key, however I also have to provide oAuth2 sign in capabilities (with Facebook and Google), which means I don't have a password that I can use to generate the key.</p>

<p>I have tried to find a unique, consistent and secret key that's returned from the oAuth2 providers, but I can't find one.  </p>

<p>Are there any approaches that can combine the two?  I suspect the answer is no, but wanted to ask just in case.</p>
","","28","<encryption><oauth-2.0><pbkdf2>","2","","0","2018-09-05 19:49:52","","0","","","","","2018-09-05 19:49:52",""
"57996612","Python program crashes when trying to send data hashed with PBKDF2","<p>I am trying to make my login system secure, and I am using PBKDF2 hashing algorithm.
But every time I am launching my program and trying to send something to the server, it crashes with some strange error <code>Process finished with exit code -1073740791 (0xC0000409)</code>
Here is the code of Send_login function:</p>

<pre><code>    try:
        tcp_client = socket(AF_INET, SOCK_STREAM)
        tcp_client.connect((host_ip, server_port))
        tcp_client.sendall(('L|' + str(pbkdf2.crypt(Login.encode(), iterations=150, salt=""f597beecd1f5be49cce44b7b62316669"")) + '|' + str(pbkdf2.crypt(Pass.encode(), iterations=150, salt=""f597beecd1f5be49cce44b7b62316669""))))
        received = tcp_client.recv(2048)
        received = received.decode(""utf8"")
        if received == ""Auth succeed"":
            print(""Credentials are correct"")
        else:
            print(""Either credentials are incorrect or our servers are unavailable right now"")
    finally:
        tcp_client.close()
</code></pre>

<p>PS:Send_login() is the only function that interacts with this socket</p>
","<p>First and foremost, if you're a web app, use SSL. Second if you still want to encrypt messages use the cryptography module.  </p>

<pre><code>import ujson as json
import base64, zlib
from config import config_opts
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend

SALT = config_opts['SALT']
SALT_SIZE = config_opts['SALT_SIZE']
SALT_OFF_SET = config_opts['SALT_OFF_SET']
NUMBER_OF_ITERATIONS = config_opts['NUMBER_OF_ITERATIONS']
AES_MULTIPLE = config_opts['AES_MULTIPLE']

def cryptkey(password=''):
    digest = hashes.Hash(hashes.SHA256(), backend=default_backend())
    digest.update(SALT+password)
    return Fernet(base64.urlsafe_b64encode(digest.finalize()))

def encrypt(meta, password=''):
    meta = json.dumps(meta)
    meta = str(zlib.compress(meta, 9))
    f = cryptkey(password)
    return base64.urlsafe_b64encode(f.encrypt(bytes(meta)))

def decrypt(meta, password=''):
    meta = base64.urlsafe_b64decode(meta)
    f = cryptkey(password)
    meta = f.decrypt(bytes(meta))
    meta = zlib.decompress(meta)
    return json.loads(meta)


 try:
        tcp_client = socket(AF_INET, SOCK_STREAM)
        tcp_client.connect((host_ip, server_port))
        tcp_client.sendall(encrypt([Login.encode(), Pass.encode()]))
        received = tcp_client.recv(2048)
        received = received.decode(""utf8"")
        if received == ""Auth succeed"":
            print(""Credentials are correct"")
        else:
            print(""Either credentials are incorrect or our servers are unavailable right now"")
    finally:
        tcp_client.close()
</code></pre>

<p>Then your backend should use the <code>decrypt</code> functio (and optional password). Base64 makes it more suitable for REST api communication.   </p>
","28","<python><sockets><pbkdf2>","0","1","1","2019-10-17 18:31:45","57998917","3","","","","","2019-09-18 15:50:46",""
"57271076","PBKDF2 Python Byte Array Salt","<p>I'm encryption a file's in Vb.net application with Vb.net AesCryptoServiceProvider class and try to decrypt file's in a python applications.</p>

<p>In Vb.net my salt is byte array but in python im using PBKDF2 and its accept string not byte array.</p>

<p>I actually tried to convert my byte array to convert base 64 string and decode in python but it didnt work.</p>

<p>My Salt in Vb  : </p>

<pre><code>Dim salt() As Byte = {&amp;H0, &amp;H0, &amp;H1, &amp;H2, &amp;H3, &amp;H4, &amp;H5, &amp;H6, &amp;HF1, &amp;HF0, &amp;HEE, &amp;H21, &amp;H22, &amp;H45}

Convert.ToBase64String(salt)

Output : AAABAgMEBQbx8O4hIkU=
</code></pre>

<p>My question is how can i convert this byte array to string in python ?</p>
","","24","<python><vb.net><aes><salt><pbkdf2>","0","","0","2019-07-30 11:55:40","","1","","","","","2019-07-30 11:55:40",""
"58100913","Is it possible to generate key in CryptoJS same as generated by c# using PasswordDeriveBytes.GetBytes(Int32)","<p>I am trying to encrypt using cryptoJS. How can I implement</p>

<pre><code>var secretKey = new PasswordDeriveBytes(EncryptionKey, Salt);                
using (ICryptoTransform encryptor = rijndaelCipher.CreateEncryptor(secretKey.GetBytes(32), secretKey.GetBytes(16)))
</code></pre>

<p>I am trying to generate ""key"" and ""IV"" as below in cryptoJS</p>

<pre><code>var hasher = CryptoJS.algo.SHA1;
var key32Byte = CryptoJS.PBKDF2(enckey, salt, {
        keySize: 256 / 32,
        iterations: 100,
        hasher: hasher
    });

var iv = CryptoJS.PBKDF2(enckey, salt, {
        keySize: 128 / 32,
        iterations: 100,
        hasher: hasher
    });
</code></pre>

<p>I have matched the hex string of ""secretKey.GetBytes(32)"" by ""key32Byte"" and ""secretKey.GetBytes(16)"" by ""IV"" both are different.</p>

<p>Is there any equivalent method in JS for secretKey.GetBytes(32). As documentation says it randomize(pseudo-random) the bytes.</p>
","","23","<javascript><c#><angular><cryptojs><pbkdf2>","0","","0","2019-09-25 14:36:55","","0","","","","","2019-09-25 14:36:55",""
"56066263","Java and JavaScript PBKDF2 length inconsistency","<p>I am trying to port some Java code to JavaScript. However, for some reason, I am getting inconsistent lengths. Something tells me the NodeJS library <code>crypto</code> doesn't work as expected.</p>

<p><strong>hash Java file</strong></p>

<pre><code>public class hash {
    public static void main(String[] args){
        try {
            String password = ""password1"";

            //random bytes (should be random)
            byte[] bArr = {0, 1, 2, 3, 4, 5, 6, 7};

            char[] salt = password.toCharArray();

            PBEKeySpec spec = new PBEKeySpec(salt, bArr, 100, 384);

            byte[] encoded = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"").generateSecret(spec).getEncoded();

            System.out.println(encoded.length);
        } catch(Exception e) {}
    }
}
</code></pre>

<p>The printed output is <code>48</code>, which makes sense because of <code>SHA-384</code>. However, my JavaScript code outputs an array with <code>384</code> elements.</p>

<p><strong>JavaScript file</strong></p>

<pre><code>const crypto = require(""crypto"");

const key = ""password1"";

let bArr = [0, 1, 2, 3, 4, 5, 6, 7];

//create the salt (.toCharArray() in Java)
const salt = key.split("""").join("","");

let encoded = crypto.pbkdf2Sync(key, Buffer.from(salt, ""hex""), 100, 384, ""sha1"");

console.log(encoded.length);
</code></pre>

<p>I'm not sure what I'm doing wrong here. I found a couple of places, where people were discussing how to create the PBKDF2 key, and it looks like this is how I'm supposed to. Also, <code>bArr</code> in my JavaScript example was not used.</p>

<p>I have tried converting both <code>encoded</code> variables into HEX to compare them, but the JavaScript one is much longer. Even if I shorten the key length to 48 (<code>384 -&gt; 48</code> in the <code>pbkdf2Sync()</code> method), it's still wrong.</p>
","","19","<javascript><java><cryptojs><pbkdf2>","0","","0","2019-05-09 19:21:52","","1","","","","","2019-05-09 19:21:52",""
"55843855","CryptoJs PBKDF2 Hashing causing browser freez","<p>I came across an issue when I have included a Hashing mechanism using PBKDF2 module in <a href=""https://www.npmjs.com/package/crypto-js"" rel=""nofollow noreferrer"">CryptoJs Library</a> and it caused the browser to get frozen (Both in Chrome and Firefox).<br>
This is the code sample of the implementation.</p>

<pre><code>const key = CryptoLib.PBKDF2(password, 'SALT', {
            keySize: 512 / 32,
            iterations: 100,
            hasher: CryptoLib.algo.SHA512,
        });
</code></pre>

<p>Previously I have using 10000 iterations for hashing but now I have reduced it to the 100 iterations but results are almost same.There for I wanted to know that,</p>

<ol>
<li>Why is my broswer getting frozen when the hashing starts and after hashing is finished browser operated normally.</li>
<li>As I know the broswers are single threaded is there a possible asynchronous approach to this.</li>
<li>What's the best approach in Angular 7 to handle this kind of costly processes.</li>
<li>Or is this is an issue with the library.</li>
</ol>

<p>I would be glad to know the reasons for this and to know if any one have faced the simmilar scenario.<br>
Thank you.</p>
","","19","<google-chrome><firefox><browser><cryptojs><pbkdf2>","0","","0","2019-04-25 07:19:54","","0","","","","","2019-04-25 07:19:54",""
"58371282","native hash_pbkdf2 does not validate passwords hashed using replacement hash_pbkdf2 (PHP 5.3.x)","<p>On an old linux machine running <code>PHP 5.3.x</code> I have the following code to hash and validate passwords. This code also validates passwords hashed with <code>c#</code> <code>GetPbkdf2Bytes</code></p>

<p>My problem is <code>hash_pbkdf2</code> on a newer linux machine running <code>PHP 5.6.x</code></p>

<p>Native <code>PHP5.6</code> <code>hash_pbkdf2</code> does not validate passwords hashed using <code>PHP5.3</code> replacement <code>hash_pbkdf2</code> or <code>c#</code> <code>GetPbkdf2Bytes</code></p>

<p>Also native <code>PHP5.6</code> <code>hash_pbkdf2</code> generates longer hashes than <code>PHP5.3</code> replacement <code>hash_pbkdf2</code> which <code>PHP5.3</code> cannot validate.</p>

<p>Clearly I can rename <code>hash_pbkdf2</code> to <code>hash_pbkdf2_old</code> and use it on <code>PHP5.6</code> but I want to understand why replacement <code>hash_pbkdf2</code> is not actually a full replacement? What's the difference?</p>

<pre><code>function hash_pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = true) {
    $algorithm = strtolower($algorithm);
    if (! in_array($algorithm, hash_algos(), true))
        die(""PBKDF2 ERROR: Invalid hash algorithm `$algorithm`."");
    if ($count &lt;= 0 || $key_length &lt;= 0)
        die('PBKDF2 ERROR: Invalid parameters.');
    $hash_length = strlen(hash($algorithm, """", $raw_output));
    $block_count = ceil($key_length / $hash_length);
    $output = """";
    for ($i = 1; $i &lt;= $block_count; $i ++) {
        // $i encoded as 4 bytes, big endian.
        $last = $salt . pack(""N"", $i);
        // first iteration
        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
        // perform the other $count - 1 iterations
        for ($j = 1; $j &lt; $count; $j ++) {
            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
        }
        $output .= $xorsum;
    }
    if ($raw_output)
        return substr($output, 0, $key_length);
    else
        return bin2hex(substr($output, 0, $key_length));
}

if (! function_exists('hash_equals')) {
    function hash_equals($str1, $str2)
    {
        if (strlen($str1) != strlen($str2)) {
            return false;
        } else {
            $res = $str1 ^ $str2;
            $ret = 0;
            for ($i = strlen($res) - 1; $i &gt;= 0; $i --)
                $ret |= ord($res[$i]);
            return ! $ret;
        }
    }
}

function generateSalt($SaltByteSize) {
    if (function_exists('mcrypt_create_iv') &amp;&amp; false) {
        $buffer = mcrypt_create_iv($SaltByteSize, MCRYPT_DEV_URANDOM);
        if ($buffer) {
            $buffer_valid = true;
        }
    }
    if (!$buffer_valid &amp;&amp; function_exists('openssl_random_pseudo_bytes')) {
        $buffer = openssl_random_pseudo_bytes($SaltByteSize, $strong);
        if ($buffer) {
            $buffer_valid = true;
        }
    }
    return base64_encode($buffer);
}

function cSharpHashPassword($password) {
    $SaltByteSize = 24;
    $HashByteSize = 20;
    $iterations = 65536;
    $salt = generateSalt($SaltByteSize);
    $hash = hash_pbkdf2(""sha1"", $password, $salt, $iterations, $HashByteSize);
    return $iterations . "":"" . base64_encode($salt) . "":"" . base64_encode($hash);
}

function cSharpValidatePassword($password, $csharphash) {   
    $chunks = explode("":"", $csharphash);
    $iterations = $chunks[0];
    $salt = $chunks[1];
    $hash = $chunks[2];
    //$HashByteSize = mb_strlen(base64_decode($hash));
    $HashByteSize = (int) (strlen(rtrim($hash, '=')) * 3 / 4);
    $testhash = base64_encode(hash_pbkdf2(""sha1"", $password, base64_decode($salt), $iterations, $HashByteSize));
    return hash_equals($testhash, $hash);
}
</code></pre>
","","16","<password-hash><pbkdf2><php-password-hash>","0","","0","2019-10-14 06:37:29","","0","","","","","2019-10-14 06:37:29",""
"58666840","i cant verify my pbkdf2_sha512 password in centos","<p>i am trying to verify my pbkdf2_sha512 hashed password with python, it worked perfectly in my windows machine(developmet) but when i uploaded the code to my centos vps, i got this error when i ran this command in the terminal </p>

<pre><code>python3 test.py 123467890 $pbkdf2-sha512$25000$IMTYW6s1BqB0LsXY.x8jxA$wPOuSv7YHH40E3CesVpv.AAATxMG5hkl8DAjV8Xc2WfukzfO1PZGuIBQGkzBKJlS5tt/BFcYdr4ZLA.Xvrg9cg
</code></pre>

<p>here is the error i got in the terminal</p>

<pre><code>Traceback (most recent call last):
  File ""test.py"", line 6, in &lt;module&gt;
    HASHed = CryptContext(['pbkdf2_sha512']).verify(MY_PASSWORD, hash)
  File ""/usr/local/lib/python3.6/site-packages/passlib/context.py"", line 2338, in verify
    record = self._get_or_identify_record(hash, scheme, category)
  File ""/usr/local/lib/python3.6/site-packages/passlib/context.py"", line 2026, in _get_or_identify_record
    return self._identify_record(hash, category)
  File ""/usr/local/lib/python3.6/site-packages/passlib/context.py"", line 1131, in identify_record
    raise ValueError(""hash could not be identified"")
ValueError: hash could not be identified
</code></pre>

<p>here is the code that i used</p>

<pre><code>from passlib.context import CryptContext
import sys
password = str(sys.argv[1])
hashedPassword= str(sys.argv[2])
HASHed= CryptContext(['pbkdf2_sha512']).verify(password, hashedPassword)
if HASHed == True:
    print(HASHed)
</code></pre>

<p>pls guys how can i solve this issue, its really important to me</p>

<p>Thanks</p>
","","11","<python-3.x><pbkdf2>","0","","0","2019-11-01 23:07:06","","0","","","","","2019-11-01 23:07:06",""