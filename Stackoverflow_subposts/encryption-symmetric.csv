post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"9031537","Really simple encryption with C# and SymmetricAlgorithm","<p>I'm looking for a <strong>very</strong> simple crypt / decrypt method. I will be using always the same static key. I'm aware of the risks of this approach. Currently I'm using the following code but it does not generate the same result after crypting and decripting the same string (there is some garbage in the middle of the string).</p>

<pre><code>public static string Crypt(this string text)
{
    string result = null;

    if (!String.IsNullOrEmpty(text))
    {
        byte[] plaintextBytes = Encoding.Unicode.GetBytes(text);

        SymmetricAlgorithm symmetricAlgorithm = DES.Create();
        symmetricAlgorithm.Key = new byte[8] {1, 2, 3, 4, 5, 6, 7, 8};
        using (MemoryStream memoryStream = new MemoryStream())
        {
            using (CryptoStream cryptoStream = new CryptoStream(memoryStream, symmetricAlgorithm.CreateEncryptor(), CryptoStreamMode.Write))
            {
                cryptoStream.Write(plaintextBytes, 0, plaintextBytes.Length);
            }

            result = Encoding.Unicode.GetString(memoryStream.ToArray());
        }
    }

    return result;
}

public static string Decrypt(this string text)
{
    string result = null;

    if (!String.IsNullOrEmpty(text))
    {
        byte[] encryptedBytes = Encoding.Unicode.GetBytes(text);

        SymmetricAlgorithm symmetricAlgorithm = DES.Create();
        symmetricAlgorithm.Key = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
        using (MemoryStream memoryStream = new MemoryStream(encryptedBytes))
        {
            using (CryptoStream cryptoStream = new CryptoStream(memoryStream, symmetricAlgorithm.CreateDecryptor(), CryptoStreamMode.Read))
            {
                byte[] decryptedBytes = new byte[encryptedBytes.Length];
                cryptoStream.Read(decryptedBytes, 0, decryptedBytes.Length);
                result = Encoding.Unicode.GetString(decryptedBytes);
            }
        }
    }

    return result;
}
</code></pre>

<p>I can change whatever is needed, no limits (but I want just to have on method to crypt and another one to decrypt without sharing variables between them).</p>

<p>Thanks.</p>
","<p>You'll need to set the cipher mode to CipherMode.ECB or use an IV.</p>

<pre><code>SymmetricAlgorithm symmetricAlgorithm = DES.Create();
symmetricAlgorithm.Key = new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 };
symmetricAlgorithm.Mode = CipherMode.ECB;
...
</code></pre>

<p>Another point is not to use Unicode encoding. Use Base64 instead. Unicode might ""destroy"" bytes that are not UTF-16.</p>
","68813","<c#><encryption><encryption-symmetric><des>","26","9","3","2019-03-06 18:02:29","9034247","1","11","185123","","2019-03-06 18:02:29","2012-01-27 09:56:58",""
"9031537","Really simple encryption with C# and SymmetricAlgorithm","<p>I'm looking for a <strong>very</strong> simple crypt / decrypt method. I will be using always the same static key. I'm aware of the risks of this approach. Currently I'm using the following code but it does not generate the same result after crypting and decripting the same string (there is some garbage in the middle of the string).</p>

<pre><code>public static string Crypt(this string text)
{
    string result = null;

    if (!String.IsNullOrEmpty(text))
    {
        byte[] plaintextBytes = Encoding.Unicode.GetBytes(text);

        SymmetricAlgorithm symmetricAlgorithm = DES.Create();
        symmetricAlgorithm.Key = new byte[8] {1, 2, 3, 4, 5, 6, 7, 8};
        using (MemoryStream memoryStream = new MemoryStream())
        {
            using (CryptoStream cryptoStream = new CryptoStream(memoryStream, symmetricAlgorithm.CreateEncryptor(), CryptoStreamMode.Write))
            {
                cryptoStream.Write(plaintextBytes, 0, plaintextBytes.Length);
            }

            result = Encoding.Unicode.GetString(memoryStream.ToArray());
        }
    }

    return result;
}

public static string Decrypt(this string text)
{
    string result = null;

    if (!String.IsNullOrEmpty(text))
    {
        byte[] encryptedBytes = Encoding.Unicode.GetBytes(text);

        SymmetricAlgorithm symmetricAlgorithm = DES.Create();
        symmetricAlgorithm.Key = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
        using (MemoryStream memoryStream = new MemoryStream(encryptedBytes))
        {
            using (CryptoStream cryptoStream = new CryptoStream(memoryStream, symmetricAlgorithm.CreateDecryptor(), CryptoStreamMode.Read))
            {
                byte[] decryptedBytes = new byte[encryptedBytes.Length];
                cryptoStream.Read(decryptedBytes, 0, decryptedBytes.Length);
                result = Encoding.Unicode.GetString(decryptedBytes);
            }
        }
    }

    return result;
}
</code></pre>

<p>I can change whatever is needed, no limits (but I want just to have on method to crypt and another one to decrypt without sharing variables between them).</p>

<p>Thanks.</p>
","<p>How about something like this?</p>

<p><em>Code</em></p>

<pre><code>using System;
using System.Security.Cryptography;
using System.Text;

public static class StringUtil
{
    private static byte[] key = new byte[8] {1, 2, 3, 4, 5, 6, 7, 8};
    private static byte[] iv = new byte[8] {1, 2, 3, 4, 5, 6, 7, 8};

    public static string Crypt(this string text)
    {
        SymmetricAlgorithm algorithm = DES.Create();
        ICryptoTransform transform = algorithm.CreateEncryptor(key, iv);
        byte[] inputbuffer = Encoding.Unicode.GetBytes(text);
        byte[] outputBuffer = transform.TransformFinalBlock(inputbuffer, 0, inputbuffer.Length);
        return Convert.ToBase64String(outputBuffer);
    }

    public static string Decrypt(this string text)
    {
        SymmetricAlgorithm algorithm = DES.Create();
        ICryptoTransform transform = algorithm.CreateDecryptor(key, iv);
        byte[] inputbuffer = Convert.FromBase64String(text);
        byte[] outputBuffer = transform.TransformFinalBlock(inputbuffer, 0, inputbuffer.Length);
        return Encoding.Unicode.GetString(outputBuffer);
    }
}
</code></pre>

<p><em>Unit Test</em></p>

<pre><code>[Test]
public void Test()
{
    string expected = ""this is my test string"";
    string a = expected.Crypt();
    Debug.WriteLine(a);
    string actual = a.Decrypt();
    Assert.AreEqual(expected, actual);
}
</code></pre>

<hr>

<p><strong>EDIT:</strong></p>

<p>To clarify: I am aware this is not good practice. </p>

<blockquote>
  <p>""I'm aware of the risks of this approach. ""</p>
</blockquote>

<p>Iv'e made the assumption that the OP is also aware and will make relevant code changes before considering using anything like this in a production environment.</p>

<p>The question emphasizes simplicity over good practice.</p>
","68813","<c#><encryption><encryption-symmetric><des>","26","33","3","2019-03-06 18:02:29","9034247","1","11","185123","","2019-03-06 18:02:29","2012-01-27 09:56:58",""
"9031537","Really simple encryption with C# and SymmetricAlgorithm","<p>I'm looking for a <strong>very</strong> simple crypt / decrypt method. I will be using always the same static key. I'm aware of the risks of this approach. Currently I'm using the following code but it does not generate the same result after crypting and decripting the same string (there is some garbage in the middle of the string).</p>

<pre><code>public static string Crypt(this string text)
{
    string result = null;

    if (!String.IsNullOrEmpty(text))
    {
        byte[] plaintextBytes = Encoding.Unicode.GetBytes(text);

        SymmetricAlgorithm symmetricAlgorithm = DES.Create();
        symmetricAlgorithm.Key = new byte[8] {1, 2, 3, 4, 5, 6, 7, 8};
        using (MemoryStream memoryStream = new MemoryStream())
        {
            using (CryptoStream cryptoStream = new CryptoStream(memoryStream, symmetricAlgorithm.CreateEncryptor(), CryptoStreamMode.Write))
            {
                cryptoStream.Write(plaintextBytes, 0, plaintextBytes.Length);
            }

            result = Encoding.Unicode.GetString(memoryStream.ToArray());
        }
    }

    return result;
}

public static string Decrypt(this string text)
{
    string result = null;

    if (!String.IsNullOrEmpty(text))
    {
        byte[] encryptedBytes = Encoding.Unicode.GetBytes(text);

        SymmetricAlgorithm symmetricAlgorithm = DES.Create();
        symmetricAlgorithm.Key = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };
        using (MemoryStream memoryStream = new MemoryStream(encryptedBytes))
        {
            using (CryptoStream cryptoStream = new CryptoStream(memoryStream, symmetricAlgorithm.CreateDecryptor(), CryptoStreamMode.Read))
            {
                byte[] decryptedBytes = new byte[encryptedBytes.Length];
                cryptoStream.Read(decryptedBytes, 0, decryptedBytes.Length);
                result = Encoding.Unicode.GetString(decryptedBytes);
            }
        }
    }

    return result;
}
</code></pre>

<p>I can change whatever is needed, no limits (but I want just to have on method to crypt and another one to decrypt without sharing variables between them).</p>

<p>Thanks.</p>
","<p>If you don't want to handle keys yourself then let the operating system do it for your. E.g. use <a href=""http://msdn.microsoft.com/en-us/library/ms995355.aspx"" rel=""noreferrer"">Windows Data Protection</a> (DPAPI).</p>

<p>You can write your own, <code>string</code>-based, version of <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.protect.aspx"" rel=""noreferrer""><code>System.Security.Cryptography.ProtectedData.Protect</code></a> and <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.unprotect.aspx"" rel=""noreferrer""><code>Unprotect</code></a> methods by using something like:</p>

<pre><code>public static string Crypt (this string text)
{
    return Convert.ToBase64String (
        ProtectedData.Protect (
            Encoding.Unicode.GetBytes (text) ) );
}

public static string Derypt (this string text)
{
    return Encoding.Unicode.GetString (
        ProtectedData.Unprotect (
             Convert.FromBase64String (text) ) );
}
</code></pre>
","68813","<c#><encryption><encryption-symmetric><des>","26","55","3","2019-03-06 18:02:29","9034247","1","11","185123","","2019-03-06 18:02:29","2012-01-27 09:56:58",""
"6770370","AES-256 encryption in PHP","<p>I need a PHP function, <code>AES256_encode($dataToEcrypt)</code> to encrypt the <code>$data</code> into AES-256 and another one <code>AES256_decode($encryptedData)</code> do the opposite. Does anyone know what code should this functions have?</p>
","<p>Look at the <a href=""http://php.net/manual/en/book.mcrypt.php"" rel=""noreferrer"">mcrypt module</a></p>

<p>AES-Rijndael example taken from <a href=""http://www.php.net/manual/en/function.mcrypt-encrypt.php"" rel=""noreferrer"">here</a></p>

<pre><code>$iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
$iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM);
$key = pack('H*', ""bcb04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3"");
# show key size use either 16, 24 or 32 byte keys for AES-128, 192
# and 256 respectively
$key_size =  strlen($key);
echo ""Key size: "" . $key_size . ""\n"";
$text = ""Meet me at 11 o'clock behind the monument."";
echo strlen($text) . ""\n"";

$crypttext = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $text, MCRYPT_MODE_CBC, $iv);
echo strlen($crypttext) . ""\n"";
</code></pre>

<p>This is the <a href=""http://www.php.net/manual/en/function.mcrypt-decrypt.php"" rel=""noreferrer"">decrypt function</a></p>
","56626","<php><security><encryption><aes><encryption-symmetric>","24","16","4","2019-06-10 22:45:29","6770394","1","10","2224584","","2018-11-18 05:07:33","2011-07-21 01:24:35",""
"6770370","AES-256 encryption in PHP","<p>I need a PHP function, <code>AES256_encode($dataToEcrypt)</code> to encrypt the <code>$data</code> into AES-256 and another one <code>AES256_decode($encryptedData)</code> do the opposite. Does anyone know what code should this functions have?</p>
","<p><strong>MCRYPT_RIJNDAEL_256</strong> is not equivalent to AES_256.</p>

<p>The way to make RIJNDAEL be decrypted from AES is to use MCRYPT_RIJNDAEL_128 and padd the string to encrypt before encrypting</p>

<p>AES-256 has BlockSize=128bit and KeySize=256bit
Rijndael-256 has BlockSize=256bit and KeySize=256bit</p>

<p>Just AES/Rijndael 128bit are identical.
Rijndael-192 and Rijndael-256 are not identical to AES-192 and AES-256 (block sizes and number of rounds differ).</p>
","56626","<php><security><encryption><aes><encryption-symmetric>","24","13","4","2019-06-10 22:45:29","6770394","1","10","2224584","","2018-11-18 05:07:33","2011-07-21 01:24:35",""
"6770370","AES-256 encryption in PHP","<p>I need a PHP function, <code>AES256_encode($dataToEcrypt)</code> to encrypt the <code>$data</code> into AES-256 and another one <code>AES256_decode($encryptedData)</code> do the opposite. Does anyone know what code should this functions have?</p>
","<pre><code>$key = '324325923495kdfgiert734t'; // key used for decryption in jasper code
$text = 'string_to_be_encrypted';
$encrypted = fnEncrypt($text, $key);




function fnEncrypt( $plaintext, $key )
{
$plaintext = pkcs5_pad($plaintext, 16);

return bin2hex(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, hex2bin($key), $plaintext, MCRYPT_MODE_ECB));

}


function pkcs5_pad ($text, $blocksize)
{
$pad = $blocksize - (strlen($text) % $blocksize);
return $text . str_repeat(chr($pad), $pad);
}



function hex2bin($hexdata) 
{
$bindata = """";

    for ($i = 0; $i &lt; strlen($hexdata); $i += 2) 
    {
      $bindata .= chr(hexdec(substr($hexdata, $i, 2)));
    }

return $bindata;
}
</code></pre>
","56626","<php><security><encryption><aes><encryption-symmetric>","24","-2","4","2019-06-10 22:45:29","6770394","1","10","2224584","","2018-11-18 05:07:33","2011-07-21 01:24:35",""
"6770370","AES-256 encryption in PHP","<p>I need a PHP function, <code>AES256_encode($dataToEcrypt)</code> to encrypt the <code>$data</code> into AES-256 and another one <code>AES256_decode($encryptedData)</code> do the opposite. Does anyone know what code should this functions have?</p>
","<blockquote>
  <p>I need a PHP function, <code>AES256_encode($dataToEcrypt)</code> to encrypt the <code>$data</code> into AES-256 and another one <code>AES256_decode($encryptedData)</code> do the opposite. Does anyone know what code should this functions have?</p>
</blockquote>

<p>There is a <a href=""https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded"" rel=""nofollow noreferrer"">difference between encrypting and encoding</a>.</p>

<p>Do you <em>really</em> need AES-256? The security of AES-256 versus AES-128 isn't that significant; you're more likely to screw up at the protocol layer than get hacked because you used a 128-bit block cipher instead of a 256-bit block cipher.</p>

<h2>Important - Use A Library</h2>

<p><a href=""https://i.stack.imgur.com/F3hKZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/F3hKZ.png"" alt=""A flowchart for PHP users""></a></p>

<ul>
<li><a href=""https://github.com/defuse/php-encryption"" rel=""nofollow noreferrer"">defuse/php-encryption</a></li>
<li><a href=""https://pecl.php.net/package/libsodium"" rel=""nofollow noreferrer"">PECL libsodium</a></li>
<li><a href=""https://github.com/paragonie/halite"" rel=""nofollow noreferrer"">Halite</a> (libsodium wrapper, now stable)</li>
</ul>

<h3>A Quick and Dirty AES-256 Implementation</h3>

<p>If you're interested in building your own <strong>not for the sake of deploying it in production</strong> but rather for the sake of your own education, I've included a sample AES256</p>

<pre><code>/**
 * This is a quick and dirty proof of concept for StackOverflow.
 * 
 * @ref http://stackoverflow.com/q/6770370/2224584
 * 
 * Do not use this in production.
 */
abstract class ExperimentalAES256DoNotActuallyUse
{
    /**
     * Encrypt with AES-256-CTR + HMAC-SHA-512
     * 
     * @param string $plaintext Your message
     * @param string $encryptionKey Key for encryption
     * @param string $macKey Key for calculating the MAC
     * @return string
     */
    public static function encrypt($plaintext, $encryptionKey, $macKey)
    {
        $nonce = random_bytes(16);
        $ciphertext = openssl_encrypt(
            $plaintext,
            'aes-256-ctr',
            $encryptionKey,
            OPENSSL_RAW_DATA,
            $nonce
        );
        $mac = hash_hmac('sha512', $nonce.$ciphertext, $macKey, true);
        return base64_encode($mac.$nonce.$ciphertext);
    }

    /**
     * Verify HMAC-SHA-512 then decrypt AES-256-CTR
     * 
     * @param string $message Encrypted message
     * @param string $encryptionKey Key for encryption
     * @param string $macKey Key for calculating the MAC
     */
    public static function decrypt($message, $encryptionKey, $macKey)
    {
        $decoded = base64_decode($message);
        $mac = mb_substr($message, 0, 64, '8bit');
        $nonce = mb_substr($message, 64, 16, '8bit');
        $ciphertext = mb_substr($message, 80, null, '8bit');

        $calc = hash_hmac('sha512', $nonce.$ciphertext, $macKey, true);
        if (!hash_equals($calc, $mac)) {
            throw new Exception('Invalid MAC');
        }
        return openssl_decrypt(
            $ciphertext,
            'aes-256-ctr',
            $encryptionKey,
            OPENSSL_RAW_DATA,
            $nonce
        );
    }
}
</code></pre>

<h3>Usage</h3>

<p>First, generate two keys (yes, two of them) and store them somehow.</p>

<pre><code>$eKey = random_bytes(32);
$aKey = random_bytes(32);
</code></pre>

<p>Then to encrypt/decrypt messages:</p>

<pre><code>$plaintext = 'This is just a test message.';
$encrypted = ExperimentalAES256DoNotActuallyUse::encrypt($plaintext, $eKey, $aKey);
$decrypted = ExperimentalAES256DoNotActuallyUse::decrypt($encrypted, $eKey, $aKey);
</code></pre>

<p>If you don't have <code>random_bytes()</code>, get <a href=""https://github.com/paragonie/random_compat"" rel=""nofollow noreferrer"">random_compat</a>.</p>
","56626","<php><security><encryption><aes><encryption-symmetric>","24","15","4","2019-06-10 22:45:29","6770394","1","10","2224584","","2018-11-18 05:07:33","2011-07-21 01:24:35",""
"17567996","Illegal Block Size Exception Input length must be multiple of 16 when decrypting with padded cipher","<p>In my application I am encrypting and decrypting data using secretKey. For that I am using AES algorithm. But I am getting exception in decrypt, one value out of three already encrypted values using secret key. </p>

<p><strong>Exception is:</strong> </p>

<pre><code>Illegal Block Size Exception Input length must be multiple of 16 when decrypting with padded cipher.
</code></pre>

<p>Below is my code:</p>

<p><strong>Function to encyrpt value</strong></p>

<pre><code>public static String symmetricEncrypt(String text, String secretKey) {
    BASE64Decoder decoder = new BASE64Decoder();
    byte[] raw;
    String encryptedString;
    SecretKeySpec skeySpec;
    BASE64Encoder bASE64Encoder = new BASE64Encoder();
    byte[] encryptText = text.getBytes();
    Cipher cipher;
    try {
        raw = decoder.decodeBuffer(secretKey);
        skeySpec = new SecretKeySpec(raw, ""AES"");
        cipher = Cipher.getInstance(""AES"");
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        encryptedString = bASE64Encoder.encode(cipher.doFinal(encryptText));
    } 
    catch (Exception e) {
        e.printStackTrace();
        return ""Error"";
    }
    return encryptedString;
}
</code></pre>

<p><strong>Function to decrypt value</strong></p>

<pre><code>public static String symmetricDecrypt(String text, String secretKey) {
    BASE64Decoder decoder = new BASE64Decoder();
    BASE64Decoder base64Decoder = new BASE64Decoder();
    Cipher cipher;
    String encryptedString;
    byte[] encryptText = null;
    byte[] raw;
    SecretKeySpec skeySpec;
    try {
        raw = decoder.decodeBuffer(secretKey);
        skeySpec = new SecretKeySpec(raw, ""AES"");
        encryptText = base64Decoder.decodeBuffer(text);
        cipher = Cipher.getInstance(""AES"");
        cipher.init(Cipher.DECRYPT_MODE, skeySpec);
        encryptedString = new String(cipher.doFinal(encryptText));
    } catch (Exception e) {
        e.printStackTrace();
        return ""Error"";
    }
    return encryptedString;
}
</code></pre>

<p>Following are the values that I am encrypting and decrypting</p>

<pre><code>String secretKey = ""XMzDdG4D03CKm2IxIWQw7g=="";
String value1= ""ABCD"";
String enctypedValue1= ""3uweh4pzoVyH1uODQmVNJA=="";
String enctypedValue2= ""37PTC20w4DMZYjG3f+GWepSvAbEJUccMXwS/lXilLav1qM/PrCTdontw5/82OdC1zzyhDEsFVRGo rV6gXAQcm+Zai15hliiUQ8l8KRMtUl4="";
String value4= ""20000"";

/**  Ecnryption and decryption of value1 **/
String encryptedValue1= symmetricEncrypt(value1, secretKey);
String decryptedValue1 = symmetricDecrypt(encryptedValue1, secretKey);

/**  Decryption of  enctypedValue1 **/
String decryptedValue2 = symmetricDecrypt(enctypedValue1, secretKey);
System.out.println(decryptedValue2);

/**  Decryption of  enctypedValue2 (Not decrypted)**/
String decryptedValue3 = symmetricDecrypt(enctypedValue2, secretKey);
System.out.println(decryptedValue3);

/**  Ecnryption and decryption of value4 **/
String encryptedValue4= symmetricEncrypt(value4, secretKey);
String decryptedValue4 = symmetricDecrypt(encryptedValue4, secretKey);
</code></pre>

<p>In the test function, I have written the following three test cases.</p>

<ol>
<li>A new value (value1) being encrypted and decrypted using a secret key.</li>
<li>Two example encrypted values (enctypedValue1, enctypedValue2) which are being decrypted using same secret key. encryptedValue2 which got a problem while decrypting using same secret key.</li>
<li>A new value (value4) being encrypted and decrypted using a secret key.</li>
</ol>

<p>On decrypting encryptedValue2 I am getting the following exception:</p>

<pre><code>Illegal Block Size Exception Input length must be multiple of 16 when decrypting with padded cipher
</code></pre>

<p>Following is what I have derived till now.</p>

<ol>
<li><p>The problematic value seems to have a problem while decoding it, it returns 81 length array which is unable to get decrypted?</p></li>
<li><p>If this problem was to happen it should have happened to all the values.</p></li>
<li><p>Is this a value specific problem or it is something related to padding or it can have a different behavior on different browser, different os?</p></li>
</ol>
","<p>I was able to run the code without any problem. However, I used Apache's Base64 for encoding/decoding...maybe your Base64 has bugs. If you wrote it yourself, there is a big chance that you missed some cases. For real production code, use heavily tested libraries such as Apache's.</p>

<p>You can find the library that I used for Base64 here: <a href=""http://commons.apache.org/proper/commons-codec/download_codec.cgi"" rel=""noreferrer"">http://commons.apache.org/proper/commons-codec/download_codec.cgi</a></p>

<p>Here is the full working code:</p>

<pre><code>    package security.symmatric;

    import javax.crypto.Cipher;
    import javax.crypto.spec.SecretKeySpec;

    import org.apache.commons.codec.binary.Base64;

    public class AES {
        public static String symmetricEncrypt(String text, String secretKey) {
            byte[] raw;
            String encryptedString;
            SecretKeySpec skeySpec;
            byte[] encryptText = text.getBytes();
            Cipher cipher;
            try {
                raw = Base64.decodeBase64(secretKey);
                skeySpec = new SecretKeySpec(raw, ""AES"");
                cipher = Cipher.getInstance(""AES"");
                cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
                encryptedString = Base64.encodeBase64String(cipher.doFinal(encryptText));
            } 
            catch (Exception e) {
                e.printStackTrace();
                return ""Error"";
            }
            return encryptedString;
        }

        public static String symmetricDecrypt(String text, String secretKey) {
            Cipher cipher;
            String encryptedString;
            byte[] encryptText = null;
            byte[] raw;
            SecretKeySpec skeySpec;
            try {
                raw = Base64.decodeBase64(secretKey);
                skeySpec = new SecretKeySpec(raw, ""AES"");
                encryptText = Base64.decodeBase64(text);
                cipher = Cipher.getInstance(""AES"");
                cipher.init(Cipher.DECRYPT_MODE, skeySpec);
                encryptedString = new String(cipher.doFinal(encryptText));
            } catch (Exception e) {
                e.printStackTrace();
                return ""Error"";
            }
            return encryptedString;
        }

        public static void main(String[] args) {
            String secretKey = ""XMzDdG4D03CKm2IxIWQw7g=="";
            String value1= ""ABCD"";
            String enctypedValue1= ""3uweh4pzoVyH1uODQmVNJA=="";
            String enctypedValue2= ""37PTC20w4DMZYjG3f+GWepSvAbEJUccMXwS/lXilLav1qM/PrCTdontw5/82OdC1zzyhDEsFVRGo rV6gXAQcm+Zai15hliiUQ8l8KRMtUl4="";
            String value4= ""20000"";

            /**  Ecnryption and decryption of value1 **/
            String encryptedValue1= symmetricEncrypt(value1, secretKey);
            String decryptedValue1 = symmetricDecrypt(encryptedValue1, secretKey);
            System.out.println(decryptedValue1);

            /**  Decryption of  enctypedValue1 **/
            String decryptedValue2 = symmetricDecrypt(enctypedValue1, secretKey);
            System.out.println(decryptedValue2);

            /**  Decryption of  enctypedValue2 **/
            String decryptedValue3 = symmetricDecrypt(enctypedValue2, secretKey);
            System.out.println(decryptedValue3);

            /**  Ecnryption and decryption of value4 **/
            String encryptedValue4= symmetricEncrypt(value4, secretKey);
            String decryptedValue4 = symmetricDecrypt(encryptedValue4, secretKey);
            System.out.println(decryptedValue4);
        }
    }
</code></pre>
","37804","<java><security><encryption-symmetric>","7","11","1","2017-02-11 12:49:46","17587813","5","4","1075247","","2016-09-21 14:08:41","2013-07-10 10:13:10",""
"748622","Differences Between Rijndael and AES","<p>I'm investigating encryption algorithms - can someone give me a quick rundown of the differences between Rijndael and AES?</p>
","<p>AES is a United States federal standard, <a href=""http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf"" rel=""noreferrer"">FIPS 197</a>, which is a subset of <a href=""http://web.archive.org/web/20070711123800/http://csrc.nist.gov/CryptoToolkit/aes/rijndael/Rijndael-ammended.pdf"" rel=""noreferrer"">Rijndael</a>:</p>

<blockquote>
  <p>AES has a fixed block size of 128 bits and a key size of 128, 192, or 256 bits, whereas Rijndael can be specified with block and key sizes in any multiple of 32 bits, with a minimum of 128 bits and a maximum of 256 bits.</p>
</blockquote>

<p>From <a href=""http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""noreferrer"">Advanced Encryption Standard on Wikipedia</a>.</p>
","35433","<security><encryption><encryption-symmetric>","35","47","4","2017-02-03 15:34:55","748645","0","7","811","","2009-04-14 17:39:53","2009-04-14 17:33:10",""
"748622","Differences Between Rijndael and AES","<p>I'm investigating encryption algorithms - can someone give me a quick rundown of the differences between Rijndael and AES?</p>
","<p>Actually in the crisis of 3DES(Triple Data Encryption Standard) NIST decided to establish a new standard. AES is the standard actually taken by the algorithm based on Rijndael algo which is nothing but the combination of two research scientists name Dr. Rijmen and Dr. Daemen according to the algo they fixed the size of the block length to 128bits and the key size also 128 or 256 bit. Later at standardization it is mentioned in Advanced Encryption Technique (AES) that the symmetric block cipher with 128 bits can support 128,192 and 256 bits or 16,24 and 32 byte</p>
","35433","<security><encryption><encryption-symmetric>","35","5","4","2017-02-03 15:34:55","748645","0","7","811","","2009-04-14 17:39:53","2009-04-14 17:33:10",""
"748622","Differences Between Rijndael and AES","<p>I'm investigating encryption algorithms - can someone give me a quick rundown of the differences between Rijndael and AES?</p>
","<p>Strictly speaking, the Advanced Encryption Standard (AES) is not an algorithm. <strong>AES is a specification</strong> defined by the National Institute of Standards &amp; Technology of the United States (NIST). AES is the successor of the Data Encryption Standard (DES). </p>

<p>AES has been announced in FIPS PUB 197 on November 26, 2001. Federal Information Processing Standards Publications (FIPS PUB) are issued by NIST after approval by the US Secretary of Commerce. </p>

<p><strong>Rijndael is a symmetric key encryption algorithm</strong> created by Joan Daemen and Vincent Rijmen. It is a block cipher, with variable block size, variable key length &amp; variable round number. Block length and key length can be independently specified to any multiple of 32 bits from 128 bits to 256 bits. </p>

<p>The Rijndael cipher as been selected as the Advanced Encryption Standard (AES).</p>

<p>In the Rijndael AES variant the block size is restricted to 128 bits and key length to 128, 192 or 256 bits only.</p>

<ul>
<li><a href=""http://csrc.nist.gov/archive/aes/rijndael/Rijndael-ammended.pdf"" rel=""noreferrer"">NIST document on naming for
AES/Rijndael</a></li>
<li><a href=""http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf"" rel=""noreferrer"">NIST FIPS PUB
197</a></li>
</ul>
","35433","<security><encryption><encryption-symmetric>","35","36","4","2017-02-03 15:34:55","748645","0","7","811","","2009-04-14 17:39:53","2009-04-14 17:33:10",""
"748622","Differences Between Rijndael and AES","<p>I'm investigating encryption algorithms - can someone give me a quick rundown of the differences between Rijndael and AES?</p>
","<p>AES is a reduced version of Rijndael where it is only defined for block sizes of 128 bit whereas Rijndael is defined for block sizes of 128, 192 and 256 bit. If a different block size between encryption and decryption is used, then it is not possible to recover the original plaintext. </p>

<p>Rijndael-256 and Rijndael-192 must be seen as completely different algorithms from AES (Rijndael-128). They are inherently incompatible.</p>
","35433","<security><encryption><encryption-symmetric>","35","1","4","2017-02-03 15:34:55","748645","0","7","811","","2009-04-14 17:39:53","2009-04-14 17:33:10",""
"4128939","Simple Encryption in Ruby without external gems","<p>I need a simple encryption for some text strings. I want to create coupon codes and make them look cool so subsequently created code should look very different. (And besides looking cool, it shouldn't be easy to guess a code.) But I want to be able to decrypt them again. So the algorithm must be reversible.</p>

<p>I alread tried some stuff with moving bits around so they look kind of random already. But two subsequent codes (just one bit different) of course look very similar.</p>

<p>Any suggestions? I would like to do that without using external gems.</p>

<p>Philip</p>
","<p>I can recommend you uuencode and uudecode utils
you can use them wuth standart ruby function pack:</p>

<pre><code>str = ""\007\007\002\abcde""
new_string = [str].pack(""u"")
original = new_string.unpack(""u"")
</code></pre>

<p>(sample from Hal Fulton's Ruby Way)</p>
","27006","<ruby><encryption><encryption-symmetric>","22","3","9","2019-07-16 18:39:53","4173634","1","10","","","","2010-11-08 22:52:55",""
"4128939","Simple Encryption in Ruby without external gems","<p>I need a simple encryption for some text strings. I want to create coupon codes and make them look cool so subsequently created code should look very different. (And besides looking cool, it shouldn't be easy to guess a code.) But I want to be able to decrypt them again. So the algorithm must be reversible.</p>

<p>I alread tried some stuff with moving bits around so they look kind of random already. But two subsequent codes (just one bit different) of course look very similar.</p>

<p>Any suggestions? I would like to do that without using external gems.</p>

<p>Philip</p>
","<p>You could use OpenSSL::Cypher</p>

<pre><code># for more info, see http://ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/OpenSSL/Cipher.html

require 'openssl'
require 'digest/sha1'

# create the cipher for encrypting
cipher = OpenSSL::Cipher::Cipher.new(""aes-256-cbc"")
cipher.encrypt

# you will need to store these for later, in order to decrypt your data
key = Digest::SHA1.hexdigest(""yourpass"")
iv = cipher.random_iv

# load them into the cipher
cipher.key = key
cipher.iv = iv

# encrypt the message
encrypted = cipher.update('This is a secure message, meet at the clock-tower at dawn.')
encrypted &lt;&lt; cipher.final
puts ""encrypted: #{encrypted}\n""

# now we create a sipher for decrypting
cipher = OpenSSL::Cipher::Cipher.new(""aes-256-cbc"")
cipher.decrypt
cipher.key = key
cipher.iv = iv

# and decrypt it
decrypted = cipher.update(encrypted)
decrypted &lt;&lt; cipher.final
puts ""decrypted: #{decrypted}\n""
</code></pre>

<p>But the intermediate form doesn't lend itself well to printing</p>

<hr>

<p>Given your thought that it would be nice if the intermediate form was the same length, you might just use a simple map of one char to another.</p>

<h1><strong>PLEASE UNDERSTAND THAT THIS IS NOT SECURE</strong></h1>

<p>You can <em>easily</em> brute force the key, but it seems to be congruent with your requirements.</p>

<pre><code>class Cipher

  def initialize(shuffled)
    normal = ('a'..'z').to_a + ('A'..'Z').to_a + ('0'..'9').to_a + [' ']
    @map = normal.zip(shuffled).inject(:encrypt =&gt; {} , :decrypt =&gt; {}) do |hash,(a,b)|
      hash[:encrypt][a] = b
      hash[:decrypt][b] = a
      hash
    end
  end

  def encrypt(str)
    str.split(//).map { |char| @map[:encrypt][char] }.join
  end

  def decrypt(str)
    str.split(//).map { |char| @map[:decrypt][char] }.join
  end

end

# pass the shuffled version to the cipher
cipher = Cipher.new [""K"", ""D"", ""w"", ""X"", ""H"", ""3"", ""e"", ""1"", ""S"", ""B"", ""g"", ""a"", ""y"", ""v"", ""I"", ""6"", ""u"", ""W"", ""C"", ""0"", ""9"", ""b"", ""z"", ""T"", ""A"", ""q"", ""U"", ""4"", ""O"", ""o"", ""E"", ""N"", ""r"", ""n"", ""m"", ""d"", ""k"", ""x"", ""P"", ""t"", ""R"", ""s"", ""J"", ""L"", ""f"", ""h"", ""Z"", ""j"", ""Y"", ""5"", ""7"", ""l"", ""p"", ""c"", ""2"", ""8"", ""M"", ""V"", ""G"", ""i"", "" "", ""Q"", ""F""]

msg = ""howdy pardner""

crypted = cipher.encrypt msg
crypted # =&gt; ""1IzXAF6KWXvHW""

decrypted = cipher.decrypt crypted
decrypted # =&gt; ""howdy pardner""
</code></pre>
","27006","<ruby><encryption><encryption-symmetric>","22","45","9","2019-07-16 18:39:53","4173634","1","10","","","","2010-11-08 22:52:55",""
"4128939","Simple Encryption in Ruby without external gems","<p>I need a simple encryption for some text strings. I want to create coupon codes and make them look cool so subsequently created code should look very different. (And besides looking cool, it shouldn't be easy to guess a code.) But I want to be able to decrypt them again. So the algorithm must be reversible.</p>

<p>I alread tried some stuff with moving bits around so they look kind of random already. But two subsequent codes (just one bit different) of course look very similar.</p>

<p>Any suggestions? I would like to do that without using external gems.</p>

<p>Philip</p>
","<p>Do you really want to trust the user to give you back the right value? If you trust what the client gives you back and the user figures out your encryption scheme you'll be using data they provide. That sounds like a very bad idea. </p>

<p>It's not clear to me why you don't want to give them a key into a database that maps a random numbers, perhaps with some error correction properties, to the coupon discounts. That way you have control of the final result. They provide you a key, you look up the associated coupon and apply the coupon. In this way you're only using your own data and if you want to remove a coupon it's all on the server side. </p>

<p>If you keep all the key-codes you can also check that new codes are different from previously released ones. </p>
","27006","<ruby><encryption><encryption-symmetric>","22","2","9","2019-07-16 18:39:53","4173634","1","10","","","","2010-11-08 22:52:55",""
"4128939","Simple Encryption in Ruby without external gems","<p>I need a simple encryption for some text strings. I want to create coupon codes and make them look cool so subsequently created code should look very different. (And besides looking cool, it shouldn't be easy to guess a code.) But I want to be able to decrypt them again. So the algorithm must be reversible.</p>

<p>I alread tried some stuff with moving bits around so they look kind of random already. But two subsequent codes (just one bit different) of course look very similar.</p>

<p>Any suggestions? I would like to do that without using external gems.</p>

<p>Philip</p>
","<p>The solution is kind of from scratch but based on this: <a href=""https://math.stackexchange.com/questions/9508/looking-for-a-bijective-discrete-function-that-behaves-as-chaotically-as-possib"">https://math.stackexchange.com/questions/9508/looking-for-a-bijective-discrete-function-that-behaves-as-chaotically-as-possib</a></p>

<p>The simplest way presented is using <code>a * x + b (mod 2^n)</code></p>

<p>Obviously this is no real encryption and really only useful if you want to create sequential coupon codes without using much code.</p>

<p>So to implement this, you first need to pick a, b and n. (a must be odd) For example <code>a=17</code>, <code>b=37</code> and <code>n=27</code>. Also we need to find ""<code>a^(-1)</code>"" on ""mod 2^n"". It's possible to do this on <a href=""https://www.wolframalpha.com"" rel=""nofollow noreferrer"">https://www.wolframalpha.com</a> using the ExtendedGcd function:</p>

<p><a href=""https://i.stack.imgur.com/mHAQK.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/mHAQK.png"" alt=""enter image description here""></a></p>

<p>So the inverse of <code>a</code> is therefore <code>15790321</code>. Putting all this together:</p>

<pre><code>A=17
B=37
A_INV=15790321

def encrypt(x)
  (A*x+B)%(2**27)
end

def decrypt(y)
  ((y-B)*A_INV)%(2**27)
end
</code></pre>

<p>And now you can do:</p>

<pre><code>irb(main):038:0&gt; encrypt(4)
=&gt; 105
irb(main):039:0&gt; decrypt(105)
=&gt; 4
</code></pre>

<p>Obviously we want the coupon codes to look cool. So 2 extra things are needed: start the sequence at 4000 or so, so the codes are longer. Also convert them into something alpha-numeric, that's also an easy one with Ruby:</p>

<pre><code>irb(main):050:0&gt; decrypt(""1ghx"".to_i(36))
=&gt; 4000
irb(main):051:0&gt; encrypt(4000).to_s(36)
=&gt; ""1ghx""
</code></pre>

<p>One nice additional property is that consecutive numbers are different enough that guessing is practically impossible. Of course we assume that the users are not crypto analysts and if someone indeed guesses a valid number, it's not the end of the world: :-)</p>

<pre><code>irb(main):053:0&gt; encrypt(4001).to_s(36)
=&gt; ""1gie""
irb(main):054:0&gt; decrypt(""1gie"".to_i(36))
=&gt; 4001
</code></pre>

<p>Let's try to naively ""hack"" it by counting from <code>1gie</code> to <code>1gif</code>:</p>

<pre><code>irb(main):059:0* decrypt(""1gif"".to_i(36))
=&gt; 15794322
</code></pre>

<p>That's completely out of range, there are just 2000 or so coupons anyways - not a million. :-) Also if I remember correctly one can experiment a bit with the parameters, so subsequent numbers look more chaotic.</p>

<p>(Pick a larger <code>n</code> for longer codes and vice-versa. Base <code>36</code> means <code>6</code> bits are needed for each character (""<code>Math.log(36, 2)</code>""). So <code>n=27</code> allows for up to 5 characters.)</p>
","27006","<ruby><encryption><encryption-symmetric>","22","2","9","2019-07-16 18:39:53","4173634","1","10","","","","2010-11-08 22:52:55",""
"4128939","Simple Encryption in Ruby without external gems","<p>I need a simple encryption for some text strings. I want to create coupon codes and make them look cool so subsequently created code should look very different. (And besides looking cool, it shouldn't be easy to guess a code.) But I want to be able to decrypt them again. So the algorithm must be reversible.</p>

<p>I alread tried some stuff with moving bits around so they look kind of random already. But two subsequent codes (just one bit different) of course look very similar.</p>

<p>Any suggestions? I would like to do that without using external gems.</p>

<p>Philip</p>
","<p>If you don't need real encryption, you can use a simple cipher. (This can be used when you don't need security, or to encrypt short random/one-off strings.)</p>

<pre><code>ALPHABET = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789""

#generated with ALPHABET.split('').shuffle.join
ENCODING = ""MOhqm0PnycUZeLdK8YvDCgNfb7FJtiHT52BrxoAkas9RWlXpEujSGI64VzQ31w""

def encode(text)
  text.tr(ALPHABET, ENCODING)
end

def decode(text)
  text.tr(ENCODING, ALPHABET)
end
</code></pre>
","27006","<ruby><encryption><encryption-symmetric>","22","17","9","2019-07-16 18:39:53","4173634","1","10","","","","2010-11-08 22:52:55",""
"4128939","Simple Encryption in Ruby without external gems","<p>I need a simple encryption for some text strings. I want to create coupon codes and make them look cool so subsequently created code should look very different. (And besides looking cool, it shouldn't be easy to guess a code.) But I want to be able to decrypt them again. So the algorithm must be reversible.</p>

<p>I alread tried some stuff with moving bits around so they look kind of random already. But two subsequent codes (just one bit different) of course look very similar.</p>

<p>Any suggestions? I would like to do that without using external gems.</p>

<p>Philip</p>
","<p>For basic encoding/decode purpose I guess ruby's inbuilt Base64 library can be handy:</p>

<pre><code>2.2.1 :001 &gt; require 'base64'
 =&gt; true 
2.2.1 :002 &gt; str = ""abc@example.com""
 =&gt; ""abc@example.com"" 
2.2.1 :003 &gt; Base64.encode64(str)
 =&gt; ""YWJjQGV4YW1wbGUuY29t\n"" 
</code></pre>

<p>It also has the <em>urlsafe</em> version methods in case the encoded strings are to be used in urls.</p>

<p>Reference: <a href=""http://ruby-doc.org/stdlib-2.3.0/libdoc/base64/rdoc/Base64.html"" rel=""noreferrer"">http://ruby-doc.org/stdlib-2.3.0/libdoc/base64/rdoc/Base64.html</a></p>
","27006","<ruby><encryption><encryption-symmetric>","22","8","9","2019-07-16 18:39:53","4173634","1","10","","","","2010-11-08 22:52:55",""
"4128939","Simple Encryption in Ruby without external gems","<p>I need a simple encryption for some text strings. I want to create coupon codes and make them look cool so subsequently created code should look very different. (And besides looking cool, it shouldn't be easy to guess a code.) But I want to be able to decrypt them again. So the algorithm must be reversible.</p>

<p>I alread tried some stuff with moving bits around so they look kind of random already. But two subsequent codes (just one bit different) of course look very similar.</p>

<p>Any suggestions? I would like to do that without using external gems.</p>

<p>Philip</p>
","<p>You can check all different ways of encryption/decryption using ruby in this gist: <a href=""https://gist.github.com/iufuenza/183a45c601a5c157a5372c5f1cfb9e3e"" rel=""nofollow noreferrer"">https://gist.github.com/iufuenza/183a45c601a5c157a5372c5f1cfb9e3e</a></p>

<p>If you don't want to use a gem, I would totally recommend Openssl as the most secure which is also very easy to implement as it has very good Ruby support.</p>
","27006","<ruby><encryption><encryption-symmetric>","22","1","9","2019-07-16 18:39:53","4173634","1","10","","","","2010-11-08 22:52:55",""
"4128939","Simple Encryption in Ruby without external gems","<p>I need a simple encryption for some text strings. I want to create coupon codes and make them look cool so subsequently created code should look very different. (And besides looking cool, it shouldn't be easy to guess a code.) But I want to be able to decrypt them again. So the algorithm must be reversible.</p>

<p>I alread tried some stuff with moving bits around so they look kind of random already. But two subsequent codes (just one bit different) of course look very similar.</p>

<p>Any suggestions? I would like to do that without using external gems.</p>

<p>Philip</p>
","<p>Optional method for encryption and decryption</p>

<pre><code>gem 'activesupport'

require 'active_support'

key = SecureRandom.random_bytes(32)
crypt = ActiveSupport::MessageEncryptor.new(key)
encrypted_data = crypt.encrypt_and_sign(""your password"")
password = crypt.decrypt_and_verify(encrypted_data)
</code></pre>
","27006","<ruby><encryption><encryption-symmetric>","22","7","9","2019-07-16 18:39:53","4173634","1","10","","","","2010-11-08 22:52:55",""
"4128939","Simple Encryption in Ruby without external gems","<p>I need a simple encryption for some text strings. I want to create coupon codes and make them look cool so subsequently created code should look very different. (And besides looking cool, it shouldn't be easy to guess a code.) But I want to be able to decrypt them again. So the algorithm must be reversible.</p>

<p>I alread tried some stuff with moving bits around so they look kind of random already. But two subsequent codes (just one bit different) of course look very similar.</p>

<p>Any suggestions? I would like to do that without using external gems.</p>

<p>Philip</p>
","<p>I know that you are looking for a no-gem encryption, but still want to offer to those who are here and don't worry about using external gems. Try <a href=""https://github.com/yegor256/glogin"" rel=""nofollow noreferrer""><code>glogin</code></a> (I'm the author):</p>

<pre><code>require 'glogin/codec'
codec = GLogin:Codec.new('the secret')
encrypted = codec.encrypt('Hello, world!')
decrypted = codec.decrypt(encrypted)
</code></pre>

<p>It's based on OpenSSL and Base58.</p>
","27006","<ruby><encryption><encryption-symmetric>","22","0","9","2019-07-16 18:39:53","4173634","1","10","","","","2010-11-08 22:52:55",""
"14411975","Simple code to encrypt an .INI file string using a password","<p>I am looking for something more sophisticated than ROT13, but which does not require a library (preferablly not even a unit, just a drop in function).</p>

<p>I want to symetrically encrypt/decrypt a given string with a password provided by the user. However, the result has to be a string, in the sense that it I have to be able to store it in an .INI file.</p>

<p>Does anyone have a simple function to do this (delphi XE2)? Google is not my friend today.</p>

<p>Thanks in advance</p>

<hr>

<p>[Update] / [Bounty] Just to make it clear (aplogies if it was not so originally), I don't want a hash. I have a list box where users can add/modiy/delete entries. I want to store those in an .INI file when the program closes and reload when it starts again. Anyone looking at the .INI file (for instance, opening it in Notepad) should not be able to read those strings.</p>

<p>I suppose that I could just stream the compnent as binary, but for eace of mind I would rather encrypt the strings using a user provided password. For the purpose of this applciation it does not matter if .INI file section names or keyte values are human readable, I just want to encrypt the data, giving me something list this when stored on disk:</p>

<pre><code>[config]
numEntries=3

[listbox]
0=ywevdyuvewfcyuw
1=edw
2=hr4uifareiuf
</code></pre>
","<p>I use <strong><a href=""http://code.google.com/p/delphidec/"">Delphi Encryption Compendium</a></strong> which has wonderful functions for both hash and symmetric encryption/decryption.
It is divided into units, but doesn't require any external libraries, and is pretty fast.</p>

<p>Here's how I use it in my code:</p>

<pre><code>function Encrypt(const AStr: string): string;
begin
  Result := AStr;
  with TCipher_Gost.Create do
    try
      Init(THash_SHA1.KDFx('Encryption Key', '', Context.KeySize));
      Result := EncodeBinary(Result, TFormat_HEX);
    finally
      Free;
    end;
end;

function Decrypt(const AStr: string): string;
begin
  Result := AStr;
  with TCipher_Gost.Create do
    try
      Init(THash_SHA1.KDFx('Encryption Key', '', Context.KeySize));
      Result := DecodeBinary(Result, TFormat_HEX);
    finally
      Free;
    end;
end;
</code></pre>

<p>You can use any of the <code>TCipher_*</code> classes instead of GOST.</p>
","22841","<delphi><delphi-xe2><encryption-symmetric>","10","7","5","2013-01-24 17:01:29","14456255","11","5","192910","","2013-01-22 01:41:04","2013-01-19 07:03:07",""
"14411975","Simple code to encrypt an .INI file string using a password","<p>I am looking for something more sophisticated than ROT13, but which does not require a library (preferablly not even a unit, just a drop in function).</p>

<p>I want to symetrically encrypt/decrypt a given string with a password provided by the user. However, the result has to be a string, in the sense that it I have to be able to store it in an .INI file.</p>

<p>Does anyone have a simple function to do this (delphi XE2)? Google is not my friend today.</p>

<p>Thanks in advance</p>

<hr>

<p>[Update] / [Bounty] Just to make it clear (aplogies if it was not so originally), I don't want a hash. I have a list box where users can add/modiy/delete entries. I want to store those in an .INI file when the program closes and reload when it starts again. Anyone looking at the .INI file (for instance, opening it in Notepad) should not be able to read those strings.</p>

<p>I suppose that I could just stream the compnent as binary, but for eace of mind I would rather encrypt the strings using a user provided password. For the purpose of this applciation it does not matter if .INI file section names or keyte values are human readable, I just want to encrypt the data, giving me something list this when stored on disk:</p>

<pre><code>[config]
numEntries=3

[listbox]
0=ywevdyuvewfcyuw
1=edw
2=hr4uifareiuf
</code></pre>
","<p>The base64 is very good encoder and have string result and standard :</p>

<pre><code>{**************************************************************}
{                  Base 64 - by David Barton                   }
{--------------------------------------------------------------}

 const
  B64: array[0..63] of byte= (65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
    81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,
    109,110,111,112,113,114,115,116,117,118,119,120,121,122,48,49,50,51,52,53,
    54,55,56,57,43,47);

function B64Encode(pInput: pointer; pOutput: pointer; Size: longint): longint;
var
  i, iptr, optr: integer;
  Input, Output: PByteArray;
begin
  Input:= PByteArray(pInput); Output:= PByteArray(pOutput);
  iptr:= 0; optr:= 0;
  for i:= 1 to (Size div 3) do
  begin
    Output^[optr+0]:= B64[Input^[iptr] shr 2];
    Output^[optr+1]:= B64[((Input^[iptr] and 3) shl 4) + (Input^[iptr+1] shr 4)];
    Output^[optr+2]:= B64[((Input^[iptr+1] and 15) shl 2) + (Input^[iptr+2] shr 6)];
    Output^[optr+3]:= B64[Input^[iptr+2] and 63];
    Inc(optr,4); Inc(iptr,3);
  end;
  case (Size mod 3) of
    1: begin
         Output^[optr+0]:= B64[Input^[iptr] shr 2];
         Output^[optr+1]:= B64[(Input^[iptr] and 3) shl 4];
         Output^[optr+2]:= byte('=');
         Output^[optr+3]:= byte('=');
       end;
    2: begin
         Output^[optr+0]:= B64[Input^[iptr] shr 2];
         Output^[optr+1]:= B64[((Input^[iptr] and 3) shl 4) + (Input^[iptr+1] shr 4)];
         Output^[optr+2]:= B64[(Input^[iptr+1] and 15) shl 2];
         Output^[optr+3]:= byte('=');
       end;
  end;
  Result:= ((Size+2) div 3) * 4;
end;


function Base64Encode(const Value: AnsiString): AnsiString;
begin
  SetLength(Result,((Length(Value)+2) div 3) * 4);
  B64Encode(@Value[1],@Result[1],Length(Value));
end;


function B64Decode(pInput: pointer; pOutput: pointer; Size: longint): longint;
var
  i, j, iptr, optr: integer;
  Temp: array[0..3] of byte;
  Input, Output: PByteArray;
begin
  Input:= PByteArray(pInput); Output:= PByteArray(pOutput);
  iptr:= 0; optr:= 0;
  Result:= 0;
  for i:= 1 to (Size div 4) do
  begin
    for j:= 0 to 3 do
    begin
      case Input^[iptr] of
        65..90 : Temp[j]:= Input^[iptr] - Ord('A');
        97..122: Temp[j]:= Input^[iptr] - Ord('a') + 26;
        48..57 : Temp[j]:= Input^[iptr] - Ord('0') + 52;
        43     : Temp[j]:= 62;
        47     : Temp[j]:= 63;
        61     : Temp[j]:= $FF;
      end;
      Inc(iptr);
    end;
    Output^[optr]:= (Temp[0] shl 2) or (Temp[1] shr 4);
    Result:= optr+1;
    if (Temp[2]&lt;&gt; $FF) and (Temp[3]= $FF) then
    begin
      Output^[optr+1]:= (Temp[1] shl 4) or (Temp[2] shr 2);
      Result:= optr+2;
      Inc(optr)
    end
    else if (Temp[2]&lt;&gt; $FF) then
    begin
      Output^[optr+1]:= (Temp[1] shl 4) or (Temp[2] shr 2);
      Output^[optr+2]:= (Temp[2] shl 6) or  Temp[3];
      Result:= optr+3;
      Inc(optr,2);
    end;
    Inc(optr);
  end;
end;

function Base64Decode(const Value: AnsiString): AnsiString;
begin
  SetLength(Result,(Length(Value) div 4) * 3);
  SetLength(Result,B64Decode(@Value[1],@Result[1],Length(Value)));
end;
</code></pre>

<p>You can use with this sample :</p>

<p>encode :</p>

<pre><code>procedure TForm1.btn1Click(Sender: TObject);
begin
  edt1.Text := Base64Encode(edt1.Text)  ;
end;
</code></pre>

<p>decode:</p>

<pre><code>procedure TForm1.btn1Click(Sender: TObject);
begin
  edt1.Text := Base64Decode(edt1.Text)  ;
end;
</code></pre>
","22841","<delphi><delphi-xe2><encryption-symmetric>","10","1","5","2013-01-24 17:01:29","14456255","11","5","192910","","2013-01-22 01:41:04","2013-01-19 07:03:07",""
"14411975","Simple code to encrypt an .INI file string using a password","<p>I am looking for something more sophisticated than ROT13, but which does not require a library (preferablly not even a unit, just a drop in function).</p>

<p>I want to symetrically encrypt/decrypt a given string with a password provided by the user. However, the result has to be a string, in the sense that it I have to be able to store it in an .INI file.</p>

<p>Does anyone have a simple function to do this (delphi XE2)? Google is not my friend today.</p>

<p>Thanks in advance</p>

<hr>

<p>[Update] / [Bounty] Just to make it clear (aplogies if it was not so originally), I don't want a hash. I have a list box where users can add/modiy/delete entries. I want to store those in an .INI file when the program closes and reload when it starts again. Anyone looking at the .INI file (for instance, opening it in Notepad) should not be able to read those strings.</p>

<p>I suppose that I could just stream the compnent as binary, but for eace of mind I would rather encrypt the strings using a user provided password. For the purpose of this applciation it does not matter if .INI file section names or keyte values are human readable, I just want to encrypt the data, giving me something list this when stored on disk:</p>

<pre><code>[config]
numEntries=3

[listbox]
0=ywevdyuvewfcyuw
1=edw
2=hr4uifareiuf
</code></pre>
","<h1>Disclaimer</h1>

<p>The encryption algorithm used in this answer is very basic and can be easily broken by any individual with medium to high skills in cryptography. It is used in the solution because the OP is asking for a simple symmetric solution without requiring any library.</p>

<h1>Principle</h1>

<p>The solution is based on the <a href=""http://en.wikipedia.org/wiki/XOR_cipher"">XOR cipher</a>. From the Wikipedia: </p>

<blockquote>
  <p>In cryptography, the simple XOR cipher is a type of additive cipher, an encryption algorithm that operates according to the principles:</p>
  
  <p>A X 0 = A,</p>
  
  <p>A X A = 0,</p>
  
  <p>(A X B) X C = A X (B X C),</p>
  
  <p>(B X A) X A = B X 0 = B,</p>
  
  <p>where X denotes the XOR operation.</p>
</blockquote>

<h1>Pieces of the puzzle</h1>

<p>My proposed solution is based in this basic routine:</p>

<pre><code>function XorCipher(const Key, Source: TBytes): TBytes;
var
  I: Integer;
begin
  if Length(Key) = 0 then
    Exit(Source);
  SetLength(Result, Length(Source));
  for I := Low(Source) to High(Source) do
    Result[I] := Key[I mod Length(Key)] xor Source[I];
end;
</code></pre>

<p>The routine accepts a key and the source data as an array of bytes, and returns the resulting XORed array of bytes. The same routine functions to encrypt and to decrypt information, given the same key is used in both operations. To encrypt, the source is the plain data, and to decrypt, the source is the encrypted data.</p>

<p>I made two auxiliary routines to allow storing the result as a string. One to convert an array of bytes to a textual sequence of hexadecimal numbers, and the other to perform the reverse conversion:</p>

<pre><code>function BytesToStr(const Bytes: TBytes): string;
var
  I: Integer;
begin
  Result := '';
  for I := Low(Bytes) to High(Bytes) do
    Result := Result + LowerCase(IntToHex(Bytes[I], 2));
end;

function StrToBytes(const value: string): TBytes;
var
  I: Integer;
begin
  SetLength(Result, Length(value) div 2);
  for I := Low(Result) to High(Result) do
    Result[I] := StrToIntDef('$' + Copy(value, (I * 2) + 1, 2), 0);
end;
</code></pre>

<p>With this foundations, you can build all of what you need. For convenience and test my code, I created some other routines, for example:</p>

<ul>
<li><p>this one to store the key inside the exe and get it as a TBytes value</p>

<pre><code>function GetKey: TBytes;
begin
  Result := TArray&lt;Byte&gt;.Create(
     $07, $14, $47, $A0, $F4, $F7, $FF, $48, $21, $32
   , $AF, $87, $09, $8E, $B3, $C0, $7D, $54, $45, $87
   , $8A, $A8, $23, $32, $00, $56, $11, $1D, $98, $FA
  );
end;
</code></pre>

<p>you can provide a key of any length, since it rolls to encrypt the data inside XorCipher routine.</p></li>
<li><p>this one to properly encode a given string using that key:</p>

<pre><code>function XorEncodeStr(const Source: string): string; overload;
var
  BSource: TBytes;
begin
  SetLength(BSource, Length(Source) * SizeOf(Char));
  Move(Source[1], BSource[0], Length(Source) * SizeOf(Char));
  Result := XorEncodeToStr(GetKey, BSource);
end;
</code></pre></li>
<li><p>this other to properly decode a encoded string to a string</p>

<pre><code>function XorDecodeStr(const Source: string): string; overload;
var
  BResult: TBytes;
begin
  BResult := XorDecodeFromStr(GetKey, source);
  Result := TEncoding.Unicode.GetString( BResult );
end;
</code></pre></li>
</ul>

<h1>Writing the INI file</h1>

<p>With this routines accessible to the place where you write and read your INI file, you can easily write and read it, for example:</p>

<pre><code>procedure TForm1.SaveIni;
var
  Ini: TIniFile;
  I: Integer;
begin
  Ini := TIniFile.Create('.\config.ini');
  try
    Ini.WriteInteger('config', 'NumEntries', ListBox1.Items.Count);
    for I := 0 to ListBox1.Items.Count - 1 do
      Ini.WriteString('listbox', IntToStr(I), XorEncodeStr(listbox1.Items[I]));
  finally
    Ini.Free;
  end;
end;

procedure TForm1.LoadIni;
var
  Ini: TIniFile;
  Max, I: Integer;
begin
  ListBox1.Items.Clear;
  Ini := TIniFile.Create('.\config.ini');
  try
    Max := Ini.ReadInteger('config', 'NumEntries', 0);
    for I := 0 to Max - 1 do
      ListBox1.Items.Add(
        XorDecodeStr(Ini.ReadString('listbox', IntToStr(I), ''))
      );
  finally
    Ini.Free;
  end;
end;
</code></pre>

<p>This is not production ready-code, since it's written only to test the solution, but it is also a starting point for you to make it rock-solid.</p>

<h1>A word of caution</h1>

<p>This is not strong cryptography, so, don't rely on this to store really sensitive information. One weak point is the key is contained inside your exe in plain form. You can work on this, but the main weakens is the algorithm itself. </p>

<p>Take as an example of this issue the following: since you're encoding Unicode Delphi strings in UTF-16 format, the second byte of each character is usually zero (unless you're in the east or a country with a non-latin alphabet), and you will find the exact bytes of the key repeats in your encoded stored strings. You can make this less apparent by not using a plain hexadecimal representation of the encoded data (for example encoding it using base64 as already suggested here).</p>

<p>You can resort to AnsiStrings to avoid revealing this parts of your key, or you can code your key with explicit zero bytes (or other constant byte) in the even positions.</p>

<p>Anything of this will work if the users of your software are not cryptographically educated, but the fact is that anyone with a medium level of knowledge and good skills can get the key by analyzing your data. If the user knows a un-encoded value, it gets easier.</p>
","22841","<delphi><delphi-xe2><encryption-symmetric>","10","11","5","2013-01-24 17:01:29","14456255","11","5","192910","","2013-01-22 01:41:04","2013-01-19 07:03:07",""
"14411975","Simple code to encrypt an .INI file string using a password","<p>I am looking for something more sophisticated than ROT13, but which does not require a library (preferablly not even a unit, just a drop in function).</p>

<p>I want to symetrically encrypt/decrypt a given string with a password provided by the user. However, the result has to be a string, in the sense that it I have to be able to store it in an .INI file.</p>

<p>Does anyone have a simple function to do this (delphi XE2)? Google is not my friend today.</p>

<p>Thanks in advance</p>

<hr>

<p>[Update] / [Bounty] Just to make it clear (aplogies if it was not so originally), I don't want a hash. I have a list box where users can add/modiy/delete entries. I want to store those in an .INI file when the program closes and reload when it starts again. Anyone looking at the .INI file (for instance, opening it in Notepad) should not be able to read those strings.</p>

<p>I suppose that I could just stream the compnent as binary, but for eace of mind I would rather encrypt the strings using a user provided password. For the purpose of this applciation it does not matter if .INI file section names or keyte values are human readable, I just want to encrypt the data, giving me something list this when stored on disk:</p>

<pre><code>[config]
numEntries=3

[listbox]
0=ywevdyuvewfcyuw
1=edw
2=hr4uifareiuf
</code></pre>
","<p>This is a replacement for Tinifile.<br>
ReadString and WriteString are overridden, these are internal used to for Read/WriteFloat, Read/WriteInteger etc. </p>

<p>Strings are encrypted and stored as HEX-Strings.</p>

<p>Demo usage:</p>

<pre><code>uses CryptingIni;
{$R *.dfm}

procedure TForm1.Button1Click(Sender: TObject);
var
 ini:TCryptingIni;
begin
    ini:=TCryptingIni.Create('C:\temp\test.ini');
    ini.UseInternalVersion(1234);
    ini.WriteFloat('Sect','Float',123.456);
    ini.WriteString('Sect2','String','How to encode');
    ini.Free;
end;

procedure TForm1.Button2Click(Sender: TObject);
var
 ini:TCryptingIni;
begin
    ini:=TCryptingIni.Create('C:\temp\test.ini');
    ini.UseInternalVersion(1234);
    Showmessage(FloatToStr(ini.ReadFloat('Sect','Float',0)));
    Showmessage(ini.ReadString('Sect2','String',''));
    Showmessage(ini.ReadString('SectUnkknow','Showdefault','DEFAULT'));
    ini.Free;
end;
</code></pre>

<p>You may use internal encryption method by UseInternalVersion, or provide own procedures with<br>
Procedure SetCryptingData(aEncryptProc, aDecryptProc: CryptingProc; aKey: Word);</p>

<pre><code>unit CryptingIni;

// 2013 by Thomas Wassermann
interface

uses
  Windows, SysUtils, Variants, Classes, inifiles;

type

  CryptingProc = Function(const InString: String; Key: Word): String;

  TCryptingIni = Class(TInifile)
    function ReadString(const Section, Ident, Default: string): string; override;
    procedure WriteString(const Section, Ident, Value: String); override;
  private
    FEncryptProc: CryptingProc;
    FDecryptProc: CryptingProc;
    FKey: Word;
  public
    Procedure SetCryptingData(aEncryptProc, aDecryptProc: CryptingProc; aKey: Word);
    Procedure UseInternalVersion(aKey: Word);
  End;

implementation

const
  c1 = 52845;
  c2 = 22719;

Type
  TByteArray = Array [0 .. 0] of byte;

Function AsHexString(p: Pointer; cnt: Integer): String;
var
  i: Integer;
begin
  Result := '';
  for i := 0 to cnt do
    Result := Result + '$' + IntToHex(TByteArray(p^)[i], 2);
end;

Procedure MoveHexString2Dest(Dest: Pointer; Const HS: String);
var
  i: Integer;
begin
  i := 1;
  while i &lt; Length(HS) do
  begin
    TByteArray(Dest^)[i div 3] := StrToInt(Copy(HS, i, 3));
    i := i + 3;
  end;
end;

function EncryptV1(const s: string; Key: Word): string;
var
  i: smallint;
  ResultStr: string;
  UCS: WIDEString;
begin
  Result := s;
  if Length(s) &gt; 0 then
  begin
    for i := 1 to (Length(s)) do
    begin
      Result[i] := Char(byte(s[i]) xor (Key shr 8));
      Key := (smallint(Result[i]) + Key) * c1 + c2
    end;
    UCS := Result;
    Result := AsHexString(@UCS[1], Length(UCS) * 2 - 1)
  end;
end;

function DecryptV1(const s: string; Key: Word): string;
var
  i: smallint;
  sb: String;
  UCS: WIDEString;
begin
  if Length(s) &gt; 0 then
  begin
    SetLength(UCS, Length(s) div 3 div 2);
    MoveHexString2Dest(@UCS[1], s);
    sb := UCS;
    SetLength(Result, Length(sb));
    for i := 1 to (Length(sb)) do
    begin
      Result[i] := Char(byte(sb[i]) xor (Key shr 8));
      Key := (smallint(sb[i]) + Key) * c1 + c2
    end;
  end
  else
    Result := s;
end;

{ TCryptingIni }

function TCryptingIni.ReadString(const Section, Ident, Default: string): string;
begin
  if Assigned(FEncryptProc) then
    Result := inherited ReadString(Section, Ident, FEncryptProc(Default, FKey))
  else
    Result := inherited ReadString(Section, Ident, Default);
  if Assigned(FDecryptProc) then
    Result := FDecryptProc(Result, FKey);
end;

procedure TCryptingIni.SetCryptingData(aEncryptProc, aDecryptProc: CryptingProc; aKey: Word);
begin
  FEncryptProc := aEncryptProc;
  FDecryptProc := aDecryptProc;
  FKey := aKey;
end;

procedure TCryptingIni.UseInternalVersion(aKey: Word);
begin
  FKey := aKey;
  FEncryptProc := EncryptV1;
  FDecryptProc := DecryptV1;
end;

procedure TCryptingIni.WriteString(const Section, Ident, Value: String);
var
  s: String;
begin
  if Assigned(FEncryptProc) then
    s := FEncryptProc(Value, FKey)
  else
    s := Value;
  inherited WriteString(Section, Ident, s);
end;

end.
</code></pre>
","22841","<delphi><delphi-xe2><encryption-symmetric>","10","10","5","2013-01-24 17:01:29","14456255","11","5","192910","","2013-01-22 01:41:04","2013-01-19 07:03:07",""
"14411975","Simple code to encrypt an .INI file string using a password","<p>I am looking for something more sophisticated than ROT13, but which does not require a library (preferablly not even a unit, just a drop in function).</p>

<p>I want to symetrically encrypt/decrypt a given string with a password provided by the user. However, the result has to be a string, in the sense that it I have to be able to store it in an .INI file.</p>

<p>Does anyone have a simple function to do this (delphi XE2)? Google is not my friend today.</p>

<p>Thanks in advance</p>

<hr>

<p>[Update] / [Bounty] Just to make it clear (aplogies if it was not so originally), I don't want a hash. I have a list box where users can add/modiy/delete entries. I want to store those in an .INI file when the program closes and reload when it starts again. Anyone looking at the .INI file (for instance, opening it in Notepad) should not be able to read those strings.</p>

<p>I suppose that I could just stream the compnent as binary, but for eace of mind I would rather encrypt the strings using a user provided password. For the purpose of this applciation it does not matter if .INI file section names or keyte values are human readable, I just want to encrypt the data, giving me something list this when stored on disk:</p>

<pre><code>[config]
numEntries=3

[listbox]
0=ywevdyuvewfcyuw
1=edw
2=hr4uifareiuf
</code></pre>
","<p>First off, see <a href=""http://www.tek-tips.com/faqs.cfm?fid=7423"" rel=""nofollow"">this link</a> for the wincrypt unit I'm using since I used it here.  </p>

<p>What this does for encryption is take the string that's put into it (you are using INI so it's all single strings anyway, right?), and then runs it through the WinCrypt 3DES based on a password entered in, and then since that produces binary, I run that through Base64.  For decryption, I reverse the process.  An incorrect password produces garbage on decryption, but for the amount that I tested it, it seems to work right as long as the password is right for both steps.  Of course, I may have forgotten to do some cleanup, but if that is the case it can readily be fixed.</p>

<pre><code>function DecryptStringW(instr, pwd: WideString): WideString;
// password based decryption of a string using WinCrypt API, WideString version
  var
    Key: TCryptKey;
    Hash: TCryptHash;
    Prov: TCryptProv;
    DataLen, skip, Flags: DWord;
    DataBuf: Pointer;
    outstr: WideString;
  begin
    CryptAcquireContext(Prov, nil, nil, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);
    CryptCreateHash(Prov, CALG_SHA, nil, 0, hash);
    CryptHashData(hash, @pwd[1], Length(Pwd), 0);
    CryptDeriveKey(Prov, CALG_3DES, hash, 0, key);
    CryptDestroyHash(hash);

    CryptStringToBinaryW(pointer(instr), Length(instr), CRYPT_STRING_BASE64, nil, DataLen, skip, Flags);
    GetMem(databuf, DataLen);
    try
      CryptStringToBinaryW(pointer(instr), Length(instr), CRYPT_STRING_BASE64, DataBuf,
           DataLen, skip, Flags);
      CryptDecrypt(Key, nil, True, 0, DataBuf, Datalen);
      SetLength(outstr, datalen);
      Move(DataBuf^, outstr[1], DataLen);
      CryptReleaseContext(Prov, 0);
      Result := outstr;
    finally
      FreeMem(databuf);
    end;
 end;

 function EncryptStringW(instr, pwd: WideString): WideString;
 // password based encryption of a string, WideString version
   var
    Key: TCryptKey;
    Hash: TCryptHash;
    Prov: TCryptProv;
    DataLen, bufsize: DWord;
    databuf: PByte;
    outstr: WideString;
  begin
    CryptAcquireContext(Prov, nil, nil, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);
    CryptCreateHash(Prov, CALG_SHA, nil, 0, hash);
    CryptHashData(hash, @pwd[1], Length(Pwd), 0);
    CryptDeriveKey(Prov, CALG_3DES, hash, 0, key);
    CryptDestroyHash(hash);
    bufsize := 0;
    DataLen := 0;
    CryptEncrypt(Key, nil, True, 0, nil, bufsize, Length(instr));
    GetMem(databuf, bufsize);
    try
      Move(instr[1], databuf^, Length(instr));
      DataLen := Length(instr);
      CryptEncrypt(Key, nil, True, 0, databuf, DataLen, bufsize);
      CryptReleaseContext(Prov, 0);
      CryptBinaryToStringW(databuf, DataLen, CRYPT_STRING_BASE64 or
              CRYPT_STRING_NOCRLF, nil, bufsize);
      SetLength(outstr, bufsize);
      CryptBinaryToStringW(databuf, DataLen, CRYPT_STRING_BASE64 or
              CRYPT_STRING_NOCRLF, @outstr[1], bufsize);
     // result, kill the three characters after the final one the base64 returns    ($D$A$0)
     // CRYPT_STRING_NOCRLF seems to mean nothing on XP, it might on other systems
     // you will need to change to the commented line if you are on Vista, 7, or 8
      Result := Copy(outstr, 1, Length(outstr) - 3);
     // Result := Outstr;
    finally
      FreeMem(databuf);
    end;
  end;

  function DecryptStringA(instr, pwd: AnsiString): AnsiString;
  // password based decryption of a string using WinCrypt API, ANSI VERSION.
    var
      Key: TCryptKey;
      Hash: TCryptHash;
      Prov: TCryptProv;
      DataLen, skip, Flags: DWord;
      DataBuf: Pointer;
      outstr: AnsiString;
    begin
      CryptAcquireContext(Prov, nil, nil, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);
      CryptCreateHash(Prov, CALG_SHA, nil, 0, hash);
      CryptHashData(hash, @pwd[1], Length(Pwd), 0);
      CryptDeriveKey(Prov, CALG_3DES, hash, 0, key);
      CryptDestroyHash(hash);

      CryptStringToBinaryA(pointer(instr), Length(instr), CRYPT_STRING_BASE64, nil, DataLen, skip, Flags);
      GetMem(databuf, DataLen);
      try
        CryptStringToBinaryA(pointer(instr), Length(instr), CRYPT_STRING_BASE64, DataBuf, DataLen, skip, Flags);
        CryptDecrypt(Key, nil, True, 0, DataBuf, Datalen);
        SetLength(outstr, datalen);
        Move(DataBuf^, outstr[1], DataLen);
        CryptReleaseContext(Prov, 0);
        Result := outstr;
      finally
        FreeMem(databuf);
      end;
   end;

  function EncryptStringA(instr, pwd: AnsiString): AnsiString;
   // password based encryption of a string, ANSI version
    var
      Key: TCryptKey;
      Hash: TCryptHash;
      Prov: TCryptProv;
      DataLen, bufsize: DWord;
      databuf: PByte;
      outstr: AnsiString;
   begin
     CryptAcquireContext(Prov, nil, nil, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);
     CryptCreateHash(Prov, CALG_SHA, nil, 0, hash);
     CryptHashData(hash, @pwd[1], Length(Pwd), 0);
     CryptDeriveKey(Prov, CALG_3DES, hash, 0, key);
     CryptDestroyHash(hash);
     DataLen := 0;
     bufsize := 0;
     CryptEncrypt(Key, nil, True, 0, nil, bufsize, Length(instr));
     GetMem(databuf, bufsize);
     try
       Move(instr[1], databuf^, Length(instr));
       DataLen := Length(instr);
       CryptEncrypt(Key, nil, True, 0, databuf, DataLen, bufsize);
       CryptReleaseContext(Prov, 0);
       CryptBinaryToStringA(databuf, DataLen, CRYPT_STRING_BASE64 or
              CRYPT_STRING_NOCRLF, nil, bufsize);
       SetLength(outstr, bufsize);
       CryptBinaryToStringA(databuf, DataLen, CRYPT_STRING_BASE64 or
              CRYPT_STRING_NOCRLF, @outstr[1], bufsize);
     // result, kill the three characters after the final one the base64 returns    ($D$A$0)
     // CRYPT_STRING_NOCRLF seems to mean nothing on XP, it might on other systems
     // you will need to change to the commented line if you are on Vista, 7, or 8
      Result := Copy(outstr, 1, Length(outstr) - 3);
     // Result := Outstr;
    finally
       FreeMem(databuf);
    end;
  end;
</code></pre>

<p>Quick usage example:</p>

<pre><code> procedure TForm1.Button1Click(Sender: TObject);
   var
     password1: AnsiString;
   begin
     password1 := 'Test1';
     Edit2.Text := EncryptStringA(Edit1.Text, password1);
   end;

 procedure TForm1.Button2Click(Sender: TObject);
   var
     password1: AnsiString;
   begin
     password1 := 'Test1';
     Label1.Caption := DecryptStringA(Edit2.Text, password1);
   end;

 procedure TForm1.Button3Click(Sender: TObject);
   var
     password1: WideString;
   begin
     password1 := 'Test1';
     Edit2.Text := EncryptStringW(Edit1.Text, password1);
   end;

 procedure TForm1.Button4Click(Sender: TObject);
   var
     password1: WideString;
   begin
     password1 := 'Test1';
     Label1.Caption := DecryptStringW(Edit2.Text, password1);
   end;
</code></pre>

<p>Hope it helps out someone.</p>

<p>Using ""Edit1"" as input.  Correct output for encryption ANSI: 3+Pp7o8aErc=   Correct output for encryption WideString: HijzDYgRr/Y= </p>

<p><strong>Edit: I posted WideString versions as well.  I downloaded the XE3 demo to look at and play with.  This code works there as well as Turbo Delphi 2006 and Delphi 3, so if you have difficulty check the line(s) that I put comments on about the Windows XP Base64 implementation not honoring CRYPT_STRING_NOCRLF, because if you are on a Windows that does, the line needs to be changed for this to work right.  Regardless, for the OP's stated intention we DO NOT want $13$10 to appear in the encoded text</strong></p>
","22841","<delphi><delphi-xe2><encryption-symmetric>","10","5","5","2013-01-24 17:01:29","14456255","11","5","192910","","2013-01-22 01:41:04","2013-01-19 07:03:07",""
"2532668","Help me with XOR encryption","<p>I wrote this code in <code>C#</code> to encrypt a string with a key:</p>

<pre><code>private static int Bin2Dec(string num)
{
    int _num = 0;

    for (int i = 0; i &lt; num.Length; i++)
        _num += (int)Math.Pow(2, num.Length - i - 1) * int.Parse(num[i].ToString());

    return _num;
}

private static string Dec2Bin(int num)
{
    if (num &lt; 2) return num.ToString();

    return Dec2Bin(num / 2) + (num % 2).ToString();
}

public static string StrXor(string str, string key)
{
    string _str = """";
    string _key = """";
    string _xorStr = """";
    string _temp = """";

    for (int i = 0; i &lt; str.Length; i++)
    {
        _temp = Dec2Bin(str[i]);    

        for (int j = 0; j &lt; 8 - _temp.Length + 1; j++)
            _temp = '0' + _temp;

        _str += _temp;
    }

    for (int i = 0; i &lt; key.Length; i++)
    {
        _temp = Dec2Bin(key[i]);

        for (int j = 0; j &lt; 8 - _temp.Length + 1; j++)
            _temp = '0' + _temp;

        _key += _temp;
    }    

    while (_key.Length &lt; _str.Length) _key += _key;

    if (_key.Length &gt; _str.Length) _key = _key.Substring(0, _str.Length);

    for (int i = 0; i &lt; _str.Length; i++)
        if (_str[i] == _key[i]) { _xorStr += '0'; } else { _xorStr += '1'; }

    _str = """";

    for (int i = 0; i &lt; _xorStr.Length; i += 8)
    {
        char _chr = (char)0;
        _chr = (char)Bin2Dec(_xorStr.Substring(i, 8)); //ERROR : (Index and length must refer to a location within the string. Parameter name: length)
        _str += _chr;
    }

    return _str;
}
</code></pre>

<p>The problem is that I always get error when I want to decrypt an encryted text with this code:</p>

<pre><code>string enc_text = ENCRYPT.XORENC(""abc"",""a""); // enc_text = "" ♥☻""
string dec_text = ENCRYPT.XORENC(enc_text,""a""); // ArgumentOutOfRangeException
</code></pre>

<p>Any clues?</p>
","<p>If you have a character, a <code>char</code>, you can convert it to an integer, an <code>int</code>.</p>

<p>And then you can use the <code>^</code> operator to perform XOR on it. You don't appear to be using that operator at the moment, which might be the source of your problem.</p>

<pre><code>string EncryptOrDecrypt(string text, string key)
{
    var result = new StringBuilder();

    for (int c = 0; c &lt; text.Length; c++)
        result.Append((char)((uint)text[c] ^ (uint)key[c % key.Length]));

    return result.ToString();
}
</code></pre>

<p>That kind of thing. Here's a longer version with comments that does the same thing in steps, to make it easier to learn from:</p>

<pre><code>string EncryptOrDecrypt(string text, string key)
{
    var result = new StringBuilder();

    for (int c = 0; c &lt; text.Length; c++)
    {
        // take next character from string
        char character = text[c];

        // cast to a uint
        uint charCode = (uint)character;

        // figure out which character to take from the key
        int keyPosition = c % key.Length; // use modulo to ""wrap round""

        // take the key character
        char keyChar = key[keyPosition];

        // cast it to a uint also
        uint keyCode = (uint)keyChar;

        // perform XOR on the two character codes
        uint combinedCode = charCode ^ keyCode;

        // cast back to a char
        char combinedChar = (char)combinedCode;

        // add to the result
        result.Append(combineChar);
    }

    return result.ToString();
}
</code></pre>

<p>The short version is the same but with the intermediate variables removed, substituting expressions directly into where they're used.</p>
","22629","<c#><encryption><encryption-symmetric>","11","48","3","2018-12-20 14:41:34","2532704","5","13","445517","","2013-02-09 15:51:59","2010-03-28 11:13:11",""
"2532668","Help me with XOR encryption","<p>I wrote this code in <code>C#</code> to encrypt a string with a key:</p>

<pre><code>private static int Bin2Dec(string num)
{
    int _num = 0;

    for (int i = 0; i &lt; num.Length; i++)
        _num += (int)Math.Pow(2, num.Length - i - 1) * int.Parse(num[i].ToString());

    return _num;
}

private static string Dec2Bin(int num)
{
    if (num &lt; 2) return num.ToString();

    return Dec2Bin(num / 2) + (num % 2).ToString();
}

public static string StrXor(string str, string key)
{
    string _str = """";
    string _key = """";
    string _xorStr = """";
    string _temp = """";

    for (int i = 0; i &lt; str.Length; i++)
    {
        _temp = Dec2Bin(str[i]);    

        for (int j = 0; j &lt; 8 - _temp.Length + 1; j++)
            _temp = '0' + _temp;

        _str += _temp;
    }

    for (int i = 0; i &lt; key.Length; i++)
    {
        _temp = Dec2Bin(key[i]);

        for (int j = 0; j &lt; 8 - _temp.Length + 1; j++)
            _temp = '0' + _temp;

        _key += _temp;
    }    

    while (_key.Length &lt; _str.Length) _key += _key;

    if (_key.Length &gt; _str.Length) _key = _key.Substring(0, _str.Length);

    for (int i = 0; i &lt; _str.Length; i++)
        if (_str[i] == _key[i]) { _xorStr += '0'; } else { _xorStr += '1'; }

    _str = """";

    for (int i = 0; i &lt; _xorStr.Length; i += 8)
    {
        char _chr = (char)0;
        _chr = (char)Bin2Dec(_xorStr.Substring(i, 8)); //ERROR : (Index and length must refer to a location within the string. Parameter name: length)
        _str += _chr;
    }

    return _str;
}
</code></pre>

<p>The problem is that I always get error when I want to decrypt an encryted text with this code:</p>

<pre><code>string enc_text = ENCRYPT.XORENC(""abc"",""a""); // enc_text = "" ♥☻""
string dec_text = ENCRYPT.XORENC(enc_text,""a""); // ArgumentOutOfRangeException
</code></pre>

<p>Any clues?</p>
","<p>Here is some simple code to encrypt and decrypt</p>

<pre><code>class CEncryption
{
    public static string Encrypt(string strIn, string strKey)
    {
        string sbOut = String.Empty;
        for (int i = 0; i &lt; strIn.Length; i++)
        {
            sbOut += String.Format(""{0:00}"", strIn[i] ^ strKey[i % strKey.Length]);
        }

        return sbOut;
    }

    public static string Decrypt(string strIn, string strKey)
    {
        string sbOut = String.Empty;
        for (int i = 0; i &lt; strIn.Length; i += 2)
        {
            byte code = Convert.ToByte(strIn.Substring(i, 2));
            sbOut += (char)(code ^ strKey[(i/2) % strKey.Length]);
        }

        return sbOut;
    }
 }
</code></pre>
","22629","<c#><encryption><encryption-symmetric>","11","0","3","2018-12-20 14:41:34","2532704","5","13","445517","","2013-02-09 15:51:59","2010-03-28 11:13:11",""
"2532668","Help me with XOR encryption","<p>I wrote this code in <code>C#</code> to encrypt a string with a key:</p>

<pre><code>private static int Bin2Dec(string num)
{
    int _num = 0;

    for (int i = 0; i &lt; num.Length; i++)
        _num += (int)Math.Pow(2, num.Length - i - 1) * int.Parse(num[i].ToString());

    return _num;
}

private static string Dec2Bin(int num)
{
    if (num &lt; 2) return num.ToString();

    return Dec2Bin(num / 2) + (num % 2).ToString();
}

public static string StrXor(string str, string key)
{
    string _str = """";
    string _key = """";
    string _xorStr = """";
    string _temp = """";

    for (int i = 0; i &lt; str.Length; i++)
    {
        _temp = Dec2Bin(str[i]);    

        for (int j = 0; j &lt; 8 - _temp.Length + 1; j++)
            _temp = '0' + _temp;

        _str += _temp;
    }

    for (int i = 0; i &lt; key.Length; i++)
    {
        _temp = Dec2Bin(key[i]);

        for (int j = 0; j &lt; 8 - _temp.Length + 1; j++)
            _temp = '0' + _temp;

        _key += _temp;
    }    

    while (_key.Length &lt; _str.Length) _key += _key;

    if (_key.Length &gt; _str.Length) _key = _key.Substring(0, _str.Length);

    for (int i = 0; i &lt; _str.Length; i++)
        if (_str[i] == _key[i]) { _xorStr += '0'; } else { _xorStr += '1'; }

    _str = """";

    for (int i = 0; i &lt; _xorStr.Length; i += 8)
    {
        char _chr = (char)0;
        _chr = (char)Bin2Dec(_xorStr.Substring(i, 8)); //ERROR : (Index and length must refer to a location within the string. Parameter name: length)
        _str += _chr;
    }

    return _str;
}
</code></pre>

<p>The problem is that I always get error when I want to decrypt an encryted text with this code:</p>

<pre><code>string enc_text = ENCRYPT.XORENC(""abc"",""a""); // enc_text = "" ♥☻""
string dec_text = ENCRYPT.XORENC(enc_text,""a""); // ArgumentOutOfRangeException
</code></pre>

<p>Any clues?</p>
","<pre><code>public static byte[] EncryptOrDecrypt(byte[] text, byte[] key)
{
    byte[] xor = new byte[text.Length];
    for (int i = 0; i &lt; text.Length; i++)
    {
        xor[i] = (byte)(text[i] ^ key[i % key.Length]);
    }
    return xor;
}

static void Main(string[] args){
    string input;
    byte[] inputBytes;

    string inputKey;
    byte[] key;

    do
    {
        input = System.Console.ReadLine();
        inputBytes = Encoding.Unicode.GetBytes(input);

        inputKey = System.Console.ReadLine();
        key = Encoding.Unicode.GetBytes(inputKey);

        //byte[] key = { 0, 0 }; if key is 0, encryption will not happen

        byte[] encryptedBytes = EncryptOrDecrypt(inputBytes, key);
        string encryptedStr = Encoding.Unicode.GetString(encryptedBytes);

        byte[] decryptedBytes = EncryptOrDecrypt(encryptedBytes, key);
        string decryptedStr = Encoding.Unicode.GetString(decryptedBytes);

        System.Console.WriteLine(""Encrypted string:"");
        System.Console.WriteLine(encryptedStr);
        System.Console.WriteLine(""Decrypted string:"");
        System.Console.WriteLine(decryptedStr);

    } while (input != ""-1"" &amp;&amp; inputKey != ""-1"");
    //test:
    //pavle
    //23
    //Encrypted string:
    //BRD_W
    //Decrypted string:
    //pavle
}
</code></pre>
","22629","<c#><encryption><encryption-symmetric>","11","1","3","2018-12-20 14:41:34","2532704","5","13","445517","","2013-02-09 15:51:59","2010-03-28 11:13:11",""
"17195969","generating AES 256 bit key value","<p>Does anyone know of a way to get a 256 bit key value generated from a pass phrase of any length? The encryption cannot be salted as the encrypted values need to be generated again and compared in the database. So a value must generate the same encrypted string each time it is encrypted.</p>

<p>Currently I'm using a 32 char key working on the possibly incorrect assumption this is 256 bits?</p>

<p>So, I would want 'the quick brown fox' to be converted to a suitable AES 256 bit key?</p>
","<p>You can use some hash function that provides 256 bit outuput from input of any length, for example SHA256.</p>
","19940","<c#><hash><aes><encryption-symmetric>","7","-1","6","2019-07-31 06:32:24","17196217","2","2","41071","","2013-06-19 18:25:44","2013-06-19 16:02:50",""
"17195969","generating AES 256 bit key value","<p>Does anyone know of a way to get a 256 bit key value generated from a pass phrase of any length? The encryption cannot be salted as the encrypted values need to be generated again and compared in the database. So a value must generate the same encrypted string each time it is encrypted.</p>

<p>Currently I'm using a 32 char key working on the possibly incorrect assumption this is 256 bits?</p>

<p>So, I would want 'the quick brown fox' to be converted to a suitable AES 256 bit key?</p>
","<p>You can construct the  <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.aspx""><code>Rfc2898DeriveBytes Class</code></a> with an arbitrary sized password and then derive a key of your desired size in this case, 256 bits (32 bytes):</p>

<pre><code>private static byte[] CreateKey(string password, int keyBytes = 32)
{
    const int Iterations = 300;
    var keyGenerator = new Rfc2898DeriveBytes(password, Salt, Iterations);
    return keyGenerator.GetBytes(keyBytes);
}
</code></pre>

<p>In order to produce a deterministic output (i.e. same input will produce the same output) you will need to hard-code the salt. The salt must be at least 8 bytes: </p>

<pre><code>private static readonly byte[] Salt = 
    new byte[] { 10, 20, 30 , 40, 50, 60, 70, 80};
</code></pre>
","19940","<c#><hash><aes><encryption-symmetric>","7","17","6","2019-07-31 06:32:24","17196217","2","2","41071","","2013-06-19 18:25:44","2013-06-19 16:02:50",""
"17195969","generating AES 256 bit key value","<p>Does anyone know of a way to get a 256 bit key value generated from a pass phrase of any length? The encryption cannot be salted as the encrypted values need to be generated again and compared in the database. So a value must generate the same encrypted string each time it is encrypted.</p>

<p>Currently I'm using a 32 char key working on the possibly incorrect assumption this is 256 bits?</p>

<p>So, I would want 'the quick brown fox' to be converted to a suitable AES 256 bit key?</p>
","<p>Probably the best way is to use PBKDF2 using SHA256 (which will generate 256 bit output) and a application specific salt &amp; iteration count. You should be aware that using an application specific salt removed quite a lot of the protection from PBKDF2, so you may require additional protection to alleviate this issue. One method would be to make sure that the database is safe, and that a maximum amount of tries can be used.</p>

<p>You are correct in stipulating that a 32 char passphrase is not a 256 bit key. It does not contain enough entropy, and some bytes may not even have valid character representations.</p>
","19940","<c#><hash><aes><encryption-symmetric>","7","2","6","2019-07-31 06:32:24","17196217","2","2","41071","","2013-06-19 18:25:44","2013-06-19 16:02:50",""
"17195969","generating AES 256 bit key value","<p>Does anyone know of a way to get a 256 bit key value generated from a pass phrase of any length? The encryption cannot be salted as the encrypted values need to be generated again and compared in the database. So a value must generate the same encrypted string each time it is encrypted.</p>

<p>Currently I'm using a 32 char key working on the possibly incorrect assumption this is 256 bits?</p>

<p>So, I would want 'the quick brown fox' to be converted to a suitable AES 256 bit key?</p>
","<pre><code>public static string GenerateBitKey(int letterCount = 44)
    {
        // Get the number of words and letters per word.
        int num_letters = letterCount;
        // Make an array of the letters we will use.
        char[] letters = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"".ToCharArray();

        // Make a random number generator.
        Random rand = new Random();

        // Make the words.
        // Make a word.
        string word = """";
        for (int j = 1; j &lt;= num_letters; j++)
        {
            // Pick a random number between 0 and 25
            // to select a letter from the letters array.
            int letter_num = rand.Next(0, letters.Length - 1);

            // Append the letter.
            word += letters[letter_num];
        }
        return word;
    }
</code></pre>
","19940","<c#><hash><aes><encryption-symmetric>","7","0","6","2019-07-31 06:32:24","17196217","2","2","41071","","2013-06-19 18:25:44","2013-06-19 16:02:50",""
"17195969","generating AES 256 bit key value","<p>Does anyone know of a way to get a 256 bit key value generated from a pass phrase of any length? The encryption cannot be salted as the encrypted values need to be generated again and compared in the database. So a value must generate the same encrypted string each time it is encrypted.</p>

<p>Currently I'm using a 32 char key working on the possibly incorrect assumption this is 256 bits?</p>

<p>So, I would want 'the quick brown fox' to be converted to a suitable AES 256 bit key?</p>
","<pre><code> private static IBuffer GetMD5Hash(string key)
    {
        IBuffer bufferUTF8Msg = CryptographicBuffer.ConvertStringToBinary(key, BinaryStringEncoding.Utf8);
        HashAlgorithmProvider hashAlgorithmProvider = HashAlgorithmProvider.OpenAlgorithm(HashAlgorithmNames.Md5);
        IBuffer hashBuffer = hashAlgorithmProvider.HashData(bufferUTF8Msg);
        if (hashBuffer.Length != hashAlgorithmProvider.HashLength)
        {
            throw new Exception(""There was an error creating the hash"");
        }
        return hashBuffer;
    }

    #region Static

    public static string GenerateKey(string password, int resultKeyLength = 68)
    {
        if (password.Length &lt; 6)
            throw new ArgumentException(""password length must atleast 6 characters or above"");
        string key = """";

        var hashKey = GetMD5Hash(password);
        var decryptBuffer = CryptographicBuffer.ConvertStringToBinary(password, BinaryStringEncoding.Utf8);
        var AES = SymmetricKeyAlgorithmProvider.OpenAlgorithm(SymmetricAlgorithmNames.AesEcbPkcs7);
        var symmetricKey = AES.CreateSymmetricKey(hashKey);
        var encryptedBuffer = CryptographicEngine.Encrypt(symmetricKey, decryptBuffer, null);
        key = CryptographicBuffer.EncodeToBase64String(encryptedBuffer);
        string cleanKey  = key.Trim(new char[] { ' ', '\r', '\t', '\n', '/', '+', '=' });
        cleanKey = cleanKey.Replace(""/"", string.Empty).Replace(""+"", string.Empty).Replace(""="", string.Empty);
        key = cleanKey;
        if(key.Length &gt; resultKeyLength)
        {
           key = key.Substring(0, Math.Min(key.Length, resultKeyLength));
        }
        else if(key.Length == resultKeyLength)
        {
            return key;
        }
        else if (key.Length &lt; resultKeyLength)
        {
            key = GenerateKey(key);
        }
        return key;

    }
</code></pre>

<p>//Get the first 44 charaters for the AES Key and the remaining chars for AES IV</p>
","19940","<c#><hash><aes><encryption-symmetric>","7","0","6","2019-07-31 06:32:24","17196217","2","2","41071","","2013-06-19 18:25:44","2013-06-19 16:02:50",""
"17195969","generating AES 256 bit key value","<p>Does anyone know of a way to get a 256 bit key value generated from a pass phrase of any length? The encryption cannot be salted as the encrypted values need to be generated again and compared in the database. So a value must generate the same encrypted string each time it is encrypted.</p>

<p>Currently I'm using a 32 char key working on the possibly incorrect assumption this is 256 bits?</p>

<p>So, I would want 'the quick brown fox' to be converted to a suitable AES 256 bit key?</p>
","<p>My version. I just wanted keys without a password.</p>

<pre><code>    public static string GenerateBitKey(int letterCount = 44)
    {
        // Get the number of words and letters per word.
        int num_letters = letterCount;
        // Make an array of the letters we will use.
        char[] letters = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrsruvwxyz+"".ToCharArray();
        int lettersLength =  letters.Length;

        // Make a word.
        string word = """";

        //Use Cryptography to generate random numbers rather than Psuedo Random Rand
        // Deliberate overkill here
        byte[] randomBytes = new byte[num_letters*256];


        List&lt;int&gt; rands = new List&lt;int&gt;();
        do
        {
            using (System.Security.Cryptography.RNGCryptoServiceProvider rngCsp = new
                        System.Security.Cryptography.RNGCryptoServiceProvider())
            {
                // Fill the array with a random value.
                rngCsp.GetBytes(randomBytes);
            }


            // Truncate the set of random bytes to being in range 0 .. (lettersLength-1)
            // Nb Using mod of randomBytes will reduce entropy of the set

            foreach (var x in randomBytes)
            {
                if (x &lt; lettersLength)
                    rands.Add((int)x);
                if (rands.Count()==num_letters)
                     break;
            }
        }
        while (rands.Count &lt; letterCount);


        int[] randsArray = rands.ToArray();

        // Get random selection of characters from letters
        for (int j = 0; j &lt; num_letters; j++)
        {
            int letter_num = randsArray[j];
            // Append the letter.
            word += letters[letter_num];
        }
        return word;
    }
</code></pre>
","19940","<c#><hash><aes><encryption-symmetric>","7","0","6","2019-07-31 06:32:24","17196217","2","2","41071","","2013-06-19 18:25:44","2013-06-19 16:02:50",""
"21445309","Encryption and Decryption using C++","<p>I've got a buffer, in which i'm adding some plain text.
I want to use openssl AES encryption to encrypt the text, then decrypt it, and print it back on the screen.</p>

<p>Code is running with no errors.</p>

<pre><code>#include &lt;fstream&gt;
#include &lt;iostream&gt;
#include &lt;stdio.h&gt;
#include &lt;string&gt;
#include &lt;openssl/aes.h&gt;
using namespace std;

void main()
{

// Buffers
unsigned char inbuffer[1024];
unsigned char encryptedbuffer[1024];
unsigned char outbuffer[1024];


// CODE FOR ENCRYPTION
//--------------------
unsigned char oneKey[] = ""abc"";
AES_KEY key; 

AES_set_encrypt_key(oneKey,128,&amp;key);
AES_set_decrypt_key(oneKey,128,&amp;key);

//--------------------


string straa(""hello world\n"");
memcpy((char*)inbuffer,straa.c_str(),13);


printf(""%s"",inbuffer);
//this prints out fine

AES_encrypt(inbuffer,encryptedbuffer,&amp;key);
//printf(""%s"",encryptedbuffer);
//this is expected to pring out rubbish, so is commented

AES_decrypt(encryptedbuffer,outbuffer,&amp;key);
printf(""%s"",outbuffer);
//this is not pringint ""hello world""

getchar();

}
</code></pre>

<p>I am aware of the fact that once placed in the new buffers, ""encryptedbuffer"" and ""outbuffer"", they are not null terminated ""\0"" , but even so, by printing out the raw data, i'm only getting rubbish after the decryption,
At the end of the decryption, i'm assuming the \0 should also be decrypted and therefore the printf should print corectly.</p>

<p>Anyone knows how to make the decyption work?</p>

<p>Also any idea how to print the buffers using C++ libraries, maybe cout, and not printf?</p>
","<p>I notice a couple of possible issues:</p>

<ul>
<li>The call to AES_set_decrypt_key uses the same <code>key</code> as the previous call thus overwriting the key value.  To make both calls up front like that, it would be necessary to use a separate key instance.  Otherwise wait to call <code>AES_set_decrypt_key</code> until after the encryption is done.</li>
<li>The key buffer passed to <code>AES_set_encrypt_key</code> needs to be 16 bytes long for the bit depth of 128.  As it is, it will read 16 bytes, but the contents of those are undefined.</li>
</ul>
","15699","<c++><openssl><aes><encryption-symmetric>","6","3","1","2015-05-15 20:18:32","21445434","5","1","608639","","2015-05-15 20:18:32","2014-01-30 00:00:40",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>Use the OpenSSL <a href=""https://www.openssl.org/docs/manmaster/man1/speed.html"" rel=""nofollow noreferrer""><code>speed</code></a> command to benchmark the algorithms and see for yourself.</p>

<pre><code>[dave@hal9000 ~]$ openssl speed aes-128-cbc
Doing aes-128 cbc for 3s on 16 size blocks: 26126940 aes-128 cbc's in 3.00s
Doing aes-128 cbc for 3s on 64 size blocks: 7160075 aes-128 cbc's in 3.00s
...
The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128 cbc     139343.68k   152748.27k   155215.70k   155745.61k   157196.29k


[dave@hal9000 ~]$ openssl speed rsa2048
Doing 2048 bit private rsa's for 10s: 9267 2048 bit private RSA's in 9.99s
Doing 2048 bit public rsa's for 10s: 299665 2048 bit public RSA's in 9.99s
...
                  sign    verify    sign/s verify/s
rsa 2048 bits 0.001078s 0.000033s    927.6  29996.5
</code></pre>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","7","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>Apparently it is 1000x worse.  (<a href=""http://windowsitpro.com/article/articleid/93787/symmetric-vs-asymmetric-ciphers.html"" rel=""nofollow noreferrer"">http://windowsitpro.com/article/articleid/93787/symmetric-vs-asymmetric-ciphers.html</a>).  But unless you're really working through a lot of data it isn't going to matter.  What you can do is use asymmetric encryption to exchange a symmetric encryption key.  </p>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","2","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>Practical PKI-based encryption systems use asymmetric encryption to encrypt a symmetric key, and then symmetric encryption with that key to encrypt the data (having said that, someone will point out a counter-example).</p>

<p>So the additional overhead imposed by asymmetric crypto algorithms over that of symmetric is fixed - it doesn't depend on the data size, just on the key sizes.</p>

<p>Last time I tested this, validating a chain of 3 or so X.509 certificates [edit to add: and the data they were signing] was taking a fraction of a second on an ARM running at 100MHz or so (averaged over many repetitions, obviously). I can't remember how small - not negligible, but well under a second.</p>

<p>Sorry I can't remember the exact details, but the summary is that unless you're on a very restricted system or doing a lot of encryption (like if you want to accept as many as possible SSL connections a second), NIST-approved asymmetric encryption methods are fast.</p>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","4","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>Yes, purely asymmetric encryption is much slower than symmetric cyphers (like DES or AES), which is why real applications use <a href=""http://en.wikipedia.org/wiki/Hybrid_cryptosystem"" rel=""noreferrer"">hybrid cryptography</a>: the expensive public-key operations are performed only to encrypt (and exchange) an encryption key for the symmetric algorithm that is going to be used for encrypting the real message.</p>

<p>The problem that public-key cryptography solves is that there is no shared secret. With a symmetric encryption you have to trust all involved parties to keep the key secret. This issue should be a much bigger concern than performance (which can be mitigated with a hybrid approach)</p>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","27","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>Perhaps you can add some details about your project so that you get better quality answers.  What are you trying to secure?  From whom?  If you could explain the requirements of your security, you'll get a much better answer.  Performance doesn't mean much if the encryption mechanism isn't protecting what you think it is.</p>

<p>For instance, X509 certs are an industrial standard way of securing client/server endpoints.  PGP armoring can be used to secure license files.  For simplicity, Cipher block chaining with Blowfish (and a host of other ciphers) is easy to use in Perl or Java, if you control both end points.</p>

<p>Thanks.</p>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","0","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>On a Macbook running OS X 10.5.5 and a stock build of OpenSSL, ""openssl speed"" clocks AES-128-CBC at 46,000 1024 bit blocks per second. That same box clocks 1024 bit RSA at 169 signatures per second. AES-128-CBC is the ""textbook"" block encryption algorithm, and RSA 1024 is the ""textbook"" public key algorithm. It's apples-to-oranges, but the answer is: <strong>RSA is much, much slower</strong>.</p>

<p>That's not why you shouldn't be using public key encryption, however. Here's the real reasons:</p>

<ol>
<li><p><strong>Public key crypto operations aren't intended for raw data encryption</strong>. Algorithms like Diffie-Hellman and RSA were devised as a way of exchanging keys for block crypto algorithms. So, for instance, you'd use a secure random number generator to generate a 128 bit random key for AES, and encrypt those 16 bytes with RSA.</p></li>
<li><p><strong>Algorithms like RSA are much less ""user-friendly"" than AES</strong>. With a random key, a plaintext block you feed to AES is going to come out random to anyone without the key. That is actually not the case with RSA, which is --- more so than AES --- just a math equation. So in addition to storing and managing keys properly, you have to be extremely careful with the way you format your RSA plaintext blocks, or you end up with vulnerabilities. </p></li>
<li><p><strong>Public key doesn't work without a key management infrastructure</strong>. If you don't have a scheme to verify public keys, attackers can substitute their own keypairs for the real ones to launch ""man in the middle"" attacks. This is why SSL forces you to go through the rigamarole of certificates. Block crypto algorithms like AES <em>do</em> suffer from this problem too, but without a PKI, AES is no less safe than RSA.</p></li>
<li><p><strong>Public key crypto operations are susceptible to more implementation vulnerabilities than AES</strong>. For example, both sides of an RSA transaction have to agree on <em>parameters</em>, which are numbers fed to the RSA equation. There are evil values attackers can substitute in to silently disable encryption. The same goes for Diffie Hellman and even more so for Elliptic Curve. Another example is the RSA Signature Forgery vulnerability that occurred 2 years ago in multiple high-end SSL implementations.</p></li>
<li><p><strong>Using public key is evidence that you're doing something ""out of the ordinary""</strong>. Out of the ordinary is exactly what you <em>never</em> want to be with cryptography; beyond just the algorithms, crypto <em>designs</em> are audited and tested for years before they're considered safe. </p></li>
</ol>

<p>To our clients who want to use cryptography in their applications, we make two recommendations:</p>

<ul>
<li><p><strong>For ""data at rest"", use PGP</strong>. Really! PGP has been beat up for more than a decade and is considered safe from dumb implementation mistakes. There are open source and commercial variants of it.</p></li>
<li><p><strong>For ""data in flight"", use TLS/SSL</strong>. No security protocol in the world is better understood and better tested than TLS; financial institutions everywhere accept it as a secure method to move the most sensitive data.</p></li>
</ul>

<p><a href=""http://www.matasano.com/log/558/public-key-signature-forgery-collected/"" rel=""noreferrer"">Here's a decent writeup</a> [matasano.com] me and Nate Lawson, a professional cryptographer, wrote up a few years back. It covers these points in more detail.</p>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","24","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>Yes, the hybrid encryption offered by standardized cryptographic schemes like PGP, TLS, and CMS does impose a fixed performance cost on each message or session. How big that impact is depends on the algorithms selected and which operation you are talking about.</p>

<p>For RSA, decryption and signing operations are relatively slow, because it requires modular exponentiation with a large private exponent. RSA encryption and signature verification, on the other hand, is very fast, because it uses the small public exponent. This difference scales quadratically with the key length.</p>

<p>Under ECC, because peers are doing the same math with keys of similar size, operations are more balanced than RSA. In an integrated encryption scheme, an ephemeral EC key can be generated, and used in a key agreement algorithm; that requires a little extra work for the message sender. ECDH key agreement is much, <em>much</em> slower than RSA encryption, but much faster than RSA decryption.</p>

<p>In terms of relative numbers, decrypting with AES might be 100,000x faster than decrypting with RSA. In terms of absolute numbers, depending heavily on hardware, AES might take a few <em>nanoseconds</em> per block, while RSA takes a <em>millisecond</em> or two. And that prompts the question, why would anyone use asymmetric algorithms, ever?</p>

<p>The answer is that these algorithms are used together, for different purposes, in hybrid encryption schemes. Fast, symmetric algorithms like AES are used to protect the message itself, and slow, asymmetric algorithms like RSA are used in turn to protect the keys needed by the symmetric algorithms. This is what allows parties that have never previously shared any secret information, like you and your search engine, to communicate securely with each other.</p>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","0","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"11873878","C# Encryption to PHP Decryption","<p>I'm trying to encrypt some (cookie) data in C# and then decrypt it in PHP. I have chosen to use Rijndael encryption. I've almost got it working, except only part of the text is decrypted! I started working from this example: <a href=""https://stackoverflow.com/questions/224453/decrypt-php-encrypted-string-in-c-sharp"">Decrypt PHP encrypted string in C#</a></p>

<p>Here's the text (JSON) that I am encrypting (sensitive information removed):</p>

<pre><code>{""DisplayName"":""xxx"", ""Username"": ""yyy"", ""EmailAddress"":""zzz""}
</code></pre>

<p>So I login to the C# app which creates/encodes the cookie from stored Key and IV and then redirects to the PHP app which is supposed to decrypt/read the cookie. When I decrypt the cookie, it comes out like this:
<strike></p>

<pre><code>{""DisplayName"":""xxx"",""F�A ;��HP=D�������4��z����ť���k�#E���R�j�5�\�t. t�D��"" 
</code></pre>

<p><b>UPDATE</b>: i've gotten a little bit further and this is now the result</p>

<pre><code>string(96) ""{""DisplayName"":""xxx"",""Username"":""yyy"",""EmailAddress""�)ق��-�J��k/VV-v� �9�B`7^"" 
</code></pre>

<p>As you can see, it starts decrypting it, but then gets messed up...
</strike></p>

<p>When Decrypt the string it comes out correct (with padding, which I have a function to remove padding), but if I change the test string by one character I get garbage again:</p>

<pre><code>B�nHL�Ek    �¿?�UΣlO����OЏ�M��NO/�f.M���Lƾ�CC�Y&gt;F��~�qd�+
</code></pre>

<p><strike>Here's the c# code I use to generate the random Key and IV:</strike></p>

<p><b>UPDATE</b>: I'm just using static key/IV for now, here they are:</p>

<pre><code>Key: lkirwf897+22#bbtrm8814z5qq=498j5
IV: 741952hheeyy66#cs!9hjv887mxx7@8y
</code></pre>

<p><strike></p>

<pre><code>RijndaelManaged symmetricKey = new RijndaelManaged();
symmetricKey.BlockSize = 256;
symmetricKey.KeySize = 256;
symmetricKey.Padding = PaddingMode.Zeros;
symmetricKey.Mode = CipherMode.CBC;
string key = Convert.ToBase64String(symmetricKey.Key);
string IV = Convert.ToBase64String(symmetricKey.IV);
</code></pre>

<p></strike>
I then save the key and IV to a database to be retrieved later for encoding/decoding.</p>

<p>This is the full encryption class:</p>

<pre><code>public static class Encryption
    {
        public static string Encrypt(string prm_text_to_encrypt, string prm_key, string prm_iv)
        {
            var sToEncrypt = prm_text_to_encrypt;

            var rj = new RijndaelManaged()
            {
                Padding = PaddingMode.PKCS7,
                Mode = CipherMode.CBC,
                KeySize = 256,
                BlockSize = 256,
                //FeedbackSize = 256
            };

            var key = Encoding.ASCII.GetBytes(prm_key);
            var IV = Encoding.ASCII.GetBytes(prm_iv);
            //var key = Convert.FromBase64String(prm_key);
            //var IV = Convert.FromBase64String(prm_iv);

            var encryptor = rj.CreateEncryptor(key, IV);

            var msEncrypt = new MemoryStream();
            var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);

            var toEncrypt = Encoding.ASCII.GetBytes(sToEncrypt);

            csEncrypt.Write(toEncrypt, 0, toEncrypt.Length);
            csEncrypt.FlushFinalBlock();

            var encrypted = msEncrypt.ToArray();

            return (Convert.ToBase64String(encrypted));
        }

        public static string Decrypt(string prm_text_to_decrypt, string prm_key, string prm_iv)
        {

            var sEncryptedString = prm_text_to_decrypt;

            var rj = new RijndaelManaged()
            {
                Padding = PaddingMode.PKCS7,
                Mode = CipherMode.CBC,
                KeySize = 256,
                BlockSize = 256,
                //FeedbackSize = 256
            };

            var key = Encoding.ASCII.GetBytes(prm_key);
            var IV = Encoding.ASCII.GetBytes(prm_iv);
            //var key = Convert.FromBase64String(prm_key);
            //var IV = Convert.FromBase64String(prm_iv);

            var decryptor = rj.CreateDecryptor(key, IV);

            var sEncrypted = Convert.FromBase64String(sEncryptedString);

            var fromEncrypt = new byte[sEncrypted.Length];

            var msDecrypt = new MemoryStream(sEncrypted);
            var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);

            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);

            return (Encoding.ASCII.GetString(fromEncrypt));
        }

        public static void GenerateKeyIV(out string key, out string IV)
        {
            var rj = new RijndaelManaged()
            {
                Padding = PaddingMode.PKCS7,
                Mode = CipherMode.CBC,
                KeySize = 256,
                BlockSize = 256,
                //FeedbackSize = 256
            };
            rj.GenerateKey();
            rj.GenerateIV();

            key = Convert.ToBase64String(rj.Key);
            IV = Convert.ToBase64String(rj.IV);
        }
    }
</code></pre>

<p>Here's the PHP code I am using to decrypt the data:</p>

<pre><code>    function decryptRJ256($key,$iv,$string_to_decrypt)
{
    $string_to_decrypt = base64_decode($string_to_decrypt);
    $rtn = mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $string_to_decrypt, MCRYPT_MODE_CBC, $iv);
    //$rtn = rtrim($rtn, ""\0\4"");
    $rtn = unpad($rtn);
    return($rtn);
}

function unpad($value)
{
    $blockSize = mcrypt_get_block_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC);
    //apply pkcs7 padding removal
    $packing = ord($value[strlen($value) - 1]);
    if($packing &amp;&amp; $packing &lt; $blockSize){
        for($P = strlen($value) - 1; $P &gt;= strlen($value) - $packing; $P--){
            if(ord($value{$P}) != $packing){
                $packing = 0;
            }//end if
        }//end for
    }//end if 

    return substr($value, 0, strlen($value) - $packing); 
}

$ky = 'lkirwf897+22#bbtrm8814z5qq=498j5'; // 32 * 8 = 256 bit key
$iv = '741952hheeyy66#cs!9hjv887mxx7@8y'; // 32 * 8 = 256 bit iv

$enc = $_COOKIE[""MyCookie""];

$dtext = decryptRJ256($ky, $iv, $enc);
var_dump($dtext);
</code></pre>

<p><strike>I am a little unsure about this part, because all of the example code I've seen simply passes in the base64 encoded string directly to the decryptor, but in my example, I have to base64_decode it before I pass it otherwise I get the error that the key and IV are not the correct length.</strike> </p>

<p><b>UPDATE</b>: I'm using ASCII keys in the format needed by PHP. If I generate keys from the RijndaelManaged class they dont work on the PHP side, but I can use keys that are known to work on PHP side and use them in the RijndaelManaged C# side.</p>

<p>Please let me know if I left out any pertinent information. TIA!</p>
","<p>Since the string is partially OK, but there is gibberish at the end it would suggest a padding problem within the encryption which expects exact blocks of 256 bytes. I suggest setting the padding as <strong>PKCS7</strong> (PaddingMode.PKCS7) instead of <strong>Zeros</strong> on the C# side which PHP will understand without issues (as it's the default mode on that parser).</p>

<p><strong>Edit:</strong> Oops, I did not notice that you had the following in your PHP:</p>

<pre><code>$enc = $_COOKIE[""MyCookie""];
</code></pre>

<p>This is the caveat. PHP is likely not getting the encrypted data as-is and is running some urldecode sanitizing. You should print this variable to see that it really matches what is being sent from the C# code.</p>

<p><strong>Edit2:</strong></p>

<p>Convert the whitespaces to missing + characters from the cookie by adding this:</p>

<pre><code>str_replace(' ', '+', $enc);
</code></pre>
","13535","<c#><php><cookies><encryption><encryption-symmetric>","18","5","2","2015-03-06 19:36:14","11908139","9","9","-1","","2017-05-23 10:31:16","2012-08-08 22:03:59",""
"11873878","C# Encryption to PHP Decryption","<p>I'm trying to encrypt some (cookie) data in C# and then decrypt it in PHP. I have chosen to use Rijndael encryption. I've almost got it working, except only part of the text is decrypted! I started working from this example: <a href=""https://stackoverflow.com/questions/224453/decrypt-php-encrypted-string-in-c-sharp"">Decrypt PHP encrypted string in C#</a></p>

<p>Here's the text (JSON) that I am encrypting (sensitive information removed):</p>

<pre><code>{""DisplayName"":""xxx"", ""Username"": ""yyy"", ""EmailAddress"":""zzz""}
</code></pre>

<p>So I login to the C# app which creates/encodes the cookie from stored Key and IV and then redirects to the PHP app which is supposed to decrypt/read the cookie. When I decrypt the cookie, it comes out like this:
<strike></p>

<pre><code>{""DisplayName"":""xxx"",""F�A ;��HP=D�������4��z����ť���k�#E���R�j�5�\�t. t�D��"" 
</code></pre>

<p><b>UPDATE</b>: i've gotten a little bit further and this is now the result</p>

<pre><code>string(96) ""{""DisplayName"":""xxx"",""Username"":""yyy"",""EmailAddress""�)ق��-�J��k/VV-v� �9�B`7^"" 
</code></pre>

<p>As you can see, it starts decrypting it, but then gets messed up...
</strike></p>

<p>When Decrypt the string it comes out correct (with padding, which I have a function to remove padding), but if I change the test string by one character I get garbage again:</p>

<pre><code>B�nHL�Ek    �¿?�UΣlO����OЏ�M��NO/�f.M���Lƾ�CC�Y&gt;F��~�qd�+
</code></pre>

<p><strike>Here's the c# code I use to generate the random Key and IV:</strike></p>

<p><b>UPDATE</b>: I'm just using static key/IV for now, here they are:</p>

<pre><code>Key: lkirwf897+22#bbtrm8814z5qq=498j5
IV: 741952hheeyy66#cs!9hjv887mxx7@8y
</code></pre>

<p><strike></p>

<pre><code>RijndaelManaged symmetricKey = new RijndaelManaged();
symmetricKey.BlockSize = 256;
symmetricKey.KeySize = 256;
symmetricKey.Padding = PaddingMode.Zeros;
symmetricKey.Mode = CipherMode.CBC;
string key = Convert.ToBase64String(symmetricKey.Key);
string IV = Convert.ToBase64String(symmetricKey.IV);
</code></pre>

<p></strike>
I then save the key and IV to a database to be retrieved later for encoding/decoding.</p>

<p>This is the full encryption class:</p>

<pre><code>public static class Encryption
    {
        public static string Encrypt(string prm_text_to_encrypt, string prm_key, string prm_iv)
        {
            var sToEncrypt = prm_text_to_encrypt;

            var rj = new RijndaelManaged()
            {
                Padding = PaddingMode.PKCS7,
                Mode = CipherMode.CBC,
                KeySize = 256,
                BlockSize = 256,
                //FeedbackSize = 256
            };

            var key = Encoding.ASCII.GetBytes(prm_key);
            var IV = Encoding.ASCII.GetBytes(prm_iv);
            //var key = Convert.FromBase64String(prm_key);
            //var IV = Convert.FromBase64String(prm_iv);

            var encryptor = rj.CreateEncryptor(key, IV);

            var msEncrypt = new MemoryStream();
            var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);

            var toEncrypt = Encoding.ASCII.GetBytes(sToEncrypt);

            csEncrypt.Write(toEncrypt, 0, toEncrypt.Length);
            csEncrypt.FlushFinalBlock();

            var encrypted = msEncrypt.ToArray();

            return (Convert.ToBase64String(encrypted));
        }

        public static string Decrypt(string prm_text_to_decrypt, string prm_key, string prm_iv)
        {

            var sEncryptedString = prm_text_to_decrypt;

            var rj = new RijndaelManaged()
            {
                Padding = PaddingMode.PKCS7,
                Mode = CipherMode.CBC,
                KeySize = 256,
                BlockSize = 256,
                //FeedbackSize = 256
            };

            var key = Encoding.ASCII.GetBytes(prm_key);
            var IV = Encoding.ASCII.GetBytes(prm_iv);
            //var key = Convert.FromBase64String(prm_key);
            //var IV = Convert.FromBase64String(prm_iv);

            var decryptor = rj.CreateDecryptor(key, IV);

            var sEncrypted = Convert.FromBase64String(sEncryptedString);

            var fromEncrypt = new byte[sEncrypted.Length];

            var msDecrypt = new MemoryStream(sEncrypted);
            var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);

            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);

            return (Encoding.ASCII.GetString(fromEncrypt));
        }

        public static void GenerateKeyIV(out string key, out string IV)
        {
            var rj = new RijndaelManaged()
            {
                Padding = PaddingMode.PKCS7,
                Mode = CipherMode.CBC,
                KeySize = 256,
                BlockSize = 256,
                //FeedbackSize = 256
            };
            rj.GenerateKey();
            rj.GenerateIV();

            key = Convert.ToBase64String(rj.Key);
            IV = Convert.ToBase64String(rj.IV);
        }
    }
</code></pre>

<p>Here's the PHP code I am using to decrypt the data:</p>

<pre><code>    function decryptRJ256($key,$iv,$string_to_decrypt)
{
    $string_to_decrypt = base64_decode($string_to_decrypt);
    $rtn = mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $string_to_decrypt, MCRYPT_MODE_CBC, $iv);
    //$rtn = rtrim($rtn, ""\0\4"");
    $rtn = unpad($rtn);
    return($rtn);
}

function unpad($value)
{
    $blockSize = mcrypt_get_block_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC);
    //apply pkcs7 padding removal
    $packing = ord($value[strlen($value) - 1]);
    if($packing &amp;&amp; $packing &lt; $blockSize){
        for($P = strlen($value) - 1; $P &gt;= strlen($value) - $packing; $P--){
            if(ord($value{$P}) != $packing){
                $packing = 0;
            }//end if
        }//end for
    }//end if 

    return substr($value, 0, strlen($value) - $packing); 
}

$ky = 'lkirwf897+22#bbtrm8814z5qq=498j5'; // 32 * 8 = 256 bit key
$iv = '741952hheeyy66#cs!9hjv887mxx7@8y'; // 32 * 8 = 256 bit iv

$enc = $_COOKIE[""MyCookie""];

$dtext = decryptRJ256($ky, $iv, $enc);
var_dump($dtext);
</code></pre>

<p><strike>I am a little unsure about this part, because all of the example code I've seen simply passes in the base64 encoded string directly to the decryptor, but in my example, I have to base64_decode it before I pass it otherwise I get the error that the key and IV are not the correct length.</strike> </p>

<p><b>UPDATE</b>: I'm using ASCII keys in the format needed by PHP. If I generate keys from the RijndaelManaged class they dont work on the PHP side, but I can use keys that are known to work on PHP side and use them in the RijndaelManaged C# side.</p>

<p>Please let me know if I left out any pertinent information. TIA!</p>
","<p>For posterity I'm placing the fully completed solution here.</p>

<p><b>C# Encryption Class</b></p>

<pre><code>public static class Encryption
{
    public static string Encrypt(string prm_text_to_encrypt, string prm_key, string prm_iv)
    {
        var sToEncrypt = prm_text_to_encrypt;

        var rj = new RijndaelManaged()
        {
            Padding = PaddingMode.PKCS7,
            Mode = CipherMode.CBC,
            KeySize = 256,
            BlockSize = 256,
        };

        var key = Convert.FromBase64String(prm_key);
        var IV = Convert.FromBase64String(prm_iv);

        var encryptor = rj.CreateEncryptor(key, IV);

        var msEncrypt = new MemoryStream();
        var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);

        var toEncrypt = Encoding.ASCII.GetBytes(sToEncrypt);

        csEncrypt.Write(toEncrypt, 0, toEncrypt.Length);
        csEncrypt.FlushFinalBlock();

        var encrypted = msEncrypt.ToArray();

        return (Convert.ToBase64String(encrypted));
        }

    public static string Decrypt(string prm_text_to_decrypt, string prm_key, string prm_iv)
    {

        var sEncryptedString = prm_text_to_decrypt;

        var rj = new RijndaelManaged()
        {
            Padding = PaddingMode.PKCS7,
            Mode = CipherMode.CBC,
            KeySize = 256,
            BlockSize = 256,
        };

        var key = Convert.FromBase64String(prm_key);
        var IV = Convert.FromBase64String(prm_iv);

        var decryptor = rj.CreateDecryptor(key, IV);

        var sEncrypted = Convert.FromBase64String(sEncryptedString);

        var fromEncrypt = new byte[sEncrypted.Length];

        var msDecrypt = new MemoryStream(sEncrypted);
        var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);

        csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);

        return (Encoding.ASCII.GetString(fromEncrypt));
        }

    public static void GenerateKeyIV(out string key, out string IV)
    {
        var rj = new RijndaelManaged()
        {
            Padding = PaddingMode.PKCS7,
            Mode = CipherMode.CBC,
            KeySize = 256,
            BlockSize = 256,
        };
        rj.GenerateKey();
        rj.GenerateIV();

        key = Convert.ToBase64String(rj.Key);
        IV = Convert.ToBase64String(rj.IV);
    }
}
</code></pre>

<p><b>PHP Decryption Snippet</b></p>

<pre><code>&lt;?php
function decryptRJ256($key,$iv,$encrypted)
{
    //PHP strips ""+"" and replaces with "" "", but we need ""+"" so add it back in...
    $encrypted = str_replace(' ', '+', $encrypted);

    //get all the bits
    $key = base64_decode($key);
    $iv = base64_decode($iv);
    $encrypted = base64_decode($encrypted);

    $rtn = mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $encrypted, MCRYPT_MODE_CBC, $iv);
    $rtn = unpad($rtn);
    return($rtn);
}

//removes PKCS7 padding
function unpad($value)
{
    $blockSize = mcrypt_get_block_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC);
    $packing = ord($value[strlen($value) - 1]);
    if($packing &amp;&amp; $packing &lt; $blockSize)
    {
        for($P = strlen($value) - 1; $P &gt;= strlen($value) - $packing; $P--)
        {
            if(ord($value{$P}) != $packing)
            {
                $packing = 0;
            }
        }
    }

    return substr($value, 0, strlen($value) - $packing); 
}
?&gt;
&lt;pre&gt;
&lt;?php

$enc = $_COOKIE[""MyCookie""];

$ky = """"; //INSERT THE KEY GENERATED BY THE C# CLASS HERE
$iv = """"; //INSERT THE IV GENERATED BY THE C# CLASS HERE

$json_user = json_decode(decryptRJ256($ky, $iv, $enc), true);

var_dump($json_user);

?&gt;
</code></pre>
","13535","<c#><php><cookies><encryption><encryption-symmetric>","18","19","2","2015-03-06 19:36:14","11908139","9","9","-1","","2017-05-23 10:31:16","2012-08-08 22:03:59",""
"16383953","RSA and AES encryption","<p>I am looking at the feasibility for using Chrome apps for the front end of some applications I am working on. (As an aside, if anyone has any thoughts on this  - put it in the comments)</p>

<p>I would be using <code>chrome.socket</code> and would want the connections to be secure so will need RSA and AES encryption that will be compatible with as many backend technology implementations as possible (C#, Java, ...). What I mean by this is the different modes, key-lengths, implementation-specific details...</p>

<p>Now I have done a little searching myself and found <a href=""https://code.google.com/p/crypto-js/"" rel=""noreferrer"">https://code.google.com/p/crypto-js/</a> for AES encryption. <strong>Is this still the accepted library to use, or is there another?</strong></p>

<p>...however, <strong>I couldn't find a library for RSA?</strong></p>

<p>On the note of security, I don't foresee this being an issue as this is a Chrome extension,so the HTML/JavaScript is not being send over the internet, <strong>but is there any other security implication that I have missed?</strong></p>
","<p>You could try using this:</p>

<p>Stanford Javascript Crypto Library: <a href=""http://crypto.stanford.edu/sjcl/"" rel=""nofollow"">http://crypto.stanford.edu/sjcl/</a></p>

<blockquote>
  <p>SJCL is secure. It uses the industry-standard AES algorithm at 128, 192 or 256 bits; the SHA256 hash function; the HMAC authentication code; the PBKDF2 password strengthener; and the CCM and OCB authenticated-encryption modes. </p>
</blockquote>

<p>Check the API here: <a href=""http://bitwiseshiftleft.github.io/sjcl/doc/"" rel=""nofollow"">http://bitwiseshiftleft.github.io/sjcl/doc/</a></p>

<p>Stanford also has a page showing RSA (among others) encryption in Javascript: <a href=""http://www-cs-students.stanford.edu/~tjw/jsbn/"" rel=""nofollow"">http://www-cs-students.stanford.edu/~tjw/jsbn/</a></p>

<blockquote>
  <p>RSA and ECC in JavaScript:</p>
  
  <p>The jsbn library is a fast, portable implementation of large-number math in pure JavaScript, enabling public-key crypto and other applications on desktop and mobile browsers. </p>
</blockquote>

<p>They also state it is 100% interoperable with <code>openssl</code> and have instructions on how you can confirm this.</p>

<p>You could also try CryptoJS: <a href=""https://code.google.com/p/crypto-js/"" rel=""nofollow"">https://code.google.com/p/crypto-js/</a></p>

<blockquote>
  <p>CryptoJS is a growing collection of standard and secure cryptographic algorithms implemented in JavaScript using best practices and patterns. They are fast, and they have a consistent and simple interface. </p>
</blockquote>
","12746","<javascript><encryption-asymmetric><encryption-symmetric><google-chrome-app>","7","4","3","2015-05-17 13:02:39","","6","","126280","","2013-05-07 14:27:26","2013-05-05 11:18:39",""
"16383953","RSA and AES encryption","<p>I am looking at the feasibility for using Chrome apps for the front end of some applications I am working on. (As an aside, if anyone has any thoughts on this  - put it in the comments)</p>

<p>I would be using <code>chrome.socket</code> and would want the connections to be secure so will need RSA and AES encryption that will be compatible with as many backend technology implementations as possible (C#, Java, ...). What I mean by this is the different modes, key-lengths, implementation-specific details...</p>

<p>Now I have done a little searching myself and found <a href=""https://code.google.com/p/crypto-js/"" rel=""noreferrer"">https://code.google.com/p/crypto-js/</a> for AES encryption. <strong>Is this still the accepted library to use, or is there another?</strong></p>

<p>...however, <strong>I couldn't find a library for RSA?</strong></p>

<p>On the note of security, I don't foresee this being an issue as this is a Chrome extension,so the HTML/JavaScript is not being send over the internet, <strong>but is there any other security implication that I have missed?</strong></p>
","<p>It seems like you might prefer to have a full TLS implementation here. You should be able to wrap chrome.socket with a TLS wrapper using forge (a JavaScript implementation of TLS):</p>

<p><a href=""https://github.com/digitalbazaar/forge"" rel=""nofollow"">https://github.com/digitalbazaar/forge</a></p>
","12746","<javascript><encryption-asymmetric><encryption-symmetric><google-chrome-app>","7","0","3","2015-05-17 13:02:39","","6","","126280","","2013-05-07 14:27:26","2013-05-05 11:18:39",""
"16383953","RSA and AES encryption","<p>I am looking at the feasibility for using Chrome apps for the front end of some applications I am working on. (As an aside, if anyone has any thoughts on this  - put it in the comments)</p>

<p>I would be using <code>chrome.socket</code> and would want the connections to be secure so will need RSA and AES encryption that will be compatible with as many backend technology implementations as possible (C#, Java, ...). What I mean by this is the different modes, key-lengths, implementation-specific details...</p>

<p>Now I have done a little searching myself and found <a href=""https://code.google.com/p/crypto-js/"" rel=""noreferrer"">https://code.google.com/p/crypto-js/</a> for AES encryption. <strong>Is this still the accepted library to use, or is there another?</strong></p>

<p>...however, <strong>I couldn't find a library for RSA?</strong></p>

<p>On the note of security, I don't foresee this being an issue as this is a Chrome extension,so the HTML/JavaScript is not being send over the internet, <strong>but is there any other security implication that I have missed?</strong></p>
","<p>I'm pointing out some of my work I did for university, it's probably full of bugs and could be done in a better way. It's quite fast and works well with big keys. It's possible to use RSA with keys with n Bits.</p>

<p>Check the tests if you need to understand how it works. Any bug or improvement would be appreciated though.</p>

<p>Note, you might have to search a little because there is more than just RSA.</p>

<p><a href=""https://github.com/llacroix/rsa-js"" rel=""nofollow"">https://github.com/llacroix/rsa-js</a></p>
","12746","<javascript><encryption-asymmetric><encryption-symmetric><google-chrome-app>","7","0","3","2015-05-17 13:02:39","","6","","126280","","2013-05-07 14:27:26","2013-05-05 11:18:39",""
"3560707","SQL Encrypted Columns in WHERE Clause","<p>I am looking to apply SQL column level encryption using symmetric keys.  The initial steps needed to create the Database Master Key, Certificates and Symmetric Keys seems straight forward and I have tested encrypting/decrypting data using Symmetric Keys successfully.</p>

<p>However, once the data is encrypted I don't know how best to query it.  E.g.</p>

<pre><code>SELECT PlainTextA, PlainTextB, PlainTextC 
WHERE CONVERT(varchar, DECRYPTBYKEY(EncyptedColumn)) = @SearchTerm
</code></pre>

<p>would surely result in a full table scan?</p>

<p>Another option I thought might work is encrypting the search criteria first e.g.</p>

<pre><code>SELECT PlainTextA, PlainTextB, PlainTextC 
WHERE EncyptedColumn = ENCRYPTBYKEY(KEY_GUID('KeyName'), @SearchTerm)
</code></pre>

<p>but this doesn't work as the encrypted value generated is always different.</p>

<p>Any suggestions would be greatly appreciated.</p>
","<p>One option you have is add a new column to the table (or have a <code>WITH SCHEMABINDING</code> view with a calculated column in it, and index that) with a one-way HASH of the search value. It doens't have to be a strong hash - <a href=""http://blogs.clarience.com/davide/?p=11"" rel=""nofollow noreferrer"">something as simple as CHECKSUM will work</a>. Then you hash the search value in your lookup and filter it by the hash, which is indexed. That way, you can expose something searchable and indexable, without actually exposing the value itself.</p>

<p>However, if there's another way to do this directly, I'd love to know what it is :)</p>
","12735","<sql-server><sql-server-2008><encryption-symmetric><aes>","12","2","3","2015-07-14 06:35:54","3561063","0","4","","","","2010-08-24 20:21:55",""
"3560707","SQL Encrypted Columns in WHERE Clause","<p>I am looking to apply SQL column level encryption using symmetric keys.  The initial steps needed to create the Database Master Key, Certificates and Symmetric Keys seems straight forward and I have tested encrypting/decrypting data using Symmetric Keys successfully.</p>

<p>However, once the data is encrypted I don't know how best to query it.  E.g.</p>

<pre><code>SELECT PlainTextA, PlainTextB, PlainTextC 
WHERE CONVERT(varchar, DECRYPTBYKEY(EncyptedColumn)) = @SearchTerm
</code></pre>

<p>would surely result in a full table scan?</p>

<p>Another option I thought might work is encrypting the search criteria first e.g.</p>

<pre><code>SELECT PlainTextA, PlainTextB, PlainTextC 
WHERE EncyptedColumn = ENCRYPTBYKEY(KEY_GUID('KeyName'), @SearchTerm)
</code></pre>

<p>but this doesn't work as the encrypted value generated is always different.</p>

<p>Any suggestions would be greatly appreciated.</p>
","<p>The typical way is to store both the encrypted value <em>and</em> a one-way hash of the value. When you seek a specific value, you would seek the hash. This way you can query efficiently, w/o having to decrypt <em>every</em> row in order to find the value you're interested:</p>

<pre><code>create table Table (
EncryptedColumn varbinary(max),
HashValue binary(20),
PlainA int,
PlainB varchar(256),
PlainC Datetime);

create index ndxTableHash on Table(HashValue);

select PlainA, plainB, PlainC
from table
where HashValue = HashBytes('SHA1', @searchTerm);
</code></pre>

<p>In theory, you can have a hash conflict once in a blue moon, to be paranoid-safe you add a double check on the decrypted column:</p>

<pre><code>select PlainA, plainB, PlainC
from table
where HashValue = HashBytes('SHA1', @searchTerm)
and DecryptByKey(..., EncryptedColumn) = @searchTerm;
</code></pre>

<p>Also see <a href=""http://blogs.msdn.com/b/raulga/archive/2006/03/11/549754.aspx"" rel=""noreferrer"">Indexing encrypted data</a> and <a href=""http://blogs.msdn.com/b/lcris/archive/2005/12/22/506931.aspx"" rel=""noreferrer"">SQL Server 2005: searching encrypted data</a>.</p>
","12735","<sql-server><sql-server-2008><encryption-symmetric><aes>","12","14","3","2015-07-14 06:35:54","3561063","0","4","","","","2010-08-24 20:21:55",""
"3560707","SQL Encrypted Columns in WHERE Clause","<p>I am looking to apply SQL column level encryption using symmetric keys.  The initial steps needed to create the Database Master Key, Certificates and Symmetric Keys seems straight forward and I have tested encrypting/decrypting data using Symmetric Keys successfully.</p>

<p>However, once the data is encrypted I don't know how best to query it.  E.g.</p>

<pre><code>SELECT PlainTextA, PlainTextB, PlainTextC 
WHERE CONVERT(varchar, DECRYPTBYKEY(EncyptedColumn)) = @SearchTerm
</code></pre>

<p>would surely result in a full table scan?</p>

<p>Another option I thought might work is encrypting the search criteria first e.g.</p>

<pre><code>SELECT PlainTextA, PlainTextB, PlainTextC 
WHERE EncyptedColumn = ENCRYPTBYKEY(KEY_GUID('KeyName'), @SearchTerm)
</code></pre>

<p>but this doesn't work as the encrypted value generated is always different.</p>

<p>Any suggestions would be greatly appreciated.</p>
","<p>Another option is to use a View which contains a column of decrypted value and find records according to it.</p>

<pre><code>SELECT PlainTextA, PlainTextB, PlainTextC from TheView 
WHERE DecryptedColumn = @SearchTerm
</code></pre>
","12735","<sql-server><sql-server-2008><encryption-symmetric><aes>","12","-2","3","2015-07-14 06:35:54","3561063","0","4","","","","2010-08-24 20:21:55",""
"10562577","javax.crypto.BadPaddingException: Given final block not properly padded - Android","<p>I have read about this error but can't seem to get anything working.</p>

<p>The function of AES decrypt is:</p>

<pre><code>  public static byte[] decrypted_Data(byte[] crypt) throws Exception {

  String seed = ""SuperSecretPassword"";

  KeyGenerator keygen = KeyGenerator.getInstance(""AES"");

  SecureRandom secrand = SecureRandom.getInstance(""SHA1PRNG"");

  secrand.setSeed(seed.getBytes());

  keygen.init(128, secrand);

  SecretKey seckey = keygen.generateKey();

  byte[] rawKey = seckey.getEncoded();

 SecretKeySpec skeySpec = new SecretKeySpec(rawKey, ""AES"");

 Cipher cipher = Cipher.getInstance(""AES"");

 cipher.init(Cipher.DECRYPT_MODE, skeySpec);

 byte[] decrypted = cipher.doFinal(crypt);

  return decrypted;
}
</code></pre>

<p>The function of encrypt is just the same except for      </p>

<pre><code>cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
</code></pre>

<p>I am calling these functions as follows on Android:</p>

<pre><code>BufferedInputStream bis = new BufferedInputStream(photoStream);

byte[] mybytearray = new byte[photoStream.available()];

mybytearray = encrypted_Data(mybytearray);
</code></pre>

<p>And on the server as follows:</p>

<pre><code>   byte[] mybytearray = new byte[10000000];

   mybytearray_1 = decrypted_Data(mybytearray_1);
</code></pre>

<p>This is the first time i use these encryption functions, what am I doing wrong as I am receiving:</p>

<pre><code>javax.crypto.BadPaddingException: Given final block not properly padded 
</code></pre>
","","11439","<java><android><encryption><encryption-symmetric>","1","","0","2012-05-12 09:42:35","","7","3","758125","","2012-05-12 09:42:35","2012-05-12 09:37:08",""
"22385229","Best practices for (symmetric) encryption in .Net?","<p>What is considered ""best practice"" for encrypting certain sensitive or personally identifiable data in a SQL database (under PCI, HIPAA, or other applicable compliance standards)?</p>

<p>There are many questions here regarding individual aspects of a solution, but I have not seen any that discuss the approach at a high level. 
After looking around for quite some time, I came up with the following:</p>

<ul>
<li>Use CryptoAPI and Rijndael </li>
<li>Generate IV and store it with the encrypted data </li>
<li>Use DPAPI (Machine scope) to ""protect"" the symmetric key</li>
<li>Store the symmetric key in the registry or a file or the database, split the key and store parts in multiple places for added protection</li>
<li>do not decrypt the data unless it is really needed, i.e. not upon read from the database. Instead, hold cipher text in memory. </li>
</ul>

<p>Is this adequate? Outdated? Audit-safe? Reckless?</p>
","<p>Your approach is good, with a few adjustments in my eyes (I code for PCI compliance generally):</p>

<blockquote>
  <p>Use CryptoAPI and Rijndael</p>
</blockquote>

<p>Use Rijndael/AES256 at a minimum, regardless of other APIs</p>

<blockquote>
  <p>Generate IV and store it with the encrypted data</p>
</blockquote>

<p>Good</p>

<blockquote>
  <p>Use DPAPI (Machine scope) to ""protect"" the symmetric key</p>
</blockquote>

<p>Not sure if it matters. I'd just keep the IV next to the data that's encrypted, or if you're really paranoid on some other medium. Ensure that the IV is not accessible to the public.</p>

<blockquote>
  <p>Store the symmetric key in the registry or a file or the database, split the key and store parts in multiple places for added protection</p>
</blockquote>

<p>Storing in multiple places will not help you if someone steals your media. It's a bit overkill to split the key up all over heck, but definitely do NOT store it with your IV and/or ciphertext. That'd be bad.</p>

<blockquote>
  <p>do not decrypt the data unless it is really needed, i.e. not upon read from the database. Instead, hold cipher text in memory.</p>
</blockquote>

<p>Definitely. Holding cipher text in memory in fine, but don't pass it around anywhere, and don't decrypt except when you absolutely must, and even then don't EXPOSE the entire unencrypted dataset - only what is needed from it at the minimum. Also, do not hold the key in memory if possible - a memory dump could expose it.</p>

<p><strong>Additions:</strong></p>

<ul>
<li>Whatever database you store your cipher text in, restrict read access entirely to the proc(s) that select for a given identifier. Do not allow read access to the tables that store this data to ANYONE, even the SA account. This way, a person who breaks into your system will have a hard time pulling down your cipher texts without knowing what IDs to look for. Do the same for any table(s) referencing the identifier on the ciphertext table. <strong>DO NOT ALLOW BLANKET READS OF THESE TABLES!</strong></li>
<li>Restrict database access by IP</li>
<li>Never persist any unencrypted plaintext in memory over state. Allow it to be dereferenced/garbage collected as soon as the request is completed.</li>
<li>Restrict the server(s) running this code to as few users as possible.</li>
<li>Possibly combine encryption methods for a stronger ciphertext (AES + Blowfish for example)</li>
</ul>

<p>Hope these help. Some of them are my personal opinions but remain PCI compliant to the best of my knowledge.</p>
","9640","<c#><.net><encryption><encryption-symmetric><pci-compliance>","10","10","4","2018-08-29 10:06:37","22385934","5","7","1076479","","2018-07-20 15:36:50","2014-03-13 16:40:43",""
"22385229","Best practices for (symmetric) encryption in .Net?","<p>What is considered ""best practice"" for encrypting certain sensitive or personally identifiable data in a SQL database (under PCI, HIPAA, or other applicable compliance standards)?</p>

<p>There are many questions here regarding individual aspects of a solution, but I have not seen any that discuss the approach at a high level. 
After looking around for quite some time, I came up with the following:</p>

<ul>
<li>Use CryptoAPI and Rijndael </li>
<li>Generate IV and store it with the encrypted data </li>
<li>Use DPAPI (Machine scope) to ""protect"" the symmetric key</li>
<li>Store the symmetric key in the registry or a file or the database, split the key and store parts in multiple places for added protection</li>
<li>do not decrypt the data unless it is really needed, i.e. not upon read from the database. Instead, hold cipher text in memory. </li>
</ul>

<p>Is this adequate? Outdated? Audit-safe? Reckless?</p>
","<p>I saw that one of the previous comments mentioned that it doesn't matter if you use CryptoAPI. I just wanted to point out that CryptoAPI is FIPS 140-2 compliant, while Bouncy Castle and the built-in managed classes (all the ones with ""Managed"" at the end of their names in the System.Security.Cryptography namespace) are not. If you have a requirement for FIPS compliance, it's probably easiest to for you to use CryptoAPI. </p>
","9640","<c#><.net><encryption><encryption-symmetric><pci-compliance>","10","1","4","2018-08-29 10:06:37","22385934","5","7","1076479","","2018-07-20 15:36:50","2014-03-13 16:40:43",""
"22385229","Best practices for (symmetric) encryption in .Net?","<p>What is considered ""best practice"" for encrypting certain sensitive or personally identifiable data in a SQL database (under PCI, HIPAA, or other applicable compliance standards)?</p>

<p>There are many questions here regarding individual aspects of a solution, but I have not seen any that discuss the approach at a high level. 
After looking around for quite some time, I came up with the following:</p>

<ul>
<li>Use CryptoAPI and Rijndael </li>
<li>Generate IV and store it with the encrypted data </li>
<li>Use DPAPI (Machine scope) to ""protect"" the symmetric key</li>
<li>Store the symmetric key in the registry or a file or the database, split the key and store parts in multiple places for added protection</li>
<li>do not decrypt the data unless it is really needed, i.e. not upon read from the database. Instead, hold cipher text in memory. </li>
</ul>

<p>Is this adequate? Outdated? Audit-safe? Reckless?</p>
","<p>I would add:</p>

<ul>
<li><p>Keeping the IV hidden is not important. It's OK if the IV is public. Just use good IVs, which means, use a cryptographic-strong random number generator so that your IVs are indistinguishable from random.</p></li>
<li><p>Storing the encryption key separate from the data that it encrypts.</p></li>
<li><p>Add authentication to your encryption. For example, add an HMAC keyed with a second symmetric encryption key, covering the ciphertext. If you don't use some form of authenticated encryption, then your ciphertext could be modified, and you have no way of knowing (AES will decrypt garbage just fine.) You want any tampering of the ciphertext to be noticed.</p></li>
</ul>
","9640","<c#><.net><encryption><encryption-symmetric><pci-compliance>","10","0","4","2018-08-29 10:06:37","22385934","5","7","1076479","","2018-07-20 15:36:50","2014-03-13 16:40:43",""
"22385229","Best practices for (symmetric) encryption in .Net?","<p>What is considered ""best practice"" for encrypting certain sensitive or personally identifiable data in a SQL database (under PCI, HIPAA, or other applicable compliance standards)?</p>

<p>There are many questions here regarding individual aspects of a solution, but I have not seen any that discuss the approach at a high level. 
After looking around for quite some time, I came up with the following:</p>

<ul>
<li>Use CryptoAPI and Rijndael </li>
<li>Generate IV and store it with the encrypted data </li>
<li>Use DPAPI (Machine scope) to ""protect"" the symmetric key</li>
<li>Store the symmetric key in the registry or a file or the database, split the key and store parts in multiple places for added protection</li>
<li>do not decrypt the data unless it is really needed, i.e. not upon read from the database. Instead, hold cipher text in memory. </li>
</ul>

<p>Is this adequate? Outdated? Audit-safe? Reckless?</p>
","<p>Taken more generic list of best practices, from OWASP (<a href=""https://www.owasp.org/index.php/Cryptographic_Storage_Cheat_Sheet#Rule_-_Use_strong_approved_cryptographic_algorithms"" rel=""nofollow noreferrer"">Cryptographic Storage Cheat Sheet</a>):</p>

<ul>
<li>Use strong approved cryptographic algorithms

<ul>
<li>Do not implement an existing cryptographic algorithm on your own</li>
<li>Only use approved public algorithms such as AES, RSA public key cryptography, and SHA-256 or better for hashing</li>
<li>Do not use weak algorithms, such as MD5 or SHA1</li>
<li>Avoid hashing for password storage, instead use Argon2, PBKDF2, bcrypt or scrypt</li>
</ul></li>
<li>Use approved cryptographic modes

<ul>
<li>In general, you should not use AES, DES or other symmetric cipher primitives directly. <a href=""https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r4.pdf"" rel=""nofollow noreferrer"">NIST</a> approved modes should be used instead. Quote from Nist: ""The approved algorithms for encryption/decryption are symmetric key algorithms: AES and TDEA.""</li>
</ul></li>
<li>Use strong random numbers</li>
<li>Ensure that any secret key is protected from unauthorized access</li>
</ul>

<hr>

<p>Also, according to this <a href=""https://www.cisco.com/c/en/us/about/security-center/next-generation-cryptography.html#ftn2"" rel=""nofollow noreferrer"">Cisco article</a>:</p>

<ul>
<li>DES is to be avoided and so is RSA-768, -1024</li>
<li>RSA-2048 and RSA-3072 are acceptable</li>
<li>AES-CBC mode is acceptable, while</li>
<li>AES-GCM mode is part of the Next Generation Encription.</li>
</ul>
","9640","<c#><.net><encryption><encryption-symmetric><pci-compliance>","10","1","4","2018-08-29 10:06:37","22385934","5","7","1076479","","2018-07-20 15:36:50","2014-03-13 16:40:43",""
"11511410","AES cipher in GCM, CCM, or CBC-MAC mode?","<p>I've been looking around for an article describing these modes in layman's terms but have not yet found anything helpful. So, what are the positives and negatives of each mode? 
Thanks</p>

<p>GCM</p>

<p>CCM</p>

<p>CBC-MAC</p>
","<p><code>CCM</code>-
this mode accepts a variable-length authentication tags from 32-bits to 128-bits so it actually allowing varying degrees of protection against unauthorized modifications the cons:</p>

<ul>
<li>The CCM mode dose not provide for confidentiality-only services. in some cases,  it
uses data authenticity mechanism from external.</li>
</ul>

<p><code>GCM</code>-
The encryption and authentication of GCM are secure against the chosen-plaintext attack, and GCM is also secure while using the AES block cipher. but:</p>

<ul>
<li>There are security problems when reusing the IV</li>
</ul>

<p>For both <code>GCM</code> and <code>CCM</code> you have to use timestamps or replay attack can occur and of course you need an appropriate tag length.</p>

<p>for <code>CBC-MAC</code> it depends because you use <code>CBC</code> to create the MAC and CBC offers serial encryption and parallel decryption but a change of one bit in a block changes everything that comes after in the encryption but doesn't affect the decryption. A known problem with <code>CBC-MAC</code> is using the same key for encryption and for authentication in this case if you use CBC mode so the last block would be the MAC.</p>

<p>just for the smile - <a href=""http://xkcd.com/153/"" rel=""nofollow noreferrer"">Cryptography</a> </p>

<p>*here is the place to mention that one of the sources I used is from a german university research.</p>

<p>**EDIT:**found the name of it: ruhr-universität-bochum.</p>
","9099","<aes><encryption-symmetric><aes-gcm><cbc-mac>","3","2","1","2017-08-04 08:19:06","11512164","0","0","1507724","","2012-07-16 20:35:13","2012-07-16 19:43:05",""
"9574850","Rijndael padding or length is invalid","<p>I am trying to encrypt/decrypt a string using eith Rijndael or Aes and the code below.</p>

<pre><code>public class Crypto
{
    private const string defaultVector = ""asdfg123456789"";
    private const CipherMode cipherMode = CipherMode.CBC;
    //Have tried PaddingMode.ISO10126, PaddingMode.None, and PaddingMode.PKCS7
    private const PaddingMode paddingMode = PaddingMode.ISO10126;
    private const int iterations = 2;
    private static Rijndael GetCrypto(string passphrase)
    {
        var crypt = Rijndael.Create();
        crypt.Mode = cipherMode;
        crypt.Padding = paddingMode;
        crypt.BlockSize = 256;
        crypt.KeySize = 256;
        crypt.Key =
            new Rfc2898DeriveBytes(passphrase, Encoding.Unicode.GetBytes(defaultVector), iterations).GetBytes(32);
        crypt.IV = new Rfc2898DeriveBytes(passphrase, Encoding.Unicode.GetBytes(defaultVector), iterations).GetBytes(32);
        return crypt;
    }
    public static string Encrypt(string plainText, string passphrase)
    {
        byte[] clearData = Encoding.Unicode.GetBytes(plainText);
        byte[] encryptedData;
        var crypt = GetCrypto(passphrase);
        using (var ms = new MemoryStream())
        {
            using (var cs = new CryptoStream(ms, crypt.CreateEncryptor(), CryptoStreamMode.Write))
            {
                cs.Write(clearData, 0, clearData.Length);
                //cs.FlushFinalBlock(); //Have tried this active and commented with no change.
            }
            encryptedData = ms.ToArray();
        }
        //Changed per Xint0's answer.
        return Convert.ToBase64String(encryptedData);
    }
    public static string Decrypt(string cipherText, string passphrase)
    {
        //Changed per Xint0's answer.
        byte[] encryptedData = Convert.FromBase64String(cipherText);
        byte[] clearData;
        var crypt = GetCrypto(passphrase);
        using (var ms = new MemoryStream())
        {
                using (var cs = new CryptoStream(ms, crypt.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(encryptedData, 0, encryptedData.Length);
                    //I have tried adding a cs.FlushFinalBlock(); here as well.
                }
                clearData = ms.ToArray();
        }
        return Encoding.Unicode.GetString(clearData);
    }
}
</code></pre>

<p>//Edits: I have changed over the Unicode calls to Convert.ToBase64String per Xint0's answer below. </p>

<p>On the cs.Write in Decrypt method, I am getting the error that ""Padding is invalid and cannot be removed.""</p>

<p>I have tried setting the padding to PaddingMode.None but I get ""Length of the data to encrypt is invalid."" on the cs.Write in the Encrypt method.</p>

<p>I've looked at these and nothing they've said seems to work.</p>

<p><a href=""https://stackoverflow.com/questions/8061581/padding-is-invalid-and-cannot-be-removed"">Padding is invalid and cannot be removed</a></p>

<p><a href=""https://stackoverflow.com/questions/8583112/padding-is-invalid-and-cannot-be-removed"">Padding is invalid and cannot be removed?</a></p>

<p>Stack trace shows System.Security.CryptographicException is coming from RijndaelManagedTransform.DecryptData(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[]&amp; outputBuffer, Int32 outputOffset, PaddingMode paddingMode, Boolean fLast).</p>
","<p>I see two problems:</p>

<ol>
<li><p>You are not flushing and closing the streams before calling <code>ms.ToArray()</code>. Change it to:</p>

<pre><code>...
using (var cs = new CryptoStream(ms, crypt.CreateEncryptor(), CryptoStreamMode.Write))
{
    cs.Write(clearData, 0, clearData.Length);
    cs.FlushFinalBlock();
    cs.Close();
}

ms.Close();
encryptedData = ms.ToArray();
...
</code></pre></li>
<li><p>In <code>Encrypt</code> the resulting byte array <code>encryptedData</code> is <strong>NOT</strong> a Unicode string, yet you are using a Unicode encoder to get a string from the byte array.  Instead of that use <code>System.Convert.ToBase64String()</code> in <code>Encrypt</code> and <code>System.Convert.FromBase64String()</code> in <code>Decrypt</code>.</p></li>
</ol>

<p>In <code>Encrypt</code> do:</p>

<pre><code>return System.Convert.ToBase64String(encryptedData);
</code></pre>

<p>In <code>Decrypt</code> do:</p>

<pre><code>byte[] encryptedData = System.Convert.FromBase64String(cipherText);
</code></pre>

<p><strong>EDIT</strong></p>

<p>The biggest problem is the return value of <code>Encrypt</code>. The result of encrypting the byte representation of a Unicode string is <strong><em>NOT</em></strong> a byte representation of a Unicode string.  You should not use the value of <code>encryptedData</code> with <code>Encoding.Unicode.GetString()</code> to get a string representation of the encrypted data. Use <code>System.Convert.ToBase64String()</code> to get a string representation of the encrypted data.  Please see the Remarks section in the <a href=""http://msdn.microsoft.com/en-us/library/86hf4sb8.aspx"" rel=""nofollow"">Encoding Class</a> MSDN Documentation.</p>

<p><strong>EDIT 2</strong></p>

<p>Note that Rijndael is not exactly AES, if you are interoperating with AES the block size should always be 128-bits, independent of the key size. For details you can read about it <a href=""http://blogs.msdn.com/b/shawnfa/archive/2006/10/09/the-differences-between-rijndael-and-aes.aspx"" rel=""nofollow"">here</a>.</p>
","8761","<c#><aes><rijndael><encryption-symmetric>","1","1","3","2015-02-02 12:14:53","9575191","0","0","-1","","2017-05-23 12:12:08","2012-03-05 22:12:40",""
"9574850","Rijndael padding or length is invalid","<p>I am trying to encrypt/decrypt a string using eith Rijndael or Aes and the code below.</p>

<pre><code>public class Crypto
{
    private const string defaultVector = ""asdfg123456789"";
    private const CipherMode cipherMode = CipherMode.CBC;
    //Have tried PaddingMode.ISO10126, PaddingMode.None, and PaddingMode.PKCS7
    private const PaddingMode paddingMode = PaddingMode.ISO10126;
    private const int iterations = 2;
    private static Rijndael GetCrypto(string passphrase)
    {
        var crypt = Rijndael.Create();
        crypt.Mode = cipherMode;
        crypt.Padding = paddingMode;
        crypt.BlockSize = 256;
        crypt.KeySize = 256;
        crypt.Key =
            new Rfc2898DeriveBytes(passphrase, Encoding.Unicode.GetBytes(defaultVector), iterations).GetBytes(32);
        crypt.IV = new Rfc2898DeriveBytes(passphrase, Encoding.Unicode.GetBytes(defaultVector), iterations).GetBytes(32);
        return crypt;
    }
    public static string Encrypt(string plainText, string passphrase)
    {
        byte[] clearData = Encoding.Unicode.GetBytes(plainText);
        byte[] encryptedData;
        var crypt = GetCrypto(passphrase);
        using (var ms = new MemoryStream())
        {
            using (var cs = new CryptoStream(ms, crypt.CreateEncryptor(), CryptoStreamMode.Write))
            {
                cs.Write(clearData, 0, clearData.Length);
                //cs.FlushFinalBlock(); //Have tried this active and commented with no change.
            }
            encryptedData = ms.ToArray();
        }
        //Changed per Xint0's answer.
        return Convert.ToBase64String(encryptedData);
    }
    public static string Decrypt(string cipherText, string passphrase)
    {
        //Changed per Xint0's answer.
        byte[] encryptedData = Convert.FromBase64String(cipherText);
        byte[] clearData;
        var crypt = GetCrypto(passphrase);
        using (var ms = new MemoryStream())
        {
                using (var cs = new CryptoStream(ms, crypt.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(encryptedData, 0, encryptedData.Length);
                    //I have tried adding a cs.FlushFinalBlock(); here as well.
                }
                clearData = ms.ToArray();
        }
        return Encoding.Unicode.GetString(clearData);
    }
}
</code></pre>

<p>//Edits: I have changed over the Unicode calls to Convert.ToBase64String per Xint0's answer below. </p>

<p>On the cs.Write in Decrypt method, I am getting the error that ""Padding is invalid and cannot be removed.""</p>

<p>I have tried setting the padding to PaddingMode.None but I get ""Length of the data to encrypt is invalid."" on the cs.Write in the Encrypt method.</p>

<p>I've looked at these and nothing they've said seems to work.</p>

<p><a href=""https://stackoverflow.com/questions/8061581/padding-is-invalid-and-cannot-be-removed"">Padding is invalid and cannot be removed</a></p>

<p><a href=""https://stackoverflow.com/questions/8583112/padding-is-invalid-and-cannot-be-removed"">Padding is invalid and cannot be removed?</a></p>

<p>Stack trace shows System.Security.CryptographicException is coming from RijndaelManagedTransform.DecryptData(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[]&amp; outputBuffer, Int32 outputOffset, PaddingMode paddingMode, Boolean fLast).</p>
","<p>I have spend a lot of my time for finding what was causing <strong>CryptographicException</strong> and I was googling too including Stackoverflow.<br>
It was a stupid mistake (as often when programming with copy-paste) as follow:</p>

<p>It was throwing on method <em>FlushFinalBlock()</em> from instance of <em>CryptoStream</em>.</p>

<p>Look at <strong>WRONG</strong> code:</p>

<pre><code>CryptoStream cs = new CryptoStream(ms, rj.CreateDecryptor(rj.Key, rj.IV), CryptoStreamMode.Write);
</code></pre>

<p>I used it to encrypt so you can see <em>CryptoStreamMode.<strong>Write</em></strong> but in the same instruction I was creating decryptor instead of encryptor (see second parameter in the constructor).</p>

<p>Be careful and check it to avoid wasting your precious time ;)</p>

<p>Regards<br>
Bronek</p>
","8761","<c#><aes><rijndael><encryption-symmetric>","1","3","3","2015-02-02 12:14:53","9575191","0","0","-1","","2017-05-23 12:12:08","2012-03-05 22:12:40",""
"9574850","Rijndael padding or length is invalid","<p>I am trying to encrypt/decrypt a string using eith Rijndael or Aes and the code below.</p>

<pre><code>public class Crypto
{
    private const string defaultVector = ""asdfg123456789"";
    private const CipherMode cipherMode = CipherMode.CBC;
    //Have tried PaddingMode.ISO10126, PaddingMode.None, and PaddingMode.PKCS7
    private const PaddingMode paddingMode = PaddingMode.ISO10126;
    private const int iterations = 2;
    private static Rijndael GetCrypto(string passphrase)
    {
        var crypt = Rijndael.Create();
        crypt.Mode = cipherMode;
        crypt.Padding = paddingMode;
        crypt.BlockSize = 256;
        crypt.KeySize = 256;
        crypt.Key =
            new Rfc2898DeriveBytes(passphrase, Encoding.Unicode.GetBytes(defaultVector), iterations).GetBytes(32);
        crypt.IV = new Rfc2898DeriveBytes(passphrase, Encoding.Unicode.GetBytes(defaultVector), iterations).GetBytes(32);
        return crypt;
    }
    public static string Encrypt(string plainText, string passphrase)
    {
        byte[] clearData = Encoding.Unicode.GetBytes(plainText);
        byte[] encryptedData;
        var crypt = GetCrypto(passphrase);
        using (var ms = new MemoryStream())
        {
            using (var cs = new CryptoStream(ms, crypt.CreateEncryptor(), CryptoStreamMode.Write))
            {
                cs.Write(clearData, 0, clearData.Length);
                //cs.FlushFinalBlock(); //Have tried this active and commented with no change.
            }
            encryptedData = ms.ToArray();
        }
        //Changed per Xint0's answer.
        return Convert.ToBase64String(encryptedData);
    }
    public static string Decrypt(string cipherText, string passphrase)
    {
        //Changed per Xint0's answer.
        byte[] encryptedData = Convert.FromBase64String(cipherText);
        byte[] clearData;
        var crypt = GetCrypto(passphrase);
        using (var ms = new MemoryStream())
        {
                using (var cs = new CryptoStream(ms, crypt.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(encryptedData, 0, encryptedData.Length);
                    //I have tried adding a cs.FlushFinalBlock(); here as well.
                }
                clearData = ms.ToArray();
        }
        return Encoding.Unicode.GetString(clearData);
    }
}
</code></pre>

<p>//Edits: I have changed over the Unicode calls to Convert.ToBase64String per Xint0's answer below. </p>

<p>On the cs.Write in Decrypt method, I am getting the error that ""Padding is invalid and cannot be removed.""</p>

<p>I have tried setting the padding to PaddingMode.None but I get ""Length of the data to encrypt is invalid."" on the cs.Write in the Encrypt method.</p>

<p>I've looked at these and nothing they've said seems to work.</p>

<p><a href=""https://stackoverflow.com/questions/8061581/padding-is-invalid-and-cannot-be-removed"">Padding is invalid and cannot be removed</a></p>

<p><a href=""https://stackoverflow.com/questions/8583112/padding-is-invalid-and-cannot-be-removed"">Padding is invalid and cannot be removed?</a></p>

<p>Stack trace shows System.Security.CryptographicException is coming from RijndaelManagedTransform.DecryptData(Byte[] inputBuffer, Int32 inputOffset, Int32 inputCount, Byte[]&amp; outputBuffer, Int32 outputOffset, PaddingMode paddingMode, Boolean fLast).</p>
","<p>I had a similar problem, the issue in decrypt method was initializing an empty memory stream. when it worked when I initialized it with the cipher text byte array like this:</p>

<pre><code>MemoryStream ms = new MemoryStream(cipherText);
</code></pre>
","8761","<c#><aes><rijndael><encryption-symmetric>","1","0","3","2015-02-02 12:14:53","9575191","0","0","-1","","2017-05-23 12:12:08","2012-03-05 22:12:40",""
"37439981","openssl_encrypt() randomly fails - IV passed is only ${x} bytes long, cipher expects an IV of precisely 16 bytes","<p>This is the code I use to encrypt/decrypt the data:</p>

<pre class=""lang-php prettyprint-override""><code>// Set the method
$method = 'AES-128-CBC';

// Set the encryption key
$encryption_key = 'myencryptionkey';

// Generet a random initialisation vector
$iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length($method));

// Define the date to be encrypted
$data = ""Encrypt me, please!"";

var_dump(""Before encryption: $data"");

// Encrypt the data
$encrypted = openssl_encrypt($data, $method, $encryption_key, 0, $iv);

var_dump(""Encrypted: ${encrypted}"");

// Append the vector at the end of the encrypted string
$encrypted = $encrypted . ':' . $iv;

// Explode the string using the `:` separator.
$parts = explode(':', $encrypted);

// Decrypt the data
$decrypted = openssl_decrypt($parts[0], $method, $encryption_key, 0, $parts[1]);

var_dump(""Decrypted: ${decrypted}"");
</code></pre>

<p>It ususaly works fine, but sometimes (1 in 10 or even less often) it fails. When it fails than the text is only partially encrypted:</p>

<p>This is the error message when it happens:</p>

<pre><code>Warning: openssl_decrypt(): IV passed is only 10 bytes long, cipher expects an IV of precisely 16 bytes, padding with \0
</code></pre>

<p>And when it happens the encrypted text looks like:</p>

<pre><code>Encrypt me���L�se!
</code></pre>

<p>I thought that it might be caused by a bug in PHP, but I've tested on different hosts: PHP 7.0.6 and PHP 5.6. I've also tried multiple online PHP parsers like phpfidle.org or 3v4l.org.</p>

<p>It seems that <code>openssl_random_pseudo_bytes</code> not always returns a string of a proper length, but I have no idea why.</p>

<p>Here's the sample: <a href=""https://3v4l.org/RZV8d"" rel=""noreferrer"">https://3v4l.org/RZV8d</a></p>

<p>Keep on refreshing the page, you'll get the error at some point.</p>
","<p>When you generate a random IV, you get <a href=""https://3v4l.org/ookl5"" rel=""noreferrer""><em>raw binary</em></a>. There's a nonzero chance that the binary strings will contain a <code>:</code> or <code>\0</code> character, which you're using to separate the IV from the ciphertext. Doing so makes <code>explode()</code> give you a shorter string. Demo: <a href=""https://3v4l.org/3ObfJ"" rel=""noreferrer"">https://3v4l.org/3ObfJ</a></p>

<p>The trivial solution would be to add base64 encoding/decoding to this process.</p>

<hr>

<p>That said, <a href=""http://www.cryptofails.com/post/75204435608/write-crypto-code-dont-publish-it"" rel=""noreferrer"">please don't roll your own crypto</a>. In particular, <a href=""https://paragonie.com/blog/2015/05/using-encryption-and-authentication-correctly"" rel=""noreferrer"">unauthenticated encryption is dangerous</a> and <a href=""https://paragonie.com/blog/2015/11/choosing-right-cryptography-library-for-your-php-project-guide"" rel=""noreferrer"">there are already secure libraries that solve this problem</a>.</p>

<p>Instead of writing your own, consider just using <a href=""https://github.com/defuse/php-encryption"" rel=""noreferrer"">defuse/php-encryption</a>. This is the safe choice.</p>
","8604","<php><encryption><aes><encryption-symmetric><php-openssl>","6","11","2","2018-11-18 05:08:38","37440351","0","1","2224584","","2018-11-18 05:08:38","2016-05-25 14:21:34",""
"37439981","openssl_encrypt() randomly fails - IV passed is only ${x} bytes long, cipher expects an IV of precisely 16 bytes","<p>This is the code I use to encrypt/decrypt the data:</p>

<pre class=""lang-php prettyprint-override""><code>// Set the method
$method = 'AES-128-CBC';

// Set the encryption key
$encryption_key = 'myencryptionkey';

// Generet a random initialisation vector
$iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length($method));

// Define the date to be encrypted
$data = ""Encrypt me, please!"";

var_dump(""Before encryption: $data"");

// Encrypt the data
$encrypted = openssl_encrypt($data, $method, $encryption_key, 0, $iv);

var_dump(""Encrypted: ${encrypted}"");

// Append the vector at the end of the encrypted string
$encrypted = $encrypted . ':' . $iv;

// Explode the string using the `:` separator.
$parts = explode(':', $encrypted);

// Decrypt the data
$decrypted = openssl_decrypt($parts[0], $method, $encryption_key, 0, $parts[1]);

var_dump(""Decrypted: ${decrypted}"");
</code></pre>

<p>It ususaly works fine, but sometimes (1 in 10 or even less often) it fails. When it fails than the text is only partially encrypted:</p>

<p>This is the error message when it happens:</p>

<pre><code>Warning: openssl_decrypt(): IV passed is only 10 bytes long, cipher expects an IV of precisely 16 bytes, padding with \0
</code></pre>

<p>And when it happens the encrypted text looks like:</p>

<pre><code>Encrypt me���L�se!
</code></pre>

<p>I thought that it might be caused by a bug in PHP, but I've tested on different hosts: PHP 7.0.6 and PHP 5.6. I've also tried multiple online PHP parsers like phpfidle.org or 3v4l.org.</p>

<p>It seems that <code>openssl_random_pseudo_bytes</code> not always returns a string of a proper length, but I have no idea why.</p>

<p>Here's the sample: <a href=""https://3v4l.org/RZV8d"" rel=""noreferrer"">https://3v4l.org/RZV8d</a></p>

<p>Keep on refreshing the page, you'll get the error at some point.</p>
","<h2>Here's the solution</h2>

<p>I've updated the code from the first post and wrapped it in a class. This is fixed code based on the solution provided by <strong>Scott Arciszewski</strong>.</p>

<pre class=""lang-php prettyprint-override""><code>class Encryptor
{

    /**
     * Holds the Encryptor instance
     * @var Encryptor
     */
    private static $instance;

    /**
     * @var string
     */
    private $method;

    /**
     * @var string
     */
    private $key;

    /**
     * @var string
     */
    private $separator;

    /**
     * Encryptor constructor.
     */
    private function __construct()
    {
        $app = App::getInstance();
        $this-&gt;method = $app-&gt;getConfig('encryption_method');
        $this-&gt;key = $app-&gt;getConfig('encryption_key');
        $this-&gt;separator = ':';
    }

    private function __clone()
    {
    }

    /**
     * Returns an instance of the Encryptor class or creates the new instance if the instance is not created yet.
     * @return Encryptor
     */
    public static function getInstance()
    {
        if (self::$instance === null) {
            self::$instance = new Encryptor();
        }
        return self::$instance;
    }

    /**
     * Generates the initialization vector
     * @return string
     */
    private function getIv()
    {
        return openssl_random_pseudo_bytes(openssl_cipher_iv_length($this-&gt;method));
    }

    /**
     * @param string $data
     * @return string
     */
    public function encrypt($data)
    {
        $iv = $this-&gt;getIv();
        return base64_encode(openssl_encrypt($data, $this-&gt;method, $this-&gt;key, 0, $iv) . $this-&gt;separator . base64_encode($iv));
    }

    /**
     * @param string $dataAndVector
     * @return string
     */
    public function decrypt($dataAndVector)
    {
        $parts = explode($this-&gt;separator, base64_decode($dataAndVector));
        // $parts[0] = encrypted data
        // $parts[1] = initialization vector
        return openssl_decrypt($parts[0], $this-&gt;method, $this-&gt;key, 0, base64_decode($parts[1]));
    }

}
</code></pre>

<h3>Usage</h3>

<pre class=""lang-php prettyprint-override""><code>$encryptor = Encryptor::getInstance();

$encryptedData = $encryptor-&gt;encrypt('Encrypt me please!');
var_dump($encryptedData);

$decryptedData = $encryptor-&gt;decrypt($encryptedData);
var_dump($decryptedData);
</code></pre>
","8604","<php><encryption><aes><encryption-symmetric><php-openssl>","6","2","2","2018-11-18 05:08:38","37440351","0","1","2224584","","2018-11-18 05:08:38","2016-05-25 14:21:34",""
"7954661","AES 256 Encryption with PyCrypto using CBC mode - any weaknesses?","<p>I have the following python script to encrypt/decrypt data using AES 256, could you please tell me if there's anything in the code that may make the encryption weak or if there's anything that I've not taken account of for AES 256 encryption using CBC mode? I've tested the script and it works fine, it is encrypting and decrypting data but just wanted a second opinion. Thanks.</p>

<pre><code>    from Crypto.Cipher import AES
    from Crypto import Random

    BLOCK_SIZE = 32

    INTERRUPT = u'\u0001'

    PAD = u'\u0000'

    def AddPadding(data, interrupt, pad, block_size):
        new_data = ''.join([data, interrupt])
        new_data_len = len(new_data)
        remaining_len = block_size - new_data_len
        to_pad_len = remaining_len % block_size
        pad_string = pad * to_pad_len
        return ''.join([new_data, pad_string])

    def StripPadding(data, interrupt, pad):
        return data.rstrip(pad).rstrip(interrupt)

    SECRET_KEY = Random.new().read(32)

    IV = Random.new().read(16)

    cipher_for_encryption = AES.new(SECRET_KEY, AES.MODE_CBC, IV)
    cipher_for_decryption = AES.new(SECRET_KEY, AES.MODE_CBC, IV)

    def EncryptWithAES(encrypt_cipher, plaintext_data):
        plaintext_padded = AddPadding(plaintext_data, INTERRUPT, PAD, BLOCK_SIZE)
        encrypted = encrypt_cipher.encrypt(plaintext_padded)
        return encrypted

    def DecryptWithAES(decrypt_cipher, encrypted_data):
        decoded_encrypted_data = encrypted_data
        decrypted_data = decrypt_cipher.decrypt(decoded_encrypted_data)
        return StripPadding(decrypted_data, INTERRUPT, PAD)

    our_data_to_encrypt = u'abc11100000'
    encrypted_data = EncryptWithAES(cipher_for_encryption, our_data_to_encrypt)
    print ('Encrypted string:', encrypted_data)

    decrypted_data = DecryptWithAES(cipher_for_decryption, encrypted_data)
    print ('Decrypted string:', decrypted_data)
</code></pre>
","<p>I've seen the code posted on the internet. There are - in principle - not too many things wrong with it, but there is no need to invent your own padding. Furthermore, I don't see why the first padding character is called INTERRUPT. I presume that INTERRUPT and PAD is handled as a single byte (I'm not a Python expert).</p>

<p>The most common padding is PKCS#5 padding. It consists of N bytes with the value of the number of padding bytes. The padding used here looks more like 'ISO' padding, which consists of a single bit set to 1 to distinguish it from the data and other padding bits, and the rest is zero's. That would be code point \u0080 in code.</p>

<p>So the encryption (which can provide confidentiality of data) seems to be used correctly. It depends on the use case if you also need integrity protection and/or authentication, e.g. by using a MAC or HMAC. Of course, no legal guarantees or anything provided.</p>
","8175","<python><encryption><encryption-symmetric><pycrypto>","3","2","1","2011-12-01 22:01:26","8348903","0","2","","","","2011-10-31 13:54:29",""
"7016884","gpg-agent in gpg2","<p>I'm attempting to futureproof some custom software that utilizes GPG (currently v 1.4.10) to perform <strong>symmetric</strong> encryption/decryption processes. My current encryption command looks like this:</p>

<pre><code>gpg --batch --no-tty --no-use-agent --symmetric --cipher-algo AES256 --passphrase ""foobar"" /path/to/file_to_be_encrypted
</code></pre>

<p>Without the <code>--no-use-agent</code> option, I get the infamous error message</p>

<blockquote>
  <p><em>gpg-agent is not available in this session</em></p>
</blockquote>

<p>I'm concerned about a move to gpg2 because, <a href=""http://www.gnupg.org/documentation/manuals/gnupg-devel/GPG-Configuration-Options.html"">according to the documentation</a>, the gpg-agent is always required, and <code>--no-use-agent</code> is simply a dummy option. My gpg calls occur in the background via a daemon process, so this is very much a no-agent scenario (plus the fact that it's symmetric, and I have no need of the agent at all).</p>

<p>Documentation at this level of detail is sparse, so I'm looking for user experience. Does gpg2 incorporate the agent more tightly, so that I don't have to worry about its availability?</p>
","<ol>
<li><p>The way you invoke <code>gpg2</code>, it might fail if the output file <code>path/to/file_to_be_encrypted.gpg</code> already exists. If you want the file to be overwritten, you should provide the <code>--yes</code> option:</p>

<pre><code>gpg2 --batch --yes --no-tty --no-use-agent --symmetric --cipher-algo AES256 --passphrase ""foobar"" /path/to/file_to_be_encrypted
</code></pre></li>
<li><p>When you are using symmetric encryption (like you do), the <em>passphrase constraints</em> (even if set to <em>enforced</em> by <code>gpg-agent</code>) will not be applied at all&mdash;it will just work.</p>

<p>Say the <code>gpg-agent</code> was run like this (and let the <code>mypasswords</code> file even contain the forbidden pattern that exactly matches your password):</p>

<pre><code>eval $(gpg-agent --daemon --enforce-passphrase-constraints --min-passphrase-len 8 --min-passphrase-nonalpha 4 --check-passphrase-pattern mypasswords)
</code></pre>

<p>Then your command would still succeed.</p>

<p>In short: <code>gpg-agent</code> will not make it fail <s>(unless it crashes gpg for some reason&mdash;like wrong configuration or missing executable, which you cannot account for)</s>.</p>

<p><strong>EDIT</strong>: I've just checked and in symmetric mode gpg2 will <strong>work</strong> even if gpg-agent is wrongly configured <strong>or</strong> if the gpg-agent executable is missing.</p>

<p>This is not related, but just in case: I also verified what happens when you try to change the password of your private key while gpg-agent is missing <strong>or</strong> is wrongly configured: gpg2 will report a warning, will not even ask for the new passphrase, and continue working.</p></li>
</ol>

<p>Sources:</p>

<ul>
<li><a href=""http://www.gnupg.org/documentation/manuals/gnupg/Agent-Options.html#option%20--options"" rel=""noreferrer""><code>gpg-agent</code> configuration manual</a></li>
<li><a href=""http://www.gnupg.org/docs.html"" rel=""noreferrer""><code>gpg</code> documentation</a></li>
</ul>
","7794","<gnupg><encryption-symmetric>","8","6","1","2011-08-19 14:20:52","7122618","1","3","681865","","2011-08-10 20:07:27","2011-08-10 19:52:14",""
"29880062","Fast, simple to use symmetric cipher for integer encryption in Java","<p>What is in Java a cipher function for integer encryption having these properties?: </p>

<ul>
<li>Fast</li>
<li>Symmetric-key algorithm</li>
<li>Simple to use (i.e. a couple of lines of code to use it and no external library to include)</li>
<li><s>It is possible to specify the output length (e.g. 20 characters)</s></li>
</ul>

<p>I need to use it only to encrypt/decrypt integers.</p>
","<p>You should never implement a cipher yourself if you want <em>any</em> security. There's just too much what can get wrong.</p>

<p>But you can write your numbers into a <code>byte[]</code> and use a cipher provided with Java like described in <a href=""https://stackoverflow.com/a/6538834/581205"">this answer</a>.</p>
","7184","<java><encryption><encryption-symmetric>","4","1","3","2017-04-27 20:06:51","29881041","5","4","3763649","","2015-04-29 20:40:38","2015-04-26 16:08:27",""
"29880062","Fast, simple to use symmetric cipher for integer encryption in Java","<p>What is in Java a cipher function for integer encryption having these properties?: </p>

<ul>
<li>Fast</li>
<li>Symmetric-key algorithm</li>
<li>Simple to use (i.e. a couple of lines of code to use it and no external library to include)</li>
<li><s>It is possible to specify the output length (e.g. 20 characters)</s></li>
</ul>

<p>I need to use it only to encrypt/decrypt integers.</p>
","<p>The requirement for no external library reduces the list to DES, 3DES and AES. DES and 3DES have a block size of 64 bits whereas AES has a block size of 128 bits. There are different aspects, one can examine this for.</p>

<h1>Ciphertext size</h1>

<p>DES and 3DES are best used for integers that are at most 56-bit wide (non-full long), because the result will be a single block of 8 byte, because of padding. If you encrypt a full long value, then an additional padding block will be added.</p>

<p>AES will always produce a 16 byte ciphertext for any int of long value.</p>

<h1>Speed</h1>

<p>According to <a href=""http://www.cs.wustl.edu/~jain/cse567-06/ftp/encryption_perf/"" rel=""nofollow noreferrer"">this analysis</a> AES (Rijndael-128) is more than twice as fast as DES/3DES with a bigger key size (more secure). AES can be even much faster than DES or 3DES when the CPU supports AES-NI. All current CPUs support this. This is my current result for taken from the <code>openssl speed</code> command.</p>

<p>AES achieves 127MB/s for 16 byte payloads whereas 3DES only achieves 27MB/s. <a href=""https://gist.github.com/artjomb/5d6758ce4c86c1e7aa643f40ba5b192b"" rel=""nofollow noreferrer"">Here</a>'s the data to poke around.</p>

<h1>Security</h1>

<p>Don't use DES for anything serious, because it only has a 56-bit key (64-bit with parity). Brute forcing cost is 2<sup>56</sup>. 3DES is also not that good, because Brute forcing cost is <a href=""https://crypto.stackexchange.com/questions/6345/why-is-triple-des-using-three-different-keys-vulnerable-to-a-meet-in-the-middle"">2<sup>112</sup></a>. Brute forcing cost for AES is 2<sup>128</sup>, 2<sup>192</sup>, 2<sup>256</sup> depending on the used key size.</p>

<h1>Code</h1>

<p>Probably use AES:</p>

<pre><code>private final String CIPHER_NAME = ""AES/ECB/PKCS5Padding"";
private final String ALGORITHM_NAME = ""AES""; // keySizes 128, 192, 256
// private final String CIPHER_NAME = ""DES/ECB/PKCS5Padding"";
// private final String ALGORITHM_NAME = ""DES""; // keySize 56
// private final String CIPHER_NAME = ""DESede/ECB/PKCS5Padding"";
// private final String ALGORITHM_NAME = ""DESede""; // keySize 168

byte[] encrypt(SecretKey key, long num) {
    BigInteger bignum = BigInteger.valueOf(num);
    Cipher cipher = Cipher.getInstance(CIPHER_NAME);
    cipher.init(Cipher.ENCRYPT_MODE, key);
    return cipher.doFinal(bignum.toByteArray());
}

long decrypt(SecretKey key, byte[] ct) {
    Cipher cipher = Cipher.getInstance(CIPHER_NAME);
    cipher.init(Cipher.DECRYPT_MODE, key);
    byte[] pt = cipher.doFinal(ct);
    BigInteger bignum = new BigInteger(pt);
    return bignum.longValue();
}

SecretKey keyGen(String algorithm, int keySize) {
    KeyGenerator keygen = KeyGenerator.getInstance(algorithm);
    keygen.init(keySize);
    return keygen.generateKey();
}
</code></pre>

<h1>Mode of operation</h1>

<p>Here I use ECB mode. It is generally not a good idea to use it. It has a problem that encrypting the same plaintext with the same key results in the same ciphertext. This may not be a property that is acceptable. If it is not acceptable, then you need to use for example CBC mode with a new random IV. With will blow up the ciphertext by an additional block.</p>
","7184","<java><encryption><encryption-symmetric>","4","5","3","2017-04-27 20:06:51","29881041","5","4","3763649","","2015-04-29 20:40:38","2015-04-26 16:08:27",""
"29880062","Fast, simple to use symmetric cipher for integer encryption in Java","<p>What is in Java a cipher function for integer encryption having these properties?: </p>

<ul>
<li>Fast</li>
<li>Symmetric-key algorithm</li>
<li>Simple to use (i.e. a couple of lines of code to use it and no external library to include)</li>
<li><s>It is possible to specify the output length (e.g. 20 characters)</s></li>
</ul>

<p>I need to use it only to encrypt/decrypt integers.</p>
","<p>If you <strong>don't need a secure solution,</strong> but just <strong>fast</strong> one, consider the <a href=""https://en.wikipedia.org/wiki/XOR_cipher"" rel=""noreferrer"">XOR cipher</a>:</p>

<pre><code>int key = ...
....
int b = a ^ key;
int c = b ^ key;
assert (c == a);
</code></pre>
","7184","<java><encryption><encryption-symmetric>","4","5","3","2017-04-27 20:06:51","29881041","5","4","3763649","","2015-04-29 20:40:38","2015-04-26 16:08:27",""
"3351285","Using Rijndael encryption for large files","<p>I'm in a situation where I need to encrypt / decrypt a file of n length securely, ideally using Rijndael, but definitely at 256bit encryption.</p>

<p>I've played around with encryption before and have encrypted/decrypted strings and byte arrays quite happily.
However, because I don't know the size of the file (and it's very feasible that the files in question could be quite large (~2.5gb) I can't just load them up into a byte array and enc/decrypt them in a single bound as I have before.</p>

<p>So, after a bit of reading around on Google, I knew the answer was to encrypt and decrypt the file in chunks, and so I produced the following code:</p>

<pre><code>private static void Enc(string decryptedFileName, string encryptedFileName)
{            
   FileStream fsOutput = File.OpenWrite(encryptedFileName);
   FileStream fsInput = File.OpenRead(decryptedFileName);

   byte[] IVBytes = Encoding.ASCII.GetBytes(""1234567890123456"");

   fsOutput.Write(BitConverter.GetBytes(fsInput.Length), 0, 8);
   fsOutput.Write(IVBytes, 0, 16);

   RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC};
   ICryptoTransform encryptor = symmetricKey.CreateEncryptor(passwordDB.GetBytes(256 / 8), IVBytes);
   CryptoStream cryptoStream = new CryptoStream(fsOutput, encryptor, CryptoStreamMode.Write);

   for (long i = 0; i &lt; fsInput.Length; i += chunkSize)
   {
      byte[] chunkData = new byte[chunkSize];
      fsInput.Read(chunkData, 0, chunkSize);
      cryptoStream.Write(chunkData, 0, chunkData.Length);
   }
   cryptoStream.Close();
   fsInput.Close();
   fsInput.Dispose();
   cryptoStream.Dispose();
}

private static void Dec(string encryptedFileName, string decryptedFileName)
{
    FileStream fsInput = File.OpenRead(encryptedFileName);
    FileStream fsOutput = File.OpenWrite(decryptedFileName);

    byte[] buffer = new byte[8];
    fsInput.Read(buffer, 0, 8);

    long fileLength = BitConverter.ToInt64(buffer, 0);

    byte[] IVBytes = new byte[16];
    fsInput.Read(IVBytes, 0, 16);

    RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC };
    ICryptoTransform decryptor = symmetricKey.CreateDecryptor(passwordDB.GetBytes(256 / 8), IVBytes);
    CryptoStream cryptoStream = new CryptoStream(fsOutput,decryptor,CryptoStreamMode.Write);

    for (long i = 0; i &lt; fsInput.Length; i += chunkSize)
    {
        byte[] chunkData = new byte[chunkSize];
        fsInput.Read(chunkData, 0, chunkSize);
        cryptoStream.Write(chunkData, 0, chunkData.Length);
    }
    cryptoStream.Close();
    cryptoStream.Dispose();
    fsInput.Close();
    fsInput.Dispose();                      
} 
</code></pre>

<p>It all ""looks"" good to me, but sadly looks appear to be deceiving!</p>

<p>Encryption works without error, but during decryption, the ""cryptoStream.Close()"" method throws the following exception:</p>

<blockquote>
  <p>System.Security.Cryptography.CryptographicException
  was unhandled   Message=""Padding is
  invalid and cannot be removed.""<br>
  Source=""mscorlib""   StackTrace:
         at System.Security.Cryptography.RijndaelManagedTransform.DecryptData(Byte[]
  inputBuffer, Int32 inputOffset, Int32
  inputCount, Byte[]&amp; outputBuffer,
  Int32 outputOffset, PaddingMode
  paddingMode, Boolean fLast)
         at System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[]
  inputBuffer, Int32 inputOffset, Int32
  inputCount)
         at System.Security.Cryptography.CryptoStream.FlushFinalBlock()
         at System.Security.Cryptography.CryptoStream.Dispose(Boolean
  disposing)
         at System.IO.Stream.Close()</p>
</blockquote>

<p>It also appears that the unencrypted file size isn't matching the file size expected (ranging from around 8 bytes, to around 60)</p>

<p>I ""fixed"" the exception by altering the RijndaelManaged object creation lines to include a padding type, as below:</p>

<pre><code>RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC,Padding=PaddingMode.None };
</code></pre>

<p>But the file sizes still don't match up and, predictably, the freshly unencrypted file is baloney!</p>

<p>I will admit that I'm now outside of my comfort zone with encryption/decryption, and it's probably a rookie mistake - but I can't spot it!</p>

<p>Any help on resolving this would be greatly appreciated!</p>
","<p>The <a href=""http://msdn.microsoft.com/en-us/library/system.io.stream.read.aspx"" rel=""nofollow noreferrer"">Stream.Read</a> method, returns the number of bytes actually being read from the stream.</p>

<p>You should use this return value as the last parameter in the Write method on the next line.</p>

<p>My code would look like this:</p>

<pre><code>byte[] chunkData = new byte[chunkSize];   
var bytesRead = 0;
while ((bytesRead = fsInput.Read(chunkData, 0, chunkSize)) &gt; 0)
{
    cryptoStream.Write(chunkData, 0, bytesRead);
}
</code></pre>
","6846","<c#><encryption><rijndaelmanaged><encryption-symmetric>","7","3","3","2016-08-09 12:40:29","3352127","0","4","","","","2010-07-28 08:56:04",""
"3351285","Using Rijndael encryption for large files","<p>I'm in a situation where I need to encrypt / decrypt a file of n length securely, ideally using Rijndael, but definitely at 256bit encryption.</p>

<p>I've played around with encryption before and have encrypted/decrypted strings and byte arrays quite happily.
However, because I don't know the size of the file (and it's very feasible that the files in question could be quite large (~2.5gb) I can't just load them up into a byte array and enc/decrypt them in a single bound as I have before.</p>

<p>So, after a bit of reading around on Google, I knew the answer was to encrypt and decrypt the file in chunks, and so I produced the following code:</p>

<pre><code>private static void Enc(string decryptedFileName, string encryptedFileName)
{            
   FileStream fsOutput = File.OpenWrite(encryptedFileName);
   FileStream fsInput = File.OpenRead(decryptedFileName);

   byte[] IVBytes = Encoding.ASCII.GetBytes(""1234567890123456"");

   fsOutput.Write(BitConverter.GetBytes(fsInput.Length), 0, 8);
   fsOutput.Write(IVBytes, 0, 16);

   RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC};
   ICryptoTransform encryptor = symmetricKey.CreateEncryptor(passwordDB.GetBytes(256 / 8), IVBytes);
   CryptoStream cryptoStream = new CryptoStream(fsOutput, encryptor, CryptoStreamMode.Write);

   for (long i = 0; i &lt; fsInput.Length; i += chunkSize)
   {
      byte[] chunkData = new byte[chunkSize];
      fsInput.Read(chunkData, 0, chunkSize);
      cryptoStream.Write(chunkData, 0, chunkData.Length);
   }
   cryptoStream.Close();
   fsInput.Close();
   fsInput.Dispose();
   cryptoStream.Dispose();
}

private static void Dec(string encryptedFileName, string decryptedFileName)
{
    FileStream fsInput = File.OpenRead(encryptedFileName);
    FileStream fsOutput = File.OpenWrite(decryptedFileName);

    byte[] buffer = new byte[8];
    fsInput.Read(buffer, 0, 8);

    long fileLength = BitConverter.ToInt64(buffer, 0);

    byte[] IVBytes = new byte[16];
    fsInput.Read(IVBytes, 0, 16);

    RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC };
    ICryptoTransform decryptor = symmetricKey.CreateDecryptor(passwordDB.GetBytes(256 / 8), IVBytes);
    CryptoStream cryptoStream = new CryptoStream(fsOutput,decryptor,CryptoStreamMode.Write);

    for (long i = 0; i &lt; fsInput.Length; i += chunkSize)
    {
        byte[] chunkData = new byte[chunkSize];
        fsInput.Read(chunkData, 0, chunkSize);
        cryptoStream.Write(chunkData, 0, chunkData.Length);
    }
    cryptoStream.Close();
    cryptoStream.Dispose();
    fsInput.Close();
    fsInput.Dispose();                      
} 
</code></pre>

<p>It all ""looks"" good to me, but sadly looks appear to be deceiving!</p>

<p>Encryption works without error, but during decryption, the ""cryptoStream.Close()"" method throws the following exception:</p>

<blockquote>
  <p>System.Security.Cryptography.CryptographicException
  was unhandled   Message=""Padding is
  invalid and cannot be removed.""<br>
  Source=""mscorlib""   StackTrace:
         at System.Security.Cryptography.RijndaelManagedTransform.DecryptData(Byte[]
  inputBuffer, Int32 inputOffset, Int32
  inputCount, Byte[]&amp; outputBuffer,
  Int32 outputOffset, PaddingMode
  paddingMode, Boolean fLast)
         at System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[]
  inputBuffer, Int32 inputOffset, Int32
  inputCount)
         at System.Security.Cryptography.CryptoStream.FlushFinalBlock()
         at System.Security.Cryptography.CryptoStream.Dispose(Boolean
  disposing)
         at System.IO.Stream.Close()</p>
</blockquote>

<p>It also appears that the unencrypted file size isn't matching the file size expected (ranging from around 8 bytes, to around 60)</p>

<p>I ""fixed"" the exception by altering the RijndaelManaged object creation lines to include a padding type, as below:</p>

<pre><code>RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC,Padding=PaddingMode.None };
</code></pre>

<p>But the file sizes still don't match up and, predictably, the freshly unencrypted file is baloney!</p>

<p>I will admit that I'm now outside of my comfort zone with encryption/decryption, and it's probably a rookie mistake - but I can't spot it!</p>

<p>Any help on resolving this would be greatly appreciated!</p>
","<p>The problem is that I was using:</p>

<pre><code>passwordDB.GetBytes(256 / 8)
</code></pre>

<p>within the constructor for the RijndaelManaged object in both the Encryption and Decryption methods, and I wasn't re-initialising the passwordDB object before attempting to decrypt.</p>

<p>The resolution was to simply including the construction of the passwordDB object within the first lines of both the Enc and Dec methods, as follows:</p>

<pre><code>        private static void Enc(string decryptedFileName, string encryptedFileName)
        {
            PasswordDeriveBytes passwordDB = new PasswordDeriveBytes(""ThisIsMyPassword"", Encoding.ASCII.GetBytes(""thisIsMysalt!""), ""MD5"", 2);
            byte[] passwordBytes = passwordDB.GetBytes(128 / 8);

            using (FileStream fsOutput = File.OpenWrite(encryptedFileName))
            {
                using(FileStream fsInput = File.OpenRead(decryptedFileName))
                {
                    byte[] IVBytes = Encoding.ASCII.GetBytes(""1234567890123456"");

                    fsOutput.Write(BitConverter.GetBytes(fsInput.Length), 0, 8);
                    fsOutput.Write(IVBytes, 0, 16);

                    RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC,Padding=PaddingMode.ANSIX923};
                    ICryptoTransform encryptor = symmetricKey.CreateEncryptor(passwordBytes, IVBytes);                   

                    using (CryptoStream cryptoStream = new CryptoStream(fsOutput, encryptor, CryptoStreamMode.Write))
                    {
                        for (long i = 0; i &lt; fsInput.Length; i += chunkSize)
                        {
                            byte[] chunkData = new byte[chunkSize];
                            int bytesRead = 0;
                            while ((bytesRead = fsInput.Read(chunkData, 0, chunkSize)) &gt; 0)
                            {
                                if (bytesRead != 16)
                                {
                                    for (int x = bytesRead - 1; x &lt; chunkSize; x++)
                                    {
                                        chunkData[x] = 0;
                                    }
                                }
                                cryptoStream.Write(chunkData, 0, chunkSize);
                            }
                        }
                        cryptoStream.FlushFinalBlock();
                    }
                }
            }            
        }

        private static void Dec(string encryptedFileName, string decryptedFileName)
        {
            PasswordDeriveBytes passwordDB = new PasswordDeriveBytes(""ThisIsMyPassword"", Encoding.ASCII.GetBytes(""thisIsMysalt!""), ""MD5"", 2);
            byte[] passwordBytes = passwordDB.GetBytes(128 / 8);

            using (FileStream fsInput = File.OpenRead(encryptedFileName))
            {
                using (FileStream fsOutput = File.OpenWrite(decryptedFileName))
                {
                    byte[] buffer = new byte[8];
                    fsInput.Read(buffer, 0, 8);

                    long fileLength = BitConverter.ToInt64(buffer, 0);

                    byte[] IVBytes = new byte[16];
                    fsInput.Read(IVBytes, 0, 16);


                    RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC,Padding=PaddingMode.ANSIX923};
                    ICryptoTransform decryptor = symmetricKey.CreateDecryptor(passwordBytes, IVBytes);

                    using (CryptoStream cryptoStream = new CryptoStream(fsOutput, decryptor, CryptoStreamMode.Write))
                    {
                        for (long i = 0; i &lt; fsInput.Length; i += chunkSize)
                        {
                            byte[] chunkData = new byte[chunkSize];
                            int bytesRead = 0;
                            while ((bytesRead = fsInput.Read(chunkData, 0, chunkSize)) &gt; 0)
                            {
                                cryptoStream.Write(chunkData, 0, bytesRead);
                            }
                        }
                    }
                }
            }
        }
</code></pre>

<p>Knew it had to be a schoolboy error :P</p>
","6846","<c#><encryption><rijndaelmanaged><encryption-symmetric>","7","5","3","2016-08-09 12:40:29","3352127","0","4","","","","2010-07-28 08:56:04",""
"3351285","Using Rijndael encryption for large files","<p>I'm in a situation where I need to encrypt / decrypt a file of n length securely, ideally using Rijndael, but definitely at 256bit encryption.</p>

<p>I've played around with encryption before and have encrypted/decrypted strings and byte arrays quite happily.
However, because I don't know the size of the file (and it's very feasible that the files in question could be quite large (~2.5gb) I can't just load them up into a byte array and enc/decrypt them in a single bound as I have before.</p>

<p>So, after a bit of reading around on Google, I knew the answer was to encrypt and decrypt the file in chunks, and so I produced the following code:</p>

<pre><code>private static void Enc(string decryptedFileName, string encryptedFileName)
{            
   FileStream fsOutput = File.OpenWrite(encryptedFileName);
   FileStream fsInput = File.OpenRead(decryptedFileName);

   byte[] IVBytes = Encoding.ASCII.GetBytes(""1234567890123456"");

   fsOutput.Write(BitConverter.GetBytes(fsInput.Length), 0, 8);
   fsOutput.Write(IVBytes, 0, 16);

   RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC};
   ICryptoTransform encryptor = symmetricKey.CreateEncryptor(passwordDB.GetBytes(256 / 8), IVBytes);
   CryptoStream cryptoStream = new CryptoStream(fsOutput, encryptor, CryptoStreamMode.Write);

   for (long i = 0; i &lt; fsInput.Length; i += chunkSize)
   {
      byte[] chunkData = new byte[chunkSize];
      fsInput.Read(chunkData, 0, chunkSize);
      cryptoStream.Write(chunkData, 0, chunkData.Length);
   }
   cryptoStream.Close();
   fsInput.Close();
   fsInput.Dispose();
   cryptoStream.Dispose();
}

private static void Dec(string encryptedFileName, string decryptedFileName)
{
    FileStream fsInput = File.OpenRead(encryptedFileName);
    FileStream fsOutput = File.OpenWrite(decryptedFileName);

    byte[] buffer = new byte[8];
    fsInput.Read(buffer, 0, 8);

    long fileLength = BitConverter.ToInt64(buffer, 0);

    byte[] IVBytes = new byte[16];
    fsInput.Read(IVBytes, 0, 16);

    RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC };
    ICryptoTransform decryptor = symmetricKey.CreateDecryptor(passwordDB.GetBytes(256 / 8), IVBytes);
    CryptoStream cryptoStream = new CryptoStream(fsOutput,decryptor,CryptoStreamMode.Write);

    for (long i = 0; i &lt; fsInput.Length; i += chunkSize)
    {
        byte[] chunkData = new byte[chunkSize];
        fsInput.Read(chunkData, 0, chunkSize);
        cryptoStream.Write(chunkData, 0, chunkData.Length);
    }
    cryptoStream.Close();
    cryptoStream.Dispose();
    fsInput.Close();
    fsInput.Dispose();                      
} 
</code></pre>

<p>It all ""looks"" good to me, but sadly looks appear to be deceiving!</p>

<p>Encryption works without error, but during decryption, the ""cryptoStream.Close()"" method throws the following exception:</p>

<blockquote>
  <p>System.Security.Cryptography.CryptographicException
  was unhandled   Message=""Padding is
  invalid and cannot be removed.""<br>
  Source=""mscorlib""   StackTrace:
         at System.Security.Cryptography.RijndaelManagedTransform.DecryptData(Byte[]
  inputBuffer, Int32 inputOffset, Int32
  inputCount, Byte[]&amp; outputBuffer,
  Int32 outputOffset, PaddingMode
  paddingMode, Boolean fLast)
         at System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[]
  inputBuffer, Int32 inputOffset, Int32
  inputCount)
         at System.Security.Cryptography.CryptoStream.FlushFinalBlock()
         at System.Security.Cryptography.CryptoStream.Dispose(Boolean
  disposing)
         at System.IO.Stream.Close()</p>
</blockquote>

<p>It also appears that the unencrypted file size isn't matching the file size expected (ranging from around 8 bytes, to around 60)</p>

<p>I ""fixed"" the exception by altering the RijndaelManaged object creation lines to include a padding type, as below:</p>

<pre><code>RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC,Padding=PaddingMode.None };
</code></pre>

<p>But the file sizes still don't match up and, predictably, the freshly unencrypted file is baloney!</p>

<p>I will admit that I'm now outside of my comfort zone with encryption/decryption, and it's probably a rookie mistake - but I can't spot it!</p>

<p>Any help on resolving this would be greatly appreciated!</p>
","<p>There is a CryptoStream class to encrypt/decrypt Streams</p>
","6846","<c#><encryption><rijndaelmanaged><encryption-symmetric>","7","0","3","2016-08-09 12:40:29","3352127","0","4","","","","2010-07-28 08:56:04",""
"12523252","Encryption algorithm preferably having an implementation in java","<p>I am looking for a symmetric key encryption scheme which would encrypt my 12 byte data. As you can see it does not conform to 64 bit or 128 bit boundaries for me to use block ciphering algorithms and I do not want to pad the data as I have restriction on the length of encrypted data. The restriction is because I would be transforming using base 32 it to a printable key which cannot exceed 20 chars. The plain text has very predictable data pattern, so the encryption scheme should be able to hide that. From what I understand, the pseudo random key generation is the only soultion fo this problem, but the solution that encrypts the data and solution that decrypts it, do not talk to each other. </p>
","<p>Why not use RC4?  The cipher text is the exact same size as the clear text - in your case 12 bytes.  It comes with Java (5 or greater).  Here is an example:</p>

<pre><code>import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

public class MyArcFour
{
   public static void main(String [] args) throws Exception
   {
      byte [] key = ""MYVERYINSECUREKEY"".getBytes(""ASCII"");

      String clearText = ""123456789012"";

      Cipher rc4 = Cipher.getInstance(""RC4"");
      SecretKeySpec rc4Key = new SecretKeySpec(key, ""RC4"");
      rc4.init(Cipher.ENCRYPT_MODE, rc4Key);

      byte [] cipherText = rc4.update(clearText.getBytes(""ASCII""));

      System.out.println(""clear (ascii)        "" + clearText);
      System.out.println(""clear (hex)          "" + DatatypeConverter.printHexBinary(clearText.getBytes(""ASCII"")));
      System.out.println(""cipher (hex) is      "" + DatatypeConverter.printHexBinary(cipherText));

      Cipher rc4Decrypt = Cipher.getInstance(""RC4"");
      rc4Decrypt.init(Cipher.DECRYPT_MODE, rc4Key);
      byte [] clearText2 = rc4Decrypt.update(cipherText);

      System.out.println(""decrypted (clear) is "" + new String(clearText2, ""ASCII""));
   }
}
</code></pre>

<p>This generates the following output:</p>

<pre><code>clear (ascii)        123456789012
clear (hex)          313233343536373839303132
cipher (hex) is      CBFB9A712E55EBD985C8F2DF
decrypted (clear) is 123456789012
</code></pre>

<p>Of course you would want to use a better (longer, more random) key than in the example.</p>
","6461","<java><encryption><key><encryption-symmetric><base32>","2","4","3","2016-11-03 16:41:12","","0","3","","","","2012-09-21 01:50:34",""
"12523252","Encryption algorithm preferably having an implementation in java","<p>I am looking for a symmetric key encryption scheme which would encrypt my 12 byte data. As you can see it does not conform to 64 bit or 128 bit boundaries for me to use block ciphering algorithms and I do not want to pad the data as I have restriction on the length of encrypted data. The restriction is because I would be transforming using base 32 it to a printable key which cannot exceed 20 chars. The plain text has very predictable data pattern, so the encryption scheme should be able to hide that. From what I understand, the pseudo random key generation is the only soultion fo this problem, but the solution that encrypts the data and solution that decrypts it, do not talk to each other. </p>
","<p>You want/need a stream cipher: <a href=""http://en.wikipedia.org/wiki/Stream_cipher"" rel=""nofollow"">http://en.wikipedia.org/wiki/Stream_cipher</a></p>
","6461","<java><encryption><key><encryption-symmetric><base32>","2","0","3","2016-11-03 16:41:12","","0","3","","","","2012-09-21 01:50:34",""
"12523252","Encryption algorithm preferably having an implementation in java","<p>I am looking for a symmetric key encryption scheme which would encrypt my 12 byte data. As you can see it does not conform to 64 bit or 128 bit boundaries for me to use block ciphering algorithms and I do not want to pad the data as I have restriction on the length of encrypted data. The restriction is because I would be transforming using base 32 it to a printable key which cannot exceed 20 chars. The plain text has very predictable data pattern, so the encryption scheme should be able to hide that. From what I understand, the pseudo random key generation is the only soultion fo this problem, but the solution that encrypts the data and solution that decrypts it, do not talk to each other. </p>
","<p>You can use a stream cypher like RC4, but as you have found, you <strong>cannot</strong> reuse the key.  For a stream cypher use a key/nonce (nonce = Number used ONCE) combination.  The nonce can be as simple as 1, 2, 3, 4, ... or a date/time and will need to be stored alongside the cyphertext.  Change the key before the nonce recycles round to zero and starts to repeat.  If you use a date/time then ensure that the clock ticks fast enough never to repeat a value.</p>

<p>You have a long term key and a nonce.  Each time you want to encrypt something, hash them to get a session key:</p>

<pre><code>sessionKey &lt;- SHA256(longTermKey + nonce)
</code></pre>

<p>Use this session key once only, then throw it away.  Store the nonce for use in decrypting.  Increment a numerical nonce ready for the next use.  For date/time nonces insert a short delay to ensure the clock has changed.  The nonce <strong>must</strong> be different the next time it is used.</p>

<p>When you change the long term key, you will need to decrypt and re-encrypt all your data.  Alternatively pick a large bit-size for your nonce and keep your long term key <em>very</em> secure.</p>
","6461","<java><encryption><key><encryption-symmetric><base32>","2","1","3","2016-11-03 16:41:12","","0","3","","","","2012-09-21 01:50:34",""
"19468302","DecryptByKey returns null SQL Server 2012","<p>I am trying to decryptbykey and it returns null.</p>

<pre><code>--CREATE MASTER KEY ENCRYPTION
--BY PASSWORD = 'Password1'

--CREATE CERTIFICATE MyCert
--WITH SUBJECT = 'MyCert'

--CREATE SYMMETRIC KEY MyKey
--WITH ALGORITHM = TRIPLE_DES ENCRYPTION
--BY CERTIFICATE MyKey

OPEN SYMMETRIC KEY MyKey DECRYPTION
BY CERTIFICATE MyCert;

INSERT INTO sometable (ENCRYPTBYKEY(KEY_GUID('MyKey'),'12345'));

CLOSE SYMMETRIC KEY MyKey;

OPEN SYMMETRIC KEY MyKey DECRYPTION
BY CERTIFICATE MyCert;

SELECT
    CONVERT(VARCHAR(50), DECRYPTBYKEY(some_column))
FROM sometable;

CLOSE SYMMETRIC KEY MyKey;
</code></pre>

<p>The column is defined as varbinary(256).</p>

<p>The result is null.  How do I change this to get the decrypted value instead of null?  Or what are some of the possible pitfalls or things to check?</p>
","<p>With my sample <code>sometable</code> this script works well. 
So please include your table definition. </p>

<p>Then I suppose you should test IF KEY_GUID('MyKey') IS NOT NULL.. </p>
","6317","<sql-server-2012><encryption-symmetric>","2","2","2","2019-02-04 21:57:55","20198577","0","","1286925","","2013-10-19 16:32:56","2013-10-19 16:27:54",""
"19468302","DecryptByKey returns null SQL Server 2012","<p>I am trying to decryptbykey and it returns null.</p>

<pre><code>--CREATE MASTER KEY ENCRYPTION
--BY PASSWORD = 'Password1'

--CREATE CERTIFICATE MyCert
--WITH SUBJECT = 'MyCert'

--CREATE SYMMETRIC KEY MyKey
--WITH ALGORITHM = TRIPLE_DES ENCRYPTION
--BY CERTIFICATE MyKey

OPEN SYMMETRIC KEY MyKey DECRYPTION
BY CERTIFICATE MyCert;

INSERT INTO sometable (ENCRYPTBYKEY(KEY_GUID('MyKey'),'12345'));

CLOSE SYMMETRIC KEY MyKey;

OPEN SYMMETRIC KEY MyKey DECRYPTION
BY CERTIFICATE MyCert;

SELECT
    CONVERT(VARCHAR(50), DECRYPTBYKEY(some_column))
FROM sometable;

CLOSE SYMMETRIC KEY MyKey;
</code></pre>

<p>The column is defined as varbinary(256).</p>

<p>The result is null.  How do I change this to get the decrypted value instead of null?  Or what are some of the possible pitfalls or things to check?</p>
","<p>The issue was the column in the table wasn't large enough to store the data.  So it was truncating without error.</p>

<p>I increased the column size and the issue was resolved.</p>
","6317","<sql-server-2012><encryption-symmetric>","2","2","2","2019-02-04 21:57:55","20198577","0","","1286925","","2013-10-19 16:32:56","2013-10-19 16:27:54",""
"8394980","The input data is not a complete block","<p><img src=""https://i.stack.imgur.com/zEJfz.png"" alt=""enter image description here""><img src=""https://i.stack.imgur.com/P1o0z.png"" alt=""enter image description here"">Scenario: One symmetric key, each user has his own IV, the documents are stored in a NVARCHAR(MAX) field. When I try to to decrypt the file, I get:<br>
<strong>The input data is not a complete block.</strong></p>

<pre><code>// Create symmetric key
public static byte[] CreateKey()
{
    AesCryptoServiceProvider aesCrypto = (AesCryptoServiceProvider)AesCryptoServiceProvider.Create();
    byte[] key = aesCrypto.Key;
    return key;
}

//Get key (stored in a database)
public static Byte[] GetAppKey()
{
    return db.Encryptors.Where(x =&gt; x.EncryptorID == 1).Single().EncryptionKey.ToArray();
}

// Get application IV (stored in database)
public static Byte[] GetAppIV()
{
    return db.Encryptors.Where(x =&gt; x.EncryptorID == 1).Single().IV.ToArray();
}

// Encrypt document (this will be stored in a VARBINARY(MAX) field
public static byte[] EncryptBinaryToBytes(Binary document, byte[] iv)
{
    byte[] key = GetAppKey();
    byte[] encrypted;

    using (AesCryptoServiceProvider aesCsp = new AesCryptoServiceProvider())
    {
        aesCsp.Key = key;
        aesCsp.IV = iv;

        ICryptoTransform encryptor = aesCsp.CreateEncryptor(aesCsp.Key, aesCsp.IV);

        using (MemoryStream msEncrypt = new MemoryStream())
        {
            using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
            {
                using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                {
                    swEncrypt.Write(document);
                }
                encrypted = msEncrypt.ToArray();
            }
        }
    }
    // return the encrypted document
    return encrypted;
}

// Decrypt document
public static byte[] DecryptBytesToBytes(byte[] document, byte[] iv) 
{
    byte[] key = GetAppKey();

    using (AesCryptoServiceProvider aesCsp = new AesCryptoServiceProvider())
    {
        aesCsp.Key = key;
        aesCsp.IV = iv;

        ICryptoTransform decryptor = aesCsp.CreateDecryptor(aesCsp.Key, aesCsp.IV);

        using (MemoryStream msDecrypt = new MemoryStream())
        {
            using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Write))
            {
                using (StreamWriter swDecrypt = new StreamWriter(csDecrypt))
                {
                    swDecrypt.Write(document);
                }
                byte[] decrypted = msDecrypt.ToArray();
                // return the unencrypted document
                return decrypted;
            }
        }
    }
}
</code></pre>

<p>Thanks in advance.</p>

<p>To store the document</p>

<pre><code>    byte[] fileByte = fluUploadFile.FileBytes;
    Binary document = new Binary(fileByte);

    byte[] appIv = AES.GetAppIV();
    byte[] encryptedDocument = AES.EncryptBinaryToBytes(document, appIv);
    byte[] decryptedDocument = AES.DecryptBytesToBytes(encryptedDocument, appIv);
    Document d = new Document()
    {
        OriginalName = originalName,
        DocSize = fileSize,
        BinaryDocument = encryptedDocument,
        UploadedName = uploadedFileName,
        MimeType = MIMEType,
        DocExtension = extension
    };
    db.Documents.InsertOnSubmit(d);
    db.SubmitChanges();
</code></pre>
","<p>It's really important that you change the data type of the database field to <code>VARBINARY(MAX)</code>, that way you avoid issues with character encodings and byte combinations that cannot be interpreted as legal characters.</p>

<p>Also, I think the problem is that you are not closing the streams before calling <code>ToArray()</code> method on the <code>MemoryStream</code> in both encrypt and decrypt routines. It's very important to call <code>Close()</code> in the <code>CryptoStream</code> so that <code>FlushFinalBlock()</code> is called and the encryption process writes the final block to the stream.</p>

<p>Try moving the call to <code>MemoryStream.ToArray()</code> to the outer <code>using</code> block, that is, outside the <code>using</code> block of <code>CryptoStream</code>, so that <code>Dispose()</code> is called on the <code>CryptoStream</code> and call <code>MemoryStream.Close()</code> before that.</p>

<p>Another problem with your code is that you are wrapping the <code>CryptoStream</code> with a <code>StreamWriter</code>, which writes the <em>text</em> representation of the object you pass into the <code>Write</code> method.  You should instead write directly to the <code>CryptoStream</code> to avoid any byte to string conversions.</p>
","6088","<c#><encryption-symmetric>","0","2","1","2011-12-08 17:59:49","","3","1","296799","","2011-12-08 02:18:57","2011-12-06 03:24:50",""
"6725661","Decoding And Encoding Strings - HardCoded KEY for Symmetric Algorithms","<p>i wrote the below class for encoding and decoding string data (Symmetric Algorithm With One Key):  </p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Text;
using System.Security.Cryptography;
using System.IO;

namespace MyProject.Classes
{
    public static class SymmetricEncryption
    {
        private const string MyKey = ""bla bla bla"";

        private static string _AlgorithmName;
        public static string AlgorithmName
        {
            get { return _AlgorithmName; }
            set { _AlgorithmName = value; }
        }

        public static string EncryptData(string ClearData)
        {
            // Convert string ClearData to byte array
            byte[] ClearData_byte_Array = Encoding.UTF8.GetBytes(ClearData);

            // Now Create The Algorithm
            SymmetricAlgorithm Algorithm = SymmetricAlgorithm.Create(AlgorithmName);
            Algorithm.Key = Encoding.UTF8.GetBytes(MyKey);

            // Encrypt information
            MemoryStream Target = new MemoryStream();

            // Append IV
            Algorithm.GenerateIV();
            Target.Write(Algorithm.IV, 0, Algorithm.IV.Length);

            // Encrypt Clear Data
            CryptoStream cs = new CryptoStream(Target, Algorithm.CreateEncryptor(), CryptoStreamMode.Write);
            cs.Write(ClearData_byte_Array, 0, ClearData_byte_Array.Length);
            cs.FlushFinalBlock();

            // Output
            byte[] Target_byte_Array = Target.ToArray();
            string Target_string = Convert.ToBase64String(Target_byte_Array);
            return Target_string;
        }

        public static string DecryptData(string EncryptedData)
        {
            byte[] EncryptedData_byte_Array = Convert.FromBase64String(EncryptedData);

            // Now Create The Algorithm
            SymmetricAlgorithm Algorithm = SymmetricAlgorithm.Create(AlgorithmName);
            Algorithm.Key = Encoding.UTF8.GetBytes(MyKey);

            // Decrypt information
            MemoryStream Target = new MemoryStream();

            // Read IV
            int ReadPos = 0;
            byte[] IV = new byte[Algorithm.IV.Length];
            Array.Copy(EncryptedData_byte_Array, IV, IV.Length);
            Algorithm.IV = IV;
            ReadPos += Algorithm.IV.Length;

            // Decrypt Encrypted Data
            CryptoStream cs = new CryptoStream(Target, Algorithm.CreateDecryptor(), CryptoStreamMode.Write);
            cs.Write(EncryptedData_byte_Array, ReadPos, EncryptedData_byte_Array.Length - ReadPos);
            cs.FlushFinalBlock();

            // Output
            byte[] Target_byte_Array = Target.ToArray();
            string Target_string = Encoding.UTF8.GetString(Target_byte_Array);
            return Target_string;
        }


    }
}
</code></pre>

<p>and usage like below :  </p>

<pre><code>protected void Page_Load(object sender, EventArgs e)
{
    SymmetricEncryptionUtility.AlgorithmName = ""TripleDES"";
    Response.Write(SymmetricEncryptionUtility.EncryptData(""1234-4567-8910-2345""));
}
</code></pre>

<p>i have some problem about MyKey -> <strong>how can we have hard coded key for Symmetric Algorithms and use it in the upper class ?</strong>  </p>

<p>the upper codes ERROR is like below :</p>

<blockquote>
<pre><code>    Server Error in '/' Application.
</code></pre>
  
  <hr>

<pre><code>    Specified key is not a valid size for this algorithm. 
    Description: An unhandled exception occurred during the
</code></pre>
  
  <p>execution of the current web request. Please review the stack trace
  for more information about the error and where it originated in the
  code. </p>

<pre><code>    Exception Details:
</code></pre>
  
  <p>System.Security.Cryptography.CryptographicException: Specified key is
  not a valid size for this algorithm.</p>
</blockquote>

<p>how can i fix this error ?  </p>

<p>thanks in advance</p>
","<p>Read the error and look at the documentation for <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.tripledes.key.aspx"" rel=""nofollow""><code>TripleDES.Key</code></a>:</p>

<blockquote>
  <p>This algorithm supports key lengths from 128 bits to 192 bits in increments of 64 bits.</p>
</blockquote>

<p>That means for example</p>

<pre><code>private const string MyKey = ""bla bla bla blah"";
</code></pre>

<p>would work.</p>

<p>You didn't ask about this, but I'm not sure creating this class as static is a good idea. If you used it from two different places in your code, it could result in unexpected results, because <code>AlgorithmName</code> is static.</p>

<p>Also, I don't think it makes sense to have a constant key but variable algorithm, especially since different algorithms require keys of different lengths.</p>
","6021","<c#><asp.net><key><encryption-symmetric>","1","1","2","2011-07-17 18:32:12","6725716","0","","","","","2011-07-17 17:53:55",""
"6725661","Decoding And Encoding Strings - HardCoded KEY for Symmetric Algorithms","<p>i wrote the below class for encoding and decoding string data (Symmetric Algorithm With One Key):  </p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Text;
using System.Security.Cryptography;
using System.IO;

namespace MyProject.Classes
{
    public static class SymmetricEncryption
    {
        private const string MyKey = ""bla bla bla"";

        private static string _AlgorithmName;
        public static string AlgorithmName
        {
            get { return _AlgorithmName; }
            set { _AlgorithmName = value; }
        }

        public static string EncryptData(string ClearData)
        {
            // Convert string ClearData to byte array
            byte[] ClearData_byte_Array = Encoding.UTF8.GetBytes(ClearData);

            // Now Create The Algorithm
            SymmetricAlgorithm Algorithm = SymmetricAlgorithm.Create(AlgorithmName);
            Algorithm.Key = Encoding.UTF8.GetBytes(MyKey);

            // Encrypt information
            MemoryStream Target = new MemoryStream();

            // Append IV
            Algorithm.GenerateIV();
            Target.Write(Algorithm.IV, 0, Algorithm.IV.Length);

            // Encrypt Clear Data
            CryptoStream cs = new CryptoStream(Target, Algorithm.CreateEncryptor(), CryptoStreamMode.Write);
            cs.Write(ClearData_byte_Array, 0, ClearData_byte_Array.Length);
            cs.FlushFinalBlock();

            // Output
            byte[] Target_byte_Array = Target.ToArray();
            string Target_string = Convert.ToBase64String(Target_byte_Array);
            return Target_string;
        }

        public static string DecryptData(string EncryptedData)
        {
            byte[] EncryptedData_byte_Array = Convert.FromBase64String(EncryptedData);

            // Now Create The Algorithm
            SymmetricAlgorithm Algorithm = SymmetricAlgorithm.Create(AlgorithmName);
            Algorithm.Key = Encoding.UTF8.GetBytes(MyKey);

            // Decrypt information
            MemoryStream Target = new MemoryStream();

            // Read IV
            int ReadPos = 0;
            byte[] IV = new byte[Algorithm.IV.Length];
            Array.Copy(EncryptedData_byte_Array, IV, IV.Length);
            Algorithm.IV = IV;
            ReadPos += Algorithm.IV.Length;

            // Decrypt Encrypted Data
            CryptoStream cs = new CryptoStream(Target, Algorithm.CreateDecryptor(), CryptoStreamMode.Write);
            cs.Write(EncryptedData_byte_Array, ReadPos, EncryptedData_byte_Array.Length - ReadPos);
            cs.FlushFinalBlock();

            // Output
            byte[] Target_byte_Array = Target.ToArray();
            string Target_string = Encoding.UTF8.GetString(Target_byte_Array);
            return Target_string;
        }


    }
}
</code></pre>

<p>and usage like below :  </p>

<pre><code>protected void Page_Load(object sender, EventArgs e)
{
    SymmetricEncryptionUtility.AlgorithmName = ""TripleDES"";
    Response.Write(SymmetricEncryptionUtility.EncryptData(""1234-4567-8910-2345""));
}
</code></pre>

<p>i have some problem about MyKey -> <strong>how can we have hard coded key for Symmetric Algorithms and use it in the upper class ?</strong>  </p>

<p>the upper codes ERROR is like below :</p>

<blockquote>
<pre><code>    Server Error in '/' Application.
</code></pre>
  
  <hr>

<pre><code>    Specified key is not a valid size for this algorithm. 
    Description: An unhandled exception occurred during the
</code></pre>
  
  <p>execution of the current web request. Please review the stack trace
  for more information about the error and where it originated in the
  code. </p>

<pre><code>    Exception Details:
</code></pre>
  
  <p>System.Security.Cryptography.CryptographicException: Specified key is
  not a valid size for this algorithm.</p>
</blockquote>

<p>how can i fix this error ?  </p>

<p>thanks in advance</p>
","<p>You can use <code>System.Security.Cryptography.Rfc2898DeriveBytes</code> to securely generate the correct number of bytes for your key based on a <code>string</code> password and <code>byte[]</code> salt:</p>

<pre><code>var helper = new Rfc2898DeriveBytes(password, salt);
algorithm.Key = helper.GetBytes(algorithm.KeySize / 8);</code></pre>

<p>For more information about <code>Rfc2898DeriveBytes</code> and how to use it, check out its <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.aspx"" rel=""nofollow"">page on MSDN</a>.</p>
","6021","<c#><asp.net><key><encryption-symmetric>","1","4","2","2011-07-17 18:32:12","6725716","0","","","","","2011-07-17 17:53:55",""
"36384644","Warning: mcrypt_encrypt(): key of size 10 not supported by this algorithm. only key of size 16, 24 or 32 supported","<p>I am trying to encrypt a password using <code>mcrypt_encrypt()</code>. It is working fine on <code>localhost</code>, but when goes to online, my output is <code>""""</code> and I'm getting this warning:</p>

<blockquote>
  <p><b>Warning</b>:  mcrypt_encrypt(): Key of size 10 not supported by
  this algorithm. Only keys of sizes 16, 24 or 32 supported</p>
</blockquote>

<p>This is the code I'm using:</p>

<pre><code>$text=""thisismypassword123"";
$salt=""1234567824"";
return trim (
    base64_encode (
        mcrypt_encrypt (
            MCRYPT_RIJNDAEL_256, $salt, $text, MCRYPT_MODE_ECB, mcrypt_create_iv (
                mcrypt_get_iv_size (
                    MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB
                ),
                MCRYPT_RAND
            )
        )
    )
);
</code></pre>

<p>What could be the cause of this and what can I do to fix this?</p>
","<p>What is unclear about the warning? Provide a key of an acceptable size.</p>

<p>The key is what you have called $salt, it is not a salt, it is the encryption key. Rename it to make the code more clear.</p>

<p>Some instances may add padding bytes to the key but that is non-standard and may be different for different implementations. Do not trust parameter padding, specify the full length.</p>

<p>Also from th encrypt docs:</p>

<blockquote>
  <p>MCRYPT_RIJNDAEL_256 is not AES-256, it's a different variant of the Rijndael block cipher. If you want AES-256 in mcrypt, you have to use MCRYPT_RIJNDAEL_128 with a 32-byte key.</p>
</blockquote>

<p>You should be using the AES options.</p>

<p>The code uses ECB mode which is not secure, should not be used and does not use a IV. Probably what you want to do is use CBC mode which does require an IV. The same IV will be needed for decryption.</p>

<p>There should be no need to <code>trim</code> Base64 encoding.</p>

<p>Lastly, nesting several levels of functions (6 here) may seem like a good idea but it makes debugging almost impossible since intermediate results can not be inspected.</p>

<p>Then there is <code>mcrypt</code>, it is best not to use mcrypt, it is abandonware, has not been updated in years and does not support standard PKCS#7 padding, only non-standard null padding that can't even be used with binary data. Instead consider using <a href=""https://github.com/defuse/php-encryption"" rel=""nofollow"">defuse</a>, it is being maintained and is correct.</p>
","5869","<php><encryption><mcrypt><password-encryption><encryption-symmetric>","0","2","4","2016-06-04 05:52:19","","2","","2224584","","2016-04-18 00:17:22","2016-04-03 11:02:56",""
"36384644","Warning: mcrypt_encrypt(): key of size 10 not supported by this algorithm. only key of size 16, 24 or 32 supported","<p>I am trying to encrypt a password using <code>mcrypt_encrypt()</code>. It is working fine on <code>localhost</code>, but when goes to online, my output is <code>""""</code> and I'm getting this warning:</p>

<blockquote>
  <p><b>Warning</b>:  mcrypt_encrypt(): Key of size 10 not supported by
  this algorithm. Only keys of sizes 16, 24 or 32 supported</p>
</blockquote>

<p>This is the code I'm using:</p>

<pre><code>$text=""thisismypassword123"";
$salt=""1234567824"";
return trim (
    base64_encode (
        mcrypt_encrypt (
            MCRYPT_RIJNDAEL_256, $salt, $text, MCRYPT_MODE_ECB, mcrypt_create_iv (
                mcrypt_get_iv_size (
                    MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB
                ),
                MCRYPT_RAND
            )
        )
    )
);
</code></pre>

<p>What could be the cause of this and what can I do to fix this?</p>
","<p>In PHP 5.6 and higher, your <code>$salt</code> needs to be a random string that is <strong>either 16, 24 or 32 characters long</strong>. Your localhost probably still uses an older version of PHP.</p>

<p>This code should work both on localhost and on your server :</p>

<pre><code>$text=""thisismypassword123"";
$salt=""ddv21sd5dv56sd51""; // &lt;- 16 characters long
return trim (
    base64_encode (
        mcrypt_encrypt (
            MCRYPT_RIJNDAEL_256, $salt, $text, MCRYPT_MODE_ECB, mcrypt_create_iv (
                mcrypt_get_iv_size (
                    MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB
                ),
                MCRYPT_RAND
            )
        )
    )
);
</code></pre>

<hr>

<h1>Note</h1>

<p>Even though this code does <em>work</em>, there are still other issues with it you may want to consider.</p>

<p>See the other answers (most in particular <a href=""https://stackoverflow.com/users/2224584/scott-arciszewski""><strong>Scott Arciszewski</strong></a>'s answer) for details on what else is wrong with your code and why <strong>you shouldn't even be using <code>mcrypt_encrypt()</code> in the first place!</strong></p>
","5869","<php><encryption><mcrypt><password-encryption><encryption-symmetric>","0","-1","4","2016-06-04 05:52:19","","2","","2224584","","2016-04-18 00:17:22","2016-04-03 11:02:56",""
"36384644","Warning: mcrypt_encrypt(): key of size 10 not supported by this algorithm. only key of size 16, 24 or 32 supported","<p>I am trying to encrypt a password using <code>mcrypt_encrypt()</code>. It is working fine on <code>localhost</code>, but when goes to online, my output is <code>""""</code> and I'm getting this warning:</p>

<blockquote>
  <p><b>Warning</b>:  mcrypt_encrypt(): Key of size 10 not supported by
  this algorithm. Only keys of sizes 16, 24 or 32 supported</p>
</blockquote>

<p>This is the code I'm using:</p>

<pre><code>$text=""thisismypassword123"";
$salt=""1234567824"";
return trim (
    base64_encode (
        mcrypt_encrypt (
            MCRYPT_RIJNDAEL_256, $salt, $text, MCRYPT_MODE_ECB, mcrypt_create_iv (
                mcrypt_get_iv_size (
                    MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB
                ),
                MCRYPT_RAND
            )
        )
    )
);
</code></pre>

<p>What could be the cause of this and what can I do to fix this?</p>
","<blockquote>
  <p>I am trying to encrypt a password</p>
</blockquote>

<p><a href=""https://paragonie.com/blog/2016/02/how-safely-store-password-in-2016"" rel=""nofollow"">This is probably a mistake</a>. The fact that you're calling the key a ""salt"" makes me even more wary. Need to store users' passwords? <em>Encryption</em> is <strong>NOT</strong> the right tool for the job. <em>Password hashing</em> is. <a href=""https://paragonie.com/blog/2015/08/you-wouldnt-base64-a-password-cryptography-decoded"" rel=""nofollow"">They're wildly different concepts</a>.</p>

<p>But let's ignore the ""wrong tool for the job"" aspect and assume you were encrypting non-password strings for some reason. Even in this scenario, your encryption code is insecure.</p>

<blockquote>
<pre><code>return trim ( // Why are you trimming this?
    base64_encode (
        mcrypt_encrypt (
            MCRYPT_RIJNDAEL_256, // Not AES
            $salt,
            $text,
            MCRYPT_MODE_ECB,     // The WORST mode possible
            mcrypt_create_iv (   // ECB mode doesn't use an IV
                mcrypt_get_iv_size (
                    MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB
                ),
                MCRYPT_RAND      // Even if an IV was used, MCRYPT_RAND
                                 // is a bad choice! Use MCRYPT_DEV_URANDOM
            )
        )
    )
);
</code></pre>
</blockquote>

<p>Even if you fixed the issues above, you have a more serious issue: <a href=""https://tonyarcieri.com/all-the-crypto-code-youve-ever-written-is-probably-broken"" rel=""nofollow"">Chosen-ciphertext attacks</a>.</p>

<p>Solution:</p>

<ul>
<li>For passwords, use <a href=""https://secure.php.net/password_hash"" rel=""nofollow"">the password hashing API</a></li>
<li>For general-purpose data encryption, use <a href=""https://paragonie.com/blog/2015/11/choosing-right-cryptography-library-for-your-php-project-guide"" rel=""nofollow"">a cryptography library that offers authenticated encryption</a>.</li>
</ul>

<p>Can you please tell whomever gave you the code snippet that they're spreading insecure code around the internet? Thanks.</p>
","5869","<php><encryption><mcrypt><password-encryption><encryption-symmetric>","0","4","4","2016-06-04 05:52:19","","2","","2224584","","2016-04-18 00:17:22","2016-04-03 11:02:56",""
"36384644","Warning: mcrypt_encrypt(): key of size 10 not supported by this algorithm. only key of size 16, 24 or 32 supported","<p>I am trying to encrypt a password using <code>mcrypt_encrypt()</code>. It is working fine on <code>localhost</code>, but when goes to online, my output is <code>""""</code> and I'm getting this warning:</p>

<blockquote>
  <p><b>Warning</b>:  mcrypt_encrypt(): Key of size 10 not supported by
  this algorithm. Only keys of sizes 16, 24 or 32 supported</p>
</blockquote>

<p>This is the code I'm using:</p>

<pre><code>$text=""thisismypassword123"";
$salt=""1234567824"";
return trim (
    base64_encode (
        mcrypt_encrypt (
            MCRYPT_RIJNDAEL_256, $salt, $text, MCRYPT_MODE_ECB, mcrypt_create_iv (
                mcrypt_get_iv_size (
                    MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB
                ),
                MCRYPT_RAND
            )
        )
    )
);
</code></pre>

<p>What could be the cause of this and what can I do to fix this?</p>
","<p>Simple way to solve backward compatibilities is to fill the current password with \0.</p>

<p>For instance, for your current $key = ""1234567890"" on PHP 5.4, as the current key size is 10, it will stop working on PHP 5.6 version.</p>

<p>To solve it without any impact on application just change to $key = ""1234567890\0\0\0\0\0\0"" (until reaches <strong>16</strong> or <strong>32</strong>,...)</p>
","5869","<php><encryption><mcrypt><password-encryption><encryption-symmetric>","0","3","4","2016-06-04 05:52:19","","2","","2224584","","2016-04-18 00:17:22","2016-04-03 11:02:56",""
"14397672","Bad Padding Exception :pad block corrupt when calling dofinal","<p>I am working on encryption and decryption. I am very new to cryptography and i am facing pad block corrupt exception when using bouncy castle</p>

<p>Here is my encryption/decryption code.</p>

<p>private AESFastEngine engine;</p>

<pre><code>private BufferedBlockCipher cipher;

private final KeyParameter key=setEncryptionKey(""testinggtestingg"");

public  KeyParameter setEncryptionKey(String keyText) {
    // adding in spaces to force a proper key
    keyText += ""                "";

    // cutting off at 128 bits (16 characters)
    keyText = keyText.substring(0, 16);

    byte[] keyBytes = keyText.getBytes();
    //key = new KeyParameter(keyBytes);
    engine = new AESFastEngine();
    cipher = new PaddedBufferedBlockCipher(engine);
    return new KeyParameter(keyBytes);

}

public String encryptString(String plainText) {

    try {
        byte[] plainArray = plainText.getBytes();
        cipher.init(true, key);
        byte[] cipherBytes = new byte[cipher
                .getOutputSize(plainArray.length)];
        int cipherLength = cipher.processBytes(plainArray, 0,
                plainArray.length, cipherBytes, 0);
        cipher.doFinal(cipherBytes, cipherLength);

        return (new String(cipherBytes));
    } catch (DataLengthException e) {
        e.printStackTrace();
    } catch (IllegalArgumentException e) {
        e.printStackTrace();
    } catch (IllegalStateException e) {
        e.printStackTrace();
    } catch (InvalidCipherTextException e) {
        e.printStackTrace();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    // else
    return null;
}

public String decryptString(String encryptedText) {
    try {
        byte[] cipherBytes = encryptedText.getBytes();
        cipher.init(false, key);
                byte[] decryptedBytes = new byte[cipher
                .getOutputSize(cipherBytes.length)];
        int decryptedLength = cipher.processBytes(cipherBytes, 0,
                cipherBytes.length, decryptedBytes, 0);
        cipher.doFinal(decryptedBytes,decryptedLength);
        String decryptedString = new String(decryptedBytes);

        // crop accordingly
        int index = decryptedString.indexOf(""\u0000"");
        if (index &gt;= 0) {
            decryptedString = decryptedString.substring(0, index);
        }
        return decryptedString;
    } catch (DataLengthException e) {
        e.printStackTrace();
    } catch (IllegalArgumentException e) {
        e.printStackTrace();
    } catch (IllegalStateException e) {
        e.printStackTrace();
    } catch (InvalidCipherTextException e) {
        e.printStackTrace();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    // else
    return null;
} 
</code></pre>
","<p>All you needed is to precise the charset. Here you go :</p>

<pre><code>import org.bouncycastle.crypto.BufferedBlockCipher;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.engines.AESFastEngine;
import org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher;
import org.bouncycastle.crypto.params.KeyParameter;

public class Main
{
    private BufferedBlockCipher cipher;
    private final KeyParameter key = setEncryptionKey(""testinggtestingg"");
    private static final String CHARSET = ""ISO-8859-1"";

    public static void main(String[] argv)
    {
        Main main = new Main();

        String plain = ""trallalla"";
        System.out.println(""initial : "" + plain);

        String encrypted = main.encryptString(plain);
        System.out.println(""after encryption : "" + encrypted);

        String decrypted = main.decryptString(encrypted);
        System.out.println(""after decryption : "" + decrypted);
    }

    public KeyParameter setEncryptionKey(String keyText)
    {
        // adding in spaces to force a proper key
        keyText += ""                "";

        // cutting off at 128 bits (16 characters)
        keyText = keyText.substring(0, 16);

        byte[] keyBytes = keyText.getBytes();
        // key = new KeyParameter(keyBytes);
        AESFastEngine engine = new AESFastEngine();
        cipher = new PaddedBufferedBlockCipher(engine);
        return new KeyParameter(keyBytes);

    }

    public String encryptString(String plainText)
    {
        try
        {
            byte[] plainArray = plainText.getBytes();
            cipher.init(true, key);
            byte[] cipherBytes = new byte[cipher.getOutputSize(plainArray.length)];
            int cipherLength = cipher.processBytes(plainArray, 0, plainArray.length, cipherBytes, 0);
            cipher.doFinal(cipherBytes, cipherLength);

            return (new String(cipherBytes, CHARSET));
        }
        catch (DataLengthException e)
        {
            e.printStackTrace();
        }
        catch (IllegalArgumentException e)
        {
            e.printStackTrace();
        }
        catch (IllegalStateException e)
        {
            e.printStackTrace();
        }
        catch (InvalidCipherTextException e)
        {
            e.printStackTrace();
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
        // else
        return null;
    }

    public String decryptString(String encryptedText)
    {
        try
        {
            byte[] cipherBytes = encryptedText.getBytes(CHARSET);
            cipher.init(false, key);
            byte[] decryptedBytes = new byte[cipher.getOutputSize(cipherBytes.length)];
            int decryptedLength = cipher.processBytes(cipherBytes, 0, cipherBytes.length, decryptedBytes, 0);
            cipher.doFinal(decryptedBytes, decryptedLength);
            String decryptedString = new String(decryptedBytes);

            // crop accordingly
            int index = decryptedString.indexOf(""\u0000"");
            if (index &gt;= 0)
            {
                decryptedString = decryptedString.substring(0, index);
            }
            return decryptedString;
        }
        catch (DataLengthException e)
        {
            e.printStackTrace();
        }
        catch (IllegalArgumentException e)
        {
            e.printStackTrace();
        }
        catch (IllegalStateException e)
        {
            e.printStackTrace();
        }
        catch (InvalidCipherTextException e)
        {
            e.printStackTrace();
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
        // else
        return null;
    }
}
</code></pre>

<p>But why are you using this external library ? Here is the code I use and which does not need any external libraries:</p>

<pre><code>import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.*;
import javax.crypto.spec.*;


public class Encryption 
{
    private static final String ALGORITHME = ""Blowfish"";
    private static final String TRANSFORMATION = ""Blowfish/ECB/PKCS5Padding"";
    private static final String SECRET = ""kjkdfjslm"";
    private static final String CHARSET = ""ISO-8859-1"";


    public static void main(String[] argv) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, UnsupportedEncodingException, IllegalBlockSizeException, BadPaddingException
    {
        Encryption main = new Encryption();

        String plain = ""trallalla"";
        System.out.println(""initial : "" + plain);

        String encrypted = main.encrypt(plain);
        System.out.println(""after encryption : "" + encrypted);

        String decrypted = main.decrypt(encrypted);
        System.out.println(""after decryption : "" + decrypted);
    }

    public String encrypt(String plaintext) 
    throws NoSuchAlgorithmException, 
    NoSuchPaddingException, 
    InvalidKeyException, 
    UnsupportedEncodingException, 
    IllegalBlockSizeException, 
    BadPaddingException
    {

            Cipher cipher = Cipher.getInstance(TRANSFORMATION);
            cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(SECRET.getBytes(CHARSET), ALGORITHME));
            return new String(cipher.doFinal(plaintext.getBytes()), CHARSET);    
    }

    public String decrypt(String ciphertext) 
    throws NoSuchAlgorithmException, 
    NoSuchPaddingException, 
    InvalidKeyException, 
    UnsupportedEncodingException, 
    IllegalBlockSizeException, 
    BadPaddingException 
    {
      Cipher cipher = Cipher.getInstance(TRANSFORMATION);
      cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(SECRET.getBytes(), ALGORITHME));
      return new String(cipher.doFinal(ciphertext.getBytes(CHARSET)), CHARSET);
    }
}
</code></pre>
","5848","<java><encryption-symmetric>","1","2","1","2013-06-17 10:14:48","","0","2","","","","2013-01-18 11:09:33",""
"5949783","Simple algorithm for encrypting with Javascript and decrypting with C#","<p>I want to encrypt some text in URL with a simple java-script algorithm and then decrypt it at code behind of an ASP.NET page using C#.</p>

<p><code>ROT13</code> is a good choice but unfortunately I cannot use it due to some confidential details. Anything like that would help but I don't know the famous ones. Security is not a matter at all, just twisting the string in some way and retrieve it later.</p>
","<p>Who are you trying to hide it from?  The end-user or someone listening on the wire?  Given that anyone can use a browser-based debugger and inspect variables at run time, it doesn't really make much sense to rely on encryption to hide the information from the end-user (unless you encrypt it before you send it to the client and don't decrypt it until it's been sent back).  If you're trying to hide the information on the wire, using SSL is definitely the way to go.</p>
","5656","<c#><javascript><encryption-symmetric>","2","3","4","2013-07-04 08:56:06","5949914","6","","","","","2011-05-10 12:08:21",""
"5949783","Simple algorithm for encrypting with Javascript and decrypting with C#","<p>I want to encrypt some text in URL with a simple java-script algorithm and then decrypt it at code behind of an ASP.NET page using C#.</p>

<p><code>ROT13</code> is a good choice but unfortunately I cannot use it due to some confidential details. Anything like that would help but I don't know the famous ones. Security is not a matter at all, just twisting the string in some way and retrieve it later.</p>
","<p><a href=""http://en.wikipedia.org/wiki/Caesar_cipher"" rel=""nofollow"">Caesar cipher</a> is a quite simple method for encrypting a text. Or you could simply encode the text in BASE64, which also makes it hard to read for humans. BASE64 naturally offers no security at all, but you can use standard libraries for encoding and decoding.</p>
","5656","<c#><javascript><encryption-symmetric>","2","0","4","2013-07-04 08:56:06","5949914","6","","","","","2011-05-10 12:08:21",""
"5949783","Simple algorithm for encrypting with Javascript and decrypting with C#","<p>I want to encrypt some text in URL with a simple java-script algorithm and then decrypt it at code behind of an ASP.NET page using C#.</p>

<p><code>ROT13</code> is a good choice but unfortunately I cannot use it due to some confidential details. Anything like that would help but I don't know the famous ones. Security is not a matter at all, just twisting the string in some way and retrieve it later.</p>
","<p>Javascript and C# both support a number of different ""real"" encryption algorithms. </p>

<p>check out Javascript DES and 3DES<br>
Question:  <a href=""https://stackoverflow.com/questions/5749859/triple-des-decryption-in-classic-asp/5757018#5757018"">Triple DES decryption in classic ASP?</a><br>
example: <a href=""http://jsbin.com/oguye3"" rel=""nofollow noreferrer"">http://jsbin.com/oguye3</a><br>
source:  <a href=""http://cheeso.members.winisp.net/srcview.aspx?dir=DES"" rel=""nofollow noreferrer"">http://cheeso.members.winisp.net/srcview.aspx?dir=DES</a></p>

<p>DES has known weaknesses, but that library also supports 3DES, which is stronger. </p>

<p>Also check out Javascript and AES<br>
<a href=""https://stackoverflow.com/questions/1149611/getting-slowaes-and-rijndaelmanaged-class-in-net-to-play-together"">Getting SlowAES and RijndaelManaged class in .NET to play together</a></p>

<p>Here's a working demo of AES in the browser:<br>
<a href=""http://jsbin.com/itiye5/3"" rel=""nofollow noreferrer"">http://jsbin.com/itiye5/3</a></p>
","5656","<c#><javascript><encryption-symmetric>","2","1","4","2013-07-04 08:56:06","5949914","6","","","","","2011-05-10 12:08:21",""
"5949783","Simple algorithm for encrypting with Javascript and decrypting with C#","<p>I want to encrypt some text in URL with a simple java-script algorithm and then decrypt it at code behind of an ASP.NET page using C#.</p>

<p><code>ROT13</code> is a good choice but unfortunately I cannot use it due to some confidential details. Anything like that would help but I don't know the famous ones. Security is not a matter at all, just twisting the string in some way and retrieve it later.</p>
","<p>If you are looking for RSA (assymentric encryption) the  you can use jsbn <a href=""http://www-cs-students.stanford.edu/~tjw/jsbn/"" rel=""nofollow"">http://www-cs-students.stanford.edu/~tjw/jsbn/</a> javascript library 
for client side and the standard .Net RSACryptoServiceProvider for server side.</p>

<p>They do cooperate perfectly between each other.</p>

<p>I hope this helps!</p>
","5656","<c#><javascript><encryption-symmetric>","2","1","4","2013-07-04 08:56:06","5949914","6","","","","","2011-05-10 12:08:21",""
"30131598","Spring Cloud Config Server - Where to set encrypt.key to enable /encrypt endpoint","<p>I have a Spring Cloud Config app with the Spring Cloud Security dependencies.  I'm trying to hit the /encrypt endpoint to encrypt a password.</p>

<p>According to the docs at <a href=""http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_key_management"" rel=""nofollow"">http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_key_management</a> I believe I need to set a symmetric key using ""encrypt.key"".  But I can't figure out where to put this; all combinations I've tried result in {""description"":""No key was installed for encryption service"",""status"":""NO_KEY""} when I attempt to POST to /encrypt.</p>

<p>If I POST a key to /key, the /encrypt works perfectly, so I'm pretty sure that everything else is setup correctly.  It also works fine using the environment variable ENCRYPT_KEY, or by using a system property encrypt.key.  I just can't figure out where to place the encrypt.key within a configuration file.  Is there a sample on this?</p>
","<p>If you're using spring cloud with spring boot, that is the method that is described on the documentation that you mentioned, you've two 'main' properties files.</p>

<ul>
<li><p>bootstrap.[properties,yml]</p>

<blockquote>
  <p>To modify the startup behaviour you can change the location of the config server using bootstrap.properties (like application.properties but for the bootstrap phase of an application context)</p>
</blockquote></li>
<li><p>application.[properties,yml]</p>

<blockquote>
  <p>where the ""application"" is injected as the ""spring.config.name"" in the SpringApplication (i.e. what is normally ""application"" in a regular Spring Boot app)</p>
</blockquote></li>
</ul>

<p>source: <a href=""http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_quick_start"" rel=""nofollow"">Spring Cloud Config Documentation</a></p>

<p>So, it should be enough to set the <code>encrypt.key</code>in your application.[properties,yml] file (or the alternative name if specified)</p>
","5612","<spring-security><encryption-symmetric><spring-cloud>","3","1","4","2017-08-27 23:20:32","","0","","4730920","","2015-05-08 19:50:21","2015-05-08 19:36:44",""
"30131598","Spring Cloud Config Server - Where to set encrypt.key to enable /encrypt endpoint","<p>I have a Spring Cloud Config app with the Spring Cloud Security dependencies.  I'm trying to hit the /encrypt endpoint to encrypt a password.</p>

<p>According to the docs at <a href=""http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_key_management"" rel=""nofollow"">http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_key_management</a> I believe I need to set a symmetric key using ""encrypt.key"".  But I can't figure out where to put this; all combinations I've tried result in {""description"":""No key was installed for encryption service"",""status"":""NO_KEY""} when I attempt to POST to /encrypt.</p>

<p>If I POST a key to /key, the /encrypt works perfectly, so I'm pretty sure that everything else is setup correctly.  It also works fine using the environment variable ENCRYPT_KEY, or by using a system property encrypt.key.  I just can't figure out where to place the encrypt.key within a configuration file.  Is there a sample on this?</p>
","<p>Thanks @pVilaca, this is indeed what the documentation says, but setting the key in application.properties or application.yml won't work.  </p>

<p>Through experimentation I've found that the only place you can set the encrypt.key property is an ENCRYPT_KEY environment variable, a system property, bootstrap.properties, bootstrap.yml, or calling the /key endpoint.</p>

<p>Not sure why application.properties or application.yml don't work in this case.  Setting this key must have more of an impact on the startup process than it would appear.</p>
","5612","<spring-security><encryption-symmetric><spring-cloud>","3","4","4","2017-08-27 23:20:32","","0","","4730920","","2015-05-08 19:50:21","2015-05-08 19:36:44",""
"30131598","Spring Cloud Config Server - Where to set encrypt.key to enable /encrypt endpoint","<p>I have a Spring Cloud Config app with the Spring Cloud Security dependencies.  I'm trying to hit the /encrypt endpoint to encrypt a password.</p>

<p>According to the docs at <a href=""http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_key_management"" rel=""nofollow"">http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_key_management</a> I believe I need to set a symmetric key using ""encrypt.key"".  But I can't figure out where to put this; all combinations I've tried result in {""description"":""No key was installed for encryption service"",""status"":""NO_KEY""} when I attempt to POST to /encrypt.</p>

<p>If I POST a key to /key, the /encrypt works perfectly, so I'm pretty sure that everything else is setup correctly.  It also works fine using the environment variable ENCRYPT_KEY, or by using a system property encrypt.key.  I just can't figure out where to place the encrypt.key within a configuration file.  Is there a sample on this?</p>
","<p>Setting Spring Cloud Version to 'Brixton.SR5' worked for me. For some reason, setting 'encrypt.key' in either application.properties/yml or bootstrap.properties/yml in later Spring Cloud Version does not work anymore.</p>
","5612","<spring-security><encryption-symmetric><spring-cloud>","3","2","4","2017-08-27 23:20:32","","0","","4730920","","2015-05-08 19:50:21","2015-05-08 19:36:44",""
"30131598","Spring Cloud Config Server - Where to set encrypt.key to enable /encrypt endpoint","<p>I have a Spring Cloud Config app with the Spring Cloud Security dependencies.  I'm trying to hit the /encrypt endpoint to encrypt a password.</p>

<p>According to the docs at <a href=""http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_key_management"" rel=""nofollow"">http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_key_management</a> I believe I need to set a symmetric key using ""encrypt.key"".  But I can't figure out where to put this; all combinations I've tried result in {""description"":""No key was installed for encryption service"",""status"":""NO_KEY""} when I attempt to POST to /encrypt.</p>

<p>If I POST a key to /key, the /encrypt works perfectly, so I'm pretty sure that everything else is setup correctly.  It also works fine using the environment variable ENCRYPT_KEY, or by using a system property encrypt.key.  I just can't figure out where to place the encrypt.key within a configuration file.  Is there a sample on this?</p>
","<p>check properties tag of pom.xml file. If you are using version 2 or 3 of Dalston, change it to:</p>

<pre><code>&lt;spring-cloud.version&gt;Dalston.SR1&lt;/spring-cloud.version&gt;
</code></pre>

<p>and it should be working fine. In my case i was using version 3 and changing it to version 1 resolved the issue for me.</p>

<p>Reference:
<a href=""https://github.com/spring-cloud/spring-cloud-config/issues/767"" rel=""nofollow noreferrer"">https://github.com/spring-cloud/spring-cloud-config/issues/767</a> </p>
","5612","<spring-security><encryption-symmetric><spring-cloud>","3","2","4","2017-08-27 23:20:32","","0","","4730920","","2015-05-08 19:50:21","2015-05-08 19:36:44",""
"8141959","Wrapping and unwrapping encryption key fails (javax.crypto)","<p>I have the following test code to encrypt and decrypt a string. It works fine if I leave out the wrapping and unwrapping code for my key in test(), but when I try to wrap my key, and then unwrap it again and use it for the decryption, it fails and I don't get ""Test"" back as the resulting decrypted string but ""�J��"" instead.</p>

<p>Does anybody see the error I'm doing with the wrapping and unwrapping? Thanks.</p>

<pre><code>private static void test() throws Exception {

    // create wrap key
    KeyGenerator keyGenerator = KeyGenerator.getInstance(""AESWrap"");
    keyGenerator.init(256);
    Key wrapKey = keyGenerator.generateKey();

    SecretKey key = generateKey(PASSPHRASE);
    Cipher cipher;

    // wrap key
    cipher = Cipher.getInstance(""AESWrap"");
    cipher.init(Cipher.WRAP_MODE, wrapKey);
    byte[] wrappedKeyBytes = cipher.wrap(key);

    // unwrap key again
    cipher.init(Cipher.UNWRAP_MODE, wrapKey);
    key = (SecretKey)cipher.unwrap( wrappedKeyBytes, ""AES/CTR/NOPADDING"", Cipher.SECRET_KEY);

    // encrypt
    cipher = Cipher.getInstance(""AES/CTR/NOPADDING"");
    cipher.init(Cipher.ENCRYPT_MODE, key, generateIV(cipher), random);
    byte[] b = cipher.doFinal(""Test"".toString().getBytes());

    // decrypt
    cipher = Cipher.getInstance(""AES/CTR/NOPADDING"");
    cipher.init(Cipher.DECRYPT_MODE, key, generateIV(cipher), random);
    b = cipher.doFinal(b);

    System.out.println(new String(b));  
    // should output ""Test"", but outputs �J�� if wrapping/unwrapping

}
</code></pre>

<p>And the two helper methods that are called in the code above:</p>

<pre><code>private static IvParameterSpec generateIV(Cipher cipher) throws Exception {
    byte [] ivBytes = new byte[cipher.getBlockSize()];
    random.nextBytes(ivBytes);    // random = new SecureRandom();
    return new IvParameterSpec(ivBytes);
}

private static SecretKey generateKey(String passphrase) throws Exception {
    PBEKeySpec keySpec = new PBEKeySpec(passphrase.toCharArray(), salt.getBytes(), iterations, keyLength);
    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(PBE_ALGORITHM); //""PBEWITHSHA256AND256BITAES-CBC-BC""
    return keyFactory.generateSecret(keySpec);
}
</code></pre>
","<p>It looks like you're giving a different IV to cipher.init(Cipher.ENCRYPT_MODE, ...) and cipher.init(Cipher.DECRYPT_MODE, ...) by calling generateIV() twice.</p>
","5485","<java><bouncycastle><encryption><encryption-symmetric>","1","4","1","2011-11-15 20:28:49","8142733","0","5","","","","2011-11-15 19:26:23",""
"3131193","Symmetric Bijective Algorithm for Integers","<p>I need an algorithm that can do a one-to-one mapping (ie. no collision) of a 32-bit signed integer onto another 32-bit signed integer.</p>

<p>My real concern is enough entropy so that the output of the function appears to be random. Basically I am looking for a cipher similar to XOR Cipher but that can generate more arbitrary-looking outputs. Security is not my real concern, although obscurity is.</p>

<p>Edit for clarification purpose:</p>

<ol>
<li>The algorithm <strong>must</strong> be symetric, so that I can reverse the operation without a keypair.</li>
<li>The algorithm <strong>must</strong> be bijective, every 32-bit input number must generate a 32-bit unique number.</li>
<li>The output of the function must be obscure enough, adding only one to the input should result big effect on the output.</li>
</ol>

<p>Example expected result:
<br />
<br />F(100) = 98456
<br />F(101) = -758
<br />F(102) = 10875498
<br />F(103) = 986541
<br />F(104) = 945451245
<br />F(105) = -488554</p>

<p>Just like MD5, changing one thing may change lots of things.</p>

<p>I am looking for a mathmetical function, so manually mapping integers is not a solution for me. For those who are asking, algorithm speed is not very important.</p>
","<p>Draw a large circle on a large sheet of paper.  Write all the integers from 0 to MAXINT clockwise from the top of the circle, equally spaced.  Write all the integers from 0 to MININT anti-clockwise, equally spaced again.  Observe that MININT is next to MAXINT at the bottom of the circle.  Now make a duplicate of this figure on both sides of a piece of stiff card.  Pin the stiff card to the circle through the centres of both.  Pick an angle of rotation, any angle you like.  Now you have a 1-1 mapping which meets some of your requirements, but is probably not obscure enough.  Unpin the card, flip it around a diameter, any diameter.  Repeat these steps (in any order) until you have a bijection you are happy with.</p>

<p>If you have been following closely it shouldn't be difficult to program this in your preferred language.</p>

<p><strong>For Clarification</strong> following the comment: If you only rotate the card against the paper then the method is as simple as you complain.  However, when you flip the card over the mapping is not equivalent to <code>(x+m) mod MAXINT</code> for any <code>m</code>.  For example, if you leave the card unrotated and flip it around the diameter through 0 (which is at the top of the clock face) then 1 is mapped to -1, 2 to -2, and so forth.  <code>(x+m) mod MAXINT</code> corresponds to rotations of the card only.</p>
","5091","<algorithm><encryption-symmetric><block-cipher><bijection>","32","0","11","2019-07-31 15:07:00","3156231","6","13","445517","","2013-02-09 15:29:08","2010-06-28 09:12:12",""
"3131193","Symmetric Bijective Algorithm for Integers","<p>I need an algorithm that can do a one-to-one mapping (ie. no collision) of a 32-bit signed integer onto another 32-bit signed integer.</p>

<p>My real concern is enough entropy so that the output of the function appears to be random. Basically I am looking for a cipher similar to XOR Cipher but that can generate more arbitrary-looking outputs. Security is not my real concern, although obscurity is.</p>

<p>Edit for clarification purpose:</p>

<ol>
<li>The algorithm <strong>must</strong> be symetric, so that I can reverse the operation without a keypair.</li>
<li>The algorithm <strong>must</strong> be bijective, every 32-bit input number must generate a 32-bit unique number.</li>
<li>The output of the function must be obscure enough, adding only one to the input should result big effect on the output.</li>
</ol>

<p>Example expected result:
<br />
<br />F(100) = 98456
<br />F(101) = -758
<br />F(102) = 10875498
<br />F(103) = 986541
<br />F(104) = 945451245
<br />F(105) = -488554</p>

<p>Just like MD5, changing one thing may change lots of things.</p>

<p>I am looking for a mathmetical function, so manually mapping integers is not a solution for me. For those who are asking, algorithm speed is not very important.</p>
","<p>Can you use a random generated lookup-table? As long as the random numbers in the table are unique, you get a bijective mapping. It's not symmetric, though.</p>

<p>One 16 GB lookup-table for all 32 bit values is probably not practical, but you could use two separate 16-bit lookup tables for the high-word and the low word.</p>

<p>PS: I think you can generate a symmetric bijective lookup table, if that's important. The algorithm would start with an empty LUT:</p>

<pre><code>+----+        +----+
|  1 |   -&gt;   |    |
+----+        +----+
|  2 |   -&gt;   |    |
+----+        +----+
|  3 |   -&gt;   |    |
+----+        +----+
|  4 |   -&gt;   |    |
+----+        +----+
</code></pre>

<p>Pick the first element, assign it a random mapping. To make the mapping symmetric, assign the inverse, too:</p>

<pre><code>+----+        +----+
|  1 |   -&gt;   |  3 |
+----+        +----+
|  2 |   -&gt;   |    |
+----+        +----+
|  3 |   -&gt;   |  1 |
+----+        +----+
|  4 |   -&gt;   |    |
+----+        +----+
</code></pre>

<p>Pick the next number, again assign a random mapping, but pick a number that's not been assigned yet. (i.e. in this case, don't pick 1 or 3). Repeat until the LUT is complete. This should generate a random bijective symmetric mapping.</p>
","5091","<algorithm><encryption-symmetric><block-cipher><bijection>","32","1","11","2019-07-31 15:07:00","3156231","6","13","445517","","2013-02-09 15:29:08","2010-06-28 09:12:12",""
"3131193","Symmetric Bijective Algorithm for Integers","<p>I need an algorithm that can do a one-to-one mapping (ie. no collision) of a 32-bit signed integer onto another 32-bit signed integer.</p>

<p>My real concern is enough entropy so that the output of the function appears to be random. Basically I am looking for a cipher similar to XOR Cipher but that can generate more arbitrary-looking outputs. Security is not my real concern, although obscurity is.</p>

<p>Edit for clarification purpose:</p>

<ol>
<li>The algorithm <strong>must</strong> be symetric, so that I can reverse the operation without a keypair.</li>
<li>The algorithm <strong>must</strong> be bijective, every 32-bit input number must generate a 32-bit unique number.</li>
<li>The output of the function must be obscure enough, adding only one to the input should result big effect on the output.</li>
</ol>

<p>Example expected result:
<br />
<br />F(100) = 98456
<br />F(101) = -758
<br />F(102) = 10875498
<br />F(103) = 986541
<br />F(104) = 945451245
<br />F(105) = -488554</p>

<p>Just like MD5, changing one thing may change lots of things.</p>

<p>I am looking for a mathmetical function, so manually mapping integers is not a solution for me. For those who are asking, algorithm speed is not very important.</p>
","<p>I will try to explain my solution to this on a much simpler example, which then can be easily extended for your large one.</p>

<p>Say i have a 4 bit number. There are 16 distinct values. Look at it as if it was a four dimensional cube: <a href=""https://i.stack.imgur.com/ehP1d.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ehP1d.jpg"" alt=""4 dimensional cube""></a><br>
<sub>(source: <a href=""http://www.ams.org/featurecolumn/images/january2009/klee8.jpg"" rel=""nofollow noreferrer"">ams.org</a>)</sub><br>
.</p>

<p>Every vertex represents one of those numbers, every bit represents one dimension. So its basicaly XYZW, where each of the dimensions can have only values 0 or 1. Now imagine you use a <strong>different order</strong> of dimensions. For example XZYW. Each of the vertices now changed its number! </p>

<p>You can do this for any number of dimensions, just permute those dimensions. If security is not your concern this could be a nice fast solution for you. On the other hand, i dont know if the output will be ""obscure"" enough for your needs and certainly after a large amount of mapping done, the mapping can be reversed (which may be an advantage or disadvantage, depending on your needs.)</p>
","5091","<algorithm><encryption-symmetric><block-cipher><bijection>","32","6","11","2019-07-31 15:07:00","3156231","6","13","445517","","2013-02-09 15:29:08","2010-06-28 09:12:12",""
"3131193","Symmetric Bijective Algorithm for Integers","<p>I need an algorithm that can do a one-to-one mapping (ie. no collision) of a 32-bit signed integer onto another 32-bit signed integer.</p>

<p>My real concern is enough entropy so that the output of the function appears to be random. Basically I am looking for a cipher similar to XOR Cipher but that can generate more arbitrary-looking outputs. Security is not my real concern, although obscurity is.</p>

<p>Edit for clarification purpose:</p>

<ol>
<li>The algorithm <strong>must</strong> be symetric, so that I can reverse the operation without a keypair.</li>
<li>The algorithm <strong>must</strong> be bijective, every 32-bit input number must generate a 32-bit unique number.</li>
<li>The output of the function must be obscure enough, adding only one to the input should result big effect on the output.</li>
</ol>

<p>Example expected result:
<br />
<br />F(100) = 98456
<br />F(101) = -758
<br />F(102) = 10875498
<br />F(103) = 986541
<br />F(104) = 945451245
<br />F(105) = -488554</p>

<p>Just like MD5, changing one thing may change lots of things.</p>

<p>I am looking for a mathmetical function, so manually mapping integers is not a solution for me. For those who are asking, algorithm speed is not very important.</p>
","<p>Take a number, multiplies by 9, inverse digits, divide by 9.</p>

<pre><code>123  &lt;&gt; 1107 &lt;&gt; 7011 &lt;&gt; 779
256  &lt;&gt; 2304 &lt;&gt; 4032 &lt;&gt; 448
1028 &lt;&gt; 9252 &lt;&gt; 2529 &lt;&gt; 281
</code></pre>

<p>Should be obscure enough !!</p>

<p>Edit : it is not a bijection for 0 ending integer</p>

<pre><code>900 &lt;&gt; 8100 &lt;&gt; 18 &lt;&gt; 2
2   &lt;&gt; 18   &lt;&gt; 81 &lt;&gt; 9
</code></pre>

<p>You can always add a specific rule like :
Take a number, divide by 10 x times, multiplies by 9, inverse digits, divide by 9, multiples by 10^x.</p>

<p>And so </p>

<pre><code>900 &lt;&gt; 9 &lt;&gt; 81 &lt;&gt; 18 &lt;&gt; 2 &lt;&gt; 200
200 &lt;&gt; 2 &lt;&gt; 18 &lt;&gt; 81 &lt;&gt; 9 &lt;&gt; 900
</code></pre>

<p>W00t it works !</p>

<p>Edit 2 : For more obscurness, you can add an arbitrary number, and substract at the end.</p>

<pre><code>900 &lt; +256 &gt; 1156 &lt; *9 &gt; 10404 &lt; invert &gt; 40401 &lt; /9 &gt; 4489 &lt; -256 &gt; 4233
123 &lt; +256 &gt; 379 &lt; *9 &gt; 3411 &lt; invert &gt; 1143 &lt; /9 &gt; 127 &lt; -256 &gt; -129
</code></pre>
","5091","<algorithm><encryption-symmetric><block-cipher><bijection>","32","1","11","2019-07-31 15:07:00","3156231","6","13","445517","","2013-02-09 15:29:08","2010-06-28 09:12:12",""
"3131193","Symmetric Bijective Algorithm for Integers","<p>I need an algorithm that can do a one-to-one mapping (ie. no collision) of a 32-bit signed integer onto another 32-bit signed integer.</p>

<p>My real concern is enough entropy so that the output of the function appears to be random. Basically I am looking for a cipher similar to XOR Cipher but that can generate more arbitrary-looking outputs. Security is not my real concern, although obscurity is.</p>

<p>Edit for clarification purpose:</p>

<ol>
<li>The algorithm <strong>must</strong> be symetric, so that I can reverse the operation without a keypair.</li>
<li>The algorithm <strong>must</strong> be bijective, every 32-bit input number must generate a 32-bit unique number.</li>
<li>The output of the function must be obscure enough, adding only one to the input should result big effect on the output.</li>
</ol>

<p>Example expected result:
<br />
<br />F(100) = 98456
<br />F(101) = -758
<br />F(102) = 10875498
<br />F(103) = 986541
<br />F(104) = 945451245
<br />F(105) = -488554</p>

<p>Just like MD5, changing one thing may change lots of things.</p>

<p>I am looking for a mathmetical function, so manually mapping integers is not a solution for me. For those who are asking, algorithm speed is not very important.</p>
","<p>The following paper gives you 4 or 5 mapping examples, giving you functions rather than building mapped sets: <a href=""http://www.cs.auckland.ac.nz/~john-rugis/pdf/BijectiveMapping.pdf"" rel=""nofollow noreferrer"">www.cs.auckland.ac.nz/~john-rugis/pdf/BijectiveMapping.pdf</a></p>
","5091","<algorithm><encryption-symmetric><block-cipher><bijection>","32","5","11","2019-07-31 15:07:00","3156231","6","13","445517","","2013-02-09 15:29:08","2010-06-28 09:12:12",""
"3131193","Symmetric Bijective Algorithm for Integers","<p>I need an algorithm that can do a one-to-one mapping (ie. no collision) of a 32-bit signed integer onto another 32-bit signed integer.</p>

<p>My real concern is enough entropy so that the output of the function appears to be random. Basically I am looking for a cipher similar to XOR Cipher but that can generate more arbitrary-looking outputs. Security is not my real concern, although obscurity is.</p>

<p>Edit for clarification purpose:</p>

<ol>
<li>The algorithm <strong>must</strong> be symetric, so that I can reverse the operation without a keypair.</li>
<li>The algorithm <strong>must</strong> be bijective, every 32-bit input number must generate a 32-bit unique number.</li>
<li>The output of the function must be obscure enough, adding only one to the input should result big effect on the output.</li>
</ol>

<p>Example expected result:
<br />
<br />F(100) = 98456
<br />F(101) = -758
<br />F(102) = 10875498
<br />F(103) = 986541
<br />F(104) = 945451245
<br />F(105) = -488554</p>

<p>Just like MD5, changing one thing may change lots of things.</p>

<p>I am looking for a mathmetical function, so manually mapping integers is not a solution for me. For those who are asking, algorithm speed is not very important.</p>
","<p>Use any 32-bit block cipher! By definition, a block cipher maps every possible input value in its range to a unique output value, in a reversible fashion, and by design, it's difficult to determine what any given value will map to without the key. Simply pick a key, keep it secret if security or obscurity is important, and use the cipher as your transformation.</p>

<p>For an extension of this idea to non-power-of-2 ranges, see my post on <a href=""http://blog.notdot.net/2007/9/Damn-Cool-Algorithms-Part-2-Secure-permutations-with-block-ciphers"" rel=""noreferrer"">Secure Permutations with Block Ciphers</a>.</p>

<p>Addressing your specific concerns:</p>

<ol>
<li>The algorithm is indeed symmetric. I'm not sure what you mean by ""reverse the operation without a keypair"". If you don't want to use a key, hardcode a randomly generated one and consider it part of the algorithm.</li>
<li>Yup - by definition, a block cipher is bijective.</li>
<li>Yup. It wouldn't be a good cipher if that were not the case.</li>
</ol>
","5091","<algorithm><encryption-symmetric><block-cipher><bijection>","32","33","11","2019-07-31 15:07:00","3156231","6","13","445517","","2013-02-09 15:29:08","2010-06-28 09:12:12",""
"3131193","Symmetric Bijective Algorithm for Integers","<p>I need an algorithm that can do a one-to-one mapping (ie. no collision) of a 32-bit signed integer onto another 32-bit signed integer.</p>

<p>My real concern is enough entropy so that the output of the function appears to be random. Basically I am looking for a cipher similar to XOR Cipher but that can generate more arbitrary-looking outputs. Security is not my real concern, although obscurity is.</p>

<p>Edit for clarification purpose:</p>

<ol>
<li>The algorithm <strong>must</strong> be symetric, so that I can reverse the operation without a keypair.</li>
<li>The algorithm <strong>must</strong> be bijective, every 32-bit input number must generate a 32-bit unique number.</li>
<li>The output of the function must be obscure enough, adding only one to the input should result big effect on the output.</li>
</ol>

<p>Example expected result:
<br />
<br />F(100) = 98456
<br />F(101) = -758
<br />F(102) = 10875498
<br />F(103) = 986541
<br />F(104) = 945451245
<br />F(105) = -488554</p>

<p>Just like MD5, changing one thing may change lots of things.</p>

<p>I am looking for a mathmetical function, so manually mapping integers is not a solution for me. For those who are asking, algorithm speed is not very important.</p>
","<p>Apart from generating random lookup-tables, you can use a combination of functions:</p>

<ul>
<li>XOR</li>
<li>symmetric bit permutation (for example shift 16 bits, or flip 0-31 to 31-0, or flip 0-3 to 3-0, 4-7 to 7-4, ...)</li>
<li>more?</li>
</ul>
","5091","<algorithm><encryption-symmetric><block-cipher><bijection>","32","4","11","2019-07-31 15:07:00","3156231","6","13","445517","","2013-02-09 15:29:08","2010-06-28 09:12:12",""
"3131193","Symmetric Bijective Algorithm for Integers","<p>I need an algorithm that can do a one-to-one mapping (ie. no collision) of a 32-bit signed integer onto another 32-bit signed integer.</p>

<p>My real concern is enough entropy so that the output of the function appears to be random. Basically I am looking for a cipher similar to XOR Cipher but that can generate more arbitrary-looking outputs. Security is not my real concern, although obscurity is.</p>

<p>Edit for clarification purpose:</p>

<ol>
<li>The algorithm <strong>must</strong> be symetric, so that I can reverse the operation without a keypair.</li>
<li>The algorithm <strong>must</strong> be bijective, every 32-bit input number must generate a 32-bit unique number.</li>
<li>The output of the function must be obscure enough, adding only one to the input should result big effect on the output.</li>
</ol>

<p>Example expected result:
<br />
<br />F(100) = 98456
<br />F(101) = -758
<br />F(102) = 10875498
<br />F(103) = 986541
<br />F(104) = 945451245
<br />F(105) = -488554</p>

<p>Just like MD5, changing one thing may change lots of things.</p>

<p>I am looking for a mathmetical function, so manually mapping integers is not a solution for me. For those who are asking, algorithm speed is not very important.</p>
","<p>Here is my simple idea:
You can move around the bits of the number, as PeterK proposed, but you can have a different permutation of bits for each number, and still be able to decipher it.</p>

<p>The cipher goes like this:
Treat the input number as an array of bits <code>I[0..31]</code>, and the output as <code>O[0..31]</code>.
Prepare an array <code>K[0..63]</code> of 64 randomly generated numbers. This will be your key.
Take the bit of input number from position determined by the first random number (<code>I[K[0] mod 32]</code>) and place it at the beginning of your result (<code>O[0]</code>). Now to decide which bit to place at <code>O[1]</code>, use the previously used bit. If it is 0, use K[1] to generate position in <code>I</code> from which to take, it it is 1, use K[2] (which simply means skip one random number). </p>

<p>Now this will not work well, as you may take the same bit twice. In order to avoid it, renumber the bits after each iteration, omitting the used bits. To generate the position from which to take <code>O[1]</code> use <code>I[K[p] mod 31]</code>, where p is 1 or 2, depending on the bit <code>O[0]</code>, as there are 31 bits left, numbered from 0 to 30.</p>

<p>To illustrate this, I'll give an example:</p>

<p>We have a 4-bit number, and 8 random numbers: 25, 5, 28, 19, 14, 20, 0, 18.</p>

<pre><code>I: 0111    O: ____
    _
</code></pre>

<p>25 mod 4 = 1, so we'll take bit whose position is 1 (counting from 0)</p>

<pre><code>I: 0_11    O: 1___
     _
</code></pre>

<p>We've just taken a bit of value 1, so we skip one random number and use 28. There are 3 bits left, so to count position we take 28 mod 3 = 1. We take the first (counting from 0) of the remaining bits:</p>

<pre><code>I: 0__1    O: 11__
   _
</code></pre>

<p>Again we skip one number, and take 14. 14 mod 2 = 0, so we take the 0th bit:</p>

<pre><code>I: ___1    O: 110_
      _
</code></pre>

<p>Now it doesn't matter, but the previous bit was 0, so we take 20. 20 mod 1 = 0:</p>

<pre><code>I: ____    O: 1101
</code></pre>

<p>And this is it.</p>

<p>Deciphering such a number is easy, one just has to do the same things. The position at which to place the first bit of the code is known from the key, the next positions are determined by the previously inserted bits.</p>

<p>This obviously has all the disadvantages of anything which just moves the bits around (for example 0 becomes 0, and MAXINT becomes MAXINT), but is seems harder to find how someone has encrypted the number without knowing the key, which has to be secret.</p>
","5091","<algorithm><encryption-symmetric><block-cipher><bijection>","32","1","11","2019-07-31 15:07:00","3156231","6","13","445517","","2013-02-09 15:29:08","2010-06-28 09:12:12",""
"3131193","Symmetric Bijective Algorithm for Integers","<p>I need an algorithm that can do a one-to-one mapping (ie. no collision) of a 32-bit signed integer onto another 32-bit signed integer.</p>

<p>My real concern is enough entropy so that the output of the function appears to be random. Basically I am looking for a cipher similar to XOR Cipher but that can generate more arbitrary-looking outputs. Security is not my real concern, although obscurity is.</p>

<p>Edit for clarification purpose:</p>

<ol>
<li>The algorithm <strong>must</strong> be symetric, so that I can reverse the operation without a keypair.</li>
<li>The algorithm <strong>must</strong> be bijective, every 32-bit input number must generate a 32-bit unique number.</li>
<li>The output of the function must be obscure enough, adding only one to the input should result big effect on the output.</li>
</ol>

<p>Example expected result:
<br />
<br />F(100) = 98456
<br />F(101) = -758
<br />F(102) = 10875498
<br />F(103) = 986541
<br />F(104) = 945451245
<br />F(105) = -488554</p>

<p>Just like MD5, changing one thing may change lots of things.</p>

<p>I am looking for a mathmetical function, so manually mapping integers is not a solution for me. For those who are asking, algorithm speed is not very important.</p>
","<p>Split the number in two (16 most significant bits and 16 least significant bits) and consider the bits in the two 16-bit results as cards in two decks. Mix the decks forcing one into the other.</p>

<p>So if your initial number is <code>b31,b30,...,b1,b0</code> you end up with <code>b15,b31,b14,b30,...,b1,b17,b0,b16</code>. It's fast and quick to implement, as is the inverse.</p>

<p>If you look at the decimal representation of the results, the series looks pretty obscure.</p>

<p>You can manually map 0 -> maxvalue and maxvalue -> 0 to avoid them mapping onto themselves.</p>
","5091","<algorithm><encryption-symmetric><block-cipher><bijection>","32","0","11","2019-07-31 15:07:00","3156231","6","13","445517","","2013-02-09 15:29:08","2010-06-28 09:12:12",""
"3131193","Symmetric Bijective Algorithm for Integers","<p>I need an algorithm that can do a one-to-one mapping (ie. no collision) of a 32-bit signed integer onto another 32-bit signed integer.</p>

<p>My real concern is enough entropy so that the output of the function appears to be random. Basically I am looking for a cipher similar to XOR Cipher but that can generate more arbitrary-looking outputs. Security is not my real concern, although obscurity is.</p>

<p>Edit for clarification purpose:</p>

<ol>
<li>The algorithm <strong>must</strong> be symetric, so that I can reverse the operation without a keypair.</li>
<li>The algorithm <strong>must</strong> be bijective, every 32-bit input number must generate a 32-bit unique number.</li>
<li>The output of the function must be obscure enough, adding only one to the input should result big effect on the output.</li>
</ol>

<p>Example expected result:
<br />
<br />F(100) = 98456
<br />F(101) = -758
<br />F(102) = 10875498
<br />F(103) = 986541
<br />F(104) = 945451245
<br />F(105) = -488554</p>

<p>Just like MD5, changing one thing may change lots of things.</p>

<p>I am looking for a mathmetical function, so manually mapping integers is not a solution for me. For those who are asking, algorithm speed is not very important.</p>
","<p>If you don't want to use proper cryptographic algorithms (perhaps for performance and complexity reasons) you can instead use a simpler cipher like the <a href=""http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher"" rel=""nofollow noreferrer"">Vigenère cipher</a>. This cipher was actually described as <em>le chiffre indéchiffrable</em> (French for 'the unbreakable cipher').</p>

<p>Here is a simple C# implementation that shifts values based on a corresponding key value:</p>

<pre><code>void Main()
{
  var clearText = Enumerable.Range(0, 10);
  var key = new[] { 10, 20, Int32.MaxValue };
  var cipherText = Encode(clearText, key);
  var clearText2 = Decode(cipherText, key);
}

IEnumerable&lt;Int32&gt; Encode(IEnumerable&lt;Int32&gt; clearText, IList&lt;Int32&gt; key) {
  return clearText.Select((i, n) =&gt; unchecked(i + key[n%key.Count]));
}

IEnumerable&lt;Int32&gt; Decode(IEnumerable&lt;Int32&gt; cipherText, IList&lt;Int32&gt; key) {
  return cipherText.Select((i, n) =&gt; unchecked(i - key[n%key.Count]));
}
</code></pre>

<p>This algorithm does not create a big shift in the output when the input is changed slightly. However, you can use another bijective operation instead of addition to achieve that.</p>
","5091","<algorithm><encryption-symmetric><block-cipher><bijection>","32","1","11","2019-07-31 15:07:00","3156231","6","13","445517","","2013-02-09 15:29:08","2010-06-28 09:12:12",""
"3131193","Symmetric Bijective Algorithm for Integers","<p>I need an algorithm that can do a one-to-one mapping (ie. no collision) of a 32-bit signed integer onto another 32-bit signed integer.</p>

<p>My real concern is enough entropy so that the output of the function appears to be random. Basically I am looking for a cipher similar to XOR Cipher but that can generate more arbitrary-looking outputs. Security is not my real concern, although obscurity is.</p>

<p>Edit for clarification purpose:</p>

<ol>
<li>The algorithm <strong>must</strong> be symetric, so that I can reverse the operation without a keypair.</li>
<li>The algorithm <strong>must</strong> be bijective, every 32-bit input number must generate a 32-bit unique number.</li>
<li>The output of the function must be obscure enough, adding only one to the input should result big effect on the output.</li>
</ol>

<p>Example expected result:
<br />
<br />F(100) = 98456
<br />F(101) = -758
<br />F(102) = 10875498
<br />F(103) = 986541
<br />F(104) = 945451245
<br />F(105) = -488554</p>

<p>Just like MD5, changing one thing may change lots of things.</p>

<p>I am looking for a mathmetical function, so manually mapping integers is not a solution for me. For those who are asking, algorithm speed is not very important.</p>
","<p>If your goal is simply to get a seemingly random permutation of numbers of a <em>roughly</em> defined size, then there is another possible way: reduce the set of numbers to a prime number.</p>

<p>Then you can use a mapping of the form</p>

<p>f(i) = (i * a + b) % p</p>

<p>and if p is indeed a prime, this will be a bijection for all a != 0 and all b. It will look fairly random for larger a and b.</p>

<p>For example, in my case for which I stumbled on this question, I used 1073741789 as a prime for the range of numbers smaller than 1 &lt;&lt; 30. That makes me lose only 35 numbers, which is fine in my case.</p>

<p>My encoding is then</p>

<pre><code>((n + 173741789) * 507371178) % 1073741789
</code></pre>

<p>and the decoding is</p>

<pre><code>(n * 233233408 + 1073741789 - 173741789) % 1073741789
</code></pre>

<p>Note that 507371178 * 233233408 % 1073741789 == 1, so those two numbers are inverse the field of numbers modulo 1073741789 (you can figure out inverse numbers in such fields with the extended euclidean algorithm).</p>

<p>I chose a and b fairly arbitrarily, I merely made sure they are roughly half the size of p.</p>
","5091","<algorithm><encryption-symmetric><block-cipher><bijection>","32","3","11","2019-07-31 15:07:00","3156231","6","13","445517","","2013-02-09 15:29:08","2010-06-28 09:12:12",""
"27558625","How do I use AES_CBC_Encrypt 128 openssl properly in Ubuntu?","<p>Still finding it hard to work with memory in C. I'm reading a text file, where I store each line of text containing a name and random string of 40 characters exactly, into 2 buffers, char buffer1[128] and char buffer2[128] using fscanf() which people seem to dislike, and later I need to take JUST the string (without any padding or empty space in the rest of the buffer) and encrypt it using AES-CBC-128 and then later on decrypt it. I use md5 on the names to generate a key of 16 bytes which I use in the encryption process and a random initialization vector 16 bytes again. Now, the encryption/decryption works fine almost if I type in the string of 40 chars myself into the AES encrypt function (i.e. the string is decrypted later correctly but there's a few extra gibberish characters appearing beforehand), but if I pass the buffer containing the string into the function, the decryption comes out ALL with gibberish characters (in other words it does not work). If I try to make the buffer small enough to contain the string exactly (char buffer[40]), the encryption/decryption doesn't work. If I try to make it char buffer[41] for the terminator in strings in C, I get a Core Dump error.
I'm still a C noob and can't figure out what I am doing wrong!
N.B. If I use 48 bytes for the encryption length (multiple of AES BLOCK SIZE which is 16 bytes), it DOES NOT WORK. When I use 40 bytes for encryption length (same as the data to be encrypted) it almost works like I said above. Please explain how I can use AES_CBC_Encrypt PROPERLY ONCE AND FOR ALL! I am using openssl and the test code is:</p>

<pre><code>void alice() {
    FILE *fp=fopen(""alice.txt"",""r""); //read mode
    int j;
    char buffer1[128], buffer2[128]; //buffer1-&gt;names, buffer2-&gt;data
    unsigned char h_j[SHA_DIGEST_LENGTH];
    unsigned char k_j[MD5_DIGEST_LENGTH];

    //loops over the 25 lines in alice.txt file
    for (j=0; j&lt;n_alice; j++) {
        //read a_j data_j into addresses of buffer1 and buffer2
        fscanf(fp,""%s %s\n"",(char*)&amp;buffer1, (char*)&amp;buffer2); //buffer1=names, buffer2=data
        if (dbg) printf(""Reading %s %40s\n"", buffer1, buffer2);

        //Calculate h_j=SHA1(a_j)
        SHA1((unsigned char*)&amp;buffer1, strlen(buffer1),(unsigned char*)h_j);

        //Calculate k_j=MD5(a_j)
        MD5((unsigned char*)&amp;buffer1, strlen(buffer1), (unsigned char*)k_j);

        //Encrypt c_j=AES-CBC-ENC(k_j,data_j)
        //using MD5 digest as the key for the AES CBC
        //initialization vector
        unsigned char init_vector[AES_BLOCK_SIZE];
        RAND_bytes(init_vector, AES_BLOCK_SIZE); //16 bytes

        const size_t encslength = 48;//((inputslength + AES_BLOCK_SIZE) / AES_BLOCK_SIZE) * AES_BLOCK_SIZE;
        unsigned char enc_out[encslength];
        unsigned char dec_out[40];
        memset(enc_out, 0, sizeof(enc_out));
        memset(dec_out, 0, sizeof(dec_out));

        AES_KEY enc_key, dec_key;
        AES_set_encrypt_key(k_j, sizeof(k_j), &amp;enc_key);
        AES_cbc_encrypt(buffer2, enc_out, strlen(buffer2), &amp;enc_key, init_vector, AES_ENCRYPT);

        AES_set_decrypt_key(k_j, sizeof(k_j), &amp;dec_key);
        AES_cbc_encrypt(enc_out, dec_out, encslength, &amp;dec_key, init_vector, AES_DECRYPT);

        printf(""original:\t %s\n"", buffer2);
        printf(""encrypt:\t %s\n"", enc_out);
        printf(""decrypt:\t %s\n"", dec_out);
    }
    fclose(fp);
}
</code></pre>

<p>Alice.txt contains:</p>

<p>yves E9D0EEFC4C6DD81F2A7BDE99CCE833FB7B2BDD6D
adam D6C33F73EC7175AEA67DEC98427B42AAF6E5E04C
david F58EEB1DDB9511A3F220A4B10F01F88260BC99AB
umbert F6A6127E6562C5816433FB3B7C341C45A8805DCB
victoria CCF10AA4A4725C964FFF78BA3694393ADE1D7B6C
nick C8030118EB5E037F6131D9BB5B1BEF0A3F2AC458
xiaofeng E9B45ECAE2F42D59B90EACB2CA8E75A969A7EFAB
eve D8DA8BC812D9CD72B91EB7AF49D099A9BE85AB43
bob CC039D2746A3C55E4BA1DCEE46F329E4CA7E0A1A
florence C2DFD6650343659BFB530FE719139AB4D3F2BEDC
herbert CDCB4196E8CA9002219EC7A8F372911501BD1BBD
ivy E53BC8DF9A81BDD881E5352BCE11A2BF0F33236B
jack C5213B5F8DC334010586FB094A63D50A7572470E
osvald D0FBD9B2102DF6C41C8B26F25AF3E18ACF2BD27C
steven C9A3AB53FAA9E8243A63EBDC3257D1C8CCEC7D1C
kevin D7C6774E65DBB8F312F50183C87D67BC6FBF7BED
gavin F4C1945162294DD902C6BC11EE23BF8B682AC6C9
luke DF2FD780E13F9511411EC92B476D167A6D9F334A
martin FE6D5175D3B6E49B6649DBD6F21559F15847CA31
pippo DA908468DBE291E4DDEB082E36E9F5BB316A3C3C
richard EC26FF6B364C51DCA5A7CB5D711BCC85946D2517
troy F1165BE81E08B38A42C582A8F25C2CC382233F3D
zach EF19BED4FD6732C92437A3F65C4BE69A5010994D
william EC74AA8C93AA32EFF85EC4437F50F1F86AECAC29
charlie C86D2F8A3EF1F03127628C7CF9C6D9FB730DACBF</p>

<p>I just call alice() from main to test this.</p>
","<p>I managed to figure out my grave mistake. The line:</p>

<pre><code>AES_set_encrypt_key(k_j, sizeof(k_j), &amp;enc_key);
</code></pre>

<p>should be:</p>

<pre><code>AES_set_encrypt_key(k_j, sizeof(k_j)*8, &amp;enc_key);
</code></pre>

<p>Also the <code>enclength</code> and <code>declength</code> in the <code>AES_CBC_Encrypt()</code> function should be the same apparently. So I used 48bytes for both encryption and decryption, otherwise it didn't work for me. I could be wrong but when I used <code>strlen(buffer2)</code> for encryption (which is 40bytes) the decryption only managed to decrypt part of the string correctly, the rest of it was still gibberish characters. –  val37</p>
","5079","<c><string><openssl><aes><encryption-symmetric>","2","0","2","2016-10-20 17:13:39","","4","","3222979","","2016-10-20 00:20:21","2014-12-19 01:41:48",""
"27558625","How do I use AES_CBC_Encrypt 128 openssl properly in Ubuntu?","<p>Still finding it hard to work with memory in C. I'm reading a text file, where I store each line of text containing a name and random string of 40 characters exactly, into 2 buffers, char buffer1[128] and char buffer2[128] using fscanf() which people seem to dislike, and later I need to take JUST the string (without any padding or empty space in the rest of the buffer) and encrypt it using AES-CBC-128 and then later on decrypt it. I use md5 on the names to generate a key of 16 bytes which I use in the encryption process and a random initialization vector 16 bytes again. Now, the encryption/decryption works fine almost if I type in the string of 40 chars myself into the AES encrypt function (i.e. the string is decrypted later correctly but there's a few extra gibberish characters appearing beforehand), but if I pass the buffer containing the string into the function, the decryption comes out ALL with gibberish characters (in other words it does not work). If I try to make the buffer small enough to contain the string exactly (char buffer[40]), the encryption/decryption doesn't work. If I try to make it char buffer[41] for the terminator in strings in C, I get a Core Dump error.
I'm still a C noob and can't figure out what I am doing wrong!
N.B. If I use 48 bytes for the encryption length (multiple of AES BLOCK SIZE which is 16 bytes), it DOES NOT WORK. When I use 40 bytes for encryption length (same as the data to be encrypted) it almost works like I said above. Please explain how I can use AES_CBC_Encrypt PROPERLY ONCE AND FOR ALL! I am using openssl and the test code is:</p>

<pre><code>void alice() {
    FILE *fp=fopen(""alice.txt"",""r""); //read mode
    int j;
    char buffer1[128], buffer2[128]; //buffer1-&gt;names, buffer2-&gt;data
    unsigned char h_j[SHA_DIGEST_LENGTH];
    unsigned char k_j[MD5_DIGEST_LENGTH];

    //loops over the 25 lines in alice.txt file
    for (j=0; j&lt;n_alice; j++) {
        //read a_j data_j into addresses of buffer1 and buffer2
        fscanf(fp,""%s %s\n"",(char*)&amp;buffer1, (char*)&amp;buffer2); //buffer1=names, buffer2=data
        if (dbg) printf(""Reading %s %40s\n"", buffer1, buffer2);

        //Calculate h_j=SHA1(a_j)
        SHA1((unsigned char*)&amp;buffer1, strlen(buffer1),(unsigned char*)h_j);

        //Calculate k_j=MD5(a_j)
        MD5((unsigned char*)&amp;buffer1, strlen(buffer1), (unsigned char*)k_j);

        //Encrypt c_j=AES-CBC-ENC(k_j,data_j)
        //using MD5 digest as the key for the AES CBC
        //initialization vector
        unsigned char init_vector[AES_BLOCK_SIZE];
        RAND_bytes(init_vector, AES_BLOCK_SIZE); //16 bytes

        const size_t encslength = 48;//((inputslength + AES_BLOCK_SIZE) / AES_BLOCK_SIZE) * AES_BLOCK_SIZE;
        unsigned char enc_out[encslength];
        unsigned char dec_out[40];
        memset(enc_out, 0, sizeof(enc_out));
        memset(dec_out, 0, sizeof(dec_out));

        AES_KEY enc_key, dec_key;
        AES_set_encrypt_key(k_j, sizeof(k_j), &amp;enc_key);
        AES_cbc_encrypt(buffer2, enc_out, strlen(buffer2), &amp;enc_key, init_vector, AES_ENCRYPT);

        AES_set_decrypt_key(k_j, sizeof(k_j), &amp;dec_key);
        AES_cbc_encrypt(enc_out, dec_out, encslength, &amp;dec_key, init_vector, AES_DECRYPT);

        printf(""original:\t %s\n"", buffer2);
        printf(""encrypt:\t %s\n"", enc_out);
        printf(""decrypt:\t %s\n"", dec_out);
    }
    fclose(fp);
}
</code></pre>

<p>Alice.txt contains:</p>

<p>yves E9D0EEFC4C6DD81F2A7BDE99CCE833FB7B2BDD6D
adam D6C33F73EC7175AEA67DEC98427B42AAF6E5E04C
david F58EEB1DDB9511A3F220A4B10F01F88260BC99AB
umbert F6A6127E6562C5816433FB3B7C341C45A8805DCB
victoria CCF10AA4A4725C964FFF78BA3694393ADE1D7B6C
nick C8030118EB5E037F6131D9BB5B1BEF0A3F2AC458
xiaofeng E9B45ECAE2F42D59B90EACB2CA8E75A969A7EFAB
eve D8DA8BC812D9CD72B91EB7AF49D099A9BE85AB43
bob CC039D2746A3C55E4BA1DCEE46F329E4CA7E0A1A
florence C2DFD6650343659BFB530FE719139AB4D3F2BEDC
herbert CDCB4196E8CA9002219EC7A8F372911501BD1BBD
ivy E53BC8DF9A81BDD881E5352BCE11A2BF0F33236B
jack C5213B5F8DC334010586FB094A63D50A7572470E
osvald D0FBD9B2102DF6C41C8B26F25AF3E18ACF2BD27C
steven C9A3AB53FAA9E8243A63EBDC3257D1C8CCEC7D1C
kevin D7C6774E65DBB8F312F50183C87D67BC6FBF7BED
gavin F4C1945162294DD902C6BC11EE23BF8B682AC6C9
luke DF2FD780E13F9511411EC92B476D167A6D9F334A
martin FE6D5175D3B6E49B6649DBD6F21559F15847CA31
pippo DA908468DBE291E4DDEB082E36E9F5BB316A3C3C
richard EC26FF6B364C51DCA5A7CB5D711BCC85946D2517
troy F1165BE81E08B38A42C582A8F25C2CC382233F3D
zach EF19BED4FD6732C92437A3F65C4BE69A5010994D
william EC74AA8C93AA32EFF85EC4437F50F1F86AECAC29
charlie C86D2F8A3EF1F03127628C7CF9C6D9FB730DACBF</p>

<p>I just call alice() from main to test this.</p>
","<p>I struggled with that bad documented API of OpenSSL myself. It really doesn't help that the functions itself are implemented in Assembler, so even the sources are not helping. But I was able to identify some mistakes you've made:</p>

<ol>
<li>As you've stated, <code>AES_set_encrypt_key</code> takes <strong>bit-size</strong> as second parameter, not bytes.</li>
<li>The key <strong>must</strong> be exactly of sizes 16, 24, or 32 bytes.</li>
<li>The given <code>init_vector</code> <strong>must</strong> be the same at start of encryption and decryption.</li>
</ol>

<p>Because of 2. your whole example won't work with sha1. <code>MD5_DIGEST_LENGTH</code> and has 16 bytes (128 bit) just by coincidence. The initialization vector also gets changed by the encryption operation, so you could add additional data to the block chain again and again. But since you were not following 3. and used the changed vector for decryption without resetting it first, that's why your decryption returns ""gibberish characters"".</p>

<p>As an example I took your code, threw out anything unnecessary, and extracted the encrypt/decrypt operations for clearing up the important parts:</p>

<pre><code>void encrypt(unsigned char* buf, size_t length, const AES_KEY* const enc_key, const unsigned char* iv)
{
  unsigned char local_vector[AES_BLOCK_SIZE];
  memcpy(local_vector, iv, AES_BLOCK_SIZE);

  AES_cbc_encrypt(buf, buf, length, enc_key, local_vector, AES_ENCRYPT);
}
</code></pre>

<p>I'm working on buf for reading and writing. As you can see the init_vector gets copied locally to keep the original constant. I did the similar for decryption.</p>

<pre><code>void decrypt(unsigned char* buf, size_t length, const AES_KEY* const dec_key, const unsigned char* iv)
{
  unsigned char local_vector[AES_BLOCK_SIZE];
  memcpy(local_vector, iv, AES_BLOCK_SIZE);

  AES_cbc_encrypt(buf, buf, length, dec_key, local_vector, AES_DECRYPT);
}
</code></pre>

<p>And here is what I did with your code. I haven't changed fscanf, because we should focus on the asked problem instead of confusing people:</p>

<pre><code>void tst_function()
{
  FILE *fp=fopen(""alice.txt"",""r""); //read mode
  char buffer1[128], buffer2[128]; //buffer1-&gt;names, buffer2-&gt;data
  memset(buffer1, 0, sizeof(buffer1));
  memset(buffer2, 0, sizeof(buffer2));
  // remember, this won't work with any other size
  unsigned char k_j[AES_BLOCK_SIZE];

  //until end of file
  while(fscanf(fp,""%s %s\n"",(char*)&amp;buffer1, (char*)&amp;buffer2) &gt; 0)
  {
     printf(""Reading %s %40s\n"", buffer1, buffer2);
     printf(""original:\t%s\n"", buffer2);

     unsigned char init_vector[AES_BLOCK_SIZE];
     RAND_bytes(init_vector, AES_BLOCK_SIZE);

     // PKCS 5 Padding
     // ((inputs_length + AES_BLOCK_SIZE) / AES_BLOCK_SIZE) * AES_BLOCK_SIZE;
     const size_t encslength = 48;
     unsigned char enc_out[encslength];
     memset(enc_out, 0, sizeof(enc_out));
     strncpy(enc_out, buffer2, sizeof(enc_out));

     AES_KEY enc_key, dec_key;
     AES_set_encrypt_key(k_j, sizeof(k_j)*8, &amp;enc_key);
     AES_set_decrypt_key(k_j, sizeof(k_j)*8, &amp;dec_key);

     encrypt(enc_out, encslength, &amp;enc_key, init_vector); //see above
     printf(""encrypted:\t%s\n"", (char*)enc_out);

     decrypt(enc_out, encslength, &amp;dec_key, init_vector); //see above
     printf(""decrpyted:\t%s\n"", (char*)enc_out);
   }
   fclose(fp);
}
</code></pre>

<p>It now does what one would expect it to do. You have to be extremely careful about the key size. I crashed a lot because of dangling zeros (from strings) I wasn't aware of. Additionally you could take a look into <a href=""https://wiki.openssl.org/index.php/EVP_Symmetric_Encryption_and_Decryption"" rel=""nofollow"" title=""OpenSSL Wiki"">EVP Symmetric Encryption and Decryption</a> and XTS for keys up to 512 bit.</p>
","5079","<c><string><openssl><aes><encryption-symmetric>","2","-1","2","2016-10-20 17:13:39","","4","","3222979","","2016-10-20 00:20:21","2014-12-19 01:41:48",""
"18077567","How to encrypt/decrypt for storage of sensitive data (ASP.NET Web API project)","<p>I am currently developping a web service. As part of this web service, I am be able to securely store user password in a SQL DB, and be able to unencrypt password value to the end-user through HTTPS web service.</p>

<p>It's the first time I have to deal with this requirement. I found many example based on symetric and/or asymetric encryption. However I don't understand to permanently store the password/key used to encrypt the data.</p>

<p>For instance, if I do use a symetric encryption based on RijndaelManaged, how do I securely store the input parameters used for the encryption so that my web service can at a later time retrieve data for the SQL DB, and unencrypt them.</p>
","<blockquote>
  <p>securely store user password in a SQL DB, and be able to unencrypt
  password value</p>
</blockquote>

<p>That's not secure. Passwords should never be encrypted; they should be <strong><em>hashed</em></strong>! With a salt and a <a href=""https://stackoverflow.com/questions/10948994/secure-hashing-in-net"">hashing algorithm that is suited for pashword hashing</a>.</p>
","4926","<c#><.net><encryption-symmetric>","1","3","2","2013-08-06 12:28:00","","1","1","","","","2013-08-06 10:26:31",""
"18077567","How to encrypt/decrypt for storage of sensitive data (ASP.NET Web API project)","<p>I am currently developping a web service. As part of this web service, I am be able to securely store user password in a SQL DB, and be able to unencrypt password value to the end-user through HTTPS web service.</p>

<p>It's the first time I have to deal with this requirement. I found many example based on symetric and/or asymetric encryption. However I don't understand to permanently store the password/key used to encrypt the data.</p>

<p>For instance, if I do use a symetric encryption based on RijndaelManaged, how do I securely store the input parameters used for the encryption so that my web service can at a later time retrieve data for the SQL DB, and unencrypt them.</p>
","<p>Use this:</p>

<pre><code>public class Crypto
{
        #region enums, constants &amp; fields
        //types of symmetric encyption
        public enum CryptoTypes
        {
            encTypeDES = 0,
            encTypeRC2,
            encTypeRijndael,
            encTypeTripleDES
        }

    private const string CRYPT_DEFAULT_PASSWORD = ""yourDefaultPassword""; //""CB06cfE507a1"";
    private const CryptoTypes CRYPT_DEFAULT_METHOD = CryptoTypes.encTypeRijndael;

    private byte[] mKey = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24};
    private byte[] mIV = {65, 110, 68, 26, 69, 178, 200, 219};
    private byte[] SaltByteArray  = {0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76};
    private CryptoTypes mCryptoType = CRYPT_DEFAULT_METHOD;
    private string mPassword = CRYPT_DEFAULT_PASSWORD;
    #endregion

    #region Constructors

    public Crypto()
    {
        calculateNewKeyAndIV();
    }

    public Crypto(CryptoTypes CryptoType)
    {
        this.CryptoType = CryptoType;
    }
    #endregion

    #region Props

    /// &lt;summary&gt;
    ///     type of encryption / decryption used
    /// &lt;/summary&gt;
    public CryptoTypes CryptoType
    {
        get
        {
            return mCryptoType;
        }
        set
        {
            if (mCryptoType != value)
            {
                mCryptoType = value;
                calculateNewKeyAndIV();
            }
        }
    }

    /// &lt;summary&gt;
    ///     Passsword Key Property.
    ///     The password key used when encrypting / decrypting
    /// &lt;/summary&gt;
    public string Password
    {
        get
        {
            return mPassword;
        }
        set
        {
            if (mPassword != value)
            {
                mPassword = value;
                calculateNewKeyAndIV();
            }
        }
    }
    #endregion

    #region Encryption

    /// &lt;summary&gt;
    ///     Encrypt a string
    /// &lt;/summary&gt;
    /// &lt;param storeName=""inputText""&gt;text to encrypt&lt;/param&gt;
    /// &lt;returns&gt;an encrypted string&lt;/returns&gt;
    public string Encrypt(string inputText)
    {
        //declare a new encoder
        UTF8Encoding UTF8Encoder = new UTF8Encoding();
        //get byte representation of string
        byte[] inputBytes = UTF8Encoder.GetBytes(inputText);

        //convert back to a string
        return Convert.ToBase64String(EncryptDecrypt(inputBytes,true));
    }

    /// &lt;summary&gt;
    ///     Encrypt string with user defined password
    /// &lt;/summary&gt;
    /// &lt;param storeName=""inputText""&gt;text to encrypt&lt;/param&gt;
    /// &lt;param storeName=""password""&gt;password to use when encrypting&lt;/param&gt;
    /// &lt;returns&gt;an encrypted string&lt;/returns&gt;
    public string Encrypt(string inputText, string password)
    {
        this.Password = password;
        return this.Encrypt(inputText);
    }

    /// &lt;summary&gt;
    ///     Encrypt string acc. to cryptoType and with user defined password
    /// &lt;/summary&gt;
    /// &lt;param storeName=""inputText""&gt;text to encrypt&lt;/param&gt;
    /// &lt;param storeName=""password""&gt;password to use when encrypting&lt;/param&gt;
    /// &lt;param storeName=""cryptoType""&gt;type of encryption&lt;/param&gt;
    /// &lt;returns&gt;an encrypted string&lt;/returns&gt;
    public string Encrypt(string inputText, string password, CryptoTypes cryptoType)
    {
        mCryptoType = cryptoType;
        return this.Encrypt(inputText,password);
    }

    /// &lt;summary&gt;
    ///     Encrypt string acc. to cryptoType
    /// &lt;/summary&gt;
    /// &lt;param storeName=""inputText""&gt;text to encrypt&lt;/param&gt;
    /// &lt;param storeName=""cryptoType""&gt;type of encryption&lt;/param&gt;
    /// &lt;returns&gt;an encrypted string&lt;/returns&gt;
    public string Encrypt(string inputText, CryptoTypes cryptoType)
    {
        this.CryptoType = cryptoType;
        return this.Encrypt(inputText);
    }

    #endregion

    #region Decryption

    /// &lt;summary&gt;
    ///     decrypts a string
    /// &lt;/summary&gt;
    /// &lt;param storeName=""inputText""&gt;string to decrypt&lt;/param&gt;
    /// &lt;returns&gt;a decrypted string&lt;/returns&gt;
    public string Decrypt(string inputText)
    {
        //declare a new encoder
        UTF8Encoding UTF8Encoder = new UTF8Encoding();
        //get byte representation of string
        byte[] inputBytes = Convert.FromBase64String(inputText);

        //convert back to a string
        return UTF8Encoder.GetString(EncryptDecrypt(inputBytes,false));
    }

    /// &lt;summary&gt;
    ///     decrypts a string using a user defined password key
    /// &lt;/summary&gt;
    /// &lt;param storeName=""inputText""&gt;string to decrypt&lt;/param&gt;
    /// &lt;param storeName=""password""&gt;password to use when decrypting&lt;/param&gt;
    /// &lt;returns&gt;a decrypted string&lt;/returns&gt;
    public string Decrypt(string inputText, string password)
    {
        this.Password = password;
        return Decrypt(inputText);
    }

    /// &lt;summary&gt;
    ///     decrypts a string acc. to decryption type and user defined password key
    /// &lt;/summary&gt;
    /// &lt;param storeName=""inputText""&gt;string to decrypt&lt;/param&gt;
    /// &lt;param storeName=""password""&gt;password key used to decrypt&lt;/param&gt;
    /// &lt;param storeName=""cryptoType""&gt;type of decryption&lt;/param&gt;
    /// &lt;returns&gt;a decrypted string&lt;/returns&gt;
    public string Decrypt(string inputText, string password, CryptoTypes cryptoType)
    {
        mCryptoType = cryptoType;
        return Decrypt(inputText,password);
    }

    /// &lt;summary&gt;
    ///     decrypts a string acc. to the decryption type
    /// &lt;/summary&gt;
    /// &lt;param storeName=""inputText""&gt;string to decrypt&lt;/param&gt;
    /// &lt;param storeName=""cryptoType""&gt;type of decryption&lt;/param&gt;
    /// &lt;returns&gt;a decrypted string&lt;/returns&gt;
    public string Decrypt(string inputText, CryptoTypes cryptoType)
    {
        this.CryptoType = cryptoType;
        return Decrypt(inputText);
    }
    #endregion

    #region Symmetric Engine

    /// &lt;summary&gt;
    ///     performs the actual enc/dec.
    /// &lt;/summary&gt;
    /// &lt;param storeName=""inputBytes""&gt;input byte array&lt;/param&gt;
    /// &lt;param storeName=""Encrpyt""&gt;wheather or not to perform enc/dec&lt;/param&gt;
    /// &lt;returns&gt;byte array output&lt;/returns&gt;
    private byte[] EncryptDecrypt(byte[] inputBytes, bool Encrpyt)
    {
        //get the correct transform
        ICryptoTransform transform = getCryptoTransform(Encrpyt);

        //memory stream for output
        MemoryStream memStream = new MemoryStream();

        try
        {
            //setup the cryption - output written to memstream
            CryptoStream cryptStream = new CryptoStream(memStream,transform,CryptoStreamMode.Write);

            //write data to cryption engine
            cryptStream.Write(inputBytes,0,inputBytes.Length);

            //we are finished
            cryptStream.FlushFinalBlock();

            //get result
            byte[] output = memStream.ToArray();

            //finished with engine, so close the stream
            cryptStream.Close();

            return output;
        }
        catch (Exception e)
        {
            //throw an error
            throw new Exception(""Error in symmetric engine. Error : "" + e.Message,e);
        }
    }

    /// &lt;summary&gt;
    ///     returns the symmetric engine and creates the encyptor/decryptor
    /// &lt;/summary&gt;
    /// &lt;param storeName=""encrypt""&gt;whether to return a encrpytor or decryptor&lt;/param&gt;
    /// &lt;returns&gt;ICryptoTransform&lt;/returns&gt;
    private ICryptoTransform getCryptoTransform(bool encrypt)
    {
        SymmetricAlgorithm SA = selectAlgorithm();
        SA.Key = mKey;
        SA.IV = mIV;
        if (encrypt)
        {
            return SA.CreateEncryptor();
        }else
        {
            return SA.CreateDecryptor();
        }
    }
    /// &lt;summary&gt;
    ///     returns the specific symmetric algorithm acc. to the cryptotype
    /// &lt;/summary&gt;
    /// &lt;returns&gt;SymmetricAlgorithm&lt;/returns&gt;
    private SymmetricAlgorithm selectAlgorithm()
    {
        SymmetricAlgorithm SA;
        switch (mCryptoType)
        {
            case CryptoTypes.encTypeDES:
                SA = DES.Create();
                break;
            case CryptoTypes.encTypeRC2:
                SA = RC2.Create();
                break;
            case CryptoTypes.encTypeRijndael:
                SA = Rijndael.Create();
                break;
            case CryptoTypes.encTypeTripleDES:
                SA = TripleDES.Create();
                break;
            default:
                SA = TripleDES.Create();
                break;
        }
        return SA;
    }

    /// &lt;summary&gt;
    ///     calculates the key and IV acc. to the symmetric method from the password
    ///     key and IV size dependant on symmetric method
    /// &lt;/summary&gt;
    private void calculateNewKeyAndIV()
    {
        //use salt so that key cannot be found with dictionary attack
        PasswordDeriveBytes pdb = new PasswordDeriveBytes(mPassword,SaltByteArray);
        SymmetricAlgorithm algo = selectAlgorithm();
        mKey = pdb.GetBytes(algo.KeySize / 8);
        mIV = pdb.GetBytes(algo.BlockSize / 8);
    }

    #endregion
}

/// &lt;summary&gt;
/// Hashing class. Only static members so no need to create an instance
/// &lt;/summary&gt;
public class Hashing
{
    #region enum, constants and fields
    //types of hashing available
    public enum HashingTypes
    {
        SHA, SHA256, SHA384, SHA512, MD5
    }
    #endregion

    #region static members
    public static string Hash(String inputText)
    {
        return ComputeHash(inputText,HashingTypes.MD5);
    }

    public static string Hash(String inputText, HashingTypes hashingType)
    {
        return ComputeHash(inputText,hashingType);
    }

    /// &lt;summary&gt;
    ///     returns true if the input text is equal to hashed text
    /// &lt;/summary&gt;
    /// &lt;param storeName=""inputText""&gt;unhashed text to test&lt;/param&gt;
    /// &lt;param storeName=""hashText""&gt;already hashed text&lt;/param&gt;
    /// &lt;returns&gt;boolean true or false&lt;/returns&gt;
    public static bool isHashEqual(string inputText, string hashText)
    {
        return (Hash(inputText) == hashText);
    }

    public static bool isHashEqual(string inputText, string hashText, HashingTypes hashingType)
    {
        return (Hash(inputText,hashingType) == hashText);
    }
    #endregion

    #region Hashing Engine

    /// &lt;summary&gt;
    ///     computes the hash code and converts it to string
    /// &lt;/summary&gt;
    /// &lt;param storeName=""inputText""&gt;input text to be hashed&lt;/param&gt;
    /// &lt;param storeName=""hashingType""&gt;type of hashing to use&lt;/param&gt;
    /// &lt;returns&gt;hashed string&lt;/returns&gt;
    private static string ComputeHash(string inputText, HashingTypes hashingType)
    {
        HashAlgorithm HA = getHashAlgorithm(hashingType);

        //declare a new encoder
        UTF8Encoding UTF8Encoder = new UTF8Encoding();
        //get byte representation of input text
        byte[] inputBytes = UTF8Encoder.GetBytes(inputText);


        //hash the input byte array
        byte[] output = HA.ComputeHash(inputBytes);

        //convert output byte array to a string
        return Convert.ToBase64String(output);
    }

    /// &lt;summary&gt;
    ///     returns the specific hashing alorithm
    /// &lt;/summary&gt;
    /// &lt;param storeName=""hashingType""&gt;type of hashing to use&lt;/param&gt;
    /// &lt;returns&gt;HashAlgorithm&lt;/returns&gt;
    private static HashAlgorithm getHashAlgorithm(HashingTypes hashingType)
    {
        switch (hashingType)
        {
            case HashingTypes.MD5 :
                return new MD5CryptoServiceProvider();
            case HashingTypes.SHA :
                return new SHA1CryptoServiceProvider();
            case HashingTypes.SHA256 :
                return new SHA256Managed();
            case HashingTypes.SHA384 :
                return new SHA384Managed();
            case HashingTypes.SHA512 :
                return new SHA512Managed();
            default :
                return new MD5CryptoServiceProvider();
        }
    }
    #endregion

}
</code></pre>

<p>You can use <strong>Encrypt</strong> and <strong>Decrypt</strong> methods for encryption and decryption</p>

<p>I used this on my projects...</p>
","4926","<c#><.net><encryption-symmetric>","1","2","2","2013-08-06 12:28:00","","1","1","","","","2013-08-06 10:26:31",""
"30696265","""Invalid use of a side-effecting operator 'OPEN SYMMETRIC KEY' within a function."" error while opening a symmetric key","<p>I am trying to open symmetric key inside two functions. Like this:</p>

<pre><code>CREATE FUNCTION DECRYPTDATA 
(
    @CipherText NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @Result NVARCHAR(MAX)
    OPEN SYMMETRIC KEY MyKEY DECRYPTION BY CERTIFICATE MyCERT
    SELECT @Result = CONVERT(VARCHAR(MAX),DECRYPTBYKEY(@CipherText))
    RETURN @Result

END
GO
CREATE FUNCTION ENCRYPTDATA 
(
    @Text NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @Result NVARCHAR(MAX)
    OPEN SYMMETRIC KEY MyKEY DECRYPTION BY CERTIFICATE MyCERT
    SELECT @Result = ENCRYPTBYKEY(Key_GUID('MyKEY'),@Text)
    RETURN @Result

END
GO
</code></pre>

<p>But I am getting this error:</p>

<blockquote>
  <p>Invalid use of a side-effecting operator 'OPEN SYMMETRIC KEY' within a
  function.</p>
</blockquote>

<p>Why this is happening?</p>
","<p>There are several things you can do inside a procedure but can't do inside a function. Based on Ben Cull's <a href=""http://benjii.me/2010/05/how-to-use-sql-server-encryption-with-symmetric-keys/"" rel=""nofollow"">blog</a>, you can get around this limitation by creating a procedure that handles opening the keys and call that before using the function.</p>

<p>The procedure:</p>

<pre><code>CREATE PROCEDURE OpenKeys
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        OPEN SYMMETRIC KEY MyKEY
        DECRYPTION BY CERTIFICATE MyCERT
    END TRY
    BEGIN CATCH
        -- Handle non-existant key here
    END CATCH
END
</code></pre>

<p>Then just call this before calling the functions.</p>
","4920","<sql-server><sql-server-2008><security><sql-server-2012><encryption-symmetric>","4","4","2","2018-03-20 12:09:49","30697108","0","","1124494","","2015-06-07 17:21:42","2015-06-07 17:11:39",""
"30696265","""Invalid use of a side-effecting operator 'OPEN SYMMETRIC KEY' within a function."" error while opening a symmetric key","<p>I am trying to open symmetric key inside two functions. Like this:</p>

<pre><code>CREATE FUNCTION DECRYPTDATA 
(
    @CipherText NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @Result NVARCHAR(MAX)
    OPEN SYMMETRIC KEY MyKEY DECRYPTION BY CERTIFICATE MyCERT
    SELECT @Result = CONVERT(VARCHAR(MAX),DECRYPTBYKEY(@CipherText))
    RETURN @Result

END
GO
CREATE FUNCTION ENCRYPTDATA 
(
    @Text NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @Result NVARCHAR(MAX)
    OPEN SYMMETRIC KEY MyKEY DECRYPTION BY CERTIFICATE MyCERT
    SELECT @Result = ENCRYPTBYKEY(Key_GUID('MyKEY'),@Text)
    RETURN @Result

END
GO
</code></pre>

<p>But I am getting this error:</p>

<blockquote>
  <p>Invalid use of a side-effecting operator 'OPEN SYMMETRIC KEY' within a
  function.</p>
</blockquote>

<p>Why this is happening?</p>
","<p>Actually, you can do this in function without opening the symmetric key using the <a href=""https://docs.microsoft.com/en-us/sql/t-sql/functions/decryptbykeyautocert-transact-sql"" rel=""noreferrer"">DECRYPTBYKEYAUTOCERT</a> function:</p>

<blockquote>
  <p>Decrypts by using a symmetric key that is automatically decrypted with
  a certificate.</p>
</blockquote>

<p>The following example demonstrates this:</p>

<pre><code>CREATE MASTER KEY ENCRYPTION
BY PASSWORD = 'sm_long_password@'
GO

CREATE CERTIFICATE CERT_01
WITH SUBJECT = 'CERT_01'
GO

CREATE SYMMETRIC KEY SK_01
WITH ALGORITHM = AES_256 ENCRYPTION
BY CERTIFICATE CERT_01
GO

CREATE FUNCTION [dbo].[TEST] (@encryptedValue VARBINARY(256))
RETURNS NVARCHAR(128)
AS
BEGIN;
    RETURN CONVERT(NVARCHAR(128),DECRYPTBYKEYAUTOCERT(CERT_ID('CERT_01'), NULL, @encryptedValue));
END
GO


DECLARE @encryptedValue VARBINARY(256);


OPEN SYMMETRIC KEY SK_01 DECRYPTION
BY CERTIFICATE CERT_01

SET @encryptedValue = ENCRYPTBYKEY(KEY_GUID('SK_01'), N'Stack Overflow')

CLOSE SYMMETRIC KEY SK_01;


SELECT [dbo].[TEST] (@encryptedValue);


DROP FUNCTION [dbo].[TEST];
DROP SYMMETRIC KEY SK_01;
DROP CERTIFICATE CERT_01;
DROP MASTER KEY;
</code></pre>
","4920","<sql-server><sql-server-2008><security><sql-server-2012><encryption-symmetric>","4","6","2","2018-03-20 12:09:49","30697108","0","","1124494","","2015-06-07 17:21:42","2015-06-07 17:11:39",""
"15162293","AESManaged File Encryption and Decryption and prepending initiaization vector","<p>I am trying to encrypt/decrypt bytes -  I have done a lot of reading about the Key and IV for the AES algorithm using the AESManaged class in System.Security.Cryptography. I read James Johnson's answer to the following question <a href=""http://www.techques.com/question/1-7025135/My-Length-of-the-data-to-decrypt-is-invalid-error"" rel=""nofollow"">http://www.techques.com/question/1-7025135/My-Length-of-the-data-to-decrypt-is-invalid-error</a> where he suggests that you use a random IV in the encryption routine and prepend the IV to the encrypted message. The decrypt function strips off the random IV from the beginning of the encrypted message to initialize the decryption class and then decrypts the rest of the bytes. I have attempted to do this in the following code. But I keep getting the ""Length of the data to decrypt is invalid."" error message when I attempt the decrypt after the encryption. Could someone possibly shed some light on what might be wrong.</p>

<pre><code>       USAGE: (streamToEncrypt/streamToDecrypt are System.IO.Stream)
</code></pre>

<hr>

<pre><code>       using (var cryptoHelper = new AESHelper())
        {
            var encryptedBytes = cryptoHelper.Encrypt(AESHelper.StreamToByteArray(streamToEncrypt));

        }


using (var cryptoHelper = new AESHelper())
        {
            var decryptedBytes = cryptoHelper.Decrypt(AESHelper.StreamToByteArray(streamToDecrypt));                             
        }

 public class AESHelper : IDisposable
 {       
    public AesManaged AESManaged;
    internal ICryptoTransform Encryptor { get; set; }
    internal ICryptoTransform Decryptor { get; set; }
    private const string KEY = ""2428GD19569F9B2C2341839416C8E87G"";
    private static readonly byte[] Salt = Encoding.ASCII.GetBytes(""?pt1$8f]l4g80"");
    private const Int32 ITERATIONS = 1042;


    internal AESHelper()
    {
        AESManaged = new AesManaged();
        AESManaged.BlockSize = AESManaged.LegalBlockSizes[0].MaxSize;
        AESManaged.KeySize = AESManaged.LegalKeySizes[0].MaxSize;                    
        AESManaged.Mode= CipherMode.CBC;
    }
   public void KeyGenerator()
    {
        var key = new Rfc2898DeriveBytes(KEY, Salt, ITERATIONS);
        AESManaged.Key = key.GetBytes(AESManaged.KeySize / 8);           
    }
    public byte[] Encrypt(byte[] input)
    {
        KeyGenerator();
        var ms = new MemoryStream();
        //Random IV 
        Encryptor = AESManaged.CreateEncryptor(AESManaged.Key, AESManaged.IV);
        //Add the IV to the beginning of the memory stream
        ms.Write(BitConverter.GetBytes(AESManaged.IV.Length), 0, sizeof(int));
        ms.Write(AESManaged.IV, 0, AESManaged.IV.Length);
        var cs = new CryptoStream(ms,
          Encryptor, CryptoStreamMode.Write);
        cs.Write(input, 0, input.Length);
        cs.Close();
        return ms.ToArray();
    }
    public byte[] Decrypt(byte[] input)
    {
        KeyGenerator();

        // Get the initialization vector from the encrypted stream
        var ms = new MemoryStream(input);
        AESManaged.IV = ReadByteArray(ms);
        Decryptor = AESManaged.CreateDecryptor(AESManaged.Key, AESManaged.IV);
        var cs = new CryptoStream(ms,
         Decryptor, CryptoStreamMode.Write);
        cs.Write(input, 0, input.Length);
        cs.Close();//Error occurs here
        return ms.ToArray();
    }

    internal static byte[] ReadByteArray(Stream s)
    {
        var rawLength = new byte[sizeof(int)];
        if (s.Read(rawLength, 0, rawLength.Length) != rawLength.Length)
        {
            throw new SystemException(""Stream did not contain properly formatted byte array"");
        }
        var buffer = new byte[16];
        if (s.Read(buffer, 0, buffer.Length) != buffer.Length)
        {
            throw new SystemException(""Did not read byte array properly"");
        }

        return buffer;
    }
     internal static byte[] StreamToByteArray(Stream inputStream)
    {
        if (!inputStream.CanRead)
        {
            throw new ArgumentException();
        }

        // This is optional
        if (inputStream.CanSeek)
        {
            inputStream.Seek(0, SeekOrigin.Begin);
        }

        var output = new byte[inputStream.Length];
        var bytesRead = inputStream.Read(output, 0, output.Length);
        Debug.Assert(bytesRead == output.Length, ""Bytes read from stream matches stream length"");
        return output;
    }
  public void Dispose()
    {
        if (AESManaged != null)
            ((IDisposable) AESManaged).Dispose();

    }}
</code></pre>

<p>Many Thanks in advance</p>
","<p>Probably you have solved this already but I'll just put my answer for others who faces similar issue. </p>

<p>Error occurs due to the additional information present in the <code>input</code> array. In <code>public byte[] Encrypt(byte[] input)</code> method you are writing IV length and IV before the ciphered data is written. Lines: </p>

<pre><code>ms.Write(BitConverter.GetBytes(AESManaged.IV.Length), 0, sizeof(int));
ms.Write(AESManaged.IV, 0, AESManaged.IV.Length);
</code></pre>

<p>In <code>public byte[] Decrypt(byte[] input)</code> method you are reading this information and using read IV as initialization vector for AES algorithm. All fine. Then you are constructing <code>CryptoStream</code> with <code>CryptoStreamMode.Write</code> and passing <code>MemoryStream</code> object <code>ms</code> which gets decrypted data. However the passed <code>input</code> array contains not only the encrypted message but also the IV that you wrote during the encryption process. That is why it fails to decrypt.</p>

<p>What you need to do to overcome this is either extract only cipher data from the <code>input</code> array and pass it to: <code>cs.Write(cipherData, 0, cipherData.Length);</code> or change mode into <code>CryptoStreamMode.Read</code> and use <code>cs.Read(outputBuff, 0, outputBuff.Length);</code>.</p>

<p>Also don't use the same <code>MemoryStream</code> object to read and write to because you'll have some garbage in it after <code>CryptoStream</code> will write in it.</p>
","4863","<c#><byte><aes><encryption-symmetric>","3","3","1","2013-05-29 14:51:12","16817150","0","2","447156","","2013-03-01 16:28:08","2013-03-01 16:27:45",""
"13363754","base64 InvalidKeyException: Key length not 128/192/256 bits","<p>I am trying to encrypt editText strings using Base64 wnich will be saved in sharedpreferences but once the strings are encoded and saved my .xml file is blank. I am a novice programmer and very new to encrytion so Im lost and do not know how to properly analyze my code to determine the problem which may be very simple. I have received some suggestion but nothing that clearly shows where the issue is, why its not working, and how to resolve it. I suspect my encryption method but not sure where. This must be a common task for coders who are trying to protect username and password entries. This tutorial was the used for this encryption project <a href=""http://www.ravenblast.com/index.php/blog/android-password-text-encryption/"" rel=""nofollow"">Click Here</a></p>

<p>Here is class for encoding, encrypting, and saving EditText String:</p>

<pre><code>public void onClick(View arg0) {
    user=rName.getText().toString().trim();
    pass=rPwd.getText().toString().trim();

    if(arg0==regBttn){     
       if((user.length()!=0))
        {
          if((pass.length()!=0))
        {

        sp=getSharedPreferences(""AccessApp"",MODE_WORLD_WRITEABLE);
        Editor myEditor=sp.edit();

        byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6 };

        try {
             String encryptedUser = encrypt(user, key);  
             myEditor.putString(""USERNAME_KEY"", encryptedUser); 
        }
     catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }   
    try {
             String encryptedPass = encrypt(pass, key);  
             myEditor.putString(""PASSWORD_KEY"", encryptedPass); 

    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

    myEditor.commit();
    Toast.makeText(this, ""Registration is successfull"",10000).show();
    i=new Intent(this,AccessApp.class);
    startActivity(i);
    }
    else
     {
      Toast.makeText(this, ""Please Enter password"", 10000).show();  
     }}

    else{
        Toast.makeText(this,""Please Enter Username"",10000).show();
     }
        }

else if(arg0==rtnBttn){
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
     builder.setTitle(""Exit"");
     builder.setMessage(""Do you want to exit"");
     builder.setCancelable(false);
     builder.setPositiveButton(""Yes"",new DialogInterface.OnClickListener() {

  public void onClick(DialogInterface dialog, int which) {
  // TODO Auto-generated method stub
  finish();
  }
  });
    builder.setNegativeButton(""No"", new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface arg0, int arg1) {
                arg0.cancel();
            }
        });
    AlertDialog alert=builder.create();
    alert.show();
}
    }

public String encrypt(String toEncrypt, byte key[]) throws Exception {
    SecretKeySpec secret = new SecretKeySpec(key, ""AES"");
    Cipher cipher = Cipher.getInstance(""AES"");
    cipher.init(Cipher.ENCRYPT_MODE, secret);
    byte[] encryptedBytes = cipher.doFinal(toEncrypt.getBytes());
    String encrypted = Base64.encodeBytes(encryptedBytes);
    return encrypted;

}

}
</code></pre>

<p>Logcat:</p>

<pre><code> 11-11 23:41:59.873: W/System.err(11404): java.security.InvalidKeyException: Key length not 128/192/256 bits.
 11-11 23:41:59.873: W/System.err(11404):   at com.android.org.bouncycastle.jce.provider.JCEBlockCipher.engineInit(JCEBlockCipher.java:570)
 11-11 23:41:59.894: W/System.err(11404):   at com.android.org.bouncycastle.jce.provider.JCEBlockCipher.engineInit(JCEBlockCipher.java:617)
 11-11 23:41:59.903: W/System.err(11404):   at javax.crypto.Cipher.init(Cipher.java:519)
 11-11 23:41:59.928: W/System.err(11404):   at javax.crypto.Cipher.init(Cipher.java:479)
 11-11 23:41:59.943: W/System.err(11404):   at com.SharedPreferences.Login.SharedPrefLoginActivity.encrypt(SharedPrefLoginActivity.java:139)
 11-11 23:41:59.953: W/System.err(11404):   at com.SharedPreferences.Login.SharedPrefLoginActivity.onClick(SharedPrefLoginActivity.java:82)
 11-11 23:41:59.953: W/System.err(11404):   at android.view.View.performClick(View.java:3511)
 11-11 23:41:59.953: W/System.err(11404):   at android.view.View$PerformClick.run(View.java:14105)
 11-11 23:41:59.973: W/System.err(11404):   at android.os.Handler.handleCallback(Handler.java:605)
 11-11 23:41:59.973: W/System.err(11404):   at android.os.Handler.dispatchMessage(Handler.java:92)
 11-11 23:42:00.034: W/System.err(11404):   at android.os.Looper.loop(Looper.java:137)
 11-11 23:42:00.034: W/System.err(11404):   at android.app.ActivityThread.main(ActivityThread.java:4424)
 11-11 23:42:00.034: W/System.err(11404):   at java.lang.reflect.Method.invokeNative(Native Method)
 11-11 23:42:00.103: W/System.err(11404):   at java.lang.reflect.Method.invoke(Method.java:511)
 11-11 23:42:00.103: W/System.err(11404):   at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:784)
 11-11 23:42:00.124: W/System.err(11404):   at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:551)
 11-11 23:42:00.124: W/System.err(11404):   at dalvik.system.NativeStart.main(Native Method)
</code></pre>
","<p>You seem to have miscounted your bytes:</p>

<p><code>byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6 };</code></p>

<p>You need a 128bit key (16 bytes), but you've declared 17 bytes here. Reduce the key length by one and I think it should work.</p>
","4792","<android><exception><base64><sharedpreferences><encryption-symmetric>","1","4","1","2012-11-13 22:53:36","13365958","1","1","1557801","","2012-11-13 22:53:36","2012-11-13 15:38:56",""
"21552809","Invalid length for a Base-64 char array during Decryption through Rijndael AES","<p>I am getting the error ""Invalid length for a Base-64 char array."" </p>

<p>My code is :-</p>

<pre><code>public string Encrypt(string clearText)
{
    string EncryptionKey = ""MAKV2SPBNI99212"";
    byte[] clearBytes = Encoding.Unicode.GetBytes(clearText);
    using (Aes encryptor = Aes.Create())
    {
        Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });
        encryptor.Key = pdb.GetBytes(32);
        encryptor.IV = pdb.GetBytes(16);
        using (MemoryStream ms = new MemoryStream())
        {
            using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))
            {
                cs.Write(clearBytes, 0, clearBytes.Length);
                cs.Close();
            }
            clearText = Convert.ToBase64String(ms.ToArray());
        }
    }
    return clearText;
}

public string Decrypt(string cipherText)
{
    string EncryptionKey = ""MAKV2SPBNI99212"";

    byte[] cipherBytes = Convert.FromBase64String(cipherText); //it gives error

    using (Aes encryptor = Aes.Create())
    {
        Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });
        encryptor.Key = pdb.GetBytes(32);
        encryptor.IV = pdb.GetBytes(16);
        using (MemoryStream ms = new MemoryStream())
        {
            using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))
            {
                cs.Write(cipherBytes, 0, cipherBytes.Length);
                cs.Close();
            }
            cipherText = Encoding.Unicode.GetString(ms.ToArray());
        }
    }
    return cipherText;
}
</code></pre>

<p>I am able to Encrypt the Xml, the Encrypt method is working as expected. but  Decrypt method gives error.  How to resolve it?</p>
","<p>It works fine for me.
But have a look here: </p>

<p><a href=""https://stackoverflow.com/questions/2925729/invalid-length-for-a-base-64-char-array"">Invalid length for a Base-64 char array</a></p>

<p><a href=""http://social.msdn.microsoft.com/Forums/vstudio/en-US/a5607e26-7c81-467b-8e90-c6d71d11de6d/invalid-length-for-a-base64-char-array-or-string?forum=vbgeneral"" rel=""nofollow noreferrer"">http://social.msdn.microsoft.com/Forums/vstudio/en-US/a5607e26-7c81-467b-8e90-c6d71d11de6d/invalid-length-for-a-base64-char-array-or-string?forum=vbgeneral</a></p>
","4715","<c#><xml><encryption><encryption-symmetric><rijndael>","1","0","1","2014-02-04 12:53:56","","1","","1195620","","2014-02-04 12:53:56","2014-02-04 12:37:54",""
"7278673","AES encryption with BouncyCastle: AESEngine, AESFastEngine OR AESLightEngine?","<p>I want to port this simple JAVA example...</p>

<p><a href=""https://stackoverflow.com/questions/4243650/aes-encryption-decryption-with-bouncycastle-example-in-j2me"">AES Encryption/Decryption with Bouncycastle Example in J2ME</a></p>

<p>...to C# and have the two following 3 questions:</p>

<ol>
<li><p>As I understand, the JAVA example uses AESEngine for encryption/decryption operations. What is the difference between AESEngine and AESFastEngine and AESLightEngine? Unfortunately I don't understand the information given in the documentation: <a href=""http://www.bouncycastle.org/docs/docs1.6/index.html"" rel=""nofollow noreferrer"">http://www.bouncycastle.org/docs/docs1.6/index.html</a></p></li>
<li><p>I want to use a new encryption-key for every file I encrypt. Which block cipher modes of operation should I use: AES.CBC, AES.CFB, AES.ECB OR AES.OFB <a href=""http://www.bouncycastle.org/docs/docs1.6/index.html"" rel=""nofollow noreferrer"">http://www.bouncycastle.org/docs/docs1.6/index.html</a></p></li>
<li><p>Is my assumption correct that in my case I don't have to use an iv / salt (which means I have to use <strong>a static iv</strong>?) since I use AES.KeyGen128() for key generation and use it only once?<br>
<a href=""http://www.bouncycastle.org/docs/docs1.6/index.html"" rel=""nofollow noreferrer"">http://www.bouncycastle.org/docs/docs1.6/index.html</a></p></li>
</ol>

<p>Hope my questions do not cause too much confusion ;-) I but I appreciate every answer, clarification or feedback you can give me.</p>

<p>Mike</p>
","<ol>
<li><p>My reading of the doc says that the AESEngine, FastEngine and LightEngine all take different tradeoffs of memory versus speed.  You would have to test it yourself to determine if those tradeoffs are even relevant in your scenario. </p></li>
<li><p>you will need to read up on the various AES modes. Different modes have different strengths and attributes, which may be more or less applicable or desirable depending on your scenario.  So the answer to your question is ""it depends."" </p></li>
<li><p>no. you will need an IV.  As far as the salt, it is usually employed with the passphrase to generate the actual encryption key and the IV, often via PKBDF2.  That is outside the realm of AES, but it is a typical usage.  </p></li>
</ol>

<hr>

<p>Finally you didn't ask, but.... why are you porting that code to C#?  .NET has AES encryption built-in.  You don't need to port anything, you can just use the .NET base class library.  Just ensure you use the same keysize and mode, and make sure your key+iv is the same on each side, and the .NET BCL AES classes will interoperate with the BouncyCastle stuff for J2ME. </p>
","4440","<c#><encryption><aes><bouncycastle><encryption-symmetric>","5","5","1","2013-02-09 15:29:33","7278770","0","2","-1","","2017-05-23 12:12:57","2011-09-02 02:23:04",""
"10031137","CCCrypt encryption result issue","<p>I'm using CCCrypt for encryption/decryption string values. It seems to work fine, because decrypted value equals initial one, but the problem is I can't extract proper NSString object from decrypted data.</p>

<pre><code>@implementation NSData (AES256) 

- (NSData *)AES256EncryptWithKey:(NSString *)key 
{
    char keyPtr[kCCKeySizeAES256+1]; // room for terminator (unused)
    bzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)

    // fetch key data
    [key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];

    NSUInteger dataLength = [self length];

    size_t bufferSize = dataLength + kCCBlockSizeAES128;
    void *buffer = malloc(bufferSize);

    size_t numBytesEncrypted = 0;
    CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,
                                        keyPtr, kCCKeySizeAES256,
                                        NULL /* initialization vector (optional) */,
                                        [self bytes], dataLength, /* input */
                                        buffer, bufferSize, /* output */
                                        &amp;numBytesEncrypted);
    if (cryptStatus == kCCSuccess) { 
        return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];
    }

    free(buffer); //free the buffer;
    return nil;
}

- (NSData *)AES256DecryptWithKey:(NSString *)key {
    char keyPtr[kCCKeySizeAES256+1]; // room for terminator (unused)
    bzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)

    // fetch key data
    [key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];

    NSUInteger dataLength = [self length];

    size_t bufferSize = dataLength + kCCBlockSizeAES128;
    void *buffer = malloc(bufferSize);

    size_t numBytesDecrypted = 0;
    CCCryptorStatus cryptStatus = CCCrypt(kCCDecrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,
                                        keyPtr, kCCKeySizeAES256,
                                        NULL /* initialization vector (optional) */,
                                        [self bytes], dataLength, /* input */
                                        buffer, bufferSize, /* output */
                                        &amp;numBytesDecrypted);

    if (cryptStatus == kCCSuccess) {
        //the returned NSData takes ownership of the buffer and will free it on deallocation
        return [NSData dataWithBytesNoCopy:buffer length:numBytesDecrypted];
    }

    free(buffer); //free the buffer;
    return nil;
}
</code></pre>

<p>I can't get what is done wrong so if anyone can help, I'll highly appreciate that. </p>

<p>And the second part of question - how can I set the CBC mode for AES encryption method. It's said in documentation that this mode is used by default but what should I pass as the third argument in CCCrypt method? </p>
","<p>To have your exact string after decryption you have to base64 decode <code>Decrypted Data</code> and then create NSString using NSUTF8StringEncoding.</p>

<pre><code>    NSString decryptedString = [[NSString alloc]initWithData:decryptedData];

    NSData *data = [NSData dataByBase64DecodingString:decryptedString];

    decryptedString = [data dataUsingEncoding:NSUTF8StrinEncoding];
</code></pre>

<p><code>decryptedString</code> hold the string as the same before encryption.</p>

<p>For base64 decoding see <a href=""http://cocoawithlove.com/2009/06/base64-encoding-options-on-mac-and.html"" rel=""nofollow"">this</a> post.</p>
","4256","<objective-c><encryption><aes><encryption-symmetric>","1","0","2","2012-05-25 20:01:15","10760679","0","","","","","2012-04-05 15:04:52",""
"10031137","CCCrypt encryption result issue","<p>I'm using CCCrypt for encryption/decryption string values. It seems to work fine, because decrypted value equals initial one, but the problem is I can't extract proper NSString object from decrypted data.</p>

<pre><code>@implementation NSData (AES256) 

- (NSData *)AES256EncryptWithKey:(NSString *)key 
{
    char keyPtr[kCCKeySizeAES256+1]; // room for terminator (unused)
    bzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)

    // fetch key data
    [key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];

    NSUInteger dataLength = [self length];

    size_t bufferSize = dataLength + kCCBlockSizeAES128;
    void *buffer = malloc(bufferSize);

    size_t numBytesEncrypted = 0;
    CCCryptorStatus cryptStatus = CCCrypt(kCCEncrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,
                                        keyPtr, kCCKeySizeAES256,
                                        NULL /* initialization vector (optional) */,
                                        [self bytes], dataLength, /* input */
                                        buffer, bufferSize, /* output */
                                        &amp;numBytesEncrypted);
    if (cryptStatus == kCCSuccess) { 
        return [NSData dataWithBytesNoCopy:buffer length:numBytesEncrypted];
    }

    free(buffer); //free the buffer;
    return nil;
}

- (NSData *)AES256DecryptWithKey:(NSString *)key {
    char keyPtr[kCCKeySizeAES256+1]; // room for terminator (unused)
    bzero(keyPtr, sizeof(keyPtr)); // fill with zeroes (for padding)

    // fetch key data
    [key getCString:keyPtr maxLength:sizeof(keyPtr) encoding:NSUTF8StringEncoding];

    NSUInteger dataLength = [self length];

    size_t bufferSize = dataLength + kCCBlockSizeAES128;
    void *buffer = malloc(bufferSize);

    size_t numBytesDecrypted = 0;
    CCCryptorStatus cryptStatus = CCCrypt(kCCDecrypt, kCCAlgorithmAES128, kCCOptionPKCS7Padding,
                                        keyPtr, kCCKeySizeAES256,
                                        NULL /* initialization vector (optional) */,
                                        [self bytes], dataLength, /* input */
                                        buffer, bufferSize, /* output */
                                        &amp;numBytesDecrypted);

    if (cryptStatus == kCCSuccess) {
        //the returned NSData takes ownership of the buffer and will free it on deallocation
        return [NSData dataWithBytesNoCopy:buffer length:numBytesDecrypted];
    }

    free(buffer); //free the buffer;
    return nil;
}
</code></pre>

<p>I can't get what is done wrong so if anyone can help, I'll highly appreciate that. </p>

<p>And the second part of question - how can I set the CBC mode for AES encryption method. It's said in documentation that this mode is used by default but what should I pass as the third argument in CCCrypt method? </p>
","<p>Addressing the question you commented in the previous answer, the <code>initWithData:encoding:</code> function will return <code>nil</code> because the encrypted data is very unlikely to match up with <code>NSUTF8StringEncoding</code>, given the fact that it is encrypted.</p>

<p>Same question with thorough answer: <a href=""https://stackoverflow.com/questions/8815570/why-does-my-initwithdata-return-nil-indicating-an-error-after-converting-nsdata"">Why does my initWithData return nil indicating an error after converting NSData to NSString returning from encrypting via CommonCrypto?</a> though as an aside, base64 does not make your encrypted data a visible string, but rather alters it further to make a displayable ASCII string.  This string shouldn't be assumed to be the same as the encrypted data nor the same as encrypting the data, but for use as a string, such as in a keychain, it works just fine.  </p>
","4256","<objective-c><encryption><aes><encryption-symmetric>","1","1","2","2012-05-25 20:01:15","10760679","0","","","","","2012-04-05 15:04:52",""
"31855456","Using Jasypt for password based AES encryption with PBKDF2WithHmacSHA1 key","<p>I'm implementing an encryption mechanism where I work, and the security guy's demands are as follows:</p>

<ol>
<li>Create a 256 bit key using PBKDF2WithHmacSHA512, secret password, 256bit salt and 20000 iterations minimum.</li>
<li>Salt should be generated using SecureRandom.getInstance(""SHA1PRNG"");</li>
<li>Encrypt using AES256 with the derived key.</li>
</ol>

<p>I'm trying to use Jasypt's <em>StandardPBEStringEncryptor</em> class</p>

<pre><code>encryptor.setPassword(PASSWORD);
encryptor.setAlgorithm(""AES/CBC/PKCS5Padding"");
encryptor.setKeyObtentionIterations(20000);
encryptor.setSaltGenerator(new RandomSaltGenerator());
encryptor.encrypt(""something"");
</code></pre>

<p>When I do this I get the following exception:</p>

<blockquote>
  <p>java.security.NoSuchAlgorithmException: AES/CBC/PKCS5Padding SecretKeyFactory not available</p>
</blockquote>

<p>Am I using Jasypt incorrectly? What am I missing here?</p>

<p>Thanks</p>
","<p>I ended up contacting Daniel Fernández who is Jasypt's lead programmer and his answer:</p>

<blockquote>
  <p>I’m afraid Jasypt does not offer a way to specify different algorithms for the SecretKeyFactory and the instantiation of the Cipher itself. Sorry.</p>
</blockquote>

<p>I used this bit of java code for doing this (Without Jasypt):</p>

<pre><code>public String encrypt(final String message) {
  final byte[] salt = generateSalt();
  final Key key = createKey(salt);

  final Cipher encryptingCipher = createCipher(Cipher.ENCRYPT_MODE, key, salt);
  final byte[] messageBytes = message.getBytes(StandardCharsets.UTF_8);
  final byte[] encryptedBytes = doFinal(encryptingCipher, messageBytes);
  final byte[] data = ArrayUtils.addAll(salt, encryptedBytes);
  return BaseEncoding.base64().encode(data);
}

private byte[] generateSalt() {
  final SecureRandom secureRandom = new SecureRandom();
  final byte[] salt = new byte[SALT_LENGTH];
  secureRandom.nextBytes(salt);
  return salt;
}

private Key createKey(final byte[] salt) {
  final PBEKeySpec spec = new PBEKeySpec(PASSWORD,
                                       salt,
                                       ITERATIONS,
                                       KEY_LENGTH);
  final SecretKey secretKey;
  try {
    secretKey = keyFactory.generateSecret(spec);
  } catch (final InvalidKeySpecException e) {
    throw new RuntimeException(""Error creating SecretKey"", e);
  }
  final SecretKeySpec result = new SecretKeySpec(secretKey.getEncoded(), ALGORITHM);
  spec.clearPassword();
  return result;
}
</code></pre>
","4228","<java><aes><encryption-symmetric><pbkdf2><jasypt>","3","4","1","2015-08-10 11:31:34","31918418","2","","","","","2015-08-06 12:13:10",""
"7276150","SQL Server 2005 create certificate with private key / encryption","<p>Ok, here is my problem. I am doing data encryption in SQL Server 2005 using a DB Master Key, Certificate and Symmetric Key. I need to be able to restore a certificate with a private key. But when I run the CREATE CERTIFICATE with PRIVATE KEY, the certificate gets pulled into the DB but the private key does not show up. Below are the steps I follow for testing.</p>

<p>Create the Database Master Key. </p>

<pre><code> CREATE MASTER KEY ENCRYPTION BY PASSWORD = '12345'
</code></pre>

<p>Create the Certificate</p>

<pre><code>CREATE CERTIFICATE MyCert 
WITH SUBJECT = 'My First Certificate', 
EXPIRY_DATE = '1/1/2199';
</code></pre>

<p>Create a symmetric key that is encrypted with MyCert.</p>

<pre><code>CREATE SYMMETRIC KEY MySymmetricKey 
WITH ALGORITHM = AES_256 
ENCRYPTION BY CERTIFICATE MyCert
</code></pre>

<p>Call below select statements to show the keys and certs are there.
They are. Master DB Key, Symmetric Key and Certificate are all there.</p>

<pre><code>SELECT * FROM sys.symmetric_keys 

SELECT * FROM sys.certificates 
</code></pre>

<p>Create a backup of the database certificate and key</p>

<p><strong>Note</strong> I have tried putting them in the same folder and that did not work either.</p>

<pre><code>BACKUP CERTIFICATE MyCert TO FILE = 'C:\SQLDatabase\MyCert\MyCert.cert'
WITH PRIVATE KEY ( FILE = 'C:\SQLDatabase\MyKey\MySymmetricKey.key' ,
ENCRYPTION BY PASSWORD = '12345' )
</code></pre>

<p>Drop the key and cert and verify they are gone.</p>

<pre><code>DROP SYMMETRIC KEY MySymmetricKey
DROP CERTIFICATE MyCert;
</code></pre>

<p>There is no RESTORE for certificates only create by file. I call
create certificate with the WITH PRIVATE KEY.</p>

<p>When I run this the certificate shows up but the key does not come with it.</p>

<p>I have verified they are in the folders and SQL has access to the folders.</p>

<p>I have also tried the ALTER CERTIFICATE WITH PRIVATE KEY and still nothing.</p>

<p>What am I missing?</p>

<pre><code>CREATE CERTIFICATE PayGoDBCert 
FROM FILE = 'C:\SQLDatabase\MyCert\MyCert.cert'
WITH PRIVATE KEY (FILE = 'C:\SQLDatabase\MyKey\MySymmetricKey.key' , 
DECRYPTION BY PASSWORD = '12345')

SELECT * FROM sys.symmetric_keys 
SELECT * FROM sys.certificates 
</code></pre>
","<p>In your example you drop the symmetric keys but don't recreate it again. </p>

<p>Recreate the symmetric key again then restore the certificate. </p>

<p>Just a note:The password used to protect the backed up certificate is not the same password that is used to encrypt the private key of the certificate.</p>

<p>let us know if that solves your issue</p>
","4114","<sql><sql-server-2005><encryption-symmetric>","0","0","1","2011-09-01 22:03:07","","0","","13302","","2011-09-01 20:40:34","2011-09-01 20:33:15",""
"13676695","AES. Encrypt array of bytes in powershell","<p>I am need to encrypt array of bytes([byte[]]) in powershell script using AES cryptography method. I am find function that encode string:</p>

<pre><code>[Reflection.Assembly]::LoadWithPartialName(""System.Security"")

function Encrypt-String($String, $Passphrase, $salt=""My Voice is my P455W0RD!"",     $init=""Yet another key"", [switch]$arrayOutput)
{
   $r = new-Object System.Security.Cryptography.RijndaelManaged
   $pass = [Text.Encoding]::UTF8.GetBytes($Passphrase)
   $salt = [Text.Encoding]::UTF8.GetBytes($salt)

   $r.Key = (new-Object Security.Cryptography.PasswordDeriveBytes $pass, $salt, ""SHA1"", 5).GetBytes(32) #256/8
   $r.IV = (new-Object Security.Cryptography.SHA1Managed).ComputeHash( [Text.Encoding]::UTF8.GetBytes($init) )[0..15]

   $c = $r.CreateEncryptor()
   $ms = new-Object IO.MemoryStream
   $cs = new-Object Security.Cryptography.CryptoStream $ms,$c,""Write""
   $sw = new-Object IO.StreamWriter $cs
   $sw.Write($String)
   $sw.Close()
   $cs.Close()
   $ms.Close()
   $r.Clear()
   [byte[]]$result = $ms.ToArray()
   if($arrayOutput) {
  return $result
   } else {
      return [Convert]::ToBase64String($result)
   }
}
</code></pre>

<p>Read code with comments at <a href=""http://gallery.technet.microsoft.com/scriptcenter/PowerShell-Script-410ef9df"" rel=""nofollow"">http://gallery.technet.microsoft.com/scriptcenter/PowerShell-Script-410ef9df</a></p>

<p>Help change the function so that it encode array of bytes and not a string</p>

<p>Ssory for my english. Hello from Russia :)</p>
","<p>I am do that i am need. New code:</p>

<pre><code>[Reflection.Assembly]::LoadWithPartialName(""System.Security"")

 $String=$buff #ARRAY OF BYTES TO ENCODE
 $Passphrase=""Pas""
  $salt=""My Voice is my P455W0RD!""
  $init=""Yet another key""

   $r = new-Object System.Security.Cryptography.AesManaged
   $pass = [Text.Encoding]::UTF8.GetBytes($Passphrase)
   $salt = [Text.Encoding]::UTF8.GetBytes($salt)

   $r.Key = (new-Object Security.Cryptography.PasswordDeriveBytes $pass, $salt, ""SHA1"", 5).GetBytes(32) #256/8
   $r.IV = (new-Object Security.Cryptography.SHA1Managed).ComputeHash( [Text.Encoding]::UTF8.GetBytes($init) )[0..15]
   $r.Padding=""Zeros""

   $c = $r.CreateEncryptor()
   $ms = new-Object IO.MemoryStream
   $cs = new-Object Security.Cryptography.CryptoStream $ms,$c,""Write""
   $cs.Write($String, 0,$String.Length)
   $cs.Close()
   $ms.Close()
   $r.Clear()
   [byte[]]$Encrypted = $ms.ToArray()
</code></pre>
","4099","<algorithm><powershell><encryption><aes><encryption-symmetric>","-2","0","1","2012-12-03 08:13:18","13679376","1","","1237052","","2012-12-03 03:44:09","2012-12-03 03:19:27","2012-12-03 08:37:23"
"11190114","Encryption and Decryption between Android, PHP & node.js","<p>I'm trying to encrypt a string in Java on Android, and then decrypt it using PHP and/or node.js</p>

<p>I've tried <a href=""http://www.androidsnippets.com/encrypt-decrypt-between-android-and-php"">http://www.androidsnippets.com/encrypt-decrypt-between-android-and-php</a>, but only the first half the returned hex string works.</p>

<p>I want the encryption type of be AES with a 128 bit key (higher if possible).</p>

<p>The encryption key will also need to be configurable, so my issue might be related to how I padded the strings.</p>

<p>Java</p>

<pre><code>String.format(""%1$-"" + n + ""s"", s)
</code></pre>

<p>PHP</p>

<pre><code>$key = str_pad($key,16);
</code></pre>

<p>Full Java Code:</p>

<pre><code>    package com.giggsey.test;


    import java.security.NoSuchAlgorithmException;

    import javax.crypto.Cipher;
    import javax.crypto.NoSuchPaddingException;
    import javax.crypto.spec.IvParameterSpec;
    import javax.crypto.spec.SecretKeySpec;

    import android.util.Log;


    public class SimpleCrypto {

            private String iv = ""fedcba9876543210"";//Dummy iv (CHANGE IT!)
            private IvParameterSpec ivspec;
            private SecretKeySpec keyspec;
            private Cipher cipher;

            private String SecretKey = ""0123456789abcdef"";//Dummy secretKey (CHANGE IT!)

            public void doKey(String key)
            {
                    ivspec = new IvParameterSpec(iv.getBytes());

                    key = padRight(key,16);

                    Log.d(""hi"",key);

                    keyspec = new SecretKeySpec(key.getBytes(), ""AES"");

                    try {
                            cipher = Cipher.getInstance(""AES/CBC/NoPadding"");
                    } catch (NoSuchAlgorithmException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                    } catch (NoSuchPaddingException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                    }
            }

            public byte[] encrypt(String text,String key) throws Exception
            {
                    if(text == null || text.length() == 0)
                            throw new Exception(""Empty string"");

                    doKey(key);

                    byte[] encrypted = null;

                    try {
                            cipher.init(Cipher.ENCRYPT_MODE, keyspec, ivspec);

                            encrypted = cipher.doFinal(padString(text).getBytes());
                    } catch (Exception e)
                    {                       
                            throw new Exception(""[encrypt] "" + e.getMessage());
                    }

                    return encrypted;
            }

            public byte[] decrypt(String code,String key) throws Exception
            {
                    if(code == null || code.length() == 0)
                            throw new Exception(""Empty string"");

                    byte[] decrypted = null;

                    doKey(key);

                    try {
                            cipher.init(Cipher.DECRYPT_MODE, keyspec, ivspec);

                            decrypted = cipher.doFinal(hexToBytes(code));
                    } catch (Exception e)
                    {
                            throw new Exception(""[decrypt] "" + e.getMessage());
                    }
                    return decrypted;
            }



            public static String bytesToHex(byte[] data)
            {
                    if (data==null)
                    {
                            return null;
                    }

                    int len = data.length;
                    String str = """";
                    for (int i=0; i&lt;len; i++) {
                            if ((data[i]&amp;0xFF)&lt;16)
                                    str = str + ""0"" + java.lang.Integer.toHexString(data[i]&amp;0xFF);
                            else
                                    str = str + java.lang.Integer.toHexString(data[i]&amp;0xFF);
                    }
                    return str;
            }


            public static byte[] hexToBytes(String str) {
                    if (str==null) {
                            return null;
                    } else if (str.length() &lt; 2) {
                            return null;
                    } else {
                            int len = str.length() / 2;
                            byte[] buffer = new byte[len];
                            for (int i=0; i&lt;len; i++) {
                                    buffer[i] = (byte) Integer.parseInt(str.substring(i*2,i*2+2),16);
                            }
                            return buffer;
                    }
            }



            private static String padString(String source)
            {
              char paddingChar = ' ';
              int size = 16;
              int x = source.length() % size;
              int padLength = size - x;

              for (int i = 0; i &lt; padLength; i++)
              {
                      source += paddingChar;
              }

              return source;
            }

            public static String padRight(String s, int n) {
                return String.format(""%1$-"" + n + ""s"", s);  
              }
    }
</code></pre>

<p>PHP</p>

<pre><code>&lt;?php
class MCrypt
    {
            private $iv = 'fedcba9876543210'; #Same as in JAVA
            private $key = '0123456789abcdef'; #Same as in JAVA

            function encrypt($str,$key) {
             $key = str_pad($key,16);
              //$key = $this-&gt;hex2bin($key);
              $iv = $this-&gt;iv;

              $td = mcrypt_module_open('rijndael-128', '', 'cbc', $iv);

              mcrypt_generic_init($td, $key, $iv);
              $encrypted = mcrypt_generic($td, $str);

              mcrypt_generic_deinit($td);
              mcrypt_module_close($td);

              return bin2hex($encrypted);
            }

            function decrypt($code,$key) {
              //$key = $this-&gt;hex2bin($key);
              $code = $this-&gt;hex2bin($code);
              $iv = $this-&gt;iv;

              $td = mcrypt_module_open('rijndael-128', '', 'cbc', $iv);

              mcrypt_generic_init($td, $key, $iv);
              $decrypted = mdecrypt_generic($td, $code);

              mcrypt_generic_deinit($td);
              mcrypt_module_close($td);

              return utf8_encode(trim($decrypted));
            }

            protected function hex2bin($hexdata) {
              $bindata = '';

              for ($i = 0; $i &lt; strlen($hexdata); $i += 2) {
                    $bindata .= chr(hexdec(substr($hexdata, $i, 2)));
              }

              return $bindata;
            }

    }

$e = new MCrypt();
$p =  $e-&gt;encrypt(""This is a sample text message"",""password"");

echo ""Encrypted: {$p}"" . PHP_EOL;

echo ""Decrypted: "";
echo $e-&gt;decrypt($p,""password"") . PHP_EOL;

echo ""Java Decryption: "";

echo $e-&gt;decrypt(""9cf46d007aeff7c0c3cf880c76762037278269ac508aecd55010ce68e9fd980f"",""password"");

echo PHP_EOL;
</code></pre>

<p>Java Calling Script:</p>

<pre><code>    String key = ""password"";
    String message = ""This is a sample text message"";

    String encrypted;
    try {
        SimpleCrypto s = new SimpleCrypto();
        encrypted = SimpleCrypto.bytesToHex(s.encrypt(message, key));
        Log.d(""giggsey-test"",encrypted);

    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
</code></pre>

<p>Output of encrypted strings:</p>

<p>Java: 9cf46d007aeff7c0c3cf880c76762037278269ac508aecd55010ce68e9fd980f</p>

<p>PHP:  9cf46d007aeff7c0c3cf880c76762037a1778e93dd596e4ce745e1f3b0ba9062</p>

<p>Full PHP Output:</p>

<blockquote>
  <p>Encrypted: 9cf46d007aeff7c0c3cf880c76762037a1778e93dd596e4ce745e1f3b0ba9062</p>
  
  <p>Decrypted: 'Ã½A==)nÃ¿|Ã¤Â¨</p>
  
  <p>xÃÃ¦Ã,ÃÃÂasV8gE</p>
  
  <p>Java Decryption: 'Ã½A==)nÃ¿|Ã¤Â¨</p>
  
  <p>xÃ1)Ã²ÃÃ®ÃÃAÂ½Ã</p>
  
  <p>rÂy</p>
</blockquote>
","<p>Hi Please Check this <a href=""http://schneimi.wordpress.com/2008/11/25/aes-128bit-encryption-between-java-and-php/"" rel=""nofollow"">link.</a></p>

<p>Here Check Last Comment Said That ""<strong>This doesn’t work with UNICODE characters</strong>""</p>

<p>This is work on <code>UTF-8 characters</code></p>

<p>This is what I do with my string before encryption:</p>

<pre><code>myUtf8String = new String(myString.getBytes(""UTF-8""));
</code></pre>
","4053","<java><php><android><node.js><encryption-symmetric>","10","2","3","2014-10-13 10:11:59","11283049","4","3","403165","","2012-06-27 16:04:44","2012-06-25 13:15:16",""
"11190114","Encryption and Decryption between Android, PHP & node.js","<p>I'm trying to encrypt a string in Java on Android, and then decrypt it using PHP and/or node.js</p>

<p>I've tried <a href=""http://www.androidsnippets.com/encrypt-decrypt-between-android-and-php"">http://www.androidsnippets.com/encrypt-decrypt-between-android-and-php</a>, but only the first half the returned hex string works.</p>

<p>I want the encryption type of be AES with a 128 bit key (higher if possible).</p>

<p>The encryption key will also need to be configurable, so my issue might be related to how I padded the strings.</p>

<p>Java</p>

<pre><code>String.format(""%1$-"" + n + ""s"", s)
</code></pre>

<p>PHP</p>

<pre><code>$key = str_pad($key,16);
</code></pre>

<p>Full Java Code:</p>

<pre><code>    package com.giggsey.test;


    import java.security.NoSuchAlgorithmException;

    import javax.crypto.Cipher;
    import javax.crypto.NoSuchPaddingException;
    import javax.crypto.spec.IvParameterSpec;
    import javax.crypto.spec.SecretKeySpec;

    import android.util.Log;


    public class SimpleCrypto {

            private String iv = ""fedcba9876543210"";//Dummy iv (CHANGE IT!)
            private IvParameterSpec ivspec;
            private SecretKeySpec keyspec;
            private Cipher cipher;

            private String SecretKey = ""0123456789abcdef"";//Dummy secretKey (CHANGE IT!)

            public void doKey(String key)
            {
                    ivspec = new IvParameterSpec(iv.getBytes());

                    key = padRight(key,16);

                    Log.d(""hi"",key);

                    keyspec = new SecretKeySpec(key.getBytes(), ""AES"");

                    try {
                            cipher = Cipher.getInstance(""AES/CBC/NoPadding"");
                    } catch (NoSuchAlgorithmException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                    } catch (NoSuchPaddingException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                    }
            }

            public byte[] encrypt(String text,String key) throws Exception
            {
                    if(text == null || text.length() == 0)
                            throw new Exception(""Empty string"");

                    doKey(key);

                    byte[] encrypted = null;

                    try {
                            cipher.init(Cipher.ENCRYPT_MODE, keyspec, ivspec);

                            encrypted = cipher.doFinal(padString(text).getBytes());
                    } catch (Exception e)
                    {                       
                            throw new Exception(""[encrypt] "" + e.getMessage());
                    }

                    return encrypted;
            }

            public byte[] decrypt(String code,String key) throws Exception
            {
                    if(code == null || code.length() == 0)
                            throw new Exception(""Empty string"");

                    byte[] decrypted = null;

                    doKey(key);

                    try {
                            cipher.init(Cipher.DECRYPT_MODE, keyspec, ivspec);

                            decrypted = cipher.doFinal(hexToBytes(code));
                    } catch (Exception e)
                    {
                            throw new Exception(""[decrypt] "" + e.getMessage());
                    }
                    return decrypted;
            }



            public static String bytesToHex(byte[] data)
            {
                    if (data==null)
                    {
                            return null;
                    }

                    int len = data.length;
                    String str = """";
                    for (int i=0; i&lt;len; i++) {
                            if ((data[i]&amp;0xFF)&lt;16)
                                    str = str + ""0"" + java.lang.Integer.toHexString(data[i]&amp;0xFF);
                            else
                                    str = str + java.lang.Integer.toHexString(data[i]&amp;0xFF);
                    }
                    return str;
            }


            public static byte[] hexToBytes(String str) {
                    if (str==null) {
                            return null;
                    } else if (str.length() &lt; 2) {
                            return null;
                    } else {
                            int len = str.length() / 2;
                            byte[] buffer = new byte[len];
                            for (int i=0; i&lt;len; i++) {
                                    buffer[i] = (byte) Integer.parseInt(str.substring(i*2,i*2+2),16);
                            }
                            return buffer;
                    }
            }



            private static String padString(String source)
            {
              char paddingChar = ' ';
              int size = 16;
              int x = source.length() % size;
              int padLength = size - x;

              for (int i = 0; i &lt; padLength; i++)
              {
                      source += paddingChar;
              }

              return source;
            }

            public static String padRight(String s, int n) {
                return String.format(""%1$-"" + n + ""s"", s);  
              }
    }
</code></pre>

<p>PHP</p>

<pre><code>&lt;?php
class MCrypt
    {
            private $iv = 'fedcba9876543210'; #Same as in JAVA
            private $key = '0123456789abcdef'; #Same as in JAVA

            function encrypt($str,$key) {
             $key = str_pad($key,16);
              //$key = $this-&gt;hex2bin($key);
              $iv = $this-&gt;iv;

              $td = mcrypt_module_open('rijndael-128', '', 'cbc', $iv);

              mcrypt_generic_init($td, $key, $iv);
              $encrypted = mcrypt_generic($td, $str);

              mcrypt_generic_deinit($td);
              mcrypt_module_close($td);

              return bin2hex($encrypted);
            }

            function decrypt($code,$key) {
              //$key = $this-&gt;hex2bin($key);
              $code = $this-&gt;hex2bin($code);
              $iv = $this-&gt;iv;

              $td = mcrypt_module_open('rijndael-128', '', 'cbc', $iv);

              mcrypt_generic_init($td, $key, $iv);
              $decrypted = mdecrypt_generic($td, $code);

              mcrypt_generic_deinit($td);
              mcrypt_module_close($td);

              return utf8_encode(trim($decrypted));
            }

            protected function hex2bin($hexdata) {
              $bindata = '';

              for ($i = 0; $i &lt; strlen($hexdata); $i += 2) {
                    $bindata .= chr(hexdec(substr($hexdata, $i, 2)));
              }

              return $bindata;
            }

    }

$e = new MCrypt();
$p =  $e-&gt;encrypt(""This is a sample text message"",""password"");

echo ""Encrypted: {$p}"" . PHP_EOL;

echo ""Decrypted: "";
echo $e-&gt;decrypt($p,""password"") . PHP_EOL;

echo ""Java Decryption: "";

echo $e-&gt;decrypt(""9cf46d007aeff7c0c3cf880c76762037278269ac508aecd55010ce68e9fd980f"",""password"");

echo PHP_EOL;
</code></pre>

<p>Java Calling Script:</p>

<pre><code>    String key = ""password"";
    String message = ""This is a sample text message"";

    String encrypted;
    try {
        SimpleCrypto s = new SimpleCrypto();
        encrypted = SimpleCrypto.bytesToHex(s.encrypt(message, key));
        Log.d(""giggsey-test"",encrypted);

    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
</code></pre>

<p>Output of encrypted strings:</p>

<p>Java: 9cf46d007aeff7c0c3cf880c76762037278269ac508aecd55010ce68e9fd980f</p>

<p>PHP:  9cf46d007aeff7c0c3cf880c76762037a1778e93dd596e4ce745e1f3b0ba9062</p>

<p>Full PHP Output:</p>

<blockquote>
  <p>Encrypted: 9cf46d007aeff7c0c3cf880c76762037a1778e93dd596e4ce745e1f3b0ba9062</p>
  
  <p>Decrypted: 'Ã½A==)nÃ¿|Ã¤Â¨</p>
  
  <p>xÃÃ¦Ã,ÃÃÂasV8gE</p>
  
  <p>Java Decryption: 'Ã½A==)nÃ¿|Ã¤Â¨</p>
  
  <p>xÃ1)Ã²ÃÃ®ÃÃAÂ½Ã</p>
  
  <p>rÂy</p>
</blockquote>
","<p>Padding was the problem with PHP.</p>

<pre><code>&lt;?php

function hex2bin($hexdata) {
   $bindata = '';

   for ($i = 0; $i &lt; strlen($hexdata); $i += 2) {
    $bindata .= chr(hexdec(substr($hexdata, $i, 2)));
   }

   return $bindata;
} 

$key = ""password"";
$data = ""This is a sample text message"";

$key = str_pad($key,16);

$blockSize = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
$padding   = $blockSize - (strlen($data) % $blockSize);
$data      .= str_repeat(chr($padding), $padding);

$c = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $data, MCRYPT_MODE_CBC, 'fedcba9876543210');

$c = bin2hex($c);

echo $c;


echo PHP_EOL;


$c = hex2bin($c);
$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128,'',MCRYPT_MODE_CBC, '');
mcrypt_generic_init($td, $key, 'fedcba9876543210');
$decrypted = mdecrypt_generic($td, $c);
mcrypt_generic_deinit($td);
mcrypt_module_close($td);

echo $decrypted;
</code></pre>

<p>It now returns the same as Java when encrypting, and I can decrypt the message fine.</p>
","4053","<java><php><android><node.js><encryption-symmetric>","10","5","3","2014-10-13 10:11:59","11283049","4","3","403165","","2012-06-27 16:04:44","2012-06-25 13:15:16",""
"11190114","Encryption and Decryption between Android, PHP & node.js","<p>I'm trying to encrypt a string in Java on Android, and then decrypt it using PHP and/or node.js</p>

<p>I've tried <a href=""http://www.androidsnippets.com/encrypt-decrypt-between-android-and-php"">http://www.androidsnippets.com/encrypt-decrypt-between-android-and-php</a>, but only the first half the returned hex string works.</p>

<p>I want the encryption type of be AES with a 128 bit key (higher if possible).</p>

<p>The encryption key will also need to be configurable, so my issue might be related to how I padded the strings.</p>

<p>Java</p>

<pre><code>String.format(""%1$-"" + n + ""s"", s)
</code></pre>

<p>PHP</p>

<pre><code>$key = str_pad($key,16);
</code></pre>

<p>Full Java Code:</p>

<pre><code>    package com.giggsey.test;


    import java.security.NoSuchAlgorithmException;

    import javax.crypto.Cipher;
    import javax.crypto.NoSuchPaddingException;
    import javax.crypto.spec.IvParameterSpec;
    import javax.crypto.spec.SecretKeySpec;

    import android.util.Log;


    public class SimpleCrypto {

            private String iv = ""fedcba9876543210"";//Dummy iv (CHANGE IT!)
            private IvParameterSpec ivspec;
            private SecretKeySpec keyspec;
            private Cipher cipher;

            private String SecretKey = ""0123456789abcdef"";//Dummy secretKey (CHANGE IT!)

            public void doKey(String key)
            {
                    ivspec = new IvParameterSpec(iv.getBytes());

                    key = padRight(key,16);

                    Log.d(""hi"",key);

                    keyspec = new SecretKeySpec(key.getBytes(), ""AES"");

                    try {
                            cipher = Cipher.getInstance(""AES/CBC/NoPadding"");
                    } catch (NoSuchAlgorithmException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                    } catch (NoSuchPaddingException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                    }
            }

            public byte[] encrypt(String text,String key) throws Exception
            {
                    if(text == null || text.length() == 0)
                            throw new Exception(""Empty string"");

                    doKey(key);

                    byte[] encrypted = null;

                    try {
                            cipher.init(Cipher.ENCRYPT_MODE, keyspec, ivspec);

                            encrypted = cipher.doFinal(padString(text).getBytes());
                    } catch (Exception e)
                    {                       
                            throw new Exception(""[encrypt] "" + e.getMessage());
                    }

                    return encrypted;
            }

            public byte[] decrypt(String code,String key) throws Exception
            {
                    if(code == null || code.length() == 0)
                            throw new Exception(""Empty string"");

                    byte[] decrypted = null;

                    doKey(key);

                    try {
                            cipher.init(Cipher.DECRYPT_MODE, keyspec, ivspec);

                            decrypted = cipher.doFinal(hexToBytes(code));
                    } catch (Exception e)
                    {
                            throw new Exception(""[decrypt] "" + e.getMessage());
                    }
                    return decrypted;
            }



            public static String bytesToHex(byte[] data)
            {
                    if (data==null)
                    {
                            return null;
                    }

                    int len = data.length;
                    String str = """";
                    for (int i=0; i&lt;len; i++) {
                            if ((data[i]&amp;0xFF)&lt;16)
                                    str = str + ""0"" + java.lang.Integer.toHexString(data[i]&amp;0xFF);
                            else
                                    str = str + java.lang.Integer.toHexString(data[i]&amp;0xFF);
                    }
                    return str;
            }


            public static byte[] hexToBytes(String str) {
                    if (str==null) {
                            return null;
                    } else if (str.length() &lt; 2) {
                            return null;
                    } else {
                            int len = str.length() / 2;
                            byte[] buffer = new byte[len];
                            for (int i=0; i&lt;len; i++) {
                                    buffer[i] = (byte) Integer.parseInt(str.substring(i*2,i*2+2),16);
                            }
                            return buffer;
                    }
            }



            private static String padString(String source)
            {
              char paddingChar = ' ';
              int size = 16;
              int x = source.length() % size;
              int padLength = size - x;

              for (int i = 0; i &lt; padLength; i++)
              {
                      source += paddingChar;
              }

              return source;
            }

            public static String padRight(String s, int n) {
                return String.format(""%1$-"" + n + ""s"", s);  
              }
    }
</code></pre>

<p>PHP</p>

<pre><code>&lt;?php
class MCrypt
    {
            private $iv = 'fedcba9876543210'; #Same as in JAVA
            private $key = '0123456789abcdef'; #Same as in JAVA

            function encrypt($str,$key) {
             $key = str_pad($key,16);
              //$key = $this-&gt;hex2bin($key);
              $iv = $this-&gt;iv;

              $td = mcrypt_module_open('rijndael-128', '', 'cbc', $iv);

              mcrypt_generic_init($td, $key, $iv);
              $encrypted = mcrypt_generic($td, $str);

              mcrypt_generic_deinit($td);
              mcrypt_module_close($td);

              return bin2hex($encrypted);
            }

            function decrypt($code,$key) {
              //$key = $this-&gt;hex2bin($key);
              $code = $this-&gt;hex2bin($code);
              $iv = $this-&gt;iv;

              $td = mcrypt_module_open('rijndael-128', '', 'cbc', $iv);

              mcrypt_generic_init($td, $key, $iv);
              $decrypted = mdecrypt_generic($td, $code);

              mcrypt_generic_deinit($td);
              mcrypt_module_close($td);

              return utf8_encode(trim($decrypted));
            }

            protected function hex2bin($hexdata) {
              $bindata = '';

              for ($i = 0; $i &lt; strlen($hexdata); $i += 2) {
                    $bindata .= chr(hexdec(substr($hexdata, $i, 2)));
              }

              return $bindata;
            }

    }

$e = new MCrypt();
$p =  $e-&gt;encrypt(""This is a sample text message"",""password"");

echo ""Encrypted: {$p}"" . PHP_EOL;

echo ""Decrypted: "";
echo $e-&gt;decrypt($p,""password"") . PHP_EOL;

echo ""Java Decryption: "";

echo $e-&gt;decrypt(""9cf46d007aeff7c0c3cf880c76762037278269ac508aecd55010ce68e9fd980f"",""password"");

echo PHP_EOL;
</code></pre>

<p>Java Calling Script:</p>

<pre><code>    String key = ""password"";
    String message = ""This is a sample text message"";

    String encrypted;
    try {
        SimpleCrypto s = new SimpleCrypto();
        encrypted = SimpleCrypto.bytesToHex(s.encrypt(message, key));
        Log.d(""giggsey-test"",encrypted);

    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
</code></pre>

<p>Output of encrypted strings:</p>

<p>Java: 9cf46d007aeff7c0c3cf880c76762037278269ac508aecd55010ce68e9fd980f</p>

<p>PHP:  9cf46d007aeff7c0c3cf880c76762037a1778e93dd596e4ce745e1f3b0ba9062</p>

<p>Full PHP Output:</p>

<blockquote>
  <p>Encrypted: 9cf46d007aeff7c0c3cf880c76762037a1778e93dd596e4ce745e1f3b0ba9062</p>
  
  <p>Decrypted: 'Ã½A==)nÃ¿|Ã¤Â¨</p>
  
  <p>xÃÃ¦Ã,ÃÃÂasV8gE</p>
  
  <p>Java Decryption: 'Ã½A==)nÃ¿|Ã¤Â¨</p>
  
  <p>xÃ1)Ã²ÃÃ®ÃÃAÂ½Ã</p>
  
  <p>rÂy</p>
</blockquote>
","<p>// PHP</p>

<pre><code>echo base64_encode('something...')
</code></pre>

<p>// java</p>

<pre><code>import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import sun.misc.BASE64Decoder;

public class Decrypt_test {

    public static void main(String[] args) {
        BASE64Decoder decode = new BASE64Decoder();
        try {
            // sample of string to decode: NTI2cWV5d3RkJV4mKg==
            String result = new String(decode.decodeBuffer(""string-to-decode""));
            System.out.println(result);
        } catch (IOException ex) {
            Logger.getLogger(Decrypt_test.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
</code></pre>

<p>it is easy but not good</p>
","4053","<java><php><android><node.js><encryption-symmetric>","10","0","3","2014-10-13 10:11:59","11283049","4","3","403165","","2012-06-27 16:04:44","2012-06-25 13:15:16",""
"5812232","C# AES Rijndael - detecting invalid passwords","<p>I'm using Rijndael to encrypt some sensitive data in my program.</p>

<p>When the user enters an incorrect password, most of the time a <code>CryptographicException</code> is thrown with the message ""Padding is invalid and cannot be removed."".</p>

<p>However, with very small probability, the CryptStream does not throw an exception with the wrong password, but instead gives back an incorrectly decrypted stream. In other words, it decrypts to garbage.</p>

<p>Any idea how to detect/prevent this? The simplest way I can think of would be to put a ""magic number"" at the start of the message when encrypting, and check if it's still there after decrypting.</p>

<p>But if there's an easier way, I'd love to hear it!</p>
","<p>Checksums are exactly for this purpose. Get a hash of your data before encrypting. Encrypt the data and put it along with the hash into storage. After decrypting, get the hash of the decrypted data and compare it with the former. If you use a crypto grade hash (i.e. SHA512) your data will be safe. After all, this is exactly what encrypted compression software does.</p>

<p>For ultimate security, you can encrypt both the hashes and data separately then decrypt and compare. If both data and hash decrypts to corrupted data, there is very minuscule chances that they will match.</p>
","4044","<c#><encryption><rijndaelmanaged><rijndael><encryption-symmetric>","9","3","6","2019-05-16 07:19:10","5823151","7","1","","","","2011-04-28 00:21:49",""
"5812232","C# AES Rijndael - detecting invalid passwords","<p>I'm using Rijndael to encrypt some sensitive data in my program.</p>

<p>When the user enters an incorrect password, most of the time a <code>CryptographicException</code> is thrown with the message ""Padding is invalid and cannot be removed."".</p>

<p>However, with very small probability, the CryptStream does not throw an exception with the wrong password, but instead gives back an incorrectly decrypted stream. In other words, it decrypts to garbage.</p>

<p>Any idea how to detect/prevent this? The simplest way I can think of would be to put a ""magic number"" at the start of the message when encrypting, and check if it's still there after decrypting.</p>

<p>But if there's an easier way, I'd love to hear it!</p>
","<p>Though I can agree somewhat with Teoman Soygul post about CRC/Hash there is one very important thing to note.  Never encrypt the hash as this can make it easier to find the resulting key.  Even without encrypting the hash you still gave them an easy way to test if they have successfully gained the correct password; however, let's assume that is already possible.  Since I know what kind of data you encrypted, be it text, or serialized objects, or whatever, it's likely I can write code to recognize it.</p>

<p>That said, I've used derivations of the following code to encrypt/decrypt data:</p>

<pre><code>    static void Main()
    {
        byte[] test = Encrypt(Encoding.UTF8.GetBytes(""Hello World!""), ""My Product Name and/or whatever constant"", ""password"");
        Console.WriteLine(Convert.ToBase64String(test));
        string plain = Encoding.UTF8.GetString(Decrypt(test, ""My Product Name and/or whatever constant"", ""passwords""));
        Console.WriteLine(plain);
    }
    public static byte[] Encrypt(byte[] data, string iv, string password)
    {
        using (RijndaelManaged m = new RijndaelManaged())
        using (SHA256Managed h = new SHA256Managed())
        {
            m.KeySize = 256;
            m.BlockSize = 256;
            byte[] hash = h.ComputeHash(data);
            byte[] salt = new byte[32];
            new RNGCryptoServiceProvider().GetBytes(salt);
            m.IV = h.ComputeHash(Encoding.UTF8.GetBytes(iv));
            m.Key = new Rfc2898DeriveBytes(password, salt) { IterationCount = 10000 }.GetBytes(32);

            using (MemoryStream ms = new MemoryStream())
            {
                ms.Write(hash, 0, hash.Length);
                ms.Write(salt, 0, salt.Length);
                using (CryptoStream cs = new CryptoStream(ms, m.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(data, 0, data.Length);
                    cs.FlushFinalBlock();
                    return ms.ToArray();
                }
            }
        }
    }

    public static byte[] Decrypt(byte[] data, string iv, string password)
    {
        using (MemoryStream ms = new MemoryStream(data, false))
        using (RijndaelManaged m = new RijndaelManaged())
        using (SHA256Managed h = new SHA256Managed())
        {
            try
            {
                m.KeySize = 256;
                m.BlockSize = 256;

                byte[] hash = new byte[32];
                ms.Read(hash, 0, 32);
                byte[] salt = new byte[32];
                ms.Read(salt, 0, 32);

                m.IV = h.ComputeHash(Encoding.UTF8.GetBytes(iv));
                m.Key = new Rfc2898DeriveBytes(password, salt) { IterationCount = 10000 }.GetBytes(32);
                using (MemoryStream result = new MemoryStream())
                {
                    using (CryptoStream cs = new CryptoStream(ms, m.CreateDecryptor(), CryptoStreamMode.Read))
                    {
                        byte[] buffer = new byte[1024];
                        int len;
                        while ((len = cs.Read(buffer, 0, buffer.Length)) &gt; 0)
                            result.Write(buffer, 0, len);
                    }

                    byte[] final = result.ToArray();
                    if (Convert.ToBase64String(hash) != Convert.ToBase64String(h.ComputeHash(final)))
                        throw new UnauthorizedAccessException();

                    return final;
                }
            }
            catch
            {
                //never leak the exception type...
                throw new UnauthorizedAccessException();
            }
        }
    }
</code></pre>
","4044","<c#><encryption><rijndaelmanaged><rijndael><encryption-symmetric>","9","0","6","2019-05-16 07:19:10","5823151","7","1","","","","2011-04-28 00:21:49",""
"5812232","C# AES Rijndael - detecting invalid passwords","<p>I'm using Rijndael to encrypt some sensitive data in my program.</p>

<p>When the user enters an incorrect password, most of the time a <code>CryptographicException</code> is thrown with the message ""Padding is invalid and cannot be removed."".</p>

<p>However, with very small probability, the CryptStream does not throw an exception with the wrong password, but instead gives back an incorrectly decrypted stream. In other words, it decrypts to garbage.</p>

<p>Any idea how to detect/prevent this? The simplest way I can think of would be to put a ""magic number"" at the start of the message when encrypting, and check if it's still there after decrypting.</p>

<p>But if there's an easier way, I'd love to hear it!</p>
","<p>HMAC is what you need. It is exactly made for this purpose. It combines the key and the message (which in this case, will be your password) and hashes them in a way that it will ensure the authenticity and integrity of the content, as long as the hash function used is secure. You can attach the HMAC to the encrypted data, and it can be used later to validate if the decryption was made correctly.</p>

<ul>
<li><a href=""http://en.wikipedia.org/wiki/HMAC"" rel=""noreferrer"">HMAC, Wikipedia</a></li>
<li><a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.hmac.aspx"" rel=""noreferrer"">System.Security.Cryptography.HMAC</a></li>
</ul>
","4044","<c#><encryption><rijndaelmanaged><rijndael><encryption-symmetric>","9","6","6","2019-05-16 07:19:10","5823151","7","1","","","","2011-04-28 00:21:49",""
"5812232","C# AES Rijndael - detecting invalid passwords","<p>I'm using Rijndael to encrypt some sensitive data in my program.</p>

<p>When the user enters an incorrect password, most of the time a <code>CryptographicException</code> is thrown with the message ""Padding is invalid and cannot be removed."".</p>

<p>However, with very small probability, the CryptStream does not throw an exception with the wrong password, but instead gives back an incorrectly decrypted stream. In other words, it decrypts to garbage.</p>

<p>Any idea how to detect/prevent this? The simplest way I can think of would be to put a ""magic number"" at the start of the message when encrypting, and check if it's still there after decrypting.</p>

<p>But if there's an easier way, I'd love to hear it!</p>
","<p>I like <a href=""https://stackoverflow.com/questions/5812232/c-aes-rijndael-detecting-invalid-passwords/5823151#5823151"">Can Gencer's answer</a>; you cannot really verify a decryption without the HMAC. </p>

<p>But, if you have a very a very large plaintext, then the decrypting can be very expensive. You might do a ton of work just to find out that the password was invalid. It would be nice to be able to do a quick rejection of wrong passwords, without going through all that work.  There is a way using the <a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow noreferrer"">PKCS#5 PBKDF2</a>. (standardized in <a href=""http://www.faqs.org/rfcs/rfc2898.html"" rel=""nofollow noreferrer"">RFC2898</a>, which is accessible to your c# program in <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.aspx"" rel=""nofollow noreferrer"">Rfc2898DeriveBytes</a>).  </p>

<p>Normally the data protocol calls for generation of the key from a password and salt using PBKDF2, at 1000 cycles or some specified number. Then maybe also (optionally) the initialization vector, via a contniuation of the same algorithm.  </p>

<p>To implement the quick password check, generate <em>two more bytes</em> via the PBKDF2. If you don't generate and use an IV, then just generate 32 bytes and keep the last 2.  Store or transmit this pair of bytes adjacent to your cryptotext.  On the decrypting side, get the password, generate the key and (maybe throwaway) IV, then generate the 2 additional bytes, and check them against the stored data.  If the pairs don't match you <em>know</em> you have a wrong password, without any decryption. </p>

<p>If they match, it is not a guarantee that the password is correct. You still need the HMAC of the full plaintext for that. But you can save yourself a ton of work, and maybe wall clock time, in most cases of ""wrong password"", and without compromising the security of the overall system. </p>

<hr>

<p><em>ps</em>:  you wrote: </p>

<blockquote>
  <p>The simplest way I can think of would be to put a ""magic number"" at the start of the message when encrypting, and check if it's still there after decrypting.</p>
</blockquote>

<p>Avoid putting plaintext into the cryptotext. It only exposes another attack vector, makes it easier for an attacker to eliminate wrong turns.  The password verification thing I mentioned above is a different animal, does not expose this risk.  </p>
","4044","<c#><encryption><rijndaelmanaged><rijndael><encryption-symmetric>","9","-1","6","2019-05-16 07:19:10","5823151","7","1","","","","2011-04-28 00:21:49",""
"5812232","C# AES Rijndael - detecting invalid passwords","<p>I'm using Rijndael to encrypt some sensitive data in my program.</p>

<p>When the user enters an incorrect password, most of the time a <code>CryptographicException</code> is thrown with the message ""Padding is invalid and cannot be removed."".</p>

<p>However, with very small probability, the CryptStream does not throw an exception with the wrong password, but instead gives back an incorrectly decrypted stream. In other words, it decrypts to garbage.</p>

<p>Any idea how to detect/prevent this? The simplest way I can think of would be to put a ""magic number"" at the start of the message when encrypting, and check if it's still there after decrypting.</p>

<p>But if there's an easier way, I'd love to hear it!</p>
","<pre><code> Public Sub decryptFile(ByVal input As String, ByVal output As String)

        inputFile = New FileStream(input, FileMode.Open, FileAccess.Read)
        outputFile = New FileStream(output, FileMode.OpenOrCreate, FileAccess.Write)
        outputFile.SetLength(0)

        Dim buffer(4096) As Byte
        Dim bytesProcessed As Long = 0
        Dim fileLength As Long = inputFile.Length
        Dim bytesInCurrentBlock As Integer
        Dim rijandael As New RijndaelManaged
        Dim cryptoStream As CryptoStream = New CryptoStream(outputFile, rijandael.CreateDecryptor(encryptionKey, encryptionIV), CryptoStreamMode.Write)

        While bytesProcessed &lt; fileLength
            bytesInCurrentBlock = inputFile.Read(buffer, 0, 4096)
            cryptoStream.Write(buffer, 0, bytesInCurrentBlock)
            bytesProcessed = bytesProcessed + CLng(bytesInCurrentBlock)
        End While
        Try
            cryptoStream.Close() 'this will raise error if wrong password used
            inputFile.Close()
            outputFile.Close()
            File.Delete(input)
            success += 1
        Catch ex As Exception
            fail += 1
            inputFile.Close()
            outputFile.Close()
            outputFile = Nothing
            File.Delete(output)
        End Try
</code></pre>

<p>I use that code to decrypt any file. Wrong password detected on <code>cryptostream.close()</code>. Catch this line as error when a wrong key is used to decrypt file. When error happens, just close the output stream and release it (set <code>outputFile</code> to <code>Nothing</code>), then delete output file. It's working for me.</p>
","4044","<c#><encryption><rijndaelmanaged><rijndael><encryption-symmetric>","9","-1","6","2019-05-16 07:19:10","5823151","7","1","","","","2011-04-28 00:21:49",""
"5812232","C# AES Rijndael - detecting invalid passwords","<p>I'm using Rijndael to encrypt some sensitive data in my program.</p>

<p>When the user enters an incorrect password, most of the time a <code>CryptographicException</code> is thrown with the message ""Padding is invalid and cannot be removed."".</p>

<p>However, with very small probability, the CryptStream does not throw an exception with the wrong password, but instead gives back an incorrectly decrypted stream. In other words, it decrypts to garbage.</p>

<p>Any idea how to detect/prevent this? The simplest way I can think of would be to put a ""magic number"" at the start of the message when encrypting, and check if it's still there after decrypting.</p>

<p>But if there's an easier way, I'd love to hear it!</p>
","<p>To check if the password you are using is correct, you can use this code</p>

<pre><code>            Dim decryptedByteCount As Integer
            Try
                decryptedByteCount = cryptoStream.Read(plainTextBytes, 0, plainTextBytes.Length)
            Catch exp As System.Exception
                Return ""Password Not Correct""
            End Try
</code></pre>

<p>in essence, check if an error message is generated during decryption.</p>

<p>I report all the decoding code below</p>

<pre><code>    Public Shared Function Decrypt(ByVal cipherText As String) As String

    If System.Web.HttpContext.Current.Session(""Crypto"") = """" Then
        HttpContext.Current.Response.Redirect(""http://yoursite.com"")
    Else
        If cipherText &lt;&gt; """" Then
            'Setto la password per criptare il testo
            Dim passPhrase As String = System.Web.HttpContext.Current.Session(""Crypto"")

            'Ottieni lo stream completo di byte che rappresentano: [32 byte di Salt] + [32 byte di IV] + [n byte di testo cifrato]
            Dim cipherTextBytesWithSaltAndIv = Convert.FromBase64String(cipherText)

            'Ottieni i Salt bytes estraendo i primi 32 byte dai byte di testo cifrato forniti
            Dim saltStringBytes = cipherTextBytesWithSaltAndIv.Take((Keysize)).ToArray

            'Ottieni i IV byte estraendo i successivi 32 byte dai byte testo cifrato forniti.
            Dim ivStringBytes = cipherTextBytesWithSaltAndIv.Skip((Keysize)).Take((Keysize)).ToArray

            'Ottieni i byte del testo cifrato effettivo rimuovendo i primi 64 byte dal testo cifrato.
            Dim cipherTextBytes = cipherTextBytesWithSaltAndIv.Skip(((Keysize) * 2)).Take((cipherTextBytesWithSaltAndIv.Length - ((Keysize) * 2))).ToArray

            Dim password = New Rfc2898DeriveBytes(passPhrase, saltStringBytes, DerivationIterations)
            Dim keyBytes = password.GetBytes((Keysize))
            Dim symmetricKey = New RijndaelManaged
            symmetricKey.BlockSize = 256
            symmetricKey.Mode = CipherMode.CBC
            symmetricKey.Padding = PaddingMode.PKCS7

            Dim decryptor = symmetricKey.CreateDecryptor(keyBytes, ivStringBytes)
            Dim memoryStream = New MemoryStream(cipherTextBytes)
            Dim cryptoStream = New CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read)
            Dim plainTextBytes = New Byte((cipherTextBytes.Length) - 1) {}

            Dim decryptedByteCount As Integer
            Try
                decryptedByteCount = cryptoStream.Read(plainTextBytes, 0, plainTextBytes.Length)
            Catch exp As System.Exception
                Return ""La password di Cryptazione non è corretta""
            End Try

            memoryStream.Close()
            cryptoStream.Close()
            Return Encoding.UTF8.GetString(plainTextBytes, 0, decryptedByteCount)
        Else
            Decrypt = """"
        End If
    End If

End Function
</code></pre>
","4044","<c#><encryption><rijndaelmanaged><rijndael><encryption-symmetric>","9","1","6","2019-05-16 07:19:10","5823151","7","1","","","","2011-04-28 00:21:49",""
"36655190","Best way to search encrypted data inside MySQL","<p>I am encrypting using PHP before saving the encrypted data to MySQL. I am convinced this is a better way in the long run vs using MySQL's AES_* functions.</p>

<p>My question now is, is there an efficient way to search encrypted data aside from storing a searchable hashed version of the data? E.g., Two columns per data: first_name_encrypted, first_name_hashed.</p>

<pre><code>$hashed_search = myhash('John');    
$q = ""SELECT * FROM table WHERE first_name_hashed = '$hashed_search'"";
</code></pre>

<p>This is what I do now, is there a better way?</p>
","<p>Generally you shouldn't be encrypting data stored in a database that you need to search over.</p>

<p>In your example you give, it would be helpful to know the context of why you are grabbing a user by first name, and what your overall security concerns are...</p>

<pre><code>$hashed_search = myhash('John');    
$q = 'SELECT * FROM table WHERE first_name_hashed = '.$hashed_search;
</code></pre>

<p>Is this a web app and your main concern is unencrypted transmission of a user's personal info over the network? Use an encrypted connection when sending data between the user's PC and the server (e.g. 'https').</p>

<p>Is your concern someone hacking the server and downloading a copy of the database? Consider limiting the amount of personally identifying info you are storing. Do you really need to store a user's real name?</p>

<p>Assuming you DO need to store personally identifying information about a user, consider using other methods to fetch their records from the database than using the personally identifying parts (i.e. don't grab them by 'first_name'). Consider grabbing a user by ID or by a Username that can be unrelated to their real names. This will allow you to make use of Indexing for fast retrieval of records and you can encrypt their personal info (first name, last name, email, phone #, etc) to your heart's content. </p>

<p>If this doesn't help you, maybe provide some more context about what you're trying to accomplish and why.</p>

<p><strong>TLDR: Trying to search over encrypted data is a bad idea. Think of what problem you're trying to avoid and come up with an alternate solution.</strong></p>
","4041","<php><mysql><encryption><encryption-symmetric>","4","0","2","2016-04-18 00:12:42","","18","","2224584","","2016-04-18 00:12:42","2016-04-15 19:14:20",""
"36655190","Best way to search encrypted data inside MySQL","<p>I am encrypting using PHP before saving the encrypted data to MySQL. I am convinced this is a better way in the long run vs using MySQL's AES_* functions.</p>

<p>My question now is, is there an efficient way to search encrypted data aside from storing a searchable hashed version of the data? E.g., Two columns per data: first_name_encrypted, first_name_hashed.</p>

<pre><code>$hashed_search = myhash('John');    
$q = ""SELECT * FROM table WHERE first_name_hashed = '$hashed_search'"";
</code></pre>

<p>This is what I do now, is there a better way?</p>
","<blockquote>
  <p>My question now is, is there an efficient way to search encrypted data aside from storing a searchable hashed version of the data? E.g., Two columns per data: first_name_encrypted, first_name_hashed.</p>
</blockquote>

<p>Close, but no cigar. See: <a href=""https://paragonie.com/white-paper/2015-secure-php-data-encryption#index-encrypted-information"" rel=""nofollow"">How to search encrypted information with a blind index</a>.</p>

<p>One example, using an <a href=""https://github.com/defuse/php-encryption"" rel=""nofollow"">authenticated encryption library</a> instead of just using MySQL's built-in <code>AES_*()</code> features:</p>

<pre><code>$first_name_hash = hash_hmac('sha256', $firstName, $secretKey);
$stmt = $db-&gt;prepare('SELECT * FROM table WHERE first_name_idx = ?');
$result = $db-&gt;execute([$first_name_hash])
    -&gt;fetch(PDO::FETCH_ASSOC);
if ($result) {
    $first_name = Crypto::decrypt($result['first_name_encrypted'], $otherSecretKey);
}
</code></pre>

<p>A blind index based on HMAC-SHA256 is preferable to a simple hash.</p>

<p>Also: Use authenticated encryption. This is not negotiable.</p>
","4041","<php><mysql><encryption><encryption-symmetric>","4","1","2","2016-04-18 00:12:42","","18","","2224584","","2016-04-18 00:12:42","2016-04-15 19:14:20",""
"2585746","Securely Storing Optional Entropy While Using DPAPI","<p>So I am trying to store the symmetric key using DPAPI. All is well and great, but what to do with the entropy? This answered question <a href=""https://stackoverflow.com/questions/1326001/windows-dpapi-what-to-do-with-entropy"">here</a> really doesn't provide enough insight. It seems like a slippery slope - I could use the machine store to store the entropy but then what prevents someone from getting at that as well? Note: I am storing the current key using the User Scope.</p>

<p>So my question is - what is the best way to store the entropy using DPAPI?</p>
","<p>Anything you store locally can be compromised.  But there are steps you can take to make it more difficult.  There is a document on <a href=""http://msdn.microsoft.com/en-us/library/ms717799%28VS.85%29.aspx"" rel=""noreferrer"">Handling Passwords</a> that you may consider looking over.  You consider your Entropy Key a password specific to your application.  </p>

<p>I am going to refer to your Entropy as your <em>Key</em>, since it is functionally an additional key.</p>

<p>What you don't want to do is store your key locally in an unencrypted format.  Instead you want to either encrypt your key, or derive it from another, in-obvious source.  Of course if your encrypt the key, then you need to store the key used to encrypt it - but often times this single layer of indirection is enough to discourage most challengers.</p>

<p>That would be the advantage of deriving your key.  You could derive it as a hash of some other piece of constant data (needs to be something that doesn't change with revisions of your application).  One trick when deriving a hash though is to combine the hash with some other constant value (like a GUID or large random number) so that someone else cannot just combine a known hash algorithm and get your key.  This is a much better alternative to creating your own hash algorithm (which you should never do, unless you have a PHD in Mathematics).</p>

<p>At some point your are going to need some sort of key hard coded in your application.  This key is either combined with some other data in a hash to create your Entropy Key, or used to decrypt the entropy key.  You actually can have the key change with a new revision of your application, as long as you keep the old key for decrypting the existing key.  Then you can re-encrypt it with the new key or method.</p>

<p>If you want the best security then you can store the Entropy key off the computer.  This would require an internet connection and an SSL certificate, but then they key is never persisted anywhere locally to be discovered.  To do this you can setup a more robust challenge response system so the request authentication is different each time, and the key is delivered over SSL encryption so it cannot be intercepted.  Once the key is used, then it is discarded.  Of course this kind of defeats the purpose of many scenarios where you are using DPAPI for local secure storage.</p>

<p>Whatever you do, keep in mind it will be compromised - that always happens when someone has full access to the local machine and the data stored on it.  The solution to that is to keep releasing updates that change the method enough that the old crack no longer works.  This will make distribution of a crack less valuable as it will be difficult to find one for the right version.</p>
","3933","<c#><entropy><dpapi><encryption-symmetric>","8","6","2","2010-04-15 15:51:36","2611489","22","2","-1","","2017-05-23 12:24:21","2010-04-06 14:46:23",""
"2585746","Securely Storing Optional Entropy While Using DPAPI","<p>So I am trying to store the symmetric key using DPAPI. All is well and great, but what to do with the entropy? This answered question <a href=""https://stackoverflow.com/questions/1326001/windows-dpapi-what-to-do-with-entropy"">here</a> really doesn't provide enough insight. It seems like a slippery slope - I could use the machine store to store the entropy but then what prevents someone from getting at that as well? Note: I am storing the current key using the User Scope.</p>

<p>So my question is - what is the best way to store the entropy using DPAPI?</p>
","<p>First, let me address the original post question. It boils down to the fact that the entropy must be stored under the authority of the user and/or the authority of the application if it is going to be used for persisted storage. I suppose you could use a key stored with the application to encrypt the information in the persisted store but again a malicious application would be able to access this encryption key. So, I do not feel there is a means to protect against the scenario you mention in comments. However, given what you have said is the intended use of the entropy, I do not feel it helps in solving your problem.</p>

<p>It sounds as if the actual problem is establishing a secure channel of communication between your client application and the server. In your design, you are exchanging keys that will be used to encrypt communication. I think that trying to use custom code to solve this issue will lead to additional security vulnerabilities.</p>

<p>Given all of that, I would suggest creating a WCF (Windows Communication Foundation) service that is used to retrieve sensitive information. It could obviously be used to retrieve all information, but the least amount of change would be to confine the service to sensitive information.</p>

<p>With WCF, you can configure both the client and the server to use a secure channel. WCF has plenty of options for establishing a secure channel of communication to the server.</p>

<pre><code>&lt;wsHttpBinding&gt;
    &lt;binding&gt;
        &lt;security mode=""Transport""&gt;
            &lt;transport clientCredentialType=""Windows"" /&gt;
        &lt;/security&gt;
    &lt;/binding&gt;
&lt;/wsHttpBinding&gt;
</code></pre>

<p>Once you have a secure channel, many of the other problems are simpler such as access to the CC data. If that data is sent down a secure channel, it becomes an issue of authorization instead of channel security.</p>

<p>See <a href=""http://msdn.microsoft.com/en-us/library/ms733783.aspx"" rel=""nofollow noreferrer"">How to: Create a Secure Session</a> for more.</p>
","3933","<c#><entropy><dpapi><encryption-symmetric>","8","0","2","2010-04-15 15:51:36","2611489","22","2","-1","","2017-05-23 12:24:21","2010-04-06 14:46:23",""
"25025330","Encrypting Crypt field using Classic ASP for SagePay Form Integration","<p>I always get the same error 3045: The Currency field is missing, when posting this form:</p>

<pre><code>&lt;form name=""frmPay"" action=""https://test.sagepay.com/gateway/service/vspform-register.vsp"" method=""POST""&gt;
&lt;input type=""text"" name=""VPSProtocol"" value=""3.00"" /&gt;
&lt;input type=""text"" name=""TxType"" value=""PAYMENT"" /&gt;
&lt;input type=""text"" name=""Vendor"" value=""myvendor"" /&gt;    
Crypt:&lt;textarea rows=""10"" cols=""200"" name=""Crypt""&gt;&lt;%=Crypt%&gt;&lt;/textarea&gt;
&lt;input type=""submit"" value=""Send"" /&gt;
&lt;/form&gt;
</code></pre>

<p>I think the error is in the encryption</p>

<p>Could someone send encryption routine for classic ASP?</p>
","<blockquote>
  <p><strong>UPDATE (19-Nov-2014):</strong> A useful link has come to light through <a href=""https://stackoverflow.com/q/26993768/692942"">another question</a> on this topic.</p>
  
  <p><a href=""https://www.sagepaylabs.com/AES.zip"" rel=""nofollow noreferrer"">https://www.sagepaylabs.com/AES.zip</a></p>
  
  <p>The file contains Classic ASP example of how to implement AES (128-bit) using a modified version of the AES Rijndael Block Cipher originally written by Phil Fresle (2001) but has been modified by Mat Peck at Sage Pay to run with 128-bit blocks (AES) with CBC and PKCS#5 padding.</p>
  
  <p>The Classic ASP example contains two files</p>

<pre>
  includes.asp
  rijndael.asp
</pre>
</blockquote>

<hr>

<p>The Sage Pay Form Integration requirement is very specific.</p>

<blockquote>
  <p><strong>From <a href=""http://www.sagepay.co.uk/file/6941/download-document/FORM_Protocol_and_Integration_Guidelines_300114.pdf?token=SYAK3maL_Ite0jxNhVK2CpjZ9fcAe1O6t7KgnoJGAuk"" rel=""nofollow noreferrer"">Form integration protocol and guidelines</a></strong></p>
  
  <p><strong><em>A1.1 The Crypt Field</em></strong></p>
  
  <ol>
  <li><p><em>The Crypt field should contain all the other transaction information (see the next section) in plain text as Name=Value fields 
  separated by ‘&amp;’ characters. Ensure that all mandatory fields are present and that there are no spaces after the ‘&amp;’ character.</em></p></li>
  <li><p><em>This string should then be encrypted using AES(block size 128-bit) in CBC mode with PKCS#5 padding using the provided 
  password as both the key and initialisation vector and encode the result in hex (making sure the letters are in upper case).</em></p></li>
  <li><p><em>Prepend the <code>@</code> sign to the beginning of the encoded result.</em></p></li>
  </ol>
  
  <p><strong><em>NB : To decrypt use the same procedure in decryption mode, making sure you remove the <code>@</code> sign before doing so.</em></strong></p>
  
  <hr>
  
  <p><strong><em>Example Crypt Field</em></strong></p>
  
  <p><em>Using the key <code>55a51621a6648525</code><br>
  To encrypt the following request we should get the encrypted result below it</em></p>
  
  <p><strong><em>Key Value Pairs</em></strong></p>
  
  <pre class=""lang-none prettyprint-override""><code>VendorTxCode=TxCode-1310917599-223087284&amp;Amount=36.95&amp;Currency=GBP
&amp;Description=description&amp;CustomerName=FnameSurname
&amp;CustomerEMail=customer@example.com&amp;BillingSurname=Surname
&amp;BillingFirstnames=Fname&amp;BillingAddress1=BillAddress Line 1
&amp;BillingCity=BillCity&amp;BillingPostCode=W1A 1BL
&amp;BillingCountry=GB&amp;BillingPhone=447933000000&amp;DeliveryFirstnames=Fname
&amp;DeliverySurname=Surname&amp;DeliveryAddress1=BillAddress Line 1
&amp;DeliveryCity=BillCity&amp;DeliveryPostCode=W1A 1BL
&amp;DeliveryCountry=GB&amp;DeliveryPhone=447933000000
&amp;SuccessURL=https://example.com/success&amp;FailureURL=https://example.co/failure
</code></pre>
  
  <p><strong><em>Encrypted Result</em></strong></p>

<pre>@2DCD27338114D4C39A14A855702FBAB2EF40BCAC2D76A3ABC0F660A07E9C1C921C2C755BA9B59C39F882FBF6DFED114F23141D94E50A01A665B1E3
1A86C07CA1CD1BB8EF5B6CF2C23D495CD79F9C0F678D61773E7A1AA30AA5B23D56503FC0B52AC0694A8C341263D2C5FE1BAD93BDB94726761E155E9
00448F644AF1F67BE1AC77E852B9D90809A44F258EE9478B6D8C1C4ED58759263E7DBF8871C6592287C0358F36F4EEC326CEDDD440DA2FED8AB35F1B
630A5C6FA671E4D78CC8CACECF9DFDC31D6C5EC8270FB21E297E2C2E14F99A04223EFFD4F00062D440E78A3D2C7140EC8F123D247B75E7482AE98858
DA34D37EDE6D7C69AA74391F559305CF675ADB3615244A107ABBB6AF26E29A2FFA059B12688D90FE09E0DE069325BFF3587A695F5DA36E4B809B69C
C9A37034F166B63B5A62B986F4DA34E9AC9516AFDE70642EC7DAD1AEBA93A1F347D6AC7046E967DCBFE7ACFCEE5DAFC0B29F1765032B3060EBE565C
BD57D092075D15CF12725199C6881605B2E0F105698CE3ADD04361CA9D620C187B90E3F9849445B5C3C0FDF1768BFFD61F97E51316826F4F10E0E3E6
68F0A9F5ED9CCDA6F2C7CC957F12DB48F9041482E3D035E7A91852C404BFA325FED947E71F57B871DFAC6AF4FF29F4513A4A80B2D7ECC9D19D47ED04
FA99CDFC881DFA771E1EA4F3F9B2C5AC673EF3DA2699A309CC8522993A63CB8D45D3CDF09B1DFDC573CD19679B250AD6721450B5042F201670B4645
05DCAEF59E2C67ABACC9AE2EEE793CE191FEBF66B8FAF4204EFFB359246B9C99FB52805C46375FF35140F74707FBC73C7731A28A2C883A</pre>
</blockquote>

<p><strike>Taking into consideration these requirements means your limited on the options available in a Classic ASP environment.</strike></p>

<p>I would recommend on looking at using <a href=""http://www.aspencrypt.com/"" rel=""nofollow noreferrer"">AspEncrypt by Persit Software</a> or the only other promising option I can find is <a href=""http://www.example-code.com/asp/crypt2_aes.asp"" rel=""nofollow noreferrer"">(Classic ASP) AES Encryption</a> but as I have not used either of these components I cannot vouch for how good or bad they are.</p>

<hr>

<p>However I have used Persit components before during web development using Classic ASP and can say that they have always worked for me so my recommendation would be to have a look and see what you think.</p>

<p>It does seem to support the needed requirement, here is an example <a href=""http://www.aspencrypt.com/manual_02.html"" rel=""nofollow noreferrer"">based on code from the documentation</a> manipulated to suit.</p>

<pre class=""lang-vb prettyprint-override""><code>&lt;%
Dim CM, Context, Key, Blob, Crypt

Set CM = Server.CreateObject(""Persits.CryptoManager"")
'AES requires the Microsoft Enhanced RSA and AES Cryptographic Provider.
'Set Context = CM.OpenContext("""", True )
Set Context = CM.OpenContextEx( _
  ""Microsoft Enhanced RSA and AES Cryptographic Provider"", """", True _
)
Set Blob = CM.CreateBlob
Blob.Hex = ""Hex Encoded Key given to you by Sage Pay"" 'AES-128 Bit Key
'Might need to reverse the bytes which is why the third parameter is set to True.
Set Key = Context.ImportRawKey(Blob, calgAES128, True)

'Make sure padding is set to PKCS#5 and Cipher Mode is set to CBC
'these don't actually need defining because they are the defaults
'according to the documentation, just here for completeness.
Key.Padding = ccpPKCS5
Key.Mode = ccmCBC
Set Blob = Key.EncryptText(""your key value pairs"")

'Format encrypted field as required by Sage Pay
Crypt = ""@"" + Blob.Hex
%&gt;
</code></pre>

<hr>

<p><strong>Useful Links</strong></p>

<ul>
<li>This question appears to be related but is for PHP not Classic ASP the problem though is similar. <a href=""https://stackoverflow.com/q/23787701/692942"">PHP and Sage Pay</a>.</li>
<li><a href=""http://support.persits.com/show.asp?code=PS040625142"" rel=""nofollow noreferrer"">Article PS040625142 - Advanced Encryption Standard (AES) Support</a></li>
</ul>
","3853","<forms><asp-classic><aes><encryption-symmetric><sagepay>","2","3","1","2014-11-19 16:50:08","","1","1","692942","","2014-08-02 09:47:45","2014-07-29 21:29:48",""
"3849684","Is it insecure to pass initialization vector and salt along with ciphertext?","<p>I'm new to implementing encryption and am still learning basics, it seems.</p>

<p>I have need for symmetric encryption capabilities in my open source codebase.  There are three components to this system:</p>

<ul>
<li>A server that stores some user data, and information about whether or not it is encrypted, and how</li>
<li>A C# client that lets a user encrypt their data with a simple password when sending to the server, and decrypt with the same password when receiving</li>
<li>A JavaScript client that does the same and therefore must be compatible with the C# client's encryption method</li>
</ul>

<p>Looking at various JavaScript libraries, I came across SJCL, which has a lovely demo page here: <a href=""http://bitwiseshiftleft.github.com/sjcl/demo/"" rel=""noreferrer"">http://bitwiseshiftleft.github.com/sjcl/demo/</a></p>

<p>From this, it seems that what a client needs to know (besides the password used) in order to decrypt the ciphertext is:</p>

<ul>
<li>The initialization vector</li>
<li>Any salt used on the password</li>
<li>The key size</li>
<li>Authentication strength (I'm not totally sure what this is)</li>
</ul>

<p>Is it relatively safe to keep all of this data with the ciphertext?  Keep in mind that this is an open source codebase, and there is no way I can reasonably hide these variables unless I ask the user to remember them (yeah, right).</p>

<p>Any advice appreciated.</p>
","<p>Initialization vectors and salts are called such, and not keys, precisely <em>because</em> they need not be kept secret. It is safe, and customary, to encode such data along with the encrypted/hashed element.</p>

<p>What an IV or salt needs is to be used only once with a given key or password. For some algorithms (e.g. CBC encryption) there may be some additional requirements, fulfilled by chosing the IV randomly, with uniform probability and a cryptographically strong random number generator. However, confidentiality is not a needed property for an IV or salt.</p>

<p>Symmetric encryption is rarely enough to provide security; by itself, encryption protects against <em>passive attacks</em>, where the attacker observes but does not interfere. To protect against <em>active attacks</em>, you also need some kind of authentication. SJCL uses CCM or OCB2 encryption modes which combine encryption and authentication, so that's fine. The ""authentication strength"" is the length (in bits) of a field dedicated to authentication within the encrypted text; a strength of ""64 bits"" means that an attacker trying to alter a message has a maximum probability of 2<sup>-64</sup> to succeed in doing so without being detected by the authentication mechanism (and he cannot know whether he has succeeded without trying, i.e. having the altered message sent to someone who knows the key/password). That's enough for most purposes. A larger authentication strength implies a larger ciphertext, by (roughly) the same amount.</p>

<p>I have not looked at the implementation, but from the documentation it seems that the SJCL authors know their trade, and did things properly. I recommend using it.</p>

<p>Remember the usual caveats of passwords and Javascript:</p>

<ul>
<li><p>Javascript is code which runs on the client side but is downloaded from the server. This <em>requires</em> that the download be integrity-protected in some way; otherwise, an attacker could inject some of his own code, for instance a simple patch which also logs a copy of the password entered by the user somewhere. In practice, this means that the SJCL code should be served across a SSL/TLS session (i.e. HTTPS).</p></li>
<li><p>Users are human beings and human beings are bad at choosing passwords. It is a limitation of the human brain. Moreover, computers keep getting more and more powerful while human brains keep getting more or less unchanged. This makes passwords increasingly weak towards <em>dictionary attacks</em>, i.e. exhaustive searches on passwords (the attacker tries to guess the user's password by trying ""probable"" passwords). A ciphertext produced by SJCL can be used in an <em>offline dictionary attack</em>: the attacker can ""try"" passwords on his own computers, without having to check them against your server, and he is limited only by his own computing abilities. SJCL includes some features to make offline dictionary attacks more difficult:</p>

<ol>
<li>SJCL uses a salt, which prevents cost sharing (usually known as ""precomputed tables"", in particular ""rainbow tables"" which are a special kind of precomputed tables). At least the attacker will have to pay the full price of dictionary search for each attacked password.</li>
<li>SJCL uses the salt <em>repeatedly</em>, by hashing it with the password over and over in order to produce the key. This is what SJCL calls the ""password strengthening factor"". This makes the password-to-key transformation more expensive for the client, but also for the attacker, which is the point. Making the key transformation 1000 times longer means that the user will have to wait, maybe, half a second; but it also multiplies by 1000 the cost for the attacker.</li>
</ol></li>
</ul>
","3634","<encryption><passwords><password-protection><encryption-symmetric>","16","33","1","2010-10-03 15:21:23","3850335","1","8","","","","2010-10-03 12:22:33",""
"18396280","authenticated encryption in Java 7","<p>I want to use authenticated encryption in my code. According to the JDK, it seems that <strong>java 7 support AES/GCM/NoPadding</strong>. </p>

<p>However, I got the following error with the following code.</p>

<p><strong>Error:</strong></p>

<pre><code>java.security.NoSuchAlgorithmException: Cannot find any provider supporting AES/GCM/NoPadding
    at javax.crypto.Cipher.getInstance(Cipher.java:524)
    at CipherService.main(CipherService.java:25)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
</code></pre>

<p><strong>Code:</strong></p>

<pre><code>Cipher c = Cipher.getInstance (""AES/GCM/NoPadding"");
final int blockSize = c.getBlockSize();
final byte[] ivData = new byte[blockSize];
final SecureRandom rnd = SecureRandom.getInstance(""SHA1PRNG"");
rnd.nextBytes(ivData);
GCMParameterSpec params = new GCMParameterSpec(blockSize * Byte.SIZE, ivData);
SecureRandom sr = new SecureRandom();
byte[] aesKey = new byte[KEY_SIZE];
byte[] ciphertext;
byte[] head = ""Head"".getBytes();
byte[] data = ""Data"".getBytes();
sr.nextBytes(aesKey);
SecretKeySpec sks = new SecretKeySpec(aesKey, ""AES"");
c.init(Cipher.ENCRYPT_MODE, sks, params);
c.updateAAD(head);
ciphertext = c.doFinal(data);
</code></pre>
","<p>You need to use an encryption provider such as <a href=""http://www.bouncycastle.org/"" rel=""nofollow"">BouncyCastle</a>. Once you register it in your context, then you should be able to use any supported algorithm. Your other choice is to use the built in Sun/Oracle provided ones, but this violates the point of Java, being able to run the app on any JVM.</p>
","3621","<java><encryption-symmetric>","2","0","2","2014-04-09 02:23:17","","0","","1189885","","2013-08-23 06:58:24","2013-08-23 06:31:29",""
"18396280","authenticated encryption in Java 7","<p>I want to use authenticated encryption in my code. According to the JDK, it seems that <strong>java 7 support AES/GCM/NoPadding</strong>. </p>

<p>However, I got the following error with the following code.</p>

<p><strong>Error:</strong></p>

<pre><code>java.security.NoSuchAlgorithmException: Cannot find any provider supporting AES/GCM/NoPadding
    at javax.crypto.Cipher.getInstance(Cipher.java:524)
    at CipherService.main(CipherService.java:25)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:606)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
</code></pre>

<p><strong>Code:</strong></p>

<pre><code>Cipher c = Cipher.getInstance (""AES/GCM/NoPadding"");
final int blockSize = c.getBlockSize();
final byte[] ivData = new byte[blockSize];
final SecureRandom rnd = SecureRandom.getInstance(""SHA1PRNG"");
rnd.nextBytes(ivData);
GCMParameterSpec params = new GCMParameterSpec(blockSize * Byte.SIZE, ivData);
SecureRandom sr = new SecureRandom();
byte[] aesKey = new byte[KEY_SIZE];
byte[] ciphertext;
byte[] head = ""Head"".getBytes();
byte[] data = ""Data"".getBytes();
sr.nextBytes(aesKey);
SecretKeySpec sks = new SecretKeySpec(aesKey, ""AES"");
c.init(Cipher.ENCRYPT_MODE, sks, params);
c.updateAAD(head);
ciphertext = c.doFinal(data);
</code></pre>
","<p>In short, you cannot (as Brett Pyke said). Because SunJCE crypto provider (and Oracle) does not include AES/GCM implementation. Thankfully, they included at least the GCMParameterSpec. </p>

<p>Your only two options (AFAIK) are crypto providers <a href=""http://www.bouncycastle.org/specifications.html"" rel=""nofollow"">BouncyCastle</a> and <a href=""http://jce.iaik.tugraz.at"" rel=""nofollow"">IAIK</a>. </p>

<p><strong>Edit/update</strong>: Oracle JDK-8 seems to provide a working implementation of AES/GCM.</p>
","3621","<java><encryption-symmetric>","2","3","2","2014-04-09 02:23:17","","0","","1189885","","2013-08-23 06:58:24","2013-08-23 06:31:29",""
"17316547","Java Equivalent for .NET Encryption-DESCryptoServiceProvider","<p>Good Day, I need to encrypt some text using the base64 encoding and pass the encoded data to .NET application. The .NET application uses the following form of encoding &amp; decoding. I have tried this <a href=""https://stackoverflow.com/questions/4489942/equivalent-to-cryptostream-net-in-java"">Equivalent to CryptoStream .NET in Java?</a>.
I have used Apache commons codec for this purpose following the above link. But Stuck with the cryptoProvider.CreateEncryptor(bytes, bytes) , When i checked the third parameter in java equivalent - </p>

<blockquote>
  <p>Cipher.init(cipher.ENCRYPT_MODE,key,iv)</p>
</blockquote>

<p>it  must be an IvParameterSpec.I dont know how to solve this. Hope to get some help, Cheers!  </p>

<blockquote>
  <p>.NET encryption</p>
</blockquote>

<pre><code>static byte[] bytes = ASCIIEncoding.ASCII.GetBytes(""mykey"");
public static string Encrypt(string originalString)
{        
    DESCryptoServiceProvider cryptoProvider = new DESCryptoServiceProvider();
    MemoryStream memoryStream = new MemoryStream();
    CryptoStream cryptoStream = new CryptoStream(memoryStream,cryptoProvider.CreateEncryptor(bytes, bytes), CryptoStreamMode.Write);
    StreamWriter writer = new StreamWriter(cryptoStream);
    writer.Write(originalString);
    writer.Flush();
    cryptoStream.FlushFinalBlock();
    writer.Flush();
    return Convert.ToBase64String(memoryStream.GetBuffer(), 0, (int)memoryStream.Length);
}
</code></pre>

<p>Equivalent </p>

<blockquote>
  <p>Java Encryption</p>
</blockquote>

<pre><code>void encrypt(String inputText) throws Exception {
    try {
        String myKey = ""mykey"";
        byte[] mybyte = str.getBytes(""ASCII"");
        //String plainIV = ""1234567890ABCDEF"";
        KeySpec keySpec = new DESKeySpec(myKey.getBytes(""ASCII""));
        SecretKey key = SecretKeyFactory.getInstance(""DES"").generateSecret(keySpec);
        //IvParameterSpec iv = new IvParameterSpec(org.apache.commons.codec.binary.Hex.decodeHex(plainIV.toCharArray()));
        IvParameterSpec iv = new IvParameterSpec(mybyte);
        Cipher cipher = Cipher.getInstance(""DES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE,key,iv);
        byte[] encoded = cipher.doFinal(inputText.getBytes(""ASCII""));   
        System.out.println(""Encoded Value ..... ""+Base64.encodeBase64(encoded));
    } catch(UnsupportedEncodingException e) {
        System.out.println(""Exception .. ""+ e.getMessage());
    }
</code></pre>

<p>In .Net i get this- AOb0B20x2onFGz+JaFBsZyFbvCS9WF49D as the encoded value but in java, I'm getting wired encoded string- =�SKNv?�N�Ɛq{���U�;�/Z���8��&lt;

<p>Edit:- </p>

<p>Followed zacheusz and solved encoding problem, but encoded strings in both .NET and java are different...</p>
","<p>I see that in .NET you are specyfing IV:</p>

<pre><code>cryptoProvider.CreateEncryptor(bytes, bytes)
</code></pre>

<p>According to the <a href=""http://msdn.microsoft.com/en-us/library/0dh224hh.aspx"" rel=""nofollow"">documentation</a> the second byte array is the IV. So you should use the same array in Java.</p>

<p>I think that the bug is here:</p>

<pre><code>cipher.doFinal(Base64.encodeBase64(inputText.getBytes(""ASCII""))); 
</code></pre>

<p>You are b64 encoding input before decrypting it.</p>

<p>Try</p>

<pre><code>    byte[] output = cipher.doFinal(inputText.getBytes(""ASCII""));  
    System.out.println(""Encoded Value ..... ""+new String(Base64.encodeBase64(output)));
</code></pre>

<p>Additional remarks (regarding your questions in comments):</p>

<ul>
<li>you need the same iv for Java and .NET </li>
<li>the <a href=""http://docs.oracle.com/javase/6/docs/api/javax/crypto/spec/IvParameterSpec.html#IvParameterSpec%28byte%5B%5D%29"" rel=""nofollow"">constructor for IvParameterSpec</a> takes byte[] as an argument </li>
<li>In .NET the <a href=""http://msdn.microsoft.com/en-us/library/0dh224hh.aspx"" rel=""nofollow"">CreateEncryptor</a> method takes byte[] IV as second argument: </li>
</ul>
","3581","<java><.net><des><encryption-symmetric>","1","2","2","2017-02-13 08:12:56","17317100","3","2","-1","","2017-05-23 11:45:26","2013-06-26 09:38:38",""
"17316547","Java Equivalent for .NET Encryption-DESCryptoServiceProvider","<p>Good Day, I need to encrypt some text using the base64 encoding and pass the encoded data to .NET application. The .NET application uses the following form of encoding &amp; decoding. I have tried this <a href=""https://stackoverflow.com/questions/4489942/equivalent-to-cryptostream-net-in-java"">Equivalent to CryptoStream .NET in Java?</a>.
I have used Apache commons codec for this purpose following the above link. But Stuck with the cryptoProvider.CreateEncryptor(bytes, bytes) , When i checked the third parameter in java equivalent - </p>

<blockquote>
  <p>Cipher.init(cipher.ENCRYPT_MODE,key,iv)</p>
</blockquote>

<p>it  must be an IvParameterSpec.I dont know how to solve this. Hope to get some help, Cheers!  </p>

<blockquote>
  <p>.NET encryption</p>
</blockquote>

<pre><code>static byte[] bytes = ASCIIEncoding.ASCII.GetBytes(""mykey"");
public static string Encrypt(string originalString)
{        
    DESCryptoServiceProvider cryptoProvider = new DESCryptoServiceProvider();
    MemoryStream memoryStream = new MemoryStream();
    CryptoStream cryptoStream = new CryptoStream(memoryStream,cryptoProvider.CreateEncryptor(bytes, bytes), CryptoStreamMode.Write);
    StreamWriter writer = new StreamWriter(cryptoStream);
    writer.Write(originalString);
    writer.Flush();
    cryptoStream.FlushFinalBlock();
    writer.Flush();
    return Convert.ToBase64String(memoryStream.GetBuffer(), 0, (int)memoryStream.Length);
}
</code></pre>

<p>Equivalent </p>

<blockquote>
  <p>Java Encryption</p>
</blockquote>

<pre><code>void encrypt(String inputText) throws Exception {
    try {
        String myKey = ""mykey"";
        byte[] mybyte = str.getBytes(""ASCII"");
        //String plainIV = ""1234567890ABCDEF"";
        KeySpec keySpec = new DESKeySpec(myKey.getBytes(""ASCII""));
        SecretKey key = SecretKeyFactory.getInstance(""DES"").generateSecret(keySpec);
        //IvParameterSpec iv = new IvParameterSpec(org.apache.commons.codec.binary.Hex.decodeHex(plainIV.toCharArray()));
        IvParameterSpec iv = new IvParameterSpec(mybyte);
        Cipher cipher = Cipher.getInstance(""DES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE,key,iv);
        byte[] encoded = cipher.doFinal(inputText.getBytes(""ASCII""));   
        System.out.println(""Encoded Value ..... ""+Base64.encodeBase64(encoded));
    } catch(UnsupportedEncodingException e) {
        System.out.println(""Exception .. ""+ e.getMessage());
    }
</code></pre>

<p>In .Net i get this- AOb0B20x2onFGz+JaFBsZyFbvCS9WF49D as the encoded value but in java, I'm getting wired encoded string- =�SKNv?�N�Ɛq{���U�;�/Z���8��&lt;

<p>Edit:- </p>

<p>Followed zacheusz and solved encoding problem, but encoded strings in both .NET and java are different...</p>
","<p>Thank you @zacheusz, 
I got it!!!
It was a silly mistake,I was printing the byte[] value, i forget to convert it to String</p>

<p>So Changed </p>

<blockquote>
  <p>System.out.println(""Encoded Value ..... ""+Base64.encodeBase64(encoded));</p>
</blockquote>

<p>To</p>

<blockquote>
  <p>System.out.println(""Encoded Value ..... ""+new String(Base64.encodeBase64(encoded),""ASCII"");</p>
</blockquote>

<p>and That Solved my problem. Also modified code with <a href=""http://docs.oracle.com/javase/6/docs/api/java/io/ByteArrayOutputStream.html"" rel=""nofollow"">ByteArrayOutputStream</a>.
Here is the Encoding &amp; Decoding functions</p>

<pre><code>String encrypt(String inputText) throws Exception {
    byte[] keyValue = new byte[] { 'm', 'y', 'k', 'e', 'y', 'n', 'u', 'l'};
    ByteArrayOutputStream bout = new ByteArrayOutputStream();
    try {           
        KeySpec keySpec = new DESKeySpec(keyValue);
        SecretKey key = SecretKeyFactory.getInstance(""DES"").generateSecret(keySpec);
        IvParameterSpec iv = new IvParameterSpec(keyValue);
        Cipher cipher = Cipher.getInstance(""DES/CBC/PKCS5Padding""); 
        cipher.init(Cipher.ENCRYPT_MODE,key,iv);
        bout.write(cipher.doFinal(inputText.getBytes(""ASCII"")));                        
    } catch(Exception e) {
        System.out.println(""Exception .. ""+ e.getMessage());
    }
    return new String(Base64.encodeBase64(bout.toByteArray()),""ASCII"");
}

String decrypt(String inputText) throws Exception {
    byte[] keyValue = new byte[] { 'm', 'y', 'k', 'e', 'y', 'n', 'u', 'l'};
    try {
        KeySpec keySpec = new DESKeySpec(keyValue);
        SecretKey key = SecretKeyFactory.getInstance(""DES"").generateSecret(keySpec);
        IvParameterSpec iv = new IvParameterSpec(keyValue);

        Cipher cipher = Cipher.getInstance(""DES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE,key,iv);
        //byte[] decoded = Base64.decodeBase64(inputText); //Works with apache.commons.codec-1.8
        byte[] decoded = Base64.decodeBase64(inputText.getBytes(""ASCII""));// works with apache.commons.codec-1.3
        bout.write(cipher.doFinal(decoded));
    } catch(Exception e) {
        System.out.println(""Exception ... ""+e);
    }
    return new String(bout.toByteArray(),""ASCII"");
}
</code></pre>

<p>Hope Someone will find it helpful...</p>
","3581","<java><.net><des><encryption-symmetric>","1","1","2","2017-02-13 08:12:56","17317100","3","2","-1","","2017-05-23 11:45:26","2013-06-26 09:38:38",""
"43188874","AES/CBC/NoPadding and IllegalBlockSizeException - Custom padding handling","<p>UPDATE: I removed another issue in my code to make the question more precise.</p>

<p>I need to encrypt a String with variable length with <strong>AES/CBC/NoPadding</strong> but I'm getting an IllegalBlockSizeException.
<strong>I have to use NoPadding</strong> because the input should have the same length as the output even if the decryption fails. 
It shouldn't be possible to determine that it failed.</p>

<p>Before I used <strong>AES/CBC/PKCS5Padding</strong> without any problem but that is not an option. So my question is:</p>

<p>How do I add a custom padding to get a multiple of 16 byte or what possibly leads to the IllegalBlockSizeException (DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH)? I also read that ciphertext stealing is a way to do so. I would be grateful for an example.</p>

<p>Here's my current code:</p>

<pre><code>private static final String KEY_TRANSFORMATION_ALGORITHM_SYM = ""AES/CBC/NoPadding"";

@NonNull
static String encryptMessage(@NonNull String plainMessage,
                             @NonNull SharedPreferences storage,
                             @Nullable Key aesKey,
                             @NonNull String charset) {
    if (aesKey == null) {
        throw new RuntimeException(""AES key is null"", null);
    }
    try {
        // Cipher can not be re-used on Android
        Cipher cipher = Cipher.getInstance(KEY_TRANSFORMATION_ALGORITHM_SYM);
        cipher.init(Cipher.ENCRYPT_MODE, aesKey, new IvParameterSpec(getIV(storage, cipher, charset)));
        byte[] charsetEncryptedData = cipher.doFinal(plainMessage.getBytes(charset));
        return Base64.encodeToString(charsetEncryptedData, Base64.NO_WRAP);

    } catch (NoSuchAlgorithmException | InvalidKeyException | NoSuchPaddingException | InvalidAlgorithmParameterException | BadPaddingException | IllegalBlockSizeException | UnsupportedEncodingException e) {
        throw new RuntimeException(e.getMessage(), e);
    }
}

@NonNull
static String decryptMessage(@NonNull String encryptedMessage,
                             @NonNull SharedPreferences storage,
                             @Nullable Key aesKey,
                             @NonNull String charset) {
    if (aesKey == null) {
        throw new RuntimeException(""AES key is null"", null);
    }
    try {
        //Cipher can not be re-used on Android
        Cipher cipher = Cipher.getInstance(KEY_TRANSFORMATION_ALGORITHM_SYM);
        cipher.init(Cipher.DECRYPT_MODE, aesKey, new IvParameterSpec(getIV(storage, cipher, charset)));

        byte[] decryptedData = Base64.decode(encryptedMessage.getBytes(charset), Base64.NO_WRAP);
        byte[] charsetEncryptedData = cipher.doFinal(decryptedData);
        return new String(charsetEncryptedData, charset);

    } catch (NoSuchAlgorithmException | InvalidKeyException | InvalidAlgorithmParameterException | BadPaddingException | NoSuchPaddingException | IllegalBlockSizeException | UnsupportedEncodingException e) {
        throw new RuntimeException(e.getMessage(), e);
    }
}
</code></pre>
","<p>I solved my issue with the following code. I had to add a custom padding with spaces:</p>

<pre><code>@NonNull
static String encryptMessage(@NonNull String plainMessage,
                             @NonNull SharedPreferences storage,
                             @Nullable Key aesKey,
                             @NonNull String charset) {
        //...
        // add spaces (custom padding) until the plainMessage.getBytes can be divided by 16 without rest --&gt; this is the solution I was looking for
        while (plainMessage.getBytes().length % 16 != 0) {
            plainMessage += '\u0020';
        }
        //...
}

@NonNull
static String decryptMessage(@NonNull String encryptedMessage,
                             @NonNull SharedPreferences storage,
                             @Nullable Key aesKey,
                             @NonNull String charset) {
        //...
        // trim the String to get rid of the spaces
        return new String(charsetEncryptedData, charset).trim();
        //...
}
</code></pre>
","3502","<java><android><encryption><encryption-symmetric><android-security>","0","0","1","2017-04-04 04:33:59","43192874","4","","3734116","","2017-04-04 04:32:56","2017-04-03 15:42:29",""
"13827466","Use private key in java using DES without generating key automatically","<p>I have to encrypt/decrypt plain text in java using DES with a key. I have got a very good tutorial at IBM which can be found <a href=""http://www.ibm.com/developerworks/java/tutorials/j-sec1/section4.html#prikeyexample"" rel=""nofollow"">here</a> . The problem with this example is that it is generating the key in the program itself. Now if I encrypt a string(eg password) and store in database then I would not be able to decrypt it because I would not know the key.</p>

<p>Below is the example at IBM</p>

<pre><code>import java.security.*;
import javax.crypto.*;
//
// encrypt and decrypt using the DES private key algorithm
public class PrivateExample {

  public static void main (String[] args) throws Exception {
  //
  // check args and get plaintext
    if (args.length !=1) {
      System.err.println(""Usage: java PrivateExample text"");
      System.exit(1);
    }
  byte[] plainText = args[0].getBytes(""UTF8"");
  //
  // get a DES private key
  System.out.println( ""\nStart generating DES key"" );
  KeyGenerator keyGen = KeyGenerator.getInstance(""DES"");
  keyGen.init(56);
  Key key = keyGen.generateKey();
  System.out.println( ""Finish generating DES key"" );
//
// get a DES cipher object and print the provider
Cipher cipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
System.out.println( ""\n"" + cipher.getProvider().getInfo() );
//
// encrypt using the key and the plaintext
System.out.println( ""\nStart encryption"" );
cipher.init(Cipher.ENCRYPT_MODE, key);
byte[] cipherText = cipher.doFinal(plainText);
System.out.println( ""Finish encryption: "" );
System.out.println( new String(cipherText, ""UTF8"") );

//
// decrypt the ciphertext using the same key
System.out.println( ""\nStart decryption"" );
cipher.init(Cipher.DECRYPT_MODE, key);
byte[] newPlainText = cipher.doFinal(cipherText);
System.out.println( ""Finish decryption: "" );

System.out.println( new String(newPlainText, ""UTF8"") );
}
}
</code></pre>

<p>Can anyone suggest how can I add my own key in this example?</p>
","<p>Make the key one of the args instead of generateKey if you plan to supply the key.</p>

<p>Edit: generateKey generates a random key. It might be simpler to save this key to use for decryption than to add code to parse a key arg. Have a look at <a href=""http://docs.oracle.com/javase/6/docs/api/javax/crypto/KeyGenerator.html"" rel=""nofollow"">KeyGenerator</a> and <a href=""http://docs.oracle.com/javase/6/docs/api/javax/crypto/SecretKey.html"" rel=""nofollow"">SecretKey</a>.</p>
","3435","<java><des><encryption-symmetric>","3","1","2","2012-12-11 20:52:21","13827521","0","2","","","","2012-12-11 19:52:58",""
"13827466","Use private key in java using DES without generating key automatically","<p>I have to encrypt/decrypt plain text in java using DES with a key. I have got a very good tutorial at IBM which can be found <a href=""http://www.ibm.com/developerworks/java/tutorials/j-sec1/section4.html#prikeyexample"" rel=""nofollow"">here</a> . The problem with this example is that it is generating the key in the program itself. Now if I encrypt a string(eg password) and store in database then I would not be able to decrypt it because I would not know the key.</p>

<p>Below is the example at IBM</p>

<pre><code>import java.security.*;
import javax.crypto.*;
//
// encrypt and decrypt using the DES private key algorithm
public class PrivateExample {

  public static void main (String[] args) throws Exception {
  //
  // check args and get plaintext
    if (args.length !=1) {
      System.err.println(""Usage: java PrivateExample text"");
      System.exit(1);
    }
  byte[] plainText = args[0].getBytes(""UTF8"");
  //
  // get a DES private key
  System.out.println( ""\nStart generating DES key"" );
  KeyGenerator keyGen = KeyGenerator.getInstance(""DES"");
  keyGen.init(56);
  Key key = keyGen.generateKey();
  System.out.println( ""Finish generating DES key"" );
//
// get a DES cipher object and print the provider
Cipher cipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
System.out.println( ""\n"" + cipher.getProvider().getInfo() );
//
// encrypt using the key and the plaintext
System.out.println( ""\nStart encryption"" );
cipher.init(Cipher.ENCRYPT_MODE, key);
byte[] cipherText = cipher.doFinal(plainText);
System.out.println( ""Finish encryption: "" );
System.out.println( new String(cipherText, ""UTF8"") );

//
// decrypt the ciphertext using the same key
System.out.println( ""\nStart decryption"" );
cipher.init(Cipher.DECRYPT_MODE, key);
byte[] newPlainText = cipher.doFinal(cipherText);
System.out.println( ""Finish decryption: "" );

System.out.println( new String(newPlainText, ""UTF8"") );
}
}
</code></pre>

<p>Can anyone suggest how can I add my own key in this example?</p>
","<p>Have a look at <a href=""http://docs.oracle.com/javase/7/docs/api/javax/crypto/SecretKeyFactory.html"" rel=""nofollow""><code>SecretKeyFactory</code></a> and <a href=""http://docs.oracle.com/javase/7/docs/api/javax/crypto/spec/DESKeySpec.html"" rel=""nofollow""><code>DESKeySpec</code></a>. These can be used to construct a DES key from the key material (a byte array).</p>

<p>You can get the key material from a DES key using <a href=""http://docs.oracle.com/javase/7/docs/api/java/security/Key.html#getEncoded%28%29"" rel=""nofollow""><code>getEncoded()</code></a>.</p>
","3435","<java><des><encryption-symmetric>","3","1","2","2012-12-11 20:52:21","13827521","0","2","","","","2012-12-11 19:52:58",""
"17195513","AES managed encryption values always end in ==?","<p>I've written an encryption routine built from several methods on the net. I'm currently testing the encryption and have noticed that every encrypted value end in '==' ? </p>

<p>Does anyone know why this might be the case ?</p>

<p>This is the code I'm using. The key is a 32 char value and the IV is a 16 char value.</p>

<pre><code>private static readonly byte[] key = Encoding.Default.GetBytes(getKey());
    private static readonly byte[] iv = Encoding.Default.GetBytes(""$ruVe4E!eM#kupuc"");

    /// &lt;summary&gt;
    /// 
    /// &lt;/summary&gt;
    /// &lt;param name=""val""&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static string Encrypt(string val)
    {
        string result = string.Empty;

        var aes = getEncryptionType();

        using (MemoryStream msEncrypt = new MemoryStream())
        {
            using (ICryptoTransform encryptor = aes.CreateEncryptor(key, iv))
            {
                using(CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using(StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        swEncrypt.Write(val);
                    }
                }
            }
            result = Convert.ToBase64String(msEncrypt.ToArray());
        }
        aes.Clear();
        return result;
    }
</code></pre>

<p>getEncryptionType returns an AESManaged class as below:</p>

<pre><code>private static AesManaged getEncryptionType()
    {
        AesManaged aes = new AesManaged();
        aes.Mode = CipherMode.CBC;
        aes.Padding = PaddingMode.PKCS7;
        return aes;
    }
</code></pre>

<p>Currently the test method looks like this:</p>

<pre><code>Random rnd = new Random();

                for (int i = 0; i &lt; 50000; i++)
                {
                    int random = rnd.Next(1147483647, int.MaxValue);
                    Guid guid = dal.getToken(CryptoService.Encrypt(random.ToString()));

                    if (i % 100 == 0)
                        addLog(string.Format(""{0} new values added"", i.ToString()), LogType.Dialog);
                }
</code></pre>
","<p>That is standard for base 64 encoding. Read the ""padding"" section of the Wikipedia article for details.</p>

<p><a href=""http://en.wikipedia.org/wiki/Base64"">http://en.wikipedia.org/wiki/Base64</a></p>
","3403","<c#><encryption-symmetric>","8","13","1","2013-06-20 09:32:57","17195749","2","","41071","","2013-06-19 17:13:19","2013-06-19 15:39:40",""
"10907948","String encryption for storing password and subsequently retrieving","<p>I need to store a password as an encrypted string in an XML file, and be able to pull it back out again.  A quick glance through the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.aspx"" rel=""nofollow"">System.Security.Cryptography Namespace</a> reveals many options, some of which are hashing and some encryption.</p>

<p>This is the first time I have done any kind of string encryption (where the value is pulled back out again), and I was expecting something like this:</p>

<pre class=""lang-cs prettyprint-override""><code>string plainTextPassword = ""mypassword"";
string myKey = ""some key that people are unlikely to guess"";
string encryptedPassword = SomeObject.Encrypt(myKey, plainTextPassword);
// ... write encryptedPassword to xml file ...
</code></pre>

<p>and </p>

<pre class=""lang-cs prettyprint-override""><code>// ... read encryptedPassword from xml file ...
string decryptedPassword = SomeObject.Decrypt(myKey, encryptedPassword);
</code></pre>

<p>But when I look in the namespace there are services that provide hashing in there also, rather than purely encryption.  I also notice that a lot of other questions are more around hashing (or at least one way encryption) and are not particularly concerned with retrieving the strings afterwards.</p>

<p>I definitely want more than just hashing the password.  Where should I start?</p>
","<p>This CodeProject article will answer all your questions as well as provide code snippets to help solve your problem: <a href=""http://www.codeproject.com/Articles/10154/NET-Encryption-Simplified"" rel=""nofollow"">http://www.codeproject.com/Articles/10154/NET-Encryption-Simplified</a></p>

<p>The code samples are VB.NET (just noticed) but easy enough to convert to C#. Pay attention to how hashes are used with encryption techniques, they are not encryption.</p>

<p>Here's a code sample using Rijndael: <a href=""http://kiranpatils.wordpress.com/2008/03/13/encryptiondecryption-helper-class-using-rijandelmanaged/"" rel=""nofollow"">http://kiranpatils.wordpress.com/2008/03/13/encryptiondecryption-helper-class-using-rijandelmanaged/</a> The way it
s implemented sucks for ""strength"" of encryption but will get something going quickly (hopefully.)</p>
","3397","<.net><encryption><encryption-symmetric>","2","2","1","2012-06-06 11:16:13","10913111","14","","","","","2012-06-06 03:50:04",""
"3177198","Getting 'BadPaddingException: pad block corrupted' in AES/CBC/PKCS5Padding","<p>My constants</p>

<pre><code> public static final String AES_ALGORITHM_MODE_PADDING = ""AES/CBC/PKCS5Padding"";
 public static final String AES = ""AES"";
 public static final String PROVIDER = ""BC"";
</code></pre>

<p>Encryption</p>

<pre><code>   Cipher aesCipher = Cipher.getInstance(AES_ALGORITHM_MODE_PADDING, PROVIDER);
   SecretKeySpec aeskeySpec = new SecretKeySpec(rawAesKey, AES);
   aesCipher.init(Cipher.ENCRYPT_MODE, aeskeySpec);
   byte[] encryptedData = aesCipher.doFinal(data);
   this.iv = Base64.encodeBase64(aesCipher.getIV()); //get hold of the random IV

   return encryptedData;
</code></pre>

<p>In another class I do Decryption</p>

<pre><code>      IvParameterSpec ivspec = new IvParameterSpec(this.iv); //this is already been converted from base64 to raw form.

Cipher aesCipher = Cipher.getInstance(AES_ALGORITHM_MODE_PADDING, PROVIDER);
SecretKeySpec aeskeySpec = new SecretKeySpec(rawAesKey, AES);
aesCipher.init(Cipher.DECRYPT_MODE, aeskeySpec, ivspec);

return aesCipher.doFinal(rawEncryptedLicenseData);
</code></pre>

<p>Now when I run this I get a BadPaddingException at doFinal when decrypting, what am I doing wrong?  If I remove the CBC/PKCS5Padding and IV stuff and just use AES, it works! </p>
","<p>You can try CTR mode with no padding:</p>

<pre><code>Cipher cipherAlg = Cipher.getInstance(""AES/CTR/NoPadding"", PROVIDER);
byte[] ivBytes = new byte[cipherAlg.getBlockSize()];
(new SecureRandom()).nextBytes(ivBytes);
cipherAlg.init(Cipher.ENCRYPT_MODE, secretKey, new IvParameterSpec(ivBytes));
byte[] cipher = cipherAlg.doFinal(plainText);
byte[] cipherText = new byte[ivBytes.length + cipher.length];
System.arraycopy(ivBytes, 0, cipherText, 0, ivBytes.length);
System.arraycopy(cipher, 0, cipherText, ivBytes.length, cipher.length);
return cipherText;
</code></pre>
","3381","<java><encryption><encryption-symmetric>","1","0","1","2011-05-12 06:35:07","","2","3","248521","","2010-07-05 05:42:29","2010-07-05 04:16:17",""
"15137857","OpenSSL: AES CCM 256 bit encryption of large file by blocks: is it possible?","<p>I am working on a task to encrypt large files with <strong>AES CCM mode</strong> (<strong>256-bit key</strong> length). Other parameters for encryption are:</p>

<ul>
<li><strong>tag</strong> size: 8 bytes</li>
<li><strong>iv</strong> size: 12 bytes</li>
</ul>

<p>Since we already use <strong>OpenSSL 1.0.1c</strong> I wanted to use it for this task as well.</p>

<p>The size of the files is not known in advance and they can be very large. That's why I wanted to read them by blocks and encrypt each blocks individually with <strong>EVP_EncryptUpdate</strong> up to the file size.</p>

<p>Unfortunately the encryption works for me <strong>only if</strong> the whole file is encrypted at once. I get errors from EVP_EncryptUpdate or strange crashes if I attempt to call it multiple times. I tested the encryption on Windows 7 and Ubuntu Linux with gcc 4.7.2.</p>

<p>I was not able to find and information on <a href=""http://www.openssl.org/docs/crypto/EVP_EncryptInit.html"" rel=""nofollow"">OpenSSL</a> site that encrypting the data block by block is not possible (or possible).</p>

<p>Additional references:</p>

<ul>
<li><a href=""http://www.fredriks.se/?p=23"" rel=""nofollow"">http://www.fredriks.se/?p=23</a></li>
<li><a href=""http://incog-izick.blogspot.in/2011/08/using-openssl-aes-gcm.html"" rel=""nofollow"">http://incog-izick.blogspot.in/2011/08/using-openssl-aes-gcm.html</a></li>
</ul>

<p>Please see the code below that demonstrates what I attempted to achieve. Unfortunately it is failing where indicated in the for loop.</p>

<pre><code>#include &lt;QByteArray&gt;
#include &lt;openssl/evp.h&gt;

// Key in HEX representation
static const char keyHex[] = ""d896d105b05aaec8305d5442166d5232e672f8d5c6dfef6f5bf67f056c4cf420"";
static const char ivHex[]  = ""71d90ebb12037f90062d4fdb"";

// Test patterns
static const char orig1[] = ""Very secret message."";

const int c_tagBytes      = 8;
const int c_keyBytes      = 256 / 8;
const int c_ivBytes       = 12;

bool Encrypt()
{
    EVP_CIPHER_CTX *ctx;
    ctx = EVP_CIPHER_CTX_new();
    EVP_CIPHER_CTX_init(ctx);

    QByteArray keyArr = QByteArray::fromHex(keyHex);
    QByteArray ivArr = QByteArray::fromHex(ivHex);

    auto key = reinterpret_cast&lt;const unsigned char*&gt;(keyArr.constData());
    auto iv = reinterpret_cast&lt;const unsigned char*&gt;(ivArr.constData());

    // Initialize the context with the alg only
    bool success = EVP_EncryptInit(ctx, EVP_aes_256_ccm(), nullptr, nullptr);
    if (!success) {
        printf(""EVP_EncryptInit failed.\n"");
        return success;
    }

    success = EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_IVLEN, c_ivBytes, nullptr);
    if (!success) {
        printf(""EVP_CIPHER_CTX_ctrl(EVP_CTRL_CCM_SET_IVLEN) failed.\n"");
        return success;
    }
    success = EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_TAG, c_tagBytes, nullptr);
    if (!success) {
        printf(""EVP_CIPHER_CTX_ctrl(EVP_CTRL_CCM_SET_TAG) failed.\n"");
        return success;
    }

    success = EVP_EncryptInit(ctx, nullptr, key, iv);
    if (!success) {
        printf(""EVP_EncryptInit failed.\n"");
        return success;
    }

    const int bsize = 16;
    const int loops = 5;
    const int finsize = sizeof(orig1)-1; // Don't encrypt '\0'

    // Tell the alg we will encrypt size bytes
    // http://www.fredriks.se/?p=23
    int outl = 0;
    success = EVP_EncryptUpdate(ctx, nullptr, &amp;outl, nullptr, loops*bsize + finsize);
    if (!success) {
        printf(""EVP_EncryptUpdate for size failed.\n"");
        return success;
    }
    printf(""Set input size. outl: %d\n"", outl);

    // Additional authentication data (AAD) is not used, but 0 must still be
    // passed to the function call:
    // http://incog-izick.blogspot.in/2011/08/using-openssl-aes-gcm.html
    static const unsigned char aadDummy[] = ""dummyaad"";
    success = EVP_EncryptUpdate(ctx, nullptr, &amp;outl, aadDummy, 0);
    if (!success) {
        printf(""EVP_EncryptUpdate for AAD failed.\n"");
        return success;
    }
    printf(""Set dummy AAD. outl: %d\n"", outl);

    const unsigned char *in = reinterpret_cast&lt;const unsigned char*&gt;(orig1);
    unsigned char out[1000];
    int len;

    // Simulate multiple input data blocks (for example reading from file)
    for (int i = 0; i &lt; loops; ++i) {
        // ** This function fails ***
        if (!EVP_EncryptUpdate(ctx, out+outl, &amp;len, in, bsize)) {
            printf(""DHAesDevice: EVP_EncryptUpdate failed.\n"");
            return false;
        }
        outl += len;
    }

    if (!EVP_EncryptUpdate(ctx, out+outl, &amp;len, in, finsize)) {
        printf(""DHAesDevice: EVP_EncryptUpdate failed.\n"");
        return false;
    }
    outl += len;

    int finlen;
    // Finish with encryption
    if (!EVP_EncryptFinal(ctx, out + outl, &amp;finlen)) {
        printf(""DHAesDevice: EVP_EncryptFinal failed.\n"");
        return false;
    }
    outl += finlen;
    // Append the tag to the end of the encrypted output
    if (!EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_GET_TAG, c_tagBytes, out + outl)) {
        printf(""DHAesDevice: EVP_CIPHER_CTX_ctrl failed.\n"");
        return false;
    };
    outl += c_tagBytes;
    out[outl] = '\0';

    EVP_CIPHER_CTX_cleanup(ctx);
    EVP_CIPHER_CTX_free(ctx);

    QByteArray enc(reinterpret_cast&lt;const char*&gt;(out));

    printf(""Plain text size: %d\n"", loops*bsize + finsize);
    printf(""Encrypted data size: %d\n"", outl);

    printf(""Encrypted data: %s\n"", enc.toBase64().data());

    return true;
}
</code></pre>

<p><strong>EDIT (Wrong Solution)</strong></p>

<p>The feedback that I received made me think in a different direction and I discovered that EVP_EncryptUpdate for size must be called for <strong>each block</strong> that it being encrypted, <strong>not for the total size of the file</strong>. I moved it just before the block is encrypted: like this:</p>

<pre><code>for (int i = 0; i &lt; loops; ++i) {
    int buflen;
    (void)EVP_EncryptUpdate(m_ctx, nullptr, &amp;buflen, nullptr, bsize);
    // Resize the output buffer to buflen here
    // ...
    // Encrypt into target buffer
    (void)EVP_EncryptUpdate(m_ctx, out, &amp;len, in, buflen);
    outl += len;
}
</code></pre>

<p>AES CCM encryption block by block works this way, <strong>but not correctly</strong>, because each block is treated as independent message.</p>

<p><strong>EDIT 2</strong></p>

<p>OpenSSL's implementation works properly only if the complete message is encrypted at once.</p>

<p><a href=""http://marc.info/?t=136256200100001&amp;r=1&amp;w=1"" rel=""nofollow"">http://marc.info/?t=136256200100001&amp;r=1&amp;w=1</a></p>

<p>I decided to use Crypto++ instead.</p>
","<p>For AEAD-CCM mode you cannot encrypt data after associated data was feed to the context.
Encrypt all the data, and only after it pass the associated data.</p>
","3301","<c++><c><openssl><aes><encryption-symmetric>","4","0","2","2013-10-29 22:03:42","","7","1","460756","","2013-10-29 22:03:42","2013-02-28 14:22:25",""
"15137857","OpenSSL: AES CCM 256 bit encryption of large file by blocks: is it possible?","<p>I am working on a task to encrypt large files with <strong>AES CCM mode</strong> (<strong>256-bit key</strong> length). Other parameters for encryption are:</p>

<ul>
<li><strong>tag</strong> size: 8 bytes</li>
<li><strong>iv</strong> size: 12 bytes</li>
</ul>

<p>Since we already use <strong>OpenSSL 1.0.1c</strong> I wanted to use it for this task as well.</p>

<p>The size of the files is not known in advance and they can be very large. That's why I wanted to read them by blocks and encrypt each blocks individually with <strong>EVP_EncryptUpdate</strong> up to the file size.</p>

<p>Unfortunately the encryption works for me <strong>only if</strong> the whole file is encrypted at once. I get errors from EVP_EncryptUpdate or strange crashes if I attempt to call it multiple times. I tested the encryption on Windows 7 and Ubuntu Linux with gcc 4.7.2.</p>

<p>I was not able to find and information on <a href=""http://www.openssl.org/docs/crypto/EVP_EncryptInit.html"" rel=""nofollow"">OpenSSL</a> site that encrypting the data block by block is not possible (or possible).</p>

<p>Additional references:</p>

<ul>
<li><a href=""http://www.fredriks.se/?p=23"" rel=""nofollow"">http://www.fredriks.se/?p=23</a></li>
<li><a href=""http://incog-izick.blogspot.in/2011/08/using-openssl-aes-gcm.html"" rel=""nofollow"">http://incog-izick.blogspot.in/2011/08/using-openssl-aes-gcm.html</a></li>
</ul>

<p>Please see the code below that demonstrates what I attempted to achieve. Unfortunately it is failing where indicated in the for loop.</p>

<pre><code>#include &lt;QByteArray&gt;
#include &lt;openssl/evp.h&gt;

// Key in HEX representation
static const char keyHex[] = ""d896d105b05aaec8305d5442166d5232e672f8d5c6dfef6f5bf67f056c4cf420"";
static const char ivHex[]  = ""71d90ebb12037f90062d4fdb"";

// Test patterns
static const char orig1[] = ""Very secret message."";

const int c_tagBytes      = 8;
const int c_keyBytes      = 256 / 8;
const int c_ivBytes       = 12;

bool Encrypt()
{
    EVP_CIPHER_CTX *ctx;
    ctx = EVP_CIPHER_CTX_new();
    EVP_CIPHER_CTX_init(ctx);

    QByteArray keyArr = QByteArray::fromHex(keyHex);
    QByteArray ivArr = QByteArray::fromHex(ivHex);

    auto key = reinterpret_cast&lt;const unsigned char*&gt;(keyArr.constData());
    auto iv = reinterpret_cast&lt;const unsigned char*&gt;(ivArr.constData());

    // Initialize the context with the alg only
    bool success = EVP_EncryptInit(ctx, EVP_aes_256_ccm(), nullptr, nullptr);
    if (!success) {
        printf(""EVP_EncryptInit failed.\n"");
        return success;
    }

    success = EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_IVLEN, c_ivBytes, nullptr);
    if (!success) {
        printf(""EVP_CIPHER_CTX_ctrl(EVP_CTRL_CCM_SET_IVLEN) failed.\n"");
        return success;
    }
    success = EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_SET_TAG, c_tagBytes, nullptr);
    if (!success) {
        printf(""EVP_CIPHER_CTX_ctrl(EVP_CTRL_CCM_SET_TAG) failed.\n"");
        return success;
    }

    success = EVP_EncryptInit(ctx, nullptr, key, iv);
    if (!success) {
        printf(""EVP_EncryptInit failed.\n"");
        return success;
    }

    const int bsize = 16;
    const int loops = 5;
    const int finsize = sizeof(orig1)-1; // Don't encrypt '\0'

    // Tell the alg we will encrypt size bytes
    // http://www.fredriks.se/?p=23
    int outl = 0;
    success = EVP_EncryptUpdate(ctx, nullptr, &amp;outl, nullptr, loops*bsize + finsize);
    if (!success) {
        printf(""EVP_EncryptUpdate for size failed.\n"");
        return success;
    }
    printf(""Set input size. outl: %d\n"", outl);

    // Additional authentication data (AAD) is not used, but 0 must still be
    // passed to the function call:
    // http://incog-izick.blogspot.in/2011/08/using-openssl-aes-gcm.html
    static const unsigned char aadDummy[] = ""dummyaad"";
    success = EVP_EncryptUpdate(ctx, nullptr, &amp;outl, aadDummy, 0);
    if (!success) {
        printf(""EVP_EncryptUpdate for AAD failed.\n"");
        return success;
    }
    printf(""Set dummy AAD. outl: %d\n"", outl);

    const unsigned char *in = reinterpret_cast&lt;const unsigned char*&gt;(orig1);
    unsigned char out[1000];
    int len;

    // Simulate multiple input data blocks (for example reading from file)
    for (int i = 0; i &lt; loops; ++i) {
        // ** This function fails ***
        if (!EVP_EncryptUpdate(ctx, out+outl, &amp;len, in, bsize)) {
            printf(""DHAesDevice: EVP_EncryptUpdate failed.\n"");
            return false;
        }
        outl += len;
    }

    if (!EVP_EncryptUpdate(ctx, out+outl, &amp;len, in, finsize)) {
        printf(""DHAesDevice: EVP_EncryptUpdate failed.\n"");
        return false;
    }
    outl += len;

    int finlen;
    // Finish with encryption
    if (!EVP_EncryptFinal(ctx, out + outl, &amp;finlen)) {
        printf(""DHAesDevice: EVP_EncryptFinal failed.\n"");
        return false;
    }
    outl += finlen;
    // Append the tag to the end of the encrypted output
    if (!EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_CCM_GET_TAG, c_tagBytes, out + outl)) {
        printf(""DHAesDevice: EVP_CIPHER_CTX_ctrl failed.\n"");
        return false;
    };
    outl += c_tagBytes;
    out[outl] = '\0';

    EVP_CIPHER_CTX_cleanup(ctx);
    EVP_CIPHER_CTX_free(ctx);

    QByteArray enc(reinterpret_cast&lt;const char*&gt;(out));

    printf(""Plain text size: %d\n"", loops*bsize + finsize);
    printf(""Encrypted data size: %d\n"", outl);

    printf(""Encrypted data: %s\n"", enc.toBase64().data());

    return true;
}
</code></pre>

<p><strong>EDIT (Wrong Solution)</strong></p>

<p>The feedback that I received made me think in a different direction and I discovered that EVP_EncryptUpdate for size must be called for <strong>each block</strong> that it being encrypted, <strong>not for the total size of the file</strong>. I moved it just before the block is encrypted: like this:</p>

<pre><code>for (int i = 0; i &lt; loops; ++i) {
    int buflen;
    (void)EVP_EncryptUpdate(m_ctx, nullptr, &amp;buflen, nullptr, bsize);
    // Resize the output buffer to buflen here
    // ...
    // Encrypt into target buffer
    (void)EVP_EncryptUpdate(m_ctx, out, &amp;len, in, buflen);
    outl += len;
}
</code></pre>

<p>AES CCM encryption block by block works this way, <strong>but not correctly</strong>, because each block is treated as independent message.</p>

<p><strong>EDIT 2</strong></p>

<p>OpenSSL's implementation works properly only if the complete message is encrypted at once.</p>

<p><a href=""http://marc.info/?t=136256200100001&amp;r=1&amp;w=1"" rel=""nofollow"">http://marc.info/?t=136256200100001&amp;r=1&amp;w=1</a></p>

<p>I decided to use Crypto++ instead.</p>
","<p>I found some mis-conceptions here </p>

<p>first of all 
      EVP_EncryptUpdate(ctx, nullptr, &amp;outl 
      calling this way is to know how much output buffer is needed so you can allocate buffer and second time give the second argument as valid big enough buffer to hold the data.</p>

<p>You are also passing wrong (over written by previous call) values when you actually add the encrypted output.</p>
","3301","<c++><c><openssl><aes><encryption-symmetric>","4","0","2","2013-10-29 22:03:42","","7","1","460756","","2013-10-29 22:03:42","2013-02-28 14:22:25",""
"37676785","How to Secure Private key(of Triple DES) in C# application?","<p>Tool : OS-Windows 7 64bit, Visual Studio 2012, 4.5 .NET Framework.
Language : C#.</p>

<p>I have created one console application. In this application I have used Data Encryption Algorithm (DES- Symmetric Algorithm) to encrypt and decrypt data.</p>

<p>Now in this approach, Private or secrete key is used. I want to secure this key from client/Hack. How can I secure it?</p>

<p>For now I have stored KEY to the registry, And read that key from registry to encryption and decryption when required. But from registry any knowledgeable developer like you guys can easily read key.</p>

<p>Below is my DES algorithm code(I got this code from MSDN):</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace DES_Encrypt_Decrypt
{
    public class Program
    {
        static void Main(string[] args)
        {
            var text = ""This is Plain Text"";

            var encryptedText = CryptoGraphyExample.EncryptPlainTextToCipherText(text);
            var decryptedText = CryptoGraphyExample.DecryptCipherTextToPlainText(encryptedText);

            Console.WriteLine(""Passed Text = "" + text);
            Console.WriteLine(""EncryptedText = "" + encryptedText);
            Console.WriteLine(""DecryptedText = "" + decryptedText);

            Console.ReadLine();
        }
    }

    public class CryptoGraphyExample
    {
        private const string _securityKey = ""MyComplexKey"";
        // This is my secret key and I want to secure it to the client machine. 


        public static string EncryptPlainTextToCipherText(string PlainText)
        {                
            byte[] toEncryptedArray = UTF8Encoding.UTF8.GetBytes(PlainText);

            MD5CryptoServiceProvider objMD5CryptoService = new MD5CryptoServiceProvider();

            byte[] securityKeyArray = objMD5CryptoService.ComputeHash(UTF8Encoding.UTF8.GetBytes(_securityKey));

            objMD5CryptoService.Clear();

            var objTripleDESCryptoService = new TripleDESCryptoServiceProvider();

            objTripleDESCryptoService.Key = securityKeyArray;

            objTripleDESCryptoService.Mode = CipherMode.ECB;

            objTripleDESCryptoService.Padding = PaddingMode.PKCS7;

            var objCrytpoTransform = objTripleDESCryptoService.CreateEncryptor();

            byte[] resultArray = objCrytpoTransform.TransformFinalBlock(toEncryptedArray, 0, toEncryptedArray.Length);

            objTripleDESCryptoService.Clear();

            return Convert.ToBase64String(resultArray, 0, resultArray.Length);
        }

        public static string DecryptCipherTextToPlainText(string CipherText)
        {
            byte[] toEncryptArray = Convert.FromBase64String(CipherText);

            MD5CryptoServiceProvider objMD5CryptoService = new MD5CryptoServiceProvider();

            byte[] securityKeyArray = objMD5CryptoService.ComputeHash(UTF8Encoding.UTF8.GetBytes(_securityKey));

            objMD5CryptoService.Clear();

            var objTripleDESCryptoService = new TripleDESCryptoServiceProvider();

            objTripleDESCryptoService.Key = securityKeyArray;

            objTripleDESCryptoService.Mode = CipherMode.ECB;

            objTripleDESCryptoService.Padding = PaddingMode.PKCS7;

            var objCrytpoTransform = objTripleDESCryptoService.CreateDecryptor();

            byte[] resultArray = objCrytpoTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);

            objTripleDESCryptoService.Clear();

            return UTF8Encoding.UTF8.GetString(resultArray);
        }
    }
}
</code></pre>
","<p>Some machines have a TPM (Trusted Platform Module) and some also have a keychain or keystore that leverages the TPM. Macs do as do some Windows machines. Just encryption a key moves the problem to securing the encryption key.</p>

<p>When you get code look to see if it is current, old bad code is rarely removed from the Internet. The MDN code is completely out of date in every respect.</p>

<p>Do not use DES, it is no longer consider secure and 3DES is archaic and not recommended for new work. Instead use AES. DES, 3DES and AES are all symmetric keys.</p>

<p>Do not use MD5, it is no longer considered secure, use at least SHA256 but for password derivation use a method that uses a salt and iteration count such as PBKDF2 (Password Based Derivation Function 2).</p>

<p>Do not use ECB mode, it too is insecure, see <a href=""https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_Codebook_.28ECB.29"" rel=""nofollow"">ECB mode</a>, scroll down to the Penguin.</p>
","3251","<c#><security><registry><private-key><encryption-symmetric>","1","1","2","2017-09-27 09:19:19","","8","2","6113815","","2016-06-16 11:00:58","2016-06-07 10:26:31",""
"37676785","How to Secure Private key(of Triple DES) in C# application?","<p>Tool : OS-Windows 7 64bit, Visual Studio 2012, 4.5 .NET Framework.
Language : C#.</p>

<p>I have created one console application. In this application I have used Data Encryption Algorithm (DES- Symmetric Algorithm) to encrypt and decrypt data.</p>

<p>Now in this approach, Private or secrete key is used. I want to secure this key from client/Hack. How can I secure it?</p>

<p>For now I have stored KEY to the registry, And read that key from registry to encryption and decryption when required. But from registry any knowledgeable developer like you guys can easily read key.</p>

<p>Below is my DES algorithm code(I got this code from MSDN):</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace DES_Encrypt_Decrypt
{
    public class Program
    {
        static void Main(string[] args)
        {
            var text = ""This is Plain Text"";

            var encryptedText = CryptoGraphyExample.EncryptPlainTextToCipherText(text);
            var decryptedText = CryptoGraphyExample.DecryptCipherTextToPlainText(encryptedText);

            Console.WriteLine(""Passed Text = "" + text);
            Console.WriteLine(""EncryptedText = "" + encryptedText);
            Console.WriteLine(""DecryptedText = "" + decryptedText);

            Console.ReadLine();
        }
    }

    public class CryptoGraphyExample
    {
        private const string _securityKey = ""MyComplexKey"";
        // This is my secret key and I want to secure it to the client machine. 


        public static string EncryptPlainTextToCipherText(string PlainText)
        {                
            byte[] toEncryptedArray = UTF8Encoding.UTF8.GetBytes(PlainText);

            MD5CryptoServiceProvider objMD5CryptoService = new MD5CryptoServiceProvider();

            byte[] securityKeyArray = objMD5CryptoService.ComputeHash(UTF8Encoding.UTF8.GetBytes(_securityKey));

            objMD5CryptoService.Clear();

            var objTripleDESCryptoService = new TripleDESCryptoServiceProvider();

            objTripleDESCryptoService.Key = securityKeyArray;

            objTripleDESCryptoService.Mode = CipherMode.ECB;

            objTripleDESCryptoService.Padding = PaddingMode.PKCS7;

            var objCrytpoTransform = objTripleDESCryptoService.CreateEncryptor();

            byte[] resultArray = objCrytpoTransform.TransformFinalBlock(toEncryptedArray, 0, toEncryptedArray.Length);

            objTripleDESCryptoService.Clear();

            return Convert.ToBase64String(resultArray, 0, resultArray.Length);
        }

        public static string DecryptCipherTextToPlainText(string CipherText)
        {
            byte[] toEncryptArray = Convert.FromBase64String(CipherText);

            MD5CryptoServiceProvider objMD5CryptoService = new MD5CryptoServiceProvider();

            byte[] securityKeyArray = objMD5CryptoService.ComputeHash(UTF8Encoding.UTF8.GetBytes(_securityKey));

            objMD5CryptoService.Clear();

            var objTripleDESCryptoService = new TripleDESCryptoServiceProvider();

            objTripleDESCryptoService.Key = securityKeyArray;

            objTripleDESCryptoService.Mode = CipherMode.ECB;

            objTripleDESCryptoService.Padding = PaddingMode.PKCS7;

            var objCrytpoTransform = objTripleDESCryptoService.CreateDecryptor();

            byte[] resultArray = objCrytpoTransform.TransformFinalBlock(toEncryptArray, 0, toEncryptArray.Length);

            objTripleDESCryptoService.Clear();

            return UTF8Encoding.UTF8.GetString(resultArray);
        }
    }
}
</code></pre>
","<p>You can have a look at another answer of mine:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/9609840/where-to-store-db-passwords-when-using-windows-net-or-asp-net-applications/15342230#15342230"">Where to store db passwords when using Windows .NET or ASP.NET applications</a></li>
</ul>

<p>Or you can consider generating a key from a password, which you can use to encrypt the key itself:</p>

<ul>
<li><a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.passwordderivebytes(v=vs.110).aspx#Anchor_6"" rel=""nofollow noreferrer"">Create a Key from a Password / Random SALT (in C#)</a></li>
</ul>

<p>Either way, you <strong>should not use DES any longer</strong> as it is not secure enough any more. Triple-DES is okay if you have no other option. I recommend to use <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.aes(v=vs.110).aspx#Anchor_6"" rel=""nofollow noreferrer"">AES</a> with a key size of 256 bit if you require a secure symmetric algorithm. </p>

<hr>

<p>In the former <strong>Documentation Beta - ""stackoverflow.com/documentation"",</strong> I had added some additional information (.Net Framework -> Encryption / Cryptography). Since Beta is offline, I will provide this information here:</p>

<p><strong>Create a Key from a Password / Random SALT (in C#)</strong></p>

<pre><code>using System;
using System.Security.Cryptography;
using System.Text;

public class PasswordDerivedBytesExample
{
    public static void Main(String[] args)
    {
        // Get a password from the user.
        Console.WriteLine(""Enter a password to produce a key:"");

        byte[] pwd = Encoding.Unicode.GetBytes(Console.ReadLine());

        byte[] salt = CreateRandomSalt(7);

        // Create a TripleDESCryptoServiceProvider object.
        TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();

        try
        {
            Console.WriteLine(""Creating a key with PasswordDeriveBytes..."");

            // Create a PasswordDeriveBytes object and then create
            // a TripleDES key from the password and salt.
            PasswordDeriveBytes pdb = new PasswordDeriveBytes(pwd, salt);

            // Create the key and set it to the Key property
            // of the TripleDESCryptoServiceProvider object.
            tdes.Key = pdb.CryptDeriveKey(""TripleDES"", ""SHA1"", 192, tdes.IV);

            Console.WriteLine(""Operation complete."");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {
            // Clear the buffers
            ClearBytes(pwd);
            ClearBytes(salt);

            // Clear the key.
            tdes.Clear();
        }

        Console.ReadLine();
    }

    #region Helper methods

    /// &lt;summary&gt;
    /// Generates a random salt value of the specified length.
    /// &lt;/summary&gt;
    public static byte[] CreateRandomSalt(int length)
    {
        // Create a buffer
        byte[] randBytes;

        if (length &gt;= 1)
        {
            randBytes = new byte[length];
        }
        else
        {
            randBytes = new byte[1];
        }

        // Create a new RNGCryptoServiceProvider.
        RNGCryptoServiceProvider rand = new RNGCryptoServiceProvider();

        // Fill the buffer with random bytes.
        rand.GetBytes(randBytes);

        // return the bytes.
        return randBytes;
    }

    /// &lt;summary&gt;
    /// Clear the bytes in a buffer so they can't later be read from memory.
    /// &lt;/summary&gt;
    public static void ClearBytes(byte[] buffer)
    {
        // Check arguments.
        if (buffer == null)
        {
            throw new ArgumentNullException(""buffer"");
        }

        // Set each byte in the buffer to 0.
        for (int x = 0; x &lt; buffer.Length; x++)
        {
            buffer[x] = 0;
        }
    }

    #endregion
}
</code></pre>

<p>This example is taken from <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.passwordderivebytes(v=vs.110).aspx#Anchor_6"" rel=""nofollow noreferrer"">MSDN.</a></p>

<p>It is a console demo, and it shows how to create a secure key based on a user-defined password, and how to create a random SALT based on the cryptographic random generator.</p>

<p><strong>Notes:</strong></p>

<ul>
<li><p>The built-in function PasswordDeriveBytes uses the standard PBKDF1 algorithm to generate a key from the password. Per default, it uses 100 iterations to generate the key to slow down brute force attacks. The SALT generated randomly further strenghens the key.</p></li>
<li><p>The function CryptDeriveKey converts the key generated by PasswordDeriveBytes into a key compatible with the specified encryption algorithm (here ""TripleDES"") by using the specified hash algorithm (here ""SHA1""). The keysize in this example is 192 bytes, and the initialization vector IV is taken from the triple-DES crypto provider</p></li>
<li><p>Usually, this mechanism is used to protect a stronger random generated key by a password, which encrypts large amount of data. You can also use it to provide multiple passwords of different users to give access to the same data (being protected by a different random key).</p></li>
<li><p>Unfortunately, CryptDeriveKey does currently not support <a href=""https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""nofollow noreferrer"">AES.</a> See <a href=""https://social.msdn.microsoft.com/Forums/vstudio/en-US/61d85001-2eae-4419-b4bf-ce98d46f4d21/passwordderivebytescryptderivekey-derives-an-aes-key-but-gets-object-identifier-oid-is-unknown?forum=netfxbcl"" rel=""nofollow noreferrer"">here.</a> 
NOTE: As a workaround, you can create a random AES key for encryption of the data to be protected with AES and store the AES key in a TripleDES-Container which uses the key generated by CryptDeriveKey. But that limits the security to TripleDES, does not take advantage of the larger keysizes of AES and creates a dependency to TripleDES.</p></li>
</ul>
","3251","<c#><security><registry><private-key><encryption-symmetric>","1","1","2","2017-09-27 09:19:19","","8","2","6113815","","2016-06-16 11:00:58","2016-06-07 10:26:31",""
"10940985","Where to Store Encryption Keys MVC Application","<p>I am using a AES encryption/decryption class that needs a key value and vector value encrypt and decrypt data in an MVC3 application.</p>

<p>On saving the record I am encrypting the data then storing in a database.  When i retrieve the record i am decrypting in the controller and passing the unencrypted value to the view. </p>

<p>The concern is not protecting data as it traverses the network but to protect the database should it be compromised.</p>

<p>I have read many posts that say dont put the keys for encryption in your code.  </p>

<p>Ok so where should they be kept?   File system?  Another Database?</p>

<p>Looking for some direction.</p>
","<p>Common sense says, if an intruder gets access to your database, they will most likely also have access to your file system. It really comes down to you. For one, you can try to hide it. In configuration files, in plain files somewhere in file system, encrypt it with another key that is within the application ... and so on and so forth. </p>

<p>Configuration files are a logical answer, but why take a chance - mix it. Feel free to mix keys with multi-level encryptions - one requiring something from the record itself and being unique to every record, other one requiring a configuration value, third one requiring an application-specific value, and perhaps a fourth one from a library hidden well within your application's references? This way, even if one layer somehow gets compromised, you will have several others protecting it.</p>

<p>Yes, it adds overhead. Yes, it is relatively expensive. But is it worth it if you have sensitive data like user credit card details? You bet it is.</p>

<p>I'm using similar encryption and hashing techniques in one of my personal pet projects that is highly security focused and carefully controlled. It depends how much data you need to display at any one time - for example, mine will ever fetch only 10 records at a time, most likely even less. </p>

<p>... To specify what I mean by mixing: Encrypt once. Then encrypt that data again with different key and suggestedly different algorithm.</p>
","3205","<asp.net><asp.net-mvc-3><encryption><encryption-symmetric>","11","3","2","2013-08-21 07:37:55","","0","4","","","","2012-06-07 22:55:47",""
"10940985","Where to Store Encryption Keys MVC Application","<p>I am using a AES encryption/decryption class that needs a key value and vector value encrypt and decrypt data in an MVC3 application.</p>

<p>On saving the record I am encrypting the data then storing in a database.  When i retrieve the record i am decrypting in the controller and passing the unencrypted value to the view. </p>

<p>The concern is not protecting data as it traverses the network but to protect the database should it be compromised.</p>

<p>I have read many posts that say dont put the keys for encryption in your code.  </p>

<p>Ok so where should they be kept?   File system?  Another Database?</p>

<p>Looking for some direction.</p>
","<p>I would use <strong>Registry Keys protected by ACL</strong>, so only the account under which your app pool is running can read them.</p>
","3205","<asp.net><asp.net-mvc-3><encryption><encryption-symmetric>","11","0","2","2013-08-21 07:37:55","","0","4","","","","2012-06-07 22:55:47",""
"7026702","BinaryFormatter & CryptoStream problem when deserializing","<p>I'm getting a bit desperate here. I'm trying to write an encrypted file with a serialized object to disk and later retrieve the file, decrypt it and deserialize the object back.</p>

<p>UPDATE:
I refactored the code to this:</p>

<pre><code>using (Stream innerStream = File.Create(this.GetFullFileNameForUser(securityContext.User, applicationName)))
            {
                using (Stream cryptoStream = new CryptoStream(innerStream, GetCryptoProvider().CreateEncryptor(), CryptoStreamMode.Write))
                {
                    // 3. write to the cryptoStream 
                    //BinaryFormatter bf = new BinaryFormatter();
                    //bf.Serialize(cryptoStream, securityContext);
                    XmlSerializer xs = new XmlSerializer(typeof(SecurityContextDTO));
                    xs.Serialize(cryptoStream, securityContext);
                }
            }


 using (Stream innerStream = File.Open(this.GetFullFileNameForUser(user, applicationName), FileMode.Open))
        {
            using (Stream cryptoStream = new CryptoStream(innerStream, GetCryptoProvider().CreateDecryptor(), CryptoStreamMode.Read))
            {
                //BinaryFormatter bf = new BinaryFormatter();
                //return (SecurityContextDTO)bf.Deserialize(cryptoStream);
                XmlSerializer xs = new XmlSerializer(typeof(SecurityContextDTO));
                //CryptographicException here
                return (SecurityContextDTO)xs.Deserialize(cryptoStream);
            }
        }
</code></pre>

<p>Now I'm getting a cryptographic exception on deserialize: Bad Data</p>

<p>ORIGINAL:</p>

<p>I'm doing this:</p>

<pre><code>public void StoreToFile(SecurityContextDTO securityContext, string applicationName)
    {
        if (securityContext.LoginResult.IsOfflineMode == false)
        {
            Stream stream = null;
            CryptoStream crStream = null;
            try
            {
                TripleDESCryptoServiceProvider cryptic = GetCryptoProvider();

                stream = File.Open(this.GetFullFileNameForUser(securityContext.User, applicationName), FileMode.Create);
                crStream = new CryptoStream(stream,
                   cryptic.CreateEncryptor(), CryptoStreamMode.Write);

                BinaryFormatter bFormatter = new BinaryFormatter();
                bFormatter.Serialize(crStream, securityContext);
            }
            catch(Exception)
            {
                throw;
            }
            finally
            {
                if (crStream != null)
                    crStream.Close();
            }
        }
    }



public SecurityContextDTO RetrieveFromFile(UserDTO user,string applicationName)
    {
        SecurityContextDTO objectToSerialize;
        Stream stream = null;
        CryptoStream crStream=null;
        try
        {
            stream = File.Open(this.GetFullFileNameForUser(user, applicationName), FileMode.Open);
             crStream= new CryptoStream(stream,
                GetCryptoProvider().CreateDecryptor(), CryptoStreamMode.Read);
            BinaryFormatter bFormatter = new BinaryFormatter();
            //Exception here
            objectToSerialize = (SecurityContextDTO)bFormatter.Deserialize(crStream); 
        }
        catch (Exception)
        {
            objectToSerialize = null;
        }
        finally
        {
            if (crStream!=null)
                crStream.Close();
        }
        return objectToSerialize;
    }


private static TripleDESCryptoServiceProvider GetCryptoProvider()
    {
        TripleDESCryptoServiceProvider cryptic = new TripleDESCryptoServiceProvider();
        try
        {
            cryptic.Key = ASCIIEncoding.ASCII.GetBytes(CrypKey);

            Rfc2898DeriveBytes db = new Rfc2898DeriveBytes(""sdddsdsd"", 8);
            cryptic.IV = db.GetBytes(8);
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            cryptic.Dispose();
        }
        return cryptic;
    }
</code></pre>

<p>Encrypting and writing works fine, the file appears on the disk and the content is there (encrypted of course). But when I call the retrieve method I always get a SerializationException</p>

<blockquote>
  <p>Binary stream '30' does not contain a valid BinaryHeader. Possible causes are invalid stream or object version change between serialization and deserialization.</p>
</blockquote>

<p>When I leave the cryptographic methods out everything works fine.</p>
","<p>You are close.  However, the stream you pass into the creation of CryptoStream is <em>always, always, always</em> the  buffer that will hold your end result.  It is <em>not</em> the stream that holds the data you want to encrypt or decrypt.  I put the emphasis in there because I remember learning this for the first time and I did exactly what you were doing.  So here:</p>

<pre><code>// this is for encryption
var memStreamEncryptedData = new MemoryStream();
var encryptStream = new CryptoStream(memStreamEncryptedData, 
   transform, CryptoStreamMode.Write);

// this is for decryption
var memStreamDecryptedData = new MemoryStream();
var decryptStream = new CryptoStream(memStreamDecryptedData, 
   transform, CryptoStreamMode.Write);
</code></pre>

<p>Notice in both cases, CryptoStream is being initialized with a blank output stream.  Your stream does not enter into the picture until later.  So, during a write, you will do the following:</p>

<pre><code>encryptStream.Write(dataToBeEncrypted);
encryptStream.FlushFinalBlock();
encryptStream.Close();
// memStreamEncryptedData now safely holds your encrypted data
</code></pre>

<p>And during the read, you will:</p>

<pre><code>decryptStream.Write(dataToBeDecrypted);
encryptStream.FlushFinalBlock();
encryptStream.Close();
// memStreamDecryptedData now safely holds your decrypted data
</code></pre>

<p>So, to save you some trouble, here's a nice simple Symmetric method that will perform both encryption and decryption.  The only difference between this and yours is that I am working directly on byte arrays, but perhaps that augmentation can be an exercise:</p>

<pre><code>public static byte[] Symmetric(bool encrypt, byte[] plaintext, string ikey)
{
    if (plaintext.Length == 0) return plaintext;

    // setting up the services can be very expensive, so I'll cache them
    // into a static dictionary.
    SymmetricSetup setup;
    if (!_dictSymmetricSetup.TryGetValue(ikey, out setup))
    {
        setup = new SymmetricSetup();
        setup.des = new DESCryptoServiceProvider { Mode = CipherMode.CBC, 
            Padding = PaddingMode.Zeros };
        setup.hash = Hash(Encoding.ASCII.GetBytes(ikey));
        setup.key = setup.hash.ForceLength(8, 0);
        setup.IV = Encoding.ASCII.GetBytes(""init vec"");
        setup.des.Key = setup.key;
        setup.des.IV = setup.IV;

        setup.encrypt = setup.des.CreateEncryptor(setup.des.Key, setup.des.IV);
        setup.decrypt = setup.des.CreateDecryptor(setup.des.Key, setup.des.IV);
        _dictSymmetricSetup[ikey] = setup;
    }

    var transform = encrypt ? setup.encrypt : setup.decrypt;

    var memStreamEncryptedData = new MemoryStream();

    var encStream = new CryptoStream(memStreamEncryptedData, transform, CryptoStreamMode.Write);

    if (encrypt)
        encStream.Write(new[] {(byte) ((8 - (plaintext.Length + 1)%8)%8)}, 0, 1);

    encStream.Write(plaintext, 0, plaintext.Length);
    encStream.FlushFinalBlock();
    encStream.Close();

    memStreamEncryptedData.Flush();

    var ciphertext = memStreamEncryptedData.ToArray();

    byte b;

    if (!encrypt)
        if (byte.TryParse("""" + ciphertext[0], out b))
            ciphertext = ciphertext.Skip(1).Take(ciphertext.Length - b - 1).ToArray();

    return ciphertext;
}
</code></pre>

<p>And to call it, you might do something like this:</p>

<pre><code>static public byte[] DecryptData(this byte[] source, string password) {
    return Symmetric(false, source, password);
}

static public byte[] EncryptData(this byte[] source, string password) {
    return Symmetric(true, source, password);
}
</code></pre>

<p>Again, you'll do something slightly different to work with streams, but hopefully you get the gist.  Instead of MemoryStream, it will be whatever stream you need to feed into your serializer.</p>
","3173","<c#><.net><file-io><encryption-symmetric>","3","0","3","2011-08-11 17:35:39","7030175","8","","310764","","2011-08-11 14:20:13","2011-08-11 13:27:34",""
"7026702","BinaryFormatter & CryptoStream problem when deserializing","<p>I'm getting a bit desperate here. I'm trying to write an encrypted file with a serialized object to disk and later retrieve the file, decrypt it and deserialize the object back.</p>

<p>UPDATE:
I refactored the code to this:</p>

<pre><code>using (Stream innerStream = File.Create(this.GetFullFileNameForUser(securityContext.User, applicationName)))
            {
                using (Stream cryptoStream = new CryptoStream(innerStream, GetCryptoProvider().CreateEncryptor(), CryptoStreamMode.Write))
                {
                    // 3. write to the cryptoStream 
                    //BinaryFormatter bf = new BinaryFormatter();
                    //bf.Serialize(cryptoStream, securityContext);
                    XmlSerializer xs = new XmlSerializer(typeof(SecurityContextDTO));
                    xs.Serialize(cryptoStream, securityContext);
                }
            }


 using (Stream innerStream = File.Open(this.GetFullFileNameForUser(user, applicationName), FileMode.Open))
        {
            using (Stream cryptoStream = new CryptoStream(innerStream, GetCryptoProvider().CreateDecryptor(), CryptoStreamMode.Read))
            {
                //BinaryFormatter bf = new BinaryFormatter();
                //return (SecurityContextDTO)bf.Deserialize(cryptoStream);
                XmlSerializer xs = new XmlSerializer(typeof(SecurityContextDTO));
                //CryptographicException here
                return (SecurityContextDTO)xs.Deserialize(cryptoStream);
            }
        }
</code></pre>

<p>Now I'm getting a cryptographic exception on deserialize: Bad Data</p>

<p>ORIGINAL:</p>

<p>I'm doing this:</p>

<pre><code>public void StoreToFile(SecurityContextDTO securityContext, string applicationName)
    {
        if (securityContext.LoginResult.IsOfflineMode == false)
        {
            Stream stream = null;
            CryptoStream crStream = null;
            try
            {
                TripleDESCryptoServiceProvider cryptic = GetCryptoProvider();

                stream = File.Open(this.GetFullFileNameForUser(securityContext.User, applicationName), FileMode.Create);
                crStream = new CryptoStream(stream,
                   cryptic.CreateEncryptor(), CryptoStreamMode.Write);

                BinaryFormatter bFormatter = new BinaryFormatter();
                bFormatter.Serialize(crStream, securityContext);
            }
            catch(Exception)
            {
                throw;
            }
            finally
            {
                if (crStream != null)
                    crStream.Close();
            }
        }
    }



public SecurityContextDTO RetrieveFromFile(UserDTO user,string applicationName)
    {
        SecurityContextDTO objectToSerialize;
        Stream stream = null;
        CryptoStream crStream=null;
        try
        {
            stream = File.Open(this.GetFullFileNameForUser(user, applicationName), FileMode.Open);
             crStream= new CryptoStream(stream,
                GetCryptoProvider().CreateDecryptor(), CryptoStreamMode.Read);
            BinaryFormatter bFormatter = new BinaryFormatter();
            //Exception here
            objectToSerialize = (SecurityContextDTO)bFormatter.Deserialize(crStream); 
        }
        catch (Exception)
        {
            objectToSerialize = null;
        }
        finally
        {
            if (crStream!=null)
                crStream.Close();
        }
        return objectToSerialize;
    }


private static TripleDESCryptoServiceProvider GetCryptoProvider()
    {
        TripleDESCryptoServiceProvider cryptic = new TripleDESCryptoServiceProvider();
        try
        {
            cryptic.Key = ASCIIEncoding.ASCII.GetBytes(CrypKey);

            Rfc2898DeriveBytes db = new Rfc2898DeriveBytes(""sdddsdsd"", 8);
            cryptic.IV = db.GetBytes(8);
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            cryptic.Dispose();
        }
        return cryptic;
    }
</code></pre>

<p>Encrypting and writing works fine, the file appears on the disk and the content is there (encrypted of course). But when I call the retrieve method I always get a SerializationException</p>

<blockquote>
  <p>Binary stream '30' does not contain a valid BinaryHeader. Possible causes are invalid stream or object version change between serialization and deserialization.</p>
</blockquote>

<p>When I leave the cryptographic methods out everything works fine.</p>
","<p>So,</p>

<p>You realize that in this code </p>

<pre><code>private static TripleDESCryptoServiceProvider GetCryptoProvider()
{
    TripleDESCryptoServiceProvider cryptic = new TripleDESCryptoServiceProvider();
    try
    {
        cryptic.Key = ASCIIEncoding.ASCII.GetBytes(CrypKey);

        Rfc2898DeriveBytes db = new Rfc2898DeriveBytes(""sdddsdsd"", 8);
        cryptic.IV = db.GetBytes(8);
    }
    catch (Exception)
    {
        throw;
    }
    finally
    {
        cryptic.Dispose(); // &lt;------- Don't do this until you are done decrypting.
    }
    return cryptic;
}
</code></pre>

<p>you will ALWAYS dispose of the provider meaning you are always using a random key and iv</p>
","3173","<c#><.net><file-io><encryption-symmetric>","3","1","3","2011-08-11 17:35:39","7030175","8","","310764","","2011-08-11 14:20:13","2011-08-11 13:27:34",""
"7026702","BinaryFormatter & CryptoStream problem when deserializing","<p>I'm getting a bit desperate here. I'm trying to write an encrypted file with a serialized object to disk and later retrieve the file, decrypt it and deserialize the object back.</p>

<p>UPDATE:
I refactored the code to this:</p>

<pre><code>using (Stream innerStream = File.Create(this.GetFullFileNameForUser(securityContext.User, applicationName)))
            {
                using (Stream cryptoStream = new CryptoStream(innerStream, GetCryptoProvider().CreateEncryptor(), CryptoStreamMode.Write))
                {
                    // 3. write to the cryptoStream 
                    //BinaryFormatter bf = new BinaryFormatter();
                    //bf.Serialize(cryptoStream, securityContext);
                    XmlSerializer xs = new XmlSerializer(typeof(SecurityContextDTO));
                    xs.Serialize(cryptoStream, securityContext);
                }
            }


 using (Stream innerStream = File.Open(this.GetFullFileNameForUser(user, applicationName), FileMode.Open))
        {
            using (Stream cryptoStream = new CryptoStream(innerStream, GetCryptoProvider().CreateDecryptor(), CryptoStreamMode.Read))
            {
                //BinaryFormatter bf = new BinaryFormatter();
                //return (SecurityContextDTO)bf.Deserialize(cryptoStream);
                XmlSerializer xs = new XmlSerializer(typeof(SecurityContextDTO));
                //CryptographicException here
                return (SecurityContextDTO)xs.Deserialize(cryptoStream);
            }
        }
</code></pre>

<p>Now I'm getting a cryptographic exception on deserialize: Bad Data</p>

<p>ORIGINAL:</p>

<p>I'm doing this:</p>

<pre><code>public void StoreToFile(SecurityContextDTO securityContext, string applicationName)
    {
        if (securityContext.LoginResult.IsOfflineMode == false)
        {
            Stream stream = null;
            CryptoStream crStream = null;
            try
            {
                TripleDESCryptoServiceProvider cryptic = GetCryptoProvider();

                stream = File.Open(this.GetFullFileNameForUser(securityContext.User, applicationName), FileMode.Create);
                crStream = new CryptoStream(stream,
                   cryptic.CreateEncryptor(), CryptoStreamMode.Write);

                BinaryFormatter bFormatter = new BinaryFormatter();
                bFormatter.Serialize(crStream, securityContext);
            }
            catch(Exception)
            {
                throw;
            }
            finally
            {
                if (crStream != null)
                    crStream.Close();
            }
        }
    }



public SecurityContextDTO RetrieveFromFile(UserDTO user,string applicationName)
    {
        SecurityContextDTO objectToSerialize;
        Stream stream = null;
        CryptoStream crStream=null;
        try
        {
            stream = File.Open(this.GetFullFileNameForUser(user, applicationName), FileMode.Open);
             crStream= new CryptoStream(stream,
                GetCryptoProvider().CreateDecryptor(), CryptoStreamMode.Read);
            BinaryFormatter bFormatter = new BinaryFormatter();
            //Exception here
            objectToSerialize = (SecurityContextDTO)bFormatter.Deserialize(crStream); 
        }
        catch (Exception)
        {
            objectToSerialize = null;
        }
        finally
        {
            if (crStream!=null)
                crStream.Close();
        }
        return objectToSerialize;
    }


private static TripleDESCryptoServiceProvider GetCryptoProvider()
    {
        TripleDESCryptoServiceProvider cryptic = new TripleDESCryptoServiceProvider();
        try
        {
            cryptic.Key = ASCIIEncoding.ASCII.GetBytes(CrypKey);

            Rfc2898DeriveBytes db = new Rfc2898DeriveBytes(""sdddsdsd"", 8);
            cryptic.IV = db.GetBytes(8);
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            cryptic.Dispose();
        }
        return cryptic;
    }
</code></pre>

<p>Encrypting and writing works fine, the file appears on the disk and the content is there (encrypted of course). But when I call the retrieve method I always get a SerializationException</p>

<blockquote>
  <p>Binary stream '30' does not contain a valid BinaryHeader. Possible causes are invalid stream or object version change between serialization and deserialization.</p>
</blockquote>

<p>When I leave the cryptographic methods out everything works fine.</p>
","<p>Some previous posts that can be of use:</p>

<p><a href=""https://stackoverflow.com/questions/3962900/how-do-i-encrypt-a-string-in-vb-net-using-rijndaelmanaged-and-using-pkcs5-paddin/3962945#3962945"">How do I encrypt a string in vb.net using RijndaelManaged, and using PKCS5 padding?</a></p>

<p><a href=""https://stackoverflow.com/questions/1341843/does-binaryformatter-apply-any-compression/5950845#5950845"">Does BinaryFormatter apply any compression?</a></p>

<p>In later, you can see how I stacked compression with encryption with serialization.  And it works.</p>
","3173","<c#><.net><file-io><encryption-symmetric>","3","0","3","2011-08-11 17:35:39","7030175","8","","310764","","2011-08-11 14:20:13","2011-08-11 13:27:34",""
"7730741","Java Encryption and C# Decryption Issue","<p>I have a DLL in C# that encrypts and decrypts string texts (something basic), but now I need to implement the same encryption method in Java, so that some applications can encrypt data and send it to the library.</p>

<p>I can't modify the C# code, because it's already in production, but the Java don't, so please, any suggestion must be done at the Java side.</p>

<p>Basically I'm trying to implement the same C# encryption method in Java. Here are my C# codes:</p>

<p><strong>NOTE</strong>: the passphrase, salt, etc. values obviously are just referential.</p>

<pre><code>    const string PassPhrase = ""IhDyHz6bgQyS0Ff1/1s=""; 
    const string SaltValue = ""0A0Qvv09OXd3GsYHVrA="";   
    const string HashAlgorithm = ""SHA1"";                
    const int PasswordIterations = 3;                 
    const string InitVector = ""GjrlRZ6INgNckBqv"";      
    const int KeySize = 256;


public static string Encrypt(string plainText)
    {

        byte[] initVectorBytes = Encoding.ASCII.GetBytes(InitVector);
        byte[] saltValueBytes = Encoding.ASCII.GetBytes(SaltValue);


        byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);


        PasswordDeriveBytes password = new PasswordDeriveBytes(
                                                        PassPhrase,
                                                        saltValueBytes,
                                                        HashAlgorithm,
                                                        PasswordIterations);


        byte[] keyBytes = password.GetBytes(KeySize / 8);


        RijndaelManaged symmetricKey = new RijndaelManaged();


        symmetricKey.Mode = CipherMode.CBC;


        ICryptoTransform encryptor = symmetricKey.CreateEncryptor(
                                                         keyBytes,
                                                         initVectorBytes);


        MemoryStream memoryStream = new MemoryStream();


        CryptoStream cryptoStream = new CryptoStream(memoryStream,
                                                     encryptor,
                                                     CryptoStreamMode.Write);

        cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);


        cryptoStream.FlushFinalBlock();


        byte[] cipherTextBytes = memoryStream.ToArray();


        memoryStream.Close();
        cryptoStream.Close();


        string cipherText = Convert.ToBase64String(cipherTextBytes);


        return cipherText;
    }


public static string Decrypt(string cipherText)
    {

        byte[] initVectorBytes = Encoding.ASCII.GetBytes(InitVector);
        byte[] saltValueBytes = Encoding.ASCII.GetBytes(SaltValue);


        byte[] cipherTextBytes = Convert.FromBase64String(cipherText);

        PasswordDeriveBytes password = new PasswordDeriveBytes(
                                                        PassPhrase,
                                                        saltValueBytes,
                                                        HashAlgorithm,
                                                        PasswordIterations);


        byte[] keyBytes = password.GetBytes(KeySize / 8);


        RijndaelManaged symmetricKey = new RijndaelManaged();


        symmetricKey.Mode = CipherMode.CBC;


        ICryptoTransform decryptor = symmetricKey.CreateDecryptor(
                                                         keyBytes,
                                                         initVectorBytes);


        MemoryStream memoryStream = new MemoryStream(cipherTextBytes);


        CryptoStream cryptoStream = new CryptoStream(memoryStream,
                                                      decryptor,
                                                      CryptoStreamMode.Read);


        byte[] plainTextBytes = new byte[cipherTextBytes.Length];


        int decryptedByteCount = cryptoStream.Read(plainTextBytes,
                                                   0,
                                                   plainTextBytes.Length);


        memoryStream.Close();
        cryptoStream.Close();


        string plainText = Encoding.UTF8.GetString(plainTextBytes,
                                                   0,
                                                   decryptedByteCount);


        return plainText;
    }
</code></pre>

<p>Here is my java code, it encrypts the data, but not at the same way as the C# encryption code, so when I try to decrypt it using the C# library it throws the exception: ""Length of the data to decrypt is invalid""</p>

<pre><code>    static final String PassPhrase = ""IhDyHz6bgQyS0Ff1/1s="";   
    static final String SaltValue = ""0A0Qvv09OXd3GsYHVrA="";    
    static final String HashAlgorithm = ""SHA1"";               
    static final int PasswordIterations = 3;                   
    static final String InitVector = ""GjrlRZ6INgNckBqv"";       
    static final int KeySize = 256;

public static String encrypt(String plainText)
{
    char[] password = PassPhrase.toCharArray();
    byte[] salt = SaltValue.getBytes();
    byte[] iv = InitVector.getBytes();
    byte[] ciphertext = new byte[0];

    SecretKeyFactory factory;
    try {
        factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");

        KeySpec spec = new PBEKeySpec(password, salt, PasswordIterations, 256);
        SecretKey tmp;

        tmp = factory.generateSecret(spec);

        SecretKey secret = new SecretKeySpec(tmp.getEncoded(), ""AES"");

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, secret);
        AlgorithmParameters params = cipher.getParameters();
        //iv = params.getParameterSpec(IvParameterSpec.class).getIV();
        ciphertext = cipher.doFinal(plainText.getBytes(""UTF-8""));

    } catch (NoSuchAlgorithmException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } 
    //catch (InvalidParameterSpecException e) {
    //  // TODO Auto-generated catch block
    //  e.printStackTrace();
    //} 
    catch (IllegalBlockSizeException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (BadPaddingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (UnsupportedEncodingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

    return Base64.encode(new String(ciphertext));
}
</code></pre>

<p><strong>EDIT 1</strong>: I fixed the final byte array conversion to String in the Java code, as Jon Skeet suggested.</p>
","<p>This is what's wrong, in the Java code:</p>

<pre><code>return Base64.encode(ciphertext.toString());
</code></pre>

<p>You're calling <code>toString()</code> on the byte array, which will <em>always</em> give a string such as <code>[B@3e25a5</code>.</p>

<p>EDIT: Ooh, just noticed that you <em>can</em> change the Java side. Hooray.</p>

<p>Basically, you need to use a Base64 API which allows:</p>

<pre><code>return Base64.encode(ciphertext);
</code></pre>

<p>I'm always disappointed in Base64 APIs which <em>allow</em> you to ""encode"" a string, to be honest... base64 fundamentally encodes binary data to text, and decodes text data to binary. Oh well...</p>

<p>Anyway, use <a href=""http://iharder.sourceforge.net/current/java/base64/"" rel=""nofollow"">this API</a> (the <code>encodeBytes</code> method) if you need one which allows you to pass in a byte array.</p>

<p>I haven't checked over the actual encryption part in detail, but the C# code at least <em>looks</em> like it's doing the right thing in terms of encodings. It could do with <code>using</code> statements though :)</p>
","3164","<c#><java><encryption-symmetric>","1","3","2","2017-07-15 17:13:40","7730786","0","6","1033581","","2017-07-15 17:13:40","2011-10-11 18:32:01",""
"7730741","Java Encryption and C# Decryption Issue","<p>I have a DLL in C# that encrypts and decrypts string texts (something basic), but now I need to implement the same encryption method in Java, so that some applications can encrypt data and send it to the library.</p>

<p>I can't modify the C# code, because it's already in production, but the Java don't, so please, any suggestion must be done at the Java side.</p>

<p>Basically I'm trying to implement the same C# encryption method in Java. Here are my C# codes:</p>

<p><strong>NOTE</strong>: the passphrase, salt, etc. values obviously are just referential.</p>

<pre><code>    const string PassPhrase = ""IhDyHz6bgQyS0Ff1/1s=""; 
    const string SaltValue = ""0A0Qvv09OXd3GsYHVrA="";   
    const string HashAlgorithm = ""SHA1"";                
    const int PasswordIterations = 3;                 
    const string InitVector = ""GjrlRZ6INgNckBqv"";      
    const int KeySize = 256;


public static string Encrypt(string plainText)
    {

        byte[] initVectorBytes = Encoding.ASCII.GetBytes(InitVector);
        byte[] saltValueBytes = Encoding.ASCII.GetBytes(SaltValue);


        byte[] plainTextBytes = Encoding.UTF8.GetBytes(plainText);


        PasswordDeriveBytes password = new PasswordDeriveBytes(
                                                        PassPhrase,
                                                        saltValueBytes,
                                                        HashAlgorithm,
                                                        PasswordIterations);


        byte[] keyBytes = password.GetBytes(KeySize / 8);


        RijndaelManaged symmetricKey = new RijndaelManaged();


        symmetricKey.Mode = CipherMode.CBC;


        ICryptoTransform encryptor = symmetricKey.CreateEncryptor(
                                                         keyBytes,
                                                         initVectorBytes);


        MemoryStream memoryStream = new MemoryStream();


        CryptoStream cryptoStream = new CryptoStream(memoryStream,
                                                     encryptor,
                                                     CryptoStreamMode.Write);

        cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);


        cryptoStream.FlushFinalBlock();


        byte[] cipherTextBytes = memoryStream.ToArray();


        memoryStream.Close();
        cryptoStream.Close();


        string cipherText = Convert.ToBase64String(cipherTextBytes);


        return cipherText;
    }


public static string Decrypt(string cipherText)
    {

        byte[] initVectorBytes = Encoding.ASCII.GetBytes(InitVector);
        byte[] saltValueBytes = Encoding.ASCII.GetBytes(SaltValue);


        byte[] cipherTextBytes = Convert.FromBase64String(cipherText);

        PasswordDeriveBytes password = new PasswordDeriveBytes(
                                                        PassPhrase,
                                                        saltValueBytes,
                                                        HashAlgorithm,
                                                        PasswordIterations);


        byte[] keyBytes = password.GetBytes(KeySize / 8);


        RijndaelManaged symmetricKey = new RijndaelManaged();


        symmetricKey.Mode = CipherMode.CBC;


        ICryptoTransform decryptor = symmetricKey.CreateDecryptor(
                                                         keyBytes,
                                                         initVectorBytes);


        MemoryStream memoryStream = new MemoryStream(cipherTextBytes);


        CryptoStream cryptoStream = new CryptoStream(memoryStream,
                                                      decryptor,
                                                      CryptoStreamMode.Read);


        byte[] plainTextBytes = new byte[cipherTextBytes.Length];


        int decryptedByteCount = cryptoStream.Read(plainTextBytes,
                                                   0,
                                                   plainTextBytes.Length);


        memoryStream.Close();
        cryptoStream.Close();


        string plainText = Encoding.UTF8.GetString(plainTextBytes,
                                                   0,
                                                   decryptedByteCount);


        return plainText;
    }
</code></pre>

<p>Here is my java code, it encrypts the data, but not at the same way as the C# encryption code, so when I try to decrypt it using the C# library it throws the exception: ""Length of the data to decrypt is invalid""</p>

<pre><code>    static final String PassPhrase = ""IhDyHz6bgQyS0Ff1/1s="";   
    static final String SaltValue = ""0A0Qvv09OXd3GsYHVrA="";    
    static final String HashAlgorithm = ""SHA1"";               
    static final int PasswordIterations = 3;                   
    static final String InitVector = ""GjrlRZ6INgNckBqv"";       
    static final int KeySize = 256;

public static String encrypt(String plainText)
{
    char[] password = PassPhrase.toCharArray();
    byte[] salt = SaltValue.getBytes();
    byte[] iv = InitVector.getBytes();
    byte[] ciphertext = new byte[0];

    SecretKeyFactory factory;
    try {
        factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");

        KeySpec spec = new PBEKeySpec(password, salt, PasswordIterations, 256);
        SecretKey tmp;

        tmp = factory.generateSecret(spec);

        SecretKey secret = new SecretKeySpec(tmp.getEncoded(), ""AES"");

        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, secret);
        AlgorithmParameters params = cipher.getParameters();
        //iv = params.getParameterSpec(IvParameterSpec.class).getIV();
        ciphertext = cipher.doFinal(plainText.getBytes(""UTF-8""));

    } catch (NoSuchAlgorithmException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } 
    //catch (InvalidParameterSpecException e) {
    //  // TODO Auto-generated catch block
    //  e.printStackTrace();
    //} 
    catch (IllegalBlockSizeException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (BadPaddingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (UnsupportedEncodingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

    return Base64.encode(new String(ciphertext));
}
</code></pre>

<p><strong>EDIT 1</strong>: I fixed the final byte array conversion to String in the Java code, as Jon Skeet suggested.</p>
","<p>Here is a C# example, you need the IterationCount and PaddingMode.None</p>

<pre><code>protected void Page_Load(object sender, EventArgs e)
{
    string value = """";
    string password = """";
    string salt = """";
    string iv = """";


    byte[] vectorBytes = Convert.FromBase64String(Server.UrlDecode(iv)); 
    byte[] cipherText = Convert.FromBase64String(Server.UrlDecode(value));

    Rfc2898DeriveBytes key1 = new Rfc2898DeriveBytes(password, StringToByteArray(salt)); //same as PBKDF2WithHmacSHA1
    key1.IterationCount = 32;
    byte[] keyBytes = key1.GetBytes(16);

    string Answer = DecryptDataAES(cipherText, keyBytes, vectorBytes); //vectorBytes is good

    //litAnswer.Text = Answer;
}

public static string DecryptDataAES(byte[] cipherText, byte[] key, byte[] iv)
{
    string plaintext = null;

    using (Rijndael rijndael = Rijndael.Create())
    {
        rijndael.Key = key;
        rijndael.IV = iv;
        rijndael.Padding = PaddingMode.None;

        ICryptoTransform decryptor = rijndael.CreateDecryptor(rijndael.Key, rijndael.IV);

        // Create the streams used for decryption. 
        using (MemoryStream msDecrypt = new MemoryStream(cipherText))
        {
            using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
            {
                using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                {
                    plaintext = srDecrypt.ReadToEnd();
                }
            }
        }
    }
    return plaintext;
}

public static byte[] StringToByteArray(String hex)
{
    int NumberChars = hex.Length / 2;
    byte[] bytes = new byte[NumberChars];
    using (var sr = new StringReader(hex))
    {
        for (int i = 0; i &lt; NumberChars; i++)
            bytes[i] =
              Convert.ToByte(new string(new char[2] { (char)sr.Read(), (char)sr.Read() }), 16);
    }
    return bytes;
}
</code></pre>
","3164","<c#><java><encryption-symmetric>","1","1","2","2017-07-15 17:13:40","7730786","0","6","1033581","","2017-07-15 17:13:40","2011-10-11 18:32:01",""
"26426151","Android decryption: Error while finalizing cipher","<p>I am using Android to encrypt and encrypt images sent between apps.</p>

<p>The encryption works well but when the file arrives at the destination it will not decrypt. Now I have copied the file at the destination app and decrypted it successfully using 3rd-party software.</p>

<p>The error I get is:""Error while finalizing cipher"" at CipherInputStream (CipherInputStream.java:107) caused by IllegalBlockSizeException.</p>

<p>The encryption &amp; decryption code is below:</p>

<pre><code>public static String encrypt(String plainFile, String encryptedFile) throws    IOException, NoSuchAlgorithmException,
NoSuchPaddingException, InvalidKeyException {
    // Here you read the cleartext.
    File extStore = Environment.getExternalStorageDirectory();
    FileInputStream fis = new FileInputStream(plainFile);
    // This stream write the encrypted text. This stream will be wrapped by
    // another stream.
    FileOutputStream fos = new FileOutputStream(encryptedFile);

    // Length is 16 byte
    SecretKeySpec sks = new SecretKeySpec(""MyDifficultPassw"".getBytes(), ""AES"");
    // Create cipher
    Cipher cipher = Cipher.getInstance(""AES"");
    cipher.init(Cipher.ENCRYPT_MODE, sks);
    // Wrap the output stream
    CipherOutputStream cos = new CipherOutputStream(fos, cipher);
    // Write bytes
    int b;
    byte[] d = new byte[8];
    while ((b = fis.read(d)) != -1) {
        cos.write(d, 0, b);
    }
    // Flush and close streams.
    cos.flush();
    cos.close();
    fis.close();

    return encryptedFile;
}   

static String decrypt(String plainFile, String encryptedFile) throws IOException, NoSuchAlgorithmException,
NoSuchPaddingException, InvalidKeyException {

    File encFile=new File(encryptedFile);
    FileInputStream fis = new FileInputStream(encFile);

    FileOutputStream fos = new FileOutputStream(plainFile);
    SecretKeySpec sks = new SecretKeySpec(""MyDifficultPassw"".getBytes(),
              ""AES"");
    Cipher cipher = Cipher.getInstance(""AES"");
    cipher.init(Cipher.DECRYPT_MODE, sks);
    CipherInputStream cis = new CipherInputStream(fis, cipher);
    int b;
    byte[] d = new byte[8];
    while ((b = cis.read(d)) != -1) {
        fos.write(d, 0, b);
    }
    fos.flush();
    fos.close();
    cis.close();

    return plainFile;
}    
</code></pre>

<p>Any ideas? Thanks!</p>

<p>Ronan</p>

<p>Update:
The received encrypted file is consistently 1 byte smaller that the original file which seems to be generating the error. The error re block size is triggered at the code line
 while ((b = fis.read(d)) != -1) { in the decrypt function. </p>

<p>Update:
Thanks for the feedback. The ultimate solution is as defined at <a href=""https://stackoverflow.com/questions/12799726/last-block-incomplete-with-cipherinputstream-cipheroutputstream-even-with-paddi"">last block incomplete with CipherInputStream/CipherOutputStream, even with padding AES/CBC/PKCS5Padding</a></p>

<p>Ronan</p>
","","3156","<java><android><encryption><encryption-symmetric>","3","","0","2014-10-27 20:26:31","","4","3","-1","","2017-05-23 10:27:29","2014-10-17 13:30:48",""
"40050674","How to generate a AES-256 CBC key/iv that can be shared as a string?","<p>I am trying to make AES-256 CBC encryption work in PHP, Ruby (using <a href=""https://rocketjob.github.io/symmetric-encryption/api.html"" rel=""nofollow noreferrer"">SymmetricEncryption</a>) and Javascript (using <a href=""https://code.google.com/archive/p/crypto-js/wikis/QuickStartGuide_v3beta.wiki"" rel=""nofollow noreferrer"">CryptoJS</a>). As for the first 2:</p>

<pre class=""lang-php prettyprint-override""><code>&lt;?php
openssl_encrypt(
  'Hello!', 'aes-256-cbc',
  '1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF',
  0,
  '1234567890ABCDEF1234567890ABCDEF'
); // =&gt; 'BAd5fmmMTvRE4Ohvf3GpCw=='
</code></pre>

<pre class=""lang-ruby prettyprint-override""><code>ruby_cipher = SymmetricEncryption::Cipher.new(
  key: ""1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF"",
  iv: ""1234567890ABCDEF1234567890ABCDEF"",
  cipher_name: 'aes-256-cbc'
)
ruby_cipher.encrypt(""Hello!"") # =&gt; 'BAd5fmmMTvRE4Ohvf3GpCw=='
</code></pre>

<p>But according to <a href=""https://stackoverflow.com/a/40048318/1413388"">this answer</a> the above key/iv only provide 128 bit security.</p>

<blockquote>
  <p>PHP and Ruby take the key and IV as a binary string. They don't assume that it is Hex-encoded. So, although this key has 256 bits in it, the security is actually only 128 bits, because each character has only 4 bit in a Hex-encoded string.</p>
</blockquote>

<p>So using only half of the key/iv provides the same encryption result in <a href=""https://code.google.com/archive/p/crypto-js/wikis/QuickStartGuide_v3beta.wiki"" rel=""nofollow noreferrer"">CryptoJS</a>.</p>

<pre class=""lang-js prettyprint-override""><code>CryptoJS.AES.encrypt(
    ""Hello!"",
    CryptoJS.enc.Utf8.parse('1234567890ABCDEF1234567890ABCDEF'),
    iv: CryptoJS.enc.Utf8.parse('1234567890ABCDEF')
).toString() // 'BAd5fmmMTvRE4Ohvf3GpCw=='
</code></pre>

<p>How do I generate string key and iv's that provide 256 bit security?</p>
","<p>You use a key generator, and if not available, a random number generator to generate a key of the correct size, in this case 32 bytes. You can feed that to the cipher implementation. Then, if you need hexadecimals then you can <em>convert</em> or <em>encode</em> them explicitly to hexadecimals after.</p>

<p>Of course, to decrypt (or encrypt again) you'd first have to <em>decode</em> or <em>parse</em> the hexadecimal string back to the actual binary key.</p>

<p>Basically you'd use the hexadecimals to <em>represent</em> the bytes or octets, but you never use the hexadecimals directly.</p>

<hr>

<p>Note that usually hexadecimal strings are not used. I'd only use them to test code. In general keys are put in (PKCS#12) key stores, or they are generated by a key derivation method. Hexadecimals are generally only needed for human consumption and this is generally not required. One reason not to encode to hexadecimals is that strings are sometimes hard to remove from memory, so it may well be that the hexadecimal key remains in memory after use.</p>
","3087","<encryption><hex><aes><encryption-symmetric>","0","1","1","2016-10-14 22:26:36","40052854","2","1","-1","","2017-05-23 12:33:18","2016-10-14 19:28:13",""
"11017462","How can I encrypt a string in Java to be the exact same as it is encrypted in ColdFusion?","<p>I have data encrypted in ColdFusion that I need to be able to decrypt and encrypt to the same exact value using Java.  I was hoping someone may be able to help me with this.  I will specify everything used in ColdFusion except for the actual PasswordKey, which I must keep secret for security purposes.  The PasswordKey is 23 characters long.  It uses upper and lowercase letters, numbers, and the + and = signs.  I know this is a lot to ask, but any help would be greatly appreciated.</p>

<p>I tried using a Java encryption example I found <a href=""http://www.digizol.com/2009/10/java-encrypt-decrypt-jce-salt.html"" rel=""nofollow"">online</a> and just replacing the line below with the 23 characters used in our CF app:</p>

<pre><code>private static final byte[] keyValue = new byte[] {'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };` 
</code></pre>

<p>But I get the error: </p>

<pre><code>java.security.InvalidKeyException: Invalid AES key length: 23 bytes
</code></pre>

<p>The CF code is:</p>

<pre><code>Application.PasswordKey = ""***********************"";
Application.Algorithm = ""AES"";
Application.Encoding = ""hex"";

&lt;cffunction name=""encryptValue"" access=""public"" returntype=""string""&gt;
        &lt;cfargument name=""strEncryptThis"" required=""yes""&gt;

        &lt;cfreturn Encrypt(TRIM(strEncryptThis), Application.PasswordKey, Application.Algorithm, Application.Encoding)&gt;
&lt;/cffunction&gt;


&lt;cffunction name=""decryptValue"" access=""public"" returntype=""string""&gt;
    &lt;cfargument name=""strDecryptThis"" required=""yes""&gt;

    &lt;cfreturn Decrypt(TRIM(strDecryptThis), Application.PasswordKey, Application.Algorithm, Application.Encoding)&gt;
&lt;/cffunction&gt;
</code></pre>
","<p>AES Encryption only supports a key-size of 128 bits, 192 bits or 256 bits.</p>

<p><a href=""http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""nofollow"">http://en.wikipedia.org/wiki/Advanced_Encryption_Standard</a></p>

<p>You can't just take any byte array and use it as an AES key. In the sample code you see above, the example cleverly used 16 characters, which corresponds to a 128-bit key.</p>

<p>This is because 1 character or rather 1 byte corresponds to 8 bits.</p>

<p>A 16-value byte array will then correspond to <code>16 * 8 = 128 bits</code></p>

<p>23 characters = <code>23 * 8 = 184 bits</code>, thus it is an invalid key-size.</p>

<p>You need either 16 characters, 24 characters, or 32 characters.</p>

<p>That being said, using merely characters for AES encryption is extremely insecure. Do use a proper and secure random key for encrypt purposes.</p>

<p>To generate a secure and random AES key:</p>

<pre><code>SecureRandom random = new SecureRandom();
byte [] secret = new byte[16];
random.nextBytes(secret);
</code></pre>

<p><a href=""http://docs.oracle.com/javase/6/docs/api/java/security/SecureRandom.html"" rel=""nofollow"">http://docs.oracle.com/javase/6/docs/api/java/security/SecureRandom.html</a></p>
","3051","<java><coldfusion><encryption-symmetric>","4","0","4","2013-11-03 08:19:32","11019829","1","3","2581128","","2013-11-03 08:19:32","2012-06-13 14:46:56",""
"11017462","How can I encrypt a string in Java to be the exact same as it is encrypted in ColdFusion?","<p>I have data encrypted in ColdFusion that I need to be able to decrypt and encrypt to the same exact value using Java.  I was hoping someone may be able to help me with this.  I will specify everything used in ColdFusion except for the actual PasswordKey, which I must keep secret for security purposes.  The PasswordKey is 23 characters long.  It uses upper and lowercase letters, numbers, and the + and = signs.  I know this is a lot to ask, but any help would be greatly appreciated.</p>

<p>I tried using a Java encryption example I found <a href=""http://www.digizol.com/2009/10/java-encrypt-decrypt-jce-salt.html"" rel=""nofollow"">online</a> and just replacing the line below with the 23 characters used in our CF app:</p>

<pre><code>private static final byte[] keyValue = new byte[] {'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };` 
</code></pre>

<p>But I get the error: </p>

<pre><code>java.security.InvalidKeyException: Invalid AES key length: 23 bytes
</code></pre>

<p>The CF code is:</p>

<pre><code>Application.PasswordKey = ""***********************"";
Application.Algorithm = ""AES"";
Application.Encoding = ""hex"";

&lt;cffunction name=""encryptValue"" access=""public"" returntype=""string""&gt;
        &lt;cfargument name=""strEncryptThis"" required=""yes""&gt;

        &lt;cfreturn Encrypt(TRIM(strEncryptThis), Application.PasswordKey, Application.Algorithm, Application.Encoding)&gt;
&lt;/cffunction&gt;


&lt;cffunction name=""decryptValue"" access=""public"" returntype=""string""&gt;
    &lt;cfargument name=""strDecryptThis"" required=""yes""&gt;

    &lt;cfreturn Decrypt(TRIM(strDecryptThis), Application.PasswordKey, Application.Algorithm, Application.Encoding)&gt;
&lt;/cffunction&gt;
</code></pre>
","<p>Your secret key is most likely a Base64 encoded key (23 chars should decode to about 16 bytes, which is the right length for a 128 bit key for AES).</p>

<p>So, in your java code, first run your secret key string through a Base64 decoder to get a byte[] of the appropriate length (16 bytes) for the AES algorithm.</p>
","3051","<java><coldfusion><encryption-symmetric>","4","2","4","2013-11-03 08:19:32","11019829","1","3","2581128","","2013-11-03 08:19:32","2012-06-13 14:46:56",""
"11017462","How can I encrypt a string in Java to be the exact same as it is encrypted in ColdFusion?","<p>I have data encrypted in ColdFusion that I need to be able to decrypt and encrypt to the same exact value using Java.  I was hoping someone may be able to help me with this.  I will specify everything used in ColdFusion except for the actual PasswordKey, which I must keep secret for security purposes.  The PasswordKey is 23 characters long.  It uses upper and lowercase letters, numbers, and the + and = signs.  I know this is a lot to ask, but any help would be greatly appreciated.</p>

<p>I tried using a Java encryption example I found <a href=""http://www.digizol.com/2009/10/java-encrypt-decrypt-jce-salt.html"" rel=""nofollow"">online</a> and just replacing the line below with the 23 characters used in our CF app:</p>

<pre><code>private static final byte[] keyValue = new byte[] {'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };` 
</code></pre>

<p>But I get the error: </p>

<pre><code>java.security.InvalidKeyException: Invalid AES key length: 23 bytes
</code></pre>

<p>The CF code is:</p>

<pre><code>Application.PasswordKey = ""***********************"";
Application.Algorithm = ""AES"";
Application.Encoding = ""hex"";

&lt;cffunction name=""encryptValue"" access=""public"" returntype=""string""&gt;
        &lt;cfargument name=""strEncryptThis"" required=""yes""&gt;

        &lt;cfreturn Encrypt(TRIM(strEncryptThis), Application.PasswordKey, Application.Algorithm, Application.Encoding)&gt;
&lt;/cffunction&gt;


&lt;cffunction name=""decryptValue"" access=""public"" returntype=""string""&gt;
    &lt;cfargument name=""strDecryptThis"" required=""yes""&gt;

    &lt;cfreturn Decrypt(TRIM(strDecryptThis), Application.PasswordKey, Application.Algorithm, Application.Encoding)&gt;
&lt;/cffunction&gt;
</code></pre>
","<p>128 but AES Encryption supports key key size of 16 bytes.  <br>
16 * 8 = 128 bits, even in the example the key is 16 bytes.</p>

<p>Sounds like your key is in Base64 so use Base64.decode(key or key.getBytes()) to get the byte array, check its in 16 bytes otherwise make it 16 bytes by padding.</p>
","3051","<java><coldfusion><encryption-symmetric>","4","2","4","2013-11-03 08:19:32","11019829","1","3","2581128","","2013-11-03 08:19:32","2012-06-13 14:46:56",""
"11017462","How can I encrypt a string in Java to be the exact same as it is encrypted in ColdFusion?","<p>I have data encrypted in ColdFusion that I need to be able to decrypt and encrypt to the same exact value using Java.  I was hoping someone may be able to help me with this.  I will specify everything used in ColdFusion except for the actual PasswordKey, which I must keep secret for security purposes.  The PasswordKey is 23 characters long.  It uses upper and lowercase letters, numbers, and the + and = signs.  I know this is a lot to ask, but any help would be greatly appreciated.</p>

<p>I tried using a Java encryption example I found <a href=""http://www.digizol.com/2009/10/java-encrypt-decrypt-jce-salt.html"" rel=""nofollow"">online</a> and just replacing the line below with the 23 characters used in our CF app:</p>

<pre><code>private static final byte[] keyValue = new byte[] {'T', 'h', 'i', 's', 'I', 's', 'A', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y' };` 
</code></pre>

<p>But I get the error: </p>

<pre><code>java.security.InvalidKeyException: Invalid AES key length: 23 bytes
</code></pre>

<p>The CF code is:</p>

<pre><code>Application.PasswordKey = ""***********************"";
Application.Algorithm = ""AES"";
Application.Encoding = ""hex"";

&lt;cffunction name=""encryptValue"" access=""public"" returntype=""string""&gt;
        &lt;cfargument name=""strEncryptThis"" required=""yes""&gt;

        &lt;cfreturn Encrypt(TRIM(strEncryptThis), Application.PasswordKey, Application.Algorithm, Application.Encoding)&gt;
&lt;/cffunction&gt;


&lt;cffunction name=""decryptValue"" access=""public"" returntype=""string""&gt;
    &lt;cfargument name=""strDecryptThis"" required=""yes""&gt;

    &lt;cfreturn Decrypt(TRIM(strDecryptThis), Application.PasswordKey, Application.Algorithm, Application.Encoding)&gt;
&lt;/cffunction&gt;
</code></pre>
","<p>Thank you everyone for your help.  I wanted to post my final solution for others to use.  I am including my entire encryption package code minus the specific password key (again for security).  This code creates the same hex string as the CF code listed in the question, and decrypts it back to the proper english text string.</p>

<p>I found the <code>bytesToHex</code> and  <code>hexStringToByteArray</code> functions in other question on stackoverflow, so my thanks to users maybeWeCouldStealAVan and Dave L. respectively also.  I think I will look into other base 64 encoders/decoders in case the one from sun is ever made unavailable, but this definitely works for now.  Thanks again.</p>

<pre><code>package encryptionpackage;

import java.security.*;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.Cipher; 
import javax.crypto.spec.SecretKeySpec;
import sun.misc.*;

public class encryption 
{
    // Note: The full CF default is ""AES/ECB/PKCS5Padding""
    private static final String ALGORITHM = ""AES"";
    // The 24 character key from my CF app (base64 encoded)
    // typically generated with:  generateSecretKey(""AES"") 
    private static final String passKey = ""***********************""; 

     public static String encrypt(String valueToEnc) throws Exception 
     {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGORITHM);
        c.init(Cipher.ENCRYPT_MODE, key);
        byte[] encValue = c.doFinal(valueToEnc.getBytes());
        String encryptedValue = bytesToHex(encValue);
        return encryptedValue;
    }

    public static String decrypt(String encryptedValue) throws Exception 
    {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGORITHM);
        c.init(Cipher.DECRYPT_MODE, key);
        byte[] decordedValue = hexStringToByteArray(encryptedValue);
        byte[] decValue = c.doFinal(decordedValue);
        String decryptedValue = new String(decValue);
        return decryptedValue;
    }

    private static Key generateKey() throws Exception 
    {
          byte[] keyValue;
          keyValue = new BASE64Decoder().decodeBuffer(passKey);
        Key key = new SecretKeySpec(keyValue, ALGORITHM);

        return key;
    }

    public static String bytesToHex(byte[] bytes) 
    { 
        final char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}; 
        char[] hexChars = new char[bytes.length * 2]; 
        int v; 
        for ( int j = 0; j &lt; bytes.length; j++ ) 
        { 
            v = bytes[j] &amp; 0xFF; 
            hexChars[j * 2] = hexArray[v &gt;&gt;&gt; 4]; 
            hexChars[j * 2 + 1] = hexArray[v &amp; 0x0F]; 
        } 
        return new String(hexChars); 
    } 

    public static byte[] hexStringToByteArray(String s) 
    { 
        int len = s.length(); 
        byte[] data = new byte[len / 2]; 
        for (int i = 0; i &lt; len; i += 2) 
        { 
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) &lt;&lt; 4) 
                                 + Character.digit(s.charAt(i+1), 16)); 
        } 
        return data; 
    } 

}
</code></pre>
","3051","<java><coldfusion><encryption-symmetric>","4","1","4","2013-11-03 08:19:32","11019829","1","3","2581128","","2013-11-03 08:19:32","2012-06-13 14:46:56",""
"939687","Symmetric encryption key vs. Asymmetric keys - ssl","<p>I am developing a client server app that uses ssl (openssl) to establish a secure communication channel between the client and the server. I believe I have two options now for secure data transfer between the client and the server. One option is to continue with the data transfer on the established secure ssl channel between the client and the server even though the encryption/decryption process will be slow because of the use of asymmetric keys. The other option is to transfer a symmetric key on the ssl channel and close the ssl channel once the symmetric key is delivered to the client. Communication thereafter will happen on a regular TCP channel using the symmetric key which I believe will be much faster than using asymmetric keys. Are there any downsides to this approach? One thing that is obvious with the symmetric key approach is the process of key management which I am thinking of handling by not storing the keys on the client at all. Symmetric key will be delivered to the client on start up over an SSL channel. Key will NOT be stored in the client at all. Any thoughts?</p>
","<p>You are mixing things up. Ssl uses an asymetric key (defined in the certificate) to pass a autogenerated symetric key between the client and the server. This symetric key is then used throughout the secure session (the channel).</p>

<p>So basically, you already have a fast symetric encryption when using ssl. The only asymetric encryption takes place at the very beginning of the communication.</p>

<p>Don't try to manage your symetric keys on your own. It will not work.</p>
","3042","<ssl><openssl><encryption-symmetric><encryption-asymmetric>","2","7","3","2017-02-07 23:08:30","939713","0","1","3204551","","2016-02-05 21:42:22","2009-06-02 13:52:12",""
"939687","Symmetric encryption key vs. Asymmetric keys - ssl","<p>I am developing a client server app that uses ssl (openssl) to establish a secure communication channel between the client and the server. I believe I have two options now for secure data transfer between the client and the server. One option is to continue with the data transfer on the established secure ssl channel between the client and the server even though the encryption/decryption process will be slow because of the use of asymmetric keys. The other option is to transfer a symmetric key on the ssl channel and close the ssl channel once the symmetric key is delivered to the client. Communication thereafter will happen on a regular TCP channel using the symmetric key which I believe will be much faster than using asymmetric keys. Are there any downsides to this approach? One thing that is obvious with the symmetric key approach is the process of key management which I am thinking of handling by not storing the keys on the client at all. Symmetric key will be delivered to the client on start up over an SSL channel. Key will NOT be stored in the client at all. Any thoughts?</p>
","<p>Keep using the SSL connection because SSL uses a symmetric cypher after the initial phase.</p>
","3042","<ssl><openssl><encryption-symmetric><encryption-asymmetric>","2","3","3","2017-02-07 23:08:30","939713","0","1","3204551","","2016-02-05 21:42:22","2009-06-02 13:52:12",""
"939687","Symmetric encryption key vs. Asymmetric keys - ssl","<p>I am developing a client server app that uses ssl (openssl) to establish a secure communication channel between the client and the server. I believe I have two options now for secure data transfer between the client and the server. One option is to continue with the data transfer on the established secure ssl channel between the client and the server even though the encryption/decryption process will be slow because of the use of asymmetric keys. The other option is to transfer a symmetric key on the ssl channel and close the ssl channel once the symmetric key is delivered to the client. Communication thereafter will happen on a regular TCP channel using the symmetric key which I believe will be much faster than using asymmetric keys. Are there any downsides to this approach? One thing that is obvious with the symmetric key approach is the process of key management which I am thinking of handling by not storing the keys on the client at all. Symmetric key will be delivered to the client on start up over an SSL channel. Key will NOT be stored in the client at all. Any thoughts?</p>
","<blockquote>
  <p>One option is to continue with the data transfer on the established secure ssl channel between the client and the server even though the encryption/decryption process will be slow because of the use of asymmetric keys.</p>
</blockquote>

<p>No it won't. SSL uses symmetric encryption.</p>

<blockquote>
  <p>The other option is to transfer a symmetric key on the ssl channel and close the ssl channel once the symmetric key is delivered to the client. </p>
</blockquote>

<p>The client and server already have a symmetric encryption key, as soon as the session is estalbished. This would be merely redundant.</p>

<p>There is no problem here to solve.</p>
","3042","<ssl><openssl><encryption-symmetric><encryption-asymmetric>","2","0","3","2017-02-07 23:08:30","939713","0","1","3204551","","2016-02-05 21:42:22","2009-06-02 13:52:12",""
"26234075","File encryption using symmetric key","<p>I'm trying to cipher files using symmetric key. Since I'm not able to o this, I'm doing some tests using the file (.txt) content and ciphering that same content using symmetric key and everything works fine:</p>

<pre><code>filename1 = raw_input(""Insert file name: "")
with open(filename1,'rb') as f:
    s = f.read()

data1 = s


# insert password to create key

password1 = raw_input('Enter password (symmetric key): ')

# generate 16bytes (AES-128) key from inserted password
h1 = SHA256.new()
h1.update(password1)
key1 = h1.digest()[0:16]

# generate initialization 16bytes vector
iv1 = Random.new().read(16)

# criptogram creation (cipher data)
cipher1 = AES.new(key1, AES.MODE_CFB, iv1)
criptogram1 = iv1 + cipher1.encrypt(data1) 
</code></pre>

<p>But, what I need is to use the symmetric key ciphering to cipher files, not just the content like I'm doing at the moment. I need to be able to choose the file and then use the symmetric key in it.</p>

<p>Edit: For ""cipher files, not just the content""? I mean that I can encrypt something inside a .txt file, something written in it, but I want to be able to encrypt 'directly' the file, I don't want to open it and read what is inside and then encrypt that...
The example that I post, I'm entering a file name (e.g. xpto.txt) wich has something written inside (e.g. Hello world!), so in the example I'm just encrypting that content.</p>

<p>I want to get a file encrypted with out have to read what is inside of it. Because if I try to encrypt a picture, I'm not going to read inside it like in a .txt file, I want to get the entire file and encrypt it.</p>
","<p>If I got it right - You are able to encrypt something in current file, but You don't know how to, let's say, run script from ""myfile1.py"" which will encrypt lines from ""myfile2.txt""?</p>

<p>Well just read lines in the first file from the second file with command like:</p>

<pre><code>with open('myfile2.txt') as myfile:
    mytext = myfile.readlines()
</code></pre>

<p>and then do encryption on <code>mytext</code>.</p>
","3007","<python><encryption><sha256><encryption-symmetric>","-2","0","2","2014-10-07 21:20:27","","6","","3970839","","2014-10-07 12:38:51","2014-10-07 10:37:29",""
"26234075","File encryption using symmetric key","<p>I'm trying to cipher files using symmetric key. Since I'm not able to o this, I'm doing some tests using the file (.txt) content and ciphering that same content using symmetric key and everything works fine:</p>

<pre><code>filename1 = raw_input(""Insert file name: "")
with open(filename1,'rb') as f:
    s = f.read()

data1 = s


# insert password to create key

password1 = raw_input('Enter password (symmetric key): ')

# generate 16bytes (AES-128) key from inserted password
h1 = SHA256.new()
h1.update(password1)
key1 = h1.digest()[0:16]

# generate initialization 16bytes vector
iv1 = Random.new().read(16)

# criptogram creation (cipher data)
cipher1 = AES.new(key1, AES.MODE_CFB, iv1)
criptogram1 = iv1 + cipher1.encrypt(data1) 
</code></pre>

<p>But, what I need is to use the symmetric key ciphering to cipher files, not just the content like I'm doing at the moment. I need to be able to choose the file and then use the symmetric key in it.</p>

<p>Edit: For ""cipher files, not just the content""? I mean that I can encrypt something inside a .txt file, something written in it, but I want to be able to encrypt 'directly' the file, I don't want to open it and read what is inside and then encrypt that...
The example that I post, I'm entering a file name (e.g. xpto.txt) wich has something written inside (e.g. Hello world!), so in the example I'm just encrypting that content.</p>

<p>I want to get a file encrypted with out have to read what is inside of it. Because if I try to encrypt a picture, I'm not going to read inside it like in a .txt file, I want to get the entire file and encrypt it.</p>
","<p>After some research I managed to find a solution:</p>

<pre><code>#read binary file to get bytes 
    while True:
        buf = fo.read(1024) #read 1024bytes from the file on each iteration of the loop 
        if len(buf) == 0:
             break

    fo.close()


    # insert password to create key

    password1 = raw_input('Enter password (symmetric key): ')

    # generate 16bytes (AES-128) key from inserted password
    h1 = SHA256.new()
    h1.update(password1)
    key1 = h1.digest()[0:16]

    # generate initialization 16bytes vector
    iv1 = Random.new().read(16)

    # criptogram creation (cipher data)
    cipher1 = AES.new(key1, AES.MODE_CFB, iv1)
    criptogram1 = iv1 + cipher1.encrypt(buf)
</code></pre>
","3007","<python><encryption><sha256><encryption-symmetric>","-2","0","2","2014-10-07 21:20:27","","6","","3970839","","2014-10-07 12:38:51","2014-10-07 10:37:29",""
"37791013","HTTPS uses Asymmetric or Symmetric encryption?","<p>I have searched all this morning but I've found websites where it is said that data is sent through an asymmetric encryption using the TLS protocol
Then I found the contrary
Please can you tell me which is true? Thanks
And does anyone know a guide where it is explained step by step the handshake of tls protocol over https?</p>
","<p>The best answer is that it does both. TLS uses asymmetric encryption to first establish identity of one or both parties. Secondly, it uses asymmetric encryption to exchange a key to a symmetric cipher. So asymmetric is only used during the initial setup of communication.</p>

<p>Symmetric encryption which is used through the rest is faster and more efficient with large amounts of data transfer. The keys are smaller which is generally why it's faster, but it's algorithm is also easier to process.</p>

<p>As far as a guide goes, a simple Google search will give you plenty. The one I found from <a href=""https://www.ibm.com/support/knowledgecenter/SSFKSJ_7.1.0/com.ibm.mq.doc/sy10660_.htm"" rel=""noreferrer"">IBM</a> looks decent. They removed some of the excess detail to make it easier to understand.</p>
","2996","<encryption><https><encryption-symmetric><encryption-asymmetric>","4","8","1","2016-06-13 13:55:31","37791162","2","","","","","2016-06-13 13:25:16",""
"14124936","encrypting with AES CBC Java","<p>I have little problem. When I try to encrypt text and then decrypt this text I get an error:</p>

<blockquote>
  <p>javax.crypto.IllegalBlockSizeException: Input length must be multiple
  of 16 when decrypting with padded cipher</p>
</blockquote>

<p>Here is my code:</p>

<pre><code>import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.ShortBufferException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
/**
 *
 * @author Grzesiek
 */
public class SymmethricCipherCBC {


    /* Klucz: */
    private byte[] keyBytes = new byte[] {
            0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,
            0x00,0x01,0x02,0x03,0x04,0x05
        };

   /* Wektor inicjalizacyjny: */
   private byte[] ivBytes = new byte[] {
            0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,
            0x00,0x01,0x02,0x03,0x04,0x05
        };

   private Cipher cipher;
   private SecretKeySpec keySpec;
   private IvParameterSpec ivSpec;



   public SymmethricCipherCBC() throws NoSuchAlgorithmException, NoSuchPaddingException{
        cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding""); //Utworzenie obiektu dla operacji szyfrowania/deszyfrowania algorytmem AES w trybie CBC.
        keySpec = new SecretKeySpec(keyBytes, ""AES""); // Utworzenie obiektu klucza dla algorytmu AES z tablicy bajtow
        ivSpec = new IvParameterSpec(ivBytes); // // Utworzenie obiektu dla wektora inicjalizacyjnego
   }


   public String encryptText(String plainText) throws NoSuchAlgorithmException, 
                                                    InvalidKeyException, 
                                                    NoSuchPaddingException, 
                                                    InvalidAlgorithmParameterException, 
                                                    ShortBufferException, 
                                                    IllegalBlockSizeException, 
                                                    BadPaddingException,
                                                    UnsupportedEncodingException{

       int cipherTextLength;
       byte[] cipherText; // Bufor dla szyfrogramu

       byte[] plainTextBytes = plainText.getBytes(); // Reprezentacja tekstu jawnego w bajtach

       cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec); //Inicjalizacja obiektu dla operacji szyfrowania z kluczem okreslonym przez keySpec:   

       cipherText = new byte[cipher.getOutputSize(plainTextBytes.length)]; //Utworzenie buforu dla szyfrogramu

       cipherTextLength = cipher.update(plainTextBytes, 0, plainTextBytes.length, cipherText, 0); // Szyfrowanie tekstu jawnego

       cipherTextLength += cipher.doFinal(cipherText, cipherTextLength); //Zakonczenie szyfrowania

       return new BigInteger(1, cipherText).toString(16); // zapisanie 16 

   }


   public String decryptText(String ciptherTextString) throws InvalidKeyException, InvalidAlgorithmParameterException, ShortBufferException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException{

       byte[] cipherTextBytes = ciptherTextString.getBytes();

       cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);  //Inicjalizacja obiektu cipher dla odszyfrowywania z kluczem okreslonym przez keySpec

       byte[] plainTextBytes = new byte[cipher.getOutputSize(cipherTextBytes.length)];  // Utworzenie wyzerowanej tablicy

       int plainTextLength = cipher.update(cipherTextBytes, 0, cipherTextBytes.length, plainTextBytes, 0);
       plainTextLength += cipher.doFinal(plainTextBytes, plainTextLength);

       return new String(plainTextBytes); //Odtworzona wiadomosc
   }
}
</code></pre>

<p>Any ideas what I should do?</p>
","<p>as far as I can tell, you are taking the byte array output from the encryption algorithm, and converting it to a hex string using BigInteger.  then the decryption algorithm takes the hex string and converts it to the byte representation of the ASCII characters in the hex string using <code>.toString()</code>  </p>

<p>This is where your code is wrong (among other places).  rather than turning, say, the hex string output ""FFFF"" into a byte array <code>[0xff, 0xff]</code> it turns it into the byte array <code>[0x46,0x46,0x46,0x46]</code> (e.g. the ASCII byte representation of the upper case F).  This means that not only will all of the bytes in your conversion be wrong, the byte array will be the wrong length (which causes the exception you listed in your question).</p>

<p>Instead, you should return <code>byte[]</code> from your encryption method, and accept <code>byte[]</code> as a parameter in your decryption method.  failing that, you should use something like Apache Commons Codec's <a href=""http://commons.apache.org/codec/apidocs/org/apache/commons/codec/binary/Hex.html"" rel=""nofollow"">Hex</a> class to reliably convert between byte arrays and hex strings.</p>
","2929","<java><aes><encryption><encryption-symmetric>","3","0","2","2013-01-03 23:04:43","14148712","4","3","","","","2013-01-02 15:50:34",""
"14124936","encrypting with AES CBC Java","<p>I have little problem. When I try to encrypt text and then decrypt this text I get an error:</p>

<blockquote>
  <p>javax.crypto.IllegalBlockSizeException: Input length must be multiple
  of 16 when decrypting with padded cipher</p>
</blockquote>

<p>Here is my code:</p>

<pre><code>import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.ShortBufferException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
/**
 *
 * @author Grzesiek
 */
public class SymmethricCipherCBC {


    /* Klucz: */
    private byte[] keyBytes = new byte[] {
            0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,
            0x00,0x01,0x02,0x03,0x04,0x05
        };

   /* Wektor inicjalizacyjny: */
   private byte[] ivBytes = new byte[] {
            0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,
            0x00,0x01,0x02,0x03,0x04,0x05
        };

   private Cipher cipher;
   private SecretKeySpec keySpec;
   private IvParameterSpec ivSpec;



   public SymmethricCipherCBC() throws NoSuchAlgorithmException, NoSuchPaddingException{
        cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding""); //Utworzenie obiektu dla operacji szyfrowania/deszyfrowania algorytmem AES w trybie CBC.
        keySpec = new SecretKeySpec(keyBytes, ""AES""); // Utworzenie obiektu klucza dla algorytmu AES z tablicy bajtow
        ivSpec = new IvParameterSpec(ivBytes); // // Utworzenie obiektu dla wektora inicjalizacyjnego
   }


   public String encryptText(String plainText) throws NoSuchAlgorithmException, 
                                                    InvalidKeyException, 
                                                    NoSuchPaddingException, 
                                                    InvalidAlgorithmParameterException, 
                                                    ShortBufferException, 
                                                    IllegalBlockSizeException, 
                                                    BadPaddingException,
                                                    UnsupportedEncodingException{

       int cipherTextLength;
       byte[] cipherText; // Bufor dla szyfrogramu

       byte[] plainTextBytes = plainText.getBytes(); // Reprezentacja tekstu jawnego w bajtach

       cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec); //Inicjalizacja obiektu dla operacji szyfrowania z kluczem okreslonym przez keySpec:   

       cipherText = new byte[cipher.getOutputSize(plainTextBytes.length)]; //Utworzenie buforu dla szyfrogramu

       cipherTextLength = cipher.update(plainTextBytes, 0, plainTextBytes.length, cipherText, 0); // Szyfrowanie tekstu jawnego

       cipherTextLength += cipher.doFinal(cipherText, cipherTextLength); //Zakonczenie szyfrowania

       return new BigInteger(1, cipherText).toString(16); // zapisanie 16 

   }


   public String decryptText(String ciptherTextString) throws InvalidKeyException, InvalidAlgorithmParameterException, ShortBufferException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException{

       byte[] cipherTextBytes = ciptherTextString.getBytes();

       cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);  //Inicjalizacja obiektu cipher dla odszyfrowywania z kluczem okreslonym przez keySpec

       byte[] plainTextBytes = new byte[cipher.getOutputSize(cipherTextBytes.length)];  // Utworzenie wyzerowanej tablicy

       int plainTextLength = cipher.update(cipherTextBytes, 0, cipherTextBytes.length, plainTextBytes, 0);
       plainTextLength += cipher.doFinal(plainTextBytes, plainTextLength);

       return new String(plainTextBytes); //Odtworzona wiadomosc
   }
}
</code></pre>

<p>Any ideas what I should do?</p>
","<p>You're doing it harder than necessary, and you're encrypting your cipher text when doing </p>

<pre><code>cipher.doFinal(cipherText, cipherTextLength);
</code></pre>

<p>I would rewrite it as is:</p>

<pre><code>public String encryptText(String plainText) throws ... {
    byte[] plainTextBytes = plainText.getBytes(""UTF8"");
    cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec); 
    byte[] encrypted = cipher.doFinal(plainTextBytes);
    return toHex(encrypted);
}

public String decryptText(String cipherTextString) throws ... {
    byte[] cipherTextBytes = fromHex(cipherTextString);
    cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);
    byte[] plainTextBytes = cipher.doFinal(cipherTextBytes);
    return new String(plainTextBytes, ""UTF8"");
}
</code></pre>
","2929","<java><aes><encryption><encryption-symmetric>","3","4","2","2013-01-03 23:04:43","14148712","4","3","","","","2013-01-02 15:50:34",""
"3811302","Is this a secure encryption method","<p>I'm writing an application for Android that uses symmetric key encryption to protect sensitive data. As far as I can tell, Android only directly supports ""PBEWithMD5AndDES"". How secure is this algorithm? Also, I've included my code below (non-andriod). Is my code correctly encrypting the data?</p>

<pre><code>import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.InvalidParameterSpecException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class CipherTest
{

    private static class EncryptInfo
    {

        private final byte[] encryptedData;
        private final byte[] initVector;
        private final byte[] salt;

        public EncryptInfo(byte[] encryptedData, byte[] initVector, byte[] salt)
        {
            this.encryptedData = encryptedData.clone();
            this.initVector = initVector.clone();
            this.salt = salt.clone();
        }

        public byte[] getEncryptedData()
        {
            return encryptedData;
        }

        public byte[] getInitVector()
        {
            return initVector;
        }

        public byte[] getSalt()
        {
            return salt;
        }

    }

    private static final String keyGenAlgorithm = ""PBEWithMD5AndDES"";
    private static final String keyAlgorithm = ""DES"";
    private static final String cipherTransform = ""PBEWithMD5AndDES/CBC/PKCS5Padding"";

    private static EncryptInfo encrypt(char[] password, byte[] data)
            throws NoSuchAlgorithmException, InvalidKeySpecException,
            NoSuchPaddingException, InvalidKeyException,
            InvalidParameterSpecException, IllegalBlockSizeException,
            BadPaddingException, UnsupportedEncodingException
    {

        byte[] salt = new byte[16];
        new SecureRandom().nextBytes(salt);

        PBEKeySpec keySpec = new PBEKeySpec(password, salt, 1024);

        SecretKeyFactory secretKeyFactory = SecretKeyFactory
                .getInstance(keyGenAlgorithm);
        SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
        keySpec.clearPassword();
        byte[] key = secretKey.getEncoded();
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, keyAlgorithm);
        Cipher cipher = Cipher.getInstance(cipherTransform);
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);

        byte[] initVector = cipher.getParameters().getParameterSpec(
                IvParameterSpec.class).getIV();

        return new EncryptInfo(cipher.doFinal(data), initVector, salt);
    }

    public static byte[] decrypt(byte[] data, char[] password, byte[] salt,
            byte[] initVector) throws NoSuchAlgorithmException,
            InvalidKeySpecException, NoSuchPaddingException,
            InvalidKeyException, InvalidAlgorithmParameterException,
            IllegalBlockSizeException, BadPaddingException
    {
        PBEKeySpec keySpec = new PBEKeySpec(password, salt, 1024);

        SecretKeyFactory secretKeyFactory = SecretKeyFactory
                .getInstance(keyGenAlgorithm);
        SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
        keySpec.clearPassword();
        byte[] key = secretKey.getEncoded();
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, keyAlgorithm);
        Cipher cipher = Cipher.getInstance(cipherTransform);
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, new IvParameterSpec(
                initVector));
        return cipher.doFinal(data);
    }

    public static void main(String[] args) throws Exception
    {
        char[] password = ""password"".toCharArray();

        EncryptInfo info = encrypt(password, ""Message"".getBytes());

        byte[] decyptedText = decrypt(info.getEncryptedData(), password, info
                .getSalt(), info.getInitVector());

        System.out.println(new String(decyptedText));

    }
}
</code></pre>
","<p>Both MD5 and DES are weak. If your data being encrypted is really valuable, you should look for some external crypto library for Android that offers AES and SHA256/SHA512 algorithms.</p>
","2909","<java><android><security><encryption><encryption-symmetric>","3","4","2","2011-09-13 04:37:40","3811561","1","3","","","","2010-09-28 09:19:19",""
"3811302","Is this a secure encryption method","<p>I'm writing an application for Android that uses symmetric key encryption to protect sensitive data. As far as I can tell, Android only directly supports ""PBEWithMD5AndDES"". How secure is this algorithm? Also, I've included my code below (non-andriod). Is my code correctly encrypting the data?</p>

<pre><code>import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.InvalidParameterSpecException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class CipherTest
{

    private static class EncryptInfo
    {

        private final byte[] encryptedData;
        private final byte[] initVector;
        private final byte[] salt;

        public EncryptInfo(byte[] encryptedData, byte[] initVector, byte[] salt)
        {
            this.encryptedData = encryptedData.clone();
            this.initVector = initVector.clone();
            this.salt = salt.clone();
        }

        public byte[] getEncryptedData()
        {
            return encryptedData;
        }

        public byte[] getInitVector()
        {
            return initVector;
        }

        public byte[] getSalt()
        {
            return salt;
        }

    }

    private static final String keyGenAlgorithm = ""PBEWithMD5AndDES"";
    private static final String keyAlgorithm = ""DES"";
    private static final String cipherTransform = ""PBEWithMD5AndDES/CBC/PKCS5Padding"";

    private static EncryptInfo encrypt(char[] password, byte[] data)
            throws NoSuchAlgorithmException, InvalidKeySpecException,
            NoSuchPaddingException, InvalidKeyException,
            InvalidParameterSpecException, IllegalBlockSizeException,
            BadPaddingException, UnsupportedEncodingException
    {

        byte[] salt = new byte[16];
        new SecureRandom().nextBytes(salt);

        PBEKeySpec keySpec = new PBEKeySpec(password, salt, 1024);

        SecretKeyFactory secretKeyFactory = SecretKeyFactory
                .getInstance(keyGenAlgorithm);
        SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
        keySpec.clearPassword();
        byte[] key = secretKey.getEncoded();
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, keyAlgorithm);
        Cipher cipher = Cipher.getInstance(cipherTransform);
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);

        byte[] initVector = cipher.getParameters().getParameterSpec(
                IvParameterSpec.class).getIV();

        return new EncryptInfo(cipher.doFinal(data), initVector, salt);
    }

    public static byte[] decrypt(byte[] data, char[] password, byte[] salt,
            byte[] initVector) throws NoSuchAlgorithmException,
            InvalidKeySpecException, NoSuchPaddingException,
            InvalidKeyException, InvalidAlgorithmParameterException,
            IllegalBlockSizeException, BadPaddingException
    {
        PBEKeySpec keySpec = new PBEKeySpec(password, salt, 1024);

        SecretKeyFactory secretKeyFactory = SecretKeyFactory
                .getInstance(keyGenAlgorithm);
        SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
        keySpec.clearPassword();
        byte[] key = secretKey.getEncoded();
        SecretKeySpec secretKeySpec = new SecretKeySpec(key, keyAlgorithm);
        Cipher cipher = Cipher.getInstance(cipherTransform);
        cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, new IvParameterSpec(
                initVector));
        return cipher.doFinal(data);
    }

    public static void main(String[] args) throws Exception
    {
        char[] password = ""password"".toCharArray();

        EncryptInfo info = encrypt(password, ""Message"".getBytes());

        byte[] decyptedText = decrypt(info.getEncryptedData(), password, info
                .getSalt(), info.getInitVector());

        System.out.println(new String(decyptedText));

    }
}
</code></pre>
","<p>If you want to encrypt data using a symmetric key encryption, I recommend:<br>
1) Use AES, because it is certified by the NSA for data classified as secret.<br>
2) Use a well reviewed implementation so you don't have to research the proper way to configure the code. For example, AESCrypt.</p>

<p>You can find AESCrypt here: <a href=""http://www.aescrypt.com/java_aes_crypt.html"" rel=""nofollow"">http://www.aescrypt.com/java_aes_crypt.html</a> </p>

<p>I've seen AESCrypt used in several financial institutions. AESCrypt for java is a single class that calls JCE methods. Android, JCE is implemented by bouncycastle. I have seen bouncycastle used in several major financial institutions.</p>
","2909","<java><android><security><encryption><encryption-symmetric>","3","1","2","2011-09-13 04:37:40","3811561","1","3","","","","2010-09-28 09:19:19",""
"10578106","How to avoid AESManaged (C#) ""Length of the data to decrypt is invalid.""","<p>I am using ""AesManaged"" for encryption and decryption of protected data in web application. in my scenario, i am creating a token based on ""Email + CurrentDate"" when user login, and send it in encrypted format back to the user(Encryption is done using AESManaged class), and when user invokes next server side method for example ""Show Report"", the user/client applicaiton will also send that encrypted token with the request. At server side i decrypt the token, and after peforming conditional logic based on decrypted token, it is decided whether the given user have access to this method or not(a kind of authorization check). </p>

<p>It is behaving fine(as expected) for basic flow with user providing the correct encrypted string which he gets from server or it is of same lenght but user replaces characters in the encrypted string.</p>

<p>However, the problem arises, when user get a string of (for example) 54 character but send only 7 character to server. then following exception occurs.</p>

<p>I want to avoid this exception even if the user provides invalid data. so, basically string should always be decrypted, and if it is invalid token, then i can restrict access to the resource. how can I achieve this? your answer will be appreciated.</p>

<p><strong>Exception Details:</strong></p>

<p>Specific code block where exception occur.</p>

<pre><code> // Create the streams used for decryption.
                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                        {
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }
</code></pre>

<p>Exception:  ""Length of the data to decrypt is invalid.""</p>

<p><strong>Exception Details:</strong></p>

<p>Target Site:    {Byte[] TransformFinalBlock(Byte[], Int32, Int32)}</p>

<p>Declaring Type: {Name = ""RijndaelManagedTransform"" FullName = ""System.Security.Cryptography.RijndaelManagedTransform""}</p>

<p><strong>Name:</strong>   TransformFinalBlock</p>

<p><strong>Note:</strong> i am providing same key and iv for both encryption and decryption method.</p>

<p>Code:</p>

<pre><code>public string EncryptAuthenticationTokenAes(string plainText, byte[] Key, byte[] IV)
        {


            byte[] encrypted;
            // Create an AesManaged object
            // with the specified key and IV.
            using (AesManaged aesAlg = new AesManaged())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;


                // Create a decrytor to perform the stream transform.
                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

                // Create the streams used for encryption.
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {

                            //Write all data to the stream.
                            swEncrypt.Write(plainText);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }
            // Return the encrypted bytes from the memory stream.
            return Convert.ToBase64String(encrypted);

        }

        public string DecryptPasswordAes(string encryptedString, byte[] Key, byte[] IV)
        {
            // becuase it is base64, if mod4&gt;0 then it is consider as invalid token
            int mod4 = encryptedString.Length % 4;
            if (mod4 &gt; 0)
            {
                return string.Empty;
            }
            byte[] cipherText = Convert.FromBase64String(encryptedString);
            // Declare the string used to hold
            // the decrypted text.
            string plaintext = null;

            // Create an AesManaged object
            // with the specified key and IV.
            using (AesManaged aesAlg = new AesManaged())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;

                // Create a decrytor to perform the stream transform.
                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

                // Create the streams used for decryption.
                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                        {
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }

            }

            return plaintext;
        }
</code></pre>
","<p>It's telling you that there's no way for it to take those 7 characters and perform <em>any</em> meaningful transformation on them - it <em>cannot</em> perform any kind of decryption using them.</p>

<p>Either perform a length check before attempting decryption, or catch the exception; And in either case, just go down the route of your ""an invalid token was received"" logic.</p>
","2907","<c#><c#-4.0><encryption><encryption-symmetric>","0","1","3","2012-05-27 10:49:28","10578887","0","1","","","","2012-05-14 05:59:56",""
"10578106","How to avoid AESManaged (C#) ""Length of the data to decrypt is invalid.""","<p>I am using ""AesManaged"" for encryption and decryption of protected data in web application. in my scenario, i am creating a token based on ""Email + CurrentDate"" when user login, and send it in encrypted format back to the user(Encryption is done using AESManaged class), and when user invokes next server side method for example ""Show Report"", the user/client applicaiton will also send that encrypted token with the request. At server side i decrypt the token, and after peforming conditional logic based on decrypted token, it is decided whether the given user have access to this method or not(a kind of authorization check). </p>

<p>It is behaving fine(as expected) for basic flow with user providing the correct encrypted string which he gets from server or it is of same lenght but user replaces characters in the encrypted string.</p>

<p>However, the problem arises, when user get a string of (for example) 54 character but send only 7 character to server. then following exception occurs.</p>

<p>I want to avoid this exception even if the user provides invalid data. so, basically string should always be decrypted, and if it is invalid token, then i can restrict access to the resource. how can I achieve this? your answer will be appreciated.</p>

<p><strong>Exception Details:</strong></p>

<p>Specific code block where exception occur.</p>

<pre><code> // Create the streams used for decryption.
                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                        {
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }
</code></pre>

<p>Exception:  ""Length of the data to decrypt is invalid.""</p>

<p><strong>Exception Details:</strong></p>

<p>Target Site:    {Byte[] TransformFinalBlock(Byte[], Int32, Int32)}</p>

<p>Declaring Type: {Name = ""RijndaelManagedTransform"" FullName = ""System.Security.Cryptography.RijndaelManagedTransform""}</p>

<p><strong>Name:</strong>   TransformFinalBlock</p>

<p><strong>Note:</strong> i am providing same key and iv for both encryption and decryption method.</p>

<p>Code:</p>

<pre><code>public string EncryptAuthenticationTokenAes(string plainText, byte[] Key, byte[] IV)
        {


            byte[] encrypted;
            // Create an AesManaged object
            // with the specified key and IV.
            using (AesManaged aesAlg = new AesManaged())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;


                // Create a decrytor to perform the stream transform.
                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

                // Create the streams used for encryption.
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {

                            //Write all data to the stream.
                            swEncrypt.Write(plainText);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }
            // Return the encrypted bytes from the memory stream.
            return Convert.ToBase64String(encrypted);

        }

        public string DecryptPasswordAes(string encryptedString, byte[] Key, byte[] IV)
        {
            // becuase it is base64, if mod4&gt;0 then it is consider as invalid token
            int mod4 = encryptedString.Length % 4;
            if (mod4 &gt; 0)
            {
                return string.Empty;
            }
            byte[] cipherText = Convert.FromBase64String(encryptedString);
            // Declare the string used to hold
            // the decrypted text.
            string plaintext = null;

            // Create an AesManaged object
            // with the specified key and IV.
            using (AesManaged aesAlg = new AesManaged())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;

                // Create a decrytor to perform the stream transform.
                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

                // Create the streams used for decryption.
                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                        {
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }

            }

            return plaintext;
        }
</code></pre>
","<p>try this</p>

<pre><code>           // Create the streams used for decryption.
            using (MemoryStream msDecrypt = new MemoryStream(cipherText))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {
                        if (encryptedString.Length != aesAlg.BlockSize)
                        {
                            // Handle invalid token here.
                        }
                        plaintext = srDecrypt.ReadToEnd();
                    }
                }
            }
</code></pre>
","2907","<c#><c#-4.0><encryption><encryption-symmetric>","0","0","3","2012-05-27 10:49:28","10578887","0","1","","","","2012-05-14 05:59:56",""
"10578106","How to avoid AESManaged (C#) ""Length of the data to decrypt is invalid.""","<p>I am using ""AesManaged"" for encryption and decryption of protected data in web application. in my scenario, i am creating a token based on ""Email + CurrentDate"" when user login, and send it in encrypted format back to the user(Encryption is done using AESManaged class), and when user invokes next server side method for example ""Show Report"", the user/client applicaiton will also send that encrypted token with the request. At server side i decrypt the token, and after peforming conditional logic based on decrypted token, it is decided whether the given user have access to this method or not(a kind of authorization check). </p>

<p>It is behaving fine(as expected) for basic flow with user providing the correct encrypted string which he gets from server or it is of same lenght but user replaces characters in the encrypted string.</p>

<p>However, the problem arises, when user get a string of (for example) 54 character but send only 7 character to server. then following exception occurs.</p>

<p>I want to avoid this exception even if the user provides invalid data. so, basically string should always be decrypted, and if it is invalid token, then i can restrict access to the resource. how can I achieve this? your answer will be appreciated.</p>

<p><strong>Exception Details:</strong></p>

<p>Specific code block where exception occur.</p>

<pre><code> // Create the streams used for decryption.
                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                        {
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }
</code></pre>

<p>Exception:  ""Length of the data to decrypt is invalid.""</p>

<p><strong>Exception Details:</strong></p>

<p>Target Site:    {Byte[] TransformFinalBlock(Byte[], Int32, Int32)}</p>

<p>Declaring Type: {Name = ""RijndaelManagedTransform"" FullName = ""System.Security.Cryptography.RijndaelManagedTransform""}</p>

<p><strong>Name:</strong>   TransformFinalBlock</p>

<p><strong>Note:</strong> i am providing same key and iv for both encryption and decryption method.</p>

<p>Code:</p>

<pre><code>public string EncryptAuthenticationTokenAes(string plainText, byte[] Key, byte[] IV)
        {


            byte[] encrypted;
            // Create an AesManaged object
            // with the specified key and IV.
            using (AesManaged aesAlg = new AesManaged())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;


                // Create a decrytor to perform the stream transform.
                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

                // Create the streams used for encryption.
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {

                            //Write all data to the stream.
                            swEncrypt.Write(plainText);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }
            // Return the encrypted bytes from the memory stream.
            return Convert.ToBase64String(encrypted);

        }

        public string DecryptPasswordAes(string encryptedString, byte[] Key, byte[] IV)
        {
            // becuase it is base64, if mod4&gt;0 then it is consider as invalid token
            int mod4 = encryptedString.Length % 4;
            if (mod4 &gt; 0)
            {
                return string.Empty;
            }
            byte[] cipherText = Convert.FromBase64String(encryptedString);
            // Declare the string used to hold
            // the decrypted text.
            string plaintext = null;

            // Create an AesManaged object
            // with the specified key and IV.
            using (AesManaged aesAlg = new AesManaged())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;

                // Create a decrytor to perform the stream transform.
                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

                // Create the streams used for decryption.
                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                        {
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }

            }

            return plaintext;
        }
</code></pre>
","<p>Save the length of encrypted string, and then check if length is the same. if yes then proceed to call a decrypt method.</p>
","2907","<c#><c#-4.0><encryption><encryption-symmetric>","0","0","3","2012-05-27 10:49:28","10578887","0","1","","","","2012-05-14 05:59:56",""
"11418236","In AES encryption, does the number of Iterations really add more security?","<p>Im using AES and  a salt String to encrypt my 'passwords', using a java program I made. (It uses AES symmetric encryption)</p>

<p>The user sets the message to be encrypted, the salt, the iterations, and 16 bytes for the key.</p>

<p>If i set it to use a high number of encryption and decryption iterations, say 255, will that really make my password any MORE secure than 1 iteration?</p>
","<p>Yes, more rounds will make the encryption stronger against certain attacks. But you should only store salted, hashed passwords. Don't encrypt them. That way, if someone steals your database they can't decrypt the passwords.</p>
","2856","<java><encryption><aes><encryption-symmetric>","0","0","3","2012-07-10 17:17:53","11418363","1","","1332495","","2012-07-10 17:17:53","2012-07-10 16:59:06",""
"11418236","In AES encryption, does the number of Iterations really add more security?","<p>Im using AES and  a salt String to encrypt my 'passwords', using a java program I made. (It uses AES symmetric encryption)</p>

<p>The user sets the message to be encrypted, the salt, the iterations, and 16 bytes for the key.</p>

<p>If i set it to use a high number of encryption and decryption iterations, say 255, will that really make my password any MORE secure than 1 iteration?</p>
","<p>The short answer is <em>yes</em>.</p>

<p>Think of it like a Rubik's cube (It's not really the best example but bear with me).  The plaintext is the cube in its solved state, the ciphertext its scrambled state.  Each round of encryption is rotating one face of the cube once.  It's computationally much more difficult to solve the cube in the shortest possible number of moves if its more heavily scrambled.  Breaking one round of AES would be the cryptographical equivalent of asking someone to solve a Rubik's cube with one face rotated.</p>

<p>One such attack that can solve reduced rounds of encryptions efficiently is a SAT solver attack.</p>

<p>You should be using one way cryptographic operations for storing passwords anyway.  I believe the preferred method is bcrypting, because it's cryptographically secure (one way) and computationally intensive and thus very difficult to brute force.</p>
","2856","<java><encryption><aes><encryption-symmetric>","0","5","3","2012-07-10 17:17:53","11418363","1","","1332495","","2012-07-10 17:17:53","2012-07-10 16:59:06",""
"11418236","In AES encryption, does the number of Iterations really add more security?","<p>Im using AES and  a salt String to encrypt my 'passwords', using a java program I made. (It uses AES symmetric encryption)</p>

<p>The user sets the message to be encrypted, the salt, the iterations, and 16 bytes for the key.</p>

<p>If i set it to use a high number of encryption and decryption iterations, say 255, will that really make my password any MORE secure than 1 iteration?</p>
","<p>The short answer is no. Adding <em>iterations</em> of encryption does not help. This is different to adding <em>rounds</em> in the underlying algorithm, where more rounds does, in fact, help.</p>

<p>The longer answer is that you are using the wrong technique for storing passwords. You shouldn't be using symmetric encryption, you should be using a one-way hashing function such as bcrypt.</p>

<p>The weakness in your solution (symmetric encryption) is that the encryption key must be available to your software in order to encrypt or decrypt a password. That means that when an attacker breaks in to your system they will be able to obtain both your password database and the key, so it will be trivial for them to then decrypt all the passwords. You should assume that an attacker will be able to obtain your source code as well as all your data.</p>

<p>If you use a hash function then you don't need to worry about this scenario. Even if an attacker obtains your source code and the password database they still cannot reverse the one-way hash (assuming you use a good hash - again, consider bcrypt), so theft of your data does not compromise your users' passwords.</p>

<p>When you are thinking about security it is almost always best to use an existing solution (did I mention bcrypt?) rather than rolling your own. Security is hard to get right, and even the experts screw it up. Don't write your own password storage system. Use one that was designed by the experts and, more importantly, has been analysed and attacked by a legion of <em>other</em> experts. Bcrypt, for example.</p>
","2856","<java><encryption><aes><encryption-symmetric>","0","6","3","2012-07-10 17:17:53","11418363","1","","1332495","","2012-07-10 17:17:53","2012-07-10 16:59:06",""
"17087876","PHP AES 128 bit CBC Encryption gives a size warning","<p>i am using the AES ALgo with 128 bit  with CBC cipher mode encryption, below is the code:</p>

<pre><code>$cc = 'my secret text';
$key = '3aa22e01c04c7059778c54d122b0273689fba00f4a166a66d15f7ba6a8ba8743';
$iv =  '1234567890123456';
$length = strlen($cc);

$cipher = mcrypt_module_open(MCRYPT_RIJNDAEL_128,'','cbc','');

mcrypt_generic_init($cipher, $key, $iv);
$encrypted = base64_encode(mcrypt_generic($cipher,$cc));
mcrypt_generic_deinit($cipher);

mcrypt_generic_init($cipher, $key, $iv);
$decrypted = mdecrypt_generic($cipher,base64_decode($encrypted));
mcrypt_generic_deinit($cipher);

echo ""encrypted: "" . $encrypted;
echo ""\n"";
echo ""decrypted: "" . substr($decrypted, 0, $length) . ""\n"";
</code></pre>

<p>But this gives me a warning with output as :</p>

<blockquote>
  <p>Warning: mcrypt_generic_init(): Key size too large; supplied length:
  64, max: 32 in /var/www/cipher.php on line 10 Warning:
  mcrypt_generic_init(): Key size too large; supplied length: 64, max:
  32 in /var/www/cipher.php on line 14 encrypted:
  vM/XVYSjs/QApdCUEQ8bdQ== decrypted: my secret text</p>
</blockquote>

<p>Now can someone guide me on why I am facing the size issue and how I can eradicate the issue of size without changing the key...</p>
","<p>You are doing 128-bit encryption but your key is 64 hex characters long, which is 265 bits. </p>

<p>Either you need to be doing 256 bit encryption or your key needs to half the size.</p>
","2812","<php><aes><encryption-symmetric><cbc-mode>","0","0","2","2013-07-30 14:25:04","","1","1","","","","2013-06-13 13:08:01",""
"17087876","PHP AES 128 bit CBC Encryption gives a size warning","<p>i am using the AES ALgo with 128 bit  with CBC cipher mode encryption, below is the code:</p>

<pre><code>$cc = 'my secret text';
$key = '3aa22e01c04c7059778c54d122b0273689fba00f4a166a66d15f7ba6a8ba8743';
$iv =  '1234567890123456';
$length = strlen($cc);

$cipher = mcrypt_module_open(MCRYPT_RIJNDAEL_128,'','cbc','');

mcrypt_generic_init($cipher, $key, $iv);
$encrypted = base64_encode(mcrypt_generic($cipher,$cc));
mcrypt_generic_deinit($cipher);

mcrypt_generic_init($cipher, $key, $iv);
$decrypted = mdecrypt_generic($cipher,base64_decode($encrypted));
mcrypt_generic_deinit($cipher);

echo ""encrypted: "" . $encrypted;
echo ""\n"";
echo ""decrypted: "" . substr($decrypted, 0, $length) . ""\n"";
</code></pre>

<p>But this gives me a warning with output as :</p>

<blockquote>
  <p>Warning: mcrypt_generic_init(): Key size too large; supplied length:
  64, max: 32 in /var/www/cipher.php on line 10 Warning:
  mcrypt_generic_init(): Key size too large; supplied length: 64, max:
  32 in /var/www/cipher.php on line 14 encrypted:
  vM/XVYSjs/QApdCUEQ8bdQ== decrypted: my secret text</p>
</blockquote>

<p>Now can someone guide me on why I am facing the size issue and how I can eradicate the issue of size without changing the key...</p>
","<p>I modify your code and it runs fine,
Please, check my changes, ok</p>

<pre><code>$data_to_encrypt = ""2~1~000024~0910~20130723092446~T~00002000~USD~F~375019001012120~0~0~00000000000~"";
$key128 = ""abcdef0123456789abcdef0123456789"";
$iv = ""0000000000000000"";

$cc = $data_to_encrypt;
$key = $key128;
$iv =  $iv;
$length = strlen($cc);

$cipher = mcrypt_module_open(MCRYPT_RIJNDAEL_128,'','cbc','');

mcrypt_generic_init($cipher, $key, $iv);
$encrypted = base64_encode(mcrypt_generic($cipher,$cc));
mcrypt_generic_deinit($cipher);

mcrypt_generic_init($cipher, $key, $iv);
$decrypted = mdecrypt_generic($cipher,base64_decode($encrypted));
mcrypt_generic_deinit($cipher);

echo ""encrypted: "" . $encrypted;
echo ""&lt;br/&gt;"";
echo ""length:"".strlen($encrypted);
echo ""&lt;br/&gt;"";
echo ""decrypted: "" . substr($decrypted, 0, $length);
</code></pre>
","2812","<php><aes><encryption-symmetric><cbc-mode>","0","0","2","2013-07-30 14:25:04","","1","1","","","","2013-06-13 13:08:01",""
"8796764","Objective-C RC4 Decryption","<p>I am new to Objective-C, but am an experienced developer (C#), but I can't figure this out:</p>

<p>I have a string which is RC4 encrypted, and I need to decrypt it using Objective-C on the iPad (iOS 5.0). I have looked all over the net for a working example, but have had no luck finding an example that works end-to-end. Not only does the code below not return the decrypted string correctly, it returns something different every time it executes, which makes me thing a pointer is being released someplace. </p>

<p><strong>Note:</strong> I do not know if it matters, but the string was encrypted using <a href=""http://archive.plugins.jquery.com/project/RC4"" rel=""nofollow noreferrer"">http://archive.plugins.jquery.com/project/RC4</a> and then stored as text in a Sqlite database, which I am now accessing from Objective-C (I know, the architecture sounds messy, but I can't change that at this point.) </p>

<p>The code I am using is (taken from <a href=""https://stackoverflow.com/questions/2235698/rc4-encryption-commoncrypto-objective-c-vs-php"">RC4 encryption - CommonCrypto (Objective-C) vs PHP</a>):</p>

<pre><code>    + (NSString*)decryptData:(NSData*) dataToDecrypt
    {
        const void *vplainText;
        size_t plainTextBufferSize;


        plainTextBufferSize = [dataToDecrypt length];
        vplainText = [dataToDecrypt bytes];

        CCCryptorStatus ccStatus;
        uint8_t *bufferPtr = NULL;
        size_t bufferPtrSize = 0;
        size_t movedBytes = 0;

        bufferPtrSize = (plainTextBufferSize + kCCBlockSize3DES) &amp; ~(kCCBlockSize3DES - 1);
        bufferPtr = malloc( bufferPtrSize * sizeof(uint8_t));
        memset((void *)bufferPtr, 0x0, bufferPtrSize);

        NSString *key = @""theKeyIUsedtoEncryptInTheFirstPlace"";
        const void *vkey = (const void *) [key UTF8String];

        size_t keyLength = [[key dataUsingEncoding:NSUTF8StringEncoding] length]; 
        ccStatus = CCCrypt(kCCDecrypt,
                           kCCAlgorithmRC4,
                           0,
                           vkey,
                           kCCKeySizeDES,
                           nil,
                           vplainText,
                           plainTextBufferSize,
                           (void *)bufferPtr,
                           bufferPtrSize,
                           &amp;movedBytes);
        if (ccStatus == kCCSuccess) NSLog(@""SUCCESS"");
        /*else*/ if (ccStatus == kCCParamError) return @""PARAM ERROR"";
        else if (ccStatus == kCCBufferTooSmall) return @""BUFFER TOO SMALL"";
        else if (ccStatus == kCCMemoryFailure) return @""MEMORY FAILURE"";
        else if (ccStatus == kCCAlignmentError) return @""ALIGNMENT"";
        else if (ccStatus == kCCDecodeError) return @""DECODE ERROR"";
        else if (ccStatus == kCCUnimplemented) return @""UNIMPLEMENTED"";

        NSString *result = [[ NSString alloc ] initWithData: [NSData dataWithBytes:(const void *)bufferPtr length:(NSUInteger)movedBytes] encoding:NSASCIIStringEncoding];
        NSLog(@""%@"", result);
        return result;
    }
</code></pre>
","<p>I see a couple of references to DES in your code (<code>kCCKeySizeDES</code>, <code>kCCBlockSize3DES</code>). That doesn't seem right -- at a minimum, <code>kCCKeySizeDES</code> should probably be replaced with <code>keyLength</code>.</p>

<p>If that doesn't solve it, I'd look next at possible text encoding issues. The data in SQLite might be UTF8-encoded binary data, in which case you'll probably have to ""decode"" it by converting from UTF8 to ISO8859-1.</p>
","2761","<objective-c><ios5><encryption-symmetric><rc4-cipher>","1","1","3","2014-08-26 13:23:44","","0","1","-1","","2017-05-23 12:03:50","2012-01-09 23:42:14",""
"8796764","Objective-C RC4 Decryption","<p>I am new to Objective-C, but am an experienced developer (C#), but I can't figure this out:</p>

<p>I have a string which is RC4 encrypted, and I need to decrypt it using Objective-C on the iPad (iOS 5.0). I have looked all over the net for a working example, but have had no luck finding an example that works end-to-end. Not only does the code below not return the decrypted string correctly, it returns something different every time it executes, which makes me thing a pointer is being released someplace. </p>

<p><strong>Note:</strong> I do not know if it matters, but the string was encrypted using <a href=""http://archive.plugins.jquery.com/project/RC4"" rel=""nofollow noreferrer"">http://archive.plugins.jquery.com/project/RC4</a> and then stored as text in a Sqlite database, which I am now accessing from Objective-C (I know, the architecture sounds messy, but I can't change that at this point.) </p>

<p>The code I am using is (taken from <a href=""https://stackoverflow.com/questions/2235698/rc4-encryption-commoncrypto-objective-c-vs-php"">RC4 encryption - CommonCrypto (Objective-C) vs PHP</a>):</p>

<pre><code>    + (NSString*)decryptData:(NSData*) dataToDecrypt
    {
        const void *vplainText;
        size_t plainTextBufferSize;


        plainTextBufferSize = [dataToDecrypt length];
        vplainText = [dataToDecrypt bytes];

        CCCryptorStatus ccStatus;
        uint8_t *bufferPtr = NULL;
        size_t bufferPtrSize = 0;
        size_t movedBytes = 0;

        bufferPtrSize = (plainTextBufferSize + kCCBlockSize3DES) &amp; ~(kCCBlockSize3DES - 1);
        bufferPtr = malloc( bufferPtrSize * sizeof(uint8_t));
        memset((void *)bufferPtr, 0x0, bufferPtrSize);

        NSString *key = @""theKeyIUsedtoEncryptInTheFirstPlace"";
        const void *vkey = (const void *) [key UTF8String];

        size_t keyLength = [[key dataUsingEncoding:NSUTF8StringEncoding] length]; 
        ccStatus = CCCrypt(kCCDecrypt,
                           kCCAlgorithmRC4,
                           0,
                           vkey,
                           kCCKeySizeDES,
                           nil,
                           vplainText,
                           plainTextBufferSize,
                           (void *)bufferPtr,
                           bufferPtrSize,
                           &amp;movedBytes);
        if (ccStatus == kCCSuccess) NSLog(@""SUCCESS"");
        /*else*/ if (ccStatus == kCCParamError) return @""PARAM ERROR"";
        else if (ccStatus == kCCBufferTooSmall) return @""BUFFER TOO SMALL"";
        else if (ccStatus == kCCMemoryFailure) return @""MEMORY FAILURE"";
        else if (ccStatus == kCCAlignmentError) return @""ALIGNMENT"";
        else if (ccStatus == kCCDecodeError) return @""DECODE ERROR"";
        else if (ccStatus == kCCUnimplemented) return @""UNIMPLEMENTED"";

        NSString *result = [[ NSString alloc ] initWithData: [NSData dataWithBytes:(const void *)bufferPtr length:(NSUInteger)movedBytes] encoding:NSASCIIStringEncoding];
        NSLog(@""%@"", result);
        return result;
    }
</code></pre>
","<p>Use this function for encryption and decryption. (Just put in the encoded string with same key again to decode it).</p>

<pre><code>-(NSString*) rc4Key:(NSString*) key str:(NSString*) str
{    
    int j = 0;
    unichar res[str.length];
    const unichar* buffer = res;
    unsigned char s[256];
    for (int i = 0; i &lt; 256; i++) 
    {
        s[i] = i;
    }
    for (int i = 0; i &lt; 256; i++) 
    {
        j = (j + s[i] + [key characterAtIndex:(i % key.length)]) % 256;

        swap(s[i], s[j]);
    }

    int i = j = 0;

    for (int y = 0; y &lt; str.length; y++) 
    {
        i = (i + 1) % 256;
        j = (j + s[i]) % 256;
        swap(s[i], s[j]);

        unsigned char f = [str characterAtIndex:y] ^ s[ (s[i] + s[j]) % 256];
        res[y] = f;
    }
    return [NSString stringWithCharacters:buffer length:str.length];
}
</code></pre>
","2761","<objective-c><ios5><encryption-symmetric><rc4-cipher>","1","2","3","2014-08-26 13:23:44","","0","1","-1","","2017-05-23 12:03:50","2012-01-09 23:42:14",""
"8796764","Objective-C RC4 Decryption","<p>I am new to Objective-C, but am an experienced developer (C#), but I can't figure this out:</p>

<p>I have a string which is RC4 encrypted, and I need to decrypt it using Objective-C on the iPad (iOS 5.0). I have looked all over the net for a working example, but have had no luck finding an example that works end-to-end. Not only does the code below not return the decrypted string correctly, it returns something different every time it executes, which makes me thing a pointer is being released someplace. </p>

<p><strong>Note:</strong> I do not know if it matters, but the string was encrypted using <a href=""http://archive.plugins.jquery.com/project/RC4"" rel=""nofollow noreferrer"">http://archive.plugins.jquery.com/project/RC4</a> and then stored as text in a Sqlite database, which I am now accessing from Objective-C (I know, the architecture sounds messy, but I can't change that at this point.) </p>

<p>The code I am using is (taken from <a href=""https://stackoverflow.com/questions/2235698/rc4-encryption-commoncrypto-objective-c-vs-php"">RC4 encryption - CommonCrypto (Objective-C) vs PHP</a>):</p>

<pre><code>    + (NSString*)decryptData:(NSData*) dataToDecrypt
    {
        const void *vplainText;
        size_t plainTextBufferSize;


        plainTextBufferSize = [dataToDecrypt length];
        vplainText = [dataToDecrypt bytes];

        CCCryptorStatus ccStatus;
        uint8_t *bufferPtr = NULL;
        size_t bufferPtrSize = 0;
        size_t movedBytes = 0;

        bufferPtrSize = (plainTextBufferSize + kCCBlockSize3DES) &amp; ~(kCCBlockSize3DES - 1);
        bufferPtr = malloc( bufferPtrSize * sizeof(uint8_t));
        memset((void *)bufferPtr, 0x0, bufferPtrSize);

        NSString *key = @""theKeyIUsedtoEncryptInTheFirstPlace"";
        const void *vkey = (const void *) [key UTF8String];

        size_t keyLength = [[key dataUsingEncoding:NSUTF8StringEncoding] length]; 
        ccStatus = CCCrypt(kCCDecrypt,
                           kCCAlgorithmRC4,
                           0,
                           vkey,
                           kCCKeySizeDES,
                           nil,
                           vplainText,
                           plainTextBufferSize,
                           (void *)bufferPtr,
                           bufferPtrSize,
                           &amp;movedBytes);
        if (ccStatus == kCCSuccess) NSLog(@""SUCCESS"");
        /*else*/ if (ccStatus == kCCParamError) return @""PARAM ERROR"";
        else if (ccStatus == kCCBufferTooSmall) return @""BUFFER TOO SMALL"";
        else if (ccStatus == kCCMemoryFailure) return @""MEMORY FAILURE"";
        else if (ccStatus == kCCAlignmentError) return @""ALIGNMENT"";
        else if (ccStatus == kCCDecodeError) return @""DECODE ERROR"";
        else if (ccStatus == kCCUnimplemented) return @""UNIMPLEMENTED"";

        NSString *result = [[ NSString alloc ] initWithData: [NSData dataWithBytes:(const void *)bufferPtr length:(NSUInteger)movedBytes] encoding:NSASCIIStringEncoding];
        NSLog(@""%@"", result);
        return result;
    }
</code></pre>
","<p>RC4 implementation translated from .net: </p>

<pre><code>+(NSString*)RC4:(NSString *)data key:(NSString *)key
{
    id x;
    int y = 0;
    int i = 0;
    int j = 0;
    NSMutableArray *box = [[NSMutableArray alloc] initWithCapacity:256];
    NSString *result = @"""";

    for (i = 0; i &lt; 256; i++) {
        [box addObject:[NSNumber numberWithInt:i]];
    }

    for (i = 0; i &lt; 256; i++) {
        j = ((int)[key characterAtIndex:(i % key.length)] + [[box objectAtIndex:i] intValue] + j) % 256;
        x = [box objectAtIndex:i];
        [box setObject:[box objectAtIndex:j] atIndexedSubscript:i];
        [box setObject:x atIndexedSubscript:j];
    }

    for (i = 0; i &lt; data.length; i++) {
       y = i % 256;
       j = ([[box objectAtIndex:y] intValue] + j) % 256;
       x = [box objectAtIndex:y];
       [box setObject:[box objectAtIndex:j] atIndexedSubscript:y];
       [box setObject:x atIndexedSubscript:j];

       NSString *c = [NSString stringWithFormat:@""%c"", ([data characterAtIndex:i] ^     (char)[[box objectAtIndex:([[box objectAtIndex:y] intValue] + [[box objectAtIndex:j] intValue]) % 256] intValue])];

       result = [result stringByAppendingString:c];

    }

    return result;
}
</code></pre>
","2761","<objective-c><ios5><encryption-symmetric><rc4-cipher>","1","1","3","2014-08-26 13:23:44","","0","1","-1","","2017-05-23 12:03:50","2012-01-09 23:42:14",""
"24788317","CXF Service throws WSSecurityException: No certificates were found for decryption (KeyId)","<p>I am working with a CXF-STS application following the example from <a href=""http://web-gmazza.rhcloud.com/blog/entry/cxf-sts-tutorial"" rel=""nofollow"">http://web-gmazza.rhcloud.com/blog/entry/cxf-sts-tutorial</a>. I am able to generate SAML assertion but it fails when it hits the Service Provider.</p>

<p>I have the PasswordCallback at Service as,</p>

<pre><code>@Override
    public void handle(Callback[] callbacks) throws IOException,
            UnsupportedCallbackException {
        for (int index = 0; index &lt; callbacks.length; index++) {
            WSPasswordCallback pc = (WSPasswordCallback)callbacks[index];
            int usage = pc.getUsage();
            if (usage == WSPasswordCallback.DECRYPT || usage == WSPasswordCallback.SIGNATURE) {
                String pass = (String) passwords.get(pc.getIdentifier());
                if (pass != null) {
                    pc.setPassword(pass);
                    return;
                }
            }
        }
</code></pre>

<p>The WSPasswordCallback type is found as SECRETKEY or something but <code>not WSPasswordCallback.DECRYPT or WSPasswordCallback.SIGNATURE</code></p>

<p>The identifier when debugged in above code shows as <code>_0bfaf221-9588-4033-b3fa-db9ecbd478fe</code> or some random text. On service provider I have Symmetric binding with Keytype - SymmetricKey as</p>

<pre><code>&lt;sp:SymmetricBinding&gt;
               &lt;wsp:Policy&gt;
                  &lt;sp:ProtectionToken&gt;
                     &lt;wsp:Policy&gt;
                        &lt;sp:IssuedToken sp:IncludeToken=""http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/IncludeToken/AlwaysToRecipient""&gt;
                           &lt;sp:RequestSecurityTokenTemplate&gt;
                              &lt;t:TokenType&gt;http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV1.1&lt;/t:TokenType&gt;
                              &lt;t:KeyType&gt;http://docs.oasis-open.org/ws-sx/ws-trust/200512/SymmetricKey&lt;/t:KeyType&gt;
                              &lt;t:KeySize&gt;256&lt;/t:KeySize&gt;
                           &lt;/sp:RequestSecurityTokenTemplate&gt;
                           &lt;wsp:Policy&gt;
                              &lt;sp:RequireInternalReference/&gt;
                           &lt;/wsp:Policy&gt;
                           &lt;sp:Issuer&gt;
                              &lt;wsaw:Address&gt;http://localhost:8080/StsService/services/STS&lt;/wsaw:Address&gt;
                              &lt;wsaw:Metadata&gt;
                                 &lt;wsx:Metadata&gt;
                                    &lt;wsx:MetadataSection&gt;
                                       &lt;wsx:MetadataReference&gt;
                                          &lt;wsaw:Address&gt;http://localhost:8080/StsService/services/STS/mex&lt;/wsaw:Address&gt;
                                       &lt;/wsx:MetadataReference&gt;
                                    &lt;/wsx:MetadataSection&gt;
</code></pre>

<p>On STS end I am providing public key of Service provider for encryption as </p>

<pre><code>&lt;bean id=""utSTSProperties""
         class=""org.apache.cxf.sts.StaticSTSProperties""&gt;
        &lt;property name=""signaturePropertiesFile"" value=""springconfig/keystore.properties""/&gt;
        &lt;property name=""signatureUsername"" value=""${stskeyalias}""/&gt;
        &lt;property name=""callbackHandlerClass"" value=""com.security.sts.security.StsPasswordCallbackHandler""/&gt;
        &lt;property name=""encryptionUsername"" value=""${serverkeyalias}"" /&gt;
        &lt;property name=""encryptionPropertiesFile"" value=""springconfig/keystore.properties"" /&gt;
        &lt;property name=""issuer"" value=""cieron""/&gt;
    &lt;/bean&gt;
</code></pre>

<p>Following suggestions at <a href=""http://mail-archives.apache.org/mod_mbox/cxf-users/201112.mbox/%3CCAB8XdGABkphcJXTbtVpDfBZ3KcymtZYX-Rmv0H8QiuwYNHP5OQ@mail.gmail.com%3E"" rel=""nofollow"">http://mail-archives.apache.org/mod_mbox/cxf-users/201112.mbox/%3CCAB8XdGABkphcJXTbtVpDfBZ3KcymtZYX-Rmv0H8QiuwYNHP5OQ@mail.gmail.com%3E</a> and <a href=""http://coheigea.blogspot.in/2011/05/ws-trust-sample-in-talend-service.html"" rel=""nofollow"">http://coheigea.blogspot.in/2011/05/ws-trust-sample-in-talend-service.html</a></p>

<p>I am not sure how the symmetric key is available for Service Provider as it is enrypted. </p>

<p>I have checked all related files and everything seems intact. I have my example at <a href=""https://github.com/sampleref/CXFSecurity"" rel=""nofollow"">https://github.com/sampleref/CXFSecurity</a> for reference. I am facing error when running the client, with service provider logs showing </p>

<pre><code>at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:722)
Caused by: org.apache.wss4j.common.ext.WSSecurityException: No certificates were found for decryption (KeyId)
    at org.apache.wss4j.dom.processor.EncryptedKeyProcessor.getCertificatesFromEncryptedKey(EncryptedKeyProcessor.java:372)
    at org.apache.wss4j.dom.processor.EncryptedKeyProcessor.handleToken(EncryptedKeyProcessor.java:137)
    at org.apache.wss4j.dom.saml.WSSSAMLKeyInfoProcessor.processSAMLKeyInfo(WSSSAMLKeyInfoProcessor.java:80)
    at org.apache.wss4j.common.saml.SAMLUtil.getCredentialFromKeyInfo(SAMLUtil.java:225)
    at org.apache.wss4j.common.saml.SAMLUtil.getCredentialFromSubject(SAMLUtil.java:152)
    at org.apache.wss4j.common.saml.SamlAssertionWrapper.parseSubject(SamlAssertionWrapper.java:672)
    at org.apache.wss4j.dom.processor.SAMLTokenProcessor.handleSAMLToken(SAMLTokenProcessor.java:193)
    at org.apache.wss4j.dom.processor.SAMLTokenProcessor.handleToken(SAMLTokenProcessor.java:79)
    at org.apache.wss4j.dom.WSSecurityEngine.processSecurityHeader(WSSecurityEngine.java:427)
    at org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor.handleMessage(WSS4JInInterceptor.java:257)
</code></pre>

<p>No Certificates found. Please provide some suggestions</p>

<p>Thanks</p>
","<p>Your STS + Service Keystores appear to contain different keys...</p>

<p>STS:</p>

<p>serverkeyalias, 13-Jul-2014, trustedCertEntry, 
Certificate fingerprint (SHA1): 45:4E:EB:4C:35:89:17:E6:A4:0E:94:FB:61:9B:81:83:FB:A0:82:B1</p>

<p>Server:</p>

<p>serverkeyalias, 12-Jul-2014, PrivateKeyEntry, 
Certificate fingerprint (SHA1): B8:E6:BA:A5:07:24:69:B3:5E:08:2F:A3:CE:97:D8:2E:E2:E1:31:F8</p>

<p>Colm.</p>
","2696","<cxf><saml><ws-security><encryption-symmetric><ws-trust>","0","0","1","2016-01-30 02:58:08","24822927","0","","1321426","","2014-07-17 17:39:41","2014-07-16 18:43:02",""
"30138477","Golang AES StreamReader encryption - Example omits any authentication of the encrypted data","<p>Finally I am posting my first question on StackOverflow. I'm using this site for years now and I always found great answers to all my questions :)</p>

<p>I am implementing a file encryption background daemon which is based on the <a href=""https://golang.org/src/crypto/cipher/example_test.go"" rel=""noreferrer"">official Golang cipher example</a>:</p>

<pre><code>func ExampleStreamReader() {
    key := []byte(""example key 1234"")

    inFile, err := os.Open(""encrypted-file"")
    if err != nil {
        panic(err)
    }
    defer inFile.Close()

    block, err := aes.NewCipher(key)
    if err != nil {
        panic(err)
    }

    // If the key is unique for each ciphertext, then it's ok to use a zero
    // IV.
    var iv [aes.BlockSize]byte
    stream := cipher.NewOFB(block, iv[:])

    outFile, err := os.OpenFile(""decrypted-file"", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
    if err != nil {
        panic(err)
    }
    defer outFile.Close()

    reader := &amp;cipher.StreamReader{S: stream, R: inFile}
    // Copy the input file to the output file, decrypting as we go.
    if _, err := io.Copy(outFile, reader); err != nil {
        panic(err)
    }

    // Note that this example is simplistic in that it omits any
    // authentication of the encrypted data. If you were actually to use
    // StreamReader in this manner, an attacker could flip arbitrary bits in
    // the output.
}

func ExampleStreamWriter() {
    key := []byte(""example key 1234"")

    inFile, err := os.Open(""plaintext-file"")
    if err != nil {
        panic(err)
    }
    defer inFile.Close()

    block, err := aes.NewCipher(key)
    if err != nil {
        panic(err)
    }

    // If the key is unique for each ciphertext, then it's ok to use a zero
    // IV.
    var iv [aes.BlockSize]byte
    stream := cipher.NewOFB(block, iv[:])

    outFile, err := os.OpenFile(""encrypted-file"", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0600)
    if err != nil {
        panic(err)
    }
    defer outFile.Close()

    writer := &amp;cipher.StreamWriter{S: stream, W: outFile}
    // Copy the input file to the output file, encrypting as we go.
    if _, err := io.Copy(writer, inFile); err != nil {
        panic(err)
    }

    // Note that this example is simplistic in that it omits any
    // authentication of the encrypted data. If you were actually to use
    // StreamReader in this manner, an attacker could flip arbitrary bits in
    // the decrypted result.
}
</code></pre>

<p>What is meant with the following quote. About what should I take care to provide a secure encryption and decryption?</p>

<blockquote>
  <p>Note that this example is simplistic in that it
  omits any   authentication of the encrypted data. If you were actually
  to use  StreamReader in this manner, an attacker could flip arbitrary
  bits in the output.</p>
</blockquote>

<p>Thanks!</p>
","<p>From wikipedia:</p>

<blockquote>
  <p>The block cipher modes ECB, CBC, OFB, CFB, CTR, and XTS provide confidentiality, but they do not protect against accidental modification or malicious tampering. </p>
</blockquote>

<p>A good explanation can be found here: <a href=""https://security.stackexchange.com/a/33576"">https://security.stackexchange.com/a/33576</a>.</p>

<p>Go has support for other modes which do support integrity and authentication checks. As rossum said you can use <a href=""http://golang.org/pkg/crypto/cipher/#NewGCM"" rel=""nofollow noreferrer"">GCM</a> or <a href=""https://godoc.org/bitbucket.org/dchapes/ripple/crypto/ccm"" rel=""nofollow noreferrer"">CCM</a>. You can find lots of examples on <a href=""http://godoc.org/crypto/cipher?importers"" rel=""nofollow noreferrer"">godoc.org</a>. For example HashiCorp's <a href=""https://github.com/hashicorp/memberlist/blob/master/security.go#L88"" rel=""nofollow noreferrer"">memberlist library</a>.</p>

<p>Another library worth checking out is the NaCL port in <a href=""https://godoc.org/golang.org/x/crypto/nacl/secretbox"" rel=""nofollow noreferrer"">golang.org/x/crypto/nacl</a>:</p>

<pre><code>func Open(out []byte, box []byte, nonce *[24]byte, key *[32]byte) ([]byte, bool)
func Seal(out, message []byte, nonce *[24]byte, key *[32]byte) []byte
</code></pre>

<p>If you're working with small messages this API will probably be a lot easier to use.</p>
","2657","<encryption><go><aes><encryption-symmetric>","6","3","1","2015-05-10 02:28:10","30147087","2","","","","","2015-05-09 09:52:31",""
"5425871","Using Rfc2898DeriveBytes Class to obtain Key and IV","<p>I am just becoming familiar with encryption and the .NET framework. After looking at many examples I am seeing a repeated pattern that confuses when using the .NET Class <code>Rfc2898DeriveBytes</code>. When using this class to obtain an encryption key and an initialization vector the same method seems to be used.</p>

<p>Here is some code from an <a href=""http://blogs.msdn.com/b/shawnfa/archive/2004/04/14/generating-a-key-from-a-password.aspx"" rel=""nofollow"">MSDN blog</a> that demonstrates obtaining a key and an initialization vector.</p>

<pre><code>byte[] salt = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7 };
Rfc2898DeriveBytes pwdGen = new Rfc2898DeriveBytes(""P@$$w0rd"", salt, 1000);

// generate an RC2 key
byte[] key = pwdGen.GetBytes(16);
byte[] iv = pwdGen.GetBytes(8);
</code></pre>

<p>I have seen this used in other places also. I guess I would have thought it would be something like this ...</p>

<pre><code>// generate an RC2 key
byte[] key = pwdGen.GetKey();
byte[] iv = pwdGen.GetInitializationVector();
</code></pre>

<p>I MUST be missing something here. If the Key and Initialization Vector (IV) are just random numbers how are they obtained again when using the proper password and salt?</p>
","<p>The RFC2898 key derivation algorithm is deterministic.  When you run it with the same inputs, you'll get the same outputs.</p>

<p>So as long as you call <code>GetBytes()</code> in the same order, requesting the same number of bytes, you'll get the same key and IV.</p>

<p>Don't forget that in a real system the salt should be randomly generated at encryption time (and stored so that it can be retrieved at decryption time).</p>
","2609","<.net><encryption><encryption-symmetric><initialization-vector>","3","4","1","2011-03-25 01:44:50","5427680","0","1","","","","2011-03-24 21:36:09",""
"9819941","Encryption through C# & Decryption through SQL Server 2008 for ASP.NET app","<p>On my front end, I have following functions:</p>

<p>method to encrypt:</p>

<pre><code>  public static string Encrypt(string strToEncrypt)
        {

            TripleDESCryptoServiceProvider objDESCrypto = new TripleDESCryptoServiceProvider();
            MD5CryptoServiceProvider objHashMD5 = new MD5CryptoServiceProvider();
            byte[] byteHash, byteBuff;
            byteHash = objHashMD5.ComputeHash(ASCIIEncoding.ASCII.GetBytes(GetEncryptionKey));
            objHashMD5 = null;
            objDESCrypto.Key = byteHash;
            objDESCrypto.Mode = CipherMode.ECB; //CBC, CFB
            byteBuff = ASCIIEncoding.ASCII.GetBytes(strToEncrypt);
            return Convert.ToBase64String(objDESCrypto.CreateEncryptor().TransformFinalBlock(byteBuff, 0, byteBuff.Length));


        }
</code></pre>

<p>method to decrypt:</p>

<pre><code>public static string Decrypt(string strEncrypted)
        {

            TripleDESCryptoServiceProvider objDESCrypto = new TripleDESCryptoServiceProvider();
            MD5CryptoServiceProvider objHashMD5 = new MD5CryptoServiceProvider();
            byte[] byteHash, byteBuff;
            byteHash = objHashMD5.ComputeHash(ASCIIEncoding.ASCII.GetBytes(GetEncryptionKey));
            objHashMD5 = null;
            objDESCrypto.Key = byteHash;
            objDESCrypto.Mode = CipherMode.ECB; //CBC, CFB
            byteBuff = Convert.FromBase64String(strEncrypted);
            string strDecrypted = ASCIIEncoding.ASCII.GetString(objDESCrypto.CreateDecryptor().TransformFinalBlock(byteBuff, 0, byteBuff.Length));
            objDESCrypto = null;
            return strDecrypted;

        }
</code></pre>

<p>and the GetEncryptionKey function is</p>

<pre><code>   private static string GetEncryptionKey
    {
        get { return ""#$&amp;*(^($%""; }
    }
</code></pre>

<p>EDIT:
Now here's my problem:
so am asked to Encrypt the User's password using Encrypt function written on the front end (during registration or password change) and Decrypt the encrypted password(from front end) through a Stored Procedure( during login).
How can I do so?</p>
","<p>To answer your question: you can plug in .net assemblies into SqlServer to run .net functions - here is a <a href=""http://www.sitepoint.com/host-net-sql-server-2005/"" rel=""nofollow"">Tutorial for .net 2.0 / SqlServer2005</a></p>
","2560","<c#><asp.net><sql><sql-server-2008><encryption-symmetric>","0","1","1","2012-03-22 10:06:11","9820041","4","","","user1186860","2012-03-22 10:06:11","2012-03-22 09:59:23",""
"23914506","Encrypting / Decrypting a passed value in SQL Server","<p>I have the following scenario ...</p>

<p>A vendor sends a customer an email. At the bottom of the email is a link back to a web page that I am responsible for i.e. hosting. We need to pass the users email address through the link to the web page but we want it to be encrypted. We need to then be able to DECRYPT it on our end when we receive the request so that we can extract the email from it. </p>

<p>I would like for the vendor to be able to encrypt it via SQL Server (that's where the link is generated) and we would like to also decrypt it using SQL Server. </p>

<p>I have no, none, zero experience with encryption/decryption and need to devise a solution within the next 6 hours ... !!! </p>

<p>I see information on encrypting entire columns but I need to be able to encrypt/decrypt just a single string. </p>

<p>Any thoughts? Better approach?</p>

<p>Thanks,
G</p>
","<p>I wouldn't use encryption for this task. Anything you encrypt can potentially be decrypted by someone. A better solution is to generate a random code and assign it against the email address in your database. Then do a lookup based on that code. The code could be as simple as using a GUID.</p>

<pre><code>In C#: Guid.NewGuid()

In SQL Server: NEWID()
</code></pre>
","2556","<sql-server><encryption><encryption-symmetric><encryption-asymmetric>","-2","2","3","2016-02-02 12:08:56","23914804","0","","","","","2014-05-28 14:31:17","2014-05-28 16:37:17"
"23914506","Encrypting / Decrypting a passed value in SQL Server","<p>I have the following scenario ...</p>

<p>A vendor sends a customer an email. At the bottom of the email is a link back to a web page that I am responsible for i.e. hosting. We need to pass the users email address through the link to the web page but we want it to be encrypted. We need to then be able to DECRYPT it on our end when we receive the request so that we can extract the email from it. </p>

<p>I would like for the vendor to be able to encrypt it via SQL Server (that's where the link is generated) and we would like to also decrypt it using SQL Server. </p>

<p>I have no, none, zero experience with encryption/decryption and need to devise a solution within the next 6 hours ... !!! </p>

<p>I see information on encrypting entire columns but I need to be able to encrypt/decrypt just a single string. </p>

<p>Any thoughts? Better approach?</p>

<p>Thanks,
G</p>
","<p>I would create a new column in your user email table that is of type <a href=""http://msdn.microsoft.com/en-gb/library/ms187942.aspx"" rel=""nofollow""><strong>UNIQUEIDENTIFIER</strong></a> and set it's default value to <a href=""http://msdn.microsoft.com/en-us/library/ms190348.aspx"" rel=""nofollow""><strong>NEWID()</strong></a> so that it creates a new GUID (like: 400c4d0d-cd5a-42fd-8660-15250e27c247) when the record is created. This is on the assumption that per email, you create a new record in this table.</p>

<p>SQL to alter your source table:</p>

<pre><code>ALTER TABLE [YOUR_TABLE] ADD
    UniqueEmailId uniqueidentifier NOT NULL 
    CONSTRAINT DF_YOUR_TABLE_UniqueEmailId DEFAULT newid()
</code></pre>

<p>You can then use the value created in your hyperlink, like so:</p>

<pre><code>www.yoursite.com/emailid=400c4d0d-cd5a-42fd-8660-15250e27c247
</code></pre>

<p>Then once it's clicked, you simply look up the user/email related to that unique identifier and serve your page.</p>

<p>This would circumvent the requirement of passing sensitive information that you have to encrypt/decrypt in hyperlinks.</p>
","2556","<sql-server><encryption><encryption-symmetric><encryption-asymmetric>","-2","0","3","2016-02-02 12:08:56","23914804","0","","","","","2014-05-28 14:31:17","2014-05-28 16:37:17"
"23914506","Encrypting / Decrypting a passed value in SQL Server","<p>I have the following scenario ...</p>

<p>A vendor sends a customer an email. At the bottom of the email is a link back to a web page that I am responsible for i.e. hosting. We need to pass the users email address through the link to the web page but we want it to be encrypted. We need to then be able to DECRYPT it on our end when we receive the request so that we can extract the email from it. </p>

<p>I would like for the vendor to be able to encrypt it via SQL Server (that's where the link is generated) and we would like to also decrypt it using SQL Server. </p>

<p>I have no, none, zero experience with encryption/decryption and need to devise a solution within the next 6 hours ... !!! </p>

<p>I see information on encrypting entire columns but I need to be able to encrypt/decrypt just a single string. </p>

<p>Any thoughts? Better approach?</p>

<p>Thanks,
G</p>
","<p>You can use <code>EncryptByPassPhrase</code> and <code>DecryptByPassPhrase</code> in SQL Server:</p>

<pre><code>select EncryptByPassPhrase('key', 'abc' );

select convert(varchar(100),
   DecryptByPassPhrase('key', 0x0100000001E5B67F919CCC4B8EA10E97FC50764BF6B30EC4347C4E54));
</code></pre>
","2556","<sql-server><encryption><encryption-symmetric><encryption-asymmetric>","-2","1","3","2016-02-02 12:08:56","23914804","0","","","","","2014-05-28 14:31:17","2014-05-28 16:37:17"
"36342615","openssl_decrypt always returns false","<p>I tried to migrate my encryption from mcrypt to openssl but the decryption keeps failing. The code Below shows my encryption function. I placed the var_dump in the encryption function to verify decryption with identical variables works, which it does not. </p>

<p>I tried the following changes to the code, none worked:</p>

<ul>
<li><code>base64_decode($encrypted)</code></li>
<li>just out of curiosity <code>base64_encode($encrypted)</code></li>
<li>all these variants with options set to:0(default value),OPENSSL_RAW_DATA,OPENSSL_ZERO_PADDING</li>
</ul>

<p><b></b></p>

<pre><code>function encryptString($data){  
    $key = ""1A534"";

    do{
        $iv = random_bytes(100);
    }while(strpos($iv,""|Z|"")!==false);

    $encrypted = openssl_encrypt($data,""aes-256-gcm"",$key,false,$iv);   
    var_dump(openssl_decrypt($encrypted,""aes-256-gcm"",$key,OPENSSL_RAW_DATA,$iv));
    $output = $iv . ""|Z|"" . $encrypted;
    $output = base64_encode($output);   
    return $output;
}
</code></pre>

<p>PHP Version is 7.0.5-1+deb.sury.org~trusty+1</p>

<p>OpenSSL Version is OpenSSL 1.0.2g 1 Mar 2016 </p>

<p>Why keeps openssl_decrypt returning false? I successfully encrypted with the same variables just the line above.</p>
","<p>It will not work for PHP &lt; 7.1 as AEAD is not supported.</p>

<p>You can use <a href=""https://github.com/Spomky-Labs/php-aes-gcm"" rel=""nofollow noreferrer"">the library I created</a> (PHP 5.4+ and 7.0+).</p>

<p>Depending on your environment, it will test and use the following methods:</p>

<ul>
<li>OpenSSL on PHP 7.1,</li>
<li><a href=""https://github.com/bukka/php-crypto"" rel=""nofollow noreferrer"">libCrypto extension</a>,</li>
<li>A pure PHP implementation.</li>
</ul>

<p>Note that the pure PHP method is very slow compared to the other methods.</p>
","2481","<php><encryption><encryption-symmetric><php-openssl><aes-gcm>","1","1","1","2018-09-12 06:05:05","","3","0","2224584","","2016-04-18 00:19:05","2016-03-31 19:59:28",""
"32493341","AES Encryption without using IV","<p><a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.aes(v=vs.110).aspx"" rel=""nofollow"">https://msdn.microsoft.com/en-us/library/system.security.cryptography.aes(v=vs.110).aspx</a></p>

<p>I am planning to use the AES to encrypt/decrypt my messages.
I do not want to use the IV while encrypting/decrypting because I am already securing my Key in KeyVault and I just want to share only one Key to the other parties who can decrypt my messages.</p>

<p>Any suggestions? How can I make IV as optional/removed.</p>
","","2441","<c#><encryption><encryption-symmetric><initialization-vector>","0","","0","2016-05-17 06:11:58","","9","","1816580","","2015-09-10 08:02:24","2015-09-10 04:46:05",""
"13488155","encrypt a folder of html files and use files in java application after decryption","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/13487103/encrypt-the-html-files-for-client-side-and-browse-them-in-a-swing-application"">encrypt the html files for client side and browse them in a swing application</a>  </p>
</blockquote>



<p>I am working on a swing application in which in which client has to access the html files locally stored in the machine but i want client should not access the html files directly so want to encrypt the   entire   folder of html files using java and in Java application i would write the hard code to decrypt the html files from encrypted folder. One more thing the updation should  be possible in encrypted folder so that encrypted files may be merged in future on client  side.</p>

<p>I have been stuck here and has no clues for my problem , any help for my problem is appreciated. </p>
","<p><strong>-</strong> Well i would ask you to use <code>Cipher</code>, <code>CipherInputStream</code> and <code>CipherOutputStream</code> for <strong>encryption</strong> and <strong>decryption</strong>.</p>

<p><strong>-</strong> You can loop through the files in the folder and then encrypt each file, and similarly you can loop through the files in the folder to decrypt it.</p>

<p><strong>See this link :</strong></p>

<p><a href=""http://www.flexiprovider.de/examples/ExampleCrypt.html"" rel=""nofollow"">http://www.flexiprovider.de/examples/ExampleCrypt.html</a></p>
","2410","<java><file><encryption><encryption-symmetric>","3","2","2","2013-11-07 23:47:44","13488241","0","2","-1","","2017-05-23 10:24:42","2012-11-21 07:16:21","2012-11-21 09:55:17"
"13488155","encrypt a folder of html files and use files in java application after decryption","<blockquote>
  <p><strong>Possible Duplicate:</strong><br>
  <a href=""https://stackoverflow.com/questions/13487103/encrypt-the-html-files-for-client-side-and-browse-them-in-a-swing-application"">encrypt the html files for client side and browse them in a swing application</a>  </p>
</blockquote>



<p>I am working on a swing application in which in which client has to access the html files locally stored in the machine but i want client should not access the html files directly so want to encrypt the   entire   folder of html files using java and in Java application i would write the hard code to decrypt the html files from encrypted folder. One more thing the updation should  be possible in encrypted folder so that encrypted files may be merged in future on client  side.</p>

<p>I have been stuck here and has no clues for my problem , any help for my problem is appreciated. </p>
","<p>Have a read on this link:</p>

<ul>
<li>Using AES with Java Technology (Could not use the link as normally due to the domain being a number): <code>http://192.9.162.55/developer/technicalArticles/Security/AES/AES_v1.html</code></li>
</ul>

<p>By default you can use up to AES 128bit.</p>

<p>In order to use 256 bit AES keys, you must download and install ""Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files"" from <a href=""http://java.sun.com/javase/downloads/index.jsp"" rel=""nofollow"">here</a>. </p>

<p>Here is a simple example which encrypts an decrypts a String message in java using AES:</p>

<pre><code> import java.security.*;
   import javax.crypto.*;
   import javax.crypto.spec.*;
   import java.io.*;

   /**
   * This program generates a AES key, retrieves its raw bytes, and
   * then reinstantiates a AES key from the key bytes.
   * The reinstantiated key is used to initialize a AES cipher for
   * encryption and decryption.
   */

   public class AES {

     /**
     * Turns array of bytes into string
     *
     * @param buf   Array of bytes to convert to hex string
     * @return  Generated hex string
     */
     public static String asHex (byte buf[]) {
      StringBuffer strbuf = new StringBuffer(buf.length * 2);
      int i;

      for (i = 0; i &lt; buf.length; i++) {
       if (((int) buf[i] &amp; 0xff) &lt; 0x10)
        strbuf.append(""0"");

       strbuf.append(Long.toString((int) buf[i] &amp; 0xff, 16));
      }

      return strbuf.toString();
     }

     public static void main(String[] args) throws Exception {

       String message=""This is just an example"";

       // Get the KeyGenerator

       KeyGenerator kgen = KeyGenerator.getInstance(""AES"");
       kgen.init(128); // 192 and 256 bits may not be available


       // Generate the secret key specs.
       SecretKey skey = kgen.generateKey();
       byte[] raw = skey.getEncoded();

       SecretKeySpec skeySpec = new SecretKeySpec(raw, ""AES"");


       // Instantiate the cipher

       Cipher cipher = Cipher.getInstance(""AES"");

       cipher.init(Cipher.ENCRYPT_MODE, skeySpec);

       byte[] encrypted =
         cipher.doFinal((args.length == 0 ?
          ""This is just an example"" : args[0]).getBytes());
       System.out.println(""encrypted string: "" + asHex(encrypted));

       cipher.init(Cipher.DECRYPT_MODE, skeySpec);
       byte[] original =
         cipher.doFinal(encrypted);
       String originalString = new String(original);
       System.out.println(""Original string: "" +
         originalString + "" "" + asHex(original));
     }
   }
</code></pre>

<p>The above code will have to be modified in such a way that you read the encrypted files into a <code>StringBuffer</code>/byte array etc, un-encrypt them (in memory only) do the work needed then re-encrypt <code>StringBuffer</code>/data/bytes and write it to file.</p>

<p>Another great Cryptograpic API is:</p>

<ul>
<li><a href=""http://www.bouncycastle.org/"" rel=""nofollow"">Bouncy Castle</a></li>
</ul>

<p>There are many examples that can be found for Bouncy Castle API too:</p>

<ul>
<li><a href=""http://www.itcsolutions.eu/2011/08/24/how-to-encrypt-decrypt-files-in-java-with-aes-in-cbc-mode-using-bouncy-castle-api-and-netbeans-or-eclipse/"" rel=""nofollow"">How to encrypt/decrypt files in Java with AES in CBC mode using Bouncy Castle API and NetBeans or Eclipse</a> </li>
</ul>
","2410","<java><file><encryption><encryption-symmetric>","3","2","2","2013-11-07 23:47:44","13488241","0","2","-1","","2017-05-23 10:24:42","2012-11-21 07:16:21","2012-11-21 09:55:17"
"22981611","Decode ThinkTecture Identity Server JWT token","<p>I have managed to get back a JWT token from Identity Server using OAuth2 and would like to extract the claims from the token.</p>

<p>When I use a token decoder such as <a href=""https://developers.google.com/wallet/digital/docs/jwtdecoder"" rel=""nofollow"">https://developers.google.com/wallet/digital/docs/jwtdecoder</a>, I can peek inside the token and it looks fine.</p>

<p>However I am not sure what decrypting to use in c# in order to use the Microsoft JwtSecurityTokenHandler.ValidateToken to get back a claims identity.</p>

<p>In identity server, I am using a symmetric key which I have pasted for reference in my code. The JWT token is also valid.</p>

<p>Would really appreciate some help:</p>

<pre><code>string token = ""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vaWRlbnRpdHlzZXJ2ZXIudjIudGhpbmt0ZWN0dXJlLmNvbS90cnVzdC9jaGFuZ2V0aGlzIiwiYXVkIjoidXJuOndlYmFwaXNlY3VyaXR5IiwibmJmIjoxMzk3MTEzMDY5LCJleHAiOjEzOTcxNDkwNjksIm5hbWVpZCI6InN0ZWZhbiIsInVuaXF1ZV9uYW1lIjoic3RlZmFuIiwiYXV0aG1ldGhvZCI6Ik9BdXRoMiIsImF1dGhfdGltZSI6IjIwMTQtMDQtMTBUMDY6NTc6NDguODEyWiIsImh0dHA6Ly9pZGVudGl0eXNlcnZlci50aGlua3RlY3R1cmUuY29tL2NsYWltcy9jbGllbnQiOiJyZWx5aW5nIHBhcnR5IDMgdGVzdCBjbGllbnQgbmFtZSIsImh0dHA6Ly9pZGVudGl0eXNlcnZlci50aGlua3RlY3R1cmUuY29tL2NsYWltcy9zY29wZSI6InVybjp3ZWJhcGlzZWN1cml0eSJ9.cFnmgHxrpy2rMg8B6AupVrJwltu7RhBAeIx_D3pxJeI"";

string key = ""ZHfUES/6wG28LY+SaMtvaeek34t2PBrAiBxur6MAI/w="";

var validationParameters = new TokenValidationParameters()
{
    AllowedAudience = ""urn:webapisecurity"",
    SigningToken = new ????
    ValidIssuer = @""http://identityserver.v2.thinktecture.com/trust/changethis""
};

var tokenHandler = new JwtSecurityTokenHandler();
var principal = tokenHandler.ValidateToken(token, validationParameters);
</code></pre>

<p>What sort of SigningToken should I use for the validationParameters.SigningToken ??</p>
","<p>It's a BinarySecretSecurityToken - base64 decode the stringified key to use it.</p>
","2397","<token><encryption-symmetric><jwt><thinktecture-ident-server><thinktecture-ident-model>","0","2","2","2017-08-09 08:36:06","22982201","0","","","","","2014-04-10 07:37:47",""
"22981611","Decode ThinkTecture Identity Server JWT token","<p>I have managed to get back a JWT token from Identity Server using OAuth2 and would like to extract the claims from the token.</p>

<p>When I use a token decoder such as <a href=""https://developers.google.com/wallet/digital/docs/jwtdecoder"" rel=""nofollow"">https://developers.google.com/wallet/digital/docs/jwtdecoder</a>, I can peek inside the token and it looks fine.</p>

<p>However I am not sure what decrypting to use in c# in order to use the Microsoft JwtSecurityTokenHandler.ValidateToken to get back a claims identity.</p>

<p>In identity server, I am using a symmetric key which I have pasted for reference in my code. The JWT token is also valid.</p>

<p>Would really appreciate some help:</p>

<pre><code>string token = ""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vaWRlbnRpdHlzZXJ2ZXIudjIudGhpbmt0ZWN0dXJlLmNvbS90cnVzdC9jaGFuZ2V0aGlzIiwiYXVkIjoidXJuOndlYmFwaXNlY3VyaXR5IiwibmJmIjoxMzk3MTEzMDY5LCJleHAiOjEzOTcxNDkwNjksIm5hbWVpZCI6InN0ZWZhbiIsInVuaXF1ZV9uYW1lIjoic3RlZmFuIiwiYXV0aG1ldGhvZCI6Ik9BdXRoMiIsImF1dGhfdGltZSI6IjIwMTQtMDQtMTBUMDY6NTc6NDguODEyWiIsImh0dHA6Ly9pZGVudGl0eXNlcnZlci50aGlua3RlY3R1cmUuY29tL2NsYWltcy9jbGllbnQiOiJyZWx5aW5nIHBhcnR5IDMgdGVzdCBjbGllbnQgbmFtZSIsImh0dHA6Ly9pZGVudGl0eXNlcnZlci50aGlua3RlY3R1cmUuY29tL2NsYWltcy9zY29wZSI6InVybjp3ZWJhcGlzZWN1cml0eSJ9.cFnmgHxrpy2rMg8B6AupVrJwltu7RhBAeIx_D3pxJeI"";

string key = ""ZHfUES/6wG28LY+SaMtvaeek34t2PBrAiBxur6MAI/w="";

var validationParameters = new TokenValidationParameters()
{
    AllowedAudience = ""urn:webapisecurity"",
    SigningToken = new ????
    ValidIssuer = @""http://identityserver.v2.thinktecture.com/trust/changethis""
};

var tokenHandler = new JwtSecurityTokenHandler();
var principal = tokenHandler.ValidateToken(token, validationParameters);
</code></pre>

<p>What sort of SigningToken should I use for the validationParameters.SigningToken ??</p>
","<p>You can use following website to Decode the token </p>

<p><a href=""http://jwt.io/"" rel=""nofollow noreferrer"">http://jwt.io/</a></p>

<p>and here is a code to Decode JWT Token using C#</p>

<pre><code> class Program
    {
        static void Main(string[] args)
        {

            string token =""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vaWRlbnRpdHlzZXJ2ZXIudjIudGhpbmt0ZWN0dXJlLmNvbS90cnVzdC9jaGFuZ2V0aGlzIiwiYXVkIjoidXJuOndlYmFwaXNlY3VyaXR5IiwibmJmIjoxMzk3MTEzMDY5LCJleHAiOjEzOTcxNDkwNjksIm5hbWVpZCI6InN0ZWZhbiIsInVuaXF1ZV9uYW1lIjoic3RlZmFuIiwiYXV0aG1ldGhvZCI6Ik9BdXRoMiIsImF1dGhfdGltZSI6IjIwMTQtMDQtMTBUMDY6NTc6NDguODEyWiIsImh0dHA6Ly9pZGVudGl0eXNlcnZlci50aGlua3RlY3R1cmUuY29tL2NsYWltcy9jbGllbnQiOiJyZWx5aW5nIHBhcnR5IDMgdGVzdCBjbGllbnQgbmFtZSIsImh0dHA6Ly9pZGVudGl0eXNlcnZlci50aGlua3RlY3R1cmUuY29tL2NsYWltcy9zY29wZSI6InVybjp3ZWJhcGlzZWN1cml0eSJ9.cFnmgHxrpy2rMg8B6AupVrJwltu7RhBAeIx_D3pxJeI"";

                var parts = token.Split('.');
                string partToConvert = parts[1];
                var partAsBytes = Convert.FromBase64String(partToConvert);
                var partAsUTF8String = Encoding.UTF8.GetString(partAsBytes, 0, partAsBytes.Count());

                //JSON.net required
                var jwt = JObject.Parse(partAsUTF8String);


                Console.Write(jwt.ToString());

            Console.ReadLine();

        }
        }
</code></pre>
","2397","<token><encryption-symmetric><jwt><thinktecture-ident-server><thinktecture-ident-model>","0","2","2","2017-08-09 08:36:06","22982201","0","","","","","2014-04-10 07:37:47",""
"15190770","Cipher.getInstance() is failing with java.security.NoSuchAlgorithmException: Cannot find any provider supporting AES/ECB/ZeroBytePadding","<p>I have an Android app that encrypts data using AES with ECB and ZeroBytePadding. Everything works fine in that environment: encrypted data gets decrypted in Android without a problem, as follows:</p>

<pre><code>public static String encrypt(byte[] raw, byte[] clear) throws Exception {
    SecretKeySpec skeySpec = new SecretKeySpec(raw, ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/ECB/ZeroBytePadding"");
    cipher.init(Cipher.ENCRYPT_MODE, skeySpec);

    byte[] encrypted = cipher.doFinal(clear);
    return android.util.Base64.encodeToString(encrypted, android.util.Base64.NO_WRAP);
}

public static byte[] decrypt(byte[] raw, byte[] encrypted) throws Exception {
    SecretKeySpec skeySpec = new SecretKeySpec(raw, ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/ECB/ZeroBytePadding"");
    cipher.init(Cipher.DECRYPT_MODE, skeySpec);

    byte[] decrypted = cipher.doFinal(encrypted);
    return decrypted;
}
</code></pre>

<p>However, I recently decided to decrypt the data in a Web app and when I tried to use the same decrypt() method, Cipher.getInstance(""AES/ECB/ZeroBytePadding"") threw an exception:</p>

<pre><code>java.security.NoSuchAlgorithmException: Cannot find any provider supporting     
AES/ECB/ZeroBytePadding
</code></pre>

<p>I assume that some Android library is providing a suitable cipher provider that is missing from javax.crypto.Cipher. Has anyone else had this problem or know what I can do about it? Changing the cipher padding to PKCS5PADDING is not an option, due to the many messages that are already encrypted with the earlier options.</p>
","<p>Actually there is really not such an algorithm. Look at official java docs here <a href=""http://docs.oracle.com/javase/7/docs/api/javax/crypto/Cipher.html"" rel=""nofollow"">http://docs.oracle.com/javase/7/docs/api/javax/crypto/Cipher.html</a></p>
","2357","<android><web-applications><encryption-symmetric><aescryptoserviceprovider>","0","0","1","2016-05-13 05:54:09","","2","3","","","","2013-03-03 20:57:14",""
"5423501","Can you do symmetric encryption on SAML attributes in SAML 2.0?","<p>Can you do symmetric encryption on SAML attributes in SAML 2.0?   We can seem to do asymmetric.  What are pros and cons?</p>
","<p>SAML 2.0 utilizes XML Encryption (Sect 5.2.1 and 5.2.2). With that said, Sect 4.2 of the <a href=""http://docs.oasis-open.org/security/saml/v2.0/saml-conformance-2.0-os.pdf"" rel=""nofollow"">SAML 2.0 Conformance docs</a> specifies you <em>must</em> support the following to be SAML 2.0 compliant:</p>

<ul>
<li>Block Encryption: TRIPLE DES, AES-128, AES-256.</li>
<li>Key Transport: RSA-v1.5, RSA-OAEP</li>
</ul>

<p>In other words, SAML 2.0  mandates you use asymmetric keys. </p>

<p>So, the ""cons"" will be that you are not SAML 2.0 compliant if you utilize symmetric encryption of SAML Attributes which will lead to interopability issues with other SAML 2.0 partners. However, that does not mean that you cannot actually choose to use this type of encryption as long as your partner supports this as well. </p>

<p>On the ""pros"" side, symmetric encryption is faster (less computationally intensive I'm told) but I'm pretty sure it's not worth the trade-off wrt compliance.</p>
","2331","<saml><encryption-asymmetric><encryption-symmetric>","1","3","3","2013-07-25 14:27:51","","0","1","","","","2011-03-24 18:06:17",""
"5423501","Can you do symmetric encryption on SAML attributes in SAML 2.0?","<p>Can you do symmetric encryption on SAML attributes in SAML 2.0?   We can seem to do asymmetric.  What are pros and cons?</p>
","<p>Keep in mind that in reality you are always using both asymmetric and symmetric encryption - this is best practice in security.  The underlying block encryption method that is symmetric (as noted by Ian: Triple DES, AES, etc.).  Asymmetric is preferred due to stronger security (larger key sizes, etc.) - and ease of keeping the private keys secure (only the public keys need to be distributed).  However due to its performance it's only used as a means to exchange symmetric keys.  Symmetric encryption on the bulk of the data is done for speed.</p>

<p>In the XML Encryption spec, EncryptedData element contains symmetrically encrypted data, while EncryptedKey is your symmetric encryption/decryption key, encrypted via asymmetric encryption.</p>
","2331","<saml><encryption-asymmetric><encryption-symmetric>","1","1","3","2013-07-25 14:27:51","","0","1","","","","2011-03-24 18:06:17",""
"5423501","Can you do symmetric encryption on SAML attributes in SAML 2.0?","<p>Can you do symmetric encryption on SAML attributes in SAML 2.0?   We can seem to do asymmetric.  What are pros and cons?</p>
","<p>If you want to understand XML encryption, Don Eastlake's classic, Secure XML: The New Syntax for Signatures and Encryption, is still the best.  He explains the trade-offs in the designs for XML Enc and DSig, and has tips about implementation.  In the 9 years since he wrote it, many conventions have arisen about these trade-offs, which you can find via search.</p>

<p>My colleague, Ian, has listed the SAML 2.0 required algorithms, so you can focus on these in Eastlake's book.  And as you are probably aware, ""required"" in a spec means that if you limit yourself to just these, you will be interoperable.</p>

<p>Finally, this technique Scott describes, of generating a random symmetrical key, encrypting the data with it, and then encrypting the random symmetrical key w/ the public encryption key of your recipient is ofter called digital enveloping and is used everywhere in cryptography, from SSL to key management systems.</p>
","2331","<saml><encryption-asymmetric><encryption-symmetric>","1","0","3","2013-07-25 14:27:51","","0","1","","","","2011-03-24 18:06:17",""
"17453750","How do encryption algorithms know if they have the right key","<p>I know it is a bad idea to try to implement your own encryption algorithms. Here is one reason why I think it is not:</p>

<p>For example let's say I want to send <code>plainText = new byte[]{2,5,1,6,7}</code> to bob. </p>

<p>If I use AES encryption or another well know algorithm then I will have:</p>

<pre><code>cipherText = Aes.Encrypt(plainText, key, iv); // now I have some cipher text that is not readable to anyone if they do not have the key and iv vector.
</code></pre>

<p>if someone wants to decrypt that message then they will have to do something like:</p>

<pre><code>newPlainText = Aes.Decrypt(cipherText, key, iv);
</code></pre>

<p><strong>Now my question is how does AES knows if you entered the right key?</strong> I think it will be more secure to have an algorithm where it is not prompt to brute force attacks. In other words if the hacker knows you used AES it can keep trying a lot of passwords until the <code>method Aes.Decrypt</code> thorws no exception. Now consider this algorithm:</p>

<p>lets say I want to send the same byte array <code>{2,5,1,6,7}</code> to bob. My encryption algorithm may look like:</p>

<p>password is = ""securePassword"";</p>

<p>I will iterate though each byte on my plain text and do the Xor operator on the ASCII value of each character on the password. For instance the first byte will be <code>2 Xor (ASCII value of 's')</code> then the next value will be <code>5 Xor  (ASCII value of 'e')</code> at the end I will end up with <code>{2 Xor 's', 5 Xor 'e', 1 Xor 'c', 6 Xor 'u', 7 Xor 'r'}</code> <strong>The nice thing about this algorithm is that you will never now if you have the right key!</strong></p>

<p>with this algorithm it is not possible to know if you have the write key which makes it impossible I believe to decipher it. If you use the well know algorithms you are prompt to a brute force attack if your password is not to long. </p>

<p>*<em>So my question is how does well known symmetric encryption algorithms such as AES knows if you entered the right key? Having an algorithm where you don't know if you supply the right key will not be more secure? *</em></p>
","<p>The encryption algorithm <strong>doesn't</strong> know whether the input key is correct or not! The algorithm works just fine decrypting with any key; it'll just end up with garbage if you use the wrong key. The application using the encryption may be able to detect this once it's done, because the decrypted message will probably have invalid padding or will be malformed in other ways, but AES itself will never ""throw an exception"".</p>

<p>The algorithm you're describing is a <a href=""http://en.wikipedia.org/wiki/One-time_pad"" rel=""noreferrer"">one-time pad</a>. Its fatal flaw is that its keys must be at least as long as the message, and can never be reused -- if the same key is used with two messages, then the two messages <code>A ⊕ K</code> and <code>B ⊕ K</code> can be XORed together to yield <code>A ⊕ K ⊕ B ⊕ K = A ⊕ B</code> -- the key has now been removed from the messages, and it may be possible to guess what the messages are from this.</p>
","2326","<security><encryption><encryption-symmetric>","2","9","3","2016-01-15 03:22:07","17453985","2","","","","","2013-07-03 16:48:21",""
"17453750","How do encryption algorithms know if they have the right key","<p>I know it is a bad idea to try to implement your own encryption algorithms. Here is one reason why I think it is not:</p>

<p>For example let's say I want to send <code>plainText = new byte[]{2,5,1,6,7}</code> to bob. </p>

<p>If I use AES encryption or another well know algorithm then I will have:</p>

<pre><code>cipherText = Aes.Encrypt(plainText, key, iv); // now I have some cipher text that is not readable to anyone if they do not have the key and iv vector.
</code></pre>

<p>if someone wants to decrypt that message then they will have to do something like:</p>

<pre><code>newPlainText = Aes.Decrypt(cipherText, key, iv);
</code></pre>

<p><strong>Now my question is how does AES knows if you entered the right key?</strong> I think it will be more secure to have an algorithm where it is not prompt to brute force attacks. In other words if the hacker knows you used AES it can keep trying a lot of passwords until the <code>method Aes.Decrypt</code> thorws no exception. Now consider this algorithm:</p>

<p>lets say I want to send the same byte array <code>{2,5,1,6,7}</code> to bob. My encryption algorithm may look like:</p>

<p>password is = ""securePassword"";</p>

<p>I will iterate though each byte on my plain text and do the Xor operator on the ASCII value of each character on the password. For instance the first byte will be <code>2 Xor (ASCII value of 's')</code> then the next value will be <code>5 Xor  (ASCII value of 'e')</code> at the end I will end up with <code>{2 Xor 's', 5 Xor 'e', 1 Xor 'c', 6 Xor 'u', 7 Xor 'r'}</code> <strong>The nice thing about this algorithm is that you will never now if you have the right key!</strong></p>

<p>with this algorithm it is not possible to know if you have the write key which makes it impossible I believe to decipher it. If you use the well know algorithms you are prompt to a brute force attack if your password is not to long. </p>

<p>*<em>So my question is how does well known symmetric encryption algorithms such as AES knows if you entered the right key? Having an algorithm where you don't know if you supply the right key will not be more secure? *</em></p>
","<p>First off, the AES algorithm is exactly that. It's just a mathematical cipher. It can't know whether you're using the right key or not. The difference that provides this ability is usually the predefined way that the cipher primitive is combined with the key, IV and one or more ""blocks"" of the plaintext/ciphertext to produce the result; this is known as the cipher mode.</p>

<p>One of the most common modes is CBC, or Cipher Block Chaining. In this mode, the previously encrypted block of ciphertext is XORed with the next block of plaintext before it's run through the cipher (the first block is XORed with the IV). This mode requires the plaintext message length to be an exact multiple of the block size, and this is accomplished with padding.</p>

<p>Padding, combined with the ""chaining"" mode of encryption, provides a checksum of sorts. The last block must be a validly padded block (for messages that happen to be an exact length multiple of the block size, the last block is still padding; it's just all zeroes). If it's not, then either the wrong key was used, or the message was corrupted in transit (the chaining effect of the encryption means that any error introduced into the ciphertext is seen in that block of plaintext and in every later block). This is most likely the source of your exception when using the wrong key. However, CBC has been proven vulnerable to a chosen-ciphertext attack, allowing an attacker to recover the plaintext without knowing the key, if he is allowed to feed specially-modified blocks of ciphertext into a decryption algorithm and view the result.</p>

<p>Other modes have built-in message authentication, which prevents this type of attack. For instance, there's CCM, which is Counter with CBC-MAC. First, the message is hashed by running it through CBC encryption, but keeping only the last block of data (remember that cascading behavior? Turns out it's a great way to calculate a keyed hash). Then, the message and the hash digest are encrypted using Counter mode (the IV is XORed with a sequential value, producing a nonce that is XORed with each block of plaintext). If the wrong key is used, or the message has changed in transit, then the resulting message, when re-hashed, won't match the hash digest. It's really impossible to tell which is the case unless you're sure you have the right key, meaning that changing the ciphertext or brute-forcing the key will produce the same failure and in roughly the same amount of time, and so these modes are the gold standard for secure communications channels.</p>
","2326","<security><encryption><encryption-symmetric>","2","3","3","2016-01-15 03:22:07","17453985","2","","","","","2013-07-03 16:48:21",""
"17453750","How do encryption algorithms know if they have the right key","<p>I know it is a bad idea to try to implement your own encryption algorithms. Here is one reason why I think it is not:</p>

<p>For example let's say I want to send <code>plainText = new byte[]{2,5,1,6,7}</code> to bob. </p>

<p>If I use AES encryption or another well know algorithm then I will have:</p>

<pre><code>cipherText = Aes.Encrypt(plainText, key, iv); // now I have some cipher text that is not readable to anyone if they do not have the key and iv vector.
</code></pre>

<p>if someone wants to decrypt that message then they will have to do something like:</p>

<pre><code>newPlainText = Aes.Decrypt(cipherText, key, iv);
</code></pre>

<p><strong>Now my question is how does AES knows if you entered the right key?</strong> I think it will be more secure to have an algorithm where it is not prompt to brute force attacks. In other words if the hacker knows you used AES it can keep trying a lot of passwords until the <code>method Aes.Decrypt</code> thorws no exception. Now consider this algorithm:</p>

<p>lets say I want to send the same byte array <code>{2,5,1,6,7}</code> to bob. My encryption algorithm may look like:</p>

<p>password is = ""securePassword"";</p>

<p>I will iterate though each byte on my plain text and do the Xor operator on the ASCII value of each character on the password. For instance the first byte will be <code>2 Xor (ASCII value of 's')</code> then the next value will be <code>5 Xor  (ASCII value of 'e')</code> at the end I will end up with <code>{2 Xor 's', 5 Xor 'e', 1 Xor 'c', 6 Xor 'u', 7 Xor 'r'}</code> <strong>The nice thing about this algorithm is that you will never now if you have the right key!</strong></p>

<p>with this algorithm it is not possible to know if you have the write key which makes it impossible I believe to decipher it. If you use the well know algorithms you are prompt to a brute force attack if your password is not to long. </p>

<p>*<em>So my question is how does well known symmetric encryption algorithms such as AES knows if you entered the right key? Having an algorithm where you don't know if you supply the right key will not be more secure? *</em></p>
","<p>But to answer your question, the .NET AES provider <em>does</em> know if you're using the wrong key - but that's only because you asked it to.</p>

<p>You tried to encrypt the bytes:</p>

<pre><code>2,5,1,6,7
</code></pre>

<p>Using code something like:</p>

<pre><code>var plainText = new byte[] {2,5,1,6,7};
byte[] cipherText;

var key = new Byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
var iv = new Byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

//encrypt plaintext using one key
using (var aes = Aes.Create())
{
   var crypt = aes.CreateEncryptor(key, iv);
   cipherText = crypt.TransformFinalBlock(plainText, 0, plainText.Length);
}
</code></pre>

<p>In reality, AES only operates on 16-byte blocks. In order to transform your input data into something long enough that it can actually encrypt, the input bytes are first <em>padded</em>. When you construct an <code>Aes</code> class in .NET:</p>

<pre><code>using (var aes = Aes.Create())
{
}
</code></pre>

<p>the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.paddingmode.aspx"" rel=""nofollow"">default padding mode in <code>Aes</code> is PKCS#7 padding</a>. This causes the Aes encrypted to pad your <strong>plainText</strong> to:</p>

<pre><code>2, 5, 1, 6, 7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11
</code></pre>

<p>And <em>those</em> byes are then encrypted into:</p>

<pre><code>210, 49, 160, 164, 2, 53, 121, 254, 79, 249, 91, 111, 104, 173, 50, 207
</code></pre>

<p>When you decrypt those cipher bytes:</p>

<pre><code>byte[] recoveredPlainText;
using (var aes = Aes.Create())
{
   var key = new Byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
   var iv = new Byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
   var crypt = aes.CreateDecryptor(key, iv);
   recoveredPlainText = crypt.TransformFinalBlock(cipherText, 0, cipherText.Length);
}
</code></pre>

<p>Aes knows to ensure that proper PKCS#7 padding exists:</p>

<blockquote>
  <p>2, 5, 1, 6, 7 <strong>, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11</strong></p>
</blockquote>

<p>If you tried to decrypt with an invalid key (e.g. <code>{1,0,0, ..., 0}</code>), you will end up with plainText that does not contain valid PKCS#7 padding:</p>

<blockquote>
  <p>154,203,183,159,52,162,186,41,127,162,152,75,114,109,107,74</p>
</blockquote>

<p>And so the Aes decryptor will throw an exception. </p>

<p>You can still decrypt the bytes with an invalid key, all you have to do is tell Aes not to look for any padding by setting <code>Padding = PaddingMode.None</code>:</p>

<pre><code>byte[] recoveredPlainText;
using (var aes = Aes.Create())
{
   aes.Padding = PaddingMode.None;
   var key = new Byte[] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
   var iv = new Byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
   var crypt = aes.CreateDecryptor(key, iv);
   recoveredPlainText = crypt.TransformFinalBlock(cipherText, 0, cipherText.Length);
}
</code></pre>

<p><strong>tl;dr</strong>: It knows because you used <strong>Padding</strong>.</p>

<blockquote>
  <p><strong>Note</strong>: Any code is released into the public domain. No attribution required.</p>
</blockquote>
","2326","<security><encryption><encryption-symmetric>","2","1","3","2016-01-15 03:22:07","17453985","2","","","","","2013-07-03 16:48:21",""
"9386693","Android AES password-based encryption using one key and random IV for every message","<p>I'm currently implementing a symmetric en-/decryption using AES 256 on Android, inspired by this post:
<a href=""https://stackoverflow.com/questions/992019/java-256bit-aes-encryption/992413#992413"">Java 256bit AES Encryption</a>.
The purpose of my implementation is that I want to encrypt the data in a database.</p>

<p>For key generation I use the following constructor which takes a char[] password:</p>

<pre><code>public Cryptography(char[] password) throws NoSuchAlgorithmException,
        InvalidKeySpecException, NoSuchPaddingException {

    SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBEWITHSHA256AND256BITAES-CBC-BC"");
    KeySpec spec = new PBEKeySpec(password, salt, 1024, 256);
    secretKey = new SecretKeySpec(factory.generateSecret(spec).getEncoded(), ""AES"");
    cipher = Cipher.getInstance(AES/CBC/PKCS5Padding);
}
</code></pre>

<p>So when I start my Activity in Android I initialize a new instance of my Cryptography class and therefore get a generated key. The salt is a fixed random byte[] of 16 bytes. So that means that I always get the same key. The reason for that later.</p>

<p>Now after I got an object in one Activity I can use the following encrypt and decrypt methods with always the same key:</p>

<pre><code>public byte[] encrypt(String cleartext) throws InvalidKeyException,
        IllegalBlockSizeException, BadPaddingException,
        UnsupportedEncodingException, InvalidParameterSpecException {

    cipher.init(Cipher.ENCRYPT_MODE, secretKey);

    byte[] encText = cipher.doFinal(cleartext.getBytes(CHARSET_NAME));
    byte[] iv = cipher.getParameters()
            .getParameterSpec(IvParameterSpec.class).getIV();

    byte[] enc = new byte[IV_SIZE + encText.length];

    for (int i = 0; i &lt; enc.length; i++) {
        if (i &lt; IV_SIZE)
            enc[i] = iv[i];
        else if (i &lt; enc.length)
            enc[i] = encText[i - IV_SIZE];
    }

    return enc;
}

public String decrypt(byte[] encryptedText) throws InvalidKeyException,
        InvalidAlgorithmParameterException, UnsupportedEncodingException,
        IllegalBlockSizeException, BadPaddingException {

    byte[] iv = new byte[IV_SIZE];
    byte[] dec = new byte[encryptedText.length - IV_SIZE];

    for (int i = 0; i &lt; encryptedText.length; i++) {
        if (i &lt; IV_SIZE)
            iv[i] = encryptedText[i];
        else if (i &lt; encryptedText.length)
            dec[i - IV_SIZE] = encryptedText[i];
    }

    cipher.init(Cipher.DECRYPT_MODE, secretKey, new IvParameterSpec(iv));

    return new String(cipher.doFinal(dec), CHARSET_NAME);
}
</code></pre>

<p>As you can see, I save a fresh new IV along with the ciphertext everytime I encrypt a message.</p>

<p>In conclusion: I use ONE encryption key, ONE random salt and a new IV for EVERY field in a database table.</p>

<p>First I wanted to generate a new key with a new salt and a new IV everytime I encrypt ONE field in the database table and save the required salt and IV with along with the ciphertext, or at least for one table row. But the reason why I did it like above mentioned is, because generating a key on an Android device takes to much time. I tested in on an emulator, but it took about two seconds for generating a key. This is why I just generated one key when an Activity is started.</p>

<p>So finally my question:
With my approach, is it secure enough by using just one key, but fresh random IV's for every message? Currently, I don't see another way to make it as secure as possible by keeping it in balance with performance.</p>

<p>I hope it is clear enough what I wrote and somebody could give me some advice on that.</p>

<p>Kind Regards</p>

<p>xoidberg</p>
","<p>I believe the question is not relevant for you (xoidberg), but it might be relevant for some other people.</p>

<p>From what I understand - you use the salt to create a (securely random) key from password. If every user has a random (different) salt - it is ok. Otherwise it might be problematic.</p>

<p>I believe that this is what you did, so it seems (to me) to be ok.</p>

<p>I just want to mention that usually you want to use salts when you save hash function of some values (usually password). Hash functions like MD5 or the SHAs do not have a key, and you must add randomness for this purpose. This is why you need the salt, and this is why in this case you usually need random salt for each value (if you just save passwords hashes with the same salt, one can detect the most common hashes and learn that the password of the users with the most common hash is 123456). In your case - every user needs a unique salt.</p>

<p>About the IV - you really need a random one each time (so it's ok).</p>
","2318","<android><security><aes><password-protection><encryption-symmetric>","3","1","1","2013-12-22 11:05:06","","0","6","-1","","2017-05-23 12:31:23","2012-02-21 23:00:43",""
"28290973","GCM authenticated encryption function for PHP","<p>I need to run the following on a shared web hosting account running PHP engine Version 5.4.34. (I.e. I can't install any 3rd party libraries.)</p>

<p>Is there a standard function to implement <a href=""http://en.wikipedia.org/wiki/Galois/Counter_Mode"" rel=""nofollow"">Galois/Counter Mode</a> (GCM) authenticated encryption (of <a href=""http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""nofollow"">AES</a> standard) on a binary string?</p>
","<p>If OpenSSL is not installed then, there is no other method besides looking for a plain PHP implementation on the web.</p>

<p>If it is installed, you can check with <a href=""http://php.net/manual/en/function.openssl-get-cipher-methods.php"" rel=""nofollow""><code>openssl_get_cipher_methods()</code></a> whether the installed version supports GCM. Use it like this:</p>

<pre><code>$strong;
$iv = openssl_random_pseudo_bytes(12, $strong);
if (!$strong) {
        exit(1);
}
$key = openssl_random_pseudo_bytes(12, $strong);
if (!$strong) {
        exit(1);
}

$data = ""some string"";
$ciphertext = openssl_encrypt($data, ""aes-128-gcm"", $key, 0, $iv);
$decrypted = openssl_decrypt($ciphertext, ""aes-128-gcm"", $key, 0, $iv);
var_dump($data == $decrypted);
</code></pre>

<p>Thanks to Scott Arciszewski for noting in the comments that this doesn't work at all for PHP &lt; 7.1, because the authentication tag cannot be retrieved during encryption and therefore the decryption will always fail without it.</p>

<p>If mcrypt is installed, you may check if GCM is available there through <a href=""http://php.net/manual/en/function.mcrypt-list-modes.php"" rel=""nofollow""><code>mcrypt_list_modes</code></a>, but I highly doubt it.</p>
","2316","<php><encryption><encryption-symmetric><aes-gcm>","0","0","1","2016-04-28 14:16:25","28295221","0","","","","","2015-02-03 03:40:42",""
"34209139","ESAPI Symmetric Encryption using JavaEncryptor","<p>I am testing basic stuff in ESAPI, and I ran across <a href=""https://owasp-esapi-java.googlecode.com/svn/trunk/documentation/esapi4java-core-2.0-symmetric-crypto-user-guide.html"" rel=""nofollow"">this symmetric encryption tutorial</a> and copied and pasted the code, (along with importing the ESAPI 2.1.0 jar file, ESAPI.properties and validation.properties in the 'src' directory in Eclipse)</p>

<p>Modified code from the tutorial:</p>

<pre><code>import org.owasp.esapi.crypto.CipherText;
import org.owasp.esapi.crypto.PlainText;
import org.owasp.esapi.errors.EncryptionException;
import org.owasp.esapi.reference.crypto.JavaEncryptor;

public class ESAPIsymEncTester {

    public static void main(String[] args) throws EncryptionException{

        String myplaintext = ""My plaintext"";

            CipherText ciphertext =
                    JavaEncryptor.getInstance().encrypt( new PlainText(myplaintext) );
        PlainText recoveredPlaintext = JavaEncryptor.getInstance().decrypt(ciphertext);
            assert myplaintext.equals( recoveredPlaintext.toString() );

            System.out.println(""recovered plaintext: "" + recoveredPlaintext.toString());
    }
}
</code></pre>

<p>However, when I run this in Eclipse Luna using Java 1.8, I get this stack trace:</p>

<pre><code>Exception in thread ""main"" org.owasp.esapi.errors.EncryptionException: Encryption failure: Invalid key exception.
at org.owasp.esapi.reference.crypto.JavaEncryptor.encrypt(JavaEncryptor.java:526)
at org.owasp.esapi.reference.crypto.JavaEncryptor.encrypt(JavaEncryptor.java:338)
at com.fate.engine.test.ESAPIsymEncTester.main(ESAPIsymEncTester.java:15)
Caused by: java.security.InvalidKeyException: Invalid AES key length: 96 bytes
at com.sun.crypto.provider.AESCipher.engineGetKeySize(AESCipher.java:495)
at javax.crypto.Cipher.passCryptoPermCheck(Cipher.java:1062)
at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1033)
at javax.crypto.Cipher.init(Cipher.java:1367)
at javax.crypto.Cipher.init(Cipher.java:1301)
at org.owasp.esapi.reference.crypto.JavaEncryptor.encrypt(JavaEncryptor.java:504)
... 2 more
</code></pre>

<p>I am not sure if this is a bug in the JavaEncryptor.java code, or if I am pulling something that I misconfigured from the ESAPI.properties file.</p>

<p>I replaced the master key and salt by running the JavaEncryptor and copy/pasting the resultant key/salt.</p>

<p>If it is a bug, I will email the ESAPI guys to get clarification on how I can fix it, since I looked through the JavaEncryptor code and am not entirely clear where all of the pieces are coming from.</p>

<blockquote>
  <p>Encryptor.MasterKey=WppLubGgsc/p6HhvcPf2LA==</p>
  
  <p>Encryptor.MasterSalt=YokRN9mjMUTZspEbzBY90NA6EC8=    </p>
  
  <p>Encryptor.PreferredJCEProvider= </p>
  
  <p>Encryptor.EncryptionAlgorithm=AES</p>
  
  <p>Encryptor.CipherTransformation=AES/CBC/PKCS5Padding</p>
  
  <p>Encryptor.cipher_modes.combined_modes=GCM,CCM,IAPM,EAX,OCB,CWC</p>
  
  <p>Encryptor.cipher_modes.additional_allowed=CBC</p>
  
  <p>Encryptor.EncryptionKeyLength=128 </p>
  
  <p>Encryptor.ChooseIVMethod=random</p>
  
  <p>Encryptor.fixedIV=0x000102030405060708090a0b0c0d0e0f</p>
  
  <p>Encryptor.CipherText.useMAC=true </p>
  
  <p>Encryptor.PlainText.overwrite=true</p>
  
  <p>Encryptor.HashAlgorithm=SHA-512   ***** </p>
  
  <p>Encryptor.HashIterations=1024</p>
  
  <p>Encryptor.DigitalSignatureAlgorithm=SHA1withDSA</p>
  
  <p>Encryptor.DigitalSignatureKeyLength=1024</p>
  
  <p>Encryptor.RandomAlgorithm=SHA1PRNG </p>
  
  <p>Encryptor.CharacterEncoding=UTF-8</p>
  
  <p>Encryptor.KDF.PRF=HmacSHA1   *****</p>
</blockquote>
","<p>You forgot to place the most important part of your log into the question:</p>

<pre><code>Dec 11, 2015 8:05:24 AM org.owasp.esapi.reference.JavaLogFactory$JavaLogger log
WARNING: [SECURITY FAILURE Anonymous:null@unknown -&gt; /JavaEncryptor] Encryption key length mismatch. ESAPI.EncryptionKeyLength is 128 bits, but length of actual encryption key is 24 bits.  Did you remember to regenerate your master key (if that is what you are using)???
</code></pre>

<p>This is a clue that there is something here that the library expects you to do.  </p>

<p>It seems to me that you probably have the default encryptor properties set like this in <code>esapi.properties</code>:</p>

<pre><code>Encryptor.MasterKey=owasp1
Encryptor.MasterSalt=testtest
</code></pre>

<p>The class <code>JavaEncryptor</code> has a main method that will generate valid properties for you.  Run it in eclipse or via the command line.  It will give you values to replace in <code>esapi.properties</code>, like this:</p>

<pre><code>Dec 11, 2015 8:10:25 AM org.owasp.esapi.reference.JavaLogFactory$JavaLogger log
OFF: [SECURITY AUDIT Anonymous:null@unknown -&gt; /SecurityProviderLoader] No Encryptor.PreferredJCEProvider specified.
SecurityConfiguration for Encryptor.EncryptionKeyLength not an integer in ESAPI.properties. Using default: 128
Generating a new secret master key
    use '-print' to also show available crypto algorithms from all the security providers
SecurityConfiguration for Encryptor.EncryptionKeyLength not an integer in ESAPI.properties. Using default: 128

Copy and paste these lines into your ESAPI.properties

#==============================================================
Encryptor.MasterKey=qW0Qw+8eb1Zu1MBv5djwqA==
Encryptor.MasterSalt=b0VappFU1Hd6LjIt+TGYqQlfrdU=
#==============================================================
</code></pre>

<p>Once I did that, your code example runs just fine.  </p>
","2304","<java><eclipse><encryption-symmetric><esapi>","1","1","2","2015-12-15 05:39:40","","1","","2555197","","2015-12-11 17:17:12","2015-12-10 18:27:31",""
"34209139","ESAPI Symmetric Encryption using JavaEncryptor","<p>I am testing basic stuff in ESAPI, and I ran across <a href=""https://owasp-esapi-java.googlecode.com/svn/trunk/documentation/esapi4java-core-2.0-symmetric-crypto-user-guide.html"" rel=""nofollow"">this symmetric encryption tutorial</a> and copied and pasted the code, (along with importing the ESAPI 2.1.0 jar file, ESAPI.properties and validation.properties in the 'src' directory in Eclipse)</p>

<p>Modified code from the tutorial:</p>

<pre><code>import org.owasp.esapi.crypto.CipherText;
import org.owasp.esapi.crypto.PlainText;
import org.owasp.esapi.errors.EncryptionException;
import org.owasp.esapi.reference.crypto.JavaEncryptor;

public class ESAPIsymEncTester {

    public static void main(String[] args) throws EncryptionException{

        String myplaintext = ""My plaintext"";

            CipherText ciphertext =
                    JavaEncryptor.getInstance().encrypt( new PlainText(myplaintext) );
        PlainText recoveredPlaintext = JavaEncryptor.getInstance().decrypt(ciphertext);
            assert myplaintext.equals( recoveredPlaintext.toString() );

            System.out.println(""recovered plaintext: "" + recoveredPlaintext.toString());
    }
}
</code></pre>

<p>However, when I run this in Eclipse Luna using Java 1.8, I get this stack trace:</p>

<pre><code>Exception in thread ""main"" org.owasp.esapi.errors.EncryptionException: Encryption failure: Invalid key exception.
at org.owasp.esapi.reference.crypto.JavaEncryptor.encrypt(JavaEncryptor.java:526)
at org.owasp.esapi.reference.crypto.JavaEncryptor.encrypt(JavaEncryptor.java:338)
at com.fate.engine.test.ESAPIsymEncTester.main(ESAPIsymEncTester.java:15)
Caused by: java.security.InvalidKeyException: Invalid AES key length: 96 bytes
at com.sun.crypto.provider.AESCipher.engineGetKeySize(AESCipher.java:495)
at javax.crypto.Cipher.passCryptoPermCheck(Cipher.java:1062)
at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1033)
at javax.crypto.Cipher.init(Cipher.java:1367)
at javax.crypto.Cipher.init(Cipher.java:1301)
at org.owasp.esapi.reference.crypto.JavaEncryptor.encrypt(JavaEncryptor.java:504)
... 2 more
</code></pre>

<p>I am not sure if this is a bug in the JavaEncryptor.java code, or if I am pulling something that I misconfigured from the ESAPI.properties file.</p>

<p>I replaced the master key and salt by running the JavaEncryptor and copy/pasting the resultant key/salt.</p>

<p>If it is a bug, I will email the ESAPI guys to get clarification on how I can fix it, since I looked through the JavaEncryptor code and am not entirely clear where all of the pieces are coming from.</p>

<blockquote>
  <p>Encryptor.MasterKey=WppLubGgsc/p6HhvcPf2LA==</p>
  
  <p>Encryptor.MasterSalt=YokRN9mjMUTZspEbzBY90NA6EC8=    </p>
  
  <p>Encryptor.PreferredJCEProvider= </p>
  
  <p>Encryptor.EncryptionAlgorithm=AES</p>
  
  <p>Encryptor.CipherTransformation=AES/CBC/PKCS5Padding</p>
  
  <p>Encryptor.cipher_modes.combined_modes=GCM,CCM,IAPM,EAX,OCB,CWC</p>
  
  <p>Encryptor.cipher_modes.additional_allowed=CBC</p>
  
  <p>Encryptor.EncryptionKeyLength=128 </p>
  
  <p>Encryptor.ChooseIVMethod=random</p>
  
  <p>Encryptor.fixedIV=0x000102030405060708090a0b0c0d0e0f</p>
  
  <p>Encryptor.CipherText.useMAC=true </p>
  
  <p>Encryptor.PlainText.overwrite=true</p>
  
  <p>Encryptor.HashAlgorithm=SHA-512   ***** </p>
  
  <p>Encryptor.HashIterations=1024</p>
  
  <p>Encryptor.DigitalSignatureAlgorithm=SHA1withDSA</p>
  
  <p>Encryptor.DigitalSignatureKeyLength=1024</p>
  
  <p>Encryptor.RandomAlgorithm=SHA1PRNG </p>
  
  <p>Encryptor.CharacterEncoding=UTF-8</p>
  
  <p>Encryptor.KDF.PRF=HmacSHA1   *****</p>
</blockquote>
","<p>Here's what I'm going to suggest... grab the <strong><em>TEST</em></strong> version of ESAPI.properties from GitHub (""wget <a href=""https://github.com/ESAPI/esapi-java-legacy/blob/master/src/test/resources/esapi/ESAPI.properties"" rel=""nofollow"">https://github.com/ESAPI/esapi-java-legacy/blob/master/src/test/resources/esapi/ESAPI.properties</a>"" should work, you use 'git' or save if from your browser), put it in place, and first use it AS-IS. If it fails, then there is a problem in you tweaked code. If it works, there was a problem in your ESAPI.properties file. Many people already suggested what to look for in terms of what might be wrong, but the differences should be minor enough that you should be able to spot them by diff'ing yours versus the TEST version in src/test/resources/esapi/ESAPI.properties. (The production version, incidentally, is under 'configuration/esapi/ESAPI.properties' and is not included with the jar because of some bug in the pom.xml which I don't know how to fix as I am not a Maven guru.)</p>

<p>If you have further questions, contact me at my Gmail account which you should be able to find easily enough via Google with my name and the term ""OWASP"". Once we figure out an answer that works for you, either you or I can post an answer back to Stack Overflow, but I don't frequent this forum enough to regularly monitor it. (Although, come to think of it, I probably do get notified of replies.)</p>

<p>Hope this helps,</p>

<p>-kevin w. wall / ESAPI crypto developer and co-project lead</p>
","2304","<java><eclipse><encryption-symmetric><esapi>","1","1","2","2015-12-15 05:39:40","","1","","2555197","","2015-12-11 17:17:12","2015-12-10 18:27:31",""
"6291645","simple symmetric encryption algorithm in php","<p>I am looking for simple symmtric algorithm (low on processing power) in php.</p>

<p>An encrypted value will be stored as a session_id on client end. And will have logged in status saved in it. </p>

<p>Also I need to also decrypt it on server side.
Please suggest....</p>
","<p>The only constraint you've mentioned is low processing impact - but you've provided no details of the strength of the algorithm required.</p>

<p>Also, if the encryption is implemented in PHP, then it will be several orders of magnitude less efficient than native code as provided by the mcrypt extension (and others).</p>

<blockquote>
  <p>An encrypted value will be stored as a session_id</p>
</blockquote>

<p>Why????</p>

<p>The session id is randomly generated and therefore not predictable / guessable. And sessions provide a mechanism for storing data on the server. If the issue is to maintain secure data outside of the session due to shared hosting constraints, then this is <strong>not</strong> the right way to solve the problem.</p>

<p>There are native PHP implementations of various algorithms, TEA being an obvious choice, and str_rot13() is available even if mcrypt/openssl extensions are unavailable. But I can see no logical application of these methods to <strong>any</strong> problem.</p>
","2236","<php><encryption-symmetric>","0","0","2","2011-06-09 11:53:12","","2","","199397","","2011-06-09 11:18:12","2011-06-09 10:52:26",""
"6291645","simple symmetric encryption algorithm in php","<p>I am looking for simple symmtric algorithm (low on processing power) in php.</p>

<p>An encrypted value will be stored as a session_id on client end. And will have logged in status saved in it. </p>

<p>Also I need to also decrypt it on server side.
Please suggest....</p>
","<p>I suggest you use the mcrypt-extension. <a href=""http://de3.php.net/manual/en/mcrypt.examples.php"" rel=""nofollow"">there</a> you go for some simple examples.</p>

<p>It offers you many symmetric encryptions.</p>
","2236","<php><encryption-symmetric>","0","0","2","2011-06-09 11:53:12","","2","","199397","","2011-06-09 11:18:12","2011-06-09 10:52:26",""
"12292727","Can I decrypt data in C++ encrypted via PHP?","<p>I'm using mcrypt_encrypt and base64_encode to encrypt data in php. I've tried decrypting the data in C++, but to no avail. I have C++ Rijndael logic that I've used for years, as well as base64_decode logic. The latter decodes strings encoded by php's base64_encode perfectly. I'm using CBC with both the php and C++. I've experimented with different block sizes and so forth but to no avail. Any advice greatly appreciated.</p>

<p>This is my test logic:</p>

<p>PHP</p>

<pre><code>$key = ""qwertyuiopasdfghjklzxcvbnmqwerty"";  
$iv = ""12345678901234561234567890123456"";  
$text = ""this is the text to encrypt"";
$crypttext = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $text, MCRYPT_MODE_CBC, $iv);
echo base64_encode($crypttext).""&lt;br/&gt;"";
</code></pre>

<p>C++</p>

<pre><code>char* base64encode = "".. output from php..."";  
unsigned char binaryData[256];  
int binaryNumBytes;  
char result[256];  
base64_decode(reinterpret_cast&lt;unsigned char*&gt;(base64encode), strlen(base64encode),       binaryData, &amp;binaryNumBytes, false);  
Encryption::Rijndael rijndael;  
char* key = ""qwertyuiopasdfghjklzxcvbnmqwerty"";  
char* iv = ""12345678901234561234567890123456"";  
rijndael.Init(Encryption::Rijndael::CBC, reinterpret_cast&lt;const char*&gt;(key), 32, 32,    reinterpret_cast&lt;const char*&gt;(iv));  
rijndael.Decrypt(reinterpret_cast&lt;const char*&gt;(binaryData), reinterpret_cast&lt;char*&gt;(result), 32);  
cout &lt;&lt; result &lt;&lt; endl; 
</code></pre>

<p>EDIT: If I use ECB mode I can get this to work. There is some issue then with CBC between the 2.</p>
","<p>Using ECB mode was the way to go.</p>
","2168","<php><c++><encryption-symmetric>","2","0","1","2014-12-15 11:07:30","14178965","5","","1076691","","2012-09-06 18:23:16","2012-09-06 03:54:01",""
"15254030","Recommended encryption method for recoverable passwords","<p>I have an app which requires keeping multiple user passwords, with the requirement that they be recoverable.</p>

<p>I'm thinking about encrypting the passwords using the master password + another encryption mechanism.</p>

<p>The key for the encryption will be kept in an external system and can be retrieved using an API. The thing is i'm not sure if:</p>

<ol>
<li>This method is secure enough</li>
<li>which additional mechanism should i choose for the encryption.</li>
</ol>

<p>Thanks.</p>

<p>EDIT--------------
I know it's closed...but i do want to clarify - i have to have the ability to decrypt, this is a major part in my app...with that been said i think i got my answer with AES algo. I dont need hashing since hashing is irreversible</p>
","<p>Stack overflow is a forum for helping you with coding issues.</p>

<p>This question is more suited to <a href=""http://security.stackexchange.com"">The security forum</a>. </p>

<p>That said, there are some standardized guidelines for encryption.</p>

<p>When implementing a symmetric encryption cipher, it's best to use the <a href=""http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""nofollow"">AES Algorithm</a>. This is the most secure symmetric key block cipher to date, and is the standard for what we currently consider as ""protected"".</p>

<p>If you're looking to <a href=""http://en.wikipedia.org/wiki/Hash_function"" rel=""nofollow"">hash</a> passwords, which is the standard for password storage, then there is no need for a key. Use the <a href=""http://en.wikipedia.org/wiki/SHA-1"" rel=""nofollow"">SHA1</a> algorithm. In terms of the size of the output, it is the more secure hashing algorithm that is currently in use. Other options are <a href=""http://en.wikipedia.org/wiki/SHA-2"" rel=""nofollow"">SHA256</a> and <a href=""http://en.wikipedia.org/wiki/SHA-2"" rel=""nofollow"">SHA512</a></p>

<p><strong>Edit</strong>: Oh the times they are a changing. And so are the hashing algorithms! People are moving from the SHA family of hashing algorithms to  Bcrypt, which has several other features like introducing a cost factor to protect against rainbow tables. </p>
","2154","<java><php><encryption><encryption-symmetric>","1","5","4","2015-05-04 07:48:13","15254096","1","","645421","","2013-03-06 17:57:12","2013-03-06 17:28:09","2013-03-06 17:40:16"
"15254030","Recommended encryption method for recoverable passwords","<p>I have an app which requires keeping multiple user passwords, with the requirement that they be recoverable.</p>

<p>I'm thinking about encrypting the passwords using the master password + another encryption mechanism.</p>

<p>The key for the encryption will be kept in an external system and can be retrieved using an API. The thing is i'm not sure if:</p>

<ol>
<li>This method is secure enough</li>
<li>which additional mechanism should i choose for the encryption.</li>
</ol>

<p>Thanks.</p>

<p>EDIT--------------
I know it's closed...but i do want to clarify - i have to have the ability to decrypt, this is a major part in my app...with that been said i think i got my answer with AES algo. I dont need hashing since hashing is irreversible</p>
","<p>PHP supports SHA1, manual: <a href=""http://php.net/manual/en/function.sha1.php"" rel=""nofollow"">http://php.net/manual/en/function.sha1.php</a></p>

<blockquote>
  <p>if (sha1($str) === 'd0be2dc421be4fcd0172e5afceea3970e2f3d940') {
      echo ""Would you like a green or red apple?""; }</p>
</blockquote>

<p>And JAVA SHA1 example: <a href=""http://www.herongyang.com/Cryptography/SHA1-Message-Digest-in-Java.html"" rel=""nofollow"">http://www.herongyang.com/Cryptography/SHA1-Message-Digest-in-Java.html</a></p>

<p>You can combine SALT + PSK(SHA1) with AES encryption.</p>

<p>I recommended use to SYSTEM SALT (generated SHA512 key on system + SALT on user + PSK SHA512 for login).</p>

<p>Or better use PBKDF2 if you cant use either, bcrypt or scrypt with SHA2.</p>
","2154","<java><php><encryption><encryption-symmetric>","1","0","4","2015-05-04 07:48:13","15254096","1","","645421","","2013-03-06 17:57:12","2013-03-06 17:28:09","2013-03-06 17:40:16"
"15254030","Recommended encryption method for recoverable passwords","<p>I have an app which requires keeping multiple user passwords, with the requirement that they be recoverable.</p>

<p>I'm thinking about encrypting the passwords using the master password + another encryption mechanism.</p>

<p>The key for the encryption will be kept in an external system and can be retrieved using an API. The thing is i'm not sure if:</p>

<ol>
<li>This method is secure enough</li>
<li>which additional mechanism should i choose for the encryption.</li>
</ol>

<p>Thanks.</p>

<p>EDIT--------------
I know it's closed...but i do want to clarify - i have to have the ability to decrypt, this is a major part in my app...with that been said i think i got my answer with AES algo. I dont need hashing since hashing is irreversible</p>
","<p>Here is your mandatory read: <a href=""http://www.codinghorror.com/blog/2007/09/youre-probably-storing-passwords-incorrectly.html"" rel=""nofollow noreferrer"">You're Probably Storing Passwords Incorrectly</a></p>

<p>Now, on the question of how to store ciphered passwords. Don't. Store hashed passwords.</p>

<hr>

<p>You are probably asking to solve the wrong problem. I suspect you want to create a feature to recover passwords... in that case I'll send you <a href=""https://stackoverflow.com/questions/13330033/recover-reset-lost-password-options-via-email/13330223#13330223"">to one of my previous answers</a> if you don't mind.</p>

<hr>

<p>As an alternative, you may be wanting to store multiple keys for a single user on a client machine. If this is what you want, then your best bet is to secure it with the security the that the operating system offers you. You should not expect to do better than ciphered files for the user provided by means of the operating system.</p>

<hr>

<p>Otherwise, you basically designing the way over which all of the stored passwords are going to be stolen. Either because what is considered secure now may no longer be considered secure tomorrow, or because we are humans (right?) and we can commit mistakes.</p>

<p>Anyway, your security will be at best as strong as the authentication process of the secondary API (I mean, the one to retrieve the key to decipher the passwords). You do mention Java, what are the chances of your java code being reverse engineered to discover how to get the passwords?</p>
","2154","<java><php><encryption><encryption-symmetric>","1","1","4","2015-05-04 07:48:13","15254096","1","","645421","","2013-03-06 17:57:12","2013-03-06 17:28:09","2013-03-06 17:40:16"
"15254030","Recommended encryption method for recoverable passwords","<p>I have an app which requires keeping multiple user passwords, with the requirement that they be recoverable.</p>

<p>I'm thinking about encrypting the passwords using the master password + another encryption mechanism.</p>

<p>The key for the encryption will be kept in an external system and can be retrieved using an API. The thing is i'm not sure if:</p>

<ol>
<li>This method is secure enough</li>
<li>which additional mechanism should i choose for the encryption.</li>
</ol>

<p>Thanks.</p>

<p>EDIT--------------
I know it's closed...but i do want to clarify - i have to have the ability to decrypt, this is a major part in my app...with that been said i think i got my answer with AES algo. I dont need hashing since hashing is irreversible</p>
","<blockquote>
  <p>i'm not sure if [...] This method is secure enough</p>
</blockquote>

<p>No it isn't. Any method of password storage that allows the recovery of a password rather than a secure method of resetting it is not considered to be 'secure' by most. Additionally, how does is the user sent their 'recovered' password? Because using email to do this is just about the worst possible method.</p>

<p>If you cannot get around having to be able to ""recover"" the password, then what you want is <em>asymmetric</em> [aka public key] encryption. The password would be encrypted by the public key and stored in the database for comparison. The private key should be kept separate, ideally offline on a memory stick in a safe, and protected by at least one password, if not two or more passwords held by separate people.</p>

<p>As others have mentioned this question is better suited to <a href=""http://security.stackexchange.com"">http://security.stackexchange.com</a> than here, but it has already been asked <em>many</em> times, and you will get more strongly-worded encouragements about <em>not</em> doing it this way at all rather than solutions.</p>
","2154","<java><php><encryption><encryption-symmetric>","1","1","4","2015-05-04 07:48:13","15254096","1","","645421","","2013-03-06 17:57:12","2013-03-06 17:28:09","2013-03-06 17:40:16"
"15640857","Stopping decryption before EOF throws exception: Padding is invalid and cannot be removed","<p>This is the scenario we have: We have huge encrypted files, in the order of gigabytes that we can decrypt correctly if we read them until the end. 
The problem arises when we are reading and detect some flag in the file, then we stop reading and call reader.Close(), what happens is that a CryptographicException: ""Padding is invalid and cannot be removed."" is thrown. 
I have this small console app that reproduce this behavior, to test it just run it, it will create a file in your C:\ drive and then it will read line by line when pressing any key, and will stop when pressing 'q'.</p>

<pre><code>using System;
using System.IO;
using System.Security.Cryptography;

namespace encryptSample
{
    class Program
    {
        static void Main(string[] args)
        {
            var transform = CreateCryptoTransform(true);
            // first create encrypted file
            using (FileStream destination = new FileStream(""c:\\test_enc.txt"", FileMode.OpenOrCreate, FileAccess.Write, FileShare.ReadWrite))
            {
                using (CryptoStream cryptoStream = new CryptoStream(destination, transform, CryptoStreamMode.Write))
                {
                    using (StreamWriter source = new StreamWriter(cryptoStream))
                    {
                        for (int i = 0; i &lt; 1000; i++)
                        {
                            source.WriteLine(""This is just random text to fill the file and show what happens when I stop reading in the middle - "" + i);
                        }
                        // Also tried this line, but is the same with or without it
                        cryptoStream.FlushFinalBlock();
                    }
                }
            }

            StreamReader reader;
            ICryptoTransform transformDec;
            CryptoStream cryptoStreamReader;

            transformDec = CreateCryptoTransform(false);
            FileStream fileStream = new FileStream(""c:\\test_enc.txt"", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            cryptoStreamReader = new CryptoStream(fileStream, transformDec, CryptoStreamMode.Read);
            reader = new StreamReader(cryptoStreamReader);

            while (Console.In.ReadLine() != ""q"")
            {
                Console.WriteLine(reader.ReadLine());
            }

            try
            {
                cryptoStreamReader.Close();
                reader.Close();
                reader.Dispose();
            }
            catch (CryptographicException ex)
            {
                if (reader.EndOfStream)
                    throw;

            }
        }

        private static ICryptoTransform CreateCryptoTransform(bool encrypt)
        {
            byte[] salt = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // Must be at least eight bytes.  MAKE THIS SALTIER!
            const int iterations = 1042; // Recommendation is &gt;= 1000.
            const string password = ""123456"";

            AesManaged aes = new AesManaged();
            aes.BlockSize = aes.LegalBlockSizes[0].MaxSize;
            aes.KeySize = aes.LegalKeySizes[0].MaxSize;
            // NB: Rfc2898DeriveBytes initialization and subsequent calls to   GetBytes   must be eactly the same, including order, on both the encryption and decryption sides.
            Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(password, salt, iterations);
            aes.Key = key.GetBytes(aes.KeySize / 8);
            aes.IV = key.GetBytes(aes.BlockSize / 8);
            aes.Mode = CipherMode.CBC;
            aes.Padding = PaddingMode.PKCS7;
            ICryptoTransform transform = encrypt ? aes.CreateEncryptor(aes.Key, aes.IV) : aes.CreateDecryptor(aes.Key, aes.IV);
            return transform;
        }

    }
}
</code></pre>

<p>In our original class, we do the reader.Close during the Dispose(). 
My question is, is it valid to check if reader.EndOfStream is false and then capture the CryptographicException? Or there is something wrong in the encryption/decryption methods? Maybe we are missing something.</p>

<p>Regards!</p>
","<p>Can you turn off padding?</p>

<pre><code>// aes.Padding = PaddingMode.PKCS7;
aes.Padding = PaddingMode.None;
</code></pre>
","2137","<c#><aes><encryption><encryption-symmetric>","9","0","5","2019-03-08 16:34:07","","2","3","","","","2013-03-26 15:23:06",""
"15640857","Stopping decryption before EOF throws exception: Padding is invalid and cannot be removed","<p>This is the scenario we have: We have huge encrypted files, in the order of gigabytes that we can decrypt correctly if we read them until the end. 
The problem arises when we are reading and detect some flag in the file, then we stop reading and call reader.Close(), what happens is that a CryptographicException: ""Padding is invalid and cannot be removed."" is thrown. 
I have this small console app that reproduce this behavior, to test it just run it, it will create a file in your C:\ drive and then it will read line by line when pressing any key, and will stop when pressing 'q'.</p>

<pre><code>using System;
using System.IO;
using System.Security.Cryptography;

namespace encryptSample
{
    class Program
    {
        static void Main(string[] args)
        {
            var transform = CreateCryptoTransform(true);
            // first create encrypted file
            using (FileStream destination = new FileStream(""c:\\test_enc.txt"", FileMode.OpenOrCreate, FileAccess.Write, FileShare.ReadWrite))
            {
                using (CryptoStream cryptoStream = new CryptoStream(destination, transform, CryptoStreamMode.Write))
                {
                    using (StreamWriter source = new StreamWriter(cryptoStream))
                    {
                        for (int i = 0; i &lt; 1000; i++)
                        {
                            source.WriteLine(""This is just random text to fill the file and show what happens when I stop reading in the middle - "" + i);
                        }
                        // Also tried this line, but is the same with or without it
                        cryptoStream.FlushFinalBlock();
                    }
                }
            }

            StreamReader reader;
            ICryptoTransform transformDec;
            CryptoStream cryptoStreamReader;

            transformDec = CreateCryptoTransform(false);
            FileStream fileStream = new FileStream(""c:\\test_enc.txt"", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            cryptoStreamReader = new CryptoStream(fileStream, transformDec, CryptoStreamMode.Read);
            reader = new StreamReader(cryptoStreamReader);

            while (Console.In.ReadLine() != ""q"")
            {
                Console.WriteLine(reader.ReadLine());
            }

            try
            {
                cryptoStreamReader.Close();
                reader.Close();
                reader.Dispose();
            }
            catch (CryptographicException ex)
            {
                if (reader.EndOfStream)
                    throw;

            }
        }

        private static ICryptoTransform CreateCryptoTransform(bool encrypt)
        {
            byte[] salt = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // Must be at least eight bytes.  MAKE THIS SALTIER!
            const int iterations = 1042; // Recommendation is &gt;= 1000.
            const string password = ""123456"";

            AesManaged aes = new AesManaged();
            aes.BlockSize = aes.LegalBlockSizes[0].MaxSize;
            aes.KeySize = aes.LegalKeySizes[0].MaxSize;
            // NB: Rfc2898DeriveBytes initialization and subsequent calls to   GetBytes   must be eactly the same, including order, on both the encryption and decryption sides.
            Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(password, salt, iterations);
            aes.Key = key.GetBytes(aes.KeySize / 8);
            aes.IV = key.GetBytes(aes.BlockSize / 8);
            aes.Mode = CipherMode.CBC;
            aes.Padding = PaddingMode.PKCS7;
            ICryptoTransform transform = encrypt ? aes.CreateEncryptor(aes.Key, aes.IV) : aes.CreateDecryptor(aes.Key, aes.IV);
            return transform;
        }

    }
}
</code></pre>

<p>In our original class, we do the reader.Close during the Dispose(). 
My question is, is it valid to check if reader.EndOfStream is false and then capture the CryptographicException? Or there is something wrong in the encryption/decryption methods? Maybe we are missing something.</p>

<p>Regards!</p>
","<p>As I understand it, the exception is thrown when the last byte read is not a valid padding byte. When you intentionally close the stream early, the last byte read will most likely be considered ""invalid padding"" and the exception is thrown. Since you're ending intentionally, you should be safe ignoring the exception.</p>
","2137","<c#><aes><encryption><encryption-symmetric>","9","1","5","2019-03-08 16:34:07","","2","3","","","","2013-03-26 15:23:06",""
"15640857","Stopping decryption before EOF throws exception: Padding is invalid and cannot be removed","<p>This is the scenario we have: We have huge encrypted files, in the order of gigabytes that we can decrypt correctly if we read them until the end. 
The problem arises when we are reading and detect some flag in the file, then we stop reading and call reader.Close(), what happens is that a CryptographicException: ""Padding is invalid and cannot be removed."" is thrown. 
I have this small console app that reproduce this behavior, to test it just run it, it will create a file in your C:\ drive and then it will read line by line when pressing any key, and will stop when pressing 'q'.</p>

<pre><code>using System;
using System.IO;
using System.Security.Cryptography;

namespace encryptSample
{
    class Program
    {
        static void Main(string[] args)
        {
            var transform = CreateCryptoTransform(true);
            // first create encrypted file
            using (FileStream destination = new FileStream(""c:\\test_enc.txt"", FileMode.OpenOrCreate, FileAccess.Write, FileShare.ReadWrite))
            {
                using (CryptoStream cryptoStream = new CryptoStream(destination, transform, CryptoStreamMode.Write))
                {
                    using (StreamWriter source = new StreamWriter(cryptoStream))
                    {
                        for (int i = 0; i &lt; 1000; i++)
                        {
                            source.WriteLine(""This is just random text to fill the file and show what happens when I stop reading in the middle - "" + i);
                        }
                        // Also tried this line, but is the same with or without it
                        cryptoStream.FlushFinalBlock();
                    }
                }
            }

            StreamReader reader;
            ICryptoTransform transformDec;
            CryptoStream cryptoStreamReader;

            transformDec = CreateCryptoTransform(false);
            FileStream fileStream = new FileStream(""c:\\test_enc.txt"", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            cryptoStreamReader = new CryptoStream(fileStream, transformDec, CryptoStreamMode.Read);
            reader = new StreamReader(cryptoStreamReader);

            while (Console.In.ReadLine() != ""q"")
            {
                Console.WriteLine(reader.ReadLine());
            }

            try
            {
                cryptoStreamReader.Close();
                reader.Close();
                reader.Dispose();
            }
            catch (CryptographicException ex)
            {
                if (reader.EndOfStream)
                    throw;

            }
        }

        private static ICryptoTransform CreateCryptoTransform(bool encrypt)
        {
            byte[] salt = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // Must be at least eight bytes.  MAKE THIS SALTIER!
            const int iterations = 1042; // Recommendation is &gt;= 1000.
            const string password = ""123456"";

            AesManaged aes = new AesManaged();
            aes.BlockSize = aes.LegalBlockSizes[0].MaxSize;
            aes.KeySize = aes.LegalKeySizes[0].MaxSize;
            // NB: Rfc2898DeriveBytes initialization and subsequent calls to   GetBytes   must be eactly the same, including order, on both the encryption and decryption sides.
            Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(password, salt, iterations);
            aes.Key = key.GetBytes(aes.KeySize / 8);
            aes.IV = key.GetBytes(aes.BlockSize / 8);
            aes.Mode = CipherMode.CBC;
            aes.Padding = PaddingMode.PKCS7;
            ICryptoTransform transform = encrypt ? aes.CreateEncryptor(aes.Key, aes.IV) : aes.CreateDecryptor(aes.Key, aes.IV);
            return transform;
        }

    }
}
</code></pre>

<p>In our original class, we do the reader.Close during the Dispose(). 
My question is, is it valid to check if reader.EndOfStream is false and then capture the CryptographicException? Or there is something wrong in the encryption/decryption methods? Maybe we are missing something.</p>

<p>Regards!</p>
","<p><code>Close</code> calls <code>Dispose(true)</code> which calls <code>FlushFinalBlock</code> which throws the exception, because this is not really the final block.</p>

<p>You can prevent this by overriding the <code>Close</code> method so that it doesn't call <code>FlushFinalBlock</code>:</p>

<pre><code>public class SilentCryptoStream : CryptoStream {
    public SilentCryptoStream(Stream stream, ICryptoTransform transform, CryptoStreamMode mode) :
        base(stream, transform, mode) {
    }

    public override void Close() {
        this.Dispose(false);
        GC.SuppressFinalize(this);
    }
}
</code></pre>

<p>(You also need to manually close the underlying stream.)</p>

<blockquote>
  <p>is it valid to check if reader.EndOfStream is false and then capture
  the CryptographicException</p>
</blockquote>

<p>I think it's OK.</p>
","2137","<c#><aes><encryption><encryption-symmetric>","9","1","5","2019-03-08 16:34:07","","2","3","","","","2013-03-26 15:23:06",""
"15640857","Stopping decryption before EOF throws exception: Padding is invalid and cannot be removed","<p>This is the scenario we have: We have huge encrypted files, in the order of gigabytes that we can decrypt correctly if we read them until the end. 
The problem arises when we are reading and detect some flag in the file, then we stop reading and call reader.Close(), what happens is that a CryptographicException: ""Padding is invalid and cannot be removed."" is thrown. 
I have this small console app that reproduce this behavior, to test it just run it, it will create a file in your C:\ drive and then it will read line by line when pressing any key, and will stop when pressing 'q'.</p>

<pre><code>using System;
using System.IO;
using System.Security.Cryptography;

namespace encryptSample
{
    class Program
    {
        static void Main(string[] args)
        {
            var transform = CreateCryptoTransform(true);
            // first create encrypted file
            using (FileStream destination = new FileStream(""c:\\test_enc.txt"", FileMode.OpenOrCreate, FileAccess.Write, FileShare.ReadWrite))
            {
                using (CryptoStream cryptoStream = new CryptoStream(destination, transform, CryptoStreamMode.Write))
                {
                    using (StreamWriter source = new StreamWriter(cryptoStream))
                    {
                        for (int i = 0; i &lt; 1000; i++)
                        {
                            source.WriteLine(""This is just random text to fill the file and show what happens when I stop reading in the middle - "" + i);
                        }
                        // Also tried this line, but is the same with or without it
                        cryptoStream.FlushFinalBlock();
                    }
                }
            }

            StreamReader reader;
            ICryptoTransform transformDec;
            CryptoStream cryptoStreamReader;

            transformDec = CreateCryptoTransform(false);
            FileStream fileStream = new FileStream(""c:\\test_enc.txt"", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            cryptoStreamReader = new CryptoStream(fileStream, transformDec, CryptoStreamMode.Read);
            reader = new StreamReader(cryptoStreamReader);

            while (Console.In.ReadLine() != ""q"")
            {
                Console.WriteLine(reader.ReadLine());
            }

            try
            {
                cryptoStreamReader.Close();
                reader.Close();
                reader.Dispose();
            }
            catch (CryptographicException ex)
            {
                if (reader.EndOfStream)
                    throw;

            }
        }

        private static ICryptoTransform CreateCryptoTransform(bool encrypt)
        {
            byte[] salt = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // Must be at least eight bytes.  MAKE THIS SALTIER!
            const int iterations = 1042; // Recommendation is &gt;= 1000.
            const string password = ""123456"";

            AesManaged aes = new AesManaged();
            aes.BlockSize = aes.LegalBlockSizes[0].MaxSize;
            aes.KeySize = aes.LegalKeySizes[0].MaxSize;
            // NB: Rfc2898DeriveBytes initialization and subsequent calls to   GetBytes   must be eactly the same, including order, on both the encryption and decryption sides.
            Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(password, salt, iterations);
            aes.Key = key.GetBytes(aes.KeySize / 8);
            aes.IV = key.GetBytes(aes.BlockSize / 8);
            aes.Mode = CipherMode.CBC;
            aes.Padding = PaddingMode.PKCS7;
            ICryptoTransform transform = encrypt ? aes.CreateEncryptor(aes.Key, aes.IV) : aes.CreateDecryptor(aes.Key, aes.IV);
            return transform;
        }

    }
}
</code></pre>

<p>In our original class, we do the reader.Close during the Dispose(). 
My question is, is it valid to check if reader.EndOfStream is false and then capture the CryptographicException? Or there is something wrong in the encryption/decryption methods? Maybe we are missing something.</p>

<p>Regards!</p>
","<p>This exception is thrown during Dispose(true).  Throwing from Dispose is already a design flaw (<a href=""https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1065-do-not-raise-exceptions-in-unexpected-locations#dispose-methods"" rel=""nofollow noreferrer"">https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1065-do-not-raise-exceptions-in-unexpected-locations#dispose-methods</a>), but it's even worse since this exception is thrown even before the underlying stream is closed.</p>

<p>This means that anything that receives a Stream that <em>might</em> be a CryptoStream needs to work around this and either close the underlying Stream themselves in a 'catch' block (essentially needing a reference to something completely unrelated), or somehow warn all listeners that the stream may still be open (e.g., ""don't try to delete the underlying file -- it's still open!"").</p>

<p>No, in my book, this is a pretty big oversight, and the other answers don't seem to address the fundamental issue.  CryptoStream takes ownership of the passed-in stream, so it takes on the responsibility to close the underlying stream before control leaves Dispose(true), end of story.</p>

<p>Ideally, it should also never throw under circumstances that are not truly exceptional (such as ""we stopped reading early, because the decrypted data is in the wrong format and it's a waste of time to continue reading"").</p>

<p>Our solution was basically this <em>(update: but be warned -- as Will Krause pointed out in the comments, this could leave sensitive information lying around in the private <code>_InputBuffer</code> and <code>_OutputBuffer</code> fields that can be accessed via reflection.  Versions 4.5 and above of the .NET Framework don't have this problem.)</em>:</p>

<pre><code>internal sealed class SilentCryptoStream : CryptoStream
{
    private readonly Stream underlyingStream;

    public SilentCryptoStream(Stream stream, ICryptoTransform transform, CryptoStreamMode mode)
        : base(stream, transform, mode)
    {
        // stream is already implicitly validated non-null in the base constructor.
        this.underlyingStream = stream;
    }

    protected override void Dispose(bool disposing)
    {
        try
        {
            base.Dispose(disposing);
        }
        catch (CryptographicException)
        {
            if (disposing)
            {
                this.underlyingStream.Dispose();
            }
        }
    }
}
</code></pre>
","2137","<c#><aes><encryption><encryption-symmetric>","9","6","5","2019-03-08 16:34:07","","2","3","","","","2013-03-26 15:23:06",""
"15640857","Stopping decryption before EOF throws exception: Padding is invalid and cannot be removed","<p>This is the scenario we have: We have huge encrypted files, in the order of gigabytes that we can decrypt correctly if we read them until the end. 
The problem arises when we are reading and detect some flag in the file, then we stop reading and call reader.Close(), what happens is that a CryptographicException: ""Padding is invalid and cannot be removed."" is thrown. 
I have this small console app that reproduce this behavior, to test it just run it, it will create a file in your C:\ drive and then it will read line by line when pressing any key, and will stop when pressing 'q'.</p>

<pre><code>using System;
using System.IO;
using System.Security.Cryptography;

namespace encryptSample
{
    class Program
    {
        static void Main(string[] args)
        {
            var transform = CreateCryptoTransform(true);
            // first create encrypted file
            using (FileStream destination = new FileStream(""c:\\test_enc.txt"", FileMode.OpenOrCreate, FileAccess.Write, FileShare.ReadWrite))
            {
                using (CryptoStream cryptoStream = new CryptoStream(destination, transform, CryptoStreamMode.Write))
                {
                    using (StreamWriter source = new StreamWriter(cryptoStream))
                    {
                        for (int i = 0; i &lt; 1000; i++)
                        {
                            source.WriteLine(""This is just random text to fill the file and show what happens when I stop reading in the middle - "" + i);
                        }
                        // Also tried this line, but is the same with or without it
                        cryptoStream.FlushFinalBlock();
                    }
                }
            }

            StreamReader reader;
            ICryptoTransform transformDec;
            CryptoStream cryptoStreamReader;

            transformDec = CreateCryptoTransform(false);
            FileStream fileStream = new FileStream(""c:\\test_enc.txt"", FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            cryptoStreamReader = new CryptoStream(fileStream, transformDec, CryptoStreamMode.Read);
            reader = new StreamReader(cryptoStreamReader);

            while (Console.In.ReadLine() != ""q"")
            {
                Console.WriteLine(reader.ReadLine());
            }

            try
            {
                cryptoStreamReader.Close();
                reader.Close();
                reader.Dispose();
            }
            catch (CryptographicException ex)
            {
                if (reader.EndOfStream)
                    throw;

            }
        }

        private static ICryptoTransform CreateCryptoTransform(bool encrypt)
        {
            byte[] salt = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // Must be at least eight bytes.  MAKE THIS SALTIER!
            const int iterations = 1042; // Recommendation is &gt;= 1000.
            const string password = ""123456"";

            AesManaged aes = new AesManaged();
            aes.BlockSize = aes.LegalBlockSizes[0].MaxSize;
            aes.KeySize = aes.LegalKeySizes[0].MaxSize;
            // NB: Rfc2898DeriveBytes initialization and subsequent calls to   GetBytes   must be eactly the same, including order, on both the encryption and decryption sides.
            Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(password, salt, iterations);
            aes.Key = key.GetBytes(aes.KeySize / 8);
            aes.IV = key.GetBytes(aes.BlockSize / 8);
            aes.Mode = CipherMode.CBC;
            aes.Padding = PaddingMode.PKCS7;
            ICryptoTransform transform = encrypt ? aes.CreateEncryptor(aes.Key, aes.IV) : aes.CreateDecryptor(aes.Key, aes.IV);
            return transform;
        }

    }
}
</code></pre>

<p>In our original class, we do the reader.Close during the Dispose(). 
My question is, is it valid to check if reader.EndOfStream is false and then capture the CryptographicException? Or there is something wrong in the encryption/decryption methods? Maybe we are missing something.</p>

<p>Regards!</p>
","<p>My solution was to, in my derived class, add this to my Dispose(bool) override:</p>

<pre><code>    protected override void Dispose(bool disposing)
    {
        // CryptoStream.Dispose(bool) has a bug in read mode. If the reader doesn't read all the way to the end of the stream, it throws an exception while trying to
        // read the final block during Dispose(). We'll work around this here by moving to the end of the stream for them. This avoids the thrown exception and
        // allows everything to be cleaned up (disposed, wiped from memory, etc.) properly.
        if ((disposing) &amp;&amp;
            (CanRead) &amp;&amp;
            (m_TransformMode == CryptoStreamMode.Read))
        {
            const int BUFFER_SIZE = 32768;
            byte[] buffer = new byte[BUFFER_SIZE];

            while (Read(buffer, 0, BUFFER_SIZE) == BUFFER_SIZE)
            {
            }
        }

        base.Dispose(disposing);
        ...
</code></pre>

<p>By making sure the stream is always read to the end, the internal issue in the CryptStream.Dispose is avoided. Of course, you need to weigh this against the nature of what you are reading, to be sure it doesn't have a negative impact. Only use it against a source of a known finite length. </p>
","2137","<c#><aes><encryption><encryption-symmetric>","9","0","5","2019-03-08 16:34:07","","2","3","","","","2013-03-26 15:23:06",""
"15063836","SQL Server symmetric key is lost, how to decrypt the data?","<p>We are in a situation where  symmetric key and certificates are deleted, Is there any way can we decrypt the data?</p>

<p>We tried decrypting the data with same script which was used for creating the master key , certificate and symmetric keys. </p>

<p>Thanks
Vivek</p>
","<h2>By definition: <strong>NO</strong></h2>

<p>If it would be possible, it would mean the entire cryptography feature in SQL Server was useless. Can you define what <code>we lost the symmetric key and database certificate</code> means? Your only chance is if your understanding of 'lost' is incorrect and you still have the keys <em>somewhere</em>. SQL Server will refuse to drop keys if there is still data encrypted with them. Also it would worth defining what you understand by 'database certificate'.</p>
","2079","<sql-server><encryption-symmetric>","0","2","2","2013-05-30 09:48:22","","0","","482644","","2013-02-25 10:06:15","2013-02-25 09:32:39",""
"15063836","SQL Server symmetric key is lost, how to decrypt the data?","<p>We are in a situation where  symmetric key and certificates are deleted, Is there any way can we decrypt the data?</p>

<p>We tried decrypting the data with same script which was used for creating the master key , certificate and symmetric keys. </p>

<p>Thanks
Vivek</p>
","<p>When using symmetric key to encrypt data, it uses a GUID for encryption. The GUID is generated automatically at the time of creatiion of symmetric key. So if u are trying to decrypt the data using newly generated symmetric key (same as old one), it will use the new <code>GUID</code> and as a result you cant decrypt it.</p>

<p>You can see this by using the following query: (Key_Guid is changing)</p>

<pre><code>CREATE SYMMETRIC KEY KeyTest WITH ALGORITHM = TRIPLE_DES  ENCRYPTION BY PASSWORD = 'EncryptPwd'

select * from sys.symmetric_keys

DROP SYMMETRIC KEY KeyTest 

CREATE SYMMETRIC KEY KeyTest WITH ALGORITHM = TRIPLE_DES  ENCRYPTION BY PASSWORD = 'EncryptPwd'

select * from sys.symmetric_keys 
</code></pre>
","2079","<sql-server><encryption-symmetric>","0","0","2","2013-05-30 09:48:22","","0","","482644","","2013-02-25 10:06:15","2013-02-25 09:32:39",""
"3354749","Calculation of encrypted file size does not match true size","<p>I have the need to calculate the size of a file I am encrypting using Rijndael.</p>

<p>According to other answers on this site, and on google, the following is the correct way of calculating encrypted data length:</p>

<pre><code>EL = UL + (BS - (UL Mod BS) Mod BS)

Where: 
EL = Encrypted Length
UL = Unencrypted Length
BS = Block Size
</code></pre>

<p>In my instance, the <strong>unencrypted file length is 5,101,972 bytes</strong>, and I am using a 128bit encryption key, giving me a <strong>block size of 16 bytes</strong>.
Therefore, the equation is:</p>

<pre><code>EL = 5101972 + (16 - (5101972 Mod 16) Mod 16)
EL = 5101972 + (16 - 4 Mod 16)
EL = 5101972 + (12 Mod 16)
EL = 5101972 + 12
EL = 5101984
</code></pre>

<p>Giving an <strong>encrypted file length of 5,101,984 bytes</strong>.</p>

<p>However, the size of my file after encryption weighs in at 5,242,896
A massive difference in sizes of 140,912 bytes!</p>

<p>Now.. I'm obviously doing SOMETHING wrong, but I can't work out what it is.
Below is my encryption and decryption test code, as well as the method used to calculate the encrypted size:</p>

<pre><code>private static void Enc(string decryptedFileName, string encryptedFileName)
{
    PasswordDeriveBytes passwordDB = new PasswordDeriveBytes(""ThisIsMyPassword"", Encoding.ASCII.GetBytes(""thisIsMysalt!""), ""MD5"", 2);
    byte[] passwordBytes = passwordDB.GetBytes(128 / 8);

    using (FileStream fsOutput = File.OpenWrite(encryptedFileName))
    {
        using(FileStream fsInput = File.OpenRead(decryptedFileName))
        {
            byte[] IVBytes = Encoding.ASCII.GetBytes(""1234567890123456"");

            fsOutput.Write(BitConverter.GetBytes(fsInput.Length), 0, 8);
            fsOutput.Write(IVBytes, 0, 16);

            RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC,Padding=PaddingMode.Zeros};
            ICryptoTransform encryptor = symmetricKey.CreateEncryptor(passwordBytes, IVBytes);

            using (CryptoStream cryptoStream = new CryptoStream(fsOutput, encryptor, CryptoStreamMode.Write))
            {
                for (long i = 0; i &lt; fsInput.Length; i += chunkSize)
                {
                    byte[] chunkData = new byte[chunkSize];
                    int bytesRead = 0;
                    while ((bytesRead = fsInput.Read(chunkData, 0, chunkSize)) &gt; 0)
                    {
                        cryptoStream.Write(chunkData, 0, chunkSize);
                    }
                }
            }
        }
    }            
}

private static void Dec(string encryptedFileName, string decryptedFileName)
{
    PasswordDeriveBytes passwordDB = new PasswordDeriveBytes(""ThisIsMyPassword"", Encoding.ASCII.GetBytes(""thisIsMysalt!""), ""MD5"", 2);
    byte[] passwordBytes = passwordDB.GetBytes(128 / 8);

    using (FileStream fsInput = File.OpenRead(encryptedFileName))
    {
        using (FileStream fsOutput = File.OpenWrite(decryptedFileName))
        {
            byte[] buffer = new byte[8];
            fsInput.Read(buffer, 0, 8);

            long fileLength = BitConverter.ToInt64(buffer, 0);

            byte[] IVBytes = new byte[16];
            fsInput.Read(IVBytes, 0, 16);


            RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC,Padding=PaddingMode.Zeros};
            ICryptoTransform decryptor = symmetricKey.CreateDecryptor(passwordBytes, IVBytes);

            using (CryptoStream cryptoStream = new CryptoStream(fsOutput, decryptor, CryptoStreamMode.Write))
            {
                for (long i = 0; i &lt; fsInput.Length; i += chunkSize)
                {
                    byte[] chunkData = new byte[chunkSize];
                    int bytesRead = 0;
                    while ((bytesRead = fsInput.Read(chunkData, 0, chunkSize)) &gt; 0)
                    {
                        cryptoStream.Write(chunkData, 0, bytesRead);
                    }
                }
                fsOutput.SetLength(fileLength);
            }                    
        }
    }
}

private static void CalcEncSize(string decryptedFileName)
{
    FileInfo fi = new FileInfo(decryptedFileName);
    if (fi.Exists)
    {                
        long blockSize = 128/8;
        long fileLength = fi.Length;
        long encryptedSize = fileLength + ((blockSize - (fileLength % blockSize)) % blockSize);
        encryptedSize += 24; //16 bytes for the IV, and 8 more for the filelength, both stored at the start of the file.

        Console.WriteLine(""Estimated Encryption Size: "" + encryptedSize.ToString());           
    }
}
</code></pre>

<p>Note: In the calculations at the start, I am NOT including the extra 24 bytes that are used at the start of the encrypted file by myself to store the original file length, and the IV... I know this, but didn't want to complicate the equation more than necessary.</p>
","<p>You shouldn't write to the output file before the actual encryption process.  The <code>CryptoStream</code> will handle all the necessary padding when it is closed.  Also the for loop isn't necessary as the inner while loop will read the entire file.  Also you should only write as much as was read from the file.  Try these changes.</p>

<pre><code>private static void Enc(string decryptedFileName, string encryptedFileName)
{
    PasswordDeriveBytes passwordDB = new PasswordDeriveBytes(""ThisIsMyPassword"", Encoding.ASCII.GetBytes(""thisIsMysalt!""), ""MD5"", 2);
    byte[] passwordBytes = passwordDB.GetBytes(128 / 8);

    using (FileStream fsOutput = File.OpenWrite(encryptedFileName))
    {
        using(FileStream fsInput = File.OpenRead(decryptedFileName))
        {
            byte[] IVBytes = Encoding.ASCII.GetBytes(""1234567890123456"");

            RijndaelManaged symmetricKey = new RijndaelManaged() { Mode = CipherMode.CBC,Padding=PaddingMode.Zeros};
            ICryptoTransform encryptor = symmetricKey.CreateEncryptor(passwordBytes, IVBytes);

            using (CryptoStream cryptoStream = new CryptoStream(fsOutput, encryptor, CryptoStreamMode.Write))
            {
                byte[] chunkData = new byte[chunkSize];
                int bytesRead = 0;
                while ((bytesRead = fsInput.Read(chunkData, 0, chunkSize)) &gt; 0)
                {
                    cryptoStream.Write(chunkData, 0, bytesRead);  //KEY FIX
                }
            }
        }
    }            
}
</code></pre>

<p>[edit]</p>

<p>Oh I've missed out on a lot of information.  I misread what your sizes were thinking 140,912 was the size, not difference.  Now that I see that, I can make more intelligible response.  Based on your code, the difference in sizes should be comparable to your chunk size.  Since the chunkSize can be somewhat large, your code will typically write up to chunkSize more data than is actually in your input file (as Greg and caf pointed out).  The line that I've marked is <em>the</em> reason for the discrepancy.</p>
","2073","<c#><encryption><rijndaelmanaged><equation><encryption-symmetric>","4","4","1","2010-07-30 18:41:59","3354897","5","2","","","","2010-07-28 15:52:08",""
"27528103","""Invalid keystore format"" on setting keystore for type ""JCEKS"" for symmetric key encryption","<p>I am trying to use symmetric encryption for securing the communication on jetty-9 using java-8.
The cipher suite for this purpose I am using is ""TLS_PSK_WITH_AES_128_GCM_SHA256"". The implementation for this cipher suite is provided by third party provider - ""IAIK"".</p>

<p>Since its symmetric encryption, the keystore type I am using is ""JCEKS"" and not default i.e. ""JKS"".</p>

<p>On trying to configure this keystore, I am getting this error - java.io.IOException: Invalid keystore format.</p>

<p>The program code is as follows:</p>

<pre><code>import iaik.security.provider.IAIK;

import java.io.IOException;
import java.security.Security;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.eclipse.jetty.server.Connector;
import org.eclipse.jetty.server.HttpConfiguration;
import org.eclipse.jetty.server.HttpConnectionFactory;
import org.eclipse.jetty.server.SecureRequestCustomizer;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.ServerConnector;
import org.eclipse.jetty.server.SslConnectionFactory;
import org.eclipse.jetty.servlet.ServletHandler;
import org.eclipse.jetty.util.ssl.SslContextFactory;

public class TestJettyServer {

  public static void main(String[] args) throws Exception {
    SslContextFactory sslContextFactory = new SslContextFactory();
    sslContextFactory.setIncludeProtocols(new String[] { ""TLSv1"" });
    Security.addProvider(new IAIK()); // third party provider for cipher suite ""TLS_PSK_WITH_AES_128_GCM_SHA256""
    sslContextFactory.setIncludeCipherSuites(new String[] { ""TLS_PSK_WITH_AES_128_GCM_SHA256"" });

    attachSymmetricKeyStore(sslContextFactory);

    HttpConfiguration https = new HttpConfiguration();
    https.addCustomizer(new SecureRequestCustomizer());

    Server server = new Server();

    ServerConnector sslConnector = new ServerConnector(server, new SslConnectionFactory(sslContextFactory, ""http/1.1""),
        new HttpConnectionFactory(https));

    sslConnector.setPort(9997);

    Connector[] connectors = { sslConnector };
    server.setConnectors(connectors);

    ServletHandler handler = new ServletHandler();
    server.setHandler(handler);
    handler.addServletWithMapping(HelloServlet.class, ""/*"");

    server.start();
    server.join();

  }

  private static void attachSymmetricKeyStore(SslContextFactory sslContextFactory) {
    // keystore is generated using following command :
    // keytool -genseckey -alias srccodes -keyalg AES -keystore keystoreAES.jceks -keysize 256 -storeType JCEKS

    sslContextFactory.setKeyStorePath(MinimalServlets.class.getResource(""/keystoreAES.jceks"").toExternalForm());
    sslContextFactory.setKeyStorePassword(""123456"");
    sslContextFactory.setKeyManagerPassword(""123456"");
  }

  public static class HelloServlet extends HttpServlet {

    /** The serialVersionUID. */
    private static final long serialVersionUID = 1L;

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
      response.setContentType(""text/html"");
      response.setStatus(HttpServletResponse.SC_OK);
      response.getWriter().println(""&lt;h1&gt;Hello SimpleServlet&lt;/h1&gt;"");
    }
  }

}
</code></pre>

<p>The trace is as follows:</p>

<pre><code>2014-12-17 19:59:56.506:INFO:oejs.Server:main: jetty-9.2.1.v20140609
2014-12-17 19:59:56.539:WARN:oejuc.AbstractLifeCycle:main: FAILED SslContextFactory@12bb4df8(file:/D:/RA_Workspace/JettyWithCipherSuites/bin/keystoreAES.jceks,file:/D:/RA_Workspace/JettyWithCipherSuites/bin/keystoreAES.jceks): java.io.IOException: Invalid keystore format
java.io.IOException: Invalid keystore format
at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:650)
at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:55)
at java.security.KeyStore.load(KeyStore.java:1433)
at org.eclipse.jetty.util.security.CertificateUtils.getKeyStore(CertificateUtils.java:55)
at org.eclipse.jetty.util.ssl.SslContextFactory.loadKeyStore(SslContextFactory.java:864)
at org.eclipse.jetty.util.ssl.SslContextFactory.doStart(SslContextFactory.java:270)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)
at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)
at org.eclipse.jetty.server.SslConnectionFactory.doStart(SslConnectionFactory.java:64)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)
at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)
at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:260)
at org.eclipse.jetty.server.AbstractNetworkConnector.doStart(AbstractNetworkConnector.java:81)
at org.eclipse.jetty.server.ServerConnector.doStart(ServerConnector.java:218)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.server.Server.doStart(Server.java:336)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at TestJettyServer.main(TestJettyServer.java:48)
2014-12-17 19:59:56.539:WARN:oejuc.AbstractLifeCycle:main: FAILED SslConnectionFactory@4cc77c2e{SSL-http/1.1}: java.io.IOException: Invalid keystore format
java.io.IOException: Invalid keystore format
at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:650)
at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:55)
at java.security.KeyStore.load(KeyStore.java:1433)
at org.eclipse.jetty.util.security.CertificateUtils.getKeyStore(CertificateUtils.java:55)
at org.eclipse.jetty.util.ssl.SslContextFactory.loadKeyStore(SslContextFactory.java:864)
at org.eclipse.jetty.util.ssl.SslContextFactory.doStart(SslContextFactory.java:270)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)
at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)
at org.eclipse.jetty.server.SslConnectionFactory.doStart(SslConnectionFactory.java:64)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)
at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)
at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:260)
at org.eclipse.jetty.server.AbstractNetworkConnector.doStart(AbstractNetworkConnector.java:81)
at org.eclipse.jetty.server.ServerConnector.doStart(ServerConnector.java:218)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.server.Server.doStart(Server.java:336)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at TestJettyServer.main(TestJettyServer.java:48)
2014-12-17 19:59:56.539:WARN:oejuc.AbstractLifeCycle:main: FAILED ServerConnector@7a7b0070{SSL-http/1.1}{0.0.0.0:9997}: java.io.IOException: Invalid keystore format
java.io.IOException: Invalid keystore format
at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:650)
at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:55)
at java.security.KeyStore.load(KeyStore.java:1433)
at org.eclipse.jetty.util.security.CertificateUtils.getKeyStore(CertificateUtils.java:55)
at org.eclipse.jetty.util.ssl.SslContextFactory.loadKeyStore(SslContextFactory.java:864)
at org.eclipse.jetty.util.ssl.SslContextFactory.doStart(SslContextFactory.java:270)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)
at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)
at org.eclipse.jetty.server.SslConnectionFactory.doStart(SslConnectionFactory.java:64)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)
at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)
at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:260)
at org.eclipse.jetty.server.AbstractNetworkConnector.doStart(AbstractNetworkConnector.java:81)
at org.eclipse.jetty.server.ServerConnector.doStart(ServerConnector.java:218)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.server.Server.doStart(Server.java:336)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at TestJettyServer.main(TestJettyServer.java:48)
2014-12-17 19:59:56.539:WARN:oejuc.AbstractLifeCycle:main: FAILED org.eclipse.jetty.server.Server@39a054a5: java.io.IOException: Invalid keystore format
java.io.IOException: Invalid keystore format
at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:650)
at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:55)
at java.security.KeyStore.load(KeyStore.java:1433)
at org.eclipse.jetty.util.security.CertificateUtils.getKeyStore(CertificateUtils.java:55)
at org.eclipse.jetty.util.ssl.SslContextFactory.loadKeyStore(SslContextFactory.java:864)
at org.eclipse.jetty.util.ssl.SslContextFactory.doStart(SslContextFactory.java:270)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)
at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)
at org.eclipse.jetty.server.SslConnectionFactory.doStart(SslConnectionFactory.java:64)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)
at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)
at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:260)
at org.eclipse.jetty.server.AbstractNetworkConnector.doStart(AbstractNetworkConnector.java:81)
at org.eclipse.jetty.server.ServerConnector.doStart(ServerConnector.java:218)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.server.Server.doStart(Server.java:336)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at TestJettyServer.main(TestJettyServer.java:48)
Exception in thread ""main"" java.io.IOException: Invalid keystore format
at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:650)
at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:55)
at java.security.KeyStore.load(KeyStore.java:1433)
at org.eclipse.jetty.util.security.CertificateUtils.getKeyStore(CertificateUtils.java:55)
at org.eclipse.jetty.util.ssl.SslContextFactory.loadKeyStore(SslContextFactory.java:864)
at org.eclipse.jetty.util.ssl.SslContextFactory.doStart(SslContextFactory.java:270)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)
at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)
at org.eclipse.jetty.server.SslConnectionFactory.doStart(SslConnectionFactory.java:64)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)
at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)
at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:260)
at org.eclipse.jetty.server.AbstractNetworkConnector.doStart(AbstractNetworkConnector.java:81)
at org.eclipse.jetty.server.ServerConnector.doStart(ServerConnector.java:218)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at org.eclipse.jetty.server.Server.doStart(Server.java:336)
at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)
at TestJettyServer.main(TestJettyServer.java:48)
</code></pre>

<p>How can I get rid of this error?</p>
","<p>If you are using any other Keystore format other than ""JKS"", you need to set the Keystore type as ""JCEKS"" using:</p>

<pre><code>sslContextFactory.setKeyStoreType(""JCEKS"");
</code></pre>

<p>The default Keystore type for <em>org.eclipse.jetty.util.ssl.SslContextFactory</em> is ""JKS""</p>
","2037","<encryption><java-8><encryption-symmetric><jetty-9><iaik-jce>","2","1","1","2017-01-16 09:32:35","","0","","","","","2014-12-17 14:42:41",""
"13713991","BadPaddingException: invalid ciphertext","<p>I would like some help as this is my first time in coding cryptography code.</p>

<p>The encryption code appears to be working correctly, but the decryption throws an error.</p>

<p>The error I get is:</p>

<p><strong>de.flexiprovider.api.exceptions.BadPaddingException: invalid ciphertext</strong></p>

<p>in the <strong>decrypt function</strong> towards the end of the code, which is marked as a comment </p>

<p>// ERROR THROWN HERE! ..............................</p>

<p>I have included all the imports, please excuse this, as thought it maybe relevant to the issue.</p>

<p>Any help as to what I am doing wrong will be greatly appreciated, thanks very much.</p>

<p><strong>Code:</strong></p>

<pre><code>import java.io.UnsupportedEncodingException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Security;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;

import android.app.Activity;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import de.flexiprovider.common.ies.IESParameterSpec;
import de.flexiprovider.core.FlexiCoreProvider;
import de.flexiprovider.ec.FlexiECProvider;
import de.flexiprovider.ec.parameters.CurveParams;
import de.flexiprovider.ec.parameters.CurveRegistry.BrainpoolP384r1;
import de.flexiprovider.pki.PKCS8EncodedKeySpec;
import de.flexiprovider.pki.X509EncodedKeySpec;

public class MainActivity extends Activity {

private static PublicKey PublicKey;
private static PrivateKey PrivateKey;
private static String PubKey;
private static String PrvKey;
private static String message = ""Hello World"";
private static String encryptedMessage;
private static String decryptedMessage;

private final static String TAG = ""ERROR: "";

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    try {
        Security.addProvider(new FlexiCoreProvider());
        Security.addProvider(new FlexiECProvider());

        // instantiate the elliptic curve key pair generator
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""ECIES"", ""FlexiEC"");

        // choose the curve
        CurveParams ecParams = new BrainpoolP384r1();

        // Initialize the key pair generator
        kpg.initialize(ecParams, new SecureRandom());
        KeyPair keyPair = kpg.generateKeyPair();

        // generate the public key
        PublicKey = keyPair.getPublic();

        // generate private key
        PrivateKey = keyPair.getPrivate();
    }
    catch (Exception e) {
        Log.e(TAG, e.toString());
    }

    // I'm converting keys to strings here as the public keys will be stored on a server
    // database and the private keys will be stored in the application preferences file
    // this private key storage is maybe not optimum, but at this point I just want to
    // simulate a messaging encryption/decryption process for testing purposes

    // convert public key to a string
    PubKey = Base64.encodeToString(PublicKey.getEncoded(), Base64.DEFAULT);
    Log.d(""PubKey: "", PubKey);

    // convert private key to a string
    PrvKey = Base64.encodeToString(PrivateKey.getEncoded(), Base64.DEFAULT);
    Log.d(""PrvKey: "", PrvKey);

    // encrypt the message with the public key
    encryptedMessage = encryptMessage(PubKey, message);

    // report if the public key has not been regenerated correctly
    if (encryptedMessage == null) {
        Log.d(""PUBLIC_KEY_REGENERATE_ERROR: "", encryptedMessage);
    }

    // decrypt the message with the private key
    decryptedMessage = decryptMessage(PrvKey, encryptedMessage);

    // report if the private key has not been regenerated correctly
    if (encryptedMessage == null) {
        Log.d(""PRIVATE_KEY_REGENERATE_ERROR: "", decryptedMessage);
    }
}

// encrypt function
public static String encryptMessage(String publicKey, String message) {

    KeyFactory keyFactory = null;
    PublicKey pubkey = null;
    Cipher cipher = null;

    byte[] PLAINTEXT_MESSAGE = message.getBytes();
    Log.d(""PLAINTEXT_MESSAGE: "", message);

    Security.addProvider(new FlexiCoreProvider());
    Security.addProvider(new FlexiECProvider());

    // Base64 decode the publicKey string into a byte array
    byte[] decodedPublicKey = Base64.decode(publicKey, Base64.DEFAULT);

    try {
        // instantiate a X509EncodedKeySpec
        X509EncodedKeySpec X509spec = new X509EncodedKeySpec(decodedPublicKey);

        keyFactory = KeyFactory.getInstance(""ECIES"", ""FlexiEC"");

        // re-generate the public key
        pubkey = keyFactory.generatePublic(X509spec);

        // sanity check, return null on inequality
        if (!pubkey.equals(PublicKey)) {
            return null;
        }

        cipher = Cipher.getInstance(""ECIES"", ""FlexiEC"");
        IESParameterSpec IESspec = new IESParameterSpec(""AES256_CBC"", ""HmacSHA512"", null, null);
        cipher.init(Cipher.ENCRYPT_MODE, pubkey, IESspec);
    }
    catch (Exception e) {
        Log.e(TAG, e.toString());
    }

    // encrypt the message
    byte[] encryptedData = null;

    try {
        encryptedData = cipher.doFinal(PLAINTEXT_MESSAGE);
    }
    catch (IllegalBlockSizeException e) {
        Log.e(TAG, e.toString());
    }
    catch (BadPaddingException e) {
        Log.e(TAG, e.toString());
    }

    String encryptedMessage = null;

    try {
        encryptedMessage = new String(encryptedData, ""UTF-8"");
    }
    catch (UnsupportedEncodingException e) {
        Log.e(TAG, e.toString());
    }
    Log.d(""encryptedMessage: "", encryptedMessage);
    return encryptedMessage;
}

// decrypt function
public static String decryptMessage(String privateKey, String message) {

    KeyFactory keyFactory = null;
    PrivateKey prvkey = null;
    Cipher cipher = null;

    byte[] ENCRYPTED_MESSAGE = message.getBytes();
    Log.d(""ENCRYPTED_MESSAGE: "", message);

    Security.addProvider(new FlexiCoreProvider());
    Security.addProvider(new FlexiECProvider());

    try {
        // Base64 decode the privateKey string into a byte array
        byte[] decodedPrivateKey = Base64.decode(privateKey, Base64.DEFAULT);

        // instantiate a PKCS8EncodedKeySpec
        PKCS8EncodedKeySpec PKCS8spec = new PKCS8EncodedKeySpec(decodedPrivateKey);

        keyFactory = KeyFactory.getInstance(""ECIES"", ""FlexiEC"");

        // re-generate the private key
        prvkey = keyFactory.generatePrivate(PKCS8spec);

        // sanity check, return null on inequality
        if (!prvkey.equals(PrivateKey)) {
            return null;
        }

        cipher = Cipher.getInstance(""ECIES"", ""FlexiEC"");
        IESParameterSpec IESspec = new IESParameterSpec(""AES256_CBC"", ""HmacSHA512"", null, null);
        cipher.init(Cipher.DECRYPT_MODE, prvkey, IESspec);
    }
    catch (Exception e) {
        Log.e(TAG, e.toString());
    }

    // decrypt the message
    byte[] decryptedData = null;

    try {
        decryptedData = cipher.doFinal(ENCRYPTED_MESSAGE);

        // ERROR THROWN HERE! ..............................
        // de.flexiprovider.api.exceptions.BadPaddingException: invalid ciphertext
    }
    catch (IllegalBlockSizeException e) {
        Log.e(TAG, e.toString());
    }
    catch (BadPaddingException e) {
        Log.e(TAG, e.toString());
    }

    String decryptedMessage = null;

    try {
        decryptedMessage = new String(decryptedData, ""UTF-8"");
    }
    catch (UnsupportedEncodingException e) {
        Log.e(TAG, e.toString());
    }
    Log.d(""decryptedMessage: "", decryptedMessage);
    return decryptedMessage;
}
</code></pre>

<p>}</p>
","<p>You cannot just use the cipher text as input for the <code>String</code> constructor, as you are doing in this line:</p>

<pre><code>encryptedMessage = new String(encryptedData, ""UTF-8"");
</code></pre>

<p>You will have to use an encoding such as Base 64 as you did with the keys, <em>if</em> you want to communicate the cipher text using strings instead of bytes.</p>

<p>Encryption will result in data that looks like random bytes. Not all bytes have a character equivalent. The result of the conversion depends on the character encoding. UTF-8 may use many bytes, and many combinations won't result in correct characters. Java silently converts these, check the <code>Charset</code> and related classes for more information.</p>
","1995","<java><android><encryption><encryption-asymmetric><encryption-symmetric>","0","2","1","2012-12-05 01:27:17","13714088","2","4","1126991","","2012-12-05 01:27:17","2012-12-04 23:44:43",""
"32447937","mcrypt doesn't work in PHP 5.6 on windows/IIS","<p>I have been making heavy use of mcrypt in my php app for years, both on win/IIS and on linux. Although I'm running PHP 5.4.28 on my linux server, I just upgraded to PHP 5.6.11 on my windows 8.1 IIS box. And mcrypt no longer works. It doesn't throw any errors that I can see; it just doesn't work. Here is my encryption function:</p>

<pre><code>function Encrypt($text){ 
    global $salt;
    if($text != """")
        return trim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $salt, $text, MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND))));  
    else
        return """";
}   
</code></pre>

<p>This works fine on my linux server, but returns blank on my local windows box. From what I have read, mcrypt is built into php 5.6 for windows, so there should be no fiddling with extensions or ini file.</p>

<p>What am I missing?</p>
","<p>I don't have an answer, but this is rather long for a comment.</p>

<blockquote>
  <p>It doesn't throw any errors that I can see</p>
</blockquote>

<p>Have you tested your configuration to verify that you can you see errors when they occur?</p>

<blockquote>
  <p>but returns blank on my local windows box</p>
</blockquote>

<p>If it's returning then it's not causing a fatal error. Hence the mcrypt functions are defined. Have you checked that the constants are defined? Have you checked that the version of libmcrypt matches the PHP extension requirement?</p>

<p>Have you checked that the inputs to the mcrypt_*() functions look sensible?</p>

<pre><code>return trim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $salt, $text, MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND))));  
</code></pre>

<p>Even if the above worked, its a horrible bit of code. The reason for writing code and using high level languages is not so your computer can understand them but so human beings can understand the code:</p>

<pre><code>$iv=mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB);
$encypted=mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $salt, $text, MCRYPT_MODE_ECB
               , $iv, MCRYPT_RAND); 
$encoded=base64_encode($encrypted);
return $encoded;
</code></pre>

<p>(laying your code out like this also makes it simpler to inject checks, breakpoints and other debugging measures). </p>
","1902","<php><iis><encryption><mcrypt><encryption-symmetric>","7","3","4","2015-12-20 07:02:46","32576413","4","","2224584","","2015-12-20 07:02:46","2015-09-08 01:23:38",""
"32447937","mcrypt doesn't work in PHP 5.6 on windows/IIS","<p>I have been making heavy use of mcrypt in my php app for years, both on win/IIS and on linux. Although I'm running PHP 5.4.28 on my linux server, I just upgraded to PHP 5.6.11 on my windows 8.1 IIS box. And mcrypt no longer works. It doesn't throw any errors that I can see; it just doesn't work. Here is my encryption function:</p>

<pre><code>function Encrypt($text){ 
    global $salt;
    if($text != """")
        return trim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $salt, $text, MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND))));  
    else
        return """";
}   
</code></pre>

<p>This works fine on my linux server, but returns blank on my local windows box. From what I have read, mcrypt is built into php 5.6 for windows, so there should be no fiddling with extensions or ini file.</p>

<p>What am I missing?</p>
","<p>PHP 5.6 has stronger encryption requirements than 5.4. In 5.6 you'll get this warning, which is really an error because it actually causes encryptions and decryptions to fail:</p>

<blockquote>
  <p>Warning: mcrypt_encrypt(): Key of size xx not supported by this algorithm. Only keys of sizes 16, 24 or 32 supported.</p>
</blockquote>

<p>...where ""xx"" is the length of your salt value. So the salt value has to be exactly 16, 24, or 32 characters in length.</p>
","1902","<php><iis><encryption><mcrypt><encryption-symmetric>","7","5","4","2015-12-20 07:02:46","32576413","4","","2224584","","2015-12-20 07:02:46","2015-09-08 01:23:38",""
"32447937","mcrypt doesn't work in PHP 5.6 on windows/IIS","<p>I have been making heavy use of mcrypt in my php app for years, both on win/IIS and on linux. Although I'm running PHP 5.4.28 on my linux server, I just upgraded to PHP 5.6.11 on my windows 8.1 IIS box. And mcrypt no longer works. It doesn't throw any errors that I can see; it just doesn't work. Here is my encryption function:</p>

<pre><code>function Encrypt($text){ 
    global $salt;
    if($text != """")
        return trim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $salt, $text, MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND))));  
    else
        return """";
}   
</code></pre>

<p>This works fine on my linux server, but returns blank on my local windows box. From what I have read, mcrypt is built into php 5.6 for windows, so there should be no fiddling with extensions or ini file.</p>

<p>What am I missing?</p>
","<p>Let's look at your code piece by piece. (With mostly cosmetic/whitespace changes.)</p>

<pre><code>function Encrypt($text)
{
    global $salt; // Why not make this a second parameter?
    if($text != """") { // An unusual check, for sure
        return trim( // base64_encode doesn't leave whitespace
            base64_encode(
                mcrypt_encrypt(
                    MCRYPT_RIJNDAEL_256, // This is a non-standard variant of the
                                         // Rijndael cipher. You want to use the
                                         // MCRYPT_RIJNDAEL_128 constant if you
                                         // wanted to use AES here.
                    $salt, // This is a key, not a salt!
                    $text,
                    MCRYPT_MODE_ECB, // ECB mode is the worst mode to use for
                                     // cryptography. Among other reasons, it
                                     // doesn't even use the IV. Search for 
                                     // ECB penguins for an idea of why ECB
                                     // mode is such a bad idea.
                    mcrypt_create_iv(
                        mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),
                        MCRYPT_RAND // You're using ECB mode so this is a waste
                                    // anyway, but you should use
                                    // MCRYPT_DEV_URANDOM instead of MCRYPT_RAND
                    )
                )
            )
        );  
    }
    return """";
}
</code></pre>

<p>I would strongly recommend that you don't use this function for anything. It's not secure. <a href=""https://filippo.io/the-ecb-penguin/"">Don't use ECB mode</a>.</p>

<p>Furthermore, <a href=""https://paragonie.com/blog/2015/05/using-encryption-and-authentication-correctly"">unauthenticated encryption is dangerous</a> and <a href=""https://paragonie.com/blog/2015/05/if-you-re-typing-word-mcrypt-into-your-code-you-re-doing-it-wrong"">libmcrypt is abandonware</a>.</p>
","1902","<php><iis><encryption><mcrypt><encryption-symmetric>","7","8","4","2015-12-20 07:02:46","32576413","4","","2224584","","2015-12-20 07:02:46","2015-09-08 01:23:38",""
"32447937","mcrypt doesn't work in PHP 5.6 on windows/IIS","<p>I have been making heavy use of mcrypt in my php app for years, both on win/IIS and on linux. Although I'm running PHP 5.4.28 on my linux server, I just upgraded to PHP 5.6.11 on my windows 8.1 IIS box. And mcrypt no longer works. It doesn't throw any errors that I can see; it just doesn't work. Here is my encryption function:</p>

<pre><code>function Encrypt($text){ 
    global $salt;
    if($text != """")
        return trim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $salt, $text, MCRYPT_MODE_ECB, mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB), MCRYPT_RAND))));  
    else
        return """";
}   
</code></pre>

<p>This works fine on my linux server, but returns blank on my local windows box. From what I have read, mcrypt is built into php 5.6 for windows, so there should be no fiddling with extensions or ini file.</p>

<p>What am I missing?</p>
","<p>As SweatCoder stated before, your key for MCRYPT_RIJNDAEL_256 has to have a length of 32. To continue working with your old key being smaller than 32 (here called $oldkey) use</p>

<pre><code>$key = str_pad($oldkey, 32, chr(0));
</code></pre>

<p>($key is what you called $salt)</p>
","1902","<php><iis><encryption><mcrypt><encryption-symmetric>","7","0","4","2015-12-20 07:02:46","32576413","4","","2224584","","2015-12-20 07:02:46","2015-09-08 01:23:38",""
"9890172","Sql Server 2008R2 enterprise with data encryption - backup and restore","<p>I have a DB on which I enabled symmetric encryption, to encrypt some columns.
I created a SP to enable encryption after I create the DB from script, as below</p>

<pre><code>CREATE PROCEDURE [dbo].[sys_EnableSymmetricEncryption]
AS
BEGIN
--If there is no master key, create one now. 
IF NOT EXISTS 
  (SELECT * FROM sys.symmetric_keys WHERE symmetric_key_id = 101)
  CREATE MASTER KEY ENCRYPTION BY 
  PASSWORD = '9809u0ij989oih9o8yyo98yyo89uyp9p9'

CREATE CERTIFICATE My_Certificate
  WITH SUBJECT = 'My Database';

CREATE SYMMETRIC KEY My_Key_01
  WITH ALGORITHM = AES_256
  ENCRYPTION BY CERTIFICATE My_Certificate;
END 
</code></pre>

<p>So after I create db from script, I run this and then I can store data in encrypted columns<br>
with</p>

<pre><code>INSERT INTO [dbo].[Cards]
      ([CardNumber]
      ,[CardSecurityCode]
      ,[CardExpirationDate]
      ,[NameOnCard])
 VALUES
  (EncryptByKey(Key_GUID('My_Key_01'), @CardNumber) ,
  EncryptByKey(Key_GUID('My_Key_01'), @CardSecurityCode) ,
  EncryptByKey(Key_GUID('My_Key_01'), @CardExpirationDate) ,
  EncryptByKey(Key_GUID('My_Key_01'), @NameOnCard))
</code></pre>

<p>and retrieve data with</p>

<pre><code>OPEN SYMMETRIC KEY My_Key_01
   DECRYPTION BY CERTIFICATE My_Certificate;

SELECT [CardID]
      ,CONVERT(nvarchar, DecryptByKey([CardNumber])) as 'CardNumber'
      ,CONVERT(nvarchar, DecryptByKey([CardSecurityCode])) as 'CardSecurityCode'
      ,CONVERT(nvarchar, DecryptByKey([CardExpirationDate])) as 'CardExpirationDate'
      ,CONVERT(nvarchar, DecryptByKey([NameOnCard])) as 'NameOnCard'
    FROM [Cards]
</code></pre>

<p>All works well till I backup db and try to restore the backup on a different server
After I restore, when I try to run Select (as above) I get this error</p>

<p><code>Please create a master key in the database or open the master key in the session before performing this operation.</code></p>

<p>So I was trying to recreate the key with</p>

<pre><code>IF NOT EXISTS 
  (SELECT * FROM sys.symmetric_keys WHERE symmetric_key_id = 101)
  CREATE MASTER KEY ENCRYPTION BY 
  PASSWORD = '9809u0ij989oih9o8yyo98yyo89uyp9p9'
</code></pre>

<p>But then on select In still get the same error.
If I try to run the first Sp shown above, to create master key, cert and symmetric key, I get error</p>

<p><code>Msg 15581, Level 16, State 3, Procedure sys_EnableSymmetricEncryption, Line 11
Please create a master key in the database or open the master key in the session before performing this operation.
Msg 15282, Level 16, State 1, Procedure sys_EnableSymmetricEncryption, Line 14
A key with name 'OneTest_Key_01' or user defined unique identifier already exists or you do not have permissions to create</code></p>

<p>Maybe I should try to delete the certificate and symmetric key before trying to create them, but I don't know where are they located.</p>

<p>Any idea how to handle this?</p>

<p>Thanks</p>

<p>PS if I restore in same server, even as different database, all works fine</p>
","<p>Try to run:</p>

<pre><code>ALTER MASTER KEY REGENERATE WITH ENCRYPTION BY PASSWORD = '9809u0ij989oih9o8yyo98yyo89uyp9p9';
</code></pre>
","1829","<sql-server-2008><encryption-symmetric>","0","1","1","2017-11-22 21:02:36","","0","","1630604","","2017-11-22 21:02:36","2012-03-27 13:08:43",""
"29392226","WM-Bus extended layer decoding","<p>I am trying to decrypt wm-bus telegram from Kamstrup Multical21 in C1 mode with Extended Link Layer.<br>
The payload together with ELL info is following:<br>
<code>23 44 2D 2C 45 45 71 63 1B 16 8D 20 6A 31 FB 7C 20 39 A3 79 60 4B 90 BD FC BE 8D D8 CB 18 CE 77 DC 41 CE 8C</code></p>

<p>Analysing <code>CI = 8D</code> I found that there is a ELL with following data:<br>
<code>CI (1 byte) CC(1 byte)   ACC(1 byte)  SN(4 bytes)  CRC(2  bytes)
 8D          20           6A           31 FB 7C 20  39 A3</code></p>

<p>The documentation says that the buffer which should be decrypted shall contain CRC from ELL, i.e:<br>
<code>39 A3 79 60 4B 90 BD FC BE 8D D8 CB 18 CE 77 DC 41 CE 8C</code></p>

<p>I have got the AES key from the Manufacturer:<br>
<code>B9 7A 6D 4E C2 74 A4 6D 87 0E 31 27 D9 A0 AF 63</code></p>

<p>Initialization vector for ELL shall be:<br>
<code>M-field   A-field            CC-field SN-field      FN     BC
 2D 2C     45 45 71 63 1B 16  20       31 FB 7C 20   00 00  00</code></p>

<p>After decrypting, I get the following result:<br>
<code>08 3a  5f  ce  b2  8d  51  97  94  a2  5b  fb  61  ab  2e  c0
 e4 20  c8  2a  43  ff  3a  75  6f  93  d0  ac  8c  79  b7  a1</code></p>

<p>Since there is no <code>2F 2F</code> in the beginning, something is wrong!
Can somebody help me and tell what I have done wrong?
Thanks in advance.</p>
","<p>I had a look in the latest Kamstrup docs (""Wireless M-Bus Communication Kamstrup Water Meters - MULTICAL® 21 and flowIQ® water meters Mode C1 according to EN 13757-4:2013"")</p>

<p>When I decrypt your packet I find:
25877968217E8E01000000000000000000</p>

<p>Firstly, it seems the Kamstrup decrypted packets does not start with 2F 2F.</p>

<p>The first 2 bytes of the decrypted packet is supposedly the PLCRC (I can't confirm that right now - don't have immediate access to the standard that defines the crc polynomial algorithm), and then the next byte is 79, which means it is a Compact Frame, then the next 4 bytes are 2 more CRCs, and then the next 2 bytes 0100 is probably the Info, which is manufacturer specific and I don't know how to interpret that yet.</p>

<p>This meter is probably R type 1, right? (on the face place, the ""Con.:"" parameter's 3rd last digit should be a 1) So its format would be [Info][Volume][Target Volume] - 2 bytes, 4 bytes, 4 bytes - I kind of assume that, since this packet is a compact packet, so I don't get the actual format the long packet would have, e.g. number of decimals - which normally you'd need - but your values are zeroes? so decimals doesn't matter. (the 'long' packet of course is every 6th packet or so?)</p>

<p>The IV I get is:
2D2C454571631B162031FB7C20000000
which is exactly the same as yours.</p>

<p>The encrypted packet I use is:
39A379604B90BDFCBE8DD8CB18CE77DC41
so I exclude the CE and 8C you had on yours? 
When I put them in, the decrypted packet becomes:
25877968217E8E01000000000000000000BB49
which is pretty much the same packet with some more crc stuff at the back, I suspect, so I really do not get what you do to decrypt, since your result is completely different?</p>

<p>Ok, maybe you use AES/CBC/NoPadding, as in OpenMUC.</p>

<p>Kamstrup uses AES/CTR/NoPadding. That is how they don't have to decrypt multiples of 16 byte blocks? The way that looks in my Java code is as follows:
Cipher cipher = Cipher.getInstance(""AES/CTR/NoPadding"");</p>
","1814","<aes><wireless><encryption-symmetric>","3","4","1","2018-06-14 14:42:54","","2","1","3194340","","2015-04-01 13:45:58","2015-04-01 13:34:19",""
"34981824","Does Azure's Key Vault support symmetric key encryption?","<p>I would appreciate clarification and advice on the following:</p>

<p>My project requires me to use symmetric data encryption (using AES), in a Nodejs environment, to secure data on a database (mongodb). Ideally, I would like to do this as follows:</p>

<p>Store the symmetric key in Azure Key Vault as a Key, then make 'encrypt' calls to the vault to perform AES encryption on the data with the Key. The encrypted data is sent in the response to my app and then stored in the database in its encrypted form.</p>

<p>I am confused after reading MS Azure's documentation and related blog posts, where some sources claim symmetric key encryption is supported, but there is no official documentation on this.</p>

<p>Can anyone advise whether this an exhaustive list of all key types and algorithms supported for Azure's Key Vault? 
<a href=""https://msdn.microsoft.com/en-us/library/azure/dn903623.aspx#BKMK_KeyTypes"" rel=""nofollow noreferrer"">https://msdn.microsoft.com/en-us/library/azure/dn903623.aspx#BKMK_KeyTypes</a></p>

<p>It also seems this may be an option (<a href=""http://www.nuget.org/packages/Microsoft.Azure.KeyVault.extensions"" rel=""nofollow noreferrer"">http://www.nuget.org/packages/Microsoft.Azure.KeyVault.extensions</a>) but only for environments on .NET. Any love for Nodejs?</p>

<p>If indeed symmetric keys/encryption are not currently supported, can anyone offer an alternative means to my approach described above?</p>

<p>Thanks and much appreciated.</p>
","<p>I agree the documentation/blogs do seem a little confusing on this topic.  From my understanding the key vault does not yet currently support symmetric encryption.  I believe the closest you can get is storing symmetric keys as secrets and using them outside of the vault.</p>

<p>This <a href=""https://azure.microsoft.com/en-us/documentation/articles/storage-encrypt-decrypt-blobs-key-vault/"" rel=""nofollow"">article</a> talks about doing such.  See the section where the heading is <strong>Use Key Vault secrets</strong></p>

<p>I understand your using node.js and that example is in powershell just trying to illustrate the example of symmetric encryption with a secret.  Obviously the crypto operations happen outside the vault.  So, at rest the keys are more secure but do get exposed in memory anytime an operation occurs.</p>

<p>Hope that helps.</p>

<blockquote>
  <p>Here is an example in PowerShell of creating a secret in Key Vault that can be used as a SymmetricKey.</p>
</blockquote>

<pre><code>SymmetricKey sec = (SymmetricKey) cloudResolver.ResolveKeyAsync(
""https://contosokeyvault.vault.azure.net/secrets/TestSecret2/"",
CancellationToken.None).GetAwaiter().GetResult();
</code></pre>
","1778","<node.js><aes><encryption-symmetric><azure-keyvault>","2","3","1","2019-07-03 10:42:49","35087152","2","2","1042934","","2019-07-03 10:42:49","2016-01-24 21:38:33",""
"15130564","Encryption of datasource password in JBoss without the application policy","<p>The main restriction is that for different clients I must have different databases with different credentials.
So I must create, for new clients, data sources on the fly (without restarting JBoss):</p>

<pre><code>&lt;datasources&gt;
   &lt;xa-datasource&gt;
     &lt;jndi-name&gt;jdbc/1349173612812_ARCHIVE_001DS&lt;/jndi-name&gt;
     &lt;isSameRM-override-value&gt;false&lt;/isSameRM-override-value&gt;
     &lt;xa-datasource-class&gt;com.microsoft.sqlserver.jdbc.SQLServerXADataSource&lt;/xa-datasource-class&gt;
     &lt;xa-datasource-property name=""URL""&gt;jdbc:sqlserver://DEVDB\MYDB;databaseName=DEV_ARCHIVE_001&lt;/xa-datasource-property&gt;
     &lt;xa-datasource-property name=""DatabaseName""&gt;DEV_ARCHIVE_001&lt;/xa-datasource-property&gt;
     &lt;xa-datasource-property name=""SelectMethod""&gt;cursor&lt;/xa-datasource-property&gt;
     &lt;xa-datasource-property name=""User""&gt;admin&lt;/xa-datasource-property&gt;
     &lt;xa-datasource-property name=""Password""&gt;plain text password&lt;/xa-datasource-property&gt;
  &lt;/xa-datasource&gt;
&lt;/datasources&gt;
</code></pre>

<p>Everything works fine, but know I must encrypt the passwords, for security measures.</p>

<p>I found the solution using <code>application policy</code> but in order for a policy to be visible to JBoss the server must be restarted - which is not an option for me.</p>

<p>Is there another method of securing the password?</p>
","<p><a href=""http://docs.jboss.org/jbosssecurity/docs/6.0/security_guide/html/Encrypting_Data_Source_Passwords.html"" rel=""nofollow"">This</a> will help to Encrypt the password.</p>
","1777","<java><java-ee><encryption><jboss><encryption-symmetric>","1","0","2","2013-12-13 12:02:23","","2","1","","","","2013-02-28 08:13:33",""
"15130564","Encryption of datasource password in JBoss without the application policy","<p>The main restriction is that for different clients I must have different databases with different credentials.
So I must create, for new clients, data sources on the fly (without restarting JBoss):</p>

<pre><code>&lt;datasources&gt;
   &lt;xa-datasource&gt;
     &lt;jndi-name&gt;jdbc/1349173612812_ARCHIVE_001DS&lt;/jndi-name&gt;
     &lt;isSameRM-override-value&gt;false&lt;/isSameRM-override-value&gt;
     &lt;xa-datasource-class&gt;com.microsoft.sqlserver.jdbc.SQLServerXADataSource&lt;/xa-datasource-class&gt;
     &lt;xa-datasource-property name=""URL""&gt;jdbc:sqlserver://DEVDB\MYDB;databaseName=DEV_ARCHIVE_001&lt;/xa-datasource-property&gt;
     &lt;xa-datasource-property name=""DatabaseName""&gt;DEV_ARCHIVE_001&lt;/xa-datasource-property&gt;
     &lt;xa-datasource-property name=""SelectMethod""&gt;cursor&lt;/xa-datasource-property&gt;
     &lt;xa-datasource-property name=""User""&gt;admin&lt;/xa-datasource-property&gt;
     &lt;xa-datasource-property name=""Password""&gt;plain text password&lt;/xa-datasource-property&gt;
  &lt;/xa-datasource&gt;
&lt;/datasources&gt;
</code></pre>

<p>Everything works fine, but know I must encrypt the passwords, for security measures.</p>

<p>I found the solution using <code>application policy</code> but in order for a policy to be visible to JBoss the server must be restarted - which is not an option for me.</p>

<p>Is there another method of securing the password?</p>
","<p>The class org.jboss.resource.security.SecureIdentityLoginModule can be used to both encrypt database passwords and to provide a decrypted version of the password when the data source configuration is required by the server. The SecureIdentityLoginModule uses a hard-coded password to encrypt/decrypt the data source password. </p>

<p>The data source password is encrypted using the SecureIdentityLoginModule main method by passing in the clear text password. The SecureIdentityLoginModule is provided by jbosssx.jar. </p>

<p>This procedure is for JBoss Enterprise Application Platform versions 5.1 and later</p>

<ol>
<li><p>GoTo Jboss directory or  Change directory to the jboss-as directory
 for Example  user/demo/Jboss/</p>

<p><strong>Linux command</strong></p></li>
</ol>

<p>java -cp client/jboss-logging-spi.jar:lib/jbosssx.jar org.jboss.resource.security.SecureIdentityLoginModule PASSWORD</p>

<p>or </p>

<p>java -cp bin/client/jboss-logging-spi.jar:standalone/lib/ext/jbosssx.jar org.jboss.resource.security.SecureIdentityLoginModule PASSWORD</p>

<p><strong>Windows command:</strong>
java -cp client\jboss-logging-spi.jar;lib\jbosssx.jar org.jboss.resource.security.SecureIdentityLoginModule PASSWORD</p>

<p>Result:</p>

<p>The command will return an encrypted password.</p>

<blockquote>
  <p><strong>Important Note</strong></p>
</blockquote>

<p>:If you got error after executing this command 
 In this case check , you should have  "" jbosssx.jar "", "" jboss-logging-spi.jar "" in your jboss.
it should be under lib directory or may in standalone/lib/ext/
(In the cammand it's taking path for this jar to encrypt the password)</p>
","1777","<java><java-ee><encryption><jboss><encryption-symmetric>","1","0","2","2013-12-13 12:02:23","","2","1","","","","2013-02-28 08:13:33",""
"19462675","DES encryption plain vs. cipher length","<p>I am using Java to make a toy program that encrypts a message using DES encryption. The message I want to encrypt is:</p>

<pre><code>String msg=""This is a secret message"";
</code></pre>

<p>Which I convert to bytes as:</p>

<pre><code>byte [] msgBytes=msg.getBytes();
</code></pre>

<p>And send it to encrypt function that works as follows:</p>

<pre><code>//encryption function
public static String encryptMsg(byte [] msgBytes, SecretKey myDesKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException
{
    Cipher desCipher;
    // Create the cipher 
    desCipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
    desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);
    byte[] textEncrypted = desCipher.doFinal(msgBytes);

// converts to base64 for easier display.
byte[] base64Cipher = Base64.encode(textEncrypted);
return new String(base64Cipher);
} //end encryptMsg
</code></pre>

<p>Then, I display the cipher, the cipher and plaintext lengths and I get:</p>

<pre><code>Encrypted Message: FDCU+kgWz25urbQB5HbFtqm0HqWHGlGBHlwwEatFTiI=
Original msg length: 24
Encrypted msg length: 44
</code></pre>

<p>Can you please clarify to me why the cipher length is 44 while the original message length is 24?</p>

<p><strong>EDIT:</strong>
Kindly, I need the answer with clarification. The cipher always ends with =. Could this be because of the padding? Can you explain to me why/how the cipher is resulted with this length? And always ends with =? 
Is my code correct or there is a mistake? I have doubts in the encoding part.</p>
","<p>There are several things going on:</p>

<ol>
<li><p><a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#getBytes()"" rel=""nofollow noreferrer""><code>msg.getBytes()</code></a> returns the bytes representing an encoding of the string using the ""platform's default charset"" (e.g. could be UTF-8 <em>or</em> UTF-16 <em>or</em> ..): <a href=""http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#getBytes(java.nio.charset.Charset)"" rel=""nofollow noreferrer"">specify the encoding manually</a> to avoid confusion! In any case, see <code>msgBytes.length</code> to get the <em>true</em> plain text length.</p></li>
<li><p><a href=""http://en.wikipedia.org/wiki/DES"" rel=""nofollow noreferrer"">DES</a>, being a block cypher, will have output padded along a <a href=""http://en.wikipedia.org/wiki/Block_size_(cryptography)"" rel=""nofollow noreferrer"">block size</a> boundary - <em>but</em> this will <em>always</em> be larger than the plain text (refer to <code>msgBytes.length</code>) length when using <a href=""http://www.ietf.org/rfc/rfc2898.txt"" rel=""nofollow noreferrer"">PKCS#5</a> because the plain text is always padded with [1,8] bytes. To see what the <em>true</em> encrypted size is, see <code>textEncrypted.length</code>.</p></li>
<li><p>The encrypted bytes are encoded using base-64 and this process - which is independent of the encryption - inflates the number of bytes required <a href=""https://stackoverflow.com/questions/4715415/base64-what-is-the-worst-possible-increase-in-space-usage"">by about 33%</a> (as only 6 bits per character/byte are used). The Java base-64 implementation also <a href=""http://en.wikipedia.org/wiki/Base64#Padding"" rel=""nofollow noreferrer"">adds padding</a> which is where the trailing ""="" character is introduced.</p></li>
</ol>

<p>As long as you (or someone else with the correct algorithm and cipher key) can retrieve the initial string - by performing the inverse of each step in reverse order, then it works. If a particular step does not have an inverse/reverse operation or cannot be ""undone"", then something is wrong; but this also means that <em>every step can be individually tested</em>.</p>

<hr>

<p>To the numbers!</p>

<ol>
<li><code>msg.getBytes()</code> returns an ASCII/UTF-8 encoded sequence (if it used UTF-16 or another another ""wide"" encoding then the numbers below would be too large)</li>
<li>Therefore, <code>msgBytes.length</code> is 24</li>
<li>And since <code>msgBytes.length</code> mod 8 is 0, the plain text is <em>padded</em> with 8 bytes that have the value of 0x08 (per CKCS#5)</li>
<li>Thus, <code>textEncrypted.length</code> is 32 (24 data + 8 padding)</li>
<li>Due to base-64 encoding, 32 bytes * 1.33 ~ 43 characters</li>
<li>And with base-64 padding (<code>=</code>), the final result is 44 characters!</li>
</ol>
","1764","<java><encryption><des><encryption-symmetric>","1","2","2","2013-10-21 20:55:35","19462861","0","2","815724","","2013-10-19 08:17:44","2013-10-19 05:21:14",""
"19462675","DES encryption plain vs. cipher length","<p>I am using Java to make a toy program that encrypts a message using DES encryption. The message I want to encrypt is:</p>

<pre><code>String msg=""This is a secret message"";
</code></pre>

<p>Which I convert to bytes as:</p>

<pre><code>byte [] msgBytes=msg.getBytes();
</code></pre>

<p>And send it to encrypt function that works as follows:</p>

<pre><code>//encryption function
public static String encryptMsg(byte [] msgBytes, SecretKey myDesKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException
{
    Cipher desCipher;
    // Create the cipher 
    desCipher = Cipher.getInstance(""DES/ECB/PKCS5Padding"");
    desCipher.init(Cipher.ENCRYPT_MODE, myDesKey);
    byte[] textEncrypted = desCipher.doFinal(msgBytes);

// converts to base64 for easier display.
byte[] base64Cipher = Base64.encode(textEncrypted);
return new String(base64Cipher);
} //end encryptMsg
</code></pre>

<p>Then, I display the cipher, the cipher and plaintext lengths and I get:</p>

<pre><code>Encrypted Message: FDCU+kgWz25urbQB5HbFtqm0HqWHGlGBHlwwEatFTiI=
Original msg length: 24
Encrypted msg length: 44
</code></pre>

<p>Can you please clarify to me why the cipher length is 44 while the original message length is 24?</p>

<p><strong>EDIT:</strong>
Kindly, I need the answer with clarification. The cipher always ends with =. Could this be because of the padding? Can you explain to me why/how the cipher is resulted with this length? And always ends with =? 
Is my code correct or there is a mistake? I have doubts in the encoding part.</p>
","<p>The result of a DES encryption will always be a multiple of 8 bytes. The input is also padded to a multiple of 8 bytes according to the padding algorithm specified.</p>

<p>The base 64 encoding encodes each 3 bytes into 4 characters (3x8 = 4x6 = 24), and ensures the output length is a multiple of 4 by padding with = characters. </p>

<p>So, the 44 characters output corresponds to 33 bytes, but the = at the end indicates that in fact there were only 32 bytes. Which is fine, since 24 bytes clear data with PKCS5 padding becomes 32 bytes.</p>
","1764","<java><encryption><des><encryption-symmetric>","1","2","2","2013-10-21 20:55:35","19462861","0","2","815724","","2013-10-19 08:17:44","2013-10-19 05:21:14",""
"38352275","javax.crypto.Cipher equivalent code in Nodejs Crypto Javascript","<p>I'm trying to convert below java code into nodejs.</p>

<pre><code>public static String encrypt(String accessToken) throws Exception {
        Cipher cipher = Cipher.getInstance(""AES"");
        String merchantKey = ""11111111111111111111"";
        String st = StringUtils.substring(merchantKey, 0, 16);
        System.out.println(st);
        Key secretKey = new SecretKeySpec(st.getBytes(), ""AES"");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedByte = cipher.doFinal(accessToken.getBytes());

        // convert the byte to hex format
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i &lt; encryptedByte.length; i++) {
            sb.append(Integer.toString((encryptedByte[i] &amp; 0xff) + 0x100, 16).substring(1));
        }
        return sb.toString();
    }
</code></pre>

<p>Here is what I was able to figure out-</p>

<pre><code>function freeChargeEncryptAES(token){
    var fcKey = ""11111111111111111111"".substring(0, 16);
    var cipher = crypto.createCipher('aes-128-ecb', fcKey, """");
    var encrypted = cipher.update(token,'ascii','hex');
    encrypted += cipher.final('hex');
    return encrypted;
}
</code></pre>

<p>I'm not able to get same output. For example if </p>

<blockquote>
  <p>token = ""abcdefgh""</p>
</blockquote>

<p>Java Code output   - <code>bc02de7c1270a352a98faa686f155df3</code></p>

<p>Nodejs Code output - <code>eae7ec6943953aca94594641523c3c6d</code></p>

<p>I've read from <a href=""https://stackoverflow.com/questions/24592607/javascript-nodejs-equivalent-code-for-the-java-code-cipher-dofinalbyte"">this answer</a> that by default encryption algorithm is <strong>aes-ecb</strong> which does not need IV. As the key length is 16, I'm assuming <code>aes-128-ecb</code> (16*8 = 128) is the algorithm that I should use.</p>

<p>Can someone help me figure out the problem ??</p>
","<p>Just need to change -</p>

<blockquote>
  <p><code>crypto.createCipher('aes-128-ecb', fcKey, """");</code></p>
</blockquote>

<p>to </p>

<blockquote>
  <p><code>crypto.createCipheriv('aes-128-ecb', fcKey, """");</code></p>
</blockquote>

<p>Reason is simple - <code>createCipher</code> method treats second parameter as <code>Encryption Password</code> while it is an <code>Encryption Key</code>.</p>

<p>My bad, even after reading <a href=""https://stackoverflow.com/questions/24592607/javascript-nodejs-equivalent-code-for-the-java-code-cipher-dofinalbyte"">this answer</a>, I've used wrong method (crypto.createCipher instead of crypto.createCipheriv). Below is proper working code in nodejs. That was all needed.</p>

<pre><code>function freeChargeEncryptAES(token){
    var fcKey = ""11111111111111111111"".substring(0, 16);
    var cipher = crypto.createCipheriv('aes-128-ecb', fcKey, """");
    var encrypted = cipher.update(token,'ascii','hex');
    encrypted += cipher.final('hex');
    return encrypted;
}
</code></pre>
","1760","<java><node.js><encryption><encryption-symmetric><javax.crypto>","1","0","1","2016-08-23 03:38:43","38353464","3","2","-1","","2017-05-23 10:28:47","2016-07-13 12:50:27",""
"7872771","Symmetric Encryption between .NET and Java","<p>I am using a 3rd party platform to create a landing page, it is a business requirement that I use this particular platform. </p>

<p>On their page I can encrypt data and send it to my server through a request parameter when calling a resource on my site. This is done through an AES Symmetric Encryption.</p>

<p>I need to specify a password, salt (which must be a hex value) and an initialization vector (but be 16 characters). </p>

<p>Their backend is a .NET platform. I know this because if I specify an IV longer than it expects the underlying exception is:</p>

<p><code>System.Security.Cryptography.CryptographicException:  Specified initialization vector (IV) does not match the block size for this algorithm. 
Source:  mscorlib</code></p>

<p>So for example, on their end I specify:</p>

<p><code>EncryptSymmetric(""Hello World"",""AES"",""P4ssw0rD"",""00010203040506070809"", ""000102030405060708090A0B0C0D0E0F"")</code></p>

<p>Where the inputs are: plain text, algorithm, pass phrase, salt, and IV respectively. </p>

<p>I get the value: <code>eg/t9NIMnxmh412jTGCCeQ==</code></p>

<p>If I try and decrypt this on my end using the JCE or the BouncyCastle provider I get (same algo,pass phrase, salt &amp; IV, with 1000 iterations): <code>2rrRdHwpKGRenw8HKG1dsA==</code> which is completely different. </p>

<p>I have looked at many different Java examples online on how to decrypt AES. One such demo is the following: <a href=""http://blogs.msdn.com/b/dotnetinterop/archive/2005/01/24/java-and-net-aes-crypto-interop.aspx"" rel=""nofollow"">http://blogs.msdn.com/b/dotnetinterop/archive/2005/01/24/java-and-net-aes-crypto-interop.aspx</a></p>

<p>How can I decrypt a AES Symmetric Encryption that uses a pass phrase, salt and IV, which was generated by the .NET framework on a Java platform? </p>

<p>I don't necessarily need to be able to decrypt the contents of the encryption string if I can generate the same signature on the java side and compare (if it turns out what is really being generated here is a hash).</p>

<p>I'm using JDK 1.5 in production so I need to use 1.5 to do this.</p>

<p>As a side note, a lot of the example in Java need to specify an repetition count on the java side, but not on the .NET side. Is there a standard number of iterations I need to specify on the java side which matches the default .NET output.</p>
","<p>As far as I can see, it is the iteration count which is causing the issue. With all things the same (salt,IV,iterations), the .Net implementation generates the same output as the Java implementation. I think you may need to ask the 3rd party what iterations they are using</p>
","1745","<java><.net><encryption><aes><encryption-symmetric>","3","1","2","2011-10-24 09:04:57","7873083","3","","266691","","2011-10-24 08:28:38","2011-10-24 08:08:22",""
"7872771","Symmetric Encryption between .NET and Java","<p>I am using a 3rd party platform to create a landing page, it is a business requirement that I use this particular platform. </p>

<p>On their page I can encrypt data and send it to my server through a request parameter when calling a resource on my site. This is done through an AES Symmetric Encryption.</p>

<p>I need to specify a password, salt (which must be a hex value) and an initialization vector (but be 16 characters). </p>

<p>Their backend is a .NET platform. I know this because if I specify an IV longer than it expects the underlying exception is:</p>

<p><code>System.Security.Cryptography.CryptographicException:  Specified initialization vector (IV) does not match the block size for this algorithm. 
Source:  mscorlib</code></p>

<p>So for example, on their end I specify:</p>

<p><code>EncryptSymmetric(""Hello World"",""AES"",""P4ssw0rD"",""00010203040506070809"", ""000102030405060708090A0B0C0D0E0F"")</code></p>

<p>Where the inputs are: plain text, algorithm, pass phrase, salt, and IV respectively. </p>

<p>I get the value: <code>eg/t9NIMnxmh412jTGCCeQ==</code></p>

<p>If I try and decrypt this on my end using the JCE or the BouncyCastle provider I get (same algo,pass phrase, salt &amp; IV, with 1000 iterations): <code>2rrRdHwpKGRenw8HKG1dsA==</code> which is completely different. </p>

<p>I have looked at many different Java examples online on how to decrypt AES. One such demo is the following: <a href=""http://blogs.msdn.com/b/dotnetinterop/archive/2005/01/24/java-and-net-aes-crypto-interop.aspx"" rel=""nofollow"">http://blogs.msdn.com/b/dotnetinterop/archive/2005/01/24/java-and-net-aes-crypto-interop.aspx</a></p>

<p>How can I decrypt a AES Symmetric Encryption that uses a pass phrase, salt and IV, which was generated by the .NET framework on a Java platform? </p>

<p>I don't necessarily need to be able to decrypt the contents of the encryption string if I can generate the same signature on the java side and compare (if it turns out what is really being generated here is a hash).</p>

<p>I'm using JDK 1.5 in production so I need to use 1.5 to do this.</p>

<p>As a side note, a lot of the example in Java need to specify an repetition count on the java side, but not on the .NET side. Is there a standard number of iterations I need to specify on the java side which matches the default .NET output.</p>
","<p>It all depends on how the different parts/arguments of the encryption are used.</p>

<p>AES is used to encrypt bytes. So you need to convert the string to a byte array. So you need to know the encoding used to convert the string. (UTF7, UTF8, ...).  </p>

<p>The key in AES has some fixed sizes. So you need to know, how to come from a passphrase to an AES key with the correct bitsize.</p>

<p>Since you provide both salt and IV, I suppose the salt is not the IV. There is no standard way to handle the Salt in .Net. As far as I remember a salt is mainly used to protect against rainbow tables and hashes. The need of a Salt in AES is unknown to me.</p>

<p>Maybe the passphrase is hashed (you did not provide the method for that) with the salt to get an AES key.</p>

<p>The IV is no secret. The easiest method is to prepend the encrypted data with the IV. Seen the length of the encrypted data, this is not the case.</p>

<p>I don't think your unfamiliarity of .Net is the problem here. You need to know what decisions the implementer of the encryption made, to come from your parameters to the encrypted string.</p>
","1745","<java><.net><encryption><aes><encryption-symmetric>","3","2","2","2011-10-24 09:04:57","7873083","3","","266691","","2011-10-24 08:28:38","2011-10-24 08:08:22",""
"11027708","Include an encrypted password in a URL? Possible?","<p>We have a typical web-based login system. We want customers to have the ability to generate a ""login link"" that <strong>doesn't ever expire</strong> and includes their password.
We want to therefore create a link which includes their password in encrypted form.
NOTE: I know the best way is a lookup table where each link has a unique key... I won't go into why that won't work for us; it won't.</p>

<p>I'm not familiar with public key encryption.. Maybe that's what I need?</p>

<p>Here's what I'm thinking. This still might not be enough, so please let me know:</p>

<p>Definition: user-password refers to the user's password that we want in encrypted form in the link.</p>

<p>We cannot use one encryption key for all user-passwords because it may be possible to derive the encryption key by generating tons of links, so...</p>

<ul>
<li><p>Use a standard form of symmetric encryption.</p></li>
<li><p>The server has a text file with 1000 complex encryption keys.</p></li>
<li><p>When a link is generated (using the PHP script that has that list), one of the 1000 encyption keys is chosen to encrypt their plaintext password (chosen in sequence, not at random to prevent the same from being chosen close to the same time).</p></li>
<li><p>Before encrypting the user's password, add something like ""s345lm34l5k342342343534432324sdfs"" to the start of it, to ""salt"" it. (Ex: password1 becomes s345lm34l5k342342343534432324sdfspassword1). ""Salting"" makes it harder to decrypt against dictionary attacks. This salt is kept private. But, of course, there's the risk it can be compromised and it's one salt for all passwords, so...</p></li>
<li><p>In addition, there's a second randomly generated salt added to the password. This salt is encrypted with a single strong password. Because both the salt and the password encrypting it is a random pattern of bytes, it makes it harder to determine the salt.</p></li>
<li><p>The link maker tool only lets you generate 15 links every 10 minutes, and then locks out the IP.</p></li>
<li>The link maker tool doesn't not generate links unless the user/password provided to it is actual a functioning user/password combination. That way, if someone is just try to generate links to determine the encryption info, it won't work. Still, theoretically, they could obtain a valid user/password and try to brute force.</li>
</ul>

<p>Is this secure?</p>
","<p>No, because the encrypted password has become the password. Have you tried SSL? SSL should solve your problems, you can just use a plain URL on HTTP level.</p>
","1692","<encryption><encryption-symmetric>","1","5","1","2012-06-14 20:23:57","11040827","3","","1086584","","2012-06-14 06:41:43","2012-06-14 06:22:02",""
"23138797","How to write encrypted data to a text file?","<p>I have a project where we write a small amount of data to a file every 5 minutes. The idea is to look at how this data changes over a period of hours, days, and weeks. </p>

<p>One of the requirements is to store this data in a secure format. We already have an encryption scheme for sending this data across a network as a byte[] array via DataI/O streams. </p>

<p>The question I have is this, is there a way to write encrypted byte[] arrays to a text file in such a way that I can read them back out? My biggest problem at the moment is that I'm reading Strings from the files, which messes up the byte[] arrays. </p>

<p>Any thoughts or pointers on where to go?</p>
","<p>What you need to do is take your data and put it into a byte array. Then once it is in a byte array, you can encrypt it using an encryption algorithm. Then you write it to the file.</p>

<p>When you want to get the original data back, you have to read the byte array from the file, then decrypt the byte array and then you will have your original data. You cannot just read this data as a string because your encryption algorithm will create bytes that cannot be represented as regular chars so your data will get messed up.</p>

<p>Just make sure you read the encrypted data as a byte array and not a string, that is where you are having a problem.</p>

<hr>

<p>If you want to write multiple byte arrays to a single file, then you should probably do something like this since you are using Java:</p>

<pre><code>writer.print(arr.length);
writer.print(arr);
writer.flush();
</code></pre>

<p>Do this for each byte array. Then when you read the byte arrays back:</p>

<pre><code>int length = reader.readInt();
byte[] bytes = new byte[length];
// fill array
</code></pre>

<p>This way the file can be structured like this:</p>

<blockquote>
  <p>[length of following array][array][length of second array][second array]</p>
</blockquote>

<p>You will be able to put all of the byte arrays back to back, and since each array starts with the length of the array, you will know how much data needs to be put into each array.</p>
","1672","<java><file><encryption><encryption-symmetric>","5","5","2","2019-03-04 23:39:45","23138875","6","0","","","","2014-04-17 16:38:54",""
"23138797","How to write encrypted data to a text file?","<p>I have a project where we write a small amount of data to a file every 5 minutes. The idea is to look at how this data changes over a period of hours, days, and weeks. </p>

<p>One of the requirements is to store this data in a secure format. We already have an encryption scheme for sending this data across a network as a byte[] array via DataI/O streams. </p>

<p>The question I have is this, is there a way to write encrypted byte[] arrays to a text file in such a way that I can read them back out? My biggest problem at the moment is that I'm reading Strings from the files, which messes up the byte[] arrays. </p>

<p>Any thoughts or pointers on where to go?</p>
","<p>See <a href=""https://stackoverflow.com/q/10283637/1663987"">How to append to AES encrypted file</a> for an example of an AES+CBC Java example which allows opening an already encrypted file and appending more encrypted data to in, while not requiring any special handling when decrypting it since it looks just like it would if the entire file had been encrypted just once.</p>
","1672","<java><file><encryption><encryption-symmetric>","5","0","2","2019-03-04 23:39:45","23138875","6","0","","","","2014-04-17 16:38:54",""
"25333348","SQL Server 2008 R2 Encryption Issue, when Decrypts Show Special Characters","<p>I am a quite new to SQL Server encryption and I need to encrypt some columns of my database. I managed to create the Master Key, Certificate, Symmetric key and encrypt my column, but when I decrypt it, it shows some characters similar to Chinese, have any one experienced something similar? </p>

<p>This is my code.</p>

<pre><code>DROP SYMMETRIC KEY CL1AES256Key1;
GO
DROP CERTIFICATE CL1AES256Cert1
GO
DROP MASTER KEY
GO

USE MYDB
GO
IF NOT EXISTS 
(SELECT * FROM sys.symmetric_keys WHERE symmetric_key_id = 101)
CREATE MASTER KEY ENCRYPTION BY 
PASSWORD = '24RJFEGFJuifjei343'
GO

CREATE CERTIFICATE CL1AES256Cert1
   WITH SUBJECT = 'Encrypting certificate',
   EXPIRY_DATE = '12/31/2030';
GO

CREATE SYMMETRIC KEY CL1AES256Key1
    WITH ALGORITHM = AES_256
    ENCRYPTION BY CERTIFICATE CL1AES256Cert1;
GO

OPEN SYMMETRIC KEY CL1AES256Key1
DECRYPTION BY CERTIFICATE CL1AES256Cert1;
INSERT INTO TMP VALUES(ENCRYPTBYKEY(KEY_GUID('CL1AES256Key1'), 'Yummi'))
CLOSE SYMMETRIC KEY CL1AES256Key1;

OPEN SYMMETRIC KEY CL1AES256Key1
DECRYPTION BY CERTIFICATE CL1AES256Cert1;
SELECT CAST(DECRYPTBYKEY(ENC) as nvarchar) FROM dbo.TMP
CLOSE SYMMETRIC KEY CL1AES256Key1;
</code></pre>

<p>Here is the result <code>留浭i</code></p>

<p>If somebody knows where I am making the mistake, it would help me a lot.</p>

<p>Regards,</p>

<p>Fabiano</p>
","<p>You are casting the encrypted value as an <em>nvarchar</em>, but when you use the insert statement, you specify a regular varchar. If you cast the result as a varchar, it should work as expected.</p>

<p>Also, if you prefix your string with the character <code>N</code>, like <code>N'Yummi'</code>, it should also work, since using <code>N</code> tells SQL server that this string literal is unicode. See <a href=""http://msdn.microsoft.com/en-us/library/ms179899.aspx"">http://msdn.microsoft.com/en-us/library/ms179899.aspx</a></p>

<p>You can go down a very big rabbit hole on string collations in SQL server. </p>

<p><a href=""http://msdn.microsoft.com/en-us/library/ms143726.aspx"">http://msdn.microsoft.com/en-us/library/ms143726.aspx</a></p>
","1669","<sql><sql-server><encryption><sql-server-2008-r2><encryption-symmetric>","4","8","1","2014-08-15 20:24:04","","1","","13302","","2014-08-15 20:24:04","2014-08-15 20:00:17",""
"11533105","AES GCM manual byte[] concatenation of IV and tag to encrypted information","<p>I am using AES 256 encryption in GCM mode using a class called <code>AuthenticatedAesCng</code> from this site: <a href=""http://clrsecurity.codeplex.com/"" rel=""nofollow"">CLR security</a></p>

<p>After writing the plaintext through the crypto stream, I manually concatenate the IV, TAG, and encrypted data, then return that value. </p>

<p><code>cs</code> is the cryptostream and <code>ms</code> the memorystream</p>

<pre><code>// Write through and retrieve encrypted data.
cs.Write(message, 0, message.Length);
cs.FlushFinalBlock();
byte[] cipherText = ms.ToArray();                   

// Retrieve tag and create array to hold encrypted data.
byte[] authenticationTag = encryptor.GetTag();      
byte[] encrypted = new byte[cipherText.Length + aes.IV.Length + authenticationTag.Length];

// Set needed data in byte array.
aes.IV.CopyTo(encrypted, 0);                       
authenticationTag.CopyTo(encrypted, IV_LENGTH);
cipherText.CopyTo(encrypted, IV_LENGTH + TAG_LENGTH);

// Store encrypted value in base 64.
return Convert.ToBase64String(encrypted);
</code></pre>

<p>Is this the correct manner of using the AES cipher in GCM mode? Am I supposed to manually place all these values together or is it done automatically and I just missed it?</p>
","<p>Ciphertext is just the data but you cannot have GCM ciphertext without the tag: it would defeat the entire purpose of GCM. The tag is normally appended to the ciphtertext.</p>

<p>The AAD data is optional, and the entire purpose of it is to have it send in the clear. </p>

<p>The IV is actually a nonce, so it may be computed on both sides. If you use a random NONCE or cannot pre-compute it, then it is normal to prefix it to the ciphertext (but you will have to explicitly code this at both sides).</p>
","1666","<c#><.net><encryption><aes><encryption-symmetric>","2","1","1","2013-02-09 16:00:59","","13","0","445517","","2013-02-09 15:54:04","2012-07-17 19:04:49",""
"9989622","Encrypting/decrypting large files with PyCrypto - strategies","<p>Im currently trying to learn some stuff about encryption, it's algorithms and how it works in general. I was thinking about a way to go for encrypting large files and the only way feasible to me seems using a symmetric key algorithm. </p>

<p>So i was looking at AES, and while passing 64k or 32k blocks of bytes to a AES object that you create using a hash of the password seems ok  , i'm still curious as to the safest way to do this as i keep reading that cryptography is very easy to mess up.</p>

<p>So i get a passphrase, i get its SHA256 checksum, i use that for a key when creating my encrypt/decrypt object.</p>

<p>Other things i couldn't find an answer for : should i use an IV ? if so i have to make sure the object uses the same IV on decryption that it used on encryption...how do i do that?</p>

<p>Why did i see someone around here say that you should pad the last block of the file even if the number of bytes is  divisible by 16?</p>

<p>What type of encryption mode should best be used?</p>

<p>Could you recommend any other resources to go about for learning more about security/cryptography?</p>

<p>Thank you in advance</p>
","<ol>
<li>Don't use direct hash of the passphrase, but use (or create) a <a href=""http://en.wikipedia.org/wiki/Key_derivation_function"" rel=""nofollow noreferrer"">KDF</a></li>
<li>You definitely <a href=""https://stackoverflow.com/questions/65879/should-i-use-an-initialization-vector-iv-along-with-my-encryption"">should use IV</a>. You can store it as the first block of your file.</li>
<li>I would personally probably use AES_MODE.CTR - See <a href=""http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Counter_.28CTR.29"" rel=""nofollow noreferrer"">Wikipedia for <em>Why?</em></a> and <a href=""https://stackoverflow.com/a/3155175/180174"">Alex Martelli's answer</a> to this old question for <em>How?</em></li>
</ol>
","1660","<python><security><encryption><encryption-symmetric>","2","1","2","2013-02-01 15:12:12","9992427","0","","","","","2012-04-03 08:23:37",""
"9989622","Encrypting/decrypting large files with PyCrypto - strategies","<p>Im currently trying to learn some stuff about encryption, it's algorithms and how it works in general. I was thinking about a way to go for encrypting large files and the only way feasible to me seems using a symmetric key algorithm. </p>

<p>So i was looking at AES, and while passing 64k or 32k blocks of bytes to a AES object that you create using a hash of the password seems ok  , i'm still curious as to the safest way to do this as i keep reading that cryptography is very easy to mess up.</p>

<p>So i get a passphrase, i get its SHA256 checksum, i use that for a key when creating my encrypt/decrypt object.</p>

<p>Other things i couldn't find an answer for : should i use an IV ? if so i have to make sure the object uses the same IV on decryption that it used on encryption...how do i do that?</p>

<p>Why did i see someone around here say that you should pad the last block of the file even if the number of bytes is  divisible by 16?</p>

<p>What type of encryption mode should best be used?</p>

<p>Could you recommend any other resources to go about for learning more about security/cryptography?</p>

<p>Thank you in advance</p>
","<p>To look at some of your questions.</p>

<p>Use CTR mode or CBC mode for most purposes.  If you need built-in authentication use <a href=""http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-spec.pdf"" rel=""nofollow"">Galois Counter Mode</a> (GCM).  Otherwise use a separate HMAC for authentication, with a different key.</p>

<p>An IV is needed with all three suggested modes, though in CTR mode it is sometimes called a nonce instead.  It can be sent in clear, and is usually prepended to the cyphertext.</p>

<p>Padding should always be used.  Select PKCS7 or PKCS5, they are effectively the same.</p>

<p>For learning about Cryptography, I would suggest '<a href=""http://www.schneier.com/book-practical.html"" rel=""nofollow"">Practical Cryptography</a>' by Ferguson and Schneier. I understand that there is an updated version, called '<a href=""http://www.schneier.com/book-ce.html"" rel=""nofollow"">Cryptography Engineering</a>', which I have not read.</p>
","1660","<python><security><encryption><encryption-symmetric>","2","4","2","2013-02-01 15:12:12","9992427","0","","","","","2012-04-03 08:23:37",""
"12574620","Using Symmetric Keys with SQL Server on 2 different servers","<p>Does anyone know if a field encrypted with an Symmetric key would be the exact same output on different servers given the same cert master key and key credentials?<br>
I want to do a bulk copy from dev to test servers and want to know if the encryption would carry over.
<a href=""http://technet.microsoft.com/en-us/library/ms188357%28v=sql.105%29.aspx"" rel=""nofollow"">Create Symmetric Key on MSDN</a></p>

<p>Thanks!</p>

<p>For those that can't see I forgot a comma, to clear it up, a MASTER KEY, a CERTIFICATE and a KEY</p>
","<blockquote>
  <p>given the same cert master key and key credentials</p>
</blockquote>

<p>There is no such concept as 'cert master key'. Do not invent your own terms, stick to the existing nomenclature so everyone understands what you're saying. There is a master key, there are certificates. </p>

<p><em>If</em> you followed good practices and you deployed a correct <a href=""http://msdn.microsoft.com/en-us/library/ms189586.aspx"" rel=""nofollow"">encryption hierarchy</a> then your data should be encrypted with one or more symmetric keys and these in turn would be encrypted with a certificate that is either encrypted with the database master key or a password.</p>

<p>Copying data encrypted with a symmetric key between databases is possible. In order to succeed you need to follow exactly the steps described in <a href=""http://technet.microsoft.com/en-us/library/ms366281.aspx"" rel=""nofollow"">Create Identical Symmetric Keys on Two Servers</a> which will result in a pair of keys that have the same identity and the same key material. Data encrypted with either one of the two servers can be decrypted on the other server.</p>

<p>That being said, any organization that is serious enough about data as to encrypt it in production and at the same time is willing to create a copy of the encryption key on dev machines, not to mention copy actual sensitive data to the dev boxes, is a joke imho. <a href=""http://www.codinghorror.com/blog/2012/09/computer-crime-then-and-now.html"" rel=""nofollow"">Technology is never the weak link</a>. </p>
","1649","<sql-server><encryption-symmetric>","0","0","1","2012-09-25 14:33:37","12578017","1","","112680","","2012-09-25 14:33:37","2012-09-25 00:08:01",""
"22835162","c# encryption algorithms application","<p>I need a c# application use encryption algorithms to encrypt/decrypt strings
such as DES,SDES,RC5..
I don't need an implementation for them I just need to use them in c#
I'm new in this field and need help
thanx</p>
","<p>Try taking a look at the <code>System.Security.Cryptography</code> namespace on <a href=""http://msdn.microsoft.com/en-us/library/7yx4d854%28v=vs.110%29.aspx"" rel=""nofollow"">MSDN - cryptography tasks</a> and here <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.aspx"" rel=""nofollow"">MSDN - cryptography namespace</a>. These should get you started with encrypting and decrypting strings, not sure if it covers all the algo's you are after.</p>
","1645","<c#><encryption><encryption-symmetric>","0","0","2","2014-04-03 11:07:45","22835357","0","","3325704","","2014-04-03 11:07:45","2014-04-03 10:44:16",""
"22835162","c# encryption algorithms application","<p>I need a c# application use encryption algorithms to encrypt/decrypt strings
such as DES,SDES,RC5..
I don't need an implementation for them I just need to use them in c#
I'm new in this field and need help
thanx</p>
","<p><strong>Find the urls below for DSE,SDES,RC5:</strong></p>

<p><a href=""http://www.codeproject.com/Articles/19538/Encrypt-Decrypt-String-using-DES-in-C"" rel=""nofollow"">http://www.codeproject.com/Articles/19538/Encrypt-Decrypt-String-using-DES-in-C</a></p>

<p><a href=""http://www.codeproject.com/Articles/91628/Simplified-version-of-the-DES-Data-Encryption-Stan"" rel=""nofollow"">http://www.codeproject.com/Articles/91628/Simplified-version-of-the-DES-Data-Encryption-Stan</a> </p>

<p><a href=""http://www.codeproject.com/Articles/22518/Encryption-with-RC-Algorithm"" rel=""nofollow"">http://www.codeproject.com/Articles/22518/Encryption-with-RC-Algorithm</a></p>
","1645","<c#><encryption><encryption-symmetric>","0","0","2","2014-04-03 11:07:45","22835357","0","","3325704","","2014-04-03 11:07:45","2014-04-03 10:44:16",""
"36236147","Batch to encrypt and decrypt passwords using vbscript and powershell with symmetric encryption","<p>I want to integrate a vbscript that use a function with a symmetric encryption function into a batch file that ask user to enter its password using <a href=""https://stackoverflow.com/questions/664957/can-i-mask-an-input-text-in-a-bat-file"">powershell to mask the input text</a> :</p>

<pre><code>@echo off
set ""psCommand=powershell -Command ""$pword = read-host 'Enter Password' -AsSecureString ; ^
    $BSTR=[System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($pword); ^
        [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)""""
for /f ""usebackq delims="" %%p in (`%psCommand%`) do set password=%%p
echo %password%
pause
</code></pre>

<p><strong><em>Vbscript code :</em></strong></p>

<pre><code>Encrypted_String = Crypt(""123456789"")
wscript.echo Encrypted_String
Decrypted_String = Crypt(Encrypted_String)
wscript.echo Decrypted_String
'***************************************************************************
Function Crypt(text) 
Dim i,a
For i = 1 to len(text)
      a = i mod len(255)
      if a = 0 then a = len(255)
      Crypt = Crypt &amp; chr(asc(mid(255,a,1)) XOR asc(mid(text,i,1)))
Next
End Function
'***************************************************************************
</code></pre>

<p>So, i'm trying to combine those codes into a batch file like that :</p>

<p><strong><em>The combined Batch-File :</em></strong> </p>

<pre><code>@echo off &amp; Setlocal EnableDelayedExpansion
Title %~n0 - Encrypt_Decrypt passwords by Hackoo 2016
Mode 60,5 &amp; Color 0E
:Main
Call :Clean
Call :InputPassword ""Please choose your password"" MyPass
Call :Crypt_Decrypt !MyPass! &gt;%tmp%\MyCryptedPass.txt
(set /p CryptPass=)&lt;%tmp%\MyCryptedPass.txt
echo The encrypted password is :!CryptPass! 
pause
cls
Call :Crypt_Decrypt !CryptPass!&gt;%tmp%\MyPlaintextPass.txt
(set /P MyPlaintextPass=)&lt;%tmp%\MyPlaintextPass.txt
echo The password in plain text is : !MyPlaintextPass! 
pause
Goto :Main
::********************************************************************************
:InputPassword
Cls
echo.
set ""psCommand=powershell -Command ""$pword = read-host '%1' -AsSecureString ; ^
    $BSTR=[System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($pword); ^
      [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)""""
        for /f ""usebackq delims="" %%p in (`%psCommand%`) do set %2=%%p
Goto :eof   
::********************************************************************************
:Crypt_Decrypt
Call :Clean
(
echo StringEnCrypted = Crypt(""%~1""^)
echo wscript.echo StringEnCrypted
echo '****************************************************************************
echo Function Crypt(text^) 
echo Dim i,a
echo For i = 1 to len(text^)
echo       a = i mod len(255^)
echo       if a = 0 then a = len(255^)
echo       Crypt = Crypt ^&amp; chr(asc(mid(255,a,1^)^) XOR asc(mid(text,i,1^)^)^)
echo Next
echo End Function
echo '****************************************************************************
)&gt;%tmp%\Crypt_Decrypt.vbs
cscript /nologo %tmp%\Crypt_Decrypt.vbs
goto :eof
::********************************************************************************
:Clean
If Exist %tmp%\Crypt_Decrypt.vbs Del %tmp%\Crypt_Decrypt.vbs
goto :eof
::********************************************************************************
</code></pre>

<p>So, this last Batch script can encrypt and dercypt strings; but when i enter only numbers or something like this it didn't work ???
For example if enter :</p>

<ol>
<li><code>123456789</code> as password ==> Not Ok</li>
<li><code>hackoo123</code> as password ==> Not Ok</li>
</ol>

<p>Thank you for your help !</p>
","<p>Your encryption can produce null (ascii decimal 0), carriage return (ascii decimal 13), and newline (ascii decimal 10) bytes, all of which will wreak havoc when you write the value to a file and then try to read it back in again. It is possible to work with carriage return and newline within environment variables, but null is an absolute no go.</p>

<p><em>Well, almost end of story. Batch can use FC in binary mode to read a binary file, byte by byte, outputting each byte in hex notation. (see <a href=""http://www.dostips.com/forum/viewtopic.php?t=1786"" rel=""nofollow"">HEXDUMP.BAT</a>) But I don't think you want to go there.</em></p>

<p>If you want to deal with encrypted values within batch environment variables, then I suggest you come up with a new encryption scheme that avoids the troublesome bytes. At a minimum you must avoid null bytes.</p>

<p>Another option would be to abandon symmetric encryption, and let VBS convert the encrypted form into hex notation before you write it to disk.</p>

<p>Which leads me to another concern - Why are you writing a password to disk? That does not sound like a good idea.</p>

<p>Final note - Passing arbitrary strings on the command line is fraught with peril. You are better off passing the name of an environment variable that contains the value, and then let the called routine get the value from the variable. Certainly VBS can read an environment variable given the variable name.</p>
","1638","<powershell><batch-file><vbscript><passwords><encryption-symmetric>","0","1","1","2016-03-26 17:19:22","","0","1","-1","","2017-05-23 12:16:28","2016-03-26 14:00:55",""
"25294721","How to make an AES-256 keypair in openssl/OSX","<p>I need to generate a keypair and give the public key to someone. They say it needs to be:</p>

<ul>
<li>AES-256 CBC 128-bit block size.</li>
<li>random Initialization Victor IV of 16b fixed length. </li>
<li>PKCS7Padding</li>
</ul>

<p>I don't even know if these are the defaults or not or even if I'm asking in the right place. How can I make a key like this?</p>
","<p>Your requirements cannot be correct. AES is a symmetric algorithm, which means both parties should have the same <em>secret</em> key. Key pairs are generated for asymmetric encryption such as RSA.</p>

<p>Most of the time AES and RSA are used together for encryption. This is called hybrid encryption: a random AES key is generated and used to encrypt the plaintext. Then the AES key is encrypted with the RSA public key (using OAEP padding, for instance). Then the resulting ciphertext and the encrypted key are send to the other party, which can decrypt the AES key using the private key, and then the ciphertext with the AES key.</p>

<p>If you just need to give a secret key you <em>must</em> use secure transport. An AES key can be 256 bits secure random key, which can easily be extracted from <code>/dev/urandom</code>, e.g.:</p>

<pre><code>dd bs=1 count=32 if=/dev/urandom of=aes-256-key.bin
</code></pre>

<p>for RSA, use the <code>openssl</code> command line, for instance.</p>
","1629","<macos><openssl><aes><encryption-symmetric>","0","1","1","2014-08-13 22:59:38","","0","1","","","","2014-08-13 19:39:19",""
"29949338","Encryption between desktop app and server - C# to PHP","<p>I have an app which is designed in C#. In simple terms the app sends data and image to my web server which takes all the $_POST data and processes it. I will confess i do not understand how the security end of things work. I will employ someone with relevant experience to do that however i wouldn't even know what to ask them at this point as in what are some accepted techniques.</p>

<p>I assume its not as simple as just base64 encode/decode the data and it needs a higher level of encryption. The webserver will have HTTPS SSL(OV) certification over the next few weeks but my limited understanding is that i still need some sort of protection/encryption when transferring the data from the users PC to my web server so someone is not listening in on the data transfer or something like that.</p>

<p>In simple terms if i want to keep the data secure between users and my webserver what are some of the most common or accepted methods for C# to PHP?</p>

<p>The data goes directly from the app on the users PC to my server, i control source code for both but i myself and not the developer hence my lack of technical knowledge on the issue.</p>

<p>One C# developer i talked with suggested symmetric/asymmetric algorithm but he is not a PHP developer so he doesn't know if php can take that data and decrypt it.</p>
","<p>It seems you are concerned with the security of the data while being transferred from the client app to the server, and vice versa. As has been mentioned in the comments, an HTTPS connection will be sufficient in this regard. It automatically performs encryption/decryption for you.</p>

<p>To get an HTTPS connection working, you would purchase an SSL certificate (<a href=""https://www.namecheap.com/security/ssl-certificates.aspx"" rel=""nofollow noreferrer"">Namecheap</a> is one website where you can buy one) and install it on your web server. The certificate is automatically installed on a user's local machine the first time he/she connects to the server, and each subsequent connection performs a check for a valid certificate. So basically, you just install the certificate on the server and don't have to worry about it until you have to renew your certificate. Just make sure that your client app attempts to connect to an HTTPS address instead of an HTTP.</p>

<p>If you were to implement symmetric/asymmetric encryption, it would help with encryption and decryption before and after the data is transferred. If you encrypt the data in your client app, you will have to decrypt it on the server side when you receive it, and vice versa. This would provide you with even stronger security; however, depending on the nature of your app, an HTTPS connection may be enough.</p>

<p>One of my personal projects is a client C# app that connects to a Ruby web server, which I also wrote. I installed an SSL certificate on my Ruby web server so that data is encrypted while in transit. In my case, the data being transferred does not contain any user data or PII (Personally Identifiable Information) and therefore does not pose a security risk if an external party gains access to this information. As such, I felt using encryption before and after transit was not worthwhile nor would provide any benefit to the end user. Again, this depends on the nature of your app and your users' expectations.</p>

<p>EDIT:</p>

<p>As <a href=""https://stackoverflow.com/users/2058898/mine"">mine</a> mentioned in the comments, <a href=""http://www.startssl.com"" rel=""nofollow noreferrer"">StartSSL</a> offers free SSL certificates.</p>
","1613","<c#><php><encryption-symmetric><encryption-asymmetric>","15","11","2","2015-05-07 19:36:06","30109798","6","","","","","2015-04-29 16:21:41",""
"29949338","Encryption between desktop app and server - C# to PHP","<p>I have an app which is designed in C#. In simple terms the app sends data and image to my web server which takes all the $_POST data and processes it. I will confess i do not understand how the security end of things work. I will employ someone with relevant experience to do that however i wouldn't even know what to ask them at this point as in what are some accepted techniques.</p>

<p>I assume its not as simple as just base64 encode/decode the data and it needs a higher level of encryption. The webserver will have HTTPS SSL(OV) certification over the next few weeks but my limited understanding is that i still need some sort of protection/encryption when transferring the data from the users PC to my web server so someone is not listening in on the data transfer or something like that.</p>

<p>In simple terms if i want to keep the data secure between users and my webserver what are some of the most common or accepted methods for C# to PHP?</p>

<p>The data goes directly from the app on the users PC to my server, i control source code for both but i myself and not the developer hence my lack of technical knowledge on the issue.</p>

<p>One C# developer i talked with suggested symmetric/asymmetric algorithm but he is not a PHP developer so he doesn't know if php can take that data and decrypt it.</p>
","<p>To answer your further questions, when a server is issued and properly configured with a good cert, you shouldn't need to do anything more.</p>

<h2>Using HTTPS</h2>

<p>HTTPS works by verifying SSL certifications with a Certificate Authority (CA) during an initial handshake. Certificate Authorities, which is essentially a list of signatures that are used to verify said certs, usually come preloaded by an OS vendor.</p>

<p>Assuming your server has a CA issued certificate, all you will be required to do is change from using HTTP to HTTPS when making the connection. The library you're using should have a method of verifying the servers SSL cert, if it doesn't automatically do this for you.</p>

<p>There is no technical reason that you should have to encrypt anything that will being sent over HTTPS, so long as the certificate is strongly encrypted.</p>

<p>Also, if you would like to dig deeper into the nitty-gritty details of how HTTPS works, there's <a href=""https://security.stackexchange.com/questions/20803/how-does-ssl-tls-work"">this very good post</a> over on Information Security that sheds a little light on the inner workings of the protocol.</p>

<h2>To answer your original question</h2>

<p>For the sake of completeness.</p>

<p>PHP has the cryptography extension <a href=""http://php.net/manual/en/book.mcrypt.php"" rel=""nofollow noreferrer"">mcrypt</a> which supports various algorithms and cipher operation modes. I've put together a simple example using AES 256 / PBKDF-SHA1 key decryption (along with the C# code to perform the encryption).</p>

<p>EDIT: I'd like to point out that <a href=""http://php.net/manual/en/function.hash-pbkdf2.php"" rel=""nofollow noreferrer"">hash_pbkdf2</a> is only available in PHP 5.5 and up. Support down to 5.3 can be added with <a href=""http://php.net/manual/en/function.hash-pbkdf2.php#113488"" rel=""nofollow noreferrer"">this nifty trick</a>.</p>

<p><strong>PHP</strong></p>

<pre><code>function decode_aes($data, $key) // Decrypt custom format data string
{
    $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
    $salt_size = 16;

    $iv = substr($data, 0, $iv_size); // Init vector
    $salt = substr($data, $iv_size, $salt_size); // The salt
    $extact = substr($data, $iv_size + $salt_size); // This is the encrypted data

    $key = hash_pbkdf2(""sha1"", $key, $salt, 1000, 32, true); // Sets to use PBKDF-SHA1

    return mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $extact, MCRYPT_MODE_CBC, $iv); // Perform the decryption with the extracted sections
}

// As an example, I've included this.
$encryped = ""zgCp2sSDs32Y8SOn8MYFCEjOJDeM4E3Y8Wx52A+iTFRk/1TJwMzkqmrB06bFu8dK"";
echo decode_aes(base64_decode($encryped), ""password"");
</code></pre>

<p><strong>C#</strong></p>

<pre><code>using System;
using System.Text;
using System.Security.Cryptography;
using System.IO;

namespace AESExample
{
    class Program
    {
        static void Main(string[] args)
        {
            byte[] toEncrypt = Encoding.UTF8.GetBytes(""Encrypted Text"");
            byte[] key = Encoding.UTF8.GetBytes(""password"");
            String encrypted = Convert.ToBase64String(EncryptAES(toEncrypt, key));
        }

        public static byte[] EncryptAES(byte[] data, byte[] key)
        {
            using(RijndaelManaged algo = new RijndaelManaged())
            {
                algo.GenerateIV();
                algo.Mode = CipherMode.CBC;
                algo.Padding = PaddingMode.Zeros;

                byte[] saltBuffer = new byte[16];
                RNGCryptoServiceProvider saltGenerator = new RNGCryptoServiceProvider();
                saltGenerator.GetBytes(saltBuffer);

                Rfc2898DeriveBytes PBKDF2 = new Rfc2898DeriveBytes(key, saltBuffer, 1000);
                key = PBKDF2.GetBytes(32);

                ICryptoTransform cipher = algo.CreateEncryptor(key, algo.IV);

                using(MemoryStream ms = new MemoryStream())
                {
                    ms.Write(algo.IV, 0, algo.IV.Length);
                    ms.Write(saltBuffer, 0, saltBuffer.Length);
                    using(CryptoStream cs = new CryptoStream(ms, cipher, CryptoStreamMode.Write))
                    {
                        using(StreamWriter sw = new StreamWriter(cs))
                        {
                            sw.Write(Encoding.UTF8.GetString(data).ToCharArray());
                        }
                    }
                    return ms.ToArray();
                }
            }
        }
    }
}
</code></pre>
","1613","<c#><php><encryption-symmetric><encryption-asymmetric>","15","4","2","2015-05-07 19:36:06","30109798","6","","","","","2015-04-29 16:21:41",""
"10076266","Implementing simple symmetric encryption using java sockets","<p>I am writing a peer to peer application and I want to implement simple symmetric encryption.  </p>

<p>I'm looking for a good example of how to do this, I don't mind which library it uses so long as it's free.</p>

<p>Preferably all the encryption would happen at the socket layer so I wouldn't need to change my code at all.</p>

<p>Can someone provide such an example?</p>
","<p>Doesn't Java have cryptography build in... Java Cryptography Architecture (JCA) &amp; Java Cryptography Extension (JCE)?</p>

<p><a href=""http://docs.oracle.com/javase/1.4.2/docs/guide/security/CryptoSpec.html#ProviderArch"" rel=""nofollow noreferrer"">http://docs.oracle.com/javase/1.4.2/docs/guide/security/CryptoSpec.html#ProviderArch</a></p>

<blockquote>
  <p>The Java Cryptography Extension (JCE) extends the JCA API to include
  APIs for encryption, key exchange, and Message Authentication Code
  (MAC). Together, the JCE and the cryptography aspects of the SDK
  provide a complete, platform-independent cryptography API.</p>
</blockquote>

<p>Here's an example of how to use AES in Java:</p>

<p><a href=""http://java.sun.com/developer/technicalArticles/Security/AES/AES_v1.html"" rel=""nofollow noreferrer"">http://java.sun.com/developer/technicalArticles/Security/AES/AES_v1.html</a></p>

<blockquote>
  <p>The JCE framework is a very powerful and flexible framework for using
  different cryptographic algorithms. It's based on a provider
  architecture that enables the same framework to be used for newer
  cryptographic algorithms. From a developer perspective, this means a
  higher level of abstraction, and a common set of APIs for newer and
  different cryptographic algorithms -- without the need to worry about
  the inner workings of the algorithm.</p>
  
  <p>Some of the other Java security APIs -- such as JSSE -- are
  implemented on top of JCE, and supplement it to make the different
  cryptographic algorithms (ciphers, Message Authentication Codes
  (MACs), and Key Exchange algorithms) available to in a more
  developer-friendly manner.</p>
</blockquote>

<p>Also, as <a href=""https://stackoverflow.com/a/10076761/196921"">Kristian Antonsen mentioned</a>, check out <a href=""http://docs.oracle.com/javase/1.4.2/docs/api/javax/net/ssl/SSLSocket.html"" rel=""nofollow noreferrer"">SSLSocket</a>.</p>

<hr>

<p>Anyway, here's another Java cryptography library:</p>

<p><a href=""http://bouncycastle.org/java.html"" rel=""nofollow noreferrer"">http://bouncycastle.org/java.html</a> </p>
","1601","<java><sockets><encryption><encryption-symmetric>","1","1","2","2015-08-02 11:57:19","10076761","0","2","1816580","","2015-08-02 11:57:19","2012-04-09 16:25:03",""
"10076266","Implementing simple symmetric encryption using java sockets","<p>I am writing a peer to peer application and I want to implement simple symmetric encryption.  </p>

<p>I'm looking for a good example of how to do this, I don't mind which library it uses so long as it's free.</p>

<p>Preferably all the encryption would happen at the socket layer so I wouldn't need to change my code at all.</p>

<p>Can someone provide such an example?</p>
","<p>Java already comes with <a href=""http://docs.oracle.com/javase/1.4.2/docs/api/javax/net/ssl/SSLSocket.html"" rel=""nofollow"">SSL Sockets</a>. There is no need to manually implement the encryption. The socket handles everything on its own.</p>
","1601","<java><sockets><encryption><encryption-symmetric>","1","3","2","2015-08-02 11:57:19","10076761","0","2","1816580","","2015-08-02 11:57:19","2012-04-09 16:25:03",""
"1925134","Can Derby / JavaDB _really_ encrypt with Triple DES rather than (plain) DES?","<p>It seems to be confusing Triple-DES (>128bit) with plain DES (64bit).
I'm trying to encrypt a Derby database with Triple DES (or DESede) using Java 1.5</p>

<p>I found this <a href=""http://forums.sun.com/thread.jspa?threadID=5129170&amp;start=15"" rel=""nofollow noreferrer"">discussion forum message about a problem with JDK 1.5</a> by chance and so checked to make sure that it really was using DESede and not plain DES. When I created the database with a Triple DES (168bit) URL</p>

<pre><code>jdbc:derby:MySecureDB;dataEncryption=true;encryptionAlgorithm=DESede/CBC/NoPadding;bootPassword=$ecureC@deCanBr@kE0074242
</code></pre>

<p>I was still able to open it and access it with the (plain) DES (64bit) URL</p>

<pre><code>jdbc:derby:MySecureDB;dataEncryption=true;encryptionAlgorithm=DES/CBC/NoPadding;bootPassword=$ecureC@deCanBr@kE0074242
</code></pre>

<p>This is not the behavior I expect!!! I should not be able to open it with the wrong encryption algorithm. How can I make sure it really encrypts it with the right (>128bit) algorithm?</p>

<p>Derby seems to use the right function for Java 1.5 mentioned in <a href=""https://svn.apache.org/repos/asf/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jce/JCECipherProvider.java"" rel=""nofollow noreferrer"">JCECipherProvider.java</a>. My reading of the code indicates that Derby does not handle Triple DES as different from plain DES... Can I really trust that it is using strong encryption?</p>
","<p>According to <a href=""http://developers.sun.com/docs/javadb/10.5.3.0/devguide/devguide-single.html#cdevcsecure97760"" rel=""nofollow noreferrer"">Working with encryption</a> from the Java DB Developer's Guide, the first URL looks fine to <strong>encrypt a database on creation</strong> (because it specifies <code>dataEncryption=true</code>) and should have generated a 168 bits encryption key. </p>

<p>Now, still according to the documentation, I don't think that you should use <code>dataEncryption=true</code> when <strong>Booting an encrypted database</strong>. My understanding is that you just need to use <code>bootPassword</code> and <code>encryptionAlgorithm</code>. </p>

<p>I admit I didn't test this and, actually, I'm really wondering what happens exactly:</p>

<ul>
<li>if you don't specify <code>dataEncryption</code> and use the wrong <code>encryptionAlgorithm</code> in the 2nd URL.</li>
<li>When you specify <code>dataEncryption=true</code> and use another <code>encryptionAlgorithm</code> (does it recreate an encrypted database?).</li>
</ul>

<p>The documentation isn't clear about that.</p>
","1593","<java><derby><encryption-symmetric>","5","1","3","2009-12-23 09:29:37","1949849","2","2","151261","","2009-12-21 17:01:59","2009-12-17 22:47:57",""
"1925134","Can Derby / JavaDB _really_ encrypt with Triple DES rather than (plain) DES?","<p>It seems to be confusing Triple-DES (>128bit) with plain DES (64bit).
I'm trying to encrypt a Derby database with Triple DES (or DESede) using Java 1.5</p>

<p>I found this <a href=""http://forums.sun.com/thread.jspa?threadID=5129170&amp;start=15"" rel=""nofollow noreferrer"">discussion forum message about a problem with JDK 1.5</a> by chance and so checked to make sure that it really was using DESede and not plain DES. When I created the database with a Triple DES (168bit) URL</p>

<pre><code>jdbc:derby:MySecureDB;dataEncryption=true;encryptionAlgorithm=DESede/CBC/NoPadding;bootPassword=$ecureC@deCanBr@kE0074242
</code></pre>

<p>I was still able to open it and access it with the (plain) DES (64bit) URL</p>

<pre><code>jdbc:derby:MySecureDB;dataEncryption=true;encryptionAlgorithm=DES/CBC/NoPadding;bootPassword=$ecureC@deCanBr@kE0074242
</code></pre>

<p>This is not the behavior I expect!!! I should not be able to open it with the wrong encryption algorithm. How can I make sure it really encrypts it with the right (>128bit) algorithm?</p>

<p>Derby seems to use the right function for Java 1.5 mentioned in <a href=""https://svn.apache.org/repos/asf/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jce/JCECipherProvider.java"" rel=""nofollow noreferrer"">JCECipherProvider.java</a>. My reading of the code indicates that Derby does not handle Triple DES as different from plain DES... Can I really trust that it is using strong encryption?</p>
","<p>I think the encryptionAlgorithm parameter only matters when you are first doing the encryption (that is, when you are first creating an encrypted database, or when you are first encrypting an unencrypted database).</p>

<p>Once you have encrypted the database, from then on, you just need to specify the bootPassword. Derby already knows what encryption algorithm was used.</p>
","1593","<java><derby><encryption-symmetric>","5","1","3","2009-12-23 09:29:37","1949849","2","2","151261","","2009-12-21 17:01:59","2009-12-17 22:47:57",""
"1925134","Can Derby / JavaDB _really_ encrypt with Triple DES rather than (plain) DES?","<p>It seems to be confusing Triple-DES (>128bit) with plain DES (64bit).
I'm trying to encrypt a Derby database with Triple DES (or DESede) using Java 1.5</p>

<p>I found this <a href=""http://forums.sun.com/thread.jspa?threadID=5129170&amp;start=15"" rel=""nofollow noreferrer"">discussion forum message about a problem with JDK 1.5</a> by chance and so checked to make sure that it really was using DESede and not plain DES. When I created the database with a Triple DES (168bit) URL</p>

<pre><code>jdbc:derby:MySecureDB;dataEncryption=true;encryptionAlgorithm=DESede/CBC/NoPadding;bootPassword=$ecureC@deCanBr@kE0074242
</code></pre>

<p>I was still able to open it and access it with the (plain) DES (64bit) URL</p>

<pre><code>jdbc:derby:MySecureDB;dataEncryption=true;encryptionAlgorithm=DES/CBC/NoPadding;bootPassword=$ecureC@deCanBr@kE0074242
</code></pre>

<p>This is not the behavior I expect!!! I should not be able to open it with the wrong encryption algorithm. How can I make sure it really encrypts it with the right (>128bit) algorithm?</p>

<p>Derby seems to use the right function for Java 1.5 mentioned in <a href=""https://svn.apache.org/repos/asf/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jce/JCECipherProvider.java"" rel=""nofollow noreferrer"">JCECipherProvider.java</a>. My reading of the code indicates that Derby does not handle Triple DES as different from plain DES... Can I really trust that it is using strong encryption?</p>
","<p>I believe that the documentation is wrong, and that you do not actually need to specify the encryption algorithm to use when using a non-default algorithm, since the algorithm that should be used is specified in $DERBY_HOME/database/service.properties</p>

<p>In my case, when I created a database with your parameters my service.properties had the following contents (amongst other non-relevant entries):</p>

<pre><code>log_encrypt_algorithm_version=1
encryptionAlgorithm=DESede/CBC/NoPadding
dataEncryption=true
derby.encryptionBlockSize=8
encryptionKeyLength=168-24
encryptedBootPassword=472b7cc5600605333392dd10a46067d2e2935fd4c350d533-43435
data_encrypt_algorithm_version=1
</code></pre>

<p>You can verify that this is used, by changing the algorithm used. If you change the specified algorithm in that file to DES, then you will not be able to restart the database.</p>

<p>For example:</p>

<pre><code>$ ../bin/ij
ij version 10.4
ij&gt; connect 'jdbc:derby:testdb;create=true;dataEncryption=true;encryptionAlgorithm=Blowfish/ECB/NoPadding;bootPassword=$ecureC@deCanBr@kE0074242';
ij&gt; quit;
$ sed -i .o 's/Blowfish/DES/' testdb/service.properties 
$ ../bin/ij
ij version 10.4
ij&gt; connect 'jdbc:derby:testdb;bootPassword=$ecureC@deCanBr@kE0074242';
ERROR XJ040: Failed to start database 'testdb', see the next exception for details.
ERROR XBM06: Startup failed. An encrypted database cannot be accessed without the correct boot password.  
ij&gt; quit;
$ sed -i .o 's/DES/Blowfish/' testdb/service.properties 
$ ../bin/ij
ij version 10.4
ij&gt; connect 'jdbc:derby:testdb;bootPassword=$ecureC@deCanBr@kE0074242';
ij&gt; quit;
$ 
</code></pre>
","1593","<java><derby><encryption-symmetric>","5","5","3","2009-12-23 09:29:37","1949849","2","2","151261","","2009-12-21 17:01:59","2009-12-17 22:47:57",""
"32884203","PHP equivalent of .net AES encryption","<p>I am working on a data exchange integration with my client and the data they send me is encrypted using their C# <code>encrypt</code> method (below). </p>

<p>My app is running PHP 5.3 and I need an equivalent code to decrypt the data they send. I have the PHP code but it'd not decrypt the client data correctly for me. </p>

<p>Clearly I am making some mistake in my encryption/decryption methods, IV key or something. Can anyone spot the mistake? </p>

<p>Thanks.</p>

<p><strong>C# Code (From my client):</strong></p>

<pre><code>using System;
using System.Security.Cryptography;
using System.Text;
using System.IO;

public class Program
{
    public static void Main()
    {
        var text = ""this is a plain string"";
        var enc = Program.Encrypt(text);
        Console.WriteLine(enc);
        Console.WriteLine(Program.Decrypt(enc));
    }

    public static string Encrypt(string clearText)
    {
        var EncryptionKey = ""1234567890123456"";
        byte[] clearBytes = Encoding.Unicode.GetBytes(clearText);
        using (Aes encryptor = Aes.Create())
        {
            byte[] IV = new byte[15];
            var rand = new Random();
            rand.NextBytes(IV);
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, IV);
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(clearBytes, 0, clearBytes.Length);
                    cs.Close();
                }

                clearText = Convert.ToBase64String(IV) + Convert.ToBase64String(ms.ToArray());
            }
        }

        return clearText;
    }

    public static string Decrypt(string cipherText)
    {
        var EncryptionKey = ""1234567890123456"";
        byte[] IV = Convert.FromBase64String(cipherText.Substring(0, 20));
        cipherText = cipherText.Substring(20).Replace("" "", ""+"");
        byte[] cipherBytes = Convert.FromBase64String(cipherText);
        using (Aes encryptor = Aes.Create())
        {
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, IV);
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(cipherBytes, 0, cipherBytes.Length);
                    cs.Close();
                }

                cipherText = Encoding.Unicode.GetString(ms.ToArray());
            }
        }

        return cipherText;
    }
}
</code></pre>

<p><strong>PHP Code I have:</strong></p>

<pre><code>public function encrypt($plainText)
{
    $secretKey = '1234567890123456';

    return rtrim(
        base64_encode(
            mcrypt_encrypt(
                MCRYPT_RIJNDAEL_256,
                $secretKey, $plainText,
                MCRYPT_MODE_ECB,
                mcrypt_create_iv(
                    mcrypt_get_iv_size(
                        MCRYPT_RIJNDAEL_256,
                        MCRYPT_MODE_ECB
                    ),
                    MCRYPT_RAND)
            )
        ), ""\0""
    );
}

public function decrypt($encodedData)
{
    $secretKey = '1234567890123456';

    return rtrim(
        mcrypt_decrypt(
            MCRYPT_RIJNDAEL_256,
            $secretKey,
            base64_decode($encodedData),
            MCRYPT_MODE_ECB,
            mcrypt_create_iv(
                mcrypt_get_iv_size(
                    MCRYPT_RIJNDAEL_256,
                    MCRYPT_MODE_ECB
                ),
                MCRYPT_RAND
            )
        ), ""\0""
    );
}
</code></pre>
","<p>It seems like the PHP Script is Using the wrong Mode:<br>
<a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.symmetricalgorithm.mode%28v=vs.110%29.aspx"" rel=""nofollow"">https://msdn.microsoft.com/en-us/library/system.security.cryptography.symmetricalgorithm.mode%28v=vs.110%29.aspx</a><br>
The C# Functions do not set any Mode so the default is CBC.<br>
The PHP part uses ECB instead, which is not only wrong, but insecure.</p>
","1565","<c#><php><encryption><aes><encryption-symmetric>","-3","0","2","2015-12-20 06:47:43","","0","","2224584","","2015-12-20 06:47:43","2015-10-01 09:36:53",""
"32884203","PHP equivalent of .net AES encryption","<p>I am working on a data exchange integration with my client and the data they send me is encrypted using their C# <code>encrypt</code> method (below). </p>

<p>My app is running PHP 5.3 and I need an equivalent code to decrypt the data they send. I have the PHP code but it'd not decrypt the client data correctly for me. </p>

<p>Clearly I am making some mistake in my encryption/decryption methods, IV key or something. Can anyone spot the mistake? </p>

<p>Thanks.</p>

<p><strong>C# Code (From my client):</strong></p>

<pre><code>using System;
using System.Security.Cryptography;
using System.Text;
using System.IO;

public class Program
{
    public static void Main()
    {
        var text = ""this is a plain string"";
        var enc = Program.Encrypt(text);
        Console.WriteLine(enc);
        Console.WriteLine(Program.Decrypt(enc));
    }

    public static string Encrypt(string clearText)
    {
        var EncryptionKey = ""1234567890123456"";
        byte[] clearBytes = Encoding.Unicode.GetBytes(clearText);
        using (Aes encryptor = Aes.Create())
        {
            byte[] IV = new byte[15];
            var rand = new Random();
            rand.NextBytes(IV);
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, IV);
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(clearBytes, 0, clearBytes.Length);
                    cs.Close();
                }

                clearText = Convert.ToBase64String(IV) + Convert.ToBase64String(ms.ToArray());
            }
        }

        return clearText;
    }

    public static string Decrypt(string cipherText)
    {
        var EncryptionKey = ""1234567890123456"";
        byte[] IV = Convert.FromBase64String(cipherText.Substring(0, 20));
        cipherText = cipherText.Substring(20).Replace("" "", ""+"");
        byte[] cipherBytes = Convert.FromBase64String(cipherText);
        using (Aes encryptor = Aes.Create())
        {
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, IV);
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(cipherBytes, 0, cipherBytes.Length);
                    cs.Close();
                }

                cipherText = Encoding.Unicode.GetString(ms.ToArray());
            }
        }

        return cipherText;
    }
}
</code></pre>

<p><strong>PHP Code I have:</strong></p>

<pre><code>public function encrypt($plainText)
{
    $secretKey = '1234567890123456';

    return rtrim(
        base64_encode(
            mcrypt_encrypt(
                MCRYPT_RIJNDAEL_256,
                $secretKey, $plainText,
                MCRYPT_MODE_ECB,
                mcrypt_create_iv(
                    mcrypt_get_iv_size(
                        MCRYPT_RIJNDAEL_256,
                        MCRYPT_MODE_ECB
                    ),
                    MCRYPT_RAND)
            )
        ), ""\0""
    );
}

public function decrypt($encodedData)
{
    $secretKey = '1234567890123456';

    return rtrim(
        mcrypt_decrypt(
            MCRYPT_RIJNDAEL_256,
            $secretKey,
            base64_decode($encodedData),
            MCRYPT_MODE_ECB,
            mcrypt_create_iv(
                mcrypt_get_iv_size(
                    MCRYPT_RIJNDAEL_256,
                    MCRYPT_MODE_ECB
                ),
                MCRYPT_RAND
            )
        ), ""\0""
    );
}
</code></pre>
","<blockquote>
  <p>Can anyone spot the mistake?</p>
</blockquote>

<p>Yes, and the big one isn't really your fault: <a href=""https://paragonie.com/blog/2015/05/if-you-re-typing-word-mcrypt-into-your-code-you-re-doing-it-wrong"">mcrypt's confusing API strikes again</a>.</p>

<p>That said, there are actually multiple mistakes here.</p>

<pre><code>return rtrim( // unnecessary
    base64_encode(
        mcrypt_encrypt(
            MCRYPT_RIJNDAEL_256, // Not AES
            $secretKey, $plainText,
            MCRYPT_MODE_ECB, // BAD, use MCRYPT_MODE_CBC or 'ctr' instead
            mcrypt_create_iv(
                mcrypt_get_iv_size(      // unless you're going make this
                    MCRYPT_RIJNDAEL_256, // configurable, you should just
                    MCRYPT_MODE_ECB      // hard-code this as an integer
                ),
                MCRYPT_RAND) // BAD, use MCRYPT_DEV_URANDOM
        )
    ), ""\0""
); 
</code></pre>

<p>If you're going to generate an IV, it should be communicated so your recipient can decrypt the same first block successfully. The C# code does this, the PHP does not.</p>

<p>From a cryptography engineering perspective, you should consider, both in C# land and in PHP, deploying an Encrypt then Authenticate protocol. See <a href=""https://paragonie.com/blog/2015/05/using-encryption-and-authentication-correctly"">this blog post on encryption and authentication</a>. Also, <a href=""http://tonyarcieri.com/all-the-crypto-code-youve-ever-written-is-probably-broken"">all the crypto code you've ever written is probably broken</a>.</p>
","1565","<c#><php><encryption><aes><encryption-symmetric>","-3","10","2","2015-12-20 06:47:43","","0","","2224584","","2015-12-20 06:47:43","2015-10-01 09:36:53",""
"20175461","TripleDES Encryption in Windows Store app (Windows 8.1)","<p>I want to encrypt some text using TripleDES Encryption with ECB cipher mode in Windows Store app (Windows 8.1) but I am having issues in creating a key for symmetric algorithm.</p>

<p>I would like to tell you what I am currently doing in <strong>.NET 4.5</strong> </p>

<pre><code>public static string EncryptData(string Message, string passphrase)
        {
            byte[] tpinBytes = System.Text.Encoding.ASCII.GetBytes(Message);
            string tpinHex = ByteArrayHelper.ByteArrayToHexString(tpinBytes);

            byte[] Results;

            byte[] TDESKey = ByteArrayHelper.HexStringToByteArray(passphrase);

            TripleDESCryptoServiceProvider TDESAlgorithm = new TripleDESCryptoServiceProvider();
            TDESAlgorithm.Key = TDESKey;
            TDESAlgorithm.Mode = CipherMode.ECB;
            TDESAlgorithm.Padding = PaddingMode.Zeros;

            byte[] DataToEncrypt = ByteArrayHelper.HexStringToByteArray(tpinHex);
            try
            {
                ICryptoTransform Encryptor = TDESAlgorithm.CreateEncryptor();
                Results = Encryptor.TransformFinalBlock(DataToEncrypt, 0, DataToEncrypt.Length);
            }
            finally
            {
                TDESAlgorithm.Clear();
            }
            return ByteArrayHelper.ByteArrayToHexString(Results);
        }
</code></pre>

<p>Now, I have written this code snippet for my <strong>Windows Store (Windows 8.1)</strong> app;</p>

<pre><code>  private static string TripleDESEncryption(string strMsg, string passphrase)
        {
            String strAlgName = SymmetricAlgorithmNames.TripleDesEcb;
            var bytes = System.Text.Encoding.UTF8.GetBytes(strMsg);
            string hex = BitConverter.ToString(bytes).Replace(""-"", """");

            // Initialize the initialization vector
            IBuffer iv = null;

            // Create a buffer that contains the encoded message to be encrypted. 
            IBuffer DataToEncrypt = CryptographicBuffer.DecodeFromHexString(hex);

            // Open a symmetric algorithm provider for the specified algorithm. 
            SymmetricKeyAlgorithmProvider objAlg = SymmetricKeyAlgorithmProvider.OpenAlgorithm(strAlgName);

            // Create a symmetric key.
            IBuffer TDESKey = CryptographicBuffer.DecodeFromHexString(passphrase);
            CryptographicKey key = objAlg.CreateSymmetricKey(TDESKey); // Line of problem.

            // Encrypt the data and return.
            IBuffer buffEncrypt = CryptographicEngine.Encrypt(key, DataToEncrypt, iv);

            return CryptographicBuffer.EncodeToHexString(buffEncrypt);
        }
</code></pre>

<p>When I match the values of TDESKey and EncryptData, they are identical. However, the issue occurs when I try to create symmetric key (after TDESKey assignment). It gives me an error of <strong>Value does not fall within the expected range</strong> and according to <a href=""http://social.msdn.microsoft.com/Forums/en-US/725237a2-b1ba-43b7-b57f-157169a03a7e/problem-with-using-windowssecuritycryptographycoresymmetrickeyalgorithmprovider-for-3des-on-a"" rel=""nofollow"">MSDN forums</a>, the block size may not be supported (which I am unable to understand) and it does not even have those properties which are listed in that forum (for e.g. SupportedKeyLengths).</p>

<p>Can anyone help me out with the sample or point out the mistake I have been making? </p>
","<p>WinRT does not support 16-byte keys. Try a 24-byte key. </p>
","1545","<c#><.net><windows-runtime><windows-store-apps><encryption-symmetric>","0","0","1","2014-02-18 05:58:17","","3","1","","","","2013-11-24 14:07:58",""
"52212430","Am I doing AES 256 encryption and decryption Node.js correctly?","<p>I need to encrypt a chat message that will be stored a database. The data is a string of characters of various lengths. I want to use the native node.js crypto library and use a symmetric encryption protocol such as AES 256. I have concerns are the following:</p>

<ol>
<li>Is CBC the correct AES mode for this use case for this type of field stored in a <code>TEXT</code> field in MySQL?</li>
<li>Does the key look like it is generated correctly?</li>
<li>Is the IV correct? Is prepending the IV to the encrypted text a proper way to do it or should it be a separate field?</li>
</ol>

<pre class=""lang-js prettyprint-override""><code>// AES RFC - https://tools.ietf.org/html/rfc3602
const crypto = require('crypto');

const algorithm = 'aes-256-cbc';
// generate key with crypto.randomBytes(256/8).toString('hex')
const key = '6d858102402dbbeb0f9bb711e3d13a1229684792db4940db0d0e71c08ca602e1';
const IV_LENGTH = 16;

const encrypt = (text) =&gt; {
  const iv = crypto.randomBytes(IV_LENGTH);
  const cipher = crypto.createCipheriv(algorithm, Buffer.from(key, 'hex'), iv);
  let encrypted = cipher.update(text);
  encrypted = Buffer.concat([encrypted, cipher.final()]);
  return `${iv.toString('hex')}:${encrypted.toString('hex')}`;
};

const decrypt = (text) =&gt; {
  const [iv, encryptedText] = text.split(':').map(part =&gt; Buffer.from(part, 'hex'));
  const decipher = crypto.createDecipheriv(algorithm, Buffer.from(key, 'hex'), iv);
  let decrypted = decipher.update(encryptedText);
  decrypted = Buffer.concat([decrypted, decipher.final()]);
  return decrypted.toString();
};

exports.encrypt = encrypt;
exports.decrypt = decrypt;
</code></pre>
","<blockquote>
  <p>Is CBC the correct AES mode for this use case for this type of field stored in a TEXT field in MySQL?</p>
</blockquote>

<p>Well, this depends a bit on your text. But probably yes.</p>

<blockquote>
  <p>Does the key look like it is generated correctly?</p>
</blockquote>

<p>yeah, looks good to me. It should look random and it looks random. Not sure what your concern is here.</p>

<blockquote>
  <p>Is the IV correct? Is prepending the IV to the encrypted text a proper way to do it or should it be a separate field?</p>
</blockquote>

<p>The IV looks good to me. I don't see many reasons why you shouldn't do it this way except one: its not very storage efficient. It would be far more efficient to store the data not as hex string but as binary data! And then you can't just use a colon to seperate the data. So either you know that its the first <code>n</code> bytes or you do a seperate field. Both has upsides and downsides, but both is ok. It's primary a question about style.</p>
","1525","<javascript><node.js><encryption><encryption-symmetric>","1","2","1","2018-09-06 23:45:19","52213014","8","1","1736429","","2018-09-06 23:11:09","2018-09-06 21:33:19",""
"13371741","Input String was null Base64 decoding","<p>I have encrypted strings in sharedpreferences using Base64 but my decoding errors out. I am new to encryption and am unable to determine the logcat error. </p>

<p>Logcat:</p>

<pre><code>  11-12 03:57:06.593: W/System.err(20229): java.lang.NullPointerException: Input string was null.
  11-12 03:57:06.603: W/System.err(20229):  at com.SharedPreferences.Login.Base64.decode(Base64.java:1243)
  11-12 03:57:06.603: W/System.err(20229):  at com.SharedPreferences.Login.Base64.decode(Base64.java:1224)
  11-12 03:57:06.603: W/System.err(20229):  at com.SharedPreferences.Login.AccessApp.decrypt(AccessApp.java:137)
  11-12 03:57:06.603: W/System.err(20229):  at com.SharedPreferences.Login.AccessApp.onClick(AccessApp.java:55)
  11-12 03:57:06.603: W/System.err(20229):  at android.view.View.performClick(View.java:3511)
  11-12 03:57:06.613: W/System.err(20229):  at android.view.View$PerformClick.run(View.java:14105)
  11-12 03:57:06.635: W/System.err(20229):  at android.os.Handler.handleCallback(Handler.java:605)
  11-12 03:57:06.643: W/System.err(20229):  at android.os.Handler.dispatchMessage(Handler.java:92)
  11-12 03:57:06.669: W/System.err(20229):  at android.os.Looper.loop(Looper.java:137)
  11-12 03:57:06.673: W/System.err(20229):  at android.app.ActivityThread.main(ActivityThread.java:4424)
  11-12 03:57:06.673: W/System.err(20229):  at java.lang.reflect.Method.invokeNative(Native Method)
  11-12 03:57:06.673: W/System.err(20229):  at java.lang.reflect.Method.invoke(Method.java:511)
  11-12 03:57:06.695: W/System.err(20229):  at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:784)
  11-12 03:57:06.695: W/System.err(20229):  at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:551)
  11-12 03:57:06.695: W/System.err(20229):  at dalvik.system.NativeStart.main(Native Method)
</code></pre>

<p>Class retrieving save string and decrypting:</p>

<pre><code>public void onClick(View arg0) {

    sp=this.getSharedPreferences(""AccessApp"", MODE_WORLD_READABLE); 

    byte[] key = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5 };

    try {
         String decryptedUser = decrypt(user, key);  
         user = sp.getString(""USERNAME_KEY"", decryptedUser);
    }
 catch (Exception e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
}   
try {
         String decryptedPass = decrypt(pass, key);  
         pass = sp.getString(""PASSWORD_KEY"", decryptedPass);

} catch (Exception e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
}

   if(lBttn.equals(arg0)){

      if((uname.getText().toString().equals(user))&amp;&amp; 
        (pword.getText().toString().equals(pass)))

            {
          Toast.makeText(this, ""You are Logged In"", 20000).show();

               Intent intent;
               intent=new Intent(this,details.class);
               startActivity(intent);
              flag=1;
            }

        else 
           {
            Toast.makeText(this, ""Wrong Username or Password"",20000).show();
            flag=0;   
           }       
        } 
        else if(cBttn==arg0){
            AlertDialog.Builder builder=new AlertDialog.Builder(this);
          builder.setTitle(""Exit"");
         builder.setMessage(""Do you want to exit"");
    builder.setCancelable(false);
    builder.setPositiveButton(""Yes"",new DialogInterface.OnClickListener() {

   public void onClick(DialogInterface dialog, int which) {
   // TODO Auto-generated method stub
Intent intent = new Intent(Intent.ACTION_MAIN);
intent.addCategory(Intent.CATEGORY_HOME);
intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
startActivity(intent);

  finish();
   }
  });
    builder.setNegativeButton(""No"", new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface arg0, int arg1) {
               arg0.cancel();
            }
        });
    AlertDialog alert=builder.create();
    alert.show();

        }

    }
@Override
public boolean onKeyDown(int keyCode, KeyEvent event)  {
 if (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; event.getRepeatCount() == 0) {

     Intent intent = new Intent(Intent.ACTION_MAIN);
        intent.addCategory(Intent.CATEGORY_HOME);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(intent);
     finish();
 }
 return super.onKeyDown(keyCode, event);
 }

public static String decrypt(String encryptedText, byte[ ] key) throws Exception {
    SecretKeySpec skeySpec = new SecretKeySpec(key, ""AES"");
    Cipher cipher = Cipher.getInstance(""AES"");
    cipher.init(Cipher.DECRYPT_MODE, skeySpec);
    byte[] toDecrypt = Base64.decode(encryptedText);
    byte[] encrypted = cipher.doFinal(toDecrypt);
    return new String(encrypted);
 }
 }
</code></pre>

<p>Declarations:</p>

<pre><code>public class AccessApp extends Activity implements OnClickListener {
private SharedPreferences sp;
String user,pass;
Button lBttn,cBttn;
EditText uname,pword;
Intent i;
int flag=0;

/** Called when the activity is first created. */
@Override
public void onCreate(Bundle savedInstanceState)
{ 
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
    lBttn=(Button)findViewById(R.id.login_button);
    cBttn=(Button)findViewById(R.id.cancel_button);
    uname=(EditText)findViewById(R.id.username);
    pword=(EditText)findViewById(R.id.password);

    lBttn.setOnClickListener(this);
    cBttn.setOnClickListener(this);
}
</code></pre>
","<p>Sorry. I am changing my answer. What I told before was completely wrong.<bR>The reason you are getting the error </p>

<p><code>java.lang.NullPointerException: Input string was null.</code></p>

<p>is because you  have declared</p>

<pre><code>String user;
</code></pre>

<p>You have not initialized it and you are calling</p>

<pre><code>String decryptedUser = decrypt(user, key);
</code></pre>

<p>now in the function <code>decrypt</code> user is null. </p>
","1511","<android><nullpointerexception><base64><sharedpreferences><encryption-symmetric>","1","0","1","2012-11-14 14:41:35","13371804","0","1","1557801","","2012-11-14 14:33:06","2012-11-14 01:26:01",""
"51812991","Simple Javascript encryption using Libsodium.js in this sandbox demo","<p>I've spent an embarrasing number of hours trying to get Libsodium.js to work. </p>

<p><strong><a href=""https://codesandbox.io/s/y7pq80l70v?autoresize=1&amp;expanddevtools=1&amp;hidenavigation=1"" rel=""nofollow noreferrer"">See my fiddle demo</a></strong> (and code pasted below too).</p>

<p>I keep getting <code>Error: wrong secret key for the given ciphertext</code>.</p>

<p>What I would <em>prefer</em> is to replicate this <a href=""https://paragonie.com/blog/2017/06/libsodium-quick-reference-quick-comparison-similar-functions-and-which-one-use"" rel=""nofollow noreferrer"">PHP example of <code>function simpleEncrypt($message, $key)</code></a> into Libsodium.js.</p>

<p>But as a starter, I'd be happy even getting the basic <a href=""https://github.com/jedisct1/libsodium.js"" rel=""nofollow noreferrer"">sample from the Libsodium.js repo</a> to work.</p>

<p>Any hints?</p>

<hr>

<p><strong>Here is the code (also shown in the working fiddle):</strong></p>

<pre><code>const _sodium = require(""libsodium-wrappers"");
const concatTypedArray = require(""concat-typed-array"");
(async () =&gt; {
    await _sodium.ready;
    const sodium = _sodium;
    const utf8 = ""utf-8"";
    const td = new TextDecoder(utf8);
    const te = new TextEncoder(utf8);
    const nonceBytes = sodium.crypto_secretbox_NONCEBYTES;
    const macBytes = sodium.crypto_secretbox_MACBYTES;

    let key = sodium.from_hex(""724b092810ec86d7e35c9d067702b31ef90bc43a7b598626749914d6a3e033ed"");

    function encrypt_and_prepend_nonce(message, key) {
        let nonce = sodium.randombytes_buf(nonceBytes);
        var encrypted = sodium.crypto_secretbox_easy(message, nonce, key);
        var combined2 = concatTypedArray(Uint8Array, nonce, encrypted);
        return combined2;
    }

    function decrypt_after_extracting_nonce(nonce_and_ciphertext, key) {
        if (nonce_and_ciphertext.length &lt; nonceBytes + macBytes) {
            throw ""Short message"";
        }
        let nonce = nonce_and_ciphertext.slice(0, nonceBytes);
        let ciphertext = nonce_and_ciphertext.slice(nonceBytes);
        return sodium.crypto_secretbox_open_easy(ciphertext, nonce, key);
    }

    function encrypt(message, key) {
        var x = encrypt_and_prepend_nonce(message, key);
        return td.decode(x);
    }

    function decrypt(nonce_and_ciphertext_str, key) {
        var nonce_and_ciphertext = te.encode(nonce_and_ciphertext_str);
        return decrypt_after_extracting_nonce(nonce_and_ciphertext, key);
    }

    var inputStr = ""shhh this is a secret"";
    var garbledStr = encrypt(inputStr, key);
    try {
        var decryptedStr = decrypt(garbledStr, key);
        console.log(""Recovered input string:"", decryptedStr);
        console.log(""Check whether the following text matches the original:"", decryptedStr === inputStr);
    } catch (e) {
        console.error(e);
    }
})();
</code></pre>
","<p>This is what I do in <a href=""https://emberclear.io"" rel=""nofollow noreferrer"">https://emberclear.io</a> :</p>

<p>tests: <a href=""https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/utils/nacl/unit-test.ts#L19"" rel=""nofollow noreferrer"">https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/utils/nacl/unit-test.ts#L19</a></p>

<p>implementation: <a href=""https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/utils/nacl/utils.ts#L48"" rel=""nofollow noreferrer"">https://gitlab.com/NullVoxPopuli/emberclear/blob/master/packages/frontend/src/utils/nacl/utils.ts#L48</a></p>

<p>Snippet of implementation (in typescript):</p>

<pre><code>import libsodiumWrapper, { ISodium } from 'libsodium-wrappers';

import { concat } from 'emberclear/src/utils/arrays/utils';

export async function libsodium(): Promise&lt;ISodium&gt; {
  const sodium = libsodiumWrapper.sodium;
  await sodium.ready;

  return sodium;
}


export async function encryptFor(
  message: Uint8Array,
  recipientPublicKey: Uint8Array,
  senderPrivateKey: Uint8Array): Promise&lt;Uint8Array&gt; {

  const sodium = await libsodium();
  const nonce = await generateNonce();

  const ciphertext = sodium.crypto_box_easy(
    message, nonce,
    recipientPublicKey, senderPrivateKey
  );

  return concat(nonce, ciphertext);
}

export async function decryptFrom(
  ciphertextWithNonce: Uint8Array,
  senderPublicKey: Uint8Array,
  recipientPrivateKey: Uint8Array): Promise&lt;Uint8Array&gt; {

  const sodium = await libsodium();

  const [nonce, ciphertext] = await splitNonceFromMessage(ciphertextWithNonce);
  const decrypted = sodium.crypto_box_open_easy(
    ciphertext, nonce,
    senderPublicKey, recipientPrivateKey
  );

  return decrypted;
}

export async function splitNonceFromMessage(messageWithNonce: Uint8Array): Promise&lt;[Uint8Array, Uint8Array]&gt; {
  const sodium = await libsodium();
  const bytes = sodium.crypto_box_NONCEBYTES;

  const nonce = messageWithNonce.slice(0, bytes);
  const message = messageWithNonce.slice(bytes, messageWithNonce.length);

  return [nonce, message];
}

export async function generateNonce(): Promise&lt;Uint8Array&gt; {
  const sodium = await libsodium();

  return await randomBytes(sodium.crypto_box_NONCEBYTES);
}

export async function randomBytes(length: number): Promise&lt;Uint8Array&gt; {
  const sodium = await libsodium();

  return sodium.randombytes_buf(length);
}
</code></pre>

<p>Snippet of tests:</p>

<pre><code>import * as nacl from './utils';
import { module, test } from 'qunit';

module('Unit | Utility | nacl', function() {
  test('libsodium uses wasm', async function(assert) {
    const sodium = await nacl.libsodium();
    const isUsingWasm = sodium.libsodium.usingWasm;

    assert.ok(isUsingWasm);
  });

  test('generateAsymmetricKeys | works', async function(assert) {
    const boxKeys = await nacl.generateAsymmetricKeys();

    assert.ok(boxKeys.publicKey);
    assert.ok(boxKeys.privateKey);
  });

  test('encryptFor/decryptFrom | works with Uint8Array', async function(assert) {
    const receiver = await nacl.generateAsymmetricKeys();
    const sender = await nacl.generateAsymmetricKeys();

    const msgAsUint8 = Uint8Array.from([104, 101, 108, 108, 111]); // hello
    const ciphertext = await nacl.encryptFor(msgAsUint8, receiver.publicKey, sender.privateKey);
    const decrypted = await nacl.decryptFrom(ciphertext, sender.publicKey, receiver.privateKey);

    assert.deepEqual(msgAsUint8, decrypted);
  });
</code></pre>
","1507","<javascript><encryption><encryption-symmetric><libsodium>","2","1","3","2018-12-23 22:00:03","51814273","0","","","","","2018-08-12 21:25:03",""
"51812991","Simple Javascript encryption using Libsodium.js in this sandbox demo","<p>I've spent an embarrasing number of hours trying to get Libsodium.js to work. </p>

<p><strong><a href=""https://codesandbox.io/s/y7pq80l70v?autoresize=1&amp;expanddevtools=1&amp;hidenavigation=1"" rel=""nofollow noreferrer"">See my fiddle demo</a></strong> (and code pasted below too).</p>

<p>I keep getting <code>Error: wrong secret key for the given ciphertext</code>.</p>

<p>What I would <em>prefer</em> is to replicate this <a href=""https://paragonie.com/blog/2017/06/libsodium-quick-reference-quick-comparison-similar-functions-and-which-one-use"" rel=""nofollow noreferrer"">PHP example of <code>function simpleEncrypt($message, $key)</code></a> into Libsodium.js.</p>

<p>But as a starter, I'd be happy even getting the basic <a href=""https://github.com/jedisct1/libsodium.js"" rel=""nofollow noreferrer"">sample from the Libsodium.js repo</a> to work.</p>

<p>Any hints?</p>

<hr>

<p><strong>Here is the code (also shown in the working fiddle):</strong></p>

<pre><code>const _sodium = require(""libsodium-wrappers"");
const concatTypedArray = require(""concat-typed-array"");
(async () =&gt; {
    await _sodium.ready;
    const sodium = _sodium;
    const utf8 = ""utf-8"";
    const td = new TextDecoder(utf8);
    const te = new TextEncoder(utf8);
    const nonceBytes = sodium.crypto_secretbox_NONCEBYTES;
    const macBytes = sodium.crypto_secretbox_MACBYTES;

    let key = sodium.from_hex(""724b092810ec86d7e35c9d067702b31ef90bc43a7b598626749914d6a3e033ed"");

    function encrypt_and_prepend_nonce(message, key) {
        let nonce = sodium.randombytes_buf(nonceBytes);
        var encrypted = sodium.crypto_secretbox_easy(message, nonce, key);
        var combined2 = concatTypedArray(Uint8Array, nonce, encrypted);
        return combined2;
    }

    function decrypt_after_extracting_nonce(nonce_and_ciphertext, key) {
        if (nonce_and_ciphertext.length &lt; nonceBytes + macBytes) {
            throw ""Short message"";
        }
        let nonce = nonce_and_ciphertext.slice(0, nonceBytes);
        let ciphertext = nonce_and_ciphertext.slice(nonceBytes);
        return sodium.crypto_secretbox_open_easy(ciphertext, nonce, key);
    }

    function encrypt(message, key) {
        var x = encrypt_and_prepend_nonce(message, key);
        return td.decode(x);
    }

    function decrypt(nonce_and_ciphertext_str, key) {
        var nonce_and_ciphertext = te.encode(nonce_and_ciphertext_str);
        return decrypt_after_extracting_nonce(nonce_and_ciphertext, key);
    }

    var inputStr = ""shhh this is a secret"";
    var garbledStr = encrypt(inputStr, key);
    try {
        var decryptedStr = decrypt(garbledStr, key);
        console.log(""Recovered input string:"", decryptedStr);
        console.log(""Check whether the following text matches the original:"", decryptedStr === inputStr);
    } catch (e) {
        console.error(e);
    }
})();
</code></pre>
","<h2>Wow, I finally got it working!</h2>

<p>The parts that really helped me were:</p>

<ul>
<li><a href=""https://stackoverflow.com/a/43271130/470749"">https://stackoverflow.com/a/43271130/470749</a> (<code>function u_atob(ascii)</code> for Uint8Array)</li>
<li>using <code>const concatTypedArray = require(""concat-typed-array"");</code></li>
<li>using <code>require(""babel-core/register"");</code> and <code>require(""babel-polyfill"");</code>, which I still don't understand (<a href=""https://stackoverflow.com/a/33527883/470749"">https://stackoverflow.com/a/33527883/470749</a>)</li>
</ul>

<p>Here is the working <a href=""https://codesandbox.io/s/z4jr7wlol?autoresize=1&amp;expanddevtools=1&amp;hidenavigation=1"" rel=""nofollow noreferrer"">fiddle sandbox</a>.</p>

<hr>

<p>And in case that ever disappears, here are the important parts:</p>

<pre><code>const nonceBytes = sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES;
let key = sodium.from_hex(""724b092810ec86d7e35c9d067702b31ef90bc43a7b598626749914d6a3e033ed"");
var nonceTest;

/**
 * @param {string} message
 * @param {string} key
 * @returns {Uint8Array}
 */
function encrypt_and_prepend_nonce(message, key) {
    let nonce = sodium.randombytes_buf(nonceBytes);
    nonceTest = nonce.toString();
    var encrypted = sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(message, null, nonce, nonce, key);
    var nonce_and_ciphertext = concatTypedArray(Uint8Array, nonce, encrypted); //https://github.com/jedisct1/libsodium.js/issues/130#issuecomment-361399594     
    return nonce_and_ciphertext;
}

/**
 * @param {Uint8Array} nonce_and_ciphertext
 * @param {string} key
 * @returns {string}
 */
function decrypt_after_extracting_nonce(nonce_and_ciphertext, key) {
    let nonce = nonce_and_ciphertext.slice(0, nonceBytes); //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice      
    let ciphertext = nonce_and_ciphertext.slice(nonceBytes);
    var result = sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(nonce, ciphertext, null, nonce, key, ""text"");
    return result;
}

/**
 * @param {string} message
 * @param {string} key
 * @returns {string}
 */
function encrypt(message, key) {
    var uint8ArrayMsg = encrypt_and_prepend_nonce(message, key);
    return u_btoa(uint8ArrayMsg); //returns ascii string of garbled text
}

/**
 * @param {string} nonce_and_ciphertext_str
 * @param {string} key
 * @returns {string}
 */
function decrypt(nonce_and_ciphertext_str, key) {
    var nonce_and_ciphertext = u_atob(nonce_and_ciphertext_str); //converts ascii string of garbled text into binary
    return decrypt_after_extracting_nonce(nonce_and_ciphertext, key);
}

function u_atob(ascii) {        //https://stackoverflow.com/a/43271130/
    return Uint8Array.from(atob(ascii), c =&gt; c.charCodeAt(0));
}

function u_btoa(buffer) {       //https://stackoverflow.com/a/43271130/
    var binary = [];
    var bytes = new Uint8Array(buffer);
    for (var i = 0, il = bytes.byteLength; i &lt; il; i++) {
        binary.push(String.fromCharCode(bytes[i]));
    }
    return btoa(binary.join(""""));
}
</code></pre>
","1507","<javascript><encryption><encryption-symmetric><libsodium>","2","1","3","2018-12-23 22:00:03","51814273","0","","","","","2018-08-12 21:25:03",""
"51812991","Simple Javascript encryption using Libsodium.js in this sandbox demo","<p>I've spent an embarrasing number of hours trying to get Libsodium.js to work. </p>

<p><strong><a href=""https://codesandbox.io/s/y7pq80l70v?autoresize=1&amp;expanddevtools=1&amp;hidenavigation=1"" rel=""nofollow noreferrer"">See my fiddle demo</a></strong> (and code pasted below too).</p>

<p>I keep getting <code>Error: wrong secret key for the given ciphertext</code>.</p>

<p>What I would <em>prefer</em> is to replicate this <a href=""https://paragonie.com/blog/2017/06/libsodium-quick-reference-quick-comparison-similar-functions-and-which-one-use"" rel=""nofollow noreferrer"">PHP example of <code>function simpleEncrypt($message, $key)</code></a> into Libsodium.js.</p>

<p>But as a starter, I'd be happy even getting the basic <a href=""https://github.com/jedisct1/libsodium.js"" rel=""nofollow noreferrer"">sample from the Libsodium.js repo</a> to work.</p>

<p>Any hints?</p>

<hr>

<p><strong>Here is the code (also shown in the working fiddle):</strong></p>

<pre><code>const _sodium = require(""libsodium-wrappers"");
const concatTypedArray = require(""concat-typed-array"");
(async () =&gt; {
    await _sodium.ready;
    const sodium = _sodium;
    const utf8 = ""utf-8"";
    const td = new TextDecoder(utf8);
    const te = new TextEncoder(utf8);
    const nonceBytes = sodium.crypto_secretbox_NONCEBYTES;
    const macBytes = sodium.crypto_secretbox_MACBYTES;

    let key = sodium.from_hex(""724b092810ec86d7e35c9d067702b31ef90bc43a7b598626749914d6a3e033ed"");

    function encrypt_and_prepend_nonce(message, key) {
        let nonce = sodium.randombytes_buf(nonceBytes);
        var encrypted = sodium.crypto_secretbox_easy(message, nonce, key);
        var combined2 = concatTypedArray(Uint8Array, nonce, encrypted);
        return combined2;
    }

    function decrypt_after_extracting_nonce(nonce_and_ciphertext, key) {
        if (nonce_and_ciphertext.length &lt; nonceBytes + macBytes) {
            throw ""Short message"";
        }
        let nonce = nonce_and_ciphertext.slice(0, nonceBytes);
        let ciphertext = nonce_and_ciphertext.slice(nonceBytes);
        return sodium.crypto_secretbox_open_easy(ciphertext, nonce, key);
    }

    function encrypt(message, key) {
        var x = encrypt_and_prepend_nonce(message, key);
        return td.decode(x);
    }

    function decrypt(nonce_and_ciphertext_str, key) {
        var nonce_and_ciphertext = te.encode(nonce_and_ciphertext_str);
        return decrypt_after_extracting_nonce(nonce_and_ciphertext, key);
    }

    var inputStr = ""shhh this is a secret"";
    var garbledStr = encrypt(inputStr, key);
    try {
        var decryptedStr = decrypt(garbledStr, key);
        console.log(""Recovered input string:"", decryptedStr);
        console.log(""Check whether the following text matches the original:"", decryptedStr === inputStr);
    } catch (e) {
        console.error(e);
    }
})();
</code></pre>
","<p>I think you're making this harder than it needs to be.  For your typescript encryption for example, all you need to do is this:</p>

<pre class=""lang-js prettyprint-override""><code>private async encrypt(obj: any): Promise&lt;string&gt; {
    await Sodium.ready;

    const json = JSON.stringify(obj);
    const key = Sodium.from_hex(this.hexKey);

    const nonce = Sodium.randombytes_buf(Sodium.crypto_aead_chacha20poly1305_ietf_NPUBBYTES);
    const encrypted = Sodium.crypto_aead_chacha20poly1305_ietf_encrypt(json, '', null, nonce, key);

    // Merge the two together
    const nonceAndCipherText = new Uint8Array(Sodium.crypto_aead_chacha20poly1305_ietf_NPUBBYTES + encrypted.byteLength);
    nonceAndCipherText.set(nonce);
    nonceAndCipherText.set(encrypted, Sodium.crypto_aead_chacha20poly1305_ietf_NPUBBYTES);

    return btoa(String.fromCharCode(...nonceAndCipherText));
}
</code></pre>

<p>You don't need all the extra libraries you're using.  And on your PHP side, to decrypt you'd just do this:</p>

<pre class=""lang-php prettyprint-override""><code>function decode($encrypted, $key)
{
    $decoded = base64_decode($encrypted); // Should be using sodium_base642bin?
    if ($decoded === false) {
        throw new Exception('Scream bloody murder, the decoding failed');
    }

    $nonce = mb_substr($decoded, 0, SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES, '8bit');
    $ciphertext = mb_substr($decoded, SODIUM_CRYPTO_AEAD_CHACHA20POLY1305_IETF_NPUBBYTES, null, '8bit');

    $plain = sodium_crypto_aead_chacha20poly1305_ietf_decrypt($ciphertext, '', $nonce, sodium_hex2bin($key));

    sodium_memzero($ciphertext);
    sodium_memzero($key);

    if ($plain === false) {
        throw new Exception('the message was tampered with in transit');
    }

    return $plain;
}
</code></pre>

<p>You don't need to set the nonce multiple times.  That second parameter to the encryption is the ""additional data"" parameter, and it can just be an empty string if it's an empty string on the decryption side as well.</p>
","1507","<javascript><encryption><encryption-symmetric><libsodium>","2","0","3","2018-12-23 22:00:03","51814273","0","","","","","2018-08-12 21:25:03",""
"23859641","Implementing Hybrid Encryption?","<p>I already have an asymmetric algorithm implemented in an MVC C# Application, however I would like to modify the encryption method so that I make use of both symmetric and asymmetric encryption (AKA Hybrid encryption). Any idea how I can do this?</p>

<p>Asymmetric encrypt:</p>

<pre><code>public string AsymmEncrypt(int accId, string input, string publickey)
    {
        Account a = new UserRepository().GetAccountById(accId);
        RSACryptoServiceProvider myAlg = new RSACryptoServiceProvider();
        CspParameters cspParams = new CspParameters();
        publickey = new UserRepository().PublicKeyByAccountId(accId);
        cspParams.KeyContainerName = publickey;
        myAlg = new RSACryptoServiceProvider(cspParams);

        byte[] cipher = myAlg.Encrypt(UTF8Encoding.UTF8.GetBytes(input), true);
        return Convert.ToBase64String(cipher);
    }
</code></pre>

<p>Asymmetric decrypt:</p>

<pre><code>        public string AsymmDecrypt(int accId, string input, string privatekey)
    {
        Account a = new UserRepository().GetAccountById(accId);
        RSACryptoServiceProvider myAlg = new RSACryptoServiceProvider();
        CspParameters cspParams = new CspParameters();
        privatekey = new UserRepository().PrivateKeyByAccountId(accId);

        byte[] cipher = myAlg.Decrypt(Convert.FromBase64String(input), true);
        return UTF8Encoding.UTF8.GetString(cipher);
    }
</code></pre>
","<p>You should probably not try to reinvent the wheel here.  The System.Security.Cryptography namespace in .net alrady provides a large array of cryptography functionality that is quite well vetted.  Don't try to use your own Asymmetric functions to accomplish this.</p>

<p>If you want to do private key distribution through public key encryption, you should use something like <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsapkcs1keyexchangeformatter.aspx"" rel=""nofollow"">RSAPKCS1KeyExchangeFormatter</a> or maybe even <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsaoaepkeyexchangeformatter.aspx"" rel=""nofollow"">RSAOAEPKeyExchangeFormatter</a> if you have the flexibility to support PKCS#1v2</p>
","1506","<c#><asp.net><encryption-symmetric><encryption-asymmetric><hybrid>","1","0","2","2014-05-25 21:47:39","","4","","","","","2014-05-25 20:25:39",""
"23859641","Implementing Hybrid Encryption?","<p>I already have an asymmetric algorithm implemented in an MVC C# Application, however I would like to modify the encryption method so that I make use of both symmetric and asymmetric encryption (AKA Hybrid encryption). Any idea how I can do this?</p>

<p>Asymmetric encrypt:</p>

<pre><code>public string AsymmEncrypt(int accId, string input, string publickey)
    {
        Account a = new UserRepository().GetAccountById(accId);
        RSACryptoServiceProvider myAlg = new RSACryptoServiceProvider();
        CspParameters cspParams = new CspParameters();
        publickey = new UserRepository().PublicKeyByAccountId(accId);
        cspParams.KeyContainerName = publickey;
        myAlg = new RSACryptoServiceProvider(cspParams);

        byte[] cipher = myAlg.Encrypt(UTF8Encoding.UTF8.GetBytes(input), true);
        return Convert.ToBase64String(cipher);
    }
</code></pre>

<p>Asymmetric decrypt:</p>

<pre><code>        public string AsymmDecrypt(int accId, string input, string privatekey)
    {
        Account a = new UserRepository().GetAccountById(accId);
        RSACryptoServiceProvider myAlg = new RSACryptoServiceProvider();
        CspParameters cspParams = new CspParameters();
        privatekey = new UserRepository().PrivateKeyByAccountId(accId);

        byte[] cipher = myAlg.Decrypt(Convert.FromBase64String(input), true);
        return UTF8Encoding.UTF8.GetString(cipher);
    }
</code></pre>
","<p>I would suggest reading how SSL or OpenPGP are implemented.</p>

<p>I'm not sure what part you are struggling with.</p>

<p>In short, the asymmetric algorithm is used for symmetric key exchange.</p>

<p>The symmetric algorithm is used for the bulk data (stream/block) crypto. You won't get it done with simply modifying your 2 functions, you will need to implement a handshake and key exchange.</p>

<p>Since you have an MVC.NET app, you can host it within a web server and gain HTTPS/SSL transport. You can also do the same with WCF. Any reason why aren't using what is provided by the underlying transport? You can even configure your application (web.config) to require client certificates.</p>

<p>PS: I agree about not re-inventing the wheel, even Microsoft's article that Erik linked to provides a warning about it.</p>

<blockquote>
  <p>Caution We recommend that you do not attempt to create your own key exchange method from the basic functionality provided, because many details of the operation must be performed carefully in order for the key exchange to be successful.</p>
</blockquote>
","1506","<c#><asp.net><encryption-symmetric><encryption-asymmetric><hybrid>","1","0","2","2014-05-25 21:47:39","","4","","","","","2014-05-25 20:25:39",""
"3236835","AES key finding from encrypted and plaintext data","<p>If I have a plaintext message M along with its encrypted equivalent E, and I know that it has been encrypted with a 256-bit AES key, is there a way to work out the key? Are there ways to do it, if M is long enough?</p>
","<p>In theory yes.
In reality no.
You'll need either to have software running on the same machine that is performing the encryption and attack the system through cache analysis:</p>

<p>""In April 2005, D.J. Bernstein announced a cache-timing attack that he used to break a custom server that used OpenSSL's AES encryption. The custom server was designed to give out as much timing information as possible (the server reports back the number of machine cycles taken by the encryption operation), and the attack required over 200 million chosen plaintexts.""</p>

<p>Or I would imagine that you could use a supercomputer to force crack it. I wouldn't know how long that would take though and so it would only be an issue if the encryption key was never changed. The algorithm is available in the public domain, but you'll still be tied to the implementation as they would have a bearing on the result.</p>
","1499","<key><aes><encryption-symmetric>","0","2","2","2010-07-13 12:50:30","3237176","0","","","","","2010-07-13 11:51:56",""
"3236835","AES key finding from encrypted and plaintext data","<p>If I have a plaintext message M along with its encrypted equivalent E, and I know that it has been encrypted with a 256-bit AES key, is there a way to work out the key? Are there ways to do it, if M is long enough?</p>
","<p>No, there is no (efficient) way to do this.
AES is designed to be even resistent against selected plaintext attacks. 
Thus brute-force is the only way to go.</p>
","1499","<key><aes><encryption-symmetric>","0","1","2","2010-07-13 12:50:30","3237176","0","","","","","2010-07-13 11:51:56",""
"27495370","AES CTR symmetric encryption and decryption","<p>I am not an expert in openssl. I have put together the following code to encrypt and decrypt a message using AES-CTR. The output is not what I expect to see. </p>

<pre><code>#include ""stdafx.h""
#include &lt;openssl/aes.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;windows.h&gt;
#include &lt;tchar.h&gt;
#include &lt;psapi.h&gt;
#include &lt;openssl/rand.h&gt; //for RAND_bytes function

struct ctr_state {
    unsigned char ivec[16];  /* ivec[0..7] is the IV, ivec[8..15] is the big-endian counter */
    unsigned int num;
    unsigned char ecount[16];
};

int init_ctr(struct ctr_state *state, const unsigned char iv[8])
{
    /* aes_ctr128_encrypt requires 'num' and 'ecount' set to zero on the
    * first call. */
    state-&gt;num = 0;
    memset(state-&gt;ecount, 0, 16);
    /* Initialise counter in 'ivec' to 0 */
    memset(state-&gt;ivec + 8, 0, 8);
    /* Copy IV into 'ivec' */
    memcpy(state-&gt;ivec, iv, 8);
    return(0);
}

int main(int argc, char **argv)
{
    unsigned char key[] = ""thiskeyisverybad""; // It is 128bits though..
    unsigned char iv[8];
    struct ctr_state state;
    if (!RAND_bytes(iv, 8))
         printf(""\nError in RAND_Bytes...\n"");
    init_ctr(&amp;state, iv);
    AES_KEY aes_key;
    AES_set_encrypt_key(key, 128, &amp;aes_key);
    char msg[] = ""hey"";
    unsigned char cipher[AES_BLOCK_SIZE];
    char plain[AES_BLOCK_SIZE];
    AES_ctr128_encrypt((unsigned char *) msg, cipher, AES_BLOCK_SIZE, &amp;aes_key, state.ivec, state.ecount, &amp;state.num);
    AES_ctr128_encrypt(cipher, (unsigned char *) plain, AES_BLOCK_SIZE, &amp;aes_key, state.ivec, state.ecount, &amp;state.num);
    printf(""\nPLAIN:%s\n"", plain);
    return 0;
}
</code></pre>

<p>The result I am getting is something like this: ""PLAIN:¢u∩U└■My&amp;nu9♫_╠╠╠╠╠╠╠╠""Åä▬♂☻e0T   ç§▓→♀v╠╠╠╠╠╠╠╠hey""</p>

<p>Any idea what causes this? All I want to do is to use AES using CTR to encrypt and decrypt messages. I want to get the same encrypted length as the plaintext (or +1 byte). I have done this with DES but DES is not secure. I will then use the AES-CTR to encrypt and decrypt my network traffic (stream).</p>
","<p>You need to reset before decrypt:</p>

<pre><code>…
init_ctr(&amp;state, iv);
AES_ctr128_encrypt(
        cipher,
        (unsigned char *) plain,
        AES_BLOCK_SIZE,
        &amp;aes_key,
        state.ivec,
        state.ecount,
        &amp;state.num
        );
printf(""\nPLAIN:%s\n"", plain);
</code></pre>
","1482","<c><openssl><aes><encryption-symmetric>","1","3","1","2014-12-21 03:45:02","27496462","0","","608639","","2014-12-21 03:45:02","2014-12-16 00:00:00",""
"20624426","What's a simple symmetric way to encrypt a string and pass through a url in php?","<p>As the question states, I need a way to encrypt a string (i.e. 'x=27&amp;y=3&amp;z=123456' into 'hUIgBG5664y65H2UIB') so that it can be passed via an html image source, like so:</p>

<pre><code>&lt;img src=""returnpicture.php?stuff=hUIgBG5664y65H2UIB""/&gt;
</code></pre>

<p>returnpicture.php will decrypt that back into 'x=27&amp;y=3&amp;z=123456' and parse it into three variables which will be used to pick an image and return it.</p>

<p>Problem is, everywhere I look, all I can find is stuff about hashing and encrypting super-sensitive information like credit cards and passwords.  This info is not sensitive at all, I just don't want users to be able to tamper with it.  Therefore, it shouldn't be excessively long.  Also, the encryption (I'm guessing) must be alphanumeric, so as not to mess up the url with &amp; or =.  I'm doing this in php. </p>

<p>It's for a sort of game.  The user shouldn't be able to mess with the variables, 'cause they'll see things they shouldn't yet.</p>
","<p><strong>For general understanding</strong></p>

<p>When you include certain key-value pairs in your request url, PHP will load these values (accordingly) into the <code>$_GET</code> superglobal.</p>

<pre><code>?x=12&amp;y=13
</code></pre>

<p>Will result in</p>

<pre><code>$_GET['x'] // contains 12
$_GET['y'] // contains 13
</code></pre>

<p>What you seem to be trying to do is to supply multiple key-value pairs within a key-value pair:</p>

<pre><code>?stuff={more-key-value-pairs}
</code></pre>

<p>Simply be aware that PHP will not interpret key-value pairs in <code>$_GET['stuff']</code>.</p>

<p><strong>Encoding/Decoding</strong></p>

<p>Note: This is one possible solution out of many. Find the one that suits you most and apply it.</p>

<p>You can use <a href=""http://php.net/manual/en/function.base64-encode.php"" rel=""nofollow noreferrer"">base64_encode()</a> to encode it, and <a href=""http://php.net/manual/en/function.base64-decode.php"" rel=""nofollow noreferrer"">base64_decode()</a> to decode it.</p>

<p>Example:</p>

<pre><code>echo '&lt;img src=""returnpicture.php?stuff=' . rawurlencode( base64_encode('x=27&amp;y=3&amp;z=123456') ) . '"" /&gt;';  
</code></pre>

<p>Usage of <code>rawurlencode()</code> assures proper url safe encoding of the base64-encoded string.  </p>

<p>In your <em>returnpicture.php</em> you can use:</p>

<pre><code>$decodedString = base64_decode( $_GET['stuff'] );
</code></pre>

<p>to get back your original string.</p>

<p>However, if you actually plan on sending a get-request like string (with variable assignments, such as <code>?x=12&amp;y=13</code> and so on, then you need to apply further techniques to get that string parsed. </p>

<p><a href=""https://stackoverflow.com/questions/1138999/"">See this question for details on how it can be done</a></p>
","1464","<php><url><encryption><obfuscation><encryption-symmetric>","0","1","3","2015-08-02 12:22:08","20624450","6","","1816580","","2015-08-02 12:22:08","2013-12-17 01:40:28",""
"20624426","What's a simple symmetric way to encrypt a string and pass through a url in php?","<p>As the question states, I need a way to encrypt a string (i.e. 'x=27&amp;y=3&amp;z=123456' into 'hUIgBG5664y65H2UIB') so that it can be passed via an html image source, like so:</p>

<pre><code>&lt;img src=""returnpicture.php?stuff=hUIgBG5664y65H2UIB""/&gt;
</code></pre>

<p>returnpicture.php will decrypt that back into 'x=27&amp;y=3&amp;z=123456' and parse it into three variables which will be used to pick an image and return it.</p>

<p>Problem is, everywhere I look, all I can find is stuff about hashing and encrypting super-sensitive information like credit cards and passwords.  This info is not sensitive at all, I just don't want users to be able to tamper with it.  Therefore, it shouldn't be excessively long.  Also, the encryption (I'm guessing) must be alphanumeric, so as not to mess up the url with &amp; or =.  I'm doing this in php. </p>

<p>It's for a sort of game.  The user shouldn't be able to mess with the variables, 'cause they'll see things they shouldn't yet.</p>
","<p>I suggest that you can share information between your pages with <code>$_SESSION</code> vars, but, it only works if two pages are in same context server.</p>

<p><strong>Approach 1.</strong> <code>base64</code> encode</p>

<pre><code>&lt;img src=""returnpicture.php?stuff=&lt;?php echo base64_encode('x=27&amp;y=3&amp;z=123456'); ?&gt;""/&gt;
</code></pre>

<p>And get this as:</p>

<pre><code>$data = base64_decode($_GET['stuff']);
</code></pre>

<p><strong>Approach 2.</strong> <code>$_SESSION</code> variables</p>

<p>You should combine <strong><code>$_GET</code></strong> with <strong><code>$_POST</code></strong> without expose sensible information like:</p>

<pre><code>$postfix = uniqid(); // Generate an UNIQUE id
$_SESSION['sensible_var1_'.$postfix] = ""value"";
$_SESSION['sensible_var2_'.$postfix] = ""value"";
$_SESSION['sensible_var3_'.$postfix] = ""value"";
</code></pre>

<p>And you can pass this information only with:</p>

<pre><code>&lt;img src=""returnpicture.php?stuff=&lt;?php echo $postfix; ?&gt;""/&gt;
</code></pre>

<p>And in your <strong>returnpicture.php</strong> file, you can retrive information as:</p>

<pre><code>$sensible_var1 = $_SESSION['sensible_var1_'.$_GET['stuff']];
$sensible_var2 = $_SESSION['sensible_var2_'.$_GET['stuff']];
$sensible_var3 = $_SESSION['sensible_var3_'.$_GET['stuff']];
</code></pre>
","1464","<php><url><encryption><obfuscation><encryption-symmetric>","0","0","3","2015-08-02 12:22:08","20624450","6","","1816580","","2015-08-02 12:22:08","2013-12-17 01:40:28",""
"20624426","What's a simple symmetric way to encrypt a string and pass through a url in php?","<p>As the question states, I need a way to encrypt a string (i.e. 'x=27&amp;y=3&amp;z=123456' into 'hUIgBG5664y65H2UIB') so that it can be passed via an html image source, like so:</p>

<pre><code>&lt;img src=""returnpicture.php?stuff=hUIgBG5664y65H2UIB""/&gt;
</code></pre>

<p>returnpicture.php will decrypt that back into 'x=27&amp;y=3&amp;z=123456' and parse it into three variables which will be used to pick an image and return it.</p>

<p>Problem is, everywhere I look, all I can find is stuff about hashing and encrypting super-sensitive information like credit cards and passwords.  This info is not sensitive at all, I just don't want users to be able to tamper with it.  Therefore, it shouldn't be excessively long.  Also, the encryption (I'm guessing) must be alphanumeric, so as not to mess up the url with &amp; or =.  I'm doing this in php. </p>

<p>It's for a sort of game.  The user shouldn't be able to mess with the variables, 'cause they'll see things they shouldn't yet.</p>
","<p>You could use a simple cipher, like a rolling XOR hash. This is very easy to implement, but enough of a nuisance to crack that people probably won't bother if the only benefit is something trivial, like the ability to get your server to serve images in non-standard sizes.</p>

<pre><code>function scramble(key, text) {
    return encodeURIComponent(text.replace(/[^\0]/g, function(x, i) {
        var code = x.charCodeAt(0) ^ key.charCodeAt(i % key.length);
        return String.fromCharCode(code);
    }));
}

function descramble(key, text) {
    return decodeURIComponent(text).replace(/[^\0]/g, function(x, i) {
        var code = x.charCodeAt(0) ^ key.charCodeAt(i % key.length);
        return String.fromCharCode(code);
    });
}
</code></pre>

<p>If your <code>key</code> is ""secretcode"" and your <code>text</code> is ""x=27&amp;y=3&amp;z=123456"", then <code>scramble(key, text)</code> returns ""%0BXQEC%0D%5E%5CB%1FNTQAQAU"".</p>

<p>""Descrambling"" that result with the same <code>key</code> gives the original <code>text</code>, ""x=27&amp;y=3&amp;z=123456"".</p>

<p>Note that you'd probably want to do this on the PHP side of things, the JavaScript code is just here as an example.</p>

<p><a href=""http://jsfiddle.net/m92rc/"" rel=""nofollow"">http://jsfiddle.net/m92rc/</a></p>
","1464","<php><url><encryption><obfuscation><encryption-symmetric>","0","1","3","2015-08-02 12:22:08","20624450","6","","1816580","","2015-08-02 12:22:08","2013-12-17 01:40:28",""
"25562557","C# I/O exception ""This machine is disabled for file encryption.\r\n""","<p>I'm implementing a simple C# console application for Encrypt or Decrypt a given file. Here im using inbuilt methods of .net framework. please look at the following program that shows the class that is responsible for handle the Encrypt and decrypt operations.  </p>

<pre><code>class FileHandler
{
    string fileToHandle = null;//name of the file
    private Boolean isEncrypted = false;//yes or no
    public FileHandler(string fileToHandle)
    {
        this.fileToHandle = fileToHandle;
    }
    //encrypt the current file
    public void encrypt()
    {
        if (!isEncrypted)
        {
            try
            {
                File.Encrypt(fileToHandle);
            }
            catch (FileNotFoundException e)
            {
                Console.WriteLine(e.StackTrace);
            }
            catch (IOException e)
            {
                Console.WriteLine(e.StackTrace);
                Console.WriteLine(e.Message);
            }
        }

    }
    //decrypt the current file
    public void decrypt()
    {
        if (isEncrypted)
        {
            try
            {
                File.Decrypt(fileToHandle);
            }
            catch (FileNotFoundException e)
            {
                Console.WriteLine(e.StackTrace);
            }
            catch (IOException e)
            {
                Console.WriteLine(e.StackTrace);
                Console.WriteLine(e.Message);
            }
        }
    }
}
</code></pre>

<p>but when i'm trying to use the method encrypt() it ends with an I/O error which states the message ""This machine is disabled for file encryption.\r\n"". I'm using .net framework 4.5 in windows 7 enterprise edition. I have NTFS file system in my Hard drive. </p>

<p>Please help me to sort out this problem.    </p>
","<p><code>File.Encrypt</code> does NTFS file encryption. If the filesystem is not NTFS or the user you are running under does not have rights to modify the NTFS settings (Edit: <a href=""https://stackoverflow.com/a/25562595/80274"">Or NTFS File encryption is disabled</a>) you won't be able to use the <code>File.Encrypt</code> functions.</p>
","1434","<c#><.net><encryption-symmetric>","2","3","2","2014-08-29 06:15:44","","0","","2008334","","2014-08-29 06:15:44","2014-08-29 06:08:34",""
"25562557","C# I/O exception ""This machine is disabled for file encryption.\r\n""","<p>I'm implementing a simple C# console application for Encrypt or Decrypt a given file. Here im using inbuilt methods of .net framework. please look at the following program that shows the class that is responsible for handle the Encrypt and decrypt operations.  </p>

<pre><code>class FileHandler
{
    string fileToHandle = null;//name of the file
    private Boolean isEncrypted = false;//yes or no
    public FileHandler(string fileToHandle)
    {
        this.fileToHandle = fileToHandle;
    }
    //encrypt the current file
    public void encrypt()
    {
        if (!isEncrypted)
        {
            try
            {
                File.Encrypt(fileToHandle);
            }
            catch (FileNotFoundException e)
            {
                Console.WriteLine(e.StackTrace);
            }
            catch (IOException e)
            {
                Console.WriteLine(e.StackTrace);
                Console.WriteLine(e.Message);
            }
        }

    }
    //decrypt the current file
    public void decrypt()
    {
        if (isEncrypted)
        {
            try
            {
                File.Decrypt(fileToHandle);
            }
            catch (FileNotFoundException e)
            {
                Console.WriteLine(e.StackTrace);
            }
            catch (IOException e)
            {
                Console.WriteLine(e.StackTrace);
                Console.WriteLine(e.Message);
            }
        }
    }
}
</code></pre>

<p>but when i'm trying to use the method encrypt() it ends with an I/O error which states the message ""This machine is disabled for file encryption.\r\n"". I'm using .net framework 4.5 in windows 7 enterprise edition. I have NTFS file system in my Hard drive. </p>

<p>Please help me to sort out this problem.    </p>
","<p>try this:</p>

<pre><code>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\EFS]
EfsConfiguration=0 (dword)
LastGoodEfsConfiguration=0 (dword)
</code></pre>

<p>Change dword value to 1 to disable and 0 to enable.</p>
","1434","<c#><.net><encryption-symmetric>","2","3","2","2014-08-29 06:15:44","","0","","2008334","","2014-08-29 06:15:44","2014-08-29 06:08:34",""
"29784535","How To Decrypt AWS Ruby Client-side Encryption in Python","<p>AWS's S3 SDK for Ruby allows for client-side ('envelope') encryption of the file.  It's a combination of AES CBC/ECB encryption for the client-side key where the envelope key and initialization vector are stored in the metadata.  </p>

<p>I have a Ruby developer that has encrypted various files in an S3 bucket that I need to retrieve and decrypted with Python.  The Python S3 AWS SDK doesn't currently have this client-side feature.  </p>

<p>Assuming the file was encrypted using the <code>encryption_key</code> parameter of the Ruby <code>bucket.write</code> S3 API:</p>

<pre><code>#!/usr/bin/ruby
# coding: utf-8

require 'aws-sdk'
require 'openssl'

access_key = '&lt;aws_access_key&gt;'
secret_access_key = '&lt;secret_access_key&gt;'
encryption_key = ""passwordpassword""

s3 = AWS::S3.new
storage_host = ""our_bucket""
storage_path = ""prod/master_report/test.txt""
bucket_obj = s3.buckets[storage_host].objects[storage_path]
bucket_obj.write(file: 'test.txt', encryption_key: encryption_key)
</code></pre>

<p>Is there a way to decrypt the files with Python instead of using the Ruby SDK?</p>
","<p>Took a bit of tracing through the Ruby S3 SDK but client side-encryption is implemented as ""envelope encryption"" using the AES algorithm.  In short the contents of the envelope are encrypted using AES-CBC with the key and IV stored in the file's metadata (base64 encoded).  The CBC key itself is AES-EBC encoded with the users given encryption key.</p>

<p>The Ruby client-side encrypted file can be decrypted with this Python:</p>

<pre><code>#!/usr/bin/python
# -*- coding: utf-8 -*-

from __future__ import print_function
import boto
import tempfile
import base64
from Crypto.Cipher import AES

ENCRYPTION_KEY = b""passwordpassword""
ENV_KEY_LENGTH = 32

conn = boto.connect_s3()
bucket = conn.get_bucket('our_bucket', validate=False)
encrypted = bucket.get_key('prod/master_report/test.txt')

# get envelop keys from file metadata
metadata = encrypted.metadata
envelope_key = base64.b64decode(metadata['x-amz-key'])
envelope_iv = base64.b64decode(metadata['x-amz-iv'])

# decrypt envelope key
cipher = AES.new(ENCRYPTION_KEY, AES.MODE_ECB)
envelope_key = cipher.decrypt(envelope_key)[:ENV_KEY_LENGTH]

# write encrypted file
tf = tempfile.TemporaryFile()
encrypted.get_file(tf)

cipher = AES.new(envelope_key, AES.MODE_CBC, envelope_iv)

# read contents of file
contents = """"
with open('simple/decrypted.txt', 'w') as out:
    tf.seek(0)
    with tf:
        for line in tf:
            dec_line = cipher.decrypt(line)
            contents += dec_line
            print(dec_line, file=out)

tf.close()

print(""Decrypted: %s"" % (contents,))
</code></pre>
","1431","<python><ruby><amazon-s3><encryption-symmetric><aws-sdk>","5","7","1","2016-09-09 17:19:28","","0","1","655832","","2015-04-21 23:10:54","2015-04-21 22:47:05",""
"11542819","How to create a simple encryption algorithm in java?","<p>Guys can anyone guide me on how to create an algorithm for encryption/decryption in Java?  I need to make a client - server chat on which text needs to be encrypted by generating a key. On the receiver side the receiver receives text message with decrypt key to open the complete message.I have no idea. Will be grateful if anyone can provide me a sample or tutorial on this. </p>
","<p>I would advise that you not create your own algorithm, but rather choose from a list of well known algorithms available in JCE (Java Cryptography Extension) or in Bouncy Castle, depending on if you accept third party software. Depending on what you're looking to do, you should choose your algorithm accordingly. Different types of sensitive data require different minimum levels of encryption. </p>
","1430","<java><javascript><encryption><encryption-symmetric>","-2","1","1","2012-07-18 15:20:33","","5","","","","","2012-07-18 13:43:09","2012-07-19 14:07:59"
"48467242","Disadvantage of using Amazon KMS to encrypt / decrypt small application data","<p>A pair of Amazon Lambdas will symmetrically encrypt and decrypt a small piece of application data. I want to use Amazon KMS to facilitate this, because it solves the problems of secret storage and key rotation, and then some.</p>

<p>The <a href=""https://docs.aws.amazon.com/kms/latest/developerguide/programming-encryption.html"" rel=""nofollow noreferrer"">Amazon KMS Developer Guide</a> indicates:</p>

<blockquote>
  <p>These operations are designed to encrypt and decrypt data keys. They use an AWS KMS customer master key (CMK) in the encryption operations and they cannot accept more than 4 KB (4096 bytes) of data. <em>Although you might use them to encrypt small amounts of data, such as a password or RSA key, they are not designed to encrypt application data.</em></p>
</blockquote>

<p>It goes on to recommend using <a href=""https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/introduction.html"" rel=""nofollow noreferrer"">AWS Encryption SDK</a> or the <a href=""http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html"" rel=""nofollow noreferrer"">Amazon S3 encryption client</a> for encrypting application data.</p>

<p>While the <a href=""https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/introduction.html"" rel=""nofollow noreferrer"">listed advantages of the AWS Encryption SDK</a> are clear as day, and very attractive, especially to a developer who is not a cryptographer, let's assume for the purpose of this question that circumstances are not favorable to those alternatives.</p>

<p><strong>If my application data is sure never to exceed 4k, why <em>specifically</em> shouldn't I simply use Amazon KMS to encrypt and decrypt this data?</strong></p>

<p><em>Use case</em></p>

<p>My team is implementing a new authentication layer to be used across the services and APIs at our company. We're implementing a JWT specification, but whereas we intend to steer clear of the widely documented cryptographic grievances beleaguering JWE / JWS compliant token signing, we're symmetrically encrypting the payload. Thus, we keep the advantage of standard library implementations of non-cryptographic token validation operations (expiry and the rest,) and we leave behind the cryptographic ""foot-gun.""</p>
","<p>I suspect it's about performance: scaling and and latency.</p>

<p><a href=""https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second-table"" rel=""nofollow noreferrer"">KMS encrypt/decrypt has a limit of 5500 reqs/s</a> per account, which is shared with some other KMS operations.</p>

<p>""Why?"" Is also discussed a bit more thoroughly in the FAQ.</p>

<blockquote>
  <p><strong>Why use envelope encryption? Why not just send data to AWS KMS to encrypt directly?</strong></p>
  
  <p>While AWS KMS does support sending data less than 4 KB to be encrypted, envelope encryption can offer significant performance benefits. When you encrypt data directly with KMS it must be transferred over the network. Envelope encryption reduces the network load for your application or AWS cloud service. Only the request and fulfillment of the data key through KMS must go over the network. Since the data key is always stored in encrypted form, it is easy and safe to distribute that key where you need it to go without worrying about it being exposed. Encrypted data keys are sent to AWS KMS and decrypted under master keys to ultimately allow you to decrypt your data. The data key is available directly in your application without having to send the entire block of data to AWS KMS and suffer network latency.</p>
  
  <p><a href=""https://aws.amazon.com/kms/faqs/"" rel=""nofollow noreferrer"">https://aws.amazon.com/kms/faqs/</a></p>
</blockquote>
","1426","<encryption><aws-lambda><encryption-symmetric><aws-kms><amazon-kms>","2","3","2","2019-01-16 13:06:25","48473076","2","","739373","","2018-02-09 10:15:29","2018-01-26 18:15:35",""
"48467242","Disadvantage of using Amazon KMS to encrypt / decrypt small application data","<p>A pair of Amazon Lambdas will symmetrically encrypt and decrypt a small piece of application data. I want to use Amazon KMS to facilitate this, because it solves the problems of secret storage and key rotation, and then some.</p>

<p>The <a href=""https://docs.aws.amazon.com/kms/latest/developerguide/programming-encryption.html"" rel=""nofollow noreferrer"">Amazon KMS Developer Guide</a> indicates:</p>

<blockquote>
  <p>These operations are designed to encrypt and decrypt data keys. They use an AWS KMS customer master key (CMK) in the encryption operations and they cannot accept more than 4 KB (4096 bytes) of data. <em>Although you might use them to encrypt small amounts of data, such as a password or RSA key, they are not designed to encrypt application data.</em></p>
</blockquote>

<p>It goes on to recommend using <a href=""https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/introduction.html"" rel=""nofollow noreferrer"">AWS Encryption SDK</a> or the <a href=""http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html"" rel=""nofollow noreferrer"">Amazon S3 encryption client</a> for encrypting application data.</p>

<p>While the <a href=""https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/introduction.html"" rel=""nofollow noreferrer"">listed advantages of the AWS Encryption SDK</a> are clear as day, and very attractive, especially to a developer who is not a cryptographer, let's assume for the purpose of this question that circumstances are not favorable to those alternatives.</p>

<p><strong>If my application data is sure never to exceed 4k, why <em>specifically</em> shouldn't I simply use Amazon KMS to encrypt and decrypt this data?</strong></p>

<p><em>Use case</em></p>

<p>My team is implementing a new authentication layer to be used across the services and APIs at our company. We're implementing a JWT specification, but whereas we intend to steer clear of the widely documented cryptographic grievances beleaguering JWE / JWS compliant token signing, we're symmetrically encrypting the payload. Thus, we keep the advantage of standard library implementations of non-cryptographic token validation operations (expiry and the rest,) and we leave behind the cryptographic ""foot-gun.""</p>
","<p>I am going through this issue with AWS support right now. There is the throttling limit mentioned in the accepted answer. Also, if you reuse and cache data keys as allowed by the SDK, you can save money at the expense of lowered security (one data key can decrypt multiple objects).</p>

<p>However, if neither of those are relevant to you, direct CMK encryption is appealing. The security is excellent because the data key cannot be leaked, every decryption requires a API call to KMS and can be audited. In the <a href=""https://www.google.com/url?sa=t&amp;source=web&amp;rct=j&amp;url=https://d1.awsstatic.com/whitepapers/aws-kms-best-practices.pdf&amp;ved=2ahUKEwiUz_zXhrrcAhVQ11MKHdp1ATMQFjAAegQIBRAB&amp;usg=AOvVaw1ceW8d4eWB1KfOAch6Z9kX"" rel=""nofollow noreferrer"" title=""KMS Best Practices"">KMS Best Practices</a> whitepaper, it states that encryption of credit card numbers in this way is PCI compliant.</p>
","1426","<encryption><aws-lambda><encryption-symmetric><aws-kms><amazon-kms>","2","1","2","2019-01-16 13:06:25","48473076","2","","739373","","2018-02-09 10:15:29","2018-01-26 18:15:35",""
"22523973","What is the meaning of 128 bit key in AES","<p>I am new to encryption methods and i want to know what is the meaning of 128 bit key. Does it mean the key has 128 characters or when we convert key to the binary, and then that binary has 128 digits or cipher that created using key and plain text has 128 characters ?</p>
","<p>The key is 128 (binary) bits. That's all it means.</p>

<p><a href=""http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""nofollow"">AES</a> supports key sizes of 128, 192, or 256 bits.</p>

<p>AES has a fixed block size of 128 bits, which means it en/decrypts data in chunks of 16 bytes at a time. The plaintext/cipher text can be any length of course (and is <a href=""http://en.wikipedia.org/wiki/Padding_%28cryptography%29"" rel=""nofollow"">padded</a> out to a multiple of 16 bytes).</p>

<p>Good crypto implementations will use a <a href=""http://en.wikipedia.org/wiki/Key_derivation_function"" rel=""nofollow"">Key Derivation Function</a> which takes a password (or keyfile, etc) of <em>any length</em>, and generates a key suitable for the encryption algorithm in question.</p>
","1422","<encryption><aes><encryption-symmetric>","1","2","1","2014-03-20 05:15:10","22524019","0","1","","","","2014-03-20 05:11:47",""
"6452091","How to protect the encryption key from reverse engineering?","<p>My software is using AES Rijndael. </p>

<p>I am using a SHA-256 hash to generate a key from a string with an arbitrary length, and then passing this as both the private and public key since in this instance I do not need to differentiate between the two.</p>

<p>How do I protect my key from being hacked out of the executable? </p>

<p>I know not to use a literal but instead generate the key at runtime with some predetermined steps, but all the same the key will still be in memory right before its sent on to the AES initialization function and so can quite easily be retrieved then. </p>

<p>AES is obviously very secure, but what good does that do me if someone breaks the executable instead?</p>

<p>Is there some common practise when solving this problem?</p>
","<p>This can't be done. This is the basic problem with e.g. DRM scheme's on PC's: they need to have the key in memory, so it can be extracted. You can maybe obscure it while it is not in use, but that's about it. And if your application is popular and distributed, then somebody <em>will</em> crack you delicious scheme. That's why some companies use dongles or TPM chips for high value applications.</p>
","1407","<security><aes><encryption-symmetric><rijndael>","2","5","2","2013-12-02 07:54:25","6487666","2","","426242","","2013-12-02 07:54:25","2011-06-23 09:41:18",""
"6452091","How to protect the encryption key from reverse engineering?","<p>My software is using AES Rijndael. </p>

<p>I am using a SHA-256 hash to generate a key from a string with an arbitrary length, and then passing this as both the private and public key since in this instance I do not need to differentiate between the two.</p>

<p>How do I protect my key from being hacked out of the executable? </p>

<p>I know not to use a literal but instead generate the key at runtime with some predetermined steps, but all the same the key will still be in memory right before its sent on to the AES initialization function and so can quite easily be retrieved then. </p>

<p>AES is obviously very secure, but what good does that do me if someone breaks the executable instead?</p>

<p>Is there some common practise when solving this problem?</p>
","<p>There is something - very complex in mathematical theory - called ""whitebox cryptography"". In this case, the AES algorithm is modified in a way, that it builds up the secret during encryption. I do not know exactly, how this is achieved, but this one does not need to have a initialized secret, but the secret is part of the algorithm.
An attacker might see, that your AES implementation is a bit ""different"" but at no time in execution the key is visible in memory. The only chance an attacker will have, is to copy the whole whitebox code but it is really hard to reverse engineer this - he would just be able to use it. Anyway depending on the way you use the AES, this might be enough to break in.</p>
","1407","<security><aes><encryption-symmetric><rijndael>","2","3","2","2013-12-02 07:54:25","6487666","2","","426242","","2013-12-02 07:54:25","2011-06-23 09:41:18",""
"46817146","Random bytes generation with C# for use as an AES encryption key","<p>I have to generate a 128 bits key for AES in C#.</p>

<p>Since I am not familiar with C# could someone please show me a simple code on how to generate 16 random bytes?</p>
","<p>To generate a cryptographically secure random number, such as one that's suitable for creating a random password, use the RNGCryptoServiceProvider class or derive a class from System.Security.Cryptography.RandomNumberGenerator.</p>

<p>See <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider(v=vs.110).aspx"" rel=""nofollow noreferrer"">RNGCryptoServiceProvider Class</a></p>
","1406","<c#><encryption><encryption-symmetric>","0","2","3","2019-07-18 21:55:03","","3","","335858","","2017-10-18 18:57:16","2017-10-18 18:45:37","2017-10-18 21:04:19"
"46817146","Random bytes generation with C# for use as an AES encryption key","<p>I have to generate a 128 bits key for AES in C#.</p>

<p>Since I am not familiar with C# could someone please show me a simple code on how to generate 16 random bytes?</p>
","<p>Generally, you use <a href=""https://msdn.microsoft.com/en-us/library/system.random.nextbytes(v=vs.110).aspx"" rel=""nofollow noreferrer""><code>Random.NextBytes</code></a> to fill an array of bytes with random values.</p>

<p><strong>However, your case is special.</strong> Since you are using the random values for encryption, you need to generate a cryptographically secure sequence, meaning that an attacker who gets a part of the sequence that you generated cannot reliably predict any part of the sequence that follows.</p>

<p>Here is how you do it:</p>

<pre><code>var rnd = new RNGCryptoServiceProvider();
var b = new byte[16];
rnd.GetNonZeroBytes(b);
</code></pre>
","1406","<c#><encryption><encryption-symmetric>","0","3","3","2019-07-18 21:55:03","","3","","335858","","2017-10-18 18:57:16","2017-10-18 18:45:37","2017-10-18 21:04:19"
"46817146","Random bytes generation with C# for use as an AES encryption key","<p>I have to generate a 128 bits key for AES in C#.</p>

<p>Since I am not familiar with C# could someone please show me a simple code on how to generate 16 random bytes?</p>
","<p>I'm assuming that you're using the .Net Framwork... </p>

<pre><code>/* This will store your bytes in a byte array 0 - 15 (16 values) */      
    Random random = new Random();
    byte[] values = new Byte[15];
    for(i=0; i&lt;15; i++){
      values[i] = Convert.ToByte(random.Next(0, 127)); // max for a byte
    }
</code></pre>

<p>To help you with further C# hurdles try checking out the following Resources:</p>

<ul>
<li><a href=""https://social.msdn.microsoft.com/Forums/en-US/home"" rel=""nofollow noreferrer"">https://social.msdn.microsoft.com/Forums/en-US/home</a> (Social form)</li>
<li><a href=""https://msdn.microsoft.com/en-us/library/ff361664(v=vs.110).aspx"" rel=""nofollow noreferrer"">https://msdn.microsoft.com/en-us/library/ff361664(v=vs.110).aspx</a> (Everything .Net)</li>
<li><a href=""https://docs.microsoft.com/en-us/dotnet/"" rel=""nofollow noreferrer"">https://docs.microsoft.com/en-us/dotnet/</a> (Getting started with .net)</li>
</ul>

<p>Note: if you want these bytes to represent actual ASCII characters, change the range of the rand to `random.Next(33,126);</p>

<p>Update: RNGCryptoServiceProvider is definitely better for your use case. </p>
","1406","<c#><encryption><encryption-symmetric>","0","-1","3","2019-07-18 21:55:03","","3","","335858","","2017-10-18 18:57:16","2017-10-18 18:45:37","2017-10-18 21:04:19"
"13786040","Symmetric encryption using Dukpt","<p>I am new to this forum. Recently I am tasked to decrypt a file that is encrypted using AES encryption( which require a secret key for encryption and decryption as well). File use to encrypt in every 5 minute using a DUKPT .</p>

<p>I am working on c# .By searching around on Google, i have found how to decrypt file if you have got DUKPT. but I don't know how to generate DUKPT using Key Serial Number(KSN)  and Base Derivation Key(BDK). Is there any library support in c# by which we can generate DUKPT..</p>

<p>Hoping a great help here</p>

<p>DUKPT: Derived unique key per transaction</p>
","<p>There is a ANSI standard that defines DUKPT, X9.24-1 but that uses DES both for the encryption/decryption and to produce the keys.  Since you said BDK and KSN, I imagine this is what you have in mind.  I expect you did not get any responses (even after the extended period of four hours) because you said AES and DUKPT in the same posting.  (People in the know read that and say, RTFM.)</p>

<p>It is not C# but I believe there is a DUKPT.m file by ""Mikhail Burshteyn"" pointed to on Stack Exchange or somewhere in the last six months or so.  There is also pieces of code in C that I wrote to illustrate how to decrypt. (Something that is not covered worth a darn in the standard.)</p>

<p>If you want source code in C# that you can cut and paste, I think you will be disappointed.</p>
","1405","<c#><encryption-symmetric>","0","0","3","2018-12-08 08:24:19","","1","","1889133","","2012-12-09 09:14:51","2012-12-09 09:00:40",""
"13786040","Symmetric encryption using Dukpt","<p>I am new to this forum. Recently I am tasked to decrypt a file that is encrypted using AES encryption( which require a secret key for encryption and decryption as well). File use to encrypt in every 5 minute using a DUKPT .</p>

<p>I am working on c# .By searching around on Google, i have found how to decrypt file if you have got DUKPT. but I don't know how to generate DUKPT using Key Serial Number(KSN)  and Base Derivation Key(BDK). Is there any library support in c# by which we can generate DUKPT..</p>

<p>Hoping a great help here</p>

<p>DUKPT: Derived unique key per transaction</p>
","<p><a href=""https://github.com/sgbj/Dukpt.NET"" rel=""nofollow noreferrer"">https://github.com/sgbj/Dukpt.NET</a> - Great introduction. You'll need the specification to understand the code as it was written with clever brevity in mind, not readability. I used it 6 months ago to not only learn about DUKPT, but to implement the embedded C libraries for biometric sensor device. </p>
","1405","<c#><encryption-symmetric>","0","1","3","2018-12-08 08:24:19","","1","","1889133","","2012-12-09 09:14:51","2012-12-09 09:00:40",""
"13786040","Symmetric encryption using Dukpt","<p>I am new to this forum. Recently I am tasked to decrypt a file that is encrypted using AES encryption( which require a secret key for encryption and decryption as well). File use to encrypt in every 5 minute using a DUKPT .</p>

<p>I am working on c# .By searching around on Google, i have found how to decrypt file if you have got DUKPT. but I don't know how to generate DUKPT using Key Serial Number(KSN)  and Base Derivation Key(BDK). Is there any library support in c# by which we can generate DUKPT..</p>

<p>Hoping a great help here</p>

<p>DUKPT: Derived unique key per transaction</p>
","<p>As mentioned in last post ANSI standard that defines DUKPT, X9.24-1 in 3DES mode, that means Dukpt uses 3DES algorithm to generate Key(not to encrypt or decrypt data) and it is known as 3DES-DUKPT.Another type is AES-DUKPT, which uses AES-ECB mode to generate key.
Both have common inputs Base derivation Key(BDK) and KSN with different size.
For 3DES-DUKPT, BDK = 16 bytes(always) and KSN = 10 bytes.
For AES-DUKPT, BDK = 16, 24, 32 bytes(depend upon AES key size) and KSN = 12 bytes.</p>

<p>Input KSN consist of Key_serial_number and Counter.</p>

<p>Input BDK and Key_serial_number (from KSN) generates IPEK.
And IPEK with Counter(from KSN) generates Encryption / Decryption key for data.</p>
","1405","<c#><encryption-symmetric>","0","0","3","2018-12-08 08:24:19","","1","","1889133","","2012-12-09 09:14:51","2012-12-09 09:00:40",""
"13544138","encrypting a Document using vigenere cipher","<p>I'm interested in learning about different encryption techniques and have started to implement a vigenere cipher in c#.  I can implement a windows forms which allows me to encrypt and decrypt a string similar the following link.</p>

<p><a href=""https://stackoverflow.com/questions/13533269/c-sharp-vigenere-cipher-to-encrypt-an-text-file"">https://stackoverflow.com/questions/13533269/c-sharp-vigenere-cipher-to-encrypt-an-text-file</a></p>

<p>My question is how could I use vigenere to encrypt a word document or an image file instead of a string? I have created button which opens a dialog to let me choose a file, I'm now stuck on how to encrypt the chosen file.  Anybody have any idea's?</p>
","<p>Read the file into a byte array</p>

<pre><code>byte[] bytes = File.ReadAllBytes(""C:\folder\myfile"");
</code></pre>

<p>then feed this into your encryption routine to produce a different byte[] array to write back to disk</p>

<pre><code>bytesEncrypted = MyEncryptFunction(bytes);
File.WriteAllBytes(""C:\folder\myfile.encrypted"", bytesEncrypted)
</code></pre>
","1386","<c#><encryption><encryption-symmetric><vigenere>","0","1","1","2012-11-24 19:24:21","","7","","-1","","2017-05-23 12:18:43","2012-11-24 18:19:07",""
"4673028","Base64 encoded output differs from as3crypto and pycrypto encryption libraries","<p>I'm trying to use symmetric encryption to pass data from actionscript 3 (client) to python (server).</p>

<p>The libraries I'm using are as3crypto and pycrypto, I'm not sure if I'm using these libraries correctly.</p>

<p>Actionscript 3:</p>

<pre class=""lang-as prettyprint-override""><code>private function testOnInit():void {
  var t_toEnc:String = 'testtest';
  var t_byAry:ByteArray = Hex.toArray( Hex.fromString( t_toEnc ) );
  var t_key:ByteArray = Hex.toArray( Hex.fromString( 'Thisisthekey' ) );
  var t_cbc:CBCMode = new CBCMode( new BlowFishKey( t_key ), new NullPad );
  var t_enc:String;
  t_cbc.IV = Hex.toArray( '30313233' );
  t_cbc.encrypt( t_byAry );
  t_enc = Base64.encodeByteArray( t_byAry );      
  dbg( 'b64 encrypted string ' + t_enc ); //this is just a debugging function we use in our code.
}
</code></pre>

<p>This is the base64 encoded output of the function above.</p>

<blockquote>
  <p>xvVqLzV5TU4=</p>
</blockquote>

<p>Now, using the same key, initialization vector, and algorithm from the pycrypto library gives me different output.</p>

<p>Python:</p>

<pre class=""lang-py prettyprint-override""><code>from Crypto.Cipher import Blowfish
B = Blowfish.new( 'Thisisthekey', Blowfish.MODE_CBC, '30313233' )
S = 'testtest'
X = B.encrypt( S )
import base64
Y = base64.b64encode( X )
print Y
</code></pre>

<blockquote>
  <p>I82NQEkSHhE=</p>
</blockquote>

<p>I'm pretty sure that I'm doing something wrong with the encryption process because I can base64 encode 'testtest' on both libraries and receive the same output.</p>

<p>Actionscript 3:</p>

<pre class=""lang-as prettyprint-override""><code>var b:ByteArray = new ByteArray();
b.writeUTFBytes( 'testtest' );
dbg( Base64.encodeByteArray( b ) );
</code></pre>

<p>Yields...</p>

<blockquote>
  <p>dGVzdHRlc3Q=</p>
</blockquote>

<p>Python:</p>

<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; T = 'testtest'
&gt;&gt;&gt; print base64.b64encode( T )
</code></pre>

<p>Yields</p>

<blockquote>
  <p>dGVzdHRlc3Q=</p>
</blockquote>

<p>Could someone please encrypt and base64encode the same string with the same IV in either python or actionscript, so I know which library is actually producing the correct output?</p>
","<p>The problem might be in padding. ActionScript uses no padding, but Py doesn't show what padding it uses. So, it can be the reason. Try another padding (PKCS#5 for instance) with actionscript.</p>
","1385","<encryption><pycrypto><encryption-symmetric><blowfish><as3crypto>","0","0","1","2015-08-02 12:32:56","","1","1","1816580","","2015-08-02 12:32:56","2011-01-12 19:19:10",""
"23197995","Best method to communicate securely between two different servers","<p>I'm trying to figure out the best way to send info back and forth between my server and another company's server.  Basically, the other company processes the sales of my software, then goes to my server to activate the software.  My software hits my server every time it loads to get the activated license.  My server is blocked from external SQL queries (won't run queries from the other companies server), so I somehow have to pass data back and forth with their server.</p>

<p>Being new to this kind of thing, I'm looking for opinions on how best to do this regarding how to do this securely (I already know how to write code).  For example, is an encrypted GET request sufficient where I can just decrypt info passing in a link?  SSL with data in XML?  I appreciate any thoughts and direction you can give.</p>

<p>Thanks in advance!</p>
","<p>It sounds like you can put up a web or web services server?  Have your server only accept connections by HTTPS, and require client authentication.  Have the other company's server contact your server using HTTPS with a POST request.</p>

<p>Your server will need to present an SSL certificate that the other company's server recognizes as authentic - either you need to get a certificate issued from a CA, or you can create a self signed certificate and have the other company install that certificate in their server's trust store.  The other company will also need to present an SSL certificate that your server recognizes - in this case, it should be a self signed certificate that you install in your trust store, so you aren't accepting connections from just anyone who has a CA issued certificate.</p>

<p>Your software can contact your server with an HTTPS GET request.  The certificate requirements for your client software will be the same as for the other company's server, as described above.</p>

<p>This arrangement will prevent (a) anyone from impersonating your server, (b) anyone from impersonating your partner's server when posting to your server, (c ) anyone from eavesdropping on your client software's connections to your server and getting their user keys that way.</p>
","1383","<sql><ssl><https><encryption-symmetric>","1","3","1","2014-04-21 18:06:27","23203044","0","1","","","","2014-04-21 13:01:24",""
"8058400","Decrypt Data From SQL Server 2008 R2","<p>I need some help translating this procedure (see below) to Entity Framework 4.0. Does anyone have any suggestions of how to port this over.
The target project includes; Silverlight 4, WCF RIA Services, EF 4.0, SQL Server 2008 R2.</p>

<p>The only requirement I have is that it will need to be placed in the managed code and not in a stored procedure.</p>

<pre><code>    Try 
    {
        SqlCommand cmd = new SqlCommand();
        cmd.Connection = cn;
        cmd.CommandType = CommandType.Text;
        string sql = ""OPEN SYMMETRIC KEY "" + this._encryptKey;
        sql += "" DECRYPTION BY CERTIFICATE "" + this._encrpytCert; 
        sql += "" SELECT TOP (1) CONVERT(nvarchar(50),DECRYPTBYKEY(Field1)) AS Name"";
        sql += "" FROM Table3""; 
        sql += "" ORDER BY CONVERT(nvarchar(50),DECRYPTBYKEY(Field1))"";
        cmd.CommandText = sql;
        Name = (String)cmd.ExecuteScalar();
        bRtn = false;
    }
        catch (Exception ex)
    {
        System.Diagnostics.Debug.Print(ex.ToString());
    }
</code></pre>

<p>Please let me know how I should set this up and thanks!</p>
","<p>You could run the query via the Entity Framework and get strongly typed results by using the <a href=""http://msdn.microsoft.com/en-us/library/vstudio/dd487208%28v=vs.100%29.aspx"" rel=""nofollow""><code>ObjectContext.ExecuteStoreQuery&lt;&gt;()</code></a> function (see <a href=""http://msdn.microsoft.com/en-us/library/vstudio/ee358769%28v=vs.100%29.aspx"" rel=""nofollow"">this example</a>).</p>

<p>Unfortunately, however, I don't think there's any way to get around having to generate the T-SQL statement yourself. While you can use many of SQL Server's functions in Linq-to-Entities queries via the <a href=""http://msdn.microsoft.com/en-us/library/system.data.objects.sqlclient.sqlfunctions.aspx"" rel=""nofollow"">SqlFuntions</a> class, there is no function that translates SQL Server's <code>DECRYPTBYKEY</code> function, not to mention the fact that the Entity Framework won't generate a statement to open the key.</p>
","1336","<c#><silverlight-4.0><entity-framework-4><sql-server-2008-r2><encryption-symmetric>","3","1","2","2014-06-19 23:51:08","","7","1","322283","","2011-11-09 18:57:15","2011-11-08 23:17:52",""
"8058400","Decrypt Data From SQL Server 2008 R2","<p>I need some help translating this procedure (see below) to Entity Framework 4.0. Does anyone have any suggestions of how to port this over.
The target project includes; Silverlight 4, WCF RIA Services, EF 4.0, SQL Server 2008 R2.</p>

<p>The only requirement I have is that it will need to be placed in the managed code and not in a stored procedure.</p>

<pre><code>    Try 
    {
        SqlCommand cmd = new SqlCommand();
        cmd.Connection = cn;
        cmd.CommandType = CommandType.Text;
        string sql = ""OPEN SYMMETRIC KEY "" + this._encryptKey;
        sql += "" DECRYPTION BY CERTIFICATE "" + this._encrpytCert; 
        sql += "" SELECT TOP (1) CONVERT(nvarchar(50),DECRYPTBYKEY(Field1)) AS Name"";
        sql += "" FROM Table3""; 
        sql += "" ORDER BY CONVERT(nvarchar(50),DECRYPTBYKEY(Field1))"";
        cmd.CommandText = sql;
        Name = (String)cmd.ExecuteScalar();
        bRtn = false;
    }
        catch (Exception ex)
    {
        System.Diagnostics.Debug.Print(ex.ToString());
    }
</code></pre>

<p>Please let me know how I should set this up and thanks!</p>
","<p>To decrypt before querying sensitive data, all you need to do is to use a DbTransaction in the EF ObjectContext connection.</p>

<p>I.e.</p>

<ul>
<li>connection.Open();</li>
<li>connection.BeginTransaction();</li>
<li>execute your ""OPEN
SYMMETRIC KEY..."" command or stored procedure with
ExecuteStoreCommand execute your sensitive data queries, stored
procedures etc.</li>
<li>Commit or Rollback you transaction if required</li>
</ul>

<p>This forces EF to maintain the same db connection because you have started a db transaction and it makes sense because you might execute a whole bunch of SP's as part of the same db transaction.</p>
","1336","<c#><silverlight-4.0><entity-framework-4><sql-server-2008-r2><encryption-symmetric>","3","0","2","2014-06-19 23:51:08","","7","1","322283","","2011-11-09 18:57:15","2011-11-08 23:17:52",""
"30763196","Encrypt in Java and Decrypt in MS SQL Server","<p>My application flow is as follow. </p>

<p>JAVA APP ----> MS SQL (Tables)---> MS SQL (Stored procedure) ---> Another DB</p>

<p>Here from Java application i am pushing certain Sensitive information that  i even want to hide from DBA. So i want to encrypt those column values from java and before the Stored Procedure pushes it to Another DB i want to Decrypt it in SQL code. </p>

<p>But the <strong>Problem is that MS SQL do not allow Custom Keys to be passed for Encryption or Decryption</strong> .It generates those keys itself and we cant see those key values. So i cant decrypt them as i cant pass on my keys (Which i used to encrypt values in Java code) in SQL DecryptByKey Mehtod. i am using 3DES encryption Scheme.
Can any one help me with this issue.</p>

<p><strong>Now the core Question is</strong>. How can i decrypt any 3DES based Encrypted Value 
(i am encrypting this value in Java Code) in MS SQL server 2008 when i know all the details about of Encryption value such as salt and other things. Is there any method in SQL where i can pass my custom key  and decrypt the values.</p>

<p>Any help will be deeply appreciated. </p>
","<p>You can encrypt whole jdbc traffic with SSL. Look at <a href=""https://msdn.microsoft.com/en-us/library/bb879935%28v=sql.110%29.aspx"" rel=""nofollow"">https://msdn.microsoft.com/en-us/library/bb879935%28v=sql.110%29.aspx</a></p>
","1329","<java><sql-server><encryption><encryption-symmetric>","-2","1","2","2015-12-04 18:48:53","","6","","3413961","","2015-06-10 20:12:46","2015-06-10 17:23:01",""
"30763196","Encrypt in Java and Decrypt in MS SQL Server","<p>My application flow is as follow. </p>

<p>JAVA APP ----> MS SQL (Tables)---> MS SQL (Stored procedure) ---> Another DB</p>

<p>Here from Java application i am pushing certain Sensitive information that  i even want to hide from DBA. So i want to encrypt those column values from java and before the Stored Procedure pushes it to Another DB i want to Decrypt it in SQL code. </p>

<p>But the <strong>Problem is that MS SQL do not allow Custom Keys to be passed for Encryption or Decryption</strong> .It generates those keys itself and we cant see those key values. So i cant decrypt them as i cant pass on my keys (Which i used to encrypt values in Java code) in SQL DecryptByKey Mehtod. i am using 3DES encryption Scheme.
Can any one help me with this issue.</p>

<p><strong>Now the core Question is</strong>. How can i decrypt any 3DES based Encrypted Value 
(i am encrypting this value in Java Code) in MS SQL server 2008 when i know all the details about of Encryption value such as salt and other things. Is there any method in SQL where i can pass my custom key  and decrypt the values.</p>

<p>Any help will be deeply appreciated. </p>
","<p>It is not possible to view the SQL server keys, and hence we can't decrypt anything encrypted by SQL server.</p>

<p>I had to change my approach for this scenario. </p>
","1329","<java><sql-server><encryption><encryption-symmetric>","-2","0","2","2015-12-04 18:48:53","","6","","3413961","","2015-06-10 20:12:46","2015-06-10 17:23:01",""
"3997908","Understanding the Hill cipher algorithm","<p>I want to implement Hill cipher but I think I have a problem in understanding the algorithm itself.</p>

<p>The key I'll use is a 2X2 matrix and I'll encode 2 characters each time. 
I'll multiply the key matrix with the matrix of 2 characters then modulus the result on 26 as this equation.</p>

<pre><code>C = E(K, P) = KP mod 26
where: K:key
       P:plain text
</code></pre>

<p>I do it like this but there's something wrong. I use the example in my book to test my algorithm. Since plain text is <code>friday</code> and key is: <code> int key[][] = {{5, 8}, {17, 3}}</code>;
 the result should be <code>PQCFKU</code>.</p>

<p>For the first letters <code>f</code> , <code>r</code>  , <code>f= 5</code>  , <code>r=17</code> order of alphabetic letters
encryption of <code>f</code> is <code>(5*5 + 17*8)%26  =5 => f</code> it should be <code>P</code> </p>

<p>Where is the error that I make?</p>
","<p>If this: <a href=""http://slidefinder.net/c/chapter_classical_encryption_techniques_jen/11206531/p2"" rel=""nofollow"">http://slidefinder.net/c/chapter_classical_encryption_techniques_jen/11206531/p2</a> is your book, the matrix [[5, 8] [17, 3]] is not your encryption key... it is the input matrix.  5 = F, 17 = R, 8 = I, 3 = D.  K is the encryption key, which is not given in the slide.  You would have to solve the linear algebra equation to get K.  </p>

<p>If you're still having problems with the example in your book, try <a href=""http://www.cs.uri.edu/cryptography/classicalhill.htm"" rel=""nofollow"">http://www.cs.uri.edu/cryptography/classicalhill.htm</a> for a simple 2x2 key example with both encryption and decryption.</p>
","1309","<algorithm><encryption-symmetric>","1","2","1","2017-04-28 19:35:38","3998098","2","","","user6655984","2017-04-28 19:35:38","2010-10-22 14:41:56",""
"2921999","AES / Rijndael Test Vectors : what padding mode?","<p>So I've been looking at these <a href=""http://csrc.nist.gov/archive/aes/rijndael/rijndael-vals.zip"" rel=""nofollow noreferrer"">test vectors</a> for the Known Answer Test for AES / Rijndael (with 128-bit block) in CBC mode, and I wonder:  <strong>what kind of padding do they use?</strong>  PKCS7?</p>
","<p>The Zip archive you link to contains a file called <code>katmct.pdf</code> which describes how the tests are computed. There is no padding; for each test, the data already has the 128-bit length that the algorithm expects.</p>
","1306","<aes><rijndaelmanaged><encryption-symmetric>","3","3","1","2010-05-27 14:49:01","2922165","0","","40411","","2010-05-27 14:42:17","2010-05-27 14:26:44",""
"13174165","How to implement ""AES/CFB/NoPadding"" Encryption/Decryption in WinRT C#?","<p>We are porting the existing code to Windows 8 now, the data file downloaded from the server is encrypted in ""AES/CFB/NoPadding"", and we cannot change the data encryption mode because the data file is used by a lot of existing clients. 
</p>

<p>
In WinRT , the [SymmetricAlgorithmNames][1] doesn't contains a name to match ""AES/CFB/NoPadding"". And from the [SymmetricKeyAlgorithmProvider][2] document, the NoPadding algorithms don't contain ""CFB""<ul>
<li>No padding:
<li>DES_CBC</li>
<li>DES_ECB</li>
<li>3DES_CBC</li>
<li>3DES_ECB</li>
<li>RC2_CBC</li>
<li>RC2_ECB</li>
<li>AES_CBC</li>
<li>AES_ECB</li>
</ul>
So how can we get a [SymmetricKeyAlgorithmProvider][2] to support AES/CFB/NoPadding ?

Is there 3rd party Encryption package for Metro App ?
</p>
","<p>One option is to use BouncyCastle library, they do support Aes/Ofb/NoPadding.</p>

<p>Another option is to use System.Security.Cryptography.Aes from c# framework and encrypt using PaddingMode.Zeros, then truncate encrypted data to the same length as input data (discard padded data at the end of encrypted text).
    When decrypting, append padding (any garbage or zeros) to cipertext to align to the block length, set PaddingMode.None, decrypt, throw away padded bytes at the end (they will be bogus).
Something like this:</p>

<pre><code>        var aes2 = Aes.Create();
        aes2.KeySize = 128;
        aes2.BlockSize = 128;
        aes2.Mode = CipherMode.CFB;
        aes2.Padding = PaddingMode.Zeros;
        var aes2Data = new byte[buff.Length];
        // strip padded data
        Buffer.BlockCopy(aes2.CreateEncryptor().TransformFinalBlock(buff, 0, buff.Length), 0,
            aes2Data, 0, buff.Length);
        Console.WriteLine(""Aes2 size: {0}"", aes2Data.Length);


        // validate aes2
        var size = aes2Data.Length;
        var pad = aes2Data.Length % 16;
        if (pad != 0)
        {
            var tmp = new byte[aes2Data.Length + 16 - pad];
            Buffer.BlockCopy(aes2Data, 0, tmp, 0, aes2Data.Length);
            aes2Data = tmp;
        }

        var aes2Decr = Aes.Create();
        aes2Decr.Padding = PaddingMode.None;
        aes2Decr.Key = aes2.Key;
        aes2Decr.Mode = aes2.Mode;
        aes2Decr.IV = aes2.IV;
        var data2 = aes2Decr.CreateDecryptor().TransformFinalBlock(aes2Data, 0, aes2Data.Length);
        valid = data2.Take(size).SequenceEqual(buff);
        if (!valid)
            throw new ApplicationException(""Invalid data"");
</code></pre>
","1287","<windows-8><encryption-symmetric>","0","0","1","2013-01-03 01:30:44","","0","","","","","2012-11-01 09:26:53",""
"29251716","Is this wrapper around AesManaged ok?","<p>I need to encrypt/decrypt some strings. I've build my wrapper class according to the <a href=""https://msdn.microsoft.com/de-de/library/system.security.cryptography.aesmanaged%28v=vs.110%29.aspx"" rel=""nofollow"">msdn documentation</a> but with some changes. </p>

<p>Since I want to encrypt/decrypt data with a given string/passphrase, I don't use <code>AesManaged</code> for creating a key. (The user should be able to encrypt/decrypt with a key he enters, and therefore I cannot use the key from <code>AesManaged</code> and I cannot save the key).</p>

<p>I instead create the key by using <code>Rfc2898DeriveBytes</code> (PBKDF2) with a given salt. The given salt is used since I do not store the key and I think because of this, the salt must be always the same.</p>

<p>I then create an IV, encrypt the given string and concatenate the IV and the encrypted string. This will then eventually got saved in a file. This means the IV gets save together with the encrypted data. </p>

<p>Questions: </p>

<ol>
<li>Is it ok to store the IV together with the encrypted data?</li>
<li>Is there another way to create the key without using the same salt everytime(Based on a given passphrase)?</li>
<li>Is this encryption done using AES128 or AES256?</li>
<li>Will the IV be always 16 bytes, or can this change?</li>
</ol>

<hr>

<pre><code>    static void Main(string[] args)
    {
        const string stringToEncrypt = ""String to be encrypted/decrypted. Encryption is done via AesManaged"";
        const string password = ""m1Sup3rS3cre!Password"";

        string encrypted = EncryptString(stringToEncrypt, password);
        string roundtrip = DecryptStringFromBytes_Aes(encrypted, password);

        Console.WriteLine(""Original:   {0}"", stringToEncrypt);
        Console.WriteLine(""Round Trip: {0}"", roundtrip);

        Console.ReadLine();
    }

    static string EncryptString(string plainText, string password)
    {
        string encryptedString;

        using (AesManaged aesAlg = new AesManaged())
        {
            aesAlg.Key = PasswordAsByte(password);
            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        swEncrypt.Write(plainText);
                    }
                    var encrypted = msEncrypt.ToArray();

                    encryptedString = Encoding.Default.GetString(aesAlg.IV);
                    encryptedString += Encoding.Default.GetString(encrypted);
                }
            }
        }
        return encryptedString;
    }

    static string DecryptStringFromBytes_Aes(string cipherText, string password)
    {
        using (AesManaged aesAlg = new AesManaged())
        {
            aesAlg.Key = PasswordAsByte(password);

            aesAlg.IV = Encoding.Default.GetBytes(cipherText).Take(16).ToArray();

            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

            var encryptedByteArray = Encoding.Default.GetBytes(cipherText).Skip(16).ToArray();

            using (MemoryStream msDecrypt = new MemoryStream(encryptedByteArray))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {
                        return srDecrypt.ReadToEnd();
                    }
                }
            }
        }
    }

    private static byte[] PasswordAsByte(string password)
    {
        byte[] salt = Encoding.Default.GetBytes(""foobar42"");
        Rfc2898DeriveBytes passwordBytes = new Rfc2898DeriveBytes(password, salt);

        return passwordBytes.GetBytes(32);
    }
</code></pre>
","<p>No, this is not okay.</p>

<p>1) You're using <code>Encoding.Default</code> in various places. Don't do that - it means you're at the whim of the platform you're on. Always use an explicit encoding, ideally UTF-8 in most cases.</p>

<p>2) You're using <code>Encoding.GetString</code> / <code>Encoding.GetBytes</code> to convert <em>arbitrary binary</em> data to a string and back. That's almost bound to lose data. (It happened to succeed on my machine, but it really depends on the encoding - and it's fundamentally a bad idea.) <code>Encoding</code> is designed for data which is <em>inherently</em> text data, and you're just applying an encoding one way or the other. Your encrypted data is inherently binary data. Use <code>Convert.ToBase64String</code> and <code>Convert.FromBase64String</code> instead.</p>

<p>For your other questions:</p>

<ul>
<li>Yes, it's okay to store the IV with the encrypted data, as far as I know.</li>
<li>You could use the same approach for the password: generate a different salt each time, and store <em>that</em> with the encrypted text. Not sure whether that's generally recommended or not, I'm afraid.</li>
<li>I believe you're controlling whether the key size is 128 or 256 bits, with your call to <code>passwordBytes.GetBytes(32)</code> - that's a 256-bit key, so it's AES256.</li>
<li>I believe the IV size for AES is always 16 bytes (128 bits)</li>
</ul>
","1280","<c#><.net><encryption><aes><encryption-symmetric>","4","7","3","2015-03-25 11:23:15","","7","1","589259","","2015-03-25 10:22:41","2015-03-25 09:22:26",""
"29251716","Is this wrapper around AesManaged ok?","<p>I need to encrypt/decrypt some strings. I've build my wrapper class according to the <a href=""https://msdn.microsoft.com/de-de/library/system.security.cryptography.aesmanaged%28v=vs.110%29.aspx"" rel=""nofollow"">msdn documentation</a> but with some changes. </p>

<p>Since I want to encrypt/decrypt data with a given string/passphrase, I don't use <code>AesManaged</code> for creating a key. (The user should be able to encrypt/decrypt with a key he enters, and therefore I cannot use the key from <code>AesManaged</code> and I cannot save the key).</p>

<p>I instead create the key by using <code>Rfc2898DeriveBytes</code> (PBKDF2) with a given salt. The given salt is used since I do not store the key and I think because of this, the salt must be always the same.</p>

<p>I then create an IV, encrypt the given string and concatenate the IV and the encrypted string. This will then eventually got saved in a file. This means the IV gets save together with the encrypted data. </p>

<p>Questions: </p>

<ol>
<li>Is it ok to store the IV together with the encrypted data?</li>
<li>Is there another way to create the key without using the same salt everytime(Based on a given passphrase)?</li>
<li>Is this encryption done using AES128 or AES256?</li>
<li>Will the IV be always 16 bytes, or can this change?</li>
</ol>

<hr>

<pre><code>    static void Main(string[] args)
    {
        const string stringToEncrypt = ""String to be encrypted/decrypted. Encryption is done via AesManaged"";
        const string password = ""m1Sup3rS3cre!Password"";

        string encrypted = EncryptString(stringToEncrypt, password);
        string roundtrip = DecryptStringFromBytes_Aes(encrypted, password);

        Console.WriteLine(""Original:   {0}"", stringToEncrypt);
        Console.WriteLine(""Round Trip: {0}"", roundtrip);

        Console.ReadLine();
    }

    static string EncryptString(string plainText, string password)
    {
        string encryptedString;

        using (AesManaged aesAlg = new AesManaged())
        {
            aesAlg.Key = PasswordAsByte(password);
            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        swEncrypt.Write(plainText);
                    }
                    var encrypted = msEncrypt.ToArray();

                    encryptedString = Encoding.Default.GetString(aesAlg.IV);
                    encryptedString += Encoding.Default.GetString(encrypted);
                }
            }
        }
        return encryptedString;
    }

    static string DecryptStringFromBytes_Aes(string cipherText, string password)
    {
        using (AesManaged aesAlg = new AesManaged())
        {
            aesAlg.Key = PasswordAsByte(password);

            aesAlg.IV = Encoding.Default.GetBytes(cipherText).Take(16).ToArray();

            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

            var encryptedByteArray = Encoding.Default.GetBytes(cipherText).Skip(16).ToArray();

            using (MemoryStream msDecrypt = new MemoryStream(encryptedByteArray))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {
                        return srDecrypt.ReadToEnd();
                    }
                }
            }
        }
    }

    private static byte[] PasswordAsByte(string password)
    {
        byte[] salt = Encoding.Default.GetBytes(""foobar42"");
        Rfc2898DeriveBytes passwordBytes = new Rfc2898DeriveBytes(password, salt);

        return passwordBytes.GetBytes(32);
    }
</code></pre>
","<blockquote>
  <p>Is it ok to store the IV together with the encrypted data?</p>
</blockquote>

<p>Yes, it is ok. Moreover, you're using <code>AesManaged</code> without explicit setting of <code>Mode</code> - it this case mode is CBC, and in CBC mode IV should preceed cyphertext.</p>

<blockquote>
  <p>Is there another way to create the key without using the same salt everytime(Based on a given passphrase)?</p>
</blockquote>

<p><code>Rfc2898DeriveBytes</code> is pretty standard way to derive key from text password. There is no need to reinvent way of deriving key from password, just use Rfc2898DeriveBytes as you're doing it now.</p>

<blockquote>
  <p>Is this encryption done using AES128 or AES256?</p>
</blockquote>

<p>It is <code>AES256</code> since you're using 32-byte password.</p>

<blockquote>
  <p>Will the IV be always 16byte, or can this change?</p>
</blockquote>

<p>The size of the <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.symmetricalgorithm.iv%28v=vs.110%29.aspx"" rel=""nofollow"">IV property</a> must be the same as the BlockSize property divided by 8. So it is 16 for 128-bit blocks.</p>
","1280","<c#><.net><encryption><aes><encryption-symmetric>","4","0","3","2015-03-25 11:23:15","","7","1","589259","","2015-03-25 10:22:41","2015-03-25 09:22:26",""
"29251716","Is this wrapper around AesManaged ok?","<p>I need to encrypt/decrypt some strings. I've build my wrapper class according to the <a href=""https://msdn.microsoft.com/de-de/library/system.security.cryptography.aesmanaged%28v=vs.110%29.aspx"" rel=""nofollow"">msdn documentation</a> but with some changes. </p>

<p>Since I want to encrypt/decrypt data with a given string/passphrase, I don't use <code>AesManaged</code> for creating a key. (The user should be able to encrypt/decrypt with a key he enters, and therefore I cannot use the key from <code>AesManaged</code> and I cannot save the key).</p>

<p>I instead create the key by using <code>Rfc2898DeriveBytes</code> (PBKDF2) with a given salt. The given salt is used since I do not store the key and I think because of this, the salt must be always the same.</p>

<p>I then create an IV, encrypt the given string and concatenate the IV and the encrypted string. This will then eventually got saved in a file. This means the IV gets save together with the encrypted data. </p>

<p>Questions: </p>

<ol>
<li>Is it ok to store the IV together with the encrypted data?</li>
<li>Is there another way to create the key without using the same salt everytime(Based on a given passphrase)?</li>
<li>Is this encryption done using AES128 or AES256?</li>
<li>Will the IV be always 16 bytes, or can this change?</li>
</ol>

<hr>

<pre><code>    static void Main(string[] args)
    {
        const string stringToEncrypt = ""String to be encrypted/decrypted. Encryption is done via AesManaged"";
        const string password = ""m1Sup3rS3cre!Password"";

        string encrypted = EncryptString(stringToEncrypt, password);
        string roundtrip = DecryptStringFromBytes_Aes(encrypted, password);

        Console.WriteLine(""Original:   {0}"", stringToEncrypt);
        Console.WriteLine(""Round Trip: {0}"", roundtrip);

        Console.ReadLine();
    }

    static string EncryptString(string plainText, string password)
    {
        string encryptedString;

        using (AesManaged aesAlg = new AesManaged())
        {
            aesAlg.Key = PasswordAsByte(password);
            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        swEncrypt.Write(plainText);
                    }
                    var encrypted = msEncrypt.ToArray();

                    encryptedString = Encoding.Default.GetString(aesAlg.IV);
                    encryptedString += Encoding.Default.GetString(encrypted);
                }
            }
        }
        return encryptedString;
    }

    static string DecryptStringFromBytes_Aes(string cipherText, string password)
    {
        using (AesManaged aesAlg = new AesManaged())
        {
            aesAlg.Key = PasswordAsByte(password);

            aesAlg.IV = Encoding.Default.GetBytes(cipherText).Take(16).ToArray();

            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

            var encryptedByteArray = Encoding.Default.GetBytes(cipherText).Skip(16).ToArray();

            using (MemoryStream msDecrypt = new MemoryStream(encryptedByteArray))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {
                        return srDecrypt.ReadToEnd();
                    }
                }
            }
        }
    }

    private static byte[] PasswordAsByte(string password)
    {
        byte[] salt = Encoding.Default.GetBytes(""foobar42"");
        Rfc2898DeriveBytes passwordBytes = new Rfc2898DeriveBytes(password, salt);

        return passwordBytes.GetBytes(32);
    }
</code></pre>
","<p>Normally salt is used together with cryptographic hashing of say passwords to protect against dictionary attacks. To get the same kind of protection for symmetric encryption with AES you should use a random initialization vector. So when you encrypt create a random IV and prepend it to the message (in cleartext). When you decrypt get the IV from the encrypted message and use it to decrypt the message. Then the ciphertext of the same message encrypted with the same key will be different.</p>

<ul>
<li><p>So, yes, it is OK to store the IV together with the encrypted data.</p></li>
<li><p>You do not need a different salt every time because the purpose of the random IV is similar in how salt makes dictionary attacks on hashes harder.</p></li>
<li><p>AES can use key sizes of 128, 192 or 256 bits so to use AES 256 you need a 256 bit key (32 bytes) which is what you use.</p></li>
<li><p>AES uses a 128 bit block which requires a 128 bit IV (or 16 bytes).</p></li>
</ul>
","1280","<c#><.net><encryption><aes><encryption-symmetric>","4","1","3","2015-03-25 11:23:15","","7","1","589259","","2015-03-25 10:22:41","2015-03-25 09:22:26",""
"9519291","TripleDES Decryption truncating last character","<p>I have a .NET class that implements TripleDES encryption and decryption. The code is too much to post here. However, the problem is that while encryption is OK, decryption is inconsistent depending on the length of the original plaintext. I know that encryption is OK since other triple DES tools also give same value.</p>

<p>Specifically, the last character is being cut off from the resulting plain text if the Length of the original Plaintext was 8,16,24,32,40 etc i.e 8n.</p>

<p>The encryption mode is CBC
The key size is 24 chars(192bits)
The IV is 8 chars</p>
","<p>The problem is because the (un)padding algorithm is not correct.</p>

<p>(3)DES encrypts/decrypts blocks of 8 bytes. As not all texts are precisely 8 bytes, the last block must contain bytes that are not original from the plain text. Now the trick is to find out which one is the last character of the plain text. Sometimes the length of the plain text is known beforehand - then the padding characters can be anything really.</p>

<p>If the length of the plain text is not known then a deterministic padding algorithm must be used, e.g. PKCS5Padding. PKCS5Padding <em>always</em> performs padding, even if the plaintext is N * blocksize in bytes. The reason for this is simple: otherwise it doesn't know if the last byte is plain text or padding: <code>41 41 41 41 41 41 41 41 08 08 08 08 08 08 08 08</code> would be 8 'A' characters, with 8 padding bytes.</p>

<p>It seems that either the unpadding algorithm is not well implemented, or that a non-deterministic padding algorithm is deployed.</p>
","1274","<encryption><encryption-symmetric><tripledes>","1","4","1","2013-07-09 23:25:40","9519842","3","","","","","2012-03-01 15:49:35",""
"45265363","OpenSSL is missing ciphers on OS X","<p>To run a specific application with mosquitto, I need the PSK cipher suites from OpenSSL, specified in the OpenSSL documentation:</p>

<pre><code> TLS_PSK_WITH_RC4_128_SHA                  PSK-RC4-SHA
 TLS_PSK_WITH_3DES_EDE_CBC_SHA             PSK-3DES-EDE-CBC-SHA
 TLS_PSK_WITH_AES_128_CBC_SHA              PSK-AES128-CBC-SHA
 TLS_PSK_WITH_AES_256_CBC_SHA              PSK-AES256-CBC-SHA
</code></pre>

<p>Unfortunately, my mac does not have these cipher suites through OpenSSL:</p>

<pre><code>openssl ciphers -v
DHE-RSA-AES256-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(256)  Mac=SHA1
DHE-DSS-AES256-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(256)  Mac=SHA1
AES256-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(256)  Mac=SHA1
EDH-RSA-DES-CBC3-SHA    SSLv3 Kx=DH       Au=RSA  Enc=3DES(168) Mac=SHA1
EDH-DSS-DES-CBC3-SHA    SSLv3 Kx=DH       Au=DSS  Enc=3DES(168) Mac=SHA1
DES-CBC3-SHA            SSLv3 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=SHA1
DES-CBC3-MD5            SSLv2 Kx=RSA      Au=RSA  Enc=3DES(168) Mac=MD5 
DHE-RSA-AES128-SHA      SSLv3 Kx=DH       Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-DSS-AES128-SHA      SSLv3 Kx=DH       Au=DSS  Enc=AES(128)  Mac=SHA1
AES128-SHA              SSLv3 Kx=RSA      Au=RSA  Enc=AES(128)  Mac=SHA1
DHE-RSA-SEED-SHA        SSLv3 Kx=DH       Au=RSA  Enc=SEED(128) Mac=SHA1
DHE-DSS-SEED-SHA        SSLv3 Kx=DH       Au=DSS  Enc=SEED(128) Mac=SHA1
SEED-SHA                SSLv3 Kx=RSA      Au=RSA  Enc=SEED(128) Mac=SHA1
RC2-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=RC2(128)  Mac=MD5 
RC4-SHA                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=SHA1
RC4-MD5                 SSLv3 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
RC4-MD5                 SSLv2 Kx=RSA      Au=RSA  Enc=RC4(128)  Mac=MD5 
EDH-RSA-DES-CBC-SHA     SSLv3 Kx=DH       Au=RSA  Enc=DES(56)   Mac=SHA1
EDH-DSS-DES-CBC-SHA     SSLv3 Kx=DH       Au=DSS  Enc=DES(56)   Mac=SHA1
DES-CBC-SHA             SSLv3 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=SHA1
DES-CBC-MD5             SSLv2 Kx=RSA      Au=RSA  Enc=DES(56)   Mac=MD5 
EXP-EDH-RSA-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-EDH-DSS-DES-CBC-SHA SSLv3 Kx=DH(512)  Au=DSS  Enc=DES(40)   Mac=SHA1 export
EXP-DES-CBC-SHA         SSLv3 Kx=RSA(512) Au=RSA  Enc=DES(40)   Mac=SHA1 export
EXP-RC2-CBC-MD5         SSLv3 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC2-CBC-MD5         SSLv2 Kx=RSA(512) Au=RSA  Enc=RC2(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv3 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export
EXP-RC4-MD5             SSLv2 Kx=RSA(512) Au=RSA  Enc=RC4(40)   Mac=MD5  export
</code></pre>

<p>In fact, all of the available ciphers are SSLv2 or SSLv3, there are no TLS ciphers. Is there any way to add the ciphers that I need? The crazy thing is, my Ubuntu vm has all of them!</p>
","","1265","<macos><openssl><homebrew><encryption-symmetric>","1","","0","2017-07-24 13:44:18","","2","","608639","","2017-07-23 18:18:52","2017-07-23 13:00:00",""
"42834063","Decrypting byte array with SymmetricAlgorithm and CryptoStream","<p><strong>My encrypting and decrypting methods:</strong></p>

<pre><code>private static SymmetricAlgorithm GetAlgorithm(string password)
{
    using (Rijndael algorithm = Rijndael.Create())
    {
        using (Rfc2898DeriveBytes rdb = new Rfc2898DeriveBytes(password, new byte[]
        {
            0x53, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x20, 0x43, 0x68, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x65
        }))
        {
            algorithm.Padding = PaddingMode.ISO10126;
            algorithm.Key = rdb.GetBytes(32);
            algorithm.IV = rdb.GetBytes(16);
        }
        return algorithm;
    }
}

public static byte[] EncryptBytes(byte[] clearBytes, string password)
{
    ICryptoTransform encryptor;
    using (SymmetricAlgorithm algorithm = GetAlgorithm(password))
        encryptor = algorithm.CreateEncryptor();
    using (MemoryStream ms = new MemoryStream())
    using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
    {
        cs.Write(clearBytes, 0, clearBytes.Length);
        cs.FlushFinalBlock();
        return ms.ToArray();
    }
}

public static byte[] DecryptBytes(byte[] cipherBytes, string password)
{
    ICryptoTransform decryptor;
    using (SymmetricAlgorithm algorithm = GetAlgorithm(password))
        decryptor = algorithm.CreateDecryptor();
    using (MemoryStream ms = new MemoryStream())
    using (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Write))
    {
        cs.Write(cipherBytes, 0, cipherBytes.Length); //here is the exception thrown
        cs.FlushFinalBlock();
        return ms.ToArray();
    }
}
</code></pre>

<p><strong>How i call the methods:</strong></p>

<pre><code>byte[] prev = File.ReadAllBytes(path + sourcefile);
byte[] enc = Encryption.EncryptBytes(prev, password);
byte[] dec = Encryption.DecryptBytes(enc, password);

File.WriteAllBytes(path + targetfile, dec);
</code></pre>

<p>When i try to decrypt the byte array i get the following exception: </p>

<pre><code>System.Security.Cryptography.CryptographicException
Additional information: padding is invalid and cannot be removed
</code></pre>

<p>I already read some possible solutions but none of them solved my problem.
The Key and IV (InitialisationVector) are the same, when i encrypt and decrypt so that's definitely not the reason.</p>
","<p>Corrected methods:</p>

<p>ERROR: you were disposing the <code>Rijndael algorithm</code> in the <code>GetAlgorithm()</code>. This is wrong: it is the caller of <code>GetAlgorithm()</code> that must dispose the <code>algorithm</code> (as you were correctly doing)</p>

<pre><code>private static SymmetricAlgorithm GetAlgorithm(string password)
{
    Rijndael algorithm = Rijndael.Create();

    using (Rfc2898DeriveBytes rdb = new Rfc2898DeriveBytes(password, new byte[]
    {
        0x53, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x20, 0x43, 0x68, 0x6c, 0x6f, 0x72, 0x69, 0x64, 0x65
    }))
    {
        algorithm.Padding = PaddingMode.ISO10126;
        algorithm.Key = rdb.GetBytes(32);
        algorithm.IV = rdb.GetBytes(16);
    }

    return algorithm;
}
</code></pre>

<p>Small warnings here: you were not disposing the <code>ICryptoTransform</code>.</p>

<pre><code>public static byte[] EncryptBytes(byte[] clearBytes, string password)
{
    using (SymmetricAlgorithm algorithm = GetAlgorithm(password))
    using (ICryptoTransform encryptor = algorithm.CreateEncryptor())
    using (MemoryStream ms = new MemoryStream())
    using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
    {
        cs.Write(clearBytes, 0, clearBytes.Length);
        cs.FlushFinalBlock();
        return ms.ToArray();
    }
}

public static byte[] DecryptBytes(byte[] cipherBytes, string password)
{
    using (SymmetricAlgorithm algorithm = GetAlgorithm(password))
    using (ICryptoTransform decryptor = algorithm.CreateDecryptor())
    using (MemoryStream ms = new MemoryStream())
    using (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Write))
    {
        cs.Write(cipherBytes, 0, cipherBytes.Length); //here is the exception thrown
        cs.FlushFinalBlock();
        return ms.ToArray();
    }
}
</code></pre>
","1242","<c#><encryption><encryption-symmetric><rijndael>","1","2","1","2017-03-16 12:36:41","42834299","3","","","","","2017-03-16 12:25:33",""
"20967964","Crypto++ symmetric algorithms and authenticated block modes combinations","<p>I've implemented a C++ wrapper library for <a href=""http://cryptopp.com"" rel=""nofollow"">Crypto++</a> v5.6.2 and have a question about combinations of symmetric algorithms (e. g. Blowfish) and block modes (e. g. GCM).</p>

<p>I am able to encrypt and decrypt data via Blowfish/EAX, but I can't achieve the same by using Blowfish/GCM. AES/EAX and AES/GCM both work.</p>

<p>The following simple application demonstrates my problem:</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;

#include ""cryptopp/blowfish.h""
#include ""cryptopp/filters.h""
#include ""cryptopp/eax.h""
#include ""cryptopp/gcm.h""
#include ""cryptopp/osrng.h""
#include ""cryptopp/hex.h""

std::string encrypt(
    CryptoPP::AuthenticatedSymmetricCipher &amp;encryption,
    std::string const kPlainText,
    CryptoPP::SecByteBlock const kKey,
    unsigned const char * kIV) {
  std::string cipher_text;

  // TODO Is this the source of the problem?
  // BlockSize always returns 0 which leads to an exception if GCM block mode is used!
  std::cout &lt;&lt; encryption.BlockSize() &lt;&lt; "" bytes"" &lt;&lt; std::endl;

  encryption.SetKeyWithIV(
      kKey,
      kKey.size(),
      kIV
  );

  CryptoPP::StringSink *string_sink = new CryptoPP::StringSink(cipher_text);
  CryptoPP::BufferedTransformation *transformator = NULL;

  // The AuthenticatedEncryptionFilter adds padding as required.
  transformator = new CryptoPP::AuthenticatedEncryptionFilter(
      encryption,
      string_sink);

  bool const kPumpAll = true;
  CryptoPP::StringSource(
      kPlainText,
      kPumpAll,
      transformator);

  return cipher_text;
}

std::string decrypt(
    CryptoPP::AuthenticatedSymmetricCipher &amp;decryption,
    std::string const kCipherText,
    CryptoPP::SecByteBlock const kKey,
    unsigned const char * kIV) {
  std::string recovered_plain_text;

  decryption.SetKeyWithIV(
      kKey,
      kKey.size(),
      kIV);

  CryptoPP::StringSink *string_sink = new CryptoPP::StringSink(
      recovered_plain_text);
  CryptoPP::BufferedTransformation *transformator = NULL;
  CryptoPP::AuthenticatedDecryptionFilter *decryption_filter = NULL;

  decryption_filter = new CryptoPP::AuthenticatedDecryptionFilter(
      decryption,
      string_sink);
  transformator = new CryptoPP::Redirector(*decryption_filter);

  bool const kPumpAll = true;
  CryptoPP::StringSource(
      kCipherText,
      kPumpAll,
      transformator);

  return recovered_plain_text;
}

int main() {
  CryptoPP::AutoSeededRandomPool prng;
  CryptoPP::SecByteBlock key(CryptoPP::Blowfish::DEFAULT_KEYLENGTH);
  prng.GenerateBlock(key, key.size());

  byte iv[CryptoPP::Blowfish::BLOCKSIZE];
  prng.GenerateBlock(iv, sizeof(iv));

  // Creates templated mode objects of  block ciphers.

  // This works...
//  CryptoPP::EAX&lt;CryptoPP::Blowfish&gt;::Encryption encryption;
//  CryptoPP::EAX&lt;CryptoPP::Blowfish&gt;::Decryption decryption;

  // This does NOT work...
  CryptoPP::GCM&lt;CryptoPP::Blowfish&gt;::Encryption encryption;
  CryptoPP::GCM&lt;CryptoPP::Blowfish&gt;::Decryption decryption;

  std::string plain_text = ""Block Mode Test"";
  std::string cipher_text = encrypt(encryption, plain_text, key, iv);
  // terminate called after throwing an instance of 'CryptoPP::InvalidArgument'
  // what():  Blowfish/GCM: block size of underlying block cipher is not 16

  std::cout &lt;&lt; ""cipher text: "" &lt;&lt; std::hex &lt;&lt; cipher_text &lt;&lt; std::endl;
  std::cout &lt;&lt; ""recovered plain text: "" &lt;&lt; decrypt(decryption, cipher_text, key, iv) &lt;&lt; std::endl;
}
</code></pre>

<p>A <code>CryptoPP::InvalidArgument</code> exception is thrown if running the code above with the following text:</p>

<pre><code>Blowfish/GCM: block size of underlying block cipher is not 16
</code></pre>

<p>But when running the code instead with the block mode EAX, no exception is thrown. So my questions are:</p>

<ul>
<li>Does GCM only work with AES? Can GCM also be used with Blowfish or 3DES?</li>
<li>Is there a matrix available which lists all possible combinations of symmetric algorithms with block modes?</li>
<li>Or is this a bug in Crypto++? Because the method <code>BlockSize()</code> <strong>always</strong> returns <code>0</code> but the exception is only raised if using Blowfish (or 3DES) instead of AES. This seems to raise the exception mentioned.</li>
</ul>
","<p>GCM has been designed to work with <strong>128-bit (=16 byte) block size</strong> only. You can find this in the <a href=""http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf"" rel=""nofollow"">original paper</a> in Section 5.1.</p>

<p>Blowfish is a <strong>64-bit block size</strong> algorithm, so the two are not compatible as an ""out-of-the-box"" authenticated encryption combination. The same is true for <code>3DES</code>. The exception is not a bug in Crypto++.</p>

<p>GCM will work with other Crypto++ objects that have 128-bit block sizes. They include <code>AES</code>, <code>Cast-256</code>, <code>Rijndael</code> <code>Cameilla</code>, <code>MARS</code>, <code>Serpent</code> and <code>Twofish</code>. A table of the block sizes is available at <a href=""http://www.codeproject.com/Articles/21877/Applied-Crypto-Block-Ciphers"" rel=""nofollow"">Applied Crypto++: Block Ciphers</a>.</p>

<p>GCM will not work with larger block sizes either. For example, <code>Rijndael</code> (the parent of <code>AES</code>) offers 192-bit and 256-bit block sizes (<code>AES</code> only specifies the 128-bit block size). GCM will not work with the larger block sizes. And the same is true for <code>SHACAL-2</code>, with a 256-bit block size.</p>

<p>Crypto++'s <code>BlockSize()</code> sometimes returns 0 (it has to do with the template parameters). Instead, use the compile time constants like <code>AES::BLOCKSIZE</code>, <code>Camellia::BLOCKSIZE</code> and <code>Rijndael::BLOCKSIZE</code>. This could be considered a bug.</p>
","1235","<c++><encryption><encryption-symmetric><crypto++><block-cipher>","4","4","1","2014-01-10 06:48:16","","0","","","","","2014-01-07 09:25:56",""
"42748132","Crypto in Linux","<p>I understand that in Linux kernel there are basically, 2 types of crypto options:</p>

<ol>
<li><p>cryptodev (/dev/crypto)</p></li>
<li><p>AF_ALG</p></li>
</ol>

<p>But in documentation, both methods are mentioned as HW encryption , i.e. methods which require HW support.</p>

<p>So, if I need crypto support in Linux, and does not have hw support , will the userspace API (for AF_ALG and cryptodev) still work ?</p>

<p>If yes - does it mean they use software algorithm in kernel ?</p>

<p>I am using Arria V, which is based on arm , yet, I don't see in its documentation mention of crypto, so I'm not sure it is supported in HW.</p>
","<p>Overview of both methods: AF_ALG and cryptodev (<code>/dev/crypto</code>) <a href=""https://events.linuxfoundation.org/sites/events/files/slides/lcj-2014-crypto-user.pdf#page=8"" rel=""nofollow noreferrer"">https://events.linuxfoundation.org/sites/events/files/slides/lcj-2014-crypto-user.pdf#page=8</a> ""Utilizing the crypto accelerators - Marek Vaˇsut - May 18, 2014""</p>

<p>As I understand, AF_ALG just uses <a href=""https://en.wikipedia.org/wiki/Crypto_API_(Linux)"" rel=""nofollow noreferrer"">generic kernel crypto API</a> and <strong>may use hw crypto</strong> accelerator, but <strong>always can use software</strong> crypto enabled in kernel. AF_ALG can be enabled in 4.1 kernel <a href=""http://lxr.free-electrons.com/source/crypto/Makefile?v=4.1#L99"" rel=""nofollow noreferrer"">by CONFIG_CRYPTO_USER_API option</a> set as 'y' or 'm' in kernel configuration when it was built (check config file of the kernel, sometimes it is available as /proc/config.gz or in /boot partition). And to use some algorithms (hashes, symmetric ciphers, random generators), corresponding  CONFIG_CRYPTO_USER_API suboption should be enabled too:</p>

<p><a href=""http://lxr.free-electrons.com/source/crypto/Kconfig?v=4.1#L1485"" rel=""nofollow noreferrer"">http://lxr.free-electrons.com/source/crypto/Kconfig?v=4.1#L1485</a></p>

<pre><code>1485 config CRYPTO_USER_API
1486         tristate
1487 
1488 config CRYPTO_USER_API_HASH
1489         tristate ""User-space interface for hash algorithms""
1490         depends on NET
1491         select CRYPTO_HASH
1492         select CRYPTO_USER_API
1493         help
1494           This option enables the user-spaces interface for hash
1495           algorithms.
1496 
1497 config CRYPTO_USER_API_SKCIPHER
1498         tristate ""User-space interface for symmetric key cipher algorithms""
1499         depends on NET
1500         select CRYPTO_BLKCIPHER
1501         select CRYPTO_USER_API
1502         help
1503           This option enables the user-spaces interface for symmetric
1504           key cipher algorithms.
1505 
1506 config CRYPTO_USER_API_RNG
1507         tristate ""User-space interface for random number generator algorithms""
1508         depends on NET
1509         select CRYPTO_RNG
1510         select CRYPTO_USER_API
1511         help
1512           This option enables the user-spaces interface for random
1513           number generator algorithms.
</code></pre>

<p>Cryptodev (<a href=""http://cryptodev-linux.org/index.html"" rel=""nofollow noreferrer"">http://cryptodev-linux.org/index.html</a>) looks bit like out-of-tree driver, not included into standard kernel (empty search for <a href=""http://lxr.free-electrons.com/ident?i=crypto_run"" rel=""nofollow noreferrer"">http://lxr.free-electrons.com/ident?i=crypto_run</a> or <a href=""http://lxr.free-electrons.com/ident?i=cryptodev"" rel=""nofollow noreferrer"">http://lxr.free-electrons.com/ident?i=cryptodev</a>). It should be downloaded, built and installed by user (slide 10 of <a href=""https://events.linuxfoundation.org/sites/events/files/slides/lcj-2014-crypto-user.pdf#page=10"" rel=""nofollow noreferrer"">https://events.linuxfoundation.org/sites/events/files/slides/lcj-2014-crypto-user.pdf#page=10</a> ""<em>Out of kernel tree code (for years)</em>""). They also claim on their website ""Support for all major cipher and hash algorithms"" so, it may use hardware crypto accelerator, but <strong>will work for any supported algorithm</strong> with software implementation when there is no hardware (there is always some crypto which is not implemented by any hardware).</p>

<blockquote>
  <p>So, if I need crypto support in Linux, and does not have hw support , will the userspace API (for AF_ALG and cryptodev) still work?
  If yes - does it mean they use software algorithm in kernel?</p>
</blockquote>

<p>Yes, both methods will work without any HW crypto, and will use all software implementations available in the kernel (enabled at time when kernel was built).</p>
","1232","<linux><encryption><encryption-symmetric><crypt>","0","3","1","2017-03-12 17:33:36","42750783","5","0","1102681","","2017-03-12 15:27:41","2017-03-12 13:41:57",""
"10246083","Emulate 3DES EDE using only DES","<p>My device doesn't support full 3DES (EDE). How can I emulate one using standard DES? Encryption mode is CBC.</p>
","<p><a href=""http://en.wikipedia.org/wiki/Triple_DES"" rel=""nofollow"">3DES</a> is just DES used three times on the plaintext:</p>

<pre><code>ciphertext = E_K3(D_K2(E_K1(plaintext)))
plaintext = D_K1(E_K2(D_K3(ciphertext)))

E_Kn = Encryption with Key number n.
D_Kn = Decryption with Key number n.
</code></pre>

<p>So you can easily ""emulate"" 3DES with just DES.</p>

<p>In CBC mode you'll need an IV to start with and then XOR the next plaintext block with the previous ciphertext block. If your device doesn't support CBC then this too is easily ""emulated"".</p>
","1207","<encryption><encryption-symmetric><des><3des>","1","0","3","2012-05-03 21:12:28","10246219","0","","468904","","2012-05-03 21:12:28","2012-04-20 12:17:05",""
"10246083","Emulate 3DES EDE using only DES","<p>My device doesn't support full 3DES (EDE). How can I emulate one using standard DES? Encryption mode is CBC.</p>
","<p>You start by picking three independent DES keys which are not related to each other in any way.</p>

<p>You will want to put DES into ECB mode, <strong>not CBC mode</strong>. You also need to ensure that each encryption and decryption operation is done only on 64-bit blocks and nothing more or less. Padding schemes and the likes will cause a vulnerability in the implementation and will lead to the discovery of the block content via brute force faster than a brute force against each key.</p>

<p>Using the first key, encrypt your plaintext. Using the second key, decrypt that value. Using the third key, encrypt the value for your full block. It looks like this:</p>

<p><code>Encrypt(k3, Decrypt(k2, Encrypt(k1, plaintext)))</code></p>

<p>Decryption is the other way around and looks like this:</p>

<p><code>Decrypt(k1, Encrypt(k2, Decrypt(k3, ciphertext)))</code></p>

<p>When you encrypt your blocks with 3DES you then need to apply your mode of operation like CBC or CTR and apply padding if needed.</p>

<p>Be careful.</p>
","1207","<encryption><encryption-symmetric><des><3des>","1","4","3","2012-05-03 21:12:28","10246219","0","","468904","","2012-05-03 21:12:28","2012-04-20 12:17:05",""
"10246083","Emulate 3DES EDE using only DES","<p>My device doesn't support full 3DES (EDE). How can I emulate one using standard DES? Encryption mode is CBC.</p>
","<h1>Block mode encryption</h1>

<p>What you do is that you split the key of size 128 bit (16 byte) or 168 bit (24 byte) in two or three pieces respectively. So for a 16 byte key K you would have two keys Ka and Kb, and for a 24 byte key you would have Ka, Kb and Kc. DES ABC keys have an <em>effective</em> strength of about 112 bits, DES ABA keys have an <em>effective</em> strength of about 80 bits.</p>

<p>To encrypt a single block of 8 bytes (the block size of both DES and 3DES) you would perform the following cryptographic operation: Cn = E(Ka, D(Kb, E(Kc, Mn))) where Mn is the n'th block of the plain text message and Cn the n'th block of the cipher text. If you don't have a Kc then you may use Ka (DES ABC key vs DES ABA key).</p>

<p>For this you need a single block DES encrypt, which is identical to a single block encrypt in ECB mode, or a single block encrypt with CBC and an IV consisting of 8 bytes valued 00h.</p>

<h1>CBC</h1>

<p>So that's the block encryption sorted, now you need some kind of encryption mode and padding mode. I'll explain CBC mode encryption here, ECB should not be used for encryption non-random data.</p>

<p>With CBC mode encryption you XOR a vector to the plain text. The vector is normally just the output of the last DESede encrypted block. As you don't have any preceding cipher text, you need to create the first vector yourself using random data. This vector is called the initialization vector or IV. See <a href=""http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher-block%20chaining%20%28CBC%29"" rel=""nofollow"">wikipedia</a> for a clear picture.</p>

<h1>Padding</h1>

<p>Block cipher modes only allow full blocks of plain text to be encrypted. So you would need some kind of padding scheme. Although there are many padding modes, PKCS#5 padding is used most of the time. You should pad the plain text like this: pad with bytes valued 0Xh, where X is the number of padding bytes required to create a full block. X should be between 1 and 8: in other words, PKCS#5 padding is always used; this makes it possible to distinquish the padding bytes from the plain text.</p>

<p>If you use padding in an online protocol then you need to protect against padding oracle attacks. In this case it is highly recommended to use some form of integrity checks, e.g. by adding a HMAC over the cipher text using a separate key.</p>
","1207","<encryption><encryption-symmetric><des><3des>","1","1","3","2012-05-03 21:12:28","10246219","0","","468904","","2012-05-03 21:12:28","2012-04-20 12:17:05",""
"42979606","How to encrypt nvarchar column in oracle?","<p>I have a table containing <code>nvarchar</code>  datatype columns (contains text in different languages). I want to encrypt data before inserting into table and decrypt the same while fetching records.</p>

<p>Please suggest how i can achieve this.</p>

<p>Encryption and decryption should be done through a private key.</p>

<p>Hoping, my question is clear. Please confirm if i need to provide more information.</p>
","<p>Note that it is probably wiser to crypt and decrypt your data directly in your application rather than in the database.</p>

<p>You can use Oracle's <a href=""https://docs.oracle.com/cd/B19306_01/appdev.102/b14258/d_crypto.htm#BJFGFDFG"" rel=""nofollow noreferrer"">DBMS_CRYPTO</a> package. There is an <a href=""https://docs.oracle.com/cd/B19306_01/appdev.102/b14258/d_crypto.htm#sthref1260"" rel=""nofollow noreferrer"">example</a> in the middle of the documentation page.</p>

<p>First you need to make a package to access the cipher type from SQL expression. Let's say you want AES256 in CBC mode with padding:</p>

<pre><code>CREATE PACKAGE pkg_so_42979606
AS
    FUNCTION cipher_type RETURN PLS_INTEGER;
END pkg_so_42979606;
/
CREATE PACKAGE BODY pkg_so_42979606
AS
    ctype CONSTANT PLS_INTEGER := DBMS_CRYPTO.ENCRYPT_AES256
                                  + DBMS_CRYPTO.CHAIN_CBC
                                  + DBMS_CRYPTO.PAD_PKCS5;
    FUNCTION cipher_type RETURN PLS_INTEGER
    IS
    BEGIN
        RETURN ctype;
    END;
END pkg_so_42979606;
/
</code></pre>

<p>Then you will need a key. You can ask Oracle to generate one. To easily handle it I'll move it in Base64. Let's draw one:</p>

<pre><code>DECLARE
    key_bytes_raw RAW(32);
    key_char NVARCHAR2(64);
BEGIN
    key_bytes_raw := DBMS_CRYPTO.RANDOMBYTES(32);
    key_char := UTL_I18N.RAW_TO_CHAR(UTL_ENCODE.BASE64_ENCODE(key_bytes_raw), 'AL32UTF8');
    DBMS_OUTPUT.PUT_LINE('Key: ' || key_char);
END;
/
Key: pMV3D4xhyfNxp3YyfLWzAErGcKkIjK3X6uc/WIeVTls=
</code></pre>

<p>Thus the cipher key I'll use is <code>pMV3D4xhyfNxp3YyfLWzAErGcKkIjK3X6uc/WIeVTls=</code>.</p>

<p>Now I'll use a test table</p>

<pre><code>CREATE TABLE so_42979606 (
    id NUMBER PRIMARY KEY,
    data NVARCHAR2(2000));
</code></pre>

<p>You can insert encrypted data:</p>

<pre><code>INSERT INTO so_42979606
    VALUES (1,
            DBMS_CRYPTO.ENCRYPT(UTL_I18N.STRING_TO_RAW('My clear data', 'AL32UTF8'),
                                pkg_so_42979606.cipher_type(),
                                UTL_ENCODE.BASE64_DECODE(UTL_I18N.STRING_TO_RAW('pMV3D4xhyfNxp3YyfLWzAErGcKkIjK3X6uc/WIeVTls=', 'AL32UTF8'))));
</code></pre>

<p>And retrieve the encrypted data in clear.</p>

<pre><code>SELECT id, UTL_I18N.RAW_TO_NCHAR(DBMS_CRYPTO.DECRYPT(data,
                                    pkg_so_42979606.cipher_type(),
                                    UTL_ENCODE.BASE64_DECODE(UTL_I18N.STRING_TO_RAW('pMV3D4xhyfNxp3YyfLWzAErGcKkIjK3X6uc/WIeVTls=', 'AL32UTF8'))),
                                 'AL32UTF8') data
    FROM so_42979606;

ID DATA
-- ----------------------
 1 My clear data
</code></pre>
","1202","<oracle><encryption><oracle11g><encryption-symmetric>","0","3","1","2017-03-23 18:29:13","","2","1","","","","2017-03-23 14:52:57",""
"31237567","nCipher Using KeySafe generated AES Key in java","<p>We have a <strong>AES Key</strong> generated from <strong>KeySafe Utility</strong> provided by nCipher. 
How can we use this Key to encrypt data? Can we Create a KeyStore from the KeySafe generated Key?</p>

<p>I have found sample by creating blank keystore and creating new key from java code and saving in the keystore, But could not find anything on the KeySafe. Generating new Key from the java code is not feasible for us.</p>
","<p>nCipher keys have an app type that identifies which one of the supported APIs they were generated for.  Keys for the JCE provider have app type <em>jcecsp</em>.  KeySafe can't generate <em>jcecsp</em> keys, so you probably have one of type <em>simple</em> or <em>pkcs11</em> or something.  You have several options: </p>

<ul>
<li>If you have a <em>pkcs11</em> key, you can use the SunPKCS11 Provider that comes with your JDK to access PKCS#11 slots as a KeyStore.  Google for this provider and contact Thales Support for some hints on configuration language.  </li>
<li>If your key is not <em>pkcs11</em> and you want to go the above route, you can retarget your key to <em>pkcs11</em>.  I actually don't know if KeySafe can do this but the command-line utility generatekey can.</li>
<li>You can use the Pure Java nCore and NFKM APIs to access your key directly regardless of app type.  If you have the CipherTools SDK you'll find ample sample code.</li>
<li>Once loaded by the native API, you can convert the loaded key Object to an JCE Key Object which you can store in an nCipher.sworld KeyStore.  There is an Interop example in the CipherTools sample code that hints at how you might do this.  </li>
<li>If the actual key is not of value to you (meaning you're willing to generate another one to get started) use Java's KeyTool to generate your key directly in the context of an nCipher.sworld KeyStore through the nCipherKM Provider.  The product manual shows how to correctly invoke KeyTool.  You don't even need the SDK for this.  </li>
</ul>

<p>Contact Thales Support if you run into any issues.</p>
","1202","<java><encryption-symmetric><nshield>","2","2","1","2015-08-13 09:30:06","31268360","0","3","","","","2015-07-06 03:57:15",""
"7227908","C Crypto Libraries Supporting HC-128/256?","<p>I have been searching for a while for a crypto library that I can used on linux to implement HC-128/256 encryption for using on network traffic. Unfortunately, support for this seems rather rare. Bouncy Castle supports it for C# and Java, but I need it for C. I have the source code for the HC-128/256 algorithms, but no examples on how to actually use it.</p>

<p>HC-256 Wikipedia:<br>
<a href=""http://en.wikipedia.org/wiki/HC-256"" rel=""nofollow"">http://en.wikipedia.org/wiki/HC-256</a></p>

<p>HC-128 Source Code and Article:<br>
<a href=""http://www.ecrypt.eu.org/stream/hcp3.html"" rel=""nofollow"">http://www.ecrypt.eu.org/stream/hcp3.html</a></p>

<p>Any help?</p>
","<p>I created a CRYPTOSOCKET class for encrypted comms. It also has a public ""encrypt"" and ""decrypt"" function. The socket part really just does encrypt/decrypt and calls send/recv for you. The ""socket"" functionality of it can be easily stripped out.</p>

<p>This is C++. If you want C, just look at the encrypt and decrypt functions of the CRYPTOSOCKET class and the constructor. Its very simple. Also, this is HC-256, not HC-128.</p>

<p>In a header ""crypto.hpp"".</p>

<pre><code>#include ""ecrypt-sync.h""

#ifndef CRYPTO_H
#define CRYPTO_H

class CRYPTOSOCKET{
  public:
/**
* Creates and initializes the structures required for encryption.
* 
* @param[in] socket
* The socket to send and receive data on. This should already be connected.
* @param[in] key
* The key used for encryption and decryption.
* @param[in] iv
* The initialization vector used by AES256 CBC mode. This can just be random bytes.
* 
* @see generateRandom
*/
CRYPTOSOCKET(int socket, unsigned char *key, unsigned char *iv);

~CRYPTOSOCKET();

/**
* A wrapper for sending data across the connection.
* 
* This encrypts the data into an intermediate buffer 
* prior to sending it across the wire.
*
* @see man send
*/
ssize_t send(const void *buf, size_t len, int flags);

/**
* A wrapper for receiving data across the connection.
* 
* This receives the encrypted data into an intermediate buffer,
* then decrypts it, and writes it to the output buffer.
* 
* @see man recv
*/
ssize_t recv(void *buf, size_t len, int flags);

/**
* Encrypts the specified data and places the encrypted data in the specified buffer.
*
* @param len Used as input for how long the plaintext is, then for output of how long the cipher text is.
* @param[in] plaintext The unencrypted data to encrypt.
* @param[out] ciphertext Where to place the encrypted data.
* 
* @returns A pointer to the ciphertext.
* 
* @see unsigned char *decrypt(unsigned char *ciphertext, unsigned int len, unsigned char *plaintext)
*/
unsigned char *encrypt(unsigned char *plaintext, unsigned int len, unsigned char *ciphertext);

/**
* Decrypts the specified data and places the unencrypted data into the specified buffer.
* 
* @param len Used as input for how long the ciphertext is and as output for how long the plaintext is.
* @param[in] ciphertext The encrypted data to unencrypt.
* @param[out] plaintext The buffer to place the unencrypted data in.
* 
* @returns A pointer to the plaintext.
*
* @see unsigned char *encrypt(unsigned char *plaintext, unsigned int len, unsigned char *ciphertext)
*/
unsigned char *decrypt(unsigned char *ciphertext, unsigned int len, unsigned char *plaintext);

int sock; /**&lt; The underlying socket that this sends and receives on. */

  private:
ECRYPT_ctx e_ctx; /**&lt; The ctx used for encryption. */
ECRYPT_ctx d_ctx; /**&lt; The ctx used for decryption. */
};

#endif
</code></pre>

<p>And inside ""crypto.cpp"":</p>

<pre><code>#include ""crypto.hpp""
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

CRYPTOSOCKET::CRYPTOSOCKET(int socket, unsigned char *key, unsigned char *iv){
  // Initialize the encryptor.
  ECRYPT_keysetup(&amp;e_ctx, key, 128, 128);
  ECRYPT_ivsetup(&amp;e_ctx, iv);

  // Initialize the decryptor.
  ECRYPT_keysetup(&amp;d_ctx, key, 128, 128);
  ECRYPT_ivsetup(&amp;d_ctx, iv);

  sock = socket;
};

CRYPTOSOCKET::~CRYPTOSOCKET(){
  // Nothing to do.
};

unsigned char *CRYPTOSOCKET::encrypt(unsigned char *plaintext, unsigned int len, unsigned char *ciphertext){
  ECRYPT_process_bytes(0, &amp;e_ctx, plaintext, ciphertext, len);
  return ciphertext;
}

unsigned char *CRYPTOSOCKET::decrypt(unsigned char *ciphertext, unsigned int len, unsigned char *plaintext){
  ECRYPT_process_bytes(1, &amp;d_ctx, ciphertext, plaintext, len);
  return plaintext;
}

ssize_t CRYPTOSOCKET::send(const void *buf, size_t len, int flags){
  unsigned char buffer[len];
  encrypt((unsigned char*)buf, len, buffer);
  return ::send(sock, buffer, len, MSG_WAITALL);
};

ssize_t CRYPTOSOCKET::recv(void *buf, size_t len, int flags){
  unsigned char buffer[len];
  int data = ::recv(sock, buffer, len, MSG_WAITALL);

  if(data &gt; 0)
decrypt(buffer, len, (unsigned char *)buf);

  return data;
};
/*******************************************************************
* ECRYPT crap below here....
*/

/* ecrypt-sync.c */

/* *** Please do not edit below here. *** */

//#include ""ecrypt-sync.h""

void ECRYPT_init(void){
};

void ECRYPT_process_bytes(
  int action,                 /* 0 = encrypt; 1 = decrypt; */
  ECRYPT_ctx* ctx, 
  const u8* input, 
  u8* output, 
  u32 msglen)                /* Message length in bytes. */ 
{
  u32 i, j, msglen32, keystreamword;

  msglen32 = msglen &gt;&gt; 2;

  for (i = 0; i &lt; msglen32; i++) { 
  keystreamword = generate(ctx);                 /*generate a 32-bit word*/
  for (j = 0; j &lt; 4; j++) {
      *output = *input ^ keystreamword;       /*encrypt one byte*/
      output += 1; 
      input +=1;
          keystreamword = keystreamword &gt;&gt; 8;
      }
  }  

  keystreamword = generate(ctx);
  for (i = 0; i &lt; (msglen &amp; 3); i++) {
      *output = *input ^ keystreamword;       /*encrypt one byte*/
  output += 1; 
  input +=1;
  keystreamword = keystreamword &gt;&gt; 8;
  }
}

void ECRYPT_ivsetup(
  ECRYPT_ctx* ctx, 
  const u8* iv)
{ 
u32 W[2560],i;

/* initialize the iv */
for (i = 0; i &lt; 8; i++) ctx-&gt;iv[i] = 0;
for (i = 0; (i &lt; ctx-&gt;ivsize) &amp; (i &lt; 32); i++) {
        ctx-&gt;iv[i &gt;&gt; 2] =  ctx-&gt;iv[i &gt;&gt; 2] | iv[i];
        ctx-&gt;iv[i &gt;&gt; 2] = ROTL32(ctx-&gt;iv[i &gt;&gt; 2],8);
}

/* setup the table P and Q */ 

    for (i = 0; i &lt; 8;  i++) W[i] = ctx-&gt;key[i];
    for (i = 8; i &lt; 16; i++) W[i] = ctx-&gt;iv[i-8];

    for (i = 16; i &lt; 2560; i++) W[i] = f2(W[i-2]) + W[i-7] + f1(W[i-15]) + W[i-16]+i; 

    for (i = 0; i &lt; 1024; i++)  ctx-&gt;P[i] = W[i+512];
    for (i = 0; i &lt; 1024; i++)  ctx-&gt;Q[i] = W[i+1536];

    ctx-&gt;counter2048 = 0;

  /* run the cipher 4096 steps before generating the output */
    for (i = 0; i &lt; 4096; i++)  generate(ctx);  
}

void ECRYPT_keysetup(
  ECRYPT_ctx* ctx, 
  const u8* key, 
  u32 keysize,                /* Key size in bits. */ 
  u32 ivsize)                 /* IV size in bits. */
{ 
  u32 i;  

  ctx-&gt;keysize = keysize &gt;&gt; 3;
  ctx-&gt;ivsize = ivsize &gt;&gt; 3;

  for (i = 0; i &lt; 8; i++) ctx-&gt;key[i] = 0;
  for (i = 0; (i &lt; ctx-&gt;keysize) &amp; (i &lt; 32); i++) {
        ctx-&gt;key[i &gt;&gt; 2] =  ctx-&gt;key[i &gt;&gt; 2] | key[i];
        ctx-&gt;key[i &gt;&gt; 2] = ROTL32(ctx-&gt;key[i &gt;&gt; 2],8);
  }

} /* initialize the key, save the iv size*/

u32 generate(ECRYPT_ctx* ctx) /*one step of the cipher*/
{
        u32 i,i3, i10, i12, i1023;
        u32 output;

        i   = ctx-&gt;counter2048 &amp; 0x3ff;
        i3  = (i - 3) &amp; 0x3ff;
        i10 = (i - 10) &amp; 0x3ff;
        i12 = (i - 12) &amp; 0x3ff;
        i1023 = (i - 1023) &amp; 0x3ff;

        if (ctx-&gt;counter2048 &lt; 1024) {
            ctx-&gt;P[i] = ctx-&gt;P[i] + ctx-&gt;P[i10] + (ROTR32(ctx-&gt;P[i3],10)^ROTR32(ctx-&gt;P[i1023],23))+ctx-&gt;Q[(ctx-&gt;P[i3]^ctx-&gt;P[i1023])&amp;0x3ff];
            output = h1(ctx,ctx-&gt;P[i12]) ^ ctx-&gt;P[i];
        }
        else {                                   
            ctx-&gt;Q[i] = ctx-&gt;Q[i] + ctx-&gt;Q[i10] + (ROTR32(ctx-&gt;Q[i3],10)^ROTR32(ctx-&gt;Q[i1023],23))+ctx-&gt;P[(ctx-&gt;Q[i3]^ctx-&gt;Q[i1023])&amp;0x3ff];
            output = h2(ctx, ctx-&gt;Q[i12]) ^ ctx-&gt;Q[i];
        }
        ctx-&gt;counter2048 = (ctx-&gt;counter2048+1) &amp; 0x7ff;
        return (output);
}

u32 h2(ECRYPT_ctx* ctx, u32 u) {
    u32 tem;            
    unsigned char a,b,c,d;          
    a = (unsigned char) ((u));      
    b = (unsigned char) ((u) &gt;&gt; 8); 
    c = (unsigned char) ((u) &gt;&gt; 16);    
    d = (unsigned char) ((u) &gt;&gt; 24);    
    tem = ctx-&gt;P[a]+ctx-&gt;P[256+b]+ctx-&gt;P[512+c]+ctx-&gt;P[768+d];
    return (tem);
}


u32 h1(ECRYPT_ctx* ctx, u32 u) {
    u32 tem;            
    unsigned char a,b,c,d;          
    a = (unsigned char) ((u));      
    b = (unsigned char) ((u) &gt;&gt; 8); 
    c = (unsigned char) ((u) &gt;&gt; 16);    
    d = (unsigned char) ((u) &gt;&gt; 24);    
    tem = ctx-&gt;Q[a]+ctx-&gt;Q[256+b]+ctx-&gt;Q[512+c]+ctx-&gt;Q[768+d];
    return (tem);
}



#ifdef ECRYPT_USES_DEFAULT_ALL_IN_ONE

/*
* Default implementation of all-in-one encryption/decryption of
* (short) packets.
*/

#ifdef ECRYPT_HAS_SINGLE_PACKET_FUNCTION

void ECRYPT_process_packet(
  int action,
  ECRYPT_ctx* ctx,
  const u8* iv,
  const u8* input,
  u8* output,
  u32 msglen)
{
  ECRYPT_ivsetup(ctx, iv);

#ifdef ECRYPT_HAS_SINGLE_BYTE_FUNCTION
  ECRYPT_process_bytes(action, ctx, input, output, msglen);
#else
  if (action == 0)
ECRYPT_encrypt_bytes(ctx, input, output, msglen);
  else
ECRYPT_decrypt_bytes(ctx, input, output, msglen);
#endif
}

#else

void ECRYPT_encrypt_packet(
  ECRYPT_ctx* ctx,
  const u8* iv,
  const u8* plaintext,
  u8* ciphertext,
  u32 msglen)
{
  ECRYPT_ivsetup(ctx, iv);
  ECRYPT_encrypt_bytes(ctx, plaintext, ciphertext, msglen);
}

void ECRYPT_decrypt_packet(
  ECRYPT_ctx* ctx,
  const u8* iv,
  const u8* ciphertext,
  u8* plaintext,
  u32 msglen)
{
  ECRYPT_ivsetup(ctx, iv);
  ECRYPT_decrypt_bytes(ctx, ciphertext, plaintext, msglen);
}

#endif

#endif
</code></pre>

<p>And inside ""ecrypt-sync.h"":</p>

<pre><code>/* ecrypt-sync.h */

/* 
* Header file for synchronous stream ciphers without authentication
* mechanism.
* 
* *** Please only edit parts marked with ""[edit]"". ***
*/

#include ""ecrypt-portable.h""

#ifndef ECRYPT_SYNC
#define ECRYPT_SYNC

/* ------------------------------------------------------------------------- */

/* Cipher parameters */

/* 
* The name of your cipher.
*/
#define ECRYPT_NAME ""ECRYPT Stream Cipher HC-256""    /* [edit] */ 

/*
* Specify which key and IV sizes are supported by your cipher. A user
* should be able to enumerate the supported sizes by running the
* following code:
*
* for (i = 0; ECRYPT_KEYSIZE(i) &lt;= ECRYPT_MAXKEYSIZE; ++i)
*   {
*     keysize = ECRYPT_KEYSIZE(i);
*
*     ...
*   }
*
* All sizes are in bits.
*/

#define ECRYPT_MAXKEYSIZE 256                 /* [edit] */
#define ECRYPT_KEYSIZE(i) (128 + (i)*32)      /* [edit] */

#define ECRYPT_MAXIVSIZE 256                  /* [edit] */
#define ECRYPT_IVSIZE(i) (64 + (i)*64)        /* [edit] */

/* ------------------------------------------------------------------------- */

/* Data structures */

/* 
* ECRYPT_ctx is the structure containing the representation of the
* internal state of your cipher. 
*/

typedef struct
{
  /* 
  * [edit]
  *
  * Put here all state variable needed during the encryption process.
  */
  u32 P[1024];
  u32 Q[1024];
  u32 counter2048;
  u32 key[8];
  u32 iv[8];
  u32 keysize;   /* key size in bytes */
  u32 ivsize;    /* iv size in bytes  */ 
} ECRYPT_ctx;

/* ------------------------------------------------------------------------- */

/* Mandatory functions */

/*
* Key and message independent initialization. This function will be
* called once when the program starts (e.g., to build expanded S-box
* tables).
*/
void ECRYPT_init(void);

/*
* Key setup. It is the user's responsibility to select the values of
* keysize and ivsize from the set of supported values specified
* above.
*/
void ECRYPT_keysetup(
  ECRYPT_ctx* ctx, 
  const u8* key, 
  u32 keysize,                /* Key size in bits. */ 
  u32 ivsize);                /* IV size in bits. */ 

/*
* IV setup. After having called ECRYPT_keysetup(), the user is
* allowed to call ECRYPT_ivsetup() different times in order to
* encrypt/decrypt different messages with the same key but different
* IV's.
*/
void ECRYPT_ivsetup(
  ECRYPT_ctx* ctx, 
  const u8* iv);

/*
* Encryption/decryption of arbitrary length messages.
*
* For efficiency reasons, the API provides two types of
* encrypt/decrypt functions. The ECRYPT_encrypt_bytes() function
* (declared here) encrypts byte strings of arbitrary length, while
* the ECRYPT_encrypt_blocks() function (defined later) only accepts
* lengths which are multiples of ECRYPT_BLOCKLENGTH.
* 
* The user is allowed to make multiple calls to
* ECRYPT_encrypt_blocks() to incrementally encrypt a long message,
* but he is NOT allowed to make additional encryption calls once he
* has called ECRYPT_encrypt_bytes() (unless he starts a new message
* of course). For example, this sequence of calls is acceptable:
*
* ECRYPT_keysetup();
*
* ECRYPT_ivsetup();
* ECRYPT_encrypt_blocks();
* ECRYPT_encrypt_blocks();
* ECRYPT_encrypt_bytes();
*
* ECRYPT_ivsetup();
* ECRYPT_encrypt_blocks();
* ECRYPT_encrypt_blocks();
*
* ECRYPT_ivsetup();
* ECRYPT_encrypt_bytes();
* 
* The following sequence is not:
*
* ECRYPT_keysetup();
* ECRYPT_ivsetup();
* ECRYPT_encrypt_blocks();
* ECRYPT_encrypt_bytes();
* ECRYPT_encrypt_blocks();
*/

/*
* By default ECRYPT_encrypt_bytes() and ECRYPT_decrypt_bytes() are
* defined as macros which redirect the call to a single function
* ECRYPT_process_bytes(). If you want to provide separate encryption
* and decryption functions, please undef
* ECRYPT_HAS_SINGLE_BYTE_FUNCTION.
*/
#define ECRYPT_HAS_SINGLE_BYTE_FUNCTION  1  /* [edit] */
#ifdef ECRYPT_HAS_SINGLE_BYTE_FUNCTION

#define ECRYPT_encrypt_bytes(ctx, plaintext, ciphertext, msglen)   \
  ECRYPT_process_bytes(0, ctx, plaintext, ciphertext, msglen)

#define ECRYPT_decrypt_bytes(ctx, ciphertext, plaintext, msglen)   \
  ECRYPT_process_bytes(1, ctx, ciphertext, plaintext, msglen)

void ECRYPT_process_bytes(
  int action,                 /* 0 = encrypt; 1 = decrypt; */
  ECRYPT_ctx* ctx, 
  const u8* input, 
  u8* output, 
  u32 msglen);                /* Message length in bytes. */ 

#else

void ECRYPT_encrypt_bytes(
  ECRYPT_ctx* ctx, 
  const u8* plaintext, 
  u8* ciphertext, 
  u32 msglen);                /* Message length in bytes. */ 

void ECRYPT_decrypt_bytes(
  ECRYPT_ctx* ctx, 
  const u8* ciphertext, 
  u8* plaintext, 
  u32 msglen);                /* Message length in bytes. */ 

#endif

/* ------------------------------------------------------------------------- */

/* Optional features */

/* 
* For testing purposes it can sometimes be useful to have a function
* which immediately generates keystream without having to provide it
* with a zero plaintext. If your cipher cannot provide this function
* (e.g., because it is not strictly a synchronous cipher), please
* reset the ECRYPT_GENERATES_KEYSTREAM flag.
*/

#define ECRYPT_GENERATES_KEYSTREAM
#ifdef ECRYPT_GENERATES_KEYSTREAM

void ECRYPT_keystream_bytes(
  ECRYPT_ctx* ctx,
  u8* keystream,
  u32 length);                /* Length of keystream in bytes. */

#endif

/* ------------------------------------------------------------------------- */

/* Optional optimizations */

/* 
* By default, the functions in this section are implemented using
* calls to functions declared above. However, you might want to
* implement them differently for performance reasons.
*/

/*
* All-in-one encryption/decryption of (short) packets.
*
* The default definitions of these functions can be found in
* ""ecrypt-sync.c"". If you want to implement them differently, please
* undef the ECRYPT_USES_DEFAULT_ALL_IN_ONE flag.
*/
#define ECRYPT_USES_DEFAULT_ALL_IN_ONE        /* [edit] */

/*
* Undef ECRYPT_HAS_SINGLE_PACKET_FUNCTION if you want to provide
* separate packet encryption and decryption functions.
*/
#define ECRYPT_HAS_SINGLE_PACKET_FUNCTION     /* [edit] */
#ifdef ECRYPT_HAS_SINGLE_PACKET_FUNCTION

#define ECRYPT_encrypt_packet(                                        \
ctx, iv, plaintext, ciphertext, mglen)                            \
  ECRYPT_process_packet(0,                                            \
ctx, iv, plaintext, ciphertext, mglen)

#define ECRYPT_decrypt_packet(                                        \
ctx, iv, ciphertext, plaintext, mglen)                            \
  ECRYPT_process_packet(1,                                            \
ctx, iv, ciphertext, plaintext, mglen)

void ECRYPT_process_packet(
  int action,                 /* 0 = encrypt; 1 = decrypt; */
  ECRYPT_ctx* ctx, 
  const u8* iv,
  const u8* input, 
  u8* output, 
  u32 msglen);

#else

void ECRYPT_encrypt_packet(
  ECRYPT_ctx* ctx, 
  const u8* iv,
  const u8* plaintext, 
  u8* ciphertext, 
  u32 msglen);

void ECRYPT_decrypt_packet(
  ECRYPT_ctx* ctx, 
  const u8* iv,
  const u8* ciphertext, 
  u8* plaintext, 
  u32 msglen);

#endif

/*
* Encryption/decryption of blocks.
* 
* By default, these functions are defined as macros. If you want to
* provide a different implementation, please undef the
* ECRYPT_USES_DEFAULT_BLOCK_MACROS flag and implement the functions
* declared below.
*/

#define ECRYPT_BLOCKLENGTH 4                  /* [edit] */

#define ECRYPT_USES_DEFAULT_BLOCK_MACROS      /* [edit] */
#ifdef ECRYPT_USES_DEFAULT_BLOCK_MACROS

#define ECRYPT_encrypt_blocks(ctx, plaintext, ciphertext, blocks)  \
  ECRYPT_encrypt_bytes(ctx, plaintext, ciphertext,                 \
(blocks) * ECRYPT_BLOCKLENGTH)

#define ECRYPT_decrypt_blocks(ctx, ciphertext, plaintext, blocks)  \
  ECRYPT_decrypt_bytes(ctx, ciphertext, plaintext,                 \
(blocks) * ECRYPT_BLOCKLENGTH)

#ifdef ECRYPT_GENERATES_KEYSTREAM

#define ECRYPT_keystream_blocks(ctx, keystream, blocks)            \
  ECRYPT_keystream_bytes(ctx, keystream,                           \
(blocks) * ECRYPT_BLOCKLENGTH)

#endif

#else

/*
* Undef ECRYPT_HAS_SINGLE_BLOCK_FUNCTION if you want to provide
* separate block encryption and decryption functions.
*/
#define ECRYPT_HAS_SINGLE_BLOCK_FUNCTION      /* [edit] */
#ifdef ECRYPT_HAS_SINGLE_BLOCK_FUNCTION

#define ECRYPT_encrypt_blocks(ctx, plaintext, ciphertext, blocks)     \
  ECRYPT_process_blocks(0, ctx, plaintext, ciphertext, blocks)

#define ECRYPT_decrypt_blocks(ctx, ciphertext, plaintext, blocks)     \
  ECRYPT_process_blocks(1, ctx, ciphertext, plaintext, blocks)

void ECRYPT_process_blocks(
  int action,                 /* 0 = encrypt; 1 = decrypt; */
  ECRYPT_ctx* ctx, 
  const u8* input, 
  u8* output, 
  u32 blocks);                /* Message length in blocks. */

#else

void ECRYPT_encrypt_blocks(
  ECRYPT_ctx* ctx, 
  const u8* plaintext, 
  u8* ciphertext, 
  u32 blocks);                /* Message length in blocks. */ 

void ECRYPT_decrypt_blocks(
  ECRYPT_ctx* ctx, 
  const u8* ciphertext, 
  u8* plaintext, 
  u32 blocks);                /* Message length in blocks. */ 

#endif

#ifdef ECRYPT_GENERATES_KEYSTREAM

void ECRYPT_keystream_blocks(
  ECRYPT_ctx* ctx,
  u8* keystream,
  u32 blocks);                /* Keystream length in blocks. */ 

#endif

#endif

/*
* If your cipher can be implemented in different ways, you can use
* the ECRYPT_VARIANT parameter to allow the user to choose between
* them at compile time (e.g., gcc -DECRYPT_VARIANT=3 ...). Please
* only use this possibility if you really think it could make a
* significant difference and keep the number of variants
* (ECRYPT_MAXVARIANT) as small as possible (definitely not more than
* 10). Note also that all variants should have exactly the same
* external interface (i.e., the same ECRYPT_BLOCKLENGTH, etc.). 
*/
#define ECRYPT_MAXVARIANT 1                   /* [edit] */

#ifndef ECRYPT_VARIANT
#define ECRYPT_VARIANT 1
#endif

#if (ECRYPT_VARIANT &gt; ECRYPT_MAXVARIANT)
#error this variant does not exist
#endif

/* ------------------------------------------------------------------------- */

#endif


/* ===========================================================================

        Added functions:    HC-256 Mandatory functions 

============================================================================== */

#define f1(x)    (ROTR32((x),7) ^ ROTR32((x),18) ^ ((x) &gt;&gt; 3))
#define f2(x)    (ROTR32((x),17) ^ ROTR32((x),19) ^ ((x) &gt;&gt; 10))

/*




void ECRYPT_keysetup(
  ECRYPT_ctx* ctx, 
  const u8* key, 
  u32 keysize,                // Key size in bits. 
  u32 ivsize);                // IV size in bits. 

void ECRYPT_ivsetup(
  ECRYPT_ctx* ctx, 
  const u8* iv);

void ECRYPT_process_bytes(
  int action,                 // 0 = encrypt; 1 = decrypt; 
  ECRYPT_ctx* ctx, 
  const u8* input, 
  u8* output, 
  u32 msglen);                // Message length in bytes. 

*/

void ECRYPT_init(void);
u32 h1(ECRYPT_ctx* ctx, u32 u);
u32 h2(ECRYPT_ctx* ctx, u32 u);
u32 generate(ECRYPT_ctx* ctx);
</code></pre>

<p>Then use ""ecrypt-machine.h"", ""ecrypt-config.h"", and ""ecrypt-portable.h"" from here: <a href=""http://www.ecrypt.eu.org/stream/p3ciphers/hc/hc256_p3source.zip"" rel=""nofollow"">http://www.ecrypt.eu.org/stream/p3ciphers/hc/hc256_p3source.zip</a></p>

<p>Here is a quick application to test it. You will have to create the ""generateRandom"" function, or just make up some random bytes lol.</p>

<pre><code>#include ""crypto.hpp""

int main(int argc, char **argv){
  CRYPTOSOCKET *socket;
  unsigned char key[32];
  unsigned char iv[32];
  unsigned char buf1[1024];
  unsigned char buf2[1024];
  unsigned char buf3[1024];
  char *teststring = ""This is a test.\n"";

  // Generate a random key
  generateRandom(key, 32);

  // Generate a random IV
  generateRandom(iv, 32);

  // Create a new cryptosocket with that key and iv.
  socket = new CRYPTOSOCKET(0, key, iv);

  // Copy teststring into buffer 1
  sprintf((char*)buf1,teststring);

  // Encrypt buffer 1 and placed the encrypted contents into buffer 2.
  socket-&gt;encrypt(buf1,strlen(teststring), buf2);

  // Decrypt buffer 2 into buffer 3.
  socket-&gt;decrypt(buf2, strlen(teststring), buf3);

  // Print out whats in buffer 3.
  printf((char*)buf3);

}
</code></pre>
","1181","<c><encryption><encryption-symmetric>","2","2","1","2014-11-02 04:01:33","7248266","0","","2509848","","2014-11-02 04:01:33","2011-08-29 08:39:30",""
"12301485","RsaProtectedConfigurationProvider implementation vs RSACryptoServiceProvider c#","<p>If <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">RSACryptoServiceProvider</a> cannot Encrypt data larger than it's <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.keysize.aspx"" rel=""nofollow noreferrer"">KeySize</a>, how <a href=""http://msdn.microsoft.com/en-us/library/system.configuration.rsaprotectedconfigurationprovider.aspx"" rel=""nofollow noreferrer"">RsaProtectedConfigurationProvider</a> is implemented in the .Net framework?</p>

<p>I am working on a utility that is going to be used to encrypt/decrypt some sensitive information. My two encryption provider options are DPAPI and RSA, while DPAPI not suited for web farm kind of environment, RSA is fits because of the Export/Import options with a KeyContainer. This is a stand alone application running on a workstation.</p>

<p>As I am aware that Asymmetric algorithms are not designed for large data, I just tried encrypting a string of length over 400K using the code below and it works well.</p>

<pre><code>        if (!section.SectionInformation.IsProtected)
        {
            section.SectionInformation.ProtectSection(""RSAProtectedConfigurationProvider"");
            section.SectionInformation.ForceSave = true;
            config.Save(ConfigurationSaveMode.Full);
        }
</code></pre>

<p>Definitely this implies that more things are happening behind the scenes apart from the export import key options in aspnet_regiis.exe. </p>

<p>My understanding:</p>

<ol>
<li><p>we encrypt <em>myapp.exe.config</em> with <em>RsaProtectedConfigurationProvider</em>, provide a key container name <em>myrsakeycontainer</em>, and export the public and private keys to an xml file <em>myrsakeyfile.xml</em>.</p></li>
<li><p>If we want <em>myapp.exe.config</em> to be decrypted in another computer, we import they keypair from <em>myrsakeyfile.xml</em> with a container named <em>myrsakeycontainer</em>.</p></li>
</ol>

<p>this works well. I can achieve the same thing in my project via <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">RSACryptoServiceProvider</a>. But I can't handle data that larger than the key size that 
  <code>new RSACryptoServiceProvider(cspParameters)</code>
generated for me.</p>

<ul>
<li>I want to be able to decrypt huge data (just in case) just the way
<a href=""http://msdn.microsoft.com/en-us/library/system.configuration.rsaprotectedconfigurationprovider.aspx"" rel=""nofollow noreferrer"">RsaProtectedConfigurationProvider</a> does.</li>
<li>Yes I could use a <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rijndaelmanaged.aspx"" rel=""nofollow noreferrer"">RijndaelManaged</a> (my favorite) for actual 
encryption and for the symmetric key transport (export/import) I
could use the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">RSACryptoServiceProvider</a>. This leaves me in a
situation that If I want to export/import the symmetric key, I should
first encrypt it with the public key or RSA, import it to another
machine, decrypt with the private key of RSA. Which is export the RSA
key pair along with the encrypted symmetric key. </li>
<li><p>But, when I export RSA key pair used by
<a href=""http://msdn.microsoft.com/en-us/library/system.configuration.rsaprotectedconfigurationprovider.aspx"" rel=""nofollow noreferrer"">RsaProtectedConfigurationProvider</a> via aspnet_regiis.exe, I
believe that it exports only the public/private key pair in an xml
file and no other information (like the symmetric key information).</p></li>
<li><p>So, with just the RSA key pair, how does
<a href=""http://msdn.microsoft.com/en-us/library/system.configuration.rsaprotectedconfigurationprovider.aspx"" rel=""nofollow noreferrer"">RsaProtectedConfigurationProvider</a> manage to derypt (huge - over
400K chars in my case) information that was encrypted on another
computer? <strong>In cases it uses a symmetric algorithm (perhaps?!) to
encrypt information, how is that symmetric key exported/imported to another
computer for decryption? Is that symmetric key part of the RSA key container exported via aspnet_regiis.exe or is the symmetric key is contrived dynamic based on an algorithm?</strong></p></li>
<li><p>I could get away with a Rijndael, whose key is encrypeted with an RSA
key pair and I can export/import both the RSA key pair and the
Rijndael symmetric key to another computer. (which I have done in the past)</p>

<p>I am interested to know what is used inside
<a href=""http://msdn.microsoft.com/en-us/library/system.configuration.rsaprotectedconfigurationprovider.aspx"" rel=""nofollow noreferrer"">RsaProtectedConfigurationProvider</a>. </p></li>
</ul>

<p>Any theories? concepts? links? recommendations? please..</p>

<blockquote>
  <p>Similar Question - <a href=""https://stackoverflow.com/questions/4782375/what-algorithms-are-used-by-rsaprotectedconfigurationprovider-in-web-config-ency"">What algorithms are used by RSAProtectedConfigurationProvider in web.config encyrption?</a></p>
</blockquote>
","<p>The <em>encrypted</em> symmetric key is stored in the XML <strong>alongside</strong> the encrypted configuration information that the symmetric key has encrypted.</p>

<p>If you use Reflector to look at the code, what it does is load the XML node and use the <em>asymmetric</em> RSA private key to decrypt a <em>symmetric</em> key stored within the XML node itself.</p>

<p>The function that actually does this magic is here:</p>

<p>public virtual SymmetricAlgorithm GetDecryptionKey(EncryptedData encryptedData, string symmetricAlgorithmUri);</p>

<p>Declaring Type: System.Security.Cryptography.Xml.EncryptedXml 
Assembly: System.Security, Version=2.0.0.0 </p>

<p>See the code around  </p>

<pre><code>this.m_document.SelectNodes(""//enc:EncryptedKey"", nsmgr);
</code></pre>

<p>This blog post has a nice writeup about how you pair Asymmetric and Symmetric algorithms in real-world practice: <a href=""http://pages.infinit.net/ctech/20031101-0151.html"" rel=""nofollow"">http://pages.infinit.net/ctech/20031101-0151.html</a></p>
","1171","<c#><windows><encryption-asymmetric><encryption-symmetric>","0","1","1","2012-12-12 23:50:05","13850657","0","1","-1","","2017-05-23 12:12:14","2012-09-06 13:44:08",""
"12285933","Translating Delphi code to C# (Blowfish)","<p>I'm not a develloper Delphi, but i must transform this delphi code to C#:</p>

<pre><code>Function EncodeClave(Clave:String):String;
 var
   R: String;
   FStringFormat:Integer;
 begin
   FStringFormat:=4196;
 with TCipher_Blowfish.Create('CLAVE', nil) do
  try
    Mode := TCipherMode(0);
    R := CodeString(Clave, paEncode, FStringFormat);
    Result := R;
  finally
    Free;
  end;
 end;
</code></pre>

<p>I have found the following sites in my research:</p>

<p><a href=""http://www.bouncycastle.org/csharp/"" rel=""nofollow"">http://www.bouncycastle.org/csharp/</a></p>

<p>and</p>

<p><a href=""http://www.schneier.com/code/blowfish.cs"" rel=""nofollow"">http://www.schneier.com/code/blowfish.cs</a></p>

<p>I don't understand the line :</p>

<pre><code>FStringFormat:=4196;
</code></pre>

<p>Why is there a predefine size of the format?  Is there another transformation with blowfish (DECUtil) ?</p>

<p>and the mode :</p>

<pre><code>Mode := TCipherMode(0);
</code></pre>

<p>in the delphi source of Cipher </p>

<blockquote>
  <p>(http://www.koders.com/delphi/fidE1F5EC890EF9FD7D5FFEB524898B00BC8403B799.aspx)
  the parameter 'mode' have the following order :
  cmCTS, cmCBC, cmCFB, cmOFB, cmECB, cmCTSMAC, cmCBCMAC, cmCFBMAC</p>
</blockquote>

<p>So I suppose in delphi the mode 0 is cmCTS ... but in reality I don't know.</p>

<p>an example of result : user : ADMIN pass : ADMIN ---> pass : fAtP3sk=</p>
","<pre><code>FStringFormat:=4196;
</code></pre>

<p>This is purely just assigning a value to a variable, <code>FStringFormat</code> is an integer value that was declared and now you are giving it a value. </p>
","1164","<c#><delphi><encryption><blowfish><encryption-symmetric>","1","0","5","2012-09-07 01:38:41","12286637","0","","1048830","","2012-09-05 17:02:46","2012-09-05 16:33:28",""
"12285933","Translating Delphi code to C# (Blowfish)","<p>I'm not a develloper Delphi, but i must transform this delphi code to C#:</p>

<pre><code>Function EncodeClave(Clave:String):String;
 var
   R: String;
   FStringFormat:Integer;
 begin
   FStringFormat:=4196;
 with TCipher_Blowfish.Create('CLAVE', nil) do
  try
    Mode := TCipherMode(0);
    R := CodeString(Clave, paEncode, FStringFormat);
    Result := R;
  finally
    Free;
  end;
 end;
</code></pre>

<p>I have found the following sites in my research:</p>

<p><a href=""http://www.bouncycastle.org/csharp/"" rel=""nofollow"">http://www.bouncycastle.org/csharp/</a></p>

<p>and</p>

<p><a href=""http://www.schneier.com/code/blowfish.cs"" rel=""nofollow"">http://www.schneier.com/code/blowfish.cs</a></p>

<p>I don't understand the line :</p>

<pre><code>FStringFormat:=4196;
</code></pre>

<p>Why is there a predefine size of the format?  Is there another transformation with blowfish (DECUtil) ?</p>

<p>and the mode :</p>

<pre><code>Mode := TCipherMode(0);
</code></pre>

<p>in the delphi source of Cipher </p>

<blockquote>
  <p>(http://www.koders.com/delphi/fidE1F5EC890EF9FD7D5FFEB524898B00BC8403B799.aspx)
  the parameter 'mode' have the following order :
  cmCTS, cmCBC, cmCFB, cmOFB, cmECB, cmCTSMAC, cmCBCMAC, cmCFBMAC</p>
</blockquote>

<p>So I suppose in delphi the mode 0 is cmCTS ... but in reality I don't know.</p>

<p>an example of result : user : ADMIN pass : ADMIN ---> pass : fAtP3sk=</p>
","<pre><code>var 
  FStringFormat: Integer; 
begin 
  FStringFormat := 4196; 
</code></pre>

<p>is the same as </p>

<pre><code>Int32 FStringFormat; 
FStringFormat = 4196; 
</code></pre>

<p>in C#.</p>

<p><code>FMode := TCipherMode(0);</code>' is a typecase of an integer to an enumeration value. Delphi enumerations are pretty much the same as those in C#; by default, they start at <code>0</code>, so an enumeration of</p>

<pre><code>type
  TCipherMode = ( cmCTS, cmCBC, cmCFB, cmOFB, cmECB, cmCTSMAC, cmCBCMAC, cmCFBMAC);
</code></pre>

<p>would mean that <code>cmCTS</code> has a numeric value of <code>0</code>, <code>cmCBC</code> 1, and so forth.</p>

<p>The code should have properly been written</p>

<pre><code>FMode := cmCTS;
</code></pre>

<p>which is not only less characters to type, but is much clearer for those reading it in the future (like you). :-)</p>
","1164","<c#><delphi><encryption><blowfish><encryption-symmetric>","1","1","5","2012-09-07 01:38:41","12286637","0","","1048830","","2012-09-05 17:02:46","2012-09-05 16:33:28",""
"12285933","Translating Delphi code to C# (Blowfish)","<p>I'm not a develloper Delphi, but i must transform this delphi code to C#:</p>

<pre><code>Function EncodeClave(Clave:String):String;
 var
   R: String;
   FStringFormat:Integer;
 begin
   FStringFormat:=4196;
 with TCipher_Blowfish.Create('CLAVE', nil) do
  try
    Mode := TCipherMode(0);
    R := CodeString(Clave, paEncode, FStringFormat);
    Result := R;
  finally
    Free;
  end;
 end;
</code></pre>

<p>I have found the following sites in my research:</p>

<p><a href=""http://www.bouncycastle.org/csharp/"" rel=""nofollow"">http://www.bouncycastle.org/csharp/</a></p>

<p>and</p>

<p><a href=""http://www.schneier.com/code/blowfish.cs"" rel=""nofollow"">http://www.schneier.com/code/blowfish.cs</a></p>

<p>I don't understand the line :</p>

<pre><code>FStringFormat:=4196;
</code></pre>

<p>Why is there a predefine size of the format?  Is there another transformation with blowfish (DECUtil) ?</p>

<p>and the mode :</p>

<pre><code>Mode := TCipherMode(0);
</code></pre>

<p>in the delphi source of Cipher </p>

<blockquote>
  <p>(http://www.koders.com/delphi/fidE1F5EC890EF9FD7D5FFEB524898B00BC8403B799.aspx)
  the parameter 'mode' have the following order :
  cmCTS, cmCBC, cmCFB, cmOFB, cmECB, cmCTSMAC, cmCBCMAC, cmCFBMAC</p>
</blockquote>

<p>So I suppose in delphi the mode 0 is cmCTS ... but in reality I don't know.</p>

<p>an example of result : user : ADMIN pass : ADMIN ---> pass : fAtP3sk=</p>
","<p>The value of the <code>FStringFormat</code> variable (4196) is equal to use the <code>fmtMIME64</code> const defined in the <em><a href=""http://www.koders.com/delphi/fid3A096DAFAC89AB57E0A0C6D0E32761283D0516D7.aspx"" rel=""nofollow"">DECUtil</a></em> unit which is defined like so</p>

<pre><code> fmtMIME64      = $1064;     // MIME Base 64
</code></pre>

<p>This value is used to format the string passed to the CodeString method. in this case the line</p>

<pre><code> R := CodeString(Clave, paEncode, FStringFormat);
</code></pre>

<p>returns the value of the <code>Clave</code> variable in the MIME Base 64 format.</p>

<p>Now about the line</p>

<p>Mode := TCipherMode(0);</p>

<p>you are setting the the Mode property to the first value of the enumeration.</p>

<pre><code> TCipherMode = (cmCTS, cmCBC, cmCFB, cmOFB, cmECB, cmCTSMAC, cmCBCMAC, cmCFBMAC);
</code></pre>

<p>in this case is equivalent to write.</p>

<pre><code>Mode := cmCTS;
</code></pre>
","1164","<c#><delphi><encryption><blowfish><encryption-symmetric>","1","2","5","2012-09-07 01:38:41","12286637","0","","1048830","","2012-09-05 17:02:46","2012-09-05 16:33:28",""
"12285933","Translating Delphi code to C# (Blowfish)","<p>I'm not a develloper Delphi, but i must transform this delphi code to C#:</p>

<pre><code>Function EncodeClave(Clave:String):String;
 var
   R: String;
   FStringFormat:Integer;
 begin
   FStringFormat:=4196;
 with TCipher_Blowfish.Create('CLAVE', nil) do
  try
    Mode := TCipherMode(0);
    R := CodeString(Clave, paEncode, FStringFormat);
    Result := R;
  finally
    Free;
  end;
 end;
</code></pre>

<p>I have found the following sites in my research:</p>

<p><a href=""http://www.bouncycastle.org/csharp/"" rel=""nofollow"">http://www.bouncycastle.org/csharp/</a></p>

<p>and</p>

<p><a href=""http://www.schneier.com/code/blowfish.cs"" rel=""nofollow"">http://www.schneier.com/code/blowfish.cs</a></p>

<p>I don't understand the line :</p>

<pre><code>FStringFormat:=4196;
</code></pre>

<p>Why is there a predefine size of the format?  Is there another transformation with blowfish (DECUtil) ?</p>

<p>and the mode :</p>

<pre><code>Mode := TCipherMode(0);
</code></pre>

<p>in the delphi source of Cipher </p>

<blockquote>
  <p>(http://www.koders.com/delphi/fidE1F5EC890EF9FD7D5FFEB524898B00BC8403B799.aspx)
  the parameter 'mode' have the following order :
  cmCTS, cmCBC, cmCFB, cmOFB, cmECB, cmCTSMAC, cmCBCMAC, cmCFBMAC</p>
</blockquote>

<p>So I suppose in delphi the mode 0 is cmCTS ... but in reality I don't know.</p>

<p>an example of result : user : ADMIN pass : ADMIN ---> pass : fAtP3sk=</p>
","<p>Looking at source for the Delphi Object <a href=""http://www.koders.com/delphi/fid2115DA85B11A0ED7F92F8CA29DD530C16FC9C96D.aspx"" rel=""nofollow"">TCipher_Blowfish</a> there are some constants declared for the String Format.</p>

<pre><code>fmtMIME64      = $1064;     // MIME Base 64
</code></pre>

<p>A ""$"" defines a hex number in delphi so $1064 = 4196 being used in your sample code.  </p>

<p>TCipherMode(0);</p>

<p>TCipherMode is a reference to the following enumerated type:</p>

<pre><code>TCipherMode = (cmCTS, cmCBC, cmCFB, cmOFB, cmECB, cmCTSMAC, cmCBCMAC, cmCFBMAC);
</code></pre>

<p>So TCipherMode(0) = cmCTS</p>

<p>The code is a little easier to understand if you make those replacements:</p>

<pre><code>Function EncodeClave(InputString:String):String;
 var
   BlowfishObj: TCipher_Blowfish;
 begin

  BlowfishObj := TCipher_Blowfish.Create('CLAVE', nil);
  try

    BlowfishObj.Mode := cmCTS;  // (Cipher Text Stealing)
    Result := BlowfishObj.CodeString(InputString, paEncode, fmtMIME64);

  finally
    BlowfishObj.Free;
  end;
 end;
</code></pre>
","1164","<c#><delphi><encryption><blowfish><encryption-symmetric>","1","2","5","2012-09-07 01:38:41","12286637","0","","1048830","","2012-09-05 17:02:46","2012-09-05 16:33:28",""
"12285933","Translating Delphi code to C# (Blowfish)","<p>I'm not a develloper Delphi, but i must transform this delphi code to C#:</p>

<pre><code>Function EncodeClave(Clave:String):String;
 var
   R: String;
   FStringFormat:Integer;
 begin
   FStringFormat:=4196;
 with TCipher_Blowfish.Create('CLAVE', nil) do
  try
    Mode := TCipherMode(0);
    R := CodeString(Clave, paEncode, FStringFormat);
    Result := R;
  finally
    Free;
  end;
 end;
</code></pre>

<p>I have found the following sites in my research:</p>

<p><a href=""http://www.bouncycastle.org/csharp/"" rel=""nofollow"">http://www.bouncycastle.org/csharp/</a></p>

<p>and</p>

<p><a href=""http://www.schneier.com/code/blowfish.cs"" rel=""nofollow"">http://www.schneier.com/code/blowfish.cs</a></p>

<p>I don't understand the line :</p>

<pre><code>FStringFormat:=4196;
</code></pre>

<p>Why is there a predefine size of the format?  Is there another transformation with blowfish (DECUtil) ?</p>

<p>and the mode :</p>

<pre><code>Mode := TCipherMode(0);
</code></pre>

<p>in the delphi source of Cipher </p>

<blockquote>
  <p>(http://www.koders.com/delphi/fidE1F5EC890EF9FD7D5FFEB524898B00BC8403B799.aspx)
  the parameter 'mode' have the following order :
  cmCTS, cmCBC, cmCFB, cmOFB, cmECB, cmCTSMAC, cmCBCMAC, cmCFBMAC</p>
</blockquote>

<p>So I suppose in delphi the mode 0 is cmCTS ... but in reality I don't know.</p>

<p>an example of result : user : ADMIN pass : ADMIN ---> pass : fAtP3sk=</p>
","<p>in first thank for all answers !!</p>

<p>I don't know if i can post the solution here, but if maybe i can help anyone ...</p>

<p>finaly i have transformed the delphi code to DLL like this :</p>

<pre><code>library crypto;

   uses
  Cipher in '\Source\Cipher.pas',
  DECUtil in '\Source\DECUtil.pas',
  Hash in '\Source\Hash.pas',
  SysUtils;

{$R *.res}

Function EncodeClave(Clave:String):String;
var
  R: String;
  FStringFormat:Integer;
begin
  FStringFormat:=4196;
  with TCipher_Blowfish.Create('CLAVE', nil) do
  try
    Mode := TCipherMode(0);
    R := CodeString(Clave, paEncode, FStringFormat);
    Result := R;
  finally
    Free;
  end;
end;

function MsgEncode(pIn: PWideChar; out pOut: PWideChar): LongBool; stdcall;
var
  sOut: string;
  BuffSize: Integer;
begin
  sOut := EncodeClave(pIn);
  BuffSize := SizeOf(Char)*(Length(sOut)+1);
  GetMem(pOut, BuffSize);
  FillChar(pOut^, BuffSize, 0);
  Result := Length(sOut)&gt;0;
  if Result then
    Move(PChar(sOut)^, pOut^, BuffSize);
end;

procedure BlockFree(p: Pointer); stdcall;
begin
  FreeMem(p);
end;

exports
  MsgEncode,
  BlockFree;

begin
end.
</code></pre>

<p>and use this DLL in C# like this :</p>

<pre><code>class Program
    {
        [DllImport(""crypto.dll"", CharSet = CharSet.Unicode, CallingConvention = CallingConvention.StdCall)]
        [return: MarshalAs(UnmanagedType.Bool)]
        public static extern bool MsgEncode(string pIn, out IntPtr pOut);

        [DllImport(""crypto.dll"", CharSet = CharSet.Unicode, CallingConvention = CallingConvention.StdCall)]
        public static extern void BlockFree(IntPtr p);

        static void Main(string[] args)
        {
            IntPtr pOut;

            string encode = ""admin"";
            string encoded = """";


            if (MsgEncode(encode, out pOut))
                encoded = Marshal.PtrToStringAnsi(pOut);
            BlockFree(pOut);

            Console.WriteLine(""String Encoded '"" + encode + ""' : "" + encoded);
        }
</code></pre>

<p>it's not super clean but do the job ...</p>
","1164","<c#><delphi><encryption><blowfish><encryption-symmetric>","1","0","5","2012-09-07 01:38:41","12286637","0","","1048830","","2012-09-05 17:02:46","2012-09-05 16:33:28",""
"22594827","Blowfish encryption algorithm explained","<p>I have hard times implementing <a href=""http://en.wikipedia.org/wiki/Blowfish_%28cipher%29#C.2B.2B_implementation"" rel=""nofollow"">blowfish encryption algorythm</a>. </p>

<p>Could someone explain to me,
if this is the function where the encrypting happens: </p>

<pre><code> void encrypt (uint32_t &amp; L, uint32_t &amp; R) {
    for (int i=0 ; i&lt;16 ; i += 2) {
       L ^= P[i];
       R ^= f(L);
       R ^= P[i+1];
       L ^= f(R);
    }
    L ^= P[16];
    R ^= P[17];
    swap (L, R);
 }
</code></pre>

<p>so how would a function like this would look like: </p>

<pre><code>/**
*
* @param string text this is the text to be encrypted
* @return string this is encrypted text 
*/
string EncryptBlowfish(string text){
    //something happens here
}
</code></pre>
","<p>Generally, you should review the existing encryption library interfaces and the theoretical description of Blowfish to get a better understanding how these implementation have been done before, including the design of the interface. To design a good interface you need to source a decent a number of use cases for your code, and in the absence of that data sample, unique to your case, you should fall back to the already common wisdom.</p>

<p>For instance, take a look at <a href=""http://www.cryptopp.com/wiki/Blowfish"" rel=""nofollow"">crypto++</a> page for blowfish (and scroll down to the end of the page to skip streams and filters where it shows usage of an encryptor that can be fed individual bytes).</p>

<p>Taking that example forward, your code <em>can</em> look like this:</p>

<pre><code>class StatefulBlowfish {    
private:
   BlowfishKey key_;
   BlowfishIv iv_;
public:    
void EncryptCBC(string text, /*out*/ byte*){
   for (int i=0; I &lt; text.size(); i++) {
      // process and xor an individual ‘(byte)text[i]’ the 
      // necessary number of rounds. Consider padding.
  }
  ...    
}
</code></pre>

<p>But such a class isn’t very generic and has a lot of fixed parts which can make it harder to test, use and maintain. Another important thing to consider is that the interface that you have to design isn’t restricted to taking a string to encrypt, as you suggest in the question, but rather have to account for the chaining mode, the key and the iv – they are best to be created and managed elsewhere, to adhere to single responsibility principle. </p>

<p>You should also strive to have arrays or pointers to arrays of bytes as the interface of your low-level encryptor methods, because this is how the algorithm operates, and ideally the serialisation from a string to an array of bytes (and vice versa) should be offloaded to a separate interface. (Consider for example the assumptions on a “string” between big and little endian architectures, or the requirements on padding.)</p>

<p>A good generic OOP design is on one hand a collection of encryption ""parts"" each having more or less a single responsibility (serialisation, padding, chaining mode, key initialisation, key schedule, etc) and on the other hand a good design admits an easy creation of a bigger chain of responsibility construct, that describes the intention from simply observing the code. </p>

<p>Coming full circle back to cryptopp, modifying a standard code example for a slightly better clarity, look how everything is handled separately:</p>

<pre><code>// a key is created, to be separately initialised with a PRNG
// or from a secure source, hardware TRNG, etc.
SecByteBlock key(Blowfish::DEFAULT_KEYLENGTH); 
...
// an iv is created, similarly to be separately initialised with a PRNG
byte iv[Blowfish::BLOCKSIZE]; 
...
// Wrap blowfish low-level implementation in a CBC chaining mode 
// and initialise it with the key and iv    
CBC_Mode&lt;Blowfish&gt;::Encryption e; 
e.SetKeyWithIV(key, key.size(), iv);    
...    
// have a separate padding wrapper
... new StreamTransformationFilter(e, /*out*/ cipher)
</code></pre>
","1141","<c++><encryption><encryption-symmetric><blowfish>","0","1","1","2014-08-02 01:05:14","","4","","1078583","","2014-08-02 01:05:14","2014-03-23 18:02:23",""
"8534697","How to choose an AES padding mode?","<p>Depending on the framework you are using, there are various padding modes that can be used with AES encryption. For example, with .NET we can choose PKCS7, ISO10126, ANSIX923, Zeros or None. Similar options are available in Java.</p>

<p>I understand that the encryptor and decryptor need to use the same mode to be interoperable.</p>

<p>What considerations are there when choosing a padding mode? With the exception of 'None', does it even matter which you choose? Can some be considered more secure than others?</p>
","","1106","<security><encryption><encryption-symmetric><block-cipher>","2","","0","2011-12-16 13:34:51","","1","","150978","","2011-12-16 13:34:51","2011-12-16 13:15:45","2012-01-08 05:07:15"
"18227441","Amazon S3: Unable to decrypt symmetric key from object metadata : Illegal key size or default parameters","<p>I am using AmazonS3EncryptionClient. I wrote a code to connect to S3 and download the data. The code works all fine from eclipse but when I create a jar out of it and try to run it, it gives the following error
<code>Unable to decrypt symmetric key from object metadata : Illegal key size or default parameters</code></p>

<p>I am using symmetric encryption and the key is stored in a file. The file is being properly accessed from Eclipse as well as the jar.</p>

<p>What can be missing while running the code from the jar?</p>
","<p>Sounds like your private-key is some how invalid, most probably it is not in the JAR file or in classpath, can you make sure the code has access to the key</p>

<p>to check the file</p>

<pre><code>jar tf &lt;your jar&gt; | grep &lt;keyname&gt;
</code></pre>
","1101","<java><amazon-s3><encryption-symmetric>","0","0","1","2013-08-14 09:19:28","","0","","","","","2013-08-14 09:06:07",""
"2900819","Safe non-tamperable URL component in Perl using symmetric encryption?","<p>OK, I'm probably just having a bad Monday, but I have the following need and I'm seeing lots of partial solutions but I'm sure I'm not the first person to need this, so I'm wondering if I'm missing the obvious.</p>

<p>$client has 50 to 500 bytes worth of binary data that must be inserted into the middle of a URL and roundtrip to their customer's browser. Since it's part of the URL, we're up against the 1K ""theoretical"" limit of a GET URL. Also, $client doesn't want their customer decoding the data, or tampering with it without detection. $client would also prefer not to store anything server-side, so this must be completely standalone. Must be Perl code, and fast, in both encoding and decoding.</p>

<p>I think the last step can be base64.  But what are the steps for encryption and hashing that make the most sense?</p>
","<p>How secure does it need to be? Could you just xor the data with a long random string then add an MD5 hash of the whole lot with another secret salt to detect tampering?</p>

<p>I wouldn't use that for banking data, but it'd probably be fine for most web things...</p>

<p>big</p>
","1100","<perl><hash><encryption-symmetric>","10","-1","4","2010-05-24 23:30:23","2900986","15","2","","","","2010-05-24 22:40:12",""
"2900819","Safe non-tamperable URL component in Perl using symmetric encryption?","<p>OK, I'm probably just having a bad Monday, but I have the following need and I'm seeing lots of partial solutions but I'm sure I'm not the first person to need this, so I'm wondering if I'm missing the obvious.</p>

<p>$client has 50 to 500 bytes worth of binary data that must be inserted into the middle of a URL and roundtrip to their customer's browser. Since it's part of the URL, we're up against the 1K ""theoretical"" limit of a GET URL. Also, $client doesn't want their customer decoding the data, or tampering with it without detection. $client would also prefer not to store anything server-side, so this must be completely standalone. Must be Perl code, and fast, in both encoding and decoding.</p>

<p>I think the last step can be base64.  But what are the steps for encryption and hashing that make the most sense?</p>
","<p>Create a secret key and store it on the server. If there are multiple servers and requests aren't guaranteed to come back to the same server; you'll need to use the same key on every server. This key should be rotated periodically.</p>

<p>If you encrypt the data in CBC (Cipher Block Chaining) mode (See the Crypt::CBC module), the overhead of encryption is at most two blocks (one for the IV and one for padding). 128 bit (i.e. 16 byte) blocks are common, but not universal. I recommend using AES (aka Rijndael) as the block cipher.</p>

<p>You need to authenticate the data to ensure it hasn't been modified. Depending on the security of the application, just hashing the message and including the hash in the plaintext that you encrypt may be good enough. This depends on attackers being unable to change the hash to match the message without knowing the symmetric encryption key. If you're using 128-bit keys for the cipher, use a 256-bit hash like SHA-256 (you can use the Digest module for this). You may also want to include some other things like a timestamp in the data to prevent the request from being repeated multiple times.</p>
","1100","<perl><hash><encryption-symmetric>","10","4","4","2010-05-24 23:30:23","2900986","15","2","","","","2010-05-24 22:40:12",""
"2900819","Safe non-tamperable URL component in Perl using symmetric encryption?","<p>OK, I'm probably just having a bad Monday, but I have the following need and I'm seeing lots of partial solutions but I'm sure I'm not the first person to need this, so I'm wondering if I'm missing the obvious.</p>

<p>$client has 50 to 500 bytes worth of binary data that must be inserted into the middle of a URL and roundtrip to their customer's browser. Since it's part of the URL, we're up against the 1K ""theoretical"" limit of a GET URL. Also, $client doesn't want their customer decoding the data, or tampering with it without detection. $client would also prefer not to store anything server-side, so this must be completely standalone. Must be Perl code, and fast, in both encoding and decoding.</p>

<p>I think the last step can be base64.  But what are the steps for encryption and hashing that make the most sense?</p>
","<p>I have some code in a Cat App that uses <a href=""http://search.cpan.org/dist/Crypt-Util"" rel=""noreferrer""><code>Crypt::Util</code></a> to encode/decode a user's email address for an email verification link.</p>

<p>I set up a <code>Crypt::Util</code> model using <code>Catalyst::Model::Adaptor</code> with a secret key. Then in my Controller I have the following logic on the sending side:</p>

<pre><code>my $cu = $c-&gt;model('CryptUtil');
my $token = $cu-&gt;encode_string_uri_base64( $cu-&gt;encode_string( $user-&gt;email ) );
my $url = $c-&gt;uri_for( $self-&gt;action_for('verify'), $token );
</code></pre>

<p>I send this link to the <code>$user-&gt;email</code> and when it is clicked on I use the following.</p>

<pre><code>my $cu = $c-&gt;model('CryptUtil');
if ( my $id = $cu-&gt;decode_string( $cu-&gt;decode_string_uri_base64($token) ) ) {
    # handle valid link
} else { 
    # invalid link
}
</code></pre>

<p>This is basically what <code>edanite</code> just suggested in another answer. You'll just need to make sure whatever data you use to form the token with that the final <code>$url</code> doesn't exceed your arbitrary limit.</p>
","1100","<perl><hash><encryption-symmetric>","10","5","4","2010-05-24 23:30:23","2900986","15","2","","","","2010-05-24 22:40:12",""
"2900819","Safe non-tamperable URL component in Perl using symmetric encryption?","<p>OK, I'm probably just having a bad Monday, but I have the following need and I'm seeing lots of partial solutions but I'm sure I'm not the first person to need this, so I'm wondering if I'm missing the obvious.</p>

<p>$client has 50 to 500 bytes worth of binary data that must be inserted into the middle of a URL and roundtrip to their customer's browser. Since it's part of the URL, we're up against the 1K ""theoretical"" limit of a GET URL. Also, $client doesn't want their customer decoding the data, or tampering with it without detection. $client would also prefer not to store anything server-side, so this must be completely standalone. Must be Perl code, and fast, in both encoding and decoding.</p>

<p>I think the last step can be base64.  But what are the steps for encryption and hashing that make the most sense?</p>
","<p>I see three steps here.  First, try compressing the data.  With so little data bzip2 might save you maybe 5-20%.   I'd throw in a guard to make sure it doesn't make the data larger.  This step may not be worth while.</p>

<pre><code>use Compress::Bzip2 qw(:utilities);
$data = memBzip $data;
</code></pre>

<p>You could also try reducing the length of any keys and values in the data manually.  For example, <code>first_name</code> could be reduced to <code>fname</code>.</p>

<p>Second, encrypt it.  Pick your favorite cipher and use Crypt::CBC.  Here I use Rijndael because its good enough for the NSA.  You'll want to do benchmarking to find the best balance between performance and security.</p>

<pre><code>use Crypt::CBC;
my $key = ""SUPER SEKRET"";
my $cipher = Crypt::CBC-&gt;new($key, 'Rijndael');
my $encrypted_data = $cipher-&gt;encrypt($data);
</code></pre>

<p>You'll have to store the key on the server.  Putting it in a protected file should be sufficient, securing that file is left as an exercise.  When you say you can't store anything on the server I presume this doesn't include the key.</p>

<p>Finally, Base 64 encode it.  I would use the modified URL-safe base 64 which uses - and _ instead of + and / saving you from having to spend space URL encoding these characters in the base 64 string.  <a href=""http://search.cpan.org/dist/MIME-Base64-URLSafe"" rel=""nofollow noreferrer"">MIME::Base64::URLSafe</a> covers that.</p>

<pre><code>use MIME::Base64::URLSafe;
my $safe_data = urlsafe_b64encode($encrypted_data);
</code></pre>

<p>Then stick it onto the URL however you want.  Reverse the process for reading it in.</p>

<p>You should be safe on size.  Encrypting will increase the size of the data, but probably by less than 25%.  Base 64 will increase the size of the data by a third (encoding as 2^6 instead of 2^8).  This should leave encoding 500 bytes comfortably inside 1K.</p>
","1100","<perl><hash><encryption-symmetric>","10","3","4","2010-05-24 23:30:23","2900986","15","2","","","","2010-05-24 22:40:12",""
"3719042","How to use secure encryption of an existing column in SQL Server 2005","<p>I want to encrypt an existing column in SQL Server 2005, using an UPDATE statement, moving the old content into the new encrypted column.</p>

<p>So I have 2 choices: Symmetric and Asymmetric.</p>

<p>The issue I have is that with a symmetric key, I have to embed the password into an SP in order to read the column like:</p>

<pre><code>-- Create key (at some earlier point)
create symmetric key sk_user_profile with algorithm = aes_192 encryption by password = 'P@ssword!!';

-- Now encrypt the contents
-- open the key so that we can use it
open symmetric key sk_user_profile decryption by password = 'P@ssword!!';

UPDATE users
SET password_enc = encryptbykey(key_guid('sk_user_profile'), password_plain, 1, user_id)

close symmetric key sk_user_profile
</code></pre>

<p>Now if I want to select the data, I still have to re-open the key with</p>

<pre><code>open symmetric key sk_user_profile decryption by password = 'P@ssword!!';
</code></pre>

<p>Which is defeating the point isn't it, as I am embedding a plain-text password within a stored procedure.</p>

<p>Some questions</p>

<ol>
<li>Is there any way around this - i.e. creating a certificate with this password and then referring to the certificate instead?</li>
<li>Would this certificate have to be purchased (like SSL), or can I create my own?</li>
<li>Is this method scalable across fail-over clustered databases, i.e. the encryption is not based on the machine, only the password provided. Therefore failover can still read the passwords</li>
</ol>

<p>Thanks for your help</p>
","<p>Basically what you need to do is this:</p>

<pre><code>create certificate MyEncryptionCertificate with subject = 'MyCertificate'

create symmetric key MySymmetricKey with algorithm = aes_256 encryption by certificate MyEncryptionCertificate
</code></pre>

<p>And then:</p>

<pre><code>open symmetric key MySymmetricKey decryption by certificate MyEncryptionCertificate

select encryptbykey(key_guid('MySymmetricKey'), 'tada')) EncryptedMessage
</code></pre>

<p>I hope this blog will help you along the way.</p>

<p><a href=""http://blog.sqlauthority.com/2009/04/28/sql-server-introduction-to-sql-server-encryption-and-symmetric-key-encryption-tutorial-with-script/"" rel=""nofollow noreferrer"">SQL SERVER – Introduction to SQL Server Encryption and Symmetric Key Encryption Tutorial with Script</a></p>

<p>And also this blog entry, which deals specifically with certificates in a failover environment.</p>

<p><a href=""http://blog.shakeeluddin.com/sql-2005-database-mirroring-with-failover-tutorial/"" rel=""nofollow noreferrer"">Solution Using Certificates Authentication on Production Servers</a></p>
","1097","<sql-server-2005><encryption-asymmetric><encryption-symmetric>","1","1","1","2010-09-15 18:38:17","3720588","1","","","","","2010-09-15 15:13:17",""
"15758028","Symmetric decrypting returns a NULL value","<p>I have two databases . I copied all the data from one table and inserted into another database table . I have created symmetric key on second database but when i try to run  the query as follow</p>

<pre><code> OPEN SYMMETRIC KEY SecureSymmetricKey DECRYPTION BY PASSWORD = N'StrongPassword';        
 select DecryptByKey(columname) as DocSSN from tablename
 CLOSE SYMMETRIC KEY SecureSymmetricKey; 
</code></pre>

<p>but allway return null value.</p>
","<p>You need to follow the steps described in <a href=""http://msdn.microsoft.com/en-us/library/ms366281.aspx"" rel=""nofollow"">Create Identical Symmetric Keys on Two Servers</a>. You will have to re-encrypt all the data on both servers/databases with a newly created symmetric key that uses the given known key material. Creating a key copy after the fact is not possible. </p>

<p>Sharing symmetric keys between servers/databases is a very bad practice. You should encrypt with different keys on each database.</p>
","1093","<sql-server><encryption><encryption-symmetric><isqlquery>","0","0","1","2015-08-02 12:23:19","","0","","1816580","","2015-08-02 12:23:19","2013-04-02 06:59:07",""
"7296146","Is that OK to use static IV value in Rijndael encryption for many files?","<p>I have a question about <strong>IV</strong> in <strong>Rijndael encryption</strong>.</p>

<p>My current approach of using Rijndael is to use a pair of <strong>static</strong> <code>Key</code> and <code>Iv</code> for all encryption operations (I mean I use this pair of Key and Iv for all protected files in my computer).</p>

<p>I heard that IV must be <code>unique</code> for each Rijndael encryption. Is that true? What is the problem (if any) for my current approach of using <code>single static Key and Iv pair</code>?</p>
","<p>If you encrypt the same message twice, you'll get the same results - by varying <em>either</em> the key <em>or</em> the IV, that won't be the case. (Varying the IV is simpler as you can transmit that in plain text; it doesn't involve any sort of secret exchange.)</p>

<p>That means if you reuse the same IV, that can give information to an attacker: if they know the contents of one message, and they see the same encrypted data again, they'll know it's the same message.</p>

<p>So yes, I would vary the IV each time. (And try to avoid using the same key everywhere, ideally... it's like using the same password for multiple web sites: it means if you're compromised in one place, you've lost security everywhere.)</p>
","1060","<.net><vb.net><encryption-symmetric><rijndael>","3","4","2","2011-10-03 22:09:32","7296186","1","2","774411","","2011-10-03 22:09:32","2011-09-03 22:07:37",""
"7296146","Is that OK to use static IV value in Rijndael encryption for many files?","<p>I have a question about <strong>IV</strong> in <strong>Rijndael encryption</strong>.</p>

<p>My current approach of using Rijndael is to use a pair of <strong>static</strong> <code>Key</code> and <code>Iv</code> for all encryption operations (I mean I use this pair of Key and Iv for all protected files in my computer).</p>

<p>I heard that IV must be <code>unique</code> for each Rijndael encryption. Is that true? What is the problem (if any) for my current approach of using <code>single static Key and Iv pair</code>?</p>
","<p>The initialization vector initializes the AES engine to a specific state.
The main goal of using a dynamic IV is that two consecutive encryptions of the same file won't result in the same encrypted value.
To decrypt the file, you also need to initialize the AES engine with this same IV. As a consequence, the IV has to be stored with your encrypted file.</p>

<p>I don't think that the initialization vector will offer much additional security in your use case. It's nice to have it when you're encrypting data that can be subject to dictionnary attacks (passwords on the wire, card numbers, PIN code). For files, it will hardly be possible..</p>
","1060","<.net><vb.net><encryption-symmetric><rijndael>","3","2","2","2011-10-03 22:09:32","7296186","1","2","774411","","2011-10-03 22:09:32","2011-09-03 22:07:37",""
"4654193","How does blowfish algorithm work in C++?","<p>Hi All
I have to encrypt my data using Blowfish algorithm in C++...can you guys tell me if the other end knows what algorithm I am using can they not extract the key and decrypt it ? How safe is the data by this method?</p>
","<p>There are no known attacks against Blowfish (as of January 2011) so your data is as safe as the key length (which in Blowfish can be up to 448 bits).</p>
","1054","<blowfish><encryption-symmetric>","0","1","3","2011-01-11 04:47:26","4654235","0","1","","","","2011-01-11 04:31:51",""
"4654193","How does blowfish algorithm work in C++?","<p>Hi All
I have to encrypt my data using Blowfish algorithm in C++...can you guys tell me if the other end knows what algorithm I am using can they not extract the key and decrypt it ? How safe is the data by this method?</p>
","<blockquote>
  <p>can you guys tell me if the other end knows what algorithm I am using can they not extract the key and decrypt it ?</p>
</blockquote>

<p>No. The whole point of standardized encryption algorithms (as opposed to those that rely on obscurity) is that even though everyone knows all details of it, one cannot decrypt it unless one has the key.</p>

<p>This approach works because the only way to crack the encryption is to try all possible keys, of which there are too many. As computation power increases, formerly ""secure"" algorithms do become ""unsecure"". With some algorithms there may also be flaws that allow other forms of deductions to take place that significantly reduce the possible key-space and hence speed up these brute-force attacks. But (as far as we know) Blowfish is safe here.</p>

<p>Keeping the key secret is essential of course. If your program also includes the key (as opposed to asking the user or some device for it, or using random session keys that are themselves encrypted using public-key crypto), then a reverse-engineer can probably find it and break your scheme.</p>

<p>An important part of keeping the key secret is to keep it ""non-guessable"" and to not reuse it for different purposes. Randomly generated keys are the best.</p>

<p>Also, by ""the other end"" you mean an attacker, right? Usually, ""the other end"" refers to Bob The Intended Recipient, and he of course needs to be able to decrypt the message.</p>
","1054","<blowfish><encryption-symmetric>","0","4","3","2011-01-11 04:47:26","4654235","0","1","","","","2011-01-11 04:31:51",""
"4654193","How does blowfish algorithm work in C++?","<p>Hi All
I have to encrypt my data using Blowfish algorithm in C++...can you guys tell me if the other end knows what algorithm I am using can they not extract the key and decrypt it ? How safe is the data by this method?</p>
","<p>It is to my understanding, that one of the whole points of picking a particular encryption, and decryption, method, is that both ends of the communication stream will know which algorithm the data is encrypted with.</p>

<p>If you ""have to"" encrypt your data using the Blowfish algorithm, then the requirement alone should tell you that the recipient is expecting a message encrypted using the Blowfish scheme.</p>

<p>Like <em>Thilo</em> said, ""the whole point of standardized encryption algorithms...is that even though everyone knows all the details of it, one cannot decrypt it unless one has the key.""</p>

<p>The best way to prevent man-in-the-middle attacks, and other attacks involving the malicious party intercepting your messages, is to keep your key safe - do not hard-code it into any programs (even compiled programs can be analyzed) and build trusts with your recipient by ensuring that their security practices minimize the chance of a malicious agent procuring the pertinent key. Alternately, if your recipient supports it, you could use ""one-time pads"" - unique passwords/keys for encrypting your data.</p>
","1054","<blowfish><encryption-symmetric>","0","1","3","2011-01-11 04:47:26","4654235","0","1","","","","2011-01-11 04:31:51",""
"12046419","Howto send encrypted messages between python and php using blowfish for encryption?","<p>I want to encrypt a message in php with a known password using blowfish. I would then be like to decrypt this message in python.</p>

<p>This is useful even if you want to encrypt in one language and decrypt elsewhere.</p>

<p>I searched quite extensively but could not find any conclusive solution, so I thought to record my findings.</p>

<p>Note it is quite simple to encrypt/decrypt in same language such as python or php.</p>
","<p>This solution is very simple but it took me a while to figure out.</p>

<p><em><strong>Blowfish Params</em></strong></p>

<ul>
<li>Password should be of length 16</li>
<li>use mode MODE_ECB.</li>
<li><em><strong>Data being encrypted length should be always divisible by 16 pad by spaces or anyother char. I have taken a 16 length data string in example below.</em></strong></li>
</ul>

<p>php code:</p>

<pre><code>&lt;?php
$passw='secretPassword12';
$ntext='helloWorld123456';
$enc = base64_encode(mcrypt_encrypt(MCRYPT_BLOWFISH, $passw, $ntext, MCRYPT_MODE_ECB));
echo '&lt;div&gt;'.$enc.'&lt;/div';
</code></pre>

<p>This outputs 3C8f2kaD8Of0INYk3l9qEg==
python code:</p>

<pre><code>from Crypto.Cipher import Blowfish
from base64 import b64encode, b64decode
passw='secretPassword12'
ntext='helloworld123456'

cipher=Blowfish.new(passw, Blowfish.MODE_ECB)
encStr=b64encode(cipher.encrypt(data))
print encStr
</code></pre>

<p>This code outputs 3C8f2kaD8Of0INYk3l9qEg== too</p>

<p>Now suppose you want to decrypt some string in python encrypted in php. First do b64decode and then decrypt the result.</p>

<pre><code>Remember to pad your data such that the len is divisible by 16. 
</code></pre>

<p>Happy encrypting and decrypting!!!</p>
","1035","<php><python><django><blowfish><encryption-symmetric>","2","2","1","2019-03-16 13:18:12","12046420","0","1","1033581","","2019-03-16 13:18:12","2012-08-20 23:05:22",""
"3291743","Differences between CAPICOM TripleDES and System.Security.Cryptography TripleDES","<p>I'm trying to move away from using CAPICOM since I can no longer use it (64-bit Windows 7 machine).</p>

<p>The existing code for using TripleDES is like this:</p>

<pre><code>EncryptedDataClass cryptic = new EncryptedDataClass();
cryptic.Algorithm.Name = CAPICOM_ENCRYPTION_ALGORITHM.CAPICOM_ENCRYPTION_ALGORITHM_3DES;
cryptic.SetSecret(secretKey, CAPICOM_SECRET_TYPE.CAPICOM_SECRET_PASSWORD);
cryptic.Content = stringToEncrypt;
encryptedString = cryptic.Encrypt(CAPICOM_ENCODING_TYPE.CAPICOM_ENCODE_ANY);
</code></pre>

<p>The only information supplied for the encryption is the secretKey. And the secretKey comes out to be about ten bytes. Is there a way use the .NET class to do the same encryption.
Note: this is used to verify connection to a web service that will still be using CAPICOM.
Any help or ideas are greatly appreciated.</p>
","<p>Not exactly the answer to your question and nor is it ideal, but we hit the same issue with CAPICOM and got it to work in the 64bit world by:</p>

<ul>
<li>Copy the binary to [windows]\syswow64</li>
<li>Register the service (run from within that path, <em>regsvr32 capicon.dll</em>)</li>
</ul>
","1016","<c#><.net><capicom><encryption-symmetric>","3","0","3","2012-04-18 07:51:18","","5","1","111142","","2010-07-20 16:01:06","2010-07-20 15:40:51",""
"3291743","Differences between CAPICOM TripleDES and System.Security.Cryptography TripleDES","<p>I'm trying to move away from using CAPICOM since I can no longer use it (64-bit Windows 7 machine).</p>

<p>The existing code for using TripleDES is like this:</p>

<pre><code>EncryptedDataClass cryptic = new EncryptedDataClass();
cryptic.Algorithm.Name = CAPICOM_ENCRYPTION_ALGORITHM.CAPICOM_ENCRYPTION_ALGORITHM_3DES;
cryptic.SetSecret(secretKey, CAPICOM_SECRET_TYPE.CAPICOM_SECRET_PASSWORD);
cryptic.Content = stringToEncrypt;
encryptedString = cryptic.Encrypt(CAPICOM_ENCODING_TYPE.CAPICOM_ENCODE_ANY);
</code></pre>

<p>The only information supplied for the encryption is the secretKey. And the secretKey comes out to be about ten bytes. Is there a way use the .NET class to do the same encryption.
Note: this is used to verify connection to a web service that will still be using CAPICOM.
Any help or ideas are greatly appreciated.</p>
","<p>You can use CAPICOM from a 32-bit process on a 64-bit machine (obviously). If you are using it from script, you have to use the 32-bit versions of <code>cscript.exe</code> and <code>wscript.exe</code>. I.e:</p>

<pre><code>c:\windows\sysWOW64\cscript.exe ""c:\path\to\script.wsf""

c:\windows\sysWOW64\cscript.exe ""c:\path\to\another\vbscript.vbs""
</code></pre>

<p>This works fine, I am doing it in production right now.</p>

<p>Also, this answer has a walkthrough of how to register a surrogate for CAPICOM so it can be used from 64-bit processes (including 64-bit script). </p>

<ul>
<li><a href=""https://stackoverflow.com/questions/611651/64-bit-c-sharp-with-a-32-bit-vb6-com-object/8908105#8908105"">64 bit C# with a 32 bit VB6 COM object</a></li>
</ul>

<p>I have actually done this to use CAPICOM from 64-bit SQL Server and it works fine.</p>
","1016","<c#><.net><capicom><encryption-symmetric>","3","0","3","2012-04-18 07:51:18","","5","1","111142","","2010-07-20 16:01:06","2010-07-20 15:40:51",""
"3291743","Differences between CAPICOM TripleDES and System.Security.Cryptography TripleDES","<p>I'm trying to move away from using CAPICOM since I can no longer use it (64-bit Windows 7 machine).</p>

<p>The existing code for using TripleDES is like this:</p>

<pre><code>EncryptedDataClass cryptic = new EncryptedDataClass();
cryptic.Algorithm.Name = CAPICOM_ENCRYPTION_ALGORITHM.CAPICOM_ENCRYPTION_ALGORITHM_3DES;
cryptic.SetSecret(secretKey, CAPICOM_SECRET_TYPE.CAPICOM_SECRET_PASSWORD);
cryptic.Content = stringToEncrypt;
encryptedString = cryptic.Encrypt(CAPICOM_ENCODING_TYPE.CAPICOM_ENCODE_ANY);
</code></pre>

<p>The only information supplied for the encryption is the secretKey. And the secretKey comes out to be about ten bytes. Is there a way use the .NET class to do the same encryption.
Note: this is used to verify connection to a web service that will still be using CAPICOM.
Any help or ideas are greatly appreciated.</p>
","<p>SetSecret is not a key!!</p>

<p>from MSDN:</p>

<p>CAPICOM_SECRET_TYPE Enumeration</p>

<p>The CAPICOM_SECRET_TYPE enumeration indicates the kind of secret used to derive a key to be used for encryption/decryption of data.</p>

<p>Constants
CAPICOM_SECRET_PASSWORD 
The encryption key is to be derived from a password.</p>
","1016","<c#><.net><capicom><encryption-symmetric>","3","1","3","2012-04-18 07:51:18","","5","1","111142","","2010-07-20 16:01:06","2010-07-20 15:40:51",""
"7181322","Looking for archive supporting Java and strong encryption","<p>I am looking for a ""standard"" archiver format (ZIP, 7ZIP, etc.) that is supported by a pure Java library and has strong (AES-128) encryption.</p>

<p>I need a format that people can decrypt using off-the-shelf software for Windows and OsX.</p>

<p>My understanding is that ZIP encryption prior to version PKZIP 9.0 (Zip 2.0) was very weak, and that PKWARE has never published the AES-256 file version.</p>

<p>The format need only support secret-key encryption (public-key is not required or desired).</p>

<p>I can't use BouncyCastle Open-PGP because their JAR files must be signed with their key and we need to also sign with our code-signing key for Java Web Start. Some of our customers are running old builds of Java 6 (&lt; 14) and can't upgrade. Builds of Java 6 prior to 14 did not support signing with multiple keys.</p>
","<p>Maybe I don't know enough about your project, but why don't you create your <strong>zip</strong> using the default Java API. And then encrypt the zip using AES-128. Or if you want, you can first encrypt the content and then zip it.</p>
","1008","<java><encryption><archive><encryption-symmetric>","2","1","2","2011-08-24 20:08:35","7181624","3","","","","","2011-08-24 19:43:28","2015-01-10 12:46:47"
"7181322","Looking for archive supporting Java and strong encryption","<p>I am looking for a ""standard"" archiver format (ZIP, 7ZIP, etc.) that is supported by a pure Java library and has strong (AES-128) encryption.</p>

<p>I need a format that people can decrypt using off-the-shelf software for Windows and OsX.</p>

<p>My understanding is that ZIP encryption prior to version PKZIP 9.0 (Zip 2.0) was very weak, and that PKWARE has never published the AES-256 file version.</p>

<p>The format need only support secret-key encryption (public-key is not required or desired).</p>

<p>I can't use BouncyCastle Open-PGP because their JAR files must be signed with their key and we need to also sign with our code-signing key for Java Web Start. Some of our customers are running old builds of Java 6 (&lt; 14) and can't upgrade. Builds of Java 6 prior to 14 did not support signing with multiple keys.</p>
","<p>You can try using the <a href=""http://www.lingala.net/zip4j/"" rel=""nofollow"">Zip4j</a> library:</p>

<blockquote>
  <p><strong>Key features:</strong></p>
  
  <ul>
  <li>Create, Add, Extract, Update, Remove files from a Zip file</li>
  <li>Read/Write password protected Zip files</li>
  <li>Supports AES 128/256 Encryption</li>
  <li>Supports Standard Zip Encryption</li>
  <li>Supports Zip64 format</li>
  <li>Supports Store (No Compression) and Deflate compression method</li>
  <li>Create or extract files from Split Zip files (Ex: z01, z02,...zip)</li>
  <li>Supports Unicode file names</li>
  <li>Progress Monitor</li>
  </ul>
  
  <p><strong>License:</strong></p>
  
  <ul>
  <li>Zip4j is released under Apache License, Version 2.0.</li>
  </ul>
</blockquote>
","1008","<java><encryption><archive><encryption-symmetric>","2","1","2","2011-08-24 20:08:35","7181624","3","","","","","2011-08-24 19:43:28","2015-01-10 12:46:47"
"37275983","How to encrypt Neo4j Database","<p>I would like to encrypt Neo4j Database,  </p>

<p>so what I am doing, I used Eclipse to create the Neo4j database {Java API}, and I used AES 128-bit key, to encrypt the nodes' properties,</p>

<p>How can I replace the properties for each node by encrypted ones automatically?</p>

<p>I am looking for something like using Array, but I am not sure, how?</p>
","<p>Neo4j doesn't have built-in encryption. This is something you'd need to do on your own, by encrypting/decrypting within your app (and how you accomplish this is really up to you, and a matter of opinion/discussion, which is out of scope here). Also, as <a href=""http://neo4j.com/docs/stable/capabilities-data-security.html"" rel=""nofollow"">this Neo4j documentation page</a> suggests, you may use an encrypted file system.</p>
","1006","<neo4j><aes><encryption-symmetric>","2","0","1","2016-05-17 13:12:45","","0","","272109","","2016-05-17 13:07:58","2016-05-17 12:18:14",""
"28946333","CCCrypt working with pieces of files AES CBC: garbage to end of files on encryption-decryption cycle","<p>Although I was able to get data encryption and decryption (AES128CBC) working easily with CCCrypt based on some of the great examples of Zaph and others here, I have had two strange problems with CCCrypt when working with encrypting/decrypting files.</p>

<p>1) Upon encrypting and then decrypting a file, I am getting extra garbage at the end of my files, and it is different depending on the file. A hex dump of one original file and the result after an encryption and decryption had and extra ""0B 0B 0B 0B 0B 0B 0B 0B 0B 0B 0B"" another file had an extra ""05 05 05 05 05"" at the end.  A diff at the command line for both resultant files reports ""No newline at end of file"".  Other than these problems (and problems working with the files relating to these problems like NSJSONSerialization refusing to parse) everything appears to be working.  What is causing this frustrating problem?</p>

<p>2) In order to eventually accommodate very large files I have broken up files into chunks and then used the last 16bytes of the previous chunk to as the IV for the next (since this is the way CBC works anyway, right?). Strangely, on chunks divisible by the key size, using kCCOption PKCS7Padding is causing problems. So that the IV ends up not being the same when decrypting as encrypting between these chunks. When I just set the options to zero for all the chunks including the last which is likely not to be divisible by the key size, I get an exception.  Can anyone help me understand what this issue is? I just use a condition to avoid the issue, but I don't understand the exception, and perhaps it relates to question 1.</p>

<pre><code>    let fileSize = getFileSizeFromPath(filePath)
    println(""filesize = \(fileSize)"")
    while file != nil {
        if let inputBuffer = file?.readDataOfLength(oneMegaByte) {
            if inputBuffer.length == 0 {
                file?.closeFile()
                break
            } else {
                println(""input buffer length: \(inputBuffer.length)"")
                if let outputBuffer = inputBuffer.AES128CBC(key: key, iv: iv, encryptionOp: encrypt) {
                    println(""output buffer length: \(outputBuffer.length)"")
                    outFile?.writeData(outputBuffer)
                    println(""input file offset:\(file!.offsetInFile) output file offset:\(outFile!.offsetInFile)"")
                    if encrypt {
                        let range = NSMakeRange((outputBuffer.length - const.keyLength), const.keyLength)
                        iv = outputBuffer.subdataWithRange(range)
                        println(""range of iv for next chunk:\(range), iv value: \(iv)"")
                    } else {
                        let range = NSMakeRange((inputBuffer.length - const.keyLength), const.keyLength)
                        iv = inputBuffer.subdataWithRange(range)
                        println(""range of iv for next chunk:\(range), iv value: \(iv)"")
                    }
                } else {
                    file?.closeFile()
                    println(""problem encrypting data"")
                    break
                }
            }
        } else {
            file?.closeFile()
            break
        }
</code></pre>

<p>And the method I've added to an NSData extension to encrypt and decrypt:</p>

<pre><code>func AES128CBC(#key: NSData, iv: NSData, encryptionOp: Bool) -&gt; NSData? {
    if key.length != 16 || iv.length != 16 || key.bytes == iv.bytes {
        return nil
    }

    let data = self
    let dataLength = UInt(data.length)
    let cPtrToData = UnsafePointer&lt;UInt8&gt;(data.bytes)
    let cPtrToIVData = UnsafePointer&lt;UInt8&gt;(iv.bytes)
    let cPtrTokeyData = UnsafePointer&lt;UInt8&gt;(key.bytes)
    let keySize = size_t(kCCKeySizeAES128)

    let buffer: NSMutableData! = NSMutableData(length: Int(dataLength) + kCCBlockSizeAES128)
    if buffer == nil { return nil }
    var cPtrTobuffer = UnsafeMutablePointer&lt;UInt8&gt;(buffer.mutableBytes)
    let bufferSize = size_t(buffer.length)

    var operation: CCOperation
    if encryptionOp {
        operation = UInt32(kCCEncrypt)
    } else {
        operation = UInt32(kCCDecrypt)
    }

    let algoritm: CCAlgorithm = UInt32(kCCAlgorithmAES128)
    var options: CCOptions
    if dataLength % UInt(const.keyLength) != 0 {
        options = UInt32(kCCOptionPKCS7Padding)
    } else {
        options = 0
    }
        var encryptedByteCount: UInt = 0

    var operationResult = CCCrypt(operation, algoritm, options, cPtrTokeyData, keySize, cPtrToIVData, cPtrToData, dataLength, cPtrTobuffer, bufferSize, &amp;encryptedByteCount)

    if UInt32(operationResult) == UInt32(kCCSuccess) {
        println(""encrypted / decrypted byte count: \(encryptedByteCount)"")
        buffer.length = Int(encryptedByteCount)
        return buffer
    }
    println(""Error: \(operationResult)"")
    return nil
}
</code></pre>
","<p>The extra bytes are the <a href=""http://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7"" rel=""nofollow"">PKCS#7 padding</a>. Encryption is block based so bytes must be added on encryption and later removed on decryption to achieve this. Per PKCS#7 the extra bytes are the number of bytes added. These additional bytes: ""05 05 05 05 05"" indicate 5 bytes of padding were added.</p>

<p>If PKCS#7 padding is specified and the input data is an exact multiple of the block size another block is added (and will be all padding bytes). This must be sent of there will be padding errors on decryption. If you know on both encryption and decryption that the data is a multiple of the block size you can skip PKCS#7 padding. In the OP's case this could be skipped on all encryption segments except the last if the intermediate segments were all a multiple of block size. AES uses 128-bit (16-byte) blocks.</p>
","1003","<ios><swift><aes><encryption-symmetric>","0","1","2","2015-03-11 13:14:18","28946519","2","0","4577867","","2015-03-11 09:03:01","2015-03-09 15:54:57",""
"28946333","CCCrypt working with pieces of files AES CBC: garbage to end of files on encryption-decryption cycle","<p>Although I was able to get data encryption and decryption (AES128CBC) working easily with CCCrypt based on some of the great examples of Zaph and others here, I have had two strange problems with CCCrypt when working with encrypting/decrypting files.</p>

<p>1) Upon encrypting and then decrypting a file, I am getting extra garbage at the end of my files, and it is different depending on the file. A hex dump of one original file and the result after an encryption and decryption had and extra ""0B 0B 0B 0B 0B 0B 0B 0B 0B 0B 0B"" another file had an extra ""05 05 05 05 05"" at the end.  A diff at the command line for both resultant files reports ""No newline at end of file"".  Other than these problems (and problems working with the files relating to these problems like NSJSONSerialization refusing to parse) everything appears to be working.  What is causing this frustrating problem?</p>

<p>2) In order to eventually accommodate very large files I have broken up files into chunks and then used the last 16bytes of the previous chunk to as the IV for the next (since this is the way CBC works anyway, right?). Strangely, on chunks divisible by the key size, using kCCOption PKCS7Padding is causing problems. So that the IV ends up not being the same when decrypting as encrypting between these chunks. When I just set the options to zero for all the chunks including the last which is likely not to be divisible by the key size, I get an exception.  Can anyone help me understand what this issue is? I just use a condition to avoid the issue, but I don't understand the exception, and perhaps it relates to question 1.</p>

<pre><code>    let fileSize = getFileSizeFromPath(filePath)
    println(""filesize = \(fileSize)"")
    while file != nil {
        if let inputBuffer = file?.readDataOfLength(oneMegaByte) {
            if inputBuffer.length == 0 {
                file?.closeFile()
                break
            } else {
                println(""input buffer length: \(inputBuffer.length)"")
                if let outputBuffer = inputBuffer.AES128CBC(key: key, iv: iv, encryptionOp: encrypt) {
                    println(""output buffer length: \(outputBuffer.length)"")
                    outFile?.writeData(outputBuffer)
                    println(""input file offset:\(file!.offsetInFile) output file offset:\(outFile!.offsetInFile)"")
                    if encrypt {
                        let range = NSMakeRange((outputBuffer.length - const.keyLength), const.keyLength)
                        iv = outputBuffer.subdataWithRange(range)
                        println(""range of iv for next chunk:\(range), iv value: \(iv)"")
                    } else {
                        let range = NSMakeRange((inputBuffer.length - const.keyLength), const.keyLength)
                        iv = inputBuffer.subdataWithRange(range)
                        println(""range of iv for next chunk:\(range), iv value: \(iv)"")
                    }
                } else {
                    file?.closeFile()
                    println(""problem encrypting data"")
                    break
                }
            }
        } else {
            file?.closeFile()
            break
        }
</code></pre>

<p>And the method I've added to an NSData extension to encrypt and decrypt:</p>

<pre><code>func AES128CBC(#key: NSData, iv: NSData, encryptionOp: Bool) -&gt; NSData? {
    if key.length != 16 || iv.length != 16 || key.bytes == iv.bytes {
        return nil
    }

    let data = self
    let dataLength = UInt(data.length)
    let cPtrToData = UnsafePointer&lt;UInt8&gt;(data.bytes)
    let cPtrToIVData = UnsafePointer&lt;UInt8&gt;(iv.bytes)
    let cPtrTokeyData = UnsafePointer&lt;UInt8&gt;(key.bytes)
    let keySize = size_t(kCCKeySizeAES128)

    let buffer: NSMutableData! = NSMutableData(length: Int(dataLength) + kCCBlockSizeAES128)
    if buffer == nil { return nil }
    var cPtrTobuffer = UnsafeMutablePointer&lt;UInt8&gt;(buffer.mutableBytes)
    let bufferSize = size_t(buffer.length)

    var operation: CCOperation
    if encryptionOp {
        operation = UInt32(kCCEncrypt)
    } else {
        operation = UInt32(kCCDecrypt)
    }

    let algoritm: CCAlgorithm = UInt32(kCCAlgorithmAES128)
    var options: CCOptions
    if dataLength % UInt(const.keyLength) != 0 {
        options = UInt32(kCCOptionPKCS7Padding)
    } else {
        options = 0
    }
        var encryptedByteCount: UInt = 0

    var operationResult = CCCrypt(operation, algoritm, options, cPtrTokeyData, keySize, cPtrToIVData, cPtrToData, dataLength, cPtrTobuffer, bufferSize, &amp;encryptedByteCount)

    if UInt32(operationResult) == UInt32(kCCSuccess) {
        println(""encrypted / decrypted byte count: \(encryptedByteCount)"")
        buffer.length = Int(encryptedByteCount)
        return buffer
    }
    println(""Error: \(operationResult)"")
    return nil
}
</code></pre>
","<p>Thanks to the help of Zaph I have understood the above issues.  For clarity I will answer the above questions more directly.</p>

<p>1) As Zaph said the extra bytes on my decrypted files were padding. They were showing up because of the following offending code, which I have removed.</p>

<pre><code>var options: CCOptions
if dataLength % UInt(const.keyLength) != 0 {
    options = UInt32(kCCOptionPKCS7Padding)
} else {
    options = 0
}
</code></pre>

<p>Since the output of CCCrypt will always be divisible by the key length if the PKCS7Padding option is chosen (that's why they are added), the above code would test for a condition that could never be met during a decryption operation. CCCrypt would then not strip the padding back off for me. Since in my application I was mostly handling sub pieces of a file that were always a fixed multiple of the key size and not entire files, I was trying to remove the unecessary padding between files using the above code not considering the ramifications in a decryption operation. This of course is more appropriately done in the code that calls my NSData extension.</p>

<p>2) As per the man page (there isn't one for ios but an old mac one from 2007 can be found here: <a href=""https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/CCCrypt.3cc.html"" rel=""nofollow"">https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/CCCrypt.3cc.html</a></p>

<p>""if padding is disabled, or when decrypting, the total number of bytes [has] to be aligned to the block size; otherwise CCCryptFinal() will return kCCAlignmentError.""</p>

<p>This means that when I set options to zero (didn't set the PKCS7Padding option), the last block would cause the program to crash.</p>

<p>Since I was breaking the file up into sub pieces for my encryption and decryption operation (to eventually accommodate for very large file sizes) I needed to use the last 16 bytes of the previous file chunk as the IV for the next chunk (this is how CBC works, by seeding each subsequent key sized block with an IV generated from the last 16 bytes of the previous block (irregardless of whether 128bit or 256bit key size is used as pointed out by Zaph above).</p>

<p>However, what I failed to understand is that CCCrypt ALWAYS provides padding when encrypting if the PKCSPadding option is chosen, even when the data operated on is a multiple of the key size. CCCrypt was adding 16 bytes to the end of every chunk of the file, and then I was writing that padding in the middle of files.  Ooops.</p>

<p>I'm now using the following code to call the encryption/decryption method, and discarding the padding for method calls on data that does not run to the end of the file at this more appropriate level.</p>

<pre><code>while file != nil {
    if let inputBuffer = file?.readDataOfLength(fileChunkLength) { 
        if inputBuffer.length == 0 {
            file?.closeFile()
            break 
        } else { 
            println(""input buffer length: \(inputBuffer.length)"") 
            println(""IV passed to aes128:\(iv)"") 
            if let outputBuffer = inputBuffer.AES128CBC(key: key, iv: iv, encryptionOp: encrypt) { 
                println(""output bufferlength: \(outputBuffer.length)"")

                if encrypt &amp;&amp; file?.offsetInFile &lt; fileSize {
                    // only write the data, and discard the padding when not at the end of the file
                    outFile?.writeData(outputBuffer.subdataWithRange(NSMakeRange(0, fileChunkLength)))
                    println(""Bytes written \(fileChunkLength)"")
                    // set the iv for the next chunk in encryption ops (no need when file is finished anyway)
                    iv = outputBuffer.subdataWithRange(NSMakeRange(fileChunkLength - ivLength, ivLength))
                } else {
                    outFile?.writeData(outputBuffer)
                    println(""Bytes written \(outputBuffer.length)"")
                    // set iv for decryption ops (doesn't matter for encryption ops where file is at end)
                    iv = inputBuffer.subdataWithRange(NSMakeRange(inputBuffer.length - ivLength, ivLength))
                }
                println(""input file offset:\(file!.offsetInFile) output file offset:\(outFile!.offsetInFile)"")

            } else {
                file?.closeFile()
                println(""problem encrypting data"")
                break
            }
        }
    } else {
        file?.closeFile()
        break
</code></pre>

<p>The NSData extension (second code block above, remains unchanged except for the removal of the problem code mentioned)</p>
","1003","<ios><swift><aes><encryption-symmetric>","0","0","2","2015-03-11 13:14:18","28946519","2","0","4577867","","2015-03-11 09:03:01","2015-03-09 15:54:57",""
"28108843","triple DES result length","<p>If I encrypt emails so that I can store them in a database, the resulting string is longer than the email itself.  Is there a maximum length to this resulting coded string?  if so, does it depend on both key length and the email length?  I need to know this so I can set my database fields to the correct length.
Thanks.</p>
","<p>As Alex K. notes, for block ciphers (like DES), common modes will pad them out to a multiple of the block size. The block size for 3DES is 64-bits (8 bytes). The most common padding scheme is PKCS7, which pads the block with ""n x n bytes."" This is to say, if you need one bytes of padding, it pads with 0x01. If you need four bytes of padding, it pads with 0x04040404 (4x 4s). If your data is already the right length, it pads with a full block (8 bytes of 0x08 for 3DES).</p>

<p>The short version is that the padded cipher text for 3DES can be up to 8 bytes longer than the plaintext. If your encryption scheme is a typical, insecure implementation, this is the length. The fact that you're using 3DES (an obsolete cipher) makes it a bit more likely that it's also insecurely implemented, and so this is the answer.</p>

<p>But if your scheme is implemented well, then there could be quite a few other things attached to the message. There could be 8 bytes of initialization vector. There could be a salt of arbitrary length if you're using a password. There could be an HMAC. There could be lots of things that could add an arbitrary amount of space. (The <a href=""https://github.com/RNCryptor/RNCryptor-Spec/blob/master/RNCryptor-Spec-v3.md"" rel=""nofollow"">RNCryptor</a> format, for example, adds up to 82 bytes to the message.) So you need to know how your format is implemented.</p>
","997","<encryption><encryption-symmetric>","0","2","1","2015-01-25 17:37:20","28111083","2","","","","","2015-01-23 11:23:03",""
"5846149","AES_256 same value to encrypt, different encryption results","<p>I am just starting to work with native encryption in SQL Server, and I have observed something I am hoping someone here can shed some light on.</p>

<p>I'm using AES_256 encryption, and in reviewing the encrypted result, I have noticed that the same value in different rows will have a different encrypted result.  Here is a sample where I have encrypted an nvarchar(50) with a value of xxx and I get the follow encrypted result:</p>

<pre><code>xxx 0x008C6C289DE9BE42AA47EC9F2022DCC401000000657FCB75FD4C63F63249A0BCA716CB384E79B84E3D862EC41C6A4A491C64658A
</code></pre>

<p>xxx 0x008C6C289DE9BE42AA47EC9F2022DCC4010000004BE3C369FFD523110CAA3A957FC4A7820F779ADB8882A0A33A53DF480FE797A8
xxx 0x008C6C289DE9BE42AA47EC9F2022DCC40100000002288512DFB126BC6E17320217629365478B48691E62863B9A08E3772EFA7486
xxx 0x008C6C289DE9BE42AA47EC9F2022DCC40100000076223FB6D568E210D6D07AA9BFEDB991D46EF64187F2A31AEF96A5F61FE722A3
xxx 0x008C6C289DE9BE42AA47EC9F2022DCC401000000E90AFB7EBA5B445CCAD9E6CC94966DC66B86557F2CD5E3E1FB68F308FA5F2952</p>

<p>I've been searching around but have not found an answer yet.  Anybody know why this occurs?</p>

<p>Thanks.</p>
","<p>Salting through <a href=""http://en.wikipedia.org/wiki/Initialization_vector"" rel=""nofollow"">initialization vector</a>. Encrypting <em>must</em> result in different values for same clear text, otherwise it discloses information.</p>
","992","<sql-server-2008><encryption><encryption-symmetric><aes>","0","1","1","2011-05-01 03:11:12","5846171","0","","","","","2011-05-01 03:04:25",""
"8351799","The performance concern of AES (RijndaelManaged) in .NET","<p>I intend to encrypt large data (around 3-5 MB) with <strong>RijndaelManaged</strong>. Is there any performance issue\suggestion on doing so? </p>

<p>Thanks</p>

<pre><code>        RijndaelManaged rijndaelCipher = new RijndaelManaged();
        rijndaelCipher.Mode = CipherMode.CBC;
        rijndaelCipher.Padding = PaddingMode.PKCS7;
        rijndaelCipher.KeySize = 128;
        rijndaelCipher.BlockSize = 128;
</code></pre>
","<p>No I can safely say there will not be any performance issues. Here's what I timed (And this includes some disk access:</p>

<p><code>00:00:00.26 seconds for 2MB</code></p>

<p>Like I said faster than you can blink: <a href=""http://en.wikipedia.org/wiki/Blink"" rel=""nofollow"">see wiki</a></p>
","988","<c#><.net><security><encryption><encryption-symmetric>","0","0","1","2011-12-02 09:37:00","8354324","2","","","","","2011-12-02 04:28:36","2011-12-02 09:55:11"
"28830383","Where does SSL symmetric key is stored?","<p>This is what I understand for SSL communication. The browser gets public key from the web server of the secured website. The client and server establish session key based on public/private keys and then continue communication through symmetric algorithm during the SSL session.</p>

<p>My questions:</p>

<p>After session key is generated, where does it stored in server side? Is it stored in web server memory? And is it stored as encrypted?</p>
","<blockquote>
  <p>This is what I understand for SSL communication. The browser gets public key from the web server of the secured website.</p>
</blockquote>

<p>Well, it gets the entire certificate, which contains the public key, and it gets a lot of other things too, that authenticate that the server owns that certificate, and therefore owns that public key.</p>

<blockquote>
  <p>The client and server establish session key based on public/private keys</p>
</blockquote>

<p>Incorrect. They negotiate a session key based on shared secrets that don't have anything to do with the public or private keys. The public key may be used to encrypt one of those secrets between client and server, but that's a different statement.</p>

<blockquote>
  <p>and then continue communication through symmetric algorithm during the SSL session.</p>
</blockquote>

<p>Correct.</p>

<blockquote>
  <p>My questions:</p>
  
  <p>After session key is generated, where does it stored in server side? Is it stored in web server memory?</p>
</blockquote>

<p>Of course.</p>

<blockquote>
  <p>And is it stored as encrypted?</p>
</blockquote>

<p>No.</p>
","978","<ssl><https><encryption-symmetric>","2","1","1","2015-03-05 01:28:34","28868423","0","","207421","","2015-03-05 01:26:28","2015-03-03 11:12:21",""
"48620882","How to XOR two hex numbers in bash script? (XOR Encryption)","<p>I write a bash script who manipulate hex values and i need to do XOR operation between two hexa numbers. My problem is when i try in bash prompt it's work and return right value but in script this value is false.</p>

<p>When XOR variable $ExtendAuthKey and $IPAD the result must be :
181ad673a5d94f0e12c8894ea26381b363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636</p>

<p>But in fact i get this value : 3906369333256140342</p>

<p>I dont understand this behavior, if you have explanation or solution i take it, thank </p>

<p>see my script :
`</p>

<pre><code>#!/bin/bash

AuthID=80001f8880e9bd0c1d12667a5100000000

IPAD=0x36363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636
OPAD=0x5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c
Ext0=0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

WholeMsgIn=0x3081800201033011020420dd06a7020300ffe30401050201030431302f041180001f8880e9bd0c1d12667a5100000000020105020120040475736572040c00000000000000000000000004003035041180001f8880e9bd0c1d12667a51000000000400a11e02046b4c5ac20201000201003010300e060a2b06010201041e0105010500

line=test

#Calcule AuthKey
  AuthKey=$(snmpkey md5 $line $AuthID | grep auth | cut -d ' ' -f 2)

#Concat AuthKey + Ext0
  ExtendAuthKey=$AuthKey${Ext0:2}

#Calcule de K1 = ExtendAuthKey XOR IPAD
  K1=$(( $ExtendAuthKey ^ $IPAD ))

#Calcule de K2 = ExtendAuthKey XOR OPAD
  K2=$(( $ExtendAuthKey ^ $OPAD ))

#Concat K1 + WholeMsgIn
  Concat1=$K1$WholeMsgIn

#Calcul Hash Concat1
  echo ${Concat1:2} &gt; tempH.hex
  cat tempH.hex | xxd -r -p &gt; tempB.bin
  HashConcat1=$(md5sum tempB.bin | cut -d ' ' -f 1)

#Concat K2 + Concat1
  Concat2=$K2$HashConcat1

#Calcul Hash Concat1
  echo ${Concat2:2} &gt; tempH.hex
  cat tempH.hex | xxd -r -p &gt; tempB.bin
  HashConcat2=$(md5sum tempB.bin | cut -d ' ' -f 1)
</code></pre>

<p>` </p>
","<p>If you do <code>echo $((IPAD))</code> you will get <code>3906369333256140342</code>. The problem is that once you perform arithmetic operation in shell, your inputs get truncated to size of <code>int</code> of your platform (in this case 64b). I suspect you will have to reach out beyond shell to perform the bitwise XOR (or process it in smaller chunks, but the md5 digest alone is already twice the size).</p>
","975","<bash><encryption><xor><encryption-symmetric><bitwise-xor>","0","1","4","2019-05-04 19:43:10","48624051","0","","4985059","","2018-11-02 07:10:36","2018-02-05 10:50:22",""
"48620882","How to XOR two hex numbers in bash script? (XOR Encryption)","<p>I write a bash script who manipulate hex values and i need to do XOR operation between two hexa numbers. My problem is when i try in bash prompt it's work and return right value but in script this value is false.</p>

<p>When XOR variable $ExtendAuthKey and $IPAD the result must be :
181ad673a5d94f0e12c8894ea26381b363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636</p>

<p>But in fact i get this value : 3906369333256140342</p>

<p>I dont understand this behavior, if you have explanation or solution i take it, thank </p>

<p>see my script :
`</p>

<pre><code>#!/bin/bash

AuthID=80001f8880e9bd0c1d12667a5100000000

IPAD=0x36363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636
OPAD=0x5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c
Ext0=0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

WholeMsgIn=0x3081800201033011020420dd06a7020300ffe30401050201030431302f041180001f8880e9bd0c1d12667a5100000000020105020120040475736572040c00000000000000000000000004003035041180001f8880e9bd0c1d12667a51000000000400a11e02046b4c5ac20201000201003010300e060a2b06010201041e0105010500

line=test

#Calcule AuthKey
  AuthKey=$(snmpkey md5 $line $AuthID | grep auth | cut -d ' ' -f 2)

#Concat AuthKey + Ext0
  ExtendAuthKey=$AuthKey${Ext0:2}

#Calcule de K1 = ExtendAuthKey XOR IPAD
  K1=$(( $ExtendAuthKey ^ $IPAD ))

#Calcule de K2 = ExtendAuthKey XOR OPAD
  K2=$(( $ExtendAuthKey ^ $OPAD ))

#Concat K1 + WholeMsgIn
  Concat1=$K1$WholeMsgIn

#Calcul Hash Concat1
  echo ${Concat1:2} &gt; tempH.hex
  cat tempH.hex | xxd -r -p &gt; tempB.bin
  HashConcat1=$(md5sum tempB.bin | cut -d ' ' -f 1)

#Concat K2 + Concat1
  Concat2=$K2$HashConcat1

#Calcul Hash Concat1
  echo ${Concat2:2} &gt; tempH.hex
  cat tempH.hex | xxd -r -p &gt; tempB.bin
  HashConcat2=$(md5sum tempB.bin | cut -d ' ' -f 1)
</code></pre>

<p>` </p>
","<p>Maybe this helps, using <code>bc</code>:</p>

<pre><code>a=FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
b=5555555555555555555555555555555555555555555555555555555555555555
bc -l logic.bc &lt;&lt;&lt; ""obase=16;ibase=16;xor($a,$b)""
</code></pre>

<p><strong>Output</strong></p>

<pre><code>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</code></pre>

<p>Note that the hex is in <strong>upper case</strong>, and that the <code>&lt;&lt;&lt;</code> is a <em>""bashism""</em> so, if you are not using <code>bash</code>, you can turn it around and express it like this, and also prevent line breaks at the same time:</p>

<pre><code>echo ""obase=16;ibase=16;xor($a,$b)"" | BC_LINE_LENGTH=0 bc -l logic.bc 
</code></pre>

<hr>

<p>It relies on the <code>logic</code> additional library for <code>bc</code>:</p>

<pre><code>wget http://phodd.net/gnu-bc/code/logic.bc
</code></pre>
","975","<bash><encryption><xor><encryption-symmetric><bitwise-xor>","0","0","4","2019-05-04 19:43:10","48624051","0","","4985059","","2018-11-02 07:10:36","2018-02-05 10:50:22",""
"48620882","How to XOR two hex numbers in bash script? (XOR Encryption)","<p>I write a bash script who manipulate hex values and i need to do XOR operation between two hexa numbers. My problem is when i try in bash prompt it's work and return right value but in script this value is false.</p>

<p>When XOR variable $ExtendAuthKey and $IPAD the result must be :
181ad673a5d94f0e12c8894ea26381b363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636</p>

<p>But in fact i get this value : 3906369333256140342</p>

<p>I dont understand this behavior, if you have explanation or solution i take it, thank </p>

<p>see my script :
`</p>

<pre><code>#!/bin/bash

AuthID=80001f8880e9bd0c1d12667a5100000000

IPAD=0x36363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636
OPAD=0x5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c
Ext0=0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

WholeMsgIn=0x3081800201033011020420dd06a7020300ffe30401050201030431302f041180001f8880e9bd0c1d12667a5100000000020105020120040475736572040c00000000000000000000000004003035041180001f8880e9bd0c1d12667a51000000000400a11e02046b4c5ac20201000201003010300e060a2b06010201041e0105010500

line=test

#Calcule AuthKey
  AuthKey=$(snmpkey md5 $line $AuthID | grep auth | cut -d ' ' -f 2)

#Concat AuthKey + Ext0
  ExtendAuthKey=$AuthKey${Ext0:2}

#Calcule de K1 = ExtendAuthKey XOR IPAD
  K1=$(( $ExtendAuthKey ^ $IPAD ))

#Calcule de K2 = ExtendAuthKey XOR OPAD
  K2=$(( $ExtendAuthKey ^ $OPAD ))

#Concat K1 + WholeMsgIn
  Concat1=$K1$WholeMsgIn

#Calcul Hash Concat1
  echo ${Concat1:2} &gt; tempH.hex
  cat tempH.hex | xxd -r -p &gt; tempB.bin
  HashConcat1=$(md5sum tempB.bin | cut -d ' ' -f 1)

#Concat K2 + Concat1
  Concat2=$K2$HashConcat1

#Calcul Hash Concat1
  echo ${Concat2:2} &gt; tempH.hex
  cat tempH.hex | xxd -r -p &gt; tempB.bin
  HashConcat2=$(md5sum tempB.bin | cut -d ' ' -f 1)
</code></pre>

<p>` </p>
","<p>The output of bc is <a href=""https://ascii.cl/"" rel=""nofollow noreferrer"">ASCII</a> using xxd you need -u for processing UPPERCASE with xxd I got 46 instead of 41 with hexdump. NOTE THE logic.bc file isn't persistent on my machine.</p>

<p>This XOR's in Ubuntu 18 32bit Live Disc:</p>

<pre><code>wget http://phodd.net/gnu-bc/code/logic.bc
</code></pre>

<p>Then assuming a constant 32 Bytes of data stream, using expr length $a may help </p>

<pre><code>a=FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &amp;&amp; b=5555555555555555555555555555555555555555555555555555555555555555 &amp;&amp; bc -l logic.bc &lt;&lt;&lt; ""obase=16;ibase=16;xor($a,$b)""
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</code></pre>

<p>The xor is performed with bc - l result was a string of A's which is 2's complement of 5 I piped it to hexdump appended ""<code>|hexdump</code>"" and got: 41 In HEX is A ASCII CHAR</p>

<pre><code>0000000 4141 4141 4141 4141 4141 4141 4141 4141
*
0000040 000a                                   
0000041
</code></pre>

<p>@Mark Setchell Thank you for bc command. I did man bc and leaned alot. It was important to note the diferences between '^' parsing. Like with '$' Theres ambiguous definitions. So with C ^ means ""XOR"" and not ""to the power of ....""
And $ is sometimes used for strings or variables but in bash it invokes the bash command test out the differences between $0 and $(0)</p>

<p>Notes: At At 0000040 000a  thats my line feed ""Enter Key"". Also note the output of hexdump is lowercase you can use tr to translate. On two's complement its the XOR(x) = </p>

<p>Disclaimer:
Different environments can overload ^ and $ ""operator"" command for different results.</p>

<p>This experimental command has a problem with <strong>refreshing stdin</strong> see <code>man xxd</code> :</p>

<pre><code>a=FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &amp;&amp; b=5555555555555555555555555555555555555555555555555555555555555555 &amp;&amp; bc -l logic.bc &lt;&lt;&lt; ""obase=16;ibase=16;xor($a,$b)"" &amp;&amp; echo $a | xxd -l 32 -ps -c 64 &amp;&amp; echo ""Below are the A and then B inputs"" &amp;&amp; echo $a &amp;&amp; echo $b
</code></pre>

<p><strong>This outputs bc results to  xxd and prints $a in between the commands $a temporarily for some reason  perhaps $(0) related injections xxd outputs 46 no 41 HEX ascii for A using -u with xxd seems to make no difference:</strong></p>

<pre><code>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
4646464646464646464646464646464646464646464646464646464646464646
Below are the A and then B inputs
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
5555555555555555555555555555555555555555555555555555555555555555
</code></pre>

<p>This command helps with formatting the output of hexdump and removing the enter key the extra echo should be omitted in your code:
 a=FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &amp;&amp; b=5555555555555555555555555555555555555555555555555555555555555555 &amp;&amp; bc -l logic.bc &lt;&lt;&lt; ""obase=16;ibase=16;xor($a,$b)"" | hexdump -v -e '/1 ""%02X""' | sed -e 's_0A__';echo</p>
","975","<bash><encryption><xor><encryption-symmetric><bitwise-xor>","0","0","4","2019-05-04 19:43:10","48624051","0","","4985059","","2018-11-02 07:10:36","2018-02-05 10:50:22",""
"48620882","How to XOR two hex numbers in bash script? (XOR Encryption)","<p>I write a bash script who manipulate hex values and i need to do XOR operation between two hexa numbers. My problem is when i try in bash prompt it's work and return right value but in script this value is false.</p>

<p>When XOR variable $ExtendAuthKey and $IPAD the result must be :
181ad673a5d94f0e12c8894ea26381b363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636</p>

<p>But in fact i get this value : 3906369333256140342</p>

<p>I dont understand this behavior, if you have explanation or solution i take it, thank </p>

<p>see my script :
`</p>

<pre><code>#!/bin/bash

AuthID=80001f8880e9bd0c1d12667a5100000000

IPAD=0x36363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636
OPAD=0x5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c
Ext0=0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

WholeMsgIn=0x3081800201033011020420dd06a7020300ffe30401050201030431302f041180001f8880e9bd0c1d12667a5100000000020105020120040475736572040c00000000000000000000000004003035041180001f8880e9bd0c1d12667a51000000000400a11e02046b4c5ac20201000201003010300e060a2b06010201041e0105010500

line=test

#Calcule AuthKey
  AuthKey=$(snmpkey md5 $line $AuthID | grep auth | cut -d ' ' -f 2)

#Concat AuthKey + Ext0
  ExtendAuthKey=$AuthKey${Ext0:2}

#Calcule de K1 = ExtendAuthKey XOR IPAD
  K1=$(( $ExtendAuthKey ^ $IPAD ))

#Calcule de K2 = ExtendAuthKey XOR OPAD
  K2=$(( $ExtendAuthKey ^ $OPAD ))

#Concat K1 + WholeMsgIn
  Concat1=$K1$WholeMsgIn

#Calcul Hash Concat1
  echo ${Concat1:2} &gt; tempH.hex
  cat tempH.hex | xxd -r -p &gt; tempB.bin
  HashConcat1=$(md5sum tempB.bin | cut -d ' ' -f 1)

#Concat K2 + Concat1
  Concat2=$K2$HashConcat1

#Calcul Hash Concat1
  echo ${Concat2:2} &gt; tempH.hex
  cat tempH.hex | xxd -r -p &gt; tempB.bin
  HashConcat2=$(md5sum tempB.bin | cut -d ' ' -f 1)
</code></pre>

<p>` </p>
","<p>As others have said, the issue you're facing is that the output of the xor is being truncated to 64-bits. You could still do it in the shell, you'd just need to break the arithmetic up into 64-bit chunks. I recently did this for kicks:</p>

<pre><code>xor() {
  {
    echo ""${1}"" | # start pipeline with first parameter
      fold -w 16 | # break into 16 char lines (note: 4-bit hex char * 16 = 64 bits)
      sed 's/^/0x/' | # prepend '0x' to lines to tell shell their hex numbers
      nl # number the lines (we do this to match corresponding ones)
    echo ""${2}"" | # do all the same to the second parameter
      fold -w 16 | 
      sed 's/^/0x/' | 
      nl
  } | # coming into this pipe we have lines: 1,...,n,1,...,n 
  sort -n | # now sort so lines are: 1,1,...,n,n
  cut -f 2 | # cut to keep only second field (blocks), ditching the line numbers
  paste - - | # paste to join every-other line with tabs (now two-field lines)
  while read -r a b; do # read lines, assign 'a' and 'b' to the two fields 
    printf ""%#0${#a}x"" ""$(( a ^ b ))"" # do the xor and left-pad the result
  done |
  sed 's/0x//g' | # strip the leading '0x' (here for clarity instead of in the loop)
  paste -s -d '\0' - # join all the blocks back into to a big hex string
}
</code></pre>

<p>Example:</p>

<pre><code>$ xor ""0c60c80f961f0e71f3a9b524af6012062fe037a6"" ""e60cc942513261fd3eb76c0e617d53f6f73ebef1""
ea6c014dc72d6f8ccd1ed92ace1d41f0d8de8957
</code></pre>

<p>This is a comically slow way to xor some big numbers, but for demos it should be fine. I used it in a PBKDF2 implementation where it reduced the output of 4096 rounds of HMAC SHA512 in a minute or so (concurrently with the hashing).</p>
","975","<bash><encryption><xor><encryption-symmetric><bitwise-xor>","0","0","4","2019-05-04 19:43:10","48624051","0","","4985059","","2018-11-02 07:10:36","2018-02-05 10:50:22",""
"12337533","Symmetric encryption algorithm function","<p>To start off, I am still learning object oriented programming. Ok, I have a combo box with the different types of symmetric algorithms.</p>

<pre><code>private void Form3_Load(object sender, EventArgs e)
{
    openencrypt();
    comboBox1.Items.Add(""AES"");
    comboBox1.Items.Add(""DES"");
    comboBox1.Items.Add(""Rijndael"");
    comboBox1.Items.Add(""RC2"");
    comboBox1.Items.Add(""Triple DES"");
    comboBox1.SelectedIndex = 0;
}
</code></pre>

<p>Then I have my encrypt function checking what types they are.</p>

<pre><code>byte[] hpass;
string nFilepath = Set.nfilepath;
FileStream Open = new FileStream(oFilepath, FileMode.Open, FileAccess.Read);
FileStream Save = new FileStream(nFilepath, FileMode.OpenOrCreate, FileAccess.Write);
SHA512 sh512 = new SHA512Managed();
hpass = sh512.ComputeHash(Encoding.ASCII.GetBytes(textBox1.Text));
PasswordDeriveBytes pdb = new PasswordDeriveBytes(hpass, hash);

if (comboBox1.SelectedIndex.Equals(0))
{
    Aes alg = Aes.Create();
    alg.Key = pdb.GetBytes(32);
    alg.IV = pdb.GetBytes(16);
}
if (comboBox1.SelectedIndex.Equals(1))
{
    DES alg = DES.Create();
    alg.Key = pdb.GetBytes(32);
    alg.IV = pdb.GetBytes(16);
}
if (comboBox1.SelectedIndex.Equals(2))
{
    Rijndael alg = Rijndael.Create();
    alg.Key = pdb.GetBytes(32);
    alg.IV = pdb.GetBytes(16);
}
</code></pre>

<p>But when I don't want to have to put a crypto stream in each if statement. So is there a way to offload the checking to a function and return a symmetricalgorithm type? With the Key and IV? Am I going about this completely wrong?## Heading ##</p>
","<p>A more object oriented approach would be:</p>

<p>Create an algorithm interface to be displayed in your combo box:</p>

<pre><code>public interface IAlgorithmItem
{
    SymmetricAlgorithm CreateAlgorithm();

    string DisplayName { get; }
}
</code></pre>

<p>Then, create a new class for each desired algorithm:</p>

<pre><code>public class AesAlgorithm : IAlgorithmItem
{
    public AesAlgorithm()
    {
    }

    public SymmetricAlgorithm CreateAlgorithm()
    {
        return Aes.Create();
    }

    public string DisplayName
    {
        get { return ""AES""; }
    }
}

public class RijndaelAlgorithm : IAlgorithmItem
{
    public SymmetricAlgorithm CreateAlgorithm()
    {
        return Rijndael.Create(); 
    }

    public string DisplayName
    {
        get { return ""Rijndael""; }
    }
}

// ...
</code></pre>

<p>Then, you can create a new list of items:</p>

<pre><code>var listItems = new List&lt;IAlgorithmItem&gt;() { new AesAlgorithm(), new RijndaelAlgorithm() };
</code></pre>

<p>Then you can bind your combo box to this list:</p>

<pre><code>comboBox1.DataSource = listItems;
comboBox1.DisplayMember = ""DisplayName"";
</code></pre>

<p>Later, you can reference the selected item:</p>

<pre><code>var algorithmItem = (IAlgorithmItem)comboBox1.SelectedItem;
var algorithm = algorithmItem.CreateAlgorithm();
</code></pre>

<p>EDIT: Updated with Will's suggestion of using an interface rather than an abstract base class.
EDIT 2: Updated to use a create method rather than property, as the result of the operation will create a new algorithm each time it is accessed.</p>
","969","<c#><encryption><encryption-symmetric>","4","2","2","2013-02-09 15:53:43","12337632","0","","445517","","2013-02-09 15:53:43","2012-09-09 08:16:44",""
"12337533","Symmetric encryption algorithm function","<p>To start off, I am still learning object oriented programming. Ok, I have a combo box with the different types of symmetric algorithms.</p>

<pre><code>private void Form3_Load(object sender, EventArgs e)
{
    openencrypt();
    comboBox1.Items.Add(""AES"");
    comboBox1.Items.Add(""DES"");
    comboBox1.Items.Add(""Rijndael"");
    comboBox1.Items.Add(""RC2"");
    comboBox1.Items.Add(""Triple DES"");
    comboBox1.SelectedIndex = 0;
}
</code></pre>

<p>Then I have my encrypt function checking what types they are.</p>

<pre><code>byte[] hpass;
string nFilepath = Set.nfilepath;
FileStream Open = new FileStream(oFilepath, FileMode.Open, FileAccess.Read);
FileStream Save = new FileStream(nFilepath, FileMode.OpenOrCreate, FileAccess.Write);
SHA512 sh512 = new SHA512Managed();
hpass = sh512.ComputeHash(Encoding.ASCII.GetBytes(textBox1.Text));
PasswordDeriveBytes pdb = new PasswordDeriveBytes(hpass, hash);

if (comboBox1.SelectedIndex.Equals(0))
{
    Aes alg = Aes.Create();
    alg.Key = pdb.GetBytes(32);
    alg.IV = pdb.GetBytes(16);
}
if (comboBox1.SelectedIndex.Equals(1))
{
    DES alg = DES.Create();
    alg.Key = pdb.GetBytes(32);
    alg.IV = pdb.GetBytes(16);
}
if (comboBox1.SelectedIndex.Equals(2))
{
    Rijndael alg = Rijndael.Create();
    alg.Key = pdb.GetBytes(32);
    alg.IV = pdb.GetBytes(16);
}
</code></pre>

<p>But when I don't want to have to put a crypto stream in each if statement. So is there a way to offload the checking to a function and return a symmetricalgorithm type? With the Key and IV? Am I going about this completely wrong?## Heading ##</p>
","<p>Well, my first inclination was to give you Wikipedia links to the <a href=""http://wikipedia.org/wiki/Factory_pattern"" rel=""nofollow"">factory method</a> and <a href=""http://en.wikipedia.org/wiki/Abstract_factory_pattern"" rel=""nofollow"">abstract factory</a> patterns (there, I did it still), but since you say you're a beginner, let's not bring out the big guns upfront.</p>

<p>Basically, what you need is to find a common trait of all encryption algorithms and create a method that will return an object instance that has this common trait. The manifestation of such a trait can be either an abstract class or an interface in C#, and you're in luck, all your selected encryptions derive from SymmetricAlgorithm (""luck"" is probably an insult to the designers of System.Security.Cryptography, but I'm sure they'd forgive me for the sake of illustration ;).</p>

<p>So, just <a href=""http://en.wikipedia.org/wiki/Refactoring"" rel=""nofollow"">refactor</a> your code by introducing a new method, possibly along these lines:</p>

<pre><code>private SymmetricAlgorithm GetAlgorithm(int index)
{
  switch (index)
  {
    case 0:
      return Aes.Create();
    case 1:
      return DES.Create();
    case 2:
      return Rijndael.Create();
    default:
      throw new NotSupportedException(""unknown algorithm"");
  }
}
</code></pre>

<p>You can easily figure out how to use this new method from the rest of your code.</p>
","969","<c#><encryption><encryption-symmetric>","4","2","2","2013-02-09 15:53:43","12337632","0","","445517","","2013-02-09 15:53:43","2012-09-09 08:16:44",""
"3432252","Proper password storage and retrieval for service accounts?","<p>Most of the information that I found and read about properly storing passwords in a database say that I should Hash the password clear text with a unique salt value for each user and then store that hash in the database. But this process doesn't work for my needs...</p>

<p>I have a windows service written in C# that needs to connect to other remote machines in different datacenters using specific service accounts. These service accounts are like domain user accounts, but there is no real people behind them and they just have the proper permissions to carry out the service payload on each specific server. The service acount information is stored in a SQL Server table including the password for each account. Currently, I am using symmetric encryption (Rijndael) to obfuscate the passwords in the DB table. The key is saved in a separate config file that has strict access permissions.</p>

<p>Every time the service has a scheduled payload to run on a remote machine, I lookup the appropriate service account information on the table and decript it using the key. There is also a internal website that is basically a front-end for managing the various settings for this service, and in there the admin can view and change the password of the service accounts.</p>

<p>Is this a good approach to keeping things secure? Are there any obvious flaws in this scheme?</p>
","<p>Sounds sane to me.</p>
","959","<c#><encryption><passwords><encryption-symmetric>","7","2","1","2010-08-07 22:22:28","3432264","2","","","","","2010-08-07 22:17:13",""
"2695907","Diffie-Hellman in Silverlight","<p>I am trying to devise a security scheme for encrypting the application level data between a silverlight client, and a php webservice that I created. Since I am dealing with a public website the information I am pulling from the service is public, but the information I'm submitting to the webservice is not public. There is also a back end to the website for administration, so naturally all application data being pushed and pulled from the webservice to the silverlight administration back end must also be encrypted. </p>

<p>Silverlight does not support asymmetric encryption, which would work for the public website. Symmetric encryption would only work on the back end because users do not log in to the public website, so no password based keys could be derived. Still symmetric encryption would be great, but I cannot securely save the private key in the silverlight client. Because it would either have to be hardcoded or read from some kind of config file. None of that is considered secure. So... plan B.</p>

<p>My final alternative would be then to implement the Diffie-Hellman algorithm, which supports symmetric encryption by means of key agreement. However Diffie-Hellman is vulnerable to man-in-the-middle attacks. In other words, there is no guarantee that either side is sure of each others identity, making it possible for communication to be intercepted and altered without the receiving party knowing about it. It is thus recommended to use a private shared key to encrypt the key agreement handshaking, so that the identity of either party is confirmed.</p>

<p>This brings me back to my initial problem that resulted in me needing to use Diffie-Hellman, how can I use a private key in a silverlight client without hardcoding it either in the code or an xml file.</p>

<p>I'm all out of love on this one... is there any answer to this?</p>

<p><strong>EDIT:</strong></p>

<p>Remember that this is about a custom PHP web service that I rolled out on my own.</p>

<p>I found an RSA implementation i can use in Silverlight. It seems pretty safe to use this to encrypt the handshake for the  DiffieHellman key agreement between the Silverlight client and PHP web service, and subsequently also use it to encrypt the symmetric key that was agreed upon (which is itself generated from the result of the key exchange by hashing it). </p>

<p>After this I'm pretty much guaranteed that all communication <strong>going to</strong> the web service has not been intercepted, modified and then retransmitted (MITM). However I believe it is still possible; technically, for an attacker to impersonate the silverlight client and send messages to the webservice (assuming they discover the url). </p>

<p>Security from unauthorized access is provided since the attacker does not know the ""secret api"" of my custom webservice, hence they are unable to communicate with it. </p>

<p>The only way to break this would be to brute force the webservice with whatever strings an attacker may suspect to be valid to try and get a response from the web service. I don't think you can brute force a variable length string. It sounds impractical.</p>

<p>Does anyone see a problem with this approach?</p>
","<p>The obvious solution would be to use WCF to establish an SSL or TLS connection instead of attempting to build that into the application.</p>
","957","<silverlight><diffie-hellman><encryption-symmetric>","3","1","3","2010-05-04 03:16:30","2695983","1","","134485","","2010-04-23 16:29:14","2010-04-23 02:54:55",""
"2695907","Diffie-Hellman in Silverlight","<p>I am trying to devise a security scheme for encrypting the application level data between a silverlight client, and a php webservice that I created. Since I am dealing with a public website the information I am pulling from the service is public, but the information I'm submitting to the webservice is not public. There is also a back end to the website for administration, so naturally all application data being pushed and pulled from the webservice to the silverlight administration back end must also be encrypted. </p>

<p>Silverlight does not support asymmetric encryption, which would work for the public website. Symmetric encryption would only work on the back end because users do not log in to the public website, so no password based keys could be derived. Still symmetric encryption would be great, but I cannot securely save the private key in the silverlight client. Because it would either have to be hardcoded or read from some kind of config file. None of that is considered secure. So... plan B.</p>

<p>My final alternative would be then to implement the Diffie-Hellman algorithm, which supports symmetric encryption by means of key agreement. However Diffie-Hellman is vulnerable to man-in-the-middle attacks. In other words, there is no guarantee that either side is sure of each others identity, making it possible for communication to be intercepted and altered without the receiving party knowing about it. It is thus recommended to use a private shared key to encrypt the key agreement handshaking, so that the identity of either party is confirmed.</p>

<p>This brings me back to my initial problem that resulted in me needing to use Diffie-Hellman, how can I use a private key in a silverlight client without hardcoding it either in the code or an xml file.</p>

<p>I'm all out of love on this one... is there any answer to this?</p>

<p><strong>EDIT:</strong></p>

<p>Remember that this is about a custom PHP web service that I rolled out on my own.</p>

<p>I found an RSA implementation i can use in Silverlight. It seems pretty safe to use this to encrypt the handshake for the  DiffieHellman key agreement between the Silverlight client and PHP web service, and subsequently also use it to encrypt the symmetric key that was agreed upon (which is itself generated from the result of the key exchange by hashing it). </p>

<p>After this I'm pretty much guaranteed that all communication <strong>going to</strong> the web service has not been intercepted, modified and then retransmitted (MITM). However I believe it is still possible; technically, for an attacker to impersonate the silverlight client and send messages to the webservice (assuming they discover the url). </p>

<p>Security from unauthorized access is provided since the attacker does not know the ""secret api"" of my custom webservice, hence they are unable to communicate with it. </p>

<p>The only way to break this would be to brute force the webservice with whatever strings an attacker may suspect to be valid to try and get a response from the web service. I don't think you can brute force a variable length string. It sounds impractical.</p>

<p>Does anyone see a problem with this approach?</p>
","<p>SSL/TLS suffers from the same problem that any Diffie-Hellman-based implementation you come up with would have, in that it can still be broken by a man-in-the-middle attack.</p>

<p>The reason TLS is secure and trusted is because the client, when receiving the server's certificate, authenticates it by checking that it is signed with another certificate from a known trusted identity - say, VeriSign. Thus far, this makes it impossible to enact a man-in-the-middle attack without having VeriSign's <em>private</em> key - when the interloper sends a fake certificate proclaiming to be the server, the client would easily detect that this certificate is not signed using the trusted identity's certificate, and bails out of the connection, displaying a warning to the user.</p>

<p>For your purposes, it's likely easiest to use TLS. To make it secure, you would generate a certificate for your server, and then embed in your client the <em>public</em> key for that certificate. The client can then verify that it is talking to your server, without having to expose the private key, which you <em>don't</em> have to distribute.</p>

<p><strong>EDIT:</strong> In response to your comment on Jerry's answer, if your hosting provider doesn't allow SSL/TLS connections at all, preventing a man-in-the-middle attack will be tricky. If this is your only reason for avoiding TLS, I would suggest getting your provider to turn it on, or finding a provider that allows for it.</p>

<p><strong>EDIT:</strong> In response to your edited question: even if you're now using RSA in your Silverlight client to send data to your web service, you cannot guarantee that the client <em>itself</em> has not been modified. It's quite possible for an attacker to dig into your client, determine the algorithm you're using to perform the encryption/handshake, and then write code to impersonate your client (or indeed, modify the client to include their code). Once they've done that, they can start analyzing your API and use it to make calls to your web service.</p>

<p>It's the same with SSL/TLS - the client can validate the identity of the host using the host's certificate, and as long as the host's server is secured, the client can trust the output from the host; however, there is no mechanism in which the host can 100% validate that the client is who they say they are, as the client will be run on a machine which does not have a controlled execution environment.</p>

<p>However - despite the above being true, and that it's <em>possible</em> that an attacker can compromise your system in this way, it's likely not <em>probable</em> -- unless you're working on a public-facing system that attracts a lot of attention/use, or a system that deals directly with money in some form, the attacker needs to make some effort before being able to send their own input to your web service.</p>

<p>Your best bet is to validate the input received by your web service thoroughly, and don't leave dangling APIs accessible that your regular client would never use.</p>
","957","<silverlight><diffie-hellman><encryption-symmetric>","3","3","3","2010-05-04 03:16:30","2695983","1","","134485","","2010-04-23 16:29:14","2010-04-23 02:54:55",""
"2695907","Diffie-Hellman in Silverlight","<p>I am trying to devise a security scheme for encrypting the application level data between a silverlight client, and a php webservice that I created. Since I am dealing with a public website the information I am pulling from the service is public, but the information I'm submitting to the webservice is not public. There is also a back end to the website for administration, so naturally all application data being pushed and pulled from the webservice to the silverlight administration back end must also be encrypted. </p>

<p>Silverlight does not support asymmetric encryption, which would work for the public website. Symmetric encryption would only work on the back end because users do not log in to the public website, so no password based keys could be derived. Still symmetric encryption would be great, but I cannot securely save the private key in the silverlight client. Because it would either have to be hardcoded or read from some kind of config file. None of that is considered secure. So... plan B.</p>

<p>My final alternative would be then to implement the Diffie-Hellman algorithm, which supports symmetric encryption by means of key agreement. However Diffie-Hellman is vulnerable to man-in-the-middle attacks. In other words, there is no guarantee that either side is sure of each others identity, making it possible for communication to be intercepted and altered without the receiving party knowing about it. It is thus recommended to use a private shared key to encrypt the key agreement handshaking, so that the identity of either party is confirmed.</p>

<p>This brings me back to my initial problem that resulted in me needing to use Diffie-Hellman, how can I use a private key in a silverlight client without hardcoding it either in the code or an xml file.</p>

<p>I'm all out of love on this one... is there any answer to this?</p>

<p><strong>EDIT:</strong></p>

<p>Remember that this is about a custom PHP web service that I rolled out on my own.</p>

<p>I found an RSA implementation i can use in Silverlight. It seems pretty safe to use this to encrypt the handshake for the  DiffieHellman key agreement between the Silverlight client and PHP web service, and subsequently also use it to encrypt the symmetric key that was agreed upon (which is itself generated from the result of the key exchange by hashing it). </p>

<p>After this I'm pretty much guaranteed that all communication <strong>going to</strong> the web service has not been intercepted, modified and then retransmitted (MITM). However I believe it is still possible; technically, for an attacker to impersonate the silverlight client and send messages to the webservice (assuming they discover the url). </p>

<p>Security from unauthorized access is provided since the attacker does not know the ""secret api"" of my custom webservice, hence they are unable to communicate with it. </p>

<p>The only way to break this would be to brute force the webservice with whatever strings an attacker may suspect to be valid to try and get a response from the web service. I don't think you can brute force a variable length string. It sounds impractical.</p>

<p>Does anyone see a problem with this approach?</p>
","<p>I recommend starting with this JavaScript+PHP DH key Exchange protocol:
<a href=""http://enanocms.org/News:Article/2008/02/20/Diffie_Hellman_key_exchange_implemented"" rel=""nofollow noreferrer"">http://enanocms.org/News:Article/2008/02/20/Diffie_Hellman_key_exchange_implemented</a></p>

<p>You can then re-write the javascript in silverlight.  I recommend using Wireshark to dump packets then you can use Meld or whatever to diff the packets to see where your implementation is differs from the original. </p>

<p>Good Luck!</p>

<p>(Disclaimer:  I totally agree with the Enano dev team,  this is not a full replacement of SSL and SSL should be used whenever possible.)</p>
","957","<silverlight><diffie-hellman><encryption-symmetric>","3","0","3","2010-05-04 03:16:30","2695983","1","","134485","","2010-04-23 16:29:14","2010-04-23 02:54:55",""
"17283659","Encryption in ASP.NET that can be decrypted in MySQL with AES_DECRYPT()","<p>I would like to be able to perform application-level encryption in ASP.NET, producing an array of bytes that would then be saved to a MySQL blob column.  I would then like it to be an option that, if you have the encryption key, you would be able to decrypt it using MySQL's <a href=""http://dev.mysql.com/doc/refman/5.1/en/encryption-functions.html#function_aes-encrypt"" rel=""nofollow"">AES_DECRYPT()</a> function.  This seems like it should be possible, since AES_DECRYPT is an implementation of AES/Rijndael.</p>

<p>The MySQL AES_ENCRYPT/DECRYPT functions simply take a key and the string to encrypt/decrypt as parameters.  The examples i've seen for encryption in ASP.NET/C#, however, involve also specifying values for Key and IV (initialization vector).  How do these affect the final, encrypted byte array, and how can they be taken into account when decrypting with AES_DECRYPT)_?</p>
","<p>You <a href=""http://dev.mysql.com/doc/refman/4.1/en/encryption-functions.html#c9276"">can do that</a> by setting <code>RijndaelManaged</code> to use <a href=""https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Electronic_codebook_.28ECB.29"">ECB mode</a>.</p>

<p>However, ECB mode is not secure and should be avoided.</p>

<hr>

<p>In general, a database is a very bad place to perform encryption.</p>

<p>If you are able to encrypt your data in the database, that implies that you have both the ciphertext and the key in the same place; this defeats the purpose of encryption.</p>

<p>You should keep the key as far away from ciphertext storage as possible; using any sort of SQL encryption function is usually indicative of a fundamental design flaw in your encryption strategy which can have disastrous consequences.</p>
","953","<c#><asp.net><mysql><encryption><encryption-symmetric>","1","5","1","2013-06-25 00:04:57","17287121","5","1","","","","2013-06-24 19:37:53",""
"13585456","Shared-Key Signature","<p>I know that most uses of cryptographic signatures are with public/private keys, but I need to sign information using a pre-shared key. 
I know I can just encrypt the data, but I prefer signing it..</p>

<p>Is it possible in C#?</p>
","<p>there are plenty of schemes (involving HMAC) to perform message signature with symmetric (pre-shared) key material.    </p>

<p>possible duplicate:</p>

<p><a href=""https://stackoverflow.com/questions/8299768/using-symmetric-key-aes-128-to-sign-and-verify-a-message"">Using symmetric key (AES -128) to sign and verify a message</a></p>
","931","<c#><.net><encryption><digital-signature><encryption-symmetric>","0","0","2","2012-11-27 13:53:21","13585752","0","","","","","2012-11-27 13:36:56",""
"13585456","Shared-Key Signature","<p>I know that most uses of cryptographic signatures are with public/private keys, but I need to sign information using a pre-shared key. 
I know I can just encrypt the data, but I prefer signing it..</p>

<p>Is it possible in C#?</p>
","<p><a href=""http://en.wikipedia.org/wiki/Hash-based_message_authentication_code"" rel=""nofollow noreferrer"">HMAC</a> is the usual shared key signing algorithm, and it is doable in c#</p>

<p><a href=""https://stackoverflow.com/questions/6067751/how-to-generate-hmac-sha1-in-c"">How to generate HMAC-SHA1 in C#?</a> </p>
","931","<c#><.net><encryption><digital-signature><encryption-symmetric>","0","2","2","2012-11-27 13:53:21","13585752","0","","","","","2012-11-27 13:36:56",""
"25144304","EncryptByPassPhrase key given in bytes","<p>Friends,</p>

<p>I want to use <code>EncryptByPassPhrase</code> in SQL SERVER (which I found here <a href=""http://msdn.microsoft.com/en-us/library/ms190357.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/ms190357.aspx</a>) to update existing values in a table by encrypting them. However, the passphrase (or key) is given in bytes such as:</p>

<pre><code>private static readonly byte[] TrippleDesKey = new byte[] { 0xF1, 0x07, 0xE6, 0x13, 0xBA, 0x85, 0x7F, 0xDC, 0x6D, 0x85, 0x67, 0x9B, 0x68, 0x7A, 0xC7, 0x1F, 0x10, 0xBA, 0xB0, 0x2F, 0xA2, 0xAE, 0xDA, 0xEA };
</code></pre>

<p>I want to apply <code>EncryptByPassPhrase</code> using the <code>TrippleDesKey</code> variable. </p>

<p>Any suggestions on how I can do that? I assume if I convert the <code>TrippleDesKey</code> variable into string I could just simple use it <code>EncryptByPassPhrase</code>.</p>

<p>I tried converting the <code>TrippleDesKey</code> variable such as</p>

<pre><code>string result = System.Text.Encoding.UTF8.GetString(TrippleDesKey); 
Console.WriteLine(result);
</code></pre>

<p>and the ouptut was ï¿½ï¿½ï¿½ï¿½ï¿½mï¿½gï¿½hzï¿½ï¿½ï¿½/ï¿½ï¿½ï¿½ï¿½</p>

<p>I used ï¿½ï¿½ï¿½ï¿½ï¿½mï¿½gï¿½hzï¿½ï¿½ï¿½/ï¿½ï¿½ï¿½ï¿½ in EncryptByPassPhrase but no value is encrypted i.e., an empty string is returned.</p>
","<p>EncryptByPassPhrase can accept a binary (byte) value as the passphrase, so you should be able to pass the TrippleDesKey as a parameter to a stored procedure or statement. I threw this together as an example, but it should be close... </p>

<pre><code>string commandText = ""UPDATE MyTable SET EncryptedData = EncryptByPassPhrase(@DesKey, EncryptedData ) WHERE CustomerID = @ID"";

using (SqlConnection connection = new SqlConnection(connectionString))
{
    SqlCommand command = new SqlCommand(commandText, connection);
    command.Parameters.Add(""@DesKey"", SqlDbType.VarBinary);
    command.Parameters[""@DesKey""].Value = TrippleDesKey;

    command.Parameters.Add(""@ID"", SqlDbType.Int);
    command.Parameters[""@ID""].Value = customerID;

    try
    {
        connection.Open();
        Int32 rowsAffected = command.ExecuteNonQuery();
        Console.WriteLine(""RowsAffected: {0}"", rowsAffected);
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
    }
}
</code></pre>
","925","<c#><sql-server-2008><des><encryption-symmetric>","0","0","2","2014-08-05 17:31:57","25144897","2","","","","","2014-08-05 16:54:21",""
"25144304","EncryptByPassPhrase key given in bytes","<p>Friends,</p>

<p>I want to use <code>EncryptByPassPhrase</code> in SQL SERVER (which I found here <a href=""http://msdn.microsoft.com/en-us/library/ms190357.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/ms190357.aspx</a>) to update existing values in a table by encrypting them. However, the passphrase (or key) is given in bytes such as:</p>

<pre><code>private static readonly byte[] TrippleDesKey = new byte[] { 0xF1, 0x07, 0xE6, 0x13, 0xBA, 0x85, 0x7F, 0xDC, 0x6D, 0x85, 0x67, 0x9B, 0x68, 0x7A, 0xC7, 0x1F, 0x10, 0xBA, 0xB0, 0x2F, 0xA2, 0xAE, 0xDA, 0xEA };
</code></pre>

<p>I want to apply <code>EncryptByPassPhrase</code> using the <code>TrippleDesKey</code> variable. </p>

<p>Any suggestions on how I can do that? I assume if I convert the <code>TrippleDesKey</code> variable into string I could just simple use it <code>EncryptByPassPhrase</code>.</p>

<p>I tried converting the <code>TrippleDesKey</code> variable such as</p>

<pre><code>string result = System.Text.Encoding.UTF8.GetString(TrippleDesKey); 
Console.WriteLine(result);
</code></pre>

<p>and the ouptut was ï¿½ï¿½ï¿½ï¿½ï¿½mï¿½gï¿½hzï¿½ï¿½ï¿½/ï¿½ï¿½ï¿½ï¿½</p>

<p>I used ï¿½ï¿½ï¿½ï¿½ï¿½mï¿½gï¿½hzï¿½ï¿½ï¿½/ï¿½ï¿½ï¿½ï¿½ in EncryptByPassPhrase but no value is encrypted i.e., an empty string is returned.</p>
","<p>You can just join the bytes hex values in only one value and use it:</p>

<pre><code>new byte[] { 0xF1, 0x07, 0xE6, 0x13, 0xBA, 0x85, 0x7F, 0xDC, 0x6D, 0x85, 0x67, 0x9B, 0x68, 0x7A, 0xC7, 0x1F, 0x10, 0xBA, 0xB0, 0x2F, 0xA2, 0xAE, 0xDA, 0xEA } = 0xF107E613BA857FDC6D85679B687AC71F10BAB02FA2AEDAEA
</code></pre>

<p>Then use it like this: </p>

<pre><code>EncryptByPassPhrase( 0xF107E613BA857FDC6D85679B687AC71F10BAB02FA2AEDAEA, 'test')
</code></pre>
","925","<c#><sql-server-2008><des><encryption-symmetric>","0","0","2","2014-08-05 17:31:57","25144897","2","","","","","2014-08-05 16:54:21",""
"28243879","Chunking AES symmetric encryption","<p><strong>Use case 1 (working baseline):</strong></p>

<p><em>Use case one is straightforward and is implemented / working.</em></p>

<ol>
<li>In Java, Write a stream to disk in a single fell swoop. </li>
<li>Wrap output stream with symmetric cipher so that contents on disk are encrypted.</li>
<li>Later, read from disk. Wrap input stream with same symmetric cipher
in a single fell swoop so that contents retrieved from input stream
are plaintext and match original.</li>
</ol>

<p><strong>Use case 2 (no suitable solution determined):</strong></p>

<ol>
<li>In Java, Write a stream to disk.</li>
<li>Allow for subsequent bytes (""chunks"") to be appended to file.</li>
<li>Wrap output stream with symmetric cipher so that contents on disk are encrypted.</li>
<li>Use same cipher so that all chunks are encrypted in the same manner.</li>
<li>Later, read from disk. Wrap input stream with same symmetric cipher
in a single fell swoop so that contents retrieved from input stream
are plaintext and match original.</li>
</ol>

<p><strong>Problem statement:</strong></p>

<p>Encrypting and decrypting ""abc"" does not yield the same result as encrypting and decrypting ""a"", ""b"", and ""c"" separately, and therefore the ""chunked"" file described in use case 2 will no be successfully decrypted.</p>

<pre><code>// e.g.
decrypt(encrypt(""abc"")) != decrypt(encrypt(""a"") + encrypt(""b"") + encrypt(""c""))
</code></pre>

<p><strong>The Actual Question:</strong></p>

<p>... so the question is, how might one configure a Java cipher stream that can encrypt one chunk at a time, (a) without having prior knowledge of encrypted chunks, and (b) be decipherable using a <strong>single</strong> input stream cipher wrapper (without requiring knowledge of indexes where file was appended)...</p>
","<p>Unfortunately, in this case you can't have your cake and eat it too.</p>

<p>You must either</p>

<ol>
<li>write some length bytes at the start of each chunk, or</li>
<li>use an encryption algorithm where <code>decrypt(encrypt(""abc"")) == decrypt(encrypt(""a"") + encrypt(""b"") + encrypt(""c""))</code> (aka trivial, and not recommended)</li>
</ol>

<p>Number 1 is definitely a better choice, and is easier than you might think. Details below.</p>

<p>Number 2, you could use something like a <a href=""http://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher"" rel=""nofollow"">Vigenere cipher</a>, which would allow you to decrypt the whole file in one fell swoop, but would be a compromise in terms of encryption strength.</p>

<p><strong>Details on number 1</strong></p>

<p>The way you would do this is by reserving, for instance, four bytes (a 32-bit integer) at the beginning of each chunk. This integer represents the length of the chunk. To decrypt you would therefore:</p>

<ol>
<li>Read the first four bytes and convert to integer <code>n</code>.</li>
<li>Read the next <code>n</code> bytes and decrypt.</li>
<li>Read the next four bytes and convert to integer <code>n</code>.</li>
<li>Read the next <code>n</code> bytes, decrypt and append to the first decrypted chunk.</li>
<li>Repeat steps 3 and 4 until end of file is reached.</li>
</ol>

<p>And obviously this makes the chunk encryption easy because all you have to do is first write how many encrypted bytes you're about to append.</p>
","918","<java><encryption><aes><encryption-symmetric><symmetric-key>","0","0","2","2015-02-04 06:30:41","","5","3","433344","","2015-02-04 04:55:59","2015-01-30 20:14:24",""
"28243879","Chunking AES symmetric encryption","<p><strong>Use case 1 (working baseline):</strong></p>

<p><em>Use case one is straightforward and is implemented / working.</em></p>

<ol>
<li>In Java, Write a stream to disk in a single fell swoop. </li>
<li>Wrap output stream with symmetric cipher so that contents on disk are encrypted.</li>
<li>Later, read from disk. Wrap input stream with same symmetric cipher
in a single fell swoop so that contents retrieved from input stream
are plaintext and match original.</li>
</ol>

<p><strong>Use case 2 (no suitable solution determined):</strong></p>

<ol>
<li>In Java, Write a stream to disk.</li>
<li>Allow for subsequent bytes (""chunks"") to be appended to file.</li>
<li>Wrap output stream with symmetric cipher so that contents on disk are encrypted.</li>
<li>Use same cipher so that all chunks are encrypted in the same manner.</li>
<li>Later, read from disk. Wrap input stream with same symmetric cipher
in a single fell swoop so that contents retrieved from input stream
are plaintext and match original.</li>
</ol>

<p><strong>Problem statement:</strong></p>

<p>Encrypting and decrypting ""abc"" does not yield the same result as encrypting and decrypting ""a"", ""b"", and ""c"" separately, and therefore the ""chunked"" file described in use case 2 will no be successfully decrypted.</p>

<pre><code>// e.g.
decrypt(encrypt(""abc"")) != decrypt(encrypt(""a"") + encrypt(""b"") + encrypt(""c""))
</code></pre>

<p><strong>The Actual Question:</strong></p>

<p>... so the question is, how might one configure a Java cipher stream that can encrypt one chunk at a time, (a) without having prior knowledge of encrypted chunks, and (b) be decipherable using a <strong>single</strong> input stream cipher wrapper (without requiring knowledge of indexes where file was appended)...</p>
","<p>I found a solution close enough to my particular problem (stealing from <a href=""https://stackoverflow.com/questions/10283637/how-to-append-to-aes-encrypted-file"">this post</a>), albeit slightly different from the problem statement (not a single stream).</p>

<pre><code>public static void appendAES(File file, byte[] data, byte[] key) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {
    RandomAccessFile rfile = new RandomAccessFile(file,""rw"");
    byte[] iv = new byte[16];
    byte[] lastBlock = null;
    if (rfile.length() % 16L != 0L) {
        throw new IllegalArgumentException(""Invalid file length (not a multiple of block size)"");
    } else if (rfile.length() == 16) {
        throw new IllegalArgumentException(""Invalid file length (need 2 blocks for iv and data)"");
    } else if (rfile.length() == 0L) { 
        // new file: start by appending an IV
        new SecureRandom().nextBytes(iv);
        rfile.write(iv);
        // we have our iv, and there's no prior data to reencrypt
    } else { 
        // file length is at least 2 blocks
        rfile.seek(rfile.length()-32); // second to last block
        rfile.read(iv); // get iv
        byte[] lastBlockEnc = new byte[16]; 
            // last block
            // it's padded, so we'll decrypt it and 
            // save it for the beginning of our data
        rfile.read(lastBlockEnc);
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key,""AES""), new IvParameterSpec(iv));
        lastBlock = cipher.doFinal(lastBlockEnc);
        rfile.seek(rfile.length()-16); 
            // position ourselves to overwrite the last block
    } 
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key,""AES""), new IvParameterSpec(iv));
    byte[] out;
    if (lastBlock != null) { // lastBlock is null if we're starting a new file
        out = cipher.update(lastBlock);
        if (out != null) rfile.write(out);
    }
    out = cipher.doFinal(data);
    rfile.write(out);
    rfile.close();
}

public static void decryptAES(File file, OutputStream out, byte[] key) throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException {
    // nothing special here, decrypt as usual
    FileInputStream fin = new FileInputStream(file);
    byte[] iv = new byte[16];
    if (fin.read(iv) &lt; 16) {
        throw new IllegalArgumentException(""Invalid file length (needs a full block for iv)"");
    };
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key,""AES""), new IvParameterSpec(iv));
    byte[] buff = new byte[1&lt;&lt;13]; //8kiB
    while (true) {
        int count = fin.read(buff);
        if (count == buff.length) {
            out.write(cipher.update(buff));
        } else {
            out.write(cipher.doFinal(buff,0,count));
            break;
        }
    }
    fin.close();
}

public static void main(String[] args) throws Exception {

    // prep the new encrypted output file reference
    File encryptedFileSpec = File.createTempFile(""chunked_aes_encrypted."", "".test"");

    // prep the new decrypted output file reference
    File decryptedFileSpec = File.createTempFile(""chunked_aes_decrypted."", "".test"");

    // generate a key spec 
    byte[] keySpec = new byte[]{0,12,2,8,4,5,6,7, 8, 9, 10, 11, 12, 13, 14, 15};

    // for debug/test purposes only, keep track of what's written 
    StringBuilder plainTextLog = new StringBuilder();

    // perform chunked output
    for (int i = 0; i&lt;1000; i++) {

        // generate random text of variable length
        StringBuilder text = new StringBuilder();
        Random rand = new Random();
        int  n = rand.nextInt(5) + 1;
        for (int j = 0; j &lt; n; j++) {
            text.append(UUID.randomUUID().toString()); // append random string
        }

        // record it for later comparison
        plainTextLog.append(text.toString());

        // write it out
        byte[] b = text.toString().getBytes(""UTF-8"");
        appendAES(encryptedFileSpec, b, keySpec);
    }

    System.out.println(""Encrypted "" + encryptedFileSpec.getAbsolutePath());

    // decrypt
    decryptAES(encryptedFileSpec, new FileOutputStream(decryptedFileSpec), keySpec);
    System.out.println(""Decrypted "" + decryptedFileSpec.getAbsolutePath());

    // compare expected output to actual
    MessageDigest md = MessageDigest.getInstance(""MD5"");
    byte[] expectedDigest = md.digest(plainTextLog.toString().getBytes(""UTF-8""));

    byte[] expectedBytesEncoded = Base64.getEncoder().encode(expectedDigest);
    System.out.println(""Expected decrypted content: "" + new String(expectedBytesEncoded));

    byte[] actualBytes = Files.readAllBytes(Paths.get(decryptedFileSpec.toURI()));
    byte[] actualDigest = md.digest(actualBytes);
    byte[] actualBytesEncoded = Base64.getEncoder().encode(actualDigest);
    System.out.println(""&gt; Actual decrypted content: "" + new String(actualBytesEncoded));


}
</code></pre>
","918","<java><encryption><aes><encryption-symmetric><symmetric-key>","0","0","2","2015-02-04 06:30:41","","5","3","433344","","2015-02-04 04:55:59","2015-01-30 20:14:24",""
"33902316","Exchange symmetric keys between client and server using public key","<p>I wish to exchange symmetric keys between a client and server program running over Java RMI.</p>

<p>My server makes a public key:</p>

<pre><code>KeyPairGenerator keyGen = null;
try {
    keyGen = KeyPairGenerator.getInstance(""DSA"", ""SUN"");
} catch (NoSuchAlgorithmException e) {
    e.printStackTrace();
} catch (NoSuchProviderException e) {
    e.printStackTrace();
}
KeyPair pair = keyGen.generateKeyPair();
this.priv = pair.getPrivate();
this.pub = pair.getPublic();
</code></pre>

<p>I send the public key to the client. The client will make a Cipher using the server's public key. I want to use this Cipher to encrypt a SealedObject encapsulating the symmetric key created by the client and send it to the server. </p>

<pre><code>//create cipher using server's public key
Cipher cipher = null;
try {
    cipher = Cipher.getInstance(serverKey.getAlgorithm(), ""SUN"");
} catch (NoSuchAlgorithmException e) {
    e.printStackTrace();
} catch (NoSuchPaddingException e) {
    e.printStackTrace();
} catch (NoSuchProviderException e) {
    e.printStackTrace();
}
try {
    cipher.init(Cipher.ENCRYPT_MODE, serverKey);
} catch (InvalidKeyException e) {
    e.printStackTrace();
}
</code></pre>

<p>But when I run the program I have an exception when initializing the cipher:</p>

<pre><code>java.security.NoSuchAlgorithmException: No such algorithm: DSA
at javax.crypto.Cipher.getInstance(Cipher.java:646)
at javax.crypto.Cipher.getInstance(Cipher.java:568)
at Client.main(Client.java:91)
</code></pre>

<p>I don't understand why I get this NoSuchAlgorithm exception. I don't get this if I make a public key with RSA rather than DSA but RSA gives me:</p>

<pre><code>javax.crypto.IllegalBlockSizeException: 
Data must not be longer than 117 bytes
</code></pre>

<p>So what am I supposed to use to securely send the sealed object containing my symmetric key?</p>
","<p>As @zapl comments, DSA is not an encryption algorithm, and RSA can only encrypt data with size less than the key size minus a small mostly-fixed overhead (11 bytes for PKCS1, which is the default and thus you used; somewhat more for OAEP).</p>

<p>Although not in your posted code, I'll bet the problem is you are trying to seal the <code>SecretKey</code> object. Encryption works only on byte (or bit) sequences, represented in Java by byte arrays or sometimes portions of arrays, so <code>SealedObject</code> actually serializes the object you give it to bytes and encrypts those bytes, and conversely decrypts those bytes and deserializes them to re-form the object. Java serialization has some overhead, and the various <code>Key</code> types in particular are organized in a hierarchy that exacerbates this. For example serializing a <code>SecretKey</code> from <code>KeyGenerator.getInstance(""TDES"")</code> is 282 bytes, much too large for RSA-1024 which as your exception says can only be 117 bytes.</p>

<p>Instead <strong>seal only the bytes of the key value</strong> obtained by <code>SecretKey.getEncoded()</code>. On the receiver (server) put the bytes back in a <code>SecretKeySpec</code> (with the correct algorithm; send that also if not fixed in advance) and you can actually use it as <code>Key</code> for symmetric even without running it through a factory (unlike asymmetric keys which have more structure). Even a simple <code>byte[]</code> has <em>some</em> serialization overhead, but not enough to cause a problem here.</p>
","915","<java><rmi><public-key-encryption><encryption-symmetric>","0","0","1","2015-11-25 05:47:52","33909289","4","3","","","","2015-11-24 19:37:26",""
"17069324","PHP MYCRYPT - RIJNDAEL_128 with Mcrypt CBC gives the different encryption string everytime","<p>I am back again with a PHP+RIJNDAEl_128+CBC.</p>

<p>I am successful in encryption and decryption to the raw string.</p>

<p>But the only problem I am facing is I get the DIFFERENT ENCRYPTION string every time.</p>

<p>Which I believe should be same every time ideally.</p>

<p>Below is the code:</p>

<pre><code>class Encypt{

const ENCRYPTION_KEY = '3aa22e01c04c7059778c54d122b0273689fba00f4a166a66d15f7ba6a8ba8743';


function createQueryString(){
$str = ""1844427316My Name Is Dave1336407610774000000000000"";
$encStr = $this-&gt;encrypt($str);

return $encStr;
}

function encrypt($strValue){
$iv =mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128,MCRYPT_MODE_CBC),MCRYPT_RAND);
$encData = trim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128,self::ENCRYPTION_KEY, $strValue,MCRYPT_MODE_CBC,$iv)));
            $data['iv'] = $iv;
            $data['encdata'] = $encData;

            return $data;
}
 /**
     *  Function to decrypt data using AES Encryption Symmetric Algorithm 128 bytes
     */
    function decrypt($strValue, $iv){
            return trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_128,ENCRYPTION_KEY,base64_decode($strValue),MCRYPT_MODE_CBC,$iv));
    }

}    
$enc_obj = new Encypt();

$encstr = $enc_obj-&gt;createQueryString();

echo ""Encrypted Str:--&gt;"".$encstr['encdata'].""&lt;br&gt;"";
$deCrypt = $enc_obj-&gt;decrypt($encstr['encdata'], $encstr['iv']);
echo ""Decrypted Str:--&gt;"".$deCrypt;
</code></pre>
","<p>The different values you receive each time for the encrypted text is normal regarding the different IVs in every run. This is actually part of the algorithm, and makes it more secure.</p>
","901","<php><mcrypt><encryption-symmetric><rijndael><cbc-mode>","1","2","2","2015-01-28 14:02:58","","4","","","","","2013-06-12 15:23:58",""
"17069324","PHP MYCRYPT - RIJNDAEL_128 with Mcrypt CBC gives the different encryption string everytime","<p>I am back again with a PHP+RIJNDAEl_128+CBC.</p>

<p>I am successful in encryption and decryption to the raw string.</p>

<p>But the only problem I am facing is I get the DIFFERENT ENCRYPTION string every time.</p>

<p>Which I believe should be same every time ideally.</p>

<p>Below is the code:</p>

<pre><code>class Encypt{

const ENCRYPTION_KEY = '3aa22e01c04c7059778c54d122b0273689fba00f4a166a66d15f7ba6a8ba8743';


function createQueryString(){
$str = ""1844427316My Name Is Dave1336407610774000000000000"";
$encStr = $this-&gt;encrypt($str);

return $encStr;
}

function encrypt($strValue){
$iv =mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128,MCRYPT_MODE_CBC),MCRYPT_RAND);
$encData = trim(base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128,self::ENCRYPTION_KEY, $strValue,MCRYPT_MODE_CBC,$iv)));
            $data['iv'] = $iv;
            $data['encdata'] = $encData;

            return $data;
}
 /**
     *  Function to decrypt data using AES Encryption Symmetric Algorithm 128 bytes
     */
    function decrypt($strValue, $iv){
            return trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_128,ENCRYPTION_KEY,base64_decode($strValue),MCRYPT_MODE_CBC,$iv));
    }

}    
$enc_obj = new Encypt();

$encstr = $enc_obj-&gt;createQueryString();

echo ""Encrypted Str:--&gt;"".$encstr['encdata'].""&lt;br&gt;"";
$deCrypt = $enc_obj-&gt;decrypt($encstr['encdata'], $encstr['iv']);
echo ""Decrypted Str:--&gt;"".$deCrypt;
</code></pre>
","<p>Your encrypt function has a call to 
<code>mcrypt_create_iv(&lt;&lt;iv_size&gt;&gt;, MCRYPT_RAND);</code></p>

<p>Since the call has <code>MCRYPT_RAND</code>(system random number generator) as the source, a new Initialization Vector created every-time will be different from previous ones. </p>

<p>This will result in different encrypted string every-time. You can decrypt the cypher-text using the same Initialization Vector as used in encryption process.</p>
","901","<php><mcrypt><encryption-symmetric><rijndael><cbc-mode>","1","1","2","2015-01-28 14:02:58","","4","","","","","2013-06-12 15:23:58",""
"28926262","how to fix the error in Mono-alphabetic Cipher decryption?","<p>i have written a program on mono-alphabetic ciphers , my code is running perfect for encryption but it give me wrong values when i am doing decryption.
here is my code</p>

<pre><code> using System;

class SubstitutionCipher
{
static void Main()
{
    string key = ""zyxwvutsrqponmlkjihgfedcba"";


    string plainText = ""the quick brown fox jumps over the lazy dog"";
    string cipherText = Encrypt(plainText, key);
    string decryptedText = Decrypt(cipherText, key);

    Console.WriteLine(""Plain     : {0}"", plainText);
    Console.WriteLine(""Encrypted : {0}"", cipherText);
    Console.WriteLine(""Decrypted : {0}"", decryptedText);
    Console.ReadKey();
}
static string Encrypt(string plainText, string key)
{
    char[] chars = new char[plainText.Length];
    for (int i = 0; i &lt; plainText.Length; i++)
    {
        if (plainText[i] == ' ')
        {
            chars[i] = ' ';
        }
        else
        {
            int j = plainText[i] - 97;
            chars[i] = key[j];
        }
    }
    return new string(chars);
}
public string reverse(string cipherText)
{
    char[] charArray = cipherText.ToCharArray();
    Array.Reverse(charArray);

    return new string(charArray);
}
static string Decrypt(string cipherText, string key)
{
    char[] chars = new char[cipherText.Length];
    for (int i = 0; i &lt; cipherText.Length; i++)
    {
        if (cipherText[i] == ' ')
        {
            chars[i] = ' ';
        }
        else
        {
            int j = key.IndexOf(cipherText[i]) - 97;
            chars[i] = (char)j;
        }
    }
    return new string(chars);
}
}
</code></pre>

<p>If key= zyxwvutsrqponmlkjihgfedcba</p>

<p>Outputs:</p>

<p>Plain : the quick brown fox jumps over the lazy dog</p>

<p>Encrypted : wyo xevks flnqa tnu hecdr nbol wyo pjzi gnm</p>

<p>Decrypted : ???????????????????????????????????????????</p>

<p>its decryption not working </p>
","<p>Replace the line in Decrypt function:</p>

<pre><code>int j = key.IndexOf(cipherText[i]) - 97;
</code></pre>

<p>with </p>

<pre><code>int j= key.IndexOf(cipherText[i]) + 97;
</code></pre>
","886","<c#><.net><encryption-symmetric><encryption>","-2","0","1","2015-07-28 04:16:24","28927316","3","0","1816837","","2015-03-08 15:39:46","2015-03-08 12:15:01",""
"13593171","perl encryption script IDEA","<p>Hi everyone im making a perl script to encrypt and decrypt text, i just have started i have this:</p>

<pre><code>#!/usr/bin/perl

use Crypt::IDEA;

my $key = pack(""H32"", ""0123456789ABCDEF0123456789ABCDEF"");
my $cipher = new IDEA $key;
my $palabra= ""plaintex"";
my $ciphertext = $cipher-&gt;encrypt($palabra);  # NB - 8 bytes

print unpack(""H16"", $ciphertext), ""\n"";

my $plaintext = $cipher-&gt;decrypt($ciphertext);

print $plaintext , ""\n"";
</code></pre>

<p>The trouble is  the text to encrypt must be of 8 bytes of length. why? if i put ""plaintext"" instead ""plaintex"" gives me error.</p>

<pre><code>input must be 8 bytes long at /usr/lib/perl5/site_perl/Crypt/IDEA.pm line 62.
</code></pre>
","<p>Wrap <strong>Crypt::IDEA</strong> with <strong>Crypt::CBC</strong> - it will allow to use non-aligned data length. See <a href=""http://search.cpan.org/~lds/Crypt-CBC-2.31/CBC.pm"">doc for Crypt::CBC</a>.</p>

<p>This is because IDEA and many other crypt algorithms are block encryption algorithms. This means they operate with blocks of data of specified size, so data you encrypting must be prepared (padded with zeros or whatever)</p>
","885","<linux><perl><encryption><encryption-symmetric>","0","5","2","2012-11-28 00:23:40","13593339","2","","1765681","","2012-11-27 21:19:11","2012-11-27 21:13:45",""
"13593171","perl encryption script IDEA","<p>Hi everyone im making a perl script to encrypt and decrypt text, i just have started i have this:</p>

<pre><code>#!/usr/bin/perl

use Crypt::IDEA;

my $key = pack(""H32"", ""0123456789ABCDEF0123456789ABCDEF"");
my $cipher = new IDEA $key;
my $palabra= ""plaintex"";
my $ciphertext = $cipher-&gt;encrypt($palabra);  # NB - 8 bytes

print unpack(""H16"", $ciphertext), ""\n"";

my $plaintext = $cipher-&gt;decrypt($ciphertext);

print $plaintext , ""\n"";
</code></pre>

<p>The trouble is  the text to encrypt must be of 8 bytes of length. why? if i put ""plaintext"" instead ""plaintex"" gives me error.</p>

<pre><code>input must be 8 bytes long at /usr/lib/perl5/site_perl/Crypt/IDEA.pm line 62.
</code></pre>
","<p>Try <a href=""http://search.cpan.org/perldoc/Crypt%3a%3aCBCeasy"" rel=""nofollow""> Crypt::CBCeasy </a></p>

<pre><code>#!/usr/bin/perl --
use strict; use warnings;
use Crypt::CBCeasy qw/ IDEA /;

my $key     = 'shabba';
my $text    = ""plaintex""; ## not a file, not -f -r $text
my $crypted = IDEA::encipher( $key, $text );
my $detext  = IDEA::decipher( $key, $crypted );
print join ""\n"", $key, $text, unpack( 'H*', $crypted ), $detext, '';

__END__
shabba
plaintex
53616c7465645f5fb5ec01275eb466c4b9b69f3edb7568b42c1713416d33b7aa
plaintex
</code></pre>
","885","<linux><perl><encryption><encryption-symmetric>","0","1","2","2012-11-28 00:23:40","13593339","2","","1765681","","2012-11-27 21:19:11","2012-11-27 21:13:45",""
"18219053","How can I create a shared-secret voucher code system between 2 independent servers?","<p>Given this workflow:</p>

<p><strong>Server A</strong></p>

<ol>
<li>User authenticates.</li>
<li>User purchases randomly generated unique voucher code using shared secret to use an application on on server B.</li>
</ol>

<p><strong>Server B</strong></p>

<ol>
<li>User authenticates.</li>
<li>User inputs voucher code.</li>
<li>Server B validates code is legitimate using shared secret</li>
<li>Server B grants access to the application.</li>
</ol>

<p>I need a way in PHP to implement the functions <code>generateVoucherCode</code> and <code>validateVoucherCode</code> as shown below:</p>

<p><strong>Server A</strong></p>

<pre><code>$voucher = generateVoucherCode(""someSharedSecret"");
</code></pre>

<p><strong>Server B</strong></p>

<pre><code>$isValid = validateVoucherCode($userInputtedCode, ""someSharedSecret"");
if($isValid) {
    // allow access to application
}
</code></pre>
","<p>Validating legitimacy through a shared secret is what <a href=""http://en.wikipedia.org/wiki/Hash-based_message_authentication_code"" rel=""nofollow"">HMACs</a> are for. You can generate a HMAC in PHP through <a href=""http://php.net/manual/en/function.hash-hmac.php"" rel=""nofollow""><code>hash_hmac</code></a>. Your workflow would be:</p>

<ol>
<li>Server A generates an one-use code (in any manner you want) and calculates its HMAC. The pair of code + HMAC is given to the user as a voucher code.</li>
<li>User presents voucher to server B.</li>
<li>Server B isolates the one-use code from the voucher and independently calculates its HMAC using the shared secret. If the calculated HMAC matches the one in the voucher then the voucher is genuine.</li>
</ol>

<p>Example voucher generation:</p>

<pre><code>$secret = '$uper$ecret$tring';
$code = 'a pet unicorn';
$voucher = $code.'/'.hash_hmac('sha512', $code, $secret);

echo 'Your voucher is '.$voucher';
</code></pre>

<p>Example voucher verification:</p>

<pre><code>$secret = '$uper$ecret$tring';
list ($code, $hmac) = explode('/', $voucher);
$verify_hmac = hash_hmac('sha512', $code, $secret);
if ($hmac === $verify_hmac) {
    echo 'Your voucher can be redeemed for '.$code';
}
else {
    echo 'Invalid voucher, sorry';
}
</code></pre>
","873","<php><encryption-symmetric>","4","2","1","2013-08-13 21:16:01","18219211","1","2","1234799","","2013-08-13 21:16:01","2013-08-13 20:55:17",""
"26100541","Objective c decode encrypted data","<p>I receive a piece of encrypted json from a rest web service call. The following ruby code properly decodes the response back to json. The received data is first base64 decoded, then the first 16 bytes is treated as the iv, and the rest as data. The key is de-hexed (lack of better expression) first. </p>

<pre><code>encrypted = Base64.decode64(res) #base 64 decode

de_cipher = OpenSSL::Cipher::Cipher.new(""AES-128-CBC"")
de_cipher.decrypt
de_cipher.key = [key].pack('H*') #de-hex the key
de_cipher.iv = encrypted[0..15] # the first 16 bytes is the IV

descrypted = de_cipher.update(encrypted) &lt;&lt; de_cipher.final;
json_string = descrypted[16 .. (descrypted.size - 1)] #taking away the first 16, rest is data
</code></pre>

<p>The ruby code was merely a preparation for me to understand the data. What I really need is to call this web service and decode in objective c on iPhone. But so far there is no luck, and I cannot decrypt the received string to proper json. Below is what I have:</p>

<pre><code>//self.responseData is received through NSURLConnection, pretty sure it is piece together correctly. But there is \r\n at the end, which made it not correct length for base64, so I took the last two bytes away.
NSString *str = [[[NSString alloc] initWithData:[self.responseData subdataWithRange:(NSRange){0, self.responseData.length - 2}] encoding:NSUTF8StringEncoding] autorelease];
NSLog(@""tvm get token response = [%@]"",str);

//CreateDataWithHexString is something I found on stack overflow, supposed to reverse hex string to binary
NSString * key =[[MyProfile sharedInstance] getOneProperty:TVM_KEY];
//NSData *keyData = [[NSData alloc] initWithBase64EncodedString:key options:0];
NSData *keyData = [self CreateDataWithHexString:key];

//base64 decode the received string
NSData * whole = [[NSData alloc] initWithBase64EncodedString:str options:0];
NSData * iv = [whole subdataWithRange:(NSRange){0, 16}];
NSData * data = [whole subdataWithRange:(NSRange){16, whole.length - 16}];

CCCryptorStatus ccStatus   = kCCSuccess;
size_t          cryptBytes = 0;    // Number of bytes moved to buffer.
NSMutableData  *dataOut    = [NSMutableData dataWithLength:data.length + kCCBlockSizeAES128];

ccStatus = CCCrypt(kCCDecrypt,
                   kCCAlgorithmAES128,
                   kCCOptionPKCS7Padding,
                   keyData.bytes,
                   kCCKeySizeAES128,
                   iv.bytes,
                   data.bytes,
                   data.length,
                   dataOut.mutableBytes,
                   dataOut.length,
                   &amp;cryptBytes);

if (ccStatus == kCCSuccess) {
    dataOut.length = cryptBytes;
    NSString * json = [dataOut base64Encoding];
    NSLog(@""json = [%@]"", dataOut);
    NSLog(@""json = [%@]"", json);
}
else {
</code></pre>

<p>The key was initially generated as following, hope it makes sense to de-hex as above:</p>

<pre><code>CFUUIDRef theKeyUUID = CFUUIDCreate(NULL);
CFStringRef keyuuid = CFUUIDCreateString(NULL, theKeyUUID);
CFRelease(theKeyUUID);
//server side expect a uuid without those -'s.
NSString * key = [(__bridge NSString *)keyuuid stringByReplacingOccurrencesOfString:@""-"" withString:@""""];
CFRelease(keyuuid); 
</code></pre>

<p>Below is CreateDataWithHexString I found on stack overflow, hopefully it is for the right purpose here:</p>

<pre><code>-(NSData *)CreateDataWithHexString:(NSString *)inputString
{
NSUInteger inLength = [inputString length];

unichar *inCharacters = alloca(sizeof(unichar) * inLength);
[inputString getCharacters:inCharacters range:NSMakeRange(0, inLength)];

UInt8 *outBytes = malloc(sizeof(UInt8) * ((inLength / 2) + 1));

NSInteger i, o = 0;
UInt8 outByte = 0;
for (i = 0; i &lt; inLength; i++) {
    UInt8 c = inCharacters[i];
    SInt8 value = -1;

    if      (c &gt;= '0' &amp;&amp; c &lt;= '9') value =      (c - '0');
    else if (c &gt;= 'A' &amp;&amp; c &lt;= 'F') value = 10 + (c - 'A');
    else if (c &gt;= 'a' &amp;&amp; c &lt;= 'f') value = 10 + (c - 'a');

    if (value &gt;= 0) {
        if (i % 2 == 1) {
            outBytes[o++] = (outByte &lt;&lt; 4) | value;
            outByte = 0;
        } else {
            outByte = value;
        }

    } else {
        if (o != 0) break;
    }
}

return [[NSData alloc] initWithBytesNoCopy:outBytes length:o freeWhenDone:YES];
}
</code></pre>
","<p>It ended up the decryption part was alright, but the display was wrong. It is all because of this one line:</p>

<pre><code>NSString * json = [dataOut base64Encoding]; 
</code></pre>

<p>I was not looking at the decrypted data, but rather its <code>Base64</code> encoded string, obviously it won't look like a valid <code>JSON</code>.</p>
","873","<objective-c><rest><encryption><hex><encryption-symmetric>","2","1","1","2014-10-01 23:56:17","26111688","0","","","","","2014-09-29 12:58:31",""
"14051128","encrypt/decrypt sensitive(mostly passwords) data in our java spring based application","<p>We are developing an application using java spring framework to manage multiple devices automatically. In the initial configuration of our application user selects the devices that needed to be managed and enters their credentials. At this time, we are saving these credentials in plain text into database. Now I needed to write an utility class to encrypt this sensitive data while saving it into DB and decrypt while retrieving them back. Basically, we don't want everyone to see these credentials by simply looking into db tables.
What is the best way to this? Sample code snippet is very helpful...</p>
","<p>I believe that <a href=""http://static.springsource.org/spring-security/site/docs/3.0.x/reference/core-services.html"" rel=""nofollow"">PasswordEncoder</a> can help you.</p>
","873","<java><spring><encryption><public-key-encryption><encryption-symmetric>","-3","0","1","2012-12-27 07:38:34","","2","","","","","2012-12-27 07:36:01",""
"28095230","Compare Encrypted Bank Account Details without full Decryption","<p>I am building a database that stores employee information, including bank account details. The bank account details are stored so that we can check for current or past staff using our company, which in our case might be a reason to be concerned about fraud. I have been reading up on SQL Server 2008 R2 Encrption and Decryption on <a href=""https://msdn.microsoft.com/en-GB/library/ms179331(v=sql.105).aspx"" rel=""nofollow noreferrer"">MSDN</a> and other places and have come up with the following sample script:</p>

<pre><code>IF NOT EXISTS(SELECT * FROM sys.symmetric_keys WHERE symmetric_key_id = 101)
    CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'BankDetai!5'
GO

CREATE CERTIFICATE Employees_01 WITH SUBJECT = 'Employee Bank Account Details'
GO

CREATE SYMMETRIC KEY AccountNos_01
    WITH ALGORITHM = AES_256
    ENCRYPTION BY CERTIFICATE Employees_01
GO

CREATE TABLE #Bank_Accounts
( Id            INT IDENTITY(1,1)   NOT NULL    CONSTRAINT PK_BankAccount_Id PRIMARY KEY CLUSTERED (Id ASC)
 ,AccountNumber VARBINARY(128)      NOT NULL
 ,BankName      NVARCHAR(255)       NOT NULL
 ,CountryCode   VARCHAR(2)          NOT NULL
 ,CreateDate    DATETIME2(0)        NOT NULL
 ,EmployeeId    INT                 NOT NULL
 ,IsActive      BIT                 NOT NULL
 ,SortCode      VARBINARY(128)      NOT NULL
);

OPEN SYMMETRIC KEY AccountNos_01
    DECRYPTION BY CERTIFICATE Employees_01;

CREATE TABLE #SampleBankAccounts
( Id INT IDENTITY(1,1)
 ,AccountNumber VARCHAR(255)
 ,BankName      NVARCHAR(255)
 ,CountryCode   VARCHAR(2)
 ,EmployeeId    INT NOT NULL
 ,IsActive      BIT
 ,SortCode      VARCHAR(255))

INSERT #SampleBankAccounts
SELECT * FROM
(   SELECT
         '123456789'    AccountNo
        ,'Barclays'     BankName
        ,'US'           Country
        ,1              Employee
        ,1              IsActive
        ,'12-34-56'     SortCode
UNION
    SELECT
         '9876543210'
        ,'Barclays'
        ,'US'
        ,1
        ,0
        ,'12-34-56'
UNION
    SELECT
         '111111111111'
        ,'HSBC'
        ,'UK'
        ,2
        ,1
        ,'222222'
UNION
    SELECT
         'IBAN 123 456 9875 3215'
        ,'Nationwide'
        ,'ES'
        ,3
        ,1
        ,'00_gn321654'
)AS Samples
ORDER BY Employee

MERGE #Bank_Accounts        AS Target
USING #SampleBankAccounts   AS Source   ON Target.EmployeeId = Source.EmployeeId
                                            AND Source.AccountNumber = Target.AccountNumber
                                            AND Source.BankName = Target.BankName
                                            AND Source.CountryCode = Target.CountryCode
                                            AND Source.SortCode = Target.SortCode
WHEN NOT MATCHED
    THEN INSERT (AccountNumber, BankName,CountryCode,CreateDate,EmployeeId,IsActive,SortCode)
        VALUES (
             ENCRYPTBYKEY(KEY_GUID('AccountNos_01'),Source.AccountNumber)
            ,Source.BankName
            ,Source.CountryCode
            ,GETDATE()
            ,Source.EmployeeId
            ,Source.IsActive
            ,ENCRYPTBYKEY(KEY_GUID('AccountNos_01'),Source.SortCode));
GO


DROP TABLE #SampleBankAccounts
</code></pre>

<p>That seems to work fine, but now I need to take a variable e.g. <code>@AccountNo</code> and see if it matches any of the bank accounts we have stored (I'll use a stored procedure in all likelihood). I would much rather avoid decryption in any scripts if possible, so I wondered if it was possible to encrypt the <code>@AccountNo</code> variable and then compare it, so we might see a match:</p>

<pre><code>DECLARE @MyTestBankAccount NVARCHAR(255) = '123456789'
DECLARE @MyEncryptedTestBankAccount VARBINARY(128)

OPEN SYMMETRIC KEY AccountNos_01
    DECRYPTION BY CERTIFICATE Employees_01;

SELECT @MyEncryptedTestBankAccount = ENCRYPTBYKEY(KEY_GUID('AccountNos_01'),@MyTestBankAccount)

SELECT
     AccountNumber
    ,EmployeeId
FROM Bank_Accounts
WHERE
    @MyEncryptedTestBankAccount = AccountNumber
</code></pre>

<p>This does not work; as you can see, I use an account number that should be present in the table, but no results are returned. I have tried to decrypt the account number column and compare it to the variable, but I get a load of Chinese characters coming out (much as in <a href=""https://stackoverflow.com/questions/11338900/decryption-of-an-sql-encrypted-string"">this question</a>), and they do not match the characters created by encrypting and decrypting the variable, so that doesn't work for a match either...</p>

<p>So why does the following query (using data from above) not give me the encrypted and decrypted values for the account details? Can I use this method to search employee bank accounts against a given bank account?</p>

<pre><code>OPEN SYMMETRIC KEY AccountNos_01
    DECRYPTION BY CERTIFICATE Employees_01;
SELECT
     AccountNumber                                  AS Encrypted_AccountNo
    ,EmployeeId                                     AS EmployeeId
    ,CONVERT(NVARCHAR,DECRYPTBYKEY(AccountNumber))  AS Decrypted_AccountNo
FROM Bank_Accounts
</code></pre>
","<p>So I found the answer: exit SQL Server and re-enter.</p>

<p>Something must have had to be updated to work, because now everything is fine.</p>

<blockquote>
  <p>~gentle screaming~</p>
</blockquote>
","863","<sql><sql-server><sql-server-2008-r2><encryption-symmetric><sensitive-data>","2","0","1","2015-05-28 20:05:40","","3","","-1","","2017-05-23 12:21:52","2015-01-22 17:40:00",""
"12270141","openssl AES256 multiple encryption of file parts (join later)","<p>For partial file upload and encryption i'd like to read chunks (example: 10MB) from a large file (example: 100MB), encrypt the chunk with AES256 and upload the chunk to the server.
On the server the chunks are joined together to one big file (which then should represent the complete encrypted file).</p>

<p>I'd like to avoid a full encryption of the file (example: 100MB!) before taking out chunks and sending them to the server (CPU overhead, because i would then first need to copy the whole file and do AES256 over the whole file).</p>

<p>I tried the following (example for a 16MB File = 2 Chunks = 1*10MB + 1*6MB)</p>

<p>1st chunk is ~10MB, ensured then the chunksize is a multiple of 16 (AES_BLOCK_SIZE)</p>

<pre><code>EVP_CIPHER_CTX e_ctx;
EVP_CIPHER_CTX_init(&amp;e_ctx);
EVP_EncryptInit_ex(&amp;e_ctx, EVP_aes_256_cbc(), NULL, key, iv);
EVP_EncryptUpdate(&amp;e_ctx, enc_data, &amp;outlen, unenc_data, chunksize_to_load_from_file_unencrypted);
</code></pre>

<p>During the 1st chunk, i do not call EVP_EncryptFinal_ex() because the encryption is not finished yet (maybe this is the problem?).</p>

<p>2nd chunk is ~6MB, there i encrypt the rest of the data offset from <code>&amp;outlen</code> above</p>

<pre><code>EVP_CIPHER_CTX e_ctx;
EVP_CIPHER_CTX_init(&amp;e_ctx);
EVP_EncryptInit_ex(&amp;e_ctx, EVP_aes_256_cbc(), NULL, key, iv);
EVP_EncryptUpdate(&amp;e_ctx, enc_data, &amp;outlen, unenc_data, chunksize_to_load_from_file_unencrypted);
EVP_EncryptFinal_ex(&amp;e_ctx, enc_data+outlen, &amp;final_length);
</code></pre>

<p>On the server the two file-parts get's joined.
I then can decrypt the file ""successfully"", same size of the unencrypted file. But at offset ~10MB, some bytes are different (16 Bytes! = <code>AES_BLOCK_SIZE</code>)</p>

<p>Any idea? Could that be the padding? Is that not only at the end?
Does <code>EVP_EncryptFinal_ex</code> act different when not pass through the whole file through <code>EVP_EncryptUpdate</code>?</p>

<p>How can i do transmission of encrypted partial-file-chunk and join them on the server to get a proper encrypted file?</p>

<p>Thanks!</p>
","<p>You are using the wrong initialization vector for the second chunk.  With <a href=""http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Cipher-block_chaining_.28CBC.29"" rel=""nofollow"">CBC</a>, the <code>iv</code> of the subsequent encryption should be the last 16 bytes of the previous ciphertext.  That way, just concatenating the encrypted parts gives the encryption of the whole.</p>
","863","<c><encryption><openssl><encryption-symmetric>","1","1","2","2012-09-04 21:24:43","12270470","2","","","","","2012-09-04 19:31:58",""
"12270141","openssl AES256 multiple encryption of file parts (join later)","<p>For partial file upload and encryption i'd like to read chunks (example: 10MB) from a large file (example: 100MB), encrypt the chunk with AES256 and upload the chunk to the server.
On the server the chunks are joined together to one big file (which then should represent the complete encrypted file).</p>

<p>I'd like to avoid a full encryption of the file (example: 100MB!) before taking out chunks and sending them to the server (CPU overhead, because i would then first need to copy the whole file and do AES256 over the whole file).</p>

<p>I tried the following (example for a 16MB File = 2 Chunks = 1*10MB + 1*6MB)</p>

<p>1st chunk is ~10MB, ensured then the chunksize is a multiple of 16 (AES_BLOCK_SIZE)</p>

<pre><code>EVP_CIPHER_CTX e_ctx;
EVP_CIPHER_CTX_init(&amp;e_ctx);
EVP_EncryptInit_ex(&amp;e_ctx, EVP_aes_256_cbc(), NULL, key, iv);
EVP_EncryptUpdate(&amp;e_ctx, enc_data, &amp;outlen, unenc_data, chunksize_to_load_from_file_unencrypted);
</code></pre>

<p>During the 1st chunk, i do not call EVP_EncryptFinal_ex() because the encryption is not finished yet (maybe this is the problem?).</p>

<p>2nd chunk is ~6MB, there i encrypt the rest of the data offset from <code>&amp;outlen</code> above</p>

<pre><code>EVP_CIPHER_CTX e_ctx;
EVP_CIPHER_CTX_init(&amp;e_ctx);
EVP_EncryptInit_ex(&amp;e_ctx, EVP_aes_256_cbc(), NULL, key, iv);
EVP_EncryptUpdate(&amp;e_ctx, enc_data, &amp;outlen, unenc_data, chunksize_to_load_from_file_unencrypted);
EVP_EncryptFinal_ex(&amp;e_ctx, enc_data+outlen, &amp;final_length);
</code></pre>

<p>On the server the two file-parts get's joined.
I then can decrypt the file ""successfully"", same size of the unencrypted file. But at offset ~10MB, some bytes are different (16 Bytes! = <code>AES_BLOCK_SIZE</code>)</p>

<p>Any idea? Could that be the padding? Is that not only at the end?
Does <code>EVP_EncryptFinal_ex</code> act different when not pass through the whole file through <code>EVP_EncryptUpdate</code>?</p>

<p>How can i do transmission of encrypted partial-file-chunk and join them on the server to get a proper encrypted file?</p>

<p>Thanks!</p>
","<p>Normally you would use counter mode encryption for this, but that seems unavailable for OpenSSL. With OpenSSL block ciphers you cannot just start encrypting/decrypting in the middle of the file. For CBC you need to know the previous encrypted block and insert that as the IV. If you encrypt them sequentially at the client you can then relatively easily decrypt them at the server.</p>

<p>Of course you may also encrypt each block separately and then concatenate the decrypted blocks together.</p>
","863","<c><encryption><openssl><encryption-symmetric>","1","0","2","2012-09-04 21:24:43","12270470","2","","","","","2012-09-04 19:31:58",""
"43186915","Openssl AES 256 CBC Java Decrypt File with salt","<p>I have been trying for several days to decrypt in java a message encrypted with openssl. The message was encrypted with the following command:</p>

<p>openssl enc -e -aes-256-cbc -kfile $ file.key -in toto -out toto.enc.</p>

<p>The file file.key contains the symmetric key of 256 bits. No salt has been specified in the command and yet the file begins with Salted__. Here is the class that I coded to try to decrypt the file but impossible to get anything even by removing the 16 characters of the file namely the: Salted__ + the salt encrypted. I get the error: Exception in thread ""main"" javax.crypto.BadPaddingException: Given final block not properly padded.</p>

<p>Could someone help me?</p>

<p>Thank you very much.</p>

<pre><code>  public class Java {

       private static SecretKey key = null;         
       private static Cipher cipher = null;

       public static void main(String[] args) throws Exception
       {
          String filename = RESOURCES_DIR + ""toto.enc"";

          byte[] key = Base64.decode(""2AxIw+/AzDBj83OILV9GDpOs+izDFJEhD6pve/IPsN9="");
          SecretKeySpec secretKey = new SecretKeySpec(key, ""AES"");
          cipher = Cipher.getInstance(""AES"");

          cipher.init(Cipher.DECRYPT_MODE, secretKey);
          byte[] test = Base64.decode(readFile(filename));
          byte[] decryptedBytes = cipher.doFinal(test);
          String decryptedText = new String(decryptedBytes, ""UTF8"");

          System.out.println(""After decryption: "" + decryptedText);
       }

        public final static String RESOURCES_DIR = ""C:/Users/toto/Desktop/"";

        static String readFile(String filename) throws FileNotFoundException, IOException {
            FileReader fr;
            BufferedReader br;

            fr = new FileReader(new File(filename));
            br = new BufferedReader(fr);
            String str;
            String res = """";
            while ((str = br.readLine()) != null) {
                res += str;
            }
            return res;
        }
    }
</code></pre>
","","857","<java><openssl><aes><encryption-symmetric>","0","","0","2017-04-03 14:10:39","","2","2","","","","2017-04-03 14:10:39",""
"21444218","Unable to decrypt password","<p>I have decided recently to use a more secure encrytion for my password. I have no problem encrypting my password, after calling  <code>mc_encrypt($encrypt)</code> the method returns an encrypted password.</p>

<p>When doing decryption by calling <code>mc_decrypt($decrypt)</code>, the method returns false. As you can see in the <code>mc_decrypt($decrypt)</code> method, there is an if statement near the bottom. I cannot get the if statement to pass. Does anyone know what I can change to get <code>$calcmac!==$mac</code> to return true? Thanks</p>

<pre><code>&lt;?php

    class Encrypt {
    public $encryptionKey = 'xxxxxxx';

    public function __construct() {
    define('ENCRYPTION_KEY', $this-&gt;encryptionKey);
    }

    // Encrypt Function
    public function mc_encrypt($encrypt){
        $encrypt = serialize($encrypt);
        $iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC), MCRYPT_DEV_URANDOM);
        $key = pack('H*', $this-&gt;encryptionKey);
        $mac = hash_hmac('sha256', $encrypt, substr(bin2hex($key), -32));
        $passcrypt = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $encrypt.$mac, MCRYPT_MODE_CBC, $iv);
        $encoded = base64_encode($passcrypt).'|'.base64_encode($iv);
        return $encoded;
    }

    // Decrypt Function
    public function mc_decrypt($decrypt){
        $decrypt = explode('|', $decrypt);
        $decoded = base64_decode($decrypt[0]);
        $iv = base64_decode($decrypt[1]);
        $key = pack('H*', $this-&gt;encryptionKey);
        $decrypted = trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $decoded, MCRYPT_MODE_CBC, $iv));
        $mac = substr($decrypted, -64);
        $decrypted = substr($decrypted, 0, -64);
        $calcmac = hash_hmac('sha256', $decrypted, substr(bin2hex($key), -32));
        if($calcmac!==$mac){ return false; }
        $decrypted = unserialize($decrypted);
        return $decrypted;
    }

    }

    ?&gt;
</code></pre>
","<p>You shouldn't rely on two-way encryption for passwords. If someone can get the cyphertext, they can usually also get the key to decrypt them.</p>

<p>Instead, you should use hashing or key derivation like blowfish or pbkdf2, those are one-way functions that are designed to be hard to crack.</p>

<p>Please, never ever encrypt passwords this way.</p>
","848","<php><encryption-symmetric>","0","3","3","2014-01-31 22:57:48","21444366","0","","20860","","2014-01-29 23:33:24","2014-01-29 22:39:34",""
"21444218","Unable to decrypt password","<p>I have decided recently to use a more secure encrytion for my password. I have no problem encrypting my password, after calling  <code>mc_encrypt($encrypt)</code> the method returns an encrypted password.</p>

<p>When doing decryption by calling <code>mc_decrypt($decrypt)</code>, the method returns false. As you can see in the <code>mc_decrypt($decrypt)</code> method, there is an if statement near the bottom. I cannot get the if statement to pass. Does anyone know what I can change to get <code>$calcmac!==$mac</code> to return true? Thanks</p>

<pre><code>&lt;?php

    class Encrypt {
    public $encryptionKey = 'xxxxxxx';

    public function __construct() {
    define('ENCRYPTION_KEY', $this-&gt;encryptionKey);
    }

    // Encrypt Function
    public function mc_encrypt($encrypt){
        $encrypt = serialize($encrypt);
        $iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC), MCRYPT_DEV_URANDOM);
        $key = pack('H*', $this-&gt;encryptionKey);
        $mac = hash_hmac('sha256', $encrypt, substr(bin2hex($key), -32));
        $passcrypt = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $encrypt.$mac, MCRYPT_MODE_CBC, $iv);
        $encoded = base64_encode($passcrypt).'|'.base64_encode($iv);
        return $encoded;
    }

    // Decrypt Function
    public function mc_decrypt($decrypt){
        $decrypt = explode('|', $decrypt);
        $decoded = base64_decode($decrypt[0]);
        $iv = base64_decode($decrypt[1]);
        $key = pack('H*', $this-&gt;encryptionKey);
        $decrypted = trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $decoded, MCRYPT_MODE_CBC, $iv));
        $mac = substr($decrypted, -64);
        $decrypted = substr($decrypted, 0, -64);
        $calcmac = hash_hmac('sha256', $decrypted, substr(bin2hex($key), -32));
        if($calcmac!==$mac){ return false; }
        $decrypted = unserialize($decrypted);
        return $decrypted;
    }

    }

    ?&gt;
</code></pre>
","<blockquote>
  <p>Sorry, <strong>encrypting passwords with a secret stored on the server
  isn't secure</strong>: If an intruder breaks into your codebase, intruder can retrieve
  each and any password using your codebase and the stored password 
  (somewhere in code or your persistent store).</p>
</blockquote>

<p><a href=""https://www.owasp.org/"" rel=""nofollow"">OWASP</a>, the <a href=""https://www.owasp.org/"" rel=""nofollow"">Online Web Application Security Project</a>, provides well prepared documents: <a href=""https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet"" rel=""nofollow"">Password Storage Cheat Sheet</a>, <a href=""https://www.owasp.org/index.php/Authentication_Cheat_Sheet"" rel=""nofollow"">Authentication Cheat Sheet</a> and <a href=""https://www.owasp.org/index.php/PHP_Security_Cheat_Sheet"" rel=""nofollow"">PHP Security Cheat Sheet</a>. Have a look!</p>

<p>The way to go is a <a href=""http://en.wikipedia.org/wiki/Salt_%28cryptography%29"" rel=""nofollow"">salted hash</a>.</p>

<p><strong>How to handle newly created passwords</strong></p>

<ul>
<li>If you create a new password, compute <code>hash = HashFunction( password, salt )</code> with a random salt</li>
<li>Save hash and salt in your database along to the user's ID</li>
</ul>

<p><strong>How to verify password</strong></p>

<ul>
<li>Locate the userID's record in your database</li>
<li>retrieve hash and salt from the record</li>
<li>Based on the password, that user entered to log in, compute <code>hash = HashFunction( enteredPassword, salt )</code></li>
<li>Finally, verify if the hash retrieved from store is identical to the one computed.</li>
</ul>

<p><strong>Why use a hash operation?</strong></p>

<p>A hash operation is a so called <a href=""http://en.wikipedia.org/wiki/Trapdoor_function"" rel=""nofollow"">trapdoor function</a>: While you can compute the function easily, it's <strong>hard to compute the reverse function</strong>. 
<strong>Corollary:</strong> It's easy to compute a password-hash from a password, but it's hard to compute the password from the password-hash.</p>

<p><strong>PHP's hash functions</strong></p>

<p>These days, PHP's <a href=""http://www.php.net/manual/en/function.hash-pbkdf2.php"" rel=""nofollow"">PBKDF2</a> is first choice for password hashes<a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow""> [Wikipedia on PBKDF2]</a>.</p>

<p>If your PHP installation is too old, even salted hashes with <code>md5()</code> are better than two-encrypted password. <strong>But only in case definitely nothing else is available!</strong></p>

<p><strong>Sample of PBKDF2 usage</strong></p>

<pre><code>function getHashAndSaltFromString( $password ) {

   // choose a sufficiently long number of iterations 
   // ... to make the operation COSTLY
   $iterations = 1000;

   // Generate a random IV using mcrypt_create_iv(),
   // openssl_random_pseudo_bytes() or another suitable source of randomness
   $salt = mcrypt_create_iv(16, MCRYPT_DEV_RANDOM);

   $hash = hash_pbkdf2(""sha256"", $password, $salt, $iterations, 20);

   return array( $hash, $salt );

}
</code></pre>

<p><strong>Beautiful side effect of hash usage</strong></p>

<p>Many websites do restrict the length of passwords to a certain length - quite likely due to the length of the underlying persistent storage [= length of field in a database table].</p>

<p>If you use the hash-based password storage technique, your <strong>users might use passwords of arbitrary length</strong>! </p>

<blockquote>
  <p>Since the <strong>hash is of constant length</strong> and you only persist password and
  salt, the length restriction is superfluous. <strong>Support long passwords in your web-app!</strong></p>
</blockquote>

<p>At an extreme case, you could even allow users to upload a file - e.g. a picture of their home - as a credential [=password].</p>

<p><strong>Side note on random sources in PHP's MCRYPT functions</strong></p>

<p>Note, that PHP does provide two sources of randomness <code>MCRYPT_DEV_RANDOM</code> and <code>MCRYPT_DEV_URANDOM</code>.</p>

<ul>
<li><code>MCRYPT_DEV_RANDOM</code> gets its randomness from <code>/dev/random</code></li>
<li><code>MCRYPT_DEV_URANDOM</code> gets its randomness from <code>/dev/urandom</code></li>
</ul>

<p><code>/dev/urandom</code> provides random data immediately and non-blocking each time you query it, <code>/dev/random</code> might block (take some time to return).</p>

<p>Therefore, <em>at first sight</em>, <code>/dev/urandom</code> and <code>MCRYPT_DEV_URANDOM</code> might be better suited for random number generation. <strong>In fact, it is not!</strong></p>

<p><code>/dev/random</code> might block request up to a point of time, at which sufficiently much <a href=""http://en.wikipedia.org/wiki/Entropy"" rel=""nofollow"">entropy</a> has been collected. Thus <code>/dev/random</code> and <code>MCRYPT_DEV_RANDOM</code> effectively collects randomness. </p>

<blockquote>
  <p>If you need to do <strong>strong crypto operations</strong>, use <code>MCRYPT_DEV_RANDOM</code> or
  <code>/dev/random</code>.</p>
</blockquote>
","848","<php><encryption-symmetric>","0","5","3","2014-01-31 22:57:48","21444366","0","","20860","","2014-01-29 23:33:24","2014-01-29 22:39:34",""
"21444218","Unable to decrypt password","<p>I have decided recently to use a more secure encrytion for my password. I have no problem encrypting my password, after calling  <code>mc_encrypt($encrypt)</code> the method returns an encrypted password.</p>

<p>When doing decryption by calling <code>mc_decrypt($decrypt)</code>, the method returns false. As you can see in the <code>mc_decrypt($decrypt)</code> method, there is an if statement near the bottom. I cannot get the if statement to pass. Does anyone know what I can change to get <code>$calcmac!==$mac</code> to return true? Thanks</p>

<pre><code>&lt;?php

    class Encrypt {
    public $encryptionKey = 'xxxxxxx';

    public function __construct() {
    define('ENCRYPTION_KEY', $this-&gt;encryptionKey);
    }

    // Encrypt Function
    public function mc_encrypt($encrypt){
        $encrypt = serialize($encrypt);
        $iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_CBC), MCRYPT_DEV_URANDOM);
        $key = pack('H*', $this-&gt;encryptionKey);
        $mac = hash_hmac('sha256', $encrypt, substr(bin2hex($key), -32));
        $passcrypt = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $encrypt.$mac, MCRYPT_MODE_CBC, $iv);
        $encoded = base64_encode($passcrypt).'|'.base64_encode($iv);
        return $encoded;
    }

    // Decrypt Function
    public function mc_decrypt($decrypt){
        $decrypt = explode('|', $decrypt);
        $decoded = base64_decode($decrypt[0]);
        $iv = base64_decode($decrypt[1]);
        $key = pack('H*', $this-&gt;encryptionKey);
        $decrypted = trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $decoded, MCRYPT_MODE_CBC, $iv));
        $mac = substr($decrypted, -64);
        $decrypted = substr($decrypted, 0, -64);
        $calcmac = hash_hmac('sha256', $decrypted, substr(bin2hex($key), -32));
        if($calcmac!==$mac){ return false; }
        $decrypted = unserialize($decrypted);
        return $decrypted;
    }

    }

    ?&gt;
</code></pre>
","<p>If you are using PHP >= 5.3.7, you should use the password_comp library which was written by guys involved in PHP and it utilizes BCRYPT which is the strongest algorithm available for PHP as of yet. </p>

<p>It's very simple and easy to use.</p>

<p><a href=""https://github.com/ircmaxell/password_compat"" rel=""nofollow"">https://github.com/ircmaxell/password_compat</a></p>

<p>Hash the password simply</p>

<pre><code> $hash = password_hash($password, PASSWORD_BCRYPT);
</code></pre>

<p>Verify the given password against the stored password hash</p>

<pre><code>if (password_verify($password, $hash)) {
    /* Valid */
} else {
    /* Invalid */
}
</code></pre>

<p>Pretty simple stuff, like they say no need to rewrite was has already been written especially when it comes to security and written by the experts.</p>
","848","<php><encryption-symmetric>","0","2","3","2014-01-31 22:57:48","21444366","0","","20860","","2014-01-29 23:33:24","2014-01-29 22:39:34",""
"8562748","How do I set hard-coded symmetric encryption in WCF using AES256?","<p>How do I define channel security in WCF to encrypted messages using by a hard-coded symmetric 
key with AES256 standard? 
I do not want to use certificates and I am aware that this is a ""weak"" security practice.</p>
","<p>WCF does not support pre-shared key (PSK) it seems, more information here:</p>

<p><a href=""https://stackoverflow.com/questions/8398394/does-net-support-tls-psk"">Does .NET support TLS-PSK?</a></p>
","848","<wcf><encryption><encryption-symmetric>","4","2","2","2015-08-02 12:27:43","","4","2","1816580","","2015-08-02 12:27:43","2011-12-19 14:26:41",""
"8562748","How do I set hard-coded symmetric encryption in WCF using AES256?","<p>How do I define channel security in WCF to encrypted messages using by a hard-coded symmetric 
key with AES256 standard? 
I do not want to use certificates and I am aware that this is a ""weak"" security practice.</p>
","<p>There is no configuration option to achieve this...</p>

<p>You will need to work with MessageInspectors, MessageFormatters and similar - for some good starting points see:</p>

<ul>
<li><a href=""http://msdn.microsoft.com/en-us/library/system.servicemodel.dispatcher.idispatchmessageformatter.aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/system.servicemodel.dispatcher.idispatchmessageformatter.aspx</a></li>
<li><a href=""http://msdn.microsoft.com/en-us/library/system.servicemodel.dispatcher.iclientmessageformatter.aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/system.servicemodel.dispatcher.iclientmessageformatter.aspx</a></li>
<li><a href=""https://stackoverflow.com/a/3257760/847363"">https://stackoverflow.com/a/3257760/847363</a></li>
<li><a href=""http://benpowell.org/supporting-the-ws-i-basic-profile-password-digest-in-a-wcf-client-proxy/"" rel=""nofollow noreferrer"">http://benpowell.org/supporting-the-ws-i-basic-profile-password-digest-in-a-wcf-client-proxy/</a></li>
<li><a href=""http://social.msdn.microsoft.com/Forums/en/wcf/thread/0f09954e-3cef-45b3-a00d-f0f579a06bf7"" rel=""nofollow noreferrer"">http://social.msdn.microsoft.com/Forums/en/wcf/thread/0f09954e-3cef-45b3-a00d-f0f579a06bf7</a></li>
<li><a href=""http://msdn.microsoft.com/en-us/library/system.servicemodel.dispatcher.idispatchmessageinspector.aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/system.servicemodel.dispatcher.idispatchmessageinspector.aspx</a></li>
<li><a href=""http://msdn.microsoft.com/en-us/library/system.servicemodel.dispatcher.iclientmessageinspector.aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/system.servicemodel.dispatcher.iclientmessageinspector.aspx</a></li>
<li><a href=""http://msdn.microsoft.com/en-us/library/system.servicemodel.dispatcher.iclientmessageinspector.beforesendrequest.aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/system.servicemodel.dispatcher.iclientmessageinspector.beforesendrequest.aspx</a></li>
<li><a href=""http://yuzhangqi.itpub.net/post/37475/500654"" rel=""nofollow noreferrer"">http://yuzhangqi.itpub.net/post/37475/500654</a></li>
<li><a href=""http://wcfpro.wordpress.com/category/wcf-extensions/"" rel=""nofollow noreferrer"">http://wcfpro.wordpress.com/category/wcf-extensions/</a></li>
<li><a href=""http://social.technet.microsoft.com/wiki/contents/articles/1322.how-to-inspect-wcf-message-headers-using-iclientmessageinspector-en-us.aspx"" rel=""nofollow noreferrer"">http://social.technet.microsoft.com/wiki/contents/articles/1322.how-to-inspect-wcf-message-headers-using-iclientmessageinspector-en-us.aspx</a></li>
<li><a href=""http://weblogs.asp.net/paolopia/archive/2007/08/23/writing-a-wcf-message-inspector.aspx"" rel=""nofollow noreferrer"">http://weblogs.asp.net/paolopia/archive/2007/08/23/writing-a-wcf-message-inspector.aspx</a></li>
<li><a href=""http://wcfpro.wordpress.com/2011/03/29/iclientmessageinspector/"" rel=""nofollow noreferrer"">http://wcfpro.wordpress.com/2011/03/29/iclientmessageinspector/</a></li>
<li><a href=""https://stackoverflow.com/a/8022912/847363"">https://stackoverflow.com/a/8022912/847363</a></li>
</ul>

<p>It might even be necessary to work with OperationSelectors...</p>
","848","<wcf><encryption><encryption-symmetric>","4","2","2","2015-08-02 12:27:43","","4","2","1816580","","2015-08-02 12:27:43","2011-12-19 14:26:41",""
"27964560","how to encrypt AES key using passphrase?","<p>I want to encrypt AES-128 bit key using pass phrase. The maximum number of characters of the pass phrase is 16. Is it possible to encrypt the key? Which algorithm is suitable to encrypt the key?</p>
","<p>I wont comment on whether this is a good idea or not as I don't think you've given us enough information to do that. </p>

<p>But the ""standard"" way of doing this is to hash the passphrase using MD5, SHA1, etc. You could add some secret salt to make it more secure as well</p>

<p>So Encryption becomes</p>

<pre><code>salt = ""MY SECRET SALT TEXT""
plaintext = AES_KEY
key = sha1(passphrase + salt)
ciphertext = AES(key,plaintext)
</code></pre>

<p>Now ciphertext is the encrypted version of the AES key</p>
","842","<encryption><aes><encryption-symmetric><passphrase><symmetric-key>","0","-2","1","2015-08-02 11:53:17","","1","","1816580","","2015-08-02 11:53:17","2015-01-15 13:30:42",""
"9460934","Microsoft CNG BCryptEncrypt returning ciphertext == plaintext","<p>I am trying to implement an AES-OFB wrapper around CNG's AES for symmetric encryption.  </p>

<p>I have run into an issue that I cannot understand... I have created an AES algorithm handle (BCRYPT_AES_ALGORITHM) and imported an AES key. I then attempt to generate a 16 byte keystream  for use with XORing my plaintext/ciphertext. The first time I run through this mechanism, the keyStreamPtr changes from some random byte stream to another, however, the 3rd time I do this (the 3rd set of 16 bytes of keystream), I start getting the same output and it happens forever.</p>

<pre><code>            status = BCryptEncrypt((BCRYPT_KEY_HANDLE)keyHandle, 
                                   keyStreamPtr,   
                                   keyStreamLength,
                                   NULL, //no padding
                                   NULL, // no IV
                                   0,  // no IV
                                   keyStreamPtr,   
                                   keyStreamLength,
                                   &amp;Length, 
                                   0); // no option flags
</code></pre>

<p>Has anybody ever seen anything like this?  why would AES ever return ciphertext totally identical to the plaintext that was the input?  Again this is for an AES-OFB implementation... Perhaps I am doing something wrong?  </p>
","<p>The only thing I can think of is that you encrypt the key stream again. If you do this you effectively perform encrypt/decrypt: P XOR C XOR C = P where C is the key stream and P is the plain text. You might want to look at the buffer/stream handling within your code.</p>
","834","<encryption><aes><encryption-symmetric><cng>","2","0","1","2015-11-03 05:01:30","","0","","1505120","","2015-11-03 05:01:30","2012-02-27 06:32:12",""
"11858456","Encryption in c lang. and decryption in c#","<p>I have used Rijndael (Encryption Algorithm) in my server side code, which is in C language. But my client is written in C# and C# provide its own Rijndael class to encrypt and decrypt.</p>

<p>At client side I am using the same password for key generation but the client application is unable to decrypt it. I want to encrypt a file in C and decrypt that file in .NET (C#).</p>

<p>Server Code : <a href=""http://www.efgh.com/software/rijndael.txt"" rel=""nofollow"">http://www.efgh.com/software/rijndael.txt</a></p>

<p>Client Code :</p>

<pre><code>    public static void Encrypt()
    {

        string password = @""4c696e6775614e6578742431302a4c6f63616c697a6174696f6e2a3949505f3030372a""; // Your Key Here
            /*UnicodeEncoding UE = new UnicodeEncoding();
            byte[] key = UE.GetBytes(password);*/
            Rfc2898DeriveBytes  pdb = new Rfc2898DeriveBytes (password, new byte[] { 0x26, 0xdc, 0xff, 0x00, 0xad, 0xed, 0x7a, 0xee, 0xc5, 0xfe, 0x07, 0xaf, 0x4d, 0x08, 0x22, 0x3c });

            string cryptFile = @""F:\Encoding and Decoding\ReadMe_Encrypted.txt"";
            FileStream fsCrypt = new FileStream(cryptFile, FileMode.Create);

            RijndaelManaged RMCrypto = new RijndaelManaged();
            RMCrypto.KeySize = 256;
            RMCrypto.BlockSize = 256;               
            byte[] key = pdb.GetBytes(RMCrypto.KeySize / 8);
            byte[] iv = pdb.GetBytes(RMCrypto.BlockSize / 8);  
            CryptoStream cs = new CryptoStream(fsCrypt,
                RMCrypto.CreateEncryptor(key, iv),
                CryptoStreamMode.Write);

            FileStream fsIn = new FileStream(@""F:\Encoding and Decoding\ReadMe.txt"", FileMode.Open);

            int data;
            while ((data = fsIn.ReadByte()) != -1)
                cs.WriteByte((byte)data);

            fsIn.Close();
            cs.Close();
            fsCrypt.Close();

    }
    public static void Decrypt()
    {
        string password = @""4c696e6775614e6578742431302a4c6f63616c697a6174696f6e2a3949505f3030372a""; // Your Key Here

       /* UnicodeEncoding UE = new UnicodeEncoding();
        byte[] key = UE.GetBytes(password);*/
       // PasswordDeriveBytes pdb = new PasswordDeriveBytes(password, new byte[] { 0x26, 0xdc, 0xff, 0x00, 0xad, 0xed, 0x7a, 0xee, 0xc5, 0xfe, 0x07, 0xaf, 0x4d, 0x08, 0x22, 0x3c });
        Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(password, new byte[] { 0x26, 0xdc, 0xff, 0x00, 0xad, 0xed, 0x7a, 0xee, 0xc5, 0xfe, 0x07, 0xaf, 0x4d, 0x08, 0x22, 0x3c });

        FileStream fsCrypt = new FileStream(@""F:\Encoding and Decoding\ReadMe_Encrypted.txt"", FileMode.Open);

        RijndaelManaged RMCrypto = new RijndaelManaged();
        RMCrypto.KeySize = 256;
        RMCrypto.BlockSize = 256;
        byte[] key = pdb.GetBytes(RMCrypto.KeySize / 8);
        byte[] iv = pdb.GetBytes(RMCrypto.BlockSize /8);  
        CryptoStream cs = new CryptoStream(fsCrypt, RMCrypto.CreateDecryptor(key, iv), CryptoStreamMode.Read);
     //   CryptoStream cs = new CryptoStream(fsCrypt, RMCrypto.CreateDecryptor(), CryptoStreamMode.Read);


        FileStream fsOut = new FileStream(@""F:\Encoding and Decoding\ReadMe_Decrypted.txt"", FileMode.Create);

        int data;
        while ((data = cs.ReadByte()) != -1)
            fsOut.WriteByte((byte)data);

        fsOut.Close();
        cs.Close();
        fsCrypt.Close();
    }
</code></pre>
","<p>In your C# code you're using <code>Rfc2898DeriveBytes</code> to convert your password string into a 256-bit key (under the hood this is actually hashing the password using SHA-1), whereas in the C code you're using the key directly. You probably want to modify the C# code to use the key directly (it looks like a 256-bit key to me, not an ASCII password).</p>

<p>The following should be sufficient:</p>

<pre><code>byte[] key = {0x4c, 0x69, 0x6e, 0x67, ...};
</code></pre>

<p>You'll also want to modify the C program to use the correct binary key, rather than taking one on the command line. You can use something like the following:</p>

<pre><code>unsigned char key[KEYLENGTH(KEYBITS)] = {0x4c, 0x69, 0x6e, 0x67, ...};
</code></pre>

<p>I'm also not sure if you're using the same mode (<a href=""http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation"" rel=""nofollow"">http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation</a>). I think the C# code may be using CBC whereas the C code is using ECB. I suggest this as there's an iv in the C# code (generated from the password), but there isn't one in the C code.</p>

<p>You could also try to find a library that you can use from both C and C# and use that instead, for example openssl.</p>
","831","<c#><c><encryption-symmetric>","1","2","1","2012-09-14 14:51:20","","7","","403294","","2012-08-08 06:59:46","2012-08-08 05:56:37",""
"36209725","How to put the key for image encryption using AES Algorithm","<p>I'm newbie in java. I already have a code for AES algorithm for image encryption. My problem is I just want to add the key for my encrypt image and only the person I give the key can only decrypt the image example such as symmetric encryption, md5,pgp or anything else you all should suggest me for use as the key. Here is my code</p>

<pre><code>package crypto;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author fIZI/Z47
 */
public class ImageCrypto extends javax.swing.JFrame {

    /**
     * Creates new form ImageCrypto
     */
    public ImageCrypto() {
        initComponents();
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        file_path.setText(f.getAbsolutePath());
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        try{
            FileInputStream file = new FileInputStream(file_path.getText());
            FileOutputStream outStream = new FileOutputStream(""C:\\Users\\Z47\\Desktop\\Encrypt Image.jpg"");
            byte k[]=""FiZi1701NuLl5252"".getBytes();
            SecretKeySpec key = new SecretKeySpec(k, ""AES"");
            Cipher enc = Cipher.getInstance(""AES"");
            enc.init(Cipher.ENCRYPT_MODE, key);
            CipherOutputStream cos = new CipherOutputStream(outStream, enc);
            byte[] buf = new byte[1024];
            int read;
            while((read=file.read(buf))!=-1){
                cos.write(buf,0,read);
            }
            file.close();
            outStream.flush();
            cos.close();
            JOptionPane.showMessageDialog(null, ""The image was encrypted successfully !"");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        try{
            FileInputStream file = new FileInputStream(file_path.getText());
            FileOutputStream outStream = new FileOutputStream(""C:\\Users\\Z47\\Desktop\\Decrypt Image.jpg"");
            byte k[]=""FiZi1701NuLl5252"".getBytes();
            SecretKeySpec key = new SecretKeySpec(k, ""AES"");
            Cipher enc = Cipher.getInstance(""AES"");
            enc.init(Cipher.DECRYPT_MODE, key);
            CipherOutputStream cos = new CipherOutputStream(outStream, enc);
            byte[] buf = new byte[1024];
            int read;
            while((read=file.read(buf))!=-1){
                cos.write(buf,0,read);
            }
            file.close();
            outStream.flush();
            cos.close();
            JOptionPane.showMessageDialog(null, ""Success! your image was decrypted. Click OK to preview the image."");
            Runtime.getRuntime().exec(""rundll32 url.dll, FileProtocolHandler ""+""C:\\Users\\Z47\\Desktop\\Decrypt Image.jpg"");
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
    }                                        

    private void file_pathActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //&lt;editor-fold defaultstate=""collapsed"" desc="" Look and feel setting code (optional) ""&gt;
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (""Nimbus"".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //&lt;/editor-fold&gt;

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageCrypto().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JTextField file_path;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration                   
}
</code></pre>

<p>Btw, I'm using netbeans in JFrame and running GUI. Can anyone show full code for the key? by combine with my coding.</p>
","<blockquote>
  <p>I just want to add the key for my encrypt image and only the person I
  give the key can only decrypt the image</p>
</blockquote>

<p>In your code your secret key is <code>byte[] k</code>.</p>

<p>If you want to securely send that to the recipient along with the encrypted image you might want to consider using an asymmetric key encryption algorithm to encrypt your secret key.</p>

<p>In practice, you would use the recipient's public key to encrypt the key used in the AES algorithm. Only they can decrypt that key in order to decrypt the message.</p>
","819","<java><encryption><public-key-encryption><encryption-symmetric><pgp>","-1","0","1","2018-06-08 17:03:01","36210729","2","2","1816580","","2016-03-24 21:15:47","2016-03-24 20:47:36",""
"24962223","C# AES Encryption - Stream mode to automatically prepend IV","<p>According to a comment on <a href=""https://stackoverflow.com/a/2530643/2479481"">This Answer</a> from GregS, the IV should be prepended to AES encrypted data (Assuming I'm reading it right):</p>

<blockquote>
  <p>Put it before the cipher. That way you can have decrypt in streaming mode.</p>
</blockquote>

<p>It sounds to me like GregS is suggesting there's a streaming mode that will automatically prepend/parse the IV used in encryption.</p>

<p>Is this true?</p>

<p>I am currently manually prepending my IV to encrypted data and manually splitting ciphers into IV and data before decrypting. Is there a method to do this automatically?</p>

<hr>

<h2>For Reference:</h2>

<p>Here's what I'm doing right now:</p>

<p>The <code>Encrypt</code> Method:</p>

<pre><code>public byte[] Encrypt(byte[] data)
{
    // Generate IV
    var iv = new byte[BlockSize/8];
    new Random().NextBytes(iv);

    byte[] cipher = // encryption happens here

    // Prepend IV to Cipher
    var saltedCipher = new byte[iv.Length + cipher.Length];
    Buffer.BlockCopy(iv, 0, saltedCipher, 0, iv.Length);
    Buffer.BlockCopy(cipher, 0, saltedCipher, iv.Length, cipher.Length);

    return saltedCipher;
}
</code></pre>

<p>The <code>Decrypt</code> Method:</p>

<pre><code>public byte[] Decrypt(byte[] saltedCipher)
{
    // Split saltedCipher into iv and cipher
    var iv = new byte[BlockSize/8];
    var cipher = new byte[saltedCipher.Length - iv.Length];
    Buffer.BlockCopy(buffer, 0, iv, 0, iv.Length);
    Buffer.BlockCopy(buffer, iv.Length, cipher, 0, cipher.Length);

    byte[] data = // decryption happens here

    return data;
}
</code></pre>
","<p>Using only the methods built in to the .NET framework, there is no way I know of that automatically prepends the data. There are many 3rd party libraries that will handle this for you, but the libraries in the <code>System.Security.Cryptography</code> do not by default.</p>

<p>Often when you are encrypting information you will have a header that contains all of the relevant information you need to know about the file before you decrypt it, what that information is varies wildly based on the needs of the software. For your simple example your header is just </p>

<pre>
╔════════════════╦══════════════╦═══════════════════╦═════════════╗
║ Offset (bytes) ║ Size (bytes) ║ Encryption Status ║ Description ║
╠════════════════╬══════════════╬═══════════════════╬═════════════╣
║ 0              ║ BlockSize/8  ║  Unencrypted      ║ IV          ║
║ BlockSize/8    ║ Var.         ║  Encrypted        ║ Data Area   ║
╚════════════════╩══════════════╩═══════════════════╩═════════════╝
</pre>

<p>And that is all you need, because you are (I am assuming) a fixed block size you don't need any extra information like the IV length, or any metadata about the file. </p>

<p>Compare that to a more complicated file, like a TrueCrypt container (<a href=""http://www.truecrypt.org/docs/?s=volume-format-specification"" rel=""nofollow"">The original site</a> does not exist anymore with the spec, but <a href=""http://andryou.com/truecrypt_orig/docs/volume-format-specification/"" rel=""nofollow"">I found this mirror</a>)</p>

<pre>
╔════════════════╦══════════════╦════════════════════════════╦══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║ Offset (bytes) ║ Size (bytes) ║     Encryption Status      ║                                                                                                                         Description                                                                                                                          ║
╠════════════════╬══════════════╬════════════════════════════╬══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣
║ 0              ║ 64           ║  Unencrypted§              ║  Salt                                                                                                                                                                                                                                                        ║
║ 64             ║ 4            ║  Encrypted                 ║  ASCII string ""TRUE""                                                                                                                                                                                                                                         ║
║ 68             ║ 2            ║  Encrypted                 ║  Volume header format version (5)                                                                                                                                                                                                                            ║
║ 70             ║ 2            ║  Encrypted                 ║  Minimum program version required to open the volume                                                                                                                                                                                                         ║
║ 72             ║ 4            ║  Encrypted                 ║  CRC-32 checksum of the (decrypted) bytes 256-511                                                                                                                                                                                                            ║
║ 76             ║ 16           ║  Encrypted                 ║  Reserved (must contain zeroes)                                                                                                                                                                                                                              ║
║ 92             ║ 8            ║  Encrypted                 ║  Size of hidden volume (set to zero in non-hidden volumes)                                                                                                                                                                                                   ║
║ 100            ║ 8            ║  Encrypted                 ║  Size of volume                                                                                                                                                                                                                                              ║
║ 108            ║ 8            ║  Encrypted                 ║  Byte offset of the start of the master key scope                                                                                                                                                                                                            ║
║ 116            ║ 8            ║  Encrypted                 ║  Size of the encrypted area within the master key scope                                                                                                                                                                                                      ║
║ 124            ║ 4            ║  Encrypted                 ║  Flag bits (bit 0 set: system encryption; bit 1 set: non-system  in-place-encrypted/decrypted volume; bits 2–31 are reserved)                                                                                                                                ║
║ 128            ║ 4            ║  Encrypted                 ║  Sector size (in bytes)                                                                                                                                                                                                                                      ║
║ 132            ║ 120          ║  Encrypted                 ║  Reserved (must contain zeroes)                                                                                                                                                                                                                              ║
║ 252            ║ 4            ║  Encrypted                 ║  CRC-32 checksum of the (decrypted) bytes 64-251                                                                                                                                                                                                             ║
║ 256            ║ Var.         ║  Encrypted                 ║  Concatenated primary and secondary master keys**                                                                                                                                                                                                            ║
║ 512            ║ 65024        ║  Encrypted                 ║  Reserved (for system encryption, this item is omitted‡‡)                                                                                                                                                                                                    ║
║ 65536          ║ 65536        ║  Encrypted / Unencrypted§  ║  Area for hidden volume header (if there is no hidden volume within the volume, this area contains random data††). For  system encryption, this item is omitted.‡‡ See bytes 0–65535.                                                                        ║
║ 131072         ║ Var.         ║  Encrypted                 ║  Data area (master key scope). For system encryption, offset  may be different (depending on offset of system partition).                                                                                                                                    ║
║ S-131072‡      ║ 65536        ║  Encrypted / Unencrypted§  ║  Backup header (encrypted with a different header key derived using a different salt). For system encryption, this item is omitted.‡‡ See bytes 0–65535.                                                                                                     ║
║ S-65536‡       ║ 65536        ║  Encrypted / Unencrypted§  ║  Backup header for hidden volume (encrypted with a different header key derived using a different salt). If there is no hidden volume within the volume, this area contains random data.†† For system encryption, this item is omitted.‡‡ See bytes 0–65535. ║
╚════════════════╩══════════════╩════════════════════════════╩══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

* Provided that the options Quick Format and Dynamic are disabled and provided that the volume does not contain a filesystem that has been encrypted in place (note that TrueCrypt does not allow the user to create a hidden volume within such a volume).
† The encrypted areas of the volume header are encrypted in XTS mode using the primary and secondary header keys. For more information, see the section Encryption Scheme and the section Header Key Derivation, Salt, and Iteration Count.
‡ S denotes the size of the volume host (in bytes).
§ Note that the salt does not need to be encrypted, as it does not have to be kept secret [7] (salt is a sequence of random values).
** Multiple concatenated master keys are stored here when the volume is encrypted using a cascade of ciphers (secondary master keys are used for XTS mode).
†† See above in this section for information on the method used to fill free volume space with random data when the volume is created.
‡‡ Here, the meaning of ""system encryption"" does not include a hidden volume containing a hidden operating system.
</pre>

<p>So because the needs of a header can vary so much the .NET framework leaves it to the developer to design their own.</p>
","817","<c#><encryption><aes><encryption-symmetric><initialization-vector>","2","3","1","2014-07-25 19:26:14","24963141","2","","-1","","2017-05-23 12:15:26","2014-07-25 18:26:09",""
"16149702","Get cipher used to password encrypt private key","<p>I have a private key used for RSA exchanges that is password protected.  I know the password, so I can use the key, however, I do not know which cipher was used to do the password.</p>

<p>I have other keys where the cipher is named in a header in the decrypted key, as per the answer to <a href=""https://stackoverflow.com/questions/1774469/how-does-the-rsa-private-key-passphrase-work-under-the-hood"">this question</a>.  However, this key when encrypted simply starts:</p>

<pre><code>-----BEGIN ENCRYPTED PRIVATE KEY-----
</code></pre>

<p>and when decrypted:</p>

<pre><code>-----BEGIN RSA PRIVATE KEY-----
</code></pre>

<p>No further header.</p>

<p>Tools such as <code>openssl rsa</code> and gnutls's <code>certtool -k</code> decrypt the key when given the password and provide information about the public key but do not say anything about the symmetric cipher used for the password.</p>

<p>Presumably, these applications know what the cipher was, since they decrypt the key.  Is there a way to get this information?  There does not seem to be much point in keeping it secret if I have the password anyway.</p>

<p>Programmatic answers using the gnutls API (but not openssl) are good, but ideally I'd like to know of an existing, portable tool. </p>
","<p>Use tool like ASN.1 viewer to open that file (most of them should handle base64-encoded data as well, however probably you'll need to base64-decoded data first).
After that you'll get the (most likely) PKCS#8-wrapped key, and you'll get the cipher by looking at OIDs.</p>
","811","<rsa><private-key><encryption-symmetric><gnutls>","1","0","2","2013-04-23 15:09:18","16170935","1","1","-1","","2017-05-23 11:58:13","2013-04-22 14:31:58",""
"16149702","Get cipher used to password encrypt private key","<p>I have a private key used for RSA exchanges that is password protected.  I know the password, so I can use the key, however, I do not know which cipher was used to do the password.</p>

<p>I have other keys where the cipher is named in a header in the decrypted key, as per the answer to <a href=""https://stackoverflow.com/questions/1774469/how-does-the-rsa-private-key-passphrase-work-under-the-hood"">this question</a>.  However, this key when encrypted simply starts:</p>

<pre><code>-----BEGIN ENCRYPTED PRIVATE KEY-----
</code></pre>

<p>and when decrypted:</p>

<pre><code>-----BEGIN RSA PRIVATE KEY-----
</code></pre>

<p>No further header.</p>

<p>Tools such as <code>openssl rsa</code> and gnutls's <code>certtool -k</code> decrypt the key when given the password and provide information about the public key but do not say anything about the symmetric cipher used for the password.</p>

<p>Presumably, these applications know what the cipher was, since they decrypt the key.  Is there a way to get this information?  There does not seem to be much point in keeping it secret if I have the password anyway.</p>

<p>Programmatic answers using the gnutls API (but not openssl) are good, but ideally I'd like to know of an existing, portable tool. </p>
","<p>ASN.1 decoding that should give you something like this:</p>

<pre><code>    0:d=0  hl=4 l=1294 cons: SEQUENCE
    4:d=1  hl=2 l=  64 cons:  SEQUENCE
    6:d=2  hl=2 l=   9 prim:   OBJECT            :PBES2
   17:d=2  hl=2 l=  51 cons:   SEQUENCE
   19:d=3  hl=2 l=  27 cons:    SEQUENCE
   21:d=4  hl=2 l=   9 prim:     OBJECT            :PBKDF2
   32:d=4  hl=2 l=  14 cons:     SEQUENCE
   34:d=5  hl=2 l=   8 prim:      OCTET STRING
   44:d=5  hl=2 l=   2 prim:      INTEGER           :0800
   48:d=3  hl=2 l=  20 cons:    SEQUENCE
   50:d=4  hl=2 l=   8 prim:     OBJECT            :des-ede3-cbc
   60:d=4  hl=2 l=   8 prim:     OCTET STRING
   70:d=1  hl=4 l=1224 prim:  OCTET STRING
</code></pre>

<p>ie. in this example des-ede3-cbc is being used. Here's an online / open-source ASN.1 decoder you can use:</p>

<p><a href=""http://phpseclib.sourceforge.net/x509/asn1parse.php"" rel=""nofollow"">phpseclib ASN.1 Decoder</a></p>

<p>Just copy / paste your data and hit the submit button!</p>

<p>You can also do <code>openssl asn1parse -inform PEM -in file.ext -i</code> via the CLI if you have OpenSSL installed.</p>
","811","<rsa><private-key><encryption-symmetric><gnutls>","1","4","2","2013-04-23 15:09:18","16170935","1","1","-1","","2017-05-23 11:58:13","2013-04-22 14:31:58",""
"6448226","Using Rjindael and RSA to encrypt data stored in QR code in Visual Basic .NET","<p>I'm wanting to encrypt some data (hopefully under five hundred bytes' worth) and store it in a QR code. Originally I wanted to use RSA, so the data would be signed with User A's private key and User B's public key, but unfortunately, VB.NET doesn't like encrypting that much data. I've read that I should use Rjindael to encrypt the actual data, and then use RSA to encrypt the key used by Rjindael. However, I'm not having much luck being able to search the web for some kind of tutorial or something.</p>

<p>Also, if I was wanting to store this on a QR code, wouldn't I have to store both the encrypted data and the encrypted key used by Rjindael? Do you think this would all fit? I may be able to use version 40 on medium error correction (according to <a href=""http://www.denso-wave.com/qrcode/vertable4-e.html"" rel=""nofollow"">http://www.denso-wave.com/qrcode/vertable4-e.html</a>, it stores 18,672 ""data bits""), but I would prefer to use a lower version (that is, smaller) if at all possible.</p>

<p>Generating the QR code won't be the problem (I know there's a .NET library for that), I'm just curious about getting the data encrypted to begin with.</p>

<p>Thanks for your help!</p>

<p>Sam</p>
","<p>Look at the ""binary"" column. This is actually how many bytes you can store.
Anything above version 10 gets a bit hard to scan in practice, though possible. Above version 20 it's quite difficult from a camera, though can be scanned off a printed page. So if the point is to scan with a camera -- no doesn't sound like it will fit in practice.</p>
","784","<vb.net><rsa><qr-code><public-key-encryption><encryption-symmetric>","0","1","1","2011-06-23 08:27:32","6451264","1","","","","","2011-06-23 00:55:04",""
"14850584","How can I decrypt data stored in XML using the XML Encryption Syntax and Processing spec?","<p>How could I use C# to decrypt this XML file while I know the password?</p>

<pre><code>&lt;EncryptedData xmlns=""w3.org/2001/04/xmlenc#""; Type=""w3.org/2001/04/xmlenc#Element""; Salt=""Gnk/DB61AQ=="" IV=""iYcfV0NOGy0=""&gt; 
&lt;EncryptionMethod Algorithm=""w3.org/2001/04/xmlenc#tripledes-cbc""; /&gt; 
&lt;CipherData&gt;
 &lt;CipherValue&gt;/TtgJ46P9L23ZeGt67n+2OZGXoHiGWcUAWE8CdN1Z2aiF40fAg6DfBWGx62RB7Botxr‌​w+f1Jf1CtR10iMLw0iz+VIcbaPFZj5ZfCm3aDeDLbnwXdb7mIdzNtF/5EOjNph/kPz7PxcUlAOUvsLLmj‌​Gtx92EhWL6KpXufKahnRiwLuZLNc&lt;/CipherValue&gt;
&lt;/CipherData&gt;
&lt;/EncryptedData&gt;
</code></pre>

<p>I tried</p>

<pre><code>public static string Decryption(string CypherText, string key) 
{
    byte[] b = Convert.FromBase64String(CypherText); 
    TripleDES des = CreateDES(key);
    ICryptoTransform ct = des.CreateDecryptor();
    byte[] output = ct.TransformFinalBlock(b, 0, b.Length); 
    return Encoding.Unicode.GetString(output); 
} 
</code></pre>

<p>But Exception occurred in</p>

<blockquote>
  <p>byte[] output = ct.TransformFinalBlock(b, 0, b.Length); Bad Data </p>
</blockquote>
","<p><a href=""http://www.deltasblog.co.uk/code-snippets/basic-encryptiondecryption-c/"" rel=""nofollow"">http://www.deltasblog.co.uk/code-snippets/basic-encryptiondecryption-c/</a></p>

<pre><code>  byte[] inputArray = Convert.FromBase64String(input);
          TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider();
          tripleDES.Key = UTF8Encoding.UTF8.GetBytes(key);
          tripleDES.Mode = CipherMode.ECB;
          tripleDES.Padding = PaddingMode.PKCS7;
          ICryptoTransform cTransform = tripleDES.CreateDecryptor();
          byte[] resultArray = cTransform.TransformFinalBlock(inputArray, 0, inputArray.Length);
          tripleDES.Clear();
          return UTF8Encoding.UTF8.GetString(resultArray);
</code></pre>
","779","<c#><xml><encryption><encryption-symmetric>","0","0","1","2013-02-13 12:41:54","","3","","19068","","2013-02-13 12:41:54","2013-02-13 09:47:53",""
"14452489","Invalid key size in Java symmetric encryption program","<p>This is my basic symmetric encryption program. As im learning now I want to know how this is working. And I have the following Exception:</p>

<blockquote>
  <p>Exception in thread ""main"" java.security.InvalidKeyException: Illegal
  key size or default parameters    at javax.crypto.Cipher.a(DashoA13*..)
    at javax.crypto.Cipher.init(DashoA13*..)    at
  javax.crypto.Cipher.init(DashoA13*..)     at
  sample.MainClass.main(MainClass.java:24)</p>
</blockquote>

<p>This is my program:</p>

<pre><code>public class MainClass {
     public static void main(String[] args) throws Exception {
            Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());        
            byte[] input = "" www.java2s.com "".getBytes();
            byte[] keyBytes = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
                0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };


            SecretKeySpec key = new SecretKeySpec(keyBytes, ""AES"");
            Cipher cipher = Cipher.getInstance(""AES/ECB/NoPadding"", ""BC"");
            System.out.println(""input text : "" + new String(input));

            // encryption pass

            byte[] cipherText = new byte[input.length];
            cipher.init(Cipher.ENCRYPT_MODE, key);
            int ctLength = cipher.update(input, 0, input.length, cipherText, 0);
            ctLength += cipher.doFinal(cipherText, ctLength);
            System.out.println(""cipher text: "" + new String(cipherText) + "" bytes: "" + ctLength);

            // decryption pass

            byte[] plainText = new byte[ctLength];
            cipher.init(Cipher.DECRYPT_MODE, key);
            int ptLength = cipher.update(cipherText, 0, ctLength, plainText, 0);
            ptLength += cipher.doFinal(plainText, ptLength);
            System.out.println(""plain text : "" + new String(plainText) + "" bytes: "" + ptLength);
          }
}
</code></pre>

<p>Can you please tell me how to solve this problem?</p>
","<p>This does indeed seem like a duplicate of <a href=""https://stackoverflow.com/questions/6481627/java-security-illegal-key-size-or-default-parameters"">Java Security: Illegal key size or default parameters?</a> . You probably need to replace your local_policy.jar and US_export_policy.jar with the Unlimited Security versions. You can download them here: <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html"" rel=""nofollow noreferrer"">http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html</a></p>

<p>These files should be in your jre/lib/security/ folder. Also, for me I had a ton of different JREs in different locations, and the one I was using was <em>inside</em> my jdk folder path. It took me the longest time to figure this crap out</p>
","776","<java><encryption><encryption-symmetric>","1","1","1","2013-04-22 18:29:37","","4","","445517","","2013-02-09 17:07:17","2013-01-22 06:02:45",""
"35472403","Why PBKDF2 SHA256 generated hash value not equal between C and java","<p>I have a Android client and Server, the client needs to validate the session key before communication or processing data with the server. The client was Android app and its encryption method was wrote in Java, the server`s was wrote in C.</p>

<p>I call the session key as ""magic token"", and the magic token is generated by PBKDF2 algorithm with 1000 iterations of SHA256 hash on server. The client fetch the magic token from server and the client itself needs to regenerate the magic token again in order to compare the fetched one and generated one. if they are equal, means the session key is valid and the client can go further operations. </p>

<p>But my problem is when I trying to generate the magic token using the same algorithm, salt, iteration count with server side, the generated hash value are not the same. Maybe it caused by PBKDF2 algorithm or sha256 are not exactly same for different platforms. I feel really confused and anyone can help me find out where the error comes from? </p>

<p>NOTE, both C and Java source code are open sourced project hosted on github as linked below. Thanks in advance.</p>

<p>C language style as below</p>

<pre><code>static unsigned char salt[8] = { 0xda, 0x90, 0x45, 0xc3, 0x06, 0xc7, 0xcc, 0x26 };

    int
seafile_derive_key (const char *data_in, int in_len, int version,
                    unsigned char *key, unsigned char *iv)
{
    if (version == 2) {
        PKCS5_PBKDF2_HMAC (data_in, in_len,
                           salt, sizeof(salt),
                           KEYGEN_ITERATION2,
                           EVP_sha256(),
                           32, key);
        PKCS5_PBKDF2_HMAC ((char *)key, 32,
                           salt, sizeof(salt),
                           10,
                           EVP_sha256(),
                           16, iv);
        return 0;
    } else if (version == 1)
        return EVP_BytesToKey (EVP_aes_128_cbc(), /* cipher mode */
                               EVP_sha1(),        /* message digest */
                               salt,              /* salt */
                               (unsigned char*)data_in,
                               in_len,
                               KEYGEN_ITERATION,   /* iteration times */
                               key, /* the derived key */
                               iv); /* IV, initial vector */
    else
        return EVP_BytesToKey (EVP_aes_128_ecb(), /* cipher mode */
                               EVP_sha1(),        /* message digest */
                               NULL,              /* salt */
                               (unsigned char*)data_in,
                               in_len,
                               3,   /* iteration times */
                               key, /* the derived key */
                               iv); /* IV, initial vector */
}

        void
    seafile_generate_magic (int version, const char *repo_id,
                            const char *passwd, char *magic)
    {
        GString *buf = g_string_new (NULL);
        unsigned char key[32], iv[16];

        /* Compute a ""magic"" string from repo_id and passwd.
         * This is used to verify the password given by user before decrypting
         * data.
         */
        g_string_append_printf (buf, ""%s%s"", repo_id, passwd);

        seafile_derive_key (buf-&gt;str, buf-&gt;len, version, key, iv);

        g_string_free (buf, TRUE);
        rawdata_to_hex (key, magic, 32);
    }
</code></pre>

<p>the complete file for C can be found on <a href=""https://github.com/haiwen/seafile/blob/master/common/seafile-crypt.c#L102"" rel=""nofollow"">github</a></p>

<p>and my java (Android) language style as below</p>

<pre><code>private static String generateMagic(String repoID, String password, int version) throws NoSuchAlgorithmException, InvalidKeySpecException, UnsupportedEncodingException, SeafException, NoSuchPaddingException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException {
    if (version != 1 &amp;&amp; version != 2) {
        throw SeafException.unsupportedEncVersion;
    }

    String src = repoID + password;
    char[] salt = {0xda, 0x90, 0x45, 0xc3, 0x06, 0xc7, 0xcc, 0x26};
    final byte[] slt = new String(salt).getBytes(""UTF-8"");
    // If you use version 1.47 or higher of SpongyCastle, you can invoke PBKDF2WithHmacSHA256 directly.
    // In versions of BC &lt; 1.47, you could not specify SHA256 digest and it defaulted to SHA1.
    // see http://stackoverflow.com/questions/6898801/how-to-include-the-spongy-castle-jar-in-android
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(PBEParametersGenerator.PKCS5PasswordToUTF8Bytes(src.toCharArray()), slt, ITERATION_COUNT);
    byte[] keyBytes;

    if (version == 2) {
        keyBytes = ((KeyParameter) gen.generateDerivedMacParameters(KEY_LENGTH * 8)).getKey();
    } else
        keyBytes = ((KeyParameter) gen.generateDerivedMacParameters(16 * 8)).getKey();

    // final SecretKey key = deriveKeyPbkdf2(slt, src, version);
    // final byte[] bytes = key.getEncoded();
    return toHex(keyBytes);
}
</code></pre>

<p>the complete file for Java can be found on <a href=""https://github.com/Logan676/seadroid/blob/feature/support_client_side_encryption/app/src/main/java/com/seafile/seadroid2/crypto/Crypto.java#L101"" rel=""nofollow"">github</a></p>

<h2><strong>EDIT</strong></h2>

<p>Finally, I found the error, it was caused by char[] salt,
the correct one as </p>

<pre><code>byte[] salt = {(byte) 0xda, (byte) 0x90, (byte) 0x45, (byte) 0xc3, (byte) 0x06, (byte) 0xc7, (byte) 0xcc, (byte) 0x26};
</code></pre>
","","775","<java><c><sha256><encryption-symmetric><pbkdf2>","4","","0","2016-02-18 04:22:38","","2","1","3962551","","2016-02-18 04:22:38","2016-02-18 03:41:51",""
"5976413","Encryption using Javascript without sacrificing performance","<p>I would like to enhance my web application by including symmetric encryption techniques using Javascript but I fear that I will lose the performance. Can you suggest me some good approaches please?</p>
","<p>Encryption requires CPU time. You <strong>will</strong> sacrifice performance. You need to determine how much is too much and profile.</p>

<p>Why aren't you using HTTPS ?</p>
","772","<javascript><performance><encryption><encryption-symmetric>","4","0","2","2015-08-02 12:28:31","","1","1","1816580","","2015-08-02 12:28:31","2011-05-12 10:07:01",""
"5976413","Encryption using Javascript without sacrificing performance","<p>I would like to enhance my web application by including symmetric encryption techniques using Javascript but I fear that I will lose the performance. Can you suggest me some good approaches please?</p>
","<p>This is a good start</p>

<p><a href=""http://code.google.com/p/crypto-js/"" rel=""nofollow"">http://code.google.com/p/crypto-js/</a></p>
","772","<javascript><performance><encryption><encryption-symmetric>","4","1","2","2015-08-02 12:28:31","","1","1","1816580","","2015-08-02 12:28:31","2011-05-12 10:07:01",""
"42896564","AES encryption on iOS and android, output and buffer size is different","<p>Implementing AES256 on iOS using CCCrypt function. But output and output buffer length is different than Android. </p>

<p>Cipher class in Android produces 48 bytes data where in iOS we get 80 bytes data.</p>

<p>In IOS using kCCAlgorithmAES, kCCOptionPKCS7Padding and in android using AES/CBC/PKCS5Padding. </p>

<p>in IOS IV is NULL and in android creating iv as new 16 bytes array.</p>

<p>Please help.</p>

<p>please find input and code for reference.</p>

<pre><code> - (void)viewDidLoad {
    [super viewDidLoad];

    NSString *message = [NSString stringWithFormat:@""com.myapp.com|355004059196637|911111111111|11341e5e-9643-4559-bbb7-34d40555e96c""];
    NSString *key = [NSString stringWithFormat:@""4f28d5901b4b7b80d33fda76ca372c2a20bd1a6c2aad7fa215dc79d507330678""];
    NSString *shaEncryptMessage = [self sha256:message length:0];
    NSData *aesEncryptData = [self aesEncrypt:[shaEncryptMessage dataUsingEncoding:NSUTF8StringEncoding] key:key iv:nil];
    NSString *hMac = [aesEncryptData base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
    NSLog(@""hMac = %@"",hMac);

    // IOS output : Can+oQR79D3/lsQGctzY/d2VBNZbWWtJxGI8iRIu80R2yTskn9gf2oKHaRESX73u
    //                  LpJHLx1Xr6iH11jFPlmqwW7mQz0xAW4uACNAMEoZ0kY=
    // Android output : MiMDkdo5cGsPMj2qCnNobgp7dr5KMvBhGuKTonrqr1lCYte/kKegGMtI/4TPhUNI
}


- (NSString*) sha256:(NSString *)key length:(NSInteger) length{
    const char *s=[key cStringUsingEncoding:NSASCIIStringEncoding];
    NSData *keyData=[NSData dataWithBytes:s length:strlen(s)];

    uint8_t digest[CC_SHA256_DIGEST_LENGTH]={0};
    CC_SHA256(keyData.bytes, (unsigned int)keyData.length, digest);
    NSData *out=[NSData dataWithBytes:digest length:CC_SHA256_DIGEST_LENGTH];
    NSString *hash=[out description];
    hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@""&lt;"" withString:@""""];
    hash = [hash stringByReplacingOccurrencesOfString:@""&gt;"" withString:@""""];
    return  hash;
}
-  (NSData *)aesEncrypt:(NSData *)plainText key:(NSString *)key iv:(NSString *)iv {
    char keyPointer[kCCKeySizeAES256+2],// room for terminator (unused) ref: https://devforums.apple.com/message/876053#876053
    ivPointer[kCCBlockSizeAES128];
    BOOL patchNeeded;
    bzero(keyPointer, sizeof(keyPointer)); // fill with zeroes for padding
    //key = [[StringEncryption alloc] md5:key];
    key = [self stringFromHex:key];
    patchNeeded= ([key length] &gt; kCCKeySizeAES256+1);
    if(patchNeeded)
    {
        key = [key substringToIndex:kCCKeySizeAES256]; // Ensure that the key isn't longer than what's needed (kCCKeySizeAES256)
    }

    [key getCString:keyPointer maxLength:sizeof(keyPointer) encoding:NSUTF8StringEncoding];
    [iv getCString:ivPointer maxLength:sizeof(ivPointer) encoding:NSUTF8StringEncoding];

    //    if (patchNeeded) {
    //        keyPointer[0] = '\0';  // Previous iOS version than iOS7 set the first char to '\0' if the key was longer than kCCKeySizeAES256
    //    }

    NSUInteger dataLength = [plainText length];

    // For block ciphers, the output size will always be less than or equal to the input size plus the size of one block.
    size_t buffSize = dataLength + kCCBlockSizeAES128;
    void *buff = malloc(buffSize);

    size_t numBytesEncrypted = 0;



    CCCryptorStatus status = CCCrypt(kCCEncrypt, /* kCCEncrypt, etc. */
                                     kCCAlgorithmAES128, /* kCCAlgorithmAES128, etc. */
                                     kCCOptionPKCS7Padding, /* kCCOptionPKCS7Padding, etc. */
                                     keyPointer, kCCKeySizeAES256, /* key and its length */
                                     NULL, /* initialization vector - use random IV everytime */
                                     [plainText bytes], [plainText length], /* input  */
                                     buff, buffSize,/* data RETURNED here */
                                     &amp;numBytesEncrypted);


    if (status == kCCSuccess) {
        return [NSData dataWithBytesNoCopy:buff length:numBytesEncrypted];
    }

    free(buff);
    return nil;
}

- (NSString *) stringFromHex:(NSString *)str
{
    NSMutableData *stringData = [[NSMutableData alloc] init];
    unsigned char whole_byte;
    char byte_chars[3] = {'\0','\0','\0'};
    int i;
    for (i=0; i &lt; [str length] / 2; i++) {
        byte_chars[0] = [str characterAtIndex:i*2];
        byte_chars[1] = [str characterAtIndex:i*2+1];
        whole_byte = strtol(byte_chars, NULL, 16);
        [stringData appendBytes:&amp;whole_byte length:1];
    }
    return [[NSString alloc] initWithData:stringData encoding:NSASCIIStringEncoding];
}
</code></pre>

<p>Please find android code also,</p>

<pre><code>   protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    generateHMAC();
}

String K0 = ""4f28d5901b4b7b80d33fda76ca372c2a20bd1a6c2aad7fa215dc79d507330678"";
String generatedString = ""com.myapp.com|355004059196637|911111111111|11341e5e-9643-4559-bbb7-34d40555e96c"";

private void generateHMAC() {
    Log.d(""Message of Hash"", generatedString);
    byte[] var14 = new byte[0];
    try {
        var14 = SHA256(generatedString);
        byte[] var15 = new byte[0];
        var15 = encrypt(var14, hexStringToByteArray(K0));
        String var4 = Base64.encodeToString(var15, 2);
        Log.d(""Existing K0"", K0);
        Log.d(""HMAC"", var4);
    } catch (Exception e) {
        e.printStackTrace();
    }
}


public byte[] SHA256(String paramString) throws Exception {
    MessageDigest md = MessageDigest.getInstance(""SHA-256"");
    md.update(paramString.getBytes(""UTF-8""));
    byte[] digest = md.digest();
    return digest;
}

public byte[] encrypt(byte[] var1, byte[] var2) throws Exception {
    SecretKeySpec var3 = new SecretKeySpec(var2, ""AES"");
    byte[] var4 = new byte[16];
    IvParameterSpec var5 = new IvParameterSpec(var4);
    Cipher var6 = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    var6.init(1, var3, var5);
    byte[] var7 = var6.doFinal(var1);
    return var7;
}

public byte[] hexStringToByteArray(String var1) {
    byte[] var2 = new byte[var1.length() / 2];

    for (int var3 = 0; var3 &lt; var2.length; ++var3) {
        int var4 = var3 * 2;
        int var5 = Integer.parseInt(var1.substring(var4, var4 + 2), 16);
        var2[var3] = (byte) var5;
    }

    return var2;
}
</code></pre>
","<p>Updates after you provided iOS code:</p>

<ul>
<li>The aesEncryptData should be your output.  Get rid of the hmac, that has nothing to do with AES encryption (instead, it is for message integrity).</li>
<li>The only way you are going to match your Android code is if you are using the same IV that the Android code is using.</li>
</ul>

<hr>

<p>Earlier reply: </p>

<p>How long is the input?  Providing source code and sample data may help us solve the problem quicker.</p>

<p>Without the requested information, I don't have your answer, but I have a few pointers that might help you get to the bottom of it:</p>

<ul>
<li>Your padding is okay.  PKCS5Padding in Java is <a href=""https://crypto.stackexchange.com/questions/9043/what-is-the-difference-between-pkcs5-padding-and-pkcs7-padding"">wrongly named</a> implementation of PKCS#7, so it should be compatible with Apple's kCCOptionPKCS7Padding.</li>
<li><a href=""https://opensource.apple.com/source/CommonCrypto/CommonCrypto-60026/CommonCrypto/CommonCryptor.h.auto.html"" rel=""nofollow noreferrer"">Apple by default uses CBC mode</a> under the hood if no mode is specified, so that agrees with the Android code.  So that cannot be the problem either.</li>
<li>When you encrypt, the ciphertext will be a multiple of 16 bytes (because AES has N=16 bytes block size and according to defn of <a href=""https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7"" rel=""nofollow noreferrer"">PKCS #7</a>).  Specifically:

<ul>
<li>If the input is a multiple of 16 bytes, then the output should be exactly 16 bytes more than the input.</li>
<li>If the input is not a multiple of 16 bytes, then the output should be 16*Ceiling(Input length/16).  Example: 47 byte input should be 16*Ceiling(17/16) = 16*3 = 48 byte output.</li>
</ul></li>
<li>It is possible that one of the implementations is outputting the IV as part of the ciphertext.  If this is happening, it should be at the beginning of the ciphertext.  You should be able to test to see if this is happening.  (Let me know if that is happening please)</li>
</ul>

<p>Having said that, something is weird and likely implemented wrong, and we need the code to get to the bottom of it.  It makes no sense that the Android code results in 3 blocks of 16 whereas the Apple code results in 5 blocks of 16.  </p>

<p>Also, as I commented above, even though Apple tells you that the IV is optional, they mean that it is optional in terms of getting the code to work.  It is <a href=""https://stackoverflow.com/questions/1220751/how-to-choose-an-aes-encryption-mode-cbc-ecb-ctr-ocb-cfb/42658861#42658861"">not optional for security</a>.  IVs are required and must be unpredictable for CBC mode of operation, and they should never be repeated.  If you ignore that, you leak information about your data, and in some situations, an attacker may be able to decrypt the data (padding oracle attacks).</p>
","748","<ios><objective-c><aes><encryption-symmetric>","5","3","1","2017-03-30 06:25:27","43079739","3","2","1277825","","2017-03-30 06:25:27","2017-03-20 05:43:27",""
"14352447","Is there any difference between implementation of Triple DES in C# and Java? Java gives error wrong IV size","<p>In our application we are using Triple DES to encrypt and decrypt the data. We have the enc/dec code in C# which uses 24 byte key and 12 byte IV which works fine. Now we want to implement same code in java but when I use 12 byte IV, I get an error in java saying wrong IV size. When I googled around, I came to know that java uses 8 byte IV. Now I am confused as how come there is implementation difference in C# and JAVA for triple DES. Or am I missing anything?</p>

<p>This is something similar to our encryption code</p>

<p><code></p>

<pre><code>class cTripleDES
{
// define the triple des provider
private TripleDESCryptoServiceProvider m_des = new TripleDESCryptoServiceProvider();

// define the string handler
private UTF8Encoding m_utf8 = new UTF8Encoding();

// define the local property arrays
private byte[] m_key;
private byte[] m_iv;

public cTripleDES(byte[] key, byte[] iv)
{
    this.m_key = key;
    this.m_iv = iv;
}

public byte[] Encrypt(byte[] input)
{
    return Transform(input,
           m_des.CreateEncryptor(m_key, m_iv));
}

public byte[] Decrypt(byte[] input)
{
    return Transform(input,
           m_des.CreateDecryptor(m_key, m_iv));
}

public string Encrypt(string text)
{
    byte[] input = m_utf8.GetBytes(text);
    byte[] output = Transform(input,
                    m_des.CreateEncryptor(m_key, m_iv));
    return Convert.ToBase64String(output);
}

public string Decrypt(string text)
{
    byte[] input = Convert.FromBase64String(text);
    byte[] output = Transform(input,
                    m_des.CreateDecryptor(m_key, m_iv));
    return m_utf8.GetString(output);
}

private byte[] Transform(byte[] input,
               ICryptoTransform CryptoTransform)
{
    // create the necessary streams
    MemoryStream memStream = new MemoryStream();
    CryptoStream cryptStream = new CryptoStream(memStream,
                 CryptoTransform, CryptoStreamMode.Write);
    // transform the bytes as requested
    cryptStream.Write(input, 0, input.Length);
    cryptStream.FlushFinalBlock();
    // Read the memory stream and
    // convert it back into byte array
    memStream.Position = 0;
    byte[] result = memStream.ToArray();
    // close and release the streams
    memStream.Close();
    cryptStream.Close();
    // hand back the encrypted buffer
    return result;
}
</code></pre>

<p>}</p>

<p></code></p>

<p>This is how we are utilizing it:</p>

<p><code></p>

<pre><code>string IVasAString = ""AkdrIFjaQrRQ"";
byte[] iv = Convert.FromBase64String(IVasAString);
byte[] key = ASCIIEncoding.UTF8.GetBytes(KEY);

// instantiate the class with the arrays
cTripleDES des = new cTripleDES(key, iv);
string output = des.Encrypt(""DATA TO BE ENCRYPTED"");
</code></pre>

<p></code></p>
","<p>TripleDES has a <a href=""http://en.wikipedia.org/wiki/Triple_DES"" rel=""nofollow noreferrer"">64-bit block size</a>. You need to use an <a href=""https://stackoverflow.com/questions/6364219/tripledes-iv-for-c"">8 byte IV</a> in C#. </p>
","741","<c#><java><encryption><encryption-symmetric><tripledes>","0","2","2","2013-01-16 06:40:25","14352474","0","0","1283104","","2013-01-16 06:40:25","2013-01-16 06:22:15",""
"14352447","Is there any difference between implementation of Triple DES in C# and Java? Java gives error wrong IV size","<p>In our application we are using Triple DES to encrypt and decrypt the data. We have the enc/dec code in C# which uses 24 byte key and 12 byte IV which works fine. Now we want to implement same code in java but when I use 12 byte IV, I get an error in java saying wrong IV size. When I googled around, I came to know that java uses 8 byte IV. Now I am confused as how come there is implementation difference in C# and JAVA for triple DES. Or am I missing anything?</p>

<p>This is something similar to our encryption code</p>

<p><code></p>

<pre><code>class cTripleDES
{
// define the triple des provider
private TripleDESCryptoServiceProvider m_des = new TripleDESCryptoServiceProvider();

// define the string handler
private UTF8Encoding m_utf8 = new UTF8Encoding();

// define the local property arrays
private byte[] m_key;
private byte[] m_iv;

public cTripleDES(byte[] key, byte[] iv)
{
    this.m_key = key;
    this.m_iv = iv;
}

public byte[] Encrypt(byte[] input)
{
    return Transform(input,
           m_des.CreateEncryptor(m_key, m_iv));
}

public byte[] Decrypt(byte[] input)
{
    return Transform(input,
           m_des.CreateDecryptor(m_key, m_iv));
}

public string Encrypt(string text)
{
    byte[] input = m_utf8.GetBytes(text);
    byte[] output = Transform(input,
                    m_des.CreateEncryptor(m_key, m_iv));
    return Convert.ToBase64String(output);
}

public string Decrypt(string text)
{
    byte[] input = Convert.FromBase64String(text);
    byte[] output = Transform(input,
                    m_des.CreateDecryptor(m_key, m_iv));
    return m_utf8.GetString(output);
}

private byte[] Transform(byte[] input,
               ICryptoTransform CryptoTransform)
{
    // create the necessary streams
    MemoryStream memStream = new MemoryStream();
    CryptoStream cryptStream = new CryptoStream(memStream,
                 CryptoTransform, CryptoStreamMode.Write);
    // transform the bytes as requested
    cryptStream.Write(input, 0, input.Length);
    cryptStream.FlushFinalBlock();
    // Read the memory stream and
    // convert it back into byte array
    memStream.Position = 0;
    byte[] result = memStream.ToArray();
    // close and release the streams
    memStream.Close();
    cryptStream.Close();
    // hand back the encrypted buffer
    return result;
}
</code></pre>

<p>}</p>

<p></code></p>

<p>This is how we are utilizing it:</p>

<p><code></p>

<pre><code>string IVasAString = ""AkdrIFjaQrRQ"";
byte[] iv = Convert.FromBase64String(IVasAString);
byte[] key = ASCIIEncoding.UTF8.GetBytes(KEY);

// instantiate the class with the arrays
cTripleDES des = new cTripleDES(key, iv);
string output = des.Encrypt(""DATA TO BE ENCRYPTED"");
</code></pre>

<p></code></p>
","<p>Got the answer.
decodeBase64 method from apache common framework (commons.codec.binary.Base64) does the necessary.
Thanks mfanto for the heads up.!</p>
","741","<c#><java><encryption><encryption-symmetric><tripledes>","0","0","2","2013-01-16 06:40:25","14352474","0","0","1283104","","2013-01-16 06:40:25","2013-01-16 06:22:15",""
"27916700","Why mcrypt_encrypt returns a non readable character string","<p>I tried to encrypt a data using 16bit key using ecb mode for rinjndael_128 cipher. the encrption was successful and i can also succesfully decrypt the encrypted data. But the problem is, the mcrypt_encrypt function returns the garbled character string. I want to see this result in hex format.</p>

<p>while Im using the online tool for the same data getting this hex value as result <code>bd61ce515890e2e3fb5e404bbe886cc2</code></p>

<p><strong>code</strong></p>

<pre><code>$key = pack('H*', ""07070609070306050601070007000700"");
$plaintext = ""2dfb0998b2f76f35f5b08972b57cfbfc"";   
$ciphertext = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $plaintext, MCRYPT_MODE_ECB);
$ciphertext_base64 = base64_encode($ciphertext);
echo  ""encrypted - text: "".$ciphertext . ""&lt;br&gt;"";
echo  ""encrypted base 64 encoded - text: "".$ciphertext_base64 . ""&lt;br&gt;"";

$ciphertext_dec = base64_decode($ciphertext_base64);
$plaintext_dec = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key,$ciphertext_dec, MCRYPT_MODE_ECB);
echo  ""decrypted data - text: "".$plaintext_dec . ""&lt;br&gt;"";
</code></pre>

<p><strong>Result:</strong></p>

<pre><code>before encryption - text: 2dfb0998b2f76f35f5b08972b57cfbfc
encrypted - text: (MÓx‹ÓåBÖ i½4²5žNUXÃè/Óë£@ö
encrypted base 64 encoded - text: KE3TeIsa0+VC1g1pCL00sjWeTlVYw+iNgS/TEOujQPY=
decrypted data - text: 2dfb0998b2f76f35f5b08972b57cfbfc*
</code></pre>
","<p>The block size of RIJNDAEL-128/ECB is ...well 128 bit, i.e. 16 bytes.<br>
But your input currently is 32 bytes and therefore the output is also two blocks i.e. 32 bytes long.  </p>

<p>Your plaintext looks like it's ""hex-encoded"" like the key. So, treat it like the key.<br>
Also base64_encode() is not the same as making a ""hex-string"" from a byte sequence. But you can use <a href=""http://docs.php.net/unpack"" rel=""nofollow"">unpack()</a> for that.</p>

<pre><code>&lt;?php
$key = pack('H*', '07070609070306050601070007000700');
$plaintext = pack('H*', '2dfb0998b2f76f35f5b08972b57cfbfc');
$ciphertext = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $plaintext, MCRYPT_MODE_ECB);
list(,$ciphertext_hex) = unpack('H*', $ciphertext);
echo $ciphertext_hex;
</code></pre>

<p>prints <code>bd61ce515890e2e3fb5e404bbe886cc2</code></p>
","733","<php><encryption><aes><encryption-symmetric>","2","1","1","2015-08-02 11:56:25","27918049","0","","1816580","","2015-08-02 11:56:25","2015-01-13 07:13:06",""
"23744500","Downloading encrypted file from Window Azure storage","<p>I have created a MVC WebRole Window Azure application where i upload encrypted files to Azure blob storage using SymmetricAlgorithm (Rijndael) like this</p>

<p>Controler>Action is</p>

<pre><code>[HttpPost]
public ActionResult UploadImage_post(HttpPostedFileBase fileBase)
{
    if (fileBase.ContentLength &gt; 0)
    {
       // Retrieve a reference to a container 
       Microsoft.WindowsAzure.StorageClient.CloudBlobContainer blobContainer =
              _myBlobStorageService.GetCloudBlobContainer();

       Microsoft.WindowsAzure.StorageClient.CloudBlob blob =
                blobContainer.GetBlobReference(fileBase.FileName);
       using (BlobStream blobStream = blob.OpenWrite())
       {
             string encryptionKey = //somekey;
             byte[] file = new byte[fileBase.ContentLength];
             EncDecAlgo.EncryptBlobFile(file, blobStream, encryptionKey);
       }
    }
}

public void EncryptBlobFile(byte[] file, BlobStream bs, string key)
    {
        PasswordDeriveBytes pdb = new PasswordDeriveBytes(key,
            new byte[] {0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 
        0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76});
        Rijndael alg = Rijndael.Create();

        alg.Key = pdb.GetBytes(32);
        alg.IV = pdb.GetBytes(16);

        CryptoStream cs = new CryptoStream(bs,
           alg.CreateEncryptor(), CryptoStreamMode.Write);

        foreach (var data in file)
        {
            cs.WriteByte((byte)data);
        }

        cs.Close();
        bs.Close();
    }
</code></pre>

<p>The above File encryption is working fine.</p>

<p>For Downloading code is</p>

<pre><code> public ActionResult DownloadFile(string filename)
    {
        // Retrieve reference to a previously created container.
        Microsoft.WindowsAzure.StorageClient.CloudBlobContainer blobContainer =
         _myBlobStorageService.GetCloudBlobContainer();

        Microsoft.WindowsAzure.StorageClient.CloudBlob blob =
            blobContainer.GetBlobReference(filename);
        blob.FetchAttributes();
        string encryptionKey = //same key used in encryption;
        using (BlobStream blobStream = blob.OpenRead())
        {
            EncDecAlgo.DecryptBlobFile(blobStream, encryptionKey, filename);
        }
    }

    public static void DecryptBlobFile(BlobStream bs, string key, string filePath)
    {
        try
        {
            PasswordDeriveBytes pdb = new PasswordDeriveBytes(key,
                new byte[] {0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 
        0x64, 0x76, 0x65, 0x64, 0x65, 0x76});

        Rijndael alg = Rijndael.Create();

        alg.Key = pdb.GetBytes(32);
        alg.IV =  pdb.GetBytes(16);

        CryptoStream cs = new CryptoStream(bs,
            alg.CreateDecryptor(), CryptoStreamMode.Read);

        // Decrypt &amp; Download Here
        System.Web.HttpContext.Current.Response.AddHeader(""Content-Disposition"", ""attachment; filename="" + Path.GetFileName(filePath));
        System.Web.HttpContext.Current.Response.ContentType = ""application/"" + Path.GetExtension(filePath).Replace(""."", """");


        int data;
        while ((data = cs.ReadByte()) != -1)
        {
            if (data != 0)
            {
            }
            System.Web.HttpContext.Current.Response.OutputStream.WriteByte((byte)data);
            System.Web.HttpContext.Current.Response.Flush();

        }
        cs.Close();
        bs.Close();
        }
        catch
        {
        }
    }
</code></pre>

<p>On downloading get following error</p>

<pre><code>Server cannot set content type after HTTP headers have been sent.
</code></pre>

<p>Please suggest some solution.</p>
","<p>This should be fairly simple, hope this is enough to get you started:</p>

<pre><code>public class CloudFileResult : ActionResult
{
  private string m_FileName;
  private CloudBlobContainer m_Container;

  public CloudFileResult(string imageName, CloudBlobContainer container)
  {
    if (string.IsNullOrEmpty(imageName))
    {
      throw new ArgumentNullException(""imageName"");
    }
    if (container == null)
    {
      throw new ArgumentNullException(""container"");
    }

    m_FileName = imageName;
    m_Container = container;
  }

  public override void ExecuteResult(ControllerContext context)
  {
    context.HttpContext.Response.Clear();
    var blockBlob = m_Container.GetBlockBlobReference(m_FileName);
    blockBlob.FetchAttributes();
    context.HttpContext.Response.ContentType = blockBlob.Metadata[""ContentType""];
    const string key = ""my secret"";
    using (var pdb = new Rfc2898DeriveBytes(key, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 }))
    {
      using (var alg = RijndaelManaged.Create())
      {
        alg.Key = pdb.GetBytes(32);
        alg.IV = pdb.GetBytes(16);
        using (var stream = new CryptoStream(context.HttpContext.Response.OutputStream, alg.CreateDecryptor(), CryptoStreamMode.Write))
        {
          blockBlob.DownloadToStream(stream);
        }
      }
    }
  }
}

static void UploadFileToCloud(CloudBlobContainer container, HttpPostedFileBase file)
{
  const string key = ""my secret"";
  using (var pdb = new Rfc2898DeriveBytes(key, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 }))
  {
    using (var alg = RijndaelManaged.Create())
    {
      alg.Key = pdb.GetBytes(32);
      alg.IV = pdb.GetBytes(16);

      var blockBlob = container.GetBlockBlobReference(file.FileName);
      using (var stream = new CryptoStream(file.InputStream, alg.CreateEncryptor(), CryptoStreamMode.Read))
      {
        blockBlob.UploadFromStream(stream);
      }
      blockBlob.Metadata.Add(""ContentType"", file.ContentType);
      blockBlob.SetMetadata();
    }
  }
}

static CloudBlobContainer GetContainer()
{
  string connection = ""DefaultEndpointsProtocol=http;AccountName=AzureAccount;AccountKey=AzureAccountKey;"";
  var account = CloudStorageAccount.Parse(connection);
  var client = account.CreateCloudBlobClient();
  var container = client.GetContainerReference(""container"");
  return container;
}
</code></pre>

<p>As for download you can simple use:</p>

<pre><code>[HttpGet]
public ActionResult Index(string fileName)
{
  if (!string.IsNullOrEmpty(fileName))
  {
    return new CloudFileResult(fileName, GetContainer());
  }
  return View();
}
</code></pre>

<p>Pointers:</p>

<ul>
<li>I prefer using managed crypto algorithms</li>
<li>I store contenttype of original file in blob metadata (so you know how to serve it)</li>
<li>catch {} gives me creeps, at least log the exception somewhere</li>
<li>Rather than playing with HttpContext.Response, create custom ActionResult</li>
<li>Always dispose IDisposable stuff</li>
</ul>
","732","<asp.net-mvc-3><azure-storage><azure-web-roles><encryption-symmetric>","3","2","1","2014-05-30 11:17:40","23953322","7","","839256","","2014-05-19 19:23:37","2014-05-19 18:14:06",""
"4001319","Encryption between C# and ActionScript 2","<p>I'm trying to send encrypted data from a flash ( Action Script 2.0) to decrypt it in C# </p>

<p>So far I've found <a href=""http://ryoushin.com/cmerighi/en-us/42,2007-03-02/AES-Rijndael_with_ActionScript_and_ASP_Net.aspx"" rel=""nofollow noreferrer"">this post</a> (Link opens in Chrome, Opera and Safari. Doesn't work in IE nor Firefox)
There's also this question: <a href=""https://stackoverflow.com/questions/3308781/encrypt-in-actionscript3-and-decrypt-in-asp-net-c"">Encrypt in ActionScript3 and Decrypt in asp.net c#</a></p>

<p>But both only work in ActionScript 3</p>

<p>Do you know an API to do this on Action Script 2 ?</p>
","<p>It would be useful to know why/what you intend to encypt. I'm fairly confident that you're probably barking up the wrong tree. It's common knowlege that ActionScript is <em>very easily</em> decompiled and your encryption efforts will be wide open for all to see. While this may not be a problem, if you really need encryption and end-to-end security, use HTTPS, not some home-brewed means of securely communicating data.</p>
","732","<c#><actionscript-2><encryption-symmetric>","0","0","2","2010-12-14 00:27:48","4434817","2","","-1","","2017-05-23 12:26:49","2010-10-22 22:06:22",""
"4001319","Encryption between C# and ActionScript 2","<p>I'm trying to send encrypted data from a flash ( Action Script 2.0) to decrypt it in C# </p>

<p>So far I've found <a href=""http://ryoushin.com/cmerighi/en-us/42,2007-03-02/AES-Rijndael_with_ActionScript_and_ASP_Net.aspx"" rel=""nofollow noreferrer"">this post</a> (Link opens in Chrome, Opera and Safari. Doesn't work in IE nor Firefox)
There's also this question: <a href=""https://stackoverflow.com/questions/3308781/encrypt-in-actionscript3-and-decrypt-in-asp-net-c"">Encrypt in ActionScript3 and Decrypt in asp.net c#</a></p>

<p>But both only work in ActionScript 3</p>

<p>Do you know an API to do this on Action Script 2 ?</p>
","<p>It turned out that the <a href=""http://ryoushin.com/cmerighi/en-us/42,2007-03-02/AES-Rijndael_with_ActionScript_and_ASP_Net.aspx"" rel=""nofollow"">first link</a> indeed works with ActionScript 2.0</p>

<p>There's also code on how to do exactly what I was trying to achieve.</p>
","732","<c#><actionscript-2><encryption-symmetric>","0","0","2","2010-12-14 00:27:48","4434817","2","","-1","","2017-05-23 12:26:49","2010-10-22 22:06:22",""
"45103983","Generate AES key based on password only","<p>I have an application which may require a password for authentification.<br>
This application does not handle any sensitive data, because this ""password"" is chosen by the host and told the ""clients"" via another channel (WhatsApp or whatever).
So when a client wants to authenticate, the host generates a random String which is sent to the client.<br>
The client then encrypts this Random String with the password the user enters.<br>
The encrypted random String is the sent back t the host.<br>
The host decrypts this encrypted String with the key generated by the same password.<br>
If the unencrypted and original String match, the user is logged in.<br>
This is what I came up with so far:</p>

<pre><code>String base64;
char[] password = ""password"".toCharArray();
String randomString = new BigInteger(130, new SecureRandom()).toString(32);
try {
    //Encrypt Client Side
    SecretKey key = new SecretKeySpec(SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA512"").generateSecret(new PBEKeySpec(password)).getEncoded(), ""AES"");
    Cipher cipher = Cipher.getInstance(""AES"");
    cipher.init(Cipher.ENCRYPT_MODE, key);
    base64 = Base64.getEncoder().encodeToString(cipher.doFinal(randomString.getBytes(StandardCharsets.UTF_8)));
} catch (GeneralSecurityException e) {
    throw new IllegalStateException(e);
}
try {
    //Decrypt Server Side
    SecretKey key = new SecretKeySpec(SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA512"").generateSecret(new PBEKeySpec(password)).getEncoded(), ""AES"");
    Cipher cipher = Cipher.getInstance(""AES"");
    cipher.init(Cipher.DECRYPT_MODE, key);
    //Check if both strings match
    System.out.println(Arrays.equals(cipher.doFinal(Base64.getDecoder().decode(base64)), randomString.getBytes(StandardCharsets.UTF_8)));
} catch (GeneralSecurityException e) {
    throw new IllegalStateException(e);
}
</code></pre>

<p>Unfortunately this code throws an exception: <code>java.security.spec.InvalidKeySpecException: Salt not found</code><br>
Should I use a different algorithm, or should I generate a salt by hashing the password itself, or a completely different approach?
I'd like to avoid having to send a generated salt along with the random String</p>
","<p>You should give <code>PBEKeySpec</code> what it needs to generate enough bits for an AES key. You need the same salt on both sides, so you could do: </p>

<pre><code> byte[] salt = new byte[8];
 System.arraycopy(randomString.getBytes(""UTF-8""), 0, salt, 0, 8);
</code></pre>

<p>Now replace your <code>PBEKeySpec</code> with <code>new PBEKeySpec(password, salt, 10, 128)</code> and everything should work.</p>
","723","<java><security><encryption><encryption-symmetric>","0","1","1","2017-07-14 15:10:52","45106335","0","2","","","","2017-07-14 13:14:58",""
"23805446","Android Encryption & Decryption algorithm for large files","<p>I am using AES algorithm in Android for encryption and decryption. It is okay for small files but when I tried to decrypt a file approximately 70 mb I am waiting 2-3 minutes. Which algorithm should i use? </p>
","<p>I don't know if there is an algorithm that will make a difference in terms of the time it takes to encrypt/decrypt a file of that size.</p>

<p>But you can always try an approach of splitting the file and encrypt/decrypt each part separately where you can use some asynktasks to do it in ""parallel"".</p>

<p>For example you can have 7 files of 10MB each. You decrypt the 7 parts in paralel and stick them together after the decryption.</p>

<p>If you still want to have one physical file, you can put the encrypted separate parts in a zip file and extract them when you need to decrypt.</p>
","720","<android><performance><encryption><encryption-symmetric><encryption-asymmetric>","0","0","1","2014-05-22 11:34:21","","4","","","","","2014-05-22 11:24:08",""
"54675087","Generate web service client secure policy from .wsdl for java","<p>I have been researching how to implement a web service client policies from a .wsdl file. </p>

<p>The policies of the web services implicates a signature and encryption using a .jks file with the necessary keys (asymmetric privateKey for signing, and a symmetric privateKey for encryption). The policy is: <strong>username:oracle/wss10_username_token_with_message_protection_service_policy</strong>.</p>

<p>I am able to make the .xsd files (request, response and service objects) using the wsimport tool for java (or with cxf or axis2). What i can't resolve is how to make the correct policy. </p>

<p>Is there any way to automatically generate the policies from the .wsdl or do i have to make them by myself</p>
","<p>The username:oracle/wss10_username_token_with_message_protection_service_policy is solved with spring ws this way:</p>

<pre><code>&lt;!-- == Ougoing interceptor == --&gt;
&lt;bean id=""loginOutgoingWss4jSecurityInterceptor"" class=""org.springframework.ws.soap.security.wss4j2.Wss4jSecurityInterceptor""&gt;
    &lt;property name=""securementActions"" value=""Timestamp Signature Encrypt"" /&gt;

    &lt;!--  == Set Outgoing Signature properties == --&gt;
    &lt;property name=""securementUsername"" value=""alias""/&gt;
    &lt;property name=""securementPassword"" value=""aliasPass""/&gt;
    &lt;property name=""securementSignatureKeyIdentifier"" value=""DirectReference""/&gt;
    &lt;property name=""securementSignatureCrypto"" ref=""cryptoFactoryBean"" /&gt;
    &lt;property name=""securementSignatureParts"" value=""{Element}{}Body;{Element}{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Timestamp;"" /&gt;

    &lt;!--  == Set Outgoing Encryption properties == --&gt;
    &lt;property name=""securementEncryptionUser"" value=""alias""/&gt; 
    &lt;property name=""securementEncryptionCrypto"" ref=""cryptoFactoryBean"" /&gt;
    &lt;property name=""securementEncryptionKeyIdentifier"" value=""DirectReference""/&gt;
    &lt;property name=""securementEncryptionParts"" value=""{Content}{}Body;"" /&gt;
&lt;/bean&gt;

&lt;!-- == Incoming interceptor == --&gt;
 &lt;bean id=""loginIncomingWss4jSecurityInterceptor"" class=""org.springframework.ws.soap.security.wss4j2.Wss4jSecurityInterceptor""&gt;
    &lt;property name=""validationActions"" value=""Timestamp Signature Encrypt"" /&gt;

    &lt;!--  == Set Validations Response, This validate signature and decrypts response == --&gt;
    &lt;property name=""validateResponse"" value=""true"" /&gt;

    &lt;!-- The lower operation validation. Less time consume--&gt;
    &lt;property name=""validateRequest"" value=""false"" /&gt;
    &lt;property name=""enableSignatureConfirmation"" value=""false""/&gt;

    &lt;!--  == Set Incoming Signature/Decryption keystore == --&gt;
    &lt;property name=""validationDecryptionCrypto"" ref=""cryptoFactoryBean"" /&gt;
    &lt;property name=""validationSignatureCrypto"" ref=""cryptoFactoryBean"" /&gt;

    &lt;!-- Sets the {@link org.apache.ws.security.WSPasswordCallback} handler to use when validating messages --&gt;
    &lt;property name=""validationCallbackHandler""&gt;
        &lt;bean class=""org.springframework.ws.soap.security.wss4j2.callback.KeyStoreCallbackHandler""&gt;
            &lt;property name=""privateKeyPassword"" value=""aliasPass""/&gt;
        &lt;/bean&gt;
    &lt;/property&gt; 
 &lt;/bean&gt;
</code></pre>
","718","<java><soap><digital-signature><ws-security><encryption-symmetric>","1","0","2","2019-03-06 00:01:49","54979836","4","2","433348","","2019-02-13 19:14:30","2019-02-13 16:30:43",""
"54675087","Generate web service client secure policy from .wsdl for java","<p>I have been researching how to implement a web service client policies from a .wsdl file. </p>

<p>The policies of the web services implicates a signature and encryption using a .jks file with the necessary keys (asymmetric privateKey for signing, and a symmetric privateKey for encryption). The policy is: <strong>username:oracle/wss10_username_token_with_message_protection_service_policy</strong>.</p>

<p>I am able to make the .xsd files (request, response and service objects) using the wsimport tool for java (or with cxf or axis2). What i can't resolve is how to make the correct policy. </p>

<p>Is there any way to automatically generate the policies from the .wsdl or do i have to make them by myself</p>
","<p>If you are using policies in WS-SecurityPolicy (1.1 or later) in your wsdl, no need to generate policies nor make them on client side with Apache CXF. With WS-SecurityPolicy, CXF's security runtime is policy driven.</p>

<p>1) You follow CXF's WSDL-first approach to generate the client code, using either <code>wsdl2java</code> command-line tool or Maven <code>cxf-codegen-plugin</code> (wsdl2java goal). This is described in CXF doc's <a href=""http://cxf.apache.org/docs/how-do-i-develop-a-client.html"" rel=""nofollow noreferrer""><em>How to develop a client</em></a>.</p>

<p>2) Following CXF's doc on <a href=""http://cxf.apache.org/docs/ws-securitypolicy.html"" rel=""nofollow noreferrer"">WS-SecurityPolicy usage</a>, you configure the client security properties for the  wsdl port you want to use, either using JAX-WS API (on the client's <code>RequestContext</code>) or Spring XML configuration. For the list of possible properties, there are the generic <a href=""http://cxf.apache.org/docs/security-configuration.html"" rel=""nofollow noreferrer"">XML security</a> ones and <a href=""http://cxf.apache.org/docs/ws-securitypolicy.html"" rel=""nofollow noreferrer"">WS-Security-specific</a> ones. Example with Spring XML for UsernameToken policy (from <a href=""https://github.com/gmazza/blog-samples/blob/master/cxf_ut_messagelayer/client/src/main/resources/cxf.xml"" rel=""nofollow noreferrer"">Glen Mazza's blog samples</a> ):</p>

<pre class=""lang-xml prettyprint-override""><code>&lt;beans xmlns=""http://www.springframework.org/schema/beans""
   xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
   xmlns:jaxws=""http://cxf.apache.org/jaxws""
   xsi:schemaLocation=""http://www.springframework.org/schema/beans 
   http://www.springframework.org/schema/beans/spring-beans.xsd
   http://cxf.apache.org/jaxws 
   http://cxf.apache.org/schemas/jaxws.xsd""&gt;
&lt;jaxws:client name=""{http://www.example.org/contract/DoubleIt}DoubleItPort"" createdFromAPI=""true""&gt;
        &lt;!-- Use this for the UsernameToken Symmetric Binding w/X.509 for secret key derivation --&gt;
        &lt;jaxws:properties&gt;
            &lt;entry key=""ws-security.username"" value=""alice""/&gt;        
            &lt;entry key=""ws-security.callback-handler"" value=""client.ClientPasswordCallback""/&gt;        
            &lt;entry key=""ws-security.encryption.properties"" value=""clientKeystore.properties""/&gt;
            &lt;entry key=""ws-security.encryption.username"" value=""myservicekey""/&gt;
        &lt;/jaxws:properties&gt;

        &lt;!-- Use this for the UsernameToken Symmetric Binding w/UT password for secret key derivation --&gt;
        &lt;!--jaxws:properties&gt;
            &lt;entry key=""ws-security.username"" value=""alice""/&gt;        
            &lt;entry key=""ws-security.callback-handler"" value=""client.ClientPasswordCallback""/&gt;        
        &lt;/jaxws:properties--&gt;
&lt;/jaxws:client&gt;
&lt;/beans&gt;
</code></pre>

<p>Put this in <code>/cxf.xml</code> on the class path. Warning: the example is using a <code>CallbackHandler</code> subclass (<a href=""https://github.com/gmazza/blog-samples/blob/master/cxf_ut_messagelayer/client/src/main/java/client/ClientPasswordCallback.java"" rel=""nofollow noreferrer"">client.ClientPasswordCallback</a> in this example) to provide the password. So you'll need to provide your own implementation. </p>

<p>3) Back to CXF doc's <a href=""http://cxf.apache.org/docs/developing-a-consumer.html#DevelopingaConsumer-Clientmainfunction"" rel=""nofollow noreferrer""><em>How to develop a client</em></a> - last part - in the application code, initialize the client using JAX-WS API with arguments: a) the location of the WSDL (URL) <em>having the WS-SecurityPolicy policies</em> (you already have that, as far as I understand); b) service and port's QNames to be used by the client, as defined in the WSDL:</p>

<pre class=""lang-java prettyprint-override""><code>final Service service = Service.create(wsdlLocation, SERVICE_QNAME);
final DoubleItPortType transportPort = service.getPort(PORT_QNAME, DoubleItPortType.class);
</code></pre>

<p>4) Make sure you have <code>cxf-rt-ws-policy</code> and <code>cxf-rt-ws-security</code> modules on the classpath at runtime to enable WS-SecurityPolicy support.</p>
","718","<java><soap><digital-signature><ws-security><encryption-symmetric>","1","0","2","2019-03-06 00:01:49","54979836","4","2","433348","","2019-02-13 19:14:30","2019-02-13 16:30:43",""
"23938414","Incorrect results while decrypting AES-128-ECB text","<p>I have a piece of <code>Base64</code> text, which I know was encrypted in <code>AES-128-ECB mode</code>, and even know the key (<code>YELLOW SUBMARINE</code>, 16 bytes). I'm using the following code to decrypt it.</p>

<p><code>textbox1</code> contains cyphertext;</p>

<p><code>textbox2</code> contains the key</p>

<pre><code>    private void button6_Click(object sender, EventArgs e)
    {
        Byte[] CTBytes = System.Convert.FromBase64String(textBox1.Text);            
        Byte[] KeyBytes = new Byte[textBox2.TextLength];
        string Key = textBox2.Text;
        Aes Decryptor = Aes.Create();
        Decryptor.Mode = CipherMode.ECB;
        Decryptor.BlockSize = 128;
        for (int iCounter = 0; iCounter &lt; textBox2.Text.Length; iCounter++)            
            KeyBytes[iCounter] = Convert.ToByte(textBox2.Text[iCounter]);          
        Decryptor.KeySize = KeyBytes.Length * 8;
        Decryptor.Key = KeyBytes;            
        Decryptor.Padding = PaddingMode.None;
        ICryptoTransform Decr = Decryptor.CreateDecryptor();
        Byte[] plainText = null;
                    using (MemoryStream ms = new MemoryStream())
        {
            using (CryptoStream cs = new CryptoStream(ms, Decr, CryptoStreamMode.Write))
            {
                cs.Write(CTBytes, 0, CTBytes.Length);
            }

            plainText = ms.ToArray();
        }                        
        string s = System.Text.Encoding.ASCII.GetString(plainText);
        textBox3.Text = s;
        string s1 = System.Text.Encoding.Unicode.GetString(plainText);
        textBox2.Text = s1;
    }
</code></pre>

<p>The result, however, is incorrect (meaningless). Is there something I've missed? I can provide the cyphertext as well if that's necessary.</p>

<p>Update: the ciphertext</p>

<pre><code>U2FsdGVkX1+V1HkNnBtngUKxuppRFBa0cxtj5jwMcQsgxA+WdPK2JtNCHIyJ4xyj
TABANu/jEXSigEG8NiVczGSkWipGV1rVT3+QmrQAAToAm68BR9ldVHG2IUpwN20s
rKi6bcSNKk7+w9YoSrkO8eX9JEiBvgAUxNrdShY/K7BUFKkwr0y/kJAo9w2wy9vA
7RjUKggwe3DSm/OIrs+yOTUGo0lla0PdF9jwsOraVX6HeAFT8bfAaKFGXqKgzYKZ
KfAoP4qQdg2qWH1FohCsxTMPg6VpjSZo5c21RubgBm3pwdIHibhapFv+9xkgCt6C
y4LL2iaBc+WzCjezYPvXD3GGJjhI1dtDWs9ihoGLh6EBe9Nj9A8Aoi2U2jcNrbkD
PPtYR1vwsYurt20YPqOAUxdytquANgHXQPs74M4MLoHkjmZALQ2TFVFUb4tZXpEe
U7Dv/3uJkz1Exnmona4D4pdrlEgALqPftmUaC7EDWLa9WGPYeYPO0ktD9uEBiATS
HZM7i6erQgVdh1zsNPa4+vhOdSf5EdOW3MrXFMqns/M6foO3tA60JDBhDzwdmzTq
HEgaSPNU6rbhEtUcdzOoPwT5zw5mJr01Y46CRliNz2Hbg/Q+no5sPdolJBO6VL/v
FHf29rkPv0r/yIm4jTCtgzJRTJ0twWl0WvsSWh8E11AQh7rrAq+5aUMr5+CfZq5E
/nGEM5e9rx/oMZ68T6Rwz9oXE+kJazUt5ipj/ccu1P/HlCcRHXa2tt7o+tS+koN4
F60UdRm4ExoeWKRhpD93Xlf22GFKST8abA/cRjFSLwiB+oI0vZLXQ6FFz2F9Iogl
eXxjIx7JUpOsYYxgnUzznffzMT33p5GivXWE91LU7sptRtSDpmrn1UUhjE+KkFGi
hAOAjMzqG7Oos5V1h8SQaBug2yk4H2GX9SkBtLul6YU=
</code></pre>
","","716","<c#><encryption><aes><encryption-symmetric><ecb>","0","","0","2014-05-29 17:08:39","","9","","3462831","","2014-05-29 17:08:39","2014-05-29 16:41:29",""
"9965845","Combining Symmetric and Asymmetric encryption","<p>I am trying to move a file from station A to station C securely, on the way from A to C there is another ** insecure ** station, B.</p>

<p>(A) -> (B) -> (C)</p>

<p>Station B receives the file from station A and pass it to station C.</p>

<p>I want to make sure that Station B will not be able to read the content of the file.</p>

<p>In order to enforce that I am using Symmetric and Asymmetric encryption to encrypt the file.</p>

<ol>
<li>Generating a random symmetric key = SK on station A</li>
<li>Encrypt the file symmetrically using SK as the key.</li>
<li>Encrypting SK asymmetrically with C's public key = AK</li>
</ol>

<p>Now I need to deliver C both AK and the Encrypted File.</p>

<p>Since B doesn't have the Private Key, he will not be able to retrieve SK and will not be able to decrypt the file.</p>

<p>Question:
1. Is there a way to combine AK and the encrypted File into one big file? (is there any standard way of doing this using OpenSSL). 
The only way i can think of is to make my own format: [AK Len][AK][Encrypted File]</p>

<p>Any libraries in python that can help doing that task?</p>
","<p>Yes, there are several existing standards for encrypting files in this way.</p>

<p>I suggest using the <a href=""http://www.gnupg.org/"" rel=""nofollow""><code>gpg</code></a> utility, which implements the OpenPGP standard.</p>
","715","<encryption><openssl><public-key-encryption><encryption-symmetric>","0","-1","1","2012-04-02 04:37:57","","2","","1144031","","2012-04-01 16:04:14","2012-04-01 15:55:54",""
"8680697","SQL Server 2008 symmetric key opening with different passwords?","<p>In my scenario I use a symmetric key to encrypt my asymmetric key, the latter is used to encrypt some sensitive data which should be available only to a selected ring of people.</p>

<p>The symmetric key is encrypted with password and what I need is the possibility to have several passwords for this key so that every password alone is enough to open this key.</p>

<p>I know that there is a possibility to add passwords to an existing symmetric key using </p>

<pre><code>ALTER KEY MySymKey ADD ENCRYPTION BY PASSWORD = 'newpasswd'
</code></pre>

<p>The question is whether adding a new encryption by password already does it and every password here would do open it, or the key is just additionally encrypted by the new password and one has to provide all passwords and/or other encryption data (certificates, other keys etc.) to open this key?</p>

<p>If the latter is true, how can I create several duplicates of the same symmetric key but with different passwords?</p>
","<blockquote>
  <p>I use a symmetric key to encrypt my asymmetric key</p>
</blockquote>

<p>I really hope this is a typo and you're doing it the other way. The correct <a href=""http://msdn.microsoft.com/en-us/library/ms189586.aspx"" rel=""nofollow"">hierarchy encryption</a> is always symmetric key to encrypt the data and certificate/asymmetric key to encrypt the encryption key.</p>

<p>As for your question: adding a new encryption to a key does not drop previous encryptions. Multiple passwords can be added to a key. Though, judging from your example, you are planning to add the password to the symmetric key, which is likely incorrect.</p>

<p>The reason why the hierarchy matters is driven by two factors: </p>

<ul>
<li><p>symmetric key encryption is fast, asymmetric key encryption is extremely slow. Therefore direct data encryption is always done by the fast key, the symmetric one. </p></li>
<li><p>data encryption keys needs to be periodically changed to reduce the collision probability and mitigate some many analytical attacks, as well as to reduce the surface exposed in case of key loss. This is done by simply changing the key and encrypting <em>new</em> data with the new key (re-encrypting old data is not only prohibitive, but would also negate the very benefit of key rotation). The new key is encrypted with the user certificate/asymmetric key/password thus opening it for use.</p></li>
</ul>

<p>Please spend some time and read the relevant MSDN articles (start with the one linked above), this stuff is <em>really easy</em> to mess up and you'll end up with either 'perfect encryption' (ie. you loose the ability to decrypt the data) or worse, a lot of smoke and mirrors that would obfuscate the fact that your key management and hierarchy is plain broken.</p>
","713","<sql-server><passwords><encryption-symmetric>","1","1","1","2011-12-30 17:52:20","","0","1","13302","","2011-12-30 14:55:49","2011-12-30 14:55:02",""
"44246967","How to convert AES_encrypt in counter mode to EVP interfaces?","<p>I'm in the process of coding some stuff around common-encryption which require AES Ctr 128. So I'm digging a bit with crypto stuff.</p>

<p>Currently I test a code (find here) which work (encrypt/decrypt a file):</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;openssl/aes.h&gt;
#include &lt;openssl/rand.h&gt;
#include &lt;openssl/hmac.h&gt;
#include &lt;openssl/buffer.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;


struct ctr_state {
  unsigned char ivec[AES_BLOCK_SIZE];
  unsigned int num;
  unsigned char ecount[AES_BLOCK_SIZE];
};

void print_hex(unsigned char *c) {
  for(int i = 0; i &lt; 16; i++) {
    printf(""%02X."", c[i]);
  }
  printf(""\n"");
}


void init_ctr(struct ctr_state *state, const unsigned char iv[16]) {
  state-&gt;num = 0;
  memset(state-&gt;ecount, 0, 16);
  memset(state-&gt;ivec + 8, 0, 8);
  memcpy(state-&gt;ivec, iv, 8);
}

void fencrypt(char* read, char* write, const unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;
  AES_KEY key;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];

  struct ctr_state state;


  RAND_bytes(iv, AES_BLOCK_SIZE);

  print_hex(iv);
  readFile = fopen(read,""rb"");
  writeFile = fopen(write,""wb"");


  AES_set_encrypt_key(enc_key, 128, &amp;key);

  init_ctr(&amp;state, iv);

  fwrite(state.ivec, 1, AES_BLOCK_SIZE, writeFile);

  print_hex(state.ivec);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);
    AES_ctr128_encrypt(indata, outdata, bytes_read, &amp;key, state.ivec, state.ecount, &amp;state.num);

    print_hex(state.ivec);
    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
      break;
    }
  }

  fclose(writeFile);
  fclose(readFile);
}

void fdecrypt(char* read, char* write, const unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;
  AES_KEY key;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];

  struct ctr_state state;

  readFile=fopen(read,""rb"");
  writeFile=fopen(write,""wb"");

  fread(iv, 1, AES_BLOCK_SIZE, readFile);

  AES_set_encrypt_key(enc_key, 128, &amp;key);

  init_ctr(&amp;state, iv);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);
    AES_ctr128_encrypt(indata, outdata, bytes_read, &amp;key, state.ivec, state.ecount, &amp;state.num);

    print_hex(state.ivec);
    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
            break;
    }
  }
  fclose(writeFile);
  fclose(readFile);
}

int main(int argc, char *argv[]) {
 char* secret = ""supersecret"";

 fencrypt(""encme.txt"", ""enced.enc"", (const unsigned char*)secret);
 fdecrypt(""enced.enc"", ""unenced.txt"", (const unsigned char*)secret);
}
</code></pre>

<p>This work well. But It seems that the standard is to to use EVP functions now with openssl. So I try to adapt my code but something is clearly wrong with my implementations. I don't understand on how properly update/increment the IV vector.</p>

<p>Here my new code with EVP (work but not increment/counter):</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;openssl/aes.h&gt;
#include &lt;openssl/rand.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;


struct ctr_state {
  EVP_CIPHER_CTX* cipher;
  int num;
};

void print_hex(unsigned char *c) {
  for(int i = 0; i &lt; 16; i++) {
    printf(""%02X."", c[i]);
  }
  printf(""\n"");
}

void init_ctr(struct ctr_state *state, unsigned char iv[16], unsigned char* key) {
    state-&gt;num = 0;
    state-&gt;cipher = EVP_CIPHER_CTX_new();
    EVP_EncryptInit_ex(state-&gt;cipher, EVP_aes_128_ctr(), NULL, key, iv);
}

void fencrypt(char* read, char* write, unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];

  struct ctr_state state;

  RAND_bytes(iv, AES_BLOCK_SIZE);

  readFile = fopen(read,""rb"");
  writeFile = fopen(write,""wb"");

  fwrite(iv, 1, AES_BLOCK_SIZE, writeFile);
  init_ctr(&amp;state, iv, enc_key);
  print_hex(iv);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);

    EVP_EncryptUpdate(state.cipher, outdata, &amp;state.num, indata, bytes_read);

    EVP_EncryptUpdate(state.cipher, outdata, &amp;state.num, indata, bytes_read);

    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
      break;
    }
  }

  fclose(writeFile);
  fclose(readFile);
}

void fdecrypt(char* read, char* write, unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];

  struct ctr_state state;

  readFile = fopen(read,""rb"");
  writeFile = fopen(write,""wb"");

  fread(iv, 1, AES_BLOCK_SIZE, readFile);
  init_ctr(&amp;state, iv, enc_key);

  print_hex(iv);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);

    EVP_EncryptUpdate(state.cipher, outdata, &amp;state.num, indata, bytes_read);
    printf(""Pass %d "",state.num);

    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
      break;
    }
  }

  fclose(writeFile);
  fclose(readFile);
}

int main(int argc, char *argv[]) {
 char* secret = ""supersecret"";

 fencrypt(""encme.txt"", ""enced.enc"", (unsigned char*)secret);
 fdecrypt(""enced.enc"", ""unenced.txt"", (unsigned char*)secret);
}
</code></pre>

<p>Any help appreciated. Thank you.</p>
","<p>Here is my solution when I had to use the EVP openssl functions. Should work with every available cipher</p>

<pre><code>/*! @file s70357.c
 * IS_Beleg by Markus Klemm
 * */

#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;stdint.h&gt;
#include &lt;openssl/evp.h&gt;

#include &lt;errno.h&gt;
#include &lt;sys/mman.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;


/*!
 * @param cipher_text Buffer, at least (plain_len + cipher_block_size - 1) bytes big,
 * where the encrypted data will be stored.
 * @param cipher_text_len Actual length of encrypted data in cipher_text in bytes
 */
bool mk_evp_encrypt(const unsigned char *plain_text,
                    const int plain_text_len,
                    unsigned char *cipher_text,
                    int *cipher_text_len,
                    const EVP_CIPHER *cipher,
                    unsigned char *key,
                    unsigned char *iv) {
    EVP_CIPHER_CTX *context = EVP_CIPHER_CTX_new();
    if (!context) {
        return false;
    }
    if (!EVP_EncryptInit_ex(context, cipher, NULL, key, iv)) {
        EVP_CIPHER_CTX_free(context);
        return false;
    }

    *cipher_text_len = 0;
    if (!EVP_EncryptUpdate(context, cipher_text, cipher_text_len, plain_text, plain_text_len)) {
        EVP_CIPHER_CTX_free(context);
        return false;
    }
    int final_block_len = 0;
    if (!EVP_EncryptFinal_ex(context, cipher_text + *cipher_text_len, &amp;final_block_len)) {
        EVP_CIPHER_CTX_free(context);
        return false;
    }
    *cipher_text_len += final_block_len;

    EVP_CIPHER_CTX_free(context);
    return true;
}

/*! @param plain_text Buffer that must at least be cipher_text_len + cipher_block_size big
 * */
bool mk_evp_decrypt(const unsigned char *cipher_text,
                    const int cipher_text_len,
                    unsigned char *plain_text,
                    int *plain_text_len,
                    const EVP_CIPHER *cipher,
                    unsigned char *key,
                    unsigned char *iv) {
    EVP_CIPHER_CTX *context = EVP_CIPHER_CTX_new();
    if (!context) {
        return false;
    }
    if (!EVP_DecryptInit_ex(context, cipher, NULL, key, iv)) {
        EVP_CIPHER_CTX_free(context);
        return false;
    }

    *plain_text_len = 0;
    if (!EVP_DecryptUpdate(context, plain_text, plain_text_len, cipher_text, cipher_text_len)) {
        EVP_CIPHER_CTX_free(context);
        return false;
    }
    int final_block_size = 0;
    if (!EVP_DecryptFinal_ex(context, plain_text + *plain_text_len, &amp;final_block_size)) {
        EVP_CIPHER_CTX_free(context);
        return false;
    }
    *plain_text_len += final_block_size;

    EVP_CIPHER_CTX_free(context);
    return true;
}

struct file_memory_map_meta {
    int file_desc;
    struct stat file_info;
};

/*! @param digest Must be big engough to hold at least EVP_MAX_MD_SIZE
 * */
bool mk_evp_digest(const unsigned char *text,
                   const size_t text_len,
                   unsigned char *digest,
                   unsigned int *digest_len,
                   const EVP_MD *digest_type) {
    EVP_MD_CTX *context = EVP_MD_CTX_create();
    if (!context) {
        return false;
    }
    if (!EVP_DigestInit_ex(context, digest_type, NULL)) {
        return false;
    }
    if (!EVP_DigestUpdate(context, text, text_len)) {
        return false;
    }
    if (!EVP_DigestFinal_ex(context, digest, digest_len)) {
        return false;
    }

    EVP_MD_CTX_destroy(context);

    return true;
}


void open_file_memory_mapped_read(char *file_path,
                                  void **file_memory,
                                  struct file_memory_map_meta *meta) {
    meta-&gt;file_desc = open(file_path, O_RDONLY);
    if (meta-&gt;file_desc == -1) {
        fprintf(stderr, ""Can't open read file %s"", file_path);
        perror("" "");
        exit(EXIT_FAILURE);
    }

    if (stat(file_path, &amp;meta-&gt;file_info) != 0) {
        perror(""Can't get source file infos"");
        exit(EXIT_FAILURE);
    }
    void *source_mem = mmap(NULL, meta-&gt;file_info.st_size, PROT_READ, MAP_FILE | MAP_PRIVATE, meta-&gt;file_desc, 0);
    if (source_mem == MAP_FAILED) {
        perror(""Mapping read file failed"");
        exit(EXIT_FAILURE);
    }
    *file_memory = source_mem;
}

void open_file_memory_mapped_write(char *file_path,
                                   void **file_memory,
                                   struct file_memory_map_meta *meta,
                                   size_t size) {
    meta-&gt;file_desc = open(file_path, O_TRUNC | O_CREAT | O_RDWR, 744);
    if (meta-&gt;file_desc == -1) {
        fprintf(stderr, ""Can't open write file %s"", file_path);
        perror("" "");
        exit(EXIT_FAILURE);
    }

    if (stat(file_path, &amp;meta-&gt;file_info) != 0) {
        perror(""Can't get source file infos"");
        exit(EXIT_FAILURE);
    }
    void *source_mem = mmap(NULL, size, PROT_WRITE, MAP_FILE | MAP_SHARED, meta-&gt;file_desc, 0);
    if (source_mem == MAP_FAILED) {
        perror(""Mapping write file failed"");
        exit(EXIT_FAILURE);
    }
    *file_memory = source_mem;
}

void close_file_memory_mapped(void **file_memory, struct file_memory_map_meta *meta) {
    munmap(*file_memory, meta-&gt;file_info.st_size);
    close(meta-&gt;file_desc);
}

void create_key_iv_from_file(char *key_iv_path, unsigned char **key, unsigned char **iv, const EVP_CIPHER *cipher) {
    FILE *f = fopen(key_iv_path, ""rb"");
    if (!f) {
        fprintf(stderr, ""Could not open file %s"", key_iv_path);
        perror("" "");
        exit(EXIT_FAILURE);
    }

    *key = malloc(EVP_CIPHER_key_length(cipher));
    if (*key == NULL) {
        perror(""Could not alloc for key"");
        exit(EXIT_FAILURE);
    }

    if (EVP_CIPHER_iv_length(cipher) != 0) {
        *iv = malloc(EVP_CIPHER_iv_length(cipher));
        if (*iv == NULL) {
            perror(""Could not alloc for iv"");
            exit(EXIT_FAILURE);
        }
    } else {
        *iv = NULL;
    }
    if (fread(*key, 1, EVP_CIPHER_key_length(cipher), f) != EVP_CIPHER_key_length(cipher)) {
        fprintf(stderr, ""Error while reading key\n"");
        exit(EXIT_FAILURE);
    }
    if (*iv != NULL) {
        if (fread(*iv, 1, EVP_CIPHER_iv_length(cipher), f) != EVP_CIPHER_iv_length(cipher)) {
            fprintf(stderr, ""Error while reading iv\n"");
            exit(EXIT_FAILURE);
        }
    }

    fclose(f);
}

unsigned char *permutate_key(unsigned char *key, unsigned corrupt_byte_pos) {
    key[corrupt_byte_pos] = key[corrupt_byte_pos] + 1; //although in DES, we could reduce to half because of parity bit

    return key;
}

bool is_pdf(unsigned char *data) {
    unsigned char pdf_start[] = {""%PDF""};
    unsigned char pdf_end[] = {""%%EOF""};

    return !memcmp(pdf_start, data, sizeof(pdf_start) - 1); //TODO check pdf_end, but cutaway the padding
}

void decrypt_mode(char *cipher_text_path,
                  char *plain_text_path,
                  char *key_iv,
                  unsigned corrupt_byte_pos,
                  char *cipher) {
    OpenSSL_add_all_algorithms();//Needed for older versions to use EVP_get_cipherbyname
    const EVP_CIPHER *evp_cipher = EVP_get_cipherbyname(cipher);
    EVP_cleanup(); //cleanup for OpenSSL_add_all_algorithms
    if (evp_cipher == NULL) {
        fprintf(stderr, ""Cipher %s not found\n"", cipher);
        exit(EXIT_FAILURE);
    }


    void *cipher_text_mem;
    struct file_memory_map_meta cipher_text_meta;
    open_file_memory_mapped_read(cipher_text_path,
                                 &amp;cipher_text_mem, &amp;cipher_text_meta);

    void *plain_text_mem;
    struct file_memory_map_meta plain_text_meta;
    open_file_memory_mapped_write(plain_text_path,
                                  &amp;plain_text_mem, &amp;plain_text_meta, cipher_text_meta.file_info.st_size);

    if (chmod(plain_text_path, cipher_text_meta.file_info.st_mode) != 0) {
        perror(""Can't copy file permissions"");
    }
    if (lseek(plain_text_meta.file_desc, cipher_text_meta.file_info.st_size - 1 + EVP_CIPHER_block_size(evp_cipher),
              SEEK_SET) == -1) {
        perror(""Can't seek to new end of destination file"");
    }
    unsigned char dummy = 0;
    if (write(plain_text_meta.file_desc, &amp;dummy, 1) == -1) {
        perror(""Couldn't write dummy byte"");
    }

    unsigned char *key;
    unsigned char *iv;
    create_key_iv_from_file(key_iv, &amp;key, &amp;iv, evp_cipher);


    //now lets try the keys
    const unsigned key_len = EVP_CIPHER_key_length(evp_cipher);
    int plain_len = 0;

    bool decrypt_return = mk_evp_decrypt(cipher_text_mem,
                                         cipher_text_meta.file_info.st_size, plain_text_mem, &amp;plain_len, evp_cipher,
                                         key, iv);
    while (!decrypt_return || !is_pdf(plain_text_mem)) {
        fprintf(stderr, ""Key 0x"");
        for (unsigned i = 0; i &lt; key_len; ++i) {
            fprintf(stderr, ""%02X"", key[i]);
        }

        fprintf(stderr, "" didn't catch it trying the next one\n"");
        plain_len = 0;
        decrypt_return = mk_evp_decrypt(cipher_text_mem,
                                        cipher_text_meta.file_info.st_size, plain_text_mem, &amp;plain_len, evp_cipher,
                                        permutate_key(key, corrupt_byte_pos), iv);
    }
    if (ftruncate(plain_text_meta.file_desc, plain_len) != 0) {
        perror(""Trimming of final plain text failed"");
        exit(EXIT_FAILURE);
    }

    free(key);
    free(iv);
    close_file_memory_mapped(&amp;plain_text_mem, &amp;plain_text_meta);
    close_file_memory_mapped(&amp;cipher_text_mem, &amp;cipher_text_meta);
}

void hash_mode(char *text_path,
               char *opt_hash_path,
               char *digest_name) {
    OpenSSL_add_all_digests();//Needed for older versions to use EVP_get_cipherbyname
    const EVP_MD *digest = EVP_get_digestbyname(digest_name);
    EVP_cleanup(); //cleanup for OpenSSL_add_all_algorithms
    if (digest == NULL) {
        fprintf(stderr, ""Digest %s not found\n"", digest_name);
        exit(EXIT_FAILURE);
    }
    void *text_mem;
    struct file_memory_map_meta text_meta;
    open_file_memory_mapped_read(text_path,
                                 &amp;text_mem, &amp;text_meta);


    unsigned char hash[EVP_MAX_MD_SIZE];
    unsigned hash_len = 0;
    mk_evp_digest(text_mem, text_meta.file_info.st_size, hash, &amp;hash_len, digest);

    if (strlen(opt_hash_path) == 0) {
        for (unsigned i = 0; i &lt; hash_len; ++i) {
            printf(""%02X"", hash[i]);
        }
        printf(""\n"");
    } else {
        FILE *out_file = fopen(opt_hash_path, ""wb"");
        if (!out_file) {
            perror(""Could not open output file"");
            exit(EXIT_FAILURE);
        }
        if (fwrite(hash, hash_len, 1, out_file) != 1) {
            fprintf(stderr, ""Could not write the hash correctly\n"");
            exit(EXIT_FAILURE);
        }
        fclose(out_file);
    }

    close_file_memory_mapped(&amp;text_mem, &amp;text_meta);
}

void encrypt_mode(char *plain_text_path,
                  char *cipher_text_path,
                  char *key_iv,
                  char *cipher) {
    OpenSSL_add_all_algorithms();//Needed for older versions to use EVP_get_cipherbyname
    const EVP_CIPHER *evp_cipher = EVP_get_cipherbyname(cipher);
    EVP_cleanup(); //cleanup for OpenSSL_add_all_algorithms
    if (evp_cipher == NULL) {
        fprintf(stderr, ""Cipher %s not found\n"", cipher);
        exit(EXIT_FAILURE);
    }

    void *plain_text_mem;
    struct file_memory_map_meta plain_text_meta;
    open_file_memory_mapped_read(plain_text_path,
                                 &amp;plain_text_mem, &amp;plain_text_meta);

    void *cipher_text_mem;
    struct file_memory_map_meta cipher_text_meta;
    open_file_memory_mapped_write(cipher_text_path,
                                  &amp;cipher_text_mem, &amp;cipher_text_meta, plain_text_meta.file_info.st_size);

    if (chmod(cipher_text_path, plain_text_meta.file_info.st_mode) != 0) {
        perror(""Can't copy file permissions"");
    }
    if (lseek(cipher_text_meta.file_desc, plain_text_meta.file_info.st_size + EVP_CIPHER_block_size(evp_cipher),
              SEEK_SET) == -1) {
        perror(""Can't seek to new end of destination file"");
    }
    unsigned char dummy = 0;
    if (write(cipher_text_meta.file_desc, &amp;dummy, 1) == -1) {
        perror(""Couldn't write dummy byte"");
    }

    unsigned char *key;
    unsigned char *iv;
    create_key_iv_from_file(key_iv, &amp;key, &amp;iv, evp_cipher);

    int cipher_text_len = 0;
    if (!mk_evp_encrypt(plain_text_mem, plain_text_meta.file_info.st_size, cipher_text_mem, &amp;cipher_text_len,
                        evp_cipher, key, iv)) {
        fprintf(stderr, ""Encryption went wrong\n"");
        exit(EXIT_FAILURE);
    }

    if (ftruncate(cipher_text_meta.file_desc, cipher_text_len) != 0) {
        perror(""Trimming of final plain text failed"");
        exit(EXIT_FAILURE);
    }
    free(key);
    free(iv);
    close_file_memory_mapped(&amp;plain_text_mem, &amp;plain_text_meta);
    close_file_memory_mapped(&amp;cipher_text_mem, &amp;cipher_text_meta);
}

int main(int argc, char *argv[]) {
    enum mode {
        none, decrypt, encrypt, hash
    } mode = none;
    char in_path[512];
    memset(in_path, '\0', sizeof(in_path));
    char out_path[512];
    memset(out_path, '\0', sizeof(out_path));
    char key_path[512];
    memset(key_path, '\0', sizeof(key_path));
    char cipher[512];
    memset(cipher, '\0', sizeof(cipher));
    unsigned corrupt_byte_pos = -1;

    int flag;
    while ((flag = getopt(argc, argv, ""deh i:o:c:k:b:"")) != -1) {
        switch (flag) {
            case 'e':
                mode = encrypt;
                break;
            case 'd':
                mode = decrypt;
                break;
            case 'h':
                mode = hash;
                break;
            case 'i':
                strncpy(in_path, optarg, sizeof(in_path) - 1);
                break;
            case 'o':
                strncpy(out_path, optarg, sizeof(out_path) - 1);
                break;
            case 'k':
                strncpy(key_path, optarg, sizeof(key_path) - 1);
                break;
            case 'c':
                strncpy(cipher, optarg, sizeof(cipher) - 1);
                break;
            case 'b':
                errno = 0;
                corrupt_byte_pos = strtol(optarg, NULL, 10);
                if (errno != 0) {
                    perror(""Could not read byte position, assuming key is ok"");
                    corrupt_byte_pos = -1;
                }
                break;
            default:
                return EXIT_FAILURE;
                break;
        }
    }

    switch (mode) {
        case decrypt:
            decrypt_mode(in_path, out_path, key_path, corrupt_byte_pos, cipher);
            break;
        case encrypt:
            encrypt_mode(in_path, out_path, key_path, cipher);
            break;
        case hash:
            hash_mode(in_path, out_path, cipher);
            break;
        case none:
        default:
            fprintf(stderr, ""No mode was specified\n"");
            printf(""Usage %s -&lt;MODE&gt; -&lt;PARAMETERS&gt;\n"", argv[0]);
            printf(""\t&lt;MODE&gt;:\n"");
            printf(""\t\t e Encrypt aka Aufgabe 3\n"");
            printf(""\t\t d Decrypt aka Aufgabe 1\n"");
            printf(""\t\t h Hash aka Aufgabe 2\n"");
            printf(""\t&lt;PARAMETERS&gt;: \n"");
            printf(""\t\t i Input file path\n"");
            printf(""\t\t o Output file path, optional for hash mode\n"");
            printf(""\t\t k Key/IV file path, optional for hash mode\n"");
            printf(""\t\t c EVP Cipher/Digest to be used\n"");
            printf(""\t\t b Corrupt byte position, counted from 0, optional for hash mode\n"");
            exit(EXIT_FAILURE);
            break;
    }

    return EXIT_SUCCESS;
}
</code></pre>
","706","<c><encryption><openssl><aes><encryption-symmetric>","1","0","3","2019-07-22 13:29:24","44258027","2","","608639","","2017-05-30 05:14:54","2017-05-29 16:30:37",""
"44246967","How to convert AES_encrypt in counter mode to EVP interfaces?","<p>I'm in the process of coding some stuff around common-encryption which require AES Ctr 128. So I'm digging a bit with crypto stuff.</p>

<p>Currently I test a code (find here) which work (encrypt/decrypt a file):</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;openssl/aes.h&gt;
#include &lt;openssl/rand.h&gt;
#include &lt;openssl/hmac.h&gt;
#include &lt;openssl/buffer.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;


struct ctr_state {
  unsigned char ivec[AES_BLOCK_SIZE];
  unsigned int num;
  unsigned char ecount[AES_BLOCK_SIZE];
};

void print_hex(unsigned char *c) {
  for(int i = 0; i &lt; 16; i++) {
    printf(""%02X."", c[i]);
  }
  printf(""\n"");
}


void init_ctr(struct ctr_state *state, const unsigned char iv[16]) {
  state-&gt;num = 0;
  memset(state-&gt;ecount, 0, 16);
  memset(state-&gt;ivec + 8, 0, 8);
  memcpy(state-&gt;ivec, iv, 8);
}

void fencrypt(char* read, char* write, const unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;
  AES_KEY key;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];

  struct ctr_state state;


  RAND_bytes(iv, AES_BLOCK_SIZE);

  print_hex(iv);
  readFile = fopen(read,""rb"");
  writeFile = fopen(write,""wb"");


  AES_set_encrypt_key(enc_key, 128, &amp;key);

  init_ctr(&amp;state, iv);

  fwrite(state.ivec, 1, AES_BLOCK_SIZE, writeFile);

  print_hex(state.ivec);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);
    AES_ctr128_encrypt(indata, outdata, bytes_read, &amp;key, state.ivec, state.ecount, &amp;state.num);

    print_hex(state.ivec);
    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
      break;
    }
  }

  fclose(writeFile);
  fclose(readFile);
}

void fdecrypt(char* read, char* write, const unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;
  AES_KEY key;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];

  struct ctr_state state;

  readFile=fopen(read,""rb"");
  writeFile=fopen(write,""wb"");

  fread(iv, 1, AES_BLOCK_SIZE, readFile);

  AES_set_encrypt_key(enc_key, 128, &amp;key);

  init_ctr(&amp;state, iv);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);
    AES_ctr128_encrypt(indata, outdata, bytes_read, &amp;key, state.ivec, state.ecount, &amp;state.num);

    print_hex(state.ivec);
    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
            break;
    }
  }
  fclose(writeFile);
  fclose(readFile);
}

int main(int argc, char *argv[]) {
 char* secret = ""supersecret"";

 fencrypt(""encme.txt"", ""enced.enc"", (const unsigned char*)secret);
 fdecrypt(""enced.enc"", ""unenced.txt"", (const unsigned char*)secret);
}
</code></pre>

<p>This work well. But It seems that the standard is to to use EVP functions now with openssl. So I try to adapt my code but something is clearly wrong with my implementations. I don't understand on how properly update/increment the IV vector.</p>

<p>Here my new code with EVP (work but not increment/counter):</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;openssl/aes.h&gt;
#include &lt;openssl/rand.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;


struct ctr_state {
  EVP_CIPHER_CTX* cipher;
  int num;
};

void print_hex(unsigned char *c) {
  for(int i = 0; i &lt; 16; i++) {
    printf(""%02X."", c[i]);
  }
  printf(""\n"");
}

void init_ctr(struct ctr_state *state, unsigned char iv[16], unsigned char* key) {
    state-&gt;num = 0;
    state-&gt;cipher = EVP_CIPHER_CTX_new();
    EVP_EncryptInit_ex(state-&gt;cipher, EVP_aes_128_ctr(), NULL, key, iv);
}

void fencrypt(char* read, char* write, unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];

  struct ctr_state state;

  RAND_bytes(iv, AES_BLOCK_SIZE);

  readFile = fopen(read,""rb"");
  writeFile = fopen(write,""wb"");

  fwrite(iv, 1, AES_BLOCK_SIZE, writeFile);
  init_ctr(&amp;state, iv, enc_key);
  print_hex(iv);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);

    EVP_EncryptUpdate(state.cipher, outdata, &amp;state.num, indata, bytes_read);

    EVP_EncryptUpdate(state.cipher, outdata, &amp;state.num, indata, bytes_read);

    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
      break;
    }
  }

  fclose(writeFile);
  fclose(readFile);
}

void fdecrypt(char* read, char* write, unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];

  struct ctr_state state;

  readFile = fopen(read,""rb"");
  writeFile = fopen(write,""wb"");

  fread(iv, 1, AES_BLOCK_SIZE, readFile);
  init_ctr(&amp;state, iv, enc_key);

  print_hex(iv);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);

    EVP_EncryptUpdate(state.cipher, outdata, &amp;state.num, indata, bytes_read);
    printf(""Pass %d "",state.num);

    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
      break;
    }
  }

  fclose(writeFile);
  fclose(readFile);
}

int main(int argc, char *argv[]) {
 char* secret = ""supersecret"";

 fencrypt(""encme.txt"", ""enced.enc"", (unsigned char*)secret);
 fdecrypt(""enced.enc"", ""unenced.txt"", (unsigned char*)secret);
}
</code></pre>

<p>Any help appreciated. Thank you.</p>
","<p>OK I think I got it.</p>

<p>I will copy here my two program example:</p>

<p>AES_CTR_128 (without EVP) :</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;openssl/aes.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

struct ctr_state {
  unsigned int num;
  unsigned char ivec[AES_BLOCK_SIZE];
  unsigned char ecount[AES_BLOCK_SIZE];
};

void init_ctr(struct ctr_state *state, const unsigned char iv[16]) {
  state-&gt;num = 0;
  memset(state-&gt;ecount, 0, 16);
  memset(state-&gt;ivec + 8, 0, 8);
  memcpy(state-&gt;ivec, iv, 8);
}

void fencrypt(char* read, char* write, const unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;
  AES_KEY key;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  struct ctr_state state;
  unsigned char *iv = (unsigned char *)""0123456789012345"";

  readFile = fopen(read,""rb"");
  writeFile = fopen(write,""wb"");

  fwrite(iv, 1, AES_BLOCK_SIZE, writeFile);

  AES_set_encrypt_key(enc_key, 128, &amp;key);
  init_ctr(&amp;state, iv);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);

    AES_ctr128_encrypt(indata, outdata, bytes_read, &amp;key, state.ivec, state.ecount, &amp;state.num);

    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
      break;
    }
  }

  fclose(writeFile);
  fclose(readFile);
}

void fdecrypt(char* read, char* write, const unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;
  AES_KEY key;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];
  struct ctr_state state;

  readFile=fopen(read,""rb"");
  writeFile=fopen(write,""wb"");

  fread(iv, 1, AES_BLOCK_SIZE, readFile);

  AES_set_encrypt_key(enc_key, 128, &amp;key);
  init_ctr(&amp;state, iv);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);
    AES_ctr128_encrypt(indata, outdata, bytes_read, &amp;key, state.ivec, state.ecount, &amp;state.num);

    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
      break;
    }
  }

  fclose(writeFile);
  fclose(readFile);
}

int main(int argc, char *argv[]) {
 unsigned char *secret = (unsigned char *)""0123456789012345"";

 fencrypt(""encme.txt"", ""enced.enc"", secret);
 fdecrypt(""enced.enc"", ""unenced.txt"", secret);
}
</code></pre>

<p>Everything classic as in another example. 
The IV(or nonce) is constant to make the debugging easier (don't do that).</p>

<p>And below my code with EVP:</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;openssl/aes.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;


struct ctr_state {
  EVP_CIPHER_CTX* cipher;
  unsigned int num;
  unsigned char ivec[AES_BLOCK_SIZE];
  unsigned char ecount[AES_BLOCK_SIZE];
};

static void AES_ctr128_inc(unsigned char *counter) {
  unsigned char* cur_pos;

  for (cur_pos = counter + 15; cur_pos &gt;= counter; cur_pos--) {
    (*cur_pos)++;
    if (*cur_pos != 0) {
      break;
    }
  }
}

void AES_ctr128_EVPencrypt(EVP_CIPHER_CTX* cipher, const unsigned char *in, unsigned char *out,
  const unsigned long length,
  unsigned char counter[AES_BLOCK_SIZE],
  unsigned char ecount_buf[AES_BLOCK_SIZE],
  unsigned int *num) {

  int nb;
  unsigned int n;
  unsigned long l=length;

  n = *num;

  while (l--) {
    if (n == 0) {
      EVP_EncryptUpdate(cipher, ecount_buf, &amp;nb, counter, AES_BLOCK_SIZE);
      AES_ctr128_inc(counter);
    }
    *(out++) = *(in++) ^ ecount_buf[n];
    n = (n+1) % AES_BLOCK_SIZE;
  }

  *num=n;
}

void init_ctr(struct ctr_state *state, unsigned char iv[16], unsigned char* key) {
  state-&gt;num = 0;
  memset(state-&gt;ecount, 0, 16);
  memset(state-&gt;ivec + 8, 0, 8);
  memcpy(state-&gt;ivec, iv, 8);
  state-&gt;cipher = EVP_CIPHER_CTX_new();
  EVP_EncryptInit_ex(state-&gt;cipher, EVP_aes_128_ecb(), NULL, key, NULL);
}

void fencrypt(char* read, char* write, unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  struct ctr_state state;
  unsigned char *iv = (unsigned char *)""0123456789012345"";

  readFile = fopen(read,""rb"");
  writeFile = fopen(write,""wb"");

  fwrite(iv, 1, AES_BLOCK_SIZE, writeFile);

  init_ctr(&amp;state, iv, enc_key);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);

    AES_ctr128_EVPencrypt(state.cipher, indata, outdata, bytes_read, state.ivec, state.ecount, &amp;state.num);

    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
      break;
    }
  }

  fclose(writeFile);
  fclose(readFile);
}

void fdecrypt(char* read, char* write, unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];
  struct ctr_state state;

  readFile = fopen(read,""rb"");
  writeFile = fopen(write,""wb"");

  fread(iv, 1, AES_BLOCK_SIZE, readFile);

  init_ctr(&amp;state, iv, enc_key);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);

    AES_ctr128_EVPencrypt(state.cipher, indata, outdata, bytes_read, state.ivec, state.ecount, &amp;state.num);

    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
      break;
    }
  }

  fclose(writeFile);
  fclose(readFile);
}

int main(int argc, char *argv[]) {
 unsigned char *secret = (unsigned char *)""0123456789012345"";

 fencrypt(""encme.txt"", ""enced.enc"", (unsigned char*)secret);
 fdecrypt(""enced.enc"", ""unenced.txt"", secret);
}
</code></pre>

<p>So I basically copy the AES_ctr_encrypt function to use EVP, and adapt it. </p>

<p>It work for me, as I can use both implementation to encrypt/decrypt the same program. </p>

<p>Comments are welcome.
Questions remain that what do the aes_ctr_128 in EVP ? and how to use it?
I think I have reinvented the wheel.</p>
","706","<c><encryption><openssl><aes><encryption-symmetric>","1","0","3","2019-07-22 13:29:24","44258027","2","","608639","","2017-05-30 05:14:54","2017-05-29 16:30:37",""
"44246967","How to convert AES_encrypt in counter mode to EVP interfaces?","<p>I'm in the process of coding some stuff around common-encryption which require AES Ctr 128. So I'm digging a bit with crypto stuff.</p>

<p>Currently I test a code (find here) which work (encrypt/decrypt a file):</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;openssl/aes.h&gt;
#include &lt;openssl/rand.h&gt;
#include &lt;openssl/hmac.h&gt;
#include &lt;openssl/buffer.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;


struct ctr_state {
  unsigned char ivec[AES_BLOCK_SIZE];
  unsigned int num;
  unsigned char ecount[AES_BLOCK_SIZE];
};

void print_hex(unsigned char *c) {
  for(int i = 0; i &lt; 16; i++) {
    printf(""%02X."", c[i]);
  }
  printf(""\n"");
}


void init_ctr(struct ctr_state *state, const unsigned char iv[16]) {
  state-&gt;num = 0;
  memset(state-&gt;ecount, 0, 16);
  memset(state-&gt;ivec + 8, 0, 8);
  memcpy(state-&gt;ivec, iv, 8);
}

void fencrypt(char* read, char* write, const unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;
  AES_KEY key;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];

  struct ctr_state state;


  RAND_bytes(iv, AES_BLOCK_SIZE);

  print_hex(iv);
  readFile = fopen(read,""rb"");
  writeFile = fopen(write,""wb"");


  AES_set_encrypt_key(enc_key, 128, &amp;key);

  init_ctr(&amp;state, iv);

  fwrite(state.ivec, 1, AES_BLOCK_SIZE, writeFile);

  print_hex(state.ivec);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);
    AES_ctr128_encrypt(indata, outdata, bytes_read, &amp;key, state.ivec, state.ecount, &amp;state.num);

    print_hex(state.ivec);
    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
      break;
    }
  }

  fclose(writeFile);
  fclose(readFile);
}

void fdecrypt(char* read, char* write, const unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;
  AES_KEY key;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];

  struct ctr_state state;

  readFile=fopen(read,""rb"");
  writeFile=fopen(write,""wb"");

  fread(iv, 1, AES_BLOCK_SIZE, readFile);

  AES_set_encrypt_key(enc_key, 128, &amp;key);

  init_ctr(&amp;state, iv);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);
    AES_ctr128_encrypt(indata, outdata, bytes_read, &amp;key, state.ivec, state.ecount, &amp;state.num);

    print_hex(state.ivec);
    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
            break;
    }
  }
  fclose(writeFile);
  fclose(readFile);
}

int main(int argc, char *argv[]) {
 char* secret = ""supersecret"";

 fencrypt(""encme.txt"", ""enced.enc"", (const unsigned char*)secret);
 fdecrypt(""enced.enc"", ""unenced.txt"", (const unsigned char*)secret);
}
</code></pre>

<p>This work well. But It seems that the standard is to to use EVP functions now with openssl. So I try to adapt my code but something is clearly wrong with my implementations. I don't understand on how properly update/increment the IV vector.</p>

<p>Here my new code with EVP (work but not increment/counter):</p>

<pre class=""lang-c prettyprint-override""><code>#include &lt;openssl/aes.h&gt;
#include &lt;openssl/rand.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;


struct ctr_state {
  EVP_CIPHER_CTX* cipher;
  int num;
};

void print_hex(unsigned char *c) {
  for(int i = 0; i &lt; 16; i++) {
    printf(""%02X."", c[i]);
  }
  printf(""\n"");
}

void init_ctr(struct ctr_state *state, unsigned char iv[16], unsigned char* key) {
    state-&gt;num = 0;
    state-&gt;cipher = EVP_CIPHER_CTX_new();
    EVP_EncryptInit_ex(state-&gt;cipher, EVP_aes_128_ctr(), NULL, key, iv);
}

void fencrypt(char* read, char* write, unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];

  struct ctr_state state;

  RAND_bytes(iv, AES_BLOCK_SIZE);

  readFile = fopen(read,""rb"");
  writeFile = fopen(write,""wb"");

  fwrite(iv, 1, AES_BLOCK_SIZE, writeFile);
  init_ctr(&amp;state, iv, enc_key);
  print_hex(iv);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);

    EVP_EncryptUpdate(state.cipher, outdata, &amp;state.num, indata, bytes_read);

    EVP_EncryptUpdate(state.cipher, outdata, &amp;state.num, indata, bytes_read);

    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
      break;
    }
  }

  fclose(writeFile);
  fclose(readFile);
}

void fdecrypt(char* read, char* write, unsigned char* enc_key) {

  FILE *readFile;
  FILE *writeFile;

  int bytes_read;
  unsigned char indata[AES_BLOCK_SIZE];
  unsigned char outdata[AES_BLOCK_SIZE];
  unsigned char iv[AES_BLOCK_SIZE];

  struct ctr_state state;

  readFile = fopen(read,""rb"");
  writeFile = fopen(write,""wb"");

  fread(iv, 1, AES_BLOCK_SIZE, readFile);
  init_ctr(&amp;state, iv, enc_key);

  print_hex(iv);

  while(1) {
    bytes_read = fread(indata, 1, AES_BLOCK_SIZE, readFile);

    EVP_EncryptUpdate(state.cipher, outdata, &amp;state.num, indata, bytes_read);
    printf(""Pass %d "",state.num);

    fwrite(outdata, 1, bytes_read, writeFile);
    if (bytes_read &lt; AES_BLOCK_SIZE) {
      break;
    }
  }

  fclose(writeFile);
  fclose(readFile);
}

int main(int argc, char *argv[]) {
 char* secret = ""supersecret"";

 fencrypt(""encme.txt"", ""enced.enc"", (unsigned char*)secret);
 fdecrypt(""enced.enc"", ""unenced.txt"", (unsigned char*)secret);
}
</code></pre>

<p>Any help appreciated. Thank you.</p>
","<p>In {EVP_aes_N_ctr()} the counter state is kept in {ctx->iv}, treated as an 128 big-endian integer, counting the crypto blocks, starting from the IV given to the Init function.  This counter tells the number of the next crypto block to be encrypted/decrypted.  This works with random access, i.e. ctx->iv can be computed manually before an *Update call, if on crypto block boundary.  As soon as at least one byte is returned from a cipher op, the counter is updated to hold the next crypto block to be processed.  If byte-level random access is wanted, there is also {ctx->num} that holds the byte offset into the current crypto block.  For this to work, the block must have been started on, i.e. a cipher op where {ctx->num} was equal to zero must have been issued, in order to correctly setup the internal state.</p>

<p>Below is a stupid, but still working example of how CTR mode can be used for random access decryption.</p>

<pre><code>#include &lt;openssl/evp.h&gt;
#include &lt;stddef.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

static void add_be_128(uint8_t *ctr, ptrdiff_t delta) {
        for (int n = 15; delta != 0 &amp;&amp; n &gt;= 0; n--) {
                // The risk of overflow can safely be neglected.                
                ptrdiff_t nval = ctr[n] + delta;
                ctr[n] = nval &amp; 0xff;
                delta = nval &gt;&gt; 8;
        }
}

int main() {
     uint8_t in[] =
          ""0123456789abcdeffedcba9876543210fedcba98765432100123456789abcdef"";
     uint8_t out[64];
     int sz;
     uint8_t cmp[33];
     uint8_t key[] = {
          0xde, 0xad, 0xbe, 0xef, 0xc0, 0x01, 0xd0, 0x0d,
          0xde, 0xad, 0xbe, 0xef, 0xc0, 0x01, 0xd0, 0x0d
     };
     uint8_t iv[] = {
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
     };

     EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
     EVP_EncryptInit_ex(ctx, EVP_aes_128_ctr(), NULL, key, iv);
     EVP_CIPHER_CTX_set_padding(ctx, 0);
     EVP_EncryptUpdate(ctx, out, &amp;sz, in, sizeof in);
     EVP_EncryptFinal_ex(ctx, out + sz, &amp;sz);
     EVP_DecryptInit_ex(ctx, EVP_aes_128_ctr(), NULL, key, iv);
     EVP_CIPHER_CTX_set_padding(ctx, 0);
     add_be_128(ctx-&gt;iv, 1);
     EVP_DecryptUpdate(ctx, cmp, &amp;sz, out + 16, 32);
     EVP_DecryptFinal_ex(ctx, cmp + sz, &amp;sz);
     cmp[32] = 0;
     printf(""%s %d\n"", cmp, strncmp(in + 16, cmp, 32));
     EVP_DecryptInit_ex(ctx, EVP_aes_128_ctr(), NULL, key, iv);
     EVP_CIPHER_CTX_set_padding(ctx, 0);
     int new = ctx-&gt;num + 8;
     add_be_128(ctx-&gt;iv, (new - 1) / 16);
     ctx-&gt;num = 0;
     EVP_DecryptUpdate(ctx, cmp, &amp;sz, out, 1);
     ctx-&gt;num = new;
     EVP_DecryptUpdate(ctx, cmp, &amp;sz, out + 8, 32);
     EVP_DecryptFinal_ex(ctx, cmp + sz, &amp;sz);
     cmp[32] = 0;
     printf(""%s %d\n"", cmp, strncmp(in + 8, cmp, 32));
}
</code></pre>
","706","<c><encryption><openssl><aes><encryption-symmetric>","1","0","3","2019-07-22 13:29:24","44258027","2","","608639","","2017-05-30 05:14:54","2017-05-29 16:30:37",""
"39295373","Encryption Decryption AES/ECB/NoPadding","<p>is there any method de encrypt/decrypt a string in iOS following this algorithm ?
all i know that in java this class : javax.crypto.Cipher is used for this purpose</p>
","<p>Apple Common Crypto does support AES, ECB mode (use CBC mode) and no padding. If you do not use padding the input data length must be an exact multiple of the AES block size (16-bytes), the standard padding is <a href=""https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7"" rel=""nofollow"">PKCS#7</a> (née PKCS#5).</p>

<p>You would be better off using a solution that supports secure encryption such as <a href=""https://github.com/RNCryptor"" rel=""nofollow"">RNCryptor</a> which supports multiple languages and platforms.</p>

<p>Just using encryption does not provide security, it must be used correctly in conjunction with other cryptographic primitives.</p>
","704","<ios><aes><encryption-symmetric><ecb>","0","0","2","2018-02-01 09:39:21","","2","","","","","2016-09-02 14:54:50",""
"39295373","Encryption Decryption AES/ECB/NoPadding","<p>is there any method de encrypt/decrypt a string in iOS following this algorithm ?
all i know that in java this class : javax.crypto.Cipher is used for this purpose</p>
","<p>Apple's Common Crpto does support it. Import CommonCryptor.h and CCCryptorStatus ""CCCrypt"" is what you need.</p>

<p>Here's an example:</p>

<pre><code>+ (NSData *)encryptDataWithAESECB:(NSData *)data
                              key:(NSData *) key
                            error:(NSError **)error {
    size_t outLength;

    int cipherLen = (int)(data.length/kAlgorithmBlockSize + 1)*kAlgorithmBlockSize;
    NSMutableData *cipherData = [NSMutableData dataWithLength:cipherLen];
    NSData *newData = [self addPaddingBeforeEncryptWithAESECB:data];

    CCCryptorStatus result = CCCrypt(kCCEncrypt, // operation
                                     kAlgorithm, // Algorithm
                                     kCCOptionECBMode, // Mode
                                     key.bytes, // key
                                     key.length, // keylength
                                     0,// iv
                                     newData.bytes, // dataIn
                                     newData.length, // dataInLength,
                                     cipherData.mutableBytes, // dataOut
                                     cipherData.length, // dataOutAvailable
                                     &amp;outLength); // dataOutMoved
    if (result == kCCSuccess) {
        cipherData.length = outLength;
    }else {
        if (error) {
            *error = [NSError errorWithDomain:kRNCryptManagerErrorDomain code:result userInfo:nil];
        }
        return nil;
    }
    return cipherData;
}
</code></pre>

<p>Please refer to my post here for more information:
<a href=""https://stackoverflow.com/questions/35921254/aes-ecb-ios-encrypt/48559334#48559334"">AES ECB iOS Encrypt</a></p>
","704","<ios><aes><encryption-symmetric><ecb>","0","0","2","2018-02-01 09:39:21","","2","","","","","2016-09-02 14:54:50",""
"14548272","Encrypt a string in PHP, Decrypt it in C#?","<p>In the action.php page, I have a string that I want to store in mysql but I want to encrypt it before inserting it to the db</p>

<pre><code> $data = ""Hello World"";
 $data = Encrypt_This_String($data,""ABCD""); // abcd is a key
 // now I insert this string into MySQL database
</code></pre>

<p>In the other side, I need to get back this string from my C#.NET application, so I need to do something like this :</p>

<pre><code> string myStr = getMyString(); // where getMyString() is a function that get the encrypted string from db

 myStr = Decrypt_String(myStr,""ABCD"");
</code></pre>

<p>I need that myStr hold the value ""Hello World""</p>

<p>Could someone please give me an encryption algorithm that is based on a key and can be used in both PHP and C# ?</p>
","<p>You can use Rijndael (AES 128) :</p>

<p><a href=""https://gist.github.com/1077723"" rel=""nofollow"">PHP- AES128 Example</a></p>

<p><a href=""http://softwaredevelopment.gr/440/rijndael-aes-128-decryption-in-c/"" rel=""nofollow"">C# AES128 Example</a></p>
","699","<c#><php><.net><winforms><encryption-symmetric>","1","-1","2","2014-03-06 13:34:36","","2","2","3339122","","2014-03-06 13:34:36","2013-01-27 14:19:46",""
"14548272","Encrypt a string in PHP, Decrypt it in C#?","<p>In the action.php page, I have a string that I want to store in mysql but I want to encrypt it before inserting it to the db</p>

<pre><code> $data = ""Hello World"";
 $data = Encrypt_This_String($data,""ABCD""); // abcd is a key
 // now I insert this string into MySQL database
</code></pre>

<p>In the other side, I need to get back this string from my C#.NET application, so I need to do something like this :</p>

<pre><code> string myStr = getMyString(); // where getMyString() is a function that get the encrypted string from db

 myStr = Decrypt_String(myStr,""ABCD"");
</code></pre>

<p>I need that myStr hold the value ""Hello World""</p>

<p>Could someone please give me an encryption algorithm that is based on a key and can be used in both PHP and C# ?</p>
","<p>Use <a href=""http://php.net/manual/en/function.mcrypt-encrypt.php"" rel=""nofollow""><code>mcrypt_encrypt</code></a> to encrypt the data from PHP, with e.g. AES in CBC mode as the cipher; there is example code on the documentation page.</p>

<p>Then decrypt from C# using <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.aesmanaged.aspx"" rel=""nofollow""><code>AesManaged</code></a> or <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.aescryptoserviceprovider.aspx"" rel=""nofollow""><code>AesCryptoServiceProvider</code></a>, both pages on MSDN have example code.</p>
","699","<c#><php><.net><winforms><encryption-symmetric>","1","0","2","2014-03-06 13:34:36","","2","2","3339122","","2014-03-06 13:34:36","2013-01-27 14:19:46",""
"4271855","Is there a PHP port of the Stanford Javascript Crypto Library?","<p>Is there a php implementation of the <a href=""http://crypto.stanford.edu/sjcl/"" rel=""nofollow"">Stanford Javascript Crypto Library</a>?</p>
","<p>I don't think there's a port of this specific library, but you can use <a href=""http://us3.php.net/manual/en/book.mcrypt.php"" rel=""nofollow"">mcrypt</a> and <a href=""http://us3.php.net/manual/en/book.hash.php"" rel=""nofollow"">hash</a> and <a href=""http://us3.php.net/manual/en/book.openssl.php"" rel=""nofollow"">openssl</a> extensions to achieve same results.</p>
","688","<javascript><php><encryption><encryption-symmetric>","0","3","1","2014-05-23 19:35:37","4271882","1","","1043380","","2014-05-23 19:35:37","2010-11-24 21:50:38","2014-05-24 04:00:41"
"17142565","How to generate java equivalent secret key in objective C?","<p>Here is java code</p>

<pre><code>public SecretKey getSymmetricKey(String keyString) {
    SecretKey secretKey = null;
    try {
        byte[] raw = Base64.decode(keyString);
        secretKey = new SecretKeySpec(raw, ""AES"");
        System.out.println(""key ""+secretKey);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return secretKey;
}
</code></pre>

<p>please help me on this how to implement above in objective c or which API i need to refer for this ??</p>
","","688","<iphone><security><cryptoapi><encryption-symmetric>","1","","0","2013-07-02 12:37:47","","0","3","","","","2013-06-17 07:40:50",""
"38754954","max plaintext size for Android Keystore symmetric encryption?","<p>I'd like to use the <a href=""https://developer.android.com/training/articles/keystore.html#GeneratingANewSecretKey"" rel=""nofollow"">Android Keystore</a> to do symmetric AES encryption of large (multi MB) data files.</p>

<p>I've written demo code that will encrypt/decrypt multi-KB files with the Keystore, but when the file size gets too large it starts to fall down.  This max size varies by device and can range anywhere from ~80KB to ~1MB.  On every Android-M device I've tested on (including the emulator) there seems to be a maximum size after which encryption will fail.</p>

<p>When it fails, it fails silently-- however the ciphertext size is typically quite a bit smaller than it should be (which of course can't then be decrypted).</p>

<p>Since it's so pervasive across multiple devices, either I'm doing something wrong (likely!), or there's some kind of undocumented limit to what can be encrypted in the Keystore.</p>

<p>I've written up a demo app on Github that shows the problem (<a href=""https://github.com/paleozogt/AndroidEncryptionDemo"" rel=""nofollow"">here</a>, specifically <a href=""https://github.com/paleozogt/AndroidEncryptionDemo/blob/master/app/src/main/java/com/paleozogt/encryptor/KeystoreAesEncryptor.java"" rel=""nofollow"">this file</a>).  You can run the app gui to make the problem happen manually, or run the instrumentation tests to make it happen.</p>

<p>Any help or pointers to documentation about this problem would be greatly appreciated!</p>

<p>For reference, I'm generating the symmetric key <a href=""https://github.com/paleozogt/AndroidEncryptionDemo/blob/f29374a7edcc5f0acd4a065915f84ff0c696637c/app/src/main/java/com/paleozogt/encryptor/KeystoreAesEncryptor.java#L47"" rel=""nofollow"">like this</a>:</p>

<pre><code>KeyGenerator keyGenerator  = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, ""AndroidKeyStore"");
keyGenerator.init(
        new KeyGenParameterSpec.Builder(KEY_ALIAS, KeyProperties.PURPOSE_ENCRYPT|KeyProperties.PURPOSE_DECRYPT)
                .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
                .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
                .build()
);
SecretKey key = keyGenerator.generateKey();

SecretKeyFactory factory = SecretKeyFactory.getInstance(key.getAlgorithm(), ""AndroidKeyStore"");
KeyInfo keyInfo= (KeyInfo)factory.getKeySpec(key, KeyInfo.class);
logger.debug(""isInsideSecureHardware: {}"", keyInfo.isInsideSecureHardware());
</code></pre>

<p>and I'm encrypting <a href=""https://github.com/paleozogt/AndroidEncryptionDemo/blob/f29374a7edcc5f0acd4a065915f84ff0c696637c/app/src/main/java/com/paleozogt/encryptor/KeystoreAesEncryptor.java#L65"" rel=""nofollow"">like this</a>:</p>

<pre><code>KeyStore keyStore= KeyStore.getInstance(""AndroidKeyStore"");
keyStore.load(null);
KeyStore.SecretKeyEntry keyEntry= (KeyStore.SecretKeyEntry)keyStore.getEntry(KEY_ALIAS, null);

Cipher cipher= getCipher();
cipher.init(Cipher.ENCRYPT_MODE, keyEntry.getSecretKey());
GCMParameterSpec params= cipher.getParameters().getParameterSpec(GCMParameterSpec.class);

ByteArrayOutputStream byteStream= new ByteArrayOutputStream();
DataOutputStream dataStream= new DataOutputStream(byteStream);

dataStream.writeInt(params.getTLen());
byte[] iv= params.getIV();
dataStream.writeInt(iv.length);
dataStream.write(iv);

dataStream.write(cipher.doFinal(plaintext));
</code></pre>

<p><strong>Update:</strong></p>

<p>Per the suggestions of <code>user2481360</code> and <code>Artjom B.</code> I changed to chunking the plaintext as it goes into the cypher <a href=""https://github.com/paleozogt/AndroidEncryptionDemo/blob/e77b1940de3d123d6a50f7ae736fa7dee899d27b/app/src/main/java/com/paleozogt/encryptor/KeystoreAesEncryptor.java#L65"" rel=""nofollow"">like this</a>:</p>

<pre><code>ByteArrayInputStream plaintextStream= new ByteArrayInputStream(plaintext);
final int chunkSize= 4*1024;
byte[] buffer= new byte[chunkSize];
while (plaintextStream.available() &gt; chunkSize) {
    int readBytes= plaintextStream.read(buffer);
    byte[] ciphertextChunk= cipher.update(buffer, 0, readBytes);
    dataStream.write(ciphertextChunk);
}
int readBytes= plaintextStream.read(buffer);
byte[] ciphertextChunk= cipher.doFinal(buffer, 0, readBytes);
dataStream.write(ciphertextChunk);
</code></pre>

<p>This appears to solve the problem with the ciphertext being completely wrong.  I can now use very large plaintext sizes.</p>

<p>However, depending on the size sometimes the data doesn't roundtrip.  For example, if I use 1MB the roundtripped plaintext is missing a few bytes at the end.  But if I use 1MB+1B, it will work.  My understanding of <code>AES/GCM</code> was that the input plaintext doesn't have to have a special size (aligned to the block length, etc).</p>
","<p>Chop  the data into small pieces and then call update, when it reach the last piece call doFinal</p>
","687","<android><security><encryption-symmetric>","1","1","1","2016-08-04 19:12:12","","0","","89218","","2016-08-04 19:12:12","2016-08-03 22:57:49",""
"22226678","Sql types and encrypted size","<p>I am introducing Symmetric Key encription on some dynamically generated Sql Server 2012 tables.</p>

<p>I expect to store:</p>

<ol>
<li>varchar(X)</li>
<li>integers</li>
<li>date time</li>
<li>boolean</li>
</ol>

<p>I create the key using</p>

<pre><code>CREATE SYMMETRIC KEY MyKey
    WITH ALGORITHM = AES_256
    ENCRYPTION BY CERTIFICATE MyCertificate
GO
</code></pre>

<p>I insert data using i.e.</p>

<pre><code>insert into SecureTable(value) values (EncryptByKey(@ui, CONVERT(varbinary(max), 12345)))
</code></pre>

<p>The result is something like:</p>

<blockquote>
  <p>0x0022377E67EFF34DAAAD0F812153593D01000000C867C6F2085D3850BF1F50275945CFEA90297C51D537E8C443B5F34050B325E0</p>
</blockquote>

<p>How can I effectively size the target columns? Using Always <code>VARBINARY(MAX)</code> doesn't feel right!</p>

<p>I'm looking for something like:</p>

<ul>
<li>int => varbinary(32)</li>
<li>varchar(x) => varbinary(Y) </li>
<li>boolean => varbinary(10)</li>
<li>DataTime => ...</li>
</ul>
","<p>As suggested by @Joe Enos I tryed to encrypt several data types. This is the empiric result:</p>

<ul>
<li>integer: takes 52 bytes</li>
<li>varchar(X): takes X+45 to X+65 bytes</li>
<li>float: 68 bytes</li>
<li>decimal(30,12): 68 bytes</li>
<li>datetime: 68 bytes</li>
<li>bit: 52 bytes</li>
</ul>
","684","<c#><sql><sql-server><sql-server-2012><encryption-symmetric>","2","2","1","2014-03-06 15:19:33","22227837","1","1","","","","2014-03-06 13:58:02",""
"20903990","PHP: mcrypt_ecb is not working inside a function","<p>I've got a very simple function:</p>

<pre><code>$me = 45S237s53dsSerwjw53s23rjf; //Some long encrypted string.

function decrypt($user){
    $user = pack(""H*"" , $user); //Converting from hexadecimal to binary

    $user = mcrypt_ecb(MCRYPT_DES, $key, $user, MCRYPT_DECRYPT); //Decrypting

    return $user;
}
</code></pre>

<p>The problem is if I do go <code>echo decrypt($me);</code> it doesn't work, I don't end up with a decrypted string.</p>

<p>However if I do essentially the same thing without using a <code>function</code> it works:</p>

<pre><code>    $user = $me;        

    $user = pack(""H*"" , $user);

    $user = mcrypt_ecb(MCRYPT_DES, $key, $user, MCRYPT_DECRYPT);

    echo $user; //Works fine...
</code></pre>

<p>What's going on here?</p>
","<p>Your missing the <code>$key</code> variable inside the function body. With the correct error level settings you'd have been given a warning, that <code>$key</code> is undefined.</p>

<p>Either add <code>$key</code> as a function argument or define <code>$key</code> inside the function body (or, third alternative, import <code>$key</code> from the global scope).</p>

<h3>1</h3>

<pre><code>function decrypt($user, $key){
    //...
}
</code></pre>

<h3>2</h3>

<pre><code>function decrypt($user){
    $key = '....whatever...';
    //...
}
</code></pre>

<h3>3.1</h3>

<pre><code>function decrypt($user){
    global $key;
    //...
}
</code></pre>

<h3>3.2</h3>

<pre><code>function decrypt($user){
    //...
    $user = mcrypt_ecb(MCRYPT_DES, $GLOBALS['key'], $user, MCRYPT_DECRYPT);
    //...
}
</code></pre>
","682","<php><encryption><encryption-symmetric>","0","1","1","2014-01-03 12:49:26","20904075","1","1","","","","2014-01-03 12:44:29",""
"44196517","Encrypt file in Perl","<p>I created the algorithm to encrypt and decrypt a string in Perl ( using AES in CFB mode). Now I want to extend to encryption to file level. How should I get the content of the file? What would be a good approach?</p>

<ol>
<li>Read the file normally<br>
<code>open(my $fh, ""&lt;"", ""myTestFile.ext"");</code></li>
<li>Read the file in binmode <br>
<code>open(my $fh, ""&lt;"", ""myTestFile.ext"");
binmode $fh</code></li>
</ol>

<p>Then how should I store the content of the files?</p>

<p>a) Read all the content of the file in one string and provide the string to the implemented program</p>

<pre><code>my $document = do {
    local $/ = undef;
    &lt;$fh&gt;; # file handle opened previously
};
encryptionAlgorithm($document);
</code></pre>

<p>b) Read the content of the file line by line</p>

<pre><code>while( my $line = &lt;$fh&gt;)
{
    encryptionAlgorithm($line);
}
</code></pre>

<p>In both cases should I chomp the <code>\n</code>'s ?</p>
","<p>AES encrypts blocks of 128 bits (16 bytes), so you'll want to read your file 16 bytes at a time. To do this, you need to <code>binmode</code> your file, then read it with the <a href=""https://perldoc.perl.org/functions/read.html"" rel=""nofollow noreferrer""><code>read</code></a> builtin:</p>

<pre><code>open my $fh, '&lt;', 'myTestFile.ext' or die $!;
binmode $fh;

while (read($fh,my $block,16)) {
    # encrypt $block
}
</code></pre>

<p>Note that I've added <code>or die $!</code> after opening the file: you want to always make sure your <code>open</code> worked.</p>

<p>Also, don't forget that if the block you read is less than 16 bytes long, you'll have to do some padding. (I don't recall how the blocks are padded for AES, but I trust you do since you are implementing it)</p>

<hr>

<p>About the approaches you thought of:</p>

<ul>
<li><p>Reading the entire file at once will potentially consume a lot of memory if the file is big.</p></li>
<li><p>Reading the file line by line: if the file contains no newline, then you'll read it entirely at once, which might consume a lot of memory. And if lines contain a number of bytes which isn't a multiple of 16, then you'll have to combine bytes from different lines, which will require more work than simply reading blocks of 16 bytes.  </p></li>
</ul>

<p>Also, you definitely don't want to <code>chomp</code> anything! You should have <code>decrypt(encrypt(file)) == file</code>, but if you <code>chomp</code> the newlines, that won't be the case anymore.</p>
","679","<perl><encryption><encryption-symmetric>","1","2","1","2017-05-26 15:25:32","","0","","","","","2017-05-26 07:59:23",""
"16484429","Pass AES ciphertext as parameter","<p>I am trying to write 2 different functions to encrypt and decrypt the data using AES in cryptopp. I want to pass the ciphertext as a parameter to the decryption function. However on the decryption function, it recieves some special symbols as ciphertext &amp; thus doesn't decrypt properly. Please help.</p>

<pre><code>// -- AES encryption function ----------
void Security_packetAgent::encryption(char out[])
{ 
    std::string plaintext = out;
    std::string ciphertext = """";

    CryptoPP::AES::Encryption aesEncryption(key, CryptoPP::AES::DEFAULT_KEYLENGTH);
    CryptoPP::CBC_Mode_ExternalCipher::Encryption cbcEncryption( aesEncryption, iv );

    CryptoPP::StreamTransformationFilter stfEncryptor(cbcEncryption, new CryptoPP::StringSink( ciphertext ) );
    stfEncryptor.Put( reinterpret_cast&lt;const unsigned char*&gt;( plaintext.c_str() ), plaintext.length() + 1 );
    stfEncryptor.MessageEnd();

    std::cout &lt;&lt; ""Cipher Text ("" &lt;&lt; ciphertext.size() &lt;&lt; "" bytes)"" &lt;&lt; std::endl;

    for( int i = 0; i &lt; ciphertext.size(); i++ )
    {
        std::cout &lt;&lt; ""0x"" &lt;&lt; std::hex &lt;&lt; (0xFF &amp; static_cast&lt;byte&gt;(ciphertext[i])) &lt;&lt; "" "";
    }

    std::cout&lt;&lt;""\nMessage encrypted ..."";
    std::cout &lt;&lt; std::endl &lt;&lt; std::endl;
    sprintf(out, ""%s"", ciphertext.c_str());
    printf(""Final Data: %s : %s "", out, reinterpret_cast&lt;const unsigned char*&gt;(ciphertext.c_str()));
}

// ---- AES decryption  ------------------
void Security_packetAgent::decryption(char out[])
{ 
    cout&lt;&lt;""\nCipher recieved: ""&lt;&lt;out;
    std::cout&lt;&lt;""\nEntered decryption .."";
    std::string ciphertext = out;
    std::string decryptedtext;

    cout&lt;&lt;""\nCipher recieved: ""&lt;&lt;reinterpret_cast&lt;const unsigned char*&gt;( ciphertext.c_str());
    CryptoPP::AES::Decryption aesDecryption(key, CryptoPP::AES::DEFAULT_KEYLENGTH);
    CryptoPP::CBC_Mode_ExternalCipher::Decryption cbcDecryption( aesDecryption, iv );

    CryptoPP::StreamTransformationFilter stfDecryptor(cbcDecryption, new CryptoPP::StringSink( decryptedtext ) );
    stfDecryptor.Put( reinterpret_cast&lt;const unsigned char*&gt;( ciphertext.c_str() ), ciphertext.size() );
    stfDecryptor.MessageEnd();

    std::cout &lt;&lt; ""Decrypted Text: "" &lt;&lt; std::endl;
    std::cout &lt;&lt; decryptedtext;
    std::cout &lt;&lt; std::endl &lt;&lt; std::endl;    
}
</code></pre>
","<p>You shouldn't be constructing <code>std::string</code> out of a <code>char*</code>, if the <code>char*</code> is pointing to something that isn't a text string, such as encrypted data.</p>

<pre><code>std::string ciphertext = out;
</code></pre>

<p>The construction of <code>ciphertext</code> is going to stop copying from <code>out</code> as soon as it reaches a 0 byte. Instead, you need to also pass in the <strong>length</strong> of the encrypted data and use the <code>std::string(const char* data, size_t size)</code> constructor.</p>

<pre><code>std::string ciphertext(out, outSize);
</code></pre>

<p>Alternatively, you can also use the constructor taking a begin and end iterator.</p>
","672","<c++><encryption><aes><encryption-symmetric><crypto++>","0","3","1","2015-05-02 22:04:21","","2","","608639","","2015-05-02 22:04:21","2013-05-10 14:19:40",""
"52145133","Encrypted String length in c#","<p>I am using AES encryption in my application. I used 3 types of encryption AES-128,AES-192, AES-256 keysize.
When I encrypt with different keysize(128 or 192 or 256) with the same text, the encrypted string length is same for all keysize(128 and 192 and 256) whereas encrypted characters only differs. Is this correct? Is the length of the encrypted string length always same for every keysize? </p>

<pre><code>  static string GetEncryptedString_Aes(string plainText, byte[] Key, byte[] IV)
    {
        // Check arguments.
        if (plainText == null || plainText.Length &lt;= 0)
            throw new ArgumentNullException(""plainText"");
        if (Key == null || Key.Length &lt;= 0)
            throw new ArgumentNullException(""Key"");
        if (IV == null || IV.Length &lt;= 0)
            throw new ArgumentNullException(""IV"");
        byte[] encrypted;

        // Create an AesCryptoServiceProvider object
        // with the specified key and IV.
        using (AesCryptoServiceProvider aesAlg = new AesCryptoServiceProvider())
        {
            aesAlg.Key = Key;
            aesAlg.IV = IV;

            // Create an encryptor to perform the stream transform.
            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

            // Create the streams used for encryption.
            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        //Write all data to the stream.
                        swEncrypt.Write(plainText);
                    }

                    encrypted = msEncrypt.ToArray();
                }
            }
        }


        // Return the encrypted bytes from the memory stream.
        return Convert.ToBase64String(encrypted);

    }
</code></pre>
","<p>Are you using SQL Server 2005 or above? If so you could just use VARCHAR(MAX) or NVARCHAR(MAX) for the column type.</p>

<p>If you want to be a bit more precise...</p>

<p>The maximum block size for RijndaelManaged is 256 bits (32 bytes).</p>

<p>Your maximum input size is 20 characters, so even if we assume a worst-case scenario of 4 bytes per character, that'll only amount to 80 bytes, which will then be padded up to a maximum of 96 bytes for the encryption process.</p>

<p>If you use Base64 encoding on the encrypted output that will create 128 characters from the 96 encrypted bytes. If you use hex encoding then that will create 192 characters from the 96 encrypted bytes (plus maybe a couple of extra characters if you're prefixing the hex string with ""0x""). In either case a column width of 200 characters should give you more than enough headroom.</p>

<p>(NB: These are just off-the-top-of-my-head calculations. I haven't verified that they're actually correct!)</p>
","655","<c#><encryption-symmetric>","0","-1","2","2018-09-05 02:11:26","","4","","9162826","","2018-09-03 08:56:34","2018-09-03 07:37:15",""
"52145133","Encrypted String length in c#","<p>I am using AES encryption in my application. I used 3 types of encryption AES-128,AES-192, AES-256 keysize.
When I encrypt with different keysize(128 or 192 or 256) with the same text, the encrypted string length is same for all keysize(128 and 192 and 256) whereas encrypted characters only differs. Is this correct? Is the length of the encrypted string length always same for every keysize? </p>

<pre><code>  static string GetEncryptedString_Aes(string plainText, byte[] Key, byte[] IV)
    {
        // Check arguments.
        if (plainText == null || plainText.Length &lt;= 0)
            throw new ArgumentNullException(""plainText"");
        if (Key == null || Key.Length &lt;= 0)
            throw new ArgumentNullException(""Key"");
        if (IV == null || IV.Length &lt;= 0)
            throw new ArgumentNullException(""IV"");
        byte[] encrypted;

        // Create an AesCryptoServiceProvider object
        // with the specified key and IV.
        using (AesCryptoServiceProvider aesAlg = new AesCryptoServiceProvider())
        {
            aesAlg.Key = Key;
            aesAlg.IV = IV;

            // Create an encryptor to perform the stream transform.
            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

            // Create the streams used for encryption.
            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        //Write all data to the stream.
                        swEncrypt.Write(plainText);
                    }

                    encrypted = msEncrypt.ToArray();
                }
            }
        }


        // Return the encrypted bytes from the memory stream.
        return Convert.ToBase64String(encrypted);

    }
</code></pre>
","<p>Checkout the link below. The size of your key doesn't change your output length. (Block cipher encryption)</p>

<p><a href=""https://stackoverflow.com/questions/3283787/size-of-data-after-aes-cbc-and-aes-ecb-%20encryption"">Size of data after AES/CBC and AES/ECB encryption</a></p>
","655","<c#><encryption-symmetric>","0","1","2","2018-09-05 02:11:26","","4","","9162826","","2018-09-03 08:56:34","2018-09-03 07:37:15",""
"32405563","symmetric decryption throwing error","<p>I'm working on adding the ability to decrypt a file encrypted using GPG &amp; Symmetric Encryption.</p>

<p>However whenever it tries to get the private key data this exceptions keeps getting hit:</p>

<blockquote>
  <p>Unable to cast object of type 'Org.BouncyCastle.Bcpg.OpenPgp.PgpPbeEncryptedData' to type 'Org.BouncyCastle.Bcpg.OpenPgp.PgpPublicKeyEncryptedData'.</p>
</blockquote>

<p>everywhere I look this is how you do it:</p>

<pre><code>Stream inputStream = IoHelper.GetStream(inputData);
        PgpObjectFactory pgpFactory = new PgpObjectFactory(PgpUtilities.GetDecoderStream(inputStream));
        PgpObject pgp = null;
        if (pgpFactory != null)
        {
            pgp = pgpFactory.NextPgpObject();
        }

        PgpEncryptedDataList encryptedData = null;
        if (pgp is PgpEncryptedDataList)
        {
            encryptedData = (PgpEncryptedDataList)pgp;
        }
        else
        {
            encryptedData = (PgpEncryptedDataList)pgpFactory.NextPgpObject();
        }

        Stream privateKeyStream = File.OpenRead(PrivateKeyOnlyPath);

        // find secret key
        PgpSecretKeyRingBundle pgpKeyRing = new PgpSecretKeyRingBundle(PgpUtilities.GetDecoderStream(privateKeyStream));
        PgpPrivateKey privateKey = null;

        foreach (PgpPublicKeyEncryptedData pked in encryptedData.GetEncryptedDataObjects())
        {
            privateKey = FindSecretKey(pgpKeyRing, pked.KeyId, Password.ToCharArray());
            if (privateKey != null)
            {
                //pubKeyData = pked;
                break;
            }
        }
</code></pre>

<p>I'm referencing the code from <a href=""https://gist.github.com/dieseltravis/8323431"" rel=""nofollow"">here</a></p>

<p>I'm lost on why it's not working and not sure where to go next.</p>
","<h2>Hybrid Cryptosystems</h2>

<p>The ""normal"" way of encryption in OpenPGP (which GnuPG implements) is hybrid encryption: public/private key cryptography for key management and encrypting a session key, and subsequently symmetric encryption using this session key of the actual data.</p>

<p>From what you write, it seems the public/private key cryptography step was omitted, and the session key instead generated using a passphrase, for example by using the command <code>gpg --symmetric</code>. You can determine how it was encrypted using <code>pgpdump</code>. Output for a symmetrically encrypted file looks like</p>

<pre><code>Old: Symmetric-Key Encrypted Session Key Packet(tag 3)(13 bytes)
    New version(4)
    Sym alg - CAST5(sym 3)
    Iterated and salted string-to-key(s2k 3):
        Hash alg - SHA512(hash 10)
        Salt - 3b be 1b 03 64 c3 bb 7e 
        Count - 102400(coded count 105)
New: Symmetrically Encrypted Data Packet(tag 9)(26 bytes)
    Encrypted data [sym alg is specified in sym-key encrypted session key]
</code></pre>

<p>Especially consider the first line with the symmetric-key encrypted session key packet.</p>

<h2>What to do</h2>

<p>I'm sorry I do not really know C#, and neither have worked with Bouncy Castle yet, so I cannot provide a ready-to-run solution. Moreover, the C# documentation seems to be more or less inexistent.</p>

<p>I'd guess you'll have to make use of the <a href=""https://github.com/bcgit/bc-csharp/blob/master/crypto/src/openpgp/PgpPbeEncryptedData.cs"" rel=""nofollow""><code>PgpPbeEncryptedData</code> class</a>, which seems to take an input stream and a passphrase and provides the decrypted information as an output stream. There is an <a href=""https://gist.github.com/dwelch2344/6986219"" rel=""nofollow"">example for the Java Bouncy Castle package</a>, which will probably be very similar and mostly boils down to</p>

<pre><code>byte[] decryptedAgainByteArray = ByteArrayHandler.decrypt(encryptedAgain, PASS.toCharArray());
</code></pre>
","654","<c#><bouncycastle><encryption-symmetric><openpgp>","0","0","1","2015-09-04 21:58:20","32407151","0","","778587","","2015-09-04 19:58:44","2015-09-04 19:49:56",""
"41766970","Setting AES cipher mode for ASP.NET MachineKey from web.config","<p>I try using <a href=""https://msdn.microsoft.com/en-us/library/7t6b43z4.aspx"" rel=""nofollow noreferrer"" title=""ASP.NET FormAuthentication Overview"">ASP.NET FormAuthentication</a> for my website authentication. I added machineKey element in my web.config so that I can choose what validation and decryption algorithms to use for my authentication. Looking at the <a href=""https://msdn.microsoft.com/en-us/library/w8h3skw9(v=vs.100).aspx"" rel=""nofollow noreferrer"" title=""machineKey Element"">machineKey documentation</a>, I found out that I can choose between these algorithms for the validation:</p>

<blockquote>
  <p>[SHA1 | MD5 | 3DES | AES | HMACSHA256 | HMACSHA384 | HMACSHA512 | alg:algorithm_name]</p>
</blockquote>

<p>And I can choose between these algorithms for the decryption:</p>

<blockquote>
  <p>[Auto | DES | 3DES | AES | alg:algorithm_name]</p>
</blockquote>

<p>I notice that when I try to use the AES algorithm (by setting both validation and decryption attribute in machineKey element to ""AES""), I can't change its cipher mode (I assume it use CBC as the default <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.symmetricalgorithm.mode(v=vs.110).aspx"" rel=""nofollow noreferrer"" title=""default cipher mode"">as the documentation says</a>). I want to use AES algorithm with different cipher mode here. So just setting the attributes' value to ""AES"" doesn't solve my problem. The machineKey documentation says this for the <code>alg:algorithm_name</code>:</p>

<blockquote>
  <p>alg:algorithm_name  Specifies that ASP.NET uses a custom algorithm to encrypt and decrypt data. The encryption algorithm must be defined in a class that derives from SymmetricAlgorithm. ASP.NET calls the SymmetricAlgorithm.Create method and passes in the name of the algorithm that is specified here.</p>
</blockquote>

<p>Reading this I assume that it is possible to reference a custom algorithm made with <code>SymmetricAlgorithm.Create</code> method here. And since <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.symmetricalgorithm(v=vs.100).aspx"" rel=""nofollow noreferrer"" title=""SymmetricAlgorithm class"">SymmetricAlgorithm class has a ""mode"" property which can be used for getting and setting the cipher mode</a>, I guess this can solve my problem.</p>

<p>Now my problem is I don't know how to reference my custom algorithm (which is AES but using other cipher mode, e.g. ECB mode) into the machineKey element in the web.config. I am trying to find other documentation, with no luck. Is there any way to set the validation and decryption attribute of the machineKey element in web.config so that it use my custom algorithm? Or is there any other way so that I can use my custom algorithm for the FormAuthentication's validation and decryption?</p>
","","634","<c#><asp.net><encryption-symmetric><form-authentication><machinekey>","1","","0","2017-01-20 15:34:43","","0","","6638533","","2017-01-20 15:34:43","2017-01-20 15:20:29",""
"45563332","AES encryption example class to encrypt data using user's password","<p>In a Python 3 application I need to encrypt user's data using his own password.
I'm using Cryptodome library.</p>

<p>Given that AES needs a fixed size key (128bit in the example), I used PBKDF2 to get the key.
Below is the class I use in my code.</p>

<p>I store the salt (<em>salt</em> in the code) used for key derivation and the initialization vector (<em>iv</em> in the code) at the top of the message itself.
Indeed, for what I understood (reading the docs <a href=""http://legrandin.github.io/pycryptodome/Doc/3.4.6/Crypto.Cipher.AES-module.html"" rel=""nofollow noreferrer"">here</a>) neither the salt nor the iv must be kept secret. </p>

<p>Is this a correct approach or can you suggest me a better one?</p>

<pre><code>from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Protocol import KDF

class crypto:
    def __init__(self,pwd):
        self.pwd = pwd

    def encrypt(self,data):
        salt = get_random_bytes(8)
        key = KDF.PBKDF2(self.pwd,salt) #128bit key derivation function
        iv = get_random_bytes(16)
        cipher = AES.new(key, AES.MODE_CFB, iv)
        return salt + iv + cipher.encrypt(data)

    def decrypt(self,msg):
        key = KDF.PBKDF2(self.pwd,msg[:8])
        cipher = AES.new(key, AES.MODE_CFB, msg[8:24])
        return cipher.decrypt(msg[24:])
</code></pre>

<p>Thanks in advance.</p>
","<p>Yes, this is correct and a good practice and good method of providing the derivation salt and iv to the decryption code.</p>

<p>PBKDF provides substantial security against brute force password attacks as well as a correct length key.</p>
","631","<python-3.x><aes><encryption-symmetric>","1","1","1","2017-08-08 14:14:08","45567626","1","","3396785","","2017-08-08 14:14:08","2017-08-08 08:36:17",""
"46444137","What is API in OpenSSL like Java DES/CBC/PKCS5Padding?","<p>I want to decrypt password which was encrypted by ""DES/CBC/PKCS5Padding"" of javax.crypto.Cipher. I have  to use OpenSSL to decrypt the password. Which API in OpenSSL should I use?</p>

<p>I know API for DES3 is <code>DES_ede3_cbc_encrypt</code>, and want to know DES.</p>
","<p>You should also use <code>EVP_*</code> functions; and not functions like <code>DES_ede3_cbc_encrypt</code> (and friends). See <a href=""http://wiki.openssl.org/index.php/EVP_Symmetric_Encryption_and_Decryption"" rel=""nofollow noreferrer"">EVP Symmetric Encryption and Decryption</a> on the OpenSSL wiki.</p>

<p>To answer your question about DES symbols, you need to use <code>EVP_des_XXX</code>, where <code>XXX</code> is a mode of interest. I'm guessing you want <code>EVP_des_cbc</code>.</p>

<p>If you are working on a CentOS machine with the FIPS version of OpenSSL <em>and</em> FIPS mode is active, then you probably won't have access to any DES or 2-key 3DES algorithms (3-key 3DES should be available).</p>

<pre><code>$ cd openssl
$ grep EVP_des include/openssl/evp.h
const EVP_CIPHER *EVP_des_ecb(void);
const EVP_CIPHER *EVP_des_ede(void);
const EVP_CIPHER *EVP_des_ede3(void);
const EVP_CIPHER *EVP_des_ede_ecb(void);
const EVP_CIPHER *EVP_des_ede3_ecb(void);
const EVP_CIPHER *EVP_des_cfb64(void);
const EVP_CIPHER *EVP_des_cfb1(void);
const EVP_CIPHER *EVP_des_cfb8(void);
const EVP_CIPHER *EVP_des_ede_cfb64(void);
const EVP_CIPHER *EVP_des_ede3_cfb64(void);
const EVP_CIPHER *EVP_des_ede3_cfb1(void);
const EVP_CIPHER *EVP_des_ede3_cfb8(void);
const EVP_CIPHER *EVP_des_ofb(void);
const EVP_CIPHER *EVP_des_ede_ofb(void);
const EVP_CIPHER *EVP_des_ede3_ofb(void);
const EVP_CIPHER *EVP_des_cbc(void);
const EVP_CIPHER *EVP_des_ede_cbc(void);
const EVP_CIPHER *EVP_des_ede3_cbc(void);
const EVP_CIPHER *EVP_desx_cbc(void);
const EVP_CIPHER *EVP_des_ede3_wrap(void);
</code></pre>

<hr>

<p>Here are some references I keep cribbed away for OpenSSL and Java interop. Usually <a href=""http://wiki.openssl.org/index.php/Manual:EVP_BytesToKey(3)"" rel=""nofollow noreferrer""><code>EVP_BytesToKey</code></a> causes some issues. </p>

<ul>
<li><a href=""http://stackoverflow.com/q/21086103/608639"">Java AES 128 encrypting differently to openssl</a></li>
<li><a href=""http://stackoverflow.com/q/32508961/608639"">Java equivalent of an OpenSSL AES CBC encryption</a></li>
<li><a href=""http://stackoverflow.com/q/31947256/608639"">How to decode a string encoded with openssl aes-128-cbc using java?</a></li>
<li><a href=""http://stackoverflow.com/q/15594518/608639"">Using Java to decrypt openssl aes-256-cbc using provided key and iv</a></li>
<li><a href=""http://stackoverflow.com/q/12920740/608639"">Java equivalent of C++ encryption</a></li>
<li><a href=""http://security.stackexchange.com/q/9600/29925"">How to use OpenSSL generated keys in Java?</a></li>
<li><a href=""http://stackoverflow.com/q/34502705/608639"">Java openssl encryption / decryption key generation</a></li>
<li><a href=""http://stackoverflow.com/q/9488919"">Password to key function compatible with OpenSSL commands?</a></li>
<li><a href=""http://stackoverflow.com/q/11783062"">How to decrypt file in Java encrypted with openssl command using AES?</a></li>
</ul>
","629","<java><c><openssl><password-encryption><encryption-symmetric>","1","1","1","2017-09-27 12:09:42","","0","","8131224","","2017-09-27 09:40:24","2017-09-27 09:23:42",""
"18921725","Pr0blem with AES256 encryption in java","<p>So.. here is the class: (I use and made for AES256 encryption)</p>

<pre><code>public class AES256
{
private String charSet = ""UTF-8"";
private String algo = ""AES/CBC/PKCS5Padding"";
private String baseAlgo = ""AES"";
private String hashAlgo = ""PBKDF2WithHmacSHA1"";

private String key = null;
private String salt = ""defaultsaltsalt"";
private String iv = ""a1bC@6jZ!#sL1z0y"";

private Cipher cipher;
private BufferedInputStream bIs;
private BufferedOutputStream bOs;

public AES256()
{

}

public AES256(String pass)
{
    this.key = pass;
}

public AES256(String pass, String salty)
{
    this.key = pass;
    this.salt = salty;
}

public AES256(String pass, String salty, String ivs)
{
    this.key = pass;
    this.salt = salty;
    this.iv = ivs;
}

public void setKey(String key)
{
    this.key = key;
}

public void setSalt(String salt)
{
    this.salt = salt;
}

public void setIV(String ivs)
{
    this.iv = ivs;
}

/**
 * @Method Pads and constructs the SecretKey (Padding @ 32)
 * @return Returns the padded key.
 * @throws Exception Exception is thrown if the key is null or something else wrong..
 */
public SecretKeySpec getKey() throws Exception
{
     byte[] saltBytes = salt.getBytes(charSet);

     SecretKeyFactory factory = SecretKeyFactory.getInstance(hashAlgo);
     PBEKeySpec spec = new PBEKeySpec(
             this.key.toCharArray(), 
             saltBytes, 
             300000, //make variable
             263 //default 32 bytes
     );

     SecretKey secretKey = factory.generateSecret(spec);
     SecretKeySpec secret = new SecretKeySpec(secretKey.getEncoded(), baseAlgo);

     return secret;
}

/**
 * @Method Pads and returns the IV (Padding @ 16)
 * @return
 * @throws Exception
 */
public byte[] getIV() throws Exception
{
    byte[] byteKey = iv.getBytes(charSet);
    MessageDigest sha = MessageDigest.getInstance(""SHA-512"");
    byteKey = sha.digest(byteKey);
    byteKey = Arrays.copyOf(byteKey, 16);
    return byteKey;
}

public byte[] encrypt(byte[] plainText) throws Exception
{
    cipher = Cipher.getInstance(algo);
    cipher.init(Cipher.ENCRYPT_MODE, getKey(), new IvParameterSpec(getIV()));

    System.out.println(""Plain text length: ""+plainText.length);
    byte[] enc = Base64.encodeBase64(cipher.doFinal(plainText));
    System.out.println(""Encrypted text length ""+enc.length);

    return  enc;
}

public byte[] decrypt(byte[] encryptedText) throws Exception
{
    cipher = Cipher.getInstance(algo);
    cipher.init(Cipher.DECRYPT_MODE, getKey(), new IvParameterSpec(getIV()));

    System.out.println(""Encrypted Decrypted Text length: ""+encryptedText.length);
    byte[] de = cipher.doFinal(Base64.decodeBase64(encryptedText));
    System.out.println(""Decrypted Text length: ""+de.length);

    return de;
}

public void encrypt(File fileToEncrypt) throws FileNotFoundException, IOException, Exception
{
    if(fileToEncrypt == null)
        throw new FileNotFoundException(""File given to encrypt was not found!"");
    File encrypted = new File(cutPath(fileToEncrypt.getPath()), ""ENCRYPTED ""+fileToEncrypt.getName());
    if(!encrypted.exists())
        encrypted.createNewFile();
    bIs = new BufferedInputStream(new FileInputStream(fileToEncrypt));
    bOs = new BufferedOutputStream(new FileOutputStream(encrypted));

    @SuppressWarnings(""unused"")
    int read = 0;
    byte[] buff = new byte[1024];
    while((read = bIs.read(buff)) != -1)
    {
        byte[] enc = encrypt(buff);
        bOs.write(enc, 0, enc.length);
    }
    bIs.close();
    bOs.close();
}

public void decrypt(File fileToDecrypt) throws FileNotFoundException, IOException, Exception
{
    if(fileToDecrypt == null)
        throw new FileNotFoundException(""File given to decrypt was not found!"");
    File decrypted = new File(cutPath(fileToDecrypt.getPath()), ""DECRYPTED ""+fileToDecrypt.getName().replace(""ENCRYPTED "", """"));
    if(!decrypted.exists())
        decrypted.createNewFile();
    bIs = new BufferedInputStream(new FileInputStream(fileToDecrypt));
    bOs = new BufferedOutputStream(new FileOutputStream(decrypted));

    @SuppressWarnings(""unused"")
    int read = 0;
    byte[] buff = new byte[1388];
    while((read = bIs.read(buff)) != -1)
    {
        byte[] de = decrypt(buff);
        bOs.write(de, 0, de.length);
    }
    bIs.close();
    bOs.close();
}

private String cutPath(String path)
{
    String temp = """";
    String[] parts = path.split(Pattern.quote(File.separator));
    for(int i = 0; i &lt; parts.length-1; i++)
        temp+=parts[i]+""/"";
    return temp;
}
</code></pre>

<p>}</p>

<p>I am using this class that i wrote to encrypt and decrypt information in java using CBC/PKCS5PADDING and I am also using a hash algo in order to hash my password..</p>

<p><strong>Note: I know there is some efficiency problems in this program like why do i keep computing the key ever block i get from the file.. I am fixing that later.. It was just there to test some things out.</strong></p>

<p>Anyways, I am using the encrypt(File) method and when i give it a file it gets the information 1024 bytes at a time and encrypts that information then coverts to BASE64 to avoid encoding issues.. then writes it back to a different file with the same name but the words ENCRYPTED or DECRYPTED in front of it... and in the same directory as the parent file..</p>

<p>Now my problem is when it is encrypting the information I am sending it 1024 bytes of information to process and then using BASE64 to avoid encoding issues such as UTF and such.. but in the end of things the 1024 bytes that i am encrypting some how turns into 1388 bytes of data and that is what i get back... Now why is that? </p>

<p>Second problem: It somewhat works besides the problem above maybe its not a problem but I would love to learn why.. Anyways the second problem is also using the encrypt(File) method <strong>As well as decrypt(File)..</strong> When i encrypt the file it somehow adds some extra length to it (Might be directly related to the problem above...), So that when i decrypt the file the file has the text perfectly decrypted but then I get some extra repeat text at the bottom for whatever reason... Like the file will be in order until the end with some repeat information.. So i don't know where these random bytes are coming from but i would love to know..</p>

<p>Anyways, If you find any other problems with my encryption methods please please tell me here, Possibly weak encryption choice? Maybe it is easily being able to be brute-forced? Using an inefficient method? Don't understand something I am trying to accomplish? <strong>Possibly like saving the file with the same name and the same directory.. Is there an easier way?</strong></p>
","<p>Base-64 encoding a string results in a longer string than you started with.</p>

<p>Think of it this way. You had an array with 8 significant bits in each byte. You end up with a string with only 6 of the bits being important (hence the 64 in the name, base-64, because 2^6 = 64) so it has to be longer by roughly 1/3.</p>

<p>Working backwards, AES encryption using the modes you have will add 16 bytes of padding so the result will be 16 bytes longer than what you fed it. That means you give it 1024 and encryption (before the base-64 encoding) will result in a length of 1040 bytes.</p>

<p>The arithmetic works this way:</p>

<pre><code>1024 bytes + 16 padding = 1040 bytes
1040 bytes is not divisible by 3 (as required by base-64) so add 1 byte
1041 bytes * 8 = 8328 bits / 6 = 1388
1388 base-64 characters
</code></pre>

<p><strong>PART 2</strong></p>

<p>The reason you have extra bytes on the end is in this code:</p>

<pre><code>byte[] buff = new byte[1024];
while((read = bIs.read(buff)) != -1)
{
    byte[] enc = encrypt(buff);
    bOs.write(enc, 0, enc.length);
}
</code></pre>

<p>On the last read, it does not read a full 1024 bytes into the buffer. The bytes from the previous read are still there.</p>

<p>The variable 'read' holds the number of bytes actually read. Notice how that variable isn't used. But you are encrypting the entire buffer, not just the first 'read' number of bytes.</p>

<p>You can fix this by passing the value of 'read' into your 'encrypt' method and using the alternate form of the <code>doFinal(buff, 0, read)</code> method to just encrypt what was read.</p>

<p>Change this line:</p>

<pre><code>    byte[] enc = encrypt(buff, read);
</code></pre>

<p>And this one:</p>

<pre><code>public byte[] encrypt(byte[] plainText, int len) throws Exception
</code></pre>

<p>And this one:</p>

<pre><code>byte[] enc = Base64.encodeBase64(cipher.doFinal(plainText, 0, len));
</code></pre>

<p>You will need to do something similar to your decrypt because it may not have 1388 bytes to read the last time and the old bytes will be in the buffer. (You don't have this problem now because you always encrypt 1024 bytes. It's just that some of them are wrong if the file has a short read on the last block.)</p>
","625","<java><encryption><stream><aes><encryption-symmetric>","1","1","1","2013-09-20 17:20:08","18921791","8","2","","","","2013-09-20 16:37:48",""
"5231242","AES encryption/decryption using EquivalentInverseCipher in C","<p>I'm doing project in AES. Has anyone worked in equivalent inverse cipher? I am researching the underlying concept in it and how to implement in C.</p>
","<p>By Equivalent Inverse cipher are you referring to the new operations supplied by the ? i.e.
<a href=""http://software.intel.com/en-us/articles/intel-advanced-encryption-standard-instructions-aes-ni/"" rel=""nofollow noreferrer"">Intel AES-NI (new instruction) library</a>?</p>

<p>I believe it is possible to integrate this with OpenSSL - as per <a href=""http://software.intel.com/en-us/articles/boosting-openssl-aes-encryption-with-intel-ipp/"" rel=""nofollow noreferrer"">these instructions</a>.</p>

<p>The OpenSSL C library is good, but sadly not so well documented. Others have asked before how to <a href=""https://stackoverflow.com/questions/5132939/c-c-how-to-do-aes-decryption-using-openssl"">use it for AES</a>.</p>
","610","<c><aes><encryption><encryption-symmetric>","-2","-1","1","2018-09-01 16:16:48","","1","","472495","","2018-09-01 16:16:48","2011-03-08 10:30:58",""
"50883780","AES CTR OpenSSL command line does not match EVP_aes_128_ctr C code","<p><a href=""https://stackoverflow.com/questions/42847568/ctr-aes256-encrypt-does-not-match-openssl-aes-256-ctr"">CTR-AES256 Encrypt does not match OpenSSL -aes-256-ctr</a>  &lt;-- this post did not help</p>

<p>I tried the following C implementation of Openssl EVP function for AES-128-CTR encryption but the results I am getting are incorrect compared to the command line OpenSSL result.</p>

<p><strong>The odd part is that when I try with a larger size of Plaintext (600 bytes or more), only last 600 bytes of cipher is different between C code and Command line. If required I can paste that result here as well.</strong></p>

<p>C code implementation of AES-128-CTR</p>

<pre><code>static const unsigned char key[16] = {
    0x00, 0x01, 0x02, 0x03, 
    0x04, 0x05, 0x06, 0x07, 
    0x08, 0x09, 0x0a, 0x0b, 
    0x0c, 0x0d, 0x0e, 0x0f, 
};

static const unsigned char iv[16] = {
    0x01, 0x23, 0x45, 0x67, 
    0x89, 0xab, 0xcd, 0xef, 
    0x88, 0x88, 0x88, 0x88, 
    0xC0, 0x00, 0x00, 0x00, 
};

FILE *fp_output = fopen(""cipherCode.bin"", ""wb"");

// Encrypt Plaintext

EVP_CIPHER_CTX *ctx;
int outlen;
unsigned char cipher[size];

if(!(ctx = EVP_CIPHER_CTX_new())) handleErrors();

if(!(EVP_EncryptInit_ex(ctx, EVP_aes_128_ctr(), NULL, key, iv))) handleErrors();

if(!(EVP_EncryptUpdate(ctx, cipher, &amp;outlen, plaintext, size))) handleErrors();

if(!(EVP_EncryptFinal_ex(ctx, cipher + outlen, &amp;outlen))) handleErrors();

/*---Edit----

// EVP_CIPHER_CTX_set_padding(ctx, 0); &lt;-- removed this as it isnt necessary 

-----------*/

EVP_CIPHER_CTX_free(ctx);

// Write result cipher into output file
fwrite((unsigned char *)&amp;cipher[0], outlen, 1, fp_output);
fclose(fp_output);
</code></pre>

<p>OpenSSL command line:</p>

<pre><code>openssl enc -aes-128-ctr -in plaintext.bin -out cipherCL.bin -K 000102030405060708090a0b0c0d0e0f -iv 0123456789abcdef88888888c0000000 -p -nopad
</code></pre>

<p>Same Plaintext, key and IV used for both.</p>

<p>Input:</p>

<pre><code>Plaintext:

0000000 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
</code></pre>

<p>Ouput:</p>

<p>Hexdiff (shortened for clarity):</p>

<pre><code>Visuel HexDiff v 0.0.53 by tTh 2007                             dec   7bits  

0   00 00 00 00 00 00 00 00 10 90 66 01 00 00 00 00              f     

** cipherCode.bin                                    16        0   0%      

0   1e a4 43 3f d8 4c 8c b7 1a e7 f0 af 85 0c d2 c2      C? L

** cipherCL.bin                                   16        0   0%      
</code></pre>
","<p>I recommend you to use this free AES library
<a href=""https://github.com/kokke/tiny-AES-c"" rel=""nofollow noreferrer"">link </a></p>

<p>It's small and portable implementation of AES ECB, CTR and CBC encryption algorithms written in c. It contains everything you need, and it's very simple.
Btw you can override the default key-size of 128 bit with 192 or 256 bit by defining the symbols AES192 or AES256 in <code>aes.h</code>.</p>
","603","<c><encryption><openssl><aes><encryption-symmetric>","0","-1","2","2018-06-18 01:39:59","50901777","3","","5915161","","2018-06-16 22:08:31","2018-06-15 23:28:20",""
"50883780","AES CTR OpenSSL command line does not match EVP_aes_128_ctr C code","<p><a href=""https://stackoverflow.com/questions/42847568/ctr-aes256-encrypt-does-not-match-openssl-aes-256-ctr"">CTR-AES256 Encrypt does not match OpenSSL -aes-256-ctr</a>  &lt;-- this post did not help</p>

<p>I tried the following C implementation of Openssl EVP function for AES-128-CTR encryption but the results I am getting are incorrect compared to the command line OpenSSL result.</p>

<p><strong>The odd part is that when I try with a larger size of Plaintext (600 bytes or more), only last 600 bytes of cipher is different between C code and Command line. If required I can paste that result here as well.</strong></p>

<p>C code implementation of AES-128-CTR</p>

<pre><code>static const unsigned char key[16] = {
    0x00, 0x01, 0x02, 0x03, 
    0x04, 0x05, 0x06, 0x07, 
    0x08, 0x09, 0x0a, 0x0b, 
    0x0c, 0x0d, 0x0e, 0x0f, 
};

static const unsigned char iv[16] = {
    0x01, 0x23, 0x45, 0x67, 
    0x89, 0xab, 0xcd, 0xef, 
    0x88, 0x88, 0x88, 0x88, 
    0xC0, 0x00, 0x00, 0x00, 
};

FILE *fp_output = fopen(""cipherCode.bin"", ""wb"");

// Encrypt Plaintext

EVP_CIPHER_CTX *ctx;
int outlen;
unsigned char cipher[size];

if(!(ctx = EVP_CIPHER_CTX_new())) handleErrors();

if(!(EVP_EncryptInit_ex(ctx, EVP_aes_128_ctr(), NULL, key, iv))) handleErrors();

if(!(EVP_EncryptUpdate(ctx, cipher, &amp;outlen, plaintext, size))) handleErrors();

if(!(EVP_EncryptFinal_ex(ctx, cipher + outlen, &amp;outlen))) handleErrors();

/*---Edit----

// EVP_CIPHER_CTX_set_padding(ctx, 0); &lt;-- removed this as it isnt necessary 

-----------*/

EVP_CIPHER_CTX_free(ctx);

// Write result cipher into output file
fwrite((unsigned char *)&amp;cipher[0], outlen, 1, fp_output);
fclose(fp_output);
</code></pre>

<p>OpenSSL command line:</p>

<pre><code>openssl enc -aes-128-ctr -in plaintext.bin -out cipherCL.bin -K 000102030405060708090a0b0c0d0e0f -iv 0123456789abcdef88888888c0000000 -p -nopad
</code></pre>

<p>Same Plaintext, key and IV used for both.</p>

<p>Input:</p>

<pre><code>Plaintext:

0000000 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
</code></pre>

<p>Ouput:</p>

<p>Hexdiff (shortened for clarity):</p>

<pre><code>Visuel HexDiff v 0.0.53 by tTh 2007                             dec   7bits  

0   00 00 00 00 00 00 00 00 10 90 66 01 00 00 00 00              f     

** cipherCode.bin                                    16        0   0%      

0   1e a4 43 3f d8 4c 8c b7 1a e7 f0 af 85 0c d2 c2      C? L

** cipherCL.bin                                   16        0   0%      
</code></pre>
","<p>I found the issue in my program. I was not defining the cipher variable as static. Now that I define it static, the correct cipher data is written to the file.</p>

<p><strong>Why static worked?</strong>
I called a ciphering function to calculate the cipher and then return the cipher. Since the cipher was not declared as <em>static</em>, it lost its value after exiting the function, thus the data returned was not the same as the data in the cipher. After declaring cipher as <em>static</em>, the value of cipher retained after function call and wrote correct information in the file.</p>
","603","<c><encryption><openssl><aes><encryption-symmetric>","0","0","2","2018-06-18 01:39:59","50901777","3","","5915161","","2018-06-16 22:08:31","2018-06-15 23:28:20",""
"42909763","Encryption of Database Id","<p>I was working on developing a RESTful service where the Id of a particular table in the database needs to be returned to the client for future access to the particular entry in the database. I was advised against using auto increment and returning the id directly and hence I went for encrypting and sending the Id in the following manner instead -</p>

<pre><code>SET @secretKey1 = ""some key"";
SET @secretKey2 = CONCAT(""some other key"", AccountNo);
SET @encryptedAccountNo = TO_BASE64(AES_ENCRYPT(AccountNo, @secretKey1));
SET @encryptedId = TO_BASE64(AES_ENCRYPT(Id, @secretKey));
RETURN CONCAT(@encryptedAccountNo, @encryptedId);
</code></pre>

<p>(Note: The Account Number is a sufficiently random field not exposed to the client)</p>

<p>Would using UUID as the primary key be more appropriate? If so, is using the UUID enough or should that be encrypted too?</p>

<p>Or would you use some other design entirely? </p>

<p>Also, do you have any tips for improving the security or performance aspects of the existing design?</p>
","<p>I think you may have misunderstood that advice....</p>

<p>When you say ""I was advised against using auto increment and returning the id directly"".</p>

<p>You should certainly always CHECK the Id is correct to use server side, before using it;</p>

<p>(i.e. check that the document with that Id belongs to the user who is trying to edit it), </p>

<p>but encrypting the ID itself really serves no useful purpose as your API will have to deal with the encrypted one (unless you are encrypt/decrypt client side, which does nothing for security), so the (malicious) client can just send the encrypted version and have the exact same result...</p>

<p>We cannot comment of the security of your code from looking at a (small) piece of your database logic. If you want proper review you will have to post the code that actually does the interaction...</p>
","602","<mysql><encryption><database-design><encryption-symmetric>","0","0","1","2017-03-20 17:16:06","42909903","4","","","","","2017-03-20 17:09:11",""
"10588331","Symmetric key transfer Vs asymmetric for encryption and signing on mobile device","<p><strong>Scenario</strong></p>

<p>A SOAP web service provides an interface for retrieving documents and data. Security is paramount.</p>

<p>WS-Security is used and both the client and server encrypt and sign the entire SOAP envelope.</p>

<p><strong>Questions</strong></p>

<p>Should the private key used for signing be compiled into the application and stored on the device or should it provided by the server using a key exchange protocol (perhaps after authentication of the user)?</p>

<p>Should the private key for decryption be stored on the device or provided by the server?</p>

<p>Is it realistic to have a unique key for each file that is to be decrypted by the server (if uploading from client) or decrypted by the client (if downloading from server)?</p>
","<p>The entire concept of a private key is defeated if it has to be transmitted from one device to another. Each end of the communication channel must generate their own private keys. Note, that this doesn't mean compiling private keys into an executable, because then everyone with the executable shares a private key, which is obviously not what you want. Each individual device has to use a <a href=""http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator"" rel=""nofollow"">cryptographically secure source of random numbers</a> to generate it's own public/private key pair. Then public keys can be exchanged in the clear, you can use them to exchange session keys (which can be unique for each and every file), private keys can sign, and everybody is happy.</p>

<p>But remember: Never, ever hard code private keys, and never, ever share them with anybody.</p>
","601","<soap><encryption-asymmetric><encryption-symmetric>","2","0","2","2012-05-14 18:07:49","10588704","0","","828547","","2012-05-14 17:46:04","2012-05-14 17:37:32",""
"10588331","Symmetric key transfer Vs asymmetric for encryption and signing on mobile device","<p><strong>Scenario</strong></p>

<p>A SOAP web service provides an interface for retrieving documents and data. Security is paramount.</p>

<p>WS-Security is used and both the client and server encrypt and sign the entire SOAP envelope.</p>

<p><strong>Questions</strong></p>

<p>Should the private key used for signing be compiled into the application and stored on the device or should it provided by the server using a key exchange protocol (perhaps after authentication of the user)?</p>

<p>Should the private key for decryption be stored on the device or provided by the server?</p>

<p>Is it realistic to have a unique key for each file that is to be decrypted by the server (if uploading from client) or decrypted by the client (if downloading from server)?</p>
","<p>Just a couple suggestions:</p>

<p>-You should consider symmetric keys embedded into anything outside your server as public due to reverse engineering (i.e. don't bother even encrypting if the key is out in the wild).</p>

<p>-You should use a per-session symmetric key generated by a secure RNG on the client, and transmitted to the server encrypted with the global asymmetric public key.  Private keys have a shelf-life.</p>

<p>-You can use the session key for all files/streams transferred in that session, but you should use a unique nonce to salt the symmetric-key encryption for each file.  Depending on the encryption mode, using the same key/nonce with more than one stream can leave you vulnerable to XOR'ing the two streams and recovering a mashed-together but unencrypted result.</p>
","601","<soap><encryption-asymmetric><encryption-symmetric>","2","1","2","2012-05-14 18:07:49","10588704","0","","828547","","2012-05-14 17:46:04","2012-05-14 17:37:32",""
"36653374","openssl password decryption using Python","<p>I'm using the following PHP code to encrypt a password and then saving it into a database, I need to be able to decrypt it using Python. </p>

<p>I am successful in decrypting it using PHP but unable to find away
of doing so using Python(I'm using version 2.7.9 if it matters).. </p>

<pre><code>$mypass = ""somepassword""
$encryptionMethod = ""AES-256-CBC"";  
$secretHash = ""25c6c78835b7479b151f2136cd888777"";

$encpass = openssl_encrypt($mypass, $encryptionMethod, $secretHash);
</code></pre>

<p>I have no issues opening and reading from the DB, my only problem is the decryption portion.
Any suggestions would be welcome, thanks.</p>
","<p>Finally found a solution... The code below seems to be working, I'm sure there is a more efficent way of doing that but for now it's doing what I need it to do... Hoping this will help someone else in the future. Please keep in mind it's not a secure way to protect data!    </p>

<pre><code>#!/usr/bin/python
from Crypto.Cipher import AES
import base64
import os
def decryption(encryptedString):
    PADDING = '{'
    DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING)
    #Key is FROM the printout of 'secret' in encryption
    #below is the encryption.
    encryption = encryptedString
    key = ""25c6c78835b7479b151f2136cd888777""
    cipher = AES.new(key)
    decoded = DecodeAES(cipher, encryption)
    #print decoded
    return decoded

enc_message = ""p7OslgBJ5RlTBDG4ZD8HEA""  # in my case it will be the data from the database
enc_message = enc_message + ""==""
data = decryption(enc_message)
data = data.rstrip()
print data
</code></pre>
","601","<php><python><encryption><openssl><encryption-symmetric>","0","0","1","2016-04-18 00:13:20","","4","","2224584","","2016-04-18 00:13:20","2016-04-15 17:27:34",""
"48156085","How to remove mcrypt functions in php","<p>The mcrypt module is deprecated in PHP 7.1, so I have to refactor my old encrypt / decrypt functions with the openssl functions. Actually I found no way doing this.</p>

<p>My major problem is: The script still must be able to decrypt existing crypted data. I have no chance to decrypt with my function und re-crypt the data with a new function again!</p>

<p>Here's my existing code:</p>

<pre><code>function _encrypt($cleartext, $key = ""th1s1sav3rys3cr3tk3y"") {
  if ($cleartext) {
    $td = mcrypt_module_open(MCRYPT_TripleDES, """", MCRYPT_MODE_ECB, """");
    $iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_RAND);
    mcrypt_generic_init($td, $key, $iv);
    $encrypted_data_raw = mcrypt_generic($td, $cleartext);
    $encrypted_data = bin2hex($encrypted_data_raw);        
    mcrypt_generic_deinit($td);
    return $encrypted_data;
  } else {
    return false;
  }
}

function _decrypt($crypttext, $key = ""th1s1sav3rys3cr3tk3y"") {
  if ($crypttext) {
    $td = mcrypt_module_open(MCRYPT_TripleDES, """", MCRYPT_MODE_ECB, """");
    $iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_RAND);
    mcrypt_generic_init($td, $key, $iv);
    $decrypted_data = trim(mcrypt_decrypt(MCRYPT_TripleDES, $key, hex2bin($crypttext), MCRYPT_MODE_ECB, $iv));
    mcrypt_generic_deinit($td);
    return $decrypted_data;
  } else {
    return false;
  }
}
</code></pre>

<p><strong>UPDATE:</strong>
This is the way I tried so solve it - to get the same $iv i took simply the same code as in the old function and try to implement it in the way described here: <a href=""https://stackoverflow.com/questions/41181905/php-mcrypt-encrypt-to-openssl-encrypt-and-openssl-zero-padding-problems"">php: mcrypt_encrypt to openssl_encrypt, and OPENSSL_ZERO_PADDING problems</a></p>

<pre><code>function _encrypt2($cleartext, $key = ""th1s1sav3rys3cr3tk3y"") {
    $td = mcrypt_module_open(MCRYPT_TripleDES, """", MCRYPT_MODE_ECB, """");
    $iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_RAND);        
    $message_padded = $cleartext;
    if (strlen($message_padded) % 8) {
        $message_padded = str_pad($message_padded,
        strlen($message_padded) + 8 - strlen($message_padded) % 8, ""\0"");
    }
    $encrypted_openssl = openssl_encrypt($message_padded, ""DES-EDE3-CBC"", $key, OPENSSL_RAW_DATA | OPENSSL_NO_PADDING, $iv);
    return bin2hex($encrypted_openssl);
}
</code></pre>

<p>I hope you can give me good hints.</p>
","<p>Finally I got the solution - thank you all for your help and support by pushing me into the right direction and asking the right questions. The main thing I missed was ECB-Mode (I took CBC...). So all the stuff with the $iv wasn't really needed.</p>

<p>To complete the answer here my new functions:</p>

<pre><code>function _encrypt_openssl($cleartext, $key = ""th1s1sav3rys3cr3tk3y"") {
   if ($m = strlen($cleartext) %8) {
      $cleartext .= str_repeat(""\0"", 8-$m);
   } 
   $encrypted_openssl = openssl_encrypt($cleartext , ""DES-EDE3-ECB"", $key, OPENSSL_RAW_DATA | OPENSSL_NO_PADDING, null);
   return bin2hex($encrypted_openssl);
}

function _decrypt_openssl($crypttext, $key = ""th1s1sav3rys3cr3tk3y"") {
   return openssl_decrypt(hex2bin($crypttext), 'DES-EDE3-ECB', $key, OPENSSL_RAW_DATA | OPENSSL_NO_PADDING, null);
}
</code></pre>
","600","<php><encryption><openssl><mcrypt><encryption-symmetric>","-3","2","1","2018-01-08 20:46:35","48157491","11","","2969320","","2018-01-08 18:58:55","2018-01-08 18:30:55",""
"23809868","Trying to port old encryption algorithm to C#","<p>I'll start by saying that the following link helped me greatly:</p>

<p><a href=""https://stackoverflow.com/questions/6253363/translating-win32-crypto-api-calls-to-c-sharp-with-system-security-cryptography/6255758#6255758"">Translating Win32 Crypto API calls to C# with System.Security.Cryptography</a></p>

<p>I'm having the same problem he's having, except his fix didn't fix my code.</p>

<p>Here's my old (vb6) code:</p>

<pre><code>Private Const ALG_CLASS_DATA_ENCRYPT = 24576&amp;
Private Const ALG_CLASS_HASH = 32768
Private Const ALG_SID_3DES = 3&amp;
Private Const ALG_SID_SHA1 = 4&amp;
Private Const ALG_TYPE_ANY = 0&amp;
Private Const ALG_TYPE_BLOCK = 1536&amp;
Private Const CALG_3DES = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_3DES)
Private Const CALG_SHA1 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA1)
Private Const CRYPT_SILENT = &amp;H40&amp;
Private Const CRYPT_VERIFYCONTEXT = &amp;HF0000000
Private Const MS_ENHANCED_PROV = ""Microsoft Enhanced Cryptographic Provider v1.0""
Private Const PROV_RSA_FULL = 1&amp;

Private Declare Function CryptAcquireContextApi Lib ""advapi32.dll"" Alias ""CryptAcquireContextA"" (ByRef phProv As Long, ByVal pszContainer As String, ByVal pszProvider As String, ByVal dwProvType As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptCreateHashApi Lib ""advapi32.dll"" Alias ""CryptCreateHash"" (ByVal hProv As Long, ByVal Algid As Long, ByVal hKey As Long, ByVal dwFlags As Long, ByRef phHash As Long) As Long
Private Declare Function CryptDecryptApi Lib ""advapi32.dll"" Alias ""CryptDecrypt"" (ByVal hKey As Long, ByVal hHash As Long, ByVal Final As Long, ByVal dwFlags As Long, ByRef pbData As Byte, ByRef pdwDataLen As Long) As Long
Private Declare Function CryptDeriveKeyApi Lib ""advapi32.dll"" Alias ""CryptDeriveKey"" (ByVal hProv As Long, ByVal Algid As Long, ByVal hBaseData As Long, ByVal dwFlags As Long, ByRef phKey As Long) As Long
Private Declare Function CryptDestroyHashApi Lib ""advapi32.dll"" Alias ""CryptDestroyHash"" (ByVal hHash As Long) As Long
Private Declare Function CryptDestroyKeyApi Lib ""advapi32.dll"" Alias ""CryptDestroyKey"" (ByVal hKey As Long) As Long
Private Declare Function CryptEncryptApi Lib ""advapi32.dll"" Alias ""CryptEncrypt"" (ByVal hKey As Long, ByVal hHash As Long, ByVal Final As Long, ByVal dwFlags As Long, ByRef pbData As Byte, ByRef pdwDataLen As Long, ByVal dwBufLen As Long) As Long
Private Declare Function CryptGetHashParamApi Lib ""advapi32.dll"" Alias ""CryptGetHashParam"" (ByVal hHash As Long, ByVal dwParam As Long, pbData As Any, pdwDataLen As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptHashDataApi Lib ""advapi32.dll"" Alias ""CryptHashData"" (ByVal hHash As Long, ByRef pbData As Byte, ByVal dwDataLen As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptReleaseContextApi Lib ""advapi32.dll"" Alias ""CryptReleaseContext"" (ByVal hProv As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptGetKeyParamApi Lib ""advapi32.dll"" Alias ""CryptGetKeyParam"" (ByVal hKey As Long, ByVal dwParam As Long, ByRef pbData As Byte, ByRef pdwDataLen As Long, dwFlags As Long) As Long

Private Declare Sub CopyMemoryApi Lib ""kernel32"" Alias ""RtlMoveMemory"" (pDst As Any, pSrc As Any, ByVal ByteLen As Long)

Function Encrypt(message As String, Password As String) As String

   If CryptAcquireContextApi(provider, vbNullString, ProviderName, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT) = 0 Then
      Goto Encrypt_Failure
   End-If
   If CryptCreateHashApi(provider, CALG_SHA1, 0&amp;, 0&amp;, hash) = 0 Then
      Goto Encrypt_Failure
   End-If

   buffer = StrConv(Password, vbFromUnicode)
   If CryptHashDataApi(hash, buffer(0), CLng(UBound(buffer) + 1), 0&amp;) = 0 Then
      GoTo Encrypt_Failure
   End If

   If CryptDeriveKeyApi(provider, CALG_3DES, hash, 1&amp;, key) = 0 Then
      key = 0
      GoTo Encrypt_Failure
   End If

   length = Len(message)
   bfrlen = length
   If CryptEncryptApi(key, 0&amp;, 1&amp;, 0&amp;, ByVal 0&amp;, bfrlen, bfrlen) = 0 Then
      GoTo Encrypt_Failure
   End If

   ReDim buffer(bfrlen - 1)

   For i = 0 To length - 1
      buffer(i) = Asc(Mid(message, i + 1, 1))
   Next i

   If CryptEncryptApi(key, 0&amp;, 1&amp;, 0&amp;, buffer(0), length, bfrlen) = 0 Then
      GoTo Encrypt_Failure
   End If

   Call CryptDestroyKeyApi(key)
   Call CryptReleaseContextApi(provider, 0)

   Encrypt = left(StrConv(buffer, vbUnicode), length)

Encrypt_Failure:
   If key Then
      Call CryptDestroyKeyApi(key)
   End If
   If hash Then
      Call CryptDestroyHashApi(hash)
   End If
   If provider Then
      Call CryptReleaseContextApi(provider, 0)
   End If

Exit Function
</code></pre>

<p>Here's the new C# version:</p>

<pre><code>   public byte[] Encrypt(string source, string pass)
    {
        byte[] password = Encoding.UTF8.GetBytes(pass);
        byte[] resultArray = null;
        byte[] streamToEncrypt = Encoding.UTF8.GetBytes(source);

        if(streamToEncrypt.Length % 8 != 0)
        {
            byte[] inputArray = new byte[streamToEncrypt.Length + (8 - (streamToEncrypt.Length % 8))]; //add padding to the end to make the message groups of 8 bytes
            int i = 0;
            foreach (byte element in streamToEncrypt)
            {
                inputArray[i] = element;
                i++;
            }
            streamToEncrypt = inputArray;
        }


        using (TripleDESCryptoServiceProvider prov3des = new TripleDESCryptoServiceProvider())
        {

           prov3des.Mode = CipherMode.CBC;
           prov3des.Padding = PaddingMode.PKCS7;
           prov3des.IV = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }; //8 bytes, zero-ed

            using (PasswordDeriveBytes pdb = new PasswordDeriveBytes(password, null)) //No salt needed here
            {
                prov3des.Key = pdb.CryptDeriveKey(""TripleDES"", ""SHA1"", 168, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });
            }

            ICryptoTransform cTransform = prov3des.CreateEncryptor();
            resultArray = cTransform.TransformFinalBlock(streamToEncrypt,0,streamToEncrypt.Length);

        }

        return resultArray;

    }
</code></pre>

<p>And, like the poster linked above, the hash of the password is the same, and the first 8 bytes of the encrypted byte array are the same.  I've got the initialization vector set to 8 bytes of zero, but I figure if the first 8 bytes of the encrypted data are the same, then the initialization vector must match.  I just can't figure out why the next 8 bytes differ.  Any ideas what I'm doing wrong here?</p>

<p>Thanks!</p>
","<p>If the first 8 bytes are the same and the rest are not, it sounds like you are using a different form of feedback than the original algorithm.  Try using different values of CipherMode and see if one of them gives you a match.</p>
","597","<c#><vb6-migration><encryption-symmetric><3des>","1","1","2","2014-05-22 17:07:34","23813160","2","","-1","","2017-05-23 10:32:23","2014-05-22 14:34:40",""
"23809868","Trying to port old encryption algorithm to C#","<p>I'll start by saying that the following link helped me greatly:</p>

<p><a href=""https://stackoverflow.com/questions/6253363/translating-win32-crypto-api-calls-to-c-sharp-with-system-security-cryptography/6255758#6255758"">Translating Win32 Crypto API calls to C# with System.Security.Cryptography</a></p>

<p>I'm having the same problem he's having, except his fix didn't fix my code.</p>

<p>Here's my old (vb6) code:</p>

<pre><code>Private Const ALG_CLASS_DATA_ENCRYPT = 24576&amp;
Private Const ALG_CLASS_HASH = 32768
Private Const ALG_SID_3DES = 3&amp;
Private Const ALG_SID_SHA1 = 4&amp;
Private Const ALG_TYPE_ANY = 0&amp;
Private Const ALG_TYPE_BLOCK = 1536&amp;
Private Const CALG_3DES = (ALG_CLASS_DATA_ENCRYPT Or ALG_TYPE_BLOCK Or ALG_SID_3DES)
Private Const CALG_SHA1 = (ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA1)
Private Const CRYPT_SILENT = &amp;H40&amp;
Private Const CRYPT_VERIFYCONTEXT = &amp;HF0000000
Private Const MS_ENHANCED_PROV = ""Microsoft Enhanced Cryptographic Provider v1.0""
Private Const PROV_RSA_FULL = 1&amp;

Private Declare Function CryptAcquireContextApi Lib ""advapi32.dll"" Alias ""CryptAcquireContextA"" (ByRef phProv As Long, ByVal pszContainer As String, ByVal pszProvider As String, ByVal dwProvType As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptCreateHashApi Lib ""advapi32.dll"" Alias ""CryptCreateHash"" (ByVal hProv As Long, ByVal Algid As Long, ByVal hKey As Long, ByVal dwFlags As Long, ByRef phHash As Long) As Long
Private Declare Function CryptDecryptApi Lib ""advapi32.dll"" Alias ""CryptDecrypt"" (ByVal hKey As Long, ByVal hHash As Long, ByVal Final As Long, ByVal dwFlags As Long, ByRef pbData As Byte, ByRef pdwDataLen As Long) As Long
Private Declare Function CryptDeriveKeyApi Lib ""advapi32.dll"" Alias ""CryptDeriveKey"" (ByVal hProv As Long, ByVal Algid As Long, ByVal hBaseData As Long, ByVal dwFlags As Long, ByRef phKey As Long) As Long
Private Declare Function CryptDestroyHashApi Lib ""advapi32.dll"" Alias ""CryptDestroyHash"" (ByVal hHash As Long) As Long
Private Declare Function CryptDestroyKeyApi Lib ""advapi32.dll"" Alias ""CryptDestroyKey"" (ByVal hKey As Long) As Long
Private Declare Function CryptEncryptApi Lib ""advapi32.dll"" Alias ""CryptEncrypt"" (ByVal hKey As Long, ByVal hHash As Long, ByVal Final As Long, ByVal dwFlags As Long, ByRef pbData As Byte, ByRef pdwDataLen As Long, ByVal dwBufLen As Long) As Long
Private Declare Function CryptGetHashParamApi Lib ""advapi32.dll"" Alias ""CryptGetHashParam"" (ByVal hHash As Long, ByVal dwParam As Long, pbData As Any, pdwDataLen As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptHashDataApi Lib ""advapi32.dll"" Alias ""CryptHashData"" (ByVal hHash As Long, ByRef pbData As Byte, ByVal dwDataLen As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptReleaseContextApi Lib ""advapi32.dll"" Alias ""CryptReleaseContext"" (ByVal hProv As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptGetKeyParamApi Lib ""advapi32.dll"" Alias ""CryptGetKeyParam"" (ByVal hKey As Long, ByVal dwParam As Long, ByRef pbData As Byte, ByRef pdwDataLen As Long, dwFlags As Long) As Long

Private Declare Sub CopyMemoryApi Lib ""kernel32"" Alias ""RtlMoveMemory"" (pDst As Any, pSrc As Any, ByVal ByteLen As Long)

Function Encrypt(message As String, Password As String) As String

   If CryptAcquireContextApi(provider, vbNullString, ProviderName, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT) = 0 Then
      Goto Encrypt_Failure
   End-If
   If CryptCreateHashApi(provider, CALG_SHA1, 0&amp;, 0&amp;, hash) = 0 Then
      Goto Encrypt_Failure
   End-If

   buffer = StrConv(Password, vbFromUnicode)
   If CryptHashDataApi(hash, buffer(0), CLng(UBound(buffer) + 1), 0&amp;) = 0 Then
      GoTo Encrypt_Failure
   End If

   If CryptDeriveKeyApi(provider, CALG_3DES, hash, 1&amp;, key) = 0 Then
      key = 0
      GoTo Encrypt_Failure
   End If

   length = Len(message)
   bfrlen = length
   If CryptEncryptApi(key, 0&amp;, 1&amp;, 0&amp;, ByVal 0&amp;, bfrlen, bfrlen) = 0 Then
      GoTo Encrypt_Failure
   End If

   ReDim buffer(bfrlen - 1)

   For i = 0 To length - 1
      buffer(i) = Asc(Mid(message, i + 1, 1))
   Next i

   If CryptEncryptApi(key, 0&amp;, 1&amp;, 0&amp;, buffer(0), length, bfrlen) = 0 Then
      GoTo Encrypt_Failure
   End If

   Call CryptDestroyKeyApi(key)
   Call CryptReleaseContextApi(provider, 0)

   Encrypt = left(StrConv(buffer, vbUnicode), length)

Encrypt_Failure:
   If key Then
      Call CryptDestroyKeyApi(key)
   End If
   If hash Then
      Call CryptDestroyHashApi(hash)
   End If
   If provider Then
      Call CryptReleaseContextApi(provider, 0)
   End If

Exit Function
</code></pre>

<p>Here's the new C# version:</p>

<pre><code>   public byte[] Encrypt(string source, string pass)
    {
        byte[] password = Encoding.UTF8.GetBytes(pass);
        byte[] resultArray = null;
        byte[] streamToEncrypt = Encoding.UTF8.GetBytes(source);

        if(streamToEncrypt.Length % 8 != 0)
        {
            byte[] inputArray = new byte[streamToEncrypt.Length + (8 - (streamToEncrypt.Length % 8))]; //add padding to the end to make the message groups of 8 bytes
            int i = 0;
            foreach (byte element in streamToEncrypt)
            {
                inputArray[i] = element;
                i++;
            }
            streamToEncrypt = inputArray;
        }


        using (TripleDESCryptoServiceProvider prov3des = new TripleDESCryptoServiceProvider())
        {

           prov3des.Mode = CipherMode.CBC;
           prov3des.Padding = PaddingMode.PKCS7;
           prov3des.IV = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 }; //8 bytes, zero-ed

            using (PasswordDeriveBytes pdb = new PasswordDeriveBytes(password, null)) //No salt needed here
            {
                prov3des.Key = pdb.CryptDeriveKey(""TripleDES"", ""SHA1"", 168, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });
            }

            ICryptoTransform cTransform = prov3des.CreateEncryptor();
            resultArray = cTransform.TransformFinalBlock(streamToEncrypt,0,streamToEncrypt.Length);

        }

        return resultArray;

    }
</code></pre>

<p>And, like the poster linked above, the hash of the password is the same, and the first 8 bytes of the encrypted byte array are the same.  I've got the initialization vector set to 8 bytes of zero, but I figure if the first 8 bytes of the encrypted data are the same, then the initialization vector must match.  I just can't figure out why the next 8 bytes differ.  Any ideas what I'm doing wrong here?</p>

<p>Thanks!</p>
","<p>There's actually a very simple solution, although it's not at all obvious.  You have a block of code which says ""If this data isn't exactly a multiple of 8, pad it.""  However, this is <em>changing</em> the value you're encrypting, so you get a different result.</p>

<p>Simply remove the whole <code>if(streamToEncrypt.Length.Dump(""Length"") % 8 != 0) {}</code> block and you'll get the expected result.</p>
","597","<c#><vb6-migration><encryption-symmetric><3des>","1","1","2","2014-05-22 17:07:34","23813160","2","","-1","","2017-05-23 10:32:23","2014-05-22 14:34:40",""
"31771490","Python gnupg, symmetric encryption file size bigger than if using gpg on command line","<p>I have a 85mb tar.gz file. When I encrypt this using gpg the encrypted file size is 85 mb.</p>

<p>When trying to encrypt using Python gnupg encrypted file size is 115 mb.
That is very strange since gnupg just uses sub process to gpg to send arguments. Still there is big difference in file size.
Tried in Linux and win7.
What might the problem be?</p>

<p>Python 2.7.3 on linux
gnupg 0.3.6</p>

<p>codes below</p>

<pre><code>gpg -c --cipher-algo AES256 temp.tar.gz &lt;&lt;&lt; command line code.
</code></pre>



<pre><code>with open(outputfolder+tarname, 'rb') as f:     
        status = gpg.encrypt_file(f, recipients=None, symmetric=""AES256"", output=outputfolder+tarname+'.gpg', passphrase='pass')
</code></pre>
","<p>By default the encrypted file is created with ASCII armored, not binary, output. Take a look at the first few lines of the file produced:</p>

<pre>
-----BEGIN PGP MESSAGE-----
Version: GnuPG v1

jA0ECQMCeWOyFPPGpLVg0u0Br8cioBHzZB38LC5o14PS1I2MZsxNPwVM2tnjsd41
FXz0m28S7LERQ2Cld3Ud7tRCgcVtRtGwKCdgDHZRWDr2S7wNHgTlvBU91In8+HF9
....
</pre>

<p>Binary output can be generated by supplying <code>armor=False</code> to <code>encrypt_file()</code>:</p>

<pre><code>with open(outputfolder+tarname, 'rb') as f:     
        status = gpg.encrypt_file(f, recipients=None, symmetric=""AES256"", output=outputfolder+tarname+'.gpg', passphrase='pass', armor=False)
</code></pre>

<p>Now the output should be binary and the file size should be much closer to that of the original file.</p>

<p>Reference: <a href=""http://pythonhosted.org/python-gnupg/#encryption"" rel=""nofollow"">http://pythonhosted.org/python-gnupg/#encryption</a></p>
","597","<python><encryption><gnupg><encryption-symmetric>","0","0","1","2016-03-28 17:47:26","","0","","2895119","","2015-08-02 12:47:49","2015-08-02 11:34:21",""
"13537737","ASP.net MachineKey.Encode Changing Machine Key","<p>The new MachineKey.Encode/MachineKey.Decode features in .Net seem to make encryption much easier.</p>

<p>My question is, in the event that you need to modify your MachineKey on a routine basis, does it need to be a 3 step process?</p>

<ol>
<li>Decrypt and store existing data</li>
<li>Modify the MachineKey</li>
<li>Re-encrypt and store the encrypted data</li>
</ol>

<p>Or is there a way to call MachineKey.Encrypt/.Decrypt using two different keys?</p>
","<p>How long are you trying to store data for? These methods are typically used to protect round-trip data or values in cookies, not for long term data storage. </p>

<p>If you're using ASP.NET 4.5, MachineKey.Encode() and MachineKey.Decode() have been <a href=""http://blogs.msdn.com/b/webdev/archive/2012/10/23/cryptographic-improvements-in-asp-net-4-5-pt-2.aspx"" rel=""nofollow"">deprecated</a> in favor of <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.dataprotector"" rel=""nofollow"">DataProtector</a></p>
","595","<asp.net><encryption><encryption-symmetric>","0","1","1","2012-11-24 05:21:54","13538524","0","","","","","2012-11-24 02:33:03",""
"13119416","Windows.security.cryptography API fails due to key length issues","<p>I've been trying to use the Windows.security.cryptography API in Windows 8 (Windows store app) for basic symmetric key encryption of a string (for now).</p>

<p>Looked into various samples online, but in all of them, the code fails with an unexpected key length exception for me.</p>

<pre><code>static byte[] cKey = { (byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E' };
        static byte[] cIV = { (byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E' };
        public static string Encrypt(String guidOriginal)
        {
            IBuffer encrypted;
            IBuffer buffer;
            IBuffer iv = null;
            SymmetricKeyAlgorithmProvider algorithm = SymmetricKeyAlgorithmProvider.OpenAlgorithm(""AES_CBC_PKCS7"");
            IBuffer keymaterial = CryptographicBuffer.CreateFromByteArray(cKey);  
            CryptographicKey key = algorithm.CreateSymmetricKey(keymaterial);
            iv = CryptographicBuffer.CreateFromByteArray(cIV);  
            System.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding();
            buffer = CryptographicBuffer.CreateFromByteArray( encoding.GetBytes(guidOriginal));
            encrypted = Windows.Security.Cryptography.Core.CryptographicEngine.Encrypt(key, buffer, iv);
            return CryptographicBuffer.EncodeToBase64String(encrypted);
        }
</code></pre>

<p>^^ The above is one of the codes I tried (used a modified version of the code from <a href=""http://social.msdn.microsoft.com/Forums/en-ZA/winappswithcsharp/thread/b541a08a-d3cd-4e21-8d21-7ed80749cb23"" rel=""nofollow"">http://social.msdn.microsoft.com/Forums/en-ZA/winappswithcsharp/thread/b541a08a-d3cd-4e21-8d21-7ed80749cb23</a> ), which fails at </p>

<pre><code> CryptographicKey key = algorithm.CreateSymmetricKey(keymaterial);
</code></pre>

<p>With the exception: <strong>ArgumentException</strong></p>
","<p>You must ensure your key block is exact 16,24 or 32 bytes. </p>

<p>Please refer to the wiki.
<a href=""http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""nofollow"">http://en.wikipedia.org/wiki/Advanced_Encryption_Standard</a></p>

<blockquote>
  <p>AES is based on a design principle known as a substitution-permutation network, and is fast in both software and hardware.[6] Unlike its predecessor DES, AES does not use a Feistel network. AES is a variant of Rijndael which has a fixed block size of 128 bits, and a key size of 128, 192, or 256 bits. By contrast, the Rijndael specification per se is specified with block and key sizes that may be any multiple of 32 bits, both with a minimum of 128 and a maximum of 256 bits.</p>
</blockquote>
","592","<.net><encryption><windows-8><encryption-symmetric>","1","1","1","2012-11-01 09:38:39","","1","","","","","2012-10-29 10:05:16",""
"37668849","What is the length in bytes of AesCryptoServiceProvider GenerateIV()?","<pre><code>AesCryptoServiceProvider aesAlg = new AesCryptoServiceProvider()
var iv = aesAlg.GenerateIV();
</code></pre>

<p>Do you know what the length of iv? Is it fixed with byte[16]?</p>

<p>Another question is: what is the length requirement of initialization vector of AesCryptoServiceProvider?</p>
","<p>The iv for AES is the same as the block size which is 128-bits/16-bytes.</p>

<p>AES has one fixed block size, and three key sizes: 128-bits, 192-bits and 256-bits.</p>
","585","<c#><encryption><aes><encryption-symmetric><initialization-vector>","2","1","1","2016-06-07 07:11:09","37668968","0","","1816580","","2016-06-07 07:11:09","2016-06-07 00:41:55",""
"35926565","Why is this AES encryption code always returning a different cipher text?","<blockquote>
  <h3>Note:</h3>
  
  <p>The following code sample is for demonstration purposes only and implements an insecure scheme. If you are looking for a secure scheme have a look at <a href=""https://stackoverflow.com/a/10177020/40347"">https://stackoverflow.com/a/10177020/40347</a> </p>
</blockquote>

<p>I am using the AESCryptoServiceProvider class for testing some encryption concepts. So far in all the examples and articles out there they generate a random key to use for encryption and then immediately for decryption. Sure, it works fine because you are using the key right there, but if you encrypt, save the text and at a later time you want to decrypt it you will need the SAME key. And for that purpose also the same IV.</p>

<p>Now, in this code I am using the same key and IV on multiple passes, every time I run the batch that batch gives the same result (as expected). But then I close the test application and rerun the same code without change and the resulting (Base64-encoded) cypher text is different for the same input parameters, why?</p>

<p>I ""saved"" one of the B64-encoded cyphers from a previous run and fed it to the TestDecrypt method and as expected, it threw a cryptographic exception mentioning something about padding though I am sure it has to do with the fact that somehow for the same Key,IV, plain text and parameters it gives a different result on every separate run of the application.</p>

<p>For encrypting I have this:</p>

<pre><code>    public string Test(string password, Guid guid, string text)
    {
        const int SaltSize = 16;

        string b64Cryptogram;
        MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider();
        Rfc2898DeriveBytes pwbytes = new Rfc2898DeriveBytes(password, SaltSize);

        // Block 128-bits Key 128/192/256 bits (16/24/32 bytes)
        using (AesCryptoServiceProvider aes = new AesCryptoServiceProvider())
        {
            aes.Padding = PaddingMode.PKCS7;
            aes.Mode = CipherMode.CBC;
            //aes.IV = pwbytes.GetBytes(aes.BlockSize / 8);
            aes.IV = md5.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
            aes.Key = guid.ToByteArray();

            ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);
            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {

                        //Write all data to the stream.
                        swEncrypt.Write(text);
                    }
                    b64Cryptogram = Convert.ToBase64String(msEncrypt.ToArray());
                }
            }
            Console.WriteLine(""E: {0}"", b64Cryptogram);
            aes.Clear();
        }
        return b64Cryptogram;
    }
</code></pre>

<p>Notice I am not using the RFC2898DeriveBytes because it will randomly derive something I will no longer remember :) The idea of encrypting it is precisely that I KNOW what I used to encrypt it.</p>

<p>The decryption method looks like this:</p>

<pre><code>    public void TestDecrypt(string password, Guid guid, string ciphertextB64)
    {
        const int SaltSize = 16;

        byte[] cipher = Convert.FromBase64String(ciphertextB64);
        string plaintext;

        MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider();
        Rfc2898DeriveBytes pwbytes = new Rfc2898DeriveBytes(password, SaltSize);

        // Block 128-bits Key 128/192/256 bits (16/24/32 bytes)
        using (AesCryptoServiceProvider aes = new AesCryptoServiceProvider())
        {
            aes.Padding = PaddingMode.PKCS7;
            aes.Mode = CipherMode.CBC;
            //aes.IV = pwbytes.GetBytes(aes.BlockSize / 8);
            aes.IV = md5.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
            aes.Key = guid.ToByteArray();

            ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);
            using (MemoryStream msEncrypt = new MemoryStream(cipher))
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader swEncrypt = new StreamReader(csEncrypt))
                    {
                        plaintext = swEncrypt.ReadToEnd();
                    }
                }
            }
            Console.WriteLine(""D: {0}"", plaintext);
            aes.Clear();
        }
    }
</code></pre>

<p>Now, just put that in a console application and run it. Then exit and run it again and you will see that for the same Mode, Padding, IV, Key and plain text data, the output cipher will not be the same on every application run. They will be the same provided you run the method repeatedly in the same run of the application.</p>

<p>In case it was not obvious, here is the console code I used to test:</p>

<pre><code>        Guid guid = Guid.NewGuid();
        string plain = ""Text to be encrypted 123458970"";
        string password = ""This is a test of the emergency broadcast system"";

        TestDecrypt(password, guid, Test(password, guid, plain));
        TestDecrypt(password, guid, Test(password, guid, plain));
        Test(password, guid, plain);
        Test(password, guid, plain);
        Test(plain, guid, password);
        TestDecrypt(password, guid, ""W4Oi0DrKnRpxFwtE0xVbYJwWgcA05/Alk6LrJ5XIPl8="");
    }    
</code></pre>
","<p>The solution here is to pull in from a stored or constant <code>Guid</code>. Calling </p>

<pre><code>Guid.NewGuid();
</code></pre>

<p>will return a different result every time. From the docs:</p>

<blockquote>
  <blockquote>
    <p><sup>This is a convenient static method that you can call to get a new Guid. The method wraps a call to the Windows CoCreateGuid function. The returned Guid is guaranteed to not equal Guid.Empty.</sup></p>
  </blockquote>
</blockquote>

<p>Alternatively when testing you can use Guid.Empty which will return all zeroes.</p>

<p>Or, you can store it as such using its string constructor overload:</p>

<pre><code>var guid = new Guid(""0f8fad5b-d9cb-469f-a165-70867728950e"");
</code></pre>
","584","<c#><encryption><aes><encryption-symmetric><rijndael>","0","2","1","2016-03-14 12:08:52","","13","","-1","","2017-05-23 12:23:48","2016-03-10 20:25:59",""
"4082223","Something missing in iPhone/PHP encryption/decryption","<p>I have been trying to implement some encryption between an iPhone app and a PHP web service. It's not working however. It seems like the first half of the text is NOT decrypted while the second half is decrypted just fine. What should I do?</p>

<p>The PHP encryption method is as follows:</p>

<pre><code>function decrypt($str, $iv) {
    $iv .= ""00000000"";
    $str = base64_decode($str);
    return self::decrypt_data($str, $iv, self::secret_key);
}
</code></pre>

<p>The iPhone stuff that encrypts the text uses a CryptoHelper class like this:</p>

<pre><code>NSString *encrypted = [[CryptoHelper sharedInstance] encryptString:dataString];
</code></pre>

<p>The CryptoHelper class can be seen at <a href=""http://pastie.org/1267796"" rel=""nofollow noreferrer"">http://pastie.org/1267796</a>.</p>
","<p>Try a simple example where you send a known Base64 encoded string from the iPhone app to PHP.</p>

<p>Compare the known valid string to what PHP is getting. I know recently, when trying to do an Ajax post from a script to PHP, we were having trouble with some characters (specifically <code>+</code>) being converted to spaces by PHP because it was doing a URL decode automatically. We had to switch all <code>+</code> to their <code>%</code> (URL-encoded <code>%2B</code>) equivalent. This fixed the problem for us.</p>
","583","<php><objective-c><encryption><encryption-symmetric>","0","1","1","2016-12-29 15:30:07","","0","","63550","","2016-12-29 15:28:08","2010-11-02 21:24:08",""
"12413515","Php Blowfish decryption scrambling data","<p>I am trying to encrypt an xml string, save it somewhere, and then decrypt it later (using blowfish in cbc mode). </p>

<p>When I decrypt the string, it scrambles the first 4 characters.</p>

<pre><code>$text = ""&lt;?xml version=""1.0"" encoding=""ISO-8859-1""?&gt; ...."";
$td = mcrypt_module_open('blowfish', '', 'cbc', '');
$iv = 'kd84h28v';
$ks = mcrypt_enc_get_key_size($td);
$key = substr(md5('randomString1234'), 0, $ks);
mcrypt_generic_init($td, $key, $iv);
$cypher = mcrypt_generic($td, $text);
print mdecrypt_generic($td, $cypher);

# prints: çGÖºÌrsion=""1.0"" encoding=""ISO-8859-1""?&gt;
</code></pre>

<p>I would use <code>ecb</code> mode instead - which decrypts fine - except the current php implementation ignores the iv.</p>

<p>Any ideas what I'm doing wrong?</p>
","<p>From the <a href=""http://php.net/mdecrypt_generic"" rel=""nofollow"">manual</a>:</p>

<blockquote>
  <p>It is very important to reinitialize the encryption buffer with
  mcrypt_generic_init() before you try to decrypt the data.</p>
</blockquote>

<p>So you probably need something like this:</p>

<pre><code>mcrypt_generic_init($td, $key, $iv);
$cypher = mcrypt_generic($td, $text);
mcrypt_generic_deinit($td);
mcrypt_generic_init($td, $key, $iv);
print mdecrypt_generic($td, $cypher);
</code></pre>
","573","<php><blowfish><encryption-symmetric>","1","0","1","2012-09-28 12:45:57","12413810","1","0","1240268","","2012-09-28 12:45:57","2012-09-13 19:34:13",""
"3445821","Simple XOR a message (Javascript/Tcl)?","<p>I need the username/password to be scrambled at the client-side before sending it over via HTTP GET/POST. And the server will decode it with Tcl, before the checks against database.</p>

<p>Currently I'm thinking about using JavaScript for the client-side. Java Applet will also do.</p>

<p>Is there any way, that I can easily achieve it, using Simple XOR or any other methods? (Examples would be much appreciated)</p>

<p>I've found the few samples in C/Python/.NET/Java... But not in JavaScript and Tcl.</p>

<p>SSL is not an option to use, sadly.</p>
","<p>If ssl is not an option, then I suggest the following scheme, which many sites use instead of SSL:</p>

<ol>
<li>On the client side, combine the user name and password, then calculate a hash from it (MD5 is a popular choice).</li>
<li>Send the user's name and hash over to the server</li>
<li>On the server side, retrieve the password for that user from the database.</li>
<li>From the user name and password, calculate the hash and compare it with the client's hash. If the two match, then the passwords match.</li>
<li>For added security, add a little random text to the user+password mix. This random text, AKA the ""salt"", must be known on both the client and server sides. </li>
</ol>

<p>Here is a suggestion on how to calculate the hash using MD5:</p>

<pre><code>package require md5

proc calculateHash {user password salt} {
    return md5:md5 -hex ""$user:$salt:$password""
}
</code></pre>

<p>How to use it:</p>

<pre><code>set user ""johnny""
set password ""begood2mama""
set salt ""myDog_is_meaner_than_yourDog""

set hash [calculateHash $user $password $salt]
</code></pre>
","564","<javascript><tcl><encryption-symmetric>","0","1","2","2010-09-10 03:30:18","3449866","0","","","","","2010-08-10 03:26:31",""
"3445821","Simple XOR a message (Javascript/Tcl)?","<p>I need the username/password to be scrambled at the client-side before sending it over via HTTP GET/POST. And the server will decode it with Tcl, before the checks against database.</p>

<p>Currently I'm thinking about using JavaScript for the client-side. Java Applet will also do.</p>

<p>Is there any way, that I can easily achieve it, using Simple XOR or any other methods? (Examples would be much appreciated)</p>

<p>I've found the few samples in C/Python/.NET/Java... But not in JavaScript and Tcl.</p>

<p>SSL is not an option to use, sadly.</p>
","<p>superNobody,</p>

<p>You should consider alternatives to storing plain-text passwords in the database.  See:</p>

<ul>
<li><a href=""http://www.codinghorror.com/blog/2007/09/youre-probably-storing-passwords-incorrectly.html"" rel=""nofollow noreferrer"">http://www.codinghorror.com/blog/2007/09/youre-probably-storing-passwords-incorrectly.html</a></li>
</ul>

<p>Instead of encoding the password in Javascript, then decoding the password in Tcl to compare with the database, you should consider SHA1 hashing in Javascript, and storing SHA1 hashed values in the database.</p>

<p>There are several available examples of a SHA1 hash function in javascript (just Google 'sha1 javascript').  The tcllib Tcl library has SHA1 support. </p>

<p>As HaiVu mentioned, you should also consider hashing / storing more than just a straight password hash, but instead use something like SHA1( username + websitename + password ).  You can calculate this on the client in Javascript, and store it in the db.</p>
","564","<javascript><tcl><encryption-symmetric>","0","1","2","2010-09-10 03:30:18","3449866","0","","","","","2010-08-10 03:26:31",""
"17989180","How to use Enterprise Library 4.1 Symmetric key Provider in Azure","<p>We have legacy ASP.NET application which uses Enterprise Library 4.1 Symmetric Key provider where key is stored on physical file as shown on config below. It uses <strong>machine</strong> key protection.</p>

<pre><code>&lt;symmetricCryptoProviders&gt;
              &lt;add algorithmType=""System.Security.Cryptography.RijndaelManaged, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""
                protectedKeyFilename=""F:\wwwroot2\MSEntLib3.1\key\EncryptionKey.key""
                protectedKeyProtectionScope=""Machine"" type=""Microsoft.Practices.EnterpriseLibrary.Security.Cryptography.SymmetricAlgorithmProvider, Microsoft.Practices.EnterpriseLibrary.Security.Cryptography, Version=3.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a""
                name=""RijndaelManaged"" /&gt;
            &lt;/symmetricCryptoProviders&gt;
</code></pre>

<p>I deployed to Azure and application throws the error ""EncryptionKey.key"" is not found. Could someone please help how we keep using the Enterprise Library Crypto in azure?</p>

<p>Are there any option where we can create a key and use on any web servers including Azure Web Roles?</p>

<p>Thanks</p>
","<p>The symmetric cryptography provider keys are stored in a file that is referenced using a full physical file path and name in the application configuration file and protected by DPAPI encryption, just like shown in your config. Because DPAPI is not available in Windows Azure, using the Enterprise Library symmetric cryptography providers out of the box won't work. </p>

<p>However, you can consider creating a custom symmetric algorithm provider for use with the Enterprise Library Crypto block. This provider could use the .NET Cryptographic Service Providers to implement encryption and as a best practice store the keys in encrypted format, performing the encryption offline, and storing them in Windows Azure Blob storage. For more information on this approach, see <a href=""http://www.microsoft.com/windowsazure/learn/real-world-guidance/field-notes/using-cert-based-encryption/"" rel=""nofollow"">Using Certificate-Based Encryption in Windows Azure Applications</a> and <a href=""http://blogs.msdn.com/b/sqlazure/archive/2010/09/07/10058942.aspx"" rel=""nofollow"">this post</a> on securing connection strings in Windows Azure. </p>
","559","<azure><enterprise-library><azure-web-roles><encryption-symmetric>","0","1","1","2013-08-14 17:28:12","","0","","656348","","2013-08-08 06:10:15","2013-08-01 08:45:24",""
"42673173","Getting BadPaddingException while doing a Sqoop import with encrypted password file","<p>I encrypt file with <code>openssl</code> then put it on HDFS, I used AES/ECB, 128 bits and salt option, and with some research I find out openssl uses PKCS5 padding as default which are all defaults in <a href=""https://apache.googlesource.com/sqoop/+/refs/heads/trunk/src/java/org/apache/sqoop/util/password/CredentialProviderPasswordLoader.java"" rel=""nofollow noreferrer"">CryptoFileLoader class</a>. Here is my encryption process:</p>

<pre><code># echo -n ""password"" &gt; .pw
# openssl enc -aes-128-ecb -salt -in .pw -out .pw.enc
# hdfs dfs -put .pw.enc /user/user1/
</code></pre>

<p>Sqoop version is 1.4.6</p>

<p>Command:</p>

<pre><code>sqoop import \
-Dorg.apache.sqoop.credentials.loader.class=org.apache.sqoop.util.password.CryptoFileLoader \
-Dorg.apache.sqoop.credentials.loader.crypto.passphrase=sqoop \
--connect jdbc:oracle:thin:@host/database \
--username user1 \
--password-file /user/user1/.pw.enc \
--table db.table1 \
--hive-import \
--hive-overwrite \
--hive-table hivedb.table1 \
--hive-drop-import-delims
</code></pre>

<p>which gives: </p>

<pre><code>17/03/08 15:10:37 WARN tool.BaseSqoopTool: Failed to load password file
java.io.IOException: Can't decrypt the password
        at org.apache.sqoop.util.password.CryptoFileLoader.loadPassword(CryptoFileLoader.java:151)
        at org.apache.sqoop.util.CredentialsUtil.fetchPasswordFromLoader(CredentialsUtil.java:81)
        at org.apache.sqoop.util.CredentialsUtil.fetchPassword(CredentialsUtil.java:66)
        at org.apache.sqoop.tool.BaseSqoopTool.applyCredentialsOptions(BaseSqoopTool.java:1042)
        at org.apache.sqoop.tool.BaseSqoopTool.applyCommonOptions(BaseSqoopTool.java:997)
        at org.apache.sqoop.tool.ImportTool.applyOptions(ImportTool.java:875)
        at org.apache.sqoop.tool.SqoopTool.parseArguments(SqoopTool.java:435)
        at org.apache.sqoop.Sqoop.run(Sqoop.java:131)
        at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:70)
        at org.apache.sqoop.Sqoop.runSqoop(Sqoop.java:179)
        at org.apache.sqoop.Sqoop.runTool(Sqoop.java:218)
        at org.apache.sqoop.Sqoop.runTool(Sqoop.java:227)
        at org.apache.sqoop.Sqoop.main(Sqoop.java:236)
Caused by: javax.crypto.BadPaddingException: Given final block not properly padded
        at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:966)
        at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:824)
        at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:436)
        at javax.crypto.Cipher.doFinal(Cipher.java:2165)
        at org.apache.sqoop.util.password.CryptoFileLoader.loadPassword(CryptoFileLoader.java:149)
        ... 12 more
Error while loading password file: Can't decrypt the password
</code></pre>

<p>I tried manually giving the other CryptoFileLoader parameters too and also passing local file to the <code>--password-file</code> .</p>

<p>I can decrypt the file back successfully with <code>openssl</code>. I can't decrypt with Java program(?)</p>

<p>I saw there is an issue with padding but I didn't know what it is and how to encrypt the file with a certain padding method or whatever else to do, I'm not experienced with encryption.</p>

<p>There is also <code>org.apache.sqoop.credentials.loader.crypto.iterations</code> parameter in the class which indicates number of PBKDF2 iterations but I don't know if it changes anything.</p>

<p>Thanks for any help.</p>
","<p>I am not expert with Sqoop and Hadoop but starting from your exception</p>

<pre><code>CryptoFileLoader.loadPassword(CryptoFileLoader.java:151)
</code></pre>

<p>I gave a look at the source code of <a href=""https://apache.googlesource.com/sqoop/+/refs/heads/trunk/src/java/org/apache/sqoop/util/password/CryptoFileLoader.java"" rel=""nofollow noreferrer"">CryptoFileLoader.java</a></p>

<p>It seems to me that things are a bit different from what you do: the password is stored in an encrypted file using the <strong>PBKDF2</strong> algorithm, which is not equivalent to apply AES-128-ECB. From <a href=""https://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow noreferrer"">wikipedia</a>:</p>

<blockquote>
  <p>PBKDF2 applies a pseudorandom function, such as hash-based message authentication code (HMAC), to the input password or passphrase along with a salt value and repeats the process many times to produce a derived key, which can then be used as a cryptographic key in subsequent operations. The added computational work makes password cracking much more difficult, and is known as key stretching.</p>
</blockquote>

<p>There is no way to do PBKDF2 from Openssl command line. I made a small test using Java, it could be an alternative</p>

<pre><code>import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Cipher;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class Test {

    /*Default is AES in electronic code book with padding.*/
    private static String DEFAULT_ALG = ""AES/ECB/PKCS5Padding"";
    /*Default salt is not much secure, use your own!*/
    private static String DEFAULT_SALT = ""SALT"";
    /*Iterate 10000 times by default.*/
    private static int DEFAULT_ITERATIONS = 10000;
    /*One of valid key sizes for default algorithm (AES).*/
    private static int DEFAULT_KEY_LEN = 128;

    public static void main(String[] args) throws IOException {

        String inputFileName = ""C:\\temp\\in.txt"";   /*Enter your input (plain) file path */
        String outputFileName = ""C:\\temp\\out.bin""; /*Enter your output (encrypted) file path */
        String passPhrase = ""mypassphrase"";          /*Enter your passphrase */
        String salt = DEFAULT_SALT;
        String alg = DEFAULT_ALG;
        int iterations = DEFAULT_ITERATIONS;
        int keyLen = DEFAULT_KEY_LEN;

        SecretKeyFactory factory = null;
        try {
            factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
        } catch (NoSuchAlgorithmException e) {
            throw new IOException(""Can't load SecretKeyFactory"", e);
        }

        SecretKeySpec key = null;
        try {
            String algOnly = alg.split(""/"")[0];
            key = new SecretKeySpec(
                    factory.generateSecret(
                            new PBEKeySpec(passPhrase.toCharArray(), salt.getBytes(), iterations, keyLen)).getEncoded(),
                    algOnly);
        } catch (Exception e) {
            throw new IOException(""Can't generate secret key"", e);
        }

        Cipher crypto = null;
        try {
            crypto = Cipher.getInstance(alg);
        } catch (Exception e) {
            throw new IOException(""Can't initialize the decryptor"", e);
        }

        Path inputFileLocation = Paths.get(inputFileName);
        byte[] decrypted = Files.readAllBytes(inputFileLocation);
        byte[] encrypted;

        try {
            crypto.init(Cipher.ENCRYPT_MODE, key);
            encrypted = crypto.doFinal(decrypted);
        } catch (Exception e) {
            throw new IOException(""Can't decrypt the password"", e);
        }

        Path outputFileLocation = Paths.get(outputFileName);
        Files.write(outputFileLocation, encrypted);
    }
}
</code></pre>
","556","<encryption><sqoop><password-encryption><encryption-symmetric>","1","2","2","2017-04-06 11:47:20","43233186","6","1","1391883","","2017-03-30 11:32:11","2017-03-08 13:53:15",""
"42673173","Getting BadPaddingException while doing a Sqoop import with encrypted password file","<p>I encrypt file with <code>openssl</code> then put it on HDFS, I used AES/ECB, 128 bits and salt option, and with some research I find out openssl uses PKCS5 padding as default which are all defaults in <a href=""https://apache.googlesource.com/sqoop/+/refs/heads/trunk/src/java/org/apache/sqoop/util/password/CredentialProviderPasswordLoader.java"" rel=""nofollow noreferrer"">CryptoFileLoader class</a>. Here is my encryption process:</p>

<pre><code># echo -n ""password"" &gt; .pw
# openssl enc -aes-128-ecb -salt -in .pw -out .pw.enc
# hdfs dfs -put .pw.enc /user/user1/
</code></pre>

<p>Sqoop version is 1.4.6</p>

<p>Command:</p>

<pre><code>sqoop import \
-Dorg.apache.sqoop.credentials.loader.class=org.apache.sqoop.util.password.CryptoFileLoader \
-Dorg.apache.sqoop.credentials.loader.crypto.passphrase=sqoop \
--connect jdbc:oracle:thin:@host/database \
--username user1 \
--password-file /user/user1/.pw.enc \
--table db.table1 \
--hive-import \
--hive-overwrite \
--hive-table hivedb.table1 \
--hive-drop-import-delims
</code></pre>

<p>which gives: </p>

<pre><code>17/03/08 15:10:37 WARN tool.BaseSqoopTool: Failed to load password file
java.io.IOException: Can't decrypt the password
        at org.apache.sqoop.util.password.CryptoFileLoader.loadPassword(CryptoFileLoader.java:151)
        at org.apache.sqoop.util.CredentialsUtil.fetchPasswordFromLoader(CredentialsUtil.java:81)
        at org.apache.sqoop.util.CredentialsUtil.fetchPassword(CredentialsUtil.java:66)
        at org.apache.sqoop.tool.BaseSqoopTool.applyCredentialsOptions(BaseSqoopTool.java:1042)
        at org.apache.sqoop.tool.BaseSqoopTool.applyCommonOptions(BaseSqoopTool.java:997)
        at org.apache.sqoop.tool.ImportTool.applyOptions(ImportTool.java:875)
        at org.apache.sqoop.tool.SqoopTool.parseArguments(SqoopTool.java:435)
        at org.apache.sqoop.Sqoop.run(Sqoop.java:131)
        at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:70)
        at org.apache.sqoop.Sqoop.runSqoop(Sqoop.java:179)
        at org.apache.sqoop.Sqoop.runTool(Sqoop.java:218)
        at org.apache.sqoop.Sqoop.runTool(Sqoop.java:227)
        at org.apache.sqoop.Sqoop.main(Sqoop.java:236)
Caused by: javax.crypto.BadPaddingException: Given final block not properly padded
        at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:966)
        at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:824)
        at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:436)
        at javax.crypto.Cipher.doFinal(Cipher.java:2165)
        at org.apache.sqoop.util.password.CryptoFileLoader.loadPassword(CryptoFileLoader.java:149)
        ... 12 more
Error while loading password file: Can't decrypt the password
</code></pre>

<p>I tried manually giving the other CryptoFileLoader parameters too and also passing local file to the <code>--password-file</code> .</p>

<p>I can decrypt the file back successfully with <code>openssl</code>. I can't decrypt with Java program(?)</p>

<p>I saw there is an issue with padding but I didn't know what it is and how to encrypt the file with a certain padding method or whatever else to do, I'm not experienced with encryption.</p>

<p>There is also <code>org.apache.sqoop.credentials.loader.crypto.iterations</code> parameter in the class which indicates number of PBKDF2 iterations but I don't know if it changes anything.</p>

<p>Thanks for any help.</p>
","<p>As in Simone's answer - there is a difference in the encryption algorithm between openssl and java implementation.  That is why you can decrypt using openssl with no problem (as it is invoking its own (different) algorithm again).</p>

<p>After much digging I found this answer from (<a href=""https://crypto.stackexchange.com/questions/36981/what-are-kdf-parameters-in-openssl-command-line-utility-for-enc"">Dave Thompson</a>) which states:</p>

<blockquote>
  <p>Short answer: what openssl enc (without -K for raw) uses is not PBKDF2; it is almost PBKDF1, with iteration count 1.</p>
</blockquote>

<p>It seems that there are two ways round this issue, either: </p>

<p>a) Find something in java that can decrypt what openssl is doing - there is a java library 'BouncyCastle' referenced in a post inside this <a href=""https://stackoverflow.com/questions/11783062/how-to-decrypt-file-in-java-encrypted-with-openssl-command-using-aes"">answer</a> (if you are happy using that instead of standard CryptoFile) where they have implemented the exact same algorithm that openssl is using.</p>

<p>or</p>

<p>b) Find some other command line utility to use instead of openssl that implements PBKDF2.  A number of implementations in different languages are referenced in the <a href=""http://openssl.6102.n7.nabble.com/Re-Accessing-PBKDF2-from-command-line-td25835.html"" rel=""nofollow noreferrer"">nabble.com posting</a> also mentioned.</p>

<p>(Due credit to Dave for the key observation quoted)</p>
","556","<encryption><sqoop><password-encryption><encryption-symmetric>","1","1","2","2017-04-06 11:47:20","43233186","6","1","1391883","","2017-03-30 11:32:11","2017-03-08 13:53:15",""
"36677266","EVP_DecryptFinal_ex:bad decrypt, possible key generation issue in Android","<p>So I'm having issues with generating a key from a string-based passphrase. The encryption step works fine and the decryption step works up until the error listed at the bottom, leaving the decrypted file corrupt. I use the following functions to perform the encryption/decryption:</p>

<pre><code>public static boolean decryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString().replace("".epf"", """"));
        FileOutputStream fos = new FileOutputStream(ef);

        Log.d(""HIDEMYPICS"",""Decrypting: "" + f.toString());

        byte[] rawKey = getRawKey(keyphrase.getBytes(""UTF8""));
        /*KeyGenerator kgen = KeyGenerator.getInstance(""AES"");
        SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
        sr.setSeed(rawKey);
        kgen.init(128, sr); // 192 and 256 bits may not be available
        SecretKey skey = kgen.generateKey();
        byte[] key = skey.getEncoded();*/
        SecretKeySpec skeySpec = new SecretKeySpec(rawKey, ""AES"");
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, skeySpec);
        // Wrap the output stream
        CipherOutputStream cos = new CipherOutputStream(fos, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = fis.read(d)) != -1) {
            cos.write(d, 0, b);
        }
        // Flush and close streams.
        cos.flush();
        cos.close();
        fis.close();

        Log.d(""HIDEMYPICS"",""Decrypted to: "" + ef.toString());
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    }
    return false;
}

public static boolean encryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString() + "".epf"");
        FileOutputStream fos = new FileOutputStream(ef);

        Log.d(""HIDEMYPICS"",""Encrypting: "" + f.toString());

        byte[] rawKey = getRawKey(keyphrase.getBytes(""UTF8""));
        /*KeyGenerator kgen = KeyGenerator.getInstance(""AES"");
        SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
        sr.setSeed(rawKey);
        kgen.init(128, sr); // 192 and 256 bits may not be available
        SecretKey skey = kgen.generateKey();
        byte[] key = skey.getEncoded();*/
        SecretKeySpec skeySpec = new SecretKeySpec(rawKey, ""AES"");
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        // Wrap the output stream
        CipherOutputStream cos = new CipherOutputStream(fos, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = fis.read(d)) != -1) {
            cos.write(d, 0, b);
        }
        // Flush and close streams.
        cos.flush();
        cos.close();
        fis.close();
        Log.d(""HIDEMYPICS"",""Encrypted to: "" + ef.toString());
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    }
    return false;
}
</code></pre>

<p>And here's the function that generates the raw key:</p>

<pre><code>private static byte[] getRawKey(byte[] seed) throws NoSuchAlgorithmException {
    KeyGenerator kgen = KeyGenerator.getInstance(""AES"");
    SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
    sr.setSeed(seed);
    kgen.init(128, sr); // 192 and 256 bits may not be available
    SecretKey skey = kgen.generateKey();
    byte[] raw = skey.getEncoded();

    String result = """";
    for(int index = 0; index &lt; raw.length; index++) {
        result += Integer.toHexString(raw[index]);
        // maybe you have to convert your byte to int before this can be done
        // (cannot check reight now)
    }

    Log.d(""HIDEMYPICS"",""Passphrase: "" + new String(seed).toString() + "" Key: "" + result );
    return raw;
}
</code></pre>

<p>The output for the ""test"" input string is as follows for the above hex-dump of the key:</p>

<p>Encryption:</p>

<pre><code>    04-17 09:01:25.088 18341-18341/com.dcheeseman.hidemypics D/HIDEMYPICS: Encrypting: /storage/emulated/0/Download/bailout_5128280_GIFSoup.com-1.gif
04-17 09:01:25.088 18341-18341/com.dcheeseman.hidemypics D/HIDEMYPICS: Passphrase: test Key: ffffff85affffffe21023ffffffb7ffffffe8ffffffc8214031fffffffa5b29ffffff9affffff80
</code></pre>

<p>Decryption:</p>

<pre><code>04-17 09:01:43.808 18341-18341/com.dcheeseman.hidemypics D/HIDEMYPICS: Decrypting: /storage/emulated/0/Download/bailout_5128280_GIFSoup.com-1.gif.epf
04-17 09:01:43.808 18341-18341/com.dcheeseman.hidemypics D/HIDEMYPICS: Passphrase: test Key: ffffff8331ffffffe2ffffff87ffffffe242dffffffa61cffffffc7ffffffb4ffffffa1d74ffffff9affffff9b
</code></pre>

<p>Both decryption and encryption were seeded with ""test"" as the passphrase and yet the function returns 2 different keys and this is why I think I'm getting the bad-decrypt error, full trace of which is listed below:</p>

<pre><code>    04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err: java.io.IOException: error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at javax.crypto.CipherOutputStream.close(CipherOutputStream.java:136)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at com.dcheeseman.hidemypics.AESUtils.decryptFileFromUri(AESUtils.java:102)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at com.dcheeseman.hidemypics.HideMyPics.onActivityResult(HideMyPics.java:35)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.app.Activity.dispatchActivityResult(Activity.java:6808)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.app.ActivityThread.deliverResults(ActivityThread.java:4698)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.app.ActivityThread.handleSendResult(ActivityThread.java:4745)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.app.ActivityThread.access$1500(ActivityThread.java:197)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1730)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.os.Handler.dispatchMessage(Handler.java:102)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.os.Looper.loop(Looper.java:145)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.app.ActivityThread.main(ActivityThread.java:6872)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at java.lang.reflect.Method.invoke(Native Method)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at java.lang.reflect.Method.invoke(Method.java:372)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1404)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1199)
</code></pre>

<p>Thanks in advance for any help with this issue!</p>
","<p>You state: ""2 different keys"", the keys must be the same.</p>

<p>Typically you pre-share a key or password and if you use a password derive a key from it with a function such as PBKDF2. If you use password derivation you must use the same <strong>deterministic</strong> function on both encryption and decryption. The function used must produce the same key from the password on each side. Since you are using a random generator the derivation is not deterministic and this can not work.</p>
","555","<android><encryption><passwords><encryption-symmetric>","0","0","2","2016-04-17 17:52:31","","2","3","","","","2016-04-17 13:36:32",""
"36677266","EVP_DecryptFinal_ex:bad decrypt, possible key generation issue in Android","<p>So I'm having issues with generating a key from a string-based passphrase. The encryption step works fine and the decryption step works up until the error listed at the bottom, leaving the decrypted file corrupt. I use the following functions to perform the encryption/decryption:</p>

<pre><code>public static boolean decryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString().replace("".epf"", """"));
        FileOutputStream fos = new FileOutputStream(ef);

        Log.d(""HIDEMYPICS"",""Decrypting: "" + f.toString());

        byte[] rawKey = getRawKey(keyphrase.getBytes(""UTF8""));
        /*KeyGenerator kgen = KeyGenerator.getInstance(""AES"");
        SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
        sr.setSeed(rawKey);
        kgen.init(128, sr); // 192 and 256 bits may not be available
        SecretKey skey = kgen.generateKey();
        byte[] key = skey.getEncoded();*/
        SecretKeySpec skeySpec = new SecretKeySpec(rawKey, ""AES"");
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, skeySpec);
        // Wrap the output stream
        CipherOutputStream cos = new CipherOutputStream(fos, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = fis.read(d)) != -1) {
            cos.write(d, 0, b);
        }
        // Flush and close streams.
        cos.flush();
        cos.close();
        fis.close();

        Log.d(""HIDEMYPICS"",""Decrypted to: "" + ef.toString());
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    }
    return false;
}

public static boolean encryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString() + "".epf"");
        FileOutputStream fos = new FileOutputStream(ef);

        Log.d(""HIDEMYPICS"",""Encrypting: "" + f.toString());

        byte[] rawKey = getRawKey(keyphrase.getBytes(""UTF8""));
        /*KeyGenerator kgen = KeyGenerator.getInstance(""AES"");
        SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
        sr.setSeed(rawKey);
        kgen.init(128, sr); // 192 and 256 bits may not be available
        SecretKey skey = kgen.generateKey();
        byte[] key = skey.getEncoded();*/
        SecretKeySpec skeySpec = new SecretKeySpec(rawKey, ""AES"");
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        // Wrap the output stream
        CipherOutputStream cos = new CipherOutputStream(fos, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = fis.read(d)) != -1) {
            cos.write(d, 0, b);
        }
        // Flush and close streams.
        cos.flush();
        cos.close();
        fis.close();
        Log.d(""HIDEMYPICS"",""Encrypted to: "" + ef.toString());
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    }
    return false;
}
</code></pre>

<p>And here's the function that generates the raw key:</p>

<pre><code>private static byte[] getRawKey(byte[] seed) throws NoSuchAlgorithmException {
    KeyGenerator kgen = KeyGenerator.getInstance(""AES"");
    SecureRandom sr = SecureRandom.getInstance(""SHA1PRNG"");
    sr.setSeed(seed);
    kgen.init(128, sr); // 192 and 256 bits may not be available
    SecretKey skey = kgen.generateKey();
    byte[] raw = skey.getEncoded();

    String result = """";
    for(int index = 0; index &lt; raw.length; index++) {
        result += Integer.toHexString(raw[index]);
        // maybe you have to convert your byte to int before this can be done
        // (cannot check reight now)
    }

    Log.d(""HIDEMYPICS"",""Passphrase: "" + new String(seed).toString() + "" Key: "" + result );
    return raw;
}
</code></pre>

<p>The output for the ""test"" input string is as follows for the above hex-dump of the key:</p>

<p>Encryption:</p>

<pre><code>    04-17 09:01:25.088 18341-18341/com.dcheeseman.hidemypics D/HIDEMYPICS: Encrypting: /storage/emulated/0/Download/bailout_5128280_GIFSoup.com-1.gif
04-17 09:01:25.088 18341-18341/com.dcheeseman.hidemypics D/HIDEMYPICS: Passphrase: test Key: ffffff85affffffe21023ffffffb7ffffffe8ffffffc8214031fffffffa5b29ffffff9affffff80
</code></pre>

<p>Decryption:</p>

<pre><code>04-17 09:01:43.808 18341-18341/com.dcheeseman.hidemypics D/HIDEMYPICS: Decrypting: /storage/emulated/0/Download/bailout_5128280_GIFSoup.com-1.gif.epf
04-17 09:01:43.808 18341-18341/com.dcheeseman.hidemypics D/HIDEMYPICS: Passphrase: test Key: ffffff8331ffffffe2ffffff87ffffffe242dffffffa61cffffffc7ffffffb4ffffffa1d74ffffff9affffff9b
</code></pre>

<p>Both decryption and encryption were seeded with ""test"" as the passphrase and yet the function returns 2 different keys and this is why I think I'm getting the bad-decrypt error, full trace of which is listed below:</p>

<pre><code>    04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err: java.io.IOException: error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at javax.crypto.CipherOutputStream.close(CipherOutputStream.java:136)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at com.dcheeseman.hidemypics.AESUtils.decryptFileFromUri(AESUtils.java:102)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at com.dcheeseman.hidemypics.HideMyPics.onActivityResult(HideMyPics.java:35)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.app.Activity.dispatchActivityResult(Activity.java:6808)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.app.ActivityThread.deliverResults(ActivityThread.java:4698)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.app.ActivityThread.handleSendResult(ActivityThread.java:4745)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.app.ActivityThread.access$1500(ActivityThread.java:197)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1730)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.os.Handler.dispatchMessage(Handler.java:102)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.os.Looper.loop(Looper.java:145)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at android.app.ActivityThread.main(ActivityThread.java:6872)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at java.lang.reflect.Method.invoke(Native Method)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at java.lang.reflect.Method.invoke(Method.java:372)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1404)
04-17 09:33:24.158 823-823/com.dcheeseman.hidemypics W/System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1199)
</code></pre>

<p>Thanks in advance for any help with this issue!</p>
","<p>Took Zaph's advice and swapped over to PBKDF2 and now have consistent key generation.  Here's the code for anyone that's curious.</p>

<pre><code>public static SecretKey generateKey(Context c, char[] passphraseOrPin) throws NoSuchAlgorithmException, InvalidKeySpecException {
    // Number of PBKDF2 hardening rounds to use. Larger values increase
    // computation time. You should select a value that causes computation
    // to take &gt;100ms.
    byte[] salt = Settings.Secure.getString(c.getContentResolver(),
            Settings.Secure.ANDROID_ID).getBytes();

    final int iterations = 1000;

    final int outputKeyLength = 128;

    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    KeySpec keySpec = new PBEKeySpec(passphraseOrPin, salt, iterations, outputKeyLength);
    SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
    Log.d(""HIDEMYPICS"",""Secret Key: "" + toHex(secretKey.getEncoded()) );
    return secretKey;
}

public static boolean decryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString().replace("".epf"", """"));
        FileOutputStream fos = new FileOutputStream(ef);

        Log.d(""HIDEMYPICS"",""Decrypting: "" + f.toString());

        SecretKey key = generateKey(context, keyphrase.toCharArray());
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, key);
        // Wrap the output stream
        CipherOutputStream cos = new CipherOutputStream(fos, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = fis.read(d)) != -1) {
            cos.write(d, 0, b);
        }
        // Flush and close streams.
        cos.flush();
        cos.close();
        fis.close();

        Log.d(""HIDEMYPICS"",""Decrypted to: "" + ef.toString());
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    }
    return false;
}

public static boolean encryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString() + "".epf"");
        FileOutputStream fos = new FileOutputStream(ef);

        Log.d(""HIDEMYPICS"",""Encrypting: "" + f.toString());

        SecretKey key = generateKey(context, keyphrase.toCharArray());
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        // Wrap the output stream
        CipherOutputStream cos = new CipherOutputStream(fos, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = fis.read(d)) != -1) {
            cos.write(d, 0, b);
        }
        // Flush and close streams.
        cos.flush();
        cos.close();
        fis.close();
        Log.d(""HIDEMYPICS"",""Encrypted to: "" + ef.toString());
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    }
    return false;
}
</code></pre>

<p>NOTE: It is still not working 100%, having issues where it's corrupting the first few bytes during decryption, resulting in corrupt file headers. If you want to see the results for that I've started a separate question post for that here: <a href=""https://stackoverflow.com/questions/36680037/cipheroutputstream-corrupting-headers-in-android"">CipherOutputStream corrupting headers in Android</a></p>
","555","<android><encryption><passwords><encryption-symmetric>","0","0","2","2016-04-17 17:52:31","","2","3","","","","2016-04-17 13:36:32",""
"23874578","GPG - Max Keysize with TWOFISH symmetric encryption","<p>I'm using a script to pack and encrypt archives in order to backup them in cloud storage.</p>

<p>It generates shell commands like this:</p>

<pre><code>cd /vault/backup/pictures; tar cf - vacation-201309 | xz -3 | gpg --symmetric --cipher-algo TWOFISH --digest-algo SHA512 --no-secmem-warning --yes --batch --passphrase-file /vault/keys/back_keyfile -o /vault/backup/upload/vacation-201309.tar.xz.gpg
</code></pre>

<p>TWOFISH is a 256-bit cipher which means, that it can only use a keyfile not bigger than,</p>

<p><code>openssl rand -base64 256</code>:</p>

<pre><code>3zXeZC/XWC1h1lxre88gzkhCZqk6tV7YKCg9HiKDLrooEDYkvwYXQ5LMBLSFdpYr
c2KAP10aq6pfEi4YeL7llQXfd47qXsEDi8nOpBpPRALxv2NYE4qjZC3sTPe+d1ue
cbFM18BmxHN0094YotLBD+6cQIfZyU8GVLLHx8iH2jf48+7QuXigqWW1oT33BPbQ
zrlND50ZFeGNYo7woIRpSvt8KeBm8t75jVEqXIzA2Zei0r9Xsx0mu828t0wZ6mGL
hkj4B5M56eJzFUCFG207Mf/bXvV5X7Pz6W72Y8nhjAtkumdAsEb0Vc0iIHJ64mfH
XWEfs/1T3n2F8/kxASIvPQ==
</code></pre>

<p>At least that's how I understand it.</p>

<p>My question is, how would GPG behave, if I pass a bigger key file to it like </p>

<pre><code>openssl rand -base64 512:

P0MzGpZItSu6fKObtJvAx1fLRxPBK/pOIjR9Yv+mCrHLlit7ksHOjif6ln32lXl3
8g/zxdQc39kanAproaOzZ1ulebxbfK1Bi6/OfwhdP1HF61nWBZb03TDtdNNXEDFW
9lAN6kHUUctpY9PhFCv2AmoKSKzv1HsAGkrhqslO4E+3sIlGgVLg69qKHE9yQJSX
s5xhXKTcAcaVZ++HwuTTvIduf3sc2J+BEDzpqrAwES2hV5gFwnFFA6G0md31VwEI
9wf22p07qbOrRryV/0WZUNZfOuZ5g/JgrqhRgq53lK0VHvyRkNjMlx7BW4n3Y/0y
5Lgve8Q89Cx5jwbxPcBnXW5h4SWLFa8bSLrGrn/eDH+F1mA5BbU+3IrBdLgivz0u
Unr+jLD3FbBOv/8jRAyp/iOwMmOw9welTu/mcEEa20gyupeJXxAZaVrNfWdWVORi
PdjW5vR9Rn/NLh6fV46+E39dgTn4TBp/v9h+LZpiVK3nNkry+as9vH73o+nFIe8Q
H/UkchDqmIBLntKc9rBZQrkx8NOzruoWGJoFE/Wb23AHN7RNyYgVgvZTy5QWhILz
CW/mzwMQYAuLbFfnY4cgDs9zLMo4OqFGUmbgbnXO9KbYgsplU2aps9JoOjyWCchm
uWYRNAGWrgdfl8vIaxMz1WUwWJFDxyNrANPRiPFQTUg=
</code></pre>

<p>Will it just take the first 256 characters and ignore the rest?</p>
","<p>You are using the random as input as a passphrase. Only the first line is used. So you are not generating the key at all, the key is generated using the <a href=""http://tools.ietf.org/html/rfc4880#section-3.7"" rel=""nofollow"">S2K</a> algorithms, using just the first line.</p>

<p>Note that a 256 bit key does <em>not</em> consist of 256 ""characters"" or bytes.</p>
","554","<encryption><gnupg><encryption-symmetric><twofish>","1","1","1","2014-05-26 20:32:46","23877348","5","","","","","2014-05-26 16:46:18",""
"27913119","AES Encrypt / Decrypt byte[]","<p>I am trying to encrypt a byte[] using the following methods but when I decrypt it my byte[] is bigger than when I started and I think its to do with padding but I am not sure how to solve it.</p>

<p>The method isnt finished yet (I know its bad to append the key + iv like my example but its for testing purpose to get it working before I move on).</p>

<p>So when I try to open the file afterwards (tested with MS Word file) I get a message saying the file is damaged and would I like to repair it.</p>

<p><strong>Encrypt Method</strong></p>

<pre class=""lang-cs prettyprint-override""><code>public byte[] Encrypt(byte[] dataToEncrypt) {
        // Check arguments. 
        if (dataToEncrypt == null || dataToEncrypt.Length &lt;= 0) {
            throw new ArgumentNullException(""dataToEncrypt"");
        }

        byte[] encryptedData;
        byte[] key;
        byte[] iv;

        // Create an Aes object  
        using (Aes aesAlg = Aes.Create()) {
            key = aesAlg.Key;
            iv = aesAlg.IV;

            // Create a encrytor to perform the stream transform.
            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

            // Create the streams used for encryption. 
            using (MemoryStream memoryStream = new MemoryStream()) {
                using (CryptoStream cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write)) {
                    cryptoStream.Write(dataToEncrypt, 0, dataToEncrypt.Length);
                    cryptoStream.FlushFinalBlock();

                    encryptedData = memoryStream.ToArray();

                }
            }


        }

        byte[] result = new byte[encryptedData.Length + KEY_SIZE + IV_SIZE];

        Buffer.BlockCopy(key, 0, result, 0, KEY_SIZE);
        Buffer.BlockCopy(iv, 0, result, KEY_SIZE, IV_SIZE);
        Buffer.BlockCopy(encryptedData, 0, result, KEY_SIZE + IV_SIZE, encryptedData.Length);

        return result;
    }
</code></pre>

<p><strong>Decrypt Method</strong></p>

<pre class=""lang-cs prettyprint-override""><code>public byte[] Decrypt(byte[] encryptedData) {
        // Check arguments. 
        if (encryptedData == null || encryptedData.Length &lt;= 0) {
            throw new ArgumentNullException(""encryptedData"");
        }

        byte[] storedKey = new byte[KEY_SIZE];
        byte[] storedIV = new byte[IV_SIZE];
        byte[] dataToDecrypt = new byte[encryptedData.Length - (KEY_SIZE + IV_SIZE)];

        Buffer.BlockCopy(encryptedData, 0, storedKey, 0, KEY_SIZE);
        Buffer.BlockCopy(encryptedData, KEY_SIZE, storedIV, 0, IV_SIZE);
        Buffer.BlockCopy(encryptedData, KEY_SIZE + IV_SIZE, dataToDecrypt, 0, encryptedData.Length - (KEY_SIZE + IV_SIZE));

        byte[] decryptedData = null;

        // Create an AesCryptoServiceProvider object 
        // with the specified key and IV. 
        using (Aes aesAlg = Aes.Create()) {
            aesAlg.Key = storedKey;
            aesAlg.IV = storedIV;

            // Create a decrytor to perform the stream transform.
            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

            // Create the streams used for decryption. 
            using (MemoryStream memoryStream = new MemoryStream(dataToDecrypt)) {
                using (CryptoStream cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read)) {
                    cryptoStream.Read(dataToDecrypt, 0, dataToDecrypt.Length);

                    decryptedData = memoryStream.ToArray();
                }
            }

        }

        return decryptedData;
    }
</code></pre>
","<p>You are assuming that the entire buffer is plaintext data as well. You should only return that part of the buffer that contains the plaintext data (using the response of <code>Read</code> to see how much bytes are returned).  The encrypted data is usually larger <em>because</em> of the padding.</p>

<p>As a single read method isn't good practice with regards to stream handling. You need to read until the end of the stream is reached. Otherwise you may go from having too much data to having too little.</p>
","545","<encryption><aes><encryption-symmetric><aescryptoserviceprovider>","0","0","1","2015-01-13 02:42:53","","2","","238704","","2015-01-13 02:42:53","2015-01-13 00:27:30",""
"30505754","Encryption Technique to Generate Smaller string in Java","<p>I want to encrypt and decrypt some string which may be between 300 to 1000 characters long. I am going to save these encrypted values in cookies. So I want to know if any encryption APIs available which generates smaller encrypted strings, may be same or lesser length than actual string.</p>

<p>Thanks.</p>
","<p>You can, for example, compress the string first as @Paul suggested and base64 encode it if you want to keep it as nice string but not as byte array, and after encrypt. May be it will fill your needs.</p>
","544","<java><encryption><encryption-symmetric>","1","1","2","2015-05-31 13:25:52","","3","1","","","","2015-05-28 11:48:24",""
"30505754","Encryption Technique to Generate Smaller string in Java","<p>I want to encrypt and decrypt some string which may be between 300 to 1000 characters long. I am going to save these encrypted values in cookies. So I want to know if any encryption APIs available which generates smaller encrypted strings, may be same or lesser length than actual string.</p>

<p>Thanks.</p>
","<p>Symmetric encryption is a general facility so that you can <em>encrypt</em> a message in clear (<em>cleartext</em>) to its encrypted equivalent (<em>ciphertext</em>) and decrypt back using a key, called the <strong>private key</strong>. Whoever has the key will be able to do this operation back and forth (hence the word symmetric).This, as you know, is very different from encoding/decoding where there is no private key involved, knowing the encoding algorithm is enough to decode (e.g. Base 64).</p>

<p>You seem to have an additional requirement that the <em>ciphertext</em> should be <strong>shorter</strong> than <em>cleartext</em>. Some compression techniques can be utilized, but this is tricky and perhaps uncalled for in your use case. In general, if you use SymmetricEncryption utility like <a href=""https://gist.github.com/kedarmhaswade/7398a49fe182d196282a"" rel=""nofollow"">this</a> (real code, try with Java 8) you will see that the <em>ciphertext</em> is <strong>longer</strong> than <em>ciphertext</em> (not what you want).</p>

<p>Lastly, this solution may be complicated for your use case. If I understand correctly, you want to identify an HTTP session with some information. If you store that information in the cookie, yes, you will need to secure that information so that your solution is at least as secure as the cookie itself. But in such cases, you use the server side storage for session, rather than the cookie store. See how this is done <a href=""http://dev.housetrip.com/2014/01/14/session-store-and-security/"" rel=""nofollow"">using Rails</a> for instance. Something similar should be available in Java. This way, what you store in the cookie is a 'reference' to the confidential data and the confidential data is stored on the server side (which is, supposedly, at least as secure as the entire server is).</p>
","544","<java><encryption><encryption-symmetric>","1","1","2","2015-05-31 13:25:52","","3","1","","","","2015-05-28 11:48:24",""
"30613033","Migrating C# .Net encrypt/decrypt algorithm to Ruby","<p>I have to encrypt/decrypt data from a .Net based web service that is using the following code (based on <strong>Rijndael</strong> algorithm):</p>

<pre><code>/**
 * Cifra una cadena texto con el algoritmo de Rijndael
 *
 * @param   plainMessage    mensaje plano (sin cifrar)
 * @param   p_strSpecialKey key especial
 * @return  string          texto cifrado en hexadecimal
 */
public static string AES_encryptString(String plainMessage, string p_strSpecialKey) {
  string strTxtEncrypt = """";

  // Crear una instancia del algoritmo de Rijndael
  try {
    Rijndael RijndaelAlg = Rijndael.Create();
    RijndaelAlg.KeySize = 128;
    RijndaelAlg.Mode = CipherMode.ECB;
    RijndaelAlg.Padding = PaddingMode.Zeros;

    byte[] Key = Encoding.UTF8.GetBytes(p_strSpecialKey);
    byte[] IV = RijndaelAlg.IV;

    int keySize = 32;
    Array.Resize(ref Key, keySize);

    // Establecer un flujo en memoria para el cifrado
    MemoryStream memoryStream = new MemoryStream();

    // Crear un flujo de cifrado basado en el flujo de los datos
    CryptoStream cryptoStream = new CryptoStream(memoryStream,
    RijndaelAlg.CreateEncryptor(Key, IV),
    CryptoStreamMode.Write);

    // Obtener la representación en bytes de la información a cifrar
    byte[] plainMessageBytes = Encoding.UTF8.GetBytes(plainMessage);

    // Cifrar los datos enviándolos al flujo de cifrado
    cryptoStream.Write(plainMessageBytes, 0, plainMessageBytes.Length);
    cryptoStream.FlushFinalBlock();

    // Obtener los datos datos cifrados como un arreglo de bytes
    byte[] cipherMessageBytes = memoryStream.ToArray();

    // Cerrar los flujos utilizados
    memoryStream.Close();
    cryptoStream.Close();

    strTxtEncrypt = ByteToHex(cipherMessageBytes);
  } catch (Exception ex) {
    AddToFile(""Error al encriptar el valor: "" + plainMessage + "" con la clave especial: "" + p_strSpecialKey + "" "" + ex.ToString());
  }

  return strTxtEncrypt;
}

/**
 * Descifra una cadena texto con el algoritmo de Rijndael
 *
 * @param   encryptedMessage    mensaje cifrado en hexadecimal
 * @param   p_strSpecialKey key especial
 * @return  string              texto descifrado (plano)
 */
public static string AES_decryptString(String encryptedMessage, string p_strSpecialKey) {
  string strDecrypt = """";

  // Crear una instancia del algoritmo de Rijndael
  try {
    Rijndael RijndaelAlg = Rijndael.Create();
    RijndaelAlg.KeySize = 128;
    RijndaelAlg.Mode = CipherMode.ECB;
    RijndaelAlg.Padding = PaddingMode.Zeros;

    byte[] Key = Encoding.UTF8.GetBytes(p_strSpecialKey);
    byte[] IV = RijndaelAlg.IV;

    int keySize = 32;
    Array.Resize(ref Key, keySize);

    // Obtener la representación en bytes del texto cifrado
    byte[] cipherTextBytes = HexToByteArray(encryptedMessage);

    // Crear un arreglo de bytes para almacenar los datos descifrados
    byte[] plainTextBytes = new byte[cipherTextBytes.Length];

    // Crear un flujo en memoria con la representación de bytes de la información cifrada
    MemoryStream memoryStream = new MemoryStream(cipherTextBytes);

    // Crear un flujo de descifrado basado en el flujo de los datos
    CryptoStream cryptoStream = new CryptoStream(memoryStream,
    RijndaelAlg.CreateDecryptor(Key, IV),
    CryptoStreamMode.Read);

    // Obtener los datos descifrados obteniéndolos del flujo de descifrado
    int decryptedByteCount = cryptoStream.Read(plainTextBytes, 0, plainTextBytes.Length);

    // Cerrar los flujos utilizados
    memoryStream.Close();
    cryptoStream.Close();

    // Retornar la representación de texto de los datos descifrados
    strDecrypt = Encoding.UTF8.GetString(plainTextBytes, 0, decryptedByteCount).Replace(""\0"", """");
  } catch (Exception ex) {
    AddToFile(""Error al desencriptar el valor: "" + encryptedMessage + "" con la clave especial: "" + p_strSpecialKey + "" "" + ex.ToString());
  }

  return strDecrypt;
}
</code></pre>

<p>I have investigated the way to do the same on Ruby and I found this answer (<a href=""https://stackoverflow.com/questions/2044517/how-to-decode-rijndael-in-ruby-encoded-in-vb-net"">How to decode Rijndael in ruby (encoded in VB.net)</a>) but it doesn't works for me. Also, I'm not sure of what value i have to use for the iv. The web service brings me a Token that i have to use as the key (100% sure about that), but, actually don't know what i'm missing up.</p>

<p>The code I'm using for encrypt is:</p>

<pre><code># /lib/crypt.rb
module Crypt
  ...
  def Crypt.encrypt(data, key, iv, cipher_type)
    aes = OpenSSL::Cipher::Cipher.new(cipher_type)
    aes.encrypt
    aes.key = key
    aes.iv = iv
    aes.update(data) + aes.final
  end
end

# ../ws.rb
...
token = ""8c5d0e6b93cf5d38d7a076b2db35ee6d"" #this is a one of the tokens i received
iv = token
Crypt.encrypt(a_serialized_json,token,iv,""AES-128-CBC"")
</code></pre>

<p>The encrypted serialized json data that I have to send must be like a hexdigest string like this ""f0997ddbb17b08913e00b6fb2541312c1cfdda85e555451a1832df076a5d4a5f7d81d8db92715eade144e9696dfbe9eea573baa8ea90cdbe5baadf32fdeb6db8c9ab6743f8eeeb508921999d7513fad3"". But the method described on the link generates a encrypted string like this """"^w\x9A\x90B\xDC\f\x16\xB8\xBDt\xFBo\xD7r\x97"""".</p>

<p>Any idea of what I'm doing wrong or what I'm missing?</p>

<p><strong>UPDATE</strong>: I figured out that the string output I'm getting is a byte array, and i have to convert this byte array to an hex string. I'm using the following aproach (<a href=""https://github.com/atomicobject/hex_string/blob/master/lib/hex_string.rb"" rel=""nofollow noreferrer"">https://github.com/atomicobject/hex_string/blob/master/lib/hex_string.rb</a>). But, still not sure if Cypher is properly configured to acts as the C# code.</p>
","<p>Finally, I found a library that exactly match the C# code and is <code>ruby-mcrypt</code> (<a href=""https://github.com/kingpong/ruby-mcrypt"" rel=""nofollow"">https://github.com/kingpong/ruby-mcrypt</a>). And the encryption/decryption code i used is this:</p>

<pre><code>require 'mcrypt'

module Crypt
  def Crypt.m_encrypt(data, key)
    crypto = Mcrypt.new(:rijndael_128, :ecb, key, nil, :zeros)
    encrypted_data = crypto.encrypt(data)
    encrypted_data
  end

  def Crypt.m_decrypt(data, key)
    crypto = Mcrypt.new(:rijndael_128, :ecb, key, nil, :zeros)
    crypto.decrypt(data)
  end
end
</code></pre>

<p><strong>IMPORTANT:</strong> This C# Rjandael library doesn't uses the IV, for that reason i'm giving nil parameter as IV to Mcrypt.</p>

<p>This is only the encryption/decryption section, i'm also converting string to hexa format. Hope it can help somebody else!</p>
","541","<c#><ruby-on-rails><ruby><encryption><encryption-symmetric>","3","0","1","2017-11-27 05:29:57","30832645","0","1","-1","","2017-05-23 10:26:57","2015-06-03 07:02:13",""
"22049759","Passing AES symmetric key as string using JAVA","<p>Why does the following test fail?</p>

<pre><code>KeyGenerator generator = KeyGenerator.getInstance(""AES"");
SecretKey key = generator.generateKey();
byte[] symKey = key.getEncoded();
String keyAsString = new String(symKey, Charset.forName(""UTF-8""));
byte[] supposedSymKey = keyAsString.getBytes(Charset.forName(""UTF-8""));
Assert.assertEquals(symKey.length, supposedSymKey.length);
</code></pre>

<p>And the contents of <strong>supposedSymKey</strong> and <strong>symKey</strong> is different?
What is the right way to transform the <strong>symKey</strong> to string, so that i can distribute it?
Thanks.</p>
","<p>Try base64 encode/decode:</p>

<pre><code>KeyGenerator    generator       = KeyGenerator.getInstance( ""AES"" );
SecretKey       key             = generator.generateKey();
byte[]          symKey          = key.getEncoded();
String          buffer          = DatatypeConverter.printBase64Binary( symKey );
byte[]          supposedSymKey  = DatatypeConverter.parseBase64Binary( buffer );
</code></pre>
","530","<java><string><encryption><encryption-symmetric>","1","2","1","2014-02-26 18:58:12","22050665","1","","1264304","","2014-02-26 18:29:53","2014-02-26 18:13:28",""
"17276371","Encrypt in .Net and decrypt in AS3","<p>I need to encrypt some files in ASP.net and decrypt them in a flash application built with Action Script 3. </p>

<p>AS3 developer found a lib call AS3crypto which seems like a good one for AS3. The idea is encrypt and decrypt using same key. Symmetrical Encryption?</p>

<p>But I am struggling to find .Net equivalent that would use same algorithm for encryption. </p>

<p>I have tried RC4 example from 4guysfromrolla blog which works too slow for me. 
I have tried AES on this example (<a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rijndaelmanaged(v=vs.100).aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/system.security.cryptography.rijndaelmanaged(v=vs.100).aspx</a>) which works great on .Net but I can't seem to decrypt using AS3crypto to get the same file back. AS3crypto doesn't seem to like to have IV for decryption. I can only supply one key. </p>

<p>So far I am lost. How can I encrypt a file in .Net and decrypt it back in AS3 to get the same file back?</p>
","<p><strong>Notice:</strong> use 16 char length for both Key and IV, ex: Key: 1234567890123456 and IV: 9876543210654321</p>

<p>Here is C# code</p>

<pre><code>    public byte[] Encrypt(byte[] someData, string KEY, string IV)
    {
        //preparing
        byte[] keyBytes = Encoding.UTF8.GetBytes(KEY); 
        byte[] ivBytes = Encoding.UTF8.GetBytes(IV); 


        //here goes encryption
        RijndaelManaged rijndaelManaged = new RijndaelManaged();
        rijndaelManaged.Key = keyBytes;
        rijndaelManaged.IV = ivBytes;
        rijndaelManaged.BlockSize = 128;
        rijndaelManaged.Mode = CipherMode.CBC;
        ICryptoTransform encryptor = rijndaelManaged.CreateEncryptor(rijndaelManaged.Key, rijndaelManaged.IV);

        byte[] result = null;
        using (MemoryStream memoryStream = new MemoryStream())
        {
            using (CryptoStream cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write))
            {
                cryptoStream.Write(someData, 0, someData.Length);
                cryptoStream.FlushFinalBlock();
                result = memoryStream.ToArray();
            }
        }

        return result;


    }
</code></pre>

<p>And here is AS3 code using AS3Crypto library</p>

<pre><code>    private function decrypt(input:ByteArray, decrKey:String, decrIV:String):ByteArray
    {

        var key:ByteArray = Hex.toArray(Hex.fromString(decrKey));
        var pad:IPad = new NullPad();
        var aes:ICipher = Crypto.getCipher(""aes-cbc"", key, pad);
        var ivmode:IVMode = aes as IVMode;
        ivmode.IV = Hex.toArray(Hex.fromString(decrIV));
        aes.decrypt(input);

        return input;
    }
</code></pre>
","523","<asp.net><actionscript-3><encryption><encryption-symmetric><as3crypto>","1","0","1","2018-04-09 12:32:30","","1","","1033581","","2018-04-09 12:32:30","2013-06-24 13:12:05",""
"33867791","Android : If not hard-coded encryption key, where to save the encryption key","<p>My android application has account, passwd and other important information needs to store in its database. So concern about security, i am now studying encrypt these data to save in the database and decrypt it again when needed. </p>

<p>Using salt and iteration can make the encrypt data more strong. This part i understand how to do it. But my concern here comes that there is a lot discussion that not suggest to hard-coded AES key or PBE key. But without the key, i can't decrypt the data again (I do need to decrypt it again). </p>

<p>Is there any good suggestion for android application to save the key? </p>

<p>Thanks a lot. </p>
","<p>Save your data in .so file. you need to implement ndk integration in your project. It will make it much more difficult to hack. and you can get your value back from c++ file. Also check for package name in c++ to make sure your so file is not used in any other application.</p>
","512","<android><encryption-symmetric>","2","-1","1","2015-11-23 09:45:20","33867854","1","1","","","","2015-11-23 09:42:29",""
"23306917","AES_ctr128_encrypt on Solaris doesnt decrypt same as other OS's","<p>I've compiled the libcrypto.so shared library from openssl-1.0.1g for various platforms. Using the shared library, my app is able to encrypt/decrypt data between any of the following:</p>

<ul>
<li>Linux i386</li>
<li>Linux x86_64</li>
<li>Linux PPC</li>
<li>AIX RISC</li>
</ul>

<p>These can decrypt their own data, but NOT each other, nor any of the above:</p>

<ul>
<li>Solaris i386</li>
<li>Solaris SPARC</li>
</ul>

<p>I first thought this was an endian issue, butAIX/RISC and Linux/PPC are BE, and they seem to play well wit the Linux i386 and x86_64 (LE).</p>

<p>The Solaris systems are:</p>

<pre><code>SunOS pluto 5.9 Generic_Virtual sun4u sparc SUNW,SPARC-Enterprise-T5120
SunOS nemo 5.9 Generic_118559-11 i86pc i386 i86pc
</code></pre>

<p>The libcrypto.so was compiled with:</p>

<pre><code>#[openssl-1.0.1g] ./Configure solaris-sparcv9-cc shared 
#[openssl-1.0.1g] ./Configure solaris-x86-cc shared
</code></pre>

<p>NOTE that the Solaris systems both use ""/opt/SUNWspro/bin/cc"" as the compiler, and all others use ""gcc"".</p>

<p>I have verified that I am always starting with the same IV/counter and symkey when encrypting and decrypting. The encryption routines are well embededed in my programs, but this is basically all that I'm doing:</p>

<pre><code>uchar ivec[AES_BLOCK_SIZE], ecount[AES_BLOCK_SIZE], symkey[16];
uint num = 0, bits = 128;
uchar *buf, *ebuf; /* these are malloc'd and buf set to data to encrypt/decrypt */
...
memcpy(symkey, MYTESTKEY, 16);
memset(ecount, 0, AES_BLOCK_SIZE);
memset(ivec, 0, AES_BLOCK_SIZE);
memcpy(ivec, SOMEDATA, 8); /* from RAND_seed() and RAND_bytes() */
AES_set_encrypt_key(symkey, bits, &amp;outkey);
...
AES_ctr128_encrypt(inp, outp, bytes, key, ivec, ecount, &amp;num);
</code></pre>

<p>Again, this always works when encrypting/decrypting on the same system, only decodes to junk when one of the systems is Solaris. I'm using very old Solaris OS and boxes, however, since I have to maintain backward compatibility.
Thanks in advance! </p>
","<p>Please use the higher end OpenSSL <a href=""https://www.openssl.org/docs/crypto/EVP_EncryptInit.html#"" rel=""nofollow"">EVP</a> functionality.</p>

<p>Check for instance <a href=""https://groups.google.com/forum/#!topic/mailing.openssl.users/XjN1cyEJIaQ"" rel=""nofollow"">this message</a> by one of the core devs:</p>

<blockquote>
  <p>There is no guarantee that the low level cipher context (or indeed any similar
  context) will be the same across platforms. Endian differences, padding and
  platform specific optimisations can result in different data at the machine
  level. The results of using contexts on the appropriate platform should
  obviously be consistent though.</p>
</blockquote>
","509","<openssl><aes><endianness><encryption-symmetric>","1","1","2","2014-05-09 22:36:19","23574986","8","1","2843756","","2014-04-26 18:13:50","2014-04-26 05:12:44",""
"23306917","AES_ctr128_encrypt on Solaris doesnt decrypt same as other OS's","<p>I've compiled the libcrypto.so shared library from openssl-1.0.1g for various platforms. Using the shared library, my app is able to encrypt/decrypt data between any of the following:</p>

<ul>
<li>Linux i386</li>
<li>Linux x86_64</li>
<li>Linux PPC</li>
<li>AIX RISC</li>
</ul>

<p>These can decrypt their own data, but NOT each other, nor any of the above:</p>

<ul>
<li>Solaris i386</li>
<li>Solaris SPARC</li>
</ul>

<p>I first thought this was an endian issue, butAIX/RISC and Linux/PPC are BE, and they seem to play well wit the Linux i386 and x86_64 (LE).</p>

<p>The Solaris systems are:</p>

<pre><code>SunOS pluto 5.9 Generic_Virtual sun4u sparc SUNW,SPARC-Enterprise-T5120
SunOS nemo 5.9 Generic_118559-11 i86pc i386 i86pc
</code></pre>

<p>The libcrypto.so was compiled with:</p>

<pre><code>#[openssl-1.0.1g] ./Configure solaris-sparcv9-cc shared 
#[openssl-1.0.1g] ./Configure solaris-x86-cc shared
</code></pre>

<p>NOTE that the Solaris systems both use ""/opt/SUNWspro/bin/cc"" as the compiler, and all others use ""gcc"".</p>

<p>I have verified that I am always starting with the same IV/counter and symkey when encrypting and decrypting. The encryption routines are well embededed in my programs, but this is basically all that I'm doing:</p>

<pre><code>uchar ivec[AES_BLOCK_SIZE], ecount[AES_BLOCK_SIZE], symkey[16];
uint num = 0, bits = 128;
uchar *buf, *ebuf; /* these are malloc'd and buf set to data to encrypt/decrypt */
...
memcpy(symkey, MYTESTKEY, 16);
memset(ecount, 0, AES_BLOCK_SIZE);
memset(ivec, 0, AES_BLOCK_SIZE);
memcpy(ivec, SOMEDATA, 8); /* from RAND_seed() and RAND_bytes() */
AES_set_encrypt_key(symkey, bits, &amp;outkey);
...
AES_ctr128_encrypt(inp, outp, bytes, key, ivec, ecount, &amp;num);
</code></pre>

<p>Again, this always works when encrypting/decrypting on the same system, only decodes to junk when one of the systems is Solaris. I'm using very old Solaris OS and boxes, however, since I have to maintain backward compatibility.
Thanks in advance! </p>
","<p>Just to update, I converted to EVP but no difference. I recompiled libcrypto.so with GCC also with no difference (using solaris64-sparcv9-gcc) - until I removed the link to cc from /usr/bin. Then I recompiled using GCC again and this time it worked. I didn't have time to investigate further, but it implies that some of the objects were still being compiled with cc, even after specifying *-gcc. Unfortunately there's no GCC available for our old Solaris-x86 V9 system, so we won't be supporting V9 on intel anymore.</p>
","509","<openssl><aes><endianness><encryption-symmetric>","1","0","2","2014-05-09 22:36:19","23574986","8","1","2843756","","2014-04-26 18:13:50","2014-04-26 05:12:44",""
"5641922","Encryption example with password only ... no Salt. Does it work?","<p>I have been doing some research on creating an encryption/decryption class for use in .NET application. Time after time I read that a salt was needed in addition to the secret password. Today I have come across an encryption/decryption method that only makes use of a single password. Is there something wrong with the encryption methods used by this code as it does not seem make use of a salt?</p>

<pre><code>Public Shared Function EncryptString(ByRef input As String, ByRef password As String) As String
  Dim RijndaelManagedObject As New RijndaelManaged
  Dim crypto As ICryptoTransform, MD5Obj As New MD5CryptoServiceProvider
  Dim EncryptedBytes As Byte()
  Dim HashedBytes As Byte() = New ASCIIEncoding().GetBytes(password)
  Dim PlainTextBytes As Byte() = New ASCIIEncoding().GetBytes(input)

  RijndaelManagedObject.BlockSize = 128
  RijndaelManagedObject.KeySize = 128
  RijndaelManagedObject.Mode = CipherMode.ECB
  RijndaelManagedObject.Padding = PaddingMode.Zeros
  RijndaelManagedObject.Key = MD5Obj.ComputeHash(HashedBytes)
  crypto = RijndaelManagedObject.CreateEncryptor()
  EncryptedBytes = crypto.TransformFinalBlock(PlainTextBytes, 0, PlainTextBytes.Length)

  If EncryptedBytes.Length &gt; 0 Then
    Return Convert.ToBase64String(EncryptedBytes)
  Else
    Return String.Empty()
  End If
End Function
</code></pre>
","<p>No, there's nothing wrong with this.</p>

<p>Salting passwords is to prevent rainbow table attacks when you store those hashed passwords. In this case the password is being used to generate an encryption / decryption key and is not being stored.</p>
","505","<.net><encryption><encryption-symmetric>","0","2","2","2011-04-12 21:57:55","5641984","0","","","","","2011-04-12 21:36:46",""
"5641922","Encryption example with password only ... no Salt. Does it work?","<p>I have been doing some research on creating an encryption/decryption class for use in .NET application. Time after time I read that a salt was needed in addition to the secret password. Today I have come across an encryption/decryption method that only makes use of a single password. Is there something wrong with the encryption methods used by this code as it does not seem make use of a salt?</p>

<pre><code>Public Shared Function EncryptString(ByRef input As String, ByRef password As String) As String
  Dim RijndaelManagedObject As New RijndaelManaged
  Dim crypto As ICryptoTransform, MD5Obj As New MD5CryptoServiceProvider
  Dim EncryptedBytes As Byte()
  Dim HashedBytes As Byte() = New ASCIIEncoding().GetBytes(password)
  Dim PlainTextBytes As Byte() = New ASCIIEncoding().GetBytes(input)

  RijndaelManagedObject.BlockSize = 128
  RijndaelManagedObject.KeySize = 128
  RijndaelManagedObject.Mode = CipherMode.ECB
  RijndaelManagedObject.Padding = PaddingMode.Zeros
  RijndaelManagedObject.Key = MD5Obj.ComputeHash(HashedBytes)
  crypto = RijndaelManagedObject.CreateEncryptor()
  EncryptedBytes = crypto.TransformFinalBlock(PlainTextBytes, 0, PlainTextBytes.Length)

  If EncryptedBytes.Length &gt; 0 Then
    Return Convert.ToBase64String(EncryptedBytes)
  Else
    Return String.Empty()
  End If
End Function
</code></pre>
","<p>This code has a number of flaws:</p>

<ol>
<li>If <code>input</code> or <code>password</code> are not ASCII a silent degradation occurs. In particular non ascii <code>input</code> won't be decrypted correctly.</li>
<li>You don't use many iterations, this means that brute-forcing if really fast.</li>
<li>The lack of salt is harder to expoit here than with password hashes since the hash is not directly known. But if you encrypt files with a known beginning block(which is common with many file headers) then one could build a rainbow table for this one format. But as always rainbow tables don't gain you anything if you just try to crack a single file/hash. They only gain if you need to crack many different passwords used in the same way.</li>
<li>The ECB mode isn't recommended, since it encrypts each block separately. This makes the problem of 3) much worse, since you just need to know the plaintext of any block to build a table. In particular the last block usually has low entropy. I'd expect every 16th set of data to have only 8 bits of entropy in it. Ouch.</li>
<li>I'm not sure how <code>PaddingMode.Zeros</code> works. But it might not be possible to strip the padding since its length isn't encoded. So you might have some additional 0 bytes after decrypting.</li>
</ol>

<blockquote>
  <p>The Electronic Codebook (ECB) mode encrypts each block individually. Any blocks of plain text that are identical and in the same message, or that are in a different message encrypted with the same key, will be transformed into identical cipher text blocks. Important:  This mode is not recommended because it opens the door for multiple security exploits. If the plain text to be encrypted contains substantial repetition, it is feasible for the cipher text to be broken one block at a time. It is also possible to use block analysis to determine the encryption key. Also, an active adversary can substitute and exchange individual blocks without detection, which allows blocks to be saved and inserted into the stream at other points without detection.</p>
</blockquote>
","505","<.net><encryption><encryption-symmetric>","0","3","2","2011-04-12 21:57:55","5641984","0","","","","","2011-04-12 21:36:46",""
"5337439",".NET: Best practice to encrypt sensitive data on a client application?","<p>I need to securely store a user/password pair on a client .NET application (Outlook addin).</p>

<p>Encryption needs to be reversible, and I'd be glad to avoid storing an encryption key in my code, as it's easy to get through disassembly.</p>

<p>In fact, I'd like to access an <a href=""http://support.microsoft.com/kb/307877"" rel=""nofollow"">EFS</a>-like API to delegate the encryption to Windows.</p>

<p>Any hint on this issue? </p>
","<p>If you have access to .Net 4.0, then I'd recommend the ProtectedData class which encapsulates the windows DPAPI, the recommended way to encrypt data on the client machine in windows.  Otherwise you can P/Invoke the DPAPI directly to do it.</p>

<p>Please note that if you are trying to stop the user from reading the password, then this won't really stop them.  If they have access to their system then the DPAPI won't stop them.  Best bet is to not store the password at all and ask them to login, or if you can connect to something that uses SSPI to do integrated windows authentication then you have the best solution of all.</p>

<p>But it's tough to know what you need without knowing what you are trying to achieve.</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.aspx"" rel=""nofollow"">MSDN Link</a></p>
","505","<.net><client-side><encryption-symmetric>","1","2","1","2011-03-17 10:15:23","5337668","0","","","","","2011-03-17 09:54:41",""
"46261673","Wrong algorithm: AES or Rijndael required on c#","<p>I had andriod code and I tried to convert it to c#. It's a simple Encryption class. But when I try to decrypt data with it I catch:  <code>Wrong algorithm: AES or Rijndael required</code>.<br>
Here is my converted code:</p>

<pre><code>public static string decrypt(string data)
{
    byte[] dataBytes = Convert.FromBase64String(data);
    SecretKey secretKey = getSecretKey(hashTheKey(""ABCD""));

    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");

    cipher.init(2, secretKey, new IvParameterSpec(new byte[16]),
            SecureRandom.getInstance(""SHA1PRNG""));
    var x = cipher.doFinal(dataBytes);
    return System.Text.Encoding.UTF8.GetString(x);
}
public static SecretKey getSecretKey(char[] key)
{
    var secretKeyType = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    var secretkey = secretKeyType.generateSecret(new PBEKeySpec(key,
            System.Text.Encoding.UTF8
                .GetBytes(""ABCD""),
            100, 128)).getEncoded();

    return new SecretKeySpec(secretkey, ""AES/CBC/PKCS5Padding"");
}
public static char[] hashTheKey(string key)
{
    MessageDigest messageDigest = MessageDigest.getInstance(""SHA1"");
    messageDigest.update(System.Text.Encoding.UTF8.GetBytes(key));
    return Convert.ToBase64String(messageDigest.digest()).ToCharArray();
}
</code></pre>

<p>Here is my original android code:</p>

<pre><code>private char[] hashTheKey(String key) throws UnsupportedEncodingException, NoSuchAlgorithmException {
    MessageDigest messageDigest = MessageDigest.getInstance(""SHA1"");
    messageDigest.update(key.getBytes());
    return Base64.encodeToString(messageDigest.digest(),
                                 Base64.NO_PADDING).toCharArray();
}

private SecretKey getSecretKey(char[] key) throws NoSuchAlgorithmException, UnsupportedEncodingException, InvalidKeySpecException {
    return new SecretKeySpec(
        SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"")
        .generateSecret(new PBEKeySpec(key,
                       ""ABCD"".getBytes(""UTF8""),
                       100, 128)).getEncoded(), ""AES"");
}

public String decrypt(String data) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException, InvalidKeySpecException {
    byte[] dataBytes = Base64.decode(data, Base64.DEFAULT);
    SecretKey secretKey = getSecretKey(hashTheKey(""ABCD""));
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    cipher.init(2, secretKey, new IvParameterSpec(new byte[16]),
            SecureRandom.getInstance(""SHA1PRNG""));
    return new String(cipher.doFinal(dataBytes));
}
</code></pre>
","<p>C# does not handle the encryption algorithms as Android or java do you have to use either AES or Rijndael algorithm as you can see the error to covert to the simple text into Encrypted Base64 and vice versa you can use the following class in C#</p>

<pre><code>public static class Stringcipher
    {
        // This constant is used to determine the keysize of the encryption algorithm in bits.
        // We divide this by 8 within the code below to get the equivalent number of bytes.
        private const int Keysize = 256;

        // This constant determines the number of iterations for the password bytes generation function.
        private const int DerivationIterations = 1000;

        public static string Encrypt(string plainText, string passPhrase)
        {
            // Salt and IV is randomly generated each time, but is preprended to encrypted cipher text
            // so that the same Salt and IV values can be used when decrypting.  
            var saltStringBytes = Generate256BitsOfRandomEntropy();
            var ivStringBytes = Generate256BitsOfRandomEntropy();
            var plainTextBytes = Encoding.UTF8.GetBytes(plainText);
            using (var password = new Rfc2898DeriveBytes(passPhrase, saltStringBytes, DerivationIterations))
            {
                var keyBytes = password.GetBytes(Keysize / 8);
                using (var symmetricKey = new RijndaelManaged())
                {
                    symmetricKey.BlockSize = 256;
                    symmetricKey.Mode = CipherMode.CBC;
                    symmetricKey.Padding = PaddingMode.PKCS7;
                    using (var encryptor = symmetricKey.CreateEncryptor(keyBytes, ivStringBytes))
                    {
                        using (var memoryStream = new MemoryStream())
                        {
                            using (var cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write))
                            {
                                cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);
                                cryptoStream.FlushFinalBlock();
                                // Create the final bytes as a concatenation of the random salt bytes, the random iv bytes and the cipher bytes.
                                var cipherTextBytes = saltStringBytes;
                                cipherTextBytes = cipherTextBytes.Concat(ivStringBytes).ToArray();
                                cipherTextBytes = cipherTextBytes.Concat(memoryStream.ToArray()).ToArray();
                                memoryStream.Close();
                                cryptoStream.Close();
                                return Convert.ToBase64String(cipherTextBytes);
                            }
                        }
                    }
                }
            }
        }

        public static string Decrypt(string cipherText, string passPhrase)
        {
            // Get the complete stream of bytes that represent:
            // [32 bytes of Salt] + [32 bytes of IV] + [n bytes of CipherText]
            var cipherTextBytesWithSaltAndIv = Convert.FromBase64String(cipherText);
            // Get the saltbytes by extracting the first 32 bytes from the supplied cipherText bytes.
            var saltStringBytes = cipherTextBytesWithSaltAndIv.Take(Keysize / 8).ToArray();
            // Get the IV bytes by extracting the next 32 bytes from the supplied cipherText bytes.
            var ivStringBytes = cipherTextBytesWithSaltAndIv.Skip(Keysize / 8).Take(Keysize / 8).ToArray();
            // Get the actual cipher text bytes by removing the first 64 bytes from the cipherText string.
            var cipherTextBytes = cipherTextBytesWithSaltAndIv.Skip((Keysize / 8) * 2).Take(cipherTextBytesWithSaltAndIv.Length - ((Keysize / 8) * 2)).ToArray();

            using (var password = new Rfc2898DeriveBytes(passPhrase, saltStringBytes, DerivationIterations))
            {
                var keyBytes = password.GetBytes(Keysize / 8);
                using (var symmetricKey = new RijndaelManaged())
                {
                    symmetricKey.BlockSize = 256;
                    symmetricKey.Mode = CipherMode.CBC;
                    symmetricKey.Padding = PaddingMode.PKCS7;
                    using (var decryptor = symmetricKey.CreateDecryptor(keyBytes, ivStringBytes))
                    {
                        using (var memoryStream = new MemoryStream(cipherTextBytes))
                        {
                            using (var cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read))
                            {
                                var plainTextBytes = new byte[cipherTextBytes.Length];
                                var decryptedByteCount = cryptoStream.Read(plainTextBytes, 0, plainTextBytes.Length);
                                memoryStream.Close();
                                cryptoStream.Close();
                                return Encoding.UTF8.GetString(plainTextBytes, 0, decryptedByteCount);
                            }
                        }
                    }
                }
            }
        }

        private static byte[] Generate256BitsOfRandomEntropy()
        {
            var randomBytes = new byte[32]; // 32 Bytes will give us 256 bits.
            using (var rngCsp = new RNGCryptoServiceProvider())
            {
                // Fill the array with cryptographically secure random bytes.
                rngCsp.GetBytes(randomBytes);
            }
            return randomBytes;
        }
    }
</code></pre>
","502","<c#><algorithm><encryption><aes><encryption-symmetric>","0","-2","2","2017-09-21 04:33:43","46332986","14","3","5084960","","2017-09-21 04:33:43","2017-09-17 07:23:52",""
"46261673","Wrong algorithm: AES or Rijndael required on c#","<p>I had andriod code and I tried to convert it to c#. It's a simple Encryption class. But when I try to decrypt data with it I catch:  <code>Wrong algorithm: AES or Rijndael required</code>.<br>
Here is my converted code:</p>

<pre><code>public static string decrypt(string data)
{
    byte[] dataBytes = Convert.FromBase64String(data);
    SecretKey secretKey = getSecretKey(hashTheKey(""ABCD""));

    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");

    cipher.init(2, secretKey, new IvParameterSpec(new byte[16]),
            SecureRandom.getInstance(""SHA1PRNG""));
    var x = cipher.doFinal(dataBytes);
    return System.Text.Encoding.UTF8.GetString(x);
}
public static SecretKey getSecretKey(char[] key)
{
    var secretKeyType = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    var secretkey = secretKeyType.generateSecret(new PBEKeySpec(key,
            System.Text.Encoding.UTF8
                .GetBytes(""ABCD""),
            100, 128)).getEncoded();

    return new SecretKeySpec(secretkey, ""AES/CBC/PKCS5Padding"");
}
public static char[] hashTheKey(string key)
{
    MessageDigest messageDigest = MessageDigest.getInstance(""SHA1"");
    messageDigest.update(System.Text.Encoding.UTF8.GetBytes(key));
    return Convert.ToBase64String(messageDigest.digest()).ToCharArray();
}
</code></pre>

<p>Here is my original android code:</p>

<pre><code>private char[] hashTheKey(String key) throws UnsupportedEncodingException, NoSuchAlgorithmException {
    MessageDigest messageDigest = MessageDigest.getInstance(""SHA1"");
    messageDigest.update(key.getBytes());
    return Base64.encodeToString(messageDigest.digest(),
                                 Base64.NO_PADDING).toCharArray();
}

private SecretKey getSecretKey(char[] key) throws NoSuchAlgorithmException, UnsupportedEncodingException, InvalidKeySpecException {
    return new SecretKeySpec(
        SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"")
        .generateSecret(new PBEKeySpec(key,
                       ""ABCD"".getBytes(""UTF8""),
                       100, 128)).getEncoded(), ""AES"");
}

public String decrypt(String data) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, UnsupportedEncodingException, InvalidKeySpecException {
    byte[] dataBytes = Base64.decode(data, Base64.DEFAULT);
    SecretKey secretKey = getSecretKey(hashTheKey(""ABCD""));
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    cipher.init(2, secretKey, new IvParameterSpec(new byte[16]),
            SecureRandom.getInstance(""SHA1PRNG""));
    return new String(cipher.doFinal(dataBytes));
}
</code></pre>
","<p><a href=""/questions/tagged/c%23"" class=""post-tag"" title=""show questions tagged &#39;c#&#39;"" rel=""tag"">c#</a> and <a href=""/questions/tagged/java"" class=""post-tag"" title=""show questions tagged &#39;java&#39;"" rel=""tag"">java</a> are using the same well-estabilished cryptography algorithms, but differs in approach how to invoke them. It is still possible to convert the code though.</p>

<p>One key point is difference in base64 encoding - C# always use padding.</p>

<p>Converted code goes like:</p>

<pre><code>const int KeySize = 128;

static string HashTheKey(string key) {
  String hashKey;
  using (var sha = new SHA1Managed()) {
   hashKey = Convert.ToBase64String(sha.ComputeHash(Encoding.UTF8.GetBytes(key)));
  }
  // beware - you're on C# now so remove the padding and add the newline to match java
  return hashKey.Replace(""="", """") + ""\n"";
}

static byte[] GetSecretKey(string password) {
  var salt = Encoding.UTF8.GetBytes(""JVAaVhAiddKAaghraikhmaini"");
  using (var pass = new Rfc2898DeriveBytes(password, salt, 65536)) {
    return pass.GetBytes(KeySize / 8);
  }
}

static void Main(string[] args) {
  string encrypted = ""vtlkQHTz7/oz2weuAAkLz2Q5c2yj2LGukF7SHJjT+TA8oRLixTQSXQ7dG1O736hyT1HJxcz0P4DzzVaO5chWKKSJQ2uPEpDQJu/fZGguqDw="";
  byte[] encryptedBytes = Convert.FromBase64String(encrypted);
  using (var aes = new AesManaged()) {
    aes.KeySize = KeySize;
    aes.Padding = PaddingMode.PKCS7;
    aes.Key = GetSecretKey(HashTheKey(""Android""));
    // you're using the same init vector in your android code
    aes.IV = new byte[16];
    using (var decryptor = aes.CreateDecryptor()) {
      // dumps {""barcode"":""12345678"",""token"":""cad603fc-1e53-4a95-9150-f1694baa07f9""}
      Console.Out.WriteLine(Encoding.UTF8.GetString(decryptor.TransformFinalBlock(encryptedBytes, 0, encryptedBytes.Length)));
    }
  }
}
</code></pre>
","502","<c#><algorithm><encryption><aes><encryption-symmetric>","0","2","2","2017-09-21 04:33:43","46332986","14","3","5084960","","2017-09-21 04:33:43","2017-09-17 07:23:52",""
"47187923","PHP Encrypt and Decrypt Parameter URL in URL","<p>I'm trying to pass a download URL from page 1 to page 2 in a GET request.</p>

<p>Page 1 gets the raw URL through the database, then encrypts the URL and makes it available on the site. When it's passed through the URL, page 2 decrypts the URL and downloads the file.</p>

<p>The URL looks like this currently:</p>

<blockquote>
  <p><a href=""https://example.com/download.php?dl=x6%1A%D8j%C4%D2%9Cx%8FA%8B%29%23Y%D9%D6%B4%DE8%18%2C%7B%F4%86l%B0%0A+%D3%B1%01I%CFo%FF%BA%9C%22%A1%08%11%DB%12%282%DEi%B5%CA%14K%FF%21%CB%F3%9D%3C9f%3C%09%FA9%BB%BD%C9%B2%275%F0%06%A2%80%08h%A7f%8C%87%28%A4%A5%99%A9%A9%FA%D6f%C5%CA%9B%81.%92%CD%89%FA3%5C%0C%F0%ED%F6%D9%1E%B9%D0%B1%CFSA%F4%95k%1EZ%D1%3A%D4H%1D%93%40%087%92%88%C3%A5p%C7WH%FA%CF%9D%BAKd%A0%9A%D7a6%80%5Ex%A5%87%07AK%D7%5BQ%10%98%07%7E%82%9A%BA9%25%D5%EA%03%FD%C2%9A%22%8FBW%94k%D8T%93%F5%E3%D7-"" rel=""nofollow noreferrer"">https://example.com/download.php?dl=x6%1A%D8j%C4%D2%9Cx%8FA%8B%29%23Y%D9%D6%B4%DE8%18%2C%7B%F4%86l%B0%0A+%D3%B1%01I%CFo%FF%BA%9C%22%A1%08%11%DB%12%282%DEi%B5%CA%14K%FF%21%CB%F3%9D%3C9f%3C%09%FA9%BB%BD%C9%B2%275%F0%06%A2%80%08h%A7f%8C%87%28%A4%A5%99%A9%A9%FA%D6f%C5%CA%9B%81.%92%CD%89%FA3%5C%0C%F0%ED%F6%D9%1E%B9%D0%B1%CFSA%F4%95k%1EZ%D1%3A%D4H%1D%93%40%087%92%88%C3%A5p%C7WH%FA%CF%9D%BAKd%A0%9A%D7a6%80%5Ex%A5%87%07AK%D7%5BQ%10%98%07%7E%82%9A%BA9%25%D5%EA%03%FD%C2%9A%22%8FBW%94k%D8T%93%F5%E3%D7-</a></p>
</blockquote>

<p><strong>It contains a lot of <code>%%%</code> because it's urlencoded, is there a way to change this to make the URL less long and make it look less messy, but keep it safe as it is now?</strong></p>

<p>Hope someone can help me out.</p>

<p>This is the encryption and decryption script:</p>

<pre><code>define(""ENCRYPTION_KEY"", ""ducksandpizza"");

function encrypt($pure_string, $encryption_key) {
    $iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_ECB);
    $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
    $encrypted_string = mcrypt_encrypt(MCRYPT_BLOWFISH, $encryption_key, utf8_encode($pure_string), MCRYPT_MODE_ECB, $iv);

    return urlencode($encrypted_string);
}

function decrypt($encrypted_string, $encryption_key) {
    $iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_ECB);
    $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
    $decrypted_string = urldecode($encrypted_string);
    $decrypted_string = mcrypt_decrypt(MCRYPT_BLOWFISH, $encryption_key, $encrypted_string, MCRYPT_MODE_ECB, $iv);

    return $decrypted_string;
}

//$encrypted = encrypt($_GET['dl'], ENCRYPTION_KEY);
$decrypted = decrypt($_GET['dl'], ENCRYPTION_KEY);

//echo 'encrypted: ' . $encrypted . '&lt;br&gt;';
echo 'decrypted: ' . $decrypted . '&lt;br&gt;';
</code></pre>
","<p>Use some type of compression on the unencrypted data, like <code>gzcompress()</code> and then pass that to your encryption method, and the output of that to <code>base64_encode</code>.  Base64 encoding will still increase the overall size, but not as much as url encode does.</p>
","494","<php><url><encryption><encryption-symmetric>","-3","0","2","2017-11-08 19:40:15","","13","","","","","2017-11-08 19:18:54",""
"47187923","PHP Encrypt and Decrypt Parameter URL in URL","<p>I'm trying to pass a download URL from page 1 to page 2 in a GET request.</p>

<p>Page 1 gets the raw URL through the database, then encrypts the URL and makes it available on the site. When it's passed through the URL, page 2 decrypts the URL and downloads the file.</p>

<p>The URL looks like this currently:</p>

<blockquote>
  <p><a href=""https://example.com/download.php?dl=x6%1A%D8j%C4%D2%9Cx%8FA%8B%29%23Y%D9%D6%B4%DE8%18%2C%7B%F4%86l%B0%0A+%D3%B1%01I%CFo%FF%BA%9C%22%A1%08%11%DB%12%282%DEi%B5%CA%14K%FF%21%CB%F3%9D%3C9f%3C%09%FA9%BB%BD%C9%B2%275%F0%06%A2%80%08h%A7f%8C%87%28%A4%A5%99%A9%A9%FA%D6f%C5%CA%9B%81.%92%CD%89%FA3%5C%0C%F0%ED%F6%D9%1E%B9%D0%B1%CFSA%F4%95k%1EZ%D1%3A%D4H%1D%93%40%087%92%88%C3%A5p%C7WH%FA%CF%9D%BAKd%A0%9A%D7a6%80%5Ex%A5%87%07AK%D7%5BQ%10%98%07%7E%82%9A%BA9%25%D5%EA%03%FD%C2%9A%22%8FBW%94k%D8T%93%F5%E3%D7-"" rel=""nofollow noreferrer"">https://example.com/download.php?dl=x6%1A%D8j%C4%D2%9Cx%8FA%8B%29%23Y%D9%D6%B4%DE8%18%2C%7B%F4%86l%B0%0A+%D3%B1%01I%CFo%FF%BA%9C%22%A1%08%11%DB%12%282%DEi%B5%CA%14K%FF%21%CB%F3%9D%3C9f%3C%09%FA9%BB%BD%C9%B2%275%F0%06%A2%80%08h%A7f%8C%87%28%A4%A5%99%A9%A9%FA%D6f%C5%CA%9B%81.%92%CD%89%FA3%5C%0C%F0%ED%F6%D9%1E%B9%D0%B1%CFSA%F4%95k%1EZ%D1%3A%D4H%1D%93%40%087%92%88%C3%A5p%C7WH%FA%CF%9D%BAKd%A0%9A%D7a6%80%5Ex%A5%87%07AK%D7%5BQ%10%98%07%7E%82%9A%BA9%25%D5%EA%03%FD%C2%9A%22%8FBW%94k%D8T%93%F5%E3%D7-</a></p>
</blockquote>

<p><strong>It contains a lot of <code>%%%</code> because it's urlencoded, is there a way to change this to make the URL less long and make it look less messy, but keep it safe as it is now?</strong></p>

<p>Hope someone can help me out.</p>

<p>This is the encryption and decryption script:</p>

<pre><code>define(""ENCRYPTION_KEY"", ""ducksandpizza"");

function encrypt($pure_string, $encryption_key) {
    $iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_ECB);
    $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
    $encrypted_string = mcrypt_encrypt(MCRYPT_BLOWFISH, $encryption_key, utf8_encode($pure_string), MCRYPT_MODE_ECB, $iv);

    return urlencode($encrypted_string);
}

function decrypt($encrypted_string, $encryption_key) {
    $iv_size = mcrypt_get_iv_size(MCRYPT_BLOWFISH, MCRYPT_MODE_ECB);
    $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
    $decrypted_string = urldecode($encrypted_string);
    $decrypted_string = mcrypt_decrypt(MCRYPT_BLOWFISH, $encryption_key, $encrypted_string, MCRYPT_MODE_ECB, $iv);

    return $decrypted_string;
}

//$encrypted = encrypt($_GET['dl'], ENCRYPTION_KEY);
$decrypted = decrypt($_GET['dl'], ENCRYPTION_KEY);

//echo 'encrypted: ' . $encrypted . '&lt;br&gt;';
echo 'decrypted: ' . $decrypted . '&lt;br&gt;';
</code></pre>
","<p>While using <code>base64_encode()</code> isn't necessarily a <em>bad</em> idea, no one has mentioned that stock base64 encoding is <em>not URL-safe</em> as it uses the characters significant in URL syntax.</p>

<p>However, there's a variant that <em>is safe</em> that's used for encoding JWT tokens:</p>

<pre><code>function base64url_encode($bin) {
    return str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($bin));
}

function base64url_decode($str) {
    return base64_decode(str_replace(['-', '_'], ['+', '/'], $str));
}
</code></pre>

<p>You should also bear in mind the <code>GET</code> requests are subject to length restrictions which vary between HTTP server implementations and languages. You'll probably want to use something like <code>gzcompress()</code> as suggested in the comments, but more likely you should be passing this data in a <code>POST</code> instead.</p>
","494","<php><url><encryption><encryption-symmetric>","-3","-1","2","2017-11-08 19:40:15","","13","","","","","2017-11-08 19:18:54",""
"16786743","Using password salt as IV in password-based encryption","<p>I need to write a simplified encryption API that can easily deal with symmetric encryption, either by using a random generated key or a password-derived key.</p>

<p>The password generation is performed with the PKCS5_PBKDF2_HMAC() function from the OpenSSL library and using EVP_sha256() as hashing algorithm and a random generated 16-byte salt.</p>

<p>The symmetric encryption is performed with the OpenSSL EVP API.</p>

<p>My question is: <strong>how (in)secure is it to use the password derivation salt also as the IV for encryption?</strong></p>

<p>The reason behind this question is that this will allow me to simplify the API and the output stream in the following way:</p>

<ul>
<li>for the encryption routine, a user would have to provide either the password or the secret key; based on whichever is provided, the code can decide if a key needs to be derived from the password or use the provided key as it is;</li>
<li>similarly, for the decryption  routine, a user would have to provide either the password or the secret key; based on whichever is provided, the key could be re-derived from the password and the IV, which is also acting as a password salt (and is put first in the output stream, right before the ciphertext);</li>
<li>the output stream will consist only of the IV concatenated with the ciphertext, eliminating a separate salt;</li>
<li>the output stream will be the same for a random generated key or a password-derived key.</li>
</ul>

<p>Note: the API automatically takes care of the salt/IV generation, which is randomly generated for each encryption session, so even if a password is reused, the key is guaranteed to be different.</p>

<p>Thank you in advance for your answers.</p>
","<p>As it happens, I've run into pretty much exactly the same scenario while working on one of my own projects (where a message is encrypted in CBC-mode with a random IV, and the user can either specify a key or a textual password).</p>

<p>Similar questions are discused <a href=""https://security.stackexchange.com/questions/31516/"">here</a> and <a href=""https://security.stackexchange.com/questions/48000/"">here</a>. To summarize: the purpose of an IV is to ensure that ciphertext remains unique even if the key is reused. As long as you're generating a new IV per message like you said you are, the source of the key doesn't matter as much. Which means you're <em>probably</em> safe reusing the salt as the IV, <em>as far as anyone knows right now.</em> It doesn't even seem like it would even make sense for it to be an issue, because the salt gets put through a cryptographic hash before deriving the key in a <em>different</em> way; as long as you use a good hashing function in PBKDF2 (i.e. SHA-256 as mentioned above), a key so derived is indistinguishable from one which was randomly generated, which in this case it might have been.</p>

<p><em>However,</em> people uncover unexpected things in the world of cryptanalysis all the time, and straight-up reusing the same data in two places is considered A Bad Thing in principle even if we don't know of any practical problems <em>right this minute</em>. Should you actually be worried about this? At my level of knowledge on cryptanalysis, I'm somewhere between ""maybe"" and ""I don't know,"" which is a little too much uncertainty for my tastes, so I'm going with the ""technically safer"" course of action, which is generating separate IV and salt values. <a href=""https://stackoverflow.com/a/13915596/901469"">Transmitting both the salt and the IV is a perfectly cromulent security practice</a>, and you have nothing to lose if the user directly inputs the key and the salt goes unused.</p>
","490","<salt><encryption-symmetric><initialization-vector>","3","1","1","2015-12-22 00:58:35","34403161","4","0","2427226","","2013-05-29 07:22:09","2013-05-28 07:55:47",""
"39304066","Secure connection between client and server application","<p>I know there are many question regarding this topic, but I swear I could not find the answer that best fits my problem.</p>

<p>It's a conceptual issue. I have a client and a server application and they must connect securely. I have been googling some options to achieve so but I'm not very satisfied to any of them. </p>

<ol>
<li>The use of <strong>asymmetric keys</strong> requires the user to have a public key. This will be an opensource project so hardcoding the key in the source code is not an option. Also, I understood that using a certificate to trade the public key between both parts would avoid a <em>man in the middle</em>, but it makes me a little bit dizzy. I didn't understand very much how it can be accomplished and I don't know where I can get (for free) a valid certificate.</li>
<li>The use of <strong>symmetric keys</strong> requires both client and server to have the same key. So anyone who downloads the application would be able to access the cryptographer key and use it.</li>
</ol>

<p>I've read somewhere I could generate a random number that varies from time to time and use it to encrypt data. However, since it is an opensouce application, anyone who is able to read how this number varies over time would also be able to decrypt data, right?</p>

<p>What am I missing here? I appreciate you help. Btw, I'm using Java and it's not a web application.</p>
","","478","<security><ssl><client-server><encryption-symmetric><encryption-asymmetric>","1","","0","2016-09-03 15:59:59","","5","1","150978","","2016-09-03 15:59:59","2016-09-03 06:46:49",""
"41273130","Mifare Desfire symmetric authentication with master key on android","<p>I wanted to use the Mifare Desfire chip for product authentication purposes, where the chip would be embedded into products. As such, I am looking for a NFC solution that makes it virtually impossible(or as hard as possible) to clone the chip. </p>

<p>The current solution I had in mind using the Desfire was to use the supported symmetric authentication to have a memory-locked part of the chip where we would store the product information. Then we would create diversified keys, using a master key, UID of the chip, and some metadata and use that diversified key to conduct the symmetric authentication(more information on it can be found <a href=""http://www.nxp.com/documents/application_note/AN10969.pdf"" rel=""nofollow noreferrer"">here</a>.</p>

<p>Now, the problem lies in the fact that the symmetric authentication has to be done on an android app, meaning we would have to store the master key on the android app or send it over network to a potentially malicious version of the app. So I was wondering if anyone had a suggestion on how to protect the master key or an entirely different authentication solution to prevent chip cloning using the Mifare Desfire or other similar NFC chips. </p>
","<p>There is absolutely no way the master key would be safe in the app. </p>

<p>Instead, use your app only to send the received random number encrypted with the key to your server, and implement the process to decode this info with the master key IN your server, so you can return the response with the new random number encrypted to your app. </p>

<p>Once you are authenticated, you could also send and receive the info to write.  </p>

<p>This way you can be sure that your key and the information you handle won't be exposed to anyone. </p>

<p><strong>UPDATE</strong></p>

<p>Since you are using android, then trust me, you are gonna need this library so you can make the validation in the server without getting an 0x1C error (ILLEGAL COMMAND). This error happens when step 2 in authentication is delayed for more than 100 ms. </p>

<p><a href=""https://gist.github.com/Thorbear/f7c48e90d3e71bde13cb"" rel=""nofollow noreferrer"">https://gist.github.com/Thorbear/f7c48e90d3e71bde13cb</a></p>

<p>Hope this helps anybody with this problem</p>
","478","<android><authentication><nfc><mifare><encryption-symmetric>","1","0","2","2017-02-23 22:36:16","","0","1","","","","2016-12-21 22:40:44",""
"41273130","Mifare Desfire symmetric authentication with master key on android","<p>I wanted to use the Mifare Desfire chip for product authentication purposes, where the chip would be embedded into products. As such, I am looking for a NFC solution that makes it virtually impossible(or as hard as possible) to clone the chip. </p>

<p>The current solution I had in mind using the Desfire was to use the supported symmetric authentication to have a memory-locked part of the chip where we would store the product information. Then we would create diversified keys, using a master key, UID of the chip, and some metadata and use that diversified key to conduct the symmetric authentication(more information on it can be found <a href=""http://www.nxp.com/documents/application_note/AN10969.pdf"" rel=""nofollow noreferrer"">here</a>.</p>

<p>Now, the problem lies in the fact that the symmetric authentication has to be done on an android app, meaning we would have to store the master key on the android app or send it over network to a potentially malicious version of the app. So I was wondering if anyone had a suggestion on how to protect the master key or an entirely different authentication solution to prevent chip cloning using the Mifare Desfire or other similar NFC chips. </p>
","<p>You'll need access to the Secure Element. Depending on your use-case, you might use an external (as in over USB) Secure Element dongle. </p>
","478","<android><authentication><nfc><mifare><encryption-symmetric>","1","0","2","2017-02-23 22:36:16","","0","1","","","","2016-12-21 22:40:44",""
"21445808","What is the best way to encrypt a password symmetrically with spring","<p>I am developing a spring-mvc application running on a linux server and I have to store user passwords in the MySQL database and I need these passwords to be accessible to the users in clear text if needed.</p>

<p>As I am not going to store passwords in clear text and I cannot used hash encoders, what is the most secure way say using spring-security to store passwords</p>

<ul>
<li>which symmetric encryption to use?</li>
<li>What is the best strategy to store the key?</li>
</ul>
","","476","<spring-security><encryption-symmetric>","0","","0","2014-01-30 00:47:43","","3","","","","","2014-01-30 00:47:43",""
"39221467","How To Code A BlackBox in Python Using Homomorphic or...?","<p>I need a ""blackbox"" coded in Python...</p>

<p>...Meaning, code that receives unencrypted inputs, runs those inputs through an encrypted algorithm, then sends out unencrypted outputs.</p>

<p>I just ran across this:
<a href=""https://en.wikipedia.org/wiki/Homomorphic_encryption"" rel=""nofollow"">https://en.wikipedia.org/wiki/Homomorphic_encryption</a></p>

<p>But have no idea where to start making something like that in Python.</p>

<p>My questions for encryption experts:</p>

<ol>
<li>Can it be done using Python? </li>
<li>If so what kind of performance loss can I expect running encrypted
code?</li>
<li>Do you have some simple examples I can learn from?</li>
</ol>

<p>Thanks</p>
","","473","<python><encryption><encryption-symmetric>","0","","0","2016-08-30 07:35:10","","3","","","","","2016-08-30 07:35:10",""
"13378975","How to add more characters and letters to rot13 and Caesar encryption","<p>I want to add the letters ""ç,"" ""ğ,"" ""ı,"" ""ö"" and ""ü"" into this encrypter's alphabet, and maybe special chars, too. How can I do that?</p>

<pre><code>    for (int i = 0; i &lt; metin.length(); i++) {
        char harf = metin.charAt(i);
        if       (harf &gt;= 'a' &amp;&amp; harf &lt;= 'm') harf += i;
        else if  (harf &gt;= 'A' &amp;&amp; harf &lt;= 'M') harf += i;
        else if  (harf &gt;= 'n' &amp;&amp; harf &lt;= 'z') harf -= i;
        else if  (harf &gt;= 'N' &amp;&amp; harf &lt;= 'Z') harf -= i;
        System.out.print(harf);
    }
</code></pre>
","<p>You are using the Java intern Char's as ints to implement the cipher.
A better way would be to use a <code>String charSet = ""abcdefgh.... %&amp;/(öäüô"";</code> with the chars you want in you charSet.</p>

<pre><code>String charset = ""abcdefghijklmnopqrstuvwxyzäöü"";    
for (int i = 0; i &lt; metin.length(); i++) {
    int j = charset.indexOf(metin.charAt(i));
    if(j &lt; -1)
    {
        //deal with unknown char
    }
    if(j == charset.length)
    {
        j=0;
    }
    System.out.print(charset.charAt(j+1);
}
</code></pre>

<p>I hope you get the idea.</p>
","468","<java><encryption><encryption-symmetric><rot13>","-1","3","2","2012-11-17 21:12:42","13379261","5","0","122607","","2012-11-17 21:12:42","2012-11-14 12:38:24",""
"13378975","How to add more characters and letters to rot13 and Caesar encryption","<p>I want to add the letters ""ç,"" ""ğ,"" ""ı,"" ""ö"" and ""ü"" into this encrypter's alphabet, and maybe special chars, too. How can I do that?</p>

<pre><code>    for (int i = 0; i &lt; metin.length(); i++) {
        char harf = metin.charAt(i);
        if       (harf &gt;= 'a' &amp;&amp; harf &lt;= 'm') harf += i;
        else if  (harf &gt;= 'A' &amp;&amp; harf &lt;= 'M') harf += i;
        else if  (harf &gt;= 'n' &amp;&amp; harf &lt;= 'z') harf -= i;
        else if  (harf &gt;= 'N' &amp;&amp; harf &lt;= 'Z') harf -= i;
        System.out.print(harf);
    }
</code></pre>
","<p>You can make the strategy more general like this.</p>

<pre><code>String text = ""abcdefghijklmnopqrstuvwxyz0123456789!$%^&amp;*()äöü"";

for (int i = 0; i &lt; text.length(); i++) {
    char ch = text.charAt(i);
    ch--;
    if (ch % 32 &lt; 13)
        ch += 13;
    else if (ch % 32 &lt; 26)
        ch -= 13;
    else if (ch % 32 &lt; 29)
        ch += 3;
    else
        ch -= 3;
    ch++;
    System.out.print(ch);
}
</code></pre>

<p>prints</p>

<pre><code>nopqrstuvwxyzabcdefghijklm#$%&amp;'()*+,.12[3756ñéÿ
</code></pre>
","468","<java><encryption><encryption-symmetric><rot13>","-1","2","2","2012-11-17 21:12:42","13379261","5","0","122607","","2012-11-17 21:12:42","2012-11-14 12:38:24",""
"37636744","Can we use the key as the IV for AES?","<p>I wish to be more efficient in generating a random key and a random IV for the encryption. But is it workable and safe to use the random key as the IV?</p>
","<p>You could but it would not be secure.</p>

<p>The usual practice is to use a cryptographically secure random byte sequence for the iv and to prepend the iv to the encrypted data. This allows the decryption function to have the same iv.</p>

<p>By using a random iv if the same message is encrypted with the same key the cipher text will be different, usia the key will allow the same cipher text. Having the same cipher text may give away crucial information.</p>

<p>Trading efficiency for security is not a good idea and if it is not proven that the extra efficiency is needed by benchmark testing it is premature optimization. </p>

<p>Donald Knuth:</p>

<blockquote>
  <p>The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.</p>
</blockquote>
","466","<encryption><aes><encryption-symmetric><symmetric-key>","2","1","2","2016-06-05 15:46:51","37637819","1","","1816580","","2016-06-05 07:05:07","2016-06-05 01:59:35",""
"37636744","Can we use the key as the IV for AES?","<p>I wish to be more efficient in generating a random key and a random IV for the encryption. But is it workable and safe to use the random key as the IV?</p>
","<p>You are doubling your security problem.  An ordinary IV can be sent as-is with the cyphertext message, usually prepended to it.  If your IV is the same as the key, then you have to keep the IV as secure as the key, which means you can't do the usual prepending.  You will have to add an 'IV exchange' process to your 'key exchange' process.</p>

<p>All that is extra work.  Easier to use a standard CSPRNG to produce your IV and prepend it.</p>
","466","<encryption><aes><encryption-symmetric><symmetric-key>","2","0","2","2016-06-05 15:46:51","37637819","1","","1816580","","2016-06-05 07:05:07","2016-06-05 01:59:35",""
"43743250","Using libsodium XChaCha20-Poly1305 for large files","<p>I was looking through <em>libsodium</em>, and in particular at the symmetric encryption option <a href=""https://download.libsodium.org/doc/secret-key_cryptography/xchacha20-poly1305_construction.html"" rel=""nofollow noreferrer""><code>XChaCha20-Poly1305</code></a>. What I can't get my head around is that <em>libsodium</em> appears to provide no ""context/update/finalise"" style of working that you commonly find in crypto libraries.</p>

<p>It is clear from the <em>libsodium</em> that there is ""no practical limit"" to the size of a XChaCha20-Poly1305 message. However in practical terms, if I'm encrypting a multi-GB file, I'm not quite clear as to how you would use libsodium for that ?  Because obviously you would only be passing the contents of the <code>fread</code> buffer to <code>crypto_aead_xchacha20poly1305_ietf_encrypt</code>?</p>

<p><strong>IMPORTANT NOTE TO THOSE WHO THINK THIS IS OFF TOPIC</strong></p>

<p>After bowing to peer pressure, I did delete this post. However I have re-opened it at the request of @MaartenBodewes who felt strongly that it was on-topic, and so strongly that he put in some effort into writing an answer. Therefore out of respect for his effort, I have undeleted the post. Please, spare me more ""off-topic"" comments, I've read enough of them!</p>
","<p>In the introduction of libsodium it reads: ""Its goal is to provide all of the core operations needed to build higher-level cryptographic tools.""</p>

<p>Libsodium is therefore a <em>relatively</em> high level library that provides limited access to the underlying structures.</p>

<hr>

<p>That said, there are some inherent difficulties of encrypting such large files using an <em>authenticated cipher</em>. The problem is that you either need to first verify the authenticity and <em>then</em> start to decrypt or you need to decrypt <em>online</em> before verifying the authentication tag. That in turn means that you have to write / destroy the contents if verification fails.</p>

<p>Generally you can get around that by encrypting in e.g. blocks of 16KiB or so and then add an authentication tag for the block. Of course you would need to make sure that you increase the nonce (making sure that the counter of the stream cipher doesn't repeat). This will add some overhead of course, but nothing spectacular - and you'd have some overhead anyway. The disadvantage is that you cannot decrypt in place anymore (as that would leave gaps).</p>

<p>You could also store all the authentication tags at the end if you want to make a really advanced scheme. Or buffer all the authentication tags in memory and calculate a single (HMAC) tag over all the collected tags.</p>

<p>So calling <code>crypto_aead_xchacha20poly1305_ietf_encrypt</code> multiple times could be considered an option. You may want to calculate a file specific key if you go that way so you can start your nonce at zero.</p>

<hr>

<p>If you just want confidentiality of the file stored you could consider leaving out the authentication tag. In that case you can manually influence the counter used to create the key stream using <a href=""https://download.libsodium.org/doc/advanced/xchacha20.html"" rel=""nofollow noreferrer""><code>int crypto_stream_xchacha20_xor_ic</code></a>:</p>

<blockquote>
  <p>This permits direct access to any block without having to compute the previous ones.</p>
</blockquote>

<p>Obviously you can still add an authentication tag using HMAC-SHA-2 which is also available in libsodium, but this will be rather slower than using poly1305.</p>

<hr>

<p>Finally, libsodium is open source. If you're exceedingly brave you could go into the gory details and construct your own context/update/finalize. The algorithm certainly supports it (hint: never buffer the authentication tag or nonce during decryption routines if you go this route - directly decrypt).</p>
","464","<c><encryption><encryption-symmetric>","2","3","1","2017-05-02 22:21:40","43748014","6","1","589259","","2017-05-02 22:14:57","2017-05-02 16:47:33",""
"27334372","Symmetric encryption Java passing nonce","<p>I currently have one method that is running on my SERVER SIDE that returns a randomly generated string that looks like this;</p>

<pre><code>public String returnString(){
        String randString = nextSessionId();
        return randString;      
}
</code></pre>

<p>On my CLIENT SIDE I have a method that asks for a randomString from the SERVER, encrypts it with the client's key, seals it in a SealedObject and then replies with the SealedObject, it looks like this;</p>

<pre><code>public boolean validateClient(String loggedInKey) throws Exception{

    /* Testing */
    String randString = this.aI.returnString(); // Client requests a string/ server returns
    System.out.println(""This is what the server gave me: ""+randString);

    String encryptionKey = loggedInKey;
    SecretKeySpec key = new SecretKeySpec(encryptionKey.getBytes(""UTF-8""), ""AES"");

    Cipher ecipher = Cipher.getInstance(""AES"");
    ecipher.init(Cipher.ENCRYPT_MODE, key);

    SealedObject sealedClientReply = new SealedObject(randString, ecipher); // Client encrypts returned string seals it
    System.out.println(""This is what I'm sending back: ""+sealedClientReply);
    if(this.aI.clientValidate(sealedClientReply, loggedInKey)){
        System.out.println(""Client validated!"");
        return true;
    }else{
        return false;
    }       
}
</code></pre>

<p>I then have a method on my SERVER that takes this SealedObject, unseals it and uses the Client's key that it shares with it to decrypt the SealedObject, hopefully producing the same key that the Server sent to the client, it looks like this;</p>

<pre><code>public boolean clientValidate(SealedObject sealedClientReply, String loggedInKey) throws Exception{ 

    String encryptionKey = loggedInKey;
    SecretKeySpec key = new SecretKeySpec(encryptionKey.getBytes(""UTF-8""), ""AES"");

    Cipher dcipher = Cipher.getInstance(""AES"");
    dcipher.init(Cipher.DECRYPT_MODE, key);

    sealedClientReply.getObject(dcipher); // Server decrypts object
    System.out.println(""I received this from the client: ""+sealedClientReply);
    String decryptedClientReply= (String) sealedClientReply.getObject(dcipher);
    System.out.println(""This is what I received decrypted: ""+decryptedClientReply);


    //if(decryptedClientReply.equals(randString)){
    //  return true;
    //}else{
    //  return false;
    //}
    return true;
}
</code></pre>

<p>In my mind this approach worked great, and was very secure. However I now have one major flaw. As you can see in the commented out code in the last method, the decryptedClientReply cannot equal the randString, because the method that is doing this compare doesn't actually know what randString the server sent to the client in the first place.</p>

<p>If I pass the randString into this method, is it still secure? If it is not secure is there another way I could carry out this symmetric approach?</p>
","","463","<java><rmi><encryption-symmetric>","0","","0","2014-12-06 17:25:38","","2","2","","","","2014-12-06 17:25:38",""
"22679781","Database column encryption in sql server?","<p>in my database i used database column encryption using symmetric key. I followed this tutorial  <a href=""http://blog.sqlauthority.com/2009/04/28/sql-server-introduction-to-sql-server-encryption-and-symmetric-key-encryption-tutorial-with-script/"" rel=""nofollow"">http://blog.sqlauthority.com/2009/04/28/sql-server-introduction-to-sql-server-encryption-and-symmetric-key-encryption-tutorial-with-script/</a> . it uses symmetric key and it is not visible to others. But a database admin can see the encrypted column by executing query that calling symmetric key.</p>

<pre><code>USE EncryptTest
GO
OPEN SYMMETRIC KEY TestTableKey DECRYPTION
BY CERTIFICATE EncryptTestCert
SELECT CONVERT(VARCHAR(50),DECRYPTBYKEY(EncryptSecondCol)) AS DecryptSecondCol
FROM TestTable
GO
</code></pre>

<p>I need a encryption in database level and database admin also should not able decrypt the column. is it possible in database level encryption?</p>
","<p>If you don't want a DBA who is a member of the sysadmin role on that instance to have any access to the keys, then you cannot allow the database to do the encryption.</p>

<p>Even if you try using the PASSWORD option of <a href=""http://technet.microsoft.com/en-us/library/ms188357.aspx"" rel=""nofollow"">CREATE SYMMETRIC KEY</a>, the DBA can use Profiler to see the password inside of the SQL statements.  The DBA certainly has access to the Master Key (and may already have a backup of it).</p>

<p>You will need to have your application do the encryption if you want to hide data from DBA's.</p>

<p>Or you can trust your DBA's with the data they're protecting.</p>
","463","<sql-server-2008><encryption><encryption-symmetric>","1","0","2","2019-04-12 10:02:27","","0","","","","","2014-03-27 06:21:05",""
"22679781","Database column encryption in sql server?","<p>in my database i used database column encryption using symmetric key. I followed this tutorial  <a href=""http://blog.sqlauthority.com/2009/04/28/sql-server-introduction-to-sql-server-encryption-and-symmetric-key-encryption-tutorial-with-script/"" rel=""nofollow"">http://blog.sqlauthority.com/2009/04/28/sql-server-introduction-to-sql-server-encryption-and-symmetric-key-encryption-tutorial-with-script/</a> . it uses symmetric key and it is not visible to others. But a database admin can see the encrypted column by executing query that calling symmetric key.</p>

<pre><code>USE EncryptTest
GO
OPEN SYMMETRIC KEY TestTableKey DECRYPTION
BY CERTIFICATE EncryptTestCert
SELECT CONVERT(VARCHAR(50),DECRYPTBYKEY(EncryptSecondCol)) AS DecryptSecondCol
FROM TestTable
GO
</code></pre>

<p>I need a encryption in database level and database admin also should not able decrypt the column. is it possible in database level encryption?</p>
","<p>Since this question was asked, SQL Server 2016 has been released and the Enterprise Edition contains a feature called Always Encrypted, which is design with a certificate in a client driver encrypting a column encryption key on the server that performs the encryption. I would recommend putting the ""client"" on a middleware server like IIS for websites and web services where the certificate can be better protected.</p>

<p>A second solution to encryption beyond the reach of the DBA is to introduce an Extensible Key Management system. Support for this is also an Enterprise only feature. An Extensible Key Management system is a separate expansion board or system interfaced with SQL Server to offload all key management and encryption processing that can be put under the administration of a different team than the DBA.</p>

<p>Third, you can design a solution which includes dropping the private key of the certificate and having it in a location that is not accessible to the DBA. When the private key is dropped from a certificate in an encryption hierarchy, then the data can only be encrypted. </p>
","463","<sql-server-2008><encryption><encryption-symmetric>","1","0","2","2019-04-12 10:02:27","","0","","","","","2014-03-27 06:21:05",""
"36680200","Bitwise Operations on type byte vs byte[]","<p>Here is the bit of code I'm working with: </p>

<pre><code>byte[] encodedBytes1 = null;
byte[] encodedBytes2 = null;
try {
    Cipher c = Cipher.getInstance(encryptationMode);
    c.init(Cipher.ENCRYPT_MODE, key);
    encodedBytes1 = c.doFinal(TestText1.getBytes());
    encodedBytes2 = c.doFinal(TestText2.getBytes());
} catch (Exception e) {
    //Log.e(TAG, ""AES encryption error"");
}
byte[] encodedHomo = null;
boolean encoded1_2 = TestText1.getBytes() || TestText2.getBytes();
</code></pre>

<p>So I'm trying to do bitwise operations on <code>encodedBytes1</code> and <code>encodedBytes2</code> and make that new value <code>encodedHomo</code> (my project is homomorphic encryption on AES algorithm). Why can't I perform bitwise operation operations on type <code>byte[]</code>? What is, if any, the difference between the type <code>byte</code> and <code>byte[]</code>? </p>
","<p>Bitwise operations work on primitive data types, an array is not a primitive data type.</p>

<p>The bitwise OR operation, for example, has a well defined behavior for numbers but not for compound objects (which are not simply <em>'made of bits'</em>).</p>
","460","<java><types><byte><bitwise-operators><encryption-symmetric>","-1","-1","3","2016-04-17 18:15:50","","2","","3764965","","2016-04-17 18:05:35","2016-04-17 18:04:28","2016-04-17 18:22:26"
"36680200","Bitwise Operations on type byte vs byte[]","<p>Here is the bit of code I'm working with: </p>

<pre><code>byte[] encodedBytes1 = null;
byte[] encodedBytes2 = null;
try {
    Cipher c = Cipher.getInstance(encryptationMode);
    c.init(Cipher.ENCRYPT_MODE, key);
    encodedBytes1 = c.doFinal(TestText1.getBytes());
    encodedBytes2 = c.doFinal(TestText2.getBytes());
} catch (Exception e) {
    //Log.e(TAG, ""AES encryption error"");
}
byte[] encodedHomo = null;
boolean encoded1_2 = TestText1.getBytes() || TestText2.getBytes();
</code></pre>

<p>So I'm trying to do bitwise operations on <code>encodedBytes1</code> and <code>encodedBytes2</code> and make that new value <code>encodedHomo</code> (my project is homomorphic encryption on AES algorithm). Why can't I perform bitwise operation operations on type <code>byte[]</code>? What is, if any, the difference between the type <code>byte</code> and <code>byte[]</code>? </p>
","<p>If you want to do a bitwise OR between two byte arrays you need to do this for each byte.</p>

<pre><code>public static byte[] bitwiseOr(byte[] bytes1, byte[] bytes2) {
    if (bytes1.length &lt; bytes2.length)
       return bitwiseOr(bytes2, bytes1);
    // bytes1 is never shorter than bytes2
    byte[] ret = bytes1.clone();
    for (int i = 0; i &lt; bytes2.length; i++)
        ret[i] |= bytes2[i];
    return ret;
}
</code></pre>

<p>Note: there is no <code>||</code> operation for two <code>byte</code> or two <code>byte[]</code> There is only <code>|</code> for two <code>byte</code></p>
","460","<java><types><byte><bitwise-operators><encryption-symmetric>","-1","0","3","2016-04-17 18:15:50","","2","","3764965","","2016-04-17 18:05:35","2016-04-17 18:04:28","2016-04-17 18:22:26"
"36680200","Bitwise Operations on type byte vs byte[]","<p>Here is the bit of code I'm working with: </p>

<pre><code>byte[] encodedBytes1 = null;
byte[] encodedBytes2 = null;
try {
    Cipher c = Cipher.getInstance(encryptationMode);
    c.init(Cipher.ENCRYPT_MODE, key);
    encodedBytes1 = c.doFinal(TestText1.getBytes());
    encodedBytes2 = c.doFinal(TestText2.getBytes());
} catch (Exception e) {
    //Log.e(TAG, ""AES encryption error"");
}
byte[] encodedHomo = null;
boolean encoded1_2 = TestText1.getBytes() || TestText2.getBytes();
</code></pre>

<p>So I'm trying to do bitwise operations on <code>encodedBytes1</code> and <code>encodedBytes2</code> and make that new value <code>encodedHomo</code> (my project is homomorphic encryption on AES algorithm). Why can't I perform bitwise operation operations on type <code>byte[]</code>? What is, if any, the difference between the type <code>byte</code> and <code>byte[]</code>? </p>
","<p>Java ain't C. Your <code>byte[]</code> objects aren't pointers to lots of bits.</p>

<p>You have to do your bitwise ops on <em>each</em> <code>byte</code> in the <code>byte[]</code>s spearately.</p>
","460","<java><types><byte><bitwise-operators><encryption-symmetric>","-1","-1","3","2016-04-17 18:15:50","","2","","3764965","","2016-04-17 18:05:35","2016-04-17 18:04:28","2016-04-17 18:22:26"
"34387485","ObjectInputStream blocks forever during readObject()","<p>I'm trying to handle out a secured connection with a self made Server and client.
At first the client connects to the server and sends per ObjectOutputStream an PublicKey object to the server.
The server answers with an encrypted AES key, then both establish an AES encrypted input- and outputstream.</p>

<p>But the client keeps blocking during receiving the AES key.</p>

<p>Thats my client code:</p>

<pre><code>private void createServerConnection(String serverAddress) throws IOException {
    connection = new Socket(serverAddress, 5555);
    InputStream is = connection.getInputStream();
    OutputStream os = connection.getOutputStream();
    ObjectOutputStream oos = new ObjectOutputStream(os);
    ObjectInputStream ois = new ObjectInputStream(is);
    try {
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
        KeyPair kp = kpg.genKeyPair();
        oos.writeObject(kp.getPublic());
        Cipher ci = Cipher.getInstance(""RSA"");
        ci.init(Cipher.DECRYPT_MODE, kp.getPrivate());
        byte[] aesKey = (byte[]) ois.readObject();
        aesKey = ci.doFinal(aesKey);
        SecretKey originalKey = new SecretKeySpec(aesKey, 0, aesKey.length, ""AES"");

        Cipher aesCipherD = Cipher.getInstance(""AES"");
        aesCipherD.init(Cipher.DECRYPT_MODE, originalKey);

        Cipher aesCipherE = Cipher.getInstance(""AES"");
        aesCipherE.init(Cipher.ENCRYPT_MODE, originalKey);

        this.oos = new ObjectOutputStream(new CipherOutputStream(os, aesCipherE));
        this.ois = new ObjectInputStream(new CipherInputStream(is, aesCipherD));

    } catch(NoSuchAlgorithmException nsae) {

    } catch(ClassNotFoundException cnfe) {

    } catch(NoSuchPaddingException nspe) {

    } catch(InvalidKeyException ike) {

    } catch(IllegalBlockSizeException ibse) {

    } catch(BadPaddingException bpe) {

    }
}
</code></pre>

<p>And thats my server:</p>

<pre><code>   public void run() {
    try {
        //Verbindung Aufbauen
        Socket s = server.accept();
        System.out.println(""Eingehede Verbindung von "" + s.getInetAddress().toString());
        new JSecSocket(server).start();
        OutputStream os = s.getOutputStream();
        InputStream is = s.getInputStream();
        ObjectOutputStream oos = new ObjectOutputStream(os);
        ObjectInputStream ois = new ObjectInputStream(is);
        System.out.println(""Verbindung aufgebaut!"");

        //PublicKey vom Client entgegennehmen
        System.out.println(""Öffentlicher Schlüssel wird empfangen."");
        PublicKey clientPublicKey = (PublicKey) ois.readObject();

        //AES Key verschlüsseln und zum Client übertragen
        System.out.println(""AES Schlüssel wird gesendet."");
        Cipher keyCipher = Cipher.getInstance(""RSA"");
        keyCipher.init(Cipher.ENCRYPT_MODE, clientPublicKey);
        byte[] encryptetKey = keyCipher.doFinal(this.aesSk.getEncoded());
        oos.write(encryptetKey);

        System.out.println(""Verschlüsselte Verbindung wird aufgebaut!"");
        Cipher encryptCipher = Cipher.getInstance(""AES"");
        encryptCipher.init(Cipher.ENCRYPT_MODE, aesSk);

        Cipher decryptCipher = Cipher.getInstance(""AES"");
        decryptCipher.init(Cipher.DECRYPT_MODE, aesSk);

        //Verschlüsselte Datenströme werden geöffnet
        oos = new ObjectOutputStream(new CipherOutputStream(os, encryptCipher));
        ois = new ObjectInputStream(new CipherInputStream(is, decryptCipher));
        System.out.println(""Verbindung bereit!"");
        while (!this.isInterrupted()) {
            NetworkStatus ns = (NetworkStatus) ois.readObject();
            JSecDatabase database = new JSecDatabase(""localhost"", ""root"", """", ""database"");
            switch (ns.getAction()) {
                case ""lookup"":
                    System.out.println(""Lookup von"" + s.getInetAddress().toString());
                    String target = (String) ns.getValue();
                    try {
                        oos.writeObject(new NetworkStatus(""lookupOk"", database.lookup(target)));
                    } catch (Exception e) {
                        oos.writeObject(new NetworkStatus(""lookupError"", e));
                    }
                    break;
                case ""create"":
                    System.out.println(""User wird erstellt von "" + s.getInetAddress().toString());
                    oos.writeObject(new NetworkStatus(""createOk"", database.create()));
                    break;
                case ""update"":
                    System.out.println(""User wird geupdated von"" + s.getInetAddress().toString());
                    String[] updateTarget = (String[]) ns.getValue();
                    if (database.update(updateTarget[0], updateTarget[1], s.getInetAddress().toString())) {
                        oos.writeObject(new NetworkStatus(""updateOk"", s.getInetAddress().toString()));
                    } else {
                        oos.writeObject(new NetworkStatus(""updateError"", null));
                    }
                    break;
                case ""delete"":

                    break;
                default:
                case ""close"":
                    System.out.println(""Verbindung zu "" + s.getInetAddress().toString() + "" wird getrennt!"");
                    oos.close();
                    ois.close();
                    os.close();
                    is.close();
            }
        }

    } catch (IOException ioe) {
        System.err.println(""Es gab einen IO Error.\n"" + ioe.getMessage());
    } catch (ClassNotFoundException cnfe) {
        System.err.println(cnfe.getMessage());
    } catch (NoSuchAlgorithmException nsae) {
        System.err.println(nsae.getMessage());
    } catch (NoSuchPaddingException nspe) {
        System.err.println(nspe.getMessage());
    } catch (InvalidKeyException ike) {
        System.err.println(ike.getMessage());
    } catch (IllegalBlockSizeException ibse) {
        System.err.println(ibse.getMessage());
    } catch (BadPaddingException bpe) {
        System.err.println(bpe.getMessage());
    }
    sockets.remove(this);
}}
</code></pre>

<p>I think its more a problem with the objectstreams, everytime i try to work with objectstreams on a socket i got similar problems.
Does someone had an idea whats there happening ?</p>
","<p>You can't use multiple streams over the same socket in general. There are specific cases where it works but in general you're up against unknown buffering which will get your peers out of sync quick as a wink. Redo it with a single <code>ObjectOutputStream</code> and <code>ObjectInputStream</code>at each end. If you only need to encrypt certain parts of the stream, look into <code>SealedObject</code>.</p>
","459","<java><sockets><serversocket><encryption-symmetric><encryption-asymmetric>","1","0","1","2015-12-21 02:39:50","","12","","5539364","","2015-12-21 02:30:25","2015-12-21 00:30:12",""
"16495524","PKCS#11 Soft Token for supporting symmetric function","<p>For testing my codes, I need a PKCS#11 soft token which support symmetric functions like AES, DES, ...
Which PKCS#11 soft token support at least one symmetric function?</p>
","<p>I found OpenCryptokey:</p>

<p><a href=""http://www.ibm.com/developerworks/linux/library/s-pkcs/"" rel=""nofollow"">http://www.ibm.com/developerworks/linux/library/s-pkcs/</a></p>

<p>This Soft Token has symmetric functions.</p>
","456","<aes><des><encryption-symmetric><pkcs#11>","0","0","1","2013-05-11 12:54:37","16497306","0","","","","","2013-05-11 09:06:02",""
"29000852","Using ursa (nodejs module) to generate a symmetric key?","<p>I'm using <a href=""https://github.com/quartzjer/ursa"" rel=""nofollow""><code>ursa</code></a> (nodejs module) to do the following:</p>

<ul>
<li>Use a private key and someone else's public key to generate a symmetric key</li>
<li>Encrypt some data with the symmetric key</li>
<li>Encrypt the symmetric key with the user's public key</li>
</ul>

<p>However, I can't seem to find any methods that allow me to create a symmetric key. My understanding is that simply generating a pseudo-random byte string should be good enough for the key, but then I can't use the rest of the method in <code>ursa</code> to actually encrypt anything because it's a random string and not a key/cert.</p>

<p>Am I missing anything?</p>
","<p>U<strong>RSA</strong> as the name suggests is an RSA implementation and as such doesn't not handle symmetric encryption. If you want those, then you can use node.js' native <a href=""https://nodejs.org/api/crypto.html"" rel=""nofollow""><code>crypto</code></a> module which provides everything you need in this regard.</p>

<blockquote>
  <ul>
  <li>Encrypt the symmetric key with the user's public key</li>
  </ul>
</blockquote>

<p>This means that the symmetric key is simply data. URSA doesn't have to know what this is.</p>
","454","<node.js><encryption><rsa><encryption-symmetric>","0","1","1","2015-03-12 16:00:42","29014591","0","","","","","2015-03-12 02:22:34",""
"8383367","Can symmetric key encryption instead of ssl handshake for socket communication improve connection speed?","<p>I need to implement tcp socket communication between server and iOS client. I am thinking of using symmetric key encryption for securing data sent through the channel. I will be storing symmetric key inside the application which I think should be secure. (there won't be any handshake of key) </p>

<p>However, I am not sure whether going for symmetric key encryption over ssl socket will improve connection speed significantly?</p>

<p>My requirement is connection should be established as soon as possible when user launches application.
Can anyone point me in right direction?</p>
","<p>The speed issue with TLS is only associated with the public-key handshake. As Bruno commented TLS uses symmetric encrypion post-handshake.</p>

<p>If public-key handshake adds too much latency for this particular application you should not use the shared-secret scheme that you are proposing with a shared encryption key. If you use the same key for each connection the ciphertext is vulnerable to attacks analyzing ciphertext of multiple sessions. Instead you need to apply a scheme for using a ""shared secret"" (which is never used directly for encryption) to negotiate a unique encryption key for each connection. Plus you need some protocol for data integrity validation on transmitted data.</p>

<p>All of this is tricky business to get right, so if possible you should probably go with TLS.</p>
","452","<ssl><encryption-symmetric>","0","2","1","2011-12-05 11:42:47","8384765","6","","270290","","2011-12-05 10:30:15","2011-12-05 09:41:39",""
"48310173","Decrypt a des string in to plain text","<p>I need to decrypt a string encrypted with des algorithm. How can I do in PHP? I have real test cases as follows:</p>

<pre><code>key ='0123456789abcdef'
encryptedValue = '88C10F0B8C084E5F'; //hex value
decodedValue = '2020202039353538';  // this is hex
</code></pre>

<p>I've tried 

<pre><code>$keyValue ='0123456789abcdef';
$encryptedValue = '88C10F0B8C084E5F'; //hex value
$decodedValue = '2020202039353538';  // this is hex

$decryptedData = mcrypt_decrypt( MCRYPT_DES, $keyValue, $encryptedValue , 'ecb');
var_dump($decryptedData);
var_dump($decodedValue);
</code></pre>

<p><strong>Output of decryptedData is null.</strong> I checked <a href=""https://stackoverflow.com/a/10747435/7544279"">this solution</a>. Please suggest me a solution.</p>

<p>Update:2017 Jan 18:
Many people are suggeting me not use des or mcrypt. <strong>I need to decrypt this because my API provider reponds me with this algorithm.</strong> <strong>And about <code>mcrypt_decrypt</code> function, I did not find an alternative</strong>. Now please suggest me more.</p>

<p>I tried according to @duskwuff, I made modifications as.</p>

<pre><code>$decryptedData = mcrypt_decrypt( MCRYPT_DES, $keyValue, hex2bin($encryptedValue) 'ecb');
var_dump(bin2hex($decryptedData));
</code></pre>

<p>Output is <strong>empty string</strong> which is obviously binary representation of <code>bool false</code></p>

<p>For you convenience I want to share the result of crypto calculator.<a href=""https://i.stack.imgur.com/9Tivr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/9Tivr.png"" alt=""enter image description here""></a>
I'm getting this <strong>warning</strong> as well:<code>Warning: mcrypt_decrypt(): Key of size 16 not supported by this algorithm. Only keys of size 8 supported in /var/www/html/encdec/enc.phtml on line 13</code></p>
","<p>The values you're passing into <code>mcrypt_decrypt()</code> look like they're intended to be a representation of hexadecimal data, not passed in directly. Use <code>hex2bin()</code> on the inputs to convert them to binary data, and <code>bin2hex()</code> to convert the output back to the expected representation.</p>

<p>Also, stop using mcrypt. It's old and broken, and has been removed from PHP 7.2.</p>
","445","<php><encryption><encryption-symmetric>","0","2","2","2018-01-18 08:11:03","48316534","6","","7544279","","2018-01-18 05:41:36","2018-01-17 21:21:01",""
"48310173","Decrypt a des string in to plain text","<p>I need to decrypt a string encrypted with des algorithm. How can I do in PHP? I have real test cases as follows:</p>

<pre><code>key ='0123456789abcdef'
encryptedValue = '88C10F0B8C084E5F'; //hex value
decodedValue = '2020202039353538';  // this is hex
</code></pre>

<p>I've tried 

<pre><code>$keyValue ='0123456789abcdef';
$encryptedValue = '88C10F0B8C084E5F'; //hex value
$decodedValue = '2020202039353538';  // this is hex

$decryptedData = mcrypt_decrypt( MCRYPT_DES, $keyValue, $encryptedValue , 'ecb');
var_dump($decryptedData);
var_dump($decodedValue);
</code></pre>

<p><strong>Output of decryptedData is null.</strong> I checked <a href=""https://stackoverflow.com/a/10747435/7544279"">this solution</a>. Please suggest me a solution.</p>

<p>Update:2017 Jan 18:
Many people are suggeting me not use des or mcrypt. <strong>I need to decrypt this because my API provider reponds me with this algorithm.</strong> <strong>And about <code>mcrypt_decrypt</code> function, I did not find an alternative</strong>. Now please suggest me more.</p>

<p>I tried according to @duskwuff, I made modifications as.</p>

<pre><code>$decryptedData = mcrypt_decrypt( MCRYPT_DES, $keyValue, hex2bin($encryptedValue) 'ecb');
var_dump(bin2hex($decryptedData));
</code></pre>

<p>Output is <strong>empty string</strong> which is obviously binary representation of <code>bool false</code></p>

<p>For you convenience I want to share the result of crypto calculator.<a href=""https://i.stack.imgur.com/9Tivr.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/9Tivr.png"" alt=""enter image description here""></a>
I'm getting this <strong>warning</strong> as well:<code>Warning: mcrypt_decrypt(): Key of size 16 not supported by this algorithm. Only keys of size 8 supported in /var/www/html/encdec/enc.phtml on line 13</code></p>
","<p>I solved my issue by using following code:</p>

<pre><code>$keyValue ='0123456789abcdef'; //hex value
$encryptedOrderId = '88C10F0B8C084E5F'; //hex value
$decodeValueByOnlineTool = '2020202039353538';  // this is hex
$opensslDecrypt = openssl_decrypt(  hex2bin($encryptedOrderId)  , 'des-ecb' , hex2bin($keyValue) , OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING , '' );
var_dump($opensslDecrypt);
</code></pre>
","445","<php><encryption><encryption-symmetric>","0","0","2","2018-01-18 08:11:03","48316534","6","","7544279","","2018-01-18 05:41:36","2018-01-17 21:21:01",""
"43133468","SQL Encryption - Why does the Master Key automatically refer to the Certificate?","<p>I just recently came in touch with MS SQL Encryption, where I used a Master Key, a Certificate and a Symmetric Key.
When I tried to DEcrypt it, I've had quite the hard time getting through the key opening in the right order.
Essentially I wrote something like this:</p>

<p><code>OPEN MASTER KEY BY PASSWORD ('Password')</code></p>

<p><code>OPEN CERTIFICATE BY MASTER KEY</code></p>

<p><code>OPEN SYMMETRIC KEY SSN_01 BY CERTIFICATE</code></p>

<p>which obviously didn't work, and no it's not exactly what I wrote it's just to give you an idea of what I did. Now I eventually figured out that I only needed to open the Master Key and then open the Symmetric Key by the Certificate. My question is why?
Why have the Master Key and the Certificate been automatically linked? </p>
","<p>Think of it this way: once you have the master key open, when you go to open the symmetric key, SQL Server will say ""Hmm… the certificate that protects that is locked. Do I have the means to unlock it?"". And, sure enough, it does! Assuming that the certificate's private key is encrypted with the database master key, of course You can check <code>sys.key_encryptions</code> to see what encrypts/protects what and <code>sys.openkeys</code> to see what keys you have open in this session.</p>
","437","<sql><sql-server><encryption><encryption-symmetric>","1","1","1","2017-03-31 14:48:39","43143593","0","","923426","","2017-03-31 06:06:00","2017-03-31 06:01:49",""
"31984816","JCE generated keys in Keysafe / nCipher","<p>I am following the nCipher example to store symmettric keys in HSM and use from java program.</p>

<pre><code> KeyGenerator kg = KeyGenerator.getInstance(""AES"", ""nCipherKM"");
 SecretKey k = kg.generateKey();
 ks.setKeyEntry(""MyAESKey"", k, null, null); 
</code></pre>

<p>Then I call below methods to save the key in security world. I am told I should be able to see them in KeySafe.</p>

<pre><code>  FileOutputStream out = new FileOutputStream(""keystore.dat"");
  ks.store(out, null);
  out.close();  
</code></pre>

<p>I end up with two keys in KeySafe instead of one, and key names have nothing to the with the alias I used.</p>

<p>key_jcecsp_4912eadb0f19581317f02ce427b5f1ca3c872ef3-key-bb6328f32b6fbcae5787dde37640b37eb02ed97e</p>

<p>and </p>

<p>key_jcecsp_4912eadb0f19581317f02ce427b5f1ca3c872ef3</p>

<p>I have three questions:</p>

<ol>
<li>Even though I gave a nice alias such as ""MyAESKey"" the key shows up with a long oid of some sort. How can I get it to appear with a proper name in KeySafe?</li>
<li>Why do I get 2 entries instead of one? Which one is the key?</li>
<li>What is the significance of ""keystore.dat"" - why am I not interfacing directly with the key files under C:\ProgramData\nCipher\Key Management Data\local ?</li>
</ol>

<p>Thanks!</p>

<p>Vedat</p>
","<p>Vedat, </p>

<p>KeySafe doesn't know about JCE (which is ironic as it is itself a Java program).  It shows you the underlying objects in the Security World.  You're getting one actual key file containing your key data (encrypted by the HSM master key) and the plaintext alias (""MyAESKey""), and one file representing the KeyStore.  If you open up your keystore.dat file with a text editor, you'll see that it contains an identifier that shows up in the filename of the other files: this is how the software ties things together.  </p>

<p>The files in Key Management Data\local are completely abstracted away by the JCE KeyStore API implementation: all you need to reference the keys in a KeyStore is the file for it: keystore.dat in your example.</p>
","437","<encryption-symmetric><jce><hsm>","1","2","1","2015-08-14 05:17:32","","0","","","","","2015-08-13 09:47:28",""
"53487247","Encrypting JWT security token supported algorithms","<p>I'm trying to sign and encode my JWt with this snippet:</p>

<pre><code>var claims = new Claim[] { new SomeClaimes() };
var scKey = Encoding.UTF8.GetBytes(""SOME KEY"");
var ecKey = Encoding.UTF8.GetBytes(""SOME OTHER KEY"");
var tokenDescriptor = new SecurityTokenDescriptor {
    Subject = new ClaimsIdentity(claims),
    SigningCredentials = new SigningCredentials(
        new SymmetricSecurityKey(
            scKey),
            SecurityAlgorithms.HmacSha512),
    EncryptingCredentials = new EncryptingCredentials(
        new SymmetricSecurityKey(
            ecKey),
            // I tryied all possible combination of algorithms here:
            SecurityAlgorithms.XXXX,
            SecurityAlgorithms.YYYY), 
    Issuer = ""My Jwt Issuer"",
    Audience = ""My Jwt Audience"",
    IssuedAt = DateTime.UtcNow,
    Expires = DateTime.Now.AddDays(7),
};
var tokenHandler = new JwtSecurityTokenHandler();
var token = tokenHandler.CreateJwtSecurityToken(tokenDescriptor);
var jwt = tokenHandler.WriteToken(token);
</code></pre>

<p>But when I run the code, I get error:</p>

<blockquote>
  <p>Encryption failed. No support for: Algorithm: '{0}', SecurityKey: '{1}'.</p>
</blockquote>

<p>Which <code>{0}</code> and <code>{1}</code> are any combination of <code>XXXX</code> and <code>YYYY</code> in the code above (yes, I wrote a reflection snippet and have tried all possible combination of them). Which are supported algorithms for encoding (and decoding) a signed JWT?</p>
","<p>HmacSha512 use just one key to sign or verify token, try algorithm like RsaSha256 to public / private key encryption.</p>
","430","<c#><.net-core><jwt><encryption-symmetric><netcoreapp2.1>","4","0","2","2018-11-27 17:24:00","53504830","0","2","","","","2018-11-26 18:46:32",""
"53487247","Encrypting JWT security token supported algorithms","<p>I'm trying to sign and encode my JWt with this snippet:</p>

<pre><code>var claims = new Claim[] { new SomeClaimes() };
var scKey = Encoding.UTF8.GetBytes(""SOME KEY"");
var ecKey = Encoding.UTF8.GetBytes(""SOME OTHER KEY"");
var tokenDescriptor = new SecurityTokenDescriptor {
    Subject = new ClaimsIdentity(claims),
    SigningCredentials = new SigningCredentials(
        new SymmetricSecurityKey(
            scKey),
            SecurityAlgorithms.HmacSha512),
    EncryptingCredentials = new EncryptingCredentials(
        new SymmetricSecurityKey(
            ecKey),
            // I tryied all possible combination of algorithms here:
            SecurityAlgorithms.XXXX,
            SecurityAlgorithms.YYYY), 
    Issuer = ""My Jwt Issuer"",
    Audience = ""My Jwt Audience"",
    IssuedAt = DateTime.UtcNow,
    Expires = DateTime.Now.AddDays(7),
};
var tokenHandler = new JwtSecurityTokenHandler();
var token = tokenHandler.CreateJwtSecurityToken(tokenDescriptor);
var jwt = tokenHandler.WriteToken(token);
</code></pre>

<p>But when I run the code, I get error:</p>

<blockquote>
  <p>Encryption failed. No support for: Algorithm: '{0}', SecurityKey: '{1}'.</p>
</blockquote>

<p>Which <code>{0}</code> and <code>{1}</code> are any combination of <code>XXXX</code> and <code>YYYY</code> in the code above (yes, I wrote a reflection snippet and have tried all possible combination of them). Which are supported algorithms for encoding (and decoding) a signed JWT?</p>
","<p>Finally I found the answer:</p>

<pre><code>var claims = new Claim[] { new SomeClaimes() };
var scKey = Encoding.UTF8.GetBytes(""SOME KEY"");
var ecKeyTemp = Encoding.UTF8.GetBytes(""SOME OTHER KEY"");

// Note that the ecKey should have 256 / 8 length:
byte[] ecKey = new byte[256 / 8];
Array.Copy(ecKeyTemp, ecKey, 256 / 8);

var tokenDescriptor = new SecurityTokenDescriptor {
    Subject = new ClaimsIdentity(claims),
    SigningCredentials = new SigningCredentials(
        new SymmetricSecurityKey(
            scKey),
            SecurityAlgorithms.HmacSha512),
    EncryptingCredentials = new EncryptingCredentials(
        new SymmetricSecurityKey(
            ecKey),
            SecurityAlgorithms.Aes256KW,
            SecurityAlgorithms.Aes256CbcHmacSha512), 
    Issuer = ""My Jwt Issuer"",
    Audience = ""My Jwt Audience"",
    IssuedAt = DateTime.UtcNow,
    Expires = DateTime.Now.AddDays(7),
};
var tokenHandler = new JwtSecurityTokenHandler();
var token = tokenHandler.CreateJwtSecurityToken(tokenDescriptor);
var jwt = tokenHandler.WriteToken(token);
</code></pre>

<p>As you ca see, using <code>SecurityAlgorithms.Aes256KW</code> as the <em>key encryption algorithm</em> and <code>SecurityAlgorithms.Aes256CbcHmacSha512</code> as the <em>encryption algorithm</em> will do the job. Note that the key used to encryption algorithm should have <code>256 / 8</code> length.</p>
","430","<c#><.net-core><jwt><encryption-symmetric><netcoreapp2.1>","4","2","2","2018-11-27 17:24:00","53504830","0","2","","","","2018-11-26 18:46:32",""
"23900563","Can we decrypt (symmetric encryption/decryption) messages using OpenSSL in C without knowing the size of the plaintext?","<p>I am using the following code to encrypt and decrypt binary data with C in windows using openssl. As you can see, in both functions, I know the size of the plain text. Is there any way I can decrypt messages without knowing the size of the plain text?</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;openssl/des.h&gt;
char * Encrypt(char *Key, char *Msg, int size)
    {
    static char*    Res;
    int             n = 0;
    DES_cblock      Key2;
    DES_key_schedule schedule;
    Res = (char *)malloc(size);
    /* Prepare the key for use with DES_cfb64_encrypt */
    memcpy(Key2, Key, 8);
    DES_set_odd_parity(&amp;Key2);
    DES_set_key_checked(&amp;Key2, &amp;schedule);
    /* Encryption occurs here */
    DES_cfb64_encrypt((unsigned char *)Msg, (unsigned char *)Res,size, &amp;schedule, &amp;Key2, &amp;n, DES_ENCRYPT);
    return (Res);
}
char * Decrypt(char *Key, char *Msg, int size)
{
    static char*    Res;
    int             n = 0;
    DES_cblock      Key2;
    DES_key_schedule schedule;
    Res = (char *)malloc(size);
    /* Prepare the key for use with DES_cfb64_encrypt */
    memcpy(Key2, Key, 8);
    DES_set_odd_parity(&amp;Key2);
        DES_set_key_checked(&amp;Key2, &amp;schedule);
    /* Decryption occurs here */
    DES_cfb64_encrypt((unsigned char *)Msg, (unsigned char *)Res,size, &amp;schedule, &amp;Key2, &amp;n, DES_DECRYPT);
    return (Res);
}
int _tmain(int argc, _TCHAR* argv[])
{
    char key[] = ""password"";
    char clear[] = ""This is a secret message"";
    char *decrypted;
    char *encrypted;
    encrypted = (char *)malloc(sizeof(clear));
    decrypted = (char *)malloc(sizeof(clear));
    printf(""Clear text\t : %s : sizeof: %i\n"", clear, strlen (clear));
    memcpy(encrypted, Encrypt(key, clear, sizeof(clear)), sizeof(clear));
    printf(""Encrypted text\t : %s sizeof: %i\n"", encrypted, strlen(encrypted));
    memcpy(decrypted, Decrypt(key, encrypted, sizeof(clear)), sizeof(clear));
    printf(""Decrypted text\t : %s sizeof: %i\n"", decrypted, strlen(decrypted));
    return 0;
}
</code></pre>
","<p>With just cipher feedback? Sure thing, as long as you know where the block boundaries are you are golden (i.e. you need to know <em>where</em> you are in the ciphertext).</p>
","426","<c><encryption><openssl><encryption-symmetric>","2","0","1","2014-05-28 00:48:49","","2","","","","","2014-05-27 23:29:33",""
"19885468","using java to encrypt/decrypt files return wrong number of bytes when using padding","<p>I'm trying to make an application that encrypts / decrypt and it is working fine when I use a cipher mode without padding. With padding, the number of blocks is unpredictable and I cant find the source of the problem. </p>

<p>I am using the following code to test:</p>

<pre><code>private static final int KEY_LEN = 16;
private static final String ENCRYPTION_ALGO = ""AES"";
private static final String HASHING_ALGO = ""SHA-256""; 
private static final String CIPHER_MODE = ""AES/CFB/PKCS5Padding"";
private static final String ENCODING = ""UTF-8"";

static private byte[] initVector;
static private SecretKey key;
static Cipher cipher;

private static SecretKey generateKey(byte[] password) {
    MessageDigest md = MessageDigest.getInstance(HASHING_ALGO);

    byte[] hashedKey = md.digest(password);

    return new SecretKeySpec(hashedKey, 0, KEY_LEN, ENCRYPTION_ALGO);
}

public static byte[] getIV() {
    return initVector;
}

public static void setup(String password) 
{

    key = generateKey(password.getBytes(ENCODING));

    cipher = Cipher.getInstance (CIPHER_MODE);
    cipher.init (Cipher.ENCRYPT_MODE, key);
    AlgorithmParameters params = cipher.getParameters ();

    initVector = params.getParameterSpec (IvParameterSpec.class).getIV();
}

public static void setup(String password, byte[] iv)
{
    key = generateKey(password.getBytes(ENCODING));

    cipher = Cipher.getInstance (CIPHER_MODE);

    // define init vector that was used for encryption
    cipher.init (Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
}

private static byte[] crypt(byte[] plaintext, boolean hasNext) 
    if (hasNext) {
        return cipher.update(plaintext);
    }else {
        return cipher.doFinal(plaintext);
    }
}

public static void main(String [] args)
{
    try {
        File input = new File (""input.txt"");
        File eoutput = new File (""output.enc"");
        File doutput = new File (""decrypted.txt"");

        FileInputStream fin = new FileInputStream(input);
        FileOutputStream fout = new FileOutputStream (eoutput);

        byte [] buffer = new byte [32];
        int nBytes;

        //encrypt
        setup(""password"");

        while ((nBytes = fin.read(buffer))!=-1) {
            byte[] cyphertext;
            if (nBytes &lt; buffer.length) {
                byte[] trimbuffer = new byte [nBytes];
                System.arraycopy(buffer, 0, trimbuffer, 0, nBytes);
                cyphertext = crypt(trimbuffer, false);
            }else {
                cyphertext = crypt(buffer, true);
            }
            fout.write(cyphertext);
        }
        fin.close();
        fout.close();

        FileInputStream fin2 = new FileInputStream(eoutput);
        FileOutputStream fout2 = new FileOutputStream (doutput);            

        byte[] iv = getIV();

        // decrypt
        setup(""password"",iv);
        while ((nBytes = fin2.read(buffer))!=-1) {
            byte[] plaintext;
            if (nBytes &lt; buffer.length) {
                byte[] trimbuffer = new byte [nBytes];
                System.arraycopy(buffer, 0, trimbuffer, 0, nBytes);

                plaintext = crypt(trimbuffer, false);
            }else {
                plaintext = crypt(buffer, true);
            }
            fout2.write(plaintext);
        }

        fin2.close();
        fout2.close();

  }
</code></pre>

<p>I forgot to mention that the problem seems to be in decryption side.</p>
","<p>I just found the problem after lots of testing. The problem is that when I read files and the last block had the exact same size of the buffer, I was always calling crypt(buffer, true) that does a cipher.update() insted of cipher.doFinal()</p>
","423","<java><encryption><aes><encryption-symmetric>","1","1","1","2013-11-10 11:45:45","19889322","2","6","1304344","","2013-11-10 11:06:05","2013-11-10 02:05:40",""
"52561005","Not able to initialize cipher.init()","<p>I am trying to read a file of size 1KB, then encrypting and decrypting it with AES algorithm in CBC mode. When I am trying to initialize cipher it is throwing an error. Please find the code below.
I could not find an init method in cipher class which accepts ""encryption mode"", ""secret key"", and the initialization vector of class IvParameterSpec. I can see init method with expecting parameters like(int encryption mode, Key key, AlgorithmParameters algoParameters, SecureRandom secureRandom)</p>

<p>Do I need to convert my key and initialization vector to the required class. 
Any insights to proceed further would be helpful.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>import sun.security.provider.SecureRandom;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import java.io.File;
import java.security.AlgorithmParameters;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidParameterSpecException;

public class AESFileEncryptionDecryption {
    public class AES128CBC{
        SecretKey secretKey;
        Cipher cipher;
        SecureRandom secureRandom = new SecureRandom();
        byte[] iv = new byte[16];
        IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);

        {
            try {
                secretKey = KeyGenerator.getInstance(""AES"").generateKey();
                cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
                cipher.init(1,secretKey,ivParameterSpec);
            } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
                e.printStackTrace();
            }
        }
        }
    }
    public static void main(String[] args) {
        File inputFile_1KB = new File(""/Users/siddharthsinha/Desktop/input1KB.txt"");
        File encryptedFile_1KB = new File(""/Users/siddharthsinha/Desktop/input1KB.encrypted"");
        File decryptedFile_1KB = new File(""/Users/siddharthsinha/Desktop/input1KB.decrypted.txt"");
    }
}</code></pre>
</div>
</div>
</p>

<p><a href=""https://i.stack.imgur.com/A7ijR.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/A7ijR.png"" alt=""enter image description here""></a></p>
","<p>your code is neither catching nor throwing two possibly thrown exceptions:</p>

<pre><code>try {
            secretKey = KeyGenerator.getInstance(""AES"").generateKey();
            cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
            cipher.init(1,secretKey,ivParameterSpec);
        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (InvalidAlgorithmParameterException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        }
</code></pre>
","419","<java><aes><encryption-symmetric><block-cipher>","0","2","1","2018-09-28 19:23:13","52561526","1","","","","","2018-09-28 18:36:38",""
"49548556","password encryption techniques and secure key transfer using angularjs and .net","<p>I have an application which uses AngularJs 1.5 as front end and .net framework as a backend.In my application,  I have to store username and password on the database which comes from the front end.The requirement is:</p>

<ol>
<li>AngularJs will encrypt the password and send it to the backend</li>
<li>On the backend, encrypted password will get stored in the database.</li>
<li>In the backend code, there is a place where we have to call a third
party web API and have to pass the username and decrypted form of password
for authentication purpose.</li>
</ol>

<p>Put it in a nutshell, front-end should encrypt the password and backend should have the ability to decrypt it.</p>

<p>I have analyzed many techniques for secure transaction of the password.</p>

<ol>
<li>Hashing: It is the best method to securely transfer a password.But
the problem is, we can't reverse the hashed password to its original form.According to my requirement, I have to reverse the hashed password to its original form since we have to pass the original form of password for authentication to a third party API.</li>
<li>The symmetric algorithm uses the same key for decryption and
encryption.So it is necessary to share the key securely to front end and backend.It is not a good method if we hard code the key value on both sides.</li>
<li>The asymmetric algorithm uses the public and private key for
encryption and decryption respectively.So I think this is much more secure than above two techniques.Since an intruder who has public
key can't decrypt the password.</li>
</ol>

<p>I am new to encryption and decryption handling with <code>angularjs</code>.My query is about key handling.How we can securely store the key both in front-end and backend rather than hardcoding them in the code.Is there any secure way for sharing these keys.Which algorithm is best suited for my requirement?(from my analysis, I found that asymmetric is the better option for this requirement.If I am wrong please correct me).</p>

<p>Thanks in advance for all responses</p>
","<p>Please read this article
<a href=""https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/"" rel=""nofollow noreferrer"">Using a token-based authentication design over cookie-based authentication.</a></p>
","417","<.net><angularjs><encryption-symmetric><encryption-asymmetric><key-management>","1","1","2","2018-07-04 09:06:42","51169875","0","","7357920","","2018-03-29 05:31:51","2018-03-29 05:19:35",""
"49548556","password encryption techniques and secure key transfer using angularjs and .net","<p>I have an application which uses AngularJs 1.5 as front end and .net framework as a backend.In my application,  I have to store username and password on the database which comes from the front end.The requirement is:</p>

<ol>
<li>AngularJs will encrypt the password and send it to the backend</li>
<li>On the backend, encrypted password will get stored in the database.</li>
<li>In the backend code, there is a place where we have to call a third
party web API and have to pass the username and decrypted form of password
for authentication purpose.</li>
</ol>

<p>Put it in a nutshell, front-end should encrypt the password and backend should have the ability to decrypt it.</p>

<p>I have analyzed many techniques for secure transaction of the password.</p>

<ol>
<li>Hashing: It is the best method to securely transfer a password.But
the problem is, we can't reverse the hashed password to its original form.According to my requirement, I have to reverse the hashed password to its original form since we have to pass the original form of password for authentication to a third party API.</li>
<li>The symmetric algorithm uses the same key for decryption and
encryption.So it is necessary to share the key securely to front end and backend.It is not a good method if we hard code the key value on both sides.</li>
<li>The asymmetric algorithm uses the public and private key for
encryption and decryption respectively.So I think this is much more secure than above two techniques.Since an intruder who has public
key can't decrypt the password.</li>
</ol>

<p>I am new to encryption and decryption handling with <code>angularjs</code>.My query is about key handling.How we can securely store the key both in front-end and backend rather than hardcoding them in the code.Is there any secure way for sharing these keys.Which algorithm is best suited for my requirement?(from my analysis, I found that asymmetric is the better option for this requirement.If I am wrong please correct me).</p>

<p>Thanks in advance for all responses</p>
","<p>Not sure if this is still relevant to you, but here comes. These are quite high level and broad questions you are asking, so I'm providing you some general guidance.</p>

<p>I would definitely use asymmetric encryption for this. I'd most likely pick something like RSA OAEP which produces different cipher text on the same input each time thanks to the random padding. This way an attacker won't learn that much from the cipher text that he could manage to intercept.</p>

<p>The key exchange is a trickier topic as your end-user software most likely runs in a browser (being an Angular app). One way to handle this could be to wrap your public key in a certificate that can be verified in the browser.</p>

<p>There are also many other attacks and aspects you need to consider. For example how to protect your system against replay attacks and how to rotate your keys while still meeting your availability requirements. Covering all topics in this answer is not possible them to being too broad, so I leave it here.</p>
","417","<.net><angularjs><encryption-symmetric><encryption-asymmetric><key-management>","1","0","2","2018-07-04 09:06:42","51169875","0","","7357920","","2018-03-29 05:31:51","2018-03-29 05:19:35",""
"26672227","How to add our created session encryption algorithm to (major) browser using OpenSSL","<p>I am new to OpenSSL and have theoretical information in SSL protocol . I have task to create a certificate who uses RSA algorithm for symmetric session key exchange and use my own my encryption algorithm called <code>FooSymmetricAlgorithm</code> for symmetric session key. I need a way to tell the browser and web server to use <code>FooSymmetricAlgorithm</code> as symmetric algorithm. I know I can import my root certificate to browser but I think that does not mean I can add my encryption <strong>algorithm</strong> to browser. <strong>My problem is that how I can tell the browser to use <code>FooSymmetricAlgorithm</code> for session key and encryption</strong>. It does not difference between browser. It is suffice to have an browser and I will use it just for test purpose.</p>

<p>I want to know that is there any way when I send digital certificate to browser, the browser forced to use my <code>FooSymmetricAlgorithm</code> for encrypting data? I mean is there any way to add my algorithm to browser?</p>
","<blockquote>
  <p>My problem is that how I can tell the browser to use FooSymmetricAlgorithm for session key and encryption.</p>
</blockquote>

<p>You have to add your own cipher suite to the browser, which means changes to the source code in NSS (Chrome, Firefox). Then you have to make changes to the TLS stack used by the server and add the cipher suite there. For details how to do this see the implementation of the existing cipher suites in OpenSSL and/or NSS. Since the cipher suite is not <a href=""https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-4"" rel=""nofollow"">IANA assigned</a> you have to use one of the cipher-ids marked for private use.</p>

<p>If everything is done correctly the browser will announce support for the new cipher suite and the server will use it. But all this process is not as simple as adding a root certificate, that means it involves lots of coding, reading existing source code etc.</p>
","416","<ssl><encryption><openssl><encryption-symmetric>","0","3","1","2015-08-02 12:17:38","26683716","4","","1816580","","2015-08-02 12:17:38","2014-10-30 14:47:07",""
"31986698","Generate exportable AES keys in nCipher with JCE","<p>I need to use nCipher HSM to generate AES256 keys and then export(write to file) them in external systems.</p>

<pre><code>KeyGenerator kg = KeyGenerator.getInstance(""AES"", ""nCipherKM"");
kg.init(256);
SecretKey key = kg.generateKey();
//No problem until here
byte[] raw = key.getEncoded();
</code></pre>

<p>Throws a security exception. Wont give out the key. So I used below approach. Are both keys generated the same way ? Is there a better way to accomplish what I need?</p>

<pre><code>SecureRandom random = SecureRandom.getInstance(""RNG"", ""nCipherKM"");
byte[] rand = new byte[32];
random.nextBytes(rand);
SecretKey key = new SecretKeySpec(rand, ""AES"");
byte[] raw = key.getEncoded();
</code></pre>

<p>Thanks,</p>

<p>Vedat</p>
","<p>Vedat, the nCipherKM Provider generates actual key material on the Hardware Security Module(s) it connects to.  The HSM is designed to not let you have the actual key bits: keeping those secret is its purpose in life.  </p>

<p>The second sequence will obtain random data from the HSM's random generator, which is a NIST Special Publication 800-90A compliant Deterministic Random Bit Generator seeded by hardware-based entropy.  This is the same type of random material the HSM uses internally to generate keys.  Since you don't seem to have any HSM protection requirements for the resulting keys, you should be good to go.  </p>
","414","<encryption-symmetric><jce><hsm>","1","2","1","2015-08-14 05:12:28","","0","","","","","2015-08-13 11:18:10",""
"7440410","How to resolve error while implementing DES encrypt/decrypt in asp.net?","<p>I am trying to implement DES encryption in asp.net application from the given link:</p>

<p><a href=""http://www.codeproject.com/KB/cs/NET_Encrypt_Decrypt.aspx"" rel=""nofollow noreferrer""><strong>DES encrypt/decrypt</strong></a> </p>

<p>as per given code its working fine but if i add one more character in bytes variable its throwing exception</p>

<pre><code>static byte[] bytes = ASCIIEncoding.ASCII.GetBytes(""ZeroCool""); //Working fine
static byte[] bytes = ASCIIEncoding.ASCII.GetBytes(""ZeroCoola""); //throwing exception
</code></pre>

<p><img src=""https://i.stack.imgur.com/BPbjs.png"" alt=""enter image description here""></p>

<p>Anybody have idea how to resolve this one?</p>

<p>Is there any limit of 8 character in DES encryption?</p>

<p>Thanks</p>
","<p>DES supports 56-bit keys, so you can't add another one. Actually 56 bits = 7 bytes, so I supposed <code>""Zerocool""</code> worked because all the characters are standard ASCII, and those only take 7 bits each.</p>

<p>That being said...</p>

<ol>
<li><p>DES is a really old cipher. A 56-bit key can be easily bruteforced by a modern home computer. You should be using ciphers that support larger keys, like AES.</p></li>
<li><p>I read this at the end of the article:</p></li>
</ol>

<blockquote>
  <p>Using DES, you can encrypt or decrypt users' passwords or something else, and you can delve into the algorithm if you like.</p>
</blockquote>

<p>Which has got me concerned. Passwords should never be encrypted. On the basis of that statement alone, I would disregard the entire article as useless.</p>
","406","<asp.net><encryption><encryption-symmetric>","1","2","2","2011-09-16 05:39:34","7440444","0","","","","","2011-09-16 05:16:34",""
"7440410","How to resolve error while implementing DES encrypt/decrypt in asp.net?","<p>I am trying to implement DES encryption in asp.net application from the given link:</p>

<p><a href=""http://www.codeproject.com/KB/cs/NET_Encrypt_Decrypt.aspx"" rel=""nofollow noreferrer""><strong>DES encrypt/decrypt</strong></a> </p>

<p>as per given code its working fine but if i add one more character in bytes variable its throwing exception</p>

<pre><code>static byte[] bytes = ASCIIEncoding.ASCII.GetBytes(""ZeroCool""); //Working fine
static byte[] bytes = ASCIIEncoding.ASCII.GetBytes(""ZeroCoola""); //throwing exception
</code></pre>

<p><img src=""https://i.stack.imgur.com/BPbjs.png"" alt=""enter image description here""></p>

<p>Anybody have idea how to resolve this one?</p>

<p>Is there any limit of 8 character in DES encryption?</p>

<p>Thanks</p>
","<p>The line :</p>

<p><code>static byte[] bytes = ASCIIEncoding.ASCII.GetBytes(""ZeroCool"");</code></p>

<p>Is not a byte array of the string you're trying to encrypt, it's the key for the encryption process.</p>

<p>It is used in conjunction with the initialization vector (IV) in setting up the encryption. </p>

<p><code>writer.Write(originalString);</code></p>

<p>Is where you should be looking if you're quering the encryption output. </p>
","406","<asp.net><encryption><encryption-symmetric>","1","1","2","2011-09-16 05:39:34","7440444","0","","","","","2011-09-16 05:16:34",""
"54171959","BadPadding exception when trying to decrypt AES based encrypted text","<p><strong>Problem Scenario:</strong>   I am creating an encrypted file using OpenSSL AES-256-CBC mode in Ubuntu.</p>

<pre><code>openssl aes-256-cbc -a -in avengers.txt -out avengers.enc 
test
test
File Content: avengersAssemble
avengers.enc file content: U2FsdGVkX194TyUFrb4gOn86XYaKjKP98YdOlQDJz+t/76mvVmNKl+NyKKUnYwYH

To Decrypt: openssl aes-256-cbc -a -d -in avengers.enc
</code></pre>

<p>Now I want to decrypt this encrypted file <code>avengers.enc</code> using java code i.e., I just store this file content and password (in this case test) to decrypt it. </p>

<p><strong>My Aim:</strong> I want to decrypt using a password (symmetric encryption), encrypted from above command (128 or 192 or 256 cbc).</p>

<p>Please help.</p>

<p>I found <a href=""https://stackoverflow.com/questions/11783062/how-to-decrypt-file-in-java-encrypted-with-openssl-command-using-aes"">this</a> code but its showing BadPadding exception. Please refer answer post by <code>@Maarten Bodewes</code> in the link.</p>

<p>Code which I found from the link:</p>

<pre><code>import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.security.GeneralSecurityException;
import java.security.MessageDigest;
import java.util.Arrays;
import java.util.List;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.bouncycastle.util.encoders.Base64;

public class OpenSSLDecryptor {
    private static final Charset ASCII = Charset.forName(""ASCII"");
    private static final int INDEX_KEY = 0;
    private static final int INDEX_IV = 1;
    private static final int ITERATIONS = 1;

    private static final int ARG_INDEX_FILENAME = 0;
    private static final int ARG_INDEX_PASSWORD = 1;

    private static final String file = 
    ""D:\\Eclipse_Workspace\\Cryptography\\avengers.enc"";
     private static final String password = ""test"";

    private static final int SALT_OFFSET = 8;
    private static final int SALT_SIZE = 8;
    private static final int CIPHERTEXT_OFFSET = SALT_OFFSET + SALT_SIZE;

    private static final int KEY_SIZE_BITS = 256;

    /**
     * Thanks go to Ola Bini for releasing this source on his blog.
     * The source was obtained from &lt;a href=""http://olabini.com/blog/tag/evp_bytestokey/""&gt;here&lt;/a&gt; .
     */
    public static byte[][] EVP_BytesToKey(int key_len, int iv_len, MessageDigest md,
            byte[] salt, byte[] data, int count) {
        byte[][] both = new byte[2][];
        byte[] key = new byte[key_len];
        int key_ix = 0;
        byte[] iv = new byte[iv_len];
        int iv_ix = 0;
        both[0] = key;
        both[1] = iv;
        byte[] md_buf = null;
        int nkey = key_len;
        int niv = iv_len;
        int i = 0;
        if (data == null) {
            return both;
        }
        int addmd = 0;
        for (;;) {
            md.reset();
            if (addmd++ &gt; 0) {
                md.update(md_buf);
            }
            md.update(data);
            if (null != salt) {
                md.update(salt, 0, 8);
            }
            md_buf = md.digest();
            for (i = 1; i &lt; count; i++) {
                md.reset();
                md.update(md_buf);
                md_buf = md.digest();
            }
            i = 0;
            if (nkey &gt; 0) {
                for (;;) {
                    if (nkey == 0)
                        break;
                    if (i == md_buf.length)
                        break;
                    key[key_ix++] = md_buf[i];
                    nkey--;
                    i++;
                }
            }
            if (niv &gt; 0 &amp;&amp; i != md_buf.length) {
                for (;;) {
                    if (niv == 0)
                        break;
                    if (i == md_buf.length)
                        break;
                    iv[iv_ix++] = md_buf[i];
                    niv--;
                    i++;
                }
            }
            if (nkey == 0 &amp;&amp; niv == 0) {
                break;
            }
        }
        for (i = 0; i &lt; md_buf.length; i++) {
            md_buf[i] = 0;
        }
        return both;
    }


    public static void main(String[] args) {
        try {
            // --- read base 64 encoded file ---

            //File f = new File(args[ARG_INDEX_FILENAME]);
            File f = new File(file);
            List&lt;String&gt; lines = Files.readAllLines(f.toPath(), ASCII);
            StringBuilder sb = new StringBuilder();
            for (String line : lines) {
                sb.append(line.trim());
            }
            String dataBase64 = sb.toString();
            byte[] headerSaltAndCipherText = Base64.decode(dataBase64);

            // --- extract salt &amp; encrypted ---

            // header is ""Salted__"", ASCII encoded, if salt is being used (the default)
            byte[] salt = Arrays.copyOfRange(
                    headerSaltAndCipherText, SALT_OFFSET, SALT_OFFSET + SALT_SIZE);
            byte[] encrypted = Arrays.copyOfRange(
                    headerSaltAndCipherText, CIPHERTEXT_OFFSET, headerSaltAndCipherText.length);

            // --- specify cipher and digest for EVP_BytesToKey method ---

            Cipher aesCBC = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");

            // --- create key and IV  ---

            // the IV is useless, OpenSSL might as well have use zero's
            final byte[][] keyAndIV = EVP_BytesToKey(
                    KEY_SIZE_BITS / Byte.SIZE,
                    aesCBC.getBlockSize(),
                    md5,
                    salt,
                    password.getBytes(ASCII),
                    ITERATIONS); //args[ARG_INDEX_PASSWORD]
            SecretKeySpec key = new SecretKeySpec(keyAndIV[INDEX_KEY], ""AES"");
            IvParameterSpec iv = new IvParameterSpec(keyAndIV[INDEX_IV]);

            // --- initialize cipher instance and decrypt ---

            aesCBC.init(Cipher.DECRYPT_MODE, key, iv);
            byte[] decrypted = aesCBC.doFinal(encrypted);

            String answer = new String(decrypted, ASCII);
            System.out.println(answer);
        } catch (BadPaddingException e) {
            // AKA ""something went wrong""
            throw new IllegalStateException(
                    ""Bad password, algorithm, mode or padding;"" +
                    "" no salt, wrong number of iterations or corrupted ciphertext."");
        } catch (IllegalBlockSizeException e) {
            throw new IllegalStateException(
                    ""Bad algorithm, mode or corrupted (resized) ciphertext."");
        } catch (GeneralSecurityException e) {
            throw new IllegalStateException(e);
        } catch (IOException e) {
            throw new IllegalStateException(e);
        }
    }        
}
</code></pre>

<p><strong>Exception:</strong>   </p>

<pre><code>javax.crypto.BadPaddingException: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.
    at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:991)
    at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:847)
    at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:446)
    at javax.crypto.Cipher.doFinal(Cipher.java:2164)
    at symmetric.main(symmetric.java:146)
</code></pre>
","<p>openssl version</p>

<pre><code> LibreSSL 2.6.5
</code></pre>

<p>use your example with this jar file </p>

<p><a href=""http://www.java2s.com/Code/Jar/b/Downloadbouncycastlejar.htm"" rel=""nofollow noreferrer"">http://www.java2s.com/Code/Jar/b/Downloadbouncycastlejar.htm</a></p>

<p>exactly the same code except for this import </p>

<pre><code>import bwmorg.bouncycastle.util.encoders.Base64;
</code></pre>

<p>decrypt the same data with the same key </p>

<p>and it works perfectly </p>

<p>maybe its parameters issue</p>
","406","<java><encryption><openssl><aes><encryption-symmetric>","4","0","2","2019-01-14 08:15:31","54173509","2","","5045911","","2019-01-13 21:07:55","2019-01-13 18:35:33",""
"54171959","BadPadding exception when trying to decrypt AES based encrypted text","<p><strong>Problem Scenario:</strong>   I am creating an encrypted file using OpenSSL AES-256-CBC mode in Ubuntu.</p>

<pre><code>openssl aes-256-cbc -a -in avengers.txt -out avengers.enc 
test
test
File Content: avengersAssemble
avengers.enc file content: U2FsdGVkX194TyUFrb4gOn86XYaKjKP98YdOlQDJz+t/76mvVmNKl+NyKKUnYwYH

To Decrypt: openssl aes-256-cbc -a -d -in avengers.enc
</code></pre>

<p>Now I want to decrypt this encrypted file <code>avengers.enc</code> using java code i.e., I just store this file content and password (in this case test) to decrypt it. </p>

<p><strong>My Aim:</strong> I want to decrypt using a password (symmetric encryption), encrypted from above command (128 or 192 or 256 cbc).</p>

<p>Please help.</p>

<p>I found <a href=""https://stackoverflow.com/questions/11783062/how-to-decrypt-file-in-java-encrypted-with-openssl-command-using-aes"">this</a> code but its showing BadPadding exception. Please refer answer post by <code>@Maarten Bodewes</code> in the link.</p>

<p>Code which I found from the link:</p>

<pre><code>import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.security.GeneralSecurityException;
import java.security.MessageDigest;
import java.util.Arrays;
import java.util.List;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.bouncycastle.util.encoders.Base64;

public class OpenSSLDecryptor {
    private static final Charset ASCII = Charset.forName(""ASCII"");
    private static final int INDEX_KEY = 0;
    private static final int INDEX_IV = 1;
    private static final int ITERATIONS = 1;

    private static final int ARG_INDEX_FILENAME = 0;
    private static final int ARG_INDEX_PASSWORD = 1;

    private static final String file = 
    ""D:\\Eclipse_Workspace\\Cryptography\\avengers.enc"";
     private static final String password = ""test"";

    private static final int SALT_OFFSET = 8;
    private static final int SALT_SIZE = 8;
    private static final int CIPHERTEXT_OFFSET = SALT_OFFSET + SALT_SIZE;

    private static final int KEY_SIZE_BITS = 256;

    /**
     * Thanks go to Ola Bini for releasing this source on his blog.
     * The source was obtained from &lt;a href=""http://olabini.com/blog/tag/evp_bytestokey/""&gt;here&lt;/a&gt; .
     */
    public static byte[][] EVP_BytesToKey(int key_len, int iv_len, MessageDigest md,
            byte[] salt, byte[] data, int count) {
        byte[][] both = new byte[2][];
        byte[] key = new byte[key_len];
        int key_ix = 0;
        byte[] iv = new byte[iv_len];
        int iv_ix = 0;
        both[0] = key;
        both[1] = iv;
        byte[] md_buf = null;
        int nkey = key_len;
        int niv = iv_len;
        int i = 0;
        if (data == null) {
            return both;
        }
        int addmd = 0;
        for (;;) {
            md.reset();
            if (addmd++ &gt; 0) {
                md.update(md_buf);
            }
            md.update(data);
            if (null != salt) {
                md.update(salt, 0, 8);
            }
            md_buf = md.digest();
            for (i = 1; i &lt; count; i++) {
                md.reset();
                md.update(md_buf);
                md_buf = md.digest();
            }
            i = 0;
            if (nkey &gt; 0) {
                for (;;) {
                    if (nkey == 0)
                        break;
                    if (i == md_buf.length)
                        break;
                    key[key_ix++] = md_buf[i];
                    nkey--;
                    i++;
                }
            }
            if (niv &gt; 0 &amp;&amp; i != md_buf.length) {
                for (;;) {
                    if (niv == 0)
                        break;
                    if (i == md_buf.length)
                        break;
                    iv[iv_ix++] = md_buf[i];
                    niv--;
                    i++;
                }
            }
            if (nkey == 0 &amp;&amp; niv == 0) {
                break;
            }
        }
        for (i = 0; i &lt; md_buf.length; i++) {
            md_buf[i] = 0;
        }
        return both;
    }


    public static void main(String[] args) {
        try {
            // --- read base 64 encoded file ---

            //File f = new File(args[ARG_INDEX_FILENAME]);
            File f = new File(file);
            List&lt;String&gt; lines = Files.readAllLines(f.toPath(), ASCII);
            StringBuilder sb = new StringBuilder();
            for (String line : lines) {
                sb.append(line.trim());
            }
            String dataBase64 = sb.toString();
            byte[] headerSaltAndCipherText = Base64.decode(dataBase64);

            // --- extract salt &amp; encrypted ---

            // header is ""Salted__"", ASCII encoded, if salt is being used (the default)
            byte[] salt = Arrays.copyOfRange(
                    headerSaltAndCipherText, SALT_OFFSET, SALT_OFFSET + SALT_SIZE);
            byte[] encrypted = Arrays.copyOfRange(
                    headerSaltAndCipherText, CIPHERTEXT_OFFSET, headerSaltAndCipherText.length);

            // --- specify cipher and digest for EVP_BytesToKey method ---

            Cipher aesCBC = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");

            // --- create key and IV  ---

            // the IV is useless, OpenSSL might as well have use zero's
            final byte[][] keyAndIV = EVP_BytesToKey(
                    KEY_SIZE_BITS / Byte.SIZE,
                    aesCBC.getBlockSize(),
                    md5,
                    salt,
                    password.getBytes(ASCII),
                    ITERATIONS); //args[ARG_INDEX_PASSWORD]
            SecretKeySpec key = new SecretKeySpec(keyAndIV[INDEX_KEY], ""AES"");
            IvParameterSpec iv = new IvParameterSpec(keyAndIV[INDEX_IV]);

            // --- initialize cipher instance and decrypt ---

            aesCBC.init(Cipher.DECRYPT_MODE, key, iv);
            byte[] decrypted = aesCBC.doFinal(encrypted);

            String answer = new String(decrypted, ASCII);
            System.out.println(answer);
        } catch (BadPaddingException e) {
            // AKA ""something went wrong""
            throw new IllegalStateException(
                    ""Bad password, algorithm, mode or padding;"" +
                    "" no salt, wrong number of iterations or corrupted ciphertext."");
        } catch (IllegalBlockSizeException e) {
            throw new IllegalStateException(
                    ""Bad algorithm, mode or corrupted (resized) ciphertext."");
        } catch (GeneralSecurityException e) {
            throw new IllegalStateException(e);
        } catch (IOException e) {
            throw new IllegalStateException(e);
        }
    }        
}
</code></pre>

<p><strong>Exception:</strong>   </p>

<pre><code>javax.crypto.BadPaddingException: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.
    at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:991)
    at com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:847)
    at com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:446)
    at javax.crypto.Cipher.doFinal(Cipher.java:2164)
    at symmetric.main(symmetric.java:146)
</code></pre>
","<p><code>OpenSSL</code> uses <code>EVP_BytesToKey</code> with uses Message Digest Algorithms like <code>md5</code>, <code>sha256</code>, etc. In the above code the function, <code>EVP_ByteToKey</code> has a MessageDigest parameter to which <code>MD5</code> is passed but MD5 was not added in the OpenSSL command while encryption. So below is the actual command to be used with the message digest algorithm i.e., MD5.                                       </p>

<pre><code>openssl aes-256-cbc -a -in avengers.txt -out avengers.enc -md md5
 openssl aes-256-cbc -a -d -in avengers.enc -md md5 
</code></pre>

<p>To use any other message digest algorithm just pass that algoriyhm in     <code>MessageDigest md5 = MessageDigest.getInstance(""SHA-256"");</code>  Refer <a href=""https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html"" rel=""nofollow noreferrer"">link</a> under MessageDigest Algoritms. Also, have to pass <code>-md sha256</code> in command. Refer man page for openSSL</p>
","406","<java><encryption><openssl><aes><encryption-symmetric>","4","3","2","2019-01-14 08:15:31","54173509","2","","5045911","","2019-01-13 21:07:55","2019-01-13 18:35:33",""
"2281476","Preventing MITM attacks on server","<p>Two clients Alice and Bob use a server to login and exchange messages through the server. On login, they both send their public keys to be stored on the server. When Alice wants to speak to Bob, she enrypts a symmetric key with Bob's public key and sends it to Bob through the server. </p>

<p>How can I make sure that the server doesn't make its own public key pair and send it to Alice instead of Bob's public key. This way the server will first decrypt what Alice has sent and encrypt it again using Bob's real public key.</p>

<p>Thanks</p>
","<p>Unless you control the server you can't.  Unless of course you already know Bob's public key but then ....  I think you're in the chicken and egg problem here.</p>
","397","<security><encryption><instant-messaging><encryption-symmetric>","6","0","4","2010-02-17 15:44:15","2281522","0","","","","","2010-02-17 14:35:16",""
"2281476","Preventing MITM attacks on server","<p>Two clients Alice and Bob use a server to login and exchange messages through the server. On login, they both send their public keys to be stored on the server. When Alice wants to speak to Bob, she enrypts a symmetric key with Bob's public key and sends it to Bob through the server. </p>

<p>How can I make sure that the server doesn't make its own public key pair and send it to Alice instead of Bob's public key. This way the server will first decrypt what Alice has sent and encrypt it again using Bob's real public key.</p>

<p>Thanks</p>
","<p>Since Alice and Bob can not trust the server, they must find another way of confirming each other's keys.  One possibility is rely on another party.  If Bob trusts Candice (and knows Candice's public key), who knows Alice, Candice can sign Alice's public key then send the signed version to Bob.  This is called <a href=""http://www.rubin.ch/pgp/weboftrust.en.html"" rel=""nofollow noreferrer"">web of trust</a>.  </p>
","397","<security><encryption><instant-messaging><encryption-symmetric>","6","5","4","2010-02-17 15:44:15","2281522","0","","","","","2010-02-17 14:35:16",""
"2281476","Preventing MITM attacks on server","<p>Two clients Alice and Bob use a server to login and exchange messages through the server. On login, they both send their public keys to be stored on the server. When Alice wants to speak to Bob, she enrypts a symmetric key with Bob's public key and sends it to Bob through the server. </p>

<p>How can I make sure that the server doesn't make its own public key pair and send it to Alice instead of Bob's public key. This way the server will first decrypt what Alice has sent and encrypt it again using Bob's real public key.</p>

<p>Thanks</p>
","<p>By having Bob's certificate signed by a trusted third party (Verisign, your corporation, a web of trust, etc.), or by having Bob send his certificate to Alice through a separate secure path out of band (handing her a USB key in person for instance).</p>

<p>Both of these get to the heart of what Bob's certificate is supposed to mean. You only trust that Bob's certificate is Bob's certificate because someone you trust has certified it. That ""someone"" can be Bob himself or a trusted third party who signs Bob's certificate. You only ever can trust this as much as you trust the certifier.</p>
","397","<security><encryption><instant-messaging><encryption-symmetric>","6","5","4","2010-02-17 15:44:15","2281522","0","","","","","2010-02-17 14:35:16",""
"2281476","Preventing MITM attacks on server","<p>Two clients Alice and Bob use a server to login and exchange messages through the server. On login, they both send their public keys to be stored on the server. When Alice wants to speak to Bob, she enrypts a symmetric key with Bob's public key and sends it to Bob through the server. </p>

<p>How can I make sure that the server doesn't make its own public key pair and send it to Alice instead of Bob's public key. This way the server will first decrypt what Alice has sent and encrypt it again using Bob's real public key.</p>

<p>Thanks</p>
","<p>In cryptography, you are what you know. If you want to avoid MITM, then Alice must have a notion of who ""Bob"" is, which means that Bob must know some data element that an attacker does not know. Here, your attacker is the server, which is ideally located to mount an attack.</p>

<p>So the question is: who is Bob ? How is the server ""not-Bob"" ?</p>

<p>For instance, ""Bob"" may be defined as: ""Bob is a human being who has a driver license with 'Bob' written on it"". Or: ""Bob is that guy I met in a bar and drank a beer with"".</p>

<p>Use of asymmetric cryptography allows you to reduce the problem to a question of trust in a public key. Alice will use what she believes to be Bob's public key. Therefore, Alice only needs some way to make sure that the public key she has is indeed owned by Bob. Ownership of a public key is defined by the control of the corresponding private key: Bob's public key is the key for which the private key is under exclusive control of Bob (e.g. only Bob knows that key, or the private key is in a hardware token -- a smartcard -- that Bob keeps in his wallet).</p>

<p>The basic solution is to have direct exchange of public key. When Alice met Bob in a bar, they gave each other their public keys. Thus, Alice can trust Bob's public key ""by definition"". For easier exchange (especially after a few beers), Alice and Bob may exchange only ""fingerprints"", i.e. hash values computed over the public keys. These values are shorter than public keys (e.g. 128 bits, instead of more than a thousand bits for a typical RSA public key) and are sufficient to <em>verify</em> that a given public key matches. In that setup, the server has a repository for public keys, and Alice and Bob only recompute fingerprints to make sure that the server is not playing phony games.</p>

<p>A more advance solution, which alleviates the need for direct alcohol consumption, is to use <em>certificates</em>. A certificate is a box which contains an <em>identity</em> (e.g. a name, such as ""Bob"") and a public key. The box is signed by a <em>Certification Authority</em> (CA): the CA asserts that the public key really belongs to Bob, by applying its signature. If Alice knows the CA public key, then she can verify the signature on the certificate, and then gain trust in the link between the public key and the identity contained in the certificate.</p>

<p>Certification is delegation of trust. Alice <em>delegates</em> her trust to the CA; supposedly, the CA (let's call it Charlie) went to the bar to meet Bob; through the certificate, Charlie tells Alice: ""yeah, that's really Bob's key, he showed it to me after his third pint"". Things become a bit murky here, because delegating trust is not easy (especially if Charlie is in the habit of binge-drinking). Delegation can go further, when a CA signs a certificate for another CA. Here, Charlie tells to Alice: ""I have not met Bob, but I have met Daphne, who may have met Bob and acted as a CA"". Alice, using both the certificate issued by Charlie to Daphne, and the certificate issued by Daphne to Bob, may verify that <em>chain</em> of signatures.</p>

<p>The tricky point here is that while Alice may know Charlie and trust him in his ability to properly identify Bob when he meets him, even under the influence of a gallon of Guinness, Alice does not know Daphne. In the Alice-Charlie-Daphne-Bob chain, Alice must not only trust that Charlie was reliable (he <em>did</em> identify Daphne properly) but also that Charlie was not gullible, i.e. that Charlie would have refused to sign a certificate for Daphne if Daphne was not herself trustworthy. In practical situations, trust rapidly degrades when it is delegated.</p>

<p>When using certificates, there are mostly two possible structures:</p>

<ul>
<li><p>Hierarchical CA: there is a single or a few ""root CA"" which are known by everybody by construction. A CA delegates to another CA (i.e. it signs a certificate with, in the identity, a conventional flag which says: ""this public key may be trusted for the purpose of verifying signatures on certificates"") only within a contractual agreement which establishes the legal responsibilities of both CA with regards to certification. This means that the delegation is formally defined, and it so happens that it is not easy. A lawyer-compatible certification contract, usually called a ""Certification Policy Statement"" (CPS), is a 200-pages long document.</p></li>
<li><p>Web of Trust: everybody acts as a CA. In the absence of ""formal trustworthiness"", each individual chain yields only a very small amount of trust. This is meant to be compensated by huge numbers. Alice will accept Bob's key only if she can verify <em>several</em> (many) distinct chains which lead to Bob, going through distinct participants. For instance, Alice will require the Charlie-Daphne-Bob chain but also the Elijah-Fiona-Bob and Gerald-Hillary-Ivan-Bob chains. They're all drunkards, but they may be <em>collectively</em> reliable, in that a fake Bob would have to pay many rounds in order to corrupt one participant of each of the chains that Alice uses (if Alice requires <em>n</em> chains with distinct certificates, then the attacker must corrupt at least <em>n</em> participants).</p></li>
</ul>

<p>So the certification business is mostly a matter of procedure: who is a CA, what a CA verifies before issuing (signing) a certificate, how the whole thing stands from a legal point of view, and so on. These procedures are inherently complex and must be supported by details in the certificate format (such as the flag ""this public key is a CA key""). The two main standard formats currently defined are <a href=""http://en.wikipedia.org/wiki/X.509"" rel=""nofollow noreferrer"">X.509</a> and <a href=""http://en.wikipedia.org/wiki/Pretty_Good_Privacy"" rel=""nofollow noreferrer"">PGP</a>. X.509 has much support for the hierarchical CA, and is a very tangled mess of standards, formats, practices and committees. PGP (standardized under the name ""OpenPGP"") has no real support for hierarchical CA; it is meant to be used with a Web of Trust. OpenPGP is simpler than X.509 but more limited, especially if you wish to have a strong legal meaning behind the certificates.</p>

<p>For an IM server, all of this is likely to be overkill. The notion of identity that Alice really wants is probably a notion of <em>repetition</em>: ""that Bob is the same Bob than the one I chatted with yesterday"". Alice does not know Bob beforehand, but talking with him once establishes his identity in Alice's eye. She just want not to be fooled by another Bob. For that, a simple process such as ""Alice's software saves the announced public key of any new chatter, and uses it afterwards"" will do the trick. Remember that the key issue is to properly <em>define</em> what notion of identity you are after.</p>
","397","<security><encryption><instant-messaging><encryption-symmetric>","6","2","4","2010-02-17 15:44:15","2281522","0","","","","","2010-02-17 14:35:16",""
"30266058","How to Send blowfish key over Network in java","<p>I have a Java Project to Authenticate images over a wireless network. I am using blowfish for encryption of images. The problem I am facing is how to send the blowfish symmetric key to the receiver so that he can decrypt the image. I am relatively new to cryptography.Please include the code snippet to illustrate the same.
<pre><code></p>

package ClientModule;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.swing.*;

 public class ImageEncryption_Client
{
     KeyGenerator keyGenerator = null;
    public static SecretKey secretKey = null;
 public static Cipher cipher = null;

     ImageEncryption_Client(){
    try {
            /**
             * Create a Blowfish key
             */
            keyGenerator = KeyGenerator.getInstance(""Blowfish"");
            secretKey = keyGenerator.generateKey();
            System.out.println(secretKey.toString());

            /**
             * Create an instance of cipher mentioning the name of algorithm
             *     - Blowfish
             */
            cipher = Cipher.getInstance(""Blowfish"");
            System.out.println(cipher.toString());
        } catch (NoSuchPaddingException ex) {
            System.out.println(ex);
        } catch (NoSuchAlgorithmException ex) {
            System.out.println(ex);
        }
    }

    private void encrypt(String srcPath, String destPath)
    {
        File rawFile = new File(srcPath);
        File encryptedFile = new File(destPath);
        InputStream inStream = null;
        OutputStream outStream = null;
        try {
            /**
             * Initialize the cipher for encryption
             */
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            /**
             * Initialize input and output streams
             */
            inStream = new FileInputStream(rawFile);
            outStream = new FileOutputStream(encryptedFile);
            byte[] buffer = new byte[1024];
            int len;
            while ((len = inStream.read(buffer)) &gt; 0) {
                outStream.write(cipher.update(buffer, 0, len));
                outStream.flush();
            }
            outStream.write(cipher.doFinal());
            inStream.close();
            outStream.close();
        } catch (IllegalBlockSizeException ex) {
            JOptionPane.showMessageDialog(null,""An Exception Occurred"",""Exception"",JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
        } catch (BadPaddingException ex) {
            JOptionPane.showMessageDialog(null,""An Exception Occurred"",""Exception"",JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
        } catch (InvalidKeyException ex) {
            JOptionPane.showMessageDialog(null,""An Exception Occurred"",""Exception"",JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null,""An Exception Occurred"",""Exception"",JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,""An Exception Occurred"",""Exception"",JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
        }
    }

    void enc(String filename)//, String dir)
    {

        String fileToEncrypt = filename;
        String arr[]=filename.split(""\\."");

        String encryptedFile = arr[0]+""_encrypted.""+arr[1];

        String directoryPath = ""C:\\Users\\Public\\Pictures\\Sample Pictures\\"";

        encrypt(directoryPath + fileToEncrypt,
                directoryPath + encryptedFile);
    }
    public static void main(String... kkk)
     {
        new ImageEncryption_Client().enc(""Koala.jpg"");//,"""");
    }

}
</code></pre>
","<p>First off, I wouldn't tread into this area without doing a bit more research or consulting a security expert.</p>

<p>One really good resource on crypto specifically targeted at developers is: <a href=""https://www.schneier.com/books/cryptography_engineering/"" rel=""nofollow"">https://www.schneier.com/books/cryptography_engineering/</a></p>

<p>Now on to answering your question. I would first question whether you actually need to do key-exchange or whether you could get away with setting up a pre-shared secret / key pair on both sides.</p>

<p><strong>Key Exchange</strong></p>

<p>Key exchange is the class of problem you're asking about. There are many implementations:
<a href=""http://en.wikipedia.org/wiki/Key_exchange"" rel=""nofollow"">http://en.wikipedia.org/wiki/Key_exchange</a></p>

<p>Diffie Hellman is a classic approach which is popular in SSL and TLS:
<a href=""http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"" rel=""nofollow"">http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange</a></p>

<p>A java implementation example of Diffie Hellman can be found here:
<a href=""http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html#DH2Ex"" rel=""nofollow"">http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html#DH2Ex</a></p>

<p><strong>Pre-shared Key</strong></p>

<p>Key exchange is complex and requires that you own both sides of the communication. Another approach would be to place a shared secret on both ends of the communication. The simplest approach would be to share a symmetric key. <a href=""http://en.wikipedia.org/wiki/Shared_secret"" rel=""nofollow"">http://en.wikipedia.org/wiki/Shared_secret</a> </p>

<p>A slightly more secure approach would be to use asymmetric keys (public key crypto) where each side generates it's own public private key pair and then you pre-share the public key with the other end. So in the classic example where Alice and Bob want to communicate securely, Alice would give Bob her public key and Bob would encrypt all data sent to Alice with her public key. She could then decrypt it with her private key. This approach has the advantage where if any one side is compromised the attacker can't read messages encrypted for the other side. More details are outlined here:
<a href=""http://en.wikipedia.org/wiki/Public-key_cryptography"" rel=""nofollow"">http://en.wikipedia.org/wiki/Public-key_cryptography</a></p>

<p>A third and slightly more granular approach building on the last one would be to generate a symmetric key per image and encrypt the image with that key. Then encrypt the symmetric key with the public key of the party you're sending the data to. When sending the image over the wire you'd include the encrypted key and the encrypted image. This model is useful because symmetric encryption is faster and better suited for large files like images but combining them in this way you still get the benefits of using public key crypto to protect the transport.</p>

<p>If you happen to be doing this up on AWS, their KMS service would make it very easy to have a shared encryption key across servers. They also use a multi-level crypto approach similar to the last model but in this case the master key is stored on a hardware security module (HSM), which has the added benefit that the master key is never known and can never be pulled off the chip it lives on:
<a href=""http://aws.amazon.com/kms/"" rel=""nofollow"">http://aws.amazon.com/kms/</a></p>
","392","<java><network-programming><encryption-symmetric>","0","0","1","2015-05-15 18:54:04","","0","","4904895","","2015-05-15 18:18:52","2015-05-15 18:07:03",""
"48444284","Symmetric Key Encryption in SQl Server and decryption in C#","<p>hope everyone will be fine here.
I have created a column with encrypted data using SQL Server Symmetric Key encryption feature. What I have done is given below:</p>

<pre><code>CREATE MASTER KEY ENCRYPTION
BY PASSWORD = 'Test1'

CREATE CERTIFICATE EncryptTestCert
WITH SUBJECT = 'Test1'

CREATE SYMMETRIC KEY TestTableKey
WITH ALGORITHM = TRIPLE_DES ENCRYPTION
BY CERTIFICATE EncryptTestCert

CREATE SYMMETRIC KEY Test1
WITH ALGORITHM = TRIPLE_DES ENCRYPTION
BY CERTIFICATE EncryptTestCert

OPEN SYMMETRIC KEY TestTableKey DECRYPTION
BY CERTIFICATE EncryptTestCert
UPDATE [Security].[User]
SET EncryptedPhone = ENCRYPTBYKEY(KEY_GUID('TestTableKey'),Phone)
</code></pre>

<p>It has successfully Updated EncryptedPhone column with encrypted data (which is in varbinary).</p>

<p>Now the problem is that, I am using LINQToSQL on application and I am using inline Linq To SQL query (not stored procedure or sql query), I need to decrypt this data to view on the page. As you can see from the above database code, I am using TripleDES to create encrypted data. However I am unable to understand how can I achieve the decrypted data on C# which was encrypted through SQL query. </p>
","","390","<c#><sql-server><encryption-symmetric>","1","","0","2018-01-25 13:40:47","","2","","","","","2018-01-25 13:40:47",""
"16170582","Symmetric mapping of guids","<p>Is there an existing secure implementation to achieve following:</p>

<pre><code>
Guid original = Guid.NewGuid();

Guid inverted = MysteryImplementation(original, salt); // salt is some sort of input

Guid shouldBeOriginal = MysteryImplementation(inverted, salt);

Assert.AreEqual(original, shouldBeOriginal, ""MysteryImplementation did no work"");
</code>
</pre>

<p>EDIT:</p>

<p>As this got down voted (although I'm a bit unsure why), I think more background is needed:</p>

<p>In a place far far away, there is an application in which primary keys are stored as GUIDs. In this application these GUIDs are exposed to web clients.</p>

<p>In my pursuit of improving status quo I had an idea to map these GUIDs with user session data in order mitigate the risk of an accidental/malicious leakage of primary keys. Mapping these GUIDs has the added benefit that it would also allow easier implementation of working-copies for those objects that the GUIDs refer to.</p>

<p>Those were the reasons why I decided to start looking for ""secure"" way to map GUIDs.</p>

<p>To answer comments:</p>

<p>-Mapping should preserve the global uniqueness when compared to all other GUIDs (I wouldn't want those mapped GUIDs to collide with existing GUIDs).</p>

<p>-""Secure"" in this context means that it should be impossible to figure out the original GUIDs without knowing the cipher key (a typical crypto req, which I think translates that the mapped GUIDs should have normalized distribution).</p>
","<p>Yes. Those mystery algorithms are called <a href=""http://en.wikipedia.org/wiki/Symmetric-key_algorithm"" rel=""nofollow"">symmetric ciphers</a>. What you call <em>salt</em> is just the key for the algorithm.</p>

<p>However, it might be a bit harder getting a GUID back from that since encryption algorithms usually operate either on streams or blocks of data and by modifying a GUID you compromise it's GU property.</p>
","377","<c#><algorithm><encryption-symmetric>","-1","3","3","2013-04-23 17:35:54","","12","","318293","","2013-04-23 17:35:54","2013-04-23 13:26:23",""
"16170582","Symmetric mapping of guids","<p>Is there an existing secure implementation to achieve following:</p>

<pre><code>
Guid original = Guid.NewGuid();

Guid inverted = MysteryImplementation(original, salt); // salt is some sort of input

Guid shouldBeOriginal = MysteryImplementation(inverted, salt);

Assert.AreEqual(original, shouldBeOriginal, ""MysteryImplementation did no work"");
</code>
</pre>

<p>EDIT:</p>

<p>As this got down voted (although I'm a bit unsure why), I think more background is needed:</p>

<p>In a place far far away, there is an application in which primary keys are stored as GUIDs. In this application these GUIDs are exposed to web clients.</p>

<p>In my pursuit of improving status quo I had an idea to map these GUIDs with user session data in order mitigate the risk of an accidental/malicious leakage of primary keys. Mapping these GUIDs has the added benefit that it would also allow easier implementation of working-copies for those objects that the GUIDs refer to.</p>

<p>Those were the reasons why I decided to start looking for ""secure"" way to map GUIDs.</p>

<p>To answer comments:</p>

<p>-Mapping should preserve the global uniqueness when compared to all other GUIDs (I wouldn't want those mapped GUIDs to collide with existing GUIDs).</p>

<p>-""Secure"" in this context means that it should be impossible to figure out the original GUIDs without knowing the cipher key (a typical crypto req, which I think translates that the mapped GUIDs should have normalized distribution).</p>
","<p>any symetric encrytion will do</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/as0w18af(v=vs.110).aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/as0w18af(v=vs.110).aspx</a></p>
","377","<c#><algorithm><encryption-symmetric>","-1","0","3","2013-04-23 17:35:54","","12","","318293","","2013-04-23 17:35:54","2013-04-23 13:26:23",""
"16170582","Symmetric mapping of guids","<p>Is there an existing secure implementation to achieve following:</p>

<pre><code>
Guid original = Guid.NewGuid();

Guid inverted = MysteryImplementation(original, salt); // salt is some sort of input

Guid shouldBeOriginal = MysteryImplementation(inverted, salt);

Assert.AreEqual(original, shouldBeOriginal, ""MysteryImplementation did no work"");
</code>
</pre>

<p>EDIT:</p>

<p>As this got down voted (although I'm a bit unsure why), I think more background is needed:</p>

<p>In a place far far away, there is an application in which primary keys are stored as GUIDs. In this application these GUIDs are exposed to web clients.</p>

<p>In my pursuit of improving status quo I had an idea to map these GUIDs with user session data in order mitigate the risk of an accidental/malicious leakage of primary keys. Mapping these GUIDs has the added benefit that it would also allow easier implementation of working-copies for those objects that the GUIDs refer to.</p>

<p>Those were the reasons why I decided to start looking for ""secure"" way to map GUIDs.</p>

<p>To answer comments:</p>

<p>-Mapping should preserve the global uniqueness when compared to all other GUIDs (I wouldn't want those mapped GUIDs to collide with existing GUIDs).</p>

<p>-""Secure"" in this context means that it should be impossible to figure out the original GUIDs without knowing the cipher key (a typical crypto req, which I think translates that the mapped GUIDs should have normalized distribution).</p>
","<p>You can easily do this:</p>

<pre><code>Guid original = Guid.NewGuid();
byte[] encrypted = Encrypt(original, key);
Guid decrypted = Decrypt(encrypted, key);
</code></pre>

<p>Any symmetric encoding algorithm will do, from ROT13 on up. However, that's not what you asked for. What you asked for is an algorithm that has two properties:</p>

<ul>
<li>The encrypt and decrypt algorithms are exactly the same.</li>
<li>The encrypted form of a GUID is <em>also a valid globally unique identifier</em>.</li>
</ul>

<p>There are plenty of algorithms where the encryption and decryption processes are different but not actually that many where they are exactly the same. The simplest algorithm where encryption and decryption are the same is:</p>

<ul>
<li>Generate a crypto-strength random one-time pad of the same length as the plaintext.</li>
<li>XOR the plaintext with the pad to produce the ciphertext.</li>
<li>To decrypt, XOR the ciphertext with the pad.</li>
</ul>

<p>However <strong>that algorithm does not necessarily maintain the property that the ciphertext is a valid GUID</strong>.</p>

<p>Can you explain why it is that you need the ciphertext to be a valid GUID? The property that a GUID has to have is that it needs to be <em>globally unique</em>; how are you planning on guaranteeing global uniqueness?  What stops you from encrypting one GUID that you generated <em>into another GUID that someone else has generated unbeknownst to you?</em></p>

<p>More generally, can you explain <em>what problem you are trying to solve in the first place?</em> Nine times out of ten that I see someone trying to use cryptography, they're using it for the wrong purpose. </p>
","377","<c#><algorithm><encryption-symmetric>","-1","6","3","2013-04-23 17:35:54","","12","","318293","","2013-04-23 17:35:54","2013-04-23 13:26:23",""
"47076189","AES encryption Cipher.init() crashing","<p>I'm trying to encrypt a file using AES in Java, but it's not working. I put in some prints to see where it failed, the first two are printing but not the third. I checked that the key and IV are the right sizes, 256 bits and 128 bits respectively. If they are both valid I don't know what else could be going wrong. Are there any glaring mistakes in my code? I haven't done this before. Any help is greatly appreciated!</p>

<pre><code>public static String encryptAES(byte[] data, byte[] key, byte[] iv) throws Exception {
    Key k = new SecretKeySpec(key, ""AES"");
    System.out.println(""key set"");

    Cipher c = Cipher.getInstance(""AES/CBC/PKCS5PADDING"");
    System.out.println(""cipher created"");

    c.init(Cipher.ENCRYPT_MODE, k, new IvParameterSpec(iv));
    System.out.println(""cipher initialised"");

    byte[] encryptedDataBytes = c.doFinal(data);
    String encryptedData = Base64.getEncoder().encodeToString(encryptedDataBytes);
    return encryptedData;
}
</code></pre>
","","372","<java><encryption><aes><encryption-symmetric>","0","","0","2017-11-02 13:08:51","","5","3","","","","2017-11-02 13:08:51",""
"9219192","Inconsitent behaviour with RijndaelManaged encryption","<p>I am experiencing a strange problem with RijndaelManaged. Basically I have a new instance of it where I set up the CipherMode, Padding, IV and Key. Then I create another instance and assign the same values of the following properties from the original instance to the 2nd instance: Mode, Padding, KeySize, FeedbackSize, BlockSize, IV and Key.</p>

<p>So, having copied ALL property values from instance 1 to instance 2 I should get the same results, right? WRONG! the GetHashCode() of both instances differ somehow, but if I dump their properties (named above) then they are all the same.</p>

<p>If I encrypt a string of text with a length equal to the block size (16 bytes, 128 bits) then both produce the same result, if the input is less than BlockSize then the encryption results are NOT the same.</p>

<p>I have this to create the initial Rijndael instance.</p>

<pre><code>    public static RijndaelManaged CreateSymmetricKey(string passphrase)
    {
        RijndaelManaged symCrypto = new RijndaelManaged();
        symCrypto.Mode = CipherMode.CBC;               
        symCrypto.Padding = PaddingMode.PKCS7;
        byte[] salt = Encoding.UTF8.GetBytes(""dummy dummy dummy dummy test"");
        Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(passphrase, salt);
        symCrypto.Key = key.GetBytes(symCrypto.KeySize / 8);
        symCrypto.IV = key.GetBytes(symCrypto.BlockSize / 8);

        return symCrypto;
    }
</code></pre>

<p>To encrypt the string for the sake of an example:</p>

<pre><code>private string Encrypt(RijndaelManaged rm, string text)
    {
        byte[] encrypted;
        // Create a decrytor to perform the stream transform.
            ICryptoTransform encryptor = rm.CreateEncryptor(rm.Key, rm.IV);
        using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        //Write all data to the stream.
                        swEncrypt.Write(text);
                    }
                    encrypted = msEncrypt.ToArray();
                }
            }
        return BitConverter.ToString(encrypted);
    }
</code></pre>

<p>So then do this</p>

<pre><code>RijndaelManaged rm1 = CreateSymmetricKey(""there is something weird happening"");
RijndaelManaged rm2 = new RijndaelManaged();
// copy ALL public properties to the new instance so that it has the same parameters
rm2.BlockSize = rm1.BlockSize; // 128
rm2.FeedbackSize = rm1.FeedbackSize; // 128
rm2.KeySize = rm1.KeySize; // 256
rm2.Mode = rm1.Mode; // CBC
rm2.Padding = rm1.Padding; // PKCS7
rm2.IV = rm1.IV;
rm2.Key = rm1.Key;
// Encryption
string cypher1 = Encrypt(rm1, ""this is a test 6"");  // length equal to BlockSize
string cypher2 = Encrypt(rm2, ""this is a test 6"");  // length equal to BlockSize
string cypher11 = Encrypt(rm1, ""this is a test"");  // length less than BlockSize
string cypher21 = Encrypt(rm2, ""this is a test"");  // length less than BlockSize
</code></pre>

<p>I am getting that cyper1 == cypher2 and cypher11 != cypher21 also rm1.GetHashCode() != rm2.GetHashCode() yet all public parameters are the same!</p>

<p>I also dumped all the public properties of both instances to see if I was missing something but not, all values are the same.</p>
","<p>You should not use <code>GetHashCode()</code> in this way. For classes that did not override the base <code>object.GetHashCode()</code> implementation, it will return the integer handler of this specific instance.<br>
Since the handle for two different instances will always be different this will never match.</p>

<p>Also <code>GetHashCode()</code> never actually guarantees uniqueness, it's merely meant to be used as a light weight pre check, before the actual equality is tested.<br>
This is heavily used in any kind of Hashing data structure like Dictionary etc.</p>

<p>For more info on this topic:<br>
<a href=""http://msdn.microsoft.com/en-us/library/system.object.gethashcode.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/system.object.gethashcode.aspx</a></p>

<p>I also executed your code and for me the following was the case:</p>

<pre><code>cyper1 == cypher2 and cypher11 == cypher21
</code></pre>

<p>I'm pretty sure the issue was the comparison of <code>GetHashCode()</code>.</p>
","372","<c#><encryption><rijndael><encryption-symmetric>","3","0","1","2012-03-16 17:03:25","","6","1","","","","2012-02-09 21:36:42",""
"28274122","NSIS unicode cypher plug-in","<p>Is there a NSIS unicode plug-in for symmetric encryption/decryption available?</p>

<p>I tried <a href=""http://nsis.sourceforge.net/Blowfish_plug-in"" rel=""nofollow"">Blowfish</a> and <a href=""http://nsis.sourceforge.net/NsisCrypt_plug-in"" rel=""nofollow"">NSISCrypt</a> with <code>Unicode true</code> option.
Blowfish doesn't seem to give any output whatsoever, and NSISCrypt gives some strange (I believe Chinese) characters, and can't even get decryption part to work without unicode enabled.</p>

<p>Any advice?</p>
","<p>You need the Unicode versions of the plugins when you are using <code>Unicode true</code>. If the plugin does not have a Unicode version then you should ask the plugin author to generate one.</p>

<p>It is also possible to call Ansi plugins from Unicode NSIS if you use the <a href=""http://nsis.sourceforge.net/CallAnsiPlugin_plug-in"" rel=""nofollow"">CallAnsiPlugin plug-in</a>:</p>

<pre><code>Section

InitPluginsDir ;make sure we have $pluginsdir
File ""/ONAME=$pluginsdir\NsisCrypt.dll"" ""${NSISDIR}\Plugins\x86-ansi\NsisCrypt.dll"" ;you must extract the Ansi plugin manually

CallAnsiPlugin::Call ""$pluginsdir\NsisCrypt"" Hash 2 ""Test string"" ""md5"" ; The CallAnsiPlugin::Call parameters are: Dll Function ParameterCount Parameter1..N
Pop $1
DetailPrint MD5=$1


CallAnsiPlugin::Call ""$pluginsdir\NsisCrypt"" EncryptSymmetric 4 ""test string"" ""3des"" ""doq5Eh/wmT6vWoVVyRpdPhMD9KNsWa0G"" ""EkjR1hOing8="" 
Pop $1
DetailPrint 3DES=$1

CallAnsiPlugin::Call ""$pluginsdir\NsisCrypt"" DecryptSymmetric 4 ""$1"" ""3des"" ""doq5Eh/wmT6vWoVVyRpdPhMD9KNsWa0G"" ""EkjR1hOing8="" 
Pop $1
DetailPrint PlainText=$1


SectionEnd
</code></pre>
","371","<plugins><unicode><nsis><encryption-symmetric>","1","1","1","2015-02-02 21:16:29","28286741","1","","3501","","2015-02-02 21:12:29","2015-02-02 09:02:57",""
"36358399","Error during encrypt a file using Mcrypt DES in php","<p>i want to encrypt a text file. below is my code.But i am getting function error during run.</p>

<pre><code>&lt;?php

 $key = '123456';
 $plain_text = pkcs5_pad(file_get_contents('yourFile.txt'));

 /* Open module, and create IV */
 $td = mcrypt_module_open(MCRYPT_DES, '', MCRYPT_MODE_CBC, '');
 $key = substr($key, 0, mcrypt_enc_get_key_size($td));
 $iv_size = mcrypt_enc_get_iv_size($td);
 $iv = mcrypt_create_iv($iv_size, MCRYPT_DEV_URANDOM);

 /* Initialize encryption handle */
 mcrypt_generic_init($td, $key, $iv);

/* Encrypt data */
$encrypted = mcrypt_generic($td, $plain_text);
mcrypt_generic_deinit($td);
file_put_contents('yourFile.txt.enc', $encrypted);
?&gt;
</code></pre>

<p>i am getting below error..please help me to solve this.</p>

<pre><code>Fatal error: Call to undefined function pkcs5_pad() in C:\xampp\htdocs\data\encrypt.php on line 4
</code></pre>
","<p>You need to make sure that you have the mcrypt module installed, configured, and enabled before you can use the <code>pkcs5_pad</code> function.  Installation and configuration will be different depending on your platform, so please see <a href=""http://php.net/manual/en/mcrypt.setup.php"" rel=""nofollow"">the documentation</a> for assistance.</p>
","367","<php><encryption><mcrypt><encryption-symmetric><des>","-1","0","1","2016-04-18 00:18:28","","5","","2224584","","2016-04-18 00:18:28","2016-04-01 14:04:53",""
"35431832","How to encrypt data so as to perform SQL queries with LIKE?","<p>Please be patient, I'm not an expert about cryptography. My question is probably very basic but I googled a lot and I'm still confused.</p>

<p>In a PHP project, I need to encrypt/decrypt the data saved in the database. In a previous project I used the aes128 encryption and everything went well. But now I have a different need. I need to perform queries in the database using the operator LIKE. And obviously the encryption of a portion of a string is not included in the encryption of the whole string.</p>

<p>Googling around, I realized that maybe I have to use symmetric-key algorithm (like the Caesar's cipher). But I did a test with the php-encryption library (<a href=""https://github.com/defuse/php-encryption"" rel=""nofollow"">https://github.com/defuse/php-encryption</a>) and I got the following result:</p>

<blockquote>
  <p>MAMMA = ÿŸNq!!83=S™÷á;Bª¯‚óØ š‹ æ%§0  %? _† Ÿ&amp;0c—âÐÜÉ/:LSçï; Õµå¬£§.öÒ9</p>
  
  <p>MAMMAMIA = (Ò Î{yG :   [&amp;¶›J'Õ6÷ííG£V­­{ÉsÙ=qÝ×.:ÍÔ j…Qž¹×j¶óóþ¡ÔnÛŠ *å­n\hhN</p>
</blockquote>

<p>The encryption of the first word is not included in the encryption of the second. Evidently the simmetric algorithm is not right for my need.</p>

<p>What I can use to reach my goal using PHP? Thanks! </p>
","<p>The easiest way is to use mysql encrypt/decrypt functionality and do both ""on the fly"".</p>

<p>To insert and encrypt data:</p>

<pre><code>insert into mytable (secret) values AES_ENCRYPT('SomeTextToHide','myPassword');
</code></pre>

<p>To search for encrypted values using <code>like</code></p>

<pre><code>select * from mytable where AES_DECRYPT(secret,'myPassword') like '%text%';
</code></pre>
","366","<php><sql><algorithm><encryption><encryption-symmetric>","0","1","2","2016-02-24 04:33:21","","3","","1148260","","2016-02-16 12:06:18","2016-02-16 11:50:40",""
"35431832","How to encrypt data so as to perform SQL queries with LIKE?","<p>Please be patient, I'm not an expert about cryptography. My question is probably very basic but I googled a lot and I'm still confused.</p>

<p>In a PHP project, I need to encrypt/decrypt the data saved in the database. In a previous project I used the aes128 encryption and everything went well. But now I have a different need. I need to perform queries in the database using the operator LIKE. And obviously the encryption of a portion of a string is not included in the encryption of the whole string.</p>

<p>Googling around, I realized that maybe I have to use symmetric-key algorithm (like the Caesar's cipher). But I did a test with the php-encryption library (<a href=""https://github.com/defuse/php-encryption"" rel=""nofollow"">https://github.com/defuse/php-encryption</a>) and I got the following result:</p>

<blockquote>
  <p>MAMMA = ÿŸNq!!83=S™÷á;Bª¯‚óØ š‹ æ%§0  %? _† Ÿ&amp;0c—âÐÜÉ/:LSçï; Õµå¬£§.öÒ9</p>
  
  <p>MAMMAMIA = (Ò Î{yG :   [&amp;¶›J'Õ6÷ííG£V­­{ÉsÙ=qÝ×.:ÍÔ j…Qž¹×j¶óóþ¡ÔnÛŠ *å­n\hhN</p>
</blockquote>

<p>The encryption of the first word is not included in the encryption of the second. Evidently the simmetric algorithm is not right for my need.</p>

<p>What I can use to reach my goal using PHP? Thanks! </p>
","<p>The goal of being able to use a LIKE clause and its wildcards on securely encrypted data is a set of two mutually exclusive desires.</p>

<p>You can securely encrypt your data, OR you can use a LIKE clause with wildcards.  You cannot do both at once, because the LIKE clause itself would bypass the encryption!</p>

<pre><code>SELECT * WHERE data LIKE 'a%'
SELECT * WHERE data LIKE 'b%'
...
SELECT * WHERE data LIKE '_a%'
SELECT * WHERE data LIKE '_b%'
...
SELECT * WHERE data LIKE '__a%'
SELECT * WHERE data LIKE '__b%'
...
</code></pre>

<p>If you securely encrypt the data in the database, then you need to pull ALL of it back local, decrypt it all, and then do your wildcard searches on the decrypted data.</p>
","366","<php><sql><algorithm><encryption><encryption-symmetric>","0","0","2","2016-02-24 04:33:21","","3","","1148260","","2016-02-16 12:06:18","2016-02-16 11:50:40",""
"24735000","Using crypt PHP function with Blowfish hashing algorithm, is it Symmetric crypting or not?","<p>as I can read from the net: Blowfish algorithm is symmetric.
And from PHP.net  crypt function is one way crypting.Crypt func also allows Blowfish as hashing algorithm.</p>

<p>So if I'm correct when I associate symmetric crypting with two way crypting procedure.
I see a contraddiction.</p>

<p>Definitely, using crypt() + Blowfish will give someone the chance to decrypt the string, 
if ever he will know the secret salt?
(I actually think not since as I can see from the crypted string the crypting salt is included)</p>

<p>Many thanks</p>
","<p>encrypted things are decryptable, if it isn't decryptable it's called hashing, hashing is one-way.</p>
","365","<php><blowfish><encryption-symmetric><crypt>","0","1","3","2014-07-14 14:04:14","24735127","0","","3248096","","2014-07-14 14:04:14","2014-07-14 10:57:28",""
"24735000","Using crypt PHP function with Blowfish hashing algorithm, is it Symmetric crypting or not?","<p>as I can read from the net: Blowfish algorithm is symmetric.
And from PHP.net  crypt function is one way crypting.Crypt func also allows Blowfish as hashing algorithm.</p>

<p>So if I'm correct when I associate symmetric crypting with two way crypting procedure.
I see a contraddiction.</p>

<p>Definitely, using crypt() + Blowfish will give someone the chance to decrypt the string, 
if ever he will know the secret salt?
(I actually think not since as I can see from the crypted string the crypting salt is included)</p>

<p>Many thanks</p>
","<p>You're thinking about it the wrong way; the salt and password together is used as the key, while there is a magic string that's the data (the password is not the data). Without the key, no decryption. This is then iterated over (which is what bcrypt does).</p>

<p>See <a href=""https://stackoverflow.com/questions/1561174/sha512-vs-blowfish-and-bcrypt"">sha512 vs blowfish vs bcrypt</a> for a very good answer.</p>
","365","<php><blowfish><encryption-symmetric><crypt>","0","0","3","2014-07-14 14:04:14","24735127","0","","3248096","","2014-07-14 14:04:14","2014-07-14 10:57:28",""
"24735000","Using crypt PHP function with Blowfish hashing algorithm, is it Symmetric crypting or not?","<p>as I can read from the net: Blowfish algorithm is symmetric.
And from PHP.net  crypt function is one way crypting.Crypt func also allows Blowfish as hashing algorithm.</p>

<p>So if I'm correct when I associate symmetric crypting with two way crypting procedure.
I see a contraddiction.</p>

<p>Definitely, using crypt() + Blowfish will give someone the chance to decrypt the string, 
if ever he will know the secret salt?
(I actually think not since as I can see from the crypted string the crypting salt is included)</p>

<p>Many thanks</p>
","<p>A cipher algorithm like blowfish can be used as part of a hashing algorithm. Blowfish is just a ""building block"" and can be used for different purposes. It can be implemented as an encryption/decryption tool, or as the cryptographic primitive of a hash algorithm. This does not mean that you are suddenly able to reverse a hashing algorithm.</p>

<p>The plain fact that the output of the hashing algorithm is always a constant length is a giveaway that it cannot be reversed. You cannot encrypt an infinite number of potential input values in a reversible way into a fixed length output. The algorithm is by necessity <em>lossy</em>.</p>

<p>As a simple illustration, blowfish can be used like this to <em>encrypt</em> data (which can subsequently be <em>decrypted</em>):</p>

<pre><code>ABCD EFGH IJKL MNOP ...
  |    |    |    |
  v    v    v    v
NPCQ JQ0C  MPZW LKAQ
</code></pre>

<p>Each <em>block</em> of the input is turned into cipher text individually by blowfish. That is why blowfish is called a <em>block cipher</em> (as opposed to a <em>stream cipher</em> which would process the input as a stream, not as a set of blocks of fixed length). The result of this operation are a bunch of blocks which can be reversed. The output is of the same length as the input (plus padding to fill a block where necessary).</p>

<p>A hash function using blowfish works like this:</p>

<pre><code>ABCD EFGH        IJKL        MNOP ...
  |    |           |           |
  v    v           v           v
NPCQ JQ0C        MPZW        LKAQ
  |    |           |           |
  +----+--&gt; PMQZ --+--&gt; OLMQ --+--&gt; UALG ...
</code></pre>

<p>The output of each block is run through a <em>compression function</em> which combines two blocks into one. The output of the first two blocks are combined (into <code>PMQZ</code>), then this value is combined with the output of the third block (into <code>OLMQ</code>) and so on. The output of the last compression is the result of the hash.</p>

<p>As you see, blowfish is used internally as a cryptographic cipher, but its output is combined with a lossy compression function which makes it impossible to reverse the output.</p>
","365","<php><blowfish><encryption-symmetric><crypt>","0","2","3","2014-07-14 14:04:14","24735127","0","","3248096","","2014-07-14 14:04:14","2014-07-14 10:57:28",""
"53559476","Decrypt Rijndael 256 Block Size with BouncyCastle","<p>We have a helper class for doing encryption that, if I'm going to be honest, was probably copied from Stack Overflow years ago. </p>

<p>Currently we're trying to port some of this code to .NET Core and we're finding that it doesn't work because the .NET Core implementation of <code>RijndaelManaged</code> doesn't support a 256 blocksize. From what I've read, it seems like BouncyCastle should still support it, but I can't get it to work. The ""unencrypted"" text is just a bunch of gibberish. I'm sure I'm doing something wrong, but for the life of me I can't figure this out.</p>

<p>Here's the original .Net Framework version of the class:</p>

<pre><code>internal static class StringEncryptor
{
    private const int Keysize = 256;
    private const int _iterations = 1000;
    private const int _hashLenth = 20;

    public static string Encrypt(string plainText, string superSecretPassPhrase)
    {
        // Salt and IV is randomly generated each time, but is preprended to encrypted cipher text
        // so that the same Salt and IV values can be used when decrypting.  
        var saltStringBytes = Generate256BitsOfRandomEntropy();
        var ivStringBytes = Generate256BitsOfRandomEntropy();
        var plainTextBytes = Encoding.UTF8.GetBytes(plainText);
        using (var password = new Rfc2898DeriveBytes(superSecretPassPhrase, saltStringBytes, _iterations))
        {
            var keyBytes = password.GetBytes(Keysize / 8);
            using (var symmetricKey = new RijndaelManaged())
            {
                symmetricKey.BlockSize = 256;
                symmetricKey.Mode = CipherMode.CBC;
                symmetricKey.Padding = PaddingMode.PKCS7;
                using (var encryptor = symmetricKey.CreateEncryptor(keyBytes, ivStringBytes))
                {
                    using (var memoryStream = new MemoryStream())
                    {
                        using (var cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write))
                        {
                            cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);
                            cryptoStream.FlushFinalBlock();
                            // Create the final bytes as a concatenation of the random salt bytes, the random iv bytes and the cipher bytes.
                            var cipherTextBytes = saltStringBytes;
                            cipherTextBytes = cipherTextBytes.Concat(ivStringBytes).ToArray();
                            cipherTextBytes = cipherTextBytes.Concat(memoryStream.ToArray()).ToArray();
                            memoryStream.Close();
                            cryptoStream.Close();
                            return WebEncoders.Base64UrlEncode(cipherTextBytes);
                            //return System.Web.HttpServerUtility.UrlTokenEncode(cipherTextBytes);
                        }
                    }
                }
            }
        }
    }



    public static string Decrypt(string cipherText, string superSecretPassPhrase)
    {
        if (cipherText == null)
        {
            throw new ArgumentNullException(nameof(cipherText));
        }
        // Get the complete stream of bytes that represent:
        // [32 bytes of Salt] + [32 bytes of IV] + [n bytes of CipherText]
        var cipherTextBytesWithSaltAndIv = WebEncoders.Base64UrlDecode(cipherText);
        // Get the saltbytes by extracting the first 32 bytes from the supplied cipherText bytes.
        var saltStringBytes = cipherTextBytesWithSaltAndIv.Take(Keysize / 8).ToArray();
        // Get the IV bytes by extracting the next 32 bytes from the supplied cipherText bytes.
        var ivStringBytes = cipherTextBytesWithSaltAndIv.Skip(Keysize / 8).Take(Keysize / 8).ToArray();
        // Get the actual cipher text bytes by removing the first 64 bytes from the cipherText string.
        var cipherTextBytes = cipherTextBytesWithSaltAndIv.Skip((Keysize / 8) * 2).Take(cipherTextBytesWithSaltAndIv.Length - ((Keysize / 8) * 2)).ToArray();

        using (var password = new Rfc2898DeriveBytes(superSecretPassPhrase, saltStringBytes, _iterations))
        {
            var keyBytes = password.GetBytes(Keysize / 8);
            using (var symmetricKey = new RijndaelManaged())
            {
                symmetricKey.BlockSize = 256;
                symmetricKey.Mode = CipherMode.CBC;
                symmetricKey.Padding = PaddingMode.PKCS7;
                using (var decryptor = symmetricKey.CreateDecryptor(keyBytes, ivStringBytes))
                {
                    using (var memoryStream = new MemoryStream(cipherTextBytes))
                    {
                        using (var cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read))
                        {
                            var plainTextBytes = new byte[cipherTextBytes.Length];
                            var decryptedByteCount = cryptoStream.Read(plainTextBytes, 0, plainTextBytes.Length);
                            memoryStream.Close();
                            cryptoStream.Close();
                            return Encoding.UTF8.GetString(plainTextBytes, 0, decryptedByteCount);
                        }
                    }
                }
            }
        }
    }

    private static byte[] Generate256BitsOfRandomEntropy()
    {
        var randomBytes = new byte[32]; // 32 Bytes will give us 256 bits.
        using (var rngCsp = new RNGCryptoServiceProvider())
        {
            // Fill the array with cryptographically secure random bytes.
            rngCsp.GetBytes(randomBytes);
        }
        return randomBytes;
    }
}
</code></pre>

<p>And here is my attempt to get the Decrypt method working with BouncyCastle:</p>

<pre><code>    /// &lt;summary&gt;
    /// Decrypt a string
    /// &lt;/summary&gt;
    /// &lt;param name=""cipherText""&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static string Decrypt(string cipherText)
    {
        if (cipherText == null)
        {
            throw new ArgumentNullException(nameof(cipherText));
        }
        // Get the complete stream of bytes that represent:
        // [32 bytes of Salt] + [32 bytes of IV] + [n bytes of CipherText]
        var cipherTextBytesWithSaltAndIv = WebEncoders.Base64UrlDecode(cipherText);
        // Get the saltbytes by extracting the first 32 bytes from the supplied cipherText bytes.
        var saltStringBytes = cipherTextBytesWithSaltAndIv.Take(Keysize / 8).ToArray();
        // Get the IV bytes by extracting the next 32 bytes from the supplied cipherText bytes.
        var ivStringBytes = cipherTextBytesWithSaltAndIv.Skip(Keysize / 8).Take(Keysize / 8).ToArray();
        // Get the actual cipher text bytes by removing the first 64 bytes from the cipherText string.
        var cipherTextBytes = cipherTextBytesWithSaltAndIv.Skip((Keysize / 8) * 2).Take(cipherTextBytesWithSaltAndIv.Length - ((Keysize / 8) * 2)).ToArray();

        using (var password = new Rfc2898DeriveBytes(superSecretPassPhrase, saltStringBytes, _iterations))
        {
            var keyBytes = password.GetBytes(Keysize / 8);
            var engine = new RijndaelEngine(256);
            var blockCipher = new CbcBlockCipher(engine);
            var cipher = new PaddedBufferedBlockCipher(blockCipher, new Pkcs7Padding());
            var keyParam = new KeyParameter(keyBytes);
            var keyParamWithIV = new ParametersWithIV(keyParam, ivStringBytes, 0, 32);
            cipher.Init(true, keyParamWithIV);
            var outputBytes = new byte[cipher.GetOutputSize(cipherTextBytes.Length)];
            var length = cipher.ProcessBytes(cipherTextBytes, outputBytes, 0);
            var finalBytes = cipher.DoFinal(outputBytes, 0, length);
            var final = Encoding.UTF8.GetString(finalBytes);
            return final;
        }
    }
}
</code></pre>

<p>Thanks in advance! I'm sure I'm doing something dumb, but I'm not a cryptographic expert, and I'm having trouble finding good BouncyCastle examples.</p>
","<p>I believe your problem is in the line</p>

<p>cipher.Init(true, keyParamWithIV);</p>

<p>the first parameter initializes the cipher for encryption if true and for decryption if false.  If you set it to false it should work.</p>

<p>See
<a href=""http://people.eecs.berkeley.edu/~jonah/bc/org/bouncycastle/crypto/paddings/PaddedBufferedBlockCipher.html#init(boolean,%20org.bouncycastle.crypto.CipherParameters)"" rel=""nofollow noreferrer"">http://people.eecs.berkeley.edu/~jonah/bc/org/bouncycastle/crypto/paddings/PaddedBufferedBlockCipher.html#init(boolean,%20org.bouncycastle.crypto.CipherParameters)</a></p>
","363","<c#><bouncycastle><encryption-symmetric>","3","3","1","2018-11-30 17:52:29","53561258","3","","1623431","","2018-11-30 17:52:29","2018-11-30 14:31:24",""
"6402133","Blowfish Block Size 64bits - What to do when input is not a multiple of 64bits","<p>I'm creating an application to encrypt a string of unknown length with Blowfish. The input can be of any length, and will therefore not necessarily be a multiple of 8 bytes.</p>

<p>What is the standard method for dealing with this situation? Perhaps fill in the end of the string with 0s? Presumably there's a more elegant way?</p>

<p>Thanks in advance.</p>
","<p>There are quite a number of <a href=""http://en.wikipedia.org/wiki/Padding_%28cryptography%29"" rel=""nofollow"">padding mechanisms</a> (wikipedia) that you can choose from. The algorithms vary from simply appending zeros to the end to a padding mechanism that can be validated and/or removed.</p>

<p>Alternatively, you can use the <a href=""http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Output_feedback_.28OFB.29"" rel=""nofollow"">OFB mode of operation</a> (wikipedia) to convert a block cipher into a stream cipher, and get rid of the requirement for padding.</p>
","362","<encryption><blowfish><encryption-symmetric>","0","1","1","2011-06-19 11:48:14","6402172","0","","","","","2011-06-19 11:39:26",""
"10884064","Is the same key derived providing the same salt and password using Rfc2898DeriveBytes","<p>I read <a href=""http://www.codeproject.com/Articles/38804/Encryption-and-Decryption-on-the-NET-Framework"" rel=""nofollow"">this tutorial</a> about encryption in .NET</p>

<p>it uses Rfc2898DeriveBytes to create a random key to be used by symmetric algorithm . but it doesn't save the key . and later in decryption method it supplies the same password and salt and decrypts the text .</p>

<p>does it mean supplying the same salt and password to Rfc2898DeriveBytes could derived the same key ? no need to save the key and just save salt and password ?</p>
","<p>Yes, that is correct.  Identical inputs to  Rfc2898DeriveBytes provide identical outputs.   Otherwise, decryption would not be possible. </p>

<p>The article you reference uses the term ""random"" loosely. The output of Rfc2898DeriveBytes is not random: but it has high entropy. </p>
","347","<asp.net><salt><encryption-symmetric><pbkdf2>","0","1","1","2012-06-10 21:02:19","10972332","0","","","","","2012-06-04 15:41:04",""
"51593020","SQL Server Stored Procedure with Cursor causing error","<p>I get this error message. Can anyone help me to fix my query? What is the right way to use the cursor?</p>

<p>This stored procedure should fetch data from a temp table and insert it into two different tables. Some of the columns in the temp table like <code>EID, FN, MN, LN</code> should be inserted into table <code>dbo.tblUser</code>, and the rest of the columns from the temp table should be in the table <code>dbo.refRoster_Details</code>.</p>

<p>Please do help me on this matter thanks.</p>

<blockquote>
  <p>Msg 16950, Level 16, State 2, Line 22<br>
  The variable '@MyCursor' does not currently have a cursor allocated to it.</p>
  
  <p>Msg 16917, Level 16, State 2, Line 96<br>
  Cursor is not open.</p>
  
  <p>Msg 16917, Level 16, State 1, Line 227<br>
  Cursor is not open.</p>
</blockquote>

<p>Code:</p>

<pre><code>CREATE PROCEDURE [dbo].[sp_BulkUserInsert]
AS
BEGIN
    SET NOCOUNT ON;

    OPEN SYMMETRIC KEY SymmetricKey1
    DECRYPTION BY CERTIFICATE Certificate1;

        DECLARE @vEID varchar(max) 
        DECLARE @vFirstName varchar(max) 
        DECLARE @vMiddleName varchar(max)
        DECLARE @vLastName varchar(max) 
        DECLARE @vRoleID int 
        DECLARE @vLevelID int 
        DECLARE @vEmployeeTypeID int 
        DECLARE @vBadgeNo int 
        DECLARE @vSAPID int 
        DECLARE @vContactNo int 
        DECLARE @vBirthDate date 
        DECLARE @vProjectID int 
        DECLARE @vManagerID int 
        DECLARE @vSupervisorID int 
        DECLARE @vLocationID int 
        DECLARE @vHireDate date 
        DECLARE @vRollIn date 
        DECLARE @vRollOff date 
        DECLARE @vTimeIn datetime 
        DECLARE @vTimeOut datetime 
        DECLARE @vIsVisa int 
        DECLARE @vIsPassport int 
        DECLARE @vDateAdded date 
        DECLARE @vDateModified date 
        DECLARE @vTowerID int 
        DECLARE @vIsActive int 

            DECLARE @MyCursor CURSOR
            OPEN @MyCursor
            SET @MyCursor = CURSOR FAST_FORWARD FOR


                SELECT TOP 1
                    --columns to push in tblUser
                    EncryptByKey (Key_GUID('SymmetricKey1'), CONVERT(varchar, EID)),
                    EncryptByKey (Key_GUID('SymmetricKey1'), CONVERT(varchar,FIRSTNAME)),
                    EncryptByKey (Key_GUID('SymmetricKey1'), CONVERT(varchar,MIDDLENAME)),
                    EncryptByKey (Key_GUID('SymmetricKey1'), CONVERT(varchar,LASTNAME)),
                    --columns to push in roster_detail
                    CAST(ISNULL(ROLEID,'4') as int) ROLEID,
                    CAST(ISNULL(LEVELID,'1') as int) LEVELID,
                    CAST(ISNULL(EMPLOYEETYPEID,'1') as int) EMPLOYEETYPEID,
                    CAST(ISNULL(BADGEno,'1') as int) BADGEno,
                    CAST(ISNULL([SAP ID],'1') as int) [SAP ID],
                    CAST(ISNULL(CONTACTno,'1') as int) CONTACTno,
                    CAST(ISNULL(BIRTHDAY,'1991-01-01') as date) BIRTHDAY,
                    CAST(ISNULL(HIREDATE,'1991-01-01') as date) HIREDATE,
                    CAST(ISNULL(PROJECTID,'1') as int) PROJECTID,
                    CAST(ISNULL(MANAGERID,'1') as int) MANAGERID,
                    CAST(ISNULL(SUPERVISORID,'1') as int) SUPERVISORID,
                    CAST(ISNULL(LOCATIONID,'1') as int) LOCATIONID,
                    CAST(ISNULL(ROLLIN,'1991-01-01') as date) ROLLIN,
                    CAST(ISNULL(ROLLOFF,'1991-01-01') as date) ROLLOFF,
                    CAST(ISNULL(TIMEIN,'1991-01-01') as datetime) TIMEIN,
                    CAST(ISNULL([TIMEOUT] ,'1991-01-01') as datetime) [TIMEOUT],
                    CAST(ISNULL(ISVISA,'1') as int) ISVISA,
                    CAST(ISNULL(ISPASSPORT,'1') as int) ISPASSPORT,
                    CAST(ISNULL(DATEADDED,'1991-01-01') as date) DATEADDED,
                    CAST(ISNULL(DATEMODIFIED,'1991-01-01') as date) DATEMODIFIED,
                    CAST(ISNULL(TOWERID,'1') as int) TOWERID,
                    CAST(ISNULL(ISACTIVE,'1') as int) ISACTIVE
                FROM tblRIRO_TempRosterList
                ORDER BY [SAP ID] DESC

            --OPEN @MyCursor
           FETCH NEXT FROM @MyCursor INTO
            @vEID, 
            @vFirstName, 
            @vMiddleName, 
            @vLastName,
           @vRoleID,
           @vLevelID, 
           @vEmployeeTypeID, 
           @vBadgeNo, 
           @vSAPID, 
           @vContactNo, 
           @vBirthDate, 
           @vProjectID, 
           @vManagerID, 
           @vSupervisorID, 
           @vLocationID, 
           @vHireDate, 
           @vRollIn, 
           @vRollOff, 
           @vTimeIn, 
           @vTimeOut, 
           @vIsVisa, 
           @vIsPassport, 
           @vDateAdded, 
           @vDateModified, 
           @vTowerID, 
           @vIsActive

           WHILE @@FETCH_STATUS = 0
           BEGIN
                PRINT(@vEID)
                DECLARE @IsEID_Exist int = ISNULL((SELECT TOP 1 COUNT(*) FROM tblUser WHERE EID_encrypt = @vEID),0)
                PRINT (@IsEID_Exist)
                DECLARE @Incremental_UserID int = 0
                IF (@IsEID_Exist = 0)
                BEGIN
                    INSERT INTO tblUser (EID_encrypt, FirstName_encrypt, MiddleName_encrypt, LastName_encrypt)
                    VALUES (
                            EncryptByKey (Key_GUID('SymmetricKey1'), CONVERT(varchar, @vEID)),
                            EncryptByKey (Key_GUID('SymmetricKey1'), CONVERT(varchar, @vFirstName)),
                            EncryptByKey (Key_GUID('SymmetricKey1'), CONVERT(varchar, @vMiddleName)),
                            EncryptByKey (Key_GUID('SymmetricKey1'), CONVERT(varchar, @vLastName)))
                    SELECT TOP 1 @Incremental_UserID = @@IDENTITY
                    IF (@Incremental_UserID &gt; 0) 
                    BEGIN
                        INSERT INTO refRoster_Detail (
                                    UserID, 
                                    RoleID, 
                                    LevelID,
                                    EmployeeTypeID,
                                    BadgeNo_encrypt,
                                    SAPID_encrypt,
                                    ContactNo_encrypt,
                                    BirthDate_encrypt,
                                    ProjectID,
                                    ManagerID,
                                    SupervisorID,
                                    LocationID,
                                    HireDate,
                                    RollIn,
                                    RollOff,
                                    TimeIn,
                                    [TimeOut],
                                    IsVisa,
                                    IsPassport,
                                    DateAdded,
                                    DateModified,
                                    TowerID,
                                    IsActive)
                        VALUES(@Incremental_UserID, 
                                @vRoleID, 
                                @vLevelID, 
                                @vEmployeeTypeID, 
                                EncryptByKey (Key_GUID('SymmetricKey1'), CONVERT(varchar, @vBadgeNo)), 
                                EncryptByKey (Key_GUID('SymmetricKey1'), CONVERT(varchar, @vSAPID)), 
                                EncryptByKey (Key_GUID('SymmetricKey1'), CONVERT(varchar, @vContactNo)), 
                                EncryptByKey (Key_GUID('SymmetricKey1'), CONVERT(varchar, @vBirthDate)), 
                                @vProjectID, 
                                @vManagerID, 
                                @vSupervisorID, 
                                @vLocationID, 
                                @vHireDate, 
                                @vRollIn, 
                                @vRollOff, 
                                @vTimeIn, 
                                @vTimeOut, 
                                @vIsVisa, 
                                @vIsPassport, 
                                @vDateAdded, 
                                @vDateModified, 
                                @vTowerID,
                                @vIsActive)
                    END
                END

                FETCH NEXT FROM @MyCursor INTO 
                   @vEID, 
                   @vFirstName, 
                   @vMiddleName, 
                   @vLastName,
                   @vRoleID,
                   @vLevelID, 
                   @vEmployeeTypeID, 
                   @vBadgeNo, 
                   @vSAPID, 
                   @vContactNo, 
                   @vBirthDate, 
                   @vProjectID, 
                   @vManagerID, 
                   @vSupervisorID, 
                   @vLocationID, 
                   @vHireDate, 
                   @vRollIn, 
                   @vRollOff, 
                   @vTimeIn, 
                   @vTimeOut, 
                   @vIsVisa, 
                   @vIsPassport, 
                   @vDateAdded, 
                   @vDateModified, 
                   @vTowerID, 
                   @vIsActive
           END
           CLOSE @MyCursor
           DEALLOCATE @MyCursor
    CLOSE SYMMETRIC KEY SymmetricKey1;
    END
</code></pre>
","<blockquote>
<pre><code>...  
DECLARE @MyCursor CURSOR
OPEN @MyCursor
SET @MyCursor = CURSOR FAST_FORWARD FOR
...
</code></pre>
</blockquote>

<p>You call <code>OPEN</code> before you allocate a cursor to <code>@MyCursor</code>. Move <code>OPEN @MyCursor</code> AFTER <code>SET @MyCursor = CURSOR FAST_FORWARD FOR ...</code>.</p>

<pre><code>SET @MyCursor = CURSOR FAST_FORWARD FOR
...
    ORDER BY [SAP ID] DESC
OPEN @MyCursor
</code></pre>

<p>But I wonder why yous use a cursor at all for a <code>SELECT TOP 1</code> query. A <code>SELECT @var = col ...</code> and an <code>ID @@rowcount = 1</code> to handle only the case when data was found would do too.</p>
","341","<sql><stored-procedures><cursor><encryption-symmetric>","1","0","1","2018-07-30 16:53:45","","3","","13302","","2018-07-30 11:33:29","2018-07-30 11:30:40",""
"43655023","drupal 8 node->setTitle","<p>I'm trying to store encrypted data in my d8 database, and decrypt it to display it to authorised users:</p>

<pre><code>use \Defuse\Crypto\Key;
use \Defuse\Crypto\Crypto;

function my_module_node_load($nodes) {    
    $key = loadEncryptionKeyFromConfig();
    $title = $nodes[1]-&gt;getTitle(); // $title is ""def369u8765""
    $decrypted_title = Crypto::decrypt($title, $key); //$decrypted_title is 'a test note'
    $nodes[1]-&gt;setTitle($decrypted_title);
    $nodes[1]-&gt;getTitle(); // returns 'a test note'
    return $nodes;
}
</code></pre>

<p>When it actually gets displayed on my page, it's still the encrypted version. In the db, node_field_revision still shows the encrypted version, and the timestamp is unchanged since yesterday.</p>

<p>What am I doing wrong? how should I be returning the decrypted version?</p>

<p>I do NOT want to decrypt it in my database. It must remain encrypted on disk.</p>

<p>EDIT: I added $nodes[1]->save(); and it (predictably) went into an infinite loop because node_load is called as part of the save() process.</p>

<p>EDIT: I do know that I shouldn't hard code the [1]! Once I've got this one node sorted, I'll put this into a loop over all the nid's in $nodes</p>
","<p>Turns out caching was tripping me up - the code works fine.</p>

<pre><code>drupal cr all
</code></pre>

<p>did the trick. </p>

<p>I'm new to drupal x, don't judge me</p>
","341","<php><encryption><drupal-8><encryption-symmetric>","0","1","2","2017-05-02 10:47:23","","0","","1816580","","2017-04-27 17:36:23","2017-04-27 10:21:43",""
"43655023","drupal 8 node->setTitle","<p>I'm trying to store encrypted data in my d8 database, and decrypt it to display it to authorised users:</p>

<pre><code>use \Defuse\Crypto\Key;
use \Defuse\Crypto\Crypto;

function my_module_node_load($nodes) {    
    $key = loadEncryptionKeyFromConfig();
    $title = $nodes[1]-&gt;getTitle(); // $title is ""def369u8765""
    $decrypted_title = Crypto::decrypt($title, $key); //$decrypted_title is 'a test note'
    $nodes[1]-&gt;setTitle($decrypted_title);
    $nodes[1]-&gt;getTitle(); // returns 'a test note'
    return $nodes;
}
</code></pre>

<p>When it actually gets displayed on my page, it's still the encrypted version. In the db, node_field_revision still shows the encrypted version, and the timestamp is unchanged since yesterday.</p>

<p>What am I doing wrong? how should I be returning the decrypted version?</p>

<p>I do NOT want to decrypt it in my database. It must remain encrypted on disk.</p>

<p>EDIT: I added $nodes[1]->save(); and it (predictably) went into an infinite loop because node_load is called as part of the save() process.</p>

<p>EDIT: I do know that I shouldn't hard code the [1]! Once I've got this one node sorted, I'll put this into a loop over all the nid's in $nodes</p>
","<p>I have similar kind of requirement, resolved using</p>

<pre><code>use Drupal\views\Views;
function my_module_node_view(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {   

// parse node $build

}
</code></pre>

<p>OR in preprocess theme hook </p>

<pre><code>function themename_preprocess_node(&amp;$variables) { 
}
</code></pre>
","341","<php><encryption><drupal-8><encryption-symmetric>","0","0","2","2017-05-02 10:47:23","","0","","1816580","","2017-04-27 17:36:23","2017-04-27 10:21:43",""
"48903835","How to decrypt string in c# or sql server using symmetric key","<p>Below is my scenario</p>

<ol>
<li>I receive encrypted value(using DBMS_CRYPTO.ENCRYPT_3DES_2KEY) from client in text file ( Encryptions done in Oracle)</li>
<li>I receive the key(AES192 30 character key) from client which is used for encryption.</li>
</ol>

<p>I am using SQL Server 2012. How can i decrypt this value in SQL OR C#?</p>
","<p>This essentially requires to follow below mentioned step:</p>

<ol>
<li>Verify SQL Server Master Key</li>
<li>Create a Master Key Encryption password</li>
<li>Create a self signed certificate

<ul>
<li>A certificate is a digitally signed security object that contains a public (and optionally a private) key for SQL Server</li>
</ul></li>
<li>Create Symmetric Key.</li>
<li>Encrypt the column(needs to be <code>varbinary</code> type)</li>
</ol>

<p>To add records:</p>

<p>sample syntax:</p>

<pre><code>OPEN SYMMETRIC KEY SymmetricKey1 DECRYPTION BY CERTIFICATE Certificate1;
-- Performs the update of the record 
   INSERT INTO dbo.test VALUES 
    (x, EncryptByKey(Key_GUID('SymmetricKey1'), CONVERT(varchar,'4545-58478-1245'))); 
   GO
</code></pre>

<p>For step by step execution, follow <a href=""https://www.mssqltips.com/sqlservertip/2431/sql-server-column-level-encryption-example-using-symmetric-keys/"" rel=""nofollow noreferrer"">this mssqltips article</a></p>
","336","<c#><sql-server><encryption-symmetric>","-1","0","1","2018-02-23 10:15:58","","1","","2553267","","2018-02-23 10:15:58","2018-02-21 10:40:32",""
"38058009","Is there any difference between AES_128_CBC and AES_128_CBC_SHA algorithm?","<p>Is there any difference between AES_128_CBC and AES_128_CBC_SHA algorithm? I have a client document which says AES_128_CBC_SHA algorithm for data encryption. could anybody can share some Library files (.net, C,C#) which does AES_128_CBC_SHA algorithm. I am using LabVIEW for data encryption.</p>

<p>My module will accept encrypted data in AES_128-CBC_SHA algorithm.</p>
","<p>If you are using Labview why are you asking for a .net, C, C# library?
Why don't use a native Labview library?</p>

<p><a href=""https://decibel.ni.com/content/blogs/viGods/2012/06/04/labview-advanced-encryption-standart-aes-library"" rel=""nofollow noreferrer"">Here is</a> a free one, whereas <a href=""http://www.ni.com/gate/gb/GB_EVALTLKTENCRYPLVS/US"" rel=""nofollow noreferrer"">this one</a> is sold by LVS Tools.</p>

<p>Maybe <a href=""https://stackoverflow.com/questions/26049672/why-does-chrome-display-a-sha1-message-with-a-sha2-certificate"">this post</a> could be useful about AES_128_CBC + SHA </p>
","336","<.net><encryption><aes><labview><encryption-symmetric>","-2","0","1","2016-06-28 09:36:01","","1","","1816580","","2016-06-27 15:49:42","2016-06-27 15:35:52",""
"20108748","Secure communication + authentification on android server","<p>I am trying to implement a server on android which securely communicates with (registered) clients. The protocol is proprietary.
My question is: Is following communication secure?</p>

<ol>
<li>Adding a User:
<ul>
<li>Client requests sign up
<ul>
<li>Server creates public key and sends it to the client.</li>
</ul></li>
<li>Client encrypts username+password with public key and sends it to the server.
<ul>
<li>Server accepts connection, hashes salted password, stores it in a keystore and
informs client about accepted sign up. (the decision, if a client will be
accepted or declined will be made by the user of the phone)</li>
</ul></li>
</ul></li>
<li>Communication for registered users:
<ul>
<li>Client requests service
<ul>
<li>Server creates public key and sends it to the client.</li>
</ul></li>
<li>Client sends username+password+symmetric communication key to server.
<ul>
<li>Server verifies username and password using stored hash and salt. Server starts
symmetrically encrypted communication with client.</li>
</ul></li>
</ul></li>
</ol>

<p>RSA will be used for asymmetric and AES will be used for symmetric en/decryption.</p>
","","335","<android><encryption><client-server><public-key-encryption><encryption-symmetric>","1","","0","2013-11-21 00:52:53","","2","","2097062","","2013-11-21 00:52:53","2013-11-20 22:48:21",""
"30765878","Symmetric Key Decryption returning values with space between characters","<p>I am using following Scaler-valued function to decrypt data that is encrypted using a symmetric key:</p>

<pre><code>USE [DBNAME]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER FUNCTION [dbo].[DECRYPTDATA] 
(
    @CipherText NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @Result NVARCHAR(MAX)
    SELECT @Result = CONVERT(VARCHAR(MAX),DECRYPTBYKEY(@CipherText))
    RETURN @Result
END
</code></pre>

<p>And I am using following query to get the data:</p>

<pre><code>EXEC [dbo].OpenKeys
SELECT ([dbo].DECRYPTDATA([Value])) AS VALUE FROM [Table1] WHERE [UsrId] =2 AND [GroupID] = 44
</code></pre>

<p>I executed this query in SQL Server 2012 Management Studio, it's showing only the first letter of the decrypted text:</p>

<p><img src=""https://i.stack.imgur.com/tvrmQ.png"" alt=""enter image description here""></p>

<p>And when I checked the <code>DataTable</code> in C# code, it's showing space between characters:</p>

<p><img src=""https://i.stack.imgur.com/ylT3f.png"" alt=""enter image description here""></p>

<p>Actual data must be like this:</p>

<pre><code>╔═══════╗
║ VALUE ║
╠═══════╣
║ 232   ║
║ hgjhg ║
║ 12    ║
║ 53    ║
║ 0     ║
╚═══════╝
</code></pre>

<p>What's happening here?</p>

<p><strong>UPDATE</strong></p>

<p>I tried inserting directly like <code>INSERT INTO Table1([Value]) VALUES([dbo].ENCRYPTISDATA('432'))</code> but when I fetch this row it shows <code>4</code> only. So I think the problem is at the SQL Server side. What it is I don't know. Hope somebody can figure out soon. I have to submit this project in some days.</p>

<p><strong>I am using TripleDES algorithm.</strong></p>
","<p>Regardless of the underlying cause of this issue, in case your original data does not contain blank spaces between characters, then you can apply a quick fix like: <code>strWithSpaces=strWithSpaces.Replace("" "", String.Empty);</code></p>

<p>In regards to the cause: your original string before encryption probably contains some non-printable (i.e. invisible) characters, which get encoded. I recommend to analyze the original data prior to encryption, and remove the unnecessary <code>chars</code> at that stage using similar technique.</p>

<p>Hope this may help.</p>
","328","<c#><asp.net><sql-server><sql-server-2012><encryption-symmetric>","0","0","2","2015-06-10 21:56:01","30768001","3","","1124494","","2015-06-10 20:23:02","2015-06-10 19:45:37",""
"30765878","Symmetric Key Decryption returning values with space between characters","<p>I am using following Scaler-valued function to decrypt data that is encrypted using a symmetric key:</p>

<pre><code>USE [DBNAME]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER FUNCTION [dbo].[DECRYPTDATA] 
(
    @CipherText NVARCHAR(MAX)
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @Result NVARCHAR(MAX)
    SELECT @Result = CONVERT(VARCHAR(MAX),DECRYPTBYKEY(@CipherText))
    RETURN @Result
END
</code></pre>

<p>And I am using following query to get the data:</p>

<pre><code>EXEC [dbo].OpenKeys
SELECT ([dbo].DECRYPTDATA([Value])) AS VALUE FROM [Table1] WHERE [UsrId] =2 AND [GroupID] = 44
</code></pre>

<p>I executed this query in SQL Server 2012 Management Studio, it's showing only the first letter of the decrypted text:</p>

<p><img src=""https://i.stack.imgur.com/tvrmQ.png"" alt=""enter image description here""></p>

<p>And when I checked the <code>DataTable</code> in C# code, it's showing space between characters:</p>

<p><img src=""https://i.stack.imgur.com/ylT3f.png"" alt=""enter image description here""></p>

<p>Actual data must be like this:</p>

<pre><code>╔═══════╗
║ VALUE ║
╠═══════╣
║ 232   ║
║ hgjhg ║
║ 12    ║
║ 53    ║
║ 0     ║
╚═══════╝
</code></pre>

<p>What's happening here?</p>

<p><strong>UPDATE</strong></p>

<p>I tried inserting directly like <code>INSERT INTO Table1([Value]) VALUES([dbo].ENCRYPTISDATA('432'))</code> but when I fetch this row it shows <code>4</code> only. So I think the problem is at the SQL Server side. What it is I don't know. Hope somebody can figure out soon. I have to submit this project in some days.</p>

<p><strong>I am using TripleDES algorithm.</strong></p>
","<p>It appears that there are a couple of things at play here:</p>

<ol>
<li><code>decryptbykey</code> takes a varbinary, not an nvarchar. I'd guess that there is some unwanted conversion going on there.</li>
<li>You're converting the result of the decryption to varchar but returning from your function as nvarchar. Again unwanted conversion.</li>
</ol>
","328","<c#><asp.net><sql-server><sql-server-2012><encryption-symmetric>","0","1","2","2015-06-10 21:56:01","30768001","3","","1124494","","2015-06-10 20:23:02","2015-06-10 19:45:37",""
"26139348","Does OpenSSL support ciphers with block size 512 bits?","<p>I added my own cipher as an engine to OpenSSL. My cipher supports different key sizes and block sizes, one of them is 512 bit block size. Does OpenSSL support ciphers with that key size and block size ?</p>

<p>When I set my cipher's block size to 64, this is what i get when i encrypt or decrypt:
The error is in evp_enc.c line 216
OpenSSL internal error, assertion failed: ctx->cipher->block_size == 1 || ctx->cipher->block_size == 8 || ctx->cipher->block_size == 16</p>

<p>Does this mean that only these block sizes are supported in OpenSSL ?</p>

<p>Thanks.</p>
","","328","<encryption><openssl><encryption-symmetric>","1","","0","2014-10-01 14:36:18","","0","","3608595","","2014-10-01 14:36:18","2014-10-01 10:33:02",""
"46032384","SQL Symmetric Key Encryption Alternative","<p>I am looking for an alternative to symmetric key encryption to savely store sensitive data in a Microsoft SQL database. The reason for this is a few days ago I had an error during the night (at 3 am) where the database responded my status call, which is used for health checks of the backend, with an error </p>

<blockquote>
  <p>A severe error occurred on the current command. The results, if any, should be discarded.</p>
</blockquote>

<p>(The call I am using for health check is only calling my rest api - going through the web service to the database, does a <em>select count(*) from Member</em> and returns the count.)</p>

<p>After that error every api call which used sensitive data from the database returned</p>

<blockquote>
  <p>Please create a master key in the database or open the master key in the session before performing this operation.</p>
</blockquote>

<p>My monitor service said that the backend was up again after 2 minutes automatically but the master key was not working anymore. I fixed it with the following command</p>

<p><code>open master key decryption by password = 'password'
alter master key add encryption by service master key</code></p>

<p>the morning after but in the meantime the backend was not working correctly. So the failover didn't really did its job (because I had to do something manually to get everything working again).</p>

<p>So I am trying to achieve to store sensitive data easily in the database (must be able to decrypt it again) and to have a working failover without doing anything manually too.</p>

<p>Thanks for your input!</p>
","<p>What i think I'm reading is that you have some sort of HA technology in play (e.g. availability groups). If that's the case, care needs to be taken to ensure that both sides of the topology can open the database master key.</p>

<p>Fortunately, it's fairly easy to do that. You can backup and restore service master keys (SMK). So, you'll backup the SMK from the secondary node and restore it to the primary node. SQL Server will decrypt anything currently encrypted with the old key and re-encrypt with the new.</p>
","326","<sql-server><failover><encryption-symmetric>","1","2","1","2017-09-04 14:58:25","","0","","4958138","","2017-09-04 14:58:25","2017-09-04 07:38:42",""
"10101874","AES Decryption Sample code","<p>From past one week i m trying to decrypt a data that is encrypted in java server my values are as follows</p>

<blockquote>
  <p>Decrypted value-->admin<br/> cipher
  key-->2020a7db17ca8071de72ef439405b570<br/> Enciphered
  data--f118404f2b7d98a744d2fa24c0d21167<br/></p>
</blockquote>

<p>and my code is </p>

<pre><code> NSString* cipherText = @""f118404f2b7d98a744d2fa24c0d21167"";
    NSLog(@""CipherText = %@"",cipherText);
    NSString* expectedText = @""admin"";
    NSLog(@""expexted text = %@"",expectedText);
    Cipher* cipher = [[Cipher alloc] initWithKey:@""2020a7db17ca8071de72ef439405b570""];
    NSLog(@""cipher = %@"",cipher);
    NSData* cipherTextData = [NSData dataWithBase64EncodedString:cipherText];
     NSLog(@""ciphertextdata= %@"",cipherTextData);
    NSData* plainTextData = [cipher decrypt:cipherTextData];
     NSLog(@""plaintextdata= %@"",plainTextData);
    NSString* plainText = [[NSString alloc] initWithData:plainTextData encoding:NSUTF8StringEncoding];
    NSLog(@""plaintext= %@"",plainText);
</code></pre>

<p>but i m not able to get the value <code>cipherTextData</code> and <code>plainTextData</code>. It is always showing null. Anyone please help</p>
","","323","<iphone><aes><encryption-symmetric>","1","","0","2012-04-11 09:17:01","","12","","","user1133747","2012-04-11 09:17:01","2012-04-11 07:46:08",""
"4004836","RijndaelEncryption with Java then Decryption with C# and EnterpriseLibrary 4.1","<p>I believe when the EnterpriseLibrary tries to decrypt a RijndaelManaged encrypted string it expects the Initialization Vector to be prepended to the encrypted text.  Currently with the code below.  I can decrypt the message with out an exception, but I am getting weird characters like: </p>

<blockquote>
  <p>�猀漀椀搀㴀眀最爀甀戀攀㄀☀甀琀挀㴀㈀　㄀　ⴀ㄀　ⴀ㈀㄀吀㄀㌀㨀㔀㈀㨀㄀㌀</p>
</blockquote>

<p>What do I need to do to make this work?  Any help is greatly appreciated.  Here is some of the code I have...</p>

<p>I have a C# application that decrypts data using the EnterpriseLibrary 4.1 (encryption: RijndaelManaged).</p>

<pre><code>string message = ""This encrypted message comes from Java Client"";
Cryptographer.DecryptSymmetric(""RijndaelManaged"", message);
</code></pre>

<p>The client encryptes the message, implemented in Java.</p>

<pre><code>public String encrypt(String auth) {
           try {
               String cipherKey = ""Key as a HEX string"";
               byte[] rawKey = hexToBytes(cipherKey);
               SecretKeySpec keySpec = new SecretKeySpec(rawKey, ""AES"");
               Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");

               String cipherIV = ""xYzF5AqA2cKLbvbfGzsMwg=="";
               byte[] btCipherIV = Base64.decodeBase64(cipherIV.getBytes());

               cipher.init(Cipher.ENCRYPT_MODE, keySpec, new IvParameterSpec (btCipherIV));
               byte[] unencrypted = StringUtils.getBytesUtf16(auth);
               byte[] encryptedData = cipher.doFinal(unencrypted);
               String encryptedText = null;

               byte[] entlib = new byte[btCipherIV2.length + encryptedData.length];
               System.arraycopy(btCipherIV, 0, entlib, 0, btCipherIV.length);
               System.arraycopy(encryptedData, 0, entlib, btCipherIV.length, encryptedData.length);

               encryptedText = new String(encryptedData);
               encryptedText = Base64.encodeBase64String(encryptedData);               
               return encryptedText;

           } catch (Exception e) {
           }

           return """";
       }

    public static byte[] hexToBytes(String str) {
          if (str==null) {
             return null;
          } else if (str.length() &lt; 2) {
             return null;
          } else {
             int len = str.length() / 2;
             byte[] buffer = new byte[len];
             for (int i=0; i&lt;len; i++) {
                 buffer[i] = (byte) Integer.parseInt(
                    str.substring(i*2,i*2+2),16);
             }
             return buffer;
          }

       }
</code></pre>
","<p>I found the answer.  The problem in the above code:</p>

<pre><code>StringUtils.getBytesUtf16(auth);
</code></pre>

<p>Instead the Enterprise Library is using Little Endian byte order.  The function I was using doesn't.  Instead I should have used:</p>

<pre><code>StringUtils.getBytesUtf16Le(auth);
</code></pre>

<p>This solved my problem.  Thanks for anyone who took a loot at this.  I appreciate it!</p>
","318","<c#><java><enterprise-library><encryption-symmetric>","1","1","1","2010-10-23 17:45:22","4005039","0","3","97275","","2010-10-23 17:45:22","2010-10-23 16:00:38",""
"31746473","Encrypt query string in java script and decrypt in python","<p>I want to encrypt queryString in JavaScript &amp; Decrypt in Python,
 this is a pyhon code, want similar function in JavaScript, so i can encrypt from JS &amp; decrypt in python. 
OR if u have otherway to solve this... help</p>

<pre><code>def encode(key, msg):
    from Crypto.Cipher import AES
    import base64
    key = key.ljust(len(key) + (16 - len(key) % 16))
    msg = msg.ljust(len(msg) + (16 - len(msg) % 16))
    cipher = AES.new(key, AES.MODE_ECB)
    return base64.b64encode(cipher.encrypt(msg))

def decode(key, msg):
    from Crypto.Cipher import AES
    import base64
    key = key.ljust(len(key) + (16 - len(key) % 16))
    cipher = AES.new(key, AES.MODE_ECB)
    return (cipher.decrypt(base64.b64decode(msg))).strip()
</code></pre>
","","317","<javascript><python><encryption><aes><encryption-symmetric>","0","","0","2015-07-31 12:41:05","","3","","","","","2015-07-31 12:41:05","2019-11-02 08:07:44"
"55352313","Trying to decrypt a string using openssl/golang which has been encrypted in rails","<p>I am trying to decrypt a string which has been encrypted in my rails project. This is how I am encrypting the data:</p>

<pre><code>def encrypt_text(text_To_encrypt)
        # 0. generate the key using command openssl rand -hex 16 on linux machines
        # 1. Read the secret from config
        # 2. Read the salt from config
        # 3. Encrypt the data
        # 4. return the encypted data
        # Ref: http://www.monkeyandcrow.com/blog/reading_rails_how_does_message_encryptor_work/
        secret = Rails.configuration.miscconfig['encryption_key']
        salt = Rails.configuration.miscconfig['encryption_salt']
        key = ActiveSupport::KeyGenerator.new(secret).generate_key(salt, 32)
        crypt = ActiveSupport::MessageEncryptor.new(key)
        encrypted_data = crypt.encrypt_and_sign(text_To_encrypt)
        encrypted_data
end
</code></pre>

<p>Now the issue is I am not able to decrypt it using openssl. It just shows bad magic number. Once I do that in open ssl, my plan is to decrypt it in  golang.</p>

<p>Here is how I tried to descrypt it using openssl:</p>

<pre><code>openssl enc -d -aes-256-cbc -salt -in encrypted.txt -out decrypted.txt -d -pass pass:&lt;the key given in rails&gt; -a
</code></pre>

<p>This just shows bad magic number</p>
","<p>Trying to decrypt data encrypted in a different system will not work unless you are aware and deal with the <strong>many intricate details of how both systems do the cryptography</strong>. Although both Rails and the <code>openssl</code> command line tool use the OpenSSL libraries under the hood for their crypto operations, they both use it in their own distinct ways that are not directly interoperable.</p>

<p>If you look close to the two systems, you'll see that for example:</p>

<ul>
<li>Rails message encryptor not only encrypts the message but also <em>signs</em> it</li>
<li>Rails encryptor uses <code>Marshal</code> to serialize the input data</li>
<li>the <code>openssl enc</code> tool expects the encrypted data in a distinct file format with a <code>Salted__&lt;salt&gt;</code> header (this is why you get the <em>bad magic number</em> message from <code>openssl</code>)</li>
<li>the <code>openssl</code> tool must be properly configured to use the same ciphers as Rails encryptor and key generator, as <code>openssl</code> defaults are different from Rails defaults</li>
<li>the default ciphers configuration changed significantly since Rails 5.2.</li>
</ul>

<p>With this general info, we can have a look at a a practical example. It is tested in Rails 4.2 but should work equally up to Rails 5.1.</p>

<h2>Anatomy of a Rails-encrypted message</h2>

<p>Let me start with a slightly amended code that you presented. The only changes there are to preset the <code>password</code> and <code>salt</code> to static values and print a lot of debug info:</p>

<pre class=""lang-rb prettyprint-override""><code>def encrypt_text(text_to_encrypt)
  password = ""password"" # the password to derive the key
  salt = ""saltsalt"" # salt must be 8 bytes

  key = ActiveSupport::KeyGenerator.new(password).generate_key(salt, 32)

  puts ""salt (hexa) = #{salt.unpack('H*').first}"" # print the saltin HEX
  puts ""key (hexa) = #{key.unpack('H*').first}"" # print the generated key in HEX

  crypt = ActiveSupport::MessageEncryptor.new(key)
  output = crypt.encrypt_and_sign(text_to_encrypt)
  puts ""output (base64) = #{output}""
  output
end

encrypt_text(""secret text"")
</code></pre>

<p>When you run this, you'll get something like the following output:</p>

<pre><code>salt (hexa) = 73616c7473616c74
key (hexa) = 196827b250431e911310f5dbc82d395782837b7ae56230dce24e497cf07b6518
output (base64) = SGRTUXYxRys1N1haVWNpVWxxWTdCMHlyMk15SnQ0dWFBOCt3Z0djWVdBZz0tLTkrd1hBNWJMVm9HcnptZ3loOG1mNHc9PQ==--80d091e8799776113b2c0efd1bf75b344bf39994
</code></pre>

<p>The last line (output of the <code>encrypt_and_sign</code> method) is a combination of two parts separated by <code>--</code> (see <a href=""https://github.com/rails/rails/blob/5-0-stable/activesupport/lib/active_support/message_verifier.rb#L117"" rel=""nofollow noreferrer"">source</a>): </p>

<ol>
<li>the encrypted message (Base64-encoded) and </li>
<li>the message signature (Base64-encoded).</li>
</ol>

<p>The signature is not important for encryption so let's take a look in the first part - let's decode it in Rails console:</p>

<pre><code>&gt; Base64.strict_decode64(""SGRTUXYxRys1N1haVWNpVWxxWTdCMHlyMk15SnQ0dWFBOCt3Z0djWVdBZz0tLTkrd1hBNWJMVm9HcnptZ3loOG1mNHc9PQ=="")
=&gt; ""HdSQv1G+57XZUciUlqY7B0yr2MyJt4uaA8+wgGcYWAg=--9+wXA5bLVoGrzmgyh8mf4w==""
</code></pre>

<p>You can see that the decoded message again consists of two Base64-encoded parts separated by <code>--</code> (see <a href=""https://github.com/rails/rails/blob/5-0-stable/activesupport/lib/active_support/message_encryptor.rb#L87"" rel=""nofollow noreferrer"">source</a>):</p>

<ol>
<li>the encrypted message itself</li>
<li>the initialization vector used in the encryption</li>
</ol>

<p>Rails message encryptor uses the <strong><code>aes-256-cbc</code> cipher by default</strong> (note that this has changed since Rails 5.2). This cipher needs an initialization vector, which is randomly generated by Rails and must be present in the encrypted output so that we can use it together with the key to decipher the message. </p>

<p>Moreover, Rails does not encrypt the input data as a simple plain text, but rather a <strong>serialized version of the data</strong>, using the <code>Marshal</code> serializer by default (<a href=""https://github.com/rails/rails/blob/5-0-stable/activesupport/lib/active_support/message_encryptor.rb#L84"" rel=""nofollow noreferrer"">source</a>). If we decrypted such serialized value with openssl, we would  still get a slightly garbled (serialized) version of the initial plain text data. That's why it will be more appropriate to disable serialization while encrypting the data in Rails. This can be done by passing a parameter to the encryption method:</p>

<pre class=""lang-rb prettyprint-override""><code>  # crypt = ActiveSupport::MessageEncryptor.new(key)
  crypt = ActiveSupport::MessageEncryptor.new(key, serializer: ActiveSupport::MessageEncryptor::NullSerializer)

</code></pre>

<p>A re-run of the code yields output that is slightly shorter than the previous version, because the encrypted data has not been serialized now:</p>

<pre><code>salt (hexa) = 73616c7473616c74
key (hexa) = 196827b250431e911310f5dbc82d395782837b7ae56230dce24e497cf07b6518
output (base64) = SUlIWFBjSXRUc0JodEMzLzhXckJzUT09LS1oZGtPV1ZRc2I5Wi8zOG01dFNOdVdBPT0=--58bbaf983fd20459062df8b6c59eb470311cbca9
</code></pre>

<p>Finally, we must find out some info about the <strong>encryption key derivation</strong> procedure. The <a href=""https://github.com/rails/rails/blob/5-0-stable/activesupport/lib/active_support/key_generator.rb#L21"" rel=""nofollow noreferrer"">source</a> tells us that the KeyGenerator uses the <strong><code>pbkdf2_hmac_sha1</code></strong> algorithm with <code>2**16 = 65536</code> iterations to derive the key from the password / secret.</p>

<h2>Anatomy of an <code>openssl</code> encrypted message</h2>

<p>Now, a similar investigation is needed on the <code>openssl</code> side to learn the details of its decryption process. First, if you encrypt anything using the <code>openssl enc</code> tool, you will find out that the output has a <strong>distinct format</strong>:</p>

<pre><code>Salted__&lt;salt&gt;&lt;encrypted_message&gt;
</code></pre>

<p>It begins with the <strong><code>Salted__</code> magic string</strong>, then followed by the <strong>salt</strong> (in hex form) and finally followed by the encrypted data. To be able to decrypt any data using this tool, we must get our encrypted data into the same format.</p>

<p>The <code>openssl</code> tool uses the <a href=""https://www.openssl.org/docs/man1.0.2/man3/EVP_BytesToKey.html"" rel=""nofollow noreferrer""><code>EVP_BytesToKey</code></a> (see <a href=""https://github.com/openssl/openssl/blob/master/apps/enc.c#L480"" rel=""nofollow noreferrer"">source</a>) to derive the key by default but can be configured to use the <code>pbkdf2_hmac_sha1</code> algorithm using the <code>-pbkdf2</code> and <code>-md sha1</code> options. The number of iterations can be set using the <code>-iter</code> option. </p>

<h2>How to decrypt Rails-encrypted message in <code>openssl</code></h2>

<p>So, finally we have enough information to actually try to decrypt a Rails-encrypted message in <code>openssl</code>.</p>

<p>First we must decode the first part of the Rails-encrypted output again to get the encrypted data and the initialization vector:</p>

<pre class=""lang-rb prettyprint-override""><code>&gt; Base64.strict_decode64(""SUlIWFBjSXRUc0JodEMzLzhXckJzUT09LS1oZGtPV1ZRc2I5Wi8zOG01dFNOdVdBPT0="")
=&gt; ""IIHXPcItTsBhtC3/8WrBsQ==--hdkOWVQsb9Z/38m5tSNuWA==""
</code></pre>

<p>Now let's take the IV (the second part) and convert it to a hexa string form, as that is the form that <code>openssl</code> needs:</p>

<pre class=""lang-rb prettyprint-override""><code>&gt; Base64.strict_decode64(""hdkOWVQsb9Z/38m5tSNuWA=="").unpack(""H*"").first
=&gt; ""85d90e59542c6fd67fdfc9b9b5236e58""  # the initialization vector in hex form
</code></pre>

<p>Now we need to take the Rails-encrypted data and convert it to the format that <code>openssl</code> will recognize, i.e. prepend it with the magic string and salt and Base64-encode it again:</p>

<pre class=""lang-rb prettyprint-override""><code>&gt; Base64.strict_encode64(""Salted__"" + ""saltsalt"" + Base64.strict_decode64(""IIHXPcItTsBhtC3/8WrBsQ==""))
=&gt; ""U2FsdGVkX19zYWx0c2FsdCCB1z3CLU7AYbQt//FqwbE="" # encrypted data suitable for openssl
</code></pre>

<p>Finally, we can construct the <code>openssl</code> command to decrypt the data:</p>

<pre class=""lang-sh prettyprint-override""><code>$ echo  ""U2FsdGVkX19zYWx0c2FsdCCB1z3CLU7AYbQt//FqwbE="" | 
&gt; openssl enc -aes-256-cbc -d -iv 85d90e59542c6fd67fdfc9b9b5236e58 \
&gt;   -pass pass:password -pbkdf2 -iter 65536 -md sha1 -a
secret text
</code></pre>

<p>And voilá, <strong>we successfully decrypted the initial message!</strong></p>

<p>The <code>openssl</code> parameters are as follows:</p>

<ul>
<li><code>-aes-256-cbc</code> sets the same cipher as Rails uses for encryption</li>
<li><code>-d</code> stands for decryption</li>
<li><code>-iv</code> passes the initialization vector in the hex string form</li>
<li><code>-pass pass:password</code> sets the password used to derive the encryption key to ""password""</li>
<li><code>-pbkdf2</code> and <code>-md sha1</code> set the same key derivation algorithm as is used by Rails (<code>pbkdf2_hmac_sha1</code>)</li>
<li><code>-iter 65536</code> sets the same number of iterations for key derivation as was done in Rails</li>
<li><code>-a</code> allows to work with Base64-encoded encrypted data - no need to handle raw bytes in files</li>
</ul>

<p>By default <code>openssl</code> reads from STDIN, so we simply pass the encrypted data (in proper format) to <code>openssl</code> using echo.</p>

<h3>debugging</h3>

<p>In case you hit any problems when decrypting with <code>openssl</code>, it is useful to add the <code>-P</code> parameter to the command line, which outputs debugging info about the cipher / key parameters:</p>

<pre class=""lang-sh prettyprint-override""><code>$ echo ... | openssl ... -P
salt=73616C7473616C74
key=196827B250431E911310F5DBC82D395782837B7AE56230DCE24E497CF07B6518
iv =85D90E59542C6FD67FDFC9B9B5236E58
</code></pre>

<p>The <code>salt</code>, <code>key</code>, and <code>iv</code> values must correspond to the debugging values printed by the original code in the <code>encrypt_text</code> method printed above. If they are different, you know you are doing something wrong...</p>

<p>Now, I guess you can expect similar problems when trying to decrypt the message in go but I think you have some good pointers now to start.</p>
","316","<ruby-on-rails><ruby><openssl><encryption-symmetric>","3","1","1","2019-03-28 12:00:28","55397122","5","","1296707","","2019-03-27 09:19:36","2019-03-26 08:01:13",""
"28846702","What type of encryption do I need?","<p>Ok, the original task is to track users among 2 ""friendly"" web-sites who are able to share users cookies (lets say, I have example.com and my friend has mysite.com and also he has a domain simple.example.com so he can set cookies on .example.com).</p>

<p>To track users activity we want to set unique cookie, this cookie should be unique and 32 bytes long (ascii). Quite simple from this point of view and can be implemented as such:</p>

<pre><code>md5(microtime)
</code></pre>

<p>and that's it, but now we have new <strong>constraints</strong>:</p>

<ol>
<li><p>we should be able to tell who exactly has set the cookie: exmaple.com engine or mysite.com engine</p></li>
<li><p>32 bytes longs is a must, still</p></li>
<li><p>we should be able to encrypt timestamp (when cookies was issued)</p></li>
<li><p>first and last character of the resulting cookie value should be different so we can do A/B testing basing on the cookie (so we could always say if last character of the cookie is ""> K"", show this users ""feature A"")</p></li>
</ol>

<p>Given that the resulting string should always be 32 or less characters long and data should be encrypted and decrypted (not by users, of course) and the string should be unique for the users, it makes the task quite complex.</p>

<p>My thought and questions:</p>

<ul>
<li><p>we should use symmetric key encryption (solves <em>constraints</em> 1 and 3), but it this case how do we ensure that resulting string is no longer than 32 chars (<em>constraint</em> 2)?</p></li>
<li><p>is there other solution on the problem given that amount of data we need to encrypt is: timestamp and microseconds (14 bytes), site-issuer flag (1 byte) = 15 bytes total</p></li>
</ul>

<p>My first take was to pack data into binary string and than base64-encode it. The result would be 8-chars long base64-encoded string:</p>

<pre><code>def encode():
    base64( pack('Lv', timestamp, microseconds) )
</code></pre>

<p>Add site-issuer flag and chars at the beginning and the end:</p>

<pre><code>def getCookie():
    rand('a'...'Z') + encode() + issuerFlagChar() + rand('a'...'Z')
</code></pre>

<p>So, the result is 11 chars long and we meet <em>constraint 2</em> easily.</p>

<p>But the problem is: this algorithm is not secure for sure, I'm not sure if the resulting string for millions of websites users is unique.</p>

<p>I wonder if I could use DES or AES for this purpose but I'm not sure that the resulting string will always meet <em>constraint 2</em> (resulting string should be no longer than 32 ascii chars).</p>

<p>Is there symmetric key algorithms that ensure something like ""if you encrypt N bytes with M-bytes key you will have resulting data length of Math.Ceil(N*2+1/M) bytes""? So the resulting length would be predictable?</p>
","<p>Setting aside the fact that you should indeed consult a security consultant, the actual question you pose can easily be answered:</p>

<blockquote>
  <p>Is there symmetric key algorithms that ensure something like ""if you encrypt N bytes with M-bytes key you will have resulting data length of Math.Ceil(N*2+1/M) bytes""? So the resulting length would be predictable?</p>
</blockquote>

<p>Yes there are. And they are called <a href=""http://en.wikipedia.org/wiki/Block_cipher"" rel=""noreferrer"">Block Ciphers</a>. </p>

<p>By definition, every block cipher has the property that <em>the length of the ciphertext is equal to the length of the plain text</em>. In practice most block ciphers (inclusing DES and AES) cheat a bit because they require the plaintext to be <a href=""http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation"" rel=""noreferrer"">padded to the length of the block</a> before they start encrypting. </p>

<p>In other words, given a plaintext of <code>N</code> bytes and a block size of <code>B</code>, the ciphertext will have a length of <code>B*(Math.ceil(N/B))</code> bytes.</p>

<p>Note how I am talking about the <em>block size</em>, which is different from the <em>key size</em>. The key size is actually irrelevant in this case.</p>

<p>For example, <a href=""http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""noreferrer"">AES uses a block size of 128 bits</a>, or 16 bytes. This means that if your plain text is between 17 and 32 bytes long, AES will guarantee that your ciphertext is 32 bytes long. This is independent from the key size you choose, which can be one of 128, 192 or 256 bits (16, 24 or 32 bytes). </p>
","314","<encryption><aes><des><encryption-symmetric>","1","6","2","2015-03-17 05:03:07","29091631","6","0","","","","2015-03-04 04:30:56",""
"28846702","What type of encryption do I need?","<p>Ok, the original task is to track users among 2 ""friendly"" web-sites who are able to share users cookies (lets say, I have example.com and my friend has mysite.com and also he has a domain simple.example.com so he can set cookies on .example.com).</p>

<p>To track users activity we want to set unique cookie, this cookie should be unique and 32 bytes long (ascii). Quite simple from this point of view and can be implemented as such:</p>

<pre><code>md5(microtime)
</code></pre>

<p>and that's it, but now we have new <strong>constraints</strong>:</p>

<ol>
<li><p>we should be able to tell who exactly has set the cookie: exmaple.com engine or mysite.com engine</p></li>
<li><p>32 bytes longs is a must, still</p></li>
<li><p>we should be able to encrypt timestamp (when cookies was issued)</p></li>
<li><p>first and last character of the resulting cookie value should be different so we can do A/B testing basing on the cookie (so we could always say if last character of the cookie is ""> K"", show this users ""feature A"")</p></li>
</ol>

<p>Given that the resulting string should always be 32 or less characters long and data should be encrypted and decrypted (not by users, of course) and the string should be unique for the users, it makes the task quite complex.</p>

<p>My thought and questions:</p>

<ul>
<li><p>we should use symmetric key encryption (solves <em>constraints</em> 1 and 3), but it this case how do we ensure that resulting string is no longer than 32 chars (<em>constraint</em> 2)?</p></li>
<li><p>is there other solution on the problem given that amount of data we need to encrypt is: timestamp and microseconds (14 bytes), site-issuer flag (1 byte) = 15 bytes total</p></li>
</ul>

<p>My first take was to pack data into binary string and than base64-encode it. The result would be 8-chars long base64-encoded string:</p>

<pre><code>def encode():
    base64( pack('Lv', timestamp, microseconds) )
</code></pre>

<p>Add site-issuer flag and chars at the beginning and the end:</p>

<pre><code>def getCookie():
    rand('a'...'Z') + encode() + issuerFlagChar() + rand('a'...'Z')
</code></pre>

<p>So, the result is 11 chars long and we meet <em>constraint 2</em> easily.</p>

<p>But the problem is: this algorithm is not secure for sure, I'm not sure if the resulting string for millions of websites users is unique.</p>

<p>I wonder if I could use DES or AES for this purpose but I'm not sure that the resulting string will always meet <em>constraint 2</em> (resulting string should be no longer than 32 ascii chars).</p>

<p>Is there symmetric key algorithms that ensure something like ""if you encrypt N bytes with M-bytes key you will have resulting data length of Math.Ceil(N*2+1/M) bytes""? So the resulting length would be predictable?</p>
","<p>First of all, you need to know whether you want to <em>encrypt</em> or <em>sign</em> the data.</p>

<p>Encrypting will prevent users from <em>seeing</em> the data, but they are still able to modify it in some ways depending on the encryption type. For example, decrypting a modified ciphertext will simply give corrupted data, it won't fail. </p>

<p>Signing, on the other hand, will prevent users from <em>modifying</em> the data, that is, your code will be able to detect the data has been modified. A simple algorithm for this is <a href=""https://en.wikipedia.org/wiki/Hash-based_message_authentication_code"" rel=""nofollow"">HMAC</a>.</p>

<p>I'll assume you want both. My solution below does both.</p>

<p>Your cookie must be 32 bytes long, which is 256 bits. We are going to use 128 bits for encrypted data and 128 bits for the HMAC. </p>

<p>For the data, I will encode the timestamp as a 64bit integer (more than enough even if you want to store it to microsecond precision). The site that issued the cookie can be stored as 1 bit if you have two sites, but I'll store it in a 32bit integer because we have plenty of space. Same for a tag you can use for a/b testing.</p>

<p>All the data is exactly 128 bits, 16 bytes. This is the exact size of an AES block. So, we will encrypt it with AES!</p>

<p>The other 16 bytes will be a MAC of the ciphertext (<a href=""https://crypto.stackexchange.com/questions/202/should-we-mac-then-encrypt-or-encrypt-then-mac"">Encrypt then MAC</a>). I used HMAC-SHA256, which has 256bits of output. We only have room for 128bits, so I have truncated it. In theory this makes it less secure, but in practice 128bit is big enough to make a brute-force attempt impossible.</p>

<p>Decrypting the cookie is the reverse process: calculate the HMAC of the given ciphertext and check it matches the given MAC. If so, proceeed to decrypt the ciphertext and unpack the data.</p>

<p>Here's the code:</p>

<pre><code>from struct import pack, unpack
from Crypto.Cipher import AES
import hashlib
import hmac


AES_KEY = hashlib.sha256(b""secret key 1 asdfasdf"").digest()
HMAC_KEY = hashlib.sha256(b""secret key 2 asdfasdf"").digest()

# timestamp: 64bit unix timestamp
# site: 32bit integer, which site issued the cookie
# tag: 32bit integer, tag used for a/b testing.
def encrypt_cookie(timestamp, site, tag):

    # Pack the data
    data = pack('QII', timestamp, site, tag)

    # Encrypt it
    aes = AES.new(AES_KEY, AES.MODE_ECB, 'This is an IV456')
    ciphertext = aes.encrypt(data)

    # Do HMAC of the ciphertext
    sig = hmac.new(HMAC_KEY, ciphertext, hashlib.sha256).digest()
    sig = sig[:16]   # Truncate to only first 16 bytes.

    return ciphertext + sig

def decrypt_cookie(cookie):

    # Do HMAC of the ciphertext
    sig = hmac.new(HMAC_KEY, cookie[:16], hashlib.sha256).digest()
    sig = sig[:16]   # Truncate to only first 16 bytes.

    # Check the HMAC is ok
    if sig != cookie[16:]:
        raise Exception(""Cookie has been tampered with"")

    # Decrypt it
    aes = AES.new(AES_KEY, AES.MODE_ECB, 'This is an IV456')
    data = aes.decrypt(cookie[:16])

    # unPack the data
    timestamp, site, tag = unpack('QII', data)

    return timestamp, site, tag

cookie = encrypt_cookie(1, 2, 3)
print(len(cookie))  # prints: 32
print(decrypt_cookie(cookie))  # prints: 1, 2, 3

# Change a single byte in the cookie, the last one
cookie = cookie[:31] + b'0'
print(decrypt_cookie(cookie))  # raises the exception
</code></pre>

<p>I'm curious to know why the cookie must be 32bytes though. Seems a weird requirement, and if you didn't have it, you'd be able to use many libraries that are designed to solve exactly this problem, such as <a href=""https://docs.djangoproject.com/en/1.7/topics/signing/"" rel=""nofollow"">Django signing</a> if you're using Django.</p>
","314","<encryption><aes><des><encryption-symmetric>","1","3","2","2015-03-17 05:03:07","29091631","6","0","","","","2015-03-04 04:30:56",""
"4647430","Securing individual DB fields","<p>My application needs to store bank details and credit card numbers in a database.  We support several DB variants and we try to avoid wherever possible any DB specific features that may not port easily to another.</p>

<p>Therefore I'm looking for a simple yet reasonably secure way of encrypting certain fields such as the card number and bank account number.  The application needs those in order to submit requests to external payment systems but a casual select * of the relevant DB tables should return ""junk"" so someone can't run off with several thousand credit card numbers.</p>

<p>Only our application need know the encryption system, this information does not need to be shared transmitted in (this) encrypted form to any other system.</p>

<p>Does anyone have any suggestions for a simple yet secure way of doing this?</p>

<p>I found the following <a href=""https://stackoverflow.com/questions/992019/java-256bit-aes-encryption"">question/answer</a> which looked useful and comprehensive but I was struggling to figure out if I needed all those fields.</p>

<p>I also found <a href=""http://www.di-mgt.com.au/cryptoCreditcard.html"" rel=""nofollow noreferrer"">this article</a> which seemed to be implying the IV should be generated randomly each time a record is inserted/updated and stored alongside the encrypted value.  If secure this seems more straightforward then the approach suggested in the SO question but I'm having trouble reconciling how to this with the Java APIs.</p>

<p>Any suggestions appreciated.  (I'm using Java 6)</p>
","<p><a href=""https://www.pcisecuritystandards.org/"" rel=""nofollow"">PCI Security Standards</a> could be referenced. There are many regulations about sensitive card data in card industry.</p>
","311","<java><database><encryption><encryption-symmetric>","1","1","2","2011-01-10 14:46:40","","0","","-1","","2017-05-23 10:33:08","2011-01-10 13:44:06",""
"4647430","Securing individual DB fields","<p>My application needs to store bank details and credit card numbers in a database.  We support several DB variants and we try to avoid wherever possible any DB specific features that may not port easily to another.</p>

<p>Therefore I'm looking for a simple yet reasonably secure way of encrypting certain fields such as the card number and bank account number.  The application needs those in order to submit requests to external payment systems but a casual select * of the relevant DB tables should return ""junk"" so someone can't run off with several thousand credit card numbers.</p>

<p>Only our application need know the encryption system, this information does not need to be shared transmitted in (this) encrypted form to any other system.</p>

<p>Does anyone have any suggestions for a simple yet secure way of doing this?</p>

<p>I found the following <a href=""https://stackoverflow.com/questions/992019/java-256bit-aes-encryption"">question/answer</a> which looked useful and comprehensive but I was struggling to figure out if I needed all those fields.</p>

<p>I also found <a href=""http://www.di-mgt.com.au/cryptoCreditcard.html"" rel=""nofollow noreferrer"">this article</a> which seemed to be implying the IV should be generated randomly each time a record is inserted/updated and stored alongside the encrypted value.  If secure this seems more straightforward then the approach suggested in the SO question but I'm having trouble reconciling how to this with the Java APIs.</p>

<p>Any suggestions appreciated.  (I'm using Java 6)</p>
","<p>Java comes std with some encrypt/decrypt libs, you can investigate them starting at <a href=""http://download.oracle.com/javase/6/docs/technotes/guides/security/index.html"" rel=""nofollow noreferrer"">http://download.oracle.com/javase/6/docs/technotes/guides/security/index.html</a>, in particular look at the JCE (now extension of JCA) information.</p>

<p>This SO question is also very similar and contains lots of useful advice: <a href=""https://stackoverflow.com/questions/4319496/how-to-encrypt-and-decrypt-data-in-java"">https://stackoverflow.com/questions/4319496/how-to-encrypt-and-decrypt-data-in-java</a></p>
","311","<java><database><encryption><encryption-symmetric>","1","1","2","2011-01-10 14:46:40","","0","","-1","","2017-05-23 10:33:08","2011-01-10 13:44:06",""
"5372340","What method of encryption is suitable for encrypting individual words, and also an entire document?","<p>I need to save several documents to the cloud and need to save the documents, document metadata, and words/phrases for searching.</p>

<p>My plan is to use a symmetric cypher for encrypting the whole document, but I'm unsure of the right way to hash each word.  I would like something secure, but I don't want to increase the count of characters in each word unnecessarily.</p>

<p>What implementation is most suitable for doing a symmetric encryption against a document, and what is the best way to hash a word or phrase without making it many times larger than it needs to be? </p>
","<p>Your requirements are mutually exclusive.  That kind of metadata will leak a huge amount of information about the document content, to the point it can't be called secure.</p>

<p>Furthermore, encrypting individual words is futile.  The difficulty of breaking encryption is usually said to be as difficult as breaking the key, but this assumes the information content in the plaintext is greater than that in the key.  For single words, that certainly isn't true.</p>
","309","<c#><encryption><hash><cryptoapi><encryption-symmetric>","1","0","2","2011-03-21 06:07:10","5374360","5","","","","","2011-03-20 23:27:11",""
"5372340","What method of encryption is suitable for encrypting individual words, and also an entire document?","<p>I need to save several documents to the cloud and need to save the documents, document metadata, and words/phrases for searching.</p>

<p>My plan is to use a symmetric cypher for encrypting the whole document, but I'm unsure of the right way to hash each word.  I would like something secure, but I don't want to increase the count of characters in each word unnecessarily.</p>

<p>What implementation is most suitable for doing a symmetric encryption against a document, and what is the best way to hash a word or phrase without making it many times larger than it needs to be? </p>
","<p>First, I suggest different tags.  It sounds like you're really interested in offloading searching to a server in a cryptographically secure way (such that the server doesn't have access to the plaintext and such that the client need not transfer the entire index).</p>

<p>Issues:</p>

<ul>
<li>An attacker being able to figure out which words are in the index (and which are not) could be an issue for you.  You should state whether it is as a part of your requirements.</li>
<li>An attacker being able to figure out which items in the index occur more frequently could be an issue for you.  You should state whether it is as a part of your requirements.</li>
<li>An attacker being able to associate words with a document could be an issue for you.  You should state whether it is as a part of your requirements.</li>
<li>An attacker may be able to subvert the server entirely and observe queries / retrievals.  You should state security needs in this circumstance as well.</li>
<li>Probably others I haven't thought of.</li>
</ul>

<p>I'm assuming that you're designing your own, but there is probably some prior art, research, etc. that would be smarter than I am below:</p>

<p>For the first, I suggest that you should hash the words, combining the plaintext with a secret (not shared with the index server) before hashing, and truncating the hash to the point where it is likely to be non-unique in the index.  This costs you hash efficiency, but helps prevent an attacker from using the hash as a plaintext equivalent or experimentally determining the secret</p>

<p>For the second and third, you should encrypt any indexed data (such as counts or document+position) and decrypt it on the client.  This may cost you latency.</p>

<p>For the fourth, you'd want to consider concealing real requests inside groups of unrelated requests, things like that, but you'd want a lot of math to make sure you weren't still vulnerable to statistical analysis.</p>

<p>For the fifth, do some web research.  I'm confident there will be stuff out there, and this is a pretty specific (and less common) need, so you'll want someone who put more thought into it than I just have.</p>
","309","<c#><encryption><hash><cryptoapi><encryption-symmetric>","1","1","2","2011-03-21 06:07:10","5374360","5","","","","","2011-03-20 23:27:11",""
"5995998","Encryption Project: Need advice on how to eliminate method overhead","<p>I am looking for advice. I have developed my own encryption algorithms because I enjoy it and I can. Now, I am looking to try a new idea.</p>

<p>My idea involves consolidating a number my algorithms into a larger one. For instance, you call <code>X.Encrypt()</code> then it uses <code>A.Encrypt()</code>, <code>B.Encrypt()</code>, <code>C.Encrypt()</code> etc. When you perform this kind of operation one byte per <code>A</code>, <code>B</code>, <code>C</code> method call the method overhead becomes killer. Going from a few ms to several minutes. So, any questions?</p>

<p>I am merely looking for code design tips and tricks to maybe lessen the issue.</p>

<p>Thanks ahead of time.</p>

<p><em>Update</em></p>

<p>Code example of the issue:</p>

<pre><code>//fast
moduleA.Transform(true, buffer, 0, buffer.Length);
moduleB.Transform(true, buffer, 0, buffer.Length);

//slow
for (int L = 0; L &lt; buffer.Length; )
{
    moduleA.Transform(true, buffer, L++, 1);
    moduleB.Transform(true, buffer, L++, 1);
}
</code></pre>

<p>I know this problem is inherent to how it is being called. My goal is to change how I am doing it. I know inside the Transform methods there can be improvement. The fast operates in about 24s while the slow takes many minutes. Clearly, overhead from the methods, no profiler needed :)</p>

<p>I do have an idea I am going to try. I am thinking about using ""run-modes"" where I instead of looping outside of the Transform methods I change how it runs inside each method to fit my needs. So, I could do an every-other-byte encryption performed inside the Transform methods and as a batch. I believe this would eliminate the overhead I am getting.</p>

<p><em>FINAL UPDATE (Solved my own issue, still open to ideas!)</em></p>

<p>Incrementing the loop rate inside the Transform method has worked!</p>

<p>What I've done is the following and it seems to work well:</p>

<pre><code>ITransformationModule moduleA = TransformationFactory.GetModuleInstance(""Subspace28"");
ITransformationModule moduleB = TransformationFactory.GetModuleInstance(""Ataxia"");
moduleA.IncrementInterval = 2;
moduleB.IncrementInterval = 2;
moduleA.Transform(true, buffer, 0, buffer.Length);
moduleB.Transform(true, buffer, 1, buffer.Length);
</code></pre>

<p>This runs at about 12s for 100MB on my work VM. Thank you all who contributed! It was a combination of response that helped lead me to try it this way. I appreciate you all greatly! </p>

<p>This is just proof of concept at the moment. It is building towards greater things! :)</p>
","<p>You could try to implement your algorithm such that your code makes <code>chunky calls</code> then <code>chatty calls</code>. That is instead of calling functions hundred of time, you could have less function calls such that each function has more work to do. This is one advice, you might have to make your algorithm efficient as well such that its not processor intensive. Hope this help. </p>
","307","<c#><performance><optimization><encryption-symmetric><overhead-minimization>","1","0","5","2011-05-13 20:16:27","","7","","309550","","2011-05-13 20:16:27","2011-05-13 18:07:04",""
"5995998","Encryption Project: Need advice on how to eliminate method overhead","<p>I am looking for advice. I have developed my own encryption algorithms because I enjoy it and I can. Now, I am looking to try a new idea.</p>

<p>My idea involves consolidating a number my algorithms into a larger one. For instance, you call <code>X.Encrypt()</code> then it uses <code>A.Encrypt()</code>, <code>B.Encrypt()</code>, <code>C.Encrypt()</code> etc. When you perform this kind of operation one byte per <code>A</code>, <code>B</code>, <code>C</code> method call the method overhead becomes killer. Going from a few ms to several minutes. So, any questions?</p>

<p>I am merely looking for code design tips and tricks to maybe lessen the issue.</p>

<p>Thanks ahead of time.</p>

<p><em>Update</em></p>

<p>Code example of the issue:</p>

<pre><code>//fast
moduleA.Transform(true, buffer, 0, buffer.Length);
moduleB.Transform(true, buffer, 0, buffer.Length);

//slow
for (int L = 0; L &lt; buffer.Length; )
{
    moduleA.Transform(true, buffer, L++, 1);
    moduleB.Transform(true, buffer, L++, 1);
}
</code></pre>

<p>I know this problem is inherent to how it is being called. My goal is to change how I am doing it. I know inside the Transform methods there can be improvement. The fast operates in about 24s while the slow takes many minutes. Clearly, overhead from the methods, no profiler needed :)</p>

<p>I do have an idea I am going to try. I am thinking about using ""run-modes"" where I instead of looping outside of the Transform methods I change how it runs inside each method to fit my needs. So, I could do an every-other-byte encryption performed inside the Transform methods and as a batch. I believe this would eliminate the overhead I am getting.</p>

<p><em>FINAL UPDATE (Solved my own issue, still open to ideas!)</em></p>

<p>Incrementing the loop rate inside the Transform method has worked!</p>

<p>What I've done is the following and it seems to work well:</p>

<pre><code>ITransformationModule moduleA = TransformationFactory.GetModuleInstance(""Subspace28"");
ITransformationModule moduleB = TransformationFactory.GetModuleInstance(""Ataxia"");
moduleA.IncrementInterval = 2;
moduleB.IncrementInterval = 2;
moduleA.Transform(true, buffer, 0, buffer.Length);
moduleB.Transform(true, buffer, 1, buffer.Length);
</code></pre>

<p>This runs at about 12s for 100MB on my work VM. Thank you all who contributed! It was a combination of response that helped lead me to try it this way. I appreciate you all greatly! </p>

<p>This is just proof of concept at the moment. It is building towards greater things! :)</p>
","<p>You want to have class X call methods from class A, B, C, D, E, F, G, etc...without the method call overhead.  At first, that seems absurd.  You might be able to find a way to do it using <a href=""http://msdn.microsoft.com/en-us/library/system.reflection.emit.dynamicmethod.aspx"" rel=""nofollow"">System.Reflection.Emit</a>.  That is, dynamically create a method that does A+B+C+D+E+F+G, then call that.</p>
","307","<c#><performance><optimization><encryption-symmetric><overhead-minimization>","1","0","5","2011-05-13 20:16:27","","7","","309550","","2011-05-13 20:16:27","2011-05-13 18:07:04",""
"5995998","Encryption Project: Need advice on how to eliminate method overhead","<p>I am looking for advice. I have developed my own encryption algorithms because I enjoy it and I can. Now, I am looking to try a new idea.</p>

<p>My idea involves consolidating a number my algorithms into a larger one. For instance, you call <code>X.Encrypt()</code> then it uses <code>A.Encrypt()</code>, <code>B.Encrypt()</code>, <code>C.Encrypt()</code> etc. When you perform this kind of operation one byte per <code>A</code>, <code>B</code>, <code>C</code> method call the method overhead becomes killer. Going from a few ms to several minutes. So, any questions?</p>

<p>I am merely looking for code design tips and tricks to maybe lessen the issue.</p>

<p>Thanks ahead of time.</p>

<p><em>Update</em></p>

<p>Code example of the issue:</p>

<pre><code>//fast
moduleA.Transform(true, buffer, 0, buffer.Length);
moduleB.Transform(true, buffer, 0, buffer.Length);

//slow
for (int L = 0; L &lt; buffer.Length; )
{
    moduleA.Transform(true, buffer, L++, 1);
    moduleB.Transform(true, buffer, L++, 1);
}
</code></pre>

<p>I know this problem is inherent to how it is being called. My goal is to change how I am doing it. I know inside the Transform methods there can be improvement. The fast operates in about 24s while the slow takes many minutes. Clearly, overhead from the methods, no profiler needed :)</p>

<p>I do have an idea I am going to try. I am thinking about using ""run-modes"" where I instead of looping outside of the Transform methods I change how it runs inside each method to fit my needs. So, I could do an every-other-byte encryption performed inside the Transform methods and as a batch. I believe this would eliminate the overhead I am getting.</p>

<p><em>FINAL UPDATE (Solved my own issue, still open to ideas!)</em></p>

<p>Incrementing the loop rate inside the Transform method has worked!</p>

<p>What I've done is the following and it seems to work well:</p>

<pre><code>ITransformationModule moduleA = TransformationFactory.GetModuleInstance(""Subspace28"");
ITransformationModule moduleB = TransformationFactory.GetModuleInstance(""Ataxia"");
moduleA.IncrementInterval = 2;
moduleB.IncrementInterval = 2;
moduleA.Transform(true, buffer, 0, buffer.Length);
moduleB.Transform(true, buffer, 1, buffer.Length);
</code></pre>

<p>This runs at about 12s for 100MB on my work VM. Thank you all who contributed! It was a combination of response that helped lead me to try it this way. I appreciate you all greatly! </p>

<p>This is just proof of concept at the moment. It is building towards greater things! :)</p>
","<p>Are you encrypting the data by calling methods on a byte-by-byte basis? Why not call the method on a chunk of data and loop within that method? Also, while it is definitely fun to try out your own encryption methods, you should pretty much always use a known, tested, and secure algorithm if security is at all a concern.</p>
","307","<c#><performance><optimization><encryption-symmetric><overhead-minimization>","1","2","5","2011-05-13 20:16:27","","7","","309550","","2011-05-13 20:16:27","2011-05-13 18:07:04",""
"5995998","Encryption Project: Need advice on how to eliminate method overhead","<p>I am looking for advice. I have developed my own encryption algorithms because I enjoy it and I can. Now, I am looking to try a new idea.</p>

<p>My idea involves consolidating a number my algorithms into a larger one. For instance, you call <code>X.Encrypt()</code> then it uses <code>A.Encrypt()</code>, <code>B.Encrypt()</code>, <code>C.Encrypt()</code> etc. When you perform this kind of operation one byte per <code>A</code>, <code>B</code>, <code>C</code> method call the method overhead becomes killer. Going from a few ms to several minutes. So, any questions?</p>

<p>I am merely looking for code design tips and tricks to maybe lessen the issue.</p>

<p>Thanks ahead of time.</p>

<p><em>Update</em></p>

<p>Code example of the issue:</p>

<pre><code>//fast
moduleA.Transform(true, buffer, 0, buffer.Length);
moduleB.Transform(true, buffer, 0, buffer.Length);

//slow
for (int L = 0; L &lt; buffer.Length; )
{
    moduleA.Transform(true, buffer, L++, 1);
    moduleB.Transform(true, buffer, L++, 1);
}
</code></pre>

<p>I know this problem is inherent to how it is being called. My goal is to change how I am doing it. I know inside the Transform methods there can be improvement. The fast operates in about 24s while the slow takes many minutes. Clearly, overhead from the methods, no profiler needed :)</p>

<p>I do have an idea I am going to try. I am thinking about using ""run-modes"" where I instead of looping outside of the Transform methods I change how it runs inside each method to fit my needs. So, I could do an every-other-byte encryption performed inside the Transform methods and as a batch. I believe this would eliminate the overhead I am getting.</p>

<p><em>FINAL UPDATE (Solved my own issue, still open to ideas!)</em></p>

<p>Incrementing the loop rate inside the Transform method has worked!</p>

<p>What I've done is the following and it seems to work well:</p>

<pre><code>ITransformationModule moduleA = TransformationFactory.GetModuleInstance(""Subspace28"");
ITransformationModule moduleB = TransformationFactory.GetModuleInstance(""Ataxia"");
moduleA.IncrementInterval = 2;
moduleB.IncrementInterval = 2;
moduleA.Transform(true, buffer, 0, buffer.Length);
moduleB.Transform(true, buffer, 1, buffer.Length);
</code></pre>

<p>This runs at about 12s for 100MB on my work VM. Thank you all who contributed! It was a combination of response that helped lead me to try it this way. I appreciate you all greatly! </p>

<p>This is just proof of concept at the moment. It is building towards greater things! :)</p>
","<p>Firstly profile your code so you know where you should operate first, then ask again :)</p>
","307","<c#><performance><optimization><encryption-symmetric><overhead-minimization>","1","0","5","2011-05-13 20:16:27","","7","","309550","","2011-05-13 20:16:27","2011-05-13 18:07:04",""
"5995998","Encryption Project: Need advice on how to eliminate method overhead","<p>I am looking for advice. I have developed my own encryption algorithms because I enjoy it and I can. Now, I am looking to try a new idea.</p>

<p>My idea involves consolidating a number my algorithms into a larger one. For instance, you call <code>X.Encrypt()</code> then it uses <code>A.Encrypt()</code>, <code>B.Encrypt()</code>, <code>C.Encrypt()</code> etc. When you perform this kind of operation one byte per <code>A</code>, <code>B</code>, <code>C</code> method call the method overhead becomes killer. Going from a few ms to several minutes. So, any questions?</p>

<p>I am merely looking for code design tips and tricks to maybe lessen the issue.</p>

<p>Thanks ahead of time.</p>

<p><em>Update</em></p>

<p>Code example of the issue:</p>

<pre><code>//fast
moduleA.Transform(true, buffer, 0, buffer.Length);
moduleB.Transform(true, buffer, 0, buffer.Length);

//slow
for (int L = 0; L &lt; buffer.Length; )
{
    moduleA.Transform(true, buffer, L++, 1);
    moduleB.Transform(true, buffer, L++, 1);
}
</code></pre>

<p>I know this problem is inherent to how it is being called. My goal is to change how I am doing it. I know inside the Transform methods there can be improvement. The fast operates in about 24s while the slow takes many minutes. Clearly, overhead from the methods, no profiler needed :)</p>

<p>I do have an idea I am going to try. I am thinking about using ""run-modes"" where I instead of looping outside of the Transform methods I change how it runs inside each method to fit my needs. So, I could do an every-other-byte encryption performed inside the Transform methods and as a batch. I believe this would eliminate the overhead I am getting.</p>

<p><em>FINAL UPDATE (Solved my own issue, still open to ideas!)</em></p>

<p>Incrementing the loop rate inside the Transform method has worked!</p>

<p>What I've done is the following and it seems to work well:</p>

<pre><code>ITransformationModule moduleA = TransformationFactory.GetModuleInstance(""Subspace28"");
ITransformationModule moduleB = TransformationFactory.GetModuleInstance(""Ataxia"");
moduleA.IncrementInterval = 2;
moduleB.IncrementInterval = 2;
moduleA.Transform(true, buffer, 0, buffer.Length);
moduleB.Transform(true, buffer, 1, buffer.Length);
</code></pre>

<p>This runs at about 12s for 100MB on my work VM. Thank you all who contributed! It was a combination of response that helped lead me to try it this way. I appreciate you all greatly! </p>

<p>This is just proof of concept at the moment. It is building towards greater things! :)</p>
","<p>Would something like this work? Of course you would have to modify it to fit your encryption arguments and return types....</p>

<pre><code>static class Encryptor
{
    delegate void Transform(bool b, byte[] buffer, int index, int length);
    static Transform[] transformers = new Transform[3];

    static Encryptor()
    {
        transformers[0] = (b, buffer, index, length) =&gt; { /*Method A*/ };
        transformers[1] = (b, buffer, index, length) =&gt; { /*Method B*/ };
        transformers[2] = (b, buffer, index, length) =&gt; { /*Method C*/ };
    }

    public static void Encrypt(bool b, byte[] buffer)
    {
        int length = buffer.Length;
        int nTransforms = transformers.Length;
        for (int i = 0; i &lt; length;)
        {
            for (int j = 0; j &lt; nTransforms; j++)
            {
                transformers[i % nTransforms](b, buffer, i++, 1);
            }
        }
    }
}
</code></pre>

<p><em>Edit</em> So this would do the second example</p>

<pre><code>Encryptor.Encrypt(yourBoolean, yourBuffer);
</code></pre>

<p>I don't know the specifics of your implementation, but this shouldn't have overhead issues.</p>
","307","<c#><performance><optimization><encryption-symmetric><overhead-minimization>","1","0","5","2011-05-13 20:16:27","","7","","309550","","2011-05-13 20:16:27","2011-05-13 18:07:04",""
"15846295","Trying to send encrypted text via URI - /uDDBA causing ""URIError: URI Malformed""","<p>Simple Code:</p>

<pre><code>encodeURIComponent(""\uDDBA"")
</code></pre>

<p>Result:</p>

<pre><code>URIError: URI malformed
</code></pre>

<p>I am trying to do a simple encryption that will take some user input text, and a password, and it will then encrypt that text and save it to the server.</p>

<p>Basically I am trying to encode a letter ""t"" - and the algorithm has determined that the  should be 56762 or DDBA in hex.</p>

<p>But it looks like certain hex values will result in errors if I try to encode that character using encodeURIComponent.</p>

<p>How can I solve this?</p>

<p>I basically need to know the available range of characters that can properly pass through encodeURIComponent in javascript.</p>

<p>Currently I am doing something like this:</p>

<pre><code>var xor = 0xDDCE;

var plainText = ""t"".charCodeAt(0);
var encoded = plainText ^ xor;
var encodedChar = String.fromCharCode(encoded);
var uri = ""/someuri?character="" + encodeURIComponent(encodedChar);

// This is how i would get the plain text back
var decoded = encodedChar.charCodeAt(0) ^ xor;
var decodedChar = String.fromCharCode(decoded);
</code></pre>

<p>This is a very simplified version, where the xor value is static. In the real case the xor value will be calculated based on a bunch of variables.</p>

<p>Assume ""/someuri"" is not built by me, and wasn't really originally built to receive encrypted data, I am merely trying to use this URI.</p>

<p>Also, my encryption algorithm can be changed. The <code>xor</code> value will be generated using a fairly simple algorithm using a user entered password, and the position of the character.</p>

<p>I was thinking of one way to make this work would be to reduce the total number of possible output characters and perform a mapping of some kind... but I can't really picture the code for that.</p>

<p>Edit:</p>

<p>Comments on the security of my choice of encryption is appreciated; however, the actual data security aspect is not as important. I just want to prevent ""average"" people from being able to read the output encrypted text (assume there can be lots of it)</p>
","<p>Sorry,</p>

<p>I am going to attempt to answer my own question</p>

<p>Run this code:</p>

<pre><code> (function() {
    var last = null;
    for ( var idx = 0; idx &lt; 0xffff; idx++) {
        try {
            encodeURIComponent(String.fromCharCode(idx));
        } catch (e) {
            if (idx != last + 1) {
                console.log(idx);
            }
            last = idx;
        }
    }
    console.log(last);
 })();
</code></pre>

<p>It will result in</p>

<pre><code>55296
57343
</code></pre>

<p>Which means any values between \uD800 and \uDFFF are not allowed.</p>

<p>When I was writing this, it occurred to me that I should just write a for loop and test everything.</p>
","306","<javascript><unicode><uri><encryption-symmetric>","0","0","2","2013-04-06 09:00:02","","0","","","","","2013-04-06 02:18:27",""
"15846295","Trying to send encrypted text via URI - /uDDBA causing ""URIError: URI Malformed""","<p>Simple Code:</p>

<pre><code>encodeURIComponent(""\uDDBA"")
</code></pre>

<p>Result:</p>

<pre><code>URIError: URI malformed
</code></pre>

<p>I am trying to do a simple encryption that will take some user input text, and a password, and it will then encrypt that text and save it to the server.</p>

<p>Basically I am trying to encode a letter ""t"" - and the algorithm has determined that the  should be 56762 or DDBA in hex.</p>

<p>But it looks like certain hex values will result in errors if I try to encode that character using encodeURIComponent.</p>

<p>How can I solve this?</p>

<p>I basically need to know the available range of characters that can properly pass through encodeURIComponent in javascript.</p>

<p>Currently I am doing something like this:</p>

<pre><code>var xor = 0xDDCE;

var plainText = ""t"".charCodeAt(0);
var encoded = plainText ^ xor;
var encodedChar = String.fromCharCode(encoded);
var uri = ""/someuri?character="" + encodeURIComponent(encodedChar);

// This is how i would get the plain text back
var decoded = encodedChar.charCodeAt(0) ^ xor;
var decodedChar = String.fromCharCode(decoded);
</code></pre>

<p>This is a very simplified version, where the xor value is static. In the real case the xor value will be calculated based on a bunch of variables.</p>

<p>Assume ""/someuri"" is not built by me, and wasn't really originally built to receive encrypted data, I am merely trying to use this URI.</p>

<p>Also, my encryption algorithm can be changed. The <code>xor</code> value will be generated using a fairly simple algorithm using a user entered password, and the position of the character.</p>

<p>I was thinking of one way to make this work would be to reduce the total number of possible output characters and perform a mapping of some kind... but I can't really picture the code for that.</p>

<p>Edit:</p>

<p>Comments on the security of my choice of encryption is appreciated; however, the actual data security aspect is not as important. I just want to prevent ""average"" people from being able to read the output encrypted text (assume there can be lots of it)</p>
","<p>If you want the average people not to see the text, just use a POST request or Base64.</p>

<p>As for actual security this is completely useless. An attacker doesn't need to know what the plaintext is, all he needs to know what
the user sent to your site and send the same data back themself. The only way to prevent this is to use SSL everywhere on your site. 
If they wanted, they could use your algorithm found on the page's source code to decrypt it.</p>

<hr>

<p>It is kinda terrible that Javascript strings don't validate their state right away as it could be done basically for free. Javascript
strings are associated with <a href=""http://en.wikipedia.org/wiki/UTF-16"" rel=""nofollow"">UTF-16* encoding</a> where not all sequences are valid. It is not valid to have a unit value between 0xD800 - 0xDBFF
when it is not immediatelly followed be 0xDC00 - 0xDFFF. And it is not valid to have 0xDC00 - 0xDFFF if the previous unit value is not 
0xD800 - 0xDBFF.</p>

<p>Many things can lead strings to violate this and because strings don't validate themselves you will only see an error much later.</p>

<p>You could always go 8 bits at a time and it'll work.</p>

<pre><code>var xor = 0xDDCE;

var input = ""t"",
    output = """",
    i = 0,
    ch;

while( isFinite( ch = input.charCodeAt(i++) ) {
    var xored = ch ^ xor;
    output += String.fromCharCode(
        (xored &amp; 0xFF00) &gt;&gt; 8,
        xored &amp; 0xFF
    );
}

//output is ""Ýº"", or 0x00DD 0x00BA, each char is always 0x00XX
</code></pre>

<hr>

<p>*The specification allows using UCS-2 as well but I have never seen this. If you want to be sure:</p>

<pre><code>function areStringsUTF16() {
    try {
        var str = decodeURIComponent(""%F0%A0%80%80"");
        return str.charCodeAt(0) === 0xd840 &amp;&amp;
               str.charCodeAt(1) === 0xdc00;
    }
    catch(e) {
        return false;
    }
}
</code></pre>
","306","<javascript><unicode><uri><encryption-symmetric>","0","2","2","2013-04-06 09:00:02","","0","","","","","2013-04-06 02:18:27",""
"9852395","Safe to store AES cipher parameters (blocksize/blockmode/keysize etc) in file header?","<p>Is it 'safe' to store cipher parameters in the (unencrypted) header of an encrypted file? Is there anything (other than the key of course!) that shouldn't be stored/transmitted in the clear?</p>
","<p>You are using a symmetric encryption, where storing the blocksize, blockmode and keysize would be safe, since you don't (mustn't) make keys available as you stated.</p>

<p>But all such params are in general useful to attackers. If the file cannot easily be associated with a cipher and used params (or the software respectively), an attacker would have considerably more work to do and that's what encryption basically is for. A cipher is secure, while (and because) everyone can see how it works. Additionally trying to hide some information can also add some security.</p>

<ul>
<li><p>AES has a fixed block size of 128bits, which itself is not a critical information, knowing of AES itself already. So this one is not needed inside the file header.</p></li>
<li><p>The keysize is given by the key itself, so it can be left out too.</p></li>
<li><p>The blockmode is the remaining parameter. Just never use ECB. Permanently use a single blockmode like OCB and you don't need to store it in the file aswell.</p></li>
</ul>

<p>Predefining all params at both sides is a solution, if you don't intend to change them per file.
Error checking can be done using checksums, which are also critical information, so you may encrypt them together with the data or provide them together with the key.</p>

<p>Perhaps, following approaches can help if you have to transmit the params anyway:</p>

<ul>
<li><p>Transmit params in the key file, if you're up to define the format yourself and the keys were distributed on a per file basis.</p></li>
<li><p>You could also define different settings by mapping them to some randomly defined enumerators, which don't provide valuable information without knowing the software.</p></li>
</ul>
","303","<aes><encryption><encryption-symmetric>","1","1","1","2013-02-09 15:28:42","9852827","1","","445517","","2013-02-09 15:28:42","2012-03-24 14:09:14",""
"2696139","BAD_UID error while exporting key in CryptoAPI","<p>I am writing a test application for Microsoft CryptoAPI. I want to export the secret key of one party using the public key of the second party, and then import that secret key as the second party's secret key (this sets up a shared secret key for communication). Here is my code:</p>

<pre><code>if(!CryptExportKey(encryptT-&gt;hSymKey, decryptT-&gt;hPubKey, SIMPLEBLOB, 0, keyExBuf, &amp;bufLen)) {
    FormattedDebugPrint(NULL, GetLastError(), ""could not export secret key"", TRUE);
    return -1;
}
if(!CryptImportKey(decryptT-&gt;hCryptProv, keyExBuf, bufLen, decryptT-&gt;hPubKey, 0, &amp;(decryptT-&gt;hSymKey))) {
    FormattedDebugPrint(NULL, GetLastError(), ""could not import secret key"", TRUE);
    return -1;
}
</code></pre>

<p>And this gives the error:</p>

<pre><code>80090001: Bad UID.
</code></pre>

<p>The public keypair is being generated for both encryptT and decryptT (sender, receiver) by calling:</p>

<pre><code>CryptGenKey(encryptT-&gt;hCryptProv, CALG_RSA_KEYX, CRYPT_EXPORTABLE, &amp;(encryptT-&gt;hPubKey))
</code></pre>

<p>Any idea what could be causing the error?</p>

<p>Thanks,</p>
","<p>Never mind, I figured it out. Basically, you can't just use another public key directly even if it's initialized the same way -- I needed to first export that public key, and then import it using the handle to the cryptographic provider of the other party.</p>
","302","<encryption><cryptoapi><encryption-symmetric><public-key-encryption><secret-key>","0","0","1","2010-04-23 18:57:31","2701229","2","","","","","2010-04-23 04:06:57",""
"34858662","How to encrypt in SQL Server without involving varbinary","<p>I know there are functions like <code>ENCRYPTBYPASSPHRASE</code> for symmetric encryption but I look for a way in SQL Server to encrypt a field so that I can pass the encrypted string as a part of a URL to the outside world, in a varchar or nvarchar. Actually I don't want the encryption output to be stored in a varbinary field but rather being sit in a nvarchar.</p>

<p>It is OK if the algorithm not being strong, I just need it to put the output in a URL.</p>

<p>Is there any way to achive this?</p>
","","302","<sql-server><tsql><encryption><encryption-symmetric><varbinary>","0","","0","2016-01-18 15:44:14","","9","","","","","2016-01-18 15:44:14",""
"49553748","Java AES / GCM decryption fails","<p>I am trying to use GCM Mode for encryption and decryption. Unfortunately decryption doesn't work.</p>

<p>Do I have to use the same initialization vector for both encryption and decryption classes? I already tried that, unsuccessfully...</p>

<p>Could the random argument in <code>keyGen.init(128, random)</code> be the problem?</p>

<p>Encryption code:</p>

<pre><code>public class AES128SymmetricEncryption {

    private static final int GCM_NONCE_LENGTH = 12; // in bytes
    private static final int GCM_TAG_LENGTH = 16; // in bytes

    public static void encode (FileInputStream ciphertextSource, FileOutputStream plaintextDestination)
    {
        try {
            int numRead;
            SecureRandom random = SecureRandom.getInstanceStrong();
            KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
            keyGen.init(128, random);
            SecretKey key = keyGen.generateKey();
            Cipher cipher = Cipher.getInstance(""AES/GCM/NoPadding"", ""BC"");
            GCMParameterSpec spec = new GCMParameterSpec(GCM_TAG_LENGTH * 8, getIV(random));
            cipher.init(Cipher.ENCRYPT_MODE, key, spec);
            byte[] buf = new byte[2048];

            while ((numRead = ciphertextSource.read(buf)) &gt; 0) {
                byte[] decryptedBlock = cipher.update(buf, 0, numRead);
                plaintextDestination.write(decryptedBlock);
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (plaintextDestination != null) {
                    ciphertextSource.close();
                }
                if (plaintextDestination != null) {
                    plaintextDestination.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static byte[] getIV(SecureRandom random) {

        final byte[] nonce = new byte[GCM_NONCE_LENGTH];
        random.nextBytes(nonce);
        System.out.println(nonce);
        return nonce;
    }

    public static void main(String[] args) throws GeneralSecurityException, IOException
    {
        Security.addProvider(new BouncyCastleProvider());

            FileInputStream fis = new FileInputStream(""C:/Users/roehrlef/Desktop/Test Data/Source Data/100KB.jpg"");
            FileOutputStream fos = new FileOutputStream(""C:/Users/roehrlef/Desktop/Test Data/Encrypted Data/encrypted.jpg"");
            encode(fis, fos);
    }
}
</code></pre>

<p>Decryption code:</p>

<pre><code>public class AES128SymmetricDecryption {

    private static final int GCM_NONCE_LENGTH = 12; // in bytes
    private static final int GCM_TAG_LENGTH = 16; // in bytes

    public static void decode (FileInputStream ciphertextSource, FileOutputStream plaintextDestination)
    {
        try {
            int numRead = 0;
            SecureRandom random = SecureRandom.getInstanceStrong();
            KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
            keyGen.init(128, random);
            SecretKey key = keyGen.generateKey();
            Cipher cipher = Cipher.getInstance(""AES/GCM/NoPadding"", ""BC"");
            GCMParameterSpec spec = new GCMParameterSpec(GCM_TAG_LENGTH * 8, getIV(random));
            cipher.init(Cipher.DECRYPT_MODE, key, spec);
            CipherInputStream cis = new CipherInputStream(ciphertextSource, cipher);
            byte[] buf = new byte[2048];

            while ((numRead = cis.read(buf)) &gt; 0) {
                byte[] decryptedBlock = cipher.update(buf, 0, numRead);
                plaintextDestination.write(decryptedBlock);
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (plaintextDestination != null) {
                    ciphertextSource.close();
                }
                if (plaintextDestination != null) {
                    plaintextDestination.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static byte[] getIV(SecureRandom random) {

        final byte[] nonce = new byte[GCM_NONCE_LENGTH];
        random.nextBytes(nonce);
        System.out.println(nonce);
        return nonce;
    }

    public static void main(String[] args) throws GeneralSecurityException, IOException
    {
        Security.addProvider(new BouncyCastleProvider());

        FileInputStream fis = new FileInputStream(""C:/Users/roehrlef/Desktop/Test Data/Encrypted Data/encrypted.jpg"");
        FileOutputStream fos = new FileOutputStream(""C:/Users/roehrlef/Desktop/Test Data/Decrypted Data/decrypted.jpg"");
        decode(fis, fos);
    }
}
</code></pre>
","<p>You're using <code>KeyGenerator</code> twice; once for encryption and once for decryption. This class generates a new random key. With symmetric ciphers you need to use the same key for encryption and decryption (hence the name).</p>

<p>In general you should use the following classes for the following purposes:</p>

<p>For symmetric keys (e.g. AES, HMAC):</p>

<ul>
<li><code>KeyGenerator</code>: brand new secret (symmetric) keys;</li>
<li><code>SecretKeyFactory</code>: decoding secret (symmetric) keys, for instance generated by the method Key#getEncoded() implemented by most key classes;</li>
</ul>

<p>And for asymmetric public / private key pairs (e.g. RSA):</p>

<ul>
<li><code>KeyPairGenerator</code>: brand new public / private asymmetric key pairs;</li>
<li><code>KeyFactory</code>: decoding public / private (asymmetric) keys from a stored key format, for instance generated by the method <code>Key#getEncoded()</code> implemented by most key classes;</li>
</ul>

<p>Both symmetric and asymmetric keys may be stored in key stores:</p>

<ul>
<li><code>KeyStore</code>: storing keys / certificates in a key container such as PKCS#12 key stores;</li>
</ul>

<p>Finally there are some other options for creating keys:</p>

<ul>
<li><code>KeyAgreement</code>: establishing a key by a key agreement function such as Diffie-Hellman key exchange;</li>
<li><code>Cipher#unwrap</code>: unwrapping (decrypting) keys created using <code>Cipher#wrap</code> (or a similar function on another platform) with another key.</li>
</ul>

<hr>

<p>You should probably either store and retrieve the key in a <code>KeyStore</code> - which you can load / save to file. Note that not all key stores are created equal; Java 9 expanded the functionality of PKCS#12 key stores and made them the default. You code also encode the key and use a <code>SecretKeyFactory</code> to decode it again.</p>

<p>Or you can just cheat and reuse the <code>SecretKey</code> instance you generated during encryption, and implement key storage later. That would be good for testing purposes. In the end you need to share the key for symmetric encryption.</p>

<p>And yes, the IV needs to be identical on both sides. Usually it is just stored in front of the ciphertext. The IV should be unique for each encryption, so you have to use the random number generator over there.</p>
","294","<java><encryption><aes><encryption-symmetric><aes-gcm>","0","1","1","2018-03-29 11:50:35","","1","","589259","","2018-03-29 11:41:12","2018-03-29 10:28:13",""
"50555103","Encryption result only in alpha numeric","<p>I want to encrypt a <strong>String to an cipher which consists only of alphabets (a-z/A-Z) and numbers(0-9)</strong>. I doesn't want it to have any other characters (=, &amp;, !.. etc).</p>

<p>Is there any way to achieve it? If so, can please someone help me out. A java code will be preferred without any external libraries. </p>

<p>Note:</p>

<ul>
<li><p>I have already <strong>tried base64 encoding but it does't work</strong> as it uses '=' as padding character. </p></li>
<li><p>This generated cipher will be used in web urls to pass values. </p></li>
<li><p>The cipher should also be decoded back to original String.</p></li>
</ul>
","<p>Assuming one way hash is enough for you, you can implement something like this </p>

<pre><code>public String hashToHexString(String whatever) throws NoSuchAlgorithmException{

        byte[] digest = MessageDigest.getInstance(""your one way hash alghoritm"")
                .digest(whatever.getBytes());
        return DatatypeConverter.printHexBinary(digest);

}
</code></pre>
","280","<java><jsp><security><encryption><encryption-symmetric>","-1","-1","1","2018-05-27 18:35:30","","7","","7694381","","2018-05-27 18:35:30","2018-05-27 18:11:46",""
"14736155","Android RC2 Encryption","<p>I'm working on making an Android client for a fairly old webservice.  The webservice requires that I encrypt some of the data I send to it in RC2 style.  I'm having trouble getting anything (Cipher, KeyFactory, KeyGenerator, etc.) to even have an RC2 implementation available.</p>

<p>I can't change the webservice so I'm stuck with the RC2 encryption (I know it's older and not really preferred).</p>

<p>Is there any implementation I can use in java/android libraries?  I would prefer to use built in components but would be willing to use a third party library if I need to.</p>
","<p>Bouncy Castle is a pretty save bet. You may want to extract the RC2 code from the bouncy lightweight API and put it straight in your code base to safe on resources. Bouncy Castle is <em>very</em> liberally licensed...</p>
","276","<android><encryption><encryption-symmetric><rc2-cipher>","0","2","1","2013-02-06 23:29:45","14740873","0","","","","","2013-02-06 18:25:32",""
"14217697","Kerberos realm understanding","<p>Could someone summarise why realms are necessary in Kerberos and the advantages of the concept. </p>

<p>I'm struggling to isolate everything I know / beginning to understand into some well defined points for revision. My research just uncovers articles with so much depth can barely make sense of it. I understand what they are. I am aware that using them means that data is distributed thus advantageous in the event of a system failure and that it is easier to manage many small realms instead of one huge one.</p>

<p>Thanks in advance</p>
","<p>A realm is just a virtual collection of security principals. SASL uses the same notion. For instance, in Windows a domain is a Kerberos realm. Dependening on your case a big realm would make sense. Linking realms reaquires two-way trusts between them. Means more administration overhead for you.
What actual problem do you have?</p>
","269","<security><kerberos><encryption-symmetric>","2","0","2","2014-02-08 05:30:27","21642364","0","","","","","2013-01-08 14:56:17",""
"14217697","Kerberos realm understanding","<p>Could someone summarise why realms are necessary in Kerberos and the advantages of the concept. </p>

<p>I'm struggling to isolate everything I know / beginning to understand into some well defined points for revision. My research just uncovers articles with so much depth can barely make sense of it. I understand what they are. I am aware that using them means that data is distributed thus advantageous in the event of a system failure and that it is easier to manage many small realms instead of one huge one.</p>

<p>Thanks in advance</p>
","<p>The explicit notion of “realm” allows for scaling and federation of Kerberos systems. Imagine two groups A and B which started using Kerberos independently. Each has a completely separate Kerberos system, or realm: a collection of security principals (users and software services) connected to a common Kerberos authentication service, which allows them to authenticate to one another.</p>

<p>Now, these groups want to work together; suppose B has a web server and it wants to allow authenticated access to members of A. This poses a practical problem: the two Kerberos systems do not interoperate. In order to allow authentication, they either have to join the web server to realm A when it already has an identity in realm B, or every user in A has to join B as well (by obtaining a new principal name in B, with a new password, authenticating multiple times and switching between identities depending on what they want to access). It's a mess.</p>

<p>The solution to this is federation: group B decides to trust A’s identification of its own users, rather than requiring them to register independently with B. This is accomplished by giving to A a key which allows its Kerberos system to directly issue credentials good in B’s realm. This is called a one-way realm trust (B trusting A). The B web server can distinguish between users in the different groups, because the realms appear explicitly in the principal names: user@A vs user@B.</p>

<p>To help with the scaling aspect, Kerberos 5 has automatic support for hierarchical realm trusts. If you have three realms FOO, A.FOO, and B.FOO, FOO trusts A.FOO, and B.FOO trusts FOO, then user@A.FOO can authenticate to a service in B.FOO without the realm administrators having to set up a direct trust between A.FOO and B.FOO: Kerberos will follow the trust relationships up and down automatically.</p>
","269","<security><kerberos><encryption-symmetric>","2","2","2","2014-02-08 05:30:27","21642364","0","","","","","2013-01-08 14:56:17",""
"36300837","Decrypt master password of windows API CryptProtectData (presumably)","<p>Is it possible to decrypt master password if I have data for encryption (text) and the result of encryption of this data (BLOB). 
I want to decrypt Google Chrome master password that is used for encryption data. As I know chrome uses windows API CryptProtectData function. I have plaintext1 and ciphertext1. Also I have ciphertext2 and I want to decrypt plaintext2.</p>
","","265","<encryption><public-key-encryption><password-encryption><encryption-symmetric>","2","","0","2016-03-30 07:10:40","","4","","3065976","","2016-03-30 07:10:40","2016-03-30 05:59:59",""
"43878011","Simplest way to ""encrypt"" string with another string key?","<p>I want to encrypt an input and get an encrypted output, by supplying my own key.</p>

<p>The key points here (which differentiate me from post SO posts and things i've googled so far)</p>

<ol>
<li>I need to encrypt/decrypt between ruby and javascript, so ideally a library which belongs to both</li>
<li><strong>SIMPLICITY OVER SECURITY.</strong> This is the main differentiator... I've tried looking at openSSL tutorials and they're quite advanced. I literally just need to encrypt a string, this doesn't have anything to do with security or sensitive info, as obviously in that case you would use proper encryption. For this I just need to obscure something that isn't very important.</li>
</ol>
","<p>Just use the classic HMAC. <a href=""http://ruby-doc.org/stdlib-2.1.0/libdoc/openssl/rdoc/OpenSSL/HMAC.h%E2%80%8C%E2%80%8Btml"" rel=""nofollow noreferrer"">Ruby</a> and <a href=""http://caligatio.github.io/jsSHA"" rel=""nofollow noreferrer"">JavaScript</a>.</p>

<p>(Edited from an accepted comment.)</p>
","257","<javascript><ruby><encryption><encryption-symmetric>","1","-3","2","2017-05-09 21:01:13","43879808","16","","","","","2017-05-09 19:07:44",""
"43878011","Simplest way to ""encrypt"" string with another string key?","<p>I want to encrypt an input and get an encrypted output, by supplying my own key.</p>

<p>The key points here (which differentiate me from post SO posts and things i've googled so far)</p>

<ol>
<li>I need to encrypt/decrypt between ruby and javascript, so ideally a library which belongs to both</li>
<li><strong>SIMPLICITY OVER SECURITY.</strong> This is the main differentiator... I've tried looking at openSSL tutorials and they're quite advanced. I literally just need to encrypt a string, this doesn't have anything to do with security or sensitive info, as obviously in that case you would use proper encryption. For this I just need to obscure something that isn't very important.</li>
</ol>
","<p>Here's a basic <a href=""https://en.wikipedia.org/wiki/XOR_cipher"" rel=""nofollow noreferrer"">XOR cipher</a> in Ruby:</p>

<pre><code>key = 'private_key'

def xor_cypher(text, key)
  text.each_byte.zip(key.each_byte.cycle).map { |a, b| (a ^ b).chr }.join
end

p xor_cypher('This is my secret message', key)
# ""$\x1A\x00\x05A\x1D\x16\x7F\x06\x1CY\x03\x17\n\x04\x04\x00E2\x0E\x16\n\x11\x15\f""
p xor_cypher(""$\x1A\x00\x05A\x1D\x16\x7F\x06\x1CY\x03\x17\n\x04\x04\x00E2\x0E\x16\n\x11\x15\f"", key)
# ""This is my secret message""
</code></pre>

<p>It shouldn't be too hard to write the same in JS.</p>

<p>It would be a good idea to use a long, random binary key (not just usual alpha characters) and binary data as well.</p>

<p>If not, you might compress the data first and encrypt it later.</p>
","257","<javascript><ruby><encryption><encryption-symmetric>","1","0","2","2017-05-09 21:01:13","43879808","16","","","","","2017-05-09 19:07:44",""
"31669331","Invalid property 'securementCallbackHandlers' in spring-ws 2.2.1","<p>I Create Web service with spring-ws (Soap)
and now, i want create encryption web service.
my applicationContext.xml is:</p>

<pre><code>&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;beans xmlns=""http://www.springframework.org/schema/beans""
xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
xmlns:web-services=""http://www.springframework.org/schema/web-services""
xsi:schemaLocation=""http://www.springframework.org/schema/web-services http://www.springframework.org/schema/web-services/web-services.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd""&gt;

&lt;bean id=""webserviceTemplate""
      class=""org.springframework.ws.client.core.WebServiceTemplate""&gt;
    &lt;constructor-arg ref=""messageFactory"" /&gt;
    &lt;property name=""defaultUri"" value=""http://localhost:8081/surena/signauthenticateservice/""/&gt;
    &lt;property name=""interceptors""&gt;
        &lt;bean class=""org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor""&gt;
            &lt;property name=""securementActions"" value=""Encrypt""/&gt;
            &lt;property name=""securementEncryptionKeyIdentifier"" value=""EmbeddedKeyName""/&gt;
            &lt;property name=""securementEncryptionUser"" value=""symmetric""/&gt;
            &lt;property name=""securementEncryptionEmbeddedKeyName"" value=""symmetric""/&gt;
            &lt;property name=""SecurementEncryptionSymAlgorithm"" value=""http://www.w3.org/2001/04/xmlenc#tripledes-cbc""/&gt;

            &lt;property name=""securementCallbackHandlers""&gt;
                &lt;bean class=""org.springframework.ws.soap.security.wss4j.callback.KeyStoreCallbackHandler""&gt;
                    &lt;property name=""symmetricKeyPassword"" value=""keyPassword""/&gt;
                    &lt;property name=""keyStore""&gt;
                        &lt;bean class=""org.springframework.ws.soap.security.support.KeyStoreFactoryBean""&gt;
                            &lt;property name=""location"" value=""/symmetricStore.jks""/&gt;
                            &lt;property name=""type"" value=""JCEKS""/&gt;
                            &lt;property name=""password"" value=""symmetricPassword""/&gt;
                        &lt;/bean&gt;
                    &lt;/property&gt;
                &lt;/bean&gt;
            &lt;/property&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
&lt;/bean&gt;
&lt;bean id=""log4jInitialization"" class=""org.springframework.beans.factory.config.MethodInvokingFactoryBean""&gt;
    &lt;property name=""targetClass"" value=""org.springframework.util.Log4jConfigurer"" /&gt;
    &lt;property name=""targetMethod"" value=""initLogging"" /&gt;
    &lt;property name=""arguments""&gt;
        &lt;list&gt;
            &lt;value&gt;src/test/resources/log4j.properties&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;
&lt;bean id=""messageFactory"" class=""org.springframework.ws.soap.saaj.SaajSoapMessageFactory""/&gt;
</code></pre>

<p></p>

<p>but, i has e this error:</p>

<pre><code>Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'securementCallbackHandlers' of bean class [org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor]: Bean property 'securementCallbackHandlers' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?
at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1076)
at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:927)
at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:95)
at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:75)
at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1510)
... 50 more
</code></pre>

<p>I got help Spring Web Services 2 Cookbook.
but this book use the spring web service 1.5, but i use spring web service 2.2.1, (i Create web service in spring boot web service 1.2.5 in the server side)
Can help me?</p>
","<p>I ran into the same error.  Essentially this property was removed sometime after 2.0.3 of Spring WS when they decided to upgrade to Apache WSS4J 1.6 and they couldn't figure out how to create a callback handler on Securement actions.  So they basically just removed it with no warning or explanation and without updating their documentation.</p>

<p><a href=""http://docs.spring.io/spring-ws/site/apidocs/org/springframework/ws/soap/security/wss4j/Wss4jSecurityInterceptor.html"" rel=""nofollow"">Javadoc for Wss4JSecurityInterceptor</a></p>

<p>Typical move by the Spring folks.  <a href=""https://jira.spring.io/browse/SWS-849"" rel=""nofollow"">Here is an issue in their JIRA tracker</a> where they are labeling this as a ""Feature Improvement"" slated for 2.3.</p>

<p>Luckily however somebody there posted a potential workaround until this happens.  He is creating his own Securement Callback Handler class and his own custom Wss4JSecurityInterceptor class that adds this property.  It is worth looking into.</p>
","257","<soap><spring-ws><encryption-symmetric><wss4j>","3","1","1","2016-01-28 19:39:17","","0","1","","","","2015-07-28 06:56:58",""
"37340414","How to encrypt a file using Crypto API with multiple threads?","<p>I am trying to encrypt a file using multiple threads and Crypto API / AES256 / CBC mode / <strong>NO</strong> IV (initialization vector) is used.</p>

<p>I am dividing the file into as many number of threads. The thread which gets the last block of the file, does a CryptEncrypt passing Final as true.</p>

<p>Following the approach suggested <a href=""https://blogs.msdn.microsoft.com/alejacma/2008/06/30/threading-issues-with-cryptoapi/"" rel=""nofollow"">here</a>: Each thread uses a duplicated key.</p>

<p>Additionally, each thread opens the source file in shared read mode and starts reading from the offset allotted, keeping encrypting and writing to the destination file (again opened in shared write mode) as appropriate offsets.</p>

<p>The output file which i get in case of single and multi threaded is not the same and hash mismatches. What is that i am doing wrong?</p>
","<p>You cannot do that. IV or chaining mode is irrelevant here (though some chaining mode allows parallelism - but is would be its implementation). Consider performing encryption of following text:</p>

<pre><code>""Block cipher mode of operation""
</code></pre>

<p>Somehow you divide it this way (2 threads):</p>

<ul>
<li><code>""Block cipher mo""</code></li>
<li><code>"" de of operation""</code></li>
</ul>

<p>How can you be sure that it gets executed (by OS scheduler) in the same sequence? If you divide it into 3 threads, it may be:</p>

<ul>
<li><code>""Block ciphe""</code></li>
<li><code>""r mode o""</code></li>
<li><code>""f operation""</code></li>
</ul>

<p>but it may get executed as:</p>

<ul>
<li><code>""r mode o""</code></li>
<li><code>""f operation""</code></li>
<li><code>""Block ciphe""</code></li>
</ul>

<p>The end result, as you can guess, would be different!</p>

<p>Also, with CBC mode, the result depends on previous outcome, a <a href=""https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29"" rel=""nofollow"">mentioned here</a>. See, on the right side, CBC is not parallelizable.</p>
","252","<windows><visual-c++><aes><encryption-symmetric><cryptoapi>","1","1","1","2016-05-20 09:00:07","37340637","1","0","1987142","","2016-05-20 09:00:07","2016-05-20 07:22:06",""
"54396971","AES Known-Plaintext-Attack and IV?","<p>Edit: I address Known-Plaintext-Attack and Chosen-plaintext attack (both) with my question</p>

<p>I have a little problem understandig the right use of IV.</p>

<p>AES is only safe against Known-Plaintext-Attack if I use a different IV for every message. Right?</p>

<p>I need to know the used IV to decrypt a message. Also right?</p>

<p>AES that isn't protected against Known-Plaintext-Attack is a weak encryption. Right?</p>

<p>This means I have to store every IV with the encrypted data (e.g. in a extra DB column). Sounds like a lot of overhead.</p>

<p>Is there any solution to this problem?</p>
","<p>For a 128 bit message, a 96 bit IV (for AES in GCM mode as per NIST recommendation) might look like a big overhead. But usually the plain text messages to be encrypted are much larger than that. Much larger as compared to the fixed size 96 bit IV. </p>

<p>On the other hand, almost every safe encryption or hashing mechanisms need a kind of randomness in the form of IV, nonce, salt etc. Not just AES.</p>

<p>It's an overhead but that is a tradeoff for security.</p>

<p>Usually IV is appended or prepended with the ciphertext. And decryption logic knows where to find it in the cipher text.</p>

<p>Overhead is everywhere. For e.g. in an RDBMS table when we create an index, it's an overhead in terms of space and write processing time. But it's a tradeoff for fast query performance. </p>
","245","<security><encryption><aes><encryption-symmetric>","1","0","1","2019-01-28 12:09:04","54397380","1","","10386307","","2019-01-28 07:22:42","2019-01-28 07:01:31",""
"34987156","Symmetric Encryption with GPGME","<p>According to the documentation the <code>gpgme_op_encrypt</code> method of GPGME is able to perform symmetric encryption tasks:</p>

<pre><code>gpgme_op_encrypt (gpgme_ctx_t ctx, gpgme_key_t recp[], gpgme_encrypt_flags_t flags, gpgme_data_t plain, gpgme_data_t cipher)
</code></pre>

<blockquote>
  <p>If recp is NULL, symmetric rather than public key encryption is
  performed. Symmetrically encrypted cipher text can be deciphered with
  gpgme_op_decrypt. Note that in this case the crypto backend needs to
  retrieve a passphrase from the user. Symmetric encryption is currently
  only supported for the OpenPGP crypto backend.</p>
</blockquote>

<p>But where does the key used for the symmetric encryption come from? Is it somehow possible to fetch this key and transfer it to another device (where I would like to decrypt the text) ?</p>
","<p>The <a href=""https://tools.ietf.org/html/rfc4880#section-5.3"" rel=""nofollow"">session key for symmetric encryption is derived from a passphrase</a>, which will be queried from the user through one of the pinentry methods. Specifically highlighting a part of the text you already quoted:</p>

<blockquote>
  <p>If recp is NULL, symmetric rather than public key encryption is performed. Symmetrically encrypted cipher text can be deciphered with gpgme_op_decrypt. <strong>Note that in this case the crypto backend needs to retrieve a passphrase from the user.</strong> Symmetric encryption is currently only supported for the OpenPGP crypto backend.</p>
</blockquote>

<p>I'm not aware you can extract the session key through GPGME, but you don't really need to: all you need to know at the other end is the passphrase used, and the session key can be derived again. You could of course also reimplement the <a href=""https://tools.ietf.org/html/rfc4880#section-3.7"" rel=""nofollow"">string-to-key-function used for OpenPGP</a>.</p>
","245","<encryption><gnupg><encryption-symmetric><gpgme>","2","1","1","2018-04-19 07:47:50","34990331","0","","1007502","","2018-04-19 07:47:50","2016-01-25 07:25:13",""
"53126706","How to decode bytes to first forward slash?","<p>Hey everyone I'm having a slight issue with some python AES Decryption code I wrote. I'm trying to decrypt two different emails (of different lengths) using PyCryptoDome and AES-256-CBC encryption. My code is below:</p>

<pre><code>import base64
from Crypto.Cipher import AES
import json
from Crypto.Util.Padding import pad, unpad

def decrypt(enc):
    # Get key
    key = base64.b64decode(""mybase64key"")

    # Load dictionary of Base64 values of the payload to decrypt
    dataDict = json.loads(base64.b64decode(myEncryptedData))

    # Create decrypter with our IV
    decrypter = AES.new(key, AES.MODE_CBC, base64.b64decode(dataDict['iv']))

    # Pad and decode data
    data = decrypter.decrypt(pad(base64.b64decode(dataDict['value']), 16))

    # EDIT: PRINTING DATA HERE
    print(data)

    # Works for shorter password
    print(data[:-24].decode())
    # Works for longer password
    print(data.decode())
</code></pre>

<p>It seems like just a padding issue, but I'm not sure how to go about getting the correct padding size. Both passwords/IV's have the same exact encrypted length, so</p>

<pre><code>print(len(dataDict['value']))
</code></pre>

<p>prints 44 for both emails, and padding it prints 48 for both emails which stops me from getting the padding length since it's the same in all cases.</p>

<p>Using</p>

<pre><code>print(len(data))
</code></pre>

<p>returns the same length value for both emails as well. However, when I just print data, I can see the two emails like so:</p>

<pre class=""lang-none prettyprint-override""><code>b'abcdefghijklmnop@gmail.com\x06\x06\x06\x06\x06\x06\x0f\xef\xe2\xa3\xdd\xH9\x7f\xj4\xwf\x14\x88\xd8(x\x90N'

b'abcd.efghi@myydomain.com\x08\x08\x08\x08\x08\x08\x08\x08y\xg3?\xa0\x1e\xaa`\xc2\x67\xf1i]3\xe1\xa0F'
</code></pre>

<p>How can I go about just getting the string I can see within the bytes array without knowing the length of the original text? Is there a workaround? The two example byte arrays I provided have the same exact length/format of the emails, just not sure how to deal with this issue.</p>
","<p>I really don't know what the <code>\x06</code> or <code>\x08</code> mean or signify, but they both happen to not be printable characters (which is why they display in hexadecimal like that). In addition, the values you show for the two email isn't valid Python syntax.</p>

<p>Ignoring that issue, something along these lines might work:</p>

<pre><code>import string

# Leaving the invalid '\xH9\x7f\xj4\xwf\x14\x88\xd8(x\x90N' part off.
email1 = b'abcdefghijklmnop@gmail.com\x06\x06\x06\x06\x06\x06\x0f\xef\xe2\xa3\xdd'

for i, value in enumerate(email1):
    if chr(value) not in string.printable:
        print(i, '\\x{:02x}'.format(value))
        print(email1[:i])  # Show everything up to that point.
        break
else:
    print('all values were printable')
</code></pre>

<p>Output:</p>

<pre class=""lang-none prettyprint-override""><code>26 \x06
b'abcdefghijklmnop@gmail.com'
</code></pre>
","241","<python><encryption><aes><pycrypto><encryption-symmetric>","1","1","2","2018-11-03 10:44:02","53127265","9","","8093698","","2018-11-03 00:08:04","2018-11-02 22:49:24",""
"53126706","How to decode bytes to first forward slash?","<p>Hey everyone I'm having a slight issue with some python AES Decryption code I wrote. I'm trying to decrypt two different emails (of different lengths) using PyCryptoDome and AES-256-CBC encryption. My code is below:</p>

<pre><code>import base64
from Crypto.Cipher import AES
import json
from Crypto.Util.Padding import pad, unpad

def decrypt(enc):
    # Get key
    key = base64.b64decode(""mybase64key"")

    # Load dictionary of Base64 values of the payload to decrypt
    dataDict = json.loads(base64.b64decode(myEncryptedData))

    # Create decrypter with our IV
    decrypter = AES.new(key, AES.MODE_CBC, base64.b64decode(dataDict['iv']))

    # Pad and decode data
    data = decrypter.decrypt(pad(base64.b64decode(dataDict['value']), 16))

    # EDIT: PRINTING DATA HERE
    print(data)

    # Works for shorter password
    print(data[:-24].decode())
    # Works for longer password
    print(data.decode())
</code></pre>

<p>It seems like just a padding issue, but I'm not sure how to go about getting the correct padding size. Both passwords/IV's have the same exact encrypted length, so</p>

<pre><code>print(len(dataDict['value']))
</code></pre>

<p>prints 44 for both emails, and padding it prints 48 for both emails which stops me from getting the padding length since it's the same in all cases.</p>

<p>Using</p>

<pre><code>print(len(data))
</code></pre>

<p>returns the same length value for both emails as well. However, when I just print data, I can see the two emails like so:</p>

<pre class=""lang-none prettyprint-override""><code>b'abcdefghijklmnop@gmail.com\x06\x06\x06\x06\x06\x06\x0f\xef\xe2\xa3\xdd\xH9\x7f\xj4\xwf\x14\x88\xd8(x\x90N'

b'abcd.efghi@myydomain.com\x08\x08\x08\x08\x08\x08\x08\x08y\xg3?\xa0\x1e\xaa`\xc2\x67\xf1i]3\xe1\xa0F'
</code></pre>

<p>How can I go about just getting the string I can see within the bytes array without knowing the length of the original text? Is there a workaround? The two example byte arrays I provided have the same exact length/format of the emails, just not sure how to deal with this issue.</p>
","<p>The problem is that you forget to unpad, that is your issue. </p>

<p>Depending on how you padded;</p>

<pre><code>pad(data_to_pad, block_size, style='pkcs7')
Apply standard padding. 
</code></pre>

<p>Unpad it reversely; </p>

<pre><code>unpad(padded_data, block_size, style='pkcs7')
Remove standard padding.
</code></pre>
","241","<python><encryption><aes><pycrypto><encryption-symmetric>","1","1","2","2018-11-03 10:44:02","53127265","9","","8093698","","2018-11-03 00:08:04","2018-11-02 22:49:24",""
"36576495","No supported encrypter found. The cipher and / or key length are invalid potential bug?","<p>If I SPAM <code>F5</code> eventually I will get </p>

<pre><code>""RuntimeException in EncryptionServiceProvider.php line 45:
No supported encrypter found. The cipher and / or key length are invalid.""
</code></pre>

<p>But then it will disappear if i refresh again. I tried both in local and production envoirment</p>

<p>And yes, i have a <code>app_key</code> which was generated with <code>php artisan key:generate</code> with the Cipher <code>AES-256-CBC</code>. I cannot for my life understand what is wrong.</p>

<p>I have also made sure all <strong>vendors are updated</strong></p>

<p>Even if this is occurs 1/500 it still occurs.</p>

<p>Thanks</p>
","","236","<php><laravel><encryption><laravel-5.2><encryption-symmetric>","1","","0","2016-04-18 00:14:32","","0","","2224584","","2016-04-18 00:14:32","2016-04-12 14:37:25",""
"36364887","How or What is the best way to pass an encryption key?","<p>Ok. so, encrypted data is sent from the computer to the server and spread to other computers. And, let say there is a person in the middle attack? </p>

<p>Here is where I'm confuse; The client/server need to decrypt the data with the key, but if the key can be seen by the client computer then the attacker can see it in the data as well. The key can be encrypted, but another key would have to be sent un-encrypted. so how do you pass the ""key"" to decrypt the data? </p>

<p>So when I hear new chat system saying they are enprypted their client messages; I'm wondering, how are they doing it? When hacker can try to find the key in thier data and decrypt the message.</p>
","","236","<encryption><public-key-encryption><password-encryption><encryption-symmetric><encryption-asymmetric>","0","","0","2016-04-01 20:01:32","","11","","","","","2016-04-01 20:01:32",""
"23398127","One time pad gives the same answer every time","<p>I am writing a one time pad encryption program in Java. The program outputs the same ""decrypted"" text even with a new randomized key.<br>
Here is the encryption code:  </p>

<pre><code>public static String oneTimePad(String plaintext, int[] key) {
    int a = 0;
    char[] ciphertext = plaintext.toUpperCase().toCharArray();
    for (int i = 0; i &lt; plaintext.length(); i++) {
        if (ciphertext[i] &lt; 'A' || ciphertext[i] &gt; 'Z') {
        } else {
            ciphertext[i] = (char) ((((plaintext.charAt(i) - 65) + key[a]) % 26) + 65);
            a++;
        }
    }
    return new String(ciphertext);
}
</code></pre>

<p>Here is the decryption code:  </p>

<pre><code>public static String padDecrypt(String ciphertext, int[] key) {
    char[] plaintext = ciphertext.toUpperCase().toCharArray();
    for (int i = 0, a = 0; i &lt; ciphertext.length(); i++) {
        if (plaintext[i] &lt; 'A' || plaintext[i] &gt; 'Z')
            continue;
        int x = (ciphertext.charAt(i) - 65) - key[a];
        if (x &lt; 0)
            x += 26;
        plaintext[i] = (char) ((x % 26) + 90);
        a++;
    }
    return new String(plaintext).toLowerCase();
}
</code></pre>

<p>Results for the string ""this is the smartest program ever made""<br>
Encrypted text:</p>

<pre><code>IYDS PJ UNN SIMZGQHZ UZRMODJ SWAM WOFM
</code></pre>

<p>The key example:</p>

<pre><code>9, 11, 15, 20, 1, 11, 21, 0, 3, 20, 16, 6, 2, 7, 6, 9, 0, 25, 2, 23, 0, 17, 23, 17, 8, 21, 16, 15, 4, 8, 22, 2, 17, 16, 23, 21, 4, 9
</code></pre>

<p>Here is the ""decrypted text that never changes even with different keys:</p>

<pre><code> sghr hr sgd rl`qsdrs oqnfq`l d[dq l`cd
</code></pre>

<p>If someone could give me some advice that would be great!</p>
","<p>Ok the two methods taken together, I see two problems wrong with the code:</p>

<ol>
<li>oneTimePad assumes that the input is uppercase.  The plaintext is lower case.  I think there could be a mismatch there.</li>
<li>ASCII 90 is 'Z'.  I think you might mean 97 which is 'a'.  I recommend you replace the numbers with their characters anyway ... instead of 65 use 'A'.</li>
</ol>
","228","<java><encryption-symmetric>","0","0","1","2014-04-30 22:18:52","23399022","0","","","","","2014-04-30 21:13:18",""
"38349326","PHP & Mysql -Queries using symmetric key decryption","<p>I am attempting to use PHP to execute an SQL query which uses symmetric key decryption. However I am unable to get any results.</p>

<p>My PHP code looks like this:</p>

<pre><code>$sql = ""OPEN SYMMETRIC KEY ServerKey DECRYPTION BY CERTIFICATE ServerCertificate WITH PASSWORD = 'P@ssw0rd' SELECT CONVERT(nvarchar, DecryptByKey([address])) AS [address] FROM [serverDBO].[dbo].[allUsers] where id=63"";

$result = $db-&gt;Execute(""$sql"");

var_dump($result);
</code></pre>

<p>The var_dump command results in:</p>

<blockquote>
  <p>object(ADORecordSet_empty)#200 (6) { [""dataProvider""]=> string(5)
  ""empty"" [""databaseType""]=> bool(false) [""EOF""]=> bool(true)
  [""_numOfRows""]=> int(0) [""fields""]=> bool(false) [""connection""]=>
  bool(false) } empty10</p>
</blockquote>

<ul>
<li><p>However if I execute the exact same query when connected to the database through Microsoft server management studio I get results returned successfully:</p>

<p>71 Test Road</p></li>
</ul>

<p>Can anyone advise what might be going wrong here or how I can correctly do this in PHP?</p>
","<p>In your <code>$sql</code> there is a <code>SELECT</code> statement, so you most likely need to fetch the result after executing the statement:</p>

<pre><code>$result = $db-&gt;execute($sql);
while ($row = $result-&gt;fetchRow()) {
  print_r($result);
}
</code></pre>

<p>See <a href=""http://adodb.org/dokuwiki/doku.php?id=v5:userguide:learn_abstraction:using_execute"" rel=""nofollow"">ADOdb documentation</a> for more details.</p>

<p>P.S. The double quotes in your <code>execute()</code> call simply do nothing, you may omit them.</p>
","227","<php><sql-server><encryption><encryption-symmetric><adodb-php>","0","0","1","2016-07-13 12:29:15","","0","","1950957","","2016-07-13 12:29:15","2016-07-13 10:38:39",""
"36282444","tokenization engine | encryption-decryption using seed file","<p>I need to build web server (window server) with a <code>tokenization</code> engine for encrypting sensitive data. As per client requirement : </p>

<ul>
<li>The server should be configured with a unique encryption/hash ""seed"" file that can be backed up</li>
<li>The server should use the seed file to tokenize (i.e. mask/hash/encrypt) sensitive data fields</li>
<li>The server should pass the tokenized values to the database (MySQL) for save operation.</li>
<li>The server should un-tokenize the data when retrieved from the database for display on the website</li>
</ul>

<p>My question is 
 - how to create seed file? 
 - if data is encrypted using seed file and then somebody change/update seed file. In this case can we able to decrypt data</p>

<p>Please advise approach to meet above requirement.</p>
","<p>One can create a ""seed"" with a cryptographic PRNG (Pseudo Random Number Generator) or a HRNG (Hardware Random Number Generator). Most computer systems contain a cryptographic PRNG and HRNGs with a limited entropy rate can be purchased cheaply in USB configurations.</p>

<p>Save the generated seed in a secure (possibly bank) safe on paper and/or a USB drive for restoration.</p>

<p>On the high security end use a <a href=""https://en.wikipedia.org/wiki/Hardware_security_module"" rel=""nofollow"">HSM</a> (Hardware Security Module).</p>

<p>The server needs to be secure including good two factor authentication.</p>

<p>This seems to answer the final question statement but entire question is unclear. If you are dealing with CC payments you will need to become familiar with <a href=""https://www.pcisecuritystandards.org"" rel=""nofollow"">PCI</a> (Payment Card Industry).</p>
","226","<php><security><encryption-symmetric><random-seed><window-server>","-1","0","1","2016-03-31 11:22:11","","1","","3618581","","2016-03-31 11:22:11","2016-03-29 11:01:24",""
"15115925","In-built key Generation Algorithm using SHA256","<p>I am working on an application in c# .Net where data needs to be encrypted and Since data privacy is my ultimate motive , I am doing it using AES Encryption and I use PasswordDervieBytes for determining the Secret Key. Now Since it uses SHA1 which is broken , I would like to know whether there is an in-built function which uses SHA256 for obtaining my secret key. I also know that RFC2898 can be used but then it also uses SHA1... So, Is there an In-built function which uses SHA256 algorithm ? Thank You in advance for your valuable answers !! </p>
","<p>There is a <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.sha256managed.aspx"" rel=""nofollow"">SHA256Managed</a> class that will <strong>hash</strong> the input. It will not encrypt it...</p>
","226","<sha256><encryption-symmetric><data-security>","0","0","1","2013-02-27 15:40:20","","1","","","","","2013-02-27 15:31:12",""
"4506141","Issue with .NET encryption","<p>I referred to this article <a href=""http://www.codeproject.com/KB/security/DotNetCrypto.aspx"" rel=""nofollow"">http://www.codeproject.com/KB/security/DotNetCrypto.aspx</a> and I am trying write an encrypted string instead of plain text. Below is the code I am using:</p>

<pre><code>TextWriter tw = new StreamWriter(""c:\\temp\\test.txt"");
string plainString = ""String to be encrypted"";
PasswordDeriveBytes pdb = new PasswordDeriveBytes(""Test"",new byte[] {0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d,0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76});
Rijndael alg = Rijndael.Create();
alg.Key = pdb.GetBytes(32);
alg.IV = pdb.GetBytes(16);
tw.WriteLine(alg.IV.ToString());
MemoryStream ms = new MemoryStream(); 
CryptoStream cs = new CryptoStream(ms,alg.CreateEncryptor(), CryptoStreamMode.Write);
byte[] clearBytes = System.Text.Encoding.Unicode.GetBytes(plainString);
cs.Write(clearBytes, 0, clearBytes.Length);
cs.Close();
tw.WriteLine(ms.ToString());
ms.Close();
tw.Flush();
</code></pre>

<p>However, when I open the file, I get <strong><code>System.IO.MemoryStream</code></strong> instead of some encrypted characters. What did I miss?</p>
","<p>MemoryStream.ToString() relies on the default implementation of Object.ToString(), which writes out the classname. Create a FileStream and pass that to the CryptoStream ctor.</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.io.filestream.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/system.io.filestream.aspx</a></p>
","225","<c#><.net><encryption><encryption-symmetric>","2","0","3","2010-12-22 04:41:39","4506209","1","","366904","","2010-12-22 04:39:26","2010-12-22 04:23:33",""
"4506141","Issue with .NET encryption","<p>I referred to this article <a href=""http://www.codeproject.com/KB/security/DotNetCrypto.aspx"" rel=""nofollow"">http://www.codeproject.com/KB/security/DotNetCrypto.aspx</a> and I am trying write an encrypted string instead of plain text. Below is the code I am using:</p>

<pre><code>TextWriter tw = new StreamWriter(""c:\\temp\\test.txt"");
string plainString = ""String to be encrypted"";
PasswordDeriveBytes pdb = new PasswordDeriveBytes(""Test"",new byte[] {0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d,0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76});
Rijndael alg = Rijndael.Create();
alg.Key = pdb.GetBytes(32);
alg.IV = pdb.GetBytes(16);
tw.WriteLine(alg.IV.ToString());
MemoryStream ms = new MemoryStream(); 
CryptoStream cs = new CryptoStream(ms,alg.CreateEncryptor(), CryptoStreamMode.Write);
byte[] clearBytes = System.Text.Encoding.Unicode.GetBytes(plainString);
cs.Write(clearBytes, 0, clearBytes.Length);
cs.Close();
tw.WriteLine(ms.ToString());
ms.Close();
tw.Flush();
</code></pre>

<p>However, when I open the file, I get <strong><code>System.IO.MemoryStream</code></strong> instead of some encrypted characters. What did I miss?</p>
","<p>I think .net supports very well to encrypt string using MD5 algorithm. If you want to use MD5 see the following code.</p>

<pre><code>private void encrypt(ref string password)
    {
        Int32 counter;
        Char[] passwordArr;
        String encryptedPassword;
        Byte[] hashedPassword;
        MD5CryptoServiceProvider obj = new MD5CryptoServiceProvider();

        passwordArr = password.ToCharArray();
        Byte[] passwordBytes = new byte[passwordArr.Length - 1];
        for (counter = 0; counter &lt; passwordBytes.Length; counter++)
        {
            passwordBytes[counter] = Convert.ToByte(passwordArr[counter]);
        }
        hashedPassword = obj.ComputeHash(passwordBytes);
        encryptedPassword = BitConverter.ToString(hashedPassword);
        password =  encryptedPassword;
        obj = null;
    }
</code></pre>
","225","<c#><.net><encryption><encryption-symmetric>","2","0","3","2010-12-22 04:41:39","4506209","1","","366904","","2010-12-22 04:39:26","2010-12-22 04:23:33",""
"4506141","Issue with .NET encryption","<p>I referred to this article <a href=""http://www.codeproject.com/KB/security/DotNetCrypto.aspx"" rel=""nofollow"">http://www.codeproject.com/KB/security/DotNetCrypto.aspx</a> and I am trying write an encrypted string instead of plain text. Below is the code I am using:</p>

<pre><code>TextWriter tw = new StreamWriter(""c:\\temp\\test.txt"");
string plainString = ""String to be encrypted"";
PasswordDeriveBytes pdb = new PasswordDeriveBytes(""Test"",new byte[] {0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d,0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76});
Rijndael alg = Rijndael.Create();
alg.Key = pdb.GetBytes(32);
alg.IV = pdb.GetBytes(16);
tw.WriteLine(alg.IV.ToString());
MemoryStream ms = new MemoryStream(); 
CryptoStream cs = new CryptoStream(ms,alg.CreateEncryptor(), CryptoStreamMode.Write);
byte[] clearBytes = System.Text.Encoding.Unicode.GetBytes(plainString);
cs.Write(clearBytes, 0, clearBytes.Length);
cs.Close();
tw.WriteLine(ms.ToString());
ms.Close();
tw.Flush();
</code></pre>

<p>However, when I open the file, I get <strong><code>System.IO.MemoryStream</code></strong> instead of some encrypted characters. What did I miss?</p>
","<p>well the issue is with the ms.ToString(). your should rather be reading the bytes from memorystream, changing it to appropriate encoding and then writing to the text stream.</p>
","225","<c#><.net><encryption><encryption-symmetric>","2","0","3","2010-12-22 04:41:39","4506209","1","","366904","","2010-12-22 04:39:26","2010-12-22 04:23:33",""
"51472090","BCRYPT_XTS_AES_ALGORITHM CNG algorithm fails in BCryptGenerateSymmetricKey API","<p>I am trying to use Windows CNG <code>BCRYPT_XTS_AES_ALGORITHM</code> algorithm to encrypt and decrypt the files. As part of this, I had written the following code for encryption and decryption. </p>

<p>When I use this code with <code>BCRYPT_AES_ALGORITHM</code> algorithm, both encrypt and decrypt are working fine. But when the same is being used with <code>BCRYPT_XTS_AES_ALGORITHM</code>, it is throwing the <code>STATUS_INVALID_PARAMETER</code> error in <code>BCryptGenerateSymmetricKey</code> API. </p>

<p>Any help on this is very much appreciated.</p>

<pre class=""lang-cxx prettyprint-override""><code>auto AesCrypt::CreateAESProviderAlgo()-&gt;void
{
    auto status = BCryptOpenAlgorithmProvider(&amp;m_aesHandle, BCRYPT_AES_ALGORITHM, nullptr, 0);
    //auto status = BCryptOpenAlgorithmProvider(&amp;m_aesHandle, BCRYPT_XTS_AES_ALGORITHM, nullptr, 0);
    if (0 != status) {
        N2S_THROW(""BCryptException::Failed to get provider for BCRYPT_XTS_AES_ALGORITHM. Reason: "" + GetErrorCodeAsString(status));
    }

    DWORD cbData = 0;
    DWORD cbKeyObject = 0;
    status = BCryptGetProperty(m_aesHandle, BCRYPT_OBJECT_LENGTH, (PBYTE)&amp;cbKeyObject, sizeof(DWORD), &amp;cbData, 0);
    if (0 != status) {
        N2S_THROW(""CreateSymmetricKeySHA1Hash::BCryptGetProperty return with error "" + GetErrorCodeAsString(status));
    }

    m_pbKeyObject = (PBYTE)HeapAlloc(GetProcessHeap(), 0, cbKeyObject);
    if (nullptr == m_pbKeyObject) {
        N2S_THROW(""CreateSymmetricKeySHA1Hash::Memory allocation failed."");
    }

    status = BCryptGenerateSymmetricKey(m_aesHandle, &amp;m_keyHandle, m_pbKeyObject, cbKeyObject, (PUCHAR)m_encrptKey.c_str(), SYMM_KEY_SIZE_SECRET, 0);
    if (0 != status) {
        N2S_THROW(""CreateSymmetricKeySHA1Hash::BCryptGenerateSymmetricKey return with error "" + GetErrorCodeAsString(status));
    }
}

auto AesCrypt::ProcessEncryptFile() -&gt;void
{
    DWORD bytesToSave = 0;
    UCHAR bufFileToOpen[BLOCK_SIZE] = { 0 };
    UCHAR bufFileToSave[BLOCK_SIZE * 2] = { 0 }; // TODO: Need to alloc on heap and reuse it.

    auto toReadBytes = GetFileSize(m_workOnFile);

    for (;;) // TODO: Need to take out the duplicate code from both locations.
    {
        m_readStream.read((CHAR *)bufFileToOpen, BLOCK_SIZE);
        auto bytesRead = m_readStream.gcount();

        if (0 == bytesRead) {
            N2S_THROW(""Error reading the file "" + GetStringFromWstring(m_workOnFile));
        }

        toReadBytes -= bytesRead;

        if (0 != toReadBytes &amp;&amp; bytesRead == BLOCK_SIZE) {
            GetCryptStatus(BCryptEncrypt(m_keyHandle, bufFileToOpen, (ULONG)bytesRead, nullptr, nullptr, 0, bufFileToSave, (ULONG)bytesRead, &amp;bytesToSave, 0));
            m_writeStream.write((CHAR *)bufFileToSave, bytesToSave);
            continue;
        }

        // Reading the last byte
        if (0 != BCryptEncrypt(m_keyHandle, bufFileToOpen, (ULONG)bytesRead, nullptr, nullptr, 0, nullptr, 0, &amp;bytesToSave, BCRYPT_BLOCK_PADDING)) {
            N2S_THROW(""BCryptEncrypt::Error receiving the size required for the ciphertext."");
        }

        GetCryptStatus(BCryptEncrypt(m_keyHandle, bufFileToOpen, (ULONG)bytesRead, nullptr, nullptr, 0, bufFileToSave, bytesToSave, &amp;bytesToSave, BCRYPT_BLOCK_PADDING));
        m_writeStream.write((CHAR *)bufFileToSave, bytesToSave);
        return; // Last block done.
    }
}

auto AesCrypt::ProcessDecryptFile()-&gt;void
{
    DWORD bytesToSave = 0;
    UCHAR bufFileToOpen[BLOCK_SIZE] = { 0 };
    UCHAR bufFileToSave[BLOCK_SIZE * 2] = { 0 }; // TODO: Need to alloc on heap and reuse it.

    auto toReadBytes = GetFileSize(m_workOnFile);

    for (;;)
    {
        m_readStream.read((CHAR *)bufFileToOpen, BLOCK_SIZE);
        auto bytesRead = m_readStream.gcount();

        if (0 == bytesRead) {
            N2S_THROW(""Error reading the file "" + GetStringFromWstring(m_workOnFile));
        }

        toReadBytes -= bytesRead;

        if (0 != toReadBytes &amp;&amp; bytesRead == BLOCK_SIZE) {
            GetCryptStatus(BCryptDecrypt(m_keyHandle, bufFileToOpen, (ULONG)bytesRead, nullptr, nullptr, 0, bufFileToSave, (ULONG)bytesRead, &amp;bytesToSave, 0));
            m_writeStream.write((CHAR *)bufFileToSave, bytesToSave);
            continue;
        }

        // Reading last block data
        if (0 != BCryptDecrypt(m_keyHandle, bufFileToOpen, (ULONG)bytesRead, nullptr, nullptr, 0, nullptr, 0, &amp;bytesToSave, BCRYPT_BLOCK_PADDING)) {
            N2S_THROW(""BCryptEncrypt::Error receiving the size required for the ciphertext."");
        }

        GetCryptStatus(BCryptDecrypt(m_keyHandle, bufFileToOpen, (ULONG)bytesRead, nullptr, nullptr, 0, bufFileToSave, bytesToSave, &amp;bytesToSave, BCRYPT_BLOCK_PADDING));
        m_writeStream.write((CHAR *)bufFileToSave, bytesToSave);
        return; // Last block done.
    }
}
</code></pre>
","<p>In your <code>AesCrypt::CreateAESProviderAlgo</code> method above, insure that <code>SYMM_KEY_SIZE_SECRET</code> is 32 and that the associated string is also 32 bytes long.</p>

<p>A copy and paste of your function into my test program worked for me when <code>SYMM_KEY_SIZE_SECRET</code> was specified as 32.  It didn't work when I specified a <code>SYMM_KEY_SIZE_SECRET</code> value of 16.</p>

<p>In addition, this algorithm is only supported on Windows 10 and above.</p>

<p>Further info:</p>

<p>XTS is a 2 key variant of AES.  It also requires a Message Block Size (sector size) and a Sector Number.</p>

<p>I used BCryptGenerateSymmetricKey to build the key.  I took an input 'string' of either 32 bytes (2 16 byte keys) or 64 bytes (2 32 byte keys) to generate the keys from the 'string'.  No other values were accepted.</p>

<p>The Message Block Size is set as the BCRYPT_MESSAGE_BLOCK_LENGTH parameter on the key handle.  It does not have to be an integral multiple of the AES block length - this is the difference between XTS and XEX.</p>

<p>The Sector Number is supplied as the IV value in the Encrypt / Decrypt APIs.  For me, only a length of 8 for the IV was accepted.</p>

<p>Working code snippet:</p>

<pre><code>    BCRYPT_ALG_HANDLE m_aesHandle;
    auto status = BCryptOpenAlgorithmProvider(&amp;m_aesHandle, /* BCRYPT_XTS_AES_ALGORITHM */ L""XTS-AES"", nullptr, 0);
    if (0 != status)
    {
        csMsg.Format(TEXT(""\r\nBCryptException::Failed to get provider for BCRYPT_XTS_AES_ALGORITHM. Error: %d""), status);
        csText += csMsg;
    }
    else
    {
        csMsg.Format(TEXT(""\r\nBCryptOpenAlgorithmProvider XTS SUCCESS!""));
        csText += csMsg;

        DWORD cbData = 0;
        DWORD cbKeyObject = 0;
        status = BCryptGetProperty(m_aesHandle, BCRYPT_OBJECT_LENGTH, (PBYTE)&amp;cbKeyObject, sizeof(DWORD), &amp;cbData, 0);
        if (0 != status)
        {
            csMsg.Format(TEXT(""\r\nBCryptGetProperty BCRYPT_OBJECT_LENGTH return error %d (0x%x)""), status, status);
            csText += csMsg;
        }
        else
        {
            csMsg.Format(TEXT(""\r\nBCryptGetProperty BCRYPT_OBJECT_LENGTH returned object length %u""), cbKeyObject);
            csText += csMsg;

            PBYTE m_pbKeyObject = (PBYTE)HeapAlloc(GetProcessHeap(), 0, cbKeyObject);
            if (nullptr == m_pbKeyObject)
            {
                csMsg.Format(TEXT(""\r\nMemory allocation failed.""));
                csText += csMsg;
            }
            else
            {
                BCRYPT_KEY_HANDLE m_keyHandle;
                CHAR String[] = ""1234567890abcdef01234567890abcdef1234567890abcdef01234567890abcdef"";
                static ULONG uStringLen = 32;
                BYTE Dummy[128] = { 0 };

                status = BCryptGenerateSymmetricKey(m_aesHandle, &amp;m_keyHandle, m_pbKeyObject, cbKeyObject, (PUCHAR)String, uStringLen, 0);
                if (0 != status)
                {
                    csMsg.Format(TEXT(""\r\nBCryptGenerateSymmetricKey return with error %d (0x%x)""), status, status);
                    csText += csMsg;
                }
                else
                {
                    csMsg.Format(TEXT(""\r\nBCryptGenerateSymmetricKey SUCCESS!""));
                    csText += csMsg;

                    DWORD cbKey = 0;
                    status = BCryptGetProperty(m_keyHandle, BCRYPT_KEY_LENGTH, (PBYTE)&amp;cbKey, sizeof(DWORD), &amp;cbData, 0);
                    if (0 != status)
                    {
                        csMsg.Format(TEXT(""\r\nBCryptGetProperty BCRYPT_KEY_LENGTH return error %d (0x%x)""), status, status);
                        csText += csMsg;
                    }
                    else
                    {
                        csMsg.Format(TEXT(""\r\nBCryptGetProperty BCRYPT_KEY_LENGTH returned key length %u""), cbKey);
                        csText += csMsg;
                    }

                    DWORD cbBlock = 0;
                    status = BCryptGetProperty(m_aesHandle, BCRYPT_BLOCK_LENGTH, (PBYTE)&amp;cbBlock, sizeof(DWORD), &amp;cbData, 0);
                    if (0 != status)
                    {
                        csMsg.Format(TEXT(""\r\nBCryptGetProperty BCRYPT_BLOCK_LENGTH return error %d (0x%x)""), status, status);
                        csText += csMsg;
                    }
                    else
                    {
                        csMsg.Format(TEXT(""\r\nBCryptGetProperty BCRYPT_BLOCK_LENGTH returned key block length %u""), cbBlock);
                        csText += csMsg;
                    }

                    DWORD cbMessage = 512;
                    status = BCryptSetProperty(m_keyHandle, /* BCRYPT_MESSAGE_BLOCK_LENGTH */ L""MessageBlockLength"", (PBYTE)&amp;cbMessage, sizeof(DWORD), 0);
                    if (0 != status)
                    {
                        csMsg.Format(TEXT(""\r\nBCryptSetProperty BCRYPT_MESSAGE_BLOCK_LENGTH return error %d (0x%x)""), status, status);
                        csText += csMsg;
                    }
                    else
                    {
                        csMsg.Format(TEXT(""\r\nBCryptSetProperty BCRYPT_MESSAGE_BLOCK_LENGTH SUCCESS message length %u""), cbMessage);
                        csText += csMsg;
                    }

                    BYTE PlaintextBuf[512], CipherTextBuf[512], DecryptedTextBuf[512];
                    int i;

                    for (i = 0; i &lt; _countof(PlaintextBuf); i++)
                    {
                        PlaintextBuf[i] = String[i % _countof(String)];
                    }

                    BYTE IV[] = 
                    { 
                         0,  1,  2,  3,  4,  5,  6, 7, 
                         8,  9, 10, 11, 12, 13, 14, 15, 
                        16, 17, 18, 19, 20, 21, 22, 23, 
                        24, 25, 26, 27, 28, 29, 30, 31, 
                    };
                    static DWORD dwIVLen = 8;

                    status = BCryptEncrypt(m_keyHandle, PlaintextBuf, sizeof(PlaintextBuf), nullptr, 
                        IV, dwIVLen, CipherTextBuf, sizeof(CipherTextBuf), &amp;cbData, 0);
                    if (0 != status)
                    {
                        csMsg.Format(TEXT(""\r\nBCryptEncrypt return with error %d (0x%x)""), status, status);
                        csText += csMsg;
                    }
                    else
                    {
                        csMsg.Format(TEXT(""\r\nBCryptEncrypt SUCCESS!""));
                        csText += csMsg;

                        status = BCryptDecrypt(m_keyHandle, CipherTextBuf, sizeof(CipherTextBuf), nullptr,
                            IV, dwIVLen, DecryptedTextBuf, sizeof(DecryptedTextBuf), &amp;cbData, 0);
                        if (0 != status)
                        {
                            csMsg.Format(TEXT(""\r\nBCryptDecrypt return with error %d (0x%x)""), status, status);
                            csText += csMsg;
                        }
                        else
                        {
                            csMsg.Format(TEXT(""\r\nBCryptDecrypt SUCCESS!""));
                            csText += csMsg;

                            bool bGood = true;
                            for (i = 0; i &lt; _countof(PlaintextBuf); i++)
                            {
                                if (PlaintextBuf[i] != DecryptedTextBuf[i])
                                {
                                    bGood = false;
                                    break;
                                }
                            }

                            if (bGood)
                                csMsg.Format(TEXT(""\r\nCrypt Verification SUCCESS!""));
                            else
                                csMsg.Format(TEXT(""\r\nCrypt Verification FAILURE, pos=%u!""), i);
                            csText += csMsg;
                        }
                    }

                    BCryptDestroyKey(m_keyHandle);
                }

                HeapFree(GetProcessHeap(), 0, m_pbKeyObject);
            }
        }

        BCryptCloseAlgorithmProvider(m_aesHandle, 0);
    }
</code></pre>
","225","<windows><encryption-symmetric><cng>","1","1","1","2019-09-06 16:42:54","","4","1","608639","","2019-08-19 09:56:31","2018-07-23 05:32:04",""
"26681564","How to share secret key by different applications","<p>I want to encrypt/decrypt some text using symmetric key cryptography. I am using classes provided by apache shiro library.(org.apache.shiro.crypto.DefaultBlockCipherService)</p>

<p>I have multiple instances of my server running that would be encrypting and decrypting the texts. I want to understand how can I share the secret key across multiple instances of application so that texts encrypted by one can be decrypted by other.</p>

<p>How can I serialize the key to a file and again generate the key from the file?</p>

<p>-Thanks</p>
","<p>The answer I'm giving is more in the deployment/operational space but could solve your issue. I'm looking at <a href=""http://shiro.apache.org/static/1.2.1/apidocs/org/apache/shiro/crypto/CipherService.html#encrypt(byte[],%20byte[])"" rel=""nofollow"">the superclass</a> for reference, which has the encrypt and decrypt implementations containing the key.</p>

<p>You could:</p>

<ol>
<li>Hand all of the instances of the app a string representing that deployment as an environment variable. (Maybe its the revision number deployed or hashed date or something).</li>
<li>Develop your application to consume and hash this value using an algorithm of your choice at startup. This is your key that's made available as a singleton to your code which encrypts/decrypts messages.</li>
<li>Ensure your deployment mechanism (whether its you manually, or some code) gives all of the instances the same value. (i.e. choose something consistent to the deployment or code deployed)</li>
</ol>

<p>This approach ensures that the actual key is obfuscated by your code (it won't be the ENV variable ver-batim) and that you can rotate it often to keep it secure.</p>

<p>Hope thats what you were looking for.</p>
","224","<java><encryption><encryption-symmetric>","0","0","1","2014-10-31 20:09:48","","0","0","1134714","","2014-10-31 20:09:48","2014-10-31 18:53:03",""
"43194179","Symmetric encryption - is it insecure to use one symmetric key to encrypt another or do I need to use asymmetric keys","<p>I'm trying to add a hybrid encryption scheme to my PHP application, and by ""hybrid"" I mean that each record in the database is encrypted by its own unique symmetric key and each symmetric key is encrypted by a shared private key not stored in the database. The symmetric keys are 256 bit AES keys and the private key is a 2048 bit RSA key.</p>

<p>The hybrid encryption scheme works but decrypting the symmetric keys is introducing a bottleneck into the application - decrypting one key is fine, but if I need to retrieve 100 records from the database and decrypt a field in them the script execution time is becoming a real issue because of the overhead decrypting the symmetric key adds. My unscientific tests using the speed tool in OpenSSL suggest that going from a 1024 bit RSA key to a 2048 RSA key is resulting in a decryption time seven times longer on my machine.</p>

<p>Is there a good reason why I can't just use a shared symmetric key (stored securely) to encrypt the symmetric keys for each record? I'm not entirely clear on what the benefit of using an asymmetric key scheme is. I understand that the RSA key can't be used to encrypt large amounts of data (which is why I'm using a symmetric key to do that) but is it the case that a symmetric key shouldn't be used to protect a small amount of data i.e. a 256 bit AES key?</p>

<p>Thanks in advance for any help or guidance!</p>
","<p>The irony of your question is that the use of a <a href=""https://infoscience.epfl.ch/record/164526/files/NPDF-22.pdf"" rel=""nofollow noreferrer"">2048-bit RSA key to encrypt a 256-bit AES key actually degrades the security</a> -- see Table 1 (the difficulty to break an 88-bit symmetric key is about the same as the difficulty to break a 2054-bit RSA key)!</p>

<p>The benefit of public key cryptography for an application like this is when the decryption happens in an isolated place than the encryption.  However, if they are both happening in the same place, then you are only making things worse by bringing in RSA.  Instead, just stick with the AES.</p>
","222","<encryption><encryption-symmetric>","0","1","1","2017-04-03 22:02:09","43195065","6","","1553177","","2017-04-03 21:20:01","2017-04-03 21:00:43","2017-04-04 11:01:52"
"28845739","C# FromBase64String fail due to unknown UNICODE","<p>I have an encrypted database in which the strings are values like the below:
ùœ¢Qa³•ù¼?-pJ´’ˆò»Æ8-skYIÞµ§¬†Œ‚„Šç </p>

<p>ù¢=~Òñ€Ï?-pJ´’ˆò»Æ8-skYIÞµ§¬†Œ‚„Šç </p>

<p>îŸ¯XwÚûùÖP^opJ´’ˆò»Æ8-skYIÞµ§¬†Œ‚„Šç </p>

<p>ö‘±_|Çúùß^_f9´’ˆò»Æ8-skYIÞµ§¬†Œ‚„Šç </p>

<p>I'm trying different ways to dencrypt the information (it's a simmetric encryption and I have the key, but I don't know the algorithm, more detail here <a href=""https://stackoverflow.com/questions/28823726/how-to-decrypt-a-string-encrypted-by-v-foxpro/28834642#28834642"">How to decrypt a string encrypted by V FoxPro</a>)</p>

<p>When I tried different ways to dencrypt using C#.NET in an step I get àn error saying that ""the string has a non-base64 character"" in the following line:</p>

<pre><code>Convert.FromBase64String(input)
</code></pre>

<p>Where input is a string similar to the one I share above.</p>

<p>How Can I receive an string like that from DB in order to work with that in C#?</p>
","<p>I normally use something like this: </p>

<pre><code>public static class EncryptDecryptString
{
    public static string Encrypt(string input, string key)
    {
        byte[] inputArray = UTF8Encoding.UTF8.GetBytes(input);
        TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider();
        tripleDES.Key = UTF8Encoding.UTF8.GetBytes(key);
        tripleDES.Mode = CipherMode.ECB;
        tripleDES.Padding = PaddingMode.PKCS7;
        ICryptoTransform cTransform = tripleDES.CreateEncryptor();
        byte[] resultArray = cTransform.TransformFinalBlock(inputArray, 0, inputArray.Length);
        tripleDES.Clear();
        return Convert.ToBase64String(resultArray, 0, resultArray.Length);
    }

    public static string Decrypt(string input, string key)
    {
        byte[] inputArray = Convert.FromBase64String(input);
        TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider();
        tripleDES.Key = UTF8Encoding.UTF8.GetBytes(key);
        tripleDES.Mode = CipherMode.ECB;
        tripleDES.Padding = PaddingMode.PKCS7;
        ICryptoTransform cTransform = tripleDES.CreateDecryptor();
        byte[] resultArray = cTransform.TransformFinalBlock(inputArray, 0, inputArray.Length);
        tripleDES.Clear();
        return UTF8Encoding.UTF8.GetString(resultArray);
    }

}
</code></pre>
","221","<c#><encryption><utf-8><decode><encryption-symmetric>","-3","0","1","2015-03-04 03:32:22","","4","","-1","","2017-05-23 12:12:52","2015-03-04 02:35:12",""
"51400377","PBEWITHSHA256AND256BITAES-CBC-BC clarification","<p>We are using PBEWITHSHA256AND256BITAES-CBC-BC algorithm for encrypting data.</p>

<ol>
<li><p>What is the role of SHA-256 here?</p></li>
<li><p>Most of the forums states that PBKDF2 is a key derivation function? Does that use any algorithm internally to convert digest the plain text? </p></li>
</ol>
","","218","<aes><sha><encryption-symmetric><jasypt><java-security>","0","","0","2018-07-18 11:03:16","","3","","","","","2018-07-18 11:03:16",""
"30543898","Why is it impossible to implement an ""infinite"" one time pad algorithm?","<p>I've done some research into this, but I'm still not sure why this cannot be implemented. Provided we share an initial OTP, possibly via USB or some other physically secure method, surely we can include the next one in the messages that follow.</p>

<p>[Edit: More specifically, if I were to take a pad of double length, splitting it into x and y. Then using x to encrypt the message, and using y twice to encrypt the next pad, would that be insecure?]</p>
","<p>You have to pair each bit of message with a same size bit of OTP. There's a limited amount of OTP. </p>

<p>If you pair up all of the OTP bits with bits for the next OTP...</p>

<pre><code>a b c d e ...
q w e r t ...
</code></pre>

<p>There's no room for a message. And if you keep spending your OTP transferring another OTP, there never will be room for a message.</p>

<p>You can't compress the OTP, because the strength of the OTP is that it's completely random - that's what makes it impossible for codebreakers, because there's no pattern to latch onto.</p>

<p>Compression is a technology that works by finding patterns and replacing them with shorter ""that large repetitive block goes here and here and there"" signals - and by definition there are no patterns in complete randomness, so OTPs are not compressible.</p>

<p>If you can compress it a bit, you could do this but it's not right to describe it as OTP anymore, it's weak - and also massively wasteful of bandwidth. If you can compress it a lot, throw your random number generator away it's terrible.</p>

<hr>

<p>Quick test demonstration of concept on a linux machine:</p>

<pre><code>$ dd if=/dev/urandom of=/tmp/test count=10k
    -&gt; 5Mb file of randomness

$ bzip2 /tmp/test 
    -&gt; 5.1Mb file
$ gzip /tmp/test
    -&gt; 5.1Mb file
</code></pre>

<p>Compressing a pad makes it bigger, by adding all the bzip/gzip file format information and doing nothing else.</p>
","215","<encryption><encryption-symmetric>","1","4","2","2016-03-17 18:24:59","30544066","4","","2387653","","2015-05-30 09:38:08","2015-05-30 08:14:31",""
"30543898","Why is it impossible to implement an ""infinite"" one time pad algorithm?","<p>I've done some research into this, but I'm still not sure why this cannot be implemented. Provided we share an initial OTP, possibly via USB or some other physically secure method, surely we can include the next one in the messages that follow.</p>

<p>[Edit: More specifically, if I were to take a pad of double length, splitting it into x and y. Then using x to encrypt the message, and using y twice to encrypt the next pad, would that be insecure?]</p>
","<p>What makes a One-Time Pad strong is, in addition to the lack of a pattern, the fact that there is no way to tell that the key used was the correct key. A message could be decrypted to reveal some ""take over the world"" scenario, but literally every message encrypted with a key of that exact length has a key that reveals that exact same message, word for word. This means you could have the actual decrypted message and the correct key, but it would be impossible to know that this is the case, and because literally any message (and I do mean literally) of that length can be a result. Even rubber-hose-decryption won't work. Even if the person being ""persuaded"" gives the correct key, there's no way to be sure. It's even common practice for people to possess fake keys that decrypt messages to reveal a message that isn't what an investigator is looking for, but would definitely be something even a completely innocent person would hide. A OTP hiding confidential information could, for instance, have a fake key that reveals someone bad-mouthing their commanding officer.</p>
","215","<encryption><encryption-symmetric>","1","0","2","2016-03-17 18:24:59","30544066","4","","2387653","","2015-05-30 09:38:08","2015-05-30 08:14:31",""
"35661789","BadPaddingException and some files stuck at 99%","<p>I've tried to gather all possible information about Encryption/Decryption from here. Tinkered with it, some success and failures. <br>
But now I've applied the code and its hit and a miss too. Some files (exe or msi's) are working but they still gives error about BadPaddingException. Moreover, some other media files like (mp4, mkv etc) are stuck at 99% and doesn't go beyond that, although they r fully received (just some minor bytes difference but <strong>Size on Disk</strong> always matches).<br><br>
I just want some help to get rid of these both problems. The files r transfering from 1 PC to another via socket programming.<br>
<strong>Server: (Edited)</strong> </p>

<pre><code>    DataInputStream dis = new DataInputStream(msock.getInputStream());
    DataOutputStream dos = new DataOutputStream(msock.getOutputStream());

    String file2dl = dis.readLine(); //2
    File file = new File(sharedDirectory.toString() + ""\\"" + file2dl);
    dos.writeLong(file.length()); //3+

    //Get file name without extension.
    String fileName = Files.getNameWithoutExtension(file2dl);

    //AES-128 bit key initialization.
    byte[] keyvalue = ""AES128BitPasswd"".getBytes();
    SecretKey key = new SecretKeySpec(keyvalue, ""AES"");

    //Initialize the Cipher.
    Cipher encCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    encCipher.init(Cipher.ENCRYPT_MODE, key);

    //Get the IV from cipher.
    IvParameterSpec spec = null;
    try {
        spec = encCipher.getParameters().getParameterSpec(IvParameterSpec.class);
    } catch (InvalidParameterSpecException ex) {
        Logger.getLogger(PeersController.class.getName()).log(Level.SEVERE, null, ex);
    }

    byte[] iv = spec.getIV();

    dos.write(iv, 0, iv.length);
    File tempDir = new File(tempDirectory.toString());
    //Encryption Mechanism.
        try (FileInputStream fis = new FileInputStream(file)) {
            try (CipherOutputStream cos = new CipherOutputStream(dos, encCipher);
                    FileInputStream stream = new FileInputStream(tempDir + ""\\"" + fileName + "".encr"")) {
                int read, r;
                byte[] buffer = new byte[1024 * 1024];
                while ((read = fis.read(buffer)) != -1) {
                    cos.write(buffer, 0, read);
                }
        }
    }
 }
</code></pre>

<p><br>
<strong>Client:</strong> </p>

<pre><code> long len;
 int count = 0;
 int dflag = 0;
 String size;
 dos.writeBytes(""Download\r\n""); //1+
 dos.writeBytes(filename + ""\r\n""); //2+
 System.out.println(""File to fetch: -&gt; "" + filename);
 len = dis.readLong(); //3
 System.out.println(""Size of file: -&gt; "" + len);

//Get file name without Extension.
String fileName = Files.getNameWithoutExtension(filename);

//Get Initialization Vector from Encryption Cypher.
byte[] iv = new byte[16];
int j = dis.read(iv, 0, iv.length);

final File encrypted = new File(sharedDirectory.toString() + ""\\"" + fileName + "".encr"");
final File decrypted = new File(sharedDirectory.toString() + ""\\"" + filename);
try (FileOutputStream fos = new FileOutputStream(encrypted)) {
    byte[] b = new byte[1024 * 1024];
    while (fetching) {
        int r = dis.read(b, 0, b.length); //4
        count = count + r;
        double p = (double) count / len;
        double per = new BigDecimal(p).setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue();
        fos.write(b, 0, r);
        System.out.println(""Size Appending: -&gt; "" + count);
        System.out.println(""Percentage: -&gt;"" + per);
        Platform.runLater(() -&gt; {
            pBar.setProgress(per);
        });
        if (count &gt;= len) {
         dflag = 1;
         break;
        }
    }
}
</code></pre>

<p><br> <strong>If encrypted data is fully received</strong></p>

<pre><code>if(dflag == 1) {
     //AES-128 bit key initialization.
     System.out.println(""File completely received"");
     byte[] keyvalue = ""AES128PeerBuLLet"".getBytes();
     Key key = new SecretKeySpec(keyvalue, ""AES"");

     //Initialization Vector initialized
     IvParameterSpec ivParameterSpec = null;

     //Cipher Initialization.
     Cipher decCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
      try {
           decCipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
     } catch (InvalidAlgorithmParameterException ex) {
                        Logger.getLogger(PeersController.class.getName()).log(Level.SEVERE, null, ex);
      }
      System.out.println(decCipher.getProvider().getInfo());

      //Decryption Mechanism.
      try (FileOutputStream stream = new FileOutputStream(decrypted)) {
             try (FileInputStream fis = new FileInputStream(encrypted)) {
                    try (CipherInputStream cis = new CipherInputStream(fis, decCipher)) {
                           int read, i = 0;
                           byte[] buffer = new byte[(1024 * 1024) + 16];
                           while ((read = cis.read(buffer)) != -1) {
                                    stream.write(buffer, 0, read);
                                    i = i + read;
                                    double d = (double) i / len;
                                    double progress = new BigDecimal(d).setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
                                    Platform.runLater(() -&gt; {
                                        pBar.setProgress(progress);
                                        progressText.setText(""Decrypting.."");
                                    });
                                }
                            } catch (Exception e) {
                                System.out.println(e.getMessage());
                            }
                        }
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
        }
</code></pre>

<p>Any input is highly appreciated. Thank You.</p>

<p><strong>Edit 1:</strong> Added the link to the sizes of encrypted and decrypted file received via stream. <a href=""https://dl.dropboxusercontent.com/u/9747708/Images/Capture1.JPG"" rel=""nofollow noreferrer"">Dropbox Link</a>
<br><br><strong>Edit 2:</strong> So finally the problem is solved with the help of three members who participated in helping me to the fullest. I was reviewing other solutions to my problem and I encounter with <a href=""https://stackoverflow.com/questions/31474283/aes-file-decrypting-given-final-block-not-properly-padded?rq=1"">this</a> solution which helped me to think deep bout the actual scenario happening in the background. Thanks to <strong>Artjom B.</strong> for his referral solution and <strong>@zaph &amp; @jtahlborn</strong> for clearing my false assumptions bout padding and Input/Output streams.</p>
","<p>You can't use FileInputStream to read a file which you are currently writing.  It's not built to read an in-progress file.</p>

<p>It looks like you are trying to write the encrypted stream to <code>dos</code> (you don't include it's definition in the server code).  If so, you should be using that as the underlying stream for the CipherOutputStream.</p>

<p>Likewise, in the client, you try the same thing.  If you want to write the file to disk first, then write the entire file to disk, then decrypt.  if you want to stream decrypt, then wrap the CipherInputStream around the socket InputStream (presumably <code>dis</code>?).</p>

<p>Additionally, you don't show where you get <code>len</code> from on the client, but i'm assuming it is the length of the <em>original</em> data?  if so, then your progress computation is incorrect because the length of the encrypted data will usually be different from the length of the original data.</p>
","212","<java><javafx><aes><encryption-symmetric><badpaddingexception>","2","1","2","2016-02-27 20:49:34","35670112","7","2","-1","","2017-05-23 12:23:25","2016-02-26 21:09:15",""
"35661789","BadPaddingException and some files stuck at 99%","<p>I've tried to gather all possible information about Encryption/Decryption from here. Tinkered with it, some success and failures. <br>
But now I've applied the code and its hit and a miss too. Some files (exe or msi's) are working but they still gives error about BadPaddingException. Moreover, some other media files like (mp4, mkv etc) are stuck at 99% and doesn't go beyond that, although they r fully received (just some minor bytes difference but <strong>Size on Disk</strong> always matches).<br><br>
I just want some help to get rid of these both problems. The files r transfering from 1 PC to another via socket programming.<br>
<strong>Server: (Edited)</strong> </p>

<pre><code>    DataInputStream dis = new DataInputStream(msock.getInputStream());
    DataOutputStream dos = new DataOutputStream(msock.getOutputStream());

    String file2dl = dis.readLine(); //2
    File file = new File(sharedDirectory.toString() + ""\\"" + file2dl);
    dos.writeLong(file.length()); //3+

    //Get file name without extension.
    String fileName = Files.getNameWithoutExtension(file2dl);

    //AES-128 bit key initialization.
    byte[] keyvalue = ""AES128BitPasswd"".getBytes();
    SecretKey key = new SecretKeySpec(keyvalue, ""AES"");

    //Initialize the Cipher.
    Cipher encCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    encCipher.init(Cipher.ENCRYPT_MODE, key);

    //Get the IV from cipher.
    IvParameterSpec spec = null;
    try {
        spec = encCipher.getParameters().getParameterSpec(IvParameterSpec.class);
    } catch (InvalidParameterSpecException ex) {
        Logger.getLogger(PeersController.class.getName()).log(Level.SEVERE, null, ex);
    }

    byte[] iv = spec.getIV();

    dos.write(iv, 0, iv.length);
    File tempDir = new File(tempDirectory.toString());
    //Encryption Mechanism.
        try (FileInputStream fis = new FileInputStream(file)) {
            try (CipherOutputStream cos = new CipherOutputStream(dos, encCipher);
                    FileInputStream stream = new FileInputStream(tempDir + ""\\"" + fileName + "".encr"")) {
                int read, r;
                byte[] buffer = new byte[1024 * 1024];
                while ((read = fis.read(buffer)) != -1) {
                    cos.write(buffer, 0, read);
                }
        }
    }
 }
</code></pre>

<p><br>
<strong>Client:</strong> </p>

<pre><code> long len;
 int count = 0;
 int dflag = 0;
 String size;
 dos.writeBytes(""Download\r\n""); //1+
 dos.writeBytes(filename + ""\r\n""); //2+
 System.out.println(""File to fetch: -&gt; "" + filename);
 len = dis.readLong(); //3
 System.out.println(""Size of file: -&gt; "" + len);

//Get file name without Extension.
String fileName = Files.getNameWithoutExtension(filename);

//Get Initialization Vector from Encryption Cypher.
byte[] iv = new byte[16];
int j = dis.read(iv, 0, iv.length);

final File encrypted = new File(sharedDirectory.toString() + ""\\"" + fileName + "".encr"");
final File decrypted = new File(sharedDirectory.toString() + ""\\"" + filename);
try (FileOutputStream fos = new FileOutputStream(encrypted)) {
    byte[] b = new byte[1024 * 1024];
    while (fetching) {
        int r = dis.read(b, 0, b.length); //4
        count = count + r;
        double p = (double) count / len;
        double per = new BigDecimal(p).setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue();
        fos.write(b, 0, r);
        System.out.println(""Size Appending: -&gt; "" + count);
        System.out.println(""Percentage: -&gt;"" + per);
        Platform.runLater(() -&gt; {
            pBar.setProgress(per);
        });
        if (count &gt;= len) {
         dflag = 1;
         break;
        }
    }
}
</code></pre>

<p><br> <strong>If encrypted data is fully received</strong></p>

<pre><code>if(dflag == 1) {
     //AES-128 bit key initialization.
     System.out.println(""File completely received"");
     byte[] keyvalue = ""AES128PeerBuLLet"".getBytes();
     Key key = new SecretKeySpec(keyvalue, ""AES"");

     //Initialization Vector initialized
     IvParameterSpec ivParameterSpec = null;

     //Cipher Initialization.
     Cipher decCipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
      try {
           decCipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(iv));
     } catch (InvalidAlgorithmParameterException ex) {
                        Logger.getLogger(PeersController.class.getName()).log(Level.SEVERE, null, ex);
      }
      System.out.println(decCipher.getProvider().getInfo());

      //Decryption Mechanism.
      try (FileOutputStream stream = new FileOutputStream(decrypted)) {
             try (FileInputStream fis = new FileInputStream(encrypted)) {
                    try (CipherInputStream cis = new CipherInputStream(fis, decCipher)) {
                           int read, i = 0;
                           byte[] buffer = new byte[(1024 * 1024) + 16];
                           while ((read = cis.read(buffer)) != -1) {
                                    stream.write(buffer, 0, read);
                                    i = i + read;
                                    double d = (double) i / len;
                                    double progress = new BigDecimal(d).setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();
                                    Platform.runLater(() -&gt; {
                                        pBar.setProgress(progress);
                                        progressText.setText(""Decrypting.."");
                                    });
                                }
                            } catch (Exception e) {
                                System.out.println(e.getMessage());
                            }
                        }
                    } catch (Exception e) {
                        System.out.println(e.getMessage());
                    }
        }
</code></pre>

<p>Any input is highly appreciated. Thank You.</p>

<p><strong>Edit 1:</strong> Added the link to the sizes of encrypted and decrypted file received via stream. <a href=""https://dl.dropboxusercontent.com/u/9747708/Images/Capture1.JPG"" rel=""nofollow noreferrer"">Dropbox Link</a>
<br><br><strong>Edit 2:</strong> So finally the problem is solved with the help of three members who participated in helping me to the fullest. I was reviewing other solutions to my problem and I encounter with <a href=""https://stackoverflow.com/questions/31474283/aes-file-decrypting-given-final-block-not-properly-padded?rq=1"">this</a> solution which helped me to think deep bout the actual scenario happening in the background. Thanks to <strong>Artjom B.</strong> for his referral solution and <strong>@zaph &amp; @jtahlborn</strong> for clearing my false assumptions bout padding and Input/Output streams.</p>
","<p>When using padding, PKCS#5 or PKCS#7, the encrypted output will be larger, up to and including one block size. See <a href=""https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7"" rel=""nofollow"">PKCS#7</a>. The padding is removed after decryption.</p>

<p>The encrypted data will be longer so that must be accounted for. How depends on how the output is being handled. If it is going to a pre-allocated area such as a memory buffer the buffer must be allocated one block-size (16-bytes for AES) larger. If streaming usually just make sure all encrypted bytes are sent, n=it just the length of the input. All of this is per-implementation and system/language dependent. </p>

<p>The padding bytes are dynamically created by the encryption method so the input does not need to be altered. This assumes that the encryption method is adding the padding and the decryption method is removing the padding.</p>

<p>Example 1: If you have 1024-bytes of data the encrypted output will be 1040-bytes. On decryption the input data will be 1040-bytes and the output decrypted data will be 1024-bytes.</p>

<p>Example 2: If you have 1020-bytes of data the encrypted output will be 1024-bytes. On decryption the input data will be 1024-bytes and the output decrypted data will be 1020-bytes.</p>
","212","<java><javafx><aes><encryption-symmetric><badpaddingexception>","2","2","2","2016-02-27 20:49:34","35670112","7","2","-1","","2017-05-23 12:23:25","2016-02-26 21:09:15",""
"50106874","ChaCha20 without authentication in either libsodium or OpenSSL","<p>I'm trying to use ChaCha20 without any authentication. I don't think I can do it in libsodium <a href=""https://download.libsodium.org/doc/secret-key_cryptography/original_chacha20-poly1305_construction.html"" rel=""nofollow noreferrer"">https://download.libsodium.org/doc/secret-key_cryptography/original_chacha20-poly1305_construction.html</a></p>

<p>I looked up OpenSSL's API <a href=""https://github.com/openssl/openssl/blob/master/crypto/include/internal/chacha.h"" rel=""nofollow noreferrer"">https://github.com/openssl/openssl/blob/master/crypto/include/internal/chacha.h</a>
and this seems to allow it without any authentication. However, there is no encrypt or decrypt function, only </p>

<pre><code>void ChaCha20_ctr32(unsigned char *out, const unsigned char *inp,
                    size_t len, const unsigned int key[8],
                    const unsigned int counter[4]);
</code></pre>

<p>I'm confused about what this does, does it encrypt or decrypt?</p>
","<p>The OpenSSL header file you are pointing at is an internal header file and does not form part of the public API. What you need to use is the EVP API using the EVP_chacha20() cipher.</p>

<p>See this man page for the various functions:
<a href=""https://www.openssl.org/docs/man1.1.0/crypto/EVP_EncryptInit_ex.html"" rel=""nofollow noreferrer"">https://www.openssl.org/docs/man1.1.0/crypto/EVP_EncryptInit_ex.html</a></p>

<p>There is some sample code here:
<a href=""https://wiki.openssl.org/index.php/EVP_Symmetric_Encryption_and_Decryption"" rel=""nofollow noreferrer"">https://wiki.openssl.org/index.php/EVP_Symmetric_Encryption_and_Decryption</a></p>
","207","<openssl><encryption-symmetric><libsodium>","0","1","1","2018-04-30 19:40:23","50107134","0","","","","","2018-04-30 19:21:51",""
"29564059","AES Encryption algorithm output string length (String) error?","<pre><code> public static String encryptKey(String key,String text) throws CryptoException 
    {
        String key1=null;
        try {

            System.out.println(""input parameters length  ""+key.length()+ "" "" +text.length());
            System.out.println(""input parameters value ""+key+ "" "" +text);
            Key secretKey = new SecretKeySpec(key.getBytes(), ALGORITHM);
            Cipher cipher = Cipher.getInstance(TRANSFORMATION);

            cipher.init(Cipher.ENCRYPT_MODE, secretKey);             
            byte[] inputBytes=text.getBytes();
           //System.out.println(inputBytes.length);
            byte[] outputBytes = cipher.doFinal(inputBytes);
           // key= WriteArray.bytesToString(outputBytes);  
           key1=outputBytes.toString();


            System.out.println(""output parameters  ""+key1.length()+"" ""+ text.length());
            System.out.println(""output parameters value ""+key1+ "" "" +text);
        } 
</code></pre>

<p>The input and output string length are different. Why does this happen?</p>

<p>Is the problem of conversion string to byte array conversion? The output is shown below.</p>

<pre><code>--------------------------------------
Level 1 Encryption Started
input parameters length  16 16
input parameters value 5iafq1b7d8i4hedu vg322qcfmnjbp3nj
output parameters  11 16
output parameters value [B@35851384 vg322qcfmnjbp3nj
--------------------------------------
Level 2 Encryption Started
input parameters length  16 11
input parameters value tvqfpjpul28ovo5c [B@35851384
output parameters  11 11
output parameters value [B@649d209a [B@35851384
--------------------------------------
</code></pre>
","<p>Do not ever treat encrypted data as a String. It is binary data and almost certainly something bad is happening when you call <code>outputBytes.toString()</code>.</p>

<p>If you must treat the binary data as a string, you should apply a transformation that can deal with binary data and reliably produces a usable string. An example would be base64 encoding.</p>

<p>In your question, you seem to be expecting that the unencrypted text to be the same length as the encrypted bytes converted to a string. There is no reason why this would be true.</p>

<p>You should expect that if you encrypt and then decrypt the encrypted bytes that you get back your original message. However, the size of the encrypted data will almost certainly NOT be the same size.</p>
","207","<java><encryption><aes><encryption-symmetric>","1","0","1","2015-04-10 14:49:53","","1","3","466862","","2015-04-10 14:32:15","2015-04-10 14:30:08",""
"15160714","Java multi-level aes de/encrypting fails","<p>I have been tasked with decrypting a file in Java that has been encrypted using the following criteria:</p>

<p>Encrypting:</p>

<p>`</p>

<pre><code>byte[] masterKey;
    if (Base64.decode(config.getProperty(""encrMasterKey"")) != null) {
        masterKey=aes.decrypt(Base64.decode(config.getProperty(""encrMasterKey"")),""password"");
    } else {
        masterKey = aes.keyGeneration();
        byte[] encrMasterKey = aes.encrypt(masterKey, keyderivation(""password""));
       writeToConfigFile(""encrMasterKey"", Base64.encode(encrMasterKey));
    }
    Cipher cipher = Cipher.getInstance(""AES"");
    SecretKeySpec keySpec = new SecretKeySpec(masterKey, ""AES"");
    cipher.init(Cipher.ENCRYPT_MODE, keySpec);
    byte[] cypherText = aes.encrypt(myJSONString,masterKey);'
</code></pre>

<p>What works:</p>

<ol>
<li>i can encrypt/decrypt with AES, both with byte[] and from password derivated keys(keyderivation(""password""))</li>
<li>i can save and load correctly from the config file. In fact i tested and the generated Base64encoded( masterKey )is the same  as the Base64.encode(aes.decrypt(Base64.decode(config.getProperty(""encrMasterKey"")),""password"")))</li>
</ol>

<p>What doesnt:</p>

<pre><code>    Cipher cipher = Cipher.getInstance(""AES"");
    SecretKeySpec keySpec = new SecretKeySpec(masterKey, ""AES"");
    cipher.init(Cipher.ENCRYPT_MODE, keySpec);
</code></pre>

<p>At cipher.init java throws an illegal key or default parameter error.</p>

<p>I would really appreciate a hint on this one, keeps bugging me for days now and i cant seem to fix it...</p>

<p>Best wishes</p>
","","205","<java><encryption><base64><aes><encryption-symmetric>","0","","0","2013-03-01 15:01:27","","5","2","","","","2013-03-01 15:01:27",""
"31820249","Symmetric Key DecryptByKey returning clear text with '0x' prefix","<p>I am inserting data into a table like this through an SSIS OLEDB command</p>

<pre><code>OPEN SYMMETRIC KEY crypto_key
DECRYPTION BY CERTIFICATE crypto_cert;

insert into tmp_ssis_auth_load_detail values(EncryptByKey(Key_GUID('crypto_key'), ?))

CLOSE SYMMETRIC KEY crypto_key
</code></pre>

<p>When I try to decrypt the data with the following query(in SQL Management Studio)</p>

<pre><code>OPEN SYMMETRIC KEY crypto_key
DECRYPTION BY CERTIFICATE crypto_cert;

select DecryptByKey(account_number) from tmp_ssis_auth_load_detail

CLOSE SYMMETRIC KEY crypto_key
</code></pre>

<p>I get the result as 0x4556808712810676 and when I convert it to varchar I get some garbage value like ""EV€‡v"". The original value I gave the input query was ""4556808712810676"" which is returned with ""0x"" prefix by the decrypt function.</p>

<p>If I run the insert in SQL Management Studio I am able to decrypt it successfully.</p>

<p>What am I doing wrong here?</p>
","<p>The datatype of the column being sent from the previous step was initially ""DT_STR"". Changing it to ""DT_TEXT"" fixed the issue.</p>
","198","<sql-server><encryption-symmetric>","0","0","1","2015-08-05 13:44:05","31834342","0","","46594","","2015-08-04 22:10:47","2015-08-04 22:08:59",""
"9944090","Key storagein a CMOS RAM?","<p>IS it possible to store the KEY (secret KEY for encryption and decryption) in a CMOS RAM for making a key secure from tampering? (I know contents of RAM are lost when our computer is turned off)</p>
","<p>If you can store key in CMOS RAM, why hacker can not read from it? Reading from CMOS is much more simple than writing to it. </p>

<p>It is theoretically possible to store your data into CMOS, but it will be vendor (or even model) dependent. Different BIOSes uses CMOS RAM differently and you can't know what part of RAM is free for usage.</p>

<p>Much better will be use SMART card. They can guarantee that key saved into it <em>never</em> will left card (all cryptography is done inside SMART card). So you once save key into card and then only say 'decrypt (or encrypt) this buffer for me'.</p>

<p><strong>UPD:</strong></p>

<p>There was a long discussion in comments. Summarizing, there are next ways to protect keys:</p>

<ol>
<li><p>Use external secured cryptography module. For example: smart card, HSM. </p></li>
<li><p>Prevent physical access for unauthorized personnel. For example: safe, locking case, alarm on opening case, etc.</p></li>
<li><p>Demand (administratively or programmatically) that access to a device is only can be done by group of personnel, not individuals. For example: two security officers know only his own part of password to access a device.  </p></li>
<li><p>Built system based on a <a href=""http://en.wikipedia.org/wiki/Chain_of_trust"" rel=""nofollow"">Chain of Trust</a>. </p></li>
<li><p>Use <a href=""http://en.wikipedia.org/wiki/Trusted_Platform_Module"" rel=""nofollow"">TPM</a> (Trusted platform module).</p></li>
</ol>
","196","<c><encryption-symmetric><encryption><key-storage>","0","1","1","2012-04-03 10:15:50","","2","","","","","2012-03-30 13:37:53",""
"54506163","Trying to convert private and public keys to String format","<pre><code>import java.security.*;

public class MyKeyGenerator {

    private KeyPairGenerator keyGen;
    private KeyPair pair;
    private PrivateKey privateKey;
    private PublicKey publicKey;
    private Context context;

    public MyKeyGenerator(Context context, int length)throws Exception{
        this.context =context;
        this.keyGen = KeyPairGenerator.getInstance(""RSA"");
        this.keyGen.initialize(length);
    }

    public void createKeys(){
        this.pair = this.keyGen.generateKeyPair();
        this.privateKey = pair.getPrivate();
        this.publicKey = pair.getPublic();
    }

    public PrivateKey getPrivateKey(){
        return this.privateKey;
    }

    public PublicKey getPublicKey(){
        return this.publicKey;
    }

    public  String getPrivateKeyStr(){
        byte b [] = this.getPrivateKey().getEncoded();
          return new String(b));
    }

    public  String getPublicKeyStr(){
        byte b [] = this.getPublicKey().getEncoded();
        return new String(b));
    }


}
</code></pre>

<p>Hello, I have searched SO for how to convert or get the String representation of a public key or private key, most of the answers were very old and only for how to convert  String pubKey =""...."";  into a key.
I tried to generate the keys and get the encoded bytes and I tried to convert the byte to String as my code shows above, but I am not sure if I am doing it in the right way by simply converting the encoded bytes into a String.</p>
","<ol>
<li>The Private/Public Key bytes:
byte[] theBytes = key.getEncoded();</li>
<li>Using new String(theBytes) is not so good, because it uses the default Charset (based on OS). Better is to pass the Charset you want (e.g UTF-8) a be consistent in that.</li>
<li>I would suggest to have a HEX representation of the Private/Public keys . There are multiple ways to convert a byte[] into HEX string ( <a href=""https://stackoverflow.com/questions/2817752/java-code-to-convert-byte-to-hexadecimal"">Java code To convert byte to Hexadecimal</a> ). Having the HEX format makes also the key easier to read in some UI. E.g: AA BB CC 22 24 C1 ..</li>
<li>Other option is Base64 format e.g:  Base64.getEncoder().encodeToString(theBytes). (Java 8)</li>
</ol>
","196","<java><public-key-encryption><encryption-symmetric>","0","2","1","2019-02-03 19:37:58","54506783","0","","6910819","","2019-02-03 18:48:55","2019-02-03 18:33:51",""
"32598697","Porting AES decryption from CryptoJS to Php","<p>I am trying to convert a AES decryption function from JavaScript into PHP script. Ignoring the indentation for easy to read.</p>

<pre><code>var enc = 'EK/tvL3RsjOY1j82ILXv7W10bEU83JeaiBhlLmcZIrk=';

var key = 'FSHcT+sfRO/siok2ooweuA==' ;

var y = CryptoJS.AES.decrypt({ciphertext:     CryptoJS.enc.Base64.parse(enc)}, 
CryptoJS.enc.Base64.parse(key), 
{iv: CryptoJS.enc.Hex.parse(""2323232323232323"")});

var dec = y.toString(CryptoJS.enc.Utf8);
</code></pre>

<p>In the PHP I have tried</p>

<pre><code>$iv = mcrypt_create_iv(16, '2323232323232323'); 

$enc = 'EK/tvL3RsjOY1j82ILXv7W10bEU83JeaiBhlLmcZIrk=';

$key = 'FSHcT+sfRO/siok2ooweuA==' ;

$dec = rtrim((mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $enc, MCRYPT_MODE_CBC, $iv)), ""\0\3"");
</code></pre>

<p>In Javascript decrypting working fine but when I execute the PHP it gives me strange charecters.</p>
","<p>You should use the <code>mcrypt</code> extension (wich is implemented in C), so you don't need to port JS code.</p>

<p><a href=""http://php.net/manual/en/book.mcrypt.php"" rel=""nofollow"">http://php.net/manual/en/book.mcrypt.php</a></p>
","195","<javascript><php><encryption><aes><encryption-symmetric>","1","0","2","2015-12-20 07:03:01","","8","1","2224584","","2015-12-20 07:03:01","2015-09-16 02:20:59",""
"32598697","Porting AES decryption from CryptoJS to Php","<p>I am trying to convert a AES decryption function from JavaScript into PHP script. Ignoring the indentation for easy to read.</p>

<pre><code>var enc = 'EK/tvL3RsjOY1j82ILXv7W10bEU83JeaiBhlLmcZIrk=';

var key = 'FSHcT+sfRO/siok2ooweuA==' ;

var y = CryptoJS.AES.decrypt({ciphertext:     CryptoJS.enc.Base64.parse(enc)}, 
CryptoJS.enc.Base64.parse(key), 
{iv: CryptoJS.enc.Hex.parse(""2323232323232323"")});

var dec = y.toString(CryptoJS.enc.Utf8);
</code></pre>

<p>In the PHP I have tried</p>

<pre><code>$iv = mcrypt_create_iv(16, '2323232323232323'); 

$enc = 'EK/tvL3RsjOY1j82ILXv7W10bEU83JeaiBhlLmcZIrk=';

$key = 'FSHcT+sfRO/siok2ooweuA==' ;

$dec = rtrim((mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $enc, MCRYPT_MODE_CBC, $iv)), ""\0\3"");
</code></pre>

<p>In Javascript decrypting working fine but when I execute the PHP it gives me strange charecters.</p>
","<h3>Warning: This is Weak Cryptography</h3>

<ul>
<li>You're using CBC mode with a constant IV of null bytes (the IV should be randomly generated for each message).</li>
<li>You're <a href=""https://paragonie.com/blog/2015/05/using-encryption-and-authentication-correctly"" rel=""nofollow"">not authenticating your ciphertext</a>.</li>
<li>Naive use of <code>rtrim()</code> exposes your application to <a href=""http://robertheaton.com/2013/07/29/padding-oracle-attack/"" rel=""nofollow"">padding oracle attacks</a>, which wouldn't be a problem if you were following an Encrypt Then MAC construction.</li>
</ul>

<h3>The Actual Bugs in Your Code</h3>

<pre><code>$iv = mcrypt_create_iv(16, '00000000000000000000000000000000'); 
</code></pre>

<p>That's not how this function is meant to be used.</p>

<pre><code>string mcrypt_create_iv(int $length, int $source);
</code></pre>

<p>For example: <code>mcrypt_create_iv(16, MCRYPT_DEV_URANDOM);</code> will generate 16 bytes of random data from <code>/dev/urandom</code>. It looks like you want <code>str_repeat(""\0"", 16)</code> here, but as I said above, this is a horrible idea.</p>

<p>You also didn't <code>base64_decode()</code> the key.</p>

<hr>

<p>I really hope you aren't deploying this code anywhere.</p>

<p>Recommended reading: <a href=""http://www.cryptofails.com/post/75204435608/write-crypto-code-dont-publish-it"" rel=""nofollow"">Write crypto code! Don't publish it!</a> by Talyor Hornby.</p>

<p>Also, if you can <a href=""https://paragonie.com/blog/2015/05/if-you-re-typing-word-mcrypt-into-your-code-you-re-doing-it-wrong"" rel=""nofollow"">avoid using mcrypt</a>, you'll find yourself a lot happier.</p>
","195","<javascript><php><encryption><aes><encryption-symmetric>","1","5","2","2015-12-20 07:03:01","","8","1","2224584","","2015-12-20 07:03:01","2015-09-16 02:20:59",""
"41388352","nodejs aes256 encrypt is different from online aes256 encryption tool","<p>I encrypted word <code>HelloWorld</code> using nodejs-aes256 <a href=""https://www.npmjs.com/package/nodejs-aes256"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/nodejs-aes256</a> with key <code>apple</code> the output was <code>1ivBqj+nVPcHvZjQlx7Di0SoxV49bNpWtog=</code>
then I encrypted same word with same key using online tool <a href=""http://aesencryption.net/"" rel=""nofollow noreferrer"">http://aesencryption.net/</a> the output was <code>LIxrc1buLeLLr9nJxtPhjHSYFVaceqsXiFamWiVWzYI=</code></p>

<p>Whey are they different?</p>
","<p>First, ""apple"" can't be a key for AES-256. It's not long enough. An AES-256 key has to be exactly 256 bits (32 bytes). ""apple"" is, in the likely ways of encoding it, 5. So there's already a problem here. The systems may be padding it out with zeros for you, but you can't rely on that. This isn't what AES keys should look like anyway; they need to be 32 ""effectively random"" bytes; ""apple"" is not ""effectively random.""</p>

<p>The nodejs package indicates that it generates a random IV. That likely means it also encodes the random IV in the output and expects it in the input, and sure enough that's what we see in the code:</p>

<pre><code>ciphertext = Buffer.concat([iv, ciphertext, cipher.final()]);
</code></pre>

<p>Assuming that the source code below the PHP page is actually related to the tool, then they've called this:</p>

<pre><code>$this-&gt;setIV("""");
</code></pre>

<p>which probably translates somewhere into 16 bytes of zeros (which is a very insecure IV).</p>

<p>The shorter answer is that there is absolutely no standard for applying AES or encoding the output. The vast majority of implementations you find (including these two) are very insecure because they assume you know how to add all the pieces they're missing. For example, both of these implementations need an HMAC, since they used CBC mode, but neither includes one, and if you want to hand a string like ""apple"" as the password, you need a key derivation function like PBKDF2 to convert it to a key. (This is how you convert a string like ""apple"" into something ""effectively random."") Any secure implementation will be incompatible with any other secure implementation. There just isn't a widely used standard format that is also secure.</p>

<p>All that said, a secure format should always cause two encryptions to have different resulting cipher texts. The nodejs package does this correctly by including a random IV, and if you ran it multiple times, you would get different results. That's a feature that prevents certain kinds of attacks. So having different results shouldn't be surprising.</p>

<p>If you're looking for an off-the-shelf AES format that includes all the pieces you need, take a look at <a href=""https://github.com/RNCryptor"" rel=""nofollow noreferrer"">RNCryptor</a> or <a href=""https://download.libsodium.org/doc/"" rel=""nofollow noreferrer"">libsodium</a>.</p>
","194","<node.js><aes><encryption-symmetric><aescryptoserviceprovider>","0","4","1","2016-12-29 23:21:32","41388580","1","","","","","2016-12-29 22:57:56",""
"32469648","How many times can AesCryptoServiceProvider.GenerateIV be safely called before exhausting the number of unique IVs?","<p>I am confused. According to the below my IV ""MUST"" be unique for every round of encryption.</p>

<blockquote>
  <p>Properties of an IV depend on the cryptographic scheme used. A basic
  <strong><em>requirement is uniqueness</em></strong>, which means that no IV may be reused under
  the same key. For block ciphers, repeated IV values devolve the
  encryption scheme into electronic codebook mode: equal IV and equal
  plaintext result in equal ciphertext. - <a href=""https://en.wikipedia.org/wiki/Initialization_vector"" rel=""nofollow"">https://en.wikipedia.org/wiki/Initialization_vector</a></p>
</blockquote>

<p>I am using the <strong>.NET AesCryptoServiceProvider class</strong>. I am using <strong>GenerateIV</strong> to generate a new IV and sending that IV along with the cipher text to a remote endpoint which will then decrypt the packet using the IV and privately shared key.</p>

<p>My packet is XML, and thus will always start with the same leading text. (e.g. ""&lt;SomeTag ...&gt;unique_text&lt;/SomeTag&gt;"")</p>

<p>My key might live over thousands of encrypt/decrypt cycles during the five to ten minute life of the key. How many times can I call GenerateIV before I generate the same IV twice? Or phrased another way, how many cycles is GenerateIV good for? Five, ten, hundreds, thousands, millions?</p>

<p>Here is the code in question:</p>

<pre><code>_sessionKeys[_currentSessionKeyId].GenerateIV();
var key = _sessionKeys[_currentSessionKeyId].Key;
var iv = _sessionKeys[_currentSessionKeyId].IV;

ICryptoTransform encryptor = _sessionKeys[_currentSessionKeyId].CreateEncryptor(key,iv);
</code></pre>

<p>It seems that given that the IV generated by AesCryptoServiceProvider.GenerateIV is of finite size, then the number of times it can be called before generating a duplicate IV is also finite. But what is that finite number.</p>
","<p>There is 128 bits (16 bytes) in a IV. According to the Wikipeda page on the <a href=""https://en.wikipedia.org/wiki/Birthday_attack"" rel=""nofollow"">Birthday Attack</a> (the probability you will see a repeated value pulling randomly from a pool) to have a 0.0000000000000001% chance of seeing any number twice you must call the function about 26,000,000,000 times. To get it to be a 1% chance any number is seen twice you must call it 2,600,000,000,000,000,000 times.</p>

<p>This assumes GenerateIV has a ""good"" random number generator that gives a even distribution, which it should have.</p>
","194","<.net><aes><encryption-symmetric><encryption-asymmetric><initialization-vector>","0","2","1","2015-09-09 13:35:51","32472070","3","","497745","","2015-09-09 07:25:07","2015-09-09 01:38:31",""
"12056368","Shibboleth user attribute encryption","<p>How does Shibboleth guarantee that 3rd parties do noet get access to user attributes contained in SAML 2.0 assertion exchanged between IdP and SP?</p>

<p>Is it correct that all user attributes are encrypted when transferred from IdP to SP? Are the user attributes encrypted with a symmetric key which is also included in the assertion but encrypted with the public key of the SP?</p>
","<p>I doubt that Shibboleth does anything to <em>guarantee</em> that user attributes are encrypted. Per the <a href=""https://www.oasis-open.org/committees/download.php/35387/sstc-saml-bindings-errata-2.0-wd-05-diff.pdf"" rel=""nofollow"">SAML 2.0 spec (pdf)</a>:</p>

<blockquote>
  <p>Message confidentiality of both SAML requests and SAML responses is OPTIONAL and depends on the environment of use.</p>
</blockquote>

<p>However, SAML 2.0 <a href=""http://docs.oasis-open.org/security/saml/v2.0/saml-sec-consider-2.0-os.pdf"" rel=""nofollow"">does permit the use of message-level confidentiality guarantees (pdf)</a>, including <a href=""http://www.w3.org/TR/xmlenc-core/"" rel=""nofollow"">XMLEnc</a> and <a href=""http://www.w3.org/TR/xmldsig-core/"" rel=""nofollow"">XMLSig</a> (both of which <a href=""https://wiki.shibboleth.net/confluence/display/SHIB2/IdPXMLSigEnc"" rel=""nofollow"">Shibboleth supports</a>) as well as custom profile or attribute types which may support other modes of message-level confidentiality.</p>
","189","<encryption><encryption-asymmetric><encryption-symmetric><saml-2.0><shibboleth>","0","1","1","2012-08-21 14:25:19","","1","","","","","2012-08-21 13:50:59","2012-08-22 06:01:18"
"34990088","Storing symmetric key for offline usage","<p>I'm making an app that will require a password to be entered before the main app will load. I plan to get the user to create a password when they first run the app and then store the password on the local device and encrypt it using a local symmetric key (which will be generated when the app first runs). This is so someone can't simply read the file where the password is stored.</p>

<p>How can I store the key used securely? Or is there a better way of hiding stored passwords to be used in local verification?</p>

<p>The app is designed for offline usage so I can't add any networking capabilities. </p>
","<p>You can use SharedPreferences in private mode to store the password. It is secure as far as the phone is not rooted but you can use Cryptography techniques to store the password. The approach which I follow to store the passwords locally is to add a SALT to the password while storing.
You can read more about it <a href=""https://crypto.stackexchange.com/questions/1776/can-you-help-me-understand-what-a-cryptographic-salt-is"">here</a></p>
","189","<android><security><encryption><password-protection><encryption-symmetric>","0","0","3","2016-02-02 06:14:18","","0","2","","","","2016-01-25 10:19:33",""
"34990088","Storing symmetric key for offline usage","<p>I'm making an app that will require a password to be entered before the main app will load. I plan to get the user to create a password when they first run the app and then store the password on the local device and encrypt it using a local symmetric key (which will be generated when the app first runs). This is so someone can't simply read the file where the password is stored.</p>

<p>How can I store the key used securely? Or is there a better way of hiding stored passwords to be used in local verification?</p>

<p>The app is designed for offline usage so I can't add any networking capabilities. </p>
","<p>A secure way for passwords - hashing. A hash can never be decrypted as the password is lost during the hashing process. I'm using MD5 hashing process in the following code -</p>

<pre><code>public String StringToMD5(String s) {
 try {
     // Create MD5 Hash
     MessageDigest digest = java.security.MessageDigest.getInstance(""MD5"");
     digest.update(s.getBytes());
     byte messageDigest[] = digest.digest();

    // Create Hex String
     StringBuffer hexString = new StringBuffer();
     for (int i=0; i&lt;messageDigest.length; i++)
            M hexString.append(Integer.toHexString(0xFF &amp; messageDigest[i]));
    return hexString.toString();

} catch (NoSuchAlgorithmException e) {
    e.printStackTrace();
}
return """";
}
</code></pre>

<p>Use this code to hash your password and then store it using <code>Private SharedPreferences</code>. When the user enters the password again, hash it again and check if it is the same as previous hash. If the hashes match, then access is granted.</p>
","189","<android><security><encryption><password-protection><encryption-symmetric>","0","0","3","2016-02-02 06:14:18","","0","2","","","","2016-01-25 10:19:33",""
"34990088","Storing symmetric key for offline usage","<p>I'm making an app that will require a password to be entered before the main app will load. I plan to get the user to create a password when they first run the app and then store the password on the local device and encrypt it using a local symmetric key (which will be generated when the app first runs). This is so someone can't simply read the file where the password is stored.</p>

<p>How can I store the key used securely? Or is there a better way of hiding stored passwords to be used in local verification?</p>

<p>The app is designed for offline usage so I can't add any networking capabilities. </p>
","<p>Please start by reading Thomas Pornin's <a href=""https://security.stackexchange.com/a/31846/39623"">canonical answer to How to securely hash passwords?</a>.</p>

<p>PBKDF2 options are listed in the question <a href=""https://stackoverflow.com/q/8091519/1967612"">PBKDF2 function in Android</a>, but include a native SecretKeyFactory method as well as Spongycastle, bouncycastle, rtner.de, etc.</p>

<p>Long, cryptographically random per-password salt is required (make room for more than one password for future growth!).</p>

<p>Never ask PBKDF2 for more key length than the native function supports - that 64 bytes for PBKDF2-HMAC-SHA-512, and 20 bytes for PBKDF2-HMAC-SHA-1.</p>

<p>Always use as high an iteration count as your users can stand.  Even for android devices, for a single user on their own device, done only once at application start, that's in the hundreds of thousands or more for PBKDF2-HMAC-SHA-1 and the tens to hundreds of thousands for PBKDF2-HMAC-SHA-512.</p>

<p>Note that PBKDF2's primary use is in creating encryption keys - you can use the same password entered to generate the encryption key for files you encrypt using AES (NOT in ECB mode); just use a different salt and a different number of iterations.  If you're only doing that, then you don't even need the password hash; simply try decrypting the file with the key generated and a stored salt and number of iterations - if it works, it was the right password.  If it fails, it wasn't.</p>
","189","<android><security><encryption><password-protection><encryption-symmetric>","0","0","3","2016-02-02 06:14:18","","0","2","","","","2016-01-25 10:19:33",""
"13351241","Is it secure to use the same key for encrypting multiple fields with AES 256 symmetric encryption?","<p>I have an AES256 key that I use for encrypting SSNs in my application.  Now I need to encrypt the security answer.  </p>

<p>Is it advisable to use different keys to encrypt each field or can I use the same key to encrypt multiple fields? </p>
","<p>We have one key for most encrypted fields and another for a few extra sensitive fields.  The thought behind it is if someone gets the common key, they still would not have access to the most sensitive information.</p>

<p>I have no idea how this fits in ""best practices"", but it has worked well for us so far.</p>

<p>Regardless of what you do, someone determined to hack it will find a way.  You just need to find the balance and level required for the type of information you are storing.  When it comes to SSN and other personal information like that, it is hard to be ""overly secure"".</p>
","188","<encryption><aes><encryption-symmetric>","1","0","2","2013-02-09 15:53:19","","1","","445517","","2013-02-09 15:53:19","2012-11-12 20:41:36",""
"13351241","Is it secure to use the same key for encrypting multiple fields with AES 256 symmetric encryption?","<p>I have an AES256 key that I use for encrypting SSNs in my application.  Now I need to encrypt the security answer.  </p>

<p>Is it advisable to use different keys to encrypt each field or can I use the same key to encrypt multiple fields? </p>
","<p>As long as you keep to best practices it is possible to use the same key for encrypting multiple fields. With best practices I mean that you need to use a random IV if you are using AES CBC encryption.</p>

<p>Note that the key size of AES is not that important. Having a good key infrastructure, good server security and a cryptographically secure protocol is much more important. AES-128 or even triple DES is almost infinitely safer than AES-256 if the latter is deployed improperly.</p>
","188","<encryption><aes><encryption-symmetric>","1","0","2","2013-02-09 15:53:19","","1","","445517","","2013-02-09 15:53:19","2012-11-12 20:41:36",""
"11708105","GPG Symmetric - Database","<p>I am a beginner in GNU PGP security stuff. I am trying to learn a few things.</p>

<p>For example, if I take the Symmetric key for a particular file <code>blah</code></p>

<pre><code>gpg --symmetric --no-use-agent ""$blah""
</code></pre>

<p>it now tells me to enter  <code>secret key/password</code>. After entering that , it generates a file named <code>blah.gpg</code>.</p>

<p>But, is there a place where gpg stores all the keys? If yes, where , can I access the DB it via <code>sqlite3</code> and can be ported to the server end.</p>

<p>Thanks!</p>
","<p>Symmetric keys are not stored. You give them and the program applies and forgets them. keys for asymmetric ciphers are stored in ~/.gnupg/ by default. And I don't think they are stored using sqlite3.</p>
","187","<shell><gnupg><encryption-symmetric>","0","1","1","2012-07-29 14:52:49","","0","","","","","2012-07-29 09:23:04","2012-07-30 14:58:23"
"21311460","How is it possible to break encrypted public key (RSA) using password as symmetric key?","<p>Given public key (RSA) encrypted with symmetric key (password) and if password is weak, then how is it possible to find password using given encrypted public key only.</p>
","","185","<public-key><encryption-symmetric><cryptanalysis>","0","","0","2014-01-23 14:48:13","","3","","","","","2014-01-23 14:48:13",""
"30852316","Android encryption and decryption of text fails","<p>I try to encrypt some text (here it is named code) and decrypt it again.
For this i use a 4 digit Pin which is salted.</p>

<p>After this the text is encrypted, also again some Base64 decoding, so i can safely output the String again.</p>

<p>As i understand i have to base64.decode it and then again decrypt it.</p>

<p>But i don't get my encrypted text correctly decrypted back. Just some different text. ( something like this[B@3ceB...)</p>

<p>It is just a small project nothing serious. Also it is my second android app, so some good examples would be great.</p>

<pre><code>String pinstr = new String();
pinstr = ""5555"";
try {
    EncryptDecrypt encryptor = new EncryptDecrypt(pinstr);
    //encryptor.encrypt(code);
    String encrypted = new String();
    encrypted = encryptor.encrypt(code);

    String decrypted = new String();
    decrypted = encryptor.decrypt(encrypted);

    Toast.makeText(MainActivity.this, decrypted, Toast.LENGTH_SHORT).show();
} catch (InvalidKeyException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
} catch (NoSuchAlgorithmException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
} catch (UnsupportedEncodingException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
} catch (NoSuchPaddingException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
} catch (IllegalBlockSizeException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
} catch (BadPaddingException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
}
public class EncryptDecrypt {
    private SecretKeySpec skeySpec;
    private Cipher cipher, cipher2;


    EncryptDecrypt(String password) throws NoSuchAlgorithmException,
    UnsupportedEncodingException, NoSuchPaddingException,
    IllegalBlockSizeException, BadPaddingException, InvalidKeyException {
        MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
        byte[] key = Arrays.copyOf(sha.digest((""ThisisMySalt1234"" + password).getBytes(""UTF-8"")),
        16);
        skeySpec = new SecretKeySpec(key, ""AES"");
        cipher = Cipher.getInstance(""AES"");
        cipher2 = Cipher.getInstance(""AES"");
    }

    String encrypt(String clear) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException {
        String encrypted = new String();

        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);

        byte[] encryptedBytes = null;
        encryptedBytes = cipher.doFinal(clear.getBytes());

        encrypted = Base64.encodeToString(encryptedBytes, Base64.DEFAULT);

        return encrypted;
    }

    // fehlerhaft
    String decrypt(String encryptedBase64) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        String decrypted = new String();
        cipher2.init(Cipher.DECRYPT_MODE, skeySpec);
        byte[] decodedBytes = null;


        decodedBytes = Base64.decode(encryptedBase64, Base64.DEFAULT);

        decrypted = cipher2.doFinal(decodedBytes).toString();

        return decrypted;

    }
}
</code></pre>
","<p>The output type of <code>Cipher#doFinal(byte[])</code> is <code>byte[]</code>, but Arrays don't have a default way in which their contents are printed. By calling <code>byte[].toString()</code> on an array, you're simply printing its type and hash code. (More on this <a href=""https://stackoverflow.com/questions/1040868/java-syntax-and-meaning-behind-b1ef9157-binary-address"">here</a>)</p>

<p>What you want is</p>

<pre><code>decrypted = new String(cipher2.doFinal(decodedBytes), ""UTF-8"");
</code></pre>

<p>which tells the <code>String</code> constructor that the given byte array contains characters that are encoded in UTF-8.</p>

<p>When you do that, then you also need to get the byte array out of the string in a specific encoding:</p>

<pre><code>clear.getBytes(""UTF-8"")
</code></pre>

<p>If you omit the encoding, then the system default is used which might make your plaintexts unrecoverable when you send the ciphertexts across systems which have different system encoding defaults.</p>

<p>Btw, you don't need both <code>Cipher</code> instances. Only one suffices since you're initiating it always during encryption and decryption.</p>

<hr>

<p><strong>Other security problems:</strong></p>

<ul>
<li>Always use a fully qualified cipher string. So change <code>Cipher.getInstance(""AES"")</code> to <code>Cipher.getInstance(""AES/CBC/PKCS5Padding"")</code>.</li>
<li><p>Never use ECB mode which is the default when you use <code>""AES""</code> cipher string. It is not semantically secure. Use at least CBC mode with a random IV:</p>

<pre><code>SecureRandom r = new SecureRandom();
byte[] iv = new byte[16];
r.nextBytes(iv);
...
cipher.init(Cipher.ENCRYPT_MODE, skeySpec, new IvParameterSpec(iv));
</code></pre>

<p>The IV is not supposed to be secret, so you can simply prepend it to the ciphertext and splice it off before decryption.</p></li>
<li><p>Authenticate your ciphertext so that you're not vulnerable to a padding oracle attack and can always check your ciphertexts for integrity. This can be easily done with an encrypt-then-MAC scheme with a strong MAC algorithm like HMAC-SHA256. You can also use an authenticated mode of encryption like GCM or EAX.</p></li>
</ul>
","185","<android><security><encryption><encryption-symmetric>","0","1","2","2015-06-16 19:53:19","30853043","1","4","1176870","","2015-06-15 18:44:11","2015-06-15 18:22:59",""
"30852316","Android encryption and decryption of text fails","<p>I try to encrypt some text (here it is named code) and decrypt it again.
For this i use a 4 digit Pin which is salted.</p>

<p>After this the text is encrypted, also again some Base64 decoding, so i can safely output the String again.</p>

<p>As i understand i have to base64.decode it and then again decrypt it.</p>

<p>But i don't get my encrypted text correctly decrypted back. Just some different text. ( something like this[B@3ceB...)</p>

<p>It is just a small project nothing serious. Also it is my second android app, so some good examples would be great.</p>

<pre><code>String pinstr = new String();
pinstr = ""5555"";
try {
    EncryptDecrypt encryptor = new EncryptDecrypt(pinstr);
    //encryptor.encrypt(code);
    String encrypted = new String();
    encrypted = encryptor.encrypt(code);

    String decrypted = new String();
    decrypted = encryptor.decrypt(encrypted);

    Toast.makeText(MainActivity.this, decrypted, Toast.LENGTH_SHORT).show();
} catch (InvalidKeyException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
} catch (NoSuchAlgorithmException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
} catch (UnsupportedEncodingException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
} catch (NoSuchPaddingException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
} catch (IllegalBlockSizeException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
} catch (BadPaddingException e) {
    // TODO Auto-generated catch block
    e.printStackTrace();
}
public class EncryptDecrypt {
    private SecretKeySpec skeySpec;
    private Cipher cipher, cipher2;


    EncryptDecrypt(String password) throws NoSuchAlgorithmException,
    UnsupportedEncodingException, NoSuchPaddingException,
    IllegalBlockSizeException, BadPaddingException, InvalidKeyException {
        MessageDigest sha = MessageDigest.getInstance(""SHA-1"");
        byte[] key = Arrays.copyOf(sha.digest((""ThisisMySalt1234"" + password).getBytes(""UTF-8"")),
        16);
        skeySpec = new SecretKeySpec(key, ""AES"");
        cipher = Cipher.getInstance(""AES"");
        cipher2 = Cipher.getInstance(""AES"");
    }

    String encrypt(String clear) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException {
        String encrypted = new String();

        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);

        byte[] encryptedBytes = null;
        encryptedBytes = cipher.doFinal(clear.getBytes());

        encrypted = Base64.encodeToString(encryptedBytes, Base64.DEFAULT);

        return encrypted;
    }

    // fehlerhaft
    String decrypt(String encryptedBase64) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
        String decrypted = new String();
        cipher2.init(Cipher.DECRYPT_MODE, skeySpec);
        byte[] decodedBytes = null;


        decodedBytes = Base64.decode(encryptedBase64, Base64.DEFAULT);

        decrypted = cipher2.doFinal(decodedBytes).toString();

        return decrypted;

    }
}
</code></pre>
","<p>Your code works, but you are throwing away the result.</p>

<p>Change the line</p>

<pre><code>decrypted = cipher2.doFinal(decodedBytes).toString();
</code></pre>

<p>to</p>

<pre><code> decrypted = new String(cipher2.doFinal(decodedBytes),""UTF-8"");
</code></pre>

<p>Then you are getting the decoded String instead of the ID of the byte array (calling toString() does give you the byte array as String).</p>

<p>BTW: You don't need to initialize variables in Java. <code>String encrypted = new String();</code> is useless. Just write <code>String encrypted;</code>.</p>
","185","<android><security><encryption><encryption-symmetric>","0","1","2","2015-06-16 19:53:19","30853043","1","4","1176870","","2015-06-15 18:44:11","2015-06-15 18:22:59",""
"6429048","Exchanging Symmetric Keys","<p>I have a WinForms client that is sending encrypted data to a web service.  The WinForms client creates a Symmetric RijndaelManaged sessionKey and also has a ""hard-coded RSA asymmetric public key"".</p>

<p>I am using the EncryptedXml class which makes it really easy to package up my data.</p>

<p>The Web Service has both the private and public keys ""hardcoded"" and can successfully decrypt the SessionKey and then use it to decrypt the actual data I am sending.</p>

<p>This is pretty much handled automatically by the EncryptedData class.</p>

<p>The problem I am having is that on the Web Service end when I want to reply, I can't seem to figure out how to get the SessionKey that was sent over.  </p>

<p>Before I do any decrypting on the Web Service side, I can see the encrypted session key, but after I decrypt the XML, it's gone (and therefore I don't have any session keys for my reply).</p>

<p>Any ideas how I can get this unencrypted key?</p>
","<p>The reason that you cannot see the session key is that it is automatically decrypted and used. Normally it is considered part of the XML. If you want to get at it, just use</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.xml.encryptedxml.decryptencryptedkey.aspx"" rel=""nofollow"">encryptedxml.decryptencryptedkey</a></p>

<p>And you should be alright. Note that for all the less important security warnings, the code represented here is vulnerable to both man in the middle attacks and to a lesser extend to padding oracle attacks. It should help against most eavesdropping attempts though.</p>

<p>Finally, reusing a session key is considered pretty bad security practice too. If you reuse it, at least consider using an IV, e.g. a counter for each followup message.</p>
","178","<encryption><encryption-asymmetric><public-key-encryption><encryption-symmetric>","0","0","1","2011-06-21 20:46:56","","3","","","","","2011-06-21 16:55:03",""
"16951617","Secure file wiping by multiple encryptions and file delete","<p>I am wanting to securely wipe a file - of any type or format - obviously the <code>File.Delete</code> command in C# is no where near safe enough. </p>

<p>I seem to recall a post here (I can't find it again though!) that explained the modern File Systems (i.e newer than FAT32) can cause issues when attempting this kind of delete as they're a journaling file system and recovering data is far easier than in ye olden days. </p>

<p>After even more reading, I read it would be an idea to:</p>

<ol>
<li>Generate a random 256 bit encryption key. </li>
<li>Encrypt FileA to FileB. </li>
<li>Generate a new random 256 bit encryption key. </li>
<li>Encrypt FileB to FileA. </li>
<li>Repeat this n number of times to suit your level of paranoia. </li>
<li>Use File.Delete to delete FileA and FileB. </li>
</ol>

<p>This seems a logical way for encrypting/re-encrypting the data in the files over and over with keys that will never ever be recoverable or re-usable but is this actually a secure way? Will the file system overwrite the file at the same location/cluster (obviously the file will grow as it's contents are subject to encryption/re-encryption), ensuring the original content is overwritten?</p>
","<p>Your approach won't necessarily solve your problem, and the problem doesn't only exist for journaling filesystems. (The old DOS undelete tool demonstrates that.)</p>

<p>Modern filesystems may move files around at any time, transparently to programs that are currently running, so juggling file content around doesn't guarantee that you won't be leaving an old copy of the file in a section of the disk that's marked unused.</p>

<p>You'd be better off using encryption directly rather than trusting that you can fool the OS into overwriting the old data.</p>
","174","<file-io><aes><encryption-symmetric>","-2","1","1","2015-08-02 11:54:36","16951659","0","","1816580","","2015-08-02 11:54:36","2013-06-05 23:42:13","2013-06-06 03:40:33"
"24538744","ASP.net query encryption method that doesn't produce slash character","<p>I searched a lot to find an encryption algorithm which its encrypted results do not include slash character. Anything I've tested so far (like <a href=""http://www.codeproject.com/Articles/33350/Encrypting-Query-Strings"" rel=""nofollow noreferrer"">this</a>, <a href=""https://stackoverflow.com/questions/1492878/how-to-encrypt-query-strings-in-asp-net?rq=1"">this</a> and <a href=""https://stackoverflow.com/questions/9110561/encrypt-query-string-including-keys"">this</a>) generate strings which include slash character and therefore they make asp.net (web forms) routing misunderstand the way it should interpret the route.</p>

<p>Can you please help by introducing a symmetric encryption algorithm which generate encrypted strings that can safely be used for encrypting query strings without misguiding asp.net routing?</p>
","<p>Encryption algorithms generally produce random (looking) bytes. These bytes can have any value. You can <em>encode</em> this value, for instance using hexadecimals or base 64. With hexadecimals you have already code that only contains 0..9 and a..f (in upper or lower case). However, hexadecimal encoding is not very efficient, doubling the ciphertext.</p>

<p>Base 64 uses 64 characters: A..Z, a..z, 0..9, + and /, and sometimes a padding character =. It is however very easy to replace the URL unsafe + and / characters with other ones, e.g. - and _ according to RFC 4648. You can also remove any = characters at the end, although you may have to put them back (until you get a multiple of 4 base 64 characters) depending on the base 64 decoding routine. Base 64 uses 4 characters for 3 bytes, so it expands the ciphertext by 33%.</p>
","173","<asp.net><encryption><routing><query-string><encryption-symmetric>","0","1","1","2014-07-02 22:12:16","24541891","0","","-1","","2017-05-23 12:20:45","2014-07-02 18:44:46",""
"21986824","Why hashing is required if i am using my own secret key?","<p>Why hashing is required if i am using my own secret key ? i found that everywhere it is done as shown below</p>

<pre><code>        key = myKey.getBytes(""UTF-8"");
        sha = MessageDigest.getInstance(""SHA-1"");
        key = sha.digest(key);
        key = Arrays.copyOf(key, 16);
        secretKey = new SecretKeySpec(key, ""AES"");
</code></pre>

<p>Can some one explain me what is the benefit of hashing here ? </p>
","<p>because in your case AES requires a 128 bit key so to build it up it need 16 bytes. How to get those 16 bytes? The most common way is to hash your user password and grab the first 16 bytes of the hash. Doing this will ensure that the AES algorithm will always receive a proper 16 bytes key.  </p>

<p>Thanks to the hashing algorithm even short passwords such as ""123456"" or ""god"" will be transformed to a fixed length 20 byte hash</p>
","172","<java><encryption><aes><encryption-symmetric>","2","2","1","2014-02-24 13:29:21","21988916","3","2","3244519","","2014-02-24 13:07:27","2014-02-24 11:46:21","2014-02-24 14:53:41"
"30283960","Symmetric encryption issue between a .Net application and a Java application","<p>I am integrating with a .Net application which uses Symmetric encryption. My application is on Java. Following is the .Net code which was shared by the team which uses the Symmetric encryption;</p>

<pre><code>public static string SymmetricEncrypt&lt;T&gt;(string value, string PrivateKey, string SALT_STRING) where T : SymmetricAlgorithm, new()
    {

 PasswordDeriveBytes rgb = 
 new PasswordDeriveBytes(PrivateKey ,      
Encoding.Unicode.GetBytes(SALT_STRING));

        SymmetricAlgorithm algorithm = new T();

        byte[] rgbKey = rgb.GetBytes(algorithm.KeySize &gt;&gt; 3);
        byte[] rgbIV = rgb.GetBytes(algorithm.BlockSize &gt;&gt; 3);

        ICryptoTransform transform = algorithm.CreateEncryptor(rgbKey, rgbIV);

        using (MemoryStream buffer = new MemoryStream())
        {
  using (CryptoStream stream = 
                new CryptoStream(buffer, transform, CryptoStreamMode.Write))
            {
using (StreamWriter writer = new StreamWriter(stream, Encoding.Unicode))
                {
                    writer.Write(value);
                }
            }

            return Convert.ToBase64String(buffer.ToArray());
        }
    }
</code></pre>

<p>Looking at the .Net documentation, I could see that SymmetricEncrypt class by default uses Rijndael encryption. And also I have found a class similar to ""PasswordDeriveBytes"" implementation in bouncy castle which implements the ""PKCS5S1"" algorithm for key generation using the salt with an iteration count of 100. But still I am unable to generate the exact encryption to what is required by the .Net application. Following code is what i have tried so far;</p>

<pre><code> import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import mtnsa.sorb.handler.PKCS5Test.PasswordDeriveBytes;

import org.bouncycastle.crypto.digests.SHA1Digest;
import org.bouncycastle.crypto.generators.PKCS5S1ParametersGenerator;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.util.encoders.Base64;

public class EncryptionHelper {



    public static void main(String[] args)throws Exception {
        encrypt(""FTTH"",""HhN01vcEEtMmwdNFliM8QYg0Y89xzBOJJG7BHARC7g"", ""002400000480000094000000060200000024000052534131000400000100010085525e9438e9fae122f71ec7124"" +
                ""443bf2f9f57f5f3760b3704df168493004b9ef68413f500d54fa9fa3869b42b1e2365204826e54b618d56e7e575f2"" +
                ""7f675f0eae3ea8458a8ee1e92dc3f4bfc34fbe23851afa9d2c28fc8cd5b124f60a03a06bfb598bc3acbd8c4380ae"" +
                ""f02cc58bdf955d140390f740a7e115c59e3b3b5758ca"");
    }

    public static String encrypt(final String valueToEncrpt, final String saltString, final String privateKey) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException{
        String encrptedValue = null;

           Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");

        byte[] password = privateKey.getBytes();
        byte[] salt = saltString.getBytes();

        PKCS5S1ParametersGenerator generator = new PasswordDeriveBytes(new SHA1Digest());
        generator.init(password, salt, 100);

        byte[] keyArr = ((KeyParameter)generator.generateDerivedParameters(128)).getKey();
        byte[] IvArr = ((KeyParameter)generator.generateDerivedParameters(128)).getKey();



        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(keyArr,""AES""),new IvParameterSpec(IvArr));
        byte[]test  = cipher.doFinal(valueToEncrpt.getBytes());

        System.out.println(new String(Base64.encode(test)));

        return encrptedValue;
    }
}
</code></pre>

<p>In the Java code i have given the sample SALT key and the PRIVATE key used for testing purposes. But still I am unable to get the exact value as generated by the .Net application. Following is an example plain text and the encrypted value which i got from the .Net application which i have failed to replicate in my Java code. </p>

<p>Plain text value : FTTH</p>

<p>Encrypted value : MjgmbdT3Vg6RW/7K1BjQ/Q==</p>

<p>Any help on this is much appreciated as i am currently out of ideas.</p>
","<p>Thank you everyone for the valuable comments. I have requested the .Net module authors to change their implementation to use RFC2898DeriveBytes</p>
","166","<java><.net><encryption><aes><encryption-symmetric>","2","1","1","2015-05-20 05:06:37","30340675","9","3","1675219","","2015-05-18 06:18:13","2015-05-17 06:17:58",""
"37360481","Web form submission : Client-side encryption and source code not accessible","<p>I'm not really experienced in website and specially website security.</p>

<p><strong>Before the problem, let's explain the context :</strong></p>

<p>I have created a web page that is meant to be a platform with an order form X to be filled by some client A with some critical fields Y to be encrypted. Then, the web server would send a mail with X+Y to the seller B, so he can process the order.</p>

<p><strong>What I did :</strong></p>

<p>I created a form with Spring MVC with a controller (in Java) and an HTML view template. This tutorial helped me a bit : <a href=""https://spring.io/guides/gs/handling-form-submission/"" rel=""nofollow"">https://spring.io/guides/gs/handling-form-submission/</a>. When A submits X+Y, I encrypt Y (with a symmetric TEA Encryption) in the Controller (So I guess that is obviously server-side) and then send it to the retailer by mail. Then the retailer decrypts it with the same key used for decryption.</p>

<p><strong>The problem :</strong></p>

<p>I would like it to be really secure so I don't want to send Y to the server and then encrypt it, I want to encrypt it on the client side and then send it to the controller.</p>

<p>Is Javascript client-side the only solution to do this ? I would prefer to do it in Java on the client side because what I want is that the encryption is client-side and also the source code containing the encryption algorithm hidden to anyone (which is not the case I guess in HTML and Javascript).</p>

<p>So, for client-side and hidden source code encryption, is it possible to do it with Spring MVC and Java, or with Javascript, or do you have any other suggestion ?</p>
","<p>As indicated, I wouldn't worry about people having access to the encryption code itself, this is the least of your concerns security-wise. There are publicly-available reference implementations and specifications for all common encryption algorithms anyway. A major requirement of modern cryptographic algorithms is that the security lies in the secrecy of the key, <em>not</em> in the secrecy of the algorithm itself. (This was actually an explicit requirement for the Data Encryption Standard and has held for all subsequently-designed algorithms). Relying on the secrecy of the encryption algorithm you're using is a form of security by obscurity, which is a bad practice.</p>

<p>There's a decent discussion of public-key cryptography in JavaScript here:
<a href=""https://stackoverflow.com/questions/6116883/are-there-any-asymmetric-encryption-options-for-javascript"">Are there any asymmetric encryption options for JavaScript?</a></p>
","164","<java><forms><spring-mvc><web><encryption-symmetric>","0","0","1","2016-07-20 17:52:29","","6","0","5240045","","2016-05-21 08:11:59","2016-05-21 08:10:28",""
"3178367","Static or random IV for a license file","<p>I have made a small program that will allow me to send licenses in encrypted form to users.</p>

<p>At the moment I have </p>

<ul>
<li>An RSA private key that encrypts my AES key</li>
<li>A single AES/CBC key that encrypts the data</li>
<li>An RSA public key</li>
</ul>

<p>Both the AES and public key are hard coded onto the device.</p>

<p>How should I deal with the IV when a license is requested, should I create a static one on the device or send a new one with every new license I create?</p>
","<p>Isn't this proposal totally silly?</p>

<p>You should encrypt with RSA public keys not with a private key. If you encrypt with a private key as you propose then everyone with access to the public key will learn the AES key and will be able to decrypt or forge anything. Of course for the same reason you should also not use the same AES key for distinct receivers.</p>

<p>And to answer the question, you should use a new random IV for each AES/CBC encryption. </p>
","164","<encryption><encryption-symmetric>","0","2","2","2010-07-05 14:19:38","3179848","3","","21234","","2010-07-05 09:31:47","2010-07-05 09:20:28",""
"3178367","Static or random IV for a license file","<p>I have made a small program that will allow me to send licenses in encrypted form to users.</p>

<p>At the moment I have </p>

<ul>
<li>An RSA private key that encrypts my AES key</li>
<li>A single AES/CBC key that encrypts the data</li>
<li>An RSA public key</li>
</ul>

<p>Both the AES and public key are hard coded onto the device.</p>

<p>How should I deal with the IV when a license is requested, should I create a static one on the device or send a new one with every new license I create?</p>
","<p>If I understand what you are trying to do then, like most licensing schemes, it is basically a <a href=""http://en.wikipedia.org/wiki/Digital_rights_management"" rel=""nofollow noreferrer"">DRM</a> scheme. I'll only address the cryptography problem, but there is also of course the problem of playing hide-and-seek from the hackers. You should know that <em>no</em> DRM scheme offers any measurable security (unless perhaps security hardware is involved) in the cryptographic sense, but they are still common and some developers are comfortable with the logic behind them.</p>

<p>What you want to do is generate your license data and include some information that prevents a user from simply copying a valid license file from a legitimate user. Examples might be mac address, phone number, etc. Then you <a href=""http://java.sun.com/javase/6/docs/api/java/security/Signature.html"" rel=""nofollow noreferrer"">sign</a> this data. The license then consists of the unencrypted license and the signature bytes. On the user side, your installation software will verify the signature using the hard-coded public key, and perform any other checks (mac address matches, phone number matches, etc).</p>

<p>This would be the core of your scheme, and is enough for most developers. You can take this core and further obfuscate it using ad-hoc including encryption, splitting, etc., depending on how far you want to go with the hide-and-seek game.</p>

<p>EDIT:   </p>

<p>If I may make a suggestion, I think the book <a href=""http://www.wrox.com/WileyCDA/WroxTitle/Beginning-Cryptography-with-Java.productCd-0764596330.html"" rel=""nofollow noreferrer"">Beginning Cryptography With Java</a> would be a wise investment. It includes examples that using the Bouncycastle library. You can donwload the examples for free from the same website.</p>
","164","<encryption><encryption-symmetric>","0","2","2","2010-07-05 14:19:38","3179848","3","","21234","","2010-07-05 09:31:47","2010-07-05 09:20:28",""
"50870852","Encrypt db file to crypt12 format","<p>I have decrypted <code>crypt12</code> file into <code>.db</code> file. Modified some changes. Now again, Is there a way to encrypt <code>.db</code> file into <code>crypt12</code> format?</p>
","","163","<encryption><whatsapp><bcrypt><encryption-symmetric>","1","","0","2018-06-15 07:20:46","","0","1","","","","2018-06-15 07:20:46",""
"13596883","Coefficient matrix in AES in Decryption stage","<p>I know that in AES, in encryption stage, in MixColumns, we use [4x4] coefficient matrix with values having only (00,01,02,03). Does anyone know what values are used for coefficient matrix in InvMixColumns at decryption stage? I know those coefficients occur by taking inverse of 00,01,02,03 in rajindel field. I calculated those as  </p>

<pre><code>00----------&gt;00  
01----------&gt;01
02----------&gt;141
03----------&gt;246  
</code></pre>

<p>The association shown above is coefficient--------->Its inverse in Rajindel field represented in decimal. Are the values correct? I need some confirmation. Thanks in advance!!  </p>
","<p>The polynomial coefficients of AES are actually:</p>

<pre><code>03, 01, 01, 02
</code></pre>

<p>Which can be inverted to:</p>

<pre><code>0B, 0D, 09, 0E
</code></pre>

<p>See also section 4.3 of <a href=""http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf"" rel=""nofollow"">FIPS 197</a>, particular equations (4.14), (4.15), (5.5), and (5.9).</p>

<p>Note that it is not as simple as inverting each coefficient in the field GF(2<sup>8</sup>). Instead, you invert the <em>polynomial</em> in the whole ring of polynomials modulo x<sup>4</sup>+1.</p>
","163","<encryption><aes><encryption-asymmetric><encryption-symmetric>","1","1","1","2012-11-28 07:27:59","13599748","0","","482262","","2012-11-28 07:27:30","2012-11-28 02:38:57",""
"42072835","AES 256 program not working","<p>So I have been attempting to implement AES-256 in C. After lots of reading around and following the wikipedia page to implement it, I managed to code it. Only when I tested it, it seemed to give the wrong output.</p>

<p>Code:</p>

<pre><code>/*
AES-256
(c) 2017 Daniel Gee
*/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

unsigned char rcon[256] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
};

unsigned char sbox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

void rotate(unsigned char *w){
    unsigned char t;
    t = w[0];
    w[0] = w[1];
    w[1] = w[2];
    w[2] = w[3];
    w[3] = t;
}

void key_schedule_core(unsigned char *w, unsigned char i){
    unsigned char j;
    rotate(w);
    for(j = 0; j &lt; 4; j++){
        w[j] = sbox[w[j]];
    }
    w[0] ^= rcon[i];
}

unsigned char *key_schedule(unsigned char *key){
    unsigned char n = 32, b = 240, *e = malloc(sizeof(unsigned char) * b), i = 1, j, k, t[4];
    for(k = 0; k &lt; n; k++){
        e[k] = key[k];
    }
    j = 32;

    while(j &lt; b){
        t[0] = e[j - 4];
        t[1] = e[j - 3];
        t[2] = e[j - 2];
        t[3] = e[j - 1];

        key_schedule_core(t, i);

        i++;

        t[0] ^= e[j - n];
        t[1] ^= e[j - n + 1];
        t[2] ^= e[j - n + 2];
        t[3] ^= e[j - n + 3];

        e[j] = t[0];
        e[j + 1] = t[1];
        e[j + 2] = t[2];
        e[j + 3] = t[3];
        j += 4;

        for(k = 0; k &lt; 3; k++){
            t[0] = e[j - 4];
            t[1] = e[j - 3];
            t[2] = e[j - 2];
            t[3] = e[j - 1];

            t[0] ^= e[j - n];
            t[1] ^= e[j - n + 1];
            t[2] ^= e[j - n + 2];
            t[3] ^= e[j - n + 3];

            e[j] = t[0];
            e[j + 1] = t[1];
            e[j + 2] = t[2];
            e[j + 3] = t[3];

            j += 4;
        }

        t[0] = e[j - 4];
        t[1] = e[j - 3];
        t[2] = e[j - 2];
        t[3] = e[j - 1];

        t[0] = sbox[t[0]];
        t[1] = sbox[t[1]];
        t[2] = sbox[t[2]];
        t[3] = sbox[t[3]];

        t[0] ^= e[j - n];
        t[1] ^= e[j - n + 1];
        t[2] ^= e[j - n + 2];
        t[3] ^= e[j - n + 3];

        e[j] = t[0];
        e[j + 1] = t[1];
        e[j + 2] = t[2];
        e[j + 3] = t[3];

        j += 4;

        if(j &gt; b){
            break;
        }

        for(k = 0; k &lt; 3; k++){
            t[0] = e[j - 4];
            t[1] = e[j - 3];
            t[2] = e[j - 2];
            t[3] = e[j - 1];

            t[0] ^= e[j - n];
            t[1] ^= e[j - n + 1];
            t[2] ^= e[j - n + 2];
            t[3] ^= e[j - n + 3];

            e[j] = t[0];
            e[j + 1] = t[1];
            e[j + 2] = t[2];
            e[j + 3] = t[3];

            j += 4;
        }
    }

    return e;
}

void shift_rows(unsigned char *state){
    unsigned char t;
    t = state[4];
    state[4] = state[5];
    state[5] = state[6];
    state[6] = state[7];
    state[7] = t;

    t = state[8];
    state[10] = t;
    t = state[9];
    state[11] = t;

    t = state[12];
    state[12] = state[15];
    state[15] = state[14];
    state[14] = state[13];
    state[13] = t;
}

void mix_columns(unsigned char *state){
    unsigned char a[4], b[4], c, j;
    for(j = 0; j &lt; 4; j++){
        for(c = 0; c &lt; 4; c++){
            a[c] = state[(j * 4) + c];
            b[c] = state[(j * 4) + c] &lt;&lt; 1;
            if(state[(j * 4) + c] &amp; 0x80){
                b[c] ^= 0x1b;
            }
        }
        state[(j * 4) + 0] = b[0] ^ a[3] ^ a[2] ^ b[1] ^ a[1];
        state[(j * 4) + 1] = b[1] ^ a[0] ^ a[3] ^ b[2] ^ a[2];
        state[(j * 4) + 2] = b[2] ^ a[1] ^ a[0] ^ b[3] ^ a[3];
        state[(j * 4) + 3] = b[3] ^ a[2] ^ a[1] ^ b[0] ^ a[0];
    }
}

void encrypt(unsigned char *key, unsigned char *state){
    unsigned char *e = key_schedule(key), i, j;
    for(i = 0; i &lt; 14; i++){
        if(i == 0){
            for(j = 0; j &lt; 16; j++){
                state[j] ^= e[(i * 16) + j];
            }
        }else if(i == 13){
            for(j = 0; j &lt; 16; j++){
                state[j] ^= sbox[state[j]];
            }
            shift_rows(state);
            for(j = 0; j &lt; 16; j++){
                state[j] ^= e[(i * 16) + j];
            }
        }else{
            for(j = 0; j &lt; 16; j++){
                state[j] ^= sbox[state[j]];
            }
            shift_rows(state);
            mix_columns(state);
            for(j = 0; j &lt; 16; j++){
                state[j] ^= e[(i * 16) + j];
            }
        }
    }
}

int main(){
    unsigned char key[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        message[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    encrypt(key, message);

    for(int i = 0; i &lt; 16; i++){
        printf(""%02x "", message[i]);
    }
    printf(""\n"");
}
</code></pre>

<p>Example:</p>

<pre><code>key = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
message = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
output = c2 2a 26 68 a8 4a 1e f3 ac 40 23 05 25 50 00 02
</code></pre>
","<p>The book ""The Design of Rijndael"" (ISBN 3-540-42580-2) has a great list of test vectors in appendix D for all the intermediate steps of an AES 128 encryption. Step through your code and compare your results with those from the book. It should be easy to change your code temporarily to AES-128 to find the bugs and then switch it back to AES-256 afterwards.</p>

<p>After that, throw away your implementation and use an established implementation that has been thoroughly tested, since yours is vulnerable to timing attacks (because of the <code>if(state[(j * 4) + c] &amp; 0x80)</code>), which allows an attacker to find out the secret key. To avoid this and other implementation bugs, consult a book about implementing cryptography and try to use as much preexisting code as possible instead of writing your own.</p>
","160","<c><encryption><aes><encryption-symmetric>","0","2","1","2017-02-06 21:44:02","42077785","10","","","","","2017-02-06 16:38:00","2017-02-06 23:57:07"
"16980987","What symmetric encryption algorithms implemented in both of c# and php do not requires fixed lenght of input data?","<p>Currently I use AES and have a problem, if user choose to decode unencrypted file, my prog always ends up with exception, even when try catch placed and running out of debugger.</p>

<pre><code>public static byte[] AES_Decrypt(byte[] data, string[] aes_key)
{
    RijndaelManaged aes = new RijndaelManaged();
    aes.KeySize = 256;
    aes.BlockSize = 256;
    aes.Mode = CipherMode.CBC;
    aes.Padding = PaddingMode.PKCS7;

    aes.Key = Encoding.Default.GetBytes(aes_key[0]);
    aes.IV = Encoding.Default.GetBytes(aes_key[1]);

    if (data.Length % (aes.BlockSize / 8) != 0)
        return null;

    var decrypt = aes.CreateDecryptor();

    using (MemoryStream ms = new MemoryStream())
    {
        using (CryptoStream cs = new CryptoStream(ms, decrypt, CryptoStreamMode.Write))
            try { cs.Write(data, 0, data.Length); } //crash here ""data lenght for decryption is invalid"" and ""Padding is invalid and cannot be removed"".
            catch (Exception exc) { return null; }

        return ms.ToArray();
    }
}
</code></pre>

<p>I am not that interested why try and catch don't work, I need some workaround to avoid crash... And changing the encryption method is fine.</p>
","<p>From my point of view you shouldn't hide the exception at that level. Throwing an exception when an user tries to decrypt an unencrypted piece of data seems the expected behavior of a cryptography module to me.</p>

<p>Instead, you should deal with this exception at a higher level (outside the cryptography module). For instance, you could have something like this in your UI layer:</p>

<pre><code>try
{
    var encryptedFilePath = ShowOpenFileDialog();
    var decryptedFilePath = TryDecryptFile(encryptedFilePath);
    ShowMessagePopup(""Your file has been decrypted to: "" + decryptedFilePath);
}
catch (CryptographicException)
{
    ShowErrorPopup(""Unable to decrypt file!\n"" +
     ""Please make sure the file you selected is valid"");
}
</code></pre>
","157","<c#><methods><encryption-symmetric>","0","1","1","2013-06-07 13:20:49","16984939","0","","1154283","","2013-06-07 09:57:03","2013-06-07 09:43:23",""
"18596577","Why is decryption failing after separate writes to this file-like object?","<p>I'm working on a toy module to encrypt tempfiles.  The idea is to expose an interface similar to that found in the <code>tempfile</code> module, but to have data transparently encrypted using session keys.  Again, it's just a toy project and not production code.</p>

<p>First, a few technical details.  This project is implemented with <code>pycrypto</code> and is employing:</p>

<ul>
<li>AES-CTR</li>
<li>A counter with a 1-bit randomized prefix</li>
</ul>

<p>The basic class is structured so as to mimic the file object interface.  When a method such as <code>read</code> or <code>write</code> is called, we initialize a <code>Crypto.Cipher.AES</code> object using the class' <code>_cipher</code> property.  This property is implemented as follows:</p>

<pre><code>def _cipher():
    doc = doc = ""Returns a stateful AES object ready to decrypt at the required \
                 stream position""

    def fget(self):
        ctr = Counter.new(nbits=64,
                          initial_value=self.tell()  # alias of self._file.tell
                          prefix=self._nonce)  # set by `Random.new().read(8)
        return AES.new(self._key, counter=ctr, mode=self._opmode)  # self._opmode = Crypto.Cipher.AES.MODE_CTR

    def fset(self, value):
        raise AttributeError('Cannot set _cipher')

    def fdel(self, value):
        raise AttributeError('Cannot delete _cipher')

    return locals()
        _cipher = property(**_cipher())
</code></pre>

<p>Here is an example of how the <code>_cipher</code> property is used to encrypt transparently during a call to the <code>write</code> method.</p>

<pre><code>def write(self, data):
    if not isinstance(data, str):
        raise TypeError('Data must be str (or bytestring)')
    self._file.write(self._cipher.encrypt(data))
</code></pre>

<p>When decrypting, we apply the opposite transaction as such:</p>

<pre><code>def read(self, size=-1):
    return self._cipher.decrypt(self._file.read(size))
</code></pre>

<p>This works when making single calls to <code>write</code>, but fails when multiple calls to <code>write</code> are chained.  For instance:</p>

<pre><code>ep = EphemeralFile()  # the class in question
ep.write('Now is the winter of our discontent')
ep.seek(0)
print ep.read()

&gt;&gt; Now is the winter of our discontent
</code></pre>

<p>So far so good... but here's where it fails</p>

<pre><code>ep.write(' made glorious summer by this sun of York')
ep.seek(0)
print ep.read()

&gt;&gt; Now is the winter of our discontent""d_""��U�L~ �w���S��h��]""U(��P^��9k
</code></pre>

<p>What am I doing wrong?  Shouldn't the use of <code>self._file.tell()</code> in the <code>_cipher</code> property yield the appropriate counter position for decryption?</p>

<p>Please note that I first suspected that I might be off by one counter tick, so I tried modifying the <code>initial_value=self.tell()</code> line to <code>initial_value=self.tell() + 1</code> (also tried with <code>-1</code>), but to no avail.</p>

<p>For convenience, here is the full class definition.  It's fairly short and may yield some insight.</p>

<pre><code>import tempfile

from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Util import Counter

PRNG = Random.new()


class EphemeralFile(object):
    def __init__(self, mode='w+b', bufsize=-1, suffix='', prefix='', dir=None,
                 key_size=32):

        self._key = PRNG.read(key_size)
        self._nonce = PRNG.read(8)
        self._opmode = AES.MODE_CTR

        self._file = tempfile.TemporaryFile(mode=mode, bufsize=bufsize,
                                            suffix=suffix, prefix=prefix, dir=dir)

        # alias tempfile methods and parameters
        self.close = self._file.close
        self.closed = self._file.closed
        self.encoding = self._file.encoding
        self.errors = self._file.errors
        self.fileno = self._file.fileno
        self.flush = self._file.flush
        self.isatty = self._file.isatty
        self.mode = self._file.mode
        self.name = self._file.name
        self.softspace = self._file.softspace
        self.truncate = self._file.truncate
        self.seek = self._file.seek
        self.tell = self._file.tell

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        self._file.close()

    def __iter__(self):
        return (line for line in self.readlines())

    def _cipher():
        doc = ""Returns a stateful AES object ready to decrypt at the required \
               stream position""

        def fget(self):
            ctr = Counter.new(nbits=64,
                              initial_value=self.tell(),
                              prefix=self._nonce)
            return AES.new(self._key, counter=ctr, mode=self._opmode)

        def fset(self, value):
            raise AttributeError('Cannot set EphemeralFile._cipher')

        def fdel(self):
            raise AttributeError('Cannot delete EphemeralFile._cipher')

        return locals()
    _cipher = property(**_cipher())

    def write(self, data):
        if not isinstance(data, str):
            raise TypeError('Data must be str (or bytestring)')

        self._file.write(self._cipher.encrypt(data))

    def writelines(self, lines):
        self.write(""\n"".join(lines))

    def read(self, size=-1):
        return self._cipher.decrypt(self._file.read(size))

    def readline(self, size=-1):
        fptr = self.tell()
        bytes = []
        got_line = False
        while not got_line:
            bytes.append(self.read(1))
            if not bytes[-1] or ('\n' in bytes[-1]):
                bytes[-1] = bytes[-1][0:bytes[-1].find('\n') + 1]
                got_line = True

        plaintext = ''.join(bytes)
        self.seek(fptr + len(plaintext))  # rewind
        return plaintext

    def readlines(self, size=-1):
        return [line for line in self]

    def read_ciphertext(self, size=-1):
        """"""Read ciphertext without decrypting.

        size : int (default -1)
            Number of bytes to read.  Negative values read the entire stream

        return : str
            Ciphertext
        """"""
        return self._file.read(size)

    def next(self):
        return self.readline()
</code></pre>

<p>At this point I really don't see where the problem is, so please feel free to nag me with questions and suggest possible solutions.</p>

<p>Many thanks in advance!</p>
","<p>I believe one problem is that the <code>Counter</code> object should receive as <code>initial_value</code> the AES block number, not the byte offset. In other words, you need to have:</p>

<pre><code>ctr = Counter.new(nbits=64,
                  initial_value=self.tell() % 16,
                  prefix=self._nonce)
</code></pre>

<p>That's needed because in AES CTR mode you increase the value each time you cross the AES data boundary (16 bytes).</p>

<p>That also means that the correct sequence for any <code>write</code> operation roughly is:</p>

<ol>
<li>Start the cipher object as shown above - in encryption mode.</li>
<li>Encrypt <code>self.tell() % 16</code> bytes of any data and throw away the result.</li>
<li>Encrypt the input data and write it to the file.</li>
</ol>

<p>Similarly for reading:</p>

<ol>
<li>Start the cipher object as shown above - in decryption mode.</li>
<li>Decrypt <code>self.tell() % 16</code> bytes of any data and throw away the result.</li>
<li>Decrypt the data read from the file.</li>
</ol>

<p><strike>From a quick look at the code, a second problem could also be that you use the same AES object for both encryption and decryption. You need two separate objects, one for each direction.</strike></p>
","157","<python><encryption><aes><encryption-symmetric><pycrypto>","0","1","1","2013-09-04 18:42:43","","0","","","","","2013-09-03 15:54:58",""
"55401090","Difference between PBE and PBKDF2 in Java","<p>I read in <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory"" rel=""nofollow noreferrer"">documentation</a> that <code>SecretKeyFactory</code> accepts both <code>PBEWith...</code> algorithms and <code>PBKDF2With...</code> algorithms. According to PKCS #5 (current version is 2.1 specified by <a href=""https://tools.ietf.org/html/rfc8018"" rel=""nofollow noreferrer"">RFC 8018</a>), PBE (Password-Based Encryption) uses PBKDF (Password-Based Key Derivation Function). Why would the generated key be different (or are they different)? Haven’t PBE covered the case for PBKDF?</p>
","","151","<java><encryption-symmetric><jce><pbkdf2>","0","","0","2019-03-28 15:14:33","","5","","","","","2019-03-28 15:14:33",""
"44098016","AES padding ambiguity","<p>I have been implementing AES in C and I am now finalising the program by implementing padding. Reading lots of other SO questions on the padding topic I have found that a popular way to do this is by filling each of the remaining places in the state with the number of places left. For example if I only had 12 bytes to encrypt, I would pad the remaining 4 bytes with 4. My question is when decrypting if I have a block which is full but ends in a 1, how do I know if this is one byte of padding or just the value 1?</p>

<p>DISCLAIMER: I know this program should never be used in production as it probably has all sorts of different insecurities. I am doing this for fun, not to encrypt top secret documents.</p>
","<p>What you're describing is the <a href=""https://en.wikipedia.org/wiki/Padding_(cryptography)#PKCS7"" rel=""nofollow noreferrer"">PKCS#7 padding</a>.</p>

<p>In order to disambiguate, you always need to have padding. Additionally, the plaintext for modes like ECB or CBC mode needs to be a multiple of the block size.</p>

<p>Both constraints put together lead to a simple solution: you <em>always</em> add padding up to the <em>next</em> multiple of the block size. If the plaintext is already a multiple of the block size, then you add a full block of padding where each byte represents 16 (for AES).</p>
","150","<encryption><aes><padding><encryption-symmetric>","1","5","1","2017-05-21 14:47:33","44098076","1","","","","","2017-05-21 14:25:51",""
"20081086","Must symmetric keys and initiliazation vectors always be 128, 192, or 256 bits?","<p>The following string contains 20 bytes (160 bits).  Do I have to make my keys and initialization vectors 128,192, or 256 or is there something I can do to make it 256 and keep the same key:</p>

<pre><code>    byte[] bbb = Encoding.ASCII.GetBytes(""abcdefghijklmnopqrst"");


  // Define other methods and classes here
  static string EncryptStringToBytes(string plainText, string Key, string IV)
    {
        // Check arguments. 
        if (plainText == null || plainText.Length &lt;= 0)
            throw new ArgumentNullException(""plainText"");
        if (Key == null || Key.Length &lt;= 0)
            throw new ArgumentNullException(""Key"");
        if (IV == null || IV.Length &lt;= 0)
            throw new ArgumentNullException(""Key"");
        string encrypted;
        // Create an RijndaelManaged object 
        // with the specified key and IV. 
        using (RijndaelManaged rijAlg = new RijndaelManaged())
        {
            rijAlg.Mode = CipherMode.CBC;
            rijAlg.BlockSize = 256;
            rijAlg.KeySize = 256;
            rijAlg.Key = Encoding.ASCII.GetBytes(Key);
            rijAlg.IV = Encoding.ASCII.GetBytes(IV);

            // Create a decrytor to perform the stream transform.
            ICryptoTransform encryptor = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV);

            // Create the streams used for encryption. 
            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {

                        //Write all data to the stream.
                        swEncrypt.Write(plainText);
                    }
                    encrypted = Convert.ToBase64String(msEncrypt.ToArray());
                }
            }
        }


        // Return the encrypted bytes from the memory stream. 
        return encrypted;

    }

    static string DecryptStringFromBytes(string cipherText,string Key, string IV)
    {
        // Check arguments. 
        if (cipherText == null || cipherText.Length &lt;= 0)
            throw new ArgumentNullException(""cipherText"");
        if (Key == null || Key.Length &lt;= 0)
            throw new ArgumentNullException(""Key"");
        if (IV == null || IV.Length &lt;= 0)
            throw new ArgumentNullException(""Key"");

        // Declare the string used to hold 
        // the decrypted text.
        string plaintext = null;

        // Create an RijndaelManaged object 
        // with the specified key and IV. 
        using (RijndaelManaged rijAlg = new RijndaelManaged())
        {
            rijAlg.Mode = CipherMode.CBC;
            rijAlg.BlockSize = 256;
            rijAlg.KeySize = 256;
            rijAlg.Key = Encoding.ASCII.GetBytes(Key);
            rijAlg.IV = Encoding.ASCII.GetBytes(IV);

            // Create a decrytor to perform the stream transform.
            ICryptoTransform decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);

            // Create the streams used for decryption. 
            using (MemoryStream msDecrypt = new MemoryStream(Convert.FromBase64String(cipherText)))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {

                        // Read the decrypted bytes from the decrypting stream 
                        // and place them in a string.
                        plaintext = srDecrypt.ReadToEnd();

                    }
                }
            }

        }

        return plaintext;

    }
</code></pre>
","<p>It depends on which implementation of <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.symmetricalgorithm%28v=vs.110%29.aspx"" rel=""nofollow""><code>System.Security.Cryptography.SymmetricAlgorithm</code></a> you're using. The legal key and block sizes are dependent upon the algorith. You can check the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.symmetricalgorithm.legalkeysizes%28v=vs.110%29.aspx"" rel=""nofollow""><code>LegalKeySizes</code></a> and <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.symmetricalgorithm.legalblocksizes%28v=vs.110%29.aspx"" rel=""nofollow""><code>LegalBlockSizes</code></a> property to check what sizes are supported by your particular algorithm. You can also use the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.symmetricalgorithm.validkeysize%28v=vs.110%29.aspx"" rel=""nofollow""><code>ValidKeySize()</code></a> method to check if a particular key size is valid for your algorithm.</p>

<p>IIRC, the IV needs to be sized the same size as the block size in use.</p>

<p>Also, normally, you'd gen up an instance of your particular algorithm and let it create a random key and IV, which you can then save for later use.</p>
","143","<c#><.net><encryption-symmetric><rijndael>","0","0","1","2013-11-19 20:23:36","","4","","33690","","2013-11-19 20:22:07","2013-11-19 20:11:16",""
"47371980","AWS Encryption SDK Header Mismatch between Regions","<p>I'm using the <a href=""https://github.com/awslabs/aws-encryption-sdk-java"" rel=""nofollow noreferrer"">Amazon Encryption SDK</a> to encrypt data before storing it in a database. I'm also using <a href=""https://aws.amazon.com/kms/"" rel=""nofollow noreferrer"">Amazon KMS</a>. As part of the encryption process, the SDK stores the <em>Key Provider ID</em> of the data key used to encrypt in the generated cipher-text header. </p>

<p>As described in the documentation here <a href=""http://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#header-structure"" rel=""nofollow noreferrer"">http://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#header-structure</a></p>

<blockquote>
  <p>The encryption operations in the AWS Encryption SDK return a single
  data structure or message that contains the encrypted data
  (ciphertext) and all encrypted data keys. To understand this data
  structure, or to build libraries that read and write it, you need to
  understand the message format.</p>
  
  <p>The message format consists of at least two parts: a header and a
  body. In some cases, the message format consists of a third part, a
  footer.</p>
</blockquote>

<p>The Key Provider ID value contains the Amazon Resource Name (ARN) of the AWS KMS customer master key (CMK).</p>

<p>Here is where the issue comes in. Right now I have two different KMS regions available for encryption. Each Key Provider ID has the exact same Encrypted Data Key value. So either key could be used to decrypt the data. However, the issue is with the ciphertext headers. Let's say I have KMS1 and KMS2. If I encrypt the data with the key provided by KMS1, then the Key Provider ID will be stored in the ciphertext header. If I attempt to decrypt the data with KMS2, even though the Encrypted Data Key is the same, the decryption will fail because the header does not contain the Key Provider for KMS2. It has the Key Provider ID for KMS1. It fails with this error: </p>

<pre><code>com.amazonaws.encryptionsdk.exception.BadCiphertextException: Header integrity check failed.
        at com.amazonaws.encryptionsdk.internal.DecryptionHandler.verifyHeaderIntegrity(DecryptionHandler.java:312) ~[application.jar:na]
        at com.amazonaws.encryptionsdk.internal.DecryptionHandler.readHeaderFields(DecryptionHandler.java:389) ~[application.jar:na]
 ...
com.amazonaws.encryptionsdk.internal.DecryptionHandler.verifyHeaderIntegrity(DecryptionHandler.java:310) ~[application.jar:na]
        ... 16 common frames omitted
Caused by: javax.crypto.AEADBadTagException: Tag mismatch!
</code></pre>

<p>It fails to verify the header integrity and fails. This is not good, because I was planning to have multiple KMS's in case of one region KMS failing. We duplicate our data across all our regions, and we thought that we could use any KMS from the regions to decrypt as long as the encrypted data keys match. However, it looks like I'm locked into using only the original KMS that was encrypting the data? How on earth can we scale this to multiple regions if we can only rely on a single KMS? </p>

<p>I could include all the region master keys in the call to encrypt the data. That way, the headers would always match, although it would not reflect which KMS it's actually using. However, that's also not scalable, since we could add/remove regions in the future, and that would cause issues with all the data that's already encrypted.  </p>

<p>Am I missing something? I've thought about this, and I want to solve this problem without crippling any integrity checks provided by the SDK/Encryption.</p>

<p>Update: </p>

<p>Based on a comment from @jarmod</p>

<p>Using an alias doesn't work either because we can only associate an alias to a key in the region, and it stores the resolved name of the key ARN it's pointing to anyway. </p>

<p>I'm reading <a href=""https://d0.awsstatic.com/whitepapers/aws-kms-best-practices.pdf"" rel=""nofollow noreferrer"">this document and it says</a> </p>

<blockquote>
  <p>Additionally, envelope encryption can help to design your application
  for disaster recovery. You can move your encrypted data as-is between
  Regions and only have to reencrypt the data keys with the
  Region-specific CMKs</p>
</blockquote>

<p>However, that's not accurate at all, because the encryption SDK will fail to decrypt on a different region because the Key Provider ID of the re-encrypted data keys will be totally different! </p>
","<p>Apologies since I'm not familiar with Java programming, but I believe there is confusion how you are using the KMS CMKs to encrypt (or decrypt) the data using keys from more than one-region for DR.</p>

<p>When you use multiple master keys to encrypt plaintext, any one of the master keys can be used to decrypt the plaintext. Note that, only one master key (let's say MKey1) generates the plaintext data key which is used to encrypt the data. This plaintext data key is then encrypted by the other master key (MKey2) as well.</p>

<p>As a result, you will have encrypted data + encrypted data key (using MKey1) + encrypted data key (using MKey2).</p>

<p>If for some reason MKey1 is unavailable and you want to decrypt the ciphertext, SDK can be used to decrypt the encrypted data key using MKey2, which can decrypt the ciphertext.</p>

<p>So, yes, you have to specify multiple KMS CMK ARN in your program if you want to use multiple KMS. The document shared by you has an <a href=""http://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/java-example-code.html#java-example-multiple-providers"" rel=""nofollow noreferrer"">example</a> as well which I'm sure you are aware of.</p>
","142","<amazon-web-services><aws-sdk><encryption-symmetric><amazon-kms><aws-regions>","0","0","1","2017-11-19 09:46:42","","3","","138228","","2017-11-19 04:33:52","2017-11-18 23:00:52",""
"54470162","Generate a symmetric key on iOS using Security.framework","<p>I'm struggling to generate a symmetric key in iOS using the security framework. There is a method <code>SecKeyGenerateSymmetric()</code> in <code>SecKey.h</code> but its for macOS only. The only thing I see available is <code>SecKeyGeneratePair()</code> which is for asymmetric encryption.</p>

<p>Also from reading this <a href=""https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/using_keys_for_encryption"" rel=""nofollow noreferrer"">documentation</a> it looks the only way to do symmetric encryption is by generating an asymmetric key pair and calling <code>SecKeyCreateEncryptedData()</code> with the public key and behind the scenes a symmetric key is generated but you don't have access to it. I need to have access to the symmetric key.</p>

<p>If anyone has experience doing symmetric encryption on iOS I would be grateful of some guidance.</p>
","","138","<ios><encryption><encryption-symmetric><security-framework>","1","","0","2019-01-31 22:46:58","","1","","603977","","2019-01-31 22:46:58","2019-01-31 22:29:44",""
"55370699","Getting different result (cyphertext) while using AES in Java and golang","<p>I am trying to replicate the java code for AES encryption into Golang.
However I am not getting the same output in golang</p>

<p>I tried below code:</p>

<p><strong>Java Code:</strong></p>

<pre><code>package EncryptionTest;

import java.security.Key;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class EncryptionDecryptionAES {

    static Cipher cipher;

    public static void main(String[] args) throws Exception {
        Key secretKey;
        secretKey = (Key)new SecretKeySpec(""0123456789012345"".getBytes(), ""AES"");
        cipher = Cipher.getInstance(""AES"");
        String plainText = ""AES Symmetric Encryption Decryption"";
        System.out.println(""Plain Text Before Encryption: "" + plainText);
        String encryptedText = encrypt(plainText, secretKey);
        System.out.println(""Encrypted Text After Encryption: "" + encryptedText);
        String decryptedText = decrypt(encryptedText, secretKey);
        System.out.println(""Decrypted Text After Decryption: "" + decryptedText);
    }

    public static String encrypt(String plainText, Key secretKey) throws Exception {
        byte[] plainTextByte = plainText.getBytes();
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedByte = cipher.doFinal(plainTextByte);
        Base64.Encoder encoder = Base64.getEncoder();
        String encryptedText = encoder.encodeToString(encryptedByte);
        return encryptedText;
    }

    public static String decrypt(String encryptedText, Key secretKey) throws Exception {
        Base64.Decoder decoder = Base64.getDecoder();
        byte[] encryptedTextByte = decoder.decode(encryptedText);
        cipher.init(Cipher.DECRYPT_MODE, secretKey);
        byte[] decryptedByte = cipher.doFinal(encryptedTextByte);
        String decryptedText = new String(decryptedByte);
        return decryptedText;
    }
}
</code></pre>

<p><strong>Java code output:</strong>
<em>Plain Text Before Encryption: AES Symmetric Encryption Decryption
Encrypted Text After Encryption: vSmrgH3qU+qEq+3ui0YvwCa6PDBcMyhgOlbh3+zzM+cON6feLk2u1iPW7lITD3vn
Decrypted Text After Decryption: AES Symmetric Encryption Decryption</em></p>

<p><strong>Golang Code:</strong></p>

<pre><code>package main

import (
    ""crypto/aes""
    ""crypto/cipher""
    ""encoding/base64""
    ""fmt""
)

const NONCESIZE = 12

func main() {
    key := []byte(""0123456789012345"")
    plaintext := []byte(""AES Symmetric Encryption Decryption"")
    block, err := aes.NewCipher(key)
    if err != nil {
        panic(err.Error())
    }
    nonce := make([]byte, NONCESIZE)
    aesgcm, err := cipher.NewGCM(block)
    if err != nil {
        panic(err.Error())
    }
    ciphertext := aesgcm.Seal(nil, nonce, plaintext, nil)
    fmt.Println(""Encrypted Text is : "", base64.StdEncoding.EncodeToString(ciphertext))

}
</code></pre>

<p><strong>Golang Code output:</strong>
<em>Encrypted Text is :  7UMh49c5Wqb2BzlttKBEnq5g4fxMK9oJs1EUDIgWzVwlY28k+qd/oFG9SJckBsaX6DHp</em></p>
","<p>In the go code, you are using AES in GCM mode with 12 bytes of zero as IV, but in java code you are using default mode of AES which is not the same in different java versions.</p>

<p>By using GCM mode(Provided in BouncyCastle) and setting the same IV(12 bytes of zero) I got same output:</p>

<pre><code>package EncryptionTest;

import org.bouncycastle.jce.provider.BouncyCastleProvider;

import java.security.Key;
import java.security.Security;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class EncryptionDecryptionAES {

    static Cipher cipher;

    public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());


        Key secretKey;
        secretKey = (Key)new SecretKeySpec(""0123456789012345"".getBytes(), ""AES"");

        cipher = Cipher.getInstance(""AES/GCM/NoPadding"", ""BC"");

        String plainText = ""AES Symmetric Encryption Decryption"";
        System.out.println(""Plain Text Before Encryption: "" + plainText);
        String encryptedText = encrypt(plainText, secretKey);
        System.out.println(""Encrypted Text After Encryption: "" + encryptedText);
        String decryptedText = decrypt(encryptedText, secretKey);
        System.out.println(""Decrypted Text After Decryption: "" + decryptedText);
    }

    public static String encrypt(String plainText, Key secretKey) throws Exception {
        byte[] plainTextByte = plainText.getBytes();


        byte[] iv = new byte[12];
        IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivParameterSpec);

        byte[] encryptedByte = cipher.doFinal(plainTextByte);
        Base64.Encoder encoder = Base64.getEncoder();
        String encryptedText = encoder.encodeToString(encryptedByte);
        return encryptedText;
    }

    public static String decrypt(String encryptedText, Key secretKey) throws Exception {
        Base64.Decoder decoder = Base64.getDecoder();
        byte[] encryptedTextByte = decoder.decode(encryptedText);

        byte[] iv = new byte[12];
        IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.DECRYPT_MODE, secretKey, ivParameterSpec);

        byte[] decryptedByte = cipher.doFinal(encryptedTextByte);
        String decryptedText = new String(decryptedByte);
        return decryptedText;
    }
}
</code></pre>

<p>Output:</p>

<pre><code>Plain Text Before Encryption: AES Symmetric Encryption Decryption
Encrypted Text After Encryption: 7UMh49c5Wqb2BzlttKBEnq5g4fxMK9oJs1EUDIgWzVwlY28k+qd/oFG9SJckBsaX6DHp
Decrypted Text After Decryption: AES Symmetric Encryption Decryption
</code></pre>
","137","<java><go><aes><encryption-symmetric>","0","2","1","2019-03-27 07:35:44","55371966","3","","","","","2019-03-27 05:59:40",""
"27602430","How to get TLS versions supporting any given cipher suite?","<p>I am working on securing the connection using cipher suite (in my case its - TLS_PSK_WITH_AES_128_CBC_SHA).</p>

<p>On ssl socket I would like to explicitely enable all those TLS versions, which would support the cipher suite under consideration.</p>

<p>I am unable to find any mapping between TLS version vs Supported Cipher suite.</p>

<p>Any help?</p>
","<p>The suites are defined together with the various SSL/TLS versions. <a href=""http://en.wikipedia.org/wiki/Transport_Layer_Security"" rel=""nofollow"">Wikipedia</a> provides you with a good overview and with links to all necessary standards.</p>

<p>In your case: TLS_PSK_WITH_AES_128_CBC_SHA is defined for SSL3.0 already.</p>
","136","<ssl><encryption><java-8><encryption-symmetric>","0","0","1","2014-12-22 12:33:02","","0","","","","","2014-12-22 12:06:59",""
"36680037","CipherOutputStream corrupting headers in Android","<p>I'm using a simple CipherInput/OutputStream to try to encrypt/decrypt files in android.</p>

<p>The problem I'm having is that it seems to be corrupting the first few bytes of the file but not the rest.  Here's an example of an output from a simple text file:</p>

<p>Original Text:</p>

<pre><code>""Test for Android cipher. The quick brown fox jumps over the lazy dog.""
</code></pre>

<p>Cycled through Encryption and Decryption:</p>

<pre><code>@ÍØJ­b¢çc°ÌHOšpher. The quick brown fox jumps over the the lazy dog. 
</code></pre>

<p>Here's my code:</p>

<pre><code>public static SecretKey generateKey(Context c, char[] passphraseOrPin) throws NoSuchAlgorithmException, InvalidKeySpecException {
    // Number of PBKDF2 hardening rounds to use. Larger values increase
    // computation time. You should select a value that causes computation
    // to take &gt;100ms.
    byte[] salt = Settings.Secure.getString(c.getContentResolver(),
            Settings.Secure.ANDROID_ID).getBytes();

    final int iterations = 1000;

    final int outputKeyLength = 128;

    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    KeySpec keySpec = new PBEKeySpec(passphraseOrPin, salt, iterations, outputKeyLength);
    SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
    Log.d(""HIDEMYPICS"",""Secret Key: "" + toHex(secretKey.getEncoded()) );
    return secretKey;
}

public static boolean decryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString().replace("".epf"", """"));
        FileOutputStream fos = new FileOutputStream(ef);

        Log.d(""HIDEMYPICS"",""Decrypting: "" + f.toString());

        SecretKey key = generateKey(context, keyphrase.toCharArray());
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.DECRYPT_MODE, key);
        // Wrap the output stream
        CipherOutputStream cos = new CipherOutputStream(fos, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = fis.read(d)) != -1) {
            cos.write(d, 0, b);
        }
        // Flush and close streams.
        cos.flush();
        cos.close();
        fis.close();

        Log.d(""HIDEMYPICS"",""Decrypted to: "" + ef.toString());
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    }
    return false;
}

public static boolean encryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString() + "".epf"");
        FileOutputStream fos = new FileOutputStream(ef);

        Log.d(""HIDEMYPICS"",""Encrypting: "" + f.toString());

        SecretKey key = generateKey(context, keyphrase.toCharArray());
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        // Wrap the output stream
        CipherOutputStream cos = new CipherOutputStream(fos, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = fis.read(d)) != -1) {
            cos.write(d, 0, b);
        }
        // Flush and close streams.
        cos.flush();
        cos.close();
        fis.close();
        Log.d(""HIDEMYPICS"",""Encrypted to: "" + ef.toString());
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    }
    return false;
}
</code></pre>

<p>UPDATE:</p>

<p>Was advised to explicitly add a random IV to the cipher setup and added/modified the following lines of code to facilitate it:</p>

<pre><code>SecureRandom r = new SecureRandom();
        byte[] ivBytes = new byte[16];
        r.nextBytes(ivBytes);

        SecretKey key = generateKey(context, keyphrase.toCharArray());
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(ivBytes));
</code></pre>

<p>Ended up with the same result. First few bytes of the text file were still corrupted.</p>

<p>FINAL ANSWER:</p>

<p>Not sure what I did, but per suggestions below I had tried a static IV and it had still exhibited the same behavior, but I moved the declaration and something happened; probably had a typo somewhere. The issue is now resolved though and here's the final working code. Thanks all that helped out!</p>

<pre><code>private static final byte[] ivBytes = {109,15,57,79,75,112,50,91,18,18,107,127,65,68,12,69};

public static SecretKey generateKey(Context c, char[] passphraseOrPin) throws NoSuchAlgorithmException, InvalidKeySpecException {
    // Number of PBKDF2 hardening rounds to use. Larger values increase
    // computation time. You should select a value that causes computation
    // to take &gt;100ms.
    byte[] salt = Settings.Secure.getString(c.getContentResolver(),
            Settings.Secure.ANDROID_ID).getBytes();

    final int iterations = 1000;

    final int outputKeyLength = 128;

    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    KeySpec keySpec = new PBEKeySpec(passphraseOrPin, salt, iterations, outputKeyLength);
    SecretKey secretKey = secretKeyFactory.generateSecret(keySpec);
    return secretKey;
}

public static boolean decryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString().replace("".epf"", """"));
        FileOutputStream fos = new FileOutputStream(ef);

        SecretKey key = generateKey(context, keyphrase.toCharArray());
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");

        cipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(ivBytes));
        // Wrap the output stream
        CipherInputStream cis = new CipherInputStream(fis, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = cis.read(d)) != -1) {
            fos.write(d, 0, b);
            fos.flush();
        }
        // Flush and close streams.
        fos.close();
        cis.close();

        f.delete();
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    } catch (InvalidAlgorithmParameterException e) {
        e.printStackTrace();
    }
    return false;
}

public static boolean encryptFileFromUri(Context context, Uri file, String keyphrase) {
    try {
        File f = new File(getRealPathFromURI(context, file));
        FileInputStream fis = new FileInputStream(f);

        File ef = new File(f.toString() + "".epf"");
        FileOutputStream fos = new FileOutputStream(ef);

        SecretKey key = generateKey(context, keyphrase.toCharArray());
        Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(ivBytes));
        // Wrap the output stream
        CipherOutputStream cos = new CipherOutputStream(fos, cipher);
        // Write bytes
        int b;
        byte[] d = new byte[8];
        while ((b = fis.read(d)) != -1) {
            cos.write(d, 0, b);
            cos.flush();
        }
        // Flush and close streams.
        cos.close();
        fis.close();
        f.delete();
        return true;
    } catch (IOException e){
        e.printStackTrace();
    } catch (NoSuchPaddingException e) {
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (InvalidKeySpecException e) {
        e.printStackTrace();
    } catch (InvalidAlgorithmParameterException e) {
        e.printStackTrace();
    }
    return false;
}
</code></pre>
","<p>Explicitly set a random IV and include it with your ciphertext.</p>
","135","<android><encryption><aes><encryption-symmetric><pbkdf2>","1","1","1","2016-04-18 22:42:01","36683479","0","3","254304","","2016-04-18 22:42:01","2016-04-17 17:49:49",""
"11627729","Is it necessary to use Initialization Vector at the time of Encryption and Decryption?","<p>I am newbie to C# and I have a task to encrypt the files in C# and put it onto server (Mentioned that use 256-bit AES encryption). Whoever wants it, they should Decrypt it first and then use it.</p>

<p>But I have some doubts related to it as: I am using AESCryptoServiceProvider Class. In that I am using the method <code>CreateEncryptor(Byte[], Byte[])</code>. But the question I want to ask is, If I encrypt the file using key as well as IV, then I have to share the both with the user Key and IV.</p>

<p>What should I do in such case? I want that I should use only key at the time of encryption and decryption. How can I do that?</p>

<p>I am totally confused about it. Please suggest me some steps over it. </p>

<p>Thanks</p>
","<p>As far as i know, the IV doesn't need to be secret, so you could store it together with the encrypted data on the server. Just make sure that each IV is random and that you don't reuse them.   </p>

<p>For more details on the IV, look here:<br>
<a href=""http://en.wikipedia.org/wiki/Initialization_vector"" rel=""nofollow"">http://en.wikipedia.org/wiki/Initialization_vector</a></p>
","134","<c#><encryption-symmetric>","0","1","1","2012-07-24 09:47:16","11628012","1","","1073129","","2012-07-24 09:47:16","2012-07-24 09:17:11",""
"17012295","Encrypting data symmetrically and asymmetrically","<p>As far as I have learned so far, asymmetric encryption is too costly for long data. Additionally, from a technical perspective, it's not even possible to encrypt arbitrarily large portions of data (the size of the data is limited by the size of the key being used).</p>

<p>As far as I know the usual workaround is to create a (random) key, use that key to encrypt the data symmetrically, and then only encrypt this key using an asymmetric algorithm.</p>

<p>Now I have two questions:</p>

<ol>
<li>Is the approach I described so far correct?</li>
<li>What do I do with the encrypted key? Of course, I store or send the encrypted data somewhere, but what about the key? If I understand it correctly, I need to store this key as well, right?</li>
</ol>
","<p>You are basically correct.  Create a random key.  Encrypt the key itself with the Public Key of the person at the other end, Bob.  Send Bob the encrypted key, which they will be able to decrypt with their Private Key.  This is the asymmetric encryption part.</p>

<p>You also use your key to encrypt that large amount of data (but not too large).  Now you send Bob the encrypted data.  Bob has the encrypted data and the (decrypted) key and so can use symmetric decryption to extract the data from the cyphertext you sent.</p>

<p>Once you have sent the data and key, you should probably securely destroy the key and not use it again unless you have a good reason to keep it.  Generate a new key the next time you need to send something.  Even if you are sending something to Bob again, use a new key.  Even if you are resending the same data to Bob again, use a new key.  Sending too much data on a single key can allow attacks on your data.</p>
","132","<encryption><encryption-symmetric><encryption-asymmetric>","0","1","1","2013-06-09 20:30:55","17013880","0","","","","","2013-06-09 17:30:48","2014-03-17 13:11:54"
"31901764","C# string-bytes conversion after symmetric encryption","<p>I've been working on symmetric encryption, but suddenly.. wild error appeared. I can't convert back string from bytes. I've used similar approaches on data manipulation with bytes many times before, but this time I'm stuck. First ofc I used <strong>Encoding.UTF8.GetBytes()</strong> and <strong>Encoding.UTF8.GetString()</strong> byte after mysterious error, thought maybe this is something culture based inside .net framework. So i copied ""good old"" code for string-byte[] conversion just to check what's wrong. And it seem nothing should be wrong, but it's simply not working.</p>

<p>Ofc first impression is that it is somehow related to symmetric encryption, but I double check bytes which comes in and out from them, and they are equal..</p>

<p>(additional info: I'm currently working on .net 4 client profile)</p>

<p>Any ideas?</p>

<pre><code>public class Test
{
    public static byte[] GetBytesFromString(string str)
    {
        var bytes = new byte[str.Length * sizeof(char)];
        System.Buffer.BlockCopy(str.ToCharArray(), 0, bytes, 0, bytes.Length);
        return bytes;
    }

    public static string GetStringFromBytes(byte[] bytes)
    {
        var chars = new char[bytes.Length / sizeof(char)];
        System.Buffer.BlockCopy(bytes, 0, chars, 0, bytes.Length);
        return new string(chars);
    }

    public static bool ArraysAreEqual&lt;T&gt;(T[] array0, T[] array1)
    {
        if (array0.Length != array1.Length) return false;
        return !array0.Where((t, i) =&gt; t.Equals(array1[i])).Any();
    }

    public static void Run()
    {
        var aes = new System.Security.Cryptography.AesCryptoServiceProvider();
        byte[] key = aes.Key;
        byte[] iv = aes.IV;

        string text = ""hello World!""; // initial text

        byte[] plainBytes = GetBytesFromString(text);       // get some bytes
        string plainText = GetStringFromBytes(plainBytes);  // reverse bytes back;
        if (string.Compare(text, plainText, StringComparison.InvariantCulture) != 0)    // check strings
            throw new NotSupportedException();
        System.Diagnostics.Debug.WriteLine(plainText);      // all good!

        // up to this point I assume GetBytesFromString&lt;-&gt;GetStringFromBytes methods works fine

        byte[] encrytpedBytes = AES.AesEncrypt(plainBytes, key, iv);       // implementation of encryption
        byte[] decryptedBytes = AES.AesDecrypt(encrytpedBytes, key, iv);   // implementation of decryption

        if (ArraysAreEqual(encrytpedBytes, decryptedBytes)) // check arrays
            throw new NotSupportedException();
        // I even print them to check manually.. by my eyes..
        System.Diagnostics.Debug.WriteLine(System.BitConverter.ToString(encrytpedBytes));   
        System.Diagnostics.Debug.WriteLine(System.BitConverter.ToString(decryptedBytes));

        string decrytpedText = GetStringFromBytes(decryptedBytes);  // and..... we get incorrect string! :/
        System.Diagnostics.Debug.WriteLine(decrytpedText);
    }
}
</code></pre>

<p>output:</p>

<pre><code>hello World!
22-CD-FF-14-69-37-0C-CC-44-C6-F6-61-95-1A-AA-0A
22-CD-FF-14-69-37-0C-CC-44-C6-F6-61-95-1A-AA-0A
촢ᓿ㝩찌완懶᪕પ
</code></pre>

<p>Thank You!</p>
","","130","<c#><string><byte><type-conversion><encryption-symmetric>","0","","0","2015-08-09 07:12:03","","4","","","","","2015-08-09 07:04:39",""
"27877041","AES-RSA-Hybrid - AES BadPaddingException when using on different computers","<p>I'm getting an ""javax.crypto.BadPaddingException: Given final block not properly padded"" when using a client/server program on different computers.<br>
It works, running both client and server on the same computer.<br>
The server is running Debian 7, the computer OS X 10.10.1</p>

<p>Client:</p>

<pre><code>    Socket socket;
    InputStream in = socket.getInputStream();
    OutputStream out = socket.getOutputStream();

    socket.setSoTimeout(10 * 1000);

    System.out.println(""Encrypting..."");

    RSA rsa = new RSA(new File(""public.key""), Cipher.ENCRYPT_MODE);
    AES aes = new AES(Cipher.DECRYPT_MODE);

    byte[] wrappedKey = rsa.wrap(aes.getKey());

    out.write(wrappedKey);

    int length = ByteBuffer.wrap(Utils.readBytes(in, 4)).getInt();

    aes.decrypt(Utils.readBytes(in, length)); // Here is the exception thrown
</code></pre>

<p>Server:</p>

<pre><code>    RSA rsa = main.getRSAEncryption();
    SecretKey session = rsa.unwrap(Utils.readBytes(in, 256));

    AES aes = new AES(Cipher.ENCRYPT_MODE, session);
    byte[] data = aes.encrypt(Utils.toByteArray(file));

    out.write(ByteBuffer.allocate(4).putInt(data.length).array());
    out.write(data);
    out.flush();
</code></pre>

<p>RSA and AES are own util classes. What they're doing should be clear.</p>
","","130","<java><aes><java-8><public-key-encryption><encryption-symmetric>","0","","0","2015-01-10 14:04:00","","6","0","","","","2015-01-10 14:04:00",""
"40527375","symmetric encryption in c# resembles JAVA","<pre><code>private static byte[] encryptData(ByteArrayOutputStream data, byte[] symmetricKey) throws EncryptionException {
        try {
            SecretKey secKey = new SecretKeySpec(symmetricKey, ""AES"");
            Cipher cipher = Cipher.getInstance(""AES"");
            cipher.init(Cipher.ENCRYPT_MODE, secKey);
            return cipher.doFinal(data.toByteArray());
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | IllegalBlockSizeException |
                InvalidKeyException |
                BadPaddingException e) {
            throw new EncryptionException(e);
        }
    }
</code></pre>

<p>I have a situation where I need to encrypt data using .NET and decrypt the same data using JAVA. Essentially, I need to rewrite the above encryption method in .NET. </p>

<pre><code>public byte[] Encrypt(byte[] key, byte[] plainText)
        {
            using (AesCryptoServiceProvider aesProvider = new AesCryptoServiceProvider())
            {
                using (ICryptoTransform encryptor = aesProvider.CreateEncryptor(key, magicIV))
                {
                    using (MemoryStream ms = new MemoryStream())
                    {
                        using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
                        {
                            cs.Write(plainText, 0, plainText.Length);
                        }
                        byte[] cipherText = ms.ToArray();
                        return cipherText;
                    }
                }
            }
        }
</code></pre>

<p>The above code I used somewhere mandates IV which JAVA is not asking for. What is the IV used in JAVA code?</p>

<p>I tried many links which didn't work.
<a href=""https://stackoverflow.com/questions/7872771/symmetric-encryption-between-net-and-java"">Symmetric Encryption between .NET and Java</a></p>

<p>Please help</p>
","<p>If your current Java decryption code also does not ask for an IV (and your decryption returns the same data you encrypted) then <code>Cipher.getInstance(""AES"")</code> is returning an object using the ECB block mode.</p>

<p>.NET symmetric algorithms default to the CBC block mode, which requires an IV.</p>

<p>You have a couple of options:</p>

<ul>
<li>Set <code>aesProvider.Mode = CipherMode.ECB</code> before calling <code>CreateEncryptor</code>.

<ul>
<li>You probably don't want this, see the penguin at <a href=""https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Common_modes"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Common_modes</a>.</li>
</ul></li>
<li>Pass <code>aesProvider.IV</code> to the IV parameter of <code>CreateEncryptor</code>.  The IV property will make a cryptographically random value on the first read if it's not set.

<ul>
<li>You will need to pass this data to the decryption routine, which should then use ""AES/CBC/PKCS5Padding"", and set the IV however one does that in Java.</li>
<li>One common method of transport is to simply prepend the data to the ciphertext, then just pick off the first 16 bytes at decryption time.</li>
<li>DO NOT use a fixed value for an IV, because it's then almost the same as ECB.</li>
</ul></li>
</ul>
","128","<java><c#><.net><encryption><encryption-symmetric>","0","2","1","2016-11-10 18:45:24","","2","2","-1","","2017-05-23 12:24:45","2016-11-10 12:14:06",""
"53767179","AES GCM - ciphertext is different everytime","<p>I have the following code in python:</p>

<pre><code>from Cryptodome.Cipher import AES

key = b'\x19\x3c\x04\x27\xf6\xa2\x1a\x08\x7f\xb0\x1c\xe9\xa7\x92\x3d\xd8\xe5\xc7\xae\x98\xf5\x0b\xf4\xa3\x7b\x4f\xd6\x76\x95\xd3\xe0\xd9'
data = b'\x47\x56\x64\xc1\x54\xe7\xa1\xed\x92\x4b\x26\x06\x6f\x4e\x95\x30\xea\xc4\x08\xf7\xdc\x69\x1c\x38\x38\xff\x38\x58\x50\x78\x9f\xd9\x32\xea\x86\xcd\x8c\x6d\x8f\x17\x30\x2a\xae\x6e\xa1\xc6\x6d'

header = b'\xdb\xd2\xed\x76\x3c\x50\xf2\x7c\xe3\xbe\x78\xa9\xc3\x6b'

cipher = AES.new(key, AES.MODE_GCM)
cipher.update(header)
cipherText, tag = cipher.encrypt_and_digest(data)

print(cipherText)
</code></pre>

<p>The ciphertext seemed to be changing everytime.</p>

<p>Any idea why that is?</p>
","","120","<encryption><encryption-symmetric><aes-gcm>","0","","0","2018-12-13 17:26:47","","4","","","","","2018-12-13 17:26:47",""
"34520651","File handling messes with symmetric client-server communication","<p>I have written two programs that implement server-client communication with symmetric encryption. They seem to do their job: the client asks for a message,encrypts it with an AES_key, sends it to the server, which decrypts it and sends it back.
 Here is the code for the server: </p>

<pre><code>/*
C socket server example using sockets and symmetric encryption
compile with gcc server.c -o server -lssl -lcrypto
*/

#include&lt;stdio.h&gt;
#include&lt;string.h&gt;    //strlen
#include&lt;sys/socket.h&gt;
#include&lt;arpa/inet.h&gt; //inet_addr
#include&lt;unistd.h&gt;    //write
#include &lt;openssl/aes.h&gt;
#include &lt;openssl/rsa.h&gt;
#include &lt;openssl/evp.h&gt;

int main(int argc , char *argv[])
{

static const unsigned char key[] = {""hello""};
int socket_desc , client_sock , c , read_size;
struct sockaddr_in server , client;
unsigned char client_message[40];
unsigned char dec_message[16];

//Create socket
socket_desc = socket(AF_INET , SOCK_STREAM , 0);
if (socket_desc == -1)
{
    printf(""Could not create socket"");
}
puts(""Socket created"");

//Prepare the sockaddr_in structure
server.sin_family = AF_INET;
server.sin_addr.s_addr = INADDR_ANY;
server.sin_port = htons( 8888 );

//Bind
if( bind(socket_desc,(struct sockaddr *)&amp;server , sizeof(server)) &lt; 0)
{
    //print the error message
    perror(""bind failed. Error"");
    return 1;
}
puts(""bind done"");

//Listen
listen(socket_desc , 3);

//Accept and incoming connection
puts(""Waiting for incoming connections..."");
c = sizeof(struct sockaddr_in);

//accept connection from an incoming client
client_sock = accept(socket_desc, (struct sockaddr *)&amp;client, (socklen_t*)&amp;c);
if (client_sock &lt; 0)
{
    perror(""accept failed"");
    return 1;
}
puts(""Connection accepted"");

//create decryption key
AES_KEY aes_key;
AES_set_decrypt_key((const unsigned char*) key, 128, &amp;aes_key);

//Receive a message from client


while( (read_size = recv(client_sock , client_message , 2000 , 0)) &gt; 0 )
{

    //decry message
    AES_decrypt((const unsigned char*)client_message,dec_message,(const AES_KEY *)&amp;aes_key);
    //Send the message back to client
write(client_sock , dec_message , strlen(dec_message));
}

if(read_size == 0)
{
    puts(""Client disconnected"");
    fflush(stdout);
}
else if(read_size == -1)
{
    perror(""recv failed"");
}

return 0;
}
</code></pre>

<p>Here is the code for the client:</p>

<pre><code>/*
C ECHO client example using sockets and symmetric encryption
*/
#include&lt;stdio.h&gt; //printf
#include&lt;string.h&gt;    //strlen
#include&lt;sys/socket.h&gt;    //socket
#include&lt;arpa/inet.h&gt; //inet_addr
#include&lt;unistd.h&gt;    //write
#include ""openssl/aes.h""
#include &lt;openssl/rsa.h&gt;
#include &lt;openssl/evp.h&gt;

int main(int argc , char *argv[])
{
static const unsigned char key[] = {""hello""};
int sock;
struct sockaddr_in server;




//Create socket
sock = socket(AF_INET , SOCK_STREAM , 0);
if (sock == -1)
{
    printf(""Could not create socket"");
}
puts(""Socket created"");

server.sin_addr.s_addr = inet_addr(""127.0.0.1"");
server.sin_family = AF_INET;
server.sin_port = htons( 8888 );

//Connect to remote server
if (connect(sock , (struct sockaddr *)&amp;server , sizeof(server)) &lt; 0)
{
    perror(""connect failed. Error"");
    return 1;
}

puts(""Connected\n"");
//create key
AES_KEY aes_key;
AES_set_encrypt_key((const unsigned char*)key, 128, &amp;aes_key);

//keep communicating with server
while(1)
{
    unsigned char enc_message[40]={0};
    unsigned char message[16]={0};
    unsigned char server_reply[40]={0};
     fflush(stdin);
fflush(stdout);
    printf(""Enter message : "");
    scanf(""%s"" , message);
    //encrypt message
    AES_encrypt((const unsigned char*)message,enc_message,(const AES_KEY *)&amp;aes_key);
    //Send some data
    if( send(sock , enc_message , strlen(enc_message) , 0) &lt; 0)
    {
        puts(""Send failed"");
        return 1;
    }

    //Receive a reply from the server
    if( recv(sock , server_reply , 2000 , 0) &lt; 0)
    {
        puts(""recv failed"");
        break;
    }

    printf(""Server reply : %s \n"",server_reply);

}

close(sock);
return 0;
}
</code></pre>

<p>Now, I'd like to exchange the key with public encyption, so I want to load two files for each end: its private and the public of the other one. I've already created them. </p>

<p>So, adding the following code(at the beginning of main) to server works:</p>

<pre><code>RSA* pRSAPRI = RSA_new();
RSA* pRSAPRI2 = RSA_new();
OpenSSL_add_all_algorithms();
OpenSSL_add_all_ciphers();
ERR_load_crypto_strings();
RSA*    pRSAserver;
RSA*    pRSAclientimport;
FILE*   f1;
FILE*   f2;

//load public key of client
f1 = fopen(""client_public.pem"", ""r"");
if (f1==NULL)
{
  printf(""could not open file \n"");
}
pRSAclientimport = PEM_read_RSAPublicKey(f1, &amp;pRSAPRI, NULL, NULL);
fclose(f1);
 //load private key of server
f2 = fopen(""server_private.pem"", ""r"");
if (f2==NULL)
{
  printf(""could not open file \n"");
}
pRSAserver = PEM_read_RSAPrivateKey(f2, &amp;pRSAPRI2, NULL, ""1234"");
fclose(f2);
</code></pre>

<p>However, adding this piece of code to client messes with the program, so that the answer from the server is not correct:</p>

<pre><code> RSA* pRSAPRI2 = RSA_new();
RSA* pRSAPRI = RSA_new();
OpenSSL_add_all_algorithms();
OpenSSL_add_all_ciphers();
ERR_load_crypto_strings();
RSA*    pRSAclient;
RSA*    pRSAserverimport;

FILE*   f3;
FILE*   f4;
//load public key of server
f3 = fopen(""server_public.pem"", ""r"");
if (f3==NULL)
{
  printf(""could not open file \n"");
}
pRSAserverimport = PEM_read_RSAPublicKey(f3, &amp;pRSAPRI, NULL, NULL);

fclose(f3);
 //load private key of client
f4 = fopen(""client_private.pem"", ""r"");
if (f4==NULL)
{
  printf(""could not open file \n"");
}
pRSAclient = PEM_read_RSAPrivateKey(f4, &amp;pRSAPRI2, NULL, ""1234"");

fclose(f4);
</code></pre>

<p>Sorry for the long post, but I have no idea where the problem is. I've tried flushing randomly, which I guess may be the problem, but it didn't work. Any ideas?</p>
","<blockquote>
  <p>… the first version runs as expected, so     <code>AES_Encrypt</code> 
  and  <code>send</code> must be cooperating well.</p>
</blockquote>

<p>That a program with undefined behavior <em>runs as expected</em> does not imply that all is <em>well</em>.</p>

<p>Andrew Henle is right, saying</p>

<blockquote>
  <p>I doubt <code>AES_Encrypt()</code> produces a NUL-terminated string as
  its encrypted message, so this line would be wrong:  <code>if( send(sock , enc_message , strlen(enc_message) , 0) &lt; 0)</code></p>
</blockquote>

<p>The AES block size is 16 Bytes; <code>enc_message</code> will have been filled with 16 Bytes, any as well as none of which may be <code>'\0'</code>, so <code>strlen(enc_message)</code> could yield a too short length to <code>send</code> as well as render the behavior undefined due to the array being accessed beyond the end.</p>
","119","<c><sockets><encryption><file-io><encryption-symmetric>","4","0","1","2018-02-09 07:52:02","","3","1","1816580","","2015-12-29 23:28:56","2015-12-29 23:21:16",""
"48204307","Git: how does git push handle an encrypted folder when ""push""","<p>Scenario: using git to push to a remote repo. Local and remote are regular git repos, not encrypted. Putting a possible ecryptfs filesystem within a folder within the repo to be pushed.</p>

<p>If: a git pre-hook would assure unmounting the folder(umount ~/encrypted_folder/), and echo to command line something like "" the folder containing an encrypted ecrypfs file system was closed"", then git would push the repo to it's remote location including the folder that contains the encrypted filesystem after having assured the folder was unmounted, so the encryption stands. To ""umount"" no password is asked for. No technical complications to regular git functionality to be observed.</p>

<p>What would be the undesirable consequences?</p>

<p>One is evident: version controlling an encrypted file or folder would be irrelevant. That is acceptable.</p>

<p>Second: instead of git being frugal, would every push write the whole of the encrypted folder to the remote, and bloat the remote repository?</p>

<p>Third: would git ""corrupt"" in any way the encrypted folder?</p>

<p>Incentive: copying a folder containing an encrypted ecryptfs filesystem is trivial, tarring also, using rsync or scp is the evident suggestion, excluding that folder from being inside the repo, using "".gitignore"" also ...</p>

<p>but for workflow reasons: git being used for backup, disregarding the versioning of the folder that contains encrypted filesystem, not having to recourse to anything else and keep things user trivial. One single git push to multiple remote locations for now takes care of all desired data backup per user. For workflow reasons, per user, it would be nice to keep it that way.</p>

<p>White paper: one single backup blob, mostly versioned, and being able to have some encrypted data within the repo and it's remote clones. Prohibiting the folder concerned from being ""open"" by the git pre-hook. Everything in one single git operation. Ecryptfs contains within the encrypted part of the data, anything needed to ""open and close"" the data but the passphrase. This would make for high mobility, needing to clone the remote repo to any git-ecryptfs enabled device, in any remote location and have access to the encrypted data.</p>
","","116","<git><githooks><git-push><encryption-symmetric><ecryptfs>","0","","0","2018-01-11 10:03:00","","8","","","","","2018-01-11 10:03:00",""
"49985604","C# UWP CryptographicEngine.Encrypt() returns null","<p>I trying to encrypt input bytes[] to AES, but final encryption buffer is null.</p>

<pre><code>private byte[] Encrypt(byte[] data)
{
    byte[] secretKey = new byte[] { 1, 2, 3 };

    IBuffer key = Convert.FromBase64String(Convert.ToBase64String(secretKey.ToArray()).ToString()).AsBuffer();
    Debug.WriteLine(key.Length);
    SymmetricKeyAlgorithmProvider algorithmProvider = SymmetricKeyAlgorithmProvider.OpenAlgorithm(SymmetricAlgorithmNames.AesCbc);
    CryptographicKey cryptographicKey = algorithmProvider.CreateSymmetricKey(key);
    IBuffer bufferEncrypt = CryptographicEngine.Encrypt(cryptographicKey, data.AsBuffer(), null);

    return bufferEncrypt.ToArray();
}
</code></pre>

<p>Debugger show local variables as (Name, Value, Type):</p>

<pre><code>+       this    {Project.Auth}  Project.Auth
+       data    {byte[15]}  byte[]
    bufferEncrypt   null    Windows.Storage.Streams.IBuffer
+       cryptographicKey    {Windows.Security.Cryptography.Core.CryptographicKey}   Windows.Security.Cryptography.Core.CryptographicKey
+       key {System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBuffer}    Windows.Storage.Streams.IBuffer {System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeBuffer}
+       algorithmProvider   {Windows.Security.Cryptography.Core.SymmetricKeyAlgorithmProvider}  Windows.Security.Cryptography.Core.SymmetricKeyAlgorithmProvider
+       SecretKey   Count = 16  System.Collections.Generic.List&lt;byte&gt;
</code></pre>

<p>Where is my fault?</p>
","<p>I even cannot run your code snippet successfully on my side, exception <code>System.ArgumentException: 'Value does not fall within the expected range.</code> will be thrown when <code>CreateSymmetricKey(key)</code>. Your key seems to be the wrong length, the key length should be a certain number of bits long based on the security you need. (256 bits for AES is common).</p>

<p>In additional, CBC algorithms require an initialization vector, you could assign a random number for the vector. More details please reference <a href=""https://docs.microsoft.com/en-us/windows/uwp/security/cryptographic-keys"" rel=""nofollow noreferrer"">Symmetric keys
</a>.</p>

<p>Please try to fix your issue and implement the encrypt feature by following the <a href=""https://code.msdn.microsoft.com/windowsapps/Cryptography-and-3305467b"" rel=""nofollow noreferrer"">official sample</a> or <a href=""https://docs.microsoft.com/en-us/uwp/api/windows.security.cryptography.core.symmetrickeyalgorithmprovider"" rel=""nofollow noreferrer"">this example</a>.</p>
","115","<c#><encryption><uwp><aes><encryption-symmetric>","0","0","1","2018-04-24 08:06:28","49996466","0","","1938988","","2018-04-23 16:16:29","2018-04-23 16:15:36",""
"20151907","Using MSSQL Symmetric Keys with Coldfusion","<p>I am trying to us MSSQL encryption with Coldfusion.  I can run the test query below just fine in SSMS however once I place it in a  tag it fails.  Any Ideas?  Thanks</p>

<pre><code>&lt;cfquery name=""test"" datasource=""ag_hits""&gt;

    DECLARE @str NVARCHAR(MAX)
    SET @str = #newBrowser#;

    OPEN SYMMETRIC KEY hits
    DECRYPTION BY CERTIFICATE hits_cert;

   INSERT INTO hits(pc, ip, browser, dates)
   VALUES ('#pcname#', '#newIP#', ENCRYPTBYKEY(key_guid('hits'),@str), #dates#);

   CLOSE SYMMETRIC KEY hits;
&lt;cfquery&gt;   
</code></pre>
","","114","<sql-server><encryption><coldfusion><encryption-symmetric>","1","","0","2013-11-24 02:13:16","","2","","1139165","","2013-11-24 02:13:16","2013-11-22 18:26:04",""
"42293146","S-box in AES CCM 128 bit","<p>I am working on encryption &amp; decryption of data using AES-CCM.</p>

<p>While studying AES, I came across a word called S-Box.</p>

<p>What is S-Box, and the relationship with AES? How can it be calculated? Is it depends on symmetric key or not? </p>

<p>How will cypher text be generated in AES-CCM 128 bit?</p>
","<p>The S-Boxes are a system that is used in symmetric cryptographic algorithms to substitute and obscure the relationship between the key and the text that you want to cypher.</p>

<p>You can see more in this <a href=""https://www.researchgate.net/publication/313327898_Midgar_Study_of_communications_security_among_Smart_Objects_using_a_platform_of_heterogeneous_devices_for_the_Internet_of_Things"" rel=""nofollow noreferrer"">article</a>. Here, you have a part:</p>

<blockquote>
  <p>There are different types of cyphers according to their design  [68]. One of these is the ​Substitution–PermutationNetwork (SPN) that generates the ciphered text by applying substitution and permutation rounds to the original text and the symmetric key to create confusion. To do this, it must be used the Substitution boxes (S-boxes) and Permutation boxes (P-boxes). The S-boxes substitute one-to-one the bits of a block of the input text in the round with bits of the output text. This output is taken as an input in the P-boxes and then it permutes all the bits that will be used as S-box input in the next round.</p>
</blockquote>
","114","<encryption><aes><encryption-symmetric>","1","2","2","2017-02-17 21:41:44","42293460","0","","1816580","","2017-02-17 18:43:05","2017-02-17 08:40:13",""
"42293146","S-box in AES CCM 128 bit","<p>I am working on encryption &amp; decryption of data using AES-CCM.</p>

<p>While studying AES, I came across a word called S-Box.</p>

<p>What is S-Box, and the relationship with AES? How can it be calculated? Is it depends on symmetric key or not? </p>

<p>How will cypher text be generated in AES-CCM 128 bit?</p>
","<p>As @CGG said, S-boxes are a component of a Substitution-Permutation Network. The <a href=""https://en.wikipedia.org/wiki/Substitution-permutation_network"" rel=""nofollow noreferrer"">Wikipedia entry</a> has good diagrams which will help explain how they work. </p>

<p>Think of an S-box as a simple substitution cipher -- A=1, B=2, etc. In an SPN, you run input through an S-box to substitute new values, then you run that result through a P-box (permutation) to distribute the modified bits out to as many S-boxes as possible. This loop repeats to spread the changes throughout the entire cipher text. </p>

<p>In general, an S-box replaces the input bits with an identical number of output bits. This exchange should be 1:1 to provide invertibility (i.e. you must be able to reverse the operation in order to decrypt), should employ the avalanche effect (so changing 1 bit of input changes about half the output bits), and should depend on every bit of input. </p>
","114","<encryption><aes><encryption-symmetric>","1","1","2","2017-02-17 21:41:44","42293460","0","","1816580","","2017-02-17 18:43:05","2017-02-17 08:40:13",""
"44817616","Decryption and encryption help needed","<p>I have a question about encryption and decryption. I noticed some image files for a game I want to do texture mods for is backed with an encryption and I need a little help. My friend managed to decrypt and encrypt one of the files successfully, and it was read in the game. However, that friend has been busy lately and I haven't been able to get a reply so I don't know much more on the encryption at the moment.
However, I do have the decrypted file, the encrypted version of the same one, and what she claims to be the key. Please help me use the key to decrypt and encrypt said files.
Here's what she says is the password/key... What I know is that it can both decrypt and encrypt the file to my understanding.</p>

<pre><code>a8Yb5$IpVobR,1Xph!k(#!B9h$V[o[r-I'x.37Q%E;lt2wGgk)hNF_p_!mF?Ds54.*8ErbCK,30
</code></pre>

<p><a href=""https://cdn.discordapp.com/attachments/228184944407609344/329837336215027712/eJwNyFEOgyAMANC7cACwiC16maVBAiYohHZfy-6-vc_3Me_ZzGGq6pDDufOS1OdpRfvkkm3pvbTM4xKb-u1YlVO986PiVggbLAQR.png"" rel=""nofollow noreferrer"">Here </a>is the decrypted version of the file.</p>

<p>And the encrypted file is<a href=""https://cdn.discordapp.com/attachments/314510718667849728/316056665164087297/seal_h.dat"" rel=""nofollow noreferrer""> here</a>...</p>

<p>I posted this here instead of the gaming version of Stack Overflow as it's considered off-topic, telling me that I should post this question here. Also, sorry if this question could already be answered in another thread, but I wasn't about to search throuh 27,000 threads for a solution, that could have taken WAY TOO long. Also, this could be considered to belong in Game Development, but since this is such a standard encryption format I thought it'd run along better here than there and I'd probably be shooed off to here, anyways.
Thanks for the help in advance.</p>
","<p>The ""encrypted"" data is just the plain data binary XOR'd with the ""key"".</p>

<p>This is not ""standard encryption"" though. AES/Rijndael for example would be a much better choice for symmetric encryption.</p>
","111","<encryption><encryption-symmetric>","0","0","1","2017-06-29 06:59:45","44818155","6","","6487471","","2017-06-29 06:29:00","2017-06-29 06:15:50",""
"31954882","Downsides to Using the Same Value for Key and IV?","<p>I am implementing some classes for .NET that (among other things) simplify encryption and decryption.</p>

<p>My current algorithm creates an 8-byte salt, and uses that salt with the password to generate both the key and IV. I then store the salt, unencrypted, with my encrypted data.</p>

<p>This is nice because the salt appears to always be 8 bytes and that's all the overhead it adds to my encrypted data. However, is there any downside to using the same value for both my key and IV? Is there a better way?</p>

<p>Relevant code:</p>

<pre><code>SymmetricAlgorithm algorithm = CreateAlgorithm();
byte[] salt = CreateSalt();
byte[] keyBytes = DeriveBytes(salt, algorithm.KeySize &gt;&gt; 3);
byte[] ivBytes = DeriveBytes(salt, algorithm.BlockSize &gt;&gt; 3);
</code></pre>

<p>Supporting code:</p>

<pre><code>private static readonly int SaltLength = 8;

internal byte[] CreateSalt()
{
    byte[] salt = new byte[SaltLength];
    using (RNGCryptoServiceProvider generator = new RNGCryptoServiceProvider())
    {
        generator.GetBytes(salt);
    }
    return salt;
}

public byte[] DeriveBytes(byte[] salt, int bytes)
{
    Rfc2898DeriveBytes derivedBytes = new Rfc2898DeriveBytes(Password, salt, 1000);
    return derivedBytes.GetBytes(bytes);
}
</code></pre>
","<p>Yes, it defeats the purpose of the IV. The IV is used so if you encrypt the same message with the same key you don't get the same ciphertext. You might as well just use a constant value of <code>0</code>, it adds the same amount of security.</p>
","110","<c#><.net><encryption><encryption-symmetric>","1","1","3","2015-08-12 02:33:27","31955130","1","","","","","2015-08-12 02:05:07",""
"31954882","Downsides to Using the Same Value for Key and IV?","<p>I am implementing some classes for .NET that (among other things) simplify encryption and decryption.</p>

<p>My current algorithm creates an 8-byte salt, and uses that salt with the password to generate both the key and IV. I then store the salt, unencrypted, with my encrypted data.</p>

<p>This is nice because the salt appears to always be 8 bytes and that's all the overhead it adds to my encrypted data. However, is there any downside to using the same value for both my key and IV? Is there a better way?</p>

<p>Relevant code:</p>

<pre><code>SymmetricAlgorithm algorithm = CreateAlgorithm();
byte[] salt = CreateSalt();
byte[] keyBytes = DeriveBytes(salt, algorithm.KeySize &gt;&gt; 3);
byte[] ivBytes = DeriveBytes(salt, algorithm.BlockSize &gt;&gt; 3);
</code></pre>

<p>Supporting code:</p>

<pre><code>private static readonly int SaltLength = 8;

internal byte[] CreateSalt()
{
    byte[] salt = new byte[SaltLength];
    using (RNGCryptoServiceProvider generator = new RNGCryptoServiceProvider())
    {
        generator.GetBytes(salt);
    }
    return salt;
}

public byte[] DeriveBytes(byte[] salt, int bytes)
{
    Rfc2898DeriveBytes derivedBytes = new Rfc2898DeriveBytes(Password, salt, 1000);
    return derivedBytes.GetBytes(bytes);
}
</code></pre>
","<p>In your case here you are using the same value for your </p>

<ul>
<li>Key</li>
<li>IV</li>
</ul>

<p>Conceptually this is a bad idea because the IV is supposed to be non-secret, and different for each encryption. You've solved the <em>""different for each encryption""</em>, but you have it identical to your key.</p>

<p>The thing you're trying to defend against is making sure that two encryptions with the same key will not give the same ciphertext. In your case, this will only happen if the RNG generates two identical 128-bit AES keys. </p>

<p>While the odds of this are low, you should just not have it.</p>
","110","<c#><.net><encryption><encryption-symmetric>","1","1","3","2015-08-12 02:33:27","31955130","1","","","","","2015-08-12 02:05:07",""
"31954882","Downsides to Using the Same Value for Key and IV?","<p>I am implementing some classes for .NET that (among other things) simplify encryption and decryption.</p>

<p>My current algorithm creates an 8-byte salt, and uses that salt with the password to generate both the key and IV. I then store the salt, unencrypted, with my encrypted data.</p>

<p>This is nice because the salt appears to always be 8 bytes and that's all the overhead it adds to my encrypted data. However, is there any downside to using the same value for both my key and IV? Is there a better way?</p>

<p>Relevant code:</p>

<pre><code>SymmetricAlgorithm algorithm = CreateAlgorithm();
byte[] salt = CreateSalt();
byte[] keyBytes = DeriveBytes(salt, algorithm.KeySize &gt;&gt; 3);
byte[] ivBytes = DeriveBytes(salt, algorithm.BlockSize &gt;&gt; 3);
</code></pre>

<p>Supporting code:</p>

<pre><code>private static readonly int SaltLength = 8;

internal byte[] CreateSalt()
{
    byte[] salt = new byte[SaltLength];
    using (RNGCryptoServiceProvider generator = new RNGCryptoServiceProvider())
    {
        generator.GetBytes(salt);
    }
    return salt;
}

public byte[] DeriveBytes(byte[] salt, int bytes)
{
    Rfc2898DeriveBytes derivedBytes = new Rfc2898DeriveBytes(Password, salt, 1000);
    return derivedBytes.GetBytes(bytes);
}
</code></pre>
","<p>OK, as long as you use a new, randomly created salt for each message, you are close to what I might do.  The random salt means the IV will change with each new message, and this means that the exact same message will be different crypto-text each transmission.  All good.  The one thing I would change if I were you is instead of using DeriveBytes to get the key and then to get the IV, I would have DeriveBytes give a set of bytes the size of the key and IV together, then split them and use them separately.  The IV should not have to be secret from anyone.  The key must be.  So if you DeriveBytes once from the same salt and password, then split those bytes into key and IV, the attacker is still no closer to knowing the key after looking at the IV than he was before.</p>

<p>Alternatively, you could use a nonce to create a known permutation between the IV bytes and the key bytes.  For example, excuse my pseudocode:</p>

<pre><code>IV = DeriveBytes(salt + password + ""IV"")
key = DeriveBytes(salt + password + ""key"")
</code></pre>

<p>Either way is secure.  But I would just DeriveBytes on, say, 32 bytes and then use 16 of them for the IV and 16 of them for the key.  There is no information in the first 16 bytes that will help an attacker calculate the next 16 bytes.</p>
","110","<c#><.net><encryption><encryption-symmetric>","1","2","3","2015-08-12 02:33:27","31955130","1","","","","","2015-08-12 02:05:07",""
"12672755","how to use rsa in application i found code but dont know how to implement","<p>HOW TO I USE THIS RSA <a href=""http://xtrace.blogspot.com/2012/03/rsa-demo-example.html?showComment=1349091173502#c199333123405145467"" rel=""nofollow"">http://xtrace.blogspot.com/2012/03/rsa-demo-example.html?showComment=1349091173502#c199333123405145467</a> TUTOTIAL CODE IN MY LOGIN CODE BELOW
I found code but dnt know how to implement</p>

<pre><code>  public class LoginScreen  extends Activity implements OnClickListener{    

EditText mobile;
EditText pin;
Button  btnLogin;
Button  btnClear;

public void onCreate(Bundle icicle)
{
    super.onCreate(icicle);
    setContentView(R.layout.login.xml);

    TextView lblMobileNo = (TextView)findViewById(R.id.lblMobileNo);
    lblMobileNo.setTextColor(getResources().getColor(R.color.text_color_red));

    mobile = (EditText)findViewById(R.id.txtMobileNo);

    TextView lblPinNo = (TextView)findViewById(R.id.lblPinNo);
    lblPinNo.setTextColor(getResources().getColor(R.color.text_color_red));

    pin = (EditText)findViewById(R.id.txtPinNo);

    btnLogin = (Button)findViewById(R.id.btnLogin);
    btnClear = (Button)findViewById(R.id.btnClear);

    btnLogin.setOnClickListener(new OnClickListener() {
         public void onClick(View view) {                
             postLoginData();
         }
         });        


    btnClear.setOnClickListener(new OnClickListener()
    {
    public void onClick(View v)

    {
        cleartext();
    }

 });

  /*  

    btnClear.setOnClickListener(new OnClickListener() {
             public void onClick(View arg0) {

             }
             }); 
             */

}   

public void postLoginData() 


{

             Intent i = new Intent(this.getApplicationContext(),NEWCLASS.class);
             Bundle bundle = new Bundle();
             bundle.putString(""mno"", mobile.getText().toString());
             bundle.putString(""pinno"", pin.getText().toString());
             i.putExtras(bundle);
             startActivity(i);          }
}

@Override
public void onClick(View v) {

}  


public void cleartext() {


    {
        pin.setText("""") ;
        mobile.setText("""");
    }


}


    }
</code></pre>
","<p>Look here for some examples of Encryptor/Decryptor classes: <a href=""https://stackoverflow.com/questions/1205135/how-to-encrypt-string-in-java"">How to encrypt String in Java</a></p>

<p>Or here is a good example of class that does everything for you:</p>

<pre><code>public class Cryptos {

private static final String ME = Cryptos.class.getSimpleName();
private static String strEncoding = ""UTF-8"";
private static String STATIC_STRING_IV_16 = ""1234567890123456"";
private String iv;
private String key;
private IvParameterSpec mIvParameterSpec;
private SecretKeySpec mSecretKeySpec;
private Cipher mCipher;

public Cryptos(String key) {
    this(STATIC_STRING_IV_16,key);
}

public Cryptos(String iv, String key) {
    this.iv = cut(iv, 16);
    this.key = key;

    mIvParameterSpec = new IvParameterSpec(this.iv.getBytes());
    mSecretKeySpec = new SecretKeySpec(this.key.getBytes(), ""AES"");

    try {
        mCipher = Cipher.getInstance(""AES/CBC/NoPadding"");
    } catch (NoSuchAlgorithmException e) {
        App.log.e(ME, ""Got Exception while initializing mCipher: "" + e.toString(), e);
    } catch (NoSuchPaddingException e) {
        App.log.e(ME, ""Got Exception while initializing mCipher: "" + e.toString(), e);
    }
}


public byte[] decryptHex(String hexString) throws Exception {
    if(hexString == null || hexString.length() == 0) {
        throw new Exception(""Emtpy string given"");
    }
    return byteTrim(decrypt(hexToBytes(hexString)));
}

public byte[] decrypt(byte[] input){
    try {
        mCipher.init(Cipher.DECRYPT_MODE, mSecretKeySpec, mIvParameterSpec);
        byte[] decrypted = new byte[mCipher.getOutputSize(input.length)];
        int dec_len = mCipher.update(input, 0, input.length, decrypted, 0);
        dec_len += mCipher.doFinal(decrypted, dec_len);
        return ARRAY.copyOf(decrypted, dec_len);
    } catch (ShortBufferException e) {
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {
        e.printStackTrace();
    } catch (BadPaddingException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (InvalidAlgorithmParameterException e) {
        e.printStackTrace();
    }
    return null;
}



public byte[] encrypt(String text) throws Exception{
    if(text == null || text.length() == 0) throw new Exception(""Empty string"");
    return encrypt(text.getBytes(strEncoding));
}

public byte[] encrypt(byte[] data){
    if(data==null) return null;

    try {
        int bts = data.length;
        byte[] alignData = ARRAY.copyOf(data, bts+(16-bts%16));
        data = alignData;
        mCipher.init(Cipher.ENCRYPT_MODE, mSecretKeySpec, mIvParameterSpec);
        byte[] encrypted = new byte[mCipher.getOutputSize(data.length)];
        int enc_len = mCipher.update(data, 0, data.length, encrypted, 0);
        enc_len += mCipher.doFinal(encrypted, enc_len);
        return ARRAY.copyOf(encrypted, enc_len);
    } catch (ShortBufferException e) {
        e.printStackTrace();
    } catch (IllegalBlockSizeException e) {
        e.printStackTrace();
    } catch (BadPaddingException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (InvalidAlgorithmParameterException e) {
        e.printStackTrace();
    }
    return null;
}

public static String bytesToHex(byte[] b){
    StringBuffer buf = new StringBuffer();
    int len = b.length;
    for (int j=0; j&lt;len; j++)
        buf.append(byteToHex(b[j]));
    return buf.toString();
}

public static String byteToHex(byte b){
    char hexDigit[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    char[] a = { hexDigit[(b &gt;&gt; 4) &amp; 0x0f], hexDigit[b &amp; 0x0f] };
    return new String(a);
}

public static byte[] hexToBytes(String str) {
    if (str==null) {
        return null;
    } else if (str.length() &lt; 2) {
        return null;
    } else {
        int len = str.length() / 2;
        byte[] buffer = new byte[len];
        for (int i=0; i&lt;len; i++) {
            buffer[i] = (byte) Integer.parseInt(str.substring(i*2,i*2+2),16);
        }
        return buffer;
    }
}


private byte[] byteTrim(byte[] bytes){
    if( bytes.length &gt; 0){
        int trim = 0;
        for( int i = bytes.length - 1; i &gt;= 0; i-- ){
            if( bytes[i] == 0 ){
                trim++;
            }else{
                break;
            }
        }
        if( trim &gt; 0 ){
            byte[] newArray = new byte[bytes.length - trim];
            System.arraycopy(bytes, 0, newArray, 0, bytes.length - trim);
            return newArray;
        }
    }
    return bytes;
}

private String cut(String s, int n) {
    byte[] sBytes = s.getBytes();
    if(sBytes.length &lt; n) {
        n = sBytes.length;
    }
    boolean extraLong = false;
    int i = 0, n16 = 0;
    while(i &lt; n) {
        n16 += (extraLong) ? 2 : 1;
        extraLong = false;
        if((sBytes[i] &amp; 0x80) == 0) {
            i += 1;
        } else if((sBytes[i] &amp; 0xC0) == 0x80) {
            i += 2;
        } else if((sBytes[i] &amp; 0xE0) == 0xC0) {
            i += 3;
        } else {
            i += 4;
            extraLong = true;
        }
    }
    return s.substring(0, n16);
}

public static String encBase64(byte[] bytes){
    return Base64.encodeToString(bytes, Base64.DEFAULT);
}

public static byte[] decBase64(String data){
    return Base64.decode(data, Base64.DEFAULT);
}   
}
</code></pre>
","110","<java><android><encryption-symmetric>","-1","1","1","2012-10-01 13:14:21","","4","","1692668","","2012-10-01 13:14:21","2012-10-01 11:54:02",""
"48198170","AES-RIJNDAEL-256 in PHP slight difference","<p>I was to able to have a function in php which encrypts via CBC method in AES-RIJNDAEL-256 encryption , but when I tested the code I got a slight difference only in one letter which I can not understand where exactly came from , here is the php code and the image shows what is the different character</p>

<pre><code>&lt;?php

$string_0 = ""msDoss"";
$string_1 = ""sALtValue"";
$string_3 = ""~1B2c3D4e5F6g7H8"";

function PBKDF1($pass, $salt, $count, $cb)
{
  // This is very approximately the way that the Microsoft version of 
  // PasswordDeriveBytes works.

  ///
  /// !!!WARNING!!!
  ///
  // This is a BAD function!
  // Irrespective of the fact that the use of PBKDF1 is not recommended anyway.
  //
  // This really should be put into a class with a constructor taking the 
  // $pass, $salt and $count.
  // Then there should be a Reset() method to start from scratch each time a new pwd/salt is used.
  // And there should be a GetBytes(int) method to get the required info.
  // But for the sake of simplicity we are assuming the same pwd and salt for each call to 
  // this function. This will not stand up to any scrutiny!

  static $base;
  static $extra;
  static $extracount= 0;
  static $hashno;
  static $state = 0;

  if ($state == 0)
  {
    $hashno = 0;
    $state = 1;

    $key = $pass . $salt;
    $base = sha1($key, true);
    for($i = 2; $i &lt; $count; $i++)
    {
      $base = sha1($base, true);
    }
  }

  $result = """";

  // Check if we have any bytes left over from a previous iteration.
  // This is the way MS appears to do it. To me it looks very badly wrong
  // in the line: ""$result = substr($extra, $rlen, $rlen);""
  // I'm sure it should be more like ""$result = substr($extra, $extracount, $rlen);""
  // Mono have provided what looks like a fixed version at
  // https://github.com/mono/mono/blob/master/mcs/class/corlib/System.Security.Cryptography/PasswordDeriveBytes.cs
  // But I'm no cryptographer so I might be wrong.
  // But this seems to work for low values of $hashno and seems to work
  // with C# implementations.

  if ($extracount &gt; 0)
  {
    $rlen = strlen($extra) - $extracount;
    if ($rlen &gt;= $cb)
    {
      $result = substr($extra, $extracount, $cb);
      if ($rlen &gt; $cb)
      {
        $extracount += $cb;
      }
      else
      {
        $extra = null;
        $extracount = 0;
      }
      return $result;
    }
    $result = substr($extra, $rlen, $rlen);
  }

  $current = """";
  $clen = 0;
  $remain = $cb - strlen($result);
  while ($remain &gt; $clen)
  {
    if ($hashno == 0)
    {
      $current = sha1($base, true);
    }
    else if ($hashno &lt; 1000)
    {
      $n = sprintf(""%d"", $hashno);
      $tmp = $n . $base;
      $current .= sha1($tmp, true);
    }
    $hashno++;
    $clen = strlen($current);     
  }

  // $current now holds at least as many bytes as we need
  $result .= substr($current, 0, $remain);

  // Save any left over bytes for any future requests
  if ($clen &gt; $remain)
  {
    $extra = $current;
    $extracount = $remain;
  }

  return $result; 
}
$encryption_key= PBKDF1($string_0, $string_1, 7, 32);
?&gt;
</code></pre>

<p>C# Code :</p>

<pre><code>    byte[] bytes = Encoding.ASCII.GetBytes(Class27.string_3);
    byte[] bytes2 = Encoding.ASCII.GetBytes(Class27.string_1);
    byte[] array = Convert.FromBase64String(string_4);
    byte[] bytes3 = new PasswordDeriveBytes(Class27.string_0, bytes2, Class27.string_2, 7).GetBytes(32);
    ICryptoTransform transform = new RijndaelManaged
    {
        Mode = CipherMode.CBC
    }.CreateDecryptor(bytes3, bytes);
</code></pre>

<p><img src=""https://i.stack.imgur.com/GM7tO.jpg"" alt=""Difference""></p>
","<p>It looks like one terminal is able to print out the Unicode character that is mentioned and the other doesn't; it replaces it by a square which is usually used for unknown Unicode characters.</p>

<p>It's likely that the binary output is exactly the same. Instead of printing out the values directly you should be comparing them using a binary compare method or by printing them out in hexadecimals or base 64.</p>
","110","<c#><php><encryption><aes><encryption-symmetric>","-3","1","1","2018-01-11 02:30:27","","8","","1064767","","2018-01-11 02:30:27","2018-01-11 00:24:17",""
"43027584","the result of ECB Encryption is maybe different. it is same as the result of CBC","<pre><code>public class Symmetric1 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception{
        // TODO code application logic here
        KeyGenerator kg = KeyGenerator.getInstance(""DES"");
    kg.init(new SecureRandom());
    SecretKey secretKey = kg.generateKey();

    FileInputStream inFile = new FileInputStream(""C:/Users/Administrator/Desktop/original.bmp"");

    Cipher cipher = Cipher.getInstance(""DES/ECB/PKCS5Padding""); 
    cipher.init(Cipher.ENCRYPT_MODE, secretKey);

    FileOutputStream outFile = new FileOutputStream(""C:/Users/Administrator/Desktop/ECB_original.bmp"");

    byte[] input = new byte[64];
    int bytesRead;
    while((bytesRead = inFile.read(input)) != -1){
        byte[] output = cipher.update(input,0,bytesRead);
        if(output != null)
            outFile.write(output);
    }

    byte[] output = cipher.doFinal();
    if(output != null)
        outFile.write(output);

    inFile.close();
    outFile.flush();
    outFile.close();
    }
}
</code></pre>

<p>i learned that the ecb encryption make the picture a little misty...
but my code make the original picture quite encrypted like CBC Encryption.
what's the matter?</p>

<p>Here is cbc encrypt code too.</p>

<pre><code>public class Symmetric2 {

    public static void main(String[] args) throws Exception{
        // TODO Auto-generated method stub

        FileInputStream inFile = new FileInputStream(""C:/Users/Administrator/Desktop/original.bmp"");
        FileOutputStream outFile = new FileOutputStream(""C:/Users/Administrator/Desktop/CBC_original.bmp"");

        KeyGenerator kg = KeyGenerator.getInstance(""DES"");
        kg.init(new SecureRandom());

        SecretKey sk = kg.generateKey();

        Cipher cp = Cipher.getInstance(""DES/CBC/PKCS5Padding"");

        byte[] ivBytes = new byte[]{
                0x00, 0x01,0x02, 0x03, 0x00, 0x00, 0x00, 0x01       };
        IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);

        cp.init(Cipher.ENCRYPT_MODE, sk, ivSpec); //CBC방식이므로 인자가 3개이다.

        byte[] input = new byte[64]; //getBytes() 
        int bytesRead;
        while((bytesRead = inFile.read(input)) != -1){
            byte[] output = cp.update(input,0,bytesRead);
            if(output != null)
                outFile.write(output);
        }
        byte[] output = cp.doFinal();
        if(output != null)
            outFile.write(output);

        inFile.close();
        outFile.flush();
        outFile.close();
    }

}
</code></pre>
","<p>The commonly known <a href=""https://crypto.stackexchange.com/questions/14487/can-someone-explain-the-ecb-penguin"">pinguin picture</a> kinda plays dirty. It only encrypts the bitmap itself, while the BMP file also contains meta data. Furthermore it relies on the right alignment of the data.</p>

<p>It certainly isn't the case that you get the perfect result you'd expect if you see these examples.  You should see such a picture as an example to prove the point.</p>
","109","<java><encryption><encryption-symmetric><cbc-mode><ecb>","1","2","1","2017-03-26 14:17:23","","2","2","1816580","","2017-03-26 10:30:49","2017-03-26 10:28:41",""
"54597471","Encryption is not working in Swift4.2 using CommonCrypto. Throwing error 4301","<p>I have been trying to implement encryption using CommonCrypto library in swift 4.2. But no luck, ending up with some unknown error.</p>

<p>Somebody please look at this code and help me.</p>

<pre><code>func encrypty(data value: String) -&gt; EncryptionResult {

    guard var messageData = value.data(using: .utf8), var key = getSecretkey()?.data(using: .utf8)  else {
        return EncryptionResult.failure
    }
    //iv ata
    guard let ivData = generateRandomBytes(of: Int32(SecurityConstants.blockSize))?.data(using: .utf8) else {
        return EncryptionResult.failure
    }
    //output
    var outputData = Data(count: (messageData.count + SecurityConstants.blockSize + ivData.count))
    var localOutput = outputData
    //output length
    var outputLength: size_t = 0

    //encyrption
    let status = key.withUnsafeBytes { keyBytes in
        messageData.withUnsafeBytes { messageBytes in
            localOutput.withUnsafeMutableBytes { mutableOutput in
                ivData.withUnsafeBytes { ivDataBytes in
                    CCCrypt( CCOperation(kCCEncrypt),
                             CCAlgorithm(kCCAlgorithmAES128),
                             CCOptions(kCCOptionPKCS7Padding),
                             keyBytes,
                             key.count,
                             ivDataBytes,
                             messageBytes,
                             messageData.count,
                             mutableOutput,
                             outputData.count,
                             &amp;outputLength)
                }
            }
        }
    }
    guard status == Int32(kCCSuccess) else {
        logError(""Error in encryption"")
        return EncryptionResult.failure
    }
    outputData.count = outputLength
    return EncryptionResult.success(value: outputData.base64EncodedString())
}
</code></pre>
","<p>Error -4310 is kCCKeySizeError (see CommonCryptoError.h). That means your key is not the right size.</p>

<p>Looking at this code, this in particular is very suspicious:</p>

<pre><code>getSecretkey()?.data(using: .utf8)
</code></pre>

<p>If a key is decodable as UTF-8, it's not a proper key. You seem to have the same problem with your IV. I suspect that <code>generateRandomBytes()</code> does not quite do what it says it does. It's also not going to be possible to decrypt this data because you throw away the random IV (which the decryptor will require). You create room for it in the output (which is good), but you never write it.</p>
","109","<swift4><encryption-symmetric><commoncrypto>","-1","0","1","2019-03-14 05:29:42","","0","","5417793","","2019-02-09 03:25:27","2019-02-08 17:27:07",""
"49450712","Can I think about SymmetricAlgorithm as a factory of ICryptoTransform?","<p>I'm using SymmetricAlgorithm (AesCryptoServiceProvider in particular) to encrypt and decrypt a lot of messages. </p>

<p>(NOTE: pseudo-code)</p>

<pre><code>parallel-foreach (var message, key, iv in triplets) 
{
    using (var algorithm = CreateAes())
    using (var transform = algorithm.CreateEncryptor(key, iv))
    {
        // do stuff using transform
    }
}
</code></pre>

<p>I do not mutate <code>algorithm</code> after it is created, and the only interaction with it is using it to <code>CreateEncryptor</code> using it as <code>ICryptoTransform</code> factory.</p>

<p>When I move the creation of algorithm out of the loop:</p>

<pre><code>using (var algorithm = CreateAes())
{
    parallel-foreach (var message, key, iv in triplets) 
    {
        using (var transform = algorithm.CreateEncryptor(key, iv))
        {
            // do stuff using transform
        }
    }
}
</code></pre>

<p>I get 5-times performance improvement and it does work as expected, so it is worth trying.</p>

<p>What I cannot find if <code>SymmetricAlgorithm</code> is thread safe in such scenario. I'm not mutating it myself, but may it does happen behind the scenes?</p>
","<p>The construction and disposal of <code>AesCryptoServiceProvider</code> are not light weight. That is why you see the performance boost when you do not instantiate it within the loop:</p>

<pre><code>    [System.Security.SecurityCritical]
    public AesCryptoServiceProvider () {
        Contract.Ensures(m_cspHandle != null &amp;&amp; !m_cspHandle.IsInvalid &amp;&amp; !m_cspHandle.IsClosed);

        // On Windows XP the AES CSP has the prototype name, but on newer operating systems it has the
        // standard name
        string providerName = CapiNative.ProviderNames.MicrosoftEnhancedRsaAes;
        if (Environment.OSVersion.Version.Major == 5 &amp;&amp; Environment.OSVersion.Version.Minor == 1) {
            providerName = CapiNative.ProviderNames.MicrosoftEnhancedRsaAesPrototype;
        }

        m_cspHandle = CapiNative.AcquireCsp(null,
                                            providerName,
                                            CapiNative.ProviderType.RsaAes,
                                            CapiNative.CryptAcquireContextFlags.VerifyContext,
                                            true);

        // CAPI will not allow feedback sizes greater than 64 bits
        FeedbackSizeValue = 8;

        // Get the different AES key sizes supported by this platform, raising an error if there are no
        // supported key sizes.
        int defaultKeySize = 0;
        KeySizes[] keySizes = FindSupportedKeySizes(m_cspHandle, out defaultKeySize);
        if (keySizes.Length != 0) {
            Debug.Assert(defaultKeySize &gt; 0, ""defaultKeySize &gt; 0"");
            KeySizeValue = defaultKeySize;
        }
        else {
            throw new PlatformNotSupportedException(SR.GetString(SR.Cryptography_PlatformNotSupported));
        }
    }

    /// &lt;summary&gt;
    ///     Release any CAPI handles we're holding onto
    /// &lt;/summary&gt;
    [System.Security.SecuritySafeCritical]
    protected override void Dispose(bool disposing) {
        Contract.Ensures(!disposing || m_key == null || m_key.IsClosed);
        Contract.Ensures(!disposing || m_cspHandle == null || m_cspHandle.IsClosed);

        try {
            if (disposing) {
                if (m_key != null) {
                    m_key.Dispose();
                }

                if (m_cspHandle != null) {
                    m_cspHandle.Dispose();
                }
            }
        }
        finally {
            base.Dispose(disposing);
        }
    }
</code></pre>

<p>As far as thread safety, from the documentation:</p>

<blockquote>
  <p>Any public static ( Shared in Visual Basic) members of this type are
  thread safe. Any instance members are not guaranteed to be thread
  safe.</p>
</blockquote>

<p>If you dig into the source code, you can see there is no thread safety built into it.</p>

<p>Sources:</p>

<p><a href=""https://referencesource.microsoft.com/#System.Core/System/Security/Cryptography/AesCryptoServiceProvider.cs,6b3c2c2cf88c1df6,references"" rel=""nofollow noreferrer"">Reference Source for .NET 4.7.1</a></p>

<p><a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.aescryptoserviceprovider(v=vs.110).aspx"" rel=""nofollow noreferrer"">AesCryptoServiceProvider Class Documentation</a></p>
","107","<c#><.net><encryption><encryption-symmetric>","0","1","2","2018-03-23 14:08:19","","0","","","","","2018-03-23 13:24:50",""
"49450712","Can I think about SymmetricAlgorithm as a factory of ICryptoTransform?","<p>I'm using SymmetricAlgorithm (AesCryptoServiceProvider in particular) to encrypt and decrypt a lot of messages. </p>

<p>(NOTE: pseudo-code)</p>

<pre><code>parallel-foreach (var message, key, iv in triplets) 
{
    using (var algorithm = CreateAes())
    using (var transform = algorithm.CreateEncryptor(key, iv))
    {
        // do stuff using transform
    }
}
</code></pre>

<p>I do not mutate <code>algorithm</code> after it is created, and the only interaction with it is using it to <code>CreateEncryptor</code> using it as <code>ICryptoTransform</code> factory.</p>

<p>When I move the creation of algorithm out of the loop:</p>

<pre><code>using (var algorithm = CreateAes())
{
    parallel-foreach (var message, key, iv in triplets) 
    {
        using (var transform = algorithm.CreateEncryptor(key, iv))
        {
            // do stuff using transform
        }
    }
}
</code></pre>

<p>I get 5-times performance improvement and it does work as expected, so it is worth trying.</p>

<p>What I cannot find if <code>SymmetricAlgorithm</code> is thread safe in such scenario. I'm not mutating it myself, but may it does happen behind the scenes?</p>
","<p>Quick pseudo-code to implement your algorithm while respecting the thread-non-safety of Aes instance members:</p>

<pre><code>using (var algorithm = CreateAes())
{
    parallel-foreach (var message, key, iv in triplets) 
    {
        ICryptoTransform transform;

        lock (algorithm)
        {
            transform = algorithm.CreateEncryptor(key, iv);
        }

        using (transform)
        {
            // do stuff using transform
        }
    }
}
</code></pre>
","107","<c#><.net><encryption><encryption-symmetric>","0","0","2","2018-03-23 14:08:19","","0","","","","","2018-03-23 13:24:50",""
"51562266","Is my symmetric encryption algorithm safe?","<p>I recently decided to write my own symmetric encryption program (which could be used in a custom password manager for example). 
I would like your opinion about him, did I make big mistakes? else would it be easily breakable?</p>

<p>It is basically a Vigenere fork trying to get closer to the principles of Vernam encryption but remaining easy to use (you can use any key in order to encrypt your text).</p>

<p><strong>How does it work?</strong></p>

<ul>
<li>You enter a message (e.g. hello world) and a seed (e.g. seed).</li>
<li>The seed is transformed into a number thanks to a hash function</li>
<li>We add the number of letters of the message to this number, and we hash it another time</li>
<li>A pseudo-random number generator is initialized with the result and a list of random numbers of the text size is generated (it's the key).</li>
<li>We shift each letter with the corresponding number in the list (the first letter of the message is shifted with the first number of our generated list)
<code>
Example :
Alphabet: [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z]
List : [1,18,3,17,0]
Word: ""hello""
h+1 = j
e+18 = w
l+3 = o
l+17=c  (as the alphabet is finished, we continue at the beginning)
o+0=o
Output: ""jwoco""
</code></li>
</ul>

<p><strong>The principles of Vernam encryption specifies that :</strong></p>

<ul>
<li>the key used to offset the letters must be at least as large as the text size -> It's okay</li>
<li>The key must only be used once -> It's okay if you change your seed or the size of the message (since we include the text size in the hash used to initialize the key)</li>
<li>The key must be completely random -> This will depend on the random number generation algorithm and the hash algorithm but if they are good we should have an output with which it is impossible without the key to find a text that is more likely than another to be the original message.</li>
</ul>

<p>Is my explanation clear? Do you agree with me? Do you have any clarifications to add? improvements to propose or algorithms of random number generation and hash to advise me?</p>

<p>have a nice day,
Thomas! </p>
","<p>A relevant anecdote from Bruce Schneier:</p>

<p>See <a href=""https://www.schneier.com/crypto-gram/archives/1998/1015.html#cipherdesign"" rel=""nofollow noreferrer"">https://www.schneier.com/crypto-gram/archives/1998/1015.html#cipherdesign</a></p>

<blockquote>
  <p>A cryptographer friend tells the story of an amateur who kept
  bothering him with the cipher he invented. The cryptographer would
  break the cipher, the amateur would make a change to ""fix"" it, and the
  cryptographer would break it again. This exchange went on a few times
  until the cryptographer became fed up. When the amateur visited him to
  hear what the cryptographer thought, the cryptographer put three
  envelopes face down on the table. ""In each of these envelopes is an
  attack against your cipher. Take one and read it. Don't come back
  until you've discovered the other two attacks."" The amateur was never
  heard from again.</p>
</blockquote>

<p>Use AES.</p>
","107","<algorithm><encryption><encryption-symmetric><vigenere>","0","4","1","2018-07-27 17:09:56","51562629","9","","10144963","","2018-07-27 16:50:31","2018-07-27 16:43:27","2018-07-27 21:59:24"
"33979168","How to find the answer to a XOR hash if I have the key & one number","<p>I have a little routine that makes up a cumulative XOR hash. It's as if it is a savings account which gets bigger, cumulatively daily.. but in this sense we're saying the answer is being generated cumulatively and the key is always present.</p>

<p>I have taken a string of chars</p>

<p>pseudo code:</p>

<pre><code>char H[10] = { ""ABCDEFGHI"", ""\0"" };
</code></pre>

<p>and I used 9 32-bit numeric keys to hash them in XOR encryption.</p>

<p>I did it like this:</p>

<pre><code>for (i;i&lt;10;i++)
    bitset&lt;32&gt; K ^= H[i] ^ NUMKEY[i];
</code></pre>

<p>Now this makes it impervious without the calculus plotting I did (see what I did there?) So <code>K</code> is an accumulation of calculus points, which are completely predictable according to calculus.</p>

<p>as far as I know, to undo it, I do</p>

<pre><code>for (i;i&lt;10;i++) {
    X=0;
    X ^= K ^ NUMKEY[i];
}
</code></pre>

<p>Is there other math involved? I think I have to take that <code>X</code> and do a little <code>K - X</code> to find the true derivative.</p>

<p>Here's the current routine I have for it. But I'm not getting what I'm looking for.</p>

<pre><code>for_each (std::istreambuf_iterator&lt;char&gt;(in), \
    std::istreambuf_iterator&lt;char&gt;(), \
    [&amp;] (long x) {
    t=s_nop(t,0);
    cred.push_back(t);
    alpha = static_cast&lt;long&gt;(cred[size]);
    delta = static_cast&lt;long&gt;(x);
    lambda ^= (alpha ^ delta);
    size++;
});

for (;i&lt;bn;i++) {
    alpha =  static_cast&lt;unsigned long&gt;(cred[bn-1-i]);
    int m = lambda.to_ulong(), n = alpha.to_ulong();

    long hash1 = abs((m-n-1)%256-1);
    delta = static_cast&lt;unsigned long&gt;(hash1);
    btrace.push_back(hash1);
    cout &lt;&lt; hash1 &lt;&lt; "" "";
}
</code></pre>

<p>Please have a safe and Merry Christmas. Thank you in advance!</p>
","<p>I think what you might really want is a one time pad.  (the snippet is javascript as pseudocode moving in that direction)</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>//ignore these top 3 functions (they're just for printing output)
function appendLine(text, target, space, color) {
  var line = document.createElement(""div"");
  line.style.border = ""1px solid "" + color;
  line.style.padding = line.style.margin = space;
  line.style[""font-family""] = ""monospace"";
  line.appendChild(document.createTextNode(text));
  target.appendChild(line);
  return line;
}
function makeSection(title) {
  var d = appendLine(title, document.body, ""5px"", ""#dddddd"");
  var results = document.createElement(""div"");
  d.appendChild(results);
  return function(result) {
    appendLine(result, results, ""2px"", ""#eeeeee"");
  };
}
function toHex(arr) {
  return arr.map(function(n){
    var h = (n &gt;&gt;&gt; 0).toString(16).toUpperCase();
    while(h.length &lt; 8) h = ""0"" + h;
    return h;
  }).join("","");
}

//your message
var H = ""ABCDEFGHI"".split("""").map(function(c){return c.charCodeAt(0)});
//your secret encoding key
var NUMKEY = Array.apply(null, Array(9)).map(function(){return Math.random() * Math.pow(2, 32)});

//what you're doing
(function() {
  var section = makeSection(""what you're doing:"");
  section(""ABCDEFGHI as array of 32bit numbers: "" + toHex(H));
  section(""NUMKEY: "" + toHex(NUMKEY));
  var K = 0;
  for (var i = 0; i &lt; 10; i++) {
    K ^= H[i] ^ NUMKEY[i];
  }
  section(""K: "" + toHex([K]));
  var X = 0;
  for (var i = 0; i &lt; 10; i++) {
    X ^= K ^ NUMKEY[i];
  }
  section(""X: "" + toHex([X]));
})();

//what you're trying to do
(function() {
  var section = makeSection(""what you're trying to do:"");
  section(""ABCDEFGHI as array of 32bit numbers: "" + toHex(H));
  section(""NUMKEY: "" + toHex(NUMKEY));
  var Hs_XORd = 0;
  for (var i = 0; i &lt; 10; i++) {
    Hs_XORd ^= H[i];
  }
  section(""H's XOR'd together: "" + toHex([Hs_XORd]));
  var NUMKEYs_XORd = 0;
  for (var i = 0; i &lt; H.length; i++) {
    NUMKEYs_XORd ^= NUMKEY[i];
  }
  section(""NUMKEY's XOR'd together: "" + toHex([NUMKEYs_XORd]));
  var K = NUMKEYs_XORd ^ Hs_XORd;
  section(""K: "" + toHex([K]));
  var X = K ^ NUMKEYs_XORd;
  section(""X (should be the same as H's XOR'd together): "" + toHex([X]));
})();


//what I think you mean to be doing (one time pad)
(function() {
  var section = makeSection(""what I think you mean to be doing (one time pad):"");
  section(""ABCDEFGHI as array of 32bit numbers: "" + toHex(H));
  section(""NUMKEY: "" + toHex(NUMKEY));
  var K = [];
  for (var i = 0; i &lt; H.length; i++) {
    K[i] = H[i] ^ NUMKEY[i];
  }
  section(""K (encoded message using NUMKEY as one time pad): "" + toHex(K));
  var X = [];
  for (var i = 0; i &lt; K.length; i++) {
    X[i] = K[i] ^ NUMKEY[i];
  }
  section(""X (decoded message, should be the same as ABCDEFGHI): "" + toHex(X));
})();</code></pre>
</div>
</div>
</p>
","103","<c++11><hash><encryption-symmetric>","2","0","1","2015-11-30 04:17:57","33987964","2","","2718642","","2015-11-30 04:17:57","2015-11-29 03:39:33",""
"56329621","How to generate hard to guess referral / coupon codes?","<p>I'm having a difficult time coming up with an algorithm that can create short (8 character) referral codes.  I want to use an easy to remember pattern where it's not possible to have offensive words show up in the codes.  I also don't want any letters getting confused with numbers -- so no 1's, l's, 0's and O's.  The pattern I've come up with is <strong>aa22aa22</strong>.  This pattern is basically two alphabetical characters followed by two numerical characters followed by two alphabetical characters followed by two numerical characters.  The alphabetical characters are all lower case.  This pattern supports over 4 billion possible codes.</p>

<p>Now for the tricky part.  I need to store the generated codes in Salesforce.  I think this needs to be done in a non-random way because if I do it randomly, I have to check for collisions against already generated codes.  This then gets into the governor limits that Salesforce imposes on you.  If you're not familiar with governor limits it basically means if you query the database too many times or if your process runs too long the underlying system throws a governor limit error. Random code creation introduces uncertainty regarding how many queries it will take to find a code that doesn't collide with a previously created code. So, now it basically comes down to creating codes that are guaranteed to never repeat and that means creating them sequentially.  The problem with a sequential method is the codes are easy to guess.  </p>

<p>Yes, I could have a non-Salesforce datastore that could act as the source of record and go with a random method and do the collision check there, but I'd like to see if the worldwide community has any ideas that might work.  I have tried to find a weak symmetrical encryption algorithm that can yield 8 character ciphers, but I've had no luck so far.</p>
","<p>I would chose an approach like using some random number generator to create a non -repeatable sequence like the one suggested here: <a href=""https://stackoverflow.com/a/196164/2331592"">https://stackoverflow.com/a/196164/2331592</a></p>

<p>You have to chose a generator that supports up to [number of possible coupons] combinations. 
Each time you draw a random number then you got another number that is the index of a possible coupon (--> permutation) that can be directly translated into a coupon (but since your coupons digits have different bases it is not so easy as changing numbers base)</p>

<h3>example:</h3>

<p>if your code pattern looks like <code>a1a</code> 
there <code>a</code> stands for <code>[abcde]</code> and <code>1</code> for <code>[123]</code>.
this would make 75 permutations.</p>

<pre><code>00 a1a    15 b1a     30 c1a     45 d1a     60 e1a
01 a1b    16 b1b     31 c1b     46 d1b     61 e1b
02 a1c    17 b1c     32 c1c     47 d1c     62 e1c
03 a1d    18 b1d     33 c1d     48 d1d     63 e1d
04 a1e    19 b1e     34 c1e     49 d1e     64 e1e
05 a2a    20 b2a     35 c2a     50 d2a     65 e2a
06 a2b    21 b2b     36 c2b     51 d2b     66 e2b
07 a2c    22 b2c     37 c2c     52 d2c     67 e2c
08 a2d    23 b2d     38 c2d     53 d2d     68 e2d
09 a2e    24 b2e     39 c2e     54 d2e     69 e2e
10 a3a    25 b3a     40 c3a     55 d3a     70 e3a
11 a3b    26 b3b     41 c3b     56 d3b     71 e3b
12 a3c    27 b3c     42 c3c     57 d3c     72 e3c
13 a3d    28 b3d     43 c3d     58 d3d     73 e3d
14 a3e    29 b3e     44 c3e     59 d3e     74 e3e
</code></pre>

<p>chosing a simple LCG based on<br>
<code>x = (a*x + c) mod m</code><br>
setting<br>
<code>x = 1</code>  (any number can be used)<br>
<code>a = 5</code>  (any large number can be used - just make sure that your arithmetic does not overflow)<br>
<code>c = 0</code><br>
<code>m = 73</code> </p>

<p>Setting <code>m</code> to be the next smallest prime to your permutation count to make sure that the generator always creates a valid number although that excludes a number of valid combinations at the end - so this generator will never generates the #73 and #74 and also never the #0 since then always <code>0</code> is created </p>

<p>this is the generator output until it loops again:</p>

<pre><code>01:  5      11: 31      21: 17      31: 47     41: 14    51: 43    61: 33    71: 44
02: 25      12:  9      22: 12      32: 16     42: 70    52: 69    62: 19    72:  1
03: 52      13: 45      23: 60      33: 7      43: 58    53: 53    63: 22    --&gt; 01:  5
04: 41      14:  6      24:  8      34: 35     44: 71    54: 46    64: 37
05: 59      15: 30      25: 40      35: 29     45: 63    55: 11    65: 39
06:  3      16:  4      26: 54      36: 72     46: 23    56: 55    66: 49
07: 15      17: 20      27: 51      37: 68     47: 42    57: 56    67: 26
08:  2      18: 27      28: 36      38: 48     48: 64    58: 61    68: 57
09: 10      19: 62      29: 34      39: 21     49: 28    59: 13    69: 66
10: 50      20: 18      30: 24      40: 32     50: 67    60: 65    70: 38
</code></pre>

<p>Each time we get a different index. from that index we can look up in the above table the code, but we also can calculate it:</p>

<p>The digits in our code have different values (as in out decimal digit system, where each digit has a value ten times higher than the previous digit)</p>

<p><code>a</code> positions have 5 possibilities and <code>1</code> has 3 possibilies.</p>

<pre><code>             a3,     a2,    a1
possibilies:  5       3     5
digit value: a3*3*5  a2*5   a1*1
digit value: a3*15   a2*5   a1*1

each of the possibilities has an attached value:

letters  a b c d e
value    0 1 2 3 4

numbers  1 2 3
value    0 1 2  &lt;-- this is a bit counter intuitive - but we need to start at 0

e3b --&gt;      e≙4     3≙2   b≙1
             4*3*5 + 2*5   + 1*1
          =  60    + 10    + 1
          =  71
code e3b --&gt; #71
</code></pre>

<p>the other way around to get the code from an index without requiring a look up table.<br>
Each digit can be calvulated by dividing (integer devision) the value by the digits value and take the modulo of the number of possibilites for this digit</p>

<pre><code>#51
    a1 = (51 /  1) mod 5 = 1 ≙ b    
    a2 = (51 /  5) mod 3 = 1 ≙ 2
    a3 = (51 / 15) mod 5 = 3 ≙ d

#51 --&gt; code d2b
</code></pre>

<p>As a general hint:
i would decouple the representation of the codes from the internal number.
The number in the example would be the permutation-index.
You only need to know the last issued index, to generate the next one.</p>

<p>How the Index is represented is may be independent from this. in our case the <code>a1a</code> representation.</p>

<p>Some things to look up:<br>
<a href=""https://en.wikipedia.org/wiki/Positional_notation"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Positional_notation</a> for number representations<br>
<a href=""https://en.wikipedia.org/wiki/Linear_congruential_generator"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Linear_congruential_generator</a>  to learn how to generator works and how to parameterize it</p>
","100","<encryption-symmetric>","5","2","2","2019-06-11 13:12:49","","2","0","","","","2019-05-27 16:29:24",""
"56329621","How to generate hard to guess referral / coupon codes?","<p>I'm having a difficult time coming up with an algorithm that can create short (8 character) referral codes.  I want to use an easy to remember pattern where it's not possible to have offensive words show up in the codes.  I also don't want any letters getting confused with numbers -- so no 1's, l's, 0's and O's.  The pattern I've come up with is <strong>aa22aa22</strong>.  This pattern is basically two alphabetical characters followed by two numerical characters followed by two alphabetical characters followed by two numerical characters.  The alphabetical characters are all lower case.  This pattern supports over 4 billion possible codes.</p>

<p>Now for the tricky part.  I need to store the generated codes in Salesforce.  I think this needs to be done in a non-random way because if I do it randomly, I have to check for collisions against already generated codes.  This then gets into the governor limits that Salesforce imposes on you.  If you're not familiar with governor limits it basically means if you query the database too many times or if your process runs too long the underlying system throws a governor limit error. Random code creation introduces uncertainty regarding how many queries it will take to find a code that doesn't collide with a previously created code. So, now it basically comes down to creating codes that are guaranteed to never repeat and that means creating them sequentially.  The problem with a sequential method is the codes are easy to guess.  </p>

<p>Yes, I could have a non-Salesforce datastore that could act as the source of record and go with a random method and do the collision check there, but I'd like to see if the worldwide community has any ideas that might work.  I have tried to find a weak symmetrical encryption algorithm that can yield 8 character ciphers, but I've had no luck so far.</p>
","<p>Before doing something complex and look into randomness, why not just generate a UUID?</p>

<p><a href=""https://en.wikipedia.org/wiki/Universally_unique_identifier"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Universally_unique_identifier</a></p>
","100","<encryption-symmetric>","5","0","2","2019-06-11 13:12:49","","2","0","","","","2019-05-27 16:29:24",""
"52910940","Weird Laravel Encryption EncryptString error","<p>I've been running into a really weird error with the Laravel EncryptString function, curious if anyone has any idea whats wrong.</p>

<p>Basically, I'm encrypting emails in PHP using Laravel, and then later decrypting it with both Laravel and Python. The Laravel code seems to work fine, and the Python code works fine for 99% of my test cases, BUT it glitches out whenever I use my own domain name in the email I'm encrypting.</p>

<p>My Code:</p>

<pre><code>public function encryptEmail(Request $request) {
    if (!Auth::check() &amp;&amp; !Auth::viaRemember()) {
            return redirect()-&gt;to('/login');
    }
    $this-&gt;validate($request, [
                'email' =&gt; 'bail|required|email',
    ]);
    $emailToEncrypt = $request-&gt;request-&gt;get('email');
    $encryptedEmail = Crypt::encryptString($emailToEncrypt);
    $email = Emails::where('accountId', Auth::id())-&gt;first();
    $email-&gt;val = $encryptedEmail;
    $email-&gt;save();
</code></pre>

<p>The Problem:
Everything works fine when I'm encrypting emails NOT from my own domain the webserver is running on.</p>

<p>Example:</p>

<pre><code> string in form           decrypt PHP          decrypt Python
'test@gmail.com' =&gt;     'test@gmail.com',    'test@gmail.com'
'myEmail@icloud.com' =&gt; 'myEmail@icloud.com' 'myEmail@icloud.com'
'other@hotmail.com' =&gt;  'other@hotmail.com'  'other@hotmail.com'
'me@mydomain.com' =&gt;    'me@mydomain.com'    'me@my'
</code></pre>

<p>As you can see, it seems like once it gets to my domain, it seems like the string encryption gets cut off, I've checked that the entire string is passed into EncryptString so really not sure what would make the Python code glitch out on emails with our domain.</p>

<p>Anyone have any ideas?</p>

<p>EDIT:</p>

<p>Python Code where enc is the encrypted Laravel data</p>

<pre><code>def decrypt(enc):
    key = base64.b64decode(""MyKey="")
    dataDict = json.loads(base64.b64decode(enc))

    decrypter = AES.new(key, AES.MODE_CBC, base64.b64decode(dataDict['iv']))
    data = decrypter.decrypt(base64.b64decode(dataDict['value']))

    try:
        print(data.decode())
        return data.decode()
    except Exception as e:
        return None
</code></pre>
","","99","<php><laravel><encryption><aes><encryption-symmetric>","0","","0","2018-10-21 00:41:00","","2","","8093698","","2018-10-21 00:41:00","2018-10-20 23:32:54",""
"18617038","Encrypt String in java and decrypt it in winrt c#","<p>How one would encrypt a string using symmetric/asymmetric decryption on WinRT Metro in C# and encrypt this in java, let's say in a webservice?</p>

<p>I want to use RsaPkcs7 algorithm and I can see that CryptographicKey class and RSAParameters class are not even near compatible.</p>

<p>How this could be accomplished?</p>
","<p>There is <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.x509certificate2.aspx#exampleToggle"" rel=""nofollow"">an example in MSDN</a> and <a href=""http://artplastika.ru/vestnik/x509-java/"" rel=""nofollow"">I made a Java port</a> of it.</p>
","99","<c#><encryption><base64><encryption-symmetric><encryption-asymmetric>","-1","0","1","2013-09-04 15:02:59","","0","","","","","2013-09-04 14:49:29",""
"49696429","How to decrypt(offline) value that is protected by SQL Server AEAD_AES_256_CBC_HMAC_SHA_256","<p>It is possible to manually decrypt value that is encrypted by sql server always encrypted mechanizm? I mean how to decrypt column value that is encrypted by <code>AEAD_AES_256_CBC_HMAC_SHA_256</code> algorithm.</p>

<p>I have encryption key(in other topic I was asking about generating one) so i my opinion it should be possible.</p>

<p>I wanna be resistant to azure availability, so offline decryption is important feature for me.</p>
","","98","<sql-server><encryption-symmetric><data-protection><always-encrypted><azure-sql-server>","4","","0","2018-04-06 15:39:55","","0","1","","","","2018-04-06 15:39:55",""
"18264465","encrypting an array with symmetric key","<p>let say I have an array of character that I want to encrypt using symmetric key. I try to do some research, and I found out that I can use rc4_encrypt function to encrypt and decrypt (I found this function in man page of crypto(3). I try to do something like this:</p>

<pre><code>char* myData = malloc(sizeof(char)*256);
//some code that fill the contain of the array
//encrypt myData
printf(""encrypted array: %s"", myData);
//decrypt myData
printf(""decrypted array: %s"", myData);
</code></pre>

<p>however, I don't know how can I use that rc4_encrypt function to encrypt and decrypt the array. Do I have to include anything? Can anyone help me? Thanks</p>
","<blockquote>
  <p>Do I have to include anything?</p>
</blockquote>

<p>99% of the time the answer to this is yes. In this specific case, it is no exception -- yes you do.</p>

<blockquote>
  <p>Can anyone help me?</p>
</blockquote>

<p>I can push you in the right direction. From a quick google search I found <a href=""http://www.cypherspace.org/rsa/rc4.c"" rel=""nofollow"">this</a>. It is a sample implementation of RC4 using their own implementation of the cipher. I am not sure what license it is released under so be careful when using it, however it has everything you need to both learn and implement your own RC4 cipher functionality in C.</p>
","96","<c><encryption><encryption-symmetric>","0","0","1","2013-08-16 01:41:03","","7","","","","","2013-08-16 01:33:13",""
"34833346","How can the browser handle encrypted data without HTTPS?","<p>I have a use case where the back end serves encrypted video files with a <code>Content-type: video/mp4</code> HTTP header. Normally, the browser (any browser) would start streaming the video file in it's built-in player, but since the data is encrypted, it doesn't know how to handle it.</p>

<p>The way the encryption is done is kind of like HTTPS. The server sends the front end a public key, the front end generates a symmetrical key with the public key and both the server and front end use it to encrypt/decrypt stuff.</p>

<p>I know that if I was using HTTPS, it would work, as an automatic process would occur between the server and browser. So I guess my question is <em>how do I get the browser to display an encrypted video without using HTTPS?</em></p>
","<p>You must either use a video player that natively knows how to decrypt that format (contact the vendor of the back end), or put a piece of middleware in to decrypt the format (contact the vendor of the back end).  In both cases, you'll need the key as well.</p>

<p>Or log into the back end to change its settings (guess who you should contact).</p>

<p>Alternately, read the manual for the back end.</p>
","95","<video><https><public-key-encryption><encryption-symmetric><encryption-asymmetric>","1","0","1","2016-02-02 06:22:06","","0","","","","","2016-01-16 23:32:05",""
"49920794","Unable to get identical Rijndael encryption result in php and C#","<p>An existing C# implementation encrypts a string by implementing <code>RijndaelManaged()</code> as follows:</p>

<pre class=""lang-cs prettyprint-override""><code>using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace sample
{
    class Program
    {
        static void Main(string[] args)
        {
            var sKey = ""ABCDEF0123456789ABCDEF0123456789"";
            var sData = ""Some Data""; 

            var bData = Encoding.ASCII.GetBytes(sData);

            var oAes = new RijndaelManaged();
            oAes.Key = Encoding.ASCII.GetBytes(sKey.Substring(0, 32));
            oAes.IV = Encoding.ASCII.GetBytes(sKey.Substring(0, 16));
            var bEncrypted = oAes.CreateEncryptor(oAes.Key, oAes.IV).TransformFinalBlock(bData, 0, bData.Length);

            Console.WriteLine(Convert.ToBase64String(bEncrypted));
            // Output: NXyPbSVtB5LomNcsPK7cgg==
        }
    }
}
</code></pre>

<p>A php implementation must produce the same result, given the same input, so that the two resulting strings may be compared. </p>

<p>All of the libraries that I have tried lack a method similar to <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.icryptotransform.transformfinalblock(v=vs.110).aspx"" rel=""nofollow noreferrer"">TransformFinalBlock()</a>.</p>

<p>Unfortunately, the C# implementation cannot be changed - we have to find a working php implementation.</p>

<p>A similar php implementation (using the <a href=""https://github.com/phpseclib/phpseclib"" rel=""nofollow noreferrer"">phpseclib/phpseclib</a> library) follows:</p>

<pre class=""lang-php prettyprint-override""><code>&lt;?php

function getBytes($s) {
    $result = '';
    for ($i = 0; $i &lt; mb_strlen($s, 'ASCII'); $i++) {
        $result .= ord($s[$i]);
    }
    return $result;
}

$sKey = ""ABCDEF0123456789ABCDEF0123456789"";
$sData = ""Some Data""; 

$bData = getBytes($sData);
$bKey = getBytes(substr($sKey, 0, 32));
$bIV = getBytes(substr($sKey, 0, 16));

include 'vendor/autoload.php';
$oAes = new \phpseclib\Crypt\Rijndael(2); // MODE_CBC - Default for RijndaelManaged()
$oAes-&gt;setBlockLength(128); // Default for RijndaelManaged()
$oAes-&gt;setKey($bKey);
$oAes-&gt;setIV($bIV);
$bEncrypted = $oAes-&gt;encrypt($bData);

echo(base64_encode($bEncrypted)); 
// Output: HwznolyEl6472Hm0rbNzINEa6LUwo4O4UAWd90P9PUg=
</code></pre>

<p>How can the same result be achieved in php?</p>
","","93","<c#><php><phpseclib><encryption-symmetric><rijndaelmanaged>","0","","0","2018-04-19 12:11:10","","9","0","","","","2018-04-19 12:11:10",""
"55623938","how to reduce the key number used in symmetric encryption","<p>We know the number of key used in symmetric encryption is n(n-1)/2. Is there a way to reduce the number of keys used in the communication? </p>

<p>Let’s say that if there are 1000 students wants to communicate with each other using symmetric encryption, according to the n(n-1)/2 ,  the total keys is 499500. Is there a way to reduce the key used during this story? </p>

<p>This question has been struggled me for two weeks I have tried Google and textbook but with no luck on finding the possible answers. Anyone can help me? Thank you.</p>
","<p>Only thing I can think of is to use Asymmetric encryption, each student would have one key pair each and be able to communicate with any other student.</p>

<p>Hope this helps.</p>
","92","<encryption-symmetric><symmetric><symmetric-difference>","0","0","1","2019-04-11 13:55:24","","0","","","","","2019-04-11 02:47:27",""
"44007725","Encrypting DB with multi user access","<p>I am working on a project that will be sold to government entities. Because they will be storing sensitive lists of employees, they do not want us to have access to their DB.</p>

<p>I am not an encryption specialist, but I was thinking of encrypting the DB the app uses in such a way that we do not have access to it, but many users in their organisation (users they gave permissions to) must be able to read the data from their app.</p>

<p>How does that work? I read about public/private keys, symmetric/asymmetric encryption, but I'm having a hard time understanding how all of that fits in.</p>
","","87","<encryption><encryption-symmetric><encryption-asymmetric>","0","","0","2017-05-16 17:14:14","","7","","","","","2017-05-16 17:14:14",""
"10182882","Verification header bad idea for encryption?","<p>I'm using encryption (blowfish symmetric) to send a packet.  Is it a bad idea from a security point of view to have a header at the beginning of the packet (that is also encrypted with the rest of the packet) that I can use to verify the packet is valid?</p>

<p>Pseudo code example:</p>

<pre><code>byte[] verificationHeader = [1,2,3,4,5];
receive(packet);
unencrypt(packet);
if (packet.getData().beginswith(verificationHeader)) {
   // assume packet is good, try to do something with it
} else {
   // drop packet
}
</code></pre>

<p>I want to verify it because any other application could be broadcasting in my group and I don't want to get mixed up with other stuff.</p>

<p>Could it potentially help a hacker decrypt my packet?</p>

<p>If it is a bad idea then can you suggest an alternative?</p>
","<p>At least in theory, it's a pretty bad idea -- it gives somebody doing a brute-force attack a known ""target"", so when/if they get the right key the know it (and quickly at that).</p>

<p>At least from a viewpoint of security, it would be much better to leave that part in plaintext. It might be more practical as well -- it saves you from decrypting something if it's not going to be useful anyway.</p>
","86","<encryption><blowfish><encryption-symmetric>","2","1","2","2012-04-16 23:21:41","10182967","0","1","","","","2012-04-16 22:58:27",""
"10182882","Verification header bad idea for encryption?","<p>I'm using encryption (blowfish symmetric) to send a packet.  Is it a bad idea from a security point of view to have a header at the beginning of the packet (that is also encrypted with the rest of the packet) that I can use to verify the packet is valid?</p>

<p>Pseudo code example:</p>

<pre><code>byte[] verificationHeader = [1,2,3,4,5];
receive(packet);
unencrypt(packet);
if (packet.getData().beginswith(verificationHeader)) {
   // assume packet is good, try to do something with it
} else {
   // drop packet
}
</code></pre>

<p>I want to verify it because any other application could be broadcasting in my group and I don't want to get mixed up with other stuff.</p>

<p>Could it potentially help a hacker decrypt my packet?</p>

<p>If it is a bad idea then can you suggest an alternative?</p>
","<p>I'm not sure if it bad idea or not, but if you decide it is then maybe you could send a random number, followed by the random number or'ed with the header. then on the other side you or that number with the random number again. Then you aren't sending the same thing a bunch of times, but it is all encrpyted so it isn't hackable. I think my math is right, but the idea holds anyway.</p>

<pre><code>ie
value = random | header;
send (random, value);
header = random | value;
</code></pre>
","86","<encryption><blowfish><encryption-symmetric>","2","0","2","2012-04-16 23:21:41","10182967","0","1","","","","2012-04-16 22:58:27",""
"29587526","Why does generateKey method from DES algorithm multiply the key by 8?","<p>I am in need of some explanations on the corresponding line, which I do not understand:</p>

<pre><code>KeyGenerationParameters kgp = new KeyGenerationParameters(sr,(DESParameters.DES_KEY_LENGTH) * 8);
</code></pre>

<p>Would it stop working, if I had, for instance, the number 6 instead of 8?</p>
","<p>It is multiplied by 8 because it is in bytes otherwise. The code wants bits. </p>
","85","<java><bouncycastle><des><encryption-symmetric>","-1","0","2","2015-04-23 20:32:30","29588951","3","","2227834","","2015-04-13 00:29:03","2015-04-12 08:36:30",""
"29587526","Why does generateKey method from DES algorithm multiply the key by 8?","<p>I am in need of some explanations on the corresponding line, which I do not understand:</p>

<pre><code>KeyGenerationParameters kgp = new KeyGenerationParameters(sr,(DESParameters.DES_KEY_LENGTH) * 8);
</code></pre>

<p>Would it stop working, if I had, for instance, the number 6 instead of 8?</p>
","<p>strength - the size, in bits, of the keys we want to produce.</p>

<p>it is from javadoc for KeyGenerationParameters. The DESPArameters.DES_KEY_LENGTH stores value 8 (DES key length in bytes), but KeyGenerationParameters requires key length in bits. 8 bytes * 8 = 64 bits in a case of KeyGenerationParameters. You can just put the constant value 64.</p>

<p>This class can be used for random key generation for any algorythm, for example, to generate DES key you must use value of 64, to generate 3DES key 128 or 192. </p>
","85","<java><bouncycastle><des><encryption-symmetric>","-1","0","2","2015-04-23 20:32:30","29588951","3","","2227834","","2015-04-13 00:29:03","2015-04-12 08:36:30",""
"40181972","How to encode Permutation of Substitution","<p>I want to substitute from cypher text to plain text. But there can be n! possibilities where n is the number of characters</p>

<p>for example</p>

<p>cypher: <code>[ a, b, c, d ]</code></p>

<p>plain : <code>[ x, y, z, m ]</code></p>

<p>Let's say that I am sure one of the combination is correct plain text. In the example I know that there are 4! possible plaintext but I have to calculate it in python, because in my real problem n is 10.</p>

<p>I am asking for a piece of code or algorithm</p>
","<p>you need to do letter frequency analysis. read this article about it <a href=""https://inventwithpython.com/hacking/chapter20.html"" rel=""nofollow"">https://inventwithpython.com/hacking/chapter20.html</a></p>

<p>there  is source there for frequency analysis in python</p>

<p>once you implement the source code from that tutorial you can then write</p>

<pre><code>def test_solution(cypher,plaintext,encrypted_text):
    tab = string.transtab(cypher,plaintext)
    decrypted = encrypted_text.translate(tab)
    return (englishFreqMatchScore(decrypted),plaintext, decrypted)

tests = [test_solution(cypher,k,enc_text) for k in itertools.permutations(plain)]
print ""SOLUTION:"",max(tests)
</code></pre>

<p>note that this assumes the plaintext will be English ... letter frequency will be different for different languages (I think at least)</p>

<p>unfortunately this problem is np hard i think ... in order to find the best solution you must explore the entire solution space (so as N increases length of plaintext alphabet it gets alot harder...)</p>
","80","<python><substitution><encryption-symmetric>","0","1","1","2016-10-21 17:21:14","40182171","2","","6779307","","2016-10-21 17:01:34","2016-10-21 17:01:10",""
"23741500","undefined method `encrypted_latitude' for #<Location:0x007f574a4eef50>","<p>Hi I am using symmetric encryption <a href=""https://github.com/reidmorrison/symmetric-encryption"" rel=""nofollow"">(This one)</a> gem to encrypt some fields. I have generated all the keys and followed all the steps given in it. But When I am trying to save data on my server it throws error on these lines</p>

<pre><code> attr_encrypted :latitude
 attr_encrypted :longitude
</code></pre>

<p>Error is</p>

<pre><code>undefined method `encrypted_latitude' for #&lt;Location:0x007f574a4eef50&gt;
</code></pre>

<p>I have checked types, steps for gem and all looks fine. 
Any idea what I am missing ...all works when I removed these lines from model. In Addition I have added attr_accessible for both fields and protected_attributes gem to make attr_accessible work  </p>

<p>Any idea where I went wrong..Thanks</p>
","<p>Looks like you may not have got a single instance of location. Do you have first at the end of the query?</p>

<p>i.e.</p>

<pre><code>lat = Latitude.where( query ).first
</code></pre>
","79","<ruby-on-rails><ruby-on-rails-3><ruby-on-rails-4><encryption-symmetric><attr-accessible>","0","0","2","2014-05-20 07:24:19","","3","","1386939","","2014-05-20 07:17:18","2014-05-19 15:21:41",""
"23741500","undefined method `encrypted_latitude' for #<Location:0x007f574a4eef50>","<p>Hi I am using symmetric encryption <a href=""https://github.com/reidmorrison/symmetric-encryption"" rel=""nofollow"">(This one)</a> gem to encrypt some fields. I have generated all the keys and followed all the steps given in it. But When I am trying to save data on my server it throws error on these lines</p>

<pre><code> attr_encrypted :latitude
 attr_encrypted :longitude
</code></pre>

<p>Error is</p>

<pre><code>undefined method `encrypted_latitude' for #&lt;Location:0x007f574a4eef50&gt;
</code></pre>

<p>I have checked types, steps for gem and all looks fine. 
Any idea what I am missing ...all works when I removed these lines from model. In Addition I have added attr_accessible for both fields and protected_attributes gem to make attr_accessible work  </p>

<p>Any idea where I went wrong..Thanks</p>
","<p>The error means that the column named <code>encrypted_latitude</code> is not available in your <code>locations</code> table.</p>

<p>From the <a href=""https://github.com/reidmorrison/symmetric-encryption"" rel=""nofollow"">doc</a>:</p>

<pre><code>class User &lt; ActiveRecord::Base
  # Requires table users to have a column called encrypted_bank_account_number
  attr_encrypted :bank_account_number
</code></pre>
","79","<ruby-on-rails><ruby-on-rails-3><ruby-on-rails-4><encryption-symmetric><attr-accessible>","0","0","2","2014-05-20 07:24:19","","3","","1386939","","2014-05-20 07:17:18","2014-05-19 15:21:41",""
"55917245","JAVA to PHP 7 Encryption","<p>I want to replicate the encryption/decryption from JAVA to PHP. But my problem the result is not match. I have no idea about java so I'm trying to understand each line of codes from java and write in PHP. </p>

<p><strong>JAVA</strong></p>

<pre class=""lang-java prettyprint-override""><code>
    secretkey: thisisasecretkey
    import java.security.MessageDigest;
    import java.util.Arrays;
    import javax.crypto.Cipher;
    import javax.crypto.SecretKey;
    import javax.crypto.spec.SecretKeySpec;

    import org.apache.commons.codec.binary.Base64;

    public class TDESEncrypter {

    public String _encrypt(String message, String secretKey) throws Exception {
    
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        byte[] digestOfPassword = md.digest(secretKey.getBytes(""utf-8""));
        byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);
            
        SecretKey key = new SecretKeySpec(keyBytes, ""DESede"");
        Cipher cipher = Cipher.getInstance(""DESede"");
        cipher.init(Cipher.ENCRYPT_MODE, key);
            
        byte[] plainTextBytes = message.getBytes(""utf-8"");
        byte[] buf = cipher.doFinal(plainTextBytes);
        byte [] base64Bytes = Base64.encodeBase64(buf);
        String base64EncryptedString = new String(base64Bytes);
            
        return base64EncryptedString;
    }

    public String _decrypt(String encryptedText, String secretKey) throws Exception {
    
        byte[] message = Base64.decodeBase64(encryptedText.getBytes(""utf-8""));
            
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        byte[] digestOfPassword = md.digest(secretKey.getBytes(""utf-8""));
        byte[] keyBytes = Arrays.copyOf(digestOfPassword, 24);
        SecretKey key = new SecretKeySpec(keyBytes, ""DESede"");
            
        Cipher decipher = Cipher.getInstance(""DESede"");
        decipher.init(Cipher.DECRYPT_MODE, key);
            
        byte[] plainText = decipher.doFinal(message);
            
        return new String(plainText, ""UTF-8"");
    }
   
}

</code></pre>

<p>Here's the steps using java that might be useful to replicate the functions in PHP.</p>

<ol>
<li>create a hash using sha1</li>
<li>convert the secretkey(from credentials) to bytes array with utf-8 encoding</li>
<li>padd step 2 with xeroes, truncating or padding with zeros (if necessary) so the copy has the specified length of 24</li>
<li><p>initialize Secretkey with keybytes from step3 using DESede</p></li>
<li><p>create cipher with DESede instance</p></li>
<li>initialize cipher with mode to encrypt using the key from step4</li>
<li>convert data(username/password) to encrypt to byte array with utf-8 encoding</li>
<li>encrypt step 7 using step 6 cipher</li>
<li>encode step8 in base 64 format</li>
<li>convert step9 to string for final string encrypted message</li>
</ol>

<p>What I have done so far,</p>

<pre class=""lang-php prettyprint-override""><code>function encrypt($data, $secret)  { 



    $key = sha1(utf8_encode($secret), true); &lt;-- Step 1 &amp; 2
    $iv = utf8_encode(""jvz8bUAx""); &lt;-- Do I use initialise vector on it?

    $key .= substr($key, 0, 8); 

    $method = 'des-ede3-cbc'; //&lt;-- Is this cypher method correct from the above?


    if (strlen($data) % 8) {
        $data = str_pad($data, strlen($data) + 8 - strlen($data) % 8, ""\0"");
    }

    $encrypted = openssl_encrypt($data, $method, $key, OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING, $iv); //Force zero padding.

    $encrypted = urlencode(base64_encode($encrypted)); // Added the urlencode.....
    return $encrypted;
} 
</code></pre>
","<p>In the Java-code, the encryption-algorithm is specified as <code>DESede</code>. This corresponds to <code>DESede/ECB/PKCS5Padding</code>, i.e. the ECB-mode and PKCS5-padding are used. This means for the PHP-code:</p>

<ul>
<li><code>des-ede3</code> must be applied </li>
<li>all code portions related to an IV must be removed (since the ECB-mode doesn't use an IV)</li>
<li>the custom padding (which is by no means <a href=""https://en.wikipedia.org/wiki/Padding_(cryptography)"" rel=""nofollow noreferrer"">PKCS5-Padding</a>) must be removed (since <code>openssl_encrypt</code> uses PKCS5-padding by default)</li>
</ul>

<p>In the Java-code, the SHA1-hash (with a size of 20 bytes) is extended to 24 bytes by appending 0-values. This extension must also be done in the PHP-code.</p>

<p>A possible PHP-counterpart to the Java <code>_encrypt</code>-method is:</p>

<pre><code>function encrypt($data, $secret)  {
    $key = sha1(mb_convert_encoding($secret, ""UTF-8""), true);                   // Create SHA-1 hash (20 byte) 
    $key = str_pad($key, 24, ""\0"");                                             // Extend to 24 byte by appending 0-values (would also happen automatically on openssl_encrypt-call)
    $encrypted = openssl_encrypt($data, 'DES-EDE3', $key, OPENSSL_RAW_DATA);    // Encryption: DESede (24 byte key), ECB-mode, PKCS5-Padding
    return base64_encode($encrypted);                                           // Base64-encoding
}
</code></pre>

<p>Finally: The Java-code has a number of disadvantages, e.g.</p>

<ul>
<li>Triple-DES is used. A better choice would be AES, see e.g. <a href=""https://stackoverflow.com/questions/5554526/comparison-of-des-triple-des-aes-blowfish-encryption-for-data"">here</a></li>
<li>the ECB-mode is used, which is unsafe per se, see e.g. <a href=""https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption"">here</a>. A better choice would be CBC or GCM (the latter under AES). </li>
<li>SHA-1 is used as KDF (which gives a too short key, 20 bytes instead of the 24 bytes actually needed). A better choice would be <a href=""https://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow noreferrer"">PBKDF2</a>.</li>
</ul>

<p>The latter just for the sake of completeness, as it's probably legacy code that can't be changed for any reason.</p>
","79","<java><php><encryption><encryption-symmetric><3des>","-1","1","1","2019-05-01 00:10:58","55929380","6","","11431445","","2019-05-01 00:10:58","2019-04-30 08:53:36",""
"50549324","AES decrypted message not matching the original message","<blockquote>
  <p>I am trying to <code>Encrypt</code> and <code>Decrypt</code> a string using <code>AES256</code>. But The decrypted string is not matching the original one. I am not sure, but maybe I am getting the <code>Encoding</code> part wrong.</p>
</blockquote>

<p>I am using <code>CSPRNG</code> to generate the <code>IV</code> and <code>PBDKF2</code> for generating a Key to be used for AES Encryption</p>

<p><strong>Program.cs</strong>:  </p>

<pre><code>using System;
using System.Text;

namespace AESEncryptionUtility
{
    class Program
    {
        private static string _pass = ""MasterPass"";
        private static string _msg = ""Mohit"";
        private static byte[] key = EncryptionUtility.GenerateKey(_pass, 32);
        private static byte[] IV = EncryptionUtility.GenerateSalt(16);
        static void Main(string[] args)
        {
            Console.WriteLine(""Hello World!"");
            byte[] encrypted = Encrypt(_msg);
            byte[] decrypted = Decrypt(Encoding.ASCII.GetString(encrypted));
        }

        public static byte[] Encrypt(string msg)
        {
            byte[] asciiBytesOriginal = Encoding.ASCII.GetBytes(_msg);
            byte[] encrypted = EncryptionUtility.Encrypt(asciiBytesOriginal, key, IV);
            Console.WriteLine(""encrypted started"");
            foreach(var b in encrypted)
            {
                Console.Write(b + "" "");
            }
            Console.WriteLine(""\nencrypted ended"");
            return encrypted;
        }

        public static byte[] Decrypt(string cipher)
        {
            byte[] asciiBytes = Encoding.ASCII.GetBytes(cipher);
            byte[] originalBytes = EncryptionUtility.Decrypt(asciiBytes, key, IV);
            Console.WriteLine(""decrypted started"");
            foreach(var b in originalBytes)
            {
                Console.Write(b + "" "");
            }
            Console.WriteLine(""\ndecrypted ended"");
            string original = Encoding.ASCII.GetString(originalBytes);
            Console.WriteLine(""original string: "" + original);
            return originalBytes;
        }
    }
}
</code></pre>

<p><strong>EncryptionUtility.cs</strong>:  </p>

<pre><code>using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace AESEncryptionUtility
{
    public static class EncryptionUtility
    {
        public static byte[] Encrypt(byte[] plainBytes, byte[] key, byte[] IV)
        {
            byte[] encrypted = null;
            using (AesCryptoServiceProvider aesAlgo = new AesCryptoServiceProvider())
            {
                aesAlgo.Key = key;
                aesAlgo.BlockSize = 128;
                aesAlgo.Mode = CipherMode.CBC;
                //aesAlgo.Padding = PaddingMode.PKCS7;
                aesAlgo.Padding = PaddingMode.Zeros;
                aesAlgo.IV = IV;
                ICryptoTransform encryptor = aesAlgo.CreateEncryptor();
                encrypted = encryptor.TransformFinalBlock(plainBytes, 0, plainBytes.Length);

            }
            return encrypted;
        }

        public static byte[] Decrypt(byte[] cipherBytes, byte[] key, byte[] IV)
        {
            byte[] decrypted = null;
            using (AesCryptoServiceProvider aesAlgo = new AesCryptoServiceProvider())
            {
                aesAlgo.Key = key;
                aesAlgo.BlockSize = 128;
                aesAlgo.Mode = CipherMode.CBC;
                //aesAlgo.Padding = PaddingMode.PKCS7;
                aesAlgo.Padding = PaddingMode.Zeros;
                aesAlgo.IV = IV;
                ICryptoTransform decryptor = aesAlgo.CreateDecryptor();
                decrypted = decryptor.TransformFinalBlock(cipherBytes, 0, cipherBytes.Length);
            }
            return decrypted;

        }
        public static byte[] GenerateKey(string masterPassword, int size) //size in bytes
        {
            byte[] salt = GenerateSalt(size);
            Rfc2898DeriveBytes pbfdk = new Rfc2898DeriveBytes(masterPassword, salt, 20000);
            return pbfdk.GetBytes(size);

        }

        public static byte[] GenerateSalt(int size) //size in bytes
        {
            RNGCryptoServiceProvider generator = new RNGCryptoServiceProvider();
            byte[] salt = new byte[size];
            generator.GetNonZeroBytes(salt);
            return salt;
        }

    }
}
</code></pre>
","<p>Have you tried changing the second last line to:</p>

<pre><code>byte [] decrypted = Decrypt ( encrypted);
</code></pre>
","77","<c#><encryption><aes><encryption-symmetric>","1","0","2","2018-05-27 05:45:41","50549377","0","","","","","2018-05-27 05:36:34",""
"50549324","AES decrypted message not matching the original message","<blockquote>
  <p>I am trying to <code>Encrypt</code> and <code>Decrypt</code> a string using <code>AES256</code>. But The decrypted string is not matching the original one. I am not sure, but maybe I am getting the <code>Encoding</code> part wrong.</p>
</blockquote>

<p>I am using <code>CSPRNG</code> to generate the <code>IV</code> and <code>PBDKF2</code> for generating a Key to be used for AES Encryption</p>

<p><strong>Program.cs</strong>:  </p>

<pre><code>using System;
using System.Text;

namespace AESEncryptionUtility
{
    class Program
    {
        private static string _pass = ""MasterPass"";
        private static string _msg = ""Mohit"";
        private static byte[] key = EncryptionUtility.GenerateKey(_pass, 32);
        private static byte[] IV = EncryptionUtility.GenerateSalt(16);
        static void Main(string[] args)
        {
            Console.WriteLine(""Hello World!"");
            byte[] encrypted = Encrypt(_msg);
            byte[] decrypted = Decrypt(Encoding.ASCII.GetString(encrypted));
        }

        public static byte[] Encrypt(string msg)
        {
            byte[] asciiBytesOriginal = Encoding.ASCII.GetBytes(_msg);
            byte[] encrypted = EncryptionUtility.Encrypt(asciiBytesOriginal, key, IV);
            Console.WriteLine(""encrypted started"");
            foreach(var b in encrypted)
            {
                Console.Write(b + "" "");
            }
            Console.WriteLine(""\nencrypted ended"");
            return encrypted;
        }

        public static byte[] Decrypt(string cipher)
        {
            byte[] asciiBytes = Encoding.ASCII.GetBytes(cipher);
            byte[] originalBytes = EncryptionUtility.Decrypt(asciiBytes, key, IV);
            Console.WriteLine(""decrypted started"");
            foreach(var b in originalBytes)
            {
                Console.Write(b + "" "");
            }
            Console.WriteLine(""\ndecrypted ended"");
            string original = Encoding.ASCII.GetString(originalBytes);
            Console.WriteLine(""original string: "" + original);
            return originalBytes;
        }
    }
}
</code></pre>

<p><strong>EncryptionUtility.cs</strong>:  </p>

<pre><code>using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace AESEncryptionUtility
{
    public static class EncryptionUtility
    {
        public static byte[] Encrypt(byte[] plainBytes, byte[] key, byte[] IV)
        {
            byte[] encrypted = null;
            using (AesCryptoServiceProvider aesAlgo = new AesCryptoServiceProvider())
            {
                aesAlgo.Key = key;
                aesAlgo.BlockSize = 128;
                aesAlgo.Mode = CipherMode.CBC;
                //aesAlgo.Padding = PaddingMode.PKCS7;
                aesAlgo.Padding = PaddingMode.Zeros;
                aesAlgo.IV = IV;
                ICryptoTransform encryptor = aesAlgo.CreateEncryptor();
                encrypted = encryptor.TransformFinalBlock(plainBytes, 0, plainBytes.Length);

            }
            return encrypted;
        }

        public static byte[] Decrypt(byte[] cipherBytes, byte[] key, byte[] IV)
        {
            byte[] decrypted = null;
            using (AesCryptoServiceProvider aesAlgo = new AesCryptoServiceProvider())
            {
                aesAlgo.Key = key;
                aesAlgo.BlockSize = 128;
                aesAlgo.Mode = CipherMode.CBC;
                //aesAlgo.Padding = PaddingMode.PKCS7;
                aesAlgo.Padding = PaddingMode.Zeros;
                aesAlgo.IV = IV;
                ICryptoTransform decryptor = aesAlgo.CreateDecryptor();
                decrypted = decryptor.TransformFinalBlock(cipherBytes, 0, cipherBytes.Length);
            }
            return decrypted;

        }
        public static byte[] GenerateKey(string masterPassword, int size) //size in bytes
        {
            byte[] salt = GenerateSalt(size);
            Rfc2898DeriveBytes pbfdk = new Rfc2898DeriveBytes(masterPassword, salt, 20000);
            return pbfdk.GetBytes(size);

        }

        public static byte[] GenerateSalt(int size) //size in bytes
        {
            RNGCryptoServiceProvider generator = new RNGCryptoServiceProvider();
            byte[] salt = new byte[size];
            generator.GetNonZeroBytes(salt);
            return salt;
        }

    }
}
</code></pre>
","<p>You can't convert arbitrary binary data to a string:</p>

<pre><code>byte[] decrypted = Decrypt(Encoding.ASCII.GetString(encrypted));
</code></pre>

<p>And expect it to, just by chance, make sense as the particular character encoding you have chosen.  It doesn't work that way.  Encryption algorithms operate on bytes, not strings.  If you change the following, your code will work:</p>

<pre><code>...
public static byte[] Decrypt(byte[] cipher)
{
    byte[] asciiBytes = cipher;
    ...
</code></pre>
","77","<c#><encryption><aes><encryption-symmetric>","1","4","2","2018-05-27 05:45:41","50549377","0","","","","","2018-05-27 05:36:34",""
"15136900","Padding is invalid and cannot be removed aes","<p>I have searched solutions on this website but none solved my problem. Sometimes I recieve ""padding is invalid and cannot be removed"" exception. I don't know what to do. When I tried some solutions, there was empty decrypted text or it didn't work.
Here's my class</p>

<pre><code>static class Aes
{
    public static string bytesToHexString(byte[] key)
    {
        return BitConverter.ToString(key).Replace(""-"", String.Empty);
    }

    public static byte[] stringToBytes(string key)
    {
        return Enumerable.Range(0, key.Length)
                 .Where(x =&gt; x % 2 == 0)
                 .Select(x =&gt; Convert.ToByte(key.Substring(x, 2), 16))
                 .ToArray();
    }

    public static void generateKeyAndIv(out byte[] key, out byte[] IV)
    {
        using (AesCryptoServiceProvider aesAlg = new AesCryptoServiceProvider())
        {
            aesAlg.BlockSize = 128;
            aesAlg.KeySize = 256;
            aesAlg.Padding = PaddingMode.PKCS7;
            aesAlg.Mode = CipherMode.CBC;
            aesAlg.GenerateKey();
            aesAlg.GenerateIV();
            key = aesAlg.Key;
            IV = aesAlg.IV;
        }
    }
    public static string EncryptStringToString(string plainText, byte[] Key, byte[] IV)
    {
        byte[] bytes =EncryptStringToBytes_Aes(plainText, Key, IV);
        return Convert.ToBase64String(bytes);
        //return Encoding.UTF8.GetString(bytes, 0, bytes.Length);
    }

    public static string DecryptStringToString(string cipherText, byte[] Key, byte[] IV)
    {
        //byte[] bytes = Encoding.UTF8.GetBytes(cipherText);
        byte[] bytes = Convert.FromBase64String(cipherText);
        return DecryptStringFromBytes_Aes(bytes, Key, IV);
    }

    public static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)
    {
        // Check arguments. 
        if (plainText == null || plainText.Length &lt;= 0)
            throw new ArgumentNullException(""plainText"");
        if (Key == null || Key.Length &lt;= 0)
            throw new ArgumentNullException(""Key"");
        if (IV == null || IV.Length &lt;= 0)
            throw new ArgumentNullException(""Key"");
        byte[] encrypted;
        // Create an AesCryptoServiceProvider object 
        // with the specified key and IV. 
        using (AesCryptoServiceProvider aesAlg = new AesCryptoServiceProvider())
        {
            aesAlg.BlockSize = 128;
            aesAlg.KeySize = 256;
            aesAlg.Padding = PaddingMode.PKCS7;
            aesAlg.Mode = CipherMode.CBC;
            aesAlg.Key = Key;
            aesAlg.IV = IV;
            // Create a decrytor to perform the stream transform.
            ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);


            // Create the streams used for encryption. 
            using (MemoryStream msEncrypt = new MemoryStream())
            {
                using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                    {
                        //Write all data to the stream.
                        swEncrypt.Write(plainText);
                    }
                }

                encrypted = msEncrypt.ToArray();
            }
           /* using (var msEncrypt = new MemoryStream())
            using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
            using (var swEncrypt = new StreamWriter(csEncrypt))
            {
                swEncrypt.Write(plainText);
                csEncrypt.FlushFinalBlock();
                encrypted = msEncrypt.ToArray();
            }*/
        }


        // Return the encrypted bytes from the memory stream. 
        return encrypted;

    }

    public static string DecryptStringFromBytes_Aes(byte[] cipherText, byte[] Key, byte[] IV)
    {
        // Check arguments. 
        if (cipherText == null || cipherText.Length &lt;= 0)
            throw new ArgumentNullException(""cipherText"");
        if (Key == null || Key.Length &lt;= 0)
            throw new ArgumentNullException(""Key"");
        if (IV == null || IV.Length &lt;= 0)
            throw new ArgumentNullException(""IV"");

        // Declare the string used to hold 
        // the decrypted text. 
        string plaintext = null;

        // Create an AesCryptoServiceProvider object 
        // with the specified key and IV. 
        using (AesCryptoServiceProvider aesAlg = new AesCryptoServiceProvider())
        {
            aesAlg.BlockSize = 128;
            aesAlg.KeySize = 256;
            aesAlg.Padding = PaddingMode.PKCS7;
            aesAlg.Mode = CipherMode.CBC;
            aesAlg.Key = Key;
            aesAlg.IV = IV;
            // Create a decrytor to perform the stream transform.
            ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

            // Create the streams used for decryption. 
            using (MemoryStream msDecrypt = new MemoryStream(cipherText))
            {
                using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                    {

                        // Read the decrypted bytes from the decrypting stream 
                        // and place them in a string.
                        plaintext = srDecrypt.ReadToEnd();
                    }
                }
            }

        }

        return plaintext;

    }
}
</code></pre>

<p>Please help because I'm exhausted by finding solution on my own</p>
","","77","<c#><.net><aes><encryption-symmetric><rijndael>","0","","0","2013-02-28 14:15:05","","8","","2119757","","2013-02-28 14:15:05","2013-02-28 13:34:48","2013-02-28 21:55:25"
"42820680","A more secure symmetric encryption key vs. asymmetric key","<p>What are the advantages of having a symmetric encryption algorithm with a lower probability of key retrieval than the asymmetric encryption used for transferal of symmetric key? I can see how it obligates the eavesdropper to concentrate on the asymmetric key, but are there other advantages?</p>
","","74","<encryption><encryption-symmetric><encryption-asymmetric>","0","","0","2018-02-11 14:58:47","","6","","1033581","","2018-02-11 14:58:47","2017-03-15 21:07:19",""
"13818594","Is there a significant risk to encrypt the secret with itself as key (with salt)?","<p>I'd like to store user passwords encrypted in a database. I need to use a bidirectional, symetrical encryption, eg. AES (using a hash is not an option in this special case).</p>

<p><strong>Part 1</strong><br>
Is there a significant increased risk in using the string that I need to encrypt as the key? A public available (same row) salt is added to the key, if that matters.</p>

<p><strong>Part 2</strong><br>
The same question, but applied to the following scenario:  </p>

<ul>
<li>A is encrypted with B as the key (including salt) and</li>
<li>B is encrypted with A as the key (including salt).</li>
</ul>

<p>Both encrypted values are stored in the same database row.</p>
","<h2>Part 1</h2>

<p>As long as your string password is long enough and your function to convert the string into a key is robust, then there are no special security concerns attached to using a string password this way.</p>

<h2>Part 2</h2>

<p>To prevent against replay attacks involving the first block, you should always salt. Either inject a nonce into the IV, or inject at the head of the stream being encrypted.</p>
","73","<encryption><encryption-symmetric>","0","1","1","2012-12-12 12:44:41","13840095","3","","","","","2012-12-11 10:45:21",""
"45545679","Masking hardware decryption key in usb flash drive","<p>I am a developer. I am running Debian and I have LUKS storage for my projects. It is encrypted with AES key 512 bits. I use password to decrypt this storage. However, password is strong and I change it every N months. What I want to do is to create another key (LUKS allows it) for my storage and store it somewhere in my USB drives box (about a hundred of them don't ask me why) as a backup plan if I forget password or would need to let someone open storage without telling the actual password.</p>

<p>My first easiest solution was to create something like this: first partition is vfat using 99% of space. And last partition of 1% size will hold only key file. I'll even be able to write a script somehow like ""Plug in recovery key"" which would look for FS ID. This wouldn't be suspicious for Windows users, but I tho I could do it better. So now the question is: how to perform it better (better security-wise)? My best thought was to write 512 bits key between partitions or just after one big partition without creating another partition for key, but the problem is that I'm not sure whether this data could be overwritten or not (it is not in use by FSs so it could be used for something else?). And I don't really know how to access it later (I guess 'dd' can read from exact block for exact length). Thank you for any answer.</p>
","","70","<linux><encryption><privacy><encryption-symmetric><luks>","0","","0","2017-08-07 11:18:56","","2","","","","","2017-08-07 11:18:56",""
"19999484","Encryption algorithm for .Net and Ruby on Rails","<p>I will be sending a session token from a .Net MVC app to a RubyOnRails app.  I would like to symmetrically encrypt the token.</p>

<p>Is there a reliable algorithm which will work between the two different languages/frameworks?</p>

<p>My initial thoughts was to use AES.</p>
","<p>AES is supported in both .NET and Ruby on Rails (see <a href=""https://stackoverflow.com/questions/8489486/encryption-and-decryption-algorithm-in-rails"">this related question</a> for some RoR caveats).</p>

<p>AES is also well-regarded as a strong symmetric cipher, so it isn't a bad choice to make. Of course, you must ensure both frameworks support the exact mode of operation and padding you require, which will depend upon your security goals.</p>
","69","<.net><ruby-on-rails><encryption><encryption-symmetric>","0","0","1","2013-11-15 11:45:24","","2","","474189","","2013-11-15 11:33:47","2013-11-15 10:57:34",""
"54410333","Does Windows have AEAD API? (c.f. CryptProtectData, but using a key)","<p>Does Windows provide a high-level, tested, supported, function to perform authenticated encryption using a symmetric key?</p>

<p>Of course AEAD (Authenticated Encryption with Additional Data) would be better. But this question is only asking AE (Authenticated Encryption).</p>

<h1>Background</h1>

<p>Windows provides a (relatively) simple API to encrypt a blob using the <code>CryptProtectData</code> API, which we can wrap in an easy to use function:</p>

<pre class=""lang-cs prettyprint-override""><code>public Byte[] ProtectBytes(Byte[] plaintext)
{
   //...
}
</code></pre>

<p>The details of <code>ProtectBytes</code> are less important than the idea that you can use it quite easily:</p>

<ul>
<li>here are the bytes I want encrypted by a secret key held in the <code>System</code></li>
<li>give me back the encrypted blob</li>
</ul>

<p>The returned <em>blob</em> is an undocumented <a href=""http://www.passcape.com/index.php?section=blog&amp;cmd=details&amp;id=20#31"" rel=""nofollow noreferrer""><sup>documentation</sup></a> structure that contains everything needed (i.e. hash algorithm, cipher algorithm, salt, HMAC signature, etc) to decrypt and return the original data .</p>

<p>For completeness, here's the sample pseudocode implementation of <code>ProtectBytes</code> that uses the <code>Crypt API</code> to protect bytes:</p>

<pre class=""lang-cs prettyprint-override""><code>public Byte[] ProtectBytes(Byte[] plaintext)
{
   //Setup our n-byte plaintext blob
   DATA_BLOB dataIn;
   dataIn.cbData = plaintext.Length;
   dataIn.pbData = Addr(plaintext[0]);

   DATA_BLOB dataOut;

   //dataOut = EncryptedFormOf(dataIn)
   BOOL bRes = CryptProtectData(
         dataIn,
         null,     //data description (optional PWideChar)
         null,     //optional entropy (PDATA_BLOB)
         null,     //reserved
         null,     //prompt struct
         CRYPTPROTECT_UI_FORBIDDEN || CRYPTPROTECT_LOCAL_MACHINE,
         ref dataOut);
   if (!bRes) then
   {
      DWORD le = GetLastError();
      throw new Win32Error(le, ""Error calling CryptProtectData"");
   }

   //Copy ciphertext from dataOut blob into an actual array
   bytes[] result;
   SetLength(result, dataOut.cbData);
   CopyMemory(dataOut.pbData, Addr(result[0]), dataOut.cbData);

   //When you have finished using the DATA_BLOB structure, free its pbData member by calling the LocalFree function
   LocalFree(HANDLE(dataOut.pbData)); //LocalFree takes a handle, not a pointer. But that's what the SDK says.
}
</code></pre>

<p>An important point in all this is that <strong>CryptProtectData</strong> can operate in one of two modes:</p>

<ul>
<li>the data can only be decrypted by <strong>you</strong> (becuase it's, essentially, encrypted with your Windows password)</li>
<li>the data can be decrypted by anyone running on the same local machine (because it is encrypted, essentially, with the password of the local security subsystem)</li>
</ul>

<h2>CryptProtectDataWithPassword?</h2>

<p>How to do the same with an explicit password?</p>

<p>The downside of <strong>CryptProtectData</strong> is that the decryption is tied to either:</p>

<ul>
<li>me</li>
<li>my machine</li>
</ul>

<p>This means that the encrypted data cannot be passed to anyone else. I need something more portable between different people. (e.g. people on other computers, people not on the same domain, people not <em>on</em> a domain)</p>

<h1>Crypto API Next Gen on Windows 8 also doesn't support it</h1>

<p>There is the bcrypt (aka BestCrypt, aka Cng, aka CryptoNG, aka Crypto NextGen, aka Cryptography Next Generation API) which provides an updated version of
the Windows 2000-era <strong>CryptProtectData</strong> called
<strong><a href=""https://docs.microsoft.com/en-us/windows/desktop/api/ncryptprotect/nf-ncryptprotect-ncryptprotectsecret"" rel=""nofollow noreferrer"">ProtectSecret</a></strong>. </p>

<p>This function allows you to specify who on the domain can decrypt the secret - either through an SID, e.g.:</p>

<ul>
<li><code>""SID=S-1-1-0""</code>: Everyone group </li>
<li><code>""SID=S-1-5-32-544""</code>: BUILTIN\Administrators group</li>
<li><code>""SID=S-1-5-32-545""</code>: BUILTIN\Users group</li>
</ul>

<p>Or through a certificate in your private store:</p>

<ul>
<li><code>""CERTIFICATE=HashId:87b8808ecb233e0736b84b60670065b36ca615f1""</code>: CN=youporn.com</li>
</ul>

<p>The downside of this newer function is that:</p>

<ul>
<li>it requires Windows 8 or newer</li>
<li>it only works on the domain</li>
<li>or with a certificate</li>
</ul>

<p>I need it something that works with a <strong>password</strong> (i.e. a secret).</p>

<h1>I don't want to roll my own</h1>

<p>Does Windows have an existing high-level function to perform encryption with a password? One major virtue of Windows supporting it, is that they will return an opaque blob that supports versioning. </p>

<ul>
<li>If they suddenly decide to change from AES-128 to AES-256</li>
<li>or change the length of the salt</li>
<li>or suddenly decide to completely switch to <a href=""https://blog.cryptographyengineering.com/2012/05/19/how-to-choose-authenticated-encryption/"" rel=""nofollow noreferrer"">GCM in CTR mode encryption with the addition of a Carter-Wegman MAC set in a Galois field</a></li>
</ul>

<p>Everything is packaged into a versioned structure that contains everything needed to do the decryption, authentication. They can change the algorithm and old encrypted blobs still work, while new blobs will also work. </p>

<p>Plus, i don't want to roll my own. We all know how to roll your own encryption. It's pretty easy to <sup>not</sup> <a href=""https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption"">screw up</a> encryption:</p>

<p><a href=""https://i.stack.imgur.com/g2iTx.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/g2iTx.png"" alt=""enter image description here""></a></p>

<p>oops, next version</p>

<p><a href=""https://i.stack.imgur.com/ldqXF.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ldqXF.png"" alt=""enter image description here""></a></p>

<p>oops, next version</p>

<p><a href=""https://i.stack.imgur.com/irwMn.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/irwMn.png"" alt=""enter image description here""></a></p>

<p>So rather than me rolling my own, i would love:</p>

<ul>
<li>something that comes with Windows </li>
<li>returns an opaque blob</li>
<li>is vetted and tested by people with more time and knowledge than myself</li>
</ul>

<p>The reason i don't use a libsodium is because it's not available for the language i'm using. (also it wasn't the question)</p>
","","68","<windows><encryption><windows-7><encryption-symmetric><cng>","1","","0","2019-05-05 21:25:00","","2","","12597","","2019-05-05 21:25:00","2019-01-28 21:09:57",""
"43121700","misunderstanding of TLS functionality on Mosquitto's broker","<p>i configured TLS on the mosquitto's broker as described , if i understand the real functionality of TLS :
it use both asymmetric and symmetric crypto ,asymmetric crypto for changing the key between broker/server and client and symmetric crypto to encrypt the communication between them , here i don't see where is symmetric crypto and if a type mosquitto_sub -v -u ""user"" -P ""password"" -t ""path/to/topic "" --cafile ""path/to/ca.crt "" how can i know that the communication is encrypted
I'm so confused can someone explain ???</p>
","<p>I think you are misunderstanding how Transport Layer Security (TLS) functions. In TLS the asymmetric (public/private) encryption is used to allow two systems to agree on a form of encryption to use for communication. See the answer to this question (<a href=""https://stackoverflow.com/questions/6088583/which-symmetric-key-algorithm-does-ssl-use"">Which symmetric key algorithm does SSL use?</a>) or if you are a more visual person take a look at the diagram on page 11 of this white paper (<a href=""https://www.sans.org/reading-room/whitepapers/protocols/ssl-tls-beginners-guide-1029"" rel=""nofollow noreferrer"">https://www.sans.org/reading-room/whitepapers/protocols/ssl-tls-beginners-guide-1029</a>).</p>

<p>In your specific example, what is happening (as I understand it) is that that the Client requests an SSL connection to the Broker. The Broker and Client then use public key encryption to allow the two systems to securely agree on a form of encryption and a shared key. </p>
","67","<ssl><tls1.2><mosquitto><encryption-symmetric><encryption-asymmetric>","0","0","1","2017-04-03 19:41:23","","1","","","","","2017-03-30 15:07:37",""
"55871478","Is it possible to use Symmetric Keys within a view?","<p>I have View which I want to alter with a condition. But I want to use symmetric key inside the view. Below is my code:</p>

<pre><code>create view dbo.[Test_view]
select

t.med_id,
t.medicine_name,
case when 
    t.taxo_id like '%include%' then '1'
    else '0' end as 'Taxo_number' ----The taxo_id is encrypted column
from dbo.Meds t
</code></pre>

<p>I want to include one more column in the view 'Taxo_number' which is based on taxo_id column that is encrypted with symmetric key.</p>

<pre><code>My key is: OPEN SYMMETRIC KEY [Test_Key] DECRYPTION BY CERTIFICATE [Test_Cert]
</code></pre>

<p>Is there a way to include this key in the 'View' script? Pls help!</p>
","<p>You sure can. Here's a POC:</p>

<pre><code>use tempdb;
go

create symmetric key [mykey] 
    WITH ALGORITHM = AES_256  
    ENCRYPTION BY PASSWORD = 'SouperSecretz&gt;789'
go

create table dbo.Secrets (
    Secret varbinary(400)
)
go

create view dbo.openSecrets
as
    select cast(decryptbykey(Secret) as varchar(200)) as OpenSecret
    from dbo.Secrets
go

open symmetric key [mykey] 
    DECRYPTION BY PASSWORD = 'SouperSecretz&gt;789'
go

insert into dbo.Secrets (Secret)
values (ENCRYPTBYKEY(KEY_GUID('myKey'), 'asdfasdf'));


select *
from dbo.openSecrets;

close symmetric key [mykey];

select *
from dbo.openSecrets;
</code></pre>

<p>In this demo, I'm creating:</p>

<ul>
<li>a symmetric key</li>
<li>a table that will hold data encrypted by that key</li>
<li>a view on top of that table that does the decryption</li>
</ul>

<p>Of the two selects I do against the view, one of them has the key open and the other doesn't. The former reveals the plaintext while the latter returns <code>null</code>.</p>

<p>So, as long as you have the key open in your session, you should be able to see the plaintext data. And if not, you'll (successfully) get a <code>null</code> for that column.</p>
","67","<mysql><sql><sql-server><view><encryption-symmetric>","0","1","1","2019-04-26 19:59:57","","0","1","9773920","","2019-04-26 18:11:23","2019-04-26 16:17:01",""
"20013597","Query about symmetric key encryption","<p>We are in the process of setting up AS2 over https. https uses asymmetric key encryption and the certs are signed by a common CA.  AS2 uses symmetric key encryption.</p>

<p>For AS2, it is my understanding that:</p>

<ol>
<li>setting up a self-signed key (and exporting the cert or public key) is sufficient.</li>
<li>All I need to do next is pass on the cert to the trading partner</li>
<li>there isn't much advantage in getting the AS2 cert signed by a CA </li>
<li>if I do get the cert signed by a CA (say VeriSign), the advantage will be that I do not need to send the cert to the trading partner (effectively step 2 is not required)</li>
</ol>

<p>Let me know if the above is correct.</p>
","","67","<ssl><encryption><certificate><encryption-symmetric>","0","","0","2014-02-23 13:43:35","","3","","321731","","2014-02-23 13:43:35","2013-11-16 01:40:00",""
"39396113","Java 1.8 symmetric DESede encryption and decryption","<p>I come with an issue related to <code>JCE</code>.</p>

<h2>Context</h2>

<ul>
<li>SDK: JDK 1.8</li>
<li>OS: Ubuntu 14</li>
</ul>

<p>I have been asked to implement a component for decrypt <code>java.lang.String</code>. The encrypted string is part of webservice response which we integrate with.</p>

<p>Webservice provider has provided to us with a <em>binary file</em> to be used to decrypt. </p>

<ul>
<li><strong>ProviderDESedeWebservice.key</strong>. </li>
</ul>

<p>They also informed the alogirthm:</p>

<ul>
<li><strong>DESede/CBC/PKCS5Padding</strong></li>
</ul>

<p>String comes encoded in 64Base. So we have to decode it before to decrypt.</p>

<p>Once decrypted, I should get a xml message</p>

<h2>My class</h2>

<p>Based on this info, I have researched how to implement my component and here is what I have:</p>

<pre><code>package org.mycompany.commons;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.util.Base64;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
//Apache commons IO
import org.apache.commons.io.IOUtils;

/**
 * Componente de soporte para codificar y descodificar mensajes
 * 
 * @author opentrends
 *
 */
public final class EncryptHelper {

    public static final String decrypt(final String encrypted, final String encoding)
            throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException,
            BadPaddingException, IOException, InvalidAlgorithmParameterException, NoSuchProviderException {
        //Mainly UTF-8
        Charset charset =  Charset.forName(encoding);

        //Decoding binary.
        byte[] base64CryptedMessageByteArr = Base64.getDecoder().decode(encrypted);

        //Init of descipher
        Cipher desCipher = Cipher.getInstance(""DESede/CBC/PKCS5Padding"");
        AlgorithmParameterSpec ivSpec = new IvParameterSpec(new byte[8]);
        desCipher.init(Cipher.DECRYPT_MODE, generateSecretKey(charset),ivSpec);

        //Decrypting binary
        byte[] byteDecryptedTextByteArr = desCipher.doFinal(base64CryptedMessageByteArr);
        String clearText = new String(byteDecryptedTextByteArr, encoding);
        return clearText;
    }




private final static Key generateSecretKey(Charset charset) throws IOException{     
            InputStream secretKeyFile = RACEEncrypter.class.getResourceAsStream(""/DESedeRACE.key"");
        InputStreamReader secretKeyReader = new InputStreamReader(secretKeyFile);
        byte[] scretKeyByteArr = IOUtils.toByteArray(secretKeyReader);

        try {
            SecretKeyFactory factory = SecretKeyFactory.getInstance(""DESede"");
            SecretKey key = factory.generateSecret(new DESedeKeySpec(scretKeyByteArr));
            return key;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }           
        }       
    }
</code></pre>

<ul>
<li>Key file (<em>ProviderDESedeWebservice.key</em>) is going to be in the classpath. At the moment I placed it at <em>resources</em> folder.</li>
</ul>

<h2>Issue</h2>

<p>Executing <strong>decrypt()</strong> java throws an error:</p>

<blockquote>
  <p>java.security.InvalidKeyException: Invalid key length: 46 bytes</p>
</blockquote>

<p>Ok I have understood that <strong>DESede</strong> keys can not be longer than 24 bytes.
So I have tried this approach at the time of generating the key</p>

<pre><code>...
try {                               
        SecretKeyFactory factory = SecretKeyFactory.getInstance(""DESede"");  
        SecretKey key = factory.generateSecret(new DESedeKeySpec(scretKeyByteArr));
        return key; 
} catch (Exception e) {
        e.printStackTrace();    
}
return null;
</code></pre>

<p>Now Java throws:</p>

<blockquote>
  <p>javax.crypto.BadPaddingException: Given final block not properly padded</p>
</blockquote>

<p>I kept trying different approachs and my next tried has benn to change the algorithm</p>

<pre><code>Cipher desCipher = Cipher.getInstance(""DESede/CBC/NoPadding"");
</code></pre>

<p>Finally I get a binary that looks like this </p>

<blockquote>
  <p>Decrypted message:�.B
  ���;����[�׮��u85�I���@M���㦬�����E��+S���^</p>
</blockquote>

<p>But I have expected to get an XML.</p>

<h2>Question</h2>

<p>I think the question is obvious.</p>

<ul>
<li>What am I doing wrong?</li>
<li>Do am I loading properly the key file?
-- <em>Answer</em>:<em>Yes. Problem is not here</em></li>
<li>Do am I decoding properly the input string?
-- <em>Answer</em>:<em>Yes. Problem is not here</em></li>
<li>Could secret key file be corrupted? Malformed?
-- <em>Answer</em>:<em>No. But it might not be the one I need</em></li>
</ul>

<h2>EDIT:</h2>

<p>I have tested that web services encrypted responses can not be decrypted with the key we have. Key or algorithm might be modified by reasons why dont know and we were not aware of it</p>
","","67","<java><encryption><encryption-symmetric><jce><secret-key>","1","","0","2016-09-11 19:06:28","","8","2","5934037","","2016-09-11 19:06:28","2016-09-08 16:30:47","2016-09-09 08:16:27"
"57571152","Symmetric encryption in C# from byte-array to byte-array without streams","<p>Is there any way of using a decent symmetric encryption from the .Net (maybe I missed something) to achieve the encryption of a source byte array to a destination byte array (both pre-allocated)? Or I have to look or code a custom AES encryption system?</p>

<p>The reason I need byte array to byte-array is explained below:</p>

<p>I'm working on adding encryption to an existing C# Socket based server. The server uses Socket.Select to handle very large amounts of non-blocking client sockets which send from time to time relatively small chunks of data on very few threads. Also the server is highly optimized speed and memory allocation wise. The server is built around the idea of sending and receiving chunks of data of maximum 16k bytes (usually only a few hundreds are actually exchanged and very rarely 1-2k). All these chunks are re-used to avoid allocations.</p>

<p>I've tried using .Net's SslStream, but I can't find a way to use it without 
many threads or the .Net async/begin-end mechanisms - which seem to choke at about 100+ clients (depending on os and machine power). With the SslStream I was able to use the server's allocated memory chunks, but I can't use the Socket.Select in a safe way because of the streams involved (tcp and ssl).</p>

<p>My next step was to try and implement the SSL socket by hand. I can transmit the server's public key to the clients, there I generate a new symmetric key with RijndaelManaged, which I then encrypt using the server's public key and send it back to the server. Everything works great, but I can't find a way to use the RijndaelManaged encryption without it's ICryptoTransform which has 2 issues: I have to create a lot of ICryptoTransform  with the CreateEncryptor (resulting in memory mess) and also it generates a new byte array after each encryption resulting in more work for the GC.</p>
","<p>The actual crypto operations performed by TLS <em>after the handshake</em> consists of symmetric encryption of the plaintext and validation of an authentication tag. Now this are exactly the operations that you do have to implement anyway to have any decent amount of security.</p>

<p>Of course there are ways to speed up these operations. Basically there are two ways:</p>

<ol>
<li>hardware support for used algorithms, e.g. use a TLS <em>provider</em> that uses AES-NI and other hardware instructions;</li>
<li>algorithms that are fast within software.</li>
</ol>

<p>Besides - of course - optimizing the software implementation itself. Managed languages such as C# or Java (which it of course is largely based on) are not very fast when it comes to implementing the many loops / shifts etc. in a cipher that basically has been created to run fast on a real CPU. Using <code>RijndaelManaged</code> is probably not the best way to go (did you know there is an <code>AES.Create</code> function?).</p>

<hr>

<p>But let's focus on the two listed methods. </p>

<p>TLS providers may already use hardware instructions, but you might make sure that your providers and platform are indeed written to support them.</p>

<p>Another way of making the encryption / decryption be fast is to switch to software algorithms such as Salsa20 / Poly1305, a scheme for authenticated encryption that has been brought to TLS starting with 1.2, backed by Google.</p>

<hr>

<p>The latest version of the TLS protocol - at the time of writing - is TLS 1.3. TLS 1.3 has many methods to make the handshake more performant. Actually, if a previous secret was established it may skip it altogether. That may really help <em>if</em> there are many connections made rather than much data transported. So if you want to have top-notch security you might want to require TLS 1.3 and optimize for that.</p>

<hr>

<p>And if you have done this and failed, then you can always put a TLS end point such as an actual TLS accelerator in front of your machine and simply use that. Java architectures often run on Apache Tomcat or a derived application server with a Apache webserver - configured as a proxy - in front of it. The connectors in between even send out information about the TLS connection when it is made to the application server. There are also separate hardware products that offer this kind of service, and they'll support many more TLS streams then you'll ever need, if you are prepared to spend the $$$ and the time to configure them correctly (key / certificate management).</p>

<hr>

<p>here are certainly protocols that have different target audiences than TLS, which is a rather complicated protocol. You might be better off with a DTLS implementation, or a protocol that was created for embedded devices. But prepare for a steep learning curve and lots of work if you go into that direction.</p>

<p>So all in all, I would not go looking for a fast alternative to TLS, as any alternative basically <em>has to perform the same operations</em>. Speeding up TLS is probably a better option. What you certainly should not do is to create your own protocol and implementing TLS yourself should only be performed if you have enough experience with the subject - there are just too many pitfalls when creating transport protocol implementations.</p>
","66","<c#><aes><encryption-symmetric>","0","0","2","2019-09-20 14:32:00","","2","","","","","2019-08-20 09:59:44",""
"57571152","Symmetric encryption in C# from byte-array to byte-array without streams","<p>Is there any way of using a decent symmetric encryption from the .Net (maybe I missed something) to achieve the encryption of a source byte array to a destination byte array (both pre-allocated)? Or I have to look or code a custom AES encryption system?</p>

<p>The reason I need byte array to byte-array is explained below:</p>

<p>I'm working on adding encryption to an existing C# Socket based server. The server uses Socket.Select to handle very large amounts of non-blocking client sockets which send from time to time relatively small chunks of data on very few threads. Also the server is highly optimized speed and memory allocation wise. The server is built around the idea of sending and receiving chunks of data of maximum 16k bytes (usually only a few hundreds are actually exchanged and very rarely 1-2k). All these chunks are re-used to avoid allocations.</p>

<p>I've tried using .Net's SslStream, but I can't find a way to use it without 
many threads or the .Net async/begin-end mechanisms - which seem to choke at about 100+ clients (depending on os and machine power). With the SslStream I was able to use the server's allocated memory chunks, but I can't use the Socket.Select in a safe way because of the streams involved (tcp and ssl).</p>

<p>My next step was to try and implement the SSL socket by hand. I can transmit the server's public key to the clients, there I generate a new symmetric key with RijndaelManaged, which I then encrypt using the server's public key and send it back to the server. Everything works great, but I can't find a way to use the RijndaelManaged encryption without it's ICryptoTransform which has 2 issues: I have to create a lot of ICryptoTransform  with the CreateEncryptor (resulting in memory mess) and also it generates a new byte array after each encryption resulting in more work for the GC.</p>
","<p>After extensive research I changed the way the server handles requests (basically dropped the SSL/TLS support in .net) and we are trying a TLS termination proxy before the .net server which will handle all the heavy duty tls stuff.</p>
","66","<c#><aes><encryption-symmetric>","0","0","2","2019-09-20 14:32:00","","2","","","","","2019-08-20 09:59:44",""
"45444049","Encryption Algorithm with large key size","<p>I have a 1200 bit key which i would like to use for encrypting data.Is there any encryption algorithm i could use that uses a large key?
The performance of the algorithm does not have to be really good but as long as it uses the entire 1200 bit key,it is good enough.</p>
","<p>Use a key derivation function such as <a href=""https://en.wikipedia.org/wiki/PBKDF2https://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow noreferrer"">PBKDF2</a> to create a symmetric key from the 1200 bit key.</p>

<p>Then use AES to encrypt the data.</p>
","65","<encryption><encryption-symmetric><encryption-asymmetric>","0","0","1","2017-08-01 19:48:01","","12","","","","","2017-08-01 17:16:47",""
"55623630","Question about how to reduce the key used in symmetric cryptography","<p>This question has been struggled me for a week. So, the symmetric cryptography uses n(n-1)/2 keys during the communication. Is there any way to reduce the number of keys? The answer only can limited in symmetric encryption, other encryption like asymmetric is not a possible solution. Anyone can help me?</p>
","","62","<encryption-symmetric><symmetric>","0","","0","2019-04-11 02:00:39","","0","1","","","","2019-04-11 02:00:39",""
"45866976","Trying to understand the concept and best practices (and code?) of keeping credentials secure in an application","<p>There is a ton of material available for encryption in general, and I've been reading through it.  But this question will not be about the actual encryption...it's how to secure the <em>thing I use to do the encrypting</em>.</p>

<p>I feel like the problem I am trying to solve is a simple one:  my application needs to connect to a MySQL database on a website to fetch some information.  That requires credentials to log into the database.</p>

<p>The application needs to have those credentials at the ready, so that means storing them securely, such as in <code>app.config</code>.  I can <a href=""https://stackoverflow.com/a/10366194/1633308"">encrypt those items</a> and then store them easily enough.  I even took a stab at doing that, using <code>aspnet_regiis -pef</code> to <a href=""https://stackoverflow.com/questions/5803188/encrypting-connectionstrings-section-utility-for-app-config"">encrypt the section of the app.config</a> where those were stored, but that seems to be a non-portable solution (e.g. worked on my dev PC, failed to decrypt on another computer).  So if I am wrong about that, then let that be my question:  how might that have failed me?</p>

<p>Otherwise, my question is this:  how am I supposed to secure the key with which I encrypted the credentials?  Is there an established best practice for making the key available to the application, while still protecting it in some way?</p>
","<p>""You cant hide secrets""</p>

<p>Realistically you cannot secure anything you distribute. Your connection string is distributed in your app.config to potentially millions of customers, or at least can be copied millions of times. Your encryption algorithm may be very complex, but you must at least contain the decryption code in your .net application; which can be readily decompiled. All the hacker has to do is work out how/where your store your key. If they user doesn't supply it as part of the login process then you can't really secure the connection.</p>

<p>In the web application world we keep the connection string in web.config encrypted using the application pool service account credentials; only the app pool service account can read it. The user of the web site never gets access to the web.config, and if they did, the firewall between the DMZ and the database server would prevent them from attempting a connection. You lack any of these safeguards in a client-server application. </p>

<p>Ideally you would provide your end user with a SQL Server login based on their windows account credentials, or a username/password; you secure their SQL account rather than the ability to attempt to connect. This is reasonably secure in an intranet scenario, as SQL Server can delegate authentication lockout etc to the Windows Server allowing you to do three-strikes based login policies; but you cannot secure the attempt to connect - only the success of the connection attempt.</p>
","61","<c#><wpf><encryption-symmetric>","0","1","2","2017-08-24 18:02:02","","8","","","","","2017-08-24 16:42:55",""
"45866976","Trying to understand the concept and best practices (and code?) of keeping credentials secure in an application","<p>There is a ton of material available for encryption in general, and I've been reading through it.  But this question will not be about the actual encryption...it's how to secure the <em>thing I use to do the encrypting</em>.</p>

<p>I feel like the problem I am trying to solve is a simple one:  my application needs to connect to a MySQL database on a website to fetch some information.  That requires credentials to log into the database.</p>

<p>The application needs to have those credentials at the ready, so that means storing them securely, such as in <code>app.config</code>.  I can <a href=""https://stackoverflow.com/a/10366194/1633308"">encrypt those items</a> and then store them easily enough.  I even took a stab at doing that, using <code>aspnet_regiis -pef</code> to <a href=""https://stackoverflow.com/questions/5803188/encrypting-connectionstrings-section-utility-for-app-config"">encrypt the section of the app.config</a> where those were stored, but that seems to be a non-portable solution (e.g. worked on my dev PC, failed to decrypt on another computer).  So if I am wrong about that, then let that be my question:  how might that have failed me?</p>

<p>Otherwise, my question is this:  how am I supposed to secure the key with which I encrypted the credentials?  Is there an established best practice for making the key available to the application, while still protecting it in some way?</p>
","<p>To be honest, you're not going to have a failsafe way of doing what you want - anyone you're distributing the app to can decompile and examine what you've sent them.  Literally any security scheme you can think up, the attacker can simply read the code for.</p>

<p>Instead, I think you should put some minor security on that end (block the casual/curious people with some straight-forward hard-coded-key encryption, knowing that you're not going to stop a determined attacker) - and instead focus on locking down the SQL end as much as possible.  Those account credentials you're giving out through your app?  Give it the bare minimum of Stored Procedures it needs to do its job, and then lock it out of all the other tables/views/etc.  Connect in to the SQL database as your app's account user, and try to see if you can perform anything malicious - screwing with table data, dropping objects, etc - and then take steps to mitigate/remove those vulnerabilities.</p>

<p>If that's not sufficient, your next best bet is to program a middle layer.  Make a web service, and have <em>it</em> be the one to connect in to SQL.  The WPF App doesn't hook into SQL at all, and has to go through the web service to get/change/etc the data.  But it's important to realize that an attacker can <em>still</em> screw around with your data - they can directly call your web service instead of going through the WPF app.  The only thing you gain is that the attacker doesn't have a SQL login.</p>
","61","<c#><wpf><encryption-symmetric>","0","0","2","2017-08-24 18:02:02","","8","","","","","2017-08-24 16:42:55",""
"38543961","""unknown: this object doesn't support multiple channels"" during encryption","<p>I am getting <em>""unknown: this object doesn't support multiple channels""</em> exception during file encryption. I am able to generate session key but it can not be used to encrypt file.</p>

<p>The following is my code snippet for file encryption:</p>

<pre class=""lang-cpp prettyprint-override""><code>void enc_file_EAX(PAES_KEY_WITH_IV key, const char *in_file, const char *out_file)
{

    try {
        CryptoPP::EAX&lt;CryptoPP::AES&gt;::Encryption encryptor;
        encryptor.SetKeyWithIV(key-&gt;key, key-&gt;key.size(), key-&gt;iv);
        CryptoPP::FileSource f(in_file, true,
                     new CryptoPP::AuthenticatedEncryptionFilter(encryptor,
                        new CryptoPP::FileSink(
                             std::string(in_file).c_str()),
                             CryptoPP::AuthenticatedDecryptionFilter::THROW_EXCEPTION |
                             CryptoPP::AuthenticatedDecryptionFilter::MAC_AT_END ));
        std::fstream file(out_file, std::ios::binary | std::ios::ate);
        size_t remaining = file.tellg();
        file.close();
        size_t BLOCK_SIZE = 16384;
        while (remaining &amp;&amp; !f.SourceExhausted()) {
            const unsigned int req = std::min(remaining, BLOCK_SIZE);
            f.Pump(req);
            f.Flush(false);
            remaining -= req;
        }

    } catch (const CryptoPP::Exception&amp; e) {
        std::cout &lt;&lt; e.GetWhat() &lt;&lt; std::endl;
        return;
    }
}
</code></pre>

<p>Can someone help me on this ? What is going wrong here ?</p>

<p>Thanks in advance.</p>
","<pre><code>EAX&lt;AES&gt;::Encryption encryptor;
encryptor.SetKeyWithIV(key-&gt;key, key-&gt;key.size(), key-&gt;iv);
FileSource f(in_file, true,
        new AuthenticatedEncryptionFilter(encryptor,
            new FileSink(
                std::string(in_file).c_str()),
            AuthenticatedDecryptionFilter::THROW_EXCEPTION |
            AuthenticatedDecryptionFilter::MAC_AT_END ));
</code></pre>

<p>You are mixing and matching encryption and decryption gear in the same object pipeline. You should probably fix that first.</p>

<p>Looking at <a href=""http://www.cryptopp.com/wiki/AuthenticatedEncryptionFilter"" rel=""nofollow"">AuthenticatedEncryptionFilter</a>, the <code>THROW_EXCEPTION | MAC_AT_END</code> flags  are probably being coerced into the <code>putAAD</code> flag:</p>

<pre><code>AuthenticatedEncryptionFilter(AuthenticatedSymmetricCipher &amp;c,
    BufferedTransformation *attachment = NULL, bool putAAD=false,
    int truncatedDigestSize=-1, const std::string &amp;macChannel=DEFAULT_CHANNEL,
    BlockPaddingScheme padding=DEFAULT_PADDING);
</code></pre>

<p>I seem to recall you need to avoid the <a href=""http://cryptopp.com/wiki/Pipelining"" rel=""nofollow"">Pipelines</a> if you want to add AAD. The pipe only allows inputting data on <code>DEFAULT_CHANNEL</code>, which provides AE (but no AAD). Also see <a href=""https://cryptopp.com/wiki/Eax_mode#AEAD"" rel=""nofollow"">EAX Mode | AEAD example</a> on the Crypto++ wiki.</p>

<hr>

<p>Your use of <code>FileSink</code> and <code>FileSource</code> does not quite look right. I'm not sure how this is going to behave:</p>

<pre><code>FileSource f(in_file, true, ...
    new FileSink(std::string(in_file).c_str()), ...);
</code></pre>

<p>You should probably use <code>in_file.c_str()</code> for the file name:</p>

<pre><code>FileSource f(in_file.c_str(), ...);
</code></pre>

<p>You should also probably use a different file for the sink:</p>

<pre><code>FileSource f(out_file.c_str(), ...);
</code></pre>

<hr>

<p><strong><em>EDIT</em></strong> (from the comments):</p>

<blockquote>
  <p>No , we don't want to add pipeline, we just want to use DEFAULT_CHANNEL for inputting data. And given example is for text input. I want to use same function for file inputting. Can you elaborate more on this?</p>
</blockquote>

<p>In this case, try:</p>

<pre><code>EAX&lt;AES&gt;::Encryption encryptor;
encryptor.SetKeyWithIV(key-&gt;key, key-&gt;key.size(), key-&gt;iv);
FileSource f(in_file.c_str(), true,
        new AuthenticatedEncryptionFilter(encryptor,
            new FileSink(out_file.c_str()));
</code></pre>

<p>That should input text for confidentiality and integrity (AE). It will avoid text with confidentiality only (AEAD).</p>

<p>Also see <a href=""http://www.cryptopp.com/wiki/EAX_Mode"" rel=""nofollow"">EAX Mode</a> on the Crypto++ wiki. It has three or four examples with both AE and AEAD.</p>
","59","<encryption><pipeline><encryption-symmetric><crypto++>","1","0","1","2016-07-27 17:31:29","38593750","0","","608639","","2016-07-26 15:18:02","2016-07-23 16:28:54",""
"35520427","How to implement symmetric key encryption in android to store credentials supporting platform 4.0 onwards?","<p>I am working on financial application and I need to save sensitive data in device itself so that user is not prompted to enter certain input. Is there any mechanism by which I can do symmetric encryption in android? Major problem I faced is the security of secret-key used for encryption and decryption.  Also this solution should support android platform 4.0 and onwards. I tried facebook conceal but it is recommended for encryption of large files also my app size was affected by considerable amount as this library uses native plus java code. Please help me to solve this issue.</p>
","","57","<android><security><encryption-symmetric>","1","","0","2016-02-20 07:30:22","","0","","","","","2016-02-20 07:30:22",""
"57255875","Encryption technique in Java to preserve the format of the input text","<p>I want to encrypt data in specific columns in my database table. But, with standard Encryption with a secret key using AES/GCM, the cipher text after encrypting is much longer in length than the original text. </p>

<p>Since, each database column has a specific length, I do not want the encrypted text to be longer than the original text. I have looked all through the web for a FormatPreservingEncryption sample in Java but have not found. Seems, this technique is not used much.  </p>

<p>I have already tried the code from <a href=""https://github.com/idealista/format-preserving-encryption-java"" rel=""nofollow noreferrer"">https://github.com/idealista/format-preserving-encryption-java</a></p>

<p>It is not running correctly for large text. For example, it fails for text which are more than 228 characters in length.</p>

<p>Can anybody please help in either providing a source code implementation of such a technique in java or pointing out some alternate technique to achieve what i want. I use the standard Cipher class in Java to do the encoding right now. </p>

<p>Any help much appreciated. Thanks </p>
","<p>In the link below there is an example of how to encrypt text of the same length as the input text using CipherStream.
<a href=""http://www.java2s.com/Code/Java/Security/BasicIOexamplewithCTRusingAES.htm"" rel=""nofollow noreferrer"">http://www.java2s.com/Code/Java/Security/BasicIOexamplewithCTRusingAES.htm</a></p>

<p>May be it will help somebody</p>
","55","<java><encryption><encryption-symmetric>","0","0","1","2019-08-02 07:11:11","","2","","","","","2019-07-29 14:26:00",""
"52758682","Php Encryption Result","<p>I unforesee the result.</p>

<p>This is my encryption method:</p>

<pre><code>const METHOD = ""AES-256-ECB"";
public $key;

public function encrypt($string,$key){
        return strtr(base64_encode(openssl_encrypt($string, $this::METHOD, hash('sha256', $key, true))), '+/=', '-_,');
}
</code></pre>

<p>This code generates the $key for encryption.</p>

<pre><code>$string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        $max = strlen($string) - 1;
        $token = '';
        for ($i = 0; $i &lt; 32; $i++) {
            $token .= $string[mt_rand(0, $max)];
        }
        $key = $token;
</code></pre>

<p>My question is:
<strong>? &amp;</strong> these signs can the result in?</p>

<p>because I am using the $_GET parameters in.</p>
","<p>No, any output of base64 encode are chars from 0 to 63 only + and / are the non letters or numbers</p>

<p>take a look in <a href=""https://en.wikipedia.org/wiki/Base64#Base64_table"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Base64#Base64_table</a></p>
","55","<php><encryption><encryption-symmetric>","0","1","1","2018-10-12 01:43:47","","7","","9187350","","2018-10-12 01:43:47","2018-10-11 11:14:29",""
"57463010","How to decrypt in PHP without knowing a key?","<p>I encrypted a text using a key and would like to understand this method if it is vulnerable or not.</p>

<p>Could you tell me if it's easy to decrypt, what methods exist and if maybe I should change the encryption method?</p>

<pre><code>$text = ""Hello this is my word"";
$method = ""aes-256-ecb"";
$ivlen = openssl_cipher_iv_length($method);
$iv = openssl_random_pseudo_bytes($ivlen);
$secretKey= ""abcdefghilmnop10032001"";

$encrypted = openssl_encrypt($text, $method, $secretKey, $options=0, $iv);
$decrypted = openssl_decrypt($encrypted, $method, $secretKey, $options=0, $iv);

print_r($encrypted);
print_r('&lt;br&gt;');    
print_r($decrypted);
</code></pre>

<p><strong>The encrypted text is</strong>:</p>

<pre><code>Ad4jgTNQlNiSBXGidMoAPZeJkUAxQrYPYKHwc9/80Z0=
</code></pre>

<p>Besides with <code>openssl_encrypt</code> is possible to have a <strong>salt</strong> and so ever a different encrypted text (also if text doesn't change)?</p>
","<p>You can add salt to the key.</p>

<pre><code>$text = ""Hello this is my word"";
$method = ""aes-256-ecb"";
$ivlen = openssl_cipher_iv_length($method);
$iv = openssl_random_pseudo_bytes($ivlen);
$secretKey= ""abcdefghilmnop10032001"";
$salt_length = 10;
$salt = make_salt($salt_length); // You need to define this function

$encrypted = $salt . openssl_encrypt($text, $method, $salt . $secretKey, $options=0, $iv);
$salt = substr($encrypted, 0, $salt_length);
$decrypted = openssl_decrypt(substr($encrypted, $salt_length), $method, $salt . $secretKey, $options=0, $iv);

print_r($encrypted);
print_r('&lt;br&gt;');    
print_r($decrypted);
</code></pre>

<p>Notice that you have to save the salt along with the encrypted string, so that you can get it back for decrypting.</p>
","55","<php><encryption><openssl><public-key-encryption><encryption-symmetric>","0","1","1","2019-08-12 15:24:46","","17","","3001761","","2019-08-12 14:25:23","2019-08-12 14:23:08",""
"45912144","Connecting to an encrypted database after changing encryption key in OrientDB","<p>I am new to OrientDB and working on database encryption. 
Can anyone please guide me about followings:
How to encrypt database in OrientDB? and more importantly, can we execute quires on the encrypted database?</p>

<p>I tried to enable AES encryption but didn't see any encryption outcome. At the end, it allows database connection, where contents are unencrypted even with an incorrect encryption key.</p>

<p>According to the documentation, I performed following steps to enable database encryption:</p>

<pre><code>------- create database with key1 ------
config set storage.encryptionKey Ohjojiegahv3tachah9eib==
create database remote:localhost/databases/encrypted-db root 12345 plocal 
document -encryption=aes

CREATE CLASS Customer 
CREATE PROPERTY Customer.id integer 
CREATE PROPERTY Customer.name String 
CREATE PROPERTY Customer.age integer

INSERT INTO Customer (id, name, age) VALUES (01,'satish', 25) 
INSERT INTO Customer SET id = 02, name = 'krishna', age = 26 
INSERT INTO Customer CONTENT {""id"": ""03"", ""name"": ""kiran"", ""age"": ""29""}
INSERT INTO Customer (id, name, age) VALUES (04,'javeed', 21), (05,'raja', 29) 

SELECT FROM Customer

disconnect

------- open encrypted database with key2 (different from key1) ------
config set storage.encryptionKey Ohj11iegahv3tac1111111==
CONNECT remote:localhost/databases/encrypted-db root 12345
SELECT FROM Customer
</code></pre>

<p>OrientDB will show original data of Customer CLASS.</p>
","<p>Encryption at rest is not supported on remote protocol yet. It can be used only with plocal. So you're using a non-encrypted database. The documentation wasn't very clear about that, sorry. I'm fixing the docs right now.</p>
","54","<orientdb><encryption-symmetric><database-security>","1","0","1","2017-08-28 07:18:07","","0","","","","","2017-08-28 05:17:56",""
"56911743","How Do I manage Android Keystore KMS for symmetric encryption and decryption?","<p>I want to encrypt and decrypt with symmetrically with android Keystore KMS. I'm aware with Google cloud KMS, and AWS KMS, but I don't want to handle with that platform.</p>

<p>How to manage this generated Android Keystore private key for both (client, server) sides?</p>

<p>I have created a private key for encrypting and decrypting, but hard to manage for the store and share this key. 
I had stored that private key in Private SharedPreferences for reuse but There is one problem is that, this private SharedPreferences is not secured because all can observe this private SharedPreferences file in the rooted device.</p>

<p>Refer this <a href=""https://github.com/google/tink/blob/master/docs/KEY-MANAGEMENT.md"" rel=""nofollow noreferrer"">link</a> to get information about generating a private key for Android Keystore.</p>

<p>I'm new with tink, so please help me to out this. if there is a wrong thing in my idea then feel free to give your opinion.</p>
","<p>Android Keystore is a client side KMS, you cannot use it on server side.</p>

<p>If you want to use Tink with Android Keystore on Android, please take a look at <a href=""https://google.github.io/tink/javadoc/tink-android/1.2.2/com/google/crypto/tink/integration/android/AndroidKeysetManager.html"" rel=""nofollow noreferrer"">AndroidKeysetManager</a>. Here's an example:</p>

<pre class=""lang-java prettyprint-override""><code> String masterKeyUri = ""android-keystore://my_master_key_id"";
 AndroidKeysetManager manager = AndroidKeysetManager.Builder()
    .withSharedPref(getApplicationContext(), ""my_keyset_name"", ""my_pref_file_name"")
    .withKeyTemplate(SignatureKeyTemplates.ECDSA_P256)
    .withMasterKeyUri(masterKeyUri)
    .build();
 PublicKeySign signer = PublicKeySignFactory.getPrimitive(manager.getKeysetHandle());
</code></pre>

<p>This will read a keyset stored in the <code>my_keyset_name</code> preference of the <code>my_pref_file_name</code> preferences file. If the preference file name is null, it uses the default preferences file.</p>

<p>If the keyset is not found or invalid, and a valid KeyTemplate is set with <code>AndroidKeysetManager.Builder.withKeyTemplate(com.google.crypto.tink.proto.KeyTemplate)</code>, a fresh keyset is generated and is written to the <code>my_keyset_name</code> preference of the <code>my_pref_file_name</code> shared preferences file.</p>

<p>On Android M or newer and if a master key URI is set with <code>AndroidKeysetManager.Builder.withMasterKeyUri(java.lang.String)</code>, the keyset is encrypted with a master key generated and stored in Android Keystore. When Tink cannot decrypt the keyset it would assume that it is not encrypted.</p>

<p>The master key URI must start with <code>android-keystore://</code>. If the master key doesn't exist, a fresh one is generated. Usage of Android Keystore can be disabled with <code>AndroidKeysetManager.Builder.doNotUseKeystore()</code>.</p>

<p>On Android L or older, or when the master key URI is not set, the keyset will be stored in cleartext in private preferences which, thanks to the security of the Android framework, no other apps can read or write.</p>
","50","<android><encryption-symmetric><tink>","2","1","1","2019-09-18 21:04:52","","0","2","","","","2019-07-06 06:20:01",""
"37238539","How to use local alphabetical order number instead of ascii","<p>How can I use alphabetical order during encryption instead of ascii table numbers? For example, if I want to use one time pad encryption (text+key)modulo26, it seems to be taking ASCII number.
I tried the following in C language:</p>

<pre><code>encrypted[i] = (text[i]+key[i])%26 
</code></pre>

<p>But the cmd is showing me many question marks instead of a cipher text.
Here is my complete code:</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;stdlib.h&gt;
#include&lt;string.h&gt;
#define clear_buffer while(getchar()!='\n');

char* encrypt(char texte[],char cle[]){
    char *encrypted;
    int i=0;
    texte=texte-'a';
    cle=cle-'a';
    while(texte[i]!='\0' &amp;&amp; cle[i]!='\0'){
        encrypted[i]='a'+(texte[i]+cle[i])%26;
        i++;
    }
    encrypted[i+1]='\0';
    return encrypted;   

    }
char* decrypt(char encrypted[],char cle[]){
    char *decrypted;
    int i=0;

    while(encrypted[i]!='\0' &amp;&amp; cle[i]!='\0'){
        decrypted[i]=(encrypted[i]-cle[i])%26;
        i++;
    }
    decrypted[i+1]=0;
    return decrypted;

}
int main()
{
    char reponse,texte[100],cle[100],encrypted[100];
    int i=0;

    do{
        printf(""Voulez vous crypter ou decrypter un texte?(Ecrire C pour crypter et D pour decrypter)\n"");
        scanf(""%c"",&amp;reponse);
    }while (reponse!='C'&amp;&amp; reponse!='D'&amp;&amp; reponse!='c'&amp;&amp; reponse!='d');//controle pour obliger l'utilisateur à donner c ou d
    if(reponse=='C'||reponse=='c'){
            clear_buffer;//vider le buffer apres le scanf de la reponse
        printf(""Donner un texte a crypter\n"");
        fgets(texte,100,stdin);
        while(texte[i]!=0)
            i++;
        if (i&gt;0 &amp;&amp; texte[i-1]!='\n')
            clear_buffer;
        printf(""Donner une cle de meme taille\n"");
        fgets(cle,100,stdin);
        i=0;
        while(cle[i]!=0)
            i++;
        if (i&gt;0 &amp;&amp; cle[i-1]!='\n')
            clear_buffer;
        printf(""Le texte crypte est:%s\n"",encrypt(texte,cle));

    }else{
            clear_buffer;//vider le buffer apres le scanf de la reponse
            //do{
        printf(""Donner un texte (deja crypte) à decrypter\n"");
        fgets(encrypted,100,stdin); 
        i=0;
        while(encrypted[i]!=0)
            i++;
        if (i&gt;0 &amp;&amp; encrypted[i-1]!='\n')
            clear_buffer;
        printf(""Donner la cle (deja utilisee pour crypter\n"");
        fgets(cle,100,stdin);
        i=0;
        while(cle[i]!=0)
            i++;
        if (i&gt;0 &amp;&amp; cle[i-1]!='\n')
            clear_buffer;
    //  }while(sizeof encrypted!=sizeof cle);
        printf(""Le texte decrypte est:%s\n"",decrypt(encrypted,cle));
    }
    system(""pause"");
    return 0;
}
</code></pre>
","<p>Assuming that you are working only with lower case, you can subtract the ascii offset and convert the text and key to a value between 0-25 and then do the encryption process and add the offset at the end.</p>

<pre><code>text = text - 'a';
key = key - 'a';
char encrypt = 'a' + ( text + key ) % 26
</code></pre>

<p>And also in your code you havent allocated memory for the 2 char pointers.</p>

<pre><code>char *encrypted = (char*)malloc(100);

char *decrypted = (char*)malloc(100);
</code></pre>
","50","<c><ascii><encryption-symmetric><alphabetical-sort>","2","2","1","2016-05-15 14:39:11","","10","","24198","","2016-05-15 14:39:11","2016-05-15 12:53:27",""
"57171328","Is it possible to search MySQL for data encrypted by CakePHP?","<p>I am building an application that includes PII (e.g. telephone number) encrypted using CakePHP's Security Utility. I've patterned my code after the custom database <a href=""https://stackoverflow.com/a/32261210/5593769"">recommended</a> by @ndm -- so AES-256 encryption is taking place at the application level and then gettingpassed to a MySQL database. This is working great but I'm not sure how to implement search.</p>

<p>I understand that I cannot do fragment comparison (eg <code>LIKE %%</code>), but expect that it is possible to search for an exact match. However because <code>Security::encrypt</code> returns a different string each time it's used, the following will not work:</p>

<pre><code>$query = $this-&gt;Users-&gt;find('all')
    -&gt;where([
        'telephone' =&gt; Security::encrypt($search, Security::getSalt())
    ]);
</code></pre>

<p>I searched for similar questions and <a href=""https://stackoverflow.com/questions/23823051/how-to-select-256-bit-salted-encrypted-values-from-mysql"">found one</a> in which the accepted answer was to create additional columns containing string hashes for each encrypted column (elsewhere this is called a <a href=""https://paragonie.com/blog/2017/05/building-searchable-encrypted-databases-with-php-and-sql"" rel=""nofollow noreferrer"">blind index</a>). I would prefer not to modify my database but can do so if this is the only solution.</p>

<p>Any advice appreciated!</p>
","","47","<php><mysql><cakephp><cakephp-3.x><encryption-symmetric>","1","","0","2019-07-23 19:56:52","","1","","","","","2019-07-23 19:56:52",""
"19577746","Encryption (Symmetric key) lib","<p>I have been reading a little bit about Encryption.</p>

<p>I'm currently in a project where I'll need to Encrypt/Decrypt data based on a key (user password), but the problem is:
 - I'll need to encrypt/decrypt in several client applications built with different languages. Example:
   - PHP
   - C++
   - Java
etc.</p>

<p>What should I do? is there any good (and free) lib that was written to different languages?</p>

<p>thank you</p>
","<p>you don't need to have one-and-the-same-lib for different platforms...</p>

<p>as long as the choosen ciphers &amp; keys &amp; modes of operation are the same, it shouldn't really matter.</p>

<p>for example i've had no problems with AES encrypting in c# using the crypto service provider which ships with the .net framework and decrypting using the openssl module for php ...</p>

<p>there sometimes are some hurdles, like byteorder, encoding, etc. but if you take a closer look there's no black magic ... </p>
","46","<encryption><encryption-symmetric><symmetric-key>","0","0","1","2013-10-25 02:34:55","","0","","","","","2013-10-24 22:16:42",""
"15200874","Separate data encryption","<p>I store some sensitive data. Data is divded into parts and I want to have separate accees to each part. Let's assume that I have 1000 files. I want to encrypt each file by the same symetric encryption algorithm. 
I guess that breaking a key is easier when hacker has got 1000 cryptogram than he has only one cryptogram, so I think that I should use separate key for each file. 
My question is following:</p>

<p><strong>Should I use separate key for each file?</strong></p>

<p>If I should, there is problem with storing 1000 keys. So I want to have one secret key and use some my own algorithm to calculate separate key for each file from secret key. Is it good idea?</p>
","<p>If you consider passive adversary and use CPA-strong cipher (like AES), it is sufficient to use only one key for all files. Supposing adversary knows the cipher you use, and even knows plaintexts, he cannot reconstruct the key with non-negligible probability. <a href=""https://math.stackexchange.com/questions/51960/is-it-possible-to-guess-an-aes-key-from-a-series-of-messages-encrypted-with-that"">Here</a> is more detailed answer.</p>

<p>If you consider also active adversary (which can replace ciphertexts) you should use Authenticated Encryption. But as I understand this is not your case.</p>

<blockquote>
  <p>So I want to have one secret key and use some my own algorithm to calculate separate key for each file from secret key. Is it good idea?</p>
</blockquote>

<p>In general, developing your own algorithm or scheme is bad idea. You can easily make some unseen mistake in algorithm or implementation and you data will be vulnerable. It is better to use well-known algorithms and implementations peer-reviewed by lots of people and proved to be secure.</p>
","45","<encryption-symmetric>","2","3","1","2013-03-04 15:04:57","15204595","0","","","","","2013-03-04 11:50:11",""
"54689714","phpseclib TripleDES ECB issue","<p>I'm currently using phpseclib to encrypt data with tripleDES ECB. After using a third party online encryption tool I realized my encryption result differs from the  online tool's encryption result.</p>

<p>My code is attached as follows.</p>

<pre><code> $des = new \phpseclib\Crypt\TripleDES('MODE_ECB');

 $des-&gt;setKey('cba4d056-1fab-4ce6-b61f-42e92e0dd563');
 $plaintext = 'abcabcabc';

 echo base64_encode($des-&gt;encrypt($plaintext));
</code></pre>

<p>The online encryption tool results are as follows.<a href=""https://i.stack.imgur.com/Ao2ql.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/Ao2ql.png"" alt=""Results from online encrpytion tool.""></a></p>

<p>What am I doing wrong with the library function that gives me a encrypted message different from the online tool shown?</p>
","<p>Your constructor is wrong. Do this instead:</p>

<pre><code>$des = new \phpseclib\Crypt\TripleDES(\phpseclib\Crypt\TripleDES::MODE_ECB);
</code></pre>
","45","<php><phpseclib><encryption-symmetric>","0","0","1","2019-02-14 18:29:14","","0","","","","","2019-02-14 11:48:40",""
"21456616","Possible ways to attach IV to the encrypted string","<p>What are the possible ways to attach the iv to the encrypted string. Prepending iv as the first sixteen is the most common approach. Are there any other ways can we able to do it?</p>
","<p>You can attach it however you like (at the beginning, or end, or middle if you really feel like it), or send it separately, via smoke signals if you like! As long as your decryption code knows where to find it.  At the beginning is certainly the logical place for it though (especially if you want to start decrypting before you've got the entire ciphertext).  But from a security point of view, there isn't a reason not to put it elsewhere if you have that need for some reason.</p>

<p>Just remember that you should assume any eavesdropper knows where you've put the IV.  You shouldn't consider that to be a secret.</p>
","45","<encryption><aes><encryption-symmetric>","1","4","1","2014-01-30 16:13:23","21461658","0","","","","","2014-01-30 12:30:34",""
"58387308","How to Properly Encrypt JSON String in NodeJS","<p>This data is the hex string of encrypted json string. This is encrypted by symmetric key.</p>

<pre><code>Key: PojmoHD0HNuE/Q+3sKD/ARj86XRYitueWmpjyCuoHuSX71xXlU0hN72wXdrWdt7w//N1BF6GQMLKZIkKXpQ8v18vP1kFG/vO3TpKZRTPhGUyFxE8y1CRIPUJesnbM+Cy3xPegQ3H2wn00YP5f2Dw0uDUHke2MEkCXHYyAgxGqo8=

Encrypted Hex: 2D31727668A7008B59552C7186C28D51C3E5A5A1DC90AF46577705A564D3CF1A3866BB4A79E5029EBFC8871CA769DC5EBD5599C040070B27464F158D3DEE50DD9BBF5E7B8CB31C0FEF453DB04A1B313A3918A9164C355A376A7866821277E47273CEC268FBD3ED2625E0518C6ED8C8F890C0A5642D7C7BD8B9C017D5E3E94B3EE58E14C79762BF21881A90636F3024186B27ED216C1FF6B9DF6887005546873A33683025616BDF1F283FB59DB686DC815D56047C50FB9B53735011E60057703F468E11C7D5975AC5B39D8FAA6865C67095A58C1F1CB048670E0AB6F9B818434BDF6B085F58906101FA885D0B8799C6F1600AAE98DE2651A731D519466D516C1B
</code></pre>

<p>I have to encrypt/decrypt JSON String in the following manner with the key. I tried different algorithms but none of them are working.
I tried the following code.</p>

<pre><code>const crypto = require('crypto');
const algorithm = 'aes-256-cbc'

const encryptData = (data, key) =&gt; {

    var mykey = crypto.createCipher(algorithm, key);

    var mystr = mykey.update(data, 'utf8', 'hex')
    mystr += mykey.final('hex');
    console.log(mystr);
    return mystr;
}

const decryptData = (encrypted, key) =&gt; {

    var mykey = crypto.createDecipher(algorithm, key);
    var mystr = mykey.update(encrypted, 'hex', 'utf8')
    mystr += mykey.final('utf8');

    console.log(mystr);
    return mystr;
}
</code></pre>
","","45","<node.js><encryption><encryption-symmetric>","0","","0","2019-10-17 12:17:19","","5","","","","","2019-10-15 04:33:48",""
"18693477","How can i encrypt my already created columns in sql sever 2008?","<p>I have simply created my table</p>

<pre><code>create table LoginInfo 
(
UserName Varchar(100)constraint user_primary Primary key,
Password Varchar(100),  
Rolleame Varchar(100),  
EmailID Varchar(100)constraint email_unique Unique,
SecurityQuestion Varchar(1000),
SecurityAnswer Varchar(100),
LastLogin datetime
)
</code></pre>

<p>i want to encrypt it by rsa algorithm. Please tell me how can i encrypt UserName, Password, and security answer.</p>
","","43","<asp.net><sql-server-2008><passwords><password-protection><encryption-symmetric>","1","","0","2013-09-09 07:35:24","","2","","","","","2013-09-09 07:35:24",""
"49166667","crypt library and block size","<p>I am using a <strong>128-bit AES</strong> symmetric-key encryption function that was given to me. I keep getting this seg fault while decrypting:</p>

<blockquote>
  <p>:error:0606506D:lib(6):func(101):reason(109):evp_enc.c:518:</p>
</blockquote>

<p>At first when testing encrypting/decrypting together, I would get this error because my buffer to store the encryption and decryption wasn't large enough. Please help me troubleshoot: </p>

<ol>
<li><p>When storing the key (using fgets), for some reason the char array to store it required size 34 instead of 33 (i dont think this is the problem but who knows)</p></li>
<li><p>the formatting i'm using to decrypt is wrong (I am pretty sure it requires raw binary, ive tried hex as well)</p></li>
<li><p>something else is messing with the block size.</p></li>
</ol>

<p>What else could this be from? </p>
","<p>128-bit aes symmetric-key length must have to be 16 byte.</p>

<p>also 256-bit aes symmetric-key length must have to be 32 byte.</p>
","42","<c><encryption><encryption-symmetric>","-1","0","1","2018-03-20 08:15:00","","1","","4229270","","2018-03-08 06:26:27","2018-03-08 06:23:08",""
"52022698","Windows UWP AesCbcPkcs7 encrypt/decrypt block at a time","<p>I have an application that I want to release to the Windows App store. So there is  limited set of APIs that can be used.</p>

<p>It needs to encrypt/decrypt very large amounts of data.
I can find examples on how to load ALL the data into an IBuffer and encrypt/decrypt it. 
I would like to do this on say 8KB chunks at a time. 
I can't figure out how to do that ... 
I start with the IV and the first 8KB chunk of data ...
Do I use the last 16B of the last chunk as the next chunk's IV ?</p>
","<p>If you are able to limit yourself to RS3 and above (Fall Creator's Update / 1709) then you can just use .NET cryptography APIs such as <a href=""https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.cryptostream?redirectedfrom=MSDN&amp;view=netstandard-2.0"" rel=""nofollow noreferrer"">CryptoStream</a> and the related managed crypto APIs. </p>

<p>The WinRT APIs work on all versions of Windows 10 but they're harder to use than the .NET equivalents. You can probably also find more examples of .NET code to learn from. </p>
","41","<c#><uwp><encryption-symmetric>","1","0","1","2018-08-27 01:26:03","","3","","","","","2018-08-26 02:20:36",""
"45734995","Using a JWT for more than authentication","<p>Should JWTs be used for more than just authenticating a user? I read that it's okay to store non sensitive stuff like a user ID in it. Would it be okay to store stuff like permission levels in the token? This way I get to avoid doing a database call.</p>
","<p>JWT tokens can be used for authentication purposes, but nothing stops you from <a href=""https://tools.ietf.org/html/rfc7519#section-4.3"" rel=""nofollow noreferrer"">creating your own claims to store additional data</a>, such as the user roles or a scope of access.</p>

<p>Some authentication providers add a scope of access to their tokens. Have a look at this <a href=""https://stackoverflow.com/a/20010178/1426227"">answer</a>.</p>
","41","<jwt><encryption-symmetric>","0","1","1","2017-08-17 12:41:36","","3","","","","","2017-08-17 12:21:19",""
"26613683","Should I be using asymmetric key?","<p>I want to keep sensitive information online on github but I am struggling with how to implement this. </p>

<p>Currently I have symmetric encryption with a very long key ( 4K characters ). but someone told me it is not safe enough and that I should be using travis' mechanism of asymmetric encryption. </p>

<p>Can someone please explain </p>

<ul>
<li>Is it really less safe than travis' method? The way I see it both methods use a secret string to decrypt. </li>
<li>I am currently using openssl for this procedure - is this the right tool for this task?</li>
</ul>

<p><em>Adding more info to answer comments</em></p>

<p><strong><em>travis' mechanism</em></strong> - described here: <a href=""http://docs.travis-ci.com/user/encryption-keys/"" rel=""nofollow"">http://docs.travis-ci.com/user/encryption-keys/</a></p>

<p><strong><em>do other people need to access it?</em></strong> - yes. the procedure to decrypt should be known in the company, and other employees should be able to decrypt it. However people outside of the company should not be able to decrypt it. </p>

<p><strong><em>What am I encrypting with it?</em></strong> - hopefully every sensitive information the company has that is required for testing or mocking the system. We have tests on many clouds (ec2, azure, hpcloud and more..) , I would like to keep their account credentials. I would like to keep smtp credentials. credentials to services our code uses like mailchimp/mandrill. </p>

<p>I would also like to encrypt our SSL certificate for the domains that we own. </p>

<p>So basically, if someone will ever decrypt this file, they can potentially damage the company in many ways. </p>
","","39","<encryption><encryption-symmetric><encryption-asymmetric>","0","","0","2014-10-29 05:24:02","","2","","1068746","","2014-10-29 05:24:02","2014-10-28 16:36:31",""
"48396801","Right way to store encrypted info","<p>I need to store a sensible info in a database (clients passwords). Is there a common practice? The information should be accessible by various users. Think about service company that should make maintenance of clients systems.</p>

<p>I'm thinking about using AES encryption. All the information is encrypted with the same main key. For every user this main key is encrypted with the user's password used as the key and stored separately. During login and authentication the main key is decrypted and saved in a session. Later the key is used to decrypt clients info. Is it a good practice?</p>

<p>Thanks</p>

<p>P.S.: Yes, I know that it's better not to use passwords, but it's not me to decide the way to access client's servers.</p>
","","37","<encryption-symmetric>","0","","0","2018-01-23 09:26:09","","2","1","2364940","","2018-01-23 09:26:09","2018-01-23 08:02:24",""
"58072386","how to use libmcrypt to decrypt twofish CBC in C?","<p>Imagine I did the following:</p>

<pre><code>$ echo a | mcrypt &gt; b.nc
</code></pre>

<p>and typed <code>test123</code> as the Password/KeyPhrase.
I'm assuming mcrypt will use twofish and CBC by default.</p>

<p>I want to use libmcrypt and write a C program to decode the contents of <code>b.nc</code>.</p>

<p>I modified the example from <a href=""https://github.com/winlibs/libmcrypt/blob/master/doc/example.c"" rel=""nofollow noreferrer"">https://github.com/winlibs/libmcrypt/blob/master/doc/example.c</a></p>

<pre><code>#include &lt;mcrypt.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

main() {

    MCRYPT td;
    int i;
    char *key;
    char password[20];
    char block_buffer;
    char *IV;
    int keysize=19; /* 128 bits */

    key=calloc(1, keysize);
    strcpy(password, ""test123"");

/* Generate the key using the password */
/*  mhash_keygen( KEYGEN_MCRYPT, MHASH_MD5, key, keysize, NULL, 0, password, strlen(password));
 */
    memmove( key, password, strlen(password));

    td = mcrypt_module_open(""twofish"", NULL, ""cbc"", NULL);
    if (td==MCRYPT_FAILED) {
        return 1;
    }
    IV = malloc(mcrypt_enc_get_iv_size(td));

/* Put random data in IV. Note these are not real random data,
 * consider using /dev/random or /dev/urandom.
 */

    /*  srand(time(0)); */
    for (i=0; i&lt; mcrypt_enc_get_iv_size( td); i++) {
        IV[i]=rand();
    }

    i=mcrypt_generic_init( td, key, keysize, IV);
    if (i&lt;0) {
        mcrypt_perror(i);
        return 1;
    }

    /* Encryption in CFB is performed in bytes */
    while ( fread (&amp;block_buffer, 1, 1, stdin) == 1 ) {
        // mcrypt_generic (td, &amp;block_buffer, 1);

/* Comment above and uncomment this to decrypt */
        mdecrypt_generic (td, &amp;block_buffer, 1);

        fwrite ( &amp;block_buffer, 1, 1, stdout);
    }
    mcrypt_generic_deinit(td);

    mcrypt_module_close(td);

    return 0;

}

</code></pre>

<p>This builds into the executable <code>mcrypt_dev</code>.
I tried to perform the decrypt by invoking</p>

<pre><code>$ cat b.nc | ./mcrypt_dev
</code></pre>

<p>but it just prints junk.</p>

<p>I suspect I must change the logic on the while loop that reads stdin, because it was originally written for CFB and I'm using CBC instead. Perhaps there's more to be done.</p>

<p>Any tips would be much appreciated.</p>
","","37","<c><encryption><mcrypt><encryption-symmetric>","1","","0","2019-09-26 09:39:54","","0","","2781252","","2019-09-26 09:39:54","2019-09-24 02:43:13",""
"58186565","T-SQL DecryptByKey returns NULL with Column Value, but not with Column Name","<p>I have an encrypted varbinary(MAX) field in my DB called ACCT_FName_encrypt. </p>

<p>I can successfully decrypt this field with: </p>

<pre><code>CONVERT(nvarchar(MAX), DecryptByKey(ACCT_FName_encrypt)) AS 'ACCT_FName_Denc'
</code></pre>

<p>But if I try to decrypt the actual value from the column, I get NULL: </p>

<pre><code>CONVERT(nvarchar(MAX), DecryptByKey('0x001D25D87D3D8E49A97863ADC4958E790100000021E26DD2305384AE49EC9329EF2AF8758134F7C946EC9FE024805B8DF21472C4545D461DA9F2B7F96094C2AED09BF4A9')) AS 'ACCT_FName_Denc'
</code></pre>

<p>How can I get the decrypted value from the straight varbinary, without calling the field?</p>
","<p>Try converting the value to Varbinary</p>

<pre><code>select convert(varbinary, '0x001D25D87D3D8E49A97863ADC4958E790100000021E26DD2305384AE49EC9329EF2AF8758134F7C946EC9FE024805B8DF21472C4545D461DA9F2B7F96094C2AED09BF4A9')
</code></pre>
","35","<sql-server><tsql><encryption><encryption-symmetric><varbinary>","2","0","2","2019-10-02 13:43:57","58195776","1","","1080354","","2019-10-02 13:43:57","2019-10-01 14:07:19",""
"58186565","T-SQL DecryptByKey returns NULL with Column Value, but not with Column Name","<p>I have an encrypted varbinary(MAX) field in my DB called ACCT_FName_encrypt. </p>

<p>I can successfully decrypt this field with: </p>

<pre><code>CONVERT(nvarchar(MAX), DecryptByKey(ACCT_FName_encrypt)) AS 'ACCT_FName_Denc'
</code></pre>

<p>But if I try to decrypt the actual value from the column, I get NULL: </p>

<pre><code>CONVERT(nvarchar(MAX), DecryptByKey('0x001D25D87D3D8E49A97863ADC4958E790100000021E26DD2305384AE49EC9329EF2AF8758134F7C946EC9FE024805B8DF21472C4545D461DA9F2B7F96094C2AED09BF4A9')) AS 'ACCT_FName_Denc'
</code></pre>

<p>How can I get the decrypted value from the straight varbinary, without calling the field?</p>
","<p>It should not be passed as string and it needs to be cast to the original type after. Full, working example:</p>

<pre><code>OPEN SYMMETRIC KEY StackOverflow
DECRYPTION BY PASSWORD = 'pass123_@pass123_@'
GO

DECLARE @ColumnValue NVARCHAR(MAX);
DECLARE @EncrpytionValue VARBINARY(8000);

SET @ColumnValue = REPLICATE (N'A', 12)

SET @EncrpytionValue = ENCRYPTBYKEY( KEY_GUID('StackOverflow'), @ColumnValue )

SELECT @EncrpytionValue

SELECT CONVERT(NVARCHAR(MAX), DECRYPTBYKEY(@EncrpytionValue));
SELECT CONVERT(NVARCHAR(MAX), DECRYPTBYKEY(0x00B08017838E6C48889DD12542E4C52002000000A8C910DA1CBFFE30E446358940177F03F912EE36FACF91FA2044BE5C75C9AA69BC15E6425DE52C2A193BA13AEDA90AE2276C244E56692B75CB2D4FDEC8D596F9));

--DROP SYMMETRIC KEY StackOverflow;
</code></pre>

<p>and in your code it will be just:</p>

<pre><code>CONVERT(nvarchar(MAX), DecryptByKey(0x001D25D87D3D8E49A97863ADC4958E790100000021E26DD2305384AE49EC9329EF2AF8758134F7C946EC9FE024805B8DF21472C4545D461DA9F2B7F96094C2AED09BF4A9)) AS 'ACCT_FName_Denc'
</code></pre>
","35","<sql-server><tsql><encryption><encryption-symmetric><varbinary>","2","2","2","2019-10-02 13:43:57","58195776","1","","1080354","","2019-10-02 13:43:57","2019-10-01 14:07:19",""
"54951600","The input data is not a complete block when reading stream of bytes in POST data","<p>I have a web service where I am reading a stream of data from a POST request. But when I read it from the  Request.InputStream, it gives me error saying ""<strong>The input data is not a complete block</strong>."" </p>

<p>However, when I try to read it from a file that was sent to me by my colleague,  it works even though both contain the same data. </p>

<p>Following is the data : </p>

<blockquote>
  <p>3721 b1cc 1759 3067 f993 7c3d bda9 4f04 547c ea1b 3974 2bd1 f213 74a5
  2036 7927 e679 bab5 7bbc 3fbf 6a30 85e9 38a8 b877 4855 37e5 5751 f1da
  ca75 578e 7d32 ce07 9e47 9ad7 34fe b70a 331d 7c4a a5e7 12b1 594a d329
  74bb 5d24 2088 738a 9978 cecc 9a04 8686 c451 086b cd44 5e2b cb2b 98db
  d9ec 73ef 9433 c9f3 185c 3d8e a610 6f30 642c 83e0 3ce4 4804 74aa 22cf
  6378 d49c fd73 a6e9 d0ab 53cd 3cb5 f4da a05f 93c9 e4ae 6a53 91ee aa0d
  72d7 3ab9 7100 302c</p>
</blockquote>

<p>The file sent by my colleague is created from a lisp program and that file is successfully decrypted using my code below. But when I read the data above as the input stream in Request and try to decrypt it, it throws the error. </p>

<pre><code>           System.IO.Stream str; String strmContents;
           Int32 strLen, strRead;

           // read the data
           str = Request.InputStream;
           strLen = Convert.ToInt32(str.Length);
           byte[] strArray = new byte[strLen];
           strRead = str.Read(strArr, 0, strLen);
           strArray.ToArray();

// This works
byte[] data2 = File.ReadAllBytes(""file.data"").ToArray();
byte[] dec = decryptMessage(data2);

// This throws error
contents = decryptMessage(strArray);

public string decryptMessage(byte[] data)
{         
    byte[] decryptedBytes = Decrypt(data, key);
    return Encoding.UTF8.GetString(decryptedBytes);
}

public byte[] encryptMessage(string plainText)
{
    byte[] encryptedBytes = Encrypt(Encoding.UTF8.GetBytes(plainText), key);             
    return encryptedBytes;
}

public static byte[] Encrypt(byte[] data, byte[] key)
{
    using (AesCryptoServiceProvider csp = new AesCryptoServiceProvider())
    {
        csp.KeySize = 128;
        csp.BlockSize = 128;
        csp.Key = key;
        csp.Padding = PaddingMode.None;
        csp.Mode = CipherMode.ECB;
        ICryptoTransform encrypter = csp.CreateEncryptor();
        return encrypter.TransformFinalBlock(data, 0, data.Length);
    }
}

private static byte[] Decrypt(byte[] data, byte[] key)
{
    using (AesCryptoServiceProvider csp = new AesCryptoServiceProvider())
    {
        csp.KeySize = 128;
        csp.BlockSize = 128;
        csp.Key = key;
        csp.Padding = PaddingMode.None;
        csp.Mode = CipherMode.ECB;
        ICryptoTransform decrypter = csp.CreateDecryptor();
        return decrypter.TransformFinalBlock(data, 0, data.Length);
    }
}
</code></pre>

<p>Please let me know if you think I am doing it wrong. </p>
","<p>The answer was the wrong data input. We checked the content length and strewn as well, but then the device programmer realized that he had been sending me faulty encrypted data files so it wasn't working. </p>

<p>Also, to preserve the format of data, we had to use Request.BinaryRead() instead of Request.inputStream. </p>

<p>Otherwise, code works. Thank you all!! </p>
","35","<c#><encryption><aes><encryption-symmetric><ecb>","0","0","1","2019-03-04 01:09:21","","3","","11104888","","2019-03-01 20:17:05","2019-03-01 20:09:27",""
"55096522","Not able to store SQL encrypted data [ SQL level encryption ] into SQL Database using command parameter in c#","<p>I am using SQL Encryption to encrypt my data. I get the Plain text from user, encrypt it using SQL Encryption and insert it into SQL DB into a varbinary column.
However, the problem that I am facing is that my data is not getting stored completely. if I enter 5000, encrypt it and store to DB, upon decrypting it only returns 5 i.e. the first character. I am looking at this for 3 days now still not able to resolve it. 
Below is the code to encrypt User input :`</p>

<pre><code>    public static readonly String queryOpen = ""OPEN SYMMETRIC KEY SymmetricKey1 DECRYPTION BY CERTIFICATE Certificate1; ""; //unmodifiable because its readonly
    public static readonly String queryClose = "";CLOSE SYMMETRIC KEY SymmetricKey1;""; //unmodifiable because its readonly


 public static Byte[] EncryptInput(string input)
        {

            SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings[""test""].ConnectionString);
            con.Open();

            string query = queryOpen + ""DECLARE @output varbinary(MAX);SET @output =  EncryptByKey(Key_GUID('SymmetricKey1'),@input)"" + queryClose + ""select @output"";
            SqlCommand cmd = new SqlCommand(query, con);
            cmd.Parameters.AddWithValue(""@input"",input);

            Byte[] output = cmd.ExecuteScalar() as Byte[];

            return output;


        }
</code></pre>

<p>The above code takes input from user and encrypts it using SQL encryption and returns as Byte.
Below is the code to insert the above returned data i.e output into SQL DB</p>

<pre><code>public static readonly String queryOpen = ""OPEN SYMMETRIC KEY SymmetricKey1 
DECRYPTION BY CERTIFICATE Certificate1; ""; //unmodifiable because its readonly

public static readonly String queryClose = "";CLOSE SYMMETRIC KEY SymmetricKey1;""; //unmodifiable because its readonly

string insertQuery = queryOpen + ""insert into fee(feePaid) values (@feePaid)"" + Globals.queryClose;

 SqlCommand cmd = new SqlCommand(insertQuery, con);
cmd.Parameters.Add(""feePaid"", SqlDbType.VarBinary, int.MaxValue).Value = Globals.EncryptInput(TextBox1.Text); // The EncryptInput Method is called here

cmd.ExecuteNonQuery();
</code></pre>

<p>Can some one please help and advise? Why am i getting only first character when decrypting e.g I get 5 if user input is 5000.</p>
","","34","<c#><sql-server><byte><encryption-symmetric>","0","","0","2019-03-11 07:30:31","","3","","3706016","","2019-03-11 07:30:31","2019-03-11 06:48:16",""
"30497256","AIX jre is not throwing any exception","<p>Recently i have came across a requirement to encrypt db password which is used to create connection for stand alone scheduler using <code>symmetric key algorithm</code>. </p>

<p>First db password is encrypted using a <code>java swing utility</code> in which i use <code>aes128</code> bit encryption and put into the properties file.
 Then in the <code>connection manager</code> class, in which connection is created,password is read from properties file and decrypted with same key. At my end i have tested on aix server in which this code is working but at the client side it is not working. It couldn't decrypt. After following statement in connection manager class, it is exiting from method without any exception. </p>

<pre><code>pwd=AES128Encryption.decrypt(PAYTFHomeProperties.getProperty(""PWD"").toString().trim());
</code></pre>

<p>I'm assuming this is something to do with <code>jce.jar</code>. Here is my method for decryption and connection manager class where i decrypt the password. </p>

<pre><code>protected  Connection getConnection(){

             try{

                 mcName=PAYTFHomeProperties.getProperty(""MACHINE_NAME"");
                 sid=PAYTFHomeProperties.getProperty(""SID"");
                 port=PAYTFHomeProperties.getProperty(""DB_PORT"");
                 UserName=PAYTFHomeProperties.getProperty(""USER_NAME"");
                 pwd=AES128Encryption.decrypt(PAYTFHomeProperties.getProperty(""PWD"").toString().trim());
debug(""getEncrptdData||encrypted pwd::""+PAYTFHomeProperties.getProperty(""PWD""));
                System.out.println(""decrypted pwd::""+pwd);
                 tns=PAYTFHomeProperties.getProperty(""TNS"");
                 hostString=""jdbc:oracle:thin:@""+mcName+"":""+port+"":""+sid;
                  OracleConnectionPoolDataSourcecpds=new                 OracleConnectionPoolDataSource();
                          cpds.setDriverType(""thin"");
                      cpds.setNetworkProtocol(""tcp"");
                      cpds.setServerName(mcName);
                      cpds.setDatabaseName(sid);
                      cpds.setPortNumber(Integer.parseInt(port));
                      cpds.setUser(UserName);
                      cpds.setPassword(pwd);


                      pc = (oracle.jdbc.pool.OraclePooledConnection)cpds.getPooledConnection();


                      connection con= (Connection)pc.getConnection();  

            } catch(Exception e){
            System.out.println(""getConnection""+e.toString()); 
             }
         return con;
        }
</code></pre>

<p>Here is my <code>AES128Encryption</code> class decrypt method</p>

<pre><code>import javax.crypto.*;
import javax.crypto.spec.SecretKeySpec;
import sun.misc.*;

public class AES128Encryption {

    private static final String ALGO = ""AES/ECB/PKCS5Padding"";
    public static String decrypt(String encryptedData) throws Exception {
        Cipher c = Cipher.getInstance(ALGO);
        byte[] raw = ""************"".getBytes();
        SecretKeySpec skeySpec = new SecretKeySpec(raw, ""AES"");
        c.init(Cipher.DECRYPT_MODE, skeySpec);
        byte[] decordedValue = new BASE64Decoder().decodeBuffer(encryptedData);
        byte[] decValue = c.doFinal(decordedValue);
        String decryptedValue = new String(decValue);
        return decryptedValue;
    }
   }
</code></pre>
","<p>It is not an answer but try to catch Throwable:</p>

<pre><code>try {
  // do something
} catch (Throwable t) {
  t.printStackTrace();
}
</code></pre>

<p>And aslo check if you have in your classes / methods Exceptions without body like:</p>

<pre><code>try {
   // do something
} catch (Exception e) {
   // do nothing 
}
</code></pre>
","34","<java><aes><encryption-symmetric><jce>","0","0","1","2015-05-31 05:28:11","","2","2","3060123","","2015-05-28 04:37:43","2015-05-28 04:26:41",""
"55830866","Use JOSE JWE for encryption of big files","<p>I need to encrypt some bigger files &lt; 1GB in a secure and efficient way.
Is it a good idea to use JOSE JWE libraries for that purpose?
Is there any other option you can recommend?</p>

<p>Thanks,
Simon</p>
","<p>This is not a good idea.
JWE stands for Encrypted JSON Web tokens and is meant to be used in a web context (i.e. HTTP/HTTPS protocols).
The payload is encrypted but also encoded in base64 url safe and thus the size of the encrypted payload will be larger than the original file (approx. +30% overhead) plus the header, encrypted CEK and IV.</p>

<p>A 1GB file will be encrypted into a 1.3GB token…</p>

<p><strong>You should definitively choose a dedicated and secured file transfert protocol e.g. SCP or SFTP</strong></p>
","34","<encryption><jwt><encryption-symmetric><jwe><jose>","0","0","1","2019-04-24 19:18:10","","0","","","","","2019-04-24 13:10:44",""
"29341563","3Des decryption using different key (from encryption state), can decrypt successfully","<p>I've tried TripleDESCryptoServiceProvider(). 
And I've change Encrypt/Decrypt key a bit, wonder why different key can decrypt encrypted text successfully.</p>

<p>(Also I've tried With or Without specified different IV, same result)</p>

<p>The difference in the keys is at <code>TestKey1(5) = 4, TestKey2(5) = 5</code></p>

<pre><code>Imports System.Net
Imports System.IO
Imports System.Security.Cryptography

Public Class WebForm1
    Inherits System.Web.UI.Page

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Dim tDESalg As New TripleDESCryptoServiceProvider()

        Dim Testkey1 As Byte() = UTF8Encoding.UTF8.GetBytes(""Z4xC#49S3$3!A470&amp;i0O51@5"")

        ' Create a string to encrypt.
        Dim sData As String = ""Here is some data to encrypt.""

        ' Encrypt the string to an in-memory buffer.
        Dim Data As Byte() = TrippleDESCSPSample.EncryptTextToMemory(sData, Testkey1, tDESalg.IV)

        Dim Testkey2 As Byte() = UTF8Encoding.UTF8.GetBytes(""Z4xC#59S3$3!A470&amp;i0O51@5"")
        Debug.Print(Testkey1.Equals(Testkey2))

        ' Decrypt the buffer back to a string.
        Dim Final As String = TrippleDESCSPSample.DecryptTextFromMemory(Data, Testkey2, tDESalg.IV)

        ' Display the decrypted string to the console.
        Response.Write(Final)
    End Sub



End Class


Class TrippleDESCSPSample


    Public Shared Function EncryptTextToMemory(Data As String, Key As Byte(), IV As Byte()) As Byte()
        Try
            ' Create a MemoryStream.
            Dim mStream As New MemoryStream()

            ' Create a CryptoStream using the MemoryStream 
            ' and the passed key and initialization vector (IV).
            Dim cStream As New CryptoStream(mStream, New TripleDESCryptoServiceProvider().CreateEncryptor(Key, IV), CryptoStreamMode.Write)

            ' Convert the passed string to a byte array.
            Dim toEncrypt As Byte() = New ASCIIEncoding().GetBytes(Data)

            ' Write the byte array to the crypto stream and flush it.
            cStream.Write(toEncrypt, 0, toEncrypt.Length)
            cStream.FlushFinalBlock()

            ' Get an array of bytes from the 
            ' MemoryStream that holds the 
            ' encrypted data.
            Dim ret As Byte() = mStream.ToArray()

            ' Close the streams.
            cStream.Close()
            mStream.Close()

            ' Return the encrypted buffer.
            Return ret
        Catch e As CryptographicException
            Console.WriteLine(""A Cryptographic error occurred: {0}"", e.Message)
            Return Nothing
        End Try

    End Function

    Public Shared Function DecryptTextFromMemory(Data As Byte(), Key As Byte(), IV As Byte()) As String
        Try
            ' Create a new MemoryStream using the passed 
            ' array of encrypted data.
            Dim msDecrypt As New MemoryStream(Data)

            ' Create a CryptoStream using the MemoryStream 
            ' and the passed key and initialization vector (IV).
            Dim csDecrypt As New CryptoStream(msDecrypt, New TripleDESCryptoServiceProvider().CreateDecryptor(Key, IV), CryptoStreamMode.Read)

            ' Create buffer to hold the decrypted data.
            Dim fromEncrypt As Byte() = New Byte(Data.Length - 1) {}

            ' Read the decrypted data out of the crypto stream
            ' and place it into the temporary buffer.
            csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length)

            'Convert the buffer into a string and return it.
            Return New ASCIIEncoding().GetString(fromEncrypt)
        Catch e As CryptographicException
            Console.WriteLine(""A Cryptographic error occurred: {0}"", e.Message)
            Return Nothing
        End Try
    End Function

End Class
</code></pre>
","","34","<c#><.net><vb.net><encryption-symmetric><3des>","2","","0","2015-03-30 08:32:14","","3","","22656","","2015-03-30 08:32:14","2015-03-30 08:31:04","2015-03-30 08:46:34"
"56115732","How to do authentication with PGP asymmetric encryption?","<p>I'm writing a message and encrypting it for my recipients with a PGP data encryption model. </p>

<p>How should the signing process by me, the sender, and authentication by the receivers work <strong>only for authentication</strong> purposes?</p>
","<p>In order to provided <strong>authentication</strong> and <strong>not confidentiality</strong> of the data, the data sender will <strong>encrypting his message using a private key</strong> and everyone who will decrypt the message using the sender's public key, that we can assume known to everyone, will know his identity.</p>
","33","<encryption><pgp><encryption-symmetric>","0","0","1","2019-05-19 18:16:23","56210715","7","","","","","2019-05-13 15:43:25",""
"46716311","Why is hexcode output failing?","<pre><code>from os import urandom
from PIL import Image
import io



for y in range((len(array2) -1), -1, -1):  
  decrypted_initial = decrypt(array2[y], key)
  if y &gt; 0:
    decrypted_cipher = decrypt(decrypted_initial, array2[(y -1)])
  if y == 0:
    decrypted_cipher = decrypt(decrypted_initial, fixed_initialization_vector)
  immage_array.append(decrypted_cipher)
immage_array = [x for sets in immage_array for x in sets] #The list is all zeros since the image is all black.


for i in range(1000):
  print (immage_array[i]) #1000 zeroes printed.
if immage_array == myMessage: #Comparing the input hexocde for the encryption and output hexcode from the decryption.
    print(""Yay."") #Print successful. 
image = Image.open(io.BytesIO(bytes(immage_array))) #Not sure what this does exactly. I am just trying to get the hexcode to output as an image file.
image.save(output.png)
</code></pre>

<p>I am trying to do chain block cipher on an image and this is part of the code. I have been able to get the hex code of an image, encrypt it using chain block cipher, and decrypt it. I then compared the decrypted hex code with the original input hex code and I get a successful match. The hex code is returned as a list instead of a byte array though but the if statement still recognizes them as equal. I am having trouble converting the hexcode back into an image though.</p>

<p>I get this error. OSError: cannot identify image file &lt;_io.BytesIO object at 0x039F1090></p>

<p>The image is all black pixels for test purposes to make it easy to confirm the integrity of the hex code which I have confirmed to be identical to the input.</p>

<p>What is preventing me from turning the hexcode back into an image? I have tried looking everywhere for examples that worked but I have never been able to fully understand why it worked. Here is my logic.</p>

<p>immage_array is a list == (0, 0, 0, 0, ..., n)</p>

<p>bytes() #turns the immage_array list of all integers 0 into a byte array all consisting of x00.</p>

<p>io.BytesIO() A function needed for the byte array to be manipulated by the Image.open() function.</p>

<p>I then have the byte array stored as an object in the variable image.</p>

<p>image.save(output.png) The save function takes the filename as an argument. The image object is used.</p>

<p>I have honestly tried my hardest to find out where the logic is failing. I would appreciate an explanation of how to turn a list of (0, 0, 0, ..., n) into an image. Yes, I know, I have seen other examples of it being done on stack overflow. I am wondering why my implementation of it is failing.</p>
","<p>I just re-read your question. You cannot do this if your immage_array is [0, 0, 0...]. That is not an image, it is a bitmap (subtle difference). Use the PIL.Image.frombytes constructor.</p>

<p>If you want to encrypt images, just encrypt the whole contents, rather than extracting the file contents, converting it to a bitmap, then encrypting/decrypting it. When you convert it to a bitmap, for starters, it will be an order of magnitude more data, and secondly you loose the information on what format the image is (RGB, ARGB, monochrome, etc.)</p>

<p>As you have now disclosed, you are using the <code>PIL.Image.getdata</code> method. This returns a one-dimensional list, so how are you going to know the width/height at the other end? i.e. if your image is 640x480, from the other end you can't tell if it will be 480x640 or even 307200x1</p>
","32","<python><image><encryption-symmetric>","0","0","1","2017-10-12 18:50:01","46716879","4","","8553501","","2017-10-12 18:36:34","2017-10-12 18:12:40",""
"57908061","Which tool can I use to encrypt bacpac file using azure key vault","<p>I exported my azure SQL Managed instance to a Bacpac file using SQLPackage, Now I want to store it on a azure file storage. Before I want to copy the bacpac to the file storage, I want to encrypt it using a Secret from Azure key vault. SQLPackage does not have any encryption functionality, does anyone know a good tool I can use to encrypt the bacpac file before copying to the file storage? Preferably a tool I can call in my ps1 (powershell) script. I want to use the same tool to decrypt the bacpac file again once downloaded from the file storage.</p>
","<p>The official approach is to use <a href=""https://docs.microsoft.com/en-us/azure/storage/blobs/storage-encrypt-decrypt-blobs-key-vault"" rel=""nofollow noreferrer"">client-side encryption</a>. However, there is no existing tools. You may write a program to upload the encrypted content and download the decrypted content.  </p>

<p>Here are two official client=side encryption samples: </p>

<ol>
<li>.NET sample: <a href=""https://github.com/Azure-Samples/storage-dotnet-client-side-encryption"" rel=""nofollow noreferrer"">https://github.com/Azure-Samples/storage-dotnet-client-side-encryption</a> </li>
<li>Java sample: <a href=""https://github.com/Azure-Samples/storage-java-client-side-encryption"" rel=""nofollow noreferrer"">https://github.com/Azure-Samples/storage-java-client-side-encryption</a> </li>
</ol>
","32","<azure-keyvault><encryption-symmetric><sqlpackage><bacpac>","-1","0","1","2019-09-16 07:35:37","","0","","","","","2019-09-12 13:41:11",""
"58541498","Upgrade Spring Boot 1.x to 2.x (update ENCRYPT KEY VM argument if using {cipher} texts)","<p>If <code>{cipher}</code> encrypted text is being used in your spring-boot application property file.</p>

<p><code>application.yml</code> or <code>application.properties</code></p>

<pre><code>my.password='{cipher}68e78a954bfa0297ecc733`
</code></pre>

<p>Above is start failing in SpringBoot2 with error message <code>Cannot decrypt: key=my.password</code></p>

<p>Stack Trace</p>

<pre><code>java.lang.IllegalStateException: Cannot decrypt: key=enterpriseInventoryService.password
    at org.springframework.cloud.bootstrap.encrypt.EnvironmentDecryptApplicationInitializer.decrypt(EnvironmentDecryptApplicationInitializer.java:292)
    at org.springframework.cloud.bootstrap.encrypt.EnvironmentDecryptApplicationInitializer.lambda$decrypt$0(EnvironmentDecryptApplicationInitializer.java:270)
    at java.util.LinkedHashMap.replaceAll(Unknown Source)
    at org.springframework.cloud.bootstrap.encrypt.EnvironmentDecryptApplicationInitializer.decrypt(EnvironmentDecryptApplicationInitializer.java:265)
    at org.springframework.cloud.bootstrap.encrypt.EnvironmentDecryptApplicationInitializer.decrypt(EnvironmentDecryptApplicationInitializer.java:190)
    at org.springframework.cloud.bootstrap.encrypt.EnvironmentDecryptApplicationInitializer.initialize(EnvironmentDecryptApplicationInitializer.java:124)
    at org.springframework.cloud.bootstrap.BootstrapApplicationListener$DelegatingEnvironmentDecryptApplicationInitializer.initialize(BootstrapApplicationListener.java:413)
    at org.springframework.boot.SpringApplication.applyInitializers(SpringApplication.java:623)
.
.
Caused by: java.lang.IllegalStateException: Unable to invoke Cipher due to bad padding
    at org.springframework.security.crypto.encrypt.CipherUtils.doFinal(CipherUtils.java:142)

</code></pre>
","<p><strong>Spring-boot-1</strong> </p>

<p>Any one of the following VM arguments is valid to provide the secret key so that spring can decrypt <code>'{cipher}f75146b2d391aa6'</code> while loading the properties.</p>

<ol>
<li><strong>encrypt.key</strong> (default key)</li>
<li>encrypt_key</li>
<li>encryptKey</li>
<li>encryptkey</li>
<li>ENCRYPT.KEY</li>
<li>ENCRYPT_KEY</li>
<li>ENCRYPTKEY</li>
</ol>

<p>Spring use <code>org.springframework.boot.bind.RelaxedPropertyResolver</code> to resolve above keys to get secret key, but this class has been deprecated and removed in <code>spring-boot-2</code>.</p>

<p>Code snippet in <code>spring-cloud-context-1.x.jar</code> from class <code>org.springframework.cloud.bootstrap.encrypt.EncryptionBootstrapConfiguration</code></p>

<pre><code>Environment environment = context.getEnvironment();
RelaxedPropertyResolver propertyResolver = new RelaxedPropertyResolver(environment);
hasProperty(propertyResolver, environment, ""encrypt.key"");

private boolean hasProperty(RelaxedPropertyResolver propertyResolver, Environment environment, String key) {
        String value = propertyResolver.getProperty(key);
        if (value == null) {
            return false;
        }
        return StringUtils.hasText(environment.resolvePlaceholders(value));
    }
</code></pre>

<p><strong>Spring-boot-2</strong> </p>

<p>Only <code>encrypt.key</code> is valid VM argument to pass the secret key.</p>

<p>Code snippet in <code>spring-cloud-context-2.x.jar</code> from class <code>org.springframework.cloud.bootstrap.encrypt.EncryptionBootstrapConfiguration</code></p>

<pre class=""lang-java prettyprint-override""><code>Environment environment = context.getEnvironment();
hasProperty(environment, ""encrypt.key"");

private boolean hasProperty(Environment environment, String key) {
            String value = environment.getProperty(key);
            if (value == null) {
                return false;
            }
            return StringUtils.hasText(environment.resolvePlaceholders(value));
        }
</code></pre>
","32","<java><spring><encryption><encryption-symmetric><spring-boot-2>","1","1","1","2019-10-24 12:33:36","58541499","0","3","","","","2019-10-24 12:33:36",""
"47146932","how to implement authentication for encrypted data","<p>if I have data that was encrypted using RC5 and I want to use authentication can I use a hash function? and which hash is the best, or shall I use a predetermined way between the sender and the receiver? if there is any other way to achieve this service, please help with any suggestions. thank you </p>
","","30","<authentication><encryption><hash><encryption-symmetric>","0","","0","2017-11-06 22:30:24","","11","","","","","2017-11-06 22:30:24",""
"57212361","While creating keyztore instance getting error as pkcs11 not found","<p>I am trying to create and initialize the IBMPKCS11 provider using config file on java 1.8 64 bit on Linux environment:</p>

<p>While creating the instance of Keystore, getting an error as pkcs11
not  found.</p>

<p>pkcs11.cfg file details are as follows:</p>

<pre><code>name = nCipher   
library=/opt/nfast/toolkits/pkcs11/libcknfast.so   
slotListIndex=1    
attributes=compatibility
</code></pre>

<p>Code:</p>

<pre><code>private PrivateKey privateKey;
private static com.ibm.crypto.pkcs11impl.provider.IBMPKCS11Impl 
provider;
provider = new com.ibm.crypto.pkcs11impl.provider.IBMPKCS11Impl(pkcs11.cfg);
Security.addProvider (provider);
privateKey =getPrivateKey(trans.decode(CARDSET_PASSPHRASE).toCharArray(),trans.decode(KEY_ALIAS));

public PrivateKey getPrivateKey(char[] passPhrase, String alias)
throws KeyStoreException, NoSuchAlgorithmException,         
{
    System.out.println (""Inside getPrivateKey method"");
    PrivateKey pk = null;
    try{
        KeyStore ks = KeyStore.getInstance(""PKCS11"", _provider.getName());    
        ks.load(null, passPhrase);   
        pk= (PrivateKey ) ks.getKey(alias, passPhrase);
    }catch(Exception e){
        e.printStackTrace();
    }
    return pk;
}
</code></pre>
","","30","<java><public-key-encryption><pkcs#11><encryption-symmetric>","0","","0","2019-07-26 05:13:10","","3","","207421","","2019-07-26 05:13:10","2019-07-26 02:24:14",""
"58356369","How to encrypt data using a private key/password that is itself encrypted?","<p>I want to encrypt some data (some simple text) using Java in a way that:</p>

<ul>
<li>I have to provide the encoding key/password <em>once</em> to the server the application will run on.</li>
<li>The application can then encrypt data by itself, using the previously stored key.</li>
<li>An attacker who would gain access to the server wouldn't  be able to get the stored key.</li>
</ul>

<p>In other words, I want my application to be able to encrypt some data by itself, without requiring the key every time, and I want this key to be encrypted itself (not stored in plain text) so an attacker couldn't get it.</p>

<p>What tools/technics can I use to achieve that?</p>
","<blockquote>
  <p>An attacker who would gain access to the server wouldn't be able to get the stored key</p>
</blockquote>

<p>This is generally a problem, mainly when having an encryption key next to your data. Once the key is leakt, nothing prevents the attacker to decrypt the data. You main task is preventing the attacker to get the access to the key in first place (I know, it's easy to say).  </p>

<p>Seems you want to keep the key only in memory, that may be a good idea in many cases. When decrypting, at the end the key needs to be in the memory anyway. </p>

<blockquote>
  <p>I want this key to be encrypted itself (not stored in plain text) </p>
</blockquote>

<p>Then you need to store and maintain an encryption key to encrypt the first key. And you have the same issue to protect both of the keys. </p>

<p>Suggestion:</p>

<p>I see often solutions using external services to manage the keys or do the cryptographic operations (a key vault, key management service, HSM, TPM,.. ). However - if an attacker gains full application-level access, he may use the same services to decrypt the data.</p>

<p>But at least if data are leakt (in my experience often backups or old copies are leakt), these services would help to make the data unaccessible. </p>
","30","<java><encryption><encryption-symmetric>","1","1","1","2019-10-12 18:04:24","","0","","","","","2019-10-12 16:50:44",""
"58203417","How to run Bouncy Castle API on Windows?","<p>I'm trying to run Bouncy Castle API and see how it works. How can I do this on Windows OS?
I installed it from <em><a href=""https://www.bouncycastle.org/documentation.html"" rel=""nofollow noreferrer"">https://www.bouncycastle.org/documentation.html</a></em> and opened it on Eclipse. But I don't know how I use it. Can anybody help for this?</p>
","<p>There are basically two ways to use Bouncy Castle, by which I mean the cryptographic library and provider - which is the core package. The other packages can be used as any other library.</p>

<p>First of all, there is the lightweight API, which simply is a standalone cryptographic library. It has it's own architecture which is significantly different from the Java Cryptographic Architecture or the JCA (which comes with every version of Java). It doesn't use a service oriented architecture, which is probably the major difference. Instead it relies on inheritance when creating the algorithms. So you'd use <code>new CBCBlockCipher(new AESEngine())</code> rather than <code>Cipher.getInstance(""AES/CBC/NoPadding"")</code>.</p>

<p>Furthermore, you can install it as a cryptographic provider in Java and Android. For this you can e.g. use a call such as: <code>Security.addProvider(new BouncyCastleProvider())</code>. This will register the provider, and the algorithms that are registered within the provider are now available through the JCA. For instance, you can now use <code>Cipher.getInstance(""Camellia/CBC/NoPadding"")</code>.</p>

<p>You can also use <code>Cipher.getInstance(""AES/CBC/PKCS5Padding"", ""BC"")</code> to explicitly select the Java implementation of AES in Bouncy Castle instead of the default one provided by Java. Generally however you would use the default ones, as they may e.g. be backed up by AES-NI instructions within the processor you are using.</p>
","25","<api><encryption><bouncycastle><password-encryption><encryption-symmetric>","0","0","1","2019-10-02 21:48:45","","1","","","","","2019-10-02 14:18:52",""
"56629343","How to play an encrypted video file (.mpg) with the Vitamio?","<p>I work on a project that it must be play an encrypted file with the Aes128(Rijndael) method!
and should not decrypt the file completely at the first  and play it all.
I have to decrypted and play in-the-fly the file at 512 byte blocks.</p>

<p>how can do it with the vitamio; is it possible ?</p>

<p>Attention : It possible with exoplayer but it doesn't supports mpg format.</p>

<p>thank you!</p>
","<p>Encrypted file cannot be played with Vitamio</p>
","25","<java><android><encryption-symmetric><on-the-fly><vitamio>","0","0","1","2019-10-12 12:49:19","58354331","0","0","","","","2019-06-17 10:22:36",""
"57460252","How extract from openssl_decrypt text and secret key ? - PHP","<p>I'm trying to encrypt a word with a <code>key</code> and i found out <code>openssl_encrypt</code>.</p>

<p>Now (maybe) i'm able to do it but i can't to extract from it initial <strong>word</strong> and secret key.</p>

<pre><code> $text = ""message"";
 $method = ""aes-128-gcm"";
 $ivlen = openssl_cipher_iv_length($method);
 $iv = openssl_random_pseudo_bytes($ivlen);
 $secretKey= ""god"";


if (in_array($method, openssl_get_cipher_methods())){       
  $encrypted = openssl_encrypt($text, $method, $secretKey, $options=0, $iv);
  $decrypted = openssl_decrypt($encrypted, $method, $secretKey, $options=0, $iv);

  print_r($encrypted);

  print_r($decrypted);  
}
</code></pre>

<p>Besides when decryption is correct output is FALSE or TRUE ?</p>
","<p>It's because you're using gcm, change $method to ""aes-128-cbc""</p>
","24","<php><encryption><openssl><public-key-encryption><encryption-symmetric>","0","0","1","2019-08-12 11:40:26","","4","","3162975","","2019-08-12 11:27:16","2019-08-12 11:22:35",""
"58174895","How does an encryption algorithm actually encrypt data","<p>What I want to know, is not how encryption works, what are keys etc &lt;- I kinda got that, like how DH works, and I did learn asymmetric keys a while back, but I'll probably need to refresh on that.</p>

<p>What I want to know is how does the key turn some plaintext like ""HELLO"" into ciphertext such as ""MQPCT""</p>

<p>What actually happens to the string during the process, does each character get turned into a number somehow? That sort of thing</p>

<p>Hopefully my question makes sense</p>
","<p>To answer your question about what happens to the string during the process - the string is decoded into bits, then the bits are encrypted.  </p>

<p>Most modern encryption protocols ultimately use AES symmetric encryption to encrypt the message, using a secret key shared by both the sender of the message and the recipient.  The message is broken up into blocks of 128 bits (and usually padded), then the AES algorithm is used to encrypt these bits.  For information on how AES does this, see <a href=""https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Advanced_Encryption_Standard</a>.</p>
","24","<encryption><public-key-encryption><encryption-symmetric><encryption-asymmetric>","0","1","1","2019-09-30 21:44:07","","2","","","","","2019-09-30 20:28:02","2019-09-30 21:47:05"
"58641643","(Java to Javascript) javax.crypto.Cipher equivalent code in Nodejs Crypto Javascript","<p>I'm trying to convert below java code into nodejs.</p>

<pre class=""lang-java prettyprint-override""><code>
    private static String TRANS_MODE = ""Blowfish"";

    private static String BLOWFISH_KEY = ""BLOWFISH_KEY"";

    public static String encrypt(String password) throws Exception {

    SecretKeySpec keySpec = new SecretKeySpec(BLOWFISH_KEY.getBytes(""Windows-31J""),TRANS_MODE);
    Cipher cipher;
    cipher = Cipher.getInstance(TRANS_MODE);

    cipher.init(Cipher.ENCRYPT_MODE, keySpec);
    byte[] passByte;
    passByte = cipher.doFinal(password.getBytes(""Windows-31J""));


    return new String(Hex.encodeHex(passByte));

    }

</code></pre>

<p>Here is what I was able to figure out-</p>

<pre class=""lang-js prettyprint-override""><code>

const crypto = require('crypto');

function encrypt(password)  
  var fcKey = ""BLOWFISH_KEY"";
  var cipher = crypto.createCipher('BF-CBC', fcKey, """");
  var encrypted = cipher.update(password,'ascii','hex');
  encrypted += cipher.final('hex');
return encrypted;

</code></pre>

<p>I'm not able to get same output. For example if</p>

<p>password= ""password01""</p>

<p>Java Code output - fe0facbf8d458adaa47c5fe430cbc0ad</p>

<p>Nodejs Code output - ae5e8238c929b5716566e97fa35efb9b</p>

<p>Can someone help me figure out the problem ??</p>
","<p>Notice that <code>crypto.createCipher(algorithm, password[, options])</code> is deprecated and should not be used.</p>

<p>Where the <code>SecretKeySpec(..)</code> in java takes a binary key as input, the createCipher(..) in js takes a ""password"" as input, and behind the scene tries to derive a binary key using MD5. So your actually key used in the two programs ends up being different. The js methode 
also tries to derive an IV from the password, which is bad practice and different from your java code.</p>

<p>In js you need to use the <code>crypto.createCipheriv()</code> instead. And when you are at it, you also need to consider if an iv is needed - both in Java and in js.</p>
","23","<java><node.js><encryption><encryption-symmetric><javax.crypto>","0","1","1","2019-10-31 12:33:20","","1","","","","","2019-10-31 10:45:27",""
"58332082","Does Django have the capability of sharing a field value between a pair of users such as a symmetric key?","<p>I want a user to be able to take plaintext and paste it into a form to submit using a symmetric key and then receive the ciphertext. Then using the ciphertext another user who shares the symmetric key can use that key to decrypt that ciphertext.</p>

<p>I'm new to Django and believe I need to setup a user model and use that model somehow to solve the problem but I'm not sure how and cannot find any information to help. I believe I need a special model because that's how you store and retrieve user information but I could be wrong.</p>

<pre><code>*from django.contrib.auth.models import AbstractUser*

*from django.db import models*

*class CustomUser(AbstractUser):*

*age = models.PositiveIntegerField(null=True, blank=True)*

*key = models.??????*
</code></pre>

<p><strong>The actual results should be as follows:</strong>
A user logs in and chooses from a list of users that they have ""befriended"" so to speak where <strong>they both share the same symmetric key(&lt;--the topic of question)</strong>. That user then takes plaintext such as a sentence or paragraph and pastes this information into an HTML form where they can click submit. Upon submission the plaintext is encrypted using the key respective of the intended recipient. Then that information runs through a encryption algorithm and returns ciphertext. That user then takes that ciphertext and emails (for example) it to the intended friend. That friend can then login to the same application used by the sender and choose that sender as the message's origin. Then the recipient user will take the ciphertext, again paste it into a HTML form where when they click submit the application will use the message's original symmetric key to decrypt the garbled text into plaintext.</p>
","","20","<django><database><django-models><django-rest-framework><encryption-symmetric>","0","","0","2019-10-11 04:38:38","","4","","1478995","","2019-10-11 04:38:38","2019-10-10 22:50:05",""
"55838341","How to secure a configuration file in IBM Cloud","<p>I have a Flask python app running on IBM cloud. The app needs some configuration parameter which it gets from a configuration file. I need to encrypt the configuration file using a symmetric key. How can I do that and where I can store my decrypt key? Ideally I don't want to hard code it into my code.</p>
","<p>12 Factor question. Embed it in the app's deployment environment variables and read the value at runtime. </p>
","19","<python><ibm-cloud><encryption-symmetric>","0","0","1","2019-04-24 21:18:58","","0","","","","","2019-04-24 20:48:35",""
"53473276","Using Salsa20 without the Poly1305 MAC?","<p>I need to do symmetric private key encryption on pieces of specific size. That means that input stream must have same size as output stream. I am using libnacl/libsodium in Python 3.7.</p>

<p>The problem is that Salsa20 adds the Poly1305 MAC at the end, altering the size of the stream.</p>

<p>How can I use Salsa20 without MAC authentication in libnacl/libsodium?</p>
","","19","<python-3.x><encryption-symmetric><libsodium>","0","","0","2018-11-26 00:09:11","","0","","","","","2018-11-26 00:09:11",""
"58361170","gpg encrypted bash doesn't get executed while decrypting it","<p>Lemme show the actual commands itself , so it would be lot easier to understand my issue</p>

<pre><code>ls
start.sh
$ gpg -c start.sh
""It prompts to choose password , i enter it""
$ rm -rf start.sh &amp;&amp; ls
start.sh.gpg
$ gpg -d start.sh.gpg | bash
gpg: AES encrypted data
gpg: encrypted with 1 passphrase
</code></pre>

<p>Immediately below this line it just displays  the contents inside start.sh .. ( want to see the whole output ? Check <a href=""https://del.dog/eqadadajiw"" rel=""nofollow noreferrer"">here</a></p>

<p>How do i actually execute the bash Instead of displaying the content inside it</p>

<p>( PS : i don't want to have a separate command for decrypting the gpg file and save it then later executing that decrypted bash   , i want it to get decrypted without creating new file + executed in a single command )</p>
","","17","<linux><bash><shell><gnupg><encryption-symmetric>","-1","","0","2019-10-13 07:01:37","","2","","11988417","","2019-10-13 07:01:37","2019-10-13 06:39:56",""
"48085371","Crypto breaking Nougat change","<p>When researching why my encrypted messenger app would not work on Nougat I found <a href=""https://android-developers.googleblog.com/2016/06/security-crypto-provider-deprecated-in.html"" rel=""nofollow noreferrer"">this document</a> that describes the breaking change and it's reasons along with some technical info on encryption using passwords.  This had not meaning for me as I don't use Passwords.  The document does not offer any complete examples on what to do so I began looking all over for what to do.</p>

<p>My research led me to <a href=""https://stackoverflow.com/questions/39097099/security-crypto-provider-deprecated-in-android-n/42337802"">this post</a>. The answer to the post works but I have no idea why.  Furthermore the last comment says . . .
""At least this can be a quick-fix before actually going on the recommended way""</p>

<p>What is the ""recommended way?""  Are there any working examples anywhere on the recommend way?</p>
","","17","<android><encryption><aes><encryption-symmetric>","0","","0","2018-01-03 21:28:05","","3","","","","","2018-01-03 21:28:05",""
"58274046","Using Protocol Buffer to Serialize Bytes Python3","<p>I am trying to serialize a bytes object - which is an initialization vector for my program's encryption. But, the Google Protocol Buffer only accepts strings. It seems like the error starts with casting bytes to string. Am I using the correct method to do this? Thank you for any help or guidance!</p>

<p>Or also, can I make the Initialization Vector a string object for AES-CBC mode encryption?</p>

<p><strong>Code</strong></p>

<ul>
<li>Cast the bytes to a string

<ul>
<li><code>string_iv = str(bytes_iv, 'utf-8')</code></li>
</ul></li>
<li>Serialize the string using SerializeToString():

<ul>
<li><code>serialized_iv = IV.SerializeToString()</code></li>
</ul></li>
<li>Use ParseToString() to recover the string:

<ul>
<li><code>IV.ParseFromString( serialized_iv )</code></li>
</ul></li>
<li>And finally, UTF-8 encode the string back to bytes: 

<ul>
<li><code>bytes_iv = bytes(IV.string_iv, encoding= 'utf-8')</code></li>
</ul></li>
</ul>

<p><strong>Error</strong></p>

<p>string_iv = str(bytes_iv, 'utf-8')
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x9b in position 3: invalid start byte</p>
","<p>If you <em>must</em> cast an arbitrary <code>bytes</code> object to <code>str</code>, these are your option:</p>

<ul>
<li>simply call <code>str()</code> on the object. It will turn it into <code>repr</code> form, ie. something that could be parsed as a <code>bytes</code> literal, eg. <code>""b'abc\x00\xffabc'""</code></li>
<li>decode with ""latin1"". This will always work, even though it technically makes no sense if the data isn't text encoded with Latin-1.</li>
<li>use base64 or base85 encoding (the standard library has a <code>base64</code> module wich covers both)</li>
</ul>
","16","<python-3.x><utf-8><type-conversion><encryption-symmetric><google-protocol-buffer>","0","0","1","2019-10-07 18:06:42","","0","1","","","","2019-10-07 16:58:26",""
"56763756","rocketjob/symmetric-encryption error saving :decimal attribute","<p>Using rocketjob <a href=""https://github.com/rocketjob/symmetric-encryption"" rel=""nofollow noreferrer"">symmetric-encryption</a> gem to encrypt many tables/fields successfully in a Rails 5.2.3 (ruby 2.6.3 running PostgreSQL) with various types: :string, :boolean, :integer, and :date. I have one field that is :decimal type and it's the only field that fails when updating.</p>

<p>I'm calling some ajax to save individual attributes like this:</p>

<pre><code>object.update_attribute(attr, value)
</code></pre>

<p>Stack trace caught in a rescue block when saving the :decimal:</p>

<pre><code>wrong number of arguments (given 1, expected 0)
</code></pre>

<p>Here's my rails model symmetric-encryption definition:</p>

<pre><code>attribute :rent_amount, :encrypted, random_iv: false, type: :decimal
</code></pre>

<p>But also in a rails console just simply saving a record on that model gives the same error.</p>

<p>I can change the type to :integer or :float and updating/saving without issue. Just cannot save a :decimal.</p>

<p>My environment:</p>

<ul>
<li>Ruby 2.6.3</li>
<li>Symmetric Encryption 4.3.0</li>
<li>Rails 5.2.3</li>
</ul>
","","16","<ruby-on-rails><ruby><encryption-symmetric>","0","","0","2019-06-26 00:51:22","","0","","","","","2019-06-26 00:51:22",""
"57389548","How to encrypt a SMIME via symmetric encryption","<p>i am currently trying to encrypt a SMIME which i want to send via REST to a server.
Server expects me to create a symmetric key ( AES256_CBC wrapped with the public key of the reciever using RSA ). This key shall be used to encrypt the SMIME, but currently i have no clue on how to do that.</p>

<p>I have this method to generate a AES key and wrap it via RSA.</p>

<pre><code>public static byte[] wrapKey( )
        throws InvalidKeyException, CertificateException, IllegalBlockSizeException {
    CertificateFactory cf;
    X509Certificate recp_cert = null;

    cf = CertificateFactory.getInstance( ""X.509"" );
    recp_cert = (X509Certificate)cf.generateCertificate( getRecipientCertificate(
          eTerminUID, eTerminEMail ) );

    try {
      KeyGenerator keygen = KeyGenerator.getInstance( ""AES"" );
      keygen.init( 256 );
      SecretKey key = keygen.generateKey( );

      // Wrap with public key
      Key publicKey = recp_cert.getPublicKey( );

      Cipher cipher = Cipher.getInstance( ""RSA"" );
      cipher.init( Cipher.WRAP_MODE, publicKey );
      byte[ ] wrappedKey = cipher.wrap( key );
      return wrappedKey;
    } catch( NoSuchAlgorithmException | NoSuchPaddingException e ) {
      throw new IllegalStateException( e );
    }
  }
</code></pre>

<p>After generating i expected to use a SMIMEEnvelopedGenerator to encrypt the mimeBodyPart that i wish to be encrypted, but i can't figure out how to involve my symmetric key into that action.</p>

<p>Thanks in advance.
Kai</p>
","","12","<encryption><encryption-symmetric><smime>","0","","0","2019-08-07 07:56:21","","0","","","","","2019-08-07 07:56:21",""
"54714104","Validate a Symmetric Key Password","<p>I know that you can validate the password of a Master Key using the following:</p>

<pre><code>open master key decryption by password = '************';
close master key;
</code></pre>

<p>If you don't provide the proper password, it will give you a decryptor error.</p>

<p>Is there an equivalent to this command for a Symmetric Key?</p>

<p>Thanks </p>
","","9","<sql><encryption-symmetric>","0","","0","2019-02-15 17:15:14","","0","","","","","2019-02-15 17:15:14",""