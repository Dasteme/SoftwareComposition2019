post_link,title,body_question,body_answer,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate
"318441","Truststore and Keystore Definitions","<p>What's the difference between a keystore and a truststore?</p>
","<p>A keystore contains private keys, and the certificates with their corresponding public keys.</p>

<p>A truststore contains certificates from other parties that you expect to communicate with, or from Certificate Authorities that you trust to identify other parties.</p>
","146254","<keystore><encryption-asymmetric><truststore>","279","261","6","2017-07-26 12:00:35","318450","0","64","1350209","","2015-05-20 21:28:40","2008-11-25 18:38:22",""
"318441","Truststore and Keystore Definitions","<p>What's the difference between a keystore and a truststore?</p>
","<ol>
<li><p>A keystore contains private keys. You only need this if you are
a server, or if the server requires client authentication.</p></li>
<li><p>A truststore contains CA certificates to trust. If your server’s
certificate is signed by a recognized CA, the default truststore
that ships with the JRE will already trust it (because it already
trusts trustworthy CAs), so you don’t need to build your own,
or to add anything to the one from the JRE.</p></li>
</ol>

<p><a href=""http://mynotes.wordpress.com/2009/08/04/difference-between-keystore-truststore"" rel=""noreferrer"">Source</a></p>
","146254","<keystore><encryption-asymmetric><truststore>","279","77","6","2017-07-26 12:00:35","318450","0","64","1350209","","2015-05-20 21:28:40","2008-11-25 18:38:22",""
"318441","Truststore and Keystore Definitions","<p>What's the difference between a keystore and a truststore?</p>
","<p>You may also be interested in the write-up from Sun, as part of the standard JSSE documentation:</p>

<p><a href=""http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html#Stores"" rel=""noreferrer"">http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html#Stores</a></p>

<p>Typically, the trust store is used to store only public keys, for verification purposes, such as with X.509 authentication. For manageability purposes, it's quite common for admins or developers to simply conflate the two into a single store.</p>
","146254","<keystore><encryption-asymmetric><truststore>","279","29","6","2017-07-26 12:00:35","318450","0","64","1350209","","2015-05-20 21:28:40","2008-11-25 18:38:22",""
"318441","Truststore and Keystore Definitions","<p>What's the difference between a keystore and a truststore?</p>
","<p>In a SSL handshake the purpose of <strong>trustStore is to verify credentials</strong> and the purpose of <strong>keyStore is to provide credential</strong>. </p>

<p><strong>keyStore</strong></p>

<p>keyStore in Java stores private key and certificates corresponding to their public keys and require if you are SSL Server or SSL requires client authentication. </p>

<p><strong>TrustStore</strong></p>

<p>TrustStore stores certificates from third party, your Java application communicate or certificates signed by CA(certificate authorities like Verisign, Thawte, Geotrust or GoDaddy) which can be used to identify third party. </p>

<p><strong>TrustManager</strong></p>

<p>TrustManager determines whether remote connection should be trusted or not i.e. whether remote party is who it claims to and KeyManager decides which authentication credentials should be sent to the remote host for authentication during SSL handshake.</p>

<p>If you are an SSL Server you will use private key during key exchange algorithm and send certificates corresponding to your public keys to client, this certificate is acquired from keyStore. On SSL client side, if its written in Java, it will use certificates stored in trustStore to verify identity of Server. SSL certificates are most commonly comes as <strong>.cer</strong> file which is added into keyStore or trustStore by using any key management utility e.g. <strong>keytool</strong>.</p>

<p>Source: <a href=""http://javarevisited.blogspot.ch/2012/09/difference-between-truststore-vs-keyStore-Java-SSL.html"" rel=""noreferrer"">http://javarevisited.blogspot.ch</a></p>
","146254","<keystore><encryption-asymmetric><truststore>","279","70","6","2017-07-26 12:00:35","318450","0","64","1350209","","2015-05-20 21:28:40","2008-11-25 18:38:22",""
"318441","Truststore and Keystore Definitions","<p>What's the difference between a keystore and a truststore?</p>
","<blockquote>
  <p>In Java, what's the difference between a keystore and a truststore?</p>
</blockquote>

<p>Here's the description from the Java docs at <a href=""http://download.java.net/jdk8/docs/technotes/guides/security/jsse/JSSERefGuide.html"">Java Secure Socket Extension (JSSE) Reference Guide</a>. I don't think it tells you anything different from what others have said. But it does provide the official reference.</p>

<blockquote>
  <p><strong>keystore/truststore</strong></p>
  
  <p>A keystore is a database of key material. Key material is used for a variety of purposes, including authentication and data integrity.
  Various types of keystores are available, including PKCS12 and
  Oracle's JKS.</p>
  
  <p>Generally speaking, keystore information can be grouped into two categories: key entries and trusted certificate entries. A key entry
  consists of an entity's identity and its private key, and can be used
  for a variety of cryptographic purposes. In contrast, a trusted
  certificate entry contains only a public key in addition to the
  entity's identity. Thus, a trusted certificate entry cannot be used
  where a private key is required, such as in a
  javax.net.ssl.KeyManager. In the JDK implementation of JKS, a keystore
  may contain both key entries and trusted certificate entries.</p>
  
  <p>A truststore is a keystore that is used when making decisions about what to trust. If you receive data from an entity that you
  already trust, and if you can verify that the entity is the one that
  it claims to be, then you can assume that the data really came from
  that entity.</p>
  
  <p>An entry should only be added to a truststore if the user trusts that entity. By either generating a key pair or by importing a
  certificate, the user gives trust to that entry. Any entry in the
  truststore is considered a trusted entry.</p>
  
  <p>It may be useful to have two different keystore files: one containing just your key entries, and the other containing your
  trusted certificate entries, including CA certificates. The former
  contains private information, whereas the latter does not. Using two
  files instead of a single keystore file provides a cleaner separation
  of the logical distinction between your own certificates (and
  corresponding private keys) and others' certificates. To provide more
  protection for your private keys, store them in a keystore with
  restricted access, and provide the trusted certificates in a more
  publicly accessible keystore if needed.</p>
</blockquote>
","146254","<keystore><encryption-asymmetric><truststore>","279","9","6","2017-07-26 12:00:35","318450","0","64","1350209","","2015-05-20 21:28:40","2008-11-25 18:38:22",""
"318441","Truststore and Keystore Definitions","<p>What's the difference between a keystore and a truststore?</p>
","<ol>
<li><p>First and major difference between trustStore and keyStore is that trustStore is used by TrustManager to determine whether remote connection should be trusted, keyStore is used from KeyManager deciding which authentication credentials should be sent to the remote host for authentication during SSL handshake.</p></li>
<li><p>Another difference is that keyStore theoretically contains private keys required only if you are running a Server in SSL connection or you have enabled client authentication on server side and on the other hand trustStore stores public key or certificates from CA (Certificate Authorities) which are used to trust remote party or SSL connection. </p>

<p>In fact you can store in the same file both private and public keys,
given that the the tool to manage those file is the same (keytool),
so <em>you could</em> use a single file for both the purposes, but you
probably <em>should not</em>.</p></li>
<li><p>At least on my Mac OSX the default keyStore is <code>${user.home}/.keystore</code>, and the default trustStore is <code>/System/Library/Java/Support/CoreDeploy.bundle/Contents/Home/lib/security/cacerts</code>. </p>

<p>If you want to override them you should add the JVM parameters
<code>-Djavax.net.ssl.keyStore /path/to/keyStore</code> or
<code>-Djavax.net.ssl.trustStore /path/to/trustStore</code>. You might also
need to set the keyStore password in case of
<code>java.security.UnrecoverableKeyException: Password must not be
null</code>, using the parameter
<code>-Djavax.net.ssl.trustStorePassword=password</code> or <code>-Djavax.net.ssl.trustStorePassword=password</code></p></li>
</ol>

<p><em>Main Source:</em> </p>

<blockquote>
  <p><a href=""http://javarevisited.blogspot.co.uk/2012/09/difference-between-truststore-vs-keyStore-Java-SSL.html"" rel=""nofollow"">http://javarevisited.blogspot.co.uk/2012/09/difference-between-truststore-vs-keyStore-Java-SSL.html</a></p>
</blockquote>
","146254","<keystore><encryption-asymmetric><truststore>","279","3","6","2017-07-26 12:00:35","318450","0","64","1350209","","2015-05-20 21:28:40","2008-11-25 18:38:22",""
"4078902","Cracking short RSA keys","<p>Given the following RSA keys, how does one go about determining what the values of <em>p</em> and <em>q</em> are?</p>

<pre><code>Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)
</code></pre>
","<p><a href=""http://www.wolframalpha.com/input/?i=factor%2810142789312725007%29"" rel=""noreferrer"">Wolframalpha</a> tells me that the factors are 100711409 and 100711423</p>

<p>I just wrote a naive Python script to bruteforce it.
As amdfan pointed out, starting from the top is a better approach:</p>

<pre><code>p = 10142789312725007
for i in xrange(int(p**0.5+2), 3, -2):
    if p%i == 0:
        print i
        print p/i
        break
</code></pre>

<p>This could be heavily improved, but it still works without a problem. You could improve it by just testing primfactors, but for small values like yours this should be enough.</p>
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","10","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","<p>Given the following RSA keys, how does one go about determining what the values of <em>p</em> and <em>q</em> are?</p>

<pre><code>Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)
</code></pre>
","<p>I suggest you read about the <a href=""http://blogs.msdn.com/b/devdev/archive/2006/06/19/637332.aspx"" rel=""nofollow"">Quadratic Sieve</a>. If you implement one yourself, this is surely worth the credit. If you understand the principles, you already gained something.</p>
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","1","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","<p>Given the following RSA keys, how does one go about determining what the values of <em>p</em> and <em>q</em> are?</p>

<pre><code>Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)
</code></pre>
","<p>The definition of RSA tells you that the modulus <code>n = pq</code>. You know <code>n</code> so you just need to find two numbers <code>p</code> and <code>q</code> that multiply to produce <code>n</code>. You know that <code>p</code> and <code>q</code> are prime, so this is the prime factorisation problem.</p>

<p>You can solve this by brute force for relatively small numbers but the overall security of RSA depends on the fact that this problem is intractable in general.</p>
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","4","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","<p>Given the following RSA keys, how does one go about determining what the values of <em>p</em> and <em>q</em> are?</p>

<pre><code>Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)
</code></pre>
","<p>Here's a relatively simple way to look at it (and one that is doable by hand). If you were to factor the number completely, then the highest factor you would need to consider is sqrt(N):</p>

<pre><code>sqrt(10142789312725007) = 100711415.9999997567
</code></pre>

<p>The first prime below this is 100711409, just 6 below the sqrt(N). </p>

<pre><code>10142789312725007 / 100711409 = 100711423 
</code></pre>

<p>therefore these are two factors of N. Your professor made it pretty easy - the trick is to recognize that no one would choose a <em>small</em> p or q so starting your check from the bottom (as in the python script someone posted) is a bad idea. If it's going to be practical by hand, the large p and q must lie near sqrt(N).</p>
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","15","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","<p>Given the following RSA keys, how does one go about determining what the values of <em>p</em> and <em>q</em> are?</p>

<pre><code>Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)
</code></pre>
","<p>You need to factorize the modulus, that's the first parameter of the public key, 10142789312725007. Brute force will do (check every odd number from 3 to sqrt(n) if it's a factor), although more sophisticated/fast algorithms exist.</p>

<p>Since the number is too big to fit into a conventional integer (even 64-bit), you might want a numeric library that supports arbitrary-lenth integers. For C, there's GMP and MPIR (more Windows-friendly). For PHP, there's Bignum. Python comes with a built-in one - the built-in integer datatype is already arbitrary-length.</p>
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","0","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","<p>Given the following RSA keys, how does one go about determining what the values of <em>p</em> and <em>q</em> are?</p>

<pre><code>Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)
</code></pre>
","<p>Your teacher gave you: </p>

<blockquote>
  <p>Public Key: (10142789312725007, 5)</p>
</blockquote>

<p>which means</p>

<pre><code>n = 10142789312725007
e = 5 
</code></pre>

<p>where <strong>n</strong> is the modulus and <strong>e</strong> is the public exponent.</p>

<p>In addition, you're given</p>

<blockquote>
  <p>Private Key: (10142789312725007, 8114231289041741)</p>
</blockquote>

<p>meaning that</p>

<pre><code> d = 8114231289041741
</code></pre>

<p>where <strong>d</strong> is the decryption exponent that should remain secret. </p>

<p>You can ""break"" RSA by knowing how to factor ""n"" into its ""p"" and ""q"" prime factors:</p>

<pre><code>n = p * q
</code></pre>

<p>The easiest way is probably to check all odd numbers starting just below the square root of n:</p>

<pre><code>Floor[Sqrt[10142789312725007]] = 100711415
</code></pre>

<p>You would get the first factor in 4 tries:</p>

<pre><code>10142789312725007 mod 100711415 = 100711367
10142789312725007 mod 100711413 = 100711373
10142789312725007 mod 100711411 = 100711387
10142789312725007 mod 100711409 = 0 &lt;-- Winner since it evenly divides n
</code></pre>

<p>So we have</p>

<pre><code> p = 100711409
</code></pre>

<p>Now,</p>

<pre><code> q = n / p 
   = 10142789312725007 / 100711409
   = 100711423
</code></pre>

<p>Why is this important? It's because <strong>d</strong> is a special number such that </p>

<pre><code>d = e^-1 mod phi(n)
  = e^-1 mod (p-1)*(q-1)
</code></pre>

<p>We can verify this</p>

<pre><code>d * e = 40571156445208705 = 1 mod 10142789111302176
</code></pre>

<p>This is important because if you have a plaintext message <strong>m</strong> then the ciphertext is</p>

<pre><code>c = m^e mod n
</code></pre>

<p>and you decrypt it by</p>

<pre><code>m = c^d = (m^e)^d = (m^(e*d)) = (m^(e*e^-1)) = m^1 (mod n)
</code></pre>

<p>For example, I can ""encrypt"" the message 123456789 using your teacher's public key:</p>

<pre><code>m = 123456789
</code></pre>

<p>This will give me the following ciphertext:</p>

<pre><code>c = m^e mod n 
  = 123456789^5 mod 10142789312725007
  = 7487844069764171
</code></pre>

<p>(Note that ""e"" should be much larger in practice because for small values of ""m"" you don't even exceed n)</p>

<p>Anyways, now we have ""c"" and can reverse it with ""d""</p>

<pre><code>m = c^d mod n
  = 7487844069764171^8114231289041741 mod 10142789312725007
  = 123456789
</code></pre>

<p>Obviously, you can't compute ""7487844069764171^8114231289041741"" directly because it has 128,808,202,574,088,302 digits, so you must use the <a href=""http://en.wikipedia.org/wiki/Modular_exponentiation"" rel=""noreferrer"">modular exponentiation</a> trick.</p>

<p>In the ""Real World"", <strong>n</strong> is obviously much larger. If you'd like to see a real example of how HTTPS uses RSA under the covers with a 617-digit <strong>n</strong> and an <strong>e</strong> of 65537, see my blog post ""<a href=""http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html"" rel=""noreferrer"">The First Few Milliseconds of an HTTPS Connection</a>.""</p>
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","131","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","<p>Given the following RSA keys, how does one go about determining what the values of <em>p</em> and <em>q</em> are?</p>

<pre><code>Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)
</code></pre>
","<p>There are various fast algorithms to solve the problem of factoring <code>n</code> given <code>n</code>, <code>e</code>, and <code>d</code>. You can find a good description of one such algorithm in the Handbook of Applied Cryptography, <a href=""http://www.cacr.math.uwaterloo.ca/hac/about/chap8.pdf"" rel=""nofollow noreferrer"">Chapter 8</a>, section 8.2.2. You can find these chapters online for free download <a href=""http://www.cacr.math.uwaterloo.ca/hac/"" rel=""nofollow noreferrer"">here</a>. The algorithm is essentially a careful elaboration of <a href=""https://stackoverflow.com/a/4474565/238704"">Henno Brandsma's answer</a> to this very question.</p>

<h2>UPDATE Sep 25, 2019:</h2>

<p>In the <a href=""https://stackoverflow.com/questions/4078902/cracking-short-rsa-keys/4083501#comment84706047_4083501"">comment below</a>, user <a href=""https://stackoverflow.com/users/4681187/imperishable-night"">Imperishable Night</a> suggests an alternative method which should be at least conceptually easier to understand.</p>

<p>He notes that usually <code>e</code> is small. In fact <code>e</code> is almost always 65537. In the case that <code>e</code> is small you can develop a quadratic equation in the unknown prime <code>p</code> and thus easily solve for it using e.g. <a href=""https://en.wikipedia.org/wiki/Quadratic_formula"" rel=""nofollow noreferrer"">the quadratic formula</a>. To proceed, lets set x=p and solve for <code>x</code>, just to stick with convention. We know that <code>ed = 1 mod phi(n)</code>, or equivalently 
<code>ed - 1 = k * (p-1)*(q-1)</code>. Now setting <code>x=p</code>, and therefore <code>n/x=q</code>, multiplying both sides by <code>x</code> and rearranging terms we have<br>
k*x<sup>2</sup> + (d*e - k*n - k - 1)*x + k*n = 0.<br>
 Now we have an equation
of the form ax<sup>2</sup> + bx + c = 0 and we can solve for x using the quadratic formula. So we can try values of <code>k</code> in a small range around <code>e</code> and there should be only one integer solution to the quadratic, the solution for the correct k. </p>

<p>Notes:</p>

<ol>
<li>Everything must be an integer, thus the discriminant must be a perfect square or we can discard k and try the next one. Also, the numerator must be divisible by <code>2*k</code>.</li>
<li>Sometimes the Carmichael lambda function is used in place of the Euler phi function. This complicates things just a little bit because we must now also guess the <code>g = gcd(p-1, q-1)</code>. <code>g</code> is always even, is often 2, and is otherwise almost always a small multiple of 2.</li>
</ol>

<h2>UPDATE Sep 26, 2019:</h2>

<p>Finding <code>k</code> is actually very easy when <code>e</code> is small. By taking the equation
<code>ed - 1 = k * (p-1)*(q-1)</code> and dividing both sides by <code>n</code> it is fairly easy to see that <code>floor((ed-1)/n) + 1 == k</code>. Now using equations
31 and 32 of <a href=""http://www.reverse-engineering.info/Cryptography/ShortSecretExponents.pdf"" rel=""nofollow noreferrer"">M.J. Wiener's ""Cryptanalysis of Short RSA Secret Exponents""</a> one can directly recover <code>p</code> and <code>q</code>.</p>
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","12","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","<p>Given the following RSA keys, how does one go about determining what the values of <em>p</em> and <em>q</em> are?</p>

<pre><code>Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)
</code></pre>
","<p>Here is a Java implementation of the fast factoring method from the Handbook of Applied Cryptography <a href=""http://www.cacr.math.uwaterloo.ca/hac/about/chap8.pdf"" rel=""nofollow"">chapter 8</a> section 8.2.2 (thanks to GregS for finding it):</p>

<pre><code>/**
 * Computes the factors of n given d and e.
 * Given are the public RSA key (n,d)
 * and the corresponding private RSA key (n,e).
 */
public class ComputeRsaFactors
{
    /**
     * Executes the program.
     *
     * @param args  The command line arguments.
     */
    public static void main(String[] args)
    {
        final BigInteger n = BigInteger.valueOf(10142789312725007L);
        final BigInteger d = BigInteger.valueOf(5);
        final BigInteger e = BigInteger.valueOf(8114231289041741L);

        final long t0 = System.currentTimeMillis();

        final BigInteger kTheta = d.multiply(e).subtract(BigInteger.ONE);
        final int exponentOfTwo = kTheta.getLowestSetBit();

        final Random random = new Random();
        BigInteger factor = BigInteger.ONE;
        do
        {
            final BigInteger a = nextA(n, random);

            for (int i = 1; i &lt;= exponentOfTwo; i++)
            {
                final BigInteger exponent = kTheta.shiftRight(i);
                final BigInteger power = a.modPow(exponent, n);

                final BigInteger gcd = n.gcd(power.subtract(BigInteger.ONE));
                if (!factor.equals(BigInteger.ONE))
                {
                    break;
                }
            }
        }
        while (factor.equals(BigInteger.ONE));

        final long t1 = System.currentTimeMillis();

        System.out.printf(""%s %s (%dms)\n"", factor, n.divide(factor), t1 - t0);
    }


    private static BigInteger nextA(final BigInteger n, final Random random)
    {
        BigInteger r;
        do
        {
            r = new BigInteger(n.bitLength(), random);
        }
        while (r.signum() == 0 || r.compareTo(n) &gt;= 0);
        return r;
    }
}
</code></pre>

<p>A typical output is</p>

<pre><code>100711423 100711409 (3ms)
</code></pre>
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","4","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","<p>Given the following RSA keys, how does one go about determining what the values of <em>p</em> and <em>q</em> are?</p>

<pre><code>Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)
</code></pre>
","<p>These two papers could possibly come in useful</p>

<ul>
<li><a href=""http://arxiv.org/PS_cache/arxiv/pdf/0811/0811.0063v1.pdf"" rel=""nofollow"">Andrej Dujella - A Variant of Wiener's Attack on RSA</a></li>
<li><a href=""http://arxiv.org/PS_cache/cs/pdf/0402/0402052v1.pdf"" rel=""nofollow"">Andrej Dujella - Continued Fractions and RSA with small secret exponent</a></li>
</ul>

<p>Came across them when I was doing some basic research on continued fractions.</p>
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","3","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","<p>Given the following RSA keys, how does one go about determining what the values of <em>p</em> and <em>q</em> are?</p>

<pre><code>Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)
</code></pre>
","<p>The algorithm to do this is (and this will work for any example, not only this small one that can be factored easily by any computer):</p>

<p><code>ed - 1</code> is a multiple of <code>phi(n) = (p-1)(q-1)</code>, so is at least a multiple of 4.<br>
<code>ed - 1</code> can be computed as 40571156445208704 which equals <code>2^7 * 316962159728193</code>,
and we call <code>s=7</code> and <code>t = 316962159728193</code>.
(in general: any even number is a power of 2 times an odd number).
Now pick a in <code>[2,n-1)</code> at random, and compute (by successive squaring modulo <code>n</code>) the sequence 
<code>a^t (mod n), a^(2t) (mod n), a^(4t) (mod n)..</code> until at most <code>a^((2^7)*t) (mod n)</code>, 
where the last one is guaranteed to be 1, by the construction of <code>e</code> and <code>d</code>.</p>

<p>We now look for the first 1 in that sequence. The one before it will either be <code>+1</code> or <code>-1</code>
    (a trivial root of 1, <code>mod n</code>) and we redo with a different a, or some number <code>x</code> which does not equal <code>+1</code> or <code>-1</code> <code>mod n</code>.
    In the latter case <code>gcd(x-1, n)</code> is a non-trivial divisor of <code>n</code>, and so <code>p</code> or <code>q</code>, and we are done. One can show that a random a will work with probability about 0.5, so we need a few tries, but not very many in general.</p>
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","3","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","<p>Given the following RSA keys, how does one go about determining what the values of <em>p</em> and <em>q</em> are?</p>

<pre><code>Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)
</code></pre>
","<p>Sorry for the necromancy, but a friend asked me about this, and after pointing him here, I realized that I didn't really like any of the answers.  After factoring the modulus and getting the primes (p and q), you need to find the totient, which is <code>(p-1)*(q-1)</code>.</p>

<p>Now, to find the private exponent, you find the inverse of the public exponent mod the totient.</p>

<pre><code>public_exponent * private_exponent = 1 mod totient
</code></pre>

<p>And now you have your private key, that easy.  All of this except for the factorization can be done almost instantly for huge integers.</p>

<p>I wrote some code:</p>

<pre><code>// tinyrsa.c
//
// apt-get install libgmp-dev
// yum install gmp-devel
//
// gcc tinyrsa.c -o tinyrsa -lm -lgmp

#include&lt;stdio.h&gt;
#include&lt;gmp.h&gt;

int main()
{
  // declare some multi-precision integers
  mpz_t pub_exp, priv_exp, modulus, totient, fac_p, fac_q, next_prime;

  mpz_init_set_str(pub_exp,""5"",10);
  mpz_init_set_str(modulus,""10142789312725007"",10);

  mpz_init(priv_exp);
  mpz_init(totient);
  mpz_init(fac_p);
  mpz_init(fac_q);

  // now we factor the modulus (the hard part)
  mpz_init(next_prime);
  mpz_sqrt(next_prime,modulus);
  unsigned long removed=0;
  while(!removed)
  {
    mpz_nextprime(next_prime,next_prime);
    removed=mpz_remove(fac_p,modulus,next_prime);
  }

  mpz_remove(fac_q,modulus,fac_p);
  // we now have p and q

  // the totient is (p-1)*(q-1)  
  mpz_t psub, qsub;
  mpz_init(psub);
  mpz_init(qsub);

  mpz_sub_ui(psub,fac_p,1);
  mpz_sub_ui(qsub,fac_q,1);
  mpz_mul(totient,psub,qsub);

  // inverse of the public key, mod the totient..
  mpz_invert(priv_exp,pub_exp,totient);

  gmp_printf(""private exponent:\n%Zd\n"",priv_exp);

}
</code></pre>

<p>The factorization algorithm I used is stupid, but concise, so grain of salt there.  In this particular example the code runs almost instantly, but that is largely because the instructor in question provided an example that uses two primes in a row, which isn't really realistic for RSA.</p>

<p>If you wanted to cut out my stupid iterative search, you could put in some real factorization algorithm, and factor keys likely up to around 256 bits in a reasonable amount of time.</p>
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","1","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"4078902","Cracking short RSA keys","<p>Given the following RSA keys, how does one go about determining what the values of <em>p</em> and <em>q</em> are?</p>

<pre><code>Public Key: (10142789312725007, 5)
Private Key: (10142789312725007, 8114231289041741)
</code></pre>
","<p>There is a lot of bad speculation about factorization of large semi primes which go into brute force or sieving neither of which is required to factorise the semi prime. 64 bit takes 1 - 2 seconds on my pc, and 256 bit generally less than 2 days </p>
","79821","<math><rsa><encryption-asymmetric><public-key-encryption>","51","-1","12","2019-09-26 13:45:33","4079137","7","41","717442","Roger Pate","2014-12-18 18:42:33","2010-11-02 14:58:06",""
"597188","encryption/decryption with multiple keys","<p>Is it possible to encrypt data, such that it can be decrypted with several different keys?</p>

<p>Example:</p>

<blockquote>
  <p>I've encrypted data with key1, but I want to be able to decrypt with keys 2, 3, and 4.</p>
</blockquote>

<p>Is this possible?</p>
","<p>Yes, it's possible.  Google ""multiparty encryption"" for a start.</p>

<p>AFAIK, there are no drop 'em in and use 'em packages for it though.</p>

<p>-- MarkusQ</p>

<p>P.S. For a sketch of how it could be done, consider this.  The encrypted message consists of:</p>

<ul>
<li>the payload, encrypted with a one-time pad</li>
<li>the one time pad, encrypted with key1</li>
<li>the one time pad, encrypted with key2</li>
<li>...</li>
<li>the one time pad, encrypted with keyN</li>
</ul>

<p>The recipient who hold key i just decrypts their copy of the pad with their key, and then decrypts the payload.</p>

<p>However, this is just a proof that it could be done and would <em>suck</em> as an actual implementation.  If at all possible, you should avoid rolling your own encryption.  If you don't understand why, you should <em>definitely</em> avoid rolling your own encryption.</p>

<p>-----Edit ------------</p>

<p>If I'm wrong and the Gnu tools do that, use them.  But I can't seem to find any information on how to do it.</p>
","73003","<encryption><gnupg><encryption-asymmetric>","100","4","5","2019-08-15 03:30:55","597200","0","42","5780109","","2019-08-15 03:30:55","2009-02-28 00:28:23",""
"597188","encryption/decryption with multiple keys","<p>Is it possible to encrypt data, such that it can be decrypted with several different keys?</p>

<p>Example:</p>

<blockquote>
  <p>I've encrypted data with key1, but I want to be able to decrypt with keys 2, 3, and 4.</p>
</blockquote>

<p>Is this possible?</p>
","<p><a href=""http://www.gnupg.org/"" rel=""noreferrer"">GnuPG</a> does multi-key encryption in standard.</p>

<p>The following command will encrypt <code>doc.txt</code> using the public key for Alice and the public key for Bob. Alice can decrypt using her private key. Bob can also decrypt using his private key.</p>

<pre><code>gpg --encrypt --recipient alice@example.com \
    --recipient bob@example.com doc.txt
</code></pre>

<p>This feature is detailed in the user guide section entitled ""<a href=""http://www.gnupg.org/gph/en/manual.html#AEN111"" rel=""noreferrer"">Encrypting and decrypting documents</a>""</p>
","73003","<encryption><gnupg><encryption-asymmetric>","100","150","5","2019-08-15 03:30:55","597200","0","42","5780109","","2019-08-15 03:30:55","2009-02-28 00:28:23",""
"597188","encryption/decryption with multiple keys","<p>Is it possible to encrypt data, such that it can be decrypted with several different keys?</p>

<p>Example:</p>

<blockquote>
  <p>I've encrypted data with key1, but I want to be able to decrypt with keys 2, 3, and 4.</p>
</blockquote>

<p>Is this possible?</p>
","<p>Multiple (more than two) key RSA is <em>maybe</em> like this - well i'm not a mathematician, so this algorithm is not necessarily secure, i just want to give an idea with it.</p>

<p>m=p*q*r; p,q,r are big prime numbers</p>

<p>fi(m)=(p-1)<em>(q-1)</em>(r-1)</p>

<p>d==(e1*e2*e3*...*ei)^(-1) (mod fi(m)); e1...ei are arbitrary numbers, d is calculated to fulfill the equation</p>

<p>y1==x^e1 (mod m)</p>

<p>y2==y1^e2 (mod m)</p>

<p>y3==y2^e3 (mod m)</p>

<p>...</p>

<p>x==yi^d (mod m)</p>

<p>This algorithm could be used for example to increase the speed of The Onion Router.</p>
","73003","<encryption><gnupg><encryption-asymmetric>","100","-15","5","2019-08-15 03:30:55","597200","0","42","5780109","","2019-08-15 03:30:55","2009-02-28 00:28:23",""
"597188","encryption/decryption with multiple keys","<p>Is it possible to encrypt data, such that it can be decrypted with several different keys?</p>

<p>Example:</p>

<blockquote>
  <p>I've encrypted data with key1, but I want to be able to decrypt with keys 2, 3, and 4.</p>
</blockquote>

<p>Is this possible?</p>
","<h2>Yes it's possible</h2>

<p>Yes encryption for multiple recipients is possible. Also it seems logical when you think that you might want to be able to read what you've sent to someone and to do so <em>you</em> need to be in the recipients list.</p>

<h3>Command line</h3>

<p>Here is how to do it through <code>gpg</code> command line (as described in <a href=""https://stackoverflow.com/a/597200/802365"">David Segonds' answer</a>):</p>

<pre><code>gpg --encrypt \
  --recipient alice@example.com \
  --recipient bob@example.com \
clear-message.txt
</code></pre>

<h3>GUI client</h3>

<p>Your GUI must provide a way to encrypt for several people</p>

<h2>Mechanism</h2>

<p>There is a question on <em>Information Security</em>, <a href=""https://security.stackexchange.com/questions/8245/gpg-file-size-with-multiple-recipients""><em>GPG File size with multiple recipients?</em>, that explain the encryption mechanism</a>:</p>

<blockquote>
  <p>GPG encrypts the file once with a symmetric key, then places a header
  identifying the target keypair and an encrypted version of the
  symmetric key. </p>
  
  <p>[...] When encrypted to multiple recipients, this
  header is placed multiple times providing a <strong>uniquely encrypted version
  of the same symmetric key for each recipient</strong>.</p>
</blockquote>
","73003","<encryption><gnupg><encryption-asymmetric>","100","51","5","2019-08-15 03:30:55","597200","0","42","5780109","","2019-08-15 03:30:55","2009-02-28 00:28:23",""
"597188","encryption/decryption with multiple keys","<p>Is it possible to encrypt data, such that it can be decrypted with several different keys?</p>

<p>Example:</p>

<blockquote>
  <p>I've encrypted data with key1, but I want to be able to decrypt with keys 2, 3, and 4.</p>
</blockquote>

<p>Is this possible?</p>
","<p><a href=""https://gnupg.org"">GnuPG</a> and PGP clients in general usually encrypt the actual data with a symmetric key called a ""session key"".  The session key is then encrypted with each ""recipient key"" (i.e. the ones you specify with -r/--recipient).  This is sometimes referred to as a <a href=""https://www.gnupg.org/gph/en/manual/x209.html"">hybrid cipher</a>.  Right now, I believe GnuPG by default uses an 256 bit session keys and AES to encrypt the plaintext data to that AES-256 session key, and your recipient keys are your RSA/DSA/ECDSA/etc. assymetric key in this case.</p>

<p>One reason for doing it this way is that symmetric cryptographic algorithms like AES are generally a lot faster than asymmetric ones like RSA.  GnuPG thus only has to encrypt ~256 bits (the session key) with RSA, and can use AES to encrypt the data (as large as you want it to be!) with that session key.  Intel machines even have a built in instruction, <a href=""http://en.wikipedia.org/wiki/AES_instruction_set"">AES-NI</a>, to do some steps of the algorithm in hardware, which makes GnuPG extra snappy at encrypting/decrypting data.</p>

<p>Another reason for doing it this way is that it allows PGP-encrypted documents to be encrypted to multiple parties without having to double the size of the document.  Notice that when you specify multiple recipients for an encrypted document (e.g. <code>gpg -ea -r Alice -r Bob -o ciphertext.asc</code>), the encrypted document that gets stored (ciphertext.asc) is not 2x as large as if you had just encrypted it to Alice.</p>

<p>See also the <code>--show-session-key</code> parameter in the <a href=""https://www.gnupg.org/documentation/manpage.html"">gpg man page</a> to be able to decrypt just the session key, for example to allow a third party to decrypt a document that is encrypted to you without having to transfer to them your private key or the plaintext data.</p>
","73003","<encryption><gnupg><encryption-asymmetric>","100","28","5","2019-08-15 03:30:55","597200","0","42","5780109","","2019-08-15 03:30:55","2009-02-28 00:28:23",""
"11506891","How to load the RSA public key from file in C#","<p>I need to load the following RSA public key from a file for use with the RSACryptoServiceProvider class. How can I do this?</p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN PUBLIC KEY-----
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/syEKqEkMtQL0+d
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX+izR
KbGMRtur2TYklnyVkjeeHfAggo8vWQmWesnOG55vQYHbOOFoJbk0EkwEr5R/PbKm
byXPPN8zwnS5/XXXXXXXXXXXX
-----END PUBLIC KEY-----
</code></pre>

<hr>

<p>This code works with my pub key: <a href=""http://www.jensign.com/opensslkey/"" rel=""noreferrer"">http://www.jensign.com/opensslkey/</a></p>

<p>Here is the code I am using</p>

<pre><code>        static string RSA(string input)
        {
            RSACryptoServiceProvider rsa = DecodeX509PublicKey(Convert.FromBase64String(GetKey()));

            return (Convert.ToBase64String(rsa.Encrypt(Encoding.ASCII.GetBytes(input), false)));
        }

        static string GetKey()
        {
            return File.ReadAllText(""master.pub"").Replace(""-----BEGIN PUBLIC KEY-----"", """").Replace(""-----END PUBLIC KEY-----"", """");
            //.Replace(""\n"", """");
        }

        private static bool CompareBytearrays(byte[] a, byte[] b)
        {
            if (a.Length != b.Length)
                return false;
            int i = 0;
            foreach (byte c in a)
            {
                if (c != b[i])
                    return false;
                i++;
            }
            return true;
        }

        public static RSACryptoServiceProvider DecodeX509PublicKey(byte[] x509key)
        {
            // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = ""1.2.840.113549.1.1.1""
            byte[] SeqOID = { 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00 };
            byte[] seq = new byte[15];
            // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------
            MemoryStream mem = new MemoryStream(x509key);
            BinaryReader binr = new BinaryReader(mem);    //wrap Memory Stream with BinaryReader for easy reading
            byte bt = 0;
            ushort twobytes = 0;

            try
            {

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8230)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                seq = binr.ReadBytes(15);       //read the Sequence OID
                if (!CompareBytearrays(seq, SeqOID))    //make sure Sequence for OID is correct
                    return null;

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8103) //data read as little endian order (actual data order for Bit String is 03 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8203)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                bt = binr.ReadByte();
                if (bt != 0x00)     //expect null byte next
                    return null;

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8230)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                twobytes = binr.ReadUInt16();
                byte lowbyte = 0x00;
                byte highbyte = 0x00;

                if (twobytes == 0x8102) //data read as little endian order (actual data order for Integer is 02 81)
                    lowbyte = binr.ReadByte();  // read next bytes which is bytes in modulus
                else if (twobytes == 0x8202)
                {
                    highbyte = binr.ReadByte(); //advance 2 bytes
                    lowbyte = binr.ReadByte();
                }
                else
                    return null;
                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   //reverse byte order since asn.1 key uses big endian order
                int modsize = BitConverter.ToInt32(modint, 0);

                byte firstbyte = binr.ReadByte();
                binr.BaseStream.Seek(-1, SeekOrigin.Current);

                if (firstbyte == 0x00)
                {   //if first byte (highest order) of modulus is zero, don't include it
                    binr.ReadByte();    //skip this null byte
                    modsize -= 1;   //reduce modulus buffer size by 1
                }

                byte[] modulus = binr.ReadBytes(modsize);   //read the modulus bytes

                if (binr.ReadByte() != 0x02)            //expect an Integer for the exponent data
                    return null;
                int expbytes = (int)binr.ReadByte();        // should only need one byte for actual exponent data (for all useful values)
                byte[] exponent = binr.ReadBytes(expbytes);

                // ------- create RSACryptoServiceProvider instance and initialize with public key -----
                RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
                RSAParameters RSAKeyInfo = new RSAParameters();
                RSAKeyInfo.Modulus = modulus;
                RSAKeyInfo.Exponent = exponent;
                RSA.ImportParameters(RSAKeyInfo);
                return RSA;
            }
            catch (Exception)
            {
                return null;
            }

            finally { binr.Close(); }

        }
</code></pre>

<p>Just call the 'RSA' method with the text you want to encrypt and you're done.</p>
","<p>If you're talking about an X509 certificate:
</p>

<pre><code>FileStream fs = new FileStream(""your_cert_file.crt"", FileMode.Open);
byte[] certBytes = new byte[fs.Length];
fs.Read(certBytes, 0, (Int32)fs.Length);
fs.Close();
System.Security.Cryptography.X509Certificates.X509Certificate x509cert = 
    new X509Certificate(certBytes);
Console.WriteLine(x509cert.GetPublicKey());
Console.WriteLine(x509cert.GetPublicKeyString());
</code></pre>

<p><strong>EDITED after the comment of @hkproj done in ""7/16/2012 15:04:58 Z"":</strong></p>

<p>Looking around here I found ""<a href=""https://stackoverflow.com/a/11367152/1350308"">Reading PEM RSA Public Key Only using Bouncy Castle</a>"".
I guess what you want is this:
</p>

<pre><code>using (StreamReader reader = File.OpenText(@""c:\RSA.txt""))
{
    Org.BouncyCastle.OpenSsl.PemReader pr = 
        new Org.BouncyCastle.OpenSsl.PemReader(reader);
    Org.BouncyCastle.Utilities.IO.Pem.PemObject po = pr.ReadPemObject();

    Console.WriteLine(""PemObject, Type: "" + po.Type);
    Console.WriteLine(""PemObject, Length: "" + po.Content.Length);
}
</code></pre>

<p>However, with your file I get an error: <code>System.IO.IOException : base64 data appears to be truncated</code>.</p>

<p>So changing your file to something like:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/syEKqEkMtQL0+d
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX+izR
KbGMRtur2TYklnyVkjeeHfAggo8vWQmWesnOG55vQYHbOOFoJbk0EkwEr5R/PbKm
byXPPN8zwnS5/XXXXXXXXXXXXZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
-----END PUBLIC KEY-----
</code></pre>

<p>The result is:</p>

<pre><code>PemObject, Type: PUBLIC KEY
PemObject, Length: 192
</code></pre>
","62218","<c#><rsa><encryption-asymmetric><public-key>","30","5","3","2019-08-23 09:39:17","","6","14","739636","","2012-07-16 15:53:43","2012-07-16 14:54:14",""
"11506891","How to load the RSA public key from file in C#","<p>I need to load the following RSA public key from a file for use with the RSACryptoServiceProvider class. How can I do this?</p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN PUBLIC KEY-----
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/syEKqEkMtQL0+d
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX+izR
KbGMRtur2TYklnyVkjeeHfAggo8vWQmWesnOG55vQYHbOOFoJbk0EkwEr5R/PbKm
byXPPN8zwnS5/XXXXXXXXXXXX
-----END PUBLIC KEY-----
</code></pre>

<hr>

<p>This code works with my pub key: <a href=""http://www.jensign.com/opensslkey/"" rel=""noreferrer"">http://www.jensign.com/opensslkey/</a></p>

<p>Here is the code I am using</p>

<pre><code>        static string RSA(string input)
        {
            RSACryptoServiceProvider rsa = DecodeX509PublicKey(Convert.FromBase64String(GetKey()));

            return (Convert.ToBase64String(rsa.Encrypt(Encoding.ASCII.GetBytes(input), false)));
        }

        static string GetKey()
        {
            return File.ReadAllText(""master.pub"").Replace(""-----BEGIN PUBLIC KEY-----"", """").Replace(""-----END PUBLIC KEY-----"", """");
            //.Replace(""\n"", """");
        }

        private static bool CompareBytearrays(byte[] a, byte[] b)
        {
            if (a.Length != b.Length)
                return false;
            int i = 0;
            foreach (byte c in a)
            {
                if (c != b[i])
                    return false;
                i++;
            }
            return true;
        }

        public static RSACryptoServiceProvider DecodeX509PublicKey(byte[] x509key)
        {
            // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = ""1.2.840.113549.1.1.1""
            byte[] SeqOID = { 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00 };
            byte[] seq = new byte[15];
            // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------
            MemoryStream mem = new MemoryStream(x509key);
            BinaryReader binr = new BinaryReader(mem);    //wrap Memory Stream with BinaryReader for easy reading
            byte bt = 0;
            ushort twobytes = 0;

            try
            {

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8230)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                seq = binr.ReadBytes(15);       //read the Sequence OID
                if (!CompareBytearrays(seq, SeqOID))    //make sure Sequence for OID is correct
                    return null;

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8103) //data read as little endian order (actual data order for Bit String is 03 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8203)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                bt = binr.ReadByte();
                if (bt != 0x00)     //expect null byte next
                    return null;

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8230)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                twobytes = binr.ReadUInt16();
                byte lowbyte = 0x00;
                byte highbyte = 0x00;

                if (twobytes == 0x8102) //data read as little endian order (actual data order for Integer is 02 81)
                    lowbyte = binr.ReadByte();  // read next bytes which is bytes in modulus
                else if (twobytes == 0x8202)
                {
                    highbyte = binr.ReadByte(); //advance 2 bytes
                    lowbyte = binr.ReadByte();
                }
                else
                    return null;
                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   //reverse byte order since asn.1 key uses big endian order
                int modsize = BitConverter.ToInt32(modint, 0);

                byte firstbyte = binr.ReadByte();
                binr.BaseStream.Seek(-1, SeekOrigin.Current);

                if (firstbyte == 0x00)
                {   //if first byte (highest order) of modulus is zero, don't include it
                    binr.ReadByte();    //skip this null byte
                    modsize -= 1;   //reduce modulus buffer size by 1
                }

                byte[] modulus = binr.ReadBytes(modsize);   //read the modulus bytes

                if (binr.ReadByte() != 0x02)            //expect an Integer for the exponent data
                    return null;
                int expbytes = (int)binr.ReadByte();        // should only need one byte for actual exponent data (for all useful values)
                byte[] exponent = binr.ReadBytes(expbytes);

                // ------- create RSACryptoServiceProvider instance and initialize with public key -----
                RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
                RSAParameters RSAKeyInfo = new RSAParameters();
                RSAKeyInfo.Modulus = modulus;
                RSAKeyInfo.Exponent = exponent;
                RSA.ImportParameters(RSAKeyInfo);
                return RSA;
            }
            catch (Exception)
            {
                return null;
            }

            finally { binr.Close(); }

        }
</code></pre>

<p>Just call the 'RSA' method with the text you want to encrypt and you're done.</p>
","<p>Are you speaking about certificates stored in file?</p>

<p>If you have an object like:</p>

<pre><code>X509Certificate2 certificate;
</code></pre>

<p>you can use following code:</p>

<pre><code>RSACryptoServiceProvider rsaprovider =
                    (RSACryptoServiceProvider)certificate.PublicKey.Key;
</code></pre>

<p>and then use the class RSACryptoServiceProvider (see <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx</a>).</p>

<p>To load an X509Certificate2 use its constructor (see <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.x509certificate2.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.x509certificate2.aspx</a>).</p>

<p>This program works fine for me:</p>

<pre><code>    static void Main(string[] args)
    {
        try 
        {
            X509Certificate2 certificate = 
                new X509Certificate2(""&lt;PFX Certificate Path"", ""&lt;Certificate-Password&gt;"");
            RSACryptoServiceProvider rsaprovider = (RSACryptoServiceProvider)certificate.PublicKey.Key;
        }
        catch(Exception e)
        {

        }
    }
</code></pre>
","62218","<c#><rsa><encryption-asymmetric><public-key>","30","3","3","2019-08-23 09:39:17","","6","14","739636","","2012-07-16 15:53:43","2012-07-16 14:54:14",""
"11506891","How to load the RSA public key from file in C#","<p>I need to load the following RSA public key from a file for use with the RSACryptoServiceProvider class. How can I do this?</p>

<pre class=""lang-none prettyprint-override""><code>-----BEGIN PUBLIC KEY-----
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX/syEKqEkMtQL0+d
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX+izR
KbGMRtur2TYklnyVkjeeHfAggo8vWQmWesnOG55vQYHbOOFoJbk0EkwEr5R/PbKm
byXPPN8zwnS5/XXXXXXXXXXXX
-----END PUBLIC KEY-----
</code></pre>

<hr>

<p>This code works with my pub key: <a href=""http://www.jensign.com/opensslkey/"" rel=""noreferrer"">http://www.jensign.com/opensslkey/</a></p>

<p>Here is the code I am using</p>

<pre><code>        static string RSA(string input)
        {
            RSACryptoServiceProvider rsa = DecodeX509PublicKey(Convert.FromBase64String(GetKey()));

            return (Convert.ToBase64String(rsa.Encrypt(Encoding.ASCII.GetBytes(input), false)));
        }

        static string GetKey()
        {
            return File.ReadAllText(""master.pub"").Replace(""-----BEGIN PUBLIC KEY-----"", """").Replace(""-----END PUBLIC KEY-----"", """");
            //.Replace(""\n"", """");
        }

        private static bool CompareBytearrays(byte[] a, byte[] b)
        {
            if (a.Length != b.Length)
                return false;
            int i = 0;
            foreach (byte c in a)
            {
                if (c != b[i])
                    return false;
                i++;
            }
            return true;
        }

        public static RSACryptoServiceProvider DecodeX509PublicKey(byte[] x509key)
        {
            // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = ""1.2.840.113549.1.1.1""
            byte[] SeqOID = { 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00 };
            byte[] seq = new byte[15];
            // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------
            MemoryStream mem = new MemoryStream(x509key);
            BinaryReader binr = new BinaryReader(mem);    //wrap Memory Stream with BinaryReader for easy reading
            byte bt = 0;
            ushort twobytes = 0;

            try
            {

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8230)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                seq = binr.ReadBytes(15);       //read the Sequence OID
                if (!CompareBytearrays(seq, SeqOID))    //make sure Sequence for OID is correct
                    return null;

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8103) //data read as little endian order (actual data order for Bit String is 03 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8203)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                bt = binr.ReadByte();
                if (bt != 0x00)     //expect null byte next
                    return null;

                twobytes = binr.ReadUInt16();
                if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                    binr.ReadByte();    //advance 1 byte
                else if (twobytes == 0x8230)
                    binr.ReadInt16();   //advance 2 bytes
                else
                    return null;

                twobytes = binr.ReadUInt16();
                byte lowbyte = 0x00;
                byte highbyte = 0x00;

                if (twobytes == 0x8102) //data read as little endian order (actual data order for Integer is 02 81)
                    lowbyte = binr.ReadByte();  // read next bytes which is bytes in modulus
                else if (twobytes == 0x8202)
                {
                    highbyte = binr.ReadByte(); //advance 2 bytes
                    lowbyte = binr.ReadByte();
                }
                else
                    return null;
                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   //reverse byte order since asn.1 key uses big endian order
                int modsize = BitConverter.ToInt32(modint, 0);

                byte firstbyte = binr.ReadByte();
                binr.BaseStream.Seek(-1, SeekOrigin.Current);

                if (firstbyte == 0x00)
                {   //if first byte (highest order) of modulus is zero, don't include it
                    binr.ReadByte();    //skip this null byte
                    modsize -= 1;   //reduce modulus buffer size by 1
                }

                byte[] modulus = binr.ReadBytes(modsize);   //read the modulus bytes

                if (binr.ReadByte() != 0x02)            //expect an Integer for the exponent data
                    return null;
                int expbytes = (int)binr.ReadByte();        // should only need one byte for actual exponent data (for all useful values)
                byte[] exponent = binr.ReadBytes(expbytes);

                // ------- create RSACryptoServiceProvider instance and initialize with public key -----
                RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
                RSAParameters RSAKeyInfo = new RSAParameters();
                RSAKeyInfo.Modulus = modulus;
                RSAKeyInfo.Exponent = exponent;
                RSA.ImportParameters(RSAKeyInfo);
                return RSA;
            }
            catch (Exception)
            {
                return null;
            }

            finally { binr.Close(); }

        }
</code></pre>

<p>Just call the 'RSA' method with the text you want to encrypt and you're done.</p>
","<p>You can create an <code>RSACryptoServiceProvider</code> from a PEM file using the following class (<code>GetRSAProviderFromPemFile</code> method).</p>

<p><strong>Warning:</strong>
<strong>Don't just copy code from StackOverflow without verification! Especially not crypto code! This code has bugs (see comments). You may want to write and run tests before using this in production (if you really have no better option).</strong> I refuse to edit the code to fix it, as it would be just as unreliable as before without tests and an active maintainer.</p>

<p><strong>Source:</strong>
This code seems to be taken from <code>opensslkey</code> from <a href=""http://jensign.com/dotnet/opensslkey/index.html"" rel=""noreferrer"">this site</a>.
Copyright (c) 2000  JavaScience Consulting, Michel Gallant.
The original package was released under a BSD-like license, so it is probably OK to use it (but you may want to double-check). There is also a <a href=""https://www.nuget.org/packages/opensslkey"" rel=""noreferrer"">NuGet package</a> by the same author.</p>

<p>Here is the copy-pasted source code originally posted to this answer:</p>

<pre><code>RSACryptoServiceProvider provider = PemKeyUtils.GetRSAProviderFromPemFile(  @""public_key.pem"" );


public class PemKeyUtils
{
    const String pemprivheader = ""-----BEGIN RSA PRIVATE KEY-----"";
    const String pemprivfooter = ""-----END RSA PRIVATE KEY-----"";
    const String pempubheader = ""-----BEGIN PUBLIC KEY-----"";
    const String pempubfooter = ""-----END PUBLIC KEY-----"";
    const String pemp8header = ""-----BEGIN PRIVATE KEY-----"";
    const String pemp8footer = ""-----END PRIVATE KEY-----"";
    const String pemp8encheader = ""-----BEGIN ENCRYPTED PRIVATE KEY-----"";
    const String pemp8encfooter = ""-----END ENCRYPTED PRIVATE KEY-----"";

    static bool verbose = false;

    public static RSACryptoServiceProvider GetRSAProviderFromPemFile( String pemfile )
    {
        bool isPrivateKeyFile = true;
        string pemstr = File.ReadAllText( pemfile ).Trim();
        if (pemstr.StartsWith( pempubheader ) &amp;&amp; pemstr.EndsWith( pempubfooter ))
            isPrivateKeyFile = false;

        byte[] pemkey;
        if (isPrivateKeyFile)
            pemkey = DecodeOpenSSLPrivateKey( pemstr );
        else
            pemkey = DecodeOpenSSLPublicKey( pemstr );

        if (pemkey == null)
            return null;

        if (isPrivateKeyFile)
            return DecodeRSAPrivateKey( pemkey );
        else
            return DecodeX509PublicKey( pemkey );

    }



    //--------   Get the binary RSA PUBLIC key   --------
    static byte[] DecodeOpenSSLPublicKey( String instr )
    {
        const String pempubheader = ""-----BEGIN PUBLIC KEY-----"";
        const String pempubfooter = ""-----END PUBLIC KEY-----"";
        String pemstr = instr.Trim();
        byte[] binkey;
        if (!pemstr.StartsWith( pempubheader ) || !pemstr.EndsWith( pempubfooter ))
            return null;
        StringBuilder sb = new StringBuilder( pemstr );
        sb.Replace( pempubheader, """" );  //remove headers/footers, if present
        sb.Replace( pempubfooter, """" );

        String pubstr = sb.ToString().Trim();   //get string after removing leading/trailing whitespace

        try
        {
            binkey = Convert.FromBase64String( pubstr );
        }
        catch (System.FormatException)
        {       //if can't b64 decode, data is not valid
            return null;
        }
        return binkey;
    }

    static RSACryptoServiceProvider DecodeX509PublicKey(byte[] x509Key)
    {
        // encoded OID sequence for  PKCS #1 rsaEncryption szOID_RSA_RSA = ""1.2.840.113549.1.1.1""
        byte[] seqOid = { 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00 };
        // ---------  Set up stream to read the asn.1 encoded SubjectPublicKeyInfo blob  ------
        using (var mem = new MemoryStream(x509Key))
        {
            using (var binr = new BinaryReader(mem))    //wrap Memory Stream with BinaryReader for easy reading
            {
                try
                {
                    var twobytes = binr.ReadUInt16();
                    switch (twobytes)
                    {
                        case 0x8130:
                            binr.ReadByte();    //advance 1 byte
                            break;
                        case 0x8230:
                            binr.ReadInt16();   //advance 2 bytes
                            break;
                        default:
                            return null;
                    }

                    var seq = binr.ReadBytes(15);
                    if (!CompareBytearrays(seq, seqOid))  //make sure Sequence for OID is correct
                        return null;

                    twobytes = binr.ReadUInt16();
                    if (twobytes == 0x8103) //data read as little endian order (actual data order for Bit String is 03 81)
                        binr.ReadByte();    //advance 1 byte
                    else if (twobytes == 0x8203)
                        binr.ReadInt16();   //advance 2 bytes
                    else
                        return null;

                    var bt = binr.ReadByte();
                    if (bt != 0x00)     //expect null byte next
                        return null;

                    twobytes = binr.ReadUInt16();
                    if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                        binr.ReadByte();    //advance 1 byte
                    else if (twobytes == 0x8230)
                        binr.ReadInt16();   //advance 2 bytes
                    else
                        return null;

                    twobytes = binr.ReadUInt16();
                    byte lowbyte = 0x00;
                    byte highbyte = 0x00;

                    if (twobytes == 0x8102) //data read as little endian order (actual data order for Integer is 02 81)
                        lowbyte = binr.ReadByte();  // read next bytes which is bytes in modulus
                    else if (twobytes == 0x8202)
                    {
                        highbyte = binr.ReadByte(); //advance 2 bytes
                        lowbyte = binr.ReadByte();
                    }
                    else
                        return null;
                    byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };   //reverse byte order since asn.1 key uses big endian order
                    int modsize = BitConverter.ToInt32(modint, 0);

                    byte firstbyte = binr.ReadByte();
                    binr.BaseStream.Seek(-1, SeekOrigin.Current);

                    if (firstbyte == 0x00)
                    {   //if first byte (highest order) of modulus is zero, don't include it
                        binr.ReadByte();    //skip this null byte
                        modsize -= 1;   //reduce modulus buffer size by 1
                    }

                    byte[] modulus = binr.ReadBytes(modsize); //read the modulus bytes

                    if (binr.ReadByte() != 0x02)            //expect an Integer for the exponent data
                        return null;
                    int expbytes = binr.ReadByte();        // should only need one byte for actual exponent data (for all useful values)
                    byte[] exponent = binr.ReadBytes(expbytes);

                    // We don't really need to print anything but if we insist to...
                    //showBytes(""\nExponent"", exponent);
                    //showBytes(""\nModulus"", modulus);

                    // ------- create RSACryptoServiceProvider instance and initialize with public key -----
                    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
                    RSAParameters rsaKeyInfo = new RSAParameters
                    {
                        Modulus = modulus,
                        Exponent = exponent
                    };
                    rsa.ImportParameters(rsaKeyInfo);
                    return rsa;
                }
                catch (Exception)
                {
                    return null;
                }
            }
        }
    }

    //------- Parses binary ans.1 RSA private key; returns RSACryptoServiceProvider  ---
    static RSACryptoServiceProvider DecodeRSAPrivateKey( byte[] privkey )
    {
        byte[] MODULUS, E, D, P, Q, DP, DQ, IQ;

        // ---------  Set up stream to decode the asn.1 encoded RSA private key  ------
        MemoryStream mem = new MemoryStream( privkey );
        BinaryReader binr = new BinaryReader( mem );    //wrap Memory Stream with BinaryReader for easy reading
        byte bt = 0;
        ushort twobytes = 0;
        int elems = 0;
        try
        {
            twobytes = binr.ReadUInt16();
            if (twobytes == 0x8130) //data read as little endian order (actual data order for Sequence is 30 81)
                binr.ReadByte();    //advance 1 byte
            else if (twobytes == 0x8230)
                binr.ReadInt16();   //advance 2 bytes
            else
                return null;

            twobytes = binr.ReadUInt16();
            if (twobytes != 0x0102) //version number
                return null;
            bt = binr.ReadByte();
            if (bt != 0x00)
                return null;


            //------  all private key components are Integer sequences ----
            elems = GetIntegerSize( binr );
            MODULUS = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            E = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            D = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            P = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            Q = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            DP = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            DQ = binr.ReadBytes( elems );

            elems = GetIntegerSize( binr );
            IQ = binr.ReadBytes( elems );

            Console.WriteLine( ""showing components .."" );
            if (verbose)
            {
                showBytes( ""\nModulus"", MODULUS );
                showBytes( ""\nExponent"", E );
                showBytes( ""\nD"", D );
                showBytes( ""\nP"", P );
                showBytes( ""\nQ"", Q );
                showBytes( ""\nDP"", DP );
                showBytes( ""\nDQ"", DQ );
                showBytes( ""\nIQ"", IQ );
            }

            // ------- create RSACryptoServiceProvider instance and initialize with public key -----
            RSACryptoServiceProvider RSA = new RSACryptoServiceProvider();
            RSAParameters RSAparams = new RSAParameters();
            RSAparams.Modulus = MODULUS;
            RSAparams.Exponent = E;
            RSAparams.D = D;
            RSAparams.P = P;
            RSAparams.Q = Q;
            RSAparams.DP = DP;
            RSAparams.DQ = DQ;
            RSAparams.InverseQ = IQ;
            RSA.ImportParameters( RSAparams );
            return RSA;
        }
        catch (Exception)
        {
            return null;
        }
        finally { binr.Close(); }
    }

    private static int GetIntegerSize( BinaryReader binr )
    {
        byte bt = 0;
        byte lowbyte = 0x00;
        byte highbyte = 0x00;
        int count = 0;
        bt = binr.ReadByte();
        if (bt != 0x02)     //expect integer
            return 0;
        bt = binr.ReadByte();

        if (bt == 0x81)
            count = binr.ReadByte();    // data size in next byte
        else
            if (bt == 0x82)
            {
                highbyte = binr.ReadByte(); // data size in next 2 bytes
                lowbyte = binr.ReadByte();
                byte[] modint = { lowbyte, highbyte, 0x00, 0x00 };
                count = BitConverter.ToInt32( modint, 0 );
            }
            else
            {
                count = bt;     // we already have the data size
            }



        while (binr.ReadByte() == 0x00)
        {   //remove high order zeros in data
            count -= 1;
        }
        binr.BaseStream.Seek( -1, SeekOrigin.Current );     //last ReadByte wasn't a removed zero, so back up a byte
        return count;
    }

    //-----  Get the binary RSA PRIVATE key, decrypting if necessary ----
    static byte[] DecodeOpenSSLPrivateKey( String instr )
    {
        const String pemprivheader = ""-----BEGIN RSA PRIVATE KEY-----"";
        const String pemprivfooter = ""-----END RSA PRIVATE KEY-----"";
        String pemstr = instr.Trim();
        byte[] binkey;
        if (!pemstr.StartsWith( pemprivheader ) || !pemstr.EndsWith( pemprivfooter ))
            return null;

        StringBuilder sb = new StringBuilder( pemstr );
        sb.Replace( pemprivheader, """" );  //remove headers/footers, if present
        sb.Replace( pemprivfooter, """" );

        String pvkstr = sb.ToString().Trim();   //get string after removing leading/trailing whitespace

        try
        {        // if there are no PEM encryption info lines, this is an UNencrypted PEM private key
            binkey = Convert.FromBase64String( pvkstr );
            return binkey;
        }
        catch (System.FormatException)
        {       //if can't b64 decode, it must be an encrypted private key
            //Console.WriteLine(""Not an unencrypted OpenSSL PEM private key"");  
        }

        StringReader str = new StringReader( pvkstr );

        //-------- read PEM encryption info. lines and extract salt -----
        if (!str.ReadLine().StartsWith( ""Proc-Type: 4,ENCRYPTED"" ))
            return null;
        String saltline = str.ReadLine();
        if (!saltline.StartsWith( ""DEK-Info: DES-EDE3-CBC,"" ))
            return null;
        String saltstr = saltline.Substring( saltline.IndexOf( "","" ) + 1 ).Trim();
        byte[] salt = new byte[saltstr.Length / 2];
        for (int i = 0; i &lt; salt.Length; i++)
            salt[i] = Convert.ToByte( saltstr.Substring( i * 2, 2 ), 16 );
        if (!(str.ReadLine() == """"))
            return null;

        //------ remaining b64 data is encrypted RSA key ----
        String encryptedstr = str.ReadToEnd();

        try
        {   //should have b64 encrypted RSA key now
            binkey = Convert.FromBase64String( encryptedstr );
        }
        catch (System.FormatException)
        {  // bad b64 data.
            return null;
        }

        //------ Get the 3DES 24 byte key using PDK used by OpenSSL ----

        SecureString despswd = GetSecPswd( ""Enter password to derive 3DES key==&gt;"" );
        //Console.Write(""\nEnter password to derive 3DES key: "");
        //String pswd = Console.ReadLine();
        byte[] deskey = GetOpenSSL3deskey( salt, despswd, 1, 2 );    // count=1 (for OpenSSL implementation); 2 iterations to get at least 24 bytes
        if (deskey == null)
            return null;
        //showBytes(""3DES key"", deskey) ;

        //------ Decrypt the encrypted 3des-encrypted RSA private key ------
        byte[] rsakey = DecryptKey( binkey, deskey, salt ); //OpenSSL uses salt value in PEM header also as 3DES IV
        if (rsakey != null)
            return rsakey;  //we have a decrypted RSA private key
        else
        {
            Console.WriteLine( ""Failed to decrypt RSA private key; probably wrong password."" );
            return null;
        }
    }


    // ----- Decrypt the 3DES encrypted RSA private key ----------

    static byte[] DecryptKey( byte[] cipherData, byte[] desKey, byte[] IV )
    {
        MemoryStream memst = new MemoryStream();
        TripleDES alg = TripleDES.Create();
        alg.Key = desKey;
        alg.IV = IV;
        try
        {
            CryptoStream cs = new CryptoStream( memst, alg.CreateDecryptor(), CryptoStreamMode.Write );
            cs.Write( cipherData, 0, cipherData.Length );
            cs.Close();
        }
        catch (Exception exc)
        {
            Console.WriteLine( exc.Message );
            return null;
        }
        byte[] decryptedData = memst.ToArray();
        return decryptedData;
    }

    //-----   OpenSSL PBKD uses only one hash cycle (count); miter is number of iterations required to build sufficient bytes ---
    static byte[] GetOpenSSL3deskey( byte[] salt, SecureString secpswd, int count, int miter )
    {
        IntPtr unmanagedPswd = IntPtr.Zero;
        int HASHLENGTH = 16;    //MD5 bytes
        byte[] keymaterial = new byte[HASHLENGTH * miter];     //to store contatenated Mi hashed results


        byte[] psbytes = new byte[secpswd.Length];
        unmanagedPswd = Marshal.SecureStringToGlobalAllocAnsi( secpswd );
        Marshal.Copy( unmanagedPswd, psbytes, 0, psbytes.Length );
        Marshal.ZeroFreeGlobalAllocAnsi( unmanagedPswd );

        //UTF8Encoding utf8 = new UTF8Encoding();
        //byte[] psbytes = utf8.GetBytes(pswd);

        // --- contatenate salt and pswd bytes into fixed data array ---
        byte[] data00 = new byte[psbytes.Length + salt.Length];
        Array.Copy( psbytes, data00, psbytes.Length );      //copy the pswd bytes
        Array.Copy( salt, 0, data00, psbytes.Length, salt.Length ); //concatenate the salt bytes

        // ---- do multi-hashing and contatenate results  D1, D2 ...  into keymaterial bytes ----
        MD5 md5 = new MD5CryptoServiceProvider();
        byte[] result = null;
        byte[] hashtarget = new byte[HASHLENGTH + data00.Length];   //fixed length initial hashtarget

        for (int j = 0; j &lt; miter; j++)
        {
            // ----  Now hash consecutively for count times ------
            if (j == 0)
                result = data00;    //initialize 
            else
            {
                Array.Copy( result, hashtarget, result.Length );
                Array.Copy( data00, 0, hashtarget, result.Length, data00.Length );
                result = hashtarget;
                //Console.WriteLine(""Updated new initial hash target:"") ;
                //showBytes(result) ;
            }

            for (int i = 0; i &lt; count; i++)
                result = md5.ComputeHash( result );
            Array.Copy( result, 0, keymaterial, j * HASHLENGTH, result.Length );  //contatenate to keymaterial
        }
        //showBytes(""Final key material"", keymaterial);
        byte[] deskey = new byte[24];
        Array.Copy( keymaterial, deskey, deskey.Length );

        Array.Clear( psbytes, 0, psbytes.Length );
        Array.Clear( data00, 0, data00.Length );
        Array.Clear( result, 0, result.Length );
        Array.Clear( hashtarget, 0, hashtarget.Length );
        Array.Clear( keymaterial, 0, keymaterial.Length );

        return deskey;
    }

    static SecureString GetSecPswd( String prompt )
    {
        SecureString password = new SecureString();

        Console.ForegroundColor = ConsoleColor.Gray;
        Console.Write( prompt );
        Console.ForegroundColor = ConsoleColor.Magenta;

        while (true)
        {
            ConsoleKeyInfo cki = Console.ReadKey( true );
            if (cki.Key == ConsoleKey.Enter)
            {
                Console.ForegroundColor = ConsoleColor.Gray;
                Console.WriteLine();
                return password;
            }
            else if (cki.Key == ConsoleKey.Backspace)
            {
                // remove the last asterisk from the screen...
                if (password.Length &gt; 0)
                {
                    Console.SetCursorPosition( Console.CursorLeft - 1, Console.CursorTop );
                    Console.Write( "" "" );
                    Console.SetCursorPosition( Console.CursorLeft - 1, Console.CursorTop );
                    password.RemoveAt( password.Length - 1 );
                }
            }
            else if (cki.Key == ConsoleKey.Escape)
            {
                Console.ForegroundColor = ConsoleColor.Gray;
                Console.WriteLine();
                return password;
            }
            else if (Char.IsLetterOrDigit( cki.KeyChar ) || Char.IsSymbol( cki.KeyChar ))
            {
                if (password.Length &lt; 20)
                {
                    password.AppendChar( cki.KeyChar );
                    Console.Write( ""*"" );
                }
                else
                {
                    Console.Beep();
                }
            }
            else
            {
                Console.Beep();
            }
        }
    }

    static bool CompareBytearrays( byte[] a, byte[] b )
    {
        if (a.Length != b.Length)
            return false;
        int i = 0;
        foreach (byte c in a)
        {
            if (c != b[i])
                return false;
            i++;
        }
        return true;
    }

    static void showBytes( String info, byte[] data )
    {
        Console.WriteLine( ""{0}  [{1} bytes]"", info, data.Length );
        for (int i = 1; i &lt;= data.Length; i++)
        {
            Console.Write( ""{0:X2}  "", data[i - 1] );
            if (i % 16 == 0)
                Console.WriteLine();
        }
        Console.WriteLine( ""\n\n"" );
    }

}
</code></pre>
","62218","<c#><rsa><encryption-asymmetric><public-key>","30","49","3","2019-08-23 09:39:17","","6","14","739636","","2012-07-16 15:53:43","2012-07-16 14:54:14",""
"8750780","Encrypting data with Public Key in node.js","<p>I need to encrypt a string using a public key (pem file), and then sign it using a private key (also a pem). </p>

<p>I am loading the pem files fine:</p>

<pre><code>publicCert = fs.readFileSync(publicCertFile).toString();
</code></pre>

<p>but after hours of scouring google I can't seem to find a way to encrypt data using the public key. In php I simply call openssl_public_encrypt, but I don't see any corresponding function in node or in any modules. </p>

<p>If anyone has any suggestions, let me know.</p>
","<p>How about this <a href=""https://github.com/chrisa/node-rsa"" rel=""noreferrer"">node-rsa module</a>?  Here's a link to the <a href=""https://github.com/chrisa/node-rsa/blob/master/test/test.js"" rel=""noreferrer"">test.js file that demonstrates usage</a>.</p>
","61899","<node.js><public-key-encryption><encryption-asymmetric>","36","7","6","2019-02-11 19:55:44","31061352","0","30","","","","2012-01-05 22:26:44",""
"8750780","Encrypting data with Public Key in node.js","<p>I need to encrypt a string using a public key (pem file), and then sign it using a private key (also a pem). </p>

<p>I am loading the pem files fine:</p>

<pre><code>publicCert = fs.readFileSync(publicCertFile).toString();
</code></pre>

<p>but after hours of scouring google I can't seem to find a way to encrypt data using the public key. In php I simply call openssl_public_encrypt, but I don't see any corresponding function in node or in any modules. </p>

<p>If anyone has any suggestions, let me know.</p>
","<p>The updated public/private decrypt and encryption module is URSA. node-rsa module is outdated.</p>

<blockquote>
  <p>This Node module provides a fairly complete set of wrappers for the
  RSA public/private key crypto functionality of OpenSSL.</p>
</blockquote>

<p>npm install ursa</p>

<p>See: <a href=""https://github.com/Obvious/ursa"" rel=""noreferrer"">https://github.com/Obvious/ursa</a></p>
","61899","<node.js><public-key-encryption><encryption-asymmetric>","36","8","6","2019-02-11 19:55:44","31061352","0","30","","","","2012-01-05 22:26:44",""
"8750780","Encrypting data with Public Key in node.js","<p>I need to encrypt a string using a public key (pem file), and then sign it using a private key (also a pem). </p>

<p>I am loading the pem files fine:</p>

<pre><code>publicCert = fs.readFileSync(publicCertFile).toString();
</code></pre>

<p>but after hours of scouring google I can't seem to find a way to encrypt data using the public key. In php I simply call openssl_public_encrypt, but I don't see any corresponding function in node or in any modules. </p>

<p>If anyone has any suggestions, let me know.</p>
","<p>TL;DR: Ursa is your best bet. Its really funky that this doesn't come standard with node crypto.</p>

<p>Every other solutions I found either doesn't work in windows or aren't actually encryption libraries. Ursa, recommended by Louie, looks like the best bet. If you don't care about windows, you're even more golden. Note on Ursa, I had to install Open SSL along with something called ""Visual C++ 2008 Redistributables"" in order to get the npm install to work. Get that junk here: <a href=""http://slproweb.com/products/Win32OpenSSL.html"" rel=""noreferrer"">http://slproweb.com/products/Win32OpenSSL.html</a> </p>

<p>The breakdown:</p>

<ul>
<li>Annoying additional manual installation steps for windows
<ul>
<li><a href=""https://github.com/Obvious/ursa"" rel=""noreferrer"">https://github.com/Obvious/ursa</a> - probably the best of the lot</li>
</ul></li>
<li>Not compatible with windows
<ul>
<li><a href=""https://npmjs.org/package/rsautl"" rel=""noreferrer"">https://npmjs.org/package/rsautl</a> - says BADPLATFORM</li>
<li><a href=""https://github.com/katyo/node-rsa"" rel=""noreferrer"">https://github.com/katyo/node-rsa</a> - node-waf isn't available on windows</li>
<li><a href=""https://github.com/paspao/simple_rsa_encrypt"" rel=""noreferrer"">https://github.com/paspao/simple_rsa_encrypt</a> - unistd.h isn't on windows</li>
<li><a href=""https://npmjs.org/package/pripub"" rel=""noreferrer"">https://npmjs.org/package/pripub</a> - large amounts of linker errors, also not on github</li>
</ul></li>
<li>Not encryption libraries
<ul>
<li><a href=""https://github.com/substack/secure-peer"" rel=""noreferrer"">https://github.com/substack/secure-peer</a></li>
<li><a href=""https://github.com/substack/rsa-json"" rel=""noreferrer"">https://github.com/substack/rsa-json</a> - just generates keys, doesn't use them</li>
<li><a href=""https://github.com/substack/rsa-unpack"" rel=""noreferrer"">https://github.com/substack/rsa-unpack</a> - just unpacks PEM strings</li>
</ul></li>
</ul>

<p>This is literally all I could find.</p>
","61899","<node.js><public-key-encryption><encryption-asymmetric>","36","5","6","2019-02-11 19:55:44","31061352","0","30","","","","2012-01-05 22:26:44",""
"8750780","Encrypting data with Public Key in node.js","<p>I need to encrypt a string using a public key (pem file), and then sign it using a private key (also a pem). </p>

<p>I am loading the pem files fine:</p>

<pre><code>publicCert = fs.readFileSync(publicCertFile).toString();
</code></pre>

<p>but after hours of scouring google I can't seem to find a way to encrypt data using the public key. In php I simply call openssl_public_encrypt, but I don't see any corresponding function in node or in any modules. </p>

<p>If anyone has any suggestions, let me know.</p>
","<p>This is not supported natively by node version v0.11.13 or below but it seems that next version of node ( a.k.a v0.12) will support this.</p>

<p>Here is the clue:  <a href=""https://github.com/joyent/node/blob/v0.12/lib/crypto.js#L358"" rel=""nofollow"">https://github.com/joyent/node/blob/v0.12/lib/crypto.js#L358</a></p>

<p>see   <code>crypto.publicEncrypt</code> and <code>crypto.privateDecrypt</code> </p>

<p>Here is the future documentation for this 
<a href=""https://github.com/joyent/node/blob/7c0419730b237dbfa0ec4e6fb33a99ff01825a8f/doc/api/crypto.markdown#cryptopublicencryptpublic_key-buffer"" rel=""nofollow"">https://github.com/joyent/node/blob/7c0419730b237dbfa0ec4e6fb33a99ff01825a8f/doc/api/crypto.markdown#cryptopublicencryptpublic_key-buffer</a></p>
","61899","<node.js><public-key-encryption><encryption-asymmetric>","36","3","6","2019-02-11 19:55:44","31061352","0","30","","","","2012-01-05 22:26:44",""
"8750780","Encrypting data with Public Key in node.js","<p>I need to encrypt a string using a public key (pem file), and then sign it using a private key (also a pem). </p>

<p>I am loading the pem files fine:</p>

<pre><code>publicCert = fs.readFileSync(publicCertFile).toString();
</code></pre>

<p>but after hours of scouring google I can't seem to find a way to encrypt data using the public key. In php I simply call openssl_public_encrypt, but I don't see any corresponding function in node or in any modules. </p>

<p>If anyone has any suggestions, let me know.</p>
","<p>No library necessary friends,</p>

<p>Enter <a href=""https://nodejs.org/api/crypto.html"" rel=""noreferrer"">crypto</a></p>

<p>Here's a janky little module you could use to encrypt/decrypt strings with RSA keys:</p>

<pre><code>var crypto = require(""crypto"");
var path = require(""path"");
var fs = require(""fs"");

var encryptStringWithRsaPublicKey = function(toEncrypt, relativeOrAbsolutePathToPublicKey) {
    var absolutePath = path.resolve(relativeOrAbsolutePathToPublicKey);
    var publicKey = fs.readFileSync(absolutePath, ""utf8"");
    var buffer = Buffer.from(toEncrypt);
    var encrypted = crypto.publicEncrypt(publicKey, buffer);
    return encrypted.toString(""base64"");
};

var decryptStringWithRsaPrivateKey = function(toDecrypt, relativeOrAbsolutePathtoPrivateKey) {
    var absolutePath = path.resolve(relativeOrAbsolutePathtoPrivateKey);
    var privateKey = fs.readFileSync(absolutePath, ""utf8"");
    var buffer = Buffer.from(toDecrypt, ""base64"");
    var decrypted = crypto.privateDecrypt(privateKey, buffer);
    return decrypted.toString(""utf8"");
};

module.exports = {
    encryptStringWithRsaPublicKey: encryptStringWithRsaPublicKey,
    decryptStringWithRsaPrivateKey: decryptStringWithRsaPrivateKey
}
</code></pre>

<p>I would recommend not using synchronous fs methods where possible, and you could use Promises to make this better, but for simple use cases this is the approach that I have seen work and would take</p>
","61899","<node.js><public-key-encryption><encryption-asymmetric>","36","113","6","2019-02-11 19:55:44","31061352","0","30","","","","2012-01-05 22:26:44",""
"8750780","Encrypting data with Public Key in node.js","<p>I need to encrypt a string using a public key (pem file), and then sign it using a private key (also a pem). </p>

<p>I am loading the pem files fine:</p>

<pre><code>publicCert = fs.readFileSync(publicCertFile).toString();
</code></pre>

<p>but after hours of scouring google I can't seem to find a way to encrypt data using the public key. In php I simply call openssl_public_encrypt, but I don't see any corresponding function in node or in any modules. </p>

<p>If anyone has any suggestions, let me know.</p>
","<p>I tested this in Node 10, you can use encrypt/decrypt functions (small changes on Jacob's answer)</p>

<pre><code>const crypto = require('crypto')
const path = require('path')
const fs = require('fs')

function encrypt(toEncrypt, relativeOrAbsolutePathToPublicKey) {
  const absolutePath = path.resolve(relativeOrAbsolutePathToPublicKey)
  const publicKey = fs.readFileSync(absolutePath, 'utf8')
  const buffer = Buffer.from(toEncrypt, 'utf8')
  const encrypted = crypto.publicEncrypt(publicKey, buffer)
  return encrypted.toString('base64')
}

function decrypt(toDecrypt, relativeOrAbsolutePathtoPrivateKey) {
  const absolutePath = path.resolve(relativeOrAbsolutePathtoPrivateKey)
  const privateKey = fs.readFileSync(absolutePath, 'utf8')
  const buffer = Buffer.from(toDecrypt, 'base64')
  const decrypted = crypto.privateDecrypt(
    {
      key: privateKey.toString(),
      passphrase: '',
    },
    buffer,
  )
  return decrypted.toString('utf8')
}

const enc = encrypt('hello', `public.pem`)
console.log('enc', enc)

const dec = decrypt(enc, `private.pem`)
console.log('dec', dec)
</code></pre>

<hr>

<p>For the keys you can generate them with</p>

<pre><code>const { writeFileSync } = require('fs')
const { generateKeyPairSync } = require('crypto')

function generateKeys() {
  const { privateKey, publicKey } = generateKeyPairSync('rsa', {
    modulusLength: 4096,
    publicKeyEncoding: {
      type: 'pkcs1',
      format: 'pem',
    },
    privateKeyEncoding: {
      type: 'pkcs1',
      format: 'pem',
      cipher: 'aes-256-cbc',
      passphrase: '',
    },
  })

  writeFileSync('private.pem', privateKey)
  writeFileSync('public.pem', publicKey)
}
</code></pre>
","61899","<node.js><public-key-encryption><encryption-asymmetric>","36","9","6","2019-02-11 19:55:44","31061352","0","30","","","","2012-01-05 22:26:44",""
"1496793","RSA Encryption, getting bad length","<p>When calling the following function :</p>

<pre><code>byte[] bytes = rsa.Encrypt(System.Text.UTF8Encoding.UTF8.GetBytes(stringToEncrypt), true);
</code></pre>

<p>I am now getting the error: bad length. </p>

<p>With a smaller string it works, any ideas what the problem could be the string I am passing is under 200 characters.</p>
","<p>RSA encryption is only mean for small amounts of data, the amount of data you can encrypt is dependent on the size of the key you are using, for example for 1024 bit RSA keys, and PKCS # 1 V1.5 padding, you can encrypt 117 bytes at most, with a 2048 RSA key, you can encrypt 245 bytes.</p>

<p>There's a good reason for this, asymmetric encryption is computationally expensive. If you want to encrypt large amounts of data you should be using symmetric encryption. But what if you want non-repudiation? Well what you then do is use both. You create a symmetric key and exchange it using asymmetric encryption, then that safely exchanged symmetric key to encrypt your large amounts of data. This is what SSL and WS-Secure use underneath the covers.</p>
","39496","<c#><encryption><rsa><encryption-asymmetric>","50","69","3","2018-05-24 16:54:17","1496812","0","15","2525","","2009-09-30 08:42:57","2009-09-30 08:35:30",""
"1496793","RSA Encryption, getting bad length","<p>When calling the following function :</p>

<pre><code>byte[] bytes = rsa.Encrypt(System.Text.UTF8Encoding.UTF8.GetBytes(stringToEncrypt), true);
</code></pre>

<p>I am now getting the error: bad length. </p>

<p>With a smaller string it works, any ideas what the problem could be the string I am passing is under 200 characters.</p>
","<p>For future searches regarding RSA bad length exceptions...</p>

<p>You can calculate the max number of bytes which can be encrypted with a particular key size with the following:</p>

<pre><code>((KeySize - 384) / 8) + 37
</code></pre>

<p>However, if the optimal asymmetric encryption padding (OAEP) parameter is true, as it is in the original post, the following can be used to calculate the max bytes:</p>

<pre><code>((KeySize - 384) / 8) + 7
</code></pre>

<p>The legal key sizes are 384 thru 16384 with a skip size of 8.</p>
","39496","<c#><encryption><rsa><encryption-asymmetric>","50","46","3","2018-05-24 16:54:17","1496812","0","15","2525","","2009-09-30 08:42:57","2009-09-30 08:35:30",""
"1496793","RSA Encryption, getting bad length","<p>When calling the following function :</p>

<pre><code>byte[] bytes = rsa.Encrypt(System.Text.UTF8Encoding.UTF8.GetBytes(stringToEncrypt), true);
</code></pre>

<p>I am now getting the error: bad length. </p>

<p>With a smaller string it works, any ideas what the problem could be the string I am passing is under 200 characters.</p>
","<p>As explained above, the solution to the 'bad length' type exceptions is to hybridize the use of symmetric and asymmetric encryption, so that the size of the text you are encrypting is not constrained by the key size.  You basically use RSA encryption to asymmetrically encrypt the random <strong>key</strong> .</p>

<blockquote>
  <p><strong>For encryption:</strong></p>
  
  <ol>
  <li><p>Generate a random key of the length required for symmetrical encryption technique such as AES or Rijndael.</p></li>
  <li><p>Symmetrically encrypt your text/data using AES/Rijndael using the random key generated in step 1.</p></li>
  <li><p>Using RSA, asymmetrically encrypt the random key generated in step 1.</p></li>
  </ol>
  
  <p><strong>For decryption:</strong></p>
  
  <ol>
  <li><p>First decrypt the AES/Rijndael-generated random key using your private RSA key.</p></li>
  <li><p>Then decrypt the original text/data using the RSA-decrypted random key</p></li>
  </ol>
</blockquote>

<p>For a demonstration, you may wish to have a look this following example in C#:</p>

<p><a href=""http://www.technical-recipes.com/2013/using-rsa-to-encrypt-large-data-files-in-c/"" rel=""noreferrer"">http://www.technical-recipes.com/2013/using-rsa-to-encrypt-large-data-files-in-c/</a></p>
","39496","<c#><encryption><rsa><encryption-asymmetric>","50","17","3","2018-05-24 16:54:17","1496812","0","15","2525","","2009-09-30 08:42:57","2009-09-30 08:35:30",""
"8539441","Private/Public Encryption in Python with Standard Library","<p>Is there a module that has my searching has been unable to discover that would allow writing code like the following? The reason for wanting to write code like this is unimportant. All I am after is some code that has a simple API to generate public and private byte keys and to easily encode and decode data with those keys.</p>

<pre><code>import module, os

method, bits, data = 'RSA', 1024, os.urandom(1024)
public, private = module.generate_keys(method, bits)

assert isinstance(public, bytes) and isinstance(private, bytes)
assert module.decode(module.encode(data, private), public) == data
assert module.decode(module.encode(data, public), private) == data
</code></pre>

<p>Most of what appears to be available requires downloading a package and only runs on Python 2.x. It is also quite common to find libraries that work with PEM files or other types of certificates. I would like to avoid having to deal with such files, to generate public and private keys on the fly, and quickly work with data in memory.</p>
","<p>Public key encryption is not in the standard library.  There are some third party libraries on <a href=""http://pypi.python.org/"">PyPi</a> for it though:</p>

<ul>
<li><a href=""http://packages.python.org/pycrypto/"">PyCrypto</a></li>
<li><a href=""http://stuvel.eu/rsa"">RSA Python</a></li>
</ul>

<p>If you're interested in the math behind it, Python makes it easy to experiment:</p>

<pre><code>code = pow(msg, 65537, 5551201688147)               # encode using a public key
plaintext = pow(code, 109182490673, 5551201688147)  # decode using a private key
</code></pre>

<p>The key generation is a little more involved.  Here is a simplified example of how to do key generation in-memory using <em>urandom</em> as the source of entropy.  The code runs under both Py2.6 and Py3.x:</p>

<pre><code>import random

def gen_prime(N=10**8, bases=range(2,20000)):
    # XXX replace with a more sophisticated algorithm
    p = 1
    while any(pow(base, p-1, p) != 1 for base in bases):
        p = random.SystemRandom().randrange(N)
    return p

def multinv(modulus, value):
    '''Multiplicative inverse in a given modulus

        &gt;&gt;&gt; multinv(191, 138)
        18
        &gt;&gt;&gt; 18 * 138 % 191
        1

    '''
    # http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    x, lastx = 0, 1
    a, b = modulus, value
    while b:
        a, q, b = b, a // b, a % b
        x, lastx = lastx - q * x, x
    result = (1 - lastx * modulus) // value
    return result + modulus if result &lt; 0 else result

def keygen(N):
    '''Generate public and private keys from primes up to N.

        &gt;&gt;&gt; pubkey, privkey = keygen(2**64)
        &gt;&gt;&gt; msg = 123456789012345
        &gt;&gt;&gt; coded = pow(msg, 65537, pubkey)
        &gt;&gt;&gt; plain = pow(coded, privkey, pubkey)
        &gt;&gt;&gt; assert msg == plain

    '''
    # http://en.wikipedia.org/wiki/RSA
    prime1 = gen_prime(N)
    prime2 = gen_prime(N)
    totient = (prime1 - 1) * (prime2 - 1)
    return prime1 * prime2, multinv(totient, 65537)
</code></pre>
","27549","<python><python-3.x><encryption-asymmetric>","18","32","3","2013-04-01 18:55:31","8539470","1","4","372643","","2012-01-17 12:38:26","2011-12-16 19:56:40",""
"8539441","Private/Public Encryption in Python with Standard Library","<p>Is there a module that has my searching has been unable to discover that would allow writing code like the following? The reason for wanting to write code like this is unimportant. All I am after is some code that has a simple API to generate public and private byte keys and to easily encode and decode data with those keys.</p>

<pre><code>import module, os

method, bits, data = 'RSA', 1024, os.urandom(1024)
public, private = module.generate_keys(method, bits)

assert isinstance(public, bytes) and isinstance(private, bytes)
assert module.decode(module.encode(data, private), public) == data
assert module.decode(module.encode(data, public), private) == data
</code></pre>

<p>Most of what appears to be available requires downloading a package and only runs on Python 2.x. It is also quite common to find libraries that work with PEM files or other types of certificates. I would like to avoid having to deal with such files, to generate public and private keys on the fly, and quickly work with data in memory.</p>
","<p><a href=""https://www.dlitz.net/software/pycrypto/"" rel=""nofollow"">PyCrypto</a> works on Python 3 as of 2.4.1.</p>
","27549","<python><python-3.x><encryption-asymmetric>","18","2","3","2013-04-01 18:55:31","8539470","1","4","372643","","2012-01-17 12:38:26","2011-12-16 19:56:40",""
"8539441","Private/Public Encryption in Python with Standard Library","<p>Is there a module that has my searching has been unable to discover that would allow writing code like the following? The reason for wanting to write code like this is unimportant. All I am after is some code that has a simple API to generate public and private byte keys and to easily encode and decode data with those keys.</p>

<pre><code>import module, os

method, bits, data = 'RSA', 1024, os.urandom(1024)
public, private = module.generate_keys(method, bits)

assert isinstance(public, bytes) and isinstance(private, bytes)
assert module.decode(module.encode(data, private), public) == data
assert module.decode(module.encode(data, public), private) == data
</code></pre>

<p>Most of what appears to be available requires downloading a package and only runs on Python 2.x. It is also quite common to find libraries that work with PEM files or other types of certificates. I would like to avoid having to deal with such files, to generate public and private keys on the fly, and quickly work with data in memory.</p>
","<p>Here's another example    </p>

<pre><code>import random


# RSA Algorithm



ops = raw_input('Would you like a list of prime numbers to choose from (y/n)? ')
op = ops.upper()

if op == 'Y':
    print """"""\n 2      3      5      7     11     13     17     19     23     29 
31     37     41     43     47     53     59     61     67     71 
73     79     83     89     97    101    103    107    109    113 
127    131    137    139    149    151    157    163    167    173 
179    181    191    193    197    199    211    223    227    229 
233    239    241    251    257    263    269    271    277    281 
283    293    307    311    313    317    331    337    347    349 
353    359    367    373    379    383    389    397    401    409 
419    421    431    433    439    443    449    457    461    463 
467    479    487    491    499    503    509    521    523    541 
547    557    563    569    571    577    587    593    599 \n""""""
    rsa()
else:
    print ""\n""
    rsa()

def rsa():
    # Choose two prime numbers p and q
    p = raw_input('Choose a p: ')
    p = int(p)

while isPrime(p) == False:
    print ""Please ensure p is prime""
    p = raw_input('Choose a p: ')
    p = int(p)

q = raw_input('Choose a q: ')
q = int(q)

while isPrime(q) == False or p==q:
    print ""Please ensure q is prime and NOT the same value as p""
    q = raw_input('Choose a q: ')
    q = int(q)

# Compute n = pq
n = p * q

# Compute the phi of n
phi = (p-1) * (q-1)

# Choose an integer e such that e and phi(n) are coprime
e = random.randrange(1,phi)

# Use Euclid's Algorithm to verify that e and phi(n) are comprime
g = euclid(e,phi)
while(g!=1):
    e = random.randrange(1,phi)
    g = euclid(e,phi)

# Use Extended Euclid's Algorithm 
d = extended_euclid(e,phi)

# Public and Private Key have been generated
public_key=(e,n)
private_key=(d,n)
print ""Public Key [E,N]: "", public_key
print ""Private Key [D,N]: "", private_key

# Enter plain text to be encrypted using the Public Key
sentence = raw_input('Enter plain text: ')
letters = list(sentence)

cipher = []
num = """"

# Encrypt the plain text
for i in range(0,len(letters)):
    print ""Value of "", letters[i], "" is "", character[letters[i]]

    c = (character[letters[i]]**e)%n
    cipher += [c]
    num += str(c)
print ""Cipher Text is: "", num

plain = []
sentence = """"

# Decrypt the cipher text    
for j in range(0,len(cipher)):

    p = (cipher[j]**d)%n

    for key in character.keys():
        if character[key]==p:
            plain += [key]
            sentence += key
            break
print ""Plain Text is: "", sentence

# Euclid's Algorithm
def euclid(a, b):
   if b==0:
   return a
else:
   return euclid(b, a % b)

# Euclid's Extended Algorithm
def extended_euclid(e,phi):
    d=0
    x1=0
    x2=1
    y1=1
    orig_phi = phi
    tempPhi = phi

while (e&gt;0):
  temp1 = int(tempPhi/e)
  temp2 = tempPhi - temp1 * e
  tempPhi = e
  e = temp2

  x = x2- temp1* x1
  y = d - temp1 * y1

  x2 = x1
  x1 = x
  d = y1
  y1 = y

  if tempPhi == 1:
      d += phi
      break
return d

# Checks if n is a prime number
def isPrime(n):
   for i in range(2,n):
    if n%i == 0:
        return False
return True

character = {""A"":1,""B"":2,""C"":3,""D"":4,""E"":5,""F"":6,""G"":7,""H"":8,""I"":9,""J"":10,
     ""K"":11,""L"":12,""M"":13,""N"":14,""O"":15,""P"":16,""Q"":17,""R"":18,""S"":19,
     ""T"":20,""U"":21,""V"":22,""W"":23,""X"":24,""Y"":25,""Z"":26,""a"":27,""b"":28,
     ""c"":29,""d"":30,""e"":31,""f"":32,""g"":33,""h"":34,""i"":35,""j"":36,""k"":37,
     ""l"":38,""m"":39,""n"":40,""o"":41,""p"":42,""q"":43,""r"":44,""s"":45,""t"":46,
     ""u"":47,""v"":48,""w"":49,""x"":50,""y"":51,""z"":52, "" "":53, ""."":54, "","":55,
     ""?"":56,""/"":57,""!"":58,""("":59,"")"":60,""$"":61,"":"":62,"";"":63,""'"":64,""@"":65,
     ""#"":66,""%"":67,""^"":68,""&amp;"":69,""*"":70,""+"":71,""-"":72,""_"":73,""="":74}
</code></pre>
","27549","<python><python-3.x><encryption-asymmetric>","18","2","3","2013-04-01 18:55:31","8539470","1","4","372643","","2012-01-17 12:38:26","2011-12-16 19:56:40",""
"338578","Any tutorials on public key encryption in java?","<p>I've been able find information on symmetric encryption and hashing but I've been having quite a bit of trouble finding much information on any sort of public key encryption for java. What I'd like to do is make a very simple proof of concept program that takes a string ( or a file I suppose), encrypts it with a public key and then decrypts it with a private key.</p>

<p>Any tutorial links or examples would be appreciated. I just want to make something demonstrating how you can use public key encryption in Java.</p>
","<p>There are quite a few resources on the web about that. Basically it turns around the KeyPairGenerator class.</p>

<p>See <a href=""http://www.informit.com/articles/article.aspx?p=170967&amp;seqNum=4"" rel=""noreferrer"">http://www.informit.com/articles/article.aspx?p=170967&amp;seqNum=4</a> for an example program.</p>
","26721","<java><public-key><encryption-asymmetric>","16","12","2","2016-05-19 12:53:30","338603","0","4","39057","Loki","2008-12-03 20:34:22","2008-12-03 20:28:18","2016-05-20 19:09:31"
"338578","Any tutorials on public key encryption in java?","<p>I've been able find information on symmetric encryption and hashing but I've been having quite a bit of trouble finding much information on any sort of public key encryption for java. What I'd like to do is make a very simple proof of concept program that takes a string ( or a file I suppose), encrypts it with a public key and then decrypts it with a private key.</p>

<p>Any tutorial links or examples would be appreciated. I just want to make something demonstrating how you can use public key encryption in Java.</p>
","<p>Normally, you use public key encryption to encrypt a symmetric key, in part because public key encryption is very slow. Typically, you'd send the recipient the following, so that they can decrypt your message:</p>

<ol>
<li>The symmetric key, encrypted with the recipient's public key.</li>
<li>Parameters for the algorithms used, usually an initialization vector for the symmetric cipher.</li>
<li>Identifiers for the encryption algorithms used.</li>
<li>The ciphertext&mdash;the actual message, encrypted under the symmetric cipher.</li>
</ol>

<p>I found the sample code in the <a href=""http://java.sun.com/j2se/1.5.0/docs/guide/security/jce/JCERefGuide.html"" rel=""noreferrer"">JCE documentation</a> sufficient to get things working.</p>

<p>The standard format for bundling all of this information up is the Cryptographic Message Syntax, or CMS, which is used by S/MIME in email applications. I recommend using <a href=""http://www.bouncycastle.org/"" rel=""noreferrer"">Bouncy Castle's libraries</a>; they are solid, fairly simple, and actively maintained. The reference documentation is a bit weak, but they do provide code examples.</p>
","26721","<java><public-key><encryption-asymmetric>","16","13","2","2016-05-19 12:53:30","338603","0","4","39057","Loki","2008-12-03 20:34:22","2008-12-03 20:28:18","2016-05-20 19:09:31"
"9891708","Ruby: file encryption/decryption with private/public keys","<p>I am searching for an algorithm for file encryption/decryption which satisfies the following requirements:</p>

<ul>
<li>Algorithm must be reliable</li>
<li>Algorithm should be fast for rather big files</li>
<li>Private key can be generated by some parameter (for example, password)</li>
<li>Generated private key must be compatible with public key (public key is generated only once and stored in database)</li>
</ul>

<p>Is there any Ruby implementation of suggested algorithms?</p>
","<blockquote>
  <p><strong>Note Well:</strong> As emboss mentions in the comments, this answer is a poor fit for an actual system. Firstly, file encryption should not be carried out using this method (The lib provides AES, for example.). Secondly, this answer does not address any of the wider issues that will also affect how you engineer your solution.</p>
  
  <p>The original source also goes into <a href=""http://stuff-things.net/2008/02/05/encrypting-lots-of-sensitive-data-with-ruby-on-rails/"" rel=""noreferrer"">more details</a>.</p>
</blockquote>

<p>Ruby can use openssl to do this:</p>

<pre><code>#!/usr/bin/env ruby

# ENCRYPT

require 'openssl'
require 'base64'

public_key_file = 'public.pem';
string = 'Hello World!';

public_key = OpenSSL::PKey::RSA.new(File.read(public_key_file))
encrypted_string = Base64.encode64(public_key.public_encrypt(string))
</code></pre>

<p>And decrypt:</p>

<pre><code>#!/usr/bin/env ruby

# DECRYPT

require 'openssl'
require 'base64'

private_key_file = 'private.pem';
password = 'boost facile'

encrypted_string = %Q{
...
}

private_key = OpenSSL::PKey::RSA.new(File.read(private_key_file),password)
string = private_key.private_decrypt(Base64.decode64(encrypted_string))
</code></pre>

<p>from <a href=""http://stuff-things.net/2007/06/11/encrypting-sensitive-data-with-ruby-on-rails/"" rel=""noreferrer"">here</a></p>
","20974","<ruby-on-rails><ruby><encryption><public-key-encryption><encryption-asymmetric>","21","32","4","2017-07-28 20:33:59","9891824","0","9","238886","","2016-05-15 01:15:10","2012-03-27 14:36:26",""
"9891708","Ruby: file encryption/decryption with private/public keys","<p>I am searching for an algorithm for file encryption/decryption which satisfies the following requirements:</p>

<ul>
<li>Algorithm must be reliable</li>
<li>Algorithm should be fast for rather big files</li>
<li>Private key can be generated by some parameter (for example, password)</li>
<li>Generated private key must be compatible with public key (public key is generated only once and stored in database)</li>
</ul>

<p>Is there any Ruby implementation of suggested algorithms?</p>
","<p>I'm afraid you are mixing two concepts here, authentication/authorization and confidentiality, trying to cover both aspects in one single step, and that won't work. You should never encrypt ""real data"" with asymmetric algorithms. a) they are way too slow for that, b) there are subtle issues that, if not done right, will severely weaken the security of your solution. </p>

<p>A good rule of thumb is that the only thing you should end up encrypting with private <em>asymmetric</em> keys is <em>symmetric</em> keys used by a much faster symmetric algorithm. But in almost all cases you shouldn't even be doing that, because in 90% of the cases what you actually want is TLS (SSL) in those cases - I tried to explain why <a href=""https://stackoverflow.com/questions/6658557/alternative-to-ssl-manual-encryption/6658596#6658596"">here</a> a while ago.</p>

<p>In your case, I assume the requirements are:</p>

<ul>
<li><p>confidentiality of the data that is to be stored in the database: the general public shouldn't be able to read it (or even access it)</p></li>
<li><p>a selected few (probably just one person) should be able to access and read that data</p></li>
</ul>

<p>The first goal is generally achieved by using <a href=""http://ruby-doc.org/stdlib-1.9.3/libdoc/openssl/rdoc/OpenSSL/Cipher.html"" rel=""nofollow noreferrer"">symmetric encryption</a>. The second goal is, albeit related, realized by quite different means. You want the user accessing the file to be authenticated (i.e. establish the identity) and on top of that you also want them to be authorized (i.e. check whether the established identity has the right to do what they intend to). This is where asymmetric cryptography <em>may</em> enter the stage, but not necessarily. Since your question is tagged with Rails I assume we are talking about a Rails application. You typically already have some means to authenticate and authorize users there (most likely involving the afore-mentioned TLS), you may simply reuse them in order to establish a symmetric key for actual file encryption/decryption. <a href=""http://www.ruby-doc.org/stdlib-2.0/libdoc/openssl/rdoc/OpenSSL/PKCS5.html"" rel=""nofollow noreferrer"">Password-based encryption</a> would fit for this purpose, if you want to avoid asymmetric crypto at all. Things get even more complicated if you also want to ensure integrity of the already confidential data, that is, you want to give a kind of guarantee to the authenticated and authorized user in the sense that what they finally access has not been altered in any way in the meantime. </p>

<p>Developing a solution for this will be no trivial task and depend to a large extent on your given requirements, so I'm afraid there's no ""golden way"" that suits everyone. I would suggest to do some research, get a clearer picture of what you are trying to achieve and how, then try to get additional advice on subjects that you still feel uncertain/uncomfortable with. </p>
","20974","<ruby-on-rails><ruby><encryption><public-key-encryption><encryption-asymmetric>","21","11","4","2017-07-28 20:33:59","9891824","0","9","238886","","2016-05-15 01:15:10","2012-03-27 14:36:26",""
"9891708","Ruby: file encryption/decryption with private/public keys","<p>I am searching for an algorithm for file encryption/decryption which satisfies the following requirements:</p>

<ul>
<li>Algorithm must be reliable</li>
<li>Algorithm should be fast for rather big files</li>
<li>Private key can be generated by some parameter (for example, password)</li>
<li>Generated private key must be compatible with public key (public key is generated only once and stored in database)</li>
</ul>

<p>Is there any Ruby implementation of suggested algorithms?</p>
","<p>I made a gem to help with this. It's called <code>cryptosystem</code>. Simply configure the path and password to your private key as well as the path to your public key, and it does the rest.</p>

<p>Encrypting is as simple as:</p>

<pre><code>rsa = Cryptosystem::RSA.new
rsa.encrypt('secret') # =&gt; ""JxpuhTpEqRtMLmaSfaq/X6XONkBnMe...""
</code></pre>

<p>And decrypting:</p>

<pre><code>encrypted_value = rsa.encrypt('secret') # =&gt; ""Y8DWJc2/+7TIxdLEolV99XI2sclHuK...""
rsa.decrypt(encrypted_value) # =&gt; ""secret""
</code></pre>

<p>You can check it out on <a href=""https://github.com/joshwetzel/cryptosystem"" rel=""nofollow"">GitHub</a> or <a href=""https://rubygems.org/gems/cryptosystem"" rel=""nofollow"">RubyGems</a>.</p>
","20974","<ruby-on-rails><ruby><encryption><public-key-encryption><encryption-asymmetric>","21","0","4","2017-07-28 20:33:59","9891824","0","9","238886","","2016-05-15 01:15:10","2012-03-27 14:36:26",""
"9891708","Ruby: file encryption/decryption with private/public keys","<p>I am searching for an algorithm for file encryption/decryption which satisfies the following requirements:</p>

<ul>
<li>Algorithm must be reliable</li>
<li>Algorithm should be fast for rather big files</li>
<li>Private key can be generated by some parameter (for example, password)</li>
<li>Generated private key must be compatible with public key (public key is generated only once and stored in database)</li>
</ul>

<p>Is there any Ruby implementation of suggested algorithms?</p>
","<p><a href=""https://rocketjob.github.io/symmetric-encryption/"" rel=""nofollow noreferrer"">Symmetric Encryption</a> is definitely fast and has excellent support for streaming of very large files.</p>

<pre><code>SymmetricEncryption::Writer.open('my_file.enc') do |file|
  file.write ""Hello World\n""
  file.write ""Keep this secret""
end
</code></pre>

<p>Symmetric Encryption is designed for encrypting data and large files within an organization. </p>

<p>When it comes to sharing files with other organizations then the best option is PGP. For streaming of very large files with PGP consider: <a href=""https://github.com/rocketjob/iostreams"" rel=""nofollow noreferrer"">IOStreams</a></p>

<pre><code>IOStreams.writer('hello.pgp', recipient: 'receiver@example.org') do |writer|
  writer.write('Hello World')
  writer.write('and some more')
end
</code></pre>

<p>Look at the file iostreams/lib/io_streams/pgp.rb for more PGP examples. It also supports PGP key management directly from Ruby.</p>
","20974","<ruby-on-rails><ruby><encryption><public-key-encryption><encryption-asymmetric>","21","1","4","2017-07-28 20:33:59","9891824","0","9","238886","","2016-05-15 01:15:10","2012-03-27 14:36:26",""
"3441501","Java asymmetric encryption: preferred way to store public/private keys","<p>This code generates a pair of public/private keys:</p>

<pre><code>KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
keyGen.initialize(1024);
KeyPair keypair = keyGen.genKeyPair();
PrivateKey privateKey = keypair.getPrivate();
PublicKey publicKey = keypair.getPublic();
</code></pre>

<p>What I'd like to know is how do you usually store the public key:</p>

<p><strong>Option 1: store the bytes</strong></p>

<pre><code>byte[] privateKeyBytes = privateKey.getEncoded();
byte[] publicKeyBytes = publicKey.getEncoded();
// ... write to file

// convert bytes back to public/private keys
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyBytes);
PrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec);

EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyBytes);
PublicKey publicKey = keyFactory.generatePublic(publicKeySpec);
</code></pre>

<p>What I don't like is to tie the code to concrete implementations such as <code>PKCS8EncodedKeySpec</code> and <code>X509EncodedKeySpec</code>.</p>

<p><strong>Option 2: store the modulus and exponent</strong></p>

<pre><code>KeyFactory fact = KeyFactory.getInstance(""RSA"");
RSAPublicKeySpec pub = fact.getKeySpec(publicKey, RSAPublicKeySpec.class);
RSAPrivateKeySpec priv = fact.getKeySpec(privateKey,RSAPrivateKeySpec.class);

// store modulus and exponent as BigIntegers
BigInteger modulus = pub.getModulus());
BigInteger exponent = pub.getPublicExponent());
// ... write to file

// recreate public key (the same applies to the private key)
RSAPublicKeySpec keySpec = new RSAPublicKeySpec(modulus, exponent);
KeyFactory fact = KeyFactory.getInstance(""RSA"");
PublicKey pubKey = fact.generatePublic(keySpec);
</code></pre>

<p>The second option is easier to implement, but I don't know if it could be less performant.</p>

<p>Any advise ?</p>
","<p>If you want to define a format for storing the keys, then I would choose a format that is expendable so that it doesn't break when you want to change encryption (when the old one gets to weak for example).</p>

<p>So i would store the bytes encoded as base64, together with a string that describes the format, ""rsa"" maybe.</p>
","16193","<java><encryption><encryption-asymmetric>","12","1","3","2010-08-09 21:52:08","3441659","0","14","","","","2010-08-09 15:18:56",""
"3441501","Java asymmetric encryption: preferred way to store public/private keys","<p>This code generates a pair of public/private keys:</p>

<pre><code>KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
keyGen.initialize(1024);
KeyPair keypair = keyGen.genKeyPair();
PrivateKey privateKey = keypair.getPrivate();
PublicKey publicKey = keypair.getPublic();
</code></pre>

<p>What I'd like to know is how do you usually store the public key:</p>

<p><strong>Option 1: store the bytes</strong></p>

<pre><code>byte[] privateKeyBytes = privateKey.getEncoded();
byte[] publicKeyBytes = publicKey.getEncoded();
// ... write to file

// convert bytes back to public/private keys
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyBytes);
PrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec);

EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyBytes);
PublicKey publicKey = keyFactory.generatePublic(publicKeySpec);
</code></pre>

<p>What I don't like is to tie the code to concrete implementations such as <code>PKCS8EncodedKeySpec</code> and <code>X509EncodedKeySpec</code>.</p>

<p><strong>Option 2: store the modulus and exponent</strong></p>

<pre><code>KeyFactory fact = KeyFactory.getInstance(""RSA"");
RSAPublicKeySpec pub = fact.getKeySpec(publicKey, RSAPublicKeySpec.class);
RSAPrivateKeySpec priv = fact.getKeySpec(privateKey,RSAPrivateKeySpec.class);

// store modulus and exponent as BigIntegers
BigInteger modulus = pub.getModulus());
BigInteger exponent = pub.getPublicExponent());
// ... write to file

// recreate public key (the same applies to the private key)
RSAPublicKeySpec keySpec = new RSAPublicKeySpec(modulus, exponent);
KeyFactory fact = KeyFactory.getInstance(""RSA"");
PublicKey pubKey = fact.generatePublic(keySpec);
</code></pre>

<p>The second option is easier to implement, but I don't know if it could be less performant.</p>

<p>Any advise ?</p>
","<p>In our applications, we store public and private keys in DER format so they can be used and manipulated outside java more easily.  In our case, the private keys do not have passwords on them.</p>

<p>To convert the private key to something more easily usable in java:</p>

<pre><code>openssl pkcs8 -topk8 -nocrypt -in key.pem -inform PEM -out key.der -outform DER
</code></pre>

<p>Then you can obtain an RSA private key directly by:</p>

<pre><code>public static RSAPrivateKey getPrivateKey(File privateKeyFile) throws IOException, GeneralSecurityException {
    byte[] keyBytes = new byte[(int)privateKeyFile.length()];
    FileInputStream fis = new FileInputStream(privateKeyFile);
    fis.read(keyBytes);
    PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
    KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
    RSAPrivateKey privKey = (RSAPrivateKey) keyFactory.generatePrivate(spec);
    return privKey;
}
</code></pre>

<p>The public key is similar:</p>

<pre><code>openssl rsa -in private.pem -pubout -outform DER -out public.der
</code></pre>

<p>and to read it:</p>

<pre><code>public static RSAPublicKey getPublicKey(File publicKeyFile) throws IOException, GeneralSecurityException {
    byte[] keyBytes = new byte[(int)publicKeyFile.length()];
    FileInputStream fis = new FileInputStream(publicKeyFile);
    fis.read(keyBytes);
    X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(keyBytes);
    KeyFactory factory = KeyFactory.getInstance(""RSA"");
    RSAPublicKey pubKey = (RSAPublicKey)factory.generatePublic(publicKeySpec);
    return pubKey;
}
</code></pre>

<p>Many people store then keystores.  For our purposes, we needed the same key to be shared across multiple applications in several different languages, and didn't want to duplicate the files on disk.  </p>

<p>In either case, the performance shouldn't be a huge concern, because you're likely to store those keys in some sort of Singleton or cache instead of regenerating them each time.</p>
","16193","<java><encryption><encryption-asymmetric>","12","13","3","2010-08-09 21:52:08","3441659","0","14","","","","2010-08-09 15:18:56",""
"3441501","Java asymmetric encryption: preferred way to store public/private keys","<p>This code generates a pair of public/private keys:</p>

<pre><code>KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
keyGen.initialize(1024);
KeyPair keypair = keyGen.genKeyPair();
PrivateKey privateKey = keypair.getPrivate();
PublicKey publicKey = keypair.getPublic();
</code></pre>

<p>What I'd like to know is how do you usually store the public key:</p>

<p><strong>Option 1: store the bytes</strong></p>

<pre><code>byte[] privateKeyBytes = privateKey.getEncoded();
byte[] publicKeyBytes = publicKey.getEncoded();
// ... write to file

// convert bytes back to public/private keys
KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyBytes);
PrivateKey privateKey = keyFactory.generatePrivate(privateKeySpec);

EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(publicKeyBytes);
PublicKey publicKey = keyFactory.generatePublic(publicKeySpec);
</code></pre>

<p>What I don't like is to tie the code to concrete implementations such as <code>PKCS8EncodedKeySpec</code> and <code>X509EncodedKeySpec</code>.</p>

<p><strong>Option 2: store the modulus and exponent</strong></p>

<pre><code>KeyFactory fact = KeyFactory.getInstance(""RSA"");
RSAPublicKeySpec pub = fact.getKeySpec(publicKey, RSAPublicKeySpec.class);
RSAPrivateKeySpec priv = fact.getKeySpec(privateKey,RSAPrivateKeySpec.class);

// store modulus and exponent as BigIntegers
BigInteger modulus = pub.getModulus());
BigInteger exponent = pub.getPublicExponent());
// ... write to file

// recreate public key (the same applies to the private key)
RSAPublicKeySpec keySpec = new RSAPublicKeySpec(modulus, exponent);
KeyFactory fact = KeyFactory.getInstance(""RSA"");
PublicKey pubKey = fact.generatePublic(keySpec);
</code></pre>

<p>The second option is easier to implement, but I don't know if it could be less performant.</p>

<p>Any advise ?</p>
","<p>You're actually storing the bytes in both cases whether you realize it or not. I suppose the correct answer is hinted at in @Brian M. Carr answer, which is to store the higher-level object in its most natural form. In the case of public keys, the obvious choices are as a PKCS#1 RSAPublicKey ASN.1 structure, DER-encoded, or as an X509 SubjectPublicKeyInfo ASN.1 structure, DER-encoded. The latter is what the Sun providers give you, which the sun class X509EncodedKeySpec supports. Similarly, the PKCS8EncodedKeySpec supports a private key format. Both these formats are standards, and are supported by openssl for example. Sun tends -- tended :( -- to support existing standards rather then define their own.</p>
","16193","<java><encryption><encryption-asymmetric>","12","2","3","2010-08-09 21:52:08","3441659","0","14","","","","2010-08-09 15:18:56",""
"4124182","C/C++ encrypt/decrypt with public key","<p>I'm looking for two functions conceptually similar to these:</p>

<pre><code>// returns the encrypted text
string encrypt( string public_key, string pass_phrase, string text );
// returns the original text
string decrypt( string private_key, string pass_phrase, string encrypted_text );
</code></pre>

<p>where <code>string</code> could be a <code>char*</code>, a <code>std::string</code> or something easily convertible to those two. And where <code>public_key</code> and <code>private_key</code> can be basically anything, from keys generated with some commands (gpg/ssl stuff or whatever), to keys generated with other <strong>simple</strong> functions.</p>

<p>I've looked into a few cryptography libraries (libgcrypt, libgpgme, openssl ...), but it doesn't look easy at all to implement such functions with those libraries: they require a non-superficial knowledge about asymmetric encryption and a lot of code.</p>

<p>Anyway this task doesn't seem uncommon.
How can I implement the two functions above?</p>
","<p>Assuming you don’t need something platform agnostic, Cryptography Next Generation (CNG) is a relatively new cryptography API on Windows and is surprisingly intuitive and easy to use. I wrote an article that includes examples of all the main cryptographic operations you’re likely to need in typical applications. The sample code for the article also provides a complete working example for these operations using the Visual C++ compiler.</p>

<p><a href=""http://msdn.microsoft.com/en-us/magazine/cc163389.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/magazine/cc163389.aspx</a></p>

<p>To treat public and private keys as strings you could simply use Base64 or a similar encoding.</p>
","15780","<c++><c><encryption-asymmetric>","13","0","3","2018-04-27 18:12:04","4124269","5","3","18192","","2010-11-08 15:15:16","2010-11-08 13:20:04",""
"4124182","C/C++ encrypt/decrypt with public key","<p>I'm looking for two functions conceptually similar to these:</p>

<pre><code>// returns the encrypted text
string encrypt( string public_key, string pass_phrase, string text );
// returns the original text
string decrypt( string private_key, string pass_phrase, string encrypted_text );
</code></pre>

<p>where <code>string</code> could be a <code>char*</code>, a <code>std::string</code> or something easily convertible to those two. And where <code>public_key</code> and <code>private_key</code> can be basically anything, from keys generated with some commands (gpg/ssl stuff or whatever), to keys generated with other <strong>simple</strong> functions.</p>

<p>I've looked into a few cryptography libraries (libgcrypt, libgpgme, openssl ...), but it doesn't look easy at all to implement such functions with those libraries: they require a non-superficial knowledge about asymmetric encryption and a lot of code.</p>

<p>Anyway this task doesn't seem uncommon.
How can I implement the two functions above?</p>
","<p>Unfortunately, encryption <em>always</em> requires a non-superficial knowledge of the algorithms involved. It is hard to get right. The ""Handbook of Applied Cryptography"" is a relatively readable guide to the various algorithms available so it's probably worth a look.</p>

<p>You could also try <a href=""http://www.cs.auckland.ac.nz/~pgut001/cryptlib/"">cryptlib</a>. It seems to have a well-layered design that gives you sensible defaults for a lot of parameters so you can hopefully get started without having to worry too much about the details.</p>
","15780","<c++><c><encryption-asymmetric>","13","7","3","2018-04-27 18:12:04","4124269","5","3","18192","","2010-11-08 15:15:16","2010-11-08 13:20:04",""
"4124182","C/C++ encrypt/decrypt with public key","<p>I'm looking for two functions conceptually similar to these:</p>

<pre><code>// returns the encrypted text
string encrypt( string public_key, string pass_phrase, string text );
// returns the original text
string decrypt( string private_key, string pass_phrase, string encrypted_text );
</code></pre>

<p>where <code>string</code> could be a <code>char*</code>, a <code>std::string</code> or something easily convertible to those two. And where <code>public_key</code> and <code>private_key</code> can be basically anything, from keys generated with some commands (gpg/ssl stuff or whatever), to keys generated with other <strong>simple</strong> functions.</p>

<p>I've looked into a few cryptography libraries (libgcrypt, libgpgme, openssl ...), but it doesn't look easy at all to implement such functions with those libraries: they require a non-superficial knowledge about asymmetric encryption and a lot of code.</p>

<p>Anyway this task doesn't seem uncommon.
How can I implement the two functions above?</p>
","<p>When someone asks for easy encryption, I can only recommend <a href=""https://github.com/google/keyczar"" rel=""nofollow noreferrer"">KeyCzar</a>.</p>

<p>It not only provides a clean interface in several languages (that can use the same keys) but also mechanisms to handle key rotations and the like.</p>

<p>And of course, safe defaults for the algorithms implemented so that you don't have to worry about the technical details.</p>

<p>Really, the better easy &amp; safe combination I've seen so far.</p>
","15780","<c++><c><encryption-asymmetric>","13","5","3","2018-04-27 18:12:04","4124269","5","3","18192","","2010-11-08 15:15:16","2010-11-08 13:20:04",""
"8417993","RSA Encryption of large data in C#","<p>This is my first post, so hope I haven't missed anything important. I'm doing a project in C# where I need to use public/private key encryption to encrypt a message and then send it over an SSL connection.</p>

<p>I chose to use the <code>RSACryptoService</code>, as according to the documentation, that was the only asymmetric encryption scheme used for encrypting data. The problem is  that I am having a lot of problems with this. (I wanted to do symmetric encryption, but that is not what my teacher want me to do, and according to him it should be easy to just determine a block size and then it should do all the work for you.) Well, so far no luck and I've tried some different approaches, but now I'm back to basics and trying again, this is my current code:</p>

<pre><code>    public string[] GenerateKeysToStrings(string uniqueIdentifier)
    {
        string[] keys;
        using (var rsa = new RSACryptoServiceProvider(4096))
        {
            try
            {
                string privateKey = rsa.ToXmlString(true);
                string publicKey = rsa.ToXmlString(false);

                this.pki.StoreKey(publicKey, uniqueIdentifier);

                keys = new string[2];
                keys[0] = privateKey;
                keys[1] = publicKey;
            }
            finally
            {
                //// Clear the RSA key container, deleting generated keys.
                rsa.PersistKeyInCsp = false;
            }
        }
        return keys;
    }
</code></pre>

<p>As you can see, I generate the keys and I mimmick a PKI by sending the public key to a simple class that stores it, and then the private key is written to a file
(Notice that I also have another method that does the same but stores it to an array instead, just because I wanted to test and simplify things as I get <code>No such key exceptions</code> and sometimes cryptographic exceptions when I do it the way shown in the example, so I wanted to simplify it by simply storing the <code>rsa.ToXmlString</code> string, as a string in an array, but no luck.)</p>

<p>Now I have an encrypt and decrypt method as follows:</p>

<pre><code>    public string Encrypt(string keyString, string message)
    {
        string encryptedMessage;
        using (var rsa = new RSACryptoServiceProvider())
        {
            try
            {
                //// Load the key from the specified path
                var encryptKey = new XmlDocument();
                encryptKey.Load(@""C:\Test\PrivateKeyInfo.xml"");
                rsa.FromXmlString(encryptKey.OuterXml);


                //// Conver the string message to a byte array for encryption
                //// var encoder = new UTF8Encoding();
                ASCIIEncoding byteConverter = new ASCIIEncoding();
                byte[] dataToEncrypt = byteConverter.GetBytes(message);

                byte[] encryptedData = rsa.Encrypt(dataToEncrypt, false);

                //// Convert the byte array back to a string message
                encryptedMessage = byteConverter.GetString(encryptedData);
            }
            finally
            {
                //// Clear the RSA key container, deleting generated keys.
                rsa.PersistKeyInCsp = false;
            }
        }
        return encryptedMessage;
    }
</code></pre>

<p>Decryption:</p>

<pre><code>    public string Decrypt(string keyString, string message)
    {
        string decryptedText;
        using (var rsa = new RSACryptoServiceProvider())
        {
            try
            {
                //// Loads the keyinfo into the rsa parameters from the keyfile
                /*
                var privateKey = new XmlDocument();
                privateKey.Load(keyString);
                 */
                rsa.FromXmlString(keyString);

                //// Convert the text from string to byte array for decryption
                ASCIIEncoding byteConverter = new ASCIIEncoding();
                var encryptedBytes = byteConverter.GetBytes(message);

                //// Create an aux array to store all the encrypted bytes
                byte[] decryptedBytes = rsa.Decrypt(encryptedBytes, false);

                decryptedText = byteConverter.GetString(decryptedBytes);
            }
            finally
            {
                //// Clear the RSA key container, deleting generated keys.
                rsa.PersistKeyInCsp = false;
            }
        }
        return decryptedText;
    }
</code></pre>

<p>I know that this is a wall of text, but I hope you can help me out because I've been banging my head against the wall for so long now it's not funny :)</p>

<p>The problem is, how do I go about encrypting messages with <code>RSA</code> (or any other public/private key encryption)</p>

<p>Here is the Test client:</p>

<pre><code>    public static void Main(string[] args)
    {
        PublicKeyInfrastructure pki = new PublicKeyInfrastructure();
        Cryptograph crypto = new Cryptograph();
        string[] keys = crypto.GenerateKeysToStrings(""simonlanghoff@gmail.com"");


        string plainText = ""Hello play with me, please"";
        string publicKey = crypto.GetPublicKey(""simonlanghoff@gmail.com"");

        string encryptedText = crypto.Encrypt(keys[0], plainText);


        string decryptedText = crypto.Decrypt(keys[1], encryptedText);

    }
</code></pre>

<p>As I mentioned, the string arrays are there because I wanted to eliminate bad parsing error from XML documents...</p>

<p>When I run the test client, if I use the private key to encrypt and public key to decrypt, I get a ""Key does not exist exception"" and if I do it the other way around, I get a bad data exception.</p>

<p>Please help me out guys, if you know of any good guide, or can tell me how to somewhat straightfoward implement public/private key encryption on string messages, please help me out.</p>

<p>I appreciate any help.</p>
","<p>This is not how RSA encryption should be done. </p>

<p>RSA is all about math. What you encrypt is a number so it has to be of finite length and matching the RSA keypair length you're using. Further length limitations are imposed by the padding used (either PKCS#1 or OAEP).</p>

<p>If you want to encrypt large data with RSA you need to do it indirectly - i.e. use a symmetric key to encrypt the large data and encrypt this key using the RSA public key.</p>

<p>You can read about implementing this on my <a href=""http://pages.infinit.net/ctech/20031101-0151.html"" rel=""nofollow"">blog</a>.</p>
","15654","<c#><encryption><rsa><encryption-asymmetric>","8","6","3","2016-06-24 08:41:09","8418238","0","4","708817","","2011-12-07 17:01:09","2011-12-07 15:37:55",""
"8417993","RSA Encryption of large data in C#","<p>This is my first post, so hope I haven't missed anything important. I'm doing a project in C# where I need to use public/private key encryption to encrypt a message and then send it over an SSL connection.</p>

<p>I chose to use the <code>RSACryptoService</code>, as according to the documentation, that was the only asymmetric encryption scheme used for encrypting data. The problem is  that I am having a lot of problems with this. (I wanted to do symmetric encryption, but that is not what my teacher want me to do, and according to him it should be easy to just determine a block size and then it should do all the work for you.) Well, so far no luck and I've tried some different approaches, but now I'm back to basics and trying again, this is my current code:</p>

<pre><code>    public string[] GenerateKeysToStrings(string uniqueIdentifier)
    {
        string[] keys;
        using (var rsa = new RSACryptoServiceProvider(4096))
        {
            try
            {
                string privateKey = rsa.ToXmlString(true);
                string publicKey = rsa.ToXmlString(false);

                this.pki.StoreKey(publicKey, uniqueIdentifier);

                keys = new string[2];
                keys[0] = privateKey;
                keys[1] = publicKey;
            }
            finally
            {
                //// Clear the RSA key container, deleting generated keys.
                rsa.PersistKeyInCsp = false;
            }
        }
        return keys;
    }
</code></pre>

<p>As you can see, I generate the keys and I mimmick a PKI by sending the public key to a simple class that stores it, and then the private key is written to a file
(Notice that I also have another method that does the same but stores it to an array instead, just because I wanted to test and simplify things as I get <code>No such key exceptions</code> and sometimes cryptographic exceptions when I do it the way shown in the example, so I wanted to simplify it by simply storing the <code>rsa.ToXmlString</code> string, as a string in an array, but no luck.)</p>

<p>Now I have an encrypt and decrypt method as follows:</p>

<pre><code>    public string Encrypt(string keyString, string message)
    {
        string encryptedMessage;
        using (var rsa = new RSACryptoServiceProvider())
        {
            try
            {
                //// Load the key from the specified path
                var encryptKey = new XmlDocument();
                encryptKey.Load(@""C:\Test\PrivateKeyInfo.xml"");
                rsa.FromXmlString(encryptKey.OuterXml);


                //// Conver the string message to a byte array for encryption
                //// var encoder = new UTF8Encoding();
                ASCIIEncoding byteConverter = new ASCIIEncoding();
                byte[] dataToEncrypt = byteConverter.GetBytes(message);

                byte[] encryptedData = rsa.Encrypt(dataToEncrypt, false);

                //// Convert the byte array back to a string message
                encryptedMessage = byteConverter.GetString(encryptedData);
            }
            finally
            {
                //// Clear the RSA key container, deleting generated keys.
                rsa.PersistKeyInCsp = false;
            }
        }
        return encryptedMessage;
    }
</code></pre>

<p>Decryption:</p>

<pre><code>    public string Decrypt(string keyString, string message)
    {
        string decryptedText;
        using (var rsa = new RSACryptoServiceProvider())
        {
            try
            {
                //// Loads the keyinfo into the rsa parameters from the keyfile
                /*
                var privateKey = new XmlDocument();
                privateKey.Load(keyString);
                 */
                rsa.FromXmlString(keyString);

                //// Convert the text from string to byte array for decryption
                ASCIIEncoding byteConverter = new ASCIIEncoding();
                var encryptedBytes = byteConverter.GetBytes(message);

                //// Create an aux array to store all the encrypted bytes
                byte[] decryptedBytes = rsa.Decrypt(encryptedBytes, false);

                decryptedText = byteConverter.GetString(decryptedBytes);
            }
            finally
            {
                //// Clear the RSA key container, deleting generated keys.
                rsa.PersistKeyInCsp = false;
            }
        }
        return decryptedText;
    }
</code></pre>

<p>I know that this is a wall of text, but I hope you can help me out because I've been banging my head against the wall for so long now it's not funny :)</p>

<p>The problem is, how do I go about encrypting messages with <code>RSA</code> (or any other public/private key encryption)</p>

<p>Here is the Test client:</p>

<pre><code>    public static void Main(string[] args)
    {
        PublicKeyInfrastructure pki = new PublicKeyInfrastructure();
        Cryptograph crypto = new Cryptograph();
        string[] keys = crypto.GenerateKeysToStrings(""simonlanghoff@gmail.com"");


        string plainText = ""Hello play with me, please"";
        string publicKey = crypto.GetPublicKey(""simonlanghoff@gmail.com"");

        string encryptedText = crypto.Encrypt(keys[0], plainText);


        string decryptedText = crypto.Decrypt(keys[1], encryptedText);

    }
</code></pre>

<p>As I mentioned, the string arrays are there because I wanted to eliminate bad parsing error from XML documents...</p>

<p>When I run the test client, if I use the private key to encrypt and public key to decrypt, I get a ""Key does not exist exception"" and if I do it the other way around, I get a bad data exception.</p>

<p>Please help me out guys, if you know of any good guide, or can tell me how to somewhat straightfoward implement public/private key encryption on string messages, please help me out.</p>

<p>I appreciate any help.</p>
","<p>Maybe I'm missing something, but it looks like your Encrypt() function doesn't make use of either the <code>keyString</code> parameter or the contents of <code>encryptKey</code>.</p>
","15654","<c#><encryption><rsa><encryption-asymmetric>","8","0","3","2016-06-24 08:41:09","8418238","0","4","708817","","2011-12-07 17:01:09","2011-12-07 15:37:55",""
"8417993","RSA Encryption of large data in C#","<p>This is my first post, so hope I haven't missed anything important. I'm doing a project in C# where I need to use public/private key encryption to encrypt a message and then send it over an SSL connection.</p>

<p>I chose to use the <code>RSACryptoService</code>, as according to the documentation, that was the only asymmetric encryption scheme used for encrypting data. The problem is  that I am having a lot of problems with this. (I wanted to do symmetric encryption, but that is not what my teacher want me to do, and according to him it should be easy to just determine a block size and then it should do all the work for you.) Well, so far no luck and I've tried some different approaches, but now I'm back to basics and trying again, this is my current code:</p>

<pre><code>    public string[] GenerateKeysToStrings(string uniqueIdentifier)
    {
        string[] keys;
        using (var rsa = new RSACryptoServiceProvider(4096))
        {
            try
            {
                string privateKey = rsa.ToXmlString(true);
                string publicKey = rsa.ToXmlString(false);

                this.pki.StoreKey(publicKey, uniqueIdentifier);

                keys = new string[2];
                keys[0] = privateKey;
                keys[1] = publicKey;
            }
            finally
            {
                //// Clear the RSA key container, deleting generated keys.
                rsa.PersistKeyInCsp = false;
            }
        }
        return keys;
    }
</code></pre>

<p>As you can see, I generate the keys and I mimmick a PKI by sending the public key to a simple class that stores it, and then the private key is written to a file
(Notice that I also have another method that does the same but stores it to an array instead, just because I wanted to test and simplify things as I get <code>No such key exceptions</code> and sometimes cryptographic exceptions when I do it the way shown in the example, so I wanted to simplify it by simply storing the <code>rsa.ToXmlString</code> string, as a string in an array, but no luck.)</p>

<p>Now I have an encrypt and decrypt method as follows:</p>

<pre><code>    public string Encrypt(string keyString, string message)
    {
        string encryptedMessage;
        using (var rsa = new RSACryptoServiceProvider())
        {
            try
            {
                //// Load the key from the specified path
                var encryptKey = new XmlDocument();
                encryptKey.Load(@""C:\Test\PrivateKeyInfo.xml"");
                rsa.FromXmlString(encryptKey.OuterXml);


                //// Conver the string message to a byte array for encryption
                //// var encoder = new UTF8Encoding();
                ASCIIEncoding byteConverter = new ASCIIEncoding();
                byte[] dataToEncrypt = byteConverter.GetBytes(message);

                byte[] encryptedData = rsa.Encrypt(dataToEncrypt, false);

                //// Convert the byte array back to a string message
                encryptedMessage = byteConverter.GetString(encryptedData);
            }
            finally
            {
                //// Clear the RSA key container, deleting generated keys.
                rsa.PersistKeyInCsp = false;
            }
        }
        return encryptedMessage;
    }
</code></pre>

<p>Decryption:</p>

<pre><code>    public string Decrypt(string keyString, string message)
    {
        string decryptedText;
        using (var rsa = new RSACryptoServiceProvider())
        {
            try
            {
                //// Loads the keyinfo into the rsa parameters from the keyfile
                /*
                var privateKey = new XmlDocument();
                privateKey.Load(keyString);
                 */
                rsa.FromXmlString(keyString);

                //// Convert the text from string to byte array for decryption
                ASCIIEncoding byteConverter = new ASCIIEncoding();
                var encryptedBytes = byteConverter.GetBytes(message);

                //// Create an aux array to store all the encrypted bytes
                byte[] decryptedBytes = rsa.Decrypt(encryptedBytes, false);

                decryptedText = byteConverter.GetString(decryptedBytes);
            }
            finally
            {
                //// Clear the RSA key container, deleting generated keys.
                rsa.PersistKeyInCsp = false;
            }
        }
        return decryptedText;
    }
</code></pre>

<p>I know that this is a wall of text, but I hope you can help me out because I've been banging my head against the wall for so long now it's not funny :)</p>

<p>The problem is, how do I go about encrypting messages with <code>RSA</code> (or any other public/private key encryption)</p>

<p>Here is the Test client:</p>

<pre><code>    public static void Main(string[] args)
    {
        PublicKeyInfrastructure pki = new PublicKeyInfrastructure();
        Cryptograph crypto = new Cryptograph();
        string[] keys = crypto.GenerateKeysToStrings(""simonlanghoff@gmail.com"");


        string plainText = ""Hello play with me, please"";
        string publicKey = crypto.GetPublicKey(""simonlanghoff@gmail.com"");

        string encryptedText = crypto.Encrypt(keys[0], plainText);


        string decryptedText = crypto.Decrypt(keys[1], encryptedText);

    }
</code></pre>

<p>As I mentioned, the string arrays are there because I wanted to eliminate bad parsing error from XML documents...</p>

<p>When I run the test client, if I use the private key to encrypt and public key to decrypt, I get a ""Key does not exist exception"" and if I do it the other way around, I get a bad data exception.</p>

<p>Please help me out guys, if you know of any good guide, or can tell me how to somewhat straightfoward implement public/private key encryption on string messages, please help me out.</p>

<p>I appreciate any help.</p>
","<p>Okay, I've finally come up with a solution to the problem I stated in my original post. This is something I haven't thoroughly tested or anything, but something I figured out from a little trial and error process.</p>

<p>Here is the current code I have:</p>

<pre><code>    public static string Encrypt(string dataToEncrypt, RSAParameters publicKeyInfo)
    {
        //// Our bytearray to hold all of our data after the encryption
        byte[] encryptedBytes = new byte[0];
        using (var RSA = new RSACryptoServiceProvider())
        {
            try
            {
                //Create a new instance of RSACryptoServiceProvider.
                UTF8Encoding encoder = new UTF8Encoding();

                byte[] encryptThis = encoder.GetBytes(dataToEncrypt);

                //// Importing the public key
                RSA.ImportParameters(publicKeyInfo);

                int blockSize = (RSA.KeySize / 8) - 32;

                //// buffer to write byte sequence of the given block_size
                byte[] buffer = new byte[blockSize];

                byte[] encryptedBuffer = new byte[blockSize];

                //// Initializing our encryptedBytes array to a suitable size, depending on the size of data to be encrypted
                encryptedBytes = new byte[encryptThis.Length + blockSize - (encryptThis.Length % blockSize) + 32];

                for (int i = 0; i &lt; encryptThis.Length; i += blockSize)
                {
                    //// If there is extra info to be parsed, but not enough to fill out a complete bytearray, fit array for last bit of data
                    if (2 * i &gt; encryptThis.Length &amp;&amp; ((encryptThis.Length - i) % blockSize != 0))
                    {
                        buffer = new byte[encryptThis.Length - i];
                        blockSize = encryptThis.Length - i;
                    }

                    //// If the amount of bytes we need to decrypt isn't enough to fill out a block, only decrypt part of it
                    if (encryptThis.Length &lt; blockSize)
                    {
                        buffer = new byte[encryptThis.Length];
                        blockSize = encryptThis.Length;
                    }

                    //// encrypt the specified size of data, then add to final array.
                    Buffer.BlockCopy(encryptThis, i, buffer, 0, blockSize);
                    encryptedBuffer = RSA.Encrypt(buffer, false);
                    encryptedBuffer.CopyTo(encryptedBytes, i);
                }
            }
            catch (CryptographicException e)
            {
                Console.Write(e);
            }
            finally
            {
                //// Clear the RSA key container, deleting generated keys.
                RSA.PersistKeyInCsp = false;
            }
        }
        //// Convert the byteArray using Base64 and returns as an encrypted string
        return Convert.ToBase64String(encryptedBytes);
    }

    /// &lt;summary&gt;
    /// Decrypt this message using this key
    /// &lt;/summary&gt;
    /// &lt;param name=""dataToDecrypt""&gt;
    /// The data To decrypt.
    /// &lt;/param&gt;
    /// &lt;param name=""privateKeyInfo""&gt;
    /// The private Key Info.
    /// &lt;/param&gt;
    /// &lt;returns&gt;
    /// The decrypted data.
    /// &lt;/returns&gt;
    public static string Decrypt(string dataToDecrypt, RSAParameters privateKeyInfo)
    {
        //// The bytearray to hold all of our data after decryption
        byte[] decryptedBytes;

        //Create a new instance of RSACryptoServiceProvider.
        using (RSACryptoServiceProvider RSA = new RSACryptoServiceProvider())
        {
            try
            {
                byte[] bytesToDecrypt = Convert.FromBase64String(dataToDecrypt);

                //// Import the private key info
                RSA.ImportParameters(privateKeyInfo);

                //// No need to subtract padding size when decrypting (OR do I?)
                int blockSize = RSA.KeySize / 8;

                //// buffer to write byte sequence of the given block_size
                byte[] buffer = new byte[blockSize];

                //// buffer containing decrypted information
                byte[] decryptedBuffer = new byte[blockSize];

                //// Initializes our array to make sure it can hold at least the amount needed to decrypt.
                decryptedBytes = new byte[dataToDecrypt.Length];

                for (int i = 0; i &lt; bytesToDecrypt.Length; i += blockSize)
                {
                    if (2 * i &gt; bytesToDecrypt.Length &amp;&amp; ((bytesToDecrypt.Length - i) % blockSize != 0))
                    {
                        buffer = new byte[bytesToDecrypt.Length - i];
                        blockSize = bytesToDecrypt.Length - i;
                    }

                    //// If the amount of bytes we need to decrypt isn't enough to fill out a block, only decrypt part of it
                    if (bytesToDecrypt.Length &lt; blockSize)
                    {
                        buffer = new byte[bytesToDecrypt.Length];
                        blockSize = bytesToDecrypt.Length;
                    }

                    Buffer.BlockCopy(bytesToDecrypt, i, buffer, 0, blockSize);
                    decryptedBuffer = RSA.Decrypt(buffer, false);
                    decryptedBuffer.CopyTo(decryptedBytes, i);
                }
            }
            finally
            {
                //// Clear the RSA key container, deleting generated keys.
                RSA.PersistKeyInCsp = false;
            }
        }

        //// We encode each byte with UTF8 and then write to a string while trimming off the extra empty data created by the overhead.
        var encoder = new UTF8Encoding();
        return encoder.GetString(decryptedBytes).TrimEnd(new[] { '\0' });

    }
</code></pre>

<p>As I said, I have not tested it much, other than sizes below, at and above the block-size, but it seems to be doing what it should. I am still a novice, so I would really like for you to scrutinize my code :)</p>
","15654","<c#><encryption><rsa><encryption-asymmetric>","8","2","3","2016-06-24 08:41:09","8418238","0","4","708817","","2011-12-07 17:01:09","2011-12-07 15:37:55",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>Use the OpenSSL <a href=""https://www.openssl.org/docs/manmaster/man1/speed.html"" rel=""nofollow noreferrer""><code>speed</code></a> command to benchmark the algorithms and see for yourself.</p>

<pre><code>[dave@hal9000 ~]$ openssl speed aes-128-cbc
Doing aes-128 cbc for 3s on 16 size blocks: 26126940 aes-128 cbc's in 3.00s
Doing aes-128 cbc for 3s on 64 size blocks: 7160075 aes-128 cbc's in 3.00s
...
The 'numbers' are in 1000s of bytes per second processed.
type             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes
aes-128 cbc     139343.68k   152748.27k   155215.70k   155745.61k   157196.29k


[dave@hal9000 ~]$ openssl speed rsa2048
Doing 2048 bit private rsa's for 10s: 9267 2048 bit private RSA's in 9.99s
Doing 2048 bit public rsa's for 10s: 299665 2048 bit public RSA's in 9.99s
...
                  sign    verify    sign/s verify/s
rsa 2048 bits 0.001078s 0.000033s    927.6  29996.5
</code></pre>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","7","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>Apparently it is 1000x worse.  (<a href=""http://windowsitpro.com/article/articleid/93787/symmetric-vs-asymmetric-ciphers.html"" rel=""nofollow noreferrer"">http://windowsitpro.com/article/articleid/93787/symmetric-vs-asymmetric-ciphers.html</a>).  But unless you're really working through a lot of data it isn't going to matter.  What you can do is use asymmetric encryption to exchange a symmetric encryption key.  </p>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","2","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>Practical PKI-based encryption systems use asymmetric encryption to encrypt a symmetric key, and then symmetric encryption with that key to encrypt the data (having said that, someone will point out a counter-example).</p>

<p>So the additional overhead imposed by asymmetric crypto algorithms over that of symmetric is fixed - it doesn't depend on the data size, just on the key sizes.</p>

<p>Last time I tested this, validating a chain of 3 or so X.509 certificates [edit to add: and the data they were signing] was taking a fraction of a second on an ARM running at 100MHz or so (averaged over many repetitions, obviously). I can't remember how small - not negligible, but well under a second.</p>

<p>Sorry I can't remember the exact details, but the summary is that unless you're on a very restricted system or doing a lot of encryption (like if you want to accept as many as possible SSL connections a second), NIST-approved asymmetric encryption methods are fast.</p>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","4","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>Yes, purely asymmetric encryption is much slower than symmetric cyphers (like DES or AES), which is why real applications use <a href=""http://en.wikipedia.org/wiki/Hybrid_cryptosystem"" rel=""noreferrer"">hybrid cryptography</a>: the expensive public-key operations are performed only to encrypt (and exchange) an encryption key for the symmetric algorithm that is going to be used for encrypting the real message.</p>

<p>The problem that public-key cryptography solves is that there is no shared secret. With a symmetric encryption you have to trust all involved parties to keep the key secret. This issue should be a much bigger concern than performance (which can be mitigated with a hybrid approach)</p>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","27","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>Perhaps you can add some details about your project so that you get better quality answers.  What are you trying to secure?  From whom?  If you could explain the requirements of your security, you'll get a much better answer.  Performance doesn't mean much if the encryption mechanism isn't protecting what you think it is.</p>

<p>For instance, X509 certs are an industrial standard way of securing client/server endpoints.  PGP armoring can be used to secure license files.  For simplicity, Cipher block chaining with Blowfish (and a host of other ciphers) is easy to use in Perl or Java, if you control both end points.</p>

<p>Thanks.</p>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","0","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>On a Macbook running OS X 10.5.5 and a stock build of OpenSSL, ""openssl speed"" clocks AES-128-CBC at 46,000 1024 bit blocks per second. That same box clocks 1024 bit RSA at 169 signatures per second. AES-128-CBC is the ""textbook"" block encryption algorithm, and RSA 1024 is the ""textbook"" public key algorithm. It's apples-to-oranges, but the answer is: <strong>RSA is much, much slower</strong>.</p>

<p>That's not why you shouldn't be using public key encryption, however. Here's the real reasons:</p>

<ol>
<li><p><strong>Public key crypto operations aren't intended for raw data encryption</strong>. Algorithms like Diffie-Hellman and RSA were devised as a way of exchanging keys for block crypto algorithms. So, for instance, you'd use a secure random number generator to generate a 128 bit random key for AES, and encrypt those 16 bytes with RSA.</p></li>
<li><p><strong>Algorithms like RSA are much less ""user-friendly"" than AES</strong>. With a random key, a plaintext block you feed to AES is going to come out random to anyone without the key. That is actually not the case with RSA, which is --- more so than AES --- just a math equation. So in addition to storing and managing keys properly, you have to be extremely careful with the way you format your RSA plaintext blocks, or you end up with vulnerabilities. </p></li>
<li><p><strong>Public key doesn't work without a key management infrastructure</strong>. If you don't have a scheme to verify public keys, attackers can substitute their own keypairs for the real ones to launch ""man in the middle"" attacks. This is why SSL forces you to go through the rigamarole of certificates. Block crypto algorithms like AES <em>do</em> suffer from this problem too, but without a PKI, AES is no less safe than RSA.</p></li>
<li><p><strong>Public key crypto operations are susceptible to more implementation vulnerabilities than AES</strong>. For example, both sides of an RSA transaction have to agree on <em>parameters</em>, which are numbers fed to the RSA equation. There are evil values attackers can substitute in to silently disable encryption. The same goes for Diffie Hellman and even more so for Elliptic Curve. Another example is the RSA Signature Forgery vulnerability that occurred 2 years ago in multiple high-end SSL implementations.</p></li>
<li><p><strong>Using public key is evidence that you're doing something ""out of the ordinary""</strong>. Out of the ordinary is exactly what you <em>never</em> want to be with cryptography; beyond just the algorithms, crypto <em>designs</em> are audited and tested for years before they're considered safe. </p></li>
</ol>

<p>To our clients who want to use cryptography in their applications, we make two recommendations:</p>

<ul>
<li><p><strong>For ""data at rest"", use PGP</strong>. Really! PGP has been beat up for more than a decade and is considered safe from dumb implementation mistakes. There are open source and commercial variants of it.</p></li>
<li><p><strong>For ""data in flight"", use TLS/SSL</strong>. No security protocol in the world is better understood and better tested than TLS; financial institutions everywhere accept it as a secure method to move the most sensitive data.</p></li>
</ul>

<p><a href=""http://www.matasano.com/log/558/public-key-signature-forgery-collected/"" rel=""noreferrer"">Here's a decent writeup</a> [matasano.com] me and Nate Lawson, a professional cryptographer, wrote up a few years back. It covers these points in more detail.</p>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","24","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"118463","What is the performance difference of pki to symmetric encryption?","<p>We are looking to do some heavy security requirements on our project, and we need to do a lot of encryption that is highly performant.</p>

<p>I think that I know that PKI is much slower and more complex than symmetric encryption, but I can't find the numbers to back up my feelings.</p>
","<p>Yes, the hybrid encryption offered by standardized cryptographic schemes like PGP, TLS, and CMS does impose a fixed performance cost on each message or session. How big that impact is depends on the algorithms selected and which operation you are talking about.</p>

<p>For RSA, decryption and signing operations are relatively slow, because it requires modular exponentiation with a large private exponent. RSA encryption and signature verification, on the other hand, is very fast, because it uses the small public exponent. This difference scales quadratically with the key length.</p>

<p>Under ECC, because peers are doing the same math with keys of similar size, operations are more balanced than RSA. In an integrated encryption scheme, an ephemeral EC key can be generated, and used in a key agreement algorithm; that requires a little extra work for the message sender. ECDH key agreement is much, <em>much</em> slower than RSA encryption, but much faster than RSA decryption.</p>

<p>In terms of relative numbers, decrypting with AES might be 100,000x faster than decrypting with RSA. In terms of absolute numbers, depending heavily on hardware, AES might take a few <em>nanoseconds</em> per block, while RSA takes a <em>millisecond</em> or two. And that prompts the question, why would anyone use asymmetric algorithms, ever?</p>

<p>The answer is that these algorithms are used together, for different purposes, in hybrid encryption schemes. Fast, symmetric algorithms like AES are used to protect the message itself, and slow, asymmetric algorithms like RSA are used in turn to protect the keys needed by the symmetric algorithms. This is what allows parties that have never previously shared any secret information, like you and your search engine, to communicate securely with each other.</p>
","15081","<performance><encryption><encryption-symmetric><encryption-asymmetric>","11","0","7","2019-08-29 17:15:45","118503","0","4","1816580","","2015-08-02 12:08:51","2008-09-23 00:44:31",""
"6116883","Are there any asymmetric encryption options for JavaScript?","<p>I have to transfer some sensitive information over a JavaScript AJAX Call, over an unencrypted channel (HTTP, not HTTPS).</p>

<p>I'd like to encrypt the data, but encryption on the JavaScript side means I expose the key, which makes symmetric encryption only an exercise in security by obscurity.</p>

<p>Is there any asymmetric encryption for JavaScript? That way, I can keep the Server decryption key secret. (I'm not worried about the security of Server > JavaScript messages, only about the security of a certain JavaScript > Server message)</p>
","<p>This question seems to have what you're after, <a href=""https://stackoverflow.com/questions/4176574/javascript-cryptography-library-to-sign-form-data-in-browser"">Javascript cryptography library to sign form data in browser</a> The PGP link: <a href=""http://www.hanewin.net/encrypt/"" rel=""nofollow noreferrer"">http://www.hanewin.net/encrypt/</a> has RSA</p>
","13017","<javascript><security><encryption><encryption-asymmetric><public-key-encryption>","22","3","5","2014-05-16 16:37:16","","0","8","","","","2011-05-24 21:06:16",""
"6116883","Are there any asymmetric encryption options for JavaScript?","<p>I have to transfer some sensitive information over a JavaScript AJAX Call, over an unencrypted channel (HTTP, not HTTPS).</p>

<p>I'd like to encrypt the data, but encryption on the JavaScript side means I expose the key, which makes symmetric encryption only an exercise in security by obscurity.</p>

<p>Is there any asymmetric encryption for JavaScript? That way, I can keep the Server decryption key secret. (I'm not worried about the security of Server > JavaScript messages, only about the security of a certain JavaScript > Server message)</p>
","<p>Are the Server > JavaScript messages sent over HTTPS?</p>

<p>If not, nothing prevents a man in the middle from changing the scripts. Any encryption will be useless if the code that has access to the unencrypted data is compromised.</p>
","13017","<javascript><security><encryption><encryption-asymmetric><public-key-encryption>","22","3","5","2014-05-16 16:37:16","","0","8","","","","2011-05-24 21:06:16",""
"6116883","Are there any asymmetric encryption options for JavaScript?","<p>I have to transfer some sensitive information over a JavaScript AJAX Call, over an unencrypted channel (HTTP, not HTTPS).</p>

<p>I'd like to encrypt the data, but encryption on the JavaScript side means I expose the key, which makes symmetric encryption only an exercise in security by obscurity.</p>

<p>Is there any asymmetric encryption for JavaScript? That way, I can keep the Server decryption key secret. (I'm not worried about the security of Server > JavaScript messages, only about the security of a certain JavaScript > Server message)</p>
","<p>The reason why you need encryption at all is probably to protect against a man-in-the-middle. There are scenarios where an attacker is able to sniff at the traffic without being able to change it. This solution would protect against that threat, but it would provide no protection at all against a man-in-the-middle that is able to modify the traffic. </p>

<p>If the attacker can change the traffic, then he will also be able to change the script that does the encryption. The easiest attack would be to just remove the encryption completely from the script. If you don't have https, and a man-in-the-middle is possible (which is the case in almost every scenario) then you don't have any control at all over the html or javascript that is presented to the end user. The attacker may rewrite your html code and javascript completely, disablign encryption, creating new form fields in your form etc.  Https is a prerequisite for secure communication in the web-channel. </p>
","13017","<javascript><security><encryption><encryption-asymmetric><public-key-encryption>","22","13","5","2014-05-16 16:37:16","","0","8","","","","2011-05-24 21:06:16",""
"6116883","Are there any asymmetric encryption options for JavaScript?","<p>I have to transfer some sensitive information over a JavaScript AJAX Call, over an unencrypted channel (HTTP, not HTTPS).</p>

<p>I'd like to encrypt the data, but encryption on the JavaScript side means I expose the key, which makes symmetric encryption only an exercise in security by obscurity.</p>

<p>Is there any asymmetric encryption for JavaScript? That way, I can keep the Server decryption key secret. (I'm not worried about the security of Server > JavaScript messages, only about the security of a certain JavaScript > Server message)</p>
","<p>I've done it. I use this JavaScript client-side asymetric RSA encryption to prevent the login credentials to be send in plain text over HTTP.</p>

<p>The goal is to prevent login request replay attacks based on network sniffing. Of course, this is not as secure as HTTPS since it would not resist to man-in-the-middle attacks, but it can be sufficient for local networks.</p>

<p>The client-side encryption uses <a href=""http://travistidwell.com/blog/2013/02/15/a-better-library-for-javascript-asymmetrical-rsa-encryption/"" rel=""noreferrer"">Travis Tridwell's excellent work</a> which is based on <a href=""http://www-cs-students.stanford.edu/~tjw/jsbn/"" rel=""noreferrer"">JSBN</a>. Travis' web page can also generate the private and public RSA keys (if you are too lazy to use <code>openssl</code>). The keys are generated in PKCS#1 PEM format. I encrypt <code>username+password+timeInMs+timezone</code> so that the encrypted content changes at each login.</p>

<p>On the server-side, my Java code read read the PKCS#1 PEM file using <a href=""http://oauth.googlecode.com/svn-history/r1178/code/branches/jmeter/jmeter/src/main/java/org/apache/jmeter/protocol/oauth/sampler/PrivateKeyReader.java"" rel=""noreferrer"">Apache JMeter's <code>org.apache.jmeter.protocol.oauth.sampler.PrivateKeyReader</code></a> :</p>

<pre><code>PrivateKey pk = (new PrivateKeyReader(""myPrivateKeyFile.pem"")).getPrivateKey();
</code></pre>

<p>Then I decrypt the encrypted content using </p>

<pre><code>byte[] enc = DatatypeConverter.parseBase64Binary(clientData);
Cipher rsa = Cipher.getInstance(""RSA"");
rsa.init(Cipher.DECRYPT_MODE, pk);
byte[] dec = rsa.doFinal(enc);
String out = new String(dec, ""UTF8"");
</code></pre>

<p>Then I check if the client-side timestamp/timezone match the server-side timestamp/timezone. If the delay is less than a few seconds, the login process continues. Otherwise the request is considered a replay attack and the login fails. </p>
","13017","<javascript><security><encryption><encryption-asymmetric><public-key-encryption>","22","9","5","2014-05-16 16:37:16","","0","8","","","","2011-05-24 21:06:16",""
"6116883","Are there any asymmetric encryption options for JavaScript?","<p>I have to transfer some sensitive information over a JavaScript AJAX Call, over an unencrypted channel (HTTP, not HTTPS).</p>

<p>I'd like to encrypt the data, but encryption on the JavaScript side means I expose the key, which makes symmetric encryption only an exercise in security by obscurity.</p>

<p>Is there any asymmetric encryption for JavaScript? That way, I can keep the Server decryption key secret. (I'm not worried about the security of Server > JavaScript messages, only about the security of a certain JavaScript > Server message)</p>
","<p>asymmetric public key/ private key is the only way to do this. To protect against MIM attacks the server can hash the public key with the users password, then the user (in the browser) re-computes the hash - if they match then the user can be confident that the public key sent from the server has not been tampered with - this relies on the fact that only the server and the user know the users password.</p>

<p>PS I wanted to write this as a comment as that would be more appropiate than an answer, but I don't have enough points :)</p>
","13017","<javascript><security><encryption><encryption-asymmetric><public-key-encryption>","22","3","5","2014-05-16 16:37:16","","0","8","","","","2011-05-24 21:06:16",""
"28808101","Seckey from public key string from server in Swift","<p>I want to encrypt data using RSA , I tried to generate the key in my code and it's working , But what I actually need is to get the public key as a string from server and then use it as Seckey so I can use it to encrypt data using RSA,
I tried this code:</p>

<pre><code>//KeyString is the string of the key from server
let KeyData = (keyString as NSString).dataUsingEncoding(NSUTF8StringEncoding) as NSData!


    var cert : Unmanaged&lt;SecCertificateRef&gt;!;
    var  policy : Unmanaged&lt;SecPolicy&gt;!;
    cert = SecCertificateCreateWithData(kCFAllocatorDefault, KeyData);
    policy = SecPolicyCreateBasicX509();
    var status : OSStatus = noErr
    var trust: SecTrust?
    var certArray : [Unmanaged&lt;SecCertificateRef&gt;!] = [cert];
    var certArrayPointer = UnsafeMutablePointer&lt;UnsafePointer&lt;Void&gt;&gt;(certArray)
    status = SecTrustCreateWithCertificates(cert, policy, trust);
    let publicKey: SecKeyRef = SecTrustCopyPublicKey(trust!).takeUnretainedValue()
</code></pre>

<p>I couldn't run this code because SecTrustCreateWithCertificates Method is expecting certificate as anyObject! , I don't Know how to fix this,And if solving this will let me get the SecKey.</p>

<p>I got the code above from <a href=""https://stackoverflow.com/questions/12319849/get-seckeyref-from-base64-coded-string"">this answer in objective-c </a></p>

<p>So if any one can help me getting the right code to solve this , I will be very thankful :)</p>
","<p>Here's how I did this:</p>

<pre><code>let cert = SecCertificateCreateWithData(kCFAllocatorDefault, certData)?.takeRetainedValue()

if cert != nil {
    var trust: Unmanaged&lt;SecTrust&gt;?

    let policy = SecPolicyCreateBasicX509().takeRetainedValue()
    let status = SecTrustCreateWithCertificates(cert, policy, &amp;trust)

    if status == errSecSuccess {
        let trustRef = trust!.takeRetainedValue()
        let key = SecTrustCopyPublicKey(trustRef)!.takeRetainedValue();
    }
}
</code></pre>

<p>This works, but you need to make sure that what you pass to <code>SecCertificateCreateWithData()</code> is a DER-encoded certificate, and not just a DER-encoded key. You need a certificate signed by your server's private key to the get the associated public key.</p>
","12785","<ios><swift><public-key-encryption><encryption-asymmetric><seckeyref>","5","0","3","2019-05-30 20:18:53","34157062","0","3","-1","","2017-05-23 12:33:32","2015-03-02 10:59:10",""
"28808101","Seckey from public key string from server in Swift","<p>I want to encrypt data using RSA , I tried to generate the key in my code and it's working , But what I actually need is to get the public key as a string from server and then use it as Seckey so I can use it to encrypt data using RSA,
I tried this code:</p>

<pre><code>//KeyString is the string of the key from server
let KeyData = (keyString as NSString).dataUsingEncoding(NSUTF8StringEncoding) as NSData!


    var cert : Unmanaged&lt;SecCertificateRef&gt;!;
    var  policy : Unmanaged&lt;SecPolicy&gt;!;
    cert = SecCertificateCreateWithData(kCFAllocatorDefault, KeyData);
    policy = SecPolicyCreateBasicX509();
    var status : OSStatus = noErr
    var trust: SecTrust?
    var certArray : [Unmanaged&lt;SecCertificateRef&gt;!] = [cert];
    var certArrayPointer = UnsafeMutablePointer&lt;UnsafePointer&lt;Void&gt;&gt;(certArray)
    status = SecTrustCreateWithCertificates(cert, policy, trust);
    let publicKey: SecKeyRef = SecTrustCopyPublicKey(trust!).takeUnretainedValue()
</code></pre>

<p>I couldn't run this code because SecTrustCreateWithCertificates Method is expecting certificate as anyObject! , I don't Know how to fix this,And if solving this will let me get the SecKey.</p>

<p>I got the code above from <a href=""https://stackoverflow.com/questions/12319849/get-seckeyref-from-base64-coded-string"">this answer in objective-c </a></p>

<p>So if any one can help me getting the right code to solve this , I will be very thankful :)</p>
","<p>I Did this used Alamofire: </p>

<pre><code>private static func publicKeyForCertificate(certificate: SecCertificate) -&gt; SecKey? {
    var publicKey: SecKey?
    var trust: Unmanaged&lt;SecTrust&gt;?

    let policy = SecPolicyCreateBasicX509().takeRetainedValue()
    let status = SecTrustCreateWithCertificates(certificate, policy, &amp;trust)

    if status == errSecSuccess {
        let trustRef = trust!.takeRetainedValue()
        publicKey = SecTrustCopyPublicKey(trustRef)!.takeRetainedValue()

    }
    return publicKey

}
</code></pre>
","12785","<ios><swift><public-key-encryption><encryption-asymmetric><seckeyref>","5","0","3","2019-05-30 20:18:53","34157062","0","3","-1","","2017-05-23 12:33:32","2015-03-02 10:59:10",""
"28808101","Seckey from public key string from server in Swift","<p>I want to encrypt data using RSA , I tried to generate the key in my code and it's working , But what I actually need is to get the public key as a string from server and then use it as Seckey so I can use it to encrypt data using RSA,
I tried this code:</p>

<pre><code>//KeyString is the string of the key from server
let KeyData = (keyString as NSString).dataUsingEncoding(NSUTF8StringEncoding) as NSData!


    var cert : Unmanaged&lt;SecCertificateRef&gt;!;
    var  policy : Unmanaged&lt;SecPolicy&gt;!;
    cert = SecCertificateCreateWithData(kCFAllocatorDefault, KeyData);
    policy = SecPolicyCreateBasicX509();
    var status : OSStatus = noErr
    var trust: SecTrust?
    var certArray : [Unmanaged&lt;SecCertificateRef&gt;!] = [cert];
    var certArrayPointer = UnsafeMutablePointer&lt;UnsafePointer&lt;Void&gt;&gt;(certArray)
    status = SecTrustCreateWithCertificates(cert, policy, trust);
    let publicKey: SecKeyRef = SecTrustCopyPublicKey(trust!).takeUnretainedValue()
</code></pre>

<p>I couldn't run this code because SecTrustCreateWithCertificates Method is expecting certificate as anyObject! , I don't Know how to fix this,And if solving this will let me get the SecKey.</p>

<p>I got the code above from <a href=""https://stackoverflow.com/questions/12319849/get-seckeyref-from-base64-coded-string"">this answer in objective-c </a></p>

<p>So if any one can help me getting the right code to solve this , I will be very thankful :)</p>
","<h2>For mac:</h2>

<pre><code>let pubKey = ""-----BEGIN PUBLIC KEY-----MIICIjANBgAgK.......InbFk1FkucQqruMyUCAwEAAQ==-----END PUBLIC KEY-----""
let pubKeyData = pubKey.dataUsingEncoding(NSASCIIStringEncoding)
var error: Unmanaged&lt;CFErrorRef&gt;?
let secKey = SecKeyCreateFromData(NSDictionary(), pubKeyData!, &amp;error)
</code></pre>

<p>Where pubKey is a string representation of your public key.
If you don't know your public key, you can infer it from your private key with the following command:</p>

<pre><code>openssl rsa -in server.key -pubout  &gt; mykey.pub
</code></pre>

<p>Where server.key is the file containing <code>-----BEGIN RSA PRIVATE KEY-----</code>
as the first line.</p>

<h2>For iOS:</h2>

<p>It's a bit more complicate.
You need a <code>der</code> file. It's a binary representation of your certificate.
If you need to convert an existing certificate, you can do so with the following command:</p>

<pre><code> openssl x509 -outform der -in file.crt|pem -out mycert.der
</code></pre>

<p>The <code>.crt</code> or <code>.pem</code> file contains <code>-----BEGIN CERTIFICATE-----</code> as the first line.</p>

<p>Put the <code>der</code> file in your bundle and do:</p>

<pre><code>let certificateData = NSData(contentsOfURL:NSBundle.mainBundle().URLForResource(""mycert"", withExtension: ""der"")!)

let certificate = SecCertificateCreateWithData(nil, certificateData!)

var trust: SecTrustRef?

let policy = SecPolicyCreateBasicX509()
let status = SecTrustCreateWithCertificates(certificate!, policy, &amp;trust)

if status == errSecSuccess {
    let key = SecTrustCopyPublicKey(trust!)!;
}
</code></pre>

<p>Yatta ! Key now contains a <code>SecKey</code> representation of your public key. Happy Pinning.</p>
","12785","<ios><swift><public-key-encryption><encryption-asymmetric><seckeyref>","5","15","3","2019-05-30 20:18:53","34157062","0","3","-1","","2017-05-23 12:33:32","2015-03-02 10:59:10",""
"16383953","RSA and AES encryption","<p>I am looking at the feasibility for using Chrome apps for the front end of some applications I am working on. (As an aside, if anyone has any thoughts on this  - put it in the comments)</p>

<p>I would be using <code>chrome.socket</code> and would want the connections to be secure so will need RSA and AES encryption that will be compatible with as many backend technology implementations as possible (C#, Java, ...). What I mean by this is the different modes, key-lengths, implementation-specific details...</p>

<p>Now I have done a little searching myself and found <a href=""https://code.google.com/p/crypto-js/"" rel=""noreferrer"">https://code.google.com/p/crypto-js/</a> for AES encryption. <strong>Is this still the accepted library to use, or is there another?</strong></p>

<p>...however, <strong>I couldn't find a library for RSA?</strong></p>

<p>On the note of security, I don't foresee this being an issue as this is a Chrome extension,so the HTML/JavaScript is not being send over the internet, <strong>but is there any other security implication that I have missed?</strong></p>
","<p>You could try using this:</p>

<p>Stanford Javascript Crypto Library: <a href=""http://crypto.stanford.edu/sjcl/"" rel=""nofollow"">http://crypto.stanford.edu/sjcl/</a></p>

<blockquote>
  <p>SJCL is secure. It uses the industry-standard AES algorithm at 128, 192 or 256 bits; the SHA256 hash function; the HMAC authentication code; the PBKDF2 password strengthener; and the CCM and OCB authenticated-encryption modes. </p>
</blockquote>

<p>Check the API here: <a href=""http://bitwiseshiftleft.github.io/sjcl/doc/"" rel=""nofollow"">http://bitwiseshiftleft.github.io/sjcl/doc/</a></p>

<p>Stanford also has a page showing RSA (among others) encryption in Javascript: <a href=""http://www-cs-students.stanford.edu/~tjw/jsbn/"" rel=""nofollow"">http://www-cs-students.stanford.edu/~tjw/jsbn/</a></p>

<blockquote>
  <p>RSA and ECC in JavaScript:</p>
  
  <p>The jsbn library is a fast, portable implementation of large-number math in pure JavaScript, enabling public-key crypto and other applications on desktop and mobile browsers. </p>
</blockquote>

<p>They also state it is 100% interoperable with <code>openssl</code> and have instructions on how you can confirm this.</p>

<p>You could also try CryptoJS: <a href=""https://code.google.com/p/crypto-js/"" rel=""nofollow"">https://code.google.com/p/crypto-js/</a></p>

<blockquote>
  <p>CryptoJS is a growing collection of standard and secure cryptographic algorithms implemented in JavaScript using best practices and patterns. They are fast, and they have a consistent and simple interface. </p>
</blockquote>
","12746","<javascript><encryption-asymmetric><encryption-symmetric><google-chrome-app>","7","4","3","2015-05-17 13:02:39","","6","","126280","","2013-05-07 14:27:26","2013-05-05 11:18:39",""
"16383953","RSA and AES encryption","<p>I am looking at the feasibility for using Chrome apps for the front end of some applications I am working on. (As an aside, if anyone has any thoughts on this  - put it in the comments)</p>

<p>I would be using <code>chrome.socket</code> and would want the connections to be secure so will need RSA and AES encryption that will be compatible with as many backend technology implementations as possible (C#, Java, ...). What I mean by this is the different modes, key-lengths, implementation-specific details...</p>

<p>Now I have done a little searching myself and found <a href=""https://code.google.com/p/crypto-js/"" rel=""noreferrer"">https://code.google.com/p/crypto-js/</a> for AES encryption. <strong>Is this still the accepted library to use, or is there another?</strong></p>

<p>...however, <strong>I couldn't find a library for RSA?</strong></p>

<p>On the note of security, I don't foresee this being an issue as this is a Chrome extension,so the HTML/JavaScript is not being send over the internet, <strong>but is there any other security implication that I have missed?</strong></p>
","<p>It seems like you might prefer to have a full TLS implementation here. You should be able to wrap chrome.socket with a TLS wrapper using forge (a JavaScript implementation of TLS):</p>

<p><a href=""https://github.com/digitalbazaar/forge"" rel=""nofollow"">https://github.com/digitalbazaar/forge</a></p>
","12746","<javascript><encryption-asymmetric><encryption-symmetric><google-chrome-app>","7","0","3","2015-05-17 13:02:39","","6","","126280","","2013-05-07 14:27:26","2013-05-05 11:18:39",""
"16383953","RSA and AES encryption","<p>I am looking at the feasibility for using Chrome apps for the front end of some applications I am working on. (As an aside, if anyone has any thoughts on this  - put it in the comments)</p>

<p>I would be using <code>chrome.socket</code> and would want the connections to be secure so will need RSA and AES encryption that will be compatible with as many backend technology implementations as possible (C#, Java, ...). What I mean by this is the different modes, key-lengths, implementation-specific details...</p>

<p>Now I have done a little searching myself and found <a href=""https://code.google.com/p/crypto-js/"" rel=""noreferrer"">https://code.google.com/p/crypto-js/</a> for AES encryption. <strong>Is this still the accepted library to use, or is there another?</strong></p>

<p>...however, <strong>I couldn't find a library for RSA?</strong></p>

<p>On the note of security, I don't foresee this being an issue as this is a Chrome extension,so the HTML/JavaScript is not being send over the internet, <strong>but is there any other security implication that I have missed?</strong></p>
","<p>I'm pointing out some of my work I did for university, it's probably full of bugs and could be done in a better way. It's quite fast and works well with big keys. It's possible to use RSA with keys with n Bits.</p>

<p>Check the tests if you need to understand how it works. Any bug or improvement would be appreciated though.</p>

<p>Note, you might have to search a little because there is more than just RSA.</p>

<p><a href=""https://github.com/llacroix/rsa-js"" rel=""nofollow"">https://github.com/llacroix/rsa-js</a></p>
","12746","<javascript><encryption-asymmetric><encryption-symmetric><google-chrome-app>","7","0","3","2015-05-17 13:02:39","","6","","126280","","2013-05-07 14:27:26","2013-05-05 11:18:39",""
"14404757","How to encrypt and decrypt plain text with a RSA keys in Go?","<p>I am trying to write a utility program which encrypts and decrypts plain text files using a RSA key pair. The RSA keys were generated with ssh-keygen and are stored in .ssh, as usual.</p>

<p>I am having trouble understanding how to do that with the Go language crypto and crypto/rsa packages? The documentation on those is a little sparse (even more so because I am new to encryption) and there are very few examples. I checked the rsa_test.go file  for any clues, but it only confused me more.  </p>

<p>In short I am trying to load the public/private key pair from the id_rsa and id_rsa.pub files in .ssh and use them to encrypt/decrypt a plain text file.</p>

<p>Thank you in advance!</p>
","<p>Keep in mind that RSA is not designed to be a block cipher.  Usually RSA is used to encrypt a symmetric key that is then used to encrypt the data.  With that in mind, however, here is a program which can use an RSA private key to encrypt data that can be decrypted by itself:</p>

<pre><code>package main

import (
    ""crypto/rand""
    ""crypto/rsa""
    ""crypto/sha1""
    ""crypto/x509""
    ""encoding/pem""
    ""flag""
    ""io/ioutil""
    ""log""
)

// Command-line flags
var (
    keyFile = flag.String(""key"", ""id_rsa"", ""Path to RSA private key"")
    inFile  = flag.String(""in"", ""in.txt"", ""Path to input file"")
    outFile = flag.String(""out"", ""out.txt"", ""Path to output file"")
    label   = flag.String(""label"", """", ""Label to use (filename by default)"")
    decrypt = flag.Bool(""decrypt"", false, ""Decrypt instead of encrypting"")
)

func main() {
    flag.Parse()

    // Read the input file
    in, err := ioutil.ReadFile(*inFile)
    if err != nil {
        log.Fatalf(""input file: %s"", err)
    }

    // Read the private key
    pemData, err := ioutil.ReadFile(*keyFile)
    if err != nil {
        log.Fatalf(""read key file: %s"", err)
    }

    // Extract the PEM-encoded data block
    block, _ := pem.Decode(pemData)
    if block == nil {
        log.Fatalf(""bad key data: %s"", ""not PEM-encoded"")
    }
    if got, want := block.Type, ""RSA PRIVATE KEY""; got != want {
        log.Fatalf(""unknown key type %q, want %q"", got, want)
    }

    // Decode the RSA private key
    priv, err := x509.ParsePKCS1PrivateKey(block.Bytes)
    if err != nil {
        log.Fatalf(""bad private key: %s"", err)
    }

    var out []byte
    if *decrypt {
        if *label == """" {
            *label = *outFile
        }
        // Decrypt the data
        out, err = rsa.DecryptOAEP(sha1.New(), rand.Reader, priv, in, []byte(*label))
        if err != nil {
            log.Fatalf(""decrypt: %s"", err)
        }
    } else {
        if *label == """" {
            *label = *inFile
        }
        out, err = rsa.EncryptOAEP(sha1.New(), rand.Reader, &amp;priv.PublicKey, in, []byte(*label))
        if err != nil {
            log.Fatalf(""encrypt: %s"", err)
        }
    }

    // Write data to output file
    if err := ioutil.WriteFile(*outFile, out, 0600); err != nil {
        log.Fatalf(""write output: %s"", err)
    }
}
</code></pre>
","11955","<go><rsa><encryption-asymmetric>","12","15","1","2014-07-10 05:37:54","14944339","2","7","","","","2013-01-18 17:56:12",""
"4620742","Postfix + MySQL ENCRYPT(), How does it verify the password with randomizing salt?","<p>I've implemented my mail server as dictated <a href=""http://library.linode.com/email/postfix/courier-mysql-ubuntu-9.10-karmic#configure_mail_aliases"" rel=""nofollow"">here</a>.</p>

<p>It works perfectly fine. My curiousity revolves around entering users into the database and authenticating them</p>

<p>Running:</p>

<pre><code>INSERT INTO users (email, password) VALUES ('sales@example.com', ENCRYPT('password'));
</code></pre>

<p>Multiple times will give a different hash for the encrypted password as its utilizing a random salt. I.e. If I enter sales@example.com three times with the same password each hash is different...</p>

<p>My question to this is, how is it that the Postfix server can actually authenticate the password when a user logs in via a mail client?</p>

<p>There isn't any problem per say as it works fine, more just to satisfy my curiosity so I can fully understand whats going on behind the scenes to properly authenticate the encrypted password.</p>
","<p>You must use ENCRYPT('pass','salt') to force a salt, otherwise the salt is lost forever and you have no way of recovering it. Fairly pointless function without it. It's a terrible function to use, though, because the security is so minimal; use PASSWORD() or OLD_PASSWORD() instead.</p>

<p>ENCRYPT() uses the system crypt(), which may use all or only the first 8 characters, must be printable 7-bit ascii, generally uses 1 round of a DES-based hash, and is completely unportable. Avoid it.</p>
","11229","<mysql><encryption><postfix-mta><encryption-asymmetric>","2","-3","3","2013-05-30 09:03:58","4968467","0","1","188331","","2013-05-30 09:03:58","2011-01-06 22:39:24",""
"4620742","Postfix + MySQL ENCRYPT(), How does it verify the password with randomizing salt?","<p>I've implemented my mail server as dictated <a href=""http://library.linode.com/email/postfix/courier-mysql-ubuntu-9.10-karmic#configure_mail_aliases"" rel=""nofollow"">here</a>.</p>

<p>It works perfectly fine. My curiousity revolves around entering users into the database and authenticating them</p>

<p>Running:</p>

<pre><code>INSERT INTO users (email, password) VALUES ('sales@example.com', ENCRYPT('password'));
</code></pre>

<p>Multiple times will give a different hash for the encrypted password as its utilizing a random salt. I.e. If I enter sales@example.com three times with the same password each hash is different...</p>

<p>My question to this is, how is it that the Postfix server can actually authenticate the password when a user logs in via a mail client?</p>

<p>There isn't any problem per say as it works fine, more just to satisfy my curiosity so I can fully understand whats going on behind the scenes to properly authenticate the encrypted password.</p>
","<p>Read man crypt: it returns the salt in the first two chars of the return value.</p>

<p>So the salt is not lost, you can compare the encrypted string to the result of crypt( 'pass', $first_two_chars_of_encrypted_value ).</p>
","11229","<mysql><encryption><postfix-mta><encryption-asymmetric>","2","2","3","2013-05-30 09:03:58","4968467","0","1","188331","","2013-05-30 09:03:58","2011-01-06 22:39:24",""
"4620742","Postfix + MySQL ENCRYPT(), How does it verify the password with randomizing salt?","<p>I've implemented my mail server as dictated <a href=""http://library.linode.com/email/postfix/courier-mysql-ubuntu-9.10-karmic#configure_mail_aliases"" rel=""nofollow"">here</a>.</p>

<p>It works perfectly fine. My curiousity revolves around entering users into the database and authenticating them</p>

<p>Running:</p>

<pre><code>INSERT INTO users (email, password) VALUES ('sales@example.com', ENCRYPT('password'));
</code></pre>

<p>Multiple times will give a different hash for the encrypted password as its utilizing a random salt. I.e. If I enter sales@example.com three times with the same password each hash is different...</p>

<p>My question to this is, how is it that the Postfix server can actually authenticate the password when a user logs in via a mail client?</p>

<p>There isn't any problem per say as it works fine, more just to satisfy my curiosity so I can fully understand whats going on behind the scenes to properly authenticate the encrypted password.</p>
","<p>Postfix compares the password from the database to a new encrypt done with the salt(password from db).</p>

<p>to encrypt:</p>

<pre><code>update user set password = ENCRYPT('1234') where id = 1
</code></pre>

<p>to check password:</p>

<pre><code>SELECT u.* FROM user u where u.email ='admin@dominio.com' 
and ENCRYPT('1234', u.password) = u.password
</code></pre>
","11229","<mysql><encryption><postfix-mta><encryption-asymmetric>","2","3","3","2013-05-30 09:03:58","4968467","0","1","188331","","2013-05-30 09:03:58","2011-01-06 22:39:24",""
"4599008","PHP RSA encryption using private key and PKCS1","<p>I need to encrypt a string using RSA, PKCS1, a private key and PHP. I could not find even a terminal command which can be used with exec(). Does anyone knows how to do it?</p>

<p>Thanks!</p>
","<pre><code>openssl aes-256-cbc -a -salt -in inputfile.txt -out encryptedfile.txt -pass pass:thepassword
openssl aes-256-cbc -d -a -in encryptedfile.txt -out decryptedfile.txt 
</code></pre>

<p>Can exec these, and should be able to change the cipher as needed.</p>
","10860","<php><openssl><rsa><encryption-asymmetric><private-key>","5","3","3","2016-01-11 01:56:00","","0","6","","","","2011-01-04 22:12:29",""
"4599008","PHP RSA encryption using private key and PKCS1","<p>I need to encrypt a string using RSA, PKCS1, a private key and PHP. I could not find even a terminal command which can be used with exec(). Does anyone knows how to do it?</p>

<p>Thanks!</p>
","<p>Try <a href=""http://phpseclib.sourceforge.net/"" rel=""nofollow noreferrer"">phpseclib, a pure PHP RSA implementation</a>:</p>

<pre><code>&lt;?php
include('Crypt/RSA.php');

$rsa = new Crypt_RSA();
//extract($rsa-&gt;createKey());

$plaintext = 'terrafrost';

$rsa-&gt;loadKey($privatekey);
$rsa-&gt;setEncryptionMode(CRYPT_RSA_ENCRYPTION_PKCS1);
$ciphertext = $rsa-&gt;encrypt($plaintext);

echo $plaintext;
?&gt;
</code></pre>

<blockquote>
  <p><strong>Security warning:</strong> If you're going to use phpseclib, make sure you <a href=""http://www.daemonology.net/blog/2009-06-11-cryptographic-right-answers.html"" rel=""nofollow noreferrer"">follow the best practices for RSA encryption</a>. See also <a href=""https://stackoverflow.com/a/34088308/2224584"">this answer</a> for more details and an alternative approach.</p>
</blockquote>
","10860","<php><openssl><rsa><encryption-asymmetric><private-key>","5","5","3","2016-01-11 01:56:00","","0","6","","","","2011-01-04 22:12:29",""
"4599008","PHP RSA encryption using private key and PKCS1","<p>I need to encrypt a string using RSA, PKCS1, a private key and PHP. I could not find even a terminal command which can be used with exec(). Does anyone knows how to do it?</p>

<p>Thanks!</p>
","<p>If you have the php_openssl extension enabled you can do this without using the command line other than to create the keys. And you could even create the keys with php also if you wanted.</p>

<h2>Generate your keys</h2>

<p><em>These are the shell commands to generate the keys. You can run these in Linux, Mac, Cygwin, or even your Windows Git BASH.</em></p>

<p>Generate a 512 bit rsa private key. This will ask you for a password. You need to store this safely.</p>

<p><code>openssl genrsa -des3 -out private.pem 512</code></p>

<p>Generate the public key based on the private key. You are free to store this in an insecure manner. </p>

<p><code>openssl rsa -in private.pem -pubout -out public.pem</code></p>

<h2>Use PHP to encrypt/decrypt data with your keys</h2>

<p>Note that I've included encrypting and decrypting with public and private keys. You only want to choose one of these to implement, for example encrypt with private and decrypt with public.</p>

<pre><code>&lt;?php
$privateKeyPassphrase = ""mypassword"";
$sensitiveData = ""This is the data that we want to encrypt."";

/*
// Load the keys from a file (as you would most likely do in a production environment)
$priv_key_file_name = realpath(""private.pem"");
$publ_key_file_name = realpath(""public.pem"");

// Note: This function needs an array of parameters!
$privateKey = openssl_pkey_get_private(array(""file://$priv_key_file_name"", $privateKeyPassphrase));
$publicKey = openssl_pkey_get_public(array(""file://$publ_key_file_name"", $privateKeyPassphrase));
*/

// Get keys from a string so that this example can be run without the need for extra files
$privateKeyString = &lt;&lt;&lt;PK
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,D21679087FE8490E

hXTtfXC4qYNoE9hySVwPD+Mwhb7RiCae589Z952Z+ucz9i8j+1MO4Sx2nOMCH5Eg
uotMSr3FipJ/Bqbh66AqqYK3PG7NFYA41f/7xrTA6gwq6MDjmAy6z8TW+NE3OCpF
n+9zPzT15wcNm4U4ZRpEO+Fi8cYTLu0LlX+k8Djrd+CuS6wX4p8SgpAplDrnAiAH
z3sJtf2+M67yTNT7v/hIJmkebCwES43pTlNrxluJpD7HBl4BGmFWFI+MJ/gPuFn6
etQjDpzgep0Wn4FKi34IkDQ9kM4/9tWy0Fhf8ytdg0NZshMt/PWRPrNrs+2qLoJu
1rHc0rtKVvALQOKU+SbxaYVBlEzelxB0XJ2uQMSIs46vHZiUG3Q2JBmlxRshHQse
8n9CAYmwm++cPmXq06rVMclCJR0pDlOzGQvIgmo4eiY=
-----END RSA PRIVATE KEY-----
PK;

$publicKeyString = &lt;&lt;&lt;PK
-----BEGIN PUBLIC KEY-----
MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKcNEHgry/zIFpKdKz2E/ksoDkBn00K7
v2CxB2kHMWjAxgaFPCYs/8gHclSkcJYARKqvU/0Gsc0mrrPtCs5CytcCAwEAAQ==
-----END PUBLIC KEY-----
PK;

// Load private key
$privateKey = openssl_pkey_get_private(array($privateKeyString, $privateKeyPassphrase));

// Load public key
$publicKey = openssl_pkey_get_public(array($publicKeyString, $privateKeyPassphrase));

if (!$privateKey) {
    echo ""Private key NOT OK\n"";
}

if (!$publicKey) {
    echo ""Public key NOT OK\n"";
}

if (!openssl_private_encrypt($sensitiveData, $encryptedWithPrivate, $privateKey)) {
    echo ""Error encrypting with private key\n"";
}

if (!openssl_public_encrypt($sensitiveData, $encryptedWithPublic, $publicKey)) {
    echo ""Error encrypting with public key\n"";
}

if (!openssl_private_decrypt($encryptedWithPublic, $decryptedWithPrivateFromPublic, $privateKey)) {
    echo ""Error decrypting with private key what was encrypted with public key\n"";
}

if (!openssl_public_decrypt($encryptedWithPrivate, $decryptedWithPublicFromPrivate, $publicKey)) {
    echo ""Error decrypting with public key what was encrypted with private key\n"";
}

echo ""Encrypted with public key: "" . base64_encode($encryptedWithPublic) . ""\n""; // This is different every time
echo ""Encrypted with private key: "" . base64_encode($encryptedWithPrivate) . ""\n"";
echo ""Decrypted with private key what was encrypted with public key: "" . $decryptedWithPrivateFromPublic . ""\n"";
echo ""Decrypted with public key what was encrypted with private key: "" . $decryptedWithPublicFromPrivate . ""\n"";
</code></pre>
","10860","<php><openssl><rsa><encryption-asymmetric><private-key>","5","3","3","2016-01-11 01:56:00","","0","6","","","","2011-01-04 22:12:29",""
"5133246","What is the purpose of using separate key pairs for signing and encryption?","<p>Why do I need to use separate public key pairs for signing and encryption
and not use the same key pair with RSA for example?
Is there any security problem with using the same key?</p>
","<p>I'm not entirely sure what you are getting at. I am going to assume you want to know why you should use different keys for https/ssl/ssh and code signing (other than that they have different usage bits).</p>

<p>SSL certificates have to hang out around web servers, which are infamous for being compromised. Code signing certificates can be hidden away completely offline. In theory. In practice web servers are managed by professional sysadmins, and code signing certs are left lying around on bodge-a-job developer PCs. Also there's the Principle of Least Privilege.</p>
","10448","<security><digital-signature><encryption-asymmetric>","17","0","6","2014-05-29 01:05:51","","0","11","977087","","2013-11-27 13:41:01","2011-02-27 12:40:11",""
"5133246","What is the purpose of using separate key pairs for signing and encryption?","<p>Why do I need to use separate public key pairs for signing and encryption
and not use the same key pair with RSA for example?
Is there any security problem with using the same key?</p>
","<p>The reason for using separate key pairs for signing and encryption is to spread the risk: If someone recovers the private encryption key, he/she can decrypt documents that were encrypted using the public encryption key but can’t use it to also sign documents and vice versa.</p>

<p>Another reason could be <a href=""http://en.wikipedia.org/wiki/Digital_signature#Using_separate_key_pairs_for_signing_and_encryption"" rel=""noreferrer"">a legal reason</a>:</p>

<blockquote>
  <p>In several countries, a digital signature has a status somewhat like that of a traditional pen and paper signature, like in the <a href=""http://europa.eu/legislation_summaries/information_society/l24118_en.htm"" rel=""noreferrer"">EU digital signature legislation</a>. Generally, these provisions mean that anything digitally signed legally binds the signer of the document to the terms therein. For that reason, it is often thought best to use separate key pairs for encrypting and signing. Using the encryption key pair, a person can engage in an encrypted conversation (e.g., regarding a real estate transaction), but the encryption does not legally sign every message he sends. Only when both parties come to an agreement do they sign a contract with their signing keys, and only then are they legally bound by the terms of a specific document. After signing, the document can be sent over the encrypted link. If a signing key is lost or compromised, it can be revoked to mitigate any future transactions. If an encryption key is lost, a backup or key escrow should be utilized to continue viewing encrypted content. Signing keys should never be backed up or escrowed.</p>
</blockquote>
","10448","<security><digital-signature><encryption-asymmetric>","17","21","6","2014-05-29 01:05:51","","0","11","977087","","2013-11-27 13:41:01","2011-02-27 12:40:11",""
"5133246","What is the purpose of using separate key pairs for signing and encryption?","<p>Why do I need to use separate public key pairs for signing and encryption
and not use the same key pair with RSA for example?
Is there any security problem with using the same key?</p>
","<p>Read this : <a href=""http://en.wikipedia.org/wiki/Public-key_cryptography"" rel=""nofollow"">http://en.wikipedia.org/wiki/Public-key_cryptography</a></p>

<p>Basically you are asking about the different between asymmetric and symmetric encryption.</p>
","10448","<security><digital-signature><encryption-asymmetric>","17","-8","6","2014-05-29 01:05:51","","0","11","977087","","2013-11-27 13:41:01","2011-02-27 12:40:11",""
"5133246","What is the purpose of using separate key pairs for signing and encryption?","<p>Why do I need to use separate public key pairs for signing and encryption
and not use the same key pair with RSA for example?
Is there any security problem with using the same key?</p>
","<p>You might want to go to see this similar question from the security stack :</p>

<p><a href=""https://security.stackexchange.com/questions/1806/why-should-one-not-use-the-same-asymmetric-key-for-encryption-as-they-do-for-sig"">https://security.stackexchange.com/questions/1806/why-should-one-not-use-the-same-asymmetric-key-for-encryption-as-they-do-for-sig</a></p>

<p>IMHO, the answer from Am1rr3zA is the best.</p>
","10448","<security><digital-signature><encryption-asymmetric>","17","0","6","2014-05-29 01:05:51","","0","11","977087","","2013-11-27 13:41:01","2011-02-27 12:40:11",""
"5133246","What is the purpose of using separate key pairs for signing and encryption?","<p>Why do I need to use separate public key pairs for signing and encryption
and not use the same key pair with RSA for example?
Is there any security problem with using the same key?</p>
","<p>Having separate signing and encryption key pairs allows a company to back up the encryption certificate in order to decrypt data if you leave the company and they find stuff encrypted with your key.</p>

<p>Typically, the company won't keep a backup copy of your signing certificate, since it would destroy the notion of a valid digital signature.  If the signing certificate is held by more than one party, then who really signed a message with it?</p>

<p>So, encryption key is held by the user and backed up by the company.  Signing key is only held by the user.</p>
","10448","<security><digital-signature><encryption-asymmetric>","17","0","6","2014-05-29 01:05:51","","0","11","977087","","2013-11-27 13:41:01","2011-02-27 12:40:11",""
"5133246","What is the purpose of using separate key pairs for signing and encryption?","<p>Why do I need to use separate public key pairs for signing and encryption
and not use the same key pair with RSA for example?
Is there any security problem with using the same key?</p>
","<p>Reasons for using separate keys for signing and encryption:</p>

<ol>
<li>Useful in organization were encryption key needs to be backed or
kept in escrow in order to decrypt data once an employee/user of the
organization is no longer available. Unlike the encryption key the
signing key must never be used by anyone other then the
employee/user and does not and should not need to be kept in escrow.</li>
<li>Allows having different expiration times for signing an encryption
keys.</li>
<li>Given that the underlying mathematics is the same for encryption and
signing, only in reverse, if an attacker can convince/trick a key
holder to sign an unformatted encrypted message using the same key
then the attacker gets the original.</li>
</ol>
","10448","<security><digital-signature><encryption-asymmetric>","17","0","6","2014-05-29 01:05:51","","0","11","977087","","2013-11-27 13:41:01","2011-02-27 12:40:11",""
"235759","Opening an RSA private key from Ruby","<p>I <em>think</em> I know how to create custom encrypted RSA keys, but how can I read one encrypted like ssh-keygen does?</p>

<p>I know I can do this:</p>

<pre><code>OpenSSL::PKey::RSA.new(File.read('private_key'))
</code></pre>

<p>But then OpenSSL asks me for the passphrase... How can I pass it to OpenSSL as a parameter?</p>

<p>And, how can I create one compatible to the ones generated by ssh-keygen?</p>

<p>I do something like this to create private encrypted keys:</p>

<pre><code>pass = '123456'
key = OpenSSL::PKey::RSA.new(1024)
key = ""0000000000000000#{key.to_der}""
c = OpenSSL::Cipher::Cipher.new('aes-256-cbc')
c.encrypt
c.key = Digest::SHA1.hexdigest(pass).unpack('a2' * 32).map {|x| x.hex}.pack('c' * 32)
c.iv = iv
encrypted_key = c.update(key)
encrypted_key &lt;&lt; c.final
</code></pre>

<p>Also, keys generated by OpenSSL::PKey::RSA.new(1024) (without encryption), don't work when I try password-less logins (i.e., I copy the public key to the server and use the private one to login).</p>

<p>Also, when I open an ssh-keygen file via OpenSSL and then check its contents, it appears to have additional characters at the beginning and end of the key. Is this normal?</p>

<p>I don't really understand some of this security stuff, but I'm trying to learn. What is it that I'm doing wrong?</p>
","<p>I've made some progress on this. If I use the Net::SSH library, I can do this:</p>

<pre><code>Net::SSH::KeyFactory.load_private_key 'keyfile', 'passphrase'
</code></pre>

<p>By reading the source code I have yet to figure out what the library does to OpenSSL's PKey::RSA.new to accomplish this... And then I go and test again, and sure enough, OpenSSL can open the private key just fine without Net::SSH... I've made so much tests that somehow I didn't test this correctly before.</p>

<p>But I still have the issue of creating an SSH compatible key pair... and maybe I'll go test again and have the answer :P ... nah, I'm not that interested in that part</p>
","10169","<ruby><encryption><openssl><encryption-asymmetric>","6","-3","2","2009-05-14 07:58:11","235847","0","1","","","","2008-10-25 01:47:16",""
"235759","Opening an RSA private key from Ruby","<p>I <em>think</em> I know how to create custom encrypted RSA keys, but how can I read one encrypted like ssh-keygen does?</p>

<p>I know I can do this:</p>

<pre><code>OpenSSL::PKey::RSA.new(File.read('private_key'))
</code></pre>

<p>But then OpenSSL asks me for the passphrase... How can I pass it to OpenSSL as a parameter?</p>

<p>And, how can I create one compatible to the ones generated by ssh-keygen?</p>

<p>I do something like this to create private encrypted keys:</p>

<pre><code>pass = '123456'
key = OpenSSL::PKey::RSA.new(1024)
key = ""0000000000000000#{key.to_der}""
c = OpenSSL::Cipher::Cipher.new('aes-256-cbc')
c.encrypt
c.key = Digest::SHA1.hexdigest(pass).unpack('a2' * 32).map {|x| x.hex}.pack('c' * 32)
c.iv = iv
encrypted_key = c.update(key)
encrypted_key &lt;&lt; c.final
</code></pre>

<p>Also, keys generated by OpenSSL::PKey::RSA.new(1024) (without encryption), don't work when I try password-less logins (i.e., I copy the public key to the server and use the private one to login).</p>

<p>Also, when I open an ssh-keygen file via OpenSSL and then check its contents, it appears to have additional characters at the beginning and end of the key. Is this normal?</p>

<p>I don't really understand some of this security stuff, but I'm trying to learn. What is it that I'm doing wrong?</p>
","<p>According to the blog post here:</p>

<p><a href=""http://stuff-things.net/2008/02/05/encrypting-lots-of-sensitive-data-with-ruby-on-rails/"" rel=""noreferrer"">http://stuff-things.net/2008/02/05/encrypting-lots-of-sensitive-data-with-ruby-on-rails/</a></p>

<p>You can simply do:</p>

<p>OpenSSL::PKey::RSA.new(File.read('private_key'), 'passphrase')</p>

<p>Best of luck.</p>
","10169","<ruby><encryption><openssl><encryption-asymmetric>","6","9","2","2009-05-14 07:58:11","235847","0","1","","","","2008-10-25 01:47:16",""
"3491481","Encrypting large files using a public key","<p>I need to encrypt a 100KB file using a public key. I've been reading some posts claiming that it is not practical to directly encrypt large files using a public key, and that the preferred method is to encrypt the file using a symmetric key and then encrypt this symmetric key using the public key.
It seems that a naive solution would be to break the large file to pieces and encrypt each one of them using the same public key. My question is whether and why this solution is wrong?</p>
","<p>If I understand you right, you want to encrypt the file with <em>someone else's</em> public key, to be decrypted by <em>their</em> private key?</p>

<p>The advantage of using symmetric encryption and only using public key cryptography for the (symmetric) key is performance: symmetric cryptography is computationally much less resource-intensive (trade-off: you have to keep the key secret -- and that's what the second, asymmetric step is for).</p>

<p>Breaking up the file adds management overhead (how can you be sure how many chunks there will be? that you have transmitted them all?) and doesn't add any security. On the contrary.</p>
","9747","<public-key-encryption><encryption-asymmetric>","10","2","5","2015-09-30 16:07:57","","0","2","5324723","","2015-09-30 15:44:01","2010-08-16 08:02:00",""
"3491481","Encrypting large files using a public key","<p>I need to encrypt a 100KB file using a public key. I've been reading some posts claiming that it is not practical to directly encrypt large files using a public key, and that the preferred method is to encrypt the file using a symmetric key and then encrypt this symmetric key using the public key.
It seems that a naive solution would be to break the large file to pieces and encrypt each one of them using the same public key. My question is whether and why this solution is wrong?</p>
","<p>The hybrid approach you mention (generate a random symmetric key, use this to encrypt the data, and encrypt only the key asymmetrically) has a massive performance advantage.</p>

<p>You could ""break the large file to pieces and encrypt each one of them using the same public key"" as well, there is nothing wrong with that, but it is much slower.</p>
","9747","<public-key-encryption><encryption-asymmetric>","10","4","5","2015-09-30 16:07:57","","0","2","5324723","","2015-09-30 15:44:01","2010-08-16 08:02:00",""
"3491481","Encrypting large files using a public key","<p>I need to encrypt a 100KB file using a public key. I've been reading some posts claiming that it is not practical to directly encrypt large files using a public key, and that the preferred method is to encrypt the file using a symmetric key and then encrypt this symmetric key using the public key.
It seems that a naive solution would be to break the large file to pieces and encrypt each one of them using the same public key. My question is whether and why this solution is wrong?</p>
","<p>Splitting file into smaller pieces and then encrypting them with some asymmetric cipher has nothing to do with the runtime cost of the encryption process. Best practice is encrypting the data with a good symmetric cipher using a relatively strong key and encrypting the secret key you used in symmetric encryption with an asymmetric cipher(using your public key).</p>
","9747","<public-key-encryption><encryption-asymmetric>","10","1","5","2015-09-30 16:07:57","","0","2","5324723","","2015-09-30 15:44:01","2010-08-16 08:02:00",""
"3491481","Encrypting large files using a public key","<p>I need to encrypt a 100KB file using a public key. I've been reading some posts claiming that it is not practical to directly encrypt large files using a public key, and that the preferred method is to encrypt the file using a symmetric key and then encrypt this symmetric key using the public key.
It seems that a naive solution would be to break the large file to pieces and encrypt each one of them using the same public key. My question is whether and why this solution is wrong?</p>
","<p>Asymmetric cryptography is too slow, the most used approach is to encrypt random symmetric key with asymmetric, and encrypt your data with that symmetric key.
And, as well, the best way is to use well-known protocol/standard for that purpose (OpenPGP for instance).</p>
","9747","<public-key-encryption><encryption-asymmetric>","10","1","5","2015-09-30 16:07:57","","0","2","5324723","","2015-09-30 15:44:01","2010-08-16 08:02:00",""
"3491481","Encrypting large files using a public key","<p>I need to encrypt a 100KB file using a public key. I've been reading some posts claiming that it is not practical to directly encrypt large files using a public key, and that the preferred method is to encrypt the file using a symmetric key and then encrypt this symmetric key using the public key.
It seems that a naive solution would be to break the large file to pieces and encrypt each one of them using the same public key. My question is whether and why this solution is wrong?</p>
","<p>Aside from the speed-boost of symmetric key encryption, there's another possible benefit: By first encrypting the message with a random securely-generated symmetric key, you can then encrypt the symmetric key for multiple recipients, once in each recipient's own public asymmetric key, without having to re-encrypt the entire message.</p>
","9747","<public-key-encryption><encryption-asymmetric>","10","1","5","2015-09-30 16:07:57","","0","2","5324723","","2015-09-30 15:44:01","2010-08-16 08:02:00",""
"18539274","Extracting Private key from pkcs12 and text encryption","<p>I have .p12 file, I am extracting the private key using openssl, I have a password for extracting it. </p>

<pre><code>openssl pkcs12 -in my.p12 -nocerts -out privateKey.pem
</code></pre>

<p>And after I get my private key, I'm trying to use that key for encryption:</p>

<pre><code> public static void main(String[] args) throws Exception {
        Security.addProvider(new BouncyCastleProvider());
        KeyPair keyPair = readKeyPair(privateKey, ""testpassword"".toCharArray());
        Cipher cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.ENCRYPT_MODE, keyPair.getPublic());
        byte[] textEncrypted = cipher.doFinal(""hello world"".getBytes());
        System.out.println(""encrypted: ""+new String(textEncrypted));
        cipher.init(Cipher.DECRYPT_MODE, keyPair.getPrivate());
        byte[] textDecrypted = cipher.doFinal(textEncrypted);
        System.out.println(""decrypted: ""+new String(textDecrypted));
    }

    private static KeyPair readKeyPair(File privateKey, char[] keyPassword) throws IOException {
        FileReader fileReader = new FileReader(privateKey);
        PEMReader r = new PEMReader(fileReader, new DefaultPasswordFinder(keyPassword));
        try {
            return (KeyPair) r.readObject(); // this returns null
        } catch (IOException ex) {
            throw new IOException(""The private key could not be decrypted"", ex);
        } finally {
            r.close();
            fileReader.close();
        }
    }
</code></pre>

<p><strong>r.readObject();</strong> returns null. But when I create a private key by myself by this command:</p>

<pre><code>openssl genrsa -out privkey.pem 2048
</code></pre>

<p>The above code works fine. </p>

<ul>
<li>How can I extract private key from p12 file properly?</li>
<li>Or is there any way to use p12 file for encrypt/decrypt the text
without extracting through command line?</li>
</ul>

<p><em>I know it is just <a href=""http://en.wikipedia.org/wiki/PKCS_%E2%99%AF12"" rel=""nofollow"">PKCS#12</a> is just archaive file which stores keys.</em></p>
","<p>I don't know what is wrong with your code, but I have code that reads stuff from a key store. I read the file into a KeyStore instance and then access the key or entry as appropriate. Here are some of the relevant calls:</p>

<pre><code>char[] password;
String alias;
java.security.KeyStore keyStore = KeyStore.getInstance(""PKCS12"", ""BC"");
keyStore.load(inputStream, password);
java.security.PrivateKey privateKey = (PrivateKey) keyStore.getKey(alias, password);
java.security.keystore.PrivateKeyEntry privateKeyEntry = (PrivateKeyEntry) keyStore.getEntry(alias, new KeyStore.PasswordProtection(password));
</code></pre>

<p>To find the alias of the entry you are interested in, I suggest using keytool (comes with JDK):</p>

<pre><code>keytool -list -v -keystore keystore.pkcs12 -storetype pkcs12
</code></pre>

<p>You will be prompted for the keystore password and then get information like this:</p>

<pre><code>Keystore type: PKCS12
Keystore provider: SunJSSE

Your keystore contains 1 entry

Alias name: thealias
Creation date: Aug 30, 2013
Entry type: PrivateKeyEntry
Certificate chain length: 2
[... lots of info about the certificates deleted ...]
</code></pre>
","9369","<java><encryption><rsa><encryption-asymmetric><pkcs#12>","2","2","1","2013-08-30 19:10:36","18539647","0","3","","","","2013-08-30 18:25:21",""
"19294413","Create .pem file for public key RSA encryption C# .net","<p>I want to create <code>.pem</code> file for the public key generated by this method </p>

<pre><code>public static Tuple&lt;string, string&gt; CreateKeyPair()
{
    CspParameters cspParams = 
        new CspParameters { 
            ProviderType = 1 /* PROV_RSA_FULL */ 
        };

    RSACryptoServiceProvider rsaProvider = 
        new RSACryptoServiceProvider(1024, cspParams);

    string publicKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(false));
    string privateKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(true));

    return new Tuple&lt;string, string&gt;(privateKey, publicKey);
}
</code></pre>

<p>Because I was generating this key for mobile application and they can not read it, they requested <code>.pem</code> file instead of public key as string</p>

<p>Please advice,</p>
","<p>First off, a so-called <code>.pem</code> file is not really a fixed specification or format. Several different kinds of distinct file formats are generally described as ""PEM"" files. When the SSLeay (now OpenSSL) project needed to produce a base64 encoded output file containing key information they borrowed formatting concepts from the old Privacy-Enhanced Mail RFCs <a href=""http://tools.ietf.org/html/rfc1421"">1421</a>-1424 and they added the extension <code>.pem</code> to the end of these files. But such a file may contain public keys, private keys, certificate requests, certificates, certificate lists, and so on. Each is different. So if all you're told is to produce a <code>.pem</code> file you're going to have to guess what's really needed.</p>

<p>The easiest way to write such files is to use the <a href=""http://bouncycastle.org/csharp/index.html"">Bouncycastle C# library</a>. The package <code>Org.BouncyCastle.OpenSsl</code> contains a number of utilities including a <code>PemWriter</code> class that should help you.</p>
","8888","<c#><encryption><rsa><public-key-encryption><encryption-asymmetric>","5","6","2","2017-06-09 14:49:29","19296996","0","2","1019724","","2013-10-10 11:58:52","2013-10-10 11:22:00",""
"19294413","Create .pem file for public key RSA encryption C# .net","<p>I want to create <code>.pem</code> file for the public key generated by this method </p>

<pre><code>public static Tuple&lt;string, string&gt; CreateKeyPair()
{
    CspParameters cspParams = 
        new CspParameters { 
            ProviderType = 1 /* PROV_RSA_FULL */ 
        };

    RSACryptoServiceProvider rsaProvider = 
        new RSACryptoServiceProvider(1024, cspParams);

    string publicKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(false));
    string privateKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(true));

    return new Tuple&lt;string, string&gt;(privateKey, publicKey);
}
</code></pre>

<p>Because I was generating this key for mobile application and they can not read it, they requested <code>.pem</code> file instead of public key as string</p>

<p>Please advice,</p>
","<p>Recently I need to save <code>PublicKey</code> and <code>PrivateKey</code> generated in my C# application to file, and works with it later. I use for this purpose such library as <a href=""https://github.com/jrnker/CSharp-easy-RSA-PEM"" rel=""noreferrer"">CSharp-easy-RSA-PEM</a>.</p>

<p>It is very simple and quick solution, so I will recommend this library to other guys.</p>

<p>I use following code to get <code>PublicKey</code> as <code>string</code> (and save it to <code>pem</code> file in format <code>Base64</code>):</p>

<pre><code>string publicKeyStr = Crypto.ExportPublicKeyToX509PEM(_cryptoServiceProvider);
</code></pre>

<p>it returns something like this:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCxnBvS8cdsnAev2sRDRYWxznm1
QxZzaypfNXLvK7CDGk8TR7K+Pzsa+tpJfoyN/Z4B6xdlpsERo2Cu6AzolvrDLx5w
ZoI0kgdfaBMbUkdOB1m97zFYjKWoPeTskFzWZ3GHcQ3EXT0NJXXFXAskY45vEpbc
5qFgEhcPy3BMqHRibwIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>And I use following code to get <code>PrivateKey</code> as <code>string</code>:</p>

<pre><code>string privateKeyStr = Crypto.ExportPrivateKeyToRSAPEM(_cryptoServiceProvider);
</code></pre>

<p>it returns something like this:</p>

<pre><code>-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQCxnBvS8cdsnAev2sRDRYWxznm1QxZzaypfNXLvK7CDGk8TR7K+
Pzsa+tpJfoyN/Z4B6xdlpsERo2Cu6AzolvrDLx5wZoI0kgdfaBMbUkdOB1m97zFY
jKWoPeTskFzWZ3GHcQ3EXT0NJXXFXAskY45vEpbc5qFgEhcPy3BMqHRibwIDAQAB
AoGAAdwpqm7fxh0S3jOYpJULeQ45gL11dGX7Pp4CWHYzq1vQ14SDtFxYfnLWwGLz
499zvSoSHP1pvjPgz6lxy9Rw8dUxCgvh8VQydMQzaug2XD1tkmtcSWInwFKBAfQ7
rceleyD0aK8JHJiuzM1p+yIJ/ImGK0Zk2U/svqrdJrNR4EkCQQDo3d5iWcjd3OLD
38k1GALEuN17KNpJqLvJcIEJl0pcHtOiNnyy2MR/XUghDpuxwhrhudB/TvX4tuI0
MUeVo5fjAkEAw0D6m9jkwE5uuEYN/l/84rbQ79p2I7r5Sk6zbMyBOvgl6CDlJyxY
434DDm6XW7c55ALrnlratEW5HPiPxuHZBQJANnE4vtGy7nvn4Fd/mRQmAYwe695f
On1iefP9lxpx3huu6uvGN6IKPqS2alQZ/nMdCc0Be+IgC6fmNsGWtNtsdQJAJvB4
ikgxJqD9t8ZQ2CAwgM5Q0OTSlsGdIdKcOeB3DVmbxbV5vdw8RfJFjcVEbkgWRYDH
mKcp4rXc+wgfNFyqOQJATZ1I5ER8AZAn5JMMH9zK+6oFvhLUgKyWO18W+dbcFrBd
AzlTB+HHYEIyTmaDtXWAwgBvJNIHk4BbM1meCH4QnA==
-----END RSA PRIVATE KEY-----
</code></pre>

<p>Then you can use</p>

<pre><code>RSACryptoServiceProvider publicX509key = Crypto.DecodeX509PublicKey(publicKeyStr);
RSACryptoServiceProvider privateRSAkey = Crypto.DecodeRsaPrivateKey(privateKeyStr);
</code></pre>

<p>to restore saved keys back to <code>RSACryptoServiceProvider</code>.</p>

<p>So, if someone need to resolve similar issue, you can just download <a href=""https://github.com/jrnker/CSharp-easy-RSA-PEM"" rel=""noreferrer"">this</a> library, go to <code>Solution Explorer -&gt; (Right click on your project) -&gt; Add -&gt; Reference -&gt; Overview</code> in your <code>Visual Studio</code> to add this library in your project, and add <code>using CSharp_easy_RSA_PEM;</code> where you need it :)</p>
","8888","<c#><encryption><rsa><public-key-encryption><encryption-asymmetric>","5","8","2","2017-06-09 14:49:29","19296996","0","2","1019724","","2013-10-10 11:58:52","2013-10-10 11:22:00",""
"51228645","How can I encrypt with a RSA private key in python?","<p>Is it possible to encrypt a message with a private key in python using pycryptodome or any other library? I know that you are not supposed to encrypt with the private key and decrypt with the public key, but my purpose is to encrypt with the private one so the receiver could be sure that the message was send by the real author. More than secure encryption I'm looking for some kind of obfuscation. I want to do an app where the message is public but it can only be seen if you have the public key.
I've tried to do this:</p>

<pre><code>from Crypto import Random
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64


def generate_keys():
    modulus_lenght = 256 * 4
    private_key = RSA.generate(modulus_lenght, Random.new().read)
    public_key = private_key.publickey()
    return private_key, public_key

def encrypt_private_key(a_message, private_key):
    encryptor = PKCS1_OAEP.new(private_key)
    encrypted_msg = encryptor.encrypt(a_message)
    encoded_encrypted_msg = base64.b64encode(encrypted_msg)
   return encoded_encrypted_msg

def decrypt_public_key(encoded_encrypted_msg, public_key):
    encryptor = PKCS1_OAEP.new(public_key)
    decoded_encrypted_msg = base64.b64decode(encoded_encrypted_msg)
    decoded_decrypted_msg = encryptor.decrypt(decoded_encrypted_msg)
    return decoded_decrypted_msg

private_key, public_key = generate_keys()

message = ""Hello world""

encoded = encrypt_private_key(message, private_key)
decoded = decrypt_public_key(encoded, public_key)

print decoded
</code></pre>

<p>But it raises the next error: TypeError: This is not a private key.</p>
","<p><strong>Short answer</strong></p>

<ul>
<li>the code that you are using doesn't allow you to do that for security reasons</li>
<li>alternative code below</li>
</ul>

<p><strong>Long answer</strong> </p>

<p>I was curious about your problem and then I started to try to code</p>

<p>After a while I realized that if you run this snippet you will see that it correctly works:</p>

<pre><code>#!/usr/bin/env python

from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import base64

def generate_keys():
    modulus_length = 1024

    key = RSA.generate(modulus_length)
    #print (key.exportKey())

    pub_key = key.publickey()
    #print (pub_key.exportKey())

    return key, pub_key

def encrypt_private_key(a_message, private_key):
    encryptor = PKCS1_OAEP.new(private_key)
    encrypted_msg = encryptor.encrypt(a_message)
    print(encrypted_msg)
    encoded_encrypted_msg = base64.b64encode(encrypted_msg)
    print(encoded_encrypted_msg)
    return encoded_encrypted_msg

def decrypt_public_key(encoded_encrypted_msg, public_key):
    encryptor = PKCS1_OAEP.new(public_key)
    decoded_encrypted_msg = base64.b64decode(encoded_encrypted_msg)
    print(decoded_encrypted_msg)
    decoded_decrypted_msg = encryptor.decrypt(decoded_encrypted_msg)
    print(decoded_decrypted_msg)
    #return decoded_decrypted_msg

def main():
  private, public = generate_keys()
  print (private)
  message = b'Hello world'
  encoded = encrypt_private_key(message, public)
  decrypt_public_key(encoded, private)

if __name__== ""__main__"":
  main()
</code></pre>

<p>but if you now change two of the final lines [i.e. the role of the keys] into:</p>

<pre><code>    encoded = encrypt_private_key(message, private)
    decrypt_public_key(encoded, public)
</code></pre>

<p>and rerun the program you will get the <code>TypeError: No private key</code></p>

<p>Let me quote from <a href=""https://stackoverflow.com/a/10970540/4092588"">this great answer</a>: </p>

<p>""As it turns out, PyCrypto is only trying to prevent you from mistaking one for the other here, OpenSSL or Ruby OpenSSL allow you for example to do both: public_encrypt/public_decrypt and private_encrypt/private_decrypt</p>

<p>[...]</p>

<p>Additional things need to be taken care of to make the result usable in practice. And that's why there is a dedicated <a href=""https://www.dlitz.net/software/pycrypto/api/current/Crypto.Signature.PKCS1_PSS-module.html"" rel=""noreferrer"">signature package</a> in PyCrypto - this effectively does what you described, but also additionally takes care of the things I mentioned""</p>

<p>Adapting <a href=""https://gist.github.com/dennislwy/0194036234445776d48ad2fb594457d4"" rel=""noreferrer"">this link</a> I came to the following code that should solve your question:</p>

<pre><code># RSA helper class for pycrypto
# Copyright (c) Dennis Lee
# Date 21 Mar 2017

# Description:
# Python helper class to perform RSA encryption, decryption, 
# signing, verifying signatures &amp; keys generation

# Dependencies Packages:
# pycrypto 

# Documentation:
# https://www.dlitz.net/software/pycrypto/api/2.6/

from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA512, SHA384, SHA256, SHA, MD5
from Crypto import Random
from base64 import b64encode, b64decode
import rsa

hash = ""SHA-256""

def newkeys(keysize):
    random_generator = Random.new().read
    key = RSA.generate(keysize, random_generator)
    private, public = key, key.publickey()
    return public, private

def importKey(externKey):
    return RSA.importKey(externKey)

def getpublickey(priv_key):
    return priv_key.publickey()

def encrypt(message, pub_key):
    #RSA encryption protocol according to PKCS#1 OAEP
    cipher = PKCS1_OAEP.new(pub_key)
    return cipher.encrypt(message)

def decrypt(ciphertext, priv_key):
    #RSA encryption protocol according to PKCS#1 OAEP
    cipher = PKCS1_OAEP.new(priv_key)
    return cipher.decrypt(ciphertext)

def sign(message, priv_key, hashAlg=""SHA-256""):
    global hash
    hash = hashAlg
    signer = PKCS1_v1_5.new(priv_key)
    if (hash == ""SHA-512""):
        digest = SHA512.new()
    elif (hash == ""SHA-384""):
        digest = SHA384.new()
    elif (hash == ""SHA-256""):
        digest = SHA256.new()
    elif (hash == ""SHA-1""):
        digest = SHA.new()
    else:
        digest = MD5.new()
    digest.update(message)
    return signer.sign(digest)

def verify(message, signature, pub_key):
    signer = PKCS1_v1_5.new(pub_key)
    if (hash == ""SHA-512""):
        digest = SHA512.new()
    elif (hash == ""SHA-384""):
        digest = SHA384.new()
    elif (hash == ""SHA-256""):
        digest = SHA256.new()
    elif (hash == ""SHA-1""):
        digest = SHA.new()
    else:
        digest = MD5.new()
    digest.update(message)
    return signer.verify(digest, signature)

def main():
    msg1 = b""Hello Tony, I am Jarvis!""
    msg2 = b""Hello Toni, I am Jarvis!""

    keysize = 2048

    (public, private) = rsa.newkeys(keysize)

    # https://docs.python.org/3/library/base64.html
    # encodes the bytes-like object s
    # returns bytes
    encrypted = b64encode(rsa.encrypt(msg1, private))
    # decodes the Base64 encoded bytes-like object or ASCII string s
    # returns the decoded bytes
    decrypted = rsa.decrypt(b64decode(encrypted), private)
    signature = b64encode(rsa.sign(msg1, private, ""SHA-512""))

    verify = rsa.verify(msg1, b64decode(signature), public)

    #print(private.exportKey('PEM'))
    #print(public.exportKey('PEM'))
    print(""Encrypted: "" + encrypted.decode('ascii'))
    print(""Decrypted: '%s'"" % (decrypted))
    print(""Signature: "" + signature.decode('ascii'))
    print(""Verify: %s"" % verify)
    rsa.verify(msg2, b64decode(signature), public)

if __name__== ""__main__"":
    main()
</code></pre>

<p>Final notes: </p>

<ul>
<li>the last <code>print</code>s have <code>ascii</code> because as stated <a href=""https://stackoverflow.com/a/45151058/4092588"">here</a> ""In case of base64 however, all characters are valid ASCII characters""</li>
<li>in this case we are using the same key - the private one - both for encrypting and decrypting, so yes: we would end up to be symmetric but...</li>
<li>but - as stated <a href=""https://stackoverflow.com/a/20059249/4092588"">here</a> - ""The public key is PUBLIC - it's something you would readily share and thus would be easily disseminated. There's no added value in that case compared to using a symmetric cipher and a shared key"" plus ""Conceptually, ""encrypting"" with the private key is more useful for signing a message whereas the ""decryption"" using the public key is used for verifying the message""</li>
<li>the same identical last principle is expressed in <a href=""https://crypto.stackexchange.com/a/2124"">this answer</a> - ""Typically [...] we say sign with the private key and verify with the public key""</li>
</ul>
","8821","<python><rsa><private-key><public-key><encryption-asymmetric>","3","6","1","2018-07-09 07:37:04","51230724","2","3","","","","2018-07-08 03:38:03",""
"8480918","Java: How to create a RSA Public Key from the String","<p>I have the byte array of the RSA Public Key. I found on the internet that I can create a real PublicKey object of it by using this code:</p>

<pre><code>PublicKey publicKey = 
    KeyFactory.getInstance(""RSA"").generatePublic(new X509EncodedKeySpec(bytes));
</code></pre>

<p>But every time I run this code, I'm getting another result for the encrypted data using that key. I'm sure the data I want to encrypt is always the same, so does the byte array representing the key.</p>

<p>Is this normal?</p>

<p>Here is my code always producing another output:</p>

<pre><code>byte[] keyBytes = Base64.decodeBase64(rsa_1024_public_key);
      // rsa_1024_public key is a constant String

Cipher c = Cipher.getInstance(""RSA"");

PublicKey publicKey =
   KeyFactory.getInstance(""RSA"").generatePublic(new X509EncodedKeySpec(keyBytes));

c.init(Cipher.ENCRYPT_MODE, publicKey);

return c.doFinal(password.getBytes());
</code></pre>

<p>This is probably a part of the asymmetric encryption algorithm?</p>

<p>Thanks.</p>
","<p>RSA is non-determinstic. </p>

<p>You can make it deterministic by selecting a non-random padding mode; however, that will not be secure.</p>
","8323","<java><rsa><encryption-asymmetric>","9","7","1","2011-12-19 21:28:52","8567799","4","3","","","","2011-12-12 21:11:43",""
"16994452","powershell asymmetric encrypt/decrypt functions","<p>I wasn't able to find good powershell functions to utilize asymmetric encryption so I created the following.  Would like any feedback in terms of improvement as I'm a crypto noob.  With the caveat that these functions are <em>very</em> basic.  There isn't error checking and the write-host after a decrypt is hardly necessary.  Just want to establish the core functionality before adding things like protected memory and such.</p>

<p>This has been successfully tested on two systems: Win8 w/Powershell v3 &amp; Win2008R2 w/Powershell v2.</p>

<pre><code>Function Encrypt-Asymmetric([string]$Encrypt,[string]$CertPath,[string]$XmlExportPath)
{
    # Encrypts a string with a public key
    $pubcer = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($CertPath)
    $byteval = [System.Text.Encoding]::UTF8.GetBytes($Encrypt)
    $pubcer.PublicKey.Key.Encrypt($byteval,$true) | Export-Clixml -Path $XmlExportPath    
}

Function Decrypt-Asymmetric([string]$XmlPath,[string]$CertThumbprint)
{
    # Decrypts cipher text using the private key
    # Assumes the certificate is in the LocalMachine store
    $store = new-object System.Security.Cryptography.X509Certificates.X509Store([System.Security.Cryptography.X509Certificates.StoreLocation]::LocalMachine)
    $store.open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadOnly)
    $cer = $store.Certificates | %{if($_.thumbprint -eq $CertThumbprint){$_}}
    $ciphertext = Import-Clixml -Path $XmlPath
    $decryptedBytes = $cer.PrivateKey.Decrypt($ciphertext,$true)
    $ClearText = [System.Text.Encoding]::UTF8.GetString($decryptedBytes)
    Write-Host $ClearText
}
</code></pre>
","<p>I know this is old.  I took the starting point you had here and added some items.  I tried to clean where appropriate and use variable names that might help make things a little more easier for someonelse that reads this to understand.</p>

<p>Encryption:</p>

<pre><code>Function Encrypt-Asymmetric {
[CmdletBinding()]
[OutputType([System.String])]
param(
    [Parameter(Position=0, Mandatory=$true)][ValidateNotNullOrEmpty()][System.String]
    $ClearText,
    [Parameter(Position=1, Mandatory=$true)][ValidateNotNullOrEmpty()][ValidateScript({Test-Path $_ -PathType Leaf})][System.String]
    $PublicCertFilePath
)
# Encrypts a string with a public key
$PublicCert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($PublicCertFilePath)
$ByteArray = [System.Text.Encoding]::UTF8.GetBytes($ClearText)
$EncryptedByteArray = $PublicCert.PublicKey.Key.Encrypt($ByteArray,$true)
$EncryptedBase64String = [Convert]::ToBase64String($EncryptedByteArray)

Return $EncryptedBase64String 
}
</code></pre>

<p>Decryption:</p>

<pre><code>Function Decrypt-Asymmetric
{
[CmdletBinding()]
[OutputType([System.String])]
param(
    [Parameter(Position=0, Mandatory=$true)][ValidateNotNullOrEmpty()][System.String]
    $EncryptedBase64String,
    [Parameter(Position=1, Mandatory=$true)][ValidateNotNullOrEmpty()][System.String]
    $CertThumbprint
)
# Decrypts text using the private key
# Assumes the certificate is in the LocalMachine\My (Personal) Store
$Cert = Get-ChildItem cert:\LocalMachine\My | where { $_.Thumbprint -eq $CertThumbprint }
if($Cert) {
    $EncryptedByteArray = [Convert]::FromBase64String($EncryptedBase64String)
    $ClearText = [System.Text.Encoding]::UTF8.GetString($Cert.PrivateKey.Decrypt($EncryptedByteArray,$true))
}
Else {Write-Error ""Certificate with thumbprint: $CertThumbprint not found!""}

Return $ClearText
}
</code></pre>

<p><a href=""http://grokgarble.com/blog/?p=228"" rel=""noreferrer"">http://grokgarble.com/blog/?p=228</a></p>
","8066","<windows><powershell><certificate><encryption-asymmetric>","2","6","1","2014-02-23 08:02:43","","4","1","321731","","2014-02-23 08:02:43","2013-06-07 23:41:09",""
"32900998","JWT Keys - Asymmetric and Symmetric","<p>I understand the difference between symmetric and asymmetric keys. I understand that the keys are used to calculate the signature and then verify them. However diving a little deeper, I'd like to understand a bit more which I'm having trouble finding online. </p>

<p>Are the keys given to the consumers to verify the contents? Wouldn't that give consumers the ability to change the JWT contents if symmetric keys are used? </p>

<p>When asymmetric keys are used is the signature calculated with the private or public key? Is the consumer given the public/private key?</p>

<p>Thanks</p>
","<p>Symmetric keys are only to be used in a peer-to-peer way so it would be pointless for the receiver to modify JWTs for which only he and the sender have a shared key (and he is the intended recipient).</p>

<p>Asymmetric key signatures (in JWTs as well as in general) are produced by the sender with the private key and verified by the receiver with the public key. The consumer/receiver is given only the public key which happens out_of_band (i.e. through another means of communication than the one you use to exchange the secured data).</p>
","7956","<jwt><signature><encryption-asymmetric>","12","19","3","2019-08-26 19:29:38","32901823","0","3","","","","2015-10-02 05:22:29",""
"32900998","JWT Keys - Asymmetric and Symmetric","<p>I understand the difference between symmetric and asymmetric keys. I understand that the keys are used to calculate the signature and then verify them. However diving a little deeper, I'd like to understand a bit more which I'm having trouble finding online. </p>

<p>Are the keys given to the consumers to verify the contents? Wouldn't that give consumers the ability to change the JWT contents if symmetric keys are used? </p>

<p>When asymmetric keys are used is the signature calculated with the private or public key? Is the consumer given the public/private key?</p>

<p>Thanks</p>
","<p>With asymmetric JWTs(JWS) that are signed with a Private Key of the Sender, the Receiver of the Token is basically receiving the Payload(header/claims) that are in <strong>clear text</strong> other the being base64 encoded. This is why they need to be transmitted in a Secured Socket Layer(SSL) environment. To Validate the Received Signature, the Public Key is used by the Receiver to recompute the Signature of the received Payload. If the two Signatures, the Received Signature and the Computed Signature, don't match, then the Payload cant be trusted-- it is Invalid
Therefore, such an Asymmetric JWS would <strong>not</strong> be a good method to include a sensitive ""claim"" such as a Social Security Number because the content of the Payload is not encrypted. 
The include such sensitive data in a JWT the Json Web Token Encrypted JWE could be employed. In the JWE the entire Payload is encrypted. </p>
","7956","<jwt><signature><encryption-asymmetric>","12","1","3","2019-08-26 19:29:38","32901823","0","3","","","","2015-10-02 05:22:29",""
"32900998","JWT Keys - Asymmetric and Symmetric","<p>I understand the difference between symmetric and asymmetric keys. I understand that the keys are used to calculate the signature and then verify them. However diving a little deeper, I'd like to understand a bit more which I'm having trouble finding online. </p>

<p>Are the keys given to the consumers to verify the contents? Wouldn't that give consumers the ability to change the JWT contents if symmetric keys are used? </p>

<p>When asymmetric keys are used is the signature calculated with the private or public key? Is the consumer given the public/private key?</p>

<p>Thanks</p>
","<p>No one will encrypt the payload of a JWT. It's all about the signature!
RSA or ECDSA (both asymetric) signatures can be verified just with a puiblic key, for symetric signed signatures you'll need an auth-service.</p>

<p>Most Common JWT Signing Algorithms:</p>

<pre><code>HMAC + SHA256
RSASSA-PKCS1-v1_5 + SHA256
ECDSA + P-256 + SHA256
</code></pre>

<p>see more <a href=""https://tools.ietf.org/html/rfc7518#section-3"" rel=""nofollow noreferrer"">https://tools.ietf.org/html/rfc7518#section-3</a></p>
","7956","<jwt><signature><encryption-asymmetric>","12","0","3","2019-08-26 19:29:38","32901823","0","3","","","","2015-10-02 05:22:29",""
"2698868","Java RSA Encrypt - Decrypt .NET","<p>I am encrypting on JAVA using RSA and attempting to decrypt using .NET.  I am including my JAVA code and .NET code in hopes that someone has some experience with this sort of thing. </p>

<p>JAVA Code:</p>

<pre><code>byte[] modulusBytes = Base64.decode(""xTSiS4+I/x9awUXcF66Ffw7tracsQfGCn6g6k/hGkLquHYMFTCYk4mOB5NwLwqczwvl8HkQfDShGcvrm47XHKUzA8iadWdA5n4toBECzRxiCWCHm1KEg59LUD3fxTG5ogGiNxDj9wSguCIzFdUxBYq5ot2J4iLgGu0qShml5vwk="");
byte[] exponentBytes = Base64.decode(""AQAB"");
BigInteger modulus = new BigInteger(1, modulusBytes );
BigInteger exponent = new BigInteger(1, exponentBytes);

RSAPublicKeySpec rsaPubKey = new RSAPublicKeySpec(modulus, exponent);
KeyFactory fact = KeyFactory.getInstance(""RSA"");
PublicKey pubKey = fact.generatePublic(rsaPubKey);

Cipher cipher = Cipher.getInstance(""RSA"");
cipher.init(Cipher.ENCRYPT_MODE, pubKey);

byte[] plainBytes = new String(""big kitty dancing"").getBytes(""UTF-8"");
byte[] cipherData = cipher.doFinal( plainBytes );
String encryptedString = Base64.encodeBytes(cipherData);
</code></pre>

<p>From this JAVA Code I take the results of the encryptedString which happen to be:</p>

<p>FoP4+AAIH6hcabXnrvNG5YUk/nBv9n9HU0CAgZjkIWQIDjbOpSwoPVBFERrZ6641x2QaoJw5yv18XAay+0WrCaSw4sveRX+hmPm5qeVUPcjoR4slsVZ/hBFJtAHj9tva4hOugWDZa9s3RVJlxkNfE+u+Kt/YKLOi2EYbH05HjeM=</p>

<p>And attempt to decrypt using the following .NET code</p>

<pre><code>const int PROVIDER_RSA_FULL = 1;
const string CONTAINER_NAME = ""Tracker"";

CspParameters cspParams;
cspParams = new CspParameters(PROVIDER_RSA_FULL);
cspParams.KeyContainerName = CONTAINER_NAME;
RSACryptoServiceProvider rsa1 = new RSACryptoServiceProvider(cspParams);
rsa1.FromXmlString(""&lt;RSAKeyValue&gt;&lt;Modulus&gt;xTSiS4+I/x9awUXcF66Ffw7tracsQfGCn6g6k/hGkLquHYMFTCYk4mOB5NwLwqczwvl8HkQfDShGcvrm47XHKUzA8iadWdA5n4toBECzRxiCWCHm1KEg59LUD3fxTG5ogGiNxDj9wSguCIzFdUxBYq5ot2J4iLgGu0qShml5vwk=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;+lXMCEwIN/7+eMpBrq87kQppxu3jJBTwztGTfXNaPUTx+A6uqRwug5oHBbSpYXKNDNCBzVm/0VxB3bo4FJx+ZQ==&lt;/P&gt;&lt;Q&gt;yasOGaJaE9xlF9T2xRuKeG9ZxCiyjhYaYB/mbtL+SIbtkRLi/AxaU4g2Il/UxhxhSXArKxIzV28zktispPJx1Q==&lt;/Q&gt;&lt;DP&gt;ueRgQIEFUV+fY979a1RgrVHIPpqEI1URhOMH3Q59oiXCcOumM5njyIHmWQxRAzXnG+7xlKXi1PrnRll0L4oOKQ==&lt;/DP&gt;&lt;DQ&gt;dfEMNgG1HJhwpxdtmqkYuoakwQvsIRzcIAuIAJh1DoWaupWJGk8/JEstHb1d+t7uJrzrAi2KyT/HscH2diE0YQ==&lt;/DQ&gt;&lt;InverseQ&gt;YoYF9PF6FiC0YngVeaC/eqt/ea8wMYNN3YO1LuzWpcy2exPRj2U0ZbWMvHXMUb4ea2qmhZGx1QlK4ULAuWKpXQ==&lt;/InverseQ&gt;&lt;D&gt;g1WAWI4pEK9TA7CA2Yyy/2FzzNiu0uQCuE2TZYRNiomo96KQXpxwqAzZLw+VDXfJMypwDMAVZe/SqzSJnFEtZxjdxaEo3VLcZ1mnbIL0vS7D6iFeYutF9kF231165qGd3k2tgymNMMpY7oYKjS11Y6JqWDU0WE5hjS2X35iG6mE=&lt;/D&gt;&lt;/RSAKeyValue&gt;"");

string data2Decrypt =    ""FoP4+AAIH6hcabXnrvNG5YUk/nBv9n9HU0CAgZjkIWQIDjbOpSwoPVBFERrZ6641x2QaoJw5yv18XAay+0WrCaSw4sveRX+hmPm5qeVUPcjoR4slsVZ/hBFJtAHj9tva4hOugWDZa9s3RVJlxkNfE+u+Kt/YKLOi2EYbH05HjeM="";

byte[] encyrptedBytes = Convert.FromBase64String(data2Decrypt);  

byte[] plain = rsa1.Decrypt(encyrptedBytes, false);
string decryptedString = System.Text.Encoding.UTF8.GetString(plain);
</code></pre>
","<p>On the Java side, you need to use <code>""RSA/ECB/PKCS1Padding""</code> as algorithm name. With the plain <code>""RSA""</code> name, Java does not add the <a href=""http://www.rsa.com/rsalabs/node.asp?id=2125"" rel=""noreferrer"">PKCS#1</a> padding which the C# implementation expects, hence the ""bad data"".</p>

<p>The padding is a transformation of the input data (your encoded string) into a somewhat larger string which has the same length than the RSA modulus (128 bytes here). It is important for security and injects some randomness (the same input string will not yield the same encrypted string every time; but the decryption process removes that randomness and recovers the right string nonetheless).</p>
","7458","<java><.net><rsa><encryption-asymmetric>","8","7","1","2015-08-13 15:00:56","2699032","3","5","658663","","2015-08-13 15:00:56","2010-04-23 13:23:48",""
"5488401","Deterministic RSA encryption in Java","<p>This is my first question on this site, and I only have a basic mathematical understanding of RSA, so please bear with me! :)</p>

<p>I'm writing a Java web application for my final year project at university. It's a web-based implementation of ""Pret-a-voter"", a secure voting system, for those who have heard of it.</p>

<p>Essentially my problem is that I want to be able to give someone performing the role of an auditor:</p>

<ul>
<li>a <em>source</em> byte array (the plaintext to be encrypted)</li>
<li>an RSA public key file</li>
<li>a ""<em>destination</em>"" byte array, which is the result of my own computation of the cipherdata given the plaintext and the public key</li>
</ul>

<p>I then want the auditor to be able to perform encryption using the first two items, and be satisfied that the third is the result. I therefore need the encryption to be <strong>deterministic</strong>, i.e. generate the same cipherdata each time encryption with the same plaintext and public key are repeated.</p>

<p>(Note - I'm working with very small blocks of data in this project - there is no symmetric encryption involved at all... I'm aware this is an ""interesting"" use of RSA!)</p>

<p>Anyway I found that in Java, using</p>

<pre><code>cipher = Cipher.getInstance(""RSA"");
</code></pre>

<p>uses the default random padding scheme, at a cost of 11 bytes (so with a 2048-bit key pair, it's possible to encrypt 2048/8-11 = 245 bytes). Repeated encryptions of the same plaintext generate different ciphertexts, which is obviously not the ECB mode that I want.</p>

<p>My question is - <strong>should I use the following?</strong></p>

<pre><code>cipher = Cipher.getInstance(""RSA/ECB/NoPadding"");
</code></pre>

<p>I've read in lots of places that RSA is insecure without padding. Is that simply because an attacker can build a dictionary of plaintexts/ciphertexts? This is a side-effect of the deterministic encryption I require in order to allow auditors to verify my encryption, and in my scheme auditors are <em>trusted</em>, so that would be OK.</p>

<p>Part two of my question is more java-related. If I <em>do</em> use RSA/ECB/NoPadding as above, I believe I'm able to provide a source byte array of (say) length 128 (for a 1024-bit RSA key pair) and encrypt that to get another byte array of length 128. If I then try to encrypt <em>that</em> again, with a different 1024-length public key, I get</p>

<blockquote>
  <p>javax.crypto.BadPaddingException: Message is larger than modulus</p>
</blockquote>

<p>Does anyone know why?</p>

<p>EDIT - encryption with NoPadding doesn't always generate this exception - it's temperamental. However, even when encryption does not generate this exception, decryption generates this:</p>

<blockquote>
  <p>javax.crypto.BadPaddingException: Data must start with zero</p>
</blockquote>

<p>Many thanks for reading through this! Any help would be greatly appreciated.</p>

<p>EDIT - sorry, my original question wasn't very clear about what it is I want to do, so here's an [attempt at an] explanation:</p>

<ul>
<li>The plaintext is a voter's vote in an election.</li>
<li>Pret-a-voter aims to be end-to-end verifiable without sacrificing voter confidentiality (etc). After voting, the voter is provided with a receipt that they can use to verify that their vote has been recorded correctly, and which will later show them that their vote has not been tampered with. The voter performs a comparison of the information on their receipt with an identical copy posted on the web.</li>
<li>However, it should not be possible for any voter to prove how he/she voted (as that could lead to coercion) so the information is not the plaintext, but an encrypted copy of the vote.</li>
<li>In fact, the plaintext is encrypted four times, with four different asymmetric keys - held by two different tellers, each holding two of the keys. So, a vote (plaintext) is provided to one teller, who encrypts it using public key #1, and then encrypts THAT ciphertext with his second public key, gives THAT ciphertext to the second teller who encrypts it with his two keys in the same way. The resulting ciphertext (result of four sequential encryptions) is what is posted to the web (made public). The tellers are trusted.</li>
<li>Each encrypted vote can be visualised as an ""onion"" where the centre is the vote and there are several layers of encryption. In order to get to the vote, each layer must be removed in turn, meaning the corresponding private keys (held by the tellers) must be applied in the reverse sequence. This is key to the security - all tellers must work cooperatively in order to decrypt the votes.</li>
<li>The web bulletin board can be visualised as a table with 5 columns - the first (on the left) holds the fully-encrypted votes (also shown on each voter's receipt), and is the only visible column during the vote-casting stage. The second column contains the same set of votes, but with the outer layer removed - teller 2 populates this column and column 3 by decrypting the votes using its private keys during the tallying stage. At the end of the tallying stage, column 5 contains the fully-decrypted votes that can then be tallied.</li>
<li>Each voter gets a receipt that links them to an encrypted vote in column 1. This doesn't show how they voted, but allows them to verify that their vote has not been tampered with as throughout the election process they can verify that their encrypted vote is still there in column 1, untouched. This is only half of the ""end-to-end verification"", of course, since voters are unable to verify that the decryptions have been done correctly, i.e. that there's an entry in column 2 which is their vote minus the outer layer of encryption. Each voter is responsible only for the verification UP TO the point of column 1.</li>
<li>Thereafter, it is the auditors' responsibility to check that the entries in column 1 decrypt to column 2, and so on. The way they do this is by relying on <strong>deterministic</strong> encryption and the public keys used for the encryption being public.</li>
<li>Since public keys are public, you don't want people to simply draw lines from column 5 to column 1, joining up someone's vote as it becomes repeatedly encrypted - that way, a receipt that ties you to an encrypted vote actually ties you to an unencrypted, readable vote --> coercion! So, only columns 1, 3 and 5 are public (this is why each teller performs TWO encryptions), and for each entry in column 3, only ONE of the corresponding entries in {2,4} are revealed to auditors. This prevents anyone (even auditors) from linking an encrypted vote to an unencrypted vote.</li>
<li>Auditors therefore need to take an entry in column 3, be given the corresponding entry in column 2 and the public key, and perform the same encryption to verify that they do indeed get the entry in column 2.</li>
<li>Put together, this offers end-to-end verifiability.</li>
</ul>

<p>Sorry that was so lengthy - I hope it describes my need for deterministic encryptions. I've missed out a lot of fundamental details (I've modified this scheme heavily) but hopefully the core principles are all there. Thank you so much for reading - I really appreciate it.</p>
","<p><a href=""https://en.wikipedia.org/wiki/RSA_(cryptosystem)#Padding"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/RSA_(cryptosystem)#Padding</a></p>

<p>The padding is there precisely to avoid a given plain text being encrypted to a single cyphertext. So if you want a deterministic (single) result for any given plain text your only option is to turn it off.</p>
","7244","<java><encryption><rsa><encryption-asymmetric><deterministic>","9","1","3","2017-06-02 21:42:17","5496250","5","8","629287","","2011-03-30 22:10:46","2011-03-30 15:23:13",""
"5488401","Deterministic RSA encryption in Java","<p>This is my first question on this site, and I only have a basic mathematical understanding of RSA, so please bear with me! :)</p>

<p>I'm writing a Java web application for my final year project at university. It's a web-based implementation of ""Pret-a-voter"", a secure voting system, for those who have heard of it.</p>

<p>Essentially my problem is that I want to be able to give someone performing the role of an auditor:</p>

<ul>
<li>a <em>source</em> byte array (the plaintext to be encrypted)</li>
<li>an RSA public key file</li>
<li>a ""<em>destination</em>"" byte array, which is the result of my own computation of the cipherdata given the plaintext and the public key</li>
</ul>

<p>I then want the auditor to be able to perform encryption using the first two items, and be satisfied that the third is the result. I therefore need the encryption to be <strong>deterministic</strong>, i.e. generate the same cipherdata each time encryption with the same plaintext and public key are repeated.</p>

<p>(Note - I'm working with very small blocks of data in this project - there is no symmetric encryption involved at all... I'm aware this is an ""interesting"" use of RSA!)</p>

<p>Anyway I found that in Java, using</p>

<pre><code>cipher = Cipher.getInstance(""RSA"");
</code></pre>

<p>uses the default random padding scheme, at a cost of 11 bytes (so with a 2048-bit key pair, it's possible to encrypt 2048/8-11 = 245 bytes). Repeated encryptions of the same plaintext generate different ciphertexts, which is obviously not the ECB mode that I want.</p>

<p>My question is - <strong>should I use the following?</strong></p>

<pre><code>cipher = Cipher.getInstance(""RSA/ECB/NoPadding"");
</code></pre>

<p>I've read in lots of places that RSA is insecure without padding. Is that simply because an attacker can build a dictionary of plaintexts/ciphertexts? This is a side-effect of the deterministic encryption I require in order to allow auditors to verify my encryption, and in my scheme auditors are <em>trusted</em>, so that would be OK.</p>

<p>Part two of my question is more java-related. If I <em>do</em> use RSA/ECB/NoPadding as above, I believe I'm able to provide a source byte array of (say) length 128 (for a 1024-bit RSA key pair) and encrypt that to get another byte array of length 128. If I then try to encrypt <em>that</em> again, with a different 1024-length public key, I get</p>

<blockquote>
  <p>javax.crypto.BadPaddingException: Message is larger than modulus</p>
</blockquote>

<p>Does anyone know why?</p>

<p>EDIT - encryption with NoPadding doesn't always generate this exception - it's temperamental. However, even when encryption does not generate this exception, decryption generates this:</p>

<blockquote>
  <p>javax.crypto.BadPaddingException: Data must start with zero</p>
</blockquote>

<p>Many thanks for reading through this! Any help would be greatly appreciated.</p>

<p>EDIT - sorry, my original question wasn't very clear about what it is I want to do, so here's an [attempt at an] explanation:</p>

<ul>
<li>The plaintext is a voter's vote in an election.</li>
<li>Pret-a-voter aims to be end-to-end verifiable without sacrificing voter confidentiality (etc). After voting, the voter is provided with a receipt that they can use to verify that their vote has been recorded correctly, and which will later show them that their vote has not been tampered with. The voter performs a comparison of the information on their receipt with an identical copy posted on the web.</li>
<li>However, it should not be possible for any voter to prove how he/she voted (as that could lead to coercion) so the information is not the plaintext, but an encrypted copy of the vote.</li>
<li>In fact, the plaintext is encrypted four times, with four different asymmetric keys - held by two different tellers, each holding two of the keys. So, a vote (plaintext) is provided to one teller, who encrypts it using public key #1, and then encrypts THAT ciphertext with his second public key, gives THAT ciphertext to the second teller who encrypts it with his two keys in the same way. The resulting ciphertext (result of four sequential encryptions) is what is posted to the web (made public). The tellers are trusted.</li>
<li>Each encrypted vote can be visualised as an ""onion"" where the centre is the vote and there are several layers of encryption. In order to get to the vote, each layer must be removed in turn, meaning the corresponding private keys (held by the tellers) must be applied in the reverse sequence. This is key to the security - all tellers must work cooperatively in order to decrypt the votes.</li>
<li>The web bulletin board can be visualised as a table with 5 columns - the first (on the left) holds the fully-encrypted votes (also shown on each voter's receipt), and is the only visible column during the vote-casting stage. The second column contains the same set of votes, but with the outer layer removed - teller 2 populates this column and column 3 by decrypting the votes using its private keys during the tallying stage. At the end of the tallying stage, column 5 contains the fully-decrypted votes that can then be tallied.</li>
<li>Each voter gets a receipt that links them to an encrypted vote in column 1. This doesn't show how they voted, but allows them to verify that their vote has not been tampered with as throughout the election process they can verify that their encrypted vote is still there in column 1, untouched. This is only half of the ""end-to-end verification"", of course, since voters are unable to verify that the decryptions have been done correctly, i.e. that there's an entry in column 2 which is their vote minus the outer layer of encryption. Each voter is responsible only for the verification UP TO the point of column 1.</li>
<li>Thereafter, it is the auditors' responsibility to check that the entries in column 1 decrypt to column 2, and so on. The way they do this is by relying on <strong>deterministic</strong> encryption and the public keys used for the encryption being public.</li>
<li>Since public keys are public, you don't want people to simply draw lines from column 5 to column 1, joining up someone's vote as it becomes repeatedly encrypted - that way, a receipt that ties you to an encrypted vote actually ties you to an unencrypted, readable vote --> coercion! So, only columns 1, 3 and 5 are public (this is why each teller performs TWO encryptions), and for each entry in column 3, only ONE of the corresponding entries in {2,4} are revealed to auditors. This prevents anyone (even auditors) from linking an encrypted vote to an unencrypted vote.</li>
<li>Auditors therefore need to take an entry in column 3, be given the corresponding entry in column 2 and the public key, and perform the same encryption to verify that they do indeed get the entry in column 2.</li>
<li>Put together, this offers end-to-end verifiability.</li>
</ul>

<p>Sorry that was so lengthy - I hope it describes my need for deterministic encryptions. I've missed out a lot of fundamental details (I've modified this scheme heavily) but hopefully the core principles are all there. Thank you so much for reading - I really appreciate it.</p>
","<p>So it seems to me that you have 2 main requirements that you are attempting to use <code>deterministic RSA</code> to solve:</p>

<ol>
<li>Allowing voters to ensure the integrity of their vote</li>
<li>Allowing auditors to ensure the integrity of all votes</li>
</ol>

<p><a href=""http://en.wikipedia.org/wiki/Digital_signature"" rel=""nofollow"">Digital Signatures</a> should solve this problem.  You can take your ciphertext from column 1, hash it, and encrypt the hash with a <strong>private</strong> key.  That encrypted hash can then be placed in column 2.  To verify the integrity of column 1, simply use the corresponding public key to decrypt the hash in column 2, hash column 1, and compare those 2 values.  If they are equal, the data has not been tampered with.  Only parties that have the private key could possibly tamper with the data in these columns, because only they can make a matching pair.  This is similar to an HMAC, but has the advantage of using public/private keys rather than a secret shared key.  Thus anybody can verify, but only trusted parties can modify.</p>

<p>One thing to note about deterministic schema is that it will leak information in many ways.  Let's assume that I know I voted for <code>Blue</code> as my favorite color.  I can see that the resulting ciphertext of my vote is 0x12345678.  If the schema is completely deterministic, I know that anybody else that has a corresponding ciphertext of 0x12345678 also voted for <code>Blue</code>.  Also, since you will typically have a finite set of vote choices, a <a href=""http://en.wikipedia.org/wiki/Chosen-ciphertext_attack"" rel=""nofollow"">chosen plaintext attack</a> is incredibly easy.  Thus you really want to let RSA do its job and use the intended padding scheme.</p>

<p>The next thing you may want to consider is protecting the system from a form of <a href=""http://en.wikipedia.org/wiki/Replay_attack"" rel=""nofollow"">Replay Attack</a> by numbering the votes or something like that.  As I understand your schema, it looks like if I somehow got access to where you store your votes (or got in the middle of any communication), I could essentially spoof or spam fake votes just by replaying or copying data that I've already seen (another problem with being deterministic).</p>
","7244","<java><encryption><rsa><encryption-asymmetric><deterministic>","9","0","3","2017-06-02 21:42:17","5496250","5","8","629287","","2011-03-30 22:10:46","2011-03-30 15:23:13",""
"5488401","Deterministic RSA encryption in Java","<p>This is my first question on this site, and I only have a basic mathematical understanding of RSA, so please bear with me! :)</p>

<p>I'm writing a Java web application for my final year project at university. It's a web-based implementation of ""Pret-a-voter"", a secure voting system, for those who have heard of it.</p>

<p>Essentially my problem is that I want to be able to give someone performing the role of an auditor:</p>

<ul>
<li>a <em>source</em> byte array (the plaintext to be encrypted)</li>
<li>an RSA public key file</li>
<li>a ""<em>destination</em>"" byte array, which is the result of my own computation of the cipherdata given the plaintext and the public key</li>
</ul>

<p>I then want the auditor to be able to perform encryption using the first two items, and be satisfied that the third is the result. I therefore need the encryption to be <strong>deterministic</strong>, i.e. generate the same cipherdata each time encryption with the same plaintext and public key are repeated.</p>

<p>(Note - I'm working with very small blocks of data in this project - there is no symmetric encryption involved at all... I'm aware this is an ""interesting"" use of RSA!)</p>

<p>Anyway I found that in Java, using</p>

<pre><code>cipher = Cipher.getInstance(""RSA"");
</code></pre>

<p>uses the default random padding scheme, at a cost of 11 bytes (so with a 2048-bit key pair, it's possible to encrypt 2048/8-11 = 245 bytes). Repeated encryptions of the same plaintext generate different ciphertexts, which is obviously not the ECB mode that I want.</p>

<p>My question is - <strong>should I use the following?</strong></p>

<pre><code>cipher = Cipher.getInstance(""RSA/ECB/NoPadding"");
</code></pre>

<p>I've read in lots of places that RSA is insecure without padding. Is that simply because an attacker can build a dictionary of plaintexts/ciphertexts? This is a side-effect of the deterministic encryption I require in order to allow auditors to verify my encryption, and in my scheme auditors are <em>trusted</em>, so that would be OK.</p>

<p>Part two of my question is more java-related. If I <em>do</em> use RSA/ECB/NoPadding as above, I believe I'm able to provide a source byte array of (say) length 128 (for a 1024-bit RSA key pair) and encrypt that to get another byte array of length 128. If I then try to encrypt <em>that</em> again, with a different 1024-length public key, I get</p>

<blockquote>
  <p>javax.crypto.BadPaddingException: Message is larger than modulus</p>
</blockquote>

<p>Does anyone know why?</p>

<p>EDIT - encryption with NoPadding doesn't always generate this exception - it's temperamental. However, even when encryption does not generate this exception, decryption generates this:</p>

<blockquote>
  <p>javax.crypto.BadPaddingException: Data must start with zero</p>
</blockquote>

<p>Many thanks for reading through this! Any help would be greatly appreciated.</p>

<p>EDIT - sorry, my original question wasn't very clear about what it is I want to do, so here's an [attempt at an] explanation:</p>

<ul>
<li>The plaintext is a voter's vote in an election.</li>
<li>Pret-a-voter aims to be end-to-end verifiable without sacrificing voter confidentiality (etc). After voting, the voter is provided with a receipt that they can use to verify that their vote has been recorded correctly, and which will later show them that their vote has not been tampered with. The voter performs a comparison of the information on their receipt with an identical copy posted on the web.</li>
<li>However, it should not be possible for any voter to prove how he/she voted (as that could lead to coercion) so the information is not the plaintext, but an encrypted copy of the vote.</li>
<li>In fact, the plaintext is encrypted four times, with four different asymmetric keys - held by two different tellers, each holding two of the keys. So, a vote (plaintext) is provided to one teller, who encrypts it using public key #1, and then encrypts THAT ciphertext with his second public key, gives THAT ciphertext to the second teller who encrypts it with his two keys in the same way. The resulting ciphertext (result of four sequential encryptions) is what is posted to the web (made public). The tellers are trusted.</li>
<li>Each encrypted vote can be visualised as an ""onion"" where the centre is the vote and there are several layers of encryption. In order to get to the vote, each layer must be removed in turn, meaning the corresponding private keys (held by the tellers) must be applied in the reverse sequence. This is key to the security - all tellers must work cooperatively in order to decrypt the votes.</li>
<li>The web bulletin board can be visualised as a table with 5 columns - the first (on the left) holds the fully-encrypted votes (also shown on each voter's receipt), and is the only visible column during the vote-casting stage. The second column contains the same set of votes, but with the outer layer removed - teller 2 populates this column and column 3 by decrypting the votes using its private keys during the tallying stage. At the end of the tallying stage, column 5 contains the fully-decrypted votes that can then be tallied.</li>
<li>Each voter gets a receipt that links them to an encrypted vote in column 1. This doesn't show how they voted, but allows them to verify that their vote has not been tampered with as throughout the election process they can verify that their encrypted vote is still there in column 1, untouched. This is only half of the ""end-to-end verification"", of course, since voters are unable to verify that the decryptions have been done correctly, i.e. that there's an entry in column 2 which is their vote minus the outer layer of encryption. Each voter is responsible only for the verification UP TO the point of column 1.</li>
<li>Thereafter, it is the auditors' responsibility to check that the entries in column 1 decrypt to column 2, and so on. The way they do this is by relying on <strong>deterministic</strong> encryption and the public keys used for the encryption being public.</li>
<li>Since public keys are public, you don't want people to simply draw lines from column 5 to column 1, joining up someone's vote as it becomes repeatedly encrypted - that way, a receipt that ties you to an encrypted vote actually ties you to an unencrypted, readable vote --> coercion! So, only columns 1, 3 and 5 are public (this is why each teller performs TWO encryptions), and for each entry in column 3, only ONE of the corresponding entries in {2,4} are revealed to auditors. This prevents anyone (even auditors) from linking an encrypted vote to an unencrypted vote.</li>
<li>Auditors therefore need to take an entry in column 3, be given the corresponding entry in column 2 and the public key, and perform the same encryption to verify that they do indeed get the entry in column 2.</li>
<li>Put together, this offers end-to-end verifiability.</li>
</ul>

<p>Sorry that was so lengthy - I hope it describes my need for deterministic encryptions. I've missed out a lot of fundamental details (I've modified this scheme heavily) but hopefully the core principles are all there. Thank you so much for reading - I really appreciate it.</p>
","<p>Removing the padding makes the system insecure.  If the public keys are indeed public, as you say, then an attacker can simply go to column 5, take the plaintexts, and encrypt them with the 4 public keys in the proper sequence.  They can then match up the resulting ciphertexts with that from the reciepts, compromising the ""no coercion"" property.</p>

<p>Random padding stops this, because the attacker doesn't know what padding to add.</p>

<p>You will need to use normal padding, but reveal a subset of the private keys to a subset of the auditors (usually called ""scrutineers"" in electoral systems).  This means that one scrutineer can confirm that column 1 matches column 2, another can confirm that column 2 matches column 3, and so on.  An individual scrutineer can't match a voter to a ballot, only co-operating ones.</p>

<hr>

<p>The reason that you're getting the ""Message is larger than modulus"" error is because each modulus is different, so the ciphertext from one encryption may be outside the allowable range for the next encryption.</p>
","7244","<java><encryption><rsa><encryption-asymmetric><deterministic>","9","3","3","2017-06-02 21:42:17","5496250","5","8","629287","","2011-03-30 22:10:46","2011-03-30 15:23:13",""
"5806308","how do I encrypt data in R?","<p>I am adding a <a href=""https://r-forge.r-project.org/scm/viewvc.php/handlers/pkg/R/sentry.R?view=markup&amp;root=logging"" rel=""noreferrer"">sentry handler</a> to the <a href=""http://logging.r-forge.r-project.org/"" rel=""noreferrer"">R logging package</a>.  currently <a href=""https://github.com/dcramer/django-sentry"" rel=""noreferrer"">django-sentry</a> validates the client (the application sending log records) based on a shared key which travels in clear text in a secured channel.</p>

<p>I was wondering if it was possible to do encryption from R, preferably asymmetric, public key based, but I find nothing relevant.</p>

<p>all right, not ""if it was possible"", but ""how to do that"" and whether someone already did this.</p>

<hr>

<p>after interaction with the author of django-sentry, we opted for <code>hmac</code>, which I have implemented within the <a href=""https://r-forge.r-project.org/projects/digest/"" rel=""noreferrer""><code>digest</code></a> R package (version 0.5+ contains it).  This does <em>not</em> answer the question ""how to encrypt data using R"", but it solves the problem which formed the base for my initial question.  </p>

<p>At this point I am not any more actively working at asymmetric encription in R, however, if you are interested in it and you want to contribute ideas or code, please leave a note here!</p>
","<p>Does this help you ahead:
<a href=""http://cran.r-project.org/web/packages/digest/digest.pdf"" rel=""nofollow"">digest package</a>? It holds several hashing functions. To my knowledge, asymmetric encryption is the same as hashing...</p>
","7125","<r><logging><encryption-asymmetric><sentry>","17","4","3","2016-06-18 11:10:43","","1","4","78912","","2011-05-31 11:45:22","2011-04-27 15:07:09",""
"5806308","how do I encrypt data in R?","<p>I am adding a <a href=""https://r-forge.r-project.org/scm/viewvc.php/handlers/pkg/R/sentry.R?view=markup&amp;root=logging"" rel=""noreferrer"">sentry handler</a> to the <a href=""http://logging.r-forge.r-project.org/"" rel=""noreferrer"">R logging package</a>.  currently <a href=""https://github.com/dcramer/django-sentry"" rel=""noreferrer"">django-sentry</a> validates the client (the application sending log records) based on a shared key which travels in clear text in a secured channel.</p>

<p>I was wondering if it was possible to do encryption from R, preferably asymmetric, public key based, but I find nothing relevant.</p>

<p>all right, not ""if it was possible"", but ""how to do that"" and whether someone already did this.</p>

<hr>

<p>after interaction with the author of django-sentry, we opted for <code>hmac</code>, which I have implemented within the <a href=""https://r-forge.r-project.org/projects/digest/"" rel=""noreferrer""><code>digest</code></a> R package (version 0.5+ contains it).  This does <em>not</em> answer the question ""how to encrypt data using R"", but it solves the problem which formed the base for my initial question.  </p>

<p>At this point I am not any more actively working at asymmetric encription in R, however, if you are interested in it and you want to contribute ideas or code, please leave a note here!</p>
","<p>You may also find suitable function in the <a href=""http://cran.r-project.org/web/packages/PKI/index.html"" rel=""noreferrer"">PKI package</a> from the author Simon Urbanek.</p>

<p>This package provides PKI functions such as verifyig certificates, RSA encription and signing which can be used to build PKI infrastructure and perform cryptographic tasks.</p>

<p>Example code from the tutorial:</p>

<pre><code>require(PKI)
key &lt;- PKI.genRSAkey(2048)
x &lt;- charToRaw(""Hello, world!"")
e &lt;- PKI.encrypt(x, key)
y &lt;- PKI.decrypt(e, key)
stopifnot(identical(x, y))
print(rawToChar(y))
</code></pre>

<p>gives as result: <code>[1] ""Hello, world!""</code></p>

<p>while the encrypted message <code>e</code> was:</p>

<pre><code>  [1] 36 83 d3 70 0a 67 b5 05 a6 40 1e 37 28 b9 4e 28 f1 31 92 14 2c 35 c8 8a 61 93 1e 04 62 01 da 3b 2b a0 75 1c 10 58 26
 [40] e4 77 da 7a 47 3f 4e 44 29 8e 97 6f 62 b1 98 44 ba 18 ef 57 1e 9e 9c 27 a8 6e 9c 7b c7 8b c0 c3 a3 00 e2 67 98 8b 6e
 [79] 1a 93 c6 d6 ed 4b 54 e5 7a 07 d7 06 ef a6 bb 36 6a 7f 57 06 b9 15 03 f6 51 3f 07 48 cb f4 2d 25 15 be 42 de f4 8a 06
[118] 72 89 b1 e3 04 d3 ec 80 99 f0 66 0f 84 e1 b5 af 23 24 a1 36 8e 62 65 ae 19 fb 77 d1 36 06 ae 71 95 ee 57 aa 68 5a 6b
[157] 4e 28 ba a2 0d 17 78 11 6c 7f 1b b3 ce 31 65 a9 d3 71 89 76 f9 19 a0 7a bf 02 dd c9 1f cb 9c 39 25 d4 48 a2 23 83 26
[196] b4 a9 b1 40 f5 1d 46 21 35 12 52 73 09 9b f3 52 e1 9e 0d 2a 9b ff 70 81 41 24 49 ed 58 b2 61 dc 3e c9 b3 b2 b1 37 e0
[235] 48 76 18 bf b0 e5 c2 d9 2b 92 2f 6b 49 dd e0 93 b7 10 f8 ba d2 8a
</code></pre>
","7125","<r><logging><encryption-asymmetric><sentry>","17","7","3","2016-06-18 11:10:43","","1","4","78912","","2011-05-31 11:45:22","2011-04-27 15:07:09",""
"5806308","how do I encrypt data in R?","<p>I am adding a <a href=""https://r-forge.r-project.org/scm/viewvc.php/handlers/pkg/R/sentry.R?view=markup&amp;root=logging"" rel=""noreferrer"">sentry handler</a> to the <a href=""http://logging.r-forge.r-project.org/"" rel=""noreferrer"">R logging package</a>.  currently <a href=""https://github.com/dcramer/django-sentry"" rel=""noreferrer"">django-sentry</a> validates the client (the application sending log records) based on a shared key which travels in clear text in a secured channel.</p>

<p>I was wondering if it was possible to do encryption from R, preferably asymmetric, public key based, but I find nothing relevant.</p>

<p>all right, not ""if it was possible"", but ""how to do that"" and whether someone already did this.</p>

<hr>

<p>after interaction with the author of django-sentry, we opted for <code>hmac</code>, which I have implemented within the <a href=""https://r-forge.r-project.org/projects/digest/"" rel=""noreferrer""><code>digest</code></a> R package (version 0.5+ contains it).  This does <em>not</em> answer the question ""how to encrypt data using R"", but it solves the problem which formed the base for my initial question.  </p>

<p>At this point I am not any more actively working at asymmetric encription in R, however, if you are interested in it and you want to contribute ideas or code, please leave a note here!</p>
","<p>This is an old thread but in case others come across this, it seems there's a <a href=""https://github.com/hadley/secure"" rel=""nofollow"">secure</a> package by Hadley. The readme states: </p>

<p><em>The secure package provides a secure vault within a publicly available code repository. It allows you to store private information in a public repository so that only select people can read it. This is particularly useful for testing because you can now store private credentials in your public repo, without them being readable by the world.</em></p>

<p><em>Secure is built on top of asymmetric (public/private key) encryption. Secure generates a random master key and uses that to encrypt (with AES256) each file in vault/. The master key is not stored unencrypted anywhere; instead, an encrypted copy is stored for each user, using their own public key. Each user can than decrypt the encrypted master key using their private key, then use that to decrypt each file.</em></p>
","7125","<r><logging><encryption-asymmetric><sentry>","17","3","3","2016-06-18 11:10:43","","1","4","78912","","2011-05-31 11:45:22","2011-04-27 15:07:09",""
"16858718","Encryption Failing with error Invalid length for a Base-64 char array or string","<p>I am trying to encrypt a <code>PRIVATE KEY</code> with a passphrase so I can save the file to disk. But the encryption method is throwing the exception: ""<code>Invalid length for a Base-64 char array or string</code>"".</p>

<p>The Encryption method is (it's a <code>2048bit key length</code>):</p>

<pre><code>                    public static string Encrypt(string plainString, string key, int keySize = Keysize.SymmetricKeyLength)
                {
                    var aesEncryption = new RijndaelManaged
                    {
                        KeySize = keySize,
                        BlockSize = 128,
                        Mode = CipherMode.CBC,
                        Padding = PaddingMode.PKCS7,
                        IV = Convert.FromBase64String(Encoding.UTF8.GetString(Convert.FromBase64String(key)).Split(',')[0]),
                        Key = Convert.FromBase64String(Encoding.UTF8.GetString(Convert.FromBase64String(key)).Split(',')[1])
                    };

                    byte[] plainText = Encoding.UTF8.GetBytes(plainString);
                    ICryptoTransform crypto = aesEncryption.CreateEncryptor();
                    // The result of the encryption and decryption            
                    byte[] cipherText = crypto.TransformFinalBlock(plainText, 0, plainText.Length);

                    return Convert.ToBase64String(cipherText);
                }
</code></pre>

<p>I am converting the Private Key to a <code>Base64</code> string before passing it down to the encryption method using this method:</p>

<pre><code>        public string EncodeTo64(string plainString)
        {
            var bytes = Encoding.UTF8.GetBytes(plainString);
            return Convert.ToBase64String(bytes);
        }
</code></pre>

<p>The Private Key is:</p>

<pre><code>&lt;RSAKeyValue&gt;&lt;Modulus&gt;rhtMjLTg17sYlns4ktTow9eeuwRNra0+AO2HqESGmA8zkxe/uOv0msXzzLWUWzdPaTxi4OV+PNVPBAHW1C0CTT/33NlvipkJ1Qr5BJK1TiVZCMInshe4OL/7GNnPUPhsS6DZ/c/fnWLoxtRMUmkKgpWmtXGs7ZSoIztdJ1bgiygJWCDvrHTokVIzDaNzRonZIFk41Qt4rPofCEawjkR639OcOfazNlmU9JjvRs3ysoYghDzvVuLvJvPK7zCMzpJMQFQE7cipezXbumTqSdp20mQXJduDbD9qLKXOvcTw+2KPoNlUp+IRQrOmSf+Dl4Vxi+8+UuOH7KDLz7yL9IOPeQ==&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;2AHey3Tgg/K8M16kv6bWk1BsFGhg9xXZw2ruVhS620gyvPBtWBuOU+tzPRnEplw+Kp9jua7Nu4JkKwpQdZvRqeW42d/UCergkdNRheM3DXYj/xQNs8a1diTNe72elCsCfSHr1z/vgN+Cp+v8O4BzX07TrHeGOOP/7HWhE6setxM=&lt;/P&gt;&lt;Q&gt;zld05TyC/vVI2sBgaR/iYyXdUO3iIIwkGSyOmfDr1dbCKFR7btGLEsW9EpCGibyGPbAk4jA9BLU1bviBM8iH6mxWn1s4UAiIha0QSM2K9NWUPi67FELl6Fs2eLHl9qRniBhAOBCGArklail+YadKCtUsrWhfJgvO3uxkp+fg9MM=&lt;/Q&gt;&lt;DP&gt;sziaCmVnAxObY2PbfciHsKLBig0wptHSZHmMVo/MmbRFpM43aysx5B8u9jszFnTif6rPq3iF6lY9lhhwuaQXScf4n40++RuQSG307gmf2+Nx6mpRFCCC3wuaElk6AeXNotVKQMYjieHpHjqGhTgGgcV9i1OAYiOKbD8M7qzER1E=&lt;/DP&gt;&lt;DQ&gt;FEazzfLsTHF9/0D4OFxRurx1ywYVOm2K/o5KVQY/pnu8CIqEtpcQu3+C3Ngm4FIOPvGYLkHfPR8xaP4ydAw4juimenJUTkkIYVpoRz8rcHOsZY/iAlOwk+yipamVl28AXXdEmD3HbW0UKCJ7sMznkbjw8vlWoD54zZ8dJQK8MFE=&lt;/DQ&gt;&lt;InverseQ&gt;FUFC9v5B1mXxbbiD4WZm/KGIa3XO5+K9FwSRroj8wNMt+JY5aMS8SfUcrZMvUXfHS9+3BYXBIlxPBUm6HnfB7yPE9S0LFzRpB7APbJ0HVIlSjMS9ZdkqxShGAEufYx/FKQXomJlEXXkpgAiDnUnCR2H+ekQf1YpQUzol2KedwfA=&lt;/InverseQ&gt;&lt;D&gt;gEhc/s/HWyzf0QC5jnaRirs0mVdyZKVhKg3aBoF3KlMJDThSa05vzBpOqGaiCROXz1JPCKYPfYMt1SYFxA/lwkV/u5n6NYTNWcvb7yKptAqQr4Ne/Dm94xKRUJ4rwt1H7fF2rSyc9roKCXYjRhVfSRg63TYE1IjT2iHDYVkB2YVPK67O2O7YmQXeUHMRMVwXpnZCvweleRKlYbVFx2N7ZEC1TZoUn2RKsiBEem1eNSwnLa4wUf1Xl8Q8h+ziY0GnREf9JpTZhJW7f4MKsqLyOMgmoskKiIOWlnwq/b01ivB2CXFhxiiVuNUPPiMuJu6bhljeulvKl32kEzLAFxm2gQ==&lt;/D&gt;&lt;/RSAKeyValue&gt;
</code></pre>

<p>and the resulting Base64 string from the above conversion method is:</p>

<pre><code>PFJTQUtleVZhbHVlPjxNb2R1bHVzPnJodE1qTFRnMTdzWWxuczRrdFRvdzllZXV3Uk5yYTArQU8ySHFFU0dtQTh6a3hlL3VPdjBtc1h6ekxXVVd6ZFBhVHhpNE9WK1BOVlBCQUhXMUMwQ1RULzMzTmx2aXBrSjFRcjVCSksxVGlWWkNNSW5zaGU0T0wvN0dOblBVUGhzUzZEWi9jL2ZuV0xveHRSTVVta0tncFdtdFhHczdaU29JenRkSjFiZ2l5Z0pXQ0R2ckhUb2tWSXpEYU56Um9uWklGazQxUXQ0clBvZkNFYXdqa1I2MzlPY09mYXpObG1VOUpqdlJzM3lzb1lnaER6dlZ1THZKdlBLN3pDTXpwSk1RRlFFN2NpcGV6WGJ1bVRxU2RwMjBtUVhKZHVEYkQ5cUxLWE92Y1R3KzJLUG9ObFVwK0lSUXJPbVNmK0RsNFZ4aSs4K1V1T0g3S0RMejd5TDlJT1BlUT09PC9Nb2R1bHVzPjxFeHBvbmVudD5BUUFCPC9FeHBvbmVudD48UD4yQUhleTNUZ2cvSzhNMTZrdjZiV2sxQnNGR2hnOXhYWncycnVWaFM2MjBneXZQQnRXQnVPVSt0elBSbkVwbHcrS3A5anVhN051NEprS3dwUWRadlJxZVc0MmQvVUNlcmdrZE5SaGVNM0RYWWoveFFOczhhMWRpVE5lNzJlbENzQ2ZTSHIxei92Z04rQ3ArdjhPNEJ6WDA3VHJIZUdPT1AvN0hXaEU2c2V0eE09PC9QPjxRPnpsZDA1VHlDL3ZWSTJzQmdhUi9pWXlYZFVPM2lJSXdrR1N5T21mRHIxZGJDS0ZSN2J0R0xFc1c5RXBDR2lieUdQYkFrNGpBOUJMVTFidmlCTThpSDZteFduMXM0VUFpSWhhMFFTTTJLOU5XVVBpNjdGRUxsNkZzMmVMSGw5cVJuaUJoQU9CQ0dBcmtsYWlsK1lhZEtDdFVzcldoZkpndk8zdXhrcCtmZzlNTT08L1E+PERQPnN6aWFDbVZuQXhPYlkyUGJmY2lIc0tMQmlnMHdwdEhTWkhtTVZvL01tYlJGcE00M2F5c3g1Qjh1OWpzekZuVGlmNnJQcTNpRjZsWTlsaGh3dWFRWFNjZjRuNDArK1J1UVNHMzA3Z21mMitOeDZtcFJGQ0NDM3d1YUVsazZBZVhOb3RWS1FNWWppZUhwSGpxR2hUZ0dnY1Y5aTFPQVlpT0tiRDhNN3F6RVIxRT08L0RQPjxEUT5GRWF6emZMc1RIRjkvMEQ0T0Z4UnVyeDF5d1lWT20ySy9vNUtWUVkvcG51OENJcUV0cGNRdTMrQzNOZ200RklPUHZHWUxrSGZQUjh4YVA0eWRBdzRqdWltZW5KVVRra0lZVnBvUno4cmNIT3NaWS9pQWxPd2sreWlwYW1WbDI4QVhYZEVtRDNIYlcwVUtDSjdzTXpua2Jqdzh2bFdvRDU0elo4ZEpRSzhNRkU9PC9EUT48SW52ZXJzZVE+RlVGQzl2NUIxbVh4YmJpRDRXWm0vS0dJYTNYTzUrSzlGd1NScm9qOHdOTXQrSlk1YU1TOFNmVWNyWk12VVhmSFM5KzNCWVhCSWx4UEJVbTZIbmZCN3lQRTlTMExGelJwQjdBUGJKMEhWSWxTak1TOVpka3F4U2hHQUV1Zll4L0ZLUVhvbUpsRVhYa3BnQWlEblVuQ1IySCtla1FmMVlwUVV6b2wyS2Vkd2ZBPTwvSW52ZXJzZVE+PEQ+Z0VoYy9zL0hXeXpmMFFDNWpuYVJpcnMwbVZkeVpLVmhLZzNhQm9GM0tsTUpEVGhTYTA1dnpCcE9xR2FpQ1JPWHoxSlBDS1lQZllNdDFTWUZ4QS9sd2tWL3U1bjZOWVROV2N2Yjd5S3B0QXFRcjROZS9EbTk0eEtSVUo0cnd0MUg3ZkYyclN5Yzlyb0tDWFlqUmhWZlNSZzYzVFlFMUlqVDJpSERZVmtCMllWUEs2N08yTzdZbVFYZVVITVJNVndYcG5aQ3Z3ZWxlUktsWWJWRngyTjdaRUMxVFpvVW4yUktzaUJFZW0xZU5Td25MYTR3VWYxWGw4UThoK3ppWTBHblJFZjlKcFRaaEpXN2Y0TUtzcUx5T01nbW9za0tpSU9XbG53cS9iMDFpdkIyQ1hGaHhpaVZ1TlVQUGlNdUp1NmJobGpldWx2S2wzMmtFekxBRnhtMmdRPT08L0Q+PC9SU0FLZXlWYWx1ZT4=
</code></pre>

<p>Apparently this Base64 string is invalid and the encryption fails.</p>

<p>Can anybody see where I am going wrong?</p>
","<p>Your Base64 string appears to be valid.  When I decode it I get some recognisable XML for RSA:</p>

<pre><code>&lt;RSAKeyValue&gt;
  &lt;Modulus&gt;rht ... PeQ==&lt;/Modulus&gt;
  &lt;Exponent&gt;AQAB&lt;/Exponent&gt;
  &lt;P&gt;2AH ... txM=&lt;/P&gt;
  &lt;Q&gt;zld ... 9MM=&lt;/Q&gt;
  &lt;DP&gt;szi ... R1E=&lt;/DP&gt;
  &lt;DQ&gt;FEa ... 8MFE=&lt;/DQ&gt;
  &lt;InverseQ&gt;FUF ... wfA=&lt;/InverseQ&gt;
  &lt;D&gt;gEh ... m2gQ==&lt;/D&gt;
&lt;/RSAKeyValue&gt;
</code></pre>

<p>That has added newlines and is abbreviated for clarity.</p>

<p>Was that what you were expecting?  If it was then I suggest that you check each of the included pieces of Base64 for errors.  Alternatively, it may just be that your initial piece of Base64 is too long.</p>
","6766","<encryption><base64><private-key><encryption-asymmetric>","1","0","2","2013-06-03 15:13:10","16900046","3","1","1435068","","2013-05-31 13:52:09","2013-05-31 13:41:36",""
"16858718","Encryption Failing with error Invalid length for a Base-64 char array or string","<p>I am trying to encrypt a <code>PRIVATE KEY</code> with a passphrase so I can save the file to disk. But the encryption method is throwing the exception: ""<code>Invalid length for a Base-64 char array or string</code>"".</p>

<p>The Encryption method is (it's a <code>2048bit key length</code>):</p>

<pre><code>                    public static string Encrypt(string plainString, string key, int keySize = Keysize.SymmetricKeyLength)
                {
                    var aesEncryption = new RijndaelManaged
                    {
                        KeySize = keySize,
                        BlockSize = 128,
                        Mode = CipherMode.CBC,
                        Padding = PaddingMode.PKCS7,
                        IV = Convert.FromBase64String(Encoding.UTF8.GetString(Convert.FromBase64String(key)).Split(',')[0]),
                        Key = Convert.FromBase64String(Encoding.UTF8.GetString(Convert.FromBase64String(key)).Split(',')[1])
                    };

                    byte[] plainText = Encoding.UTF8.GetBytes(plainString);
                    ICryptoTransform crypto = aesEncryption.CreateEncryptor();
                    // The result of the encryption and decryption            
                    byte[] cipherText = crypto.TransformFinalBlock(plainText, 0, plainText.Length);

                    return Convert.ToBase64String(cipherText);
                }
</code></pre>

<p>I am converting the Private Key to a <code>Base64</code> string before passing it down to the encryption method using this method:</p>

<pre><code>        public string EncodeTo64(string plainString)
        {
            var bytes = Encoding.UTF8.GetBytes(plainString);
            return Convert.ToBase64String(bytes);
        }
</code></pre>

<p>The Private Key is:</p>

<pre><code>&lt;RSAKeyValue&gt;&lt;Modulus&gt;rhtMjLTg17sYlns4ktTow9eeuwRNra0+AO2HqESGmA8zkxe/uOv0msXzzLWUWzdPaTxi4OV+PNVPBAHW1C0CTT/33NlvipkJ1Qr5BJK1TiVZCMInshe4OL/7GNnPUPhsS6DZ/c/fnWLoxtRMUmkKgpWmtXGs7ZSoIztdJ1bgiygJWCDvrHTokVIzDaNzRonZIFk41Qt4rPofCEawjkR639OcOfazNlmU9JjvRs3ysoYghDzvVuLvJvPK7zCMzpJMQFQE7cipezXbumTqSdp20mQXJduDbD9qLKXOvcTw+2KPoNlUp+IRQrOmSf+Dl4Vxi+8+UuOH7KDLz7yL9IOPeQ==&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;2AHey3Tgg/K8M16kv6bWk1BsFGhg9xXZw2ruVhS620gyvPBtWBuOU+tzPRnEplw+Kp9jua7Nu4JkKwpQdZvRqeW42d/UCergkdNRheM3DXYj/xQNs8a1diTNe72elCsCfSHr1z/vgN+Cp+v8O4BzX07TrHeGOOP/7HWhE6setxM=&lt;/P&gt;&lt;Q&gt;zld05TyC/vVI2sBgaR/iYyXdUO3iIIwkGSyOmfDr1dbCKFR7btGLEsW9EpCGibyGPbAk4jA9BLU1bviBM8iH6mxWn1s4UAiIha0QSM2K9NWUPi67FELl6Fs2eLHl9qRniBhAOBCGArklail+YadKCtUsrWhfJgvO3uxkp+fg9MM=&lt;/Q&gt;&lt;DP&gt;sziaCmVnAxObY2PbfciHsKLBig0wptHSZHmMVo/MmbRFpM43aysx5B8u9jszFnTif6rPq3iF6lY9lhhwuaQXScf4n40++RuQSG307gmf2+Nx6mpRFCCC3wuaElk6AeXNotVKQMYjieHpHjqGhTgGgcV9i1OAYiOKbD8M7qzER1E=&lt;/DP&gt;&lt;DQ&gt;FEazzfLsTHF9/0D4OFxRurx1ywYVOm2K/o5KVQY/pnu8CIqEtpcQu3+C3Ngm4FIOPvGYLkHfPR8xaP4ydAw4juimenJUTkkIYVpoRz8rcHOsZY/iAlOwk+yipamVl28AXXdEmD3HbW0UKCJ7sMznkbjw8vlWoD54zZ8dJQK8MFE=&lt;/DQ&gt;&lt;InverseQ&gt;FUFC9v5B1mXxbbiD4WZm/KGIa3XO5+K9FwSRroj8wNMt+JY5aMS8SfUcrZMvUXfHS9+3BYXBIlxPBUm6HnfB7yPE9S0LFzRpB7APbJ0HVIlSjMS9ZdkqxShGAEufYx/FKQXomJlEXXkpgAiDnUnCR2H+ekQf1YpQUzol2KedwfA=&lt;/InverseQ&gt;&lt;D&gt;gEhc/s/HWyzf0QC5jnaRirs0mVdyZKVhKg3aBoF3KlMJDThSa05vzBpOqGaiCROXz1JPCKYPfYMt1SYFxA/lwkV/u5n6NYTNWcvb7yKptAqQr4Ne/Dm94xKRUJ4rwt1H7fF2rSyc9roKCXYjRhVfSRg63TYE1IjT2iHDYVkB2YVPK67O2O7YmQXeUHMRMVwXpnZCvweleRKlYbVFx2N7ZEC1TZoUn2RKsiBEem1eNSwnLa4wUf1Xl8Q8h+ziY0GnREf9JpTZhJW7f4MKsqLyOMgmoskKiIOWlnwq/b01ivB2CXFhxiiVuNUPPiMuJu6bhljeulvKl32kEzLAFxm2gQ==&lt;/D&gt;&lt;/RSAKeyValue&gt;
</code></pre>

<p>and the resulting Base64 string from the above conversion method is:</p>

<pre><code>PFJTQUtleVZhbHVlPjxNb2R1bHVzPnJodE1qTFRnMTdzWWxuczRrdFRvdzllZXV3Uk5yYTArQU8ySHFFU0dtQTh6a3hlL3VPdjBtc1h6ekxXVVd6ZFBhVHhpNE9WK1BOVlBCQUhXMUMwQ1RULzMzTmx2aXBrSjFRcjVCSksxVGlWWkNNSW5zaGU0T0wvN0dOblBVUGhzUzZEWi9jL2ZuV0xveHRSTVVta0tncFdtdFhHczdaU29JenRkSjFiZ2l5Z0pXQ0R2ckhUb2tWSXpEYU56Um9uWklGazQxUXQ0clBvZkNFYXdqa1I2MzlPY09mYXpObG1VOUpqdlJzM3lzb1lnaER6dlZ1THZKdlBLN3pDTXpwSk1RRlFFN2NpcGV6WGJ1bVRxU2RwMjBtUVhKZHVEYkQ5cUxLWE92Y1R3KzJLUG9ObFVwK0lSUXJPbVNmK0RsNFZ4aSs4K1V1T0g3S0RMejd5TDlJT1BlUT09PC9Nb2R1bHVzPjxFeHBvbmVudD5BUUFCPC9FeHBvbmVudD48UD4yQUhleTNUZ2cvSzhNMTZrdjZiV2sxQnNGR2hnOXhYWncycnVWaFM2MjBneXZQQnRXQnVPVSt0elBSbkVwbHcrS3A5anVhN051NEprS3dwUWRadlJxZVc0MmQvVUNlcmdrZE5SaGVNM0RYWWoveFFOczhhMWRpVE5lNzJlbENzQ2ZTSHIxei92Z04rQ3ArdjhPNEJ6WDA3VHJIZUdPT1AvN0hXaEU2c2V0eE09PC9QPjxRPnpsZDA1VHlDL3ZWSTJzQmdhUi9pWXlYZFVPM2lJSXdrR1N5T21mRHIxZGJDS0ZSN2J0R0xFc1c5RXBDR2lieUdQYkFrNGpBOUJMVTFidmlCTThpSDZteFduMXM0VUFpSWhhMFFTTTJLOU5XVVBpNjdGRUxsNkZzMmVMSGw5cVJuaUJoQU9CQ0dBcmtsYWlsK1lhZEtDdFVzcldoZkpndk8zdXhrcCtmZzlNTT08L1E+PERQPnN6aWFDbVZuQXhPYlkyUGJmY2lIc0tMQmlnMHdwdEhTWkhtTVZvL01tYlJGcE00M2F5c3g1Qjh1OWpzekZuVGlmNnJQcTNpRjZsWTlsaGh3dWFRWFNjZjRuNDArK1J1UVNHMzA3Z21mMitOeDZtcFJGQ0NDM3d1YUVsazZBZVhOb3RWS1FNWWppZUhwSGpxR2hUZ0dnY1Y5aTFPQVlpT0tiRDhNN3F6RVIxRT08L0RQPjxEUT5GRWF6emZMc1RIRjkvMEQ0T0Z4UnVyeDF5d1lWT20ySy9vNUtWUVkvcG51OENJcUV0cGNRdTMrQzNOZ200RklPUHZHWUxrSGZQUjh4YVA0eWRBdzRqdWltZW5KVVRra0lZVnBvUno4cmNIT3NaWS9pQWxPd2sreWlwYW1WbDI4QVhYZEVtRDNIYlcwVUtDSjdzTXpua2Jqdzh2bFdvRDU0elo4ZEpRSzhNRkU9PC9EUT48SW52ZXJzZVE+RlVGQzl2NUIxbVh4YmJpRDRXWm0vS0dJYTNYTzUrSzlGd1NScm9qOHdOTXQrSlk1YU1TOFNmVWNyWk12VVhmSFM5KzNCWVhCSWx4UEJVbTZIbmZCN3lQRTlTMExGelJwQjdBUGJKMEhWSWxTak1TOVpka3F4U2hHQUV1Zll4L0ZLUVhvbUpsRVhYa3BnQWlEblVuQ1IySCtla1FmMVlwUVV6b2wyS2Vkd2ZBPTwvSW52ZXJzZVE+PEQ+Z0VoYy9zL0hXeXpmMFFDNWpuYVJpcnMwbVZkeVpLVmhLZzNhQm9GM0tsTUpEVGhTYTA1dnpCcE9xR2FpQ1JPWHoxSlBDS1lQZllNdDFTWUZ4QS9sd2tWL3U1bjZOWVROV2N2Yjd5S3B0QXFRcjROZS9EbTk0eEtSVUo0cnd0MUg3ZkYyclN5Yzlyb0tDWFlqUmhWZlNSZzYzVFlFMUlqVDJpSERZVmtCMllWUEs2N08yTzdZbVFYZVVITVJNVndYcG5aQ3Z3ZWxlUktsWWJWRngyTjdaRUMxVFpvVW4yUktzaUJFZW0xZU5Td25MYTR3VWYxWGw4UThoK3ppWTBHblJFZjlKcFRaaEpXN2Y0TUtzcUx5T01nbW9za0tpSU9XbG53cS9iMDFpdkIyQ1hGaHhpaVZ1TlVQUGlNdUp1NmJobGpldWx2S2wzMmtFekxBRnhtMmdRPT08L0Q+PC9SU0FLZXlWYWx1ZT4=
</code></pre>

<p>Apparently this Base64 string is invalid and the encryption fails.</p>

<p>Can anybody see where I am going wrong?</p>
","<p>Fixed! It appears the error was a little misleading (or likely I was being stupid!) and it looks like it was NOT the plain text for encryption that was the cause of the exception but the password/passphrase.  </p>

<p>I found another app I was using this method in and found the KEY was the problem. I was passing a plain text password in initially, then I changed this to a SHA-256 hash of the password when this was in fact not a valid key.</p>

<p>I added these two methods (the later of which I found on here):</p>

<pre><code>            public static string AesKeyFromPassword(string password, int keySize = Keysize.SymmetricKeyLength)
        {
            byte[] passwordByteArray = CreateKey(password);

            var aesEncryption = new RijndaelManaged
            {
                KeySize = keySize,
                BlockSize = 128,
                Mode = CipherMode.CBC,
                Padding = PaddingMode.PKCS7,
                Key = passwordByteArray
            };

            aesEncryption.GenerateIV();
            string ivStr = Convert.ToBase64String(aesEncryption.IV);
            string keyStr = Convert.ToBase64String(aesEncryption.Key);
            string completeKey = ivStr + "","" + keyStr;

            return Convert.ToBase64String(Encoding.UTF8.GetBytes(completeKey));
        }

        private static byte[] CreateKey(string password)
        {
            var salt = new byte[] { 1, 2, 23, 234, 37, 48, 134, 63, 248, 4 };

            const int Iterations = 9872;
            using (var rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, salt, Iterations))
                return rfc2898DeriveBytes.GetBytes(32);
        }
</code></pre>

<p>This now takes the plain text password/phrase and generates a valid encryption key which I then use in the <code>Encrypt</code> method.</p>

<p>Thank for your help guys!  I can now securely store the Private Key! :)</p>
","6766","<encryption><base64><private-key><encryption-asymmetric>","1","0","2","2013-06-03 15:13:10","16900046","3","1","1435068","","2013-05-31 13:52:09","2013-05-31 13:41:36",""
"3184502","Storing public and private keys in a Database or keystore","<p>I am making a web service that will store public and private keys for each record in a database table.</p>

<p>The keys are made using Java, but I am unsure weather to create a keystore or place the keys inside fields in the databbase directly.</p>

<p>What option would you recommend and what are the benefits of each method?</p>
","<p>If you use a keystore, you'll be using a database that has been designed to keep encrypted items, such as keys and certificates.</p>

<p>Wherever possible, you shouldn't try and re-invent the wheel. Will a keystore suffice in your problem? If you try and design your own database for storing these artefacts, you're going to have to re-solve problems and issues which were taken into account already when creating databases such as Java's keystore.</p>
","6359","<java><encryption-asymmetric>","5","5","4","2013-03-08 12:53:40","","0","2","","","","2010-07-06 08:04:54",""
"3184502","Storing public and private keys in a Database or keystore","<p>I am making a web service that will store public and private keys for each record in a database table.</p>

<p>The keys are made using Java, but I am unsure weather to create a keystore or place the keys inside fields in the databbase directly.</p>

<p>What option would you recommend and what are the benefits of each method?</p>
","<p>Why does each record have a private key? This is very strange design. Private keys see generally held by entities, e.g. People, or servers acting on their behalf.</p>
","6359","<java><encryption-asymmetric>","5","1","4","2013-03-08 12:53:40","","0","2","","","","2010-07-06 08:04:54",""
"3184502","Storing public and private keys in a Database or keystore","<p>I am making a web service that will store public and private keys for each record in a database table.</p>

<p>The keys are made using Java, but I am unsure weather to create a keystore or place the keys inside fields in the databbase directly.</p>

<p>What option would you recommend and what are the benefits of each method?</p>
","<p>you can have a database to store userinfo not keys, for keys it is better to use keystore. so userinfo may contain {name, symmetric pass / hash, ...} and using the name you should be able to identify the key-record in the keystore. Again remember, do not use a global (user,pass) to read the keystore, use the user grant instead.</p>
","6359","<java><encryption-asymmetric>","5","0","4","2013-03-08 12:53:40","","0","2","","","","2010-07-06 08:04:54",""
"3184502","Storing public and private keys in a Database or keystore","<p>I am making a web service that will store public and private keys for each record in a database table.</p>

<p>The keys are made using Java, but I am unsure weather to create a keystore or place the keys inside fields in the databbase directly.</p>

<p>What option would you recommend and what are the benefits of each method?</p>
","<p>You can provide keystores to already existing implementations for data sending over http, which will fetch the keystore and perform all the necessary stuff so you don't have to.
For server-side authentication this would be a keystore = KeyStore.getInstance(""JKS""), containing all the trusted certificates.</p>

<p>For client-side authentication, if applicable (you need to verify yourself) also such implementation already exist
where you just provide your client 'keystore' => this one will contain your certificate and it's private key => KeyStore.getInstance(""PKCS12"")</p>

<p>Then finally you want to store these stuff to database, here it gets a bit tricky.. Keystores are secured, so you can not just write it away.. you have to use the keystore.store(OutPutstream, password)..</p>

<p>What I find best is for instance:</p>

<pre><code>@Entity
public class MyKeyStoreClass {
private Long id;
@Transient
private KeyStore keystore;
private String passwordForKeyStore;
private Byte[] keyStoreAsBytes;

@PreUpdate
@PrePersist
public void concertKeyStoreToBytes() {
   ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        keystore.store(byteArrayOutputStream,
                passwordForKeyStore.toCharArray());
   keyStoreAsBytes = byteArrayOutputStream.toByteArray();
}

@PostLoad
public void getKeyStore() {
   if (keystore == null &amp;&amp; keyStoreAsBytes != null) {
      keyStore = KeyStore.getInstance(getKeystoreType().getType());
      keyStore.load(new ByteArrayInputStream(keystoreAsBytes), passwordForKeyStore.toCharArray()); 
   }    
}
</code></pre>

<p>The above code is not 100% correct, but it gives you a good idea of what I mean, If you don't work with annotations, you can do it using another approach but I think my point is clear ;)</p>
","6359","<java><encryption-asymmetric>","5","3","4","2013-03-08 12:53:40","","0","2","","","","2010-07-06 08:04:54",""
"20581169","Java Crypto Api - how to choose a cipher provider","<p>In order to implement encryption using Java, I am using JCE, which is nice and fun.
I was told that it is better to choose the crypto provider than to use a default one.</p>

<p>I need to choose providers both for symmetric key generation. used by this code (using AES in CBC mode):</p>

<pre><code> Key sharedKey = (KeyGenerator.getInstance(""AES/CBC/PKCS5PADDING"", PROVIDER1).generateKey();
</code></pre>

<p>And for Asymmetric text encryption used by this code (using RSA in ECB mode):</p>

<pre><code>Cipher rsaEncryptor = Cipher.getInstance(""RSA/ECB/PKCS1Padding"",PROVIDER2); 
</code></pre>

<p><b>My question is how should I choose PROVIDER1 and PROVIDER2?</b></p>

<p>for example, I saw that ""SunJCE"" is a well documented provider, but I don't think it is a ""good enough"" reason to choose it.</p>

<p>anyone?</p>
","<p>In general, you should stick to the default provider, unless there is a compelling reason not to. Hard coding your provider has the serious drawback that your code won't allow you to change your provider without rewriting your code. The only reason I would see for choosing a provider directly is to make sure that some security constraints are met, that would not be present for other providers.</p>

<p>The following paragraph is <a href=""http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html"" rel=""nofollow"">directly from the Oracle documentation</a>: </p>

<blockquote>
  <p>Reminder: Cryptographic implementations in the JDK are distributed through several different providers (""Sun"", ""SunJSSE"", ""SunJCE"", ""SunRsaSign"") for both historical reasons and by the types of services provided. General purpose applications SHOULD NOT request cryptographic services from specific providers. That is:</p>

<pre><code>getInstance(""..."", ""SunJCE"");  // not recommended
    vs.
getInstance(""..."");            // recommended
</code></pre>
</blockquote>

<hr>

<p>You can still manage to allow other providers to be used by giving them a higher priority (a lower priority indicator, 1 is highest priority) within the <code>java.security</code> file within the <code>jre/lib/security</code> path of your runtime. If you want to specify the provider using <code>getInstance(""Algorithm"", ""Provider"")</code> it might be a good idea to make the provider string configurable (e.g. using properties and using <code>myConfig.getProperty(""Provider"")</code>).</p>
","5881","<java><encryption><encryption-asymmetric><jce>","2","4","1","2016-06-10 18:30:55","20585849","1","4","2060515","","2013-12-14 08:53:26","2013-12-14 08:27:12",""
"1258404","Verifying a signature in java using a certificates public key","<p>I'm looking to convert some C# code to the equivalent in Java.</p>

<p>The C# code takes some string content, and a signature (generated using the private key, on a seperate machine) and combined with the public key it verifies the signature matches, providing a level of assurance that the request has not been tampered with.</p>

<pre><code>  public bool VerifySignature(string content, byte[] signatureBytes, AsymmetricAlgorithm publicKey)
  {
        var hash = new MD5CryptoServiceProvider();

        byte[] dataBuffer = Encoding.ASCII.GetBytes(content);

        var cs = new CryptoStream(Stream.Null, hash, CryptoStreamMode.Write);
        cs.Write(dataBuffer, 0, dataBuffer.Length);
        cs.Close();

        var deformatter = new RSAPKCS1SignatureDeformatter(publicKey);
        deformatter.SetHashAlgorithm(""MD5"");

        return deformatter.VerifySignature(hash, signatureBytes);
  }
</code></pre>

<p>The public key itself is an X509 Certificate - constructed from a .cer file, stored as assembly resource i.e.</p>

<pre><code>byte[] data; // data is read from a resource stream.
var publicKey = new X509Certificate2(data, """", X509KeyStorageFlags.MachineKeySet).PublicKey.Key
</code></pre>

<p>What I'm looking to do is emulate this functionality in Java, so I can verify the signature generated by some code in C#... I've started investigating the crypto functionality of Java, but I'm a bit of a java noob.  Here's what I've come up with so far:</p>

<pre><code>byte[] certContents=null;
byte[] signature=null;
String contents = ""abc"";

// load cert
CertificateFactory factory = CertificateFactory.getInstance(""X.509"");
X509Certificate cert = (X509Certificate) factory.generateCertificate(new ByteArrayInputStream(certContents));

// grab public key
RSAPublicKey publicKey = (RSAPublicKey)cert.getPublicKey();

// get sha1 hash for contents        
Mac mac = Mac.getInstance(""HmacSHA1"");
mac.update(contents.getBytes());                
byte[] hash = mac.doFinal();

// get cipher
Cipher cipher = Cipher.getInstance(""RSA"");
cipher.init(Cipher.DECRYPT_MODE, publicKey);

// verify signature of contents matches signature passed to method somehow (and this is where I'm stuck)
</code></pre>

<p>Can anyone provide any insight into how I can verify the signature - or provide links to some resources which might explain the java.crypto and java.security.cert usage better then the run of the mill java docs.</p>
","<p>That C# code looks really confusing to me. It use SHA1CryptoServiceProvider but uses MD5 hash so I can't tell which hashing algorithm it's using. I assume it's MD5.</p>

<p>The signature verification process involves padding so your code wouldn't work. Following is some snippet from my code and you can use it to verify the signature. data is the bytes to sign and sigBytes holds the signature.</p>

<pre><code>String algorithm = ""MD5withRSA"";

// Initialize JCE provider    
Signature verifier = Signature.getInstance(algorithm);

// Do the verification   
boolean result=false;

try {
    verifier.initVerify(cert); // This one checks key usage in the cert
    verifier.update(data);
    result = verifier.verify(sigBytes);
}
catch (Exception e) {
    throw new VerificationException(""Verification error: ""+e, e);
}
</code></pre>
","5777","<c#><java><public-key><encryption-asymmetric>","0","2","1","2011-10-04 10:32:48","1258686","0","4","4843","","2009-08-14 02:41:53","2009-08-11 03:57:05",""
"4926126","RSA Encryption in Java: Cross Platform Issues?","<p><strong>The Situation</strong></p>

<p>I'm working with RSA encryption in Java. I'm trying to encrypt data on an HTC Saphire (32B) developer phone equipped with Cyanogenmod's Android 2.2 and then decrypt said data on a 64 bit server running Mandriva Linux 2010. I am using the same public key, private key pair on both machines, can correctly encrypt/decrypt data on the Android phone, can correctly encrypt/decrypt data on the Linux server, but I am unable to encrypt data on the phone and then decrypt it on the server. I get bad padding exceptions. I have confirmed that the data is being sent correctly by the phone and is being parsed correctly by the server. As such, I cannot figure out why decryption fails. Can anyone help me with this? Perhaps the RSA algorithm in Java has some underlying assumption about word size?</p>

<p><strong>Further information:</strong></p>

<ul>
<li>My encryption/decryption library is based on the guide found <a href=""http://www.javamex.com/tutorials/cryptography/rsa_encryption.shtml"" rel=""nofollow"">here.</a></li>
<li>My encryption key is 2048 bits in length, but I see similar behaviour with different key sizes.</li>
<li>I have packaged my RSA encryption/decryption code into a jar file. It was compiled through Eclipse on the server's machine.</li>
<li>The program using the encryption library on the Android phone uses the above library. It too was built using Eclipse.</li>
<li>The server program was built using Netbeans (as it was easier at the time to do so).</li>
</ul>

<p><strong>Other Questions</strong></p>

<ul>
<li>Are there other free public-key encryption algorithms / libraries available for Java? Do they work cross-platform? What performance would one expect from them? Etc., etc. I've looked into this and haven't found much; perhaps I'm looking with the wrong keywords.</li>
</ul>

<p>Phew! I think that's it. Thanks for your help in  advance!</p>
","<p>Perhaps you should do a checksum of the data and make sure it is exactly what you want to be passed into the encryption/decryption APIs.</p>
","5726","<java><android><cross-platform><encryption-asymmetric><public-key-encryption>","10","0","2","2012-01-17 04:07:56","4926325","6","8","","","","2011-02-07 20:22:29",""
"4926126","RSA Encryption in Java: Cross Platform Issues?","<p><strong>The Situation</strong></p>

<p>I'm working with RSA encryption in Java. I'm trying to encrypt data on an HTC Saphire (32B) developer phone equipped with Cyanogenmod's Android 2.2 and then decrypt said data on a 64 bit server running Mandriva Linux 2010. I am using the same public key, private key pair on both machines, can correctly encrypt/decrypt data on the Android phone, can correctly encrypt/decrypt data on the Linux server, but I am unable to encrypt data on the phone and then decrypt it on the server. I get bad padding exceptions. I have confirmed that the data is being sent correctly by the phone and is being parsed correctly by the server. As such, I cannot figure out why decryption fails. Can anyone help me with this? Perhaps the RSA algorithm in Java has some underlying assumption about word size?</p>

<p><strong>Further information:</strong></p>

<ul>
<li>My encryption/decryption library is based on the guide found <a href=""http://www.javamex.com/tutorials/cryptography/rsa_encryption.shtml"" rel=""nofollow"">here.</a></li>
<li>My encryption key is 2048 bits in length, but I see similar behaviour with different key sizes.</li>
<li>I have packaged my RSA encryption/decryption code into a jar file. It was compiled through Eclipse on the server's machine.</li>
<li>The program using the encryption library on the Android phone uses the above library. It too was built using Eclipse.</li>
<li>The server program was built using Netbeans (as it was easier at the time to do so).</li>
</ul>

<p><strong>Other Questions</strong></p>

<ul>
<li>Are there other free public-key encryption algorithms / libraries available for Java? Do they work cross-platform? What performance would one expect from them? Etc., etc. I've looked into this and haven't found much; perhaps I'm looking with the wrong keywords.</li>
</ul>

<p>Phew! I think that's it. Thanks for your help in  advance!</p>
","<p>RSA encryption (or any encryption algorithm) should work regardless of environment.  However, it is possible that certain systems make different assumptions about default padding and the mode of operation.  Make sure that when you are performing encryption and decryption that you fully specify not only the algorithm, but also the mode of operation (CBC, etc) and the padding.  If that doesn't work, I suggest posting your code from both the device and the server so we can examine it more closely.</p>

<p><strong>Edit</strong> To address your question, in Java, when you get a cipher from the crypto package, you usually do so with the following code:</p>

<pre><code>Cipher cipher;
cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
</code></pre>

<p>The string provided to <code>getInstance</code> instructs the runtime to get a cipher instance that will use the AES algorithm, the cipher block chaining mode of operation and the PKCS5 Padding.  There are a number of supported algorithms and paddings.  I would check out <a href=""http://download.oracle.com/javase/1.4.2/docs/guide/security/jce/JCERefGuide.html"" rel=""noreferrer"">this document from Oracle</a> for more information about encryption in Java.</p>

<p>To be more specific, the string you use to request a cipher is in the format</p>

<pre><code>&lt;algorithm&gt;/&lt;mode of operation&gt;/&lt;padding&gt;
</code></pre>

<p>To make matters worse, despite Java providing a number of algorithms, modes of operation and paddings, not all of them will work together.  You will need to read the documentation to find a configuration string that will work.</p>
","5726","<java><android><cross-platform><encryption-asymmetric><public-key-encryption>","10","12","2","2012-01-17 04:07:56","4926325","6","8","","","","2011-02-07 20:22:29",""
"2998885","Delphi asymmetric encryption","<p>I'm looking for a Delphi implementation of an asymmetric encryption algorithm without any dependencies on external DLLs. Is there any available?</p>

<p>My goal is to encrypt/decrypt a string (or array of bytes) using a public/private key pair. </p>
","<p><a href=""http://www.eldos.com/sbb/"" rel=""noreferrer"">SecureBlackBox</a> from Eldos offers a native, comprehensive solution - including certificate management and access to external crypto devices (i.e. USB tokens)</p>
","5322","<delphi><encryption-asymmetric>","8","6","6","2010-10-26 00:27:33","3000249","0","4","52871","","2010-06-09 14:51:35","2010-06-08 15:40:29",""
"2998885","Delphi asymmetric encryption","<p>I'm looking for a Delphi implementation of an asymmetric encryption algorithm without any dependencies on external DLLs. Is there any available?</p>

<p>My goal is to encrypt/decrypt a string (or array of bytes) using a public/private key pair. </p>
","<p>Take a look at the FGInt package on this site: <a href=""http://submanifold.be/"" rel=""nofollow noreferrer"">http://submanifold.be/</a></p>

<p>If you can stomach using Windows services, there is the Crypto API: <a href=""http://msdn.microsoft.com/en-us/library/aa380255(v=VS.85).aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/aa380255(v=VS.85).aspx</a></p>

<p>If you are targeting Vista and up, there is the new Cryptography API: Next Generation. This also supports Elliptic Curve crypto: <a href=""http://msdn.microsoft.com/en-us/library/aa376210(VS.85).aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/aa376210(VS.85).aspx</a></p>
","5322","<delphi><encryption-asymmetric>","8","1","6","2010-10-26 00:27:33","3000249","0","4","52871","","2010-06-09 14:51:35","2010-06-08 15:40:29",""
"2998885","Delphi asymmetric encryption","<p>I'm looking for a Delphi implementation of an asymmetric encryption algorithm without any dependencies on external DLLs. Is there any available?</p>

<p>My goal is to encrypt/decrypt a string (or array of bytes) using a public/private key pair. </p>
","<p>Another very good fairly complete package is the Delphi Encryption Compendium (DEC) 5.2. You can download (Free with source) from <a href=""http://www.torry.net/pages.php?id=519#939342"" rel=""nofollow noreferrer"">http://www.torry.net/pages.php?id=519#939342</a>.</p>
","5322","<delphi><encryption-asymmetric>","8","0","6","2010-10-26 00:27:33","3000249","0","4","52871","","2010-06-09 14:51:35","2010-06-08 15:40:29",""
"2998885","Delphi asymmetric encryption","<p>I'm looking for a Delphi implementation of an asymmetric encryption algorithm without any dependencies on external DLLs. Is there any available?</p>

<p>My goal is to encrypt/decrypt a string (or array of bytes) using a public/private key pair. </p>
","<p>You can try Lockbox - <a href=""http://sourceforge.net/projects/tplockbox/"" rel=""nofollow noreferrer"">http://sourceforge.net/projects/tplockbox/</a>. It's free and includes RSA among others (Blowfish, MD5, SHA-1, DES, triple-DES, Rijndael, &amp; digital signing of messages).</p>

<p>It comes complete with a good RSA example that demonstrates how to generate your public/private keys and how to actually encrypt and decrypt data using the keys.</p>

<p>I'm currently using it with Delphi 2010. </p>
","5322","<delphi><encryption-asymmetric>","8","2","6","2010-10-26 00:27:33","3000249","0","4","52871","","2010-06-09 14:51:35","2010-06-08 15:40:29",""
"2998885","Delphi asymmetric encryption","<p>I'm looking for a Delphi implementation of an asymmetric encryption algorithm without any dependencies on external DLLs. Is there any available?</p>

<p>My goal is to encrypt/decrypt a string (or array of bytes) using a public/private key pair. </p>
","<p>I realize that the original question stated ""no external DLLs"" but in the absence of an acceptable answer maybe you should take a look at the <a href=""http://www.openssl.org"" rel=""nofollow noreferrer"">OpenSSL DLLs</a> along with <a href=""http://www.disi.unige.it/person/FerranteM/delphiopenssl/"" rel=""nofollow noreferrer"">this Delphi link</a> which contains an import unit for the library and some good examples on how to use it, including RSA encryption.<br/>
I have tinkered with this and got it working pretty well. There are some changes required to make it work with unicode Delphi - but these are mostly to do with changing PChar to PAnsiChar or PBytes.<br/>
Simple Delphi wrappers now allow me to sign/verify/encrypt sym or asym and use SSL. And let's be honest - the distribution of the OpenSSL DLLs is a lot more straightforward than some of the Microsoft offerings. Plus it's free and well maintained.</p>
","5322","<delphi><encryption-asymmetric>","8","2","6","2010-10-26 00:27:33","3000249","0","4","52871","","2010-06-09 14:51:35","2010-06-08 15:40:29",""
"2998885","Delphi asymmetric encryption","<p>I'm looking for a Delphi implementation of an asymmetric encryption algorithm without any dependencies on external DLLs. Is there any available?</p>

<p>My goal is to encrypt/decrypt a string (or array of bytes) using a public/private key pair. </p>
","<p>LockBox is now improved. It allows long keys for RSA, AES cipher and is in active development.
It is free, Open Source and 100% native code with no DLLs.</p>
","5322","<delphi><encryption-asymmetric>","8","4","6","2010-10-26 00:27:33","3000249","0","4","52871","","2010-06-09 14:51:35","2010-06-08 15:40:29",""
"5455487","How to find plain text from RSA cipher text","<p>I have a RSA cipher text <code>c</code>, the public key <code>(e,n)</code>. (where <code>c = m^e mod n</code>)</p>

<p>Now I also have known the plain text <code>m</code> should be either <code>""1234XXX""</code> or <code>""12345XXX""</code>, where <code>""XXX""</code> is a 3 digit number.</p>

<p>Can I find which one is right without testing all 3 digits number? (I just want to know if the first part is <code>""1234""</code> or <code>""12345""</code>, and I don't care what the <code>XXX</code> is.)</p>
","<p>You can't do that (it's a sort of know-plain-text attack). You can't derive any information on the key nor on the plain text, given an encrypted RSA message.</p>

<p>(Similar plain text messages don't produce similar encrypted messages)</p>

<p>So in your case, where you have the public key, you are still forced to encrypt all possible plain input messages (brute force), to discover the related encrypted messages.</p>
","5220","<rsa><public-key><encryption-asymmetric><encryption>","1","3","2","2017-04-06 11:50:38","5455575","1","","3478852","","2017-04-06 11:50:38","2011-03-28 06:41:16",""
"5455487","How to find plain text from RSA cipher text","<p>I have a RSA cipher text <code>c</code>, the public key <code>(e,n)</code>. (where <code>c = m^e mod n</code>)</p>

<p>Now I also have known the plain text <code>m</code> should be either <code>""1234XXX""</code> or <code>""12345XXX""</code>, where <code>""XXX""</code> is a 3 digit number.</p>

<p>Can I find which one is right without testing all 3 digits number? (I just want to know if the first part is <code>""1234""</code> or <code>""12345""</code>, and I don't care what the <code>XXX</code> is.)</p>
","<p>Actually, if you use RSA <em>properly</em>, then you cannot even guess your 'XXX' by trying the 1000 possibilities. The core operation in RSA is a modular exponentiation, but there is a first step called <em>padding</em> which transforms the data to encrypt into a big integer (modulo <em>n</em>).</p>

<p>The <a href=""https://www.emc.com/emc-plus/rsa-labs/standards-initiatives/pkcs-rsa-cryptography-standard.htm"" rel=""nofollow noreferrer"">PKCS#1 RSA standard</a> specifies two types of padding; both include a bunch of random bytes. A consequence is the following: if you encrypt twice the same message with the same key, you will get two <em>distinct</em> encrypted messages. The point is, precisely, to avoid the situation which you allude to: being able to ""guess"" the encrypted message and verify whether the guess is right or not, with only the public key (which is public, hence assumed to be known by every attacker).</p>

<p>Therefore, to answer your question: <em>if</em> you can find your 'XXX', either by trying only 1000 RSA encryption, or through any kind of clever shortcut, <em>then</em> your RSA is very wrong.</p>
","5220","<rsa><public-key><encryption-asymmetric><encryption>","1","2","2","2017-04-06 11:50:38","5455575","1","","3478852","","2017-04-06 11:50:38","2011-03-28 06:41:16",""
"13870158","java.security.SignatureException: Signature length not correct: got 66 but was expecting 64","<p>This is how I am generating a key pair:</p>

<pre><code>private void generateKeyPair() throws NoSuchAlgorithmException, IOException {
KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
//        kpg.initialize(1024);
kpg.initialize(512);
KeyPair kp = kpg.genKeyPair();

System.out.println(""Generated Key Pair"");
dumpKeyPair(kp);
}
</code></pre>

<p>Following creates token and token signature:</p>

<pre><code>public String makeTokenSignature(String message) throws GeneralSecurityException {
Signature signature = Signature.getInstance(""SHA1withRSA"");
signature.initSign(getPrivateKey());
signature.update(message.getBytes());

byte[] signatureValue = signature.sign();
return encodeBASE64(signatureValue);
}

public String createTokenString(String userName) {
long currentTime = System.currentTimeMillis();
String tokenString = userName + ""some other values.."";

return tokenString;
}
</code></pre>

<p>Here's the validator code:</p>

<pre><code>public boolean isValidTokenSignature(String message, byte[] signatureValue) throws     GeneralSecurityException {
Signature signature2 = Signature.getInstance(""SHA1withRSA"");
signature2.initVerify(getPublicKey());
signature2.update(message.getBytes());
return signature2.verify(signatureValue);
}
</code></pre>

<p>Problem I see:
When userName.length >= 16 &amp;&amp; userName &lt; 18, validation code works fine. Can someone tell me how does key size affects the permissible length of userName?
When I was using kpg.initialize(1024) in GenerateKeyPair code lower limit for username was 18 chars. </p>
","","5178","<java><security><rsa><encryption-asymmetric>","1","","0","2012-12-13 23:09:32","","2","","","","","2012-12-13 23:09:32",""
"5079084","how to create and use encrypted Property files in Java?","<p>I want to create a encrypted property file that stores information related to licences and some other highly sensitive data.<Br>
<strong>My Requirement during creation of encrypted Property file</strong><br></p>

<ol>
<li>Once created, should not be re-writable. </li>
<li>Once created nobody should be able to read the encrypted data.</li>
</ol>

<p><br>
After Creation, how I would be able to use the file in my project? </p>
","<p>You can use the javax.crypto.Cipher[Input|Output]Stream for reading/writing your data; however, you will have to enforce the write-once functionality in your code... maybe be comparing the data with a SHA hash or something to ensure that it has not been changed.</p>

<p>I have run across opensource and commercial license managers for Java... you may want to search around so as not to reinvent the wheel.</p>

<p>Also, you will probably want to look into obfuscation tools at least for your sensitive API if you want to keep users from decompiling it.</p>

<p>Hope this helps.</p>
","5151","<java><properties><encryption-asymmetric>","1","2","5","2013-02-22 03:03:11","5079187","2","","21234","","2012-01-04 23:33:18","2011-02-22 13:59:33",""
"5079084","how to create and use encrypted Property files in Java?","<p>I want to create a encrypted property file that stores information related to licences and some other highly sensitive data.<Br>
<strong>My Requirement during creation of encrypted Property file</strong><br></p>

<ol>
<li>Once created, should not be re-writable. </li>
<li>Once created nobody should be able to read the encrypted data.</li>
</ol>

<p><br>
After Creation, how I would be able to use the file in my project? </p>
","<p>Try:
<a href=""http://www.jasypt.org/encrypting-configuration.html"" rel=""nofollow"">http://www.jasypt.org/encrypting-configuration.html</a></p>
","5151","<java><properties><encryption-asymmetric>","1","1","5","2013-02-22 03:03:11","5079187","2","","21234","","2012-01-04 23:33:18","2011-02-22 13:59:33",""
"5079084","how to create and use encrypted Property files in Java?","<p>I want to create a encrypted property file that stores information related to licences and some other highly sensitive data.<Br>
<strong>My Requirement during creation of encrypted Property file</strong><br></p>

<ol>
<li>Once created, should not be re-writable. </li>
<li>Once created nobody should be able to read the encrypted data.</li>
</ol>

<p><br>
After Creation, how I would be able to use the file in my project? </p>
","<p>A Properties files is a human readable way to store a Map. If you don't want it to be be human readable, it doesn need to be a properties file.</p>

<p>One way to have a proeprties file with encrypted data is to encrypt the values of particular fields and use base 64 to turn them into text.</p>
","5151","<java><properties><encryption-asymmetric>","1","0","5","2013-02-22 03:03:11","5079187","2","","21234","","2012-01-04 23:33:18","2011-02-22 13:59:33",""
"5079084","how to create and use encrypted Property files in Java?","<p>I want to create a encrypted property file that stores information related to licences and some other highly sensitive data.<Br>
<strong>My Requirement during creation of encrypted Property file</strong><br></p>

<ol>
<li>Once created, should not be re-writable. </li>
<li>Once created nobody should be able to read the encrypted data.</li>
</ol>

<p><br>
After Creation, how I would be able to use the file in my project? </p>
","<p>Standard encryption in Java is pretty straight forward.  I suggest checking out the <a href=""http://download.oracle.com/javase/1.4.2/docs/guide/security/jce/JCERefGuide.html"" rel=""nofollow"">reference guide</a> for instructions on how to use the <code>javax.crypto</code> package.  However I would urge you to reconsider your design if it requires sensitive data, stored on client machines, that you don't trust the users with.  The reason I say that is in order for you program to access the information, it would need to have the encryption/decryption key stored internally which would mean that the key would be stored in the archive somewhere.  In the best case, it'd be stored as a variable in one of the <code>class</code> files.  Examining the binary classfile to determine this key would be trivial.  At the very least you should consider obfuscating your encryption code to at least make it slightly more difficult to identify the key simply from examining the binary code or decompiling the class file.</p>
","5151","<java><properties><encryption-asymmetric>","1","0","5","2013-02-22 03:03:11","5079187","2","","21234","","2012-01-04 23:33:18","2011-02-22 13:59:33",""
"5079084","how to create and use encrypted Property files in Java?","<p>I want to create a encrypted property file that stores information related to licences and some other highly sensitive data.<Br>
<strong>My Requirement during creation of encrypted Property file</strong><br></p>

<ol>
<li>Once created, should not be re-writable. </li>
<li>Once created nobody should be able to read the encrypted data.</li>
</ol>

<p><br>
After Creation, how I would be able to use the file in my project? </p>
","<p>See the answer to this other question:</p>

<p><a href=""https://stackoverflow.com/questions/10306673/securing-a-password-in-a-properties-file"">Securing a password in a properties file</a></p>

<p>There, it was recommended the use of <a href=""http://www.jasypt.org/"" rel=""nofollow noreferrer"">jasypt</a>. </p>
","5151","<java><properties><encryption-asymmetric>","1","1","5","2013-02-22 03:03:11","5079187","2","","21234","","2012-01-04 23:33:18","2011-02-22 13:59:33",""
"3322166","RSA private key encryption","<p>Is there any way to perform <strong>private key encryption</strong> in C#?</p>

<p>I know about the standard <code>RSACryptoServiceProvider</code> in <code>System.Security.Cryptography</code>, but these classes provide only <strong>public key encryption</strong> and <strong>private key decryption</strong>. Also, they provide digital signature functionality, which uses internally <strong>private key encryption</strong>, but there are not any publicly accessible functions to perform <strong>private key encryption</strong> and <strong>public key decryption</strong>.</p>

<p>I've found <a href=""http://www.codeproject.com/KB/security/PrivateEncryption.aspx"" rel=""nofollow noreferrer"">this article on codeproject</a>, which is a very good start point for performing this kind of encryption, however, I was looking for some ready-to-use code, as the code in the article can hardly encrypt arbitrary-long byte arrays containing <em>random values</em> (that means any values, including zeroes).</p>

<p>Do you know some good components (preferably free) to perform <strong>private key encryption</strong>?<br>
I use <code>.NET 3.5</code>.</p>

<p><strong>Note:</strong> <em>I know this is generally considered as bad way of using asymmetric encryption (encrypting using private key and decrypting using public key), but I just need to use it that way.</em></p>

<h2>Additional Explanation</h2>

<p>Consider you have   </p>

<pre><code>var bytes = new byte[30] { /* ... */ };
</code></pre>

<p>and you want to use <code>2048bit RSA</code> to ensure no one have changed anything in this array.</p>

<p>Normally, you would use digital signature (ie. <code>RIPEMD160</code>), which you then attach to the original bytes and send over to the receiver.</p>

<p>So, you have <strong>30 bytes</strong> of original data, and <strong>additional 256 bytes</strong> of digital signature (because it is a <code>2048bit RSA</code>), which is overall of <strong>286 bytes</strong>. Hovewer, only <strong>160 bits</strong> of that <strong>256 bytes</strong> are actually hash, so there is exactly <strong>1888 bits</strong> (<strong>236 bytes</strong>) unused.</p>

<p>So, my idea was this:  </p>

<p>Take the <strong>30 bytes</strong> of original data, attach to it the hash (<strong>20 bytes</strong>), and now encrypt these <strong>50 bytes</strong>. You get <strong>256 bytes</strong> long message, which is much shorter than <strong>286 bytes</strong>, because ""you were able to push the actual data inside the digital signature"".</p>

<h2>ECDSA Resources</h2>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.ecdsacng.aspx"" rel=""nofollow noreferrer"">MSDN</a><br>
<a href=""http://www.eggheadcafe.com/software/aspnet/31670677/ecdsacng-elliptic-curve-c.aspx"" rel=""nofollow noreferrer"">Eggheadcafe.com</a><br>
<a href=""http://translate.google.com/translate?hl=en&amp;sl=de&amp;tl=en&amp;u=http%3A%2F%2Fwww.c-plusplus.de%2Fforum%2Fviewtopic-var-t-is-205305.html"" rel=""nofollow noreferrer"">c-plusplus.de</a><br>
<a href=""http://blogs.msdn.com/b/shawnfa/archive/2007/01/18/elliptic-curve-dsa.aspx"" rel=""nofollow noreferrer"">MSDN Blog</a><br>
<a href=""http://en.wikipedia.org/wiki/Elliptic_Curve_DSA"" rel=""nofollow noreferrer"">Wiki</a>  </p>

<h2>DSA Resources</h2>

<p><a href=""http://www.codeproject.com/KB/security/CryptoInteropSign.aspx"" rel=""nofollow noreferrer"">CodeProject</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.dsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">MSDN 1</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/bfh661ac.aspx"" rel=""nofollow noreferrer"">MSDN 2</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.dsasignatureformatter.aspx"" rel=""nofollow noreferrer"">MSDN 3</a>  </p>

<h2>Final Solution</h2>

<p>If anyone is interested how I've solved this problem, I'm going to use <code>1024bit DSA</code> and <code>SHA1</code>, which is widely supported on many different versions of Windows (<code>Windows 2000</code> and newer), security is good enough (I'm not signing orders, I just need to ensure that some child can't crack the signature on his iPhone (:-D)), and the signature size is only <strong>40 bytes</strong> long.</p>
","<p>Your Public key is a sub-set of your private key. You can use your private key as a public key as it will only use the components of the full key it requires.</p>

<p>In .NET both your private &amp; public keys are stored in the <code>RSAParameters</code> struct. The struct contains fields for:</p>

<ul>
<li>D</li>
<li>DP</li>
<li>DQ</li>
<li>Exponent</li>
<li>InverseQ</li>
<li>Modulus</li>
<li>P</li>
<li>Q</li>
</ul>
","5121","<c#><.net><encryption><rsa><encryption-asymmetric>","4","2","4","2010-07-24 19:15:37","3324556","16","3","298609","","2010-07-24 19:15:37","2010-07-23 20:36:41",""
"3322166","RSA private key encryption","<p>Is there any way to perform <strong>private key encryption</strong> in C#?</p>

<p>I know about the standard <code>RSACryptoServiceProvider</code> in <code>System.Security.Cryptography</code>, but these classes provide only <strong>public key encryption</strong> and <strong>private key decryption</strong>. Also, they provide digital signature functionality, which uses internally <strong>private key encryption</strong>, but there are not any publicly accessible functions to perform <strong>private key encryption</strong> and <strong>public key decryption</strong>.</p>

<p>I've found <a href=""http://www.codeproject.com/KB/security/PrivateEncryption.aspx"" rel=""nofollow noreferrer"">this article on codeproject</a>, which is a very good start point for performing this kind of encryption, however, I was looking for some ready-to-use code, as the code in the article can hardly encrypt arbitrary-long byte arrays containing <em>random values</em> (that means any values, including zeroes).</p>

<p>Do you know some good components (preferably free) to perform <strong>private key encryption</strong>?<br>
I use <code>.NET 3.5</code>.</p>

<p><strong>Note:</strong> <em>I know this is generally considered as bad way of using asymmetric encryption (encrypting using private key and decrypting using public key), but I just need to use it that way.</em></p>

<h2>Additional Explanation</h2>

<p>Consider you have   </p>

<pre><code>var bytes = new byte[30] { /* ... */ };
</code></pre>

<p>and you want to use <code>2048bit RSA</code> to ensure no one have changed anything in this array.</p>

<p>Normally, you would use digital signature (ie. <code>RIPEMD160</code>), which you then attach to the original bytes and send over to the receiver.</p>

<p>So, you have <strong>30 bytes</strong> of original data, and <strong>additional 256 bytes</strong> of digital signature (because it is a <code>2048bit RSA</code>), which is overall of <strong>286 bytes</strong>. Hovewer, only <strong>160 bits</strong> of that <strong>256 bytes</strong> are actually hash, so there is exactly <strong>1888 bits</strong> (<strong>236 bytes</strong>) unused.</p>

<p>So, my idea was this:  </p>

<p>Take the <strong>30 bytes</strong> of original data, attach to it the hash (<strong>20 bytes</strong>), and now encrypt these <strong>50 bytes</strong>. You get <strong>256 bytes</strong> long message, which is much shorter than <strong>286 bytes</strong>, because ""you were able to push the actual data inside the digital signature"".</p>

<h2>ECDSA Resources</h2>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.ecdsacng.aspx"" rel=""nofollow noreferrer"">MSDN</a><br>
<a href=""http://www.eggheadcafe.com/software/aspnet/31670677/ecdsacng-elliptic-curve-c.aspx"" rel=""nofollow noreferrer"">Eggheadcafe.com</a><br>
<a href=""http://translate.google.com/translate?hl=en&amp;sl=de&amp;tl=en&amp;u=http%3A%2F%2Fwww.c-plusplus.de%2Fforum%2Fviewtopic-var-t-is-205305.html"" rel=""nofollow noreferrer"">c-plusplus.de</a><br>
<a href=""http://blogs.msdn.com/b/shawnfa/archive/2007/01/18/elliptic-curve-dsa.aspx"" rel=""nofollow noreferrer"">MSDN Blog</a><br>
<a href=""http://en.wikipedia.org/wiki/Elliptic_Curve_DSA"" rel=""nofollow noreferrer"">Wiki</a>  </p>

<h2>DSA Resources</h2>

<p><a href=""http://www.codeproject.com/KB/security/CryptoInteropSign.aspx"" rel=""nofollow noreferrer"">CodeProject</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.dsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">MSDN 1</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/bfh661ac.aspx"" rel=""nofollow noreferrer"">MSDN 2</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.dsasignatureformatter.aspx"" rel=""nofollow noreferrer"">MSDN 3</a>  </p>

<h2>Final Solution</h2>

<p>If anyone is interested how I've solved this problem, I'm going to use <code>1024bit DSA</code> and <code>SHA1</code>, which is widely supported on many different versions of Windows (<code>Windows 2000</code> and newer), security is good enough (I'm not signing orders, I just need to ensure that some child can't crack the signature on his iPhone (:-D)), and the signature size is only <strong>40 bytes</strong> long.</p>
","<p>I get it now, after reading the comments.</p>

<p>The answer is: <em>don't do it.</em></p>

<p>Cryptographic signature algorithms are not algorithms from which you can pick and choose - or modify - steps.  In particular, supposing a signature <code>sig</code> looks something like <code>encrypt(hash)</code>, <code>orig + sig</code> is <em>not</em> the same as <code>encrypt(orig + hash)</code>.  Further, even outdated signature algorithms like <a href=""ftp://ftp.rsasecurity.com/pub/pkcs/ascii/pkcs-1.asc"" rel=""nofollow noreferrer"">PKCS v1.5</a> are not as simple as <code>encrypt(hash)</code> in the first place.</p>

<p>A technique like the one you describe sacrifices security for the sake of cleverness.  If you don't have the bandwidth for a 256 byte signature, then you need one of:</p>

<ol>
<li>a different algorithm,</li>
<li>more bandwidth, or</li>
<li>a smaller key.</li>
</ol>

<p>And if you go with (1), please be sure it's not an algorithm you made up!  The simple fact is that <a href=""http://www.schneier.com/essay-037.html"" rel=""nofollow noreferrer"">crypto is hard</a>.</p>
","5121","<c#><.net><encryption><rsa><encryption-asymmetric>","4","1","4","2010-07-24 19:15:37","3324556","16","3","298609","","2010-07-24 19:15:37","2010-07-23 20:36:41",""
"3322166","RSA private key encryption","<p>Is there any way to perform <strong>private key encryption</strong> in C#?</p>

<p>I know about the standard <code>RSACryptoServiceProvider</code> in <code>System.Security.Cryptography</code>, but these classes provide only <strong>public key encryption</strong> and <strong>private key decryption</strong>. Also, they provide digital signature functionality, which uses internally <strong>private key encryption</strong>, but there are not any publicly accessible functions to perform <strong>private key encryption</strong> and <strong>public key decryption</strong>.</p>

<p>I've found <a href=""http://www.codeproject.com/KB/security/PrivateEncryption.aspx"" rel=""nofollow noreferrer"">this article on codeproject</a>, which is a very good start point for performing this kind of encryption, however, I was looking for some ready-to-use code, as the code in the article can hardly encrypt arbitrary-long byte arrays containing <em>random values</em> (that means any values, including zeroes).</p>

<p>Do you know some good components (preferably free) to perform <strong>private key encryption</strong>?<br>
I use <code>.NET 3.5</code>.</p>

<p><strong>Note:</strong> <em>I know this is generally considered as bad way of using asymmetric encryption (encrypting using private key and decrypting using public key), but I just need to use it that way.</em></p>

<h2>Additional Explanation</h2>

<p>Consider you have   </p>

<pre><code>var bytes = new byte[30] { /* ... */ };
</code></pre>

<p>and you want to use <code>2048bit RSA</code> to ensure no one have changed anything in this array.</p>

<p>Normally, you would use digital signature (ie. <code>RIPEMD160</code>), which you then attach to the original bytes and send over to the receiver.</p>

<p>So, you have <strong>30 bytes</strong> of original data, and <strong>additional 256 bytes</strong> of digital signature (because it is a <code>2048bit RSA</code>), which is overall of <strong>286 bytes</strong>. Hovewer, only <strong>160 bits</strong> of that <strong>256 bytes</strong> are actually hash, so there is exactly <strong>1888 bits</strong> (<strong>236 bytes</strong>) unused.</p>

<p>So, my idea was this:  </p>

<p>Take the <strong>30 bytes</strong> of original data, attach to it the hash (<strong>20 bytes</strong>), and now encrypt these <strong>50 bytes</strong>. You get <strong>256 bytes</strong> long message, which is much shorter than <strong>286 bytes</strong>, because ""you were able to push the actual data inside the digital signature"".</p>

<h2>ECDSA Resources</h2>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.ecdsacng.aspx"" rel=""nofollow noreferrer"">MSDN</a><br>
<a href=""http://www.eggheadcafe.com/software/aspnet/31670677/ecdsacng-elliptic-curve-c.aspx"" rel=""nofollow noreferrer"">Eggheadcafe.com</a><br>
<a href=""http://translate.google.com/translate?hl=en&amp;sl=de&amp;tl=en&amp;u=http%3A%2F%2Fwww.c-plusplus.de%2Fforum%2Fviewtopic-var-t-is-205305.html"" rel=""nofollow noreferrer"">c-plusplus.de</a><br>
<a href=""http://blogs.msdn.com/b/shawnfa/archive/2007/01/18/elliptic-curve-dsa.aspx"" rel=""nofollow noreferrer"">MSDN Blog</a><br>
<a href=""http://en.wikipedia.org/wiki/Elliptic_Curve_DSA"" rel=""nofollow noreferrer"">Wiki</a>  </p>

<h2>DSA Resources</h2>

<p><a href=""http://www.codeproject.com/KB/security/CryptoInteropSign.aspx"" rel=""nofollow noreferrer"">CodeProject</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.dsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">MSDN 1</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/bfh661ac.aspx"" rel=""nofollow noreferrer"">MSDN 2</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.dsasignatureformatter.aspx"" rel=""nofollow noreferrer"">MSDN 3</a>  </p>

<h2>Final Solution</h2>

<p>If anyone is interested how I've solved this problem, I'm going to use <code>1024bit DSA</code> and <code>SHA1</code>, which is widely supported on many different versions of Windows (<code>Windows 2000</code> and newer), security is good enough (I'm not signing orders, I just need to ensure that some child can't crack the signature on his iPhone (:-D)), and the signature size is only <strong>40 bytes</strong> long.</p>
","<p>If you're at the point where the data is so small that the digital signature is huge in comparison, then you have excess signature.  The solution isn't to roll your own algorithm, but to cut down what's there.  You definitely don't want to try to combine a key with the hash in an amateurish way: this has been broken already, which is why we have HMAC's.</p>

<p>So here's the basic idea:</p>

<ol>
<li><p>Create a session key using a cryptographically strong RNG.</p></li>
<li><p>Transmit it via PKE.</p></li>
<li><p>Use the session key to generate an HMAC-SHA1 (or HMAC-RIPEMD160, or whatever).</p></li>
<li><p>If the size of the hash is absurdly large for the given data, cut it in half by XORing the top with the bottom.  Repeat as needed.</p></li>
<li><p>Send the data and the (possibly cut-down) hash.</p></li>
<li><p>The receiver uses the data and the session key to regenerate the hash and then compares it with the one transmitted (possibly after first cutting it down.)</p></li>
<li><p>Change session keys often.</p></li>
</ol>

<p>This is a compromise between the insanity of rolling your own system and using an ill-fitting one.</p>

<p>I'm wide open to constructive criticism...</p>
","5121","<c#><.net><encryption><rsa><encryption-asymmetric>","4","2","4","2010-07-24 19:15:37","3324556","16","3","298609","","2010-07-24 19:15:37","2010-07-23 20:36:41",""
"3322166","RSA private key encryption","<p>Is there any way to perform <strong>private key encryption</strong> in C#?</p>

<p>I know about the standard <code>RSACryptoServiceProvider</code> in <code>System.Security.Cryptography</code>, but these classes provide only <strong>public key encryption</strong> and <strong>private key decryption</strong>. Also, they provide digital signature functionality, which uses internally <strong>private key encryption</strong>, but there are not any publicly accessible functions to perform <strong>private key encryption</strong> and <strong>public key decryption</strong>.</p>

<p>I've found <a href=""http://www.codeproject.com/KB/security/PrivateEncryption.aspx"" rel=""nofollow noreferrer"">this article on codeproject</a>, which is a very good start point for performing this kind of encryption, however, I was looking for some ready-to-use code, as the code in the article can hardly encrypt arbitrary-long byte arrays containing <em>random values</em> (that means any values, including zeroes).</p>

<p>Do you know some good components (preferably free) to perform <strong>private key encryption</strong>?<br>
I use <code>.NET 3.5</code>.</p>

<p><strong>Note:</strong> <em>I know this is generally considered as bad way of using asymmetric encryption (encrypting using private key and decrypting using public key), but I just need to use it that way.</em></p>

<h2>Additional Explanation</h2>

<p>Consider you have   </p>

<pre><code>var bytes = new byte[30] { /* ... */ };
</code></pre>

<p>and you want to use <code>2048bit RSA</code> to ensure no one have changed anything in this array.</p>

<p>Normally, you would use digital signature (ie. <code>RIPEMD160</code>), which you then attach to the original bytes and send over to the receiver.</p>

<p>So, you have <strong>30 bytes</strong> of original data, and <strong>additional 256 bytes</strong> of digital signature (because it is a <code>2048bit RSA</code>), which is overall of <strong>286 bytes</strong>. Hovewer, only <strong>160 bits</strong> of that <strong>256 bytes</strong> are actually hash, so there is exactly <strong>1888 bits</strong> (<strong>236 bytes</strong>) unused.</p>

<p>So, my idea was this:  </p>

<p>Take the <strong>30 bytes</strong> of original data, attach to it the hash (<strong>20 bytes</strong>), and now encrypt these <strong>50 bytes</strong>. You get <strong>256 bytes</strong> long message, which is much shorter than <strong>286 bytes</strong>, because ""you were able to push the actual data inside the digital signature"".</p>

<h2>ECDSA Resources</h2>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.ecdsacng.aspx"" rel=""nofollow noreferrer"">MSDN</a><br>
<a href=""http://www.eggheadcafe.com/software/aspnet/31670677/ecdsacng-elliptic-curve-c.aspx"" rel=""nofollow noreferrer"">Eggheadcafe.com</a><br>
<a href=""http://translate.google.com/translate?hl=en&amp;sl=de&amp;tl=en&amp;u=http%3A%2F%2Fwww.c-plusplus.de%2Fforum%2Fviewtopic-var-t-is-205305.html"" rel=""nofollow noreferrer"">c-plusplus.de</a><br>
<a href=""http://blogs.msdn.com/b/shawnfa/archive/2007/01/18/elliptic-curve-dsa.aspx"" rel=""nofollow noreferrer"">MSDN Blog</a><br>
<a href=""http://en.wikipedia.org/wiki/Elliptic_Curve_DSA"" rel=""nofollow noreferrer"">Wiki</a>  </p>

<h2>DSA Resources</h2>

<p><a href=""http://www.codeproject.com/KB/security/CryptoInteropSign.aspx"" rel=""nofollow noreferrer"">CodeProject</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.dsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">MSDN 1</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/bfh661ac.aspx"" rel=""nofollow noreferrer"">MSDN 2</a><br>
<a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.dsasignatureformatter.aspx"" rel=""nofollow noreferrer"">MSDN 3</a>  </p>

<h2>Final Solution</h2>

<p>If anyone is interested how I've solved this problem, I'm going to use <code>1024bit DSA</code> and <code>SHA1</code>, which is widely supported on many different versions of Windows (<code>Windows 2000</code> and newer), security is good enough (I'm not signing orders, I just need to ensure that some child can't crack the signature on his iPhone (:-D)), and the signature size is only <strong>40 bytes</strong> long.</p>
","<p>What you are trying to design is known as a ""Signature scheme with message recovery"".</p>

<p>Designing a new signature scheme is hard. Designing a new signature scheme with message recovery is harder. I don't know all the details about your design, but there is a good chance that it is susceptible to a chosen message attack.</p>

<p>One proposal for signature schemes with message recovery is RSA PSS-R. But unfortunately, this proposal is covered with a patent.</p>

<p>The IEEE P1363 standarization group, once discussed the addition of signature schemes with message recovery. However, I'm not sure about the current state of this effort, but it might be worth checking out.</p>
","5121","<c#><.net><encryption><rsa><encryption-asymmetric>","4","3","4","2010-07-24 19:15:37","3324556","16","3","298609","","2010-07-24 19:15:37","2010-07-23 20:36:41",""
"7432556","Javascript asymmetric encryption and authentication","<p>Some of the guys here are developing an application which incorporates some 'secure areas' accessible by logging in. In the past, the login form and subsequent 'secure' pages were all plain text transmitted over http, as it's an application that goes out for use on shared servers where there is little chance of being able to use SSL (think WordPress and the like). Most people just shrugged their shoulders as that's all they expected - it's hardly a national bank.</p>

<p>We are now thinking of writing the next version using a JavaScript front end, with the advantage of loading all the images &amp; CSS once, then writing HTML into the DOM thereafter with extJS (or maybe jQuery). We'd like to encrypt user input at the client before being sent to the server, then decrypt server output at the browser before being rendered to HTML so as to introduce some sort of security for users. There are also gains to be had with reducing page loading times, as we're only sending gzipped JSON back and forth.</p>

<p>While playing around, we realised that the method we were looking at to encrypt the basic stuff also doubled up as an authentication mechanism for login in the first place.</p>

<p>For simplicity...:</p>

<ul>
<li>The user connects to the login page over standard http, where the browser downloads the JavaScript package containing the hashing and encryption algorithms (SHA-256 and AES for example).</li>
<li>User enters <code>username</code>, <code>password</code> and <code>secret</code> into a login form.</li>
<li>The browser JavaScript sends a hash of <code>username</code> and <code>password</code> to the server via AJAX. The <code>secret</code> is only stored in JavaScript and is never sent across the internet.</li>
<li>The server looks up the hash and retrieves <code>username</code> and <code>secret</code> from the database.</li>
<li>The server sends a hash (same algorithm as the browser) of <code>username</code> and <code>secret</code> back to the browser.</li>
<li>The browser JavaScript creates a hash of <code>username</code> and <code>secret</code> and compares it to the hash sent back from the server.</li>
<li>If they are the same, the browser JavaScript encrypts <code>response</code> with <code>secret</code> and sends the message back to the server.</li>
<li>The server decrypts the message with <code>secret</code> to find the expected <code>response</code> and starts a new session.</li>
<li>Subsequent communications are encrypted and decrypted both ways with <code>secret</code>.</li>
</ul>

<p>There seem to be a few advantages of this type of system, but are we right in thinking:</p>

<ul>
<li>The user knows they are talking to their server if the server manages to create a hash of <code>username</code> and <code>secret</code>, proving the server knows and understands <code>username</code> and <code>secret</code>.</li>
<li>The server knows the user is genuine if they manage to encrypt <code>response</code> with <code>secret</code>, proving the user knows <code>secret</code>.</li>
<li>At no time is <code>secret</code> ever transmitted in plain text, or is it possible to determine <code>secret</code> from the hash.</li>
<li>A sniffer will only ever find out the 'secure' URL and detect compressed hashes and encryptions in the query string. If they send a request to to the URL that is malformed, no response is given. If they somehow manage to guess an appropriate request, they still have to be able to decrypt it.</li>
</ul>

<p>It all seems quick enough as to be imperceptible to the user. Can anyone see through this, as we all just assumed we shouldn't be playing with JavaScript encryption!</p>
","<p>Don't do this. Please use SSL/TLS. See <a href=""http://www.matasano.com/articles/javascript-cryptography/"" rel=""noreferrer"">Javascript Cryptography Considered Harmful</a>.</p>
","4947","<javascript><authentication><encryption-asymmetric><encryption>","3","7","2","2014-12-05 19:17:32","7432684","6","3","492624","","2011-09-15 14:36:09","2011-09-15 14:30:47",""
"7432556","Javascript asymmetric encryption and authentication","<p>Some of the guys here are developing an application which incorporates some 'secure areas' accessible by logging in. In the past, the login form and subsequent 'secure' pages were all plain text transmitted over http, as it's an application that goes out for use on shared servers where there is little chance of being able to use SSL (think WordPress and the like). Most people just shrugged their shoulders as that's all they expected - it's hardly a national bank.</p>

<p>We are now thinking of writing the next version using a JavaScript front end, with the advantage of loading all the images &amp; CSS once, then writing HTML into the DOM thereafter with extJS (or maybe jQuery). We'd like to encrypt user input at the client before being sent to the server, then decrypt server output at the browser before being rendered to HTML so as to introduce some sort of security for users. There are also gains to be had with reducing page loading times, as we're only sending gzipped JSON back and forth.</p>

<p>While playing around, we realised that the method we were looking at to encrypt the basic stuff also doubled up as an authentication mechanism for login in the first place.</p>

<p>For simplicity...:</p>

<ul>
<li>The user connects to the login page over standard http, where the browser downloads the JavaScript package containing the hashing and encryption algorithms (SHA-256 and AES for example).</li>
<li>User enters <code>username</code>, <code>password</code> and <code>secret</code> into a login form.</li>
<li>The browser JavaScript sends a hash of <code>username</code> and <code>password</code> to the server via AJAX. The <code>secret</code> is only stored in JavaScript and is never sent across the internet.</li>
<li>The server looks up the hash and retrieves <code>username</code> and <code>secret</code> from the database.</li>
<li>The server sends a hash (same algorithm as the browser) of <code>username</code> and <code>secret</code> back to the browser.</li>
<li>The browser JavaScript creates a hash of <code>username</code> and <code>secret</code> and compares it to the hash sent back from the server.</li>
<li>If they are the same, the browser JavaScript encrypts <code>response</code> with <code>secret</code> and sends the message back to the server.</li>
<li>The server decrypts the message with <code>secret</code> to find the expected <code>response</code> and starts a new session.</li>
<li>Subsequent communications are encrypted and decrypted both ways with <code>secret</code>.</li>
</ul>

<p>There seem to be a few advantages of this type of system, but are we right in thinking:</p>

<ul>
<li>The user knows they are talking to their server if the server manages to create a hash of <code>username</code> and <code>secret</code>, proving the server knows and understands <code>username</code> and <code>secret</code>.</li>
<li>The server knows the user is genuine if they manage to encrypt <code>response</code> with <code>secret</code>, proving the user knows <code>secret</code>.</li>
<li>At no time is <code>secret</code> ever transmitted in plain text, or is it possible to determine <code>secret</code> from the hash.</li>
<li>A sniffer will only ever find out the 'secure' URL and detect compressed hashes and encryptions in the query string. If they send a request to to the URL that is malformed, no response is given. If they somehow manage to guess an appropriate request, they still have to be able to decrypt it.</li>
</ul>

<p>It all seems quick enough as to be imperceptible to the user. Can anyone see through this, as we all just assumed we shouldn't be playing with JavaScript encryption!</p>
","<p>If you can provide a single SSL site to deliver your JavaScript securely (to avoid the attack mentioned above), then you can use the opensource Forge library to provide cross-domain TLS connections to your other sites after generating self-signed certificates for them. The Forge library also provides other basic crypto stuff if you opt to go in a different direction. Forge has an XMLHttpRequest wrapper that is nearly all JavaScript, with a small piece that leverages Flash's socket API to enable cross-domain communication.</p>

<p><a href=""http://digitalbazaar.com/2010/07/20/javascript-tls-1/"" rel=""nofollow"">http://digitalbazaar.com/2010/07/20/javascript-tls-1/</a></p>

<p><a href=""https://github.com/digitalbazaar/forge"" rel=""nofollow"">https://github.com/digitalbazaar/forge</a></p>
","4947","<javascript><authentication><encryption-asymmetric><encryption>","3","2","2","2014-12-05 19:17:32","7432684","6","3","492624","","2011-09-15 14:36:09","2011-09-15 14:30:47",""
"2653591","Decrypting “long” message encrypted with RSA java","<p>Hi this is the same question, that was asked two years ago:
<a href=""https://stackoverflow.com/questions/295436/java-jce-decrypting-long-message-encrypted-with-rsa"">Java/JCE: Decrypting “long” message encrypted with RSA</a></p>

<p>I had a large byte array and rsa keypair, initiated by value 1024.
Using rsa encryption and the specified size of the key is strong requirement, I can't change it. So I can't use symmetric encryption with asymetric encryption symmetric key. I can't use any other keys. I had a byte array and need ciphered byte array to be returned. I wonder if there is any ready tool, that can manage with this problem? </p>

<p>Sorry for such an amateurish question, but I really need a help.</p>
","<p>As stated, your question has a single answer, and that's ""no"". RSA encryption is an algorithm which encrypts messages up to a given size, which depends on the key size; with a 1024-bit RSA key, and RSA as <a href=""http://www.rsa.com/rsalabs/node.asp?id=2125"" rel=""noreferrer"">the standard</a> describes it, the maximum size is 117 bytes, no more. There is no way to encrypt a larger message with RSA alone, and that's a definite, mathematical certainty.</p>

<p>If you really need to process longer messages, then you <em>necessarily</em> have to add something else. In that case, please, <em>please</em>, do not try to do anything fancy of your own devising with some oh-so-clever splitting of data into small blocks and the like. That path leads to doom. You might produce something which <em>appears</em> to compile and run, but which will be invariably weak in some way, like almost every other home-made variation on cryptography. That's because security cannot be tested: it is not a case of ""works"" or ""does not work"".</p>

<p>The well-trodden path of asymmetric encryption goes thus:</p>

<ol>
<li>You select a random sequence of bytes of some appropriate length, e.g. 128 bits (that's 16 bytes). Let's call it <em>K</em>.</li>
<li>You encrypt <em>K</em> with the RSA public key; this yields <em>E</em>.</li>
<li>You encrypt the message with <em>K</em> using a symmetric encryption algorithm (<code>""AES/CBC/PKCS5Padding""</code>). Since this is a one-shot key, you can use an all-zeros IV. This yields a bunch of bytes, let's call it <em>F</em>.</li>
<li>The encrypted message is then the concatenation of <em>E</em> and <em>F</em>.</li>
</ol>

<p>Decryption proceeds in the reverse order: the RSA private key is used to recover <em>K</em> from <em>E</em>, then <em>K</em> is used to decrypt <em>F</em> into the original message. The key <em>K</em> is never stored anywhere, and a <em>new key K</em> is generated every time (even if you encrypt the same message twice). That's important, do not change that unless you understand what you are doing (and if you do, then you already know that).</p>

<p>Given what you state about your problem, you <em>have</em> to do something else than ""just RSA"". The procedure I describe above is about the best ""something else"" that you could come up with, security-wise.</p>

<p>Assembling some cryptographic elements into such a protocol is a process fraught with pitfalls so you may have better luck using an already defined format and support library. Two common formats for asymmetric encryption are <a href=""http://tools.ietf.org/html/rfc3370"" rel=""noreferrer"">CMS</a> and <a href=""http://tools.ietf.org/html/rfc4880"" rel=""noreferrer"">OpenPGP</a>. A library which supports both and has good reputation is <a href=""http://www.bouncycastle.org/java.html"" rel=""noreferrer"">Bouncy Castle</a>.</p>
","4622","<java><encryption><rsa><encryption-asymmetric><jce>","4","12","2","2014-05-18 15:15:03","2654368","0","6","-1","","2017-05-23 12:08:54","2010-04-16 14:19:33",""
"2653591","Decrypting “long” message encrypted with RSA java","<p>Hi this is the same question, that was asked two years ago:
<a href=""https://stackoverflow.com/questions/295436/java-jce-decrypting-long-message-encrypted-with-rsa"">Java/JCE: Decrypting “long” message encrypted with RSA</a></p>

<p>I had a large byte array and rsa keypair, initiated by value 1024.
Using rsa encryption and the specified size of the key is strong requirement, I can't change it. So I can't use symmetric encryption with asymetric encryption symmetric key. I can't use any other keys. I had a byte array and need ciphered byte array to be returned. I wonder if there is any ready tool, that can manage with this problem? </p>

<p>Sorry for such an amateurish question, but I really need a help.</p>
","<p>If you do need to encrypt/decrypt long strings using RSA, then you can break the bytes up in to smaller ""chunks"" and process each chunk of bytes through the cipher one at a time while storing the results in a ByteBuffer.</p>

<p><strong>Encryption:</strong></p>

<pre><code>byte[] encData = null;
try {

    // create public key
    X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(key);
    KeyFactory kf = KeyFactory.getInstance(""RSA"");
    PublicKey pk = kf.generatePublic(publicKeySpec);

    Cipher pkCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    pkCipher.init(Cipher.ENCRYPT_MODE, pk);

    int chunkSize = 117; // 1024 / 8 - 11(padding) = 117
    int encSize = (int) (Math.ceil(data.length/117.0)*128);
    int idx = 0;
    ByteBuffer buf = ByteBuffer.allocate(encSize);
    while (idx &lt; data.length) {
        int len = Math.min(data.length-idx, chunkSize);
        byte[] encChunk = pkCipher.doFinal(data, idx, len);
        buf.put(encChunk);
        idx += len;
    }

    // fully encrypted data     
    encData = buf.array();
} catch (Exception e) {
    e.printStackTrace();
</code></pre>

<p><strong>Decryption</strong>   </p>

<pre><code>Cipher rsaCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
rsaCipher.init(Cipher.DECRYPT_MODE, rsaPk);

int chunkSize = 128;
int idx = 0;
ByteBuffer buf = ByteBuffer.allocate(data.length);
while(idx &lt; data.length) {
    int len = Math.min(data.length-idx, chunkSize);
    byte[] chunk = rsaCipher.doFinal(data, idx, len);
    buf.put(chunk);
    idx += len;
}

// fully decrypted data
byte[] decryptedData = buf.array();
</code></pre>
","4622","<java><encryption><rsa><encryption-asymmetric><jce>","4","1","2","2014-05-18 15:15:03","2654368","0","6","-1","","2017-05-23 12:08:54","2010-04-16 14:19:33",""
"10362409","Cannot Decrypt RSA encrypted Key","<p>Long story short, I'm using DES and I'm encrypting a password using RSA for key exchange, the password does not exceed 16 characters
the problem is when i encrypt the key, the encrypted size becomes too big for me to decrypt
here's my rsa encrypt and decrypt code:</p>

<p>Encrypt:--i've been trying the localpwd as ""asd""</p>

<pre><code>    byte[] plaintext = utf8.GetBytes(localpwd);
    byte[] ciphertext = rsaservice.Encrypt(plaintext, false);
    string cipherresult = Convert.ToBase64String(ciphertext);
</code></pre>

<p>then i print the encrypted key on the textbox and try decrypting</p>

<pre><code>    byte[] ciphertext = utf8.GetBytes(filetest.Text);
    byte[] plain = rsaservice.Decrypt(ciphertext, true);
    string plaintext = utf8.GetString(plain);
</code></pre>

<p>i get ""the data to be decrypted exceeds the maximum for this modulus of 256 bytes"".
i tried increasing the key size to be able to encrypt and decrypt larger key sizes, but increasing the key just increases the size of the encrypted data resulting in the same error
please help!!!</p>
","<pre><code>//byte[] ciphertext = utf8.GetBytes(filetest.Text);
  byte[] ciphertext = Convert.FromBase64String(filetest.Text);
</code></pre>
","4547","<c#><security><encryption><rsa><encryption-asymmetric>","3","6","1","2013-02-09 16:18:10","10362701","2","","445517","","2013-02-09 16:18:10","2012-04-28 09:49:28",""
"3355160","Client Side Encryption - Any recommendations / best practices - Point me in the right direction?","<p>We have a requirement to encrypt data client side to ensure a 'secure' channel exists between our client's browser and a vendor.  </p>

<p>Basic premise is:
Vendor generates a public / private keypair: VendorPub and VendorPriv</p>

<p>Our clients enter sensitive data.
On submit the javascript on the form encrypts the sensitive portions of the data, what gets submitted to our server is VendorPub(SensitiveData).</p>

<p>We submit that package to our vendor as VendorPub(SensitiveData), only they can make use of that data.</p>

<p>Irrespective of key lengths and approved algorithms (RSA and 4096 respectively), and of course the whole thing would be over a SSL connection...</p>

<p>It looks doable, but I haven't mocked it up yet... Any suggestions? Pitfalls? </p>

<p>Our development environment is Visual Studio 2k5/ 2k8 / ASP.net 2.0 or 3.0 </p>

<p>Thank you</p>
","<p>It's definitely doable; although it might be a bit sluggish.</p>

<p>Here's a RSA implementation in JS: <a href=""http://www.ohdave.com/rsa/"" rel=""nofollow noreferrer"">http://www.ohdave.com/rsa/</a></p>
","4379","<javascript><asp.net><client-side><encryption-asymmetric>","1","2","4","2010-07-30 19:34:56","3355350","0","1","","","","2010-07-28 16:35:20",""
"3355160","Client Side Encryption - Any recommendations / best practices - Point me in the right direction?","<p>We have a requirement to encrypt data client side to ensure a 'secure' channel exists between our client's browser and a vendor.  </p>

<p>Basic premise is:
Vendor generates a public / private keypair: VendorPub and VendorPriv</p>

<p>Our clients enter sensitive data.
On submit the javascript on the form encrypts the sensitive portions of the data, what gets submitted to our server is VendorPub(SensitiveData).</p>

<p>We submit that package to our vendor as VendorPub(SensitiveData), only they can make use of that data.</p>

<p>Irrespective of key lengths and approved algorithms (RSA and 4096 respectively), and of course the whole thing would be over a SSL connection...</p>

<p>It looks doable, but I haven't mocked it up yet... Any suggestions? Pitfalls? </p>

<p>Our development environment is Visual Studio 2k5/ 2k8 / ASP.net 2.0 or 3.0 </p>

<p>Thank you</p>
","<p>There seems to be little (if any) reason to do any of this if you're going to use an SSL connection (though I'd prefer TLS).</p>

<p>If you decide to do it anyway, the biggest pitfall with PK cryptography is a MITM attack -- i.e., you don't want to just accept the server's key and encrypt data with it. That will ensure that only the server can read the data, <em>but</em> if you haven't verified the identity of the server, you could be sending it to somebody else entirely. This is most of why 1) SSL/TLS connections are slow to set up, and 2) SSL/TLS libraries are big and complicated. Encryption is <em>much</em> easier than authentication.</p>

<p>There's no more reason to do this yourself than to do encryption yourself though -- SSL/TLS already do <em>both</em> authentication <em>and</em> encryption.</p>
","4379","<javascript><asp.net><client-side><encryption-asymmetric>","1","0","4","2010-07-30 19:34:56","3355350","0","1","","","","2010-07-28 16:35:20",""
"3355160","Client Side Encryption - Any recommendations / best practices - Point me in the right direction?","<p>We have a requirement to encrypt data client side to ensure a 'secure' channel exists between our client's browser and a vendor.  </p>

<p>Basic premise is:
Vendor generates a public / private keypair: VendorPub and VendorPriv</p>

<p>Our clients enter sensitive data.
On submit the javascript on the form encrypts the sensitive portions of the data, what gets submitted to our server is VendorPub(SensitiveData).</p>

<p>We submit that package to our vendor as VendorPub(SensitiveData), only they can make use of that data.</p>

<p>Irrespective of key lengths and approved algorithms (RSA and 4096 respectively), and of course the whole thing would be over a SSL connection...</p>

<p>It looks doable, but I haven't mocked it up yet... Any suggestions? Pitfalls? </p>

<p>Our development environment is Visual Studio 2k5/ 2k8 / ASP.net 2.0 or 3.0 </p>

<p>Thank you</p>
","<p>The other answers currently seem to have missed the point of this: ""We submit that package to our vendor as VendorPub(SensitiveData), only they can make use of that data"".  In other words, you are a relay who treats the data as a black box.</p>

<p>What you are describing is doable if the amount of data is not very large.  Remember, you can't keep the users waiting for your JavaScript to chug along.</p>

<p>RSA4096 is <em>ridiculously</em> huge, by the way.  2048 is high-grade at the moment and 3000-whatever is supposed to be good for 30+ years.  But, more power to ya.  A normal way to get around the public-key expense is to encrypt a symmetric (DSA) key using RSA - that way your encryption of the actual data is fast and the only slow part is decrypting the (shorter) key.  Asymmetric-key encryption is <strong>much</strong> slower than symmetric.</p>

<p>Whatever you decide to implement, make sure you get the encryption right in the JS code.</p>

<p>You should also note that this isn't really a way to protect the users from <em>you</em>; you control the web server, so you could send the users doctored JavaScript that delivers their private data to you with a key you control.  The users would be unlikely to notice.</p>
","4379","<javascript><asp.net><client-side><encryption-asymmetric>","1","3","4","2010-07-30 19:34:56","3355350","0","1","","","","2010-07-28 16:35:20",""
"3355160","Client Side Encryption - Any recommendations / best practices - Point me in the right direction?","<p>We have a requirement to encrypt data client side to ensure a 'secure' channel exists between our client's browser and a vendor.  </p>

<p>Basic premise is:
Vendor generates a public / private keypair: VendorPub and VendorPriv</p>

<p>Our clients enter sensitive data.
On submit the javascript on the form encrypts the sensitive portions of the data, what gets submitted to our server is VendorPub(SensitiveData).</p>

<p>We submit that package to our vendor as VendorPub(SensitiveData), only they can make use of that data.</p>

<p>Irrespective of key lengths and approved algorithms (RSA and 4096 respectively), and of course the whole thing would be over a SSL connection...</p>

<p>It looks doable, but I haven't mocked it up yet... Any suggestions? Pitfalls? </p>

<p>Our development environment is Visual Studio 2k5/ 2k8 / ASP.net 2.0 or 3.0 </p>

<p>Thank you</p>
","<p>Ok, so the end answer is:
It's doable, reasonably fast and reasonably secure.  However as this was a PCI requirement with the intent to de-scope our environment it was failed because we would still own the encryption method, IE the javascript that would do the encryption would be served from our system.</p>

<p>Thanks to everyone who chimed in.</p>

<p>Gary</p>
","4379","<javascript><asp.net><client-side><encryption-asymmetric>","1","0","4","2010-07-30 19:34:56","3355350","0","1","","","","2010-07-28 16:35:20",""
"11281350","Encrypt String in winrt c# and decrypt it in c# .net","<p>How one would encrypt a string using asymmetric encryption on WinRT Metro in C# and decrypt this in classic Windows, let's say in a webservice? </p>

<p>I want to use RsaPkcs1 algorithm and I can see that <code>CryptographicKey</code> class and <code>RSAParameters</code> class are not even near compatible.</p>

<p>How this could be accomplished?</p>
","<p>I have found the solution on how to export the keys from the <code>CryptographicKey</code> in a format that .net 4 can successfully use.<br/><br/>
<code>CryptographicKey</code> has 2 functions 1. <code>Export</code>  and 2. <code>ExportPublicKey</code>. I used the 1st function that exports the private key. This function has 2 parameters 1st is the type of export and 2nd the byte[] that will fill. <br/><br/>
If <code>CryptographicPrivateKeyBlobType.Capi1PrivateKey</code> is used, the blob that <code>Export</code> will produce is compatible with the WinCAPI that <code>RSACryptoServiceProvider</code> of .net 4 can import. </p>

<h3>WinRT</h3>

<pre><code>String str = ""String To Encrypt"";
IBuffer buf = CryptographicBuffer.ConvertStringToBinary(str,BinaryStringEncoding.Utf16BE);
String AsymmetricAlgName = Windows.Security.Cryptography.Core.AsymmetricAlgorithmNames.RsaPkcs1;
AsymmetricKeyAlgorithmProvider asym = AsymmetricKeyAlgorithmProvider.OpenAlgorithm(AsymmetricAlgName);
CryptographicKey key = asym.CreateKeyPair(512);
IBuffer enc = CryptographicEngine.Encrypt(key, buf, null);
byte[] encryptedbyteArr;
CryptographicBuffer.CopyToByteArray(enc, out encryptedbyteArr);
String encryptedBase64Str = Convert.ToBase64String(encryptedbyteArr);


//Export the private Key in WinCapi format

byte[] privatekeyBytes;
CryptographicBuffer.CopyToByteArray(key.Export(CryptographicPrivateKeyBlobType.Capi1PrivateKey), out privatekeyBytes);
String privatekeyBase64 = Convert.ToBase64String(privatekeyBytes);
</code></pre>

<p><code>encryptedBase64Str</code> now contains the encrypted string in Base64. And lets say that <code>encryptedBase64Str=""BwIAAACkAABSU0EyAAIAAAEAAQCFrMTqMU3T14zSUM5...""</code></p>

<h3>Web Service</h3>

<pre><code>RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
String privateKey64 = ""BwIAAACkAABSU0EyAAIAAAEAAQCFrMTqMU3T14zSUM5..."";
String EncryptedString = ""PbauDOjqMLD2P6WSmEw=="";
byte[] EncryptedDataBlob = Convert.FromBase64String(EncryptedString);
byte[] privateKeyBlob = Convert.FromBase64String(privateKey64);
byte[] decryptedBytes;
rsa.ImportCspBlob(privateKeyBlob);
decryptedBytes = rsa.Decrypt(EncryptedDataBlob, false);
String decryptedString =System.Text.Encoding.BigEndianUnicode.GetString(decryptedBytes);
</code></pre>

<p><br/>
<code>decryptedString</code> now contains the decrypted string that WinRT had.</p>
","4287","<c#><windows-runtime><encryption><encryption-asymmetric>","1","6","2","2013-01-10 17:13:48","11334311","0","2","458741","","2012-07-01 11:10:51","2012-07-01 10:53:17",""
"11281350","Encrypt String in winrt c# and decrypt it in c# .net","<p>How one would encrypt a string using asymmetric encryption on WinRT Metro in C# and decrypt this in classic Windows, let's say in a webservice? </p>

<p>I want to use RsaPkcs1 algorithm and I can see that <code>CryptographicKey</code> class and <code>RSAParameters</code> class are not even near compatible.</p>

<p>How this could be accomplished?</p>
","<p>You must use public key to decript the content.
Don't forget export public key in WinRt Version!</p>
","4287","<c#><windows-runtime><encryption><encryption-asymmetric>","1","0","2","2013-01-10 17:13:48","11334311","0","2","458741","","2012-07-01 11:10:51","2012-07-01 10:53:17",""
"2247697","Fast asymmetric cypher for C++ application","<p>I'm looking for a fast asymmetric cypher algorithm to be used in C++ program.
Our application accesses read-only data stored in archive (custom format, somewhat similar to tar), and I would like to prevent any modifications of that archive by asymmetrically encrypting archive index (I'm aware that this isn't a perfect solution and data can still be extracted and repacked using certain techniques).   </p>

<p><em>Some</em> individual files within archive are encrypted with symmetric cypher and encryption keys for them are stored within archive index(header). Which is why I want to encrypt archive header asymmetrically.</p>

<p>Cypher requirements:<br>
1) Algorithm implementation should be platform-independent.<br>
2) Algorithm should be either easy to implement myself or it should be available in library (with source code) that allows <em>static</em> linking with proprietary application, which means that GPL/LGPL/viral licenses cannot be used. MIT/BSD-licensed code, or public domain code is acceptable.<br>
3) If cypher is available in library, ideally it should have small memory footprint, and implementation should be compact. I would prefer to use a C/C++ library that implements only one cipher instead of full-blown all-purpose cipher collection.</p>

<p>Originally I wanted to use RSA, but it looks like it is simply too slow to be useful, and there aren't many alternatives.</p>

<p>So, any advice on what can I use?</p>
","<p>OpenSSL should do the job for you. It's open-source (apache license, so meets your license requirements).</p>

<p>It's widely used and well tested.</p>
","4285","<c++><encryption><encryption-asymmetric>","2","2","5","2016-04-13 06:04:17","2286076","2","2","271376","","2010-02-11 23:14:57","2010-02-11 21:05:42",""
"2247697","Fast asymmetric cypher for C++ application","<p>I'm looking for a fast asymmetric cypher algorithm to be used in C++ program.
Our application accesses read-only data stored in archive (custom format, somewhat similar to tar), and I would like to prevent any modifications of that archive by asymmetrically encrypting archive index (I'm aware that this isn't a perfect solution and data can still be extracted and repacked using certain techniques).   </p>

<p><em>Some</em> individual files within archive are encrypted with symmetric cypher and encryption keys for them are stored within archive index(header). Which is why I want to encrypt archive header asymmetrically.</p>

<p>Cypher requirements:<br>
1) Algorithm implementation should be platform-independent.<br>
2) Algorithm should be either easy to implement myself or it should be available in library (with source code) that allows <em>static</em> linking with proprietary application, which means that GPL/LGPL/viral licenses cannot be used. MIT/BSD-licensed code, or public domain code is acceptable.<br>
3) If cypher is available in library, ideally it should have small memory footprint, and implementation should be compact. I would prefer to use a C/C++ library that implements only one cipher instead of full-blown all-purpose cipher collection.</p>

<p>Originally I wanted to use RSA, but it looks like it is simply too slow to be useful, and there aren't many alternatives.</p>

<p>So, any advice on what can I use?</p>
","<p>Use a custom RSA to sign the archive.  Store the public key in the application and keep the private key in house.  Now anyone could modify the read only archive, but your application would refuse to load the modified archive.</p>
","4285","<c++><encryption><encryption-asymmetric>","2","2","5","2016-04-13 06:04:17","2286076","2","2","271376","","2010-02-11 23:14:57","2010-02-11 21:05:42",""
"2247697","Fast asymmetric cypher for C++ application","<p>I'm looking for a fast asymmetric cypher algorithm to be used in C++ program.
Our application accesses read-only data stored in archive (custom format, somewhat similar to tar), and I would like to prevent any modifications of that archive by asymmetrically encrypting archive index (I'm aware that this isn't a perfect solution and data can still be extracted and repacked using certain techniques).   </p>

<p><em>Some</em> individual files within archive are encrypted with symmetric cypher and encryption keys for them are stored within archive index(header). Which is why I want to encrypt archive header asymmetrically.</p>

<p>Cypher requirements:<br>
1) Algorithm implementation should be platform-independent.<br>
2) Algorithm should be either easy to implement myself or it should be available in library (with source code) that allows <em>static</em> linking with proprietary application, which means that GPL/LGPL/viral licenses cannot be used. MIT/BSD-licensed code, or public domain code is acceptable.<br>
3) If cypher is available in library, ideally it should have small memory footprint, and implementation should be compact. I would prefer to use a C/C++ library that implements only one cipher instead of full-blown all-purpose cipher collection.</p>

<p>Originally I wanted to use RSA, but it looks like it is simply too slow to be useful, and there aren't many alternatives.</p>

<p>So, any advice on what can I use?</p>
","<p>How about MD5?</p>

<p>Yes I am aware that MD5 has been 'broken; - but most practical applications this is irrelevant.<br>
Especially if the modified data would also have to be valid in the particular data format as well as have the correct MD5</p>

<p>EDIT:<br>
MD5 is appropriate if you want to just ensure that data stored can't be changed (or at least you can detect it) but it doesn't hide the data. Note that if you must have the key in your app alongside the data it can always be extracted. There are techniques for hiding the key - a popular one is simply to put it inside a static resource such as an icon that can be linked easily.</p>
","4285","<c++><encryption><encryption-asymmetric>","2","1","5","2016-04-13 06:04:17","2286076","2","2","271376","","2010-02-11 23:14:57","2010-02-11 21:05:42",""
"2247697","Fast asymmetric cypher for C++ application","<p>I'm looking for a fast asymmetric cypher algorithm to be used in C++ program.
Our application accesses read-only data stored in archive (custom format, somewhat similar to tar), and I would like to prevent any modifications of that archive by asymmetrically encrypting archive index (I'm aware that this isn't a perfect solution and data can still be extracted and repacked using certain techniques).   </p>

<p><em>Some</em> individual files within archive are encrypted with symmetric cypher and encryption keys for them are stored within archive index(header). Which is why I want to encrypt archive header asymmetrically.</p>

<p>Cypher requirements:<br>
1) Algorithm implementation should be platform-independent.<br>
2) Algorithm should be either easy to implement myself or it should be available in library (with source code) that allows <em>static</em> linking with proprietary application, which means that GPL/LGPL/viral licenses cannot be used. MIT/BSD-licensed code, or public domain code is acceptable.<br>
3) If cypher is available in library, ideally it should have small memory footprint, and implementation should be compact. I would prefer to use a C/C++ library that implements only one cipher instead of full-blown all-purpose cipher collection.</p>

<p>Originally I wanted to use RSA, but it looks like it is simply too slow to be useful, and there aren't many alternatives.</p>

<p>So, any advice on what can I use?</p>
","<p>Check out Curve25519, which is elliptic curve crytpography implemented efficiently, and around patent problems.</p>

<p>It meets all of your requirements. <a href=""http://cr.yp.to/ecdh.html"" rel=""nofollow noreferrer"">See Here</a>.</p>

<p>You can use it to encrypt, or to simply sign. </p>

<h3>As a side note:</h3>

<p>For integrity checking, a MAC should suffice unless you really need assymetric encryption.</p>
","4285","<c++><encryption><encryption-asymmetric>","2","2","5","2016-04-13 06:04:17","2286076","2","2","271376","","2010-02-11 23:14:57","2010-02-11 21:05:42",""
"2247697","Fast asymmetric cypher for C++ application","<p>I'm looking for a fast asymmetric cypher algorithm to be used in C++ program.
Our application accesses read-only data stored in archive (custom format, somewhat similar to tar), and I would like to prevent any modifications of that archive by asymmetrically encrypting archive index (I'm aware that this isn't a perfect solution and data can still be extracted and repacked using certain techniques).   </p>

<p><em>Some</em> individual files within archive are encrypted with symmetric cypher and encryption keys for them are stored within archive index(header). Which is why I want to encrypt archive header asymmetrically.</p>

<p>Cypher requirements:<br>
1) Algorithm implementation should be platform-independent.<br>
2) Algorithm should be either easy to implement myself or it should be available in library (with source code) that allows <em>static</em> linking with proprietary application, which means that GPL/LGPL/viral licenses cannot be used. MIT/BSD-licensed code, or public domain code is acceptable.<br>
3) If cypher is available in library, ideally it should have small memory footprint, and implementation should be compact. I would prefer to use a C/C++ library that implements only one cipher instead of full-blown all-purpose cipher collection.</p>

<p>Originally I wanted to use RSA, but it looks like it is simply too slow to be useful, and there aren't many alternatives.</p>

<p>So, any advice on what can I use?</p>
","<p>Okay, I've found what I've been looking for, and I think it is better than OpenSSL (for my purposes, at least).</p>

<p>There are two libraries:<br>
<a href=""http://www.libtom.org/LibTomCrypt/"" rel=""nofollow noreferrer"">libtomcrypt</a>, which implements several cyphers (including RSA), and <a href=""http://www.libtom.org/LibTomMath/"" rel=""nofollow noreferrer"">libtommath</a>, that implements bignum arithmetics. Both libraries are in public domain, easy to hack/modify and have simpler programming interface than OpenSSL, and (much) better documentation than OpenSSL.<br>
<a href=""http://www.efgh.com/software/rsa.htm"" rel=""nofollow noreferrer"">Unlike older public domain rsa code I found before</a>, libtomcrypt can generate new keys very quickly, can import OpenSSL-generated keys, and supports padding. Another good thing about libtomcrypt is that it doesn't have extra dependencies (OpenSSL for windows wants gdi32, for example) and is smaller than OpenSSL.</p>

<p>I've decided to use RSA for encryption, after all, because (to me it looks like) there are no truly asymmetric alternatives. It looks like most of the other ciphers (elgamal, elliptic curves) are more suitable for symmetric encryption where session key is being encrypted asymmetrically. Which isn't suitable for me. Such ciphers are suitable for network communications/session keys, but it wouldn't be good to use that for static unchanging data on disk.</p>

<p>As for ""RSA being slow"", I've changed archive format a bit, so now only small chunk of data is being asymmetrically encrypted. Failure to decrypt this chunk will make reading archive index completely very difficult if not impossible. Also, I must admit that slowness of RSA was partially a wrong impression given by <a href=""http://www.efgh.com/software/rsa.htm"" rel=""nofollow noreferrer"">older code</a> I've tried to use before. </p>

<p>Which means, question solved. Solution is RSA + libtomcrypt. RSA - because there aren't many alternatives to RSA, and libtomcrypt - because it is small and in public domain. </p>
","4285","<c++><encryption><encryption-asymmetric>","2","4","5","2016-04-13 06:04:17","2286076","2","2","271376","","2010-02-11 23:14:57","2010-02-11 21:05:42",""
"29257451","Sign and encrypt a file using S/MIME","<p>I am currently trying to adapt a few scripts we use to sign an encrypt/decrypt xml files using OpenSSL and S/MIME using Java and BouncyCastle.</p>

<p>The command to sign and encrypt our file:</p>

<pre><code>openssl smime -sign -signer Pub1.crt -inkey Priv.key -in foo.xml | openssl smime -encrypt -out foo.xml.smime Pub2.crt Pub1.crt
</code></pre>

<p>This generates a signed and encrypted smime-file containing our xml file. Currently this happens using a set of shell scripts under linux using the OpenSSL library. In the future we want to integrate this process into our Java application. </p>

<p>I've found out that this should be possible using the BouncyCastle library   (see <a href=""https://stackoverflow.com/questions/12299884/bouncycastle-encrypt-mail-with-smime-and-x-509"">this post</a>). The answer there provides two Java classes showing how to sign and encrypt an email using BouncyCastle and S/MIME. Comparing this to our OpenSSL command it seems that many of the things needed to sign an encrypt an email is not needed in our approach.</p>

<p>Some more meta information from our generated files:</p>

<p><strong>Signed file</strong></p>

<pre><code>MIME-Version: 1.0
Content-Type: multipart/signed; protocol=""application/x-pkcs7-signature""; micalg=""sha-256""; boundary=""----709621D94E0377688356FAAE5A2C1321""
</code></pre>

<p><strong>Encrypted file</strong></p>

<pre><code>MIME-Version: 1.0
Content-Disposition: attachment; filename=""smime.p7m""
Content-Type: application/x-pkcs7-mime; smime-type=enveloped-data; name=""smime.p7m""
Content-Transfer-Encoding: base64
</code></pre>

<p>Is it even possible to sign and encrypt a simple file in the way we did it using OpenSSL? My current knowledge of signing and de/encryption is not very high at the moment so forgive me for not providing code samples. I guess what I am looking for is more input into what I need to do and maybe some expertise from people who have already done this. I hope this is the right place to ask this. If not, please correct me.</p>
","<p>I had a similar question as you but I managed to solve it. I have to warn you, my knowledge about signing and encryption isn't that high either. But this code seemed to work for me. </p>

<p>In my case I used a personalsign pro 3 certificate from globalsign, Previously I just called openssl from within java. But the I wanted to clean my code and decided to use bouncy castle instead. </p>

<pre><code> public static boolean signAllFiles(List&lt;File&gt; files) {
    Boolean signingSucceeded = true;
    KeyStore ks = null;
    char[] password = null;

    Security.addProvider(new BouncyCastleProvider());
    try {
        ks = KeyStore.getInstance(""PKCS12"");
        password = ""yourpass"".toCharArray();
        ks.load(new FileInputStream(""full/path/to/your/original/certificate.pfx""), password);
    } catch (Exception e) {
        signingSucceeded = false;
    }

    // Get privatekey and certificate
    X509Certificate cert = null;
    PrivateKey privatekey = null;

    try {
        Enumeration&lt;String&gt; en = ks.aliases();
        String ALIAS = """";
        Vector&lt;Object&gt; vectaliases = new Vector&lt;Object&gt;();

        while (en.hasMoreElements())
            vectaliases.add(en.nextElement());
        String[] aliases = (String[])(vectaliases.toArray(new String[0]));
        for (int i = 0; i &lt; aliases.length; i++)
            if (ks.isKeyEntry(aliases[i]))
            {
                ALIAS = aliases[i];
                break;
            }
        privatekey = (PrivateKey)ks.getKey(ALIAS, password);
        cert = (X509Certificate)ks.getCertificate(ALIAS);
        // publickey = ks.getCertificate(ALIAS).getPublicKey();
    } catch (Exception e) {
        signingSucceeded = false;
    }

    for (File source : files) {
        String fileName = ""the/path/andNameOfYourOutputFile"";

        try {
            // Reading files which need to be signed
            File fileToSign = source;
            byte[] buffer = new byte[(int)fileToSign.length()];
            DataInputStream in = new DataInputStream(new FileInputStream(fileToSign));
            in.readFully(buffer);
            in.close();

            // Generate signature
            ArrayList&lt;X509Certificate&gt; certList = new ArrayList&lt;X509Certificate&gt;();
            certList.add(cert);
            Store&lt;?&gt; certs = new JcaCertStore(certList);
            CMSSignedDataGenerator signGen = new CMSSignedDataGenerator();

            ContentSigner sha1signer = new JcaContentSignerBuilder(""SHA1withRSA"").setProvider(""BC"").build(
                    privatekey);
            signGen.addSignerInfoGenerator(new JcaSignerInfoGeneratorBuilder(
                    new JcaDigestCalculatorProviderBuilder().build()).build(sha1signer, cert));
            signGen.addCertificates(certs);
            CMSTypedData content = new CMSProcessableByteArray(buffer);
            CMSSignedData signedData = signGen.generate(content, false);
            byte[] signeddata = signedData.getEncoded();

            // Write signature to Fi File
            FileOutputStream envfos = new FileOutputStream(fileName);
            byte[] outputString = Base64.encode(signeddata);
            int fullLines = (int)Math.floor(outputString.length / 64);
            for (int i = 0; i &lt; fullLines; i++) {
                envfos.write(outputString, i * 64, 64);
                envfos.write(""\r\n"".getBytes());
            }

            envfos.write(outputString, fullLines * 64, outputString.length % 64);
            envfos.close();
        } catch (Exception e) {
            signingSucceeded = false;
        }
    }
    return signingSucceeded;
}
</code></pre>

<p>This is only the code to sign a file, I hope it helps.</p>
","4095","<java><openssl><bouncycastle><encryption-asymmetric><smime>","1","3","1","2017-05-31 19:36:58","","1","0","-1","","2017-05-23 10:27:21","2015-03-25 13:43:52",""
"18871091","RSA asymmentic encryption exception","<p>I using the following code to generate the public and private key for RSA encryption</p>

<pre><code>  public static string RSA_Decrypt(string encryptedText, string privateKey)
        {
            CspParameters cspParams = new CspParameters { ProviderType = 1 };
            RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(cspParams);

            rsaProvider.ImportCspBlob(Convert.FromBase64String(privateKey));

            var buffer = Convert.FromBase64String(encryptedText);

            byte[] plainBytes = rsaProvider.Decrypt(buffer, false);

            string plainText = Encoding.UTF8.GetString(plainBytes, 0, plainBytes.Length);

            return plainText;
        }

        public static string RSA_Encrypt(string data, string publicKey)
        {
            CspParameters cspParams = new CspParameters { ProviderType = 1 };
            RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(cspParams);

            rsaProvider.ImportCspBlob(Convert.FromBase64String(publicKey));

            byte[] plainBytes = Encoding.UTF8.GetBytes(data);
            byte[] encryptedBytes = rsaProvider.Encrypt(plainBytes, false);

            return Convert.ToBase64String(encryptedBytes);
        }

        public static Tuple&lt;string, string&gt; CreateKeyPair()
        {
            CspParameters cspParams = new CspParameters { ProviderType = 1 /* PROV_RSA_FULL */ };

            RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(2048, cspParams);

            string publicKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(false));
            string privateKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(true));

            return new Tuple&lt;string, string&gt;(privateKey, publicKey);
        }
</code></pre>

<p>the decrypt function return this exception exception</p>

<blockquote>
  <p>""key does not exist""</p>
</blockquote>

<p>please advice me to fix this issue. </p>
","<p>This code (using the methods you provided) works fine:</p>

<pre><code>static void Main()
{
    var keyPair = CreateKeyPair();
    var encryptedText = Encrypt(keyPair.Item2, ""test data"");
    var decryptedText = Decrypt(keyPair.Item1, encryptedText);
    Console.WriteLine(""Encrypted text: {0}"", encryptedText);
    Console.WriteLine(""Decrypted text: {0}"", decryptedText);
}

public static string RSA_Decrypt(string encryptedText, string privateKey)
{
    CspParameters cspParams = new CspParameters { ProviderType = 1 };
    RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(cspParams);

    rsaProvider.ImportCspBlob(Convert.FromBase64String(privateKey));

    var buffer = Convert.FromBase64String(encryptedText);

    byte[] plainBytes = rsaProvider.Decrypt(buffer, false);

    string plainText = Encoding.UTF8.GetString(plainBytes, 0, plainBytes.Length);

    return plainText;
}

public static string RSA_Encrypt(string data, string publicKey)
{
    CspParameters cspParams = new CspParameters { ProviderType = 1 };
    RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(cspParams);

    rsaProvider.ImportCspBlob(Convert.FromBase64String(publicKey));

    byte[] plainBytes = Encoding.UTF8.GetBytes(data);
    byte[] encryptedBytes = rsaProvider.Encrypt(plainBytes, false);

    return Convert.ToBase64String(encryptedBytes);
}

public static Tuple&lt;string, string&gt; CreateKeyPair()
{
    CspParameters cspParams = new CspParameters { ProviderType = 1 /* PROV_RSA_FULL */ };

    RSACryptoServiceProvider rsaProvider = new RSACryptoServiceProvider(2048, cspParams);

    string publicKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(false));
    string privateKey = Convert.ToBase64String(rsaProvider.ExportCspBlob(true));

    return new Tuple&lt;string, string&gt;(privateKey, publicKey);
}
</code></pre>
","4009","<c#><encryption><rsa><public-key-encryption><encryption-asymmetric>","0","1","1","2017-04-26 10:55:32","18872346","5","2","1019724","","2013-09-18 12:45:18","2013-09-18 11:31:37",""
"3265351","BouncyCastle create PKCS 7 Encrypted File? C#","<p>I am trying to use BouncyCastle to encrypt a file using the PKCS 7 file standard. Here is the code I have which outputs a p7m file. When I go to decrypt the file (using Entrust) I am prompted for my key store password, so it knows the file was encrypted for me using AES 128, but it cannot decrypt the body of the file. Something has to be going wrong on the encrypt.</p>

<pre><code>byte[] fileContent = readFile(filename);

FileStream outStream = null;
Stream cryptoStream = null;
BinaryWriter binWriter = null;

try
{
    CmsEnvelopedDataStreamGenerator dataGenerator = new CmsEnvelopedDataStreamGenerator();
    dataGenerator.AddKeyTransRecipient(cert); //cert is the user's x509cert that i am encrypting for
    outStream = new FileStream(filename + "".p7m"", FileMode.Create);
    cryptoStream = dataGenerator.Open(outStream, CmsEnvelopedGenerator.Aes128Cbc);
    binWriter = new BinaryWriter(cryptoStream);

    binWriter.Write(fileContent);
}
</code></pre>

<p>And when i try and decrypt the file using BouncyCastle I get this error when i pass the file contents to a CMSEnveloped Object: </p>

<pre><code>IOException converting stream to byte array: Attempted to read past the end of the stream.
</code></pre>

<p>Any ideas whats going on here?</p>
","<p>I used the EnvelopedCMS class to accomplish this.</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/bb924575(VS.90).aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/bb924575(VS.90).aspx</a></p>
","3969","<c#><bouncycastle><encryption-asymmetric><pkcs#7>","1","0","1","2019-08-26 21:53:50","3514901","0","","","","","2010-07-16 13:34:31",""
"7321913","iOS/Objective C: Using SecKeyWrapper to encrypt/decrypt String/Data","<p>I want to do some RSA encryption on iPhone and after a bit of reading through iOS Developer library I found the CryptoExercise example code and its class ""<a href=""http://developer.apple.com/library/ios/#samplecode/CryptoExercise/Listings/Classes_SecKeyWrapper_m.html"" rel=""nofollow"">SecKeyWrapper</a>""...</p>

<p>Can anyone tell me, how to encrypt/decrypt an NSString or NSData with a generated key pair from this class..</p>

<p>I've read through the code, but I didn't understand everything...</p>

<p>Thank you in advance..</p>
","","3954","<iphone><ios><encryption><rsa><encryption-asymmetric>","3","","0","2011-12-08 22:10:49","","1","1","929193","","2011-09-06 20:36:51","2011-09-06 14:55:29",""
"11106918","Bouncy Castle PGP Decryption Issue","<p>I've had a application using Bouncy Castle for PGP decryption which has run without any issues for the past 8 months or so, and the past 2 days all of a sudden an issue has come up where the GetDataStream method is throwing an exception:</p>

<p>Exception Message: ""error setting asymmetric cipher"".</p>

<p>Inner Exception Message : ""Not an RSA key"".</p>

<pre><code>private static PgpObjectFactory getClearDataStream(PgpPrivateKey privateKey, PgpPublicKeyEncryptedData publicKeyED)
{
    // Exception throws here.
    Stream clearStream = publicKeyED.GetDataStream(privateKey);

    PgpObjectFactory clearFactory = new PgpObjectFactory(clearStream);
    return clearFactory;
}
</code></pre>

<p>The key hasn't expired, it has no expiration date:</p>

<p><img src=""https://i.stack.imgur.com/t0vA5.png"" alt=""enter image description here""></p>

<p>I haven't made any changes to the application, I haven't touched the keys, so I can't quite understand why an issue has come up out of the blue. Any ideas? I can also manually decrypt the files using Kleopatra using the same keys that I load in the application.</p>

<p><strong>Update 1</strong> - I downloaded the free trial for <a href=""http://www.didisoft.com/net-openpgp/"" rel=""nofollow noreferrer"">OpenPGP Library for .NET</a>, which looks to use BouncyCastle also, and I have no issues decrypting the files using the same key. For some reason, my implementation of decryption using BouncyCastle that has worked for several months stopped working for some reason that I have not been able to identify yet.</p>

<p><strong>Update 2</strong> - I pulled files from last week that worked, and I've also downloaded the source code of BouncyCastle in order that I can step through and debug to see where the exception is throwing and how the variables differ between a file that works and a file that doesn't work. The exception is being thrown at the beginning of the GetDataStream method of the PgpPublicKeyEncryptedData class:</p>

<pre><code>byte[] plain = fetchSymmetricKeyData(privKey);
</code></pre>

<p>When I step into this method, for files that I can decrypt without any problem, I've noticed that the keyData.Algorithm variable is set to ""ElGamalEncrypt"", whereas for files that the exception throws, the file keyData.Algortithm is set to ""RsaGeneral"". Why would these differ? Did the company sending me the files change their encryption method? And is this encryption method not properly supported by BouncyCastle?</p>

<pre><code>private byte[] fetchSymmetricKeyData(PgpPrivateKey privKey)
{
    IBufferedCipher c1 = GetKeyCipher(keyData.Algorithm);

    try
    {
        c1.Init(false, privKey.Key);
    }
    catch (InvalidKeyException e)
    {
        throw new PgpException(""error setting asymmetric cipher"", e);
    }
</code></pre>

<p>Also, not sure if this is related, the certificate type of our key is DSA.</p>

<p><img src=""https://i.stack.imgur.com/QteBn.png"" alt=""enter image description here""></p>

<p><strong>Update 3</strong> - I've been unable to figure out how to resolve the issue as of yet given the current keys. I generated new keys (type DSA) yesterday, and with the new keys the issue has been resolved.</p>

<p><strong>Update 4</strong> - This issue has just come up again, with the new key that worked in my last update. Once again, the keyData.Algorithm within the PgpPublicKeyEncryptedData class is being see to ""RsaGeneral"" instead of ""ElGamalEncrypt"" now. Why would the Algorithm property change? Is the person encrypting the file changing something?</p>
","<p>This could be important (Source: <a href=""http://www.opensourcejavaphp.net/csharp/itextsharp/PgpPublicKeyEncryptedData.cs.html"" rel=""nofollow"">http://www.opensourcejavaphp.net/csharp/itextsharp/PgpPublicKeyEncryptedData.cs.html</a>) : </p>

<p>It explains the value of your keyData.Algorithm being different, but the why I am still unsure of.  It is most likely the input file that is the case. It could be different (client using a different key?)</p>

<pre><code>private static IBufferedCipher GetKeyCipher(
            PublicKeyAlgorithmTag algorithm)
        {
            try
            {
                switch (algorithm)
                {
                    case PublicKeyAlgorithmTag.RsaEncrypt:
                    case PublicKeyAlgorithmTag.RsaGeneral:
                        return CipherUtilities.GetCipher(""RSA//PKCS1Padding"");
                    case PublicKeyAlgorithmTag.ElGamalEncrypt:
                    case PublicKeyAlgorithmTag.ElGamalGeneral:
                        return CipherUtilities.GetCipher(""ElGamal/ECB/PKCS1Padding"");
                    default:
                        throw new PgpException(""unknown asymmetric algorithm: "" + algorithm);
                }
            }
            catch (PgpException e)
            {
                throw e;
            }
            catch (Exception e)
            {
                throw new PgpException(""Exception creating cipher"", e);
            }
        }
</code></pre>
","3921","<c#><encryption><bouncycastle><pgp><encryption-asymmetric>","19","1","2","2012-12-02 09:59:18","","6","2","700372","","2012-07-09 19:03:54","2012-06-19 18:17:02",""
"11106918","Bouncy Castle PGP Decryption Issue","<p>I've had a application using Bouncy Castle for PGP decryption which has run without any issues for the past 8 months or so, and the past 2 days all of a sudden an issue has come up where the GetDataStream method is throwing an exception:</p>

<p>Exception Message: ""error setting asymmetric cipher"".</p>

<p>Inner Exception Message : ""Not an RSA key"".</p>

<pre><code>private static PgpObjectFactory getClearDataStream(PgpPrivateKey privateKey, PgpPublicKeyEncryptedData publicKeyED)
{
    // Exception throws here.
    Stream clearStream = publicKeyED.GetDataStream(privateKey);

    PgpObjectFactory clearFactory = new PgpObjectFactory(clearStream);
    return clearFactory;
}
</code></pre>

<p>The key hasn't expired, it has no expiration date:</p>

<p><img src=""https://i.stack.imgur.com/t0vA5.png"" alt=""enter image description here""></p>

<p>I haven't made any changes to the application, I haven't touched the keys, so I can't quite understand why an issue has come up out of the blue. Any ideas? I can also manually decrypt the files using Kleopatra using the same keys that I load in the application.</p>

<p><strong>Update 1</strong> - I downloaded the free trial for <a href=""http://www.didisoft.com/net-openpgp/"" rel=""nofollow noreferrer"">OpenPGP Library for .NET</a>, which looks to use BouncyCastle also, and I have no issues decrypting the files using the same key. For some reason, my implementation of decryption using BouncyCastle that has worked for several months stopped working for some reason that I have not been able to identify yet.</p>

<p><strong>Update 2</strong> - I pulled files from last week that worked, and I've also downloaded the source code of BouncyCastle in order that I can step through and debug to see where the exception is throwing and how the variables differ between a file that works and a file that doesn't work. The exception is being thrown at the beginning of the GetDataStream method of the PgpPublicKeyEncryptedData class:</p>

<pre><code>byte[] plain = fetchSymmetricKeyData(privKey);
</code></pre>

<p>When I step into this method, for files that I can decrypt without any problem, I've noticed that the keyData.Algorithm variable is set to ""ElGamalEncrypt"", whereas for files that the exception throws, the file keyData.Algortithm is set to ""RsaGeneral"". Why would these differ? Did the company sending me the files change their encryption method? And is this encryption method not properly supported by BouncyCastle?</p>

<pre><code>private byte[] fetchSymmetricKeyData(PgpPrivateKey privKey)
{
    IBufferedCipher c1 = GetKeyCipher(keyData.Algorithm);

    try
    {
        c1.Init(false, privKey.Key);
    }
    catch (InvalidKeyException e)
    {
        throw new PgpException(""error setting asymmetric cipher"", e);
    }
</code></pre>

<p>Also, not sure if this is related, the certificate type of our key is DSA.</p>

<p><img src=""https://i.stack.imgur.com/QteBn.png"" alt=""enter image description here""></p>

<p><strong>Update 3</strong> - I've been unable to figure out how to resolve the issue as of yet given the current keys. I generated new keys (type DSA) yesterday, and with the new keys the issue has been resolved.</p>

<p><strong>Update 4</strong> - This issue has just come up again, with the new key that worked in my last update. Once again, the keyData.Algorithm within the PgpPublicKeyEncryptedData class is being see to ""RsaGeneral"" instead of ""ElGamalEncrypt"" now. Why would the Algorithm property change? Is the person encrypting the file changing something?</p>
","<p>Looks like another party is encrypting to other/different keys.
Probably your keyring contains RSA key as well, but BouncyCastle uses only the first (???).
Using gpg, you can check the contents of your encrypted file by issuing 
gpg --list-packets YourEncryptedFile.pgp</p>

<p>After that apply the same command to 'good' file, and to your keyrings, and compare key identifiers to which file is encrypted.
Since you are using DSA keys, file should be encrypted to ElGamal subkey.</p>
","3921","<c#><encryption><bouncycastle><pgp><encryption-asymmetric>","19","0","2","2012-12-02 09:59:18","","6","2","700372","","2012-07-09 19:03:54","2012-06-19 18:17:02",""
"5049402","Key Size in RSA C# is not changing !","<p>I am generating key pair and store them in xml file using</p>

<pre><code>ToXmlString(true);
</code></pre>

<p>I need to set the key size to 2048
according to the MSDN the only place to do this is from the constructor of the RSACryptoServiceProvider</p>

<pre><code>    private void AssignParameter(ProviderType providerType)
    {
        CspParameters cspParams;

        cspParams = new CspParameters((int)providerType);
        cspParams.KeyContainerName = RSAEncryption.containerName;
        cspParams.Flags = CspProviderFlags.UseMachineKeyStore;
        cspParams.ProviderName = ""Microsoft Strong Cryptographic Provider"";
        cspParams.KeyNumber = (int)KeyNumber.Exchange;

        this.rsa = new RSACryptoServiceProvider(2048, cspParams);
    }
</code></pre>

<p>when I check the key size using</p>

<pre><code>int x = this.rsa.KeySize;
</code></pre>

<p>I always get 1024
so whats the wrong here??</p>
","<p>I've seen this before, try changing the container name or try </p>

<pre><code>using (this.rsa = new RSACryptoServiceProvider(2048, cspParams)) 
{

}
</code></pre>

<p>or <code>this.rsa.Clear();</code> after you are done with it.</p>

<p>If you already have a container with the same name it will re-use the container I believe.</p>
","3904","<c#><rsa><encryption-asymmetric><private-key>","3","3","2","2016-03-27 16:00:52","","3","1","","","","2011-02-19 07:01:39",""
"5049402","Key Size in RSA C# is not changing !","<p>I am generating key pair and store them in xml file using</p>

<pre><code>ToXmlString(true);
</code></pre>

<p>I need to set the key size to 2048
according to the MSDN the only place to do this is from the constructor of the RSACryptoServiceProvider</p>

<pre><code>    private void AssignParameter(ProviderType providerType)
    {
        CspParameters cspParams;

        cspParams = new CspParameters((int)providerType);
        cspParams.KeyContainerName = RSAEncryption.containerName;
        cspParams.Flags = CspProviderFlags.UseMachineKeyStore;
        cspParams.ProviderName = ""Microsoft Strong Cryptographic Provider"";
        cspParams.KeyNumber = (int)KeyNumber.Exchange;

        this.rsa = new RSACryptoServiceProvider(2048, cspParams);
    }
</code></pre>

<p>when I check the key size using</p>

<pre><code>int x = this.rsa.KeySize;
</code></pre>

<p>I always get 1024
so whats the wrong here??</p>
","<p>You need first to clear the existing container like this:</p>

<pre><code>rsa.PersistKeyInCsp = false;
rsa.Clear();
</code></pre>

<p>Then it should work with you.
Don't forget to set:</p>

<pre><code>rsa.PersistKeyInCsp = true;
</code></pre>
","3904","<c#><rsa><encryption-asymmetric><private-key>","3","0","2","2016-03-27 16:00:52","","3","1","","","","2011-02-19 07:01:39",""
"18086212","cakephp : how can i store a encrypted data into db and then decrypt it through key","<p>i am working on a Cakephp 2.3 I'm trying to encrypt my data which i am storing into db, so I searched for a way to do this. I found this <a href=""http://bakery.cakephp.org/articles/utoxin/2009/08/01/cryptable-behavior"" rel=""nofollow"">http://bakery.cakephp.org/articles/utoxin/2009/08/01/cryptable-behaviore</a></p>

<p>i dont know its the best behviour or not or if some one has the better behavior then please suggest me .. </p>

<p>so the problem here is i have read all the details in the link but still i cant get to know that how can i save my fields encrypted into db </p>

<p>for example i have a function in controller which is saving data </p>

<pre><code>  $this-&gt;Messages-&gt;save($this-&gt;request-&gt;data);
</code></pre>

<p>how can i save this data in encrypted in db</p>

<p>and then my <strong>modal</strong></p>

<pre><code> public function getAllMessages($id){

    return  $this-&gt;find('all',array(
        'order'=&gt; array( 'idTextMessage DESC'),
        'conditions' =&gt; array('User_id' =&gt; $id)));
}
</code></pre>

<p>how can i decrypt this data </p>

<p>i have done this but didnt work </p>

<pre><code>class Message extends AppModel{
public $useTable = 'textmessage';

public $actsAs = array( 
    'Cryptable' =&gt; array( 

        'fields' =&gt; array( 
            'mobileNo',
             'body' 
        ) 
    ) 
);
</code></pre>
","<p>I haven't used that plugin, but it's from 2009, so it's pretty old now. I wouldn't put too much faith in it.</p>

<p>It's easy to decrypt/encrypt using Cake's <code>Security::rijndael</code>, without using a plugin (note that the <a href=""http://au1.php.net/mcrypt"" rel=""noreferrer"">mcrypt php extension</a> will need to be installed - but it may well be installed already).</p>

<p>First, in your model, add an array of the fields you want encrypted:</p>

<pre><code>public $encryptedFields = array('mobile', 'body');
</code></pre>

<p>Then, implement a beforeSave like this:</p>

<pre><code>public function beforeSave($options = array()) {
    foreach($this-&gt;encryptedFields as $fieldName){
        if(!empty($this-&gt;data[$this-&gt;alias][$fieldName])){
            $this-&gt;data[$this-&gt;alias][$fieldName] = Security::rijndael($this-&gt;data[$this-&gt;alias][$fieldName], Configure::read('Security.key'), 'encrypt');
        }
    }
    return true;
}
</code></pre>

<p>Your afterFind method should be pretty much the same, except it should decrypt rather than encrypt:</p>

<pre><code>public function afterFind($results = array()) {
    foreach($this-&gt;encryptedFields as $fieldName){
        if(!empty($results[$this-&gt;alias][$fieldName])){
            $results[$this-&gt;alias][$fieldName] = Security::rijndael($results[$this-&gt;alias][$fieldName], Configure::read('Security.key'), 'decrypt');
        }
    }
    return $results;
}
</code></pre>

<p>Note I haven't tested all of that code - it's hacked together from bits and pieces in one of my own apps. But it should put you on the right track.</p>
","3828","<cakephp><encryption><cakephp-2.0><cakephp-2.1><encryption-asymmetric>","1","7","2","2013-08-08 07:50:55","18102757","2","1","","","","2013-08-06 17:02:00",""
"18086212","cakephp : how can i store a encrypted data into db and then decrypt it through key","<p>i am working on a Cakephp 2.3 I'm trying to encrypt my data which i am storing into db, so I searched for a way to do this. I found this <a href=""http://bakery.cakephp.org/articles/utoxin/2009/08/01/cryptable-behavior"" rel=""nofollow"">http://bakery.cakephp.org/articles/utoxin/2009/08/01/cryptable-behaviore</a></p>

<p>i dont know its the best behviour or not or if some one has the better behavior then please suggest me .. </p>

<p>so the problem here is i have read all the details in the link but still i cant get to know that how can i save my fields encrypted into db </p>

<p>for example i have a function in controller which is saving data </p>

<pre><code>  $this-&gt;Messages-&gt;save($this-&gt;request-&gt;data);
</code></pre>

<p>how can i save this data in encrypted in db</p>

<p>and then my <strong>modal</strong></p>

<pre><code> public function getAllMessages($id){

    return  $this-&gt;find('all',array(
        'order'=&gt; array( 'idTextMessage DESC'),
        'conditions' =&gt; array('User_id' =&gt; $id)));
}
</code></pre>

<p>how can i decrypt this data </p>

<p>i have done this but didnt work </p>

<pre><code>class Message extends AppModel{
public $useTable = 'textmessage';

public $actsAs = array( 
    'Cryptable' =&gt; array( 

        'fields' =&gt; array( 
            'mobileNo',
             'body' 
        ) 
    ) 
);
</code></pre>
","<p>well the after find functions wasn't working dont know why .. so i do this .. may b it helps someone else ..</p>

<pre><code>public function beforeSave($options=array()) {
 if  ( isset ( $this -&gt; data [ $this -&gt; alias ] [ 'email' ] ) )  {
     $this -&gt; data [ $this -&gt; alias ] [ 'email' ]  =  Security::rijndael($this-&gt;data[$this-&gt;alias]['email'], Configure::read('Security.key'), 'encrypt');
    }
    if  ( isset ( $this -&gt; data [ $this -&gt; alias ] [ 'address' ] ) )  {
     $this -&gt; data [ $this -&gt; alias ] [ 'address' ]  =  Crypt :: encrypt ( $this -&gt; Data [ $this -&gt; alias ] [ 'address' ] ) ;
    }

}
</code></pre>

<p>afterFind Function</p>

<pre><code> public function afterFind($results = array(),$primary = false) {

   foreach  ( $results  as  $key  =&gt;  $Val )  {
         if  ( isset ( $Val [ 'User' ] ) )  {
             if  ( array_key_exists ( 'email' ,  $Val [ 'User' ] ) )  {
                 $results [ $key ] [ 'User' ] [ 'email' ]  = Security::rijndael($Val[ 'User' ] [ 'email' ], Configure::read('Security.key'), 'decrypt');

            }
 if  ( array_key_exists ( 'address' ,  $Val [ 'User' ] ) )  {
                 $results [ $key ] [ 'User' ] [ 'email' ]  = Security::rijndael($Val[ 'User' ] [ 'address' ], Configure::read('Security.key'), 'decrypt');

            }

        }
    }return $results;


 }
</code></pre>

<p>source: <a href=""http://be-hase.com/php/239/"" rel=""nofollow"">http://be-hase.com/php/239/</a></p>
","3828","<cakephp><encryption><cakephp-2.0><cakephp-2.1><encryption-asymmetric>","1","-1","2","2013-08-08 07:50:55","18102757","2","1","","","","2013-08-06 17:02:00",""
"5001934","Asymmetric encryption Keys","<p>Can I encrypt using private key and decrypt with the public key ?</p>

<p>I found My answer:
<a href=""https://stackoverflow.com/questions/3603714/asymmetric-encryption"">Asymmetric Encryption</a></p>

<p>I just did not Pay attention about the fact that the public key is public :D</p>
","<p>You must use public key to encryption and private key to decription - it's point of RSA cryptography.</p>

<p>You can provide public key in some public place - then everybody can encrypt data and send you, but only you, with your private key can decrypt this message.
You can use <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx</a></p>

<p>more info: <a href=""http://en.wikipedia.org/wiki/Public-key_cryptography#How_it_works"" rel=""nofollow"">http://en.wikipedia.org/wiki/Public-key_cryptography#How_it_works</a>
http://en.wikipedia.org/wiki/File:Public_key_encryption.svg</p>
","3769","<c#><rsa><encryption-asymmetric>","1","-1","2","2016-09-07 15:55:41","","1","","-1","","2017-05-23 12:01:03","2011-02-15 09:38:55",""
"5001934","Asymmetric encryption Keys","<p>Can I encrypt using private key and decrypt with the public key ?</p>

<p>I found My answer:
<a href=""https://stackoverflow.com/questions/3603714/asymmetric-encryption"">Asymmetric Encryption</a></p>

<p>I just did not Pay attention about the fact that the public key is public :D</p>
","<p>You can encrypt whit private key, but in that case anyone whit public key can decrypt and this way it is meaningless to use such scheme.</p>

<p>Other party should send you his public key and then you encrypt with their public key and other party decrypt with their own private key.</p>

<p>For key exchange use protocol called <a href=""http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"" rel=""nofollow"">Diffie Hellman</a>.
Public key is used mostly for authentication only.</p>
","3769","<c#><rsa><encryption-asymmetric>","1","0","2","2016-09-07 15:55:41","","1","","-1","","2017-05-23 12:01:03","2011-02-15 09:38:55",""
"44278270","Can a zip file be encrypted with AES","<p>I am new to encryption process. Can a zip file be encrypted with a given text or can we encrypt the zip by any algorithm like aes, triples aes, blowfish. If there is a process, please guide me with examples and reference.</p>
","<blockquote>
  <p>zip4j, java library to handle Zip files (Open source, Apache License
  v2.0).</p>
  
  <p><a href=""http://www.lingala.net/zip4j/"" rel=""nofollow noreferrer"">http://www.lingala.net/zip4j/</a></p>
  
  <p>Create, Add, Extract, Update, Remove files from a Zip file Read/Write
  password protected Zip files Supports AES 128/256 Encryption Supports
  Standard Zip Encryption You can download binary, sources and examples.</p>
</blockquote>

<p><a href=""https://stackoverflow.com/questions/4584775/how-to-decompress-an-aes-256-encrypted-zip-files"">This topic</a> is likely to solve your issues. I founded also the <a href=""https://docs.oracle.com/javase/7/docs/api/java/util/zip/package-summary.html"" rel=""nofollow noreferrer"">java.util.zip documentation</a> which might help you. </p>

<p>I also have heard once about <a href=""http://www.7-zip.org/"" rel=""nofollow noreferrer"">7-zip</a> being linkable into a project, but I don't know if it is possible in java. </p>
","3685","<java><encryption><compression><password-encryption><encryption-asymmetric>","1","1","1","2017-06-01 08:44:44","","4","","4394418","","2017-06-01 08:44:44","2017-05-31 07:24:09",""
"2230011","How can I encrypt a user's password in Silverlight?","<p>I have a Silverlight 3 app which connects to a server to perform various actions.  My users log in using Forms Authentication but the actions they request are run on the server using the AppPool account so when they go in the audit logs they're recorded against the AppPool account.  PCI DSS regulations now require that the user's own ID is in the audit logs which means the action must be taken using the user's creds.  Now, I can save the user's creds when they log on and submit them with each request and the actions being taken by the server can use those creds.  But the PCI regs say that if creds are saved they must be encrypted (to avoid someone taking a memory dump of the PC and getting the password).</p>

<p>The only way I can see of doing this is to get a public key from the server and encrypt the password with it, then submit the encrypted password and decrypt it on the server using the private key.  But Silverlight doesn't have asymmetric cryptography.</p>

<p>I guess I'm too close to the problem and there must be another solution but I can't see what it is.  Can anyone help?</p>

<p><strong>CLARIFICATIONS</strong></p>

<p>It's an internal application.  Up until now, I've been using IIS Forms AuthN over SSL to Active Directory - I'm not worried about protecting the password in transit, just whilst it's held in memory on the client.  As I understand it, because I'm using Forms Authentication, impersonation is not possible on the server unless I use LogonUser, which means I need the password on the server, so I need to transmit it each time, so I need to hold it in the client, in memory, until the app closes.</p>
","<p>Encryption should never be used for passwords.  When you encrypt something then it follows there should be a way to decrypt it.   One way hashes should always be used for passwords.  md5 and sha1 have been proven to be far too weak for any secuirty system. 
Sha256 should be used,  and in silverlight this library will take care of it:
<a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.sha256%28VS.95%29.aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/system.security.cryptography.sha256%28VS.95%29.aspx</a></p>

<p>In fact storing passwords using ""encryption"" is recognized by the vulnerability family <a href=""http://cwe.mitre.org/data/definitions/257.html"" rel=""nofollow noreferrer"">CWE-257</a>.  The use of a message digest is the ONLY way to safely store passwords.  I didn't just make this up,  this is coming from NIST.   There are many other vulnerabilities that come up when storing passwords.   Here is <a href=""http://cwe.mitre.org/data/definitions/255.html"" rel=""nofollow noreferrer"">THE LIST</a> that NIST has put together: </p>
","3672","<security><silverlight-3.0><passwords><encryption-asymmetric>","4","0","2","2010-02-19 07:34:21","","3","1","167967","","2010-02-19 07:34:21","2010-02-09 15:06:20",""
"2230011","How can I encrypt a user's password in Silverlight?","<p>I have a Silverlight 3 app which connects to a server to perform various actions.  My users log in using Forms Authentication but the actions they request are run on the server using the AppPool account so when they go in the audit logs they're recorded against the AppPool account.  PCI DSS regulations now require that the user's own ID is in the audit logs which means the action must be taken using the user's creds.  Now, I can save the user's creds when they log on and submit them with each request and the actions being taken by the server can use those creds.  But the PCI regs say that if creds are saved they must be encrypted (to avoid someone taking a memory dump of the PC and getting the password).</p>

<p>The only way I can see of doing this is to get a public key from the server and encrypt the password with it, then submit the encrypted password and decrypt it on the server using the private key.  But Silverlight doesn't have asymmetric cryptography.</p>

<p>I guess I'm too close to the problem and there must be another solution but I can't see what it is.  Can anyone help?</p>

<p><strong>CLARIFICATIONS</strong></p>

<p>It's an internal application.  Up until now, I've been using IIS Forms AuthN over SSL to Active Directory - I'm not worried about protecting the password in transit, just whilst it's held in memory on the client.  As I understand it, because I'm using Forms Authentication, impersonation is not possible on the server unless I use LogonUser, which means I need the password on the server, so I need to transmit it each time, so I need to hold it in the client, in memory, until the app closes.</p>
","<p>Are you saying you need to store the password for re-use in the silverlight app?  If you are concerned about the password appearing in memory un-encrypted then Silverlight then I think you're in trouble.</p>

<p>The .NET framework does have a <code>SecureString</code> class for exact purpose you outline.</p>

<p>Unfortunately the Silverlight version of the framework does not have this class.  Hence even if you were to keep the logical storage of the password encrypted at some point your code would need to decrypt it <strong>before</strong> using it.  At the point there is memory allocated containing the string in unencrypted form.</p>

<p>I don't know much about Forms authentication but if you can map the User principle to a domain user (which you seem to indicate you need) then you will want to use impersonation when running your code on the server.</p>

<p>Alternatively stop using Forms authentication and use Windows integrated authentication where you definitely can use impersonation server-side.</p>
","3672","<security><silverlight-3.0><passwords><encryption-asymmetric>","4","1","2","2010-02-19 07:34:21","","3","1","167967","","2010-02-19 07:34:21","2010-02-09 15:06:20",""
"7247083","Javascript + PHP Encryption with pidCrypt","<p>I have been working on trying to implement an encryption mechanism for passing secure information on my website.  My host charges extra for SSL, and I am not ready for the extra monetary commitment.</p>

<p>I tried to use <a href=""https://sourceforge.net/projects/pidcrypt/"" rel=""nofollow"">pidCrypt</a> to encrypt the values on the client side via javascript.  Then, I have tried several techniques for unencrypting on the PHP side.  For some reason, the data just gets garbled.</p>

<p>Can someone point out what I am doing wrong?  Or, should I use a different javascript library for the encryption?  Any advice?</p>

<p>Here's the javascript code that pulls the text to encrypt from an input on the page and the public key from a hidden text area on the page.</p>

<pre><code>$(document).ready(function() {
  $('button').click(function() {
    var dataToSend = new Object();

    var input = $('input[name=textToEncrypt]').val();
    var public_key = $('textarea[name=publicKey]').val();
    var params = certParser(public_key);
        var key = pidCryptUtil.decodeBase64(params.b64);
    //new RSA instance
    var rsa = new pidCrypt.RSA();
    //RSA encryption
    //ASN1 parsing
    var asn = pidCrypt.ASN1.decode(pidCryptUtil.toByteArray(key));
    var tree = asn.toHexTree();
    //setting the public key for encryption
    rsa.setPublicKeyFromASN(tree);
    var t = new Date();  // timer
    crypted = rsa.encrypt(input);
    dataToSend.unencrypted = input;
    dataToSend.textToDecrypt = pidCryptUtil.fragment(pidCryptUtil.encodeBase64(pidCryptUtil.convertFromHex(crypted)),64);
    $('body').append(dataToSend.textToDecrypt);


    $.getJSON('engine.php', dataToSend, function(data) {
      var items = [];

      $.each(data, function(key, val) {
         items.push('&lt;li id=""' + key + '""&gt;' + key + ': ' + val + '&lt;/li&gt;');
      });

      $('&lt;ul/&gt;', {
        'class': 'my-new-list',
        html: items.join('')
      }).appendTo('body');
    });


  });
});
</code></pre>

<p>This is my engine.php code that is supposed to decrypt the value.  Notice that I have tried several different ways from different examples.</p>

<pre><code>&lt;?php
   require_once 'private/keys.php';



function EncryptData($source)
{
  /*
   * NOTE:  Here you use the $pub_key value (converted, I guess)
   */
  $key = $DEkeys-&gt;pubKey;
  openssl_public_encrypt($source,$crypttext,$key);
  return(base64_encode($crypttext));
}

function DecryptData($source)
{
  /*
   * NOTE:  Here you use the returned resource value
   */
  $decoded_source = base64_decode($source);
  openssl_private_decrypt($decoded_source,$newsource,$DEkeys-&gt;privKey);
  return($newsource);
}

function EncryptData2($source)
{
  $fp=fopen(""/pathtokey/public.pem"",""r"");
  $pub_key=fread($fp,8192);
  fclose($fp);
  openssl_get_publickey($pub_key);
  /*
   * NOTE:  Here you use the $pub_key value (converted, I guess)
   */
  openssl_public_encrypt($source,$crypttext,$pub_key);
  return(base64_encode($crypttext));
}

function DecryptData2($source)
{
  #print(""number : $number"");
  $fp=fopen(""/pathtokey/private.pem"",""r"");
  $priv_key=fread($fp,8192);
  fclose($fp);
  // $passphrase is required if your key is encoded (suggested)
  $res = openssl_get_privatekey($priv_key);
  /*
   * NOTE:  Here you use the returned resource value
   */
  $decoded_source = base64_decode($source);
  openssl_private_decrypt($decoded_source,$newsource,$res);
  return($newsource);
}

$out = new stdClass;

$out-&gt;hello = 'hello, world!';

if(!empty($_GET[""textToDecrypt""])) {
   $out-&gt;raw = $_GET['textToDecrypt'];
   $out-&gt;unencrypted = $_GET['unencrypted'];
     if($DEkeys-&gt;privKey == false) {
       $out-&gt;error = 'Could not read private key';
     }
     $out-&gt;success = openssl_private_decrypt(base64_decode($out-&gt;raw), $decrypted, $DEkeys-&gt;privKey);
     $out-&gt;decrypted = $decrypted;
     $out-&gt;dec2 = DecryptData2($out-&gt;raw);
     $out-&gt;test1 = EncryptData2('testing');
     $out-&gt;test2 = DecryptData2($out-&gt;test1);
} else {
   $out-&gt;nondata = $_GET['textToDecrypt'];
}


echo json_encode($out);
</code></pre>

<p>When I enter ""test"" for the value to decrypt, the PHP shows:
 - decrypted: dGVzdA== 
 - dec2: dGVzdA==</p>

<p>So, neither the openssl_private_decrypt() nor the DecryptData2() functions will correctly decrypt the values.  The EncryptData2() and DecryptData2() will work together though.</p>

<p>Is it possible I am missing something small?  Any advice?</p>

<p>Edit: Here are the commands I used to create the keys --</p>

<p>This creates the private key:</p>

<pre><code> openssl genrsa -out private.pem 1024
</code></pre>

<p>This creates the public key:</p>

<pre><code> openssl rsa -in private.pem -pubout &gt; public.pem
</code></pre>
","<p>You cannot securely encrypt anything on the client side. This is because the client has <em>full</em> control over any data that will be send, <em>as well as the crypto engine</em>.</p>

<p>There has been some debate about this in the past, and the conclusion is always the same. It cannot be done in any secure manner.</p>

<p>The question you should ask yourself is: what are you trying to protect yourself/your clients from?<br>
If you try to protect yourself from people sniffing the wire or tampering with the request-data, the only viable solution is SSL.<br>
If anything else, crypto is not the solution to look for.</p>

<p><sub>(on a side note, the decrypted string is base64 encoded, try <a href=""http://www.php.net/base64_decode"" rel=""nofollow"">base64_decode</a>)</sub></p>
","3582","<javascript><php><encryption-asymmetric><pidcrypt>","2","0","4","2016-03-30 17:16:20","","7","","1521606","","2016-03-30 17:16:20","2011-08-30 17:10:32",""
"7247083","Javascript + PHP Encryption with pidCrypt","<p>I have been working on trying to implement an encryption mechanism for passing secure information on my website.  My host charges extra for SSL, and I am not ready for the extra monetary commitment.</p>

<p>I tried to use <a href=""https://sourceforge.net/projects/pidcrypt/"" rel=""nofollow"">pidCrypt</a> to encrypt the values on the client side via javascript.  Then, I have tried several techniques for unencrypting on the PHP side.  For some reason, the data just gets garbled.</p>

<p>Can someone point out what I am doing wrong?  Or, should I use a different javascript library for the encryption?  Any advice?</p>

<p>Here's the javascript code that pulls the text to encrypt from an input on the page and the public key from a hidden text area on the page.</p>

<pre><code>$(document).ready(function() {
  $('button').click(function() {
    var dataToSend = new Object();

    var input = $('input[name=textToEncrypt]').val();
    var public_key = $('textarea[name=publicKey]').val();
    var params = certParser(public_key);
        var key = pidCryptUtil.decodeBase64(params.b64);
    //new RSA instance
    var rsa = new pidCrypt.RSA();
    //RSA encryption
    //ASN1 parsing
    var asn = pidCrypt.ASN1.decode(pidCryptUtil.toByteArray(key));
    var tree = asn.toHexTree();
    //setting the public key for encryption
    rsa.setPublicKeyFromASN(tree);
    var t = new Date();  // timer
    crypted = rsa.encrypt(input);
    dataToSend.unencrypted = input;
    dataToSend.textToDecrypt = pidCryptUtil.fragment(pidCryptUtil.encodeBase64(pidCryptUtil.convertFromHex(crypted)),64);
    $('body').append(dataToSend.textToDecrypt);


    $.getJSON('engine.php', dataToSend, function(data) {
      var items = [];

      $.each(data, function(key, val) {
         items.push('&lt;li id=""' + key + '""&gt;' + key + ': ' + val + '&lt;/li&gt;');
      });

      $('&lt;ul/&gt;', {
        'class': 'my-new-list',
        html: items.join('')
      }).appendTo('body');
    });


  });
});
</code></pre>

<p>This is my engine.php code that is supposed to decrypt the value.  Notice that I have tried several different ways from different examples.</p>

<pre><code>&lt;?php
   require_once 'private/keys.php';



function EncryptData($source)
{
  /*
   * NOTE:  Here you use the $pub_key value (converted, I guess)
   */
  $key = $DEkeys-&gt;pubKey;
  openssl_public_encrypt($source,$crypttext,$key);
  return(base64_encode($crypttext));
}

function DecryptData($source)
{
  /*
   * NOTE:  Here you use the returned resource value
   */
  $decoded_source = base64_decode($source);
  openssl_private_decrypt($decoded_source,$newsource,$DEkeys-&gt;privKey);
  return($newsource);
}

function EncryptData2($source)
{
  $fp=fopen(""/pathtokey/public.pem"",""r"");
  $pub_key=fread($fp,8192);
  fclose($fp);
  openssl_get_publickey($pub_key);
  /*
   * NOTE:  Here you use the $pub_key value (converted, I guess)
   */
  openssl_public_encrypt($source,$crypttext,$pub_key);
  return(base64_encode($crypttext));
}

function DecryptData2($source)
{
  #print(""number : $number"");
  $fp=fopen(""/pathtokey/private.pem"",""r"");
  $priv_key=fread($fp,8192);
  fclose($fp);
  // $passphrase is required if your key is encoded (suggested)
  $res = openssl_get_privatekey($priv_key);
  /*
   * NOTE:  Here you use the returned resource value
   */
  $decoded_source = base64_decode($source);
  openssl_private_decrypt($decoded_source,$newsource,$res);
  return($newsource);
}

$out = new stdClass;

$out-&gt;hello = 'hello, world!';

if(!empty($_GET[""textToDecrypt""])) {
   $out-&gt;raw = $_GET['textToDecrypt'];
   $out-&gt;unencrypted = $_GET['unencrypted'];
     if($DEkeys-&gt;privKey == false) {
       $out-&gt;error = 'Could not read private key';
     }
     $out-&gt;success = openssl_private_decrypt(base64_decode($out-&gt;raw), $decrypted, $DEkeys-&gt;privKey);
     $out-&gt;decrypted = $decrypted;
     $out-&gt;dec2 = DecryptData2($out-&gt;raw);
     $out-&gt;test1 = EncryptData2('testing');
     $out-&gt;test2 = DecryptData2($out-&gt;test1);
} else {
   $out-&gt;nondata = $_GET['textToDecrypt'];
}


echo json_encode($out);
</code></pre>

<p>When I enter ""test"" for the value to decrypt, the PHP shows:
 - decrypted: dGVzdA== 
 - dec2: dGVzdA==</p>

<p>So, neither the openssl_private_decrypt() nor the DecryptData2() functions will correctly decrypt the values.  The EncryptData2() and DecryptData2() will work together though.</p>

<p>Is it possible I am missing something small?  Any advice?</p>

<p>Edit: Here are the commands I used to create the keys --</p>

<p>This creates the private key:</p>

<pre><code> openssl genrsa -out private.pem 1024
</code></pre>

<p>This creates the public key:</p>

<pre><code> openssl rsa -in private.pem -pubout &gt; public.pem
</code></pre>
","<p>I ended up using Open ID.  It's not secure, but at least it is a little better than nothing.  The specific implementation that I found was <a href=""http://gitorious.org/lightopenid"" rel=""nofollow"">LightOpenID</a>.</p>

<p>I will be choosing a different web host when it is time to renew that will allow me to use SSL in an affordable fashion.</p>

<p>I never did figure out why my encryption code would not work.</p>
","3582","<javascript><php><encryption-asymmetric><pidcrypt>","2","0","4","2016-03-30 17:16:20","","7","","1521606","","2016-03-30 17:16:20","2011-08-30 17:10:32",""
"7247083","Javascript + PHP Encryption with pidCrypt","<p>I have been working on trying to implement an encryption mechanism for passing secure information on my website.  My host charges extra for SSL, and I am not ready for the extra monetary commitment.</p>

<p>I tried to use <a href=""https://sourceforge.net/projects/pidcrypt/"" rel=""nofollow"">pidCrypt</a> to encrypt the values on the client side via javascript.  Then, I have tried several techniques for unencrypting on the PHP side.  For some reason, the data just gets garbled.</p>

<p>Can someone point out what I am doing wrong?  Or, should I use a different javascript library for the encryption?  Any advice?</p>

<p>Here's the javascript code that pulls the text to encrypt from an input on the page and the public key from a hidden text area on the page.</p>

<pre><code>$(document).ready(function() {
  $('button').click(function() {
    var dataToSend = new Object();

    var input = $('input[name=textToEncrypt]').val();
    var public_key = $('textarea[name=publicKey]').val();
    var params = certParser(public_key);
        var key = pidCryptUtil.decodeBase64(params.b64);
    //new RSA instance
    var rsa = new pidCrypt.RSA();
    //RSA encryption
    //ASN1 parsing
    var asn = pidCrypt.ASN1.decode(pidCryptUtil.toByteArray(key));
    var tree = asn.toHexTree();
    //setting the public key for encryption
    rsa.setPublicKeyFromASN(tree);
    var t = new Date();  // timer
    crypted = rsa.encrypt(input);
    dataToSend.unencrypted = input;
    dataToSend.textToDecrypt = pidCryptUtil.fragment(pidCryptUtil.encodeBase64(pidCryptUtil.convertFromHex(crypted)),64);
    $('body').append(dataToSend.textToDecrypt);


    $.getJSON('engine.php', dataToSend, function(data) {
      var items = [];

      $.each(data, function(key, val) {
         items.push('&lt;li id=""' + key + '""&gt;' + key + ': ' + val + '&lt;/li&gt;');
      });

      $('&lt;ul/&gt;', {
        'class': 'my-new-list',
        html: items.join('')
      }).appendTo('body');
    });


  });
});
</code></pre>

<p>This is my engine.php code that is supposed to decrypt the value.  Notice that I have tried several different ways from different examples.</p>

<pre><code>&lt;?php
   require_once 'private/keys.php';



function EncryptData($source)
{
  /*
   * NOTE:  Here you use the $pub_key value (converted, I guess)
   */
  $key = $DEkeys-&gt;pubKey;
  openssl_public_encrypt($source,$crypttext,$key);
  return(base64_encode($crypttext));
}

function DecryptData($source)
{
  /*
   * NOTE:  Here you use the returned resource value
   */
  $decoded_source = base64_decode($source);
  openssl_private_decrypt($decoded_source,$newsource,$DEkeys-&gt;privKey);
  return($newsource);
}

function EncryptData2($source)
{
  $fp=fopen(""/pathtokey/public.pem"",""r"");
  $pub_key=fread($fp,8192);
  fclose($fp);
  openssl_get_publickey($pub_key);
  /*
   * NOTE:  Here you use the $pub_key value (converted, I guess)
   */
  openssl_public_encrypt($source,$crypttext,$pub_key);
  return(base64_encode($crypttext));
}

function DecryptData2($source)
{
  #print(""number : $number"");
  $fp=fopen(""/pathtokey/private.pem"",""r"");
  $priv_key=fread($fp,8192);
  fclose($fp);
  // $passphrase is required if your key is encoded (suggested)
  $res = openssl_get_privatekey($priv_key);
  /*
   * NOTE:  Here you use the returned resource value
   */
  $decoded_source = base64_decode($source);
  openssl_private_decrypt($decoded_source,$newsource,$res);
  return($newsource);
}

$out = new stdClass;

$out-&gt;hello = 'hello, world!';

if(!empty($_GET[""textToDecrypt""])) {
   $out-&gt;raw = $_GET['textToDecrypt'];
   $out-&gt;unencrypted = $_GET['unencrypted'];
     if($DEkeys-&gt;privKey == false) {
       $out-&gt;error = 'Could not read private key';
     }
     $out-&gt;success = openssl_private_decrypt(base64_decode($out-&gt;raw), $decrypted, $DEkeys-&gt;privKey);
     $out-&gt;decrypted = $decrypted;
     $out-&gt;dec2 = DecryptData2($out-&gt;raw);
     $out-&gt;test1 = EncryptData2('testing');
     $out-&gt;test2 = DecryptData2($out-&gt;test1);
} else {
   $out-&gt;nondata = $_GET['textToDecrypt'];
}


echo json_encode($out);
</code></pre>

<p>When I enter ""test"" for the value to decrypt, the PHP shows:
 - decrypted: dGVzdA== 
 - dec2: dGVzdA==</p>

<p>So, neither the openssl_private_decrypt() nor the DecryptData2() functions will correctly decrypt the values.  The EncryptData2() and DecryptData2() will work together though.</p>

<p>Is it possible I am missing something small?  Any advice?</p>

<p>Edit: Here are the commands I used to create the keys --</p>

<p>This creates the private key:</p>

<pre><code> openssl genrsa -out private.pem 1024
</code></pre>

<p>This creates the public key:</p>

<pre><code> openssl rsa -in private.pem -pubout &gt; public.pem
</code></pre>
","<p>Try the following simple example. I used it only to encrypt a password but you could use it for the whole form as well.</p>

<p>It is using a open source javascript library <a href=""https://ziyan.info/2008/10/javascript-rsa/"" rel=""nofollow"">https://github.com/ziyan/javascript-rsa</a></p>

<p>HTML/JAVASCRIPT:</p>

<pre><code>&lt;script language=""JavaScript"" type=""text/javascript"" src=""jsbn.js""&gt;&lt;/script&gt;
&lt;script language=""JavaScript"" type=""text/javascript"" src=""rsa.js""&gt;&lt;/script&gt;

&lt;script language=""JavaScript""&gt;

    function encryptData(){

        //Don't forget to escape the lines:
        var pem=""-----BEGIN PUBLIC KEY-----\
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDfmlc2EgrdhvakQApmLCDOgP0n\
NERInBheMh7J/r5aU8PUAIpGXET/8+kOGI1dSYjoux80AuHvkWp1EeHfMwC/SZ9t\
6rF4sYqV5Lj9t32ELbh2VNbE/7QEVZnXRi5GdhozBZtS1gJHM2/Q+iToyh5dfTaA\
U8bTnLEPMNC1h3qcUQIDAQAB\
-----END PUBLIC KEY-----"";

        var key = RSA.getPublicKey(pem);

        element=document.getElementById('password');
        element.value=RSA.encrypt(element.value, key);
    }
&lt;/script&gt;

&lt;form method='POST' id='txtAuth' onsubmit='encryptData()'&gt;
    &lt;input type='text' name='username'/&gt;
    &lt;input type='password' name='password' id='password' placeholder=""password""/&gt;
    &lt;input name='submit' type='submit' value='Submit'&gt;
&lt;/form&gt;
</code></pre>

<p>PHP:</p>

<pre><code>&lt;?php

if (isset($_POST['password'])) {

    //Load private key:
    $private = ""-----BEGIN RSA PRIVATE KEY-----
    MIICXAIBAAKBgQDfmlc2EgrdhvakQApmLCDOgP0nNERInBheMh7J/r5aU8PUAIpG
    XET/8+kOGI1dSYjoux80AuHvkWp1EeHfMwC/SZ9t6rF4sYqV5Lj9t32ELbh2VNbE
    /7QEVZnXRi5GdhozBZtS1gJHM2/Q+iToyh5dfTaAU8bTnLEPMNC1h3qcUQIDAQAB
    AoGAcbh6UFqewgnpGKIlZ89bpAsANVckv1T8I7QT6qGvyBrABut7Z8t3oEE5r1yX
    UPGcOtkoRniM1h276ex9VtoGr09sUn7duoLiEsp8aip7p7SB3X6XXWJ9K733co6C
    dpXotfO0zMnv8l3O9h4pHrrBkmWDBEKbUeuE9Zz7uy6mFAECQQDygylLjzX+2rvm
    FYd5ejSaLEeK17AiuT29LNPRHWLu6a0zl923299FCyHLasFgbeuLRCW0LMCs2SKE
    Y+cIWMSRAkEA7AnzWjby8j8efjvUwIWh/L5YJyWlSgYKlR0zdgKxxUy9+i1MGRkn
    m81NLYza4JLvb8/qjUtvw92Zcppxb7E7wQJAIuQWC+X12c30nLzaOfMIIGpgfKxd
    jhFivZX2f66frkn2fmbKIorCy7c3TIH2gn4uFmJenlaV/ghbe/q3oa7L0QJAFP19
    ipRAXpKGX6tqbAR2N0emBzUt0btfzYrfPKtYq7b7XfgRQFogT5aeOmLARCBM8qCG
    tzHyKnTWZH6ff9M/AQJBAIToUPachXPhDyOpDBcBliRNsowZcw4Yln8CnLqgS9H5
    Ya8iBJilFm2UlcXfpUOk9bhBTbgFp+Bv6BZ2Alag7pY=
    -----END RSA PRIVATE KEY-----"";
    if (!$privateKey = openssl_pkey_get_private($private)) die('Loading Private Key failed');

    //Decrypt
    $decrypted_text = """";
    if (!openssl_private_decrypt(base64_decode($_POST['password']), $decrypted_text, $privateKey)) die('Failed to decrypt data');

    //Decrypted :) 
    var_dump($decrypted_text);

    //Free key
    openssl_free_key($privateKey);
}
?&gt;
</code></pre>

<p>Enjoy!</p>
","3582","<javascript><php><encryption-asymmetric><pidcrypt>","2","2","4","2016-03-30 17:16:20","","7","","1521606","","2016-03-30 17:16:20","2011-08-30 17:10:32",""
"7247083","Javascript + PHP Encryption with pidCrypt","<p>I have been working on trying to implement an encryption mechanism for passing secure information on my website.  My host charges extra for SSL, and I am not ready for the extra monetary commitment.</p>

<p>I tried to use <a href=""https://sourceforge.net/projects/pidcrypt/"" rel=""nofollow"">pidCrypt</a> to encrypt the values on the client side via javascript.  Then, I have tried several techniques for unencrypting on the PHP side.  For some reason, the data just gets garbled.</p>

<p>Can someone point out what I am doing wrong?  Or, should I use a different javascript library for the encryption?  Any advice?</p>

<p>Here's the javascript code that pulls the text to encrypt from an input on the page and the public key from a hidden text area on the page.</p>

<pre><code>$(document).ready(function() {
  $('button').click(function() {
    var dataToSend = new Object();

    var input = $('input[name=textToEncrypt]').val();
    var public_key = $('textarea[name=publicKey]').val();
    var params = certParser(public_key);
        var key = pidCryptUtil.decodeBase64(params.b64);
    //new RSA instance
    var rsa = new pidCrypt.RSA();
    //RSA encryption
    //ASN1 parsing
    var asn = pidCrypt.ASN1.decode(pidCryptUtil.toByteArray(key));
    var tree = asn.toHexTree();
    //setting the public key for encryption
    rsa.setPublicKeyFromASN(tree);
    var t = new Date();  // timer
    crypted = rsa.encrypt(input);
    dataToSend.unencrypted = input;
    dataToSend.textToDecrypt = pidCryptUtil.fragment(pidCryptUtil.encodeBase64(pidCryptUtil.convertFromHex(crypted)),64);
    $('body').append(dataToSend.textToDecrypt);


    $.getJSON('engine.php', dataToSend, function(data) {
      var items = [];

      $.each(data, function(key, val) {
         items.push('&lt;li id=""' + key + '""&gt;' + key + ': ' + val + '&lt;/li&gt;');
      });

      $('&lt;ul/&gt;', {
        'class': 'my-new-list',
        html: items.join('')
      }).appendTo('body');
    });


  });
});
</code></pre>

<p>This is my engine.php code that is supposed to decrypt the value.  Notice that I have tried several different ways from different examples.</p>

<pre><code>&lt;?php
   require_once 'private/keys.php';



function EncryptData($source)
{
  /*
   * NOTE:  Here you use the $pub_key value (converted, I guess)
   */
  $key = $DEkeys-&gt;pubKey;
  openssl_public_encrypt($source,$crypttext,$key);
  return(base64_encode($crypttext));
}

function DecryptData($source)
{
  /*
   * NOTE:  Here you use the returned resource value
   */
  $decoded_source = base64_decode($source);
  openssl_private_decrypt($decoded_source,$newsource,$DEkeys-&gt;privKey);
  return($newsource);
}

function EncryptData2($source)
{
  $fp=fopen(""/pathtokey/public.pem"",""r"");
  $pub_key=fread($fp,8192);
  fclose($fp);
  openssl_get_publickey($pub_key);
  /*
   * NOTE:  Here you use the $pub_key value (converted, I guess)
   */
  openssl_public_encrypt($source,$crypttext,$pub_key);
  return(base64_encode($crypttext));
}

function DecryptData2($source)
{
  #print(""number : $number"");
  $fp=fopen(""/pathtokey/private.pem"",""r"");
  $priv_key=fread($fp,8192);
  fclose($fp);
  // $passphrase is required if your key is encoded (suggested)
  $res = openssl_get_privatekey($priv_key);
  /*
   * NOTE:  Here you use the returned resource value
   */
  $decoded_source = base64_decode($source);
  openssl_private_decrypt($decoded_source,$newsource,$res);
  return($newsource);
}

$out = new stdClass;

$out-&gt;hello = 'hello, world!';

if(!empty($_GET[""textToDecrypt""])) {
   $out-&gt;raw = $_GET['textToDecrypt'];
   $out-&gt;unencrypted = $_GET['unencrypted'];
     if($DEkeys-&gt;privKey == false) {
       $out-&gt;error = 'Could not read private key';
     }
     $out-&gt;success = openssl_private_decrypt(base64_decode($out-&gt;raw), $decrypted, $DEkeys-&gt;privKey);
     $out-&gt;decrypted = $decrypted;
     $out-&gt;dec2 = DecryptData2($out-&gt;raw);
     $out-&gt;test1 = EncryptData2('testing');
     $out-&gt;test2 = DecryptData2($out-&gt;test1);
} else {
   $out-&gt;nondata = $_GET['textToDecrypt'];
}


echo json_encode($out);
</code></pre>

<p>When I enter ""test"" for the value to decrypt, the PHP shows:
 - decrypted: dGVzdA== 
 - dec2: dGVzdA==</p>

<p>So, neither the openssl_private_decrypt() nor the DecryptData2() functions will correctly decrypt the values.  The EncryptData2() and DecryptData2() will work together though.</p>

<p>Is it possible I am missing something small?  Any advice?</p>

<p>Edit: Here are the commands I used to create the keys --</p>

<p>This creates the private key:</p>

<pre><code> openssl genrsa -out private.pem 1024
</code></pre>

<p>This creates the public key:</p>

<pre><code> openssl rsa -in private.pem -pubout &gt; public.pem
</code></pre>
","<p>Your decrypted values are base64 encoded because pidCrypt uses base64 encoding to ensure 8 bit characters prior to RSA encryption. So simply base64-decode your results.</p>

<p>See <a href=""https://sourceforge.net/projects/pidcrypt/forums/forum/923749/topic/3153476"" rel=""nofollow"">https://sourceforge.net/projects/pidcrypt/forums/forum/923749/topic/3153476</a></p>
","3582","<javascript><php><encryption-asymmetric><pidcrypt>","2","1","4","2016-03-30 17:16:20","","7","","1521606","","2016-03-30 17:16:20","2011-08-30 17:10:32",""
"9208583","Are public key and private key interchangeable?","<p>On the one hand, I hear people saying that the two keys are totally interchangeable, the first one will decrypt what the second one encrypted. This makes me think that the two keys are interchangeable.</p>

<p>But on the other hand, RSA generated keys appear to have different length, and on another topic encrypting with a private key was called “signing” and was deemed less safe than encrypting with a public key. (2)</p>

<p>On top of that comes the idea that the private key should be kept undisclosed when the public key should be openly distributed in the wild. (3)</p>

<p>I planned to receive data from an unique server, so my idea was to keep a public key on that server to encrypt data, and distribute a private key to all the possible customers, but this goes against (3). Conversely, if I distribute public keys and encrypt my data with the private key, the encryption is less safe according to (2).</p>

<p>Should I distribute a public key and encrypt with a private one to satisfy (2) or the other way around?</p>

<p>NB: in my case, performance is not an issue.</p>
","<p>Your public key is used to encrypt a message, your private one to decrypt it. Thus with the public key, which you distribute, anyone can encrypt a message safe in the knowledge that only you (or someone with your private key) can decrypt it. To answer your question directly, <strong>no they are not interchangeable</strong>. You should never distribute your private key.</p>

<p>If you want to share a key with multiple possible customers, then there are really two options. Either you abandon asymmetric cryptography and find a secure way to distribute a symmetric key, for use with something like AES instead of RSA, to each of them, or you ask each of them to generate a key pair and provide you with their public key. Then you can decrypt what comes from the server, and re-encrypt for each customer. The number of customers will help dictate your choice between the two.</p>
","3355","<encryption><rsa><encryption-asymmetric>","13","6","2","2014-08-03 09:39:46","9208659","3","4","838807","","2012-02-09 10:00:22","2012-02-09 09:52:24",""
"9208583","Are public key and private key interchangeable?","<p>On the one hand, I hear people saying that the two keys are totally interchangeable, the first one will decrypt what the second one encrypted. This makes me think that the two keys are interchangeable.</p>

<p>But on the other hand, RSA generated keys appear to have different length, and on another topic encrypting with a private key was called “signing” and was deemed less safe than encrypting with a public key. (2)</p>

<p>On top of that comes the idea that the private key should be kept undisclosed when the public key should be openly distributed in the wild. (3)</p>

<p>I planned to receive data from an unique server, so my idea was to keep a public key on that server to encrypt data, and distribute a private key to all the possible customers, but this goes against (3). Conversely, if I distribute public keys and encrypt my data with the private key, the encryption is less safe according to (2).</p>

<p>Should I distribute a public key and encrypt with a private one to satisfy (2) or the other way around?</p>

<p>NB: in my case, performance is not an issue.</p>
","<p>The answer depends on whether you are asking your question out of mathematic curiosity, or for purely practical, cryptographic reasons.</p>

<ul>
<li><p>If you are implementing a crypto system you should <strong>never</strong> disclose your private key, so in this sense the keys are <strong>absolutely not</strong> interchangeable. Furthermore, the usage scenario you describe seems like a good match for authentication rather than confidentiality, so the message that is sent by the server to the clients should indeed be signed and not encrypted. If you need confidentiality as well, you need a few more steps in your protocol.</p></li>
<li><p>From a mathematical point of view, the answer is OTOH ""yes"", presuming you use an internal representation of the private key that only contains the modulus N and the exponent D, and the other exponent E is generated randomly. The formula that describes the relation between the two exponents is 1 = E*D (mod phi(N)), so from a mathematical point of view it doesn't really matter which exponent is which.</p></li>
</ul>

<blockquote>
  <p>But on the other hand, RSA generated keys appear to have different length</p>
</blockquote>

<p>If you are using an implementation that produces RSA private keys that are significantly longer than the corresponding public keys, this almost always means the implementation is <strong>absolutely not</strong> suitable for using public and private keys interchangeably. The difference in length is usually due to a combination of the following:</p>

<ul>
<li>The public exponent E is not generated randomly, but is a small, fixed constant, such as 3 or 0x10001. The private exponent D will on the other hand be almost as large as the modulus, so the private key data will be almost twice the size of the public key data. If you only got a RSA private key (N,D), your first guess on the public exponent would be either of the values 3 or 0x10001, and it would be easy the check if the guess is correct. Should you want the keys to be interchangeable, the exponent you pick first has to be picked randomly as an odd integer greater than 1 and less than phi(N) and with no prime factors in common with N or phi(N).</li>
<li>The private key data includes the factors P,Q of the public modulus N.</li>
<li>The private key data includes the public exponent E.</li>
</ul>
","3355","<encryption><rsa><encryption-asymmetric>","13","31","2","2014-08-03 09:39:46","9208659","3","4","838807","","2012-02-09 10:00:22","2012-02-09 09:52:24",""
"33187988","Encrypt a SecretKey with RSA in Java","<p>I'm working on a client-server secure protocol where I need to use RSA in Java to encrypt a SecretKey for HMAC digests because the key has to be sent to the server. The encryption has two stages; first, I need to encrypt the symmetric key with a public asymmetric key, then, that encrypted message is encrypted with a private asymmetric key.</p>

<p>For this purpose I generate the SecretKey as:</p>

<pre><code>public SecretKey generate(){
KeyGenerator generator = KeyGenerator.getInstance(""HMACSHA256"");
k = generator.generateKey();
return k;
}
</code></pre>

<p>Later, I use this code to encrypt any byte array with a public key:</p>

<pre><code>public byte[] encryptPublic(PublicKey key, byte[] array){
Cipher cipher = Cipher.getInstance(""RSA"");
cipher.init(Cipher.ENCRYPT_MODE, key);
byte[] encrypted = cipher.doFinal(array);
return encrypted;
}
</code></pre>

<p>The code for encryption with a private key is the same but using a private key.</p>

<p>For the RSA encryption I'm using 1024 bit long asymmetric keys so I have two main questions:</p>

<ol>
<li>How can I turn my SecretKey to a byte array in order to encrypt it with RSA and a public key? </li>
<li>As the public key encryption produces a byte array with 128 bytes, how can I encrypt that message again with a private key if the key is 1024 bits long and can only encrypt a 117 byte long message?</li>
</ol>
","<ol>
<li>How can I turn my SecretKey to a byte array in order to encrypt it with RSA and a public key?</li>
</ol>

<p>That's called wrapping:</p>

<pre><code>public static byte[] wrapKey(PublicKey pubKey, SecretKey symKey)
        throws InvalidKeyException, IllegalBlockSizeException {
    try {
        final Cipher cipher = Cipher
                .getInstance(""RSA/ECB/OAEPWithSHA1AndMGF1Padding"");
        cipher.init(Cipher.WRAP_MODE, pubKey);
        final byte[] wrapped = cipher.wrap(symKey);
        return wrapped;
    } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {
        throw new IllegalStateException(
                ""Java runtime does not support RSA/ECB/OAEPWithSHA1AndMGF1Padding"",
                e);
    }
}
</code></pre>

<p>Note that this explicitly doesn't convert to <code>byte[]</code> first. That's because the key might well be within e.g. a hardware security module. In a HSM the wrapping <em>may</em> be possible, but the conversion to <code>byte[]</code> in local memory would usually not be possible. </p>

<hr>

<ol start=""2"">
<li>As the public key encryption produces a byte array with 128 bytes, how can I encrypt that message again with a private key if the key is 1024 bits long and can only encrypt a 117 byte long message?</li>
</ol>

<p>You shouldn't do this and you cannot do this either. The reason that you shouldn't do it because encryption with the private key does not provide <em>confidentiality</em>, as anybody would have access to the public key.</p>

<p>Padding is required to perform secure RSA encryption. The padding overhead (of 11 bytes for PKCS#1 v1.5 style padding) is there prohibiting you to encrypt with the private key.</p>

<p>Note that the entire operation: encryption with a private key isn't even specified in PKCS#1 - it's not a legit operation.</p>

<hr>

<p>Usually the much more secure ephemeral-ephemeral (EC)DH is used to establish keys in transport protocols, using the private key(s) only for authentication. You may want to take a hint from the (draft versions of) TLS 1.3. Or you may just want to use TLS or the handshake portion of it.</p>
","3286","<java><encryption><rsa><encryption-asymmetric><secret-key>","2","2","1","2017-11-13 12:14:49","33197435","2","3","","","","2015-10-17 14:58:46",""
"5817254","PRIVATE key encryption in .Net","<p>I am looking for a way to do <strong>private</strong> key encryption in C#.</p>

<p>I thought I could use the RSACryptoServiceProvider, but it only supports <strong>public</strong> key encryption.</p>

<p>The only thing I found on the subject was this project, but I would rather use something I can find in .net: <a href=""http://www.codeproject.com/KB/security/PrivateEncryption.aspx"" rel=""nofollow"">http://www.codeproject.com/KB/security/PrivateEncryption.aspx</a></p>

<p>Please note I am <strong>not</strong> looking for signing.</p>

<p>Please note I <strong>require</strong> asymmetric encryption.</p>

<p>Any idea's?</p>

<p>Background story:</p>

<p>I am sending an encrypted file to another system which is running an application. The encryption is making sure the file cannot be altered (more or less) or viewed by anyone. The application is able to decrypt the file using the public key and do something with it.</p>

<p>I know pretty much anyone is able to get the public key from the application, this is not a problem in this case.</p>
","<blockquote>
  <p>The encryption is making sure the file cannot be altered or viewed by anyone</p>
</blockquote>

<p>Public Key Encryption - when done ""by the book"" - seperates encryption and signing (""cannot be altered""). In your case, use two key pairs, one within the application and one at your site. Encrypt the file using the public application key and sign the file using your private one.</p>

<p>This is a really widespread usage, I even like to call it ""Best practice"". As for the downvote, I can only guess that ruling out signing in your question triggered this.</p>
","3223","<c#><.net><encryption><encryption-asymmetric>","0","2","2","2012-08-25 13:24:58","5908410","8","1","314447","","2012-08-25 13:24:58","2011-04-28 10:34:54",""
"5817254","PRIVATE key encryption in .Net","<p>I am looking for a way to do <strong>private</strong> key encryption in C#.</p>

<p>I thought I could use the RSACryptoServiceProvider, but it only supports <strong>public</strong> key encryption.</p>

<p>The only thing I found on the subject was this project, but I would rather use something I can find in .net: <a href=""http://www.codeproject.com/KB/security/PrivateEncryption.aspx"" rel=""nofollow"">http://www.codeproject.com/KB/security/PrivateEncryption.aspx</a></p>

<p>Please note I am <strong>not</strong> looking for signing.</p>

<p>Please note I <strong>require</strong> asymmetric encryption.</p>

<p>Any idea's?</p>

<p>Background story:</p>

<p>I am sending an encrypted file to another system which is running an application. The encryption is making sure the file cannot be altered (more or less) or viewed by anyone. The application is able to decrypt the file using the public key and do something with it.</p>

<p>I know pretty much anyone is able to get the public key from the application, this is not a problem in this case.</p>
","<p>It should not be done. Sign instead and use symmetric encryption.</p>
","3223","<c#><.net><encryption><encryption-asymmetric>","0","1","2","2012-08-25 13:24:58","5908410","8","1","314447","","2012-08-25 13:24:58","2011-04-28 10:34:54",""
"34953732","Node.js correct way to make rsa encrypt?","<p>i'm trying to create a WS for make soap request. In the body of the message there is a field that contains an encrypted text.
I have the public key to encrypt the text but the only result that i obtain is that the text is not recognized.
I use crypto module of node for making request and the text is crypted but i don't know why is not correclty encrypted.</p>

<p>Ps i made the same thing on php with openssl_public_encrypt function and working. But i have to do it in node.js.</p>

<p>Any idea or suggestion? What is different openssl_public_encrypt from crypto.publicEncrypt function?</p>

<p>Here is the encrypt part in node.js:</p>

<pre><code>var crypto = require(""crypto"");
var fs = require('fs');

fs.readFile(""./certificate.pem"", 'utf8', function (err, data) {
    var bufferToEncrypt = new Buffer(""textToEncrypt"");
    var encrypted = crypto.publicEncrypt({""key"":data, padding:crypto.RSA_NO_PADDING}, bufferToEncrypt).toString(""base64"");
    console.log(encrypted);  // length 128
}
</code></pre>

<p>The same thing in php:</p>

<pre><code>&lt;?php

    $publicKey = ""./certificate.pem"";
    $plaintext = ""textToEncrypt"";

    openssl_public_encrypt($plaintext, $encrypted, $publicKey);

    echo base64_encode($encrypted);   //encrypted string length 128

?&gt;
</code></pre>

<p>I don't have the private key for decrypting the text, i only have the public key.</p>

<p>Also notice that the length of the encrypted text (in base64) is the same in php and in node.js.</p>
","<p>I guess the padding is your problem. In node.js you specify <code>padding:crypto.RSA_NO_PADDING</code>. When looking up the doc of <code>openssl_public_encrypt()</code> it says that it uses <code>OPENSSL_PKCS1_PADDING</code> by default. Try the following:</p>

<pre><code>var constants = require(""constants"");
var encrypted = crypto.publicEncrypt({""key"":data,
    padding:constants.RSA_PKCS1_PADDING}, bufferToEncrypt).toString(""base64"");
</code></pre>

<p>I have prepared an online demo:</p>

<ol>
<li><a href=""https://repl.it/BhjH"" rel=""noreferrer"">Encrypt using node.js</a></li>
<li>copy the resulting string</li>
<li>and paste it to <code>$encrypted_encoded</code> on <a href=""https://3v4l.org/3NKcb"" rel=""noreferrer"">PHP decryption example</a></li>
</ol>

<hr>

<p>Advise: As a rule of thumb, don't use asymmetric encryption for actual messages. Use it to protect a symmetric key instead. However, your use case might be valid, I just want to state this every time someone talks RSA encryption.</p>
","3186","<php><node.js><rsa><encryption-asymmetric>","2","7","1","2016-01-28 19:30:45","34956294","2","2","698500","","2016-01-22 19:38:24","2016-01-22 18:40:00",""
"3603714","Asymmetric Encryption","<p>I have an exam tomorrow in Advanced Development, but I am stuck on the topic of Encryption. I have read up on it at <a href=""http://support.microsoft.com/kb/246071"" rel=""noreferrer"">http://support.microsoft.com/kb/246071</a>. However I am still confused.</p>

<p>If a message is encrypted using Asymmetric Encryption, using the public key, how is the decryptor going to know the private key with which to decrypt it? Surely the only way to do this is to make the private key public, but that defeats the object of Asymmetric Encryption.</p>

<p>Can someone please explain this in a way that a non-techie would be able to understand it? Its only Asymmetric Encryption I dont understand, not Symmetric Encryption. Thanks in advance.</p>

<p>Regards,</p>

<p>Richard</p>

<p>Edit: So to sum up all the answers in the case of a web application (the specific use for which I need to know about this):</p>

<ol>
<li>User visits a website;</li>
<li>User is requested to provide a public key;</li>
<li>User creates public and private key-pair, keep the private one private and sends back the public key to the server;</li>
<li>Server uses the public key to encrypt anything which needs to be sent to the user and sends the information to the user;</li>
<li>User uses his / her private key to decrypt the response from the server;</li>
<li>User does what they need to and sends back a response to the server, using the private key to encrypt it;</li>
<li>Server decrypts using the public key.
Steps 4 - 7 may continue many times, or they may only happen once, or only 4 and 5 may occur.</li>
</ol>

<p>Is this all correct? If so then it should be all I need to know for the exam. I shouldnt think I would need to know any more to get the maximum 40% should a question on this subject come up - will mention the existence of certificates and signatures though.</p>

<p>Thank you for all the help.</p>

<p>Regards,</p>

<p>Richard</p>

<p>Edit: Well I have just got back from my exam and it went fairly ok I think. But no question on cryptography came up, however... The help was appreciated anyway. Thanks all.</p>

<p>Regards,</p>

<p>Richard</p>
","<p>The public key is provided to the ""encryptor"" by the ""decryptor"", therefore, by definition, the ""decryptor"" knows the private key (because it is part of the key pair created by the ""decryptor"".</p>
","3141","<encryption><encryption-asymmetric>","7","2","5","2010-08-31 13:41:55","3603814","3","6","297683","","2010-08-31 13:41:55","2010-08-30 19:49:51",""
"3603714","Asymmetric Encryption","<p>I have an exam tomorrow in Advanced Development, but I am stuck on the topic of Encryption. I have read up on it at <a href=""http://support.microsoft.com/kb/246071"" rel=""noreferrer"">http://support.microsoft.com/kb/246071</a>. However I am still confused.</p>

<p>If a message is encrypted using Asymmetric Encryption, using the public key, how is the decryptor going to know the private key with which to decrypt it? Surely the only way to do this is to make the private key public, but that defeats the object of Asymmetric Encryption.</p>

<p>Can someone please explain this in a way that a non-techie would be able to understand it? Its only Asymmetric Encryption I dont understand, not Symmetric Encryption. Thanks in advance.</p>

<p>Regards,</p>

<p>Richard</p>

<p>Edit: So to sum up all the answers in the case of a web application (the specific use for which I need to know about this):</p>

<ol>
<li>User visits a website;</li>
<li>User is requested to provide a public key;</li>
<li>User creates public and private key-pair, keep the private one private and sends back the public key to the server;</li>
<li>Server uses the public key to encrypt anything which needs to be sent to the user and sends the information to the user;</li>
<li>User uses his / her private key to decrypt the response from the server;</li>
<li>User does what they need to and sends back a response to the server, using the private key to encrypt it;</li>
<li>Server decrypts using the public key.
Steps 4 - 7 may continue many times, or they may only happen once, or only 4 and 5 may occur.</li>
</ol>

<p>Is this all correct? If so then it should be all I need to know for the exam. I shouldnt think I would need to know any more to get the maximum 40% should a question on this subject come up - will mention the existence of certificates and signatures though.</p>

<p>Thank you for all the help.</p>

<p>Regards,</p>

<p>Richard</p>

<p>Edit: Well I have just got back from my exam and it went fairly ok I think. But no question on cryptography came up, however... The help was appreciated anyway. Thanks all.</p>

<p>Regards,</p>

<p>Richard</p>
","<p>Let's say ""decryptor"" = D, and ""encryptor"" = E.</p>

<p>D previously sent his public key to E, so E can encrypt the mesage. Because only D knows his own private key, only D will know how to decrypt the message E just sent him (remember: one key is used to encrypt, the other to decrypt). In this way, you get privacy.</p>
","3141","<encryption><encryption-asymmetric>","7","1","5","2010-08-31 13:41:55","3603814","3","6","297683","","2010-08-31 13:41:55","2010-08-30 19:49:51",""
"3603714","Asymmetric Encryption","<p>I have an exam tomorrow in Advanced Development, but I am stuck on the topic of Encryption. I have read up on it at <a href=""http://support.microsoft.com/kb/246071"" rel=""noreferrer"">http://support.microsoft.com/kb/246071</a>. However I am still confused.</p>

<p>If a message is encrypted using Asymmetric Encryption, using the public key, how is the decryptor going to know the private key with which to decrypt it? Surely the only way to do this is to make the private key public, but that defeats the object of Asymmetric Encryption.</p>

<p>Can someone please explain this in a way that a non-techie would be able to understand it? Its only Asymmetric Encryption I dont understand, not Symmetric Encryption. Thanks in advance.</p>

<p>Regards,</p>

<p>Richard</p>

<p>Edit: So to sum up all the answers in the case of a web application (the specific use for which I need to know about this):</p>

<ol>
<li>User visits a website;</li>
<li>User is requested to provide a public key;</li>
<li>User creates public and private key-pair, keep the private one private and sends back the public key to the server;</li>
<li>Server uses the public key to encrypt anything which needs to be sent to the user and sends the information to the user;</li>
<li>User uses his / her private key to decrypt the response from the server;</li>
<li>User does what they need to and sends back a response to the server, using the private key to encrypt it;</li>
<li>Server decrypts using the public key.
Steps 4 - 7 may continue many times, or they may only happen once, or only 4 and 5 may occur.</li>
</ol>

<p>Is this all correct? If so then it should be all I need to know for the exam. I shouldnt think I would need to know any more to get the maximum 40% should a question on this subject come up - will mention the existence of certificates and signatures though.</p>

<p>Thank you for all the help.</p>

<p>Regards,</p>

<p>Richard</p>

<p>Edit: Well I have just got back from my exam and it went fairly ok I think. But no question on cryptography came up, however... The help was appreciated anyway. Thanks all.</p>

<p>Regards,</p>

<p>Richard</p>
","<p>Alice creates her Private Key + Public Key. She keeps her Private Key private. She makes her Public Key public.</p>

<p>Bob takes Alice's Public Key (he should first verify, that it's really Alice's Public Key!), and uses it to encrypt a message, which he sends to Alice.</p>

<p>Alice can decrypt the message using her Private Key.</p>
","3141","<encryption><encryption-asymmetric>","7","7","5","2010-08-31 13:41:55","3603814","3","6","297683","","2010-08-31 13:41:55","2010-08-30 19:49:51",""
"3603714","Asymmetric Encryption","<p>I have an exam tomorrow in Advanced Development, but I am stuck on the topic of Encryption. I have read up on it at <a href=""http://support.microsoft.com/kb/246071"" rel=""noreferrer"">http://support.microsoft.com/kb/246071</a>. However I am still confused.</p>

<p>If a message is encrypted using Asymmetric Encryption, using the public key, how is the decryptor going to know the private key with which to decrypt it? Surely the only way to do this is to make the private key public, but that defeats the object of Asymmetric Encryption.</p>

<p>Can someone please explain this in a way that a non-techie would be able to understand it? Its only Asymmetric Encryption I dont understand, not Symmetric Encryption. Thanks in advance.</p>

<p>Regards,</p>

<p>Richard</p>

<p>Edit: So to sum up all the answers in the case of a web application (the specific use for which I need to know about this):</p>

<ol>
<li>User visits a website;</li>
<li>User is requested to provide a public key;</li>
<li>User creates public and private key-pair, keep the private one private and sends back the public key to the server;</li>
<li>Server uses the public key to encrypt anything which needs to be sent to the user and sends the information to the user;</li>
<li>User uses his / her private key to decrypt the response from the server;</li>
<li>User does what they need to and sends back a response to the server, using the private key to encrypt it;</li>
<li>Server decrypts using the public key.
Steps 4 - 7 may continue many times, or they may only happen once, or only 4 and 5 may occur.</li>
</ol>

<p>Is this all correct? If so then it should be all I need to know for the exam. I shouldnt think I would need to know any more to get the maximum 40% should a question on this subject come up - will mention the existence of certificates and signatures though.</p>

<p>Thank you for all the help.</p>

<p>Regards,</p>

<p>Richard</p>

<p>Edit: Well I have just got back from my exam and it went fairly ok I think. But no question on cryptography came up, however... The help was appreciated anyway. Thanks all.</p>

<p>Regards,</p>

<p>Richard</p>
","<p>Others have provided a ""generic"" description and I'll go deeper into the real-life side.</p>

<p>Most modern asymmetric encryption standards operate not with raw public and private keys, but with more complex wrappers, such as X.509 certificates or OpenPGP keys (these are two most popular asymmetric encryption infrastructures today). Both certificates and OpenPGP keys contain extra information that lets them be easily identified, searched for and managed.</p>

<p>Now, the encrypted data block usually includes the public part (i.e. the certificate or public OpenPGP key) used for encryption, or at least the ID (hash of this public part). The recipient of the data usually has (or is supposed to have) both public and private parts (private keys are usually kept together with certificates or public openpgp keys) at hand. So when the recipient receives the encrypted data, he knows that he needs to look his private key storage for public part with given ID (or for given public part when it's included into the encrypted data). </p>

<p>There exist cases when nothing is included. Then the recipient has nothing to do but try all available private keys for decryption. But such cases are rare as by default the certificate or key id are present in the encrypted data block. </p>
","3141","<encryption><encryption-asymmetric>","7","5","5","2010-08-31 13:41:55","3603814","3","6","297683","","2010-08-31 13:41:55","2010-08-30 19:49:51",""
"3603714","Asymmetric Encryption","<p>I have an exam tomorrow in Advanced Development, but I am stuck on the topic of Encryption. I have read up on it at <a href=""http://support.microsoft.com/kb/246071"" rel=""noreferrer"">http://support.microsoft.com/kb/246071</a>. However I am still confused.</p>

<p>If a message is encrypted using Asymmetric Encryption, using the public key, how is the decryptor going to know the private key with which to decrypt it? Surely the only way to do this is to make the private key public, but that defeats the object of Asymmetric Encryption.</p>

<p>Can someone please explain this in a way that a non-techie would be able to understand it? Its only Asymmetric Encryption I dont understand, not Symmetric Encryption. Thanks in advance.</p>

<p>Regards,</p>

<p>Richard</p>

<p>Edit: So to sum up all the answers in the case of a web application (the specific use for which I need to know about this):</p>

<ol>
<li>User visits a website;</li>
<li>User is requested to provide a public key;</li>
<li>User creates public and private key-pair, keep the private one private and sends back the public key to the server;</li>
<li>Server uses the public key to encrypt anything which needs to be sent to the user and sends the information to the user;</li>
<li>User uses his / her private key to decrypt the response from the server;</li>
<li>User does what they need to and sends back a response to the server, using the private key to encrypt it;</li>
<li>Server decrypts using the public key.
Steps 4 - 7 may continue many times, or they may only happen once, or only 4 and 5 may occur.</li>
</ol>

<p>Is this all correct? If so then it should be all I need to know for the exam. I shouldnt think I would need to know any more to get the maximum 40% should a question on this subject come up - will mention the existence of certificates and signatures though.</p>

<p>Thank you for all the help.</p>

<p>Regards,</p>

<p>Richard</p>

<p>Edit: Well I have just got back from my exam and it went fairly ok I think. But no question on cryptography came up, however... The help was appreciated anyway. Thanks all.</p>

<p>Regards,</p>

<p>Richard</p>
","<p>A private key is meant to be known only by its legitimate user and not distributed. Its counterpart, the public key, may be distributed to anyone.</p>

<p>Based on this, you can get 4 operations:</p>

<ul>
<li>encrypt using the public key</li>
<li>decrypt using the private key</li>
<li>sign using the private key</li>
<li>verify the signature using the public key</li>
</ul>

<p>The next problem you may encounter is the binding of an identity to a public key (as you wouldn't want to encrypt something with or trust something signed with the public key of an impostor). There are various models of public key distributions. Typically, you can have:</p>

<ul>
<li>a <a href=""http://en.wikipedia.org/wiki/Web_of_trust"" rel=""noreferrer"">web of trust</a>, where people sign each other's association between the public key and the identity: this is typically the PGP model.</li>
<li>a <a href=""http://en.wikipedia.org/wiki/Public_key_infrastructure"" rel=""noreferrer"">public key infrastructure</a> (PKI) where you get certification authorities to produce certificates, often with intermediates, in a tree-like hierarchy. (PGP can use this model too, but this seems less common.)</li>
</ul>
","3141","<encryption><encryption-asymmetric>","7","13","5","2010-08-31 13:41:55","3603814","3","6","297683","","2010-08-31 13:41:55","2010-08-30 19:49:51",""
"40367279","RsaSecurityKey does not take RSAParameters as arguments","<p>I want to generate a JWT Token in .Net 4.5 using an asymmetric key that I provide myself, but I am running into a few issues with the System.IdentityModel.Tokens.Jwt, version 4.0.3.</p>

<p>Preferably I would create my own 2048 keys, like provider allows me to do.  The RSA.Create() constructor creates 1024 keys.</p>

<pre><code>using (RSACryptoServiceProvider provider = new RSACryptoServiceProvider(2048))
        {
            var publicPrivate = provider.ToXmlString(true);
            var publicKeyOnly = provider.ToXmlString(false);

            var stuff = provider.ExportParameters(true);

            signingCredentials = new SigningCredentials(new RsaSecurityKey(RSA.Create()), SecurityAlgorithms.RsaSha256Signature, SecurityAlgorithms.Sha256Digest); //no idea how to pull the key out of here.

        }
</code></pre>

<p>In many examples one can drop RSAParameters into the RsaSecurityKey constructor, but now it only takes the RSA.Create() constructor (with optional string parameter)  The following code snip comes from <a href=""https://stackoverflow.com/a/38233644"">https://stackoverflow.com/a/38233644</a> Note that in this example the RSAParameters go nicely into the RsaSecurityKey constructor, which I cannot do with my version, I am restricted to using RSA.Create, it seams.</p>

<pre><code>// NOTE: Replace this with your actual RSA public/private keypair!
var provider = new RSACryptoServiceProvider(2048);
var parameters = provider.ExportParameters(true);

// Build the credentials used to sign the JWT
var signingKey = new RsaSecurityKey(parameters);  //not an option for me, unfortunately
</code></pre>
","<p>Here is what I did.  First I ran the debugger and the first time through I capture the XML from my new provider using the ToXmlString(Boolean) method of the new RSACryptoServiceProvider(2048).  Then I made that an XML file for storage.  (In this example I just use my hard drive for storage, obviously not production code.)</p>

<p>Now that I have the RSAPrameters, I have the key ""that I provide myself"", it could come from any secure storage - doesn't matter for this answer.</p>

<pre><code>XmlDocument publicXmlParam = new XmlDocument();
publicXmlParam.Load(""C:\\rsapublicprivate.xml"");

// Here I ""utilize my own 2048 keys""
RSACryptoServiceProvider provider = new RSACryptoServiceProvider(2048);

//This was the trick, we pass the RSA parameters as XML into the provider.           
provider.FromXmlString(publicXmlParam.OuterXml); 

// Then we use the provider in the constructor of the RsaSecurityKey
var key = new RsaSecurityKey(provider); 

signingCredentials = 
    new SigningCredentials(
        key, 
        SecurityAlgorithms.RsaSha256Signature,   
        SecurityAlgorithms.Sha256Digest); 
</code></pre>

<p>Now I have the signing credentials that I need to sign my JWT Token.</p>
","3102","<c#><.net><jwt><encryption-asymmetric>","3","2","1","2016-11-02 14:04:45","","1","","-1","","2017-05-23 12:03:05","2016-11-01 19:28:23",""
"939687","Symmetric encryption key vs. Asymmetric keys - ssl","<p>I am developing a client server app that uses ssl (openssl) to establish a secure communication channel between the client and the server. I believe I have two options now for secure data transfer between the client and the server. One option is to continue with the data transfer on the established secure ssl channel between the client and the server even though the encryption/decryption process will be slow because of the use of asymmetric keys. The other option is to transfer a symmetric key on the ssl channel and close the ssl channel once the symmetric key is delivered to the client. Communication thereafter will happen on a regular TCP channel using the symmetric key which I believe will be much faster than using asymmetric keys. Are there any downsides to this approach? One thing that is obvious with the symmetric key approach is the process of key management which I am thinking of handling by not storing the keys on the client at all. Symmetric key will be delivered to the client on start up over an SSL channel. Key will NOT be stored in the client at all. Any thoughts?</p>
","<p>You are mixing things up. Ssl uses an asymetric key (defined in the certificate) to pass a autogenerated symetric key between the client and the server. This symetric key is then used throughout the secure session (the channel).</p>

<p>So basically, you already have a fast symetric encryption when using ssl. The only asymetric encryption takes place at the very beginning of the communication.</p>

<p>Don't try to manage your symetric keys on your own. It will not work.</p>
","3042","<ssl><openssl><encryption-symmetric><encryption-asymmetric>","2","7","3","2017-02-07 23:08:30","939713","0","1","3204551","","2016-02-05 21:42:22","2009-06-02 13:52:12",""
"939687","Symmetric encryption key vs. Asymmetric keys - ssl","<p>I am developing a client server app that uses ssl (openssl) to establish a secure communication channel between the client and the server. I believe I have two options now for secure data transfer between the client and the server. One option is to continue with the data transfer on the established secure ssl channel between the client and the server even though the encryption/decryption process will be slow because of the use of asymmetric keys. The other option is to transfer a symmetric key on the ssl channel and close the ssl channel once the symmetric key is delivered to the client. Communication thereafter will happen on a regular TCP channel using the symmetric key which I believe will be much faster than using asymmetric keys. Are there any downsides to this approach? One thing that is obvious with the symmetric key approach is the process of key management which I am thinking of handling by not storing the keys on the client at all. Symmetric key will be delivered to the client on start up over an SSL channel. Key will NOT be stored in the client at all. Any thoughts?</p>
","<p>Keep using the SSL connection because SSL uses a symmetric cypher after the initial phase.</p>
","3042","<ssl><openssl><encryption-symmetric><encryption-asymmetric>","2","3","3","2017-02-07 23:08:30","939713","0","1","3204551","","2016-02-05 21:42:22","2009-06-02 13:52:12",""
"939687","Symmetric encryption key vs. Asymmetric keys - ssl","<p>I am developing a client server app that uses ssl (openssl) to establish a secure communication channel between the client and the server. I believe I have two options now for secure data transfer between the client and the server. One option is to continue with the data transfer on the established secure ssl channel between the client and the server even though the encryption/decryption process will be slow because of the use of asymmetric keys. The other option is to transfer a symmetric key on the ssl channel and close the ssl channel once the symmetric key is delivered to the client. Communication thereafter will happen on a regular TCP channel using the symmetric key which I believe will be much faster than using asymmetric keys. Are there any downsides to this approach? One thing that is obvious with the symmetric key approach is the process of key management which I am thinking of handling by not storing the keys on the client at all. Symmetric key will be delivered to the client on start up over an SSL channel. Key will NOT be stored in the client at all. Any thoughts?</p>
","<blockquote>
  <p>One option is to continue with the data transfer on the established secure ssl channel between the client and the server even though the encryption/decryption process will be slow because of the use of asymmetric keys.</p>
</blockquote>

<p>No it won't. SSL uses symmetric encryption.</p>

<blockquote>
  <p>The other option is to transfer a symmetric key on the ssl channel and close the ssl channel once the symmetric key is delivered to the client. </p>
</blockquote>

<p>The client and server already have a symmetric encryption key, as soon as the session is estalbished. This would be merely redundant.</p>

<p>There is no problem here to solve.</p>
","3042","<ssl><openssl><encryption-symmetric><encryption-asymmetric>","2","0","3","2017-02-07 23:08:30","939713","0","1","3204551","","2016-02-05 21:42:22","2009-06-02 13:52:12",""
"14263346","How to perform asymmetric encryption with Botan","<p>I'm using Botan to generate hash, perform encryption with aes 256 and now i want to perform asymmetric encryption with that. Reading this page: <a href=""http://botan.randombit.net/pubkey.html"" rel=""nofollow"">http://botan.randombit.net/pubkey.html</a>
I created a code to generate the public and private key for RSA encryption, but i not understand how to encrypt and decrypt data, can someone help me?
I'm using Botan 1.8.8 2009-11-03.</p>

<pre><code>void generatekey()
{
    LibraryInitializer init;

    std::ostringstream pub;
    std::ostringstream priv;

    int bits = 1024;

    AutoSeeded_RNG rng;

    RSA_PrivateKey key(rng, bits);
    pub &lt;&lt; X509::PEM_encode(key);
    priv &lt;&lt; PKCS8::PEM_encode(key);

    qDebug() &lt;&lt; QString(pub.str().c_str());
    qDebug() &lt;&lt; QString(priv.str().c_str());
}
</code></pre>
","<p>After reading some tutorials i wrote this code to asymmetric encryption.</p>

<pre><code>#include &lt;QDebug&gt;
#include &lt;botan/botan.h&gt;
#include &lt;botan/rsa.h&gt;
#include &lt;botan/look_pk.h&gt;

using namespace Botan;

void encryptdata()
{
    try
    {
        QString text = ""abc"";

        LibraryInitializer init;

        AutoSeeded_RNG rng;

        RSA_PrivateKey key(rng, 1024);

        std::string pub = X509::PEM_encode(key);

        std::string priv = PKCS8::PEM_encode(key);

        DataSource_Memory key_pub(pub);

        DataSource_Memory key_priv(priv);

        X509_PublicKey *pub_rsa = X509::load_key(key_pub);

        PKCS8_PrivateKey *priv_rsa = PKCS8::load_key(key_priv, rng);

        PK_Encrypting_Key *enckey = dynamic_cast&lt;PK_Encrypting_Key*&gt;(pub_rsa);

        PK_Decrypting_Key *deckey = dynamic_cast&lt;PK_Decrypting_Key*&gt;(priv_rsa);

        PK_Encryptor *enc = get_pk_encryptor(*enckey, ""EME1(SHA-256)"");

        PK_Decryptor *dec = get_pk_decryptor(*deckey, ""EME1(SHA-256)"");

        QByteArray array = text.toLatin1();

        byte msgtoencrypt[array.count()];

        for (int i = 0; i &lt; array.count(); i++)
        {
            msgtoencrypt[i] = array[i];
        }

        SecureVector&lt;byte&gt; ciphertext = enc-&gt;encrypt(msgtoencrypt, sizeof(msgtoencrypt), rng);

        SecureVector&lt;byte&gt; plaintext = dec-&gt;decrypt(ciphertext, ciphertext.size());

        QByteArray encrypted;

        for (uint i = 0; i &lt; ciphertext.size(); i++)
        {
            encrypted[i] = ciphertext[i];
        }

        QByteArray result;

        for (uint i = 0; i &lt; plaintext.size(); i++)
        {
            result[i] = plaintext[i];
        }

        if (array == result)
        {
            qDebug() &lt;&lt; ""Ok"";
        }
        else
        {
            qDebug() &lt;&lt; ""Error"";
        }

        qDebug() &lt;&lt; QString(encrypted);
        qDebug() &lt;&lt; QString(array);
        qDebug() &lt;&lt; QString(result);
    }
    catch(std::exception &amp;e)
    {
        qDebug() &lt;&lt; e.what();
    }
}
</code></pre>
","3005","<c++><qt><rsa><encryption-asymmetric><botan>","0","7","1","2013-01-24 18:36:03","14283908","1","1","","","","2013-01-10 17:07:33",""
"24322021","The data to be decrypted exceeds the maximum for this modulus of 128 bytes while encrypting data in Android and Decrypting in WCF Web Service","<p>I am an Android Developer. The task at hand is to encrypt data in my Android Application using the RSA algorithm via the Public Key modulus and Exponent provided to me and then send it over the network via JSON String to a .Net Web Service. This Web Service will decrypt the data and further use it.</p>

<p>The code that I use to encrypt the data is as follows:</p>

<pre><code>public String RSAEncrypt (final String plain) throws Exception 
{
    try{
        String strModulus = ""tr82UfeGetV7yBKcOPjFTWs7pHqqr/5YKKWMUZ/HG4HnCmWrZsOhuR1FBnMZ/g2YiosoSlu0zd7Ukz9lX7wv2RLfWXfMvZYGpAAvfYWwzbyQ2i1q+tKE/thgKNscoSRellDD+uJcYn1H4hnaudVyYJH9miVhOKhKlExMzw8an6U="";
        String strExponent = ""AQAB"";
        byte[] modulusBytes = strModulus.getBytes();
        byte[] exponentBytes = strExponent.getBytes();
        BigInteger modulus = new BigInteger(1, modulusBytes );               
        BigInteger exponent = new BigInteger(1, exponentBytes);

        RSAPublicKeySpec rsaPubKey = new RSAPublicKeySpec(modulus, exponent);
        KeyFactory fact = KeyFactory.getInstance(""RSA"");
        PublicKey pubKey = fact.generatePublic(rsaPubKey);

        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, pubKey);

        byte[] plainBytes = new String(""Manchester United"").getBytes(""UTF-8"");
        byte[] cipherData = cipher.doFinal(plainBytes);
        encryptedString = Base64.encodeToString(cipherData, Base64.NO_PADDING);
    }
    catch(Exception e){
        Log.e(""Error"", e.toString());
    }

    return encryptedString;
}
</code></pre>

<p>The above code gives me a string that I pass to the .Net Web Service. But for some reason the Web Service is not being able to decrypt this data appropriately and presents the error:
The data to be decrypted exceeds the maximum for this modulus of 128 bytes</p>

<p>I tried to help out but I cannot understand what is happening.</p>

<p>I made the following alterations in my code:
Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding""); instead of 
Cipher cipher = Cipher.getInstance(""RSA"");</p>

<p>Also provided 'Base64.NO_PADDING' while encrypting the data.</p>

<p>The ASP.Net code is as follows:</p>

<pre><code>            const int PROVIDER_RSA_FULL = 1;
            const string CONTAINER_NAME = ""Tracker"";

            CspParameters cspParams;
            cspParams = new CspParameters(PROVIDER_RSA_FULL);
            cspParams.KeyContainerName = CONTAINER_NAME;
            RSACryptoServiceProvider rsa1 = new RSACryptoServiceProvider(cspParams);
            rsa1.FromXmlString(""&lt;RSAKeyValue&gt;&lt;Modulus&gt;tr82UfeGetV7yBKcOPjFTWs7pHqqr/5YKKWMUZ/HG4HnCmWrZsOhuR1FBnMZ/g2YiosoSlu0zd7Ukz9lX7wv2RLfWXfMvZYGpAAvfYWwzbyQ2i1q+tKE/thgKNscoSRellDD+uJcYn1H4hnaudVyYJH9miVhOKhKlExMzw8an6U=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;6e0nv7EBFBugtpoB+ozpg1J4js8E+DVyWCuBsERBPzqu4H7Z/oeLIRSC8Gi5GZgrCpBf3EvyIluM7rzaIfNThQ==&lt;/P&gt;&lt;Q&gt;x/29X9ns1WcXC42IJjLDjscz5ygdVh79dm8B2tQVbqwyhDsQ6OIOQdu5+eHf4hUMoTrM9KkS2F6FGlLXuaOFoQ==&lt;/Q&gt;&lt;DP&gt;kTS2LMaJ/dpce5zDx6w6s1q5HSSiWBSNIu/2s9zah448yXvUg6vNkD40PVk0NRAA/7C44H2AExWzOOqfmN17JQ==&lt;/DP&gt;&lt;DQ&gt;xtAx9drQPWnpl/uQUOEAVa0kpPTVDStrr9Q1FNTnpYkcAyYw7kLkB4anAIoSpk9kqdeprsNxz5VPXtbiTFMKYQ==&lt;/DQ&gt;&lt;InverseQ&gt;O0594NMjnjSp+/NAa1kQxoQNzn1qqq+p1Zb+kT3/jRc/0d7ZnqSSpxFMXfxx3yZkNAOPDOdbckPQbRZ13RKBHg==&lt;/InverseQ&gt;&lt;D&gt;bjVEagwvkrZaTt9CTW1hd3362weLFlX6DpE/3R3RcrpVfkSwKGpEhqGrNeeGPlsuqiaf5rAFir4eTqrF1QVliKsU4XE0RyzP5lHGc7dlX4DOHMjs2R9nNWv8QOTPoaRuLrLGorqBXlw/jQPxFI6gQzkIIjzuf//lDVnFam3dw4E=&lt;/D&gt;&lt;/RSAKeyValue&gt;"");

            string data2Decrypt = ""SeuUUjdSbFQlcwaCFVZ9fN0t3aXpItXU4+pkuztVgky77SBokBATKj+56+irtCfT1lSGRZbbzgQTd8zpcjPsT6J+7AyBwRwuv418JyKINNxPsDVFKfupViu8MOoxWzjmjZE5p54AjByA6dzGSR9UogFHhFSMZWJ5OELwZFSz5wFHyMaeIm1UnEiRDDjPTY/aIuh56WnZPXUmP3D54bAwDXPFtY0JjjiyxZetnA"";

            byte[] encyrptedBytes = Convert.FromBase64String(data2Decrypt);

            byte[] plain = rsa1.Decrypt(encyrptedBytes, false);
            string decryptedString = System.Text.Encoding.UTF8.GetString(plain);
</code></pre>

<p>The error occurs here:
byte[] plain = rsa1.Decrypt(encyrptedBytes, false);</p>

<p>Decrypt is a function of the RSACryptoProvider class in .Net itself. </p>

<p>I have checked a few links like:
<a href=""https://stackoverflow.com/questions/21604819/the-data-to-be-decrypted-exceeds-the-maximum-for-this-modulus-of-128-bytes-rsa"">The data to be decrypted exceeds the maximum for this modulus of 128 bytes. RSA DECRYPTION c#</a></p>

<p><a href=""https://stackoverflow.com/questions/18783737/the-data-to-be-decrypted-exceeds-the-maximum-for-this-modulus-of-128-bytes"">The data to be decrypted exceeds the maximum for this modulus of 128 bytes</a></p>

<p>However, I am not being able to implement the suggestions. Any help will be appreciated. Thank you!</p>
","<p>In your Java code, you have the modulus and exponent encoded as <strong>Base64</strong> strings, but you are converting those to byte arrays by decoding using the <strong>string encoding</strong> (e.g. UTF-8) which gives you bogus byte values. This is giving you an entirely different RSA key than you expect:</p>

<p>Sun RSA public key, 1375 bits
  modulus: 750169282846494125860884712723073313436806987678989257696854519163422196468501094334772708285571263987960096312310946772203386096382092764988823316042225715695209682181694351362408270131738979229545667503402617569939108631330090897309670319383704572983438399762295114985980168234669536869729771611691862551491497864929321166916789165923322527018195770714618713254889722551163557798154618552019060264304749542004029
  public exponent: 1095844162</p>

<p>Your ciphertext is in modulus 1375, not 1024, so the error string is correct. The Java-produced ciphertext of modulus 1375 (172 bytes) exceeds the modulus of the .NET code, which is still 1024 (limited to 128 bytes.)</p>

<p>If instead, you Base64-decode those strings like this, for example:</p>

<pre><code>byte[] modulusBytes = DatatypeConverter.parseBase64Binary(""tr82UfeGetV7yBKcOPjFTWs7pHqqr/5YKKWMUZ/HG4HnCmWrZsOhuR1FBnMZ/g2YiosoSlu0zd7Ukz9lX7wv2RLfWXfMvZYGpAAvfYWwzbyQ2i1q+tKE/thgKNscoSRellDD+uJcYn1H4hnaudVyYJH9miVhOKhKlExMzw8an6U="");
byte[] exponentBytes = DatatypeConverter.parseBase64Binary(""AQAB"");
</code></pre>

<p>then you will get the key that you wanted:</p>

<p>Sun RSA public key, 1024 bits
  modulus: 128329253200625851747417306407495181460638722403079978934516135424027698446198581565013203888628021918042144433585511434660221274570695228957705446643239452347022609986771847076542293947545868471690675464836702700925020694185362910844461481736938124375366838112503820421836105957170854998527632432367452987301
  public exponent: 65537</p>

<p>and your Java code will product this result:</p>

<p>""P2ENQbBu3rpBcrfnzbOj6MLCGBABclQnVY6QpHJ54uXZnKSd2Ll9fJ6g+avsvbWib9SNKsL9Yx+PeRdC20W6BXfblSnXMAbZxJ2VQCQho44rR+k6B9HrB2i0zl9pdLSRxm9k0poQVG1I/yplmK1H9TGqlZp1oYnbzWrS8JiRd5w=""</p>

<p>and your .NET code will decrypt correctly to ""Manchester United"".</p>

<p>EDIT:</p>

<p>Base64.decode should match the output of DatatypeConverter.parseBase64Binary. The output I get with this loop:</p>

<pre><code>for (int i = 0; i &lt; modulusBytes.length; i++)
{
    System.out.print("" "");
    System.out.print(modulusBytes[i]);
}
System.out.println();
</code></pre>

<p>is this:</p>

<pre><code> -74 -65 54 81 -9 -122 122 -43 123 -56 18 -100 56 -8 -59 77 107 59 -92 122 -86 -81 -2 88 40 -91 -116 81 -97 -57 27 -127 -25 10 101 -85 102 -61 -95 -71 29 69 6 115 25 -2 13 -104 -118 -117 40 74 91 -76 -51 -34 -44 -109 63 101 95 -68 47 -39 18 -33 89 119 -52 -67 -106 6 -92 0 47 125 -123 -80 -51 -68 -112 -38 45 106 -6 -46 -124 -2 -40 96 40 -37 28 -95 36 94 -106 80 -61 -6 -30 92 98 125 71 -30 25 -38 -71 -43 114 96 -111 -3 -102 37 97 56 -88 74 -108 76 76 -49 15 26 -97 -91
</code></pre>

<p>Try Base64-decoding the string on the .NET platform, and see if it matches the decode result on the Java platform.</p>
","3004","<android><asp.net><wcf><rsa><encryption-asymmetric>","0","0","1","2014-06-20 16:06:07","24322997","0","4","-1","","2017-05-23 11:57:35","2014-06-20 07:24:25",""
"37791013","HTTPS uses Asymmetric or Symmetric encryption?","<p>I have searched all this morning but I've found websites where it is said that data is sent through an asymmetric encryption using the TLS protocol
Then I found the contrary
Please can you tell me which is true? Thanks
And does anyone know a guide where it is explained step by step the handshake of tls protocol over https?</p>
","<p>The best answer is that it does both. TLS uses asymmetric encryption to first establish identity of one or both parties. Secondly, it uses asymmetric encryption to exchange a key to a symmetric cipher. So asymmetric is only used during the initial setup of communication.</p>

<p>Symmetric encryption which is used through the rest is faster and more efficient with large amounts of data transfer. The keys are smaller which is generally why it's faster, but it's algorithm is also easier to process.</p>

<p>As far as a guide goes, a simple Google search will give you plenty. The one I found from <a href=""https://www.ibm.com/support/knowledgecenter/SSFKSJ_7.1.0/com.ibm.mq.doc/sy10660_.htm"" rel=""noreferrer"">IBM</a> looks decent. They removed some of the excess detail to make it easier to understand.</p>
","2996","<encryption><https><encryption-symmetric><encryption-asymmetric>","4","8","1","2016-06-13 13:55:31","37791162","2","","","","","2016-06-13 13:25:16",""
"1488680","Implementing License Validation with RSA","<p>I am about to sell a program I have written in C# and I want to control licenses for it, strictly. That means I want to let the client connect to my server every single time it starts. This also gives me the ability to disable keys (in case of chargebacks on paypal or distribution of the code). Of course this might be a hassle for other users, but it is necessary in this case.
Since I was unable to find any good .NET Licensing systems that are uncracked, I wanted to take the approach of writing a little one myself.
My plan was to do the following:</p>

<ol>
<li>Generate a key.dat containing 1024 characters that gets shipped with the software (individual to each user)</li>
<li>In the application entrypoint add a httprequest to my server that sends the key.dat + current timestamp, encrypted.</li>
<li>My HTTP server (running PHP) decrypts the request and checks if the key is valid (in my database) and replies with the ""access level"" (license type). If the key is invalid or disabled it replies with an errorcode. Just like with the request, the reply is being salted with a timestamp, so someone can't validate his program by sending a valid packet to himself. The timestamp is being checked in the client. The reply is encrypted with RSA and a previously generated public key.</li>
<li>Client receives response, decrypts with private key and reacts.</li>
</ol>

<p><strong>Is RSA the correct approach for this, so I can assure that the packets are sent by me and are not crafted (by noone else having the public key)?
Is there a better approach for solving this problem?</strong></p>
","<blockquote>
  <p><strong>Is RSA the correct approach for this?</strong></p>
</blockquote>

<p>I do not think RSA is your best choice.</p>

<p>One of the capabilities of PKE (Public Key Encryption) is that it lets parties talk to each other who previously have never exchanged information before (eg. strangers).</p>

<p>I do not see this applying to your case.  Your software knows your server well.  They are not ""strangers"".</p>

<p>Consider instead Shared Secret Key encryption, where each copy of the software you distribute is given a unique secret key, and your server knows each user's secret key as well.  The keys are never sent, and must be protected, but can still be used to encrypt, sign, and validate communications.</p>

<hr>

<p><strong>Edit</strong> After considering the comments and other answers.</p>

<p>Anyone who wants your software badly enough will be able to bypass the authentication completely.   RSA does nothing to prevent that.</p>

<p>The real question is: Does breaking a single license make <em>all</em> licenses vulnerable/worthless.   In both cases, (RSA and Secret Key), the answer is No.  Just because one copy of the software got hacked and got its key exposed, or the licenses system bypassed, other copies are no more exposed.  PKE and SSE seem equal in that respect to me.</p>

<p>Because Shared Secret Key is easier to implement, and computationally faster to execute, I think it is preferred in this case over RSA/PKE.  That is not to say RSA is ""wrong"".  It will accomplish what you are after, to the same degree that SSE will (no more, no less).  But I think SSE is the smarter choice.</p>
","2927","<c#><encryption><licensing><rsa><encryption-asymmetric>","1","0","2","2009-09-28 19:55:09","","5","2","30453","","2009-09-28 18:54:24","2009-09-28 18:43:57",""
"1488680","Implementing License Validation with RSA","<p>I am about to sell a program I have written in C# and I want to control licenses for it, strictly. That means I want to let the client connect to my server every single time it starts. This also gives me the ability to disable keys (in case of chargebacks on paypal or distribution of the code). Of course this might be a hassle for other users, but it is necessary in this case.
Since I was unable to find any good .NET Licensing systems that are uncracked, I wanted to take the approach of writing a little one myself.
My plan was to do the following:</p>

<ol>
<li>Generate a key.dat containing 1024 characters that gets shipped with the software (individual to each user)</li>
<li>In the application entrypoint add a httprequest to my server that sends the key.dat + current timestamp, encrypted.</li>
<li>My HTTP server (running PHP) decrypts the request and checks if the key is valid (in my database) and replies with the ""access level"" (license type). If the key is invalid or disabled it replies with an errorcode. Just like with the request, the reply is being salted with a timestamp, so someone can't validate his program by sending a valid packet to himself. The timestamp is being checked in the client. The reply is encrypted with RSA and a previously generated public key.</li>
<li>Client receives response, decrypts with private key and reacts.</li>
</ol>

<p><strong>Is RSA the correct approach for this, so I can assure that the packets are sent by me and are not crafted (by noone else having the public key)?
Is there a better approach for solving this problem?</strong></p>
","<p>Someone who wants your software bad enough will just decompile it and remove the part of the code that phones home on startup.</p>

<p>If you were to add a checksum to the app that checks whether the code has been altered, someone can just change the checksum the program checks against (or remove the check entirely).</p>

<p>People who want your application enough will find ways around any type of protection you can conceive. You're better off sticking to something simple, having a product that is worth paying for (and easily) and make sure it's worth the price you're asking.</p>

<hr>

<p><strong>EDIT</strong></p>

<p>Given that protection is important, the fact that the users will have code running on their machines is a risk you can avoid. If the users don't have the code, they can't crack it. They can't copy it and share it.</p>

<p>Now, it might not apply to the application you intend to write, but you should consider writing a web, Flash or Silverlight application instead of a regular client application. That way you don't have to distribute the code to customers. All you have to do is manage credentials into the application, which should be a lot easier than your round-about RSA system.</p>

<p>It's also easier to push out new versions of the software in a centralized model, and you won't have to worry about theft at all. Of course, load will become an issue when it wasn't before. And not all applications can be centralized easily (or at all). I'm just proposing this to make sure you consider it because it is a valid solution to your problem.</p>

<p>A web-based application will have the same issues as your application (i.e. it will be down whenever the user is offline, whenever the network is down, whenever your server is down, etc). So there's no added risk in that regard.</p>
","2927","<c#><encryption><licensing><rsa><encryption-asymmetric>","1","3","2","2009-09-28 19:55:09","","5","2","30453","","2009-09-28 18:54:24","2009-09-28 18:43:57",""
"35584864","encryption and decryption using certificates in C#","<p>I have a big XML that needs to be encrypted on one server (by one c# application), and needs to be decrypted on another server (by another c# application). The XML contains the critical  information for which this encryption needs to be done.</p>

<p>My real need is that my server that does the encryption should <strong>only</strong> know the public key and the private key is known only to the server which is doing the decryption. Also, this private key should be stored in a safe area on the server such as certificates.</p>

<p>What should be the steps that can help me achieve so?</p>

<ol>
<li>Can I generate my private key and store that in certificates or the certificates will generate the private key on their own?</li>
<li>Also, if certificates generate the public and private key, can the public key be separated from the certificate and exported to the server where the encryption has to be done?</li>
</ol>
","<p>Asymmetric encryption is very processor intensive and, consequently very slow. For that reason, it is not normally used to encrypt large amounts of data.</p>

<p>What is normally done is symmetric encryption is used to encrypt the bulk of the data and asymmetric encryption (public key) is used to encrypt the keys used in the symmetric encryption.</p>

<p>The encrypted keys are transmitted with the encrypted data. The keys are decrypted (private key), then using the symmetric keys the bulk data is decrypted.</p>
","2885","<c#><certificate><encryption-asymmetric>","3","2","3","2016-02-26 08:04:30","35605875","1","2","451475","","2016-02-24 14:57:15","2016-02-23 18:00:21",""
"35584864","encryption and decryption using certificates in C#","<p>I have a big XML that needs to be encrypted on one server (by one c# application), and needs to be decrypted on another server (by another c# application). The XML contains the critical  information for which this encryption needs to be done.</p>

<p>My real need is that my server that does the encryption should <strong>only</strong> know the public key and the private key is known only to the server which is doing the decryption. Also, this private key should be stored in a safe area on the server such as certificates.</p>

<p>What should be the steps that can help me achieve so?</p>

<ol>
<li>Can I generate my private key and store that in certificates or the certificates will generate the private key on their own?</li>
<li>Also, if certificates generate the public and private key, can the public key be separated from the certificate and exported to the server where the encryption has to be done?</li>
</ol>
","<ol>
<li><p>How the key-pair and certificate are generated depends on the software used.</p></li>
<li><p>The private key can be obtained from a certificate.</p></li>
</ol>

<p>The general method is to encrypt data with a symmetric encryption algorithm such as AES and encrypting the symmetric key with asymmetric encryption algorithm such as RSA or EC and the public key. This is done for two reasons: 1. Asymmetric encryption is very slow compared to symmetric encryption. 2. The data length for Asymmetric encryption is limited by the key size: a typical key size is 2048-bits and that limits the data length to 245-bytes.</p>

<p>There is in general no way to securely store a private key (or anything) on the server other than the server being secure short of the server having an HSM or access to a TPM. The main step on making the server secure is 2-factor authentication. But if it is on a shared computer beware of root escalation exploits by other users of the server.</p>

<p>HSM - <a href=""https://en.wikipedia.org/wiki/Hardware_security_module"" rel=""nofollow"">Hardware Encryption Module</a><br>
TPM - <a href=""https://en.wikipedia.org/wiki/Trusted_Platform_Module"" rel=""nofollow"">Trusted Platform Module</a>  </p>
","2885","<c#><certificate><encryption-asymmetric>","3","2","3","2016-02-26 08:04:30","35605875","1","2","451475","","2016-02-24 14:57:15","2016-02-23 18:00:21",""
"35584864","encryption and decryption using certificates in C#","<p>I have a big XML that needs to be encrypted on one server (by one c# application), and needs to be decrypted on another server (by another c# application). The XML contains the critical  information for which this encryption needs to be done.</p>

<p>My real need is that my server that does the encryption should <strong>only</strong> know the public key and the private key is known only to the server which is doing the decryption. Also, this private key should be stored in a safe area on the server such as certificates.</p>

<p>What should be the steps that can help me achieve so?</p>

<ol>
<li>Can I generate my private key and store that in certificates or the certificates will generate the private key on their own?</li>
<li>Also, if certificates generate the public and private key, can the public key be separated from the certificate and exported to the server where the encryption has to be done?</li>
</ol>
","<p>This is how I have achieved it. 
On my server 2, I am generating a certificate(.cer) and a private key(.pvk) using the 'makecert.exe' command. Then, using the 'pvk2pfx.exe',  I am generating a .pfx file. This is the file which will now house the certificate and private key.
Now I export the certificate with just the public key to the server 1, where I encrypt the data, and on Server 2 using the certificate's private key I decrypt the data.</p>
","2885","<c#><certificate><encryption-asymmetric>","3","1","3","2016-02-26 08:04:30","35605875","1","2","451475","","2016-02-24 14:57:15","2016-02-23 18:00:21",""
"4506618","finding a generator for elgamal","<p>how are generators found for the elgamal signature scheme? are there values that are used by most programs that are good generators? or is there a method to find a generator for a prime value? if so, how? Would it be true to say that a prime number has at least 1 generator?</p>
","<p>El Gamal can be seen as a variant of the Diffie Hellman algorithm, and parameters for the latter can be used for the former. So for example you can use IKE groups 1 and 2 from <a href=""http://tools.ietf.org/html/rfc2409"" rel=""nofollow"">RFC 2409</a>, and larger IKE groups sprinkled in other RFCs. You can also follow the discussion in <a href=""http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf"" rel=""nofollow"">FIPS 186</a> for generating DSA parameters. Also, see <a href=""https://secure.wikimedia.org/wikipedia/en/wiki/Primitive_root_modulo_n"" rel=""nofollow"">this discussion of primitive roots</a>.</p>

<p>EDIT:<br>
As noted by @abc, this is wrong for el gamal signatures. Follow the DSA link (FIPS 186).</p>
","2871","<security><math><digital-signature><encryption-asymmetric>","3","0","3","2012-04-19 07:18:02","","1","2","","","","2010-12-22 06:05:42",""
"4506618","finding a generator for elgamal","<p>how are generators found for the elgamal signature scheme? are there values that are used by most programs that are good generators? or is there a method to find a generator for a prime value? if so, how? Would it be true to say that a prime number has at least 1 generator?</p>
","<p>Use DSA instead of the ElGamal signature scheme.</p>

<p>There are just too many mistakes that can be made implementing ElGamal. One of those mistakes is what GregS proposed: to use the IKE parameters. These parameters were generated for the ElGamal encryption and not for the signature scheme. The two schemes have distinct requirements. In particular using g=2 as a generator is a good choice for the encryption, but a very bad choice for the signature scheme. (See e.g. the ""Handbook of Applied Cryptography"" <a href=""http://www.cacr.math.uwaterloo.ca/hac/"" rel=""nofollow"">http://www.cacr.math.uwaterloo.ca/hac/</a> note 11.67 in chapter 11 for some details). Correct would be to select the generator randomly. But once again, if you just use DSA then you can simply avoid these pitfalls by following the standard.</p>

<p>Just to add a little more: OpenPGP <a href=""http://tools.ietf.org/html/rfc4880"" rel=""nofollow"">http://tools.ietf.org/html/rfc4880</a> used to allow ElGamal signatures, but has deprecated them some time ago. This deprecation was quite reasonable, since DSA has only advantages: it is more efficient, more secure and standardized. Of course, you could look at old PGP implementations, but it wouldn't tell you if these implementations give you reasonable choices without reading the literature first.</p>
","2871","<security><math><digital-signature><encryption-asymmetric>","3","1","3","2012-04-19 07:18:02","","1","2","","","","2010-12-22 06:05:42",""
"4506618","finding a generator for elgamal","<p>how are generators found for the elgamal signature scheme? are there values that are used by most programs that are good generators? or is there a method to find a generator for a prime value? if so, how? Would it be true to say that a prime number has at least 1 generator?</p>
","<blockquote>
  <p>how are generators found for the elgamal signature scheme?
  are there values that are used by most programs that are good generators?
  or is there a method to find a generator for a prime value? if so, how?</p>
</blockquote>

<p>You can use the generic, probabilistic algorithm 4.86 in <a href=""http://cacr.uwaterloo.ca/hac/about/chap4.pdf"" rel=""nofollow"">Handbook of Applied Cryptography</a>. You still need to weed out from the output of such algorithm the values known to be insecure for Elgamal signature though. At the very least any value that divides <em>p-1</em> (for instance 2) and any value whose inverse divides <em>p-1</em>. Note that those are the conditions I am aware of today. Some in-depth research over papers published on the topic may be needed.</p>

<p>Personally, I would not trust domain parameters already used in existing programs. The authors may not have considered all the conditions above, plus research may have highlighted new conditions since they were chosen.</p>

<blockquote>
  <p>Would it be true to say that a prime number has at least 1 generator?</p>
</blockquote>

<p>Absolutely true: there always is at least one generator for the multiplicative group over the integers modulo <em>p</em> (with <em>p</em> being a prime number). It has actually many more: <em>phi(phi(p))</em>, with <em>phi</em> being the <a href=""http://athworld.wolfram.com/TotientFunction.html"" rel=""nofollow"">totient function</a>. Not all of them will be safe for the Elgamal signature scheme though.</p>
","2871","<security><math><digital-signature><encryption-asymmetric>","3","1","3","2012-04-19 07:18:02","","1","2","","","","2010-12-22 06:05:42",""
"24191544","How to use nonces in asymmetric encryption (libsodium)?","<p>I am writing an app where users can communicate between devices with end to end encryption. For this I use the libsodium encryption library. The asymmetric encryption function, crypto_box(...) requires a nonce as one of the arguments.</p>

<p>I am a bit confused about how to handle nonces. Does every message to one person need to be encrypted using different nonces? This does not seem right since I would have to store the used nonces on a server with public access where an attacker could just use one of the used nonces again.</p>

<p>Is it enough that all messages sent from A to B have different nonces or can the nonce use to send a message from A to B not be used to send from C to B?</p>

<p>Can someone please explain this to me.</p>
","<blockquote>
  <p>Does every message to one person need to be encrypted using different nonces? </p>
</blockquote>

<p>Yes.  In fact, <em>never</em>, <em>ever</em> use the same nonce more than one for the same private key.  It is true that you would have to keep track of the nonce to accomplish this.  </p>

<blockquote>
  <p>This does not seem right since I would have to store the used nonces on a server with public access where an attacker could just use one of the used nonces again.</p>
</blockquote>

<p>Why would you have to store your nonce on a server with public access? And how do you think an attacker could ""use"" the nonce?  They would need your private key to do so.</p>

<p>Why can't you store the nonce in the same place as your private key?</p>
","2866","<encryption><encryption-asymmetric><nonce><libsodium>","7","5","2","2015-06-10 22:50:35","30768659","1","1","","","","2014-06-12 18:33:11",""
"24191544","How to use nonces in asymmetric encryption (libsodium)?","<p>I am writing an app where users can communicate between devices with end to end encryption. For this I use the libsodium encryption library. The asymmetric encryption function, crypto_box(...) requires a nonce as one of the arguments.</p>

<p>I am a bit confused about how to handle nonces. Does every message to one person need to be encrypted using different nonces? This does not seem right since I would have to store the used nonces on a server with public access where an attacker could just use one of the used nonces again.</p>

<p>Is it enough that all messages sent from A to B have different nonces or can the nonce use to send a message from A to B not be used to send from C to B?</p>

<p>Can someone please explain this to me.</p>
","<p>A unique nonce is required for every message sent using a given shared secret key. The nonce doesn't have to be secret; a simple counter is totally fine; changing a single bit in the nonce is going to make the ciphertext look totally different even if the same message is sent twice.</p>

<p>What's a shared secret? It a key calculated from (A's secret key, B's public key) or (A's public key, B's secret key). A and B perform a different calculation, based on what they have, but end up with the same shared secret.</p>

<p>The shared secrets used in <code>crypto_box</code> are 256-bit long. Which is huge. You can safely consider that shared secrets are going to be unique for each ""conversation"".</p>

<p>So, (A, B), (A, C) and (C, B) can safely exchange messages using the same nonces.
But if A sends a message to B using a given nonce, B cannot send a message to A using the same nonce. Nonces have to be unique for everything exchanged during a conversation between A and B.</p>

<p>So, a simple counter can be fine. Have A pick even numbers, leave odd numbers to B, increment the nonce by 2 after every message sent and you're good to go.</p>

<p>But the cipher used in the <code>crypto_box</code> construction actually has a really huge nonce. 192 bits.</p>

<p>Which means that if you ignore everything I wrote and just pick a random nonce every time you send a message, the probability to get a collision is so small that you can rest assured that it will never ever happen in practice.</p>

<p>Some stream ciphers included in Sodium (AES128-CTR, ChaCha20, Salsa20) have a shorter nonce, and require a counter to avoid collisions. This is why they are in the ""advanced"" section of the documentation.</p>

<p>But with <code>crypto_box</code> and <code>crypto_secretbox</code>, just pick a random nonce every time (<code>randombytes_buf(nonce, sizeof nonce)</code>) and you will be safe.</p>
","2866","<encryption><encryption-asymmetric><nonce><libsodium>","7","4","2","2015-06-10 22:50:35","30768659","1","1","","","","2014-06-12 18:33:11",""
"26954215","How to use ed25519 to encrypt/decrypt data?","<p>Currently I am investigating <a href=""https://github.com/orlp/ed25519"" rel=""nofollow"">https://github.com/orlp/ed25519</a> , and it has example for signing but how to use it for encrypting/decrypting data? Thanks </p>
","<p>You don't. ED25519 is a public-key signature system, not an encryption system. Trying to use it for a purpose it was not designed for is likely to introduce security vulnerabilities.</p>
","2850","<c><encryption><encryption-asymmetric>","2","3","2","2019-10-07 08:25:41","26978406","0","2","225647","","2019-10-07 08:25:41","2014-11-16 05:42:18",""
"26954215","How to use ed25519 to encrypt/decrypt data?","<p>Currently I am investigating <a href=""https://github.com/orlp/ed25519"" rel=""nofollow"">https://github.com/orlp/ed25519</a> , and it has example for signing but how to use it for encrypting/decrypting data? Thanks </p>
","<p>Assuming you want to send a message to Alice who has the public key <code>A</code>.</p>

<ol>
<li>Generate a new ephemeral key pair <code>e</code>, <code>E</code></li>
<li>Compute the shared DH secret between <code>e</code> and <code>A</code> using the <code>ed25519_key_exchange</code> function.</li>
<li>Use some kind of of KDF of that secret. In the simplest case a hash.</li>
<li>Use the value derived in step 3 as key in a symmetric algorithm</li>
</ol>

<p>NaCl's <code>crypto_box</code> <a href=""https://stackoverflow.com/questions/13663604/questions-about-the-nacl-crypto-library"">works</a> almost like this. The main differences are that it uses Montgomery form public keys and uses HSalsa20 as hash in step 3.</p>

<p>Some people don't feel comfortable with using the <a href=""https://crypto.stackexchange.com/questions/3260/using-same-keypair-for-diffie-hellman-and-signing"">same keypair for signing and encryption</a>. Use at your own risk. If you don't need this key reuse, I'd recommend LibSodium as an alternative.</p>
","2850","<c><encryption><encryption-asymmetric>","2","3","2","2019-10-07 08:25:41","26978406","0","2","225647","","2019-10-07 08:25:41","2014-11-16 05:42:18",""
"28046070","How to generate key pair in asymmetric encryption in java?","<p>I am trying to generate a key pair in asymmetric encryption in Java, but I am getting an <code>invalid key exception</code> error and it says <code>No installed provider supports this key: sun.security.rsa.RSAPrivateCrtKeyImpl</code>.</p>

<pre class=""lang-java prettyprint-override""><code>private static byte[] encrypt(byte[] inpBytes, PrivateKey prvk,
      String xform) throws Exception {
    Cipher cipher = Cipher.getInstance(xform);
    cipher.init(Cipher.ENCRYPT_MODE, prvk);
    return cipher.doFinal(inpBytes);
}

@Override
public byte[] uploadFile(byte[] data, String name, String file, int size)
      throws RemoteException {
    // TODO Auto-generated method stub
    byte[] keyss=null;
    try {
        OutputStream out =
          new FileOutputStream(new File(""C:\\Users\\Amaresh\\Documents\\Cloud\\""
          + name + ""\\"" + file));
        String xform = ""DES/CTR/NoPadding"";
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA""); // Original
        kpg.initialize(1024); // 512 is the keysize.//try 1024 biit
        KeyPair kp = kpg.genKeyPair();
        PublicKey pubk = kp.getPublic();
        PrivateKey prvk = kp.getPrivate();
        keyss = pubk.getEncoded();
        byte[] encBytes = encrypt(data, prvk, xform);
        System.out.println(""Keypair generated"");
        out.write(encBytes, 0, encBytes.length);
        out.close();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchProviderException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    return keyss;
}
</code></pre>

<p>I just want to do asymmetric encryption where I encrypt the data with private key and store the public key to decrypt it. I am a beginner and I am sorry for my blunt mistakes.</p>
","<p>DES Ciphers don't support RSA keys. DES is a symmetric cipher algorithm while RSA is asymmetric. Symmetric ciphers require the use of the same key for encryption and decryption while asymmetric ciphers use public/private keypairs.</p>

<p>You have two options to get your encryption working:</p>

<ol>
<li><p>You could use your current symmetric cipher and create a symmetric key (maybe by using a <a href=""http://docs.oracle.com/javase/7/docs/api/javax/crypto/KeyGenerator.html"" rel=""nofollow"">KeyGenerator</a>)  </p></li>
<li><p>You can change your cipher instance to an assymetric one like <code>""RSA""</code>.</p>

<pre><code>String xform = ""RSA"";
</code></pre></li>
</ol>

<p>Note:<br>
What you are trying to do is not encrypting but signing as encryption would be done with the public key.<br>
Furthermore you should not encrypt complete files by an asymmetric mode but only a symmetric key which you use to encrypt and decrypt your data symmetrically. See <a href=""http://en.wikipedia.org/wiki/Public-key_cryptography#Computational_cost"" rel=""nofollow"">http://en.wikipedia.org/wiki/Public-key_cryptography#Computational_cost</a>.</p>
","2809","<java><public-key-encryption><encryption-asymmetric>","0","1","2","2015-01-20 14:32:10","28047727","1","2","2382246","","2015-01-20 13:44:29","2015-01-20 13:03:58",""
"28046070","How to generate key pair in asymmetric encryption in java?","<p>I am trying to generate a key pair in asymmetric encryption in Java, but I am getting an <code>invalid key exception</code> error and it says <code>No installed provider supports this key: sun.security.rsa.RSAPrivateCrtKeyImpl</code>.</p>

<pre class=""lang-java prettyprint-override""><code>private static byte[] encrypt(byte[] inpBytes, PrivateKey prvk,
      String xform) throws Exception {
    Cipher cipher = Cipher.getInstance(xform);
    cipher.init(Cipher.ENCRYPT_MODE, prvk);
    return cipher.doFinal(inpBytes);
}

@Override
public byte[] uploadFile(byte[] data, String name, String file, int size)
      throws RemoteException {
    // TODO Auto-generated method stub
    byte[] keyss=null;
    try {
        OutputStream out =
          new FileOutputStream(new File(""C:\\Users\\Amaresh\\Documents\\Cloud\\""
          + name + ""\\"" + file));
        String xform = ""DES/CTR/NoPadding"";
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA""); // Original
        kpg.initialize(1024); // 512 is the keysize.//try 1024 biit
        KeyPair kp = kpg.genKeyPair();
        PublicKey pubk = kp.getPublic();
        PrivateKey prvk = kp.getPrivate();
        keyss = pubk.getEncoded();
        byte[] encBytes = encrypt(data, prvk, xform);
        System.out.println(""Keypair generated"");
        out.write(encBytes, 0, encBytes.length);
        out.close();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchAlgorithmException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchProviderException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    return keyss;
}
</code></pre>

<p>I just want to do asymmetric encryption where I encrypt the data with private key and store the public key to decrypt it. I am a beginner and I am sorry for my blunt mistakes.</p>
","<p>You are generating the keys correctly.</p>

<pre><code>KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(1024);
KeyPair keys = kpg.generateKeyPair();
</code></pre>

<p>The problem is in your: </p>

<pre><code>byte[] encBytes = encrypt(data, prvk, xform);
</code></pre>

<p>Most likely because you are passing in the String ""DES/CTR/NoPadding"". You cannot encrypt using DES with an RSA key pair.</p>
","2809","<java><public-key-encryption><encryption-asymmetric>","0","3","2","2015-01-20 14:32:10","28047727","1","2","2382246","","2015-01-20 13:44:29","2015-01-20 13:03:58",""
"11642668","Asymmetric encryption and Decryption C#","<p>I have implemented this code for message encryption with public key and decryption with private key..Now i need to change it encryption with private key and decrypted with public key. What should i change in the following code,i am beginner.please help.      </p>

<pre><code>public static string Encrypt(string plainText, X509Certificate2 certificate)
    {
        if (string.IsNullOrEmpty(plainText))
            throw new ArgumentNullException(""plainText"");

        using (var aesManaged = new AesManaged())
        {
            aesManaged.KeySize = 256;
            aesManaged.BlockSize = 128;
            aesManaged.Mode = CipherMode.CBC;

            // Create the streams used for encryption.
            using (var memoryStream = new MemoryStream())
            {
                // Generate a Symmetric Key used to actually encrypt the data


                RSAPKCS1KeyExchangeFormatter keyFormatter = new RSAPKCS1KeyExchangeFormatter((RSACryptoServiceProvider)certificate.PublicKey.Key);
                byte[] keyEncrypted = keyFormatter.CreateKeyExchange(aesManaged.Key, aesManaged.GetType());

                //byte[] LenSalt = new byte[_saltSize];

                // Create byte arrays to contain
                // the length values of the key and IV.
                byte[] LenK = new byte[_keyBytes];
                byte[] LenIV = new byte[_keyBytes];

                // Salt genration : 
                // default iteration count is 1000 in .NET (this is the same as when using Constructor(string password, int salt))
                //using (var keyDerivationFunction = new Rfc2898DeriveBytes(keyEncrypted, LenSalt, _iterations))
                //{
                //    LenSalt = keyDerivationFunction.Salt;
                //}

                int lKey = keyEncrypted.Length;
                LenK = BitConverter.GetBytes(lKey);
                int lIV = aesManaged.IV.Length;
                LenIV = BitConverter.GetBytes(lIV);

                // Write the following to the Stream
                // for the encrypted file (outFs):
                // - length of the key
                // - length of the IV
                // - encrypted key
                // - the IV
                // - the encrypted cipher content
                memoryStream.Write(LenK, 0, 4);
                memoryStream.Write(LenIV, 0, 4);
                //memoryStream.Write(LenSalt, 0, 4);
                memoryStream.Write(keyEncrypted, 0, lKey);
                memoryStream.Write(aesManaged.IV, 0, lIV);
                //memoryStream.Write(LenSalt, 0, _saltSize);

                //using (var encryptor = aesManaged.CreateEncryptor(aesManaged.Key, aesManaged.IV))
                using (var encryptor = aesManaged.CreateEncryptor())
                using (var memoryStreamEnc = new MemoryStream())
                {
                    using (var cryptoStream = new CryptoStream(memoryStreamEnc, encryptor, CryptoStreamMode.Write))
                    using (var streamWriter = new StreamWriter(cryptoStream))
                    {
                        // Send the data through the StreamWriter, through the CryptoStream, to the underlying MemoryStream
                        streamWriter.Write(plainText);
                    }
                    memoryStream.Write(memoryStreamEnc.ToArray(), 0, memoryStreamEnc.ToArray().Length);
                }

                return Convert.ToBase64String(memoryStream.ToArray());

            }
        }
    }


    /// &lt;summary&gt;
    /// Decrypts the ciphertext using the public key.
    /// &lt;/summary&gt;
    /// &lt;param name=""ciphertext""&gt;The ciphertext to decrypt.&lt;/param&gt;
    /// &lt;param name=""certificate""&gt;The RSA certificate (need access to Private Key for decryption to work).&lt;/param&gt;
    /// &lt;returns&gt;The decrypted text.&lt;/returns&gt;
    public static string Decrypt(string ciphertext, X509Certificate2 certificate)
    {
        string outstring = string.Empty;

        if (string.IsNullOrEmpty(ciphertext))
            throw new ArgumentNullException(""cipherText"");

        if (!certificate.HasPrivateKey)
            throw new ApplicationException(""The private key is not accessible.  Decryption is not supported."");


        var allTheBytes = Convert.FromBase64String(ciphertext);

        //using (var keyDerivationFunction = new Rfc2898DeriveBytes(UTF8Encoding.UTF8.GetString(symmetricKey), saltBytes))
        using (var aesManaged = new AesManaged())
        {

            aesManaged.KeySize = 256;
            aesManaged.BlockSize = 128;
            aesManaged.Mode = CipherMode.CBC;

            // Create byte arrays to get the length of
            // the encrypted key and IV.
            // These values were stored as 4 bytes each
            // at the beginning of the encrypted package.
            byte[] LenK = new byte[_keyBytes];
            byte[] LenIV = new byte[_keyBytes];

            using (MemoryStream InStr = new MemoryStream(allTheBytes))
            {
                InStr.Seek(0, SeekOrigin.Begin);
                InStr.Read(LenK, 0, _keyBytes - 1);
                InStr.Seek(_keyBytes, SeekOrigin.Begin);
                InStr.Read(LenIV, 0, _keyBytes - 1);

                // Convert the lengths to integer values.
                int lenK = BitConverter.ToInt32(LenK, 0);
                int lenIV = BitConverter.ToInt32(LenIV, 0);

                // Determine the start postition of
                // the ciphter text (startC)
                // and its length(lenC).
                int startC = lenK + lenIV + 8;
                int lenC = (int)InStr.Length - startC;

                // Create the byte arrays for
                // the encrypted AesManaged key,
                // the IV, and the cipher text.
                byte[] KeyEncrypted = new byte[lenK];
                byte[] IV = new byte[lenIV];

                // Extract the salt, key and IV
                // starting from index 8
                // after the length values.
                InStr.Seek(8, SeekOrigin.Begin);
                InStr.Read(KeyEncrypted, 0, lenK);
                InStr.Seek(8 + lenK, SeekOrigin.Begin);
                InStr.Read(IV, 0, lenIV);

                byte[] KeyDecrypted = ((RSACryptoServiceProvider)certificate.PrivateKey).Decrypt(KeyEncrypted, false);

                byte[] CipherTextBytes = new byte[lenC];
                InStr.Seek(startC, SeekOrigin.Begin);
                InStr.Read(CipherTextBytes, 0, lenC);

                using (var decryptor = aesManaged.CreateDecryptor(KeyDecrypted, IV))
                using (var memoryStream = new MemoryStream(CipherTextBytes))
                using (var cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read))
                using (var streamReader = new StreamReader(cryptoStream))
                {
                    // Return the decrypted bytes from the decrypting stream.
                    return streamReader.ReadToEnd();
                }
            }
        }
    }
</code></pre>
","","2778","<c#><encryption><encryption-asymmetric>","4","","0","2013-02-09 16:17:40","","6","2","445517","","2013-02-09 16:17:40","2012-07-25 04:20:05","2012-10-13 21:06:01"
"3860620","How practical would it be to repeatedly encrypt a given file?","<p>I'm currently experimenting with both public-key and personal file encryption. The programs I use have 2048 bit RSA and 256 bit AES level encryption respectively. As a newbie to this stuff (I've only been a cypherpunk for about a month now - and am a little new to information systems) I'm not familiar with RSA algorithms, but that's not relevant here. </p>

<p>I know that unless some secret lab or NSA program happens to have a quantum computer, it is currently impossible to brute force hack the level of security these programs provide, but I was wondering how much more secure it would be to encrypt a file over and over again.</p>

<p>In a nutshell, what I would like to know is this: </p>

<ol>
<li>When I encrypt a file using 256-bit AES, and then encrypt the already encrypted file once more (using 256 again), do I now have the equivalent of 512-bit AES security? This is pretty much a question of whether or not the the number of possible keys a brute force method would potentially have to test would be <strong><em>2</em></strong> x 2 to the 256th power or 2 to the 256th power <strong><em>squared</em></strong>. Being pessimistic, I think it is the former but I was wondering if 512-AES really is achievable by simply encrypting with 256-AES twice?</li>
<li>Once a file is encrypted several times so that you must keep using different keys or keep putting in passwords at each level of encryption, would someone** even recognize if they have gotten through the first level of encryption? I was thinking that perhaps - if one were to encrypt a file several times requiring several different passwords - a cracker would not have any way of knowing if they have even broken through the first level of encryption since all they would have would still be an encrypted file.  </li>
</ol>

<p>Here's an example:</p>

<ul>
<li>Decrypted file</li>
<li>DKE$jptid UiWe</li>
<li>oxfialehv u%uk</li>
</ul>

<p>Pretend for a moment that the last sequence is what a cracker had to work with - to brute-force their way back to the original file, the result they would have to get (prior to cracking through the next level of encryption) would still appear to be a totally useless file (the second line) once they break through the first level of encryption. Does this mean that anyone attempting to use brute-force would have no way of getting back to the original file since they presumably would still see nothing but encrypted files?</p>

<p>These are basically two questions that deal with the same thing: the effect of encrypting the same file over and over again. I have searched the web to find out what effect repeated encryption has on making a file secure, but aside from reading an anecdote somewhere that the answer to the first question is no, I have found nothing that pertains to the second spin on the same topic. I am especially curious about that last question.</p>

<p>**Assuming hypothetically that they somehow brute-forced their way through weak passwords - since this appears to be a technological possibility with 256-AES right now if you know how to make secure ones...</p>
","<p>In general, if you encrypt a file with k-bit AES then again with k-bit AES, you only get (k+1) bits of security, rather than 2k bits of security, with a man-in-the-middle attack.  The same holds for most types of encryption, like DES.  (Note that triple-DES is not simply three rounds of encryption for this reason.)</p>

<p>Further, encrypting a file with method A and then with method B need not be even as strong as encrypting with method B alone!  (This would rarely be the case unless method A is seriously flawed, though.)  In contrast, you are guaranteed to be at least as strong as method A.  (Anyone remembering the name of this theorem is encouraged to leave a comment; I've forgotten.)</p>

<p>Usually you're much better off simply choosing a single method as strong as possible.</p>

<hr>

<p>For your second question: Yes, with most methods, an attacker would know that the first layer had been compromised.</p>
","2744","<brute-force><encryption-asymmetric><aes>","2","1","3","2014-01-08 23:09:58","","0","","","","","2010-10-05 03:16:43",""
"3860620","How practical would it be to repeatedly encrypt a given file?","<p>I'm currently experimenting with both public-key and personal file encryption. The programs I use have 2048 bit RSA and 256 bit AES level encryption respectively. As a newbie to this stuff (I've only been a cypherpunk for about a month now - and am a little new to information systems) I'm not familiar with RSA algorithms, but that's not relevant here. </p>

<p>I know that unless some secret lab or NSA program happens to have a quantum computer, it is currently impossible to brute force hack the level of security these programs provide, but I was wondering how much more secure it would be to encrypt a file over and over again.</p>

<p>In a nutshell, what I would like to know is this: </p>

<ol>
<li>When I encrypt a file using 256-bit AES, and then encrypt the already encrypted file once more (using 256 again), do I now have the equivalent of 512-bit AES security? This is pretty much a question of whether or not the the number of possible keys a brute force method would potentially have to test would be <strong><em>2</em></strong> x 2 to the 256th power or 2 to the 256th power <strong><em>squared</em></strong>. Being pessimistic, I think it is the former but I was wondering if 512-AES really is achievable by simply encrypting with 256-AES twice?</li>
<li>Once a file is encrypted several times so that you must keep using different keys or keep putting in passwords at each level of encryption, would someone** even recognize if they have gotten through the first level of encryption? I was thinking that perhaps - if one were to encrypt a file several times requiring several different passwords - a cracker would not have any way of knowing if they have even broken through the first level of encryption since all they would have would still be an encrypted file.  </li>
</ol>

<p>Here's an example:</p>

<ul>
<li>Decrypted file</li>
<li>DKE$jptid UiWe</li>
<li>oxfialehv u%uk</li>
</ul>

<p>Pretend for a moment that the last sequence is what a cracker had to work with - to brute-force their way back to the original file, the result they would have to get (prior to cracking through the next level of encryption) would still appear to be a totally useless file (the second line) once they break through the first level of encryption. Does this mean that anyone attempting to use brute-force would have no way of getting back to the original file since they presumably would still see nothing but encrypted files?</p>

<p>These are basically two questions that deal with the same thing: the effect of encrypting the same file over and over again. I have searched the web to find out what effect repeated encryption has on making a file secure, but aside from reading an anecdote somewhere that the answer to the first question is no, I have found nothing that pertains to the second spin on the same topic. I am especially curious about that last question.</p>

<p>**Assuming hypothetically that they somehow brute-forced their way through weak passwords - since this appears to be a technological possibility with 256-AES right now if you know how to make secure ones...</p>
","<p>More an opinion here...</p>

<p>First, when computer are strong enough to do a brute-force attack on AES-256 for example, it will be also for iterations of the same... doubling or tripling the time or effort is insignificant at that level.</p>

<p>Next, such considerations can be void depending on the application you are trying to use this encryption in... The ""secrets"" you will need to carry become bigger (number of iterations and all the different keys you will need, if in fact they are different), the time to do the encryption and the decryption will also need to increase.</p>

<p>My hunch is that iterating the encryption does not help much. Either the algorithm is strong enough to sustain a brute-force attach or it is not. The rest is all in the protection of the keys.</p>

<p>More practically, do you think your house is more protected if you have three identical or similar locks on your front door ? (and that includes number of keys for you to carry around, don't loose those keys, make sure windows and back door are secured also...)</p>
","2744","<brute-force><encryption-asymmetric><aes>","2","0","3","2014-01-08 23:09:58","","0","","","","","2010-10-05 03:16:43",""
"3860620","How practical would it be to repeatedly encrypt a given file?","<p>I'm currently experimenting with both public-key and personal file encryption. The programs I use have 2048 bit RSA and 256 bit AES level encryption respectively. As a newbie to this stuff (I've only been a cypherpunk for about a month now - and am a little new to information systems) I'm not familiar with RSA algorithms, but that's not relevant here. </p>

<p>I know that unless some secret lab or NSA program happens to have a quantum computer, it is currently impossible to brute force hack the level of security these programs provide, but I was wondering how much more secure it would be to encrypt a file over and over again.</p>

<p>In a nutshell, what I would like to know is this: </p>

<ol>
<li>When I encrypt a file using 256-bit AES, and then encrypt the already encrypted file once more (using 256 again), do I now have the equivalent of 512-bit AES security? This is pretty much a question of whether or not the the number of possible keys a brute force method would potentially have to test would be <strong><em>2</em></strong> x 2 to the 256th power or 2 to the 256th power <strong><em>squared</em></strong>. Being pessimistic, I think it is the former but I was wondering if 512-AES really is achievable by simply encrypting with 256-AES twice?</li>
<li>Once a file is encrypted several times so that you must keep using different keys or keep putting in passwords at each level of encryption, would someone** even recognize if they have gotten through the first level of encryption? I was thinking that perhaps - if one were to encrypt a file several times requiring several different passwords - a cracker would not have any way of knowing if they have even broken through the first level of encryption since all they would have would still be an encrypted file.  </li>
</ol>

<p>Here's an example:</p>

<ul>
<li>Decrypted file</li>
<li>DKE$jptid UiWe</li>
<li>oxfialehv u%uk</li>
</ul>

<p>Pretend for a moment that the last sequence is what a cracker had to work with - to brute-force their way back to the original file, the result they would have to get (prior to cracking through the next level of encryption) would still appear to be a totally useless file (the second line) once they break through the first level of encryption. Does this mean that anyone attempting to use brute-force would have no way of getting back to the original file since they presumably would still see nothing but encrypted files?</p>

<p>These are basically two questions that deal with the same thing: the effect of encrypting the same file over and over again. I have searched the web to find out what effect repeated encryption has on making a file secure, but aside from reading an anecdote somewhere that the answer to the first question is no, I have found nothing that pertains to the second spin on the same topic. I am especially curious about that last question.</p>

<p>**Assuming hypothetically that they somehow brute-forced their way through weak passwords - since this appears to be a technological possibility with 256-AES right now if you know how to make secure ones...</p>
","<p>Question 1:
The size of the solution space is going to be the same for two passes of the 256-bit key as the 512-bit key, since 2^(256+256) = 2^512</p>

<p>The actual running time of each decrypt() may increase non-linearly as the key-size grows (it would depend on the algorithm), in this case I think brute forcing the 256+256 would run faster than the 2^512, but would still be infeasible.</p>

<p>Question 2:
There are probably ways to identify certain ciphertext. I wouldn't be surprised if many algorithms leave some signature or artifacts that could be used for identification.</p>
","2744","<brute-force><encryption-asymmetric><aes>","2","0","3","2014-01-08 23:09:58","","0","","","","","2010-10-05 03:16:43",""
"13588822","How to change the passphrase of a private key using PHP's OpenSSL module?","<p>I'm using PHP's OpenSSL module for asymmetric encryption; openssl_pkey_new(), openssl_pkey_export(), and openssl_pkey_get_details() to create the keypair, and openssl_public_encrypt and openssl_private_decrypt() to encrypt and decrypt data.</p>

<p>How can I change the passphrase associated with the private key? Is this possible with the OpenSSL module, or do I have to create a new keypair? That would be extremely inconvenient and require the server to re-encrypt potentially thousands of files on a regular Basis.</p>

<p>Thanks!</p>
","<p>Using <a href=""http://phpseclib.sourceforge.net/index.html"" rel=""nofollow"">phpseclib, a pure PHP RSA implementation</a>:</p>

<pre><code>&lt;?php
include('Crypt/RSA.php');

$rsa = new Crypt_RSA();
$rsa-&gt;setPassword('old_password');
$rsa-&gt;loadKey('...');

$rsa-&gt;setPassword('new_password');
$privatekey = $rsa-&gt;getPrivateKey();
$publickey = $rsa-&gt;getPublicKey();
?&gt;
</code></pre>
","2683","<php><encryption><openssl><public-key-encryption><encryption-asymmetric>","5","0","2","2014-09-05 21:43:19","","2","1","888308","","2012-12-04 14:51:22","2012-11-27 16:36:19",""
"13588822","How to change the passphrase of a private key using PHP's OpenSSL module?","<p>I'm using PHP's OpenSSL module for asymmetric encryption; openssl_pkey_new(), openssl_pkey_export(), and openssl_pkey_get_details() to create the keypair, and openssl_public_encrypt and openssl_private_decrypt() to encrypt and decrypt data.</p>

<p>How can I change the passphrase associated with the private key? Is this possible with the OpenSSL module, or do I have to create a new keypair? That would be extremely inconvenient and require the server to re-encrypt potentially thousands of files on a regular Basis.</p>

<p>Thanks!</p>
","<p>I've needed to do this for a little project I've been building in the evenings.</p>

<p>We know the following creates a <strong>new</strong> key pair (public/private):</p>

<pre><code>function newPair (&amp;$private, &amp;$public, $passphrase=null) {
    $res = openssl_pkey_new ();
    if ($res === false) {
        throw new Exception (""Key generation failed: "".openssl_error_string ());
        return false;
    }
    // Sets private by reference
    if (openssl_pkey_export ($res, $private, $passphrase) === false) {
        throw new Exception (""Private key export failed: "".openssl_error_string ());
        return false;
    }
    // Array returns, contains ""key"" element.
    $public = openssl_pkey_get_details($res);
    if ($public === false) {
        throw new Exception (openssl_error_string ());
        return false;
    }
    $public = $public[""key""];
    return true;
}
</code></pre>

<p>open_ssl_pkey_export() does the passphrase magic.  So we can change the passphrase as so:</p>

<pre><code>function changePassphrase ($private, $old, $new=null) {
    $res = openssl_pkey_get_private ($private, $old);
    if ($res === false) {
        throw new Exception (""Loading private key failed: "".openssl_error_string ());
        return false;
    }
    if (openssl_pkey_export ($res, $result, $new) === false) {
        throw new Exception (""Passphrase change failed: "".openssl_error_string ());
        return false;
    }
    return $result;
}
</code></pre>

<p>I hope you can follow what we've done here ... !  (Obviously the exception throwing is purely optional ... I've just pulled the code verbatim from my codebase.)</p>

<p>changePassphrase() takes the private key as a <strong>string</strong>, along with the current and new passphrases.  We use openssl_pkey_get_private() to retrieve a handle to the private key, unlocking it with the old passphrase.</p>

<p>(It's worth noting that the passphrase is literally used to encrypt the private key, which may sound a little double-dutch!  [Encrypting the encryption key ... ?!]  openssl_pkey_get_private() returns FALSE if it fails to interpret the key - i.e. if the passphrase is wrong, and the private key decrypts to an invalid value.  Make sense?)</p>

<p>Having unlocked the private key with the old passphrase, we take the OpenSSL key handle and pass it to openssl_pkey_export() - just like we did after creating it in the first place (via openssl_pkey_new()) providing the new passphrase ... and hey-presto.</p>

<p>I hope my code example reads cleanly, I've tried to write it in a fashion that's easy to understand and follow, without unnecessary ""compression"" and short-cutting.</p>

<p>Good luck!</p>
","2683","<php><encryption><openssl><public-key-encryption><encryption-asymmetric>","5","6","2","2014-09-05 21:43:19","","2","1","888308","","2012-12-04 14:51:22","2012-11-27 16:36:19",""
"12956674","Does mysql have asymmetric encryption capabilities?","<p>My Question is simple - is there a build in functionality, like AES_ENCRYPT / AES_DECRYPT, for asymmetric (public / private key) encryption in MySQL?</p>

<p>Sadly, I only find answers that involve PHP (to encrypt it in php), and stuff like that. I would like to keep it in MySQL, since the whole application logic is handled by procedures - and I would like to avoid ruining that by bringing in external languages to solve this issue.</p>
","<p>There is no functionality for RSA encryption within MySQL.  it's sort of an odd use case, so the MySQL folks probably haven't seen fit to implement it</p>

<p>You'll have to do the RSA operations in the application layer, and pass the results into your procedures, unless you fancy implementing RSA within MySQL yourself (which I really cannot advise at all)</p>
","2652","<mysql><encryption><public-key-encryption><private-key><encryption-asymmetric>","4","3","3","2016-02-02 06:27:53","14165792","2","0","","","","2012-10-18 14:10:47",""
"12956674","Does mysql have asymmetric encryption capabilities?","<p>My Question is simple - is there a build in functionality, like AES_ENCRYPT / AES_DECRYPT, for asymmetric (public / private key) encryption in MySQL?</p>

<p>Sadly, I only find answers that involve PHP (to encrypt it in php), and stuff like that. I would like to keep it in MySQL, since the whole application logic is handled by procedures - and I would like to avoid ruining that by bringing in external languages to solve this issue.</p>
","<p>What you can do is something like this; Make a shared secret between multiple users using their pub/priv keys, then use that shared secret as the AES symetric key to unlock the data in mysql.</p>

<p>What this means is that you can utilize mysql's inbuilt AES encrypt function for convenience while still maintaining secure data given that you will never know the shared secret.</p>

<p>eg:
<img src=""https://i.stack.imgur.com/Vcn6J.png"" alt=""Alice / Bob shared secret / coloured paint""></p>

<p>Also you can try reading this <a href=""http://maths.straylight.co.uk/edb_files/crypto_colloquium.pdf"" rel=""nofollow noreferrer"">enter link description here</a></p>
","2652","<mysql><encryption><public-key-encryption><private-key><encryption-asymmetric>","4","2","3","2016-02-02 06:27:53","14165792","2","0","","","","2012-10-18 14:10:47",""
"12956674","Does mysql have asymmetric encryption capabilities?","<p>My Question is simple - is there a build in functionality, like AES_ENCRYPT / AES_DECRYPT, for asymmetric (public / private key) encryption in MySQL?</p>

<p>Sadly, I only find answers that involve PHP (to encrypt it in php), and stuff like that. I would like to keep it in MySQL, since the whole application logic is handled by procedures - and I would like to avoid ruining that by bringing in external languages to solve this issue.</p>
","<p>I am very much agree to @Peter Elliott. But as part of answer I would like to add that MySQL Enterprise Encryption provide that kind of facility such as :</p>

<p>MySQL Enterprise Encryption gives DBAs and Developers the tools they need for:</p>

<ul>
<li>Asymmetric Public Key Encryption (RSA) Asymmetric Private Key</li>
<li>Decryption (RSA) Generate Public/Private Key (RSA, DSA, DH) Derive</li>
<li>Symmetric Keys from Public and Private Key pairs (DH) Digitally Sign</li>
<li>Data (RSA, DSA) Verify Data Signature (RSA, DSA) Validation Data</li>
<li>Authenticity (RSA, DSA)</li>
</ul>

<p>For more information you can visit <a href=""https://www.mysql.com/products/enterprise/encryption.html"" rel=""nofollow"">MySQL Enterprise Encryption</a>, I hope this will be helpful to you.</p>
","2652","<mysql><encryption><public-key-encryption><private-key><encryption-asymmetric>","4","0","3","2016-02-02 06:27:53","14165792","2","0","","","","2012-10-18 14:10:47",""
"12545124","Two private key asymmetric encryption - possible?","<p>I am wondering if there exists some asymmetric encryption algorithm that would work with two different private keys, so that the encrypted message can be decrypted by either one of such private keys?</p>
","<p>There is no such algorithm as far as I know, but there is a common solution. The enciphered text is transferred together with a set of cryptograms of the symmetric key used to encipher the text itself. Each such cryptogram of the key is a result of enciphering the original key with the public key of one of recipients. Thus, all recipients knowing their private keys may decipher the key used to encipher the data and then decipher the message itself. </p>
","2626","<encryption><public-key-encryption><private-key><public-key><encryption-asymmetric>","8","2","4","2014-02-25 14:55:33","12546292","0","2","15168","","2012-09-22 21:19:23","2012-09-22 15:32:24",""
"12545124","Two private key asymmetric encryption - possible?","<p>I am wondering if there exists some asymmetric encryption algorithm that would work with two different private keys, so that the encrypted message can be decrypted by either one of such private keys?</p>
","<p>Typically a hybrid encryptions scheme is used. I.e. the message is encrypted with a symmetric key cryptosytem, then the symmetric keys are encrypted with the public keys of each of the intended receivers. </p>
","2626","<encryption><public-key-encryption><private-key><public-key><encryption-asymmetric>","8","1","4","2014-02-25 14:55:33","12546292","0","2","15168","","2012-09-22 21:19:23","2012-09-22 15:32:24",""
"12545124","Two private key asymmetric encryption - possible?","<p>I am wondering if there exists some asymmetric encryption algorithm that would work with two different private keys, so that the encrypted message can be decrypted by either one of such private keys?</p>
","<p>You could use a symmetric encryption and secret sharing scheme on top of that, ""splitting the key in half"".</p>

<p>More on secret sharing: <a href=""http://en.wikipedia.org/wiki/Secret_sharing"" rel=""nofollow"">http://en.wikipedia.org/wiki/Secret_sharing</a></p>

<p>Steps on how I see it:</p>

<ol>
<li>Encrypt the data using (pseudo) randomly generated key.</li>
<li>Distribute the secret using <a href=""http://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing"" rel=""nofollow"">Shamir's secret sharing</a> which is the key to two shares, where as one share will suffice to get the key.</li>
</ol>

<p>The end result is that one (or more) ""keys"" are required to get the data.</p>
","2626","<encryption><public-key-encryption><private-key><public-key><encryption-asymmetric>","8","3","4","2014-02-25 14:55:33","12546292","0","2","15168","","2012-09-22 21:19:23","2012-09-22 15:32:24",""
"12545124","Two private key asymmetric encryption - possible?","<p>I am wondering if there exists some asymmetric encryption algorithm that would work with two different private keys, so that the encrypted message can be decrypted by either one of such private keys?</p>
","<p>Asymmetric keys are never used for encrypting <em>messages</em> (too slow, has a size limit, etc.), only for encrypting small buffers, like symmetric keys for messages. </p>

<p>When you encrypt a message with an asymm. key, you are in fact encrypting a <em>symmetric</em> key which encrypts the message. </p>

<p>Simply encrypt the same symmetric key with two different asymm. keys and you'd get two different cipherblocks which both contain the same symmetric key for the message, so you can decrypt with either one.</p>
","2626","<encryption><public-key-encryption><private-key><public-key><encryption-asymmetric>","8","11","4","2014-02-25 14:55:33","12546292","0","2","15168","","2012-09-22 21:19:23","2012-09-22 15:32:24",""
"23914506","Encrypting / Decrypting a passed value in SQL Server","<p>I have the following scenario ...</p>

<p>A vendor sends a customer an email. At the bottom of the email is a link back to a web page that I am responsible for i.e. hosting. We need to pass the users email address through the link to the web page but we want it to be encrypted. We need to then be able to DECRYPT it on our end when we receive the request so that we can extract the email from it. </p>

<p>I would like for the vendor to be able to encrypt it via SQL Server (that's where the link is generated) and we would like to also decrypt it using SQL Server. </p>

<p>I have no, none, zero experience with encryption/decryption and need to devise a solution within the next 6 hours ... !!! </p>

<p>I see information on encrypting entire columns but I need to be able to encrypt/decrypt just a single string. </p>

<p>Any thoughts? Better approach?</p>

<p>Thanks,
G</p>
","<p>I wouldn't use encryption for this task. Anything you encrypt can potentially be decrypted by someone. A better solution is to generate a random code and assign it against the email address in your database. Then do a lookup based on that code. The code could be as simple as using a GUID.</p>

<pre><code>In C#: Guid.NewGuid()

In SQL Server: NEWID()
</code></pre>
","2556","<sql-server><encryption><encryption-symmetric><encryption-asymmetric>","-2","2","3","2016-02-02 12:08:56","23914804","0","","","","","2014-05-28 14:31:17","2014-05-28 16:37:17"
"23914506","Encrypting / Decrypting a passed value in SQL Server","<p>I have the following scenario ...</p>

<p>A vendor sends a customer an email. At the bottom of the email is a link back to a web page that I am responsible for i.e. hosting. We need to pass the users email address through the link to the web page but we want it to be encrypted. We need to then be able to DECRYPT it on our end when we receive the request so that we can extract the email from it. </p>

<p>I would like for the vendor to be able to encrypt it via SQL Server (that's where the link is generated) and we would like to also decrypt it using SQL Server. </p>

<p>I have no, none, zero experience with encryption/decryption and need to devise a solution within the next 6 hours ... !!! </p>

<p>I see information on encrypting entire columns but I need to be able to encrypt/decrypt just a single string. </p>

<p>Any thoughts? Better approach?</p>

<p>Thanks,
G</p>
","<p>I would create a new column in your user email table that is of type <a href=""http://msdn.microsoft.com/en-gb/library/ms187942.aspx"" rel=""nofollow""><strong>UNIQUEIDENTIFIER</strong></a> and set it's default value to <a href=""http://msdn.microsoft.com/en-us/library/ms190348.aspx"" rel=""nofollow""><strong>NEWID()</strong></a> so that it creates a new GUID (like: 400c4d0d-cd5a-42fd-8660-15250e27c247) when the record is created. This is on the assumption that per email, you create a new record in this table.</p>

<p>SQL to alter your source table:</p>

<pre><code>ALTER TABLE [YOUR_TABLE] ADD
    UniqueEmailId uniqueidentifier NOT NULL 
    CONSTRAINT DF_YOUR_TABLE_UniqueEmailId DEFAULT newid()
</code></pre>

<p>You can then use the value created in your hyperlink, like so:</p>

<pre><code>www.yoursite.com/emailid=400c4d0d-cd5a-42fd-8660-15250e27c247
</code></pre>

<p>Then once it's clicked, you simply look up the user/email related to that unique identifier and serve your page.</p>

<p>This would circumvent the requirement of passing sensitive information that you have to encrypt/decrypt in hyperlinks.</p>
","2556","<sql-server><encryption><encryption-symmetric><encryption-asymmetric>","-2","0","3","2016-02-02 12:08:56","23914804","0","","","","","2014-05-28 14:31:17","2014-05-28 16:37:17"
"23914506","Encrypting / Decrypting a passed value in SQL Server","<p>I have the following scenario ...</p>

<p>A vendor sends a customer an email. At the bottom of the email is a link back to a web page that I am responsible for i.e. hosting. We need to pass the users email address through the link to the web page but we want it to be encrypted. We need to then be able to DECRYPT it on our end when we receive the request so that we can extract the email from it. </p>

<p>I would like for the vendor to be able to encrypt it via SQL Server (that's where the link is generated) and we would like to also decrypt it using SQL Server. </p>

<p>I have no, none, zero experience with encryption/decryption and need to devise a solution within the next 6 hours ... !!! </p>

<p>I see information on encrypting entire columns but I need to be able to encrypt/decrypt just a single string. </p>

<p>Any thoughts? Better approach?</p>

<p>Thanks,
G</p>
","<p>You can use <code>EncryptByPassPhrase</code> and <code>DecryptByPassPhrase</code> in SQL Server:</p>

<pre><code>select EncryptByPassPhrase('key', 'abc' );

select convert(varchar(100),
   DecryptByPassPhrase('key', 0x0100000001E5B67F919CCC4B8EA10E97FC50764BF6B30EC4347C4E54));
</code></pre>
","2556","<sql-server><encryption><encryption-symmetric><encryption-asymmetric>","-2","1","3","2016-02-02 12:08:56","23914804","0","","","","","2014-05-28 14:31:17","2014-05-28 16:37:17"
"39317151","Asymmetric public / private key encryption RSA with nodeJS and Objective-C","<p>I want to encrypt the communication between my server (written in nodeJS) and the iOS app (written in objective-C) using asymmetric encryption (RSA).</p>

<p>What I am looking to do is to only encrypt the data that I send from the iOS app <strong>(using the public key)</strong> to the server, where the server needs to decrypt the data <strong>(using the private key)</strong> in order to read it.</p>

<p>Using the following library from GitHub, for testing purposes, I was able to successfully encrypt and then decrypt the string ""hello world!"" using objective-C. <strong>Note:</strong> NSString* encWithPubKey is the encrypted base64 string</p>

<ul>
<li><p><a href=""https://github.com/ideawu/Objective-C-RSA"" rel=""nofollow"">https://github.com/ideawu/Objective-C-RSA</a></p>

<pre><code>NSString *pubkey = @""-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDI2bvVLVYrb4B0raZgFP60VXY\ncvRmk9q56QiTmEm9HXlSPq1zyhyPQHGti5FokYJMzNcKm0bwL1q6ioJuD4EFI56D\na+70XdRz1CjQPQE3yXrXXVvOsmq9LsdxTFWsVBTehdCmrapKZVVx6PKl7myh0cfX\nQmyveT/eqyZK1gYjvQIDAQAB\n-----END PUBLIC KEY-----"";
NSString *privkey = @""-----BEGIN PRIVATE KEY-----\nMIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAMMjZu9UtVitvgHS\ntpmAU/rRVdhy9GaT2rnpCJOYSb0deVI+rXPKHI9Aca2LkWiRgkzM1wqbRvAvWrqK\ngm4PgQUjnoNr7vRd1HPUKNA9ATfJetddW86yar0ux3FMVaxUFN6F0KatqkplVXHo\n8qXubKHRx9dCbK95P96rJkrWBiO9AgMBAAECgYBO1UKEdYg9pxMX0XSLVtiWf3Na\n2jX6Ksk2Sfp5BhDkIcAdhcy09nXLOZGzNqsrv30QYcCOPGTQK5FPwx0mMYVBRAdo\nOLYp7NzxW/File//169O3ZFpkZ7MF0I2oQcNGTpMCUpaY6xMmxqN22INgi8SHp3w\nVU+2bRMLDXEc/MOmAQJBAP+Sv6JdkrY+7WGuQN5O5PjsB15lOGcr4vcfz4vAQ/uy\nEGYZh6IO2Eu0lW6sw2x6uRg0c6hMiFEJcO89qlH/B10CQQDDdtGrzXWVG457vA27\nkpduDpM6BQWTX6wYV9zRlcYYMFHwAQkE0BTvIYde2il6DKGyzokgI6zQyhgtRJ1x\nL6fhAkB9NvvW4/uWeLw7CHHVuVersZBmqjb5LWJU62v3L2rfbT1lmIqAVr+YT9CK\n2fAhPPtkpYYo5d4/vd1sCY1iAQ4tAkEAm2yPrJzjMn2G/ry57rzRzKGqUChOFrGs\nlm7HF6CQtAs4HC+2jC0peDyg97th37rLmPLB9txnPl50ewpkZuwOAQJBAM/eJnFw\nF5QAcL4CYDbfBKocx82VX/pFXng50T7FODiWbbL4UnxICE0UBFInNNiWJxNEb6jL\n5xd0pcy9O2DOeso=\n-----END PRIVATE KEY-----"";

NSString *originString = @""hello world!"";

// Demo: encrypt with public key
NSString *encWithPubKey = [RSA encryptString:originString publicKey:pubkey];
NSLog(@""Enctypted with public key: %@"", encWithPubKey);// prints the encrypted string in base64 format


// Demo: decrypt with private key
NSString *decWithPrivKey = [RSA decryptString:encWithPubKey privateKey:privkey];
NSLog(@""Decrypted with private key: %@"", decWithPrivKey);// prints -&gt; hello world!
</code></pre></li>
</ul>

<p>Using the following link, for testing purposes as well, I was also able to encrypt and then decrypt the string ""hello world!"" using nodeJs:</p>

<ul>
<li><p><a href=""https://coolaj86.com/articles/asymmetric-public--private-key-encryption-in-node-js"" rel=""nofollow"">https://coolaj86.com/articles/asymmetric-public--private-key-encryption-in-node-js</a></p>

<pre><code>var fs = require('fs');
var ursa = require('/PATH/ursa');

var pubkeyAlice = ursa.createPublicKey(fs.readFileSync(""/PATH/public.pem""));
var privkeyAlice = ursa.createPrivateKey(fs.readFileSync(""/PATH/private.pem""));

var msg = ""hello world!"";
var enc = pubkeyAlice.encrypt(msg, 'utf8', 'base64');
console.log('encrypted string:'+enc);

var rcv = privkeyAlice.decrypt(enc, 'base64', 'utf8');
console.log('decrypted', rcv, '\n');
</code></pre></li>
</ul>

<p>Both of the following examples printed ""hello world!"" successfully. Next, I took the encrypted string, <strong>NSString*encWithPubKey</strong>, from what I got in objective-C (which is in base64 format) and then I tried to decrypt it with nodeJS:</p>

<pre><code>    var privkeyAlice = ursa.createPrivateKey(fs.readFileSync(""/PATH/private.pem""));

    var enc = &lt;  HERE IS THE ENCRYPTED STRING RECEIVED FROM Objective-C : encWithPubKey  &gt;
    var rcv = privkeyAlice.decrypt(enc, 'base64', 'utf8');
    console.log('decrypted', rcv, '\n');
</code></pre>

<p>However, when doing so, I receive the following error in nodeJS:</p>

<ul>
<li>Error: error:040A1079:rsa routines:RSA_padding_check_PKCS1_OAEP_mgf1:oaep decoding error</li>
</ul>

<p>From my understanding, this error means that the encrypted string was invalid. However, I am unable to understand why I am getting this error. I am able to encrypt and decrypt the same string if I do it with the same language, however, I am unable to communicate between the two languages.</p>

<p>Please note that BOTH the iOS app and the nodeJS are using the following public and private keys respectively:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDI2bvVLVYrb4B0raZgFP60VXY
cvRmk9q56QiTmEm9HXlSPq1zyhyPQHGti5FokYJMzNcKm0bwL1q6ioJuD4EFI56D
a+70XdRz1CjQPQE3yXrXXVvOsmq9LsdxTFWsVBTehdCmrapKZVVx6PKl7myh0cfX
QmyveT/eqyZK1gYjvQIDAQAB
-----END PUBLIC KEY-----


-----BEGIN PRIVATE KEY-----
MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAMMjZu9UtVitvgHS
tpmAU/rRVdhy9GaT2rnpCJOYSb0deVI+rXPKHI9Aca2LkWiRgkzM1wqbRvAvWrqK
gm4PgQUjnoNr7vRd1HPUKNA9ATfJetddW86yar0ux3FMVaxUFN6F0KatqkplVXHo
8qXubKHRx9dCbK95P96rJkrWBiO9AgMBAAECgYBO1UKEdYg9pxMX0XSLVtiWf3Na
2jX6Ksk2Sfp5BhDkIcAdhcy09nXLOZGzNqsrv30QYcCOPGTQK5FPwx0mMYVBRAdo
OLYp7NzxW/File//169O3ZFpkZ7MF0I2oQcNGTpMCUpaY6xMmxqN22INgi8SHp3w
VU+2bRMLDXEc/MOmAQJBAP+Sv6JdkrY+7WGuQN5O5PjsB15lOGcr4vcfz4vAQ/uy
EGYZh6IO2Eu0lW6sw2x6uRg0c6hMiFEJcO89qlH/B10CQQDDdtGrzXWVG457vA27
kpduDpM6BQWTX6wYV9zRlcYYMFHwAQkE0BTvIYde2il6DKGyzokgI6zQyhgtRJ1x
L6fhAkB9NvvW4/uWeLw7CHHVuVersZBmqjb5LWJU62v3L2rfbT1lmIqAVr+YT9CK
2fAhPPtkpYYo5d4/vd1sCY1iAQ4tAkEAm2yPrJzjMn2G/ry57rzRzKGqUChOFrGs
lm7HF6CQtAs4HC+2jC0peDyg97th37rLmPLB9txnPl50ewpkZuwOAQJBAM/eJnFw
F5QAcL4CYDbfBKocx82VX/pFXng50T7FODiWbbL4UnxICE0UBFInNNiWJxNEb6jL
5xd0pcy9O2DOeso=
-----END PRIVATE KEY-----
</code></pre>

<p>I've tried to look online, but I wasn't able to find enough resources to solve the problem. Any help will be appreciated! Thank you!</p>
","<p><strong>Don't.</strong> The correct solution to encrypt communication between two systems is to use TLS. Trying to implement encryption yourself is almost certainly not going to end well and will end up with your crypto being broken - it's <em>very</em> hard to securely implement encryption, to the point that even experienced cryptographers avoid it wherever they can.</p>

<p>After having discussed this question on IRC a bit more with the author, and determining that the rationale against using TLS was that ""the client can load a custom CA and intercept the requests with something like Burp anyway"":</p>

<p><strong>Preventing client modifications is not possible.</strong> The client is fundamentally untrusted, and it is a <em>technical impossibility</em> to ensure that a client does not tamper with requests. Instead, the validation of requests should happen on the server-side, so that it doesn't <em>matter</em> what kind of tampering the client does. <a href=""https://paragonie.com/blog/2016/03/client-authenticity-is-not-server-s-problem"">This article</a> goes into more detail.</p>
","2540","<objective-c><node.js><encryption><rsa><encryption-asymmetric>","2","7","2","2016-09-04 17:49:44","39319822","0","","3311952","","2016-09-04 13:29:48","2016-09-04 12:58:51",""
"39317151","Asymmetric public / private key encryption RSA with nodeJS and Objective-C","<p>I want to encrypt the communication between my server (written in nodeJS) and the iOS app (written in objective-C) using asymmetric encryption (RSA).</p>

<p>What I am looking to do is to only encrypt the data that I send from the iOS app <strong>(using the public key)</strong> to the server, where the server needs to decrypt the data <strong>(using the private key)</strong> in order to read it.</p>

<p>Using the following library from GitHub, for testing purposes, I was able to successfully encrypt and then decrypt the string ""hello world!"" using objective-C. <strong>Note:</strong> NSString* encWithPubKey is the encrypted base64 string</p>

<ul>
<li><p><a href=""https://github.com/ideawu/Objective-C-RSA"" rel=""nofollow"">https://github.com/ideawu/Objective-C-RSA</a></p>

<pre><code>NSString *pubkey = @""-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDI2bvVLVYrb4B0raZgFP60VXY\ncvRmk9q56QiTmEm9HXlSPq1zyhyPQHGti5FokYJMzNcKm0bwL1q6ioJuD4EFI56D\na+70XdRz1CjQPQE3yXrXXVvOsmq9LsdxTFWsVBTehdCmrapKZVVx6PKl7myh0cfX\nQmyveT/eqyZK1gYjvQIDAQAB\n-----END PUBLIC KEY-----"";
NSString *privkey = @""-----BEGIN PRIVATE KEY-----\nMIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAMMjZu9UtVitvgHS\ntpmAU/rRVdhy9GaT2rnpCJOYSb0deVI+rXPKHI9Aca2LkWiRgkzM1wqbRvAvWrqK\ngm4PgQUjnoNr7vRd1HPUKNA9ATfJetddW86yar0ux3FMVaxUFN6F0KatqkplVXHo\n8qXubKHRx9dCbK95P96rJkrWBiO9AgMBAAECgYBO1UKEdYg9pxMX0XSLVtiWf3Na\n2jX6Ksk2Sfp5BhDkIcAdhcy09nXLOZGzNqsrv30QYcCOPGTQK5FPwx0mMYVBRAdo\nOLYp7NzxW/File//169O3ZFpkZ7MF0I2oQcNGTpMCUpaY6xMmxqN22INgi8SHp3w\nVU+2bRMLDXEc/MOmAQJBAP+Sv6JdkrY+7WGuQN5O5PjsB15lOGcr4vcfz4vAQ/uy\nEGYZh6IO2Eu0lW6sw2x6uRg0c6hMiFEJcO89qlH/B10CQQDDdtGrzXWVG457vA27\nkpduDpM6BQWTX6wYV9zRlcYYMFHwAQkE0BTvIYde2il6DKGyzokgI6zQyhgtRJ1x\nL6fhAkB9NvvW4/uWeLw7CHHVuVersZBmqjb5LWJU62v3L2rfbT1lmIqAVr+YT9CK\n2fAhPPtkpYYo5d4/vd1sCY1iAQ4tAkEAm2yPrJzjMn2G/ry57rzRzKGqUChOFrGs\nlm7HF6CQtAs4HC+2jC0peDyg97th37rLmPLB9txnPl50ewpkZuwOAQJBAM/eJnFw\nF5QAcL4CYDbfBKocx82VX/pFXng50T7FODiWbbL4UnxICE0UBFInNNiWJxNEb6jL\n5xd0pcy9O2DOeso=\n-----END PRIVATE KEY-----"";

NSString *originString = @""hello world!"";

// Demo: encrypt with public key
NSString *encWithPubKey = [RSA encryptString:originString publicKey:pubkey];
NSLog(@""Enctypted with public key: %@"", encWithPubKey);// prints the encrypted string in base64 format


// Demo: decrypt with private key
NSString *decWithPrivKey = [RSA decryptString:encWithPubKey privateKey:privkey];
NSLog(@""Decrypted with private key: %@"", decWithPrivKey);// prints -&gt; hello world!
</code></pre></li>
</ul>

<p>Using the following link, for testing purposes as well, I was also able to encrypt and then decrypt the string ""hello world!"" using nodeJs:</p>

<ul>
<li><p><a href=""https://coolaj86.com/articles/asymmetric-public--private-key-encryption-in-node-js"" rel=""nofollow"">https://coolaj86.com/articles/asymmetric-public--private-key-encryption-in-node-js</a></p>

<pre><code>var fs = require('fs');
var ursa = require('/PATH/ursa');

var pubkeyAlice = ursa.createPublicKey(fs.readFileSync(""/PATH/public.pem""));
var privkeyAlice = ursa.createPrivateKey(fs.readFileSync(""/PATH/private.pem""));

var msg = ""hello world!"";
var enc = pubkeyAlice.encrypt(msg, 'utf8', 'base64');
console.log('encrypted string:'+enc);

var rcv = privkeyAlice.decrypt(enc, 'base64', 'utf8');
console.log('decrypted', rcv, '\n');
</code></pre></li>
</ul>

<p>Both of the following examples printed ""hello world!"" successfully. Next, I took the encrypted string, <strong>NSString*encWithPubKey</strong>, from what I got in objective-C (which is in base64 format) and then I tried to decrypt it with nodeJS:</p>

<pre><code>    var privkeyAlice = ursa.createPrivateKey(fs.readFileSync(""/PATH/private.pem""));

    var enc = &lt;  HERE IS THE ENCRYPTED STRING RECEIVED FROM Objective-C : encWithPubKey  &gt;
    var rcv = privkeyAlice.decrypt(enc, 'base64', 'utf8');
    console.log('decrypted', rcv, '\n');
</code></pre>

<p>However, when doing so, I receive the following error in nodeJS:</p>

<ul>
<li>Error: error:040A1079:rsa routines:RSA_padding_check_PKCS1_OAEP_mgf1:oaep decoding error</li>
</ul>

<p>From my understanding, this error means that the encrypted string was invalid. However, I am unable to understand why I am getting this error. I am able to encrypt and decrypt the same string if I do it with the same language, however, I am unable to communicate between the two languages.</p>

<p>Please note that BOTH the iOS app and the nodeJS are using the following public and private keys respectively:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDI2bvVLVYrb4B0raZgFP60VXY
cvRmk9q56QiTmEm9HXlSPq1zyhyPQHGti5FokYJMzNcKm0bwL1q6ioJuD4EFI56D
a+70XdRz1CjQPQE3yXrXXVvOsmq9LsdxTFWsVBTehdCmrapKZVVx6PKl7myh0cfX
QmyveT/eqyZK1gYjvQIDAQAB
-----END PUBLIC KEY-----


-----BEGIN PRIVATE KEY-----
MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAMMjZu9UtVitvgHS
tpmAU/rRVdhy9GaT2rnpCJOYSb0deVI+rXPKHI9Aca2LkWiRgkzM1wqbRvAvWrqK
gm4PgQUjnoNr7vRd1HPUKNA9ATfJetddW86yar0ux3FMVaxUFN6F0KatqkplVXHo
8qXubKHRx9dCbK95P96rJkrWBiO9AgMBAAECgYBO1UKEdYg9pxMX0XSLVtiWf3Na
2jX6Ksk2Sfp5BhDkIcAdhcy09nXLOZGzNqsrv30QYcCOPGTQK5FPwx0mMYVBRAdo
OLYp7NzxW/File//169O3ZFpkZ7MF0I2oQcNGTpMCUpaY6xMmxqN22INgi8SHp3w
VU+2bRMLDXEc/MOmAQJBAP+Sv6JdkrY+7WGuQN5O5PjsB15lOGcr4vcfz4vAQ/uy
EGYZh6IO2Eu0lW6sw2x6uRg0c6hMiFEJcO89qlH/B10CQQDDdtGrzXWVG457vA27
kpduDpM6BQWTX6wYV9zRlcYYMFHwAQkE0BTvIYde2il6DKGyzokgI6zQyhgtRJ1x
L6fhAkB9NvvW4/uWeLw7CHHVuVersZBmqjb5LWJU62v3L2rfbT1lmIqAVr+YT9CK
2fAhPPtkpYYo5d4/vd1sCY1iAQ4tAkEAm2yPrJzjMn2G/ry57rzRzKGqUChOFrGs
lm7HF6CQtAs4HC+2jC0peDyg97th37rLmPLB9txnPl50ewpkZuwOAQJBAM/eJnFw
F5QAcL4CYDbfBKocx82VX/pFXng50T7FODiWbbL4UnxICE0UBFInNNiWJxNEb6jL
5xd0pcy9O2DOeso=
-----END PRIVATE KEY-----
</code></pre>

<p>I've tried to look online, but I wasn't able to find enough resources to solve the problem. Any help will be appreciated! Thank you!</p>
","<p>Thanks to <em>Curious Programmer</em> I found the answer from this link:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/33837617/node-rsa-errors-when-trying-to-decrypt-message-with-private-key"">node-rsa errors when trying to decrypt message with private key</a></li>
</ul>

<p>I now require node-rsa instead of just rsa. And I the line that fixed my code is this:</p>

<pre><code>    myDecrypter.setOptions({encryptionScheme: 'pkcs1'});
</code></pre>

<p>where myDecrypter is the private key.</p>
","2540","<objective-c><node.js><encryption><rsa><encryption-asymmetric>","2","1","2","2016-09-04 17:49:44","39319822","0","","3311952","","2016-09-04 13:29:48","2016-09-04 12:58:51",""
"15964980","Construct RSACryptoServiceProvider from public key (not certificate)","<p>I am working on a project where I need to use a ""public key"" to encrypt a message using RSA algorithm. I was provided with a certificate and my first thought was to use Public Key from that certificate and after investigation I learned I need to use <code>RSACryptoServiceProvider</code> for encryption. </p>

<p>I have checked msdn and only method I thought I should use is <code>RSACryptoServiceProvider.ImportCspBlob(byte[] keyBlob)</code>. 
When I tried to use public key exported from certificate I was getting an error that the header data for certificate is invalid. </p>

<p>I know I can cast <code>X509certificate2.PublicKey.Key</code> to <code>RSACryptoServiceProvider</code> but from what I understood from my client is that going forward I will be given only a public key and not the certificate. This key will have to be saved in .xml configuration file.</p>

<p>So to summarize: Is there a way to generate an <code>RSACryptoServiceProvider</code> given only a certificate's public key?</p>
","<p>You can try to look at this example: <a href=""https://gist.github.com/zachbonham/3692542"" rel=""nofollow"" title=""RSA public key encryption in C#"">RSA public key encryption in C#</a></p>

<pre><code>var publicKey = ""&lt;RSAKeyValue&gt;&lt;Modulus&gt;21wEnTU+mcD2w0Lfo1Gv4rtcSWsQJQTNa6gio05AOkV/Er9w3Y13Ddo5wGtjJ19402S71HUeN0vbKILLJdRSES5MHSdJPSVrOqdrll/vLXxDxWs/U0UT1c8u6k/Ogx9hTtZxYwoeYqdhDblof3E75d9n2F0Zvf6iTb4cI7j6fMs=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;"";

var testData = Encoding.UTF8.GetBytes(""testing"");

using ( var rsa = new RSACryptoServiceProvider(1024))
{
    try
    {
        // client encrypting data with public key issued by server
        //
        rsa.FromXmlString(publicKey);
        var encryptedData = rsa.Encrypt(testData, true);

        var base64Encrypted = Convert.ToBase64String(encryptedData);

    }
    finally
    {
        rsa.PersistKeyInCsp = false;
    }
}
</code></pre>
","2406","<c#><rsa><x509certificate><encryption-asymmetric>","4","0","2","2015-11-10 06:44:16","","0","","474189","","2013-04-12 11:29:33","2013-04-12 06:55:14",""
"15964980","Construct RSACryptoServiceProvider from public key (not certificate)","<p>I am working on a project where I need to use a ""public key"" to encrypt a message using RSA algorithm. I was provided with a certificate and my first thought was to use Public Key from that certificate and after investigation I learned I need to use <code>RSACryptoServiceProvider</code> for encryption. </p>

<p>I have checked msdn and only method I thought I should use is <code>RSACryptoServiceProvider.ImportCspBlob(byte[] keyBlob)</code>. 
When I tried to use public key exported from certificate I was getting an error that the header data for certificate is invalid. </p>

<p>I know I can cast <code>X509certificate2.PublicKey.Key</code> to <code>RSACryptoServiceProvider</code> but from what I understood from my client is that going forward I will be given only a public key and not the certificate. This key will have to be saved in .xml configuration file.</p>

<p>So to summarize: Is there a way to generate an <code>RSACryptoServiceProvider</code> given only a certificate's public key?</p>
","<p>You are OK and following a good typical pattern.  The Sender of the data does not need the private key.</p>

<p>The following may confirm some of the code you already have figured out.
The one line where I set the private key for the receiver/decoder I left out.
I took this from a test case I have in my build deploy stuff.</p>

<pre><code> byte[] certBytAr;  // This is the certificate as bianry in a .cer file (no  private key in it - public only) 

 X509Certificate2 cert2 = new X509Certificate2(certBytAr);


 string strToEncrypt = ""Public To Private Test StackOverFlow PsudeoCode. Surfs Up at Secret Beach."";
 byte[] bytArToEncrypt = Encoding.UTF8.GetBytes(strToEncrypt);

 RSACryptoServiceProvider rsaEncryptor = (RSACryptoServiceProvider)cert2.PublicKey.Key; 

 byte[] dataNowEncryptedArray = rsaEncryptor.Encrypt(bytArToEncrypt, true);

 // done - you now have encrypted bytes 
 // 

  // somewhere elxe ...
 // this should decrpyt it - simulate the destination which will decrypt the data with the private key 

 RSACryptoServiceProvider pk =   // how this is set is complicated 

 // set the private key in the x509 oobject we created way above 
 cert2.PrivateKey = pk; 

 RSACryptoServiceProvider rsaDecryptor = (RSACryptoServiceProvider)cert2.PrivateKey;
 byte[] dataDecrypted = rsaDecryptor.Decrypt(dataNowEncryptedArray, true);

 Console.WriteLine("" encrypt 1 Way Intermediate "" + BitConverter.ToString(dataDecrypted));

 string strDecodedFinal = Encoding.UTF8.GetString(dataDecrypted);

 if (strDecodedFinal == strToEncrypt)
 {

 }
 else
 {
     Console.WriteLine("" FAILURE OF  ENCRYPTION ROUND TRIP IN SIMPLE TEST (Direction: Public to Private). No Surfing For You "");
  }
</code></pre>
","2406","<c#><rsa><x509certificate><encryption-asymmetric>","4","0","2","2015-11-10 06:44:16","","0","","474189","","2013-04-12 11:29:33","2013-04-12 06:55:14",""
"4743325","What is incorrect from this All-In-One XML encryption/decryption MSDN sample?","<p>I've merged the XML <a href=""http://msdn.microsoft.com/en-us/library/ms229746.aspx"" rel=""nofollow noreferrer"">Encryption</a> and <a href=""http://msdn.microsoft.com/en-us/library/ms229919.aspx"" rel=""nofollow noreferrer"">Decryption</a> from MSDN into the same project below, and am getting the error </p>

<blockquote>
  <p>""Unable to retrieve the decryption
  key"".
  <img src=""https://i.stack.imgur.com/JXnQW.png"" alt=""alt text""></p>
</blockquote>

<p>The strangest thing is that I am able to write the private key before and after the exception, so I'm unsure of what the issue may be.  The merged code is below.</p>

<pre><code>   public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, string EncryptionElementID, RSA Alg, string KeyName)
   {
       // Check the arguments.
       if (Doc == null)
           throw new ArgumentNullException(""Doc"");
       if (ElementToEncrypt == null)
           throw new ArgumentNullException(""ElementToEncrypt"");
       if (EncryptionElementID == null)
           throw new ArgumentNullException(""EncryptionElementID"");
       if (Alg == null)
           throw new ArgumentNullException(""Alg"");
       if (KeyName == null)
           throw new ArgumentNullException(""KeyName"");

       ////////////////////////////////////////////////
       // Find the specified element in the XmlDocument
       // object and create a new XmlElemnt object.
       ////////////////////////////////////////////////
       XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;

       // Throw an XmlException if the element was not found.
       if (elementToEncrypt == null)
       {
           throw new XmlException(""The specified element was not found"");

       }
       RijndaelManaged sessionKey = null;

       try
       {
           //////////////////////////////////////////////////
           // Create a new instance of the EncryptedXml class
           // and use it to encrypt the XmlElement with the
           // a new random symmetric key.
           //////////////////////////////////////////////////

           // Create a 256 bit Rijndael key.
           sessionKey = new RijndaelManaged();
           sessionKey.KeySize = 256;

           EncryptedXml eXml = new EncryptedXml();

           byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);
           ////////////////////////////////////////////////
           // Construct an EncryptedData object and populate
           // it with the desired encryption information.
           ////////////////////////////////////////////////

           EncryptedData edElement = new EncryptedData();
           edElement.Type = EncryptedXml.XmlEncElementUrl;
           edElement.Id = EncryptionElementID;
           // Create an EncryptionMethod element so that the
           // receiver knows which algorithm to use for decryption.

           edElement.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncAES256Url);
           // Encrypt the session key and add it to an EncryptedKey element.
           EncryptedKey ek = new EncryptedKey();

           byte[] encryptedKey = EncryptedXml.EncryptKey(sessionKey.Key, Alg, false);

           ek.CipherData = new CipherData(encryptedKey);

           ek.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncRSA15Url);

           // Create a new DataReference element
           // for the KeyInfo element.  This optional
           // element specifies which EncryptedData
           // uses this key.  An XML document can have
           // multiple EncryptedData elements that use
           // different keys.
           DataReference dRef = new DataReference();

           // Specify the EncryptedData URI.
           dRef.Uri = ""#"" + EncryptionElementID;

           // Add the DataReference to the EncryptedKey.
           ek.AddReference(dRef);
           // Add the encrypted key to the
           // EncryptedData object.

           edElement.KeyInfo.AddClause(new KeyInfoEncryptedKey(ek));
           // Set the KeyInfo element to specify the
           // name of the RSA key.

           // Create a new KeyInfo element.
           edElement.KeyInfo = new KeyInfo();

           // Create a new KeyInfoName element.
           KeyInfoName kin = new KeyInfoName();

           // Specify a name for the key.
           kin.Value = KeyName;

           // Add the KeyInfoName element to the
           // EncryptedKey object.
           ek.KeyInfo.AddClause(kin);
           // Add the encrypted element data to the
           // EncryptedData object.
           edElement.CipherData.CipherValue = encryptedElement;
           ////////////////////////////////////////////////////
           // Replace the element from the original XmlDocument
           // object with the EncryptedData element.
           ////////////////////////////////////////////////////
           EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);
       }
       catch (Exception e)
       {
           // re-throw the exception.
           throw e;
       }
       finally
       {
           if (sessionKey != null)
           {
               sessionKey.Clear();
           }

       }

   }
   public static void Decrypt(XmlDocument Doc, RSA Alg, string KeyName)
   {
       // Check the arguments.
       if (Doc == null)
           throw new ArgumentNullException(""Doc"");
       if (Alg == null)
           throw new ArgumentNullException(""Alg"");
       if (KeyName == null)
           throw new ArgumentNullException(""KeyName"");
       // Create a new EncryptedXml object.
       EncryptedXml exml = new EncryptedXml(Doc);

       // Add a key-name mapping.
       // This method can only decrypt documents
       // that present the specified key name.
       exml.AddKeyNameMapping(KeyName, Alg);

       // Decrypt the element throws Exception:  &lt;--------------
       //
       // Unable to retrieve the decryption key"".
       //
        exml.DecryptDocument();

   }
    static void Main(string[] args)
    {

        string containerName = ""XML_ENC_RSA_KEY"";

   ////////////////////////////////////////////////////////
    // Create and persist a key pair
   //  Save the Public portion of the keypair in a string we will use later

        // Create a new CspParameters object to specify
        // a key container.
        CspParameters cspParams = new CspParameters();
        cspParams.KeyContainerName = containerName;

        // Create a new RSA key and save it in the container.  This key will encrypt
        // a symmetric key, which will then be encryped in the XML document.
        RSACryptoServiceProvider rsaKey = new RSACryptoServiceProvider(cspParams);
        rsaKey.PersistKeyInCsp = true;
        Console.WriteLine(rsaKey.ToXmlString(false));
        string PublicKeyTest = rsaKey.ToXmlString(false);




  ////////////////////////////////////////////////////////
    // Encrypt using a new instance of the crypto provider and the public key string



 Console.WriteLine();
        Console.WriteLine();
        Console.WriteLine();
       var rsaKey2 = new RSACryptoServiceProvider();
       rsaKey2.FromXmlString(PublicKeyTest);
       Console.WriteLine(rsaKey2.ToXmlString(false));
       PublicKeyTest = rsaKey2.ToXmlString(false);


        // Create an XmlDocument object.
        XmlDocument xmlDoc = new XmlDocument();

        // Load an XML file into the XmlDocument object.
        try
        {
            xmlDoc.PreserveWhitespace = true;
            xmlDoc.Load(""test.xml"");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        try
        {
            // Encrypt the ""creditcard"" element.
            Encrypt(xmlDoc, ""creditcard"", ""EncryptedElement1"", rsaKey2, ""rsaKey"");


            // Save the XML document.
            xmlDoc.Save(""testOUT.xml"");

            // Display the encrypted XML to the console.
            Console.WriteLine(""Encrypted XML:"");
            Console.WriteLine();
            Console.WriteLine(xmlDoc.OuterXml);

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {
            // Clear the RSA key.
            rsaKey2.Clear(); 
        }


        Console.ReadLine();


 ////////////////////////////////////////////////////////
// Decrypt the output, using the internal CSP

          xmlDoc = new XmlDocument();

        // Load an XML file into the XmlDocument object.
        try
        {
            xmlDoc.PreserveWhitespace = true;
            xmlDoc.Load(""testOUT.xml"");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
         cspParams = new CspParameters();
        cspParams.KeyContainerName = containerName;

        // Get the RSA key from the key container.  This key will decrypt
        // a symmetric key that was imbedded in the XML document.
        var rsaKey3 = new RSACryptoServiceProvider(cspParams);
          Console.WriteLine(rsaKey3.ToXmlString(true));
        try
        {

            // Decrypt the elements, throws exception
            Decrypt(xmlDoc, rsaKey3, ""rsaKey"");

            // Save the XML document.
            xmlDoc.Save(""test3.xml"");

            // Display the encrypted XML to the console.
            Console.WriteLine();
            Console.WriteLine(""Decrypted XML:"");
            Console.WriteLine();
            Console.WriteLine(xmlDoc.OuterXml);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {

        }


        Console.ReadLine();
</code></pre>

<p>Full exception (e)</p>

<blockquote>
  <p>System.Security.Cryptography.CryptographicException:
  Unable to retrieve the decryption key.
  at
  System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument()
  at RemoteKey.Decrypt(XmlDocument Doc,
  RSA Alg, String KeyName) in
  C:\Users\me\ClientAgent\Program.cs:line
  185    at RemoteKey.Main(String[]
  args) in
  C:\Users\Me\ClientAgent\Program.cs:line
  286</p>
</blockquote>
","<p>Your Encrypt function is writing XML that does not contain a KeyName element, and so your call to DecryptDocument cannot find the key.</p>

<p>I didn't look any further into why your Encrypt is writing incomplete XML, but you can find another example Encrypt function on MSDN here: <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.xml.encryptedxml.addkeynamemapping.aspx"" rel=""nofollow"">AddKeyNameMapping Method</a>.</p>

<p>Replace just your Encrypt function with the function in that MSDN example, changing only the function argument type for Alg from SymmetricAlgorithm to RSA, and remove your third argument ""EncryptedElement1"" from the call to Encrypt in your existing code, to get it to compile, and it should run to the end of your Decrypt and work.</p>

<p>Once you have that running, you can work backwards looking at the differences in your Encrypt to the one in this example, or, just keep this one if it works for you.</p>
","2340","<c#><xml><encryption><rsa><encryption-asymmetric>","0","1","1","2011-01-20 05:42:04","4743825","9","","328397","","2011-01-20 04:38:35","2011-01-20 04:05:05",""
"5423501","Can you do symmetric encryption on SAML attributes in SAML 2.0?","<p>Can you do symmetric encryption on SAML attributes in SAML 2.0?   We can seem to do asymmetric.  What are pros and cons?</p>
","<p>SAML 2.0 utilizes XML Encryption (Sect 5.2.1 and 5.2.2). With that said, Sect 4.2 of the <a href=""http://docs.oasis-open.org/security/saml/v2.0/saml-conformance-2.0-os.pdf"" rel=""nofollow"">SAML 2.0 Conformance docs</a> specifies you <em>must</em> support the following to be SAML 2.0 compliant:</p>

<ul>
<li>Block Encryption: TRIPLE DES, AES-128, AES-256.</li>
<li>Key Transport: RSA-v1.5, RSA-OAEP</li>
</ul>

<p>In other words, SAML 2.0  mandates you use asymmetric keys. </p>

<p>So, the ""cons"" will be that you are not SAML 2.0 compliant if you utilize symmetric encryption of SAML Attributes which will lead to interopability issues with other SAML 2.0 partners. However, that does not mean that you cannot actually choose to use this type of encryption as long as your partner supports this as well. </p>

<p>On the ""pros"" side, symmetric encryption is faster (less computationally intensive I'm told) but I'm pretty sure it's not worth the trade-off wrt compliance.</p>
","2331","<saml><encryption-asymmetric><encryption-symmetric>","1","3","3","2013-07-25 14:27:51","","0","1","","","","2011-03-24 18:06:17",""
"5423501","Can you do symmetric encryption on SAML attributes in SAML 2.0?","<p>Can you do symmetric encryption on SAML attributes in SAML 2.0?   We can seem to do asymmetric.  What are pros and cons?</p>
","<p>Keep in mind that in reality you are always using both asymmetric and symmetric encryption - this is best practice in security.  The underlying block encryption method that is symmetric (as noted by Ian: Triple DES, AES, etc.).  Asymmetric is preferred due to stronger security (larger key sizes, etc.) - and ease of keeping the private keys secure (only the public keys need to be distributed).  However due to its performance it's only used as a means to exchange symmetric keys.  Symmetric encryption on the bulk of the data is done for speed.</p>

<p>In the XML Encryption spec, EncryptedData element contains symmetrically encrypted data, while EncryptedKey is your symmetric encryption/decryption key, encrypted via asymmetric encryption.</p>
","2331","<saml><encryption-asymmetric><encryption-symmetric>","1","1","3","2013-07-25 14:27:51","","0","1","","","","2011-03-24 18:06:17",""
"5423501","Can you do symmetric encryption on SAML attributes in SAML 2.0?","<p>Can you do symmetric encryption on SAML attributes in SAML 2.0?   We can seem to do asymmetric.  What are pros and cons?</p>
","<p>If you want to understand XML encryption, Don Eastlake's classic, Secure XML: The New Syntax for Signatures and Encryption, is still the best.  He explains the trade-offs in the designs for XML Enc and DSig, and has tips about implementation.  In the 9 years since he wrote it, many conventions have arisen about these trade-offs, which you can find via search.</p>

<p>My colleague, Ian, has listed the SAML 2.0 required algorithms, so you can focus on these in Eastlake's book.  And as you are probably aware, ""required"" in a spec means that if you limit yourself to just these, you will be interoperable.</p>

<p>Finally, this technique Scott describes, of generating a random symmetrical key, encrypting the data with it, and then encrypting the random symmetrical key w/ the public encryption key of your recipient is ofter called digital enveloping and is used everywhere in cryptography, from SSL to key management systems.</p>
","2331","<saml><encryption-asymmetric><encryption-symmetric>","1","0","3","2013-07-25 14:27:51","","0","1","","","","2011-03-24 18:06:17",""
"4977473","How does public key encryption work?","<p>How does public key encryption work, using a private and public/public key to decrypt/encrypt? What does it mean for the key to be 256 bits? How is it decrypted? Is there a language for writing encryption programs or is any language fine?</p>
","<p>For the first question see <a href=""http://en.wikipedia.org/wiki/Public-key_cryptography"" rel=""nofollow"">http://en.wikipedia.org/wiki/Public-key_cryptography</a>
you can google for more details. </p>

<p>256 bit key means we are using key of length 256. you will understand that after more reading about answer of first question. </p>

<p>Many language have inbuilt or third party api to implement these calls. </p>
","2304","<encryption><public-key-encryption><encryption-asymmetric>","1","1","2","2014-05-14 06:59:50","4977602","1","","43681","","2014-05-14 06:59:50","2011-02-12 10:08:32",""
"4977473","How does public key encryption work?","<p>How does public key encryption work, using a private and public/public key to decrypt/encrypt? What does it mean for the key to be 256 bits? How is it decrypted? Is there a language for writing encryption programs or is any language fine?</p>
","<p>In brief: </p>

<p>the data is encrypted using symmetric algorithm and a random symmetric key. Then the random key is encrypted using public asymmetric key. The encrypted random key is stored together with the encrypted data. To decrypt the data one uses private asymmetric key to decrypt the stored random key, then the decrypted random key is used to decrypt the data.</p>

<p>256-bit is the length of the key. However, it has dramatically different meaning for symmetric and asymmetric keys. For symmetric keys 256 bits are a very strong key (you can have even longer keys with AES 384 or AES 512 where the numbers specify the key length the algorithm operates with). For asymmetric algorithms 256 bits is nothing, and comparable strength is 2048 bits. </p>

<p>Public key encryption can be implemented using any language, that supports math operations and arrays. However, doing this is reinventing the wheels. There exists a number of cross-platform libraries for PKI: open-source <a href=""http://www.openssl.org/"" rel=""nofollow"">OpenSSL</a> for C++, <a href=""http://www.bouncycastle.org/"" rel=""nofollow"">BouncyCastle</a> for Java and some more. Our company offers a supported and maintained <a href=""http://www.eldos.com/sbb/"" rel=""nofollow"">SecureBlackbox</a> product for .NET, Windows and Linux (MacOS X version to come soon).</p>

<p>Also there's a couple of <a href=""https://www.eldos.com/forum/read.php?FID=7&amp;TID=1842"" rel=""nofollow"">books about PKI</a> that we recommend to all our users. RSA's guide is an easy reading (but very useful) and the second book goes into deeper details. </p>
","2304","<encryption><public-key-encryption><encryption-asymmetric>","1","2","2","2014-05-14 06:59:50","4977602","1","","43681","","2014-05-14 06:59:50","2011-02-12 10:08:32",""
"21008480","signature verification process in java security","<p>I want to send a original_message between two person. let say Alice and Bob, and
I want to know if these steps are correct for verification of the signature or not</p>

<ol>
<li>Alice hash the original_message with her PrivateKey -> h(m)</li>
<li>Alice cipher the hashed message                     -> c(h(m))</li>
<li>Alice sign the message with her PrivateKey          -> s(c(h(m)))</li>
</ol>

<p>Alice send the final signed message with her (PublicKey) and (the original_message) to Bob.
in Bob side:</p>

<ol>
<li>Bob hash the original_message                          -> h(m)</li>
<li>Bob decipher the signed message with Alice public key  -> d(s(c(h(m))))</li>
<li>Bob check deciphered message with hashed message if they are equal or not ?
if (  h(m) == d(s(c(h(m))))  )</li>
</ol>

<p>I know that I am doing some mistake. does any one knows what is the good order in both side ?</p>

<p>Here I used java.security for doing this but when I check the hashes at final step it gives me false !</p>

<p>in Alice part :</p>

<pre><code>public byte[] Sign(byte[] aMessage) {

        try {
            // get an instance of a cipher with RSA with ENCRYPT_MODE
            // Init the signature with the private key
            // Compute signature
            Cipher cipher = Cipher.getInstance(""RSA"");
            cipher.init(Cipher.ENCRYPT_MODE, thePrivateKey);

            Signature instance = Signature.getInstance(""MD5withRSA"");
            instance.initSign(thePrivateKey);

            // get an instance of the java.security.MessageDigest with MD5
            // process the digest
            MessageDigest md5_digest = MessageDigest.getInstance(""MD5"");
            md5_digest.update(aMessage);
            byte[] digest = md5_digest.digest();

            // return the encrypted digest
            byte[] cipherText = cipher.doFinal(digest);

            instance.update(cipherText);            
            byte[] signedMSG = instance.sign();

            return signedMSG;

        } catch (Exception e) {
            System.out.println(""Signature error"");
            e.printStackTrace();
            return null;
        }

    }
</code></pre>

<p>in Bob part :</p>

<pre><code>public boolean CheckSignature(byte[] aMessage, byte[] aSignature,
            PublicKey aPK) {
        try {
            // get an instance of a cipher with RSA with ENCRYPT_MODE
            // Init the signature with the private key
            // decrypt the signature
            Cipher cipher = Cipher.getInstance(""RSA"");
            cipher.init(Cipher.DECRYPT_MODE, aPK);
            byte[] decrypted_digest =  cipher.doFinal(aSignature);

            // get an instance of the java.security.MessageDigest with MD5
            MessageDigest md5_digest = MessageDigest.getInstance(""MD5"");

            // process the digest
            md5_digest.update(aMessage);
            byte[] digest = md5_digest.digest();

            // check if digest1 == digest2
            if (decrypted_digest == digest) {
                return true;
            }else {
                return false;
            }

        } catch (Exception e) {
            System.out.println(""Verify signature error"");
            e.printStackTrace();
            return false;
        }
    }
</code></pre>
","<p>Digital Signature is the Encrypted (with private key) cipher of the Hash of the message.</p>

<p>Signature s = c(h(m))</p>

<p>Now s is attached to the message m. Signed message to be transmitted from Alice to Bob is m+s</p>

<p>After receiving m+s on Bob's side, Bob would decrypt the signature with Alice's public key which would be present in the certificate. So here he does d(s) = d(c(h(m)) = h(m)</p>

<p>Also the Bob received the message so he would compute the hash of the message m which is h(m)</p>

<p>Now he would compare the outputs from both the above steps to see if they match. This ensures the message has not been tampered with by anyone in between.</p>

<p>This is the general idea of how Digital signatures work. Hope this helps.</p>

<p>Wikipedia has a graphical representation of the same process here:
<a href=""http://upload.wikimedia.org/wikipedia/commons/2/2b/Digital_Signature_diagram.svg"" rel=""nofollow"">http://upload.wikimedia.org/wikipedia/commons/2/2b/Digital_Signature_diagram.svg</a></p>
","2281","<java><security><digital-signature><encryption-asymmetric><message-digest>","0","-2","2","2015-06-18 12:39:36","21017614","1","2","1816580","","2015-06-18 12:39:36","2014-01-08 23:06:11",""
"21008480","signature verification process in java security","<p>I want to send a original_message between two person. let say Alice and Bob, and
I want to know if these steps are correct for verification of the signature or not</p>

<ol>
<li>Alice hash the original_message with her PrivateKey -> h(m)</li>
<li>Alice cipher the hashed message                     -> c(h(m))</li>
<li>Alice sign the message with her PrivateKey          -> s(c(h(m)))</li>
</ol>

<p>Alice send the final signed message with her (PublicKey) and (the original_message) to Bob.
in Bob side:</p>

<ol>
<li>Bob hash the original_message                          -> h(m)</li>
<li>Bob decipher the signed message with Alice public key  -> d(s(c(h(m))))</li>
<li>Bob check deciphered message with hashed message if they are equal or not ?
if (  h(m) == d(s(c(h(m))))  )</li>
</ol>

<p>I know that I am doing some mistake. does any one knows what is the good order in both side ?</p>

<p>Here I used java.security for doing this but when I check the hashes at final step it gives me false !</p>

<p>in Alice part :</p>

<pre><code>public byte[] Sign(byte[] aMessage) {

        try {
            // get an instance of a cipher with RSA with ENCRYPT_MODE
            // Init the signature with the private key
            // Compute signature
            Cipher cipher = Cipher.getInstance(""RSA"");
            cipher.init(Cipher.ENCRYPT_MODE, thePrivateKey);

            Signature instance = Signature.getInstance(""MD5withRSA"");
            instance.initSign(thePrivateKey);

            // get an instance of the java.security.MessageDigest with MD5
            // process the digest
            MessageDigest md5_digest = MessageDigest.getInstance(""MD5"");
            md5_digest.update(aMessage);
            byte[] digest = md5_digest.digest();

            // return the encrypted digest
            byte[] cipherText = cipher.doFinal(digest);

            instance.update(cipherText);            
            byte[] signedMSG = instance.sign();

            return signedMSG;

        } catch (Exception e) {
            System.out.println(""Signature error"");
            e.printStackTrace();
            return null;
        }

    }
</code></pre>

<p>in Bob part :</p>

<pre><code>public boolean CheckSignature(byte[] aMessage, byte[] aSignature,
            PublicKey aPK) {
        try {
            // get an instance of a cipher with RSA with ENCRYPT_MODE
            // Init the signature with the private key
            // decrypt the signature
            Cipher cipher = Cipher.getInstance(""RSA"");
            cipher.init(Cipher.DECRYPT_MODE, aPK);
            byte[] decrypted_digest =  cipher.doFinal(aSignature);

            // get an instance of the java.security.MessageDigest with MD5
            MessageDigest md5_digest = MessageDigest.getInstance(""MD5"");

            // process the digest
            md5_digest.update(aMessage);
            byte[] digest = md5_digest.digest();

            // check if digest1 == digest2
            if (decrypted_digest == digest) {
                return true;
            }else {
                return false;
            }

        } catch (Exception e) {
            System.out.println(""Verify signature error"");
            e.printStackTrace();
            return false;
        }
    }
</code></pre>
","<p>Finally I found the answer. The mistake was, doing a sign() in Alice part. Because when you are doing the hashing and encryption it already became a signature, and when you sign() it another time in the Bob's part became impossible to recover the hashed signature .</p>

<p>my code is also a good example of ""One-way hashing in java security public key encryption""</p>

<p>this is the modification in Alice part and everything work after.</p>

<pre><code>public byte[] Sign(byte[] aMessage) {

        try {
            // get an instance of a cipher with RSA with ENCRYPT_MODE
            // Init the signature with the private key
            // Compute signature
            Cipher cipher = Cipher.getInstance(""RSA"");
            cipher.init(Cipher.ENCRYPT_MODE, thePrivateKey);

            // get an instance of the java.security.MessageDigest with MD5
            // process the digest
            MessageDigest md5_digest = MessageDigest.getInstance(""MD5"");
            byte[] digest = md5_digest.digest(aMessage);

            // return the encrypted digest
            byte[] cipherText = cipher.doFinal(digest);

            return cipherText;

        } catch (Exception e) {
            System.out.println(""Signature error"");
            e.printStackTrace();
            return null;
        }

    }
</code></pre>
","2281","<java><security><digital-signature><encryption-asymmetric><message-digest>","0","0","2","2015-06-18 12:39:36","21017614","1","2","1816580","","2015-06-18 12:39:36","2014-01-08 23:06:11",""
"2403124","Is there a 8 bit block sized Public-Private key encryption algorithm?","<p>I checked out TripleDES. It's block size is of 64 bits. </p>

<p>Is there any algorithm for 8 bits block size?</p>

<p>Thanks</p>

<p>EDIT : I intend not to use this for perfect protection, but for a just-in-case situation where one who sees the code should not find the plaintext. So 8 bit is kinda okay for me.</p>
","<p>RSA with 8-bit key :)</p>

<p>Seriously though, the block-based cyphers are stateless - the ciphertext of a block depends only on the cleartext of the block, not on the previous blocks (otherwise it would be a stream cypher). A block cypher that acts on 8-bit blocks can be brute-forced easily, so there's no point.</p>
","2244","<encryption><encryption-asymmetric><public-key-encryption>","2","2","2","2010-03-09 04:39:00","2403321","1","","1286649","","2010-03-09 04:39:00","2010-03-08 17:11:38",""
"2403124","Is there a 8 bit block sized Public-Private key encryption algorithm?","<p>I checked out TripleDES. It's block size is of 64 bits. </p>

<p>Is there any algorithm for 8 bits block size?</p>

<p>Thanks</p>

<p>EDIT : I intend not to use this for perfect protection, but for a just-in-case situation where one who sees the code should not find the plaintext. So 8 bit is kinda okay for me.</p>
","<p>A block cipher with 8-bit blocks means that each input block can be encrypted into 256 possible values -- which means that an attacker has a 1/256 chance of guessing the input value. It turns out to be very difficult to use such an algorithm securely. Nevertheless it is <a href=""http://www.bolet.org/~pornin/2007-fse-granboulan+pornin.pdf"" rel=""noreferrer"">possible</a> to define a block cipher over 8-bit blocks, and to do it ""perfectly""; just do not expect it to be generally useful.</p>

<p>There also are ""block-less"" ciphers, known as ""stream ciphers"" which encrypt data ""byte by byte"" (or even ""bit by bit""); most are just pseudo-random generators which produce an arbitrary amount of bytes from a key. That generated stream is just to be combined with the data to encrypt with a XOR. The traditional stream cipher is RC4; but <a href=""http://www.ecrypt.eu.org/stream/"" rel=""noreferrer"">newer and better</a> stream ciphers have been designed.</p>

<p>A block cipher, by itself, is a mathematical tool. In order to actually encrypt data, the block cipher must be used properly. The keywords are <em>chaining</em> and <em>padding</em>. Chaining is about defining what actually goes into the block cipher and what to do with the output. Padding is about adding some bytes to the data, in a reversible way, so that the padded message length is appropriate for the chosen chaining mode. The traditional chaining mode is  called <a href=""http://en.wikipedia.org/wiki/Cipher_block_chaining"" rel=""noreferrer"">CBC</a>. A newer (and arguably better) chaining mode is CTR (same link), which has the added bonus of avoiding the need for padding (CTR just turns a block cipher into a stream cipher).</p>

<p>As for block ciphers, you should use <a href=""http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""noreferrer"">AES</a> instead of TripleDES. It is faster, more secure, and the current American standard.</p>
","2244","<encryption><encryption-asymmetric><public-key-encryption>","2","6","2","2010-03-09 04:39:00","2403321","1","","1286649","","2010-03-09 04:39:00","2010-03-08 17:11:38",""
"3970684","RSA Encryption in .NET - decryption in JAVA -> Java throws ""modulus not positive"" error","<p>I am having problems with our third party vendor implimenting an sso. They are receiving the following error when verifying my signature:</p>

<p>java.lang.ArithmeticException: BigInteger: modulus not positive--at java.math.BigInteger.modPow(BigInteger.java:1556) </p>

<p>I have no control over their Java code. Here is what I am doing now:</p>

<p>I created a key pair in C# using this code:</p>

<pre><code>        CspParameters csp = new CspParameters();
        csp.KeyNumber = (int)KeyNumber.Signature;
        using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(1024, csp))
        {

            File.AppendAllText(path + ""PrivateKey.xml"", rsa.ToXmlString(true));
            File.AppendAllText(path + ""PublicKey.xml"", rsa.ToXmlString(false));
        }
</code></pre>

<p>Here is the code for the signature:</p>

<pre><code>public string MD5withRSASignature(string encryptedStringToSign)
    {

        byte[] signature;
        using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(1024))
        {
            XmlDocument xDoc = new XmlDocument();
            xDoc.Load(PRIVATE_KEY_PATH);
            rsa.FromXmlString(xDoc.OuterXml);
            byte[] bytes = Encoding.UTF8.GetBytes(encryptedStringToSign);
            signature = rsa.SignData(bytes, new MD5CryptoServiceProvider());
        }

        return Convert.ToBase64String(signature);
    }
</code></pre>

<p>(Yes I know the private key should be in a key store). </p>

<p>Here is the code they use to convert xml keys (this is Java)</p>

<pre><code>private static RSAPublicKey ReadXMLKey(String fileName)
{

        DocumentBuilderFactory factory =     DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse( new File(fileName) );
        byte[] modBytes = GetBytesFromElement(document, ""Modulus"");
        byte[] expBytes = GetBytesFromElement(document, ""Exponent"");
        RSAPublicKeySpec rsaKeyspec = new RSAPublicKeySpec(new BigInteger(modBytes), new BigInteger(expBytes));
        RSAPublicKey key = (RSAPublicKey)KeyFactory.getInstance(""RSA"").generatePublic(rsaKeyspec);

        return key;
         }

private static byte[] GetBytesFromElement(Document doc, String tag) throws IOException
{
    BASE64Decoder decoder = new BASE64Decoder();
    NodeList list = doc.getElementsByTagName(tag);
    byte[] results = null;
    if (list.getLength() == 1)
    {
        Element item = (Element)list.item(0);
        Text text = (Text)item.getFirstChild();
        results = decoder.decodeBuffer(text.getNodeValue().trim());
    }
    return results;
}
</code></pre>
","<p>The exception has to do with the RSA public key that Java is using. None of your code addresses that point. How did the Java side obtain that key, what format is being used?</p>

<p>One common mistake that can account for the error is if the modulus is converted to an array of bytes <em>but</em> a leading zero byte is not present when it needs to be. Basically, <a href=""http://download.oracle.com/javase/6/docs/api/java/math/BigInteger.html#BigInteger%28byte%5b%5d%29"" rel=""nofollow"">this BigInteger constructor</a> is a little trickier to use than it may first appear. It is designed for compatibility with DER-encoded ASN.1 integers. The upshot of it all is that if the first byte <code>b</code> of your modulus has the high bit set, i.e. <code>128 &lt;= b &lt; 256</code>, you must prepend a leading zero byte or your modulus will be interpreted as a negative number. For simplicity you can always prepend a leading zero byte; no harm will come if it wasn't necessary.</p>
","2233","<c#><java><.net><rsa><encryption-asymmetric>","3","4","1","2011-01-01 08:14:45","3977447","3","1","228080","","2010-10-20 13:57:46","2010-10-19 16:50:01",""
"24919173","Generate EC Diffie-Hellman public and private key pair","<p>I need to generate an EC Diffie Hellman key pair. I am using the secp256r1 named curve, and OpenSSL. This is what I have with me so far:</p>

<pre><code>unsigned char *ecdh(size_t *secret_len)
{
    EVP_PKEY_CTX *pctx, *kctx;
    EVP_PKEY_CTX *ctx;
    unsigned char *secret;
    EVP_PKEY *pkey = NULL, *peerkey, *params = NULL;
    /* NB: assumes pkey, peerkey have been already set up */

    /* Create the context for parameter generation */
    if(NULL == (pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL))) 
        printf(""Error in EC key generation\n"");

    /* Initialise the parameter generation */
    if(1 != EVP_PKEY_paramgen_init(pctx)) 
        printf(""Error in EC key generation\n"");

    /* We're going to use the ANSI X9.62 Prime 256v1 curve */
    if(1 != EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx, NID_X9_62_prime256v1)) 
        printf(""Error in EC key generation\n"");

    /* Create the parameter object params */
    if (!EVP_PKEY_paramgen(pctx, &amp;params)) 
        printf(""Error in EC key generation\n"");

    /* Create the context for the key generation */
    if(NULL == (kctx = EVP_PKEY_CTX_new(params, NULL))) 
        printf(""Error in EC key generation\n"");

    /* Generate the key */
    if(1 != EVP_PKEY_keygen_init(kctx)) 
        printf(""Error in EC key generation\n"");

    if (1 != EVP_PKEY_keygen(kctx, &amp;pkey)) 
        printf(""Error in EC key generation\n"");

    /* Get the peer's public key, and provide the peer with our public key -
     * how this is done will be specific to your circumstances */
    peerkey = get_peerkey(pkey);

    /* Create the context for the shared secret derivation */
    if(NULL == (ctx = EVP_PKEY_CTX_new(pkey, NULL))) 
        printf(""Error in EC key generation\n"");

    /* Initialise */
    if(1 != EVP_PKEY_derive_init(ctx)) 
        printf(""Error in EC key generation\n"");

    /* Provide the peer public key */
    if(1 != EVP_PKEY_derive_set_peer(ctx, peerkey)) 
        printf(""Error in EC key generation\n"");

    /* Determine buffer length for shared secret */
    if(1 != EVP_PKEY_derive(ctx, NULL, secret_len)) 
        printf(""Error in EC key generation\n"");

    /* Create the buffer */
    if(NULL == (secret = OPENSSL_malloc(*secret_len))) 
        printf(""Error in EC key generation\n"");

    /* Derive the shared secret */
    if(1 != (EVP_PKEY_derive(ctx, secret, secret_len))) 
        printf(""Error in EC key generation\n"");

    EVP_PKEY_CTX_free(ctx);
    EVP_PKEY_free(peerkey);
    EVP_PKEY_free(pkey);
    EVP_PKEY_CTX_free(kctx);
    EVP_PKEY_free(params);
    EVP_PKEY_CTX_free(pctx);

    /* Never use a derived secret directly. Typically it is passed
     * through some hash function to produce a key */
    return secret;
} 
</code></pre>

<p>I figured out that for this function to work, i need a <code>EVP_KEY</code> object with the second party's public key. I have this public key in a byte array, and also its length. How do I convert it to the required type? And also I could not find the secp256r1 curve in OpenSSL, but I used the one in the code after doing some research. Is it correct?</p>

<p>Thanks !</p>
","<p>The peer's public key is a point on the curve. From <code>crypto\ec\ec_lcl.h</code>:</p>

<pre><code>struct ec_key_st {
    int version;

    EC_GROUP *group;

    EC_POINT *pub_key;
    BIGNUM   *priv_key;

    unsigned int enc_flag;
    point_conversion_form_t conv_form;

    int     references;
    int flags;

    EC_EXTRA_DATA *method_data;
} /* EC_KEY */;
</code></pre>

<p>I <em>believe</em> you need to call <code>EC_POINT_new</code> (<code>c_lcl.h</code> is a private header, so you won't have access to the structure).</p>

<p>Luckily, there's a lot of functions to manipulate them. From the <a href=""http://www.openssl.org/docs/crypto/EC_POINT_new.html"" rel=""nofollow""><code>EC_POINT_new(3)</code></a> docs:</p>

<blockquote>
  <p>EC_POINTs can be converted to and from various external
  representations. Supported representations are octet strings, BIGNUMs
  and hexadecimal. The format of the external representation is
  described by the point_conversion_form. See EC_GROUP_copy(3) for a
  description of point_conversion_form. Octet strings are stored in a
  buffer along with an associated buffer length. A point held in a
  BIGNUM is calculated by converting the point to an octet string and
  then converting that octet string into a BIGNUM integer. Points in
  hexadecimal format are stored in a NULL terminated character string
  where each character is one of the printable values 0-9 or A-F (or
  a-f).</p>
</blockquote>

<p>Also see <code>EC_POINT_set_affine_coordinates_GFp</code>, <code>EC_POINT_set_affine_coordinates_GF2m</code> and <code>EC_KEY_set_public_key</code>:</p>

<pre><code>$ grep -R EC_KEY_set_public_key *
crypto/ec/ec.h:int EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub);
...
</code></pre>

<p>You can see an example of how to set the point on the OpenSSL wiki at <a href=""http://wiki.openssl.org/index.php/Elliptic_Curve_Cryptography"" rel=""nofollow"">Elliptic Curve Cryptography</a>.</p>
","2182","<c><openssl><encryption-asymmetric><elliptic-curve><diffie-hellman>","3","1","1","2014-07-24 14:32:48","","3","1","","","","2014-07-23 19:23:28",""
"40243857","How to encrypt large file with RSA?","<p>Code <a href=""https://play.golang.org/p/CUEqjsJq5c"" rel=""nofollow"">https://play.golang.org/p/CUEqjsJq5c</a> </p>

<p>Error:</p>

<pre><code>panic: crypto/rsa: message too long for RSA public key size

goroutine 1 [running]:
panic(0x4a6d80, 0xc420010420)
    /usr/local/go/src/runtime/panic.go:500 +0x1a1
main.main()
    /tmp/sample.go:28 +0xfa
</code></pre>

<p>File size 811 byte (for test encrypt self source file). I want encrypt some bigger files, 1..500 mb. Can I do it with RSA or need use some other methods?</p>
","<p>RSA can only encrypt data smaller than the key length.</p>

<p>The answer is to encrypt the data with a symmetric algorithm such as AES which is designed to encrypt small and large data.</p>

<p>If an RSA public/private key pair are required encrypt the symmetric (AES) key with RSA. This is referred to as hybrid encryption and in essence is hoe HTTPS encrypts data.</p>

<p>But it is may not necessary to RSA encrypt the symmetric key unless a public/private key pair are required. In the general case one just uses symmetric (AES) and that key. What is the use case for a public/private key pair?</p>
","2174","<encryption><go><rsa><public-key-encryption><encryption-asymmetric>","2","4","1","2016-10-25 15:51:43","40244430","3","1","","","","2016-10-25 15:24:42",""
"28484495","OpenSSL public key decrypts file?","<p>My understanding is that the public key can be used for encryption and the private for decryption and that the public key cannot decrypt the file encrypted by the same public key.  Did I misunderstand or am I doing something incorrectly?</p>

<p>1) generate a key</p>

<p>openssl genrsa -out ./private.pem 2048</p>

<p>2) generate a public key</p>

<p>openssl rsa -in ./private.pem -pubout > ./public.pem</p>

<p>3) encrypt a small text file</p>

<p>openssl enc -in ./in.txt  -out ./out.enc  -e -aes256 -k ./public.pem</p>

<p>4) decrypt file using PUBLIC key</p>

<p>openssl enc -in ./out.enc  -out ./out.txt  -d -aes256 -k ./public.pem</p>

<p>The last step can decrypt the ""out.enc"" file.  Not what I wanted or expected.</p>
","<p>No. That's wrong. The two keys (public and private) can be used for BOTH encrypting and decrypting. The kicker is that you cannot reverse the operation with the same key.</p>

<p>e.g.</p>

<pre><code>encrypt(doc, publickey) -&gt; decrypt(crypteddoc, publickey)  // fails
encrypt(doc, privatekey) -&gt; decrypt(crypteddoc, privatekey) // fails

encrypt(doc, publickey) -&gt; decrypt(crypteddoc,privatekey) // works
encrypt(doc, privatekey) -&gt; decrypt(crypteddoc, publickey) // works
</code></pre>

<p>Technically, it doesn't matter which key you share and make public, as long as once you have made one of the keys public, you cannot ever share the other, private, key.</p>
","2135","<openssl><public-key-encryption><encryption-asymmetric>","0","0","2","2015-02-19 19:09:31","","2","","3661593","","2015-02-13 02:53:09","2015-02-12 17:57:58",""
"28484495","OpenSSL public key decrypts file?","<p>My understanding is that the public key can be used for encryption and the private for decryption and that the public key cannot decrypt the file encrypted by the same public key.  Did I misunderstand or am I doing something incorrectly?</p>

<p>1) generate a key</p>

<p>openssl genrsa -out ./private.pem 2048</p>

<p>2) generate a public key</p>

<p>openssl rsa -in ./private.pem -pubout > ./public.pem</p>

<p>3) encrypt a small text file</p>

<p>openssl enc -in ./in.txt  -out ./out.enc  -e -aes256 -k ./public.pem</p>

<p>4) decrypt file using PUBLIC key</p>

<p>openssl enc -in ./out.enc  -out ./out.txt  -d -aes256 -k ./public.pem</p>

<p>The last step can decrypt the ""out.enc"" file.  Not what I wanted or expected.</p>
","<p>Although, the question is really old, yet I must state that TS got it right: <em>the public key cannot decrypt the file encrypted by the same public key</em>. Only the corresponding private key can.</p>

<p>The real problem is that AES is not the public-key algorithm. It uses the same key for both encryption and decryption, and the key can be an arbitrary byte sequence.</p>
","2135","<openssl><public-key-encryption><encryption-asymmetric>","0","1","2","2015-02-19 19:09:31","","2","","3661593","","2015-02-13 02:53:09","2015-02-12 17:57:58",""
"926939","X509Certificate encryption/decryption","<p>I'm just starting to learn XML security. We have VS-2005 &amp; ASP.Net 2.0. I want to send XML to a outside URL and it needs to be encrypted. I'm doing exactly what the MSDN articles <a href=""http://msdn.microsoft.com/en-us/library/ms229744.aspx"" rel=""nofollow noreferrer"">ms229744</a> &amp; <a href=""http://msdn.microsoft.com/en-us/library/ms229943.aspx"" rel=""nofollow noreferrer"">ms229943</a> are doing, but when doing the DecryptDocument() method, I keep getting the ""Unable to retrieve the decryption key."" I'm using our SSL web certificate, and I currently use X509Certificate to digitally sign the XML and it works fine.    </p>

<p>I also asked somebody else to try this from a different shop and they are getting the same error. Is there a documented problem with the X509 decryption methods? In test code below, I'm posting the XML to another web page that is attempting to decrypt the XML. What I don't understand is how the DecryptDocument() method can work if it doesn't even check to see if the Public key is embedded. Is this the problem? If so, how do I check to make sure it is embedded in the XML? Any help is appreciated. Thanks! </p>

<pre><code>Private Function EncryptXml(ByVal xmlDoc As XmlDocument, ByVal Cert As X509Certificates.X509Certificate2) As XmlDocument

   Dim dataNodes As XmlNodeList = xmlDoc.SelectNodes(""Agency"")
   If dataNodes.Count &lt;&gt; 1 Then
       Return Nothing 
   End If  
   Dim elementToEncrypt As XmlElement = CType(xmlDoc.GetElementsByTagName(""Agency"")(0), XmlElement)
   Dim eXml As New EncryptedXml()
   Dim Key As RSACryptoServiceProvider = CType(Cert.PrivateKey, RSACryptoServiceProvider)
   Dim edElement As EncryptedData = eXml.Encrypt(elementToEncrypt, Cert)
   EncryptedXml.ReplaceElement(elementToEncrypt, edElement, False)
   Return xmlDoc 
End Function



Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load 
If Not IsPostBack Then
   If Request.Form(""hdnSignedXML"") IsNot Nothing Then
   Dim strXML As String = Request.Form(""hdnSignedXML"")
   Dim xmlDoc As New XmlDocument
   xmlDoc.LoadXml(strXML)
   xmlDoc.PreserveWhitespace = True
   Response.ContentType = ""text/plain""
   Response.Write(strXML)

   Dim exml As New Xml.EncryptedXml(xmlDoc)
   exml.DecryptDocument()
   xmlDoc.Save(""C:/inetpub/TestExampleDecrypted.xml"")


   Response.End()

End If

End Sub
</code></pre>

<p>jP</p>
","<p>Chances are, your web process can't access the private key.  I ran into the same thing once, and posted an answer in this item:</p>

<p><a href=""https://stackoverflow.com/questions/7255747/set-read-permission-for-certificate-from-command-line/7264187#7264187"">Set read permission for certificate from command line</a></p>

<p>In case you still have issues, for our encryption routines, we referenced <a href=""http://msdn.microsoft.com/en-us/magazine/cc163454.aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/magazine/cc163454.aspx</a></p>
","2058","<xml><encryption-asymmetric>","7","0","1","2011-09-01 19:20:01","","0","1","34148","","2011-06-04 15:43:55","2009-05-29 16:34:54",""
"32037007","How to I securely store social security numbers in a database?","<p>I'm working on a web application which the users will need to submit their social security numbers.</p>

<p>I would like to use asymmetric keys for encryption so if the web server is compromised the private key will still be safe. The application won't be processed on the webserver.</p>

<p>However the app needs the ability to know if the SSN is a duplicate to A not allow duplicates and B to allow users to come back to their application.</p>

<p>Can this be done?</p>

<p>Does it make sense to use a one way hash similar to the way passwords are stored or will that compromise the data?</p>

<p>Since there are only aprox. 10 Billion SSNs. Does that make any hashing alg. susceptible to brute force attacks. Will a salt help here? If the salt is known isn't it still susceptible to brute force? Is it possible to properly hide a salt since if someone has access to the database they also have access to the salt?</p>
","<h2>Don't encrypt your SSNs, hash them</h2>

<p>It sounds like you should be <em>hashing</em> the SSNs rather than <em>encrypting</em> them. The difference between the two is that hashing is one-way while encryption is not. But as you don't need to verify the value of the data, just the integrity, I would definitely use hashing because</p>

<ol>
<li>Hashing is more secure than encryption as hashed SSNs can not be unhashed</li>
<li>Hashing still allows you to verify the integrity of the data and check for duplicate SSNs in your database.</li>
</ol>

<h2>How to hash</h2>

<p>If you're using PHP 5 >= 5.5.0, I would <strong>strongly</strong> recommend using PHP's <a href=""http://php.net/manual/en/ref.password.php"" rel=""nofollow"">built in password hashing functions</a>. It's battle tested and created for this very situation. It even auto generates its own secure salt (but still has the option of you providing your own).</p>

<p>Make sure you carefully read the <a href=""http://php.net/manual/en/ref.password.php"" rel=""nofollow"">documentation</a> on password hashing functions, but a short example (taken from the docs' example) is below:</p>

<pre><code>&lt;?php
// To create the password hash:
$ssn = password_hash($ssn, PASSWORD_DEFAULT);
// To verify the integrity of what the user is entering
// In this example, $hash is the hashed password generated from password_hash
if (password_verify('rasmuslerdorf', $hash)) {
    echo 'SSN is valid!';
} else {
    echo 'Invalid SSN.';
}
?&gt;
</code></pre>

<p>Remember to check the <a href=""http://php.net/manual/en/ref.password.php"" rel=""nofollow"">docs</a> on the password hashing functions so you correctly use them:</p>

<ul>
<li><a href=""http://php.net/manual/en/function.password-get-info.php"" rel=""nofollow""><code>password_get_info</code></a></li>
<li><a href=""http://php.net/manual/en/function.password-hash.php"" rel=""nofollow""><code>password_hash</code></a></li>
<li><a href=""http://php.net/manual/en/function.password-needs-rehash.php"" rel=""nofollow""><code>password_needs_rehash</code></a></li>
<li><a href=""http://php.net/manual/en/function.password-verify.php"" rel=""nofollow""><code>password_verify</code></a></li>
</ul>
","2051","<mysql><public-key-encryption><encryption-asymmetric>","0","1","2","2019-03-14 09:20:45","","2","1","1898563","","2019-03-14 09:20:45","2015-08-16 15:47:19",""
"32037007","How to I securely store social security numbers in a database?","<p>I'm working on a web application which the users will need to submit their social security numbers.</p>

<p>I would like to use asymmetric keys for encryption so if the web server is compromised the private key will still be safe. The application won't be processed on the webserver.</p>

<p>However the app needs the ability to know if the SSN is a duplicate to A not allow duplicates and B to allow users to come back to their application.</p>

<p>Can this be done?</p>

<p>Does it make sense to use a one way hash similar to the way passwords are stored or will that compromise the data?</p>

<p>Since there are only aprox. 10 Billion SSNs. Does that make any hashing alg. susceptible to brute force attacks. Will a salt help here? If the salt is known isn't it still susceptible to brute force? Is it possible to properly hide a salt since if someone has access to the database they also have access to the salt?</p>
","<p>A little late to the game, but I took a two-pronged approach.</p>

<p>We split the SSN into two parts:</p>

<ol>
<li>XXX-XX</li>
<li>3847</li>
</ol>

<p>The first part of the SSN is encrypted using some encryption algorithm (blowfish?) or whatever flavor you choose. </p>

<p>The database:</p>

<pre><code>--------------------------------------------------------
| ID    |   SSN-A    |   SSN-B    | ......   |         |
--------------------------------------------------------
|   1   | N1maA+HCRj |    3847    |    ...   |         |
|   2   | HCRjHQiEx/ |    7254    |    ...   |         |
--------------------------------------------------------
</code></pre>

<p>When records are exported or dumped into a CSV for consumption by another entity, you can decrypt the first part of the SSN one by one and then reassemble the complete SSN.</p>

<p>As long as the key is stored securely, then there is a reasonable sense of security here. The added benefit of this is - while you cannot do a whole SSN search, you can at least limit them by using the last 4 digits. There is a whole set of regulations around storing SSN's, so whatever way you choose - be careful.</p>

<p><strong>Edit</strong></p>

<p>It would also probably be wise to name the columns something non deterministic of an SSN field.</p>
","2051","<mysql><public-key-encryption><encryption-asymmetric>","0","2","2","2019-03-14 09:20:45","","2","1","1898563","","2019-03-14 09:20:45","2015-08-16 15:47:19",""
"29680617","""Bad Version of provider."" while loading the Public key with RSACryptoServiceProvider","<p>I am creating RSA key pair using <code>AsymmetricKeyAlgorithmProvider</code> (<code>Windows.Security.Cryptography.Core</code>) and exporting the keys as shown below:</p>

<pre><code>  AsymmetricKeyAlgorithmProvider rsaGenKeys = AsymmetricKeyAlgorithmProvider.OpenAlgorithm(AsymmetricAlgorithmNames.RsaPkcs1);

  CryptographicKey keyPair = rsaGenKeys.CreateKeyPair(2048);
  byte[] privateKeyBlob = keyPair.Export(CryptographicPrivateKeyBlobType.Pkcs1RsaPrivateKey).ToArray();

  string privateKeyBlobStr = Convert.ToBase64String(privateKeyBlob);

  byte[] publicKeyBlob = keyPair.ExportPublicKey().ToArray();

  string pubilcKeyBlobStr = Convert.ToBase64String(publicKeyBlob);
</code></pre>

<p>Now, the receiver of this data happens to be a Silverlight app and is using <code>RSACryptoServiceProvider</code> (<code>System.Security.Cryptography</code>) to load this public key:</p>

<pre><code>RSACryptoServiceProvider rsaPublic = new RSACryptoServiceProvider();
byte[] keyBlobBytes = Convert.FromBase64String(keyBlob);
rsaPublic.ImportCspBlob(keyBlobBytes);
</code></pre>

<p>Where keyBlob is the byte array having the public key.
The issue is when ImportCspBlob is called it throws exception saying ""Bad Version of provider.""</p>
","","2043","<c#><rsa><encryption-asymmetric><rsacryptoserviceprovider>","7","","0","2015-09-04 19:59:44","","1","","1816580","","2015-04-16 16:24:09","2015-04-16 16:22:01",""
"6983150","How to distribute public key in asymmetric encryption algorithms?","<p>There are two keys in asymmetric encryption algorithm</p>

<ul>
<li>public key and </li>
<li>private key</li>
</ul>

<p>For the concept of client and server, it need to public key on server side to decrypt client's message.</p>

<p>So my question is <em>how can we share public key between client and server?</em>  </p>

<p>I am using JAVA, so if your example contains java code this will ok for me, or if any pictorial info, this will very ok. </p>

<p>Thank you!</p>
","<p>If the client hasn't met the server before, so he doesn't <em>know</em> what public key to expect, one must use a third party intermediary to validate the identities involved. In P2P scenarios, you have what are called ""<a href=""http://en.wikipedia.org/wiki/Key_signing_party"" rel=""nofollow noreferrer"">key signing parties</a>"", where people exchange public keys through meeting face-to-face.</p>

<p>If the people already know eachother, then, even through an insecure channel, you can use algorithms like <a href=""http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"" rel=""nofollow noreferrer"">Diffie-Hellman</a> to exchange your identities, which you can validate against the information you already had about the identity of that person.</p>

<p>In a common HTTPS scenario, the client may not already know the server, but the server presents a certificate, validated by a mutually-trusted third party, that acknowledges his identity. For instance, Paypal might present you with a certificate that says ""VeriSign agrees I am who I say I am."", and if you trust VeriSign, this ""web of trust"" as it's called means you'll trust Paypal are who they says they are.</p>

<p>In your client-server scenario, the server needs both its private and public key - the public key is used for encrypting the messages going back to the client, and the private key is used to decrypt the messages the client is sending to him. </p>

<p>The server doesn't usually know who the user is (cryptographically speaking), the client may make a new certificate and public/private keypair for each request it sends. A way to change this is detailed in <a href=""http://www.ibm.com/developerworks/lotus/library/ls-SSL_client_authentication/"" rel=""nofollow noreferrer"">this IBM article</a>. What ends up happening in usual HTTPS scenarios is a mixture of private and public key encryptions; you can read more about that in <a href=""https://stackoverflow.com/questions/3936071/how-does-browser-generate-symmetric-key-during-ssl-handshake"">this related SO post</a>.</p>

<p>Good luck!</p>
","2007","<java><encryption><encryption-asymmetric>","1","2","1","2011-08-08 14:10:25","6983397","1","","","","","2011-08-08 13:51:59",""
"13713991","BadPaddingException: invalid ciphertext","<p>I would like some help as this is my first time in coding cryptography code.</p>

<p>The encryption code appears to be working correctly, but the decryption throws an error.</p>

<p>The error I get is:</p>

<p><strong>de.flexiprovider.api.exceptions.BadPaddingException: invalid ciphertext</strong></p>

<p>in the <strong>decrypt function</strong> towards the end of the code, which is marked as a comment </p>

<p>// ERROR THROWN HERE! ..............................</p>

<p>I have included all the imports, please excuse this, as thought it maybe relevant to the issue.</p>

<p>Any help as to what I am doing wrong will be greatly appreciated, thanks very much.</p>

<p><strong>Code:</strong></p>

<pre><code>import java.io.UnsupportedEncodingException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Security;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;

import android.app.Activity;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import de.flexiprovider.common.ies.IESParameterSpec;
import de.flexiprovider.core.FlexiCoreProvider;
import de.flexiprovider.ec.FlexiECProvider;
import de.flexiprovider.ec.parameters.CurveParams;
import de.flexiprovider.ec.parameters.CurveRegistry.BrainpoolP384r1;
import de.flexiprovider.pki.PKCS8EncodedKeySpec;
import de.flexiprovider.pki.X509EncodedKeySpec;

public class MainActivity extends Activity {

private static PublicKey PublicKey;
private static PrivateKey PrivateKey;
private static String PubKey;
private static String PrvKey;
private static String message = ""Hello World"";
private static String encryptedMessage;
private static String decryptedMessage;

private final static String TAG = ""ERROR: "";

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    try {
        Security.addProvider(new FlexiCoreProvider());
        Security.addProvider(new FlexiECProvider());

        // instantiate the elliptic curve key pair generator
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""ECIES"", ""FlexiEC"");

        // choose the curve
        CurveParams ecParams = new BrainpoolP384r1();

        // Initialize the key pair generator
        kpg.initialize(ecParams, new SecureRandom());
        KeyPair keyPair = kpg.generateKeyPair();

        // generate the public key
        PublicKey = keyPair.getPublic();

        // generate private key
        PrivateKey = keyPair.getPrivate();
    }
    catch (Exception e) {
        Log.e(TAG, e.toString());
    }

    // I'm converting keys to strings here as the public keys will be stored on a server
    // database and the private keys will be stored in the application preferences file
    // this private key storage is maybe not optimum, but at this point I just want to
    // simulate a messaging encryption/decryption process for testing purposes

    // convert public key to a string
    PubKey = Base64.encodeToString(PublicKey.getEncoded(), Base64.DEFAULT);
    Log.d(""PubKey: "", PubKey);

    // convert private key to a string
    PrvKey = Base64.encodeToString(PrivateKey.getEncoded(), Base64.DEFAULT);
    Log.d(""PrvKey: "", PrvKey);

    // encrypt the message with the public key
    encryptedMessage = encryptMessage(PubKey, message);

    // report if the public key has not been regenerated correctly
    if (encryptedMessage == null) {
        Log.d(""PUBLIC_KEY_REGENERATE_ERROR: "", encryptedMessage);
    }

    // decrypt the message with the private key
    decryptedMessage = decryptMessage(PrvKey, encryptedMessage);

    // report if the private key has not been regenerated correctly
    if (encryptedMessage == null) {
        Log.d(""PRIVATE_KEY_REGENERATE_ERROR: "", decryptedMessage);
    }
}

// encrypt function
public static String encryptMessage(String publicKey, String message) {

    KeyFactory keyFactory = null;
    PublicKey pubkey = null;
    Cipher cipher = null;

    byte[] PLAINTEXT_MESSAGE = message.getBytes();
    Log.d(""PLAINTEXT_MESSAGE: "", message);

    Security.addProvider(new FlexiCoreProvider());
    Security.addProvider(new FlexiECProvider());

    // Base64 decode the publicKey string into a byte array
    byte[] decodedPublicKey = Base64.decode(publicKey, Base64.DEFAULT);

    try {
        // instantiate a X509EncodedKeySpec
        X509EncodedKeySpec X509spec = new X509EncodedKeySpec(decodedPublicKey);

        keyFactory = KeyFactory.getInstance(""ECIES"", ""FlexiEC"");

        // re-generate the public key
        pubkey = keyFactory.generatePublic(X509spec);

        // sanity check, return null on inequality
        if (!pubkey.equals(PublicKey)) {
            return null;
        }

        cipher = Cipher.getInstance(""ECIES"", ""FlexiEC"");
        IESParameterSpec IESspec = new IESParameterSpec(""AES256_CBC"", ""HmacSHA512"", null, null);
        cipher.init(Cipher.ENCRYPT_MODE, pubkey, IESspec);
    }
    catch (Exception e) {
        Log.e(TAG, e.toString());
    }

    // encrypt the message
    byte[] encryptedData = null;

    try {
        encryptedData = cipher.doFinal(PLAINTEXT_MESSAGE);
    }
    catch (IllegalBlockSizeException e) {
        Log.e(TAG, e.toString());
    }
    catch (BadPaddingException e) {
        Log.e(TAG, e.toString());
    }

    String encryptedMessage = null;

    try {
        encryptedMessage = new String(encryptedData, ""UTF-8"");
    }
    catch (UnsupportedEncodingException e) {
        Log.e(TAG, e.toString());
    }
    Log.d(""encryptedMessage: "", encryptedMessage);
    return encryptedMessage;
}

// decrypt function
public static String decryptMessage(String privateKey, String message) {

    KeyFactory keyFactory = null;
    PrivateKey prvkey = null;
    Cipher cipher = null;

    byte[] ENCRYPTED_MESSAGE = message.getBytes();
    Log.d(""ENCRYPTED_MESSAGE: "", message);

    Security.addProvider(new FlexiCoreProvider());
    Security.addProvider(new FlexiECProvider());

    try {
        // Base64 decode the privateKey string into a byte array
        byte[] decodedPrivateKey = Base64.decode(privateKey, Base64.DEFAULT);

        // instantiate a PKCS8EncodedKeySpec
        PKCS8EncodedKeySpec PKCS8spec = new PKCS8EncodedKeySpec(decodedPrivateKey);

        keyFactory = KeyFactory.getInstance(""ECIES"", ""FlexiEC"");

        // re-generate the private key
        prvkey = keyFactory.generatePrivate(PKCS8spec);

        // sanity check, return null on inequality
        if (!prvkey.equals(PrivateKey)) {
            return null;
        }

        cipher = Cipher.getInstance(""ECIES"", ""FlexiEC"");
        IESParameterSpec IESspec = new IESParameterSpec(""AES256_CBC"", ""HmacSHA512"", null, null);
        cipher.init(Cipher.DECRYPT_MODE, prvkey, IESspec);
    }
    catch (Exception e) {
        Log.e(TAG, e.toString());
    }

    // decrypt the message
    byte[] decryptedData = null;

    try {
        decryptedData = cipher.doFinal(ENCRYPTED_MESSAGE);

        // ERROR THROWN HERE! ..............................
        // de.flexiprovider.api.exceptions.BadPaddingException: invalid ciphertext
    }
    catch (IllegalBlockSizeException e) {
        Log.e(TAG, e.toString());
    }
    catch (BadPaddingException e) {
        Log.e(TAG, e.toString());
    }

    String decryptedMessage = null;

    try {
        decryptedMessage = new String(decryptedData, ""UTF-8"");
    }
    catch (UnsupportedEncodingException e) {
        Log.e(TAG, e.toString());
    }
    Log.d(""decryptedMessage: "", decryptedMessage);
    return decryptedMessage;
}
</code></pre>

<p>}</p>
","<p>You cannot just use the cipher text as input for the <code>String</code> constructor, as you are doing in this line:</p>

<pre><code>encryptedMessage = new String(encryptedData, ""UTF-8"");
</code></pre>

<p>You will have to use an encoding such as Base 64 as you did with the keys, <em>if</em> you want to communicate the cipher text using strings instead of bytes.</p>

<p>Encryption will result in data that looks like random bytes. Not all bytes have a character equivalent. The result of the conversion depends on the character encoding. UTF-8 may use many bytes, and many combinations won't result in correct characters. Java silently converts these, check the <code>Charset</code> and related classes for more information.</p>
","1995","<java><android><encryption><encryption-asymmetric><encryption-symmetric>","0","2","1","2012-12-05 01:27:17","13714088","2","4","1126991","","2012-12-05 01:27:17","2012-12-04 23:44:43",""
"2186836","Faster asymmetric cipher than RSA","<p>I've been working on a system that uses asymmetric encryption in a large number of files.  I'm currently using RSA with 4096-bit keys to encrypt a 256-bit randomly generated AES key for each file, but performance is somewhat lacking, as one required operation is to scan through all the files (estimated number when the system is in use is around 10,000) and identify which ones can be decrypted using a specific private key.  While I don't expect this operation to be instant, it is taking too long at the moment (~2 files processed per second).  I considered reducing the key length, but even taking it down to 2048 bits doesn't provide the level of performance I need.  512 bits would just about cut it, but as such keys can now be cracked trivially that is out of the question.</p>

<p>Can anybody point me in the direction of a system that is faster but of similar cryptographic strength?  It would need to be implemented via a Java JCA provider (e.g. something like bouncycastle) in order to plug in to my existing application neatly.  I know bouncy castle supports El Gamal, but I can't find any details on how strong this algorithm is, or if it is even likely to be any faster than RSA.  I also hear about elliptic curve systems that only need relatively short keys (384 bits or the like), but don't know where to find an implementation of one of these.</p>
","<p>Why don't you calculate a cryptographically strong hash of each key, and then store that in the clear with each filename?  Then, given a key that you need to match against all the files, you can simply hash the key and look it up in the table.</p>
","1992","<java><encryption-asymmetric>","1","2","3","2010-02-02 20:34:58","2186984","0","3","","","","2010-02-02 19:07:21",""
"2186836","Faster asymmetric cipher than RSA","<p>I've been working on a system that uses asymmetric encryption in a large number of files.  I'm currently using RSA with 4096-bit keys to encrypt a 256-bit randomly generated AES key for each file, but performance is somewhat lacking, as one required operation is to scan through all the files (estimated number when the system is in use is around 10,000) and identify which ones can be decrypted using a specific private key.  While I don't expect this operation to be instant, it is taking too long at the moment (~2 files processed per second).  I considered reducing the key length, but even taking it down to 2048 bits doesn't provide the level of performance I need.  512 bits would just about cut it, but as such keys can now be cracked trivially that is out of the question.</p>

<p>Can anybody point me in the direction of a system that is faster but of similar cryptographic strength?  It would need to be implemented via a Java JCA provider (e.g. something like bouncycastle) in order to plug in to my existing application neatly.  I know bouncy castle supports El Gamal, but I can't find any details on how strong this algorithm is, or if it is even likely to be any faster than RSA.  I also hear about elliptic curve systems that only need relatively short keys (384 bits or the like), but don't know where to find an implementation of one of these.</p>
","<p>I'd go for an approach that requires less RSA operations. SSL/TLS, although they use RSA etc for encrypting AES etc keys, do not use AES for the data simply because it is a computationally expensive operation at sufficiently large key sizes for security to be done on a per-packet, or in your case, per-file basis.</p>

<p>Another public key system is: <a href=""http://en.wikipedia.org/wiki/ElGamal_encryption"" rel=""nofollow noreferrer"">http://en.wikipedia.org/wiki/ElGamal_encryption</a>. Security-wise I believe it has yet to be broken but would personally put my trust in RSA for now. I do not know if there are any elliptic curve encryption algorithms currently available - that is to say I know they are being researched but understand they may not be ready for production use and I heard there were patent issues.</p>
","1992","<java><encryption-asymmetric>","1","0","3","2010-02-02 20:34:58","2186984","0","3","","","","2010-02-02 19:07:21",""
"2186836","Faster asymmetric cipher than RSA","<p>I've been working on a system that uses asymmetric encryption in a large number of files.  I'm currently using RSA with 4096-bit keys to encrypt a 256-bit randomly generated AES key for each file, but performance is somewhat lacking, as one required operation is to scan through all the files (estimated number when the system is in use is around 10,000) and identify which ones can be decrypted using a specific private key.  While I don't expect this operation to be instant, it is taking too long at the moment (~2 files processed per second).  I considered reducing the key length, but even taking it down to 2048 bits doesn't provide the level of performance I need.  512 bits would just about cut it, but as such keys can now be cracked trivially that is out of the question.</p>

<p>Can anybody point me in the direction of a system that is faster but of similar cryptographic strength?  It would need to be implemented via a Java JCA provider (e.g. something like bouncycastle) in order to plug in to my existing application neatly.  I know bouncy castle supports El Gamal, but I can't find any details on how strong this algorithm is, or if it is even likely to be any faster than RSA.  I also hear about elliptic curve systems that only need relatively short keys (384 bits or the like), but don't know where to find an implementation of one of these.</p>
","<p>For your question as asked, try Diffie-Hellman over elliptic curves, also known as ""ECDH"". Estimating security is a bit difficult once we deal with sizes that cannot be cracked with current technology, since this depends on how we bet on future technological evolutions. Yet one can say that ECDH over the P-256 curve provides ""128 bits"" of security, a level which is similar to what you would get from 2048-bit RSA. That level is widely sufficient for all current usages, or, more appropriately said, if P-256 is not enough for you then your problem has very special needs and cryptographic strength is likely to be the least of your worries.</p>

<p>On my PC (a 2.4 Ghz Intel Core2, 64-bit mode, running Linux), OpenSSL claims to crunch out about 900 ECDH instances per second, using a single core.</p>

<p><strong>Edit:</strong> for estimation of key security, depending on the length, for several algorithms, see <a href=""http://www.keylength.com/"" rel=""nofollow noreferrer"">this site</a>.</p>
","1992","<java><encryption-asymmetric>","1","2","3","2010-02-02 20:34:58","2186984","0","3","","","","2010-02-02 19:07:21",""
"40046177","OpenSSL x509 utility PEM to DER conversion fails with ""PEM_read_bio:no start line""","<p>Trying to convert .pem file to .der file using below command.</p>

<pre class=""lang-none prettyprint-override""><code>openssl x509 -in public_key.pem -out cert.der -outform DER
</code></pre>

<p>getting below error</p>

<pre class=""lang-none prettyprint-override""><code>unable to load certificate
31833:error:0906D06C:PEM routines:PEM_read_bio:no start line:/SourceCache/OpenSS
L098/OpenSSL098-52.30.1/src/crypto/pem/pem_lib.c:648:Expecting: TRUSTED CERTIFIC
ATE
</code></pre>

<p>I have generated RSA private/public keys using below.</p>

<pre class=""lang-sh prettyprint-override""><code>openssl genrsa -out private_key.pem 2048
openssl rsa -pubout -in private_key.pem -out public_key.pem
</code></pre>
","<p>You are creating a RSA key pair. And you are trying to convert the public key into DER format. </p>

<p><code>openssl x509</code> command requires public key inside the X.509 container.</p>

<p>Try this command to create the Private Key and Public Cert.</p>

<ol>
<li><p>Create a self signed CA Cert:</p>

<p><code>openssl genrsa  -out CAkey.pem 2048</code></p>

<p><code>openssl req -new -x509 -key CAkey.pem -out cacert.pem -days 1095</code></p></li>
<li><p>Now create another cert which is signed by the CA created above</p>

<p><code>openssl genrsa  -out serverkey.pem 2048</code> </p>

<p><code>openssl req -new -key serverkey.pem -out server.csr</code></p>

<p><code>openssl x509 -req -days 1000 -in server.csr -CA cacert.pem -CAkey CAkey.pem -out server.pem -set_serial 01</code></p></li>
</ol>

<p>Later convert the public cert in PEM to DER format.</p>

<pre><code>openssl x509 -in server.pem -out server.der -outform DER
</code></pre>
","1986","<ssl><encryption><openssl><rsa><encryption-asymmetric>","-1","0","1","2016-10-15 02:28:30","","3","","608639","","2016-10-14 21:06:56","2016-10-14 14:54:40","2016-10-14 20:32:40"
"14771483","Decrypt a larger text using RSA private key","<p>I have to encrypt and decrypt a large string using RSA public key and private key. I have managed to encrypt a larger text using the following sample code </p>

<pre><code>public static string Encrypt(string publicKey, string data, RsaKeyLengths length)
        {
            // full array of bytes to encrypt
            byte[] bytesToEncrypt;

            // worker byte array
            byte[] block;

            // encrypted bytes
            byte[] encryptedBytes;

            // length of bytesToEncrypt
            var dataLength = 0;

            // number of bytes in key                
            var keySize = 0;

            // maximum block length to encrypt          
            var maxLength = 0;

            // how many blocks must we encrypt to encrypt entire message?
            var iterations = 0;

            // the encrypted data
            var encryptedData = new StringBuilder();

            // instantiate the crypto provider with the correct key length
            var rsaCryptoServiceProvider = new RSACryptoServiceProvider((int)length);

            // initialize the RSA object from the given public key
            rsaCryptoServiceProvider.FromXmlString(publicKey);

            // convert data to byte array
            bytesToEncrypt = Encoding.Unicode.GetBytes(data);

            // get length of byte array
            dataLength = bytesToEncrypt.Length;

            // convert length of key from bits to bytes
            keySize = (int)length / 8;

            // .NET RSACryptoServiceProvider uses SHA1 Hash function
            // use this to work out the maximum length to encrypt per block
            maxLength = ((keySize - 2) - (2 * SHA1.Create().ComputeHash(bytesToEncrypt).Length));

            // how many blocks do we need to encrypt?
            iterations = dataLength / maxLength;

            // encrypt block by block
            for (int index = 0; index &lt;= iterations; index++)
            {
                // is there more than one full block of data left to encrypt?
                if ((dataLength - maxLength * index) &gt; maxLength)
                {
                    block = new byte[maxLength];
                }
                else
                {
                    block = new byte[dataLength - maxLength * index];
                }

                // copy the required number of bytes from the array of bytes to encrypt to our worker array
                Buffer.BlockCopy(bytesToEncrypt, maxLength * index, block, 0, block.Length);

                // encrypt the current worker array block of bytes
                encryptedBytes = rsaCryptoServiceProvider.Encrypt(block, true);

                // RSACryptoServiceProvider reverses the order of encrypted bytesToEncrypt after encryption and before decryption.
                // Undo this reversal for compatibility with other implementations
                Array.Reverse(encryptedBytes);

                // convert to base 64 string
                encryptedData.Append(Convert.ToBase64String(encryptedBytes));

            }
            return encryptedData.ToString();

        }
</code></pre>

<p>Then I tried to decrypt the larger text using the following code</p>

<pre><code>/// &lt;summary&gt;
        /// Encrypt an arbitrary string of data under the supplied public key
        /// &lt;/summary&gt;
        /// &lt;param name=""publicKey""&gt;The public key to encrypt under&lt;/param&gt;
        /// &lt;param name=""data""&gt;The data to encrypt&lt;/param&gt;
        /// &lt;param name=""length""&gt;The bit length or strength of the public key: 1024, 2048 or 4096 bits. This must match the 
        /// value actually used to create the publicKey&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string Decrypt(string privateKey, string data, RsaKeyLengths length)
        {
            // full array of bytes to encrypt
            byte[] bytesToDecrypt;

            // worker byte array
            byte[] block;

            // encrypted bytes
            byte[] decryptedBytes;

            // length of bytesToEncrypt
            var dataLength = 0;

            // number of bytes in key                
            var keySize = 0;

            // maximum block length to encrypt          
            var maxLength = 0;

            // how many blocks must we encrypt to encrypt entire message?
            var iterations = 0;

            // the encrypted data
            var decryptedData = new StringBuilder();

            // instantiate the crypto provider with the correct key length
            var rsaCryptoServiceProvider = new RSACryptoServiceProvider((int)length);

            // initialize the RSA object from the given public key
            rsaCryptoServiceProvider.FromXmlString(privateKey);

            // convert data to byte array
            bytesToDecrypt = Encoding.Unicode.GetBytes(data);

            // get length of byte array
            dataLength = bytesToDecrypt.Length;

            // convert length of key from bits to bytes
            keySize = (int)length / 8;

            // .NET RSACryptoServiceProvider uses SHA1 Hash function
            // use this to work out the maximum length to encrypt per block
            //maxLength = ((keySize - 2) - (2 * SHA1.Create().ComputeHash(bytesToDecrypt).Length));
            maxLength = ((keySize / 8) % 3 != 0) ?
              (((keySize / 8) / 3) * 4) + 4 : ((keySize / 8) / 3) * 4; ;

            // how many blocks do we need to encrypt?
            iterations = dataLength / maxLength;

            // encrypt block by block
            for (int index = 0; index &lt;= iterations; index++)
            {
                // is there more than one full block of data left to encrypt?
                if ((dataLength - maxLength * index) &gt; maxLength)
                {
                    block = new byte[maxLength];
                }
                else
                {
                    block = new byte[dataLength - maxLength * index];
                }

                // copy the required number of bytes from the array of bytes to encrypt to our worker array
                Buffer.BlockCopy(bytesToDecrypt, maxLength * index, block, 0, block.Length);

                // encrypt the current worker array block of bytes
                decryptedBytes = rsaCryptoServiceProvider.Decrypt(block, true);

                // RSACryptoServiceProvider reverses the order of encrypted bytesToEncrypt after encryption and before decryption.
                // Undo this reversal for compatibility with other implementations
                Array.Reverse(decryptedBytes);

                // convert to base 64 string
                decryptedData.Append(Convert.ToBase64String(decryptedBytes));

            }
            return decryptedData.ToString();
        }
</code></pre>

<p>Actually the encryption is going on smoothly. No problem with it. But when I am trying to decrypt it. I am getting the following exception</p>

<blockquote>
  <p>Unhandled Exception:
  System.Security.Cryptography.CryptographicException: Error occurred
  while decoding OAEP padding.</p>
</blockquote>

<p>Can anybody help me out?</p>
","<p>Use <a href=""http://en.wikipedia.org/wiki/Stream_cipher"" rel=""nofollow"">stream cipher</a> instead and only encrypt that key for this cipher with RSA. This may help if you need RSA because of its public-private key logic and want to use the different keys for encryption and decryption. With stream cipher you would be able encrypt and decrypt gigabytes of data no problem.</p>

<p>RSA is normally not used for really big amounts of data.</p>
","1983","<c#><rsa><encryption-asymmetric>","0","1","2","2013-03-26 18:42:26","","1","","41071","","2013-02-09 20:01:08","2013-02-08 11:24:53",""
"14771483","Decrypt a larger text using RSA private key","<p>I have to encrypt and decrypt a large string using RSA public key and private key. I have managed to encrypt a larger text using the following sample code </p>

<pre><code>public static string Encrypt(string publicKey, string data, RsaKeyLengths length)
        {
            // full array of bytes to encrypt
            byte[] bytesToEncrypt;

            // worker byte array
            byte[] block;

            // encrypted bytes
            byte[] encryptedBytes;

            // length of bytesToEncrypt
            var dataLength = 0;

            // number of bytes in key                
            var keySize = 0;

            // maximum block length to encrypt          
            var maxLength = 0;

            // how many blocks must we encrypt to encrypt entire message?
            var iterations = 0;

            // the encrypted data
            var encryptedData = new StringBuilder();

            // instantiate the crypto provider with the correct key length
            var rsaCryptoServiceProvider = new RSACryptoServiceProvider((int)length);

            // initialize the RSA object from the given public key
            rsaCryptoServiceProvider.FromXmlString(publicKey);

            // convert data to byte array
            bytesToEncrypt = Encoding.Unicode.GetBytes(data);

            // get length of byte array
            dataLength = bytesToEncrypt.Length;

            // convert length of key from bits to bytes
            keySize = (int)length / 8;

            // .NET RSACryptoServiceProvider uses SHA1 Hash function
            // use this to work out the maximum length to encrypt per block
            maxLength = ((keySize - 2) - (2 * SHA1.Create().ComputeHash(bytesToEncrypt).Length));

            // how many blocks do we need to encrypt?
            iterations = dataLength / maxLength;

            // encrypt block by block
            for (int index = 0; index &lt;= iterations; index++)
            {
                // is there more than one full block of data left to encrypt?
                if ((dataLength - maxLength * index) &gt; maxLength)
                {
                    block = new byte[maxLength];
                }
                else
                {
                    block = new byte[dataLength - maxLength * index];
                }

                // copy the required number of bytes from the array of bytes to encrypt to our worker array
                Buffer.BlockCopy(bytesToEncrypt, maxLength * index, block, 0, block.Length);

                // encrypt the current worker array block of bytes
                encryptedBytes = rsaCryptoServiceProvider.Encrypt(block, true);

                // RSACryptoServiceProvider reverses the order of encrypted bytesToEncrypt after encryption and before decryption.
                // Undo this reversal for compatibility with other implementations
                Array.Reverse(encryptedBytes);

                // convert to base 64 string
                encryptedData.Append(Convert.ToBase64String(encryptedBytes));

            }
            return encryptedData.ToString();

        }
</code></pre>

<p>Then I tried to decrypt the larger text using the following code</p>

<pre><code>/// &lt;summary&gt;
        /// Encrypt an arbitrary string of data under the supplied public key
        /// &lt;/summary&gt;
        /// &lt;param name=""publicKey""&gt;The public key to encrypt under&lt;/param&gt;
        /// &lt;param name=""data""&gt;The data to encrypt&lt;/param&gt;
        /// &lt;param name=""length""&gt;The bit length or strength of the public key: 1024, 2048 or 4096 bits. This must match the 
        /// value actually used to create the publicKey&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string Decrypt(string privateKey, string data, RsaKeyLengths length)
        {
            // full array of bytes to encrypt
            byte[] bytesToDecrypt;

            // worker byte array
            byte[] block;

            // encrypted bytes
            byte[] decryptedBytes;

            // length of bytesToEncrypt
            var dataLength = 0;

            // number of bytes in key                
            var keySize = 0;

            // maximum block length to encrypt          
            var maxLength = 0;

            // how many blocks must we encrypt to encrypt entire message?
            var iterations = 0;

            // the encrypted data
            var decryptedData = new StringBuilder();

            // instantiate the crypto provider with the correct key length
            var rsaCryptoServiceProvider = new RSACryptoServiceProvider((int)length);

            // initialize the RSA object from the given public key
            rsaCryptoServiceProvider.FromXmlString(privateKey);

            // convert data to byte array
            bytesToDecrypt = Encoding.Unicode.GetBytes(data);

            // get length of byte array
            dataLength = bytesToDecrypt.Length;

            // convert length of key from bits to bytes
            keySize = (int)length / 8;

            // .NET RSACryptoServiceProvider uses SHA1 Hash function
            // use this to work out the maximum length to encrypt per block
            //maxLength = ((keySize - 2) - (2 * SHA1.Create().ComputeHash(bytesToDecrypt).Length));
            maxLength = ((keySize / 8) % 3 != 0) ?
              (((keySize / 8) / 3) * 4) + 4 : ((keySize / 8) / 3) * 4; ;

            // how many blocks do we need to encrypt?
            iterations = dataLength / maxLength;

            // encrypt block by block
            for (int index = 0; index &lt;= iterations; index++)
            {
                // is there more than one full block of data left to encrypt?
                if ((dataLength - maxLength * index) &gt; maxLength)
                {
                    block = new byte[maxLength];
                }
                else
                {
                    block = new byte[dataLength - maxLength * index];
                }

                // copy the required number of bytes from the array of bytes to encrypt to our worker array
                Buffer.BlockCopy(bytesToDecrypt, maxLength * index, block, 0, block.Length);

                // encrypt the current worker array block of bytes
                decryptedBytes = rsaCryptoServiceProvider.Decrypt(block, true);

                // RSACryptoServiceProvider reverses the order of encrypted bytesToEncrypt after encryption and before decryption.
                // Undo this reversal for compatibility with other implementations
                Array.Reverse(decryptedBytes);

                // convert to base 64 string
                decryptedData.Append(Convert.ToBase64String(decryptedBytes));

            }
            return decryptedData.ToString();
        }
</code></pre>

<p>Actually the encryption is going on smoothly. No problem with it. But when I am trying to decrypt it. I am getting the following exception</p>

<blockquote>
  <p>Unhandled Exception:
  System.Security.Cryptography.CryptographicException: Error occurred
  while decoding OAEP padding.</p>
</blockquote>

<p>Can anybody help me out?</p>
","<p>Maybe a bit late, but I found <a href=""http://tekaris.com/blog/2013/02/08/encrypting-large-data-with-asymetric-rsacryptoserviceprovider/"" rel=""nofollow"">http://tekaris.com/blog/2013/02/08/encrypting-large-data-with-asymetric-rsacryptoserviceprovider/</a> helpful. The trick here obviously is to split the data, encrypt and re-join the data. </p>
","1983","<c#><rsa><encryption-asymmetric>","0","0","2","2013-03-26 18:42:26","","1","","41071","","2013-02-09 20:01:08","2013-02-08 11:24:53",""
"1200319","Are there valid reasons for using a hardware encryption device (e.g. USB encryption dongle/keystore) over using a software library?","<p>If your application needs to encrypt/decrypt data (for various reasons), are there any reasons why you would use a hardware device (e.g. a USB encryption device - like a Marx CryptoBox) instead of using a software encryption library (like .net Cryptography or writing your own) and keep your keys in a safe key store?</p>

<p>I am looking for some objective views on this matter.</p>

<hr>

<p><strong>To narrow down the question posed:</strong>  what would your opinion be if the system that used the usb encrpytion dongle was housed in a physically secure server vault and there was only one system in existence (i.e. its not a software product that is distributed and run on many desktops) ?  In very simplistic terms, the purpose of the above system is to validate (decrypt and compare) a piece of incoming encrypted data.</p>

<hr>

<p>Thanks so far for your great answers!</p>
","<p>It's not about what's more secure because nothing is 100% bullet proof. It's a question on ""how to make it as difficult as possible""</p>

<p>You could see it from this point: If you store keys on the computer, they're there 24/7. If my pair of keys is on an external device, the keys are only accessible while attached to the device. ==> You reduce the timeframe in which somebody else can copy your keys. It's much easier to access something if physical access is not needed.</p>

<p>Think of online banking: Many banks have added ""external"" ways of authentifcation such as Tan / Tac /tanSMS/ tokengenerators etc. etc. Neither of those is secure for itself: I can steal your login password, I can steal your mobile phone, I can steal your Tac/Tan list and so on. But chaces are very low that I can steal all necessary elements at once => All pieces of the puzzle together create a quite secure solution.</p>

<p>Also think of these factors:</p>

<ul>
<li>money: Do you really need a 70$ token-based-protection for your 100$ app?</li>
<li>time: I would say that software based systems are faster</li>
<li>relevance: Does it make sense to provide my apps with such a complex protection system</li>
</ul>
","1944","<encryption><encryption-asymmetric>","3","3","4","2009-07-29 14:21:47","1200365","0","1","110130","","2009-07-29 14:21:47","2009-07-29 13:35:11",""
"1200319","Are there valid reasons for using a hardware encryption device (e.g. USB encryption dongle/keystore) over using a software library?","<p>If your application needs to encrypt/decrypt data (for various reasons), are there any reasons why you would use a hardware device (e.g. a USB encryption device - like a Marx CryptoBox) instead of using a software encryption library (like .net Cryptography or writing your own) and keep your keys in a safe key store?</p>

<p>I am looking for some objective views on this matter.</p>

<hr>

<p><strong>To narrow down the question posed:</strong>  what would your opinion be if the system that used the usb encrpytion dongle was housed in a physically secure server vault and there was only one system in existence (i.e. its not a software product that is distributed and run on many desktops) ?  In very simplistic terms, the purpose of the above system is to validate (decrypt and compare) a piece of incoming encrypted data.</p>

<hr>

<p>Thanks so far for your great answers!</p>
","<p>Yes, there are.</p>

<p>For one thing, this allows you to transmit the private keys physically through secure channels, rather than trusting a network.</p>

<p>For another, if you have to move around between a lot of systems that aren't nessecarily all networked, the USB key is just way more convienent. That's why the military uses a system very much like that (<a href=""http://en.wikipedia.org/wiki/EKMS"" rel=""nofollow noreferrer"">EKMS</a>). They don't use USB, but they use little dongles that look like big plastic keys. The idea is the same, but USB didn't exist back in the early 90's when they were developing this.</p>

<p><img src=""https://upload.wikimedia.org/wikipedia/commons/7/72/Ksd-64.jpg"" alt=""alt text""></p>

<p>(note: Its kinda scary how complete that Wikipedia article is. When I was working on the KP I was told we were allowed to put acronyms like <a href=""http://en.wikipedia.org/wiki/FIREFLY"" rel=""nofollow noreferrer"">FIREFLY</a> on our resumes, but we weren't allowed to tell anybody what they meant.)</p>
","1944","<encryption><encryption-asymmetric>","3","1","4","2009-07-29 14:21:47","1200365","0","1","110130","","2009-07-29 14:21:47","2009-07-29 13:35:11",""
"1200319","Are there valid reasons for using a hardware encryption device (e.g. USB encryption dongle/keystore) over using a software library?","<p>If your application needs to encrypt/decrypt data (for various reasons), are there any reasons why you would use a hardware device (e.g. a USB encryption device - like a Marx CryptoBox) instead of using a software encryption library (like .net Cryptography or writing your own) and keep your keys in a safe key store?</p>

<p>I am looking for some objective views on this matter.</p>

<hr>

<p><strong>To narrow down the question posed:</strong>  what would your opinion be if the system that used the usb encrpytion dongle was housed in a physically secure server vault and there was only one system in existence (i.e. its not a software product that is distributed and run on many desktops) ?  In very simplistic terms, the purpose of the above system is to validate (decrypt and compare) a piece of incoming encrypted data.</p>

<hr>

<p>Thanks so far for your great answers!</p>
","<p>A hardware key allows use to constrain usage of the software to a machine where the key is plugged in. </p>

<p>With software encryption it would be easier to copy the software to many machines and run it many times in parallel.</p>
","1944","<encryption><encryption-asymmetric>","3","1","4","2009-07-29 14:21:47","1200365","0","1","110130","","2009-07-29 14:21:47","2009-07-29 13:35:11",""
"1200319","Are there valid reasons for using a hardware encryption device (e.g. USB encryption dongle/keystore) over using a software library?","<p>If your application needs to encrypt/decrypt data (for various reasons), are there any reasons why you would use a hardware device (e.g. a USB encryption device - like a Marx CryptoBox) instead of using a software encryption library (like .net Cryptography or writing your own) and keep your keys in a safe key store?</p>

<p>I am looking for some objective views on this matter.</p>

<hr>

<p><strong>To narrow down the question posed:</strong>  what would your opinion be if the system that used the usb encrpytion dongle was housed in a physically secure server vault and there was only one system in existence (i.e. its not a software product that is distributed and run on many desktops) ?  In very simplistic terms, the purpose of the above system is to validate (decrypt and compare) a piece of incoming encrypted data.</p>

<hr>

<p>Thanks so far for your great answers!</p>
","<p>I think it depends on the purpose/usage of your application.  If you're developing a product for a high security need, such as banking or government, a hardware addition to your solution could be entirely appropriate.  You have to consider the additional costs that a hardware solution would add to the project.  Not just in the initial development, but the ongoing hardware maintenance costs that would be required after development is complete.  From my perspective, having worked banking in the past, there were very, very few solutions where we felt that a hardware solution was worth the additional costs it would entail.</p>
","1944","<encryption><encryption-asymmetric>","3","1","4","2009-07-29 14:21:47","1200365","0","1","110130","","2009-07-29 14:21:47","2009-07-29 13:35:11",""
"18204964","ECDSA for Android using SpongyCastle","<p>I've just added SpongyCastle to Eclipse for my Android Project, however I don't seem to be able to find a single good/complete example of how to use ECDSA for <strong>encryption</strong> &amp; <strong>decryption</strong> of plain texts. I would imagine this should be a 'hello world' for ecnryption libraries.</p>

<p>Can anyone help me with this? or direct me towards some other resource that can help me achieve the same goals?</p>

<p>Thanks.</p>
","<p>Here's the <a href=""http://www.bouncycastle.org/wiki/display/JA1/Elliptic+Curve+Key+Pair+Generation+and+Key+Factories"" rel=""nofollow"">example</a> from bouncycastle.org for generating a key, from there it's just standard use of the KeyPair.  Also @nelenkov wrote a <a href=""http://nelenkov.blogspot.co.uk/2011/12/using-ecdh-on-android.html"" rel=""nofollow"">great article</a> (as usual) on Elliptic curve on Android</p>

<pre><code>ECGenParameterSpec ecGenSpec = new ECGenParameterSpec(""prime192v1"");
//using spongycastle provider
KeyPairGenerator  g = KeyPairGenerator.getInstance(""ECDSA"", ""SC"");

g.initialize(ecGenSpec, new SecureRandom());

KeyPair pair = g.generateKeyPair();
</code></pre>
","1926","<android><encryption-asymmetric><elliptic-curve><ecdsa><spongycastle>","1","0","1","2013-10-21 16:38:06","","1","1","","","","2013-08-13 09:08:21",""
"6960729","RSA encryption and decryption of a long message in java","<p>I want to use java standard library, and as much as I know, its functions inputs are limited. So I implemented two methods to this purpose. Here they are:</p>

<pre><code>private byte[] RSAenc(String in) throws Exception {
    Cipher c = Cipher.getInstance(""RSA"");
    c.init(Cipher.ENCRYPT_MODE, privKey);
    int l = in.length();

    byte[] part;
    byte[] result = new byte[(int)(64*java.lang.Math.ceil(l/20.0))];
    int i = 0;
    while(i*20+20&lt;l) {
        part = c.doFinal(in.substring(i*20,i*20+19).getBytes(""UTF-8""));
        System.arraycopy(part, 0, result, i*64, part.length);
        i = i+1;
    }
    part = c.doFinal(in.substring(i*20,l-1).getBytes(""UTF-8""));
    System.arraycopy(part, 0, result, i*64, part.length);
    return result;

}

private String RSAdec(byte [] in) throws Exception {
    Cipher c = Cipher.getInstance(""RSA"");
    c.init(Cipher.DECRYPT_MODE, privKey);

    String result = """";
    byte[] part = new byte[64];
    int l = in.length;
    int i = 0;
    while(i+64&lt;=l) {
        System.arraycopy(in, i, part, 0, part.length);
        result = result + new String(c.doFinal(part), ""UTF-8"");
        i= i+64;
    }
    return result;
}
</code></pre>

<p>They work in this manner: for encryption I break the string to at most, 20 size substrings, and then use the Cipher to encrypt them. For decryption, I break byte array to 64 byte blocks, and apply Cipher decryption to them. 
Is there already a function which do this? Or at least is there a neater solution? How safe is my approach? Is encryption result length (<code>result.length</code>) always 64 on all distributions of JRE?</p>

<p>Thanx,</p>
","<p>RSA is suited to key encipherment, not bulk data encryption.</p>

<p>Instead of encrypting messages with RSA, most protocols generate a key for a symmetric cipher, like AES, and encrypt the message with that. Then, RSA is used to encrypt that symmetric key so that only the message recipient can recover it. The RSA-encrypted symmetric key is sent with the AES-encrypted message to the recipient.</p>
","1901","<java><network-programming><rsa><encryption-asymmetric>","2","6","1","2011-08-05 18:12:23","6960772","1","4","","","","2011-08-05 18:08:48",""
"46914542","How to base64 encode openssl generated key pem files?","<p>I generate the private key </p>

<pre><code>openssl genrsa -out private_key.pem 2048
</code></pre>

<p>Then I generate the public key from the private key </p>

<pre><code>openssl rsa -in private_key.pem -out public_key.pem -outform PEM -pubout 
</code></pre>

<p>I would like to hard-code these keys into my java program. And I want to use it with the <code>PrivateKey</code> and <code>PublicKey</code> classes in java.</p>

<p>My initial thought is I have to base64 encode the .pem files. Then there must be some java methods to convert the base64 encoded keys to their respective <code>PrivateKey</code> and <code>PublicKey</code> classes.</p>

<p>Thoughts?</p>

<p>Openssl CLI does have the base64 encode command but ....</p>

<p>There's the usual:</p>

<pre><code>-----BEGIN PUBLIC KEY-----
keyinfo
-----END PUBLIC KEY-----
</code></pre>

<p>Do I need to parse these away before doing the base64 encode?</p>
","","1892","<java><encryption><public-key-encryption><encryption-asymmetric>","1","","0","2017-10-25 09:51:38","","2","","608639","","2017-10-25 09:51:38","2017-10-24 15:32:58","2017-10-25 13:32:11"
"15364144","Where RSA is used?","<p>Someone please state two or three applications of RSA algorithm. I heard that RSA is used for SSL. Is that true?</p>
","<p>RSA is used in cryptography in Key-based authentication.SSH uses this method of key generation as it is considered very secure.</p>

<p><a href=""https://help.ubuntu.com/community/SSH/OpenSSH/Keys"" rel=""nofollow"">see here for more</a></p>
","1866","<rsa><public-key-encryption><encryption-asymmetric>","-1","0","2","2013-03-12 14:40:02","15364270","1","","","","","2013-03-12 14:35:04","2013-03-12 14:42:09"
"15364144","Where RSA is used?","<p>Someone please state two or three applications of RSA algorithm. I heard that RSA is used for SSL. Is that true?</p>
","<p>Yes, that is true.  RSA is an encryption algorithm.</p>

<p>Example uses:</p>

<ol>
<li>SSL</li>
<li>SSH</li>
<li>Digital signatures</li>
<li>PGP</li>
</ol>
","1866","<rsa><public-key-encryption><encryption-asymmetric>","-1","4","2","2013-03-12 14:40:02","15364270","1","","","","","2013-03-12 14:35:04","2013-03-12 14:42:09"
"8768144","DECRYPTBYASYMKEY() Not Returning Expected Value","<p>I'm playing around with <a href=""http://msdn.microsoft.com/en-us/library/ms173744.aspx"" rel=""nofollow"">Asymmetric Encryption and Decryption</a>, but I don't understand the results I'm getting when I try to decrypt values.</p>

<p>Why does this:</p>

<pre><code>CREATE ASYMMETRIC KEY myasymkey 
    WITH ALGORITHM = RSA_2048 
    ENCRYPTION BY PASSWORD = '123pass!'; 
GO

SELECT DECRYPTBYASYMKEY(ASYMKEY_ID('myasymkey'), 
    EncryptByAsymKey(AsymKey_ID('myasymkey'), 'Greg'), 
    N'123pass!');
GO
</code></pre>

<p>Produce <code>0x47726567</code>? I was expecting it to be <code>Greg</code>.</p>

<p><strong>UPDATE:</strong> I'm dumb, <code>0x47726567</code> is <code>Greg</code> when converted from <code>varbinary</code>.</p>
","<p>I think <code>0x47726567</code> is <code>Greg</code> (in ASCII).</p>
","1821","<sql-server><sql-server-2008><encryption><encryption-asymmetric>","1","2","3","2013-12-30 18:57:20","8768177","0","","585552","","2012-01-07 07:49:36","2012-01-07 07:36:39",""
"8768144","DECRYPTBYASYMKEY() Not Returning Expected Value","<p>I'm playing around with <a href=""http://msdn.microsoft.com/en-us/library/ms173744.aspx"" rel=""nofollow"">Asymmetric Encryption and Decryption</a>, but I don't understand the results I'm getting when I try to decrypt values.</p>

<p>Why does this:</p>

<pre><code>CREATE ASYMMETRIC KEY myasymkey 
    WITH ALGORITHM = RSA_2048 
    ENCRYPTION BY PASSWORD = '123pass!'; 
GO

SELECT DECRYPTBYASYMKEY(ASYMKEY_ID('myasymkey'), 
    EncryptByAsymKey(AsymKey_ID('myasymkey'), 'Greg'), 
    N'123pass!');
GO
</code></pre>

<p>Produce <code>0x47726567</code>? I was expecting it to be <code>Greg</code>.</p>

<p><strong>UPDATE:</strong> I'm dumb, <code>0x47726567</code> is <code>Greg</code> when converted from <code>varbinary</code>.</p>
","<p>All the encryption functions return varbinary values. You will have to cast the result as varchar.</p>
","1821","<sql-server><sql-server-2008><encryption><encryption-asymmetric>","1","1","3","2013-12-30 18:57:20","8768177","0","","585552","","2012-01-07 07:49:36","2012-01-07 07:36:39",""
"8768144","DECRYPTBYASYMKEY() Not Returning Expected Value","<p>I'm playing around with <a href=""http://msdn.microsoft.com/en-us/library/ms173744.aspx"" rel=""nofollow"">Asymmetric Encryption and Decryption</a>, but I don't understand the results I'm getting when I try to decrypt values.</p>

<p>Why does this:</p>

<pre><code>CREATE ASYMMETRIC KEY myasymkey 
    WITH ALGORITHM = RSA_2048 
    ENCRYPTION BY PASSWORD = '123pass!'; 
GO

SELECT DECRYPTBYASYMKEY(ASYMKEY_ID('myasymkey'), 
    EncryptByAsymKey(AsymKey_ID('myasymkey'), 'Greg'), 
    N'123pass!');
GO
</code></pre>

<p>Produce <code>0x47726567</code>? I was expecting it to be <code>Greg</code>.</p>

<p><strong>UPDATE:</strong> I'm dumb, <code>0x47726567</code> is <code>Greg</code> when converted from <code>varbinary</code>.</p>
","<p>It's right - when you encrypt something it's treated as a byte array and is returned as such. 0x47 is G, 72 is r etc. </p>

<p>If you examine the documentation for <a href=""http://msdn.microsoft.com/en-us/library/ms189507.aspx"" rel=""nofollow"">DecryptByAsmKey</a> you'll notice the return type is varbinary with a maximum size of 8,000 bytes. You'll also notice the convert in the example.</p>

<p>So if you are encrypting and decrypting strings you must convert like so</p>

<pre><code>SELECT CONVERT(varchar(max),DECRYPTBYASYMKEY(ASYMKEY_ID('myasymkey'), 
    EncryptByAsymKey(AsymKey_ID('myasymkey'), 
    'Greg'), 
    N'123pass!'));
</code></pre>

<p>Also note you need to make sure you're converting to varchar(max) or nvarchar(max) depending on your input. If you tried</p>

<pre><code>SELECT CONVERT(nvarchar(max),DECRYPTBYASYMKEY(ASYMKEY_ID('myasymkey'), 
    EncryptByAsymKey(AsymKey_ID('myasymkey'), 
    'Greg'), 
    N'123pass!'));
</code></pre>

<p>it would be wrong, as your input of 'Greg' is a varchar.</p>
","1821","<sql-server><sql-server-2008><encryption><encryption-asymmetric>","1","3","3","2013-12-30 18:57:20","8768177","0","","585552","","2012-01-07 07:49:36","2012-01-07 07:36:39",""
"11768227","Best Asymmetric encryption algorithm available in java API?","<p>I am following this article on <a href=""http://www.informit.com/articles/article.aspx?p=170967&amp;seqNum=4"" rel=""nofollow"">Encryption/Decryption</a>. Currently I am using RSA algorithm for encryption and decryption using private and public key respectively. 
 I am not sure whether RSA is good for asymmetric encryption or not. </p>

<p>Can you guys share your thought wheter RSA is best or not. If RSA is not best then please suggest me other algorithm name which can be used through java APIs. </p>
","<p>If it's good enough for your bank, it's (probably) good enough for your purposes. It's still secure (given a correct implementation and big enough keys). It's hard to pick the ""best"" algorithm, but RSA is certainly a well-trusted, secure algorithm.</p>
","1821","<java><rsa><encryption-asymmetric>","2","5","1","2012-08-01 22:03:01","11768250","1","","","","","2012-08-01 22:00:46",""
"14814235","Software license decryption with a public key stored in the application binary","<p>With reference to the <a href=""https://stackoverflow.com/questions/12696581/software-licencing-scheme?answertab=votes#tab-top"">answer of this question</a> I can not understand how can the software licensing scheme works if the Private Key is kept on the license server and the public key is shipped in the application executable, and not vice verse.</p>

<p>I'm trying to do the following software licensing scheme:</p>

<ol>
<li>User gets a Product ID (based on <a href=""http://en.wikipedia.org/wiki/Globally_unique_identifier"" rel=""nofollow noreferrer"">GUID</a>) upon purchase and uses this inside the application to activate it.</li>
<li>The application connects to the license server which sends back encrypted text using RSA public key. This text (license) will be stored on the user's hard disk.</li>
<li>Each time the application starts it needs to decrypt this license using RSA private key, in order to extract different parameters like product edition, product limitations, registered to what company etc.</li>
</ol>

<p>How can the application decrypt this license text if it does not have the private key but the public key?</p>

<p>Thanks!</p>

<p>EDIT:</p>

<ol>
<li>If the key used to encrypt the license is available only on the server side and not to the public, can we call this a private key? In this case, if one side has the key for encryption and the other side (the public) has the key for decryption, can the side that has the key for decryption obtain the key for encryption? The concern is based on the various topics on stackoverflow that it's not that difficult to generate the public key given the private key. If you have the private key, you effectively can have both keys.</li>
<li>The idea is that once the software is activated it should no longer need to connect to the license server.</li>
</ol>
","<p>The application should store its details in plain text.</p>

<p>When registering, the server should sign those details (including machine identification) using the private key.</p>

<p>Each time the application starts, it should verify that signature using the public key.</p>
","1772","<rsa><encryption-asymmetric><license-key>","2","5","2","2015-06-07 01:10:50","14814310","0","1","-1","","2017-05-23 12:31:11","2013-02-11 14:35:59",""
"14814235","Software license decryption with a public key stored in the application binary","<p>With reference to the <a href=""https://stackoverflow.com/questions/12696581/software-licencing-scheme?answertab=votes#tab-top"">answer of this question</a> I can not understand how can the software licensing scheme works if the Private Key is kept on the license server and the public key is shipped in the application executable, and not vice verse.</p>

<p>I'm trying to do the following software licensing scheme:</p>

<ol>
<li>User gets a Product ID (based on <a href=""http://en.wikipedia.org/wiki/Globally_unique_identifier"" rel=""nofollow noreferrer"">GUID</a>) upon purchase and uses this inside the application to activate it.</li>
<li>The application connects to the license server which sends back encrypted text using RSA public key. This text (license) will be stored on the user's hard disk.</li>
<li>Each time the application starts it needs to decrypt this license using RSA private key, in order to extract different parameters like product edition, product limitations, registered to what company etc.</li>
</ol>

<p>How can the application decrypt this license text if it does not have the private key but the public key?</p>

<p>Thanks!</p>

<p>EDIT:</p>

<ol>
<li>If the key used to encrypt the license is available only on the server side and not to the public, can we call this a private key? In this case, if one side has the key for encryption and the other side (the public) has the key for decryption, can the side that has the key for decryption obtain the key for encryption? The concern is based on the various topics on stackoverflow that it's not that difficult to generate the public key given the private key. If you have the private key, you effectively can have both keys.</li>
<li>The idea is that once the software is activated it should no longer need to connect to the license server.</li>
</ol>
","<p>I don't really see the need for all this stuff. </p>

<p>Why not simply establish a connection to the server at validation time, have the server generate a file with all the parameters you want in it (in plain text even) and then have the server sign that file and return it to the software?</p>

<p>The client can read the file, and then simply validate te signature using one of the many digital signature algorithms that are out there.</p>
","1772","<rsa><encryption-asymmetric><license-key>","2","3","2","2015-06-07 01:10:50","14814310","0","1","-1","","2017-05-23 12:31:11","2013-02-11 14:35:59",""
"1840720","python X.509 asymmetric encryption","<p>I'm trying to understand how certificate and asymmetric encryption works. I'm looking for a python library where i can import public or private ca signed certificates and automatically encrypt or decrypt message in string format, i viewed the crypto library embedded in python source, but i don't know how to use the hex modulus and exponent in this part of the certificate:</p>

<pre><code>RSA Public Key: (1024 bit)  

               Modulus (1024 bit):

               00:b4:31:98:0a:c4:bc:62:c1:88:aa:dc:b0:c8:bb:  
               33:35:19:d5:0c:64:b9:3d:41:b2:96:fc:f3:31:e1:  
               66:36:d0:8e:56:12:44:ba:75:eb:e8:1c:9c:5b:66:  
               70:33:52:14:c9:ec:4f:91:51:70:39:de:53:85:17:  
               16:94:6e:ee:f4:d5:6f:d5:ca:b3:47:5e:1b:0c:7b:  
               c5:cc:2b:6b:c1:90:c3:16:31:0d:bf:7a:c7:47:77:  
               8f:a0:21:c7:4c:d0:16:65:00:c1:0f:d7:b8:80:e3:  
               d2:75:6b:c1:ea:9e:5c:5c:ea:7d:c1:a1:10:bc:b8:  
               e8:35:1c:9e:27:52:7e:41:8f  

           Exponent: 65537 (0x10001)  
</code></pre>

<p>is there anyone can help me?</p>

<p>thanks</p>
","<p><a href=""https://gitlab.com/m2crypto/m2crypto"" rel=""nofollow noreferrer"">MeTooCrypto</a>:</p>

<blockquote>
  <p>M2Crypto is the most complete Python wrapper for OpenSSL featuring RSA, DSA, DH, HMACs, message digests, symmetric ciphers (including AES); SSL functionality to implement clients and servers; HTTPS extensions to Python's httplib, urllib, and xmlrpclib; unforgeable HMAC'ing AuthCookies for web session management; FTP/TLS client and server; S/MIME; ZServerSSL: A HTTPS server for Zope and ZSmime: An S/MIME messenger for Zope. M2Crypto can also be used to provide SSL for Twisted. </p>
</blockquote>

<p>For an example of loading and manipulating <code>PKI</code> keys, see the test source, <a href=""http://svn.osafoundation.org/m2crypto/trunk/tests/test_rsa.py"" rel=""nofollow noreferrer""><code>test_rsa.py</code></a>. The test source directory contains keys in <code>.pem</code> format, and those are used by the code.</p>
","1740","<python><encryption><x509><encryption-asymmetric>","0","3","1","2017-08-29 06:38:12","1840756","0","0","","","","2009-12-03 15:38:19",""
"5668643","How do I code makecert ""-sky exchange"" and ""-sky signature"" in C#","<p>I need to programatically create the equivalant keys in a .NET application...</p>

<p><code>makecert -r -pe -a sha1 -n ""CN=MyName"" -ss my -sr CurrentUser -sky exchange</code> </p>

<p><code>makecert -r -pe -a sha1 -n ""CN=MyName"" -ss my -sr CurrentUser -sky signature</code></p>

<p>The output will ultimately be used like this:</p>

<pre><code>RSACryptoServiceProvider privateKey = new RSACryptoServiceProvider();         
privateKey.FromXmlString(""&lt;RSAKeyValue&gt;
&lt;Modulus&gt;wL8s+C8SnnlaaqR+VsyijmxOJOARNa4o7ZNsqfy3+9J9Ol2JNSjjMfQWoUnFtClzJBlZhU5KtuazQe8ZKXTX9YvKoJdRhlsonZkC04qiTMdO/FZIH00GrCRxeQ7XDnQnvPB9Bdsvs//7zrY3f7eLIkpIyK9cQHU+5jjJd5IT0eE=&lt;/Modulus&gt;
&lt;Exponent&gt;AQAB&lt;/Exponent&gt;
&lt;P&gt;83xxN7jvpg5z16pxz2tIQIdqd/EfmikR9Q2TjG2tosWkUSvtyx0xHZ9EqdTUbSGZZ+jgrabzkafYc7Mplylwew==&lt;/P&gt;
&lt;Q&gt;yqcnYSZEXHwJvRWi2V09PNEENTozQZywcFptUUGar9TciaQvoNv3lpnfzUKNBRdhzq4lImxkamajZlTWE5buUw==&lt;/Q&gt;
&lt;DP&gt;37HqilkbwyHwB6mOGhPkM3S1ujAK6qTk3JB2iEOTjMGrru9+7maJYz+Z47Wm3ARMXgyzrpZ9m8nqsJFfmoL11Q==&lt;/DP&gt;
&lt;DQ&gt;v285tv8kMs2FkZYfuP/oOkwkkneBNejjj68Md2bmzlThZDCyQV2pvB1tmgPVHUsiPNCrCaKlFRISJzfa5rR8Ow==&lt;/DQ&gt;
&lt;InverseQ&gt;fgJE2TRe/SS+YqW0/I+FtHrdfbbao0/R3pHD4r4oceZQUemlBgZ7DxOAetebHKthlOdjGkmfWYB8EU4XoWggqw==&lt;/InverseQ&gt;
&lt;D&gt;FMLCwjy3wbAKiCANp6XFAJgz1o7365NFv0k41BpvasViTa4TgFFWH2ROJ7M9g0lPqJy+YrhrHcY9mqV5TVjTheQp0JeckrgO2B39XngPMAMMdne3rWGpf0Pfbj3FLfchMk6XYDXSZzCS2CmSeRA4aBMb+4R3YurixyJLrnGRMH0=&lt;/D&gt;
&lt;/RSAKeyValue&gt;"");         
</code></pre>
","<p>I realize you probably have found a solution by now, but here is what the code would look like:  (based on <a href=""http://blogs.technet.com/b/jhoward/archive/2005/02/02/365323.aspx"" rel=""nofollow"">http://blogs.technet.com/b/jhoward/archive/2005/02/02/365323.aspx</a>)</p>

<p><code>Process.Start(""makecert.exe"", ""-pe -n \""CN=MyCert Root Authority\"" -ss my -sr LocalMachine -a sha1 -sky signature -r \""MyCert Root Authority.cer\"""");</code></p>

<p><code>Process.Start(""makecert.exe"", ""-pe -n \""CN=MyCert\"" -ss my -sr LocalMachine -a sha1 -sky exchange -eku 1.3.6.1.5.5.7.3.1 -in \""MyCert Root Authority\"" -is MY -ir LocalMachine -sp \""Microsoft RSA SChannel Cryptographic Provider\"" -sy 12 \""MyCert.cer\"""");</code></p>
","1740","<c#><encryption><rsa><encryption-asymmetric><makecert>","1","0","1","2013-02-12 16:54:53","","2","1","","","","2011-04-14 19:33:24",""
"6150135","RSA decryption of valid data padded data fails (BadPaddingException)","<p>I am facing a very peculiar problem when using RSA encryption/decryption in Java.</p>

<p>Example code:</p>

<pre><code>KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
kpg.initialize(2048);
KeyPair kp = kpg.genKeyPair();

Cipher enc = Cipher.getInstance(""RSA"");
enc.init(Cipher.ENCRYPT_MODE, kp.getPublic());
String CipherText = new String(enc.doFinal(PlainText.getBytes()));
System.out.println(""CipherText: "") + CipherText);

Cipher dec = Cipher.getInstance(""RSA"");
dec.init(Cipher.DECRYPT_MODE, kp.getPrivate());
PlainText = new String(dec.doFinal(CipherText.getBytes()));
System.out.println(""PlainText: "" + PlainText);
</code></pre>

<p>As everyone can plainly see: I encrypt the plaintext using the public key, after which I decrypt the ciphertext using the private key.</p>

<p>This code crashes with the following message:</p>

<pre><code>Exception in thread ""main"" javax.crypto.BadPaddingException: Data must start with zero
</code></pre>

<p>I also tried to explicitly use ""RSA/ECB/NoPadding"", and this fails on decoding period. (Eg the decoded ciphertext doesn't match the original plaintext).</p>

<p>Last but not least, I have tried to perform this when using my own PKCS1.5 padding function ala the PKCS1.5 specs:</p>

<p>EMB = 00 || 02 || RD || 00 || MD<br>
EMB is encoded messageblock of length k<br>
Where RD are 8 random nonzero bytes<br>
MD is max length k = 11, and optionally padded with zero bytes to make EMB length k.</p>

<p>After two days of testing I can only conclude that the RSA algo in Java is flawed or simply not performing what I expect it to perform.</p>

<p>Any suggestions or fixes to the above code are very welcome, as I am completely stumped on why the above code will not simply work as expected.</p>
","<p>Don't do this:</p>

<pre><code>String CipherText = new String(enc.doFinal(PlainText.getBytes()));
</code></pre>

<p>Two reasons:</p>

<ul>
<li>It's almost <em>never</em> a good idea to call <code>String.getBytes()</code> without specifying an encoding. Do you really want the result to depend on the system default encoding?</li>
<li>It's definitely never a good idea to treat the result of a binary encryption operation (i.e. opaque binary data) as an encoded string. Encode it in Base64 or hex instead.</li>
</ul>

<p>You can use <a href=""http://commons.apache.org/codec/"" rel=""nofollow"">Apache Commons Codec</a> to perform the base64 encode/decode operations, or <a href=""http://www.iharder.net/current/java/base64/"" rel=""nofollow"">this standalone public domain encoder/decoder</a>.</p>
","1737","<java><rsa><encryption-asymmetric><public-key-encryption>","2","2","1","2011-05-27 09:16:41","6150186","0","3","","","","2011-05-27 09:11:47",""
"10498968","Encrypting Certificate","<p>I am getting issue on Microsoft internet explorer certificate while encrypt with private key and decrypt with public key having issue </p>

<p>1) Encrypt working file </p>

<pre><code>public String encryption(String inputData, String key, String certificate) // Certificate is nothing but aliase name
{
    String encriptData = null;

    String verify = checkForCertificateConfig();
    if (!verify.equals(""OK"")) {
        return verify;
    }
    System.out.println(""ENCRYPTION INPUTDATA : "" + inputData);
    System.out.println(""ENCRYPTION KEY : "" + key);
    System.out.println(""ENCRYPTION CERTIFICATE : "" + certificate);
    try {
        if (key.equalsIgnoreCase(""Private"")) {
            // System.out.println(""ENCRYPTION WITH PRIVATE KEY"");
            PrivateKey privateKey = (PrivateKey) keyStore.getKey(
                    certificate, null);
            encriptData = encryptString(inputData, privateKey);
        } else {
            // System.out.println(""ENCRYPTION WITH PUBLIC KEY"");
            encriptData = encryptString(inputData,
                    keyStore.getCertificate(certificate).getPublicKey());
        }
    } catch (NoSuchPaddingException ex) {
        encriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (IllegalBlockSizeException ex) {
        encriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (NoSuchAlgorithmException ex) {
        encriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (UnrecoverableKeyException ex) {
        encriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (InvalidKeyException ex) {
        encriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (KeyStoreException ex) {
        encriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (BadPaddingException ex) {
        encriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (Exception ex) {
        encriptData = ex.getMessage();
        ex.printStackTrace();

    }
    return encriptData;
}

private String encryptString(String encStr, PrivateKey key)
        throws NoSuchAlgorithmException, NoSuchPaddingException,
        InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
    String encoutStr = null;

    /**
     * first check key generation algorithm and initialize Cipher object
     * according algorithm
     */
    if (key.getAlgorithm().equalsIgnoreCase(""RSA"")) {
        edCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    } else if (key.getAlgorithm().equalsIgnoreCase(""DSA"")) {
        edCipher = Cipher.getInstance(""DSA/ECB/PKCS1Padding"");
    }

    /**
     * Initialize Cipher Object with Private key and mode of Encryption
     */
    edCipher.init(Cipher.ENCRYPT_MODE, key);
    byte[] buff = encStr.getBytes();
    /**
     * Encrypt the String and get binary data
     */
    byte[] encryptedDataStringBytes = edCipher.doFinal(buff);
    /**
     * Encode the binary data into String formate
     */
    encoutStr = this.bASE64Encoder.encode(encryptedDataStringBytes);

    return encoutStr;
}
</code></pre>

<p>2) Decrypt Getting error like </p>

<pre><code>public String decryption(String inputData, String key, String certificate) {
    String decriptData = null;

    String verify = checkForCertificateConfig();
    if (!verify.equals(""OK"")) {
        return verify;
    }

    System.out.println(""DECRYPTION INPUTDATA : "" + inputData);
    System.out.println(""DECRYPTION KEY : "" + key);
    System.out.println(""DECRYPTION CERTIFICATE : "" + certificate);
    try {
        if (key.equalsIgnoreCase(""Private"")) {
            // System.out.println(""DECRYPTION WITH PRIVATE KEY"");
            PrivateKey privateKey = (PrivateKey) keyStore.getKey(
                    certificate, null);
            decriptData = decryptString(inputData, privateKey);
        } else {
            // System.out.println(""DECRYPTION WITH PUBLIC KEY"");
            decriptData = decryptString(inputData,
                    keyStore.getCertificate(certificate).getPublicKey());
        }
    } catch (NoSuchPaddingException ex) {
        decriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (IllegalBlockSizeException ex) {
        decriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (NoSuchAlgorithmException ex) {
        decriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (UnrecoverableKeyException ex) {
        decriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (InvalidKeyException ex) {
        decriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (KeyStoreException ex) {
        decriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (BadPaddingException ex) {
        decriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (IOException ex) {
        decriptData = ex.getMessage();
        ex.printStackTrace();

    } catch (Exception ex) {
        decriptData = ex.getMessage();
        ex.printStackTrace();

    }
    return decriptData;
}   

private String decryptString(String dncStr, PrivateKey key)
        throws NoSuchAlgorithmException, NoSuchPaddingException,
        InvalidKeyException, IOException, IllegalBlockSizeException,
        BadPaddingException {
    String decStr = null;

    /**
     * first check key generation algorithm and initialize Cipher object
     * according algorithm
     */
    if (key.getAlgorithm().equalsIgnoreCase(""RSA"")) {
        edCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
    } else if (key.getAlgorithm().equalsIgnoreCase(""DSA"")) {
        edCipher = Cipher.getInstance(""DSA/ECB/PKCS1Padding"");
    }
    /**
     * Initialize Cipher Object with Private key and mode of Decryption
     */
    edCipher.init(Cipher.DECRYPT_MODE, key);
    /**
     * Decode the encrypted String convert into binary formate
     */
    byte[] encryptedDataStringBytes = this.bASE64Decoder
            .decodeBuffer(dncStr);
    /**
     * Decrypt the binary data and get Original encrypted String.
     */
    decStr = new String(edCipher.doFinal(encryptedDataStringBytes));

    return decStr;
}
</code></pre>

<p>Error like...</p>

<pre><code>javax.crypto.BadPaddingException: Blocktype mismatch: 0
at sun.security.rsa.RSAPadding.unpadV15(Unknown Source)
at sun.security.rsa.RSAPadding.unpad(Unknown Source)
at com.sun.crypto.provider.RSACipher.a(DashoA13*..)
at com.sun.crypto.provider.RSACipher.engineDoFinal(DashoA13*..)
at javax.crypto.Cipher.doFinal(DashoA13*..)
at eTokenApplet.decryptString(eTokenApplet.java:1255)
at eTokenApplet.decryption(eTokenApplet.java:1099)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at sun.plugin.javascript.JSInvoke.invoke(Unknown Source)
at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at sun.plugin.javascript.JSClassLoader.invoke(Unknown Source)
at sun.plugin2.liveconnect.JavaClass$MethodInfo.invoke(Unknown Source)
at sun.plugin2.liveconnect.JavaClass$MemberBundle.invoke(Unknown Source)
at sun.plugin2.liveconnect.JavaClass.invoke0(Unknown Source)
at sun.plugin2.liveconnect.JavaClass.invoke(Unknown Source)
at sun.plugin2.main.client.LiveConnectSupport$PerAppletInfo$DefaultInvocationDelegate.invoke(Unknown Source)
at sun.plugin2.main.client.LiveConnectSupport$PerAppletInfo$3.run(Unknown Source)
at java.security.AccessController.doPrivileged(Native Method)
at sun.plugin2.main.client.LiveConnectSupport$PerAppletInfo.doObjectOp(Unknown Source)
at sun.plugin2.main.client.LiveConnectSupport$PerAppletInfo$LiveConnectWorker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
</code></pre>
","<p>For variable length messages, most encryption/decryption algorithms have a required block size. If the data doesn't fill the block properly - bad things happen - so you need to pad the data</p>

<p>More info about padding at <a href=""http://www.di-mgt.com.au/cryptopad.html"" rel=""nofollow"">http://www.di-mgt.com.au/cryptopad.html</a></p>
","1660","<java><certificate><encryption-asymmetric>","0","0","1","2012-06-22 10:04:11","10515148","1","4","366898","","2012-06-22 10:04:11","2012-05-08 12:50:18",""
"12959638","Secure login within Phonegap","<p>I'm creating a Phonegap application which needs to allow a user to log into our Central Authentication Service.</p>

<p>My concern is that, since the files on the Phone are being loaded locally (via file://), there isn't security like there would be over an HTTPS connection. If I pass the username and password to an HTTPS location on our server, the request would not be secured even though the response would be.</p>

<p>I do not want to use a ChildBrowser plugin for the login because there doesn't appear to be any kind of event bubbling that would tell me when the login process has finished, and because not all platforms support the ChildBrowser plugin.</p>

<p>It looked as though it might be reasonable to use asymmetric encryption to encrypt the username/password combination with a public key and decrypt it on the server with a private key. I can't seem to get any javascript RSA libraries to play nice with Java on the backend, though.</p>

<p>Does asymmetric encryption seem decent for this case of protecting a user's password in a Phonegap application? Is there a better solution?</p>

<p>How would one get this working with Javascript -> Java? I've been using the ohdave.com/RSA scripts on the client side, but Java doesn't want to recreate a key using ohdave's generated keys. </p>

<p>Any help is appreciated.</p>
","<p>I have since learned that requesting the authentication webservice via HTTPS will initiate a handshake that will allow the credentials to be encrypted with the SSL certificate.</p>

<p>As far as storing the credentials on the phone, here's how I'm doing it:</p>

<ol>
<li>Send credentials to login webservice over SSL with Base64 encoding in an Basic Authorization header.</li>
<li>Successful login response includes credentials AES encrypted with a key that lives on the server.</li>
<li>AES Encrypted credentials are stored on the phone.</li>
<li>Future logins are handled by sending the encrypted credentials to the login webservice over SSL in a Digest Authorization header.</li>
</ol>
","1659","<cordova><login><security><encryption-asymmetric>","5","4","1","2013-04-30 18:29:26","16306630","0","3","24246","","2012-10-18 17:21:35","2012-10-18 16:44:42",""
"4475407","Asymmetric deterministic encryption (RSA) with Ruby","<p>I was wondering if anyone knows of a way to deterministically encrypt a value in Ruby using an asymmetric encryption algorithm.</p>

<p>For most use-cases one only cares that when you encrypt 'A' you get 'A' back when you decrypt it, that is you do not care about the encrypted value itself. You only care about the full roundtrip.</p>

<p>However, for an application that I'm developing I really need the output to be deterministic. That is, I need to encrypt something with RSA without a variable padding.</p>

<p>When I attempt to encrypt a value with <code>OpenSSL::PKey::RSA::NO_PADDING</code> an error is returned:</p>

<pre><code>OpenSSL::PKey::RSAError Exception: data too small for key size
</code></pre>

<p>Anyone has an idea on how I can get a deterministic encrypted value using RSA?</p>

<p>Best regards,</p>

<p>DBA</p>
","<p>This error comes from <a href=""http://www.google.com/codesearch/p?hl=en#XrPblB9f5NU/crypto/rsa/rsa_none.c&amp;q=RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE%20package:%22git://android.git.kernel.org/platform/external/openssl.git%22&amp;sa=N&amp;cd=3&amp;ct=rc&amp;l=76"" rel=""nofollow"">crypto/rsa/rsa_none.c</a></p>

<pre><code>int RSA_padding_add_none(unsigned char *to, int tlen,
    const unsigned char *from, int flen)
    {
    if (flen &gt; tlen)
            {
            RSAerr(RSA_F_RSA_PADDING_ADD_NONE,RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE);
            return(0);
            }

    if (flen &lt; tlen)
            {
            RSAerr(RSA_F_RSA_PADDING_ADD_NONE,RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE);
            return(0);
            }

    memcpy(to,from,(unsigned int)flen);
    return(1);
    }
</code></pre>

<p>Called from <a href=""http://www.google.com/codesearch/p?hl=en#XrPblB9f5NU/crypto/rsa/rsa_eay.c&amp;q=RSA_padding_add_none&amp;exact_package=git://android.git.kernel.org/platform/external/openssl.git&amp;sa=N&amp;cd=3&amp;ct=rc&amp;l=209"" rel=""nofollow"">rypto/rsa/rsa_eay.c</a></p>

<pre><code>static int RSA_eay_public_encrypt(int flen, const unsigned char *from,
         unsigned char *to, RSA *rsa, int padding)
...
               i=RSA_padding_add_none(buf,num,from,flen);
</code></pre>

<p>The <code>flen</code> is a message len; and the <code>tlen</code> is from: <code>num=BN_num_bytes(rsa-&gt;n);</code></p>

<p>So, <strong>You need your data have the same byte length as your <code>N</code> parameter of RSA key</strong></p>

<p>Also, as I know, your data must be smaller than N (if considered as single long-long-long binary number)</p>
","1645","<ruby><rsa><encryption-asymmetric>","4","1","2","2010-12-17 23:40:16","4475598","6","1","196561","","2010-12-17 22:56:16","2010-12-17 22:44:19",""
"4475407","Asymmetric deterministic encryption (RSA) with Ruby","<p>I was wondering if anyone knows of a way to deterministically encrypt a value in Ruby using an asymmetric encryption algorithm.</p>

<p>For most use-cases one only cares that when you encrypt 'A' you get 'A' back when you decrypt it, that is you do not care about the encrypted value itself. You only care about the full roundtrip.</p>

<p>However, for an application that I'm developing I really need the output to be deterministic. That is, I need to encrypt something with RSA without a variable padding.</p>

<p>When I attempt to encrypt a value with <code>OpenSSL::PKey::RSA::NO_PADDING</code> an error is returned:</p>

<pre><code>OpenSSL::PKey::RSAError Exception: data too small for key size
</code></pre>

<p>Anyone has an idea on how I can get a deterministic encrypted value using RSA?</p>

<p>Best regards,</p>

<p>DBA</p>
","<p>You could perform the padding to the appropriate key length yourself with non-random data</p>
","1645","<ruby><rsa><encryption-asymmetric>","4","2","2","2010-12-17 23:40:16","4475598","6","1","196561","","2010-12-17 22:56:16","2010-12-17 22:44:19",""
"17867013","How to decrypt data signed by RSACryptoServiceProvider","<p>I am starting to use encryption and decryption in my web service. I am using the <strong>RSACryptoServiceProvider</strong> and when using the <em>Encrypt</em> &amp; <em>Decrypt</em> methods, I have no problem.</p>

<p>However, as soon as I try to use the <strong>SignData</strong> method with <em>new SHA1CryptoServiceProvider()</em> as encryption method, I am unable to recover the original data. I am only able to verify them. 
Is it really not possible to retrieve the signed data? If so, what is the purpose of the whole signing process? And is there another possibility how to encrypt data by a certain algorithm?</p>

<p>EDIT: I am posting the code, which is just an altered example from <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.decrypt.aspx"" rel=""nofollow"">MSDN</a></p>

<pre><code>static void Main()
{
    try
    {
        //Create a UnicodeEncoder to convert between byte array and string.
        ASCIIEncoding ByteConverter = new ASCIIEncoding();

        string dataString = ""Data to Encrypt"";

        //Create byte arrays to hold original, encrypted, and decrypted data. 
        byte[] dataToEncrypt = ByteConverter.GetBytes(dataString);
        byte[] encryptedData;
        byte[] signedData;
        byte[] decryptedData;
        byte[] unsignedData;
        var fileName = ConfigurationManager.AppSettings[""certificate""];
        var password = ConfigurationManager.AppSettings[""password""];
        var certificate = new X509Certificate2(fileName, password);

        //Create a new instance of the RSACryptoServiceProvider class  
        // and automatically create a new key-pair.
        RSACryptoServiceProvider RSAalg = (RSACryptoServiceProvider)certificate.PrivateKey;
        //RSAPKCS1SignatureDeformatter def = (RSAPKCS1SignatureDeformatter)certificate.PrivateKey;

        //Display the origianl data to the console.
        Console.WriteLine(""Original Data: {0}"", dataString);

        //Encrypt the byte array and specify no OAEP padding.   
        //OAEP padding is only available on Microsoft Windows XP or 
        //later.  
        encryptedData = RSAalg.Encrypt(dataToEncrypt, false);
        signedData = RSAalg.SignData(dataToEncrypt, new SHA1CryptoServiceProvider());

        //Display the encrypted data to the console. 
        Console.WriteLine(""Encrypted Data: {0}"", ByteConverter.GetString(encryptedData));
        Console.WriteLine(""Signed Data: {0}"", ByteConverter.GetString(signedData));

        //Pass the data to ENCRYPT and boolean flag specifying  
        //no OAEP padding.
        decryptedData = RSAalg.Decrypt(encryptedData, false);
    //In the next line I get the error of wrong data
        unsignedData = RSAalg.Decrypt(signedData, false);

        //Display the decrypted plaintext to the console. 
        Console.WriteLine(""Decrypted plaintext: {0}"", ByteConverter.GetString(decryptedData));
        Console.WriteLine(""Unsigned plaintext: {0}"", ByteConverter.GetString(unsignedData));
    }
    catch (CryptographicException e)
    {
        //Catch this exception in case the encryption did 
        //not succeed.
        Console.WriteLine(e.Message);

    }

    Console.Read();
}
</code></pre>
","<p>SHA1 is a hash function, so you cant compute a message that has a given hash. In other words, you cant sign/unsign the message, you only can sign and verify it.</p>
","1636","<c#><encryption><encryption-asymmetric>","0","1","1","2013-07-26 09:52:54","17878240","4","0","1942656","","2013-07-26 09:25:27","2013-07-25 19:25:16",""
"1847357","Can I use the assemblies PublicKey to decrypt a string encrypted with the corresponding PrivateKey?","<p>Signing an assembly in .NET involves a public/private key pair. As far as I can tell from what I've read .NET uses the RSA algorithm and the private key to sign the assembly, checking it with the embedded public key.</p>

<p>I know how to retrieve the public key (<code>Assembly.PublicKey</code>). I was wondering, if that key could be used to decrypt a short string that contains some data encrypted with the private key.</p>

<p>The docs I've read so far (<a href=""http://msdn.microsoft.com/en-us/library/92f9ye3s.aspx#public_key"" rel=""nofollow noreferrer"">e.g.</a>) seem to imply that only the other way round is possible: That I would have to use the public key to encrypt and the private key to decrypt - but I don't really want to include that in the assembly, do I.</p>

<p>I guess it would be ok, if I just signed the string. But how?</p>

<p>I'm a bit at a loss how to start this. Does anybody have a code snippet?</p>

<p>Also, encrypting / signing of the small string would ideally happen in PHP, since I want to offload that to a web server and all we have so far is your generic PHP/MySQL hosted website.</p>

<p><strong>Use Case</strong>: I'm trying to come up with a lightweight licensing scheme for a software we are about to release to beta testers. Since the software will probably be freeware, all we really want to achieve is</p>

<ol>
<li>know who has the software installed (email address)</li>
<li>let the software expire after a given period, after which the user will have to get a new license

<ul>
<li>this is as easy as filling out a form and waiting for an automated email with the key to arrive</li>
<li>we are trying to reduce the likelyhood of old versions coming back to bite our reputation / haunt us</li>
</ul></li>
</ol>

<p>Being able to encrypt a tuple (expiry date, fingerprint) and decrypt that at startup would make an easy licensing module: The first time the application is started, the user is asked for email address, name, organisation. This information is posted to the webserver along with an md5 fingerprint of some system info (nic, computer name, assembly major and minor version). The webserver answers by email (checks validity of email address) with an encrypted version of the tuple (expiry date, fingerprint) that is then saved to disk. On startup, this can be decrypted and compared with current date and regenerated fingerprint.</p>

<p><em>EDIT</em>: OK, so I don't have all the answers to my question yet. But it looks like .NET won't make it easy to use the private key for encryption (if that is at all possible, the answers don't really agree on that).</p>

<p>The route I will take is this (based on my use case):</p>

<ul>
<li>I will use the private key to sign the license.</li>
<li>I will use the public key to verify the license was signed by the private key</li>
<li>I will post another question aimed at PHP devs on how to use the .NET keys (produced by <code>sn.exe</code>) to sign some text</li>
<li>I am not really worried about the user seeing the license, as it is a hash anyway and computed from stuff he allready knows. All I want is to make it too hard to be worth any bother for your typical building architect to copy my software without me knowing (remember, the software will be freeware - all I want is a paper trail of who has it installed...)</li>
</ul>

<p>Thank you very much for your answers. </p>
","<p>In RSA Public keys are used for encryption, private keys are used for decryption.  You can't use a public key to decrypt anything...</p>
","1613","<c#><php><rsa><encryption-asymmetric><license-key>","2","0","7","2009-12-11 10:26:40","1847408","3","3","2260","","2009-12-07 11:05:18","2009-12-04 14:40:55",""
"1847357","Can I use the assemblies PublicKey to decrypt a string encrypted with the corresponding PrivateKey?","<p>Signing an assembly in .NET involves a public/private key pair. As far as I can tell from what I've read .NET uses the RSA algorithm and the private key to sign the assembly, checking it with the embedded public key.</p>

<p>I know how to retrieve the public key (<code>Assembly.PublicKey</code>). I was wondering, if that key could be used to decrypt a short string that contains some data encrypted with the private key.</p>

<p>The docs I've read so far (<a href=""http://msdn.microsoft.com/en-us/library/92f9ye3s.aspx#public_key"" rel=""nofollow noreferrer"">e.g.</a>) seem to imply that only the other way round is possible: That I would have to use the public key to encrypt and the private key to decrypt - but I don't really want to include that in the assembly, do I.</p>

<p>I guess it would be ok, if I just signed the string. But how?</p>

<p>I'm a bit at a loss how to start this. Does anybody have a code snippet?</p>

<p>Also, encrypting / signing of the small string would ideally happen in PHP, since I want to offload that to a web server and all we have so far is your generic PHP/MySQL hosted website.</p>

<p><strong>Use Case</strong>: I'm trying to come up with a lightweight licensing scheme for a software we are about to release to beta testers. Since the software will probably be freeware, all we really want to achieve is</p>

<ol>
<li>know who has the software installed (email address)</li>
<li>let the software expire after a given period, after which the user will have to get a new license

<ul>
<li>this is as easy as filling out a form and waiting for an automated email with the key to arrive</li>
<li>we are trying to reduce the likelyhood of old versions coming back to bite our reputation / haunt us</li>
</ul></li>
</ol>

<p>Being able to encrypt a tuple (expiry date, fingerprint) and decrypt that at startup would make an easy licensing module: The first time the application is started, the user is asked for email address, name, organisation. This information is posted to the webserver along with an md5 fingerprint of some system info (nic, computer name, assembly major and minor version). The webserver answers by email (checks validity of email address) with an encrypted version of the tuple (expiry date, fingerprint) that is then saved to disk. On startup, this can be decrypted and compared with current date and regenerated fingerprint.</p>

<p><em>EDIT</em>: OK, so I don't have all the answers to my question yet. But it looks like .NET won't make it easy to use the private key for encryption (if that is at all possible, the answers don't really agree on that).</p>

<p>The route I will take is this (based on my use case):</p>

<ul>
<li>I will use the private key to sign the license.</li>
<li>I will use the public key to verify the license was signed by the private key</li>
<li>I will post another question aimed at PHP devs on how to use the .NET keys (produced by <code>sn.exe</code>) to sign some text</li>
<li>I am not really worried about the user seeing the license, as it is a hash anyway and computed from stuff he allready knows. All I want is to make it too hard to be worth any bother for your typical building architect to copy my software without me knowing (remember, the software will be freeware - all I want is a paper trail of who has it installed...)</li>
</ul>

<p>Thank you very much for your answers. </p>
","<p>You cannot decrypt using the public key. That way, the whole point of ""public"" would be lost.</p>

<p>(You might, however, be able to sign something using the private key, then verify the signature using the public key. That's what the framework uses the keys for - the assembly is signed, and the public key is used to verify the signature.)</p>
","1613","<c#><php><rsa><encryption-asymmetric><license-key>","2","1","7","2009-12-11 10:26:40","1847408","3","3","2260","","2009-12-07 11:05:18","2009-12-04 14:40:55",""
"1847357","Can I use the assemblies PublicKey to decrypt a string encrypted with the corresponding PrivateKey?","<p>Signing an assembly in .NET involves a public/private key pair. As far as I can tell from what I've read .NET uses the RSA algorithm and the private key to sign the assembly, checking it with the embedded public key.</p>

<p>I know how to retrieve the public key (<code>Assembly.PublicKey</code>). I was wondering, if that key could be used to decrypt a short string that contains some data encrypted with the private key.</p>

<p>The docs I've read so far (<a href=""http://msdn.microsoft.com/en-us/library/92f9ye3s.aspx#public_key"" rel=""nofollow noreferrer"">e.g.</a>) seem to imply that only the other way round is possible: That I would have to use the public key to encrypt and the private key to decrypt - but I don't really want to include that in the assembly, do I.</p>

<p>I guess it would be ok, if I just signed the string. But how?</p>

<p>I'm a bit at a loss how to start this. Does anybody have a code snippet?</p>

<p>Also, encrypting / signing of the small string would ideally happen in PHP, since I want to offload that to a web server and all we have so far is your generic PHP/MySQL hosted website.</p>

<p><strong>Use Case</strong>: I'm trying to come up with a lightweight licensing scheme for a software we are about to release to beta testers. Since the software will probably be freeware, all we really want to achieve is</p>

<ol>
<li>know who has the software installed (email address)</li>
<li>let the software expire after a given period, after which the user will have to get a new license

<ul>
<li>this is as easy as filling out a form and waiting for an automated email with the key to arrive</li>
<li>we are trying to reduce the likelyhood of old versions coming back to bite our reputation / haunt us</li>
</ul></li>
</ol>

<p>Being able to encrypt a tuple (expiry date, fingerprint) and decrypt that at startup would make an easy licensing module: The first time the application is started, the user is asked for email address, name, organisation. This information is posted to the webserver along with an md5 fingerprint of some system info (nic, computer name, assembly major and minor version). The webserver answers by email (checks validity of email address) with an encrypted version of the tuple (expiry date, fingerprint) that is then saved to disk. On startup, this can be decrypted and compared with current date and regenerated fingerprint.</p>

<p><em>EDIT</em>: OK, so I don't have all the answers to my question yet. But it looks like .NET won't make it easy to use the private key for encryption (if that is at all possible, the answers don't really agree on that).</p>

<p>The route I will take is this (based on my use case):</p>

<ul>
<li>I will use the private key to sign the license.</li>
<li>I will use the public key to verify the license was signed by the private key</li>
<li>I will post another question aimed at PHP devs on how to use the .NET keys (produced by <code>sn.exe</code>) to sign some text</li>
<li>I am not really worried about the user seeing the license, as it is a hash anyway and computed from stuff he allready knows. All I want is to make it too hard to be worth any bother for your typical building architect to copy my software without me knowing (remember, the software will be freeware - all I want is a paper trail of who has it installed...)</li>
</ul>

<p>Thank you very much for your answers. </p>
","<p>Warning! This answer is wrong but I'm going to leave it here none-the-less because the series of comments attached are, I think of sufficient interest to others to keep the answer around.  Ok it makes me look like an idiot but thats nothing new to me ;)  Vote as you wish.</p>

<p>A public key can be used to:-</p>

<ul>
<li>Encrypt something that can only be decrypted with the private key</li>
<li>Authenticate something signed with the private key</li>
</ul>

<p>It can not be used to decrypt something to encrypted by a private key.  Its for this reason that the Public/Private key system is refered to as an Asymetric system.</p>
","1613","<c#><php><rsa><encryption-asymmetric><license-key>","2","-1","7","2009-12-11 10:26:40","1847408","3","3","2260","","2009-12-07 11:05:18","2009-12-04 14:40:55",""
"1847357","Can I use the assemblies PublicKey to decrypt a string encrypted with the corresponding PrivateKey?","<p>Signing an assembly in .NET involves a public/private key pair. As far as I can tell from what I've read .NET uses the RSA algorithm and the private key to sign the assembly, checking it with the embedded public key.</p>

<p>I know how to retrieve the public key (<code>Assembly.PublicKey</code>). I was wondering, if that key could be used to decrypt a short string that contains some data encrypted with the private key.</p>

<p>The docs I've read so far (<a href=""http://msdn.microsoft.com/en-us/library/92f9ye3s.aspx#public_key"" rel=""nofollow noreferrer"">e.g.</a>) seem to imply that only the other way round is possible: That I would have to use the public key to encrypt and the private key to decrypt - but I don't really want to include that in the assembly, do I.</p>

<p>I guess it would be ok, if I just signed the string. But how?</p>

<p>I'm a bit at a loss how to start this. Does anybody have a code snippet?</p>

<p>Also, encrypting / signing of the small string would ideally happen in PHP, since I want to offload that to a web server and all we have so far is your generic PHP/MySQL hosted website.</p>

<p><strong>Use Case</strong>: I'm trying to come up with a lightweight licensing scheme for a software we are about to release to beta testers. Since the software will probably be freeware, all we really want to achieve is</p>

<ol>
<li>know who has the software installed (email address)</li>
<li>let the software expire after a given period, after which the user will have to get a new license

<ul>
<li>this is as easy as filling out a form and waiting for an automated email with the key to arrive</li>
<li>we are trying to reduce the likelyhood of old versions coming back to bite our reputation / haunt us</li>
</ul></li>
</ol>

<p>Being able to encrypt a tuple (expiry date, fingerprint) and decrypt that at startup would make an easy licensing module: The first time the application is started, the user is asked for email address, name, organisation. This information is posted to the webserver along with an md5 fingerprint of some system info (nic, computer name, assembly major and minor version). The webserver answers by email (checks validity of email address) with an encrypted version of the tuple (expiry date, fingerprint) that is then saved to disk. On startup, this can be decrypted and compared with current date and regenerated fingerprint.</p>

<p><em>EDIT</em>: OK, so I don't have all the answers to my question yet. But it looks like .NET won't make it easy to use the private key for encryption (if that is at all possible, the answers don't really agree on that).</p>

<p>The route I will take is this (based on my use case):</p>

<ul>
<li>I will use the private key to sign the license.</li>
<li>I will use the public key to verify the license was signed by the private key</li>
<li>I will post another question aimed at PHP devs on how to use the .NET keys (produced by <code>sn.exe</code>) to sign some text</li>
<li>I am not really worried about the user seeing the license, as it is a hash anyway and computed from stuff he allready knows. All I want is to make it too hard to be worth any bother for your typical building architect to copy my software without me knowing (remember, the software will be freeware - all I want is a paper trail of who has it installed...)</li>
</ul>

<p>Thank you very much for your answers. </p>
","<p>Not in .NET.</p>

<p>In many traditional public-key encryption algorithm, like RSA, you can encrypt and decrypt both ways, typically one way is called ""encryption"" and the other ""signing"", even though you actually end up with an encrypted version of something both ways.</p>

<p>However, in .NET the RSA implementation has been crippled, and when signing will only produce digests of the input, not the full processed information.</p>

<p>It seems there's some disagreement about what can and cannot be done with RSA, so let me edit my answer to be more specific.</p>

<p>I'm talking about RSA math, not any particular RSA implementation.</p>

<p>RSA math allows you to encode information either of the two keys (private or public), and the encoded data can only be decoded with the other of the two keys.</p>

<p>Typically, you encode with a public key, encrypting the information, and decode it with the private key, decrypting the information. Or, you take a hash of the information, encode it with the private key, signing the hash, and decode the hash with the public key, in order to compare and verify the signature.</p>

<p>Typical implementations does not allow one to do full encoding of data from private to public, only by hashing the data, but <em>the math behind RSA fully allows this</em>.</p>
","1613","<c#><php><rsa><encryption-asymmetric><license-key>","2","0","7","2009-12-11 10:26:40","1847408","3","3","2260","","2009-12-07 11:05:18","2009-12-04 14:40:55",""
"1847357","Can I use the assemblies PublicKey to decrypt a string encrypted with the corresponding PrivateKey?","<p>Signing an assembly in .NET involves a public/private key pair. As far as I can tell from what I've read .NET uses the RSA algorithm and the private key to sign the assembly, checking it with the embedded public key.</p>

<p>I know how to retrieve the public key (<code>Assembly.PublicKey</code>). I was wondering, if that key could be used to decrypt a short string that contains some data encrypted with the private key.</p>

<p>The docs I've read so far (<a href=""http://msdn.microsoft.com/en-us/library/92f9ye3s.aspx#public_key"" rel=""nofollow noreferrer"">e.g.</a>) seem to imply that only the other way round is possible: That I would have to use the public key to encrypt and the private key to decrypt - but I don't really want to include that in the assembly, do I.</p>

<p>I guess it would be ok, if I just signed the string. But how?</p>

<p>I'm a bit at a loss how to start this. Does anybody have a code snippet?</p>

<p>Also, encrypting / signing of the small string would ideally happen in PHP, since I want to offload that to a web server and all we have so far is your generic PHP/MySQL hosted website.</p>

<p><strong>Use Case</strong>: I'm trying to come up with a lightweight licensing scheme for a software we are about to release to beta testers. Since the software will probably be freeware, all we really want to achieve is</p>

<ol>
<li>know who has the software installed (email address)</li>
<li>let the software expire after a given period, after which the user will have to get a new license

<ul>
<li>this is as easy as filling out a form and waiting for an automated email with the key to arrive</li>
<li>we are trying to reduce the likelyhood of old versions coming back to bite our reputation / haunt us</li>
</ul></li>
</ol>

<p>Being able to encrypt a tuple (expiry date, fingerprint) and decrypt that at startup would make an easy licensing module: The first time the application is started, the user is asked for email address, name, organisation. This information is posted to the webserver along with an md5 fingerprint of some system info (nic, computer name, assembly major and minor version). The webserver answers by email (checks validity of email address) with an encrypted version of the tuple (expiry date, fingerprint) that is then saved to disk. On startup, this can be decrypted and compared with current date and regenerated fingerprint.</p>

<p><em>EDIT</em>: OK, so I don't have all the answers to my question yet. But it looks like .NET won't make it easy to use the private key for encryption (if that is at all possible, the answers don't really agree on that).</p>

<p>The route I will take is this (based on my use case):</p>

<ul>
<li>I will use the private key to sign the license.</li>
<li>I will use the public key to verify the license was signed by the private key</li>
<li>I will post another question aimed at PHP devs on how to use the .NET keys (produced by <code>sn.exe</code>) to sign some text</li>
<li>I am not really worried about the user seeing the license, as it is a hash anyway and computed from stuff he allready knows. All I want is to make it too hard to be worth any bother for your typical building architect to copy my software without me knowing (remember, the software will be freeware - all I want is a paper trail of who has it installed...)</li>
</ul>

<p>Thank you very much for your answers. </p>
","<p>In RSA the only actual difference between a public key and a private key is which one you keep secret. </p>

<p>So you can use a public key as the encryption key and decrypt with the private key, or use the private key as the encryption key and decrypt with the public key.</p>

<p>Encrypting with the private key is used for digital signatures (anybody can decode with the public key).</p>

<p>But as @Lasse V. Karlsen pointed out, .Net might make it more difficult than it should be...</p>
","1613","<c#><php><rsa><encryption-asymmetric><license-key>","2","0","7","2009-12-11 10:26:40","1847408","3","3","2260","","2009-12-07 11:05:18","2009-12-04 14:40:55",""
"1847357","Can I use the assemblies PublicKey to decrypt a string encrypted with the corresponding PrivateKey?","<p>Signing an assembly in .NET involves a public/private key pair. As far as I can tell from what I've read .NET uses the RSA algorithm and the private key to sign the assembly, checking it with the embedded public key.</p>

<p>I know how to retrieve the public key (<code>Assembly.PublicKey</code>). I was wondering, if that key could be used to decrypt a short string that contains some data encrypted with the private key.</p>

<p>The docs I've read so far (<a href=""http://msdn.microsoft.com/en-us/library/92f9ye3s.aspx#public_key"" rel=""nofollow noreferrer"">e.g.</a>) seem to imply that only the other way round is possible: That I would have to use the public key to encrypt and the private key to decrypt - but I don't really want to include that in the assembly, do I.</p>

<p>I guess it would be ok, if I just signed the string. But how?</p>

<p>I'm a bit at a loss how to start this. Does anybody have a code snippet?</p>

<p>Also, encrypting / signing of the small string would ideally happen in PHP, since I want to offload that to a web server and all we have so far is your generic PHP/MySQL hosted website.</p>

<p><strong>Use Case</strong>: I'm trying to come up with a lightweight licensing scheme for a software we are about to release to beta testers. Since the software will probably be freeware, all we really want to achieve is</p>

<ol>
<li>know who has the software installed (email address)</li>
<li>let the software expire after a given period, after which the user will have to get a new license

<ul>
<li>this is as easy as filling out a form and waiting for an automated email with the key to arrive</li>
<li>we are trying to reduce the likelyhood of old versions coming back to bite our reputation / haunt us</li>
</ul></li>
</ol>

<p>Being able to encrypt a tuple (expiry date, fingerprint) and decrypt that at startup would make an easy licensing module: The first time the application is started, the user is asked for email address, name, organisation. This information is posted to the webserver along with an md5 fingerprint of some system info (nic, computer name, assembly major and minor version). The webserver answers by email (checks validity of email address) with an encrypted version of the tuple (expiry date, fingerprint) that is then saved to disk. On startup, this can be decrypted and compared with current date and regenerated fingerprint.</p>

<p><em>EDIT</em>: OK, so I don't have all the answers to my question yet. But it looks like .NET won't make it easy to use the private key for encryption (if that is at all possible, the answers don't really agree on that).</p>

<p>The route I will take is this (based on my use case):</p>

<ul>
<li>I will use the private key to sign the license.</li>
<li>I will use the public key to verify the license was signed by the private key</li>
<li>I will post another question aimed at PHP devs on how to use the .NET keys (produced by <code>sn.exe</code>) to sign some text</li>
<li>I am not really worried about the user seeing the license, as it is a hash anyway and computed from stuff he allready knows. All I want is to make it too hard to be worth any bother for your typical building architect to copy my software without me knowing (remember, the software will be freeware - all I want is a paper trail of who has it installed...)</li>
</ul>

<p>Thank you very much for your answers. </p>
","<p>I think both direction are possible encrypt with public and decrypt with private and encrypt with private key. The second is the way how digital signature works.</p>
","1613","<c#><php><rsa><encryption-asymmetric><license-key>","2","-1","7","2009-12-11 10:26:40","1847408","3","3","2260","","2009-12-07 11:05:18","2009-12-04 14:40:55",""
"1847357","Can I use the assemblies PublicKey to decrypt a string encrypted with the corresponding PrivateKey?","<p>Signing an assembly in .NET involves a public/private key pair. As far as I can tell from what I've read .NET uses the RSA algorithm and the private key to sign the assembly, checking it with the embedded public key.</p>

<p>I know how to retrieve the public key (<code>Assembly.PublicKey</code>). I was wondering, if that key could be used to decrypt a short string that contains some data encrypted with the private key.</p>

<p>The docs I've read so far (<a href=""http://msdn.microsoft.com/en-us/library/92f9ye3s.aspx#public_key"" rel=""nofollow noreferrer"">e.g.</a>) seem to imply that only the other way round is possible: That I would have to use the public key to encrypt and the private key to decrypt - but I don't really want to include that in the assembly, do I.</p>

<p>I guess it would be ok, if I just signed the string. But how?</p>

<p>I'm a bit at a loss how to start this. Does anybody have a code snippet?</p>

<p>Also, encrypting / signing of the small string would ideally happen in PHP, since I want to offload that to a web server and all we have so far is your generic PHP/MySQL hosted website.</p>

<p><strong>Use Case</strong>: I'm trying to come up with a lightweight licensing scheme for a software we are about to release to beta testers. Since the software will probably be freeware, all we really want to achieve is</p>

<ol>
<li>know who has the software installed (email address)</li>
<li>let the software expire after a given period, after which the user will have to get a new license

<ul>
<li>this is as easy as filling out a form and waiting for an automated email with the key to arrive</li>
<li>we are trying to reduce the likelyhood of old versions coming back to bite our reputation / haunt us</li>
</ul></li>
</ol>

<p>Being able to encrypt a tuple (expiry date, fingerprint) and decrypt that at startup would make an easy licensing module: The first time the application is started, the user is asked for email address, name, organisation. This information is posted to the webserver along with an md5 fingerprint of some system info (nic, computer name, assembly major and minor version). The webserver answers by email (checks validity of email address) with an encrypted version of the tuple (expiry date, fingerprint) that is then saved to disk. On startup, this can be decrypted and compared with current date and regenerated fingerprint.</p>

<p><em>EDIT</em>: OK, so I don't have all the answers to my question yet. But it looks like .NET won't make it easy to use the private key for encryption (if that is at all possible, the answers don't really agree on that).</p>

<p>The route I will take is this (based on my use case):</p>

<ul>
<li>I will use the private key to sign the license.</li>
<li>I will use the public key to verify the license was signed by the private key</li>
<li>I will post another question aimed at PHP devs on how to use the .NET keys (produced by <code>sn.exe</code>) to sign some text</li>
<li>I am not really worried about the user seeing the license, as it is a hash anyway and computed from stuff he allready knows. All I want is to make it too hard to be worth any bother for your typical building architect to copy my software without me knowing (remember, the software will be freeware - all I want is a paper trail of who has it installed...)</li>
</ul>

<p>Thank you very much for your answers. </p>
","<p>This can be done using SignedXml <a href=""http://msdn.microsoft.com/en-us/library/ms229745.aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/en-us/library/ms229745.aspx</a>. At a lower level you can prob use RSAPKCS1SignatureDeformatter and RSAPKCS1SignatureFormatter. These work by encrypting a hash of the data then comparing the data with the (decrypted) hash the other end. I believe the hashing is used because private key encryption can only handle small data. Not sure about reusing the assembly public key, if it is causing problems just use a separate key pair.</p>

<p>Word of warning, check out this as these classes can result in 20 second hang ups! <a href=""http://www.pcreview.co.uk/forums/thread-3428177.php"" rel=""nofollow noreferrer"">http://www.pcreview.co.uk/forums/thread-3428177.php</a></p>

<p>This approach is vulnerable to the signature verification code being tampered with using Reflexil but that is another matter.</p>

<p>I wrote the following but rereading I think you already got this: You aren't really trying to encrypt or hide data from the user, you want to stop them from creating or tampering the license. You are right that a public private key encryption algorithm can be used for this. This is known as <em>Signing</em> using a private key (server side license generation). And verification of the signature using a public key (license checking in the app). I mention this terminology as it'll help with research.</p>
","1613","<c#><php><rsa><encryption-asymmetric><license-key>","2","1","7","2009-12-11 10:26:40","1847408","3","3","2260","","2009-12-07 11:05:18","2009-12-04 14:40:55",""
"29949338","Encryption between desktop app and server - C# to PHP","<p>I have an app which is designed in C#. In simple terms the app sends data and image to my web server which takes all the $_POST data and processes it. I will confess i do not understand how the security end of things work. I will employ someone with relevant experience to do that however i wouldn't even know what to ask them at this point as in what are some accepted techniques.</p>

<p>I assume its not as simple as just base64 encode/decode the data and it needs a higher level of encryption. The webserver will have HTTPS SSL(OV) certification over the next few weeks but my limited understanding is that i still need some sort of protection/encryption when transferring the data from the users PC to my web server so someone is not listening in on the data transfer or something like that.</p>

<p>In simple terms if i want to keep the data secure between users and my webserver what are some of the most common or accepted methods for C# to PHP?</p>

<p>The data goes directly from the app on the users PC to my server, i control source code for both but i myself and not the developer hence my lack of technical knowledge on the issue.</p>

<p>One C# developer i talked with suggested symmetric/asymmetric algorithm but he is not a PHP developer so he doesn't know if php can take that data and decrypt it.</p>
","<p>It seems you are concerned with the security of the data while being transferred from the client app to the server, and vice versa. As has been mentioned in the comments, an HTTPS connection will be sufficient in this regard. It automatically performs encryption/decryption for you.</p>

<p>To get an HTTPS connection working, you would purchase an SSL certificate (<a href=""https://www.namecheap.com/security/ssl-certificates.aspx"" rel=""nofollow noreferrer"">Namecheap</a> is one website where you can buy one) and install it on your web server. The certificate is automatically installed on a user's local machine the first time he/she connects to the server, and each subsequent connection performs a check for a valid certificate. So basically, you just install the certificate on the server and don't have to worry about it until you have to renew your certificate. Just make sure that your client app attempts to connect to an HTTPS address instead of an HTTP.</p>

<p>If you were to implement symmetric/asymmetric encryption, it would help with encryption and decryption before and after the data is transferred. If you encrypt the data in your client app, you will have to decrypt it on the server side when you receive it, and vice versa. This would provide you with even stronger security; however, depending on the nature of your app, an HTTPS connection may be enough.</p>

<p>One of my personal projects is a client C# app that connects to a Ruby web server, which I also wrote. I installed an SSL certificate on my Ruby web server so that data is encrypted while in transit. In my case, the data being transferred does not contain any user data or PII (Personally Identifiable Information) and therefore does not pose a security risk if an external party gains access to this information. As such, I felt using encryption before and after transit was not worthwhile nor would provide any benefit to the end user. Again, this depends on the nature of your app and your users' expectations.</p>

<p>EDIT:</p>

<p>As <a href=""https://stackoverflow.com/users/2058898/mine"">mine</a> mentioned in the comments, <a href=""http://www.startssl.com"" rel=""nofollow noreferrer"">StartSSL</a> offers free SSL certificates.</p>
","1613","<c#><php><encryption-symmetric><encryption-asymmetric>","15","11","2","2015-05-07 19:36:06","30109798","6","","","","","2015-04-29 16:21:41",""
"29949338","Encryption between desktop app and server - C# to PHP","<p>I have an app which is designed in C#. In simple terms the app sends data and image to my web server which takes all the $_POST data and processes it. I will confess i do not understand how the security end of things work. I will employ someone with relevant experience to do that however i wouldn't even know what to ask them at this point as in what are some accepted techniques.</p>

<p>I assume its not as simple as just base64 encode/decode the data and it needs a higher level of encryption. The webserver will have HTTPS SSL(OV) certification over the next few weeks but my limited understanding is that i still need some sort of protection/encryption when transferring the data from the users PC to my web server so someone is not listening in on the data transfer or something like that.</p>

<p>In simple terms if i want to keep the data secure between users and my webserver what are some of the most common or accepted methods for C# to PHP?</p>

<p>The data goes directly from the app on the users PC to my server, i control source code for both but i myself and not the developer hence my lack of technical knowledge on the issue.</p>

<p>One C# developer i talked with suggested symmetric/asymmetric algorithm but he is not a PHP developer so he doesn't know if php can take that data and decrypt it.</p>
","<p>To answer your further questions, when a server is issued and properly configured with a good cert, you shouldn't need to do anything more.</p>

<h2>Using HTTPS</h2>

<p>HTTPS works by verifying SSL certifications with a Certificate Authority (CA) during an initial handshake. Certificate Authorities, which is essentially a list of signatures that are used to verify said certs, usually come preloaded by an OS vendor.</p>

<p>Assuming your server has a CA issued certificate, all you will be required to do is change from using HTTP to HTTPS when making the connection. The library you're using should have a method of verifying the servers SSL cert, if it doesn't automatically do this for you.</p>

<p>There is no technical reason that you should have to encrypt anything that will being sent over HTTPS, so long as the certificate is strongly encrypted.</p>

<p>Also, if you would like to dig deeper into the nitty-gritty details of how HTTPS works, there's <a href=""https://security.stackexchange.com/questions/20803/how-does-ssl-tls-work"">this very good post</a> over on Information Security that sheds a little light on the inner workings of the protocol.</p>

<h2>To answer your original question</h2>

<p>For the sake of completeness.</p>

<p>PHP has the cryptography extension <a href=""http://php.net/manual/en/book.mcrypt.php"" rel=""nofollow noreferrer"">mcrypt</a> which supports various algorithms and cipher operation modes. I've put together a simple example using AES 256 / PBKDF-SHA1 key decryption (along with the C# code to perform the encryption).</p>

<p>EDIT: I'd like to point out that <a href=""http://php.net/manual/en/function.hash-pbkdf2.php"" rel=""nofollow noreferrer"">hash_pbkdf2</a> is only available in PHP 5.5 and up. Support down to 5.3 can be added with <a href=""http://php.net/manual/en/function.hash-pbkdf2.php#113488"" rel=""nofollow noreferrer"">this nifty trick</a>.</p>

<p><strong>PHP</strong></p>

<pre><code>function decode_aes($data, $key) // Decrypt custom format data string
{
    $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
    $salt_size = 16;

    $iv = substr($data, 0, $iv_size); // Init vector
    $salt = substr($data, $iv_size, $salt_size); // The salt
    $extact = substr($data, $iv_size + $salt_size); // This is the encrypted data

    $key = hash_pbkdf2(""sha1"", $key, $salt, 1000, 32, true); // Sets to use PBKDF-SHA1

    return mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $extact, MCRYPT_MODE_CBC, $iv); // Perform the decryption with the extracted sections
}

// As an example, I've included this.
$encryped = ""zgCp2sSDs32Y8SOn8MYFCEjOJDeM4E3Y8Wx52A+iTFRk/1TJwMzkqmrB06bFu8dK"";
echo decode_aes(base64_decode($encryped), ""password"");
</code></pre>

<p><strong>C#</strong></p>

<pre><code>using System;
using System.Text;
using System.Security.Cryptography;
using System.IO;

namespace AESExample
{
    class Program
    {
        static void Main(string[] args)
        {
            byte[] toEncrypt = Encoding.UTF8.GetBytes(""Encrypted Text"");
            byte[] key = Encoding.UTF8.GetBytes(""password"");
            String encrypted = Convert.ToBase64String(EncryptAES(toEncrypt, key));
        }

        public static byte[] EncryptAES(byte[] data, byte[] key)
        {
            using(RijndaelManaged algo = new RijndaelManaged())
            {
                algo.GenerateIV();
                algo.Mode = CipherMode.CBC;
                algo.Padding = PaddingMode.Zeros;

                byte[] saltBuffer = new byte[16];
                RNGCryptoServiceProvider saltGenerator = new RNGCryptoServiceProvider();
                saltGenerator.GetBytes(saltBuffer);

                Rfc2898DeriveBytes PBKDF2 = new Rfc2898DeriveBytes(key, saltBuffer, 1000);
                key = PBKDF2.GetBytes(32);

                ICryptoTransform cipher = algo.CreateEncryptor(key, algo.IV);

                using(MemoryStream ms = new MemoryStream())
                {
                    ms.Write(algo.IV, 0, algo.IV.Length);
                    ms.Write(saltBuffer, 0, saltBuffer.Length);
                    using(CryptoStream cs = new CryptoStream(ms, cipher, CryptoStreamMode.Write))
                    {
                        using(StreamWriter sw = new StreamWriter(cs))
                        {
                            sw.Write(Encoding.UTF8.GetString(data).ToCharArray());
                        }
                    }
                    return ms.ToArray();
                }
            }
        }
    }
}
</code></pre>
","1613","<c#><php><encryption-symmetric><encryption-asymmetric>","15","4","2","2015-05-07 19:36:06","30109798","6","","","","","2015-04-29 16:21:41",""
"13588039","How can I use RSA to Encrypt/Decrypt ASP.Net Forms Authentication Ticket","<p>Istead of using FormsAuthentication.Encrypt / FormsAuthentication.Decrypt, is it possible to use an existing RSA container in the machine key store to do the encryption/decryption of the ticket. </p>

<p>The reason is that the ASP.Net application I'm developing is meant to be used in multiple load balanced servers. Hence I need to copy the machine key onto all web.config files in all the machines. Since we are already using Asymmetric Encryption (RSA) for another purpose, we have automated installing a common RSA key container in all the servers via a bat file and key container xml. Since this mechanism is in place I want to use the same RSA key container to encrypt/decrypt the forms auth ticket too.</p>

<ol>
<li>Is this possible? If so how do I override the existing behaviour to achieve this.</li>
<li>If its possible then do you see any disadvantages of using RSA instead of the standard encryption?</li>
</ol>
","<p>Yes, but it would require some work.</p>

<p>You will need to override/replace the standard authentication module that ships with .NET and replicate all the existing functionality with the exception of calls to the RSA Encrypt/Decrypt methods you want to use instead.</p>

<p>See <a href=""http://msdn.microsoft.com/en-us/library/system.web.security.formsauthentication.encrypt.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/system.web.security.formsauthentication.encrypt.aspx</a></p>

<p>You will also need to edit all the standard builtin login pages if you are using those.</p>

<p>As a template, inspect the source for the FormsAuthenticationTicket and you will see how the string is constructed that contains parameters such as UserID, Expiry Date etc, and then pass that string into the Encrypt method, which in turn is then used as the cookie value.</p>

<p>Your new auth module will then have to reverse that encryption and validate the user as before.</p>

<p>It's a fair amount of work for relatively little gain, depends on how badly you want to use RSA over the standard encryption methods used (they already offer some powerful encruyption methods right out the box see <a href=""http://www.sourcetree.net/sourcetree/Development/Aspnet%20Examples/GenerateMachineKeyForWebConfig.aspx"" rel=""nofollow"">http://www.sourcetree.net/sourcetree/Development/Aspnet%20Examples/GenerateMachineKeyForWebConfig.aspx</a>)</p>
","1597","<asp.net><forms-authentication><rsa><encryption-asymmetric>","2","0","1","2012-11-30 14:59:27","13647637","0","0","","","","2012-11-27 15:56:35",""
"2803364","SQL Encryption - Asymmetric Key - 2nd Server","<p>I created an asymmetric key on one of my SQL servers (2008). I encrypted a password field and I am able to retrieve that password just fine on my development server.</p>

<p>The issue comes into play where I need to move this data to a production server. </p>

<p>Here is the code for the key that was created:</p>

<pre><code>CREATE MASTER KEY ENCRYPTION BY PASSWORD='#########'
CREATE ASYMMETRIC KEY UserEncryptionKey
WITH ALGORITHM = RSA_2048
</code></pre>

<p>Now, when I run this on the production server, it creates the key just fine. However, when I run my sproc to get the password, it returns NULL.</p>

<p>SQL:</p>

<pre><code>    SELECT EncryptByAsymKey(AsymKey_ID('UserEncryptionKey'), Password ) 
    FROM Users WHERE UserName = '######'
</code></pre>

<p>Any thoughts on what I need to do to get the encrypted field to work on multiple SQL Servers?</p>

<p>Please let me know if I need to clarify something.</p>

<p>Thanks</p>
","<p>Do not move encrypted data from a database to another. Technically is possible, true, but you will likely compromise the key in the process so I rather not tell you how to do it.</p>

<p>When data is exchanged between sites, the usual procedure separates the key management and deployment from data transfer. Data is decrypted before transfer and dedicate encryption schemes for data transfer are used, like TLS and SSL, that eliminate the problem of deploying and sharing the actual encryption keys.</p>

<p>Asa side note, normally one does no encrypt data with asymmetric keys. They are way too slow for data operations. What everybody does is they encrypt data with a symmetric key and then encrypt the symmetric key with an asymmetric key.</p>
","1581","<sql-server-2008><encryption-asymmetric>","0","0","1","2010-05-10 23:30:41","2807134","0","","","","","2010-05-10 14:26:18",""
"7023163","RSA encryption library or Classes","<p>I want to implement RSA encrytion/decryption in my App.I googled around the net to find any Library or Classes which perform the RSA encryption/decryption algorithm,but was not able to find any suitable link.I know i can use the SecKeyGeneratePair provided by Apple to generate the private public key pair.But it is a necessity for me to use the RSA algorithm as i want to implement it over client-server network.So the Algorithm needs to common amongst the parties.</p>

<p>Please provide some valuable info.</p>

<p>Thanks</p>

<p>Aditya</p>
","<p>Isn't that what <code>SecKeyEncrypt</code> and <code>SecKeyDecrypt</code> functions do?</p>

<p>The functions <a href=""http://developer.apple.com/library/ios/documentation/Security/Reference/certifkeytrustservices/Reference/reference.html#//apple_ref/c/func/SecKeyEncrypt"" rel=""nofollow"">SecKeyEncrypt</a> and <a href=""http://developer.apple.com/library/ios/documentation/Security/Reference/certifkeytrustservices/Reference/reference.html#//apple_ref/c/func/SecKeyDecrypt"" rel=""nofollow"">SecKeyDecrypt</a> uses the RSA keys you got from <code>SecKeyGeneratePair</code>.</p>
","1574","<iphone><encryption><rsa><encryption-asymmetric>","3","4","1","2011-08-13 11:33:15","7048714","2","","","","","2011-08-11 08:48:20",""
"8557410","asymmetric encryption using AES for iPhone","<p>Team,</p>

<p>I would like to have asymmetric encryption using AES algorithm for iPhone application using Objective C. 
I have widely seen symmetric encryption using AES, so im not sure about the support for asymmetric encryption with AES. Kindly suggest me on this. </p>
","<p>AES is a symmetric cipher. It can't simply be used an an asymmetric (i.e., public-key) capacity.</p>

<p>I am guessing the reason for your question is the issue of key exchange - such that you can establish an AES-encrypted connection without having to rely on a pre-shared key.</p>

<p>Numerous valid approaches exist, but I'll just hit on two:</p>

<ol>
<li><p>Take a look at or Diffie-Hellman. You can get both sides of a connection to agree on a key without actually having to exchange that key. <a href=""http://en.wikipedia.org/wiki/Diffie"" rel=""nofollow"">http://en.wikipedia.org/wiki/Diffie</a>–Hellman_key_exchange</p></li>
<li><p>RSA. I'm a fan of Botan. It's free. It works. You can generate public/private key pairs on both sides, exchange the public keys, then securely exchange private keys, and then start AES. <a href=""http://botan.randombit.net/pubkey.html"" rel=""nofollow"">http://botan.randombit.net/pubkey.html</a></p></li>
</ol>

<p>As always, this advice needs to be accompanied with a warning: it's very easy to do this incorrectly and largely (or entirely) thwart your security efforts. Tread carefully.</p>
","1518","<objective-c><ios4><aes><encryption-asymmetric>","2","3","1","2011-12-31 04:42:02","","1","1","","","","2011-12-19 05:22:34",""
"11548337","How can I asymmetrically encrypt data using OpenPGP with Ruby?","<p>This feels like it should be dead simple, yet I'm not having any luck.</p>

<p>The scenario is this: I have a public *.asc key file. I want to use <em>this file</em> (not my personal keyring) to encrypt data on a server, so that I can decrypt it locally with a secret key.</p>

<p>From the command line I can achieve this using <code>gpg</code>, but I'd prefer to use a Ruby library that isn't just a wrapper around the CLI (i.e., presumably one that provides bindings to the C library). I've looked at the GPGME and OpenPGP gems and haven't been able to figure out how to use them. The documentation (especially for OpenPGP) is quite sparse.</p>

<p>Here, for example, is something I've tried using GPGME, without any luck:</p>

<pre><code>key = GPGME::Data.new(File.open(path_to_file))
data = GPGME::Data.new(""I want to encrypt this string."")

# Raises GPGME::Error::InvalidValue
GPGME::Ctx.new do |ctx|
  e = ctx.encrypt(key, data)
end
</code></pre>

<p>Has anyone been through this already? Surely this can't be that complicated?</p>
","<p>I <em>believe</em> I've now got this figured out. It was actually just a few simple pieces I was missing:</p>

<ol>
<li>Initializing the <code>GPGME::Ctx</code> object with a <code>keylist_mode</code> of <code>GPGME::KEYLIST_MODE_EXTERN</code>.</li>
<li>Importing the public key file using <code>GPGME::Ctx#import</code>.</li>
<li>Using <code>GPGME::Crypto#encrypt</code> to perform the encryption and specifying the correct recipient.</li>
</ol>

<p>So my solution now looks like this:</p>

<pre><code>key = GPGME::Data.new(File.open(path_to_file))
data = GPGME::Data.new(""I want to encrypt this string."")

GPGME::Ctx.new(GPGME::KEYLIST_MODE_EXTERN) do |ctx|
  ctx.import(key)
  crypto = GPGME::Crypto.new(:armor =&gt; true, :always_trust =&gt; true)
  e = crypto.encrypt(data, :recipients =&gt; ""recipient@domain.com"")
end
</code></pre>
","1515","<ruby><encryption><gnupg><encryption-asymmetric><openpgp>","3","2","1","2012-09-10 16:25:15","11549323","2","1","105570","","2012-07-18 18:56:42","2012-07-18 18:51:04",""
"23859641","Implementing Hybrid Encryption?","<p>I already have an asymmetric algorithm implemented in an MVC C# Application, however I would like to modify the encryption method so that I make use of both symmetric and asymmetric encryption (AKA Hybrid encryption). Any idea how I can do this?</p>

<p>Asymmetric encrypt:</p>

<pre><code>public string AsymmEncrypt(int accId, string input, string publickey)
    {
        Account a = new UserRepository().GetAccountById(accId);
        RSACryptoServiceProvider myAlg = new RSACryptoServiceProvider();
        CspParameters cspParams = new CspParameters();
        publickey = new UserRepository().PublicKeyByAccountId(accId);
        cspParams.KeyContainerName = publickey;
        myAlg = new RSACryptoServiceProvider(cspParams);

        byte[] cipher = myAlg.Encrypt(UTF8Encoding.UTF8.GetBytes(input), true);
        return Convert.ToBase64String(cipher);
    }
</code></pre>

<p>Asymmetric decrypt:</p>

<pre><code>        public string AsymmDecrypt(int accId, string input, string privatekey)
    {
        Account a = new UserRepository().GetAccountById(accId);
        RSACryptoServiceProvider myAlg = new RSACryptoServiceProvider();
        CspParameters cspParams = new CspParameters();
        privatekey = new UserRepository().PrivateKeyByAccountId(accId);

        byte[] cipher = myAlg.Decrypt(Convert.FromBase64String(input), true);
        return UTF8Encoding.UTF8.GetString(cipher);
    }
</code></pre>
","<p>You should probably not try to reinvent the wheel here.  The System.Security.Cryptography namespace in .net alrady provides a large array of cryptography functionality that is quite well vetted.  Don't try to use your own Asymmetric functions to accomplish this.</p>

<p>If you want to do private key distribution through public key encryption, you should use something like <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsapkcs1keyexchangeformatter.aspx"" rel=""nofollow"">RSAPKCS1KeyExchangeFormatter</a> or maybe even <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsaoaepkeyexchangeformatter.aspx"" rel=""nofollow"">RSAOAEPKeyExchangeFormatter</a> if you have the flexibility to support PKCS#1v2</p>
","1506","<c#><asp.net><encryption-symmetric><encryption-asymmetric><hybrid>","1","0","2","2014-05-25 21:47:39","","4","","","","","2014-05-25 20:25:39",""
"23859641","Implementing Hybrid Encryption?","<p>I already have an asymmetric algorithm implemented in an MVC C# Application, however I would like to modify the encryption method so that I make use of both symmetric and asymmetric encryption (AKA Hybrid encryption). Any idea how I can do this?</p>

<p>Asymmetric encrypt:</p>

<pre><code>public string AsymmEncrypt(int accId, string input, string publickey)
    {
        Account a = new UserRepository().GetAccountById(accId);
        RSACryptoServiceProvider myAlg = new RSACryptoServiceProvider();
        CspParameters cspParams = new CspParameters();
        publickey = new UserRepository().PublicKeyByAccountId(accId);
        cspParams.KeyContainerName = publickey;
        myAlg = new RSACryptoServiceProvider(cspParams);

        byte[] cipher = myAlg.Encrypt(UTF8Encoding.UTF8.GetBytes(input), true);
        return Convert.ToBase64String(cipher);
    }
</code></pre>

<p>Asymmetric decrypt:</p>

<pre><code>        public string AsymmDecrypt(int accId, string input, string privatekey)
    {
        Account a = new UserRepository().GetAccountById(accId);
        RSACryptoServiceProvider myAlg = new RSACryptoServiceProvider();
        CspParameters cspParams = new CspParameters();
        privatekey = new UserRepository().PrivateKeyByAccountId(accId);

        byte[] cipher = myAlg.Decrypt(Convert.FromBase64String(input), true);
        return UTF8Encoding.UTF8.GetString(cipher);
    }
</code></pre>
","<p>I would suggest reading how SSL or OpenPGP are implemented.</p>

<p>I'm not sure what part you are struggling with.</p>

<p>In short, the asymmetric algorithm is used for symmetric key exchange.</p>

<p>The symmetric algorithm is used for the bulk data (stream/block) crypto. You won't get it done with simply modifying your 2 functions, you will need to implement a handshake and key exchange.</p>

<p>Since you have an MVC.NET app, you can host it within a web server and gain HTTPS/SSL transport. You can also do the same with WCF. Any reason why aren't using what is provided by the underlying transport? You can even configure your application (web.config) to require client certificates.</p>

<p>PS: I agree about not re-inventing the wheel, even Microsoft's article that Erik linked to provides a warning about it.</p>

<blockquote>
  <p>Caution We recommend that you do not attempt to create your own key exchange method from the basic functionality provided, because many details of the operation must be performed carefully in order for the key exchange to be successful.</p>
</blockquote>
","1506","<c#><asp.net><encryption-symmetric><encryption-asymmetric><hybrid>","1","0","2","2014-05-25 21:47:39","","4","","","","","2014-05-25 20:25:39",""
"15203788","Create asymmetric key from a passphrase","<p>I want to allow users on my site to create an asymmetric private &amp; public key so they can:</p>

<ul>
<li>upload the public key to the site so my web application can encrypt
files they upload </li>
<li>download files and decrypt them using a local
application and the private key</li>
</ul>

<p>My issue is that if the users machine dies then they will most likely loose their private key.</p>

<p>My concept is that the application the users download to pull the files from the site will also allow them to generate the keys for use on the site.</p>

<p>So my question is, Is it possible to create an asymmetric private/public key pair based on a passphrase? This would allow the user to regenerate the private key if required.</p>
","<p>What the fields are for your algorithm (e.g. RSA <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsaparameters.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsaparameters.aspx</a>) are more or less up to you.  You could easily create an algorithm to generate D and P from some string (calculating the other RSA fields from those).  I'd really recommend you wouldn't pick one from an answer on StackOverflow though (that would simply give someone who wanted to get at your data something easy to try).</p>

<p>The reason algorithms like RSA are hard to break is the amount of effort that goes into reverse engineering the private/public key based on the encrypted data.  If you introduce a ""shortcut"" like a reproducible generation algorithm based on a passphrase, the security of your system now depends on how well the passphrase is kept secret, not the encryption algorithm itself.</p>

<p>The same is true for the private key; which is why many organizations don't store the private key on hard drives and store them on secure external devices protected by a password or some biometric information.</p>

<p>I'd recommend you <em>do not</em> generate keys from a passphrase and simply use recommended practices for storing and protecting your private key.</p>
","1475","<c#><encryption-asymmetric>","2","0","2","2013-07-11 14:36:01","","2","","2057705","","2013-03-04 14:46:29","2013-03-04 14:25:50",""
"15203788","Create asymmetric key from a passphrase","<p>I want to allow users on my site to create an asymmetric private &amp; public key so they can:</p>

<ul>
<li>upload the public key to the site so my web application can encrypt
files they upload </li>
<li>download files and decrypt them using a local
application and the private key</li>
</ul>

<p>My issue is that if the users machine dies then they will most likely loose their private key.</p>

<p>My concept is that the application the users download to pull the files from the site will also allow them to generate the keys for use on the site.</p>

<p>So my question is, Is it possible to create an asymmetric private/public key pair based on a passphrase? This would allow the user to regenerate the private key if required.</p>
","<p>One way to do exactly what you are asking is:</p>

<ol>
<li>Define a security level N, the larger the more secure but slower this process will be.</li>
<li>Generate a ""salt"" and associate it with the user's id.</li>
<li>Since RSA key generation requires a secure random number generator, use the user's password and salt with PBKDF2, starting at iteration N, to generate secure random data.</li>
</ol>

<p>This process should deterministically generate a public/private RSA key pair. However, the reasons not to do this are:</p>

<ul>
<li>It was cooked up by me and, AFAIK, this post is the first time this process will be publicly vetted.</li>
<li>It is not known to me if PBKDF2 actually works as a secure random number generator for use with RSA.</li>
<li>It may or may not be true the PBKDF2 is guaranteed to generate a data from which a public/private RSA key pair will originate.</li>
<li>In practice, while this does work, it takes a very long time and the time it takes is based on the user's password, which is a user experience and security exposure point that needs considered.</li>
</ul>

<p>A better way to accomplish what you are trying to do is:</p>

<ol>
<li>Define a security level N, the larger the more secure but slower this process will be.</li>
<li>Generate a ""salt"" and associate it with the user's id.</li>
<li>Generate an RSA public / private key pair.</li>
<li>Iterate PBKDF2 N times to create a symmetric key based on the user's password and salt.</li>
<li>Use a symmetric encryption algorithm to encrypt the private key.</li>
<li>Upload the unencrypted public key and encrypted private key to the server.</li>
</ol>

<p>This is better because:</p>

<ul>
<li>All processes listed above are, AFAIK, standard and vetted.</li>
<li>Generation of public / private keys (time consuming) only occurs once while setting up the user's account.</li>
<li>Accessing the keys always occurs in a fixed amount of time.</li>
</ul>

<p>This solves your problem:</p>

<ul>
<li>Since the server only has the encrypted private key it cannot decrypt the user's data.</li>
<li>If the client machine dies the server can re-issue the private key.</li>
</ul>

<p>Of course there are the obvious warnings like if the user forgets their password all their data is locked until public knowledge on how to crack RSA is available or a billion years of current computing power is put to the task of breaking their password ;-) (depending on N and key size of course). Also, the salt is important to prevent dictionary attacks.</p>
","1475","<c#><encryption-asymmetric>","2","1","2","2013-07-11 14:36:01","","2","","2057705","","2013-03-04 14:46:29","2013-03-04 14:25:50",""
"5189785","ActionScript3 & Java encryption / decryption","<p>I've got a flash client that communicates with a server. The server-side code is in java. I'd like to be able to encrypt the communication, so it has to be an algorithm that has libraries for both as3 &amp; java.</p>

<p>Speed if more important than the security of the encryption, and ideally it would use asymmetric key encryption.</p>

<p>AES and Blowfish seem like they would work from what I've seen. But both use symmetric keys.</p>

<p>Any ideas?</p>
","<p>It seems like opening an HTTPS connection would be the simplest way to do this.</p>
","1467","<java><actionscript-3><encryption><encryption-asymmetric>","0","2","3","2011-03-04 06:16:08","5189818","0","","","","","2011-03-04 04:47:39",""
"5189785","ActionScript3 & Java encryption / decryption","<p>I've got a flash client that communicates with a server. The server-side code is in java. I'd like to be able to encrypt the communication, so it has to be an algorithm that has libraries for both as3 &amp; java.</p>

<p>Speed if more important than the security of the encryption, and ideally it would use asymmetric key encryption.</p>

<p>AES and Blowfish seem like they would work from what I've seen. But both use symmetric keys.</p>

<p>Any ideas?</p>
","<p><a href=""http://code.google.com/p/as3crypto/"" rel=""nofollow"">AS3Crypto</a> is a port of the popular Java/C# library <a href=""http://www.bouncycastle.org/"" rel=""nofollow"">BouncyCastle</a>.  That works just great.</p>
","1467","<java><actionscript-3><encryption><encryption-asymmetric>","0","1","3","2011-03-04 06:16:08","5189818","0","","","","","2011-03-04 04:47:39",""
"5189785","ActionScript3 & Java encryption / decryption","<p>I've got a flash client that communicates with a server. The server-side code is in java. I'd like to be able to encrypt the communication, so it has to be an algorithm that has libraries for both as3 &amp; java.</p>

<p>Speed if more important than the security of the encryption, and ideally it would use asymmetric key encryption.</p>

<p>AES and Blowfish seem like they would work from what I've seen. But both use symmetric keys.</p>

<p>Any ideas?</p>
","<p>I'm going to be working with encrypting data shortly here.  I've chosen to do it using asynchronous RSA encryption.</p>

<p>I'll be using <a href=""http://code.google.com/p/as3crypto/"" rel=""nofollow"">AS3Crypto</a>'s RSA encryption client-side with the public key.</p>

<p>Server-side I'll be using <a href=""http://download.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#Key"" rel=""nofollow"">JAVA's built-in RSA cryptography</a> to decrypt data with the private key.</p>
","1467","<java><actionscript-3><encryption><encryption-asymmetric>","0","1","3","2011-03-04 06:16:08","5189818","0","","","","","2011-03-04 04:47:39",""
"36295461","Why does my private key not work to decrypt a key encrypted by the public key?","<p>I'm trying to turn <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.x509certificate2(v=vs.110).aspx#"" rel=""nofollow"">this MSDN page</a> example code into a Powershell script.</p>

<p>The objective is to create files encrypted by a public key for transport into an environment with access to the private key so they can be decrypted. </p>

<p>I'm using <code>New-SelfSignedCertificate</code> to create the certificates because I don't need anyone to trust these certs, and I'm using the full certificate with public and private keys directly out of the Windows Key Store because I'm still just testing the code. </p>

<p>My problem is that when I encrypt, everything seems to work fine, but when decrypting I get the error message:</p>

<blockquote>
  <p>ERROR: Exception calling ""Decrypt"" with ""2"" argument(s): ""The data to
  be decrypted exceeds the maximum for this modulus of 128 bytes.""</p>
</blockquote>

<p>It looks like <code>New-SelfSignedCertificate</code> is creating public keys of 2048 bits, and even though in the certs mmc snapin I can see that the cert has a private key, I am unable to see any of it's properties, either through UI or via code. </p>

<p>For instance the following code:</p>

<pre><code>$cert = Get-Item 'Cert:\LocalMachine\AddressBook\&lt;ThumbPrint&gt;'
$cert.HasPrivateKey
$cert.PrivateKey
</code></pre>

<p>results in </p>

<pre><code>True
</code></pre>

<p>and NULL</p>

<p>Here is the code</p>

<pre><code>function ConvertTo-EncryptedFile
{
    [outputType([System.IO.FileInfo])]
    param
    (
        [parameter(Mandatory = $true)]
        [string]$path,
        [string]$client
    )

    $cert = Get-ClientCert -client $client

    if(Test-Path $path)
    {
        $file = Get-Item $path
        $folder = $file.DirectoryName
        $Name = $file.Name

        $destination = Join-Path $folder -ChildPath ""$Name.encrypted""

        $serviceProvider = [System.Security.Cryptography.RSACryptoServiceProvider]$cert.PublicKey.Key
        $aesManaged = New-Object System.Security.Cryptography.AesManaged

        $aesManaged.KeySize = 256
        $aesManaged.BlockSize = 128
        $aesManaged.Mode = 'CBC'

        $transform = $aesManaged.CreateEncryptor()

        $keyformatter = New-Object System.Security.Cryptography.RSAPKCS1KeyExchangeformatter $serviceProvider

        [byte[]]$keyEncrypted = $keyformatter.CreateKeyExchange($aesManaged.Key, $aesManaged.GetType())

        [byte[]]$lenK = New-Object byte[] 4
        [byte[]]$lenIV = New-Object byte[] 4

        [int]$lKey = $keyEncrypted.Length
        $lenK = [System.BitConverter]::GetBytes($lKey)
        [int]$lIV = $aesManaged.IV.Length
        $lenIV = [System.BitConverter]::GetBytes($lIV)

        $outFS = New-Object System.IO.FileStream @($destination, [System.IO.FileMode]::Create)

        $outFS.Write($lenK, 0, 4)
        $outFS.Write($lenIV, 0, 4)
        $outFS.Write($keyEncrypted, 0, $lKey)
        $outFS.Write($aesManaged.IV, 0, $lIV)

        $outStreamEncrypted = New-Object System.Security.Cryptography.CryptoStream @($outFS, $transform, [System.Security.Cryptography.CryptoStreamMode]::Write)

        $count = 0
        $offset = 0

        $blockSizeBytes = $aesManaged.BlockSize / 8
        $data = New-Object byte[] $blockSizeBytes
        $bytesRead = 0

        $inFS = New-Object System.IO.FileStream @($path, [System.IO.FileMode]::Open)

        do
        {
            $count = $inFS.Read($data, 0, $blockSizeBytes)
            $offset += $count
            $outStreamEncrypted.Write($data, 0, $count)
            $bytesRead += $blockSizeBytes
        }
        while ($count -gt 0)
        $inFS.Close()
        $outStreamEncrypted.FlushFinalBlock()
        $outStreamEncrypted.Close()
        $outFS.Close()

        $inFS.Dispose()
        $outStreamEncrypted.Dispose()
        $outFS.Dispose()

        Remove-Variable transform
        $aesManaged.Dispose()

        Write-Output (Get-Item $destination)

    }
    else
    {
        throw ""File to encrypt not found at path: $path""
    }

}

function ConvertFrom-EncryptedFile
{
    param
    (
        [parameter(Mandatory = $true)]
        [string]$path,
        [string]$client
    )

    $cert = Get-ClientCert -client $client

    if (Test-Path $path)
    {
        $destination = $path.Substring(0, $path.LastIndexOf('.'))
    }
    else
    {
        throw ""File to decrypt not found at $path""
    }

    if ($cert.HasPrivateKey)
    {
        $rsaPrivateKey = New-Object System.Security.Cryptography.RSACryptoServiceProvider ($cert.PrivateKey)
    }

    $aesManaged = New-Object System.Security.Cryptography.AesManaged
    $aesManaged.KeySize = 256
    $aesManaged.BlockSize = 128
    $aesManaged.Mode = 'CBC'

    [byte[]]$lenK = New-Object System.Byte[] 4
    [byte[]]$lenIV = New-Object System.Byte[] 4

    [System.IO.FileStream]$inFs = New-Object System.IO.FileStream @($path, [System.IO.FileMode]::Open)

    $inFs.Seek(0, 'Begin')
    $inFs.Seek(0, 'Begin')

    $inFs.Read($lenK, 0, 3)

    $infs.Seek(4, 'Begin')

    $infs.Read($lenIV, 0, 3)

    [int]$lenK = [System.BitConverter]::ToInt32($lenK, 0)
    [int]$lenIV = [System.BitConverter]::ToInt32($lenIV, 0)

    [int]$startC = $lenK + $lenIV + 8
    [int]$lenC = [int]$inFs.Length - $startC

    [byte[]]$keyEncrypted = New-Object System.Byte[] $lenK
    [byte[]]$iv = New-Object System.Byte[] $lenIV

    $inFs.Seek(8, 'Begin')
    $inFs.Read($keyEncrypted, 0, $lenK)

    $inFs.Seek(8 + $lenK, 'Begin')
    $inFs.Read($iv, 0, $lenIV)

    [byte[]]$keyDecrypted = $rsaPrivateKey.Decrypt($keyEncrypted, $false)

}
</code></pre>

<p>It stops at decrypting the AES key because I haven't been able to get passed that hurdle yet. </p>

<p>I've tried reducing the AES key size from 256 to 128, but that didn't seem to work, and I don't really want to use a smaller key size anyway, I would rather figure out what's wrong with this code. </p>

<p>Thanks for any help!</p>

<p>Bill</p>
","<p>It seems, the problems is that <code>New-SelfSignedCertificate</code> in PowerShell v4 choose provider, which is not appropriate to use with <code>RSACryptoServiceProvider</code> class, and does not have <code>-Provider</code> parameter, that allow specify provider explicitly.</p>

<p>One option to solve this would be to update to PowerShell v5. In PowerShell v5 <code>New-SelfSignedCertificate</code> cmdlet have <code>-Provider</code> parameter, so that you can specify desired provider:</p>

<pre class=""lang-none prettyprint-override""><code>PS&gt; $Cert=New-SelfSignedCertificate -DnsName Test -CertStoreLocation Cert:\CurrentUser\My -Provider 'Microsoft Enhanced RSA and AES Cryptographic Provider'
PS&gt; $Cert.PrivateKey


PublicOnly           : False
CspKeyContainerInfo  : System.Security.Cryptography.CspKeyContainerInfo
KeySize              : 2048
KeyExchangeAlgorithm : RSA-PKCS1-KeyEx
SignatureAlgorithm   : http://www.w3.org/2000/09/xmldsig#rsa-sha1
PersistKeyInCsp      : True
LegalKeySizes        : {System.Security.Cryptography.KeySizes}
</code></pre>

<p>To list installed providers you can use following commands:</p>

<pre class=""lang-none prettyprint-override""><code>PS&gt; $Providers=New-Object -ComObject X509Enrollment.CCspInformations
PS&gt; $Providers.AddAvailableCsps()
PS&gt; $Providers|Format-Table Name,Type

Name                                                             Type
----                                                             ----
Microsoft Software Key Storage Provider                             0
Microsoft Passport Key Storage Provider                             0
Microsoft Smart Card Key Storage Provider                           0
Microsoft Base Cryptographic Provider v1.0                          1
Microsoft Base DSS and Diffie-Hellman Cryptographic Provider       13
Microsoft Base DSS Cryptographic Provider                           3
Microsoft Base Smart Card Crypto Provider                           1
Microsoft DH SChannel Cryptographic Provider                       18
Microsoft Enhanced Cryptographic Provider v1.0                      1
Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider   13
Microsoft Enhanced RSA and AES Cryptographic Provider              24
Microsoft RSA SChannel Cryptographic Provider                      12
Microsoft Strong Cryptographic Provider                             1
</code></pre>

<p>As you need an RSA capable provider, then you need to choose provider with type 1, 12 or 24.</p>
","1435","<powershell><encryption><rsa><encryption-asymmetric>","2","0","1","2016-03-30 17:03:26","36315271","13","0","3905079","","2016-03-29 21:50:00","2016-03-29 21:30:48",""
"46164319","How to generate EC keypair with Bouncy Castle","<p>my current project is using the fips resources of BouncyCastle only for encrypten/decryption signing and so on.. the keys are still generated with the usual C# bouncy castle. Now, because that is a waste i want to change the code, but i can't find any documentation on how to do this.</p>

<p>WHat i have so far:</p>

<pre><code>ECDomainParameters s = new ECDomainParameters(...?)
        FipsEC.KeyPairGenerator ecGen = CryptoServicesRegistrar.CreateGenerator(new FipsEC.KeyGenerationParameters(s));
</code></pre>

<p>but how do i specify the type of curve, G and n?</p>

<p>thanks in advance if you can help somehow.</p>
","<p>I found some examples in BouncyCastle unit tests. Try downloading their code with tests: <a href=""https://www.bouncycastle.org/csharp/download/bccrypto-csharp-1.8.1-src.zip"" rel=""nofollow noreferrer"">https://www.bouncycastle.org/csharp/download/bccrypto-csharp-1.8.1-src.zip</a> or find the appropriate source on their web page: <a href=""https://www.bouncycastle.org/csharp/index.html"" rel=""nofollow noreferrer"">https://www.bouncycastle.org/csharp/index.html</a></p>

<p>Then look for the class with unit test: ECTest</p>

<p>For example they have code like this:</p>

<pre><code>/**
 * key generation test
 */
[Test]
public void TestECDsaKeyGenTest()
{
    SecureRandom random = new SecureRandom();

    BigInteger n = new BigInteger(""883423532389192164791648750360308884807550341691627752275345424702807307"");

    FpCurve curve = new FpCurve(
        new BigInteger(""883423532389192164791648750360308885314476597252960362792450860609699839""), // q
        new BigInteger(""7fffffffffffffffffffffff7fffffffffff8000000000007ffffffffffc"", 16), // a
        new BigInteger(""6b016c3bdcf18941d0d654921475ca71a9db2fb27d1d37796185c2942c0a"", 16), // b
        n, BigInteger.One);

    ECDomainParameters parameters = new ECDomainParameters(
        curve,
        curve.DecodePoint(Hex.Decode(""020ffa963cdca8816ccc33b8642bedf905c3d358573d3f27fbbd3b3cb9aaaf"")), // G
        n);

    ECKeyPairGenerator pGen = new ECKeyPairGenerator();
    ECKeyGenerationParameters genParam = new ECKeyGenerationParameters(
        parameters,
        random);

    pGen.Init(genParam);

    AsymmetricCipherKeyPair pair = pGen.GenerateKeyPair();

    ParametersWithRandom param = new ParametersWithRandom(pair.Private, random);

    ECDsaSigner ecdsa = new ECDsaSigner();

    ecdsa.Init(true, param);

    byte[] message = new BigInteger(""968236873715988614170569073515315707566766479517"").ToByteArray();
    BigInteger[] sig = ecdsa.GenerateSignature(message);

    ecdsa.Init(false, pair.Public);

    if (!ecdsa.VerifySignature(message, sig[0], sig[1]))
    {
        Fail(""signature fails"");
    }
}
</code></pre>
","1394","<c#><bouncycastle><encryption-asymmetric><elliptic-curve><fips>","0","0","1","2017-09-14 14:26:47","","1","","47589","","2017-09-14 14:26:47","2017-09-11 21:01:28",""
"1596187","Java Encryption C# Decryption","<p>I got a module which RSA encrypts the data and passes on to the C#.
C# needs to decrypt it based on the public key (64 bit encoded) and the passed token.</p>

<p>I have token , 64 bit encoded public key, can some help me get with the sample to get started.
All I know from Java end is, it is using. I have got the result from Java end and need to write a parser in C# to decrypt this. I get both public key and token as a string value.</p>

<pre><code>    Cipher cipher = Cipher.getInstance(ALGORITHM); //Algorithm = ""RSA""
    cipher.init(Cipher.DECRYPT_MODE, key);
</code></pre>

<p>Thanks</p>
","<p>To get started, you'll need the <em>private</em> key to decrypt the message. By ""public key (64 bit encoded)"", I'm guessing what you really have is a Base-64&ndash;encoded certificate, with a header line that says ""----- BEGIN CERTIFICATE-----"" and a footer that says ""-----END CERTIFICATE-----"".</p>

<p>If that's correct, you'll need to find the private key. This is sometimes stored in a PKCS #12 format file, with a "".p12"" or "".pfx"" extension. You'll need a password to access the private key if it is stored in such a file.</p>

<p>Alternatively, OpenSSL and other utilities use private key files that can be Base-64&ndash;encoded or binary. These have a variety of extensions, and may or may not be password-protected. If the file that you have has a header line of ""-----BEGIN RSA PRIVATE KEY-----"" or ""-----BEGIN PRIVATE KEY-----"", that is actually the private key.</p>

<p>Finally, Windows can store private keys in its internal key store. </p>

<p>When you clarify the location of the private key, please update your question.</p>

<hr>

<p>If the private key is used on the Java side, it may be an attempt to perform a digital signature. While all of several Java providers I've tested produce correct results when (ab)used this way, if you are doing a signature, the <code>Signature</code> class should be used. The C# code should use a signature object to ""verify"" the signature as well. </p>

<p>Encryption is performed with the private key. Since the <em>public</em> key is <strong>public,</strong> anyone can decrypt the message; i.e., the message is not confidential. Public keys are used by recipients to verify signed messages.</p>
","1364","<c#><java><security><encryption><encryption-asymmetric>","0","1","2","2009-10-20 19:17:39","1596259","1","3","","","","2009-10-20 17:39:38",""
"1596187","Java Encryption C# Decryption","<p>I got a module which RSA encrypts the data and passes on to the C#.
C# needs to decrypt it based on the public key (64 bit encoded) and the passed token.</p>

<p>I have token , 64 bit encoded public key, can some help me get with the sample to get started.
All I know from Java end is, it is using. I have got the result from Java end and need to write a parser in C# to decrypt this. I get both public key and token as a string value.</p>

<pre><code>    Cipher cipher = Cipher.getInstance(ALGORITHM); //Algorithm = ""RSA""
    cipher.init(Cipher.DECRYPT_MODE, key);
</code></pre>

<p>Thanks</p>
","<p>Check this code out.</p>

<pre><code>public static string Decrypt(string inputText)
      {
        RijndaelManaged rijndaelCipher = new RijndaelManaged();
        byte[] encryptedData = Convert.FromBase64String(inputText.Replace("" "",""+""));
        PasswordDeriveBytes secretKey = new PasswordDeriveBytes(ENCRYPTION_KEY, SALT);

        using (ICryptoTransform decryptor = rijndaelCipher.CreateDecryptor(secretKey.GetBytes(32), secretKey.GetBytes(16)))
        {
          using (MemoryStream memoryStream = new MemoryStream(encryptedData))
          {
            using (CryptoStream cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read))
            {
              byte[] plainText = new byte[encryptedData.Length];
              int decryptedCount = cryptoStream.Read(plainText, 0, plainText.Length);
              return Encoding.Unicode.GetString(plainText, 0, decryptedCount);
            }
          }
        }
</code></pre>
","1364","<c#><java><security><encryption><encryption-asymmetric>","0","1","2","2009-10-20 19:17:39","1596259","1","3","","","","2009-10-20 17:39:38",""
"2002977","Is is possible to encrypt in a different order than decrypting?","<p>Is it possible to encrypt in one order and decrypt in another?  For example I've got the following:</p>

<ul>
<li>plain_text.txt</li>
<li>Public/Private Key pair 1</li>
<li>Public/Private Key pair 2</li>
</ul>

<h2>Example</h2>

<p>Encryption:</p>

<pre><code>public1(public2(plain_text.txt))
</code></pre>

<p>Decryption:</p>

<pre><code>private1(private2(encrypted))
</code></pre>

<p>Is there any encryption algorithm that allows this? Is it even possible?</p>
","<p>AFAIK this should be possible with slight modification to RSA. I do not know of any tool which can actually do it though.</p>
","1346","<encryption><encryption-asymmetric>","4","0","6","2010-01-06 11:25:41","","3","2","24587","","2010-01-04 23:23:56","2010-01-04 23:11:16",""
"2002977","Is is possible to encrypt in a different order than decrypting?","<p>Is it possible to encrypt in one order and decrypt in another?  For example I've got the following:</p>

<ul>
<li>plain_text.txt</li>
<li>Public/Private Key pair 1</li>
<li>Public/Private Key pair 2</li>
</ul>

<h2>Example</h2>

<p>Encryption:</p>

<pre><code>public1(public2(plain_text.txt))
</code></pre>

<p>Decryption:</p>

<pre><code>private1(private2(encrypted))
</code></pre>

<p>Is there any encryption algorithm that allows this? Is it even possible?</p>
","<p>With most public implementations of RSA it would not be possible. The decryption routine expects the plaintext to be in a specific format (i. e. properly padded) and fails if it's not. Again, on encryption it would apply padding to the plaintext, instead of using the blob as it is.</p>

<p>/*
The math of RSA allows for that, AFAIK, as long as the moduli of the two keys are coprime (which is true almost always). But you'll probably have to roll your own implementation.
*/</p>

<p>Another problem is that the numeric value of the plaintext block should be smaller than the modulus. So the modulus of the first key should be smaller than that of the second key, otherwise no guarantee that the first cyphertext would be a proper plaintext for the second encryption round.</p>

<p>OpenSSL has, I vaguely recall, a no-padding mode. You might have some luck with that.</p>

<p>EDIT: in general, coming up with your own cryptographic primitives is a bad idea in 99.9% cases. If your interest is purely academic, then be my guest; but if you're after a specific piece of applied functionality (i. e. encrypt something so that the consent of two nontrusting parties is needed to decrypt), then you're definitely on the wrong track.</p>

<p>EDIT2: the math of RSA allows for that if the moduli are identical. Scratch paragraph two. But having two keys share the same modulus compromises security very much. If Alice has private key (m, d) and Cindy as private key (m, d') - assuming same m - then Alice can determine d' in O(m) time, given a single plaintext/cyphertext pair from Cindy. Not good.</p>
","1346","<encryption><encryption-asymmetric>","4","3","6","2010-01-06 11:25:41","","3","2","24587","","2010-01-04 23:23:56","2010-01-04 23:11:16",""
"2002977","Is is possible to encrypt in a different order than decrypting?","<p>Is it possible to encrypt in one order and decrypt in another?  For example I've got the following:</p>

<ul>
<li>plain_text.txt</li>
<li>Public/Private Key pair 1</li>
<li>Public/Private Key pair 2</li>
</ul>

<h2>Example</h2>

<p>Encryption:</p>

<pre><code>public1(public2(plain_text.txt))
</code></pre>

<p>Decryption:</p>

<pre><code>private1(private2(encrypted))
</code></pre>

<p>Is there any encryption algorithm that allows this? Is it even possible?</p>
","<p>With public key/private key encryption, the answer is no.  <code>PubK1(PubK2(plain.text))</code> => encrypted.text.  You must decrypt with <code>PrivK2(PrivK1(encrypted.text))</code>.  </p>

<p>However, if you use a symmetric stream cipher such as RC4, then you could change the order of the decryption (A xor B xor C = C xor B xor A). But that is not a public/private key algorithm obviously.</p>
","1346","<encryption><encryption-asymmetric>","4","1","6","2010-01-06 11:25:41","","3","2","24587","","2010-01-04 23:23:56","2010-01-04 23:11:16",""
"2002977","Is is possible to encrypt in a different order than decrypting?","<p>Is it possible to encrypt in one order and decrypt in another?  For example I've got the following:</p>

<ul>
<li>plain_text.txt</li>
<li>Public/Private Key pair 1</li>
<li>Public/Private Key pair 2</li>
</ul>

<h2>Example</h2>

<p>Encryption:</p>

<pre><code>public1(public2(plain_text.txt))
</code></pre>

<p>Decryption:</p>

<pre><code>private1(private2(encrypted))
</code></pre>

<p>Is there any encryption algorithm that allows this? Is it even possible?</p>
","<p>No, it does not work. Very simply, you cannot guarantee unique decryption because one modulus is bigger than the other.</p>

<p>EDIT: I'm assuming this is RSA. If not, then I'd have to think about some of the others.</p>

<p>EDIT2: If you are <em>always</em> willing to use the smaller modulus first, then it does work.</p>
","1346","<encryption><encryption-asymmetric>","4","0","6","2010-01-06 11:25:41","","3","2","24587","","2010-01-04 23:23:56","2010-01-04 23:11:16",""
"2002977","Is is possible to encrypt in a different order than decrypting?","<p>Is it possible to encrypt in one order and decrypt in another?  For example I've got the following:</p>

<ul>
<li>plain_text.txt</li>
<li>Public/Private Key pair 1</li>
<li>Public/Private Key pair 2</li>
</ul>

<h2>Example</h2>

<p>Encryption:</p>

<pre><code>public1(public2(plain_text.txt))
</code></pre>

<p>Decryption:</p>

<pre><code>private1(private2(encrypted))
</code></pre>

<p>Is there any encryption algorithm that allows this? Is it even possible?</p>
","<p>This would only be true if the encryption algorithm behaved as a specific kind of <a href=""http://en.wikipedia.org/wiki/Group_%28mathematics%29"" rel=""nofollow noreferrer"">mathematical group</a>. Most (all?) block encryption algorithms are not such groups.</p>
","1346","<encryption><encryption-asymmetric>","4","1","6","2010-01-06 11:25:41","","3","2","24587","","2010-01-04 23:23:56","2010-01-04 23:11:16",""
"2002977","Is is possible to encrypt in a different order than decrypting?","<p>Is it possible to encrypt in one order and decrypt in another?  For example I've got the following:</p>

<ul>
<li>plain_text.txt</li>
<li>Public/Private Key pair 1</li>
<li>Public/Private Key pair 2</li>
</ul>

<h2>Example</h2>

<p>Encryption:</p>

<pre><code>public1(public2(plain_text.txt))
</code></pre>

<p>Decryption:</p>

<pre><code>private1(private2(encrypted))
</code></pre>

<p>Is there any encryption algorithm that allows this? Is it even possible?</p>
","<p>In most cases you can't change the order of the decryption.
Schemes that allow to reorder decryption are called commutative cryptosystems.
One public key cryptosystem that can be used to build a commutative cryptosystem is
the <a href=""http://en.wikipedia.org/wiki/ElGamal_encryption"" rel=""nofollow noreferrer"">ElGamal encryption</a>. </p>

<p>Here is just the main idea: Assume g is a generator of
a suitable group G, for which computing discrete logarithms is hard.
Let x<sub>A</sub> and x<sub>B</sub> be two private keys,
h<sub>A</sub> = g<sup> x<sub>A</sub> </sup>, and
h<sub>B</sub> = g<sup> x<sub>B</sub> </sup>
be the corresponding public keys. Both keys pairs use the same group
G (i.e. the same modulus p if we use G = Z/(p)). It is one advantage of the
ElGamal scheme that it still is secure if two users share the same group (or modulus).
RSA on the other hand will be insecure.</p>

<p>Encrypting a message m with h<sub>A</sub> gives the ciphertext</p>

<blockquote>
  <p>(m h<sub>A</sub><sup>r</sup>, g<sup>r</sup>).</p>
</blockquote>

<p>Note that knowing the secret key x<sub>A</sub> allows to decrypt because</p>

<blockquote>
  <p>(g<sup>r</sup>)<sup>x<sub>A</sub></sup> = h<sub>A</sub><sup>r</sup></p>
</blockquote>

<p>To encrypt the ciphertext a second time one would first re-encrypt the existing
ciphertext with A's public key. 
He chooses a random r' and computes</p>

<blockquote>
  <p>(m h<sub>A</sub><sup>r</sup> h<sub>A</sub><sup>r'</sup>, g<sup>r</sup>g<sup>r'</sup>) =
  (m h<sub>A</sub><sup>r+r'</sup>, g<sup>r+r'</sup>).</p>
</blockquote>

<p>The result is just another valid encryption with A's public key.
This re-encryption is necessary to avoid an attack that works for example 
against RSA with equal modulus as shown below. 
Next, one would encrypt with B's public key giving </p>

<blockquote>
  <p>(m h<sub>A</sub><sup>r+r'</sup> h<sub>B</sub><sup>s</sup>, g<sup>r+r'</sup>, g<sup>s</sup>).</p>
</blockquote>

<p>Decryption is possible in either order, e.g. knowing x<sub>A</sub> allows to compute</p>

<blockquote>
  <p>(g<sup>r+r'</sup>)<sup>x<sub>A</sub></sup> = h<sub>A</sub><sup>r+r'</sup></p>
</blockquote>

<p>and hence one can compute</p>

<blockquote>
  <p>(m h<sub>B</sub><sup>s</sup>, g<sup>s</sup>),</p>
</blockquote>

<p>which is just what we want: an encryption of m with B's public key.</p>

<p>There are a number of subtleties that need to be observed to get a secure implementation.
And getting this right isn't easy. 
For more info see for example the <a href=""http://groups.csail.mit.edu/cis/theses/weis-phd-thesis.pdf"" rel=""nofollow noreferrer"">Phd of Stephen Weis</a>, which contains a chapter on commutative encryption.</p>

<hr>

<p>There are a number of problems if the same idea is tried with ""textbook RSA"". First to make the encryption commutative it is necessary that both users A and B share the same modulus.
E.g. A uses (n, e<sub>A</sub>, d<sub>A</sub>) and B uses (n, e<sub>B</sub>, d<sub>B</sub>), where n is the modulus, e<sub>A</sub>, e<sub>B</sub> the public keys and d<sub>A</sub>, d<sub>B</sub> the secret keys. However, knowing for example (n, e<sub>A</sub>, d<sub>A</sub>) allows to factor n, and hence compute B's secret key, which is of course one big flaw.</p>

<p>Now we could encrypt m as</p>

<blockquote>
  <p>m<sup>e<sub>A</sub></sup> mod n,</p>
</blockquote>

<p>encrypt again as</p>

<blockquote>
  <p>m<sup>e<sub>A</sub>e<sub>B</sub></sup> mod n,</p>
</blockquote>

<p>decrypt with A's secret key giving</p>

<blockquote>
  <p>m<sup>e<sub>B</sub></sup> mod n,</p>
</blockquote>

<p>and decrypt again with B's secret key to get m. That looks fine until one notices that 
an attacker who can intercept the two ciphertexts c = m<sup>e<sub>A</sub></sup> mod n and c' = m<sup>e<sub>B</sub></sup> mod n can use Euclid's algorithm to find r,s such that</p>

<blockquote>
  <p>r e<sub>A</sub> + s e<sub>B</sub> = 1 </p>
</blockquote>

<p>and then compute</p>

<blockquote>
  <p>m = c<sup>r</sup> (c')<sup>s</sup> mod n.</p>
</blockquote>

<p>The idea also works against the solution using RC4 proposed in another answer. Weis's thesis contains a detailed description of the attack.</p>
","1346","<encryption><encryption-asymmetric>","4","5","6","2010-01-06 11:25:41","","3","2","24587","","2010-01-04 23:23:56","2010-01-04 23:11:16",""
"2898148","How to produce a key pair for 64 bit public key encryption","<p>I need to generate a 64 bit public-private key pair but can't find out any standard algorithm.</p>
","<p>When you say public-private key pair, you imply that you are talking about asymmetric cryptography. Key sizes here are normally much much bigger than this - 512 bit or 1024 bit are common. If you are actually talking symmetric cryptography, then just randomly generate a 64 bit number (and, if you are using an algorithm like DES/3DES, check it against known weak keys for the algorithm).</p>
","1309","<java><java-me><encryption-asymmetric><public-key-encryption>","0","1","2","2016-03-25 14:01:29","","3","","472495","","2016-03-25 14:01:29","2010-05-24 15:37:01","2016-03-26 01:59:22"
"2898148","How to produce a key pair for 64 bit public key encryption","<p>I need to generate a 64 bit public-private key pair but can't find out any standard algorithm.</p>
","<p>Offhand, I can't think of a public-key cryptography algorithm that would be even somewhat secure with only a 64-bit key. RSA is by far the most common, but for it a 512 bit key is on the small side. Elliptical curve cryptography doesn't require as large of keys as most other public-key algorithms, but even so you typically need somewhere in the range of 150-200 bits.</p>
","1309","<java><java-me><encryption-asymmetric><public-key-encryption>","0","0","2","2016-03-25 14:01:29","","3","","472495","","2016-03-25 14:01:29","2010-05-24 15:37:01","2016-03-26 01:59:22"
"5370724","Java security with Bouncy Castle API","<p>I want to know whether Bouncy Castle API is good fit for asymmetric encryption in Java. <BR><BR>Currently I am doing this with Java's JCE API. Will there be any advantages if I use Bouncy Castle API for asymmetric encryption?</p>
","<p>An advantage of using JCE mechanisms is that it is something of a standard, so you may use any of several providers to work with depending on your needs. You will find many JCE providers, commercial and free, that cover much of the crypto spectrum. There might even be some hardware (HSM) support through a proprietary JCE provider, though I don't know that for a fact.</p>

<p>Some advantages of <em>completely avoiding</em> the JCE and using the Bouncycastle lightweight API (BC LWAPI) <em>exclusively</em> are:</p>

<ol>
<li>No additional policy files are needed to make any of the cryptography work. E.g. you can use AES-256 without requiring users to download the unlimited jurisdiction policy files.</li>
<li>The BC LWAPI is supported on the JME (formerly J2ME) environment. The JCE is not.</li>
<li>Many more cryptographic primitives are supported in the BC LWAPI. </li>
</ol>
","1305","<java><security><bouncycastle><encryption-asymmetric><public-key-encryption>","0","1","1","2011-03-22 14:23:19","5392749","0","","","","","2011-03-20 19:05:26",""
"28537832","Do I need to seed any random number generator before using EVP_PKEY_keygen of OpenSSL?","<p>On the OpenSSL Wiki page called <a href=""https://wiki.openssl.org/index.php/EVP_Key_and_Parameter_Generation"" rel=""nofollow"">EVP Key and Parameter Generation</a> it states the following:</p>

<blockquote>
  <p>Since these functions use random numbers you should ensure that the random number generator is appropriately seeded</p>
</blockquote>

<p>But nowhere on <a href=""https://www.openssl.org/docs/crypto/EVP_PKEY_keygen.html"" rel=""nofollow"">EVP_PKEY_keygen</a> does it make mention of seeding a random number generator. It only discusses the low-level doc pages for non-EVP functions for generating keys.</p>

<p>I have also searched and everywhere no mention is made of seeding when the EVP functions are used.</p>

<p>So my question is; May I assume that the seeding is done internally for me in the higher-level EVP functions?</p>

<p>If I do need to do it then which functions must I have a look at?</p>
","<blockquote>
  <p>but nowhere on <a href=""https://www.openssl.org/docs/crypto/EVP_PKEY_keygen.html"" rel=""nofollow"">https://www.openssl.org/docs/crypto/EVP_PKEY_keygen.html</a> it makes any mention of seeding a random number generator....</p>
</blockquote>

<p>See the OpenSSL wiki page <a href=""http://wiki.openssl.org/index.php/Random_Numbers"" rel=""nofollow"">Random Numbers</a>. It takes you through it in grueling detail.</p>

<hr>

<blockquote>
  <p>... no mention is made of seeding when the EVP functions are used</p>
</blockquote>

<p>The EVP functions use whatever generator is in use for the library. It could be <code>md_rand</code> or a FIPS AES/CTR generator. There's nothing special to get random numbers for the EVP functions (as opposed to other functions).</p>

<hr>

<blockquote>
  <p>May I assume that the seeding is done internally for me in the higher-level EVP functions?</p>
</blockquote>

<p>Yes, <em>if</em> you did not seed the generator yourself. If you seeded the generator and there's sufficient entropy, then it will not auto-seed itself.</p>

<p>You should avoid allowing the generator to auto-seed itself. See the OpenSSL wiki page <a href=""http://wiki.openssl.org/index.php/Random_Numbers"" rel=""nofollow"">Random Numbers</a> for the details.</p>

<p>There's nothing special about seeding/auto-seeding a generator when using EVP interfaces. Whatever you do applies to everything.</p>

<hr>

<blockquote>
  <p>If I do need to do it then which functions must I have a look at?</p>
</blockquote>

<p>The OpenSSL wiki page <a href=""http://wiki.openssl.org/index.php/Random_Numbers"" rel=""nofollow"">Random Numbers</a> provides more details, but you should do something like:</p>

<pre><code>int rc = RAND_load_file(""/dev/urandom"", 32);
if(rc != 32) {
    /* RAND_load_file failed */
}

/* OK to proceed */
</code></pre>

<p>You want to avoid a direct call to <code>RAND_poll</code>, and you want to avoid auto-seeding (which calls <code>RAND_poll</code> internally).</p>
","1284","<encryption><openssl><public-key-encryption><public-key><encryption-asymmetric>","2","1","1","2015-02-16 21:13:27","28550395","1","","608639","","2015-02-16 21:13:27","2015-02-16 09:05:28",""
"48567455","Extracting Asymmetric key under .Net Core","<p>I wish to create an asymmetric key in memory in C# under .NetCore 2.0</p>

<p>As a starting point I tried to run the sample given here</p>

<p><a href=""https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-store-asymmetric-keys-in-a-key-container"" rel=""nofollow noreferrer"">https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-store-asymmetric-keys-in-a-key-container</a></p>

<p>For example the code here :</p>

<pre><code>    // Create the CspParameters object and set the key container   
    // name used to store the RSA key pair.  
    CspParameters cp = new CspParameters();
    cp.KeyContainerName = ContainerName;

    // Create a new instance of RSACryptoServiceProvider that accesses  
    // the key container MyKeyContainerName.  
    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(cp);

    // Display the key information to the console.  
    Console.WriteLine(""Key added to container: \n  {0}"",     rsa.ToXmlString(true));
</code></pre>

<p>fails because RSACryptoServiceProvider.ToXmlString gives a runtime error of </p>

<pre><code>System.PlatformNotSupportedException: 'Operation is not supported on this platform.'
</code></pre>

<p>The definition of this method 
<a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.rsa.Toxmlstring(v=vs.110).aspx"" rel=""nofollow noreferrer"">https://msdn.microsoft.com/en-us/library/system.security.cryptography.rsa.Toxmlstring(v=vs.110).aspx</a></p>

<p>states that the output parameter returns the XML string (as well as a boolean input parameter).  I have seen some posts where an alternative local implementation of ToXmlString is used, but this passes both the bool and the string into the method - which sounds as if it is doing something completely different and is not equivalent.</p>

<p>How can I get an XML string of an rsa object under .NetCore ?</p>
","","1280","<c#><encryption-asymmetric>","0","","0","2018-02-01 16:28:36","","2","","","","","2018-02-01 16:28:36",""
"38363233","GPG Encrypt file with multiple public keys in a powershell script","<p>I am trying to encrypt a file with multiple public keys and used the same syntax that is there as part of the documentation and it is throwing the below error.</p>

<p><strong>Error Message</strong></p>

<p><em>gpg : usage: gpg [options] --encrypt [filename]
    At line:10 char:1
    + gpg --encrypt \ --recipient ""Sree"" \ --recipient ""Matam"" \ ""C:Reports\ ...
    +   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (usage: gpg [opt...rypt      [filename]:String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError</em></p>

<p>P.S: This encryption is done as part of a powershell script</p>

<p>When I encrypt with a single key, it works fine. Can someone point what is it that I am doing wrong?</p>

<pre><code>gpg --encrypt \ --recipient ""Sree"" \ --recipient ""Matam"" \ ""C:\Reports\test_encryption.xlsx""
</code></pre>

<p>I used this thread to guide me but looks like I am missing something</p>

<p><a href=""https://stackoverflow.com/questions/597188/encryption-with-multiple-different-keys"">Encryption with multiple different keys?</a></p>
","<p>You encrypt with one key at a time.</p>

<p>Once you have encrypted with one key, you may re-encrypt the ciphertext with a second key.</p>

<p>However, this serves no semantically legitimate purpose.  Public keys are used to provide secrecy and confidentiality in the prescribed manner.  I sign something with my private key and encrypt it for you with your public key.  You recover it with your private key and verify it with my public key.  Any superjacent use of this public key or that private key is questionable at best.</p>
","1269","<powershell><encryption><public-key-encryption><gnupg><encryption-asymmetric>","1","2","2","2016-07-14 18:24:41","38381549","5","","-1","","2017-05-23 12:08:09","2016-07-13 23:18:11",""
"38363233","GPG Encrypt file with multiple public keys in a powershell script","<p>I am trying to encrypt a file with multiple public keys and used the same syntax that is there as part of the documentation and it is throwing the below error.</p>

<p><strong>Error Message</strong></p>

<p><em>gpg : usage: gpg [options] --encrypt [filename]
    At line:10 char:1
    + gpg --encrypt \ --recipient ""Sree"" \ --recipient ""Matam"" \ ""C:Reports\ ...
    +   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (usage: gpg [opt...rypt      [filename]:String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError</em></p>

<p>P.S: This encryption is done as part of a powershell script</p>

<p>When I encrypt with a single key, it works fine. Can someone point what is it that I am doing wrong?</p>

<pre><code>gpg --encrypt \ --recipient ""Sree"" \ --recipient ""Matam"" \ ""C:\Reports\test_encryption.xlsx""
</code></pre>

<p>I used this thread to guide me but looks like I am missing something</p>

<p><a href=""https://stackoverflow.com/questions/597188/encryption-with-multiple-different-keys"">Encryption with multiple different keys?</a></p>
","<p>Got this bit to work finally. Thanks to @user2864740</p>

<pre><code>$BeforeEncryptfilePathGPG = ""C:\Reports\Test_Encryption.xlsx""
$SignedOrEncryptedLoc = ""C:\Reports\Test_Encryption.xlsx.gpg""
gpg --output $SignedOrEncryptedLoc --always-trust --encrypt --recipient ""Sreekar"" --recipient ""Matam"" $BeforeEncryptfilePathGPG
</code></pre>
","1269","<powershell><encryption><public-key-encryption><gnupg><encryption-asymmetric>","1","0","2","2016-07-14 18:24:41","38381549","5","","-1","","2017-05-23 12:08:09","2016-07-13 23:18:11",""
"1372307","Why shouldn't we crypt with the private key in an asymmetrical cryptographic system?","<p>In standard use of asymmetrical cryptographic system, encryption is done with public key, decryption with private key.</p>

<p>Inversing the process, ""encryption with private key"" is called ""signing"".</p>

<p>Standard tools, despite terminology and lack of direct tools, allows to implement encryption system that would use the private key for encryption.</p>

<p>Could anyone explain clearly why such solution is vulnerable?</p>

<p><b>User Case:</b></p>

<p>Consider that Alice wants to send to Bob some stuff in a non-traditional way:</p>

<p>Alice and Bob once met and Alice gave Bob a ""public key"" generated from a private key she created BUT she warned Bob to keep it secret. AND she kept secret the private key, and didn't ever give to anyone else the public key.</p>

<p>Could Bob be sure that messages he receives from Alice (provided these are encrypted by Alice private key) are only readable by him (provided he really kept his copy of Alice's public key secret)?</p>

<p>And how compares this encryption solidity to the traditional way, which would, in our case, be Bob sending messages (encrypted by the public key of Alice) to Alice? </p>

<p><b>What the question is about</b></p>

<p>The fact that asymmetrical keys are named ""private"" and ""public"" doesn't help understanding my question. Keys have underlying properties, and it's me broadcasting the ""public key"" that gives it its ""public"" property. Please make this distinction clear before answering: I'm not considering the ""public"" and ""private"" properties of these keys but the solidity of the ""private key"" encryption versus ""public key"" encryption.</p>

<p>I cannot use another terminology even if it is misleading in this special case.</p>

<p>I know that this case is non-traditional, and could lead to several inconsistency, or is not the point of the asymmetrical crypto systems as Bob and Alice here share some sort of a common secret and that's not the point of asymmetrical crypto.</p>

<p>I saw several Stackoverflow answers which suggest that ""private key"" and ""public key"" are exchangeable (just read below answers). This is not true for RSA as it is trivial to generate the public key from the secret key and this is guaranteed not to be computationally feasible in the other way round. For non-believers, the process of key generation in openssl with RSA is:</p>

<ol>
<li>generate a secret key</li>
<li>extract the public key from the secret key.</li>
</ol>

<p>If there are so big differences between ""private key"" and ""public key"", is there a solidity difference between ""private key"" encryption versus traditional ""public key"" encryption?</p>

<p><b>Short answer from long selected answer</b></p>

<p>Misunderstanding on what exactly is the ""private key"" wasn't helping me.
There's two different definition of ""private key"". The ""practical private key"", and the ""theoretical private key"".</p>

<p><em>Theoretical private key</em> from RSA theory shares mathematical symmetricity with public key: </p>

<ul>
  <li>You cannot deduce one from the other</li>
  <li>Encryption is equally solid in either way</li>
</ul>

<p><em>Practical private key</em> from RSA tools (like openssl) contains additional information for efficiency reason, and often, a part of the public key is even set by convention. These assumptions breaks the symmetricity:</p>

<ul>
  <li>It is trivial to get public key from ""pratical private key""</li>
  <li>But encryption remains equally solid</li>
</ul>

<p>For more detail, see the selected answer ! Please comment if misconceptions remains...</p>

<p><b>Edit note:</b></p>

<ul>
  <li>Asymmetrical crypto system key pairs are frequently advertised as swappable (even in current stackoverflow answers), I try to bring reflexion around the fact that it could be dangerous misunderstanding as it isn't the case in REAL life tools.</li>
  <li>Added the user case, I hope this will clarify my question</li>
  <li>Added final 'short answer'</li>
</ul>
","<p>Simply because when you encrypt something, you are masking it so that only one person can read it (the person with the private key).  You do not possess that person's private key, all you have is their public key.</p>

<p>If you are encrypting it with your private key, anyone can decrypt it with your public key - this is the principle of signing - they can tell that it was encrypted by your private key!</p>
","1269","<signing><encryption-asymmetric><security>","3","6","6","2010-07-01 14:57:00","1381612","5","2","458681","","2009-09-07 21:01:11","2009-09-03 09:06:15",""
"1372307","Why shouldn't we crypt with the private key in an asymmetrical cryptographic system?","<p>In standard use of asymmetrical cryptographic system, encryption is done with public key, decryption with private key.</p>

<p>Inversing the process, ""encryption with private key"" is called ""signing"".</p>

<p>Standard tools, despite terminology and lack of direct tools, allows to implement encryption system that would use the private key for encryption.</p>

<p>Could anyone explain clearly why such solution is vulnerable?</p>

<p><b>User Case:</b></p>

<p>Consider that Alice wants to send to Bob some stuff in a non-traditional way:</p>

<p>Alice and Bob once met and Alice gave Bob a ""public key"" generated from a private key she created BUT she warned Bob to keep it secret. AND she kept secret the private key, and didn't ever give to anyone else the public key.</p>

<p>Could Bob be sure that messages he receives from Alice (provided these are encrypted by Alice private key) are only readable by him (provided he really kept his copy of Alice's public key secret)?</p>

<p>And how compares this encryption solidity to the traditional way, which would, in our case, be Bob sending messages (encrypted by the public key of Alice) to Alice? </p>

<p><b>What the question is about</b></p>

<p>The fact that asymmetrical keys are named ""private"" and ""public"" doesn't help understanding my question. Keys have underlying properties, and it's me broadcasting the ""public key"" that gives it its ""public"" property. Please make this distinction clear before answering: I'm not considering the ""public"" and ""private"" properties of these keys but the solidity of the ""private key"" encryption versus ""public key"" encryption.</p>

<p>I cannot use another terminology even if it is misleading in this special case.</p>

<p>I know that this case is non-traditional, and could lead to several inconsistency, or is not the point of the asymmetrical crypto systems as Bob and Alice here share some sort of a common secret and that's not the point of asymmetrical crypto.</p>

<p>I saw several Stackoverflow answers which suggest that ""private key"" and ""public key"" are exchangeable (just read below answers). This is not true for RSA as it is trivial to generate the public key from the secret key and this is guaranteed not to be computationally feasible in the other way round. For non-believers, the process of key generation in openssl with RSA is:</p>

<ol>
<li>generate a secret key</li>
<li>extract the public key from the secret key.</li>
</ol>

<p>If there are so big differences between ""private key"" and ""public key"", is there a solidity difference between ""private key"" encryption versus traditional ""public key"" encryption?</p>

<p><b>Short answer from long selected answer</b></p>

<p>Misunderstanding on what exactly is the ""private key"" wasn't helping me.
There's two different definition of ""private key"". The ""practical private key"", and the ""theoretical private key"".</p>

<p><em>Theoretical private key</em> from RSA theory shares mathematical symmetricity with public key: </p>

<ul>
  <li>You cannot deduce one from the other</li>
  <li>Encryption is equally solid in either way</li>
</ul>

<p><em>Practical private key</em> from RSA tools (like openssl) contains additional information for efficiency reason, and often, a part of the public key is even set by convention. These assumptions breaks the symmetricity:</p>

<ul>
  <li>It is trivial to get public key from ""pratical private key""</li>
  <li>But encryption remains equally solid</li>
</ul>

<p>For more detail, see the selected answer ! Please comment if misconceptions remains...</p>

<p><b>Edit note:</b></p>

<ul>
  <li>Asymmetrical crypto system key pairs are frequently advertised as swappable (even in current stackoverflow answers), I try to bring reflexion around the fact that it could be dangerous misunderstanding as it isn't the case in REAL life tools.</li>
  <li>Added the user case, I hope this will clarify my question</li>
  <li>Added final 'short answer'</li>
</ul>
","<p>To put it a little more explicitly, 'encryption with a private key' means that to decrypt you need to use the public key. This isn't an issue, except that <strong>anyone</strong> can then decrypt your [insert item here], since the public key is just that: <em>public</em>. It isn't useful to <em>protect</em> data, this system is used to <em>verify</em> data.</p>

<p>For instance, Alice wants to send a file toBob (yea, yea, shoot me). Alice doesn't care if anyone else can read her file, it's not confidential, but she wants Bob to be sure that what she sent is what he recieved. She can then encrypt her file with her private key, and Bob can decrypt the file on his end with her public key, ensuring that the file hasn't been tampered with. But if someone else is listening in to the transaction, they can also decrypt and read the file. They just can't change it.</p>

<hr>

<p>For the case you provide, a better way would be exchanging keys when they meet so that there are actually two keypairs. You yourself mentioned that RSA in particular doesn't actually workr if you try to encrypt with the public key because of optimisations made in the algorithm. I wouldn't be entirely surprised if this is a common case with other algorithms. They are designed to be run one way (private/encrypt, public/decrypt) and are a known ""expensive"" operation, therefore they likely to be heavily optimised in reality.</p>

<p>Other than that, I don't see any security concerns with your plan... As long as the keys are truely kept private. Private/public are just common names based on typical usage. There's nothing forcing you to make a public key fully public. In your case you may like to term them 'encryption key' and 'decryption key', but I wouldn't use each key for both. Infact, I'd recommend you did term them such inside your program, for the reasons given by Jonathan Leffler in his comments: </p>

<blockquote>
  <p>A 'public key' is something that can be shared by multiple people. That's the definition of 'public key'. Anything else is very confusing</p>
</blockquote>
","1269","<signing><encryption-asymmetric><security>","3","3","6","2010-07-01 14:57:00","1381612","5","2","458681","","2009-09-07 21:01:11","2009-09-03 09:06:15",""
"1372307","Why shouldn't we crypt with the private key in an asymmetrical cryptographic system?","<p>In standard use of asymmetrical cryptographic system, encryption is done with public key, decryption with private key.</p>

<p>Inversing the process, ""encryption with private key"" is called ""signing"".</p>

<p>Standard tools, despite terminology and lack of direct tools, allows to implement encryption system that would use the private key for encryption.</p>

<p>Could anyone explain clearly why such solution is vulnerable?</p>

<p><b>User Case:</b></p>

<p>Consider that Alice wants to send to Bob some stuff in a non-traditional way:</p>

<p>Alice and Bob once met and Alice gave Bob a ""public key"" generated from a private key she created BUT she warned Bob to keep it secret. AND she kept secret the private key, and didn't ever give to anyone else the public key.</p>

<p>Could Bob be sure that messages he receives from Alice (provided these are encrypted by Alice private key) are only readable by him (provided he really kept his copy of Alice's public key secret)?</p>

<p>And how compares this encryption solidity to the traditional way, which would, in our case, be Bob sending messages (encrypted by the public key of Alice) to Alice? </p>

<p><b>What the question is about</b></p>

<p>The fact that asymmetrical keys are named ""private"" and ""public"" doesn't help understanding my question. Keys have underlying properties, and it's me broadcasting the ""public key"" that gives it its ""public"" property. Please make this distinction clear before answering: I'm not considering the ""public"" and ""private"" properties of these keys but the solidity of the ""private key"" encryption versus ""public key"" encryption.</p>

<p>I cannot use another terminology even if it is misleading in this special case.</p>

<p>I know that this case is non-traditional, and could lead to several inconsistency, or is not the point of the asymmetrical crypto systems as Bob and Alice here share some sort of a common secret and that's not the point of asymmetrical crypto.</p>

<p>I saw several Stackoverflow answers which suggest that ""private key"" and ""public key"" are exchangeable (just read below answers). This is not true for RSA as it is trivial to generate the public key from the secret key and this is guaranteed not to be computationally feasible in the other way round. For non-believers, the process of key generation in openssl with RSA is:</p>

<ol>
<li>generate a secret key</li>
<li>extract the public key from the secret key.</li>
</ol>

<p>If there are so big differences between ""private key"" and ""public key"", is there a solidity difference between ""private key"" encryption versus traditional ""public key"" encryption?</p>

<p><b>Short answer from long selected answer</b></p>

<p>Misunderstanding on what exactly is the ""private key"" wasn't helping me.
There's two different definition of ""private key"". The ""practical private key"", and the ""theoretical private key"".</p>

<p><em>Theoretical private key</em> from RSA theory shares mathematical symmetricity with public key: </p>

<ul>
  <li>You cannot deduce one from the other</li>
  <li>Encryption is equally solid in either way</li>
</ul>

<p><em>Practical private key</em> from RSA tools (like openssl) contains additional information for efficiency reason, and often, a part of the public key is even set by convention. These assumptions breaks the symmetricity:</p>

<ul>
  <li>It is trivial to get public key from ""pratical private key""</li>
  <li>But encryption remains equally solid</li>
</ul>

<p>For more detail, see the selected answer ! Please comment if misconceptions remains...</p>

<p><b>Edit note:</b></p>

<ul>
  <li>Asymmetrical crypto system key pairs are frequently advertised as swappable (even in current stackoverflow answers), I try to bring reflexion around the fact that it could be dangerous misunderstanding as it isn't the case in REAL life tools.</li>
  <li>Added the user case, I hope this will clarify my question</li>
  <li>Added final 'short answer'</li>
</ul>
","<p>I don't know if there are some copyright concerns but I'll quote ""Valery Pryamikov""
from <a href=""http://www.dotnetmonster.com/Uwe/Forum.aspx/dotnet-security/2762/private-to-public-decrypt-now-working"" rel=""nofollow noreferrer"">this forum</a>.</p>

<blockquote>
<p>
Signature and Encryption are two different prototypes with different
security requirements that among other require different padding
modes. Use phrase ""decrypt with public"" key was the biggest obuse of
terminology in history of cryptography that was widespread by Bruce
Schneier's book ""Applied Cryptography"". The phrase it self were
supposed to be used to describe signature schemes with message
recovery (such as RSA). This phrase was also used to adjust asymmetric
encryption and signature to old protocol verification models such as
BAN. However, by it self this is just a missnomer - public key is
known to everybody and decrypt operation has meaning of providing
privacy to the content - which is impossible if decryption key is
known to everyone.</p>
<p>
Even so raw RSA allows interchange of public and private key, but in
reality they can't be interchanged. Private key decryption is
implemented with using CRT (chinese remainder theorem) to provide 4x
better performance of private key operation. For that - you need not
only exponent, but also factorization of modulus and multiplicative
inverses of some product these factors. Public key has only modulus
and exponent and can't be used with such calculation.
</p>
</blockquote>
","1269","<signing><encryption-asymmetric><security>","3","0","6","2010-07-01 14:57:00","1381612","5","2","458681","","2009-09-07 21:01:11","2009-09-03 09:06:15",""
"1372307","Why shouldn't we crypt with the private key in an asymmetrical cryptographic system?","<p>In standard use of asymmetrical cryptographic system, encryption is done with public key, decryption with private key.</p>

<p>Inversing the process, ""encryption with private key"" is called ""signing"".</p>

<p>Standard tools, despite terminology and lack of direct tools, allows to implement encryption system that would use the private key for encryption.</p>

<p>Could anyone explain clearly why such solution is vulnerable?</p>

<p><b>User Case:</b></p>

<p>Consider that Alice wants to send to Bob some stuff in a non-traditional way:</p>

<p>Alice and Bob once met and Alice gave Bob a ""public key"" generated from a private key she created BUT she warned Bob to keep it secret. AND she kept secret the private key, and didn't ever give to anyone else the public key.</p>

<p>Could Bob be sure that messages he receives from Alice (provided these are encrypted by Alice private key) are only readable by him (provided he really kept his copy of Alice's public key secret)?</p>

<p>And how compares this encryption solidity to the traditional way, which would, in our case, be Bob sending messages (encrypted by the public key of Alice) to Alice? </p>

<p><b>What the question is about</b></p>

<p>The fact that asymmetrical keys are named ""private"" and ""public"" doesn't help understanding my question. Keys have underlying properties, and it's me broadcasting the ""public key"" that gives it its ""public"" property. Please make this distinction clear before answering: I'm not considering the ""public"" and ""private"" properties of these keys but the solidity of the ""private key"" encryption versus ""public key"" encryption.</p>

<p>I cannot use another terminology even if it is misleading in this special case.</p>

<p>I know that this case is non-traditional, and could lead to several inconsistency, or is not the point of the asymmetrical crypto systems as Bob and Alice here share some sort of a common secret and that's not the point of asymmetrical crypto.</p>

<p>I saw several Stackoverflow answers which suggest that ""private key"" and ""public key"" are exchangeable (just read below answers). This is not true for RSA as it is trivial to generate the public key from the secret key and this is guaranteed not to be computationally feasible in the other way round. For non-believers, the process of key generation in openssl with RSA is:</p>

<ol>
<li>generate a secret key</li>
<li>extract the public key from the secret key.</li>
</ol>

<p>If there are so big differences between ""private key"" and ""public key"", is there a solidity difference between ""private key"" encryption versus traditional ""public key"" encryption?</p>

<p><b>Short answer from long selected answer</b></p>

<p>Misunderstanding on what exactly is the ""private key"" wasn't helping me.
There's two different definition of ""private key"". The ""practical private key"", and the ""theoretical private key"".</p>

<p><em>Theoretical private key</em> from RSA theory shares mathematical symmetricity with public key: </p>

<ul>
  <li>You cannot deduce one from the other</li>
  <li>Encryption is equally solid in either way</li>
</ul>

<p><em>Practical private key</em> from RSA tools (like openssl) contains additional information for efficiency reason, and often, a part of the public key is even set by convention. These assumptions breaks the symmetricity:</p>

<ul>
  <li>It is trivial to get public key from ""pratical private key""</li>
  <li>But encryption remains equally solid</li>
</ul>

<p>For more detail, see the selected answer ! Please comment if misconceptions remains...</p>

<p><b>Edit note:</b></p>

<ul>
  <li>Asymmetrical crypto system key pairs are frequently advertised as swappable (even in current stackoverflow answers), I try to bring reflexion around the fact that it could be dangerous misunderstanding as it isn't the case in REAL life tools.</li>
  <li>Added the user case, I hope this will clarify my question</li>
  <li>Added final 'short answer'</li>
</ul>
","<p>You're misusing the terms here.</p>

<p>If the keys are truly private and public, then yes, anything encrypted with the private key can only be decrypted by the public key, but if the key is truly public, anyone can decrypt that.</p>

<p>Let's disregard that.</p>

<p>The problem here is what Bob knows. Does Bob actually know if Alice sent her public key to anyone else? If not, he can not ensure that only he can decrypt the message. There is nothing in the technology that ensures this. Anything encrypted by Alices private key can be decrypted by her public key, and thus by anyone in possession of that key. By the very nature of public keys, that should be anyone.</p>

<p>The only way to ensure that a message for Bob is only decryptable by Bob is for Bob to give Alice his public key, and make Alice encrypt everything she wants to send to Bob by his public key, which will make the data un-decryptable by anyone except Bob. Whether she also encrypts the same data by her private key (ie. signs the data) is besides the point.</p>

<p>Of course, again, Bob, cannot know that Alice did not send the exact same message to anyone else, encrypting it for others public keys.</p>
","1269","<signing><encryption-asymmetric><security>","3","0","6","2010-07-01 14:57:00","1381612","5","2","458681","","2009-09-07 21:01:11","2009-09-03 09:06:15",""
"1372307","Why shouldn't we crypt with the private key in an asymmetrical cryptographic system?","<p>In standard use of asymmetrical cryptographic system, encryption is done with public key, decryption with private key.</p>

<p>Inversing the process, ""encryption with private key"" is called ""signing"".</p>

<p>Standard tools, despite terminology and lack of direct tools, allows to implement encryption system that would use the private key for encryption.</p>

<p>Could anyone explain clearly why such solution is vulnerable?</p>

<p><b>User Case:</b></p>

<p>Consider that Alice wants to send to Bob some stuff in a non-traditional way:</p>

<p>Alice and Bob once met and Alice gave Bob a ""public key"" generated from a private key she created BUT she warned Bob to keep it secret. AND she kept secret the private key, and didn't ever give to anyone else the public key.</p>

<p>Could Bob be sure that messages he receives from Alice (provided these are encrypted by Alice private key) are only readable by him (provided he really kept his copy of Alice's public key secret)?</p>

<p>And how compares this encryption solidity to the traditional way, which would, in our case, be Bob sending messages (encrypted by the public key of Alice) to Alice? </p>

<p><b>What the question is about</b></p>

<p>The fact that asymmetrical keys are named ""private"" and ""public"" doesn't help understanding my question. Keys have underlying properties, and it's me broadcasting the ""public key"" that gives it its ""public"" property. Please make this distinction clear before answering: I'm not considering the ""public"" and ""private"" properties of these keys but the solidity of the ""private key"" encryption versus ""public key"" encryption.</p>

<p>I cannot use another terminology even if it is misleading in this special case.</p>

<p>I know that this case is non-traditional, and could lead to several inconsistency, or is not the point of the asymmetrical crypto systems as Bob and Alice here share some sort of a common secret and that's not the point of asymmetrical crypto.</p>

<p>I saw several Stackoverflow answers which suggest that ""private key"" and ""public key"" are exchangeable (just read below answers). This is not true for RSA as it is trivial to generate the public key from the secret key and this is guaranteed not to be computationally feasible in the other way round. For non-believers, the process of key generation in openssl with RSA is:</p>

<ol>
<li>generate a secret key</li>
<li>extract the public key from the secret key.</li>
</ol>

<p>If there are so big differences between ""private key"" and ""public key"", is there a solidity difference between ""private key"" encryption versus traditional ""public key"" encryption?</p>

<p><b>Short answer from long selected answer</b></p>

<p>Misunderstanding on what exactly is the ""private key"" wasn't helping me.
There's two different definition of ""private key"". The ""practical private key"", and the ""theoretical private key"".</p>

<p><em>Theoretical private key</em> from RSA theory shares mathematical symmetricity with public key: </p>

<ul>
  <li>You cannot deduce one from the other</li>
  <li>Encryption is equally solid in either way</li>
</ul>

<p><em>Practical private key</em> from RSA tools (like openssl) contains additional information for efficiency reason, and often, a part of the public key is even set by convention. These assumptions breaks the symmetricity:</p>

<ul>
  <li>It is trivial to get public key from ""pratical private key""</li>
  <li>But encryption remains equally solid</li>
</ul>

<p>For more detail, see the selected answer ! Please comment if misconceptions remains...</p>

<p><b>Edit note:</b></p>

<ul>
  <li>Asymmetrical crypto system key pairs are frequently advertised as swappable (even in current stackoverflow answers), I try to bring reflexion around the fact that it could be dangerous misunderstanding as it isn't the case in REAL life tools.</li>
  <li>Added the user case, I hope this will clarify my question</li>
  <li>Added final 'short answer'</li>
</ul>
","<blockquote>
  <p>In standard use of asymmetrical cryptographic system, encryption is done with public key, decryption with private key.</p>
</blockquote>

<p>It depends on who is doing what.  Suppose Alice wants to send a message to Bob that only Bob can decode.   Alice encrypts the message using Bob's public key (under the standard definition of 'public key', meaning the one that is known to people other than its owner).  Now only someone who knows Bob's private key (presumably, the only person who knows Bob's private key is in fact Bob) can decrypt Alice's message to Bob.</p>

<p>If Alice wants Bob to know that only she could have sent it, she can encrypt the message with her own private key, assuming Bob knows her public key, either before or after encrypting the message with Bob's public key.  Let's assume she encrypts the message with her private key, then the result with Bob's public key.  To read the message, Bob has to decrypt the message with his (Bob's) private key, and then decrypt the result again with Alice's public key.  If what he reads is now sensible text, he knows that someone who knows both Alice's private key (presumably Alice) and his public key (could be anyone at all) sent the message.</p>

<p>In practice, the asymmetric algorithms are expensive to compute, so what you really do is choose a random session key of an appropriate length and an agreed upon standard symmetric encryption algorithm such as AES.  Then the main message is encrypted with the (relatively fast) symmetric algorithm and sent as one part of the message.  The other part of the message is the encrypted - or doubly encrypted - random session key.  Bob can decrypt the session key section of the message to obtain the session key; he then uses that to decrypt the main part of the message.</p>

<p>Note that if you are sending a message to many people, you can use one encryption of the message proper, and then encrypt the session key once for each recipient, using the recipient's public key.  Each recipient can only decrypt the session key information using the key that belongs to them, but all can actually decrypt it.  If the message is substantial (say 2 MB of PDF), then this is much more economical than separately encrypting the message with each recipients public key.</p>

<blockquote>
  <p>Inversing the process, ""encryption with private key"" is called ""signing"".</p>
</blockquote>

<p>No; signing is a separate operation.  If you read Schneier's ""<a href=""http://www.schneier.com/book-practical.html"" rel=""noreferrer"">Practical Cryptography</a>"", you'll see that the authors suggest using one public/private key pair for encryption, and a second pair for signature work.  For example, a signature encrypts a fixed length hash of the original message using the private key from the signing key.  Anybody who knows the public key part of the signing key can then decrypt the signature to obtain the hash of the original message.  Presumably, the same recipient can also decrypt the message (using the public key of the signature key pair), and then can check that the hash of the message received matches the hash derived from the signature.  Any mismatch indicates a problem and the message should be discarded.</p>

<p>There are many ways to do these things - depending on the security requirements.</p>

<p>But the basic point is that one person knows the private key of an asymmetric key, and potentially many people know the public part of the asymmetric key (and this is perfectly safe).  Data can be encrypted by the sender using the recipients public key; it may also be encrypted by the sender using their own private key.  The recipient can decrypt the received message using their own private key and, if necessary, using the sender's public key.</p>

<hr>

<p>The question, even as amended at about 2009-09-05T13:00-07:00, is not completely coherent, IMNSHO.</p>

<p>You should read chapter 13 ""RSA"" in ""Practical Cryptography"" (probably after reading some of the earlier chapters too - most notably section 3.3 Public-Key Encryption).</p>

<h3>Notation for Encryption and Decryption</h3>

<p>Let's define a bit of notation for discussing orthodox public key cryptography.  Let's start with basic symmetric encryption:</p>

<ul>
<li>C = E(K,m) is the encrypted message (cipher text, C) generated by encryption algorithm E using key K on (plain text) message m.</li>
<li>P = D(K,C) is the plain text message (plain text, P) discovered by decryption algorith D using key K on (encrypted) message c.</li>
<li>To be a working system, m = P, so D(K,E(K,m)) = m.</li>
</ul>

<p>So far, this notation applies to symmetric encryption because the same value K is used in both encryption and decryption.  Anyone who knows K (and the algorithm, but Kerckhoff's Principle that 'secrecy is in the keys' means that you assume the attackers know the algorithm - any contrary assumption is cryptographic 'snake oil') can decrypt the message.</p>

<p>With an asymmetric encryption system, E<sub>a</sub> and D<sub>a</sub> are the encryption and decryption methods for algorithm A.  The key distinguishing feature of an asymmetric cryptographic cipher is that the key K<sub>encrypt</sub> used by E<sub>a</sub> is different from the key K<sub>decrypt</sub> used by D<sub>a</sub>.  Further, to be practical, it must be computationally infeasible to deduce K<sub>decrypt</sub> even if you know K<sub>encrypt</sub> and vice versa.</p>

<p>With asymmetric encryption, Alice creates a pair of keys, (S<sub>alice</sub>, P<sub>alice</sub>).  Conventionally, S<sub>alice</sub> is the secret key and P<sub>alice</sub> is the public key.  Note that Alice knows both keys.  All that matters is:</p>

<ol>
<li>S<sub>alice</sub> and P<sub>alice</sub> are different.</li>
<li>Alice does not let anyone else know about one of the keys (S<sub>alice</sub>); it is crucial that this information is not known to anyone else.</li>
<li>Alice can let other people know about the other key (P<sub>alice</sub>) without compromising the security of the system.</li>
</ol>

<p>Similarly, Bob will create a pair of keys, (S<sub>bob</sub>, P<sub>bob</sub>).  Note that:</p>

<ul>
<li>Bob knows the keys S<sub>bob</sub>, P<sub>bob</sub>, and P<sub>alice</sub>.</li>
<li>Alice knows the keys S<sub>alice</sub>, P<sub>alice</sub>, and P<sub>bob</sub>.</li>
</ul>

<h3>Alice sends a message to Bob</h3>

<p>Now, when Alice wants to send a message, M<sub>alice-bob</sub>, to Bob so that Bob can read it (but no-one else can), she has to encrypt it with Bob's key P<sub>bob</sub>.  So, she creates a message:</p>

<ul>
<li>C<sub>alice-bob</sub> = E<sub>a</sub>(P<sub>bob</sub>, M<sub>alice-bob</sub>)</li>
</ul>

<p>Bob knows (from external evidence) that the message was encrypted with P<sub>bob</sub>, so he knows that he must decrypt it with S<sub>bob</sub>:</p>

<ul>
<li>M<sub>alice-bob</sub> = D<sub>a</sub>(S<sub>bob</sub>, C<sub>alice-bob</sub>)</li>
</ul>

<p>However, at this point, all he knows about the message is that it came from someone who knew his P<sub>bob</sub> key.  He does not know that it came from Alice except via extrinsic evidence.</p>

<p>If Bob and Alice agree that their messages must be encrypted such that they are both confident that the message received came from the other, then both must be confident that no-one other than Alice knows S<sub>alice</sub> and that no-one other than Bob knows S<sub>bob</sub>.  They must also be confident that P<sub>alice</sub> is known to Bob and Bob must be confident that P<sub>alice</sub> really does belong to Alice, and that P<sub>bob</sub> is known to Alice and Alice must be confident that P<sub>bob</sub> really does belong to Bob.  Establishing these trust relationships is a lot of what PKI (public key infrastructure) is about.</p>

<p>Assuming that these criteria are met, then Alice can send her message to Bob in such a way that Bob is confident that only Alice could have sent it.  As outlined previously, the mechanism is a double encryption:</p>

<ul>
<li>C1<sub>alice-bob</sub> = E<sub>a</sub>(S<sub>alice</sub>,M<sub>alice-bob</sub>)</li>
<li>C2<sub>alice-bob</sub> = E<sub>a</sub>(P<sub>bob</sub>,C1<sub>alice-bob</sub>)</li>
</ul>

<p>Alice sends C2<sub>alice-bob</sub> to Bob (along with some signature or MAC to confirm that it was not corrupted in transit), and then Bob computes:</p>

<ul>
<li>D1<sub>alice-bob</sub> = D<sub>a</sub>(S<sub>bob</sub>,C2<sub>alice-bob</sub>)</li>
<li>D2<sub>alice-bob</sub> = D<sub>a</sub>(P<sub>alice</sub>,D1<sub>alice-bob</sub>)</li>
</ul>

<p>If everything has gone according to plan, D2<sub>alice-bob</sub> = M<sub>alice-bob</sub>.</p>

<h3>Mechanics of RSA Key Pairs</h3>

<p>The RSA encryption algorithm is based on the fact that if you have two publicly known numbers (which are two parts of one public key), the exponent <em>e</em> and the modulus <em>n</em>, then given a message <em>m</em>, it is easy to compute <em>c</em> = <em>m</em><sup><em>e</em></sup> mod <em>n</em>.  However, it is computationally infeasible to deduce <em>m</em> given just <em>c</em> (and <em>e</em> and <em>n</em>).  If, however, you know another exponent, <em>d</em>, then you can magically calculate <em>r</em> = <em>c</em><sup><em>d</em></sup> mod <em>n</em>, and <em>r</em> = <em>m</em> if you have computed <em>e</em>, <em>d</em> and <em>n</em> appropriately.  It is not feasible to compute <em>d</em> from <em>e</em> and <em>n</em> without knowing some other information.</p>

<p>Under the RSA encryption scheme, you start work with two (large) randomly determined prime numbers, <em>p</em> and <em>q</em>, and their product is <em>n</em>.  The RSA algorithm is predicated on the fact that it is extremely difficult to factor <em>n</em> (determine <em>p</em> and <em>q</em> given just <em>n</em>); if anyone ever finds an easy way of factoring large numbers, then the RSA algorithm is instantly broken.</p>

<p>Once you have <em>n</em>, you need to determine exponents <em>e</em> and <em>d</em> such that:</p>

<ul>
<li><em>ed</em> = 1 mod <em>t</em> where <em>t</em> = LCM(p-1, q-1), and LCM is the least common multiple.</li>
</ul>

<p>You can choose one of the two values as a small odd number - Schneier and Ferguson suggest <em>e</em> = 3, for example.  You then calculate <em>d</em> using some computations that they cover in about 6 pages of their book.  Typically, <em>d</em> will be a rather large number.  You can then publish the pair (<em>e</em>, <em>n</em>) as the composite public key, keeping the values (<em>p</em>, <em>q</em>, <em>t</em>, <em>d</em>) secret as the private key.  Given <em>e</em> and <em>n</em>, it is not computationally feasible to deduce <em>d</em> without first factoring <em>n</em>.  ""Practical Cryptography"" suggests using two different pairs (<em>e<sub>1</sub></em>, <em>d<sub>1</sub></em>) and (<em>e<sub>2</sub></em>, <em>d<sub>2</sub></em>), derived from the same value <em>n</em>, where you use <em>e<sub>1</sub></em> to encrypt messages, and <em>e<sub>2</sub></em> for digital signatures; they even suggest using the values 3 and 5 for these.</p>

<hr>

<h3>OpenSSL and Key Generation</h3>

<p>Your description of how the RSA keys are generated by OpenSSL is confused, I believe.</p>

<p>The generation process first has to generate to large random prime numbers, <em>p</em> and <em>q</em> in the notation above.  There are stochastic methods for determining whether a given large number is (probably) prime; it takes a little while to compute two such prime numbers.  Taken together, these are used to compute first <em>n</em>, and then <em>d</em> (assuming <em>e</em> is established by some convention).  The two stages you see in OpenSSL are determining <em>n</em>, and then determining <em>d</em>.</p>

<hr>

<h3>Dissection of User Case</h3>

<p>The question says:</p>

<blockquote>
  <p>Consider that Alice wants to send to Bob some stuff in a non-traditional way:</p>
  
  <p>Alice and Bob once met and Alice gave Bob a ""public key"" generated from a private key she created BUT she warned Bob to keep it secret. AND she kept secret the private key, and didn't ever give to anyone else the public key.</p>
</blockquote>

<p>So far, so good. The 'public key' isn't very public, but there's no harm in that.</p>

<blockquote>
  <p>Could Bob be sure that messages he receives from Alice (provided these are encrypted by Alice private key) are only readable by him (provided he really kept his copy of Alice's public key secret)?</p>
</blockquote>

<p>If the encryption technology is of any use, then yes; only Alice and Bob can read the message that Alice encrypted with her secret key because only Alice and Bob know the public key that goes with her secret key.</p>

<blockquote>
  <p>And how compares this encryption solidity to the traditional way, which would, in our case, be Bob sending messages (encrypted by the public key of Alice) to Alice?</p>
</blockquote>

<p><strong>Confusion</strong>: the section started by discussing Alice sending messages to Bob; now you've switched to Bob sending messages to Alice.</p>

<p>When Bob and Alice met, Alice gave Bob her P<sub>alice</sub> public key.  Presumably, Bob also gave Alice his P<sub>bob</sub> public key.  And both public keys have very limited public circulation - that's good, but not crucial to the security of the system.</p>

<p>Now, when Bob wants to send a message to Alice, he can encrypt it with her P<sub>alice</sub> public key, and Alice (and only Alice) can decrypt the message using her S<sub>alice</sub> secret key.  Alternatively, Bob could encrypt the message with his S<sub>bob</sub> secret key, and Alice could decrypt it with Bob's P<sub>bob</sub> public key.  Both sets of encryption and decryption would work.</p>

<blockquote>
  <p><strong>What the question is about</strong></p>
  
  <p>The fact that asymmetrical keys are named ""private"" and ""public"" doesn't help understanding my question. Keys have underlying properties, and it's me broadcasting the ""public key"" that gives it its ""public"" property. Please make this distinction clear before answering: I'm not considering the ""public"" and ""private"" properties of these keys but the solidity of the ""private key"" encryption versus ""public key"" encryption.</p>
</blockquote>

<p>It is equally reliable to encrypt with the correct private key and decrypt with the correct public key as it is to encrypt with the correct public key and decrypt with the correct private key.  The difference is in who can do which operation.  If you understand clearly who is doing the encrypting and who is doing the decrypting, and who knows which keys, then the secrecy of the methods become fairly clear.</p>

<blockquote>
  <p>I cannot use another terminology even if it is misleading in this special case.</p>
</blockquote>

<p>Well, the 'public keys' in your case are not all that widely known, but that's all that's unusual about it.</p>

<blockquote>
  <p>I know that this case is non-traditional, and could lead to several inconsistency, or is not the point of the asymmetrical crypto systems as Bob and Alice here share some sort of a common secret and that's not the point of asymmetrical crypto.</p>
</blockquote>

<p>The whole point of asymmetric encryption schemes is that it does not matter whether the attackers (classically called Eve, the eavesdropper) knows the public key.  As long as the private keys are kept private by Alice and Bob, the messages can be sent securely.  However, you must understand that if Alice sends a message to Bob that is encrypted only by Alice's secret key, then anyone (such as Eve) who knows Alice's public key can read the message.  Eve can't create a fake message that purports to come from Alice unless she also knows the secret key - if Eve discovers Alice's secret key, Eve can pretend to be Alice at any time she likes.  But she can read it.  If Alice sends a message to Bob that is encrypted only by Bob's public key, then only Bob can read the message (using his secret key), but Bob has no way of knowing whether it actually came from Alice or whether Eve sent it pretending to be Alice.  That's why you have to work hard to ensure that Bob knows that only Alice could have sent the message, and Alice knows that only Bob can read the message.</p>
","1269","<signing><encryption-asymmetric><security>","3","9","6","2010-07-01 14:57:00","1381612","5","2","458681","","2009-09-07 21:01:11","2009-09-03 09:06:15",""
"1372307","Why shouldn't we crypt with the private key in an asymmetrical cryptographic system?","<p>In standard use of asymmetrical cryptographic system, encryption is done with public key, decryption with private key.</p>

<p>Inversing the process, ""encryption with private key"" is called ""signing"".</p>

<p>Standard tools, despite terminology and lack of direct tools, allows to implement encryption system that would use the private key for encryption.</p>

<p>Could anyone explain clearly why such solution is vulnerable?</p>

<p><b>User Case:</b></p>

<p>Consider that Alice wants to send to Bob some stuff in a non-traditional way:</p>

<p>Alice and Bob once met and Alice gave Bob a ""public key"" generated from a private key she created BUT she warned Bob to keep it secret. AND she kept secret the private key, and didn't ever give to anyone else the public key.</p>

<p>Could Bob be sure that messages he receives from Alice (provided these are encrypted by Alice private key) are only readable by him (provided he really kept his copy of Alice's public key secret)?</p>

<p>And how compares this encryption solidity to the traditional way, which would, in our case, be Bob sending messages (encrypted by the public key of Alice) to Alice? </p>

<p><b>What the question is about</b></p>

<p>The fact that asymmetrical keys are named ""private"" and ""public"" doesn't help understanding my question. Keys have underlying properties, and it's me broadcasting the ""public key"" that gives it its ""public"" property. Please make this distinction clear before answering: I'm not considering the ""public"" and ""private"" properties of these keys but the solidity of the ""private key"" encryption versus ""public key"" encryption.</p>

<p>I cannot use another terminology even if it is misleading in this special case.</p>

<p>I know that this case is non-traditional, and could lead to several inconsistency, or is not the point of the asymmetrical crypto systems as Bob and Alice here share some sort of a common secret and that's not the point of asymmetrical crypto.</p>

<p>I saw several Stackoverflow answers which suggest that ""private key"" and ""public key"" are exchangeable (just read below answers). This is not true for RSA as it is trivial to generate the public key from the secret key and this is guaranteed not to be computationally feasible in the other way round. For non-believers, the process of key generation in openssl with RSA is:</p>

<ol>
<li>generate a secret key</li>
<li>extract the public key from the secret key.</li>
</ol>

<p>If there are so big differences between ""private key"" and ""public key"", is there a solidity difference between ""private key"" encryption versus traditional ""public key"" encryption?</p>

<p><b>Short answer from long selected answer</b></p>

<p>Misunderstanding on what exactly is the ""private key"" wasn't helping me.
There's two different definition of ""private key"". The ""practical private key"", and the ""theoretical private key"".</p>

<p><em>Theoretical private key</em> from RSA theory shares mathematical symmetricity with public key: </p>

<ul>
  <li>You cannot deduce one from the other</li>
  <li>Encryption is equally solid in either way</li>
</ul>

<p><em>Practical private key</em> from RSA tools (like openssl) contains additional information for efficiency reason, and often, a part of the public key is even set by convention. These assumptions breaks the symmetricity:</p>

<ul>
  <li>It is trivial to get public key from ""pratical private key""</li>
  <li>But encryption remains equally solid</li>
</ul>

<p>For more detail, see the selected answer ! Please comment if misconceptions remains...</p>

<p><b>Edit note:</b></p>

<ul>
  <li>Asymmetrical crypto system key pairs are frequently advertised as swappable (even in current stackoverflow answers), I try to bring reflexion around the fact that it could be dangerous misunderstanding as it isn't the case in REAL life tools.</li>
  <li>Added the user case, I hope this will clarify my question</li>
  <li>Added final 'short answer'</li>
</ul>
","<p>I think that you are missing the point of public/private key encryption (at least as I understand it).</p>

<p>In the situation you have, symmetric encryption would work just as well. The reason to use non symmetric encryption is a matter of scale.</p>

<p>Say you have, not just Bob and Alice, but imaginary people for every letter of the alphabet. These people want to be able to send messages to anyone, ensuring sure that only the recipient can read it. Using a normal, symmetric encryption, this would require a shared key between every person, so if we have the 26 people from the alphabet town, that is <code>26x25</code> keys, with every person having to remember and secure 25 secret keys.</p>

<p>Enter symmetric (aka public/private key) encryption. Now every person has a private key, and a public key, with the normal rules. To send a message to Fred, you look up his (and there is only one) public key. Then you send him the message. Only Fred can read this message. In this scheme, you have <code>26x2</code> keys, and each person only needs to remember and secure <strong>1</strong> secret key. There also needs to be a source of public keys, but this is easy.</p>

<p>Using asymmetric encryption the way you describe, with a pair of keys for every set of people, would then require <code>26x25x2</code> keys.</p>

<p>So again, it is about scalability. The number of keys needed for symmetric schemes is <code>N^2-N</code>, where in asymmetric schemes, it is only <code>2*N</code>.</p>
","1269","<signing><encryption-asymmetric><security>","3","1","6","2010-07-01 14:57:00","1381612","5","2","458681","","2009-09-07 21:01:11","2009-09-03 09:06:15",""
"18206667","CREATE MASTER KEY - Password validation failed","<p>logged in as 'sa' in MS sql server management studio, when I try</p>

<pre><code>execute as login='sa'
CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'S0URCE_DB KEY Pa$$W0rd'
</code></pre>

<p>it always takes more than 1 minute to get this error message, whatever kind of password I use.
password enforcement Policy is unchecked for login sa.</p>

<p>this is obviously not corresponding to the real error but have no clues what so ever it is.
could it be some Windows issue?
please help</p>

<pre><code>Msg 15119, Level 16, State 1, Line 4
Échec de la validation de mot de passe. Ce mot de passe ne répond pas aux exigences de la DLL de filtre de mots de passe.
</code></pre>

<p>English translation: <code>Password validation failed. The password does not meet the requirements of the password filter DLL.</code></p>

<p>print @@version</p>

<pre><code>Microsoft SQL Server 2012 (SP1) - 11.0.3128.0 (X64) 
    Dec 28 2012 20:23:12 
    Copyright (c) Microsoft Corporation
    Express Edition (64-bit) on Windows NT 6.1 &lt;X64&gt; (Build 7601: Service Pack 1)
</code></pre>
","<p>If you are sure your password policies are not the problem, it must be the other option: a password filter. Check with your administrator if he has installed such for security reasons: <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/ms721766.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/windows/desktop/ms721766.aspx</a></p>
","1248","<sql-server><tsql><password-encryption><encryption-asymmetric><sql-server-2012-express>","2","0","1","2013-09-23 15:42:29","","0","","1632534","","2013-08-13 11:13:51","2013-08-13 10:27:34",""
"15182572","Decryption with openssl not working","<p>Here is my php script</p>

<pre><code>&lt;?php
$pubfile = fopen(""public_key.pem"", ""r"");
$public = fread($pubfile, 8192);
fclose($pubfile);
openssl_get_publickey($public);

$prifile = fopen(""private_key.pem"", ""r"");
$private = fread($prifile, 8192);
fclose($prifile);
openssl_get_privatekey($private);

$plaintext = ""hello"";

openssl_public_encrypt ($plaintext , $crypted , $public);

openssl_private_decrypt($crypted, $decrypted, $private);
echo $decrypted;
?&gt;
</code></pre>

<p>my respective public and private keys</p>

<p>private_key.pem</p>

<pre><code>    -----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAtwxvPpbvbeJCztWlQCC0w2mQTNICarpIkbFTzlEooXA8Zo30
sN9cdH0Ifa/pIhfx0Lbm+e03Fz5NZelJZ5QRiRfoN9tcb5zYrwvVWx1SR6Zo5moS
S5YEvVSWVpu3D7x3IO2XVtTHlWTTRZk2c+ZuFR3eIwDZbmuOiTmuJMQCJiRd8pqf
4sVCoKzWrUmBuT2pc/sdUQ4IPylGK3yGVyxHNa8gCkBs/zVq3I0Zu7Nx8mW8DTn9
EvP02mkFHynJZgKE0SJftu6Mp9BDl4qR4T8896K+Z1Fi3qx3iK6nkjYjXCYYZB90
6uWiqm7BK/4zbzuc604+BZ4LOPgCsO+aZjx3ywIDAQABAoIBABgTfp5Q4/UkCX2D
BFVG9/+r5trz1HWNQvZGyKseaaWySX+DtGd/OX3o5DED7joZxCibpg3BcbmQ7EU3
RfxlsVjC2DxgkevsSWPcvpdZZ/UcojeMRBPFC6KLeaqymIVtWI3wMjOtkQLJXDCP
UmY0LM6COzGHbxHi+8B44brcPRwe+zJK5ALhPfFEyPsnz9Rw2PLBWceXNeZYN0ja
C699r+a/t0kdJ0+49LLTvFjFECZLArZTK1GZbzACeM/fFl7XvK3tsdAkizys0Dwl
eyDtINkWlg+hzt8uijVY78MvP36RM8k4QIjSX/2p/jupsyZD4I2R9OW+ml9sImok
Ud5YKaECgYEA7xbLLvZ5ddpf/yBSVpGytfU/PzWK5L9cPRbrQPll6iKgimAOTULi
VQAQYaCDL/er/zjVU+a2Kxv1G8yX/LXHXtpSbxIVvgTqtAuGYT0hGkCFtUQaviJG
z/r3DnGiFu+l8FPxw+CQEgeeyNG49TzyA7aODswWm3o6aWElptJDdQ8CgYEAw/7p
RQkgLaKzLNidCNDNq/4/8zmJoMe6GVLGl+HVHKzn6pPZfctI201yaJ5LbyPaYD/2
2MlDleg4A9zZILykS3QRo/ex3H+7exYA4qQcLqXJT8D5oMlNvFiF6NWHu7WJtXlt
q05vcBXdRy6s3by1+SXyH42H6H930AIER1366YUCgYAxfLlPniqjzzCBgTIpwvyH
lxyhO7blBArWhjDpgPWsUcCDA8DSEx7/0wSRAIVG32/VYvEc7asVHzNLrrxizUlY
A75+SPMBIsllvODyrZF1epdyXodehX+8ush6T+Dp+G6TYPywu4F2iec+z9IFyLib
NiUPQQUI53LBrx74+ZqG1wKBgBhFlTXLb4S3RWEkYi4ZTZ8jGWBRm82hblZ8fcOJ
YA7xCrduH90IM7mU2bpDACx/UCfjQ/qM0iXaYDV6QBlhwybk9NpNbmVUHC+eBfYL
RMIyHcAWsdNLmqjcfZjb+LcyQB+NLhus1vgWfRS3nwjGufJk1Js7t7z/LCNCXK1J
4izRAoGBANSNXXYF32hQ8CJt/LqbtQaRcffdwoytFVps1lIlSfmu+huxZ5/yLuZt
AWy9Ob5SiAXeEbPTqYA24qn8ACYL/Ar2CskY22HRJz/poQ1FuMRjf+/qsRP0VF2a
pS4yn7u/iKCSIRheFY8w/u8gzxx/rSks/xEmoBCgOq8nguQkqa1h
-----END RSA PRIVATE KEY-----
</code></pre>

<p>public_key.pem</p>

<pre><code>    -----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnDI+Q/tbVToQ30DBB0y6
89ivB01gRhuAEYCqMeezhE8CrzQN3WGsox3Q3ortLZkbuFrMQdBN6ZjD1w0k9utx
Lr3MFRbXqAxeXd7NlCz9biBaQw1LboKr10kVyENPTRT2NrQnfsFsI6WfvMKiu62/
ZEHT80DMUvilSSuRbNKrfwMqhKiRbM83Olxepk8XBNyRimvypxaPhcEiQYFlirVq
/jvyUaJg01VjXxp1PKqXwIurF+Eu+W6b4OotLHY0EAPckNiP4XOHMNWd/NG5jV3F
mEzz5Cn9IdMDHSewcA6/rsOqVx0bZOBnSsmVLu9fPsCyrs7eBSXZSlIFKHD39HR6
eQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p><code>$crypted</code> returns to me encrypted data however decryption echos nothing. </p>

<p>I did an echo of the result and it comes back as <code>NULL</code> any ideas?</p>
","<p>Solved. I don't know what happened but after generating new key pairs script worked. I might have possibly mixed up my key pairs</p>
","1236","<php><openssl><rsa><private-key><encryption-asymmetric>","1","1","2","2013-03-03 11:03:34","15182891","2","","","","","2013-03-03 04:53:43",""
"15182572","Decryption with openssl not working","<p>Here is my php script</p>

<pre><code>&lt;?php
$pubfile = fopen(""public_key.pem"", ""r"");
$public = fread($pubfile, 8192);
fclose($pubfile);
openssl_get_publickey($public);

$prifile = fopen(""private_key.pem"", ""r"");
$private = fread($prifile, 8192);
fclose($prifile);
openssl_get_privatekey($private);

$plaintext = ""hello"";

openssl_public_encrypt ($plaintext , $crypted , $public);

openssl_private_decrypt($crypted, $decrypted, $private);
echo $decrypted;
?&gt;
</code></pre>

<p>my respective public and private keys</p>

<p>private_key.pem</p>

<pre><code>    -----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAtwxvPpbvbeJCztWlQCC0w2mQTNICarpIkbFTzlEooXA8Zo30
sN9cdH0Ifa/pIhfx0Lbm+e03Fz5NZelJZ5QRiRfoN9tcb5zYrwvVWx1SR6Zo5moS
S5YEvVSWVpu3D7x3IO2XVtTHlWTTRZk2c+ZuFR3eIwDZbmuOiTmuJMQCJiRd8pqf
4sVCoKzWrUmBuT2pc/sdUQ4IPylGK3yGVyxHNa8gCkBs/zVq3I0Zu7Nx8mW8DTn9
EvP02mkFHynJZgKE0SJftu6Mp9BDl4qR4T8896K+Z1Fi3qx3iK6nkjYjXCYYZB90
6uWiqm7BK/4zbzuc604+BZ4LOPgCsO+aZjx3ywIDAQABAoIBABgTfp5Q4/UkCX2D
BFVG9/+r5trz1HWNQvZGyKseaaWySX+DtGd/OX3o5DED7joZxCibpg3BcbmQ7EU3
RfxlsVjC2DxgkevsSWPcvpdZZ/UcojeMRBPFC6KLeaqymIVtWI3wMjOtkQLJXDCP
UmY0LM6COzGHbxHi+8B44brcPRwe+zJK5ALhPfFEyPsnz9Rw2PLBWceXNeZYN0ja
C699r+a/t0kdJ0+49LLTvFjFECZLArZTK1GZbzACeM/fFl7XvK3tsdAkizys0Dwl
eyDtINkWlg+hzt8uijVY78MvP36RM8k4QIjSX/2p/jupsyZD4I2R9OW+ml9sImok
Ud5YKaECgYEA7xbLLvZ5ddpf/yBSVpGytfU/PzWK5L9cPRbrQPll6iKgimAOTULi
VQAQYaCDL/er/zjVU+a2Kxv1G8yX/LXHXtpSbxIVvgTqtAuGYT0hGkCFtUQaviJG
z/r3DnGiFu+l8FPxw+CQEgeeyNG49TzyA7aODswWm3o6aWElptJDdQ8CgYEAw/7p
RQkgLaKzLNidCNDNq/4/8zmJoMe6GVLGl+HVHKzn6pPZfctI201yaJ5LbyPaYD/2
2MlDleg4A9zZILykS3QRo/ex3H+7exYA4qQcLqXJT8D5oMlNvFiF6NWHu7WJtXlt
q05vcBXdRy6s3by1+SXyH42H6H930AIER1366YUCgYAxfLlPniqjzzCBgTIpwvyH
lxyhO7blBArWhjDpgPWsUcCDA8DSEx7/0wSRAIVG32/VYvEc7asVHzNLrrxizUlY
A75+SPMBIsllvODyrZF1epdyXodehX+8ush6T+Dp+G6TYPywu4F2iec+z9IFyLib
NiUPQQUI53LBrx74+ZqG1wKBgBhFlTXLb4S3RWEkYi4ZTZ8jGWBRm82hblZ8fcOJ
YA7xCrduH90IM7mU2bpDACx/UCfjQ/qM0iXaYDV6QBlhwybk9NpNbmVUHC+eBfYL
RMIyHcAWsdNLmqjcfZjb+LcyQB+NLhus1vgWfRS3nwjGufJk1Js7t7z/LCNCXK1J
4izRAoGBANSNXXYF32hQ8CJt/LqbtQaRcffdwoytFVps1lIlSfmu+huxZ5/yLuZt
AWy9Ob5SiAXeEbPTqYA24qn8ACYL/Ar2CskY22HRJz/poQ1FuMRjf+/qsRP0VF2a
pS4yn7u/iKCSIRheFY8w/u8gzxx/rSks/xEmoBCgOq8nguQkqa1h
-----END RSA PRIVATE KEY-----
</code></pre>

<p>public_key.pem</p>

<pre><code>    -----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnDI+Q/tbVToQ30DBB0y6
89ivB01gRhuAEYCqMeezhE8CrzQN3WGsox3Q3ortLZkbuFrMQdBN6ZjD1w0k9utx
Lr3MFRbXqAxeXd7NlCz9biBaQw1LboKr10kVyENPTRT2NrQnfsFsI6WfvMKiu62/
ZEHT80DMUvilSSuRbNKrfwMqhKiRbM83Olxepk8XBNyRimvypxaPhcEiQYFlirVq
/jvyUaJg01VjXxp1PKqXwIurF+Eu+W6b4OotLHY0EAPckNiP4XOHMNWd/NG5jV3F
mEzz5Cn9IdMDHSewcA6/rsOqVx0bZOBnSsmVLu9fPsCyrs7eBSXZSlIFKHD39HR6
eQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p><code>$crypted</code> returns to me encrypted data however decryption echos nothing. </p>

<p>I did an echo of the result and it comes back as <code>NULL</code> any ideas?</p>
","<p>Using <code>openssl rsa</code> to dump the key contents reveals that the private and public keys you posted above have a different modulus.  For a matching keypair, the modulus would be identical in the private and public keys.  In other words, you definately mixed up different keys there.</p>

<p>To detect this, OpenSSL proper has the <a href=""https://www.openssl.org/docs/crypto/RSA_check_key.html"" rel=""nofollow""><code>RSA_check_key()</code></a> function to check whether an RSA keypair is usable, but the <a href=""http://php.net/manual/en/book.openssl.php"" rel=""nofollow"">PHP wrapper for OpenSSL</a> does not seem to expose that function to the user.</p>

<p>Public key:</p>

<pre><code>% openssl rsa -in public_key.pem -pubin -text
Public-Key: (2048 bit)
Modulus:
    00:9c:32:3e:43:fb:5b:55:3a:10:df:40:c1:07:4c:
    ba:f3:d8:af:07:4d:60:46:1b:80:11:80:aa:31:e7:
    b3:84:4f:02:af:34:0d:dd:61:ac:a3:1d:d0:de:8a:
    ed:2d:99:1b:b8:5a:cc:41:d0:4d:e9:98:c3:d7:0d:
    24:f6:eb:71:2e:bd:cc:15:16:d7:a8:0c:5e:5d:de:
    cd:94:2c:fd:6e:20:5a:43:0d:4b:6e:82:ab:d7:49:
    15:c8:43:4f:4d:14:f6:36:b4:27:7e:c1:6c:23:a5:
    9f:bc:c2:a2:bb:ad:bf:64:41:d3:f3:40:cc:52:f8:
    a5:49:2b:91:6c:d2:ab:7f:03:2a:84:a8:91:6c:cf:
    37:3a:5c:5e:a6:4f:17:04:dc:91:8a:6b:f2:a7:16:
    8f:85:c1:22:41:81:65:8a:b5:6a:fe:3b:f2:51:a2:
    60:d3:55:63:5f:1a:75:3c:aa:97:c0:8b:ab:17:e1:
    2e:f9:6e:9b:e0:ea:2d:2c:76:34:10:03:dc:90:d8:
    8f:e1:73:87:30:d5:9d:fc:d1:b9:8d:5d:c5:98:4c:
    f3:e4:29:fd:21:d3:03:1d:27:b0:70:0e:bf:ae:c3:
    aa:57:1d:1b:64:e0:67:4a:c9:95:2e:ef:5f:3e:c0:
    b2:ae:ce:de:05:25:d9:4a:52:05:28:70:f7:f4:74:
    7a:79
Exponent: 65537 (0x10001)
writing RSA key
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnDI+Q/tbVToQ30DBB0y6
89ivB01gRhuAEYCqMeezhE8CrzQN3WGsox3Q3ortLZkbuFrMQdBN6ZjD1w0k9utx
Lr3MFRbXqAxeXd7NlCz9biBaQw1LboKr10kVyENPTRT2NrQnfsFsI6WfvMKiu62/
ZEHT80DMUvilSSuRbNKrfwMqhKiRbM83Olxepk8XBNyRimvypxaPhcEiQYFlirVq
/jvyUaJg01VjXxp1PKqXwIurF+Eu+W6b4OotLHY0EAPckNiP4XOHMNWd/NG5jV3F
mEzz5Cn9IdMDHSewcA6/rsOqVx0bZOBnSsmVLu9fPsCyrs7eBSXZSlIFKHD39HR6
eQIDAQAB
-----END PUBLIC KEY-----
</code></pre>

<p>Private key:</p>

<pre><code>% openssl rsa -in private_key.pem -text
Private-Key: (2048 bit)
modulus:
    00:b7:0c:6f:3e:96:ef:6d:e2:42:ce:d5:a5:40:20:
    b4:c3:69:90:4c:d2:02:6a:ba:48:91:b1:53:ce:51:
    28:a1:70:3c:66:8d:f4:b0:df:5c:74:7d:08:7d:af:
    e9:22:17:f1:d0:b6:e6:f9:ed:37:17:3e:4d:65:e9:
    49:67:94:11:89:17:e8:37:db:5c:6f:9c:d8:af:0b:
    d5:5b:1d:52:47:a6:68:e6:6a:12:4b:96:04:bd:54:
    96:56:9b:b7:0f:bc:77:20:ed:97:56:d4:c7:95:64:
    d3:45:99:36:73:e6:6e:15:1d:de:23:00:d9:6e:6b:
    8e:89:39:ae:24:c4:02:26:24:5d:f2:9a:9f:e2:c5:
    42:a0:ac:d6:ad:49:81:b9:3d:a9:73:fb:1d:51:0e:
    08:3f:29:46:2b:7c:86:57:2c:47:35:af:20:0a:40:
    6c:ff:35:6a:dc:8d:19:bb:b3:71:f2:65:bc:0d:39:
    fd:12:f3:f4:da:69:05:1f:29:c9:66:02:84:d1:22:
    5f:b6:ee:8c:a7:d0:43:97:8a:91:e1:3f:3c:f7:a2:
    be:67:51:62:de:ac:77:88:ae:a7:92:36:23:5c:26:
    18:64:1f:74:ea:e5:a2:aa:6e:c1:2b:fe:33:6f:3b:
    9c:eb:4e:3e:05:9e:0b:38:f8:02:b0:ef:9a:66:3c:
    77:cb
publicExponent: 65537 (0x10001)
privateExponent:
    18:13:7e:9e:50:e3:f5:24:09:7d:83:04:55:46:f7:
    ff:ab:e6:da:f3:d4:75:8d:42:f6:46:c8:ab:1e:69:
    a5:b2:49:7f:83:b4:67:7f:39:7d:e8:e4:31:03:ee:
    3a:19:c4:28:9b:a6:0d:c1:71:b9:90:ec:45:37:45:
    fc:65:b1:58:c2:d8:3c:60:91:eb:ec:49:63:dc:be:
    97:59:67:f5:1c:a2:37:8c:44:13:c5:0b:a2:8b:79:
    aa:b2:98:85:6d:58:8d:f0:32:33:ad:91:02:c9:5c:
    30:8f:52:66:34:2c:ce:82:3b:31:87:6f:11:e2:fb:
    c0:78:e1:ba:dc:3d:1c:1e:fb:32:4a:e4:02:e1:3d:
    f1:44:c8:fb:27:cf:d4:70:d8:f2:c1:59:c7:97:35:
    e6:58:37:48:da:0b:af:7d:af:e6:bf:b7:49:1d:27:
    4f:b8:f4:b2:d3:bc:58:c5:10:26:4b:02:b6:53:2b:
    51:99:6f:30:02:78:cf:df:16:5e:d7:bc:ad:ed:b1:
    d0:24:8b:3c:ac:d0:3c:25:7b:20:ed:20:d9:16:96:
    0f:a1:ce:df:2e:8a:35:58:ef:c3:2f:3f:7e:91:33:
    c9:38:40:88:d2:5f:fd:a9:fe:3b:a9:b3:26:43:e0:
    8d:91:f4:e5:be:9a:5f:6c:22:6a:24:51:de:58:29:
    a1
prime1:
    00:ef:16:cb:2e:f6:79:75:da:5f:ff:20:52:56:91:
    b2:b5:f5:3f:3f:35:8a:e4:bf:5c:3d:16:eb:40:f9:
    65:ea:22:a0:8a:60:0e:4d:42:e2:55:00:10:61:a0:
    83:2f:f7:ab:ff:38:d5:53:e6:b6:2b:1b:f5:1b:cc:
    97:fc:b5:c7:5e:da:52:6f:12:15:be:04:ea:b4:0b:
    86:61:3d:21:1a:40:85:b5:44:1a:be:22:46:cf:fa:
    f7:0e:71:a2:16:ef:a5:f0:53:f1:c3:e0:90:12:07:
    9e:c8:d1:b8:f5:3c:f2:03:b6:8e:0e:cc:16:9b:7a:
    3a:69:61:25:a6:d2:43:75:0f
prime2:
    00:c3:fe:e9:45:09:20:2d:a2:b3:2c:d8:9d:08:d0:
    cd:ab:fe:3f:f3:39:89:a0:c7:ba:19:52:c6:97:e1:
    d5:1c:ac:e7:ea:93:d9:7d:cb:48:db:4d:72:68:9e:
    4b:6f:23:da:60:3f:f6:d8:c9:43:95:e8:38:03:dc:
    d9:20:bc:a4:4b:74:11:a3:f7:b1:dc:7f:bb:7b:16:
    00:e2:a4:1c:2e:a5:c9:4f:c0:f9:a0:c9:4d:bc:58:
    85:e8:d5:87:bb:b5:89:b5:79:6d:ab:4e:6f:70:15:
    dd:47:2e:ac:dd:bc:b5:f9:25:f2:1f:8d:87:e8:7f:
    77:d0:02:04:47:5d:fa:e9:85
exponent1:
    31:7c:b9:4f:9e:2a:a3:cf:30:81:81:32:29:c2:fc:
    87:97:1c:a1:3b:b6:e5:04:0a:d6:86:30:e9:80:f5:
    ac:51:c0:83:03:c0:d2:13:1e:ff:d3:04:91:00:85:
    46:df:6f:d5:62:f1:1c:ed:ab:15:1f:33:4b:ae:bc:
    62:cd:49:58:03:be:7e:48:f3:01:22:c9:65:bc:e0:
    f2:ad:91:75:7a:97:72:5e:87:5e:85:7f:bc:ba:c8:
    7a:4f:e0:e9:f8:6e:93:60:fc:b0:bb:81:76:89:e7:
    3e:cf:d2:05:c8:b8:9b:36:25:0f:41:05:08:e7:72:
    c1:af:1e:f8:f9:9a:86:d7
exponent2:
    18:45:95:35:cb:6f:84:b7:45:61:24:62:2e:19:4d:
    9f:23:19:60:51:9b:cd:a1:6e:56:7c:7d:c3:89:60:
    0e:f1:0a:b7:6e:1f:dd:08:33:b9:94:d9:ba:43:00:
    2c:7f:50:27:e3:43:fa:8c:d2:25:da:60:35:7a:40:
    19:61:c3:26:e4:f4:da:4d:6e:65:54:1c:2f:9e:05:
    f6:0b:44:c2:32:1d:c0:16:b1:d3:4b:9a:a8:dc:7d:
    98:db:f8:b7:32:40:1f:8d:2e:1b:ac:d6:f8:16:7d:
    14:b7:9f:08:c6:b9:f2:64:d4:9b:3b:b7:bc:ff:2c:
    23:42:5c:ad:49:e2:2c:d1
coefficient:
    00:d4:8d:5d:76:05:df:68:50:f0:22:6d:fc:ba:9b:
    b5:06:91:71:f7:dd:c2:8c:ad:15:5a:6c:d6:52:25:
    49:f9:ae:fa:1b:b1:67:9f:f2:2e:e6:6d:01:6c:bd:
    39:be:52:88:05:de:11:b3:d3:a9:80:36:e2:a9:fc:
    00:26:0b:fc:0a:f6:0a:c9:18:db:61:d1:27:3f:e9:
    a1:0d:45:b8:c4:63:7f:ef:ea:b1:13:f4:54:5d:9a:
    a5:2e:32:9f:bb:bf:88:a0:92:21:18:5e:15:8f:30:
    fe:ef:20:cf:1c:7f:ad:29:2c:ff:11:26:a0:10:a0:
    3a:af:27:82:e4:24:a9:ad:61
writing RSA key
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAtwxvPpbvbeJCztWlQCC0w2mQTNICarpIkbFTzlEooXA8Zo30
sN9cdH0Ifa/pIhfx0Lbm+e03Fz5NZelJZ5QRiRfoN9tcb5zYrwvVWx1SR6Zo5moS
S5YEvVSWVpu3D7x3IO2XVtTHlWTTRZk2c+ZuFR3eIwDZbmuOiTmuJMQCJiRd8pqf
4sVCoKzWrUmBuT2pc/sdUQ4IPylGK3yGVyxHNa8gCkBs/zVq3I0Zu7Nx8mW8DTn9
EvP02mkFHynJZgKE0SJftu6Mp9BDl4qR4T8896K+Z1Fi3qx3iK6nkjYjXCYYZB90
6uWiqm7BK/4zbzuc604+BZ4LOPgCsO+aZjx3ywIDAQABAoIBABgTfp5Q4/UkCX2D
BFVG9/+r5trz1HWNQvZGyKseaaWySX+DtGd/OX3o5DED7joZxCibpg3BcbmQ7EU3
RfxlsVjC2DxgkevsSWPcvpdZZ/UcojeMRBPFC6KLeaqymIVtWI3wMjOtkQLJXDCP
UmY0LM6COzGHbxHi+8B44brcPRwe+zJK5ALhPfFEyPsnz9Rw2PLBWceXNeZYN0ja
C699r+a/t0kdJ0+49LLTvFjFECZLArZTK1GZbzACeM/fFl7XvK3tsdAkizys0Dwl
eyDtINkWlg+hzt8uijVY78MvP36RM8k4QIjSX/2p/jupsyZD4I2R9OW+ml9sImok
Ud5YKaECgYEA7xbLLvZ5ddpf/yBSVpGytfU/PzWK5L9cPRbrQPll6iKgimAOTULi
VQAQYaCDL/er/zjVU+a2Kxv1G8yX/LXHXtpSbxIVvgTqtAuGYT0hGkCFtUQaviJG
z/r3DnGiFu+l8FPxw+CQEgeeyNG49TzyA7aODswWm3o6aWElptJDdQ8CgYEAw/7p
RQkgLaKzLNidCNDNq/4/8zmJoMe6GVLGl+HVHKzn6pPZfctI201yaJ5LbyPaYD/2
2MlDleg4A9zZILykS3QRo/ex3H+7exYA4qQcLqXJT8D5oMlNvFiF6NWHu7WJtXlt
q05vcBXdRy6s3by1+SXyH42H6H930AIER1366YUCgYAxfLlPniqjzzCBgTIpwvyH
lxyhO7blBArWhjDpgPWsUcCDA8DSEx7/0wSRAIVG32/VYvEc7asVHzNLrrxizUlY
A75+SPMBIsllvODyrZF1epdyXodehX+8ush6T+Dp+G6TYPywu4F2iec+z9IFyLib
NiUPQQUI53LBrx74+ZqG1wKBgBhFlTXLb4S3RWEkYi4ZTZ8jGWBRm82hblZ8fcOJ
YA7xCrduH90IM7mU2bpDACx/UCfjQ/qM0iXaYDV6QBlhwybk9NpNbmVUHC+eBfYL
RMIyHcAWsdNLmqjcfZjb+LcyQB+NLhus1vgWfRS3nwjGufJk1Js7t7z/LCNCXK1J
4izRAoGBANSNXXYF32hQ8CJt/LqbtQaRcffdwoytFVps1lIlSfmu+huxZ5/yLuZt
AWy9Ob5SiAXeEbPTqYA24qn8ACYL/Ar2CskY22HRJz/poQ1FuMRjf+/qsRP0VF2a
pS4yn7u/iKCSIRheFY8w/u8gzxx/rSks/xEmoBCgOq8nguQkqa1h
-----END RSA PRIVATE KEY-----
</code></pre>
","1236","<php><openssl><rsa><private-key><encryption-asymmetric>","1","0","2","2013-03-03 11:03:34","15182891","2","","","","","2013-03-03 04:53:43",""
"1880149","Encryption/Decryption using X509 certificate in biztalk custome pipeline component","<p>I need to use X509 certificate in the BizTalk Custom Pipeline component to Encrypt/Sign the message and to Decrypt/Verify signature, please let me know some good samples/artcile/blogs etc which explains how to acheive this. </p>

<p>RSA needs to be the encrypton algoritham.</p>

<p>Thanks.</p>
","<p>What kind of encryption are you looking for? Are you looking for raw RSA encryption, or any specific message format?</p>

<p>Out of the box, BizTalk only supports S/MIME encryption using the SMIME encoder/decoder component; it might be useful depending on exactly your format is.</p>

<p>As for how to create a custom pipeline component from scratch to do it, I recommend first starting with the <a href=""http://www.codeplex.com/btsplcw"" rel=""nofollow noreferrer"">Pipeline Component Wizard</a>. It will take care of most of the boilerplate code.</p>

<p>I do have a <a href=""http://winterdom.com/2006/04/symmetricencryptiondecryptionpipelinecomponents"" rel=""nofollow noreferrer"">sample</a> on writing custom encryption pipeline components, though my specific sample uses symmetric encryption and not RSA (but should give you a clue as to how to implement this). The code for these components can be found <a href=""http://github.com/tomasr/cryptopipeline"" rel=""nofollow noreferrer"">here</a>.</p>
","1226","<biztalk><pipeline><encryption-asymmetric>","0","1","2","2010-03-29 22:14:00","","0","","","","","2009-12-10 10:46:02",""
"1880149","Encryption/Decryption using X509 certificate in biztalk custome pipeline component","<p>I need to use X509 certificate in the BizTalk Custom Pipeline component to Encrypt/Sign the message and to Decrypt/Verify signature, please let me know some good samples/artcile/blogs etc which explains how to acheive this. </p>

<p>RSA needs to be the encrypton algoritham.</p>

<p>Thanks.</p>
","<p>Maybe this post we just uploaded can be of help: <a href=""http://www.leandrodg.com.ar/blog/2010/03/encryption-and-decryption-with-x-509-certificates/"" rel=""nofollow noreferrer"">http://www.leandrodg.com.ar/blog/2010/03/encryption-and-decryption-with-x-509-certificates/</a></p>
","1226","<biztalk><pipeline><encryption-asymmetric>","0","0","2","2010-03-29 22:14:00","","0","","","","","2009-12-10 10:46:02",""
"2841350","How to encrypt a file using a Public Key in C#?","<p>I have a 2048 bits public key (asymmetric, RSA) of which I know the Modulus and Exponent and need to encrypt a string.</p>

<p>Ideally, I want to encrypt a small string in c# and later on decrypt it with python.</p>
","<p>You will have to carefully check all standards involved, these encryptions should be cross-platform but it's vulnerable. It helps if you have a setup where you can inspect all the various byte-arrays, you don't want to be chasing an error that comes from an ASCII/UTF8 encoding difference.</p>

<p>Your title mentions a 'file', note that RSA only encrypts data up to the key size. It is usually used to encrypt (MD5/SHA1) hashes or keys for other encryptions. The RSA classes have extended support for signing and verifying signatures. </p>

<p>You will find the most relevant steps <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">here (MSDN)</a>. Note that you will have to import the keys whereas the example exports them.</p>
","1196","<c#><encryption><encryption-asymmetric>","1","1","1","2016-02-05 21:42:42","","1","2","3204551","","2016-02-05 21:42:42","2010-05-15 18:54:20",""
"25371424","How to generate Public and Private Key Pair?","<p>I have read all about asymmetric encryption in PHP. I understand the mcrypt method. I understand the requirement of having two keys (Public and Private). The only thing I could not understand that where and how I generate these key pairs? Can anyone please explain the process of key generation?
Thank You!</p>
","<p>You'll need <a href=""https://github.com/singpolyma/openpgp-php"" rel=""nofollow"">a PGP library</a> to do what you wish, but it's pretty straightforward. To create your keys, use:</p>

<pre><code>&lt;?php

require dirname(__FILE__).'/../lib/openpgp.php';
require dirname(__FILE__).'/../lib/openpgp_crypt_rsa.php';

$rsa = new Crypt_RSA();
$k = $rsa-&gt;createKey(512);
$rsa-&gt;loadKey($k['privatekey']);

$nkey = new OpenPGP_SecretKeyPacket(array(
   'n' =&gt; $rsa-&gt;modulus-&gt;toBytes(),
   'e' =&gt; $rsa-&gt;publicExponent-&gt;toBytes(),
   'd' =&gt; $rsa-&gt;exponent-&gt;toBytes(),
   'p' =&gt; $rsa-&gt;primes[1]-&gt;toBytes(),
   'q' =&gt; $rsa-&gt;primes[2]-&gt;toBytes(),
   'u' =&gt; $rsa-&gt;coefficients[2]-&gt;toBytes()
));

$uid = new OpenPGP_UserIDPacket('Test &lt;test@example.com&gt;');

$wkey = new OpenPGP_Crypt_RSA($nkey);
$m = $wkey-&gt;sign_key_userid(array($nkey, $uid));

print $m-&gt;to_bytes();
</code></pre>
","1176","<php><encryption-asymmetric>","0","1","1","2014-08-18 20:52:22","","3","","3772494","","2014-08-18 20:52:22","2014-08-18 20:21:14","2014-08-19 06:42:53"
"12301485","RsaProtectedConfigurationProvider implementation vs RSACryptoServiceProvider c#","<p>If <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">RSACryptoServiceProvider</a> cannot Encrypt data larger than it's <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.keysize.aspx"" rel=""nofollow noreferrer"">KeySize</a>, how <a href=""http://msdn.microsoft.com/en-us/library/system.configuration.rsaprotectedconfigurationprovider.aspx"" rel=""nofollow noreferrer"">RsaProtectedConfigurationProvider</a> is implemented in the .Net framework?</p>

<p>I am working on a utility that is going to be used to encrypt/decrypt some sensitive information. My two encryption provider options are DPAPI and RSA, while DPAPI not suited for web farm kind of environment, RSA is fits because of the Export/Import options with a KeyContainer. This is a stand alone application running on a workstation.</p>

<p>As I am aware that Asymmetric algorithms are not designed for large data, I just tried encrypting a string of length over 400K using the code below and it works well.</p>

<pre><code>        if (!section.SectionInformation.IsProtected)
        {
            section.SectionInformation.ProtectSection(""RSAProtectedConfigurationProvider"");
            section.SectionInformation.ForceSave = true;
            config.Save(ConfigurationSaveMode.Full);
        }
</code></pre>

<p>Definitely this implies that more things are happening behind the scenes apart from the export import key options in aspnet_regiis.exe. </p>

<p>My understanding:</p>

<ol>
<li><p>we encrypt <em>myapp.exe.config</em> with <em>RsaProtectedConfigurationProvider</em>, provide a key container name <em>myrsakeycontainer</em>, and export the public and private keys to an xml file <em>myrsakeyfile.xml</em>.</p></li>
<li><p>If we want <em>myapp.exe.config</em> to be decrypted in another computer, we import they keypair from <em>myrsakeyfile.xml</em> with a container named <em>myrsakeycontainer</em>.</p></li>
</ol>

<p>this works well. I can achieve the same thing in my project via <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">RSACryptoServiceProvider</a>. But I can't handle data that larger than the key size that 
  <code>new RSACryptoServiceProvider(cspParameters)</code>
generated for me.</p>

<ul>
<li>I want to be able to decrypt huge data (just in case) just the way
<a href=""http://msdn.microsoft.com/en-us/library/system.configuration.rsaprotectedconfigurationprovider.aspx"" rel=""nofollow noreferrer"">RsaProtectedConfigurationProvider</a> does.</li>
<li>Yes I could use a <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rijndaelmanaged.aspx"" rel=""nofollow noreferrer"">RijndaelManaged</a> (my favorite) for actual 
encryption and for the symmetric key transport (export/import) I
could use the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.aspx"" rel=""nofollow noreferrer"">RSACryptoServiceProvider</a>. This leaves me in a
situation that If I want to export/import the symmetric key, I should
first encrypt it with the public key or RSA, import it to another
machine, decrypt with the private key of RSA. Which is export the RSA
key pair along with the encrypted symmetric key. </li>
<li><p>But, when I export RSA key pair used by
<a href=""http://msdn.microsoft.com/en-us/library/system.configuration.rsaprotectedconfigurationprovider.aspx"" rel=""nofollow noreferrer"">RsaProtectedConfigurationProvider</a> via aspnet_regiis.exe, I
believe that it exports only the public/private key pair in an xml
file and no other information (like the symmetric key information).</p></li>
<li><p>So, with just the RSA key pair, how does
<a href=""http://msdn.microsoft.com/en-us/library/system.configuration.rsaprotectedconfigurationprovider.aspx"" rel=""nofollow noreferrer"">RsaProtectedConfigurationProvider</a> manage to derypt (huge - over
400K chars in my case) information that was encrypted on another
computer? <strong>In cases it uses a symmetric algorithm (perhaps?!) to
encrypt information, how is that symmetric key exported/imported to another
computer for decryption? Is that symmetric key part of the RSA key container exported via aspnet_regiis.exe or is the symmetric key is contrived dynamic based on an algorithm?</strong></p></li>
<li><p>I could get away with a Rijndael, whose key is encrypeted with an RSA
key pair and I can export/import both the RSA key pair and the
Rijndael symmetric key to another computer. (which I have done in the past)</p>

<p>I am interested to know what is used inside
<a href=""http://msdn.microsoft.com/en-us/library/system.configuration.rsaprotectedconfigurationprovider.aspx"" rel=""nofollow noreferrer"">RsaProtectedConfigurationProvider</a>. </p></li>
</ul>

<p>Any theories? concepts? links? recommendations? please..</p>

<blockquote>
  <p>Similar Question - <a href=""https://stackoverflow.com/questions/4782375/what-algorithms-are-used-by-rsaprotectedconfigurationprovider-in-web-config-ency"">What algorithms are used by RSAProtectedConfigurationProvider in web.config encyrption?</a></p>
</blockquote>
","<p>The <em>encrypted</em> symmetric key is stored in the XML <strong>alongside</strong> the encrypted configuration information that the symmetric key has encrypted.</p>

<p>If you use Reflector to look at the code, what it does is load the XML node and use the <em>asymmetric</em> RSA private key to decrypt a <em>symmetric</em> key stored within the XML node itself.</p>

<p>The function that actually does this magic is here:</p>

<p>public virtual SymmetricAlgorithm GetDecryptionKey(EncryptedData encryptedData, string symmetricAlgorithmUri);</p>

<p>Declaring Type: System.Security.Cryptography.Xml.EncryptedXml 
Assembly: System.Security, Version=2.0.0.0 </p>

<p>See the code around  </p>

<pre><code>this.m_document.SelectNodes(""//enc:EncryptedKey"", nsmgr);
</code></pre>

<p>This blog post has a nice writeup about how you pair Asymmetric and Symmetric algorithms in real-world practice: <a href=""http://pages.infinit.net/ctech/20031101-0151.html"" rel=""nofollow"">http://pages.infinit.net/ctech/20031101-0151.html</a></p>
","1171","<c#><windows><encryption-asymmetric><encryption-symmetric>","0","1","1","2012-12-12 23:50:05","13850657","0","1","-1","","2017-05-23 12:12:14","2012-09-06 13:44:08",""
"7913658","Asymmetric Encryption in Java: How to avoid different results of the same phrase?","<p>I know that one characteristic of asymetric encryption is, that if you encryt a text with the public key, you get each time different results.</p>

<p>Is there a way to get always the same result (without RSA)?</p>

<p>Sample-Code:</p>

<pre><code>PublicKey publicKey = KeyFactory.getInstance(""RSA"").generatePublic(
    new RSAPublicKeySpec(
        new BigInteger(""83087...""),
        new BigInteger(""65537"")));

PrivateKey privateKey = KeyFactory.getInstance(""RSA"").generatePrivate(
    new RSAPrivateKeySpec(
        new BigInteger(""830874...""),
        new BigInteger(""514268..."")));


Cipher cipher = Cipher.getInstance( ""RSA"" ); 
cipher.init( Cipher.ENCRYPT_MODE, publicKey );        
cipher.doFinal( ""test"");
</code></pre>
","<p>A good encryption must give different results, as it hides information more securely. It hides a fact that a <em>plain text</em> for two separate <em>cipher texts</em> is equal. It's called <em>semantic security</em>.</p>

<p>It's achieved by <a href=""http://en.wikipedia.org/wiki/Initialization_vector"" rel=""nofollow"">http://en.wikipedia.org/wiki/Initialization_vector</a>.</p>

<p>And yes, of course, the encryption is asymmetric.</p>
","1166","<java><encryption><encryption-asymmetric>","0","1","1","2012-01-17 12:38:01","7913874","5","3","372643","","2012-01-17 12:38:01","2011-10-27 08:54:52",""
"13476355","how does RSA distribute keys to the sender and receiver?","<p>I'm working on a cryptography project that involes using RSA encryption algorithm, i have implemented the RSA algorithm and understand it, but how can i securely send the private key to the receiver?</p>
","<p>When using asymmetric encryption you NEVER send the private key to the receiver. The receiver has your public key to encrypt your message encrypted with your private key.</p>

<p>Other way could be that you encrypt with the receivers public key and only he can decrypt the message with his private key.</p>

<p>So asymmetric encryption means to NEVER give your private key of hand.</p>
","1156","<java><encryption><rsa><encryption-asymmetric><secret-key>","2","0","1","2012-11-20 15:24:47","13476413","0","1","","","","2012-11-20 15:22:13",""
"54550060","How to Encrypt Password with public key in angular and Decrypt the password with private key in C#","<p>I am stuck into a task where I want to Encrypt the user password with RSA public key into Angular 7 and same decrypt with private key into C#
Please help me into this task
Many many thanks in advance.</p>
","<p>Here are some Link which are help full in this task:</p>

<p>Below libs are helpful in generating RSA Asymmetric Encryption:(Angular)</p>

<pre><code>node-rsa: https://www.npmjs.com/package/node-rsa
quick-encrypt: https://www.npmjs.com/package/quick-encrypt
asymmetric-crypto: https://www.npmjs.com/package/asymmetric-crypto
</code></pre>
","1113","<c#><.net><angular><angular7><encryption-asymmetric>","1","2","1","2019-02-08 09:47:05","54589683","11","","","","","2019-02-06 09:15:21",""
"28655352","CryptoAPI - how to extract RSA public key from private","<p>Using windows CryptoAPI, is it possible to get public RSA key from a private key which was imported (not generated)?</p>

<p>If I use CryptGenKey, I can call CryptExportPublicKeyInfo and CryptImportPublicKeyInfo to obtain the public key handle. However, when I try to do the same thing with private key decoded from PEM and imported using:</p>

<pre><code>CryptImportKey(hCSP, pKeyBuf, cbKeyBuf, 0, CRYPT_EXPORTABLE, &amp;hPrivKey)
</code></pre>

<p>import of the private key succeeds and I have a valid handle but the subsequent call to CryptExportPublicKeyInfo fails with ""Key does not exist"" error. It looks like there's another call missing between CryptImportKey and CryptExportPublicKeyInfo, but I can not find that API call.</p>
","<p>The problem with exporting/importing the public key was because private key was generated using AT_SIGNATURE, instead of AT_EXCHANGE. See the <a href=""https://groups.google.com/forum/#!topic/microsoft.public.platformsdk.security/N-Mo8jga4_8"" rel=""nofollow"">explanation</a> and the <a href=""https://gist.github.com/aleks-f/21d8ebf5547e17e71c92"" rel=""nofollow"">example code</a></p>
","1110","<rsa><public-key-encryption><cryptoapi><encryption-asymmetric>","0","1","1","2015-03-13 03:52:00","29024480","4","1","205386","","2015-03-13 03:52:00","2015-02-22 06:54:29",""
"17409960","Recommended *minimal* elliptic curve library in c","<p>Any recommendations for a c-library implementing elliptic curve cryptography - the smaller the better. </p>

<p>I know openSSL provides it, but I want something as small as possible. It doesn't need any fancy stuff like constant time encryption / decryption / signing either.</p>

<p>Bonus points for nice-looking code.</p>
","<p><a href=""http://libtom.org/?page=features&amp;newsitems=5&amp;whatfile=crypt"" rel=""nofollow"">LibTomCrypt</a> has a pretty terse ecc module.</p>
","1106","<c><encryption><encryption-asymmetric><elliptic-curve>","0","2","1","2013-07-02 18:12:16","17432818","2","1","","","","2013-07-01 17:10:10","2014-09-05 07:46:03"
"3719042","How to use secure encryption of an existing column in SQL Server 2005","<p>I want to encrypt an existing column in SQL Server 2005, using an UPDATE statement, moving the old content into the new encrypted column.</p>

<p>So I have 2 choices: Symmetric and Asymmetric.</p>

<p>The issue I have is that with a symmetric key, I have to embed the password into an SP in order to read the column like:</p>

<pre><code>-- Create key (at some earlier point)
create symmetric key sk_user_profile with algorithm = aes_192 encryption by password = 'P@ssword!!';

-- Now encrypt the contents
-- open the key so that we can use it
open symmetric key sk_user_profile decryption by password = 'P@ssword!!';

UPDATE users
SET password_enc = encryptbykey(key_guid('sk_user_profile'), password_plain, 1, user_id)

close symmetric key sk_user_profile
</code></pre>

<p>Now if I want to select the data, I still have to re-open the key with</p>

<pre><code>open symmetric key sk_user_profile decryption by password = 'P@ssword!!';
</code></pre>

<p>Which is defeating the point isn't it, as I am embedding a plain-text password within a stored procedure.</p>

<p>Some questions</p>

<ol>
<li>Is there any way around this - i.e. creating a certificate with this password and then referring to the certificate instead?</li>
<li>Would this certificate have to be purchased (like SSL), or can I create my own?</li>
<li>Is this method scalable across fail-over clustered databases, i.e. the encryption is not based on the machine, only the password provided. Therefore failover can still read the passwords</li>
</ol>

<p>Thanks for your help</p>
","<p>Basically what you need to do is this:</p>

<pre><code>create certificate MyEncryptionCertificate with subject = 'MyCertificate'

create symmetric key MySymmetricKey with algorithm = aes_256 encryption by certificate MyEncryptionCertificate
</code></pre>

<p>And then:</p>

<pre><code>open symmetric key MySymmetricKey decryption by certificate MyEncryptionCertificate

select encryptbykey(key_guid('MySymmetricKey'), 'tada')) EncryptedMessage
</code></pre>

<p>I hope this blog will help you along the way.</p>

<p><a href=""http://blog.sqlauthority.com/2009/04/28/sql-server-introduction-to-sql-server-encryption-and-symmetric-key-encryption-tutorial-with-script/"" rel=""nofollow noreferrer"">SQL SERVER – Introduction to SQL Server Encryption and Symmetric Key Encryption Tutorial with Script</a></p>

<p>And also this blog entry, which deals specifically with certificates in a failover environment.</p>

<p><a href=""http://blog.shakeeluddin.com/sql-2005-database-mirroring-with-failover-tutorial/"" rel=""nofollow noreferrer"">Solution Using Certificates Authentication on Production Servers</a></p>
","1097","<sql-server-2005><encryption-asymmetric><encryption-symmetric>","1","1","1","2010-09-15 18:38:17","3720588","1","","","","","2010-09-15 15:13:17",""
"37394995","Android RSA key length","<p>I would like to generate and store securely a 4096 bit RSA key pair on an Android device running API 18+ (4.3). The documentation states the AndroidKeyStore supports 4096 bit keys on API 18. However there is no method/way for setting the key length using the KeyPairGeneratorSpec. The setKeyLength and the setAlgorithmParameterSpec are API 19+. Since the documentation claims that the 4096 key length is supported there has to be some way of setting that.</p>
","","1056","<android><security><rsa><keystore><encryption-asymmetric>","4","","0","2016-05-23 15:57:39","","2","","","","","2016-05-23 15:30:29",""
"5917425","Porting code from c++ to c# - Encrypting with RSA PKCS#1 private key","<p>I'm trying to port this piece of code from c++ to c#:</p>

<pre><code>...
strPrivateKey = ""someBase64EncodedPrivateKey"";
long sizeKey = DecodeBase64(strPrivateKey, pKey);
const unsigned char* _pKey = pKey;
d2i_RSAPrivateKey(&amp;pRSA, &amp;_pKey, sizeKey);
...

RSA_private_encrypt(sizeOfMessage, pMessage, pSignature, pRSA, RSA_PKCS1_PADDING);

...
</code></pre>

<p>So far here is my code:</p>

<pre><code>var strPrivateKey = ""someBase64EncodedPrivateKey"";
var bytes = Convert.FromBase64String(strPrivateKey);

var rsa = new RSACryptoServiceProvider();

// How to set the private key to the rsa object?!

byte[] someDataToEncrypt = /* Set the data to encrypt */;
var encryptedData = rsa.Encrypt(someDataToEncrypt, false);
</code></pre>

<p>EDIT:
I'm not ever sure if it's the class I should refer to.</p>

<p>Thanks</p>
","<p>RSAParameters (http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsaparameters.aspx) can be fed to the RSACryptoServiceProvider class using the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider.importparameters.aspx"" rel=""nofollow"">ImportParameters</a> method. You can encode the key within the RSAParameters structure.</p>
","1052","<c#><c++><encryption-asymmetric>","2","0","2","2011-08-29 20:20:18","7235460","0","0","190327","","2011-05-06 22:05:52","2011-05-06 21:57:26",""
"5917425","Porting code from c++ to c# - Encrypting with RSA PKCS#1 private key","<p>I'm trying to port this piece of code from c++ to c#:</p>

<pre><code>...
strPrivateKey = ""someBase64EncodedPrivateKey"";
long sizeKey = DecodeBase64(strPrivateKey, pKey);
const unsigned char* _pKey = pKey;
d2i_RSAPrivateKey(&amp;pRSA, &amp;_pKey, sizeKey);
...

RSA_private_encrypt(sizeOfMessage, pMessage, pSignature, pRSA, RSA_PKCS1_PADDING);

...
</code></pre>

<p>So far here is my code:</p>

<pre><code>var strPrivateKey = ""someBase64EncodedPrivateKey"";
var bytes = Convert.FromBase64String(strPrivateKey);

var rsa = new RSACryptoServiceProvider();

// How to set the private key to the rsa object?!

byte[] someDataToEncrypt = /* Set the data to encrypt */;
var encryptedData = rsa.Encrypt(someDataToEncrypt, false);
</code></pre>

<p>EDIT:
I'm not ever sure if it's the class I should refer to.</p>

<p>Thanks</p>
","<p>Fixed it by adding:</p>

<pre><code>At the begin of the private key: ""-----BEGIN RSA PRIVATE KEY-----\r\n""
After each line of my private key : ""\r\n""
At the end of my private key: ""-----END RSA PRIVATE KEY-----""
</code></pre>

<p>And finally, I used OpenSsl.NET as library. This post originally solved my problem: 
<a href=""https://stackoverflow.com/questions/7234155/decrypting-rsa-using-openssl-net-with-existing-key"">Decrypting RSA using OpenSSL.NET with Existing Key</a></p>
","1052","<c#><c++><encryption-asymmetric>","2","0","2","2011-08-29 20:20:18","7235460","0","0","190327","","2011-05-06 22:05:52","2011-05-06 21:57:26",""
"48963747","How to decrypt data in PHP encrypted with JSEncrypt","<p>I'm trying to secure communication between a JS front-end and a PHP backend by using symmetric and asymmetric encryption. I'm creating a symmetric key on the client and encrypting it with the server's public key with JSEncrypt and sending it to the server for future use. However, I'm getting stuck when I get the data on the server side. openssl_open requires an envelope to decrypt the symmetric key and I'm not even positive what data is supposed to be in the envelope. I was under the impression that the envelope is the symmetric key that was encrypted with the public key, but using that has not worked. I've also tried different combinations of decoding as I've read that JSEncrypt encodes the message in base 64 and the key in hex, but those attempts are fruitless as well.</p>

<p><b>JS encryption code:</b></p>

<pre><code>let pub = ""-----BEGIN PUBLIC KEY-----...-----END PUBLIC KEY-----"";

//I have a function that just creates a random string of characters
let key = generateKey(32);
let aesData = CryptoJS.AES.encrypt( ""test"", key );
let symKey = aesData.key + "":::"" + aesData.iv;
let msg = aesData.toString();

let rsa = new JSEncrypt();
rsa.setPublicKey( pub );
let cryptKey = rsa.encrypt( symKey );

//I'm passing the data through a hidden form field
$(""#key"").val(cryptKey + "":::"" + msg);
</code></pre>

<p><b>PHP decryption code:</b></p>

<pre><code>$key = openssl_get_privatekey( file_get_contents( $_SERVER[""PRIV_KEY""]) );
$encryptedKey = explode( "":::"", $msg )[0];
$realMsg = base64_decode(explode( "":::"", $msg )[1]);

openssl_open($realMsg, $decrypted, $encryptedKey, $key);
return $decrypted;
</code></pre>

<p>The code above outputs nothing because the openssl_open call fails (returns false). When I base 64 decode the $encryptedKey variable, I get:</p>

<pre><code>�vEi���pΕ��d_���@����욲JE��
</code></pre>

<p>but the symmetric key changes every time, so the output changes every time as well. Like I said, I've tried different encoding combinations, but they all return similar nonsense. As the JS code shows, I've encrypted the message ""test"".</p>

<p>I've never implemented encryption before, so I might be way off the mark here, but after staring at this code for days, any insight would be appreciated.</p>

<p>Edit: I'm having problems decrypting with my private key in PHP, not with the symmetric key</p>
","<p>Figured it out!!! So, I found out that PHP has a function to decrypt without needing an envelope called <a href=""http://php.net/manual/en/function.openssl-private-decrypt.php"" rel=""nofollow noreferrer"">openssl_private_decrypt</a> that uses a private key to decrypt a message. By using that function and base 64 decoding the encrypted key, I am able to decrypt the symmetric key on the server side and will hopefully be able to decrypt the message symmetrically now. For those interested, my code on the server side is:</p>

<pre><code>$key = openssl_get_privatekey( file_get_contents( $_SERVER['PRIV_KEY'] ) );
$encryptedKey = base64_decode(explode( "":::"", $msg )[0]);

if( openssl_private_decrypt($encryptedKey, $decrypted, $key) )
{
    return $decrypted;
}
return $encryptedKey;
</code></pre>

<p>And on the client side, my code is the same as it was above. Hope this helps someone!</p>
","1030","<php><cryptojs><encryption-asymmetric><php-openssl><jsencrypt>","2","2","1","2018-02-25 19:16:32","","5","2","9405842","","2018-02-24 19:49:18","2018-02-24 14:12:00",""
"31457203","How to send and receive a DSA public/private signed message in Java","<p>I cannot find any good (complete) documentation on how to exchange a public/private key signed message in Java.</p>

<p>I have yet to find a concise document on the minimum steps needed to generate a public key and private key using DSA, sign a byte[], and verify it.</p>

<p>The <a href=""http://%20https://docs.oracle.com/javase/tutorial/security/apisign/step1.html"" rel=""nofollow"">documentation</a> from Oracle is too broken up and requires running across multiple JVMs. </p>
","<p>I have successfully signed a byte array with a private key and verified it with a public key.</p>

<p>Example.</p>

<pre><code>    byte[] data = ""hello."".getBytes();

    /* Test generating and verifying a DSA signature */
    try {
        /* generate a key pair */
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DSA"");
        keyGen.initialize(1024, new SecureRandom());
        KeyPair pair = keyGen.generateKeyPair();

        /* create a Signature object to use
         * for signing and verifying */
        Signature dsa = Signature.getInstance(""SHA/DSA""); 

        /* initialize the Signature object for signing */
        PrivateKey priv = pair.getPrivate();
        dsa.initSign(priv);

        /* Update and sign the data */
        dsa.update(data);

        /* Now that all the data to be signed
         * has been read in, sign it */
        byte[] sig = dsa.sign();

        /* Verify the signature */

        /* Initialize the Signature object for verification */
        PublicKey pub = pair.getPublic();
        dsa.initVerify(pub);

        /* Update and verify the data */
        dsa.update(data);

        boolean verifies = dsa.verify(sig);
        Assert.assertTrue(verifies);
    } catch (Exception e) {
        System.err.println(""Caught exception "" + e.toString());
    }
</code></pre>

<p>In this version, I serialize the public key into a byte array and then create a PublicKey from that byte array.</p>

<pre><code>    byte[] data = ""hello."".getBytes();

    /* Test generating and verifying a DSA signature */
    try {
        /* generate a key pair */
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""DSA"");
        keyGen.initialize(1024, new SecureRandom());
        KeyPair pair = keyGen.generateKeyPair();

        /* create a Signature object to use
         * for signing and verifying */
        Signature dsa = Signature.getInstance(""SHA/DSA""); 

        /* initialize the Signature object for signing */
        PrivateKey priv = pair.getPrivate();
        dsa.initSign(priv);

        /* Update and sign the data */
        dsa.update(data);

        /* Now that all the data to be signed
         * has been read in, sign it */
        byte[] sig = dsa.sign();

        /* Verify the signature */

        /* Initialize the Signature object for verification */
        PublicKey pub = pair.getPublic();
        /* Encode the public key into a byte array */
        byte[] encoded = pub.getEncoded();
        /* Get the public key from the encoded byte array */
        PublicKey fromEncoded = KeyFactory.getInstance(""DSA"", ""SUN"").generatePublic(new X509EncodedKeySpec(encoded));
        dsa.initVerify(fromEncoded);

        /* Update and verify the data */
        dsa.update(data);

        boolean verifies = dsa.verify(sig);
        Assert.assertTrue(verifies);
    } catch (Exception e) {
        System.err.println(""Caught exception "" + e.toString());
    }
</code></pre>
","1016","<java><public-key-encryption><encryption-asymmetric><dsa>","1","2","1","2015-07-16 14:32:58","31457204","0","","","","","2015-07-16 14:32:58",""
"2361631","Is there a way to alter a public key in a way that the decryption can still be done with the private key after some alteration?","<p>In an asymetric encryption scheme, I was wondering if it's possible to achieve the following:</p>

<ol>
<li>Bob sends to Alice his public key</li>
<li>Alice alters Bob's public key and encrypt some document with it</li>
<li>Alice sends the encrypted document to Bob</li>
<li>Bob retrieve the document but can't decrypt it with his private key</li>
<li>Later, Alice sends some additional information (probably related to the method she used to alter Bob's public key) to Bob</li>
<li>Bob uses this additional information to modify his private key and successfully decrypt the document</li>
</ol>

<p>Anyone?</p>

<p>I am assuming RSA for the keys generation, encryption and decryption but if it's easier to do with another scheme feel free to comment.</p>
","<p>Hmm, interesting.</p>

<p>You're referring to <a href=""http://en.wikipedia.org/wiki/RSA"" rel=""nofollow noreferrer"">RSA</a>, I assume?</p>

<p>FYI, RSA isn't actually used to encrypt documents. It's used to exchange keys (keys for a symmetric algorithm, like AES).</p>

<p>So what you're really talking about is an approach that changes the keys.</p>

<p>Technically (mathmatically) if you put a different number in, you'll get a different number out. So that's not an issue; changing the public key in some fashion will (assuming you convince your RSA implementation to use it, or prepare an appropriately different number) result in a different symmetric key, thus an undecryptable document by Bob (because he'll expect a different key).</p>

<p>Really, though, I'm not so sure you care about this. It's a fairly useless thing to do. <em>Perhaps</em>, however, you're actually interested in <a href=""http://en.wikipedia.org/wiki/Key_splitting"" rel=""nofollow noreferrer"">Key Splitting</a> (or ""Secret Sharing"" as wikipedia seems to call it).</p>

<p>HTH. I'm by no means an expert.</p>
","1015","<encryption><public-key><encryption-asymmetric><private-key>","3","0","4","2012-12-31 08:24:26","2361775","0","","18564","","2010-03-02 08:47:12","2010-03-02 08:03:12",""
"2361631","Is there a way to alter a public key in a way that the decryption can still be done with the private key after some alteration?","<p>In an asymetric encryption scheme, I was wondering if it's possible to achieve the following:</p>

<ol>
<li>Bob sends to Alice his public key</li>
<li>Alice alters Bob's public key and encrypt some document with it</li>
<li>Alice sends the encrypted document to Bob</li>
<li>Bob retrieve the document but can't decrypt it with his private key</li>
<li>Later, Alice sends some additional information (probably related to the method she used to alter Bob's public key) to Bob</li>
<li>Bob uses this additional information to modify his private key and successfully decrypt the document</li>
</ol>

<p>Anyone?</p>

<p>I am assuming RSA for the keys generation, encryption and decryption but if it's easier to do with another scheme feel free to comment.</p>
","<p>As silky implies in his answer, the way in which RSA is usually used to encrypt a document is in combination with a symmetric algorithm, like AES.  A secure random key is generated for the AES algorithm, the documented is encrypted with that AES key, and the AES key is encrypted with the recipient's public key.  Both parts are supplied to the recipient.</p>

<p>You can adapt this to your situation simply by sending only the document encrypted with the AES key in the first step, and withholding the AES key encrypted with the recipient's public key until the second step.  The first part will be on the order of the original file size, and the second part will be a small, constant size (on the order of the RSA key size).</p>
","1015","<encryption><public-key><encryption-asymmetric><private-key>","3","1","4","2012-12-31 08:24:26","2361775","0","","18564","","2010-03-02 08:47:12","2010-03-02 08:03:12",""
"2361631","Is there a way to alter a public key in a way that the decryption can still be done with the private key after some alteration?","<p>In an asymetric encryption scheme, I was wondering if it's possible to achieve the following:</p>

<ol>
<li>Bob sends to Alice his public key</li>
<li>Alice alters Bob's public key and encrypt some document with it</li>
<li>Alice sends the encrypted document to Bob</li>
<li>Bob retrieve the document but can't decrypt it with his private key</li>
<li>Later, Alice sends some additional information (probably related to the method she used to alter Bob's public key) to Bob</li>
<li>Bob uses this additional information to modify his private key and successfully decrypt the document</li>
</ol>

<p>Anyone?</p>

<p>I am assuming RSA for the keys generation, encryption and decryption but if it's easier to do with another scheme feel free to comment.</p>
","<p>(I assume you talk about RSA.)</p>

<p>Yes it is possible, <strong>but not 100%</strong>.</p>

<p>The public key is a part of the private key. It contains the modulus and the exponent of the key. </p>

<p>You can completely forget changing the modulus, because you would have to generate a new rsa keypair, which is the same problem as the one we are trying to solve.</p>

<p>But it is possible to change the exponent. You can select any (prime) number between 1 and your exponent as the new exponent and <strong>hope</strong> that it is coprime with the totient. Without knowing the totient it's impossible to select always a correct exponent. To find out the totient you would have to know the prime factors of the key, which means that you would have to break the key (have fun!).</p>

<p>So, <strong>it's actually impossible</strong> to have a 100% percent working method to do that, at least not while knowing only the public key.</p>

<p>If you need more information about the theory check <a href=""http://en.wikipedia.org/wiki/Rsa/"" rel=""nofollow noreferrer"">here</a></p>
","1015","<encryption><public-key><encryption-asymmetric><private-key>","3","2","4","2012-12-31 08:24:26","2361775","0","","18564","","2010-03-02 08:47:12","2010-03-02 08:03:12",""
"2361631","Is there a way to alter a public key in a way that the decryption can still be done with the private key after some alteration?","<p>In an asymetric encryption scheme, I was wondering if it's possible to achieve the following:</p>

<ol>
<li>Bob sends to Alice his public key</li>
<li>Alice alters Bob's public key and encrypt some document with it</li>
<li>Alice sends the encrypted document to Bob</li>
<li>Bob retrieve the document but can't decrypt it with his private key</li>
<li>Later, Alice sends some additional information (probably related to the method she used to alter Bob's public key) to Bob</li>
<li>Bob uses this additional information to modify his private key and successfully decrypt the document</li>
</ol>

<p>Anyone?</p>

<p>I am assuming RSA for the keys generation, encryption and decryption but if it's easier to do with another scheme feel free to comment.</p>
","<p>I hope my idea works. </p>

<p>Let us assume that <code>(e,d,n)</code> is a tuple of the RSA public exponent. The RSA private exponent and the RSA modulus <em>n</em> :</p>

<p>Select a prime number, say <em>p</em>,  between 1 and a 256 bit integer.</p>

<p>To <strong>encrypt</strong> a message <em>m</em>, compute the new public exponent as <code>e*p</code> and the ciphertext as: </p>

<p><code>c= m^{e*p} mod n</code>. </p>

<p>To <strong>decrypt</strong>, the receiver should know the prime <em>p</em>, so you send this <em>p</em> later to him, with this he computes </p>

<p>(1) <code>P = p^{-1} mod phi(n)</code></p>

<p>and</p>

<p>(2) <code>m^e=c^{P} mod n</code> </p>

<p>and </p>

<p>finally <code>m=(m^e)^d mod n</code>. This works as the receiver knows phi(n). </p>

<p>By the way, where can we use this? Is there any application you have in mind for this?</p>
","1015","<encryption><public-key><encryption-asymmetric><private-key>","3","2","4","2012-12-31 08:24:26","2361775","0","","18564","","2010-03-02 08:47:12","2010-03-02 08:03:12",""
"26987058","Reduce the length of cipher text generated from RSA algorithm","<p>I am generating a cipher text using RSA algorithm and it's working fine. But the thing is, I the cipher text generated is very high. </p>

<p>For example:</p>

<p>Plain text : 249488213</p>

<p>gets generated to,</p>

<p>Cipher text : 94489103D862769B7AE21EA42C2D400A584D0F919BBCAE2450AD1BE57EAC64E4A2F75FAB9F8FA25BCBC12AAAE58F43CCB071DC002332FF4C736F4DA96A36C3ED</p>

<p>which is too large for my use-case as it increase the file size of my plain text file to approx 2.5 times greater.</p>

<p>So my concern is, can we reduce the length of cipher text to some minimum length (despite of key size we use), or is there any other asymmetric algorithm that can help me achieve this.</p>

<p>Any help is appreciated. Thanks.</p>
","<p>RSA encryption is described as</p>

<pre><code>c = m^e mod N,
</code></pre>

<p>where <code>c</code> is a cipher text, <code>m</code> is an original message, <code>e</code> is public exponent (typically 65537) and <code>N</code> is public modulus.</p>

<p>Thus, <code>c</code> is always smaller than <code>N</code>, but in most of the cases of the same order as it. Sure you can select <code>N</code> and <code>m</code> to get a small <code>c</code>, but this will obviously lead to make encryption weaker, and you need a special key for every message.</p>

<p>Probably, the same problem will be with other assymetric cryptosystems. Shorter cipher text is easier to recover. But you can use AES, which can produce in counter mode a cipher text of the same size as an original message. Which reveals size of the message to the attacker.</p>
","1009","<rsa><public-key-encryption><encryption-asymmetric>","3","2","1","2014-11-18 20:24:55","27003365","0","1","","","","2014-11-18 05:14:40",""
"28098470","No error encrypting / decrypting data with an expired certificate using RSACryptoServiceProvider","<p>I currently doing a proof of concept to encrypt data using a certificate. It works well but now, I want to try a scenario when the certificate is expired. I created an expired certificate and I was surprise to notice that everthing works property even with the expired certificate. I was expecting an error.</p>

<p>Do you know if it's because it's a self signed certificate ?</p>

<p>Here's the code I using to test my case</p>

<pre><code>[TestMethod]
public void Encrypt_decrypt_with_expired_certificate()
{
    //Arrange
    var baseString = ""This is an encryption test"";
    X509Certificate2 newX509Certificate2 = new X509Certificate2(""d:\\testx509certExpired.pfx"", ""apassword"");
    Console.WriteLine(newX509Certificate2.NotAfter); //Show the expiration date which is in the past
    var encryptor = new CertificateEncryptor(newX509Certificate2); //This class is a simple wrapper around RSACryptoServiceProvider

    //Act
    string encryptedResult = encryptor.Encrypt(baseString); //Exception expected because of the expired certificate but not thrown

    //Assert
    Console.WriteLine(""Base string : {0}"", baseString);
    Console.WriteLine(""Encrypted string : {0}"", encryptedResult);
    Assert.IsNotNull(encryptedResult);

    //revert back
    string decryptedString = encryptor.Decrypt(encryptedResult);
    Console.WriteLine(""Decrypted string : {0}"", decryptedString);
    Assert.AreEqual(baseString, decryptedString);
}
</code></pre>

<p>Thanks</p>
","<p>As GregS said, <code>RSACryptoServiceProvider</code> class (not X509Certificate2) provides an ability to perform cryptographic operations. <code>RSACryptoServiceProvider</code> knows nothing about certificate, it knows only keys and their parameters. This is why you don't see any errors.</p>

<p>This means that certificate validation -- is your app responsibility. You should check certificate when encrypting data and skip all certificate checks to decrypt data.</p>
","995","<c#><encryption><encryption-asymmetric><x509certificate2>","2","4","2","2018-06-20 13:44:42","28104056","2","","","","","2015-01-22 20:52:58",""
"28098470","No error encrypting / decrypting data with an expired certificate using RSACryptoServiceProvider","<p>I currently doing a proof of concept to encrypt data using a certificate. It works well but now, I want to try a scenario when the certificate is expired. I created an expired certificate and I was surprise to notice that everthing works property even with the expired certificate. I was expecting an error.</p>

<p>Do you know if it's because it's a self signed certificate ?</p>

<p>Here's the code I using to test my case</p>

<pre><code>[TestMethod]
public void Encrypt_decrypt_with_expired_certificate()
{
    //Arrange
    var baseString = ""This is an encryption test"";
    X509Certificate2 newX509Certificate2 = new X509Certificate2(""d:\\testx509certExpired.pfx"", ""apassword"");
    Console.WriteLine(newX509Certificate2.NotAfter); //Show the expiration date which is in the past
    var encryptor = new CertificateEncryptor(newX509Certificate2); //This class is a simple wrapper around RSACryptoServiceProvider

    //Act
    string encryptedResult = encryptor.Encrypt(baseString); //Exception expected because of the expired certificate but not thrown

    //Assert
    Console.WriteLine(""Base string : {0}"", baseString);
    Console.WriteLine(""Encrypted string : {0}"", encryptedResult);
    Assert.IsNotNull(encryptedResult);

    //revert back
    string decryptedString = encryptor.Decrypt(encryptedResult);
    Console.WriteLine(""Decrypted string : {0}"", decryptedString);
    Assert.AreEqual(baseString, decryptedString);
}
</code></pre>

<p>Thanks</p>
","<p>When attempting to access the X509Certificate2.PublicKey.Key attribute of the certificate, a CryptographicException should be thrown if the certificate is not within its validity period.  </p>

<p>Here is how I load the public &amp; private keys from a certificate to perform cryptographic operations:</p>

<pre><code>using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

class Example

{
    private RSACryptoServiceProvider publicKey,
                                     privateKey;

    private bool getRSAKeys(X509Certificate2 cert, StoreLocation location)
    {
        try
        {
            //This will throw a CryptographicException if the certificate is expired
            publicKey = (RSACryptoServiceProvider)cert.PublicKey.Key;

            privateKey = (RSACryptoServiceProvider)cert.PrivateKey;
            return true;
        }
        catch (CryptographicException e)
        {
            Console.WriteLine(""The certificate is expired or otherwise unusable\r\n"" + e.ToString());
            return false;
        }
    }
</code></pre>
","995","<c#><encryption><encryption-asymmetric><x509certificate2>","2","0","2","2018-06-20 13:44:42","28104056","2","","","","","2015-01-22 20:52:58",""
"54087514","Asymmetric Encryption using Nodejs Crypto module","<p>I want to use the crypto module of nodejs10, to make an asymmetric encryption. </p>

<p>I find the answer <a href=""https://stackoverflow.com/questions/8750780/encrypting-data-with-public-key-in-node-js"">here</a> 
But when I try to run the code below I got this error: </p>

<pre><code>return method(toBuf(key), buffer, padding, passphrase);
           ^
Error: error:0608B096:digital envelope routines:EVP_PKEY_encrypt_init:operation not supported for this keytype.
</code></pre>

<p>The code:</p>

<pre><code>var crypto = require(""crypto"");
var path = require(""path"");
var fs = require(""fs"");
const passphrase = ""mySecret""

var encryptStringWithRsaPublicKey = function(toEncrypt, relativeOrAbsolutePathToPublicKey) {
  var absolutePath = path.resolve(relativeOrAbsolutePathToPublicKey);
  var publicKey = fs.readFileSync(absolutePath, ""utf8"");
  var buffer = new Buffer(toEncrypt);
  var encrypted = crypto.publicEncrypt(publicKey, buffer);
  return encrypted.toString(""base64"");
};

var decryptStringWithRsaPrivateKey = function(toDecrypt, relativeOrAbsolutePathtoPrivateKey) {
  var absolutePath = path.resolve(relativeOrAbsolutePathtoPrivateKey);
  var privateKey = fs.readFileSync(absolutePath, ""utf8"");
  var buffer = new Buffer(toDecrypt, ""base64"");
  //var decrypted = crypto.privateDecrypt(privateKey, buffer);
  const decrypted = crypto.privateDecrypt(
    {
      key: privateKey.toString(),
      passphrase: passphrase,
    },
    buffer,
  )
  return decrypted.toString(""utf8"");
};

const { writeFileSync } = require('fs')
const { generateKeyPairSync } = require('crypto')

function generateKeys() {
  const { privateKey, publicKey } = generateKeyPairSync('ec', {
    namedCurve: 'secp256k1',
    publicKeyEncoding: {
      type: 'spki',
      format: 'pem',
    },
    privateKeyEncoding: {
      type: 'pkcs8',
      format: 'pem',
      cipher: 'aes-256-cbc',
      passphrase: passphrase,
    },
  })

  writeFileSync('private.pem', privateKey)
  writeFileSync('public.pem', publicKey)
}

generateKeys();

let a = encryptStringWithRsaPublicKey(""hello"", ""public.pem"")
let b = decryptStringWithRsaPrivateKey(a, ""private.pem"");
console.log(b)
</code></pre>

<p>I didn't find what is the problem, it seems like the problem with the passphrase.</p>
","<p>Updating a few parameters on the private key generation will make this work:</p>

<pre><code>var crypto = require(""crypto"");
var path = require(""path"");
var fs = require(""fs"");
const passphrase = ""mySecret""

var encryptStringWithRsaPublicKey = function(toEncrypt, relativeOrAbsolutePathToPublicKey) {
    var absolutePath = path.resolve(relativeOrAbsolutePathToPublicKey);
    var publicKey = fs.readFileSync(absolutePath, ""utf8"");
    var buffer = new Buffer(toEncrypt);
    var encrypted = crypto.publicEncrypt(publicKey, buffer);
    return encrypted.toString(""base64"");
};

var decryptStringWithRsaPrivateKey = function(toDecrypt, relativeOrAbsolutePathtoPrivateKey) {
    var absolutePath = path.resolve(relativeOrAbsolutePathtoPrivateKey);
    var privateKey = fs.readFileSync(absolutePath, ""utf8"");
    var buffer = new Buffer(toDecrypt, ""base64"");
    //var decrypted = crypto.privateDecrypt(privateKey, buffer);
    const decrypted = crypto.privateDecrypt(
        {
            key: privateKey.toString(),
            passphrase: passphrase,
        },
        buffer,
    )
    return decrypted.toString(""utf8"");
};

const { writeFileSync } = require('fs')
const { generateKeyPairSync } = require('crypto')

function generateKeys() {
    const { publicKey, privateKey } = generateKeyPairSync('rsa', 
    {
            modulusLength: 4096,
            namedCurve: 'secp256k1', 
            publicKeyEncoding: {
                type: 'spki',
                format: 'pem'     
            },     
            privateKeyEncoding: {
                type: 'pkcs8',
                format: 'pem',
                cipher: 'aes-256-cbc',
                passphrase: passphrase
            } 
    });

    writeFileSync('private.pem', privateKey)
    writeFileSync('public.pem', publicKey)
}

generateKeys();

let a = encryptStringWithRsaPublicKey(""hello"", ""public.pem"")
let b = decryptStringWithRsaPrivateKey(a, ""private.pem"");
console.log(b)
</code></pre>
","989","<node.js><cryptojs><encryption-asymmetric>","1","2","1","2019-01-13 05:28:06","54088190","0","1","1033581","","2019-01-13 05:28:06","2019-01-08 08:04:17",""
"17348420","Private key signature different on iOS and MacOSX","<p>I implemented a category method on the NSData class which returns a signature of the data using an SHA-1 hash and subsequent encryption with a private key as follows:</p>

<pre><code>- (NSData *)signatureWithKey:(SecKeyRef)keyRef {

    if (keyRef == NULL) {
        return nil;
    }

    NSData *sha1Digest = [self dataWithSHA1Digest];

    size_t maxLength = SecKeyGetBlockSize(keyRef) - 11;

    if ([sha1Digest length] &gt; maxLength) {
        NSString *reason = [NSString stringWithFormat:@""Digest is too long to sign with this key, max length is %ld and actual length is %ld"", maxLength, (unsigned long)[self length]];
        NSException *ex = [NSException exceptionWithName:@""BMInvalidArgumentException"" reason:reason userInfo:nil];
        @throw ex;
    }

#if TARGET_OS_IPHONE
    OSStatus status = noErr;

    uint8_t *plainBuffer = (uint8_t *)[sha1Digest bytes];
    size_t plainBufferSize = [sha1Digest length];
    size_t cipherBufferSize = SecKeyGetBlockSize(keyRef);
    uint8_t *cipherBuffer = malloc(cipherBufferSize * sizeof(uint8_t));

    status = SecKeyRawSign(keyRef,
                           kSecPaddingPKCS1SHA1,
                           plainBuffer,
                           plainBufferSize,
                           &amp;cipherBuffer[0],
                           &amp;cipherBufferSize
                           );

    if (status == noErr) {
        return [NSData dataWithBytesNoCopy:cipherBuffer length:cipherBufferSize freeWhenDone:YES];
    }

    free(cipherBuffer);
    return nil;
#else
    CFErrorRef error = NULL;
    SecTransformRef signer = NULL;
    CFTypeRef signature = NULL;
    if ((signer = SecSignTransformCreate(keyRef, &amp;error))) {
        if (SecTransformSetAttribute(
                                 signer,
                                 kSecTransformInputAttributeName,
                                 (CFDataRef)sha1Digest,
                                     &amp;error)) {
            signature = SecTransformExecute(signer, &amp;error);
        }
    }

    if (error) {
        LogWarn(@""Could not sign: %@"", error);
        CFRelease(error);
    }

    if (signer) {
        CFRelease(signer);
    }

    if (signature) {
        NSData *data = [NSData dataWithData:(NSData *)signature];
        CFRelease(signature);
        return data;
    } else {
        return nil;
    }

#endif

}
</code></pre>

<p>Now the strange thing is that with the same private key (loaded from a p12 file) I get two different results for iOS and MacOSX when signing the same data. I am completely puzzled by this. You may notice the method above uses a different implementation for MacOSX using security transforms, but even if I use the iOS implementation on MacOSX (which gives a compile warning but works fine) I get the same result.</p>

<p>The method used for loading the private key from file is below:</p>

<pre><code>+ (SecKeyRef)newPrivateKeyRefWithPassword:(NSString *)password fromData:(NSData *)data {
    NSMutableDictionary * options = [[NSMutableDictionary alloc] init];

    SecKeyRef privateKeyRef = NULL;

    // Set the public key query dictionary
    //change to your .pfx  password here
    [options setObject:password forKey:(id)kSecImportExportPassphrase];

    CFArrayRef items = CFArrayCreate(NULL, 0, 0, NULL);

    OSStatus securityError = SecPKCS12Import((CFDataRef)data,
                                             (CFDictionaryRef)options, &amp;items);

    if (securityError == noErr &amp;&amp; CFArrayGetCount(items) &gt; 0) {
        CFDictionaryRef identityDict = CFArrayGetValueAtIndex(items, 0);
        SecIdentityRef identityApp =
        (SecIdentityRef)CFDictionaryGetValue(identityDict,
                                             kSecImportItemIdentity);

        securityError = SecIdentityCopyPrivateKey(identityApp, &amp;privateKeyRef);
        if (securityError != noErr) {
            privateKeyRef = NULL;
        }
    }
    [options release];
    if (items) CFRelease(items);
    return privateKeyRef;
}
</code></pre>

<p>And this is the test case I use. Notice that two different strings are printed on iOS and MacOSX:</p>

<pre><code>    NSString *test = @""bla"";
    NSData *testData = [test dataUsingEncoding:NSUTF8StringEncoding];

    NSString *p12Path= [[NSBundle mainBundle] pathForResource:@""private_key"" ofType:@""p12""];

    NSData *p12Data = [NSData dataWithContentsOfFile:p12Path];

    SecKeyRef keyRef = [BMSecurityHelper newPrivateKeyRefWithPassword:@""xxxxxxxx"" fromData:p12Data];

    NSData *signatureData = [testData signatureWithKey:keyRef];
    NSString *signatureString = [BMEncodingHelper base64EncodedStringForData:signatureData withLineLength:0];

    if (keyRef) CFRelease(keyRef);

    NSLog(@""signatureString: %@"", signatureString);
</code></pre>
","<p>It's always nice if you can answer your own question. I missed the following: under MacOSX the security transform also calculates the SHA-1 hash automatically, in contrast with the iOS implementation.</p>

<p>I fixed the problem by adding the following in the MacOSX implementation:</p>

<pre><code>SecTransformSetAttribute(signer, kSecInputIsAttributeName, kSecInputIsDigest, &amp;error)
</code></pre>
","963","<ios><macos><digital-signature><private-key><encryption-asymmetric>","4","7","1","2013-06-27 17:22:16","","0","","","","","2013-06-27 16:26:03",""
"10204603","Encrypt xml file","<pre><code>makecert -r -pe -n ""CN=CERT_SIGN_TEST_CERT"" -b 01/01/2010 -e 01/01/2012 -sky exchange -ss my
</code></pre>

<p>using this command i generate certificate and exported .pfx file from that and this pfx file is used to encrypt the xml file</p>

<blockquote>
  <p>in .net using EncryptedXml , X509Certificate2, RSACryptoServiceProvider and 
  XmlDocument classes</p>
</blockquote>

<p>i encrypt following xml </p>

<pre><code>&lt;Test&gt;&lt;Name&gt;Foo&lt;/Name&gt;&lt;CardNo&gt;123&lt;/CardNo&gt;&lt;/Test&gt;
</code></pre>

<p>as follows:</p>

<pre><code>&lt;EncryptedData Type=""http://www.w3.org/2001/04/xmlenc#Element"" xmlns=""http://www.w3.org/2001/04/xmlenc#""&gt;&lt;EncryptionMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#aes256-cbc"" /&gt;&lt;KeyInfo xmlns=""http://www.w3.org/2000/09/xmldsig#""&gt;&lt;EncryptedKey xmlns=""http://www.w3.org/2001/04/xmlenc#""&gt;&lt;EncryptionMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#rsa-1_5"" /&gt;&lt;KeyInfo xmlns=""http://www.w3.org/2000/09/xmldsig#""&gt;&lt;X509Data&gt;&lt;X509Certificate&gt;MIICFzCCAYCgAwIBAgIQK5IFtxwNaJhGzXuDf92TgzANBgkqhkiG9w0BAQQFADAfMR0wGwYDVQQDHhQARgBpAG4AYQBsAF8AQwBlAHIAdDAeFw0wOTEyMzExODMwMDBaFw0xMjEyMzExODMwMDBaMB8xHTAbBgNVBAMeFABGAGkAbgBhAGwAXwBDAGUAcgB0MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC1Wx11luboMbT1swXV/56j2RYRhR81n9hF3b6tfof1zHRorg7DIP3hvnVtqDF+WxAjn1um97DHtxWf3solthbIHC9cGtqxUhZhgdd0aVAuiKTBbTgnOWdEqTErenrHOzlZnD9iDzOm3OYVLKN+3hKJmjlhTp0sFsu4AIbXlxZVHQIDAQABo1QwUjBQBgNVHQEESTBHgBBDXPlnSZ5zUyVbxJzJO12goSEwHzEdMBsGA1UEAx4UAEYAaQBuAGEAbABfAEMAZQByAHSCECuSBbccDWiYRs17g3/dk4MwDQYJKoZIhvcNAQEEBQADgYEAiubZJZdF3Y9ItOl7LTyixcbuebs50GLFsTeMslS3usq6psXcUEFJntXJ5vXOSe/vp6E6A5AwW4MtPfnB1kzach4T4+WlWeaDHoyj6y5j+n7P6B/X6ZhkQ8MCiGhZ/fTOt7CDisnFVG9gvoH2LUEs1QkiByDq6jii3TUAMN9YQdA=&lt;/X509Certificate&gt;&lt;/X509Data&gt;&lt;/KeyInfo&gt;&lt;CipherData&gt;&lt;CipherValue&gt;Vyml+mtbeL5bE6EWKNqHfnE1xEkbJglcxbjH3Y7pj9BtXVImAI/SbBdLHatyjIAei7qUfhcn+qYC7WAh48XR78BgqCdJX7O5lfZjVSVeVaQUwl1Bdirdz7RYuveIjDtEIM80W4tB6rq2nOgYNkisxhhwIl7EiCQtT42bSGCKFic=&lt;/CipherValue&gt;&lt;/CipherData&gt;&lt;/EncryptedKey&gt;&lt;/KeyInfo&gt;&lt;CipherData&gt;&lt;CipherValue&gt;ezVeQlBGZRbHqitB2mmHuMvifGB9IhG1g0CWmL8iz37JIIw7x5cGbb5Ap8iy24ACu8TJpwgAGIUWnUTDSZ//kWLzCa3G5HL+jT/RHn+zypk=&lt;/CipherValue&gt;&lt;/CipherData&gt;&lt;/EncryptedData&gt;
</code></pre>

<p>as far as encryption is done using w3c standard. How can i decrypt this xml file on java. I have used .pfx file to encrypt the file. In .net i can decrypt file using following:</p>

<pre><code> EncryptedXml encXml = new EncryptedXml(xmlEncDoc);  
encXml.DecryptDocument();
</code></pre>

<p>How can i decrypt in java, should i pass pfx file to java end? as there is  tag in encrypted xml file.</p>

<p>your suggestion is appriciated.</p>
","<p>Do you have control over the sender and recipient of the XML message? It would be best to follow the W3 standard for XML <a href=""http://www.w3.org/Signature/"" rel=""nofollow"">Signatures</a>. Java 6 includes full support for digital signatures and there is a good <a href=""http://java.sun.com/developer/technicalArticles/xml/dig_signature_api/"" rel=""nofollow"">tutorial</a> available which explains how to do it.</p>
","906","<java><.net><xml><encryption-asymmetric><x509certificate2>","3","3","1","2012-05-03 11:21:21","10304301","0","","443090","","2012-05-03 11:21:21","2012-04-18 07:10:51",""
"49308450","Why can't I generate an asymmetric key in SQL Server for a dll?","<p>I have a database project in VS, and am trying to generate an asymmetric key in SQL Server from the dll.  In SSMS, I am trying to run the following:</p>

<pre><code>CREATE ASYMMETRIC KEY MyNewKey 
FROM EXECUTABLE FILE = N'C:\{path to dll}\MyDBProj.dll'
</code></pre>

<p>The error I get is ""The certificate, asymmetric key, or private key file is not valid or does not exist; or you do not have permissions for it.""</p>

<p>The dll in question was built with SQLCLR permission level = SAFE</p>

<p>My assumption is that it is related to file permissions, but I don't know what security permissions I need to allow on the file to make this happen.  I was informed that I should give the NETWORK SERVICE account read access, which I did.</p>

<p>This is on a local db with mixed mode authentication.  I've tried as both Windows user and under the sa account.</p>
","<p>Given that you are using SQL Server Express LocalDB (which runs as your Login and hence has no permissions issues), the only thing that should cause such an error is if you did not actually sign the Assembly. That can be done in Visual Studio via the ""Signing..."" button in the SQLCLR tab of Project properties.</p>

<p>Signing an Assembly (whether by giving it a strong name or adding a Certificate) places the public key of whatever was used to sign it inside the Assembly. The <code>CREATE ASYMMETRIC KEY</code> statement will extract a public key from an Assembly that was placed there by strong naming it. This is not the same as getting the public key of a Certificate that was used to sign the Assembly as they are stored separately.</p>

<p>Of course, if by ""a local db"" you meant that it is merely running on your dev workstation and is not specifically  SQL Server Express LocalDB, then I guess it would be SQL Server Express? If you logged into SQL Server as yourself (you said you tried as a Windows user) and you are a <code>sysadmin</code>, then there still shouldn't be any file system permissions issues, nor any issue with creating an Asymmetric Key.</p>

<hr>

<p><strong>General</strong></p>

<p>For more information on working with SQLCLR in general, please see the series that I am writing on this topic on SQL Server Central: <a href=""http://www.sqlservercentral.com/stairway/105855/"" rel=""nofollow noreferrer"">Stairway to SQLCLR</a>.</p>

<p><strong>Regarding SQL Server 2017</strong></p>

<p>SQL Server 2017 introduced a new security feature (""CLR strict security"", an advanced option) that is enabled by default and requires that ALL Assemblies, even those marked as <code>SAFE</code>, be signed with either an Asymmetric Key (i.e. strong name) or Certificate and have a Login (based on whatever was used to sign the Assembly) that has the <code>UNSAFE ASSEMBLY</code> permission. For details on how to make this work, with or without Visual Studio / SSDT, please see the following two posts of mine:</p>

<ul>
<li><a href=""https://SqlQuantumLeap.com/2017/08/09/sqlclr-vs-sql-server-2017-part-2-clr-strict-security-solution-1/"" rel=""nofollow noreferrer"">SQLCLR vs. SQL Server 2017, Part 2: “CLR strict security” – Solution 1</a></li>
<li><a href=""https://SqlQuantumLeap.com/2017/08/16/sqlclr-vs-sql-server-2017-part-3-clr-strict-security-solution-2/"" rel=""nofollow noreferrer"">SQLCLR vs. SQL Server 2017, Part 3: “CLR strict security” – Solution 2</a></li>
</ul>

<p>Please avoid the new Trusted Assemblies ""feature"" as it has many more flaws than benefits, not to mention it being entirely unnecessary in the first place given that existing functionality already handled the situation ""Trusted Assemblies"" was meant to address. For full details on that and a demo of the proper way to handle existing, unsigned Assemblies, please see: <a href=""https://sqlquantumleap.com/2017/08/28/sqlclr-vs-sql-server-2017-part-4-trusted-assemblies-the-disappointment/"" rel=""nofollow noreferrer"">SQLCLR vs. SQL Server 2017, Part 4: “Trusted Assemblies” – The Disappointment</a>.</p>
","904","<sql-server><sqlclr><encryption-asymmetric>","1","3","1","2018-03-16 15:55:57","49308819","3","","","","","2018-03-15 20:16:44",""
"15405857","Create bouncycastle PGPSecretKey with an email","<p>I need to create a public key for a unix machine to send me encrypted data.</p>

<p>What I do is use the following constructor for creating the PGPSecreyKey.</p>

<pre><code>PGPSecretKey secretKey = new PGPSecretKey(PGPSignature.DEFAULT_CERTIFICATION, PGPPublicKey.RSA_GENERAL, publicKey, privateKey, new Date(),
            ""Test test@mail.com"", PGPEncryptedData.CAST5, passPhrase, null, null, new SecureRandom(), ""BC"");
</code></pre>

<p>When opened with Kleopatra (to check my certificate) I see Name: ""Test test@mail.com"" and Email: """".</p>

<p>How can I create a PGP key with both a name and email (and comment if possible).</p>

<p>Thanks in advance!</p>
","<p>to add an emailaddress you have to concat the email to the userID.
LIke</p>

<pre><code>PGPPublicKey.RSA_GENERAL, publicKey, privateKey, new Date(),
            ""Hans Mueller &lt;hans.mueller@mail.com&gt;"", PGPEncryptedData.CAST5, passPhrase, null, null, new SecureRandom(), ""BC"");
</code></pre>
","886","<java><bouncycastle><encryption-asymmetric>","2","1","2","2018-01-16 01:12:38","16232406","0","1","","","","2013-03-14 09:49:01",""
"15405857","Create bouncycastle PGPSecretKey with an email","<p>I need to create a public key for a unix machine to send me encrypted data.</p>

<p>What I do is use the following constructor for creating the PGPSecreyKey.</p>

<pre><code>PGPSecretKey secretKey = new PGPSecretKey(PGPSignature.DEFAULT_CERTIFICATION, PGPPublicKey.RSA_GENERAL, publicKey, privateKey, new Date(),
            ""Test test@mail.com"", PGPEncryptedData.CAST5, passPhrase, null, null, new SecureRandom(), ""BC"");
</code></pre>

<p>When opened with Kleopatra (to check my certificate) I see Name: ""Test test@mail.com"" and Email: """".</p>

<p>How can I create a PGP key with both a name and email (and comment if possible).</p>

<p>Thanks in advance!</p>
","<p>to Fix this issue you have to add \n newline between name and Email </p>

<pre><code>PGPPublicKey.RSA_GENERAL, publicKey, privateKey, new Date(),
            ""Hans Mueller \n &lt;hans.mueller@mail.com&gt;"", PGPEncryptedData.CAST5, passPhrase, null, null, new SecureRandom(), ""BC"");
</code></pre>
","886","<java><bouncycastle><encryption-asymmetric>","2","-1","2","2018-01-16 01:12:38","16232406","0","1","","","","2013-03-14 09:49:01",""
"44536663","How to store private key in Key Container?","<p>I want to store a private key in a key container to create a signature over data for an asp.net website. </p>

<pre><code>//First I Read PrivateKey from text file that i Uploaded with FileUpload(fuPrivateKey)
var pk = Encoding.UTF8.GetString(fuPrivateKey.FileBytes);
CspParameters csp = new CspParameters();
csp.KeyContainerName = ""PrivateKeyForSignature"";
DSACryptoServiceProvider rsa = new DSACryptoServiceProvider(csp);//error
rsa.FromXmlString(pk);
</code></pre>

<p>but I got the following error at line of <code>DSACryptoServiceProvider rsa = new DSACryptoServiceProvider(csp);</code>:</p>

<blockquote>
  <p>The specified cryptographic service provider (CSP) does not support this key algorithm.</p>
</blockquote>

<p>I have used this method for storing an <code>RsaCryptoServiceProvider</code> key without any problem. However when I want to use it for DSA it doesn't work.</p>
","<p>If I take a look at the default (no argument) constructor of <code>CspParameters</code> then <a href=""https://msdn.microsoft.com/en-us/library/xw9ywed4(v=vs.110).aspx"" rel=""nofollow noreferrer"">I get this text</a>:</p>

<blockquote>
  <p>This form of CspParameters initializes the <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.cspparameters.providertype(v=vs.110).aspx"" rel=""nofollow noreferrer"">ProviderType</a> field to a value of <strong>24</strong>, which specifies the PROV_RSA_AES provider.  This default provider is compatible with the <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.aes(v=vs.110).aspx"" rel=""nofollow noreferrer"">Aes</a> algorithm. </p>
</blockquote>

<p>If I look up the constructor that accepts a 32 bit integer <a href=""https://msdn.microsoft.com/en-us/library/1dh4wac4(v=vs.110).aspx"" rel=""nofollow noreferrer"">I get</a>:</p>

<blockquote>
  <p>Initializes a new instance of the <code>CspParameters</code> class with the specified provider type code.</p>
  
  <p>...</p>
  
  <p>To specify a provider compatible with the <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.dsa(v=vs.110).aspx"" rel=""nofollow noreferrer"">DSA</a> algorithm, pass a value of <strong>13</strong>to the <em>dwTypeIn</em> parameter.</p>
</blockquote>

<p>So it seems to me this can be solved by calling the right constructor of <code>CspParameters</code> with the right code.</p>
","858","<c#><asp.net><encryption><encryption-asymmetric>","2","2","2","2017-06-21 05:08:44","44619482","0","","589259","","2017-06-18 21:01:34","2017-06-14 06:03:50",""
"44536663","How to store private key in Key Container?","<p>I want to store a private key in a key container to create a signature over data for an asp.net website. </p>

<pre><code>//First I Read PrivateKey from text file that i Uploaded with FileUpload(fuPrivateKey)
var pk = Encoding.UTF8.GetString(fuPrivateKey.FileBytes);
CspParameters csp = new CspParameters();
csp.KeyContainerName = ""PrivateKeyForSignature"";
DSACryptoServiceProvider rsa = new DSACryptoServiceProvider(csp);//error
rsa.FromXmlString(pk);
</code></pre>

<p>but I got the following error at line of <code>DSACryptoServiceProvider rsa = new DSACryptoServiceProvider(csp);</code>:</p>

<blockquote>
  <p>The specified cryptographic service provider (CSP) does not support this key algorithm.</p>
</blockquote>

<p>I have used this method for storing an <code>RsaCryptoServiceProvider</code> key without any problem. However when I want to use it for DSA it doesn't work.</p>
","<p>The criteria as mentioned by @MaartenBodewes is correct. <code>CspParameters</code> by default are configured to RSA container. Which is why, there were no errors when the same was tried with <code>RSACryptoServiceProvider</code>.</p>

<pre><code>CspParameters csp = new CspParameters();
</code></pre>

<p>is same as:</p>

<pre><code>CspParameters csp = new CspParameters(1);
</code></pre>

<p>To use crypto service in <code>DSACryptoServiceProvider</code>, the parameterized constructor has to be called as:</p>

<pre><code>CspParameters csp = new CspParameters(13);
</code></pre>
","858","<c#><asp.net><encryption><encryption-asymmetric>","2","1","2","2017-06-21 05:08:44","44619482","0","","589259","","2017-06-18 21:01:34","2017-06-14 06:03:50",""
"10430703","Encrypt xml file in .net and decrypt in java using x509 certificate","<p>I spend almost a day searching on web for the following requirement and end with only encryption and decryption done in .net but not on java.</p>

<p>I want to encrypt file in .net and decrypt it on java using x509Certificate  </p>

<pre><code>makecert -r -pe -n ""CN=CERT_SIGN_TEST_CERT"" -b 01/01/2010 -e 01/01/2012 -sky exchange -ss my
</code></pre>

<p>using this command i generate certificate and exported .pfx file from certificate and this pfx file is used to encrypt the xml file</p>

<blockquote>
  <p>in .net using EncryptedXml , X509Certificate2, RSACryptoServiceProvider and 
  XmlDocument classes (.Net)</p>
</blockquote>

<p>i encrypt following xml </p>

<pre><code>&lt;Test&gt;&lt;Name&gt;Foo&lt;/Name&gt;&lt;CardNo&gt;123&lt;/CardNo&gt;&lt;/Test&gt;
</code></pre>

<p>as follows:</p>

<pre><code>&lt;EncryptedData Type=""http://www.w3.org/2001/04/xmlenc#Element"" xmlns=""http://www.w3.org/2001/04/xmlenc#""&gt;&lt;EncryptionMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#aes256-cbc"" /&gt;&lt;KeyInfo xmlns=""http://www.w3.org/2000/09/xmldsig#""&gt;&lt;EncryptedKey xmlns=""http://www.w3.org/2001/04/xmlenc#""&gt;&lt;EncryptionMethod Algorithm=""http://www.w3.org/2001/04/xmlenc#rsa-1_5"" /&gt;&lt;KeyInfo xmlns=""http://www.w3.org/2000/09/xmldsig#""&gt;&lt;X509Data&gt;&lt;X509Certificate&gt;MIICFzCCAYCgAwIBAgIQK5IFtxwNaJhGzXuDf92TgzANBgkqhkiG9w0BAQQFADAfMR0wGwYDVQQDHhQARgBpAG4AYQBsAF8AQwBlAHIAdDAeFw0wOTEyMzExODMwMDBaFw0xMjEyMzExODMwMDBaMB8xHTAbBgNVBAMeFABGAGkAbgBhAGwAXwBDAGUAcgB0MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC1Wx11luboMbT1swXV/56j2RYRhR81n9hF3b6tfof1zHRorg7DIP3hvnVtqDF+WxAjn1um97DHtxWf3solthbIHC9cGtqxUhZhgdd0aVAuiKTBbTgnOWdEqTErenrHOzlZnD9iDzOm3OYVLKN+3hKJmjlhTp0sFsu4AIbXlxZVHQIDAQABo1QwUjBQBgNVHQEESTBHgBBDXPlnSZ5zUyVbxJzJO12goSEwHzEdMBsGA1UEAx4UAEYAaQBuAGEAbABfAEMAZQByAHSCECuSBbccDWiYRs17g3/dk4MwDQYJKoZIhvcNAQEEBQADgYEAiubZJZdF3Y9ItOl7LTyixcbuebs50GLFsTeMslS3usq6psXcUEFJntXJ5vXOSe/vp6E6A5AwW4MtPfnB1kzach4T4+WlWeaDHoyj6y5j+n7P6B/X6ZhkQ8MCiGhZ/fTOt7CDisnFVG9gvoH2LUEs1QkiByDq6jii3TUAMN9YQdA=&lt;/X509Certificate&gt;&lt;/X509Data&gt;&lt;/KeyInfo&gt;&lt;CipherData&gt;&lt;CipherValue&gt;Vyml+mtbeL5bE6EWKNqHfnE1xEkbJglcxbjH3Y7pj9BtXVImAI/SbBdLHatyjIAei7qUfhcn+qYC7WAh48XR78BgqCdJX7O5lfZjVSVeVaQUwl1Bdirdz7RYuveIjDtEIM80W4tB6rq2nOgYNkisxhhwIl7EiCQtT42bSGCKFic=&lt;/CipherValue&gt;&lt;/CipherData&gt;&lt;/EncryptedKey&gt;&lt;/KeyInfo&gt;&lt;CipherData&gt;&lt;CipherValue&gt;ezVeQlBGZRbHqitB2mmHuMvifGB9IhG1g0CWmL8iz37JIIw7x5cGbb5Ap8iy24ACu8TJpwgAGIUWnUTDSZ//kWLzCa3G5HL+jT/RHn+zypk=&lt;/CipherValue&gt;&lt;/CipherData&gt;&lt;/EncryptedData&gt;
</code></pre>

<p>as far as encryption is done using w3c standard. How can i decrypt this xml file on java. I have used .pfx file to encrypt the file. In .net i can decrypt file using following:</p>

<pre><code> EncryptedXml encXml = new EncryptedXml(xmlEncDoc);  
encXml.DecryptDocument();
</code></pre>

<p>How can i decrypt in java, should i pass pfx file to java end? as there is <code>&lt;X509Data&gt;</code> tag in encrypted xml file.</p>

<p>your suggestion is appriciated.</p>
","","852","<java><.net><xml><encryption><encryption-asymmetric>","1","","0","2018-06-10 01:30:48","","0","1","","","","2012-05-03 11:46:10",""
"40061520","Sign private key pair with sha-256 in python","<p>I want to know how can I sign my private key with sha-256. I already tried it, but it didn't work.. how can I do it properly? by the way I'm using a asymmetric encryption to encrypt all files that are transferred via network.</p>

<pre><code>#!/usr/bin/python
    from Crypto.PublicKey import RSA
    from OpenSSL import SSL
    import socket
    import hashlib
    import os

    #load public key
    def publicKey():
        with open('public_key.key', 'r') as public_file:
            public_key = RSA.importKey(public_file.read())

    #load private key
    def privateKey():
        with open('private_key.key', 'r') as private_file:
            private_key = RSA.importKey(private_file.read())

    if __name__ == '__main__':
        txt = input(""what do you want to do?"")
</code></pre>
","<pre><code>signature = hmac.new(key=private_key, message, digestmod=hashlib.sha256).digest()
</code></pre>
","825","<python><encryption-asymmetric>","0","2","1","2017-06-10 10:46:23","","4","","","","","2016-10-15 16:30:31",""
"5248590","Error while using RSA encryption on BlackBerry","<p>I'm trying to use RSA encryption on Blackberry with their native API's. I made a public/private key pair in Java and saved the Modulus and Exponents of the keys as strings so i can generate the keys from this for encryption and decryption. The following code is from the client side and i'm getting a <code>InvalidKeyException</code> and the backtrace is null so I don't know what's happening: </p>

<pre><code>public byte[] Encrypt(byte[] data)
  {
      try {
            RSACryptoSystem cryptoSystem = new RSACryptoSystem(1024);
            RSAPublicKey publicKey = new RSAPublicKey(cryptoSystem, _publicKeyExponent.getBytes(), _publicKeyModulus.getBytes());
            RSAEncryptorEngine encryptorEngine = new RSAEncryptorEngine(publicKey);

            PKCS5FormatterEngine formatterEngine = new PKCS5FormatterEngine( encryptorEngine );

            ByteArrayOutputStream output = new ByteArrayOutputStream();
            BlockEncryptor encryptor = new BlockEncryptor( formatterEngine, output );

            encryptor.write(data);
            encryptor.close();
            output.close();

            return output.toByteArray();
        } catch (InvalidKeyException e) {
            // TODO Auto-generated catch block
            System.out.println();
            e.printStackTrace();
        } catch (CryptoTokenException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (CryptoUnsupportedOperationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (UnsupportedCryptoSystemException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
      return null;
  } 
</code></pre>

<p>And this is what i did server side to generate my keys:</p>

<pre><code>try {
            keyPairGenerator = KeyPairGenerator.getInstance(""RSA"");
            keyPairGenerator.initialize(1024);
            keyFactory = KeyFactory.getInstance(""RSA"");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        }

        keyPair = keyPairGenerator.generateKeyPair();
        publicKey = keyPair.getPublic();
        privateKey = keyPair.getPrivate();

        try {
            publicKeySpec = keyFactory.getKeySpec(publicKey, RSAPublicKeySpec.class);
            privateKeySpec = keyFactory.getKeySpec(privateKey, RSAPrivateKeySpec.class);
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        }

        privateKeyModulus = privateKeySpec.getModulus().toString();
        privateKeyExponent = privateKeySpec.getPrivateExponent().toString();

        publicKeyModulus = publicKeySpec.getModulus().toString();
        publicKeyExponent = publicKeySpec.getPublicExponent().toString();
</code></pre>

<p>Any ideas?</p>

<p>EDIT: i tried doing a simple test on the server by encrypting and decrypting there and when when I try to decrypt I get a <code>IllegalBlockSizeException</code> these are my encrytion and decryption methods (server side):</p>

<pre><code>public byte[] Decrypt(byte[] data)
    {
        try {
            Cipher cipher = Cipher.getInstance(""RSA"");
            cipher.init(Cipher.DECRYPT_MODE, privateKey);
            byte[] cipherData = cipher.doFinal(data);
            return cipherData;
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch(IllegalBlockSizeException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch(InvalidKeyException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch(BadPaddingException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        }

        return null;
    }

    public byte[] Encrypt(byte[] data)
    {
        try {
            Cipher cipher = Cipher.getInstance(""RSA"");
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            byte[] cipherData = cipher.doFinal(data);
            return cipherData;
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch(IllegalBlockSizeException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch(InvalidKeyException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        } catch(BadPaddingException ex) {
            Logger.getLogger(EncryptorDecryptor.class.getName()).log(Level.SEVERE, null, ex);
        }

        return null;
    }
</code></pre>

<p>And this is the simple test i'm trying:</p>

<pre><code>userName = Base64.encode(encryptorDecryptor.Encrypt(userName.getBytes()));
password = Base64.encode(encryptorDecryptor.Encrypt(password.getBytes()));

userName = new String(encryptorDecryptor.Decrypt(Base64.decode(userName)));
password = new String(encryptorDecryptor.Decrypt(Base64.decode(password)));
</code></pre>
","<ol>
<li>It is a bug to use String as a container for arbitrary random bytes, e.g. <code>userName = new String(encryptorDecryptor.Encrypt(userName.getBytes()));
</code> is wrong.</li>
<li>I'm not familiar with Blackberry's Java API but in usually you cannot encrypt more than one block with RSA</li>
<li>the toString() methods on arrays (e.g. <code>publicKeySpec.getModulus().toString()</code>) don't return anything useful. You should be able to figure this out just by looking at the data. This is really a beginner java mistake more than a cryptography issue.</li>
<li>Don't using the default character set for the String constructor and String.getBytes() methods. Always specify a character set, usually ""UTF-8"" is perfect.</li>
</ol>

<p>That's all I had the patience for.</p>
","819","<blackberry><java-me><rsa><encryption-asymmetric><public-key-encryption>","0","1","1","2011-03-10 13:35:04","5254436","0","3","478108","","2011-03-10 13:35:04","2011-03-09 16:10:48",""
"12398434","How to specify message body encryption method for Rampart?","<p>I am working with Axis2 1.6.1 + Rampart 1.6.1 on the server side of a web service.</p>

<p>I've been asked to employ RSA 1.5 for message body encryption. From what I can tell (by inspecting captured SOAP messages), the default algorithm to encrypt the message body is Triple DES CBC. So I want to change that to RSA 1.5.</p>

<p>I am assuming that there is some property I need to set in my server policy XML file. However, I cannot figure out what property that might be. I have looked at example policy files, <a href=""http://ws.apache.org/wss4j/config.html"" rel=""nofollow"">this page about WSS configuration</a>, and <a href=""https://axis.apache.org/axis2/java/rampart/rampartconfig-guide.html"" rel=""nofollow"">this page about Rampart configuration</a>, and various blogs and what-not. </p>

<p>If someone can point out an example policy or relevant configuration docs or whatever, I'll be very grateful. Thanks in advance for your help.</p>
","<p>Refer to the <a href=""http://docs.oasis-open.org/ws-sx/ws-securitypolicy/v1.3/os/ws-securitypolicy-1.3-spec-os.html#_Toc212617835"" rel=""nofollow"">WS-Security Policy Specification section 6.1</a>. Why do you want to use RSA ? The given algorithm suites in the spec don't use RSA for encryption.</p>
","806","<axis2><ws-security><policy><encryption-asymmetric><rampart>","0","0","1","2012-09-14 17:09:57","12429051","0","","","","","2012-09-13 02:00:46",""
"6403043","RSA encryption in Android ArrayIndexOutOfBounds","<p>i am trying to do RSA encryption on Android, i followed the guide on RSA from here: <a href=""http://www.javamex.com/tutorials/cryptography/rsa_encryption.shtml"" rel=""nofollow"">http://www.javamex.com/tutorials/cryptography/rsa_encryption.shtml</a></p>

<p>i modified the code a bit, and here is my code:</p>

<pre><code>Button GenKey = null;
Button encryptString = null;
Button decryptString = null;
EditText plainField = null;
EditText encryptedField = null;

@Override
public void onCreate(Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    GenKey = (Button) findViewById(R.id.btnGenKey);
    GenKey.setOnClickListener(new View.OnClickListener() {
        public void onClick(View view) {
                generateKey();
        }
    });

    encryptString = (Button) findViewById(R.id.btnEncrypt);
    encryptString.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {

            byte[] encryptedData = null;
            byte[] dataToEncrypt = null;
            plainField = (EditText) findViewById (R.id.eTxtPlainTxt);
            String plainText = plainField.getText().toString();
                dataToEncrypt = plainText.getBytes(""UTF-8"");
                encryptedData = rsaEncrypt(dataToEncrypt);              
            String encryptedText=null;
                encryptedText = new String(encryptedData, ""UTF-8"");
            encryptedField = (EditText)findViewById(R.id.eTxtCiphTxt);
            encryptedField.setText(encryptedText);
        }
    });

    decryptString = (Button) findViewById(R.id.btnDecrypt);
    decryptString.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            byte[] decryptedData = null;
            byte[] dataToEncrypt = null;
            encryptedField = (EditText) findViewById (R.id.eTxtCiphTxt);
            String cipherText = encryptedField.getText().toString();    
                dataToEncrypt = cipherText.getBytes(""UTF-8"");
                decryptedData = rsaDecrypt(dataToEncrypt);

            String decryptedText = null;
                decryptedText = new String(decryptedData,""UTF-8"");
            plainField = (EditText)findViewById(R.id.eTxtPlainTxt);
            plainField.setText(decryptedText);
        }
    });

}//end of onCreate

public void generateKey() throws NoSuchAlgorithmException, InvalidKeySpecException, IOException{
    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
    kpg.initialize(512);
    KeyPair kp = kpg.genKeyPair();

    KeyFactory fact = KeyFactory.getInstance(""RSA"");
    RSAPublicKeySpec pub = fact.getKeySpec(kp.getPublic(), RSAPublicKeySpec.class);
    RSAPrivateKeySpec priv = fact.getKeySpec(kp.getPrivate(), RSAPrivateKeySpec.class);

    saveToFile(""public.key"", pub.getModulus(),pub.getPublicExponent());
    saveToFile(""private.key"", priv.getModulus(),priv.getPrivateExponent());
    }//end of generateKey

public void saveToFile(String fileName, BigInteger mod, BigInteger exp) throws IOException {        
    FileOutputStream fOutStream = openFileOutput(fileName, MODE_PRIVATE);
    ObjectOutputStream oos = new ObjectOutputStream(new BufferedOutputStream(fOutStream));
    oos.writeObject(mod);
    oos.writeObject(exp);
    oos.flush();
    oos.close();
    }//end of saveToFile

public PublicKey readPubKeyFromFile(String keyFileName) throws StreamCorruptedException, IOException{
    FileInputStream fInStream = openFileInput(keyFileName);
    ObjectInputStream oInStream = new ObjectInputStream(new BufferedInputStream(fInStream));
        BigInteger m = (BigInteger) oInStream.readObject();
        BigInteger e = (BigInteger) oInStream.readObject();
        RSAPublicKeySpec keySpec = new RSAPublicKeySpec(m, e);
        KeyFactory fact = KeyFactory.getInstance(""RSA"");
        PublicKey pubKey = fact.generatePublic(keySpec);
        return pubKey;
        oInStream.close();
}//end of readPubKeyFromFile

public PrivateKey readPrivKeyFromFile(String keyFileName) throws StreamCorruptedException, IOException{
    FileInputStream fInStream = openFileInput(keyFileName);
    ObjectInputStream oInStream = new ObjectInputStream(new BufferedInputStream(fInStream));
        BigInteger m = (BigInteger) oInStream.readObject();
        BigInteger e = (BigInteger) oInStream.readObject();
        RSAPrivateKeySpec keySpec = new RSAPrivateKeySpec(m, e);
        KeyFactory fact = KeyFactory.getInstance(""RSA"");
        PrivateKey privKey = fact.generatePrivate(keySpec);
        return privKey;
        oInStream.close();
}//end of readPubKeyFromFile

public byte[] rsaEncrypt(byte[] data) throws StreamCorruptedException, IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
    PublicKey pubKey = readPubKeyFromFile(""public.key"");
    Cipher cipher = Cipher.getInstance(""RSA"");
    cipher.init(Cipher.ENCRYPT_MODE, pubKey);
    byte[] cipherData = cipher.doFinal(data);
    return cipherData;    
}//end of rsaEncrypt

public byte[] rsaDecrypt(byte[] data) throws StreamCorruptedException, IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException{
    PrivateKey privKey = readPrivKeyFromFile(""private.key"");
    Cipher decipher = Cipher.getInstance(""RSA"");
    decipher.init(Cipher.DECRYPT_MODE, privKey);
    byte[] plainData = decipher.doFinal(data);
    return plainData;   
}
</code></pre>

<p>the problem is when i encrypt the string, it displays some random characters symbol such as €◊•¶⓿ etc...
another problem is, when i try to decrypt it, it throws an ArrayIndexOutOfBoundsException at the doFinal on the decryption part..</p>

<p>where is the problem?</p>
","","804","<java><android><exception><rsa><encryption-asymmetric>","1","","0","2011-06-19 15:42:19","","13","2","797832","","2011-06-19 15:42:19","2011-06-19 14:41:11",""
"45059848","How to encrypt/decrypt XMl wiith X.509 certificate correctly?","<p>I want to encrypt a XML file by using a X.509 certificate and also decrypt it, too. As far as I know I need to use the public key (inside the certificate) to encrypt the XML and the private key to decrypt the XML. Thus only the guy with private key is able to read the decrypted data.
Microsoft provides some code for encryption/decryption here:</p>

<p>Encryption: <a href=""https://msdn.microsoft.com/en-us/library/ms229744(v=vs.110).aspx"" rel=""nofollow noreferrer"">https://msdn.microsoft.com/en-us/library/ms229744(v=vs.110).aspx</a></p>

<p>Decryption: <a href=""https://msdn.microsoft.com/en-us/library/ms229943(v=vs.110).aspx"" rel=""nofollow noreferrer"">https://msdn.microsoft.com/en-us/library/ms229943(v=vs.110).aspx</a></p>

<p>As you can see from the first example a X.509 certificate will be loaded to encrypt the file. But the second example does not(!) load a certificate to decrypt the example. It seems that the encrypted file holds all the necessary data to be decrypted? Does this mean that the file can be decrypted by anybody? I think I have a lag of understanding here - why is it not necessary to use a certificate to decrypt the data?</p>

<p>Regards,
Michael</p>
","<p>On decryption, the certificate is loaded from the computers certificate store.  From your second link:</p>

<blockquote>
  <p>The code example in this procedure decrypts an XML element <strong>using an X.509 certificate from the local certificate store of the current user account.</strong></p>
</blockquote>

<p>In that example, the public key used to encrypt the XML is stored in the encrypted data and is used to look up the proper certificate from the store.  </p>

<p>So the answer to your question -- ""why is not necessary to use a certificate to decrypt the data"" -- is: it is necessary.  The certificate was loaded automatically.</p>
","802","<c#><xml><encryption><x509><encryption-asymmetric>","1","2","1","2019-07-15 14:27:55","45060022","1","","283181","","2017-07-12 14:03:54","2017-07-12 14:00:28",""
"47300062","Creating asymmetric keys in SQL Server 2014 for unsafe assemblies","<p>I have 2 DLLs signed in Visual Studio (VS) 2015. A former employee created an asymmetric key and login and I ran one of the assemblies in <code>UNSAFE</code> mode correctly.</p>

<p>I get the following error with the second one: </p>

<blockquote>
  <p>Msg 10327, Level 14, State 1, Line 27<br>
     CREATE ASSEMBLY for assembly 'TableFile' failed because assembly 'TableFile' is not authorized for PERMISSION_SET = UNSAFE.  The assembly is authorized when either of the following is true: the database owner (DBO) has UNSAFE ASSEMBLY permission and the database has the TRUSTWORTHY database property on; or the assembly is signed with a certificate or an asymmetric key that has a corresponding login with UNSAFE ASSEMBLY permission.</p>
</blockquote>

<p>I can't ask the former employee so how do I find out how to get this to run?  I tried this too:</p>

<pre><code>USE master; 
GO  

CREATE ASYMMETRIC KEY AProjectKey FROM EXECUTABLE FILE = 'E:\sqldlls\TableFile.dll' 
CREATE LOGIN AProjectLogin FROM ASYMMETRIC KEY AProjectKey ;  
GRANT UNSAFE ASSEMBLY TO AProjectLogin ;
GO
</code></pre>

<p>This gives the following errors:</p>

<blockquote>
  <p>Msg 15396, Level 16, State 1, Line 9<br>
   An asymmetric key with name 'AProjectKey' already exists or this asymmetric key already has been added to the database.</p>
  
  <p>Msg 15151, Level 16, State 1, Line 10<br>
  Cannot find the asymmetric key 'AProjectKey', because it does not exist or you do not have permission.  </p>
  
  <p>Msg 15151, Level 16, State 1, Line 11<br>
  Cannot find the login 'AProjectLogin', because it does not exist or you do not have permission.</p>
</blockquote>

<p>How do I get both these assemblies running in unsafe mode? Thanks in advance.</p>
","<p>Regarding those 3 error messages:</p>

<ol>
<li><p>The first could be due to the Asymmetric Key already existing, but under a different name. Keys and Certificates need to be unique in terms of their public key, not just the name (though that obviously needs to be unique as well). Each Key and Certificate has a hash of the public key which is referred to as the ""thumbprint"". The thumbprints of existing Keys / Certificates are checked when creating a new one and will prevent the creation, even of a differently named Key / Certificate, if the thumbprint already exists. That is what the error message means by ""or this asymmetric key already has been added to the database"".</p>

<p>OR:</p>

<p>It could mean that a different Asymmetric Key (i.e. different ""thumbprint"") exists in <code>master</code>, but with the name <code>AProjectKey</code></p></li>
<li>Because you couldn't create the same key under a different name, no Asymmetric Key exists with that new name, hence you can't create a Login from it (since, again, the <code>CREATE ASYMMETRIC KEY</code> statement failed).</li>
<li>Because you couldn't create the Login, it doesn't exist to be granted any permissions.</li>
</ol>

<p>Error # 2 helps narrow down the issue. If Error # 1 was caused by an existing Asymmetric Key having the same name but different ""thumbprint"", then you either would have been able to create the Login (if it did not already exist), or you would have gotten an error stating that the Login (i.e. ""server principal"") already exists. But the error is that an Asymmetric Key by that <em>name</em> cannot be found. This should mean that the Asymmetric Key itself does already exist, but under a different name. You can see what Asymmetric Keys have been created by executing the following:</p>

<pre class=""lang-sql prettyprint-override""><code>SELECT * FROM sys.asymmetric_keys;
</code></pre>

<p>But that doesn't tell you which one came from that Assembly (or an Assembly signed with the same Strong Name Key used to sign this one). For that you need to know the ""thumbprint"", and for that you need to open a Command Prompt (preferably a ""Developer Command Prompt"" which Visual Studio sets up when installed, as it has the correct path set up upon opening it). Then, run the following:</p>

<pre class=""lang-none prettyprint-override""><code>CD /D E:\sqldlls\
sn -T TableFile.dll
</code></pre>

<p>You should see:</p>

<pre class=""lang-none prettyprint-override""><code>Public key token is XXXXXXXXXXXXXXXX
</code></pre>

<p>Copy and paste that XXXXX ""token"" (i.e. thumbprint) into the following query:</p>

<pre class=""lang-sql prettyprint-override""><code>SELECT ak.[name], ak.[sid]
FROM   sys.asymmetric_keys ak
WHERE  ak.[thumbprint] = 0x{XXXXXXXXXXXXXXXX}; -- remove the { and }
</code></pre>

<p>Assuming that you get a row returned, we need to see if the Login exists. Simply trying to create a Login from the Asymmetric Key won't get us the Login's name if it does exist since you can only have 1 Login created per Key / Certificate, and the error message only reports back the name you are trying to create as the one that already exists, even though it can be a different name for the same Key. So, take the SID from the returned row and paste it in the following query:</p>

<pre class=""lang-sql prettyprint-override""><code>SELECT sp.*
FROM   sys.server_principals sp
WHERE  sp.[sid] = 0x{SID_from_sys_asymmetric_keys}; -- remove the { and }
</code></pre>

<p>If no row is returned then you should create a Login from that Asymmetric Key.</p>

<p>At this point a Login should exist, so grant it the <code>UNSAFE ASSEMBLY</code> permission.</p>

<p>Now try creating the Assembly again.</p>
","789","<c#><sql-server><assemblies><sqlclr><encryption-asymmetric>","2","1","1","2017-11-15 17:03:46","47300492","0","2","665557","","2017-11-15 07:40:22","2017-11-15 05:33:39",""
"35785400","SQL TD EKM Azure Key Vault - can't restore encrypted database","<p>Using the steps detailed in <a href=""https://msdn.microsoft.com/en-us/library/dn198405(v=sql.110).aspx"" rel=""nofollow"">this MS article</a> I have successfully enabled SQL TDE using Azure as an EKM. To ensure that I would be able to decrypt the data on another server in the event of a DR scenario, I first uploaded my own asymmetric key (in the form of a password-protected pfx file) into Key Vault as per the <a href=""https://azure.microsoft.com/en-gb/documentation/articles/key-vault-get-started/"" rel=""nofollow"">steps in this MS article</a>.</p>

<p>I'm now trying to test DR, where I'll have to restore a backup of the encrypted DB onto another SQL server, and whatever I try I can't get it to work. I'm sure it's something painfully obvious to those familiar with SQL encryption, but it's got me stumped! </p>

<p>I've read various articles such as <a href=""https://support.microsoft.com/en-us/kb/2914662"" rel=""nofollow"">this one</a> explaining how to convert then import the pfx certificate using PVKConverter.exe.  Initially, trying to import the converted pfx threw the error <em>Msg 15581, Level 16, State 1, Line 1. Please create a master key in the database or open the master key in the session before performing this operation.</em> so I created one in the master DB using </p>

<pre><code>CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'MySecurePassword'
</code></pre>

<p>This didn't get me any further as the backup still wouldn't restore.</p>

<p>Comparing the two servers, the obvious difference is that the master DB holds my Key Vault-linked Asymmetric key in the encrypted Server A (<code>SELECT * FROM sys.asymmetric_keys</code>) and a certificate in Server B (<code>SELECT * FROM sys.certificates</code>).  I understand that I can't export an asymmetric key from SQL (hence I used the existing pfx in Key Vault) but I just can't work out how to use/import that pfx in Server B to allow me to restore the encrypted DB backup from Server A.  Whenever I attempt to create an asymmetric key in the master DB from my pfx file using the below:</p>

<pre><code>CREATE ASYMMETRIC KEY MY_ASYMMETRIC_KEY
FROM FILE = 'C:\Program Files\Microsoft SQL Server\MSSQL12.CORIC\MSSQL\DATA\\MyPFXFile.pfx'
ENCRYPTION BY PASSWORD 'C0mplexP@ssw0rd'
</code></pre>

<p>I get the error: <em>Msg 15208, Level 16, State 43, Line 18
The certificate, asymmetric key, or private key file is not valid or does not exist; or you do not have permissions for it.</em></p>

<p>The full SQL used to enable TDE on Server A is below, in the hope that this will provide the insight needed to spot the problem:</p>

<pre><code>USE master;
GO
sp_configure 'show advanced options', 1 ;
GO
RECONFIGURE ;
GO
sp_configure 'EKM provider enabled', 1 ;
GO
RECONFIGURE ;
GO

CREATE CRYPTOGRAPHIC PROVIDER AzureKeyVault_EKM_Prov 
FROM FILE = 'C:\Program Files\SQL Server Connector for Microsoft Azure Key Vault\Microsoft.AzureKeyVaultService.EKM.dll';
GO

CREATE CREDENTIAL sysadmin_ekm_cred 
    WITH IDENTITY = 'mykeyvault', 
    SECRET = '12345678123412341234123456789abcfedcba98-fedc-fedc-fedc-fedcba987654'
FOR CRYPTOGRAPHIC PROVIDER AzureKeyVault_EKM_Prov

ALTER LOGIN [LOCALMACHINE\AdminUser]
ADD CREDENTIAL sysadmin_ekm_cred;

CREATE ASYMMETRIC KEY KEY_VAULT_ASYMMETRIC
FROM PROVIDER [AzureKeyVault_EKM_Prov]
WITH PROVIDER_KEY_NAME = 'mykeyvaultkeyname',
CREATION_DISPOSITION = OPEN_EXISTING

CREATE CREDENTIAL Azure_EKM_TDE_cred 
    WITH IDENTITY = 'mykeyvault', 
    SECRET = '12345678123412341234123456789abcfedcba98-fedc-fedc-fedc-fedcba987654'
FOR CRYPTOGRAPHIC PROVIDER AzureKeyVault_EKM_Prov

CREATE LOGIN TDE_Login 
FROM ASYMMETRIC KEY KEY_VAULT_ASYMMETRIC

ALTER LOGIN TDE_Login 
ADD CREDENTIAL Azure_EKM_TDE_cred ;

USE MyDatabase;

CREATE DATABASE ENCRYPTION KEY 
WITH ALGORITHM = AES_256 
ENCRYPTION BY SERVER ASYMMETRIC KEY KEY_VAULT_ASYMMETRIC

ALTER DATABASE MyDatabase
SET ENCRYPTION ON ;
GO
</code></pre>
","","780","<sql-server><encryption-asymmetric><tde><azure-keyvault>","2","","0","2016-03-03 23:49:41","","0","","","","","2016-03-03 23:49:41",""
"22126118","Extensions for Private and Public Key","<p><strong>Clarify me out here,</strong>
I need to save RSA Private and Public key in Server's local Directory and I did it via getting <strong><em>Encoded bytes</em></strong> from the Keys. There is <em>file extension part</em>, when i searched some of 'em told that there is no need for extension for the key file and some of 'em are tell that public and private key should be of .der and .pem file formats respectively. So, help me out here to understand the differences. And i'm using <strong><em>Javax.Crypto API.</em></strong></p>
","<p>The file extension is simply a conventional way of distinguishing types of files: .pdf for PDF files, .html for HTML files, etc. You can use whatever extension you want (or no extension at all) to store whatever you like. It has no impact on what the file contains. </p>

<p>So if this file is only relevant to your own application, use whatever name and extension you like. You could use .pdf or .html if you wanted to and it wouldn't change anything (except it would be confusing).</p>
","739","<java><rsa><private-key><public-key><encryption-asymmetric>","1","1","1","2014-03-02 10:04:10","22126204","0","","","","","2014-03-02 09:54:20",""
"33949423","Get private key from a file with DER format (PKCS8) protected with passwordin PHP","<p>this is a new problem that I have tried to find a solution but without success.</p>

<p>This is my necessity. The users will fill a form with a bunch of data and in the same form will upload 2 files and will type a password for one of these files.</p>

<ul>
<li><p>One file has the private key in DER format (PKCS8) protected with
password (the one that the user will type).</p></li>
<li><p>The other file has the public key in DER format (PKCS8) without
password.</p></li>
</ul>

<p>Using the keys in this file a will sign the data the user type in the form and generate/download a xml file with the sign in it.</p>

<p>I know that using <strong>openssl</strong> this requires to be in format PEM, and using the command</p>

<pre><code>“openssl pkcs8 -inform DER private.key -out private.key.pem -passin pass:password”
</code></pre>

<p>I can convert the files to this format. But i have a limitation:</p>

<p>I know that i can convert the DER format to PEM easily with a function (i already did that with the file with the public key) but the problem is with the private key that have a password in it.</p>

<p>For security reasons i can not invoke the exec function to perform this action and i don’t want to store the files in pem format for the same reasons.</p>

<p>Is there a way (a php library, code, etc) that I can extract the content of the private key file without using openssl nor saving the new files? I’m trying to use other libraries like Crypt_RSA but i have not found an example of how i can perform that with that library.</p>

<p>Any help will be appreciated.</p>
","","739","<php><password-protection><encryption-asymmetric>","1","","0","2015-11-27 02:19:23","","1","1","","","","2015-11-27 02:19:23",""
"40582147","PGP Encryption Fails on Large Files","<p>I'm in this weird situation.<br>
I'm trying to encrypt this 11GB which has ~42 Million rows in it using PGP with RSA/Armored Public Key.</p>

<p>Here are the commands I used:</p>

<p>Import Key -> 
<code>gpg --import ~/underwood/keys/my_pub_4096_RSA_key.asc</code>  </p>

<p>PGP Encryption -</p>

<pre><code>gpg -r ""underwood@publickey.com"" -o /usr/local/encrrypted-file/encrypted-11GB-file.txt.pgp
--armor --encrypt /usr/local/file-to-encrrypt/this-is-a-11GB-file.txt
</code></pre>

<p>`</p>

<p>Issue :<br>
The file size of <code>/usr/local/encrrypted-file/encrypted-11GB-file.txt.pgp</code> is 4GB and row count is only 8M. I'm not sure what happened here. The command completed successfully after 3min without errors. </p>

<p>Question:  </p>

<ol>
<li>How do I further investigate this issue ?   </li>
<li>Is there a cap on gpg command on file size ? Because this command workds perfectly fine with 500MB file. </li>
<li>How do I achieve full encryption on 11GB file ?</li>
</ol>

<p>One solution I can think on top of my head is to chunk the 11GB in 500MB files and do this. But the problem here, I'm not allowed to chunk the file.  </p>

<p>Please let me know if there is a better solution to this. </p>
","<p>See unix split function to split a binary file into pieces.</p>
","738","<encryption><public-key-encryption><pgp><encryption-asymmetric>","0","0","1","2017-07-28 14:44:57","","1","","","","","2016-11-14 05:02:32",""
"8810109","Incorrect syntax near 'TO'. Expecting DOUBLECOLON","<p>I'm trying to grant access to to use an asymmetric key a database user.</p>

<pre><code>GRANT VIEW DEFINITION ON ASYMMETRIC KEY ak TO dbuser
</code></pre>

<p>SSMS highlights <code>TO</code> with the following error</p>

<pre><code>Incorrect syntax near 'TO'. Expecting DOUBLECOLON.
</code></pre>

<p>What does this mean? How do I fix it?</p>
","<p>Did you read <a href=""http://msdn.microsoft.com/en-us/library/ms187991.aspx"" rel=""nofollow"">MSDN</a>?</p>

<pre><code>GRANT VIEW DEFINITION ON ASYMMETRIC KEY :: ak TO dbuser
</code></pre>

<p>You need the <code>::</code> for most non-standard-SQL objects in some commands, especially GRANT</p>
","722","<sql-server><sql-server-2008><encryption><encryption-asymmetric><grant>","0","3","1","2012-01-10 20:41:26","8810179","0","","","","","2012-01-10 20:33:03",""
"23805446","Android Encryption & Decryption algorithm for large files","<p>I am using AES algorithm in Android for encryption and decryption. It is okay for small files but when I tried to decrypt a file approximately 70 mb I am waiting 2-3 minutes. Which algorithm should i use? </p>
","<p>I don't know if there is an algorithm that will make a difference in terms of the time it takes to encrypt/decrypt a file of that size.</p>

<p>But you can always try an approach of splitting the file and encrypt/decrypt each part separately where you can use some asynktasks to do it in ""parallel"".</p>

<p>For example you can have 7 files of 10MB each. You decrypt the 7 parts in paralel and stick them together after the decryption.</p>

<p>If you still want to have one physical file, you can put the encrypted separate parts in a zip file and extract them when you need to decrypt.</p>
","720","<android><performance><encryption><encryption-symmetric><encryption-asymmetric>","0","0","1","2014-05-22 11:34:21","","4","","","","","2014-05-22 11:24:08",""
"6029407","How to encrypt a text","<p>I need to implement a simple text encryption in C++ without using any existing framworks. This is purely for educational purpose to learn the in-and-outs and to learn the way to implement such a system. I am not planning to implement this in production code. I can use Windows APIs but it won't be cross platform. I am trying to learn something can work across multiple platforms. the best way to implement this is implement using C/C++. Please share good resources or links in this regard.</p>
","<p>Depending on what you actually want, you could look at the <a href=""http://ciphersaber.gurus.org/"" rel=""nofollow"">CipherSaber</a> project: instructions to implement your own RC4 encryption code for a simple IV+text format.</p>

<p>However this is an academic exercise only: you should never use your own crypto code in production unless you really know what you're doing. You could also read Schneier's Applied Cryptography for a good introduction to all of this stuff.</p>
","704","<c++><encryption><encryption-asymmetric><public-key-encryption><aes>","0","3","1","2011-05-17 10:26:29","","6","","59249","","2011-05-17 10:26:29","2011-05-17 10:19:34","2011-05-17 10:36:37"
"30648980","iOS 5.0 : generated x509 rsa public key of size 2048 is 270 bytes instead of 294 bytes. Why?","<p>I am developing an sdk for iOS 5 at work, and I am communicating with a device via a socket interface. This device requires to be sent a base64 encoded rsa x509 public key of size 2048.</p>

<p>I generate the key pair with the following code:</p>

<pre><code>OSStatus status = noErr;
NSMutableDictionary *privateKeyAttr = [[NSMutableDictionary alloc] init];
NSMutableDictionary *publicKeyAttr= [[NSMutableDictionary alloc] init];
NSMutableDictionary *keyPairAttr = [[NSMutableDictionary alloc] init];

NSData * publicTag = [NSData dataWithBytes:publicKeyIdentifier
                                    length:strlen((const char *)publicKeyIdentifier)];
NSData * privateTag = [NSData dataWithBytes:privateKeyIdentifier
                                     length:strlen((const char *)privateKeyIdentifier)];

SecKeyRef publicKey = NULL;
SecKeyRef privateKey = NULL;

[keyPairAttr setObject:(__bridge id)kSecAttrKeyTypeRSA
                forKey:(__bridge id)kSecAttrKeyType];
[keyPairAttr setObject:[NSNumber numberWithInt:2048]
                forKey:(__bridge id)kSecAttrKeySizeInBits];

[privateKeyAttr setObject:[NSNumber numberWithBool:YES]
                   forKey:(__bridge id)kSecAttrIsPermanent];
[privateKeyAttr setObject:privateTag
                   forKey:(__bridge id)kSecAttrApplicationTag];

[publicKeyAttr setObject:[NSNumber numberWithBool:YES]
                  forKey:(__bridge id)kSecAttrIsPermanent];
[publicKeyAttr setObject:publicTag
                  forKey:(__bridge id)kSecAttrApplicationTag];

[keyPairAttr setObject:privateKeyAttr
                forKey:(__bridge id)kSecPrivateKeyAttrs];
[keyPairAttr setObject:publicKeyAttr
                forKey:(__bridge id)kSecPublicKeyAttrs];

status = SecKeyGeneratePair((__bridge CFDictionaryRef)keyPairAttr,
                            &amp;_publicKey, &amp;_privateKey);
</code></pre>

<p>I then use the following code to obtain the raw data for the public key:</p>

<pre><code>NSData* publicTag = [[NSData alloc] initWithBytes:publicKeyIdentifier length:sizeof(publicKeyIdentifier)];

OSStatus sanityCheck = noErr;
NSData* publicKeyBits = nil;

NSMutableDictionary* queryPublicKey = [[NSMutableDictionary alloc] init];
[queryPublicKey setObject:(__bridge id)kSecClassKey forKey:(__bridge id)kSecClass];
[queryPublicKey setObject:publicTag forKey:(__bridge id)kSecAttrApplicationTag];
[queryPublicKey setObject:(__bridge id)kSecAttrKeyTypeRSA forKey:(__bridge id)kSecAttrKeyType];

// Temporarily add key to the Keychain, return as data:
NSMutableDictionary* attributes = [queryPublicKey mutableCopy];
[attributes setObject:(__bridge id)key forKey:(__bridge id)kSecValueRef];
[attributes setObject:@YES forKey:(__bridge id)kSecReturnData];
CFTypeRef result;
sanityCheck = SecItemAdd((__bridge CFDictionaryRef)attributes, &amp;result);
if (sanityCheck == errSecSuccess) {
    publicKeyBits = CFBridgingRelease(result);

    // Remove from Keychain again:
    (void)SecItemDelete((__bridge CFDictionaryRef)queryPublicKey);
}
return publicKeyBits;
</code></pre>

<p>The above code yields NSData of <strong>270 bytes long</strong> for the public key; I base64 encode this data and send it to the device, but it is rejected.</p>

<p>My colleague at work has completed implementation of the same functionality for android, and he generates his key pair as follows:</p>

<pre><code>    KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
    kpg.initialize(2048);
    KeyPair key = kpg.generateKeyPair();
</code></pre>

<p>And he uses:</p>

<pre><code>    key.getPublic().getEncoded() 
</code></pre>

<p>To access the public key data, which is <strong>294 bytes long</strong>, and which the device accepts.</p>

<p>Also, if I take the raw bytes of his generated public key, and use my base64 encode and send, this is also accepted by the device.</p>

<p>What is the difference here? Why is his key 294 bytes, while mine is 270? And how can I fix this? Any help would be much appreciated.</p>

<p><strong>EDIT</strong></p>

<p>I have just found <a href=""https://crypto.stackexchange.com/questions/14491/why-is-a-2048-bit-public-rsa-key-represented-by-540-hexadecimal-characters-in-x"">https://crypto.stackexchange.com/questions/14491/why-is-a-2048-bit-public-rsa-key-represented-by-540-hexadecimal-characters-in-x</a>, that states:</p>

<p><strong>Note that this does not count the encoding that says ""this is an RSA public key""; that takes up an additional 24 bytes (including overhead).</strong></p>

<p>This sounds like what I need, although I don't know how to include this information.</p>

<p>Anyone?</p>
","<p>Here's the answer: <a href=""http://blog.wingsofhermes.org/?p=42"" rel=""nofollow"">http://blog.wingsofhermes.org/?p=42</a></p>

<p>""First off, when you export a key from the iPhone keychain, it’s exported in a cut down format – just the public key and exponent without any of the other ASN.1 stuff you’d expect in a fully encoded public key.""</p>

<p>I thought it was something like this; I've been smashing my head against a monitor all day..</p>

<p>Bloody apple.</p>
","681","<android><ios><rsa><public-key-encryption><encryption-asymmetric>","0","4","1","2015-06-05 19:27:47","","8","2","-1","","2017-04-13 12:48:18","2015-06-04 16:13:11",""
"9988148","what are solutions to ensure the security of server-side and mobile client communication?","<p>My demands are as follows:</p>

<ol>
<li>limit requests only from mobile device(iphone or android), that is to say, requests from programme or browser are forbidden.</li>
<li>session based conversation.</li>
<li>server-side can regonize the post data is not modified by other proxy or other ways.</li>
<li>Should consider situation that mobile device may be hacked.</li>
</ol>

<p>Some of my thoughts to my demands:</p>

<ul>
<li>corresponding to 1: I want to use RSA, I generate a key and secret, client use the key to encrypt data, server use the its secret to decrypt, and check the key. But how about the key is known to others when the mobile is hacked.</li>
<li>corresponding to 3: I want to use hmac algorithm and secret key to generate signature for every request. </li>
</ul>

<p>Is there any security problems about my solutions? what are yours? </p>

<p><strong>Updated</strong> : I am sorry that I forget to mention all the demands are talked about based on user login.</p>
","<p>1) I'm not sure using RSA will fix that, unless all your mobile apps have the same public/private key combos. A browser could just as easily use RSA and encrypt the data.</p>

<p>A way to do this might be to check the HTTP headers coming in for headers inserted by the mobile operator and if those headers can be faked.</p>

<p>It's a hard problem. I'll keep thinking about it and let you know if something comes to mind.</p>

<p>2) For session-based encryption, you can use the <a href=""http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"" rel=""nofollow"">Diffie-Hellman</a> key-exchange algorithm to negotiate a session key and then use that to lock requests to a session.</p>

<p>3) sounds good.</p>

<p>4) I think the only way around a phone being hacked is to require users to login, because you need to authenticate the user, not only the device. The other thing is that people share phones, so it may not even have been hacked. It may just have been leant out.</p>
","679","<android><iphone><security><encryption><encryption-asymmetric>","2","0","3","2012-04-03 10:03:37","","0","1","544251","","2012-04-03 10:03:37","2012-04-03 06:26:25",""
"9988148","what are solutions to ensure the security of server-side and mobile client communication?","<p>My demands are as follows:</p>

<ol>
<li>limit requests only from mobile device(iphone or android), that is to say, requests from programme or browser are forbidden.</li>
<li>session based conversation.</li>
<li>server-side can regonize the post data is not modified by other proxy or other ways.</li>
<li>Should consider situation that mobile device may be hacked.</li>
</ol>

<p>Some of my thoughts to my demands:</p>

<ul>
<li>corresponding to 1: I want to use RSA, I generate a key and secret, client use the key to encrypt data, server use the its secret to decrypt, and check the key. But how about the key is known to others when the mobile is hacked.</li>
<li>corresponding to 3: I want to use hmac algorithm and secret key to generate signature for every request. </li>
</ul>

<p>Is there any security problems about my solutions? what are yours? </p>

<p><strong>Updated</strong> : I am sorry that I forget to mention all the demands are talked about based on user login.</p>
","<p>Consider using ASIHTTPRequest api, and use SSL for more protection. For hacked mobile , user login is a convenient way to achieve it and everytime user send POST request you can ask for the pass. </p>
","679","<android><iphone><security><encryption><encryption-asymmetric>","2","0","3","2012-04-03 10:03:37","","0","1","544251","","2012-04-03 10:03:37","2012-04-03 06:26:25",""
"9988148","what are solutions to ensure the security of server-side and mobile client communication?","<p>My demands are as follows:</p>

<ol>
<li>limit requests only from mobile device(iphone or android), that is to say, requests from programme or browser are forbidden.</li>
<li>session based conversation.</li>
<li>server-side can regonize the post data is not modified by other proxy or other ways.</li>
<li>Should consider situation that mobile device may be hacked.</li>
</ol>

<p>Some of my thoughts to my demands:</p>

<ul>
<li>corresponding to 1: I want to use RSA, I generate a key and secret, client use the key to encrypt data, server use the its secret to decrypt, and check the key. But how about the key is known to others when the mobile is hacked.</li>
<li>corresponding to 3: I want to use hmac algorithm and secret key to generate signature for every request. </li>
</ul>

<p>Is there any security problems about my solutions? what are yours? </p>

<p><strong>Updated</strong> : I am sorry that I forget to mention all the demands are talked about based on user login.</p>
","<ol>
<li>You generally can't. You need to have your mobile apps authenticate to the server in some way (private account, Google account, SSL client certificate, etc.)</li>
<li>Use regular, cookie-based sessions. Use a solution that provides truly random session IDs and secure with SSL to guard against session hijacking, etc.</li>
<li>Use SSL (HTTPS)</li>
<li>Not sure what that means. If you are doing device-specific authentication, you need a way to revoke accounts, so that a stolen, etc. phone cannot be used. </li>
</ol>

<p>Last but not least: <strong>Do Not Try to Invent a Secure Protocol.</strong> Use HTTPS and don't think you can create a secure solution, just because you read a book/blog/article/textbook about it. </p>

<p>Again: <strong>Please Use HTTPS</strong>.</p>
","679","<android><iphone><security><encryption><encryption-asymmetric>","2","3","3","2012-04-03 10:03:37","","0","1","544251","","2012-04-03 10:03:37","2012-04-03 06:26:25",""
"5746257","How to secure a private key used by a web server to decrypt string store in a db?","<p>I'm developing a small app that will help users easily get information from their isp provider, by scrapping their isp account page.  For that to be possible I need their username and password store in my db.  To keep their password safe I will use an openssl public key to encode it in my db and a private key to decode it before my scrapper log in to their account page.  </p>

<p>I'm wondering where to put my private key so the passwords are safe even if someone take controller of my web server?  Because It would be totally inappropriate to just leave the private key on the web server...</p>

<p>tks</p>
","<p>If someone takes total control of your server and is interested in those passwords, he will succeed. Always take this into consideration and make plans on what to do in this case.</p>

<p>Now to make it as hard as possible and improbable to achieve this, I suggest to store the key (or better, the passwords) in some kind of memory table: like a Ramdisk, a script that will give out only one password per minute and delete itself if called more than that etc.</p>

<p>I don't see any positive effect of using public key encryption here, the key to decrypt must be stored on the server no matter what you use. You may look for Howtos that descripe the problem of https-certificates, they should be protected by passphrases and must be read on server start - the problem is related.</p>

<p>Probably a good solution would be to log into the server, store the passwordfile in a ramdisk and log out. Repeat on Server reboot, crash or password change.</p>
","672","<encryption-asymmetric>","0","0","1","2011-04-28 12:09:52","","0","","179116","","2011-04-21 19:53:18","2011-04-21 15:26:05",""
"9798480","Problems using CNG and BCRYPT_KDF_SP80056A_CONCAT KDF","<p>I am in the processing of implementing a CNG ECDH  and then I am trying to use the BCRYPT_KDF_SP80056A_CONCAT  KDF to derive a symmetric AES256 key (BCryptDeriveKey()).  I am having a problem (i always get back 0xc000000d status returned.)</p>

<p>i have generated a shared secret successfully and I have created the buffer desc ""BCryptBufferDesc"" which has an array of ""BCryptBuffer"" with 1 AlgorithmID, 1 PartyU and 1 PartyV ""other info"". I think I have the structures all defined and populated properly. I am just picking some ""values"" for PartyU and PartyV bytes (i tried 1 byte and 16 bytes for each but i get the same result). NIST documentation gives no details about what the other info should be.. </p>

<p>i have followed the Microsoft web site for creating these structures, using their strings, defines, etc.     I tried with the standard L""HASH"" kdf and it works and i get the same derived key on both ""sides"", but with the concatenation KDF i always get the same 0xC000000D status back..  </p>

<p>Has anybody else been able to successfully use BCRYPT_KDF_SP80056A_CONCAT CNG KDF? If you did, do you have any hints? </p>
","<p>This worked for me:</p>

<pre><code>    ULONG derivedKeySize = 32;
    BCryptBufferDesc params;
    params.ulVersion = BCRYPTBUFFER_VERSION;
    params.cBuffers = 3;
    params.pBuffers = new BCryptBuffer[params.cBuffers];
    params.pBuffers[0].cbBuffer = 0;
    params.pBuffers[0].BufferType = KDF_ALGORITHMID;
    params.pBuffers[0].pvBuffer = new byte[0];
    params.pBuffers[1].cbBuffer = 0;
    params.pBuffers[1].BufferType = KDF_PARTYUINFO;
    params.pBuffers[1].pvBuffer = new byte[0];
    params.pBuffers[2].cbBuffer = 0;
    params.pBuffers[2].BufferType = KDF_PARTYVINFO;
    params.pBuffers[2].pvBuffer = new byte[0];

    NTSTATUS rv = BCryptDeriveKey(secretHandle, L""SP800_56A_CONCAT"", &amp;params, NULL, 0, &amp;derivedKeySize, 0);
    if (rv != 0){/*fail*/}

    UCHAR derivedKey = new UCHAR[derivedKeySize];

    rv = BCryptDeriveKey(secretHandle, L""SP800_56A_CONCAT"", &amp;params, derivedKey, derivedKeySize, &amp;derivedKeySize, 0);
    if (rv  != 0){/*fail*/}
</code></pre>
","666","<encryption><public-key-encryption><encryption-asymmetric><bcrypt><cng>","1","2","1","2012-06-10 16:56:24","","0","","","","","2012-03-21 04:08:52",""
"4086993","Sending messages between two clients, how to verify the identity of the sender?","<p>So assume you have two clients, C1 and C2, each client has a GUID associated with it.</p>

<p>How do you, when you receive a message on C2 that <em>supposedly</em> comes from C1 (by checking the GUID and seeing that it matches the GUID of C1), but since the message is not guaranteed to have come from C1 (C3 might just have sent the message, sending the GUID of C1 in the message header) there has to be some verification that the message actually came from C1.</p>

<p>I've been looking into using asymmetric encryption (RSA) to have C1 send a message that consists of <code>[C1.GUID; RSAEncrypt(C2.PUBLIC_KEY, C1.GUID); MESSAGE]</code>, and then let C2 basically do a check like this (python pseudo code):</p>

<pre><code>message.GUID == RSADecrypt(C2.PRIVATE_KEY, message.ENCRYPTED_GUID)
</code></pre>

<p>Is this a viable approach? Or is there some other clever/more obvious way to verify the sender of a message?</p>
","<p>The problem with this method is that any machine could then capture the guid and rsa-encrypted-guid and pass them just the same. You haven't really created any unique challenge/response criteria that can only be divined by the receiving client. What you would need would be something that is completely unique and can't be gotten simply by looking at passed parameters. Maybe something like:</p>

<pre><code>[ClientName; RSA-ENCRYPTED(GUID+Timestamp); MESSAGE]
</code></pre>

<p>In this method, the RSA encryption would be done using Client2's public key so that only Client2's private key could unlock it. Using the ClientName, Client2 could retrieve the expected GUID from a datasource, and then match the returned GUID against the one in the encryption. I incorporated the usage of a timestamp as a salt so that the encrypted string comes out differently each time. It's considered very weak to use a timestamp as a randomization for a salt, but it gets the point across. Other more secure/random algorithms could be implemented.</p>
","655","<c#><.net><encryption><rsa><encryption-asymmetric>","1","0","4","2010-11-03 17:19:29","4087095","6","1","452521","","2010-11-03 12:45:20","2010-11-03 12:24:36",""
"4086993","Sending messages between two clients, how to verify the identity of the sender?","<p>So assume you have two clients, C1 and C2, each client has a GUID associated with it.</p>

<p>How do you, when you receive a message on C2 that <em>supposedly</em> comes from C1 (by checking the GUID and seeing that it matches the GUID of C1), but since the message is not guaranteed to have come from C1 (C3 might just have sent the message, sending the GUID of C1 in the message header) there has to be some verification that the message actually came from C1.</p>

<p>I've been looking into using asymmetric encryption (RSA) to have C1 send a message that consists of <code>[C1.GUID; RSAEncrypt(C2.PUBLIC_KEY, C1.GUID); MESSAGE]</code>, and then let C2 basically do a check like this (python pseudo code):</p>

<pre><code>message.GUID == RSADecrypt(C2.PRIVATE_KEY, message.ENCRYPTED_GUID)
</code></pre>

<p>Is this a viable approach? Or is there some other clever/more obvious way to verify the sender of a message?</p>
","<p>Assymmetric Algorithms have been invented for such purposes, that's the way digital signatures work.</p>

<p>However, your approach has some problems. Anyone with the public key of the recipient could fake the signature. Also, the signature does not change at all! Anyone intercepting the messages can fake being a valid sender. The purpose of assymetric encryption is to defeat these problems with key exchanges, there's the concept of the digital signature, which is basically an assymetrically encrypted hash of the message you are tossing around.</p>

<p>For RSA, you need to do a bit more in order to create a digital signature from the basic algorithm, see wikipedia for more details: <a href=""http://en.wikipedia.org/wiki/RSA#Signing_messages"" rel=""nofollow"">http://en.wikipedia.org/wiki/RSA#Signing_messages</a></p>

<p>I'd just use a digital signature algorithm from a library. First google search turns up with this for Python:</p>

<p><a href=""http://www.example-code.com/python/pythonrsa.asp"" rel=""nofollow"">http://www.example-code.com/python/pythonrsa.asp</a></p>

<p><a href=""http://www.chilkatsoft.com/dsa-python.asp"" rel=""nofollow"">http://www.chilkatsoft.com/dsa-python.asp</a></p>
","655","<c#><.net><encryption><rsa><encryption-asymmetric>","1","2","4","2010-11-03 17:19:29","4087095","6","1","452521","","2010-11-03 12:45:20","2010-11-03 12:24:36",""
"4086993","Sending messages between two clients, how to verify the identity of the sender?","<p>So assume you have two clients, C1 and C2, each client has a GUID associated with it.</p>

<p>How do you, when you receive a message on C2 that <em>supposedly</em> comes from C1 (by checking the GUID and seeing that it matches the GUID of C1), but since the message is not guaranteed to have come from C1 (C3 might just have sent the message, sending the GUID of C1 in the message header) there has to be some verification that the message actually came from C1.</p>

<p>I've been looking into using asymmetric encryption (RSA) to have C1 send a message that consists of <code>[C1.GUID; RSAEncrypt(C2.PUBLIC_KEY, C1.GUID); MESSAGE]</code>, and then let C2 basically do a check like this (python pseudo code):</p>

<pre><code>message.GUID == RSADecrypt(C2.PRIVATE_KEY, message.ENCRYPTED_GUID)
</code></pre>

<p>Is this a viable approach? Or is there some other clever/more obvious way to verify the sender of a message?</p>
","<p>Anyone spying messages between a client and the server will be able to forge new messages, has client's <code>GUID</code> never change, nor <code>RSA-ENCRYPTED-GUID</code>.</p>

<p>Consider switching to this message model : <code>[GUID; ENCRYPTED_CONTENT_CHECKSUM; CONTENT]</code>.</p>

<pre><code>Checksum(message.CONTENT) == 
    RSADescrypt(C1.PUBLIC_KEY, message.ENCRYPTED_CONTENT_CHECKSUM)
</code></pre>

<p>Still, anyone spying messages can resend previously sent messages.</p>
","655","<c#><.net><encryption><rsa><encryption-asymmetric>","1","0","4","2010-11-03 17:19:29","4087095","6","1","452521","","2010-11-03 12:45:20","2010-11-03 12:24:36",""
"4086993","Sending messages between two clients, how to verify the identity of the sender?","<p>So assume you have two clients, C1 and C2, each client has a GUID associated with it.</p>

<p>How do you, when you receive a message on C2 that <em>supposedly</em> comes from C1 (by checking the GUID and seeing that it matches the GUID of C1), but since the message is not guaranteed to have come from C1 (C3 might just have sent the message, sending the GUID of C1 in the message header) there has to be some verification that the message actually came from C1.</p>

<p>I've been looking into using asymmetric encryption (RSA) to have C1 send a message that consists of <code>[C1.GUID; RSAEncrypt(C2.PUBLIC_KEY, C1.GUID); MESSAGE]</code>, and then let C2 basically do a check like this (python pseudo code):</p>

<pre><code>message.GUID == RSADecrypt(C2.PRIVATE_KEY, message.ENCRYPTED_GUID)
</code></pre>

<p>Is this a viable approach? Or is there some other clever/more obvious way to verify the sender of a message?</p>
","<p>Public and private keys are the way to go. I will assume you don't care about encrypting the data, but you do care that the data is ""authorized"".</p>

<p>Lets say you have 3 computers </p>

<p>Comp1
Comp2
Comp3</p>

<p>Lets also say you want Comp1 to send a message to Comp3. you don't care if the message was intercepted, but you do care that it was not forged.</p>

<p>Comp1 will digitally sign the message with its private key</p>

<p>Comp2 will intercept the message from Comp1 to Comp3, but can't change the message without invalidating the signature</p>

<p>Comp2 will forward the message onto Comp3</p>

<p>Comp3 will use Comp1's public key to decrypt the signature and use the hash in the signature to validate the contents.</p>

<p>Now if you want to encrypt the data, you need to add an extra step</p>

<p>Comp1 will digitally sign the message with its private key</p>

<p>Comp1 will generate an random encryption key(typically AES) and encrypt the message.</p>

<p>Comp1 will take that encryption key and encrypt it with Comp3's public key</p>

<p>Comp2 will intercept the message, but cannot read it without Comp3's private key</p>

<p>Comp2 will forward the message onto Comp3</p>

<p>Comp3 will use it's private key to decrypt the AES key</p>

<p>Comp3 will decrypt the entire message using the AES key</p>

<p>Comp3 will validate the message by decrypting the signature with Comp1's public key.</p>

<p>Signature contains a hash of the message, if the hash and the message's hash match, then the data is intact.</p>

<p>You can include the GUIDs in the payload to use as a lookup to decide which public keys to use.</p>

<p>P.S. You will want to use the built in methods to sign a message. Let the Framework do the hashing/etc</p>
","655","<c#><.net><encryption><rsa><encryption-asymmetric>","1","0","4","2010-11-03 17:19:29","4087095","6","1","452521","","2010-11-03 12:45:20","2010-11-03 12:24:36",""
"54333855","NodeJS: Can't sign in nodeJS 10.14.2","<p>I read the following <a href=""https://nodejs.org/api/crypto.html#crypto_class_sign"" rel=""nofollow noreferrer"">https://nodejs.org/api/crypto.html#crypto_class_sign</a> and tried to copy the code:</p>

<blockquote>
  <p>sign.js</p>
</blockquote>

<pre><code>const crypto = require('crypto');

const { privateKey, publicKey } = crypto.generateKeyPairSync('ec', {
  namedCurve: 'sect239k1'
});

const sign = crypto.createSign('SHA256');
sign.write('some data to sign');
sign.end();
const signature = sign.sign(privateKey, 'hex');

const verify = crypto.createVerify('SHA256');
verify.write('some data to sign');
verify.end();
console.log(verify.verify(publicKey, signature));
// Prints: true or false
</code></pre>

<p>But it throws me an error</p>

<pre><code>&gt;&gt; node sign.js  
internal/crypto/keygen.js:73
    throw new ERR_INVALID_OPT_VALUE('publicKeyEncoding', publicKeyEncoding);
    ^

TypeError [ERR_INVALID_OPT_VALUE]: The value ""undefined"" is invalid for option ""publicKeyEncoding""
    at parseKeyEncoding (internal/crypto/keygen.js:73:11)
    at check (internal/crypto/keygen.js:240:7)
    at Object.generateKeyPairSync (internal/crypto/keygen.js:53:16)
    at Object.&lt;anonymous&gt; (/Users/norfeldt/Desktop/AsymEnc/sign.js:3:42)
    at Module._compile (internal/modules/cjs/loader.js:689:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
    at Module.load (internal/modules/cjs/loader.js:599:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
    at Function.Module._load (internal/modules/cjs/loader.js:530:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)
</code></pre>

<h1>Update</h1>

<p>I made the following change (as suggested by @ottomeister)</p>

<pre><code>const crypto = require('crypto')

const { privateKey, publicKey } = crypto.generateKeyPairSync('ec', {
  namedCurve: 'sect239k1',
  publicKeyEncoding: { type: 'spki', format: 'der' },
  privateKeyEncoding: { type: 'pkcs8', format: 'der' },
})

const sign = crypto.createSign('SHA256')
sign.write('some data to sign')
sign.end()
const signature = sign.sign(privateKey, 'hex')

const verify = crypto.createVerify('SHA256')
verify.write('some data to sign')
verify.end()
console.log(verify.verify(publicKey, signature))
// Prints: true or false
</code></pre>

<p>But it now throws me a new error</p>

<pre><code>internal/crypto/sig.js:80
  var ret = this._handle.sign(key, passphrase, rsaPadding, pssSaltLength);

Error: error:0906D06C:PEM routines:PEM_read_bio:no start line
    at Sign.sign (internal/crypto/sig.js:80:26)
    at Object.&lt;anonymous&gt; (/Users/norfeldt/Desktop/AsymEnc/sign.js:12:24)
    at Module._compile (internal/modules/cjs/loader.js:689:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
    at Module.load (internal/modules/cjs/loader.js:599:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
    at Function.Module._load (internal/modules/cjs/loader.js:530:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)
    at startup (internal/bootstrap/node.js:282:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:743:3)
</code></pre>

<p>(I don't know it makes a difference, but I would like to read <code>.pem</code> files I create with openssl)</p>
","<p>You say you're using Node.js version 10 but your link points to the documentation for Node.js version 11.  The documentation for version 10 is at <a href=""https://nodejs.org/dist/latest-v10.x/docs/api/crypto.html"" rel=""nofollow noreferrer"">https://nodejs.org/dist/latest-v10.x/docs/api/crypto.html</a></p>

<p>In version 11, the <code>publicKeyEncoding</code> and <code>privateKeyEncoding</code> properties of the <code>options</code> object passed as the second argument to <code>crypto.generateKeyPairSync</code> are optional.  In version 10 these properties are not optional, they <strong>must</strong> be specified.  Your program doesn't provide those properties, and that's why it's blowing up.</p>

<p>If you change:</p>

<pre><code>const { privateKey, publicKey } = crypto.generateKeyPairSync('ec', {
  namedCurve: 'sect239k1'
});
</code></pre>

<p>to:</p>

<pre><code>const { privateKey, publicKey } = crypto.generateKeyPairSync('ec', {
  namedCurve: 'sect239k1',
  publicKeyEncoding:  { type: 'spki', format: 'der' },
  privateKeyEncoding: { type: 'pkcs8', format: 'der' }
});
</code></pre>

<p>then your program should be much happier.</p>

<hr>

<h1>Update</h1>

<p>OK, I installed Node 10 and ran your program.  <code>sign.sign()</code> is blowing up because, as stated in the documentation, it requires the private key to be in PEM format.  It can't handle a private key in the DER format my original answer produced.  The same applies to the format of the public key passed to <code>verify.verify()</code> -- it must be PEM, not DER.  So change this:</p>

<pre><code>const { privateKey, publicKey } = crypto.generateKeyPairSync('ec', {
  namedCurve: 'sect239k1',
  publicKeyEncoding:  { type: 'spki', format: 'der' },
  privateKeyEncoding: { type: 'pkcs8', format: 'der' }
});
</code></pre>

<p>to this:</p>

<pre><code>const { privateKey, publicKey } = crypto.generateKeyPairSync('ec', {
  namedCurve: 'sect239k1',
  publicKeyEncoding:  { type: 'spki', format: 'pem' },
  privateKeyEncoding: { type: 'pkcs8', format: 'pem' }
});
</code></pre>

<p>That is, change both occurrences of <code>'der'</code> to <code>'pem'</code>.</p>

<p>That will let your program run without throwing exceptions.  However, the verification attempt will fail and the reported result written by the final <code>console.log()</code> call will be <code>false</code>.  That's because the program does not tell <code>verify.verify()</code> the encoding that was used in the <code>privateKey</code> string.  To fix that and get a <code>true</code> result from the verification, change:</p>

<pre><code>verify.verify(publicKey, signature)
</code></pre>

<p>to:</p>

<pre><code>verify.verify(publicKey, signature, 'hex')
</code></pre>

<p>matching the string encoding that was specified when the signature was generated by <code>sign.sign()</code>.  The documentation isn't very clear on this part, but from experimentation it seems that if the signature is a string then you must always specify the encoding of the string.  The only circumstance in which you can skip providing the encoding here is if you also skip it in the <code>sign.sign()</code> call, which would have caused <code>signature</code> to be generated as a <code>Buffer</code> rather than as a string.</p>
","653","<javascript><node.js><encryption><public-key-encryption><encryption-asymmetric>","1","4","1","2019-01-24 22:07:41","54340970","0","","618099","","2019-01-24 20:31:40","2019-01-23 18:51:43",""
"34967313","Using asymmetric encryption for license file","<p>I want to send to a client an encrypted file that contains the license data for my application. As I will use asymmetric encryption, I will encrypt the file using a private key and send it to the client. The application on the client's pc will decrypt the sent file using a public key located in the application code.  </p>

<p>The threat model I aspect here is that the public key could be extracted from the application .dll files (using .net reflector for example) and used to regenerate the license.</p>

<p>So is there a way to protect my application ?</p>

<p><strong>Update:</strong></p>

<p>I went through the code example in the following <a href=""https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-encrypt-xml-elements-with-asymmetric-keys"" rel=""nofollow noreferrer"">link</a> for encryption the xml file.</p>

<p>The problem I am facing now is that both keys will be generated in the client pc same as mine according to the code sample. So is this right or there is a misunderstanding from me?</p>

<p>Also as Alexe Barlescu suggested to use the ProtectedData class to protect the private key, how can I achieve that ?</p>
","<p>Asymmetric Encryption uses two keys: </p>

<ul>
<li>a public key for encrypting the data</li>
<li>a private key for the decryption of the data</li>
</ul>

<p>Encrypt the file containing the license with client's Public Key, so only he can decrypt it, with his Private Key.
To make your client's Private key safe, encrypt it with Protect method located in ProtectedData class in System.Security.Cryptography namespace. The Private key will be stored on his computer encrypted, he can decrypt the key only when he needs to decrypt a message sent from you. </p>
","650","<c#><encryption><encryption-asymmetric>","0","0","1","2018-03-25 06:48:46","","4","","3724116","","2018-03-25 06:48:46","2016-01-23 18:44:13",""
"3061225","Is it possible to use pure Encrypting and Decrypting keys in asymmetric cryptography instead of private and public keys?","<p>Is it possible to use pure Encrypting and Decrypting keys instead of private and public keys? As I know in .Net asymmetric RSA implementation private key <code>RSAParameters parameters = (new RSACryptoServiceProvider()).ExportParameters(true)</code> is a superset of public key. And using private key we can both encrypt and decrypt our data. But <strong><em>I need key only for decrypting</em></strong> data. How to do it?</p>

<p>I experimented on nulling RSAParameters fields, but RSACryptoServiceProvider object can't import such parameters.</p>
","<p>For decoding data you need either the public <em>or</em> the private key. Depends on how it was encoded. </p>

<p>Stick with the standard patterns, and just be careful <em>never</em> to distribute your private key. </p>

<hr>

<p>From your comments (to various answers), you just need signing (of a Hash of your data). It is no use to encrypt data with a key that everybody can have. </p>

<p>There are standard functions and patterns for signing.</p>
","642","<c#><.net><rsa><encryption-asymmetric>","1","1","4","2014-12-11 17:24:50","3061883","4","","40220","","2010-06-17 13:07:18","2010-06-17 11:29:06",""
"3061225","Is it possible to use pure Encrypting and Decrypting keys in asymmetric cryptography instead of private and public keys?","<p>Is it possible to use pure Encrypting and Decrypting keys instead of private and public keys? As I know in .Net asymmetric RSA implementation private key <code>RSAParameters parameters = (new RSACryptoServiceProvider()).ExportParameters(true)</code> is a superset of public key. And using private key we can both encrypt and decrypt our data. But <strong><em>I need key only for decrypting</em></strong> data. How to do it?</p>

<p>I experimented on nulling RSAParameters fields, but RSACryptoServiceProvider object can't import such parameters.</p>
","<p>I think you need to use the private key for decrypting and the public key for encrypting.</p>

<p>The receiver (decrypter) sends it's public key to the sender (encrypter). So everyone can send messages, only the receiver can read them. It this what you need?</p>

<p>If you need to make sure that the message come from a certain sender, it needs to add a signature by using its own private key. The receiver can verify this by using the senders public key.</p>
","642","<c#><.net><rsa><encryption-asymmetric>","1","1","4","2014-12-11 17:24:50","3061883","4","","40220","","2010-06-17 13:07:18","2010-06-17 11:29:06",""
"3061225","Is it possible to use pure Encrypting and Decrypting keys in asymmetric cryptography instead of private and public keys?","<p>Is it possible to use pure Encrypting and Decrypting keys instead of private and public keys? As I know in .Net asymmetric RSA implementation private key <code>RSAParameters parameters = (new RSACryptoServiceProvider()).ExportParameters(true)</code> is a superset of public key. And using private key we can both encrypt and decrypt our data. But <strong><em>I need key only for decrypting</em></strong> data. How to do it?</p>

<p>I experimented on nulling RSAParameters fields, but RSACryptoServiceProvider object can't import such parameters.</p>
","<p>If you're asking what I think you're asking, you're solving a problem like this one:</p>

<p>You encrypt some data.  You send it to clients, and want them to be able to decrypt it, but you do <em>not</em> want them to be able to encrypt anything, because then they could convince <em>other</em> clients that they're you.</p>

<p>Is that close?  Can you tell us what problem you're solving?</p>

<p>For the rest of the folks on the thread, it sounds pretty clear the OP wants a decrypt-only key, instead of the usual encrypt-only public key.</p>

<p><i>Edit: the comments are correct in that a private key can't be used to encrypt, but it's not that difficult to generate the public key given the private key.  If you have the private key, you effectively can have both keys.</i></p>

<p><i>Edit 2: OP, you should probably look into <a href=""http://en.wikipedia.org/wiki/Digital_signature"" rel=""nofollow noreferrer"">digital signatures</a>.  You could sign a message (using the private key) and then confirm the signature with the public key, which I think is exactly what you asked for.</i></p>
","642","<c#><.net><rsa><encryption-asymmetric>","1","2","4","2014-12-11 17:24:50","3061883","4","","40220","","2010-06-17 13:07:18","2010-06-17 11:29:06",""
"3061225","Is it possible to use pure Encrypting and Decrypting keys in asymmetric cryptography instead of private and public keys?","<p>Is it possible to use pure Encrypting and Decrypting keys instead of private and public keys? As I know in .Net asymmetric RSA implementation private key <code>RSAParameters parameters = (new RSACryptoServiceProvider()).ExportParameters(true)</code> is a superset of public key. And using private key we can both encrypt and decrypt our data. But <strong><em>I need key only for decrypting</em></strong> data. How to do it?</p>

<p>I experimented on nulling RSAParameters fields, but RSACryptoServiceProvider object can't import such parameters.</p>
","<p>If you want to make sure that the private key-holder cannot encrypt something such that the result is indistinguishable from a message sent by the public key-holder, then you could simply double-wrap your data.</p>

<p>Simply have two key-pairs.</p>

<p>Side A gets the private key of key-pair 1, and the public key of key-pair 2.
Side B gets the public key of key-pair 1, and the private key of key-pair 2.</p>

<p>Side B sends his/her/its message by first encrypting it with the public key of key-pair 1, and then the private key of key-pair 2.</p>

<p>Side A decrypts the result using the public key of key-pair 2, and the private key of key-pair 1 (in that order).</p>

<p>Side A can generate the public key of key-pair 1, but cannot generate the private key of key-pair 2, so side A cannot generate a valid message.</p>

<p>The inverse works in the other direction.</p>

<p>Down-side:  If you have a central person (or server) that every other person (or computer) is communicating with, each party needs their own private key, and they need to share the corresponding public key with the central person (or server) they are communicating with. </p>
","642","<c#><.net><rsa><encryption-asymmetric>","1","0","4","2014-12-11 17:24:50","3061883","4","","40220","","2010-06-17 13:07:18","2010-06-17 11:29:06",""
"46958289","Nested JWS + JWE vs JWE with Authenticated Encryption","<p><strong>Problem</strong></p>

<p>I want to sign and encrypt (effectively, obfuscate) some information ('token') on my server (a trusted environment) and send the cyphertext to a client machine (not quite trusted environment) to be read and verified by my client-side software. This type of the environment allows me to have a private key on the server for asymmetric signing, but I cannot 'hide' a secret key for symmetric signing on a client side. </p>

<p><strong>Alternatives</strong></p>

<p>I chose to use JWT as a standard and <a href=""https://connect2id.com/products/nimbus-jose-jwt"" rel=""nofollow noreferrer"">Nimbus JOSE+JWT library</a> as an implementation for signing and encryption. <a href=""https://connect2id.com/products/nimbus-jose-jwt"" rel=""nofollow noreferrer"">Nimbus</a> library provides two options for sign + encrypt: nest JWS into JWE or use JWE with authenticated encryption algorithm (A128CBC_HS256, A192CBC_HS384, or A256CBC_HS512). <a href=""https://connect2id.com/products/nimbus-jose-jwt/algorithm-selection-guide"" rel=""nofollow noreferrer"">Algorithm Selection Guide for Nimbus</a> states:</p>

<blockquote>
  <p>Encryption in JOSE is always authenticated, meaning that ciphertext’s integrity is protected from tampering. Authenticated encryption thus makes nesting an HMAC JWT inside a JSON Web Encryption (JWE) redundant; use just JWE encryption.</p>
</blockquote>

<p>However, AxxxCBC_HSxxx encryption methods use only symmetric keys. Additionally, replacing direct JWE algorithm with RSA JWE algorithm should not help, because an abuser can generate CEK (consisting of encryption key and key for HMAC) themselves and encrypt it with a public key.</p>

<p><strong>Question</strong></p>

<p>Despite the quote about the redundancy of nested JWTs, I concluded, that  for my case JWE+JWS nesting is the only workable approach. Am I right?</p>
","<h1>Clarifications</h1>

<p>Every content encryption algorithms (<code>AxxxGCM</code> and <code>AxxxCBC_HSxxx</code>) use a symmetric key (<code>CEK</code>). This key is determined by the key encryption algorithm and its key management mode (random CEK, key agreement, direct key...).</p>

<p>You are right, contrary to the <code>AxxxGCM</code> algorithms, the <code>AxxxCBC</code> algorithms are not authenticated encryption algorithms.
However, the <a href=""https://tools.ietf.org/html/rfc7516#section-5.1"" rel=""nofollow noreferrer"">RFC7516 section 5.1 item 15.</a> (specification for JWE) introduces a tag that allows to authenticate the cyphertext and protect the integrity of the protected header (that is why the <code>AxxxCBC</code> algorithm is used with the <code>HSxxx</code>).</p>

<p>This is confirmed by the table in the <a href=""https://tools.ietf.org/html/rfc7518#section-5.1"" rel=""nofollow noreferrer"">RFC7518 section 5.1</a>. Details are given in the next section.</p>

<p>In any case, you will need 2 algorithms for JWE computation:</p>

<ul>
<li>The key encryption algorithm: you mentioned you have an asymmetric key so I guess you will chose an <code>RSA</code> or an <code>ECDH-ES</code> algorithm depending on your key type.</li>
<li>The content encryption key: <code>AxxxGCM</code> or <code>AxxxCBC_HSxxx</code> algorithms. With the JWE specification both offer an authenticated encryption. Personally I prefer <code>AxxxGCM</code> algorithms because they are faster in my environment.</li>
</ul>

<h1>Answer</h1>

<p>You indicated that you want sign and encrypt but you cannot hide a secret key on client side thus the signature will not be guaranteed.</p>

<p>If you only encrypt (JWE only), your server will not be able to verify the issuer of the token. </p>
","626","<encryption><jwt><encryption-asymmetric><jwe><message-authentication-code>","1","1","1","2017-10-27 12:25:43","46970415","0","","","","","2017-10-26 15:29:39",""
"469267","Ok, so I've encrypted my data now where do I hide the key?","<p>I have a database that contains sensitive information. I can encrypt / decrypt the data on the read write operations. The problem is that I need to store the key in the application. If someone has hacked their way in such they have access to the database then they can also grab the application (java) decomplie it and pull the key.</p>

<p>This seems like a speed bump at best. What other solutions are available?</p>
","<p>Require the user to enter a passphrase to access their data.  Burying the key in the code is security by obscurity.</p>
","626","<security><encryption><encryption-asymmetric>","9","2","7","2011-09-27 16:31:35","","0","3","","","","2009-01-22 14:15:45",""
"469267","Ok, so I've encrypted my data now where do I hide the key?","<p>I have a database that contains sensitive information. I can encrypt / decrypt the data on the read write operations. The problem is that I need to store the key in the application. If someone has hacked their way in such they have access to the database then they can also grab the application (java) decomplie it and pull the key.</p>

<p>This seems like a speed bump at best. What other solutions are available?</p>
","<p>Encrypt the key (using DPAPI), put it in a file, put an ACL on that file etc...</p>
","626","<security><encryption><encryption-asymmetric>","9","-1","7","2011-09-27 16:31:35","","0","3","","","","2009-01-22 14:15:45",""
"469267","Ok, so I've encrypted my data now where do I hide the key?","<p>I have a database that contains sensitive information. I can encrypt / decrypt the data on the read write operations. The problem is that I need to store the key in the application. If someone has hacked their way in such they have access to the database then they can also grab the application (java) decomplie it and pull the key.</p>

<p>This seems like a speed bump at best. What other solutions are available?</p>
","<p>I am assuming you have some way to verify the credentials of the user before allowing them to access the database?</p>

<p>Usually the architecture for these kinds of things is as follows:</p>

<ul>
<li>Database</li>
<li>Server</li>
<li>Client</li>
</ul>

<p>The Client connects to the Server, which then connects to the Database.
The Server makes sure the Client authenticates correctly before allowing them access to sensitive information.  The decryption key is stored only on the server.  Noone should have access to the server, and especially the file that contains the key.  This way the clients do not have any encryption/decryption they have to do, and do not have to store any keys.</p>
","626","<security><encryption><encryption-asymmetric>","9","3","7","2011-09-27 16:31:35","","0","3","","","","2009-01-22 14:15:45",""
"469267","Ok, so I've encrypted my data now where do I hide the key?","<p>I have a database that contains sensitive information. I can encrypt / decrypt the data on the read write operations. The problem is that I need to store the key in the application. If someone has hacked their way in such they have access to the database then they can also grab the application (java) decomplie it and pull the key.</p>

<p>This seems like a speed bump at best. What other solutions are available?</p>
","<p>Read up on keystores.</p>


","626","<security><encryption><encryption-asymmetric>","9","3","7","2011-09-27 16:31:35","","0","3","","","","2009-01-22 14:15:45",""
"469267","Ok, so I've encrypted my data now where do I hide the key?","<p>I have a database that contains sensitive information. I can encrypt / decrypt the data on the read write operations. The problem is that I need to store the key in the application. If someone has hacked their way in such they have access to the database then they can also grab the application (java) decomplie it and pull the key.</p>

<p>This seems like a speed bump at best. What other solutions are available?</p>
","<p>The only thing you can do is make it difficult to extract the key from your application. You can't make it impossible. If you give someone a box with contents that you're trying to protect, you have to give them the key if you want them to be able to access the contents. Once you give them the key they can do whatever they want… if they take the trouble of finding the key.</p>

<p>This is a case of Bob and Eve being the same person, you want to give Bob access but stop Eve from seeing it.</p>

<p>This is DRM, it doesn't work.</p>
","626","<security><encryption><encryption-asymmetric>","9","5","7","2011-09-27 16:31:35","","0","3","","","","2009-01-22 14:15:45",""
"469267","Ok, so I've encrypted my data now where do I hide the key?","<p>I have a database that contains sensitive information. I can encrypt / decrypt the data on the read write operations. The problem is that I need to store the key in the application. If someone has hacked their way in such they have access to the database then they can also grab the application (java) decomplie it and pull the key.</p>

<p>This seems like a speed bump at best. What other solutions are available?</p>
","<p>Store the keys in a CSP container. Consider the <a href=""http://www.cs.kent.ac.uk/projects/ofa/jcsp/jcsp-1.1-rc4/jcsp-doc/overview-summary.html"" rel=""nofollow noreferrer"">Java CSP here</a> .</p>

<p>This is IMO the safest way possible. But you can also consider storing the key in a file which is protected by the operating system using some kind of ACL.</p>
","626","<security><encryption><encryption-asymmetric>","9","2","7","2011-09-27 16:31:35","","0","3","","","","2009-01-22 14:15:45",""
"469267","Ok, so I've encrypted my data now where do I hide the key?","<p>I have a database that contains sensitive information. I can encrypt / decrypt the data on the read write operations. The problem is that I need to store the key in the application. If someone has hacked their way in such they have access to the database then they can also grab the application (java) decomplie it and pull the key.</p>

<p>This seems like a speed bump at best. What other solutions are available?</p>
","<p>require the user to log in using a strong password; use the password as the key for a symmetric encryption algorithm to decrypt the asymmetric database key</p>

<p>keep the db key in secure memory while the application is running (if that is an option)</p>
","626","<security><encryption><encryption-asymmetric>","9","1","7","2011-09-27 16:31:35","","0","3","","","","2009-01-22 14:15:45",""
"20891696","How can I add encryption to Java NIO?","<p>I'm supposed to add asymmetric encryption to an application with Client &lt;-> Server architecture using Java NIO.</p>

<p>I have read somewhere that I should go with SSL but I would have problems adapting the NIO Server to it.</p>

<p>Any thoughts and recommendations about it? Maybe an example? I would highly appreciate some enlightenment.</p>

<p>Cheers</p>

<p>EDIT:</p>

<p>Forgot to mention that the existing communication is between non-blocking client and non-blocking server through only one SocketChannel</p>
","","614","<java><encryption><nio><encryption-asymmetric>","0","","0","2014-01-03 14:37:38","","6","","438044","","2014-01-03 14:37:38","2014-01-02 20:55:24",""
"27722862","Encrypting MongoDB password","<p>I'm using spring's mongo template to access my db,
I was wondering if it is possible to encrypt asymmetrically the password usage such that i'll provide the DB the one key, and I'll have the other.
(Encrypt only the authentication part, not the whole connection/data)</p>

<p>Thanks</p>
","<p>Sounds like you want x.509 authentication. Help on getting that setup is a little too broad for a single stack overflow question. There are various guides you can find with a Google search and for the nitty gritty details of what is happening under the hood and common issues I wrote a long <a href=""http://www.allanbank.com/blog/security/tls/x.509/2014/10/13/tls-x509-and-mongodb/"" rel=""nofollow"">blog post</a>.</p>

<p>If you really don't want the encryption of the ""whole connection"" (and I would strongly encourage you to reconsider that since it is basically free) you can use on the NULL cipher suites with the SSL connection. Configuring the client to offer only NULL cipher suites (and getting the server to accept them) will, again, require more details on your specific setup.</p>

<p>HTH - Rob</p>

<p>P.S. Just to be clear the authentication messages in SSL are done ""in the clear"". The contents of the messages contain portions that are asymmetrically encrypted (challenges and pre-master secret) but the bulk of the handshake exchanges are in the clear.</p>
","609","<spring><mongodb><public-key><encryption-asymmetric>","0","1","1","2014-12-31 16:19:31","","0","","","","","2014-12-31 15:09:26",""
"10588331","Symmetric key transfer Vs asymmetric for encryption and signing on mobile device","<p><strong>Scenario</strong></p>

<p>A SOAP web service provides an interface for retrieving documents and data. Security is paramount.</p>

<p>WS-Security is used and both the client and server encrypt and sign the entire SOAP envelope.</p>

<p><strong>Questions</strong></p>

<p>Should the private key used for signing be compiled into the application and stored on the device or should it provided by the server using a key exchange protocol (perhaps after authentication of the user)?</p>

<p>Should the private key for decryption be stored on the device or provided by the server?</p>

<p>Is it realistic to have a unique key for each file that is to be decrypted by the server (if uploading from client) or decrypted by the client (if downloading from server)?</p>
","<p>The entire concept of a private key is defeated if it has to be transmitted from one device to another. Each end of the communication channel must generate their own private keys. Note, that this doesn't mean compiling private keys into an executable, because then everyone with the executable shares a private key, which is obviously not what you want. Each individual device has to use a <a href=""http://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator"" rel=""nofollow"">cryptographically secure source of random numbers</a> to generate it's own public/private key pair. Then public keys can be exchanged in the clear, you can use them to exchange session keys (which can be unique for each and every file), private keys can sign, and everybody is happy.</p>

<p>But remember: Never, ever hard code private keys, and never, ever share them with anybody.</p>
","601","<soap><encryption-asymmetric><encryption-symmetric>","2","0","2","2012-05-14 18:07:49","10588704","0","","828547","","2012-05-14 17:46:04","2012-05-14 17:37:32",""
"10588331","Symmetric key transfer Vs asymmetric for encryption and signing on mobile device","<p><strong>Scenario</strong></p>

<p>A SOAP web service provides an interface for retrieving documents and data. Security is paramount.</p>

<p>WS-Security is used and both the client and server encrypt and sign the entire SOAP envelope.</p>

<p><strong>Questions</strong></p>

<p>Should the private key used for signing be compiled into the application and stored on the device or should it provided by the server using a key exchange protocol (perhaps after authentication of the user)?</p>

<p>Should the private key for decryption be stored on the device or provided by the server?</p>

<p>Is it realistic to have a unique key for each file that is to be decrypted by the server (if uploading from client) or decrypted by the client (if downloading from server)?</p>
","<p>Just a couple suggestions:</p>

<p>-You should consider symmetric keys embedded into anything outside your server as public due to reverse engineering (i.e. don't bother even encrypting if the key is out in the wild).</p>

<p>-You should use a per-session symmetric key generated by a secure RNG on the client, and transmitted to the server encrypted with the global asymmetric public key.  Private keys have a shelf-life.</p>

<p>-You can use the session key for all files/streams transferred in that session, but you should use a unique nonce to salt the symmetric-key encryption for each file.  Depending on the encryption mode, using the same key/nonce with more than one stream can leave you vulnerable to XOR'ing the two streams and recovering a mashed-together but unencrypted result.</p>
","601","<soap><encryption-asymmetric><encryption-symmetric>","2","1","2","2012-05-14 18:07:49","10588704","0","","828547","","2012-05-14 17:46:04","2012-05-14 17:37:32",""
"44250404","EncryptedXml DecryptDocument method error after .Net framework update","<p>I have an old function written in 2013 that decrypt xml that was encrypted by another program.</p>

<p>The code is realy simple</p>

<pre><code>        public static void Decrypt(XmlDocument Doc)
    {
        // Check the arguments.  
        if (Doc == null)
            throw new ArgumentNullException(""Doc"");

        // Create a new EncryptedXml object.
        EncryptedXml exml = new EncryptedXml(Doc);

        // Decrypt the XML document.
        exml.DecryptDocument();

    }
</code></pre>

<p>It worked like a charm until recently that some of our clients started to upgrade their framework to 4.6.2, so the method DecryptDocument() stopped working. Now it throws an exception ""The algorithm group '' is invalid"". If I remove .net framework 4.6.2 it works again.</p>

<p>The sample code in this <a href=""https://msdn.microsoft.com/en-us/library/ms148633(v=vs.110).aspx"" rel=""noreferrer"">link</a> will reproduce the error, it will encrypt successfully then fail to decrypt.</p>

<p>I'm using A3 certificates, pendrive token. Anyone have faced this problem? there is any work around in .net 4.6.2?</p>

<p><strong>Edit 1:</strong></p>

<p>Stacktrace:</p>

<p><code>at System.Security.Cryptography.CngAlgorithmGroup..ctor(String algorithmGroup)
 at System.Security.Cryptography.CngKey.get_AlgorithmGroup()
 at System.Security.Cryptography.RSACng..ctor(CngKey key)
 at System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(X509Certificate2 certificate)
 at System.Security.Cryptography.CngLightup.GetRSAPrivateKey(X509Certificate2 cert)
 at System.Security.Cryptography.Xml.EncryptedXml.DecryptEncryptedKey(EncryptedKey encryptedKey)
 at System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionKey(EncryptedData encryptedData, String symmetricAlgorithmUri)
 at System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument()
 at Criptografar.Program.Decrypt(XmlDocument Doc) in C:\Users\leoka\Documents\Visual Studio 2017\Projects\ConsoleApp4\Criptografar\Program.cs:line 152
 at Criptografar.Program.Main(String[] args) in C:\Users\leoka\Documents\Visual Studio 2017\Projects\ConsoleApp4\Criptografar\Program.cs:line 83</code></p>
","<p>There are some runtime changes in .Net 4.6.2 that affect <code>EncrtyptedXml</code> - see <a href=""https://msdn.microsoft.com/en-us/library/mt670901(v=vs.110).aspx#Anchor_5"" rel=""nofollow noreferrer"">https://msdn.microsoft.com/en-us/library/mt670901(v=vs.110).aspx#Anchor_5</a></p>
","601","<c#><xml><encryption><x509certificate2><encryption-asymmetric>","11","2","3","2017-06-08 11:10:27","44434088","10","1","2595594","","2017-05-30 12:21:44","2017-05-29 21:18:04",""
"44250404","EncryptedXml DecryptDocument method error after .Net framework update","<p>I have an old function written in 2013 that decrypt xml that was encrypted by another program.</p>

<p>The code is realy simple</p>

<pre><code>        public static void Decrypt(XmlDocument Doc)
    {
        // Check the arguments.  
        if (Doc == null)
            throw new ArgumentNullException(""Doc"");

        // Create a new EncryptedXml object.
        EncryptedXml exml = new EncryptedXml(Doc);

        // Decrypt the XML document.
        exml.DecryptDocument();

    }
</code></pre>

<p>It worked like a charm until recently that some of our clients started to upgrade their framework to 4.6.2, so the method DecryptDocument() stopped working. Now it throws an exception ""The algorithm group '' is invalid"". If I remove .net framework 4.6.2 it works again.</p>

<p>The sample code in this <a href=""https://msdn.microsoft.com/en-us/library/ms148633(v=vs.110).aspx"" rel=""noreferrer"">link</a> will reproduce the error, it will encrypt successfully then fail to decrypt.</p>

<p>I'm using A3 certificates, pendrive token. Anyone have faced this problem? there is any work around in .net 4.6.2?</p>

<p><strong>Edit 1:</strong></p>

<p>Stacktrace:</p>

<p><code>at System.Security.Cryptography.CngAlgorithmGroup..ctor(String algorithmGroup)
 at System.Security.Cryptography.CngKey.get_AlgorithmGroup()
 at System.Security.Cryptography.RSACng..ctor(CngKey key)
 at System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(X509Certificate2 certificate)
 at System.Security.Cryptography.CngLightup.GetRSAPrivateKey(X509Certificate2 cert)
 at System.Security.Cryptography.Xml.EncryptedXml.DecryptEncryptedKey(EncryptedKey encryptedKey)
 at System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionKey(EncryptedData encryptedData, String symmetricAlgorithmUri)
 at System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument()
 at Criptografar.Program.Decrypt(XmlDocument Doc) in C:\Users\leoka\Documents\Visual Studio 2017\Projects\ConsoleApp4\Criptografar\Program.cs:line 152
 at Criptografar.Program.Main(String[] args) in C:\Users\leoka\Documents\Visual Studio 2017\Projects\ConsoleApp4\Criptografar\Program.cs:line 83</code></p>
","<p>I ran into something very similar today that turned out to be a bug in .NET 4.6.2:
<a href=""https://github.com/Microsoft/dotnet/issues/341"" rel=""nofollow noreferrer"">https://github.com/Microsoft/dotnet/issues/341</a></p>

<p>According to this issue, there are two workarounds:</p>

<blockquote>
  <p>1) Upgrading the OS to Windows Server 2012R2 or newer, 2) loading the
  user profile.</p>
</blockquote>
","601","<c#><xml><encryption><x509certificate2><encryption-asymmetric>","11","0","3","2017-06-08 11:10:27","44434088","10","1","2595594","","2017-05-30 12:21:44","2017-05-29 21:18:04",""
"44250404","EncryptedXml DecryptDocument method error after .Net framework update","<p>I have an old function written in 2013 that decrypt xml that was encrypted by another program.</p>

<p>The code is realy simple</p>

<pre><code>        public static void Decrypt(XmlDocument Doc)
    {
        // Check the arguments.  
        if (Doc == null)
            throw new ArgumentNullException(""Doc"");

        // Create a new EncryptedXml object.
        EncryptedXml exml = new EncryptedXml(Doc);

        // Decrypt the XML document.
        exml.DecryptDocument();

    }
</code></pre>

<p>It worked like a charm until recently that some of our clients started to upgrade their framework to 4.6.2, so the method DecryptDocument() stopped working. Now it throws an exception ""The algorithm group '' is invalid"". If I remove .net framework 4.6.2 it works again.</p>

<p>The sample code in this <a href=""https://msdn.microsoft.com/en-us/library/ms148633(v=vs.110).aspx"" rel=""noreferrer"">link</a> will reproduce the error, it will encrypt successfully then fail to decrypt.</p>

<p>I'm using A3 certificates, pendrive token. Anyone have faced this problem? there is any work around in .net 4.6.2?</p>

<p><strong>Edit 1:</strong></p>

<p>Stacktrace:</p>

<p><code>at System.Security.Cryptography.CngAlgorithmGroup..ctor(String algorithmGroup)
 at System.Security.Cryptography.CngKey.get_AlgorithmGroup()
 at System.Security.Cryptography.RSACng..ctor(CngKey key)
 at System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(X509Certificate2 certificate)
 at System.Security.Cryptography.CngLightup.GetRSAPrivateKey(X509Certificate2 cert)
 at System.Security.Cryptography.Xml.EncryptedXml.DecryptEncryptedKey(EncryptedKey encryptedKey)
 at System.Security.Cryptography.Xml.EncryptedXml.GetDecryptionKey(EncryptedData encryptedData, String symmetricAlgorithmUri)
 at System.Security.Cryptography.Xml.EncryptedXml.DecryptDocument()
 at Criptografar.Program.Decrypt(XmlDocument Doc) in C:\Users\leoka\Documents\Visual Studio 2017\Projects\ConsoleApp4\Criptografar\Program.cs:line 152
 at Criptografar.Program.Main(String[] args) in C:\Users\leoka\Documents\Visual Studio 2017\Projects\ConsoleApp4\Criptografar\Program.cs:line 83</code></p>
","<p>I cannot reproduce the problem myself - I don't have the ""pendrive token"" which I suspect is the problem - so this is guesswork.
There are two generations of cryptographic APIs in Windows - <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa380255(v=vs.85).aspx"" rel=""nofollow noreferrer"">the ""old"" one</a> and the <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa376210(v=vs.85).aspx"" rel=""nofollow noreferrer"">""new generation"" one, known as CNG</a>.
Now, if you look at the <a href=""https://gist.github.com/januszn/e42f91e23db3b977e9e41786aa9413d4"" rel=""nofollow noreferrer"">source code for the <code>CngLightup</code> type</a> that appears midway through your stack trace, specifically the <code>DetectRsaCngSupport</code> method, you'll see that .NET framework tries to use the new generation API if possible. My guess is that the ""pendrive token"" device does not support the new API. You can verify this by forcing the use of the old API. Unfortunately, there does not seem to be a public configuration flag that controls this, so you must resort to reflection-based hacks. For example, you can put something like this at the beginning of your program, so that it runs once, before you try the decrypting operation:</p>

<pre><code>    var cngLightupType = typeof(EncryptedXml).Assembly.GetType(""System.Security.Cryptography.CngLightup"");
    var preferRsaCngField = cngLightupType.GetField(""s_preferRsaCng"", BindingFlags.Static | BindingFlags.NonPublic);
    var getRsaPublicKeyField = cngLightupType.GetField(""s_getRsaPublicKey"", BindingFlags.Static | BindingFlags.NonPublic);
    var getRsaPrivateKeyField = cngLightupType.GetField(""s_getRsaPrivateKey"", BindingFlags.Static | BindingFlags.NonPublic);
    preferRsaCngField.SetValue(null, new Lazy&lt;bool&gt;(() =&gt; false));
    getRsaPublicKeyField.SetValue(null, null);
    getRsaPrivateKeyField.SetValue(null, null);
</code></pre>

<p>Do note that it is extremely hacky, not thread-safe, error handling is omitted etc. If you verify that the CNG usage is the problem, you can then ask the ""pendrive token"" supplier to provide drivers that work with CNG. Or you can live with the hack above, rewritten for more safety.</p>
","601","<c#><xml><encryption><x509certificate2><encryption-asymmetric>","11","2","3","2017-06-08 11:10:27","44434088","10","1","2595594","","2017-05-30 12:21:44","2017-05-29 21:18:04",""
"1462043","PGP - GnuPG - A few questions","<p>I want to use GnuPG (<a href=""http://www.gnupg.org/"" rel=""nofollow noreferrer"">http://www.gnupg.org/</a>), the open source software that is a full replacement for PGP.</p>

<p>The software looks great though I have never used it before. </p>

<p>I will be using the software to encrypt files to transfer via the web, I am not using the software for emails.</p>

<p>I have a few questions:</p>

<ol>
<li><p>What are recommended GUI's available for windows and Ubuntu?</p></li>
<li><p>I want to generate a generate a key pair that is Diffee Hellman (DH/DSS) not RSA. What is the line command to do this? As well using the key length of 2048.</p></li>
<li><p>Once I generate my public-private key pair, how do I sign someone elses public key that I have through command line?</p></li>
</ol>
","<p>All of these are found in the manual.</p>

<ol>
<li><a href=""http://www.gnupg.org/related_software/frontends.html"" rel=""nofollow noreferrer"">http://www.gnupg.org/related_software/frontends.html</a></li>
<li><a href=""http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html"" rel=""nofollow noreferrer"">http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html</a></li>
<li><a href=""http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html#ss3.6"" rel=""nofollow noreferrer"">http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html#ss3.6</a> </li>
</ol>
","599","<pgp><encryption-asymmetric><gnupg><openpgp>","0","1","1","2013-11-12 20:19:56","1462091","0","1","1622894","","2013-05-21 08:56:53","2009-09-22 19:14:57",""
"11411815","IPhone Decryption with private key -Data Encrypted in Java","<p>Can anyone help with the code how to decrypt with private key ,As in server side they are using OAEP encryption method .I tried decrypting using private key but the decrypted text is Null,I am getting the Error code as -9809 as decryption code result</p>
","<p>When you say ""with a private key"" I assume you mean you're using <code>SecKeyDecrypt()</code> for asymmetric encryption rather than CommonCryptor for symmetric encryption.</p>

<p><code>SecKeyDecrypt()</code> does not support OAEP. It only supports PKCS1 v1.5 padding (<code>kSecPaddingPKCS1</code>). It can also technically handle ASN.1 padding + PKCS1 padding, but this isn't usually relevant to decryption. You should have noticed this when you passed the SecPadding parameter. What did you pass?</p>

<p>That error number is <code>errSSLCrypto</code> which is a generic ""something went wrong in crypto"" message.</p>
","597","<iphone><rsa><private-key><encryption-asymmetric>","0","1","1","2012-07-10 15:01:13","11416208","0","","1425885","","2012-07-10 11:43:55","2012-07-10 10:56:29",""
"38205272","PDF encryption/decryption not working","<p>when i try to encrypt/decrypt a pdf file using bouncycastle this give me an empty pdf (with 184Ko size).
the code works perfectly with text file. But no way with PDF file.
any one have an idea how to encrypt/decrypt PDF file in Java ?</p>

<p>bellow the code that i use for encryption,
i get an exception when i encrypt a PDF file (java.lang.ArrayIndexOutOfBoundsException: too much data for RSA block) in this line   cipherText = cipher.doFinal(input)  :</p>

<pre><code>     Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

    byte[] input = acVote;
    byte[] cipherText = null;

    Cipher cipher = null;

    try {
    cipher = Cipher.getInstance(""RSA/ECB/OAEPPadding"", ""BC"");

    SecureRandom random = new SecureRandom();

    //do encryption

    cipher.init(Cipher.ENCRYPT_MODE, pubKey, random);

    cipherText = cipher.doFinal(input);
    } catch (Exception ex) {
        log.error(""Exeption Message : "" + ex);
    }
</code></pre>

<p>When i encrypt a .txt file, it works ...</p>
","<p>I can just tell you the theory and here it is:</p>

<p>I have encrypted a picture some time ago and I did it by reading the picture into a 2048 huge byt array. After that I split it every 2048 bytes into a single byte file (it was a small picture) and after that I had like 20 files with different names and that was pretty simple but also a good encryption</p>

<p>2nd Method is by using the Caesar Encryption (something like that) which mean that you move every byte 2 places up or down (or more than 2)</p>

<p>Those are my pretty easy but sometimes usefull encryptions
:DDDDDDDDDDDDDDD</p>
","591","<java><security><pdf><bouncycastle><encryption-asymmetric>","0","0","2","2016-07-15 15:33:58","","3","4","3518875","","2016-07-15 15:33:58","2016-07-05 13:52:19",""
"38205272","PDF encryption/decryption not working","<p>when i try to encrypt/decrypt a pdf file using bouncycastle this give me an empty pdf (with 184Ko size).
the code works perfectly with text file. But no way with PDF file.
any one have an idea how to encrypt/decrypt PDF file in Java ?</p>

<p>bellow the code that i use for encryption,
i get an exception when i encrypt a PDF file (java.lang.ArrayIndexOutOfBoundsException: too much data for RSA block) in this line   cipherText = cipher.doFinal(input)  :</p>

<pre><code>     Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());

    byte[] input = acVote;
    byte[] cipherText = null;

    Cipher cipher = null;

    try {
    cipher = Cipher.getInstance(""RSA/ECB/OAEPPadding"", ""BC"");

    SecureRandom random = new SecureRandom();

    //do encryption

    cipher.init(Cipher.ENCRYPT_MODE, pubKey, random);

    cipherText = cipher.doFinal(input);
    } catch (Exception ex) {
        log.error(""Exeption Message : "" + ex);
    }
</code></pre>

<p>When i encrypt a .txt file, it works ...</p>
","<p>Here's what you need to decide: do I want an encrypted file or do I want an encrypted PDF? The distinction is important. If you want an encrypted file, that's on you. Possible reasons why you're having problems might include that PDF is frequently part binary, and although that shouldn't make a difference to bouncy castle, it may inform the type of reader you're using for data, for example.</p>

<p>If you're trying to get an encrypted PDF (and I suspect this is what you really want) bouncy castle won't (directly) do that for you. </p>

<p>Instead you need to use iText, a tool based on iText, or another similar library (JoltPdf, for example) which can consume PDF and correctly write encrypted PDF out. Encrypted PDF is a PDF file that is only partially encrypted. The PDF elements of type string and stream will be encrypted using a supplied password, a specified encryption algorithm, and some salt. In addition, depending on the encryption algorithm, the document may get signed, which is its own thing that doesn't follow most typical signing processes.</p>

<p>Under the hood, iText and JoltPdf use bouncy castle to do the hashing, encryption, and signing.</p>
","591","<java><security><pdf><bouncycastle><encryption-asymmetric>","0","1","2","2016-07-15 15:33:58","","3","4","3518875","","2016-07-15 15:33:58","2016-07-05 13:52:19",""
"52505432","Diffie-Hellman encryption scheme in python","<p>I have generated master pub/priv key pairs from 24 word mnemonics for Alice. </p>

<pre><code>master_private_key='9f74f4534cbdf01a1f925e20108d86045bd96849af9c94534a10ef2a26ff133b',
master_public_key=""0308de0952b00ebc83a41830794534ae912b86d3718832a36ce98c256ab5bfdc4e""

mnemonic='flash city relief spirit federal own metal history great hello toy volcano same subway loan bleak rapid swamp pigeon secret pyramid spoon famous blouse',
</code></pre>

<p>Similarly I have repeated the same process to generate keys for Bob. Now I  want to generate Diffie-Hellman keys from Alice's private key and Bob's public key. All the implementations of Diffie-Hellman in python generates their own public/private key pair. </p>

<p>From <a href=""https://github.com/ludbb/secp256k1-py"" rel=""nofollow noreferrer"">secp256k1 python documentation</a>:</p>

<pre><code>ecdh(scalar) -&gt; bytes
compute an EC Diffie-Hellman secret in constant time. The instance
public_key is used as the public point, and the scalar specified must be
composed of 32 bytes. It outputs 32 bytes representing the ECDH secret
computed. If the scalar is invalid, an Exception is raised.
</code></pre>

<p>NOTE: ecdh can only be used if the secp256k1 C library is compiled with support for it. If there is no support, an Exception will be raised when calling it.</p>

<p>I just don't know how to compile this library with libsecp256k1. I think Diffie-Hellman ECC version is more suitable here.</p>

<p>This is the error I am getting:</p>

<pre><code>from sawtooth_signing.secp256k1 import Secp256k1PublicKey
bob_pub='033036dd96b7bef82556fe09eef42bef5e66545317c92a5deca99275f616729fef'
 public_key = Secp256k1PublicKey.from_hex(bob_pub)

 public_key.secp256k1_public_key.ecdh(alice_private_key)
 ----------------------
  Exception                                 Traceback (most recent call last)
 &lt;ipython-input-4-5175cf593934&gt; in &lt;module&gt;()
----&gt; 1 public_key.secp256k1_public_key.ecdh(""dsds"")

~/SawtoothClient/SawtoothClient/lib/python3.6/site-packages/secp256k1-0.13.2-py3.6-linux-x86_64.egg/secp256k1/__init__.py in ecdh(self, scalar)
 305         assert self.public_key, ""No public key defined""
306         if not HAS_ECDH:
--&gt; 307             raise Exception(""secp256k1_ecdh not enabled"")
308         if not isinstance(scalar, bytes) or len(scalar) != 32:
309             raise TypeError('scalar must be composed of 32 bytes')
</code></pre>

<p>Exception: secp256k1_ecdh not enabled</p>

<p>I have tried to install <a href=""https://github.com/bitcoin-core/secp256k1"" rel=""nofollow noreferrer"">https://github.com/bitcoin-core/secp256k1</a>, followed the instructions and it got installed with output: </p>

<pre><code>Libraries have been installed in:
/usr/local/lib
</code></pre>

<p>Now when I tried installing secp256k1 with python 3.6 again, as mentioned on their git page:</p>

<pre><code>INCLUDE_DIR=include/ LIB_DIR=/usr/local/lib pip install --no-binary secp256k1,
</code></pre>

<p>I get this error:</p>

<pre><code>ERROR: You must give at least one requirement to install (see ""pip help install"")
</code></pre>
","<p>I did it using another library coincurve.</p>

<pre><code>import coincurve   
alice_priv = ""29307c4354b7d9d311d2cec4878c0de56c93a921d300273c19577e9004de3c9f""

alice_pub = ""02f3c25355c29f64ea8e9b4e11b583ac0a7d0d8235f156cffec2b73e5756aab206""

bob_pub = ""03a1db8e8b047e1350958a55e0a853151d0e1f685fa5cf3772e01bccc5aa5cb2eb""

bob_priv = ""4138d1b6dde34f81c38cef2630429e85847dd5b70508e37f53c844f66f19f983""

alice_coin_priv =  coincurve.PrivateKey.from_hex(alice_priv)

bob_coin_priv = coincurve.PrivateKey.from_hex(bob_priv)

binascii.hexlify(alice_coin_priv.ecdh(bob_coin_priv.public_key.public_key))
</code></pre>

<p>hex encoded shared secret is</p>

<pre><code>b'92959cb394b71a05d440e0e2973bc9d0e7182eb86bb94d3a260ce8353c7a0317'
</code></pre>

<p>Verification works </p>

<pre><code>bob_coin_priv.ecdh(alice_coin_priv.public_key.public_key)==  alice_coin_priv.ecdh(bob_coin_priv.public_key.public_key)
</code></pre>
","584","<python><encryption-asymmetric>","0","1","1","2018-09-25 22:16:05","52506717","5","","2648551","","2018-09-25 22:16:05","2018-09-25 19:26:13",""
"24115945","SSL use symmetric or asymmetric?","<p>So far what I understand:</p>

<ol>
<li>Sender starts the handshake with server.</li>
<li>Server generates a pair of Public and Private key using asymmetric encryption and re-encrypt the Public key alone using symmetric encryption. And passes the Public key to the sender.</li>
<li>Sender encrypt the message using the Public key and sends the encrypted message to server.</li>
<li>Server decrypt the message using symmetric encryption and then decrypt the message again using the Private key.</li>
</ol>

<p>Is this the right way how a SSL encryption works?? Please correct me.</p>
","<blockquote>
  <p>Sender starts the handshake with server.</p>
</blockquote>

<p><em>Client</em> starts handshake with server.</p>

<blockquote>
  <p>Server generates a pair of Public and Private key using asymmetric encryption and re-encrypt the Public key alone using symmetric encryption.</p>
</blockquote>

<p>No.</p>

<blockquote>
  <p>And passes the Public key to the sender.</p>
</blockquote>

<p>No. It sends its <em>certificate</em> to the client and they then start a secret-key negotiation.</p>

<blockquote>
  <p>Sender encrypt the message using the Public key</p>
</blockquote>

<p>No. It uses a symmetric session key negotiated during the handshake.</p>

<blockquote>
  <p>and sends the encrypted message to server.</p>
</blockquote>

<p>Yes.</p>

<blockquote>
  <p>Server decrypt the message using symmetric encryption</p>
</blockquote>

<p>Yes.</p>

<blockquote>
  <p>and then decrypt the message again using the Private key.</p>
</blockquote>

<p>No.</p>

<blockquote>
  <p>Is this the right way how SSL encryption works?</p>
</blockquote>

<p>No.</p>
","582","<java><ssl><encryption><private-key><encryption-asymmetric>","-5","2","1","2014-06-09 18:44:23","24126791","4","","","","","2014-06-09 07:53:27",""
"28795706","ed25519 ECDH encryption possible and safe?","<p>As far as I can see everybody use curve25519 for public/private encryption (ECDH) and ed25519 for signing (ECDSA). This creates double size of keys or some special conversion tricks that may not be safe: </p>

<p><a href=""https://github.com/dchest/ed2curve-js"" rel=""nofollow"">https://github.com/dchest/ed2curve-js</a></p>

<p>Is it not possible to use curve ed25519 for both ECDH and ECDSA and have half the key size?</p>

<p>Is it not possible to use curve ed25519 for only ECDH?</p>

<p>I admit that I have a very limited understanding of ECC so the reason above may be because of security considerations but it is not easy to find any hint about this on the web!</p>

<p>NB: I understand that curve25519 can not be used for signing!</p>

<p>Benny</p>
","<p>I don't think you'll find anything better than the paper linked at <a href=""https://crypto.stackexchange.com/questions/3260/using-same-keypair-for-diffie-hellman-and-signing"">Using same keypair for Diffie-Hellman and signing</a>.</p>

<p>I suspect that this key reuse is fine as long as you're comfortable with assumption that SHA-512 (used in Ed25519 signing) and HSalsa (used as KDF with NaCl's Curve25519 based boxes) are independent hash functions (I do). But it'd be probably cleaner to use the same hash function with different prefixes.</p>

<p>I heard that Bernstein, Lange and Schwabe (authors of NaCl) are working on a paper about these issues, but who knows when it'll be published.</p>
","574","<javascript><encryption><public-key-encryption><encryption-asymmetric><elliptic-curve>","0","-1","1","2015-03-01 16:37:15","","1","","","","","2015-03-01 16:05:26",""
"2460941","Encrypt Data using Public Key","<pre><code>$key = file_get_contents('http://keyserver.pramberger.at/pks/lookup?op=get&amp;search=uid');
</code></pre>

<p>after getting public key in <code>'$key'</code> variable i need to encrypt the data using this public key.
the key must be start with ----Begin pgp block ---to end pgp block----.
How this can be done in php?</p>
","<p>Maybe this article about <a href=""http://devzone.zend.com/article/1265"" rel=""nofollow noreferrer"">Encryption and Decryption using PHP and GnuPG</a> (found via Google) helps you.</p>

<p>And there is also a <a href=""http://php.net/manual/en/book.gnupg.php"" rel=""nofollow noreferrer"">PHP module</a> to interact with GnuPG.</p>

<p>Afaik, GPG is compatible with PGP.</p>
","569","<php><encryption-asymmetric>","0","1","1","2010-03-17 09:16:36","","0","","227665","","2010-03-17 09:16:25","2010-03-17 09:13:48",""
"15193064","Storing sensitive data in mySql","<p>I am lookin to harden security on one of my client sites. There is no payment provider set up so sensitive Direct Debit information needs to be on a mySql server. This Direct Debit information needs to be human readable by users from accounting department.</p>

<p>Testing server is set up as follows:</p>

<ol>
<li>At present, main site is sitting on a wordpress blog.</li>
<li>Customer completes HTTPS encrypted form with an EV SSL certificate.</li>
<li>Data is stored in a separate database to the wordpress database.</li>
<li>Direct debit details are currently stored as plain text</li>
</ol>

<p>Now part 4 is what bothers me... but it's ok at the moment, because only on the testing server!</p>
","<p>This is really difficult to answer, as it depends on how far you need to protect this data.</p>

<p>First step is obviously encrypting all details stored in mysql, incase someone gets a dump of your database.</p>

<p>This solution is good, but it introduces the vulnerability as if someone gets the decryption keys from your application server, they would be able to decrypt the dump of the database anyway.</p>

<p>There are many solutions to consider from here, i'm sure with some research you should be able to find some decent ones, but one way that comes to mind is:</p>

<p>You could encrypt the data on the application servers with a public/private key encryption algorithm. Public key can only be used to encrypt the information for storage, which lives on your application server. If that gets hacked, the only thing that they will be able to do is to add more data to your database =/. The private key in this case will be a password that would need to be entered every time a human needs to see this information.</p>

<p>This has the obvious disadvantage that you can't do any machine processing on your data, as its traveling completely encrypted all the way until its displayed.</p>

<p>(And you still have vulnerabilities of someone gaining access to your application server and simply dumping the session files/memcache where the key would have to be stored temporarily)</p>

<p>To be honest, first thing i'd do is encrypt the entire database one way or another. That alone adds a decent layer of protection. Dumping the database is easier than getting access to the file system of a server in most cases.</p>
","558","<https><security><public-key-encryption><encryption-asymmetric>","0","1","2","2013-03-04 13:40:25","","0","","","","","2013-03-04 01:16:50",""
"15193064","Storing sensitive data in mySql","<p>I am lookin to harden security on one of my client sites. There is no payment provider set up so sensitive Direct Debit information needs to be on a mySql server. This Direct Debit information needs to be human readable by users from accounting department.</p>

<p>Testing server is set up as follows:</p>

<ol>
<li>At present, main site is sitting on a wordpress blog.</li>
<li>Customer completes HTTPS encrypted form with an EV SSL certificate.</li>
<li>Data is stored in a separate database to the wordpress database.</li>
<li>Direct debit details are currently stored as plain text</li>
</ol>

<p>Now part 4 is what bothers me... but it's ok at the moment, because only on the testing server!</p>
","<p>Are you talking about bank account details / credit card details or both?</p>

<p>Be aware storing credit card details brings attached fulfilling PCI requirements.</p>

<p>Also, if you are planning to store confidential details, NEVER store them unencrypted.</p>

<p>Any questions, just let me know.</p>

<p>Fabio
@fcerullo</p>
","558","<https><security><public-key-encryption><encryption-asymmetric>","0","0","2","2013-03-04 13:40:25","","0","","","","","2013-03-04 01:16:50",""
"11365647","Decrypting an XML file with asymmetric keys","<p>I have a program that exports a set of database rows. Within the rows is data that needs to be encrypted. I am able to encrypt the data but I cannot seem to decrypt it. I followed the coding shown in <a href=""https://stackoverflow.com/questions/11260031/decrypt-xml-file-with-asymetric-key-windows-forms-and-windows-service"">Decrypt Xml file with asymetric key windows forms and windows service</a> and I'm still receiving the message ""Unable to retrieve the decryption key""</p>

<p>Currently this is being done in the same machine under the same user, but that will not always be the case. The exported file will be moved to another machine and imported under a different user.</p>

<p>Here is my Encryption routine...</p>

<pre><code>        XmlElement elementToEncrypt;

        var security = new CryptoKeySecurity();
        // Give the creating user full access 
        security.AddAccessRule(new CryptoKeyAccessRule(new NTAccount(Environment.UserDomainName, Environment.UserName), 
            CryptoKeyRights.FullControl, AccessControlType.Allow));

        // Specify that the key is to be stored in the machine key-store, and apply the security settings created above 
        var cspParams = new CspParameters
        {
            KeyContainerName = ""XML_ENC_RSA_KEY"",
            Flags = CspProviderFlags.UseMachineKeyStore,
            CryptoKeySecurity = security
        };
        var rsaKey = new RSACryptoServiceProvider(cspParams);

        elementToEncrypt = xmlDocument.GetElementsByTagName(elementName)[0] as XmlElement;

        var sessionKey = new RijndaelManaged() { KeySize = 256 };

        EncryptedXml eXml = new EncryptedXml();
        byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, sessionKey, false);

        var edElement = new EncryptedData()
        {
            Type = EncryptedXml.XmlEncElementUrl,
            Id = elementName,
            EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncAES256Url)
        };

        var ek = new EncryptedKey();
        var encryptedKey = EncryptedXml.EncryptKey(sessionKey.Key, rsaKey, false);

        ek.CipherData = new CipherData(encryptedKey);
        ek.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncRSA15Url);
        edElement.KeyInfo.AddClause(new KeyInfoEncryptedKey(ek));

        // Create a new KeyInfoName element. 
        var kin = new KeyInfoName() { Value = elementName };

        // Add the KeyInfoName element to the encryptedKey object. 
        ek.KeyInfo.AddClause(kin);
        edElement.CipherData.CipherValue = encryptedElement;
        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false); 
</code></pre>

<p>Here is my Decryption routine....</p>

<pre><code>         var cspParams = new CspParameters
        {
            KeyContainerName = ""XML_ENC_RSA_KEY"",
            Flags = CspProviderFlags.UseMachineKeyStore | CspProviderFlags.UseExistingKey
        };
        var rsaKey = new RSACryptoServiceProvider(cspParams);

        var exml = new EncryptedXml(xmlDocument);
        exml.AddKeyNameMapping(elementName, rsaKey);
        exml.DecryptDocument(); 
</code></pre>

<p>Thank you in advance for any help!!!</p>

<p>Gary</p>
","","556","<c#><encryption><encryption-asymmetric>","1","","0","2012-07-06 22:29:34","","0","","-1","","2017-05-23 11:48:12","2012-07-06 15:53:56",""
"16945921","Cross Platform Asymmetric Encryption and Decryption","<p>I have created a self-signed certificate in c#, with a private key created with a <code>RSACryptoServiceProvider</code>, 1024 bytes.</p>

<p>I have encrypted a byte array with the public key.</p>

<p>I have then imported the certificate in an Android device.</p>

<p>I try to decrypt my byte array in Android using my certificate private key. My code in Android:</p>

<pre><code>{
    Cipher cipher = Cipher.getInstance(""RSA"");
    cipher.init(Cipher.DECRYPT_MODE, privateKey);
    byte[] decryptedBytes = cipher.doFinal(encryptedByte);
}
</code></pre>

<p>On the last line I get this error: <code>""java.lang.IllegalStateException""</code>.</p>

<p>Here are the exception details:</p>

<pre><code>Java.lang.NullPointerException java.math.BigInteger.remainder(BigInteger.java:919) com.android.org.bouncycastle.crypto.engines.RSACoreEngine.processBlock(RSACoreEn‌​gine.java:181)
com.android.org.bouncycastle.crypto.engines.RSABlindedEngine.processBlock(RSABli‌​ndedEngine.java:109)
com.android.org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi.engineDoFi‌​nal(CipherSpi.java:472)
javax.crypto.Cipher.doFinal(Cipher.java:1111)
all4r.and.dc.Document.decrypt(Document.java:65)
all4r.and.dc.Decrypt$3$1.onSelection(Decrypt.java:101)
all4r.and.utils.Certificate$1.alias(Certificate.java:42)
android.security.KeyChain$AliasResponse.alias(KeyChain.java:284)
android.security.IKeyChainAliasCallback$Stub.onTransact(IKeyChainAliasCallback.j‌​ava:55)
android.os.Binder.execTransact(Binder.java:351)
dalvik.system.NativeStart.run(Native Method)
</code></pre>

<p>Any idea on what the cause of the error is? I've been searching for hours, but haven't found the problem yet.</p>
","","549","<c#><android><private-key><encryption-asymmetric>","1","","0","2013-06-06 11:40:02","","5","6","2263584","","2013-06-06 11:40:02","2013-06-05 17:10:01",""
"22840644","How to read RSA private key from file using a GPLv2 compatible library?","<p>I need to do some RSA decryption and my private key is stored in a file. 
I am using C++.
At first I used OpenSSL, and it worked smoothly, but then the licensing problem appeared, as I want my code to be GPLv2 compatible. Now I am trying to use libgcrypt, but I am having problems using the S-expressions. This is my code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdint.h&gt;
#include &lt;iostream&gt;

#include &lt;gcrypt.h&gt;

using namespace std;

int main()
{
    int cipher_len, key_len;
    FILE *t = NULL, *k = NULL;
    gcry_mpi_t text_mpi = NULL;
    gcry_sexp_t text_s_exp = NULL;
    gcry_mpi_t key_mpi = NULL;
    gcry_sexp_t key_s_exp = NULL;
    gcry_sexp_t decrypted_s_exp = NULL;
    gcry_error_t err;

    /* read encrypted text file */
    if( ! ( t = fopen( ""outrsa"", ""rb"" ) ) )
    {
        cout &lt;&lt; ""could not open encrypted text file"" &lt;&lt; endl;
        goto error;
    }
    fseek( t, 0, SEEK_END );
    cipher_len = ftell( t );
    rewind( t );

    uint8_t text[cipher_len];
    memset( text, '\0', cipher_len );

    fread( text, 1, cipher_len, t );
    if( ferror( t ) )
    {
        cout &lt;&lt; ""error while reading encrypted text file"" &lt;&lt; endl;
        goto error;
    }

    /* create S-expression for encrypted text */
    if( gcry_mpi_scan( &amp;text_mpi, GCRYMPI_FMT_USG, text, cipher_len, NULL ) )
    {
        cout &lt;&lt; ""error when scanning mpi from encrypted file text"" &lt;&lt; endl;
        goto error;
    }
    if( gcry_sexp_build( &amp;text_s_exp, NULL, ""(enc-val(flags oaep)(rsa(a %m)))"", text_mpi ) )
    {
        cout &lt;&lt; ""error while creating S-expr from mpi for encrypted text"" &lt;&lt; endl;
        goto error;
    }

    /* read private key file */
    if( ! ( k = fopen( ""priv.key"", ""rb"" ) ) )
    {
        cout &lt;&lt; ""could not open key file"" &lt;&lt; endl;
        goto error;
    }
    fseek( k, 0, SEEK_END );
    key_len = ftell( k );
    rewind( k );

    uint8_t key[key_len];
    memset( key, '\0', key_len );

    key_len = fread( key, 1, key_len, k );
    if( ferror( k ) )
    {
        cout &lt;&lt; ""error while reading key file"" &lt;&lt; endl;
        goto error;
    }

    /* create S-expression for private key */
    if( gcry_mpi_scan( &amp;key_mpi, GCRYMPI_FMT_USG, key, key_len, NULL ) )
    {
        cout &lt;&lt; ""error when scanning mpi from key file"" &lt;&lt; endl;
        goto error;
    }
    if( gcry_sexp_build( &amp;key_s_exp, NULL, ""(data(flags raw)(value %m))"", key_mpi ) )
    {
        cout &lt;&lt; ""error while creating S-expr from mpi for key"" &lt;&lt; endl;
        goto error;
    }

    /* decrypt */
    if( ( err = gcry_pk_decrypt( &amp;decrypted_s_exp, text_s_exp, key_s_exp ) ) )
    {
        cout &lt;&lt; ""error on decryption, source: "" &lt;&lt; gcry_strsource( err ) &lt;&lt; "", error: "" &lt;&lt; gcry_strerror( err ) &lt;&lt; endl;
        goto error;
    }

    /* extract decrypted text from S-expr */
    unsigned char decrypted[ cipher_len + 1 ];
    memset( decrypted, '\0', cipher_len + 1 );
    if( gcry_sexp_sprint( decrypted_s_exp, GCRYSEXP_FMT_DEFAULT, decrypted, cipher_len ) )
    {
        cout &lt;&lt; ""error while extracting decrypted text from S-expr"" &lt;&lt; endl;
        goto error;
    }

    cout &lt;&lt; ""decrypted text:"" &lt;&lt; endl &lt;&lt; decrypted &lt;&lt; endl;

    return 0;

error:
    if( text_mpi )
        gcry_mpi_release( text_mpi );
    if( key_mpi )
        gcry_mpi_release( key_mpi );
    if( text_s_exp )
        gcry_sexp_release( text_s_exp );
    if( key_s_exp )
        gcry_sexp_release( key_s_exp );
    if( decrypted_s_exp )
        gcry_sexp_release( decrypted_s_exp );
    if( k )
        fclose( k );
    if( t )
        fclose( t );
    return 1;
}
</code></pre>

<p>Now, I know this is definetely not the correct way of using libgcrypt (as I am reading the entire key text as an MPI, and the decryption fails), but with the manual in front, I cannot find a way of reading the key... 
Should I do the parsing of the key manually?</p>

<p>Thanks!</p>
","","535","<c++><rsa><public-key><encryption-asymmetric><libgcrypt>","0","","0","2014-04-08 10:27:22","","2","","2299238","","2014-04-08 10:00:49","2014-04-03 14:23:11",""
"42501609","How can be improved preformance of encryption / decryption for large files","<p>I'm encrypting and decrypting files in my App, but if the file is too large it takes minutes, is it possible to improve speed? this is encryption/decryption code</p>

<pre><code>    private static void startCrypting(int cipherMode, String key, File inputFile,
                             File outputFile) throws MediaCodec.CryptoException {
    try {
        Key secretKey = new SecretKeySpec(key.getBytes(), ""AES"");
        Cipher cipher = Cipher.getInstance(""AES"");
        cipher.init(cipherMode, secretKey);

        FileInputStream inputStream = new FileInputStream(inputFile);
        FileOutputStream outputStream = new FileOutputStream(outputFile);

        CipherOutputStream out = new CipherOutputStream(outputStream, cipher);
        byte[] buffer = new byte[8192];
        int count;
        while ((count = inputStream.read(buffer)) &gt; 0) {
            out.write(buffer, 0, count);
        }

        out.flush();
        out.close();
        outputStream.close();
        inputStream.close();

    } catch (NoSuchPaddingException | NoSuchAlgorithmException | InvalidKeyException | IOException ex) {
        ex.printStackTrace();
    }
}
</code></pre>
","<p>Simple. Add a <code>BufferedInputStream</code> between the <code>FileInputStream</code> and the <code>CipherInputStream</code> whewn decrypting, or a <code>BufferedOutputStream</code> between the <code>CipherOutputStream</code> and the <code>FileOutputStream</code> when encrypting, as appropriate. This will regularize the I/O to/from the file to 8192 bytes at a time, instead of whatever the cipher streams may do.</p>

<p>The buffer size of the buffered streams doesn't even matter much: it is 8192 by default and there is no harm in increasing that. </p>

<p>You could also increase the size of your own buffer.</p>
","530","<java><android><multithreading><encryption><encryption-asymmetric>","0","1","1","2017-02-28 07:52:17","","5","","6882303","","2017-02-28 06:28:25","2017-02-28 06:20:59",""
"52718797","IllegalBlockSizeException ""null"" in RSA decryption on Android","<p>I'm currently working on an Android client of my encryption software, but I kept getting <code>IllegalBlockSizeException</code>, and <code>e.getMessage()</code> always returns <code>null</code></p>

<p>Here's the code I used to find the problem</p>

<pre><code>try {
    KeyPairGenerator generator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_RSA,""AndroidKeyStore"");
    generator.initialize(new KeyGenParameterSpec.Builder(
            ""1"",
            KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP)
            .setDigests(KeyProperties.DIGEST_SHA256)
            .setKeySize(2048)
            .build());
    KeyPair kp = generator.generateKeyPair();

    KeyStore store = KeyStore.getInstance(""AndroidKeyStore"");
    store.load(null);
    PublicKey pubKey = store.getCertificate(""1"").getPublicKey();
    PrivateKey privkey = ((KeyStore.PrivateKeyEntry) store.getEntry(""1"",null)).getPrivateKey();

    byte[] content = ""123456789"".getBytes();
    Cipher encrypt = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
    encrypt.init(Cipher.ENCRYPT_MODE,pubKey);
    Cipher decrypt = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
    decrypt.init(Cipher.DECRYPT_MODE,privkey);

    byte[] A = encrypt.doFinal(content);
    byte[] B = decrypt.doFinal(A);

    String resultA = new String(A);
    String resultB = new String(B);
    Toast.makeText(getApplicationContext(), resultA + ""\n"" + resultB, Toast.LENGTH_LONG).show();
} catch (Exception e) {
    e.printStackTrace();
    Toast.makeText(getApplicationContext(), e.toString()+""\n""+e.getMessage(), Toast.LENGTH_LONG).show();
}
</code></pre>

<p>As I said there was an  <code>IllegalBlockSizeException</code>, which I found was thrown by <code>decrypt.doFinal()</code> , and <code>e.getMessage()</code> returns <code>null</code></p>

<p>Here's what I get from the debug console</p>

<pre><code>W/System.err: javax.crypto.IllegalBlockSizeException
    at android.security.keystore.AndroidKeyStoreCipherSpiBase.engineDoFinal(AndroidKeyStoreCipherSpiBase.java:519)
    at javax.crypto.Cipher.doFinal(Cipher.java:1741)
W/System.err:     at storm.cyanine.decryptor.MainActivity$override.onJob(MainActivity.java:187)
    at storm.cyanine.decryptor.MainActivity$override.onOpen(MainActivity.java:115)
    at storm.cyanine.decryptor.MainActivity$override.access$dispatch(Unknown Source:50)
    at storm.cyanine.decryptor.MainActivity.onOpen(Unknown Source:15)
    at java.lang.reflect.Method.invoke(Native Method)
    at android.support.v7.app.AppCompatViewInflater$DeclaredOnClickListener.onClick(AppCompatViewInflater.java:385)
W/System.err:     at android.view.View.performClick(View.java:6329)
    at android.view.View$PerformClick.run(View.java:24996)
    at android.os.Handler.handleCallback(Handler.java:809)
    at android.os.Handler.dispatchMessage(Handler.java:102)
    at android.os.Looper.loop(Looper.java:166)
    at android.app.ActivityThread.main(ActivityThread.java:7377)
W/System.err:     at java.lang.reflect.Method.invoke(Native Method)
    at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:469)
    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:963)
W/System.err: Caused by: android.security.KeyStoreException: Unknown error
    at android.security.KeyStore.getKeyStoreException(KeyStore.java:709)
    at android.security.keystore.KeyStoreCryptoOperationChunkedStreamer.doFinal(KeyStoreCryptoOperationChunkedStreamer.java:224)
    at android.security.keystore.AndroidKeyStoreCipherSpiBase.engineDoFinal(AndroidKeyStoreCipherSpiBase.java:506)
    ... 16 more
</code></pre>

<p>At first, I thought it was some restriction of <code>AndroidKeyStore</code> that prevents me from using the private key, so I tried using directly the one generated by <code>KeyPairGenerator</code> but nothing changed</p>

<p>What could cause this problem?</p>

<p>I've been searching online for days and I found nothing wrong with the code above (apart from not being the final product)</p>

<p>My device is Android 8.1.0</p>

<blockquote>
  <p><strong>Edit</strong>: Thanks Steve Miskovetz a lot for the solution, and I just found the Android official guide for this topic:
  <a href=""https://developer.android.com/guide/topics/security/cryptography"" rel=""nofollow noreferrer"">Cryptography</a></p>
  
  <p>(don't know why I wasn't able to find this earlier)</p>
</blockquote>
","<p>So I did some more tests... it turns out that: <code>PrivateKey</code>, regardless was it generated by <code>KeyPairGenerator</code>, imported from a file, or imported from <code>KeyStore</code>, cannot be used for decrypting once you are using <code>AndroidKeyStore</code> as a provider, even if you have <code>KeyProperties.PURPOSE_ENCRYPT</code> and <code>KeyProperties.PURPOSE_DECRYPT</code> properties added.</p>

<p>However, <code>SecretKey</code> (which is a symmetric algorithm) has no problem to be used for encrypting/decrypting when stored/generated in <code>AndroidKeyStore</code>.</p>

<p>So looks like <code>AndroidKeyStore</code> did not allow encrypting/decrypting in asymmetric algorithm after all, which was not clearly explained in the <a href=""https://developer.android.com/training/articles/keystore"" rel=""nofollow noreferrer"">Android keystore system</a> guide.</p>

<p>If anyone want to use asymmetric algorithm encryption/decryption with <code>AndroidKeyStore</code>, here's the code I used for testing. It encrypts the string <code>""123456789""</code> and then decrypts it, then shows the decrypted string in a toast, which should be <code>""123456789""</code></p>

<p>Worked fine for me</p>

<pre><code>String alias = ""2"";
KeyGenerator generator = KeyGenerator.getInstance(""AES"",""AndroidKeyStore"");
generator.init(new KeyGenParameterSpec.Builder(
    alias,
    KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
    .setBlockModes(KeyProperties.BLOCK_MODE_CBC)
    .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7)
    .setKeySize(128)
    .build());
generator.generateKey();

KeyStore store = KeyStore.getInstance(""AndroidKeyStore"");
store.load(null);

SecretKey secret = ((KeyStore.SecretKeyEntry)store.getEntry(alias,null)).getSecretKey();

byte[] content = ""123456789"".getBytes();
Cipher encrypt = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
encrypt.init(Cipher.ENCRYPT_MODE,secret);
Cipher decrypt = Cipher.getInstance(""AES/CBC/PKCS7Padding"");
decrypt.init(Cipher.DECRYPT_MODE,secret,new IvParameterSpec(encrypt.getIV()));

byte[] A = encrypt.doFinal(content);
byte[] B = decrypt.doFinal(A);

String resultA = new String(A);
String resultB = new String(B);
Toast.makeText(getApplicationContext(), resultB, Toast.LENGTH_LONG).show();
</code></pre>
","522","<android><encryption><rsa><android-keystore><encryption-asymmetric>","2","0","3","2018-10-10 23:10:15","52733332","0","1","10477613","","2018-10-10 22:44:46","2018-10-09 10:27:08",""
"52718797","IllegalBlockSizeException ""null"" in RSA decryption on Android","<p>I'm currently working on an Android client of my encryption software, but I kept getting <code>IllegalBlockSizeException</code>, and <code>e.getMessage()</code> always returns <code>null</code></p>

<p>Here's the code I used to find the problem</p>

<pre><code>try {
    KeyPairGenerator generator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_RSA,""AndroidKeyStore"");
    generator.initialize(new KeyGenParameterSpec.Builder(
            ""1"",
            KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP)
            .setDigests(KeyProperties.DIGEST_SHA256)
            .setKeySize(2048)
            .build());
    KeyPair kp = generator.generateKeyPair();

    KeyStore store = KeyStore.getInstance(""AndroidKeyStore"");
    store.load(null);
    PublicKey pubKey = store.getCertificate(""1"").getPublicKey();
    PrivateKey privkey = ((KeyStore.PrivateKeyEntry) store.getEntry(""1"",null)).getPrivateKey();

    byte[] content = ""123456789"".getBytes();
    Cipher encrypt = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
    encrypt.init(Cipher.ENCRYPT_MODE,pubKey);
    Cipher decrypt = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
    decrypt.init(Cipher.DECRYPT_MODE,privkey);

    byte[] A = encrypt.doFinal(content);
    byte[] B = decrypt.doFinal(A);

    String resultA = new String(A);
    String resultB = new String(B);
    Toast.makeText(getApplicationContext(), resultA + ""\n"" + resultB, Toast.LENGTH_LONG).show();
} catch (Exception e) {
    e.printStackTrace();
    Toast.makeText(getApplicationContext(), e.toString()+""\n""+e.getMessage(), Toast.LENGTH_LONG).show();
}
</code></pre>

<p>As I said there was an  <code>IllegalBlockSizeException</code>, which I found was thrown by <code>decrypt.doFinal()</code> , and <code>e.getMessage()</code> returns <code>null</code></p>

<p>Here's what I get from the debug console</p>

<pre><code>W/System.err: javax.crypto.IllegalBlockSizeException
    at android.security.keystore.AndroidKeyStoreCipherSpiBase.engineDoFinal(AndroidKeyStoreCipherSpiBase.java:519)
    at javax.crypto.Cipher.doFinal(Cipher.java:1741)
W/System.err:     at storm.cyanine.decryptor.MainActivity$override.onJob(MainActivity.java:187)
    at storm.cyanine.decryptor.MainActivity$override.onOpen(MainActivity.java:115)
    at storm.cyanine.decryptor.MainActivity$override.access$dispatch(Unknown Source:50)
    at storm.cyanine.decryptor.MainActivity.onOpen(Unknown Source:15)
    at java.lang.reflect.Method.invoke(Native Method)
    at android.support.v7.app.AppCompatViewInflater$DeclaredOnClickListener.onClick(AppCompatViewInflater.java:385)
W/System.err:     at android.view.View.performClick(View.java:6329)
    at android.view.View$PerformClick.run(View.java:24996)
    at android.os.Handler.handleCallback(Handler.java:809)
    at android.os.Handler.dispatchMessage(Handler.java:102)
    at android.os.Looper.loop(Looper.java:166)
    at android.app.ActivityThread.main(ActivityThread.java:7377)
W/System.err:     at java.lang.reflect.Method.invoke(Native Method)
    at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:469)
    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:963)
W/System.err: Caused by: android.security.KeyStoreException: Unknown error
    at android.security.KeyStore.getKeyStoreException(KeyStore.java:709)
    at android.security.keystore.KeyStoreCryptoOperationChunkedStreamer.doFinal(KeyStoreCryptoOperationChunkedStreamer.java:224)
    at android.security.keystore.AndroidKeyStoreCipherSpiBase.engineDoFinal(AndroidKeyStoreCipherSpiBase.java:506)
    ... 16 more
</code></pre>

<p>At first, I thought it was some restriction of <code>AndroidKeyStore</code> that prevents me from using the private key, so I tried using directly the one generated by <code>KeyPairGenerator</code> but nothing changed</p>

<p>What could cause this problem?</p>

<p>I've been searching online for days and I found nothing wrong with the code above (apart from not being the final product)</p>

<p>My device is Android 8.1.0</p>

<blockquote>
  <p><strong>Edit</strong>: Thanks Steve Miskovetz a lot for the solution, and I just found the Android official guide for this topic:
  <a href=""https://developer.android.com/guide/topics/security/cryptography"" rel=""nofollow noreferrer"">Cryptography</a></p>
  
  <p>(don't know why I wasn't able to find this earlier)</p>
</blockquote>
","<p>It looks like your issue was introduced with Android Oreo, but has a workaround.</p>

<p>This stackoverflow post discusses it:<br>
<a href=""https://stackoverflow.com/questions/46042127/android-8-0-illegalblocksizeexception-when-using-rsa-ecb-oaepwithsha-512andmgf1"">Android 8.0: IllegalBlocksizeException when using RSA/ECB/OAEPWithSHA-512AndMGF1Padding</a></p>

<p>This Google issue tracker has good discussion on it:<br>
<a href=""https://issuetracker.google.com/issues/36708951"" rel=""nofollow noreferrer"">https://issuetracker.google.com/issues/36708951</a></p>

<p>You need to add this line:</p>

<pre><code>OAEPParameterSpec sp = new OAEPParameterSpec(""SHA-256"", ""MGF1"", new MGF1ParameterSpec(""SHA-1""), PSource.PSpecified.DEFAULT);
</code></pre>

<p>And modify these lines, adding the sp parameter:</p>

<pre><code>encrypt.init(Cipher.ENCRYPT_MODE,pubKey,sp);
decrypt.init(Cipher.DECRYPT_MODE,privkey,sp);
</code></pre>

<p>Your full code with modifications here:</p>

<pre><code>try {
    KeyPairGenerator generator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_RSA,""AndroidKeyStore"");
    generator.initialize(new KeyGenParameterSpec.Builder(
            ""1"",
            KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP)
            .setDigests(KeyProperties.DIGEST_SHA256)
            .setKeySize(2048)
            .build());
    KeyPair kp = generator.generateKeyPair();

    KeyStore store = KeyStore.getInstance(""AndroidKeyStore"");
    store.load(null);
    PublicKey pubKey = store.getCertificate(""1"").getPublicKey();
    PrivateKey privkey = ((KeyStore.PrivateKeyEntry) store.getEntry(""1"",null)).getPrivateKey();

    byte[] content = ""123456789"".getBytes();
    OAEPParameterSpec sp = new OAEPParameterSpec(""SHA-256"", ""MGF1"", new MGF1ParameterSpec(""SHA-1""), PSource.PSpecified.DEFAULT);
    Cipher encrypt = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
    encrypt.init(Cipher.ENCRYPT_MODE,pubKey,sp);
    Cipher decrypt = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
    decrypt.init(Cipher.DECRYPT_MODE,privkey,sp);

    byte[] A = encrypt.doFinal(content);
    byte[] B = decrypt.doFinal(A);

    String resultA = new String(A);
    String resultB = new String(B);
    Toast.makeText(getApplicationContext(), resultA + ""\n"" + resultB, Toast.LENGTH_LONG).show();
} catch (Exception e) {
    e.printStackTrace();
    Toast.makeText(getApplicationContext(), e.toString()+""\n""+e.getMessage(), Toast.LENGTH_LONG).show();
}
</code></pre>
","522","<android><encryption><rsa><android-keystore><encryption-asymmetric>","2","1","3","2018-10-10 23:10:15","52733332","0","1","10477613","","2018-10-10 22:44:46","2018-10-09 10:27:08",""
"52718797","IllegalBlockSizeException ""null"" in RSA decryption on Android","<p>I'm currently working on an Android client of my encryption software, but I kept getting <code>IllegalBlockSizeException</code>, and <code>e.getMessage()</code> always returns <code>null</code></p>

<p>Here's the code I used to find the problem</p>

<pre><code>try {
    KeyPairGenerator generator = KeyPairGenerator.getInstance(KeyProperties.KEY_ALGORITHM_RSA,""AndroidKeyStore"");
    generator.initialize(new KeyGenParameterSpec.Builder(
            ""1"",
            KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)
            .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_OAEP)
            .setDigests(KeyProperties.DIGEST_SHA256)
            .setKeySize(2048)
            .build());
    KeyPair kp = generator.generateKeyPair();

    KeyStore store = KeyStore.getInstance(""AndroidKeyStore"");
    store.load(null);
    PublicKey pubKey = store.getCertificate(""1"").getPublicKey();
    PrivateKey privkey = ((KeyStore.PrivateKeyEntry) store.getEntry(""1"",null)).getPrivateKey();

    byte[] content = ""123456789"".getBytes();
    Cipher encrypt = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
    encrypt.init(Cipher.ENCRYPT_MODE,pubKey);
    Cipher decrypt = Cipher.getInstance(""RSA/ECB/OAEPWithSHA-256AndMGF1Padding"");
    decrypt.init(Cipher.DECRYPT_MODE,privkey);

    byte[] A = encrypt.doFinal(content);
    byte[] B = decrypt.doFinal(A);

    String resultA = new String(A);
    String resultB = new String(B);
    Toast.makeText(getApplicationContext(), resultA + ""\n"" + resultB, Toast.LENGTH_LONG).show();
} catch (Exception e) {
    e.printStackTrace();
    Toast.makeText(getApplicationContext(), e.toString()+""\n""+e.getMessage(), Toast.LENGTH_LONG).show();
}
</code></pre>

<p>As I said there was an  <code>IllegalBlockSizeException</code>, which I found was thrown by <code>decrypt.doFinal()</code> , and <code>e.getMessage()</code> returns <code>null</code></p>

<p>Here's what I get from the debug console</p>

<pre><code>W/System.err: javax.crypto.IllegalBlockSizeException
    at android.security.keystore.AndroidKeyStoreCipherSpiBase.engineDoFinal(AndroidKeyStoreCipherSpiBase.java:519)
    at javax.crypto.Cipher.doFinal(Cipher.java:1741)
W/System.err:     at storm.cyanine.decryptor.MainActivity$override.onJob(MainActivity.java:187)
    at storm.cyanine.decryptor.MainActivity$override.onOpen(MainActivity.java:115)
    at storm.cyanine.decryptor.MainActivity$override.access$dispatch(Unknown Source:50)
    at storm.cyanine.decryptor.MainActivity.onOpen(Unknown Source:15)
    at java.lang.reflect.Method.invoke(Native Method)
    at android.support.v7.app.AppCompatViewInflater$DeclaredOnClickListener.onClick(AppCompatViewInflater.java:385)
W/System.err:     at android.view.View.performClick(View.java:6329)
    at android.view.View$PerformClick.run(View.java:24996)
    at android.os.Handler.handleCallback(Handler.java:809)
    at android.os.Handler.dispatchMessage(Handler.java:102)
    at android.os.Looper.loop(Looper.java:166)
    at android.app.ActivityThread.main(ActivityThread.java:7377)
W/System.err:     at java.lang.reflect.Method.invoke(Native Method)
    at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:469)
    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:963)
W/System.err: Caused by: android.security.KeyStoreException: Unknown error
    at android.security.KeyStore.getKeyStoreException(KeyStore.java:709)
    at android.security.keystore.KeyStoreCryptoOperationChunkedStreamer.doFinal(KeyStoreCryptoOperationChunkedStreamer.java:224)
    at android.security.keystore.AndroidKeyStoreCipherSpiBase.engineDoFinal(AndroidKeyStoreCipherSpiBase.java:506)
    ... 16 more
</code></pre>

<p>At first, I thought it was some restriction of <code>AndroidKeyStore</code> that prevents me from using the private key, so I tried using directly the one generated by <code>KeyPairGenerator</code> but nothing changed</p>

<p>What could cause this problem?</p>

<p>I've been searching online for days and I found nothing wrong with the code above (apart from not being the final product)</p>

<p>My device is Android 8.1.0</p>

<blockquote>
  <p><strong>Edit</strong>: Thanks Steve Miskovetz a lot for the solution, and I just found the Android official guide for this topic:
  <a href=""https://developer.android.com/guide/topics/security/cryptography"" rel=""nofollow noreferrer"">Cryptography</a></p>
  
  <p>(don't know why I wasn't able to find this earlier)</p>
</blockquote>
","<p>asymmetric key encryption available from android 6+( api 23+). This is a good guide for android's encryption. Additionsly after getBytes called you need to encode bytes with Base64.</p>
","522","<android><encryption><rsa><android-keystore><encryption-asymmetric>","2","0","3","2018-10-10 23:10:15","52733332","0","1","10477613","","2018-10-10 22:44:46","2018-10-09 10:27:08",""
"32793186","Deriving public / key pair from passphrase","<p>Following the answer available here: <a href=""https://crypto.stackexchange.com/questions/1662/how-can-one-securely-generate-an-asymmetric-key-pair-from-a-short-passphrase"">https://crypto.stackexchange.com/questions/1662/how-can-one-securely-generate-an-asymmetric-key-pair-from-a-short-passphrase</a></p>

<p>I've started down the following path:</p>

<pre><code>public static void DeriveKeyPair(string pass, byte[] salt)
{
    using (var derived = new Rfc2898DeriveBytes(pass, salt, 10000))
    {
        var randomNum = new Random(BitConverter.ToInt32(derived.GetBytes(4), 0));
        // Can't seem to find an asymmetric implementation that I can supply the seed to
    }
}
</code></pre>

<p>Ignoring the fact that the return type isn't going to do anything useful, the big problem I'm having is that I can't seem to find an asymmetric crypto provider that I can either seed, or provide the seeded number generator to.</p>

<p>I'm doing this so I don't have to store the private key anywhere, this is a security consideration and aids in portability as the keys can be derived on any machine provided the same password (and salt - which is initially unique and random).</p>
","<p>After some hunting around I decided to settle upon generating a random RSA key-pair, and then symmetrically encrypting the private key using AES.</p>

<p>This leads me to the two following methods:</p>

<pre><code>public static byte[] EncryptData(string pass, byte[] salt, byte[] encryptedPrivateKey, byte[] targetPublicKey,
    byte[] iv, byte[] data)
{
    using (var rfc = new Rfc2898DeriveBytes(pass, salt, IterationCount))
    {
        using (var aes = new AesCryptoServiceProvider())
        {
            aes.KeySize = AesKeySize;
            aes.Key = rfc.GetBytes(aes.KeySize / 8);
            aes.IV = iv;

            using (var dec = aes.CreateDecryptor(aes.Key, aes.IV))
            {
                using (var ms = new MemoryStream(encryptedPrivateKey))
                {
                    using (var cs = new CryptoStream(ms, dec, CryptoStreamMode.Read))
                    {
                        var privKey = new byte[RsaKeySize];
                        cs.Read(privKey, 0, privKey.Length);
                        return RsaEncrypt(targetPublicKey, data);
                    }
                }
            }
        }
    }
}

public static byte[] DecryptData(string pass, byte[] salt, byte[] encryptedPrivateKey, byte[] iv, byte[] data)
{
    using (var rfc = new Rfc2898DeriveBytes(pass, salt, IterationCount))
    {
        using (var aes = new AesCryptoServiceProvider())
        {
            aes.KeySize = AesKeySize;
            aes.Key = rfc.GetBytes(aes.KeySize/8);
            aes.IV = iv;

            using (var dec = aes.CreateDecryptor(aes.Key, aes.IV))
            {
                using (var ms = new MemoryStream(encryptedPrivateKey))
                {
                    using (var cs = new CryptoStream(ms, dec, CryptoStreamMode.Read))
                    {
                        var privKey = new byte[RsaKeySize];
                        cs.Read(privKey, 0, privKey.Length);
                        return RsaDecrypt(privKey, data);
                    }
                }
            }
        }
    }
}
</code></pre>

<hr>

<h2>RSA isn't enough.</h2>

<p>Essentially, RSA can only encrypt data that's smaller <a href=""https://stackoverflow.com/questions/5583379/what-is-the-limit-to-the-amount-of-data-that-can-be-encrypted-with-rsa"">than the key size</a></p>

<p>In my new scheme:</p>

<ol>
<li>User identity is the RSA public key and an RSA private key that has been encrypted with AES by deriving the AES key using the password and salt</li>
<li>Encrypting data involves:

<ol>
<li>Generating a random AES key</li>
<li>Encrypting the data with that AES key</li>
<li>Generating an RSA signature of the encrypted data using the RSA private key of the originator</li>
<li>Access to the data is granted by RSA encrypting the random AES key with the target's public RSA key</li>
</ol></li>
</ol>

<p>This allows me to store all the core information:</p>

<ol>
<li>Public key</li>
<li>Salt</li>
<li>Initialisation Vector</li>
<li>Encrypted private key</li>
</ol>

<p>pretty much where I want, because the password is needed to actually crack the private key.</p>

<p>Decrypting is relatively simple too:</p>

<ol>
<li>Receive incoming data</li>
<li>RSA verify it against the purported sender's RSA public key</li>
<li>Decrypt receiver's RSA private key from derived password + salt AES key</li>
<li>Decrypt access key (embedded / hosted AES key)</li>
<li>Decrypt received data using the provided key</li>
</ol>
","515","<c#><encryption><encryption-asymmetric>","1","0","1","2015-09-26 06:25:39","32793566","0","","-1","","2017-04-13 12:48:18","2015-09-26 02:59:27",""
"19267766","java.security.KeyException: The operation was canceled by the user","<p>In my application I am encrypting and decrypting secret key using Class 2 Digital Certificate. Secret key is encrypted successfully but on decryption it is giving exception. This exception occur randomly not all the time. </p>

<p><strong>SecretKey for which I am getting exception is:</strong> DvhvSsG2AYDIWqoZcO687Q==</p>

<p><strong>Exception is:</strong> java.security.KeyException: The operation was canceled by the user.</p>

<p>Below is my code: </p>

<p>Function to generate SecretKey:</p>

<pre><code>public static String getSecretKey() {
    KeyGenerator kgen;
    String strSecretkey;
    try {
        kgen = KeyGenerator.getInstance(""AES"");
        kgen.init(128);
        SecretKey secretkey = kgen.generateKey();
        BASE64Encoder encode = new BASE64Encoder();
        strSecretkey = encode.encode(secretkey.getEncoded());
    } 
    catch (Exception e) {
        exceptionLogFile(e,null);
        e.printStackTrace();
        strSecretkey = ""Error@SecretKeyGeneration: "" + e.getMessage();
    }
    return strSecretkey;
}
</code></pre>

<p>Function to encrypt SecretKey:</p>

<pre><code>public String Encrypt(String text, String pubkey) {
        String encryptedText;
        PublicKey publicKey = null;
        Cipher cipher;
        try {
            publicKey = getPublicKeyFromString(pubkey);
            if (publicKey!=null) {
                if(text != null){
                    byte[] plainText = text.getBytes();
                    cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
                    cipher.init(Cipher.ENCRYPT_MODE, publicKey);
                    encryptedText = bASE64Encoder.encode(cipher.doFinal(plainText));
                }
                else{
                    encryptedText =  ""Error@Encrypt: Null data received"";
                }
            }
            else{
                encryptedText =  ""Error@Encrypt: Public Key not found"";
            }
        } 
        catch (Exception e) {
            encryptedText =  ""Error@Encrypt: ""+ e.getMessage();
        }
        return encryptedText;

    }
</code></pre>

<p>Function to decrypt secret key:</p>

<pre><code>public String Decrypt(String text, String pubkey) {
        PrivateKey privatekey = null;
        KeyStore keyStoreBrowser = null;
        String decryptedString;
        Cipher cipher = null;
        byte[] encryptText;
        try {
            keyStoreBrowser = initializeBrowserKeyStore();
            if(keyStoreBrowser != null) {
                privatekey = getPrivateKeyFromKeyStore(pubkey, keyStoreBrowser);
                if(privatekey != null) {
                    if(text != null){
                        encryptText = this.bASE64Decoder.decodeBuffer(text);
                        cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
                        cipher.init(Cipher.DECRYPT_MODE, privatekey);
                        decryptedString = new String(cipher.doFinal(encryptText));
                    }
                    else{
                        decryptedString =  ""Error@Decrypt: Null data received to decrypt."";
                    }
                }
                else{
                    printMessageToConsole(""Private is null"");
                    decryptedString =  ""Error@Decrypt: Private Key Not Found."";
                }
            }
            else{
                printMessageToConsole(""KeyStore  not found"");
                decryptedString =  ""Error@Decrypt: KeyStore is null."";
            }
        }
        catch (Exception e) {
            decryptedString = ""Error@Decrypt:""+ e.getMessage();
        }
        return decryptedString;
    }
</code></pre>

<p>Function to get private key form keystore:</p>

<pre><code>private PrivateKey getPrivateKeyFromKeyStore(String pubkey,KeyStore browser) {
        PrivateKey privateKey = null;
        String pubKey1 = """";
        printMessageToConsole(""Inside Get Private Key"" );

        if (browser != null) {
            printMessageToConsole(""Checking Browser Key Store keys for : "" + browserName);
            try {
                Field spiField = KeyStore.class.getDeclaredField(""keyStoreSpi"");
                spiField.setAccessible(true);
                KeyStoreSpi spi = (KeyStoreSpi) spiField.get(browser);
                Field entriesField = spi.getClass().getSuperclass().getDeclaredField(""entries"");
                entriesField.setAccessible(true);
                @SuppressWarnings(""rawtypes"")
                Collection entries = (Collection) entriesField.get(spi);
                for (Object entry : entries) {
                    String alias = (String) invokeGetter(entry, ""getAlias"");
                    X509Certificate[] certificateChain = (X509Certificate[]) invokeGetter(entry, ""getCertificateChain"");
                    for (X509Certificate current : certificateChain) {
                        pubKey1 = this.bASE64Encoder.encode(current.getPublicKey().getEncoded());
                        if (pubkey.equals(pubKey1) &amp;&amp; !pubkey.equals("""")) {
                            privateKey = (PrivateKey) invokeGetter(entry,""getPrivateKey"");
                            printMessageToConsole(""Private Key is "" + privateKey.toString());
                            printMessageToConsole(""Private Key Found from Browser"");
                            return privateKey;
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }

        }
        return privateKey;
    }
</code></pre>
","","495","<java><security><encryption><encryption-asymmetric><secret-key>","0","","0","2013-10-09 10:11:56","","7","3","207421","","2013-10-09 10:11:56","2013-10-09 09:17:17",""
"46809528","How to save and re-use keypairs in Java asymmetric encryption?","<p>I've written code that generates the key pairs, but was wondering if there's any way to save and re-use them? </p>

<p>Here is the code that generaes the pair:</p>

<p>public static void main(String[] args) throws Exception {</p>

<pre><code>    String plainText = ""Hello world"";

    Map&lt;String, Object&gt; keys = getRSAKeys();

    PrivateKey privateKey = (PrivateKey) keys.get(""private"");
    PublicKey publicKey = (PublicKey) keys.get(""public"");

    System.out.println(privateKey.getEncoded());

    System.out.println(publicKey.getEncoded());



    String encrypted = encryptMessage(plainText, privateKey);


    System.out.println(encrypted);

    String decrypted = decryptMessage(plainText, publicKey, encrypted);

    System.out.println(decrypted);

}

private static Map&lt;String, Object&gt; getRSAKeys() throws Exception {

    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(""RSA"");
    keyPairGenerator.initialize(2048);
    KeyPair keyPair = keyPairGenerator.generateKeyPair();
    PrivateKey privateKey = keyPair.getPrivate();
    PublicKey publicKey = keyPair.getPublic();
    Map&lt;String, Object&gt; keys = new HashMap&lt;String, Object&gt;();
    keys.put(""private"", privateKey);
    keys.put(""public"", publicKey);

    return keys;

}
</code></pre>
","<p><a href=""https://docs.oracle.com/javase/tutorial/security/apisign/step2.html"" rel=""nofollow noreferrer"">https://docs.oracle.com/javase/tutorial/security/apisign/step2.html</a> -- good entry point.</p>

<p>Also here is some example code to do exactly what you want: </p>

<pre><code>package mx.playground.security;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

import javax.crypto.Cipher;

public class AppForStackOverflow {

    public static final int KEY_SIZE = 2048;

    public static final String PUBLIC_KEY_X509 = ""C:\\workspace\\rsa-pair\\public-key"";
    public static final String PUBLIC_KEY_PKCS1 = ""C:\\workspace\\rsa-pair\\public-key-pkcs1"";
    public static final String PUBLIC_KEY_PEM = ""C:\\workspace\\rsa-pair\\public-key-pem"";

    public static final String PRIVATE_KEY_PKCS8 = ""C:\\workspace\\rsa-pair\\private-key"";
    public static final String PRIVATE_KEY_PKCS1 = ""C:\\workspace\\rsa-pair\\private-key-pkcs1"";
    public static final String PRIVATE_KEY_PEM = ""C:\\workspace\\rsa-pair\\private-key-pem"";

    public static final String SIGNATURE_PATH = ""C:\\workspace\\rsa-pair\\signature"";

    public static final String PRIVATE_KEY_PATH = PRIVATE_KEY_PKCS8;
    public static final String PUBLIC_KEY_PATH = PUBLIC_KEY_X509;

    public static void main(String[] args) {
        generateRsaKeysPair();
        encryptDecryptTest();

        // symmetric encryption example, use it to store your Private Key in safe manner
        String message = ""test message"";
        String rightPass = ""0123456789ABCDEF""; // for AES password should be at least 16 chars 
        String wrongPass = ""zzz"";

        byte[] encryptedMessage = symmetricEncrypt(message.getBytes(), rightPass);
        System.out.print(new String(encryptedMessage));

        byte[] decryptedMessage = symmetricDecrypt(encryptedMessage, rightPass);
        System.out.println(new String(decryptedMessage));

    }       

    public static void generateRsaKeysPair() {
        try {
            KeyPairGeneratorJdk kpg = new KeyPairGeneratorJdk(KEY_SIZE, ""RSA"");

            PublicKey  publicKey  = kpg.getPublicKey();
            PrivateKey privateKey = kpg.getPrivateKey();

            save(PUBLIC_KEY_PATH,  publicKey.getEncoded());
            save(PRIVATE_KEY_PATH, privateKey.getEncoded());
        } catch (Exception e) {
            throw new RuntimeException(""Failed to execute generateRsaKeysPair()"", e);           
        }
    }

    public static void encryptDecryptTest() {
        try {
            byte[] privateKeyBytes = read(PRIVATE_KEY_PATH);
            byte[] publicKeyBytes = read(PUBLIC_KEY_PATH);

            KeyFactory kf = KeyFactory.getInstance(""RSA"");
            PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(privateKeyBytes);
            PrivateKey privateKey = kf.generatePrivate(privateKeySpec);

            X509EncodedKeySpec spec = new X509EncodedKeySpec(publicKeyBytes);
            PublicKey publicKey = kf.generatePublic(spec);

            Cipher cipher = Cipher.getInstance(""RSA"");

            // doing encryption
            String message = ""test message"";
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            byte[] encodedMessage = cipher.doFinal(message.getBytes(""UTF-8""));
            System.out.println(""ENCRYPTED: "" + new String(encodedMessage));

            // doing decryption
            cipher.init(Cipher.DECRYPT_MODE, privateKey);
            byte[] decodedMessage = cipher.doFinal(encodedMessage);
            System.out.println(""DECRYPTED: "" + new String(decodedMessage));
        } catch (Exception e) {
            throw new RuntimeException(""Failed to execute encryptDecryptTest()"", e);
        }
    }

    private static void save(String path, byte[] data) {
        try {
            File file = new File(path);
            file.getParentFile().mkdirs();

            try (FileOutputStream fos = new FileOutputStream(file)){
                fos.write(Base64.getEncoder().encode(data));
                fos.flush();
            };
        } catch (IOException e) {
            throw new RuntimeException(""Failed to save data to file: "" + path, e);
        }
    }

    private static byte[] read(String path) {
        try {
            return Base64.getDecoder().decode(Files.readAllBytes(new File(path).toPath()));
        } catch (IOException e) {
            throw new RuntimeException(""Failed to read data from file: "" + path, e);
        }
    }   

    /*
     * Use this to encrypt your private key before saving it to disk  
     */
    public static byte[] symmetricEncrypt(byte[] data, String password) {
        try {
            SecretKeySpec secretKey = new SecretKeySpec(password.getBytes(), ""AES"");
            Cipher cipher = Cipher.getInstance(""AES"");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            byte[] result = cipher.doFinal(data);
            return result;
        } catch (Exception e) {
            throw new RuntimeException(""Failed to execute symmetricEncrypt()"", e);
        }
    }

    public static byte[] symmetricDecrypt(byte[] data, String password) {
        try {
            SecretKeySpec secretKey = new SecretKeySpec(password.getBytes(), ""AES"");
            Cipher cipher = Cipher.getInstance(""AES"");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            byte[] result = cipher.doFinal(data);
            return result;
        } catch (Exception e) {
            throw new RuntimeException(""Failed to execute symmetricEncrypt()"", e);
        }
    }

}
</code></pre>
","486","<java><rsa><encryption-asymmetric>","0","-1","1","2017-10-19 19:39:08","","5","","","","","2017-10-18 11:52:11",""
"39304066","Secure connection between client and server application","<p>I know there are many question regarding this topic, but I swear I could not find the answer that best fits my problem.</p>

<p>It's a conceptual issue. I have a client and a server application and they must connect securely. I have been googling some options to achieve so but I'm not very satisfied to any of them. </p>

<ol>
<li>The use of <strong>asymmetric keys</strong> requires the user to have a public key. This will be an opensource project so hardcoding the key in the source code is not an option. Also, I understood that using a certificate to trade the public key between both parts would avoid a <em>man in the middle</em>, but it makes me a little bit dizzy. I didn't understand very much how it can be accomplished and I don't know where I can get (for free) a valid certificate.</li>
<li>The use of <strong>symmetric keys</strong> requires both client and server to have the same key. So anyone who downloads the application would be able to access the cryptographer key and use it.</li>
</ol>

<p>I've read somewhere I could generate a random number that varies from time to time and use it to encrypt data. However, since it is an opensouce application, anyone who is able to read how this number varies over time would also be able to decrypt data, right?</p>

<p>What am I missing here? I appreciate you help. Btw, I'm using Java and it's not a web application.</p>
","","478","<security><ssl><client-server><encryption-symmetric><encryption-asymmetric>","1","","0","2016-09-03 15:59:59","","5","1","150978","","2016-09-03 15:59:59","2016-09-03 06:46:49",""
"49591330",".net - Encrypt in server decrypt in client","<p>I am using a Token based authentication. My web server would generate and encrypt the token. I want the client to decrypt the token to read certain payload information.</p>

<p>What algorithm I should use to achieve this?</p>

<p>In my understanding if I use RSA, I can decrypt in c# using private key whereas the encryption has to happen from other hand so this doesn't fit-in my scenario. Is there any other asymmetric algorithm or ways to achieve this?</p>

<ul>
<li>Server encrypt - private key. </li>
<li>Client decrypt - public key.</li>
</ul>
","<blockquote>
  <p>Is there any other asymmetric algorithm or ways to achieve this please suggest.</p>
</blockquote>

<p>I want to correct your understanding of asymmetric encryption. Asymmetric encryption allows anyone with the public key to send a secret message to anyone with the private key. Since the public key is public, asymmetric encryption allows many possible senders to send private messages to a few special recipients.</p>

<blockquote>
  <p>My web server would generate and encrypt the token. I want the client to decrypt the token to read certain payload information.</p>
</blockquote>

<p>In that case, with the server sending a secret message to the client, if you are using asymmetric encryption, then the server will encrypt with the public key, and the client will decrypt with the private key. </p>

<blockquote>
  <p>Server encrypt - private key. Client decrypt - public key.</p>
</blockquote>

<p>That is not correct. In asymmetric cryptography, the public key does the encryption and the private key does the decryption.</p>

<p>What you might be thinking about is a digitally signed message. In that case, the sender signs the message with the private key and the receiver verifies the signature with the public key. Digitally signed messages are not secret, though, whereas encrypted messages are secret.</p>

<blockquote>
  <p>Is there any other asymmetric algorithm or ways to achieve this please suggest.</p>
</blockquote>

<p>Since your use case is not entirely clear, I will stop the answer there, and leave it at correcting your understanding of asymmetric encryption. It might be that you need symmetric encryption or a digital signature. I encourage you to ask another, separate StackOverflow question as a follow up to this one. </p>

<hr>

<p>As a final note, I'll refer you to the <a href=""https://tools.ietf.org/html/rfc4949"" rel=""nofollow noreferrer"">Internet Security Glossary</a>. In particular, the section named ""$ asymmetric cryptography"" has a precise and brief description about how ""Asymmetric cryptography can be used to create algorithms for encryption, digital signature, and key agreement.""</p>

<hr>

<p>From your other (unfortunately on hold) question <a href=""https://stackoverflow.com/questions/49610839/protecting-jwt-signing-and-encryption-c-sharp-solution"">Protecting JWT Signing and Encryption C# Solution</a>, it sounds like you require the following: </p>

<ol>
<li>Send a payload from the server to the client. </li>
<li>Only the client can read the payload, because it is encrypted.</li>
<li>The client can verify who sent the payload, because it is signed. </li>
</ol>

<p>The recommended approach is to <a href=""https://tools.ietf.org/html/rfc7519#section-11.2"" rel=""nofollow noreferrer"">sign-and-then-encrypt</a>. If you are wanting to use asymmetric encryption for both: </p>

<ol>
<li>use a private to key to sign the payload,</li>
<li>then use a public key to encrypt the signed payload.</li>
</ol>
","468","<c#><encryption><encryption-asymmetric>","1","1","1","2018-04-02 21:04:40","","2","","4420967","","2018-04-01 05:12:57","2018-03-31 18:59:55",""
"34387485","ObjectInputStream blocks forever during readObject()","<p>I'm trying to handle out a secured connection with a self made Server and client.
At first the client connects to the server and sends per ObjectOutputStream an PublicKey object to the server.
The server answers with an encrypted AES key, then both establish an AES encrypted input- and outputstream.</p>

<p>But the client keeps blocking during receiving the AES key.</p>

<p>Thats my client code:</p>

<pre><code>private void createServerConnection(String serverAddress) throws IOException {
    connection = new Socket(serverAddress, 5555);
    InputStream is = connection.getInputStream();
    OutputStream os = connection.getOutputStream();
    ObjectOutputStream oos = new ObjectOutputStream(os);
    ObjectInputStream ois = new ObjectInputStream(is);
    try {
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
        KeyPair kp = kpg.genKeyPair();
        oos.writeObject(kp.getPublic());
        Cipher ci = Cipher.getInstance(""RSA"");
        ci.init(Cipher.DECRYPT_MODE, kp.getPrivate());
        byte[] aesKey = (byte[]) ois.readObject();
        aesKey = ci.doFinal(aesKey);
        SecretKey originalKey = new SecretKeySpec(aesKey, 0, aesKey.length, ""AES"");

        Cipher aesCipherD = Cipher.getInstance(""AES"");
        aesCipherD.init(Cipher.DECRYPT_MODE, originalKey);

        Cipher aesCipherE = Cipher.getInstance(""AES"");
        aesCipherE.init(Cipher.ENCRYPT_MODE, originalKey);

        this.oos = new ObjectOutputStream(new CipherOutputStream(os, aesCipherE));
        this.ois = new ObjectInputStream(new CipherInputStream(is, aesCipherD));

    } catch(NoSuchAlgorithmException nsae) {

    } catch(ClassNotFoundException cnfe) {

    } catch(NoSuchPaddingException nspe) {

    } catch(InvalidKeyException ike) {

    } catch(IllegalBlockSizeException ibse) {

    } catch(BadPaddingException bpe) {

    }
}
</code></pre>

<p>And thats my server:</p>

<pre><code>   public void run() {
    try {
        //Verbindung Aufbauen
        Socket s = server.accept();
        System.out.println(""Eingehede Verbindung von "" + s.getInetAddress().toString());
        new JSecSocket(server).start();
        OutputStream os = s.getOutputStream();
        InputStream is = s.getInputStream();
        ObjectOutputStream oos = new ObjectOutputStream(os);
        ObjectInputStream ois = new ObjectInputStream(is);
        System.out.println(""Verbindung aufgebaut!"");

        //PublicKey vom Client entgegennehmen
        System.out.println(""Öffentlicher Schlüssel wird empfangen."");
        PublicKey clientPublicKey = (PublicKey) ois.readObject();

        //AES Key verschlüsseln und zum Client übertragen
        System.out.println(""AES Schlüssel wird gesendet."");
        Cipher keyCipher = Cipher.getInstance(""RSA"");
        keyCipher.init(Cipher.ENCRYPT_MODE, clientPublicKey);
        byte[] encryptetKey = keyCipher.doFinal(this.aesSk.getEncoded());
        oos.write(encryptetKey);

        System.out.println(""Verschlüsselte Verbindung wird aufgebaut!"");
        Cipher encryptCipher = Cipher.getInstance(""AES"");
        encryptCipher.init(Cipher.ENCRYPT_MODE, aesSk);

        Cipher decryptCipher = Cipher.getInstance(""AES"");
        decryptCipher.init(Cipher.DECRYPT_MODE, aesSk);

        //Verschlüsselte Datenströme werden geöffnet
        oos = new ObjectOutputStream(new CipherOutputStream(os, encryptCipher));
        ois = new ObjectInputStream(new CipherInputStream(is, decryptCipher));
        System.out.println(""Verbindung bereit!"");
        while (!this.isInterrupted()) {
            NetworkStatus ns = (NetworkStatus) ois.readObject();
            JSecDatabase database = new JSecDatabase(""localhost"", ""root"", """", ""database"");
            switch (ns.getAction()) {
                case ""lookup"":
                    System.out.println(""Lookup von"" + s.getInetAddress().toString());
                    String target = (String) ns.getValue();
                    try {
                        oos.writeObject(new NetworkStatus(""lookupOk"", database.lookup(target)));
                    } catch (Exception e) {
                        oos.writeObject(new NetworkStatus(""lookupError"", e));
                    }
                    break;
                case ""create"":
                    System.out.println(""User wird erstellt von "" + s.getInetAddress().toString());
                    oos.writeObject(new NetworkStatus(""createOk"", database.create()));
                    break;
                case ""update"":
                    System.out.println(""User wird geupdated von"" + s.getInetAddress().toString());
                    String[] updateTarget = (String[]) ns.getValue();
                    if (database.update(updateTarget[0], updateTarget[1], s.getInetAddress().toString())) {
                        oos.writeObject(new NetworkStatus(""updateOk"", s.getInetAddress().toString()));
                    } else {
                        oos.writeObject(new NetworkStatus(""updateError"", null));
                    }
                    break;
                case ""delete"":

                    break;
                default:
                case ""close"":
                    System.out.println(""Verbindung zu "" + s.getInetAddress().toString() + "" wird getrennt!"");
                    oos.close();
                    ois.close();
                    os.close();
                    is.close();
            }
        }

    } catch (IOException ioe) {
        System.err.println(""Es gab einen IO Error.\n"" + ioe.getMessage());
    } catch (ClassNotFoundException cnfe) {
        System.err.println(cnfe.getMessage());
    } catch (NoSuchAlgorithmException nsae) {
        System.err.println(nsae.getMessage());
    } catch (NoSuchPaddingException nspe) {
        System.err.println(nspe.getMessage());
    } catch (InvalidKeyException ike) {
        System.err.println(ike.getMessage());
    } catch (IllegalBlockSizeException ibse) {
        System.err.println(ibse.getMessage());
    } catch (BadPaddingException bpe) {
        System.err.println(bpe.getMessage());
    }
    sockets.remove(this);
}}
</code></pre>

<p>I think its more a problem with the objectstreams, everytime i try to work with objectstreams on a socket i got similar problems.
Does someone had an idea whats there happening ?</p>
","<p>You can't use multiple streams over the same socket in general. There are specific cases where it works but in general you're up against unknown buffering which will get your peers out of sync quick as a wink. Redo it with a single <code>ObjectOutputStream</code> and <code>ObjectInputStream</code>at each end. If you only need to encrypt certain parts of the stream, look into <code>SealedObject</code>.</p>
","459","<java><sockets><serversocket><encryption-symmetric><encryption-asymmetric>","1","0","1","2015-12-21 02:39:50","","12","","5539364","","2015-12-21 02:30:25","2015-12-21 00:30:12",""
"44079306","How do you use asymmetric keys or certificate authentication in SNMP4J?","<p>I am working on a project that would like to be able to use certificates or keys as a method of authentication for SNMPv3. We are using the java library <a href=""http://www.snmp4j.org"" rel=""nofollow noreferrer"">SNMP4J</a>.</p>

<p>During my research I have found that SNMP uses TLS/DTLS for message encryption and supposedly also for authentication. <a href=""http://www.snmp.com/products/techinfo/secmodels.shtml"" rel=""nofollow noreferrer"">Source 1</a> | <a href=""https://tools.ietf.org/html/rfc5953#section-9.1"" rel=""nofollow noreferrer"">Source 2</a> | <a href=""https://tools.ietf.org/html/rfc5591"" rel=""nofollow noreferrer"">Source 3</a></p>

<p>Looking into the little documentation SNMP4J has, I found that it allows the usage of TLS certificates for encrypting traffic. But I am not sure how the authentication is done, if possible, using a public/private key pair. <a href=""https://oosnmp.net/confluence/pages/viewpage.action?pageId=3834144"" rel=""nofollow noreferrer"">TLS Traffic Encryption Example</a> | <a href=""http://www.snmp4j.org/doc/index.html"" rel=""nofollow noreferrer"">SNMP4J Documentation</a></p>

<p>Any help would be appreciated.</p>
","<p>I was able to authenticate using a similar method as described in the example <a href=""https://oosnmp.net/confluence/pages/viewpage.action?pageId=3834144"" rel=""nofollow noreferrer"">TLS Traffic Encryption Example</a>.</p>

<p>So as one would expect from the example, I can confirm that SNMP4J uses the keystore set in the Java Property <code>javax.net.ssl.keystore</code>, <code>javax.net.ssl.keyStorePassword</code>, <code>javax.net.ssl.trustStore</code>, and <code>javax.net.ssl.trustStorePassword</code>.</p>

<p>Below are the changes I made to the example to make it work.</p>

<p>The alias (or security name in the documentation) needs to be set in the <code>CertifiedTarget</code> constructor so it knows which certificate to use.</p>

<pre><code> CertifiedTarget ct = new CertifiedTarget(new OctetString(alias));
</code></pre>

<p>The security level must be set or the SNMP agent will complain and fail authentication.</p>

<pre><code> ct.setSecurityLevel(SecurityLevel.AUTH_PRIV);
</code></pre>

<p>The <code>SecurityCallback</code> subject DN must match the server certificate subject EXACTLY the way it wants otherwise it will deny all responses.</p>

<pre><code> securityCallback.addAcceptedSubjectDN(""EMAILADDRESS=admin@net-snmp.org, CN=snmpagent, OU=Development, O=Net-SNMP, L=Davis, ST=CA, C=US"");
</code></pre>

<p>Lastly, you must register the server public certificate alias (Security Name) with the address.</p>

<pre><code> securityCallback.addLocalCertMapping(ct.getAddress(), ""snmpagent"");
</code></pre>

<p>It comes together to look something like this.</p>

<pre><code>// Set java keystore manually
System.setProperty(""javax.net.ssl.keyStore"", KEYSTORE_DIR);
System.setProperty(""javax.net.ssl.keyStorePassword"", ""changeit"");
System.setProperty(""javax.net.ssl.trustStore"", KEYSTORE_DIR);
System.setProperty(""javax.net.ssl.trustStorePassword"", ""changeit"");

// create the TLS transport mapping:
TLSTM transport = new TLSTM();

// set the security callback (only required for command responder,
// but also recommended for command generators) -
// the callback will be configured later:
DefaultTlsTmSecurityCallback securityCallback = new DefaultTlsTmSecurityCallback();
((TLSTM) transport).setSecurityCallback(securityCallback);
MessageDispatcher md = new MessageDispatcherImpl();
// we need MPv3 for TLSTM:
MPv3 mpv3 = new MPv3();
md.addMessageProcessingModel(mpv3);

Snmp snmp = new Snmp(md, transport);

// create and initialize the TransportSecurityModel TSM:
SecurityModels.getInstance().addSecurityModel(new TSM(new OctetString(mpv3.getLocalEngineID()), false));

// do not forget to listen for responses:
snmp.listen();

CertifiedTarget ct = new CertifiedTarget(new OctetString(""alias""));
ct.setVersion(SnmpConstants.version3);
ct.setSecurityModel(SecurityModel.SECURITY_MODEL_TSM);
ct.setAddress(GenericAddress.parse(myAddress));
ct.setSecurityLevel(SecurityLevel.AUTH_PRIV);

securityCallback.addAcceptedSubjectDN(""EMAILADDRESS=admin@net-snmp.org, CN=snmpagent, OU=Development, O=Net-SNMP, L=Davis, ST=CA, C=US"");
securityCallback.addLocalCertMapping(ct.getAddress(), ""snmpagentalias"");

PDU pdu = new ScopedPDU();
pdu.add(new VariableBinding(new OID(someOid)));
pdu.setType(PDU.GET);

ResponseEvent response = snmp.send(pdu, ct);
</code></pre>

<p>You also have to make sure all the certificates are properly configured so that it actually takes them.</p>

<p>As a side-note, in the discovery of this my team and I discovered several bugs in the TLS handling by SNMP4J, mostly in the transport layer. It seems to be a timing issue (race condition maybe?) where it will get the SNMP data but then ignore it. We were able to get around it by setting the <code>CertifiedTarget</code> timeout and retries really high. We will officially report on this when we have more information.</p>
","447","<java><authentication><snmp><encryption-asymmetric><snmp4j>","0","0","1","2017-11-06 11:33:14","44467798","0","","","","","2017-05-19 21:33:07",""
"43501070","Asymmetric encryption between android and php","<p>The following asymmetric functions are used to encrypt and decrypt in android.. it work perfectly. However, when I encrypt using the function below and decrypt using php or another function(which is quite similar using eclipse).. I get null .. bad padding exception .. I cannot figure out the issue .. as i am encoding the result .. and why does it work only if I encrypt and decrypt in android or in eclipse .. but doesn't work between php and android or simply between two java programs .. but on eclipse and android..</p>

<p>Android Program:</p>

<pre><code>public  String encryptAsymmetric(String input, Key key) throws GeneralSecurityException, IOException {
    byte[] crypted = null;
    try{

        Cipher cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        crypted = cipher.doFinal(input.getBytes());
    }catch(Exception e){
        System.out.println(e.toString());
    }//Base64.encodeBase64(crypted)

    return new String(Base64.encode(crypted, Base64.DEFAULT));
}
public  String decryptAsymmetric(String input, Key key){
    byte[] output = null;
    try{

        Cipher cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.DECRYPT_MODE, key);//Base64.decodeBase64(input.getBytes())
        output = cipher.doFinal(Base64.decode(input.getBytes(), Base64.DEFAULT));
    }catch(Exception e){
        System.out.println(e.toString());
    }
    return new String(output);
}
</code></pre>

<p>Eclipse (Java program as well):</p>

<pre><code>public static String encryptAsymmetric(String input, Key key){
      byte[] crypted = null;

      try{

          Cipher cipher = Cipher.getInstance(""RSA"");
          cipher.init(Cipher.ENCRYPT_MODE, key);
          crypted = cipher.doFinal(input.getBytes());
        }catch(Exception e){
            System.out.println(e.toString());
        }//Base64.encodeBase64(crypted)
        return new String(Base64.getEncoder().encode(crypted));
    }
public static String decryptAsymmetric(String input, Key key){
    byte[] output = null;
    try{

      Cipher cipher = Cipher.getInstance(""RSA"");
      cipher.init(Cipher.DECRYPT_MODE, key);//Base64.decodeBase64(input.getBytes())
      output = cipher.doFinal(Base64.getDecoder().decode(input.getBytes()));
    }catch(Exception e){
      System.out.println(e.toString());
    }
    return new String(output);
}
</code></pre>
","<p>As mentioned by @James in the comments input.getBytes and getInstance are not portable.. I changed by code by adding UTf-8 and wrote RSA/ECB/PKCS1Padding instead of RSA and it fixed my problem..</p>

<pre><code> public  String encryptAsymmetric(String input, Key key) throws GeneralSecurityException, IOException {
    byte[] crypted = null;
    try{
        byte[] bytes = input.getBytes(""UTF-8"");
        //String text = new String(bytes, ""UTF-8"");
        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        crypted = cipher.doFinal(bytes);
    }catch(Exception e){
        System.out.println(e.toString());
    }//Base64.encodeBase64(crypted)

    return new String(Base64.encode(crypted, Base64.DEFAULT));
}
public  String decryptAsymmetric(String input, Key key){
    byte[] output = null;
    try{

        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher.init(Cipher.DECRYPT_MODE, key);//Base64.decodeBase64(input.getBytes())
        output = cipher.doFinal(Base64.decode(input.getBytes(""UTf-8""), Base64.DEFAULT));
    }catch(Exception e){
        System.out.println(e.toString());
    }
    return new String(output);
}
</code></pre>
","445","<java><php><android><encryption><encryption-asymmetric>","0","1","1","2017-04-19 17:14:01","","6","3","451475","","2017-04-19 17:14:01","2017-04-19 16:18:07",""
"2850115","how to encrypt the information in iPhone using a 1024-bit asymmetric public/private key scheme?","<p>I want to encrypt some data like  image,sound file or text .is there any tutorial/example available for encryption using a 1024-bit asymmetric public/private key.</p>

<p>please provide any link available for the encryption in iphone..</p>
","<p>Greg Haygood seems to have the only post on the internet that deals with asymmetric encryption on the iPhone. Here's a link to his post which includes most of the code you'd need. <a href=""http://greghaygood.com/2009/01/17/asymmetric-encryption-with-the-iphone-sdk-and-securityframework"" rel=""nofollow"">http://greghaygood.com/2009/01/17/asymmetric-encryption-with-the-iphone-sdk-and-securityframework</a></p>

<p>If anyone has found other solutions or documentation please share.</p>
","442","<iphone><encryption-asymmetric>","2","1","1","2010-10-07 19:10:48","","0","","253056","","2010-05-17 15:03:24","2010-05-17 14:59:11",""
"18077881","use a 512 bit asymmetric encryption key to avoid 'contain encryption' in the app","<p>I have an app that contains a sqlite db with some data is encrypted with a public/private key combination. I generate this pair from the distribution provisional certificate in keychain access (Right click and save as .cer and then again as .p12 with password). </p>

<p>The app is ready to be submitted to apple and I find out that if any encryption is used, I'll have to submit documents for ERN authorization. While reading through the documentation, it mentions that if your key is less than 512 bit for asymmetric encryption, you will be exempt from it.</p>

<p>iii) your app uses, accesses, implements or incorporates encryption with key lengths not exceeding 56 bits symmetric, 512 bits asymmetric and/or 112 bit elliptic curve</p>

<p>(iv) your app is a mass market product with key lengths not exceeding 64 bits symmetric, or if no symmetric algorithms, not exceeding 768 bits asymmetric and/or 128 bits elliptic curve.</p>

<p>Now my problem is if I create a certificate sign request with 512 bit size then I can not create certificate from developer portal with that request.</p>

<p>Is there a way to get around this, other than switching to a symmetric key algorithm? I would like to avoid rewriting that portion. Basically, I would like to create a .cer/.p12 pair using 512 bit encryption instead of the standard 2048. I need something that supports UTF-8. The one I can manually create from mac only supports ASCII.</p>
","<p>if anyone ever is confused about this, i changed it to symmetric key and apple approved the app, didn't have to submit any additional documents.</p>
","432","<iphone><ios><appstore-approval><encryption-asymmetric>","0","0","1","2013-08-10 18:22:26","18165008","0","","910120","","2013-08-06 11:14:10","2013-08-06 10:39:49",""
"15102511","Updating an Assembly with an Asymmetric Key","<p>I have previously created an assembly with VS 2010 and signed it with a key. I ran a script like this below:</p>

<pre><code>USE master; 
GO  

CREATE ASYMMETRIC KEY SQLCLRPSBatch20Key FROM EXECUTABLE FILE = 'C:\Unsafe\MyDLL.dll';   
CREATE LOGIN SQLCLRPSBatch20Login FROM ASYMMETRIC KEY SQLCLRPSBatch20Key;  
GRANT UNSAFE ASSEMBLY TO SQLCLRPSBatch20Login;
GO

use MyDB;
GO

// create assembly script here to install unsafe assembly
</code></pre>

<p>Now do I need to do this and create a new key and login each time I drop the assembly on the DB and reinstall to update it?</p>

<p>When I do that, I get:</p>

<pre><code>Msg 15396, Level 16, State 1, Line 2
An asymmetric key with name 'SQLCLRPSBatch20Key' already exists or this asymmetric key already has been added to the database.
Msg 15151, Level 16, State 1, Line 3
Cannot find the asymmetric key 'SQLCLRPSBatch20Key', because it does not exist or you do not have permission.
Msg 15151, Level 16, State 1, Line 4
Cannot find the login 'SQLCLRPSBatch20Login', because it does not exist or you do not have permission.
</code></pre>

<p>So I guess since the assembly was creating and signed the same way, I just have to install it. Is this correct?</p>
","<p>No. The creating of a login (or, more precisely, a server principal) from the asymmetric key is a way to say ""hey... someone who has the rights to do such a thing probably looked at your CLR code and gave it the thumbs-up"". After the server principal is created, any assemblies signed with the key that backs it will be okay to run.</p>
","432","<sql-server><sql-server-2005><.net-assembly><encryption-asymmetric>","-1","0","1","2013-02-27 03:45:36","15103809","0","","6234","","2013-02-27 01:29:16","2013-02-27 01:16:53",""
"49548556","password encryption techniques and secure key transfer using angularjs and .net","<p>I have an application which uses AngularJs 1.5 as front end and .net framework as a backend.In my application,  I have to store username and password on the database which comes from the front end.The requirement is:</p>

<ol>
<li>AngularJs will encrypt the password and send it to the backend</li>
<li>On the backend, encrypted password will get stored in the database.</li>
<li>In the backend code, there is a place where we have to call a third
party web API and have to pass the username and decrypted form of password
for authentication purpose.</li>
</ol>

<p>Put it in a nutshell, front-end should encrypt the password and backend should have the ability to decrypt it.</p>

<p>I have analyzed many techniques for secure transaction of the password.</p>

<ol>
<li>Hashing: It is the best method to securely transfer a password.But
the problem is, we can't reverse the hashed password to its original form.According to my requirement, I have to reverse the hashed password to its original form since we have to pass the original form of password for authentication to a third party API.</li>
<li>The symmetric algorithm uses the same key for decryption and
encryption.So it is necessary to share the key securely to front end and backend.It is not a good method if we hard code the key value on both sides.</li>
<li>The asymmetric algorithm uses the public and private key for
encryption and decryption respectively.So I think this is much more secure than above two techniques.Since an intruder who has public
key can't decrypt the password.</li>
</ol>

<p>I am new to encryption and decryption handling with <code>angularjs</code>.My query is about key handling.How we can securely store the key both in front-end and backend rather than hardcoding them in the code.Is there any secure way for sharing these keys.Which algorithm is best suited for my requirement?(from my analysis, I found that asymmetric is the better option for this requirement.If I am wrong please correct me).</p>

<p>Thanks in advance for all responses</p>
","<p>Please read this article
<a href=""https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/"" rel=""nofollow noreferrer"">Using a token-based authentication design over cookie-based authentication.</a></p>
","417","<.net><angularjs><encryption-symmetric><encryption-asymmetric><key-management>","1","1","2","2018-07-04 09:06:42","51169875","0","","7357920","","2018-03-29 05:31:51","2018-03-29 05:19:35",""
"49548556","password encryption techniques and secure key transfer using angularjs and .net","<p>I have an application which uses AngularJs 1.5 as front end and .net framework as a backend.In my application,  I have to store username and password on the database which comes from the front end.The requirement is:</p>

<ol>
<li>AngularJs will encrypt the password and send it to the backend</li>
<li>On the backend, encrypted password will get stored in the database.</li>
<li>In the backend code, there is a place where we have to call a third
party web API and have to pass the username and decrypted form of password
for authentication purpose.</li>
</ol>

<p>Put it in a nutshell, front-end should encrypt the password and backend should have the ability to decrypt it.</p>

<p>I have analyzed many techniques for secure transaction of the password.</p>

<ol>
<li>Hashing: It is the best method to securely transfer a password.But
the problem is, we can't reverse the hashed password to its original form.According to my requirement, I have to reverse the hashed password to its original form since we have to pass the original form of password for authentication to a third party API.</li>
<li>The symmetric algorithm uses the same key for decryption and
encryption.So it is necessary to share the key securely to front end and backend.It is not a good method if we hard code the key value on both sides.</li>
<li>The asymmetric algorithm uses the public and private key for
encryption and decryption respectively.So I think this is much more secure than above two techniques.Since an intruder who has public
key can't decrypt the password.</li>
</ol>

<p>I am new to encryption and decryption handling with <code>angularjs</code>.My query is about key handling.How we can securely store the key both in front-end and backend rather than hardcoding them in the code.Is there any secure way for sharing these keys.Which algorithm is best suited for my requirement?(from my analysis, I found that asymmetric is the better option for this requirement.If I am wrong please correct me).</p>

<p>Thanks in advance for all responses</p>
","<p>Not sure if this is still relevant to you, but here comes. These are quite high level and broad questions you are asking, so I'm providing you some general guidance.</p>

<p>I would definitely use asymmetric encryption for this. I'd most likely pick something like RSA OAEP which produces different cipher text on the same input each time thanks to the random padding. This way an attacker won't learn that much from the cipher text that he could manage to intercept.</p>

<p>The key exchange is a trickier topic as your end-user software most likely runs in a browser (being an Angular app). One way to handle this could be to wrap your public key in a certificate that can be verified in the browser.</p>

<p>There are also many other attacks and aspects you need to consider. For example how to protect your system against replay attacks and how to rotate your keys while still meeting your availability requirements. Covering all topics in this answer is not possible them to being too broad, so I leave it here.</p>
","417","<.net><angularjs><encryption-symmetric><encryption-asymmetric><key-management>","1","0","2","2018-07-04 09:06:42","51169875","0","","7357920","","2018-03-29 05:31:51","2018-03-29 05:19:35",""
"39962632","Error ""InvalidCipherTextException: data start wrong 64"" with Bouncy Castle","<p>I am encrypting and decrypting some Data using BouncyCastle, but when the lenght of the word is too long (i don´t know exactly the value), i got this error ""InvalidCipherTextException: data start wrong 64""</p>

<p>This is my Class of Encription:</p>

<pre><code>public static class Crypto
    {
        public static IAsymmetricBlockCipher CriarCipher(byte[] encodingParam)
        {
            // Creating the RSA algorithm object
            IAsymmetricBlockCipher cipher = new OaepEncoding(new RsaEngine(), new Sha256Digest(), encodingParam);

            return cipher;
        }

        public static AsymmetricCipherKeyPair CreatePair()
        {
            RsaKeyPairGenerator rsaKeyPairGnr = new RsaKeyPairGenerator();
            rsaKeyPairGnr.Init(new KeyGenerationParameters(new SecureRandom(), 1024));
            AsymmetricCipherKeyPair keyPair = rsaKeyPairGnr.GenerateKeyPair();

            return keyPair;
        }

        public static byte[] Encriptar(RsaKeyParameters publicKey, string texto, byte[] encodingParam)
        {
            // Creating the RSA algorithm object
            IAsymmetricBlockCipher cipher = new OaepEncoding(new RsaEngine(), new Sha256Digest(), encodingParam);
            var palavrabyte = Encoding.UTF8.GetBytes(texto);
             // Initializing the RSA object for Encryption with RSA public key. Remember, for encryption, public key is needed
            cipher.Init(true, publicKey);
            byte[] ciphered = cipher.ProcessBlock(palavrabyte, 0, palavrabyte.Length);

            return ciphered;
        }

        public static string Decriptar(RsaKeyParameters privateKey, string txtEncript, byte[] encodingParam)
        {
            // Creating the RSA algorithm object
            IAsymmetricBlockCipher cipher = new OaepEncoding(new RsaEngine(), new Sha256Digest(), encodingParam);
            // Initializing the RSA object for Encryption with RSA public key. Remember, for encryption, public key is needed
            cipher.Init(false, privateKey);
            byte[] txtEncriptBytes = Convert.FromBase64String(txtEncript);
            byte[] deciphered = cipher.ProcessBlock(txtEncriptBytes, 0, txtEncriptBytes.Length);
            string decipheredText = Encoding.UTF8.GetString(deciphered, 0, deciphered.Length);

            return decipheredText;
        }

    }
</code></pre>

<p>This is the code for OAEPE Encoding:</p>

<pre><code>SHA256Managed Hash = new SHA256Managed();
byte[] ParamOEAP = Hash.ComputeHash(""Example"" + anotherdata);
</code></pre>

<p>And the class SHA256Managed:</p>

<pre><code>public class SHA256Managed
    {
        public byte[] ComputeHash(string text)
        {
           Sha256Digest dig = new Sha256Digest();
           byte[] msgBytes = Encoding.UTF8.GetBytes(text);
           dig.BlockUpdate(msgBytes, 0, msgBytes.Length);
           byte[] result = new byte[dig.GetDigestSize()];
           dig.DoFinal(result, 0);

           return result;            
        }
    }
</code></pre>

<p>When i encrypt the word, per example, ""Subtracão de Incapazes"", the decryption its ok.</p>

<p>When i encrypt the word, per example, ""Estelionato por Emissão de Cheque sem Suficiente Provisão de Fundos"", the decryption brokes in the Decriptar codeline: </p>

<pre><code>byte[] deciphered = cipher.ProcessBlock(txtEncriptBytes, 0, txtEncriptBytes.Length);
</code></pre>

<p>What i am doing wrong ?</p>
","<p>Changing on CreatePair the line:
rsaKeyPairGnr.Init(new KeyGenerationParameters(new SecureRandom(), 2048))</p>

<p>From 1024 to 2048 !! Now, big phrases are decrypted.</p>
","415","<c#><encryption><bouncycastle><encryption-asymmetric>","0","0","1","2016-10-11 18:13:19","39983905","0","","6927332","","2016-10-10 20:36:03","2016-10-10 16:22:44",""
"36825987","Browser encrypting Server decrypting","<p>In the browser on the client I encrypt a rand_key variable using jsencrypt.js and a public key.
The encrypted key is send via the body in a mail to the server. (This is the only way within my reach given the IT structure.)
In my browser I have:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=""en""&gt;
&lt;head&gt;
    &lt;script type=""application/javascript"" src=""jsencrypt.js""&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script&gt;
    var pubkey = ""MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALDjeFwFNhMCjMwcRVVKG1VvfsntEVPR3lNTujJnNk1+iSqZ4Tl5Lwq9GbwO+qlYVwXHNmeqG7rkEhL9uyDIZVECAwEAAQ==""
    var rand_key = 'vpeq91mckhntgldi';
    // Encrypt rand_key
    var encrypt = new JSEncrypt();
    //console.log('encrypt obj', encrypt);
    encrypt.setPublicKey(pubkey);
    var encrypted_rand_key = encrypt.encrypt(rand_key, 'base64');
    console.log('encrypted_rand_key', encrypted_rand_key);
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>On my PC running node (where I receive the email):</p>

<pre><code>var CryptoJS = require(""crypto-js"");
// encrypted string copied from browser console
var encrypted = 'IuRaUfDHDIJsO0JZbEj7RS/1Sw0iSZPB267MN9lmF5Fn/kuMMRyKlAjplwvUJ9qvirajOcAQNnRZs9A+gVcWLQ=='
IuRaUfDHDIJsO0JZbEj7RS/1Sw0iSZPB267MN9lmF5Fn/kuMMRyKlAjplwvUJ9qvirajOcAQNnRZs9A+gVcWLQ==

var key_pri = new NodeRSA('-----BEGIN RSA PRIVATE KEY-----MIIBPAIBAAJBALDjeFwFNhMCjMwcRVVKG1VvfsntEVPR3lNTujJnNk1+iSqZ4Tl5Lwq9GbwO+qlYVwXHNmeqG7rkEhL9uyDIZVECAwEAAQJBAIS8vYX4FyLex/8mu9SLvsU23KL0dgs7MqW+77uA/hvZt5eb/C0EfUekap3LBuAF3XqVkOwIjsDyj74adrB6J1ECIQDfxT74mqu+xZjdlrfNZcchu/MrrW631aMF4rsRZccTbQIhAMpdneTSAATCwE8vt4bS6BBnv8Y8ZceNO6wGOvcW30b1AiAY2MEGP75kP3Ka4Dpmfy+eSk1VAzvxA7LHW4akBuYU/QIhAMk7gtGSCjaxuy6DUssdW2tE4C0uzj87sIUFxQkEk48pAiEAkHxKin7tcB4pVU2yurSbGkB+TbaCOfkIzR4griXq00k=-----END RSA PRIVATE KEY-----');

var decrypted = key_pri.decrypt(encrypted, 'utf8');
console.log('decrypted: ', decrypted);
</code></pre>

<p>Unfortunately I get an error message:</p>

<pre><code>Error: Error during decryption (probably incorrect key). Original error: Error: error:040A1079:rsa routines:RSA_padding_check_PKCS1_OAEP_mgf1:oaep decoding error
</code></pre>

<p>How can I fix the decription on the server (pc) side ?
Thanks !</p>
","<p>The error gives you the information that the padding is wrong. JSencrypt is based on JSBN and only supports PKCS#1 v1.5 padding, but not OAEP. You have to configure <code>NodeRSA</code> to use the appropriate padding:</p>

<pre><code>var key_pri = new NodeRSA(privateKeyString, {
    encryptionScheme: 'pkcs1'
});
</code></pre>

<p>Then, you're passing a Base64-encoded string to <code>key_pri.decrypt</code>, but it expects the actual data as a Buffer, so you first need to parse that:</p>

<pre><code>var decrypted = key_pri.decrypt(new Buffer(encrypted, 'base64'), 'utf8');
</code></pre>
","414","<javascript><node.js><encryption><encryption-asymmetric>","0","0","1","2016-04-24 17:54:18","36826815","0","","1816580","","2016-04-24 17:45:50","2016-04-24 16:41:42",""
"2882651","Best Practice for Sensitive User Information Storage on Remote Service","<p>We have a desktop and mobile application that is used to access many third party services. 
These services have some potentially sensitive information - eg Authentication tokens, and in some cases plaintext usernames/passwords. </p>

<p>We want to provide a service to synchronise their settings across multiple computers and devices. That is - they sign into a service we provide, and then that information is synchronised across wherever they're signed in. </p>

<p>We have no way to force the third party applications to stop using plaintext passwords. </p>

<p>There are a few approaches we have considered:</p>

<ol>
<li><p>Don't ever send passwords or authentication tokens up. </p>

<p>When a user signs in on a new device, they'll need to re-enter/authenticate the device for each third party service. </p>

<p>Advantage: Secure, no risk of password/token compromise.<br>
Disadvantage: Difficult for users. </p></li>
<li><p>Encrypt the sensitive information using a client-certificate or hardware token. </p>

<p>When a user wants to sign in, they provide the certificate/hardware token. </p>

<p>Advantage: Very secure.<br>
Disadvantage: Huge barrier to entry, difficult to impossible for not-for-profit app to implement. </p></li>
<li><p>Encrypt the sensitive information using a password that the user provides</p>

<p>When a user signs in on a new device, they'll be prompted to provide a password.<br>
If the password is incorrect, they need to re-enter/authenticate all the other devices. </p>

<p>Advantage: Secure, if the user provides a strong password.<br>
Disadvantage: If a user resets their password, they need to re-auth the device for all the third-party applications. </p></li>
<li><p>Encrypt the sensitive information on our servers.</p>

<p>Advantage: Easy for users.<br>
Disadvantage: Only marginally more work than plaintext for anyone that grabs the settings tables. </p></li>
<li><p>Don't bother encrypting anything. (Plaintext storage) </p>

<p>Advantage: Easy for users.<br>
Disadvantage: Easy for anyone that grabs our DB to get all the user's passwords/auth-tokens. </p></li>
</ol>

<p>My question is: <em>Is there a better approach that we have not yet considered?</em></p>
","<p>OK this is a multifaceted question.  You have to consider both the security of the information as it is being transmitted across the Internet as well as when it is on your servers. </p>

<p>With regard to case 1, of course it is good not to risk the exposure of passwords, but the application you've created is meant to be convenient for users.  IF done correctly, the information can be passed  securely without risk of exposure.  However, that in mind, implementing cryptography correctly is not a feat that should be taken lightly.  In fact, when I say that you should never implement your own cryptography, but use existing time-tested cryptographic libraries paying attention to use them correctly.</p>

<p>As for bullet number two, while you are correct that you should not implement the cryptography yourself, there are many programs and libraries for generating public and private keys and using them to secure information.</p>

<p>You 100 percent need to encrypt the information stored in your database.  Every server is insecure given enough time/motivation.  Encrypted information however, is possible of being computationally infeasible of decrypting without the appropriate information.</p>
","413","<security><encryption-asymmetric>","2","0","1","2012-01-17 18:09:16","","0","","372643","","2012-01-17 12:36:07","2010-05-21 13:55:59",""
"26221413","Public Key Integrity - Man in the middle attack","<p>I want to license my product.
The question is about validation and making sure that public key is not changed so is the certificate (Man in the middle attack).</p>

<p>What I have planned so far is;</p>

<ol>
<li>I give my EXE with license key and signed certificate (signed with private key) to the customer.</li>
<li>when customer enters license key, my EXE will validate it using public key (generating hash code, then decrypting certificate to get other hash code and compare)</li>
</ol>

<p>Now problem is; if someone reverse engineers the EXE, changes the public key with his own public key and get a new certificate generated with his own private key. Then the EXE will always validate the certificate and my EXE is hacked.</p>

<p>Is this possible? If yes, what could be the solution to be sure my public key is not changed?</p>

<p>NOTE: There is no internet connection involved.</p>
","<p>To ensure integrity of something (executable, for example), sign it (or critical parts of it) with private key and check that the signature is valid every time you start the application.</p>

<p>Someone with enough time could of course figure out how the signature is done and replace that as well. They could bypass the check altogether. The only cure for that is encryption. But someone with enough time could work out the decryption algorithm...</p>

<p>The common way is to protect your license is to bind the software to some hardware, such as USB dongle, TPM or HDD serial number. This still does not guarantee that a determined hacker will not bypass your licensing.</p>

<p>There is no 100% protection against hackers. All you have to do is make it uneconomical for your users to hack it. Make the effort to hack a good deal more expensive than you are charging for the product. Make licensing terms very explicit and warn about risk of prosecution in case of breach. Build in reporting mechanism for suspected breaches so you can go after them.</p>
","412","<c++><c++builder><public-key-encryption><encryption-asymmetric>","0","1","1","2014-10-06 17:33:23","","1","","","","","2014-10-06 17:21:21",""
"44305299","Export CngKey in PKCS8 with encryption c#","<p>How can I export CngKey to PKCS#8 with encryption?</p>

<pre><code>static void Main(string[] args)
    {
        CngKeyCreationParameters ckcParams = new CngKeyCreationParameters()
        {
            ExportPolicy = CngExportPolicies.AllowExport,
            KeyCreationOptions = CngKeyCreationOptions.None,
            KeyUsage = CngKeyUsages.AllUsages,                
        };
        ckcParams.Parameters.Add(new CngProperty(""Length"", BitConverter.GetBytes(2048), CngPropertyOptions.None));

        myCngKey = CngKey.Create(CngAlgorithm.Rsa, ""theCngKey"", ckcParams);

        byte[] privatePlainTextBlob = myCngKey.Export(CngKeyBlobFormat.Pkcs8PrivateBlob);
 }
</code></pre>

<p>Setting the ExportPolicy to AllowPlainTextExport allows the key to be exported, but only in plain text. I would like to create a PCKS8 blob which is encrypted with a symmetric key.</p>

<p>Thanks</p>
","<p>Since <code>CngKey.Export</code> doesn't accept a password, you'd have to manually P/Invoke to <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa376263(v=vs.85).aspx"" rel=""nofollow noreferrer"">NCryptExportKey</a>, providing a NCRYPTBUFFER_PKCS_SECRET value (Unicode/UCS-2 encoded password with explicit null terminator).</p>

<p><a href=""http://source.dot.net/#System.Security.Cryptography.Cng/Common/System/Security/Cryptography/ECCng.ImportExport.cs,8b172741466df7a1"" rel=""nofollow noreferrer"">http://source.dot.net/#System.Security.Cryptography.Cng/Common/System/Security/Cryptography/ECCng.ImportExport.cs,8b172741466df7a1</a> can be used as an example of building the parameter list.  It's not fun.</p>
","388","<c#><encryption><encryption-asymmetric><cng>","1","1","1","2017-06-02 03:15:33","","0","","","","","2017-06-01 10:38:23",""
"14506676","PKI Protected Web Service. Getting HTTP 413: Request entity too large","<p>I have been trying to implement a secure way to authenticate web servers which are calling a .Net SOAP based web service via security certificates.   </p>

<p>I have setup a certificate authority on the receiving server, allowing me to issue a certificate that we have installed on the receiving server and on the calling server. I have also added this certificate authority as a trusted authority on the calling server's  certificate root store. </p>

<p>The problem I am having right now is that when I set IIS to ""require"" a certificate, I can only send a small dataset, 25 rows at a time, with about 25 fields per row, maybe 100 chars long each. The data I am sending is already encrypted with a symmetric key. When I remove the requirement for a client certificate the amount of data I can send becomes about 25000 rows. When do this with the client certificate ""required"", I get</p>

<blockquote>
  <p>HTTP 413: Request entity too large </p>
</blockquote>

<p>My best guess is that the requirement turns on asymmetric encryption both ways, making the amount of data grow exponentially. I have tried modifying the web.config, specifically </p>

<pre><code>&lt;httpRuntime targetFramework=""4.5""  maxRequestLength=""20000000"" executionTimeout=""3600"" /&gt;
</code></pre>

<p>but this seems to have no effect, even when sending 50 rows in a dataset.</p>

<p>I would also like to add </p>

<pre><code>maxBufferPoolSize=""2147483647"" maxReceivedMessageSize=""2147483647"" maxBufferSize=""100000""
</code></pre>

<p>but I am not sure where it goes.</p>

<p>I send the client certificate using </p>

<pre><code>Dim S as new webmethodname.webmethod
Dim x509 As X509Certificate = X509Certificate.CreateFromCertFile(""filelocation"")
            s.ClientCertificates.Add(x509)
</code></pre>

<p>The two solutions I can think of are</p>

<ol>
<li>Raise the data limit even more or find the field limit that’s
stopping me     </li>
<li>Send smaller batches at a time.</li>
<li>Abandon use of client certificates for this purpose and seek another solution.</li>
</ol>

<p>Any advice on the proper way to do this, or information on what exactly is happening behind the scenes from server to server using SSL and PKI would be appreciated.</p>
","","382","<.net><web-services><pki><encryption-asymmetric><client-certificates>","2","","0","2013-01-24 20:01:13","","2","1","1981479","","2013-01-24 20:01:13","2013-01-24 16:59:57",""
"24339608","Invalid Cipher bytes in Encryption method in Android using RSA","<p>We are facing an issue while trying to Encrypt data in Android and Decrypt it in a WCF Service. The Android code to encrypt data is as follows:</p>

<pre><code>try{
String strModulus = ""tr82UfeGetV7yBKcOPjFTWs7pHqqr/5YKKWMUZ/HG4HnCmWrZsOhuR1FBnMZ/g2YiosoSlu0zd7Ukz9lX7wv2RLfWXfMvZYGpAAvfYWwzbyQ2i1q+tKE/thgKNscoSRellDD+uJcYn1H4hnaudVyYJH9miVhOKhKlExMzw8an6U="";
String strExponent = ""AQAB"";
byte[] modulusBytes = Base64.decode(strModulus, Base64.DEFAULT);
byte[] exponentBytes = Base64.decode(strExponent, Base64.DEFAULT);

BigInteger modulus = new BigInteger(1, modulusBytes );               
BigInteger exponent = new BigInteger(1, exponentBytes);

RSAPublicKeySpec rsaPubKey = new RSAPublicKeySpec(modulus, exponent);
KeyFactory fact = KeyFactory.getInstance(""RSA/ECB/PKCS1Padding"");
PublicKey pubKey = fact.generatePublic(rsaPubKey);    

Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
cipher.init(Cipher.ENCRYPT_MODE, pubKey);   

byte[] plainBytes = new String(""Manchester United"").getBytes(""UTF-8"");
byte[] cipherData = cipher.doFinal(plainBytes); 
encryptedString = Base64.encodeToString(cipherData, Base64.DEFAULT);
}
catch(Exception e){
Log.e(""Error"", e.toString());
}

return encryptedString;
</code></pre>

<p>The same code in Java:</p>

<pre><code>try{
        String strModulus = ""tr82UfeGetV7yBKcOPjFTWs7pHqqr/5YKKWMUZHG4HnCmWrZsOhuR1FBnMZ/g2YiosoSlu0zd7Ukz9lX7wv2RLfWXfMvZYGpAAvfYWwzbyQ2i1q+tKE/thgKNscoSRellDD+uJcYn1H4hnaudVyYJH9miVhOKhKlExMzw8an6U="";
        String strExponent = ""AQAB"";
        byte[] modulusBytes = DatatypeConverter.parseBase64Binary(""tr82UfeGetV7yBKcOPjFTWs7pHqqr/5YKKWMUZ/HG4HnCmWrZsOhuR1FBnMZ/g2YiosoSlu0zd7Ukz9lX7wv2RLfWXfMvZYGpAAvfYWwzbyQ2i1q+tKE/thgKNscoSRellDD+uJcYn1H4hnaudVyYJH9miVhOKhKlExMzw8an6U="");
        byte[] exponentBytes = DatatypeConverter.parseBase64Binary(""AQAB"");

        BigInteger modulus = new BigInteger(1, modulusBytes );
        BigInteger exponent = new BigInteger(1, exponentBytes);

        RSAPublicKeySpec rsaPubKey = new RSAPublicKeySpec(modulus, exponent);
        KeyFactory fact = KeyFactory.getInstance(""RSA"");
        PublicKey pubKey = fact.generatePublic(rsaPubKey);

        Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher.init(Cipher.ENCRYPT_MODE, pubKey);

        byte[] plainBytes = new String(""Manchester United"").getBytes(""UTF-8"");
        byte[] cipherData = cipher.doFinal(plainBytes);
        //String encryptedString = Base64.encodeToString(cipherData, Base64.NO_PADDING);
        String encryptedString = DatatypeConverter.printBase64Binary(cipherData);
        String encryptedData = encryptedString;
    }
    catch(Exception e){
    }       
}
</code></pre>

<p>WCF Service:</p>

<blockquote>
<pre><code>public string Decrypt()
{
    const int PROVIDER_RSA_FULL = 1;
    const string CONTAINER_NAME = ""Tracker"";
    CspParameters cspParams;
    cspParams = new CspParameters(PROVIDER_RSA_FULL);
    cspParams.KeyContainerName = CONTAINER_NAME;
    RSACryptoServiceProvider rsa1 = new RSACryptoServiceProvider(cspParams);
    rsa1.FromXmlString(""&lt;RSAKeyValue&gt;&lt;Modulus&gt;tr82UfeGetV7yBKcOPjFTWs7pHqqr/5YKKWMUZ/HG4HnCmWrZsOhuR1FBnMZ/g2YiosoSlu0zd7Ukz9lX7wv2RLfWXfMvZYGpAAvfYWwzbyQ2i1q+tKE/thgKNscoSRellDD+uJcYn1H4hnaudVyYJH9miVhOKhKlExMzw8an6U=&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;P&gt;6e0nv7EBFBugtpoB+ozpg1J4js8E+DVyWCuBsERBPzqu4H7Z/oeLIRSC8Gi5GZgrCpBf3EvyIluM7rzaIfNThQ==&lt;/P&gt;&lt;Q&gt;x/29X9ns1WcXC42IJjLDjscz5ygdVh79dm8B2tQVbqwyhDsQ6OIOQdu5+eHf4hUMoTrM9KkS2F6FGlLXuaOFoQ==&lt;/Q&gt;&lt;DP&gt;kTS2LMaJ/dpce5zDx6w6s1q5HSSiWBSNIu/2s9zah448yXvUg6vNkD40PVk0NRAA/7C44H2AExWzOOqfmN17JQ==&lt;/DP&gt;&lt;DQ&gt;xtAx9drQPWnpl/uQUOEAVa0kpPTVDStrr9Q1FNTnpYkcAyYw7kLkB4anAIoSpk9kqdeprsNxz5VPXtbiTFMKYQ==&lt;/DQ&gt;&lt;InverseQ&gt;O0594NMjnjSp+/NAa1kQxoQNzn1qqq+p1Zb+kT3/jRc/0d7ZnqSSpxFMXfxx3yZkNAOPDOdbckPQbRZ13RKBHg==&lt;/InverseQ&gt;&lt;D&gt;bjVEagwvkrZaTt9CTW1hd3362weLFlX6DpE/3R3RcrpVfkSwKGpEhqGrNeeGPlsuqiaf5rAFir4eTqrF1QVliKsU4XE0RyzP5lHGc7dlX4DOHMjs2R9nNWv8QOTPoaRuLrLGorqBXlw/jQPxFI6gQzkIIjzuf//lDVnFam3dw4E=&lt;/D&gt;&lt;/RSAKeyValue&gt;"");
    string data2Decrypt = ""LyVNDhkdJ5jNgwZDiVZ1R0lmd10AQgqNDFHh2vJB1676eg8wj0MOdTyChAGrvEjha0uXg+f/aNBAc4+/LFbCgsA1e+O3wnXr27sXznGJ9G15avZzQHG4JWUS42MXBahAkcJ80pcihTbL9edfQCkEuj9RzQ/zFJyDEMssfd/EPDM="";
    byte[] encyrptedBytes = Convert.FromBase64String(data2Decrypt);
    byte[] plain = rsa1.Decrypt(encyrptedBytes, false);
    string decryptedString = System.Text.Encoding.UTF8.GetString(plain);
}
</code></pre>
</blockquote>

<p>Original Data : 'Manchester United'</p>

<p>The strange thing is that if I encrypt a string with the Java code it can be decrypted at the WCF service end, however, if it is encrypted using the above Android code, the decryption provides the error: ""The data to be decrypted exceeds the maximum for this modulus of 128 bytes"".</p>

<p>On debugging, I realized that the <code>byte[] cipherData</code> is not the same for Android and Java. All the previous values happen to be in sync. This generates different Encrypted Strings in Java and Android.</p>

<p>My question is why does this happen? Is there a silly mistake? Is there a way to work around it? Or something else that can be done in Android to get the 'Cipher Data' right?</p>

<p>Any help will be appreciated.</p>
","<p>You are using a different padding on Android. Use the exact same padding on Android as well:</p>

<pre><code>Cipher cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
</code></pre>
","374","<java><android><base64><rsa><encryption-asymmetric>","0","0","1","2014-06-24 04:54:27","","2","4","3659942","","2014-06-24 04:54:27","2014-06-21 07:57:42",""
"8667334","Protect public RSA key during transit","<p>*<em>Clarification: My question relates to setting up a ""secure"" communication channel between two parties where a key (read passphrase) has been agreed upon in the real world. Only using RSA allows for MITM-attacks  (if I'm not misstaken), so I was thinking encrypting the public keys with AES (the key that both have agreed upon) before sending them to respective parties *</em></p>

<p>I'm currently trying to build two applications that talks with eachother. To secure the exchanged messages I was thinking on using RSA where each application has it's own set of keys.</p>

<p>Before communication is started between the two applications they do need to exchange keys. That shouldn't be a problem but I was thinking on using AES to encrypt the public keys before sending them over the internet.</p>

<p>I know what the word public (as in public key) means but I was thinking that this would see to that the right application/computer gets the key and no one else. </p>

<p>So I want to exchange keys and to protect them from MITM attacks.</p>

<p>If anybody could give a better suggestion (I'm using the LibCrypto library btw), I'm all ears.</p>

<p>Thank you.</p>

<p>Best regards
/Tomas Gustavsson</p>
","<p>This question shows many misconceptions from your part.</p>

<blockquote>
  <p>I know what the word public (as in public key) means but I was
  thinking that this would see to that the right application/computer
  gets the key and no one else.</p>
</blockquote>

<p>I think this is the real problem you have and ask.<br>
Which I think is: How can you know that you are using the public key of the entity you actually want to communicate with and not the public key of a malicious entity claiming to be the who you want to communicate with?  </p>

<p>This problem is solved in a typical installation by certificates signed by a trusted authority <strong>and issued to the specific entity</strong> i.e. IP or DNS name.  </p>

<p>In your case you haven't given any details of your certificates.  </p>

<p>You could just as well manually pre-install them and use them for your secure connections.  </p>

<p>If you follow some other plan e.g. symmetric encryption then your would start asking other questions e.g. how do you securely share the secret key etc</p>
","370","<encryption><rsa><aes><public-key-encryption><encryption-asymmetric>","0","1","1","2011-12-29 13:16:39","","3","","1121036","","2011-12-29 13:16:39","2011-12-29 11:32:47",""
"21755614","HOW to Sign data in C# in wp8","<p>I am developing wp8 app. I send public key to server in 1st login request.In response server sends token (its simple base64 string with around 1200-1300 characters) which I need to sign with private key and send back to server in next request.Now server verifies that token with corresponding public key I sent in 1st request. I have working java code which does above thing.</p>

<pre><code>String privateKey = sharedPref.getString(""privateKey"", """");

byte [] decoded = Base64.decode(privateKey, Base64.NO_WRAP);

KeyFactory kf = KeyFactory.getInstance(""RSA"");
PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decoded);
PrivateKey privateKeyNew = kf.generatePrivate(keySpec);

String tokenSp = sharedPref.getString(""token"", """");
byte[] tokenBytes = tokenSp.getBytes();
Signature dsa = Signature.getInstance(""SHA1withRSA"");
dsa.initSign(privateKeyNew);
dsa.update(tokenBytes);
byte[] signedData = dsa.sign();

ByteArrayOutputStream baos = new ByteArrayOutputStream();
baos.write(tokenBytes);
baos.write(signedData);

byte[] finalout = baos.toByteArray();
signedToken = new String(Base64.encode(finalout, 0, finalout.length, Base64.NO_WRAP)); 
</code></pre>

<p>I want achieve same in c#. Code I have written is :</p>

<pre><code>UnicodeEncoding ByteConverter = new UnicodeEncoding();

CspParameters parameters = new CspParameters();
parameters.KeyContainerName = ""MyContainer"";
RSACryptoServiceProvider obj = new RSACryptoServiceProvider(parameters);

byte[] dataToEncrypt=ByteConverter.GetBytes(s[0]);
byte[] SignedData=obj.SignData(dataToEncrypt, ""SHA256"");

MemoryStream stream = new MemoryStream();
stream.Write(dataToEncrypt,0,dataToEncrypt.Count());
stream.Write(SignedData,0,SignedData.Count());

byte[] finalBytesToSend = stream.ToArray();

string s2 = Convert.ToBase64String(finalBytesToSend);
return s2;    
</code></pre>

<p>And to server I send ""SHA256"" as public key to verify.Is it correct what I have done in c#?</p>
","<p>I believe what you need is something like below. You may need to examine <code>publicKeyXml</code> and work a little about the format.</p>

<pre><code>// create a RSA provider with a 1024 bits key
using(RSACryptoServiceProvider rsaProv = new RSACryptoServiceProvider(1024))
{
    // export public key and send it to server to obtain base64 token
    string publicKeyXml = rsaProv.ToXmlString(false);
    string base64TokenFromServer = GetTokenFromServer(publicKeyXml);

    // decode base64 token
    byte[] tokenBytes = Convert.FromBase64String(base64TokenFromServer);

    // sign token bytes using RSA provider's private key and SHA1
    byte[] tokenSignatureBytes;
    using (var ms = new MemoryStream(tokenBytes))
    {
        tokenSignatureBytes = rsaProv.SignData(ms, SHA1.Create());
    }

    // concat token bytes and signature bytes
    byte[] finalOut;
    using (var ms = new MemoryStream())
    {
        ms.Write(tokenBytes, 0, tokenBytes.Length);
        ms.Write(tokenSignatureBytes, 0, tokenSignatureBytes.Length);
        ms.Flush();
        finalOut = ms.ToArray();
    }

    // encode final out to base64
    string signedToken = Convert.ToBase64String(finalOut);
}
</code></pre>
","368","<c#><java><windows-phone-8><rsa><encryption-asymmetric>","0","0","1","2014-02-13 14:13:40","","0","","554397","","2014-02-13 13:38:48","2014-02-13 13:26:37",""
"5475963","Securing client side code","<p>I'm in the process of developing an application that uses client side code (js to be specific), which needs to be secured. I.e. so that a user cannot steal the code and reuse it. Obfuscation is not an option, as I need the code to be fully secured (with encryption). After extensively scouring the internet for a solution that allows js encryption I have come come to the conclusion that this proprietary code can only be executed server side to ensure its security. </p>

<p>Does any one have any other ideas or solutions, that would relieve the server from having to process things that otherwise could be done on the client with js. Executing some of the code on the server is an option, but resources are limited. Another issue is that it would need to be something like ""server side js"" i.e. the user experience is not changed.</p>
","<p>If the code is client side, they have the code. Period. That's how the internet works.</p>

<p>If you want to protect it from the end-user, then yes, you need to keep that on the server side. Alas, that will change the user experience. There really isn't a way around that, though perhaps via judicious AJAX calls you can find a happy medium. </p>
","361","<java><javascript><encryption><encryption-asymmetric>","1","2","5","2011-03-29 16:49:18","5476027","4","","","","","2011-03-29 16:42:53",""
"5475963","Securing client side code","<p>I'm in the process of developing an application that uses client side code (js to be specific), which needs to be secured. I.e. so that a user cannot steal the code and reuse it. Obfuscation is not an option, as I need the code to be fully secured (with encryption). After extensively scouring the internet for a solution that allows js encryption I have come come to the conclusion that this proprietary code can only be executed server side to ensure its security. </p>

<p>Does any one have any other ideas or solutions, that would relieve the server from having to process things that otherwise could be done on the client with js. Executing some of the code on the server is an option, but resources are limited. Another issue is that it would need to be something like ""server side js"" i.e. the user experience is not changed.</p>
","<p>You could encrypt your javascript and then decrypt&amp;eval it on the client side. If it´s a private application, you could use a password for the encryption, so anyone without password could not decrypt it. Otherwise you should make it really complex.</p>
","361","<java><javascript><encryption><encryption-asymmetric>","1","0","5","2011-03-29 16:49:18","5476027","4","","","","","2011-03-29 16:42:53",""
"5475963","Securing client side code","<p>I'm in the process of developing an application that uses client side code (js to be specific), which needs to be secured. I.e. so that a user cannot steal the code and reuse it. Obfuscation is not an option, as I need the code to be fully secured (with encryption). After extensively scouring the internet for a solution that allows js encryption I have come come to the conclusion that this proprietary code can only be executed server side to ensure its security. </p>

<p>Does any one have any other ideas or solutions, that would relieve the server from having to process things that otherwise could be done on the client with js. Executing some of the code on the server is an option, but resources are limited. Another issue is that it would need to be something like ""server side js"" i.e. the user experience is not changed.</p>
","<p>Nope, it sounds like you've pretty much got the gist of things. Use the server to process anything that needs to be done securely. Use javascript to display the data sent from the server.</p>

<p>I don't know what application you're working on, but typically efforts to offload significant processing onto the client side involve so much data transfer that the server has to do more work in the long run. Can I ask what kind of processing you're wanting to do client-side?</p>
","361","<java><javascript><encryption><encryption-asymmetric>","1","2","5","2011-03-29 16:49:18","5476027","4","","","","","2011-03-29 16:42:53",""
"5475963","Securing client side code","<p>I'm in the process of developing an application that uses client side code (js to be specific), which needs to be secured. I.e. so that a user cannot steal the code and reuse it. Obfuscation is not an option, as I need the code to be fully secured (with encryption). After extensively scouring the internet for a solution that allows js encryption I have come come to the conclusion that this proprietary code can only be executed server side to ensure its security. </p>

<p>Does any one have any other ideas or solutions, that would relieve the server from having to process things that otherwise could be done on the client with js. Executing some of the code on the server is an option, but resources are limited. Another issue is that it would need to be something like ""server side js"" i.e. the user experience is not changed.</p>
","<p>Apart from standard JS obfuscation which is discussed e.g. here: <a href=""https://stackoverflow.com/questions/2285593/how-to-sell-and-protect-software-that-has-easily-visible-source-like-javascript"">https://stackoverflow.com/questions/2285593/how-to-sell-and-protect-software-that-has-easily-visible-source-like-javascript</a>
 this is close to impossible to do. </p>

<p>I would tend to question whether there really is a need to protect the client side code in the first place. What makes it so unique that this is necessary? Any kind of sensitive data manipulation should be done on the server side anyway, as every obfuscation method will always be only imperfect protection.</p>
","361","<java><javascript><encryption><encryption-asymmetric>","1","0","5","2011-03-29 16:49:18","5476027","4","","","","","2011-03-29 16:42:53",""
"5475963","Securing client side code","<p>I'm in the process of developing an application that uses client side code (js to be specific), which needs to be secured. I.e. so that a user cannot steal the code and reuse it. Obfuscation is not an option, as I need the code to be fully secured (with encryption). After extensively scouring the internet for a solution that allows js encryption I have come come to the conclusion that this proprietary code can only be executed server side to ensure its security. </p>

<p>Does any one have any other ideas or solutions, that would relieve the server from having to process things that otherwise could be done on the client with js. Executing some of the code on the server is an option, but resources are limited. Another issue is that it would need to be something like ""server side js"" i.e. the user experience is not changed.</p>
","<p>The user experience would <em>have</em> to be changed for a server-side solution, simply by the fact that you'd be running code on a different box, with a network between the two. The latency <em>will</em> be different. It may be good enough, of course, but it's hard to say without knowing what kind of app it is.</p>

<p>The closest I can imagine is hosting some sort of JavaScript engine within an otherwise-secure application... but you can tell from the state of the games industry's attempts how easy they've found it to make unhackable client code. Basically, if it's going to run locally, the code has to be there to execute... and that means it can be inspected. All you can do is make it harder.</p>
","361","<java><javascript><encryption><encryption-asymmetric>","1","1","5","2011-03-29 16:49:18","5476027","4","","","","","2011-03-29 16:42:53",""
"3369354","Which it better?  Pre-generate asymmetric keys or generate them in real-time?","<p>Assuming a keystore is secure and one needs to service around a million keys, is it better to generate asymmetric keys in real-time or is it better to generate a bunch of keys and store them to be used as and when required? </p>

<p>Edit 1: By real time I mean generate a key pair when a user registers for the first time, from then on that key pair is used for all communication with the user.  </p>
","<p>Asymmetric keys have a public part and a private part; the public part is used to perform the operation which complements that which is done with the private part (e.g. you sign with the private key, and you verify the signature with the public key; or you encrypt data with the public key, and decrypt it with the private key). The point of asymmetric keys is that the private and public parts can be known by distinct entities; namely, that the public part is, well, public (everybody knows it) while the private part remains private.</p>

<p>Consequently, generating an asymmetric key ""in real-time"" makes little sense in most situations: what gives some value to a private key is that the public key is <em>already known</em> to some other party.</p>

<p>One can still imagine some situations in which ""real-time"" generation of asymmetric keys can be of use. For instance, SSL connections using one of the ""ephemeral Diffie-Hellman"" cipher suites: the DH keys, which can be called ""asymmetric"", are generated for each connection, the public part being then <em>signed</em> by the server (with <em>another</em> asymmetric key, which is not generated on-the-fly: the public key is the one in the server certificate) and then sent to the connecting client. In such a situation, pre-generating DH key pairs and storing them could be viewed as a kind of optimization, but a bad one since DH key pair generation is very fast, and private key storage is a complex and delicate issue.</p>

<p><strong>Edit:</strong> if your problem is about key generation upon user registration vs key generation and storage in advance: assuming that server-side key generation is indeed what you want, key generation and storage in advance is worthwhile only as an optimization, if on-the-fly generation proves to be too expensive to handle peaks (occasionally, many users trying to register at the same time). I suggest that you try and bench and make sure that the problem really exists, before implementing a ""solution"", because private key secure storage is somewhat tricky. RSA key generation is quite fast (on a basic PC, you can easily generate a dozen RSA keys per second), and with discrete-log (DSA, Diffie-Hellman, El-Gamal) or elliptic-curve based cryptosystems, it is even considerably faster (e.g. ten <em>thousands</em> new EC key pairs per second, with a PC).</p>
","346","<encryption><encryption-asymmetric>","2","1","1","2012-05-31 11:53:57","3371638","3","","648658","","2012-05-31 11:53:57","2010-07-30 07:12:56",""
"39484169","RSA encryption technique implemetation in Worklight mobile application","<p>We are developing a banking mobile application using MobileFirst V7.1. As it is a banking mobile application security matters more the sensitive data from mobile client to MobileFirst server trasnferred securely. hence the data should be encrypted from the mobile client/App side and sent to the MobileFirst Server and at the server side we have to decrypt the data and call the backend webservice. As per the client requirement the following are the steps to be implemented for encryption logic:</p>

<p>Step 1:  Generate a symmetric key
                A 32 bit random key will be generated </p>

<p>Step 2:  Encrypt the data with this key, using a symmetric algorithm like AES.
                The sensitive data is encrypted with the above generated key using AES algorithm</p>

<p>Step 3:  Encrypt the symmetric key with the public key, using a asymmetric algorithm like RSA.
                The key (32 bit random key generated in step1 an used for encryption of sensitive data in step2)  is encrypted using the asymmetric algorithm RSA public key   </p>

<p>Step 4:  Bundle the encrypted symmetric key with the encrypted data
                Bundle both the encrypted sensitive data and encrypted random key in an object and sent it to the server. At the worklight server end, from step4 to step1 is performed in reverse to decrypt and get the original data</p>

<p>The problem is I'm able to achieve the encryption logic from step1 to stpe4 at the application end, but when I use the same RSA alogorithm java script libraries in the MobileFirst HTTP adapter side to decrypt the data, I'm getting many errors stating that ""window"" is undefined, ""navigator"" is undefined. The RSA javascript libraries consists of navigator, window, at the mobilefirst adapter javascript file these navigaotr or window is unavailable, hence I'm getting this errors and I'm unable to move forward. Can anyone please help me to resolve this or help me in implementing the Enctyprtion logic as mentioned in the above step1 to step4 in my MobileFirst application.</p>

<p>Thanks in adavance.   </p>
","<p>Check this older response form stackoverflow: </p>

<p>I don't see issues on encrypting you adapter request/response payload(the data you send and receive inside of an adapter call). 
<a href=""https://stackoverflow.com/questions/24883305/worklight-adapter-calls-are-not-encrypted-wl-client-invokeprocedure"">Worklight adapter calls are not encrypted (WL.Client.invokeProcedure)</a></p>

<p>Although, if you encrypt the entire request(or response) used by this will confuse  the adapter Client/Server  internal communication protocol. </p>

<p>If you want extra protection on on the transport layer(Like HTTP/HTTPS) and maybe an extra layer. I would check if in your case, a IBM DataPower would not what you are searching for: <a href=""https://en.wikipedia.org/wiki/IBM_WebSphere_DataPower_SOA_Appliances"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/IBM_WebSphere_DataPower_SOA_Appliances</a></p>

<p>Application Layer: <a href=""https://en.wikipedia.org/wiki/Application_layer"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Application_layer</a></p>

<p>You can use also the adapter mash up technic at the adapter calls in a single adapter endpoint to prevent unwanted eyes to try ton reverse engineer this call by its name, and this 1st adapter can decrypt the payload at the server-side and send to the wanted adapter internally(inside the server-side). </p>

<p><a href=""https://mobilefirstplatform.ibmcloud.com/tutorials/en/foundation/8.0/adapters/advanced-adapter-usage-mashup/"" rel=""nofollow noreferrer"">https://mobilefirstplatform.ibmcloud.com/tutorials/en/foundation/8.0/adapters/advanced-adapter-usage-mashup/</a></p>

<p>I hope this helps,</p>
","340","<ibm-mobilefirst><rsa><public-key-encryption><encryption-asymmetric><mobilefirst-adapters>","1","0","2","2016-09-27 22:19:08","","4","1","3894072","","2016-09-14 09:07:21","2016-09-14 06:53:09",""
"39484169","RSA encryption technique implemetation in Worklight mobile application","<p>We are developing a banking mobile application using MobileFirst V7.1. As it is a banking mobile application security matters more the sensitive data from mobile client to MobileFirst server trasnferred securely. hence the data should be encrypted from the mobile client/App side and sent to the MobileFirst Server and at the server side we have to decrypt the data and call the backend webservice. As per the client requirement the following are the steps to be implemented for encryption logic:</p>

<p>Step 1:  Generate a symmetric key
                A 32 bit random key will be generated </p>

<p>Step 2:  Encrypt the data with this key, using a symmetric algorithm like AES.
                The sensitive data is encrypted with the above generated key using AES algorithm</p>

<p>Step 3:  Encrypt the symmetric key with the public key, using a asymmetric algorithm like RSA.
                The key (32 bit random key generated in step1 an used for encryption of sensitive data in step2)  is encrypted using the asymmetric algorithm RSA public key   </p>

<p>Step 4:  Bundle the encrypted symmetric key with the encrypted data
                Bundle both the encrypted sensitive data and encrypted random key in an object and sent it to the server. At the worklight server end, from step4 to step1 is performed in reverse to decrypt and get the original data</p>

<p>The problem is I'm able to achieve the encryption logic from step1 to stpe4 at the application end, but when I use the same RSA alogorithm java script libraries in the MobileFirst HTTP adapter side to decrypt the data, I'm getting many errors stating that ""window"" is undefined, ""navigator"" is undefined. The RSA javascript libraries consists of navigator, window, at the mobilefirst adapter javascript file these navigaotr or window is unavailable, hence I'm getting this errors and I'm unable to move forward. Can anyone please help me to resolve this or help me in implementing the Enctyprtion logic as mentioned in the above step1 to step4 in my MobileFirst application.</p>

<p>Thanks in adavance.   </p>
","<p>You have to write own code for encryption or decryption, I think you are using third party library to do encryption/decryption which is browser based. As worklight adpater does not recognize window/navigator. </p>
","340","<ibm-mobilefirst><rsa><public-key-encryption><encryption-asymmetric><mobilefirst-adapters>","1","0","2","2016-09-27 22:19:08","","4","1","3894072","","2016-09-14 09:07:21","2016-09-14 06:53:09",""
"13157850","How should I secure the Private Key when using Asymmetric RSA encryption?","<p>I am using the <code>RSACryptoServiceProvider</code> and C#.  I have a web server (A) that will be encrypting data and storing it in a database.  I have another server (B) that will be reading the encrypted data and decrypting it.  The private key will only ever live on server B.</p>

<p>I would like to limit private key access to my application and a very short list of domain users.</p>

<p>What is the best way to store the key so that it is safe from compromise by an unauthorized person?</p>
","<p>You can use Windows <a href=""http://msdn.microsoft.com/en-us/library/f5cs0acs.aspx"" rel=""nofollow"">RSA Key containers</a> to store the key.  The key can be installed / created by the <a href=""http://msdn.microsoft.com/en-us/library/k6h9cz8h%28VS.80%29.aspx"" rel=""nofollow"">aspnet_regiis.exe</a> tool that ships with the .NET framework.</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/2w117ede%28v=vs.100%29.aspx"" rel=""nofollow"">Here</a> is a walkthrough.</p>

<p>The two options to look out for are:</p>

<p><code>-pi</code> (installs a key to the RSA container)</p>

<p><code>-pa</code> (managements permissions for the key)</p>
","330","<c#><encryption><rsa><encryption-asymmetric>","1","2","1","2012-10-31 15:18:49","13158097","0","","","","","2012-10-31 12:20:57",""
"43818917","Asymmetric Key not matching Enhanced Strong Name","<p>So I have scoured much of the internet for answers. I have successfully created a template for deploying the <code>CLR Assemblies</code> to multiple (over 100) <code>SQL Server</code> instances and servers using simple strong names and certificates in a programmatic way...without even requiring the use of an IDE like VISUAL STUDIO except for syntax and checking assemblies. :)</p>

<p>The only catch seems to be the public key I am signing it with, since the C# Compiler <code>csc.exe</code> uses a SHA-1 hash to sign assemblies. So the only workarounds are either using <code>Enhanced Strong Naming</code> or <code>MSBuild</code> (not really an option here).</p>

<p>Enhanced Strong Naming is a simple enough process:</p>

<ul>
<li><p>Create the Strong Name Key (<code>snk</code>) file:</p>

<p><code>sn.exe -k [RSA_Length] CLR_IdentityKey.snk</code> </p></li>
<li><p>Publish the public key and hash this with <code>SHA-2</code></p>

<p><code>sn.exe -p CLR_IdentityKey.snk CLR_PubKey.snk sha256</code></p></li>
<li><p>Delay Sign your assembly with the public key (the source of csc.exe dictates the .NetFramework compatibility of your assembly)</p>

<p><code>csc.exe /target:library /keyfile:CLR_PubKey.snk /out:CLR_Assembly.dll ""YourCSFiles.cs"" ""YourCSFiles2.cs"" ""YourCSFiles3.cs"" /DelaySign+</code></p></li>
<li><p>And then Resign the Assembly with the original key with the StrongName tool.</p>

<p><code>sn.exe -Ra CLR_Assembly.dll CLR_IdentityKey.snk</code></p></li>
</ul>

<p>The primary reason for wanting to sign my assemblies with the Enhanced Strong Name method is twofold: </p>

<ol>
<li>Avoid exposing the private key on multiple servers for any length of time.</li>
<li>Provide the alternate of publishing the hashed public snk with the option of setting an encrypted password when creating <code>ASYMMETRIC KEY</code>.</li>
</ol>

<p>Note that although I could accomplish this using both a <code>pfx</code> and a simple snk file, the assembly here is a simple HTTP <code>POST</code> action, and the cost of a certificate is prohibitive given its small use in a intranet environment.</p>

<p>Now Checking the signed assembly, I see the following in the manifest:</p>

<blockquote>
  <p>Public key (hash algorithm: sha256):
  002400000c80000014010000060200...</p>
  
  <p>Public key token is b8ee775aa5bfbc5b</p>
</blockquote>

<p>So obviously sn.exe has successfully signed the assembly with the SHA-2 method.</p>

<p>Unfortunately, when I attempt to create my Asymmetric key based on this signed assembly in SQL Server, it seems public key is incorrectly associated.</p>

<blockquote>
  <p>Msg 10327, Level 14, State 1, Line 14</p>
  
  <p>CREATE ASSEMBLY for assembly
  'CLR_Assembly' failed because assembly 'CLR_Assembly' is not authorized for
  PERMISSION_SET = UNSAFE.  The assembly is authorized when either of
  the following is true: the database owner (DBO) has UNSAFE ASSEMBLY
  permission and the database has the TRUSTWORTHY database property on;
  or the assembly is signed with a certificate or an asymmetric key that
  has a corresponding login with UNSAFE ASSEMBLY permission.</p>
</blockquote>

<p>Example Code:
Please note that there is a difference between a named instance and the default name in both location and security rights. The folder chosen likely may not have the sufficient rights so you may have to add it.</p>

<p>Powershell:</p>

<pre><code># The version of csc.exe dictates the version of .NetFramework your assembly is created.
$csc_path=""C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe""
$sn_path=""C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.2 Tools\sn.exe""
$CLR_path=""C:\Program Files\Microsoft SQL Server\MSSQL13.TESTSQL\MSSQL\JOBS\""

$CLR_Assembly_SNK=$CLR_path + ""CLR_SNK.dll""
$CLR_Assembly_DelaySign=$CLR_path + ""CLR_DelaySign.dll""

$cs_BackComp=""C:\Program Files\Microsoft SQL Server\MSSQL13.TESTSQL\MSSQL\JOBS\BackwardsCompatibility.cs ""
$cs_MyMethods=""C:\Program Files\Microsoft SQL Server\MSSQL13.TESTSQL\MSSQL\JOBS\MyMethods.cs ""
$cs_Main=""C:\Program Files\Microsoft SQL Server\MSSQL13.TESTSQL\MSSQL\JOBS\CLR_JSON_Program.cs""

$CLR_IdentityKey=$CLR_path + ""CLR_IdentityKey.snk""
$CLR_IdentityKey1=$CLR_path + ""CLR_IdentityKey1.snk""
$CLR_PubKey=$CLR_path + ""CLR_PubKey.snk""

#using SNK method
&amp; $sn_path -k 2048 $CLR_IdentityKey
&amp; $csc_path /target:library /out:$CLR_Assembly_SNK /keyfile:$CLR_IdentityKey $cs_BackComp $cs_MyMethods $cs_Main
&amp; $sn_path -Tp $CLR_Assembly_SNK

# using delaySign+ method version
&amp; $sn_path -k 2048 $CLR_IdentityKey1
&amp; $sn_path -p $CLR_IdentityKey $CLR_PubKey sha256
&amp; $csc_path /target:library /out:$CLR_Assembly_DelaySign /keyfile:$CLR_PubKey $cs_BackComp $cs_MyMethods $cs_Main /DelaySign+
&amp; $sn_path -Ra $CLR_Assembly_DelaySign $CLR_IdentityKey
&amp; $sn_path -Tp $CLR_Assembly_DelaySign
</code></pre>

<p>T-SQL Code:</p>

<pre><code>USE MASTER
GO
CREATE ASYMMETRIC KEY CLR_SNK_KEY
FROM EXECUTABLE FILE = 'C:\Program Files\Microsoft SQL Server\MSSQL13.TESTSQL\MSSQL\JOBS\CLR_SNK.dll'
CREATE LOGIN CLR_SNK
 FROM ASYMMETRIC KEY CLR_SNK_KEY
GRANT UNSAFE ASSEMBLY TO CLR_SNK
GO
CREATE ASSEMBLY CLR_SNK_ASSEMBLY
 AUTHORIZATION [dbo] 
 FROM 'C:\Program Files\Microsoft SQL Server\MSSQL13.TESTSQL\MSSQL\JOBS\CLR_SNK.dll'
 WITH PERMISSION_SET = UNSAFE
GO
DROP LOGIN CLR_SNK
DROP ASYMMETRIC KEY CLR_SNK_KEY
DROP ASSEMBLY CLR_SNK_ASSEMBLY
GO
/*DelaySign+ Version*/
 CREATE ASYMMETRIC KEY CLR_Delay_KEY
FROM EXECUTABLE FILE = 'C:\Program Files\Microsoft SQL Server\MSSQL13.TESTSQL\MSSQL\JOBS\CLR_DelaySign.dll'
CREATE LOGIN CLR_Delay
 FROM ASYMMETRIC KEY CLR_Delay_KEY
GRANT UNSAFE ASSEMBLY TO CLR_Delay
GO
-- fails here due to the ASYMMETRIC key not matching the assembly
CREATE ASSEMBLY CLR_Delay_Assembly
 AUTHORIZATION [dbo] 
 FROM 'C:\Program Files\Microsoft SQL Server\MSSQL13.TESTSQL\MSSQL\JOBS\CLR_DelaySign.dll'
 WITH PERMISSION_SET = UNSAFE
</code></pre>

<p>My C# assembly uses <code>var postRequest = (HttpWebRequest)WebRequest.Create(uri);</code> which is not a safe method and requires at least EXTERNAL_ACCESS.</p>

<p>However, SQL Server 2017 is dropping support for the CAS security method and is introducing a quick fix sp_configure 'clr strict security` setting. Create future CLRs using UNSAFE. <a href=""https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/clr-strict-security"" rel=""nofollow noreferrer"">Microsoft (April 19, 2017): CLR String Security</a></p>

<p>Why is SQL Server unable to find the correct public key when they are supposedly one and the same?</p>

<p>Does anyone know of a working example of getting delayed assemblies in SQL Server?</p>
","<blockquote>
  <p>Why is SQL Server unable to find the correct public key when they are supposedly one and the same?</p>
</blockquote>

<p>If you <em>temporarily</em> set your database to <code>TRUSTWORTHY ON</code> so that you can load the Assembly then you should be able to see the issue.</p>

<pre class=""lang-sql prettyprint-override""><code>SELECT * FROM sys.asymmetric_keys;
SELECT * FROM sys.assemblies;
</code></pre>

<p>After running those you should see that the ""thumbprint"" column of <code>sys.asymmetric_keys</code> does not match the ""publickeytoken"" property shown in the ""clr_name"" column of <code>sys.assemblies</code>. This is most likely due to using SHA-256 when running <code>sn -p</code>, but you have no choice about that as SHA-1 does not work for Enhanced Strong Naming. The ""thumbprint"" of the Asymmetric Key is SHA-1 and you have no control over that, hence no way to make them match.</p>

<blockquote>
  <p>Does anyone know of a working example of getting delayed assemblies in SQL Server?</p>
</blockquote>

<p>As luck would have it, the documentation for <a href=""https://docs.microsoft.com/en-us/dotnet/framework/app-domains/enhanced-strong-naming"" rel=""nofollow noreferrer"">Enhanced Strong Naming</a> mentions using the <a href=""https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assemblysignaturekeyattribute"" rel=""nofollow noreferrer"">AssemblySignatureKeyAttribute</a> attribute to allow some legacy scenarios to work, and this certainly could be one. And in fact, using that attribute does indeed allow Enhanced Strong Naming to work.</p>

<p>Steps to get Enhanced Strong Naming working with SQLCLR (tested on SQL Server 2016 SP1):</p>

<ol>
<li><p>Create the Identity and Signature key pairs:</p>

<pre class=""lang-none prettyprint-override""><code>sn -k 2048 IdentityKey.snk
sn -k 2048 SignatureKey.snk
</code></pre></li>
<li><p>Extract the public key from both key pairs:</p>

<pre class=""lang-none prettyprint-override""><code>sn -p IdentityKey.snk IdentityPubKey.snk
sn -p SignatureKey.snk SignaturePubKey.snk sha256
</code></pre>

<p>Note that the Identity key is <em>not</em> using <code>sha256</code>, hence using the default <code>sha1</code>, while the Signature key <em>is</em> using <code>sha256</code>.</p></li>
<li><p>Generate the <code>publicKey</code> and <code>counterSignature</code> values needed for the <code>AssemblySignatureKey</code> attribute:</p>

<pre class=""lang-none prettyprint-override""><code>sn -a IdentityPubKey.snk IdentityKey.snk SignaturePubKey.snk
</code></pre></li>
<li><p>Copy two values generated in the prior step into one of the source files (i.e. typically <code>AssemblyInfo.cs</code>):</p>

<pre class=""lang-cs prettyprint-override""><code>[assembly:System.Reflection.AssemblySignatureKey(
""public"" +
""key"" +
""value"",
""counter"" +
""Signature"" +
""value""
)]
</code></pre></li>
<li><p>Compile the Assembly with delayed signing:</p>

<pre class=""lang-none prettyprint-override""><code>csc /target:library /out:MyAssembly.dll SqlStoredProcedure.cs
      /keyfile:IdentityPubKey.snk /delaySign+
</code></pre></li>
<li><p>Re-sign the Assembly:</p>

<pre class=""lang-none prettyprint-override""><code>sn -Ra MyAssembly.dll SignatureKey.snk
</code></pre></li>
<li><p>In SQL Server, create the Asymmetric Key in <code>master</code> from the DLL:</p>

<pre class=""lang-sql prettyprint-override""><code>USE [master];

CREATE ASYMMETRIC KEY [MyAsymKey]
FROM EXECUTABLE FILE = N'C:\path\to\MyAssembly.dll';
</code></pre></li>
<li><p>Create the Login from that Asymmetric Key and grant it either the <code>EXTERNAL ACCESS ASSEMBLY</code> or <code>UNSAFE ASSEMBLY</code>:</p>

<pre class=""lang-sql prettyprint-override""><code>CREATE LOGIN [MyAsymKeyLogin]
FROM ASYMMETRIC KEY [MyAsymKey];

GRANT UNSAFE ASSEMBLY TO [MyAsymKeyLogin];
</code></pre>

<p>You only need to grant one of them as <code>UNSAFE</code> implies <code>EXTERNAL ACCESS</code>, but as of SQL Server 2017, if you are using the default configuration of <code>clr strict</code> being enabled, then this needs to be <code>UNSAFE ASSEMBLY</code>.</p></li>
<li><p>Change to the target Database and create the Assembly:</p>

<pre class=""lang-sql prettyprint-override""><code>USE [Test];
ALTER DATABASE CURRENT SET TRUSTWORTHY OFF; -- Just to be sure!

CREATE ASSEMBLY [MyAssembly]
FROM N'C:\path\to\MyAssembly.dll'
WITH PERMISSION_SET = UNSAFE;
</code></pre></li>
</ol>

<hr>

<p>P.S. Your other concerns are mostly non-issues:</p>

<ol>
<li>Not sure how you think that the private key could be exposed, but it is not part of the <code>ASYMMETRIC KEY</code> (since it is being created from an assembly) so there is no potential for that.</li>
<li>Setting a password via <code>CREATE ASYMMETRIC KEY</code> is not an option since the private key is not there (since it is being created from an assembly).</li>
<li>If you prefer to use a Certificate there is no cost as a self-signed Certificate (via <code>MAKECERT</code> or PowerShell) is fine, especially for this being a small, internal project. A benefit of going with a Certificate is that you can create it from hex bytes instead of a file or Assembly, and since you can also create the Assembly from hex bytes, your install script can be completely portable as it won't have any file system references :-).</li>
</ol>
","324","<sql-server><.net-assembly><sqlclr><encryption-asymmetric><strongname>","1","1","1","2017-06-28 19:39:22","44791152","3","","577765","","2017-06-28 19:39:22","2017-05-06 09:37:26",""
"42966964","How can I use version 2.0 of PHPSeclib to get a signed string as I did in version 1.0?","<p>There is one project I worked on where a teammate added <a href=""https://github.com/phpseclib/phpseclib-php5/tree/master/phpseclib"" rel=""nofollow noreferrer"">phpseclib (for php5)</a> and we use the code below to sign an encrypted string and send that with a request to an internal API for verification processes.</p>

<pre><code>function GetSignature($message) {
    $rsa = new Crypt_RSA();
    $sPath = PRIVATE_KEY_FILE; //defined elsewhere
    $sKey = file_get_contents($sPath);
    $rsa-&gt;LoadKey($sKey);
    $rsa-&gt;setSignatureMode(CRYPT_RSA_SIGNATURE_PKCS1);
    return $rsa-&gt;sign($message);
};
</code></pre>

<p>For a string that contains a timestamp concatenated with a URL (e.g. <em>1490239371+<a href=""https://api-domain/api/endpoint_"" rel=""nofollow noreferrer"">https://api-domain/api/endpoint</em></a>), that would generate a string like below. This string is sent in a request header and the string below is the output in the internal API's console log.</p>

<blockquote>
  <p><em>Rsh1dv5ZGaPjCb6pgEsMrXwZbAeVgxVK/+5d5bxu7BfDzaILl++/pi/WxDP4H2qJ7Ayp6QnYXGckIIYX9l9fKOJoShOZOkB19RxaNdBL5vLjKk409XVRY/GKGz3kHmZmTcyBYDPQaT/VFOQTd7+o0d1mBY4EbHadI3f+kahHz4U=</em></p>
</blockquote>

<p>In a newer project, I am attempting to recreate this because we need to utilize the same internal API. The newer project is utilizing composer (and laravel) so adding phpseclib to it added <a href=""https://github.com/phpseclib/phpseclib/tree/2.0"" rel=""nofollow noreferrer"">version 2.0</a>. The constants have been changed to class constants but other than that it appears the methods are identical. Below is the code I added to replicate the former code in the other codebase.</p>

<pre><code>use phpseclib\Crypt\RSA as Crypt_RSA;
class EncyptionController {

    public static function GetSignature($message) {
        $rsa = new Crypt_RSA(); 
        $path = config('app.encryption_key_path') . '/certs/private.pem';
        $rsa-&gt;loadKey(file_get_contents($path));
        $rsa-&gt;setSignatureMode(Crypt_RSA::SIGNATURE_PKCS1);
        return $rsa-&gt;sign($message); 
    }
</code></pre>

<p>With the newer code, a string of the same format would yield an encrypted string that contains unicode characters. The string below appears in the internal API's console log (when logging the value received in the request headers).</p>

<blockquote>
  <p>=���˭\u0003�uʂ\u000e_\u0013\u000bd)w�8�\u0018�����q</p>
</blockquote>

<p>Logging that in Laravels log shows it with the unicode characters (without the entities encoded - I opened it in <a href=""https://notepad-plus-plus.org/"" rel=""nofollow noreferrer"">notepad++</a>):</p>

<blockquote>
  <p>=žšîË­´uÊ‚_d)wË8ƒ”ñ‘¤úqýÁ‹þ:‹dºäÿLÈ?!F§?…ãIEìê*K®gUþèÎÅ  </p>
</blockquote>

<p>And then the internal API decrypts the encoded string using the public key. For the newer codebase this fails. The internal API is implemented in Nginx/NodeJS and uses <a href=""https://nodejs.org/api/crypto.html"" rel=""nofollow noreferrer"">crypto</a> and its <a href=""https://nodejs.org/api/crypto.html#crypto_verifier_verify_object_signature_signature_format"" rel=""nofollow noreferrer"">verifier.verify()</a> method.</p>

<h3>Update:</h3>

<p>Based on <a href=""https://stackoverflow.com/questions/42966964/how-can-i-use-version-2-0-of-phpseclib-to-get-a-signed-string-as-i-did-in-versio#comment-73056109"">the comment</a> by <a href=""https://stackoverflow.com/users/13508/%C3%81lvaro-gonz%C3%A1lez"">Álvaro González</a>, it has come to light that the version 2.0 <em>sign()</em> method returns a raw binary hash. I can use <a href=""http://php.net/base64_encode"" rel=""nofollow noreferrer"">base64_encode()</a> to base-64 encode it, but the string is quite a bit shorter (88 characters) than the strings produced by version 1.0 (172 characters).</p>

<pre><code>return base64_encode($rsa-&gt;sign($message));
</code></pre>

<p>version 1.0 string - 172 characters long:</p>

<blockquote>
  <p>Rsh1dv5ZGaPjCb6pgEsMrXwZbAeVgxVK/+5d5bxu7BfDzaILl++/pi/WxDP4H2qJ7Ayp6QnYXGckIIYX9l9fKOJoShOZOkB19RxaNdBL5vLjKk409XVRY/GKGz3kHmZmTcyBYDPQaT/VFOQTd7+o0d1mBY4EbHadI3f+kahHz4U='
  ""Rsh1dv5ZGaPjCb6pgEsMrXwZbAeVgxVK/+5d5bxu7BfDzaILl++/pi/WxDP4H2qJ7Ayp6QnYXGckIIYX9l9fKOJoShOZOkB19RxaNdBL5vLjKk409XVRY/GKGz3kHmZmTcyBYDPQaT/VFOQTd7+o0d1mBY4EbHadI3f+kahHz4U=</p>
</blockquote>

<p>version 2.0 string - 88 characters long:</p>

<blockquote>
  <p>mYT/MSb9UOuDDQ1RV893Ix7xh21IRHINs6o1PnhdhffgTAIeX4le1rfd+EzoPPJN9pvvwirm3CAbkeubGjXgWQ==</p>
</blockquote>

<p>Is there a method to set the length of the signed string?</p>
","<p>In v2.0 it's RSA() - not Crypt_RSA(). <a href=""http://phpseclib.sourceforge.net/2.0.html"" rel=""nofollow noreferrer"">http://phpseclib.sourceforge.net/2.0.html</a> elaborates.</p>

<p>Anyway, in base64 decoding your two ciphertext's and then getting the length of each...  the first one (the one produced by phpseclib-php5) I get 256 bytes or 2048 bits. The second one (the one produced by phpseclib 2.0) is 64 bytes of 512 bits.</p>

<p>I think you're using different keys of different lengths for each one and that'd definitely affect the length.</p>
","319","<php><rsa><phpseclib><encryption-asymmetric>","1","1","1","2017-03-25 16:22:30","43018735","4","","-1","","2017-05-23 12:01:59","2017-03-23 03:53:58",""
"44994440","system cannot find the file specified exception, when i want to save RSA Key in Key Container","<p>I want to upload a text file that contains my private key to save in Key Container on web host.</p>

<p>I use below to save the keys:</p>

<pre><code>var pk = Encoding.UTF8.GetString(fuPrivateKey.FileBytes);
CspParameters csp = new CspParameters();
csp.KeyContainerName = ""Name"";
RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(2048, csp);
rsa.FromXmlString(pk);
Message = ""Key Saved"";
</code></pre>

<p>and this for encryption and decryption:</p>

<pre><code>CspParameters csp = new CspParameters()
{
       KeyContainerName = ""Name"",
       Flags = CspProviderFlags.UseExistingKey
};
      RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(2048, csp);
</code></pre>

<p>I don't have in localhost but I got below error in web host when i want to save keys:</p>

<blockquote>
  <p>Exception Details: System.Security.Cryptography.CryptographicException: The system cannot find the file specified.</p>
</blockquote>

<p>Then I used <code>csp.Flags = CspProviderFlags.UseMachineKeyStore;</code> while storing keys and  my problem is solved but when i want to see if the key is exists like below it seems that doesnt exsit.(and problem in encrypting and decrypting)</p>

<p>How should I use flag some way that my problem will be solved?</p>
","<p>I used <code>CspParameters</code> with the below flag when i want to <strong>store the keys</strong>:</p>

<pre><code>Flags = CspProviderFlags.UseMachineKeyStore;
</code></pre>

<p>and the below flag when i want to encrypt ,decrypt and <strong>check existing of keys</strong>:</p>

<pre><code>Flags = CspProviderFlags.UseExistingKey|CspProviderFlags.UseMachineKeyStore;
</code></pre>
","319","<c#><asp.net><security><encryption-asymmetric>","0","0","1","2017-07-12 04:02:38","45048206","0","","4057416","","2017-07-12 03:56:46","2017-07-09 08:25:27",""
"11657413","Asymmetric key encryption for securing SOAP webservice","<p>I'd like to authenticate the caller of my SOAP webservice (deployed in Ruby 1.8.7/Rails 2.3.5using datanoise gem in Red Hat enterprise linux 5) using some encrypted tag in the XML requests. Normally the client is a windows program (maybe C#/.Net windows programs - not Java/Ruby) which should generate a varying encrypted key in each call to the webservice based on a key/salt - while my server side would always be able to decode it with the private key. Knowledge of the encrypted token on the wire should not allow a third-party program to simply replicate the fully encrypted token and access the webservice. I am looking into OpenSSL but am a newbie to cryptography. The string being encrypted for identification could be (among other items) the MAC ID of the trusted client, which when decrypted would match the stored value on the server side of the trusted hosts.</p>

<p>I've found lots of possibilities on the Ruby side, but need to ideally ensure that the solution does not impose (or minimizes) any library or installation requirement on the windows client side. What i'm most struggling with is a way to generate a new key each time the call is made, so that anyone sniffing the traffic cannot simply infer the mode to create the encrypted tag by getting access to the key.</p>
","<p>As you are authenticating the caller here and not necessarily just the contents of what they send, there's no need to put the authentication mechanism into the SOAP request. Others have tried to do what you are after with <a href=""http://en.wikipedia.org/wiki/WS-Security"" rel=""nofollow"">WS-Security</a>, so if at all, I'd go with that.</p>

<p>There have been problems with the security of the scheme, though, but probably the biggest deal breaker is that there's no support for it available in Ruby (that I know of at least, please correct me if I'm wrong!).</p>

<p>Probably the easiest way to achieve client authentication on both ends would be using mutually authenticated TLS (the former SSL). This will ensure authentication on the transport level, which should suffice in your case. Actual authentication will then happen by first checking the validity of the certificate that is sent by the client (Ruby OpenSSL takes care of that for you), and once that is established, you check it against a white list of known certificates that you maintain on your server. </p>

<p>Please don't invent your own scheme, cryptographic protocols are among the hardest things to get right (that's why there are problems with WS-Security), TLS is probably as good as it gets right now and it has broad support in any language.</p>
","307","<ruby-on-rails><ruby><windows><linux><encryption-asymmetric>","4","0","1","2018-02-11 14:16:11","11698067","3","","1033581","","2018-02-11 14:16:11","2012-07-25 19:43:48",""
"49876434","File upload on ipfs with asymmetric encryption using metamask's public and private key","<p>I want to upload a file after encrypting it with user's metamask public address and then user should be able to decrypt it with his metamask private key.How can I implement this functionality?</p>
","<p>Metamask will allow you to <em>sign</em> data with the private key, but signing something is not the same as encrypting it. Mainly because there is no way to decrypt. </p>

<p>And you definitely won't be able to get the private key from Metamask.</p>

<p>The best thing you can do is to use metamask to sign the user's address. Then you can use that as an encryption key.</p>

<pre><code>const address = web3.eth.accounts[0];
const encryptionKey = web3.eth.personal_sign(address, address);
</code></pre>
","302","<javascript><blockchain><ethereum><encryption-asymmetric><metamask>","-2","0","1","2018-04-18 19:08:44","","1","","","","","2018-04-17 11:04:20",""
"42522434","C# implementation for identity based encryption(IBE)","<p>I am a student and I want to implement Identity based encryption by using c#.</p>

<p><strong>Example:</strong> I want to encrypt a message by using receivers email address(Public Key) and sender will send this message to receiver. Once receiver receives this encrypted message, he will decry-pt this message by using his private key.</p>

<p>This looks okay theoretically, but I am struggling to do this practically.</p>

<p><strong>I don't know</strong> </p>

<ol>
<li>how to encrypt a message by using receivers email address </li>
<li>how receiver will decry-pt encrypted message? </li>
<li>how receiver will get his private key?</li>
</ol>

<p><strong>I am expecting help from this platform, as I already spent a lot of time on searching this.</strong></p>

<p><strong>What I have tried:</strong></p>

<p>I tried encryption and decryption by using RSA algorithm, but the problem here is RSA generates his own public and private key pair. And I can not use receivers email address as a public key to encrypt message.</p>

<p>Thank you in advance.
Ashok</p>
","<p>You can generate secure symmetric keys from an email address, any string for that matter, with a key derivation function such as <code>PBKDF2</code> (aka <code>Rfc2898DeriveBytes</code>).</p>

<p>RSA is asymmetric encryption with separate keys for encryption and decryption, symmetric encryption such as AES uses one key for both encryption and decryption.</p>

<p>Asymmetric encryption  such as RSA has the advantage of two keys where the encryption key can be publicly known. But it is very slow and the data size, the keys are large (2048-bits is a currently secure size) and the data length is limited to the key size, it is generally used to encrypt symmetric keys. There is no control over symmetric key pair creation other than length.  Use asymmetric encryption only when a public/private key pair must be used.</p>

<p>Asymmetric encryption such as AES is fast, has smaller keys with 128-bits common and secure and can handle data of essentially any length.</p>
","301","<c#-4.0><rsa><public-key-encryption><des><encryption-asymmetric>","0","1","1","2017-03-01 13:00:12","","3","","","","","2017-03-01 03:04:29",""
"45446369","What is the algorithm of PGP to encrypt messages?","<blockquote>
  <p>Is there any documentation that explains what are the mathematical algorithms used in PGP to encrypt a message (key generation, converting a message into a number, signature...) ?</p>
</blockquote>

<p>For example, suppose that I have a friend who is using a third-party software to encrypt and decrypt messages with PGP, and I want to send him a message, e.g. ""Hello my friend!"", and I want to encrypt the message myself without using a third-party software. How do I generate my pair of keys, and how do I calculate the signed-encrypted message ?</p>

<p>I aware about asymetric encryption, DSA, RSA, SHA-1, etc... but I can't find any documentation about PGP algorithm.</p>
","<p>PGP and some other derivated software initially used a closed file format. This was a problem, so P. Zimmermann (that wrote and first published the software named PGP <strong>in year 1991</strong>) wrote a RFC (with co-authors W. Stallings and D. Atkins), titled <em>PGP Message Exchange Formats</em> published in year 1996 by the IETF: this RFC number is ... <strong>1991</strong> (easy to remember: PGP first published in 1991, RFC number 1991, repeat after me, ...).</p>

<p>Note that this RFC is <strong>not</strong> a standard: it is only an <strong>informational</strong> document. Nobody should claim conformance to it. It has been published only because, as stated by Postel, Huitema, and Crocker in RFC-1796: <em>Rather Document Than Ignore</em>.</p>

<p>This RFC has been obsoleted by RFC-2440, titled <em>OpenPGP Message Format</em>, <strong>and this one is a standard</strong>. The latter has been obsoleted by RFC-4880, with same title and same category (standards track). And finally, RFC-5581 added some minor updates to RFC-4880. These specifications explain which algorithms are used and how to use them to format messages.</p>

<p>There are many implementations of this format and cryptographic operations. You will even find JavaScript implementations. A notable online service that lets your browser use JavaScript to manage Open PGP messages is available here: <a href=""https://keybase.io"" rel=""nofollow noreferrer"">https://keybase.io</a> This is not an implementation of a protocol: you have to copy/paste the  encoded ciphertext to you mail user agent, for instance, if you want to send OpenPGP messages built with the help of this service.</p>
","297","<public-key-encryption><sign><pgp><encryption-asymmetric>","1","0","1","2017-08-16 23:52:03","","3","","","","","2017-08-01 19:40:17",""
"1721830","Encryption and Decryption","<p>i want to implement following scenario
Client Application will have function which will 
1)get a image as parameter 
2)convert it into byte of array
3)encrypt it
call a web service and pass this byte of array to that service</p>

<p>Service Will have a function which will
1)recieve byte of array as parameter 
2)decrypt it it 
3)generate image from that byte of array.</p>

<p>1)what i should use to encrypt data and how is there any sample application or article which can help me.
2)symmetric or asymmetric encryption
3)any issue which i will face</p>
","<p>Depending on whether you have a key exchange problem, you could use either symmetric (faster) or asymmetric (don't need a secure channel to exchange keys) encryption. In either case, you should be using a well-tested crypto library and not trying to roll your own from crypto primitives.</p>

<p>More importantly, you need to ask yourself why you're doing this encryption yourself instead of letting HTTPS handle it. If all you need is a secure channel, you're extremely unlikely to be able to do a better job than HTTPS.</p>
","279","<encryption-asymmetric>","-1","4","2","2009-11-12 12:31:07","","0","","","","","2009-11-12 12:26:54",""
"1721830","Encryption and Decryption","<p>i want to implement following scenario
Client Application will have function which will 
1)get a image as parameter 
2)convert it into byte of array
3)encrypt it
call a web service and pass this byte of array to that service</p>

<p>Service Will have a function which will
1)recieve byte of array as parameter 
2)decrypt it it 
3)generate image from that byte of array.</p>

<p>1)what i should use to encrypt data and how is there any sample application or article which can help me.
2)symmetric or asymmetric encryption
3)any issue which i will face</p>
","<p>It if the sole purpose of the encryption is to pass the object over the wire - than use a standard encryption provided by WCF (or whatever communication foundation you use).
You don't need to deal with it yourself.</p>

<p>in WCF you'll have to install certificate so if there is unlimited number of clients it wouldn't be good practice.</p>

<p>if you want to implement your own encryption - there are plenty of APIs for that - but your real problem will be key management (which is actually the same problem as before...)</p>

<p>For choosing Symmetric or a-Symmetric - again - it will be derived from your key management options</p>
","279","<encryption-asymmetric>","-1","0","2","2009-11-12 12:31:07","","0","","","","","2009-11-12 12:26:54",""
"1314055","Is it possible to enforce web service calls from known client only?","<p>Scenario:</p>

<p>A publically available Web Service that I have full control over.
But I only want this specific desktop application (my published application) to have access to the Web Service.
I could store a secret password in the desktop client, but that would be easy to crack.</p>

<p>Is there any known implementation that enforces this?
PKI, assymmetric keys?</p>
","<p><a href=""http://en.wikipedia.org/wiki/WS-Security"" rel=""nofollow noreferrer"">WS-Security</a> provides for X509 encryption.</p>

<p>Part of that implementation includes the possibility of only giving specific clients the generated public key. That way, only your selected clients can connect to the service.</p>
","278","<c#><.net><web-services><security><encryption-asymmetric>","1","1","3","2009-08-22 03:19:59","1314101","0","1","3584","","2009-08-21 21:04:49","2009-08-21 20:30:00",""
"1314055","Is it possible to enforce web service calls from known client only?","<p>Scenario:</p>

<p>A publically available Web Service that I have full control over.
But I only want this specific desktop application (my published application) to have access to the Web Service.
I could store a secret password in the desktop client, but that would be easy to crack.</p>

<p>Is there any known implementation that enforces this?
PKI, assymmetric keys?</p>
","<p>If the public will have access to copies of this Desktop App, any good reverser will be able to crack it and ""imitate"" its transactions with the server. It doens't matter how secure is your cryptography, everything you app needs to encrypt/decrypt data is included in the binaries, so the cracker only needs to dig it out of it.</p>

<p>The objective of cryptography is to protect data while it is being transfered, from ""middle-man"" hackers, but if you have access to anyone of the peers, you can easily crack it.</p>

<p>Your server must never trust what comes from the client side.</p>

<p>[edit resuming]</p>

<p>Despite you cannot 100% guarantee a supposed client to your server is or isn't your App or some ""emulator"" made by thirdies, you can complicate things to them. Its a common practice in game anti-cheats to sometimes, randomly, make the client App a trick question like ""whats the hash of your main.exe from offset A to offset B?"" or ""from now on packet type 0x07 swaps with packet type 0x5f"". Once a fake is detected, server enter in a ""silly mode"", act malfunctional, and blacklist their IP/account to this mode for several hours so they cannot have sure of what their program is doing wrong.</p>

<p>If you detect someone is building an emulator, make them start all over again: jumble the packet type tables, cryptography tables, change some packet formats and force your clients to update. You won't see crackers bothering you for a while... LOL</p>
","278","<c#><.net><web-services><security><encryption-asymmetric>","1","3","3","2009-08-22 03:19:59","1314101","0","1","3584","","2009-08-21 21:04:49","2009-08-21 20:30:00",""
"1314055","Is it possible to enforce web service calls from known client only?","<p>Scenario:</p>

<p>A publically available Web Service that I have full control over.
But I only want this specific desktop application (my published application) to have access to the Web Service.
I could store a secret password in the desktop client, but that would be easy to crack.</p>

<p>Is there any known implementation that enforces this?
PKI, assymmetric keys?</p>
","<p>The easiest way is message security using client and server certificates. The best way is to import the client certs in your server machines and hard code the client cert thumbprint in the app.config file. The other way is negotiation of certs which I haven't tried before.</p>

<p>If you are using IIS to host the service then client certificates using SSL is another option.</p>

<p>MSDN link on <a href=""http://msdn.microsoft.com/en-us/library/ms732362.aspx"" rel=""nofollow noreferrer"">WCF Security</a>.</p>
","278","<c#><.net><web-services><security><encryption-asymmetric>","1","0","3","2009-08-22 03:19:59","1314101","0","1","3584","","2009-08-21 21:04:49","2009-08-21 20:30:00",""
"10908227","Is there a way to view the ECDH Shared Secret generated within microsoft CNG?","<p>I am trying to perform a ECDH key exchange between MS CNG and another device.  In order to debug things, I would like to see what shared secret is being generated in CNG so i can compare it with the secret generated by my other device. Anybody know of a way to do this? </p>
","<p>Take a look at CNG documentation at MSDN: <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa376289%28v=vs.85%29.aspx"" rel=""nofollow"">NCryptSecretAgreement function</a>. The <a href=""http://msdn.microsoft.com/en-us/library/bb298399.aspx"" rel=""nofollow"">same function</a> is accessible from .NET.</p>
","274","<encryption><encryption-asymmetric><diffie-hellman><cng>","1","-1","1","2012-07-25 23:59:55","","2","1","","","","2012-06-06 04:37:29",""
"48940227","Passing sensitive data to Firebase cloud function","<p>I want to pass the user's password to a cloud function to do stuff with through an HTTP cloud function. I was thinking about using RSA encrytion with a private key stored in the index.js file used for writing cloud functions and the public key being included in the client side javascript. I found a library for RSA encryption and decryption in javascript (<a href=""https://github.com/travist/jsencrypt"" rel=""nofollow noreferrer"">https://github.com/travist/jsencrypt</a>). Could I import this into the cloud functions index.js file by just importing it or would I need to paste the contents into the cloud functions index.js file?</p>

<p>I'm not very knowledgeable about encryption, so I really don't know if this method would even make sense.</p>

<p>Thank you.</p>
","","271","<javascript><node.js><firebase><google-cloud-functions><encryption-asymmetric>","2","","0","2018-02-23 02:32:41","","2","","1161948","","2018-02-23 02:32:41","2018-02-23 02:28:55",""
"53775159","Error of bad decrypt when decrypting using private decrypt (publicEncrypt, privateDecrypt)","<p>I am <a href=""https://nodejs.org/docs/latest-v10.x/api/crypto.html"" rel=""nofollow noreferrer"">crypto</a> of NodeJs v10.14.2 to create asymmetric key pair.
Public and private keys are generated successfully. After that i want to encrypt a string using public key and wants to decrypt using private key but in this case encryption works fine with publicEncrypt but after that using privateDecrypt is gives error of bad decrypt</p>

<pre><code>Error: error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt.
</code></pre>

<p>Here is my code</p>

<pre><code>const { writeFileSync } = require('fs')
const { generateKeyPairSync, publicEncrypt, publicDecrypt, privateEncrypt, privateDecrypt } = require('crypto')
const passphrase = ""1234567890""
function generateKeys() {
    const {
        privateKey,
        publicKey
    } = generateKeyPairSync('rsa', {
        modulusLength: 1024,
        publicKeyEncoding: {
            type: 'pkcs1',
            format: 'pem',
        },
        privateKeyEncoding: {
            type: 'pkcs1',
            format: 'pem',
            cipher: 'aes-256-cbc',
            passphrase,
        },
    })

    encryptD(publicKey, privateKey) 
}
let string = ""Hello this string will be encrypted""
function encryptD(publicKey, privateKey)
{
    let buf = Buffer.from(string)
    console.log(buf)
    //&lt;Buffer 48 65 6c 6c 6f 20 74 68 69 73 20 73 74 72 69 6e 67 20 77 69 6c 6c 20 62 65 20 65 6e 63 72 79 70 74 65 64&gt;
    let encData = publicEncrypt(publicKey, buf)
    console.log(""Encrypted Buffer"", encData)
    //Encrypted Buffer &lt;Buffer 1b bc fb ee ba c3 90 ca 87 37 3c 6a 0b 38 4b bd 92 8a 7c 1e 7c dd 06 26 58 5f 0b 35 f6 81 8f 55 58 03 db e2 a5 4d 2b d2 41 32 31 5e 6b 2a 62 e7 d6 b6 ... &gt;
    let dncData = privateDecrypt(privateKey, encData)
    //Error: error:06065064:digital envelope routines:EVP_DecryptFinal_ex:bad decrypt
    console.log(""decrypted "", dncData)
}
generateKeys()
</code></pre>

<p>I have no clue where i am doing wrong
Thanks for the help</p>
","","265","<node.js><cryptojs><encryption-asymmetric>","1","","0","2018-12-14 07:30:28","","1","","7488168","","2018-12-14 07:30:28","2018-12-14 07:24:04",""
"8479899","Does anyone recognise this kind of public key?","<p>For an application I want to write, the webservice gives me this public key, with which I have to encrypt the password for signing in. But I don't know what kind of encryption this might be. Is this recognisable? Is it possible to tell what this is or do I have to find it out my own by sniffing into the JavaScript (of the web GUI) which handles this key?</p>

<p>Here it is:</p>

<pre>
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDN+SsAsYvIstaZ\/SYUNv7wvr+a
Ajkc28XxuKWpCbqFQS+EWeYpbuBB88iJU98yFjsFMh5BLbXhEX+2JmrC0DWd6o3r
1ILhNL27KmXo6Dh+2y0b9l3YXtmwiA1ThZEQun4Z1rUBPMF43DF805keLIsASFpj
nzc6zWw+jYCX7PTasQIDAQAB
-----END PUBLIC KEY-----
</pre>

<p>The fact that there is <code>PUBLIC KEY</code>, indicates this is asymmetric encryption. But there are lots of it. Here is a list, taken from Wikipedia of asymmetric encryption methods:</p>

<blockquote>
  <p>Benaloh · Blum–Goldwasser · Cayley–Purser · CEILIDH · Cramer–Shoup ·
  Damgård–Jurik · DH · DSA · EPOC · ECDH · ECDSA · EKE · ElGamal
  (encryption · signature scheme) · GMR · Goldwasser–Micali · HFE · IES
  · Lamport · McEliece · Merkle–Hellman · MQV · Naccache–Stern ·
  NTRUEncrypt · NTRUSign · Paillier · Rabin · RSA · Okamoto–Uchiyama ·
  Schnorr · Schmidt–Samoa · SPEKE · SRP · STS · Three-pass protocol ·
  XTR</p>
</blockquote>

<p>RSA is the only one I know by it's name. Is that the most common one?</p>

<p>Thanks you very much for the help.</p>
","<p>It's a 1024-bit RSA public key in PEM format with one character mangled in the first line:</p>

<pre><code>Public-Key: (1024 bit)
Modulus:
 00:cd:f9:2b:00:b1:8b:c8:b2:d6:99:fd:26:14:36:
 fe:f0:be:bf:9a:02:39:1c:db:c5:f1:b8:a5:a9:09:
 ba:85:41:2f:84:59:e6:29:6e:e0:41:f3:c8:89:53:
 df:32:16:3b:05:32:1e:41:2d:b5:e1:11:7f:b6:26:
 6a:c2:d0:35:9d:ea:8d:eb:d4:82:e1:34:bd:bb:2a:
 65:e8:e8:38:7e:db:2d:1b:f6:5d:d8:5e:d9:b0:88:
 0d:53:85:91:10:ba:7e:19:d6:b5:01:3c:c1:78:dc:
 31:7c:d3:99:1e:2c:8b:00:48:5a:63:9f:37:3a:cd:
 6c:3e:8d:80:97:ec:f4:da:b1
Exponent: 65537 (0x10001)
</code></pre>
","261","<javascript><security><encryption><public-key-encryption><encryption-asymmetric>","4","11","1","2011-12-12 19:48:40","8479979","3","1","","","","2011-12-12 19:42:27",""
"4418256","RSA- Blinded message scheme still vulnerable?","<p>I know this is more or less an algorithm or design problem and not so much programming, but I hope it's alright.</p>

<p>I am using a blinded message and having it signed by C. After the signing I want to remove the blinding and have other users A and B be able to share the message. Is this safe or can the signer still read these messages if they have the public and private keys? Should I take further steps after unblinding to ensure the confidentiality? </p>

<p>I have read various math formulas explaining how this works, but I am more of a programmer than a mathematician. I want to ensure the confidentiality and I am not sure if it's working.</p>
","<p>Signatures do not ensure confidentiality. If you have data which must be transmitted but should remain confidential, then you must use a transmission mechanism which ensures confidentiality.</p>

<p>You apparently also want the message to be signed by entity C, but without giving any clue on the message to C. Generally speaking, the signing entity only needs to know the hash of the signed data. The signer may then try to ""guess"" the data by hashing potential messages and see if one matches the hash it received. This is the point where <em>blind signatures</em> come into action: to prevent the signer from even seeing the hashed message.</p>

<p>It so happens that with RSA, the hashed message can be recovered from the signature and the signer's public key. The signer (C) certainly knows his own public key. Hence, the signature itself must be kept confidential (otherwise, it would make no sense to use blind signatures in the first place). Thus, whatever mechanism you use to keep the message itself confidential when it is transmitted from A to B, must also be applied to the signature (and the signature is <em>not</em> that mechanism).</p>
","251","<encryption><rsa><encryption-asymmetric>","1","0","1","2010-12-13 16:47:52","4431093","1","","21234","","2010-12-13 16:47:52","2010-12-11 18:31:09",""
"26616607","incomplete RSA decryption with large XML file type - JAVA","<p>I have a problem when decrypting XML type my file my returns incomplete data algorithm and rare symbols.</p>

<p><code>
    public File decryptFile(File fileInput, X509Certificate certificate) throws BadPaddingException, Exception {
        try (DataInputStream dis = new DataInputStream(new FileInputStream(fileInput))) {
            byte[] encryptedKeyBytes = new byte[dis.readInt()];
            dis.readFully(encryptedKeyBytes);
            PublicKey publicKey = certificate.getPublicKey();
            rsaCipher.init(Cipher.DECRYPT_MODE, publicKey);
            byte[] rijndaelKeyBytes = rsaCipher.doFinal(encryptedKeyBytes);
            SecretKey rijndaelKey = new SecretKeySpec(rijndaelKeyBytes, ""Rijndael"");
            byte[] iv = new byte[16];
            dis.read(iv);
            IvParameterSpec spec = new IvParameterSpec(iv);
            Cipher cipher = Cipher.getInstance(""Rijndael/CBC/PKCS5Padding"");
            cipher.init(Cipher.DECRYPT_MODE, rijndaelKey, spec);
            try (CipherInputStream cis = new CipherInputStream(dis, cipher)) {
                try (FileOutputStream fos = new FileOutputStream(fileInput.getAbsolutePath() + "".xml"")) {
                    byte[] data = new byte[16];
                    int theByte;
                    while ((theByte = cis.read(data)) != -1) {
                        System.out.print(new String(data));
                        fos.write(data, 0, theByte);
                    }
                    System.out.println(""\n\n"");
                }
            }
        }
        return new File(fileInput.getAbsolutePath() + "".xml"");
    }
</code></p>

<p>this code returns me the data</p>

<pre><code>&lt;/ctaAbonBenef&gt;&lt;distPago&gt;00000&lt;/distPago&gt;&lt;item&gt;00000&lt;/item&gt;&lt;pagoPoder&gt;N&lt;/p�|���[�[W�Z�5��Q�
</code></pre>

<p>I think this has to do with UTF-8, but I can not solve.</p>

<p>Now I can also believe that it is the encryption algorithm to use, I leave just in case.</p>

<p><code>
    public static void generateFileEncrypt(File fileInput, PrivateKey privateKey, String folderSave) throws Exception {
        String fileOutput = folderSave + ""\"" + fileInput.getName() + ENCRYPTED_FILENAME_SUFFIX;
        DataOutputStream output = new DataOutputStream(new FileOutputStream(fileOutput));
        Cipher rsaCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        rsaCipher.init(Cipher.ENCRYPT_MODE, privateKey);
        KeyGenerator rijndaelKeyGenerator = KeyGenerator.getInstance(""Rijndael"");
        rijndaelKeyGenerator.init(128);
        Key rijndaelKey = rijndaelKeyGenerator.generateKey();
        byte[] encodedKeyBytes = rsaCipher.doFinal(rijndaelKey.getEncoded());
        output.writeInt(encodedKeyBytes.length);
        output.write(encodedKeyBytes);
        SecureRandom random = new SecureRandom();
        byte[] iv = new byte[16];
        random.nextBytes(iv);
        output.write(iv);
        IvParameterSpec spec = new IvParameterSpec(iv);
        Cipher symmetricCipher = Cipher.getInstance(""Rijndael/CBC/PKCS5Padding"");
        symmetricCipher.init(Cipher.ENCRYPT_MODE, rijndaelKey, spec);
        try (
                CipherOutputStream cos = new CipherOutputStream(output, symmetricCipher);
                FileInputStream fis = new FileInputStream(fileInput)) {
            int theByte;
            byte[] data = new byte[16];
            while ((theByte = fis.read(data)) != -1) {
                System.out.print(new String(data));
                cos.write(data, 0, theByte);
            }
            System.out.println(""\n\n"");
            cos.flush();
        }
    }
</code></p>

<p>Thanks in advance.</p>
","<p><strike>I haven't digested all your code; I stopped when</strike> I saw you trying to decrypt with the public key, and encrypting with the private key. That's sort of like a digital signature, but your padding will be all wrong and you should use the <code>Signature</code> class if that is what your really want to do.</p>

<p>The public key is used to encrypt, or to verify a digital signature. Use the private key to decrypt, and see if that resolves your problem.</p>

<hr>

<p>You are still doing it wrong. Don't call it ""encryption"" if the key isn't private.</p>

<p>But anyway, I think the printing to stdout looks wrong because you are converting the entire buffer to text. The last block is likely to be padded, so it won't decode to valid text&mdash;it's padding; it wasn't part of the input file, and you aren't writing it to the decrypted file, but you are printing it. </p>

<p>Change to encrypt with the public key, decrypt with the private key, and then change your printing to this: </p>

<pre><code>System.out.print(new String(data, 0, theByte));
</code></pre>

<p>Even better would be to specify the character set of the data (probably UTF-8, since it's the default for XML).</p>
","241","<java><xml><security><encryption><encryption-asymmetric>","-1","1","2","2014-10-28 20:36:32","","0","3","1892298","","2014-10-28 19:29:39","2014-10-28 19:11:22",""
"26616607","incomplete RSA decryption with large XML file type - JAVA","<p>I have a problem when decrypting XML type my file my returns incomplete data algorithm and rare symbols.</p>

<p><code>
    public File decryptFile(File fileInput, X509Certificate certificate) throws BadPaddingException, Exception {
        try (DataInputStream dis = new DataInputStream(new FileInputStream(fileInput))) {
            byte[] encryptedKeyBytes = new byte[dis.readInt()];
            dis.readFully(encryptedKeyBytes);
            PublicKey publicKey = certificate.getPublicKey();
            rsaCipher.init(Cipher.DECRYPT_MODE, publicKey);
            byte[] rijndaelKeyBytes = rsaCipher.doFinal(encryptedKeyBytes);
            SecretKey rijndaelKey = new SecretKeySpec(rijndaelKeyBytes, ""Rijndael"");
            byte[] iv = new byte[16];
            dis.read(iv);
            IvParameterSpec spec = new IvParameterSpec(iv);
            Cipher cipher = Cipher.getInstance(""Rijndael/CBC/PKCS5Padding"");
            cipher.init(Cipher.DECRYPT_MODE, rijndaelKey, spec);
            try (CipherInputStream cis = new CipherInputStream(dis, cipher)) {
                try (FileOutputStream fos = new FileOutputStream(fileInput.getAbsolutePath() + "".xml"")) {
                    byte[] data = new byte[16];
                    int theByte;
                    while ((theByte = cis.read(data)) != -1) {
                        System.out.print(new String(data));
                        fos.write(data, 0, theByte);
                    }
                    System.out.println(""\n\n"");
                }
            }
        }
        return new File(fileInput.getAbsolutePath() + "".xml"");
    }
</code></p>

<p>this code returns me the data</p>

<pre><code>&lt;/ctaAbonBenef&gt;&lt;distPago&gt;00000&lt;/distPago&gt;&lt;item&gt;00000&lt;/item&gt;&lt;pagoPoder&gt;N&lt;/p�|���[�[W�Z�5��Q�
</code></pre>

<p>I think this has to do with UTF-8, but I can not solve.</p>

<p>Now I can also believe that it is the encryption algorithm to use, I leave just in case.</p>

<p><code>
    public static void generateFileEncrypt(File fileInput, PrivateKey privateKey, String folderSave) throws Exception {
        String fileOutput = folderSave + ""\"" + fileInput.getName() + ENCRYPTED_FILENAME_SUFFIX;
        DataOutputStream output = new DataOutputStream(new FileOutputStream(fileOutput));
        Cipher rsaCipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        rsaCipher.init(Cipher.ENCRYPT_MODE, privateKey);
        KeyGenerator rijndaelKeyGenerator = KeyGenerator.getInstance(""Rijndael"");
        rijndaelKeyGenerator.init(128);
        Key rijndaelKey = rijndaelKeyGenerator.generateKey();
        byte[] encodedKeyBytes = rsaCipher.doFinal(rijndaelKey.getEncoded());
        output.writeInt(encodedKeyBytes.length);
        output.write(encodedKeyBytes);
        SecureRandom random = new SecureRandom();
        byte[] iv = new byte[16];
        random.nextBytes(iv);
        output.write(iv);
        IvParameterSpec spec = new IvParameterSpec(iv);
        Cipher symmetricCipher = Cipher.getInstance(""Rijndael/CBC/PKCS5Padding"");
        symmetricCipher.init(Cipher.ENCRYPT_MODE, rijndaelKey, spec);
        try (
                CipherOutputStream cos = new CipherOutputStream(output, symmetricCipher);
                FileInputStream fis = new FileInputStream(fileInput)) {
            int theByte;
            byte[] data = new byte[16];
            while ((theByte = fis.read(data)) != -1) {
                System.out.print(new String(data));
                cos.write(data, 0, theByte);
            }
            System.out.println(""\n\n"");
            cos.flush();
        }
    }
</code></p>

<p>Thanks in advance.</p>
","<p>I think u should do the opposite. encrypt with the public key and decrypt with the private key.. </p>
","241","<java><xml><security><encryption><encryption-asymmetric>","-1","0","2","2014-10-28 20:36:32","","0","3","1892298","","2014-10-28 19:29:39","2014-10-28 19:11:22",""
"10598309","Java encryption issue with data type conversion","<p>I have web services implemented that comunicate between client and server with strings. The problem I'm getting is with the conversion of the encripted byte array to string since I can't convert it back to the original content on server side.</p>

<pre><code>KeyPairGenerator keyGen;
keyGen = KeyPairGenerator.getInstance(""RSA"");
keyGen.initialize(1024);
KeyPair key = keyGen.generateKeyPair();

String publicKeyPath = new String(""publicKeys.txt"");
publickey = key.getPublic()
byte[] pubEncoded = key.getPublic().getEncoded();
FileOutputStream fout = new FileOutputStream(publicKeyPath);
fout.write(pubEncoded);
fout.flush();
fout.close();

String privateKeyPath = new String(""privateKeys.txt"");
byte[] privEncoded = key.getPrivate().getEncoded();
fout = new FileOutputStream(privateKeyPath);
fout.write(privEncoded);
fout.flush();
fout.close();

cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
</code></pre>

<p>And on each method in client: </p>

<pre><code>cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
cipher.init(Cipher.ENCRYPT_MODE, publickey); 
byte[] cipherText = cipher.doFinal(str.getBytes());
port.callX(chiperText.toString());
</code></pre>

<p>On server side:</p>

<pre><code>cipher = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
cipher.init(Cipher.DECRYPT_MODE, privateKey);
byte[] newPlainText = cipher.doFinal(arg.getBytes());
</code></pre>

<p>This gives the padding problem of ""Data must start with a zero""</p>

<p>There is only one KeyPair generated, for debug, I tried to encrypt and decript on the same function, and the problem relies on the conversions from byte[] to String.</p>

<p>I don't really wan't to change the passing of arguments to other type since operations are auto generated and all code is to strings. I've tried with different ""UTF-8"" and ""UTF-16Le"" but none works :S</p>

<p>Any idea?</p>
","<p>Encrypting data directly with asymmetric keys isnt a good idea and it does not work. RSA keys cannot encrypt data bigger than its key length. So, the right way of doing that would be to generate a symmetric key and encrypt the data with the symmetric key and inturn encrypt the symmetric key with the asymmetric key. So, you need to send the encrypted data and the encrypted key both to the other party.</p>

<p>If you try encrypting the data directly with the asymmetric key then your byte[] may not contain the correct data or it may contain nothing at all. This happens if your data is bigger than the key length. For data smaller the key length it works fine but not with bigger data.</p>
","237","<java><type-conversion><encryption-asymmetric>","0","0","1","2012-05-15 10:28:37","","3","3","360224","","2012-05-15 09:59:30","2012-05-15 09:58:31",""
"36364887","How or What is the best way to pass an encryption key?","<p>Ok. so, encrypted data is sent from the computer to the server and spread to other computers. And, let say there is a person in the middle attack? </p>

<p>Here is where I'm confuse; The client/server need to decrypt the data with the key, but if the key can be seen by the client computer then the attacker can see it in the data as well. The key can be encrypted, but another key would have to be sent un-encrypted. so how do you pass the ""key"" to decrypt the data? </p>

<p>So when I hear new chat system saying they are enprypted their client messages; I'm wondering, how are they doing it? When hacker can try to find the key in thier data and decrypt the message.</p>
","","236","<encryption><public-key-encryption><password-encryption><encryption-symmetric><encryption-asymmetric>","0","","0","2016-04-01 20:01:32","","11","","","","","2016-04-01 20:01:32",""
"29397492","What is Java equivalent for .net EnvelopedCms","<p>I need to rewrite the .net function below to java <strong>without using BouncyCastle</strong>. Because it has to be run as java stored procedure at oracle 11g database (it has java 1.5). JARs loaded into database are unpacked and that's why variant with BouncyCastle fails: JCE cannot authenticate the provider BC.</p>

<p>Or if someone know how to load the jar (understand the whole jar) into oracle database jvm. loadjava extracts classes that's why it can't work with BC. </p>

<pre><code>protected byte[] Encrypt(ref byte[] content, ref X509Certificate2[]     recipients)
{
  ContentInfo ci = new ContentInfo(content);
  EnvelopedCms cms = new EnvelopedCms(ci);
  CmsRecipientCollection rcps = new CmsRecipientCollection();
  foreach (var recipient in recipients)
  {
    rcps.Add(new CmsRecipient(recipient));
  }
  cms.Encrypt(rcps);
  return cms.Encode();
}
</code></pre>
","","221","<java><oracle><oracle11g><encryption-asymmetric>","3","","0","2015-04-01 20:43:59","","1","","696821","","2015-04-01 20:43:59","2015-04-01 17:51:15",""
"51890727","how to find encryption format of the String","<p>I have a key and Value also but i don't know which encryption type and algorithm is used to encrypt this key</p>

<blockquote>
  <p>String = b866e64b396d915d6710d95d355436d75da0d0b83cbd7dbda84827ff03e9fb68f392d382aa4b42880b7cf3942dc1f22cae433aa2b7aa67fc28b7a612e9499a95</p>
  
  <p>Password = admin@123</p>
</blockquote>

<p>how to find this encryption algorithm type and algorithm</p>
","<p>With no extrinsic information - you probably can't. That's partially the point of encrypting something, it does not show any identifying characteristics.</p>
","216","<php><encryption><public-key-encryption><password-encryption><encryption-asymmetric>","1","0","1","2018-08-17 09:11:54","","4","","380331","","2018-08-17 08:57:59","2018-08-17 07:53:32",""
"37262058","Asymmetric encryption with Pycripto","<p>I want to do an encryption and a decryption scripts with Pycripto using public/private keys.
I know asymmetric encryption is super expensive in use of resources, but I intend to encrypt and decrypt a text file with some passwords (let's say 200-300 characters in total).
I've done some research but I could only find how to encrypt and decrypt little short strings.</p>

<p>In case that's not possible/convenient, would you recommend using mixed encryption? I mean using asymmetric to ""securely transfer the pass phrase "" and the decrypting the rest with symmetric.</p>

<p>I intend to have the encrypted file in the cloud, so I can download it everywhere I am. To decrypt, I'll have a USB flash drive I take everywhere I go. In the USB I should have my private key, and the decryption script. I plan to decrypt ""inside the USB"" so the decrypted file is never stored in any computer.</p>

<p>Is that possible?</p>

<p>Thanks!</p>
","","212","<python><public-key-encryption><encryption-asymmetric>","0","","0","2016-05-16 19:46:39","","3","","","","","2016-05-16 19:46:39",""
"52059733","JSEncrypt to PHP Asymmetric Encryption","<p>I am trying to do an Asymmetric encryption from client to server with the client having the public key and the server the private.</p>

<p>On the client side I am using JSEncrypt in javascript to encrypt using my public key.  From there I use AJAX to send the encrypted data to my PHP script.  I try to use <code>openssl_private_decrypt()</code> to decrypt the data, but it always returns false.  I have tried telling it to expect different padding, even though I am sure it is PKCS1.</p>

<p>Can someone please tell me what I am doing wrong?</p>

<p>Here is all the relevant code:</p>

<p>JAVASCRIPT:</p>

<pre><code>function getpubkey(){ //Gets Public Key from server
var xmlhttp = new XMLHttpRequest();
xmlhttp.onreadystatechange = function(){
    if (this.readyState == 4 &amp;&amp; this.status == 200){
        pubkey = this.responseText;
    }
};
xmlhttp.open(""POST"", ""PHP/ajax.php"", false);
xmlhttp.setRequestHeader(""Content-type"", ""application/x-www-form-urlencoded"");
xmlhttp.send(""do=getpub"");
}


function encryptdata(plaintext){ //Encrypts argument with Public Key
var encrypt = new JSEncrypt();
encrypt.setPublicKey(pubkey);
var encrypted = encrypt.encrypt(plaintext);
return encrypted;
}


function login(){ //Sends login data to server and displays response on page
getpubkey();
var encuser = encryptdata(document.getElementById('username').value);
var encpass = encryptdata(document.getElementById('password').value);
encuser = window.btoa(encuser);
encpass = window.btoa(encpass);
var xmlhttp = new XMLHttpRequest();
xmlhttp.onreadystatechange = function(){
    if (this.readyState == 4 &amp;&amp; this.status == 200){
            document.getElementById('maincontent').innerHTML = this.responseText;
    }
};
xmlhttp.open(""POST"", ""PHP/ajax.php"", true);
xmlhttp.setRequestHeader(""Content-type"", ""application/x-www-form-urlencoded"");
xmlhttp.send(""do=login&amp;param1=""+encuser+""&amp;param2=""+encpass);

}
</code></pre>

<p>PHP (ajax.php):</p>

<pre><code>if (!isset($_POST['do'])){
header(""Location: ../index.php"");
die();
}

$do = $_POST['do'];

if(isset($_POST['param1'])){
$param1 = $_POST['param1'];
}

if(isset($_POST['param2'])){
$param2 = $_POST['param2'];
}


$allow = 1;
require(""../KEYS/priv.php""); //Contains $priv which holds the private key
if(openssl_private_decrypt(base64_decode($param1), $username, $priv, OPENSSL_PKCS1_PADDING)){
    $return = $username;
}
else{
    $return = ""Decrypt Failed"";
}

if(isset($return)){
echo $return;
}
</code></pre>

<p>priv.php:</p>

<pre><code>&lt;?php

if (!isset($allow)){
    header(""Location: ../index.php"");
    die();
}

$priv = ""-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAtzAVRzbQWzZi7wjqA/0magqlWQfKJhrfnCuytqwNR0rMKk+h
Gx1c+1YaPsN0ZMdBVWyBWJYWzlCjWOKx1vnYgBb3MPXn1QvGkrv+WtXX3VQRsPjW
tjaAqLYdjP/m64+pVDr54mt4RzNxi1dQ/PRD6TnjdVhLMpftPv1ELTWCl2tyzSTP
3G2LY4dDVstuhzO8+3R9PaIle7CnVZ/2qSSbHVN4Juzn3zSemjRykoZLoV3VLsHU
2Cb3m21tCMWB7BFlChd2cYiXeZamJHaypvK+6ZjQgEN7IYeb4ALOIx50WntOC67S
29qpG1MZ84TF/OLtVTFWFM+buSCvYpPMMSzSqQIDAQABAoIBAFy/7aYW7Luh98mL
O+E1JWP/a+R9+y374UfTIDM5PafhCSpLEwkFfvSKjdNFZwM3l67Gt17A718amPoC
HYT5D1MbTaDugKjvw2S75nbbWuZnEGYIN74eLlo9iwy+7I5MOLG7ApZPT6DNPSoN
1aWdj1zgwHfDcp91KNwBo6k4NJyxIK0xVSvdcnecpndQ611BUicz3mfMUoa+axDg
GROs7IQvEyYMru0E2/lZdURJS1uNg+T3kyBs3zINibwNEFsf8V3e90haWlMjc5MW
nNFTo4KWPoHZCWIsyMPZfinjEk/5+DKdFFIQAY7YWUhjnu23Qc4oRu4hb+vTFXQt
2FCp2nkCgYEA58QY4zeqhkIPVEWFs/lZDcd/GdwL+/0Dmmm6lUvTQpUG/u0njY9n
JOTyvNc+vH3U9FWm3yPKX+HbARC4CMV/x9jU8QIIa0ARcETjh6BQGaEkIReDeXhq
X3kwcdSuhqK9nrmp1ocGeIYFGZPrrofJI+1gODCMtdgqt9pbN+8UJxsCgYEAylel
rpsFSiAx0bBcZ9kCPHYHpR2kdpcv4iOunpPJLJQ+p0KhCdDA1J7LftlNVS1Pg34W
aD3nundbH0D/8B1qnlXvPIDBGOEbnfnKAdf0ti1cznQoBsIzwa56Fcu8MqK9DQXJ
AHkmEIdHjPtXjM7fEEuz4kRLjcdirV2T5+KZNYsCgYBCioqaseDDqzO7fjpk8bIf
wqc7RXIrZvkh3Dk1pA+DjkXz6yLwAbwbW6BVl3brpzT88Zp3dk8kODQomiQ8YHfP
aPG6QFsqb7qSATVSOzTEJv+4gIe+2FOyFZlTFT0GarMGX0fjz+CLue686TtBYLrf
FcgKWeYMT4P0RTzrUjj3AQKBgQCf/Rtg6uwMx1X88dCuv/S3r6+ty7ldl39h9Eq+
0iWwHOtJPzKr2yaNN525h8JQxgnn84tuEvymAHfJR5DW37uMxG/sS/XiYSOADqC+
Qm4YmdeW2ltHtMhNrVKU50nAU9LdeCSNPj1ttjlJ7PY1vOC9Ns5d6xg+W1fXsnUf
VZlErwKBgQCLWkrCqsxjKvWBQIE7DgtF5e2eFuuwIWwPODn3uNR7DCrpy7PyBVAd
TWrKw+Uu0FmVgEiMWlIWjgse58/ZaBHXzqU5ScsibshJU/tacG+M1uqxAcyr+p03
qkSuqbJ6OqUnOWwATrEFLxt5BVnwLlizp9sPggEIJ6mMdOW9J6wONA==
-----END RSA PRIVATE KEY-----"";

?&gt;
</code></pre>

<p>My Keys:</p>

<p>Public:</p>

<blockquote>
  <p>-----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtzAVRzbQWzZi7wjqA/0m
  agqlWQfKJhrfnCuytqwNR0rMKk+hGx1c+1YaPsN0ZMdBVWyBWJYWzlCjWOKx1vnY
  gBb3MPXn1QvGkrv+WtXX3VQRsPjWtjaAqLYdjP/m64+pVDr54mt4RzNxi1dQ/PRD
  6TnjdVhLMpftPv1ELTWCl2tyzSTP3G2LY4dDVstuhzO8+3R9PaIle7CnVZ/2qSSb
  HVN4Juzn3zSemjRykoZLoV3VLsHU2Cb3m21tCMWB7BFlChd2cYiXeZamJHaypvK+
  6ZjQgEN7IYeb4ALOIx50WntOC67S29qpG1MZ84TF/OLtVTFWFM+buSCvYpPMMSzS
  qQIDAQAB
  -----END PUBLIC KEY-----</p>
</blockquote>

<p>Private:</p>

<blockquote>
  <p>-----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEAtzAVRzbQWzZi7wjqA/0magqlWQfKJhrfnCuytqwNR0rMKk+h
  Gx1c+1YaPsN0ZMdBVWyBWJYWzlCjWOKx1vnYgBb3MPXn1QvGkrv+WtXX3VQRsPjW
  tjaAqLYdjP/m64+pVDr54mt4RzNxi1dQ/PRD6TnjdVhLMpftPv1ELTWCl2tyzSTP
  3G2LY4dDVstuhzO8+3R9PaIle7CnVZ/2qSSbHVN4Juzn3zSemjRykoZLoV3VLsHU
  2Cb3m21tCMWB7BFlChd2cYiXeZamJHaypvK+6ZjQgEN7IYeb4ALOIx50WntOC67S
  29qpG1MZ84TF/OLtVTFWFM+buSCvYpPMMSzSqQIDAQABAoIBAFy/7aYW7Luh98mL
  O+E1JWP/a+R9+y374UfTIDM5PafhCSpLEwkFfvSKjdNFZwM3l67Gt17A718amPoC
  HYT5D1MbTaDugKjvw2S75nbbWuZnEGYIN74eLlo9iwy+7I5MOLG7ApZPT6DNPSoN
  1aWdj1zgwHfDcp91KNwBo6k4NJyxIK0xVSvdcnecpndQ611BUicz3mfMUoa+axDg
  GROs7IQvEyYMru0E2/lZdURJS1uNg+T3kyBs3zINibwNEFsf8V3e90haWlMjc5MW
  nNFTo4KWPoHZCWIsyMPZfinjEk/5+DKdFFIQAY7YWUhjnu23Qc4oRu4hb+vTFXQt
  2FCp2nkCgYEA58QY4zeqhkIPVEWFs/lZDcd/GdwL+/0Dmmm6lUvTQpUG/u0njY9n
  JOTyvNc+vH3U9FWm3yPKX+HbARC4CMV/x9jU8QIIa0ARcETjh6BQGaEkIReDeXhq
  X3kwcdSuhqK9nrmp1ocGeIYFGZPrrofJI+1gODCMtdgqt9pbN+8UJxsCgYEAylel
  rpsFSiAx0bBcZ9kCPHYHpR2kdpcv4iOunpPJLJQ+p0KhCdDA1J7LftlNVS1Pg34W
  aD3nundbH0D/8B1qnlXvPIDBGOEbnfnKAdf0ti1cznQoBsIzwa56Fcu8MqK9DQXJ
  AHkmEIdHjPtXjM7fEEuz4kRLjcdirV2T5+KZNYsCgYBCioqaseDDqzO7fjpk8bIf
  wqc7RXIrZvkh3Dk1pA+DjkXz6yLwAbwbW6BVl3brpzT88Zp3dk8kODQomiQ8YHfP
  aPG6QFsqb7qSATVSOzTEJv+4gIe+2FOyFZlTFT0GarMGX0fjz+CLue686TtBYLrf
  FcgKWeYMT4P0RTzrUjj3AQKBgQCf/Rtg6uwMx1X88dCuv/S3r6+ty7ldl39h9Eq+
  0iWwHOtJPzKr2yaNN525h8JQxgnn84tuEvymAHfJR5DW37uMxG/sS/XiYSOADqC+
  Qm4YmdeW2ltHtMhNrVKU50nAU9LdeCSNPj1ttjlJ7PY1vOC9Ns5d6xg+W1fXsnUf
  VZlErwKBgQCLWkrCqsxjKvWBQIE7DgtF5e2eFuuwIWwPODn3uNR7DCrpy7PyBVAd
  TWrKw+Uu0FmVgEiMWlIWjgse58/ZaBHXzqU5ScsibshJU/tacG+M1uqxAcyr+p03
  qkSuqbJ6OqUnOWwATrEFLxt5BVnwLlizp9sPggEIJ6mMdOW9J6wONA==
  -----END RSA PRIVATE KEY-----</p>
</blockquote>
","","210","<javascript><php><encryption><encryption-asymmetric><jsencrypt>","0","","0","2018-08-28 16:25:39","","6","","10285014","","2018-08-28 16:25:39","2018-08-28 14:00:22",""
"18029704","Asymmetric cryptography with reversed key roles","<p>I'm trying to implement licensing system for a software to prevent piracy.</p>

<p>For this I need to read a license file within the application, and I need to make sure this file is written by the owner company.</p>

<p>Asymmetric cryptography has good potential for this aim, but in other way around!</p>

<p>Asymmetric cryptography algorithms, like RSA, give you a <code>Public key</code> and a <code>Private key</code> which are used as follow:</p>

<ul>
<li><p>Private keys are used to decrypt.</p></li>
<li><p>Public keys are used to encrypt.</p></li>
</ul>

<p>But I need them like this:</p>

<ul>
<li><p>Private keys to be used to encrypt.</p></li>
<li><p>Public keys to be used to decrypt.</p></li>
</ul>

<p>A simplistic idea would be to switch the role of public and private keys, but there are <a href=""https://stackoverflow.com/questions/5244129/openssl-use-rsa-private-key-to-generate-public-key#5246090"">posts</a> saying that in RSA public keys can be generated from private ones which make this idea impractical.</p>

<p>So here's my question: Is there any asymmetric cryptography with reversed key roles?</p>
","<p>If speaking about RSA public/private key pair  can be used in both cases you described. When you use private key to encrypt then public key decrypts and vice-versa.</p>

<p>As you said public key can be derived from private key but not the other way.</p>

<p>If you want to prove the origin of licensing file, use RSA in signature mode. In signature mode a hash is computed from the data you want to protect and then encrypted using private key. The result -the digital signature - is appended to the protected data.</p>

<p>Verification process starts by decrypting the signature which gives you the hash. Then compute hash value from the data. Computed and decrypted value shall be the same.</p>

<p>There are a lot of libraries providing comfortable way of signature creation and verification. You can choose depending on the platform you use for your application development. </p>

<p><a href=""http://en.wikipedia.org/wiki/Digital_signature"" rel=""nofollow"">http://en.wikipedia.org/wiki/Digital_signature</a></p>
","210","<encryption-asymmetric>","1","3","1","2013-08-03 08:26:24","18030832","0","","-1","","2017-05-23 12:05:17","2013-08-03 05:39:08",""
"52403984","Using a pre-existing private key to sign file to create a certificate (C#)","<p>I have read round all the articles on StackOverflow and while a lot of them come close to the solution I want, none appear to work.</p>

<p>I simply want to take an existing private key to create a signature of a piece of data.  This then becomes part of a data file which includes a header describing the parameters used.   Next comes the signed version of a datafile, lastly the datafile itself (a hex file).  Concatentation of files is not the issue, generating a certificate using the private and public key pairs I have is. The keys are of the format (""-----BEGIN PRIVATE KEY-----"")   I can generate signature files easily enough from scratch, but the software that will read the final file is expecting a 256 bye signature, whereas mine (using RSA-256) is only producing 32 byte signatures.  It only has access to the public key for decryption and validation of the file signature.  </p>

<p>I have come up across a number of errors such as keysets not being valid, not existing, the ComputeHash function not working and causing a crash.  I suspect I need to provide more information to my RSACryptographicService through CSPParameters but am not sure what is necessary and sufficient to do so. 
I would like to avoid digging into the mathematics behind the algorithm such as manually setting/reading the modulus / P/Q values etc.  Can anyone propose a simple way to do this or tell me where I am going wrong?  Code is available on request.</p>
","<p>The comments you are getting saying 256-byte signature is too long are absurd. Ignore those.</p>

<p>256 bit (32 bytes) would be a very small signature, that cannot be correct. I believe what you're actually looking for is 2048-bit (256-byte) RSA signatures. Those are more sensible by today's standards (though a step larger doesn't hurt).</p>

<p>In terms of importing your key, and not setting key components manually, you should look into ""PEM"" format RSA keys. There are several nuget packages out there to handle them. Otherwise you can strip the header/footer and decode the base64 yourself and import the key components with some of the built in X509 classes.</p>

<p>.NET does not natively support PEM format keys, and as such, I recommend using a reputable crypto library such as BouncyCastle, as they support PEM key parsing in their RSA algorithms.</p>

<p>This existing stackoverflow link describes how to import keys in BouncyCastle:
<a href=""https://stackoverflow.com/questions/11346200/reading-pem-rsa-public-key-only-using-bouncy-castle"">Reading PEM RSA Public Key Only using Bouncy Castle</a></p>
","208","<c#><.net><encryption><rsa><encryption-asymmetric>","1","2","1","2018-09-19 11:48:49","52404840","4","","246342","","2018-09-19 10:51:09","2018-09-19 10:40:59",""
"32469648","How many times can AesCryptoServiceProvider.GenerateIV be safely called before exhausting the number of unique IVs?","<p>I am confused. According to the below my IV ""MUST"" be unique for every round of encryption.</p>

<blockquote>
  <p>Properties of an IV depend on the cryptographic scheme used. A basic
  <strong><em>requirement is uniqueness</em></strong>, which means that no IV may be reused under
  the same key. For block ciphers, repeated IV values devolve the
  encryption scheme into electronic codebook mode: equal IV and equal
  plaintext result in equal ciphertext. - <a href=""https://en.wikipedia.org/wiki/Initialization_vector"" rel=""nofollow"">https://en.wikipedia.org/wiki/Initialization_vector</a></p>
</blockquote>

<p>I am using the <strong>.NET AesCryptoServiceProvider class</strong>. I am using <strong>GenerateIV</strong> to generate a new IV and sending that IV along with the cipher text to a remote endpoint which will then decrypt the packet using the IV and privately shared key.</p>

<p>My packet is XML, and thus will always start with the same leading text. (e.g. ""&lt;SomeTag ...&gt;unique_text&lt;/SomeTag&gt;"")</p>

<p>My key might live over thousands of encrypt/decrypt cycles during the five to ten minute life of the key. How many times can I call GenerateIV before I generate the same IV twice? Or phrased another way, how many cycles is GenerateIV good for? Five, ten, hundreds, thousands, millions?</p>

<p>Here is the code in question:</p>

<pre><code>_sessionKeys[_currentSessionKeyId].GenerateIV();
var key = _sessionKeys[_currentSessionKeyId].Key;
var iv = _sessionKeys[_currentSessionKeyId].IV;

ICryptoTransform encryptor = _sessionKeys[_currentSessionKeyId].CreateEncryptor(key,iv);
</code></pre>

<p>It seems that given that the IV generated by AesCryptoServiceProvider.GenerateIV is of finite size, then the number of times it can be called before generating a duplicate IV is also finite. But what is that finite number.</p>
","<p>There is 128 bits (16 bytes) in a IV. According to the Wikipeda page on the <a href=""https://en.wikipedia.org/wiki/Birthday_attack"" rel=""nofollow"">Birthday Attack</a> (the probability you will see a repeated value pulling randomly from a pool) to have a 0.0000000000000001% chance of seeing any number twice you must call the function about 26,000,000,000 times. To get it to be a 1% chance any number is seen twice you must call it 2,600,000,000,000,000,000 times.</p>

<p>This assumes GenerateIV has a ""good"" random number generator that gives a even distribution, which it should have.</p>
","194","<.net><aes><encryption-symmetric><encryption-asymmetric><initialization-vector>","0","2","1","2015-09-09 13:35:51","32472070","3","","497745","","2015-09-09 07:25:07","2015-09-09 01:38:31",""
"16683664","Partial encryption using AES - IOS application","<p>I would like to apply the encryption &amp; decryption technique in one my downloading concept. I want to do the partial encryption using AES 256. Is it possible to do it? is it have any algorithms available for partial encryption&amp;decryption.</p>

<p>Please suggest ideas.</p>

<p>Partial Encryption : it means i dont want to encrypt the full content of the file.It will do the encryption for some specified part of file.(like 10% or 20%) or some junks of file content. basically , I dont want to do the encryption to the entire content
THanks.</p>
","<p>I'm not aware of any algorithms that offer ""partial encryption"" functionality. Instead, I think you'll need to take charge of separating out the bytes you wish to encrypt and pass that through <a href=""https://stackoverflow.com/questions/1400246/aes-encryption-for-an-nsstring-on-the-iphone"">standard AES encryption code</a>.</p>
","193","<ios><ios5><encryption><aes><encryption-asymmetric>","1","2","1","2013-05-22 06:52:04","16685236","2","2","430278","","2013-05-22 05:10:01","2013-05-22 04:48:20",""
"3259926","Asymmetric Key Systems?","<p>I understand the basic system of public vs. private keys and how if I want to send a person something, I need their public key and they decrypt with their private key, but what kind of logical mechanisms are at play so that a private key can decrypt what a public key encrypted? For example, say I wanted to write my own asymmetric key system. How would I go about generating these keys in pairs and how would I implement them?</p>

<p>I know there's not just one way to do it, but I am just trying to wrap my head around any way of doing it.</p>
","<p>All these systems are based on mathematics. Check out </p>

<p><a href=""http://en.wikipedia.org/wiki/Rsa_encryption"" rel=""nofollow noreferrer"">http://en.wikipedia.org/wiki/Rsa_encryption</a></p>

<p>it goes through the math.</p>

<p>At one point I actually understood that stuff ;)</p>

<p>To generate the keys, you would need some extremely large prime numbers (for them to be useful in practice, you can do it with 7 and 11 if you want, but thats not so secure). </p>
","191","<encryption-asymmetric>","1","1","1","2012-05-31 20:16:43","3259958","1","","160527","","2012-05-31 20:16:43","2010-07-15 20:47:18",""
"53982539","Libsodium and Perfect Forward Secrecy","<p>I'm thinking of creating a mobile app that uses Libsodium's <code>crypto_box_easy</code>for encrypting and decrypting chat messages.</p>

<p>However, after reading a lot on the net, I found that one of the major flaws of public-private-key algorithms is that recorded data can be decrypted as soon as the recipients private key is leaked.</p>

<p>To avoid that, the use of Perfect Forward Secrecy (PFS) is suggested and I'm wondering, if Libsodium is already supporting PFS in the former mentioned function as individual <code>nonces</code> are used for each encryption.</p>

<p>Maybe someone can guide me on the difference between PFS and Libsodiums functions (if there are some) or help me by clarifying the relationship of nonces and PFS.</p>
","<p>There is no forward secrecy.</p>

<p><code>crypto_box_seal()</code> is slightly better, as the sender uses ephemeral keys. These messages can be signed using a long-term secret key in order to check that they come from the expected party, but that key being compromised will not allow decryption of previous messages.</p>

<p>However, if the recipient's secret key get compromised, recorded messages can still be decrypted.</p>

<p>For these reasons, the <code>box</code> construction doesn't exist in <a href=""https://libhydrogen.org"" rel=""nofollow noreferrer"">libhydrogen</a>. Instead, there are <a href=""http://www.noiseprotocol.org/"" rel=""nofollow noreferrer"">Noise</a>-based protocol implementations for secure key exchange, all with forward secrecy. These APIs will be backported to libsodium at some point.</p>

<p>But secure chat applications are far from trivial to build. The <a href=""https://github.com/signalapp/libsignal-protocol-c"" rel=""nofollow noreferrer"">signal</a> library is a much better starting point, even though the license may not be compatible with your expectations.</p>
","191","<encryption><public-key-encryption><encryption-asymmetric><nonce><libsodium>","0","0","1","2019-01-13 20:47:48","","1","","","","","2018-12-31 00:23:22",""
"12056368","Shibboleth user attribute encryption","<p>How does Shibboleth guarantee that 3rd parties do noet get access to user attributes contained in SAML 2.0 assertion exchanged between IdP and SP?</p>

<p>Is it correct that all user attributes are encrypted when transferred from IdP to SP? Are the user attributes encrypted with a symmetric key which is also included in the assertion but encrypted with the public key of the SP?</p>
","<p>I doubt that Shibboleth does anything to <em>guarantee</em> that user attributes are encrypted. Per the <a href=""https://www.oasis-open.org/committees/download.php/35387/sstc-saml-bindings-errata-2.0-wd-05-diff.pdf"" rel=""nofollow"">SAML 2.0 spec (pdf)</a>:</p>

<blockquote>
  <p>Message confidentiality of both SAML requests and SAML responses is OPTIONAL and depends on the environment of use.</p>
</blockquote>

<p>However, SAML 2.0 <a href=""http://docs.oasis-open.org/security/saml/v2.0/saml-sec-consider-2.0-os.pdf"" rel=""nofollow"">does permit the use of message-level confidentiality guarantees (pdf)</a>, including <a href=""http://www.w3.org/TR/xmlenc-core/"" rel=""nofollow"">XMLEnc</a> and <a href=""http://www.w3.org/TR/xmldsig-core/"" rel=""nofollow"">XMLSig</a> (both of which <a href=""https://wiki.shibboleth.net/confluence/display/SHIB2/IdPXMLSigEnc"" rel=""nofollow"">Shibboleth supports</a>) as well as custom profile or attribute types which may support other modes of message-level confidentiality.</p>
","189","<encryption><encryption-asymmetric><encryption-symmetric><saml-2.0><shibboleth>","0","1","1","2012-08-21 14:25:19","","1","","","","","2012-08-21 13:50:59","2012-08-22 06:01:18"
"11802690","Signing data with javascript why it doesn't work with these keys?","<p>I tested the js tool <a href=""http://shop-js.sourceforge.net/crypto2.htm"" rel=""nofollow noreferrer"">http://shop-js.sourceforge.net/crypto2.htm</a> mentionned here <a href=""https://stackoverflow.com/questions/5381528/sign-data-using-private-key-on-client-side-javascript"">Sign data using private key on client-side (javascript)</a></p>

<p>with a pfx certificate I self created for test I converted to pem but it doesn't work why ? Seems its length is greater than the sample on the site:</p>

<p>-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCoC+KNsgr9zbje
pKex2eyIwCjMJAFDeQXaHUU1e8ivuBhJ1TygvBgw/EjRMvNFjrebngdxpci1mXO/
iBuQ0bs4CE1lowLRO7O/amZ13WZVamPHSW1R5bhs+r7Atk3y+8lWc+EpxCPfxmyn
nOeyKvX5zykHJMfKojJYdGZ5YYulWHSDuHOHDy1FcKTb4nBSK5rJ0+DpjnU7GlfK
BV6MmLGbBsZxbxs5fYVf5pIbGg3CUQ5zAemEWTyXHwmpwRm48ruYsbWAPygdkwkc
wIUM+fC/B8M8uKHojWJgEDVaUpY8AYxCFpUTTxY9IJJYOfuvi9ef0PJ0/nh0GdqE
LihbjK/1AgMBAAECggEAL94SzqHkl58+Bc2JJxQYWGvEM0IeSgXzMModqLp10/fw
kzd2aaKqkWmLpGuK+ElK67z8CddbcL8hRXGTyJC1b6SNx2HDr6396Yx5WyGRwMrp
WR8FUMrK2eAi7eoAEjK+iy2++ZKxVVDEKop7RTkPj/T+jtZfQs0o4iFl/zVV/eba
F1k1RNE4KkYRe/EroIp2VbnhyMkfPqUSXSpQtZib9xjEqASHgyq/BElS1iQ8oxOl
8dipTgkR8SBEwU5v9XPrpeyp7V3aypd0dw1Yh0YrGufihNftQlr9u7OXX1qmJyMS
sPgypdUFQ7mfnjvz7a5dQvt6wuUifvIqrifpo7kUgQKBgQDaa9ZLh6VKLVbvB5jy
TSDADZRX8tsaQx49h0US6wn3tzOoh56kmTrEv/PNLEaC7KB7Fz6JqBvts8xRWEFA
zzWD5y1KzFYU1y4oCSgAvBFGkQwey8WCArvEHnEldIxhWYi5U/IRynk4ipRGwcAB
6rS6UvDcB0wjPgm8oWM26P7+SQKBgQDE9VXjWTqlHfBou58fwiXNg1zHS5LTtC6N
wD77DYuiCGbXCD3Y30+c7bm747Qu2vOlqK+/puO7r8kfT6U9Z9ktdyYuVh1LHAQ9
omiiwEddGJqkbmSWS2dPuXUcsVyX7NKJ64ZgUK8Y37UddUvQfzM6Poxpm7hK89iV
Pfpk3RiUTQKBgAK0y1bsO1QL88PKaE64PeujP29HhwdwRXOltWlimCEFmBJCe+i2
LVA6wJ6OKeF9ZQ+hXhj+iDoNvD5VxZkz+AnGV31Rws9HSz8bve8kZWJmcawAAlZ2
CjWH2wcHxqV+In+JVrp5s77LmMK3q9VaPxr/5BQV0w+suRopNb18bYxhAoGBAKAF
K9jg4BLS9kZBWZE17fzBI5oQPqSeGcy1SvYyFSZ6aQOAAK+5DzfStTqAUB5ZaedH
3DJ75z7QHTnBPeFcBEk6Kt0uvfIOOyvQTe8dBV4P5WR/BF5PuQo/BXVgbHhKwuun
Xa/XHcu5xa6/Y+9ryTUjKHWNPPg4kdj/V/am45dpAoGAf0FHF4WoTsSDqOH31dNF
mdG818Rkk8aFnlki2DYjOIOCRKv2bgscKDqRnKF7OOlMBxY0cYbGcwVTO/ed/hRv
nQgXrj07T+yx2IMdF4SFtUQZeSDIpgsWBYlOW3YS+iC71Cl9FyHqj8BaZ5L/PEsc
HDI8X3cMH7GMCZmYtduSmzI=
-----END PRIVATE KEY-----</p>

<p>-----BEGIN CERTIFICATE-----
MIIDqDCCApCgAwIBAgIRAM5AhzLyP3DHRQSCWdv8TAMwDQYJKoZIhvcNAQEFBQAw
aDELMAkGA1UEBhMCZnIxDjAMBgNVBAcMBXBhcmlzMS0wKwYJKoZIhvcNAQkBFh5z
aWduYXR1cmVlbGVjdHJvbmlxdWVAeWFob28uZnIxCzAJBgNVBAoMAmxrMQ0wCwYD
VQQDDAR0ZXN0MB4XDTEyMDgwMTE1MTIzMVoXDTEzMDgwMTE1MTIzMVowaDELMAkG
A1UEBhMCZnIxDjAMBgNVBAcMBXBhcmlzMS0wKwYJKoZIhvcNAQkBFh5zaWduYXR1
cmVlbGVjdHJvbmlxdWVAeWFob28uZnIxCzAJBgNVBAoMAmxrMQ0wCwYDVQQDDAR0
ZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqAvijbIK/c243qSn
sdnsiMAozCQBQ3kF2h1FNXvIr7gYSdU8oLwYMPxI0TLzRY63m54HcaXItZlzv4gb
kNG7OAhNZaMC0Tuzv2pmdd1mVWpjx0ltUeW4bPq+wLZN8vvJVnPhKcQj38Zsp5zn
sir1+c8pByTHyqIyWHRmeWGLpVh0g7hzhw8tRXCk2+JwUiuaydPg6Y51OxpXygVe
jJixmwbGcW8bOX2FX+aSGxoNwlEOcwHphFk8lx8JqcEZuPK7mLG1gD8oHZMJHMCF
DPnwvwfDPLih6I1iYBA1WlKWPAGMQhaVE08WPSCSWDn7r4vXn9DydP54dBnahC4o
W4yv9QIDAQABo00wSzAdBgNVHQ4EFgQUOq1xir7kKG9Op42730/t5FJzQFMwCwYD
VR0PBAQDAgeAMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDBDANBgkqhkiG
9w0BAQUFAAOCAQEAJAWRgsGlqfU4U6N35rZ+Y/ZVab5C9ddAwqKYuMwcl1VPFTxx
70WFaqA8qCg/4sOHsBONuBIYbHYOlMDSA07cHfJi6JCvEqs9UJzPXgJwCZZggqQ4
/oYHFtSF5MX1+FlVNubJ5W6iko8+CqyYWXtT1jE0Ei5kDKW7KZC7wb2e2PT22RA4
+kb+Qr7smiDItc+8eSfkREmuXw/bwU0ThTG3Uc97GhRv03RBgC50ccYJdpcfQwEX
paa2KIi5ve06rNpIPiQMFT5z5cTDYuyLks1RvEjqPQGLvIr0GYU07P2wL8s/Bemg
pq2FtTsQa8SJz4KSsNSEw6nqJWkdn4zZ8fiXiQ==
-----END CERTIFICATE-----</p>
","","183","<javascript><encryption><public-key-encryption><encryption-asymmetric>","0","","0","2012-08-03 20:15:59","","2","","-1","","2017-05-23 10:24:34","2012-08-03 20:15:59",""
"6429048","Exchanging Symmetric Keys","<p>I have a WinForms client that is sending encrypted data to a web service.  The WinForms client creates a Symmetric RijndaelManaged sessionKey and also has a ""hard-coded RSA asymmetric public key"".</p>

<p>I am using the EncryptedXml class which makes it really easy to package up my data.</p>

<p>The Web Service has both the private and public keys ""hardcoded"" and can successfully decrypt the SessionKey and then use it to decrypt the actual data I am sending.</p>

<p>This is pretty much handled automatically by the EncryptedData class.</p>

<p>The problem I am having is that on the Web Service end when I want to reply, I can't seem to figure out how to get the SessionKey that was sent over.  </p>

<p>Before I do any decrypting on the Web Service side, I can see the encrypted session key, but after I decrypt the XML, it's gone (and therefore I don't have any session keys for my reply).</p>

<p>Any ideas how I can get this unencrypted key?</p>
","<p>The reason that you cannot see the session key is that it is automatically decrypted and used. Normally it is considered part of the XML. If you want to get at it, just use</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.xml.encryptedxml.decryptencryptedkey.aspx"" rel=""nofollow"">encryptedxml.decryptencryptedkey</a></p>

<p>And you should be alright. Note that for all the less important security warnings, the code represented here is vulnerable to both man in the middle attacks and to a lesser extend to padding oracle attacks. It should help against most eavesdropping attempts though.</p>

<p>Finally, reusing a session key is considered pretty bad security practice too. If you reuse it, at least consider using an IV, e.g. a counter for each followup message.</p>
","178","<encryption><encryption-asymmetric><public-key-encryption><encryption-symmetric>","0","0","1","2011-06-21 20:46:56","","3","","","","","2011-06-21 16:55:03",""
"11336511","How to protect a signing key?","<p>I have a need to verify the integrity of a settings file. The file is an xml document. I understand you can use readily-available functions as discussed in <a href=""https://stackoverflow.com/questions/1974233/integrity-and-authenticity"">this stackoverflow post</a>. I am having trouble understanding how to protect the signing key however. If I sign an xml file to act as an integrity check on it's contents the user can easily disassemble my executable and get the key and/or the way the key is generated. What methods are available for me to easily protect the key? Key containers seem to be one option but I don't see how they protect the key and/or the method used to generate said key.</p>

<p>Thank you!</p>
","<p>When you load the key into a container you can specify that it is non-exportable. This will help protect it, but you will still need to store the file somewhere anyway, in case, for example, you get a new computer.</p>

<p>By the way, I did mention that marking it as non-exportable will <strong>help</strong> protect it, not guarantee its protection. It is still possible to extract a non-exportable key.</p>

<p>The only sure-fire method is to also ensure nobody has physical access to the computer. Physical access means you can do anything.</p>

<p>What this means in your case is the private key must be in a secure place as it is your digital signature. The public key to verify the signature is loaded into your program. It doesn't matter if your code is decompiled and the public key is extracted, as all it can be used for is to verify something was signed by your private key.</p>

<p>If somebody is going to the trouble to decompile your code to circumvent verification of the settings file, they will just change your code to skip the verification.</p>
","174","<c#><xml><encryption><encryption-asymmetric><integrity>","0","0","1","2012-07-05 00:18:39","11336540","1","","-1","","2017-05-23 12:20:05","2012-07-05 00:04:21",""
"12583028","Asymmetric encryption where the receiving party can decrypt - but must be completely unable to encrypt the data","<p>What I have is a client server scenario, and a payload (x).</p>

<ul>
<li>The server generates x and encrypts it : enc(x)</li>
<li>enc(x) is sent to the client</li>
<li>The client decrypts the data to get x</li>
</ul>

<p>However, the restrictions I must enforce are that:</p>

<ul>
<li>The encryption and decryption keys must be different</li>
<li>The client <em>must not</em> have the encryption key</li>
</ul>

<p>So straight up RSA is out the window, since you need both the public and private key to decrypt, and the public key lets you encrypt it.</p>

<p>So the objective is twofold: for the client to be able to decrypt a piece of data, ensuring that it came from a known source - but for the client to be incapable of producing its own encrypted version of the original payload.</p>

<p>C# ideally, but I can accept similar language answers.</p>

<p>Edit: I'm informed that only the private key is required to decrypt and not both keys - however there doesn't seem to be a way to make the RSACryptoServiceProvider in .Net do this.</p>
","<p>Just use two keypairs, one for encryption and one for signing. RSA is fine for this.</p>
","169","<c#><encryption><encryption-asymmetric>","0","1","2","2012-09-25 12:59:59","","7","","847383","","2012-09-25 12:59:59","2012-09-25 12:32:52",""
"12583028","Asymmetric encryption where the receiving party can decrypt - but must be completely unable to encrypt the data","<p>What I have is a client server scenario, and a payload (x).</p>

<ul>
<li>The server generates x and encrypts it : enc(x)</li>
<li>enc(x) is sent to the client</li>
<li>The client decrypts the data to get x</li>
</ul>

<p>However, the restrictions I must enforce are that:</p>

<ul>
<li>The encryption and decryption keys must be different</li>
<li>The client <em>must not</em> have the encryption key</li>
</ul>

<p>So straight up RSA is out the window, since you need both the public and private key to decrypt, and the public key lets you encrypt it.</p>

<p>So the objective is twofold: for the client to be able to decrypt a piece of data, ensuring that it came from a known source - but for the client to be incapable of producing its own encrypted version of the original payload.</p>

<p>C# ideally, but I can accept similar language answers.</p>

<p>Edit: I'm informed that only the private key is required to decrypt and not both keys - however there doesn't seem to be a way to make the RSACryptoServiceProvider in .Net do this.</p>
","<ol>
<li>Use something like AES to encrypt the data</li>
<li>sign the encrypted data with RSA</li>
<li>send the encrypted + signed data to your client</li>
<li>since AES uses a shared key the client can decrypt the data</li>
<li>the client can verify the signature using the public RSA key</li>
</ol>

<p>The drawbacks are :</p>

<ol>
<li>The client can reproduced an encrypted message but it won't be signed (since only you have the private key).</li>
<li>the client can replace the public key on his end with his own key pair to sign/verify the message.</li>
</ol>
","169","<c#><encryption><encryption-asymmetric>","0","4","2","2012-09-25 12:59:59","","7","","847383","","2012-09-25 12:59:59","2012-09-25 12:32:52",""
"32263104","Implementing Asymmetric encryption for Objective C using Truststore","<p>I'm trying to do an encryption method for ios mobile platform(Objective C) which on android(Java) is using <a href=""http://www.java-redefined.com/2013/11/asymmetric-key-encryptiondecryption.html"" rel=""nofollow"">this method</a></p>

<p>Need guidance on how to apply that method for ios. Am not very sure on how to port it to xcode to use it.</p>

<p>Thanks in advance :) </p>
","<p>You could try having a look at this:</p>

<p><a href=""https://github.com/aerogear/aerogear-crypto-ios"" rel=""nofollow"">https://github.com/aerogear/aerogear-crypto-ios</a></p>

<p>It's a nice wrapper over the underlying crypto functionalities in iOS.</p>
","166","<android><ios><encryption-asymmetric><truststore>","0","0","1","2015-08-28 04:13:36","","1","","","","","2015-08-28 03:57:20",""
"13596883","Coefficient matrix in AES in Decryption stage","<p>I know that in AES, in encryption stage, in MixColumns, we use [4x4] coefficient matrix with values having only (00,01,02,03). Does anyone know what values are used for coefficient matrix in InvMixColumns at decryption stage? I know those coefficients occur by taking inverse of 00,01,02,03 in rajindel field. I calculated those as  </p>

<pre><code>00----------&gt;00  
01----------&gt;01
02----------&gt;141
03----------&gt;246  
</code></pre>

<p>The association shown above is coefficient--------->Its inverse in Rajindel field represented in decimal. Are the values correct? I need some confirmation. Thanks in advance!!  </p>
","<p>The polynomial coefficients of AES are actually:</p>

<pre><code>03, 01, 01, 02
</code></pre>

<p>Which can be inverted to:</p>

<pre><code>0B, 0D, 09, 0E
</code></pre>

<p>See also section 4.3 of <a href=""http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf"" rel=""nofollow"">FIPS 197</a>, particular equations (4.14), (4.15), (5.5), and (5.9).</p>

<p>Note that it is not as simple as inverting each coefficient in the field GF(2<sup>8</sup>). Instead, you invert the <em>polynomial</em> in the whole ring of polynomials modulo x<sup>4</sup>+1.</p>
","163","<encryption><aes><encryption-asymmetric><encryption-symmetric>","1","1","1","2012-11-28 07:27:59","13599748","0","","482262","","2012-11-28 07:27:30","2012-11-28 02:38:57",""
"20903182","Private key encryption in .NET 4.0 of a very large number","<p>In my scenario, I would like to encrypt a very big  number (10^27) using a private key and later be able to decrypt it using a public key. The problem I have is that I want to keep the size of the encrypted text as small as possible.</p>

<p>I know that .NET has support for public key encryption (RSACryptoServiceProvider), but the encrypted text gets so huge.</p>

<p>Would it work to instead  treat the private key as a public key?</p>

<p>Would Elliptic curve cryptography produce a smaller output?</p>
","<p>First of all, if you want to achieve confidentiality you should always encrypt with the public key, not the private key. RSA encryption is not defined for encryption with the private key, and the results may vary (especially the kind of padding that is applied).</p>

<p>For direct RSA encryption, the size of the encrypted message is identical to the modulus. Now the modulus should be at least 2048 bits by now, and your message is only about (27/3)*10=90 bits. So RSA would have a large overhead, independent on the key used. Using ECIES is therefore likely to give significant benefits.</p>
","161","<c#><.net><encryption><encryption-asymmetric><elliptic-curve>","3","2","1","2014-01-03 12:10:53","20903359","8","1","","","","2014-01-03 12:00:41",""
"29878608","Random function in Javascript considered insecure. Does it really matter?","<p>I am writing some code that shall run in a browser, which uses Javascript random function(s) for key generation. </p>

<p>Now reading in several forums that this is considered to be not secure, due to <strong>bad random number generation</strong>.</p>

<p>Now, what if I only create <strong>one key pair</strong> per browser/computer. So, having a distributed scenario where there is actually <strong>no sequence of random numbers</strong> per browser. Will this fundamentally change the problematic situation? Thanks for your thoughts.</p>
","<p>Random numbers are generated in Javascript by the amount of milliseconds since 1st of January 1970(UNIX Timestamp). Then Javascript just takes the first few values and that is your random number. i.e. </p>

<pre><code>Math.floor((Math.random() * 10) + 1);
</code></pre>

<p>Makes a random number between 1 and 10.</p>
","156","<javascript><html5><security><public-key-encryption><encryption-asymmetric>","0","0","2","2015-04-27 12:21:10","","1","","","","","2015-04-26 14:03:39",""
"29878608","Random function in Javascript considered insecure. Does it really matter?","<p>I am writing some code that shall run in a browser, which uses Javascript random function(s) for key generation. </p>

<p>Now reading in several forums that this is considered to be not secure, due to <strong>bad random number generation</strong>.</p>

<p>Now, what if I only create <strong>one key pair</strong> per browser/computer. So, having a distributed scenario where there is actually <strong>no sequence of random numbers</strong> per browser. Will this fundamentally change the problematic situation? Thanks for your thoughts.</p>
","<p>Yes it matters. If an attacker generates random numbers at the same time as a genuine user, they can predict what is generated and retrieve they key. Even if the clocks aren't fully synchronised, an attacker could generate a range around the UNIX timestamp when the key was known to have been generated and then try each one in turn.</p>

<p><strong>Solution:</strong> Use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto"" rel=""nofollow"">window.crypto</a> to generate a secure random number using the crypto library.</p>

<blockquote>
  <p>The Crypto interface represents basic cryptography features available
  in the current context. It allows access to a cryptographically strong
  random number generator and to cryptographic primitives.</p>
</blockquote>
","156","<javascript><html5><security><public-key-encryption><encryption-asymmetric>","0","2","2","2015-04-27 12:21:10","","1","","","","","2015-04-26 14:03:39",""
"5074338","how to manage an asymmetric key inside a key container for an enterprise software?","<p>hello
i have an educational software that should be installed on different PCs across the enterprise.
my program is using a 5000 text, xml, html files as source of it's content. i don't want my source to be tampered with, copied or used illegally. what i intend to do is to encrypt my source seperately and then put the encrypted files in a folder inside of my app so later my app can read and decrypt each file that is requested by user. the app will be installed and used anywhere.
but the problem is that to secure and store the encryption key inside my application i have to use a key container while as far as i remember(correct me if i'm wrong) they're machine based and can't be used on different machines while i need my key to be fixed for all the installed copies on any PC. i know a lot of softwares using such a architecture but i don't know how do they do that. </p>

<p>any idea?</p>
","<p>If you put the key on every PC (and you have to if you want them to be able to run your software) then everyone will have it and the encryption is pointless.</p>

<p><em>but the problem is that to secure and store the encryption key inside my application</em></p>

<p>Yeah, you can encrypt that key with another key and then turtles all the way down... What you are trying to do is impossible. Don't waste your time. You will gain no security whatsoever and the only thing you will do is waste cycles and annoy users making their computers slower.</p>
","154","<security><c#-4.0><code-access-security><encryption-asymmetric>","0","1","1","2011-02-22 06:34:00","","0","","","","","2011-02-22 05:22:17",""
"45989583","Ad-Hoc SSL in Angular (and backend)","<p>Most of the frontend web frameworks are just a few years old, and are rapidly changing. Are there any recent JS packages or libraries that do SSL very well?</p>

<p>It can cost quite a bit of money to enable SSL with cloud hosting platforms, registrars, etc.</p>

<p>Whatever private keys our browsers use for their typical SSL behavior should be accessible to a javascript app running in that browser, no?</p>

<p>The ideal situation would be to encode information within Javascript so that, on the backend server, in some backend framework, it was indistinguishable (from a developer's perspective) from standard browser-implemented SSL.</p>

<p>SO has some posts about it, but none of them are very recent. <a href=""https://crypto.stackexchange.com/questions/1150/encrypting-and-obscuring-data-between-site-user-without-ssl"">This SO post has perspectives from 2011 through 2014</a>, and <a href=""https://stackoverflow.com/questions/44887294/rsa-library-with-angular"">this SO post from circa 2013</a>.</p>

<p>If someone built something that did this in Javascript, then, for example, ideally, an Angular app could incorporate it by putting something in <code>app.config()</code> regarding <code>$routeProvider</code> or <code>$httpProvider</code></p>
","","148","<angularjs><ssl><encryption><public-key-encryption><encryption-asymmetric>","0","","0","2017-08-31 20:27:11","","4","","","","","2017-08-31 20:27:11",""
"20186618","SQLCipher with asymmetric encryption","<p>Is it possible to encrypt data with SQLCipher using a private key? The intention is to store some sensitive data encrypted on the device that can be decrypted for debugging purposes. Unfortunately the SQLCipher documentation just mentions sqlite3_key() for symmetric encryption.</p>
","<p>SQLCipher only performs symmetric authenticated encryption, encrypting each page within the database.  You might consider moving your sensitive information to a SQLCipher database, while managing your non-sensitive information in a separate plain-text database.  SQLCipher can operate on plain-text databases as long as no key is provided.</p>
","145","<encryption-asymmetric><sqlcipher>","0","1","1","2013-11-25 21:52:17","20204107","0","","","","","2013-11-25 07:12:31",""
"26006834","Encryption/Decryption crash","<p>I have to write a ""encryption"" program for my C# intro class.  I'm encountering 2 problems:</p>

<ol>
<li>When a negative is entered or it calculates a negative during the decryption process, it crashes. - it returns and unhandled exception error: System.FormatException: Input string was not in a correct format.</li>
<li>The decryption should be the reverse of the encryption without using the original variable.  How do you reverse a remainder calculation?  </li>
</ol>

<p>I know it's part of the do while loop that's the issue, I'm just not sure how to continue to prompt for a value if a negative is entered and if encountered during the decryption calculation to keep it from crashing.  Any guidance would be much appreciated.  Thanks for taking a look at it!</p>

<pre><code>public class MainClass
{
  public static void Main(string[] args)
    {
    int num = 0;
    int dnum = 0;
      do
      {
      Console.Write(""Please enter a non-negative integer to encrypt: "");
  num = Convert.ToInt32(Console.ReadLine());
      string numstr = Convert.ToString(num);
      string num1 = Convert.ToString(numstr.Substring(0, 1));
      string num2 = Convert.ToString(numstr.Substring(1, 1));
      string num3 = Convert.ToString(numstr.Substring(2, 1));
      string num4 = Convert.ToString(numstr.Substring(3, 1));
      int enum1 = ((Convert.ToInt32(num1) + 7) % 10);
      int enum2 = ((Convert.ToInt32(num2) + 7) % 10);
      int enum3 = ((Convert.ToInt32(num3) + 7) % 10);
      int enum4 = ((Convert.ToInt32(num4) + 7) % 10);
      Console.WriteLine(""Encrypted Integer: {0:D4}"", (1000 * enum3 + 100 * enum4 + 10 * enum1 + enum2));

      Console.Write(""Please enter a non-negative integer to decrypt: "");
      dnum = Convert.ToInt32(Console.ReadLine());
      string dnumstr = Convert.ToString(dnum);
      string num1d = Convert.ToString(dnumstr.Substring(0, 1));
      string num2d = Convert.ToString(dnumstr.Substring(1, 1));
      string num3d = Convert.ToString(dnumstr.Substring(2, 1));
      string num4d = Convert.ToString(dnumstr.Substring(3, 1));
      int dnum1 = ((Convert.ToInt32(num1d) - 7) * 10);
      int dnum2 = ((Convert.ToInt32(num2d) - 7) * 10);
      int dnum3 = ((Convert.ToInt32(num3d) - 7) * 10);
      int dnum4 = ((Convert.ToInt32(num4d) - 7) * 10);
      Console.WriteLine(""Decrypted Integer: {0:D4}"", (1000 * dnum1 + 100 * dnum2 + 10 * dnum3 + dnum4));
        } while (num &gt; 0);
   } // end Main
}// end class
</code></pre>
","<p>The policy is, do not proceed until user enters a 'correct' input. Here is code sample, note that I use <code>numstr[0]</code> - an index to get the first char instead of <code>numstr.Substring(0, 1)</code> so the code looks cleaner.</p>

<pre><code>        int num = 0;
        bool isValid = false;
        do
        {
            Console.Write(""Please enter 4 digits to encrypt: "");
            string numstr = Console.ReadLine();
            if (numstr.Length == 4)
            {
                isValid = Char.IsDigit(numstr[0]) &amp;&amp; Char.IsDigit(numstr[1]) 
                       &amp;&amp; Char.IsDigit(numstr[2]) &amp;&amp; Char.IsDigit(numstr[3]);
            }
            if (isValid)
                num = Convert.ToInt32(input);
        }
        while (!isValid);
</code></pre>

<p>As for your 2nd question, you <em>can't</em> use multiplication to reverse a remainder calculation <code>((d+7)%10)</code>, you should again use remainder operator <code>(d+10-7)%10</code>, the additional 10 is added to keep it from getting negative result.</p>

<p>There is another bug in your decryption process, you can turn to your debugger for help. </p>
","145","<c#><modulus><encryption-asymmetric>","0","0","1","2014-09-24 03:10:02","26007896","3","","4061253","","2014-09-24 01:14:52","2014-09-24 00:50:17",""
"20463883","implication of lacking ind-cca security","<p>I was wondering if somebody could tell me what the impication is of an encryption scheme lacking ind-cca or ind-cpa security.  For example, the ElGamal scheme is known to lack ind-cca security.  The Helios voting protocol uses ElGamal to encrypt each ballot - what I am have a difficult time understanding is what the implication is of ElGamal having an efficient ind-cpa adversary and ElGamal being used in Helios.</p>
","","145","<public-key-encryption><encryption-asymmetric><helios><elgamal>","2","","0","2013-12-09 05:39:17","","1","","","","","2013-12-09 05:39:17",""
"46473100","golang encrypt cipher.Block / AES key itself","<p>I'm using an AES key of type <code>cipher.Block</code> generated by using <code>crypto/aes</code> package with below func:</p>

<pre><code>aesBlock, err := aes.NewCipher(randKey)
</code></pre>

<p>I'm using this to encrypt a particular set of data but afterward I want to encrypt <code>aesBlock</code> itself with a Public Key, so that I can store and later decrypt with the asymmetric Private Key. However, I'm having a tough time finding the best way to encrypt <code>aesBlock</code>. Obviously this needs to be reversible so that I can use it to decrypt the previously mentioned data.</p>

<p>The <a href=""https://golang.org/pkg/crypto/rsa/#EncryptOAEP"" rel=""nofollow noreferrer"" title=""EncryptOAEP"">func EncryptOAEP</a> from <code>crypto/aes</code> seems like a good fit, as it takes a <code>*PublicKey</code>, however the <code>msg</code> parameter is of type <code>[]byte</code> and my AES key is of type <code>cipher.Block</code>. Not sure a direct conversion is possible or even a good idea.</p>

<p>Any ideas?</p>
","<p>As Adrian pointed out in the comments, the solution is simpler than I thought. All you need to do is encrypt and store the <code>randKey</code>. Regenerating the <code>aesBlock</code> with decrypted <code>randKey</code> produces the same results.</p>
","141","<go><encryption><aes><encryption-asymmetric>","-1","0","1","2017-09-28 16:07:44","","3","","","","","2017-09-28 15:33:19",""
"13847997","simple crypto lib/tool for config settings","<p>My app stores db connection-strings in an xml config file that is stored under source-control ( svn ).</p>

<p>When deployed in prod, my app needs to retrieve the encrypted strings and decrypt them.</p>

<p>The ability to perform ad-hoc encryption should be limited to the prod operations group -- nobody else should know the raw prod db connection-strings.  Only the encrypted prod db connection-strings are checked-in to source-control</p>

<p>The app's ability to decrypt the strings be limited to its deployment in prod.  ( In dev/qa , the config file contains connection strings to non-prod dbs , and these are not encrypted. )</p>

<p>I am wondering if a public/private key certs based mechanism could be adapted for this purpose ?   </p>

<p>Or what is a minimalist design ?</p>

<p>Are libs/tools available to this end ? </p>
","<p>For Asp.Net applications, <code>reg_iis</code> can encrypt portions of the web.config file for you.</p>

<blockquote>
  <p>aspnet_regiis -pef MySecrets .</p>
</blockquote>

<p><a href=""http://odetocode.com/blogs/scott/archive/2006/01/08/encrypting-custom-configuration-sections.aspx"" rel=""nofollow"">http://odetocode.com/blogs/scott/archive/2006/01/08/encrypting-custom-configuration-sections.aspx</a></p>

<p>There's a good article on Code Project that outlines how to use that same mechanism for other types of .NET applications:</p>

<blockquote>
  <p>ASP.NET offers the possibility to encrypt sections in the web.config automatically. It seems it is not possible for WinForm applications to do that for the app.config. And this is true for a part: WinForms does not offer tools to configure it. But it can be done. It is all .NET. Isn't it? So how do we do it?</p>
</blockquote>

<p><a href=""http://www.codeproject.com/Articles/18209/Encrypting-the-app-config-File-for-Windows-Forms-A"" rel=""nofollow"">http://www.codeproject.com/Articles/18209/Encrypting-the-app-config-File-for-Windows-Forms-A</a></p>
","139","<encryption><connection-string><certificate><encryption-asymmetric>","0","1","1","2012-12-12 20:34:39","","0","","1236694","","2012-12-12 20:34:39","2012-12-12 20:25:29",""
"2531015","Verify p2p node","<p>Hey guys, I have been working on a p2p namespace for some of my programs.  I created a system to encrypt/decrypt the packets send/received with the class.  I was using the basic public private key system: 1) encrypt the data with Symmetric encryption 2) encrypt the symmetric key with RSA.  Then do the opposite when you decrypted..</p>

<p>I was wondering though, how would you verify if the packet was coming from where it said it was.  I was going to use a basic certificate system (where you encrypt with your private RSA key, then they decrypt it with your public key), but I don't know how to do this with C#.  I am using the RSACryptoServiceProvider class.</p>

<p>Does anyone know how do this?
Thanks,
Max</p>
","<p>The standard protocol for sending packets securely is SSL/TLS. The RFCs for <a href=""http://www.rfc-editor.org/rfc/rfc5246.txt"" rel=""nofollow noreferrer"">TLS</a> and <a href=""http://www.rfc-editor.org/rfc/rfc4347.txt"" rel=""nofollow noreferrer"">DTLS</a> (and <a href=""ftp://ftp.rfc-editor.org/in-notes/rfc5746.txt"" rel=""nofollow noreferrer"">a fix for a recent flaw</a>) are the way to go. They should also be considered a resource for those learning and looking for ideas.</p>

<p>It sounds like you're a looking for a <a href=""http://en.wikipedia.org/wiki/Message_authentication_code"" rel=""nofollow noreferrer"">MAC</a>. A very efficient set of crypto primitives that perform both encryption and MACing at the same time are the <a href=""http://www.rfc-editor.org/rfc/rfc5116.txt"" rel=""nofollow noreferrer"">AEAD</a> ciphers, see for example <a href=""http://csrc.nist.gov/publications/nistpubs/800-38C/SP800-38C_updated-July20_2007.pdf"" rel=""nofollow noreferrer"">CCM</a> and <a href=""http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf"" rel=""nofollow noreferrer"">GCM</a> block cipher modes.</p>

<p>I do not believe .NET supports any AEAD ciphers. You can also use the slower but perfectly adequate <a href=""http://www.rfc-editor.org/rfc/rfc2104.txt"" rel=""nofollow noreferrer"">HMAC</a> algorithm which is supported in .NET, or you can use the <a href=""http://www.bouncycastle.org/csharp/"" rel=""nofollow noreferrer"">bouncycastle C# library</a> which does support AEAD ciphers.</p>
","138","<c#><encryption><networking><encryption-asymmetric>","0","1","1","2010-03-28 12:57:07","2532950","1","","","","","2010-03-27 21:35:55",""
"26536374","Asymmetric encryption with multiple decryption results","<p><strong>Edit</strong></p>

<p>I am trying to develop a password managing tool for companies. My idea is that the passwords in some kind of database are encrypted with a master password which only the admin has.</p>

<p>Per department in a company there should be an own password, which lets the users of that department only access their passwords.</p>

<p>Lets look at an example.</p>

<ul>
<li>Department A
<ul>
<li>Billing system, Password: ""Hello""</li>
</ul></li>
<li>Department B
<ul>
<li>Mail, Password: ""World""</li>
</ul></li>
</ul>

<p>The passwords are encrypted with the master password of the admin. Lets just assume it is 0000. So in the database there would be something like this</p>

<ul>
<li>Department A
<ul>
<li>Billing system, Password: encrypt(""Hello"",0000,'A')</li>
</ul></li>
<li>Department B
<ul>
<li>Mail, Password: encrypt(""World"",0000,'B')</li>
</ul></li>
</ul>

<p>Furthermore, the password of department A would be 9999 and of department B 7777. Now I am searching for a possibility to decrypt the password of the billing system with the password 9999 and decrypt the mail password with 7777. But it should <strong>not</strong> be possible to decrypt the mail password with 9999 and vice versa.</p>

<ul>
<li>Billing system: decrypt(encrypt(""Hello"",0000,'A'), 9999) = ""Hello""</li>
<li>Billing system: decrypt(encrypt(""Hello"",0000,'A'), 7777) != ""Hello""</li>
<li>Mail: decrypt(encrypt(""World"",0000,'B'), 9999) != ""World""</li>
<li>Mail: decrypt(encrypt(""World"",0000,'B'), 7777) = ""World""</li>
</ul>

<p>Not that this it hard enough, the admin user must have the possibility to decrypt any password with his master password 0000</p>

<ul>
<li>Billing system: decrypt(encrypt(""Hello"",0000,'A'), 0000) = ""Hello""</li>
<li>Mail: decrypt(encrypt(""World"",0000,'B'), 0000) = ""World""</li>
</ul>

<p>I hope that my ideas are getting clearer now...</p>
","<p>Preface: you cannot design a cryptographic system without knowing its full intent and purpose, so me giving any snippet of advice may be wholly unsuitable for your eventual end goal. Also, you may rather want to ask the experts at <a href=""http://security.stackexchange.com"">http://security.stackexchange.com</a> or <a href=""http://crypto.stackexchange.com"">http://crypto.stackexchange.com</a>. Also, I have more of a general knowledge of cryptography and this is a general programming forum, so take the below with a grain of salt.</p>

<hr>

<p>Having said that, the usual way to store one piece of information in an encrypted form but make it accessible to multiple parties using different passwords is to use intermediate encryption keys. You have your plaintext. You generate a random key and use that to encrypt the plaintext. You now encrypt the randomly generated key with the user's personal password and store the result.</p>

<pre><code>plaintext  = 'Hello World'
key        = make_random_string(128)
ciphertext = encrypt(plaintext, key)
keys = {
    user1: encrypt(key, user1password),
    user2: encrypt(key, user2password),
    ...
}
</code></pre>

<p>To decrypt, you use the user's password to decrypt the key to then decrypt the actual information.</p>

<pre><code>key       = decrypt(keys.user1, user1password)
plaintext = decrypt(ciphertext, key)

print plaintext
</code></pre>

<p>This indirection allows you to share the same piece of information among several users. In practice you'd probably use symmetric encryption to encrypt the plaintext with the random key, and asymmetric encryption to encrypt the random key with each user's public key. That means in practice, every time you generate a new random symmetric encryption key, the system needs to create a copy of it individually encrypted with each user's public key that should have access to it.</p>

<p>This also allows you to irretrievably revoke an individual user's access to a specific piece of information, simply by nuking that users version of the random encryption key.</p>
","137","<encryption><encoding><public-key-encryption><decoding><encryption-asymmetric>","0","1","1","2014-10-24 04:58:48","26540276","5","","1778320","","2014-10-24 00:10:44","2014-10-23 19:59:33",""
"17012295","Encrypting data symmetrically and asymmetrically","<p>As far as I have learned so far, asymmetric encryption is too costly for long data. Additionally, from a technical perspective, it's not even possible to encrypt arbitrarily large portions of data (the size of the data is limited by the size of the key being used).</p>

<p>As far as I know the usual workaround is to create a (random) key, use that key to encrypt the data symmetrically, and then only encrypt this key using an asymmetric algorithm.</p>

<p>Now I have two questions:</p>

<ol>
<li>Is the approach I described so far correct?</li>
<li>What do I do with the encrypted key? Of course, I store or send the encrypted data somewhere, but what about the key? If I understand it correctly, I need to store this key as well, right?</li>
</ol>
","<p>You are basically correct.  Create a random key.  Encrypt the key itself with the Public Key of the person at the other end, Bob.  Send Bob the encrypted key, which they will be able to decrypt with their Private Key.  This is the asymmetric encryption part.</p>

<p>You also use your key to encrypt that large amount of data (but not too large).  Now you send Bob the encrypted data.  Bob has the encrypted data and the (decrypted) key and so can use symmetric decryption to extract the data from the cyphertext you sent.</p>

<p>Once you have sent the data and key, you should probably securely destroy the key and not use it again unless you have a good reason to keep it.  Generate a new key the next time you need to send something.  Even if you are sending something to Bob again, use a new key.  Even if you are resending the same data to Bob again, use a new key.  Sending too much data on a single key can allow attacks on your data.</p>
","132","<encryption><encryption-symmetric><encryption-asymmetric>","0","1","1","2013-06-09 20:30:55","17013880","0","","","","","2013-06-09 17:30:48","2014-03-17 13:11:54"
"34778931","How to use asymmetrical encryption to receive data in javascript?","<p>I understand the concept of asymmetrical encryption in the context of the client wanting to <em>send</em> data securely to the server. The server sends a public key to the client that is used to encrypt the data. The server decrypts the message using it's private key. In this context, everything makes sense, since the private key is only accessible by the server.</p>

<p>But what if the client wants to <em>receive</em> data securely? The same concept could apply in the opposite direction (the front end shares the public key and possess the private key), except the private key would be available to anyone, since the source code in javascript is available in the web browser and it would defeat the purpose of encryption...</p>

<p>Surely there is a solution for this. When searching I have not found a clear answer to my question, although many people mentioned HTTPS. I would also like to know why and how does it work and where my knowledge is flawed.</p>

<p>How does a client securely receive data from a server?</p>
","<p>As you have already mentioned, HTTPS is the solution here.  You have already covered how this works but you are just missing a few key details.</p>

<p>HTTPS use asymmetric encryption to establish the initial encrypted communication.  Subsequent communication is actually performed using symmetric encryption as it is more performant and more secure for a smaller key size.  So the initial hand shake uses the server's public key to exchange a shared secret key that both the server and client will then use for all communication.</p>

<p>Additionally, the public key used by the server is generally signed by a trusted certificate authority whose key your browser already knows.  This allows your web browser to verify the server's public key so that you know that the communication has not been intercepted and altered by an attacker sitting between you and the server.  Otherwise an attacker could just intercept all communication and send you a different public key claiming to be the server's public key, and how would you know the difference?</p>

<p>Once the encrypted channel is established, anything the client sends to the server is encrypted, and likewise, anything the server sends to the client is encrypted.  The encryption guarantees here ensure both confidentiality and integrity of all communication.</p>

<p>So by using HTTPS, the client is securely receiving data from the server, as well as securely sending data to the server, all without embedding any keys directly into the Javascript code.</p>
","132","<javascript><encryption><frontend><public-key-encryption><encryption-asymmetric>","4","6","2","2016-01-13 23:54:06","34778998","0","3","","","","2016-01-13 23:18:33",""
"34778931","How to use asymmetrical encryption to receive data in javascript?","<p>I understand the concept of asymmetrical encryption in the context of the client wanting to <em>send</em> data securely to the server. The server sends a public key to the client that is used to encrypt the data. The server decrypts the message using it's private key. In this context, everything makes sense, since the private key is only accessible by the server.</p>

<p>But what if the client wants to <em>receive</em> data securely? The same concept could apply in the opposite direction (the front end shares the public key and possess the private key), except the private key would be available to anyone, since the source code in javascript is available in the web browser and it would defeat the purpose of encryption...</p>

<p>Surely there is a solution for this. When searching I have not found a clear answer to my question, although many people mentioned HTTPS. I would also like to know why and how does it work and where my knowledge is flawed.</p>

<p>How does a client securely receive data from a server?</p>
","<p>SSL is just another layer of security (at least to <a href=""https://www.youtube.com/watch?v=pDmj_xe7EIQ"" rel=""nofollow"">some extent</a>). Any <a href=""https://en.wikipedia.org/wiki/Certificate_authority"" rel=""nofollow"">CA</a> is <strong>not</strong> inherently secure. You may want to use PKI along with the usual symmetric algorithms like <a href=""https://gist.github.com/vidul-nikolaev-petrov/8f01ec4bd2e06e373c32"" rel=""nofollow"">this</a> (a sample usage), where (depending on the data size - PKI serves to encrypt small data chunks) the public key encrypts preliminarily generated symmetric key (which encrypts some data) on the sender side and the private key on the receiver side decrypts the symmetric key (which on its turn decrypts the data).</p>
","132","<javascript><encryption><frontend><public-key-encryption><encryption-asymmetric>","4","0","2","2016-01-13 23:54:06","34778998","0","3","","","","2016-01-13 23:18:33",""
"11840660","Does two symmetric encryption algorithms return the same result in two different OS and Programming Framework?","<p>Simply in .Net  I encrypt the the Id By DES a Symmetric Encryption algorithm and specific Key in .NET . 
I'm wondering could my partner in Java  decrypt just by knowing the name of algorithm and the key ?</p>

<p>Thanks </p>
","<p>If the implementations are correct, then - yes.</p>
","131","<java><.net><encryption><encryption-asymmetric>","0","0","3","2012-08-07 06:54:33","11840693","1","","874499","","2012-08-07 06:54:33","2012-08-07 06:48:34",""
"11840660","Does two symmetric encryption algorithms return the same result in two different OS and Programming Framework?","<p>Simply in .Net  I encrypt the the Id By DES a Symmetric Encryption algorithm and specific Key in .NET . 
I'm wondering could my partner in Java  decrypt just by knowing the name of algorithm and the key ?</p>

<p>Thanks </p>
","<p>yes he can, that's the point of an algorithm. There are some encryption standards which require additional data, lika padding in RSA, but that does not apply to DES</p>
","131","<java><.net><encryption><encryption-asymmetric>","0","0","3","2012-08-07 06:54:33","11840693","1","","874499","","2012-08-07 06:54:33","2012-08-07 06:48:34",""
"11840660","Does two symmetric encryption algorithms return the same result in two different OS and Programming Framework?","<p>Simply in .Net  I encrypt the the Id By DES a Symmetric Encryption algorithm and specific Key in .NET . 
I'm wondering could my partner in Java  decrypt just by knowing the name of algorithm and the key ?</p>

<p>Thanks </p>
","<p>If you are using same algorithm and same key, you will get the same output. It does not matter which platform you are using.</p>
","131","<java><.net><encryption><encryption-asymmetric>","0","0","3","2012-08-07 06:54:33","11840693","1","","874499","","2012-08-07 06:54:33","2012-08-07 06:48:34",""
"37575947","Asymmetric on the fly encryption with Nginx","<p>I want to encrypt a big static file on the server with Nginx when it's serving it. I want the encryption to be done with the public key sent in the request as a header and I want this endpoint to be accessible only to specific users (if someone finds the url, he should get <code>access denied</code> if he's not allowed to access the file.) I want Nginx to serve these encrypted files with random access.</p>

<p>First question: Is it possible at all? (for the authorization part I'm all ears to know if there's any solution, my authentication and authorization is done in Django, session keys stored in postgre, but I have no idea if it's feasible to share it with nginx.) Can a lua plugin for nginx read session data from postgre (or redis) and do the authorization checks with good performance?</p>

<p>Second question: How?</p>

<p>One possible solution I though about is using different certificate files (generated with passwords by django) to serve files as https. But I have no idea if it's possible to use different certificate files dynamically generated based on URI or not and I have no idea if nginx can serve files with asymmetric encryption over https or if https protocol supports it at all even if client is a custom client other than normal browsers than can parse data whatever way needed.</p>

<p>Another possible solution is writing a Lua plugin for Nginx but that'd be extremely expensive solution for me considering my resources. But I'd be thankful if someone could tell me if it's possible at all even with a custom plugin or not.</p>
","","131","<encryption><nginx><public-key-encryption><encryption-asymmetric>","0","","0","2016-06-01 18:18:52","","6","","1349278","","2016-06-01 18:18:52","2016-06-01 18:11:49",""
"18676288","asymmetric encryption for text field","<p>I updated my question to reflect the sql encryption rather than asp.net.</p>

<p>I created my key in sql </p>

<pre><code>USE DatabaseName
GO
CREATE ASYMMETRIC KEY MyKey
WITH ALGORITHM = RSA_2048
ENCRYPTION BY PASSWORD = 'Password1'
</code></pre>

<p>Then I Modified the keys private key password</p>

<pre><code>ALTER ASYMMETRIC KEY MKey
WITH PRIVATE KEY
(ENCRYPTION BY PASSWORD = 'ADifferentPassword',
DECRYPTION BY PASSWORD = 'Password1')
</code></pre>

<p>I would like to know why the ENCRYPTION BY PASSWORD is the password used to decrypt the data instead of the DECRYPTION BY PASSWORD?</p>

<p>and then too ENCRYPT I dont really need a password I just need to reference MyKey is this correct?</p>

<pre><code>INSERT dbo.BookSellerBankRouting
(BookSellerID, BankRoutingNBR)
VALUES (22,
EncryptByAsymKey(AsymKey_ID('MyKey'),
'1234567'))
</code></pre>

<p>I thought you would have to specify the encryption password to encrypt and the decryption password to decrypt.</p>

<p>But when i use the encryption password in the statement below it decrypts the data and the decrypt password fails</p>

<pre><code>SELECT CAST(DecryptByAsymKey
( AsymKey_ID('MyKey'),
BankRoutingNBR,
N'ADifferentPassword') as varchar(100)) BankRoutingNBR
FROM dbo.BookSellerBankRouting
WHERE BookSellerID = 22
</code></pre>
","<p>It sounds like you are way overcomplicating things.  SQL Server has built in support for encryption and user roles.  You're better off trusting that the professionals who built that knew what they were doing than trying to implement your own scheme.  Start reading about SQL Server encryption here: <a href=""http://technet.microsoft.com/en-us/library/bb510663.aspx"" rel=""nofollow"">http://technet.microsoft.com/en-us/library/bb510663.aspx</a></p>
","129","<tsql><encryption-asymmetric>","0","0","1","2013-09-07 20:17:48","18676474","0","","2643369","","2013-09-07 20:17:48","2013-09-07 18:00:14",""
"16587970","Is it unsecure to cache a SecKeyRef of the public and private key in memory?","<p>I saw this <a href=""https://developer.apple.com/library/mac/#documentation/security/conceptual/CertKeyTrustProgGuide/iPhone_Tasks/iPhone_Tasks.html"" rel=""nofollow"">QA</a> about encrypting and decrypting data using the iOS <code>Security.framework</code> where the code in the answer pointed to <a href=""https://developer.apple.com/library/mac/#documentation/security/conceptual/CertKeyTrustProgGuide/iPhone_Tasks/iPhone_Tasks.html"" rel=""nofollow"">Apple's Key Programming Guide</a>.</p>

<p>The codes in QA and Apple reference both query the public/private key before performing encryption/decryption.</p>

<p>In the code I'm going to write, I'm planning to hold the SecKeyRef in memory instead of querying it again every time I need to encrypt/decrypt. Is it safe to do that? Or there's a security reason why both examples query every time?</p>
","","127","<iphone><ios><security><encryption-asymmetric>","1","","0","2013-05-16 12:51:15","","1","","","","","2013-05-16 12:51:15",""
"16258751","AES sending 32 bytes from Java application, only reading 29 bytes from C# application","<p>A college's mailroom is in dire need of new software to help with their operations. The current program was written back in the early '90s in what they believe is python. Two others and myself, are modernizing it. I am in charge of the networking and the server. The school requires that we encrypt any sensitive student data being sent across the network. Since we are using two different languages (Java and C#), I had to do a little digging to find the commonalities in encryptions. AES128/CBC/ISO10126 is the common one. The problem I am having, is that if I send to the client, the server key and IV so that the client can encrypt and return the session key and IV, when the server reads it I am missing 3 bytes of data and I cant get it to decrypt at all. Here is how I am reading on the server side after something is sent back</p>

<pre><code>        ICryptoTransform decrypter = myProvider.CreateDecryptor(myProvider.Key, myProvider.IV);
        byte[] sKey = new byte[myClient.ReceiveBufferSize];
        Console.WriteLine(ASCIIEncoding.ASCII.GetString(sKey));
        Console.WriteLine(""Key Length: "" + sKey.Length);
        byte[] sessionKey = new byte[sKey.Length];
        sessionKey = decrypter.TransformFinalBlock(sessionKey, 0, sessionKey.Length);
</code></pre>

<p>Any ideas what might be causing me to somehow drop 3 bytes of data? Normally I wouldn't be upset, but the three bytes are important to a secure connection.</p>
","","125","<c#><java><sockets><encryption-asymmetric>","0","","0","2013-04-28 02:11:39","","6","","238722","","2013-04-28 02:11:39","2013-04-28 01:52:06",""
"43721607","Error while decrypting symmetric in java (android) with RSA","<p>I am trying to use asymmetric encryption on Android using JCE, the problem is that when I am deciphering the bytes I return in a string they are null.
I can only return a string because I'm connected to a JavaScript server, which is why methods always return strings.
The problem is that RSA Decrypt returns a null String.
All other things are working and encoding / decoding with Base64 works well.
Any idea what's failing?
Thank you!</p>

<pre><code>public class AsymetricUtil{

private static final String KEYMODE = ""RSA/ECB/PKCS1Padding"";
private KeyPairGenerator kpg;
private KeyPair kp;
private PublicKey publicKey;
private PublicKey publicKeyOther = null;
private PrivateKey privateKey;
private byte [] encryptedBytes,decryptedBytes;
private Cipher cipher;

public AsymetricUtil(){
    try{
        cipher = Cipher.getInstance(KEYMODE);
        generateKeys();
    }catch( NoSuchPaddingException| NoSuchAlgorithmException e){
        e.printStackTrace();
    }
}


public void setPublicKey(String key) {

    byte[] data = Base64.decode(key, Base64.NO_WRAP);
    X509EncodedKeySpec spec = new X509EncodedKeySpec(data);
    KeyFactory fact;

    try {
        fact = KeyFactory.getInstance(""RSA"");
        this.publicKeyOther = fact.generatePublic(spec);

    } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
        e.printStackTrace();
    }

}

public String RSAEncrypt(final String plain) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {
    cipher.init(Cipher.ENCRYPT_MODE, publicKeyOther);
    encryptedBytes = cipher.doFinal(plain.getBytes(""Utf-8""));
    return Base64.encodeToString(encryptedBytes, Base64.NO_WRAP);
}


public String RSADecrypt(final String encryptedStr) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, UnsupportedEncodingException {
    cipher.init(Cipher.DECRYPT_MODE, privateKey);
    decryptedBytes = cipher.doFinal(Base64.decode(encryptedStr, Base64.NO_WRAP));
    return new String(decryptedBytes);
}

public void generateKeys() throws NoSuchAlgorithmException {
    kpg = KeyPairGenerator.getInstance(""RSA"");
    kpg.initialize(1024);
    kp = kpg.genKeyPair();
    publicKey = kp.getPublic();
    privateKey = kp.getPrivate();
}


/**
 * Convert publicKey to String
 *
 * @return  {String}
 */
public String getKey(){
    return Base64.encodeToString(publicKey.getEncoded(), Base64.NO_WRAP);
}
</code></pre>
","","125","<java><android><encryption><encryption-asymmetric>","0","","0","2017-05-01 18:38:30","","3","5","7138212","","2017-05-01 18:38:30","2017-05-01 15:24:44",""
"48580428","RSA Asymmetric encryption / decryption - Which key is being used","<p>When I create a public/private key using the following code :</p>

<pre><code>    // Create the CspParameters object and set the key container   
    // name used to store the RSA key pair.  
    CspParameters cp = new CspParameters();
    cp.KeyContainerName = ContainerName;

    // Create a new instance of RSACryptoServiceProvider that accesses  
    // the key container MyKeyContainerName.  
    RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(cp);
</code></pre>

<p>If I then call</p>

<pre><code>    rsa.Encrypt (....
    OR
    rsa.Decrypt(..
</code></pre>

<p>how do I know which key is being used.  Whether the public or private key is used in each case is dependent on the application.  How can I determine which is being used ?</p>
","<p><strong>Encrypt</strong> is done with the <strong>public key</strong>, and <strong>decrypt</strong> is done with the <strong>private key</strong> .. thus only the holder of the <strong>private key</strong> can <strong>decrypt.</strong> </p>

<p>You are not meant to decrypt using a public key, and thus the interface don't provide you with a way to do this.</p>

<p>Signatures utilizes encrypting using the private key, and decryption using the public key + some one way hash logic, but in this case the interface only allows this using specific signature methods (<code>SignData(..)</code> &amp; <code>VerifyData(..)</code>).</p>
","122","<encryption><rsa><encryption-asymmetric>","0","1","1","2018-02-02 12:43:57","","5","","","","","2018-02-02 10:14:44",""
"9957562","openssl phishing : V claims to be A","<p>there are several components of my application, needs their communication secure in the sense Origin Verified. these components cannot share a common secret. So I have to opt for asymmetric key encryption. assuming I've two components <code>A</code> and <code>B</code> A sends some data <code>F</code> to <code>B</code> and <code>B</code> has to verify that it really came from <code>A</code></p>

<p><code>A</code> generates digest <code>H</code> of <code>F</code> with its private Key<br />
<code>A</code> attaches <code>A_pub</code>, <code>H</code> to its request Parameters, sends <code>F</code> and declares origin/sender as <code>A</code> <br />
<code>B</code> verifies the digest <code>H</code> with the <code>A_pub</code> provided against <code>F</code></p>

<p>apparently it looks Okay But if some other component <code>V</code> does the same with <code>V_pub</code> and claims itself as <code>A</code>, <code>B</code> still thinks the request came from <code>A</code> as this <code>H</code> is made with <code>V_prv</code> openssl verifies Okay.</p>

<p>I want to give protection against this attack of <code>V</code></p>

<p>I am using <code>ecparam</code> <code>secp112r1</code> to minimize key length. and keys are repeatedly changed.</p>

<p>-- <strong>EDIT</strong> --</p>

<p><code>A</code>, <code>B</code> and <code>V</code> are application components identified by unique <code>URI</code>. Its currently intended to constraint secure page flow. e.g. you can assume <code>A</code>, <code>B</code>, <code>V</code> be urls What I want is Only <code>A</code> can procced to <code>B</code> and only <code>B</code> can proceed to <code>C</code> .... and I don't want to maintain a global/application wide session for that. so If <code>B</code> can just verify the origin of this link based on the special parameters <code>A</code> have passed to it in a state/session-less manner. and the more generic it can be the more reusable it will be to implement in other scenarios too.</p>

<p>Once I thought to maintain a checksums of <code>A_pub</code> in a trusted global storage. however I am afraid wouldn't that be an over engineering ?</p>

<p>another way comes in my mind is to query back the origin url regarding the public key. However I want to avoid that.</p>
","<p>This technique cannot verify the identity of the sender, only that the keys are a matching pair.  </p>

<p>Typically, <code>B</code> would already possess some piece of trusted information that it can use to validate <code>A</code>'s identity.  The information is generally a copy of <code>A_pub</code> that it had previously validated, or that has been signed by a trusted third party, in which case <code>B</code> must have access to that third party's public key.</p>

<p>Without this additional information, <code>B</code> cannot verify the identity of <code>A</code>.</p>
","120","<openssl><public-key-encryption><private-key><encryption-asymmetric><digest>","0","0","1","2012-04-01 08:31:10","","2","","256007","","2012-04-01 08:31:10","2012-03-31 16:14:44",""
"57072796","Custom Java public key generation (Bitcoin)","<p>A private key is random generated and it is not correlated with any wallet.</p>

<p>I want to prepare custom (naive) implementation of public key generation for a Bitcoin. However, after a few attempts my results was incorrect. I compared them with online generators. I've recognized I used division instead of modinv. Unfortunately, after changing division into modinv I got ""java.lang.ArithmeticException: BigInteger not invertible."". I tired to follow <a href=""https://www.mobilefish.com/services/cryptocurrency/cryptocurrency.html#refProdedure"" rel=""nofollow noreferrer"">https://www.mobilefish.com/services/cryptocurrency/cryptocurrency.html#refProdedure</a> and <a href=""https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication</a> Could you help me recognize where I did a mistake?</p>

<pre><code>public class ECDSAUtils {

    private static final CurvePoint G = new CurvePoint(new BigInteger(""79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798"", 16), new BigInteger(""483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8"", 16));
    private static CurvePoint zero;
    private static BigInteger base;
    private static final BigInteger three = new BigInteger(""3"", 10);

    public static void main(String[] args){
        ECDSAUtils e = new ECDSAUtils();
        BigInteger privateKey = new BigInteger(""fdc668381ab251673ef8552851a2c7cf346a6e09ea86be0f55a94d2a12253557"", 16);
        CurvePoint r = e.mult(G, privateKey);
        System.out.println(r.x.toString(16).toUpperCase() + "" "" + r.y.toString(16).toUpperCase());
    }

    public ECDSAUtils(){
        zero = new CurvePoint(new BigInteger(""0"", 16), new BigInteger(""0"", 16));
        base = new BigInteger(""FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F"", 16);
    }

    public static CurvePoint add(CurvePoint p, CurvePoint q){
        CurvePoint result = null;
        if (p.equals(zero)){
            result = q;
        } else if (q.equals(zero)){
            result = p;
        } else {
            BigInteger lambda = q.y.subtract(p.y).modInverse(q.x.subtract(p.x)).mod(base);
            BigInteger x = lambda.multiply(lambda).subtract(p.x).subtract(q.x).mod(base);
            BigInteger y = lambda.multiply(p.x.subtract(x)).subtract(p.y).mod(base);
            result = new CurvePoint(x, y);
        }
        return result;
    }

    public static CurvePoint doublePoint(CurvePoint p){
        BigInteger lambda = p.x.multiply(p.x).multiply(three).modInverse(p.y.add(p.y)).mod(base);
        BigInteger x = lambda.multiply(lambda).subtract(p.x).subtract(p.x).mod(base);
        BigInteger y = lambda.multiply(p.x.subtract(x)).subtract(p.y).mod(base);
        return new CurvePoint(x, y);
    }

    public CurvePoint mult(CurvePoint N, BigInteger p) {
        CurvePoint Q = zero;
//EDIT:
        for (int i = p.bitLength() - 1; i &gt; -1; i --) {
            if (p.testBit(i)) {
                Q = add(Q, N);
            }
            N = doublePoint(N);
        }

        return Q;
    }
}

public class CurvePoint {
    BigInteger x;
    BigInteger y;

    public CurvePoint(BigInteger x, BigInteger y) {
        this.x = x;
        this.y = y;
    }
}

</code></pre>

<pre><code>Exception in thread ""main"" java.lang.ArithmeticException: BigInteger not invertible.
    at java.math.MutableBigInteger.mutableModInverse(MutableBigInteger.java:1986)
    at java.math.BigInteger.modInverse(BigInteger.java:3154)
    at naive.ECDSAUtils.doublePoint(ECDSAUtils.java:41)
    at naive.ECDSAUtils.mult(ECDSAUtils.java:51)
    at naive.ECDSAUtils.main(ECDSAUtils.java:15)
</code></pre>
","<ul>
<li><p>Currently the expression </p>

<p><img src=""https://chart.googleapis.com/chart?cht=tx&amp;chl=%5Cfrac%7By%7D%7Bx%7D%5Chspace%7B10mm%7D%5Cleft%20%28%20mod%5Chspace%7B1mm%7Dp%20%5Cright%20%29"" alt=""""></p>

<p>is coded as follows:</p>

<pre><code>y.modInverse(x).mod(p)
</code></pre>

<p>This is wrong and causes the observed error message. The following applies:</p>

<p><img src=""https://chart.googleapis.com/chart?cht=tx&amp;chl=%5Cfrac%7By%7D%7Bx%7D%5Chspace%7B3mm%7D%5Chspace%7B10mm%7D%5Cleft%20%28%20mod%5Chspace%7B1mm%7Dp%20%5Cright%20%29%3Dy%5Chspace%7B1mm%7D%5Ccdot%5Chspace%7B1mm%7D%5Cfrac%7B1%7D%7Bx%7D%5Chspace%7B10mm%7D%5Cleft%20%28%20mod%5Chspace%7B1mm%7Dp%20%5Cright%20%29"" alt=""""></p>

<p>which must be coded as follows: </p>

<pre><code>y.multiply(x.modInverse(p)).mod(p)
</code></pre></li>
<li><p>In the <code>add</code> method, the case: </p>

<p><img src=""https://chart.googleapis.com/chart?cht=tx&amp;chl=%5Cleft%20%28%20x_%7BQ%7D-x_%7BP%7D%20%5Cright%20%29%5Chspace%7B10mm%7D%5Cleft%28%20mod%5Chspace%7B1mm%7Dp%20%5Cright%20%29%3D0"" alt=""""></p>

<p>is not handled. Here, the <code>add</code> method must return <code>zero</code> (i.e. the point representing the point at infinity). Geometrically, this case corresponds to a vertical secant (2 intersections).</p></li>
<li><p>Analogously, the case</p>

<p><img src=""https://chart.googleapis.com/chart?cht=tx&amp;chl=y_%7BP%7D%5Chspace%7B10mm%7D%5Cleft%28%20mod%5Chspace%7B1mm%7Dp%20%5Cright%20%29%3D0"" alt=""""></p>

<p>is not handled in the <code>doublePoint</code> method. Here, the <code>doublePoint</code> method must return <code>zero</code> as well. Geometrically, this case corresponds to a vertical tangent (1 intersection).</p></li>
<li><p>The <code>mult</code> method doesn't work. But with regard to the comment in the code this is probably known.</p></li>
<li><p>Testing is easier if a small prime finite field is used. <a href=""http://www.graui.de/code/elliptic2/"" rel=""nofollow noreferrer"">Here</a> you can specify elliptical curves and determine the corresponding points. Note, that a curve with <code>b != 0</code> must be used, otherwise the point <code>(0,0)</code> is a regular point of the curve and could not be used as a representative of the point at infinity.</p></li>
</ul>
","114","<java><encryption><bitcoin><public-key><encryption-asymmetric>","4","3","1","2019-07-18 18:59:21","57101063","6","","1738449","","2019-07-18 07:23:11","2019-07-17 09:35:26",""
"51796225","Pros and cons of JWE Key Management Modes","<p>I've been searching a lot but nothing hit the spot, they are questions about JWE key management.</p>

<p><strong>Scenario</strong>:</p>

<p>Server wants to send sensitive data to client, and it chooses to encrypt the data with a symmetric algorithm by a symmetric key, i.e, Content Encryption Key (CEK).<br/>
Client will retrieve the CEK to decrypt the encrypted data, but the CEK can't be sent as a clear text together with the encrypted data, so the CEK will need to be encrypted.</p>

<p><strong>Approach</strong>:</p>

<p>The JWE specification defines different key management modes as follows</p>

<ol>
<li><p>Key Wrapping: the CEK is encrypted for the intended recipient using a symmetric encryption algorithm.<br/>
<a href=""https://i.stack.imgur.com/6730v.jpg"" rel=""nofollow noreferrer"">Key Wrapping Diagram</a></p></li>
<li><p>Key Encryption: the CEK is encrypted for the intended recipient using an asymmetric encryption algorithm.<br/>
<a href=""https://i.stack.imgur.com/ezN8K.jpg"" rel=""nofollow noreferrer"">Key Encryption Diagram</a></p></li>
<li><p>Direct Key Agreement: a key agreement algorithm is used to pick the CEK.<br/>
<a href=""https://i.stack.imgur.com/1npCZ.jpg"" rel=""nofollow noreferrer"">Direct Key Agreement Diagram</a></p></li>
<li><p>Key Agreement with Key Wrapping: a key agreement algorithm is used to pick a
symmetric CEK using a symmetric encryption algorithm.<br/>
<a href=""https://i.stack.imgur.com/5hoxT.jpg"" rel=""nofollow noreferrer"">Key Agreement with Key Wrapping Diagram</a></p></li>
<li><p>Direct Encryption: a user-defined symmetric shared key is used as the CEK (no key derivation or generation).<br/>
<a href=""https://i.stack.imgur.com/mp4h9.jpg"" rel=""nofollow noreferrer"">Direct Encryption Diagram</a></p></li>
</ol>

<p><strong>Question</strong>:</p>

<ol>
<li>What are pros and cons of each mode?<br/></li>
<li>Under what circumstance will each mode be preferable?</li>
</ol>

<p>Any help or advise would be appreciated, thank you very much.</p>
","","113","<security><encryption><encryption-asymmetric><key-management><jwe>","0","","0","2018-08-11 07:06:56","","2","","3359590","","2018-08-11 07:06:56","2018-08-11 03:32:09",""
"39621717","Is it unsafe to fix the values of public and private keys on asymmetric RSA encryption?","<p>I have a client-server structure, and to avoid sending the public key I was thinking about using a fixed key. What about this?</p>

<p>I am padding and using a random SHA-256 when encrypting. So, with the public fixed, an attacker can't use brute force to decrypt.</p>

<p>I have a Client side (Xamarin APP) and a Web Api server. I am already using SSL and i know thats enough ! But imagin that i cannot use SSL and i have to use async crypto. I have to: CLIENT- request publickey -> SERVER - generate public and private key -> CLIENT - Get the publickey and cripto, sending the cripto data -> SERVER - get the cripto data and decrypt.</p>
","<p>That depends on if you have control of both the client and the server, how you're storing/fixing the key, and how difficult it is to deploy replacements to the client/server code. If it's not that difficult for you to do a re-deploy and you know that all instances of the client will be updated promptly I suppose you could just do a re-deploy if you ever needed to rotate the key.</p>

<p>However, if it's not that easy for you to do a re-deploy and/or you can't guarantee that all of the code will be updated promptly this could be a problem because you could be left without a method of rotating the key if your current one became compromised.</p>

<p>The other problem is that you don't really want to have all of your clients using the same private key, especially if you have a lot of clients. This increases the risk of your private key eventually being compromised and makes it more difficult for the server to verify the authenticity of individual clients. Additionally, this would create a single point of failure because if the private key is compromised, it would compromise the communications of <em>all</em> of the clients. If each client has its own private/public key, if its private key is compromised there's no impact on other clients so the damage would be much more contained. </p>

<p>Using per-client keys, compromising a private key could only compromise communications for a single client that occurred since the last key rotation; if, for example, you're rotating keys every 3 months compromising a key can never compromise more than 3 months of communication for a single client. (On average, it would compromise 1.5 months of communication for that particular client).</p>

<p>Incidentally, maybe I'm misreading your question but it's not important with public-key cryptography that the public key remain secret, just that you have a way of protecting the private key. The .NET Framework does have <a href=""https://msdn.microsoft.com/en-us/library/tswxhw92(v=vs.110).aspx"" rel=""nofollow"">key containers</a> for the purpose of safely storing the private key.</p>
","110","<security><encryption><rsa><encryption-asymmetric>","-1","1","3","2016-09-21 17:28:34","","1","","6225704","","2016-09-21 17:16:47","2016-09-21 16:18:46","2016-09-21 20:50:05"
"39621717","Is it unsafe to fix the values of public and private keys on asymmetric RSA encryption?","<p>I have a client-server structure, and to avoid sending the public key I was thinking about using a fixed key. What about this?</p>

<p>I am padding and using a random SHA-256 when encrypting. So, with the public fixed, an attacker can't use brute force to decrypt.</p>

<p>I have a Client side (Xamarin APP) and a Web Api server. I am already using SSL and i know thats enough ! But imagin that i cannot use SSL and i have to use async crypto. I have to: CLIENT- request publickey -> SERVER - generate public and private key -> CLIENT - Get the publickey and cripto, sending the cripto data -> SERVER - get the cripto data and decrypt.</p>
","<p>Embedding the public key in the client app should be fine and secure.</p>

<p>This assumes the public/private key pair are created once at app creation time, the public key is embedded in the app and the private key is kept on the server.</p>
","110","<security><encryption><rsa><encryption-asymmetric>","-1","0","3","2016-09-21 17:28:34","","1","","6225704","","2016-09-21 17:16:47","2016-09-21 16:18:46","2016-09-21 20:50:05"
"39621717","Is it unsafe to fix the values of public and private keys on asymmetric RSA encryption?","<p>I have a client-server structure, and to avoid sending the public key I was thinking about using a fixed key. What about this?</p>

<p>I am padding and using a random SHA-256 when encrypting. So, with the public fixed, an attacker can't use brute force to decrypt.</p>

<p>I have a Client side (Xamarin APP) and a Web Api server. I am already using SSL and i know thats enough ! But imagin that i cannot use SSL and i have to use async crypto. I have to: CLIENT- request publickey -> SERVER - generate public and private key -> CLIENT - Get the publickey and cripto, sending the cripto data -> SERVER - get the cripto data and decrypt.</p>
","<p>If you can protect the integrity of the client, it's safer to use a fixed public key than to magically bootstrap a secure connection from nothing.</p>

<p>Reading much into the question and comments, it sounds like you want to prevent a man-in-the-middle from decrypting messages from the client to the server. In order to do that, the client must be sure to use the server's public key, without getting tricked into using one generated by the man-in-the-middle.</p>

<p>If a public key is embedded in the client, and you have some mechanism to ensure that the key is authentic, you are safe. </p>

<p>In a PKI-based application, this is done by using certificates issued by well-known CAs, and verifying them before use. In a homebrew scheme, you could compute a hash of the client application, transmit that securely to the client (on a download page served via HTTPS, over the phone or written by a trusted party, etc.), and verify that the downloaded application's hash matches the authentic hash before running.</p>
","110","<security><encryption><rsa><encryption-asymmetric>","-1","1","3","2016-09-21 17:28:34","","1","","6225704","","2016-09-21 17:16:47","2016-09-21 16:18:46","2016-09-21 20:50:05"
"8768703","VerifySignedByAsymKey() Does Not Return Expected Value","<p>I'm playing around with <a href=""http://msdn.microsoft.com/en-us/library/ms173744.aspx"" rel=""nofollow"">Asymmetric Encryption and Decryption</a>, but I don't understand the results I'm getting when I use <a href=""http://msdn.microsoft.com/en-us/library/ms187791.aspx"" rel=""nofollow"">VerifySignedByAsymKey()</a>.</p>

<p>Why does this:</p>

<pre><code>CREATE ASYMMETRIC KEY myasymkey 
WITH ALGORITHM = RSA_2048 
ENCRYPTION BY PASSWORD = '123pass!'; 
GO

Select VerifySignedByAsymKey(AsymKey_ID('myasymkey'), 
    'Greg', 
    EncryptByAsymKey(AsymKey_ID('myasymkey'), 'Greg'));
GO
</code></pre>

<p>Produce <code>0</code>? I was expecting it to be <code>1</code>.</p>
","<p>You've only encrypted the data, not signed it.</p>

<p>See <code>SignByAsymKey()</code>. The following example returns 1:</p>

<pre><code>declare @clear varchar(128)
set @clear = 'Greg'
Select VerifySignedByAsymKey(AsymKey_ID('myasymkey'), @clear, 
       SignByAsymKey(AsymKey_ID('myasymkey'), @clear, N'123pass!'))
</code></pre>
","108","<sql-server><sql-server-2008><encryption><encryption-asymmetric>","0","0","1","2012-01-07 12:31:25","8769640","0","","","","","2012-01-07 09:35:29",""
"40876487","Private key compromised, how to distribute new public keys? Client server model via asymmetric key encryption","<p>I'm attempting to setup client/server communication for an application via libsodium. So far I plan to distribute the application with a hard-coded public key. The server will keep its secret key without ever sharing it. This should let users encrypt messages and send them to the server, where the secret key decrypts messages.</p>

<p>In the event the secret key on the server is ever compromised (I'm not sure how, but just in case) how might one distribute new public keys to all clients? Is there a way to generate a new secret key without requiring distribution of new public keys? Something like:</p>

<pre><code>make_new_secret( secret_buffer, previous_public );
</code></pre>

<p>I was hoping for a very simple solution that wouldn't require complicated algorithms for securely handing out new public keys. If making a new private key must be done while also making a new public key, what algorithms may be used to securely distribute public keys from server to clients?</p>

<p><strong><em>Additional info (feel free to skip):</em></strong></p>

<p>We can read <a href=""https://www.reddit.com/r/gamedev/comments/4tz67n/libyojimbo_new_open_source_network_library_for/d5lp407/"" rel=""nofollow noreferrer"">here</a> where Glenn Fiedler (author of libyojimbo, which uses libsodium) talks about the idea of ""just roll a new private key"".</p>

<p>If there is a way to re-use old public keys and create a new private key with libsodium, I would love to read about it. I have went through the docs and have yet to see any functions to do so. So I fear I may have to delve into more complicated algorithms for securely distributing new public keys.</p>

<p>I have checked out <a href=""https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"" rel=""nofollow noreferrer"">Diffie Hellman</a>, but it seems to require both parties to start with a common ""color"". So I suppose my question is in regards to coming to a new agreed upon starting color.</p>
","<p>The public/private keys are always <code>pair</code> (with the exception of EC having 2 public keys which is essentially the same thing). So if your server private key is compromised or you decide to <code>roll</code> it you need the client to know your servers new public key.</p>

<p>The challenge is real. If you hardcode it, then you have to recompile/redistribute application to your clients.</p>

<p>I don't understand your whole use case but if you are trying to do authorization, please look into OAUTH2 which will allow you to issue temporary (configurable on the server) tokens from your server to you client. In this case you can revoke OAUTH token in case either server or client is compromised and you (your server) has full control over it.</p>
","103","<encryption><encryption-asymmetric><libsodium>","0","0","1","2016-11-29 22:04:00","40876622","0","","","","","2016-11-29 21:55:45",""
"54158793","Asymmetric Encryption (Public-Key encryption) I need clarification","<p>I have searched for HOURS on how this works and I just can't get how this can be. The only given definitions are that public keyed encrypted message can only be decrypted by private key. To me, that's just nonsense and I will explain.</p>

<p>A website needs to be downloaded by your browser which also means that Javascript scripts and all the other stuff are accessible to anyone that catches your website if he wishes too. This also means that now, this person knows how you calculate your stuff with your public key making it possible WITHOUT the private key to decrypt it.</p>

<p>I'm just trying to figure out how this works and to me it does not make sens that you CANNOT decrypt an ecrypted text from a public key when you have access to all the calculations made from the side it encrypted.</p>

<p>I mean, when you send a password for example, first, on YOUR end, the browser's end, it encrypts the data to be recieved by the server. By encrypting the data from the browser's end, anyone that took a look on your source code can know how you encrypted it which now can be used to decrypt it. I am creating a new encryption system for our website where the server randomly creates a session key that can only be used by the user with the corresponding session. So only the 2 computers can talk to each other with the same key so if you use the same key on another computer, it just won't work as each key is stored for each session which the key dies after a set amount of time. With what I read, this seams to be called a symetric key system. I want to try and program my own assymetric key system but in all cases when I read, I can only figure out that no matter what happens as an encryption on the client's side, if a malicious person intercepts just before sending the information, he has access to how the encryption worked and therefor, does not need the private key on the server side as he just needs to reverse the process knowing how it was done on the client's side.</p>

<p>I'm starting to think myself as stupid thinking that way.</p>

<p>I'll add a little more information as I think we don't quite catch what I mean. When sending a password, say my name ""David"" and let's name our user WebUser. We will name our maleficient user BadGuy. So BadGuy hapopens to integrate himself in between WebUser and his browser. BadGuy also recieves ALL javascripts of the webpage permitting him to see how the calculations work before it is sent. WebUser enters his password ""David"" which is submitted to the javascript encryption system. Right off the bat, BadGuy does not need to decrypot anything as he already caught the password. BUT when the website responds, BadGuy has all the calculations and can use the receieved encrypted data and decrypt it using the decryption calculations he can see in the recieved web pages code.</p>

<p>So the only thing I can understand is that Assymetric keys are used for encryption which technically is decryptable using public known numbers. But in cas of RSA, these 2 numbers are so large that it would take years to figure out the known decryptor. As I can also undersnat is that it is pretty much easier to create the 2 numbers from the private number. But in any case, the encryption process usually ends up with a shared temporary intimate key between the two parties for for faster commuinication and that noone can ever prevent a BagGuy between User and Browser but with todays technocolgies, the real threat is more MiTM attacks where one will sniff the network. In all cases, there is no definate way to communicate 100% of the data in a undecryptable way as at least 50% of it is decryptable i/e data coming from one side or data going to the other side.</p>
","<p>Assymetric encryption has two keys, a public and a private key, as you correctly described, so don't feel stupid. Both keys can be used for encryption and decryption, however, if data encrypted by the public key can only be decrypted by the private key and data encrypted by the private key can only be decrypted by the public key.</p>

<p>As a result, in order to be successfully involved in a communication using assymetric encryption you will need to have both a public and a private key.</p>

<p>You share your public key with others, that is, whatever data you receive, it will be encrypted with the public key. You will subsequently be able to decrypt it using your private key, which is your secret. When you send data to the other side of the communication, you encrypt it using your private key and the other side, which has your public key will be able to decrypt it.</p>

<p>Consider the example of versioning. You are involved in a project with some team members. When you pull the commits of others, it is encrypted with your public key, so once it is downloaded at your end, you will be able to decrypt it via your private key. As you work and do your commits, you will push the changes into the repository, encrypted using your private key. The other side of the communication already has your public key and will be able to decrypt it. It is important that you do not share your private key with anyone, so your team-mates will not be able to impersonate you, committing malicious code in your name. You can share your public key with anyone, but it is recommended to share it only with trusted people, like your team-mates, so no one else will be able to decrypt anything encrypted by your private key.</p>

<p>Essentially your public key is a ridiculously large number, which is the result by multiplying two primes (private key). The two primes could be found out by prime factorization, but since the public key is a very very large number, doing the prime factorization would take such a looong time that no one will sit and wait for the time (centuries) while the factorization is being executed and the results are found out.</p>

<p>A session id is a value which identifies a session. If there is a single such value, then it is not an assymetric encryption, as there is no public and private key involved and once someone steals the session ID, as you correctly pointed out, the malicious third person/system can impersonate the actual user and do nasty things. So the problem you have identified actually exists, but this is not a new problem and solutions were implemented. The solution you are looking for is HTTPS. Once your site gets a proper certificate, you will be able to use assymetric encryption safe and sound. Under the hood the server will have the public key of the user's session, while the user will use the private key to encrypt/decrypt and if a middle man intercepts the public key of the session (which is not a session id), the malicious third person will not be able to impersonate the actual user. Read more here:</p>

<p><a href=""https://en.wikipedia.org/wiki/Transport_Layer_Security"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Transport_Layer_Security</a></p>
","102","<encryption><encryption-asymmetric>","0","2","2","2019-01-14 12:13:35","","7","","1033581","","2019-01-13 05:28:42","2019-01-12 10:41:23",""
"54158793","Asymmetric Encryption (Public-Key encryption) I need clarification","<p>I have searched for HOURS on how this works and I just can't get how this can be. The only given definitions are that public keyed encrypted message can only be decrypted by private key. To me, that's just nonsense and I will explain.</p>

<p>A website needs to be downloaded by your browser which also means that Javascript scripts and all the other stuff are accessible to anyone that catches your website if he wishes too. This also means that now, this person knows how you calculate your stuff with your public key making it possible WITHOUT the private key to decrypt it.</p>

<p>I'm just trying to figure out how this works and to me it does not make sens that you CANNOT decrypt an ecrypted text from a public key when you have access to all the calculations made from the side it encrypted.</p>

<p>I mean, when you send a password for example, first, on YOUR end, the browser's end, it encrypts the data to be recieved by the server. By encrypting the data from the browser's end, anyone that took a look on your source code can know how you encrypted it which now can be used to decrypt it. I am creating a new encryption system for our website where the server randomly creates a session key that can only be used by the user with the corresponding session. So only the 2 computers can talk to each other with the same key so if you use the same key on another computer, it just won't work as each key is stored for each session which the key dies after a set amount of time. With what I read, this seams to be called a symetric key system. I want to try and program my own assymetric key system but in all cases when I read, I can only figure out that no matter what happens as an encryption on the client's side, if a malicious person intercepts just before sending the information, he has access to how the encryption worked and therefor, does not need the private key on the server side as he just needs to reverse the process knowing how it was done on the client's side.</p>

<p>I'm starting to think myself as stupid thinking that way.</p>

<p>I'll add a little more information as I think we don't quite catch what I mean. When sending a password, say my name ""David"" and let's name our user WebUser. We will name our maleficient user BadGuy. So BadGuy hapopens to integrate himself in between WebUser and his browser. BadGuy also recieves ALL javascripts of the webpage permitting him to see how the calculations work before it is sent. WebUser enters his password ""David"" which is submitted to the javascript encryption system. Right off the bat, BadGuy does not need to decrypot anything as he already caught the password. BUT when the website responds, BadGuy has all the calculations and can use the receieved encrypted data and decrypt it using the decryption calculations he can see in the recieved web pages code.</p>

<p>So the only thing I can understand is that Assymetric keys are used for encryption which technically is decryptable using public known numbers. But in cas of RSA, these 2 numbers are so large that it would take years to figure out the known decryptor. As I can also undersnat is that it is pretty much easier to create the 2 numbers from the private number. But in any case, the encryption process usually ends up with a shared temporary intimate key between the two parties for for faster commuinication and that noone can ever prevent a BagGuy between User and Browser but with todays technocolgies, the real threat is more MiTM attacks where one will sniff the network. In all cases, there is no definate way to communicate 100% of the data in a undecryptable way as at least 50% of it is decryptable i/e data coming from one side or data going to the other side.</p>
","<p>extending the previous answer</p>

<blockquote>
  <p>I'm just wandering how an attacker positionned between the user and his browser cannot intercept the connection details when they are clear texte to beggin with and to end with. </p>
</blockquote>

<p>The magic here is called <strong>DH key exchange</strong>.</p>

<p>The symmetric encryption key is derived using <a href=""https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"" rel=""nofollow noreferrer"">Diffie–Hellman key exchange</a>, where the common encryption key is exchanged. </p>

<p>Any ""listening"" party (your BadGuy) woudn't be able to derive the session key even by sniffing out the whole communications. The server will use its certificate and private key to make sure the client communicates with the legitimate target. This prevents an active ""man in the middle"" to pose as a false server.</p>

<blockquote>
  <p>it does not make sens that you CANNOT decrypt an ecrypted text from a public key when you have access to all the calculations made from the side it encrypted.</p>
</blockquote>

<p>Asymmetric cryptography is based on so called ""trapdoor"" funtions. It means it is easy to calculate the function one way (e.g. encrypt data), but very difficult (not feasible) to od it opposite way without some secret value (private key). Indeed sometimes it is difficult to understand it and there are a lot of constraints under the asymmetric encryption is really secure. That's why you would always use some trusted library than do it yourself.</p>

<blockquote>
  <p>By encrypting the data from the browser's end, anyone that took a look on your source code can know how you encrypted it which now can be used to decrypt it.</p>
</blockquote>

<p>Not without the random secret key, which is derived between the client and server during the key exchange (see the first paragraph).</p>

<blockquote>
  <p>I am creating a new encryption system for our website where the server randomly creates a session key that can only be used by the user with the corresponding session. </p>
</blockquote>

<p>It's one of the rules in the field of cryptography - <strong>do not design your own crypto!</strong> </p>

<p>That's usually a bad idea. Please note the currently used secure channels (SSL, TLS, .. based on <a href=""https://en.wikipedia.org/wiki/RSA_(cryptosystem)"" rel=""nofollow noreferrer"">RSA</a>, <a href=""https://en.wikipedia.org/wiki/Elliptic-curve_cryptography"" rel=""nofollow noreferrer"">ECC</a>) are designed, reviewed and used by a lot of smart people who know what they are doing, how to mitigate different attack vectors. And IMHO it is still not perfect, but it's the best we have. </p>
","102","<encryption><encryption-asymmetric>","0","2","2","2019-01-14 12:13:35","","7","","1033581","","2019-01-13 05:28:42","2019-01-12 10:41:23",""
"33336506","Trying to get asymmetric RSA encryption to work","<p>The following method does not work.  decodedMessage ends up with garbage in it instead of the expected results.</p>

<p>I'm following an example <a href=""http://www.developer.com/ws/android/encrypting-with-android-cryptography-api.html"" rel=""nofollow"">here</a> that supposedly works.</p>

<pre><code>public static void POCSimple()
{
    String secretMessage = ""short message"";
    PublicKey publicKey = null;
    PrivateKey privateKey = null;
    String encodedMessage = """";
    byte[] encodedBytes = null;
    String decodedMessage ="""";
    byte[] decodedBytes = null;


    try
    {
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(1024);
        KeyPair kp = kpg.genKeyPair();
        publicKey = kp.getPublic();
        privateKey = kp.getPrivate();

        Cipher c1 = Cipher.getInstance(""RSA"");
        c1.init(Cipher.ENCRYPT_MODE, publicKey);
        encodedBytes = c1.doFinal(secretMessage.getBytes());
        encodedMessage = Base64.encodeToString(encodedBytes, Base64.DEFAULT);

        Cipher c2 = Cipher.getInstance(""RSA"");
        c2.init(Cipher.DECRYPT_MODE, privateKey);
        decodedBytes = c2.doFinal(encodedBytes);
        decodedMessage = Base64.encodeToString(decodedBytes, Base64.DEFAULT);

        String mystring = ""look at results"";

    }
    catch (Exception e)
    {
        String status = e.toString();
    }


}
</code></pre>

<p>Any help would be most appreciated.
Thanks,
Dean</p>
","<p>Of course you are getting garbage, this is your sequence:</p>

<pre><code>Plaintext message -&gt; Encrypt -&gt; Encode -&gt; Encoded message

Encoded message -&gt; Decrypt -&gt; Decode -&gt; GARBAGE
</code></pre>

<p>You need to undo the Base64 encoding before you can decrypt the message, you are doing the reverse process in the incorrect order!</p>

<p><strong>Edit</strong></p>

<p>Actually its worse, this is your sequence:</p>

<pre><code>Plaintext message -&gt; Encrypt -&gt; Encode -&gt; Encoded message

Encrypted message -&gt; Decrypt -&gt; Encode -&gt; GARBAGE
</code></pre>

<p>Try this:</p>

<pre><code>Cipher c1 = Cipher.getInstance(""RSA"");
c1.init(Cipher.ENCRYPT_MODE, publicKey);
encodedBytes = c1.doFinal(secretMessage.getBytes());
encodedMessage = Base64.encodeToString(encodedBytes, Base64.DEFAULT);

Cipher c2 = Cipher.getInstance(""RSA"");    
c2.init(Cipher.DECRYPT_MODE, privateKey)      
decodedBytes = Base64.decode(encodedMessage.toByteArray(), Base64.DEFAULT);
decryptedMessage = c2.doFinal(decodedBytes);
</code></pre>
","102","<android><encryption><encryption-asymmetric>","0","1","2","2015-10-26 20:41:23","33354964","1","4","","","","2015-10-25 23:57:33",""
"33336506","Trying to get asymmetric RSA encryption to work","<p>The following method does not work.  decodedMessage ends up with garbage in it instead of the expected results.</p>

<p>I'm following an example <a href=""http://www.developer.com/ws/android/encrypting-with-android-cryptography-api.html"" rel=""nofollow"">here</a> that supposedly works.</p>

<pre><code>public static void POCSimple()
{
    String secretMessage = ""short message"";
    PublicKey publicKey = null;
    PrivateKey privateKey = null;
    String encodedMessage = """";
    byte[] encodedBytes = null;
    String decodedMessage ="""";
    byte[] decodedBytes = null;


    try
    {
        KeyPairGenerator kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(1024);
        KeyPair kp = kpg.genKeyPair();
        publicKey = kp.getPublic();
        privateKey = kp.getPrivate();

        Cipher c1 = Cipher.getInstance(""RSA"");
        c1.init(Cipher.ENCRYPT_MODE, publicKey);
        encodedBytes = c1.doFinal(secretMessage.getBytes());
        encodedMessage = Base64.encodeToString(encodedBytes, Base64.DEFAULT);

        Cipher c2 = Cipher.getInstance(""RSA"");
        c2.init(Cipher.DECRYPT_MODE, privateKey);
        decodedBytes = c2.doFinal(encodedBytes);
        decodedMessage = Base64.encodeToString(decodedBytes, Base64.DEFAULT);

        String mystring = ""look at results"";

    }
    catch (Exception e)
    {
        String status = e.toString();
    }


}
</code></pre>

<p>Any help would be most appreciated.
Thanks,
Dean</p>
","<p>It turns out that in my original code, decodedBytes contained the properly decrypted bytes.  The following command was turning decodedBytes into junk characters ...</p>

<pre><code>decodedMessage = Base64.encodeToString(decodedBytes, Base64.DEFAULT);
</code></pre>

<p>I replaced that code with ...</p>

<pre><code>String str = new String(decodedBytes, ""UTF-8"");
</code></pre>

<p>And this solved the problem probably because decodedBytes had never been Base64 encoded in the first place.</p>

<p>I also found that using straight RSA I can only encrypt a maximum of 245 bytes if I use a 2048 bit key.  less if I use a 1024 bit key.</p>

<p>If larger strings need to be encrypted using asymmetric Public/Private keys then I need to first encrypt a string using symmetric AES and then encrypt the AES key with the public RSA key and send both the encrypted AES key and the encrypted message over the wire where the receiver can decrypt the AES key using their private RSA key. The AES key can be randomly generated in the sending code.</p>
","102","<android><encryption><encryption-asymmetric>","0","1","2","2015-10-26 20:41:23","33354964","1","4","","","","2015-10-25 23:57:33",""
"18617038","Encrypt String in java and decrypt it in winrt c#","<p>How one would encrypt a string using symmetric/asymmetric decryption on WinRT Metro in C# and encrypt this in java, let's say in a webservice?</p>

<p>I want to use RsaPkcs7 algorithm and I can see that CryptographicKey class and RSAParameters class are not even near compatible.</p>

<p>How this could be accomplished?</p>
","<p>There is <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.x509certificates.x509certificate2.aspx#exampleToggle"" rel=""nofollow"">an example in MSDN</a> and <a href=""http://artplastika.ru/vestnik/x509-java/"" rel=""nofollow"">I made a Java port</a> of it.</p>
","99","<c#><encryption><base64><encryption-symmetric><encryption-asymmetric>","-1","0","1","2013-09-04 15:02:59","","0","","","","","2013-09-04 14:49:29",""
"53972400","Why doesn't PyCrypto allow for encoding with the private and decoding with the public key to verify the sendersidentity","<p>I've been playing around with the PyCrypto Library with the intention to make a system that works like this:</p>

<ol>
<li>Create a RSA keyset for both the sender and the receiver and a seperate AES key</li>
<li>The sender:

<ol>
<li>Encrypts the message with the AES key using the ECB encryption mode ECB</li>
<li>Encrypts the AES key with the senders private key</li>
<li>Concats their own name to the result of the last step</li>
<li>Encrypts the result from the last step with the receivers public key</li>
<li>Combines the results from step 1 and 4 into 1 message and sends it to the receiver</li>
</ol></li>
<li>And the receiver

<ol>
<li>Splits the message into the actual message and the double encrypted key (which also contains the senders name)</li>
<li>Decrypts the double encrypted key using their own private key</li>
<li>Uses the name of the sender to retrieve the senders public key</li>
<li>Decrypts the AES key with the senders public key</li>
<li>Decrypts the message with the AES key</li>
</ol></li>
</ol>

<p>But I'm having trouble with the double encryption. The problem is that I can't decrypt something with the public key when it is encrypted with the private key. I understand that it is because ARS isn't supposed to work backwards, but I want to do this to verify the senders identity to the receiver. I don't know how else to do this.</p>

<p>This is the current code (I know it's messy, I'm a beginner in python and totally new to encryption):</p>

<pre><code>from Crypto import Random
from Crypto.PublicKey import RSA
from Crypto.Cipher import AES, PKCS1_OAEP
from termcolor import colored
import base64, os


def generate_keys_rsa():
    modulus_length = 256*4
    privatekey = RSA.generate(modulus_length, Random.new().read)
    publickey = privatekey.publickey()
    return privatekey, publickey


def encrypt_message_rsa(a_message, publickey):
    encryptor = PKCS1_OAEP.new(publickey)
    encrypted_msg = encryptor.encrypt(a_message)
    encoded_encrypted_msg = base64.b64encode(encrypted_msg)
    return encoded_encrypted_msg


def decrypt_message_rsa(encoded_encrypted_msg, privatekey):
    decoded_msg = base64.b64decode(encoded_encrypted_msg)
    decryptor = PKCS1_OAEP.new(privatekey)
    decoded_decrypted_msg = decryptor.decrypt(decoded_msg)
    return decoded_decrypted_msg


def generate_key_aes():
    aes_key_length = 32
    secret_key = os.urandom(aes_key_length)
    encoded_secret_key = base64.b64encode(secret_key)
    return encoded_secret_key


def encrypt_message_aes(private_msg, encoded_secret_key, padding_character):
    secret_key = base64.b64decode(encoded_secret_key)
    cipher = AES.new(secret_key, AES.MODE_ECB)
    padded_private_msg = private_msg + (padding_character * ((16 - len(private_msg)) % 16))
    encrypted_msg = cipher.encrypt(padded_private_msg.encode(""utf-8""))
    encoded_encrypted_msg = base64.b64encode(encrypted_msg)
    return encoded_encrypted_msg


def decrypt_message_aes(encoded_encrypted_msg, encoded_secret_key, padding_character):
    secret_key = base64.b64decode(encoded_secret_key)
    cipher = AES.new(secret_key, AES.MODE_ECB)
    encrypted_msg = base64.b64decode(encoded_encrypted_msg)
    decrypted_msg = cipher.decrypt(encrypted_msg)
    unpadded_private_msg = decrypted_msg.rstrip(padding_character)
    return unpadded_private_msg.decode(""ascii"")


#         PROCESS         #
# 'rec' means 'received'  #
# 'enc' means 'encrypted' #
# 'dec' means 'decrypted' #
# 'pad' means 'padding'   #
# 'div' means 'division'  #
#         PROCESS         #

raw_txt = input(""Message to send: "")
txt = str(raw_txt)

pad_char = ""{""
div_char = ""|""

# ASSEMBLY #
privatekey0_RSA , publickey0_RSA = generate_keys_rsa()
privatekey1_RSA , publickey1_RSA = generate_keys_rsa()
key_AES = generate_key_aes()

enc_txt = encrypt_message_aes(txt, key_AES, pad_char)
enc_key = encrypt_message_rsa(key_AES, privatekey0_RSA)

msg = (
        pad_char.encode(""utf-8"") +
        div_char.encode(""utf-8"") +
        enc_txt +
        div_char.encode(""utf-8"") +
        enc_key
)

# DISASSEMBLY #
rec_pad = msg[: 1]
rec_div = chr(msg[1])
rec_enc_txt = msg[2: (msg[2:].find(rec_div.encode(""utf-8"")) + 2)]
rec_enc_key = msg[(msg[2:].find(rec_div.encode(""utf-8"")) + 3):]
rec_dec_key = decrypt_message_rsa(rec_enc_key, publickey0_RSA)
rec_dec_txt = decrypt_message_aes(rec_enc_txt, rec_dec_key, rec_pad)

# RESULT LOG #
print()
print(colored(""Total message: "", ""blue"", None, [""bold""]), ""%s"" % msg)
print()
print(colored("" Original key_AES: "", ""blue"", None, [""bold""]), ""%s - (%d)"" % (key_AES, len(key_AES)))
print(colored(""Encrypted key_AES: "", ""blue"", None, [""bold""]), ""%s - (%d)"" % (enc_key, len(enc_key)))
print(colored(""Decrypted key_AES: "", ""blue"", None, [""bold""]), ""%s - (%d)"" % (rec_dec_key, len(rec_dec_key)))
print(colored(""Decrypted key_AES == Original key_AES: "", ""blue"", None, [""bold""]), colored(""%s"" % (rec_dec_key == key_AES), ""green"" if (rec_dec_key == key_AES) else ""red"", None, [""bold""]))
print()
print(colored("" Original text: "", ""blue"", None, [""bold""]), ""%s - (%d)"" % (txt, len(txt)))
print(colored(""Encrypted text: "", ""blue"", None, [""bold""]), ""%s - (%d)"" % (enc_txt, len(enc_txt)))
print(colored(""Decrypted text: "", ""blue"", None, [""bold""]), ""%s - (%d)"" % (rec_dec_txt, len(rec_dec_txt)))
print(colored(""Decrypted text == Original text: "", ""blue"", None, [""bold""]), colored(""%s"" % (rec_dec_txt == txt), ""green"" if (rec_dec_txt == txt) else ""red"", None, [""bold""]))
</code></pre>

<p>So, do you know either a solution to use ARS backwards, or an alternative way of verifying the senders identity?</p>
","<blockquote>
  <p>an alternative way of verifying the senders identity</p>
</blockquote>

<p>Could that be a <a href=""https://en.wikipedia.org/wiki/Digital_signature"" rel=""nofollow noreferrer"">digital signature</a>? It is supported by <a href=""https://pycryptodome.readthedocs.io/en/latest/src/signature/signature.html"" rel=""nofollow noreferrer"">PyCryptodome</a> and uses <a href=""https://pycryptodome.readthedocs.io/en/latest/src/signature/pkcs1_pss.html"" rel=""nofollow noreferrer"">RSA</a>.</p>
","98","<python><encryption><aes><pycrypto><encryption-asymmetric>","2","1","1","2018-12-30 02:12:38","53974813","5","","238704","","2018-12-29 19:08:29","2018-12-29 18:46:38",""
"56807959","Generate Public key from Private Key using WebCrypto API","<p>I'm using <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API"" rel=""nofollow noreferrer"">Web Crypto API</a> and am generating RSA Keypair using <a href=""https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey"" rel=""nofollow noreferrer"">generateKey</a> function. Because of some bugs in my code, I have deleted public key for some users. I'm wondering if there is any way to generate public key out of private key? I know that it's easily doable for ssh keys. Here is my sample code for generating RSA key pair:</p>

<pre><code>const generateRSAKeys = (): Promise&lt;CryptoKeyPair&gt; =&gt; {
    return crypto.subtle.generateKey(
    {
        name: 'RSA-OAEP',
        modulusLength: 2048
        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
        hash: { name: 'SHA-512' },
    },
    true,
    ['encrypt', 'decrypt', 'wrapKey', 'unwrapKey'],
);
</code></pre>
","<p>You can do it by exporting private key and importing exported data like public data</p>

<pre><code>const keys = await crypto.subtle.generateKey(
  {
    name: 'RSA-OAEP',
    modulusLength: 2048,
    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
    hash: { name: 'SHA-512' },
  },
  true,
  ['encrypt', 'decrypt', 'wrapKey', 'unwrapKey'],
);

// export private key to JWK
const jwk = await crypto.subtle.exportKey(""jwk"", keys.privateKey);

// remove private data from JWK
delete jwk.d;
delete jwk.dp;
delete jwk.dq;
delete jwk.q;
delete jwk.qi;
jwk.key_ops = [""encrypt"", ""wrapKey""];

// import public key
const publicKey = await crypto.subtle.importKey(""jwk"", jwk, { name: ""RSA-OAEP"", 
hash: ""SHA-512"" }, true, [""encrypt"", ""wrapKey""]);

console.log(publicKey)
</code></pre>

<p><a href=""https://i.stack.imgur.com/YMBZ8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/YMBZ8.png"" alt=""enter image description here""></a></p>
","95","<javascript><encryption><rsa><encryption-asymmetric><webcrypto-api>","0","0","1","2019-08-20 10:11:49","","2","","","","","2019-06-28 13:35:34",""
"34833346","How can the browser handle encrypted data without HTTPS?","<p>I have a use case where the back end serves encrypted video files with a <code>Content-type: video/mp4</code> HTTP header. Normally, the browser (any browser) would start streaming the video file in it's built-in player, but since the data is encrypted, it doesn't know how to handle it.</p>

<p>The way the encryption is done is kind of like HTTPS. The server sends the front end a public key, the front end generates a symmetrical key with the public key and both the server and front end use it to encrypt/decrypt stuff.</p>

<p>I know that if I was using HTTPS, it would work, as an automatic process would occur between the server and browser. So I guess my question is <em>how do I get the browser to display an encrypted video without using HTTPS?</em></p>
","<p>You must either use a video player that natively knows how to decrypt that format (contact the vendor of the back end), or put a piece of middleware in to decrypt the format (contact the vendor of the back end).  In both cases, you'll need the key as well.</p>

<p>Or log into the back end to change its settings (guess who you should contact).</p>

<p>Alternately, read the manual for the back end.</p>
","95","<video><https><public-key-encryption><encryption-symmetric><encryption-asymmetric>","1","0","1","2016-02-02 06:22:06","","0","","","","","2016-01-16 23:32:05",""
"11249320","Need to encrypt the data but not with SHA1 or other digest","<p>So m working on a project where I need to encrypt the data user is gonna enter on the website... I don't want to use the SHA1 or any other encryption method, since they are one-way encryption and I need to manipulate the data on the server side (I'm not storing the user data). Can anybody suggect me some good methodologies by which I can achieve this ??? </p>

<p>Is Public Key Encryption gonna work ? If yes, which one should I use ? Or should I design a new algo ? </p>

<p>I'm working on Java.</p>

<p>It would be really great if someone could point me to some resources for their answer or give me totally new and awesome idea ... :D</p>

<p>\m/ \m/</p>

<p>Does anybody know how many different type of Hashing algo's are commonly used ... ???</p>
","<p>You should head to <a href=""http://www.bouncycastle.org/"" rel=""nofollow"">http://www.bouncycastle.org/</a> . You'll find all the info you need, and also some background on hashing/encryption/signing, because you seem to be a bit puzzled about those terms. (no offense)</p>
","95","<java><security><public-key-encryption><encryption-asymmetric>","-1","0","2","2012-06-28 19:42:53","","4","","1349298","","2012-06-28 19:42:53","2012-06-28 16:47:49",""
"11249320","Need to encrypt the data but not with SHA1 or other digest","<p>So m working on a project where I need to encrypt the data user is gonna enter on the website... I don't want to use the SHA1 or any other encryption method, since they are one-way encryption and I need to manipulate the data on the server side (I'm not storing the user data). Can anybody suggect me some good methodologies by which I can achieve this ??? </p>

<p>Is Public Key Encryption gonna work ? If yes, which one should I use ? Or should I design a new algo ? </p>

<p>I'm working on Java.</p>

<p>It would be really great if someone could point me to some resources for their answer or give me totally new and awesome idea ... :D</p>

<p>\m/ \m/</p>

<p>Does anybody know how many different type of Hashing algo's are commonly used ... ???</p>
","<p>Are you certain you don't want to transmit the data over https? That would protect the data (via well-understood public key encryption) in transit, and then you don't have to mess with trying to run an extra encryption scheme in your client-side code. What is the use case here?</p>
","95","<java><security><public-key-encryption><encryption-asymmetric>","-1","1","2","2012-06-28 19:42:53","","4","","1349298","","2012-06-28 19:42:53","2012-06-28 16:47:49",""
"44007725","Encrypting DB with multi user access","<p>I am working on a project that will be sold to government entities. Because they will be storing sensitive lists of employees, they do not want us to have access to their DB.</p>

<p>I am not an encryption specialist, but I was thinking of encrypting the DB the app uses in such a way that we do not have access to it, but many users in their organisation (users they gave permissions to) must be able to read the data from their app.</p>

<p>How does that work? I read about public/private keys, symmetric/asymmetric encryption, but I'm having a hard time understanding how all of that fits in.</p>
","","87","<encryption><encryption-symmetric><encryption-asymmetric>","0","","0","2017-05-16 17:14:14","","7","","","","","2017-05-16 17:14:14",""
"36304992","MSSQL2012 encrypt cells at user-level","<p>Is there a way to encrypt cell values based on user account? So that:</p>

<ul>
<li>Only the valid users can decrypt the values of some cells? </li>
<li>Or, a way to crypt data by user authentication, so only the right user will decrypt it?</li>
</ul>

<p>For now this is my solution: I create asymmetric keys, and grant users on them. It's not good because:</p>

<ol>
<li>I must create one key for each user or group of users;</li>
<li>It can't be atomic;</li>
<li>Query for read data must always retrieve key name.</li>
</ol>

<p>Example:</p>

<pre><code>create database test_for_encrypt
Go
use test_for_encrypt
Go

-- Create Master key and certificate
CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'StrongPass1234';
CREATE CERTIFICATE MySelfSignedCert
WITH SUBJECT = 'MySelfSignedCert',
EXPIRY_DATE = '07/14/2020';

-- Create Asymmetric keys
CREATE ASYMMETRIC KEY Asym_user_1  WITH ALGORITHM = RSA_2048
CREATE ASYMMETRIC KEY Asym_user_2  WITH ALGORITHM = RSA_2048

-- create table with data and select data
create table tb_encrypt (word nvarchar(100), asymkey nvarchar(100), crypt varbinary(1000))
Go
insert tb_encrypt (word, asymkey) values (N'One', N'Asym_user_1'), (N'Two', N'Asym_user_2')
update tb_encrypt set crypt = ENCRYPTBYASYMKEY(ASYMKEY_ID(asymkey), word)
select word, crypt, convert(nvarchar, DECRYPTBYASYMKEY(ASYMKEY_ID(asymkey), crypt)) as decrypt
from tb_encrypt


-- create new user with grants
create login [user_asym] With password = N'password_1234'
CREATE USER [user_asym] FOR login [user_asym]
ALTER AUTHORIZATION ON SCHEMA::[db_datareader] TO [user_asym]
GRANT CONTROL ON ASYMMETRIC KEY::[Asym_user_1] TO [user_asym]
ALTER ROLE [db_datareader] ADD MEMBER [user_asym]

-- After this, Logout and Login with [user_asym]
-- Select data with user [user_asym]
select word, crypt, convert(nvarchar, DECRYPTBYASYMKEY(ASYMKEY_ID(asymkey), crypt)) as decrypt
from tb_encrypt
</code></pre>
","<p>Keep a table with user names and whether the corresponding column is Encrypted for them or not.
Use a table valued function with the user as the parameter and based on the above table determine the columns to be Encrypted or not.</p>

<p>Something like:</p>

<pre><code>Select Case when UserSeeEncrypted = 1 then &lt;EncryptedVal&gt;
Else &lt;Decrypted&gt; ....
</code></pre>

<p>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>

<p>I add the following table </p>

<pre><code>Create Table #Users (UserName varchar(100), IsEncrypted bit )
Insert into #Users
Select 'PrasadPC\Prasad', 1 -- this is my username for my machine (i used to test)
Union
Select 'user2', 0
Union
Select 'user3', 1

select * from #Users
</code></pre>

<p>This code is taken from your post and modified.</p>

<pre><code>CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'StrongPass1234';
CREATE CERTIFICATE MySelfSignedCert
WITH SUBJECT = 'MySelfSignedCert',
EXPIRY_DATE = '07/14/2020';
</code></pre>

<p>the ASYMMETRIC KEY is one for any record</p>

<pre><code>CREATE ASYMMETRIC KEY [Encrypt_Key_Radioleao]  WITH ALGORITHM = RSA_2048
</code></pre>

<p>create table with data and select data (I changed your table structure
just to hold the word, if u need to keep the encrypted data, u can do 
that by changing my logic a bit)</p>

<pre><code>create table #tb_encrypt (word nvarchar(100))
Go
insert #tb_encrypt (word) values (N'One'), (N'Two')
</code></pre>

<p>Now the Query</p>

<pre><code>select Word,  
Case when exists
(Select UserName from #Users 
where IsEncrypted = 0 and SUSER_SNAME() = UserName ) then Word
Else 
convert(nvarchar(max), ENCRYPTBYASYMKEY(ASYMKEY_ID('Encrypt_Key_Radioleao'),
 Word)) End as En_Decrypt
from #tb_encrypt e

-- change My user to see decrypted data, 
Update #Users set IsEncrypted = 0  where UserName = 'PrasadPC\Prasad'
</code></pre>
","86","<sql-server><encryption><sql-server-2012><encryption-asymmetric>","3","0","1","2016-04-18 13:03:28","","2","","3641564","","2016-03-30 09:58:25","2016-03-30 09:39:57",""
"26421155","Public key 48bytes longer when reading certificate crt file","<p>When I read public key from crt certificate file (RSA sig alg : sha256RSA 2048bits) :</p>

<pre><code>        FileInputStream fis = new FileInputStream(PATH_TO_CERTIFICATE_FILE);
        CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
        Certificate cert = (Certificate) cf.generateCertificates(fis).iterator().next();
        RSAPublicKey pk = (RSAPublicKey) cert.getPublicKey();

        byte[] pkValue = pk.getEncoded() 
</code></pre>

<p>I will get as result (pkValue variable) array with additional 48bytes on the beginning. 
Why is that, Is my inicializatioin of CertificateFactory correct ?</p>

<p>(Current workaround for me is to remove first 48bytes from pkValue array. Then encryption with public key + decryption with private key works fine)</p>
","<p>Java stores the public keys in <code>SubjectPublicKeyInfo</code> structures. These structures are also present in the certificate. They are ASN.1 DER encoded.</p>

<p>RSA public keys consist of multiple (2) components anyway: the modulus and the public exponent. The modulus is already 2048 bits; it determines the key length. The public exponent is <em>often</em> set to the value ""F4"", the fourth number of Fermat, <code>0x010001</code>. These need to be separated for a generic implementation to distinguish them.</p>

<p>More information in the <a href=""https://tools.ietf.org/html/rfc3280"" rel=""nofollow"">X509 spec</a> and you can have a look at your byte array returned by <code>getEncoded</code> (use hex or base64) <a href=""http://lapo.it/asn1js/"" rel=""nofollow"">here</a>.</p>
","82","<java><encryption><public-key-encryption><encryption-asymmetric><x509>","1","1","1","2014-10-17 10:12:35","","1","","589259","","2014-10-17 10:06:51","2014-10-17 08:42:02",""
"49987899","Determining encryption method from public key and cipher text","<p>I have a public key encoded as Base64. I tried decoding it as ASN.1 and I can see it consists of two parts: a 2048 bit integer and the integer 65537. I also have a Base64 encoded cipher text encrypted with that public key. Moreover I also know the clear text string that corresponds to the cipher text but I'm not sure which processing (if any) has been applied to the clear text before encryption (e.g. which charset has been used to encode the string).</p>

<p>I'm looking for a way to determine the type of the key and more importantly, the encryption method (algorithm, mode and padding). I tried brute force (i.e. encrypting and comparing computed and received cipher texts) with Java assuming algorithm is RSA but I'm not able not find a match. I'm probably not trying all combinations.</p>

<p>I'm already bruteforcing the following:</p>

<ul>
<li>Charsets</li>
<li>Ciphers (probably not covering all)</li>
</ul>

<p>Any idea?</p>

<hr>

<p>The public looks like an RSA key, therefore my issue is mostly trying all possible <code>(mode,padding)</code> combinations. Is there a way to iterate all possibilities? The other possibility is that a pre processing is applied to the clear text before encryption - any ""standard"" pre processing for a string before encryption?</p>
","<p>First of all, if the public key is provided, the algorithm is typically provided along with it (e.g. as another field within the certificate). Usually the intention is for any client to be able to use the public key, so providing the algorithm is consistent with that purpose.</p>

<p>If for some reason the key and its metadata have become separated, it is likely you can just look at the key's data structure and figure out the algorithm. For example, any key that is stored as an OpenSSH key will follow <a href=""https://tools.ietf.org/html/rfc4253#section-6.6"" rel=""nofollow noreferrer"">RFS 4523</a> which includes a header specifying the algorithim. An RSA public key will contain the exponent and modulus. An ECC key will contain two 32-byte numbers. Etc.</p>
","80","<security><encryption-asymmetric>","0","0","3","2018-04-24 06:27:29","49994513","0","","1002972","","2018-04-23 19:51:50","2018-04-23 18:41:46",""
"49987899","Determining encryption method from public key and cipher text","<p>I have a public key encoded as Base64. I tried decoding it as ASN.1 and I can see it consists of two parts: a 2048 bit integer and the integer 65537. I also have a Base64 encoded cipher text encrypted with that public key. Moreover I also know the clear text string that corresponds to the cipher text but I'm not sure which processing (if any) has been applied to the clear text before encryption (e.g. which charset has been used to encode the string).</p>

<p>I'm looking for a way to determine the type of the key and more importantly, the encryption method (algorithm, mode and padding). I tried brute force (i.e. encrypting and comparing computed and received cipher texts) with Java assuming algorithm is RSA but I'm not able not find a match. I'm probably not trying all combinations.</p>

<p>I'm already bruteforcing the following:</p>

<ul>
<li>Charsets</li>
<li>Ciphers (probably not covering all)</li>
</ul>

<p>Any idea?</p>

<hr>

<p>The public looks like an RSA key, therefore my issue is mostly trying all possible <code>(mode,padding)</code> combinations. Is there a way to iterate all possibilities? The other possibility is that a pre processing is applied to the clear text before encryption - any ""standard"" pre processing for a string before encryption?</p>
","<p>You're mixing terms from two different technologies. ""Mode"" and ""padding"" refer to symmetric ciphers, not asymmetric ciphers like public key cryptography. It's not necessarily wrong since the typical approach is to write the public key, then generate a random session key for a symmetric cipher (e.g., AES) and encrypt it using the public key, then encrypt the plaintext with the random session key, then finally add any message digest. (If you add an HMAC you should use a different keypair than then one used to encrypt a modified session key and it should be a digest of the ciphertext, not the plaintext.) The cipher and mode will be encoded somehow but it will almost certainly use magic values. (e.g., cipher 3, mode 1) and you'll be expected to know how to interpret those values.</p>

<p>Do you know what produced the ciphertext? Does it produce a standard format that you can find documented somewhere, or is it homebrew?</p>

<p>As for figuring out the details of the algorithm and mode from just the ciphertext all I can say is ""good luck"". The spooks may have tools to help figure this out but these ciphers are designed to produce output that looks like random data. Unless they're using ECB and have repeating plaintext it will be very opaque.</p>
","80","<security><encryption-asymmetric>","0","0","3","2018-04-24 06:27:29","49994513","0","","1002972","","2018-04-23 19:51:50","2018-04-23 18:41:46",""
"49987899","Determining encryption method from public key and cipher text","<p>I have a public key encoded as Base64. I tried decoding it as ASN.1 and I can see it consists of two parts: a 2048 bit integer and the integer 65537. I also have a Base64 encoded cipher text encrypted with that public key. Moreover I also know the clear text string that corresponds to the cipher text but I'm not sure which processing (if any) has been applied to the clear text before encryption (e.g. which charset has been used to encode the string).</p>

<p>I'm looking for a way to determine the type of the key and more importantly, the encryption method (algorithm, mode and padding). I tried brute force (i.e. encrypting and comparing computed and received cipher texts) with Java assuming algorithm is RSA but I'm not able not find a match. I'm probably not trying all combinations.</p>

<p>I'm already bruteforcing the following:</p>

<ul>
<li>Charsets</li>
<li>Ciphers (probably not covering all)</li>
</ul>

<p>Any idea?</p>

<hr>

<p>The public looks like an RSA key, therefore my issue is mostly trying all possible <code>(mode,padding)</code> combinations. Is there a way to iterate all possibilities? The other possibility is that a pre processing is applied to the clear text before encryption - any ""standard"" pre processing for a string before encryption?</p>
","<p>That's an RSA key almost certainly.</p>

<p>But your approach will not work: if you encrypt the same message twice with RSA, you will get different results.  That's because RSA involves random padding (see <a href=""https://tools.ietf.org/html/rfc3447"" rel=""nofollow noreferrer"">PKCS #1</a>), which is a requirement for the security of the design (to stop attacks like the one you are attempting) -- see footnote. </p>

<p><strong>Bottom line</strong>: You won't be able to tell how exactly it was encrypted with the information you have, assuming you don't make a cryptographic breakthrough.</p>

<p>Footnote: The security requirement that prevents what you are trying to do was detailed in the seminal cryptographic paper <a href=""https://groups.csail.mit.edu/cis/pubs/shafi/1984-jcss.pdf"" rel=""nofollow noreferrer"">Probabilistic Encryption</a>.  Among many requirements, they suggested that even if only a single bit was encrypted, you should not be able to brute force (i.e. try both 0 and 1 in this case) to see which value encrypts to the ciphertext that you captured.  The PKCS #1 standard was built with these considerations in mind.</p>
","80","<security><encryption-asymmetric>","0","1","3","2018-04-24 06:27:29","49994513","0","","1002972","","2018-04-23 19:51:50","2018-04-23 18:41:46",""
"50644831","Could stealing the private key compromise RSA security?","<p>I am developing a windows desktop app where the clients applications need to download some data file from a public shared folder. in order to protect the data from tempering i would like to generate RSA private and public keys. keep the public key in my own machine at home and include the private key in all clients.</p>

<p>when i want to send a new file for the clients to download (at well) i hash the file and encrypt the hash with the public key and store it as .sig file alongside the data file in a public shared folder.</p>

<p>now if one of the client users is malicious he can steal the private key from his machine.</p>

<p>the question is : provided that the public key is secret and this is the only use of that key pair and i absolutely don't need any encryption on the data file. does stealing the private key from a client compromise my public key? i.e can the malicious user craft a file signature so that the data file appear to be coming from me?</p>
","<p>I belive you've designed this backwards.You want to send the <em>public</em> key to the clients and keep the <em>private</em> to yourself. The public key is public; anyone should be able to know it. The private key is private; only the owner should know it.</p>

<p>Rather than hashing the file and encrypting the hash with the public key, you want to sign the file with your private key and let the clients use the public key to verify the signature. The signing operation performs the same idea as your ""encrypt the hash"" but is the standard construction, and your RSA tools likely include a signing function.</p>
","79","<encryption><rsa><public-key-encryption><encryption-asymmetric>","0","4","1","2018-06-01 13:53:51","50645003","1","","","","","2018-06-01 13:44:04",""
"20957448","Time & device limited licensing","<p>I need to add a license to my application to limit time &amp; device that my app. can be used.<br>
So I thought to store HDD and/or NIC serial numbers and expire date in my license file.<br>
Now how can I protect my license in a way that:  </p>

<ul>
<li>My application be able to decrypt it and read &amp; check the expire date and serials </li>
<li>User shouldn't be able to create a license file for himself.</li>
</ul>

<p>Can I use public/private key encryption to achieve this?  </p>

<p>If I can use public/private key encryption can the user that has private key (for decryption) use that private key for encryption (making a license manually using the private key that be able to decrypt using that private key) or only the pubic key can encrypt in a way that private key decrypt it?  </p>

<p>Is there a better solution?</p>
","<p>Usually a license contains this kind of information (count, dates, etc) in human readable format so your customer can verify them. You then add a signature using your private key so licenses cannot be forged / changed. </p>

<p>Your app can now use the public key (that is built into it) to verify the license, even if someone can read that key they cannot produce valid licenses. [until they replace the public key in your app with their own]</p>
","77","<encryption><licensing><public-key-encryption><encryption-asymmetric>","0","0","1","2014-02-18 10:12:13","","4","","","","","2014-01-06 19:12:16",""
"22324120","correct implementation of asymmetric cryptography","<p>I have mobile apps that make requests to server. I am thinking of using asymmetric cryptography where the private key resides in the server. The public key will be distributed to all users. Meaning all users will use the same public key for encryption. Is this way viable?</p>
","","76","<encryption-asymmetric>","0","","0","2014-03-11 11:17:18","","3","","","","","2014-03-11 11:17:18",""
"42820680","A more secure symmetric encryption key vs. asymmetric key","<p>What are the advantages of having a symmetric encryption algorithm with a lower probability of key retrieval than the asymmetric encryption used for transferal of symmetric key? I can see how it obligates the eavesdropper to concentrate on the asymmetric key, but are there other advantages?</p>
","","74","<encryption><encryption-symmetric><encryption-asymmetric>","0","","0","2018-02-11 14:58:47","","6","","1033581","","2018-02-11 14:58:47","2017-03-15 21:07:19",""
"55600954","How to decrypt data with public key","<p>Similar questions were asked many times but I was looking for an answer for 2 days and didn't find what I'm looking for. First of all, I have fair understanding of public/private key security from consuming standpoint. I never looked into the mathematics behind it. I understand that normally you use a public key to encrypt data and a private key to decrypt it. I'm also aware of the other pair of operations: signing data with a private key and verifying it with a public key. In .NET there is RSACryptoServiceProvider implementing or wrapping all those operations. If we look at the Verify method, it is declared as this</p>

<pre><code>public bool VerifyHash(byte[] rgbHash, string str, byte[] rgbSignature)
</code></pre>

<p>My problem is that instead of verifying I would like to decrypt the signature data into the original hash which was signed with the private key. Now, I'm a bit confused. I found many answers stating that this is impossible but is it impossible from the API standpoint or from the mathematical standpoint? I would guess that it might be not possible only from the .NET API standpoint because if I use OpenSSL and do this</p>

<pre><code>.\openssl.exe rsautl -verify -certin -inkey dev.crt -in signature.dat -out original.dat
</code></pre>

<p>I can decrypt the signature (signature.dat) into the original value (original.dat) that signature was created from. I believe that proves that mathematically it is possible.</p>

<p>Now the big question is there a way to do this with .NET, any workarounds, any libraries, is there anything what will do for me what OpenSSL is capable of doing. Please don't suggest to execute OpenSSL from the code. I cannot package it with the application. I need something else, ideally finding a workaround with the existing RSACryptoServiceProvider.</p>

<p><strong>Updated step by step example:</strong></p>

<p>I created a hash (128 bytes)</p>

<pre><code>3D 0C 20 5C 73 DD 81 73 2A 41 F8 C7 A1 32 86 A5
F5 B5 D4 80 E0 0E 43 D0 7C 81 37 5F E5 AA 85 2A
02 EC 63 FA B1 87 44 92 E7 6D AA 96 EA 5E AA 6D
FC 38 8E C4 21 F6 7E D5 2A C5 9E 0F 27 2A D7 B9
2C C8 7C CF 8E 52 B1 FD AF 1C E6 80 BB 68 81 55
DC 25 7B 8D ED 22 64 87 0F 4D 08 6A B1 33 74 FA
C3 9E AA 12 4A 56 01 AA A5 A8 5E 75 F5 A4 8F EF
F7 E4 AA DB 58 E7 61 96 F7 40 B7 A1 CA 49 E5 FC
</code></pre>

<p>Then I executed</p>

<pre><code>.\openssl.exe rsautl -sign -inkey dev.key -in hash.dat -out signed_hash.dat
</code></pre>

<p>to generate a signature where the signed hash result is this. It's 256 bytes</p>

<pre><code>69 A3 DF A1 F6 4C 88 8B 83 E7 C1 BD 4E 12 D6 24
4B 5F 52 23 A4 3B 4F 27 11 37 C0 4C FA 99 3D 43
2B E5 0E 37 EF BB 2B 10 FF 28 4D 84 93 5A A2 75
52 DA C8 83 75 6A B2 29 91 79 AC 0C 12 8D C6 50
3A B4 71 CA 3F CD 15 73 2C 33 1E FA 4D E3 35 3A
68 A5 6E 1D 2B FD 91 03 3D 2E 97 C0 1A 4F A7 E2
FF 65 5A F9 96 3E 1B 68 A6 57 43 B4 62 35 32 F5
17 DF 76 55 8F 89 81 34 F2 B6 24 83 B8 76 8D E3
AD DB 7E 38 DE C0 94 5B 90 15 D7 4F 25 86 90 1C
B4 12 94 A4 0E BD 76 BB CF 54 2F 24 4D DE B5 8D
C8 40 DD 16 81 50 20 BD 11 A1 65 07 9B 00 D8 C1
60 D9 B2 4F 64 F7 4E 02 A7 B6 8B E6 2A D1 AC EF
3C E7 C5 4D 95 6D 70 B7 31 A2 60 AE 37 D3 83 21
23 BD 25 34 1E B7 D9 EA 05 7A A3 C3 9C DB DA A4
A6 14 11 C6 40 0D BD CB DD C2 F2 87 3A B8 A2 E3
7E 80 D5 8B 01 91 4B B2 0A 42 54 B6 3B 7F 41 3C
</code></pre>

<p>Then if I do this</p>

<pre><code>.\openssl.exe rsautl -verify -certin -inkey dev.crt -in signed_hash.dat -out original_hash.dat
</code></pre>

<p>I get back my original hash. The public exponent value retrieved from the RSAParameters for the public key is this</p>

<pre><code>01 00 01
</code></pre>

<p>and the Modulus is this</p>

<pre><code>aa 0e 02 74 4c b5 06 87 f6 ae 4c 2c 71 76 59 7a
84 47 07 db 8e dd 8a 58 2c ba e5 1b 91 45 3e de
7d a9 d4 0a b9 cf 9f c2 19 cf af d3 30 fd 55 fb
81 d0 ef 68 ef c7 b0 fc 49 c9 4f fd 20 e9 ea 04
31 57 8f c2 1e 85 76 86 63 12 e0 00 01 17 02 80
76 fc f9 bc 09 61 80 6b a3 0b 8e de 1d b2 2f d6
ed 18 32 4b 03 0b 3b 2c ca 75 b6 85 95 20 5a 16
dc 4f 33 4b 97 84 fe 3f 9f 04 5b ba 56 44 73 aa
9f b0 7d 44 f4 58 ea a2 9d 35 d9 5c 8d 2d 39 a8
ce ee 19 24 9e 78 74 dc 6d 16 2b d7 24 bf 80 fa
a6 12 bf bd 89 cd 47 d0 bd 19 21 7d 3d 65 7b 06
9b 24 55 3c ca 4c 63 ce 40 ad a3 c5 72 cf 66 79
e0 f2 23 05 fa 20 32 b0 02 96 f1 a3 82 40 b4 b9
ac 9c f1 cf 83 a3 f0 50 83 81 b6 d7 f8 5f 93 21
71 0b f9 26 87 3d 61 17 cc 0c 09 09 b4 40 e4 92
45 fb 77 ca 94 cb 15 fb 54 68 4a c3 31 2d 57 09
</code></pre>

<p>What I need to do is to retrieve the original hash from the signed hash in my C#.NET code and I don't know how to do that.</p>
","<p>I don't believe it's possible using .NET crypto API's, at least I was not able to find a way. I was forced to re-implement the RSA algorithm using BigInteger. It's surprisingly straight forward.</p>

<ol>
<li>Convert the signature, public exponent, and key modulus to BigIntegers.</li>
<li>Call <code>BigInteger.ModPow(signature, exponent, modulus)</code>.</li>
<li>Convert the result to a byte[]; this is the hash you're looking for.</li>
</ol>

<p>Be aware of endianness and sign issues...
<a href=""https://msdn.microsoft.com/en-us/library/dd268207(v=vs.110).aspx"" rel=""nofollow noreferrer"">https://msdn.microsoft.com/en-us/library/dd268207(v=vs.110).aspx</a></p>

<p>Here is some information on the subject that is specific to Java (and does not have the endianness issues you will face in .NET)...
<a href=""https://www.nayuki.io/page/java-biginteger-was-made-for-rsa-cryptography"" rel=""nofollow noreferrer"">https://www.nayuki.io/page/java-biginteger-was-made-for-rsa-cryptography</a></p>
","74","<.net><rsa><encryption-asymmetric>","0","1","1","2019-04-11 20:55:18","","4","","1170447","","2019-04-11 20:55:18","2019-04-09 20:37:05",""
"13461844","One text encrypted with multiple keys. Is it secure?","<p>Let's say i have one plaintext and i encrypt it with different keys (each on its own). Is it possible to find the plaintext from these encrypted ciphers or how hard is it to resample the text?
Does this even make sense, especially in respect to asymmetric-encryption?</p>

<p>For example:</p>

<pre><code>    VALUE     KEY         CIPHER
    ""abc""  +  ""key1""  -&gt;  ""izwer""
    ""abc""  +  ""key2""  -&gt;  ""werio"" 
    ""abc""  +  ""key3""  -&gt;  ""nbmdi""
    ""abc""  +  ""key4""  -&gt;  ""oiuuw""
</code></pre>
","<p>The best known example of an attack against asymmetric encryption with multiple keys is
<a href=""http://en.wikipedia.org/wiki/Coppersmith%27s_Attack#H.C3.A5stad.27s_Broadcast_Attack"" rel=""nofollow"">Hastad's broadcast attack against RSA</a>.
This is of course one of the motivations to use a properly designed padding scheme.</p>
","72","<encryption><public-key-encryption><encryption-asymmetric>","0","1","1","2018-06-26 04:20:28","","1","","1033581","","2018-06-26 04:20:28","2012-11-19 20:41:18","2014-03-10 09:06:36"
"54957158","Not able to use openssl in Ruby on Rails application","<p>I am trying to use asymmetric encryption in Ruby on Rails. For this, I am trying to use openssl library. First I created keys inside a model named <code>Manufacturer</code>. </p>

<pre><code>def create_verification_keys
  keypair = DigitalSign.generate_keypair
  self.private_key = keypair.to_s
  self.public_key = keypair.public_key.to_s
end
</code></pre>

<p>After this, inside the controller, I wrote:</p>

<pre><code>@privatekey=Manufacturer.first.private_key 
@publickey=Manufacturer.first.public_key
$hash=Digest::MD5.hexdigest(""abcd"")
$encrypted_string = Base64.encode64(@privatekey.private_encrypt($hash))
</code></pre>

<p>But when I run it, it returns the following error:</p>

<pre><code>""undefined method `private_encrypt' for #&lt;String:0x00007f3e107c2360&gt; Did you mean? private_methods""
</code></pre>
","<p>The error occurs, because <code>@privatekey</code> instance variable is of type <code>String</code>, and does not have <code>private_encrypt</code> method.</p>

<p>It is string, because in the method <code>create_verification_keys</code> you do the following:</p>

<pre><code>self.private_key = keypair.to_s
self.public_key = keypair.public_key.to_s
</code></pre>

<p><code>to_s</code> here explicitly converts the object to string, and it is OK, because the database expects, stores and returns a simple string (in this case), not a complex object.</p>

<p>To fix that you first need to instantiate the proper type. If you use openssl gem, probably, it should be something like that:</p>

<pre><code>rsa = OpenSSL::PKey::RSA.new(@privatekey)
rsa.private_encrypt($hash)
</code></pre>

<p>Documentation reference <a href=""https://ruby.github.io/openssl/OpenSSL/PKey/RSA.html"" rel=""nofollow noreferrer"">here</a>.</p>
","71","<ruby-on-rails><ruby><encryption><openssl><encryption-asymmetric>","2","0","1","2019-03-02 18:01:38","","0","","5565348","","2019-03-02 18:01:38","2019-03-02 09:42:21",""
"43121700","misunderstanding of TLS functionality on Mosquitto's broker","<p>i configured TLS on the mosquitto's broker as described , if i understand the real functionality of TLS :
it use both asymmetric and symmetric crypto ,asymmetric crypto for changing the key between broker/server and client and symmetric crypto to encrypt the communication between them , here i don't see where is symmetric crypto and if a type mosquitto_sub -v -u ""user"" -P ""password"" -t ""path/to/topic "" --cafile ""path/to/ca.crt "" how can i know that the communication is encrypted
I'm so confused can someone explain ???</p>
","<p>I think you are misunderstanding how Transport Layer Security (TLS) functions. In TLS the asymmetric (public/private) encryption is used to allow two systems to agree on a form of encryption to use for communication. See the answer to this question (<a href=""https://stackoverflow.com/questions/6088583/which-symmetric-key-algorithm-does-ssl-use"">Which symmetric key algorithm does SSL use?</a>) or if you are a more visual person take a look at the diagram on page 11 of this white paper (<a href=""https://www.sans.org/reading-room/whitepapers/protocols/ssl-tls-beginners-guide-1029"" rel=""nofollow noreferrer"">https://www.sans.org/reading-room/whitepapers/protocols/ssl-tls-beginners-guide-1029</a>).</p>

<p>In your specific example, what is happening (as I understand it) is that that the Client requests an SSL connection to the Broker. The Broker and Client then use public key encryption to allow the two systems to securely agree on a form of encryption and a shared key. </p>
","67","<ssl><tls1.2><mosquitto><encryption-symmetric><encryption-asymmetric>","0","0","1","2017-04-03 19:41:23","","1","","","","","2017-03-30 15:07:37",""
"37414417","How to store and display asymmetrical encrypted customer data without keeping the private key","<p>Here are the requirements:
 1. Receive data and store it encrypted data with public key
 2. Private key is not supplied and not stored
 3. Return encrypted data through the APIs
 4. Display decrypted data in the web client with the private key supplied (but never sent over the wire)</p>

<ol>
<li>Is this standard mode of operation?</li>
<li>I was thinking the client would supply the private key on demand and it will be stored in memory, so every new session the key would need to be supplied again. that way the client can decrypt these fields to display.</li>
<li>Any better suggestion on how to handle customer sensitive data, where only the customer can see that decrupted data, and not even the admin on our service can decrypt the data?</li>
</ol>
","<p>Encrypt the data on the client and send the encrypted data to the server. This eliminate the need for the server to have a public key per client. Since only the client has the key a symmetric key algorithm such as AES is a better solution.</p>

<p>Generally even when using PKI the data is actually encrypted with a symmetric key. Asymmetric key encryption has several limitations such as being exceptionally slow and limited in data size to the key size. There needs to be a compelling reason to need a public/private key pair.</p>
","67","<security><encryption><private-key><encryption-asymmetric><pii>","-1","0","1","2016-05-24 13:48:21","","6","1","","","","2016-05-24 13:00:45",""
"45444049","Encryption Algorithm with large key size","<p>I have a 1200 bit key which i would like to use for encrypting data.Is there any encryption algorithm i could use that uses a large key?
The performance of the algorithm does not have to be really good but as long as it uses the entire 1200 bit key,it is good enough.</p>
","<p>Use a key derivation function such as <a href=""https://en.wikipedia.org/wiki/PBKDF2https://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow noreferrer"">PBKDF2</a> to create a symmetric key from the 1200 bit key.</p>

<p>Then use AES to encrypt the data.</p>
","65","<encryption><encryption-symmetric><encryption-asymmetric>","0","0","1","2017-08-01 19:48:01","","12","","","","","2017-08-01 17:16:47",""
"52919233","IllegalBlockSize Exception when using asymmetric encryption (Public Private Key Enc)","<p>I have set up public and private key encryption in Java, and distributed the public keys of the two users (communication is between two users). I now want the users to exchange a symmetric key. What I am supposed to do:</p>

<ol>
<li>User A generates a key.</li>
<li>User A encrypts the key with his private key and then encrypts it with B's public key.</li>
<li>User A sends the encrypted key.</li>
<li>User B receives the encrypted key.</li>
<li>User B decrypts the key with his private key and then A's public key.</li>
</ol>

<p>My code for user A to generate the key:</p>

<pre><code>1. KeyGenerator keyGenerator = KeyGenerator.getInstance(ENCMETHOD);
2. SecureRandom secureRandom = new SecureRandom();
3. int keyBitSize = 128;
4. keyGenerator.init(keyBitSize, secureRandom);
5. secretKey = keyGenerator.generateKey();
6. encodedKey = Base64.getEncoder().encodeToString(secretKey.getEncoded());

// encrypt with public key of B and then my private key
7. String encryptedMessage = encodedKey;
8. encryptedMessage = ac.encryptText
               (
                        ac.encryptText(encryptedMessage, otherUserPublickey),
                        privateKey
                );
</code></pre>

<p>Line 8 throws the following error:</p>

<pre><code>javax.crypto.IllegalBlockSizeException: Data must not be longer than 117 bytes
    at com.sun.crypto.provider.RSACipher.doFinal(RSACipher.java:344)
    at com.sun.crypto.provider.RSACipher.engineDoFinal(RSACipher.java:389)
    at javax.crypto.Cipher.doFinal(Cipher.java:2165)
    at driver.AsymmetricCryptography.encryptText(AsymmetricCryptography.java:73) // please refer to the code section below for this method
    at driver.ClientOne.main(ClientOne.java:158) // this is line 8 in the above code
</code></pre>

<p>The method AsymmetricCryptography.encryptText(String message, PrivateKey key):</p>

<pre><code>public String encryptText(String msg, PrivateKey key)
        throws
        UnsupportedEncodingException, IllegalBlockSizeException,
        BadPaddingException, InvalidKeyException {
        this.cipher.init(Cipher.ENCRYPT_MODE, key);
        return Base64.encodeBase64String(cipher.doFinal(msg.getBytes(""UTF-8"")));
}

// this.cipher = Cipher.getInstance(""RSA"");
</code></pre>

<p>Any help is much appreciated. Thanks.</p>
","<p>Looks like you are exceeding the amount of data you can encrypt with RSA (see here <a href=""https://security.stackexchange.com/questions/44702/whats-the-limit-on-the-size-of-the-data-that-public-key-cryptos-can-handle"">https://security.stackexchange.com/questions/44702/whats-the-limit-on-the-size-of-the-data-that-public-key-cryptos-can-handle</a>) which essentially is the modulus size, possibly due to Base 64 encoding.</p>
","65","<java><encryption><rsa><private-key><encryption-asymmetric>","1","1","1","2018-10-21 22:30:51","","3","","","","","2018-10-21 19:48:42",""
"44882761","Validate if URL is coming from a trusted source","<p>We are working on a redirecting page for our mobile apps. </p>

<p>Users would go to a page like: <a href=""https://mobileredirect.our-app.com?target=https://clientdomain.com/some_resource"" rel=""nofollow noreferrer"">https://mobileredirect.our-app.com?target=https://clientdomain.com/some_resource</a></p>

<p>Mobile apps on iOS and Adroid can intercept the ""mobileredirect.our-app.com"" domain, when installed. If not installed, the browser will open, and redirect the browser to the client domain. </p>

<p>This is contains an obvious problem. Anyone can put any domain in the scheme and this becomes an attack vector. I would like to be able to verify if the URL is actually coming from a trusted source. We need to do it this way, as we don't control which domains could use our mobile app.</p>

<p>Ideally I'd like to do this in the as well browser, without the need for a server.</p>

<p>I was thinking of using a library like <a href=""https://www.npmjs.com/package/simple-crypt"" rel=""nofollow noreferrer"">simple-crypt</a>, using the Asymmetric operation. Trusted servers would have the private key, they would encrypt the URL end it would end up like this: <a href=""https://mobileredirect.our-app.com?target=ENCRYPTED_URL"" rel=""nofollow noreferrer"">https://mobileredirect.our-app.com?target=ENCRYPTED_URL</a>. The clients (mobile apps, and the website) would contain the public key to decrypt the URL. This does mean that the public key will be visible to everyone.</p>

<p>Now my question: </p>

<p>Is this a good idea? How can this be broken? Is it overkill? Are there easier ways (e.g.: use some type of checksum algorithm)?</p>

<blockquote>
  <p>This has been answered in a cross post on the <a href=""https://security.stackexchange.com/questions/163353/validate-if-url-message-is-coming-from-a-trusted-source/172777"">security stackexchange</a></p>
</blockquote>
","","65","<javascript><security><encryption><public-key-encryption><encryption-asymmetric>","0","","0","2017-11-05 12:56:44","","6","","476906","","2017-11-05 12:56:44","2017-07-03 10:02:23",""
"56093229","Passing encrypted data by POST in the form in PHP","<p>I am genereting two keys in sha512 and then I put them in separated files. After that I read the public key in the index.php, post the form to the same page and encode the data posted in the input in other form generated only when have the post.</p>

<p>When I try to post the encrypted data to another page, to decryp, nothing happens on the decryp page.</p>

<p>Looks like the encrypted data posted is not valid to the private key.</p>

<p>What I am trying to do is to simulate a comunication between two servers with encrypted data.</p>

<p>Index.php file</p>

<pre><code>    if (isset($_POST['name']) ) {
        $file = fopen('chave_publica.txt', 'r');
        $file2 = fopen('chave_privada.txt', 'r');
        $publicKey =  fread($file,filesize(""chave_publica.txt""));
        // $chavePrivada =  fread($file2,filesize(""chave_privada.txt""));
        // echo 'Valor digitado: '.$_POST['name'].'&lt;br&gt;';
        // Encrypting
        openssl_public_encrypt($_POST['name'], $criptedData, $publicKey);

        echo $criptedData;
        // decrypting
        // openssl_private_decrypt($criptedData, $decriptado, $chavePrivada);
        // echo '&lt;br&gt;'.'Valor decriptado: '. $decriptado;
    }

&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

    &lt;!-- &lt;?php echo $criptedData ?&gt; --&gt;
    &lt;?php if (isset($_POST['name']) ) { ?&gt;
        &lt;form method=""post"" style=""margin-top: 20px;"" action=""decryp.php""&gt;
        &lt;textarea name=""name""&gt;&lt;?php echo $criptedData; ?&gt;&lt;/textarea&gt;
            &lt;button type=""submit""&gt;Send&lt;/button&gt;
        &lt;/form&gt;
    &lt;?php }else{ ?&gt;
        &lt;form method=""post"" style=""margin-top: 20px;"" action=""index.php"" enctype=""application/x-www-form-urlencoded""&gt;
            &lt;input type=""text"" name=""name"" placeholder=""Seu nome aqui""&gt;
            &lt;button type=""submit""&gt;Encriptar&lt;/button&gt;
        &lt;/form&gt;
    &lt;?php } ?&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>the decryp file</p>

<pre><code>echo $cripted = $_POST['name'];

$file2 = fopen('chave_privada.txt', 'r');
$privateKey =  fread($file2,filesize(""chave_privada.txt""));
// $decrypted = 'a';

openssl_private_decrypt($cripted, $decrypted, $privateKey);

echo '&lt;br&gt;'.'Valor decrypted: '. $decrypted;
</code></pre>
","<p>For those who are trying to make the post of the encrypted string, will not really work, because when encrypting are generated special characters, these give problem to pass in POST.</p>

<p>The solution I found was to convert the string to hexadecimal and decode it on the other side.</p>

<pre><code>bin2hex(""that's all you need"");
# 74686174277320616c6c20796f75206e656564

hex2bin('74686174277320616c6c20796f75206e656564');
# that's all you need
</code></pre>

<blockquote>
  <p><a href=""https://stackoverflow.com/questions/14674834/php-convert-string-to-hex-and-hex-to-string"">PHP convert string to hex and hex to string</a></p>
</blockquote>

<p>from Philippe Gerber</p>
","64","<php><post><encryption><encryption-asymmetric><sha512>","1","0","1","2019-05-17 01:07:52","56178323","0","","5061424","","2019-05-11 20:37:29","2019-05-11 18:36:44",""
"21677219","How to sign data(string) in wp8","<p>App will receive a token (string) from server. I want to sign this token with private key. I will pass on corresponding public key and signed token back to server in next request. Now server will validate that token using public key to check whether request is coming from authenticated user.</p>

<p>How to achieve this?</p>
","","64","<windows-phone-7><c#-4.0><windows-phone-8><public-key-encryption><encryption-asymmetric>","1","","0","2014-02-11 13:44:54","","2","","2354902","","2014-02-11 13:44:54","2014-02-10 12:26:34",""
"16231795","Asymmetric encryption of text that can handle any size","<p>we're in need to encrypt 1 column in DB / 1 attribute in hibernate entity. App will run on Tomcat, so idea is to use Tomcat's keystore, have encryption done by public key and decryption by private. There might be another source of data feed into DB, so they can also encrypt with public key, and our app is the only one which will also do decryption.</p>

<p>To the point - I implemented RSA encryption &amp; decryption, it works OK. What happens is any text gets encoded into 128 byte blocks of all crazy characters. Having longer text than 117 bytes throws an exception (and I really do NOT want to split original text). Increasing encryption strength doublefold to 2048 bits increases threshold, but also size of encrpyted text so it doesn't solve the problem (i know, it's the principle of alghoritm, I should have studied more beforehand).  If I would like to pass it over app in String format, it's better to put it say in Base64. This grows to 178 bytes from few samples.</p>

<p>Is there any other asymetric encryption that:</p>

<ul>
<li>would not dramatically increase size of encrypted text  </li>
<li>can handle blocks of text of any size</li>
</ul>

<p>Or do I have to implement something on my own?
Thank you</p>
","","64","<security><keystore><encryption-asymmetric>","0","","0","2018-04-09 12:24:24","","3","","1033581","","2018-04-09 12:24:24","2013-04-26 08:20:32",""
"45884785","Wincrypt Diffie Hellman error","<p>I am trying to use wincrypt to generate the private key using P and G values. 
I get <strong>ERROR_INVALID_PARAMETER</strong> I am not sure what is wrong in my code. It is the same implementation as in example code given in microsoft website.
<a href=""https://msdn.microsoft.com/en-us/library/aa381969(VS.85).aspx#exchanging_diffie-hellman_keys"" rel=""nofollow noreferrer"">https://msdn.microsoft.com/en-us/library/aa381969(VS.85).aspx#exchanging_diffie-hellman_keys</a></p>

<pre><code>int err, gen_fld_sz, fld_sz, salt_len;
const char *generator = """"; // generator as string
const char *prime     = """"; // prime as string
 BYTE* g_rgbPrime = new BYTE[fld_sz+1];
 memcpy(g_rgbPrime, prime, fld_sz+1);  // Prime conta
  BYTE* g_rgbGenerator = new BYTE[gen_fld_sz+1];
  memcpy(g_rgbGenerator, generator, gen_fld_sz+1);
  BYTE* g_rgbData = new BYTE[key_len+1];
  memcpy(g_rgbData, str_server_pub_key, key_len);

  BOOL fReturn;
  HCRYPTPROV hProvParty1 = NULL;
  HCRYPTPROV hProvParty2 = NULL;
  DATA_BLOB P;
  DATA_BLOB G;
  DATA_BLOB S;
  HCRYPTKEY hPrivateKey1 = NULL;
  HCRYPTKEY hPrivateKey2 = NULL;
  PBYTE pbKeyBlob1 = NULL;
  PBYTE pbKeyBlob2 = NULL;
  HCRYPTKEY hSessionKey1 = NULL;
  HCRYPTKEY hSessionKey2 = NULL;
  PBYTE pbData = NULL;

  /************************
  Construct data BLOBs for the prime and generator. The P and G
  values, represented by the g_rgbPrime and g_rgbGenerator arrays
  respectively, are shared values that have been agreed to by both
  parties.
  ************************/
  P.cbData = fld_sz+1;
  P.pbData = (BYTE*)(g_rgbPrime);

  G.cbData = gen_fld_sz+1;
  G.pbData = (BYTE*)(g_rgbGenerator);
  // Acquire a provider handle for party 1.
  fReturn = CryptAcquireContext(
    &amp;hProvParty1,
    NULL,
    MS_ENH_DSS_DH_PROV,
    PROV_DSS_DH,
    CRYPT_VERIFYCONTEXT);
  if (!fReturn)
  {
    log_error(""error in setting CryptAcquireContext "" &lt;&lt; GetLastError());
    goto ErrorExit;
  }


  // Set the prime for party 1's private key.
  fReturn = CryptSetKeyParam(
    hPrivateKey1,
    KP_P,
    (PBYTE)&amp;P,
    0);
  if (!fReturn)
  {
    log_error(""error in setting CryptSetKeyParam "" &lt;&lt; GetLastError());
    goto ErrorExit;
  }
</code></pre>

<p>I am getting error in last <strong>CryptSetKeyParam</strong>. Please advice.</p>

<p>Thanks in advance.</p>
","<p>Well, just following the example you linked, there were some steps more than you do.
For example, between CryptAcquireContext and CryptSetKeyParam, he calls CryptGenKey, that is giving a temporary value to hPrivateKey1.</p>

<pre><code>// Create an ephemeral private key for party 1.
fReturn = CryptGenKey(
    hProvParty1, 
    CALG_DH_EPHEM, 
    DHKEYSIZE &lt;&lt; 16 | CRYPT_EXPORTABLE | CRYPT_PREGEN,
    &amp;hPrivateKey1);
if(!fReturn)
{
    goto ErrorExit;
}
</code></pre>

<p>In your code, you are calling CryptGenKey with hPrivateKey1=NULL;</p>
","62","<c++><encryption-asymmetric><wincrypt>","0","0","1","2017-08-25 15:41:22","","0","","","","","2017-08-25 15:27:26",""
"54191171","Signing Key Rollover and Naturally Expiring Access Tokens","<p>I am developing an app that uses Azure AD as my OAuth2.0 provider. Azure has a Jwks endpoint with multiple public keys, one of which its corresponding private key was used to sign my token.  My app handles signing key resolving by inspecting the keyid out of the authorization header and determining which key the token was signed with by looking it up in a cache.  </p>

<p>My application fetches the keys from the endpoint every 5 minutes and stores them in a cache until the next fetch occurs.  Let's say a user gets issued a token signed with Key#1. If Key#1 gets swapped out with a key#2 on the Jwks endpoint, and my app fetches Key#2 - caches it, and then attempts to verify the signature of the token signed with Key#1, then the token validation will obviously fail.  </p>

<p>How can I allow tokens signed with keys no longer at the Jwks endpoint to still be used to validate the token until the token's natural expire time is reached? </p>
","","60","<java><jwt><azure-active-directory><encryption-asymmetric><jwk>","1","","0","2019-01-15 01:15:14","","2","","9706699","","2019-01-15 01:15:14","2019-01-15 00:32:28",""
"58414020","How to import a bitcoin private key to BigInteger?","<p>I use the following codes to try to import a bitcoin private key and compute the public key. The computed ECPublicKey is not equal to bitcoinPublicKey. How to correct?</p>

<pre><code>string bitcoinPrivateKeyStr = ""cVnb9S9GgHxsBxfaApvGnWvfwqXRYdV8f1Q2CkQeBa4EsWTNmsGS"";
BitcoinSecret bs = new BitcoinSecret(bitcoinPrivateKeyStr);
byte[] bitcoinPrivateKeyBytes = bs.PrivateKey.ToBytes();
byte[] bitcoinPublicKeybytes = bs.PubKey.Decompress().ToBytes();

X9ECParameters curve = SecNamedCurves.GetByName(""secp256k1"");
ECDomainParameters domain = new ECDomainParameters(curve.Curve, curve.G, curve.N, curve.H);
BigInteger BCPrivateKeyBI = new BigInteger(bitcoinPrivateKeyBytes);
Org.BouncyCastle.Math.EC.ECPoint q = domain.G.Multiply(BCPrivateKeyBI);
ECPrivateKeyParameters ECPrivateKey = new ECPrivateKeyParameters(BCPrivateKeyBI, domain);
ECPublicKeyParameters ECPublicKey = new ECPublicKeyParameters(q, domain);
AsymmetricCipherKeyPair KeyPair = new AsymmetricCipherKeyPair(ECPublicKey, ECPrivateKey);
</code></pre>
","<pre><code>BigInteger BCPrivateKeyBI = new BigInteger(1, bitcoinPrivateKeyBytes);
</code></pre>
","59","<c#><bouncycastle><bitcoin><encryption-asymmetric><ecdh>","-1","0","1","2019-10-18 09:59:44","58447578","0","0","829132","","2019-10-18 09:59:44","2019-10-16 13:03:58",""
"39601287","How can i send a RsaKeyParameters to a server or vice versa?","<p>I am using the Bouncy Castle on Xamarin Forms to asymmectric encrypt. But i am working on a Client &lt;-> Web Api structure. How can i send the public Key to the other side ? Because the type is RsaKeyParameters .</p>

<pre><code>RsaKeyPairGenerator rsaKeyPairGnr = new RsaKeyPairGenerator();
rsaKeyPairGnr.Init(new KeyGenerationParameters(new SecureRandom(), 512));
AsymmetricCipherKeyPair keyPair = rsaKeyPairGnr.GenerateKeyPair();
RsaKeyParameters publicKey = (RsaKeyParameters)keyPair.Public;
</code></pre>
","<p>If I have a <code>RsaKeyParameters publicKey</code> and I need to send this to a server, I can convert using:</p>

<pre><code>//convert from key to string
SubjectPublicKeyInfo publicKeyInfo = SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(publicKey);
byte[] serializedPublicBytes = publicKeyInfo.ToAsn1Object().GetDerEncoded();    
string serializedPublic = Convert.ToBase64String(serializedPublicBytes);
And then, i can convert the serializedPublic to RsaKeyParameters publicKey

//convert from string to key
RsaKeyParameters publicKey2 = (RsaKeyParameters)PublicKeyFactory.CreateKey(Convert.FromBase64String(serializedPublic));
</code></pre>

<p>But could someone tell me if passing the public key by querystring via Http library is a good idea ?</p>
","58","<c#><encryption><xamarin><rsa><encryption-asymmetric>","1","1","1","2016-09-21 02:00:03","39603879","4","","6225704","","2016-09-20 21:22:22","2016-09-20 18:27:46",""
"30903576","Handling security when deploying Java application","<p>I have a Java app (deployed as a JAR file) that allows file sharing through SLLSockets. If all users use the same certificate, file transfers are not secure, since it violates the core concept of asymmetric encrypted communication. Therefore, I understand that each user needs to have its own certificate. This brings up my first question:</p>

<ol>
<li>How can you generate a certificate programmatically, and where would you store it ? I don't want users to have to generate their own certificate with keytool, then have to tell the app where it is located.</li>
</ol>

<p>Now, let's say my first question is answered and each user has its own certificate. Prior to opening the SSL connection between two hosts, you need to add each other's certificate to the trustStore. The only way I know to achieve this is by exchanging them through Sockets (note that I am using JGroups to exchange Socket connection info). This brings up my next two questions:</p>

<ol start=""2"">
<li>How do you guarantee authentication and integrity when exchanging the certificates ?</li>
<li>How do you programmatically add the received certificate to the trustStore ? </li>
</ol>

<p>Finally, this whole post brings up my fourth question:</p>

<ol start=""4"">
<li>Are the steps described above the correct way to send data securely between two hosts, using SSLSocket asymmetric encrypted communication ?</li>
</ol>
","<p>You don't need client certificates necessarily. </p>

<p>Could you not use username/password authentication? </p>

<p>You can still secure the transfer just by using a server certificate.</p>

<p>Client certs are also kind of a pain, and not entirely secure. They tie you to a machine, and evil processes can read them. Smart cards mitigate this, but aren't free.</p>
","58","<java><sockets><security><ssl><encryption-asymmetric>","0","2","1","2015-06-19 23:15:57","","4","","3856210","","2015-06-17 22:44:53","2015-06-17 22:31:36",""
"28242429","How safe is Asymmetric Encryption","<p>How secure is asymmetric encryption when sender encrypts with private key and reciever decrypts with public key but public key has visibility? any one can decrypt it</p>
","<p>It's the other way around.. Sender encrypts with public key, and receiver decrypts with its private key..</p>

<p>What you are saying applies to signature.. sender signs with private key, receiver validates signature with public key</p>
","58","<encryption-asymmetric>","0","2","1","2018-05-06 13:35:31","","0","1","217324","","2018-05-06 13:35:31","2015-01-30 18:32:23",""
"56798210","How can I decrypt text from one application in another application with asymmetric encryption?","<p>I am trying to understand how I can decrypt a String in one application that I have encrypted in a separate application.  I can do this when I am in a single application execution, and I use the PrivateKey from the same KeyPair that generated the PublicKey.  However, I want to encrypt the value in one application, and decrypt the value in another application.  Basically I have a web service sending value I do not want to be tampered with to an application, and I was planning to use asymmetric encryption to handle it.  Feel free to let me know if I am going about solving that the wrong way.</p>

<p>I have tried various encryption techniques, starting with Symmetric.  The issue I ran into with that is that the value is encrypted to the same text each time - not very useful if my goal is to keep someone from tampering with a value - once they know the encrypted version of some text, they will be able to use that in any request.  I have been trying to follow the standards here - <a href=""https://www.veracode.com/blog/research/encryption-and-decryption-java-cryptography"" rel=""nofollow noreferrer"">https://www.veracode.com/blog/research/encryption-and-decryption-java-cryptography</a>
I can get all my examples working in a single transaction doing the encrypt/decrypt - it is just when I try to encrypt in one request, and decrypt in a second request that I fail.</p>

<p>Here is my current working example:</p>

<pre><code>package com.ni.apps.cartencryptutil;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.xml.bind.DatatypeConverter;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

/**
 * Security class for encrypting and decrypting Strings (that also works in WC ver 7 and above)
 *
 * @author 
 *
 */
public class SecurityTools {
  private static final Logger logger = Logger.getLogger(SecurityTools.class);

  private Cipher cipher;
  private IvParameterSpec initVector;
  private SecretKey secretKey;
  PrivateKey privateKeyParam;
  PublicKey publicKeyParam;
  private static SecureRandom secureRandom = new SecureRandom();

  private static final String TRANSFORMATION = ""RSA/ECB/OAEPWithSHA-1AndMGF1Padding"";
  private static final String ALGORITHM_SHORT = ""RSA"";
  private static final String RNG_ALGORITHM = ""SHA1PRNG"";
  private static final String ALGORITHM = ""PBKDF2WithHmacSHA256"";
  private static final String UTF8 = ""UTF-8"";

  // exceptions
  private static final String _ERR_ILLEGAL_BLOCK_SIZE = ""illegal block size exception."";
  private static final String _ERR_BAD_PADDING = ""bad padding exception."";
  private static final String _ERR_INVALIDKEY = ""invalidkey exception."";
  private static final String _ERR_PADDING = ""padding exception."";
  private static final String _ERR_NO_SUCH_ALGORITHM = ""no such algorithm exception."";
  private static final String _ERR_PASSPHRASE_IS_NULL = ""passphrase is null."";
  private static final String _ERR_INVALID_ALGORITHM = ""invalid algorithm exception."";
  private static final String _ERR_UNSUPPORTED_ENCODING = ""encoding not supported."";
  private static final String _ERR_INVALID_KEY_SPEC = ""invalid key spec exception."";

  /**
   * Constructor
   *
   * @throws EncryptionException
   */
  public SecurityTools() throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering Constructor"");
    }
    try {
      cipher = Cipher.getInstance(ALGORITHM_SHORT);
      generateIV();
      generateKeys();
    } catch (NoSuchAlgorithmException iae) {
      logger.error(_ERR_NO_SUCH_ALGORITHM, iae);
      throw new EncryptionException(_ERR_NO_SUCH_ALGORITHM, iae);
    } catch (NoSuchPaddingException nspe) {
      logger.error(_ERR_PADDING, nspe);
      throw new EncryptionException(_ERR_PADDING, nspe);
    }
    if (logger.isDebugEnabled()) {
      logger.debug(""exiting Constructor"");
    }
  }

  /**
   * Encrypts a given plain text String, and returns the encrypted String
   *
   * @param plainText
   * @return
   * @throws EncryptionException
   */
  public String encrypt(String plainText, PublicKey publicKey) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering encrypt"");
    }

    String encryptedKey = null;
    try {
      byte[] byteToEncrypt = plainText.getBytes(UTF8);
      cipher.init(Cipher.ENCRYPT_MODE, publicKey);
      byte[] encryptedBytes = cipher.doFinal(byteToEncrypt);
      encryptedKey = DatatypeConverter.printBase64Binary(encryptedBytes);
    } catch (IllegalArgumentException iae) {
      logger.error(_ERR_PASSPHRASE_IS_NULL, iae);
      throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL, iae);
    } catch (InvalidKeyException ike) {
      logger.error(_ERR_INVALIDKEY, ike);
      throw new EncryptionException(_ERR_INVALIDKEY, ike);
    } catch (BadPaddingException bpe) {
      logger.error(_ERR_BAD_PADDING, bpe);
      throw new EncryptionException(_ERR_BAD_PADDING, bpe);
    } catch (IllegalBlockSizeException bpe) {
      logger.error(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
      throw new EncryptionException(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
    } catch (UnsupportedEncodingException uee) {
      logger.error(_ERR_UNSUPPORTED_ENCODING, uee);
      throw new EncryptionException(_ERR_UNSUPPORTED_ENCODING, uee);
    } /*-catch (InvalidAlgorithmParameterException iape) {
      logger.error(_ERR_INVALID_ALGORITHM, iape);
      throw new EncryptionException(_ERR_INVALID_ALGORITHM, iape);
      }*/

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting encrypt"");
    }

    return encryptedKey;
  }

  /**
   * Decrypts a given encrypted String, and returns the plain text String
   *
   * @param cipherTextStr
   * @return
   * @throws EncryptionException
   */
  public String decrypt(String cipherTextStr, PrivateKey privateKey) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering decrypt"");
    }

    String cleartext = null;
    try {
      cipher.init(Cipher.DECRYPT_MODE, privateKey);
      byte[] plainByte = cipher.doFinal(DatatypeConverter.parseBase64Binary(cipherTextStr));
      cleartext = new String(plainByte);
    } /*-catch (InvalidAlgorithmParameterException iape) {
      logger.error(_ERR_INVALID_ALGORITHM, iape);
      throw new EncryptionException(_ERR_INVALID_ALGORITHM, iape);
      } */catch (IllegalArgumentException iae) {
      logger.error(_ERR_PASSPHRASE_IS_NULL, iae);
      throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL, iae);
    } catch (InvalidKeyException ike) {
      logger.error(_ERR_INVALIDKEY, ike);
      throw new EncryptionException(_ERR_INVALIDKEY, ike);
    } catch (BadPaddingException bpe) {
      logger.error(_ERR_BAD_PADDING, bpe);
      throw new EncryptionException(_ERR_BAD_PADDING, bpe);
    } catch (IllegalBlockSizeException bpe) {
      logger.error(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
      throw new EncryptionException(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
    }

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting decrypt"");
    }

    return cleartext;
  }

  /**
   * Creates the IV using Secure Random Number Generator and an empty 16byte array
   *
   * @return
   */
  private void generateIV() {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering generateIV"");
    }

    byte[] newSeed = secureRandom.generateSeed(16);
    secureRandom.setSeed(newSeed);
    byte[] byteIV = new byte[16];
    secureRandom.nextBytes(byteIV);
    initVector = new IvParameterSpec(byteIV);

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting generateIV"");
    }
  }

  /**
   * Generates the Key used for decryption and encryption
   *
   * @throws EncryptionException
   */
  private void generateKeys() throws EncryptionException {

    try {
      String saltStr = ""salty"";// rbConfig.getString(""salt"");
      String passPhraseStr = ""passy"";// rbConfig.getString(""passphrase"");
      if (StringUtils.isEmpty(saltStr) || StringUtils.isEmpty(passPhraseStr)) {
        throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL);
      }

      KeyPairGenerator keyGen = KeyPairGenerator.getInstance(""RSA"");
      keyGen.initialize(512); // key size specified here.
      KeyPair pair = keyGen.generateKeyPair();
      privateKeyParam = pair.getPrivate();
      publicKeyParam = pair.getPublic();

      /*-byte[] salt = saltStr.getBytes();
      int iterations = 10000;
      int keyLength = 128;

      SecretKeyFactory factory = SecretKeyFactory.getInstance(ALGORITHM);
      SecretKey tmp = factory.generateSecret(new PBEKeySpec(passPhraseStr.toCharArray(), salt, iterations, keyLength));
      secretKey = new SecretKeySpec(tmp.getEncoded(), ALGORITHM_SHORT);*/
    } catch (NoSuchAlgorithmException iae) {
      logger.error(_ERR_NO_SUCH_ALGORITHM, iae);
      throw new EncryptionException(_ERR_NO_SUCH_ALGORITHM, iae);
    } /*-catch (InvalidKeySpecException e) {
      logger.error(_ERR_INVALID_KEY_SPEC, e);
      throw new EncryptionException(_ERR_INVALID_KEY_SPEC, e);
      }*/

  }

  /**
   * Test method
   *
   * @param args
   */
  public static void main(String[] args) {
    String[] message = { ""mktest"", ""9248547896548752345"", ""okok234234234okok467467"",
        ""12"" };
    String result = null;
    try {
      SecurityTools secTool = new SecurityTools();
      PrivateKey priv = secTool.getPrivateKeyParam();
      PublicKey publ = secTool.getPublicKeyParam();
      String temp = ""N5B1zgbvts3Vwrt6qyL/TBzt62HTFz0ISySx5HFu02oVq1YEhFLbrgdCndROX4/5hMpxCHGM8UJBSyZUfjD/DA=="";
      // System.out.println(""ASYMMETRIC TEST"" + secTool.decrypt(temp, priv));

      for (String mess : message) {
        result = secTool.encrypt(mess, publ);
        System.out.println(result);
        result = secTool.decrypt(result, priv);
        System.out.println(result);
      }
    } catch (Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();

    }
  }

  /**
   * @return the privateKeyParam
   */
  public PrivateKey getPrivateKeyParam() {
    return privateKeyParam;
  }

  /**
   * @return the publicKeyParam
   */
  public PublicKey getPublicKeyParam() {
    return publicKeyParam;
  }

  class EncryptionException extends Exception {

    private static final long serialVersionUID = 1L;

    public EncryptionException() {}

    public EncryptionException(String message, Throwable cause) {
      super(message, cause);
    }

    public EncryptionException(String message) {
      super(message);
    }

    public EncryptionException(Throwable cause) {
      super(cause);
    }
  }
}
</code></pre>

<p>When I run that as-is it works because the main is doing the encryption and decryption all in one go.  However, when I take the output from a run, and store it in the temp String in main(), and then uncomment the line System.out.println(""ASYMMETRIC TEST"" +  is when it fails with</p>

<pre><code>com.ni.apps.cartencryptutil.SecurityTools$EncryptionException: bad padding exception.
    at com.ni.apps.cartencryptutil.SecurityTools.decrypt(SecurityTools.java:154)
    at com.ni.apps.cartencryptutil.SecurityTools.main(SecurityTools.java:239)
Caused by: javax.crypto.BadPaddingException: Decryption error
    at sun.security.rsa.RSAPadding.unpadV15(RSAPadding.java:380)
    at sun.security.rsa.RSAPadding.unpad(RSAPadding.java:291)
    at com.sun.crypto.provider.RSACipher.doFinal(RSACipher.java:363)
    at com.sun.crypto.provider.RSACipher.engineDoFinal(RSACipher.java:389)
    at javax.crypto.Cipher.doFinal(Cipher.java:2165)
    at com.ni.apps.cartencryptutil.SecurityTools.decrypt(SecurityTools.java:141)
    ... 1 more
</code></pre>

<p>I assume my issue is that I am re-generating a new KeyPair each time, which will only work the one time as a pair. So once I try to match a PrivateKey that came from one KeyPair to the text that was encrypted with an entirely different KeyPair, it fails.  But I have yet to find how you are supposed to otherwise achieve this in that case.</p>
","<pre><code>package com.ni.apps.cartencryptutil;

import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import com.ni.apps.cartencryptutil.exceptions.EncryptionException;

/**
 * Security class for encrypting and decrypting Strings (that also works in WC ver 7 and above).
 *
 * @author mkohanek
 *
 */
public class SecurityTools {
  private static final Logger logger = Logger.getLogger(SecurityTools.class);

  private Cipher cipher;
  private IvParameterSpec initVector;
  private SecretKey secretKey;
  private transient ResourceBundle rbConfig;

  private static SecureRandom secureRandom = new SecureRandom();
  private static final String AES_ALGORITHM = ""AES/CBC/PKCS5Padding"";
  private static final String ALGORITHM_SHORT = ""AES"";
  private static final String PBE_ALGORITHM = ""PBEWithMD5AndDES"";
  private static final String UTF8 = ""UTF-8"";
  private static final int ITERATIONS = 10000;
  private static final int KEY_LENGTH = 128;

  // exceptions
  private static final String _ERR_ILLEGAL_BLOCK_SIZE = ""illegal block size exception."";
  private static final String _ERR_BAD_PADDING = ""bad padding exception."";
  private static final String _ERR_INVALIDKEY = ""invalidkey exception."";
  private static final String _ERR_PADDING = ""padding exception."";
  private static final String _ERR_NO_SUCH_ALGORITHM = ""no such algorithm exception."";
  private static final String _ERR_PASSPHRASE_IS_NULL = ""passphrase is null."";
  private static final String _ERR_SALT_IS_NULL = ""salt is null."";
  private static final String _ERR_INVALID_ALGORITHM = ""invalid algorithm exception."";
  private static final String _ERR_UNSUPPORTED_ENCODING = ""encoding not supported."";
  private static final String _ERR_INVALID_KEY_SPEC = ""invalid key spec exception."";

  /**
   * Constructor
   *
   * @param salt
   *          - for encryption, obtain salt from generateSalt(). for decryption, you should use the same salt used during encryption
   * @throws EncryptionException
   */
  public SecurityTools(String salt) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering Constructor"");
    }
    try {
      loadProperties();
      cipher = Cipher.getInstance(AES_ALGORITHM);
      generateIV(salt);
      generateKey(salt);
    } catch (NoSuchAlgorithmException iae) {
      logger.error(_ERR_NO_SUCH_ALGORITHM, iae);
      throw new EncryptionException(_ERR_NO_SUCH_ALGORITHM, iae);
    } catch (NoSuchPaddingException nspe) {
      logger.error(_ERR_PADDING, nspe);
      throw new EncryptionException(_ERR_PADDING, nspe);
    }
    if (logger.isDebugEnabled()) {
      logger.debug(""exiting Constructor"");
    }
  }

  /**
   * Constructor
   *
   * @param salt
   *          - for encryption, obtain salt from generateSalt(). for decryption, you should use the same salt used during encryption
   * @param passPhrase
   *          - Allows client to pass in a passphrase it wants to use rather than use the one this library defines. This must also be used when decrypting. The length limit for this key is 16
   *          characters
   * @throws EncryptionException
   */
  public SecurityTools(String salt, String passPhrase) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering Constructor"");
    }
    try {
      loadProperties();
      cipher = Cipher.getInstance(AES_ALGORITHM);
      generateIV(salt);
      generateKey(salt, passPhrase);
    } catch (NoSuchAlgorithmException iae) {
      logger.error(_ERR_NO_SUCH_ALGORITHM, iae);
      throw new EncryptionException(_ERR_NO_SUCH_ALGORITHM, iae);
    } catch (NoSuchPaddingException nspe) {
      logger.error(_ERR_PADDING, nspe);
      throw new EncryptionException(_ERR_PADDING, nspe);
    }
    if (logger.isDebugEnabled()) {
      logger.debug(""exiting Constructor"");
    }
  }

  /**
   * Encrypts a given plain text String, and returns the encrypted String
   *
   * @param plainText
   * @return
   * @throws EncryptionException
   */
  public String encrypt(String plainText) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering encrypt"");
    }

    String encryptedKey = null;
    try {
      byte[] byteToEncrypt = plainText.getBytes(UTF8);
      cipher.init(Cipher.ENCRYPT_MODE, secretKey, initVector, new SecureRandom());
      byte[] encryptedBytes = cipher.doFinal(byteToEncrypt);
      encryptedKey = DatatypeConverter.printBase64Binary(encryptedBytes);
    } catch (IllegalArgumentException iae) {
      logger.error(_ERR_PASSPHRASE_IS_NULL, iae);
      throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL, iae);
    } catch (InvalidKeyException ike) {
      logger.error(_ERR_INVALIDKEY, ike);
      throw new EncryptionException(_ERR_INVALIDKEY, ike);
    } catch (BadPaddingException bpe) {
      logger.error(_ERR_BAD_PADDING, bpe);
      throw new EncryptionException(_ERR_BAD_PADDING, bpe);
    } catch (IllegalBlockSizeException bpe) {
      logger.error(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
      throw new EncryptionException(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
    } catch (UnsupportedEncodingException uee) {
      logger.error(_ERR_UNSUPPORTED_ENCODING, uee);
      throw new EncryptionException(_ERR_UNSUPPORTED_ENCODING, uee);
    } catch (InvalidAlgorithmParameterException iape) {
      logger.error(_ERR_INVALID_ALGORITHM, iape);
      throw new EncryptionException(_ERR_INVALID_ALGORITHM, iape);
    }

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting encrypt"");
    }

    return encryptedKey;
  }

  /**
   * Decrypts a given encrypted String, and returns the plain text String
   *
   * @param cipherTextStr
   * @return
   * @throws EncryptionException
   */
  public String decrypt(String cipherTextStr) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering decrypt"");
    }

    String cleartext = null;
    try {
      cipher.init(Cipher.DECRYPT_MODE, secretKey, initVector);
      byte[] plainByte = cipher.doFinal(DatatypeConverter.parseBase64Binary(cipherTextStr));
      cleartext = new String(plainByte);
    } catch (InvalidAlgorithmParameterException iape) {
      logger.error(_ERR_INVALID_ALGORITHM, iape);
      throw new EncryptionException(_ERR_INVALID_ALGORITHM, iape);
    } catch (IllegalArgumentException iae) {
      logger.error(_ERR_PASSPHRASE_IS_NULL, iae);
      throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL, iae);
    } catch (InvalidKeyException ike) {
      logger.error(_ERR_INVALIDKEY, ike);
      throw new EncryptionException(_ERR_INVALIDKEY, ike);
    } catch (BadPaddingException bpe) {
      logger.error(_ERR_BAD_PADDING, bpe);
      throw new EncryptionException(_ERR_BAD_PADDING, bpe);
    } catch (IllegalBlockSizeException bpe) {
      logger.error(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
      throw new EncryptionException(_ERR_ILLEGAL_BLOCK_SIZE, bpe);
    }

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting decrypt"");
    }

    return cleartext;
  }

  /**
   * Creates the IV using Secure Random Number Generator and an empty 16byte array
   *
   * @return
   */
  private void generateIV(String salt) {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering generateIV"");
    }

    byte[] newSeed = DatatypeConverter.parseBase64Binary(salt);
    initVector = new IvParameterSpec(newSeed);

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting generateIV"");
    }
  }

  /**
   * Generates the Key used for decryption and encryption using passphrase from properties file on library
   *
   ** @param saltStr
   * @return
   * @throws EncryptionException
   */
  private void generateKey(String saltStr) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering generateKey"");
    }

    try {
      String passPhraseStr = rbConfig.getString(""passphrase"");
      if (StringUtils.isEmpty(passPhraseStr)) {
        throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL);
      }
      if (StringUtils.isEmpty(saltStr)) {
        throw new EncryptionException(_ERR_SALT_IS_NULL);
      }

      byte[] salt = DatatypeConverter.parseBase64Binary(saltStr);

      SecretKeyFactory factory = SecretKeyFactory.getInstance(PBE_ALGORITHM);
      SecretKey tmp = factory.generateSecret(new PBEKeySpec(passPhraseStr.toCharArray(), salt, ITERATIONS, KEY_LENGTH));
      secretKey = new SecretKeySpec(tmp.getEncoded(), ALGORITHM_SHORT);
    } catch (NoSuchAlgorithmException iae) {
      logger.error(_ERR_NO_SUCH_ALGORITHM, iae);
      throw new EncryptionException(_ERR_NO_SUCH_ALGORITHM, iae);
    } catch (InvalidKeySpecException e) {
      logger.error(_ERR_INVALID_KEY_SPEC, e);
      throw new EncryptionException(_ERR_INVALID_KEY_SPEC, e);
    }

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting generateKey"");
    }
  }

  /**
   * Generates the Key used for decryption and encryption using passphrase passed in
   *
   * @param saltStr
   * @param passPhrase
   * @throws EncryptionException
   */
  private void generateKey(String saltStr, String passPhrase) throws EncryptionException {
    if (logger.isDebugEnabled()) {
      logger.debug(""entering generateKey"");
    }

    try {
      if (StringUtils.isEmpty(passPhrase)) {
        throw new EncryptionException(_ERR_PASSPHRASE_IS_NULL);
      }
      if (StringUtils.isEmpty(saltStr)) {
        throw new EncryptionException(_ERR_SALT_IS_NULL);
      }

      byte[] salt = DatatypeConverter.parseBase64Binary(saltStr);

      SecretKeyFactory factory = SecretKeyFactory.getInstance(PBE_ALGORITHM);
      SecretKey tmp = factory.generateSecret(new PBEKeySpec(passPhrase.toCharArray(), salt, ITERATIONS, KEY_LENGTH));
      secretKey = new SecretKeySpec(tmp.getEncoded(), ALGORITHM_SHORT);
    } catch (NoSuchAlgorithmException iae) {
      logger.error(_ERR_NO_SUCH_ALGORITHM, iae);
      throw new EncryptionException(_ERR_NO_SUCH_ALGORITHM, iae);
    } catch (InvalidKeySpecException e) {
      logger.error(_ERR_INVALID_KEY_SPEC, e);
      throw new EncryptionException(_ERR_INVALID_KEY_SPEC, e);
    }

    if (logger.isDebugEnabled()) {
      logger.debug(""exiting generateKey"");
    }
  }

  /**
   * This generates a random value of user defined size that can be used to encrypt data. The decrypting client will then need to access this value to be able to decrypt
   *
   * @return
   */
  public static String generateSaltStr(int size) {
    String salt = null;
    byte[] newSeed = secureRandom.generateSeed(size);
    salt = DatatypeConverter.printBase64Binary(newSeed);

    return salt;
  }

  /**
   * This generates a random 16 bit value that can be used to encrypt data. The decrypting client will then need to access this value to be able to decrypt
   *
   * @return
   */
  public static String generateSaltStr() {
    String salt = null;
    byte[] newSeed = secureRandom.generateSeed(16);
    salt = DatatypeConverter.printBase64Binary(newSeed);

    return salt;
  }

  /**
   * Loads properties files (call before attempting to read any properties files)
   */
  private void loadProperties() {
    try {
      rbConfig = ResourceBundle.getBundle(""application"", Locale.US);
    } catch (MissingResourceException ie) {
      logger.fatal(
          ""FATAL: SecurityTools.loadProperties Cannot read the properties file.  Please ensure the file is on the classpath."");
    } catch (Exception e) {
      logger.fatal(
          ""FATAL: SecurityTools.loadProperties Cannot read the properties file.  Please ensure the file is on the classpath."");
    }
  }

  /**
   * Test method
   *
   * @param args
   */
  public static void main(String[] args) {
    String[] message = { ""mkohanek"", ""9248547896548752345"", ""okok234234234okok467467"",
        ""12"" };
    String result = null;
    try {
      // ASYMMETRIC TEST - use this block to test values are usable over separate sessions by taking output from loop below and using it here for subsequent calls
      // String previousSalt = ""jriUh+01HlHw4g3mO9PLcw=="";
      // SecurityTools asSecTool = new SecurityTools(previousSalt);
      // String previousEncryptedValue = ""nFVxkzdx+psiUVkCW5NztQ=="";
      // System.out.println(""should decrypt to an expected value - "" + asSecTool.decrypt(previousEncryptedValue));
      // END ASYMMETRIC TEST

      // SYMMETRIC TEST - tests that single requests will encrypt and decrypt successfully
      String salt = generateSaltStr(16);
      System.out.println(""salt - "" + salt);
      SecurityTools secTool = new SecurityTools(salt);
      for (String mess : message) {
        result = secTool.encrypt(mess);
        System.out.println(result);
        result = secTool.decrypt(result);
        System.out.println(result);
      }
      // END SYMMETRIC TEST
    } catch (Exception e) {
      System.out.println(e.getMessage());
      e.printStackTrace();

    }
  }

}
</code></pre>
","58","<java><encryption><public-key-encryption><encryption-asymmetric>","0","0","1","2019-06-28 19:43:59","56808558","4","","1810556","","2019-06-27 21:09:05","2019-06-27 20:40:53",""
"26381917","Asymmetric unique pair algorithm","<p>This is a fast question. I know about asymmetric encryption and I know that you can use the private key to decrypt whatever is encrypted with the public key. I know too that having the Private key I can generate the public one associated to it. </p>

<p>Here is my question: Is there any crypto algorithm to generate a pair of keys so I can't generate the public one having the private? </p>

<p>I would like to know if there is something like </p>

<p>Private(ciphertext) = Encrypted </p>

<p>Public(Encrypted) = ciphertext</p>

<p>Public(ciphertext) = Encrypted2</p>

<p>Private(Encrypted2)= ciphertext</p>

<p>And without generating the public from the private.</p>

<p>Thank you very much</p>
","<p>The RSA algorithm relies on the difficulty of factoring the product of two prime numbers. 
Two large, arbitrary, prime numbers <code>p</code> and <code>q</code> are used generate each private-public key pair. Given either only the private key or the public key, it is computationally difficult to find the other key without the prime numbers <code>p</code> and <code>q</code>. However, we do not <code>p</code> and <code>q</code> in order to apply either the public or the private key to a text.</p>
","57","<algorithm><encryption><public-key-encryption><private-key><encryption-asymmetric>","0","0","2","2014-10-15 15:27:26","","0","","","","","2014-10-15 11:54:14",""
"26381917","Asymmetric unique pair algorithm","<p>This is a fast question. I know about asymmetric encryption and I know that you can use the private key to decrypt whatever is encrypted with the public key. I know too that having the Private key I can generate the public one associated to it. </p>

<p>Here is my question: Is there any crypto algorithm to generate a pair of keys so I can't generate the public one having the private? </p>

<p>I would like to know if there is something like </p>

<p>Private(ciphertext) = Encrypted </p>

<p>Public(Encrypted) = ciphertext</p>

<p>Public(ciphertext) = Encrypted2</p>

<p>Private(Encrypted2)= ciphertext</p>

<p>And without generating the public from the private.</p>

<p>Thank you very much</p>
","<p>You can't conclude that because you have a private key then you can generate the public key. Take <strong>RSA</strong> as an example - here you can't deduct one of the keys in a key pair from the other - and which one is picked as the private key, and which is picked as the public key is random.</p>

<p>However, when storing the keys the private key file usually includes a copy of the public key as well (or enough information to recreate it). </p>
","57","<algorithm><encryption><public-key-encryption><private-key><encryption-asymmetric>","0","0","2","2014-10-15 15:27:26","","0","","","","","2014-10-15 11:54:14",""
"44834151","Android's Fingerprint Scanner as gateway to enrol multiple fingerprints and generate Asymmetric Keys","<p>Is it possible to use the Android's Fingerprint Scanner as gateway for generating Asymmetric Keys. </p>

<p>The phone is used to enrol multiple fingerprints, generate the Asymmetric Keys and send the public key to an online database (if possible via sms).</p>

<p>All the private key are destroyed or saved by the user as an mnemonic password.   </p>
","<p>For a GMS certified device, you won't be able to access any fingerprint-specific info on Android 6.0+. So I don't believe you can generate an asymmetric key from it as no unique information can be obtained from the TEE.</p>

<p>See: <a href=""https://source.android.com/compatibility/7.1/android-7.1-cdd.pdf"" rel=""nofollow noreferrer"">https://source.android.com/compatibility/7.1/android-7.1-cdd.pdf</a></p>

<p>Section: 7.3.10</p>

<p>Highlights:</p>

<ul>
<li>MUST have a hardware-backed keystore implementation, and perform the
fingerprint matching in a Trusted Execution Environment (TEE) or on a
chip with a secure channel to the TEE.</li>
<li>MUST have all identifiable fingerprint data encrypted and
cryptographically authenticated such that they cannot be acquired,
read or altered outside of the Trusted Execution Environment (TEE) as
documented in the implementation guidelines on the Android Open
Source Project site.</li>
<li>MUST NOT enable 3rd-party applications to distinguish between
individual fingerprints.</li>
</ul>

<p>The fingerprint API seems to only be able to authenticate the fingerprint and little else: <a href=""https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.html"" rel=""nofollow noreferrer"">https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.html</a></p>
","56","<android><encryption><private-key><fingerprint><encryption-asymmetric>","0","0","1","2017-08-08 23:08:15","","0","","","","","2017-06-29 20:11:19",""
"57535111","Is encrypting with private key instead of signing a bad idea?","<p>I am using a local URL scheme to submit a payload to the client when a user clicks a link and have to make sure that this is only used in my specific web application.
So I am using a key pair, encrypting the payload on the server using the private key, generating a link that the protocol handler on the client can decrypt using the public key, verifying that the payload should be processed.</p>

<p>So is it less secure to send a private-key-encrypted payload instead of a cleartext payload plus signature (and if yes, why)?</p>
","<p>What you are doing is signing! </p>

<p><em>Encrypting</em> is when a payload is being concealed with one’s <strong>public key</strong> and later decrypted with a <strong>private key</strong>. When I want to send you a secret message, I will take your public key (because I know it) and encrypt my message. This will make sure that <strong>only you</strong> can decrypt it with your <strong>private key</strong>. </p>

<p><em>Signing</em> works vice versa. If during encryption I want to make sure that only you can decrypt me message, with signing I want to make sure that all recipients of the message can be sure in its authenticity. If you encrypt something with your private (<em>signing</em>), anyone with your public key can decrypt it and verify its sender.</p>

<p>In your case, if you just want to prove your identity (like certificates, jwt tokens, etc.), you would need to use signing methods. If you want to transfer payload securely, use encryption.</p>

<p>Hope this helps!</p>
","56","<encryption><encryption-asymmetric>","0","0","2","2019-08-17 11:50:16","57536006","19","","3173842","","2019-08-17 11:00:17","2019-08-17 09:41:40",""
"57535111","Is encrypting with private key instead of signing a bad idea?","<p>I am using a local URL scheme to submit a payload to the client when a user clicks a link and have to make sure that this is only used in my specific web application.
So I am using a key pair, encrypting the payload on the server using the private key, generating a link that the protocol handler on the client can decrypt using the public key, verifying that the payload should be processed.</p>

<p>So is it less secure to send a private-key-encrypted payload instead of a cleartext payload plus signature (and if yes, why)?</p>
","<p>Found out that there are other Stack Exchange sites that answer this question very well:</p>

<p><a href=""https://crypto.stackexchange.com/questions/2123/rsa-encryption-with-private-key-and-decryption-with-a-public-key"">https://crypto.stackexchange.com/questions/2123/rsa-encryption-with-private-key-and-decryption-with-a-public-key</a></p>

<p><a href=""https://security.stackexchange.com/questions/11879/is-encrypting-data-with-a-private-key-dangerous"">https://security.stackexchange.com/questions/11879/is-encrypting-data-with-a-private-key-dangerous</a></p>

<p>I should have searched a little bit longer before asking.</p>
","56","<encryption><encryption-asymmetric>","0","1","2","2019-08-17 11:50:16","57536006","19","","3173842","","2019-08-17 11:00:17","2019-08-17 09:41:40",""
"58337613","C# robust key pair match","<p>I'm generating a key pair in this way</p>

<pre class=""lang-cs prettyprint-override""><code>var rsa = new RSACryptoServiceProvider();
_privateKey = rsa.ToXmlString(true);
_publicKey = rsa.ToXmlString(false);
</code></pre>

<p>If we do a simple Console.Write(_publicKey) we have </p>

<pre><code>    &lt;RSAKeyValue&gt;
      &lt;Modulus&gt;nW/DERb839Z6fM594Eg3Y3AnpEKjMP/QzGn/iJW9snGkIl3crsa6a+g8S7uKNM0rBNoIdYnMlJTRDoPBpl35eO+ad/V0K9CJ+AqAo4q2pVEsJJujjhNX0C6wwrocS5vGWnuX02JZzVwiQxailo0qdq0qYLhp2ckQLUfwGxWr1mU=&lt;/Modulus&gt;
      &lt;Exponent&gt;AQAB&lt;/Exponent&gt;
    &lt;/RSAKeyValue&gt;
</code></pre>

<p>If we do a simple Console.Write(_privateKey)</p>

<pre><code>    &lt;RSAKeyValue&gt;
      &lt;Modulus&gt;nW/DERb839Z6fM594Eg3Y3AnpEKjMP/QzGn/iJW9snGkIl3crsa6a+g8S7uKNM0rBNoIdYnMlJTRDoPBpl35eO+ad/V0K9CJ+AqAo4q2pVEsJJujjhNX0C6wwrocS5vGWnuX02JZzVwiQxailo0qdq0qYLhp2ckQLUfwGxWr1mU=&lt;/Modulus&gt;
      &lt;Exponent&gt;AQAB&lt;/Exponent&gt;
      &lt;P&gt;wrI5ll8sm45OI+jGNVombQB9YUMMzlHgiP//q8N6shYDkmaGrijYrM0/xm9mXn8sxTvg+jX55159Mpuk1rIiBw==&lt;/P&gt;
      &lt;Q&gt;zwIriOVyG45A3i3UHQt+KijTz1kSw+m03Fbw3WDbh2ooYewCvLoLFWCsgk1TeXfMK5u7dLdttgGqC27qd6i5Mw==&lt;/Q&gt;
      &lt;DP&gt;JL4dwBMWCAVDGePEBC2PMuL0xnYw5H7vMOufBHtPnGwrIGXY5OUwfuv9LSW42/yEJnS2cIHfN5rNZc+ZvCrB4Q==&lt;/DP&gt;
      &lt;DQ&gt;aL53WtCGeWz0Y7easYukLh70deFjPmBd1HPlco7U5eMQReQOyoH0o7+D6nbH+xlj5Njq9DbwO30CFsDrwNpNww==&lt;/DQ&gt;
      &lt;InverseQ&gt;OV9TPLS5fli7K59hGH1m5ZnTT80UY9XJzKRFRjWuDHI1P7QL+d6+1d08DAICDWTu6ac/1jD8ibmO6AxOmYw6OQ==&lt;/InverseQ&gt;
      &lt;D&gt;kiQjm+KN2645R09as2311F1Qvv6Ig7yDcqzWYlA1pcYtiSU97BNXC0GpbtdohHkK/Nbz0T+X4zh9Ew8lHCzRnIdSQZwGyeCXmk8QNvzK3HTOmLgaTu6UaNFtilqgYWzXHuu8WtvWyyN5F3bLb+PYJ1hAMCrS1RxOqlxXczgSqQU=&lt;/D&gt;
    &lt;/RSAKeyValue&gt;
</code></pre>

<p>I want to check if the two keys, once generated and saved, are matching.</p>

<p>As we know anyone has access to the public key.</p>

<p><a href=""ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-1/pkcs-1v2-1.pdf"" rel=""nofollow noreferrer"">ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-1/pkcs-1v2-1.pdf</a></p>

<p>For what I read, to check if a private and public key are of the same pair we verify that the Modulus is the same and that Exponent of the public key is equal to PublicExponent of the private key</p>

<p>If I take the public key and I do:</p>

<pre><code>    &lt;RSAKeyValue&gt;
      &lt;Modulus&gt;nW/DERb839Z6fM594Eg3Y3AnpEKjMP/QzGn/iJW9snGkIl3crsa6a+g8S7uKNM0rBNoIdYnMlJTRDoPBpl35eO+ad/V0K9CJ+AqAo4q2pVEsJJujjhNX0C6wwrocS5vGWnuX02JZzVwiQxailo0qdq0qYLhp2ckQLUfwGxWr1mU=&lt;/Modulus&gt;
      &lt;Exponent&gt;AQAB&lt;/Exponent&gt;
      &lt;P&gt;Hi-guys==&lt;/P&gt;
      &lt;Q&gt;Im-doing-something-nasty==&lt;/Q&gt;
      &lt;DP&gt;to-pass==&lt;/DP&gt;
      &lt;DQ&gt;the-key-check==&lt;/DQ&gt;
      &lt;InverseQ&gt;XXXXXXXXXXXXXXXX==&lt;/InverseQ&gt;
      &lt;D&gt;YYYYYYYYYYYYYYYYYYYYYYYYY=&lt;/D&gt;
    &lt;/RSAKeyValue&gt;
</code></pre>

<p>As you can see, if I consider only the modulus and exponent, this private key match the public key (!).</p>

<p>Considering that a text is encrypted with the public key, and decrypted with the private key, is clear that no one can decrypt a message with this forged key. So, a forged key like this, is useless. </p>

<p>I'm just wondering, if there is something else to do for a robust key pair match.</p>
","<p>@JamesKPolk Imagine a scenario where the server contains all the public keys. </p>

<p>To check if the two keys are matching, the server use the public key of a user to encrypt the hash of a phrase chosen randomly</p>

<p>The server send the encrypted hash to the client  </p>

<p>The client decrypt the hash with his private key</p>

<p>The client send the decrypted hash to the server</p>

<p>If the hash is the same of the one used initially, and we repeat the proof multiple times, we have a key match. </p>

<p>On client side I can also check the consistency of the private key, in the way you suggested.</p>
","54","<c#><key><rsa><encryption-asymmetric><robust>","0","0","1","2019-10-11 15:16:26","","5","","1441917","","2019-10-11 10:38:23","2019-10-11 08:53:55",""
"55852992","Is there a way to create a KeyPair from an NTRU AsymmetricCipherKeyPair?","<p>I need to generate a KeyPair (java.security.KeyPair) from an NTRU AsymmetricCipherKeyPair (org.bouncycastle.crypto.AsymmetricCipherKeyPair). I use many different methods (later in the code) that have KeyPair (or PublicKey/ PrivateKey) as input and don't want to create additional methods for AsymmetricCipherKeyPair (or NTRUEncryptionPrivateKeyParameters/ NTRUEncryptionPublicKeyParameters). Is there a way to build a KeyPair from this AsymmetricCipherKeyPair?</p>

<p>Here some Code as an example:</p>

<pre><code>NTRUEncryptionKeyPairGenerator keygen = new NTRUEncryptionKeyPairGenerator();
keygen.init(NTRUEncryptionKeyGenerationParameters.APR2011_439);
AsymmetricCipherKeyPair asymmetricCipherKeyPair = keygen.generateKeyPair();

//NTRUEncryptionPrivateKeyParameters ntruEncryptionPrivateKeyParameters = (NTRUEncryptionPrivateKeyParameters) asymmetricCipherKeyPair.getPrivate();
//NTRUEncryptionPublicKeyParameters ntruEncryptionPublicKeyParameters = (NTRUEncryptionPublicKeyParameters) asymmetricCipherKeyPair.getPublic();

KeyPair keyPair = ??? //what to do here?
PublicKey pubKey = ???
...
</code></pre>

<p>I seached my problem and found <a href=""https://stackoverflow.com/questions/49158734/convert-bouncy-castles-asymmetriccipherkeypair-rsa-to-java-security-keypair"">convert Bouncy Castle&#39;s AsymmetricCipherKeyPair (RSA) to java.security.KeyPair</a>. But this is probably not usefull with NTRU-keys.</p>

<p>Thank you for your help :-)</p>
","","48","<java><bouncycastle><encryption-asymmetric><key-pair>","0","","0","2019-04-25 15:37:55","","0","","","","","2019-04-25 15:37:55",""
"51503789","AssertionError: Unknown node type: 3 when encrypting SOAP body content with dm.xmlsec.binding","<p>I'm getting an error when I try to encrypt the body of a SOAP XML message using <a href=""https://pypi.org/project/dm.xmlsec.binding/"" rel=""nofollow noreferrer"">https://pypi.org/project/dm.xmlsec.binding/</a>. </p>

<pre><code>Traceback (most recent call last):
  File ""./manage.py"", line 14, in &lt;module&gt;
    execute_from_command_line(sys.argv)
  File ""/Users/romeroqj/.virtualenv/unhaggle/lib/python2.7/site-packages/django/core/management/__init__.py"", line 364, in execute_from_command_line
    utility.execute()
  File ""/Users/romeroqj/.virtualenv/unhaggle/lib/python2.7/site-packages/django/core/management/__init__.py"", line 356, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File ""/Users/romeroqj/.virtualenv/unhaggle/lib/python2.7/site-packages/django/core/management/base.py"", line 283, in run_from_argv
    self.execute(*args, **cmd_options)
  File ""/Users/romeroqj/.virtualenv/unhaggle/lib/python2.7/site-packages/django/core/management/base.py"", line 330, in execute
    output = self.handle(*args, **options)
  File ""/Users/romeroqj/Desktop/unhaggle/unhaggle/audi/management/commands/encrypt.py"", line 63, in handle
    encrypted_xml = enc_ctx.encryptXml(enc_data, doc.getroot())
  File ""_xmlsec.pyx"", line 555, in dm.xmlsec.binding._xmlsec.EncCtx.encryptXml (src/_xmlsec.c:7336)
  File ""_xmlsec.pyx"", line 637, in dm.xmlsec.binding._xmlsec.lxml_safe_dealloc (src/_xmlsec.c:8132)
  File ""src/lxml/public-api.pxi"", line 29, in lxml.etree.elementFactory
  File ""src/lxml/etree.pyx"", line 1607, in lxml.etree._elementFactory
  File ""src/lxml/classlookup.pxi"", line 403, in lxml.etree._parser_class_lookup
  File ""src/lxml/nsclasses.pxi"", line 174, in lxml.etree._find_nselement_class
  File ""src/lxml/classlookup.pxi"", line 257, in lxml.etree._callLookupFallback
  File ""src/lxml/classlookup.pxi"", line 336, in lxml.etree._lookupDefaultElementClass
AssertionError: Unknown node type: 3
</code></pre>

<p>The error occurs when I try to encrypt the content of the body (xmlsec.TypeEncContent), but it works when I try to encrypt the body element (xmlsec.TypeEncElement). Here's the code:</p>

<pre><code>import dm.xmlsec.binding as xmlsec
from dm.xmlsec.binding.tmpl import EncData, fromstring

key_mngr = xmlsec.KeysMngr()
key = xmlsec.Key.load('cert.pem', xmlsec.KeyDataFormatCertPem)
key.name = 'cert.pem'
key_mngr.addKey(key)
enc_data = EncData(
    xmlsec.TransformAes128Cbc, type=xmlsec.TypeEncContent
)
enc_data.ensureCipherValue()  # target for encryption result
enc_ctx = xmlsec.EncCtx(key_mngr)
enc_ctx.encKey = xmlsec.Key.generate(
    xmlsec.KeyDataAes, 192, xmlsec.KeyDataTypeSession
)
doc = fromstring(xml_data)
body = doc.find('soap:Body', namespaces=NAMESPACES)  # NAMESPACES is redacted for brevity
encrypted_xml = enc_ctx.encryptXml(enc_data, doc.getroot())
</code></pre>

<p>The XML data looks something like this:</p>

<pre><code>&lt;soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""&gt;
    &lt;soap:Header&gt;
    ...
    &lt;/soap:Header&gt;
    &lt;soap:Body Id=""Body""&gt;
    ...
    &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;
</code></pre>

<p>What could be wrong here?</p>

<p>I'm not sure if this is relevant or related, but I tried to do the same using a different library <a href=""https://github.com/mehcode/python-xmlsec/issues/83"" rel=""nofollow noreferrer"">https://github.com/mehcode/python-xmlsec/issues/83</a> and I got a Segmentation fault error, however, it worked when I tried to encrypt the element. This pattern makes me believe there's something wrong in this approach.</p>

<p>Any hints are appreciated. Thanks in advance!</p>
","","43","<python><encryption><soap><encryption-asymmetric><xmlsec>","1","","0","2018-07-24 16:46:05","","2","","","","","2018-07-24 16:46:05",""
"51724442","Why am I not getting the decrypted data when my input text size is less than 16 bytes using openssl EVP_OpenInit() api function?","<p>I am trying to encrypt and Decrypt file using EVP apis. I am getting correct result when size is greater or equal to 16 bytes only. Here is my codes for the above stated problem.</p>

<pre><code> #include &lt;stdio.h&gt;

    #include &lt;stdlib.h&gt;

    #include &lt;openssl/evp.h&gt;
    #include &lt;openssl/pem.h&gt;
    #include &lt;openssl/rsa.h&gt;
    #include &lt;openssl/err.h&gt;

    #include &lt;arpa/inet.h&gt; 

    #if 1
    int do_evp_seal(FILE *rsa_pkey_file, FILE *in_file, FILE *out_file)
    {
        int retval = 0;
        RSA *rsa_pkey = NULL;
        EVP_PKEY *pkey = EVP_PKEY_new();
        EVP_CIPHER_CTX *ctx;
        ctx = EVP_CIPHER_CTX_new();
        unsigned char buffer[4096];
        unsigned char buffer_out[4096 + EVP_MAX_IV_LENGTH];
        //size_t len;
        int len_out;
        unsigned char *ek = NULL;
        int eklen=0;
        uint32_t eklen_n=0;
        unsigned char iv[EVP_MAX_IV_LENGTH];

        if (!PEM_read_RSA_PUBKEY(rsa_pkey_file, &amp;rsa_pkey, NULL, NULL))
        {
            fprintf(stderr, ""Error loading RSA Public Key File.\n"");
            ERR_print_errors_fp(stderr);
            retval = 2;
            goto out;
        }

        if (!EVP_PKEY_assign_RSA(pkey, rsa_pkey))
        {
            fprintf(stderr, ""EVP_PKEY_assign_RSA: failed.\n"");
            retval = 3;
            goto out;
        }

        EVP_CIPHER_CTX_init(ctx);
        ek = malloc(EVP_PKEY_size(pkey));

        if (!EVP_SealInit(ctx, EVP_aes_128_cbc(), &amp;ek, &amp;eklen, iv, &amp;pkey, 1))
        {
            fprintf(stderr, ""EVP_SealInit: failed.\n"");
            retval = 3;
            goto out_free;
        }

        /* First we write out the encrypted key length, then the encrypted key,
         * then the iv (the IV length is fixed by the cipher we have chosen).
         */

        eklen_n = htonl(eklen);
        if (fwrite(&amp;eklen_n, sizeof eklen_n, 1, out_file) != 1)
        {
            perror(""output file"");
            retval = 5;
            goto out_free;
        }
        if (fwrite(ek, eklen, 1, out_file) != 1)
        {
            perror(""output file"");
            retval = 5;
            goto out_free;
        }
        if (fwrite(iv, EVP_CIPHER_iv_length(EVP_aes_128_cbc()), 1, out_file) != 1)
        {
            perror(""output file"");
            retval = 5;
            goto out_free;
        }

        /* Now we process the input file and write the encrypted data to the
         * output file. */

        while (1)
        {
            int numlen = fread(buffer, 1, sizeof buffer, in_file);
            if (!EVP_SealUpdate(ctx, buffer_out, &amp;len_out, buffer, numlen))
            {
                fprintf(stderr, ""EVP_SealUpdate: failed.\n"");
                retval = 3;
                goto out_free;
            }

            if (fwrite(buffer_out, len_out, 1, out_file) != 1)
            {
                perror(""output file"");
                retval = 5;
                goto out_free;
            }
            if (numlen &lt; sizeof(buffer)) { // EOF
                break;
            }
        }

        if (ferror(in_file))
        {
            perror(""input file"");
            retval = 4;
            goto out_free;
        }

        if (!EVP_SealFinal(ctx, buffer_out, &amp;len_out))
        {
            fprintf(stderr, ""EVP_SealFinal: failed.\n"");
            retval = 3;
            goto out_free;
        }

        if (fwrite(buffer_out, len_out, 1, out_file) != 1)
        {
            perror(""output file"");
            retval = 5;
            goto out_free;
        }

        out_free:
        EVP_PKEY_free(pkey);
        EVP_CIPHER_CTX_cleanup(ctx);
        free(ek);

        out:
        return retval;
    }
    #endif
    int main(int argc, char *argv[])
    {
        FILE *rsa_pkey_file,*ifp,*ofp;
        int rv;

        if (argc &lt; 2)
        {
            fprintf(stderr, ""Usage: %s &lt;PEM RSA Public Key File&gt;\n"", argv[0]);
            exit(1);
        }

        rsa_pkey_file = fopen(argv[1], ""rb"");
        ifp = fopen(argv[2], ""rb"");
        ofp = fopen(argv[3], ""wb"");
        if (!rsa_pkey_file)
        {
            perror(argv[1]);
            fprintf(stderr, ""Error loading PEM RSA Public Key File.\n"");
            exit(2);
        }
        if (!ifp)
        {
            perror(argv[1]);
            fprintf(stderr, ""Error loading input file.\n"");
            exit(2);
        }
        if (!ofp)
        {
            perror(argv[1]);
            fprintf(stderr, ""Error loading output file.\n"");
            exit(2);
        }

        rv = do_evp_seal(rsa_pkey_file, ifp, ofp);

        fclose(rsa_pkey_file);
        fclose(ifp);
        fclose(ofp);
        return rv;
    }
</code></pre>

<p>Here is my code for decryption for the above stated problem. For size less than 16 bytes the decrypted file is empty. Although the code seems to be logically correct.</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#include &lt;openssl/evp.h&gt;
#include &lt;openssl/pem.h&gt;
#include &lt;openssl/rsa.h&gt;
#include &lt;openssl/err.h&gt;

#include &lt;arpa/inet.h&gt; /* For htonl() */


#if 1
int do_evp_unseal(FILE *rsa_pkey_file, FILE *in_file, FILE *out_file)
{
    int retval = 0;
    RSA *rsa_pkey = NULL;
    EVP_PKEY *pkey = EVP_PKEY_new();
    EVP_CIPHER_CTX *ctx;
    ctx = EVP_CIPHER_CTX_new();
    unsigned char buffer[4096];
    unsigned char buffer_out[4096 + EVP_MAX_IV_LENGTH];
    //size_t len;
    int len_out;
    unsigned char *ek;
    unsigned int eklen=0;
    uint32_t eklen_n=0;
    unsigned char iv[EVP_MAX_IV_LENGTH];

    if (!PEM_read_RSAPrivateKey(rsa_pkey_file, &amp;rsa_pkey, NULL, NULL))
    {
        fprintf(stderr, ""Error loading RSA Private Key File.\n"");
        ERR_print_errors_fp(stderr);
        retval = 2;
        goto out;
    }

    if (!EVP_PKEY_assign_RSA(pkey, rsa_pkey))
    {
        fprintf(stderr, ""EVP_PKEY_assign_RSA: failed.\n"");
        retval = 3;
        goto out;
    }

    EVP_CIPHER_CTX_init(ctx);
    ek = malloc(EVP_PKEY_size(pkey));

    /* First need to fetch the encrypted key length, encrypted key and IV */

    if (fread(&amp;eklen_n, sizeof eklen_n, 1, in_file) != 1)
    {
        perror(""input file"");
        retval = 4;
        goto out_free;
    }
    eklen = ntohl(eklen_n);
    if (eklen &gt; EVP_PKEY_size(pkey))
    {
        fprintf(stderr, ""Bad encrypted key length (%u &gt; %d)\n"", eklen,
            EVP_PKEY_size(pkey));
        retval = 4;
        goto out_free;
    }
    if (fread(ek, eklen, 1, in_file) != 1)
    {
        perror(""input file"");
        retval = 4;
        goto out_free;
    }
    if (fread(iv, EVP_CIPHER_iv_length(EVP_aes_128_cbc()), 1, in_file) != 1)
    {
        perror(""input file"");
        retval = 4;
        goto out_free;
    }

    if (!EVP_OpenInit(ctx, EVP_aes_128_cbc(), ek, eklen, iv, pkey))
    {
        fprintf(stderr, ""EVP_OpenInit: failed.\n"");
        retval = 3;
        goto out_free;
    }

    while (1)
    {
        int numlen = fread(buffer, 1, sizeof buffer, in_file);
        if (!EVP_OpenUpdate(ctx, buffer_out, &amp;len_out, buffer, numlen))
        {
            fprintf(stderr, ""EVP_OpenUpdate: failed.\n"");
            retval = 3;
            goto out_free;
        }

        if (fwrite(buffer_out, len_out, 1, out_file) != 1)
        {
            perror(""output file"");
            retval = 5;
            goto out_free;
        }
        if (numlen &lt; sizeof(buffer)) { // EOF
            break;
        }
    }

    if (ferror(in_file))
    {
        perror(""input file"");
        retval = 4;
        goto out_free;
    }

    if (!EVP_OpenFinal(ctx, buffer_out, &amp;len_out))
    {
        fprintf(stderr, ""EVP_SealFinal: failed.\n"");
        retval = 3;
        goto out_free;
    }

    if (fwrite(buffer_out, len_out, 1, out_file) != 1)
    {
        perror(""output file"");
        retval = 5;
        goto out_free;
    }

    out_free:
    EVP_PKEY_free(pkey);
    EVP_CIPHER_CTX_cleanup(ctx);
    free(ek);

    out:
    return retval;
}
#endif
int main(int argc, char *argv[])
{
    FILE *rsa_pkey_file,*ifp,*ofp;
    int rv;

    if (argc &lt; 2)
    {
        fprintf(stderr, ""Usage: %s &lt;PEM RSA Private Key File&gt;\n"", argv[0]);
        exit(1);
    }

    rsa_pkey_file = fopen(argv[1], ""rb"");
    ifp = fopen(argv[2], ""rb"");
    ofp = fopen(argv[3], ""wb"");
    if (!rsa_pkey_file)
    {
        perror(argv[1]);
        fprintf(stderr, ""Error loading PEM RSA Private Key File.\n"");
        exit(2);
    }

    rv = do_evp_unseal(rsa_pkey_file, ifp, ofp);

    fclose(rsa_pkey_file);
    fclose(ifp);
    fclose(ofp);
    return rv;
}
</code></pre>
","","42","<linux><openssl><public-key-encryption><encryption-asymmetric><openssl-engine>","0","","0","2018-08-09 08:52:25","","2","1","472495","","2018-08-09 08:52:25","2018-08-07 10:23:15",""
"56137096","What is the certificate in the context of RSA and asymmetric encryption?","<p>I try to implement a asymmetric encription for learning purpose. I learned that a certificate helps to identify the owner of a public key. But how can I implement a certificate? Can you give me an example of a certificate I can use?</p>

<p>I implemented the encryption and decryption, but now i want to use a certificate.</p>
","<p>You can generate a self signed X.509 certificate using OpenSSL - there are many tutorials online. Certificates have standardized formats and are not specific to Java.</p>

<pre><code>openssl req -x509 -newkey rsa:3072 -sha256 -nodes -keyout privkey.pem -out selfsigned.pem
openssl pkcs8 -in privkey.pem -nocrypt -outform DER -out privkey.p8
openssl x509 -in selfsigned.pem -outform DER -out selfsigned.crt
</code></pre>

<p>This generates two files for the certificate (which contains the public key) and one for the private key. There is also a PEM encoded private key and certificate, which Java does not directly handle. The private key files are not encrypted or otherwise protected, so use this only for testing purposes.</p>

<p>The certificate is compatible with <a href=""https://docs.oracle.com/javase/7/docs/api/java/security/cert/CertificateFactory.html"" rel=""nofollow noreferrer""><code>CertificateFactory</code></a> for <code>""X.509""</code>. The private key is compatible with <a href=""https://docs.oracle.com/javase/7/docs/api/java/security/KeyFactory.html"" rel=""nofollow noreferrer""><code>KeyFactory</code></a> with <code>""RSA""</code> as algorithm and <a href=""https://docs.oracle.com/javase/7/docs/api/java/security/spec/PKCS8EncodedKeySpec.html"" rel=""nofollow noreferrer""><code>PKCS8EncodedKeySpec</code></a>.</p>

<p>Java itself cannot <em>directly</em> be used when it comes to generating certificates. You can use Bouncy Castle or even EJBCA if in-code generation is required, but that is quite a steep learning curve.</p>
","40","<java><encryption><rsa><encryption-asymmetric>","0","1","2","2019-05-14 23:11:52","56139235","0","","","","","2019-05-14 19:13:05",""
"56137096","What is the certificate in the context of RSA and asymmetric encryption?","<p>I try to implement a asymmetric encription for learning purpose. I learned that a certificate helps to identify the owner of a public key. But how can I implement a certificate? Can you give me an example of a certificate I can use?</p>

<p>I implemented the encryption and decryption, but now i want to use a certificate.</p>
","<p>A certificate is a piece of data that attaches certain additional information to someone's public key, and is digitally signed by a well-known third-party (authority).</p>

<p>The common format for certificates is X.509, encoded in ASN1.</p>

<p>A typical certificate would contain at least a ""common name"", the subject key fingerprint (a hash of the public key being certified), a validity period and a CA signature of all that.</p>
","40","<java><encryption><rsa><encryption-asymmetric>","0","0","2","2019-05-14 23:11:52","56139235","0","","","","","2019-05-14 19:13:05",""
"39257930","Restrict communication to server only from the right client","<p>I am pretty confused here trying to find a solution to this problem.</p>

<p>There is a wifi enabled micro controller and a client (android app), both connected to the same wifi network. The official android app sends some instructions to the microcontroller through GET params.</p>

<p>Now i want only and only the official app to be able to send meaningful data across. To prevent man-in-the-middle attack i can encrypt this data using asymmetric keys. The micro-controller will generate the public and private keys and give out the public key through the server when asked for.</p>

<p>But then comes the problem. Can't the attacker send data to the device (micro-controller) too if he knows the public key? The attacker can simply get the code of the app through reverse eng. and send meaningful data through his browser to the device.</p>

<p>Some limitations - </p>

<ol>
<li>I cant make any sort of white-list on the device.</li>
<li>There is no internet connection. Just LAN available.</li>
<li>The device has no sense of time.</li>
</ol>

<p>Some properties-</p>

<ol>
<li>The devices have a unique 8 digit id. In scenario of multiple devices, the right one is targeted using this id. The devices' used IP address is mapped to this ID.</li>
<li>The android app (client) sends numeric strings in GET params for the devices to perform operations.</li>
</ol>

<p>Can this be solved using a fool-proof method?</p>

<p>Thank you in advance.</p>
","","40","<android><security><encryption><rsa><encryption-asymmetric>","0","","0","2016-08-31 19:53:01","","5","1","","","","2016-08-31 19:53:01",""
"26613683","Should I be using asymmetric key?","<p>I want to keep sensitive information online on github but I am struggling with how to implement this. </p>

<p>Currently I have symmetric encryption with a very long key ( 4K characters ). but someone told me it is not safe enough and that I should be using travis' mechanism of asymmetric encryption. </p>

<p>Can someone please explain </p>

<ul>
<li>Is it really less safe than travis' method? The way I see it both methods use a secret string to decrypt. </li>
<li>I am currently using openssl for this procedure - is this the right tool for this task?</li>
</ul>

<p><em>Adding more info to answer comments</em></p>

<p><strong><em>travis' mechanism</em></strong> - described here: <a href=""http://docs.travis-ci.com/user/encryption-keys/"" rel=""nofollow"">http://docs.travis-ci.com/user/encryption-keys/</a></p>

<p><strong><em>do other people need to access it?</em></strong> - yes. the procedure to decrypt should be known in the company, and other employees should be able to decrypt it. However people outside of the company should not be able to decrypt it. </p>

<p><strong><em>What am I encrypting with it?</em></strong> - hopefully every sensitive information the company has that is required for testing or mocking the system. We have tests on many clouds (ec2, azure, hpcloud and more..) , I would like to keep their account credentials. I would like to keep smtp credentials. credentials to services our code uses like mailchimp/mandrill. </p>

<p>I would also like to encrypt our SSL certificate for the domains that we own. </p>

<p>So basically, if someone will ever decrypt this file, they can potentially damage the company in many ways. </p>
","","39","<encryption><encryption-symmetric><encryption-asymmetric>","0","","0","2014-10-29 05:24:02","","2","","1068746","","2014-10-29 05:24:02","2014-10-28 16:36:31",""
"55143609","How can I store and retrieve public and private keys (BLS01 Type G), for signing purpose, generated using jPBC (java)?","<p>Using jPBC (2.0.0) library, I tried type G elliptic curves for signing purpose:
<a href=""http://gas.dia.unisa.it/projects/jpbc/docs/ecpg.html#TypeG"" rel=""nofollow noreferrer"">http://gas.dia.unisa.it/projects/jpbc/docs/ecpg.html#TypeG</a>.</p>

<p>I Used code found at the site ""<a href=""http://gas.dia.unisa.it/projects/jpbc/schemes/ss_bls01.html"" rel=""nofollow noreferrer"">http://gas.dia.unisa.it/projects/jpbc/schemes/ss_bls01.html</a>"" as reference.</p>

<p>The result is the following java source code:</p>

<pre><code>//keys generation
BLS01ParametersGenerator setup = new BLS01ParametersGenerator();
setup.init(PairingFactory.getPairingParameters(""g149.properties""));
BLS01Parameters bls01Parameters = setup.generateParameters();
BLS01KeyPairGenerator keyGen = new BLS01KeyPairGenerator();
BLS01KeyGenerationParameters KeyGenPar = new BLS01KeyGenerationParameters(null, 
bls01Parameters);
keyGen.init(KeyGenPar);
AsymmetricCipherKeyPair keyPair = keyGen.generateKeyPair();

//sign
String message = ""Help?"";
byte[] bytes = message.getBytes();
BLS01Signer signer = new BLS01Signer(new SHA256Digest());
signer.init(true, keyPair.getPrivate());
signer.update(bytes, 0, bytes.length);
byte[] signature = null;
try 
{
    signature = signer.generateSignature();
} 
catch (CryptoException e) 
{
    throw new RuntimeException(e);
}

//bytes[0] = (byte)(bytes[0] + 1);

//verify    
BLS01Signer verifier = new BLS01Signer(new SHA256Digest());
verifier.init(false, keyPair.getPublic());
verifier.update(bytes, 0, bytes.length);
boolean result = verifier.verifySignature(signature);

//
System.out.println(""Signature len = "" + signature.length);      
System.out.println(""Result = "" + result);
</code></pre>

<p>Up to here everything worked correctly, at least I think.
The next step I want to acieve is storing and retrieving public and private keys using files. 
I found that it's possible to get private and public keys as byte arrays using code as:</p>

<pre><code>...
byte[] PublicKeyBytes = ((BLS01PublicKeyParameters)(keyPair.getPublic())).getPk().toBytes()
...
</code></pre>

<p>But how can I do the reverse process to set public and private keys starting from bytes? 
Is this the correct way to store/retrieve keys in/from files?</p>
","","39","<java><encryption-asymmetric><jpbc>","0","","0","2019-03-13 13:55:13","","0","","","","","2019-03-13 13:55:13",""
"26543825","Does creating a new asymmetric key on a new database server causes old data invalidation?","<p>I don't know about encryption keys much. But I got a project where I need to transfer SQL Server database from one computer to another. I can't connect it online as the database needs to be local only. Also I generated create scripts of complete database using SSMS. But create scripts of asymmetric keys are not generated. I want to know that if I create asymmetric key with the password given by the project owner, will old data still be validated from it? I mean does asymmetric key is system independent?</p>
","<p>First, I would recommend getting an overview on column level encryption through a book, video, technical session during a SQL Saturday or other means. Even though I am going to provide the solution, you need a solid understanding of how the encryption system works so that you will understand how to avoid losing encrypted data by making a mistake. That said, the solution is to backup the database, then backup the Database Master Key providing a password to encrypt the key in the file specified. Migrate the files to the destination server then restore the database and restore the Database Master Key using the password previously provided. This will complete the encryption hierarchy. Since all database keys, including asymmetric and symmetric keys, are backed up with the database, they will be transferred to the destination server in the backup file. </p>
","38","<sql><asp.net><sql-server><database><encryption-asymmetric>","2","0","1","2016-12-01 14:18:47","","0","","1576363","","2014-10-24 19:59:56","2014-10-24 08:05:39",""
"52351233","How to dencrypt the data on the client side android","<p>I am using firebase database for storing my data and RSA algorithm to encrypt my chat messages. I am actually able to encrypt the data and store it there but unfortunately, I am not able to decrypt it as well as I do not know where I should call the decrypt method. I have a class which called RSA that contains two methods. the first one is encrypted which work pretty fine and the second one called decrypt which I do not where I should call it. 
**RSA class code **</p>

<pre><code>   public class RSA {
    KeyPairGenerator kpg;
    KeyPair kp;
    PublicKey publicKey;
    PrivateKey privateKey;
    byte[] encryptedBytes, decryptedBytes;
    Cipher cipher, cipher1;
    String encrypted, decrypted;

    //TODO:implementing Encryption method
    public String Encrypt(String plain) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IllegalBlockSizeException {
        kpg = KeyPairGenerator.getInstance(""RSA"");
        kpg.initialize(1024);
        kp = kpg.genKeyPair();
        publicKey = kp.getPublic();
        privateKey = kp.getPrivate();

        cipher = Cipher.getInstance(""RSA"");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        encryptedBytes = cipher.doFinal(plain.getBytes());

        encrypted = bytesToString(encryptedBytes);
        return encrypted;

    }

    //TODO:Here is the decryption methos
    public String Decrypt(String result) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {

        cipher1 = Cipher.getInstance(""RSA"");
        cipher1.init(Cipher.DECRYPT_MODE, privateKey);
        decryptedBytes = cipher1.doFinal(stringToBytes(result));
        decrypted = new String(decryptedBytes);
        return decrypted;

    }

    public String bytesToString(byte[] b) {
        byte[] b2 = new byte[b.length + 1];
        b2[0] = 1;
        System.arraycopy(b, 0, b2, 1, b.length);
        return new BigInteger(b2).toString(36);
    }

    public byte[] stringToBytes(String s) {
        byte[] b2 = new BigInteger(s, 36).toByteArray();
        return Arrays.copyOfRange(b2, 1, b2.length);
    }


}
</code></pre>

<p><strong>messages class</strong></p>

<pre><code>    public class Messages {
    private String Name, from;
    private String Message;
    private long Time;



    public Messages() {
    }

    public Messages(String name, String message, long time, String from) throws IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException {
        Name = name;
        Message = message;
        Time = time;
        this.from = from;
    }

    public String getName() {
        return Name;
    }

    public void setName(String name) {
        Name = name;
    }

    public String getMessage() {
        return Message;
    }

    public void setMessage(String message) {
        Message = message;
    }

    public long getTime() {
        return Time;
    }

    public void setTime(long time) {
        Time = time;
    }

    public String getFrom() {
        return from;
    }

    public void setFrom(String from) {
        this.from = from;
    }
}
</code></pre>

<p><strong>ChatClass</strong></p>

<pre><code>    private void PostMessages() {
                reference.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                if (dataSnapshot.exists()) {
                    String key = dataSnapshot.getKey();
                    String input = mInputText.getText().toString();
                    String name = dataSnapshot.child(""Name"").getValue().toString();
                    if (!input.equals("""")) {

                        final String MessagesText = mInputText.getText().toString();

                        final String TextMessages = MessagesText;

                        if (MessagesText==""""){
                            Toast.makeText(MainChatActivity.this, ""please write a message "",Toast.LENGTH_SHORT).show();

                        }else {
                            try {
                                DataEncrypte =  EncrypteandDicrypye.Encrypt(TextMessages).toString();
                            } catch (NoSuchAlgorithmException e) {
                                e.printStackTrace();
                            } catch (NoSuchPaddingException e) {
                                e.printStackTrace();
                            } catch (InvalidKeyException e) {
                                e.printStackTrace();
                            } catch (IllegalBlockSizeException e) {
                                e.printStackTrace();
                            } catch (BadPaddingException e) {
                                e.printStackTrace();
                            }

                            String messagngerSender = ""Messages/"" + Registerid + ""/"" + ChatUserKey;
                            String messangerReciverId = ""Messages/"" + ChatUserKey + ""/"" + Registerid;

                            final DatabaseReference MessagesId = UserMesages.child(""Messages"").
                                    child(Registerid).child(ChatUserKey).push();
                            String messages_pushId = MessagesId.getKey();

                            //String EncrypteMessage = Encrypte.Encrypt(MessagesText).toString();


                            Map messagesTextBody = new HashMap();
                            messagesTextBody.put(""Message"",DataEncrypte);
                            messagesTextBody.put(""Name"", name);
                            messagesTextBody.put(""Time"", ServerValue.TIMESTAMP);
                            messagesTextBody.put(""from"",Registerid);
                            Map messageDetails = new HashMap();
                            messageDetails.put(messagngerSender + ""/"" + messages_pushId, messagesTextBody);
                            messageDetails.put(messangerReciverId + ""/"" + messages_pushId, messagesTextBody);
                            UserMesages.updateChildren(messageDetails, new DatabaseReference.CompletionListener() {
                                @Override
                                public void onComplete(DatabaseError databaseError, DatabaseReference databaseReference) {
                                    if (databaseError != null) {
                                        System.out.println(""ChatError"" + databaseError.getMessage().toString());
                                    }
                                    mInputText.setText("""");
                                }

                            });

                        }


                        }

                    System.out.println(""Data is exist "" + dataSnapshot.child(""User type"").getValue().toString());
                }
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });

        }

    private void DisplayMessage() {

UserMesages.child(""Messages"").child(Registerid).child(ChatUserKey).addChildEventListener(new ChildEventListener() {
    @Override
    public void onChildAdded(DataSnapshot dataSnapshot, String s)
    {
        Messages messages = dataSnapshot.getValue(Messages.class);
        Messageslistt.add(messages);
        messagesAdapter.notifyDataSetChanged();



    }

    @Override
    public void onChildChanged(DataSnapshot dataSnapshot, String s) {

    }

    @Override
    public void onChildRemoved(DataSnapshot dataSnapshot) {

    }

    @Override
    public void onChildMoved(DataSnapshot dataSnapshot, String s) {

    }

    @Override
    public void onCancelled(DatabaseError databaseError) {

    }
});
</code></pre>

<p><strong>Lastly messges adapter class</strong></p>

<pre><code>    public class MessagesAdapter  extends 
    RecyclerView.Adapter&lt;MessagesAdapter.messagesViewHolder&gt;{
    private FirebaseAuth Mauth;
    private List&lt;Messages&gt;UserMessagesList ;



    public MessagesAdapter(List&lt;Messages&gt;UserMessagesList)
    {
        this.UserMessagesList = UserMessagesList;
    }

    @NonNull
    @Override
    public messagesViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {

        View v = LayoutInflater.from(parent.getContext()).
                inflate(R.layout.chat_msg_row,parent,false);
        Mauth = FirebaseAuth.getInstance();
        return new messagesViewHolder(v);

    }

    @Override
    public void onBindViewHolder(@NonNull messagesViewHolder holder, int position) {
        String CurrentUser = Mauth.getCurrentUser().getUid();

        Messages messages = UserMessagesList.get(position);
         String SenderID = messages.getFrom();

        System.out.println(""From""+SenderID);

        if (SenderID.equals(CurrentUser)){
            System.out.println(""SenderID""+SenderID);
            holder.messagesText.setBackgroundResource(R.drawable.bubble1);
            holder.messageUser.setTextColor(Color.GREEN);
            holder.messagesText.setGravity(Gravity.END);
            holder.messageUser.setGravity(Gravity.END);
        }else {
            holder.messagesText.setBackgroundResource(R.drawable.bubble2);
            holder.messageUser.setTextColor(Color.BLUE);
            holder.messagesText.setGravity(Gravity.START);
            holder.messageUser.setGravity(Gravity.START);
        }
        holder.messageUser.setText(messages.getName());
        holder.messagesText.setText(messages.getMessage());

    }
private void ChatAppearance(boolean isMe, RecyclerView.ViewHolder holder){

}
    @Override
    public int getItemCount() {

        return UserMessagesList.size();
    }

    public class messagesViewHolder extends RecyclerView.ViewHolder
    {
        public TextView messagesText;
        public TextView messageUser;

        public messagesViewHolder(View view)
        {
            super(view);


            messagesText = (TextView)view.findViewById(R.id.Sendmessagetxt);
            messageUser = (TextView)view.findViewById(R.id.author);
        }
    }
}
</code></pre>
","<p>You should call the RSA's Decrypt method in the <code>onBindViewHolder</code> &amp; set the decrypted text to the messagetextView.</p>

<pre><code>RSA rsa = new RSA():
String decryptedMessage = rsa.Decrypt(messages.getMessage());
holder.messagesText.setText(decryptedMessage);
</code></pre>
","38","<android><firebase><encryption-asymmetric><android-security>","0","0","1","2018-09-16 06:43:00","","0","","807126","","2018-09-16 06:18:55","2018-09-16 05:31:24",""
"50292250","Where to save client's public key and retrieve to encrypt data","<p>I have a public key of customer that I need to use to encrypt credentials and send to the customer to obtain an auth token that I will be using for all further communication with the customer services.</p>

<p>For testing purpose, I saved the public key into a file and I am able to successfully obtain the auth token.</p>

<p>Now, the question is, where do I need to store this key safely. Options that I can think of are web.config as it is not browsable, or keep it in a file. Both seems to be unsafe.</p>

<p>If I keep it in a file, can I save it into windows trusted store? If yes, how can I save it and since in the trusted store, I will have multiple such keys, how I will retrieve this particular key to encrypt the credentials next time when I need to encrypt.</p>

<p>I am using windows machine for production server and .NET to encrypt, just in case it makes difference.</p>
","<p>I think you can encrypt this certificate with another rsa key pair. Save key and encrypted data in different platform. For example save encrypted data in db and save rsa key in file system in protected folder. Protected folder can be user directory which has application user. Encrypt certificate out of the platform with separate tool. Don't save your rsa private key in application system.</p>
","36","<rsa><keystore><public-key-encryption><public-key><encryption-asymmetric>","0","0","1","2018-05-13 14:37:14","","3","","","","","2018-05-11 12:20:28",""
"26105555",".Net Asymmetric Encryption on a file 1 to 32 KB","<p>I am trying to asymmetric encryption on a file 1 to 32 KBytes and am running into exceptions being thrown becase of the size when I use the .Net classes.
I can do it for a file or key size that is in the 100 byte range without problems.
Thanks,
Allen</p>
","","35","<.net><encryption-asymmetric>","1","","0","2014-09-29 17:31:12","","2","","","","","2014-09-29 17:31:12",""
"37076723","How to make sure that only the authorized user can access a feature provided by the server?","<p>We are building an android application and one of its features is to book a cab service provider's cab (say an Uber).</p>

<p>We have an application specific user ID. Let us call it AUID. To book the cab, the application would Post a request to server and send AUID along with other relevant information (like lat, long etc). How do I make sure at the server end that the request is indeed coming from the correct user and it is safe to book the cab? In the current form, if a third party gets to know the AUID of another person, the third party can book a cab on behalf of that person. </p>

<p>One of the solutions I thought of was using asymmetric encryption. The application would hold the public key and the server would contain the private key. Instead of sending the user ID to the server, we'll instead send an encrypted key where the key would be AUID + timestamp encrypted using the public key. We'll then decrypt the message using private key at server end to obtain the AUID. If the timestamp at server does not lie within a certain interval of the timstamp sent by the client, we reject the request.</p>

<p>Is this a safe enough approach? Is there any other practice widely followed for such scenarios?</p>
","<p>What you propose is sensible: encrypt the AUID on the client app and verify on the server. As comments suggest, SSL is vital.</p>

<p>The problem is that if how to encrypt the AUID is in your app, it can be figured out by anyone dedicated enough.</p>

<p>You can drastically reduce the risks of fake requests by issuing a separate encryption key for each user.  This means that if someone cracks your code, they can still only spoof from one account.  However, once an attacker had decompiled your app, they could theoretically start new accounts, get a valid encryption key and spoof requests.</p>

<p>What you need for 100% reliability is some form of authentication which is not stored in the client app - like a password or TouchID on iOS or fingerprint api on Android M. So when a user orders a cab, they need to enter some piece of information which you also encode with the AUID and check on the server. That secret information is not stored in your app, so no-one can fake requests.</p>

<p>Requiring a password from a user is pretty inconvenient.  Fingerprint scanning is much easier and probably acceptable. You could also use a trust system - if the user has ordered cabs before and everything was OK, they can order without special authentication. Using Trust together with individual encryption keys is pretty effective because anyone trying to spoof requests would need to do a successful order before being able to spoof - which is probably too much hassle for them.</p>
","33","<security><authentication><encryption-asymmetric>","1","1","1","2016-05-14 03:27:38","37222179","1","","","","","2016-05-06 15:57:36",""
"47169390","Storing public key locally on android device","<p>I want to use A-symmetric encryption for my application.<br>
The application basically takes a photo and sends it to a server, I haven't written any code yet and am just going through this as a POC.<br>
I came across a problem that I solved before but now it's puzzling me again.<br>
Like I said I want to use Asymmetric encryption where the private key is located on my server, and the public key is stored locally and 'shipped' with each android app (I.E. including in its resources). I want to use the public key along with a <code>ByteOutputStream</code> or <code>EncryptedOutputStream</code> and send the information already encrypted to the server for decryption on site.<br>
My question is basically how safe is the process of encrypting the data i'm sending out to the server? Obviously I understand that there is no such thing as completely safe, but is this a good practice, is there something that's sort of an industry-standard? <br></p>
","<p>Copypaste from <a href=""https://security.stackexchange.com/questions/1751/what-are-the-realistic-and-most-secure-crypto-for-symmetric-asymmetric-hash"">this answer</a> regarding asymmetric cryptography.</p>

<p>The currently largest broken RSA key is a 768-bit modulus, and it took some huge effort (four years, and really big brains). 1024-bit keys are considered usable for short term security, although larger keys are encouraged. 2048-bit keys are appropriate. Using a key twice larger means 8 times more work for signing or decryption, so you do not want to overdo it. See this site for a survey of how RSA key length can be related to security.</p>

<p>ECDSA over a 256-bit curve already achieves an ""unbreakable"" level of security (i.e. roughly the same level than AES with a 128-bit key, or SHA-256 against collisions). Note that there are elliptic curves on prime fields, and curves on binary fields; which kind is most efficient depends on the involved hardware (for curves of similar size, a PC will prefer the curves on a prime field, but dedicated hardware will be easier to build with binary fields; the CLMUL instructions on the newer Intel and AMD processors may change that).</p>
","33","<java><android><encryption><encryption-asymmetric>","1","-1","1","2017-11-08 00:18:27","","4","","6007933","","2017-11-08 00:10:31","2017-11-07 23:59:43",""
"51770643","PGP File Encryption","<p>Using Bouncy Castle to encrypt a file, I am having trouble generating the private/public keys. The public key needs to be in the OpenSSH or RFC4716 format the problem is when I use ssh-keygen to create the keys they cannot be used to encrypt the file. Why is this? I even used ssh-keygen to export the keys into the RFC4716 format and still i was unable to use it to  encrypt the file.</p>
","<p>As Robert commented, these formats are not compatible. For PGP file encryption I will use the normally generated keys. Thanks again Robert.</p>
","31","<encryption><bouncycastle><public-key-encryption><encryption-asymmetric>","1","0","1","2018-08-10 19:07:42","","1","","5998036","","2018-08-09 15:24:07","2018-08-09 15:18:09",""
"58571622","How to accomplish assymetric encryption with Netty without SSL","<p>I have been trying for a while to do encryption in a netty chat program I created. I have been trying to add encryption WITHOUT a certificate or SSL by encrypting the messages themselves. I have tried AES encryption and it did ""succeed"" but the password to decrypt the messages was plain text so it didn't do anything. I have also tried RSA encryption but I can't get it to encrypt a JSON string message</p>

<p>I used the RSA encryption transformation: ""RSA/ECB/PKCS1Padding""</p>

<pre class=""lang-java prettyprint-override""><code>public static String encrypt(String plainText, PublicKey publicKey) throws BadPaddingException, IllegalBlockSizeException, InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException {

        Cipher cipher = Cipher.getInstance(StaticHandler.RSA_CIPHER_TRANSFORMATION);
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        return new String(cipher.doFinal(plainText.getBytes()), CharsetUtil.UTF_8);
    }
</code></pre>

<h1>How it works currently:</h1>

<p>The server generates a key pair only used in the initial handshake, then sends the public key to the client. Then the client generates a new key pair encrypted with the public key the server sent. Once the server receives the new key pair, it uses that instead of the one created in the initial handshake so the client can decrypt messages sent by the server.</p>

<p>But I can't seem to get it to work with sending a JSON string with the part of the connection handshake where the client generates a new keypair that the server will use to send encrypted messages back to the client.</p>

<p>I'm not necessarily asking for spoon feeding code but an explanation of how this can be handled better or an encryption protocol that is better suited for my means, though it is helpful to see code examples :p</p>

<pre class=""lang-java prettyprint-override""><code>javax.crypto.IllegalBlockSizeException: Data must not be longer than 501 bytes
        at com.sun.crypto.provider.RSACipher.doFinal(RSACipher.java:344)
        at com.sun.crypto.provider.RSACipher.engineDoFinal(RSACipher.java:389)
        at javax.crypto.Cipher.doFinal(Cipher.java:2164)
        at com.github.fernthedev.universal.encryption.EncryptionHandler.encrypt(EncryptionHandler.java:150)
        at com.github.fernthedev.universal.encryption.RSA.EncryptedStringEncoder.encode(EncryptedStringEncoder.java:49)
        at com.github.fernthedev.universal.encryption.RSA.EncryptedGSONObjectEncoder.encode(EncryptedGSONObjectEncoder.java:70)
        at com.github.fernthedev.universal.encryption.RSA.EncryptedGSONObjectEncoder.encode(EncryptedGSONObjectEncoder.java:16)
        at io.netty.handler.codec.MessageToMessageEncoder.write(MessageToMessageEncoder.java:89)
        at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:716)
        at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:763)
        at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:789)
        at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:757)
        at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:812)
        at io.netty.channel.DefaultChannelPipeline.writeAndFlush(DefaultChannelPipeline.java:1037)
        at io.netty.channel.AbstractChannel.writeAndFlush(AbstractChannel.java:293)
        at com.github.fernthedev.client.Client.sendObject(Client.java:270)
        at com.github.fernthedev.client.EventListener.received(EventListener.java:91)
        at com.github.fernthedev.client.netty.ClientHandler.channelRead(ClientHandler.java:71)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)
        at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)
        at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:328)
        at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:315)
        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:429)
        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:283)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)
        at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:287)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)
        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)
        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1422)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)
        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:931)
        at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
        at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:700)
        at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:635)
        at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:552)
        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:514)
        at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1044)
        at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
        at java.lang.Thread.run(Thread.java:748)
</code></pre>
","","31","<java><netty><encryption-asymmetric>","0","","0","2019-10-26 14:23:14","","3","","","","","2019-10-26 14:23:14",""
"57553525","How to Reproduce Following JAVA Encryption into NODEJS Equivalent (Either Using node-rsa or crypto module)?","<p>I have following java method where i need to convert into nodejs, the problems was the output from nodejs seems rather odd.</p>

<p>Here is my java code</p>

<pre><code>private static final String SIGN_ALGORITHMS = ""MD5WithRSA"";

    public static String sign(String content, String privateKey, String input_charset) {
            try {
                PKCS8EncodedKeySpec priPKCS8 = new PKCS8EncodedKeySpec(Base64.decode(privateKey));
                KeyFactory keyf = KeyFactory.getInstance(""RSA"");
                PrivateKey priKey = keyf.generatePrivate(priPKCS8);
                java.security.Signature signature = java.security.Signature.getInstance(SIGN_ALGORITHMS);
                signature.initSign(priKey);
                signature.update(content.getBytes(input_charset));
                byte[] signed = signature.sign();
                return Base64.encode(signed);
            } catch (Exception e) {
                e.printStackTrace();
            }

            return null;
        }
</code></pre>

<p>where:</p>

<p><code>content</code> is just regular string to encrypt e.g: <code>lorem ipsum</code>,</p>

<p><code>privateKey</code> is string representation of private key, and</p>

<p><code>input_charset</code> is <code>UTF-8</code></p>

<p>How do i get the value of <code>Base64.encode(signed)</code> in nodejs?</p>
","<p>Just use NodeJS in built Crypto functions:</p>

<p><a href=""https://nodejs.org/dist/latest-v10.x/docs/api/crypto.html#crypto_crypto"" rel=""nofollow noreferrer"">https://nodejs.org/dist/latest-v10.x/docs/api/crypto.html#crypto_crypto</a></p>
","30","<java><node.js><encryption-asymmetric>","0","0","1","2019-08-19 09:10:35","","0","","","","","2019-08-19 09:04:05",""
"34259670","Use Microsoft CryptoGraphicPublicBlobType.Capi1PublicKey in Java","<p>Public key is generated into WinRT application using the code below</p>

<pre><code>AsymmetricKeyAlgorithmProvider asymmetricKeyAlgorithmProvider = AsymmetricKeyAlgorithmProvider.OpenAlgorithm(AsymmetricAlgorithmNames.get_RsaPkcs1());
CryptographicKey cryptographicKey = asymmetricKeyAlgorithmProvider.CreateKeyPair(1024u);
IBuffer buffer = cryptographicKey.Export(3);
IBuffer buffer2 = cryptographicKey.ExportPublicKey(3);
byte[] inArray;
CryptographicBuffer.CopyToByteArray(buffer, ref inArray);
byte[] inArray2;
CryptographicBuffer.CopyToByteArray(buffer2, ref inArray2);
CommonMethods.PrivateKey = Convert.ToBase64String(inArray);
CommonMethods.PublicKey = Convert.ToBase64String(inArray2);
</code></pre>

<p>In ExportPublic Key 3 refers to CapiPublicKey. If I want to use the base64 encode public key string into java application how can I do that.</p>

<p>Java do not have any thing like CapiPublic Key. </p>
","<p>I could not find any direct method to do that. I first converted CapiPublicKey to X509 public key supported by java in WinRT itself.</p>

<p>then I used the generated public key into java.</p>
","30","<java><windows-runtime><encryption-asymmetric>","1","0","1","2016-01-04 07:38:10","","0","","","","","2015-12-14 04:15:01",""
"24171785","Check if a client did something within a specific timespan","<p>I'm working on an app project where I need to verify if a client/user did something within a specific timespan (e.g. responded within 10 seconds). The problem is that - as it is an app - the client could have a very slow connection or even a disconnect within that time so I wouldn't like to check it with server side timestamps when the request comes in.</p>

<p>Is there a way to check if a client did something within a specific timespan?</p>

<p>I don't need a specific language implementation, I'll find one or port one if required.</p>

<p>(PS: Tags are quite hard to chose for this question, I hope I got some correct ones)</p>
","<p>Have you checked out TimeSeal?</p>

<p>FICS (Free Internet Chess Server) uses it for latency compensation in online chess games.</p>

<p>It's closed source so people don't cheat heh heh, but there is OpenSeal, which is open source: <a href=""http://linuz.sns.it/~m2/openseal.c"" rel=""nofollow"">http://linuz.sns.it/~m2/openseal.c</a></p>

<p>You would need to change the parameters to fit your server as it points to FICS.</p>

<p>This does what I think you're looking to do though. It's in C, I'm not sure how you feel about that.</p>

<p>PyChess also has an open source timeseal. Here is the code in Python: <a href=""http://code.google.com/p/pychess/source/browse/lib/pychess/ic/TimeSeal.py?spec=svn6aae01bf2fdf49316e38319c93a200d67d5265fa&amp;r=6aae01bf2fdf49316e38319c93a200d67d5265fa"" rel=""nofollow"">http://code.google.com/p/pychess/source/browse/lib/pychess/ic/TimeSeal.py?spec=svn6aae01bf2fdf49316e38319c93a200d67d5265fa&amp;r=6aae01bf2fdf49316e38319c93a200d67d5265fa</a></p>

<p>I feel like OpenSeal s a bit easier to swallow though.</p>
","30","<time><client-server><client-side><encryption-asymmetric>","0","0","1","2014-06-11 20:24:52","24171955","0","","","","","2014-06-11 20:14:27",""
"54461495","Public Key Encryption - Using Java","<p>I'm trying to write a asymmetric key encryption using Java (without open source libraries like Apache CXF). </p>

<p>I'm able to do with Apache CXF, but without open source library - I hit the error ""given final block not properly padded"".</p>

<p>I need help with a Java sample code on how this can be achieved, using the below algo's:</p>

<ul>
<li><p>data encryption algo: 
<a href=""http://www.w3.org/2001/04/xmlenc#aes128-cbc"" rel=""nofollow noreferrer"">http://www.w3.org/2001/04/xmlenc#aes128-cbc</a></p></li>
<li><p>Key Wrap algo:
<a href=""http://www.w3.org/2001/04/xmlenc#rsa-1_5"" rel=""nofollow noreferrer"">http://www.w3.org/2001/04/xmlenc#rsa-1_5</a></p></li>
</ul>

<p>I'm trying to encrypt the soap-header --> usernametoken.</p>
","","29","<java><aes><rsa><public-key-encryption><encryption-asymmetric>","0","","0","2019-01-31 13:17:28","","2","","","","","2019-01-31 13:17:28",""
"58581139","RSA encryption with Stream in c#","<p>I know it's a dumb question, but...</p>

<p>I know how to encrypt with <code>RSACryptoServiceProvider.Encrypt(byte[])</code>. Is there any way to do this with streams in c#?</p>
","","29","<c#><.net><rsa><encryption-asymmetric>","-1","","0","2019-10-27 16:13:56","","2","","","","","2019-10-27 16:13:56",""
"32576745","how to prevent a malicious attack from an unknown person when he knows the public key of my asymmetric key encryption architectural system?","<p>I am using asymmetric encryption algorithm in my web application. The loophole is if some unauthorized person comes to know my public key , then he could make a malicious WebService call. How can I prevent this?</p>
","<p>The public key in an asymmetric algorithm is expected to be exactly that - public and therefore expected to be known by <em>everyone</em>. If you are trying to implement authentication by only distributing the public key to ""authorized"" users then your mechanism is fundamentally flawed.</p>

<p>A more usual way to do this would be to have your clients each generate their own asymmetric key-pair and provide you with the public key, whilst keeping the private key secure. The clients can then authenticate themselves by signing a message with their private key, which you would validate with their public key.</p>

<p>This being said I would strongly suggest using something like TLS with client certificate authentication to implement secrecy, integrity and authentication at the transport level rather than attempting to roll your own cryptosystem at the application level. It's likely to be far more secure than anything you'd implement yourself as well as being far easier for your clients to implement.</p>
","28","<security><encryption><public-key-encryption><encryption-asymmetric>","0","2","1","2015-09-15 03:26:41","","0","","","","","2015-09-15 02:25:11",""
"56090251","Elliptic Curve Cryptography with Python on Windows","<p>I'm looking for a way to generate keys for asymmetric cryptograpy via elliptic curves in Python, but all packages I was able to find only support UNIX systems. Anyone know a package that works on Windows?</p>
","","27","<python><elliptic-curve><encryption-asymmetric>","1","","0","2019-05-11 12:12:50","","1","","","","","2019-05-11 12:12:50",""
"58174895","How does an encryption algorithm actually encrypt data","<p>What I want to know, is not how encryption works, what are keys etc &lt;- I kinda got that, like how DH works, and I did learn asymmetric keys a while back, but I'll probably need to refresh on that.</p>

<p>What I want to know is how does the key turn some plaintext like ""HELLO"" into ciphertext such as ""MQPCT""</p>

<p>What actually happens to the string during the process, does each character get turned into a number somehow? That sort of thing</p>

<p>Hopefully my question makes sense</p>
","<p>To answer your question about what happens to the string during the process - the string is decoded into bits, then the bits are encrypted.  </p>

<p>Most modern encryption protocols ultimately use AES symmetric encryption to encrypt the message, using a secret key shared by both the sender of the message and the recipient.  The message is broken up into blocks of 128 bits (and usually padded), then the AES algorithm is used to encrypt these bits.  For information on how AES does this, see <a href=""https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Advanced_Encryption_Standard</a>.</p>
","24","<encryption><public-key-encryption><encryption-symmetric><encryption-asymmetric>","0","1","1","2019-09-30 21:44:07","","2","","","","","2019-09-30 20:28:02","2019-09-30 21:47:05"
"29438089","Do public keys HAVE to be used used to encrypt?","<p>My question is: Does the public key in a asymmetric key have to be used to encrypt data or can it go either way (be used to decrypt)?</p>
","<p>Public keys can only be used to encrypt data, and private keys can only be used to decrypt data.</p>

<p>If you could decrypt data using a public key, that defeats the purpose of encryption.</p>

<p>Imagine you put your public key on your Facebook profile so that people can encrypt emails to you if they wish. If public keys could decrypt, then anyone that viewed your profile would have the key to all your emails (that were encrypted using that key pair).</p>
","24","<encryption-asymmetric>","0","0","2","2015-04-03 19:38:35","29438156","0","","","","","2015-04-03 18:56:43",""
"29438089","Do public keys HAVE to be used used to encrypt?","<p>My question is: Does the public key in a asymmetric key have to be used to encrypt data or can it go either way (be used to decrypt)?</p>
","<p>In RSA the public and private key technically fulfill the same role, one can decrypt what the other encrypted. The only difference is that one is made available to all parties.</p>
","24","<encryption-asymmetric>","0","1","2","2015-04-03 19:38:35","29438156","0","","","","","2015-04-03 18:56:43",""
"54431852","asymmetrically encrypt string, save encrypted string and public key to property file to be read by different program","<p>I have a string that will be saved to .properties file that I do not want changed by a user. The .properties file is meant to be sent to that other user and at run time pull up the string that I do not want changed. my current solution is to symmetrically encrypt the string and save both the encrypted string and the the key to the .properties file which will then be decrypted at run time. The issue with this approach is that if the user decompiles the .class files, he can clearly see the method with which the string was encrypted (in this case the initiation vector for ""AES"" encryption) and repeat the encryption process with a different string, completely bypassing the security measure.
Is there a way to encrypt the string asymmetrically while still saving the public key with the encrypted string to the properties file for decryption at run time? From what I have read I think I need to use RSA, but everything I have found deals with public and private key objects which I do not think can be written to a properties file. Any help is greatly appreciated (even a completely different solution that using RSA)
Thank You!</p>
","<p>If the goal is that you want to ensure the value in the property file has not been modified (by the end user or anyone else), you can use a private key to sign the value. In the app that is distributed to the user, include the signed value and the public key in the properties file (not the private key).</p>

<p>In the app distributed to the user, use the public key to verify that the signed value was signed with the private key. If the value was modified, the verification of the signature with the public key will fail, so you know the value has been changed.</p>

<p>There's a chapter in the Java Tutorial that shows how to do this with classes provided in java.security : <a href=""https://docs.oracle.com/javase/tutorial/security/apisign/index.html"" rel=""nofollow noreferrer"">https://docs.oracle.com/javase/tutorial/security/apisign/index.html</a></p>
","23","<java><encryption-asymmetric>","0","0","1","2019-01-30 01:20:20","","1","","","","","2019-01-30 00:53:22",""
"58278562","Where can an app fetch a public key to validate a signed key?","<p>If I sign a public key with my own private key and the signed public key is loaded into a mobile app at runtime, how can the app validate the signature without embedding in the app the public key of the private key used to do the signing?</p>

<p>Makes sense?</p>

<p>What’s a secure place to grab the public key used for validation?</p>

<p>Perhaps it’s best to embed it. Little chance of tampering if it’s from App Store or Play Store. I can keep the private key on paper and worse case scenario everyone updates the app to get new public key.</p>
","","22","<security><encryption-asymmetric>","1","","0","2019-10-08 00:30:15","","3","","221683","","2019-10-08 00:30:15","2019-10-08 00:05:26",""
"53610892","Aren't all data exchanges through a webserver vulnerable to interception?","<p>As far as encryption protocols go, Whisper Systems has the gold standard - but ultimately, if you had complete access to the server, couldn't you just intercept the very first exchange (of keys) and create a man-in-the-middle receiver and sender to both parties?</p>

<p>After keys have been exchanged, then all future exchanges sent to the server are encrypted (and so interception at that point is not a major concern) - but my question is really about that first key exchange: Isn't that an inescapable vulnerability for anything passing through external equipment (short of meeting people and confirming keys in person)?</p>
","","21","<security><encryption><encryption-asymmetric>","0","","0","2018-12-04 10:31:32","","4","","","","","2018-12-04 10:31:32",""
"58014432","Extract public key from a weak client","<p>Let's say we have a client that uses asymmetric cryptography to communicate with a server. This could be SSL or just a custom encryption. </p>

<p>Now if we assume that the client's source code is easy to disassemble, can we extract the public key and hence send bogus messages to the server?
Anyway to avoid this? Consider that it is really hard to keep the client's source code safe. </p>
","","20","<ssl><public-key-encryption><encryption-asymmetric>","0","","0","2019-09-19 15:29:08","","5","","","","","2019-09-19 15:29:08",""
"57499696","Is it possible to eliminate private key attack vector when using JWTs for authentication?","<p>I envision the following authentication scheme with JWT:</p>

<ul>
<li>client authenticates against a <code>/login</code> API endpoint with <code>{ userName, password }</code></li>
<li>server verifies userName+password against the stored hashed credentials and issues a JWT token with a set of claims, signs that with a private key</li>
<li>client then uses the issued JWT token to authenticate any subsequent calls to the API while server verifies the token and applies authorization rules based solely on claims present in the presented token (statelessly)</li>
</ul>

<p>The signing key must be stored on server, and it creates a very valuable attack vector.</p>

<p>The potential attacker who obtains access to the private key can generate a JWT with any set of claims, impersonating any user, and can potentially extract all their data - without knowing the password.</p>

<p>How to use JWT for (stateless) authentication while eliminating the risk of an attacker using a stolen private key to impersonate any user without knowing their password?</p>
","<p>This question should be moved to <a href=""https://security.stackexchange.com"">https://security.stackexchange.com</a> . Lots of similar questions there with good <a href=""https://security.stackexchange.com/questions/12332/where-to-store-a-server-side-encryption-key"">answers</a>.</p>

<p>You're making a number of assumptions when going from ""the signing key must be"" available to ""available"" means it's ""stored on the server"" to ""attacker can who obtains access to the key"". Sure, if you store the private key in a plaintext file on a filesystem with public read, that's one threat model. If you have the key in, say, a HSM that's a whole different animal.</p>

<p>Broad answer: there are a number of key management best practices. For example, <a href=""https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html"" rel=""nofollow noreferrer"">OWASP cheatsheet</a> has some recommendations:</p>

<blockquote>
  <ul>
  <li>Developers must understand where cryptographic keys are stored within
  the application. Understand what memory devices the keys are stored
  on. </li>
  <li>Keys must be protected on both volatile and persistent memory,
  ideally processed within secure cryptographic modules. </li>
  <li>Keys should
  never be stored in plaintext format. </li>
  <li>Ensure all keys are stored in
  cryptographic vault, such as a hardware security module (HSM) or
  isolated cryptographic service.</li>
  </ul>
</blockquote>

<p>...and so on. </p>

<p>You can also prepare for a worst-case scenario of your key being stolen by considering a more benign use case of rotating the keys.</p>
","20","<security><authentication><jwt><encryption-asymmetric>","0","0","1","2019-08-15 16:32:28","","0","","163393","","2019-08-15 05:59:26","2019-08-14 17:48:17",""
"29610932","Comparison of digitally signed string","<p>Is it possible to digitally sign a string (Using JCA) and then compare the same by creating another string which is digitally signed as the previous one.</p>

<p>Scenario:
I have a product details which needs to be digitally signed (using JCA or any other API) and passed it to the client. The client which is state-full has to hold this data and then need to pass this on the consecutive calls. The same product details which present in the payload is then passed in the consecutive calls will be retrieved and again the signature is created and then compared it against the previously sent. If both are not same then an error will be thrown. Is this possible ?     </p>
","","17","<digital-signature><encryption-asymmetric><jca>","0","","0","2015-04-13 16:59:25","","2","","","","","2015-04-13 16:59:25",""
"57358534","Exposing PublicKeysetHandle","<p>I am using, or trying to use, the Google Tink libraries. I want to be able to sign a data block with my private key, and then send that to the server. The server needs to validate the data block signature on receipt. In the use case that will be many senders, and hence many public keys. </p>

<p>My problem is that Google Tink does not expose the PublicKeysetHandle and won't serialize it. This means the when setting up an account, the sender can't transmit the public key. </p>

<p>The only ways I have found are to either write the public key to a file, read the file as JSON, and send JSON, and then delete the file. OK, so this only has to happen at account configuration, but it seems a messy way to do it. </p>

<p>Otherwise, I have to put the key in to a key management system. </p>

<p>Anyone resolved this?</p>
","","17","<encryption-asymmetric><tink>","0","","0","2019-09-17 18:25:56","","0","","","","","2019-08-05 12:23:33",""
"58724060","How to generate Public and private keys for encryption using ATECC608A in C","<p>I am implementing encryption and decryption of data using the ATECC608A chip. I need to know how to generate public and private keys using C programming. I am working on Keil. Are there any drivers available for this? I need to implement it using I2C interfacing.</p>

<p>Thank you</p>
","","14","<encryption><public-key-encryption><i2c><encryption-asymmetric><data-security>","0","","0","2019-11-06 06:11:30","","3","","","","","2019-11-06 06:11:30",""
"54466295","How can I identify the type of Encryption used for this Key","<p>Hey this is a Public Key for Verification of a signature.</p>

<p><code>PTVW1ReUO1MoUwC71q2hHaZi4lbsYcaKcxPZikImYYN9gBJtnyy7phnkDOcoib_kSU3M98OZ_CmXINBc0FmYEBcecp-FS2ACcTIUnz2IdPcC5KRNoQrqxsExgbikmLXT</code></p>

<p>It's 96 bytes long with the first four bytes being</p>

<pre><code>61

53

86

213
</code></pre>

<p>And this is the function to turn it back to an Array Buffer.</p>

<pre><code>thing = thing.replace(/-/g, '+').replace(/_/g, '/');
// base64 to Uint8Array
var str = window.atob(thing);
var bytes = new Uint8Array(str.length);
for (var i = 0; i &lt; str.length; i++) {
    bytes[i] = str.charCodeAt(i);
}
thing = bytes;
</code></pre>

<p>Does anyone know a good way to determine what method of encryption was used to form the key.</p>

<p>It comes from a U2F Fido... thingy</p>

<pre><code>{
        'status':'ok',
        'errorMessage':'',
        'challenge':'eJVGU35uQVHxcOVTypKh8xbPMHcKgC3JVvI9BHWALdpZkaIkIFhnXsADpRUmKzyyniQVJyj3TXm4_iycqKNyyw',
        'timeout':60000,
        'allowCredentials':[
                        {'id':'PTVW1ReUO1MoUwC71q2hHaZi4lbsYcaKcxPZikImYYN9gBJtnyy7phnkDOcoib_kSU3M98OZ_CmXINBc0FmYEBcecp-FS2ACcTIUnz2IdPcC5KRNoQrqxsExgbikmLXT','type':'public-key'},

        ]
    }
</code></pre>
","","11","<public-key-encryption><encryption-asymmetric><fido-u2f>","0","","0","2019-01-31 17:38:03","","0","","","","","2019-01-31 17:38:03",""